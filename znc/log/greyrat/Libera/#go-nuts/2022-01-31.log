[00:02:17] <be3uykpy> tried, stdout to a file, empty.. and no error - wth.
[00:03:54] <be3uykpy> ok ok ok
[00:04:04] <be3uykpy> ignore your last part fizzie
[00:04:09] <be3uykpy> caught the error!
[00:04:14] <be3uykpy> ignored*
[00:04:18] <be3uykpy> via the file
[00:04:20] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[00:04:22] <be3uykpy> stderr that is
[00:04:32] <be3uykpy> interesting :O
[00:04:52] <be3uykpy> more interesting why command.Run completes successfully?
[00:05:57] <foobaz> maybe it failed with command.Start() because you weren't attaching anything to command.Stderr
[00:06:29] <foobaz> if the program tries to write to stderr, and has nowhere for that to go, i'm not sure what happens
[00:06:39] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:08:01] <fizzie> os/exec connects all the three standard streams to /dev/null by default, if they're never set in the Cmd struct. So writes to it should just be discarded.
[00:09:01] <fizzie> Does "completes successfully" mean "returns a nil error"? Because that should normally mean the command exited with exit status 0. (Of course there's nothing preventing a command from "failing" and printing an error, yet still returning a 0 exit status, other than conventions.)
[00:14:16] <be3uykpy> ah yeah, nil error
[00:14:23] <be3uykpy> that's what i meant
[00:14:53] <be3uykpy> but yeah i agree, it likely returns exit 0, but i thought .Run does some magic by reading stderr
[00:15:09] <be3uykpy> and knows applicative error happened, regardless of exit code
[00:15:49] *** Quits: marius_m (~marius@84.211.92.9) (Quit: Leaving)
[00:16:22] <be3uykpy> i don't know not following which convention is worse :p
[00:16:32] <be3uykpy> not returning exit 1 when u should, or writing to stderr when u shouldn't
[00:17:11] <foobaz> lots of programs write to stderr even when there is no error, like to report on progress or give other informative messages
[00:18:46] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[00:18:47] *** Joins: wyatt (~wyatt@2600:6c4a:407f:f501:781d:f1b9:7c42:1265)
[00:19:22] *** Quits: wyatt (~wyatt@2600:6c4a:407f:f501:781d:f1b9:7c42:1265) (Client Quit)
[00:19:35] *** Joins: marius_m (~marius_m@84.211.92.9)
[00:19:55] *** Joins: wyatt (~wymiller@2600:6c4a:407f:f501:781d:f1b9:7c42:1265)
[00:21:18] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[00:22:52] <b0nn> logs
[00:24:36] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:26:17] *** Quits: wyatt (~wymiller@2600:6c4a:407f:f501:781d:f1b9:7c42:1265) (Quit: wyatt)
[00:26:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:26:46] *** Parts: bancroft (~bancroft@user/bancroft) (WeeChat 3.2)
[00:26:58] *** Joins: wymiller_ (~wymiller@2600:6c4a:407f:f501:781d:f1b9:7c42:1265)
[00:27:15] <senoraraton> So I have a database that is defined as db in my main().  I have a route handler for login functions, but login() isn't within the scope of main() so it doesn't have access to my database calls.  I can't pass it as a paramater because http.HandleFunc expects a writer/response.  How do I do this?
[00:29:09] <senoraraton> login() needs to call my helper function DbExec which runs db.Exec() on the db provided to it, because it needs to query the DB to check if the user exists, and if not create.
[00:29:52] <b0nn> senoraraton: the normal way is for the package that defines you handler to have a type that holds things like loggers and databases, and to inject into that type (at creation time) a reference to the db (and logger) that it will be expected to use
[00:30:11] <b0nn> sorry, not the "normasl" way, more the "best practice" way
[00:30:40] <senoraraton> Currently everything is just in main.go  So I create a struct that holds that data, is that globally scoped?
[00:31:19] <b0nn> ok, yesterday I linked you to an article on scopes, did you get a chance to read it, and did it make se4nse to you?
[00:31:37] <senoraraton> I honestly don't remember.
[00:31:48] * b0nn is not planning to say "RTFM" I am trying to ascertain where your understanding is
[00:32:45] <senoraraton> Relink it, I'll read it, lemme actually see if I still have it open.
[00:32:54] <b0nn> So, in Go, scope is at package level (what you are referring to as global), then function level, then block level
[00:33:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:50b5:b57f:7251:ce23) (Ping timeout: 245 seconds)
[00:33:51] <senoraraton> But only if its defined at that scope.  Essentially what I'm asking is, is "global" scope bad, because everywhere says global scope is bad.
[00:34:11] <senoraraton> So if I define my database struct at package level, that is correct and "ok"?
[00:34:50] <b0nn> ok, the problem with "global" *and* to a lesser extent "package" scope, is concurrency
[00:35:27] <b0nn> if you and I share a resource, because it's owned by the irc channel, we have to sunchronise things between us
[00:35:34] <senoraraton> Sure, I have no database locks.  Honestly its way beyond the scope of a single user application to necessitate it, and its a much higher level problem than what I'm working on, and a problem for future me IMHO
[00:35:47] <b0nn> whereas if I have my own personal, and you have your own personal, it doesn't matter
[00:36:10] <b0nn> IIRC you are building a portfolio of your skills
[00:36:34] <senoraraton> I'm building a blog to be specific, which will then function as a backbone for the portfolio, yes.
[00:36:58] <senoraraton> I'm just gonna declare the struct at package level, and be happy with it, it seems the simplest solution.
[00:37:27] <foobaz> senoraraton: use the global, you'll be fine
[00:37:56] <b0nn> Ok, to save you some hassle MOST DB drivers implement a pool in the background which allows multi user access without drama (and the DB itself manages transactions that ensure that accessisn't causing races)
[00:38:36] <senoraraton> I'm using pq(postgresql)
[00:38:57] <foobaz> globals are considered poor practice in many situations, but i think for your database, it's allowable
[00:39:16] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[00:39:28] <foobaz> b0nn is right about concurrency being a potential issue, you should not ignore that
[00:40:02] <foobaz> it's pretty easy to test for concurrency issues in go, run your program with the race detector and it will tell you about any issues
[00:40:32] <foobaz> you may end up needing locks, or maybe not, but you need to check
[00:42:14] <foobaz> you really don't want any race conditions, they are some of the most dangerous bugs to have
[00:42:32] *** Joins: bluedust (~bluedust@103.161.144.140)
[00:43:11] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:44:31] <senoraraton> Wait though, if I declare type database struct { db *sql.DB } outside of main() then when I init the db in main, store the pointer in database{db}, that is scoped to main() still right?
[00:45:03] <senoraraton> Or is it scoped at the package level, because the struct was declared at the package level?
[00:45:21] *** Quits: jpw_ (~jpw@user/jpw) (Remote host closed the connection)
[00:45:34] <b0nn> the declaration *and* instantiation needs to be done in the package scope
[00:45:36] <foobaz> it's complicated because you need to consider the pointers and the structure they point at separately
[00:45:56] <b0nn> Although you don't need to put the db in it in the package scoped instantiation
[00:45:58] <foobaz> not true, it's safe to do the instantiation in main(), as long as you make sure it takes place before anything else could possibly try to use it
[00:46:19] <b0nn> foobaz: var Foo T in package main
[00:46:27] <foobaz> so there are two *sql.DB pointers, one scoped in main and one as a global variable
[00:46:32] <b0nn> anything declared in main() stays in main()
[00:46:53] <foobaz> but there is only one database structure, which is not scoped in either main or globally, you only have pointers to it
[00:47:05] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Ping timeout: 252 seconds)
[00:47:14] <b0nn>  I declare type database struct { db *sql.DB } outside of main()
[00:47:15] <foobaz> i.e. there is no sql.DB (without the *) variable type in your program
[00:47:34] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 260 seconds)
[00:48:11] <foobaz> the declaration must be done in package scope, but the instantiation can be done in main()
[00:48:27] <b0nn> senoraraton: type Foo struct {db *sql.DB } needs to be at package level AND var packageFoo Foo ALSO needs to be package level
[00:48:56] <senoraraton> So how do I DO that?  How do I get the *sql.DB pointer that is scoped in main "out" of main and into package level?
[00:49:09] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:49:14] <foobaz> packageDB = mainDB
[00:49:18] *** Joins: rcernin (~rcernin@101.189.141.138)
[00:49:23] <b0nn> by putting it into packageFoo which is scoped to main
[00:49:37] <senoraraton> I'm so confused.
[00:49:40] <foobaz> or actually, it would be simpler to not even declare a db in main(), assign directly to the global db
[00:49:58] * b0nn groans
[00:49:59] <senoraraton> Can I just run code that isn't within a function though?
[00:50:13] <foobaz> you can, but you won't be able to handle errors
[00:50:17] <senoraraton> Because if I put it in a function, it immediately becomes scope to that function.
[00:50:22] <foobaz> not true
[00:50:22] <b0nn> yes
[00:50:26] <senoraraton> Which now means I don't have package level scope.
[00:50:33] <b0nn> you can put var Foo in main
[00:50:34] <foobaz> you can assign to a global variable from within a function
[00:50:39] <senoraraton> You are both saying two contradictory things.
[00:50:48] <b0nn> its' the nomenclature
[00:51:06] <b0nn> 08:18 < b0nn> senoraraton: type Foo struct {db *sql.DB } needs to be at package level AND var packageFoo Foo ALSO needs to be
[00:51:27] <b0nn> so if you put ^ that code outside main() you can assign to your heart's content
[00:51:40] <foobaz> senoraraton: https://go.dev/play/p/JIZoc984FF-
[00:51:58] <foobaz> x is declared globally, but assigned in main
[00:52:12] <b0nn> which is what I have said several times
[00:52:13] <foobaz> but notice that the assignment is not restricted to main, the other function sees the value
[00:52:26] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[00:52:28] <foobaz> it's the same with your database, you can declare it globally in package scope, but assign it in main
[00:52:53] <foobaz> if the "var x int" was inside main(), this code would not compile, because foo() wouldn't have access to x
[00:53:17] <senoraraton> Sure, that seems at odds with what b0nn was saying though, that I need to make the assignment at a package level
[00:53:23] <foobaz> i disagree
[00:53:28] <b0nn> senoraraton: the problem is that a type declaration and a variable declaration do slightly different things (which is why I used the word 'instantiation, probably incorrectly) for the variable
[00:57:48] <senoraraton> This code is hideous  dbase.db.dbExec()
[00:58:00] <senoraraton> But it works
[01:01:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:3db3:b1d2:4da9:9983) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:03:01] <senoraraton> Okay it doesn't work.  How do I declare, but not instantiate a struct?
[01:03:18] <senoraraton> Because I have to decalre it at package level, and then assign it in main()
[01:03:19] <b0nn> var Foo T
[01:03:46] <b0nn> where T is the struct name
[01:05:04] <senoraraton> So -> type database struct { db *sql.DB }  var dbase database
[01:05:29] <senoraraton> Then if I want to reference dbExec in db the call will be dbase.db.dbExec(command)?  That doesn't work.
[01:06:46] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[01:07:01] <senoraraton> Even though it shows up in my autocomplete
[01:08:16] <senoraraton> I'm dumb
[01:08:31] <senoraraton> This spaghetti is confusing, and this can't be the right way to do it.
[01:09:04] <be3uykpy> thanks everyone for assisting, i figured out the crash reason, then also properly configured stderr and stdout now, all ok.
[01:09:06] <be3uykpy> thanks again
[01:12:52] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[01:14:47] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:18:03] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Client Quit)
[01:18:07] *** Joins: goldfish (~goldfish@user/goldfish)
[01:22:59] *** Quits: goldfish (~goldfish@user/goldfish) (Client Quit)
[01:28:49] *** Quits: RaySl (~raysl@sdf1.xen.prgmr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:28:54] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[01:30:43] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[01:31:14] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:33:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[01:34:39] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:37:05] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:37:11] *** Joins: citizen_stig (~citizen_s@2001:982:9f64:1:a4e3:ad4b:910b:9e90)
[01:37:23] *** Joins: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com)
[01:51:32] *** Quits: citizen_stig (~citizen_s@2001:982:9f64:1:a4e3:ad4b:910b:9e90) (Quit: Textual IRC Client: www.textualapp.com)
[01:52:39] *** Joins: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com)
[01:53:02] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[01:53:05] *** Quits: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com) (Client Quit)
[01:53:41] *** Quits: flughafen (~flughafen@p5796945c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[01:54:36] *** Joins: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com)
[01:55:10] *** Quits: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com) (Quit: leaving)
[01:55:16] *** Quits: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com) (Client Quit)
[01:55:32] *** Joins: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com)
[01:55:37] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[01:57:25] *** Joins: connor_k (~connor_k@ip70-179-143-145.fv.ks.cox.net)
[02:01:02] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:01:06] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:02:01] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[02:03:20] *** Joins: mickey8 (~user@user/mickey)
[02:18:56] *** Quits: jjonah (~jjonah@p200300d5d73fe300dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:19:46] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[02:21:15] *** Joins: bancroft (~bancroft@user/bancroft)
[02:29:34] <bancroft> i'm not sure how to investigate sigfaults in cgo, and I don't know what the problem is with this binary. The line in the traceback is further along than the print statements and I dont understand how to fix it https://bpa.st/HW7A
[02:31:20] <b0nn> bancroft: I think the first question that needs to be answered is: Can you replicate the segfault without Go, that is, if you create a C program that makes the call does the code segfault
[02:31:34] <bancroft> b0nn: it does not
[02:31:47] <b0nn> Then the next step would be checking that the Go call to the code is correct
[02:31:54] <bancroft> I wrote it in C first with the same test.bundle file
[02:32:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:32:51] <bancroft> ok, well maybe I should start with looking at ioutil.ReadFile
[02:32:56] <foobaz> you should check the return value of NSCreateObjectFileImageFromFile()
[02:33:03] <DHowett> i'm surprised ioutil.ReadFile("test.bundle") works -- bundles on MacOS are almost always _directories_
[02:33:36] <foobaz> also check the value of fileImage after the call to NSCreateObjectFileImageFromFile() to see if it was actually set or if it's still nil
[02:34:17] <bancroft> DHowett: yes I thought so too, but test.bundle is a single file, output of file is test.bundle: Mach-O 64-bit bundle x86_64
[02:34:31] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 245 seconds)
[02:34:46] <DHowett> huh! neat
[02:36:59] *** Joins: rcernin (~rcernin@101.189.141.138)
[02:37:05] <bancroft> foobaz: extern NSObjectFileImageReturnCode NSCreateObjectFileImageFromFile(const char* pathName, NSObjectFileImage *objectFileImage) so I guess it's NSObjectFileImageReturnCode. Should I store it even if I don't need it or check what it is in case the command failed a-la if not nil?
[02:37:24] <bancroft> I'll check what it is
[02:37:53] <foobaz> you can read the source at https://opensource.apple.com/source/dyld/dyld-519.2.1/dyld3/APIs_macOS.cpp.auto.html
[02:38:05] <foobaz> it seems the two possible return values are NSObjectFileImageFailure and NSObjectFileImageSuccess
[02:38:46] <foobaz> if you get the former you should not proceed to call NSLinkModule()
[02:40:58] *** Quits: aead (~aead@user/aead) (Ping timeout: 260 seconds)
[02:41:06] <bancroft> am I reading this right? 0 is a failure?
[02:41:29] <bancroft> https://opensource.apple.com/source/cctools/cctools-466/include/mach-o/dyld.h.auto.html because of the enum
[02:42:13] <foobaz> heh
[02:43:23] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 250 seconds)
[02:51:39] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c98c:aeeb:469f:c2bc)
[02:52:19] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c98c:aeeb:469f:c2bc) (Client Quit)
[02:52:41] *** Joins: rcernin (~rcernin@101.189.141.138)
[03:01:17] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 240 seconds)
[03:07:54] *** Joins: droopsnoot (~baksa@20014C4E1D0A01007002FFB57F4EC22E.dsl.pool.telekom.hu)
[03:09:46] *** Parts: droopsnoot (~baksa@20014C4E1D0A01007002FFB57F4EC22E.dsl.pool.telekom.hu) ()
[03:13:58] *** Quits: ilpanda (ilpanda@user/ilpanda) (Ping timeout: 250 seconds)
[03:17:35] *** Joins: jjonah (~jjonah@p200300d5d7418c00dea632fffeb3342f.dip0.t-ipconnect.de)
[03:22:39] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:29:54] *** Joins: ilpanda (ilpanda@2607:5300:60:21b::1)
[03:42:56] *** Joins: mickey81 (~user@user/mickey)
[03:45:01] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[03:45:01] *** mickey81 is now known as mickey8
[03:46:14] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[03:48:23] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:52:47] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:53:48] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:54:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[03:55:10] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 260 seconds)
[03:57:35] *** Quits: ilpanda (ilpanda@2607:5300:60:21b::1) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[03:59:27] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[04:01:13] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[04:10:35] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[04:10:38] *** Joins: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com)
[04:13:19] *** Quits: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[04:23:28] *** Joins: pepee (~pepee@user/pepee)
[04:26:38] *** Quits: locrian9_ (~mike@cpe-104-173-20-162.socal.res.rr.com) (Quit: leaving)
[04:29:35] *** Quits: telboon (~telboon@user/telboon) (Remote host closed the connection)
[04:29:59] *** Joins: telboon (~telboon@user/telboon)
[04:34:57] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 256 seconds)
[04:41:11] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 245 seconds)
[04:41:13] *** Quits: jjonah (~jjonah@p200300d5d7418c00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:41:34] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[04:44:55] *** Joins: bluedust (~bluedust@103.161.144.140)
[04:45:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:45:06] *** Joins: trafficjam (~qubes@2001:8004:1500:3ec6:e7c5:bbe0:fa5e:25ae)
[04:45:32] *** Joins: telboon (~telboon@user/telboon)
[04:45:33] <trafficjam> what's wrong with this code? https://dpaste.org/zLZF
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:57] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[04:49:04] *** Joins: mud (~mud@user/kadoban)
[04:50:11] <trafficjam> got it
[05:00:06] *** Joins: arinov (~arinov@213.194.126.155)
[05:03:04] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[05:06:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:06:57] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 240 seconds)
[05:08:06] *** Joins: fikran (~fikran@user/fikran)
[05:11:11] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:15:17] *** Quits: trafficjam (~qubes@2001:8004:1500:3ec6:e7c5:bbe0:fa5e:25ae) (Ping timeout: 240 seconds)
[05:17:32] *** Joins: trafficjam (~qubes@2001:8004:1520:2a2f:8be5:c602:812c:34dd)
[05:18:58] *** Joins: R2robot (~R2robot@user/r2robot)
[05:23:22] *** Joins: yoonkn (~user@175.197.208.79)
[05:29:18] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[05:29:55] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[05:34:06] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 245 seconds)
[05:36:00] *** Joins: haliucinas (~haliucina@5.20.153.21)
[05:48:34] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:51:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[05:54:51] *** Joins: califax- (~califax@user/califx)
[05:56:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:904d:637b:7fe7:d86b)
[05:57:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:57:12] *** califax- is now known as califax
[05:59:28] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[06:01:11] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:904d:637b:7fe7:d86b) (Ping timeout: 245 seconds)
[06:10:15] *** Quits: internut (~internut@2601:280:4e00:7b70:307e:9674:ca78:b410) (Remote host closed the connection)
[06:10:21] *** Joins: eXtr3m0_ (~eXtr3m0@p54861c9e.dip0.t-ipconnect.de)
[06:11:11] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 245 seconds)
[06:15:22] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:15:59] *** Quits: trafficjam (~qubes@2001:8004:1520:2a2f:8be5:c602:812c:34dd) (Ping timeout: 252 seconds)
[06:18:38] *** Joins: trafficjam (~qubes@1.145.225.118)
[06:20:50] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[06:21:42] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[06:25:15] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 250 seconds)
[06:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:33:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:20] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:54:37] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-83-174-93-56-58.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:59:10] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[07:02:39] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::3385)
[07:06:02] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 260 seconds)
[07:07:42] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::3385) (Quit: lainon)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:13:16] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[07:13:59] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:14:46] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[07:15:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:17:27] *** Joins: fikran (~fikran@user/fikran)
[07:19:20] *** Joins: JPT (~jpt@classified.name)
[07:19:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[07:29:35] *** Joins: crashrep (~crashrep@user/crashrep)
[07:39:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:40:21] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:41:26] *** Joins: Atque (~Atque@user/atque)
[07:43:15] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 250 seconds)
[07:43:30] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 250 seconds)
[07:45:20] *** Joins: trafficjam (~qubes@2001:8004:1520:54b1:f1a0:f6d5:1aac:2ec5)
[07:48:33] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[08:09:20] *** Joins: bluedust (~bluedust@103.161.144.140)
[08:11:29] *** Joins: yoonkn (~user@175.197.208.79)
[08:15:23] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[08:16:12] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:23:48] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 250 seconds)
[08:24:54] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[08:50:01] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:53:37] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[08:53:50] *** Quits: trafficjam (~qubes@2001:8004:1520:54b1:f1a0:f6d5:1aac:2ec5) (Ping timeout: 252 seconds)
[08:55:48] *** Joins: trafficjam (~qubes@2001:8004:1520:2a61:3f4e:ee1d:8b4e:77ed)
[09:02:30] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[09:02:37] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:08:39] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:12:05] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[09:13:28] *** Joins: jkl (~jkl@user/jkl)
[09:33:00] *** Parts: nathanael (~nathanael@user/nathanael) ()
[09:33:37] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[09:34:22] *** Joins: mickey85 (~user@user/mickey)
[09:34:42] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[09:34:43] *** mickey85 is now known as mickey8
[09:35:22] *** Joins: DogHackit (~doghackit@c-76-27-57-63.hsd1.ut.comcast.net)
[09:36:22] <DogHackit> What is the recommended way to use .env in Go?
[09:36:51] <DogHackit> I see Viper and GoDotEnv mentioned.
[09:39:08] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:39:22] <foobaz> both look good to me, but viper offers a lot of functionality beyond just dotenv
[09:39:47] <foobaz> i say use GoDotEnv if all you need is dotenv, use Viper if you want to take advantage of its extra features
[09:40:28] <foobaz> you can see stats on how many go projects use each library on pkg.go.dev
[09:40:28] <foobaz> https://pkg.go.dev/github.com/spf13/viper
[09:40:33] <foobaz> https://pkg.go.dev/github.com/joho/godotenv
[09:40:57] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[09:41:59] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 250 seconds)
[09:43:06] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[09:43:43] *** Joins: bluedust_ (~bluedust@117.241.177.177)
[09:44:26] <DogHackit> Thanks for that info, foobaz!
[09:46:37] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 256 seconds)
[10:04:40] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:08:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:08:56] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[10:09:50] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[10:11:05] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[10:11:26] <j416> or just use something to set your actual environment from the .env file, outside of your program
[10:11:36] <j416> they are environment variables, afterall
[10:12:14] *** Joins: telboon (~telboon@user/telboon)
[10:13:14] *** Joins: fef (~thedawn@user/thedawn)
[10:17:54] *** Quits: bluedust_ (~bluedust@117.241.177.177) (Remote host closed the connection)
[10:21:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[10:24:20] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[10:29:31] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 245 seconds)
[10:36:31] *** Joins: xsteadfastx (~marv@62.176.255.180)
[10:37:26] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 245 seconds)
[10:38:45] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 256 seconds)
[10:40:56] *** Quits: rcernin (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[10:41:59] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[10:49:59] *** Joins: Atque (~Atque@user/atque)
[10:51:06] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[10:58:27] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:58:47] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:02:35] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[11:05:22] *** Joins: kochchef (~quassel@80.146.255.46)
[11:06:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:06:50] *** Joins: ert (~ert@2001:4b99:1:1:216:3eff:fee5:446f)
[11:08:44] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Quit: Leaving)
[11:11:29] *** Joins: bluedust (~bluedust@117.241.177.177)
[11:15:18] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[11:15:19] *** Joins: flughafen (~flughafen@p2e55d2b5.dip0.t-ipconnect.de)
[11:15:33] <bq> Is there a way I can configure a channel such that the receiver only gets the most recently sent item? I'm getting data trickled to me at a fixed rate, the most recent of which my prometheus exporter needs to access, and I'm trying to avoid having shared storage protected by a mutex
[11:16:05] *** Quits: Fuzai (~steph@50.54.159.160) (Remote host closed the connection)
[11:17:31] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[11:22:21] *** Quits: bluedust (~bluedust@117.241.177.177) (Remote host closed the connection)
[11:23:21] *** Joins: Atque (~Atque@user/atque)
[11:26:25] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[11:26:39] *** Joins: absc (~absc@81.31.144.28)
[11:26:46] <j416> bq: channels are fifo by design; if you want something else, you'll have to build that.
[11:27:13] <bq> Hmm thought so
[11:27:42] <j416> you could send data over the channel and have a single goroutine store the last one?
[11:27:56] <j416> of course you'll need to protect that if something else is accessing it
[11:27:57] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[11:28:36] <bq> Yeah I end up in the same boat of needing protection
[11:28:55] <j416> still, it'd be a single path for multiple writers so risk for bottleneck, of course
[11:29:06] <bq> I just realised RWMutex is a thing... lol
[11:29:10] <j416> :)
[11:31:55] <bq> Yeah that fixes most of the "worrying" performance bottleneck I had. Back to ~8k req/s instead of ~2k. More than enough for an exporter..
[11:33:07] <j416> sounded like you had more writers than readers though
[11:36:18] <bq> I'm building a prometheus exporter/collector for an external system, so I generally have data coming in more frequently than a typical prometheus scrape interval
[11:36:45] <bq> but I was interested in running benchmark tests against the scrape endpoint for fun, and found that the regular Lock had degraded performance quite a bit
[11:40:46] *** Joins: carlavilla (~carlavill@188.26.219.45)
[11:42:16] *** Quits: trafficjam (~qubes@2001:8004:1520:2a61:3f4e:ee1d:8b4e:77ed) (Ping timeout: 250 seconds)
[11:42:33] *** Joins: shka (~herr@109.231.0.226)
[11:43:24] *** Joins: marius_m (~marius_m@84.211.92.9)
[11:45:28] *** Joins: telboon (~telboon@user/telboon)
[11:46:11] *** Quits: carlavilla (~carlavill@188.26.219.45) (Ping timeout: 256 seconds)
[11:46:42] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:47:00] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[11:47:41] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:48:34] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:640f:6eff:fef2:deb8)
[11:50:56] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[11:51:38] <j416> https://github.com/prometheus/pushgateway ?
[11:54:31] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 245 seconds)
[11:54:53] <bancroft> j416: what's the question about pushgateway ?
[11:55:06] <j416> bancroft: no question.
[11:55:15] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 256 seconds)
[11:55:17] <bancroft> oh, sorry
[11:55:42] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[11:56:19] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[12:00:41] <bq> j416, almost but not quite :)
[12:02:44] *** Joins: absc_ (~absc@81.31.144.178)
[12:02:49] *** Quits: ryu` (~ryusaku@user/ryu/x-3206151) (Quit: SCV ready!)
[12:03:00] <j416> just, making sure no wheels are reinvented. :)
[12:03:02] <j416> check.
[12:03:13] <bancroft> does anyone know if there are plans to have go build true MH_BUNDLE shared library on mac (not a dylib)? You create a bundle file (not folder) using -bundle instead of -dynamiclib
[12:03:41] <bancroft> or if it already exists and I can't read
[12:04:13] *** Quits: ventic (ircbouncer@3v.fi) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[12:04:49] *** Joins: batdog_ (batdog@lnsq.elkins.co)
[12:04:50] *** Quits: batdog (batdog@lnsq.elkins.co) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: lithamme- (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: edrocks2 (uid538213@id-538213.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: castlelore (sid341703@id-341703.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: fizzie (irc@selene.zem.fi) (Ping timeout: 268 seconds)
[12:04:50] *** Joins: ventic (ircbouncer@3v.fi)
[12:04:53] *** Joins: Nex8192_ (~Nex8192@user/nex8192)
[12:04:53] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[12:05:04] <bq> j416, Yeah, I could probably make it work with a pushgateway but it's probably equal work to import the library for push gateway, or the one for exporter/server, 50/50
[12:05:27] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: tpr (~tpr@user/tpr) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: vt (~vt@osa.vbc.su) (Ping timeout: 268 seconds)
[12:05:44] <bq> it at least doesn't not make sense, since it's not a short-lived job I'm monitoring
[12:06:04] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: Rayke (rayke@user/rayke) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: Duns_Scrotus_ (sid262565@id-262565.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: m-kad_ (~quassel@2a02:c207:2043:4525::1) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: jdrab (~jdrab@user/jdrab) (Ping timeout: 268 seconds)
[12:06:11] *** Joins: jjakob_ (~quassel@2a01:260:8028:10f0::62)
[12:06:14] *** Joins: vt (~vt@osa.vbc.su)
[12:06:20] *** Joins: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d)
[12:06:20] *** Quits: jdrab (~jdrab@2a03:4000:48:1a8:44c5:2fff:fe15:f20d) (Changing host)
[12:06:20] *** Joins: jdrab (~jdrab@user/jdrab)
[12:06:49] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[12:07:00] *** Joins: m-kad (~quassel@2a02:c207:2043:4525::1)
[12:07:27] *** Joins: r0bby (r0bby@user/r0bby)
[12:07:46] *** Joins: Rayke (rayke@user/rayke)
[12:07:50] *** Joins: Duns_Scrotus_ (sid262565@id-262565.tinside.irccloud.com)
[12:07:59] *** Joins: castlelore (sid341703@id-341703.ilkley.irccloud.com)
[12:08:06] *** Joins: lechner (~lechner@debian/lechner)
[12:09:57] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[12:09:59] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[12:09:59] *** Quits: xsteadfastx (~marv@62.176.255.180) (Ping timeout: 256 seconds)
[12:10:28] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[12:11:45] *** Joins: xsteadfastx (~marv@62.176.255.180)
[12:12:34] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:12:45] *** Joins: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[12:14:37] *** Joins: trafficjam (~qubes@1.145.225.118)
[12:18:57] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[12:19:12] *** Joins: tpr (~tpr@user/tpr)
[12:19:28] *** Joins: edrocks2 (uid538213@id-538213.uxbridge.irccloud.com)
[12:19:30] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[12:21:32] *** Joins: gerow_ (~gerow@2600:1700:8660:c570:2cb6:dcfc:4bd4:ae86)
[12:21:36] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[12:21:44] *** Joins: mambang[m] (~mambang@user/mambang)
[12:22:07] *** Joins: fizzie (irc@selene.zem.fi)
[12:22:45] *** Quits: gerow (~gerow@2600:1700:8660:c570:6892:71ea:e118:b301) (Ping timeout: 250 seconds)
[12:23:23] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 252 seconds)
[12:24:34] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 268 seconds)
[12:26:42] *** Quits: aiix (~quassel@c83-251-68-249.bredband.tele2.se) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:28:27] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[12:43:28] *** Joins: arinov (~arinov@213.194.126.155)
[12:45:03] *** Joins: bluedust (~bluedust@117.241.177.177)
[12:45:32] <telboon> i'm building a data analysis tool on Go-Chi. I'm trying to reduce the efforts on frontend, as it's gonna just use simple components to trigger the APIs. anyone has a no-code frontend tooling to recommend?
[12:46:49] *** Quits: eXtr3m0_ (~eXtr3m0@p54861c9e.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:47:07] *** Joins: trafficjam (~qubes@1.145.225.118)
[12:48:24] *** Joins: leonarth (~leonarth@user/leonarth)
[12:52:16] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[12:52:54] <noord> telboon: use one you are familier, jquery, vue, angular, react or vanillajs
[12:52:57] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[12:53:48] *** Quits: optic__ (~rickybob@35.143.255.39) (Remote host closed the connection)
[12:54:11] <telboon> ah, i'm looking for a no-code alternative to the usual JS frameworks. basically, in my previous (personal) projects, i just find myself spending loads of time jsut building common components and handling API interactions. was hoping to try my luck if there's nocode alternative that i can perhaps drag and drop to generate a frontend
[12:54:37] *** Joins: optic__ (~rickybob@35.143.255.39)
[12:56:25] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[12:57:14] <noord> telboon: finding a friend that does frontend also an option
[12:57:39] *** Joins: rendar (~rendar@user/rendar)
[12:59:11] <noord> 10 years ago there was options like adobe flex or MS silverlight, but they couldn't survived.
[12:59:59] <telboon> `finding a friend that does frontend also an option` lol
[13:00:10] <telboon> i'm looking for something even simplier actually
[13:00:19] <telboon> like my current alternative is to run with swagger
[13:01:03] <telboon> and i got thinking -- if something can be built onto swagger so easily, there must be a nocode alternative that basically does what swagger does, but with customizable UI?
[13:01:33] <telboon> (perhaps no enterprise actually has such a need, so such tooling doesn't exist, i'm not sure)
[13:02:19] <telboon> but i'm kinda tired of building buttons, UI, API interactions on React, even if the UI part is just Bootstrap (yeah, it's a personal project and looks doesn't matter that much)
[13:02:41] *** Joins: fedorahead (codemauve@user/fedorahead)
[13:02:48] <noord> I didn't get your intention, do you need simple http client or web frontend?
[13:04:10] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 250 seconds)
[13:05:13] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[13:05:44] *** Quits: Duns_Scrotus_ (sid262565@id-262565.tinside.irccloud.com) (Ping timeout: 252 seconds)
[13:05:45] <telboon> i need a web frontend that can interact with my "normally-written" backend
[13:05:48] <noord> we use cropped `metronic theme` and vanilla js for not so interactive apps
[13:05:50] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:05:52] *** Joins: Duns_Scrotus_ (sid262565@id-262565.tinside.irccloud.com)
[13:06:11] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Ping timeout: 245 seconds)
[13:06:24] *** Joins: marius_m (~marius_m@84.211.92.9)
[13:07:17] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[13:07:26] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[13:08:35] *** absc_ is now known as absc
[13:10:07] *** Joins: absc_ (~absc@81.31.144.178)
[13:10:25] *** Quits: pombreda (sid227801@id-227801.tinside.irccloud.com) (Ping timeout: 250 seconds)
[13:10:29] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[13:10:30] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 260 seconds)
[13:10:34] *** Joins: pombreda (sid227801@id-227801.tinside.irccloud.com)
[13:10:49] *** Quits: absc (~absc@81.31.144.178) (Quit: Leaving)
[13:10:50] *** Quits: absc_ (~absc@81.31.144.178) (Client Quit)
[13:11:01] *** Joins: absc (~absc@81.31.144.178)
[13:12:01] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[13:12:22] *** Joins: r0bby (r0bby@user/r0bby)
[13:12:35] *** Quits: maxamillion (sid276220@ansible/staff/maxamillion) (Ping timeout: 250 seconds)
[13:13:46] *** Quits: bq (~david@oh.not.bad.aye.yeah.nah.nz) (Ping timeout: 260 seconds)
[13:14:01] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 256 seconds)
[13:14:21] *** Joins: maxamillion (sid276220@ansible/staff/maxamillion)
[13:15:05] *** Quits: Archwyrm (~archwyrm@archwyrm.net) (Ping timeout: 252 seconds)
[13:15:07] <telboon> noord: metronic does look interesting. is creation of forms, tables (as API output), static components, etc relatively easy and quick?
[13:15:11] *** Joins: Archwyrm (~archwyrm@archwyrm.net)
[13:15:29] <telboon> and it handles RESTful API relatively well?
[13:15:36] *** Joins: bq (~david@oh.not.bad.aye.yeah.nah.nz)
[13:15:49] *** Joins: trafficjam (~qubes@2001:8004:1520:385a:e2af:d4cc:79ea:51f6)
[13:15:52] *** Joins: fling (~fling@user/fling)
[13:16:03] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 250 seconds)
[13:16:38] <noord> it does nothing about http client(rest requests) but it looks good
[13:17:18] *** Quits: abraham (~abraham@143.244.185.86) (Read error: Connection reset by peer)
[13:17:23] *** Joins: abraham1 (~abraham@143.244.185.86)
[13:19:15] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[13:19:24] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[13:20:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:31:47] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:31:54] *** Quits: optic__ (~rickybob@35.143.255.39) (Quit: optic__)
[13:44:24] *** Joins: goldfish (~goldfish@user/goldfish)
[13:44:40] *** Joins: rickybob (~rickybob@35.143.255.39)
[13:44:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:47:49] *** Parts: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) ()
[13:49:40] *** Quits: rickybob (~rickybob@35.143.255.39) (Ping timeout: 268 seconds)
[13:59:55] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[14:01:04] <flughafen> src/github.com/prometheus/exporter-toolkit/web/tls_config.go:280:21: undefined: tls.CipherSuites   -> could this be failing from other missing deps?  i added the x-net dev
[14:01:47] *** Parts: fedorahead (codemauve@user/fedorahead) (Closing Window)
[14:08:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[14:08:23] <flughafen> Oh, is people said, that tls cypher suites was added in 1.14, is the x/net dev thing shipping in the go thing?
[14:10:19] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.30)
[14:10:20] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 256 seconds)
[14:15:00] *** Joins: ar324 (~ar324@user/ar324)
[14:15:04] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:15:44] <ar324> Why is it not possible to define methods on non-local types?
[14:16:34] <ar324> It would have been convenient to extend a package's functionality within another package.
[14:21:20] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[14:22:07] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[14:23:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:27:35] <bookworm> because that's breaking the encapsulation
[14:29:39] <flughafen> nope, nevermind, me dumb
[14:30:18] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[14:31:36] <ar324> Hmm, it most certainly does break encapsulation, but I was thinking if there was any other reason (other than a conceptual one).
[14:32:01] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:32:34] *** Joins: fef (~thedawn@user/thedawn)
[14:32:37] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 240 seconds)
[14:32:38] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[14:32:52] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[14:50:26] <ikke> It can lead to confusing code. Methods being available which are not documented on the package but depending on other packages being imported
[14:51:24] *** jjakob_ is now known as jjakob
[14:53:05] * shiroyasha mumbles unaudible complaints about `database/sql.Register` as import side effect.
[14:54:35] <ar324> ikke: Yeah, but what if the extensions are available only within the package that extends the method set?
[14:55:20] <ikke> ar324: If you define a custom type, you are able to
[14:55:40] *** Quits: bluedust (~bluedust@117.241.177.177) (Remote host closed the connection)
[14:55:50] <ikke> A type alias
[14:56:03] <ar324> A type alias, or a type definition?
[14:56:14] <ikke> type definition
[14:58:29] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[14:58:40] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[15:00:12] <ikke> ar324: https://go.dev/play/p/NeHE7YGxUE8
[15:00:14] <ar324> But wouldn't that make existing methods inaccessible?
[15:00:40] <ar324> ikke: Got that.
[15:00:46] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 256 seconds)
[15:01:48] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:02:43] *** Joins: marius_m (~marius_m@84.211.92.9)
[15:03:55] <ar324> https://go.dev/play/p/yZ0UezrXXT3
[15:04:49] <ar324> The BasicAuth method is no more (or was never?) in the method-set of MyReq.
[15:05:59] <ikke> You'd have to cast it to the original object
[15:06:00] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[15:06:24] <ar324> ikke: Okay!
[15:07:08] <ikke> https://go.dev/play/p/ZOwNoeJgngq
[15:07:58] <ar324> Got it; thanks.
[15:09:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:10:49] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:12:38] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[15:13:21] *** Joins: bluedust (~bluedust@117.241.177.177)
[15:17:57] *** Quits: trafficjam (~qubes@2001:8004:1520:385a:e2af:d4cc:79ea:51f6) (Ping timeout: 240 seconds)
[15:24:01] *** Quits: ar324 (~ar324@user/ar324) (Quit: Client closed)
[15:28:21] *** Quits: bluedust (~bluedust@117.241.177.177) (Remote host closed the connection)
[15:31:09] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[15:38:28] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[15:46:21] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:47:05] *** Joins: fef (~thedawn@user/thedawn)
[15:51:21] *** Joins: trafficjam (~qubes@1.145.225.118)
[15:53:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[15:55:10] *** Quits: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[15:57:18] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: bye!)
[15:57:19] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[15:58:14] <vt> Given a and b are both slices with len >8, how would you copy a[4:8] into b[4:8] ?
[15:59:10] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 268 seconds)
[15:59:35] *** Joins: dr0n|aw (~nabromov@92.40.255.113.threembb.co.uk)
[16:00:18] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:00:43] *** Joins: tme_ (~tme5@nat01.dev.scee.net)
[16:01:56] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[16:03:37] *** Parts: tme_ (~tme5@nat01.dev.scee.net) ()
[16:06:04] *** Joins: mobbi (~quassel@dfsm20yb8b3-tyll7y12y-3.rev.dnainternet.fi)
[16:15:21] *** Joins: bluedust (~bluedust@117.207.237.207)
[16:18:35] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: bye!)
[16:19:16] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:20:38] <bookworm> vt: slice into a[4:] as dest, slice into b[4:8] as source
[16:26:57] <vt> bookworm: thank you, it's good that no loop are necessary.
[16:29:31] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[16:29:55] <xsteadfastx> i want to schedule something. so i want to do something like <- time.After(time.Now().Local().Add(time.Minute))
[16:30:12] <xsteadfastx> problem is... time.Now() is time.Time but time.After needs an time.Duration
[16:30:14] <xsteadfastx> any ideas?
[16:30:38] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:31:29] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[16:33:10] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[16:33:14] <Wessie> time.Until
[16:36:01] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[16:36:14] <xsteadfastx> Wessie: thanks... thats what i need
[16:36:51] <bookworm> xsteadfastx: Now() + some offset is the exact same as just waiting until offset has passed...
[16:36:56] <bookworm> so why do the dance?
[16:39:31] *** Quits: GoodCodeGuy (~goodcodeg@cpe-74-71-28-57.nyc.res.rr.com) (Remote host closed the connection)
[16:40:57] <xsteadfastx> so not using time.After?
[16:41:04] <xsteadfastx> but it needs a time.Duration
[16:42:34] *** Quits: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d) (Ping timeout: 250 seconds)
[16:44:11] *** Quits: abraham1 (~abraham@143.244.185.86) (Ping timeout: 268 seconds)
[16:47:34] <bookworm> time.Minute is a duration
[16:47:54] *** Joins: shtirlic (~shtirlic@178.70.141.88)
[16:52:45] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[16:53:29] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[16:56:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[16:59:03] <flughafen> ok we're getting better.
[16:59:51] *** Quits: bluedust (~bluedust@117.207.237.207) (Remote host closed the connection)
[17:01:05] <bancroft> I got it working :) thanks everyone
[17:01:51] <flughafen> I'm glad I helped bancroft
[17:07:36] *** Quits: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:09:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[17:10:17] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[17:11:18] *** Joins: jespada (~jespada@87.74.36.188)
[17:16:05] *** Joins: shtirlic_ (~shtirlic@178.70.141.88)
[17:19:56] *** Quits: shtirlic (~shtirlic@178.70.141.88) (Ping timeout: 245 seconds)
[17:23:54] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:24:08] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 256 seconds)
[17:28:00] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[17:28:06] *** Quits: mattikus (sid161707@user/mattikus) (Ping timeout: 260 seconds)
[17:29:15] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:30:19] *** Joins: mattikus (sid161707@user/mattikus)
[17:31:57] *** Joins: bluedust (~bluedust@117.207.237.207)
[17:39:38] *** Joins: y04nn (~y04nn@92.223.89.196)
[17:43:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:47:56] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[17:48:30] *** Joins: frm (~frm@user/frm)
[17:50:28] *** Quits: frm (~frm@user/frm) (Client Quit)
[17:51:54] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 256 seconds)
[17:53:45] *** Joins: trafficjam (~qubes@2001:8004:1520:cd0:1ff1:233e:ab58:68e8)
[17:54:41] <gluon> i was a heavy user of exceptions in other languages but since i've embraced golang as my main language i've realised that the if err != nil pattern is amazing and that i'm handling every single error better than ever before
[17:55:15] <gluon> in fact, i struggle to find any situation where my code panics, i really like go's approach
[17:56:43] <ldiamond> I want to learn more about Go generics and how they work exactly. Is it more like Java's generics with type erasure, more like C++ templates, Rust generics, etc?
[17:56:58] <ldiamond> What would be the best article/source for such info?
[17:58:46] *** Joins: cation (cation@user/cation)
[18:00:59] *** Quits: xsteadfastx (~marv@62.176.255.180) (Ping timeout: 250 seconds)
[18:05:51] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 256 seconds)
[18:07:16] *** Quits: zanshin_ (~zanshin@ip24-255-217-102.ks.ks.cox.net) (Quit: WeeChat 3.0)
[18:07:44] *** Joins: zanshin (~zanshin@user/zanshin)
[18:08:34] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[18:12:02] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[18:12:18] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:e5d6:4e8d:5502:447d)
[18:12:21] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:15:45] *** Quits: zanshin (~zanshin@user/zanshin) (Quit: WeeChat 3.0)
[18:16:10] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:c575:4066:faea:7830) (Ping timeout: 250 seconds)
[18:17:00] *** Joins: zanshin (~zanshin@user/zanshin)
[18:19:21] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[18:29:21] *** Joins: pepee (~pepee@user/pepee)
[18:33:40] *** Joins: khyr0n (~khyr0n@2806:10be:6:5361:8794:5c6e:fba8:cc22)
[18:34:32] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[18:35:48] *** Quits: trafficjam (~qubes@2001:8004:1520:cd0:1ff1:233e:ab58:68e8) (Ping timeout: 268 seconds)
[18:35:50] *** Joins: rvalue (~rvalue@user/rvalue)
[18:36:27] <bookworm> the proposal
[18:38:31] *** Joins: trafficjam (~qubes@1.145.225.118)
[18:38:38] *** Joins: arkurious (~arkurious@user/arkurious)
[18:47:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[18:47:30] *** Joins: jjonah (~jjonah@p200300d5d7418c00dea632fffeb3342f.dip0.t-ipconnect.de)
[18:47:43] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[18:50:15] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[18:52:00] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[18:52:21] *** Joins: teasea (~teasea@user/teasea)
[18:57:46] *** Quits: jjonah (~jjonah@p200300d5d7418c00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:58:16] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[18:58:31] *** Joins: jjonah (~jjonah@p200300d5d7183a00dea632fffeb3342f.dip0.t-ipconnect.de)
[19:01:22] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:02:25] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:04:17] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:08:12] *** Joins: internut (~internut@2601:280:4e00:7b70:1d06:7e3a:ae21:fa6d)
[19:08:15] *** Quits: bluedust (~bluedust@117.207.237.207) (Read error: Connection reset by peer)
[19:10:07] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:10:09] <explodes> I heard there is no type erasure so there's that
[19:10:12] <dostoyevsky2> https://i.ibb.co/YkJgWRq/go.png <- Rob Pike gave this example for go routines in a talk in 2012...  Obviously it's a toy example but does he imply that many lingering http requests in Go routines are not a problem?  So if this really were Google's search, wouldn't there accumulate a lot of Go routines for those replicas that failed to reply within 80ms?
[19:11:12] <explodes> I'm not caught up on the whole conversation here, but running 100K simultaneous go routines is not a problem.
[19:12:40] <dostoyevsky2> explodes: in the whole talk he never mentions that one would need to remove those go routines (for the sake of the Go language)... It's like they can just remain...
[19:13:03] <explodes> oh like leaking goroutines? I wouldn't recommend that
[19:14:12] <explodes> possibly the First function has a timeout, too, to prevent the leak
[19:14:25] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[19:16:53] <dostoyevsky2> explodes: it has a 300ms timeout, but if you have many requests like you'd have for a search site, those longer than 80ms requests are going to accumulate, especially if you have one system that's actually slow atm..
[19:19:35] <dostoyevsky2> https://i.ibb.co/54HKnXK/go2.png <- this is from the same talk... boring() just never terminates, it will write to the given channel indefinitely, like you'd never actually need to remove a go routine and can just leave them be like that
[19:20:16] <dostoyevsky2> I guess it makes concurrency a lot easier
[19:23:43] <rewt> those are probably just for showing concepts, not actual production-quality code
[19:27:59] *** Quits: shtirlic_ (~shtirlic@178.70.141.88) (Remote host closed the connection)
[19:32:56] *** Quits: mobbi (~quassel@dfsm20yb8b3-tyll7y12y-3.rev.dnainternet.fi) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:36:02] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[19:36:16] *** Joins: khanred (~khanred@user/khanred)
[19:37:01] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[19:37:51] *** Joins: teasea (~teasea@user/teasea)
[19:38:11] <dostoyevsky2> Is there a good resource for realistic Go concurrency examples?
[19:39:35] *** Quits: teasea (~teasea@user/teasea) (Remote host closed the connection)
[19:39:55] *** Joins: teasea (~teasea@user/teasea)
[19:40:58] *** Quits: teasea (~teasea@user/teasea) (Client Quit)
[19:41:45] <explodes> yea goroutines are cheap but not free. you should not leak goroutines in production
[19:42:49] *** Joins: teasea (~teasea@user/teasea)
[19:43:56] *** Quits: teasea (~teasea@user/teasea) (Remote host closed the connection)
[19:44:15] *** Joins: teasea (~teasea@user/teasea)
[19:44:57] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Remote host closed the connection)
[19:45:11] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[19:50:13] *** Joins: sbooties (~sbooties@207.251.78.34)
[19:51:10] *** sbooties is now known as sillyboots
[19:54:48] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:55:07] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[19:59:45] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[20:00:27] *** Joins: fhs (~fhs@pool-100-33-53-73.nycmny.fios.verizon.net)
[20:06:33] <seebs> what do you mean "leaking" goroutines?
[20:07:18] *** Joins: orthoplex64 (~crm@70.120.0.94)
[20:07:21] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:09:22] <rewt> dostoyevsky2, there are a number of different ways you can signal goroutines to exit; channel, context, etc
[20:09:32] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 268 seconds)
[20:10:43] <dostoyevsky2> rewt: I had to reimplment a lot of my web__request code as a CancellableWebRequest... quite a lot of work
[20:11:36] <dostoyevsky2> Especially since in C I can just close file descriptors of sockets, if they are non_blocking...  like it happens in irc servers all the time
[20:11:41] *** Joins: crashrep (~crashrep@user/crashrep)
[20:15:26] *** Parts: bancroft (~bancroft@user/bancroft) (WeeChat 3.2)
[20:17:54] <rewt> that's the same idea as with channels
[20:18:04] <rewt> but without any external resources
[20:20:03] *** Joins: bluedust (~bluedust@117.207.237.207)
[20:27:17] *** Quits: absc (~absc@81.31.144.178) (Quit: Leaving)
[20:28:10] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:43:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:44:20] *** Joins: neurocyte0917090 (~neurocyte@IP-045143076117.dynamic.medianet-world.de)
[20:44:20] *** Quits: neurocyte0917090 (~neurocyte@IP-045143076117.dynamic.medianet-world.de) (Changing host)
[20:44:20] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:50:59] *** Joins: whaley (~whaley@2603-6080-a301-33d1-7846-e44d-41fc-c7f5.res6.spectrum.com)
[20:57:49] *** Joins: sagax (~sagax_nb@user/sagax)
[20:57:55] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[20:58:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:07:29] *** Quits: bluedust (~bluedust@117.207.237.207) (Remote host closed the connection)
[21:13:08] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:15:00] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[21:15:01] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[21:15:01] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[21:15:01] *** Joins: tane (~tane@user/tane)
[21:18:32] *** Joins: arcatech (~arcatech@user/arcatech)
[21:23:04] *** Joins: Nselm (~Nselm@p200300d56f251a1f03191f3d369fe5ab.dip0.t-ipconnect.de)
[21:24:07] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[21:25:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:27:57] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:28:10] *** Quits: sillyboots (~sbooties@207.251.78.34) (Quit: Connection closed)
[21:28:20] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:29:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[21:29:37] *** Quits: neverfindme (~hayden@158.123.160.43) (Max SendQ exceeded)
[21:29:54] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66)
[21:30:16] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:31:41] *** Joins: abraham1 (~abraham@143.244.185.86)
[21:32:31] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[21:43:40] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[21:44:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:45:07] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 268 seconds)
[21:49:24] *** Quits: whaley (~whaley@2603-6080-a301-33d1-7846-e44d-41fc-c7f5.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:23] *** Joins: EugenMayer (~EugenMaye@pd95dacb0.dip0.t-ipconnect.de)
[21:57:25] <EugenMayer> hello. I have written a rest server, which runs a shell command (long running) on some endpoint. I would like to stream the output of the command as soon as it happens (line by line). What options are there usually? I'am using emicklei/go-restful for the REST server, using procs.Process to run a comman. I found
[21:57:25] <EugenMayer> https://github.com/vladimirvivien/automi to possibly be a fit, but it seems a bit to oversized on this front. Any hint what to read about?
[21:57:32] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[21:57:44] *** Joins: sus (zero@user/zeromomentum)
[21:59:10] *** Joins: nocture (~nocture@c-xd4ed87fa.cust.hiper.dk)
[22:02:56] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 256 seconds)
[22:03:00] *** Quits: dr0n|aw (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 268 seconds)
[22:04:34] <flughafen>   
[22:11:42] *** Joins: jpw (~jpw@user/jpw)
[22:13:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:15:03] *** Quits: Nselm (~Nselm@p200300d56f251a1f03191f3d369fe5ab.dip0.t-ipconnect.de) (Quit: Client closed)
[22:15:11] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[22:18:10] *** Joins: avelino (~avelino@2804:431:c7f4:bf5d:4804:e64c:20e1:4e13)
[22:18:16] *** Joins: arcatech (~arcatech@user/arcatech)
[22:18:36] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:20:36] *** Joins: Atque (~Atque@user/atque)
[22:22:20] *** Quits: avelino (~avelino@2804:431:c7f4:bf5d:4804:e64c:20e1:4e13) (Quit: Client closed)
[22:22:39] *** Joins: dr0n|aw (~nabromov@92.40.255.113.threembb.co.uk)
[22:23:15] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9fc4:4e83:5c60:86bb) (Quit: Lost terminal)
[22:27:39] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:30:43] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Ping timeout: 250 seconds)
[22:32:41] *** Quits: nocture (~nocture@c-xd4ed87fa.cust.hiper.dk) (Quit: nocture)
[22:33:28] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66) (Remote host closed the connection)
[22:37:09] *** Quits: arcatech (~arcatech@user/arcatech) (Read error: Connection reset by peer)
[22:38:13] *** Joins: arcatech (~arcatech@user/arcatech)
[22:48:37] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 256 seconds)
[22:52:48] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[22:53:14] *** Quits: ska (~ska@user/ska) (Quit: Leaving)
[22:55:36] *** Joins: lechner (~lechner@debian/lechner)
[23:04:27] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[23:05:30] *** Bitflux is now known as Byteflux
[23:09:14] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[23:17:13] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[23:18:36] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[23:28:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:31:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[23:36:26] *** Joins: trafficjam (~qubes@1.145.225.118)
[23:36:39] <b0nn> https://www.akitasoftware.com/blog-posts/taming-gos-memory-usage-or-how-we-avoided-rewriting-our-client-in-rust
[23:37:40] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[23:42:36] *** Joins: y04nn (~y04nn@92.223.89.196)
[23:43:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:47:07] <bookworm> interesting article when you ignore the RiiR nonsense at the end
[23:47:27] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:48:07] *** Quits: trafficjam (~qubes@1.145.225.118) (Ping timeout: 256 seconds)
[23:50:40] *** Joins: voila (~voila@84.211.71.13)
[23:55:39] *** Quits: voila (~voila@84.211.71.13) (Quit: Leaving)
[23:57:32] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
