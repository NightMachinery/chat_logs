[00:03:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:04:07] <ville> even that's 10+ years old. in that time there's been improvements in the gpgpu space, perhaps something could be done with that which wasn't a contended before
[00:04:22] <ville> err contender
[00:05:55] <AliceMeows> parallel search
[00:06:29] <AliceMeows> Break your data into even parts and let multiple threads search utilizing simd
[00:07:09] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:07:46] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[00:08:19] <ville> yes something along those lines would be things to try if you're truly interested in "the fastest" for your specific case. even the standard library has parallel versions of say boyer moore. but in true standard library fashion gives you very little control over it
[00:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:09:02] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr)
[00:09:34] <AliceMeows> Unfortunately so
[00:10:54] *** Joins: rajkosto (~rajkosto@178.220.66.235)
[00:12:39] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[00:14:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:17:32] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:19:17] *** Joins: hiroshi_ (~freedom@ge-19-99-251.service.infuturo.it)
[00:23:54] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875) (Ping timeout: 260 seconds)
[00:25:49] <ville> https://developer.nvidia.com/gpugems/gpugems3/part-v-physics-simulation/chapter-35-fast-virus-signature-matching-gpu is a mixed cpu/gpu implementation
[00:29:24] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[00:31:14] <AliceMeows> Its not surprising considering the amount of processing power gpus have and what they're optimized to do
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:35:03] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:35:08] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:40:41] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:40:56] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:41:19] *** Quits: jsbach (~jsbach@2a01:c22:ad5b:3300:4d02:2c71:33f7:3a7b) (Ping timeout: 256 seconds)
[00:41:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:42:41] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:42:47] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:43:42] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:44:07] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:45:02] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:45:35] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:46:24] *** Joins: Tangent-Man (~Tangent-M@217.146.92.224)
[00:47:31] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[00:49:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:49:59] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[00:50:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:50:37] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[00:53:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:55:59] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:56:46] *** Joins: rgrinberg (~textual@187.223.139.175)
[00:58:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[01:02:16] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:07:30] *** Joins: syrius (~syrius@titan.stormtek.net)
[01:07:45] *** Quits: heineken (~i.am@user/heineken) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[01:11:26] *** Quits: Rynn (rynn@gateway/vpn/protonvpn/rynn) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:15:48] <AliceMeows> I think that reading http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0532r0.pdf clears it up pretty well on what std::launder does and what it solves
[01:16:51] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[01:21:33] *** Quits: kfv (~kfv@mail.kfv.io) (Read error: Connection reset by peer)
[01:22:05] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[01:23:13] <Alipha> [RU007]
[01:23:26] <Alipha> [P1971R0]
[01:23:26] <npaperbot> P1971R0: [WG21] Core Language Changes for NB Comments at the November, 2019 (Belfast) Meeting <https://wg21.link/p1971r0> (by William M. (Mike) Miller) (2019-11-08) (Related: https://wg21.link/p1971r0/github)
[01:24:17] *** Joins: kfv (~kfv@mail.kfv.io)
[01:24:23] *** Joins: Rynn (~rynn@216.30.158.198)
[01:24:23] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:24:46] <Alipha> AliceMeows: the funny part is that the const/reference member issue that most of the pdf that you linked talks about has actually been made irrelevant by P1971R0
[01:24:53] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Quit: This computer has gone to sleep)
[01:25:21] <ville> who's bot was npaperbot again?
[01:25:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[01:27:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:27:51] <ville> they should fix the output not sticking a ) at the end of the urls. as ) is an allowed character in a url
[01:28:06] *** Quits: Rynn (~rynn@216.30.158.198) (Client Quit)
[01:28:14] <AliceMeows> Maybe one day we'll have it all sorted out and no longer need std::launder
[01:28:47] <AliceMeows> ville: somehow my client does not mess it up
[01:28:47] <Alipha> yes, maybe one day all of our pointers will be clean
[01:29:01] <AliceMeows> I could only wish haha
[01:29:01] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[01:30:43] <ville> AliceMeows: then i'm guessing it'll fail to properly parse a url that really does contain a ). which is probably a less likely event than not having a )
[01:31:00] <AliceMeows> I have no clue honestly
[01:31:07] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[01:31:09] *** Quits: proller (~p@2a02:6b8:b081:b40d::1:18) (Ping timeout: 250 seconds)
[01:31:42] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[01:32:00] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[01:32:27] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[01:32:30] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[01:33:27] <AliceMeows> Heh, you're right, I just tested it out
[01:34:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[01:34:27] <AliceMeows> { cout << "http://test/)"; }
[01:34:28] <geordi> http://test/)
[01:34:29] *** Joins: moose` (~moose@user/moose)
[01:34:37] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[01:34:43] <AliceMeows> Nevermind I do get the ')' at the end as part of the url
[01:34:48] *** Joins: Rynn (~rynn@216.30.158.198)
[01:35:01] <PJBoy> I don't
[01:35:09] <PJBoy> hence client issue :p
[01:35:15] <AliceMeows> Yeah
[01:35:22] <ville> PJBoy: yes, yours is wrong
[01:35:26] <PJBoy> bot is M-ou-se's
[01:35:28] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[01:35:34] <PJBoy> who does frequent IRC anymore
[01:35:37] <PJBoy> *doesn't
[01:36:51] <PJBoy> my client's is better though
[01:37:00] <PJBoy> it handles links in parentheses just fine
[01:37:21] <PJBoy> and I can't remember the last time I saw a URL end in a parenthesis
[01:37:59] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[01:38:33] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[01:38:50] <PJBoy> actually that's a lie: https://docs.microsoft.com/en-us/windows/win32/api/d2d1/nf-d2d1-id2d1hwndrendertarget-resize(constd2d1_size_u_)
[01:39:06] <PJBoy> visual studio doesn't consider the _) at the end part of the URL
[01:39:19] <PJBoy> so I can't double click that link there :<
[01:41:48] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:42:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:57] *** ChanServ sets mode: +v npaperbot
[01:43:49] *** Joins: proller (~p@80.240.216.69)
[01:44:15] *** Quits: spithash_ (~spithash@user/spithash) (Ping timeout: 240 seconds)
[01:44:31] <AliceMeows> It works fine for me
[01:44:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:45:32] *** Joins: spithash (~spithash@user/spithash)
[01:48:07] *** Joins: hightower2 (~hightower@141-136-176-238.dsl.iskon.hr)
[01:48:17] <hightower2> Heya, where do I start looking to resolve this:
[01:48:23] <hightower2>  /usr/include/c++/7/ext/algorithm:68:14: error: no member named 'min' in namespace 'std'
[01:48:59] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:50:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:53:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:54:41] <T`aZ> probabaly #c++-general , it's a compiler issue/flags missing/something related
[01:55:29] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:55:44] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:57:36] <hightower2> thanks!
[01:57:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:57:57] *** Parts: hightower2 (~hightower@141-136-176-238.dsl.iskon.hr) (Leaving)
[01:58:07] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[02:01:08] *** Joins: zunino (~zunino@2804:7f5:f380:33d4:d611:8d34:6a79:a818)
[02:01:37] *** Joins: proller (~p@2a02:6b8:b081:8024::1:b)
[02:01:38] *** Quits: proller (~p@2a02:6b8:b081:8024::1:b) (Remote host closed the connection)
[02:02:04] *** Joins: proller (~p@2a02:6b8:b081:8024::1:b)
[02:02:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 245 seconds)
[02:03:37] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[02:11:24] *** Joins: peoliye (~peoliye@54-240-198-38.amazon.com)
[02:14:54] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[02:17:15] *** Joins: Rynn (~rynn@216.30.158.198)
[02:21:14] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[02:24:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:24:49] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[02:26:05] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:31] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[02:30:53] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr)
[02:30:54] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:33:50] *** Quits: pizdets (~pizdets@183.182.115.230) (Ping timeout: 250 seconds)
[02:33:58] *** Joins: pizdets_ (~pizdets@183.182.111.141)
[02:34:28] *** kevr` is now known as kevr
[02:34:53] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 256 seconds)
[02:35:49] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:49] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:38:19] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[02:39:30] *** Joins: ferdna (~ferdna@user/ferdna)
[02:47:00] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[02:47:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[02:47:47] *** Quits: hiroshi_ (~freedom@ge-19-99-251.service.infuturo.it) (Quit: hiroshi_)
[02:48:10] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:49:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:50:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:51:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:52:19] <CarloWood> Does std::string::reserve(s) reserve enough memory for a string of length s? Or does s include the trailing 0?
[02:52:49] <Alipha> std::string::reserve(s) will allocate at least s+1 bytes
[02:53:13] <Alipha> (ie, it allocates additional room for the \0 character)
[02:53:24] *** Joins: Rynn (~rynn@216.30.158.198)
[02:54:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:56:05] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[02:56:36] *** Quits: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7) (Ping timeout: 245 seconds)
[02:59:27] *** Quits: rgrinberg (~textual@187.223.139.175) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:00:05] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:02:42] *** Joins: daswf852 (~daswf852@user/daswf852)
[03:03:08] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:03:53] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Ping timeout: 250 seconds)
[03:04:48] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:04:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[03:04:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:09:31] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 245 seconds)
[03:11:57] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:14:22] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b1a9:9586:4800:c579)
[03:14:57] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:15:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[03:16:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e00b:cb48:98a7:f7f9) (Ping timeout: 252 seconds)
[03:18:26] *** Quits: proller (~p@2a02:6b8:b081:8024::1:b) (Ping timeout: 260 seconds)
[03:23:53] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Remote host closed the connection)
[03:24:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:24:24] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[03:25:05] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:26:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:27:08] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 272 seconds)
[03:33:03] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:36:35] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:39:08] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:39:42] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:40:55] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[03:41:02] *** Tobbi__ is now known as Tobbi
[03:45:00] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[03:45:54] *** Quits: zunino (~zunino@2804:7f5:f380:33d4:d611:8d34:6a79:a818) (Quit: WeeChat 3.0.1)
[03:46:02] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[03:49:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9)
[03:49:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9) (Changing host)
[03:49:12] *** Joins: skapata (~Skapata@user/skapata)
[03:49:33] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:49:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[03:51:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:51:06] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[03:51:20] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 252 seconds)
[03:52:02] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[03:52:28] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 272 seconds)
[03:54:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[03:54:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:56:14] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:02:26] *** Quits: Tangent-Man (~Tangent-M@217.146.92.224) (Remote host closed the connection)
[04:11:17] *** Joins: fawwaz (~fawwaz___@180.254.75.104)
[04:14:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:16:32] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[04:20:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:25:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[04:25:16] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:28:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:29:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[04:36:06] *** Quits: Bitflux (~byte@byteflux.net) (Quit: ZNC - https://znc.in)
[04:36:18] *** Joins: Byteflux (~byte@byteflux.net)
[04:40:54] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:41:19] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[04:43:17] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[04:43:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[04:44:21] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:29] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:47:35] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 272 seconds)
[04:48:51] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:51:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:51:51] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[04:55:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[04:55:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:01:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:04:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:05:37] *** Joins: frost (~frost@user/frost)
[05:06:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:12:01] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:15:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:20:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:29:57] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[05:32:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:34:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:39:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:42:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1a9:9586:4800:c579) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:42:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:00] *** ChanServ sets mode: +v npaperbot
[05:50:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[05:52:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:55:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:57:39] *** Joins: arch-angel (~quassel@user/arch-angel)
[06:01:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:05:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[06:07:43] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:12:12] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:17:54] *** Joins: Rynn (~rynn@216.30.158.198)
[06:21:53] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:32:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:34:35] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:36:32] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:47] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[06:38:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[06:43:22] *** Quits: furrymcgee (~devuan@cgn-213-196-210-179.nc.de) (Ping timeout: 256 seconds)
[06:45:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:48:18] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:49:48] *** Joins: furrymcgee (~devuan@cgn-89-1-209-226.nc.de)
[06:50:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:51:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[06:52:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:53:37] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Ping timeout: 240 seconds)
[06:55:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:55:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:59:37] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Ping timeout: 240 seconds)
[07:00:47] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:02:38] *** Joins: rajkohaxor (~rajkosto@178-221-217-125.dynamic.isp.telekom.rs)
[07:02:39] *** Quits: rajkohaxor (~rajkosto@178-221-217-125.dynamic.isp.telekom.rs) (Remote host closed the connection)
[07:04:20] *** Quits: N4buc0- (~N4buc0@189.26.49.16.dynamic.adsl.gvt.net.br) (Ping timeout: 256 seconds)
[07:04:36] *** Quits: rajkosto (~rajkosto@178.220.66.235) (Ping timeout: 240 seconds)
[07:06:07] *** Joins: millido (~millido@84.210.150.128)
[07:06:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:06:45] *** Joins: skapata (~Skapata@user/skapata)
[07:07:03] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[07:07:29] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:44] *** Quits: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 256 seconds)
[07:08:40] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[07:10:51] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:42] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:12:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:15:11] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:15:29] *** Joins: julius (~jully@95.74.77.25)
[07:23:25] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[07:23:26] *** Joins: NiD27 (~nid27@49.205.148.49)
[07:24:17] *** Telvana is now known as yuuup
[07:26:20] <fluter> hmm, how cani initialize a std::unique_ptr member in the ctor's initializer-list?
[07:27:43] *** yuuup is now known as Telvana
[07:28:37] <fluter> d_ptr(std::make_unique<T>(...)) works fine :)
[07:30:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[07:31:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:34:47] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[07:35:13] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 256 seconds)
[07:35:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[07:36:55] *** Joins: CaCode- (~CaCode@user/cacode)
[07:38:27] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:39:00] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[07:41:43] *** Joins: zer0x (~zer0x@58.186.123.149)
[07:42:55] *** Quits: sreve (~quassel@p549d70f4.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:43:00] *** Joins: sreve_ (~quassel@p4ff44fcc.dip0.t-ipconnect.de)
[07:43:15] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:44:41] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[07:45:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:45:58] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr)
[07:46:39] *** Quits: zer0x (~zer0x@58.186.123.149) (Remote host closed the connection)
[07:47:55] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:2056:5082:3fad:a681)
[07:48:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:49:59] *** Joins: zer0x (~zer0x@58.186.123.149)
[07:50:12] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[07:53:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:49] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:c5e:8bc0:7367:5b6e)
[07:56:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:56:12] *** Quits: nehsou^ (~nehsou@50.233.120.162) (Ping timeout: 240 seconds)
[07:57:32] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[07:58:15] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[07:58:16] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[07:58:16] *** Joins: nortoh (~nortoh@user/nortoh)
[08:00:05] *** Quits: julius (~jully@95.74.77.25) (Quit: Leaving)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:02:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:03:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:03:47] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846)
[08:06:20] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:20eb:1c06:7850:2846) (Client Quit)
[08:06:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:07:24] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:08:35] *** Quits: NiD27 (~nid27@49.205.148.49) (Remote host closed the connection)
[08:09:36] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[08:10:42] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Remote host closed the connection)
[08:35:47] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[08:40:02] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[08:40:26] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:40:36] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:41:52] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:42] *** Joins: malloy (~jimery@116.30.220.175)
[08:45:54] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[08:49:02] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:36] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[08:53:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:57:06] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:57:58] *** Quits: fawwaz (~fawwaz___@180.254.75.104) (Remote host closed the connection)
[08:59:24] *** Joins: barravince (~vincenzos@2a02:c7f:f220:5500:12bf:48ff:fe76:8be2)
[08:59:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:02:55] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[09:03:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:03:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[09:04:38] *** Joins: teepee (~teepee@openscad/teepee)
[09:05:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:05:41] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[09:10:29] *** Quits: peoliye (~peoliye@54-240-198-38.amazon.com) (Quit: Client closed)
[09:10:42] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[09:24:31] *** Joins: sebbu (~sebbu@user/sebbu)
[09:25:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:27:37] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:27:37] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[09:28:01] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[09:32:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:33:28] *** Joins: Hercules (~Hercules@user/hercules)
[09:33:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[09:34:03] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[09:35:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[09:35:42] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:35:55] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[09:35:59] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:36:27] *** Joins: rajkosto (~rajkosto@178.220.244.219)
[09:37:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[09:37:34] <rajkosto> i forgot if this was legal or not (guaranteed to execute left to right) if ((it = j.find("encrypted")) != j.cend() && it->second)
[09:37:44] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:38:42] <kalven> these days you'de write it if (auto it = j.find(..); it != j.cend() && it->second)
[09:39:10] <rajkosto> sure but what if i already had it set to some other value before, is it ok to do this ?
[09:39:23] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[09:42:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[09:42:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:58] *** ChanServ sets mode: +v npaperbot
[09:44:06] *** Joins: Limits (~Limits@user/Limits)
[09:45:40] <TinoDidriksen> Yes, && will short-circuit.
[09:46:47] <rajkosto> when is it not ok to rely on left to right order
[09:48:07] <TinoDidriksen> When using & or | or comma or several other operators.
[09:48:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:54:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:57:16] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[09:57:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:59:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[10:00:03] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:01:04] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Ping timeout: 272 seconds)
[10:01:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:02:18] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:03:47] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[10:04:21] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:07:33] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[10:08:07] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:c5e:8bc0:7367:5b6e) (Remote host closed the connection)
[10:08:25] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83)
[10:17:11] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Quit: This computer has gone to sleep)
[10:17:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:18:46] *** Quits: rajkosto (~rajkosto@178.220.244.219) (Read error: Connection reset by peer)
[10:21:13] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:22:39] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[10:23:50] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:88e:82f5:2056:5082:3fad:a681) (Quit: Leaving)
[10:26:31] <ville> and if you see comma in text be very careful what kind of comma it is. if({a, b, c, d}) would go left-to-right
[10:27:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:29:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:30:43] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:31:04] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[10:31:09] *** Joins: jsbach (~jsbach@2a01:c22:a87a:4e00:630b:9fc:49af:9fa9)
[10:32:45] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83) (Quit: Leaving)
[10:33:50] <ville> aside from patterns similar to: if(x && x->y) i wouldn't rely on the order of things very much. that's probably easy enough to recognize for good number of programmers
[10:34:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[10:34:10] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:42:41] *** Quits: montpol (montpol@fine.mouses.xyz) (Remote host closed the connection)
[10:43:01] *** Joins: montpol (montpol@fine.mouses.xyz)
[10:43:12] *** Quits: montpol (montpol@fine.mouses.xyz) (Client Quit)
[10:43:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:44:03] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[10:45:47] *** Joins: montpol (montpol@fine.mouses.xyz)
[10:46:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:47:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[10:51:47] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:54:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:55:22] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[10:56:45] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:58:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:58:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:02:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f9ec:3f5d:e36a:777a)
[11:04:24] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[11:05:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 260 seconds)
[11:07:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:07:41] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:10:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[11:10:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[11:12:31] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[11:13:49] *** Joins: skapata (~Skapata@user/skapata)
[11:16:58] *** Quits: barravince (~vincenzos@2a02:c7f:f220:5500:12bf:48ff:fe76:8be2) (Read error: Connection reset by peer)
[11:18:14] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:2605:218d:6584:6835:9180:ba2a)
[11:20:11] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Ping timeout: 256 seconds)
[11:22:11] *** Joins: rendar (~rendar@user/rendar)
[11:26:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl)
[11:26:34] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[11:31:59] <ville> new papers http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/#mailing2022-02
[11:32:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Excess Flood)
[11:32:23] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:32:32] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[11:32:35] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:33:14] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:33:39] *** Joins: CaCode (~CaCode@user/cacode)
[11:34:40] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[11:34:57] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[11:35:02] *** Joins: hashfunc461 (~user@162.254.115.155)
[11:35:34] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:35:53] *** Joins: CaCode_ (~CaCode@user/cacode)
[11:36:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:39:05] *** Quits: letto2 (~letto@188.26.152.131) (Read error: Connection reset by peer)
[11:39:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:39:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
[11:39:33] *** Joins: letto (~letto@188.26.152.131)
[11:40:22] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: No Ping reply in 180 seconds.)
[11:41:44] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:42:45] *** Joins: arch-angel (~quassel@user/arch-angel)
[11:44:17] *** Quits: Limits (~Limits@user/Limits) (Ping timeout: 240 seconds)
[11:46:24] *** Joins: Limits (~Limits@user/Limits)
[11:48:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[11:48:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:51:26] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[11:54:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:55:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:58:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[11:58:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:58:55] *** Joins: savolla (~quassel@95.10.204.117)
[12:04:52] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[12:05:05] *** Quits: martiert_work (~martiert@173.38.220.58) (Remote host closed the connection)
[12:06:41] *** Joins: martiert_work (~martiert@173.38.220.58)
[12:07:32] *** Joins: frost (~frost@user/frost)
[12:14:52] *** Quits: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi) (Quit: faa)
[12:14:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[12:15:45] *** Joins: rajkosto (~rajkosto@93-86-12-136.dynamic.isp.telekom.rs)
[12:16:34] *** Quits: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:19:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[12:21:56] *** Joins: neure (~TimoSuora@2001:999:202:43f8:1c20:b4b6:c171:16e4)
[12:29:24] *** Joins: paulf (~paulf@lfbn-gre-1-104-182.w92-157.abo.wanadoo.fr)
[12:35:34] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:37:42] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:37:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:37:58] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[12:44:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[12:46:12] *** Joins: Guest4248 (~hasan@86.57.123.26)
[12:46:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:47:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:50:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[12:51:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:51:25] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[12:52:17] *** Quits: Limits (~Limits@user/Limits) (Ping timeout: 240 seconds)
[12:52:58] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[12:55:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:56:39] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:57:02] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[12:57:05] *** Quits: neure (~TimoSuora@2001:999:202:43f8:1c20:b4b6:c171:16e4) (Quit: Leaving)
[12:57:22] *** Joins: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net)
[12:57:34] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 260 seconds)
[12:59:36] *** Joins: plastico (~plastico@neomutt/plastico)
[12:59:40] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[12:59:48] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[13:01:50] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[13:02:48] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:03:11] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[13:03:47] <ville> oh nice someone's proposing to fix that sizeof really reports the size of the type: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1945r0.pdf
[13:06:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 252 seconds)
[13:06:39] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[13:11:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:11:39] <evangeline> hi, is there any way I can call a delegated constructor from another constructor's body (not in initializer list), like this: https://godbolt.org/z/ad4ba3MYM
[13:11:47] <anyone> ville: I don't see the problem
[13:12:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:14:11] *** Joins: thelounge5509 (774efe03@67.205.143.82)
[13:14:17] <anyone> how is it even possible that  sizeof(T) is not enough to hold a T
[13:15:13] <ville> anyone: the paper has a simple example. it's in the wording that says "including padding required to place the objects into an array" or so
[13:15:52] <ville> anyone: you can construct a type that compiler is allowed to stick padding in the middle of, but requires no padding to be placed in an array
[13:16:22] <ville> s/construct/define
[13:16:25] <anyone> for all I know, all contemporary implementations include trail-padding-for-arrays in the sizeof result
[13:17:00] <ville> yes as they must
[13:18:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[13:18:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:19:04] <anyone> A type T that gets padded (anywhere) surely must remain so padded even if it is used in a T[n] array, because consider T[1], which just a T more or less.
[13:20:11] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83)
[13:20:47] <ville> struct aa { char x; char y; } has an alignment of 1, thus requires no padding for the purposes of being placed in an array. that's the gist of it. see the paper's example
[13:21:43] *** Quits: thelounge5509 (774efe03@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[13:22:58] <ville> once you stick a non-trivial copy ctor or differing access controls on that type you start losing guarantees about the layout
[13:23:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[13:23:34] <ville> which results in the freedom for the compiler to stick padding there, but that padding is not for the purposes of arrays
[13:24:14] <anyone> and whenever it sticks padding, I would expect sizeof to grow. But apparently that wording was forgotten. Oh well.
[13:25:06] <ville> http://eel.is/c++draft/expr.sizeof#2.sentence-2
[13:25:39] <ville> that sentence has the "in an array" part
[13:26:07] <anyone> the "in an array" part should just be deleted, yes, to count all padding
[13:26:56] <anyone> however, on reading further, footnote 63 should already guarantee that
[13:28:00] <anyone> ¯\_(ツ)_/¯
[13:30:53] <ville> it's qualified with the potentially-overlapping
[13:31:22] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[13:31:34] <ville> so it doesn't apply in this case
[13:34:29] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[13:34:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:34:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:08] *** Quits: hashfunc461 (~user@162.254.115.155) (Ping timeout: 272 seconds)
[13:35:09] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:38:26] *** Joins: twice89 (~twice@2001:da8:801d:e4c4:c4af:1475:2de7:8af4)
[13:38:27] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:38:53] *** Quits: twice89 (~twice@2001:da8:801d:e4c4:c4af:1475:2de7:8af4) (Client Quit)
[13:39:28] *** Joins: frost (~frost@user/frost)
[13:40:29] *** Joins: twice (~twice@173.82.153.50)
[13:41:46] <fluter> hmm, what does this mean: unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ...
[13:41:56] <fluter> i have it as a forward declarations though
[13:42:16] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[13:42:26] <fluter> class Fwd; class My {  std::unique_ptr<Fwd> member; ... } ; why would this wrong?
[13:42:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:00] *** ChanServ sets mode: +v npaperbot
[13:43:29] <ville> forward declaration is an incomplete type
[13:43:42] <twice> `T::~T` must be declared before you use `std::unique_ptr<T>`
[13:44:01] <ville> like the error says, you can't tell the size of the type just based on the incomplete type
[13:44:19] <twice> Maybe you can use a custom deleter to avoid this
[13:44:48] *** Joins: fasdasd (~fasdasd@2001:da8:801d:e4c4:c4af:1475:2de7:8af4)
[13:44:52] <ville> fluter: struct aa;    vs    struct aa { int x; }; the first one does not contain the necessary information
[13:46:11] *** Quits: fasdasd (~fasdasd@2001:da8:801d:e4c4:c4af:1475:2de7:8af4) (Client Quit)
[13:46:16] <ville> fluter: the first one only says "type such-and-such exists". that's it and anything else interesting about types is not possible to know based on it
[13:50:25] *** Quits: sreve_ (~quassel@p4ff44fcc.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:52:00] <markand> fluter, the easier is to define My::~My() = default in the My.cpp class
[13:52:01] <markand> source file
[13:52:09] *** Joins: Limits (~Limits@user/Limits)
[13:52:09] *** Joins: sreve (~quassel@p4ff44fcc.dip0.t-ipconnect.de)
[13:52:34] <markand> so the destructor will be implemented where Fwd is complete (I guess Fwd is definitely declared in My TU)
[13:52:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[13:53:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[13:54:55] *** Joins: twice5 (~twice@2001:da8:801d:e4c4:c4af:1475:2de7:8af4)
[13:55:01] *** Parts: twice5 (~twice@2001:da8:801d:e4c4:c4af:1475:2de7:8af4) ()
[13:55:41] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:55:56] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[13:56:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:56:59] *** Joins: pulse (~pulse@user/pulse)
[13:57:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[13:58:26] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:59:42] <pa> would it be a good idea to subclass std::list and add an empty reserve method, to make it compatible with vector ?
[13:59:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:59:58] <ville> sure why not
[14:01:11] <TinoDidriksen> Maybe profile to see if lists even make sense. Might be worth it to drop all lists in favour of vectors.
[14:02:12] <ville> of course you'll get people coming out the woodwork yelling: "you shoudn't derive from standard containers" and other cultisms
[14:03:09] <TinoDidriksen> I don't think even those would object to adding literally nothing.
[14:03:48] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83) (Ping timeout: 240 seconds)
[14:06:10] *** Joins: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de)
[14:07:04] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 256 seconds)
[14:08:33] *** Quits: Limits (~Limits@user/Limits) (Quit: WeeChat 3.4)
[14:08:41] *** Quits: paulf (~paulf@lfbn-gre-1-104-182.w92-157.abo.wanadoo.fr) (Quit: Connection closed)
[14:09:16] <PJBoy> alternative is making a general container wrapper
[14:09:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:09:43] <PJBoy> give it a reserve function that either calls the underlying container's reserve if it exists, or does nothing otherwise
[14:18:58] <furrymcgee> begin() and end() are the generic container functions
[14:23:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:23:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:24:02] *** Joins: Burgundy (~NA@86.121.143.206)
[14:24:33] <fiesh> I think the question makes no sense without specifying *why* you want to do it.  if it's a new class that's completely unused, then of course it's a bad idea like all unused code
[14:24:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:28:36] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 256 seconds)
[14:32:24] <pa> i'm trying to turn methods that use vector internally into templates where the container could be changed
[14:32:28] <pa> but some do call reserve
[14:32:50] <ville> pa: if constexpr that part?
[14:33:21] <pa> ville: /me no understand :-)
[14:33:25] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[14:34:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:34:40] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:35:46] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:36:05] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[14:36:41] <ville> if constexpr not strong enough i guess?
[14:37:18] <fiesh> pa: if you are in control of the code using it, I would not subclass list but rather make the function handle both cases correctly.  you can create a free function `reserve` that handles the cases correctly, for example
[14:37:55] <pa> fiesh: that's a good idea, thanks!
[14:38:01] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:38:24] <ville> pa:  http://coliru.stacked-crooked.com/a/207403cc27a1c239
[14:38:58] <ville> ...however you wish to divvy up what gets by which overload
[14:39:16] <pa> ville: thanks!
[14:40:00] <furrymcgee> convert your list in a vector if you want reserve something useful
[14:41:04] *** Joins: Markow (~Markow@176.122.215.103)
[14:41:16] <pa> what is the correct syntax to only specialize one template argument (Cont) of template<template <typename...> class Cont, typename T> ?
[14:41:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[14:42:42] *** Joins: foul_owl (~kerry@23.82.193.89)
[14:44:31] <furrymcgee> you should certainly not derive from two standard containers at once
[14:45:19] <pa> well, T is what goes into the container
[14:45:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[14:47:00] <ville> you can't partially specialize functions, you'll have to go with a class template if you wish to do that
[14:48:16] <pa> ah i see
[14:49:11] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:50:22] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2544r0.html paper on error handling performance. both codes and exceptions
[14:51:33] <PJBoy> > not ben craig
[14:52:10] <PJBoy> > doesn't reference ben craig's measurements
[14:53:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[14:53:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:53:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[14:53:53] <ville> no idea what that is supposed to mean
[14:55:06] <PJBoy> whoops
[14:55:08] <PJBoy> [P1886]
[14:55:08] <npaperbot> P1886R0: [SG14, Direction Group] Error speed benchmarking <https://wg21.link/p1886r0> (by Ben Craig) (2019-10-05) (Related: https://wg21.link/p1886r0/github)
[14:55:29] <PJBoy> super detailed report on exception performance
[14:56:09] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:56:20] <PJBoy> if you make a paper about exception performance and you don't reference that, that's dubious
[14:56:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:57:32] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:57:42] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:58:00] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[14:58:56] <ville> don't see why that would be the case but oh well
[14:59:54] <PJBoy> if you have to ignore prior work, then you're probably making something up
[15:00:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:00:12] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:00:19] <ville> good grief
[15:01:04] <PJBoy> or you're unaware, which is still symbolic of poor research
[15:01:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[15:03:15] <ville> perhaps just actually read the paper
[15:04:09] *** Joins: proller (~p@2a02:6b8:0:40c:d9fc:37d2:5d87:a16)
[15:04:55] <PJBoy> then it goes back to my first point
[15:05:43] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:07:12] <ville> holy fuck
[15:07:32] <PJBoy> oh you meant me
[15:07:38] <PJBoy> nvm that last comment then
[15:07:41] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:08:16] <PJBoy> I read "perhaps they actually read the paper"
[15:09:54] <PJBoy> the paper's just a load of handwaving
[15:11:02] <PJBoy> and reinforces the common knowledge that exceptions are good at happy path and bad at sad path
[15:11:45] <PJBoy> it brings nothing to the table
[15:11:47] <ville> the interesting part is how they scale with number of threads of execution
[15:12:58] <ville> which at least in short-to-mid term seems like an interesting observation to make as it seems like that's how hardware is going to scale: more threads
[15:13:03] <ville> threads/cores
[15:13:56] <PJBoy> so don't use exceptions if you need performance in your error handling
[15:18:11] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[15:20:52] <anyone> p0709 would be cool
[15:22:38] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:28:10] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[15:28:54] *** Joins: jokoon (~eio@2a01:e0a:542:e160:5ce7:2d4b:e4e:9632)
[15:30:05] *** Quits: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:31:23] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:a170:9a6c:958:71fd)
[15:32:51] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:33:48] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:2605:218d:6584:6835:9180:ba2a) (Ping timeout: 240 seconds)
[15:34:39] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:a170:9a6c:958:71fd) (Remote host closed the connection)
[15:34:52] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:9b32:16d1:2163:cc45)
[15:38:39] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 252 seconds)
[15:38:58] *** Joins: angelacrust (~angelacru@122.161.32.177)
[15:40:33] *** Quits: rb (~augh@209.141.39.190) (Ping timeout: 272 seconds)
[15:40:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:43] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:47:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:47:13] *** Joins: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de)
[15:47:16] <fluter> markand: if i add My::~My() = default; will it cause the member not to be free'ed properly?
[15:48:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[15:49:27] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:54:44] *** Joins: cart_ (~cart@185.191.86.4)
[15:56:03] <cart_> If you launch a thread with a Lambda do you need to return something from the Lambda? It is warning me that I havent returned anything. Did not know I have to. Problem is im getting panics now and I am not sure why. Ususally when you return nothing from a function that has to return something it panics
[15:56:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:56:53] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:57:03] <anyone> C++ is smart enough to see the void return type
[15:57:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:57:21] <anyone> { thread t1([]() { printf("hi world\n"); }); t1.join(); }
[15:57:22] <geordi> hi world
[15:58:21] <cart_> anyone: Could it be that the thread finishes its execution before I .join() it back in?
[15:59:32] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[16:00:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:01:26] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[16:01:31] <PJBoy> you couldn't possibly get a warning for that reason
[16:01:34] *** Joins: Leone (~Leo@108.175.224.215)
[16:02:01] <PJBoy> you didn't specify a trailing return type for the lambda or something crazy like that did you?
[16:02:43] <cart_> The warning said Something in the lines of main() returns with no value at line 180 and line 180 was the end of the lambda inside the main function that was passed into a thread. It is gone now so I am really not sure what actually caused it\
[16:04:27] <anyone> well, main() is not LAMBDA()
[16:05:07] <anyone> could have been {main::lambda#1} tho
[16:05:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:05:22] <anyone> testcase or it didn't happen
[16:07:41] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:07:49] <markand> fluter, it will be freedy correctly
[16:08:05] <fluter> markand: ok
[16:10:43] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:11:56] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[16:15:26] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:16:04] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:9b32:16d1:2163:cc45) (Remote host closed the connection)
[16:16:24] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:eb09:dd1f:63c9:63)
[16:19:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:20:00] *** Joins: Enitin (~Enitin@82.102.22.86)
[16:20:23] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[16:23:20] <cart_> PJBoy: I probably did someting crazy yes. Not sure what though
[16:27:17] *** Quits: cart_ (~cart@185.191.86.4) (Quit: Konversation terminated!)
[16:33:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:34:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:34:17] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:36:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:36:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:20] *** Joins: Rynn (~rynn@216.30.158.198)
[16:45:27] <arch-angel> lets say we declared a char array `const char str[] = "Goodbye world"` and we have another variable `auto& a = str`
[16:45:46] <arch-angel> by right a will be deduced as a `const char (&)[13]`
[16:46:08] <arch-angel> what does the (&) mean here?
[16:46:31] <arch-angel> what's the different between const char& [13] and const char (&)[13]?
[16:46:36] <arch-angel> or is there no difference?
[16:48:27] *** Quits: rajkosto (~rajkosto@93-86-12-136.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[16:49:52] <anyone> can't have an array of refs
[16:50:20] <arch-angel> ohhhhh
[16:51:28] *** Quits: zer0x (~zer0x@58.186.123.149) (Ping timeout: 272 seconds)
[16:51:36] <jcowan> ville: belated thanks for the pointer to the std:format proposal
[16:51:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:51:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:53:57] <ville> as outsiders we'll never have access to all the decissions behind the designs
[16:54:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Remote host closed the connection)
[16:57:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:00:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[17:02:06] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:05:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[17:08:50] <arch-angel> right, I have another thing I'm confused about
[17:09:07] <arch-angel> lets say we have a function `void f(int)` and we have `auto f1 = f`
[17:09:28] <arch-angel> so f1, it has a type `void (*)(int)`
[17:09:35] <arch-angel> what does it mean then?
[17:09:56] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:10:30] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4d97:55b4:eb09:dd1f:63c9:63) (Quit: Leaving)
[17:11:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:12:23] <jcowan> ville: as an acceptor-of-proposals I wouldl send that one back to the author to add more rationale: why is this needed, and is it worth standardization?
[17:13:05] *** Quits: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Remote host closed the connection)
[17:13:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:13:30] *** Joins: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[17:15:11] <arch-angel> so for `void (*)(int)` which is it, a void pointer to an int? or something else?
[17:15:12] <ville> arch-angel: pointer-to-function-taking-int-returning-void
[17:15:33] <arch-angel> a pointer to a function which takes an int and returns a void
[17:15:34] <arch-angel> right
[17:15:49] <arch-angel> makes sense
[17:15:53] *** Quits: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Read error: Connection reset by peer)
[17:16:00] <ville> https://cdecl.org
[17:16:00] *** Joins: beco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[17:16:19] <arch-angel> perfect
[17:16:29] <ville> ...that's a bit far fetched that c++'s declarator syntax makes actual sense
[17:17:01] <arch-angel> of course that makes sense is sarcastic
[17:17:14] <arch-angel> nothing makes sense in C++
[17:17:24] *** Quits: jokoon (~eio@2a01:e0a:542:e160:5ce7:2d4b:e4e:9632) (Ping timeout: 240 seconds)
[17:17:33] <arch-angel> "void (*)(int)" syntax error
[17:17:35] <arch-angel> alright
[17:17:41] <arch-angel> why
[17:18:57] <anyone> ville: ugh that's using an outdated cdecl
[17:20:37] <arch-angel> oh right I just figured out this absolutely unconfusing syntax
[17:20:49] <arch-angel> should've been something like void (*p)(int)
[17:20:57] <arch-angel> "declare p as pointer to function (int) returning void"
[17:21:02] <anyone> $ c++decl 'explain int (K::*a)() &&'
[17:21:02] <anyone> declare a as pointer to member of class K rvalue reference member function returning int
[17:21:28] <arch-angel> rvalue reference
[17:21:33] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[17:21:49] <arch-angel> if you need a reference, then it shouldn't be a rvalue anymore
[17:22:06] <arch-angel> isn't it?
[17:22:29] *** Joins: jokoon (~eio@2a01:e0a:542:e160:51b1:8d75:9236:1e13)
[17:22:47] <arch-angel> rvalues are things that doesn't have addresses
[17:22:48] *** Joins: teepee (~teepee@openscad/teepee)
[17:23:05] <arch-angel> oh wait, it's also temporary objects returned from functions
[17:23:13] <anyone> { K().f(); } struct K { void f() && { printf("I have an address! %p\n", this; } };
[17:23:13] <geordi> error: Unexpected `}` after ` this; `. Expected ')' or balanced code.
[17:23:16] <anyone> { K().f(); } struct K { void f() && { printf("I have an address! %p\n", this); } };
[17:23:17] <geordi> warning: format '%p' expects argument of type 'void*', but argument 2 has type 'K*'
[17:23:37] <arch-angel> wow more confusing syntax, I'm lovin' it
[17:23:44] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:24:19] <anyone> { K().f(); } struct K { void f() && { printf("I have an address! %p\n", (void*)this); } };
[17:24:20] <geordi> I have an address! 0x7ffcfaed3307
[17:24:22] <anyone> there, for completeness
[17:24:24] *** Quits: angelacrust (~angelacru@122.161.32.177) (Quit: Client closed)
[17:25:06] <arch-angel> ah why does that even work i have entirely no idea
[17:25:13] <arch-angel> the joys of programming
[17:25:44] <anyone> "temporary" does not mean "without-an-address"
[17:26:45] <arch-angel> anyone: so rvalues can have addresses?
[17:27:35] *** Quits: jokoon (~eio@2a01:e0a:542:e160:51b1:8d75:9236:1e13) (Quit: Leaving)
[17:27:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[17:28:00] <bobb_> anyone are you refering to an rvalue or an rvalue-reference
[17:28:34] <bobb_> ?
[17:28:41] <arch-angel> rvalue
[17:28:47] <arch-angel> not an rvalue-reference
[17:29:16] <arch-angel> because as far as my understanding goes, when a rvalue is assigned an address for it to be able to be referred to it becomes a lvalue
[17:31:11] <pa> if i have a std::list, and i keep an iterator to each element in a separate container (vector, map, set, whatever), then i erase one element of the list (say using one of the iterators), will the others be still valid? And if yes, would the same apply to std::vector too?
[17:31:51] <Oxyd> Yes. No.
[17:34:09] <pa> thanks
[17:34:48] <bobb_> arch-angel the C++ standard defines value categories, https://en.cppreference.com/w/cpp/language/value_category
[17:35:26] <bobb_> you are right when you say you cannot use the address operator to obtain the address of an rvalue
[17:35:57] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 240 seconds)
[17:36:10] <arch-angel> i see
[17:36:36] <PJBoy> << &S(); struct S { S* operator&() { return this; } };
[17:36:36] <geordi> 0x7ffda589fa67
[17:38:00] <bobb_> << &i++; { int i = 1; }
[17:38:01] <geordi> error: expected unqualified-id before '{' token
[17:38:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:38:40] <PJBoy> << &i++; int i = 1;
[17:38:40] <geordi> error: lvalue required as unary '&' operand
[17:39:03] *** lh_cat is now known as lh_mouse
[17:41:19] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:41:57] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[17:42:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:42:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:59] *** ChanServ sets mode: +v npaperbot
[17:44:45] *** Joins: clime (~clime@37-48-59-48.nat.epc.tmcz.cz)
[17:45:10] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Quit: leaving)
[17:46:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:47:01] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:47:07] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[17:47:30] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[17:51:54] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:52:00] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[17:52:15] *** Joins: Sadale (~Sadale@user/sadale)
[17:52:18] *** Joins: meandrain (~meandrain@89.39.95.133)
[17:54:43] *** Quits: martiert_work (~martiert@173.38.220.58) (Quit: leaving)
[17:54:59] *** Joins: Guest9862 (~martiert_@2001:420:44c1:2617:91fe:29f8:276f:44d8)
[17:55:03] *** Guest9862 is now known as martiert_work
[17:55:18] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[17:58:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:58:26] *** Joins: Sadale (~Sadale@user/sadale)
[17:58:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[18:01:45] *** Quits: Sadale (~Sadale@user/sadale) (Client Quit)
[18:01:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:02:29] *** Joins: Sadale (~Sadale@user/sadale)
[18:02:35] <pa> what happens to a std::list::iterator if the element it points to gets erased from the list?
[18:03:14] <PJBoy> it becomes invalid
[18:03:41] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[18:04:51] <pa> PJBoy: right. is there a way to check for iterator validity?
[18:05:00] <PJBoy> there is not
[18:05:35] <ville> some implementations have some form of tracking available in debug builds or through other means
[18:07:32] *** Joins: pulse (~pulse@user/pulse)
[18:08:44] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[18:09:22] *** Quits: savolla (~quassel@95.10.204.117) (Ping timeout: 272 seconds)
[18:11:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:25:33] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[18:25:45] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[18:28:23] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.255)
[18:29:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[18:30:36] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 240 seconds)
[18:31:07] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:31:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:32:30] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[18:32:57] <pa> is std::list::end an iterator that keeps valid even if the elements before are getting erased?
[18:33:02] <pa> or is that one also becoming invalid?
[18:34:42] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[18:34:59] <anyone> { vector<int> x{}; auto i = x.end(); x.push_back(21); cout << *i; }
[18:35:00] <geordi> /usr/local/include/c++/12.0.1/debug/safe_iterator.h:304: [+ 12 discarded lines]
[18:35:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:36:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:36:16] <pa> { vector<int> x{}; auto i = x.end(); x.push_back(21); cout << i == x.end(); }
[18:36:16] <geordi> error: no match for 'operator<<' in 'cout << i' (operand types are 'ostream' {aka 'ostream'} and '_Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag>')
[18:37:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:38:20] <pa> ok, but then is there an "invalid" iterator value that keeps invalid and can checked against and be assigned to an iterator variable?
[18:38:25] <pa> rbegin?
[18:38:33] <anyone> So, to answer the question, it's getting invalid.
[18:38:52] <PJBoy> the list end iterator remains valid after list erasures
[18:39:16] <anyone> { vector<int> x; x.reserve(16); auto i = x.end(); x.push_back(21); cout << *i; }
[18:39:17] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[18:39:17] <geordi> 21
[18:39:23] <PJBoy> list erasure only invalidates the iterators to the erased elements
[18:39:36] <anyone> (therefore, x.end becomes invalid after you push more)
[18:39:45] <pa> PJBoy: thanks!
[18:51:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:51:58] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:52:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:52:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:54:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:57:11] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:58:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:00:45] *** Joins: hasan_ (~hasan@86.57.106.198)
[19:01:10] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[19:02:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[19:03:47] *** Quits: Guest4248 (~hasan@86.57.123.26) (Ping timeout: 252 seconds)
[19:06:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9)
[19:06:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9) (Changing host)
[19:06:32] *** Joins: skapata (~Skapata@user/skapata)
[19:06:35] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:07:27] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[19:07:27] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Client Quit)
[19:09:45] *** Joins: darkbit (~db@136.158.8.67)
[19:09:50] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[19:10:31] *** Joins: paulo (paulo@user/paulo/x-9032687)
[19:11:51] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:12:00] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[19:12:50] <pa> if i want to implement emplace method for a custom container class, how would i go about it?
[19:13:36] <pa> ah std::forward_args
[19:15:18] *** Quits: darkbit (~db@136.158.8.67) (Quit: WeeChat 3.4)
[19:15:35] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[19:15:35] *** Joins: darkbit (~db@136.158.8.67)
[19:15:51] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Read error: Connection reset by peer)
[19:17:46] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Quit: This computer has gone to sleep)
[19:24:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:29:11] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.255) (Ping timeout: 272 seconds)
[19:29:21] *** Joins: xkuru (~xkuru@user/xkuru)
[19:30:54] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:7576:c380:89de:1f93:65fd)
[19:31:16] *** Quits: meandrain (~meandrain@89.39.95.133) (Ping timeout: 250 seconds)
[19:33:03] *** Quits: beco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Quit: Leaving)
[19:37:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:37:58] <bobb_> pa no
[19:38:20] <bobb_> pa sorry nvm
[19:40:44] <bobb_> pa an iterator acts like a pointer that refers to an element of a certain range. The programmer must know if that pointer is still valid
[19:41:04] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[19:45:30] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:7576:c380:89de:1f93:65fd) (Remote host closed the connection)
[19:45:54] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:7576:c380:89de:1f93:65fd)
[19:46:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:46:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:47:05] <pa> so, iterators can't be put into a std::map because they lack operator< ?
[19:47:19] <pa> as key, i mean
[19:50:13] *** Joins: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[19:52:26] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[19:52:56] *** Quits: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[19:54:03] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Client Quit)
[19:58:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.63)
[19:58:59] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:59:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:59:31] <Alipha> !give fluter spimpl
[19:59:32] <nolyc> fluter: spimpl is a utility class to slightly simplify writing a PIMPL pattern: https://github.com/oliora/samples For further explanation, see: http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html
[20:00:37] <Alipha> (i believe spimpl is appropriate even if you're not trying to implement a PIMPL pattern?)
[20:01:53] <Eelis> pa: some iterators do have operator<, but not all, because there are sequences for which it cannot be implemented efficiently
[20:02:03] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[20:02:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:02:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:02:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:02:50] <anyone> Eelis: like which one?
[20:03:17] <pa> Eelis: is there a way to add it (in a mock way, like just comparing the memory address, f.ex.) in the same way hash functions can be added for unordered_map ?
[20:03:27] <Eelis> anyone: std::vector::iterator is an example of an iterator that does have it. std::list::iterator is an example of an iterator that doesn't have it
[20:03:52] <pa> i just need to stuff that thing inside a map..
[20:05:18] <Eelis> pa: what kind of iterators are you dealing with?
[20:05:27] <pa> std::list iterators
[20:05:45] <anyone> { list<int> x{42}; auto i = x.begin(); i < i; }
[20:05:45] <geordi> error: no match for 'operator<' in 'i < i' (operand types are '_Safe_iterator<list<int>::iterator, list<int>, bidirectional_iterator_tag>' and '_Safe_iterator<list<int>::iterator, list<int>, bidirectional_iterator_tag>')
[20:05:50] <Eelis> will the list remain unchanged throughout your use of the map?
[20:05:59] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[20:06:49] <anyone> if you put iterators as map keys, what you usually want is decltype(it.operator*())::operator< rather than it::operator<
[20:07:08] <pa> Eelis: nope
[20:07:17] <pa> or.. maybe..
[20:07:20] <pa> let me check
[20:07:40] <Eelis> you can also consider just using T* as the key
[20:08:35] <pa> Eelis: so, no, but i can erase the element from the map before erasing the same from the list
[20:08:49] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[20:09:39] <Eelis> i suspect that if you define a less-than function on list iterators that compares memory addresses, then in principle, it probably wouldn't explode
[20:10:05] <pa> well, they aren't going to change, right?
[20:10:06] <Eelis> but of course that less-than function wouldn't correspond to actual element order
[20:10:12] <pa> that's ok
[20:10:59] <Eelis> so something like    for (auto i = list.begin(); i < list.end(); ++i)  would explode if that < compared memory addresses
[20:14:11] <Eelis> i wonder if there's a good reason why one cannot make a std::list::iterator out of a pointer to an element
[20:14:38] <Eelis> seems like it should be technically trivial
[20:14:51] <Alipha> pa: https://wandbox.org/permlink/BMbTjBJUnIm6Wn2Z
[20:15:09] <PJBoy> list::iterator on geordi is 40 bytes :/
[20:15:19] <Eelis> !geordibench
[20:15:20] <nolyc> Geordi uses libstdc++'s debug mode along with various other costly debugging instrumentation. Consequently, sizes and speeds and temporary counts observed with geordi should not be taken to be representative of optimized implementations.
[20:15:26] <PJBoy> sounds like it needs a lot more info than just the pointer
[20:15:34] <PJBoy> at least for debug builds
[20:15:35] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:15:58] <Alipha> PJBoy: on wandbox, it's 8
[20:16:23] <PJBoy> you have to assume it's for debug support then
[20:17:10] <Eelis> limiting the release functionality of std::list in order to provide debug-mode diagnostics seems ill-conceived
[20:17:12] <anyone> padding in the middle ! :D
[20:17:45] <pa> Alipha: thanks!
[20:17:54] <PJBoy> debuggability is more important than making a list iterator from pointer to element
[20:18:11] <Eelis> i couldn't disagree more
[20:18:27] <PJBoy> well debuggability is at least somewhat important
[20:18:51] <PJBoy> making an iterator from a pointer seems wholly unimportant
[20:18:57] <Eelis> debuggability is a nice extra that you can sometimes get by piggybacking some extra metadata onto an implementation. debuggability is not something that should sabotage implementations
[20:19:02] *** Parts: jcowan (sid325434@id-325434.ilkley.irccloud.com) ()
[20:19:02] <anyone>  : public __gnu_debug::_Safe_iterator<_Iterator, _Sequence, std::forward_iterator_tag> {} there it is
[20:19:33] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:06] <Alipha> << TYPE<std::list<int>::iterator>;
[20:20:07] <geordi> _Safe_iterator<list<int>::iterator, list<int>, bidirectional_iterator_tag>
[20:20:38] *** Joins: rwb (~augh@209.141.39.190)
[20:24:46] <Alipha> pa: i would highly recommend compiling any debug/testing builds with -D_GLIBCXX_DEBUG in order to hopefully catch any mistakes in invalid list iterators being dereferenced
[20:26:29] *** Quits: arch-angel (~quassel@user/arch-angel) (Ping timeout: 250 seconds)
[20:26:34] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[20:26:50] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[20:31:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:33:26] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:34:32] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Remote host closed the connection)
[20:36:01] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[20:38:10] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 260 seconds)
[20:38:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:39:33] *** Joins: darkbit (~db@136.158.8.67)
[20:41:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:41:51] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[20:41:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:43:27] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[20:45:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:45:53] *** Joins: szymon (~ugh@37.120.211.198)
[20:45:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:46:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[20:46:36] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Client Quit)
[20:47:27] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:47:48] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[20:48:34] *** Joins: szymon_ (~ugh@37.120.211.204)
[20:49:22] *** Joins: Moosadee (~Moosadee@216.185.233.27)
[20:49:23] *** Quits: Moosadee (~Moosadee@216.185.233.27) (Read error: Connection reset by peer)
[20:50:10] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[20:50:37] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:51:30] *** Quits: szymon_ (~ugh@37.120.211.204) (Client Quit)
[20:51:40] *** Quits: szymon (~ugh@37.120.211.198) (Ping timeout: 256 seconds)
[20:52:04] *** Joins: malloy (~jimery@116.30.220.175)
[20:52:39] *** Joins: Moosadee (~Moosadee@216.185.233.27)
[20:53:01] *** Quits: Moosadee (~Moosadee@216.185.233.27) (Read error: Connection reset by peer)
[20:53:19] *** Joins: Moosadee (~Moosadee@216.185.233.27)
[20:59:26] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[20:59:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:01:09] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[21:03:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:04:24] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[21:05:00] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[21:15:50] *** Joins: cart_ (~cart@185.191.86.4)
[21:16:07] <cart_> What is a good way to remove nextlines and empty spaces from a string?
[21:17:06] <TinoDidriksen> Remove all characters matching isspace()
[21:18:56] <Alipha> erase-remove idiom
[21:18:57] *** Quits: maxxe (~maxxe@user/maxxe) (Quit: bbl)
[21:19:28] <cart_> TinoDidriksen: Is there a std function for that?
[21:19:48] <Alipha> Or preferably, std::erase_if from c++20
[21:20:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:21:10] <Alipha> std::erase_if(str, [](int c) { return std::isspace(c); });
[21:21:38] <PJBoy> assuming we intend to remove all whitespace, and not just the leading and trailing
[21:24:19] *** Joins: maxxe (~maxxe@user/maxxe)
[21:26:03] *** Quits: maxxe (~maxxe@user/maxxe) (Client Quit)
[21:29:00] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.63) (Ping timeout: 240 seconds)
[21:29:08] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[21:32:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:32:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:34:34] *** Quits: cart_ (~cart@185.191.86.4) (Ping timeout: 272 seconds)
[21:38:05] <furrymcgee> stringstreams with some kind of ctype<> is probably a good way to deal with strings
[21:39:58] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[21:40:11] <anyone> or string_view it, then modify the front and back depending on whether you find ws
[21:40:31] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Quit: Thanks)
[21:40:39] <Alipha> { std::string str = "hello world\ntest\tmoo"; std::erase_if(str, [](int c) { return std::isspace(c); }); std::cout << str; }
[21:40:40] <geordi> helloworldtestmoo
[21:40:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[21:40:48] <Alipha> { std::string str = "hello world\ntest\tmoo"; str.erase(std::remove_if(str.begin(), str.end(), [](int c) { return std::isspace(c); }), str.end()); std::cout << str; }
[21:40:49] <geordi> helloworldtestmoo
[21:42:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:00] *** ChanServ sets mode: +v npaperbot
[21:44:39] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:47:16] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:7576:c380:89de:1f93:65fd) (Remote host closed the connection)
[21:47:24] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:7576:c380:89de:1f93:65fd)
[21:51:28] *** Joins: analognoise (~analognoi@185.202.221.26)
[21:54:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:54:36] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[21:55:27] *** Joins: skapata (~Skapata@user/skapata)
[21:57:24] *** Quits: Moosadee (~Moosadee@216.185.233.27) (Ping timeout: 256 seconds)
[21:58:01] <PJBoy> the cppreference approved method is for your lambda to take an unsigned char parameter, rather than int
[21:58:16] *** Quits: proller (~p@2a02:6b8:0:40c:d9fc:37d2:5d87:a16) (Ping timeout: 245 seconds)
[21:58:49] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[21:58:52] <PJBoy> not sure I agree, but hey
[22:00:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:02:08] *** Quits: magla (~gelignite@55d4d6c3.access.ecotel.net) (Read error: Connection reset by peer)
[22:02:27] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[22:03:16] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[22:06:14] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 272 seconds)
[22:07:06] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:13:35] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 240 seconds)
[22:17:33] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:19:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[22:28:06] <Alipha> that makes sense. The ctype functions expect unsigned integer values
[22:34:20] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[22:35:30] <PJBoy> they have int parameters though
[22:35:41] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:35:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:36:23] *** Parts: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) ()
[22:36:27] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[22:36:27] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Client Quit)
[22:36:54] *** Joins: cart_ (~cart@2a00:23c7:9990:d701:10e8:8cb7:3f73:acde)
[22:36:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f9ec:3f5d:e36a:777a) (Ping timeout: 240 seconds)
[22:38:01] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9801:96f6:3a13:6949)
[22:39:29] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[22:39:44] <acidtonic> Alipha, hey getting back to the byte swapping routines you pointed me to, did you say you had signed versions of uint16_to_le and uint32_to_le?
[22:40:37] <acidtonic> is that technique to ignore byte order only valid for unsigned? I see nobody doing signed conversion that way
[22:42:41] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9801:96f6:3a13:6949) (Ping timeout: 252 seconds)
[22:47:30] *** Joins: vicfred (~vicfred@user/vicfred)
[22:48:25] *** Joins: Betal (~Betal@user/betal)
[22:49:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:50:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:50:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2587:291:d923:f313)
[22:51:50] <PJBoy> to_little_endian and to_big_endian support signed types
[22:52:27] <acidtonic> PJBoy, I'm looking here, https://github.com/alipha/cpp/blob/master/endian/endian.hpp#L116-L148
[22:52:39] <PJBoy> https://github.com/alipha/cpp/blob/master/endian/generic/endian.hpp
[22:54:01] <acidtonic> PJBoy, Just curious haven't seen this technique, is that due to  "using UInt = std::make_unsigned_t<Integer>;"
[22:54:28] <acidtonic> Would that mean I could just use that and then the existing le_to_uint16 functions from that other file? Didn't think it was that easy
[22:56:05] <PJBoy> the unsigned cast is there to make the bitshift behave
[22:56:47] <PJBoy> and yeah you can use these functions and the other ones
[22:58:12] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[22:58:14] <PJBoy> note this example that uses signed integers https://github.com/alipha/cpp/blob/master/endian/generic/example.cpp
[22:58:18] <acidtonic> :
[22:58:49] <acidtonic> PJBoy, looking, Thanks
[23:00:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:04:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:15:37] *** Joins: grafikrobot (~grafikrob@208.59.79.14)
[23:16:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:19:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:19:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:23:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[23:24:57] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:26:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:30:02] *** Quits: NovaXrine_ (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:30:21] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[23:31:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:31:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:33:03] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:35:05] *** Joins: Viewday11 (~Viewday@user/viewday)
[23:35:51] <Alipha> Oh, yeah. I hide those generic functions away because they seemed to scare lesser experienced programmers.
[23:36:36] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:41:41] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:47:07] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr)
[23:47:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:47:50] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[23:48:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:48:19] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:48:36] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600983d5be4f9b40354.ipv6.abo.wanadoo.fr)
[23:48:50] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[23:49:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[23:49:45] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:50:14] *** Joins: skapata (~Skapata@user/skapata)
[23:55:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:56:05] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:57:00] *** Quits: cart_ (~cart@2a00:23c7:9990:d701:10e8:8cb7:3f73:acde) (Quit: Konversation terminated!)
