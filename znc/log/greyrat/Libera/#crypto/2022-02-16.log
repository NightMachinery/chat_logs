[00:07:39] *** evanextreme[away is now known as evanextreme
[00:07:51] *** evanextreme is now known as evanextreme[away
[00:09:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[00:10:51] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:11:12] *** evanextreme[away is now known as evanextreme
[00:11:42] <hg> sshine: :P
[00:12:08] *** Quits: sobkas (~sobkas@95.175.17.217) (Ping timeout: 272 seconds)
[00:15:46] *** Joins: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[00:18:47] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[00:19:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:22:26] *** Joins: sobkas (~sobkas@95.175.17.217)
[00:25:31] *** evanextreme is now known as evanextreme[away
[00:26:42] <hg> oh away-nicks
[00:26:44] <hg> I forgot about those
[00:28:51] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-596e-b8a7-f58c-1fa5.res6.spectrum.com)
[00:34:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:41:10] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[01:05:00] *** Quits: sobkas (~sobkas@95.175.17.217) (Ping timeout: 240 seconds)
[01:10:42] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:15:57] *** Joins: KillerWasp (~KillerWas@user/killerwasp)
[01:16:11] <KillerWasp> hello
[01:17:59] <KillerWasp> I was studying a bit about cryptography. And she was looking at this page:
[01:17:59] <KillerWasp> https://access.redhat.com/documentation/es-es/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/configuring-tls-encryption-on-an-apache-http-server_setting-apache-http-server
[01:17:59] <KillerWasp> The certificate in the ca.crt file is a half-sign certificate that is given to you by an authority certifier such as verysign?
[01:18:14] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[01:18:35] <MacGyver> A what now?
[01:18:42] <MacGyver> What do you mean by half-sign?
[01:18:45] <KillerWasp> Or in turn ca.crt must be a certificate signed by some other certifier?
[01:20:09] <ms7821> ca.crt is self-signed
[01:20:33] <KillerWasp> yes, i mean self-signed, not half-sign
[01:21:20] <ms7821> but this is not how you typically deploy TLS
[01:21:48] <KillerWasp> ms7821: then any certifier server give you a self-signed certificate?
[01:22:10] <KillerWasp> ms7821: uh?
[01:22:42] <ms7821> it depends who you use, but in the simplest case, yes. the trust anchor is a self-signed certificate that's distributed with an operating system or browser
[01:23:10] <ms7821> you can have cross-signed roots, where the person who issues your certificate in turn uses a certificate signed by someone else
[01:23:25] <ms7821> but ultimately it ends on a certificate that's in a trust store, and it doesn't matter that it's self-signed
[01:26:18] <KillerWasp> But you're talking about self-created certificates, I still don't know if other authority certifying sites also give you self-signed ca.crt.
[01:26:22] <KillerWasp> ms7821: 
[01:27:31] <KillerWasp> now i can't find any example of work with those sites like verysign or others (i only remember verysign)
[01:27:43] <ms7821> sure, here's comodo's root for example https://support.comodo.com/index.php?/Knowledgebase/Article/View/969/108/root-comodo-rsa-certification-authority-sha-2
[01:28:00] <ms7821> they don't issue from this, they issue from intermediate CAs but this is where it will end
[01:28:01] <KillerWasp> oh, i found let's encrypt.
[01:28:25] <ms7821> yeah, let's encrypt has a good diagram if you understand what's going on https://letsencrypt.org/certificates/
[01:29:03] *** Joins: brolin (~brolin@190.29.195.243)
[01:29:09] *** Quits: brolin (~brolin@190.29.195.243) (Remote host closed the connection)
[01:31:15] *** Joins: brolin (~brolin@190.29.195.243)
[01:32:34] <KillerWasp> ms7821: sure, i already saw this for letsencrypt. That according to what I understand, the certificate that it gives you is signed in turn by E1, and signed in turn by ISRG Root X2, and signed in turn by ISRG Root X1, and signed in turn by DST Root CA X3, and finally the latter is self-signed.
[01:34:20] <KillerWasp> But he's the only one I know of. Do all certifying authorities do that? Is it valid to use a self-signed ca.crt directly on a production server or is it necessary that it is always signed in turn by another certifier as a better security measure?
[01:34:21] <ms7821> not quite, a single certificate will only chain to one of those üóé certificates
[01:35:19] <ms7821> so before they switched over, the certificates on the bottom left would have been signed by the left-hand R3 certificate, which is in turn only signed by the DST root
[01:36:18] <KillerWasp> i see.
[01:36:28] <ms7821> and now, they're signed by the right-hand R3 certificate, which you can combine with either the left-hand X1 certificate and the DST root for old systems, or the right-hand X1 certificate if that's in your trust store
[01:36:58] <ms7821> and it's all about the trust store, which is why you can't just usually use a self-signed ca.crt on a production server, because your random ca.crt won't be in anyone's trust store
[01:37:25] <ms7821> now, if you run an organisation, and have control over their computers, you can make your own ca.crt trusted on all those machines
[01:38:07] <ms7821> this also means you could sign a certificate for any domain in the world, and intercept traffic for those domains. but you own these computers anyway, so that's "fine"
[01:38:39] <ms7821> but anyone using their own computer will get an untrusted certificate error
[01:40:44] <KillerWasp> ms7821: That's because they are not in the list of authority certificates that browsers use.
[01:40:53] <ms7821> yep
[01:41:53] <ms7821> there's actually a well-known community CA that encourages people to to install their CA. They used to issue free certificates long before LetsEncrypt http://www.cacert.org/
[01:42:17] <ms7821> but they don't have any funding and didn't get audited so have never really been trusted by anyone that matters
[01:46:18] <KillerWasp> ms7821: and who determines which certifying authorities should be built into browsers?
[01:46:45] <ms7821> the "root programs"
[01:47:29] <KillerWasp> what? They do not add certifiers to the trusted list.
[01:47:56] <ms7821> which is basically, Google (for Chrome), Mozilla (Firefox), Microsoft, Apple
[01:48:53] <KillerWasp> that scare. All the big boys are the ones who decide which trusted certifier to add to the systems.
[01:49:01] <ms7821> well, they write the software
[01:49:22] <KillerWasp> ms7821: but your own software like windows and mac, but not for linux.
[01:50:05] <ms7821> linux-based systems have their own list in /etc/ssl
[01:50:09] <ms7821> and I think that's managed by the distribution
[01:50:23] <wasamasa> yeah
[01:50:31] <wasamasa> cacert wasn't universally liked by linux distros
[01:50:44] <ms7821> but they don't have a seat at the cabforum
[01:50:50] <KillerWasp> i found this: https://firefox-source-docs.mozilla.org/security/nss/index.html
[01:50:59] <ms7821> yeah, NSS is the Firefox root store
[01:51:28] <ms7821> and strictly, Chrome doesn't have its own, but it does have a block list
[01:52:00] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:12:02] <KillerWasp> I can't find anything related to updating the list. I don't know how they determine to add or remove authority certifiers.
[02:14:12] <hg> on the level of rigor before adding a new root, they're probably somewhere in the middle of the spectrum between ‚Äúhow nice are they when they reply to our emails‚Äù and ‚Äúhow much money did they pay us again?‚Äù
[02:14:33] <hg> that's probably a little unfair
[02:14:42] <hg> but they're not really beholden to anyone directly for those processes
[02:15:59] <ms7821> it's developed over time, so these days if you follow the Basic Requirements and show an effort to appear trustworthy you'll get in
[02:16:04] <Peng> ms7821: Chrome is setting up its own root program
[02:16:15] <ms7821> ooh
[02:16:54] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[02:16:59] <ms7821> here's how to apply for Mozilla's root program https://wiki.allizom.org/CA/Application_Instructions
[02:17:09] <ms7821> https://wiki.mozilla.org/CA/Application_Instructions
[02:17:12] <ms7821> why is that domain backwards
[02:17:59] <hg> hmm, resolves
[02:18:10] <ms7821> yeah, and annoyingly has more google juice for that page
[02:18:42] <hg> huh
[02:18:58] <Peng> ms7821: It is (or was) Mozilla's test domain
[02:19:05] <hg> Peng: that's interesting
[02:19:20] <ms7821> figures
[02:30:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com)
[02:48:34] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 272 seconds)
[02:51:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[02:51:28] *** Quits: Pythayr (~pither195@64.42.181.51) (*.net *.split)
[02:51:28] *** Quits: WishBoy (~WishBoy@user/wishboy) (*.net *.split)
[02:51:28] *** Quits: Colti (Miramar-FL@user/host-pond) (*.net *.split)
[02:51:28] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpw0y1huzxznhd6.ipv6.telus.net) (*.net *.split)
[02:51:28] *** Quits: meyer (~nunyuh@user/cosanostra) (*.net *.split)
[02:51:28] *** Quits: sol (~toor@oops.root.sx) (*.net *.split)
[02:51:28] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (*.net *.split)
[02:51:28] *** Quits: defjam (~eb0t@90.196.141.185) (*.net *.split)
[02:51:28] *** Quits: rg (~r-g@51.15.187.53) (*.net *.split)
[02:51:28] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[02:51:28] *** Quits: sebbu (~sebbu@user/sebbu) (*.net *.split)
[02:51:28] *** Quits: t0x0sh (~tosh@176.158.137.106) (*.net *.split)
[02:51:28] *** Quits: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Bostik (~bostik@static.78.20.217.95.clients.your-server.de) (*.net *.split)
[02:51:28] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (*.net *.split)
[02:51:28] *** Quits: KillerWasp (~KillerWas@user/killerwasp) (*.net *.split)
[02:51:28] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[02:51:28] *** Quits: davidc__ (~user13172@will.hack.for.beer) (*.net *.split)
[02:51:28] *** Quits: multi_io (~olaf@185.56.132.5) (*.net *.split)
[02:51:28] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[02:51:28] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[02:51:28] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[02:51:28] *** Quits: EpicKitty (EpicKitty@marshadow.epickitty.co.uk) (*.net *.split)
[02:51:28] *** Quits: ms7821 (~Mark@london.rack.ms) (*.net *.split)
[02:51:28] *** Quits: AlloSaurus (pate81@itu.ihme.org) (*.net *.split)
[02:53:47] *** Joins: KillerWasp (~KillerWas@user/killerwasp)
[02:53:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[02:53:47] *** Joins: Pythayr (~pither195@64.42.181.51)
[02:53:47] *** Joins: Colti (Miramar-FL@user/host-pond)
[02:53:47] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpw0y1huzxznhd6.ipv6.telus.net)
[02:53:47] *** Joins: meyer (~nunyuh@user/cosanostra)
[02:53:47] *** Joins: sol (~toor@oops.root.sx)
[02:53:47] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[02:53:47] *** Joins: defjam (~eb0t@90.196.141.185)
[02:53:47] *** Joins: rg (~r-g@51.15.187.53)
[02:53:47] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[02:53:47] *** Joins: sebbu (~sebbu@user/sebbu)
[02:53:47] *** Joins: t0x0sh (~tosh@176.158.137.106)
[02:53:47] *** Joins: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com)
[02:53:47] *** Joins: Bostik (~bostik@static.78.20.217.95.clients.your-server.de)
[02:53:47] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[02:53:47] *** Joins: Henry151 (~bishop@user/henry151)
[02:53:47] *** Joins: davidc__ (~user13172@will.hack.for.beer)
[02:53:47] *** Joins: sshine (~simon@hubris.eta.solutions)
[02:53:47] *** Joins: multi_io (~olaf@185.56.132.5)
[02:53:47] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[02:53:47] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[02:53:47] *** Joins: ms7821 (~Mark@london.rack.ms)
[02:53:47] *** Joins: EpicKitty (EpicKitty@marshadow.epickitty.co.uk)
[02:53:47] *** Joins: AlloSaurus (pate81@itu.ihme.org)
[02:53:47] *** Quits: sebbu (~sebbu@user/sebbu) (Max SendQ exceeded)
[02:54:29] *** Joins: sebbu (~sebbu@user/sebbu)
[02:55:55] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:59:41] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[03:01:29] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:01:42] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:02:35] *** Quits: Malvolio (~Malvolio@user/malvolio) (Killed (lead.libera.chat (Nickname regained by services)))
[03:11:43] *** Joins: deusexbeer (~hedeo@37-146-227-150.broadband.corbina.ru)
[03:15:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:28:21] *** Joins: igemnace (~ian@user/igemnace)
[03:31:12] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:31:16] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:33:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[03:34:03] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:34:57] *** Joins: evanextreme (~evan@64.187.160.183)
[03:42:38] *** Quits: evanextreme (~evan@64.187.160.183) (Read error: Connection reset by peer)
[03:43:44] *** Joins: evanextreme (~evan@64.187.160.183)
[03:53:48] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:55:14] *** Joins: Wulf (~Wulf@user/wulf)
[04:05:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:06:00] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[04:06:39] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[04:06:48] *** Quits: brolin (~brolin@190.29.195.243) (Remote host closed the connection)
[04:08:03] *** evanextreme is now known as evanextreme[away
[04:08:03] *** Quits: evanextreme[away (~evan@64.187.160.183) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:08:42] *** Joins: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv)
[04:25:28] *** Quits: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv) (Ping timeout: 272 seconds)
[04:25:44] *** Joins: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv)
[04:29:21] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[04:39:27] *** Quits: B4ckBOne (~B4ckBOne@85.10.195.46) (Quit: ZNC 1.8.2 - https://znc.in)
[04:41:49] *** Joins: B4ckBOne (~B4ckBOne@85.10.195.46)
[04:41:50] *** Quits: B4ckBOne (~B4ckBOne@85.10.195.46) (Excess Flood)
[04:43:51] *** Joins: B4ckBOne (~B4ckBOne@85.10.195.46)
[04:43:52] *** Quits: B4ckBOne (~B4ckBOne@85.10.195.46) (Excess Flood)
[04:44:52] *** Joins: B4ckBOne (~B4ckBOne@85.10.195.46)
[05:25:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:25:54] *** Joins: spek (~spek@189-49-228-177.user3p.veloxzone.com.br)
[05:26:15] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:29:30] *** Joins: moose (~moose@user/moose)
[05:32:26] *** Joins: SlimeyNarcissist (~blank@user/slimmyjimmy)
[05:33:37] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 240 seconds)
[05:39:17] *** Parts: xx (~xx@user/xx) (K-Lined)
[05:39:18] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[05:51:24] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:51:53] *** Joins: xx (~xx@user/xx)
[06:01:02] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:06:19] *** Joins: frost (~frost@user/frost)
[06:20:29] *** Joins: brolin (~brolin@179.13.18.50)
[06:23:34] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:43:25] *** Quits: brolin (~brolin@179.13.18.50) (Remote host closed the connection)
[06:44:21] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:52:15] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:03:17] *** Quits: lithium_pt (~lithiumpt@a95-94-97-60.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[07:08:18] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 252 seconds)
[07:12:58] *** Guest4829 is now known as polo
[07:28:45] *** Joins: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net)
[07:32:03] *** Joins: lithiumpt (~lithiumpt@217.138.203.221)
[07:43:42] *** Parts: Mnedusza (~Thunderbi@S010620e52a118339.ed.shawcable.net) ()
[07:54:46] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[07:55:25] *** Joins: Colti (Miramar-FL@user/host-pond)
[07:57:48] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[08:01:06] *** Quits: lithiumpt (~lithiumpt@217.138.203.221) (Ping timeout: 252 seconds)
[08:05:39] *** Quits: SlimeyNarcissist (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[08:07:45] *** Joins: Malvolio (~Malvolio@user/malvolio)
[08:08:00] *** Quits: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv) (Read error: Connection reset by peer)
[08:08:45] *** Joins: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv)
[08:14:02] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.4)
[08:14:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[08:17:25] *** Joins: jtgd (~jtgd@user/jtgd)
[08:19:48] *** Quits: kj7rrv (~kj7rrv@linuxarc/founder/kj7rrv) (Ping timeout: 252 seconds)
[08:19:48] *** Quits: ua_ (~ua@public-gprs228589.centertel.pl) (Ping timeout: 272 seconds)
[08:21:12] *** Joins: ua_ (~ua@public-gprs228589.centertel.pl)
[08:43:00] *** Quits: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Quit: Leaving)
[09:03:52] *** Joins: frost (~frost@user/frost)
[09:30:38] *** Joins: lithiumpt (~lithiumpt@217.138.203.221)
[09:36:43] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[09:36:50] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[09:37:01] *** Joins: moose (~moose@user/moose)
[09:37:30] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:39:24] *** Quits: B4ckBOne (~B4ckBOne@85.10.195.46) (Ping timeout: 240 seconds)
[09:40:36] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[09:40:43] *** Joins: Wulf (~Wulf@user/wulf)
[09:41:07] *** Joins: B4ckBOne (~B4ckBOne@85.10.195.46)
[09:53:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:54:40] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:03:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[10:08:17] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[10:08:44] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (Ping timeout: 272 seconds)
[10:13:22] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-596e-b8a7-f58c-1fa5.res6.spectrum.com) (Quit: jarthur)
[10:14:46] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[10:16:54] *** Joins: Colti (Miramar-FL@user/host-pond)
[10:22:29] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:31:32] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 272 seconds)
[10:38:55] *** Joins: Malvolio (~Malvolio@user/malvolio)
[10:50:07] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:04:21] *** Joins: kish` (~aqua@user/aqua)
[11:04:35] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[11:04:57] *** Joins: kish` (~aqua@user/aqua)
[11:08:39] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[11:12:21] *** Joins: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de)
[11:16:17] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[11:20:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:22:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[11:22:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:22:49] *** Joins: ert (~ert@2001:4b99:1:1:216:3eff:fee5:446f)
[11:32:14] *** Joins: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[11:33:28] *** Joins: instantp10neer (~instantp1@user/instantp10neer)
[11:35:07] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[11:35:38] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:36:25] *** Joins: steam (~steam@user/steam)
[11:37:05] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:41:36] *** Joins: Neozul (Neozul@109.136.19.223)
[11:44:48] *** Quits: voidsync (~void@user/voidsync) ()
[11:49:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[11:49:33] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[11:50:18] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[11:50:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:55:10] <caveman> is the space requirement of a non-pruned merkle tree is O(n * log2(n)) ?
[11:57:10] <caveman> n + n/2 + n/2^2 + n/2^3 + ... + n/2^(log2 n)
[11:59:35] <caveman> or, is that O(n + constant) = O(n)?
[12:01:07] <yawkat> i think you could just compute the paths ad-hoc, so probably O(n)
[12:01:50] <caveman> 'ad-hoc' path computation?
[12:02:26] <yawkat> if you want to know the verification path of a particular leaf, you can just compute it on the fly. so your space complexity is the same as that of any other tree.
[12:03:07] <caveman> the verification path should be O(log n).  no?
[12:03:29] <yawkat> yes
[12:03:35] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[12:03:48] <caveman> i'm confused.  why did you say O(n)?
[12:04:12] <yawkat> because you asked for the space requirement of the entire tree
[12:04:54] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:04:56] <yawkat> im saying that space complexity is the same as that of any normal tree, you dont need to store additional data for it to be a merkle tree
[12:05:06] <caveman> so there is a trick to convert tree path depth to total space if we know number of leaves.  i don't know of this.
[12:05:50] <yawkat> total space of a tree is proportional to total number of leaves
[12:06:23] <yawkat> (i claim, hoping for no degenerate cases a theorist could come up with)
[12:08:26] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 272 seconds)
[12:10:04] <caveman> i think there is a constant number that this series cannot exceed `1/1 + 1/2 + ... + 1/2^log2(n)`  --  right?
[12:11:13] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:11:42] <caveman> limit n -> infty (sum_{i=1}^{log2(n)} 1/2^i)  =  1
[12:12:17] <caveman> so, n + n/2 + n/2^2 + n/2^3 + ... + n/2^(log2 n)  =  n + 1  = O(n).  makes sense.
[12:12:59] *** Joins: frost (~frost@user/frost)
[12:13:14] <yawkat> yea 1/2^n is a classic example of a convergent series
[12:15:46] <caveman> i'm thinking about accumulators now.  i wonder if it's possible to have O(log n) for the space of non-pruned version.
[12:16:26] <caveman> merkle trees are a kind of accumulators, and their non-pruned space is O(n).
[12:18:35] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:26:17] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 256 seconds)
[12:28:24] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5)
[12:38:01] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:41:50] <yawkat> CRYPTLE #13 -/6
[12:41:56] <yawkat> not a good word
[12:42:38] *** Quits: spek (~spek@189-49-228-177.user3p.veloxzone.com.br) (Ping timeout: 272 seconds)
[12:42:47] *** Joins: Malvolio (~Malvolio@user/malvolio)
[12:43:09] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[13:07:59] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:19:58] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[13:32:41] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 272 seconds)
[13:32:58] *** Quits: Neozul (Neozul@109.136.19.223) (Remote host closed the connection)
[13:48:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:55:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:03:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:06:18] *** Joins: SlimeyNarcissist (~blank@user/slimmyjimmy)
[14:12:07] *** Quits: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752) (Remote host closed the connection)
[14:12:27] *** Joins: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[14:24:39] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 250 seconds)
[14:36:31] *** Quits: SlimeyNarcissist (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[14:45:58] *** Joins: Warped (~Warped@user/warped)
[14:46:43] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[14:48:47] *** Joins: SlimeyNarcissist (~blank@user/slimmyjimmy)
[14:54:10] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[14:56:36] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 240 seconds)
[14:56:41] *** Guyver2_ is now known as Guyver2
[15:11:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:12:13] <SlimeyNarcissist> Does a person who blocks you on Signal require the application remain on their device for the block to be effective...or is it stored in the cloud somewhere forever and ever?
[15:21:24] <yawkat> looks like it's just local
[15:26:20] <KillerWasp> thanks by the help here.
[15:26:22] <KillerWasp> bye.
[15:26:26] *** Parts: KillerWasp (~KillerWas@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[15:27:14] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Read error: Connection reset by peer)
[15:27:37] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[15:30:11] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:33:22] <SlimeyNarcissist> Just local blocking on the device then?
[15:43:28] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[15:43:58] *** Joins: Amadiro (~Amadiro@31.11.55.179)
[16:19:29] <yawkat> it looks like it
[16:20:02] <yawkat> i dont see any code to sync it to the cloud, and theres lots of references to blocks in the ui code
[16:21:18] <lacernet[m]> <SlimeyNarcissist> "Does a person who blocks you..." <- blocking just ignores incoming messages and doesn't send a delivery reply. 
[16:21:25] <lacernet[m]> same as if you uninstalled the app.
[16:22:14] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:22:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[16:31:26] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:33:32] <cvmn> https://crypto.stackexchange.com/questions/98702/non-pruned-accumulators-with-asymptotic-worst-space-o-log-2-n-or-cheaper
[16:38:57] <SlimeyNarcissist> lacernet[m] It's not the same as "uninstalling the app". Because that is not equivalent to a block.
[16:40:18] <SlimeyNarcissist> Signal will default to sending SMS messages to anybody who does not have Signal already installed.
[16:40:53] <SlimeyNarcissist> It would also default to sending SMS messages to those same people who have uninstalled the app.
[16:41:05] <MacGyver> Except when it couldn't figure out that that had happened.
[16:41:08] <MacGyver> Fun times, those.
[16:41:52] <MacGyver> Mostly an issue when CyanogenMod was using signal as a semi-mandatory layer on top of SMS.
[16:42:13] <SlimeyNarcissist> That's not true either. Signal will always let you know if you're sending an SMS or a "Signal" message(i.e., an encrypted message).
[16:42:51] <MacGyver> It is true.
[16:42:58] <MacGyver> It's also probably been fixed a while ago.
[16:43:35] <MacGyver> But there was a time when Signal did have trouble figuring out that the person you were sending a message to no longer had it installed.
[16:44:12] <MacGyver> So yes, sure, it would tell you you were sending signal messages. Because that was what you were doing. But they were never actually delivered, and it didn't revert to SMS either.
[16:44:42] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[16:45:01] <MacGyver> Actually come to think of it it probably was still called TextSecure at that point so I guess *technically* you're right this was never an issue with Signal.
[16:45:12] <SlimeyNarcissist> Hmmm, you're confusing me now. Signal has to revert to sending SMS messages to somebody who doesn't have it installed. Otherwise, invites would never work.
[16:45:54] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[16:46:12] <MacGyver> Yes. The problem was with figuring out whether somebody had *un*installed the app / *de*registered from the service.
[16:46:27] <MacGyver> You can't just assume that a delivery failure means you need to revert to SMS.
[16:46:32] <MacGyver> That would be a giant security hole.
[16:46:47] <MacGyver> So there was a half-baked manual de-registration service.
[16:47:01] <MacGyver> That didn't work reliably and many people also didn't bother using.
[16:47:42] <SlimeyNarcissist> Ah, wow, complicated history. I was trying to figure out whether somebody wasn't responding to my Signal messages because they had uninstalled the app or blocked me. I assumed they would still get SMS messages from even if they had uninstalled Signal.
[16:48:11] <MacGyver> That's what *should* happen, yes.
[16:50:59] <SlimeyNarcissist> So what happens if 1) the did uninstall Signal and 2) they never blocked you. Will they still get my texts in SMS form or am I effectively blocked because Signal sucks?
[16:51:29] <yawkat> if your app doesnt tell you it's sending sms, it's not sending sms.
[16:51:47] <yawkat> the ui for this is pretty clear, there should be no confusion
[16:52:27] <SlimeyNarcissist> it tells me its a "Signal" message when I prepare to text this person. So, I am assuming they still have it installed but they're telling me, "Im not getting your messages. I uninstalled that app already". I think somebody is lying to me.
[16:53:24] <sonOfRa> I don't know if uninstalling the app actually deletes your account? The messages won't be delivered to the phone you uninstalled the app from, sure
[16:53:36] <SlimeyNarcissist> Ah
[16:53:57] <SlimeyNarcissist> But then why does it say "Signal" message in the text box of the contact?
[16:54:02] <SlimeyNarcissist> It's misleading
[16:54:12] <sonOfRa> Is it? You're sending a message to their signal account
[16:54:13] <SlimeyNarcissist> Just because "well, it used to be?"
[16:54:20] <sonOfRa> Your phone doesn't *know* that the other person deleted the app
[16:54:33] <SlimeyNarcissist> Ah, okay, I think it's starting to make sense to me.
[16:54:47] <MacGyver> sonOfRa: Probably not, come to think of it. So I guess that issue may not actually have been fixed, it just became less of an issue when CyanogenMod and WhisperSystems parted ways.
[16:55:24] <MacGyver> SlimeyNarcissist: Look, at the risk of telling you to harrass someone who wants nothing to do with you -- this should be easy to figure out, just contact them some other way.
[16:56:12] <MacGyver> Use a different SMS app, see if they do get an actual SMS.
[16:56:30] <SlimeyNarcissist> You're making assumptions. I'm trying to understand how Signal works. Please don't focus on my example so intently other than to understand signal, not my life.
[16:56:48] <SlimeyNarcissist> MacGyver Thank You, now you're making good sense. I'll do that.
[16:57:43] <SlimeyNarcissist> But Signal doesn't alert you when a contact installs Signal but it doesn't tell you when they uninstall it so, it's not symmetrical behavior.
[16:57:52] <SlimeyNarcissist> But if it's a security issue that's fine.
[16:57:54] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[16:59:26] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:59:31] <SlimeyNarcissist> Just so you know, my specific issue, the person just doesn't like texting as much as talking, that's my perception anyway.
[17:00:09] <SlimeyNarcissist> I hate talking on phones, I'll always prefer the texting. It's so easy and you can pretty much do it anytime without disturbing the person as much.
[17:00:14] <MacGyver> Yeah, it's asymmetrical because it's easy to figure out when a contact has created an account, the account is created upon app installation. But signal *can't* assume that app deletion means the account should be deleted.
[17:00:45] <MacGyver> (Multiple app installations, migration to new phone, fun stuff like that)
[17:01:58] <MacGyver> It looks like currently the mechanism is to actually delete your account *through* the signal app itself.
[17:02:01] <SlimeyNarcissist> MacGyver Makes sense, thanks again. Just to wrap this up. Though, Signal assumes that just because there is an existing Signal account in their database (and that does have to be in the cloud) it will always show me "Signal" message when I attempt to text that contact. Do I have it right?
[17:02:05] <MacGyver> But that's not the "normal" flow for app deletions.
[17:02:23] <MacGyver> Yeah, I think that's right.
[17:02:40] <SlimeyNarcissist> MacGyver Ah, but that would require an "uninstall" to get that Signal account deleted. What if the person just lost their phone and had to get a new one?
[17:03:09] <SlimeyNarcissist> The account is still active in the cloud and my Signal thinks "Yep, Signal message going out to this contact". When, really it isn't.
[17:03:11] <MacGyver> Good question, which I cannot answer with 100% confidence.
[17:03:40] <MacGyver> I *assume* that you would be able to recover at least the account-to-phone-number link by getting a new SIM with that phone number and going through the normal signal linking process.
[17:03:49] <MacGyver> Of course you will lose all history.
[17:04:01] <MacGyver> And then you could delete the account.
[17:04:43] <MacGyver> https://support.signal.org/hc/en-us/articles/360007062452-What-do-I-do-if-my-phone-is-lost-or-stolen- implies that that's correct.
[17:04:49] <MacGyver> "Until you have access to your phone number, there is nothing that can be done with Signal."
[17:05:12] <MacGyver> So get the carrier to block the SIM and issue you a new one, then recover Signal.
[17:08:03] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[17:09:45] <SlimeyNarcissist> Do you know if Signal deletes stale accounts after a year of no use?
[17:10:02] <SlimeyNarcissist> I guess that would be server side maintenance.
[17:12:38] *** Joins: brolin (~brolin@179.13.18.50)
[17:13:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[17:14:43] *** Joins: gabriel1_ (~gabriel1@37.171.149.46)
[17:16:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:16:35] <SlimeyNarcissist> Uninstalling Signal from your phone deletes your Signal account automatically? That doesn't seem very wise either because not everybody would want that in all scenarios.
[17:16:44] <SlimeyNarcissist> They should just prompt the user for what to do.
[17:16:54] <MacGyver> I don't know, tbh.
[17:16:57] <SlimeyNarcissist> "Shall we delete you Signal account also?? Hmmmmm?????
[17:17:09] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 252 seconds)
[17:17:11] <MacGyver> I've never uninstalled TextSecure / Signal :')
[17:17:18] <SlimeyNarcissist> You said, "It looks like..."
[17:17:33] <SlimeyNarcissist> Why did you think that it does?
[17:19:06] <MacGyver> Oh uh, I was browsing the Signal support documentation.
[17:19:13] <MacGyver> https://support.signal.org/hc/en-us/articles/360007061192-Delete-Account
[17:19:54] <maroon> maybe because that makes it harder for the isp to do 'yeah delete this account, and this one,...
[17:21:12] <SlimeyNarcissist> It looks like the page you just posted a link too, shows that the user has to "actively" delete his/her account. So, there is no automatic deletion with uninstallation of the app.
[17:21:28] <MacGyver> Yes.
[17:21:34] <MacGyver> That's what I said, right?
[17:22:00] <SlimeyNarcissist> It looks like currently the mechanism is to actually delete your account *through* the signal app itself.
[17:22:01] <MacGyver> The only way to delete your account is through the app itself, but that kind of thing is *not* the normal flow users are used to for app deletions.
[17:22:06] <SlimeyNarcissist> I understood this wrong I guess ^^^^
[17:22:14] <MacGyver> Yeah I could definitely have phrased that better.
[17:22:16] <SlimeyNarcissist> I thought you meant the "app" was doing the deletion
[17:22:29] <MacGyver> People don't do this because they're used to just dragging an icon to the garbage bin.
[17:22:40] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[17:22:53] <SlimeyNarcissist> Yep, so thats means potentially tons and tons of stale accounts, just growing old in a database.
[17:23:34] <TimMc> And presumably the OS does not allow apps a final "wait, wait, you need to do this first!" action.
[17:24:24] <SlimeyNarcissist> That would keep the database tidier.
[17:25:51] <maroon> and hopefully it's not a 1-click of an icon right next to a row of other buttons
[17:29:21] *** Joins: Malvolio (~Malvolio@user/malvolio)
[17:29:36] *** Joins: hg (~halosghos@user/halosghost)
[17:37:41] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:45:45] *** Joins: Everything (~Everythin@37.115.210.35)
[17:45:46] *** Joins: voidsync (~void@user/voidsync)
[17:46:51] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Ping timeout: 252 seconds)
[17:48:32] <Alipha> It would perhaps be nice for the OS to allow an app to specify a prompt or message when you try to uninstall it. And give the app 10 seconds to do something in response to the prompt before killing the app thread and uninstalling
[17:51:17] <hg> uninstalling a thing won't kill the service if it's running
[17:51:33] <hg> (at least, I've never seen a package manager do that)
[17:51:48] <hg> (and, personally, I don't want programs to have any knowledge about whether I'm uninstalling them
[17:51:57] <hg> )
[17:55:09] *** Parts: Everything (~Everythin@37.115.210.35) ()
[17:55:14] *** Joins: Everything (~Everythin@37.115.210.35)
[17:55:57] <maroon> yeah, i was trying to use taskmanager to kill chrome, and it wouldnt let me, because it was instead demanding that i answer the in-app prompt about whether i want to close it or not
[17:55:58] <Everything> Hi all. What do you use today to wiretap TLS traffic? I have a program that access a HTTPS and do some exchange. How to intercept? For MITM. Is this what 'SSL/TLS proxy' does?
[17:57:29] *** Quits: SlimeyNarcissist (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[17:59:14] <ms7821> Burp is popular, Fiddler is nice on Windows
[17:59:24] *** Joins: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0)
[17:59:50] <piou> Everything: yep, you can use a lot of programs for that, from OWASP Zap to mitmproxy to Burp... The main idea is to generate a certificate and make sure the computer your program runs on trusts that certificate or is able to ignore bad certificate, then you set up your proxy as a normal web proxy (assuming it's web). Main possible issues are certificate pining (the application only accepts a
[17:59:56] <piou> certain certificate and doesn't want to trust anything else) and if on mobile the platform may demand some work to get a working trusted certificate.
[18:01:27] <ms7821> oh yeag, mitmproxy's web interface is lovely
[18:03:12] <Everything> piou: thanks
[18:03:14] <Everything> ms7821: thanks
[18:07:48] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Ping timeout: 240 seconds)
[18:08:41] *** Joins: cwebber (~user@user/cwebber)
[18:19:09] *** Quits: gabriel1_ (~gabriel1@37.171.149.46) (Remote host closed the connection)
[18:19:36] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[18:19:46] *** Joins: SlimeyNarcissist (~blank@user/slimmyjimmy)
[18:20:48] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-4424-fc06-167e-bc32.res6.spectrum.com)
[18:21:12] <SlimeyNarcissist> All messages sent between 2 parties (or more) using Signal are stored on a master server in encrypted format, is that right?
[18:22:06] *** Joins: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0)
[18:24:33] <SlimeyNarcissist> So, if any party uninstalls the app then their private keys go bye-bye also I guess and they will never get those messages. Unless those private keys are stored in the cloud with their phone number and password.
[18:26:37] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[18:27:07] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[18:28:51] *** Joins: ivii (~ivan@user/ivii)
[18:29:02] *** Joins: asdfsfdasdfw (~asdfsfdas@12.182.213.210)
[18:34:19] *** Quits: asdfsfdasdfw (~asdfsfdas@12.182.213.210) (Quit: Going offline, see ya! (www.adiirc.com))
[18:35:05] *** Joins: asdfsfdasdfw (~asdfsfdas@12.182.213.210)
[18:36:11] <ms7821> you mean messages that haven't been delivered?
[18:37:27] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[18:39:44] <SlimeyNarcissist> Well, not just that, there is no bypass is there?
[18:40:18] <SlimeyNarcissist> That's only a benefit of the having a master server.
[18:40:48] <SlimeyNarcissist> Every message would go straight to the master server and then be delivered immediately (or later) depending on whether it can be or not.
[18:40:54] <ms7821> it sounds like you're coming at this from the assumption that signal is like a non-e2e chat system
[18:41:09] <SlimeyNarcissist> i don't know how it works, so I'm asking.
[18:41:32] <SlimeyNarcissist> Are the undeliverable encrypted messages just stored on the users phone until they can go out?
[18:41:37] <ms7821> no
[18:42:03] * SlimeyNarcissist bitch slaps himself in the face for being lost
[18:42:05] <ms7821> they're the only thing stored on signal's servers
[18:42:09] <ms7821> wow, chill you
[18:42:11] <ms7821> out*
[18:42:13] <SlimeyNarcissist> :)
[18:42:24] <ms7821> I'm trying to get to understand what your assumptions are and what you've already read
[18:42:46] <SlimeyNarcissist> Okay, so Signal stores all messages on a master server, that was my assumption.
[18:42:59] <SlimeyNarcissist> It makes the most sense.
[18:42:59] <ms7821> nope, once delivered messages are removed from signal's servers
[18:43:10] <SlimeyNarcissist> Oh, right, that makes sense to.
[18:43:18] <SlimeyNarcissist> I was talking about "until delivered"
[18:43:21] <ms7821> they're then only stored on the end device
[18:43:32] <SlimeyNarcissist> Okay, thank you, it all makes good sense.
[18:43:38] <SlimeyNarcissist> Good, good sense.
[18:43:38] <ms7821> unless that device uploads its backup to the cloud
[18:43:57] <SlimeyNarcissist> Who caught the musical reference there, anyone?
[18:44:11] <ms7821> those backups are protected by the backup passphrase
[18:44:34] <SlimeyNarcissist> And that's a nice option to have I guess.
[18:44:37] <ms7821> musicals?
[18:45:19] <ms7821> anyway, if you lose the backup passphrase, then yes, you lose all your messages. However, the other recipients/sender will have a copy unless they also lose/delete them
[18:46:09] <ms7821> there's no central revocation of messages like in a non-e2e system. Deletion messages are just a request for clients to remove the message
[18:46:22] <SlimeyNarcissist> Sounds good, but I guess one of my points I'm making clear to myself is that with no operational master "Signal" servers there is no service for anybody period.
[18:46:38] <SlimeyNarcissist> Nothing it direct client to client.
[18:46:42] <SlimeyNarcissist> it=is
[18:47:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:47:39] <ms7821> I don't know about voice calls, they might be peer-to-peer
[18:47:58] <ms7821> but all the signalling would be through signal's servers anywya
[18:48:32] <ms7821> so yeah, if signal's infra goes away you're in trouble
[18:48:44] <ms7821> but all your messages will still be on your device
[18:57:05] *** Quits: asdfsfdasdfw (~asdfsfdas@12.182.213.210) (Quit: Going offline, see ya! (www.adiirc.com))
[18:58:38] *** Joins: asdfsfdasdfw (~asdfsfdas@12.182.213.210)
[19:20:32] *** Quits: beard (sid110468@user/beard) (Ping timeout: 240 seconds)
[19:21:47] *** Joins: beard (sid110468@user/beard)
[19:28:42] *** Joins: Guest2186 (~Mickey@bzq-79-178-139-204.red.bezeqint.net)
[19:30:37] <Guest2186> Hello! A question on a local forum emerged regarding whether or not chaining multiple RSA encryptions with different keys made it more secure against bruteforce. Chaos ensued. Do any of you good people have any answer? Thanks in advance.
[19:32:10] <Guest2186> Some people suggested that doing so is equivalent to a single encryption with a key different to any of those used, but it is unclear whether or not this is true.
[19:32:44] <Peng> I'm not sue, but you shouldn't use cryptography so weak that whether it takes twice as long, or something, is the difference between being broken or not. Computers get twice as fast all the time.
[19:32:45] <dude12312414> if the modulus remains the same throughout, then that's true
[19:32:48] <Peng> sure*
[19:33:59] <dude12312414> (m^e (mod n))^e' (mod n) = m^(e*e') (mod n)
[19:34:04] <ms7821> what Peng said, although for academic interest, there is a non-zero probability that any key has been generated badly (or some new method is discovered that makes a new class of keys weak). In that case, using multiple keys might protect you
[19:34:10] <Guest2186> Peng: It is clear that simply using a bigger key would be better in that regard. It is a theoretical question.
[19:34:12] <ms7821> but don't rely on that
[19:34:13] <dude12312414> (but yeah in general i wouldn't trust such a method anyway)
[19:35:45] <ms7821> I don't understand your second point about being equivalent to a different key
[19:36:04] <ms7821> unless you're suggesting these are keys that are already being reused somehow. That's bad practice in itself
[19:37:00] <Guest2186> ms7821: According to dude12312414's message, encrypting m with e, and then the result of that with e', is equivalent to encrypting with e*e'. That is to say, it is equivalent to using a single encryption with a slightly larger key 
[19:37:19] <dude12312414> i wouldn't say that the key is slightly large
[19:37:23] <dude12312414> *larger
[19:37:32] <Guest2186> Well, relative to a much bigger key I suppose 
[19:37:44] <dude12312414> e and e' are also calculated (mod \phi(n) or perhaps \lambda(n))
[19:37:54] <dude12312414> well
[19:37:55] <ms7821> hmm, it all depends on how tractable breaking an individual key is
[19:38:26] <Guest2186> dude12312414: According to some stuff I read online, some forms of RSA ("non textbook") also include padding..? Would that affect the calculation
[19:38:43] <dude12312414> yeah padding changes things too
[19:39:11] <ms7821> for example, lots of crypto attacks involve attacking a key one byte/bit at a time. Lots of smaller keys are unlikely to be equivalent to n*log(n_keys)
[19:39:43] *** Joins: navigator (~igloo@047-229-046-254.res.spectrum.com)
[19:40:26] <ms7821> ignore the last part of that, it's a bad attempt at shorthand
[19:40:32] <ms7821> "Lots of smaller keys are unlikely to be equivalent to a larger key"
[19:41:23] <Guest2186> ms7821: I don't follow... Equivalent how? And if not, are they greater or lesser than?
[19:42:03] <ms7821> if your smaller keys are within the realm of crackability, cracking multiple of them is probably also feasible
[19:42:17] <ms7821> and the work involved in working with multiple keys scales with the number of keys
[19:43:47] <ms7821> I'd expect increasing the key size to be more efficient at protecting against attacks
[19:44:09] <ms7821> (though it may not be much of a win against quantum algorithms)
[19:44:24] *** Quits: navigator (~igloo@047-229-046-254.res.spectrum.com) (Remote host closed the connection)
[19:45:03] <Guest2186> dude12312414: Does your calculation imply that the encryption process presented would just take longer to encrypt, but not proportionally more difficult to decrypt? 
[19:48:18] <ms7821> work on longer keys scales in proportion to the number of bits, while attacking work should scale exponentially
[19:49:22] <Guest2186> ms7821: I mean with encrypting twice with two different keys. It is clearly less performant than using a larger key, but how does it scale precisely? 
[19:49:25] <dude12312414> well, typically e is some small exponent like 3 or 65537. You could in theory use different values of e, but then you need to be careful about certain attacks
[19:50:10] <ms7821> Guest2186, depends on your software, but the whole point of the trapdoor of RSA is that longer keys are increasingly harder to attack
[19:50:41] <Guest2186> I see 
[19:50:50] <dude12312414> if you limit yourself to e = 65537, then e*e' = 4295098369, and calculating m^4295098369 (mod n) is not much slower
[19:50:51] <ms7821> https://webmasters.stackexchange.com/a/102372/81283 suggests signing/verifying is approximately linear in the number of bits
[19:51:02] <dude12312414> what really controls the speed there is the bitsize of n
[19:51:35] <dude12312414> but if you change n, then what I wrote isn't true anymore
[19:51:40] <ms7821> whereas if you're using multiple keys, the work is linear in the number of keys
[19:52:03] <ms7821> but the difference is attacking multiple keys _might_ also scale linear in the number of keys
[19:52:08] <ms7821> (depending on the attack)
[19:52:22] *** Joins: navigator (~Navigator@2605:6440:3008:a001::aee8)
[19:54:13] <Guest2186> dude12312414: And what about the aforementioned padding? Would it make it meaningfully more viable?
[19:54:16] <dude12312414> (actually i'm not right, using e = 4295098369 is indeed slower by a factor of 16 if you use exponentiation by squaring)
[19:55:11] <dude12312414> i wouldn't consider any of these choices as "viable", and I'm not a cryptographer anyway
[19:55:50] <ms7821> there's an analogy here with 3DES
[19:55:52] <Guest2186> I don't mean as in usefully viable... Is it theoretically more secure? 
[19:56:05] <dude12312414> I just wanted to answer that question: "Some people suggested that doing so is equivalent to a single encryption with a key different to any of those used, but it is unclear whether or not this is true."
[19:56:33] <Guest2186> Thanks a lot for that answer BTW! It has been very illuminating 
[19:56:54] <dude12312414> and my answer is that it is true if you apply textbook RSA with a constant modulus, but if you change the modulus, or include padding, or other things, then it may not be true)
[19:57:34] <ms7821> I assume the thinking was a conceptual slider that allows for e.g. fractional bits
[19:57:55] <ms7821> they were probably not actually thinking of implementing RSA-2050
[19:59:15] <Guest2186> ms7821: 3DES seems very much related, and I stumbled upon that while looking for an answer prior. However it is unclear if they are comparable...
[19:59:23] *** Joins: lazzurs5 (~lazzurs@user/lazzurs)
[20:00:17] <Guest2186> It is addressed here: https://web.archive.org/web/20120717025221/http://www.rsa.com/rsalabs/node.asp?id=2230
[20:00:40] <ms7821> they're different, but the way that 3DES "extends" the key rather than just performing wrapped encryptions is what I was thinking of
[20:01:33] <ms7821> because yeah
[20:01:45] <ms7821> -because
[20:02:07] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Ping timeout: 256 seconds)
[20:02:07] *** lazzurs5 is now known as lazzurs
[20:04:01] *** Quits: navigator (~Navigator@2605:6440:3008:a001::aee8) (Remote host closed the connection)
[20:04:07] *** Joins: navigator_ (~Navigator@047-229-046-254.res.spectrum.com)
[20:04:19] <Guest2186> Interesting..
[20:07:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[20:09:55] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[20:20:27] *** Quits: navigator_ (~Navigator@047-229-046-254.res.spectrum.com) (Quit: Leaving)
[20:25:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:28:30] *** Joins: navigator (~Navigator@2605:6440:3008:d001::581a)
[20:43:35] *** Joins: hg (~halosghos@user/halosghost)
[20:46:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[20:53:31] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:58:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:01:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:03:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:04:11] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Read error: Connection reset by peer)
[21:04:15] *** Joins: linearcannon (~linear_ca@50.35.78.163)
[21:06:26] *** Quits: navigator (~Navigator@2605:6440:3008:d001::581a) (Quit: Leaving)
[21:08:49] *** Joins: sobkas (~sobkas@95.175.17.217)
[21:16:01] *** Joins: jdmark2 (~jdmark@user/jdmark)
[21:20:04] *** Quits: jdmark (~jdmark@user/jdmark) (Ping timeout: 272 seconds)
[21:25:28] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[21:26:57] <Alipha> Guest2186: it is possible that the primes you generated for one key aren't actually prime (but yet still pass the primality tests), and so, encrypting with multiple keys could protect you from that unlikely occurance
[21:27:40] *** Quits: jdmark2 (~jdmark@user/jdmark) (Ping timeout: 272 seconds)
[21:28:26] <Alipha> (though i'm unclear as to whether or not using "not actually prime" numbers causes encryption/decryption to simply not even work. ie, you're unable to decrypt what you encrypt. if that's the case, then what i just stated is moot)
[21:29:07] <TimMc> Primality tests would be pretty simple then, no?
[21:29:28] <maroon> yeah that would be my first thought - if that were true, this would be a great primality test
[21:29:34] <TimMc> Do the fast ones first and then take your factors out for a spin.
[21:29:58] <maroon> faster than a bazillion rounds of miller rabin
[21:30:30] <Alipha> and by `"not actually prime" numbers`, i'm referring specifically to Carmichael numbers.
[21:30:39] <maroon> i know it won't work if gcd(prime1,prime2) > 1
[21:31:03] <TimMc> so they just need to be coprime, yeah?
[21:31:11] <maroon> correct
[21:32:13] <Alipha> but Œª(n) won't be correct and the selection of d and e depend upon Œª(n)? (carmichael's totient function)
[21:32:16] <maroon> at the least, i know it wont work when i tested to see what happened if i made prime2=prim1
[21:33:25] <maroon> is that symbol named gamma or something else?
[21:33:48] <Alipha> i just copied from here https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation :-)
[21:35:01] <maroon> i dont like how openssl gets to cavalier about rsa keys - meh, the chances of the chosen prime being a bad one is so low, not worth the bother to test for it
[21:35:34] <Alipha> 5. Determine d as d ‚â° e‚àí1 (mod Œª(n))  but Œª(n) would be calculated incorrectly
[21:36:31] <hg> I wonder if I'm ever going to be familiar enough with cryptography that I'll finally be able to stop my brain from immediately switching to lambda-calculus mode whenever I see Œª show up in any vaguely mathy scenario
[21:36:45] <hg> (or, perhaps more practically, Greek)
[21:36:56] <maroon> ah, so that's named lamda not gamma, eh?
[21:37:20] <hg> Œª ‚Üê lambda
[21:37:44] <hg> Œ≥ ‚Üê gamma (Œì ‚Üê upper-case gamma)
[21:38:03] <maroon> i guess i was being greek-dyslexic
[21:38:16] <int-e> shouldn't that be a phi rather than a lambda :-/
[21:38:40] <int-e> Oh.
[21:38:53] <Alipha> Œª(p) = œÜ(p) = p ‚àí 1
[21:38:54] <int-e> Never mind. (but phi works as well, of course)
[21:39:10] <Alipha> but that's only true if p is prime
[21:39:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[21:39:46] <int-e> I mean, d = e^‚àí1 (mod phi(n)) works as well, because lambda(n) |
[21:39:48] *** Quits: jtgd (~jtgd@user/jtgd) (Ping timeout: 240 seconds)
[21:39:53] <int-e> lambda(n) | phi(n)
[21:40:10] <maroon> Alipha, or p can be a strong pseudoprime?
[21:40:32] *** Quits: semisimple (~semisimpl@user/semisimple) (Quit: WeeChat 3.4)
[21:40:50] <maroon> i'm just being all-ears for a faster primality test
[21:41:29] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.4)
[21:41:32] <maroon> or something that's a fast way of discarding most composites that escape the trial divisions
[21:42:29] <int-e> Rabin-Miller is good at that.
[21:43:17] <maroon> a miller-rabin test is roughly same as a fermat test, and those can be slow when testing really big numbers
[21:43:39] <Alipha> maroon: so the proof of correctness on the Wikipedia page relies on Œª(p) = œÜ(p) = p ‚àí 1 being true, which wouldn't be true for pseudoprimes. But just because the proof doesn't work for pseudoprimes, doesn't mean that the algorithm won't still work anyway
[21:44:18] <Alipha> Which brings me back to my original question: does RSA still work with pseudoprimes?
[21:44:57] <Alipha> could go grab some carmichael numbers and try doing RSA with them.. but that involves work, heh
[21:45:02] *** Joins: KillerWasp (~KillerWas@user/killerwasp)
[21:45:05] <KillerWasp> hello
[21:45:08] *** Parts: KillerWasp (~KillerWas@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[21:45:12] *** Joins: KillerWasp (~KillerWas@user/killerwasp)
[21:45:30] <maroon> well there are several classifications for pseudoprimes, so the question might need separate answers for different ilk?
[21:46:09] <Alipha> maroon: apparently rsa still works with carmichael numbers: https://crypto.stackexchange.com/questions/89431/rsa-with-carmichael-number
[21:46:12] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[21:46:23] <maroon> thanks for reminding me to get back to work on my ban script that's triggered by part messages :))
[21:46:37] <sarnold> hah
[21:46:40] <hg> lol
[21:46:44] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[21:46:44] *** Joins: menace (~someone@user/menace)
[21:46:52] *** menace is now known as Deknos
[21:46:59] <int-e> Alipha: Yes, Carmichael numbers work. Weaker Fermat pseudoprimes are bound to fail eventually, since every round of RSA encryption and decryption amounts to more or less a Fermat primality test.
[21:47:24] *** Joins: aleck (~aleck@user/aleck)
[21:47:35] <KillerWasp> There are things that are not clear to me and I can't find any website that explains it to me. If a certificate authority (ca.crt file) is signed by another certifying authority (or by the same certifying authority), how are these files exposed? How is it possible to track each of these chain certificates? How to visualize and understand the information of a certificate?
[21:48:03] <int-e> (It's weaker than a Fermat test but not so much weaker that I'd expect it to make a tremendous difference. I could be wrong.)
[21:49:12] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 272 seconds)
[21:50:03] <MacGyver> KillerWasp: You get them from your system's store or download them from the CA's website. You bundle them, usually. And openssl -x509 -text.
[21:50:10] <maroon> fermat test is similar to creating an inverse like base^p-2 mod p, except rsa is specifically making p be not-prime
[21:50:29] <ms7821> KillerWasp: openssl x509 -noout -text -in some-cert.crt will give you a bunch of information, but so will your browser if you click on the padlock
[21:50:45] <MacGyver> -nout?
[21:50:49] <MacGyver> noout*
[21:50:54] <ms7821> it means it doesn't repeat the input
[21:51:11] <MacGyver> Oh right.
[21:52:12] <ms7821> also, to be clear, you only need to bundle intermediates (or cross-signed roots) because the roots are by definition already in the trust stores. And non-mobile browsers will download intermediates automatically these days
[21:52:36] <ms7821> crt.sh might also be a good way to explore the hierarchy
[21:52:46] <KillerWasp> I have opened the file that the browser uses as authority certifiers, it even has exposed information about each of the certificates, but I still do not understand it, and it seems that most of the certificates do not expose the web to which they belong.
[21:53:00] <maroon> when generating a prime in openssl, is there a way to redirect the dots and plus'es to a file? i've seen people tweeting about how many dots it took for generating an absurdly huge safe prime
[21:53:58] <KillerWasp> ms7821: crt.sh ?
[21:54:07] <ms7821> KillerWasp: e.g. in the Certificate row, the output is the same as openssl x509 https://crt.sh/?id=5411691132 
[21:54:15] <ms7821> but you can also click on the Issuer to see that cert
[21:54:46] <ms7821> or rather, to see that CA, and its certs
[21:55:12] <ms7821> (it doesn't link directly to the issuing certificate)
[21:55:27] *** Quits: SlimeyNarcissist (~blank@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[21:55:28] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:55:35] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[21:56:11] <KillerWasp> ms7821: like all the certs in the chain are exposed publicly like a file in the web?
[21:56:26] <ms7821> yep, that's certificate transparency
[21:56:27] <KillerWasp> one file in the web by each cert
[21:56:27] <ms7821> it's really good
[21:56:41] <MacGyver> Yes -- also, the service you connect to sends you the certificates in the chain as a bundle.
[21:57:01] <MacGyver> (Or assumes you're able to download them yourself, but not everything is so things can break then)
[21:57:20] <ms7821> yeah, this isn't a direct part of the certificate validation, but a public proof that everything's as expected
[21:57:28] <KillerWasp> and i guess that all private files (.key) are hidden, and they are not needed in the check on all the chain?
[21:58:20] <ms7821> correct
[21:58:57] <KillerWasp> i see
[21:59:02] <hg> unless you publish them
[21:59:06] <hg> (I wouldn't recommend that)
[21:59:58] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[22:00:22] <KillerWasp> very thanks ms7821 and MacGyver , seem i don't have more doubts (by now)
[22:00:45] <ms7821> certificate transparency exists because there used to be nothing the China Post or the US DOD issuing certificates for each others domains
[22:00:57] <ms7821> it used to be a matter of pure trust, which it turns out is a bad idea sometimes
[22:01:30] <ms7821> (as noted before, if you control a computer's trust store, you can insert your own CA, and certificate transparency is ignored in that case)
[22:02:27] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[22:05:02] <KillerWasp> Also, if there is a chain and users must obtain certificates signed by the last certificate in the chain, it is possible to do so with the first certificate in the chain, although for this the chain owner needs to allow the certificate signing request to be executed. .
[22:08:40] <KillerWasp> well, now understand how to work. Only the certifying authority decides which CSR to accept and with which CA file.
[22:09:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:15:16] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-3498-71fb-df6e-0b01.res6.spectrum.com)
[22:17:19] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[22:24:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[22:27:35] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[22:28:06] *** Joins: eck (~root@user/eck)
[22:30:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[22:35:05] *** Joins: rose (~rose@2a03:ef42:4:14f8:db97:f67d:a08e:7db2)
[22:35:27] *** Parts: rose (~rose@2a03:ef42:4:14f8:db97:f67d:a08e:7db2) ()
[22:37:27] *** Parts: chronon (~chronon@user/chronon) ()
[22:49:37] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:51:00] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[22:52:23] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:55:01] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:56:11] <Guest2186> Alipha: That is an interesting caveat, and one at the very least worth gazing over the horizon pondering about. I might as well do that afore sunrise tomorrow.
[22:57:16] <Alipha> Guest2186: yeah, so, on the rare case that you generate a carmichael number instead of a prime, an attacker would have an easier time factoring the carmichael number
[22:59:28] <Guest2186> Alipha: How much easier are we talking about here? Would it be doable actually? Has this happened before? 
[23:00:02] *** Joins: zxrqmz88 (~private@2603-7000-1302-b6f3-c512-c11f-d285-8ab2.res6.spectrum.com)
[23:01:33] <Guest2186> I assume that since the algorithm doesn't actually reveal the key that only by attempting to brute force it will you find that it's a carmichael number. I guess that the likelihood of success is dependent on the likelihood of generating one such, and the likelihood of success factoring it.
[23:01:55] <Alipha> Guest2186: i'm guessing with the rarity of carmichael numbers as you start working with numbers in the range of 2^1024 or higher, that no one has ever accidentally produced a carmichael number. but if they had, it could potentially halve the bit strength (which makes it "exponentially" easier)
[23:03:43] <Guest2186> So, still technically improbable to compute... 
[23:04:20] *** Joins: igemnace (~ian@user/igemnace)
[23:05:53] <Guest2186> As it seems, anything above 2 encryptions on the data seem to carry no advantages whatsoever over simply having a longer key.
[23:06:00] *** Quits: zxrqmz88 (~private@2603-7000-1302-b6f3-c512-c11f-d285-8ab2.res6.spectrum.com) (Quit: Quit)
[23:06:04] <maroon> the primality tests are generally for an environment where an adversary can suggest numbers as if primes, or can affect your RNG. i've generated tens of thousands of safe primes, where my primality test was 1 fermat test against each of p and q. when i followed up by testing with miller-rabin of 64 rounds or greater, i've yet to have any of these probable primes turn out to be composites
[23:06:06] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[23:06:06] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[23:06:06] *** Joins: menace (~someone@user/menace)
[23:06:47] *** Joins: kashire (~kashire@c-76-31-172-90.hsd1.tx.comcast.net)
[23:06:47] *** Quits: kashire (~kashire@c-76-31-172-90.hsd1.tx.comcast.net) (Changing host)
[23:06:47] *** Joins: kashire (~kashire@user/kashire)
[23:07:34] *** Parts: asdfsfdasdfw (~asdfsfdas@12.182.213.210) (Closing Window)
[23:07:36] *** Parts: kashire (~kashire@user/kashire) ()
[23:08:07] <Guest2186> maroon: I'm just gonna consider myself extra lucky if I do generate one...
[23:10:09] <maroon> hold my beer
[23:10:27] <Alipha> Guest2186: well, if you're doing 1024-bit RSA and you produce a carmichael number, an attacker will potentially be able to factor that, if the factors happen to be "of similar size", since now you're down to 512-bit RSA, effectively. but yeah, if you're using 2048-bit RSA, then a carmichael number would be potentially half that, which is still safe
[23:11:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:11:35] <Guest2186> Well I usually do 4096-bits, just because I like knowing my computer isn't lazy, so as far as I can tell this is not a real risk 
[23:11:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:12:00] *** Quits: menace (~someone@user/menace) (Quit: menace)
[23:12:17] <Guest2186> At any rates, thanks a lot for your input, good people of the undernet. Goodnight~ 
[23:13:41] <maroon> Guest2186 -> https://eprint.iacr.org/2018/749.pdf
[23:14:16] <maroon> those are example of creating trapdoor primes - which depends on which primality test is being defeated
[23:14:32] *** Lord_of_Life_ is now known as Lord_of_Life
[23:15:38] <Guest2186> maroon: This is very very cool lol 
[23:17:07] <Guest2186> Goodnighty
[23:17:49] <maroon> come back with a real nick :)
[23:18:41] <Alipha> maroon: he's being anonymous and secure ;-)
[23:20:33] <Alipha> oh. carmichael numbers have multiple factors
[23:20:50] <maroon> as i remember, they generally have 3+ prime factors
[23:21:53] <Alipha> and it looks like they generally contain low primes, so they'd be discovered by trial division. maybe that's why primality testing includes trial division in addition to fermat's and such
[23:23:06] <maroon> im not so sure they use low primes, just that people search the smaller numbers more thoroughly?
[23:23:13] <Alipha> that could be
[23:23:57] <Alipha> so then if you happened to generate a carmichael number that also didn't have any small factors that would be tested for, then 4096-bit RSA could potentially be easily cracked if one of the primes was a carmichael number with many factors
[23:25:31] <Alipha> though the impression i'm getting is that the odds of that happening is probably above 1/2^128, so we're safe ;-)
[23:25:41] <Alipha> s/above/below/
[23:27:32] <maroon> supposedly its really hard to find carmichaels with 4 factors, and im not aware of any with 5
[23:36:55] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:39:40] *** Joins: SlimeyNarcissist (~blank@user/slimmyjimmy)
[23:52:00] <KillerWasp> i'm try add TLS to blackrook.xyz , but don't work, what happened?
[23:52:20] <KillerWasp> i also use 'openssl s_client -connect blackrook.xyz' but don't understand the error 111 output.
[23:52:51] <KillerWasp> i already check that port are open and is https.
[23:53:46] <KillerWasp> also i already add the CA in the system.
[23:55:02] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:55:11] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[23:56:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[23:56:23] <sarnold> ECONNREFUSED 111 Connection refused
[23:56:52] <sarnold> try -connect blackrook.xyz:443 or blackrook.xyz:8080 or whever port you're trying to contact
[23:56:54] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:58:31] <KillerWasp> mmm, by other ways say SSL: WRONG_VERSION_NUMBER
[23:58:42] *** Quits: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:58:45] <KillerWasp> in firefox say SSL_ERROR_RX_RECORD_TOO_LONG
[23:59:08] <KillerWasp> i guess that don't have the version number.
[23:59:33] <Peng> The Firefox error code means the server is HTTP
[23:59:35] <Peng> not HTTPS
