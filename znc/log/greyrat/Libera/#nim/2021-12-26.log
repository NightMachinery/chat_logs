[00:00:31] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jv2
[00:07:41] *** Parts: brocc (6e4dfe96fc@user/brocc) ()
[00:25:55] <FromDiscord> <retkid> what exactly is nim 2.0
[00:26:32] <FromDiscord> <retkid> how big of a chaange is it
[00:26:38] <FromDiscord> <retkid> is it just stdlib stuf?
[00:34:43] <FromDiscord> <Goel> @retkid https://github.com/nim-lang/RFCs/issues/437
[00:44:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:55:12] <FromDiscord> <retkid> we're switching to orc?
[00:55:59] <FromDiscord> <retkid> thats good but ive noticed orc isn't as memory efficient currently, hopefully thats resolved because, that one is a big time saver with threading
[00:57:56] <FromDiscord> <retkid> gonna miss Spawn
[00:58:52] <FromDiscord> <retkid> i dont like the extra type safeties planning to be added.  Reminds me of java.
[00:59:57] <FromDiscord> <retkid> package level objects are very cool
[01:00:09] <FromDiscord> <el__maco> why is 0x7f000000 a good uint32 constant literal, but 0x80000000 is not
[01:00:30] <FromDiscord> <el__maco> how do I express the latter without a cast, or do I have to cast
[01:02:02] <FromDiscord> <retkid> In reply to @el__maco "why is 0x7f000000 a": 0x8..... is 1 over the maximum value a 32 bit int can handle
[01:02:36] <FromDiscord> <retkid> (edit) "0x8....." => "0x8.  10^7"
[01:02:42] <FromDiscord> <el__maco> its not over the maximum value an 32 bit unsigned integer can have
[01:03:01] <FromDiscord> <el__maco> (edit) "an" => "a"
[01:03:18] <FromDiscord> <retkid> well is it specified as a uint
[01:03:49] <FromDiscord> <retkid> why not just make it a float64
[01:03:54] <FromDiscord> <retkid> (edit) "float64" => "float64, no fuss"
[01:03:57] <FromDiscord> <el__maco> how do you specify unsigned constant literal
[01:04:49] <FromDiscord> <retkid> presumubly
[01:04:54] <FromDiscord> <retkid> uint32(x)
[01:05:00] <FromDiscord> <retkid> (edit) "presumubly" => "presumably"
[01:05:01] <FromDiscord> <retkid> but
[01:05:05] <FromDiscord> <el__maco> yea so you cast
[01:05:07] <FromDiscord> <retkid> i need to look fur unsigned
[01:05:13] <FromDiscord> <retkid> yes you can lol
[01:05:19] <FromDiscord> <retkid> might be wrong
[01:05:33] <FromDiscord> <retkid> that stuff isn't worth the fuss
[01:05:57] <FromDiscord> <el__maco> a C compiler would accept the hex literal, or you could postfix with `u` to make it unsigned
[01:06:31] <FromDiscord> <retkid> uint is already unsigned
[01:06:36] <FromDiscord> <retkid> pretty sure
[01:06:56] <FromDiscord> <retkid> maybe a smarty pants like @Rika can give more details
[01:07:08] <FromDiscord> <retkid> i am unreliable.
[01:07:45] <FromDiscord> <el__maco> yes it is. C does not have type inference, so the literals have self contained types and thus they need a way to specify the type in detail. In my nim case I'm giving an argument to a proc that takes an uint32
[01:07:50] <FromDiscord> <el__maco> (edit) "an" => "a"
[01:08:47] <FromDiscord> <retkid> well
[01:08:52] <FromDiscord> <retkid> C does not have types really
[01:09:01] <FromDiscord> <retkid> c is the wildwest
[01:09:01] <FromDiscord> <el__maco> I could take uint64 too in this particular case. But I want to learn what I can do so that's why I'm asking 🙂
[01:09:15] <FromDiscord> <el__maco> of course C has types
[01:09:35] <FromDiscord> <retkid> not cool ones like C++
[01:10:07] <FromDiscord> <el__maco> I wonder what constitutes a cool type 🤔
[01:13:32] <FromDiscord> <el__maco> wait now I'm actually confused. The proc takes `uint` now and even that doesn't accept 0x80000000
[01:14:37] <FromDiscord> <el__maco> https://play.nim-lang.org/#ix=3Jvf
[01:16:24] <FromDiscord> <el__maco> `0x80000000'u64` works but that's ugly, why do I have to do that
[01:16:30] <FromDiscord> <el__maco> (edit) "`0x80000000'u64`" => "`0x80000000'u64`"
[01:25:27] <FromDiscord> <Elegantbeef> Think it's just an issue with literals
[01:25:39] <FromDiscord> <Elegantbeef> They dont always properly reason the type
[01:26:08] <FromDiscord> <el__maco> I need to pass an rgba color to a function, almost always it will be a literal
[01:26:14] <FromDiscord> <Elegantbeef> 32bit + literals i think cause this issue
[01:26:27] <FromDiscord> <el__maco> I wonder how one should go about this in Nim
[01:26:34] <FromDiscord> <Elegantbeef> You could do `array[4, byte]`
[01:26:41] <FromDiscord> <Elegantbeef> It's easier to read anyway
[01:27:16] <FromDiscord> <el__maco> also this behavior seems really odd, give the default 64 bit integer size. Why is the integer literal semantics somehow 32 bit
[01:27:20] <FromDiscord> <Elegantbeef> Why are you using uint64 anyway, more than 1 byte per channel?
[01:27:40] <FromDiscord> <el__maco> I'm not. I switched because I thought that was the problem
[01:27:59] <FromDiscord> <el__maco> originally I had `proc SetPen(color:uint32)`
[01:28:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jvl
[01:28:19] <FromDiscord> <Elegantbeef> Oh damn i only have 7 nibbles
[01:28:21] <FromDiscord> <Elegantbeef> I cant count
[01:29:34] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Jvn
[01:29:41] <FromDiscord> <Elegantbeef> `1u8`
[01:29:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jvo
[01:30:02] <FromDiscord> <Elegantbeef> Or you can do the above if you must have the intlit work
[01:31:24] <FromDiscord> <Elegantbeef> I think there are issues made for the way int lits work
[01:31:54] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Jvq
[01:31:57] <FromDiscord> <el__maco> but u:int64 does work
[01:32:47] <FromDiscord> <el__maco> I guess I can change the prototype to expect an int64, but yea, its kinda confusing
[01:34:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jvr
[01:35:32] <FromDiscord> <Elegantbeef> Personally I imagine the above is more sensible anyway since Color isnt just an uint32, but ymmv
[01:36:15] <FromDiscord> <Elegantbeef> But i also use `distinct void` for actual things so i'm a weirdo
[01:37:15] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Jvs
[01:37:31] <FromDiscord> <Elegantbeef> No point using a union
[01:37:42] <FromDiscord> <Elegantbeef> You can get the same behaviour from a literal
[01:39:31] <FromDiscord> <el__maco> like if you have texture:array[256256,rgba8] you can read and write all channels at once, or one channel at a time. Not sure you can do that without the union
[01:39:50] <FromDiscord> <el__maco> in fact it would be cool if you could have anonymous unions
[01:40:58] <FromDiscord> <Elegantbeef> For instance
[01:41:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jvv
[01:41:30] <FromDiscord> <Elegantbeef> https://github.com/alaviss/union ?
[01:41:49] <FromDiscord> <Elegantbeef> Or do you want anonymous untagged unions?
[01:43:36] <FromDiscord> <el__maco> I don't know what an untagged union is, but basically getting rid of the field `u` in my previous snipped would have been nice
[01:44:01] <FromDiscord> <Elegantbeef> an untagged union is like what you were doing
[01:44:11] <FromDiscord> <Elegantbeef> Where there is not a discriminator
[01:44:29] <FromDiscord> <Elegantbeef> A tagged union holds an discriminator so you can access the correct union without issues
[01:44:37] <FromDiscord> <Elegantbeef> It's an issue when they're different sized
[01:44:41] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Jvw
[01:45:19] <FromDiscord> <el__maco> now I must remember what was the name of the tuple and say `color.u.r`
[01:45:27] <FromDiscord> <Elegantbeef> Ah
[01:45:31] <FromDiscord> <Elegantbeef> Or you can just do what i showed you
[01:45:38] <FromDiscord> <Elegantbeef> And dont have to remember the name of the tuple
[01:46:03] <FromDiscord> <el__maco> no offense but that looks kinda complicated for what it is 🤔
[01:46:37] <FromDiscord> <Elegantbeef> I mean you can do bitwise ops if you prefer
[01:46:41] <FromDiscord> <Elegantbeef> It's the same thing
[01:50:17] <FromDiscord> <Ricky Spanish> Anyone know where in the "nim niggets: systems programming and mets programming magic" by Aditya siram he got the idea that nims native code is 2x slower than c? He doesent really clarify what statistics this is based on or compiler options I'm assuming it was just nim build with no flags but maybe I'm wrong?
[01:51:23] <FromDiscord> <Elegantbeef> Isnt that deech?
[01:51:24] <FromDiscord> <demotomohiro> You can implement RGBA8 object like this:
[01:51:36] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3Jvy
[01:51:58] <FromDiscord> <Elegantbeef> There's the bitwise ops i didnt want to do 😀
[01:54:15] <FromDiscord> <el__maco> I guess, but I'm a bit concerned about the possibility that the compiler will actually emit this procedure call
[01:54:30] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3Jvz
[01:55:07] <FromDiscord> <el__maco> like if I fill a big texture in a for loop using toRGBA8, I don't want the program to invoke a million function calls
[01:55:14] <FromDiscord> <Elegantbeef> We're in 2021 99% of cpus are LE↵(@demotomohiro)
[01:55:16] <FromDiscord> <Elegantbeef> 😛
[01:55:40] <FromDiscord> <Elegantbeef> Then jusut cast the int to uint32↵(@elmaco)
[01:56:24] <FromDiscord> <el__maco> a sane C compiler backend might inline that call, but idk
[01:56:25] <FromDiscord> <Elegantbeef> disregard me
[01:56:47] <FromDiscord> <Elegantbeef> It almost certainly will, you can also make it a template for 100% inline
[01:57:09] <FromDiscord> <el__maco> seems complicated when all you want to do is to write 4 bytes of memory
[01:57:24] <FromDiscord> <el__maco> 🤷‍♂️
[01:57:35] <FromDiscord> <Elegantbeef> All this to avoid writing `u32` 😛
[01:58:25] *** Joins: Guest66 (~textual@cpc110913-live30-2-0-cust273.17-2.cable.virginm.net)
[01:58:32] <FromDiscord> <el__maco> I mean int64 seems to work, so I'm okay with this
[02:02:07] <Guest66> Hi, I've got a simple q. I've got an array of n objects, where each object itself is just a series of 7 floats, in a group of 3, and a group of 4
[02:02:19] *** Guest66 is now known as jphdotam
[02:04:00] <jphdotam> In C++ I can pass that array directly to opengl, but in nim that doesn't seem to work. Instead of passing an array of n sets of object of 4+3 floats, I seem to need to cast it to an array. e.g. so if n is 4, I have to recast my variable to an array of 28 floats
[02:04:19] <jphdotam> see line #16 here https://pastebin.com/WRbnGRn2
[02:04:38] <jphdotam> It's not a problem, I just thought it was a bit weird. as I can clarify the sizeof() for both of them is the same
[02:05:17] <FromDiscord> <Elegantbeef> I mean Nim is statically typed, so yes
[02:05:54] <NimEventer> New thread by Batsking: Rust's dbg! macro equivalent in nim, see https://forum.nim-lang.org/t/8741
[02:06:54] <jphdotam> But in C++ I can feed in any old struct it seems
[02:07:09] <FromDiscord> <Elegantbeef> Sure C++ doesnt mind implicit conversions
[02:08:15] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[02:08:17] <FromDiscord> <Elegantbeef> You can annotate the type with `{.packed.}` then do `myObject[0].addr` and it should behave the same
[02:09:19] *** Joins: xet7 (~xet7@user/xet7)
[02:10:23] <FromDiscord> <Elegantbeef> Oh you already had it packed 😀
[02:11:10] <jphdotam> Yeah I already figured out packed, but yeah in C++ I can do variable.data() to get a pointer to element 0
[02:11:38] <jphdotam> but if I do what you said, which is variable[0].addr (see line 53) it doesn't work
[02:11:46] <FromDiscord> <Elegantbeef> Well the data is sequential so `myObject.addr` sorry
[02:12:16] <FromDiscord> <Elegantbeef> the first element will be at the first byte of the object when it's packed, so taking the address of that is fine
[02:12:25] <FromDiscord> <Elegantbeef> If you want the first element of an array you do `myObject.color[0].addr` for instance
[02:12:41] <FromDiscord> <Elegantbeef> `.data` is an obscure way of getting the addr of an element 😀
[02:12:42] <jphdotam> myObj.addr (nor myObj[0].addr) doesn't work weirdly - it doesn't error, but it just doesn't plot anything
[02:13:08] <jphdotam> It's as if it knows it's a reference/pointer to somethign that isnt technically an array of GLfloats
[02:13:17] <jphdotam> Even if the data layout is identical
[02:13:48] <FromDiscord> <Elegantbeef> You are doing `vertssep.addr`?
[02:14:37] <FromDiscord> <Elegantbeef> unrelated but in nim we do `initT` for value type objects
[02:15:04] <jphdotam> Ok um now it's working... I must have made a stupid mistake.... I am stupid, and you are an elegant beef
[02:15:19] <FromDiscord> <Elegantbeef> Cheers
[02:15:43] <jphdotam> What do you mean by the initT bit sorry?
[02:16:05] <FromDiscord> <Elegantbeef> `initVertex` vs. `newVertex`
[02:16:18] <FromDiscord> <Elegantbeef> `object` in Nim is a struct in C++
[02:17:19] <jphdotam> Ahh ok
[02:17:33] <FromDiscord> <el__maco> what does the {.packed.} pragma do btw. Does Nim follow the same packing rules with C or something else
[02:17:44] <FromDiscord> <Elegantbeef> It tightly packs the fields
[02:17:48] <jphdotam> Am I right in saying that is purely aesthetic, the term new and init don't actually impact?
[02:17:53] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#foreign-function-interface-packed-pragma
[02:18:07] <FromDiscord> <Elegantbeef> Well `new` implies heap allocations and `init` implies stack allocation
[02:18:15] <FromDiscord> <Elegantbeef> So it does impact what the read expects
[02:18:26] <FromDiscord> <Elegantbeef> When i read `newVector` i assumed you were using references and that was an issue
[02:18:43] <jphdotam> Ah I see, thanks
[02:19:11] <FromDiscord> <Elegantbeef> It's just a convention, so if you're not expecting others to use your code it doesnt matter
[02:19:35] <FromDiscord> <Elegantbeef> But in nim `var a = new int` does heap allocated an `int` so there are some "reasons" why one would expect `new` to heap alloc
[02:20:18] <FromDiscord> <retkid> ``new``
[02:20:26] <FromDiscord> <retkid> sweats in java
[02:20:40] <jphdotam> Makes sense
[02:20:47] <jphdotam> Does everyone use discord rather than IRC, now?
[02:20:54] <FromDiscord> <Elegantbeef> I'm on matrix
[02:21:03] <FromDiscord> <retkid> take that back I like the new operator and it feels weird without it in kt
[02:21:05] <FromDiscord> <retkid> i use discord
[02:21:23] <FromDiscord> <retkid> im not a boomer
[02:21:40] <FromDiscord> <retkid> thought i might use IRC because well, too much ram usage
[02:22:45] <FromDiscord> <el__maco> discord is only 350MB, could be worse 😔
[02:22:56] <FromDiscord> <evoalg> @ElegantBeef I tried to make a minimal example of that "replacing var with let" issue someone was having yesterday: https://play.nim-lang.org/#ix=3JvE
[02:23:18] <FromDiscord> <Elegantbeef> You crazy fool you did it!
[02:23:37] <FromDiscord> <evoalg> hehe 😉
[02:24:32] <FromDiscord> <Elegantbeef> Any reasoning to why it happens now?
[02:25:47] <FromDiscord> <evoalg> it seems that with "let" the compiler makes a ref instead of a copy (or something like that)? ... and when tried to make a minimal example outside a proc, it didn't have this issue
[02:26:06] <FromDiscord> <evoalg> arg and orc work fine just as you said
[02:27:58] <FromDiscord> <Solitude> https://github.com/nim-lang/Nim/issues/13771
[02:29:37] <FromDiscord> <Elegantbeef> Ah thanks solitude
[02:30:25] <FromDiscord> <evoalg> gosh I might add `--gc=orc` to my default config
[02:30:27] <FromDiscord> <Elegantbeef> Without move semantics analysis it doesnt copy it
[02:30:44] <FromDiscord> <Elegantbeef> Depending on what you're doing it's faster
[02:31:02] <FromDiscord> <Elegantbeef> Though it's almost always more memory efficient
[02:31:43] <FromDiscord> <evoalg> I can override with arc when I feel the need right?
[02:32:05] <FromDiscord> <Elegantbeef> You should be able to
[02:34:57] <FromDiscord> <Elegantbeef> IIRC the CLI is raised to the highest level of control
[02:35:04] <FromDiscord> <Elegantbeef> So it overrides everything else
[02:35:15] <FromDiscord> <Elegantbeef> Also i realized evo that given the use case of `zip` it doesnt make sense as an iterator 😛
[02:35:52] <FromDiscord> <Elegantbeef> Though i might try an impl using closure iterators to see how well it works
[02:36:05] <FromDiscord> <Elegantbeef> And if it's any more memory/speed performant to a normal zip
[02:36:11] <NimEventer> New Nimble package! ogham - Convert Ogham inscriptions to latin text & vice versa., see https://github.com/stscoundrel/ogham-nim
[02:36:40] *** Quits: jphdotam (~textual@cpc110913-live30-2-0-cust273.17-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:38:05] <FromDiscord> <JamesH> Would arraymancer be the closest thing to numpy in nim? It obviously can do more with its cuda support etc., but I wondered if that was the best thing for straight forward n-dimensional array maths?
[02:38:20] <FromDiscord> <Yardanico> you should ask around in #science  and check https://github.com/SciNim/ :)
[02:38:48] <FromDiscord> <JamesH> Ah thank you
[03:16:31] <FromDiscord> <JamesH> In reply to @Elegantbeef "*unrelated but in nim": BTW I just wanted to ask 1 more q about my code sample - is my constructor for initVertex the right format? It feels quite verbose to initialise a struct with 2 properties
[03:16:41] <FromDiscord> <retkid> ive never had to do bitwise stuff
[03:17:00] <FromDiscord> <retkid> trying to think of a use
[03:17:18] <FromDiscord> <retkid> has there been uses that i just never foresaw and have been solving problems less efficiently
[03:20:45] <FromDiscord> <Elegantbeef> It's conventional but if you find it tedious i have a package which makes it a bit eaasier↵(@JamesH)
[03:20:59] <FromDiscord> <Elegantbeef> https://github.com/beef331/constructor
[03:22:14] <FromDiscord> <Elegantbeef> @evoalg\: do you have an example of code which uses `zip` then operates on the data?
[03:23:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JvS
[03:29:40] <FromDiscord> <Elegantbeef> It uses a little less memory but is 80 times slower in my test
[03:29:52] <FromDiscord> <Elegantbeef> So what i expected a vastly slower impl
[03:37:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JvX
[03:37:22] <FromDiscord> <Elegantbeef> But this is probably contrived
[03:41:36] <FromDiscord> <retkid> what do you guys think of nim packags
[03:42:02] <FromDiscord> <retkid> really excited for package level stuff
[03:43:02] <FromDiscord> <Elegantbeef> Comically nim2.0 is going to remove it IIRC
[03:43:05] <FromDiscord> <Elegantbeef> Since it's not needed
[03:43:36] <FromDiscord> <retkid> i thought it was the opposite
[03:43:45] <FromDiscord> <retkid> hmm
[03:43:46] <FromDiscord> <Rika> The implementation is not needed
[03:43:47] <FromDiscord> <retkid> lemme reread
[03:43:52] <FromDiscord> <Elegantbeef> Well nim2.0 will allow cyclical dependencies so it's not needed
[03:44:22] <FromDiscord> <Rika> I think he was more excited to maybe see package level access level
[03:44:30] <FromDiscord> <retkid> ah so its here right now, nobody uses it, so its getting culled in favor of more rtraditional
[03:44:40] <FromDiscord> <retkid> (edit) "rtraditional" => "trraditional"
[03:44:42] <FromDiscord> <Rika> It’s gonna be here
[03:44:44] <FromDiscord> <Rika> It’s not yet
[03:44:46] <FromDiscord> <Rika> Nim 2.0
[03:46:11] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3JvY
[03:46:26] <FromDiscord> <Rika> No
[03:46:29] <FromDiscord> <Rika> Never happening
[03:46:38] <FromDiscord> <Rika> Make a macro if you want
[03:47:08] <FromDiscord> <Rika> Seems trivial to implement a rudimentary macro for this
[03:47:32] <FromDiscord> <Elegantbeef> `package` imports/exports all files below this one?
[03:47:34] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jw0
[03:48:21] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[03:49:16] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jw1
[03:49:43] <FromDiscord> <Rika> That should be possible in a future version without your package thingy
[03:50:16] <FromDiscord> <retkid> i just think its cool 🥺
[03:50:43] <FromDiscord> <retkid> instead of interfacing with files you can use package groups
[03:51:08] <FromDiscord> <retkid> In reply to @Rika "Seems trivial to implement": yet to learn macros they seem scary
[03:51:11] <FromDiscord> <Rika> You break a lot of access level concepts
[03:51:51] <FromDiscord> <Elegantbeef> Though i still dont think i like it
[03:51:52] <FromDiscord> <Elegantbeef> Nim 2.0 will support this↵(@retkid)
[03:52:20] <FromDiscord> <retkid> In reply to @Rika "You break a lot": well, no. Because on compile they packages are just one file on compile, you split them up rfor organization
[03:52:45] <FromDiscord> <retkid> (edit) "they" => "the" | "file on compile," => "file,"
[03:52:50] <FromDiscord> <retkid> (edit) "rfor" => "for"
[03:53:12] <FromDiscord> <Rika> What happened to private and public then
[03:53:25] <FromDiscord> <Rika> I don’t see why I’d want it
[03:53:56] <FromDiscord> <retkid> In reply to @Elegantbeef "Nim 2.0 will support": I like this, even if it makes reading potentially more difficult. i like to define it like↵↵Its, enums, classes, top level variables, functions
[03:54:12] <FromDiscord> <retkid> (edit) "functions" => "functions↵in that order"
[03:54:29] <FromDiscord> <Rika> The ordering imo doesn’t make reading too much harder
[03:54:49] <FromDiscord> <retkid> In reply to @Rika "The ordering imo doesn’t": well if your procs are at the head you have more context if you read top to bottom
[03:55:00] <FromDiscord> <Rika> Most of us are supportive of the thing, especially since it’s a feature most modern languages have
[03:55:16] <FromDiscord> <Rika> In reply to @retkid "well if your procs": Nothing is truly top to bottom anymore
[03:55:25] <FromDiscord> <retkid> In reply to @Rika "What happened to private": well private and public applies to the package. Things outside the package cant import them
[03:55:41] <FromDiscord> <Rika> If it was we wouldn’t have people complain about cyclic dependencies I guess
[03:55:53] <FromDiscord> <Rika> In reply to @retkid "well private and public": I still fail to see why I would want this
[03:55:56] <FromDiscord> <evoalg> In reply to @Elegantbeef "<@900872397224280125>\: do you have": I used zip on day 01 of aoc ... https://play.nim-lang.org/#ix=3Jw2
[03:56:22] <FromDiscord> <retkid> In reply to @Rika "I still fail to": because it allows for splitting files for better organization without having extensive import headers
[03:57:00] <FromDiscord> <retkid> this is one of many reasons I should never make a language, this is tupid
[03:57:04] <FromDiscord> <retkid> (edit) "tupid" => "stupid"
[03:57:11] <FromDiscord> <Rika> I mean I guess I can see it
[03:57:15] <FromDiscord> <Rika> Go has this feature
[03:57:20] <FromDiscord> <Rika> I don’t think rust or zig does
[03:57:28] <FromDiscord> <Rika> But I’m pretty sure go does
[03:58:10] <FromDiscord> <retkid> java/kotlin dont, python doesn't, Ocaml doesn't (need to learn more)
[03:58:21] <FromDiscord> <retkid> Bash has it
[03:58:26] <FromDiscord> <retkid> (edit) "it" => "it. Technically"
[03:58:48] <FromDiscord> <retkid> JS would never have this
[04:00:31] <FromDiscord> <Rika> JS barely has the concept of modules
[04:00:53] <FromDiscord> <Rika> ~~I like how Lua does it~~
[04:01:01] <FromDiscord> <Elegantbeef> That's a good enough reason not to do it↵(@Rika)
[04:01:06] <FromDiscord> <retkid> I should learn more lua
[04:01:08] <FromDiscord> <Rika> Oh god I might start sounding like a Lisp user
[04:01:19] <FromDiscord> <Rika> Lua is fun
[04:01:24] <FromDiscord> <Rika> Head melting too sometimes
[04:01:33] <FromDiscord> <retkid> i was going to learn Lisp but decided not to
[04:01:49] <FromDiscord> <retkid> Common Lisp, that is
[04:02:16] <FromDiscord> <Rika> What about uncommon lisp
[04:03:16] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3Jw8
[04:03:17] <FromDiscord> <retkid> i dont wanna learn carp-lang
[04:03:45] <FromDiscord> <retkid> https://github.com/carp-lang/Carp
[04:04:12] <FromDiscord> <retkid> babe wakeup, statically typed lisp system lang just dropped
[04:04:13] <FromDiscord> <Elegantbeef> Nim doesnt support unpacking and it requires a compiler change to support, so yea not overly feasible↵(@evoalg)
[04:04:57] <FromDiscord> <retkid> have you ever been doing manual GC, and you sit down and go
[04:05:02] <FromDiscord> <retkid> "i wanna do this in lisp"
[04:05:30] <FromDiscord> <evoalg> if I really needed it, and if I knew what I was doing, I could modify the zip code to look instead a container and just pass a container right?
[04:06:25] <FromDiscord> <Elegantbeef> I mean we can always cheat unpacking and do something like `myColl -> zip` assuming `myColl` is an array
[04:06:49] <FromDiscord> <Elegantbeef> Since nim is dynamic we cant really zip an unknown collection nicely afaict
[04:07:03] <FromDiscord> <Elegantbeef> isnt dynamic\
[04:07:21] <FromDiscord> <evoalg> gotcha ok
[04:08:41] <FromDiscord> <Elegantbeef> My `zip` is slower than the `sequtils` due to the fact they only work on openarrays and can reason the size needed, but more flexible so in some cases it's faster
[04:08:54] <FromDiscord> <Elegantbeef> Just thought i'd mention that
[04:09:12] <FromDiscord> <Elegantbeef> `all`/`map` should in theory be faster, but i need to bench them in my contrived example
[04:14:43] <FromDiscord> <evoalg> you don't need "fold" as it doesn't copy to a temporary seq?
[04:21:06] <nrds> <11sorcerer99> merry christmas nim coders! from the IRC-nERDs irc network! =)
[04:22:50] <FromDiscord> <Elegantbeef> I mean this is working on iterators so doesnt make sense really
[04:22:52] <FromDiscord> <Elegantbeef> Write a reversed iterator if you can for your type
[04:22:53] <FromDiscord> <Elegantbeef> Actually i'm dumb
[04:22:53] <FromDiscord> <Elegantbeef> You dont have step by step
[04:22:54] <FromDiscord> <Elegantbeef> But eitherway doesnt make sense for iterators imo
[04:22:56] <FromDiscord> <Elegantbeef> Substantially faster due to just applying logic as we go instead of allocating a seq
[04:23:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jwd
[04:23:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/MoW
[04:24:01] *** Joins: drewr (~drew@user/drewr)
[04:26:08] <FromDiscord> <Elegantbeef> Now if only you were a nim coder so you'd be weirdly saying it to yourself
[04:28:44] <FromDiscord> <evoalg> oh that's a huge difference in time
[04:29:19] <FromDiscord> <evoalg> like 500 x faster ... am I testing that right?
[04:29:42] <FromDiscord> <Elegantbeef> Yea it's quite a bit faster
[04:30:05] <FromDiscord> <Elegantbeef> Bad example since we're just doing `filterIt` then getting the size of that
[04:30:18] <FromDiscord> <Elegantbeef> But the point is to test the equivlent loop logic's performance
[04:30:30] <FromDiscord> <evoalg> yep makes sense
[04:32:01] <FromDiscord> <evoalg> The `x == 'd'` bit in `all(a, x == 'd')` ... it supports any `true` statement right? ... so I could use a complicated func in that bit right?
[04:32:29] <FromDiscord> <Elegantbeef> Yep
[04:33:03] *** Quits: drewr (~drew@user/drewr) (Quit: ERC (IRC client for Emacs 27.2))
[04:33:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jwj
[04:34:21] *** Joins: drewr (~drew@user/drewr)
[04:34:22] <FromDiscord> <Elegantbeef> It's heavily leaning into "Nim is imperative and doesnt support iterator chaning" so i'm embracing it using for statement macros
[04:35:14] <FromDiscord> <evoalg> that was my next question 😉 ... so `all` is just a nice way of writing it right? ... and that's important as was is Araq that said if code is simpler then one can reason about it better?
[04:37:53] <FromDiscord> <evoalg> if sequtils had a closure iterator for all, then that would also be fast right?
[04:38:25] <FromDiscord> <Elegantbeef> The closure is actually slower
[04:38:38] <FromDiscord> <Elegantbeef> It copies the collection and does funky logic
[04:38:51] <FromDiscord> <evoalg> wow ok
[04:39:38] <FromDiscord> <Elegantbeef> `zipIter` will  always be slower than `sequtils.zip` since `sequtils.zip` only iterates once
[04:39:53] <FromDiscord> <Elegantbeef> The way that `zipIter` is faster is in the cases you need to do `toSeq` on values
[04:40:37] <FromDiscord> <Elegantbeef> It's really just a case of enabling iterating over N number of iterators stepping at the same time
[04:41:06] <FromDiscord> <evoalg> gotcha ... and also you've made it nice to accept >= 2 containers
[04:41:30] <FromDiscord> <Elegantbeef> > = 2 iterators\ 😛
[04:41:55] <FromDiscord> <evoalg> >= iterators true 😉
[04:42:04] <FromDiscord> <evoalg> can't type
[04:42:20] <FromDiscord> <evoalg> >= 2 iterators
[04:42:28] <FromDiscord> <Elegantbeef> There we go one of us could do it
[04:43:55] <FromDiscord> <evoalg> so I've had a little play with `zip` and `all` ... I have to go out so I can't play with `map` until later
[04:44:03] <FromDiscord> <Elegantbeef> lol
[04:44:18] <FromDiscord> <Elegantbeef> They're not that special,  just a semi funky for loop
[04:44:25] <FromDiscord> <Elegantbeef> But i'll leave them until i decide i dont like them
[04:44:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[04:45:07] <FromDiscord> <Elegantbeef> Though i think since they're a tinge safer that just manually writing them I might not dislike them that much
[04:47:52] *** Joins: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1)
[04:48:17] *** Quits: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1) (Client Quit)
[04:51:06] <FromDiscord> <evoalg> I can't use `a.all(x == 'd')` right?
[04:52:20] *** Joins: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1)
[04:54:32] <FromDiscord> <Elegantbeef> I dont think so
[04:56:10] <FromDiscord> <Elegantbeef> Just how the for loop macros work
[04:56:48] *** Quits: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1) (Client Quit)
[04:58:13] *** Joins: drewr (~drew@user/drewr)
[04:58:47] <FromDiscord> <Elegantbeef> Really i could make `a.forAll(x, x == 'd')` though it's less consistent
[05:04:31] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:28:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[05:45:55] *** Joins: drewr (~drew@user/drewr)
[05:50:39] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[06:00:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[06:02:08] *** Joins: drewr (~drew@user/drewr)
[06:04:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:10:20] *** Quits: drewr (~drew@user/drewr) (Quit: ERC (IRC client for Emacs 27.2))
[06:11:11] *** Joins: drewr (~drew@user/drewr)
[07:01:48] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[07:03:45] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 256 seconds)
[07:15:17] <FromDiscord> <Roundlay> Pretty new to Nim and find myself frequently searching here for good examples of the language in use. Anybody floated the idea of a Highlights channel? A place where nice/cool/interesting contributions could be automatically collated by a bot (written in Nim, of course) based on reactions?
[07:16:12] <FromDiscord> <Elegantbeef> There is "This month with Nim" which is kinda like that, but a showcase channel could be nicer for less delayed waiting 😀
[07:16:13] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Ping timeout: 256 seconds)
[07:18:06] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[07:19:51] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[07:28:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[07:32:46] *** Joins: Colt_ (~Colt@user/colt)
[07:34:39] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:35:04] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[07:50:40] *** Joins: drewr (~drew@user/drewr)
[07:52:10] <FromDiscord> <Yardanico> In reply to @Roundlay "Pretty new to Nim": yeah I was thinking about making something like this, but user-submitted instead of being managed by a bot
[07:52:17] <FromDiscord> <Yardanico> (edit) "making something" => "adding a channel"
[07:57:15] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Quit: Leaving)
[07:58:23] <FromDiscord> <Roundlay> Nice. Yeah, I guess I figured basing it on some reasonable threshold of reactions might help surface quality contributions without adding extra busywork for mods here, but both approaches work 👍🏻
[07:58:47] <FromDiscord> <Elegantbeef> Well there are also Matrix/IRC users
[07:59:18] <FromDiscord> <Elegantbeef> I'm not a sophisticated bot afterall
[07:59:54] <FromDiscord> <Rika> You aren’t?
[08:00:18] <FromDiscord> <Elegantbeef> I'm an unsophisticated schmuck
[08:00:27] <FromDiscord> <Bung> @haxscramper where is hmisc/helpers moved to ?
[08:00:49] <FromDiscord> <Elegantbeef> Oh it's bung 😀
[08:01:22] <FromDiscord> <Roundlay> In reply to @Elegantbeef "Well there are also": Ahh, fair point
[08:02:28] <FromDiscord> <Elegantbeef> Though the matrix protocol supports reactions i find it hard to believe all clients implement it 😛
[08:39:22] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:53:11] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[08:54:45] <FromDiscord> <Roundlay> I guess if platform parity is important to the community then things get tricky yeah. Although I’m not sure what the user numbers per platform is like
[08:54:45] <FromDiscord> <haxscramper> In reply to @Bung "<@!608382355454951435> where is hmisc/helpers": Depending on which proc you need, but it is a hmisc/core/all mostly
[08:55:00] <FromDiscord> <haxscramper> But it has been half a year since then
[08:55:53] <FromDiscord> <Bung> In reply to @haxscramper "But it has been": yeah, I just updated my slim package.
[09:11:11] <FromDiscord> <AulonSal> are `nim doc` and `nim doc2` the same command?
[09:13:37] <FromDiscord> <Elegantbeef> It appears so
[09:13:42] <FromDiscord> <Elegantbeef> Though i didnt even know doc2 was a thing
[09:14:48] <FromDiscord> <AulonSal> thank you, I encountered it in a repo from 2018
[09:15:07] <FromDiscord> <Elegantbeef> Perhaps it used to do something different but that got moved to `doc`
[09:15:14] <FromDiscord> <Rika> The assumption is that they weren’t the same before
[09:15:31] <FromDiscord> <Rika> Then doc probably got deprecated
[09:15:38] <FromDiscord> <Rika> And then was made the same as 2
[10:14:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[10:14:41] *** Colt_ is now known as Colt
[10:16:09] *** Joins: drewr (~drew@user/drewr)
[10:20:39] <FromDiscord> <evoalg> @ElegantBeef why is slicerator.all called "all" and not "filter" or something?
[10:21:32] <FromDiscord> <Elegantbeef> Possibly cause i'm an idiot
[10:22:43] <FromDiscord> <evoalg> you certainly aren't ... I thought I was an idiot for not knowing 😉
[10:23:06] <FromDiscord> <Elegantbeef> Eh i read it as `for all(x == 'a') in a.items` 😀
[10:23:24] <FromDiscord> <Elegantbeef> But filter matches the convention and probably more accurate
[10:23:43] <FromDiscord> <Elegantbeef> Naming it the same as the functions is probablly illadvised since it's kinda hidden
[10:24:15] <FromDiscord> <Elegantbeef> should be like `allWhere()` or `syncIter(a, b, c)` instead of `zipIter`
[10:24:16] <FromDiscord> <evoalg> ahh yea I see what you mean ... but "all" is also in sequtils but means something different
[10:25:06] <FromDiscord> <evoalg> ... where all of the elements have to match
[10:25:25] <FromDiscord> <Elegantbeef> Yea i know i noticed the bad naming today but didnt change it cause i forgot
[10:25:46] <FromDiscord> <Elegantbeef> I did update it to be `filter` now, if `all` bothers you that much
[10:25:54] <FromDiscord> <Elegantbeef> But yea might rename them again to be more readable
[10:27:25] <FromDiscord> <evoalg> hehe I'm not used to someone listening to my advice 😉 ... but yea hmmm ... filter is nice, but if it shouldn't be named the same then what about "filterFor" ... since slicerator is all about for loops?
[10:28:18] <FromDiscord> <evoalg> ... and map can be mapFor ??
[10:28:56] <FromDiscord> <Elegantbeef> Being named the same isnt that big of a deal
[10:30:15] <FromDiscord> <Elegantbeef> The issue with the name was that it didnt make much sense, i'm probably going to end with something more descriptive like `onlyWhere`
[10:30:46] <FromDiscord> <evoalg> ok ... and if I import both sequtils and slicerator (because that's the crazy fool I am), how do I do one over the other? ... do I do: slicerator.map?
[10:31:42] <FromDiscord> <evoalg> oh I do do that 😉
[10:31:52] <FromDiscord> <Elegantbeef> I mean you dont need to
[10:32:31] <FromDiscord> <evoalg> oh because the compiler is intelligent enough to choose?
[10:33:16] <FromDiscord> <Elegantbeef> Well all the stuff is forloop macros so it'll only be chosen in the case of `for x in map(y, x +10)`
[10:33:31] <FromDiscord> <Elegantbeef> Which is why we cannot do `a.items.map`
[10:34:42] <FromDiscord> <Elegantbeef> In the case you want to use the `sequtils` map yes you will need to do `for x in sequtils.map(y, myProc)`
[10:34:57] <FromDiscord> <Elegantbeef> Though if you're testing both you'll probably use `sequtils.mapit` so it's less of an issue
[10:35:32] <FromDiscord> <evoalg> gotcha ok ... and as cool as function programming is, for loops are easier for me to read, and I can do them efficiently and I can even break out of them early etc
[10:36:10] <FromDiscord> <Elegantbeef> You also made me find a bug so win 😀
[10:36:25] <FromDiscord> <evoalg> oh?!
[10:37:00] <FromDiscord> <Elegantbeef> i didnt produce an intelligent error for `for x in map(a)`
[10:37:14] <FromDiscord> <Elegantbeef> It should say "No expression to map provided."
[10:37:22] <FromDiscord> <Elegantbeef> But i instead just had a dumb macro error
[10:37:31] <FromDiscord> <evoalg> ahh
[10:38:11] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/924559200787501106/image.png
[10:38:15] <FromDiscord> <Elegantbeef> Now it's a lovely error 😛
[10:38:53] <FromDiscord> <evoalg> that's a handsome error yes
[10:39:21] <FromDiscord> <Elegantbeef> I should have a nice error for all the cases one ruins the syntax for these new macros, so if you get a confusing error let me know
[10:41:42] <FromDiscord> <evoalg> oh sure ... I'd be good for that as I'm easily confused ... I'm not joking either. It's like someone new to nim comes in and they are either the type that reads the docs & source code and understands complicated error messages, and then there are people like me where it needs to be explained in a dumbed-down way
[10:46:36] <FromDiscord> <evoalg> `for x in filter(x):` -> "slicerator.nim(247, 23) Error: index 2 not in 0 .. 1" ... that confuses me
[10:47:55] <FromDiscord> <Elegantbeef> Yea that was the error i mentioned i fixed
[10:48:14] <FromDiscord> <evoalg> oh I thought you fixed map
[10:48:50] <FromDiscord> <Elegantbeef> Both they have replicated logic
[10:49:08] <FromDiscord> <dizzyliam> @ElegantBeef What are you using to see an error in your text editor?
[10:49:16] <FromDiscord> <Elegantbeef> Codelens
[10:49:23] <FromDiscord> <evoalg> I uninstalled slicerator and installed it again but still saw that error
[10:50:11] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/924562217062531162/image.png
[10:50:14] <FromDiscord> <Elegantbeef> Uhh
[10:50:48] <FromDiscord> <evoalg> I see it now!
[10:51:05] <FromDiscord> <dizzyliam> In reply to @Elegantbeef "Codelens": damn, premium feature
[10:51:54] <FromDiscord> <Elegantbeef> Indeed
[10:52:14] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/924562733616218112/image.png
[10:52:17] <FromDiscord> <Elegantbeef> I'm really happy with these errors
[10:52:50] <FromDiscord> <dizzyliam> that's not a normal thing to say about errors
[10:55:10] <FromDiscord> <Elegantbeef> Codelens + the `error` for macros makes me sleep easier at night
[10:55:37] <FromDiscord> <Elegantbeef> `error` is so nice for macros, giving helpful custom error messages on the input code
[10:55:41] <FromDiscord> <Elegantbeef> You cant beat it if you ask me
[10:59:07] <FromDiscord> <Elegantbeef> This reminds me that i havent got an inline linter setup for nvim
[10:59:56] <FromDiscord> <Elegantbeef> Anyway evo i pushed changes for `zipIter` aswell which make it smarter for errors, but yea i really want to hear when you break it all
[11:00:10] <FromDiscord> <Rika> In reply to @Elegantbeef "You cant beat it": It can be better
[11:00:40] <FromDiscord> <Elegantbeef> For macros?
[11:00:47] <FromDiscord> <Rika> Yeah
[11:01:11] <FromDiscord> <Rika> Being able to show where in the untransformed code is the error
[11:01:27] <FromDiscord> <Elegantbeef> `error` does that
[11:01:42] <FromDiscord> <Elegantbeef> You pass the input node and it links back to it's line infor
[11:01:45] <FromDiscord> <Rika> Does it now
[11:01:52] <FromDiscord> <Rika> I don’t remember it being able to
[11:01:58] <FromDiscord> <Rika> Nonetheless then that is good
[11:01:59] <FromDiscord> <Elegantbeef> The `error` from `macros` does
[11:02:10] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#error%2Cstring%2CNimNode
[11:02:40] <FromDiscord> <Elegantbeef> It also has a sibling `warning`
[11:02:53] <FromDiscord> <Elegantbeef> Oh and also hint, didnt know that
[11:03:43] <FromDiscord> <Elegantbeef> Though comically since it takes the lineinfo of whatever you give it you can give arbitrary errors on unrelated lines
[11:04:52] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Jx2
[11:04:59] <FromDiscord> <Elegantbeef> If you run that it errors on line 6 😀
[11:05:10] <FromDiscord> <evoalg> can you determine the length of the nim source file and then import random and and point to someone innocent?
[11:05:28] <FromDiscord> <Elegantbeef> Nah you need a node to point to
[11:05:40] <nrds> <06Prestige99> weird beef
[11:06:14] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Jx3 you can get really funky
[11:06:31] <FromDiscord> <Elegantbeef> I can create an error on a 100% unrelated file that I have imported
[11:06:34] <FromDiscord> <Elegantbeef> What's weird?
[11:07:09] <nrds> <06Prestige99> That error on line 6 thing
[11:07:22] <FromDiscord> <Elegantbeef> I mean it has it's uses I wager
[11:07:35] <nrds> <06Prestige99> shouldn't it have been on the next line though?
[11:07:47] <FromDiscord> <Elegantbeef> No i gave it the line info of the last line
[11:09:01] <nrds> <06Prestige99> 🤔
[11:09:35] <FromDiscord> <Elegantbeef> i do `getImpl` which gets the declaration of `a` which is `var a = 300` then do `[0]` which gets the `a` ident
[11:10:03] <nrds> <06Prestige99> oh, I see
[11:34:02] <FromDiscord> <evoalg> https://play.nim-lang.org/#ix=3Jxa not sure what I broke beef
[11:36:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[11:37:45] <FromDiscord> <Elegantbeef> You didnt break anything
[11:38:10] <FromDiscord> <Elegantbeef> `parseInt(x)` in the second example is trying to do `parseInt(char)` not string do `parseInt($x)`
[11:38:54] <FromDiscord> <Elegantbeef> `Error: type mismatch: got <char> but expected one of: func parseInt(s: string): int` is right
[11:41:21] <FromDiscord> <Elegantbeef> Due to how quasi quoting works here means we get an odd error message, though accurate info
[11:41:38] <FromDiscord> <evoalg> is a the same as b here?
[11:42:03] <FromDiscord> <Elegantbeef> b is a string so iterating over it yields `char`
[11:42:20] <FromDiscord> <Elegantbeef> iterating over `a` yields `string` since it's a `seq[string]`
[11:43:37] <FromDiscord> <evoalg> ohhhhhh right!
[11:49:21] <FromDiscord> <evoalg> oooo I can even do `for i, x in map(a, parseInt(x) div (i + 1)):` ... I didn't expect that I can use `i` (not just `x`)
[11:49:42] <FromDiscord> <Elegantbeef> Yep implemented for both filter and map 🙂
[11:49:50] <FromDiscord> <evoalg> nice!
[11:50:03] <FromDiscord> <Elegantbeef> and if you do `for i, x, y` it'll give a cryptic error methinks
[11:50:30] <FromDiscord> <Elegantbeef> Ah nvm
[11:50:43] <FromDiscord> <Elegantbeef> "Invalid number of for loop variables for 'map" is not cryptic
[11:50:54] <FromDiscord> <evoalg> even I can understand that one 😉
[11:54:22] <FromDiscord> <Elegantbeef> also a side note is you can do `typeof(expr)` instead of `typedesc(expr)`
[11:54:27] <FromDiscord> <Elegantbeef> It reads better and is the convention
[11:54:47] <FromDiscord> <evoalg> ahhh my syntax highlighting highlights typedesc but not typeof
[11:55:00] <FromDiscord> <evoalg> but I'll use it
[11:55:21] <FromDiscord> <evoalg> my syntax highlighting doesn't highlight slicerator stuff either 😉
[11:55:44] <FromDiscord> <evoalg> I love how I can do `for i, x in filter([5, 6, 7, 8], i > 0):` do skip the first element btw
[11:55:57] <FromDiscord> <Elegantbeef> That's a happy accident 😀
[11:56:10] <FromDiscord> <JamesH> I've got a silly generic programming question. I've never worked in languages that need manual memory management, but I vaguely know about malloc() etc. in C. If one were to make something like a game in Nim, do you think most occasions people use malloc() etc. to get dynamic allocations, they could get away with just using a `seq` of a custom struct, or is that naive?
[11:56:45] <FromDiscord> <Elegantbeef> You only use malloc and similar to interop with C, you dont ever really need to do it otherise
[11:57:08] <FromDiscord> <JamesH> I only ask because I was reading some code that relied a lot on malloc() to dynamically allocate new structs in a game written in C++, and thought i might have implemented it as a seq, but i know C++ has vectors, which is the same?
[11:57:26] <FromDiscord> <Elegantbeef> I've got a framework that I only use 1 non GC'd allocated heap memory for iirc
[11:57:37] <FromDiscord> <Elegantbeef> Yea i mean you can use a seq, there isnt much reason not to
[11:57:55] <FromDiscord> <JamesH> What was the situation you didn't use the GC for, out of interest?
[11:58:07] <FromDiscord> <Elegantbeef> Loading shaders since it required a cstringarray
[11:59:07] <FromDiscord> <Elegantbeef> You dont really need to use manual memory management in most siutations
[11:59:14] <FromDiscord> <Elegantbeef> A vast majority you can do with built in collections
[11:59:29] <FromDiscord> <Rika> Even interop sometimes
[11:59:46] <FromDiscord> <Elegantbeef> Yep Nim strings are null terminated
[12:00:13] <FromDiscord> <Elegantbeef> So a cstring that doesnt outlive creation is 100% safe
[12:00:29] <FromDiscord> <Rika> If the C API is also safe lol
[12:00:30] <FromDiscord> <Elegantbeef> a cstring from a nim string\
[12:00:41] <FromDiscord> <Elegantbeef> That's what i meant by outlive creation
[12:01:09] <FromDiscord> <Elegantbeef> If the C Api holds onto the pointer and you add to your nimstring causing it to grow it'll have a bad pointer to old memory
[12:01:34] <FromDiscord> <Elegantbeef> But anyway the point is Nim's collections work, if they dont work well enough you'll want to rewrite them in your own container which uses destructors anyway
[12:03:37] <FromDiscord> <Elegantbeef> It's odd to hear that they didnt use vector, maybe they just didnt like the name 😛
[12:04:29] <FromDiscord> <evoalg> I can also do: `for i, x in map(1..9, x ^ i):` ... so nice
[12:07:14] <FromDiscord> <Elegantbeef> The fun part with those variants is it was just me going "I really hate testing these with manually declaring a counter and incrementing it"
[12:08:04] <FromDiscord> <Elegantbeef> I was getting tired of doing that
[12:08:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/R7j
[12:10:18] *** Joins: Guest2440 (~amir@IGLD-84-228-29-213.inter.net.il)
[12:10:33] <Guest2440> hi
[12:11:19] <FromDiscord> <Elegantbeef> hello
[12:13:35] <Guest2440> I'm at a lost, im trying to upload a png to an ftp using asyncftpclient and it keeps corrupting it. when i try to open it again i get  "PNG file curropted by ASCII conversion". 
[12:14:07] <Guest2440> there is no excpetion or anything, and i can figure out how to make the ftp use binary for the upload
[12:15:26] <Guest2440> *cant
[12:27:47] <FromDiscord> <Elegantbeef> It doesnt look like it can change between the two, that might've been a detail missed in writting it
[12:28:18] <FromDiscord> <Elegantbeef> Though i dont get why a binary/ascii file behaves differently
[12:28:48] <FromDiscord> <Elegantbeef> You're sure you got the order right?
[12:32:30] <Guest2440> i don't understand the question. the file works on the original computer, then copied to ftp and stops working.
[12:33:14] <FromDiscord> <Elegantbeef> I mean do you have the parameter order correct?
[12:33:51] <FromDiscord> <Elegantbeef> I guess you'd know cause it'd throw an exception otherwise
[12:34:55] <Guest2440> it has two parameters, local file and remote, and its copies the file, just corrupted
[12:35:13] <FromDiscord> <Elegantbeef> What's the file size?
[12:35:35] <Guest2440> 1. 40kb. 2. 110kb.
[12:36:03] <FromDiscord> <Elegantbeef> 40 is on recieve?
[12:39:39] <Guest2440> i checked files, the first 40kb and the second 110kb. 
[12:40:03] <FromDiscord> <Elegantbeef> So they're properly transferred?
[12:40:13] <Guest2440> yes.
[12:42:39] <FromDiscord> <Elegantbeef> Wish i could help, dont have anything setup to help debug this
[12:45:37] <FromDiscord> <Elegantbeef> Oddly there is https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/asyncftpclient.nim#L433-L448 in the module
[12:50:13] <FromDiscord> <Elegantbeef> Seems no one tested if the files worked properly, so it seems the binary stuff needs to be added
[12:53:44] <FromDiscord> <Elegantbeef> Atleast the spec is published and easily understandable
[12:55:18] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[13:00:34] <FromDiscord> <Elegantbeef> If i can be arsed to setup a ftp server I might consider implementing it properly, but big if, do make an issue on the github though
[13:54:41] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[14:23:30] <FromDiscord> <glyh (Lyhokia)> I'm trying to create a treesitter grammar for Nim, and I found this\:
[14:26:24] <FromDiscord> <glyh (Lyhokia)> I'm trying to create a treesitter grammar for Nim, and I found this [Grammar](https://nim-lang.org/docs/manual.html#syntax-grammar), on Nim's website, which is not standard CFG, I guess. So could you explain how these operator works? e.g. "/","\\", "IND{\}"?↵There seems to be more magic, e.g. OP0, it claims to be operator ending in either "-\>", "\~\>" or "=\>", does this mean "abc=\>" is a OP0?
[14:27:27] <FromDiscord> <glyh (Lyhokia)> Or, if I have to read the source, except the parser.nim file, could you point out what else should I scan through?
[14:28:35] <FromDiscord> <glyh (Lyhokia)> I'm trying to create a treesitter grammar for Nim, and I found this [Grammar](https://nim-lang.org/docs/manual.html#syntax-grammar), on Nim's website, which is not standard CFG. So could you explain how these operator works? e.g. "/","\\", "IND{\}"?↵There seems to be more magic, e.g. OP0, it claims to be operator ending in either "-\>", "\~\>" or "=\>", does this mean "abc=\>" is a OP0?
[14:29:59] <FromDiscord> <glyh (Lyhokia)> Or, if I have to read the sources, could you point out what else should I scan through, except "compiler/{parser.nim,lexer.nim}" ?
[14:37:58] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:39:42] <FromDiscord> <demotomohiro> It seems these operators are explained in http://nim-lang.github.io/Nim/manual.html#about-this-document
[14:44:50] <FromDiscord> <demotomohiro> 'IND{=}" and "IND{>}" are explained in http://nim-lang.github.io/Nim/manual.html#lexical-analysis-indentation↵I think you need to read the manual from the top.
[14:45:38] <FromDiscord> <glyh (Lyhokia)> I'll go and see, thank you
[14:54:20] <FromDiscord> <demotomohiro> There is also grammer related file in https://github.com/nim-lang/Nim/blob/devel/doc/grammar.txt
[14:57:29] <FromDiscord> <glyh (Lyhokia)> Thanks!
[15:12:59] *** Joins: pro (~pro@user/pro)
[15:18:57] *** Joins: neceve (~quassel@2.26.93.228)
[16:06:23] <FromDiscord> <kaddkaka> Hi, why did `nim` go for named `shl`/`shr` instead of operators `<<`/`>>`?
[16:09:20] <pro> iirc shl and shr are common assembly names in popular risc's so why not use them
[16:09:45] <FromDiscord> <Marisol> And because of pascal roots i guess
[16:09:56] <FromDiscord> <kaddkaka> add is assembly for `+` 😛
[16:10:03] <FromDiscord> <kaddkaka> I see
[16:10:06] <FromDiscord> <kaddkaka> thanks
[16:22:14] <FromDiscord> <Solitude> In reply to @kaddkaka "Hi, why did `nim`": and to leave `<<`, `>>` free for some wacky sugar, i guess
[16:22:27] <FromDiscord> <kaddkaka> Make sense
[16:35:28] <FromDiscord> <haxscramper> You can also copy some parts from https://github.com/haxscramper/tree-sitter-nim/blob/master/grammar.js if you find this useful
[16:35:29] <FromDiscord> <glyh (Lyhokia)> I'm trying to create a treesitter grammar for Nim, and I found this [Grammar](https://nim-lang.org/docs/manual.html#syntax-grammar), on Nim's website, which is not standard CFG. So could you explain how these operator works? e.g. "/","\\", "IND{\}"?↵There seems to be more magic, e.g. OP0, it claims to be operator ending in either "-\>", "\~\>" or "=\>", does this mean "abc=\>" is a OP0?
[16:52:45] <FromDiscord> <MD> sent a long message, see http://ix.io/3JyF
[16:53:51] <FromDiscord> <MD> (edit) "http://ix.io/3JyF" => "http://ix.io/3JyG"
[16:53:59] <FromDiscord> <MD> (edit) "http://ix.io/3JyG" => "http://ix.io/3JyH"
[16:54:09] <FromDiscord> <MD> (edit) "http://ix.io/3JyH" => "http://ix.io/3JyI"
[16:54:23] <FromDiscord> <MD> (edit) "http://ix.io/3JyI" => "http://ix.io/3JyJ"
[16:54:35] <FromDiscord> <MD> (edit) "http://ix.io/3JyJ" => "http://ix.io/3JyK"
[17:06:07] <FromDiscord> <Shiba> HI
[17:06:25] <FromDiscord> <Shiba> iam new to nim
[17:06:43] <FromDiscord> <Shiba> and i have some questions😀
[17:07:38] <pro> welcome
[17:09:05] <FromDiscord> <Shiba> so is nim faster than LuaJit
[17:10:44] *** Quits: pro (~pro@user/pro) (Read error: Connection reset by peer)
[17:20:12] <FromDiscord> <TryAngle> In reply to @Shiba "so is nim faster": nim is one of the faster languages available, especially when arc/orc becomes default↵in most situations ur implementation is what matters and not the language though.
[17:21:05] <FromDiscord> <TryAngle> https://github.com/kostya/benchmarks↵here are some benchmarks
[17:21:06] <FromDiscord> <enthus1ast> also fast EXECUTION is not everything, also fast code writing, CORRECT code, joy of use...
[17:21:51] <FromDiscord> <Shiba> okay 😀  but i think that luaJit is fast and has acces to hardaware level with c in "fii"
[17:22:18] <FromDiscord> <Ricky Spanish> Agreed with all of this, it's fast but the code also is nice to work with and it has a lot of options if you want to deep dive to improve the performance also, nim can also call c and cpp easily
[17:23:16] <FromDiscord> <TryAngle> C / C++ interop feels a bit too easy in nim tbh, almost illegal XD
[17:23:29] <FromDiscord> <TryAngle> (edit) "XD" => "how easy it isXD"
[17:23:52] <FromDiscord> <Shiba> iam confused beacause i already know lua and i want to switch to a languagesthat has acces to low level stuff and maybe a similair syntanx
[17:23:59] <FromDiscord> <Shiba> (edit) "languagesthat" => "language that"
[17:24:24] <FromDiscord> <Shiba> so if i compile my code to i need to get a c compiler too
[17:24:31] <FromDiscord> <Shiba> (edit) "so if i compile my code to ... i" 03added "c"
[17:24:38] <FromDiscord> <Shiba> (edit) "c" => "c, do"
[17:24:42] <FromDiscord> <Shiba> (edit) "too" => "too?"
[17:26:01] <FromDiscord> <Rika> Yes
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de)
[17:26:04] *** Quits: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de) (Changing host)
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:26:13] <FromDiscord> <Rika> But nim on Windows gets it for you
[17:26:17] <FromDiscord> <TryAngle> In reply to @Shiba "so if i compile": you only need a c compiler installed but u don't need to use it
[17:26:23] <FromDiscord> <TryAngle> nim does that for u
[17:26:39] <FromDiscord> <Shiba> i have minGW installed with gcc
[17:26:58] <FromDiscord> <TryAngle> that should be perfect
[17:27:02] <FromDiscord> <Rika> You won't need to manually use it
[17:27:53] <FromDiscord> <Shiba> so how do i start make a fille with .nim at the end
[17:27:58] <FromDiscord> <Shiba> (edit) "fille" => "file"
[17:27:59] <FromDiscord> <Rika> Startup time is not easily measurable I’d say↵Image manipulation is pretty easy I’d say↵Probably on the GUI but I don’t know too much on that
[17:28:11] <FromDiscord> <Rika> In reply to @Shiba "so how do i": Call the Nim compiler
[17:28:32] <FromDiscord> <Rika> “nim c file” generates a binary
[17:28:33] <FromDiscord> <Shiba> iam interested in game dev and i found the nico framework
[17:31:49] <FromDiscord> <Shiba> and since most luaJit frameworks are made for games and not software even that they have "ffi" , i decided to work with another language with another framework that allows to make games and software at the same time , i will need some time to learn the language , can anyone give some youtube videos i can watch to start learning😀
[17:33:20] <FromDiscord> <TryAngle> that is the main issue with nim in my opinion... the lack of documentation, media etc. :c
[17:35:16] <FromDiscord> <TryAngle> https://nim-lang.org/docs/tut1.html↵https://nim-lang.org/docs/manual.html↵https://nim-lang.org/docs/lib.html
[17:40:23] <FromDiscord> <Solitude> In reply to @Shiba "and since most luaJit": https://narimiran.github.io/nim-basics/
[17:42:55] <NimEventer> New thread by Gcao: Nim 1.6.2 does not compile on MacOS BigSur 11.6.1, see https://forum.nim-lang.org/t/8743
[17:44:11] <FromDiscord> <Shiba> nim syntax higlighting package for sublime?
[17:44:17] <FromDiscord> <Shiba> (edit) "higlighting" => "highlighting"
[17:49:34] <FromDiscord> <Zajt> How can I define a function that doesn't return anything? Can I put void after `proc main(): ` this?
[17:50:00] <FromDiscord> <enthus1ast> proc main() =
[17:50:27] <FromDiscord> <Zajt> thanks!
[17:52:17] <FromDiscord> <Zajt> sent a code paste, see https://play.nim-lang.org/#ix=3Jz9
[17:54:01] <FromDiscord> <enthus1ast> no this means they must be declared at the most left tab intentation level
[17:54:48] <FromDiscord> <enthus1ast> idn why this complains here, maybe change the NimMain name
[17:54:51] <FromDiscord> <enthus1ast> idk
[17:56:12] <FromDiscord> <Zajt>  https://media.discordapp.net/attachments/371759389889003532/924669433333559346/unknown.png
[17:56:21] <FromDiscord> <Zajt> i think it complains about line 134 here
[17:56:40] <FromDiscord> <enthus1ast> yes
[17:56:44] <FromDiscord> <enthus1ast> toByteSeq\
[17:56:46] <FromDiscord> <enthus1ast> is not allowed
[17:56:52] <FromDiscord> <enthus1ast> must be toByteSeq
[17:56:56] <FromDiscord> <enthus1ast> withouth export marker
[17:57:24] <FromDiscord> <Zajt> but it worked with this code when I had `when isMainModule:` instead of `proc main() =` on line 132 there
[17:57:33] *** Joins: arkurious (~arkurious@user/arkurious)
[17:57:38] <FromDiscord> <Solitude> when doesnt introduce new scope
[17:58:04] <FromDiscord> <Zajt> ah I see, now it compiled! thanks
[18:01:05] <FromDiscord> <MD> In reply to @Rika "Startup time is not": What did you mean by "Probably on the GUI but I don’t know too much on that"?
[18:01:24] <FromDiscord> <MD> (edit) "What" => "Thanks! And what"
[18:06:35] *** Joins: pro (~pro@user/pro)
[18:09:02] *** Quits: pro (~pro@user/pro) (Client Quit)
[18:09:30] *** Joins: pro (~pro@user/pro)
[18:12:21] <pro> what is lua lol
[18:14:53] <madprops> i use lua to program my window manager 
[18:15:29] <madprops> but i'd rather use something else tbh
[18:16:28] <FromDiscord> <Rika> In reply to @MD "Thanks! And what did": Probably exists fitting your criteria but I am not familiar
[18:16:36] <FromDiscord> <Rika> In reply to @madprops "i use lua to": Why?
[18:16:51] <madprops> because that's what awesomewm uses for configuration/extension
[18:17:11] <FromDiscord> <Rika> I think I replied to the wrong one
[18:17:17] <FromDiscord> <Rika> Why on the you would rather another
[18:17:32] <madprops> the language is very barebones
[18:17:52] <madprops> lots of basic things have to be implemented
[18:24:23] <FromDiscord> <enthus1ast> lua has some interesting constructs, but i would rather use a typed language even for configuration
[18:25:22] <FromDiscord> <enthus1ast> would be interesting to have a dynamic nim configuration (nimscript) that could also be compiled, for default configuration and super fast startup times
[18:25:39] <FromDiscord> <enthus1ast> for a wm i mean
[18:26:33] <FromDiscord> <enthus1ast> the nimscript startup times unfortunately are not THAT great currently
[18:26:56] <FromDiscord> <enthus1ast> think lua can startup much quicker than the nim compiler
[18:41:11] *** Quits: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 250 seconds)
[18:43:06] *** Joins: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[18:46:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:46:54] *** Joins: Colt (~Colt@user/colt)
[18:49:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:50:19] *** Joins: Colt (~Colt@user/colt)
[18:56:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:56:30] *** Joins: Colt (~Colt@user/colt)
[18:58:14] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Jzz
[19:01:59] <FromDiscord> <Rika> How would that work
[19:02:57] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3JzB
[19:03:07] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[19:03:17] *** Quits: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 240 seconds)
[19:05:06] *** Joins: Colt (~Colt@user/colt)
[19:05:11] <FromDiscord> <el__maco> it doesn't matter if the buffer is in heap. But avoiding constant malloc matters. I don't know for a fact that Nim allocates, I should probably see the C source and see if it does, but I suspect it would
[19:05:17] *** Joins: rp2 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[19:05:56] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[19:15:37] <FromDiscord> <Shiba> ok so compiler said that i dont have a compatible mingw installation and it's started a download
[19:27:28] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3JzF
[19:27:43] <FromDiscord> <el__maco> rawNewString almost certainly allocates. But I don't see where it gets freed
[19:28:09] <FromDiscord> <el__maco> there's popFrame() but that only updates a frame pointer of some kind
[19:43:57] <FromDiscord> <Yardanico> sent a code paste, see https://paste.rs/Dvd
[19:44:02] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3JzI" => "https://play.nim-lang.org/#ix=3JzJ"
[19:44:10] <FromDiscord> <Yardanico> well it still uses strings
[19:44:52] <FromDiscord> <Yardanico> also for a cleaner C code you can compile with `-d:danger --gc:arc`
[19:44:59] <FromDiscord> <Yardanico> and also, nim uses its own allocator by default
[19:45:10] <FromDiscord> <Yardanico> so even if it's doing rawNewString it might actually not allocate _new memory_, but I'm not sure
[19:46:09] <FromDiscord> <Solitude> In reply to @Yardanico "maybe take a look": what the hell is that
[19:46:15] <FromDiscord> <Yardanico> In reply to @Solitude "what the hell is": dont ask me
[19:46:42] <FromDiscord> <Solitude> waiting for seqbasics
[19:46:46] <FromDiscord> <Solitude> jsonbasics
[19:46:55] <FromDiscord> <Yardanico> return to basics
[19:47:56] <FromDiscord> <Yardanico> In reply to @Solitude "what the hell is": have you forgot about https://nim-lang.org/docs/strmisc.html
[19:49:12] <FromDiscord> <Yardanico> also https://nim-lang.org/docs/cstrutils.html
[19:50:03] <FromDiscord> <Solitude> In reply to @Yardanico "have you forgot about": forsenInsane
[19:50:20] <FromDiscord> <Yardanico> In reply to @Solitude "forsenInsane":  https://media.discordapp.net/attachments/371759389889003532/924698152601264128/unknown.png
[19:50:27] <FromDiscord> <Yardanico> :forsenNOIDONTTHINKSO:
[19:57:26] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3JzN
[19:57:33] <FromDiscord> <Yardanico> yes
[19:57:35] <FromDiscord> <Yardanico> use setLen
[19:57:41] <FromDiscord> <el__maco> also its not pretty, I wonder if I got this right
[19:57:42] <FromDiscord> <Yardanico> or create a string with  `newStringOfCap`
[19:57:53] <FromDiscord> <Yardanico> and then you can just use normal `add` really
[19:58:13] <FromDiscord> <el__maco> that sounds kinda better tbh
[19:58:29] <FromDiscord> <Yardanico> also @elmaco you can avoid temp allocations when adding ints to the string
[19:58:59] <FromDiscord> <Yardanico> https://nim-lang.org/docs/digitsutils.html#addInt%2Cstring%2Cint64 it's exported by system so always available
[19:59:22] <FromDiscord> <Yardanico> just don't forget `echo` itself allocates too
[19:59:22] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JzO
[19:59:37] <FromDiscord> <el__maco> well, echo is just debug
[19:59:56] <FromDiscord> <el__maco> that can allocate if it feels like it
[20:00:14] <FromDiscord> <Yardanico> and I think it's a bit better to use char instead of string if the string is len 1
[20:00:24] <FromDiscord> <Yardanico> if you want to add it to another string
[20:01:11] <FromDiscord> <krisppurg> sent a long message, see http://ix.io/3JzP
[20:01:38] <FromDiscord> <Yardanico> of 19 bytes
[20:01:39] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JzQ
[20:01:42] <FromDiscord> <Solitude> In reply to @krisppurg "<@!107140179025735680> heya uh whenever": jsony treats tuples as arrays
[20:02:33] <FromDiscord> <krisppurg> how come?
[20:03:50] <FromDiscord> <krisppurg> it expects an array, but it gets an object instead.↵↵jsony should treat objects as objects but also treat tuples as objects as well
[20:04:28] <FromDiscord> <Solitude> open issue, treeform thought otherwise.
[20:04:41] <FromDiscord> <Yardanico> In reply to @Solitude "open issue, treeform thought": :forsenDespair:
[20:05:08] <FromDiscord> <Solitude> i would go for compromise where named tuples are treated as objects, and unnamed - as arrays.
[20:05:49] <FromDiscord> <Yardanico> can you actually distinguish between named and unnamed in code? i guess if you check that the field is named "field1" xD?
[20:06:27] <FromDiscord> <Solitude> https://nim-lang.org/docs/typetraits.html#isNamedTuple%2Ctypedesc
[20:06:32] <FromDiscord> <Solitude> amazing
[20:06:43] <FromDiscord> <Yardanico> wow
[20:06:48] <FromDiscord> <Yardanico> nim is usable?!
[20:07:55] *** Joins: Colt (~Colt@user/colt)
[20:09:58] <FromDiscord> <krisppurg> In reply to @Solitude "i would go for": yeah basically
[20:10:33] <FromDiscord> <Shiba> how do i make objects that has an update functions and variables
[20:10:46] <FromDiscord> <krisppurg> In reply to @Solitude "https://nim-lang.org/docs/typetraits.html#isNamedTu": didnt know that was there. Deffo would come in handy
[20:10:55] <FromDiscord> <Yardanico> In reply to @Shiba "how do i make": not sure what you mean. If you want objects to "have variables", then you add fields to your object
[20:10:59] <FromDiscord> <Yardanico> nim doesn't really have a notion of classes
[20:11:12] <FromDiscord> <Yardanico> but you can easily replicate what you would do with classes in other languages in Nim without them
[20:11:26] <FromDiscord> <Shiba> In reply to @Yardanico "nim doesn't really have": so like i need to update seprately
[20:11:42] <FromDiscord> <Shiba> (edit) "In reply to @Yardanico "nim doesn't really have": so like i need to update ... seprately" 03added "them"
[20:12:13] <FromDiscord> <Yardanico> In reply to @Shiba "so like i need": can you show what you want with code maybe?
[20:12:34] <FromDiscord> <Yardanico> if you want to have functions that update your object, you can just write them normally
[20:15:08] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JzU
[20:26:18] <FromDiscord> <krisppurg> In reply to @krisppurg "<@!107140179025735680> heya uh whenever": also minimal example to reproduce this error message↵↵https://play.nim-lang.org/#ix=3JzX
[20:29:33] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[20:40:29] <FromDiscord> <treeform> In reply to @krisppurg "also minimal example to": I treat tuples as arrays, but maybe if tuple has named fields I should read it as an object. To get around this limitation, you can create a hook.
[20:41:26] <FromDiscord> <krisppurg> well I dont want to create a hook for every single possible tuple
[20:42:51] <FromDiscord> <Solitude> In reply to @treeform "I treat tuples as": how do you override default hook?
[20:43:19] *** Joins: neceve (~quassel@2.26.93.228)
[20:56:17] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 252 seconds)
[20:59:09] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[21:01:35] <FromDiscord> <treeform> In reply to @krisppurg "well I dont want": I don't support named tuples at the moment, it's probably not that hard to add support.
[21:01:54] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3JAc
[21:02:23] <FromDiscord> <treeform> If that works great.
[21:08:38] *** Joins: xet7 (~xet7@user/xet7)
[21:32:31] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAl
[21:32:47] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JAl" => "https://play.nim-lang.org/#ix=3JAm"
[21:34:04] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JAm" => "https://play.nim-lang.org/#ix=3JAo"
[21:34:08] <FromDiscord> <Solitude> In reply to @TryAngle ". anybody knows now?": yes, just `template impl(p: untyped): untyped =` and use p in place of required proc
[21:34:29] <FromDiscord> <treeform> In reply to @krisppurg "Seems like I sort": I don't think its correct to parse every named tuple with fields, my code for instance relies on pacing named tuple as array. It probably should check and parse it as array if it sees [ and { if it sees as object.
[21:34:43] <FromDiscord> <treeform> (edit) "pacing" => "parsing"
[21:36:09] <FromDiscord> <Solitude> In reply to @treeform "I don't think its": since its very debatable what behaviour should be default, i think that hook needs to be moved to other module and imported as needed
[21:36:43] <FromDiscord> <krisppurg> ^^
[21:36:57] <FromDiscord> <krisppurg> (edit) "^^ ... " 03added "i agree"
[21:40:55] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAv
[21:41:09] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JAv" => "https://play.nim-lang.org/#ix=3JAw"
[21:42:48] <FromDiscord> <Solitude> you cant use SomeFloat like that
[21:42:58] <FromDiscord> <Solitude> in newSeq
[21:43:05] <FromDiscord> <Solitude> SomeFloat is typeclass, not a concrete type
[21:43:31] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3JAz
[21:43:33] <FromDiscord> <TryAngle> do I do p[T: SomeFloat](..)↵newSeq[T]()?
[21:43:44] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAA
[21:43:49] <FromDiscord> <TryAngle> what is the difference now?
[21:44:03] <FromDiscord> <TryAngle> does the T in the second be treated as a concrete type ?
[21:44:14] <FromDiscord> <TryAngle> (edit) "?" => "instead of a typeclass?"
[21:44:25] <FromDiscord> <Solitude> when you instantiate a generic proc T will be resolved to a concrete type
[21:45:07] <FromDiscord> <TryAngle> but why does it work "normal" when I don't put it in a template when using SomeFoat without a T ?
[21:45:27] <FromDiscord> <Solitude> it doesnt
[21:45:38] <FromDiscord> <treeform> In reply to @Solitude "since its very debatable": Not sure what you mean with extra imports, but I think jsony should work out of the "box" for most people. I don't want to make people think.
[21:45:51] <FromDiscord> <treeform> I just want to give them a 1 line solution that should work in most cases
[21:45:53] <FromDiscord> <TryAngle> In reply to @Solitude "it doesnt": it does lol, so its a bug that it wokrs?
[21:46:03] <FromDiscord> <Solitude> give a snippet wehre it works
[21:46:34] <FromDiscord> <Solitude> In reply to @treeform "I just want to": but make solution painful in rare cases?
[21:47:18] <FromDiscord> <Solitude> In reply to @treeform "I just want to": you can still make it as easy to use if you split it up into modules, and reexport all of them in `jsony.nim`. whoever needs extra customization will mix and match component modules
[21:48:10] <FromDiscord> <Solitude> !eval echo newSeq[SomeFloat](1)
[21:48:13] <NimBot> Compile failed: /playground/nim/lib/system.nim(643, 14) Error: cannot instantiate: 'T'
[21:51:50] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAH
[21:51:59] <FromDiscord> <Solitude> what
[21:52:10] <FromDiscord> <Solitude> dont bother explaining
[21:53:09] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/wwe
[21:59:30] <FromDiscord> <Solitude> In reply to @TryAngle "I mean that is": thats broken
[22:00:42] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAJ
[22:01:25] <FromDiscord> <Solitude> compiles for me
[22:04:47] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JAM
[22:05:08] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JAM" => "https://play.nim-lang.org/#ix=3JAN"
[22:08:37] <FromDiscord> <Solitude> what is your nim version\
[22:08:44] <FromDiscord> <TryAngle> 1.6.2
[22:10:18] <FromDiscord> <Solitude> works on playground https://play.nim-lang.org/#ix=3JAS
[22:12:46] <FromDiscord> <Yardanico> In reply to @Solitude "works on playground https://play.nim-lang.org/#ix=3": playground runs fake nim
[22:12:53] <FromDiscord> <Yardanico> /s
[22:49:52] <FromDiscord> <planetis> is there a way to do the same as .bycopy pragma directly in the function definition?
[22:50:24] <FromDiscord> <planetis> I want to bypass nim's way of parameter passing but only for some functions
[22:54:44] <FromDiscord> <enthus1ast> how can i tell nimble to always install the newest version? ↵When useing this syntax\:↵↵requires "https://github.com/enthus1ast/nimFsm.git"
[22:55:04] <FromDiscord> <enthus1ast> i want to basically ignore the artificial versioning and just install the newest
[22:55:19] <FromDiscord> <Solitude> `#HEAD`
[22:55:52] <FromDiscord> <Yardanico> :forsenHead:
[22:56:26] <FromDiscord> <enthus1ast> mhh lets try
[22:56:38] <FromDiscord> <enthus1ast> i thought i have done this already
[22:58:16] <FromDiscord> <Solitude> i hope its for your personal use, because its a pain in the ass for other users to have #HEAD'ed dependency
[22:58:26] <FromDiscord> <enthus1ast> yes
[22:58:33] <FromDiscord> <enthus1ast> personal use
[22:58:54] <FromDiscord> <enthus1ast> i always fight with this nimble syntax
[22:59:01] <FromDiscord> <enthus1ast> every time
[22:59:09] <FromDiscord> <enthus1ast> it does not what i want
[23:17:15] <FromDiscord> <planetis> requires "x@#head"
[23:18:27] <FromDiscord> <Yardanico> In reply to @planetis "requires "x@#head"": AFAIK @# when using nimble on CLI, no?
[23:18:29] <FromDiscord> <Yardanico> and # is for requires
[23:18:32] <FromDiscord> <Yardanico> or is it the other way?
[23:25:40] <FromDiscord> <frankzig> Is there a bucket queue impl for Nim?
[23:44:00] <FromDiscord> <enthus1ast> on the cli afaik
[23:44:14] <FromDiscord> <enthus1ast> und just #head when in nimble file
[23:50:34] <FromDiscord> <sOkam!> How does nim code interact with the original code a binding exactly?
[23:51:52] <FromDiscord> <sOkam!> @ElegantBeef Started the gdextension-nim thing. Having trouble understanding the architecture of the binding generator, and why the mentioned macros. I get that macros create a desired AST, I don't get why (in my total noob understanding) "a bunch of procedures" will need custom restructuring of the AST
[23:52:18] <FromDiscord> <sOkam!> (edit) "How does nim code interact with the original code ... a" 03added "of"
[23:53:02] <FromDiscord> <sOkam!> (edit) "@ElegantBeef Started the gdextension-nim thing. Having trouble understanding the architecture of the binding generator, and why the mentioned macros. I get that macros create a desired AST, ... I" 03added "but"
[23:54:16] <FromDiscord> <sOkam!> Why is the generated code not gonna be compliant to the default AST? 🤔
