[00:03:17] *** Joins: cjb (~cjb@user/cjb)
[00:13:06] <White_Flame> theothornhill: compile SBCL from source you mean?
[00:13:46] <White_Flame> my notes are `sh. make.sh --prefix=~/sbcl --fancy --xc-host=~/sbcl/bin/sbcl` then `sh install.sh`
[00:14:04] <White_Flame> the xc-host is an existing lisp to use to compile sbcl, it can be apt installed, like CLISP or whatever
[00:14:06] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[00:14:47] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:15:05] <White_Flame> of course, I have ~/sbcl/bin in my $PATH, you might want to omit a prefix and just use the default
[00:15:30] <White_Flame> I did to avoid colliding with any apt installed sbcl
[00:15:50] <White_Flame> s/did/used my own prefix/
[00:16:49] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[00:18:14] <theothornhill> White_Flame: Thanks! I tried doing something similar, but I couldn't get it to work.  Removing sbcl and stumpwm and installing from apt seems to be the only answer, at least for preserving my sanity... It's a shame is such an old version though.
[00:18:44] <White_Flame> yeah, wipe all trace of SBCL first, and use CLISP as the xc-host
[00:18:49] <White_Flame> that ensures no weird leakage
[00:19:16] <White_Flame> you really don't want to use old SBCL versions with quicklisp and any FFI sort of utilities that might reach into internals, even something like SLIME
[00:19:38] *** Joins: rgherdt_ (~rgherdt@83.236.30.76)
[00:21:06] <theothornhill> Yeah. My guess is that's what happens.  I might just go back to a different linux though, where things are simpler :)
[00:21:10] *** Quits: rgherdt_ (~rgherdt@83.236.30.76) (Read error: Connection reset by peer)
[00:21:38] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 256 seconds)
[00:21:39] *** Joins: rgherdt_ (~rgherdt@83.236.30.76)
[00:22:39] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Read error: Connection reset by peer)
[00:22:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:34:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:43:24] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 272 seconds)
[00:53:18] <dbotton> is there a way to add a method to a specific already created object not to its class? I know that may violate some terms used by CL but not sure how to express it elsewise
[00:54:21] <dbotton> I am looking to add an :after method to detect changes to a slot to be specific
[00:55:46] <Xach> dbotton: I don't think there's a conventional way. one approach that springs to mind is to have an :after method that checks for the target object(s) before acting.
[00:57:18] *** Joins: phantomics (~phantomic@71-218-115-230.hlrn.qwest.net)
[00:59:22] <dbotton> can there be multiple :after methods?
[01:01:01] <etimmons> You can add an :after method that's eql specialized on the object. No idea how performant that'd be if you add a lot of them, though.
[01:02:51] <Xach> Yes - I was mistaken and was overlooking eql methods for this use-case.
[01:03:04] <dbotton> interesting, what does that look like code wise?
[01:03:18] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[01:03:36] <Xach> I was thinking about in the context of a source file, where you would be less likely to have an actual object in an eql specializer.
[01:04:02] <etimmons> (defmethod foo :after ((bar (eql baz))) (print "FOO"))
[01:04:07] <Xach> "object" as in standard instance, not in the generic sense.
[01:05:32] <dbotton> so baz is an instance of bar?
[01:06:29] <etimmons> In that example bar is meaningless (just the name of the variable in the method body). baz is an instance of whatever class you want
[01:06:34] <Xach> dbotton: not necessarily. the syntax binds BAR, which must be EQL to whatever BAZ evaluates to when the method is defined.
[01:06:44] *** Quits: pve (~pve@188-67-188-88.bb.dnainternet.fi) (Quit: leaving)
[01:10:07] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:13:02] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[01:14:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:15:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:15:41] *** Joins: parjanya (~esb@2804:14c:1ad:9351:7fa0:acec:9caf:ed67)
[01:18:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[01:19:12] <dbotton> creating a defgeneric for an accessor is done as a setf?
[01:20:09] <jcowan> wait, why can't spm look up his functions in a table of functions?
[01:20:42] <jcowan> ((foo . #'foo) (bar . #'bar) ...)
[01:21:47] <Xach> dbotton: not really - an accessor would be two pieces, (defgeneric foo (object) ...) and (defgeneric (setf foo) (new-value object) ...), sort of.
[01:22:09] <Xach> slot option ":accessor foo" defines both methods for you
[01:22:31] <Xach> you can split the naming up by specifying :reader and :writer separately
[01:24:17] <dbotton> ok, so I will have to add my :after on the the setf method if trying to capture a value change to the slot
[01:25:45] <dbotton> unless slot-value has some sort of under the covers hook
[01:26:14] <Xach> here's a MOP function slot-value-using-class, but i don't know much about it.
[01:26:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:36:32] *** Quits: wacki (~wacki@87.122.91.151) (Quit: Leaving.)
[01:38:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:40:43] *** Joins: gaqwas (~john@dynamic-095-115-001-226.95.115.pool.telefonica.de)
[01:46:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[01:46:56] *** Quits: gaqwas (~john@dynamic-095-115-001-226.95.115.pool.telefonica.de) (Quit: Leaving)
[01:47:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:47:43] <Bike> usually the interface you export is accessor functions rather than slot names, so just putting your hooks on the accessors is ok
[01:50:18] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:50:36] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[01:56:10] *** Joins: kurth4cker (~user@95.2.8.12)
[01:56:11] *** Quits: rgherdt_ (~rgherdt@83.236.30.76) (Read error: Connection reset by peer)
[01:56:24] *** Joins: rgherdt_ (~rgherdt@83.236.30.76)
[02:00:04] <dbotton> I can live with that
[02:00:33] <dbotton> was looking for easy ways out
[02:00:45] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[02:02:11] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[02:07:42] *** Quits: kurth4cker (~user@95.2.8.12) (Quit: ERC (IRC client for Emacs 27.2))
[02:09:32] *** Quits: rgherdt_ (~rgherdt@83.236.30.76) (Ping timeout: 272 seconds)
[02:11:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:12:11] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:14:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:16:46] *** mepy_ is now known as mepy
[02:24:06] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[02:26:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:39:54] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:40:52] <saturn2> spm: it sounds like what you originally wanted was simply a hash table with strings as keys rather than symbols
[02:43:22] <saturn2> interning symbols at run time is usually not a good idea
[02:44:43] <dbotton> https://www.irccloud.com/pastebin/lGJcWMTO/
[02:45:32] <dbotton> with that changes to a slot become actionable
[02:46:11] <dbotton> The idea is that I want to be able to setup direct links between CLOG objects and Lisp objects
[02:46:45] <dbotton> you change the GUI and the object changed you changed the Lisp object and the CLOG object updates
[02:47:56] <dbotton> sorry cross conversation :)
[02:48:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:50:42] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 272 seconds)
[03:01:53] *** Quits: hobo (~hobo@69.218.33.204) (Quit: ZNC 1.8.2 - https://znc.in)
[03:03:35] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[03:08:02] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by fuukk!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[03:08:19] *** Joins: xsperry (~xs@user/xsperry)
[03:08:44] *** Quits: Alfr (~Alfr@user/alfr) (Killed (copper.libera.chat (Nickname regained by services)))
[03:08:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[03:08:49] *** Joins: Alfr (~Alfr@user/alfr)
[03:09:22] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:09:35] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 250 seconds)
[03:09:35] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 250 seconds)
[03:10:44] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[03:10:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:21:13] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[03:22:45] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[03:37:39] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:08:08] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Read error: Connection reset by peer)
[04:08:49] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[04:10:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:13:00] *** Joins: pillton (~user@14-202-58-224.tpgi.com.au)
[04:14:50] *** Joins: igemnace (~ian@user/igemnace)
[04:20:59] *** Joins: jealousmonk (~user@user/jealousmonk)
[04:32:47] <dbotton> I am so in love with lisp.... it is so beyond to be update data structures and seeing your gui/web page change before your eyes or play with the gui/page and see the data change....
[04:34:12] <AeroNotix> sounds like react tbf
[04:35:38] <dbotton> when you can compile react, run it on the server side and see your changes on the client let me know :)
[04:40:47] <pl> dbotton: what you mention reminds me of so called "Naked Object" paradigm (https://en.wikipedia.org/wiki/Naked_objects)
[04:43:27] <dbotton> to a large degree that is the case
[04:43:50] <dbotton> that is also the case with presentations in CLIM
[04:44:25] <dbotton> at least what I gather for it
[04:44:30] <dbotton> of it
[04:45:28] <AeroNotix> dbotton: different feature altogether
[04:45:37] <AeroNotix> I'm aware of the existing projects CLOG models itself after
[04:45:50] <AeroNotix> just the gui/datastructure mirroring sounded similar to react
[04:46:02] <White_Flame> dbotton: yeah, I did the same thing back in the Flash days.  It confused the customers ;)
[04:46:16] <White_Flame> we always got "yeah, well that's impossible to do" when we showed people stuff in lisp
[04:46:23] <White_Flame> really weird
[04:48:24] <White_Flame> it's undeniable cool stuff to do
[04:49:04] <dbotton> AeroNotix different feature CLIM and lisp object to gui linking?
[04:53:10] <dbotton> it is very possible I am not fully understanding presentations
[04:55:28] <dbotton> I admit I am having a tough time seeing its usefulness beyond this aspect of this link
[04:56:46] <dbotton> especially since there is no textual interface to the GUI in GNOGA
[04:57:05] <dbotton> sorry CLOG
[05:01:16] <dbotton> pl my next step with this feature is build forms quickly from data structures either at run time or in advance (which would allow customizing with the builder) so that is even closer to the Naked Objects idea
[05:07:21] <dbotton> anyway back to code, I am having so much fun
[05:20:48] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:26:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:38:13] *** Joins: s-liao27 (~s-liao@101.86.96.21)
[05:38:14] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:38:31] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[05:39:09] *** Joins: xsperry (~xs@user/xsperry)
[05:41:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:44:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:45:31] *** Quits: s-liao27 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:47:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:49:14] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[05:50:55] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[05:51:08] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[05:56:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[06:09:12] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[06:09:37] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[06:10:01] *** lisper29 is now known as Guest8958
[06:10:07] *** Joins: occ (~occ@user/occ)
[06:18:08] *** Quits: molson_ (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[06:20:55] <dbotton> Looked back AeroNotix I was not saying anything harsh or strong regarding content about react just meant just joking lisp is cooler
[06:21:14] <AeroNotix> k
[06:21:18] <AeroNotix> don't care
[06:21:41] <AeroNotix> didn't even think that
[06:22:17] <dbotton> Text can’t tell much :)
[06:22:54] <dbotton> What did you mean about different features?
[06:23:11] <AeroNotix> browser/backend being interlinked
[06:23:34] <AeroNotix> i just meant the functional model is similar to how react does things
[06:24:03] <dbotton> Got it. Sorry thought then you were talking about clim
[06:24:24] <dbotton> Trying to understand how presentations is useful
[06:24:35] <AeroNotix> not familiar
[06:24:42] <dbotton> To either include or something similar
[06:25:12] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[06:25:56] <dbotton> So far the data gui link make sense and I like. The clicking of various graphic representations as input not understanding
[06:25:59] <AeroNotix> If you're making a pheonix/new rails clone, I'd err on the side of not introducing anything straying too far from that formula
[06:26:15] <AeroNotix> at least not on an initial release when you're trying to market it around
[06:26:18] <dbotton> Not what I am creating
[06:26:21] <AeroNotix> Seems to be
[06:27:31] <dbotton> It is modeled on Gnoga my Ada framework which is modeled on gwindows my Ada framework for windows so about 20 years old
[06:27:35] <AeroNotix> at least the features you're discussing above
[06:28:13] <dbotton> The basic idea is program the web in the style of a gui
[06:28:37] <AeroNotix> dbotton: I'm not sure that answers as many questions as you think
[06:28:42] <AeroNotix> there are myriad ways to program a 'gui'
[06:29:30] <dbotton> I know also because the model of web programming is also very different with kludges to maintain state
[06:30:03] <dbotton> The lower level of clog is just a widget kit
[06:30:38] <dbotton> What I am working on now are offering additional of the myriads of ways
[06:30:41] <dbotton> As you say
[06:31:02] <AeroNotix> alright... so it's xkcd 927 then
[06:31:27] <AeroNotix> any way good luck, have fun etc
[06:32:44] <dbotton> Good advice regarding presenting a single model though
[06:33:16] <dbotton> I’ll give it more thought
[06:33:39] <dbotton> I generally tend things to organically grow
[06:34:07] <dbotton> The builder is likely to be the main push though
[06:34:42] <dbotton> And was impetus for clog to start with
[06:41:40] *** Joins: notzmv (~zmv@user/notzmv)
[06:54:24] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[06:54:41] <pillton> Is it #2A((1) (2)) or #2A ((1) (2))? SLIME wants to insert the space and I am wondering if that is "right".
[06:55:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[06:56:17] <pillton> clhs 2.4.8.12 uses no space.
[06:56:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:57:15] *** Quits: Guest8958 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[07:02:08] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[07:05:05] <moon-child> I would not use a space.  But do whatever you like
[07:09:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:19:50] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[07:25:44] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:30:18] <beach> Good morning everyone!
[07:32:45] <semz> good morning
[07:35:52] <moon-child> |3b|: with cl-opengl, how do I actually check if a shader compiled successfully?
[07:36:39] <beach> |3b|: Thank you.  I'll experiment with that idea later today.
[07:37:07] <moon-child> I see a  (defglextfun ("glGetShaderiv" get-shader-iv)),  but that seems to be gles2-related; I do not have such a function defined
[07:39:58] <moon-child> oh, I see, I can use (gl:get-shader x :compile-status)
[07:59:17] <beach> In case anyone is interested.  We (me and my (admittedly small) family) will arrive in Porto on Saturday March 19 and depart a week later, Saturday March 26.  We will stay at Hotel ibis Porto São João which is near the conference site.  We stay that long in order to get direct flights Bordeaux <-> Porto.
[08:01:51] <beach> If you bring your copy of Lisp in Small Pieces, the translator may sign it for you.  I doubt the author will be there.
[08:02:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[08:09:28] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[08:12:05] *** Joins: semz_ (~semz@user/semz)
[08:14:53] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:17:08] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[08:21:22] *** semz_ is now known as semz
[08:24:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:28:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:29:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:33:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:41:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:43:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:51:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:51:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[08:53:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:53:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:00:23] <pillton> I really enjoyed that book. I see he has retired now.
[09:01:23] <beach> Yeah.  He was an excellent teacher and an excellent researcher.
[09:08:33] <pillton> Sigh. So much to read. Alas, I can't find the pause time button.
[09:09:06] <beach> I know the problem.
[09:12:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:19:47] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[09:21:13] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[09:21:46] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: pillton (~user@14-202-58-224.tpgi.com.au) (*.net *.split)
[09:21:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[09:21:46] *** Quits: karlosz (~karlosz@47.151.136.69) (*.net *.split)
[09:21:46] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (*.net *.split)
[09:21:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:21:46] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (*.net *.split)
[09:21:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (*.net *.split)
[09:21:46] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[09:21:46] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:21:46] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[09:21:46] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[09:21:46] *** Quits: gpiero_ (~quassel@camale.rm-rf.it) (*.net *.split)
[09:21:46] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[09:21:46] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[09:21:46] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:21:46] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: froggey (~froggey@li1514-95.members.linode.com) (*.net *.split)
[09:21:46] *** Quits: stack1 (~stack@ctrl-c.club) (*.net *.split)
[09:21:46] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:21:46] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[09:21:46] *** Quits: russe (~user@cl-user.org) (*.net *.split)
[09:21:46] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:21:46] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[09:21:46] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[09:21:46] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:22:11] *** Joins: stylewarning (sid241636@2a03:5180:f:1::3:afe4)
[09:22:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:22:24] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:22:24] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[09:22:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:22:24] *** Joins: pillton (~user@14-202-58-224.tpgi.com.au)
[09:22:24] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[09:22:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[09:22:24] *** Joins: psf (~pi@206.55.172.18)
[09:22:24] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:22:24] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[09:22:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[09:22:24] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[09:22:24] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:22:24] *** Joins: materialfuture (~materialf@149.248.8.187)
[09:22:24] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[09:22:24] *** Joins: TMA (~tma@twin.jikos.cz)
[09:22:24] *** Joins: les_ (~whome@user/les)
[09:22:24] *** Joins: russe (~user@cl-user.org)
[09:22:24] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[09:22:24] *** Joins: danieli (~danieli@user/danieli)
[09:22:24] *** Joins: stack1 (~stack@ctrl-c.club)
[09:22:24] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[09:22:24] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[09:22:24] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:22:24] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[09:22:24] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[09:22:24] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[09:23:05] *** Quits: hirez (~hirez@104.128.237.40) (Quit: Later)
[09:24:26] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[09:25:03] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[09:25:03] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[09:25:11] *** Joins: bldr (~bull@185.117.72.168)
[09:26:18] *** Joins: nckx (~nckx@tobias.gr)
[09:26:31] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[09:27:00] *** Joins: hirez (~hirez@104.128.237.40)
[09:28:58] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[09:28:58] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[09:28:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[09:28:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[09:30:18] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:30:19] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[09:30:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:32:00] *** Quits: hirez (~hirez@104.128.237.40) (Quit: Later)
[09:34:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:34:28] *** Joins: silasfox (~sbv@p200300cec714e3004fef0b6ad7c9ac3b.dip0.t-ipconnect.de)
[09:36:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[09:36:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:43:15] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:44:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:44:43] *** Joins: occ (~occ@user/occ)
[09:45:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:48:51] *** Joins: shka (~herr@109.231.0.226)
[09:55:08] *** Joins: hirez (~hirez@104.128.237.40)
[10:05:43] *** Joins: igemnace (~ian@user/igemnace)
[10:12:10] <lisp123w> dbotton: Thanks for the info, sounds good
[10:15:56] <lisp123w> beach: Would you say the Cluffer API is final?
[10:16:13] <lisp123w> https://github.com/robert-strandh/Cluffer/blob/master/Base/packages.lisp
[10:18:55] <beach> lisp123w: Yes, I think so.
[10:20:29] <_death> iirc it needs a way to efficiently erase a buffer
[10:25:12] *** Joins: spiaggia (~user@2a01:cb19:150:3400:4560:cfaa:d471:132)
[10:25:19] <lisp123w> beach: thanks
[10:25:44] <lisp123w> _death: cool, so perhaps something like erase-buffer will get added in the future
[10:26:36] <lisp123w> But for now, I'll just use that as a final list when comparing to LW or other editors I may try ipmlement (UITextField)
[10:26:57] <_death> the way I dealt with it back then was replacing the buffer wholesale
[10:26:58] <spiaggia> It sounds to me like such a thing could be implemented using the existing protocol.
[10:28:19] <_death> spiaggia: maybe I missed an operator?
[10:28:56] <spiaggia> I mean, you can just delete every line.
[10:31:15] <_death> then you need to delete them one by one (glancing at package.lisp I also don't see an operator to delete a line.. just items.. if so, line deletion means deleting item by item..)
[10:31:44] <_death> an erase-buffer would just amount to clrhash or two and be done with it
[10:34:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:36:03] <_death> maybe if it had operations on regions then such primitives wouldn't be needed
[10:36:05] <spiaggia> That's probably not true because of the update protocol.
[10:36:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:40:14] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 260 seconds)
[10:42:09] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[10:43:28] *** Quits: hirez (~hirez@104.128.237.40) (Quit: Later)
[10:44:48] <spiaggia> OK, so let's take this from the beginning.
[10:45:11] <spiaggia> It is not possible to just delete a line, because a time stamp has to be left in the buffer.
[10:45:36] <spiaggia> So the way line is deleted is to remove its contents and the merge it with the previous or the next line.
[10:46:12] <spiaggia> It is possible that the protocol doesn't have an operator for removing every object in a line, and it would be somewhat inefficient to do that item by item.
[10:46:35] <spiaggia> But such an operator can be added and it would be efficient.
[10:47:04] <spiaggia> Then you can add a DELETE-LINE operator that erases the contents and then merges the line.
[10:47:30] <spiaggia> But, I am thinking about the CLIM II specification that distinguishes between the "protocl" and the "API".
[10:48:04] <spiaggia> I think the protocol is the fundamental part, and there could be functions in the API that can (but don't have to) be implemented using the protocol functions
[10:48:23] <spiaggia> So the protocol is stable, but, sure, we might add functions to the API.
[10:49:04] <spiaggia> Feel free to suggest such functions and send me a pull request.  But don't do it without taking the update protocol into account.
[10:50:12] <spiaggia> _death: Does that make sense?
[10:52:15] <_death> I feel that if the protocol doesn't support doing something efficiently, then you'd have a hard time writing an efficient "API" that makes use of it.. but I will need to re-read your protocols (especially the update protocol, which I didn't take into account at the time)
[10:52:25] <spiaggia> And feel free to implement an ERASE-BUFFER, but make sure you leave a time stamp.
[10:52:59] <spiaggia> _death: Recall "(but don't have to)".
[10:53:26] <_death> ok, but ideally you'd want to implement everything in terms of a protocol
[10:53:41] <spiaggia> You can erase the entire buffer in one go as long as you leave a time stamp.
[10:53:50] <spiaggia> No, why do you say that?
[10:54:03] <spiaggia> That's just a way to specify simple semantics.
[10:54:07] *** Joins: wacki (~wacki@87.123.131.41)
[10:54:29] <_death> that is the way I try to design my protocols.. so that I can implement things efficiently without fighting them or going around them
[10:54:36] <spiaggia> And there could be default implementations that use the protocol, but they don't have to be the final ones.
[10:54:47] <spiaggia> *sigh*
[10:55:21] <spiaggia> The update protocol makes it very efficient to erase by item, so even erasing the entire buffer item by item is not going to be very costly
[10:55:28] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:56:43] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[10:56:45] <_death> I hope I don't frustrate you too much :) my personal conclusion is that I need to do more research into the matter
[10:56:48] <spiaggia> You want me to take a PR for ERASE-BUFFER and declare that it's part of the protocol?  Fine  I'll do it
[10:56:55] <Guest74> delete-line seems like something so well named for specifically deleting lies, which seems like something that really should be part of a protocol.
[10:57:43] <spiaggia> You want me to take a PR for DElETE-LINE and declare that it's part of the protocol?  Fine, I'll do it.
[10:58:11] <_death> spiaggia: no, I want to understand your protocols better
[10:58:46] <spiaggia> _death: OK, feel free to ask questions if you have any.
[10:59:02] <_death> and it's true that I didn't benchmark deleting item by item and an alternative
[11:00:02] <spiaggia> I carefully designed the protocol so that (say) deleting a region could be done relatively efficiently by doing it item by item.
[11:01:17] <_death> did you estimate typical bounds for the number of items?
[11:01:23] <spiaggia> But I probably didn't implement the DELETE-REGION API (or "protocol" if you prefer) function.   I also didn't make things like UPCASE-REGION part of the protocol.  I am sure someone will fell that particular operation is so fundamental it must be part of the protocol.
[11:01:56] <spiaggia> _death: The application is text editing, so imagine a big (but not huge) text file.
[11:02:23] *** Joins: occ (~occ@user/occ)
[11:02:24] <spiaggia> I said "text" editing, but in fact the buffer can contain any object.
[11:03:12] <_death> I usually think 100M (but probably 10M is closer in practice)
[11:03:19] <spiaggia> _death: It is my hunch (feel free to do the calculation) that updating a GUI window as a result of any amount of editing in a buffer is going to be more costly than deleting the entire buffer by item.
[11:03:49] <spiaggia> _death: I also don't see you deleting 100MB buffers at typing speed
[11:03:50] <moon-child> on the gpu, rendering is free
[11:04:17] <Guest74> lol, no
[11:04:18] <spiaggia> Who said anything about rendering?
[11:05:25] <_death> spiaggia: well, I used cluffer as a sort of window buffer, that's not always meant to be for interactive use.. so I might want to insert or delete many items at once.. so I had a clear-window operation where I wanted to erase the whole buffer
[11:05:27] <spiaggia> I am talking about invoking the update protocol, incrementally parsing the buffer contents using Eclector, then invoking Cleavir to analyze the new contents, then determine the position and color of every character
[11:05:51] <_death> spiaggia: would you say that I mistook cluffer for my purpose?
[11:06:39] <moon-child> sorry, I am not quite awake, and should probably go to sleep soon
[11:06:51] <spiaggia> _death: Then Cluffer is probably overkill.  It was specifically designed to be an efficient substrate for things like editing Common Lisp code.  It can be used for simpler things of course, but it was not designed for deleting 100MB buffers at typing speed
[11:07:50] <spiaggia> I mean "deleting one 100MB buffer each time you hit a key".
[11:08:31] <_death> spiaggia: there actually was an editor-window that allowed you to do text editing..
[11:09:08] <spiaggia> Where?
[11:10:35] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[11:10:50] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Remote host closed the connection)
[11:11:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[11:12:08] <_death> it was some personal project I didn't publish.. https://adeht.org/casts/tui.html
[11:12:42] <spiaggia> Sure, like I said, it can be used for simple editing tasks.
[11:12:47] *** Joins: aeth (~aeth@user/aeth)
[11:14:34] *** Joins: hirez (~hirez@104.128.237.40)
[11:15:15] <jackdaniel> wasn't cluffer described as a general purpose text-editor buffer?
[11:18:19] <spiaggia> I'll change the description if you like.
[11:18:59] <jackdaniel> I don't mind if you don't, I'm just surprised given the above discussion
[11:19:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:20:07] <jackdaniel> raising doubts is not the same thing as disagreeing - I think that it is an important distinction
[11:22:19] <spiaggia> Let me say this one more time.  Cluffer was carefully designed to be efficient with single-item operations, at least compared to any other operation that would need to be done at typing speed in a typical text editor.
[11:22:20] <spiaggia> But every design has compromises and one such compromise that that you can not reasonably delete one 100MB buffer for each keystroke at typing speed.  Now, if you think that that's what you need, I personally don't think of that as a "general-purpose text-editing" requirement.
[11:23:00] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:24:16] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Client Quit)
[11:24:28] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:24:42] <spiaggia> I mean, "you can not delete a 100MB buffer..." using single-item operations.  But it is trivial to add such an operation.
[11:24:58] <spiaggia> I even think the internal protocols expose the operations to do so.
[11:25:05] <jackdaniel> I've used cluffer and I agree, I was rather referring to "cluffer was designed specifically (...) to edit cl code"
[11:25:28] <jackdaniel> perhaps it was just unfortunate phrasing
[11:25:36] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 272 seconds)
[11:25:52] <jackdaniel> or unfortunate interpretation
[11:25:53] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[11:25:57] <spiaggia> Yes, because any simpler design would not be adapted to that use case.  I didn't use "exclusively"  I said "specifically".
[11:26:22] *** Joins: amb007 (~a_bakic@90.145.204.77.rev.sfr.net)
[11:27:17] <jackdaniel> I see
[11:32:46] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[11:39:20] *** Quits: spiaggia (~user@2a01:cb19:150:3400:4560:cfaa:d471:132) (Quit: ERC (IRC client for Emacs 26.3))
[11:56:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[11:59:47] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[12:01:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:02:28] *** Joins: random-nick (~random-ni@87.116.181.150)
[12:08:13] *** Joins: Krystof (~user@81.174.155.115)
[12:11:12] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[12:11:37] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Remote host closed the connection)
[12:13:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:14:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[12:15:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:17:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[12:18:21] *** Joins: occ (~occ@user/occ)
[12:31:21] *** Joins: treflip (~user@user/treflip)
[12:35:04] *** Quits: treflip (~user@user/treflip) (Client Quit)
[12:43:14] *** Joins: pve (~pve@178-55-215-216.bb.dnainternet.fi)
[12:44:37] <beach> |3b|: Perfect!  Thanks again!
[12:47:38] <beach> |3b|: I will modify it a bit because I need to remove files of type STATIC-FILE and keep only Common Lisp source files.
[12:48:18] *** Joins: rgherdt_ (~rgherdt@83.236.30.76)
[12:49:14] *** Joins: razetime (~quassel@49.207.198.36)
[12:49:47] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:51:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[12:52:47] *** Joins: silasfox14 (~silasfox@62.159.27.1)
[12:53:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:08:12] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[13:10:02] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:14:50] <phoe> beach: I will be available in Porto from Sunday til Wednesday (inclusive), except on Sunday I will want to do an on-site test of the recording/streaming facilities
[13:15:04] <phoe> but that should not take long
[13:16:15] <beach> Great!  Looking forward to seeing you again!
[13:18:19] <phoe> same :D been a long while
[13:18:27] <beach> Yeah.
[13:20:03] *** Joins: occ (~occ@user/occ)
[13:20:52] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Quit: Leaving)
[13:24:50] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[13:32:48] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[13:33:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[13:34:13] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Client Quit)
[13:34:29] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[13:40:57] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:44:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:47:42] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:52:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:57:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:57:56] *** Joins: kurth4cker (~user@95.2.11.84)
[13:59:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:01:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:07:26] *** Quits: frgo (~frgo@p548a3783.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:11:25] <SR-71> Are there any alternatives to StumpWM?
[14:12:19] <beach> There is a window manager called Eclipse, but I don't know how much it has bitrotted.
[14:12:48] <beach> It is not a tiling window manager like StumpWM.  More like an ordinary window manager.
[14:13:17] <SR-71> I wonder, how much work is it creating a windowing system entirely in CL
[14:13:55] <beach> Depends on how much functionality you consider part of the windowing system.
[14:14:28] <SR-71> Display drivers would always be an issue.
[14:16:00] *** Quits: pillton (~user@14-202-58-224.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[14:17:36] *** Quits: razetime (~quassel@49.207.198.36) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:17:40] <beach> If you are interested in stuff like that, I recommend you join #clim.  The people there know quite a lot.
[14:18:11] <SR-71> thanks, i'll check it out
[14:18:13] <beach> SR-71: McCLIM has a framebuffer backend, but I don't know whether you consider that cheating.
[14:21:40] <SR-71> beach:  My GPU drivers would not like that..lol
[14:21:54] <scymtym> for window managers (not entire windowing systems), there is also https://github.com/admich/Doors which is window manager and desktop environment in CL based on McCLIM
[14:23:36] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[14:23:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:24:01] <SR-71> sc
[14:24:11] <SR-71> scymtym: This looks cool.
[14:26:14] <SR-71> I'm currently using i3, I wanted more control over my workflow.
[14:26:59] <SR-71> Checked out xmonad, But lisp has it's own cham.
[14:27:16] <SR-71> *charm
[14:28:32] *** Joins: wmblathe_ (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[14:29:56] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Ping timeout: 245 seconds)
[14:31:52] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:37:15] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:39:24] <beach> Eclipse uses CLX directly.  Using McCLIM seems like a better idea.
[14:39:59] <jackdaniel> frame-manager is the right abstraction to specialize for writing a window manager
[14:40:30] <jackdaniel> then "foreign" windows would be represented as something like foreign-sheet class
[14:41:50] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[14:54:38] *** Quits: parjanya (~esb@2804:14c:1ad:9351:7fa0:acec:9caf:ed67) (Ping timeout: 250 seconds)
[14:55:41] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[14:56:42] *** Joins: ASau (~user@lmpc.drb.insel.de)
[15:15:51] *** Quits: silasfox (~sbv@p200300cec714e3004fef0b6ad7c9ac3b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:16:08] *** Joins: silasfox (~sbv@p548d15d9.dip0.t-ipconnect.de)
[15:17:00] <mfiano> It would be nice if we had a modern book/other resources on using the MOP to build interesting things. AMOP is quite dated, and the technical writing style very poor. I wish we had more books like Let Over Lambda but for the MOP, as it's sort of the other side of the same coin...extending the language beyond syntax.
[15:17:13] <mfiano> I've been looking, but resources seem to be scarce.
[15:17:51] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 256 seconds)
[15:17:58] *** Quits: Brucio-61 (~Brucio-6@ip-094-114-248-079.um31.pools.vodafone-ip.de) ()
[15:18:11] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:18:17] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[15:18:48] <phoe> mfiano: please give me ideas and pointers for CLR2's new MOP chapter
[15:19:16] <mfiano> I have none other than the one you already know about, which is why I wanted to read about the topic.
[15:19:36] <phoe> #commonlisp: please give me ideas and pointers for CLR2's new MOP chapter
[15:21:00] <phoe> I might announce the hunt for MOP recipes on Planet Lisp and Twitter actually
[15:21:04] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:21:10] * phoe adds to TODOs for today
[15:21:28] <jackdaniel> adding new properties to slots like "required", "presentatin-type" and "encrypted"
[15:21:33] <mfiano> I think the topic deserves its own book, assuming there are enough ideas, to complement LOL
[15:22:11] <mfiano> People don't give the MOP enough credit over macros. They both extend the language in amazing ways.
[15:23:10] <jackdaniel> well, macros give you what you write while mop extensions often have ingrained performance penalty
[15:23:27] <jackdaniel> (when the implementation can't assume standard-<something> then it can't perform certain optimizations)
[15:23:51] <mfiano> That's sort of orthogonal though.
[15:24:22] <jackdaniel> to the question why macros are more popular than mop extensions?
[15:24:34] <mfiano> They both extend the language, yet most people are scared of the MOP, or know very little about it.
[15:24:51] <mfiano> I'd like to see it used more, talked about more, written about more...
[15:28:35] <Lycurgus> i think it's prolly more uncertainty about implementation status and history vs ready thing
[15:29:30] <Lycurgus> and there's considering OO obsolete
[15:29:42] <mfiano> Well I know why macros are more popular. For Common Lisp, I think the MOP can solve some remarkable problems, just like macros can. I think they complement an already very flexible language very well.
[15:29:46] <Lycurgus> or just antiquated
[15:29:58] <mfiano> OO is not a very well defined term.
[15:30:07] <Lycurgus> it used to be
[15:30:51] <Lycurgus> e.g. polymorphism, encapsulation, and inheritance
[15:32:10] <mfiano> You'd have a hard time using CL without using one definition of OOP, be it user-defined or builtin classes, or generic functions. Encapsulation means something much different in CL, and inheritance is handled different than most other languages too.
[15:33:11] <Lycurgus> it's the most baroque OO
[15:33:58] <Lycurgus> macros are the scruffy
[15:34:05] <mfiano> Ok
[15:35:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[15:36:26] <mfiano> I dislike the newer attempts at generic functions, like Guile GOOPS, Julia, Rust, and some others. None of these provide a protocol. It's more like arity/type overloading.
[15:36:28] <Lycurgus> i wonder how sopel compares to maiden (common lisp)?
[15:36:43] <Lycurgus> sorry meant that for another channel
[15:36:50] <mfiano> If my protocol accepts a different arity than I specify I would cry.
[15:39:44] <mfiano> It's probably just bias. I can't imagine programming without a strict arity protocol though, and especially not class-centric OOP.
[15:42:16] <phoe> jackdaniel: will do
[15:43:43] <mfiano> Anyway, I was just browsing for my next book to read, after CLCS which I will be starting this week in my free time.
[15:44:41] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[15:56:24] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:03:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[16:04:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:16:11] *** Joins: igemnace (~ian@user/igemnace)
[16:16:30] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:16:41] *** Parts: kurth4cker (~user@95.2.11.84) (ERC (IRC client for Emacs 27.2))
[16:17:59] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[16:19:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:23:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:27:36] *** Joins: treflip (~user@user/treflip)
[16:28:56] <random-nick> I thought GOOPS was pretty similar to CLOS?
[16:28:58] *** Joins: Bike (~Glossina@71.69.170.70)
[16:30:03] <mfiano> random-nick: It has its differences, notably the lack of a strict protocol
[16:32:54] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[16:36:53] *** Quits: mepy (~mepy@37.100.156.164) (Ping timeout: 250 seconds)
[16:37:24] <mfiano> From the Guile manual: "generic function are not obliged to have a fixed number of parameters"
[16:37:54] <Cymew> According to this: http://community.schemewiki.org/?GOOPS it does have a MOP, but maybe it differs.
[16:38:06] <mfiano> That hurts to try to think about what the developers were thinking...
[16:42:16] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 272 seconds)
[16:42:21] <mfiano> Out of many programming languages I have studied, I do not know of one that has strict generic protocol of CL, which surprises me greatly.
[16:43:25] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[16:43:40] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[16:43:48] *** Joins: mepy (~mepy@37.100.156.164)
[16:43:50] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[16:44:32] <mfiano> I'm sure beach has some thoughts as to why a fixed list of required arguments for a a generic function protocol is superior.
[16:44:54] <beach> I can't say I do.  I haven't given it enough thought.
[16:44:58] <mfiano> I certainly couldn't imagine it any other way, for the sake of my sanity.
[16:45:31] <mfiano> Oh, interesting.
[16:45:43] <mfiano> I would have thought you would have strong opinions on this.
[16:46:23] <beach> I consider language design an order of magnitude harder than language implementation.  And implementing Common Lisp is pretty damn hard.
[16:46:48] <mfiano> Ha, yeah.
[16:47:18] <beach> ... which doesn't seem to prevent newbies from having strong opinions on how Common Lisp ought to evolve, of course.
[16:50:52] <mfiano> Well maybe I am alone, but that is one of my favorite things about CL; the semantics of generic functions, particularly their "strictness"
[16:53:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[16:54:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:59:39] <phoe> strictness, as in, only permitting specialization on required arguments?
[17:00:15] <Xach> GFs with different number of required arguments must have different names
[17:00:23] <mfiano> strictness, as in, other generic function implementations allow arity overloading, even those that are modelled after CLOS, such as GOOPS
[17:02:18] *** Joins: parjanya (~esb@2804:14c:1ad:9351:7fa0:acec:9caf:ed67)
[17:05:45] <Bike> functions having different effects with different arities is kind of annoying, but some standard functions do it. - / and file-position
[17:06:05] <Bike> and float, sorta
[17:06:12] <phoe> mfiano: the best/worst thing about that is that this could be implemented in CL, funcallable instances and all that
[17:06:12] <Xach> REQUIRE, sort of
[17:07:38] <mfiano> phoe: I have actually never had a need for funcallable instances. I vote for a practical example in CLR2, if one doesn't already exist.
[17:08:34] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[17:08:48] <phoe> mfiano: not counting GFs, right
[17:08:50] <Bike> i would be interested to see that. none of the uses i've had for them are very general
[17:08:50] <phoe> but sure, I'll do that
[17:09:03] * phoe adds a TODO
[17:09:58] <mfiano> Thanks. I've only seen some contrived examples.
[17:10:19] <phoe> one example I have right now is https://github.com/phoe/petri (which I gotta refresh someday)
[17:10:25] <jackdaniel> one example could be commands - they have typed arguments that ought to be parsed (by some processor), so inquiring the function for these types is convenient if they are stored with the object
[17:10:38] <jackdaniel> mcclim currently has a hash table for that, but it is one of planned improvements
[17:11:17] <phoe> but I have no idea if it is a good example
[17:11:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[17:11:40] <phoe> since in theory I could (defun run (petri-net &key compress ignore-errors) ...) and export RUN
[17:12:07] <phoe> and instead of that the net instances themselves are funcallable
[17:12:40] <Bike> i wonder if you could like... you could have a regex library that makes parser functions (like ppcre), but have the functions store information about the DFA so you can concatenate two parsers to get a parser for the concatenated language, etc
[17:13:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:13:32] <phoe> the issue with funcallable instances are that they solve only one problem - the inability to FUNCALL arbitrary objects
[17:13:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:14:03] <phoe> s/are/is/
[17:14:07] <jackdaniel> I don't understand how that is an issue (and they don't solve it, you still can't funcall an arbitrary object)
[17:14:46] <phoe> jackdaniel: the issue of "how does one use them in practice and why and how useful are they"
[17:15:29] <phoe> and, yes - arbitrary is a wrong word here, more like FUNCALL not being extensible to user-provided objects
[17:15:30] <jackdaniel> so the issue with apl is that I can't use it?
[17:15:34] <jackdaniel> or is it an issue with me?
[17:16:50] <phoe> clarifying again: the issue is that IMO there are few good and convincing examples of how and why to use funcallable instances - GFs are probably the most convincing one, and then there's a question, "okay, and what else?"
[17:16:59] <jackdaniel> another example I have incorporated in a pet project once was a funcallable that checked the status of an external resource and accumulated results
[17:16:59] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:18:20] <phoe> oh, interesting - so funcalling the instance caused some results to get added inside its slots?
[17:18:54] <jackdaniel> yes, and they could have be retrieved with a reader (i.e to display a health chart)
[17:19:12] * phoe takes notes
[17:19:13] <jackdaniel> the object also maintained url, some credentials and such
[17:20:11] <phoe> looking from this point of view, a Petri net also looks OK as a funcallable, since it can call other code itself and accumulate results inside itself
[17:20:47] <phoe> or possibly any other state-machine-esque construct
[17:22:33] <scymtym> emitting code like (funcall (load-time-value (register-funcallable-object (make-instance 'my-funcallable-object))) …) gets pretty close to an inline cache or, more generally, a relatively efficient way of allow subsequent updates to code
[17:22:34] <jackdaniel> another made-up example is having a funcallable that implements a processor running in a separate thread (in a loop) - partial results and messages could be stored in atomically updated slots and the caller could probe them
[17:24:36] <mfiano> Interesting ideas.
[17:26:48] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[17:27:29] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[17:29:24] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[17:29:45] *** Joins: frgo (~frgo@185.66.193.56)
[17:37:55] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[17:38:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:11:00] *** Quits: frgo (~frgo@185.66.193.56) (Ping timeout: 240 seconds)
[18:13:06] <dbotton> phoe there seems to be on net 2 cook books the one on the internet and a book one, the clr2 you are working on is a version 2 of which?
[18:13:54] <jackdaniel> 'common lisp recipes' is a book originally written by Edmund Weitz (you may buy a paper version too)
[18:14:41] <jackdaniel> I believe that phoe works on a second edition (and it is a little confusing to me authorship wise)
[18:15:17] <phoe> dbotton: Common Lisp Recipes, 2nd Edition
[18:15:34] <dbotton> ok, I like that book helped me get started
[18:15:36] <phoe> jackdaniel: Edi Weitz is the author of the first edition, I'm responsible for the writing the second edition
[18:16:16] <jackdaniel> yes, I get that part
[18:16:29] <phoe> what's the confusing part then?
[18:16:57] <jackdaniel> I don't think I've encountered such arrangement that someone else than the original author wrote a second edition of a book
[18:17:16] <jackdaniel> (except this one of course)
[18:17:43] <phoe> it's certainly interesting, speaking from my point of view
[18:17:59] <dbotton> I was offered to write some peter norton books (pre-stroke and a lot younger)
[18:18:20] <dbotton> happens
[18:28:13] *** Joins: kevingal (~quassel@37.228.202.92)
[18:32:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:33:08] <lisp123> Did Edi Weitz write most of the original cookbook too?
[18:37:02] *** Joins: travv0 (sid293381@user/travv0)
[18:39:14] *** Quits: dbotton (sid492350@lymington.irccloud.com) ()
[18:39:33] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[18:40:15] <phoe> lisp123: the CVS logs of the original cookbook seem to mention him a lot
[18:45:08] <lisp123> phoe: Got it
[18:47:09] *** Joins: yagamisa1o (~SingSong@120.197.255.246)
[18:53:19] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:57:19] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[18:59:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:59:22] <_73> Using DEFPACKAGE, is it possible to import symbols from multiple packages with one :IMPORT-FROM clause, or must each package get its own :IMPORT-FROM clause? Example: http://dpaste.com/9S3KBQB9F
[18:59:57] <Bike> clhs defpackage
[18:59:58] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm
[19:00:09] <Bike> yeah, looks like only one package per clause
[19:00:44] <_73> ok thanks
[19:02:31] *** Joins: razetime (~quassel@49.207.198.36)
[19:06:43] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[19:08:44] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:09:39] *** Joins: Catie (~user@user/catie)
[19:09:39] *** Quits: amb007 (~a_bakic@90.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[19:12:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:16:20] *** Joins: karlosz (~karlosz@47.180.55.252)
[19:17:40] <Guest74> SR-71: 'display drivers' aren't really an issue unless you're writing an entire kernel and OS.  If we take wayland as an example, all you really need is a way to handle input and a way to distribute buffers. Not a terrible amount of work, but definitely more than one person can handle quickly as I can attest to that.
[19:19:55] <Guest74> as for a simple window manager, I have a simple one written in ~500 loc.  Though the one I currently use is quite a bit larger.
[19:27:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:28:31] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:31:55] <scymtym> Guest74: but wayland expects the client to do its own drawing so in addition to pushing buffers around (or sharing the memory) the clients needs a software rasterizer or something like OpenGL bindings
[19:35:15] <Guest74> true, but that isn't really part of a windowing system.  But it's the reason why I've also got a drawing api for surfaces, such as raster buffers.
[19:35:55] <Guest74> or at least it's not part of wayland, and very many people were upset there is an ancient decaying drawing system attached to x11.
[19:37:39] *** Quits: silasfox14 (~silasfox@62.159.27.1) (Quit: silasfox14)
[19:39:08] <Guest74> I do wish I could talk to the kernel in lisp, but until we have a lisp kernel it seems like ioctls to the linux kernel will have to be a necessary interface. My hope is that once I've got that done, creating a dumb buffer for use with wayland will be as simple as getting an x11 window, surface:create .
[19:40:36] <scymtym> why do you have to talk to the kernel to create a buffer for wayland? do you want to avoid the POSIX shared memory stuff?
[19:42:37] <Guest74> unless you want to use a foreign library, you need to talk to the kernel to manage them and handle things like resolution changes.
[19:43:27] <scymtym> ah, so frame buffer, not a buffer that backs a wayland surface
[19:45:04] <Guest74> I'm not sure if you can ask wayland to create the dumb buffer for you and give you an address to map.  But seeing as how I'm writing the window system, I'd have to ask myself.
[19:46:15] <scymtym> i think the clients allocates the buffer via the share memory system and passes a file descriptor as ancillary data of a socket message
[19:46:34] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[19:46:57] <scymtym> (that's what i implemented, following the examples in C)
[19:49:17] <Guest74> ah, so easier for the client if you don't have to actually create the scanout buffer.  Wish there was a simple way of passing file descriptors over sockets as well.
[19:49:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[19:50:17] <Guest74> did you write the cl-wayland stuff?
[19:50:30] <scymtym> no, isn't that one ffi-based?
[19:50:32] <Guest74> I can't remember if that's what it was called tbh.
[19:50:40] <Guest74> Yes, there was one all ffi
[19:51:38] <Guest74> any links to code to see how you did the fd passing?  I think it'd be usefull to have that for adding shared memory drawables to clx.
[19:52:12] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[19:52:18] <Guest74> it's the onlymissing link for the mit-shm extension.
[19:52:27] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[19:52:57] *** Joins: rogersm (~rogersm@90.166.180.250)
[19:53:02] <Guest74> i.e., I have the extension already written, just no way to pass the fd.
[19:55:21] <scymtym> the code is not public at the moment, but i basically use just enough ffi (no foreign library, though) to be able to call sendmsg with the required arguments. in principle, usocket or sb-bsd-sockets could be extended to provide this functionality
[19:58:21] <Guest74> that would be my hope.  I don't like using cffi.  But interfacing with the os through and implementation seems necessary to me.
[19:58:58] <Guest74> unfortunately, all examples are usually in C and my brain didn't really comprehend it.
[19:59:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:00:17] <Guest74> I've just put it off hoping someone else would do it. hint hint
[20:00:18] <scymtym> yeah, fd passing seems needlessly complicated since, as far as i can tell, the caller is also forced to use the scatter/gather interface for the socket message
[20:04:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[20:06:46] *** Joins: attila_lendvai (~alendvai@20014C4C12B535000000000000000003.catv.pool.telekom.hu)
[20:08:42] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[20:10:03] <random-nick> if you wanted to use graphics drivers you'd also have to use libdrm and mesa to make framebuffers and compose them
[20:10:26] <random-nick> the first one might have ffi bindings in quicklisp
[20:10:41] <Guest74> or drm ioctls, which is what I do.
[20:11:04] <random-nick> the other one, I'm not sure how much you need apart from the usual opengl calls which are wrapped with cl-opengl I'm guessing
[20:11:19] <random-nick> ah yes, I guess libdrm is just a wrapper for a bunch of ioctls
[20:12:39] <Guest74> plus a bunch of stuff to make an api that makes sense for them, i.e. c/c++ users.
[20:13:27] <random-nick> for input, wayland compositors almost universally use libinput, and I think Xorg uses it now, but it seems to be an entire input system and not just a wrapper for kernel interfaces, so I'm not sure how feasible it is to write pure CL input code instead of FFIing into libinput
[20:14:20] <Guest74> For basic input, pure cl isn't a problem.  I've got most of that.
[20:14:50] <Guest74> reading properties or testing how many buttons a device has might need some evdev ioctls.
[20:15:25] <Guest74> though it seems a lot of the information might be in the /proc subsystem, but I haven't fully explored if I can get all the information from there.
[20:15:33] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 252 seconds)
[20:15:49] <Guest74> Either way, I plan on have a pure cl interface, as well as augmented by evdev ioctls.
[20:18:57] <random-nick> I think /sys is supposed to be used and /proc is just for compatibility, I'm guessing you can usually use regular CL file operations on them
[20:20:21] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Remote host closed the connection)
[20:20:52] <random-nick> but for opengl, I'm pretty sure you have to use ffi
[20:22:02] <Guest74> strange, everything I typed just disappeared.
[20:22:58] <Guest74> anyways, /proc contains a bunch of information from /sys in one file as opposed to across multiple subdirectories with sometimes recursive links.
[20:23:33] <Guest74> I haven't had time to check if the information is more complete in sys.
[20:28:25] <|3b|> i think for GL you could theoretically use GLX without FFI, but might be hard to get full performance, and might require X as well
[20:29:09] <Guest74> I haven't been able to get glx in clx to work.  But admittedly I didn't try very hard.
[20:30:43] <|3b|> as far as i know, that is ancient in addition to any theoretical limits on performance/features :) though i haven't heard anything about it in ages, so maybe someone fixed it up
[20:30:58] <|3b|> don't think it even had textures last i heard
[20:31:43] <random-nick> I thought we were discussing writing something like a display server in CL?
[20:32:13] <Guest74> adding more modern features isn't a problem, there's an xml file out there with most of the new stuff.  I just couldn't get any part of it to work.  But didn't know if it was because I have an nvidia card.
[20:32:29] <random-nick> because with X11, you can just use a socket to ask the X server for buffers and inputs, no ioctls needed
[20:32:41] * |3b| usually wants absolute latest features from GL, and max performance (so i can be lazy about my code when experimenting but still be interactive), so never was really interested in glx
[20:34:08] <Guest74> I've wondered how slow it would actually be if you've got a large mmap'd buffer to send commands over, which are basically just some int followed by args.
[20:34:24] <Shinmera> FWIW, I haven't had any issues with the cl-opengl bindings. The issues I have had would not have been solved by using a non-ffi protocol, either (corrupt data, driver problems)
[20:34:46] <Guest74> random-nick: in my head at least I think a lisp window display manager would swallow both wayland and x11.
[20:34:50] <|3b|> Guest74: yeah, that's the part i wasn't sure if you can do with GLX to make it competitive
[20:35:14] *** Joins: treflip (~user@user/treflip)
[20:35:39] <|3b|> using shared mem instead of sockets i mean
[20:35:40] <random-nick> cl-opengl is (at least partially) generated from specification files
[20:35:51] <|3b|> though also working without x
[20:36:01] <Shinmera> I'm aware. Just saying that in this particular case I don't mind that it's doing it through FFI
[20:36:17] <Shinmera> Usually I'm wary of FFI because I know how nightmarish debugging that stuff can get.
[20:36:42] *** Quits: razetime (~quassel@49.207.198.36) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:38:36] <|3b|> doing GL without X/wayland on linux is annoying though, not sure if trying to do so without FFI to wrapper libs would make it better or worse :p
[20:38:52] <Guest74> opengl seems to be very server/client that i've wondered if you could just get an address to dump commands into and just have lisp package up the simple format.
[20:38:59] *** Joins: frgo (~frgo@p548a3783.dip0.t-ipconnect.de)
[20:39:06] <|3b|> doesn't help that nobody can agree how everything works, so you will need like 3 backends :/
[20:40:18] <Guest74> well now that nvidia seems to finally be getting behind gbm, might be able to find out soon...ish.
[20:40:25] <random-nick> you generally can't use opengl on linux without interfacing with a C library, since it's implemented in userspace and the userspace is written in C
[20:41:22] <random-nick> well, that is of course if you don't reimplement mesa in CL
[20:42:33] <|3b|> yeah, at least it is a relatively nice C library :)
[20:43:50] * |3b| wonders if talking to systemd over a socket is considered better or worse than FFI to some C lib :)
[20:44:21] <Guest74> I just wonder in general if glx works at all anymore.  I should probably find something that uses it and try that.  I think it would be nice to at least get clx to be able to create and attach contexts to windows.
[20:44:45] <Guest74> 3b: just replace systemd with a lisp system and done.
[20:45:16] <|3b|> i suspect it would take some hacks to mix non-ffi clx with ffi cl-opengl
[20:49:40] * |3b| also suspects a non-ffi lisp version of xcb might have better luck, but not sure i have any real basis for either suspicion :)
[20:51:05] <Guest74> well, just tried https://community.khronos.org/t/minimal-glx-opengl3-0-example/55859/4 and it works.  Maybe I'll look into getting glx in clx working again, and let others find out if it has problems with using cl-opengl.
[20:52:56] <Guest74> ugh, that'd probably mean I need a copy of sharplispers clx.
[20:54:59] <random-nick> well presumably you have to modify cl-opengl in order to use the GLX calls
[20:55:05] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[20:55:49] <|3b|> nah, don't think there is anything in cl-opengl to modify
[20:56:04] <random-nick> also, I don't know if there was any work done on using the xcb xml specs in clx, you can ask in #clim
[20:56:08] <|3b|> (unless you want to replace cl-opengl's ffi with glx's network connection)
[20:56:36] <jackdaniel> random-nick: it was only discussed that it would be a) cool, b) less error prone
[20:56:47] <|3b|> and most serious cl-opengl use depends on ffi anyway
[20:56:48] <jackdaniel> but nobody volunteered to do that :)
[20:57:40] <|3b|> since nobody managed to make a magical "translate formats of huge buffers of octets into foreign memory without any overhead" library
[20:58:52] <|3b|> would you really want to stay using the CLX API, or could you make a better one given the abstractions in the xcb specs, like the C xcb vs c xlib?
[20:59:26] <Guest74> random-nick: I already have a parser for the xml.
[20:59:47] <jackdaniel> |3b|: compilation of xml files to request definitions doesn't contradict either
[21:00:02] <jackdaniel> s/either/neither/
[21:00:12] <Guest74> I just mentionned the sharplispers because my fork is sufficiently different that it's bothersome to contribute to sharplispers which everybody uses.
[21:00:13] <jackdaniel> but no, that discussion didn't go beyond "it would be totally doable and cool"
[21:01:43] <|3b|> jackdaniel: yeah, i guess improving clx internals is good either way :)
[21:02:17] <jackdaniel> I imagine that the old api could be retained as a legacy one and a new one could be provided under a separate package
[21:02:26] <jackdaniel> i.e xlib vs xcb
[21:02:34] <random-nick> along with getting all the xorg extensions for free, presumably
[21:03:11] <Guest74> though it doesn't have all the extensions.  it has the ones people bothered to write xml for.
[21:03:53] <Guest74> and it's not much use for adding interesting extensions to clx since it requires a reworking of clx's buffer code.
[21:04:30] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[21:04:34] <jackdaniel> I gather that it is not splendid given that it is inherited from a 1987 codebase, but whether extensions will work is an orthogonal issue, isn't it?
[21:04:44] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:05:44] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 272 seconds)
[21:06:05] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[21:06:18] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[21:06:31] <Guest74> no. the buffer code is nice but it was specifically designed to work with the protocol, not with the later hacks to force things like large requests/events and multiple events for the same event code.
[21:07:19] <Guest74> I mean, it led me to question how much I need x11, hence all this interfacing to the kernel for input and buffers.
[21:07:29] *** Quits: attila_lendvai (~alendvai@20014C4C12B535000000000000000003.catv.pool.telekom.hu) (Remote host closed the connection)
[21:07:46] *** Joins: attila_lendvai (~alendvai@20014C4C12B535000000000000000003.catv.pool.telekom.hu)
[21:08:08] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[21:08:26] <jackdaniel> afair there is only a bigrequest extension and then if it is still to small then requests are send in chunks (and that it is not clx specific limitation)
[21:09:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:10:43] <Guest74> big requests doesn't affect big receives.
[21:11:26] <Guest74> I don't remember specifically, but there were issues with big requests as well.  I think I disabled them and left some comments.
[21:12:27] <Guest74> it also doesn't change the fact that things like the kbd extension either have normal kbd events, or larger ones, and clx doesn't know how to deal with that.
[21:13:50] <jackdaniel> clx doesn't know how to deal with many things, I wass curious why clx wouldn't work with extensions generated from an xml file
[21:13:56] <jackdaniel> s/wass/was/
[21:15:14] <Guest74> it works fine for the extensions that don't register more than one event or which put length as 0 and put the real length somewhere else.
[21:15:57] <Guest74> unfortunately, that's pretty much all the extensions we already have.  ...though I haven't tested the generated glx extension.
[21:21:21] *** Joins: cuz (~user@38.140.58.234)
[21:22:07] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[21:22:47] <Guest74> oh, right, big requests needed larger buffer indices,card32, while all clx depended on card16 indices. which doesn't seem like a big thing, but it was pretty jammed in there.
[21:27:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:27:49] <jackdaniel> I see
[21:35:24] *** Joins: karlosz (~karlosz@47.180.55.252)
[21:36:57] *** Quits: utis_ (~utis@84.208.160.26) (Ping timeout: 240 seconds)
[21:36:59] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[21:37:12] *** Joins: utis (~utis@vpn-client462.uio.no)
[21:38:02] <Guest74> it wasn't something I gave up on lightly.  After a while it just seemed like less work to write something from scratch that could encompass x11 and wayland than to try and rewrite clx to work with extensions that were crammed rather inelegantly into the x11 protocol. I mean, xkb is a mess, and so is xinput.
[21:41:19] <random-nick> xinput2 too?
[21:41:21] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[21:42:11] <Guest74> yeah, that's what I meant.
[21:43:44] *** Joins: tfeb (~tfb@88.98.95.237)
[21:47:39] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[22:00:10] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:08:51] *** Joins: cuz (~user@38.140.58.234)
[22:09:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:13:24] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 240 seconds)
[22:15:39] *** Quits: silasfox (~sbv@p548d15d9.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[22:15:41] *** Joins: cuz (~user@38.140.58.234)
[22:18:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:23:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:24:49] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:27:52] *** Joins: eugercek (~user@user/eugercek)
[22:27:53] *** Joins: jealousmonk (~user@user/jealousmonk)
[22:31:44] *** Parts: travv0 (sid293381@user/travv0) ()
[22:32:20] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:32:47] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:41:19] *** Quits: attila_lendvai (~alendvai@20014C4C12B535000000000000000003.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[22:43:52] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:00:10] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:04:16] *** Joins: morganw (~user@80.225.24.132)
[23:07:35] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[23:10:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:11:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:13:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:23:48] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[23:32:48] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[23:40:54] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 272 seconds)
[23:41:59] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[23:46:12] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[23:46:19] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[23:46:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:46:36] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:46:58] *** Joins: cjb (~cjb@user/cjb)
[23:47:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:54:24] *** Joins: cuz (~user@38.140.58.234)
[23:56:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
