[00:05:12] *** Joins: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28)
[00:07:02] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Ping timeout (120 seconds))
[00:10:55] *** Joins: PlaydohPlato0 (~playdohpl@23-88-157-194.fttp.usinternet.com)
[00:10:59] *** Quits: PlaydohPlato0 (~playdohpl@23-88-157-194.fttp.usinternet.com) (Remote host closed the connection)
[00:11:30] *** Joins: PlaydohPlato3 (~playdohpl@23-88-157-194.fttp.usinternet.com)
[00:11:57] *** Quits: PlaydohPlato (~playdohpl@23-88-157-194.fttp.usinternet.com) (Quit: see ya :))
[00:13:19] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[00:17:24] *** Parts: PlaydohPlato3 (~playdohpl@23-88-157-194.fttp.usinternet.com) (see ya :))
[00:19:36] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[00:20:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:22:51] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 265 seconds)
[00:23:40] *** Joins: GreyXor (~Srain@37.171.232.97)
[00:23:41] *** Joins: girafe3 (~girafe@176-147-142-235.abo.bbox.fr)
[00:25:54] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[00:25:54] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[00:25:54] *** Joins: resamvi (~resamvi@user/resamvi)
[00:26:17] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[00:26:43] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 265 seconds)
[00:27:13] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:28:57] *** Quits: girafe3 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 252 seconds)
[00:30:02] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[00:33:00] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[00:37:45] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[00:41:37] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[00:43:07] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[00:43:07] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[00:43:07] *** Joins: resamvi (~resamvi@user/resamvi)
[00:44:43] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 252 seconds)
[00:47:40] *** Quits: GreyXor (~Srain@37.171.232.97) (Remote host closed the connection)
[00:47:45] *** Joins: girafe3 (~girafe@176-147-142-235.abo.bbox.fr)
[00:48:16] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 245 seconds)
[00:49:12] *** Quits: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28) (Quit: Leaving)
[00:51:11] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 250 seconds)
[00:51:33] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:52:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de)
[00:52:30] *** Quits: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de) (Changing host)
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:56:29] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:01:09] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:01:09] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:01:09] *** Joins: resamvi (~resamvi@user/resamvi)
[01:03:37] *** Joins: tumdum (uid783@id-783.helmsley.irccloud.com)
[01:05:00] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[01:05:39] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:05:42] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[01:08:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:10:22] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:1cb2:f315:7d18:6974)
[01:11:23] *** Joins: rcernin (~rcernin@124.190.149.221)
[01:11:36] *** Joins: jjonah (~jjonah@p200300d5d71495005a946bfffe32a27c.dip0.t-ipconnect.de)
[01:11:40] *** Quits: jjonah (~jjonah@p200300d5d71495005a946bfffe32a27c.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:15:01] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:1cb2:f315:7d18:6974) (Ping timeout: 250 seconds)
[01:17:36] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[01:20:45] *** Quits: girafe3 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:24:39] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:24:39] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:24:39] *** Joins: resamvi (~resamvi@user/resamvi)
[01:25:44] *** Joins: jla (~jordi@64.225.79.195)
[01:29:13] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:29:33] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 265 seconds)
[01:30:35] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:30:35] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:30:35] *** Joins: resamvi (~resamvi@user/resamvi)
[01:35:02] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[01:36:23] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:36:23] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:36:23] *** Joins: resamvi (~resamvi@user/resamvi)
[01:36:53] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:39:44] *** Quits: devz3ro (devz3ro2@user/devz3ro) (Quit: *)
[01:40:32] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[01:42:04] *** Joins: devz3ro (devz3ro2@user/devz3ro)
[01:48:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:50:20] *** Joins: fikran (~fikran@user/fikran)
[01:50:37] *** Quits: yelnah (~felix@2001:44b8:3082:ad:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[01:51:25] *** Joins: nightwatch (~vvlad@ipservice-092-213-074-022.092.213.pools.vodafone-ip.de)
[01:51:55] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[01:52:24] *** Joins: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7)
[01:53:50] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[01:53:50] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[01:53:50] *** Joins: resamvi (~resamvi@user/resamvi)
[02:04:11] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:10:46] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[02:13:54] *** Quits: user968 (~user9@dcm-info-22.u-ga.fr) (Quit: Client closed)
[02:14:17] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[02:15:39] *** Quits: pztrn (~pztrn@user/pztrn) (Ping timeout: 252 seconds)
[02:19:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:23:14] *** Joins: pztrn (~pztrn@user/pztrn)
[02:31:26] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:32:51] *** Joins: patrick1618 (~AdminUser@194-96-167-23.adsl.highway.telekom.at)
[02:33:05] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:33:21] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:33:56] *** Quits: nemesis_ (~nem@user/nemesis91) (Ping timeout: 268 seconds)
[02:34:13] *** Joins: nemesis91 (~nem@user/nemesis91)
[02:35:37] *** Quits: fling (~fling@user/fling) (Ping timeout: 250 seconds)
[02:36:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 256 seconds)
[02:37:10] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[02:49:08] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[02:49:08] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[02:49:08] *** Joins: resamvi (~resamvi@user/resamvi)
[02:49:40] <pjs> I'm declaring a variable, and using that variable in anonymous function, the variable is set in the anon func, but once the func returns the variable is empty. I think this probably makes no sense so where's a simple snippet to see what I mean: https://paste.sr.ht/~petersanchez/c4ba0d59d6b57bc8bd58d3b63fb08d798e66318e
[02:50:49] <pjs> any ideas? I'm mostly curiuos because for instance, if I declare a struct outside the anon func, populate the struct within the anon, after the anon call the struct is still populated.
[02:51:34] <b0nn> check if an error is being generated in your closure
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[02:52:21] <pjs> b0nn: thanks, should have included that. I am checking, no error there.
[02:52:47] <pjs> The only error arises when I call row.Scan outside of the anon func
[02:53:36] <b0nn> yeah, honestly it's got me a bit stumped to - check the addresses of the two rows toensure they're stuill the same?
[02:53:41] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[02:55:32] <pjs> Ah good idea.
[02:56:45] *** Quits: patrick1618 (~AdminUser@194-96-167-23.adsl.highway.telekom.at) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:57:00] *** Joins: patrick1618 (~quassel@194-96-167-23.adsl.highway.telekom.at)
[02:57:10] <b0nn> hmm, is it because it's nil that when the closure gets it it's creating a different instance?
[02:58:06] <nitrix> A first guess, the `database.WithTx` doesn't run the callback when you think it does.
[03:04:20] <pjs> b0nn: same address printing before WithTx and inside the anon func (after the QueryRow call)
[03:05:39] <pjs> nitrix: Looking at the code it seems straight forward. I can do other ops with WithTx just fine. It's weird when calling this QueryRow function. Banging my head against everything
[03:06:33] <pjs> nitrix: this is WithTx if you're interested: https://git.sr.ht/~sircmpwn/core-go/tree/master/item/database/middleware.go#L46
[03:06:37] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[03:06:50] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[03:07:09] <b0nn> nd the other thing, just for completeness, you call .Scan() once, right, either only in the anonymous function, or in the other function
[03:07:23] <b0nn> because that will consume the rows
[03:07:50] <rewt> pjs, there's a tx.Commit() call after the callback... wouldn't this reset the row?
[03:15:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:18:30] <pjs> rewt: Ah, that has to be it.
[03:18:33] <pjs> duh!
[03:19:12] <pjs> b0nn: Yea, just 1 scan.
[03:19:16] <pjs> thank you all!
[03:21:34] <pjs> rewt: yup, that's it. omg. I feel so stupid. I'm not terribly strong with Go and thought I was missing something language specific. I didn't even consider the transaction here. Thanks again.
[03:22:49] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[03:22:49] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[03:22:49] *** Joins: resamvi (~resamvi@user/resamvi)
[03:27:13] *** Joins: remote (~self@user/hackers)
[03:27:41] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[03:30:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[03:30:03] *** Quits: pztrn (~pztrn@user/pztrn) (*.net *.split)
[03:30:03] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (*.net *.split)
[03:30:03] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (*.net *.split)
[03:30:03] *** Quits: lew (~lew@2a07:abc4::1:26e) (*.net *.split)
[03:30:03] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (*.net *.split)
[03:30:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[03:30:03] *** Quits: jespada (~jespada@87.74.33.157) (*.net *.split)
[03:30:03] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3186:b42a:1a11:574d) (*.net *.split)
[03:30:03] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (*.net *.split)
[03:30:03] *** Quits: thms (~thms@2a01:e0a:fb:7020:6010:a4bb:f426:917c) (*.net *.split)
[03:30:03] *** Quits: chameleon (~chameleon@62.ip-51-89-164.eu) (*.net *.split)
[03:30:03] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[03:30:03] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (*.net *.split)
[03:30:03] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (*.net *.split)
[03:30:04] *** Quits: acosta (~acosta@163.172.62.165) (*.net *.split)
[03:30:04] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: gspbirel56601 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (*.net *.split)
[03:30:04] *** Quits: mud (~mud@user/kadoban) (*.net *.split)
[03:30:04] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (*.net *.split)
[03:30:04] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[03:30:04] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[03:30:04] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (*.net *.split)
[03:30:04] *** Quits: vhost- (~vhost@65.102.48.134) (*.net *.split)
[03:30:04] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (*.net *.split)
[03:30:04] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[03:30:04] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (*.net *.split)
[03:30:04] *** Quits: hellstabber (uid531276@id-531276.hampstead.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: dale (dale@user/dale) (*.net *.split)
[03:30:04] *** Quits: wkalt_ (~wkalt@user/wkalt) (*.net *.split)
[03:30:04] *** Quits: amodo_ (~derf@naeon.org) (*.net *.split)
[03:30:04] *** Quits: jlaffaye_ (~jlaffaye@user/jlaffaye) (*.net *.split)
[03:30:04] *** Quits: troseman_ (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (*.net *.split)
[03:30:04] *** Quits: moto (~moto@user/moto) (*.net *.split)
[03:30:04] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (*.net *.split)
[03:30:04] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (*.net *.split)
[03:30:04] *** Quits: amolith (d1421e166a@nixnet/founder/amolith) (*.net *.split)
[03:30:04] *** Quits: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b) (*.net *.split)
[03:30:04] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:04] *** Quits: tom5760 (73d4025b14@user/tom5760) (*.net *.split)
[03:30:04] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (*.net *.split)
[03:30:04] *** Quits: paulgrmn (4935b8e2c8@user/paulgrmn) (*.net *.split)
[03:30:04] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (*.net *.split)
[03:30:04] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[03:30:04] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (*.net *.split)
[03:30:04] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (*.net *.split)
[03:30:04] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[03:30:04] *** Quits: amigan (dramoray@dtvax.dynatron.me) (*.net *.split)
[03:30:04] *** Quits: Ugrastil (~Ugrastil@89.40.112.204) (*.net *.split)
[03:30:04] *** Quits: ttke (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[03:30:04] *** Quits: rvt (~rvt@librecad/rvt) (*.net *.split)
[03:30:04] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (*.net *.split)
[03:30:04] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[03:30:04] *** Quits: haise01 (~haise01@user/haise01) (*.net *.split)
[03:30:04] *** Quits: VSpike (~johncc@2001:bc8:47ac:1a22::1) (*.net *.split)
[03:30:04] *** Quits: Tykling (~tykling@irc.tyknet.dk) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: egy (egy@tilde.team) (*.net *.split)
[03:30:05] *** Quits: popey (~popey@ubuntu/member/popey) (*.net *.split)
[03:30:05] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (*.net *.split)
[03:30:05] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[03:30:05] *** Quits: preisi (~preisi@irc.prei.si) (*.net *.split)
[03:30:05] *** Quits: w1ke (~w1ke@user/w1ke) (*.net *.split)
[03:30:05] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (*.net *.split)
[03:30:05] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[03:30:05] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (*.net *.split)
[03:30:05] *** Quits: belak (~belak@user/belak) (*.net *.split)
[03:30:05] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[03:30:05] *** Quits: soxhlet (~soxhlet@81.171.29.137) (*.net *.split)
[03:30:05] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[03:30:05] *** Quits: remote (~self@user/hackers) (*.net *.split)
[03:30:05] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:d7e4:2dd:3e29:fd7e:314) (*.net *.split)
[03:30:05] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:9c01:cae7:d50c:2e92) (*.net *.split)
[03:30:05] *** Quits: aLeSD (~aLeSD@139.47.114.114) (*.net *.split)
[03:30:05] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (*.net *.split)
[03:30:05] *** Quits: g2anj_ (~v@58.228.230.4) (*.net *.split)
[03:30:05] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[03:30:05] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[03:30:05] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[03:30:05] *** Quits: DaGo (~dago@85.ip-37-59-103.eu) (*.net *.split)
[03:30:05] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:05] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[03:30:05] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[03:30:05] *** Quits: petoem (~petoem@user/petoem) (*.net *.split)
[03:30:05] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (*.net *.split)
[03:30:05] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (*.net *.split)
[03:30:05] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (*.net *.split)
[03:30:06] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[03:30:06] *** Quits: jjcm (~j@li263-105.members.linode.com) (*.net *.split)
[03:30:06] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[03:30:06] *** Quits: kinduff (~kinduff@user/kinduff) (*.net *.split)
[03:30:06] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[03:30:06] *** Quits: BuddyTheElf (launchd@bitbot/launchd) (*.net *.split)
[03:30:06] *** Quits: danderson (~dave@tailscale/danderson) (*.net *.split)
[03:30:06] *** Quits: Logiar (~logiar@nerdsluts.net) (*.net *.split)
[03:30:06] *** Quits: okt (560965ea7b@user/okt) (*.net *.split)
[03:30:06] *** Quits: Icedream (~icedream@144.76.223.175) (*.net *.split)
[03:30:06] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (*.net *.split)
[03:30:06] *** Quits: amoros (~irc@user/amoros) (*.net *.split)
[03:30:06] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[03:30:06] *** Quits: purpleidea (~james@user/purpleidea) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[03:30:06] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[03:30:06] *** Quits: Kaivo (~Kaivo@user/kaivo) (*.net *.split)
[03:30:06] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[03:30:06] *** Quits: nmollerup (~nmollerup@2a00:7660:1612:168:cfa8:be86:5a22:ee27) (*.net *.split)
[03:30:06] *** Quits: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) (*.net *.split)
[03:30:11] *** Joins: thms_ (~thms@2a01:e0a:fb:7020:6010:a4bb:f426:917c)
[03:30:14] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[03:30:16] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[03:30:19] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[03:30:20] *** Joins: lew (~lew@89.234.183.156)
[03:30:23] *** Joins: asm (~alexander@burner.asm89.io)
[03:30:25] *** Joins: tom5760 (73d4025b14@user/tom5760)
[03:30:26] *** Joins: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b)
[03:30:28] *** Joins: soxhlet (~soxhlet@81.171.29.137)
[03:30:30] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[03:30:31] *** Joins: vhost- (~vhost@65.102.48.134)
[03:30:31] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[03:30:31] *** Joins: tnez (~el@179.50.90.141)
[03:30:33] *** Joins: DaGo (~dago@85.ip-37-59-103.eu)
[03:30:35] *** Joins: amoros (~irc@h-158-174-80-2.A357.priv.bahnhof.se)
[03:30:35] *** Joins: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[03:30:37] *** Joins: hellstabber (uid531276@id-531276.hampstead.irccloud.com)
[03:30:38] *** Joins: Seirdy (~Seirdy@76-247-182-44.lightspeed.sjcpca.sbcglobal.net)
[03:30:40] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[03:30:40] *** Joins: preisi (~preisi@irc.prei.si)
[03:30:41] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[03:30:41] *** Joins: amolith (d1421e166a@nixnet/founder/amolith)
[03:30:42] *** Joins: Ugrastil (~Ugrastil@89.40.112.204)
[03:30:44] *** Joins: sus (zero@user/zeromomentum)
[03:30:49] *** Joins: Echoz (~chris@47.81-167-91.customer.lyse.net)
[03:30:49] *** Joins: dsrt^ (~dsrt@98.188.240.142)
[03:30:51] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[03:30:51] *** Joins: g2anj_ (~v@58.228.230.4)
[03:30:53] *** Joins: kinduff (~kinduff@user/kinduff)
[03:30:59] *** Joins: beholders_eye (~weechat@177.132.24.49)
[03:31:03] *** Joins: ikke (~kevin@delta.ikke.info)
[03:31:06] *** Joins: itok (sid418430@2a03:5180:f:3::6:627e)
[03:31:07] *** Quits: tnez (~el@179.50.90.141) (Changing host)
[03:31:07] *** Joins: tnez (~el@user/tnez)
[03:31:12] *** Joins: chameleon (~chameleon@62.ip-51-89-164.eu)
[03:31:26] *** Joins: okt (560965ea7b@2604:bf00:561:2000::1f4)
[03:31:32] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[03:31:35] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[03:31:35] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[03:31:48] *** Joins: rvt (~rvt@librecad/rvt)
[03:31:49] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[03:31:53] *** Joins: paulgrmn (4935b8e2c8@2604:bf00:561:2000::93)
[03:31:54] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:31:59] *** Joins: Kaivo (~Kaivo@170.249.85.113)
[03:32:05] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:13] *** Joins: remote (~self@205.174.156.96)
[03:32:16] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[03:32:19] *** Quits: paulgrmn (4935b8e2c8@2604:bf00:561:2000::93) (Changing host)
[03:32:19] *** Joins: paulgrmn (4935b8e2c8@user/paulgrmn)
[03:32:23] *** Quits: remote (~self@205.174.156.96) (Changing host)
[03:32:23] *** Joins: remote (~self@user/hackers)
[03:32:25] *** Quits: vhost- (~vhost@65.102.48.134) (Changing host)
[03:32:25] *** Joins: vhost- (~vhost@user/vhost-)
[03:32:43] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[03:32:45] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:9c01:cae7:d50c:2e92)
[03:32:47] *** Joins: VSpike (~johncc@163.172.164.229)
[03:33:01] *** Joins: danderson (~dave@63.81.90.235)
[03:33:15] *** Joins: launchd (launchd@bitbot/launchd)
[03:33:30] *** Joins: belak (~belak@user/belak)
[03:33:36] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[03:33:44] *** Joins: w1ke (~w1ke@user/w1ke)
[03:33:54] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[03:33:55] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Remote host closed the connection)
[03:33:59] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[03:34:15] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[03:34:22] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[03:34:28] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:34:29] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[03:34:29] *** Joins: dale (dale@user/dale)
[03:34:32] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[03:34:32] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[03:34:35] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:42] *** Joins: haise01 (~haise01@user/haise01)
[03:34:46] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[03:34:54] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[03:34:58] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[03:35:01] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[03:35:01] *** Joins: effprime (~effprime@user/effprime)
[03:35:11] *** Joins: jjcm (~j@li263-105.members.linode.com)
[03:35:11] *** Joins: amodo (~derf@naeon.org)
[03:35:16] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[03:35:17] *** Joins: Tykling (~tykling@irc.tyknet.dk)
[03:35:21] *** Joins: Hawker (~pi@user/hawker)
[03:35:22] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[03:35:24] *** Joins: moto (~moto@user/moto)
[03:35:24] *** Joins: purpleidea (~james@user/purpleidea)
[03:35:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:a798:3719:6645:498)
[03:35:28] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[03:35:34] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[03:35:36] *** Joins: koolazer (~koo@user/koolazer)
[03:35:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:36:01] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[03:36:12] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[03:36:23] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[03:36:23] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[03:36:30] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[03:36:41] *** Joins: wkalt_ (~wkalt@user/wkalt)
[03:36:47] *** Joins: jespada (~jespada@87.74.33.157)
[03:36:52] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[03:36:59] *** Joins: Logiar (~logiar@nerdsluts.net)
[03:37:00] *** Joins: explodes (~explodes@user/explodes)
[03:37:19] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:37:44] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[03:37:55] *** Joins: Cork (~Cork@user/cork)
[03:38:38] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[03:39:09] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[03:39:10] *** Quits: patrick1618 (~quassel@194-96-167-23.adsl.highway.telekom.at) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:39:18] *** Joins: petoem (~petoem@user/petoem)
[03:39:48] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[03:39:48] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[03:39:48] *** Joins: resamvi (~resamvi@user/resamvi)
[03:39:57] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 250 seconds)
[03:48:32] *** Joins: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de)
[03:49:55] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 250 seconds)
[03:49:56] *** ajfriesen70 is now known as ajfriesen7
[03:54:32] *** Joins: ryu_ (~ryusaku@c09825BC1.dhcp.as2116.net)
[03:55:27] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[03:57:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[04:02:37] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[04:05:17] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[04:06:18] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d)
[04:10:57] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[04:10:57] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[04:10:57] *** Joins: resamvi (~resamvi@user/resamvi)
[04:12:27] *** Quits: ryu_ (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[04:15:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[04:22:39] *** Joins: BUSY (~BUSY@user/busy)
[04:26:28] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:28:07] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:31:11] *** Joins: farhan__ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net)
[04:31:51] *** Parts: farhan__ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net) ()
[04:32:02] *** Joins: farhan (~farhan@user/farhan)
[04:32:20] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:32:24] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[04:32:28] <farhan> Is there a way to have a channel that doesn't actually read data, but is used just to be read from?
[04:32:41] <farhan> I'm using a channel for synchronization of goroutines
[04:33:31] *** Quits: okt (560965ea7b@2604:bf00:561:2000::1f4) (Changing host)
[04:33:31] *** Joins: okt (560965ea7b@user/okt)
[04:33:59] <farhan> and, is that an appropriate pattern?
[04:34:13] <bpalmer> farhan: that's context's close channel, in a nutshell
[04:34:17] <bpalmer> it only exists to be closed
[04:34:24] <bpalmer> er, done channel
[04:36:17] <farhan> the example i see on gobyexample.com uses a bool. Same concept?
[04:36:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:37:03] <bpalmer> maybe ,although if it has a type associated with it, that suggests it's being used to pass data.
[04:37:52] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:41:38] <fizzie> A `chan struct{}` is also sometimes seen for just signaling.
[04:41:55] <fizzie> (You can only close a channel once, but you can send a `struct{}{}` over a `chan struct{}` many times.)
[04:44:43] <fizzie> https://go.dev/blog/pipelines#explicit-cancellation has an example that starts from a `chan struct{}` and proceeds into using the closing of a channel as the signal, since it _wants_ to signal everyone, rather than just one.
[04:45:34] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[04:45:34] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[04:45:34] *** Joins: resamvi (~resamvi@user/resamvi)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:52:07] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[04:55:26] *** Joins: darkapex (~darkapex@user/darkapex)
[04:55:31] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[05:05:31] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[05:05:31] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[05:05:31] *** Joins: resamvi (~resamvi@user/resamvi)
[05:06:19] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[05:13:38] *** Quits: internut (~internut@2601:280:4e00:7b70:5120:ded4:db96:a55) (Quit: Leaving...)
[05:17:54] *** Joins: abraham (~abraham@143.244.185.86)
[05:19:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[05:21:15] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[05:21:35] *** Joins: mickey8 (~user@user/mickey)
[05:22:55] *** Joins: arinov (~arinov@213.194.126.155)
[05:26:11] *** Quits: rcernin (~rcernin@124.190.149.221) (Quit: WeeChat 3.3)
[05:26:41] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[05:28:42] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[05:31:13] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[05:31:17] *** Joins: shtirlic_ (~shtirlic@178.70.143.240)
[05:33:35] *** Joins: rcernin (~rcernin@124.190.149.221)
[05:34:06] *** Quits: shtirlic (~shtirlic@178.70.132.77) (Ping timeout: 245 seconds)
[05:36:42] *** Joins: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net)
[05:37:03] *** Joins: c10l (~c10l@user/c10l)
[05:40:00] *** Joins: moog (~moog@107.126.48.93)
[05:40:25] *** Quits: moog_ (~moog@107.126.48.93) (Ping timeout: 250 seconds)
[05:40:39] *** Quits: farhan (~farhan@user/farhan) (Ping timeout: 250 seconds)
[05:48:27] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:48:39] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: The Lounge - https://thelounge.chat)
[05:48:58] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[05:48:58] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[05:48:58] *** Joins: resamvi (~resamvi@user/resamvi)
[05:49:13] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[05:54:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[06:05:15] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:05:37] *** Joins: moog (~moog@107.126.48.93)
[06:21:51] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[06:23:49] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[06:23:49] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[06:23:49] *** Joins: resamvi (~resamvi@user/resamvi)
[06:24:04] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:37:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[06:46:25] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:52:21] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[06:52:21] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[06:52:21] *** Joins: resamvi (~resamvi@user/resamvi)
[06:54:31] *** Quits: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[06:55:05] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:56:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[07:03:38] *** abc_- is now known as zwindl
[07:08:51] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[07:08:51] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[07:08:51] *** Joins: resamvi (~resamvi@user/resamvi)
[07:14:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[07:21:41] *** Joins: azrael (~azrael@2601:100:857f:3e30:4585:d20a:410a:d131)
[07:22:32] *** Joins: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net)
[07:33:37] *** Quits: azrael (~azrael@2601:100:857f:3e30:4585:d20a:410a:d131) (Ping timeout: 240 seconds)
[07:45:10] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[07:45:10] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[07:45:10] *** Joins: resamvi (~resamvi@user/resamvi)
[07:56:58] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:9c01:cae7:d50c:2e92) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:00:08] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[08:00:56] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[08:00:56] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[08:00:56] *** Joins: resamvi (~resamvi@user/resamvi)
[08:02:47] *** Joins: barnoby (~barnoby@2603-6000-a409-2660-a82c-0949-6c9b-1a1c.res6.spectrum.com)
[08:04:51] *** Joins: remote (~self@user/hackers)
[08:05:41] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[08:09:29] *** Quits: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[08:11:35] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[08:18:10] *** Joins: DaPinkOne (~Dap@user/dap)
[08:18:19] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[08:18:19] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[08:18:19] *** Joins: resamvi (~resamvi@user/resamvi)
[08:18:28] *** Joins: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de)
[08:22:57] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 268 seconds)
[08:23:27] *** Quits: okt (560965ea7b@user/okt) (Remote host closed the connection)
[08:23:36] *** Joins: okt (560965ea7b@user/okt)
[08:23:43] *** Joins: andlabs (~andlabs@2604:ca00:16b:85f0:459c:649d:7545:ed6a)
[08:24:48] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[08:25:31] *** Joins: andlabs_ (~andlabs@2604:ca00:16b:85f0:cce:fe1e:9338:76f1)
[08:27:57] *** Quits: andlabs (~andlabs@2604:ca00:16b:85f0:459c:649d:7545:ed6a) (Ping timeout: 240 seconds)
[08:37:31] *** Joins: andlabs (~andlabs@2604:ca00:16b:85f0:80f9:9202:5323:3b75)
[08:37:55] *** Joins: rcernin (~rcernin@124.190.149.221)
[08:40:56] *** Joins: et_ (~et@user/et)
[08:40:57] *** Quits: andlabs_ (~andlabs@2604:ca00:16b:85f0:cce:fe1e:9338:76f1) (Ping timeout: 240 seconds)
[08:41:17] *** Joins: andlabs_ (~andlabs@209.107.190.56)
[08:41:37] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[08:41:37] *** et_ is now known as et
[08:42:46] *** Quits: andlabs_ (~andlabs@209.107.190.56) (Read error: Connection reset by peer)
[08:42:55] *** Joins: andlabs__ (~andlabs@209.107.190.56)
[08:43:57] *** Quits: andlabs (~andlabs@2604:ca00:16b:85f0:80f9:9202:5323:3b75) (Ping timeout: 240 seconds)
[08:44:36] *** Quits: andlabs__ (~andlabs@209.107.190.56) (Read error: Connection reset by peer)
[08:44:42] *** Joins: andlabs (~andlabs@2604:ca00:16b:85f0:bc39:5eb:4e96:9b1)
[08:46:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:51:19] *** Quits: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[08:53:52] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[08:53:52] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[08:53:52] *** Joins: resamvi (~resamvi@user/resamvi)
[08:55:06] *** Joins: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net)
[08:57:46] *** Joins: nako (~nekonako@2404:c0:7440::2805:26b2)
[08:58:38] *** Parts: nako (~nekonako@2404:c0:7440::2805:26b2) ()
[08:59:45] *** Quits: farhan_ (~farhan@pool-151-200-240-17.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[09:01:11] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[09:01:54] *** Joins: fling (~fling@user/fling)
[09:09:23] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[09:10:22] *** Joins: remote (~self@user/hackers)
[09:12:30] *** Quits: ikke (~kevin@delta.ikke.info) (Changing host)
[09:12:30] *** Joins: ikke (~kevin@alpine/developer/ikke)
[09:13:31] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[09:13:31] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[09:13:31] *** Joins: resamvi (~resamvi@user/resamvi)
[09:17:34] *** Joins: gshumway (~gshumway@user/gshumway)
[09:17:53] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[09:30:40] *** Quits: andlabs (~andlabs@2604:ca00:16b:85f0:bc39:5eb:4e96:9b1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:31:24] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[09:31:24] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[09:31:24] *** Joins: resamvi (~resamvi@user/resamvi)
[09:49:03] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[09:55:38] *** Joins: andlabs (~andlabs@70.107.171.168)
[10:01:57] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[10:01:57] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[10:01:57] *** Joins: resamvi (~resamvi@user/resamvi)
[10:03:57] *** Quits: remote (~self@user/hackers) (Ping timeout: 240 seconds)
[10:04:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:06:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[10:11:02] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[10:11:02] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[10:11:02] *** Joins: resamvi (~resamvi@user/resamvi)
[10:11:06] *** Quits: resamvi (~resamvi@user/resamvi) (Client Quit)
[10:20:00] *** Joins: ztx (~ztx@user/ztx)
[10:24:52] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:25:57] *** Quits: Echoz (~chris@47.81-167-91.customer.lyse.net) (Quit: WeeChat 3.3)
[10:26:18] *** Joins: Echoz (~chris@user/echoz)
[10:31:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:33:17] *** Joins: shka (~herr@109.231.0.226)
[10:34:23] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 256 seconds)
[10:34:47] *** Joins: remote (~self@user/hackers)
[10:35:20] *** Parts: noboruma_ (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) ()
[10:36:24] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[10:40:10] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[10:41:48] *** Joins: whaley (~whaley@2603-6080-a301-33d1-9e7d-d87a-69a3-c65a.res6.spectrum.com)
[10:42:05] <noboruma> hello go-nuts, I am working with gRPC streaming. There is a pattern I keep encountering in go where we spin up a go-routine, and wait right after it. Is there any benefit doing so? Example: https://github.com/grpc/grpc-go/blob/v1.42.0/examples/route_guide/client/client.go#L125
[10:42:40] <noboruma> My understanding is this is equivalent to not having any go-routine - unless go is somehow clever enough to multiplex the function?
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:14:50] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[11:17:02] *** Joins: rendar (~rendar@user/rendar)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:17:44] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[11:18:07] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[11:19:21] *** Joins: benji (~benji@user/benji)
[11:20:42] *** Quits: rcernin (~rcernin@124.190.149.221) (Quit: WeeChat 3.3)
[11:49:27] *** Joins: jla (~jordi@64.225.79.195)
[11:50:02] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:56:46] *** Joins: mrig (~AdiIRC@user/mrig)
[12:05:38] *** Joins: danmurf (uid480399@user/danmurf)
[12:09:48] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:11:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:19:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:32:17] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:33:56] *** Quits: remote (~self@user/hackers) (Ping timeout: 268 seconds)
[12:38:43] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:50:04] *** Pokey is now known as ahorner
[12:50:09] *** ahorner is now known as Pokey
[13:03:39] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[13:03:55] *** Joins: adlternative (~adl@117.32.216.73)
[13:08:04] *** Joins: normen (~normen@pd9eeca92.dip0.t-ipconnect.de)
[13:08:17] <bpalmer> noboruma: in that example, the goroutine starts and the for loop is then executed concurrently, *then* it waits
[13:09:14] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[13:09:34] *** Joins: teasea (~teasea@user/teasea)
[13:11:44] *** Quits: teasea (~teasea@user/teasea) (Client Quit)
[13:12:03] *** Joins: teasea (~teasea@user/teasea)
[13:14:46] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:14:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:16:36] *** bindu_ is now known as bindu
[13:17:29] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[13:17:50] *** Joins: teasea (~teasea@user/teasea)
[13:21:30] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[13:22:03] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:22:06] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[13:22:19] *** Joins: bindu (~bindu@user/bindu)
[13:27:01] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[13:27:30] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[13:31:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:39:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:53:11] *** Quits: aml_ (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 256 seconds)
[13:54:43] *** Quits: diff (~diff@tilde.town) (Ping timeout: 268 seconds)
[13:57:53] <jla> stupid question... how to negate a variable ?   !var ?
[14:00:29] *** Quits: Seirdy (~Seirdy@76-247-182-44.lightspeed.sjcpca.sbcglobal.net) (Ping timeout: 250 seconds)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:06:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:06:40] *** Joins: user914 (~user914@dcm-info-22.u-ga.fr)
[14:07:22] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[14:10:15] <KirkMcDonald> jla: That will negate a bool, yes.
[14:10:51] *** Quits: normen (~normen@pd9eeca92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:25:03] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[14:29:18] *** Joins: normen (~normen@p200300d71703160090960436327aa7c8.dip0.t-ipconnect.de)
[14:38:22] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[14:40:16] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[14:45:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:50:31] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[14:57:59] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:58:16] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[15:02:43] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[15:03:19] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[15:03:37] *** Joins: jla (~jordi@64.225.79.195)
[15:08:21] <matt1982__> hey im going slightly mad does this look correct for a definition:
[15:08:23] <matt1982__> func (w WholesalerModel) GetWholesalerByStatus(status int) ([]Wholesaler, error) {
[15:09:09] <matt1982__> i get an error when i try to call it with: f.WholesalerModel.GetWholesalerByStatus(1)
[15:09:20] <matt1982__> not enough arguments to call :S
[15:13:45] *** Quits: dsrt^ (~dsrt@98.188.240.142) (Ping timeout: 256 seconds)
[15:23:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:24:21] <matt1982__> im an idiot i hadnt created the new instance of the Model properly ;S
[15:27:34] *** Joins: rcernin (~rcernin@124.190.149.221)
[15:39:37] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 240 seconds)
[15:41:54] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[15:41:54] *** Joins: asm (~alexander@user/asm)
[15:44:54] *** Joins: arinov (~arinov@176.89.29.127)
[15:46:33] *** Joins: fef (~thedawn@user/thedawn)
[15:53:05] *** Joins: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net)
[16:01:25] *** Joins: tyson2 (~user@70.31.33.162)
[16:08:48] *** Quits: adlternative (~adl@117.32.216.73) (Read error: Connection reset by peer)
[16:10:03] *** Quits: karl (~Karlssel@2001:41d0:8:9a4b::1) (Remote host closed the connection)
[16:12:10] *** Joins: karl (~Karlssel@2001:41d0:8:9a4b::1)
[16:24:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:28:30] *** Joins: Teckla (~Teckla@user/teckla)
[16:33:01] *** Quits: tnez (~el@user/tnez) (Ping timeout: 250 seconds)
[16:33:33] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:33:37] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d)
[16:37:26] *** Quits: mobbi (~quassel@2001:14ba:23d5:6f00:c5e7:4a0f:50f4:8113) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[16:38:47] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d) (Ping timeout: 252 seconds)
[16:38:59] *** Joins: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr)
[16:40:34] <noboruma> bpalmer: Yes, and that works fine - my question is, why would someone do that in real life? There seems to be no benefit compared to running the for loop in the current thread
[16:40:55] <_pash> Heya guys - can someone recommend a library for building some sort of tree? I have a cluster of machines that communicate together with gRPC, and I need to be able to broadcast and receive responses from the nodes with the smallest number of requests..
[16:41:25] <_pash> I know there's the onet library which supports this https://github.com/dedis/onet
[16:41:57] <sztanpet> noboruma for loops may take time
[16:44:04] <sztanpet> your particular example reads everything from the stream, and logs it, and the author wanted that to happen while doing other stuff
[16:46:47] <noboruma> sztanpet: Got you, so yeah in practice, you would probably return the channel instead of waiting for the reading to be completed.. I have seen that in production code from time to time, I was wondering if that was a mistake or if there were any goroutine magic going on
[17:02:15] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[17:06:57] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[17:13:16] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[17:13:41] *** Joins: noonien (~noonien@user/noonien)
[17:25:07] *** Joins: iateadonut (~dan@121.177.17.154)
[17:25:48] <iateadonut> i have a script that outputs to stdout.  how do i test that the correct string is written to stdout?
[17:26:07] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 250 seconds)
[17:27:38] <j416> iateadonut: have your program output to an io.Writer instead, use a buffer in the test.
[17:27:42] *** Quits: henry40408 (~henry4040@175.181.152.91) (Quit: The Lounge - https://thelounge.chat)
[17:28:52] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d)
[17:31:21] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Quit: leaving)
[17:31:32] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[17:32:27] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Client Quit)
[17:33:01] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d) (Ping timeout: 240 seconds)
[17:33:56] *** Joins: tnez (~el@user/tnez)
[17:34:13] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[17:34:41] <iateadonut> thanks.  i was using fmt.println("> ") as my prompt but bufio.NewWriter.WriteString("> ") doesn't work as a replacement.  what am i looking for as a writer?
[17:34:42] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[17:35:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:36:41] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[17:40:57] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[17:42:13] <iateadonut> i used io.Write
[17:42:56] <j416> iateadonut: fmt.Fprintln(w, "> "), where w is your io.Writer.
[17:44:18] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:45:58] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:46:29] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Quit: Lost terminal)
[17:46:42] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[17:47:33] *** Quits: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[17:47:37] <iateadonut> i used app.writer.Write() which seems to work... in my test, i am using bytes.NewBuffer() as my app.writer;  but is that correct and how would i determine what has been written to it?
[17:47:43] <iateadonut> j416, thanks
[17:48:00] <j416> you can use w.Write but it takes a []byte instead of a string.
[17:48:30] <iateadonut> right.  so how do i determine what was written if i use bytes.NewBuffer() as my writer in my test?
[17:49:02] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:49:41] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[17:49:44] <j416> iateadonut: https://go.dev/play/p/yZX8a78dK_u
[17:50:42] <j416> iateadonut: and in your real version, you'd just give it os.Stdout -> https://go.dev/play/p/bu876veFZgT
[17:52:57] <iateadonut> i think i understand, but in my test, how would i compare the value that i've written to the buffer to a string that i am expecting?
[17:55:14] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d) (Ping timeout: 252 seconds)
[17:58:14] <j416> buf.Bytes()
[17:58:29] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d)
[17:58:50] <j416> there's also buf.String()
[18:03:00] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c959:9e8d:b7ca:4f4d) (Ping timeout: 240 seconds)
[18:06:19] *** Joins: arinov (~arinov@176.89.29.127)
[18:08:45] *** Joins: moog (~moog@107.242.124.157)
[18:13:31] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d)
[18:14:15] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[18:18:39] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d) (Ping timeout: 268 seconds)
[18:19:17] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[18:22:14] *** Quits: karl (~Karlssel@2001:41d0:8:9a4b::1) (Remote host closed the connection)
[18:23:21] *** Quits: jespada (~jespada@87.74.33.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:23:49] *** Joins: jespada (~jespada@87.74.33.157)
[18:24:21] *** Joins: karl (~Karlssel@2001:41d0:8:9a4b::1)
[18:26:50] *** Quits: tyson2 (~user@70.31.33.162) (Remote host closed the connection)
[18:34:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:53:25] *** Joins: souvik (~souvik@103.82.81.39)
[18:53:48] *** Quits: halden (~halden@lden.im) (Read error: Connection reset by peer)
[18:55:04] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:59:54] *** Joins: halden (~halden@lden.im)
[19:07:09] *** Parts: iateadonut (~dan@121.177.17.154) ()
[19:08:07] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d)
[19:08:21] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:13:56] *** Joins: arinov (~arinov@176.89.29.127)
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:15:01] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d) (Ping timeout: 240 seconds)
[19:17:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:18:26] *** Joins: tane (~tane@user/tane)
[19:19:01] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 256 seconds)
[19:22:03] *** Joins: souvik_ (~souvik@80.179.69.241.cable.012.net.il)
[19:22:31] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 256 seconds)
[19:23:39] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[19:25:29] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:26:17] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:27:45] *** Quits: user914 (~user914@dcm-info-22.u-ga.fr) (Quit: Client closed)
[19:28:40] *** Joins: mrig (~mrig@user/mrig)
[19:32:57] *** Quits: whaley (~whaley@2603-6080-a301-33d1-9e7d-d87a-69a3-c65a.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:33:13] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[19:35:11] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d)
[19:36:46] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[19:39:38] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:93e:d4d9:74e7:f88d) (Ping timeout: 260 seconds)
[19:44:47] *** Quits: souvik_ (~souvik@80.179.69.241.cable.012.net.il) (Quit: leaving)
[19:53:03] *** Joins: michele_ (~eraser@user/michele)
[19:53:07] *** Quits: michele (~eraser@user/michele) (Read error: Connection reset by peer)
[19:59:31] <jay_wild> for HTTP response bodies, does the body have to be read and closed for connection reuse?  For some reason I have it stuck in my head that closing the response will discard all the unread bytes anyways
[20:00:49] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[20:03:19] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[20:04:05] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:06:28] <davidkrauser> what would be an idiomatic name for a package that contains a bunch of general purpose data structures? E.g. a StringSet that implements Add()/Remove()/Contains() for primitive strings
[20:07:34] <davidkrauser> or more concretely: type stringSet map[string]struct{} implements Add()/Remove()/Contains()
[20:08:13] <davidkrauser> these are small little helper structures that I use all over the place
[20:08:57] <davidkrauser> I was thinking pkg/datastructure, but wasn't sure
[20:09:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:14:50] <bookworm> collections
[20:15:03] <davidkrauser> bookworm: ooh, I like it
[20:15:05] <davidkrauser> thank you
[20:17:52] *** Joins: user914 (~user914@dcm-info-22.u-ga.fr)
[20:18:40] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb - upgrading)
[20:20:02] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:20:23] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:21:15] *** Joins: tbcr (~brclark@user/tbcr)
[20:22:23] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[20:24:03] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:26:05] *** Joins: henry40408 (~henry4040@123-204-134-230.adsl.dynamic.seed.net.tw)
[20:39:09] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:47:36] <bpalmer> although consider whether each one of those could potentially be its own package. There's very little harm in having (organized) small packages out there.
[20:49:08] <bpalmer> It's one thing to have StringSet, IntSet, etc in one package; it's another to have StringSet, StringFibonacciHeap , StringBTree, StringMultimap in a package.
[20:50:19] <davidkrauser> bpalmer: good points. I think this is small enough for now to fit in collections, but I could see the reasoning behind breaking it up if it gets bigger
[20:51:03] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[20:51:21] *** Joins: holgersson (~quassel@user/holgersson)
[20:52:05] <davidkrauser> bpalmer: I noticed that you're active in #emacs and in here, and was curious - do you use emacs for Go development? Would be interested to know what your setup looks like if you don't mind sharing :-)
[20:52:24] <bpalmer> It's a very boring setup; I run goimports and gofmt on save
[20:52:28] <bpalmer> that's about it.
[20:52:36] <davidkrauser> ah
[20:52:44] <davidkrauser> how do you typically debug a go program?
[20:53:13] <bpalmer> fmt.Print
[20:53:25] <bpalmer> also, maybe I just don't write bugs.
[20:53:25] <davidkrauser> lol fair
[20:53:32] * bpalmer looks around uneasily.
[20:53:48] <siXy> If you need more than that, there's delve.
[20:54:11] <siXy> Also pprof for finding perf regressions etc.
[20:54:13] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:54:40] <davidkrauser> I use delve with dap-mode in emacs, but it's a little finicky. To be fair, it's improved exponentially in the last year, but it's still not the easiest to use
[20:54:55] <davidkrauser> so was curious to find out if I was missing out on something :-)
[20:55:23] <davidkrauser> bpalmer: gofmt + goimports on save is really great. I do this, too
[20:56:21] <siXy> Be a bit careful with goimports - it occasionally goes mad and imports some wierd internal artifact with the same name as the top level package you were trying to import.
[20:56:29] <siXy> I've had that happen enough I turned it off.
[20:57:45] <davidkrauser> yeah, it's not always perfect, but it's been pretty reliable for me
[20:58:23] <davidkrauser> it sure as hell beats trying to deal with it yourself like you have to in some other languages. Java development is a nightmare in emacs for this (and many other) reasons
[20:59:59] <bpalmer> In the worst case, it's usually just a matter of noticing the build error and going in and typing the correct import by hand. I put up with the confusion since the good path is so nice.
[21:00:38] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: Textual IRC Client: www.textualapp.com)
[21:01:28] <siXy> yeah, though the errors can be *really* confusing.
[21:02:33] <siXy> SOmeone came in here a couple weeks ago with a great example of that - some completely obscure build error, that had completely stumped them as it gave no indication of the real problem
[21:03:02] <davidkrauser> bpalmer: did you go with the simple go configuration in emacs for a particular reason? Or just haven't had the time/interest/need to build up a complex setup?
[21:03:47] <bpalmer> davidkrauser: the latter. I typically use very simple setups.
[21:06:22] <davidkrauser> bpalmer: that's fair
[21:07:17] <explodes> GENERICS
[21:07:21] <bpalmer> I fully concede some people are able to exploit fancy editor configuration to be a lot faster than me, at least in the phase where it's about just churning out code
[21:07:34] <bpalmer> or they have better debugging setups.
[21:09:07] <davidkrauser> bpalmer: I find that when it comes to editing, a simple setup works fine for the most part. I did a stint a few years ago using `ed` for a month to see if it impacted my productivity. It didn't really at all. I have a hard time working without a good debugging setup, though
[21:09:54] <sztanpet> yea, input speed is not the limiting factor
[21:11:06] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:11:14] <siXy> depends a bit what sort of domain you're working in. If you're writing some simplish CRUD webapps, churning out code is gonna be a larger percentage of your time than writing a distributed secret manager, or whatever.
[21:11:52] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[21:12:40] <davidkrauser> siXy: that's true
[21:13:12] <davidkrauser> lol and a distributed secret manager was exactly what I was working on
[21:13:21] <siXy> that wasn't intended to sound as dismissive of webapps as it came out, btw :)
[21:13:37] *** Quits: tbcr (~brclark@user/tbcr) (Ping timeout: 240 seconds)
[21:14:12] <bpalmer> "a well understood problem domain"
[21:14:26] <siXy> yeah. thanks, that's much better phrasing.
[21:15:08] *** Joins: tbcr (~brclark@user/tbcr)
[21:16:49] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[21:16:51] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[21:17:16] *** Joins: Atque (~Atque@user/atque)
[21:18:34] *** Quits: tbcr (~brclark@user/tbcr) (Client Quit)
[21:19:17] *** Joins: codebam (~codebam@user/codebam)
[21:20:32] *** Quits: codebam (~codebam@user/codebam) (Client Quit)
[21:39:57] *** Joins: remote (~self@user/hackers)
[21:39:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:42:14] *** Joins: cobber (~protorom@213.240.182.77)
[21:43:14] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[21:47:01] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:47:33] <cobber> is calling e.g. main.ParseArgs(args) possible from a main_test unit test? I'm just getting "undeclared name: ParseArgs", but it works when I test from package main and drop the main. prefix :-/
[21:48:51] *** Joins: christophergray (~christoph@186.151.84.137)
[21:49:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:50:30] *** Quits: christophergray (~christoph@186.151.84.137) (Client Quit)
[21:51:39] <bpalmer> cobber: you can't import package main
[21:52:14] <bpalmer> cobber: if your test is also inside package main, you don't need to import it; if it isn't, you can't (in which case you may want to structure the guts o fyour 'main' into another package which both main and your test import)
[21:52:17] <cobber> fair enough... so a main_test unit test makes no sense - that's OK
[21:52:37] <bpalmer> cobber: most unit tests should be written in the same package as what they're testing, in my opinion.
[21:53:36] <cobber> bpalmer: depends... I like to test the public API - which main doesn't have, I get that
[21:54:18] <cobber> all good, my main is basically just { opts := parseOpts(os.Args); Run(opts) }
[21:54:40] <cobber> thanks
[21:56:08] *** Quits: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[21:59:51] *** Joins: arcatech (~arcatech@user/arcatech)
[22:00:45] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:01:21] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[22:03:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Client Quit)
[22:04:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:05:13] *** Quits: mrus (~mrus@149.28.224.172) (Quit: Surfing the great wave off Kanagawa)
[22:07:11] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[22:08:32] <ramblebamble> Hi there, I am currently exploring golang and I was wondernig if there is a way to ignore a part of a JSON-value while deconding/unmarshalling? I have two keys, data and meta within the response, but only care for data,  and I would prefer json.Unmarshal because the objects are small and I don't wanna decode the values by hand in a loop
[22:09:45] <bpalmer> ramblebamble: by default object keys that don't have a struct field mapping (either implicit or explicit) are ignored, using the standard encoding/json package.
[22:10:01] *** Joins: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr)
[22:10:32] <bpalmer> if you want to explicit defer unmarshalling for another time, you can also specify that meta should be a json.RawMessage
[22:10:39] <bpalmer> s/explicit/explicitly/
[22:11:18] <ramblebamble> yes, but the dataobject I defined is nested within the data-key so the message will pretty much be {meta:ignore, data:structsIwannaHave}
[22:11:48] <ramblebamble> I was trying to do it via map but doing map[string][]DataType will cause problems because meta has a different setup
[22:12:18] <bpalmer> so, by default things that aren't in your struct are ignored, so 'type Whatever struct { Data WhateverData }
[22:15:22] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[22:15:31] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[22:16:04] *** Quits: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:16:17] <ramblebamble> bpalmer, yes is there also a way to do this 'on the fly'? The reason I was after map is that I do not really see the sense in specifying a temporary datastructure if I can avoid it
[22:16:27] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[22:17:00] <ramblebamble> Because that structure will only make sense while decoding the JSON-response
[22:18:30] <bpalmer> you can use an unnamed struct, but you can also use local type definitions
[22:19:12] <zsnes> yeah, local type def seems like a clean solution
[22:20:03] <ramblebamble> got alink for me, my search for local type def comes up empty
[22:20:40] <zsnes> it means just defining the type within the same function/scope instead of globally/file scope.
[22:22:42] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:23:03] <ramblebamble> cheers that works now thank you
[22:24:25] <ramblebamble> I have a second question, it is more of a hunch though, seeing how Unmarshal uses tags on struct fields, with `json:` prefixed to them, I assume they are expandable and everyone can define their own tag, not that I want to do that, way to advanced, just curious
[22:26:11] <bpalmer> yes, you can add arbitrary struct tags to your struct type
[22:26:21] <ramblebamble> thank you
[22:26:39] <zsnes> it requires reflection to read it though
[22:26:44] <bpalmer> by convention, the struct tag string is of the form "foo:bar,baz:quux" with them being comma-separated.
[22:27:57] <bpalmer> struct tags are visible during reflection and they take part in type identity, but are otherwise ignored.
[22:29:30] <zsnes> any reason why Go hasn't optimized accessing tags without reflection, storing it as internal struct meta data or something?
[22:29:57] *** Joins: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr)
[22:31:14] <siXy> zsnes: Because you can do that if you want your struct to carry that extra overhead, but forcing all other users to carry the overhead doesn't seem like a great idea.
[22:31:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[22:31:52] <zsnes> that makes sense
[22:32:39] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:32:39] <ramblebamble> bpalmer, I am not a language buff, but, if they are part of the type identity why are they only accessible during reflection? that would make the identity show different values(during and not during reflection) which is, at least in my mind, not really the definitin of an identity
[22:34:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:37:14] *** Quits: _pash (~pash@aaubervilliers-653-1-259-49.w82-121.abo.wanadoo.fr) (Quit: leaving)
[22:38:58] <bpalmer> I don't really get either question. They're accessible during reflection because they're metadata about the type, and reflection is when you programmatically access metadata about the type
[22:39:36] <bpalmer> same thing as if you want to programmatically check the type of a field inside another type, that information is accessible in reflection.
[22:42:47] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[22:43:43] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:44:29] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[22:45:01] *** Joins: andlabs (~andlabs@70.107.171.168)
[22:45:54] <ramblebamble> I am new to Golang, so my information might be not applicable, but I have come to understand that reflection enables the manipulation of elements in a language that would otherwise not be done, so that it a) enables the change of flow b) is not what a language would usually do, I am probably wrong the way I read your  answer, just so you may understand where the question is coming from
[22:52:30] <bpalmer> reflection is just about a program being able to look at itself. You don't need to use it most of the time because a program typically knows what it's doing
[22:52:45] <ramblebamble> Got it thanks.
[22:52:47] <bpalmer> 'var i int; ' <--- it doesn't need to figure out what type of data i is; it's an int.
[22:53:25] <bpalmer> but 'func foo(i interface{}) {' <-- either i is nil, or there's a concrete value of some concrete type. If the program wants to examine it, it has to use reflection
[22:53:34] <ramblebamble> yes in my mental model it is somehow associated with debugging, and that is not what you would wanna usually do. But that model changes slowly
[22:53:58] <bpalmer> it shows up in json encoding/decoding because the json library is handed a value of some unknown type and told "figure out how to shove this json into this type"
[22:54:26] <ramblebamble> Which is also why the value needs to be exported otherwise json cannot encode it
[22:55:46] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[22:56:48] <bpalmer> Similarly, if you have defined a struct that happens to have struct tags, like struct Location { CountryCode string `countryVersion:"ISO 3166-1 alpha 2"` } , and the program receives a value of Location, typically it knows what the CountryCode field should represent.
[22:57:45] <bpalmer> but maybe you have a few different libraries with types that use different values for CountryCodes, so you use reflection to see if the type definition happens to specify
[22:58:29] <bpalmer> but if you only had a single Location type to deal with, you don't need to use reflection, so that metadata can be ignored.
[23:00:22] <bpalmer> (but this is why the type identity comes into play: suppose you had two types both named Location and both with a CountryCode field, but one used two letter codes like "US" and one used three letter codes like "USA". You *could* use the type system to help differentiate them)
[23:00:27] <siXy> bpalmer: is that an actual ISO code for code <> country mappings that you know off by heart for some terrible reason, or did you just invent it?
[23:00:35] <bpalmer> I looked up what the ISO number was
[23:00:45] <siXy> now that is dedication :)
[23:01:18] <bpalmer> trying to come up with a tag definition that isn't encoding/decoding related is a pain and *could* be potentially meaningful is a pain:)
[23:01:25] <lungaro> having generics makes me half sad and half dissatisfied. I would not call go having generics if types dont work in methods...
[23:01:40] <lungaro> What are peoples thoughts? I guess for functions it makes sense, but this is a little of a let down given how long it took to even get this far
[23:01:42] <bpalmer> but in a previous project, I did have to deal with two different libraries wanting different ways to represent countries.
[23:02:03] <bpalmer> both, of course, in string format.
[23:02:06] <ramblebamble> ok, so one could write it out all by hand, or rely on reflection to let the program figgure it out by itself, thereby allowing for s.th. like metaprogramming?
[23:02:46] <bpalmer> ramblebamble: the programmer has to write the reflection code, but it might be easier than passing along an enum
[23:05:00] <ramblebamble> I think so to, because the enum would otherwise represent not just data but also data about the data which would make not pure(I know reserved for functions, but thinking of it as in , the data describes a given point only)
[23:05:11] <ramblebamble> s/to/too
[23:09:13] <bpalmer> the important part here: the struct tag is associated with the type, not the value.
[23:10:09] *** Joins: sharko2 (~sharko2@c148-218.icpnet.pl)
[23:11:31] <ramblebamble> yes thank you for rectifying that
[23:11:58] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:15:00] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.3)
[23:16:14] *** Quits: shtirlic_ (~shtirlic@178.70.143.240) (Remote host closed the connection)
[23:23:27] *** Quits: user914 (~user914@dcm-info-22.u-ga.fr) (Quit: Client closed)
[23:23:34] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[23:24:57] *** Joins: shtirlic (~shtirlic@178.70.143.240)
[23:26:37] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:cc32:6092:bdbf:ae3b)
[23:28:04] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:30:19] *** Joins: andlabs (~andlabs@70.107.171.168)
[23:38:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:39:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:45:04] *** Joins: jla (~jordi@64.225.79.195)
[23:46:47] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:57:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
