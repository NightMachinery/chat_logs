[00:01:41] *** Joins: frmdstryr (~jrm@172.58.203.1)
[00:02:05] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[00:02:15] *** Quits: xackus (~xackus@9-152.w.knc.pl) (Ping timeout: 256 seconds)
[00:12:58] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:16:02] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[00:16:34] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[00:27:48] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[00:28:05] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[00:30:36] <travis_griggs> I just got to the "this is how we do generics in Zig" part. This is actually kinda cool (I generally swear when I get to <generics in C++, Swift, Kotlin, et al). It reminds me of some thought experiments Gilad Bracha once wrote about for Dart/NewSpeak. Anyone know where the inspiration to do it this way came from?
[00:32:08] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:36:07] *** Quits: fleg (64bf4386e9@user/fleg) (Remote host closed the connection)
[00:39:08] <andrewrk> travis_griggs, I shared my reasoning as part of this talk: https://www.youtube.com/watch?v=Gv2I7qTux7g
[00:41:15] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[00:41:27] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[00:42:50] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Client Quit)
[00:49:39] <viric> One thing I wished zig had was some solution for the default pointer aliasing in C/C++
[00:50:07] <viric> I have no idea how though.
[00:51:01] *** Joins: d0p1__ (~d0p1@gateway/tor-sasl/d0p1)
[00:52:00] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[00:52:12] <Franciman> ok I am unable to read cachegrid and makesense of its output
[00:52:16] <Franciman> lol
[00:52:30] <viric> Franciman: use kcachegrind
[00:52:35] <Franciman> yes
[00:52:35] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:52:38] <Franciman> i can't make sense of it
[00:52:44] <Franciman> ahah
[00:54:51] *** Quits: d0p1_ (~d0p1@gateway/tor-sasl/d0p1) (Remote host closed the connection)
[00:54:51] <viric> I think valgrind will be more detailed than what perf counters can give.
[00:57:29] <Franciman> ah wait I understand something
[00:57:32] <Franciman> thanks viric 
[00:59:03] <viric> good luck
[00:59:05] <Franciman> I am not getting advantage of the fact that my stack is only accessed at the end
[00:59:22] <Franciman> I need to tweak the array_list to cache pointers near the end
[01:01:31] <viric> aliasing is so complicated... https://accu.org/journals/overload/28/160/anonymous/
[01:01:40] <viric> very annoying
[01:07:13] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:07:36] <ifreund> indeed :/
[01:08:52] <ifreund> Zig doesn't have a spec yet though and has the benefit of hindsight here, I expect that what we land on long term will be a good bit simpler/less footgunny
[01:08:54] <viric> I don't know rust but I guess that's something they want to do well.
[01:09:20] <ifreund> rust doesn't have a spec either but they don't have the excuse of being a pre-1.0 language
[01:10:00] <viric> maybe they do less "pointer" things
[01:10:37] <ifreund> they still have the unsafe {} escape hatch
[01:12:38] <viric> well yes; but I mean that maybe they can do more code without pointers
[01:13:05] <viric> no idea.
[01:14:27] <devast8a> They still have pointers, references really, but they explicitly avoid aliasing. You need to use specific reference types to be able to alias memory.
[01:15:14] <devast8a> I should clarify, they explicitly avoid aliasing memory that you can modify.
[01:15:51] <devast8a> They allow unlimited aliasing for immutable references.
[01:16:42] *** Quits: jcmoyer (~jcmoyer@user/jcmoyer) (Ping timeout: 265 seconds)
[01:16:57] *** Joins: jcmoyer (~jcmoyer@user/jcmoyer)
[01:19:57] *** Quits: d0p1__ (~d0p1@gateway/tor-sasl/d0p1) (Ping timeout: 276 seconds)
[01:33:18] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[01:34:29] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[01:34:53] <Ristovski> Hmm, any idea why `zig c++` with std::filesystem fails when targetting windows? I get `std::__1::__fs::filesystem::__current_path` and `::__wide_to_char` as undefined symbols. But from what I can read, libc++ should have the support
[01:35:02] <Ristovski> also hi devast8a :)
[01:35:14] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 256 seconds)
[01:36:24] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Client Quit)
[01:39:17] *** Joins: bindu_ (~bindu@user/bindu)
[01:40:06] <devast8a> Hey o/
[01:40:45] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:40:46] *** Quits: koakuma (~koa@user/koakuma) (Read error: Connection reset by peer)
[01:41:08] *** bindu_ is now known as bindu
[01:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[01:48:45] *** Joins: monke (~monke@user/monke)
[01:51:10] *** Joins: koakuma (~koa@user/koakuma)
[01:56:29] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[01:58:08] <_javyre> Ristovski: I could be wrong but it sounds like you're running into the fact that zig c++ has a different abi than whatever you're linking to that has been compiled with some other c++ compiler.
[01:58:37] <Ristovski> _javyre: That's the thing, I am not linking to anything
[02:00:29] <_javyre> huh :/
[02:00:49] <Ristovski> https://0x0.st/-hPh.png
[02:04:51] <andrewrk> freshcoffee, what would be the way to install gdb in zinc/linux_base.sh? 
[02:05:28] <andrewrk> oh never mind as soon as I asked, I noticed the image is debian
[02:07:04] <travis_griggs> andrewrk thanks for the link. a bit late, but nice talk
[02:07:31] <travis_griggs> (as in, me telling you "nice talk", is a bit late)
[02:07:56] <andrewrk> I'm still here :)
[02:08:06] <andrewrk> thanks!
[02:08:16] <Ristovski> huh, works with 0.6.0 on godbolt >_>
[02:08:52] <travis_griggs> in that talk, you allude to some ideas about improved safety in certain build modes. did that pan out? or still a hope? maybe i stumble on it as i go farther through the docs?
[02:09:22] <ifreund> travis_griggs: zig has 4 build modes, debug and release-safe have improved safety
[02:09:24] <andrewrk> Ristovski, hmm I wonder how to solve that. might be worth poking around in the libc++ source files and looking at some of the #defines they use, and looking at the upstream cmakelists.txt file, and looking at zig's libcxx.zig 
[02:09:38] <ifreund> release-fast and release-small disable safety for better code generation
[02:15:32] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:15:54] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[02:17:03] <Ristovski> andrewrk: also borked in 0.8.1 and 0.7.1
[02:18:38] <Ristovski> andrewrk: huh? https://github.com/ziglang/zig/blob/master/src/libcxx.zig#L117-L121
[02:20:07] <andrewrk> Ristovski, try removing the windows branch
[02:21:18] *** Quits: jokoon (~eio@2a01:e0a:542:e160:ec4a:8bf:770c:2b75) (Quit: Leaving)
[02:21:48] <Ristovski> I don't have a local dev setup to compile Zig :/
[02:22:44] * Ristovski will attempt to compile on his measly potato
[02:23:12] <andrewrk> not sure what was working in 0.6.0 because zig's ability to provide libc++ was only introduced as part of 0.7.0
[02:24:05] <andrewrk> or maybe I'm interpreting this wrong https://github.com/ziglang/zig/commit/877e4248fc1e8e28b1f43282411aa9868d6d1d9c
[02:25:05] <Ristovski> did I derp that hard? brb checking
[02:25:53] <travis_griggs> are there any more talks/posts where you talk about what you did in those modes to close the "safety" gap with Rust?
[02:26:43] <Ristovski> andrewrk: you're right, 0.6.0 uses mingw and msvcrt-os
[02:26:59] <andrewrk> mingw and msvcrt-os do not provide libc++
[02:27:06] <Ristovski> oh right
[02:27:14] <Ristovski> yeah it does have libcxx
[02:28:37] <andrewrk> travis_griggs, we haven't really focused on safety as a talking point yet. but we'll probably start doing that in a couple release cycles from now since it's all people coming from rust ever talk about
[02:30:03] <Ristovski> andrewrk: ok what the hell is happening here then: https://godbolt.org/z/rsxTaGv6W
[02:30:27] <Ristovski> oh the stdlib gets unused and I assume godbolt runs on windows
[02:30:27] <travis_griggs> i actually don't know rust at all. i've sort of avoided it. i suppose as I'm learning zig, to be objective, I need to douse myself in some rust as well, but the fanboi/pedantic nature of the community i see from a distance is off putting
[02:33:24] <Ristovski> andrewrk: Your commit was right, sorry for the bother - https://lists.llvm.org/pipermail/libcxx-dev/2020-July/000903.html, I blindly jumped to the conclusion it worked because I thought 0.6.0 on godbolt was linking with libcxx, my bad >_>
[02:36:46] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:37:17] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.3)
[02:40:13] *** Joins: frmdstryr (~jrm@172.58.203.1)
[02:42:47] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:43:14] <andrewrk> no worries
[02:46:18] <freshcoffee> andrewrk: yeah fyi, right now that img is just what it takes for ci, including deps but no extras. I'm following a similar pattern for qemu images. "ci/*"
[02:46:47] <freshcoffee> also debian was sort of an experiment. Which seems to work? But as always, if you feel a different distro is more suitable, let me know
[02:48:39] <andrewrk> freshcoffee, thanks - I got what I wanted which was just to temporarily install gdb to troubleshoot something, and I found the info I wanted
[02:49:05] <Franciman> wo trying to make things go in the cache is hard lol
[02:49:19] <freshcoffee> gimme the cache :)
[02:49:25] <Franciman> probaly I should add to each call_frame a pointer to the end of the stack
[02:49:29] <Franciman> so that it's kept in the cache
[02:49:34] <Franciman> and I can do nifty nifty thangs
[02:50:04] <Franciman> freshcoffee: ahah cache is the new cake
[02:52:26] <andrewrk> freshcoffee, i see what you did there :)
[02:53:55] <Franciman> andrewrk: your talk on data driven design was cool
[02:54:00] <Franciman> but now I want part 2, and part 3!
[02:54:01] <Franciman> :P
[02:54:04] <andrewrk> thank you :)
[02:54:22] <Franciman> I absolutely need to beat the haskell interpreter of my friend
[02:54:27] <Franciman> :P
[02:54:35] <freshcoffee> hahah healthy competition
[02:54:47] <Franciman> the cool thing of zig is that the interpreter is still almost comrephnsible
[02:54:53] <Franciman> I mean the haskell version is super nifty
[02:55:01] <Franciman> but zig version is not so bad! I can totally understand it
[02:55:04] <Franciman> in C++ i got lost many times
[02:55:46] <Franciman> now an important point will be implementing the garbage collector, if that is easy
[02:55:49] <Franciman> zig is the absolute winner
[02:58:19] <Franciman> the memory oddity is that with sum 100, I am 2x faster than even php
[02:58:29] <Franciman> but as soon as I scale to sum 10M
[02:58:33] <Franciman> it gets slow
[02:58:38] <Franciman> 2x slowe
[02:58:39] <Franciman> slower
[02:58:52] <Franciman> well sorry. I stop doing OT
[03:06:00] *** Joins: Carnun (~Carnun@host-80-43-79-110.as13285.net)
[03:13:01] *** Joins: weslem (32012e016f@2604:bf00:561:2000::12f)
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[03:16:44] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[03:17:10] *** Joins: rgrinberg (~textual@200.5.63.76)
[03:17:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:22:17] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[03:22:36] *** Joins: energizer (~energizer@user/energizer)
[03:28:32] *** Quits: travis_griggs (~travis_gr@remote.nelsonirrigation.com) (Ping timeout: 256 seconds)
[03:30:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[03:30:03] *** Quits: weslem (32012e016f@2604:bf00:561:2000::12f) (*.net *.split)
[03:30:03] *** Quits: frmdstryr (~jrm@172.58.203.1) (*.net *.split)
[03:30:03] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (*.net *.split)
[03:30:03] *** Quits: leon-p (1b22ab9492@2604:bf00:561:2000::18c) (*.net *.split)
[03:30:03] *** Quits: letoram (~bjorn@user/letoram) (*.net *.split)
[03:30:03] *** Quits: bblack (~bblack@wikimedia/bblack-WMF) (*.net *.split)
[03:30:03] *** Quits: Nilium (~sid200856@p01.sfo2.do.x.spiff.io) (*.net *.split)
[03:30:03] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[03:30:03] *** Quits: nyah (~nyah@94.6.71.219) (*.net *.split)
[03:30:03] *** Quits: viric (~viric@static-57-97-230-77.ipcom.comunitel.net) (*.net *.split)
[03:30:03] *** Quits: simonlindblad (e19c209508@2604:bf00:561:2000::17a) (*.net *.split)
[03:30:03] *** Quits: fleg2 (dfbb34cb39@user/fleg) (*.net *.split)
[03:30:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[03:30:03] *** Quits: psnszsn (7fe6b73f65@user/psnsn) (*.net *.split)
[03:30:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[03:30:03] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[03:30:03] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:03] *** Quits: utzig (d5d7f726e3@2604:bf00:561:2000::71) (*.net *.split)
[03:30:03] *** Quits: lemmi (~lemmi@user/lemmi) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: lucus (~lucus@relto.u16.nl) (*.net *.split)
[03:30:03] *** Quits: g-w1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f) (*.net *.split)
[03:30:03] *** Quits: linuxgemini (~linuxgemi@user/linuxgemini) (*.net *.split)
[03:30:03] *** Quits: novakane (ca74a093b3@user/novakane) (*.net *.split)
[03:30:03] *** Quits: andrea (3f138254b4@2604:bf00:561:2000::38) (*.net *.split)
[03:30:03] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (*.net *.split)
[03:30:03] *** Quits: gjnoonan (cb73e0a324@2604:bf00:561:2000::e) (*.net *.split)
[03:30:04] *** Quits: vladh (~vladh@yavin.vladh.net) (*.net *.split)
[03:30:09] *** Joins: Arnavion (arnavion@user/arnavion)
[03:30:11] *** Joins: simonlindblad (e19c209508@2604:bf00:561:2000::17a)
[03:30:19] *** Joins: nyah (~nyah@94.6.71.219)
[03:30:20] *** Joins: psnszsn (7fe6b73f65@user/psnsn)
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:26] *** Joins: novakane (ca74a093b3@user/novakane)
[03:30:27] *** Joins: frmdstryr (~jrm@172.58.203.1)
[03:30:39] *** Joins: lemmi (~lemmi@2001:bc8:1830:13::1)
[03:30:40] *** Joins: lucus (~lucus@relto.u16.nl)
[03:30:42] *** Joins: g-w1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:30:49] *** Joins: letoram (~bjorn@46.23.89.151)
[03:30:52] *** Quits: letoram (~bjorn@46.23.89.151) (Changing host)
[03:30:52] *** Joins: letoram (~bjorn@user/letoram)
[03:30:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:32:09] *** Joins: andrea (3f138254b4@2604:bf00:561:2000::38)
[03:32:09] *** Joins: weslem (32012e016f@2604:bf00:561:2000::12f)
[03:32:09] *** Joins: utzig (d5d7f726e3@2604:bf00:561:2000::71)
[03:32:14] *** Joins: Colt (~Colt@user/colt)
[03:32:21] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:32:23] *** Joins: gjnoonan (cb73e0a324@2604:bf00:561:2000::e)
[03:32:23] *** Joins: leon-p (1b22ab9492@2604:bf00:561:2000::18c)
[03:32:23] *** Joins: fleg2 (dfbb34cb39@user/fleg)
[03:32:23] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:32:23] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[03:32:28] *** Joins: vladh (~vladh@yavin.vladh.net)
[03:32:32] *** Quits: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[03:32:32] *** Quits: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[03:32:35] *** Joins: oats (~thomas@user/oats)
[03:33:03] *** Quits: binarycat (~binarycat@35.24.192.117) (Ping timeout: 256 seconds)
[03:33:03] *** Quits: w1ke (~w1ke@user/w1ke) (Ping timeout: 256 seconds)
[03:33:05] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[03:33:05] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[03:33:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:34:30] *** Joins: w1ke (~w1ke@user/w1ke)
[03:35:08] *** Joins: viric (~viric@static-57-97-230-77.ipcom.comunitel.net)
[03:35:22] *** Joins: bblack (~bblack@wikimedia/bblack-WMF)
[03:35:49] *** Joins: Nilium (~sid200856@p01.sfo2.do.x.spiff.io)
[03:38:32] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 240 seconds)
[03:40:13] *** Joins: outfox (~outfox@user/outfox)
[03:41:02] *** Joins: livoreno (~livoreno@user/notzmv)
[04:00:51] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[04:03:58] *** Quits: Pistahh (~pistahh@user/pistahh) (Ping timeout: 268 seconds)
[04:05:41] *** Joins: Pistahh (~pistahh@user/pistahh)
[04:10:03] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:17:49] *** Quits: marwan (~marwan@host-2-103-13-172.as13285.net) (Ping timeout: 256 seconds)
[04:28:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:33:17] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[04:33:17] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[04:33:42] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[04:33:42] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[04:34:39] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[04:35:40] *** Quits: lemmi (~lemmi@2001:bc8:1830:13::1) (Changing host)
[04:35:40] *** Joins: lemmi (~lemmi@user/lemmi)
[04:38:43] *** Quits: Carnun (~Carnun@host-80-43-79-110.as13285.net) (Quit: Client closed)
[04:39:35] <companion_cube> have you read "crafting interpreters"?
[04:44:28] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.3)
[05:10:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[05:24:53] *** Joins: jfilling (~jfilling@63.151.7.99)
[05:41:53] *** Joins: sheb (~sheb@31.223.228.71)
[05:44:04] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[05:44:20] *** Joins: sheb (~sheb@31.223.228.71)
[05:51:02] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:04:22] *** Quits: jfilling (~jfilling@63.151.7.99) (Ping timeout: 256 seconds)
[06:07:28] *** Joins: tom5760 (73d4025b14@user/tom5760)
[06:16:52] <Arnavion> https://stackoverflow.com/questions/65157883/how-to-import-zig-modules-dynamically   This is no longer possible, right? Because I get the error added by   https://github.com/ziglang/zig/commit/adc2aed587d009c0d112063fa0f3d03dedc9e50a
[06:18:01] <Arnavion> I saw   https://github.com/ziglang/zig/issues/2206   and saw that it points out that it's not necessary since @import("string literal") can be used inside ifs to have only one evaluated, though that doesn't work for the loop case
[06:18:49] *** breavyn_ is now known as breavyn
[06:32:24] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[06:32:24] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[06:32:54] *** Joins: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com)
[06:32:54] *** Joins: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com)
[06:36:31] <andrewrk> Arnavion, here's something you can do:  `pub const foo = @import("foo.zig");` for each possible file inside `pub const imports = struct { ... };` then you can use `@field(imports, name)` 
[06:37:21] <andrewrk> zig wants to know all the possibly imported files though so that it can eagerly go find them and compile them when you kick off a compilation process. the language is constrained by making it possible for a fast compiler to exist
[06:37:45] <andrewrk> that's why you have to use string literals with `@import`
[06:40:37] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[06:41:15] <Arnavion> Right, right. I was just confirming that the method in the SO answer was supposed to not work
[06:41:47] <andrewrk> confirmed
[06:41:53] <Arnavion> Yeah, thanks
[06:49:10] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 256 seconds)
[06:50:52] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[06:51:23] <andrewrk> Arnavion, I posted an additional answer to that SO link
[06:52:21] *** Joins: outfox (~outfox@213.144.147.16)
[06:52:21] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[06:52:21] *** Joins: outfox (~outfox@user/outfox)
[06:54:19] *** Joins: jfilling (~jfilling@136.36.67.80)
[07:15:44] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:16:00] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Client Quit)
[07:16:40] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:33:04] *** Quits: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[07:33:04] *** Quits: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[07:33:31] *** Joins: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com)
[07:33:31] *** Joins: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:44:08] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[08:08:58] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[08:09:11] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:25:02] *** Quits: Tharro (~Tharro@51.15.91.154) (Quit: Bye, bye!)
[08:25:48] *** Joins: Tharro (~Tharro@2001:bc8:1824:1623::1)
[09:23:03] *** Parts: signop_ (~signop@li699-102.members.linode.com) (Part)
[09:32:21] *** Joins: xfc15c0 (~xfcisco@156.202.79.14)
[09:34:11] <Arnavion> https://github.com/Arnavion/aoc2021/blob/main/src/day1.zig   Off to a good start :) 
[09:34:33] <Arnavion> (If anyone finds anything to critique, I'm all ears)
[09:35:46] *** Quits: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[09:35:46] *** Quits: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[09:36:02] *** Quits: xfc15c0 (~xfcisco@156.202.79.14) (Quit: Leaving)
[09:36:08] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[09:36:08] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[09:45:41] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[09:47:46] *** Quits: dbuckley (~dbuckley@2601:182:c77f:c13b:15a3:89d9:1828:e7ec) (Ping timeout: 260 seconds)
[09:52:50] *** Joins: dbuckley (~dbuckley@2601:182:c77f:c13b:acd3:c392:dede:4da7)
[10:04:49] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[10:18:35] *** Quits: Tekk (~tekk@66.115.189.235) (Ping timeout: 252 seconds)
[10:22:26] <andrewrk> Arnavion, if you have your input pasted as a multiline string, you might find it convenient to use std.mem.tokenize or std.mem.split
[10:22:48] <andrewrk> if you look at lib/std/mem.zig there are `test` blocks underneath the functions to show how to use them
[10:23:17] <andrewrk> see also std.fs.Dir.readFileAlloc
[10:23:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:24:03] <andrewrk> you might also want to set yourself up an arena allocator instead of GPA, unless your goal is to practice not leaking memory
[10:24:33] <andrewrk> https://github.com/ziglang/zig/blob/7355a201336c8e3892427e5932fe5cdd46cf96df/lib/std/special/build_runner.zig#L13-L17
[10:26:17] <Arnavion> The tests do use std.mem.split (see input.StringIterator). For the main execution I want to avoid reading the whole file into memory (even though it's small enough to), hence the readUntilDelimiterOrEofAlloc-based iterator
[10:26:29] <Arnavion> And yes, I do want to catch leaking memory
[10:28:12] <Arnavion> (I already leaked a bunch of times while writing this code. I've been used to languages with destructors for too long)
[10:36:23] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[10:36:23] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[10:37:02] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[10:37:02] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[10:40:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:59:33] *** Joins: voldial (~user@user/voldial)
[11:01:07] <voldial> How do I get the commands that replicate a "zig run"? I tried all the --verbose-* https://bpa.st/JSAA
[11:01:29] <voldial> 0.9.0-dev.1802+2ca5a859e
[11:06:47] <voldial> eh, got it. "zig build-exe" produces a near same binary, just 2 bytes diff... ok back to learning
[11:27:34] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:33:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:35:46] *** Quits: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net) (Read error: Connection reset by peer)
[11:37:17] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[11:37:17] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[11:37:44] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[11:37:44] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[11:55:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:57:22] *** Joins: fleg (64bf4386e9@user/fleg)
[11:58:20] *** Quits: fleg (64bf4386e9@user/fleg) (Remote host closed the connection)
[11:58:31] *** Joins: fleg (64bf4386e9@user/fleg)
[11:59:26] *** Quits: fleg (64bf4386e9@user/fleg) (Remote host closed the connection)
[12:04:01] *** fleg2 is now known as fleg
[12:04:11] *** Quits: jfilling (~jfilling@136.36.67.80) (Quit: Client closed)
[12:37:59] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[12:37:59] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[12:38:32] *** Joins: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com)
[12:38:32] *** Joins: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com)
[13:10:24] *** Joins: chgr (~ek@nat-91-137-30-14.net.encoline.de)
[13:16:09] <chgr> Hi everyone, since the advent of code has started today, I decided to try doing it with zig this year. The first thing I tried is to create an ArrayList to store some []u8 in. Does that even work?
[13:16:28] <chgr> I tried something like this: https://pastebin.com/vb1xXCfb
[13:22:06] <Franciman> awesome chgr 
[13:22:30] <Franciman> yes it works without further ado
[13:22:52] <Franciman> are you planning to put in string literals'
[13:22:54] <Franciman> ?
[13:25:35] <dutchie> string literals are []const u8 which you can't cast to []u8 (not allowed to discard const)
[13:26:10] <chgr> Yes, maybe. I tried to put in a string literal, but that did not work. I also tried to put in the result of `try in_stream.readUntilDelimiterOrEof(&buf, '\n')`, but that also failed with an error: `error: expected type '*std.array_list.ArrayListAligned([]u8,null)', found '*const [7:0]u8'
[13:26:12] <chgr>     data.append("example");`
[13:26:20] <chgr> Oh sorry, that got messy.
[13:26:48] <Franciman> what dutchie said
[13:26:55] <dutchie> so you can either change your ArrayList to take []const u8 or if you need them mutable you'll have to create an allocator and `allocator.dupe("literal")` (but then you might have to worry about freeing it)
[13:26:55] <Franciman> is the reason why it doesn't work
[13:26:59] <Franciman> it's constness
[13:27:15] <chgr> oh, I see! thanks
[13:27:43] * dutchie wheels out the showtime that helps get your head around all of these different pointer types again: https://www.youtube.com/watch?v=VgjRyaRTH6E
[13:27:46] *** Quits: viric (~viric@static-57-97-230-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[13:30:25] *** Joins: viric (~viric@static-74-45-229-77.ipcom.comunitel.net)
[13:38:47] *** Quits: tgschultz (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[13:38:47] *** Quits: tgschultz_ (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[13:39:22] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[13:39:22] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[13:39:26] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:39:45] *** Joins: bindu (~bindu@user/bindu)
[13:43:33] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Ping timeout: 252 seconds)
[13:44:55] <Franciman> this MultiArrayList is very fancy
[13:44:59] <Franciman> I am scared it may be too effective
[13:45:01] <Franciman> ahahah
[13:48:27] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[13:57:36] *** Joins: earnest (~earnest@user/earnestly)
[14:01:11] *** Quits: flyx[m] (~flyxflyxo@2a03:4000:27:3a6::1) (Quit: Bridge terminating on SIGTERM)
[14:02:42] *** Joins: flyx[m] (~flyxflyxo@2a03:4000:27:3a6::1)
[14:30:39] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[14:33:47] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:38:44] <Franciman> how do you test the speed of a piece of code in zig?
[14:39:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:57:03] *** Quits: kron (~weechat@user/qaph) (Quit: kron)
[15:06:52] *** Joins: kron (~weechat@user/qaph)
[15:12:59] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[15:19:29] <chgr> so the error was caused by not calling `init` on my ArrayList and passing an allocator
[15:20:24] <Franciman> chgr: how is it going now? 
[15:20:32] <Franciman> managede to make progress on the first AoC?
[15:22:13] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:31:08] <chgr> Oh I stumbled in a rabbithole checking out all the various Reader methods that are available...
[15:31:26] <chgr> Will probably work on the AoC sometime later tonight since I have to get some actual work done :D
[15:33:45] *** Joins: beta22 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:37] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[15:41:37] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:03] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[15:42:03] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[15:43:53] <ikskuh> Franciman: for performance, i typically use "perf stat"
[15:43:59] <ikskuh> and nanoTimestamp
[15:48:09] <Franciman> perf be it
[15:48:11] <Franciman> thanks
[15:48:18] <Franciman> I am astonished by the size of my executable
[15:48:20] <Franciman> 84kb
[15:48:27] <Franciman> the haskell interpreter is 5.6MB
[15:48:34] <ikskuh> perf is awesome
[15:50:59] <Franciman> chgr: lol good luck
[15:52:00] <daurnimator> Franciman: 84kb is still quite large unless you have some significant data tables
[15:52:24] <Franciman> I included ziglyph
[15:52:31] <Franciman> you know what, let's get rid of unicode
[15:53:13] <daurnimator> Franciman: also which release mode are you using?
[15:53:22] <Franciman> release-fast
[16:01:00] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:16:32] *** Joins: beta229 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3)
[16:16:44] *** Joins: frmdstryr (~jrm@172.58.203.1)
[16:17:45] *** Quits: beta229 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3) (Client Quit)
[16:18:08] *** Joins: beta2252 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3)
[16:19:46] *** Quits: beta22 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3) (Ping timeout: 256 seconds)
[16:27:07] <tgschultz> Franciman: there's also std.time.Timer which can be used for internally for benchmarking specific sections.
[16:31:09] <Franciman> thanks
[16:45:29] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:58:46] *** Joins: beta225265 (~beta2252@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3)
[17:02:16] *** Quits: beta2252 (~beta22@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3) (Ping timeout: 256 seconds)
[17:20:44] *** Joins: nyah (~nyah@94.6.71.219)
[17:22:27] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[17:33:15] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Quit: Vexu)
[17:34:55] *** Quits: slothby (~JoshAshby@irc.isin.space) (Quit: brb ... maybe)
[17:43:45] *** Joins: arkurious (~arkurious@user/arkurious)
[18:06:28] <chgr> is it possible to specify an output directory / filename when running `zig build-exe`?
[18:08:00] *** Quits: beta225265 (~beta2252@2409:8a5c:4c17:43b0:2866:9ac9:723b:cf3) (Ping timeout: 256 seconds)
[18:10:43] <viric> devast8a: right, I hoped rust went through a solution that moves away "default alising" in any pointer
[18:11:07] <Franciman> I second, chgr question, and also add, is it possible to use zig run to run the output of the build?
[18:11:16] <Franciman> or do I need to manually do zig-out/bin/program ?
[18:16:47] *** Joins: Guest57 (~Guest57@h-46-59-6-254.A966.priv.bahnhof.se)
[18:17:41] <ikskuh> zig run will compile and run a single file
[18:17:48] <ikskuh> "zig build run" is a configurable step
[18:17:51] <ikskuh> (if you have that)
[18:19:46] *** Quits: Guest57 (~Guest57@h-46-59-6-254.A966.priv.bahnhof.se) (Client Quit)
[18:24:37] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[18:54:27] <viric> devast8a: so I wondered if we could choose for default noalias in zig
[18:55:23] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[18:56:42] *** Joins: lumo_e (~enrico@151.29.48.90)
[19:03:04] *** Quits: hspak (~hspak@user/hspak) (Ping timeout: 268 seconds)
[19:04:51] *** Quits: chgr (~ek@nat-91-137-30-14.net.encoline.de) (Quit: WeeChat 3.3)
[19:06:00] *** Joins: slothby (~JoshAshby@irc.isin.space)
[19:07:51] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:08:47] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 252 seconds)
[19:24:55] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:31:49] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:34:53] *** Joins: nvmd (~nvmd@user/nvmd)
[19:35:27] *** Quits: frmdstryr (~jrm@172.58.203.1) (Remote host closed the connection)
[19:36:19] *** Joins: frmdstryr (~jrm@172.58.203.1)
[19:45:05] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[19:46:37] *** Joins: ManDeJan (3da94070ba@2604:bf00:561:2000::f6)
[19:47:14] <ManDeJan> Hello everyone :)
[19:47:42] *** Joins: frmdstryr (~jrm@172.58.203.1)
[19:48:09] *** Quits: ManDeJan (3da94070ba@2604:bf00:561:2000::f6) (Changing host)
[19:48:09] *** Joins: ManDeJan (3da94070ba@user/mandejan)
[20:06:49] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[20:06:49] *** Quits: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[20:07:21] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[20:07:21] *** Joins: tgschultz_ (AdiIRC@047-034-058-084.res.spectrum.com)
[20:11:15] *** Joins: Tekk (~tekk@static-198-54-128-101.cust.tzulo.com)
[20:15:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:23:47] *** Joins: rycwo (dbdb4a3e7b@sourcehut/user/rycwo)
[20:25:08] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[20:26:41] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[20:30:26] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:42:43] *** Techcable_ is now known as Techcable
[20:42:44] *** Quits: rgrinberg (~textual@200.5.63.76) (Ping timeout: 256 seconds)
[20:53:06] *** Quits: tom5760 (73d4025b14@user/tom5760) (Remote host closed the connection)
[20:53:13] *** Joins: tom5760 (73d4025b14@user/tom5760)
[21:09:14] *** Joins: thelounge2431 (6052f995@67.205.143.82)
[21:11:39] *** Quits: thelounge2431 (6052f995@67.205.143.82) (Client Quit)
[21:17:34] *** Joins: lumo_e (~enrico@151.29.48.90)
[21:19:58] *** Joins: travis_griggs (~travis_gr@2600:100f:b050:4209:c55d:32aa:fdbb:e66c)
[21:24:38] *** Quits: travis_griggs (~travis_gr@2600:100f:b050:4209:c55d:32aa:fdbb:e66c) (Ping timeout: 256 seconds)
[21:24:46] *** Joins: travis_griggs82 (~travis_gr@235.sub-174-204-67.myvzw.com)
[21:26:43] *** Joins: travis_griggs (~travis_gr@127.sub-174-204-82.myvzw.com)
[21:27:26] <travis_griggs> most language style conventions double down on snake_case or camelCase, but Zig seems to have embraced both, leveraging the difference. is that unique to zig, or borrowed from another language ecosystem i'm not familiar with?
[21:29:13] <Franciman> I think rust does it too
[21:29:26] <Franciman> CamelCase for type names
[21:29:33] <Franciman> snake_case for variables and function names
[21:29:42] <Franciman> except for builtins
[21:30:18] *** Quits: travis_griggs82 (~travis_gr@235.sub-174-204-67.myvzw.com) (Ping timeout: 256 seconds)
[21:35:12] *** Quits: kragacles (kragacles@2600:3c00::f03c:91ff:fe33:9278) (Quit: ZNC 1.8.2 - https://znc.in)
[21:36:32] *** Joins: kragacles (~kragacles@rebonack.apastron.co)
[21:37:15] <travis_griggs> i kind of like it. it gets rid of the one or the other arguments. now if we could only do that with tabs vs spaces :D
[21:50:44] *** Joins: livoreno (~livoreno@user/notzmv)
[21:50:47] *** Quits: travis_griggs (~travis_gr@127.sub-174-204-82.myvzw.com) (Quit: Client closed)
[21:51:54] *** Joins: acairncross (~aiken@106.2.143.150.dyn.plus.net)
[22:02:31] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[22:16:09] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[22:18:06] *** Joins: frmdstryr (~jrm@172.58.203.1)
[22:25:21] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[22:25:22] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[22:25:22] *** Joins: tane (~tane@user/tane)
[22:34:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:34:49] *** Joins: nvmd (~nvmd@user/nvmd)
[22:46:28] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.3)
[22:47:59] *** Joins: cturtle (~cturtle@128.187.116.8)
[23:38:39] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[23:41:25] *** Joins: rgrinberg (~textual@152.231.136.22)
[23:47:25] *** Quits: rgrinberg (~textual@152.231.136.22) (Ping timeout: 256 seconds)
