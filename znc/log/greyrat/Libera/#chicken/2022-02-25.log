[02:23:41] <Corbin> I'm contemplating implementing the "ribbon" algorithm from Wadler's "a prettier printer" (https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf) in order to have nice-looking S-expressions. Is there a better choice if I know I'm working in CHICKEN?
[02:26:54] <Zipheir> You mean, are there existing implementations?
[02:27:20] <Zipheir> I believe foof's fmt egg implements something like what Wadler described.
[03:30:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:35:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:36:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:50:38] *** Quits: crumpo (~crumpo@user/crumpo) (Quit: Buh bye)
[03:51:43] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Excess Flood)
[03:51:54] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:01:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:03:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:04:16] <zilti[m]> Ahh the elusive "nice tabular indentation, but only when it's nice". Apparently it's quite a bit more difficult to implement than it sounds in theory
[04:05:55] <zilti[m]> *when it's fitting
[04:09:53] <zilti[m]>  I think that was one of the examples a dev once gave me to illustrate his argument that "Lisp is not fully homoiconic". The other argument was that comments aren't data.
[04:10:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:12:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:19:51] <Zipheir> Of course comments are data.
[04:20:06] <Zipheir> They're S-expressions, too, if you use #;(...).
[04:20:44] <Zipheir> The idea of homoiconicity usually not very clear, I think.
[04:20:51] <Zipheir> *is usually
[04:23:29] <Zipheir> In particular, I don't understand why not being able to use `read` to get data representing comments somehow makes them "not data".  Why is `read` so special?  It's just a parser.
[04:24:00] <zilti[m]> It doesn't make it not data, but it makes it not being homoiconic
[04:24:16] <Zipheir> In what sense?
[04:24:38] <zilti[m]> You can't represent a lisp line comment as lisp data. 
[04:24:48] <zilti[m]> And same goes for the indentation, too.
[04:25:20] <zilti[m]> (Yes you could, in theory, define something for it, but there is no lisp datastructure that is delimited by a semicolon and a newline)
[04:25:28] <Zipheir> "; This is a comment" ?
[04:26:19] <Zipheir> What is a "delimited datastructure", anyway?
[04:26:28] <Zipheir> I think this is confusing syntax and semantics.
[04:27:06] *** Joins: s-liao12 (~s-liao@101.86.96.21)
[04:27:47] <Zipheir> This gets at some of my issues with "homoiconicity" http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/
[04:29:01] <zilti[m]> Wow, the author is being really deliberately obtuse in the first paragraph
[04:29:04] <Zipheir> It seems to reduce to the much less magical property of "is represented by an S-expression".
[04:29:55] <zilti[m]> It doesn't have to be just s-expressions. Clojure is a good example for that, it has a bunch of different expressions.
[04:30:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:33:07] <Zipheir> So it's just the property of using the literal syntax for a structure used by the language to write expressions in the language, then?
[04:33:57] <Zipheir> I'm not claiming that isn't useful, but I don't think it's a particularly essential or magical property of Lisp languages.
[04:34:34] <Zipheir> (Clearly McCarthy didn't think anyone would want to use it, hence M-exps.)
[04:35:02] <zilti[m]> The property of using literal syntax of data structures used by the language, yes. And I'd say the distinguishing quality of lisp languages (the very simple syntax) is a direct consequence of that.
[04:37:14] <Zipheir> I don't think that has anything to do with homoiconicity, though.  It's a simple syntax because S-expressions are fairly simple.
[04:37:51] <Zipheir> E.g. there is nothing strange about S-Haskell or S-C.
[04:38:33] <Zipheir> (And I mean without importing any S-exps into the languages themselves, i.e. Haskell lists would still be written [1, 2, 3]).
[04:39:31] <s-liao12> S-expression was born with read?
[04:39:51] <Zipheir> It's convenient for having to parse the language, but not magic, IMHO.
[04:40:48] <s-liao12> I mean that read only can work with s-expression. It does not know the syntax and the languages.
[04:40:50] <Zipheir> s-liao12: Maybe?  I have to check McCarthy's original paper and see if he called it `read` in those days.
[04:41:34] <Zipheir> Yes, read just does s-exps.
[04:42:30] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Quit: connection reset by purr)
[04:42:41] <Zipheir> The fact that Scheme lists are also (a subset of) s-exps, though, isn't important.
[04:44:23] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:46:34] <Zipheir> Hmm, the "Recursive Functions of Symbolic Expressions" paper doesn't mention read by name.
[04:46:34] <s-liao12> https://emacsninja.com/posts/forbidden-emacs-lisp-knowledge-block-comments.html
[04:48:20] *** Quits: s-liao12 (~s-liao@101.86.96.21) (Quit: Client closed)
[04:49:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:51:08] <zilti[m]> Yikes... Sometimes Emacs is extremely bizarre. But I guess that's what you get when working on software that's... Hmm, over 40 years old at this point?
[04:52:53] <zilti[m]> I am also somewhat amazed that they keep re-implementing existing features in C because nobody can be bothered to improve the bytecode compiler and/or the lisp vm
[04:54:13] <Zipheir> I still think a small, clean redo of Emacs with no obligations to backwards compat. would be a Good Thing.
[04:54:26] <Zipheir> With Scheme instead of Elisp, of course. :)
[04:54:54] <zilti[m]> Heheh :) I think the project "Guile Emacs" is still somewhat limping on
[04:55:04] <zilti[m]> Although that project's goal was to be compatible
[04:55:09] <Zipheir> Yes.
[04:55:20] <Zipheir> Hence too big a job.
[04:56:01] <zilti[m]> Also, good luck on getting a group of devs to decide on a specific Scheme implementation
[04:56:10] <Zipheir> Hahah.
[04:56:45] <Zipheir> Find some CHICKEN zealots, I guess.
[05:00:15] <s-liao> That is one of biggest legacy issue (standard and implementation).
[05:01:37] <Zipheir> Lassi (mangol) hasn't been on IRC for a while, but he wanted to write a "tiny core Emacs" SRFI (!).
[05:02:23] <zilti[m]> That sounds very ambitious
[05:04:41] <zilti[m]> Speaking of ambitious editors: I've learned about this today: https://gtoolkit.com/ It's built on top of Pharo Smalltalk, it's a persistable image, and after a first glance I'm quite impressed.
[05:06:53] <zilti[m]> It's not even that big of a step up over regular Pharo (which we used at our Uni for a bit as an intro to OOP, since our professor was involved), but they seemed to have added just the right parts, and polished it afterwards
[06:25:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:41:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:16:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:25:45] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[08:52:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:00:37] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[09:08:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:14:26] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[10:04:40] <dieggsy> zilti: re: nobody being bothered to improve the bytecode compiler there is nativecomp as of a bit ago i guess
[10:47:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:52:02] *** Quits: wxallowed (~d4@151.51.155.155) (Ping timeout: 250 seconds)
[11:04:02] *** Joins: crumpo (~crumpo@user/crumpo)
[11:22:27] *** Joins: wxallowed (~d4@37.160.29.89)
[11:39:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:19:24] *** Quits: wxallowed (~d4@37.160.29.89) (Ping timeout: 240 seconds)
[12:32:31] *** Joins: klovett (~klovett@107.127.17.177)
[12:36:06] *** Quits: klovett_ (~klovett@107.127.17.177) (Ping timeout: 256 seconds)
[12:37:53] *** Joins: C-Keen (cckeen@pestilenz.org)
[12:38:04] <C-Keen> oh here's my IRC client ;)
[12:38:09] <C-Keen> hey chickenistas!
[12:38:52] <C-Keen> mario-goulart: sorry for not answering your mail for so long but that's currently not an option for me.
[12:50:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:32:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[13:33:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:35:20] <sjamaan> hey C-Keen, LTNS!
[14:35:30] <sjamaan> How are things?
[14:42:06] <sjamaan> Oh gtg, ttyl
[14:42:57] <vandusen> SPAM! SPAM! SPAM! by freee
[14:50:22] <C-Keen> sjamaan: yes, things moved around! I am still here though :)
[15:03:24] <zilti[m]> I think I am stagnating as a developer... I looked at code I wrote a few years ago, and still think "that's good code!". Something must be wrong with me.
[15:06:15] <C-Keen> maybe the code is just good as it is
[15:15:49] <mario-goulart> C-Keen!  The commander is back!
[15:27:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:33:17] <vandusen> SPAM! SPAM! SPAM! by freeee
[16:03:02] <zilti[m]> vandusen: Gimme some of that free stuff
[16:03:05] <vandusen> zilti[m]: It implies that everything I am, everything I think, can be altered!
[16:03:45] <zilti[m]> Oh no, mutability! shudders
[16:03:50] <C-Keen> mario-goulart: hihi :)
[16:05:32] <zilti[m]> That reminds me. I've still never played Commander Keen.
[16:07:31] <C-Keen> zilti[m]: https://www.playdosgames.com/play/commander-keen-1/
[16:08:20] <zilti[m]> C-Keen: I'm more on the side of having an actual download ^^ https://www.gog.com/game/commander_keen_complete_pack
[16:08:56] <C-Keen> zilti[m]: yay :D
[16:08:59] *** Quits: C-Keen (cckeen@pestilenz.org) (Quit: C-Keen)
[16:09:44] *** Joins: C-Keen (cckeen@pestilenz.org)
[16:09:54] <C-Keen> oops :)
[16:10:24] <zilti[m]> Why oops? 
[16:12:00] <zilti[m]> Hmm seems like despite being called "Complete Pack" two games are missing. Oh well. 
[16:28:02] *** Quits: C-Keen (cckeen@pestilenz.org) (Quit: C-Keen)
[16:28:09] *** Joins: C-Keen (cckeen@pestilenz.org)
[16:28:13] *** Quits: C-Keen (cckeen@pestilenz.org) (Client Quit)
[16:30:15] *** Joins: C-Keen (cckeen@pestilenz.org)
[16:35:40] *** Quits: C-Keen (cckeen@pestilenz.org) (Quit: C-Keen)
[16:38:46] *** Joins: C-Keen (cckeen@pestilenz.org)
[16:40:52] *** Quits: C-Keen (cckeen@pestilenz.org) (Client Quit)
[16:41:00] *** Joins: C-Keen (cckeen@pestilenz.org)
[16:41:05] <C-Keen> ah finally
[16:41:09] <C-Keen> sorry for the noise
[17:08:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:08:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b5ed:7ad4:d3ea:f759)
[17:08:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b5ed:7ad4:d3ea:f759) (Changing host)
[17:08:23] *** Joins: skapata (~Skapata@user/skapata)
[17:31:43] *** Parts: amk (~amk@109.255.169.126) ()
[17:51:09] *** Joins: m455 (~m455@user/m455)
[17:52:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:24:54] *** Joins: ublx (~ublx@user/ublx)
[19:57:11] *** form_feed is now known as \f
[21:52:36] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:84a:9755:adea:aaf7)
[21:52:36] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:84a:9755:adea:aaf7) (Changing host)
[21:52:36] *** Joins: skapate (~Skapata@user/skapata)
[21:55:06] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[22:18:44] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[22:20:10] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 250 seconds)
[22:27:37] <jcroisant> I think https://wiki.call-cc.org/man/5/Foreign%20type%20specifiers#integers is out of date. It says that integer32, integer64, long, etc. overflow into a flonum if they don't fit in a fixnum, but in C5 they overflow into a bignum, right?
[22:35:28] *** mdhughes_ is now known as mdhughes
[23:55:44] <klovett> right
