[00:00:17] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[00:00:41] *** Joins: alx741 (~alx741@157.100.197.240)
[00:00:51] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[00:02:19] *** Quits: yauhsie__ (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:02:56] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:03:01] *** Joins: jespada (~jespada@87.74.36.188)
[00:03:14] *** Parts: meltedbrain_y2k (~tekserf@47.61.115.91) ()
[00:05:57] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:7b68:5346:f621:6fdc) (Ping timeout: 240 seconds)
[00:06:51] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:07:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:07:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:08:10] *** Joins: alx741 (~alx741@157.100.197.240)
[00:11:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:12:31] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:15:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:19:39] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[00:22:37] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[00:26:48] *** Joins: alp (~alp@user/alp)
[00:27:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:27:25] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[00:27:40] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:28:13] *** Joins: alx741 (~alx741@157.100.197.240)
[00:31:00] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:32:36] *** Quits: Megant (megant@user/megant) (Ping timeout: 268 seconds)
[00:33:29] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:34:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[00:34:13] *** Joins: Megant (megant@user/megant)
[00:34:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[00:35:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:37:32] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[00:38:28] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[00:38:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:39:05] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[00:39:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[00:40:21] *** Quits: fendor_ (~fendor@178.115.38.12.wireless.dyn.drei.com) (Remote host closed the connection)
[00:40:22] *** Quits: briandaed (~root@109.95.143.81.r.toneticgroup.pl) (Quit: leaving)
[00:43:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[00:43:59] <dminuoso> Is there a foolproof guide of broad GHC compatibility for MonadFail in such a way to not provoke warnings on any GHC?
[00:44:09] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:44:28] *** Joins: Guest83 (~Guest83@181.229.128.244)
[00:44:48] <Guest83> better compiler for beginners
[00:45:03] <Guest83> ?????
[00:46:03] <Cale> Guest83: GHC is really the only practical choice at the moment.
[00:46:03] <ski> compiler, or implementation ?
[00:47:05] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:47:18] <Guest83> for install all new
[00:47:24] <sm> https://code.world and https://code.world/haskell
[00:48:53] *** Quits: slack1256 (~slack1256@186.11.100.54) (Remote host closed the connection)
[00:48:55] *** Joins: alx741 (~alx741@157.100.197.240)
[00:50:26] <geekosaur> hugs is still usable if not being developed any more
[00:51:15] * ski . o O ( Helium )
[00:51:28] <janus> dminuoso: if you define the MonadFail on the earliest GHC with the class, and exclude the Monad(fail) definition on the earliest GHC version that warns with that defintion, that should cover it?
[00:52:09] <janus> dminuoso: you need an ifdef for the import of Control.Monad.Fail too as shown in the wiki article
[00:52:24] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:52:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:52:51] <dminuoso> janus: The wiki article has some version mismatching between the specified base versions and the GHC versions in the comments
[00:53:09] <dminuoso> #if !MIN_VERSION_base(4,11,0)
[00:53:12] <dminuoso>  -- Monad(fail) was removed in GHC 8.8.1
[00:53:29] <dminuoso> So if I read snippets like this, I get headaches.
[00:54:05] <dminuoso> (In case you're not spotting it, base-4.11.0 corresponds to GHC 8.4.1)
[00:54:30] <janus> oh sorry, that looks like it was my fault :O
[00:56:06] <ski> Guest83 : do you have an intro text to follow ?
[00:57:26] <janus> it would be clearer if the comment and the ifdef corresponded to each other
[00:58:23] <janus> but there was a transitionary period where you could define fail on Monad even though MonadFail already existed. since it would be nice to have the wiki avoid suggesting code that would warn, i should find out which versions allow you to have the code with no warning
[00:58:44] *** Quits: byorgey (~byorgey@155.138.238.211) (Quit: leaving)
[00:59:09] <dminuoso> janus: Mmm, it also seems MonadFail is exported via Prelude from some GHC version on forward as well, but its not mentioned which that is.
[01:00:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:00:04] <dminuoso> With some creativity it could be inferred that this might be the case from 8.8.1
[01:01:40] <janus> that would be surprising since the code looks like it is older than 8.8.1 (since it referred to 7.16 when it was written)
[01:02:04] <janus> if you click the link to quchen's article, that is what was copied into the wiki
[01:02:10] <janus> and it talks about 7.16
[01:02:51] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 2.8)
[01:03:07] <dminuoso> Uh, so MonadFail is exported since 7.16, while 8.0 lists `Add module Control.Monad.Fail with new class MonadFail(fail)`?
[01:03:11] <dminuoso> Sorry!
[01:03:15] <dminuoso> Uh, so MonadFail is exported from Prelude since 7.16, while 8.0 lists `Add module Control.Monad.Fail with new class MonadFail(fail)`?
[01:03:53] <dminuoso> Do you see why the article is not quite comforting?
[01:03:57] <janus> 7.16 doesn't exist, it was extrapolated
[01:03:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:04:14] <dminuoso> Ah sorry
[01:04:22] <dminuoso> I misinterpreted
[01:04:37] <janus> the article is confusing because the comment and the ifdef refer to different versions, because of the transitionary period
[01:05:19] <janus> after work i will experiment
[01:05:28] <janus> and see where the warnings appear
[01:05:44] <dminuoso> Dont worry, I'll gladly do this myself.
[01:05:57] <dminuoso> How about this, Ill share my findings and you adjust the wiki?
[01:06:02] <janus> sure
[01:06:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[01:09:10] *** Joins: alx741 (~alx741@157.100.197.240)
[01:10:05] *** Joins: Akiva (~Akiva@user/Akiva)
[01:11:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[01:15:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:16:36] *** Joins: dcoutts (~duncan@82-132-232-248.dab.02.net)
[01:16:39] *** Joins: alx741 (~alx741@157.100.197.240)
[01:16:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[01:19:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:19:32] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[01:19:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[01:20:29] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:20:45] *** Quits: deadmarshal (~deadmarsh@95.38.119.14) (Ping timeout: 256 seconds)
[01:23:12] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[01:24:45] *** Joins: alx741 (~alx741@157.100.197.240)
[01:27:18] *** Joins: byorgey (~byorgey@155.138.238.211)
[01:28:08] <mrianbloom> Is it possible to write a lens that is a simple composition over the head of a non-empty list?
[01:28:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:28:40] <mrianbloom> I feel like I did this a long time ago but that library has changed a lot since then.
[01:29:22] <dminuoso> mrianbloom: What do you mean by "composition over"?
[01:30:34] <janus> mrianbloom did you see Control.Lens.Cons which has _head (a Traversal')
[01:31:42] <janus> % :t _head
[01:31:42] <yahb> janus: (Cons s s a a, Applicative f) => (a -> f a) -> s -> f s
[01:31:44] <dminuoso> janus: Okay I think I know what I needed. So MonadFail is also exported via Prelude since 8.8.1 which I think is noteworthy.
[01:31:56] <mrianbloom> I see, this has a Maybe type though am I correct.
[01:32:01] <dminuoso> Also I just conjured up the trick of conditionally doing `#ifdef ... import Prelude hiding (fail) #endif`
[01:32:26] <mrianbloom> Let me write a little example of what I'm trying to do in the repl.
[01:33:07] <dminuoso> janus: _head wont work on a NonEmpty
[01:33:28] <dminuoso> Or does it not?
[01:33:32] <Cale> :t let headNonEmpty f (x :| xs) = fmap (\x' -> x' :| xs) (f x) in headNonEmpty
[01:33:33] <lambdabot> Functor f => (t -> f t) -> NonEmpty t -> f (NonEmpty t)
[01:33:43] <Cale> ^^ that's a lens
[01:33:51] <dminuoso> I recall some discussion that `_head` requires unconsing, but you cant do that to a NonEmpty
[01:34:08] <mrianbloom> Ahh, headNotEmpty
[01:34:09] *** Joins: alx741 (~alx741@157.100.197.240)
[01:34:18] <mrianbloom> Who would have thought!
[01:34:19] <Cale> mrianbloom: I just implemented that, mind
[01:34:32] <dminuoso> % _headNE :: Lens' (NonEmpty a) a; _headNE f (a :| as) = (:| as) <$> f a
[01:34:33] <yahb> dminuoso: ; <interactive>:19:19: error:; Not in scope: type constructor or class `NonEmpty'; Perhaps you meant `NonEmptyF' (imported from Data.Functor.Base); <interactive>:19:47: error:; Not in scope: data constructor `:|'; Perhaps you meant one of these: `Seq.:<' (imported from Data.Sequence), `:<' (imported from Control.Lens), `Seq.:>' (imported from Data.Sequence)
[01:34:40] <dminuoso> % import Data.List.NonEmpty
[01:34:40] <yahb> dminuoso: 
[01:34:43] <dminuoso> % _headNE :: Lens' (NonEmpty a) a; _headNE f (a :| as) = (:| as) <$> f a
[01:34:43] <yahb> dminuoso: 
[01:35:02] <dminuoso> Ah but it looks the same as Cale's
[01:35:06] <Cale> dminuoso: that's... yeah
[01:35:33] <dminuoso> An alternative trick I just found
[01:35:41] <dminuoso> % _headNE = _Wrapped . _1
[01:35:42] <yahb> dminuoso: 
[01:35:45] <Cale> The general pattern is you deconstruct your datastructure into a function which would replace the given thing with a new value, and the new value, and then you fmap the one over f of the other.
[01:35:49] *** Joins: alx741_ (~alx741@157.100.197.240)
[01:35:53] <dminuoso> % :t _headNE
[01:35:53] <yahb> dminuoso: (Rewrapped s t, Rewrapped t s, Functor f, Field1 (Unwrapped s) (Unwrapped t) a b) => (a -> f b) -> s -> f t
[01:35:57] <dminuoso> Dont mind the type!
[01:36:11] <Cale> er, and the value of the thing that was in the hole, rather
[01:36:48] <janus> do you need to support GHCs from before the MonadFail transition got going? if you don't, you can just avoid using Prelude.fail in general. always use it qualified
[01:36:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:37:07] <dminuoso> janus: Im using aeson.
[01:37:19] <dminuoso> Im not seeing any official way to fail a parser other than `fail`
[01:37:54] <ski> any `empty' or `mzero' ?
[01:38:14] <dminuoso> I guess those could work as well, but they wouldnt let me produce a diagnostic at all
[01:38:20] <janus> you misunderstand. Prelude may reexport Control.Monad.MonadFail and for other versions it reexports Control.Monad(Monad(fail)). that doesn't mean you need to use it
[01:38:26] <dminuoso> I like giving my users at least a very rough idea why their JSON input was rejected.
[01:38:29] <janus> i am just saying you don't need to have a conditional Prelude import
[01:39:04] <janus> because nobody is forcing you to use fail directly from prelude, even on the oldest versions, you could use fail imported in a qualified manner, no?
[01:39:04] *** Quits: alx741_ (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:39:25] <dminuoso> Mmm, well I have to use whatever aeson is doing I guess
[01:39:36] <dminuoso> So let me look at their ifdefing
[01:40:14] <janus> why would you? aeson doesn't care whether you get fail through a reexport in the Prelude module or not
[01:40:35] *** Quits: jespada (~jespada@87.74.36.188) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:40:48] <dminuoso> Huh? Because they can easily write non-coherent instances?
[01:41:16] <dminuoso> The fact that they're forcing you to use `fail` in the first place is a bit concering already
[01:42:13] <dminuoso> I dont know, cant wrap my head around it
[01:42:15] *** Joins: jespada (~jespada@87.74.36.188)
[01:42:44] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:43:24] <janus> if aeson is written sensibly, it doesn't matter whether you call MonadFail(fail) or Monad(fail), they should do the same
[01:43:56] <janus> what do you mean by non-coherent? that those two methods don't do the same?
[01:47:54] <dminuoso> Yeah
[01:49:45] *** Joins: deadmarshal (~deadmarsh@95.38.114.73)
[01:50:52] *** Quits: michalz2 (~michalz2@185.246.204.87) (Remote host closed the connection)
[01:50:52] *** Quits: michalz (~michalz@185.246.204.87) (Remote host closed the connection)
[01:50:59] <janus> do you need to support GHC versions from before MonadFail was created?
[01:51:22] <dminuoso> No, right now 8.6 to 8.10 is fine by me
[01:52:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:52:25] <janus> well then you can just import MonadFail qualified and always call its fail. then your constraints will also require MonadFail and your haskell library consumers will have less work in the future
[01:53:43] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:54:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.73) (Ping timeout: 256 seconds)
[01:56:03] *** Joins: alx741_ (~alx741@157.100.197.240)
[01:56:53] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[01:58:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[01:59:12] *** Quits: alx741_ (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:00:17] *** Joins: Topsi (~Tobias@dyndsl-037-138-064-017.ewe-ip-backbone.de)
[02:04:21] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:04:57] *** Parts: choucavalier (~choucaval@peanutbuttervibes.com) (WeeChat 3.4)
[02:06:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[02:09:05] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:13:55] *** Quits: dcoutts (~duncan@82-132-232-248.dab.02.net) (Read error: Connection reset by peer)
[02:13:55] *** Quits: sharky2 (~bc8147f2@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[02:15:07] <dminuoso> janus: And where do I import MonadFail from qualified in 8.10?
[02:15:45] <dminuoso> Oh wait Control.Monad.Fail is still there, sint it
[02:16:18] *** Joins: alx741_ (~alx741@157.100.197.240)
[02:16:36] <janus> % :m +Control.Monad.Fail
[02:16:36] <yahb> janus: 
[02:16:46] <EvanR> :t fail
[02:16:47] <lambdabot> MonadFail m => String -> m a
[02:17:17] <EvanR> > fail "the answer to life universe and everything" :: Maybe Int
[02:17:19] <lambdabot>  Nothing
[02:17:36] <EvanR> awkward
[02:18:56] <EvanR> > mzero :: Either String Int
[02:18:57] <lambdabot>  Left ""
[02:19:05] *** Quits: alx741_ (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:19:14] <dminuoso> It's just strange that fail takes a String at all
[02:19:34] <dminuoso> Doesn't quite fit the origin of it
[02:20:39] <monochrom> The origin is compiler-generated error message.
[02:21:12] <dminuoso> What would the compiler insert there, exactly?
[02:21:26] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.na.cust.bahnhof.se) (Read error: Connection reset by peer)
[02:21:34] <dminuoso> % do Just x <- Nothing; pure ()
[02:21:35] <yahb> dminuoso: Nothing
[02:21:36] <monochrom> "do { Just x <- foo }" is desugared to "foo >>= \case Nothing -> fail "inexhaustive pattern matching etc etc""
[02:22:09] <EvanR> never knew that
[02:22:14] <monochrom> % do {Just x <- return Nothing; return x} :: IO Int
[02:22:14] <yahb> monochrom: *** Exception: user error (Pattern match failure in do expression at <interactive>:30:5-10)
[02:23:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
[02:23:38] <EvanR> User error? I beg your pardon
[02:23:45] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:23:49] <monochrom> IO's fail is error
[02:24:04] <monochrom> Maybe's fail is const Nothing. Likewise for [].
[02:24:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:24:17] <dminuoso> Why is IO's fail error, when you already have IO exceptions at your disposal..
[02:24:21] <maerwald> monochrom: IO's fail is an exeption
[02:24:31] <EvanR> yeah, userError
[02:24:44] <monochrom> Oops yeah.
[02:24:50] <EvanR> it just sounds wrong out of context xD
[02:25:13] <EvanR> User only used do notation fail features provided by Compiler, don't blame me
[02:26:39] <monochrom> IO is probably the only one that cares about the error message. Most other MonadFail instances really just go mzero.
[02:26:58] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:27:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[02:27:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[02:27:42] <janus> and Aeson's Parser...
[02:27:58] <EvanR> > do { Right x <- Left 99; return x } :: Either String Char
[02:27:59] <lambdabot>  error:
[02:27:59] <lambdabot>      • No instance for (MonadFail (Either String))
[02:28:00] <lambdabot>          arising from a do statement
[02:28:57] <EvanR> MonadFailed
[02:29:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:29:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:29:41] *** Joins: wroathe (~wroathe@user/wroathe)
[02:30:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:31:42] *** Quits: MatthiasG2 (~matthias@i6DFA038C.versanet.de) (Quit: Lost terminal)
[02:32:23] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[02:33:31] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (Ping timeout: 256 seconds)
[02:33:58] *** Quits: adnaahm (~adnaahm@host-251-net-64-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[02:34:08] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[02:34:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:37:15] *** Quits: pgib (~textual@173.38.117.89) (Ping timeout: 256 seconds)
[02:39:01] *** Quits: phma (phma@2001:5b0:211c:a988:8f1d:f7a6:3d8d:dc0c) (Quit: Konversation terminated!)
[02:39:31] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[02:40:04] *** Joins: phma (phma@2001:5b0:211c:a988:4657:1b6d:fa0b:fae3)
[02:42:19] *** Joins: alx741 (~alx741@157.100.197.240)
[02:42:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:43:57] <ski> @undo do {Just x <- return Nothing; return x}
[02:43:57] <lambdabot> return Nothing >>= \ a -> case a of { Just x -> return x; _ -> fail ""}
[02:44:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[02:45:35] *** Axma76527 is now known as Axman6
[02:45:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:52:34] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:52:52] *** Quits: phma (phma@2001:5b0:211c:a988:4657:1b6d:fa0b:fae3) (Read error: Connection reset by peer)
[02:53:17] *** Joins: phma (~phma@host-67-44-208-91.hnremote.net)
[02:53:34] <janus> awpr: something i forgot is that GHC 9.2 sets PolyKinds by default since it is part of GHC2021. so that may have played a role
[02:54:00] <janus> awpr: swamp-agr let me know https://github.com/GetShopTV/swagger2/pull/233#issuecomment-1029474729
[02:54:15] *** Quits: Guest83 (~Guest83@181.229.128.244) (Ping timeout: 256 seconds)
[02:55:17] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[02:55:34] <monochrom> Interesting. Maybe add {-# language NoPolyKinds #-} and see what happens.
[02:58:47] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[02:58:47] <janus> yeah i did, and then it finds the instance. even if it is explicitly derived... 
[02:59:09] *** Joins: nitrix (~nitrix@user/nitrix)
[02:59:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:59:58] <janus> i am confused since the existence of an instance shouldn't affect whether PolyKinds is enabled or not
[03:00:09] <janus> but anyway, there is that other compiler bug that makes the impossible happen
[03:00:13] *** Joins: dcoutts (~duncan@109.144.215.134)
[03:00:30] <janus> so 9.2 is unusable for this project anyway, it seems
[03:02:19] *** Joins: AlexNoo_ (~AlexNoo@94.233.241.94)
[03:02:59] *** Quits: Topsi (~Tobias@dyndsl-037-138-064-017.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[03:03:53] *** Quits: Alex_test (~al_test@178.34.151.37) (Ping timeout: 256 seconds)
[03:04:14] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:04:41] *** Quits: AlexZenon (~alzenon@178.34.151.37) (Ping timeout: 256 seconds)
[03:06:02] *** Quits: AlexNoo (~AlexNoo@178.34.151.37) (Ping timeout: 250 seconds)
[03:06:50] <janus> well, for it's test suite at least...
[03:07:39] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:08:52] *** Joins: Alex_test (~al_test@94.233.241.94)
[03:09:04] *** Joins: AlexZenon (~alzenon@94.233.241.94)
[03:11:00] *** Joins: alx741 (~alx741@157.100.197.240)
[03:12:26] *** Quits: max22- (~maxime@2a01cb08833598004d3ba66ae954fefa.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:13:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:13:54] *** Joins: alp (~alp@user/alp)
[03:15:07] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:20:57] <Axman6> just check in a DeferredTypeErrors if it's a test suite >_>
[03:21:04] <Axman6> chuck*
[03:31:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:31:56] *** Joins: alx741 (~alx741@157.100.197.240)
[03:36:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:37:03] *** Joins: Akiva (~Akiva@user/Akiva)
[03:39:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:43:11] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[03:43:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:43:31] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[03:45:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[03:46:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:46:35] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[03:46:51] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:47:48] *** Joins: dut (~dut@user/dut)
[03:50:05] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:51:43] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[03:52:24] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:53:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:53:36] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[03:56:17] *** Joins: alx741 (~alx741@157.100.197.240)
[03:59:39] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:59:57] *** Quits: emf (~emf@2620:10d:c090:400::5:e4c1) (Ping timeout: 240 seconds)
[04:01:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:01:10] *** Joins: emf (~emf@163.114.132.4)
[04:05:53] *** Quits: emf (~emf@163.114.132.4) (Ping timeout: 256 seconds)
[04:06:47] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:08:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258)
[04:12:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258) (Remote host closed the connection)
[04:12:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:14:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:17:26] *** Joins: alx741 (~alx741@157.100.197.240)
[04:18:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:21:30] *** Joins: wroathe (~wroathe@user/wroathe)
[04:21:35] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::80f1)
[04:22:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:29:15] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[04:29:57] *** Quits: dcoutts (~duncan@109.144.215.134) (Ping timeout: 240 seconds)
[04:30:37] *** Quits: vglfr (~vglfr@88.155.40.186) (Ping timeout: 240 seconds)
[04:31:26] <awpr> I'm not sure I follow.  I thought you said removing the redundant standalone Typeable instances fixed the problem? 
[04:31:32] *** Joins: vglfr (~vglfr@88.155.40.186)
[04:31:57] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:32:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:51] <awpr> oh, is it that fixing it required both NoPolyKinds _and_ removing the instances?
[04:33:10] *** Joins: califax (~califax@user/califx)
[04:37:29] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[04:38:17] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[04:38:36] *** Joins: alx741 (~alx741@157.100.197.240)
[04:39:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:40:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:40:51] *** Quits: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[04:41:01] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[04:41:20] *** Joins: alp (~alp@user/alp)
[04:44:37] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[04:45:17] *** Joins: califax- (~califax@user/califx)
[04:46:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:46:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:46:40] *** califax- is now known as califax
[04:47:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:58:41] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Ping timeout: 245 seconds)
[04:59:05] *** Joins: alx741 (~alx741@157.100.197.240)
[05:00:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[05:03:21] *** Quits: dut (~dut@user/dut) (Read error: Connection reset by peer)
[05:03:43] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:03:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:04:34] *** Joins: alx741 (~alx741@157.100.197.240)
[05:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:06:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:13:13] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:13:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:13:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[05:21:15] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[05:22:59] *** Joins: hyiltiz (~quassel@31.220.5.250)
[05:29:03] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:32:22] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[05:32:52] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:8299:55f4:a45f:d9c3)
[05:33:21] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:39:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258)
[05:40:49] *** Joins: rusrushal13 (~rusrushal@2409:4056:9:1708:2c2:74fb:7af9:78dc)
[05:41:21] *** Joins: vysn (~vysn@user/vysn)
[05:43:37] *** Quits: mmhat (~mmh@55d48978.access.ecotel.net) (Ping timeout: 240 seconds)
[05:44:38] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 268 seconds)
[05:46:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:54] *** Joins: califax- (~califax@user/califx)
[05:50:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258) (Remote host closed the connection)
[05:51:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:54:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:54:15] *** califax- is now known as califax
[05:57:17] *** Quits: xff0x (~xff0x@2001:1a81:53e8:2500:a7da:afdc:1a91:3063) (Ping timeout: 240 seconds)
[05:59:18] *** Joins: xff0x (~xff0x@2001:1a81:5224:e000:4717:65df:57b3:7708)
[06:00:56] *** Quits: jinsun__ (~quassel@user/jinsun) (Read error: Connection reset by peer)
[06:02:37] *** Joins: jinsun (~quassel@user/jinsun)
[06:02:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:03:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:08:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:09:32] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:09:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:10:53] *** Quits: rusrushal13 (~rusrushal@2409:4056:9:1708:2c2:74fb:7af9:78dc) (Ping timeout: 256 seconds)
[06:12:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[06:13:43] *** Joins: razetime (~quassel@49.207.209.26)
[06:15:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:17:59] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[06:19:08] *** Joins: andreabedini (~andreabed@8s8kj6nrww5p5nzkz2zz.ip6.superloop.com)
[06:30:10] *** Quits: asivitz (uid178348@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:36:28] *** Joins: Ssorjkokhn (~Ssorjkokh@65.155.193.58)
[06:40:23] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:41:49] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[06:46:47] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d15:a022:862f:921f:d1a9:883d)
[06:48:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:53:38] *** Joins: cynomys (~cynomys@user/cynomys)
[06:58:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[07:01:46] *** Quits: phma (~phma@host-67-44-208-91.hnremote.net) (Read error: Connection reset by peer)
[07:02:40] *** Quits: Ssorjkokhn (~Ssorjkokh@65.155.193.58) (Quit: Client closed)
[07:07:34] *** Joins: phma (~phma@host-67-44-208-198.hnremote.net)
[07:09:35] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[07:10:49] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: farewell)
[07:11:10] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:11:14] *** Joins: modnar (~modnar@shell.sonic.net)
[07:11:57] *** Quits: td_ (~td@94.134.91.183) (Ping timeout: 240 seconds)
[07:13:51] *** Quits: miremeister (uid387155@id-387155.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:14:02] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:10] *** Joins: td_ (~td@muedsl-82-207-238-085.citykom.de)
[07:15:16] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:19:22] *** Joins: mbuf (~Shakthi@122.174.58.23)
[07:19:27] *** Quits: vglfr (~vglfr@88.155.40.186) (Ping timeout: 256 seconds)
[07:20:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:22:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:25:55] *** Joins: hippoid (~hippoid@184.105.3.82)
[07:26:08] *** Quits: hippoid (~hippoid@184.105.3.82) (Client Quit)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:31:21] *** Joins: haasn (~nand@haasn.dev)
[07:33:46] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[07:33:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:36:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:36:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:36:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:37:57] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[07:38:15] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[07:40:56] *** Joins: nunggu (~q@user/nunggu)
[07:42:24] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:44:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:44:40] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[07:48:20] *** Quits: phma (~phma@host-67-44-208-198.hnremote.net) (Read error: Connection reset by peer)
[07:51:03] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[07:52:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[07:53:26] *** Joins: burnsidesLlama (~burnsides@client-8-80.eduroam.oxuni.org.uk)
[07:53:41] *** Joins: phma (~phma@2001:0:c38c:c38c:146a:837a:bcd3:2f88)
[07:57:39] *** Quits: burnsidesLlama (~burnsides@client-8-80.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[08:01:07] *** Quits: phma (~phma@2001:0:c38c:c38c:146a:837a:bcd3:2f88) (Ping timeout: 250 seconds)
[08:01:13] *** Joins: phma_ (phma@2001:5b0:210d:a008:2b93:5e3e:cefa:7af9)
[08:05:33] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[08:07:27] *** Joins: nunggu (~q@user/nunggu)
[08:09:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[08:10:30] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[08:10:52] *** Joins: modnar (~modnar@shell.sonic.net)
[08:29:57] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[08:37:23] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (Remote host closed the connection)
[08:38:07] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[08:38:23] *** Joins: zebrag (~chris@user/zebrag)
[08:41:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[08:42:53] *** Joins: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net)
[08:44:00] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:44:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:44:50] *** Joins: jinsun (~quassel@user/jinsun)
[08:46:34] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:46:48] *** Joins: sharky2 (~bc8147f2@cerf.good1.com)
[08:49:00] <sharky2> hi. I'm trying to read haskell show string from a file, and it works fine, except I get "Exception: Prelude.read: no parse" if the line is invalid. this shouldn't happen in practice, since file is computer generated, but I still want to handle it
[08:49:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:49:51] <ski> > (reads :: ReadS Integer) "123abc"
[08:49:53] <lambdabot>  [(123,"abc")]
[08:50:01] <ski> > (reads :: ReadS Integer) "abc"
[08:50:03] <lambdabot>  []
[08:50:42] <ski> > case [n | (n,s) <- (reads :: ReadS Integer) "  123  ",("","") <- lex s] of [n] -> Just n; _ -> Nothing
[08:50:44] <lambdabot>  Just 123
[08:51:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:51:38] <sharky2> thanks. ReadS Integer is a bit confusing. is that required or can haskell figure out the types
[08:51:40] <ski> > Text.Read.readMaybe "  123  " :: Maybe Integer
[08:51:42] <lambdabot>  Just 123
[08:52:44] <ski> > case [ns | (ns,s) <- replicateM 3 (StateT (reads :: ReadS Integer)) `runStateT` "  123  45  6  ",("","") <- lex s] of [ns] -> Just ns; _ -> Nothing
[08:52:46] <lambdabot>  Just [123,45,6]
[08:52:50] <ski> > case [ns | (ns,s) <- many (StateT (reads :: ReadS Integer)) `runStateT` "  123  45  6  ",("","") <- lex s] of [ns] -> Just ns; _ -> Nothing
[08:52:51] <lambdabot>  Just [123,45,6]
[08:54:01] <sharky2> :t readMaybe
[08:54:02] <lambdabot> Read a => String -> Maybe a
[08:55:37] *** Joins: cynomys (~cynomys@user/cynomys)
[08:57:02] <ski> "is that required or can haskell figure out the types" -- usually/commonly the context determines which type of value you want to read (and then you don't need the type ascriptions). but sometimes it doesn't pin it down ..
[08:57:33] <Axman6> sometimes there are an infinite number of possible types, and GHC finds that a bit much
[08:58:23] <sharky2> out of curiosity, there's no way to catch exception returned by read?
[08:58:37] <ski> you're better of using `reads' or `readMaybe'
[08:58:58] <Axman6> you can use evaluate (read foo) `catch` \e -> ... but don't do that
[08:59:12] <Axman6> because we have pure ways to finding out if it failed to parse or not
[08:59:21] <Axman6> readMay is probably the best way to go
[08:59:24] <ski> (you can catch evaluation exceptions in `IO', but it's clunky .. only if you really need to)
[08:59:32] <Axman6> you can't catch exceptions in pure code
[09:01:18] *** Joins: deadmarshal (~deadmarsh@95.38.114.73)
[09:04:19] <ski>   type ReadS a = String -> [(a,String)]  -- fwiw
[09:04:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:04:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:04:38] *** Joins: wroathe (~wroathe@user/wroathe)
[09:04:57] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:05:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.73) (Ping timeout: 256 seconds)
[09:06:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:11:09] <sharky2> since I'm mostly just learning, how would I go about catching read's exception? catch seems to require exception type, what do I put as the type?
[09:11:21] <dsal> :t readMaybe
[09:11:22] <lambdabot> Read a => String -> Maybe a
[09:12:02] <dsal> sharky2: Exceptions are for IO kinds of things.  The thing you're thinking of is a sort of exception, but it's the result of a partial function.  Best to just avoid partial functions altogether.  :)
[09:12:33] <dibblego> if you insist on using catch, try readFile
[09:14:10] * ski . o O ( `readsFile' )
[09:14:48] <Axman6> I would pretty strongly recommend against learning about exceptions if you are trying to learn Haskell. I don't think I've ever written any code that threw them, and only rarely needed to catch them. They are something to know about the existance of, but not a fundamental topic
[09:16:02] *** Joins: deadmarshal (~deadmarsh@95.38.114.73)
[09:18:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:20:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:20:33] <monochrom> Please use Text.Read's readMaybe.
[09:23:03] <monochrom> I use partial functions sometimes, but only when I have already vetted the input somehow, never because I have the obvious XY problem of waiting for it to bomb and picking up the pieces later.
[09:23:39] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8d1b:5472:3cae:e50c)
[09:26:03] * ski . o O ( "Parse, don't validate" in 2019-11-05 at <https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/> )
[09:30:28] <monochrom> Exceptions make sense when and only when you're dealing with the cruel outside world where for example you want to open a file but what if the system doesn't let you and it makes no sense to ask to ask you just have to try and see if it fails.
[09:31:16] <monochrom> Note that "if the system lets me then open it" makes no sense in this case because race conditions.
[09:32:16] <monochrom> Whereas "if x=0 then I can do 5/x else I can't" makes more sense than "let me just try 5/x and let it fail".  It is quite the opposite.
[09:35:46] <monochrom> Err if x/=0 !
[09:35:56] <ski> > 7 `mod_` 0
[09:35:58] <lambdabot>  7
[09:36:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:36:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:36:48] *** Joins: wroathe (~wroathe@user/wroathe)
[09:37:44] <sharky2> okay. I thought would be simple enough to catch exception, but I already know how to use readMaybe
[09:39:45] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:40:43] <EvanR> sharky2, the thing is, stuff like 1/0, head [], and read "blub" :: Int aren't designed to be caught. It's possible but normally you would only catch exceptions caused by an explicit throw or IO error
[09:41:11] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:41:29] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:41:39] <EvanR> specifically, you'd need to know the exceptions type so you can name it using the dynamically typed exception system
[09:41:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:42:46] <EvanR> if you wanted to catch one
[09:43:15] <EvanR> those three examples are just things you don't want to happen in the first place
[09:59:46] *** Quits: img_ (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:01:31] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:03:37] <EvanR> also the AOL keyword to bypass all that and read up on it is "Control.Exception"
[10:04:08] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:05:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[10:06:05] *** Joins: img (~img@user/img)
[10:09:25] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (Quit: WeeChat 2.8)
[10:10:43] *** Joins: echoreply (~echoreply@45.32.163.16)
[10:11:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:11:49] <dsal> But you should probably have an idea of when the exception will get raised, because it may not be until after you try to catch it.
[10:12:52] <EvanR> try (return (read "blub")) vs try (return $! (read "blub")) -- xD
[10:13:41] <EvanR> (haskell, not the best imperative language)
[10:14:20] <ski> or `evaluate (read "blub")'
[10:15:07] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:15:30] *** Joins: arjun (~arjun@user/arjun)
[10:17:23] *** Quits: deadmarshal (~deadmarsh@95.38.114.73) (Ping timeout: 256 seconds)
[10:17:28] <arjun> is it only me or associated type families look a bit like OO programming ? : P
[10:17:49] <EvanR> hmm... in what way
[10:18:33] <arjun> like a set of related functionality bunched together and then you make new instances (objects) for each type and use them
[10:18:54] <arjun> but that's probably true for a lot of things i guess, heh
[10:19:16] <ski> how do you make new instances (objects), with associated type families ?
[10:19:23] <arjun> but ATF a little more so
[10:19:57] <arjun> i've come across a Graph example
[10:20:37] <ski> (also, i'd think that sending a message to an object is a bit more primary)
[10:23:43] <arjun> ski, something like this https://pastebin.com/xbyNk1bx
[10:24:15] <arjun> but while writing this i realized, this is just a regular typeclass and the whole thing is not an associated type family, just the first two things : P
[10:24:37] <arjun> guess talking to other people really does help, huh.
[10:25:18] <EvanR> it can be hard to recover from OOP brainwashing xD
[10:25:40] <ski> still not seeing what'd be so OO about this
[10:25:49] <EvanR> ellipses, unicorns, multiple inheritance o my
[10:25:54] <arjun> ski's out of the matrix
[10:26:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[10:26:17] <ski> where are the instances (objects) ?
[10:26:44] <EvanR> knee jerk reaction is that type classes type family or not, doesn't give you internal mutable state. Which may we never wanted to associate with OOP but
[10:26:47] <ski> where are the messages ? where are the methods giving the behaviour of a message, as received by an object ?
[10:27:33] <ski> where are the classes (aka object factories) ?
[10:27:54] <EvanR> there's at most 1 instance of a type class for a given type, so you can't even 'new' them xD
[10:28:03] <EvanR> everything's a singleton
[10:28:19] <arjun> ski, This place is not a place of honor... no highly esteemed deed is commemorated here... nothing valued is here. 
[10:28:23] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:28:48] <arjun> context for the joke -> https://en.wikipedia.org/wiki/Long-time_nuclear_waste_warning_messages
[10:28:59] <ski> (anyway .. one can well do OO stuff in Haskell .. i just don't see how any of this example is related to OO)
[10:29:53] <Axman6> needs more glowing cats
[10:31:37] * ski . o O ( <https://lambdacats.github.io/extensible/> )
[10:31:47] <EvanR> aliens / planet of the apes dudes eventually make it through the levels of complexity and finally find out about the nuclear waste
[10:32:01] <EvanR> "why didn't they just say so"
[10:32:59] <ski> weren't monads supposedly like radiation suits ?
[10:33:09] <arjun> i'm half expecting we'd land in a timeline where people will build NFT's out of nuclear warnings
[10:33:10] <EvanR> I think that was comonads
[10:33:41] * ski glares at Dick Kieburtz
[10:33:57] <arjun> guess that's a topic for haskell-offtopic
[10:35:52] *** Joins: alp (~alp@user/alp)
[10:36:59] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[10:41:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[10:44:24] <sharky2> so I know I was told not to catch read exception, but curiosity got the better out of me, and I googled a solution that seems to work pretty well (it uses unsafePerformIO). what do you think?  https://paste.tomsmeding.com/HBZShTDG
[10:44:42] <EvanR> what why ...
[10:44:43] <ski> don't use `unsafePerformIO'
[10:44:46] <EvanR> ^
[10:44:58] <ski> (or `unsafeCoerce' ..)
[10:45:22] *** Joins: michalz (~michalz@185.246.204.75)
[10:45:25] <sharky2> ski, it allows us to catch undefined outside of IO though
[10:45:32] <ski> that's a bad thing
[10:45:42] <EvanR> catching undefined...
[10:45:51] <EvanR> specifically...
[10:46:17] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:46:25] <sharky2> if we only had read, and alternative was to make readMaybe return IO a, wouldn't this be better? is there anything unsafe about it?
[10:46:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:46:57] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:47:12] <EvanR> read is an example of a function with a bad interface, don't make it worse xD
[10:48:14] <EvanR> use it correctly (hard to do in the context of parsing unknown data) or use a better interface
[10:48:37] <sharky2> sure. but if that is all we had, isn't this good and safe? I made "undefinedToMaybe :: a -> Maybe a" too :)
[10:48:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[10:48:58] <EvanR> that's a weird thing to only have
[10:49:12] <sharky2> I got it from here: https://stackoverflow.com/questions/9392129/detect-bottom-value-in-haskell/17652042
[10:49:19] <EvanR> there's an old package called spoon that does what you are talking about
[10:49:29] <EvanR> haven't heard of it in a while thankfully xD
[10:49:48] <sharky2> is there anything inherently unsafe with this though?
[10:50:01] <EvanR> basically it came about because someone said "what if we want to catch undefined in pure code"
[10:50:02] <dminuoso> Yes
[10:50:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[10:50:48] <dminuoso> You start on a road where you lose some of the reasoning abilities of haskell if you are trying to catch pure exceptions in pure code.
[10:51:09] <dminuoso> And it's very unidiomatic
[10:51:29] <dminuoso> read has a simpler form `readMaybe` that lets you handle failed parses if you insist on using Read.
[10:51:46] <dminuoso> If this is a problem you experience from upstream libraries, file a bug report or fix it upstream. `read` should be banned.
[10:52:52] <EvanR> when two bads combine to form a "works doesn't it?" you become a baby web xD
[10:53:08] <sharky2> can you show me when it would fail? I don't know what I'm doing, I just copy pasted code from stackoverflow, and it works well.  full code and example in ghci: https://paste.tomsmeding.com/n6jrXxhi
[10:53:10] <ski> an expression whose evaluation triggers an exception is semantically a "bottom" value (meaning "no answer/result"). another example of a bottom value is an infinite loop. denotationally, we treat all bottom values as indistinguishable from each other. that is, we like to use refactorings that may sometimes turn one form of a bottom value into another form
[10:53:41] <dminuoso> You lose monotonicity of definedness
[10:53:50] <dminuoso> Something you really dont want to toss out
[10:54:05] <ski> (e.g., if you're running GHC in single-threaded mode, it can, sometimes, catch infinite loops, and will throw an exception. but it can't always, and we'd prefer not attempting to distinguish, at the user level, when it can, and when it can't)
[10:54:13] <EvanR> could catching an undefined change the result of lub
[10:54:20] <EvanR> in a bad way
[10:54:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:54:48] <sharky2> ok. but when used with read specifically, this is guaranteed to work?
[10:54:58] <dminuoso> No.
[10:54:59] <sharky2> or anything that returns error/undefined, and doesn't infinite loop
[10:55:02] <dminuoso> That's the beginning of the problem
[10:55:13] <ski> you're really using `unsafeCoerce' there in an unsafe way
[10:55:26] <dminuoso> First you cant distinguish between errors properly, we have imprecise exception semantics, next up you have the loss of monotonicity.
[10:55:31] <dminuoso> Really, use `readMaybe`
[10:55:34] <dminuoso> That's the way to do it.
[10:55:40] <ski> (or `reads')
[10:56:14] * ski . o O ( coercing from `a' to `IO ()', then executing .. what could go wrong ? )
[10:56:27] <EvanR> read will throw an ErrorCall, which you can catch in IO
[10:56:48] <EvanR> but readMaybe can be used without IO
[10:56:56] <EvanR> win win vs lose lose
[10:57:34] <sharky2> I understand. but I'm talking about hypothetical example where the only interface was read. I'm just wondering when undefinedToMaybe would fail, because I can't make it fail with read, in ghci or ghc
[10:57:45] <ski> anyway, monotonicity is a big deal
[10:57:49] <EvanR> another thing is that read takes a [Char], anything in that string could throw an ErrorCall
[10:58:05] <EvanR> you'd be masking that error
[10:58:28] <dminuoso> sharky2: The problems are way more fundamental than "might not work"
[10:59:17] <ski> @free undefinedToMaybe :: a -> Maybe a
[10:59:17] <lambdabot> $map_Maybe f . undefinedToMaybe = undefinedToMaybe . f
[11:00:07] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:56b3:2a4c:af18:8385)
[11:00:21] <ski> this law claims that `fmap (const c) (undefinedToMaybe x) = undefinedToMaybe (const c x)' .. which is not the case, for your `undefinedToMaybe' .. so, it breaks parametricity ("free theorems")
[11:00:33] <EvanR> sharky2, on your code specifically, why are you even using unsafeCoerce...
[11:00:56] <ski> because they don't know how to use `evaluate' or `return $!'
[11:00:57] <sharky2> EvanR I got the code from stackoverflow link I pasted above
[11:01:00] <EvanR> if all you want to do is catch the exception that happens when trying to read, using catch within unsafePerformIO
[11:01:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:01:10] <awpr> er, how did that not crash?  IO is a newtype of `State# _ ->  (a, State# _)`, and it's coercing some non-function type to IO
[11:01:23] <EvanR> sharky2, so we might want to understand what it even does before even asking xD
[11:01:32] <sharky2> if you it can be written better then please tell me how. 
[11:01:47] <c_wraith> if you see a stackoverflow answer that recommends unsafeCoerce, find a different answer. :)
[11:01:55] <awpr> can be written better as `import Text.Read (readMaybe)` :)
[11:01:59] <dminuoso> sharky2: We told you, the only reasonable better way is to straight up use readMaybe.
[11:02:05] <EvanR> you only want a half-fixed version xD
[11:02:07] <EvanR> weird
[11:02:13] <dminuoso> sharky2: It's not about how you can implement `unsafeCatch` better, the mere presence of such a primitive is the problem.
[11:02:16] <c_wraith> (not that unsafeCoerce is always wrong - it exists for a reason. but if you don't know exactly why you're using it, you shouldn't be)
[11:02:19] *** Joins: deadmarshal (~deadmarsh@95.38.114.73)
[11:02:23] <EvanR> you're better served understanding what those bits do, instead of doing "read" wrong
[11:02:27] <sharky2> dminuoso, what if readMaybe didn't exist?
[11:02:40] <awpr> then write it in terms of `reads`
[11:02:45] <dminuoso> heh
[11:02:52] <EvanR> it must exist, since it's a construction of the mind
[11:02:53] <sharky2> and if read was the only function that existed?
[11:03:02] <ski> generally (as for `eval' in other languages), `unsafePerformIO' and `unsafeCoerce' should not be used, unless you know why they should not be used (and even then you need to be doubly careful, and know safeguards and stuff)
[11:03:03] <awpr> then the library in question should not be used
[11:03:03] <EvanR> you can implement readMaybe yourself
[11:03:16] <dminuoso> sharky2: Your line of thinking is flawed in its premise, in that `read` is a sensible primitive to begin with.
[11:03:19] <dminuoso> It's not.
[11:03:20] <EvanR> it's like asking if the integers did not exist
[11:03:24] <EvanR> you construct the integers
[11:03:26] <dminuoso> `read` is the proper mistake here.
[11:03:31] <dminuoso> It shouldn't exist.
[11:03:37] <dminuoso> It's a historical accient
[11:03:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:03:57] <sharky2> dminuoso, and yet it still exists.. in base no less. I'm sure there are libraries where a function returning error is the only interface they provide. and "don't use that library" is not a useful practical advice
[11:04:24] <EvanR> it goes exactly like that a lot, which is good
[11:04:24] * ski sometimes passes `StateT reads' to `replicateM n' or `many'/`some'
[11:04:30] <dminuoso> sharky2: My advice earlier was: file a bug report or fix those upstream libraries if you encounter them
[11:04:33] <dminuoso> :)
[11:04:47] * ski agrees
[11:04:50] <EvanR> libraries with a terrible error interface usually don't get a lot of traction
[11:05:06] <EvanR> (base is an outlier)
[11:05:16] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[11:05:50] <EvanR> e.g. Aeson for json doesn't throw error and except you to catch it
[11:05:52] <dminuoso> sharky2: But yes, you are absolutely right that it exists in base. We are bad at making backwards breaking changes in `base`, we have a multitude of things that, in hindsight, should have never gone into base.
[11:05:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:06:40] <ski> sharky2 : if you put in more information, you shouldn't get less, or different, information out. that's a big deal (monotonicity)
[11:07:21] <dminuoso> And perhaps we should make more of an effort to document these things in base, pointing out to beginners which things to stay clear of.
[11:07:29] <dminuoso> And this should propagate to learning resources as well
[11:07:41] <sharky2> this is interesting.. not something I expected. it works even if undefined is passed to read. undefinedToMaybe (read (error "hehe")) :: Maybe Int
[11:07:47] <dminuoso> Who knows, perhaps you could make this adventure and improve the situation.
[11:08:24] <ski> (hm, this seems related to the property of "steadfastness", in Prolog, where if you put in more information, you'll get more information in solutions that you get, but solutions may also be dropped. in any case the new set of concrete instantiations of the solutions will be a subset of the old such set)
[11:08:27] <EvanR> also, undefinedToMaybe (read ("123" ++ undefined ++ "5") :: Int)
[11:09:09] <EvanR> undefinedToMaybe (read ("123" ++ (let x = x in x) ++ "5") :: Int) on the other hand
[11:09:56] <sharky2> anyway I understand that this is pretty horrible, and shouldn't be used if at all possible. but EvanR you said something about a better way of writing undefinedToMaybe. how would you write it instead?
[11:10:08] <sharky2> and in what way would it be better?
[11:10:09] <EvanR> there's no reason to use unsafeCoerce
[11:10:14] <EvanR> go ahead and figure out why
[11:10:20] <c_wraith> sharky2: if you really must, the spoon library exists
[11:10:20] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.90)
[11:10:25] <dminuoso> Im not entirely sure teaching how to write bad things with other bad or notoriously unsafe primitives is a useful thing
[11:10:35] <c_wraith> at least let someone else write the horrible code
[11:10:37] <EvanR> uhg I mentioned spoon but in a way to diminish it xD
[11:10:59] <sharky2> spoon looks nice. I'll check the source
[11:11:04] <EvanR> uhg
[11:11:13] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d15:a022:862f:921f:d1a9:883d) (Ping timeout: 256 seconds)
[11:11:17] *** Quits: deadmarshal (~deadmarsh@95.38.114.73) (Ping timeout: 240 seconds)
[11:11:32] <EvanR> dminuoso, well unsafePerformIO and unsafeCoerce need to be spoken of in the proper context, like sex education xD
[11:11:35] <dminuoso> sharky2: The alternative would involve primitives that are even more notoriously dangerous - because a misuse of unsafeCoerce almost assuredly gives crashes or memory corruption on misuse, but misuses of the alternate primitives give the appearance of working at the cost of completely unexpected behavior.
[11:11:38] <EvanR> spoon on the other hand...
[11:11:51] <EvanR> might be beyond obscene
[11:12:26] <dminuoso> sharky2: That other primitive is `unsafePerformIO`, which seems more benign which is a dangerous illusion.
[11:12:29] <ski> @quote please.talk
[11:12:29] <lambdabot> Dave_Benjamin says: please talk to your son or daughter about parametric polymorphism
[11:13:30] <ski> (you can implement `unsafeCoerce', using `unsafePerformIO', and `IORef' ops)
[11:13:45] *** Quits: andreabedini (~andreabed@8s8kj6nrww5p5nzkz2zz.ip6.superloop.com) (Quit: WeeChat 3.3)
[11:13:46] <EvanR> uhg
[11:14:10] <ski> (which is the reason why the value restriction is a thing, in the MLs)
[11:14:17] <dminuoso> ski: We had a production bug a few months ago due to my misuse of unsafePerformIO, which after pondering a fair few hours I considered perfectly safe. Then GHC proceeded to alias a bunch of mutable buffers.
[11:14:32] <dminuoso> Err sorry, that was supposed to hilight sharky2.
[11:14:58] <EvanR> safePerformIO = no IO at all (abstinence) 
[11:15:12] <dminuoso> That was the final nail in the coffin for me to realize even as an advanced Haskeller it's very difficult to understand how unsafePerformIO interacts with your code - all your assumptions about what code does are tossed out of the window.
[11:16:12] <sharky2> dminuoso, spoon should be safe though, no?
[11:16:20] <ski> no
[11:16:26] *** Joins: vpan (~0@212.117.1.172)
[11:16:32] <dminuoso> No, because of the monotonicity reasons I pointed out.
[11:16:56] <dminuoso> Like I said, the mere existence of such a primitive ruins reasoning abilities/properties about your code - and anything that transitively depends on it.
[11:16:56] <EvanR> leave spoon to the trash heap of history xD
[11:17:03] * ski misses mmorrow ..
[11:17:07] <dminuoso> `readMaybe` is the solution
[11:17:10] <ski> preflex: xseen mmorrow
[11:17:37] <sharky2> it seems to be that problem is that undefined/error even exists, and not that spoon exists
[11:17:40] <sharky2> to me*
[11:17:48] <EvanR> yeah
[11:17:59] <EvanR> there are languages where undefined is not a thing
[11:18:19] <ski> at least with catching of `error's from `IO', you can blame it one `IO' indeterminacy
[11:18:29] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:18:35] <dminuoso> What ski refers to is using `evaluate :: a -> IO a` 
[11:18:51] <dminuoso> But note, you still have imprecise exception semantics with this.
[11:19:00] <dminuoso> https://www.microsoft.com/en-us/research/wp-content/uploads/1999/05/except.pdf
[11:19:26] <EvanR> in those languages, you would probably see readMaybe xD
[11:19:28] <ski> for `error "foo" + error "bar"', it'll nondeterministically choose which of those to yield
[11:19:36] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:20:00] <energizer> is there a "resource locator/identfier" type that encompasses filesystem paths and uris and other stuff like that?
[11:20:29] <dminuoso> energizer: Yes, UrI.
[11:20:32] <dminuoso> URI, even.
[11:20:45] <dminuoso> URI has the `file` scheme giving you filesystem path access
[11:20:59] <dminuoso> How portable that actually ends up, I have no idea.
[11:21:36] <dminuoso> (i.e. can URI with a file scheme represent arbitrary bytesequences for say windows filesystems?)
[11:22:16] <sharky2> heh. undefinedToMaybe "foo"   <interactive>: internal error: stg_ap_v_ret     (GHC version 8.0.2 for x86_64_unknown_mingw32)     Please report this as a GHC bug:  http://www.haskell.org/ghc/reportabug
[11:22:26] <awpr> aha!
[11:22:39] * ski 's not surprised
[11:22:41] <EvanR> so it was never working
[11:22:47] <awpr> that's what I expected when I said "er, how did that not crash?"
[11:23:04] <sharky2> it works with read though. odd
[11:23:15] <dminuoso> That's unsafe primitives for you.,
[11:23:19] <ski> UB
[11:23:42] <dminuoso> Perhaps they crash, perhaps not - who knows. `unsafe` really means "you're holding a shotgun loaded with dynamite. you have been warned"
[11:23:43] <EvanR> oh right, you tried to write a function that converted *any* undefined to maybe, but kept insisting it was for read only
[11:23:53] <EvanR> was very confuesd
[11:24:17] <dminuoso> Hah, though recently Ive been using unsafeChr a lot - but these are actually benign.
[11:24:31] *** AlexNoo_ is now known as AlexNoo
[11:24:49] <EvanR> for badly catching the error from read, you do not need unsafeCoerce
[11:24:56] <dminuoso> If you do this on Word8 anyway
[11:25:05] <ski> (as is `unsafeInterleaveIO' (but not `unsafeInterleaveST') .. perhaps considered ill-advised, though)
[11:25:40] <awpr> now I'm curious.  does it crash on `undefinedToMaybe (42 :: Int)`?  and on `undefinedToMaybe (21 + 21 :: Int)`?  I have a theory.
[11:26:50] <awpr> namely that if the argument happens to be a thunk, the coercion to IO just... accidentally doesn't cause problems, but if it's already a data constructor, it dies
[11:27:00] <sharky2> awpr, it doesn't crash on those
[11:27:41] <EvanR> that might not be a good thing
[11:27:53] <EvanR> not crashing immediately but later on after corruption catches up with you
[11:27:57] <awpr> huh, weird.  gonna try some experiments
[11:28:16] <EvanR> stuff we don't usually have to deal with because this isn't C
[11:28:32] <awpr> I mean, if it crashes it's definitely broken.  I'm just interested in how it ever manages not to crash
[11:28:43] <sharky2> spoon "foo"   works fine!
[11:28:44] <awpr> if it crashes on some inputs*
[11:29:08] <EvanR> I'm paranoid saying "not crashing doesn't definitely mean not broken"
[11:29:22] <ski> presumably `spoon' doesn't use `unsafeCoerce'
[11:29:36] <dminuoso> `spoon` uses unsafePerformIO
[11:29:45] <ski> yea, obviously :)
[11:31:42] *** Joins: michalz2 (~michalz2@185.246.204.89)
[11:31:58] *** Joins: alp (~alp@user/alp)
[11:32:25] *** Joins: chele (~chele@user/chele)
[11:33:19] *** Joins: Guest69 (~Guest69@4.53.152.194.mga.com.pl)
[11:34:27] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:34:54] <ski> @wiki Error vs. Exception
[11:34:54] <lambdabot> https://wiki.haskell.org/Error_vs._Exception
[11:35:19] <ski> "A program should work as well when all `error's and `undefined's are replaced by infinite loops."
[11:36:26] <EvanR> sharky2, unsafeCoerce causes GHC to "trust you" and consider whatever thing to be whatever type you want, regardless of whatever the eventual runtime object will look like. This is only safe for limited circumstances, even then, you have a burden of proof that no one helps you with
[11:36:44] *** Quits: razetime (~quassel@49.207.209.26) (Remote host closed the connection)
[11:36:57] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[11:37:10] <EvanR> the consequences of being wrong are pretty scary to me, having spent so many hours chasing memory corruption in C programs
[11:38:01] <EvanR> so using it when you don't need it seems ridiculous
[11:38:55] <EvanR> also, where *do* you need it
[11:39:10] <ski> (re above link, another useful distinction is between faults and errors (and exceptions). a fault is a limitation in the implementation, e.g. an out-of-memory condition. a fault is the implementation admitting that it's failed to live up to its expectations)
[11:39:45] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:40:43] *** Joins: fendor (~fendor@91.141.44.253.wireless.dyn.drei.com)
[11:41:10] <ski> EvanR : i've seen it used when composing a function with an, operationally, identity/no-op function
[11:41:13] <sharky2> difference between spoon and teaspoon is that spoon forces evaluation?
[11:41:50] <ski> yea
[11:42:16] <ski> (or, rather, `spoon' does deep evaluation, `teaspoon' doesn't)
[11:42:49] <EvanR> I dislike spoon even more now
[11:43:03] <sharky2> is the difference only noticeable when used in IO? ie, is  readMaybe = spoon . read   the same as  readMaybe = teaspoon . read
[11:43:36] <c_wraith> those behave very differently for some types
[11:44:00] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:46:21] <EvanR> you don't need IO to see difference between shallow and deep evaluation
[11:46:37] <ski>   "(1 % 0,-1 % 0)"
[11:48:18] *** Quits: Guest69 (~Guest69@4.53.152.194.mga.com.pl) (Quit: Client closed)
[11:48:44] *** Joins: kukimik (~kukimik@4.53.152.194.mga.com.pl)
[11:51:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:53:29] *** Joins: cfricke (~cfricke@user/cfricke)
[11:54:40] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[11:56:53] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:56:57] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:57:01] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:58:21] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:00:55] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:04:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258)
[12:06:05] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:08:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a019:43b1:3d96:a258) (Ping timeout: 240 seconds)
[12:09:24] *** Joins: dcoutts (~duncan@109.144.31.214)
[12:12:13] *** Joins: dcoutts_ (~duncan@host86-187-229-255.range86-187.btcentralplus.com)
[12:12:39] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[12:13:13] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:14:37] *** Quits: dcoutts (~duncan@109.144.31.214) (Ping timeout: 240 seconds)
[12:16:44] *** Joins: notzmv (~zmv@user/notzmv)
[12:17:10] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:17:10] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:17:11] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[12:17:13] *** allbery_b is now known as geekosaur
[12:17:57] *** Quits: dcoutts_ (~duncan@host86-187-229-255.range86-187.btcentralplus.com) (Ping timeout: 240 seconds)
[12:18:30] *** Quits: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) (Quit: issued !quit command)
[12:19:13] *** Quits: kukimik (~kukimik@4.53.152.194.mga.com.pl) (Ping timeout: 256 seconds)
[12:20:07] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[12:20:41] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[12:24:53] *** Joins: akegalj (~akegalj@18-45.dsl.iskon.hr)
[12:26:02] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:27:04] *** Joins: kukimik (~kukimik@4.53.152.194.mga.com.pl)
[12:28:00] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[12:30:11] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[12:30:50] *** Quits: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) (Client Quit)
[12:31:04] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[12:31:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:31:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[12:32:42] *** Quits: maerwald (~maerwald@user/maerwald) (Quit: gone)
[12:33:00] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[12:33:15] *** Joins: coot (~coot@213.134.190.95)
[12:33:43] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:34:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[12:34:45] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:34:45] *** Quits: shachaf (~shachaf@user/shachaf) (Ping timeout: 250 seconds)
[12:34:57] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[12:35:38] *** Joins: shachaf (~shachaf@user/shachaf)
[12:35:42] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:37:11] *** Joins: razetime (~quassel@49.207.209.26)
[12:38:10] *** Quits: kukimik (~kukimik@4.53.152.194.mga.com.pl) (Quit: Client closed)
[12:39:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:41:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:44:04] *** Joins: max22- (~maxime@2a01cb0883359800f5b23c2351d98307.ipv6.abo.wanadoo.fr)
[12:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[12:47:41] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:41] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:44] *** allbery_b is now known as geekosaur
[12:48:07] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[12:49:29] *** Joins: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk)
[12:49:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[12:50:04] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:50:23] <dminuoso> I mean at its face value, I can see why `spoon` might seem appearing - Ive had my share of bottoms blow up inside nested data structures in the wrong places of code before
[12:51:11] *** Joins: desantra (~skykanin@user/skykanin)
[12:51:27] <dminuoso> It's very frustrating to have have some `parseConfig` hand you a timebomb
[12:51:32] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[12:51:36] <dminuoso> Honestly, Im not sure how to address this correctly in the general case
[12:53:15] *** Joins: xkuru (~xkuru@user/xkuru)
[12:53:27] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[12:54:58] <c_wraith> in general? stop using libraries that do that
[12:55:19] *** Joins: Graham31415 (~Graham314@5.33.56.252)
[12:55:39] <dminuoso> Well, it was my own programming mistake.
[12:56:03] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:56:42] <dminuoso> It's easy to say "dont use code that has bottoms" in a language where bottoms can arise unexpectedly and might not be covered by tests easily.
[12:56:45] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:57:40] <dminuoso> My immediate solution was to attach NFData to every data involving the config and deepseq it right at parseConfig, which was fine because I eventually need all bits anyway. At least this would transfer the explosion point to something predictable
[12:58:41] <Graham31415> Hi, I'm about to start writing my first haskell application. I saw RIO, and thought I'd start with that. I also want to use qualified imports for everything I can. In the example script at the bottom of https://www.fpcomplete.com/haskell/library/rio/ it imports RIO and also System.Environment. I'm guessing `getArgs` comes from System.Environment,
[12:58:41] <Graham31415> and that this is part of the "base" package rather than RIO? So is it normal to use the RIO prelude and then use base things on top of it? That seems strange to me.
[12:59:25] <dminuoso> Graham31415: Yes.
[12:59:41] <Graham31415> (also, why dont more examples, tutorials, docs, etc. use qualified imports more?)
[13:00:08] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[13:00:17] <Graham31415> On the one hand, I see many folks advocating for qualified imports, on the other hand I dont see much learning material using them.
[13:00:54] <dminuoso> Graham31415: There's not much guidance on qualified imports or not, it's a matter of personal taste and common sense.
[13:01:37] <c_wraith> I don't like qualified imports for what they do to syntax. But that's mostly not important, and some libraries basically require you to use them.
[13:02:07] <dminuoso> It's also a matter of tooling. Using HLS might influence your opinion.
[13:02:17] <dminuoso> Since it might make whatever you prefer easier to do
[13:02:22] <c_wraith> in which direction? :)
[13:02:27] <dminuoso> Either the way I see it.
[13:02:49] <Graham31415> Ok, thanks. I'll muddle through...
[13:02:51] <dminuoso> It can make generating explicit export lists easier, as well as navigating and locating qualified imports easier.
[13:02:58] <dminuoso> Or generating the latter as well.
[13:03:18] <dminuoso> So if you have some reservations on either approach on account of "more cumbersome", HLS might address that.
[13:04:01] <c_wraith> note that there's a fun case - you can name a module when you import it without importing it qualified.  That seems... very narrow.
[13:04:11] * ski . o O ( HT libraries .. )
[13:04:21] <c_wraith> Yeah, I avoid those. :P
[13:04:33] <merijn> Doesn't everyone?
[13:04:55] <c_wraith> presumably not him!
[13:05:12] <dminuoso> Graham31415: One important bit to note perhaps, that there's certainly some common idioms with respect to text, containers and bytestring.
[13:05:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[13:05:34] <ski> it would be nice if Haddock would disambiguate with module qualification, when there's more than one identifier having the same name in scope, though
[13:06:16] <dminuoso> So for bytestring its relatively common to do qualified imports `import qualified Data.ByteString as BS` and `import qualified Data.ByteString.Lazy as BSL` (the actual qualifier prefixes vary between folks, they are not the point), and then consistently use them to clearly communicate where lazy and strict BS code/types are used.
[13:06:23] <dminuoso> For text you sometimes see a similar thing
[13:06:41] <Graham31415> I must say, this stuff make Haskell hard to learn. All the supposedly scary stuff is well documented.
[13:06:49] <dminuoso> containers enjoys similar usage because they introduce a lot of overlapping function names for IntSet, Set, Map, etc
[13:06:55] <c_wraith> there's also that weird thing where you can import multiple modules and share a name between them.  Sometimes that's really nice, like when you're able to put everything imported for a single purpose into the same namespace. Like parsers that split important logic across multiple modules.
[13:07:50] <ski> hm, wasn't there some page that had some stats on how common it was to use `import'-`qualified'-`as' for various modules, and the most common renamings for the most common modules that were imported thus ?
[13:08:05] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[13:08:07] <dminuoso> Mmm, yes someone in this channel did this research.
[13:08:09] <dminuoso> Was this [exa]?
[13:08:52] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[13:09:28] <ski> > let xs = cycle [0,undefined]; xs = cycle [undefined,1] in xs
[13:09:30] <lambdabot>  error:
[13:09:30] <lambdabot>      Conflicting definitions for ‘xs’
[13:09:30] <lambdabot>      Bound at: <interactive>:1:5-6
[13:09:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Ping timeout: 240 seconds)
[13:09:51] <[exa]> not me, but I recall seeing this question already here too
[13:12:47] *** Joins: ardell (~ardell@user/ardell)
[13:16:36] *** Quits: ubert (~Thunderbi@141.98.252.252) (Ping timeout: 250 seconds)
[13:21:20] *** Joins: mmhat (~mmh@55d49d8b.access.ecotel.net)
[13:22:43] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:28:41] *** Quits: xff0x (~xff0x@2001:1a81:5224:e000:4717:65df:57b3:7708) (Ping timeout: 256 seconds)
[13:29:28] *** Joins: xff0x (~xff0x@2001:1a81:5224:e000:7446:150d:d8ae:ed12)
[13:30:47] *** Quits: akegalj (~akegalj@18-45.dsl.iskon.hr) (Quit: leaving)
[13:32:05] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:33:08] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:36:37] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 256 seconds)
[13:37:16] *** Joins: ubert (~Thunderbi@p200300ecdf0994a856831da0cd63cc4d.dip0.t-ipconnect.de)
[13:37:39] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:40:06] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:40:49] *** Joins: arjun (~arjun@103.57.87.28)
[13:41:01] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[13:41:38] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[13:43:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:44:15] *** Quits: arjun (~arjun@103.57.87.28) (Client Quit)
[13:44:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:47:03] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:47:10] *** Joins: rahulfromearth (~rahulfrom@27.4.61.26)
[13:48:25] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[13:50:38] *** Joins: amk (~amk@109.255.169.126)
[13:50:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[13:54:25] *** Quits: rahulfromearth (~rahulfrom@27.4.61.26) (Ping timeout: 256 seconds)
[13:58:08] *** Joins: vysn (~vysn@user/vysn)
[14:04:08] *** Joins: cfricke (~cfricke@user/cfricke)
[14:04:11] <lortabac> I need to parse a couple of query parameters from a URL, right now I'm using network-uri, http-types and http-api-data
[14:04:54] <lortabac> is there a higher-level package that composes the functionalities of those 3 packages?
[14:11:11] <[exa]> dminuoso: but I cant find it. we might need to invoke tomsmeding's 1337 l0g 534rch 5ki11s
[14:13:42] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:13:43] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[14:17:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[14:18:28] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:19:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:20:52] *** Quits: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk) (Read error: Connection reset by peer)
[14:21:00] *** Joins: adnaahm (~adnaahm@51.89.118.136)
[14:21:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:21:17] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:22:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:22:29] <dminuoso> lortabac: servant-client-core exposes higher level primitives to bootstrap that yourself, depending on whether you like the dependency footprint
[14:22:49] <lortabac> dminuoso: I already have a dependency on servant-client-core, so it's ok
[14:24:00] *** Joins: rando25892 (~homefame@user/rando25892)
[14:24:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:28] <lortabac> but the thing is, I'm not parsing an HTTP request, I just have a URL as a Text
[14:25:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:26:03] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:16] *** Joins: __monty__ (~toonn@user/toonn)
[14:26:23] <dminuoso> Mmm
[14:27:55] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[14:28:15] <dminuoso> Actually looking at it, you cant easily poke it out
[14:28:21] <dminuoso> It all revolves around https://hackage.haskell.org/package/http-types-0.12.3/docs/Network-HTTP-Types.html#v:queryToQueryText at the end
[14:28:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:28:57] <dminuoso> Sorry, I dont think this direction will help you unless you can make use of parseUrlPiece/parseUrlParam
[14:30:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:32:23] *** Quits: adnaahm (~adnaahm@51.89.118.136) (Ping timeout: 256 seconds)
[14:32:55] *** Joins: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk)
[14:33:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:34:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:35:33] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[14:36:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[14:39:25] <desantra> Shouldn't it be fairly easy to write a parser to parse out query params from a url text?
[14:40:00] *** Quits: Graham31415 (~Graham314@5.33.56.252) (Quit: Client closed)
[14:41:58] <lortabac> desantra: yes it's easy, I was asking if it already exists
[14:42:21] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[14:42:38] <desantra> lortabac: ah sure, well not that I know of
[14:57:47] *** Joins: DavidMilestone (~DavidMile@182.64.8.212)
[14:58:08] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:00:05] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (Quit: ZNC 1.6.4 - http://znc.in)
[15:00:43] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[15:01:03] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:11:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 240 seconds)
[15:14:03] *** Quits: jrm (~jrm@156.34.173.250) (Quit: ciao)
[15:15:27] *** Joins: jrm (~jrm@156.34.173.250)
[15:17:26] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:17:35] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[15:21:41] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[15:21:49] *** Joins: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net)
[15:22:00] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:ddca:91f7:7b50:e029)
[15:24:40] *** Joins: RFV1 (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net)
[15:24:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:25:49] *** Joins: MoC (~moc@user/moc)
[15:27:27] *** Quits: mbuf (~Shakthi@122.174.58.23) (Quit: Leaving)
[15:27:50] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[15:28:29] *** Quits: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[15:28:29] *** RFV1 is now known as RFV
[15:29:53] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:31:26] *** Joins: alx741 (~alx741@157.100.197.240)
[15:32:08] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[15:33:05] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[15:36:11] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:ddca:91f7:7b50:e029) (Ping timeout: 256 seconds)
[15:39:49] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:40:02] *** Quits: jrm (~jrm@156.34.173.250) (Quit: ciao)
[15:40:08] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:41:22] *** Joins: jrm (~jrm@156.34.173.250)
[15:42:57] *** Joins: unyu (~pyon@user/pyon)
[15:46:15] *** Joins: tavares (~tavares@187.19.213.50)
[15:46:26] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[15:46:26] *** Joins: tavares (~tavares@user/tavares)
[15:48:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:50:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:50:55] *** Quits: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[15:52:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:03:38] *** Joins: phma (phma@2001:5b0:210d:a008:2b93:5e3e:cefa:7af9)
[16:06:11] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 245 seconds)
[16:06:47] *** Quits: xff0x (~xff0x@2001:1a81:5224:e000:7446:150d:d8ae:ed12) (Ping timeout: 256 seconds)
[16:07:21] *** Quits: phma_ (phma@2001:5b0:210d:a008:2b93:5e3e:cefa:7af9) (Ping timeout: 256 seconds)
[16:07:50] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:07:55] *** Joins: rusrushal13 (~rusrushal@2401:4900:30ba:6ed2:5f67:6972:1845:c7aa)
[16:08:00] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[16:08:38] *** Quits: rusrushal13 (~rusrushal@2401:4900:30ba:6ed2:5f67:6972:1845:c7aa) (Client Quit)
[16:09:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:16:19] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:17:17] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:17:23] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:20:42] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[16:24:20] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[16:26:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:27:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:29:07] *** Joins: alx741 (~alx741@157.100.197.240)
[16:30:31] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[16:31:19] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:35:02] *** Joins: rusrushal13 (~rusrushal@2409:4056:9:1708:2c2:74fb:7af9:78dc)
[16:37:03] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[16:37:40] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[16:39:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[16:41:33] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:41:59] *** Joins: messier102 (~messier10@user/messier102)
[16:43:17] *** Quits: sharky2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[16:45:02] *** Quits: absence_ (torgeihe@hildring.pvv.ntnu.no) (Ping timeout: 240 seconds)
[16:45:17] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[16:49:46] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[16:57:24] *** Joins: xff0x (~xff0x@2001:1a81:5224:e000:7446:150d:d8ae:ed12)
[16:58:30] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[16:58:34] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:00:51] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:01:25] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[17:05:57] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:07:31] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:08:00] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:10:41] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[17:11:36] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[17:11:57] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[17:12:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:12:31] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:13:13] <wmacmil> ive recently updated to using cabal, however for just going back and looking at code in old files it gives me errors when i try to use dante like "    It is a member of the hidden package ‘mtl-2.2.2’."
[17:13:39] <wmacmil> is there any way i can just local install with cabal the necessary packages without having to refactor the entire directory with a cabal init
[17:15:47] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:17:37] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[17:19:43] *** Joins: slack1256 (~slack1256@186.11.114.177)
[17:22:29] *** Quits: max22- (~maxime@2a01cb0883359800f5b23c2351d98307.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:22:31] *** Quits: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk) (Read error: Connection reset by peer)
[17:22:49] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[17:23:01] <dminuoso> desantra: hah, "shouldnt it be fairly easy"
[17:23:52] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[17:24:03] <dminuoso> How Ive grown to dislike that sentiment at the beginning of an undertaking.
[17:24:21] *** Joins: acidsys (~LSD@2.lsd.systems)
[17:24:29] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[17:25:05] <lortabac> dminuoso: in this case I have all the needed pieces, I just have to implement the glue
[17:25:13] *** Joins: acidsys (~LSD@2.lsd.systems)
[17:25:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 250 seconds)
[17:25:40] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[17:26:09] *** Joins: zaquest (~notzaques@5.130.79.72)
[17:26:40] <dminuoso> Reminds me of how the past 2-3 weeks figuring out all the small little details when dealing with domain names.
[17:28:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[17:28:51] <lortabac> yes, "it should be easy" can betray you in unexpected way :D
[17:31:37] <desantra> well I was trying to think what you need to support in this case. Iirc there are only two valid forms for parameter queries which are ?boolQuery and ?query=... no?
[17:32:23] *** Joins: slac13852 (~slack1256@191.126.227.202)
[17:32:28] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[17:32:30] <dminuoso> Now we need to talk about a) character sets, b) escaping characters, c) permisseable lengths, and d) semantics of duplicate query parameters.
[17:32:40] <dminuoso> Those are the first 4 subtleties I can think of from the top off my head
[17:32:46] <dminuoso> Further surprises are to be expected.
[17:32:50] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[17:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:33:48] <desantra> right... nvm
[17:34:07] *** Parts: DavidMilestone (~DavidMile@182.64.8.212) ()
[17:34:26] <dminuoso> So the first thing to do is read the URI RFC, all updates on that, related RFCs, errata
[17:34:39] <dminuoso> Just to know how to correctly do parsing here
[17:34:51] *** Quits: slack1256 (~slack1256@186.11.114.177) (Ping timeout: 256 seconds)
[17:34:59] *** Joins: hueso (~root@user/hueso)
[17:35:16] <dminuoso> Perhaps its really simple, who knows - but having not read them I cant say
[17:35:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:36:18] *** Joins: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net)
[17:40:45] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:44:09] *** Quits: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net) (Quit: RFV)
[17:50:33] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:51:19] <messier102> Hi all. I'm somewhat new to Haskell, but I've recently been interested in the "types as proofs" line of thought. I stumbled upon an idea of encoding arbitrary properties via ad-hoc type unions (e.g. `[a] & Sorted`), but couldn't find any prior discussion online. It seems like a pretty surface-level idea, so maybe I'm just looking in the wrong places.
[17:51:37] <messier102> I wrote up a brief description of what I'm thinking of: https://gist.github.com/messier102/b7fef1387c9a66a26727f9ee0a3b5758
[17:51:57] <messier102> Has this been considered in the context of Haskell before? Would appreciate any pointers.
[17:53:31] <merijn> messier102: Sounds like you wanna google "Liquid haskell" :)
[17:53:33] <dminuoso> What you propose sounds rather analogue to a secondary/orthogonal type system
[17:53:43] <merijn> Not quite what you're describing, but probably interesting to you
[17:53:50] <janus> wmacmil: 'hidden package mtl' just means it is in your dep tree but not a direct dependency. it just means you need to add it to build-depends
[17:54:02] *** Joins: slack1256 (~slack1256@186.11.24.3)
[17:54:07] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[17:54:19] <dminuoso> In some sense LH could be considered such a secondary/orthogonal type system I guess
[17:54:25] <merijn> messier102: I've pondered and proposes something like what you said before, but then no one was interested in paying me to work on it, so it never went anywhere
[17:54:37] <janus> wmacmil: it would be weird if dante and mtl had common modules, so are you sure that is really because of a symbol from dante?
[17:54:43] <desantra> messier102: you probably want a dependently typed language like Idris. Haskell does not support dep types (yet)
[17:54:48] <dminuoso> Disclaimer: ^- merijn would get rich but get no work done if he was getting paid for all his ideas.
[17:55:07] <merijn> dminuoso: tbh, that's really only the one idea, though
[17:55:11] <messier102> merijn, dminuoso: Thank you, I will check those keywords out. :)
[17:55:18] <merijn> dminuoso: Also, joke's on you, I already don't get work done
[17:55:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:55:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:55:39] *** Joins: wroathe (~wroathe@user/wroathe)
[17:55:44] <dminuoso> messier102: I dont think of them as "keywords", really nothing ever stops you from having a second type system.
[17:55:54] <dminuoso> At least not in the traditional type theory sense.
[17:56:17] <merijn> Incidentally, I wrote a paper arguing for that awhile ago
[17:56:23] *** Quits: slac13852 (~slack1256@191.126.227.202) (Ping timeout: 256 seconds)
[17:56:28] <merijn> "awhile" being, close to a decade now, lol
[17:57:14] *** Joins: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk)
[17:57:15] <merijn> Granted, that was mostly "this is a great idea and here's why", not much "how do you make it work" :p
[17:58:42] *** Joins: slac91840 (~slack1256@191.126.227.202)
[17:58:42] *** Quits: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk) (Read error: Connection reset by peer)
[17:58:51] <dminuoso> I guess part of the problem of tying everything into a singular type system is that it drives up implementation complexity and it reduces diagnostics quality. Consider the kind of compiler errors you get from type rich libraries when doing something wrong.
[17:58:56] *** Joins: adnaahm (~adnaahm@host-57-net-67-160-119.mobilinkinfinity.net.pk)
[17:59:04] <messier102> merijn, it does seem like the implementation might get a bit hairy when it comes down to it. I'd be interested to read the paper you mentioned, is it possible for you to share it?
[17:59:08] <merijn> dminuoso: That was essentially my argument
[17:59:30] <merijn> You want to enforce some "non-functional" (strictness, memory consumption, multi-threading, etc.) properties
[17:59:36] <dminuoso> So while you manage to encode some property into the type system, some kind of "you misused X in B" turns into "ambiguous type variable error here", "unable to satisfy constraint blahblahblah", "couldn't unify b0 with b0"
[17:59:48] <merijn> Stuffing all these things into the "functional" type (i.e. what does this compute) turns both into a mess
[18:00:10] <merijn> messier102: I mean, it contains basically 0 on "how would you actually do this" :D
[18:00:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:00:45] <messier102> merijn: I just want to hear the rationale :D It's probably more thought than I've given it so far
[18:01:15] *** Quits: slack1256 (~slack1256@186.11.24.3) (Ping timeout: 256 seconds)
[18:01:33] <dminuoso> messier102: well some of these orthogonal type systems exist.
[18:01:36] <dminuoso> for instance the burrow checker in rust
[18:02:11] <merijn> messier102: I think it's here https://oopsle.github.io/2014/abstracts.pdf but that's just, like, 2 pages of off-the-cuff brainstorming, essentially :)
[18:02:46] <dminuoso> Oh. I guess that should read borrow checker.
[18:03:08] <merijn> A burrow checker would be, like, a fox, weasel, or ferret :D
[18:03:30] <messier102> merijn: thanks, I'll definitely check it out
[18:03:39] <[exa]> pages of off-the-cuff brainstorming, essentially :)
[18:03:54] <[exa]> ^ misclick with mid mouse, sorry
[18:04:27] <dminuoso> Dont worry, the next time you'll be our official channel parrot.
[18:05:04] <[exa]> I'll invest into colorful plumage
[18:08:00] *** Joins: max22- (~maxime@2a01cb0883359800f5889d6f7a8326a9.ipv6.abo.wanadoo.fr)
[18:08:31] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[18:10:04] *** Joins: CHUD (~CHUD@dhcp6531.kent.ac.uk)
[18:10:38] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:11:24] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a)
[18:15:15] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[18:16:07] <ski> messier102 : hm, is that `[a] & Sorted' supposed to be like an intersection type (rather than a union type, as you mentioned) ? you could also compare with LiquidHaskell, i think (where you'd say something like `{xs : [a] | sorted xs}')
[18:16:15] <ski> oh, LiquidHaskell was mentioned
[18:16:40] <messier102> ski: sorry, I might've meant intersection type, yes
[18:17:09] <messier102> always conflate those two
[18:17:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[18:17:52] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:22:06] <messier102> LiquidHaskell seems interesting, although perhaps not entirely what I was thinking of
[18:22:25] <segfaultfizzbuzz> i am doing a double take on something which popped up on reddit. https://www.reddit.com/r/haskell/comments/skcir6/what_is_wholesale_or_monolithic_update/  these folks are saying: "persistent arrays need to be copied completely even for changes to a single element." -- really...??
[18:22:47] <segfaultfizzbuzz> i thought you folks had the ST monad to encapsulate mutation or something to that effect
[18:23:31] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:23:39] <ski> sure, but those are ephemeral (mutable) arrays, not persistent (immutable) ones
[18:23:43] <ski> we have both
[18:24:19] <ski> oh, and we can do bulk updates on persistent, so it's not quite as bad as copy for each single change
[18:24:43] * ski . o O ( `DiffArray' )
[18:26:14] <segfaultfizzbuzz> lol the C++ comment operator
[18:26:31] <ski> "One of the main differences between functional and procedural algorithms is that the former rely on lists as the basic carrier of information while the latter rely on arrays." -- seems a bit too simplistic, both to "functional" and to "procedural"
[18:26:36] <segfaultfizzbuzz> When the // operator is applied to a diff array, its contents are physically updated in place.     lol
[18:26:55] <ski> @type (//)
[18:26:56] <lambdabot> Ix i => Array i e -> [(i, e)] -> Array i e
[18:27:20] <segfaultfizzbuzz> yeah i don't think the list comment is accurate but it is idiomatic for haskell entry level documentation iiuc
[18:28:38] <ski> "wholesale or monolithic update" means that we update all elements, or at least many of them, in one go, one fell swoop
[18:29:14] <ski> (the former is mapping over an array. the latter is `(//)')
[18:29:30] <segfaultfizzbuzz> there may as well be a /* and */ operator in there ;-)
[18:30:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[18:30:26] *** Joins: romesrf (~romes@bl8-111-202.dsl.telepac.pt)
[18:30:30] <romesrf> o/
[18:31:54] <ski> "Does library Data . Array provide mutable or immutable arrays?" -- `Data.Array' itself provides immutable arrays, but there's several modules with `Data.Array.' as prefix which provides (different kinds of) mutable arrays
[18:33:05] <ski> "Is a data structure with \"wholesale or monolithic update\" a mutable or immutable one?" -- the main need for having those is for immutable, but mutable ones could also support such operations, for convenience
[18:34:20] <ski> segfaultfizzbuzz : does this help ?
[18:36:16] <segfaultfizzbuzz> actually more fundamentally i should probably understand,
[18:36:21] *** Joins: slack1256 (~slack1256@186.11.31.131)
[18:36:58] *** Joins: phma_ (phma@2001:5b0:211f:7008:1fdf:50b9:29f4:b115)
[18:36:59] <segfaultfizzbuzz> it seems like in "many/most" circumstances updates should be in-place
[18:37:19] <segfaultfizzbuzz> there is something about laziness which seems to require allocation...?
[18:37:44] <merijn> segfaultfizzbuzz: Why should the be in place in most circumstances?
[18:37:48] <ski> which flavor of array are you speaking of ?
[18:37:48] *** Quits: phma (phma@2001:5b0:210d:a008:2b93:5e3e:cefa:7af9) (Read error: Connection reset by peer)
[18:38:53] *** Quits: slac91840 (~slack1256@191.126.227.202) (Ping timeout: 256 seconds)
[18:38:54] <segfaultfizzbuzz> so as an amateur it seems like "essentially everything" should be linear/affine, much as in rust
[18:39:16] <segfaultfizzbuzz> and i can't understand in what circumstances something other than that would be necessary, which seems to connect to when laziness is necessary
[18:40:13] *** phma_ is now known as phma
[18:40:41] <merijn> segfaultfizzbuzz: Laziness is mostly irrelevant here?
[18:41:08] <merijn> segfaultfizzbuzz: The point is that you can't know when things are safe to mutate in place in regular Haskell
[18:41:20] <merijn> Because you can't tell when your reference is the only one
[18:41:28] *** Quits: miremeister (uid387155@id-387155.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:42:02] <segfaultfizzbuzz> my limited understanding is that the primary reason that i would use haskell is to benefit from laziness/non-strictness as a first class citizen/primary emphasis/default assumption
[18:42:20] <segfaultfizzbuzz> but i don't feel confident understanding when i would need to use laziness and when/how i would benefit
[18:42:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:42:55] <segfaultfizzbuzz> merijn: ahh
[18:43:25] <merijn> Rust is requiring some heavy duty machinery in the borrow checker to check that kinda thing
[18:43:56] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:56b3:2a4c:af18:8385) (Quit: WeeChat 2.8)
[18:45:06] <WhateverRabbit> you can't do guarded recursion without laziness. every map over a list/tree/array/whatever gives you some benefit
[18:46:08] <segfaultfizzbuzz> "guarded" recursion ?
[18:46:18] <segfaultfizzbuzz> the definition i'm finding on ncatlab isn't illuminating
[18:49:05] *** Joins: zebrag (~chris@user/zebrag)
[18:49:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:49:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:49:09] *** Joins: wroathe (~wroathe@user/wroathe)
[18:49:52] *** Joins: Pickchea (~private@user/pickchea)
[18:50:11] <ski> WhateverRabbit : you can express it, more or less manually, in a strict language, given lazy suspensions (and, in addition to `force' and `delay' operations, also a `lazy' operation, commonly used to delay a choice of suspensions/thunks)
[18:51:51] <WhateverRabbit> map f (x:xs) = f x : map f xs -- here you create a list instance with two thunks - f x and map f xs. map f xs doesn't evaluate nothing untill you don't read something from tail of f x : map f xs list instace
[18:52:09] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[18:52:14] <ski> "How to add laziness to a strict language, without even being odd" by Philip Wadler,Walid Taha,David MacQueen in 1998-09 at <https://homepages.inf.ed.ac.uk/wadler/topics/language-design.html#lazyinstrict> ; "Primitives for Expressing Iterative Lazy Algorithms" by André van Tonder in 2003-09-20 - 2004-08-04 at <https://srfi.schemers.org/srfi-45/srfi-45.html>
[18:52:20] <WhateverRabbit> sorry for my bad english
[18:53:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:54:04] *** Joins: slac13545 (~slack1256@191.125.227.202)
[18:55:15] <segfaultfizzbuzz> brb
[18:55:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:55:22] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a) (Quit: Leaving)
[18:55:36] <ski> itym "map f xs doesn't evaluate until you read something from the tail of f x : map f xs list instance"
[18:55:46] <romesrf> hey everyone, after automatically deriving MonadReader for a newtype, how can I ask for the environment? 
[18:55:57] <ski> just ask
[18:56:00] <ski> @type ask
[18:56:01] <lambdabot> MonadReader r m => m r
[18:56:13] <romesrf> :) i think something isn't working hahahah
[18:56:24] <ski> @type asks
[18:56:24] *** Joins: alp (~alp@user/alp)
[18:56:25] <lambdabot> MonadReader r m => (r -> a) -> m a
[18:56:27] *** Quits: slack1256 (~slack1256@186.11.31.131) (Ping timeout: 256 seconds)
[18:56:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:56:55] <romesrf> :+1: that's what I was expecting, but instead I get couldn't match ReaderT with ohhhh i understand my mistake now :)
[18:57:06] <romesrf> i'm probably importing the wrong ask
[18:58:07] <romesrf> that was it thank you, ahahahah
[18:58:58] <ski> oic, np
[19:02:30] <jkaye[m]> I would not agree with that understanding
[19:02:43] <jkaye[m]> Laziness is nice, but I don't think it's Haskell's primary benefit
[19:02:44] <jkaye[m]> There are many people who would love a strict-by-default Haskell (no comment on whether that's "good" or not)
[19:05:07] <ski> laziness can help with modularity
[19:08:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:09:27] <jkaye[m]> WhateverRabbit: not sure what you mean by that
[19:10:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[19:10:16] *** Quits: CHUD (~CHUD@dhcp6531.kent.ac.uk) (Remote host closed the connection)
[19:11:47] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[19:13:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:14:55] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Ping timeout: 256 seconds)
[19:14:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[19:17:36] <jkaye[m]> Why do you think that can't be done strictly? You can even do it strictly in GHC using extensions. It does change the semantics of the function of course
[19:17:47] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:22:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:26:25] *** Joins: CHUD (~CHUD@edu791A.kent.ac.uk)
[19:27:00] <CHUD> what does this function do? f x = if even (x + 1) then x + 1 else f (x - 1), like how does it evaluate?
[19:28:01] <CHUD> I tested it, f 2 returns 2 and f 3 returns 4
[19:28:10] <opqdonut> first the condition of the if gets evaluated, and based on that either the then or else gets evaluated
[19:28:26] <opqdonut> you can just plug in the values and do it by hand
[19:28:42] <CHUD> if it's an even number then what happens to (x+1) that's straight after it?
[19:28:57] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:7513:3c16:cd2c:7377)
[19:29:01] <CHUD> if even (x+1)
[19:29:16] <opqdonut> you can just plug in the values and do it by hand
[19:29:38] <CHUD> I don't understand how the if then else statement works 
[19:29:40] <opqdonut> f 3 ==> if even (3+1) then 3+1 else f (3-1) ==> if True then 3+1 else f (3-1) ==> 3+1 ==> 4
[19:29:50] <opqdonut> it's not a statement, it's an expression
[19:29:57] <opqdonut> it has a value
[19:30:11] <opqdonut> it's pretty similar to the ?: operator in C/Java/JavaScript
[19:30:22] <merijn> I'd even say identical :p
[19:30:50] <opqdonut> in JS you'd write something like: f = x => even(x+1) ? (x+1) : f(x-1)
[19:31:05] <CHUD> I don't know any other languages
[19:31:16] <CHUD> opqdonut: thank you 
[19:31:27] <opqdonut> interesting, why did you call it an if _statement_ if you don't know any other languages?
[19:31:46] <ski>   if True  then x else y  =  x
[19:31:47] <CHUD> it's from Haskell MOOC I just read it online 
[19:31:48] <ski>   if False then x else y  =  y
[19:32:04] <ski> can be regarded as defining equations for `if'-`then'-`else'
[19:32:19] <opqdonut> CHUD: you mean this? https://haskell.mooc.fi/part1#how-do-i-get-anything-done
[19:32:25] <CHUD> yes
[19:32:26] <ski> CHUD : sounds like that is bad, at least in that regard, in that case
[19:32:28] <opqdonut> it says pretty much what I just told you
[19:32:35] <opqdonut> I should know, I wrote that mooc :P
[19:33:06] <ski> ah, it doesn't say anything about "statements" in Haskell
[19:33:58] <ski> "In other languages, `if' is a statement. It doesn’t have a value, it just conditionally executes other statements.","In Haskell, `if' is an expression. It has a value. It selects between two other expressions. It corresponds to the `?:' operator in C or Java."
[19:34:11] <opqdonut> CHUD: anyway, haskell's if-then-else lets you select between two values (or expressions, if you want to be pedantic)
[19:35:36] <opqdonut> it's kind of like english
[19:35:57] <opqdonut> "what's the color? well, if the fruit is an apple, green, otherwise red"
[19:36:11] <ski> CHUD : to evaluate an `if'-`then'-`else' (aka a conditional) expression, `if <condition> then <consequent> else <alternate>', you evaluate the condition. if it's `True', then the result of evaluating the `if'-`then'-`else' will be the result of evaluating the consequent expression. otherwise (i.e. if the condition is `False'), it will be the result of evaluating the alternate expression
[19:36:43] <ski>   if isApple myFruit then green else red
[19:37:10] <CHUD> so it doesn't evaluate if the x input is even it checks if (x+1) is even?
[19:37:23] <messier102> all red apples in the world shook in terror
[19:37:36] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[19:37:39] <ski> CHUD : yes
[19:37:45] <opqdonut> CHUD: yes, the code is writte `if even (x+1) then ...`, not `if even x then ...`
[19:38:32] <ski> either the `then' branch (consequent) or the `else' branch (alternate) will be chosen, depending on the value of the condition
[19:38:45] <CHUD> alright, thank you 
[19:39:01] <ski> so, it's a way to express choice, choosing between two alternatives, depending on the outcome of checking a condition
[19:42:07] <messier102> CHUD: are you learning Haskell as your first programming language? If so, what made you choose it?
[19:43:15] <CHUD> I just found it on mooc.fi and picked it, there was little thought, I'm also working through part 1 of the java cource 
[19:43:30] <messier102> I see, interesting
[19:43:48] <CHUD> Java is just to supplement my university course
[19:43:53] <geekosaur> two at once seems like a good way to confuse yourself, though
[19:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:44:17] <CHUD> Haskell isn't a top priority, just doing it on the side 
[19:45:19] <CHUD> I have my functional programming module starting in a couple of months
[19:45:56] *** Joins: gaff (~gaff@49.207.198.16)
[19:46:20] <messier102> What are you majoring in, if you don't mind me asking?
[19:46:24] <ski> nice
[19:46:33] <CHUD> computer science
[19:46:43] <gaff> is there a way to create the binary literal 0b11110000, say?
[19:47:13] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:47:16] <geekosaur> gaff, ghc 9.x supports that directly
[19:47:24] <int-e> There's {-# LANGUAGE BinaryLiterals #-}
[19:47:24] <gaff> i see
[19:47:53] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:47:58] <int-e> ah does ghc 9.x enable that by default now...
[19:49:05] <gaff> geekosaur: yeah, i saw the language extension, i can type it in GHCi, but i was wondering how the code can generate it.
[19:49:13] <int-e> 9.2 does, 9.0 doesn't
[19:49:20] <gaff> i see
[19:49:36] <ski> "generate"/"create" meaning ?
[19:50:57] <int-e> In any case the extension has been there for a long time. (8.0.2 has it, that's the oldest version I have here, but I expect it has been there for much longer)
[19:52:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:55:08] <gaff> yeah, i use 8.10.4, and it has that extension, but not much more
[19:55:49] <gaff> ski: yeah, how can a function for example return a binary literal?
[19:56:27] <c_wraith> gaff: binary literals only exist in source
[19:56:29] <gaff> not possible in 8.10.4
[19:56:47] <c_wraith> gaff: as far as a function is concerned, they're just a number
[19:56:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[19:57:09] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:57:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:57:47] <ski> gaff : .. just do it ?
[19:58:10] <ski> % let f x = (x,0b11110000) in f 2
[19:58:11] <yahb> ski: (2,240)
[19:58:16] <ski> seems to work fine, to me
[19:58:24] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:58:32] <geekosaur> gaff, the computers we use all use binary internally. how you enter or display a number has no relationship to how the computer stores it or works with it
[19:59:07] <gaff> geekosaur: yes
[19:59:14] <geekosaur> and even the binary representation is mostly an invisible detail unless you start to use bit operations on them
[19:59:27] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:59:29] <gaff> correct
[19:59:53] <opqdonut> > Numeric.showBin 240 ""
[19:59:55] <lambdabot>  error:
[19:59:55] <lambdabot>      Not in scope: ‘Numeric.showBin’
[19:59:55] <lambdabot>      Perhaps you meant one of these:
[20:00:13] <ski> % (showString "0b" . showIntAtBase 2 intToDigit 0b11110000) ""
[20:00:13] <yahb> ski: "0b11110000"
[20:00:17] <ski> % (showString "0b" . showIntAtBase 2 intToDigit 240) ""
[20:00:18] <yahb> ski: "0b11110000"
[20:00:35] <opqdonut> yeah
[20:00:57] <geekosaur> I think yahb has showBin
[20:01:12] <geekosaur> % Numeric.showBin 240 ""
[20:01:12] <yahb> geekosaur: ; <interactive>:40:1: error:; Not in scope: `Numeric.showBin'; Perhaps you meant one of these: `Numeric.showHex' (imported from Numeric), `Numeric.showInt' (imported from Numeric), `Numeric.showOct' (imported from Numeric)
[20:01:19] <geekosaur> guess not
[20:01:20] <gaff> yeah, but that is a string, now how do i get that into a binary literal?
[20:01:31] <opqdonut> I guess Numeric.showBin is too new to be on any of the bots
[20:01:38] <messier102> gaff: what do you mean by a literal, exactly?
[20:01:43] <ski> gaff : no, question makes no sense
[20:02:06] <gaff> sorry, i am a bit confused
[20:02:23] <gaff> literal: 123
[20:02:27] <opqdonut> you _could_ define your own `newtype Bin = Bin Int` with a `Show` instance that prints it as 0b101010
[20:02:38] <opqdonut> maybe that's what you're after?
[20:02:47] <ski> literals are things that appear in text. e.g. in source code, or in the `String's produced by `Show' (or the ones consumed by `Read')
[20:03:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[20:03:33] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[20:03:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:04:13] <ski> literals are converted to values (and the other way around), when going from source (or `String') (repsectively when using `Read'). so a function can't possibly "return a literal", except in the sense that it may return some text, which involves a literal
[20:04:13] <romesrf> how would i do mapConcurrently but over a MonadIO m => t m a rather than IO a? I was looking at monadUnliftIO but i'm unsure
[20:04:22] <ski> a number is a number, not a literal
[20:04:24] <gaff> ok, here is my problem.  i want to distinguish binary number from a decimal in calculations.  now the problem is that we have numbers such as 1100 that can go both ways, so i need a representation for binary to make the cut clear.
[20:04:47] <c_wraith> gaff: numbers aren't binary or decimal. those are details about the *representation* of a number.
[20:04:52] <ski> gaff : you should normally not think of numbers in calculations as being in any base whatsoever
[20:05:01] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[20:05:12] <Hecate> shapr: a cookie is a header
[20:05:17] <gaff> ski: i am doing stuff with bits etc
[20:05:19] <Hecate> ugh
[20:05:24] <ski> what stuff ?
[20:05:26] <Hecate> shapr: please disregard this message
[20:05:31] <gaff> like conversions
[20:05:38] <ski> meaning ?
[20:05:57] <c_wraith> romesrf: a typical MonadIO instance will carry additional contents that have no obvious way to fork.
[20:06:03] <gaff> converting binary numbers to decimals, decimals to a list of bits, etc
[20:06:27] <romesrf> c_wraith: i see! :) makes sense
[20:06:39] <ski> there aren't really such a thing as binary *numbers*. there are binary *numerals*/*literals*
[20:06:54] <gaff> sorry, binary literals
[20:06:55] <messier102> gaff: it sounds to me like you want to convert between different textual representations of a number (so, Strings)
[20:06:56] <ski> numbers are numbers, they are neither binary, nor decimal, not of any other base
[20:07:32] <c_wraith> romesrf: like, say you're working in 'StateT Foo IO Bar' - It's not too bad to decide each concurrent call gets the same initial state, but what do you do with all the different result states?
[20:07:34] <gaff> so if i say to you 1100, what does it mean?
[20:07:48] <ski> is that supposed to be a `String' ?
[20:07:51] <messier102> gaff: I don't know, what's the base?
[20:07:52] <gaff> no
[20:07:56] <gaff> literal
[20:08:11] <ski> so, it is some kind of text, then ?
[20:08:11] <geekosaur> I could imagine a numeric type which carried along with it a preferred base representation. the complication then becomes what happens if you multiply (10 @10) * (6 @8), which base is the result?
[20:08:12] <opqdonut> if you tell GHC 1100 it will mean 1100 in base ten, that is, one thousand and one hundred
[20:08:14] <CHUD> I get this error when I try to run the Set1Test.hs Mooc/Test.hs:19:1: error:     Could not find module ‘Test.QuickCheck’     Use -v (or `:set -v` in ghci) to see a list of the files searched for.    | 19 | import Test.QuickCheck    | ^^^^^^^^^^^^^^^^^^^^^^  Mooc/Test.hs:20:1: error:     Could not find module ‘Test.QuickCheck.Monadic’     Use -v (or `:set -v` in ghci) to see a list of the files searched for.    | 20 | import Test.QuickCheck.Monadic  
[20:08:20] <ski> appearing in Haskell source, or what ? program input ?
[20:08:37] <ski> we need to know the context in which it appears, to be able to tell
[20:08:39] <CHUD> It's when I run the command from a terminal in vs code 
[20:08:41] <gaff> can appear in haskell source
[20:08:43] <opqdonut> CHUD: did you run `stack build`?
[20:08:47] <CHUD> Yes
[20:08:58] <c_wraith> romesrf: this is the reason forkIO (and things based on it, like mapConcurrently) only work in IO. Everything else has more rules, and it isn't obvious what those rules should be
[20:09:26] <romesrf> c_wraith: that's insightful, thank you
[20:09:28] <opqdonut> CHUD: and you're running the tests with `stack runhaskell Set1Test.hs`?
[20:09:33] <ski> if it appears in Haskell source, then it's a decimal numeric literal (assuming there's no `0x',`0o' or `0b' prefix before it, or it being part of an identifier, or a `String' literal or anything like that)
[20:09:45] <CHUD> on the regular terminal not the one in vs code
[20:09:50] <CHUD> I'll try it in vs code 
[20:10:30] <CHUD> opqdonut: sorry, it seems to be doing something again x/71 
[20:10:35] <gaff> ski: so can haskell code generate a literal like 0b1100?  i am using 8.10.4
[20:10:55] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:11:02] <wavemode> -X BinaryLiterals
[20:11:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:11:14] <ski> gaff : what do tou mean by "generate a literal" ?
[20:11:14] <c_wraith> gaff: literals are strings. you can certainly write a function that returns that string. But it's not a number.
[20:11:20] <messier102> gaff: think about it this way: numeric values in Haskell (e.g. Int) encode some quantity. Whether we choose to represent that quantity as 255 (base 10), or 0xFF, or 0b11111111, all of which are equivalent, is a detail relating to the textual representation of that quantity
[20:11:21] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[20:11:34] <ski> gaff : it can generate a `String' (or some other text format) that includes such a literal, sure
[20:11:49] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[20:12:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:12:46] <gaff> ski: there is no way to do that, is it, because that doesn't make sense?
[20:13:11] <gaff> i think i will need to think about that a bit more
[20:13:11] <ski> to do what ?
[20:13:28] <opqdonut> CHUD: you might find more help on the course's telegram channel (see the material), many people are using vs code to work on the course but I'm not that familiar with vs code myself. The instructions do work in a normal linux terminal at least :)
[20:13:47] <gaff> i mean haskell function can return a literal like 123, but can it return 0b1100?
[20:13:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:14:12] <ski>   foo x = "123"
[20:14:21] <ski>   bar y = "0b1100"
[20:14:25] <ski> there you go
[20:14:36] <gaff> ok
[20:14:42] <ski> both functions "return literals"
[20:14:50] <messier102> gaff: if a function returns a number, it doesn't return a string of characters "123". It returns a value representing that quantity, which can be expressed in different ways
[20:15:05] <messier102> % 1100 = 12
[20:15:05] <yahb> messier102: 
[20:15:09] <messier102> % 1100 == 12
[20:15:09] <yahb> messier102: False
[20:15:20] <messier102> my binary math is off today, sorry
[20:15:24] <gaff> ski: thanks
[20:15:26] <ski> % 2 = 3
[20:15:26] <yahb> ski: 
[20:15:33] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 256 seconds)
[20:15:35] <janus> does anybody have the sources for GHC 2? because it is needed it build GHC 3
[20:15:58] <messier102> % 0b1100 == 12
[20:15:58] <yahb> messier102: True
[20:16:04] <CHUD> opqdonut: It seems to be progressing, I think when I first ran it, it build a different sent of haskell files I had, when I just ran it again now, I went into the exercises path and then ran stack... and it has just finished completing the 71 actions 
[20:16:29] <ski> % !2 = 3
[20:16:30] <yahb> ski: ; <interactive>:48:1: error: Top-level strict bindings aren't allowed: !2 = 3
[20:16:32] <ski> bah :)
[20:16:35] <dolio> janus: https://www.haskell.org/ghc/download_ghc_210.html
[20:16:57] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:7513:3c16:cd2c:7377) (Quit: Leaving)
[20:17:17] <dolio> Oh, that's an FTP link?
[20:17:24] <janus> it doesn't work
[20:17:25] <gaff> ski: so literal = string of characters
[20:17:38] <janus> "Error in server response" says wget
[20:17:38] <CHUD> opqdonut: I just did a quick test after completing exercise 1 in set 1 and it ran and passed
[20:18:00] <dolio> You might need to ask SPJ directly or something.
[20:18:10] <opqdonut> CHUD: great
[20:18:10] <ski> gaff : literal is a source notion. when representing source in Haskell, we tend to use `String', or some other text-representation (or perhaps an Abstract Syntax Tree, even)
[20:18:15] <wavemode> if the git repository goes back far enough you can checkout the source code of any historical version
[20:18:24] <wavemode> building it will be another story
[20:18:27] <janus> ok i will shoot SPJ a mail then
[20:18:28] <messier102> gaff: I think it would be easier to think about it if you banned the word "literal" from your vocabulary for a moment, because you seem to have misunderstood what it means
[20:18:32] <gaff> ski
[20:18:57] <ski> gaff
[20:19:23] <gaff> yes
[20:19:52] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:20:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:21:17] <gaff> so (0b11110000 + 0b00001111) :: Int = 255  => this is a source notion
[20:21:39] <CHUD> opqdonut: thank you for helping me
[20:22:13] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[20:22:49] <ski> gaff : saying "my function returns a literal" sounds off in the same way as saying "my function returns a variable" or "my function returns a definition". strictly speaking, none of these can be the case, since the things that purportedly would be returned are not entities that exist at the level of Haskell evaluation. however, in the specific context of talking about some (e.g. source) language (e.g. 
[20:22:55] <ski> Haskell, or some other one), we can understand the former phrases as being shorthand for returning Haskell *representations* of those things (literals,&c.)
[20:23:09] <janus> what is up with that ftp server
[20:23:12] <janus> nc -vvv ftp.dcs.gla.ac.uk 21
[20:23:13] <janus> Connection to ftp.dcs.gla.ac.uk 21 port [tcp/ftp] succeeded!
[20:23:20] <janus> and then it just never replies
[20:23:24] <gaff> ok
[20:24:18] <dolio> I'm honestly surprised it's still actually running.
[20:24:20] * shapr hugs Hecate 
[20:24:22] <wavemode> the server must be lazy
[20:24:51] <romesrf> what happened to this (Haggis)? : https://www.microsoft.com/en-us/research/wp-content/uploads/1995/09/composing-haggis.pdf
[20:25:01] <gaff> so the expression  (0b11110000 + 0b00001111) :: Int contains binary l"literals"
[20:25:02] <ski> gaff : the sequences of characters `0b11110000',`0b00001111' (and the sign `+' and the parentheses, and the `::' and the `Int') and `255' are source-level notions. however, when reading the expression (to the left of `=') into Haskell, those gets translated into corresponding Haskell evaluation notions (so the numeric literals (being in binary) gets translated to numbers (not being in any particular base), 
[20:25:08] <ski> the `+' operator gets translated to the addition function)
[20:25:27] <gaff> ok
[20:25:31] <messier102> Literals can be viewed as opposed to variables. They are the actual concrete values *in the source code*. For example, if you were to go and write `addTwo x = x + 2`, the 2 there would be considered a literal -- because we refer to all other values indirectly by their variable name.
[20:25:44] <ski> oh, Haggis .. haven't heard that name in a long time
[20:25:49] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:25:51] <romesrf> ahah :)
[20:26:08] <c_wraith> messier102: I don't think that's the right contrast. I think the right contrast is that a literal is something you can represent in source code without calling a conversion function.
[20:26:12] <gaff> messier102: correct
[20:26:14] * ski also misses Fudgets
[20:26:59] <janus> what happened to Thomas Hallgren?
[20:27:25] <janus> doesn't even mention FP on https://www.linkedin.com/in/thallgren/?locale=sv_SE
[20:27:32] <janus> wonder if it is the right Hallgren
[20:27:37] <messier102> c_wraith: well, yes, but I'm not coming at it from the compiler perspective necessarily :) this is already confusing enough
[20:28:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[20:28:37] <ski> janus : he still has <https://cth.altocumulus.org/~hallgren/>, which includes Fudgets,Alfa,&c.
[20:28:50] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[20:28:59] *** Joins: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net)
[20:29:08] <gaff> c_wraith: what do you mean by "conversion function"?
[20:29:11] <romesrf> ski: what's the Haggis story? it looks interesting but i can find nothing at all anywhere
[20:29:23] <romesrf> i first saw it mentioned at the end of `Concurrent Haskell`
[20:29:25] <ski> "WebFudgets (2017)  WebFudgets allow Haskell programs built with Fudgets (see below) to run in a web page. I have adapted some of the Fudgets programs from back in the day to WebFudgets."
[20:30:16] <ski> oh, and Hallgren also did WWWBrowser in Haskell (using Fudgets), which automagically could fetch images in parallel, displaying pages faster than Mosaic
[20:30:21] <dolio> It seems like the important thing to point out in this context is that literals are notation for values. They're not values, and many literals can be notation for the same value.
[20:30:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[20:30:52] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[20:30:55] <dolio> And the notation originally used to describe the value has no effect on how the value is printed to the screen.
[20:31:02] <ski> romesrf : i don't believe i looked that much into Haggis at the time (i did read more about Fudgets, to be sure)
[20:31:11] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[20:31:28] *** Quits: ubert (~Thunderbi@p200300ecdf0994a856831da0cd63cc4d.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:31:45] *** Joins: slack1256 (~slack1256@191.125.227.215)
[20:31:50] <c_wraith> gaff: there's nothing special about that term. It's a function that converts something to something else.
[20:31:59] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:32:01] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[20:32:05] <ski> "The programming languages I used in the beginning were mostly BASIC and 6502 assembler." -- hehe :)
[20:32:12] *** Joins: Akiva (~Akiva@user/Akiva)
[20:32:27] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[20:32:52] <gaff> ski: that's way back
[20:33:00] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:33:01] <ski> which ?
[20:33:01] *** Quits: CHUD (~CHUD@edu791A.kent.ac.uk) (Remote host closed the connection)
[20:33:06] <gaff> BASIC
[20:33:19] *** Joins: CHUD (~CHUD@edu791A.kent.ac.uk)
[20:33:22] <gaff> do people use that stuff anymore?
[20:33:25] * ski also, incidentally, started with BASIC, and 6502 assembler
[20:33:35] *** Quits: slac13545 (~slack1256@191.125.227.202) (Read error: Connection reset by peer)
[20:34:13] <gaff> c_wraith: like fromIntegral?
[20:34:39] <messier102> maybe we're reinventing the wheel here
[20:34:40] <messier102> https://en.wikipedia.org/wiki/Literal_(computer_programming)
[20:34:50] <ski> well .. i've been, on and off, lately, disassembling a Prolog implementation for the Commodore 64 (wanting to add LCO/TCO, and probably the "same" for disjunctions. and want to fix a bug with variable name display, and perhaps some other tweaks as well)
[20:35:12] <c_wraith> gaff: like every single function except for id
[20:35:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:35:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[20:35:28] <gaff> yeah
[20:35:51] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:36:06] <janus> oooh good to see his website.
[20:36:24] <Cheery> I'm in middle of implementing typeclasses in my own runtime/compiler. Any ideas or advices that I might miss otherwise?
[20:36:35] <ski> reminds me i want to try to install Fudgets and Alfa again
[20:36:40] <gaff> but a binary literal is desugared to fromInteger 0b... 
[20:36:43] *** Quits: RFV (~Thunderbi@139.red-88-12-223.dynamicip.rima-tde.net) (Quit: RFV)
[20:36:48] <gaff> under the hood
[20:37:18] <ski> all integer literals are desugared like that .. that's not specific to binary ones
[20:38:41] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[20:38:55] <gaff> i am contrasting with what has been said earlier ... that literals do not need conversion functions.  perhaps what was meant was that they do not need explicit conversion functions.
[20:38:55] <ski> (and the decimal/octal/hexadecimal/binary integer literal, of type `Integer', that's being passed to `fromInteger', is read/translated into an integer (number))
[20:39:10] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:40:20] *** Joins: tavares (~tavares@187.19.213.50)
[20:40:21] <ski> i didn't really follow the conversion part of the conversation, but i guess the idea was that there was no *explicit* conversion in the source, for a literal ?
[20:40:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689)
[20:40:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:40:51] <dolio> I think that angle is not going to clear up confusion.
[20:41:05] <gaff> i am not sure what the person who mentioned it really meant.
[20:41:10] * ski . o O ( To converse or not to conserve, is that the question ? )
[20:41:13] <messier102> gaff: I think you're fixating on the "conversion function" remark too much. It's not that important to understanding the notion of a literal.
[20:41:22] <gaff> ok
[20:42:09] <dolio> > 0 == (256 :: Int8)
[20:42:10] <lambdabot>  True
[20:42:48] <messier102> Maybe an analogy would help. Think of a literal as a recipe for a cake. When a program runs, it takes that recipe and creates an actual cake (runtime value in memory) from it. But the recipe itself is not something that exists as a physical object during execution.
[20:42:51] <dolio> > (256 :: Int8)
[20:42:54] <lambdabot>  0
[20:43:21] <wavemode> shouldn't it wrap to negative if it's signed
[20:43:23] <dolio> Doesn't matter that I typed in 256, it still prints 0.
[20:43:24] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:43:27] *** Joins: Feuermagier_ (~Feuermagi@84.17.48.173)
[20:43:36] <dolio> wavemode: It did. :)
[20:43:57] <ski> messier102 : heh, that's a new take of that analogy :)
[20:44:02] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[20:44:21] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:44:21] <messier102> ski: can you guess I just read a lecture on monads :D
[20:44:37] <ski> @quote not.the.cake
[20:44:37] <lambdabot> ski says: <ski> `getLine :: IO String' is a recipe for how to interact with the world to acquire a `String'  <ski> the recipe is not the cake
[20:44:44] <messier102> a number is like a burrito...
[20:45:15] <gaff> too many analogies on food
[20:45:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 250 seconds)
[20:46:47] <gaff> ski: thanks much for your help.
[20:46:50] <ski> np
[20:47:02] <gaff> thanks everyone.
[20:47:10] <gaff> bye
[20:47:18] <ski> laters. have fun with Haskell !
[20:47:19] *** Quits: gaff (~gaff@49.207.198.16) ()
[20:47:50] <messier102> I hope it was at all helpful
[20:50:11] <geekosaur> @quote rightly.apprehend
[20:50:11] <lambdabot> No quotes match. :(
[20:50:48] <geekosaur> "I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question."
[20:51:33] <ski> @remember Charles_Babbage I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.
[20:51:34] <lambdabot> I will never forget.
[20:52:03] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Quit: Leaving.)
[20:52:23] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[20:52:44] <messier102> powerful words
[20:53:22] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:53:25] *** Joins: slac93974 (~slack1256@186.11.30.195)
[20:54:32] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[20:54:32] *** Joins: tavares (~tavares@user/tavares)
[20:55:27] *** Quits: slack1256 (~slack1256@191.125.227.215) (Ping timeout: 256 seconds)
[20:56:37] *** Quits: xff0x (~xff0x@2001:1a81:5224:e000:7446:150d:d8ae:ed12) (Ping timeout: 240 seconds)
[20:58:41] *** Joins: xff0x (~xff0x@2001:1a81:5244:c900:da3d:85a0:8128:63)
[20:59:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[21:00:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:01:29] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[21:01:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:01:55] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:02:41] <CHUD> quadruple :: Integer -> Integer quadruple x = double (double x)
[21:03:02] <CHUD> ignore that sorry, I was trying to write a multiline 
[21:03:11] <ski>   quadruple = double . double
[21:04:39] *** Quits: CHUD (~CHUD@edu791A.kent.ac.uk) (Remote host closed the connection)
[21:04:55] *** Joins: CHUD (~CHUD@edu791A.kent.ac.uk)
[21:05:35] <wavemode> quadruple = decimate . vigintuple
[21:05:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 240 seconds)
[21:06:53] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[21:06:53] *** Joins: maerwald (~maerwald@user/maerwald)
[21:14:35] *** Parts: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net) ()
[21:14:59] *** Joins: wavemode (~wavemode@2601:241:0:fc90:da0f:27a6:a9a0:a864)
[21:17:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:00] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5857:f054:76af:4d5e)
[21:18:10] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[21:18:33] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:20:12] *** Quits: romesrf (~romes@bl8-111-202.dsl.telepac.pt) (Quit: WeeChat 3.4)
[21:20:23] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:20:43] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:20:57] *** Quits: CHUD (~CHUD@edu791A.kent.ac.uk) (Ping timeout: 256 seconds)
[21:22:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[21:22:57] *** Quits: max22- (~maxime@2a01cb0883359800f5889d6f7a8326a9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:22:57] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5857:f054:76af:4d5e) (Ping timeout: 240 seconds)
[21:23:47] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[21:31:09] *** Joins: zuhkov (~duycop@14.166.144.253)
[21:31:24] *** Joins: alp (~alp@user/alp)
[21:31:37] *** Parts: zuhkov (~duycop@14.166.144.253) ()
[21:36:49] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[21:39:49] *** Quits: wavemode (~wavemode@2601:241:0:fc90:da0f:27a6:a9a0:a864) (Quit: Client closed)
[21:40:05] *** Joins: wavemode (~wavemode@2601:241:0:fc90:da0f:27a6:a9a0:a864)
[21:40:55] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[21:42:49] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[21:48:20] <monochrom> Aaahhhh late to a conversation that begs for bad puns. "What is a literal, literally?"  (OK I'm stopping now.)
[21:49:11] <geekosaur> that convo was confusing enough without, I think
[21:50:54] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[21:51:07] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[21:51:12] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:52:11] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:52:41] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[21:54:31] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[21:55:31] *** Quits: deadmarshal (~deadmarsh@95.38.113.90) (Ping timeout: 256 seconds)
[21:55:58] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:56:54] <justsomeguy> What do you guys think of this article "When You Should Use Lsts in Haskell (Mostly, You Should Not)" https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/list-or-not-list/
[21:57:34] <EvanR> list is good for composing computations and bad for big data storage
[21:58:04] <EvanR> in haskell it's cool because those two are not the same
[21:58:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[21:58:37] <geekosaur> in many ways it's best to think of a list as a loop rather than a data structure
[21:59:11] <c_wraith> Honestly, I think most list aversion is overblown, like string aversion.  Ok, those are the same thing.
[21:59:24] <c_wraith> Most of the time, it doesn't matter.
[21:59:29] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:59:39] <wavemode> lists, like any data structure you use, need to be evaluated in terms of their asymptotics. lists have O(1) cons but O(N) most everything else, so you should only use them if that's acceptable for your use case
[22:00:14] <geekosaur> yeh, I have a decent amount of code locally that just uses lists because they're easy and they don't sling around anywhere near enough data to justify something else
[22:00:18] <c_wraith> Haskell lists have other really nice properties, like being easy to produce and consume in O(1) space
[22:00:58] <wavemode> many people also don't like relying on list fusion :p
[22:01:05] <c_wraith> that doesn't rely on fusion!
[22:01:14] <c_wraith> fusion is only a constant-factor improvement
[22:01:36] <geekosaur> and xmonad has gotten by for over a decade with lists, mainly because it's extremely rare to have enough windows open for it to matter
[22:01:53] <ski> (zipper)
[22:02:02] <c_wraith> I can't imagine successfully using a computer with several thousand open windows :)
[22:03:07] <EvanR> browser tabs on the other hand
[22:03:08] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[22:03:14] <Cheery> I keep forgetting I got windows open and there's plenty of them behind.
[22:03:41] <monochrom> I would support "When You Should Use Lists in Any Language at All (Mostly You Shouldn't)".
[22:04:29] <monochrom> OK, I need to correct it to "When You Should Use Lists for Data in Any Language at All (Mostly You Shouldn't)".
[22:04:32] <ski> .. perhaps if you indexed your windows, possibly adding tags, and allowed searching for the one you wanted ?
[22:04:39] <c_wraith> You should probably use lists more in Haskell than most languages
[22:04:40] <EvanR> how about "for some x, when you should use data structure x in any language at all mostly you shouldn't"
[22:05:21] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:05:51] <EvanR> there's the idea of "the one true number type" and "the one true container type" in many languages, an ideal form that the wise designers attempted to approximate
[22:06:05] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[22:06:13] <geekosaur> we even have a module supporting that (TagWindows)
[22:06:26] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:06:38] <EvanR> mostly you shouldn't use the one true number type or container type
[22:06:50] <maerwald> thanks to the "lists are great" mentality, we still have `type String = [Char]`
[22:07:00] <c_wraith> maerwald: and there's nothing wrong with that
[22:07:26] <maerwald> right... I guess that's why I'm putting so much time into removing `type FilePath = String` :D
[22:07:32] <justsomeguy> I guess this discussion applies to any language with singly-linked lists. The article gives a general rule of thumb that lists should usually not be used where out-of-order access is required. I think that's reasonable. It also claims that lists don't properly segregate iteration and data representation, which I'm undecided about either way.
[22:07:42] <c_wraith> now there is a *lot* wrong with FilePath = String
[22:07:48] <c_wraith> because that's just plain false
[22:08:23] <EvanR> church encoding wonders why you'd want to segregate iteration and representation? xD
[22:08:23] <maerwald> exactly... people use what is convenient, not what is correct
[22:08:42] <maerwald> lists happen to be convenient in haskell
[22:08:45] <maerwald> so they're all over the place
[22:08:46] <Cheery> why [Char] and not [Integer]?
[22:09:00] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8d1b:5472:3cae:e50c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:09:13] <wavemode> what's that Church and state quote
[22:09:22] <maerwald> Cheery: lol
[22:09:32] <EvanR> haskell could use more convenience I think, we've got enough correctness to last until end of nuclear winter
[22:09:41] <maerwald> EvanR: where?
[22:09:57] <ski> @quote church.and.state
[22:09:57] <lambdabot> shapr says: Haskell separates Church and state!
[22:10:06] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[22:10:17] <ski> @quote separation.of
[22:10:17] <lambdabot> GuySteele says: Some people prefer not to commingle the functional, lambda-calculus part of a language with the parts that do side effects. It seems they believe in the separation of Church and
[22:10:17] <lambdabot> state.
[22:10:40] <ski> @quote are.dual
[22:10:40] <lambdabot> ski says: I'd rather say that in Haskell, Church and State are dual
[22:11:10] <EvanR> an outmoded identification of state with IO maybe
[22:11:49] <ski> (Church closely related to `forall o. (a -> o) -> o', State to `exists s. (s,s -> a)')
[22:12:43] <ski> (or `forall o. (f o -> o) -> o' vs. `exists s. (s,s -> f s)', with recursion)
[22:13:00] <monochrom> If one day I dualize System F that way, may I call it System E? :)
[22:14:12] <ski> hm, curious (going backwards in alphabet) .. i guess so
[22:14:50] <monochrom> An explanation is that E stands for "exists".
[22:15:01] <ski> yes, i gathered :)
[22:15:06] <Cheery> anyone knows if there are tricks to implementing typeclasses?
[22:15:11] <ski> "F" for "forall" ?
[22:15:20] <geekosaur> Cheery, why?
[22:15:37] <ski> <Cheery> I'm in middle of implementing typeclasses in my own runtime/compiler. Any ideas or advices that I might miss otherwise?
[22:15:40] <geekosaur> or what kinds of tricks are you thinking of? in ghc a typeclass instance is just a record of functions
[22:15:45] <monochrom> I don't know whether Girard or Reynolds meant "F" to stand for "for all", but it works revisionistly!
[22:16:03] <geekosaur> all they "need" to be is a type witness, but a record of implementations is a convenient witness
[22:16:07] <ski> backronyms ftw !
[22:17:18] <geekosaur> and can be optimized away via inlining in many cases, since polymorphic recursion isn't that common
[22:18:10] *** Joins: MoC (~moc@user/moc)
[22:18:23] <ski> (or existentials)
[22:19:11] <ski> (or higher-rank constraints)
[22:19:21] *** Joins: econo (uid147250@user/econo)
[22:21:09] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[22:22:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[22:23:14] <Cheery> well I'm implementing it in a runtime, using rpython.
[22:25:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[22:25:58] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:26:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[22:27:18] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[22:29:22] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:29:25] <Cheery> implicits are an another nice thing, and these resemble those a bit.
[22:30:50] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:30:59] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[22:31:23] <EvanR> how type classes are different from implicits
[22:31:39] <EvanR> Type Classes vs The World xD
[22:33:19] <Cheery> well.. implicits are passed by name, eg. you got same name {g} somewhere, that hidden variable fills up slots elsewhere.
[22:34:29] * ski . o O ( "What's in a name? That which we call a rose / By any other name would smell as sweet" )
[22:35:17] <ski> (it would be nice to be able to rename implicits, on import (and export))
[22:35:47] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[22:35:49] <EvanR> implicits give you access to the dictionary for whatever nefarious purposes, where as there's at most 1 instance for a given type class combination
[22:36:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:36:17] <EvanR> globally
[22:36:40] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[22:37:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[22:38:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:39:01] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[22:40:37] *** Quits: messier102 (~messier10@user/messier102) (Ping timeout: 240 seconds)
[22:40:38] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Read error: Connection reset by peer)
[22:41:25] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:53:11] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:53:33] <Cheery> I can adjust my type inference/checker to elaborate, so it can add app(name,Y) around name, to handle constraints.
[22:54:06] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 276 seconds)
[22:54:40] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:55:11] *** Joins: emf (~emf@162.218.217.190)
[22:59:00] *** Joins: emf_ (~emf@2620:10d:c090:400::5:9a32)
[22:59:52] *** Quits: emf (~emf@162.218.217.190) (Ping timeout: 250 seconds)
[23:00:16] *** Joins: vicfred (~vicfred@user/vicfred)
[23:00:41] *** Quits: rusrushal13 (~rusrushal@2409:4056:9:1708:2c2:74fb:7af9:78dc) (Ping timeout: 256 seconds)
[23:01:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[23:04:07] *** Joins: slack1256 (~slack1256@191.125.227.215)
[23:04:35] <Cheery> that way the generalize/instantiate also stays simple.. when the constraint is just a parameter to be passed implicitly.
[23:05:04] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:05:57] *** Quits: slac93974 (~slack1256@186.11.30.195) (Ping timeout: 240 seconds)
[23:08:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:09:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:11:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[23:11:53] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[23:15:04] *** Quits: wavemode (~wavemode@2601:241:0:fc90:da0f:27a6:a9a0:a864) (Quit: Client closed)
[23:18:10] *** Joins: marijan (~marijanma@2001:470:69fc:105::1:6cce)
[23:20:52] *** Quits: bgamari (~bgamari@2001:470:e438::1) (Remote host closed the connection)
[23:21:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:22:35] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[23:22:54] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[23:23:27] *** Joins: bgamari (~bgamari@70.16.102.89)
[23:23:35] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[23:23:53] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[23:25:18] *** Joins: chomwitt (~chomwitt@2a02:587:dc07:dd00:12c3:7bff:fe6d:d374)
[23:25:39] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[23:25:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:29:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:30:55] *** Joins: neurocyte0917090 (~neurocyte@IP-212232080188.dynamic.medianet-world.de)
[23:30:55] *** Quits: neurocyte0917090 (~neurocyte@IP-212232080188.dynamic.medianet-world.de) (Changing host)
[23:30:55] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:31:31] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:8299:55f4:a45f:d9c3) (Remote host closed the connection)
[23:33:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:43] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689) (Ping timeout: 256 seconds)
[23:39:29] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[23:39:36] <monochrom> Dear lyxia: Define "data B a = F | T", this can be easily made a functor and contravariant functor. With that, phatom F = F, phatom T = T.  However, "neg T = F; neg F = T" has the same type as phantom, B a -> B b, and still do different things.
[23:39:53] *** Joins: deadmarshal (~deadmarsh@95.38.113.90)
[23:41:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[23:42:02] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[23:43:14] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:48:29] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:50:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:50:19] *** Joins: cynomys (~cynomys@user/cynomys)
[23:50:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:51:29] *** Joins: califax (~califax@user/califx)
[23:51:47] *** Joins: slac63591 (~slack1256@186.11.28.67)
[23:52:04] *** Quits: fendor (~fendor@91.141.44.253.wireless.dyn.drei.com) (Remote host closed the connection)
[23:54:11] *** Quits: slack1256 (~slack1256@191.125.227.215) (Ping timeout: 256 seconds)
[23:57:00] *** Joins: ardell (~ardell@user/ardell)
[23:57:07] *** Quits: ardell (~ardell@user/ardell) (Client Quit)
[23:58:04] *** Joins: ardell (~ardell@user/ardell)
[23:58:59] *** Quits: xff0x (~xff0x@2001:1a81:5244:c900:da3d:85a0:8128:63) (Ping timeout: 250 seconds)
[23:59:52] *** Joins: xff0x (~xff0x@2001:1a81:5244:c900:2c67:9c0a:1653:d1e3)
