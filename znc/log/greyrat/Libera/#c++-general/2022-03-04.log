[00:04:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[00:06:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:07:00] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[00:09:59] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:13:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:14:48] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:16:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:17:07] *** Joins: Guest3689 (~Guest@181.95.236.163)
[00:21:15] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[00:22:04] *** Joins: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[00:25:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:26:45] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Read error: Connection reset by peer)
[00:27:19] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[00:28:33] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[00:33:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:36:56] *** Quits: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net) (Quit: CodePoint)
[00:49:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:50:05] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:50:17] *** Quits: dld (~davidlowr@73.61.8.74) (Ping timeout: 240 seconds)
[00:52:39] *** Joins: dld (~davidlowr@2601:197:600:1210:fddb:e1db:6b56:f9d3)
[00:54:26] <CarloWood> ville: I used it to verify most of my weakly ordered atomic algorithms.
[00:56:29] <CarloWood> Even what I wrote in C++ ... I wrote something that translates the C++ into C and then verifies it :P - so that I directly test the C++ code without the risk for errors introduced by me in between.
[00:56:57] *** Quits: jsbach (~jsbach@2a01:c23:64c8:ff00:8062:461e:f6a0:9313) (Ping timeout: 240 seconds)
[00:57:29] <ville> it's unable to see through std::thread and such even if they translate to pthread-based primitives then?
[00:57:51] <TinoDidriksen> ...so, you re-invented CFront?
[01:00:46] <CarloWood> ville: https://github.com/CarloWood/ai-statefultask-testsuite/blob/master/src/genmc_spinsemaphore_test.c#L87
[01:01:16] <CarloWood> those #include's are generated with awk (see the awk scripts in the same directory) from the actual C++ code.
[01:03:47] <ville> sort of limits* the utility in c++ environment then if it can't see through the basic c++ primitives.
[01:04:35] <CarloWood> See through? It's not C++ - but you can translate everything to C to test it.
[01:05:00] <CarloWood> They could write it for C++ too I'm sure - just nobody has done that?
[01:05:59] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[01:06:03] <ville> yes you may translate to c, just limits the utility somewhat, certainly going to be a harder sell in various places
[01:07:58] <CarloWood> Oh sure. Having to translate it really sucks.  But I am not going to try and make it work for C++ myself :(.
[01:08:16] <CarloWood> So whenever I REALLY have to test something, I have no choice.
[01:10:46] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:13:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:14:55] <CarloWood> I want to write a system to serialize "objects" to disk, and read them back into an object. I want to base this around boost::serialize - so that if the objects type has the right boost::serialization::serialize specialization, I can pick how they are serialized by wrapping the ostream/istream in the correct boost type.
[01:15:37] <CarloWood> For example, std::ofstream file("archive.xml"); boost::archive::xml_oarchive oa(file);  and then use 'oa' to do the serialization.
[01:16:34] <kalven> isn't that what boost.serialization is for?
[01:17:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:17:38] <CarloWood> I have an object that only exists of binary data: struct Foo { char* data; size_t size; };  how would I specialize boost::serialization::serialize such that I can serialize that to boost::archive::binary_oarchive?
[01:17:56] <yolo> {unorderd_map<int, list<pair<int,string>>::iterator> x;}
[01:17:56] <geordi> error: 'unorderd_map' was not declared in this scope
[01:18:06] <yolo> {unordered_map<int, list<pair<int,string>>::iterator> x;}
[01:18:07] <geordi>  
[01:20:48] <yolo> {namespace cache { template <typename K, typename V> class lru { private: unordered_map<K, list<pair<K,V>>::iterator> x;}}}
[01:20:48] <geordi> error: 'namespace' definition is not allowed here
[01:21:38] <yolo> { template <typename K, typename V> class lru { private: unordered_map<K, list<pair<K,V>>::iterator> x;}}
[01:21:39] <geordi> error: a template declaration cannot appear at block scope
[01:21:47] <CarloWood> yolo: it's  body_of_main    what_goes_BEFORE_main
[01:22:07] <CarloWood> so if you don't have a main just write:  {} whatever you want to test
[01:22:41] <yolo> does geordi have a web interface
[01:22:47] <CarloWood> no
[01:22:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ec7a:c710:284d:4802) (Ping timeout: 240 seconds)
[01:23:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[01:23:18] <yolo> std::unordered_map<K, std::list<std::pair<K, V>>::iterator> items;  -- I could not find what's wrong here, KV are typenames
[01:23:37] <kalven> yolo: use something like godbolt.org or wandbox.org if you want to do a longer snippet
[01:24:12] <CarloWood> { } namespace cache { template <typename K, typename V> class lru { private: unordered_map<K, list<pair<K,V>>::iterator> x;}; }
[01:24:12] <geordi> error: type/value mismatch at argument 2 in template parameter list for 'template<class _Key, class _Tp, class _Hash, class _Pred, class _Allocator> class unordered_map'
[01:25:44] <CarloWood> I think you need a 'typename'
[01:25:54] <CarloWood> { } namespace cache { template <typename K, typename V> class lru { private: unordered_map<K, typename list<pair<K,V>>::iterator> x;}; }
[01:25:54] <geordi>  
[01:26:04] <CarloWood> in front of the list<>::iterator
[01:27:59] <yolo> CarloWood: thanks! that fixed it
[01:29:27] <CarloWood> If a type depends on template parameters you have to tell the compiler that it is a type; because otherwise it can't know until it has K and V.
[01:29:51] <CarloWood> Ie  Foo<K, V>::iterator could be an int for certain K and V. You just can't know.
[01:30:59] * yolo jots down
[01:31:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e0cd:c88b:7499:2cc0)
[01:31:42] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:31:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758)
[01:32:30] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[01:32:37] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[01:32:49] *** Joins: pulse_ (~pulse@user/pulse)
[01:33:07] *** Quits: pulse (~pulse@user/pulse) (Killed (NickServ (GHOST command used by pulse_)))
[01:33:11] *** pulse_ is now known as pulse
[01:35:52] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:35:57] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Read error: Connection reset by peer)
[01:36:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:36:07] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[01:36:29] *** Quits: magla (~gelignite@d53619a1.access.ecotel.net) (Quit: Stay safe!)
[01:37:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:43:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:26] *** ChanServ sets mode: +v npaperbot
[01:44:47] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:45:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:51:36] *** Quits: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi) (Remote host closed the connection)
[01:52:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:53:05] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:59:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:04:56] *** Server sets mode: +Fcnt 
[02:06:30] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:14:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:15:22] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[02:18:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:27:45] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:31:22] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:33:17] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[02:46:36] *** Quits: Guest3689 (~Guest@181.95.236.163) (Remote host closed the connection)
[02:47:01] *** Joins: blackout69 (~blackout6@37.183.230.121)
[02:47:47] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[02:47:47] <Alipha> yolo: https://en.cppreference.com/w/cpp/language/dependent_name
[02:48:20] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[02:48:28] <Alipha> `iterator` is a name that's dependent on K and V
[02:48:51] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:49:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:49:16] <Alipha> what's even more fun is "The `template` disambiguator for dependent names"
[03:07:46] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[03:08:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:11:04] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[03:13:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[03:15:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:16:29] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:16:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:17:21] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:18:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:18:36] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[03:19:01] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:19:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[03:19:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[03:19:43] *** Joins: skapata (~Skapata@user/skapata)
[03:19:49] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[03:21:52] *** Joins: ferdna (~ferdna@user/ferdna)
[03:23:19] <ashafq> Alipha: I learned about weak_ptr today https://cpppatterns.com/patterns/weak-reference.html
[03:23:46] <ashafq> There should be a strong_ptr too
[03:24:43] <Alipha> ... shared_ptr == strong_ptr
[03:28:15] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[03:28:50] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[03:31:58] <Alipha> ashafq: shared_ptr should rarely be used. People often use shared_ptr because they don't understand their object lifetimes, or because they mistakenly believe "raw pointers are bad and never should be used." Really, you should just use unique_ptr (or plain objects!) and raw pointers (or references) to said objects
[03:38:46] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:39:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:42:20] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[03:42:45] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:43:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:44:35] *** Joins: PJBoy (~PJBoy@user/pjboy)
[03:45:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758) (Quit: Quit)
[03:46:10] <ashafq> Alipha: I had to use unique_ptr for dealing with C created "objects"
[03:46:37] <ashafq> I have not come across shared_ptr yet, but that would be fun 😊
[03:47:26] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:47:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:49:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:53:04] <cbreak> ashafq: shared_ptr is a very powerful tool, it automatically manages shared ownership of objects
[03:53:39] <cbreak> but you have to be careful when using it, because it is after all automatic reference counting, so reference cycles will give you leaks
[03:54:03] <cbreak> so, as most things in c++, it's a powerful tool that can be misused easily
[03:54:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:54:19] <ashafq> Yep 😊
[03:54:50] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[03:55:02] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[03:56:21] <LordKalma> std::variant does't use the heap, correct?
[04:00:14] <LordKalma> I was here designing a class that chooses an implementation algorithm on the constructor. First thought was unique_ptr to IAlgo ABC... But then I remembered variant/visit
[04:01:16] <LordKalma> pros: no heap alloc, no virtual overhead. cons: ABI breaks when you change the variant even though it's a private member (right?) but that's not a problem for me, and std::visit overhead
[04:01:29] <LordKalma> so I think it should be a better option
[04:02:32] <LordKalma> also the fact std::visit is basically duck typing always feels funny haha
[04:03:06] <kalven> how is it duck typing?
[04:05:03] <Alipha> LordKalma: indeed, no dynamic allocation. Cons: std::visit is awkward. Also, if your variant types vary a lot in size, you'll be wasting space on the small types you store
[04:05:12] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:05:16] <Alipha> And long compile times
[04:06:29] <LordKalma>  kalven, `std::visit([](auto&& arg){arg();}, some_variant);` implies any arg has operator(), which you aren't enforced to do while creating the variant
[04:06:51] <LordKalma> Alipha in this case of basically swapping out algos, I would expect the variant to be of similarly sized objects
[04:08:28] <LordKalma> I do wonder if the overhead of a virtual call is greater or smaller than the switch case inside ::visit + the overhead of the lambda functor
[04:08:43] <LordKalma> the lambda is probably optimizable away
[04:09:22] <kalven> LordKalma: sure, but that's not specific to visit. The callable you pass to visit doesn't have to be a template at all.
[04:10:38] <LordKalma> now that you mention it
[04:10:39] <LordKalma> https://en.cppreference.com/w/cpp/utility/variant/visit
[04:10:57] <LordKalma> I don't understand `template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;` // what does this mean, and why isn't it needed in C++ 20?!
[04:11:30] <LordKalma> and how std::visit(overloaded {/* ... */}, w) then works
[04:11:47] <LordKalma> it's creating an overload set by some black magic
[04:13:06] <kalven> it's just making a struct that inherits from all the args (the lambdas)
[04:14:41] <LordKalma> never saw -> applied that way
[04:15:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:15:45] <LordKalma> I clearly don't understand TMP
[04:15:47] <kalven> the -> is a template deduction guide
[04:19:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:20:12] <Alipha> LordKalma: I wouldn't be surprised if virtual calls are faster, as cpus probably have heuristics to recognize and optimize virtual calls
[04:21:23] <LordKalma> hum, so if the heap allocation isn't important, like in x86 isn't a big deal, unique_ptr to IImpl is less bothersome, for the same or better performance?
[04:21:34] <LordKalma> unique_ptr<IImpl> it is then haha
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:28:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[04:29:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:30:51] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[04:31:04] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[04:35:51] <PJBoy> LordKalma, C++20 added implicitly generated deduction guides for aggregates
[04:37:02] <PJBoy> which overloaded is, it's just an aggregate of base classes, each having an operator()
[04:37:38] <PJBoy> so when you call operator() on an overloaded, overload resolution amongst all its base class operator()'s take place
[04:38:49] <LordKalma> yes, yes, interesting words, not sure what they mean in that order
[04:40:20] <PJBoy> if I have a `struct A { int operator()(int a, int b) { return a+b; } };` and a `struct B { double operator()(double a, double b) { return a+b; } };`
[04:40:40] <PJBoy> and I make a struct C that has those as base classes
[04:41:10] <PJBoy> then I can call operator() in the class C and it will choose one of those two base class operator()'s
[04:41:48] <LordKalma> and how do you make class C?
[04:42:00] <PJBoy> struct C : A, B {};
[04:42:08] <LordKalma> I mean, like, this:  `template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;`
[04:42:22] <LordKalma> kalven said "it's just making a struct that inherits from all the args"
[04:42:23] <LordKalma> how?
[04:42:30] <PJBoy> the bit before
[04:42:34] <PJBoy> that's just the deduction guide you wrote
[04:42:40] <PJBoy> which is an optional addition
[04:43:02] <PJBoy> the `template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };` is the main bit
[04:43:14] <LordKalma> ahhh okay
[04:43:15] <LordKalma> thanks
[04:43:36] <LordKalma> and the explicit deduction guide does what?
[04:44:02] <PJBoy> so without deduction, you'd have to write `overloaded<decltype(lambda_a), decltype(lambda_b)>{lambda_a, lambda_b};`
[04:44:29] <PJBoy> and with deduction you want overloaded{lambda_a, lambda_b} to work and figure out the arguments
[04:44:32] <LordKalma> hum, okay, not going to pretend I understand it fully now, but better
[04:44:37] <LordKalma> I have to read a TMP book
[04:44:41] <LordKalma> after this DSP book maybe
[04:44:57] <LordKalma> anyway, interesting, thanks
[04:45:02] <LordKalma> this language is insane
[04:45:47] <LordKalma> speaking of insane languages. I was thinking the other day... since, for example, C++ doesn't have VLAs, doesn't it mean there are some things that aren't expressible in C++?
[04:45:54] <PJBoy> in C++20, aggregates get deduction, so if you write `template<typename T, typename U> struct Agg { T x; U y; };` then you can write `Agg x{someT, someY};` and it'll figure out that you're making a Agg<T, U>
[04:46:17] <PJBoy> in C++17 you needed to give the compiler a hand, so you write the deduction guide
[04:47:39] <PJBoy> that Agg has data members, but the same situation applies if it were instead `struct Agg : T, U {};`
[04:47:55] *** Quits: undephin3d (~undephin3@158.181.83.107) (Ping timeout: 256 seconds)
[04:48:29] <PJBoy> also nah, you can use vector instead of VLAs
[04:48:38] <PJBoy> and you can give it a stack allocator
[04:49:02] <LordKalma> Ah that's how, cool
[04:49:24] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[04:53:05] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:58:46] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[04:59:15] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:10:15] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:10:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:16:24] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:19:09] *** Joins: immibis_ (~hexchat@62.156.144.218)
[05:19:55] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:21:15] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[05:21:57] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Ping timeout: 268 seconds)
[05:24:27] *** Quits: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[05:33:53] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[05:34:08] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:36:20] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 250 seconds)
[05:38:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:43:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:27] *** ChanServ sets mode: +v npaperbot
[05:46:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e0cd:c88b:7499:2cc0) (Quit: Textual IRC Client: www.textualapp.com)
[05:46:34] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:47:25] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[05:47:55] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:54:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:55:37] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[05:56:25] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[05:58:08] *** Joins: malloy (~jimery@116.30.220.175)
[06:03:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:16:55] <malloy> hello, how to address memory leak in linux?
[06:17:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:17:26] <malloy> i feel valgrind hard to use and useless
[06:18:52] *** Joins: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[06:20:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:21:20] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[06:21:24] *** Quits: Inline (~Inline@p200300cd470c380061a83d28f03bd1ae.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:30:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:39:10] *** Joins: furrymcg1e (~devuan@cgn-89-1-211-94.nc.de)
[06:40:49] *** Joins: adeliktas5 (~adeliktas@i59F4D9F0.versanet.de)
[06:42:32] *** Quits: adeliktas (~adeliktas@i59F52FC5.versanet.de) (Ping timeout: 240 seconds)
[06:42:32] *** adeliktas5 is now known as adeliktas
[06:42:39] *** Quits: furrymcgee (~devuan@cgn-89-1-209-226.nc.de) (Ping timeout: 256 seconds)
[06:43:54] *** Joins: smeso (~smeso@user/smeso)
[06:44:01] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:46:44] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:53:30] <Alipha> malloy: there's also -fsanitize=leak, but if you don't like valgrind, then the leak sanitizer probably won't appeal to you either.
[06:53:41] <Alipha> Just not write leaks to begin with? :-)
[06:54:07] <malloy> Alipha: can't use it in alpine
[06:54:38] <malloy> Alipha: i feel it caused by grpc
[06:57:27] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Quit: Hello72)
[06:57:55] <malloy> but grpc don't have enough document or examples
[06:58:57] <malloy> Alipha: g++ (Alpine 9.3.0) 9.3.0 can't find '-lsan'
[06:59:06] <Friithian> you could maybe find an IDE with build in memory shite, but uh, with how limited you are I doubt there is one
[07:05:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:11:11] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:17:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:20:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:21:29] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:23:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:33:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:37:51] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:38:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:18:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:22:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:30:03] *** Quits: emerent (~quassel@p5b2657e5.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:32:04] *** Joins: emerent (~quassel@p200300cd570c2187ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:40:31] *** Joins: Burgundy (~NA@86.121.143.206)
[08:58:23] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[09:08:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:09:03] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:11:09] *** Joins: ymwm (~yingmanwu@110.85.66.212)
[09:16:22] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:18:47] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[09:19:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:21:37] *** Joins: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a)
[09:23:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:24:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[09:40:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:43:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:29] *** ChanServ sets mode: +v npaperbot
[09:46:31] *** Quits: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a) (Quit: Leaving)
[09:49:47] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[09:50:14] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:53:37] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:12:09] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[10:13:07] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:19:31] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:20:08] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[10:22:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:24:49] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:27:59] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:30:58] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:37:43] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:43:25] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:50:37] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:57:00] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:02:59] <LordKalma> You're using alpine Linux directly?
[11:09:38] *** Quits: RandomReader (~RandomRea@user/randomreader) (Quit: RandomReader)
[11:12:50] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:8fb0:3270:f51d:118b)
[11:17:28] *** Joins: RandomReader (~RandomRea@user/randomreader)
[11:20:07] <zagura> malloy: Maybe lsan (sanitizer library) is separate package?
[11:20:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:20:43] <malloy> LordKalma： alpine docker
[11:21:02] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[11:21:48] <malloy> zagura: maybe, but i don't find which package has it
[11:23:11] <fiesh> I have no idea how your assessment "hard to use and useless" for valgrind came about... it tells you what memory was leaked and where it was allocated.  what more could you want?
[11:24:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:26:49] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[11:27:06] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[11:30:02] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[11:33:28] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[11:35:48] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:38:13] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:47:08] *** Joins: limubs (~limubs@cgn-89-1-58-13.nc.de)
[11:49:19] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:58:57] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Remote host closed the connection)
[11:59:17] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[11:59:24] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[12:00:13] *** Joins: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[12:05:13] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:09:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:20:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:21:29] *** Joins: gentooclimax (~gentoocli@2a02-8440-3440-9373-bf12-0497-4be5-4868.rev.sfr.net)
[12:24:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:26:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:33:11] *** Joins: robod34 (Username@79.113.243.73)
[12:42:26] <malloy> fiesh: it prints unreadable stack info though with debug build
[12:45:17] <very_sneaky> i've always found it pretty readable :s
[12:49:14] <malloy> very_sneaky: have you ever used valgrind in docker container?
[12:49:55] <very_sneaky> no, but i'm not sure how that's relevant
[12:51:12] <very_sneaky> you can get an interactive shell to docker containers that would present an interface essentially identical to any other linux terminal
[12:59:36] *** gentooclimax is now known as climax
[13:03:59] *** Joins: ivii (~ivan@user/ivii)
[13:06:01] <LordKalma> the best way to use docker, for development, imho, it's to use an IDE that supports that workflow
[13:06:09] <LordKalma> (if you use vim, just install it on the container, whatever)
[13:06:25] <LordKalma> for example, a `.devcontainer.json` file and VSCode. I use for python/node development, it's a great workflow
[13:07:23] <ville> once you need docker it stops qualifying as "great"
[13:08:00] <very_sneaky> docker seems to be useful for getting access to older versions of compilers
[13:08:13] <very_sneaky> and/or building for glibc compatibility
[13:10:41] <LordKalma> idk about c++, but in the node world it's nice to have a reproduceable environment that takes a command to pull up, development on, and then just push the exact same thing into production
[13:11:54] <LordKalma> in CI systems it's pretty nice. I once installed jenkins on docker, and made it so that it spawns other containers for the builds, pretty nice
[13:13:17] *** Joins: plastico (~plastico@neomutt/plastico)
[13:21:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:24:06] <cbreak> LordKalma: that seems kind of silly
[13:24:17] <cbreak> aren't node things by definition semi-reproducable anyway?
[13:24:22] <cbreak> via npm?
[13:24:38] <cbreak> (unless one of the myriad dependencies breaks something)
[13:25:03] *** climax is now known as gentooclimax
[13:25:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:25:43] *** Joins: p-i-_ (~Ohmu@183.89.25.222)
[13:28:18] *** Joins: paul424 (~tom@ip-5-172-234-147.multi.internet.cyfrowypolsat.pl)
[13:28:41] *** Quits: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[13:32:15] *** Stryykert is now known as Stryyker
[13:34:13] <LordKalma> package versions are local, yes
[13:34:18] <LordKalma> node version itself isn't
[13:41:15] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[13:42:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:42:53] *** Joins: undephin3d (~undephin3@158.181.83.107)
[13:43:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:29] *** ChanServ sets mode: +v npaperbot
[13:44:33] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:01:27] *** gentooclimax is now known as climax
[14:09:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[14:13:32] * Haohmaru shakes nolyc
[14:13:34] <Haohmaru> !fact
[14:13:36] <nolyc> Haohmaru: A variable whose declared type is ``reference to type T'' shall be initialized.
[14:13:59] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[14:15:37] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[14:16:25] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[14:16:52] *** climax is now known as gentooclimax
[14:22:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:25:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:37:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:38:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[14:38:38] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:39:54] *** gentooclimax is now known as climax
[14:39:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:47:45] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:3ad3:cb:1cfd:f4f7)
[14:47:45] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:3ad3:cb:1cfd:f4f7) (Changing host)
[14:47:45] *** Joins: RoKenn (~RoKenn@user/rokenn)
[14:48:31] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[14:55:45] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:55:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:56:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[14:59:55] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:04:17] <veverak> LordKalma: reproduceable environment does not imply using docker
[15:04:32] <veverak> turns out if you do libs properly the app does not have to be sensitive to exact version
[15:05:02] <veverak> so you have command to compile it, compile to run it, without docker
[15:06:23] <veverak> (of course that does not work every time, but point is that yo udo not need docker for that)
[15:08:20] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[15:09:27] *** Quits: paul424 (~tom@ip-5-172-234-147.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:11:39] *** climax is now known as gentooclimax
[15:12:08] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 272 seconds)
[15:23:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:24:15] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:61ef)
[15:24:31] *** gentooclimax is now known as climax
[15:24:48] *** climax is now known as gentooclimax
[15:26:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:30:08] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:31:28] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[15:40:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:21] <Guest54> hey guys, I have a beginner question about mysql. How do i store a list of arbitrary strings into a column? For each row, my user can supply a bunch of strings tags (no restriction on what they are, except they are stings), and I want to give them the option to filter rows based on the presence of these tags
[15:43:44] *** Joins: markong (~kvirc@213.146.188.203)
[15:46:18] <ville> Guest54: sounds like a one-to-many relation
[15:47:04] <ville> Guest54: so depending on things you could have two-table or three-table setup
[15:47:05] <Guest54> ville  these strings are totally arbitrary
[15:48:14] <ville> if they are tags then you possily will wish to deduplicate them, so perhaps then a three-table setup would be in order
[15:49:31] <ville> one table that has the usual data, then a table that has the tags and third table to map between the two mapping a data row to a tag
[15:50:31] <Guest54> ville but I also do had to some query manipulation on the tags. For example, user wants all rows where at least one of thetags is  "foo"
[15:50:49] <ville> sure that works
[15:51:08] <ville> you just select from the 3 tables and join them on the ids
[15:51:34] <Guest54> > "then a table that has the tags"
[15:51:58] <Guest54> can you pls elabrote on this?:)  Do you mean the table would one column containing the tags?
[15:52:09] <ville> yes, which just ends up being: id, name probably
[15:53:02] <Guest54> ville to clarify, this table would hold the tags as json or array right?
[15:53:10] <ville> each tag ends up being a row in the tags table
[15:53:18] <Guest54> ahh ok
[15:53:34] <Guest54> the issue is, I don't know how many such tags there are - theses tags are totally arbitrary
[15:53:48] <Guest54> so we'd have a lot of rows...
[15:53:53] <ville> yes, and that's what tables do: have arbitrary number of things
[15:53:59] <Shell> having a lot of rows is what databases are for. :p
[15:54:12] <Guest54> ah right, sorry I misread, I thought you mean 1 column per tag
[15:54:18] <ville> if you don't have tens of millions of rows you don't need to worry
[15:54:46] <Shell> ville: if you do there's still a good chance you don't need to worry as long as someone is willing to spend some money :p
[15:55:12] <ville> sure, just trying to stick a big sounding number he is unlikely to hit
[15:55:19] <Guest54> ok now I understand, thanks for being patient and explaining to me :)
[15:56:40] *** Quits: p-i-_ (~Ohmu@183.89.25.222) (Remote host closed the connection)
[15:56:56] <Guest54> I have a bit more context that maybe I should have shared: the number of tags isn't going to be more than 10, and the size of each tag isn't going to be more than 10 chars. And the number of rows that I output is going to LIMIT'ed to 1k
[15:57:39] *** Joins: p-i- (~Ohmu@183.89.25.222)
[15:57:41] <Guest54> so, as a bit of a (bad) hack, I was thinking of storing the tags as comma separated strings (or json), and the deserializaing it when I get my rows (which will be bound to 1k) And then I will filters tags on the server side
[15:58:41] <ville> might as well use the database if you already got one, gives you a chance to practice writing queries if nothing else
[15:59:01] <Guest54> yep so there are many filters, tags is one of them
[15:59:26] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:59:36] <Guest54> we use the db ofc to do the other filters...for the tags, I feel a bit it's too much work :P
[15:59:49] <Shell> generally use the standard tools first and optimise later, tbh.
[15:59:49] <Guest54> especially given the constraints
[15:59:58] <ville> before you start to worry too much about performance or anything get a system up and running. by any means necessary
[16:00:56] <ville> joining and so on is the bread-and-butter of relational databases, so i'd look to that as the default choice. if it turns out to suck then look for something else
[16:07:11] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:09:55] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:61ef) (Quit: Client closed)
[16:11:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[16:16:10] *** Quits: gentooclimax (~gentoocli@2a02-8440-3440-9373-bf12-0497-4be5-4868.rev.sfr.net) (Read error: Connection reset by peer)
[16:23:41] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:61ef)
[16:23:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:27:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:31:09] <Guest54> when we create multiple tables like this https://stackoverflow.com/a/17371729 do we need to insert data in all of them? For eg, in the person/fruiit/person-fruit table, would you need to insert rows in just the person and fruit table? (the person-fruit table would automatically insert rows in itself?)
[16:32:56] <Shell> rows do not get automatically inserted anywhere.
[16:33:21] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[16:34:11] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983)
[16:34:11] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983) (Changing host)
[16:34:11] *** Joins: skapata (~Skapata@user/skapata)
[16:35:37] *** Quits: ymwm (~yingmanwu@110.85.66.212) (Ping timeout: 240 seconds)
[16:36:37] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:45:21] *** Joins: darkbit (~db@136.158.8.67)
[16:45:56] *** Quits: darkbit (~db@136.158.8.67) (Client Quit)
[16:47:52] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:48:15] *** Joins: darkbit (~db@136.158.8.67)
[16:48:21] *** Quits: mort (~mort@188.166.114.29) (Quit: Ping timeout (120 seconds))
[16:56:12] <very_sneaky> how do you guys organise private and public includes?
[16:57:00] <very_sneaky> project/include/project for public, and project/src/include/module for private? or project/src/module/include/module?
[16:58:56] *** Joins: adeliktas9 (~adeliktas@i59F52E53.versanet.de)
[16:59:45] *** Quits: adeliktas (~adeliktas@i59F4D9F0.versanet.de) (Ping timeout: 256 seconds)
[16:59:45] *** adeliktas9 is now known as adeliktas
[17:04:47] <LordKalma> I found myself doing different approaches depending on my goals
[17:05:32] <very_sneaky> yeah? what are some of the schemes you've used and when?
[17:06:08] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:06:23] <furrymcg1e> trying to avoid repetition in subdirs
[17:06:55] <LordKalma> sometimes I use src/<submodule>/include/<project>/<submodule>/ for public, and src/<submodule>/ for mixed cpp and private hpp's
[17:07:02] <LordKalma> sometimes I do other things
[17:07:10] <LordKalma> hard to explain
[17:07:15] <LordKalma> it's how it feels right
[17:07:32] <LordKalma> and that's how you should do it too honestly. Be consistent inside a project, more or less sane, and that's it
[17:07:40] <LordKalma> we'll all tell you our way is the best way TM
[17:09:07] <LordKalma> I was here reading and watching some stuff on one of my interests, aircraft technology, and it's interesting to see how they are the incarnation of abstraction layers, but in hardware
[17:11:06] <LordKalma> for example, fly-by-wire planes have computers to compute the input-output relations between pilot and control surfaces. and, for example, the autopilot does not bypass it. it just connects to the flight computers as a regular pilot would. it's obvious once you read it, it's just interesting. the autopilot is on the same abstraction layer as the
[17:11:06] <LordKalma> regular pilot. it doesn't compute control surface movements, it just computes the same inputs a pilot would do.
[17:11:21] <LordKalma> the beautiful onions of abstraction
[17:12:46] *** furrymcg1e is now known as furrymcgee
[17:13:17] <very_sneaky> hm, yeah. my problem is i'm trying to re-organise >30 libs so i'm trying to work out some sane rules that apply to everything
[17:14:12] <LordKalma> https://i.gyazo.com/fdfbcaeed70ed153772606d145e376f6.png
[17:14:17] <LordKalma> you can go insane if you want ^
[17:16:25] <very_sneaky> yeah gotcha
[17:17:47] <very_sneaky> LordKalma: how do you feel about `include()`ing cmake modules from a root CML, and not having any nested CML files? i.e., `project/CML.txt` includes `project/src/SomeModule/SomeModule_lib.cmake`, which builds the `SomeModule_lib` target
[17:18:24] <very_sneaky> it seems like `add_subdirectory()` and `include()` are relatively interchangeable if you really want them to be
[17:18:29] <LordKalma> `SomeModule_lib` target should have a CML, not a .cmake
[17:18:39] <LordKalma> they are, but be sane, and do what people expect
[17:19:32] <LordKalma> add_subdirectory can take any relative, or even absolute path
[17:19:37] <LordKalma> not necessarely one level at a time
[17:19:52] <very_sneaky> that's my intuition as well - are there any objective reasons why not to do this? aside from people expecting a CML
[17:20:35] <LordKalma> that's a really good reason
[17:20:41] <very_sneaky> currently i'm nudging towards `project/src/SomeModule/CML` that `include()`s `project/src/SomeModule/SomeModule_lib.cmake`, where there are multiple targets
[17:20:44] <LordKalma> .cmake fiels are for functionality modules
[17:20:48] <LordKalma> do you write source files in .hpp files?
[17:20:50] <LordKalma> or .bin?
[17:21:06] <very_sneaky> when you say functionality modules, how is that different from a target?
[17:21:17] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:61ef) (Ping timeout: 256 seconds)
[17:21:18] *** Joins: mort (~mort@188.166.114.29)
[17:21:23] <LordKalma> cmake modules, are cmake functions/macros/bits of code
[17:21:26] <LordKalma> not target declarations
[17:21:28] <very_sneaky> i'm not being argumentative - trying to understand. the "familiarity" piece isn't convincing to my co-workers because nobody is familiar with cmake
[17:21:29] <LordKalma> also, consider FetchContent
[17:21:55] *** Quits: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[17:22:02] <LordKalma> "I don't know it therefore I can do it in any way" isn't a good way of thinking
[17:22:17] <very_sneaky> i agree, yet here we are lol
[17:22:17] <LordKalma> if everybody learned things in bubbles, we'd be fucked
[17:22:36] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[17:23:03] <very_sneaky> how would you handle multiple targets for a single module?
[17:23:13] <very_sneaky> just concatenated in a single CML?
[17:23:35] <LordKalma> anyway, FetchContent and multiple "root" CMLs with "project(...)" declarations is perhaps the "cleanest" way, but it requires some code duplication when you want some same settings
[17:23:57] <LordKalma> depends on the source structure
[17:24:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:24:31] <LordKalma> if the units you want to separate your module into are in their sub-dirs, add_subdirectory() all the way
[17:24:36] <LordKalma> there aren't many wrong ansers
[17:24:40] <very_sneaky> project/src/SomeModule contains multiple .hpp, .cpp files in a flat structure, for multiple targets
[17:24:42] <LordKalma> but using .cmake files is definitely one
[17:24:54] <ville> speaking of dumb names, how dumb is CMakeLists.txt. incredible that the people who came up with that manage to put pants on in the morning
[17:24:56] <LordKalma> yeah, just use a CML with multiple add_library/exe/whatever
[17:25:14] <very_sneaky> hmm. okay.
[17:25:34] <LordKalma> hahaha cmake was made by desperate scientists, not a crew of specialist build system architects
[17:25:45] <LordKalma> kitware makes science computing, not build systems
[17:25:48] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 240 seconds)
[17:25:49] <LordKalma> it was out of desperation
[17:25:56] <LordKalma> and now we have to eat it all its shenanigans
[17:26:07] <very_sneaky> i've discovered that scientists, whilst brilliant, can make some horrible software build/distribution decisions
[17:26:24] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[17:26:44] <very_sneaky> i realised the other day that one of the applications we use vendors anaconda 2, lol
[17:27:03] <LordKalma> physicists are not computer scientists nor software engineers
[17:27:08] <LordKalma> haha that's just dumb crap
[17:27:20] <ville> ice cube?
[17:27:48] <LordKalma> ice cube what?
[17:28:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:29:10] <ville> i guess you've never seen the anaconda film
[17:30:07] <LordKalma> very_sneaky I'm more or less satisfied with this repo's structure https://github.com/ruilvo/aether_sdr/ . I do some questionable crap that I still need to cleanup (namely compiler flags for high architecture requirements and turning ffast-math ON by default, but 1) everything "questionable" that "@friendlyanon" would *hate* is under an `option()`
[17:30:07] <LordKalma> and 2) quite clean structure otherwise.
[17:31:27] <very_sneaky> LordKalma: cool, thanks for that
[17:31:41] <very_sneaky> fwiw, friendlyanon didn't seem to have any issues with including *.cmake files
[17:32:36] <LordKalma> I don't agree with them on most issues :p
[17:38:57] *** Quits: AmR (~AmREiSa@156.199.197.9) (Ping timeout: 240 seconds)
[17:43:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:30] *** ChanServ sets mode: +v npaperbot
[17:47:21] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 256 seconds)
[17:47:31] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:48:33] <very_sneaky> i should fight one battle at a time i think - i've just realised i'm still on an uphill battle to stop storing build artefacts in git
[17:52:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:55:11] <ville> how is that a "battle"? stick build dir in .gitignore
[17:57:12] *** Joins: pulse (~pulse@user/pulse)
[17:58:42] <very_sneaky> people aren't buying into the idea that build artefacts shouldn't be version controlled
[17:58:53] <very_sneaky> it's not that they can't do it, it's that they don't _want_ to do it
[17:58:58] <very_sneaky> driving me mental
[17:59:22] <very_sneaky> we have multiple repo's that are >1GB in size, takes like 5 minutes to clone entire projects down sometimes
[18:01:08] <LordKalma> 1gb projects take far more than 5 minutes for git to resolve, and I'm not just talking about the download time
[18:03:02] <rpav> 1GB total repo size or single checkout size
[18:03:27] <rpav> not counting like lfs
[18:04:49] <rpav> although actually either way, looking at a repo that exceeds both by a multiple, it definitely doesn't take that long to download+resolve here
[18:06:15] <fiesh> LordKalma: I call bs on that
[18:06:25] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[18:06:32] *** Quits: timwis (uid152344@id-152344.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:06:32] <Friithian> fiesh: go clone blender's repo, see how long that takes
[18:06:40] <LordKalma> fiesh, well, if you upload a single 1gb file, it's fine
[18:06:54] <ashafq> Or FreeBSD repo
[18:06:59] <LordKalma> if you have 1gb worth of revisions of 300kb files... bring a bottle of water
[18:07:12] <Friithian> LordKalma: multiple bottles, and snacks
[18:07:25] <ashafq> Coffee as well 😊
[18:07:25] <rpav> ok so the case should be more _scaled based on number of commits_, not repo _size_
[18:07:27] <very_sneaky> the 1gb repo by itself isn't that bad, maybe 20 seconds
[18:07:48] <LordKalma> rpav, yes, to be fair, that's true
[18:07:53] <very_sneaky> it's the `git clone --recurse-submodules` that also includes other 1gb repo's that halts the wheels
[18:08:12] <LordKalma> you can git init then on a necessary basis
[18:08:15] <LordKalma> ooorr... fetch content :D
[18:08:24] <very_sneaky> they're going to be conan packages
[18:08:29] <very_sneaky> but, it's a WIP
[18:08:49] <LordKalma> companies are weird
[18:08:51] <very_sneaky> or vcpkg, who's to say - i haven't tried vcpkg out yet
[18:09:05] <LordKalma> one sec you're telling me you commit binary crap
[18:09:11] <LordKalma> now you're moving to an artifactoryuu
[18:09:15] <LordKalma> hahaha from zero to hero
[18:09:29] <very_sneaky> i'm the modernising influence ;)
[18:09:59] <fiesh> just to double check, I cloned torvals/linux.git -- the final boss of git repositories.  It took 5:52 total, but at 3.5gb, and the largest part of it is the download since it ran at an average of 18mb/s
[18:10:13] <very_sneaky> it surprises me how stagnant one can become in their career if they stay in the same place for 30 years - they're all bright people, they just haven't been exposed to anything new in the past 15 years
[18:10:46] <very_sneaky> fiesh: checks out, that would prob be a similar final size to each repo i check out
[18:10:57] <very_sneaky> (including submodules)
[18:11:22] <rpav> $ time git clone --recurse-submodules https://github.com/blender/blender.git
[18:11:27] <rpav> user	2m15.363s
[18:11:43] <rpav> on a not particularly fast download
[18:11:51] <LordKalma> the wonders of SSDs
[18:12:15] <rpav> well it's 2022, even _i've_ been using SSDs for a few years
[18:12:41] <fiesh> I wouldn't be surprised if it took considerably longer under Windows since it is, drum roll, notirously shitty when it comes to large numbers of small files
[18:12:43] <rpav> even if i still have a TB raid for the important stuff
[18:12:48] <fiesh> notoriously
[18:13:08] <PJBoy> alright I'll benchmark it
[18:13:08] <very_sneaky> yeah, i've found git bash performance on windows to be orders of magnitudes slower than on linux
[18:13:18] <rpav> oh, yeah .. windows is trash on I/O, git performs terribly, if this was windows who knows
[18:13:45] <very_sneaky> i use windows mostly at work, which is one of the motivators to move to cmake - our bespoke build system doesn't support linux rip
[18:14:01] <LordKalma> ahhh that's my problem then
[18:14:04] <LordKalma> I do use windows
[18:14:12] <fiesh> that is indeed a bigger problem
[18:14:18] <Friithian> massive problem
[18:14:19] <rpav> blender repo isn't even that big .. 1019MB .git
[18:14:23] <rpav> lot of commits though
[18:14:33] <Friithian> don't forget submodules
[18:14:37] <very_sneaky> git clone --recurse-submodules https://github.com/blender/blender.git  129.75s user 13.06s system 114% cpu 2:04.85 total
[18:14:44] <rpav> .git is where submodules go :p
[18:14:54] <LordKalma> I'll benchmark it in a bit then
[18:15:01] <Friithian> I remember there are language things somewhere that you need to compile it
[18:15:05] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:15:53] <rpav> and really, it doesn't matter .. as a baseline, it includes like 4 submodules or so and 110k+ commits in a repo that's ~1GB, it's a reasonable benchmark
[18:16:23] <Friithian> next challenge: build it
[18:16:30] <PJBoy> 1:49.867 over here
[18:17:06] <PJBoy> full log https://pastebin.com/1qCfcybw
[18:17:08] <very_sneaky> 10MiB/s download, pcie gen 4 nvme ssd
[18:17:13] <fiesh> it would make more sense to do local clones to keep the internet connection out of the picture
[18:17:18] <LordKalma> fancy
[18:17:32] <very_sneaky> PJBoy: ah, that's why you beat me, double my download :P
[18:17:49] <LordKalma> how did you time it?
[18:17:53] <very_sneaky> `time`
[18:17:54] <rpav> PJBoy: _what_ are you running on?
[18:18:03] <PJBoy> yeah 11 MB/s for the first bit and 21MB/s on the second bit
[18:18:05] <rpav> ooh, download speed right
[18:18:27] <PJBoy> the first bit was almost three times a big as the second bit though
[18:18:32] <very_sneaky> MiB/s, to be clear
[18:18:37] <PJBoy> and then 5MB/s on the last bit
[18:18:38] <rpav> probably better would be to clone it without a checkout then just time the resolve, but
[18:18:44] <PJBoy> so a range of speeds
[18:19:12] <rpav> well the first part is the biggest .. i think i was getting like half that tops ;/
[18:22:39] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:23] <LordKalma> https://bpa.st/N35Q
[18:23:28] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:23:28] <rpav> nvme nice
[18:23:42] <rpav> PJBoy: well 10MB/s
[18:23:52] *** Joins: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:23:57] *** Joins: pah (~pah@user/pah)
[18:23:59] <PJBoy> yeah indeed
[18:24:00] <LordKalma> yeah, I have half your internet speed
[18:24:02] <rpav> the download seems to be the biggest problem
[18:24:13] <PJBoy> so IO is fine
[18:24:18] *** Server sets mode: +Fcnt 
[18:24:19] <PJBoy> git clone is network bound
[18:24:23] *** Joins: barometz_ (~dvanb@i117058.upc-i.chello.nl)
[18:24:35] <rpav> yeah and it doesn't seem particularly bad itself, rather your upstream etc is the main problem
[18:24:40] <Friithian> I feel bad for the blender repo now…
[18:24:43] <very_sneaky> in reality my clones are on our internal WAN, so download speeds are higher, but not substantially so
[18:24:54] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:24:57] <LordKalma> it would be great if git had a way to print time at every log
[18:25:04] <rpav> Friithian: bah, it's leeching a slight bit from MS; blender has nothing to do with it
[18:25:11] *** Joins: Soliton_ (soliton@wesnoth/developer/soliton)
[18:25:24] *** Joins: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[18:25:28] <Friithian> maybe I should addend ``slightly'' to that statement
[18:25:38] *** Joins: BluesBoy_ (~bboy@stotz2.com)
[18:25:41] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:25:42] *** Joins: talisein_ (~talisein@user/talisein)
[18:25:47] <LordKalma> hahaha fun fact, my old itnernet service had some very very weird fuck up that my local CND for git would fail massively in the evening
[18:25:47] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[18:25:53] <LordKalma> like 100kbps or less
[18:26:02] <LordKalma> I would connect to a VPS and get max speed from elsewhere
[18:26:18] <LordKalma> *CDN
[18:26:22] <Friithian> don't even know if ``addend'' is a word in this context…
[18:26:36] <rpav> `mv blender/.git blender.git; rm -rf blender; time git clone --recurse-submodules blender.git blender`
[18:26:44] <rpav> 0.067s
[18:27:11] <rpav> still something probably unfair there
[18:27:35] *** Quits: pa (~pah@user/pah) (Killed (zirconium.libera.chat (Nickname regained by services)))
[18:27:35] *** pah is now known as pa
[18:27:46] <LordKalma> well, we can all run that disk benchmark tool and check small file IO
[18:27:56] *** Joins: Kebianiz` (~Kebianiza@188.127.160.11)
[18:28:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[18:29:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (*.net *.split)
[18:29:52] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (*.net *.split)
[18:29:52] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[18:29:52] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[18:29:52] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (*.net *.split)
[18:29:52] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[18:29:52] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[18:29:52] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[18:29:52] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[18:29:52] *** Quits: Soliton (soliton@wesnoth/developer/soliton) (*.net *.split)
[18:29:52] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[18:29:53] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[18:29:53] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[18:29:53] *** Quits: Devtron (~Devtron@D4708984.rev.sefiber.dk) (*.net *.split)
[18:29:53] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[18:29:53] *** Quits: twice (~twice@173.82.153.50) (*.net *.split)
[18:29:53] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (*.net *.split)
[18:29:53] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[18:29:53] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[18:29:53] *** Quits: foul_owl (~kerry@23.82.193.89) (*.net *.split)
[18:29:53] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[18:29:53] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[18:29:53] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[18:29:53] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[18:29:53] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[18:29:53] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[18:29:53] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[18:29:53] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[18:29:54] *** dextaa4 is now known as dextaa
[18:29:54] *** twice1 is now known as twice
[18:29:54] *** beanzilla_ is now known as beanzilla
[18:29:54] *** ZeroKnight_ is now known as ZeroKnight
[18:29:57] *** slavfox_ is now known as slavfox
[18:29:57] *** flynn4 is now known as flynn
[18:29:57] *** jancoow9 is now known as jancoow
[18:29:58] *** Soliton_ is now known as Soliton
[18:30:00] *** whup_dup is now known as whupdup
[18:32:19] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:32:46] <rpav> oh linux disk cache is probably also unfair since once you've loaded everything you might as well be dealing with a ramdisk ;)
[18:33:24] <LordKalma> then power fails and you loose all the data that wasn't written out
[18:33:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[18:33:59] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:34:24] <Friithian> that's not how it works, just because the data is in the disk cache does not mean it was not written to disk
[18:34:53] <Friithian> most distros have disk write caches disabled by default
[18:35:09] <ville> also as it turns out the reverse is true...
[18:35:15] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Ping timeout: 256 seconds)
[18:35:23] <LordKalma> garuda linux probably has hahaha
[18:35:29] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c)
[18:35:34] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[18:35:34] <Friithian> most sane distros*
[18:35:37] <LordKalma> hahahah
[18:35:59] <Friithian> so manjaro prob only flushes the write cache on a proper shutdown…
[18:36:06] <ville> even though you flushed and synced doesn't mean you won't lose data
[18:36:16] <LordKalma> manjaro isn't part of a sane distro from what I've heard
[18:36:27] <Friithian> it is very much not sane
[18:36:39] <Friithian> holding packages back 2 weeks doesn't jus tmagic them to be safer
[18:36:54] <LordKalma> the complain i've heard is some very questionable code
[18:36:55] <Friithian> and that can break AUR packages which are based off of mainline arch repos
[18:36:59] <LordKalma> like in update scripts and etc
[18:37:06] <Friithian> there's a lot of complaints
[18:37:16] <LordKalma> yet people looove it
[18:37:26] *** Joins: Dragoon (~Dragoon@user/dragoon)
[18:37:29] <Friithian> I don't get why, but yeah, they do
[18:37:31] <LordKalma> supported on the pine phone, all the kids love it because it's "arch but easy"
[18:37:46] *** Joins: foul_owl (~kerry@23.82.193.89)
[18:37:49] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[18:38:03] <Friithian> if you can't do arch, don't do arch
[18:38:28] <LordKalma> I'm a suse tumbleweed guy, it's the linux distro I've liked the most so far
[18:38:31] <ville> Friithian: letting others run packages for further 2 weeks does get you a benefit
[18:38:38] <cbreak_> I'm happy with Ubuntu. ZFS is probably one of the most reliable filesystems you can use.
[18:39:24] <very_sneaky> my read of the narrative was that manjaro used to be reasonably good, but has become less sane more recently. So, when it was good, it got hyped, and the echo of internet sentiment rings for a long time, so people still see those posts and go to it, but from what i've seen most recent posts discourage manjaro usage
[18:41:05] <rpav> https://bugs.launchpad.net/ubuntu/+source/zfs-linux/+bug/1906476
[18:41:08] <very_sneaky> i use arch. it's fine. bluetooth compatability is sketchy as hell
[18:42:08] <rpav> with bugs in very recent kernels.. eh
[18:42:14] <Friithian> I use KDE Neon, ubuntu LTS based
[18:42:29] <ville> the "basic" bluetooth utilities are fairly bothersome. so much so i've never managed to force my self to get bluetooth working
[18:43:55] <ville> it would probably be less to write a program specific to one's situation than to try to use the command line utilities
[18:43:58] <rpav> ville: i just set up bluetooth, it's surprisingly easy/straightforward
[18:44:52] <rpav> probably easiest for most is to install like bluemoon? or whatever, and use the gui
[18:44:58] <very_sneaky> rpav: can you fix my bluetooth speaker - it keeps disconnecting and reconnecting, and sometimes the bitrate is throttled so i get really tinny sound as the bit depth is reduced
[18:45:06] <ville> rpav: depends what you mean by that exactly. what exact package/program you are using
[18:45:13] <Friithian> check pavucontrol make sure the correct profile is selected for it
[18:45:14] <ville> rpav: yeah that's not what i am talking about
[18:45:28] <rpav> well one can't help crappy BT devices
[18:45:50] <rpav> the jabra 75t i got are pretty hands-off for the most part though
[18:45:55] *** Quits: BluesBoy_ (~bboy@stotz2.com) (Quit: leaving)
[18:46:35] *** Joins: BluesBoy (~bboy@user/bluesboy)
[18:46:40] <rpav> ville: why would you use 'the basic bluetooth utilities' by which presumably you mean bluetoothctl or similar, when you could use higher-levle ones
[18:46:42] <very_sneaky> Friithian: High Fidelity Playback (A2DP Sink) - i assume this is what i want
[18:46:51] <Friithian> sounds about right
[18:46:54] <rpav> or at least, complain that CLI utilities are bothersome but refuse to use non-CLI utilities
[18:46:56] <Friithian> uh, get a better device?
[18:47:07] <very_sneaky> it works fine with my phone, and my macbook lol
[18:47:17] <very_sneaky> i'm 99% sure it's a driver issue
[18:47:23] <Friithian> funny thing is in another channel I have someone complaining about bluetooth audio
[18:47:25] <rpav> very_sneaky: what actual device
[18:47:31] <very_sneaky> loading/unloading the kernel modules resolves the issues sometimes
[18:47:35] <ville> rpav: i do sometimes try to understand what it is that i am using. novel that
[18:47:37] <very_sneaky> bose soundlink mini 2
[18:48:11] <rpav> ville: if you choose the CLI utilities, you don't get to whine about them too
[18:48:35] <ville> nonsense. cli utilities can have great usability
[18:48:47] <rpav> bluetoothctl actually does have pretty great usability
[18:49:37] <rpav> compared to the bluez stuff from like 20 years ago, or even trying to get shit working in windows, it's pretty much "press a button and go"
[18:50:17] <rpav> windows seems to have issues where it stops recognizing things when you change which usb port the bluetooth controller is plugged into, but it seems to have that issue with most usb things
[18:51:08] <LordKalma> oh god, BT on windows couple years ago was so shit
[18:51:16] <LordKalma> only really god ok with win 7 and decent with win 10
[18:51:27] <LordKalma> A2DP was pretty much a mirage
[18:51:30] <PJBoy> it got worse in windows 10
[18:51:37] <PJBoy> much worse
[18:51:43] <LordKalma> why do you say that?
[18:51:53] <rpav> i feel like it's been worse in 10 but in no small part because of their new shitty settings stuff
[18:51:57] <PJBoy> in windows 10 you go to the devices screen, try to connect to a device, and if it doesn't work, that's it
[18:52:04] <PJBoy> you have no follow up
[18:52:12] <PJBoy> it's the worst thing imaginable
[18:52:23] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:52:28] <PJBoy> I find myself removing devices just to add them again ends up being the most reliable method of connecting to a device
[18:52:46] <PJBoy> and the windows 10 settings screen shows bluetooth devices that don't exist all the time
[18:52:46] <rpav> yeah i need to do that now and again
[18:52:50] <PJBoy> it's so unimaginably bad
[18:52:57] <LordKalma> never had that problem. I switch my multiple BT audio devices between my phone and my computer quite often and it just works
[18:53:03] <pulse> bluetooth <- found your problem
[18:53:12] <LordKalma> it's very rare that I have to unpair anything
[18:53:13] <PJBoy> I do hate bluetooth, but like
[18:53:18] <PJBoy> bluetooth on android is mostly fine
[18:53:20] <LordKalma> and yeah BT is shit
[18:53:22] <pulse> lol
[18:53:23] <LordKalma> the fuck it is
[18:53:27] <pulse> fine as in "never works"
[18:53:29] <PJBoy> and I remember bluetooth on windows XP and windows 7 being fine
[18:53:36] <rpav> i haven't had much problem with BT on android/linux
[18:53:37] <pulse> ugh, you must be from an alternate reality
[18:53:40] <LordKalma> my bt headphones work fine on a2dp but on call mode they just don't work
[18:53:50] <LordKalma> sound is either too fast or too slow, both on mic and speakers
[18:53:51] <Friithian> I have an earstudio es 1000 for listening to music on the go, works very well with my android phne
[18:53:56] <LordKalma> I sound like a chinchila for others
[18:54:01] <LordKalma> and they sound like robots to me
[18:54:06] <LordKalma> and I just can't fix it
[18:54:07] <PJBoy> I've been using bluetooth headphones for several years now
[18:54:07] <rpav> on linux if i really need to i can look at anything on any given level, and there are at times annoyingly _many_ levels, but the tools are there .. and i very rarely need to
[18:54:11] <PJBoy> and it's always been fine on android
[18:54:22] <LordKalma> A2DP listening, sure, has been fine
[18:54:29] <LordKalma> making calls... depends on the device, severly
[18:54:41] <LordKalma> the 1usd crap I have on my car works fine
[18:54:47] <PJBoy> I would never use headsets for a call anyway
[18:54:50] <pulse> bluetooth pairing literally never works
[18:55:13] <Friithian> I use both an earstudio bluetooth device and my pinewatch, both connect to my phone fine
[18:55:14] <rpav> well bluetooth _highly_ depends on your headset or whatever device .. so much crap out there
[18:55:45] <PJBoy> idk what it is about bluetooth that makes it so hard to do reliably
[18:55:49] <rpav> i have not until the very new bluetooth earbud stuff found actual headsets that aren't utter crap
[18:55:54] <LordKalma> well, there was someone on #qt complaining support for bt on linux was removed on qt 6
[18:56:01] <pulse> it's just a crap standard
[18:56:06] <Friithian> what does qt have to do with bluetooth?
[18:56:11] <rpav> PJBoy: i think it's been a lot of skimping on stuff because battery and radio tech sucked
[18:56:22] <LordKalma> Friithian there's a module for x-platform BT on Qt
[18:56:22] <rpav> and recently much better efficiency all around
[18:56:29] <PJBoy> I'll give you that actually
[18:56:38] <PJBoy> all the best bluetooth devices I've had have been pretty bad on battery
[18:56:42] <LordKalma> same
[18:56:49] <rpav> like higher-quality low-energy radio + better tiny batteries make all the difference
[18:56:50] *** Joins: k8yun (~k8yun@user/k8yun)
[18:56:52] <LordKalma> mine on the car is always connected
[18:57:08] <rpav> but that's what a decade of developing phone tech gets i guess
[18:57:13] <rpav> actually
[18:57:26] <rpav> bluetooth _phone_ connection to anything sucked up until _very_ recently .. 3-5 years?
[18:57:43] <rpav> like you would never leave BT on because it sucked your phone battery, but now it's basically 0 cost
[18:58:03] <rpav> and that's BLE stuff
[18:58:39] <LordKalma> yeah, I never had BT on. I started leaving it on with the covid tracer app (that same as with evert other country, never was useful)
[18:58:46] <LordKalma> and I noticed it's fine
[19:00:21] <LordKalma> plus, I always now pretty much always pay with NFC
[19:00:26] <rpav> yeah nfc is great
[19:00:31] <rpav> as opposed to nft
[19:00:32] <Friithian> I wish my phone had NFC
[19:00:43] <PJBoy> I always have BT and NFC disabled
[19:00:46] <Friithian> the european model has it, the US doesn't, for osme stupid reason
[19:00:49] <LordKalma> not google pay or anything, our national ATM network has a company supporting it that was lots of cool tech
[19:00:51] <PJBoy> except for when I need by BT headphones ofc
[19:00:53] <rpav> i wish my phone has wireless charging but i got a cheap phone and a good tablet, so compromises
[19:01:06] <LordKalma> including an app connecting my phone's NFC to my bank card
[19:01:24] <PJBoy> so google pay? :p
[19:01:32] <LordKalma> but not google branded :p
[19:01:39] <LordKalma> also they offer cool services for free
[19:01:40] <rpav> sounds shady
[19:01:44] <LordKalma> like virtual credit card numbers
[19:02:05] <LordKalma> rpav it's literally the company that manages the whole digital banking here
[19:02:05] <rpav> that's what they all do basically
[19:02:06] <LordKalma> like, all of it
[19:02:17] <rpav> ah
[19:02:40] <LordKalma> to like make the app work you have to go to an ATM and put your phone number in there
[19:02:43] <rpav> bank apps are very hit or miss here but there are a zillion different ones all using different shit
[19:02:45] <LordKalma> it's all tied together
[19:03:08] <LordKalma> yeah, banks are always trying to push to use their own apps but the "universal" one is massively better for payments
[19:03:12] <PJBoy> I have Revolut for my fancy banking
[19:03:32] <PJBoy> does the one-off virtual cards and whatnot
[19:04:01] <OnlineCop> I love how in HackerRank, C++14 #includes only <iostream> and <cstdio>, but switching to C++20 #includes practically everything under the sun. Isn't there some kind of <bits++.h> or something that is an include-all?
[19:04:03] <PJBoy> stocks and cryptocurrency if I ever get into that
[19:04:22] <LordKalma> we have 3 options for virtual cards. one-off, one-seller, one-seller monthly subscription mode (you set the limit per month instead of overall limit)
[19:04:38] <PJBoy> that's pretty good
[19:04:43] <PJBoy> but way more than I'd ever need
[19:04:55] <PJBoy> I respect it though
[19:04:59] <LordKalma> it's cool, I don't have to put a new number on aliexpress every single time
[19:05:41] <PJBoy> HackerRank's just kinda terrible
[19:06:22] <Friithian> just kinda?
[19:06:32] <PJBoy> eventually we'll be able to write `import std;` and we'll be good to go
[19:06:34] <LordKalma> what's that?
[19:06:50] <PJBoy> HackerRank is one of those websites where you solve algorithmic problems with code
[19:07:02] <Friithian> and it ranks you
[19:07:08] <PJBoy> and you have to pass all these testcases in some arbitrary time restriction
[19:07:13] <LordKalma> bah, that's always BS
[19:07:15] <PJBoy> nah it doesn't rank you
[19:07:25] <PJBoy> you either pass or you fail
[19:07:27] <Friithian> I could've sworn it does that, or it at least puts you up against someone
[19:07:47] <PJBoy> I've done a lot of the problems there
[19:07:57] <PJBoy> they're ok
[19:08:07] <PJBoy> but when they're bad, they're stupidly bad
[19:08:18] <PJBoy> like un-Englishly bad
[19:08:38] <PJBoy> and I hate those time restricted puzzles in general
[19:08:56] <Friithian> time restricted puzzles in programming are stupid
[19:08:57] <PJBoy> like did I get the asymptotic time complexity wrong, or the concrete time wrong?
[19:09:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:09:21] <PJBoy> how am I ever supposed to know what's good enough without trying a bunch of options
[19:09:22] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:3e05:ca1a:e466:cc04)
[19:09:22] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:3e05:ca1a:e466:cc04) (Changing host)
[19:09:22] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:09:39] <PJBoy> it gets grindy
[19:09:42] <rpav> that kind of thing is just like the worst interview question
[19:10:07] <rpav> i don't know why i'd bother when i have plenty of interesting things to do otherwise
[19:10:46] <PJBoy> I tried to do as many as I could as a one-liner in python
[19:11:47] <PJBoy> also if you ever look at the comments in the hackerrank problems, which I don't advise
[19:12:00] <PJBoy> it's just people posting the answers or blogposts of the answers
[19:12:36] <LordKalma> when I had intro to programming in uni I had weekly submissions
[19:12:55] <LordKalma> I always did them as a one-liner, mostly incomprehensible list-comprehensions
[19:13:02] <PJBoy> here's a comment I left though https://www.hackerrank.com/challenges/square-ten-tree/forum
[19:13:13] <LordKalma> terrible inefficient most of the time because multiple redundant iteration. It was just fun
[19:13:13] <PJBoy> which happens to be the top comment
[19:13:33] <Friithian> oh I do love writing shit code do to stupid requirements
[19:13:41] <LordKalma> here is problem solution in python java c++ and c programming
[19:13:52] *** Joins: k8yun_ (~k8yun@user/k8yun)
[19:13:54] <OnlineCop> I love those posts.
[19:14:04] <OnlineCop> And that they're downvoted into oblivion.
[19:14:10] <rpav> that website is terrible, why are posts chopped off to the right
[19:14:34] <LordKalma> responsive text wrapping is too difficult
[19:14:52] <Friithian> what's text wrapping I've never heard of it
[19:15:04] <OnlineCop> Text wrapping is a vim feature. You have to upgrade.
[19:15:05] <LordKalma> yes, mock the non-native speaker
[19:15:08] <Friithian> oh heck I could've put a newline in that and made it fun
[19:15:16] <LordKalma> I want to see all of you speaking portuguese
[19:15:22] <OnlineCop> Que?
[19:15:41] <PJBoy> I didn't see any mocking
[19:16:00] <rpav> LordKalma: they're all followups reaffirming what you said basically
[19:16:14] <LordKalma> ah I thought I said wrapping wrong or something
[19:16:30] <rpav> i was confused at first but then i realized that you might have thought of that
[19:16:47] <rpav> (fwiw i couldn't tell you weren't a non-native speaker in any convo i've had)
[19:17:08] <rpav> weren't? were? i am a native speaker, how sad is that
[19:17:17] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[19:17:55] <PJBoy> extremely
[19:18:02] *** Joins: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi)
[19:18:02] <OnlineCop> I understand that the site allows user-submitted challenges, which is great. I think my gripe with that would be mainly to have a peer-review process before a submission can go public. I've seen quite a few `new foo` with no `delete`, etc.
[19:18:03] <rpav> but yeah .. any real programming problem is not "do this to some poorly-specified description in 10 minutes, 1 chance"
[19:18:23] <LordKalma> OnlineCop new doesn't need delete when the object is to live until the program ends anyway :D
[19:18:27] <OnlineCop> That's kinda the definition of live interviewing questions... :P
[19:18:43] <Friithian> rpav: real programming is poorly-specified description in a few days and the description will change half way through :P
[19:18:56] <rpav> LordKalma: aaactually .. anything raii might depend on cleanup/finalizing in the dtor
[19:18:58] <OnlineCop> Blech. That's as bad as not requiring a `return 0` at the end of main() because it's "special".
[19:19:14] <PJBoy> meaningful dtors in competition / puzzle code?
[19:19:16] <PJBoy> <_<
[19:19:18] <LordKalma> rpav yes, I was only joking
[19:19:21] <rpav> ah
[19:19:24] <rpav> i see a lot of it :(
[19:19:27] <LordKalma> PJBoy gotta have that __del__ :D
[19:19:32] *** Quits: ville (~ville@user/ville) (Quit: ville)
[19:19:42] <rpav> "let's not clean up" "why is autosave broken"
[19:19:51] <PJBoy> OnlineCop, main() is extremely special
[19:19:54] <OnlineCop> Sorry to derail your earlier conversation with mention of HackerRank. You may go back to whatever it was that you were doing before I came in. :D
[19:19:58] <LordKalma> actually the other day I made a RAII wrapper in python for matplotlib figures because jupyter notebooks on vscode are half broken
[19:20:00] <PJBoy> and I always delete `return 0;` when I see it
[19:20:16] <OnlineCop> I always add `return 0;` when I don't see it.
[19:20:23] <OnlineCop> Especially to my void functions.
[19:20:23] <Friithian> >deletes `return 0;' in a function
[19:20:24] <LordKalma> FIGH FIGH FIGH FIGH
[19:20:24] <Friithian> :P
[19:20:29] <PJBoy> should at least do `return EXIT_SUCCESS;`
[19:20:32] <rpav> ^
[19:20:35] <PJBoy> I mean wtf is 0 supposed to be
[19:20:40] <OnlineCop> 0 means null
[19:20:48] <rpav> return {};
[19:20:49] <OnlineCop> int main() { return NULL; }
[19:20:50] <PJBoy> wtf does a null return value from `main` mean?
[19:20:59] <OnlineCop> It means 0.
[19:21:05] <Friithian> everyone knows how exit codes work, right? non-zero exit status on a command means something broke
[19:21:05] <PJBoy> and wtf does 0 mean?
[19:21:08] <OnlineCop> I guess you could return !!0.
[19:21:17] <PJBoy> `return EXIT_SUCCESS;` is at least adding some semantic value
[19:21:24] <LordKalma> !!0 ?! what is this? javascript?!
[19:21:25] <nolyc> LordKalma: Error: You must be registered to use this command. If you are already registered, you must either identify (using the identify command) or add a hostmask matching your current hostmask (using the "hostmask add" command).
[19:21:28] <Friithian> lol
[19:21:52] <rpav> bah, you're all doing it wrong
[19:22:03] <OnlineCop> "I asked how big this empty vector was, and it returned EXIT_SUCCESS..."
[19:22:11] <Friithian> lol
[19:22:20] *** Joins: ville (~ville@user/ville)
[19:22:22] <LordKalma> as James Powell says it: "what is good code and bad code? Good code is code that I write, bad code is code that you write"
[19:22:34] <OnlineCop> I should probably NOT troll first thing in the morning. It's just going to end up in me NOT working all day.
[19:22:46] <PJBoy> James Powell would be the worst possible teacher
[19:22:59] *** Joins: Miyu (~hackkitte@94.31.104.136)
[19:23:00] <LordKalma> PJBoy it's ironic.
[19:23:04] <rpav> `return ReturnCodeFactory::produce(new ReturnCodeProducer(new ReturnCodeLibrary(new ReturnCodeLibraryLoader("returnCodes.yaml").LookUpReturnCode(new ReturnCodeSearcher(), new ReturnCodeSearchValue("RETURN_SUCCESS_CODE")))));`
[19:23:06] <PJBoy> "but I learnt everything by watching you"
[19:23:18] <Friithian> wait this isn't java!
[19:23:34] <LordKalma> PJBoy it's meant to face programmers with our duality of criteria
[19:23:34] <PJBoy> yeah you should modernise that code
[19:23:40] <PJBoy> chain up a bunch of make_uniques
[19:23:42] <LordKalma> "your code is bloated, mine covers edge-cases"
[19:23:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:23:51] <PJBoy> yeah I know I know
[19:23:52] <rpav> ah my bad, std::make_unique and look_up_return_code
[19:23:58] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[19:24:20] <rpav> except make_shared because it might need to return codes from some other thread
[19:24:40] <rpav> let's deadlock on exit
[19:24:47] <LordKalma> get_logger("Log4J").run(user_input);
[19:25:40] <rpav> i hate !c.empty() ;/
[19:25:45] <OnlineCop> I _would_ like to offer a suggestion for HackerRank, though: allow users to provide feedback for the instructions, sample input/output, etc. Like, I really don't care for the ltrim(), rtrim() functions they use to read in an integer from std::cin AS A STRING and converting it to the number. I mean... ... ...
[19:25:50] <rpav> if(c.laden()) ...
[19:25:52] <PJBoy> std::system(R"{python -c "exec(input())")");
[19:26:45] <rpav> "must acquire a certain number of votes" would probably cover enough cases
[19:26:49] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 256 seconds)
[19:27:18] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:27:31] *** Miyu is now known as hackkitten
[19:29:22] <PJBoy> I've done 184 hackerrank problems apparently
[19:29:31] <OnlineCop> PJBoy: Is that the equivalent of "It's dangerous to code alone... here, take this" ?
[19:29:53] <PJBoy> so a basic sword?
[19:30:07] <rpav> 10 PRINT "STAB"
[19:30:23] <OnlineCop> One one or more of these C++ sandboxes has some kind of #include <...bits...> that is an include-all header. Does anyone remember what that is?
[19:30:55] <rpav> challenge: constexpr basic interpreter
[19:32:13] <rpav> problem, no constexpr i/o
[19:34:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:34:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:34:45] <imMute> rpav: #include to the rescue ;)
[19:35:45] <rpav> imMute: i don't think that solves the problems .. need PRINT and INPUT
[19:36:24] <rpav> i mean, you could specify input as a fixed input array, and all output goes to like a vector .. kinda sucks but maybe the best you can get
[19:36:43] <rpav> not going to get compile-time tetris though
[19:36:44] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[19:37:41] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[19:38:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:38:15] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:39:33] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Quit: Quit)
[19:39:36] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Quit: Quit)
[19:39:53] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:46:13] *** veverak1 is now known as veverak
[19:47:37] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Remote host closed the connection)
[19:47:45] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[19:50:49] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Read error: Connection reset by peer)
[19:50:57] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[20:06:26] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Read error: Connection reset by peer)
[20:06:59] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[20:14:36] *** Quits: AssKoala (~asskoala@user/asskoala) (Ping timeout: 240 seconds)
[20:14:38] *** Joins: paul424 (~tom@ip-5-172-234-157.multi.internet.cyfrowypolsat.pl)
[20:14:42] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[20:15:09] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:15:55] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[20:15:55] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[20:15:55] *** Joins: AssKoala (~asskoala@user/asskoala)
[20:21:23] *** Joins: jokoon (~eio@2a01:e0a:542:e160:5997:2cc6:43a7:4f4e)
[20:25:07] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:8fb0:3270:f51d:118b) (Remote host closed the connection)
[20:27:55] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:92e4:b61b:fb6f:e371)
[20:33:02] *** Joins: k8yun (~k8yun@user/k8yun)
[20:35:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:35:40] <OnlineCop> If my function .reserve()s a large number of Foo to a vector, only adds a few items to that vector, and then returns it, will the capacity of the caller's vector be that same large number? Do I want to shrink the array before returning it?
[20:35:46] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:39:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[20:39:50] <OnlineCop> Hmm... looks like it: https://wandbox.org/permlink/n5rA5Rzf6T4wxxRN
[20:41:53] *** Joins: Deneb (~johnch@128.82.159.143.dyn.plus.net)
[20:42:14] <OnlineCop> In cases where the max capacity is known but the final size is not, is there a detriment to calling shrink_to_fit()? Just the fact that it can cause a reallocation?
[20:46:11] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Ping timeout: 252 seconds)
[20:55:12] *** Joins: xkuru (~xkuru@user/xkuru)
[20:55:13] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:47] *** Joins: EdFletcher (~PKD@user/edfletcher)
[20:58:30] <yolo> spent 8 hours to fix a ubuntu 18.04 brain dead gdm3+nvidia boot-stuck problem to no avail, nvidia produces shit drivers
[20:59:08] <Friithian> novideo
[21:07:30] <kalven> OnlineCop: in the case you have, the vector you return gets moved
[21:09:05] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[21:11:18] <OnlineCop> kalven: Right. So I can either pass back a vector that contains nearly 1E6 * sizeof(T) of unused space, or shrink it first and just return something that takes up, say, 3 * sizeof(T).
[21:11:53] <yolo> shrink and return, no brainer to me
[21:12:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Ping timeout: 245 seconds)
[21:12:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b1a0:4b0f:495e:8174)
[21:13:36] <kalven> OnlineCop: well, the other option is to not reserve with some huge number unless you have a good reason for it.
[21:14:01] <kalven> I use reserve when I know the exact count ahead of time, otherwise just push_back
[21:14:11] <OnlineCop> Both cppreference and cplusplus say that a reallocation may occur. When that happens, does it simply move each element from old to new, so no construction/destruction takes place on those elements?
[21:15:53] <OnlineCop> I've got a collection of BaseClass* and dynamic_cast<> each to a derived type. If it casts (not null), I add to my vector. So I know my max capacity (size of the vector<BaseClass*>) but don't know my actual size till I've cast each one.
[21:16:26] <kalven> ok, so don't reserve. problem solved
[21:16:36] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[21:16:47] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[21:17:50] <OnlineCop> If the vector<BaseClass*> contains 1E6 elements, wouldn't that cause multiple reallocations as I'm adding to this returned vector?
[21:18:56] <kalven> yes, about log2(1e6), depending on implementation
[21:19:56] <kalven> if you absolutely want to avoid reallocations, then yet another option is to make a pass of the first vector, do the dynamic_casts but only keep track of the count
[21:20:21] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[21:21:06] *** slavfox_ is now known as slavfox
[21:26:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b1a0:4b0f:495e:8174) (Quit: Quit)
[21:31:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[21:31:24] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[21:31:46] *** Quits: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[21:32:33] *** Joins: slavfox (~slavfox@93.158.232.111)
[21:33:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:34:11] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[21:36:09] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:37:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:37:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:38:52] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1e5:681d:af1f:ca64)
[21:39:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:43:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:29] *** ChanServ sets mode: +v npaperbot
[21:43:57] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[21:45:04] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:45:13] <cbreak_> OnlineCop: you can reserve if you can afford the memory.
[21:46:29] *** Joins: Rayke (rayke@user/rayke)
[21:48:30] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[21:50:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (silver.libera.chat (Nickname regained by services)))
[21:50:06] *** vinleod is now known as vdamewood
[21:50:53] <rpav> really need more unit/type attributes/whatever
[21:51:38] <OnlineCop> Oh?
[21:52:38] <rpav> e.g. vec3-direction vs vec3-position
[21:53:13] <rpav> like yeah yeah vectors are directions but that's not what you're using one to _represent_, but the more specific rep isn't represented in the type, so can lead to error
[21:53:30] *** cbreak_ is now known as cbreak
[21:54:11] <cbreak> rpav: well, positions are just directions relative to a fixed origin
[21:54:22] <cbreak> if you want to encode that in the type system, c++ allows it manually :/
[21:55:01] <cbreak> I found this rather nice in the chrono libs
[21:55:14] <rpav> well with a good unit system you can distinguish like, direction<vec3> vs position<vec3> and use them appropriately
[21:55:16] <cbreak> where the difference between time_duration and time_point is made very clear
[21:55:54] <cbreak> (and of course, time_point is dependent on the clock you use, some of them are monotonic, others are relative to a fixed global origin, like the posix clocks)
[21:56:51] <cbreak> rpav: boost::units has some support for this, but mostly for scalars. It is extensible, but I have no idea how easy that is
[21:57:22] <rpav> cbreak: it's not very good, it was one of the ones i checked
[21:57:39] <cbreak> I'd expect you to have to have at least have a templated position type
[21:57:48] <cbreak> templated by the origin to which the positions are relative to
[21:58:12] <rpav> i wrote my own at the time, but there's this one that's very similar now .. dammit why don't i have it starred
[21:58:16] <cbreak> in computer graphics, there are often various coordinate systems
[21:58:34] <cbreak> and vectors are often implicitly relative to the object origin, or some other origin
[21:58:49] <cbreak> of course, none of that is captured by the type system
[21:58:55] <rpav> i mean it's really simple, you have a template wrapper for a type and you call it a unit and prevent it from converting implicitly to other units, and if you're feeling ambitious you use operators to do neat things with unit composition
[21:59:06] <rpav> right
[21:59:23] <cbreak> I don't think it'd be practical to capture it with the type system in that case anyway
[21:59:24] <rpav> another thing is what _space_ a vector might be in, like .. screen space, world space, etc
[21:59:32] <rpav> it's pretty practical actually
[21:59:33] <cbreak> since the object coordinate systems are created / changed at runtime
[21:59:39] <cbreak> and the type system is compile time
[21:59:47] <rpav> it doesn't matter
[22:00:09] <rpav> conversion is sortof a red herring and doesn't need done independently or statically or anything
[22:00:10] <cbreak> you might be able to prevent mixing of world coordinates and object coordinates, and space deltas
[22:00:30] <rpav> the _main_ thing is that f1 returns U1<T> and f2 takes U2<T> and does not accept U1<T>
[22:00:30] <cbreak> but you couldn't capture the differences between different object coordinate systems easily via the type system
[22:00:35] <rpav> well you can
[22:00:46] <cbreak> since there's an arbitrary number of objects at runtime
[22:00:59] <rpav> all you really care about is labeling them .. i.e. "this is world space" or "this is screen space" or whatever .. conversion is rare and left to the user without much hassle
[22:01:10] <cbreak> that's the easy part
[22:01:15] <rpav> that's the _important_ part
[22:01:21] <rpav> and there's not anything else
[22:01:22] <cbreak> but for example, what I deal with at work is skeletons
[22:01:30] <rpav> https://github.com/mpusz/units <- ah this one
[22:01:37] <cbreak> so there are like 60 different joints in a skeleton
[22:01:44] <cbreak> and they form a hierarchy of transforms
[22:02:07] <cbreak> sometimes, vectors are relative to one of the joints
[22:02:12] <cbreak> joints are relative to the parent joint
[22:02:12] <rpav> you _might_ not necessarily care about representing that kind of thing with explicit relative tags
[22:02:29] <cbreak> as I said: I don't think it's easily possible since this is runtime
[22:02:36] *** Joins: Cromulent (sid301841@id-301841.helmsley.irccloud.com)
[22:02:36] <rpav> like you could .. bone<parent_bone, bone_repr>
[22:02:53] <cbreak> you could differentiate between this-is-relative-to-some-joint with this-is-rig-space vs this-is-world-space
[22:03:03] <rpav> cbreak: right but that's the other thing .. if you're working purely with loaded dynamic data, it's not going to hit the type system in the first place
[22:03:09] <cbreak> rpav: bone relationships are not known at compile time
[22:03:16] <rpav> exactly
[22:03:28] <cbreak> neither are object relationships
[22:03:29] <rpav> so if that's the case, then you're never going to _acquire_ one in the sense that its relative position is important
[22:03:30] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 260 seconds)
[22:04:22] <rpav> you could have a _dynamic_ "type" relation such that you capture a parent-space ID and have a relative<BONE>, and compare IDs, but it's unclear if that kind of thing is going to prevent many errors in practice
[22:04:56] <cbreak> well. It's even more complicated
[22:05:03] <rpav> most of the time that stuff is a bunch of shader load and go or whatever so not really important
[22:05:13] <cbreak> in linear blend skinning, points can be in the space of different joints at once.
[22:05:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b)
[22:05:18] <cbreak> (with linear weights)
[22:05:31] <rpav> right
[22:05:48] <cbreak> what I do at work is to let a library handle this for me :)
[22:06:31] <rpav> hopefully heh
[22:06:53] <rpav> it doesn't happen to be ozz-animation does it? is this game skinning?
[22:07:24] <rpav> it'd be nice if we got enough power to do musculature-based rigging before too long ;/
[22:07:25] <cbreak> no, this is for movie making
[22:07:33] <rpav> ah movie rigs can be crazy
[22:07:38] <cbreak> very basic for BG characters
[22:07:45] <cbreak> luckily not the feature characters yet
[22:08:21] <rpav> though aren't movies using musculature stuff now
[22:08:24] <cbreak> I got some actual rigs from some BG characters from the studios for testing
[22:08:53] <cbreak> half the bones were too detailed to be useful :)
[22:09:25] <cbreak> rpav: No idea what they use for the feature characters. But it probably involves a ton of different things.
[22:09:27] <rpav> dunno, the stuff i've seen on movie rigs is "we just put bones everywhere wherever we need them"
[22:09:43] <OnlineCop> Ooh, that 'units' proposal for c++23 looks cool!
[22:09:47] <cbreak> like performance capture, blend shape animations, linear blend skinning, physical sims, ...
[22:10:37] <rpav> oh shit it is a proposal .. as long as they don't make it useless that would be pretty cool
[22:12:24] <cbreak> maybe it's just #include <boost/units.hpp> :D
[22:12:44] <rpav> that would be pretty useless ;/
[22:12:58] <rpav> boost units is primarily focused on "let's provide metric units and do conversions!" which is useless
[22:13:23] <cbreak> it's very useful.
[22:13:29] <cbreak> if you deal with real physics units
[22:13:33] <cbreak> in a scalar context...
[22:14:47] <cbreak> there always seems to be a disagreement between m and cm in model scales, and at least the time units are useful for general programming too (like for delays, user feedback)
[22:14:55] <cbreak> it's not complete of course
[22:15:12] <rpav> equals(boost_units, 0, 1e-4); // close enough ;)
[22:15:39] <rpav> yeah it's definitely useful for checking that kind of stuff, but you can't really do much outside simple scalar stuff which is barely scratching the surface
[22:15:59] <rpav> "here's a position in pixels" "here's a position in tiles"
[22:16:29] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:25:15] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:26:14] *** Joins: ville (~ville@user/ville)
[22:26:30] *** Quits: undephin3d (~undephin3@158.181.83.107) (Quit: leaving)
[22:26:51] *** Quits: limubs (~limubs@cgn-89-1-58-13.nc.de) (Quit: Connection closed)
[22:36:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:38:25] *** Quits: paul424 (~tom@ip-5-172-234-157.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[22:40:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:43:21] *** Joins: horribleprogram (~user@user/horribleprogram)
[22:43:39] <horribleprogram> what's this parameter
[22:43:57] <horribleprogram> void myFunc(const uint8_t (&prefix)[N])
[22:44:26] <cbreak> horribleprogram: it's a horrible array reference
[22:44:37] <horribleprogram> cbreak: N is a non-type template parameter. ;)
[22:44:52] <cbreak> of course it is. Normal pattern.
[22:44:57] <horribleprogram> kk so
[22:45:05] <horribleprogram> it's an array of N reference-to-const-uint8_t ?
[22:45:09] <horribleprogram> just to be sure
[22:45:26] <cbreak> prefix will be a reference to an array of N const uint_8_t
[22:45:32] <horribleprogram> AHH
[22:45:38] <cbreak> references can not be put into arrays
[22:45:44] <cbreak> only objects can be made into an array
[22:45:44] <horribleprogram> yeah I recall that now
[22:45:54] <horribleprogram> mhm
[22:49:11] <horribleprogram> kk ty yeah it works
[22:49:30] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[23:03:08] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 252 seconds)
[23:08:12] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[23:16:33] <rpav> nanptr
[23:19:18] *** Joins: immibis_ (~hexchat@62.156.144.218)
[23:21:51] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Ping timeout: 252 seconds)
[23:26:17] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b)
[23:29:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b) (Ping timeout: 252 seconds)
[23:30:17] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[23:37:09] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:39:05] *** Joins: lispy (~lispy@user/lispy)
[23:40:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:55:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1e5:681d:af1f:ca64) (Ping timeout: 268 seconds)
[23:55:36] *** Joins: proller (~p@80.240.216.69)
[23:56:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:58:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1e5:681d:af1f:ca64)
[23:58:49] <cbreak> template<typename T> T nanptr() { static auto nan = std::numeric_limits<float>::signaling_NaN(); return &nan; }
[23:59:09] <cbreak> hmm... that should return T const *
