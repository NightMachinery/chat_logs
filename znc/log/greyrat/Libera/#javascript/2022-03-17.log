[00:00:41] <sheetjs> start from the top
[00:01:42] <sheetjs> onosendi: are you trying to make a request (node acting as the client) or implement the server (node acting as the server)?
[00:01:49] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[00:02:57] <onosendi> sheetjs: "Authenticate with JWT as a bearer token Keep alive to recieve array of data to store in database"
[00:03:38] <sheetjs> so your node script is making the request?
[00:04:16] <onosendi> sheetjs: correct.
[00:04:41] <betterOn1> hi
[00:04:44] <betterOn1> $(window).on("scroll", function() {
[00:05:11] <betterOn1> this doesnt work somehow.. how can i find the root cause :\
[00:05:14] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:07:05] <sheetjs> you can use node http.request
[00:07:31] <onosendi> sheetjs: thanks
[00:07:39] <sheetjs> in the callback, add an event listener to 'data' event which will be called every time new data is pushed
[00:07:57] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[00:08:15] <sheetjs> http.request(opts, (res) => { res.on('data', (data) => { ... }); });
[00:08:24] *** Joins: D4mned (~D1mned@212.101.253.80)
[00:08:41] *** Quits: bambanxx (~bambanx@2800:150:106:1061:74d0:27f2:b545:f3a2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:09:17] *** Quits: D3mned (~D1mned@212.101.253.80) (Ping timeout: 240 seconds)
[00:10:53] <farn> betterOn1: you'll have to be more specific than "doesnt work". do you get an error message? does the callback function get called at all?
[00:11:03] <onosendi> sheetjs: thanks man, much appreciated.
[00:13:29] <theskillwithin> !doesn't work
[00:13:29] <jellobot> theskillwithin, What do you mean it doesn't work? Is it unemployed? What happens when you try to run it? What did you try to run? What's the output? What's the error message? What did you want or expect to happen? Can you post a screenshot or a fiddle?
[00:23:03] *** Joins: audiobirb (~audio@user/audio)
[00:25:47] *** Joins: l__q (~modinfo@user/modinfo)
[00:26:27] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[00:27:32] <betterOn1> farn: thank you so much. i found the problem for now. there was a conditional return statement before event handler definition. that was the cause..
[00:29:06] <blueagain> jellobot's humour is top-north. "Is it enmployed?" XDD
[00:29:14] <blueagain> unemployed*
[00:32:06] <onosendi> sheetjs: it just hangs: https://gist.github.com/onosendi/d385b9ef276cf4fc0b926698d6e63bb4
[00:32:50] <onosendi> That's not the correct host, but I'm not getting any logs or errors from any https domain.
[00:33:08] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:33:44] *** Quits: l__q (~modinfo@user/modinfo) (Quit: interet cut off, write me memo! it will be send to my mail!)
[00:34:40] <epolanski> I have a script in a dir a/b/src/foo.js if I launch it from b, doing node src/foo.js it works fine. But now I want to alias the execution to the file, issue is, I need to appear as the workdir is a/b, even tho my alias has to work from anywhere
[00:34:44] <epolanski> is there any solution for it?
[00:35:17] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (Ping timeout: 256 seconds)
[00:35:50] <sheetjs> onosendi: you need to listen to events on `res`
[00:36:23] <blueagain> onosendi: off the top of my head, you're missing req.end() at the end of your script
[00:36:48] <blueagain> onosendi: also, I would specify a port (443), a path ("/" or so) and a method ("GET" or so)
[00:37:37] <onosendi> The URL I need is foo.com:3062/bar with a Bearer token. I can't even tell if I'm making a successful connection because of the hang.
[00:38:02] <blueagain> it doesn't really hang, you just need req.end() to fire it up
[00:38:03] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[00:38:21] <onosendi> blueagain: k
[00:39:37] <blueagain> adding a bearer token should be done via specifying a "headers" property in your ops
[00:39:41] <blueagain> opts*
[00:40:57] <blueagain> "headers": {"Authorization": `Bearer ${token}`}
[00:42:34] <onosendi> blueagain: ah, you're the man. I had everything right... the req.end() is what I needed.
[00:43:35] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[00:44:36] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[00:48:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:52:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[00:53:25] *** Quits: hassoon_ (hassoon@2605:6400:30:faa1:1b15:3d69:2291:9779) (Changing host)
[00:53:25] *** Joins: hassoon_ (hassoon@user/hassoon)
[00:53:29] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[00:56:34] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[00:57:39] *** Joins: trevors (~trevors@user/trevors)
[00:57:40] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[00:58:44] <farn> epolanski: when accessing files or folders via relative paths, you could use path.join(__dirname, 'thepath') instead to make the script's directory the effective working directory
[01:00:23] *** Joins: ivanf (~ivan@pool-173-56-92-56.nycmny.fios.verizon.net)
[01:01:18] *** Quits: ivanf (~ivan@pool-173-56-92-56.nycmny.fios.verizon.net) (Changing host)
[01:01:18] *** Joins: ivanf (~ivan@user/ivanf)
[01:05:10] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[01:05:49] *** Joins: nullbytes (~nullbytes@ool-2f1206df.dyn.optonline.net)
[01:05:53] *** Joins: suss` (~user@user/suss)
[01:07:40] *** Quits: suss (~user@user/suss) (Ping timeout: 250 seconds)
[01:08:09] <ljharb> blueagain: * notch
[01:10:19] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Quit: Leaving)
[01:10:36] *** Joins: stdInOut (~stdInOut@user/stdInOut)
[01:14:32] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Read error: Connection reset by peer)
[01:18:18] *** Joins: kalen (~kalen@gateway/vpn/pia/kalen)
[01:18:24] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[01:20:06] *** Quits: crworkido (~cr_workid@2001:8a0:f03e:2900:747e:e790:fb2d:98ad) (Quit: Leaving...)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:22:53] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[01:23:45] *** Joins: cos (~cos@user/cos)
[01:24:01] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Ping timeout: 256 seconds)
[01:28:58] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[01:30:27] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 252 seconds)
[01:30:52] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[01:32:51] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:33:34] <relipse> Did anyone try out my game?
[01:33:57] <relipse> It’s 99% JavaScript
[01:34:13] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:34:25] *** Quits: jumpcutking (uid459573@id-459573.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:35:17] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Client Quit)
[01:35:39] <ljharb> that suggests a lot of stuff should have been images, svgs, fonts, and/or css
[01:35:41] <ljharb> :-p
[01:36:25] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:d01b:e0dd:63d8:cab6)
[01:38:17] *** Quits: cos (~cos@user/cos) (Quit: Client closed)
[01:38:26] *** Quits: average (~average@user/average) (Ping timeout: 250 seconds)
[01:38:42] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[01:44:48] <OhTheCode> relipse: what's your game?
[01:45:50] <relipse> https://eingame.cc EinGame
[01:46:23] <relipse> Oh I forgot any html and css and images that too
[01:46:32] <relipse> about
[01:48:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[01:49:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:52:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:52:52] *** Quits: nomic (~nomic@185.217.117.111) (Quit: Leaving)
[01:55:45] *** Quits: stdInOut (~stdInOut@user/stdInOut) (Quit: Leaving)
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[02:03:24] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[02:04:02] *** Joins: nomic (~nomic@185.217.117.111)
[02:06:54] *** Quits: petril (~petril@user/petril) (Remote host closed the connection)
[02:10:06] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[02:11:43] *** Joins: stdInOut (~stdInOut@user/stdInOut)
[02:14:30] *** Joins: average_ (uid473595@id-473595.hampstead.irccloud.com)
[02:18:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[02:25:27] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[02:26:59] *** Joins: bambanxx (~bambanx@2800:150:106:1061:74d0:27f2:b545:f3a2)
[02:31:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:32:06] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Remote host closed the connection)
[02:32:57] *** Quits: pizdets (~pizdets@183.182.115.244) (Ping timeout: 240 seconds)
[02:33:30] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:33:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.188)
[02:36:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[02:36:24] <nullbytes> When you duplicate a tab in Chrome or Firefox, the current input and textarea values are copied to the new duplicated tab. Instead, is it possible for the new tab's values to be reset to the initial values?
[02:37:04] <gehn> nullbytes, maybe by attaching to one or more of the various on load events
[02:37:50] <nullbytes> gehn: Any changes to HTML or CSS or JavaScript variables are reset in the new tab. So why do only input/textarea values persist?
[02:38:06] <ljharb> nullbytes: because that's what "duplicate the tab" means
[02:38:10] <ljharb> why would you want to clear it
[02:38:19] <ljharb> the user can click "refresh" if they want that, otherwise you're just erasing all their work
[02:38:50] <ljharb> the DOM is the state of the page, various variables aren't
[02:39:05] *** Joins: Betal (~Betal@user/betal)
[02:39:41] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:43:03] <nullbytes> ljharb: for example, I have a JavaScript function that runs whenever a checkbox is checked. In the duplicated tab, the checked/unchecked state of the checkboxes are copied from the original tab, but without running the function that is supposed to run when a checkbox is checked.
[02:44:07] <ljharb> but it’s not checked
[02:44:26] <ljharb> that function only runs when the value *changes*, not whenever it happens to be checked
[02:44:37] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:44:43] <ljharb> the user duplicated the tab, where it was checked. It’s still checked, so nothing should run.
[02:48:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[02:48:42] <gehn> to get really pedantic, it's not even necessarily when it changes, depending on the event used for example an "on click" event handler can simply return false to prevent the change
[02:49:09] <gehn> or well, I forget if that's the proper approach, there's also ofc e.preventDefault();
[02:49:40] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:52:36] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[02:52:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:53:03] *** Joins: trevors (~trevors@user/trevors)
[02:55:04] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[02:58:31] <nullbytes> ljharb: But in the duplicated tab, the states of JavaScript/HTML/CSS are all reset. And when those states are reset, the values of the checkboxes and textboxes are supposed to be different. So the previous values should not persist unless the entire state of the webpage persists. It doesn't make sense that everything else is reset, but the input
[02:58:32] <nullbytes> values are duplicated.
[03:02:38] *** suss` is now known as suss
[03:04:24] *** Quits: bambanxx (~bambanx@2800:150:106:1061:74d0:27f2:b545:f3a2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:06:05] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[03:08:03] *** Joins: stenno (~stenno@user/stenno)
[03:10:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:10:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:10:51] *** Joins: wroathe (~wroathe@user/wroathe)
[03:11:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:12:51] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:16:26] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[03:17:41] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[03:18:15] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:27:02] *** Quits: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:28:07] *** Quits: nullbytes (~nullbytes@ool-2f1206df.dyn.optonline.net) (Ping timeout: 256 seconds)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:34:07] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[03:34:57] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:35] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Ping timeout: 240 seconds)
[03:39:44] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:39:59] *** Quits: sa0 (~sa0sin@88.120.82.205) (Remote host closed the connection)
[03:40:43] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[03:41:09] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[03:42:38] *** Joins: sa0 (~sa0sin@88.120.82.205)
[03:44:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[03:45:37] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:47:24] *** Quits: sa0 (~sa0sin@88.120.82.205) (Ping timeout: 252 seconds)
[03:49:57] *** Joins: stenno (~stenno@user/stenno)
[03:50:13] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:51:03] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[03:51:26] *** Quits: pmercado (~pmercado@186.107.37.71) (Quit: Konversation terminated!)
[03:54:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:54:47] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) ()
[03:55:08] *** Quits: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:57:05] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:d01b:e0dd:63d8:cab6) (Remote host closed the connection)
[03:58:36] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:01:39] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:03:21] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[04:04:27] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[04:06:15] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[04:09:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:09:33] *** Joins: Junxter (~Junxter@222.94.37.130)
[04:12:28] *** Joins: poiqwepoiqwe (~poiqwepoi@1.146.97.250)
[04:12:33] *** Joins: trevors (~trevors@user/trevors)
[04:15:44] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 250 seconds)
[04:16:12] *** Joins: prodigius (~prodigius@75-163-174-136.clsp.qwest.net)
[04:24:02] *** Quits: stdInOut (~stdInOut@user/stdInOut) (Quit: Leaving)
[04:24:10] *** Quits: average_ (uid473595@id-473595.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:32:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:33:38] *** Quits: \mSg (mSg@user/msg/x-0285936) ()
[04:34:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[04:40:02] *** Joins: stenno (~stenno@user/stenno)
[04:50:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:53:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:54:02] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[04:54:27] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:d026:fbc:9f82:6678)
[04:56:52] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: Textual IRC Client: www.textualapp.com)
[04:59:17] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:03:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:07:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:10:55] *** Quits: poiqwepoiqwe (~poiqwepoi@1.146.97.250) (Quit: Client closed)
[05:12:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[05:13:22] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[05:25:50] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[05:26:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:26:53] *** Quits: duckgoose (~BurdIRC@user/duckgoose) (Ping timeout: 256 seconds)
[05:28:10] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[05:28:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[05:28:36] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[05:28:41] *** Quits: mrdata (~mrdata@user/mrdata) (Read error: Connection reset by peer)
[05:28:59] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:f427:a52:115a:e946:8de6)
[05:29:09] *** Joins: mrdata (~mrdata@135-23-182-185.cpe.pppoe.ca)
[05:29:35] *** Quits: mrdata (~mrdata@135-23-182-185.cpe.pppoe.ca) (Changing host)
[05:29:35] *** Joins: mrdata (~mrdata@user/mrdata)
[05:31:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[05:38:53] *** Joins: r0c1n4nt3_ (~r0c1n4nt3@177.96.8.114)
[05:39:23] *** Joins: vysn (~vysn@user/vysn)
[05:39:40] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:40:38] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[05:41:12] *** Quits: r0c1n4nt3_ (~r0c1n4nt3@177.96.8.114) (Quit: Leaving)
[05:43:18] *** Joins: BUSY (~BUSY@user/busy)
[05:44:55] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Client Quit)
[05:47:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:47:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:47:09] *** Joins: wroathe (~wroathe@user/wroathe)
[05:48:13] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[05:50:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:54:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:55:19] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:56:14] *** Joins: \mSg (mSg@user/msg/x-0285936)
[05:57:06] <Folsgaard> good evening
[05:57:09] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[05:57:36] *** Quits: Folsgaard (~Folsgaard@c-73-236-130-8.hsd1.wv.comcast.net) (Remote host closed the connection)
[05:59:31] *** Quits: pizdets (~pizdets@183.182.110.188) (Ping timeout: 265 seconds)
[06:00:22] *** Joins: stenno (~stenno@user/stenno)
[06:02:18] <wez> hi hi!
[06:04:39] *** Joins: pizdets (~pizdets@183.182.110.150)
[06:05:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[06:05:09] *** Joins: crashrep (~crashrep@user/crashrep)
[06:07:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:09:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:09:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[06:09:36] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:f427:a52:115a:e946:8de6) (Quit: Leaving)
[06:10:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:795e:a75c:8fe1:c5f2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:14:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:18:41] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[06:24:40] *** Joins: matsaman (~matsaman@user/matsaman)
[06:27:19] *** Joins: duckgoose (~BurdIRC@user/duckgoose)
[06:27:31] *** Quits: relms (~relms@user/relms) (Quit: Byeeee)
[06:28:03] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[06:29:04] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae)
[06:29:58] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Remote host closed the connection)
[06:30:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:38:04] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[06:38:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[06:38:23] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:38:43] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:44:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[06:51:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:51:39] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae) (Ping timeout: 252 seconds)
[06:52:17] *** Quits: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (Ping timeout: 240 seconds)
[06:54:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:54:29] *** Joins: stenno (~stenno@user/stenno)
[06:59:21] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[07:00:45] *** Joins: paule32_ (~paul@nat-91-137-16-12.net.encoline.de)
[07:00:45] *** Quits: paule32_ (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[07:00:45] *** Joins: paule32_ (~paul@user/paule32)
[07:01:14] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:04:16] *** Joins: paule32__ (~paul@nat-91-137-21-12.net.encoline.de)
[07:04:16] *** Quits: paule32__ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:04:16] *** Joins: paule32__ (~paul@user/paule32)
[07:04:22] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 256 seconds)
[07:05:24] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Ping timeout: 252 seconds)
[07:05:49] *** Joins: l__q (~modinfo@user/modinfo)
[07:06:08] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:06:39] *** Joins: paule32 (~paul@nat-91-137-16-12.net.encoline.de)
[07:06:39] *** Quits: paule32 (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[07:06:39] *** Joins: paule32 (~paul@user/paule32)
[07:07:02] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 240 seconds)
[07:09:15] *** Quits: paule32__ (~paul@user/paule32) (Ping timeout: 252 seconds)
[07:09:45] *** Quits: l__q (~modinfo@user/modinfo) (Client Quit)
[07:11:35] *** Joins: l__q (~modinfo@user/modinfo)
[07:11:45] *** Joins: paule32_ (~paul@nat-91-137-21-12.net.encoline.de)
[07:11:45] *** Quits: paule32_ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:11:45] *** Joins: paule32_ (~paul@user/paule32)
[07:11:50] *** Quits: l__q (~modinfo@user/modinfo) (Client Quit)
[07:13:24] *** Joins: l__q (~modinfo@user/modinfo)
[07:14:47] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 256 seconds)
[07:16:13] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[07:19:27] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[07:19:40] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:19:53] *** Joins: crashrep (~crashrep@user/crashrep)
[07:19:59] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[07:22:53] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[07:25:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:25:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:25:19] *** Joins: wroathe (~wroathe@user/wroathe)
[07:27:16] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:28:51] *** Joins: kerat58 (~keeerat@user/tarek58)
[07:31:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:36:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[07:38:56] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[07:39:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:41:35] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[07:42:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:43:33] *** Joins: thojanssens (~thojansse@182.232.2.140)
[07:46:20] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[07:47:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:48:36] *** Joins: stenno (~stenno@user/stenno)
[07:51:49] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:53:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[07:53:37] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:54:44] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[07:55:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:55:13] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[07:57:49] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[07:59:48] *** Joins: k8yun (~k8yun@user/k8yun)
[08:06:10] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:07:04] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[08:07:17] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[08:08:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:10:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:13:42] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[08:13:50] *** Quits: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[08:14:21] *** Quits: nomic (~nomic@185.217.117.111) (Quit: Leaving)
[08:16:02] <gde33> I have an idea, it would be cool if js had fuzzy matching. Something like:   "bar" / 'baz"  returning 0.33333
[08:18:01] <duckgoose> you could make a function to do that fairly easily
[08:18:04] <gde33> or perhaps just a fuzzy(a,b) method
[08:18:20] <dave0> duckgoose!
[08:18:39] <gde33> duckgoose: certainly! But it takes quite a bit of doing getting it to perform wonderfully
[08:18:54] <duckgoose> dave0
[08:19:19] <dave0> i thought you were a php guy :-p
[08:19:31] <gde33> php is awesome
[08:19:39] <gde33> I keep laughing how easy some stuff is
[08:19:49] <duckgoose> I don't know about awesome
[08:19:52] <duckgoose> its ok
[08:20:02] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:20:22] <gde33> its ugly but really effective
[08:21:17] <duckgoose> i find the inconsistent function naming to be cumbersome
[08:21:22] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[08:21:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:21:56] <xisop> a lot of the core functions were just thin wrappers over the C equivalents
[08:21:57] <gde33> yeah, all languages have a bit of that. I often wish they would just get over it and accept both fooBar and foo_bar
[08:22:26] <gde33> xisop: well, it started out as a hideous creature :P
[08:22:46] <duckgoose> you have html_entity_decode and htmlentities
[08:22:49] <duckgoose> come on :P
[08:22:50] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[08:23:09] <duckgoose> I digress
[08:23:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:23:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:23:25] *** Joins: wroathe (~wroathe@user/wroathe)
[08:23:30] <gde33> why bother throwing an error?
[08:23:52] <gde33> its like I call you duck goose and you refuse to respond because I put a space in your handle
[08:24:00] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[08:24:02] *** Quits: lilmonkey (~lilmonkey@user/lilmonkey) (Ping timeout: 250 seconds)
[08:24:24] <gde33> surely you would treat my commands to you the same way regardless? :P
[08:25:28] <gde33> its like you have an employee called Dave but you keep calling him Steve. Eventually he should respond to Steve eventho you shouldn't be doing that :P
[08:25:44] <dave0> you can call me al
[08:25:46] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[08:26:09] <duckgoose> don't call me betty
[08:26:41] <gde33> Its like, why do I have to close everything with ),} and ] if it is perfectly sensible code?
[08:26:58] <gde33> at least we got over the missing semicolon now :P
[08:27:10] <duckgoose> you must be a python guy
[08:27:19] <theskillwithin> https://youtu.be/KM2K7sV-K74
[08:27:20] <skillbot> YouTube Title: Don't call me Shirley
[08:27:55] <gde33> I really just want to append to files, first xml was all upset that the closing tag was missing then json came along and improved nothing :P
[08:28:14] <duckgoose> oh no
[08:28:16] <gde33> but at least we now get to put a comma behind the last object :P
[08:28:22] * duckgoose strongly disagrees
[08:28:25] <duckgoose> I love my json
[08:28:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:28:44] *** Joins: stenno (~stenno@user/stenno)
[08:28:45] <gde33> why would it be unparsable if the last ] is left off?
[08:28:58] <gde33> why are we spending a whole character on this?
[08:30:26] <gde33> I'm convinced that all the closing stuff is just obsession with ritual :P
[08:30:27] <ljharb> because then it's invalid
[08:30:40] <gde33> its not the bible man!
[08:31:22] <duckgoose> so you want ["things": ["thing to be valid json? gross!
[08:31:50] <gde33> the data is all there!
[08:31:57] <ljharb> gde33: no, it's not the bible. it's the spec, it's actually an authority.
[08:32:00] <duckgoose> I bet you build you websites without closing your html tags don't you
[08:32:02] <duckgoose> you heathen
[08:32:12] <gde33> I actually started wondering about this doing an rss aggregator and finding that 30% of the feeds are invalid
[08:32:19] <sheetjs> duckgoose: its the ASI of html
[08:32:43] <gde33> I decided that just parsing them was fine for my use case
[08:32:46] <ljharb> it's 2022, all the rss feeds left are barely 3% of what there used to be
[08:33:00] <gde33> you would be surprised what lurks in auto discovery
[08:33:04] <duckgoose> I never used RSS feeds anyway
[08:33:08] <duckgoose> live bookmarks died
[08:33:27] <duckgoose> now we have push notifications to spam us
[08:33:40] <ljharb> gde33: sure but nobody cares about it, it's just because wordpress and medium and whatnot still offer it - because of ritual
[08:33:43] <ljharb> nobody reads rss
[08:33:50] <ljharb> sadly, that time is dead
[08:33:53] <gde33> ljharb: there is half a billion wordpress blogs
[08:34:03] <duckgoose> RSS did make sites easier to scrape content off of tho
[08:34:15] <gde33> you just dont hear much in the hyped up media about RSS
[08:34:29] <duckgoose> people still blog?
[08:34:38] <ljharb> gde33: sure but that doesn't mean people read them, with or without their rss feeds
[08:34:49] <gde33> we might be fewer than before, we are following thousands of times as many websites as you :)
[08:35:32] <gde33> duckgoose: not sure what to call it, ppl do wordpress things now
[08:35:46] <gde33> its a gaming platform? lol
[08:35:52] <duckgoose> blogging wont survive the mobile takeover
[08:36:05] <duckgoose> people ain't gonna wanna read blogs on their phone screens
[08:36:12] <dpuerto> Hi, how can I simulate a 409 error from an API?
[08:36:49] <gde33> I aggregate like this: I gather only the headlines, combine them all, sort them by date and keep only 2000-5000 new ones
[08:37:11] <gde33> I scroll over them periodically and find 2 maybe 5 interesting things to read
[08:37:39] <gde33> if I visit just one of the 30 k websites randomly its just going to have bullshit on it
[08:37:39] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:37:47] <duckgoose> half of them are listacles and they have like 1 list item per page, and 5 ads around it
[08:38:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:38:19] <gde33> not following you, I get rid of the trash imediately
[08:38:30] <duckgoose> dpuerto do you have an example 405 error to go off of?
[08:39:57] <duckgoose> if you want to generate a 405 you could just post to a site expecting get variables
[08:40:22] *** Joins: audiobirb (~audio@user/audio)
[08:42:44] *** Joins: hackers (~self@user/hackers)
[08:43:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[08:46:52] <wyclif> duckgoose: I read a lot of blogs but on my desktop or laptop, never my phone
[08:47:40] <wyclif> I also have to beg to differ with the "nobody reads RSS anymore" take
[08:47:53] <wyclif> Most of what I keep up with is via RSS
[08:48:15] <systemfault> And... for some reason, you believe that the people HERE is your typical facebook reader?
[08:48:25] <wyclif> I didn't say they were
[08:48:48] <wyclif> Substack also begs to differ
[08:49:21] <systemfault> It costs nothing for a website to support RSS, doesn't mean it's used a lot.
[08:49:29] <wyclif> The same people who said "RSS is dead" are the same people who said "no way Substack will ever get market share, people don't subscribe to blogs or "newsletters" anymore"
[08:50:17] <wyclif> systemfault: Just because it costs nothing doesn't mean people aren't using it
[08:50:49] <wyclif> But you do reveal one of the reasons why big corporations hate RSS: they couldn't monetize it with ads
[08:52:10] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae)
[08:52:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:52:49] <duckgoose> well
[08:52:54] <duckgoose> I never heard of substack so
[08:53:22] <dpuerto> duckgoose: I have some error handling. I need better information from the payload... It's returning a 409 saying error updating
[08:55:06] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Remote host closed the connection)
[08:55:18] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[08:56:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:57:52] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:58:33] *** Parts: thojanssens (~thojansse@182.232.2.140) (Leaving)
[09:08:03] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[09:09:18] *** Joins: han-solo (~hanish@user/han-solo)
[09:17:42] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:19:04] <theskillwithin> ugh I hate Select components
[09:19:26] <ThePendulum> why?
[09:19:41] <theskillwithin> styling them sucks
[09:19:46] <theskillwithin> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#styling_with_css
[09:20:19] <ljharb> wyclif: lol no those aren't the same thing
[09:20:23] <ljharb> wyclif: consuming content isn't dead, but rss is
[09:20:36] <theskillwithin> in react theres react-select, and downshift that make it easier,  but they can still get complex
[09:21:13] <ljharb> that you can still consume content via rss doesn't mean it's not dead, it just means the cost of providing it is low enough that "nobody uses it" doesn't matter
[09:21:13] <theskillwithin> this time around I might actually use headlessui react listbox, even tho thats normally for tailwind and im not using tailwind
[09:21:32] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae) (Ping timeout: 240 seconds)
[09:22:33] <deltab> theskillwithin: https://css-tricks.com/the-selectmenu-element/
[09:22:50] <theskillwithin> ya thats going to be super dope
[09:23:21] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[09:23:40] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:29:03] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[09:32:16] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[09:35:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:47:00] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:53:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:56:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:58:27] <codebam> if I try to connect to a secure websocket on an IP address without a TLS cert will it fail?
[09:58:34] <codebam> can I turn off tls verification or something
[09:58:43] <gde33> ljharb: consider that product feeds are RSS :P
[09:58:45] <codebam> I want to make a peer to peer IP chat app
[09:59:42] <codebam> wait this doesn't even make sense because they would have to forward a port
[10:00:08] <codebam> it makes sense if it was ipv6
[10:05:34] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Bye)
[10:05:47] *** Joins: k8yun (~k8yun@user/k8yun)
[10:06:57] <Cork> codebam: you can if you have control of all the browsers connecting (then you can import the self signed cert)
[10:06:59] <Cork> else no
[10:07:44] *** [The_Tablet] is now known as The_Tablet
[10:07:46] <Cork> codebam: and if you want p2p you sould check into webrtc not websocket
[10:08:00] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[10:08:05] <codebam> oh okay, I will check that out
[10:08:56] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[10:09:24] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[10:11:38] *** Quits: The_Tablet (~tablet@user/the-tablet) (Quit: cya~ ❀ only time will tell if i make myself someday / the stage is mine, music is my destiny~ ☆💎✨)
[10:12:19] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[10:17:15] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[10:21:20] <Maxdamantus> Not sure that a certificate is ever meant to be considered valid for an IP address, but maybe browsers have some exception that allows it.
[10:22:09] * Maxdamantus generally recommends not installing custom certificates (at least CAs) in browsers and instead just allowing invalid certificates as an exception.
[10:22:18] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:26:24] <Maxdamantus> LetsEncrypt/certbot at least don't seem to want to issue one to me.
[10:26:26] <Maxdamantus> > The Let's Encrypt certificate authority will not issue certificates for a bare IP address.
[10:27:31] <wyclif> ljharb: It's not dead. I use NetNewsWire and I keep up with all news there, I don't navigate to individual news sites. So no, not dead at all. Only dead to corporate types who can't monetize it and wanted to kill it.
[10:27:38] <Maxdamantus> Ah, I'm thinking of reserved IP addresses. Apparently it is valid for a certificate to have a public IP address.
[10:27:58] <Maxdamantus> (though LetsEncrypt doesn't seem to issue either)
[10:29:10] <Maxdamantus> https://1.1.1.1/
[10:31:47] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:35:30] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:35:53] <Maxdamantus> or more concise: https://1.1/
[10:36:07] <Maxdamantus> Didn't realise they also had that IP address.
[10:36:28] <sheetjs> breaking countless regexes in the process
[10:36:39] <fweht> hey, just so that i understand correctly, if i import different objects from file X in various places in my code, the code in X still runs exactly once, right?  so e.g. a console log outside of any functions would trigger once, or once for each import?
[10:37:03] * Maxdamantus usually uses `ping 1.1.1.1` to test network connectivity, but can instead use `ping 1.1`.
[10:37:41] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:37:47] <Maxdamantus> fweht: yes, the module will only be instantiated once.
[10:38:06] <fweht> Maxdamantus: thank you!
[10:38:08] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:38:11] <Maxdamantus> fweht: otherwise you would end up with different classes and functions etc for each import.
[10:38:45] <fweht> so its ok to put code outside of the exported functions, which instiates something once and for all
[10:39:07] <fweht> i mean instantiate
[10:39:15] <sheetjs> it's "ok" but it's not "good"
[10:39:40] <fweht> :(
[10:39:41] <sheetjs> because tooling around ESM won't be able to eliminate it if the result is not being used
[10:39:52] <sheetjs> yeah went through a huge overhaul recently
[10:40:09] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88)
[10:40:20] <fweht> ok good to know!
[10:41:01] <sheetjs> sheetjs has a few huge lookup tables.  we need bidirectional access (id -> object and object.name -> id) so there was some code that built the reverse lookup table once
[10:41:23] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 256 seconds)
[10:41:44] <sheetjs> problem is webpack and other tooling couldn't figure out when the variable wasn't used, and always included the code.  fixing that problem shaved nearly 200KB off a bundle that only used XLSX export
[10:42:09] <fweht> aah yeah i see
[10:42:38] <fweht> yeah i was just thinking about a react component where i know the code will be used but i dont want to pass it through different subcomponents
[10:43:24] <sheetjs> are you interested in passing around state or something else?
[10:43:52] <fweht> just a bunch of textures
[10:44:00] <fweht> no state, they never change throughout the 'app'
[10:44:06] *** Joins: JaredCE (~JaredCE@188.211.162.68)
[10:44:11] <sheetjs> why would the textures have side effects?
[10:44:41] <sheetjs> the loaders should be intelligent enough to generate pure code
[10:45:47] <fweht> i dont think they have sideeffects?  i just want to make sure they instantiate only once, not once per render, so alternatively i would make `useRefs` out of them, which might be the clean react style variant
[10:48:42] *** Quits: JaredCE (~JaredCE@188.211.162.68) (Ping timeout: 252 seconds)
[10:51:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:51:49] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: meow)
[10:53:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:54:28] *** Joins: average_ (uid473595@id-473595.hampstead.irccloud.com)
[10:55:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[10:56:34] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 250 seconds)
[10:57:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:03:14] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[11:03:14] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[11:03:14] *** Joins: average (~average@user/average)
[11:04:11] *** Joins: thojanssens (~thojansse@182.232.2.140)
[11:05:53] *** Joins: D3mned (~D1mned@89.108.142.102)
[11:05:53] *** Quits: D4mned (~D1mned@212.101.253.80) (Read error: Connection reset by peer)
[11:09:24] *** Quits: w0ng (~w0ng@103.1.212.149) (Ping timeout: 260 seconds)
[11:10:46] *** Quits: l__q (~modinfo@user/modinfo) (Quit: internet issue)
[11:13:00] *** Quits: thojanssens (~thojansse@182.232.2.140) (Remote host closed the connection)
[11:13:19] *** Joins: thojanssens (~thojansse@182.232.2.140)
[11:14:30] *** Quits: thojanssens (~thojansse@182.232.2.140) (Remote host closed the connection)
[11:16:01] *** Joins: thojanssens (~thojansse@182.232.2.140)
[11:17:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[11:19:20] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[11:20:38] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:21:00] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae)
[11:22:43] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:23:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:24:12] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[11:24:21] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[11:25:12] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[11:29:01] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[11:34:15] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b)
[11:35:24] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88) (Ping timeout: 240 seconds)
[11:36:55] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[11:37:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba)
[11:38:17] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[11:40:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b) (Ping timeout: 240 seconds)
[11:40:55] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Read error: Connection reset by peer)
[11:43:55] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[11:44:15] *** Joins: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com)
[11:44:24] *** Quits: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com) (Client Quit)
[11:49:52] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[11:50:26] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:51:28] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Quit: Lost terminal)
[11:52:27] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae) (Ping timeout: 268 seconds)
[11:52:29] *** Joins: l__q (~modinfo@user/modinfo)
[11:52:59] *** Quits: thojanssens (~thojansse@182.232.2.140) (Quit: Leaving)
[11:53:14] *** Joins: thojanssens (~thojansse@182.232.2.140)
[11:54:12] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[11:54:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd)
[11:54:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:54:48] *** Joins: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b)
[11:55:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed8e:eff0:febb:d703)
[11:57:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba) (Ping timeout: 240 seconds)
[11:58:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:59:02] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 272 seconds)
[12:01:08] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:07:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 250 seconds)
[12:08:49] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:48] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[12:11:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd) (Remote host closed the connection)
[12:12:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c)
[12:12:49] *** Joins: iomari891 (~iomari891@197.210.76.112)
[12:14:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:17:12] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[12:18:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[12:26:30] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:29:37] *** Quits: thojanssens (~thojansse@182.232.2.140) (Read error: Connection reset by peer)
[12:29:55] *** Joins: thojanssens (~thojansse@182.232.2.140)
[12:31:24] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[12:31:49] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Quit: Konversation terminated!)
[12:32:58] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[12:33:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:34:06] *** Joins: JaredCE (~JaredCE@188.211.162.68)
[12:35:22] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 250 seconds)
[12:37:00] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[12:37:36] *** Quits: konrados (~konrados@user-5-173-148-18.play-internet.pl) (Ping timeout: 252 seconds)
[12:38:25] *** Joins: konrados (~konrados@user-5-173-148-31.play-internet.pl)
[12:38:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[12:38:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[12:39:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:39:21] *** Quits: [R] (~rs@genoce.org) (Read error: Connection reset by peer)
[12:42:42] *** Joins: stenno (~stenno@user/stenno)
[12:44:14] *** Joins: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com)
[12:44:22] *** Quits: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com) (Client Quit)
[12:48:32] *** Joins: han-solo (~hanish@user/han-solo)
[12:48:43] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[12:48:45] *** Joins: Maali (~Toppin@e190017.upc-e.chello.nl)
[12:49:44] *** Quits: thojanssens (~thojansse@182.232.2.140) (Quit: Leaving)
[12:51:03] *** Joins: gulzar (~gulzar@49.206.240.149)
[12:51:39] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[12:52:54] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:53:49] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[12:55:20] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:56:13] <gulzar> Hi. I have a table with checkboxes. I am able to get the values of the checked rows using jquery like this https://paste.debian.net/1234689/  . I need to get these values into a bootstrap modal to POST. Modal is in that link. How to get these 'values' into 'id'  input of the modal?
[12:56:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 250 seconds)
[12:57:21] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:a81f:2b83:4e1e:1d38)
[12:58:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[12:59:50] *** Quits: average_ (uid473595@id-473595.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:02:15] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Quit: Leaving)
[13:02:35] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[13:05:12] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Client Quit)
[13:05:16] *** Joins: crworkido (~cr_workid@2001:8a0:f03e:2900:c501:9cc5:18b9:5c7d)
[13:05:38] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[13:05:55] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:a81f:2b83:4e1e:1d38) (Quit: Leaving...)
[13:07:56] *** Joins: stenno (~stenno@user/stenno)
[13:08:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:11:46] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[13:13:38] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[13:15:32] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[13:15:41] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[13:16:05] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[13:19:33] *** Joins: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be)
[13:19:48] <gulzar> found it
[13:19:53] *** Quits: gulzar (~gulzar@49.206.240.149) (Quit: gulzar)
[13:21:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:21:58] *** Quits: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be) (Client Quit)
[13:22:44] *** Joins: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be)
[13:23:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[13:29:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:30:29] *** Quits: suss (~user@user/suss) (Ping timeout: 256 seconds)
[13:35:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:36:28] *** Joins: friend (~friend@user/friend)
[13:39:23] *** Quits: src (~src@user/src) (Quit: leaving)
[13:39:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:42:05] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[13:47:04] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:50:55] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae)
[13:56:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:57:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 260 seconds)
[13:59:00] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[13:59:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:01:00] *** Quits: Arisco (~ckmptnml@201-11-17-238.user3p.brasiltelecom.net.br) (Ping timeout: 240 seconds)
[14:01:38] *** Joins: dimi1947 (~dimi1947@ppp037153164084.access.hol.gr)
[14:05:17] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[14:06:55] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:08:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:08:56] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[14:10:22] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com)
[14:10:43] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[14:11:51] <OnkelTem> Hi folks. Is there a way to round a number less than 1, so that it won't be turned into 0 if it's greater than 0?
[14:12:05] <OnkelTem> i.e. so that 0.00001 won't be rounded to 0
[14:12:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:12:30] *** Quits: konrados (~konrados@user-5-173-148-31.play-internet.pl) (Ping timeout: 260 seconds)
[14:12:38] <OnkelTem> toFixed() doesn't care about it
[14:12:58] <OnkelTem> n> Number(0.01).toFixed(1)
[14:12:58] <jellobot> (okay) '0.0'
[14:13:03] *** Joins: stenno (~stenno@user/stenno)
[14:13:09] *** Joins: konrados (~konrados@user-5-173-148-18.play-internet.pl)
[14:13:57] <OnkelTem> I would like to have it min and max limits
[14:15:48] <blueagain> n> Number(0.127).toFixed(2)
[14:15:49] <jellobot> (okay) '0.13'
[14:17:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62)
[14:18:20] <blueagain> OnkelTem: you just specify the number of decimal places in toFixed
[14:19:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c) (Ping timeout: 240 seconds)
[14:19:21] <OnkelTem> it's not that easy :) I need to present numbers in human readable form. Having a big number with lots of digits after point is not that readable: 34214.99999
[14:19:54] <OnkelTem> But if a number say less than 1, it does make sense: 0.00023
[14:20:55] *** Quits: D3mned (~D1mned@89.108.142.102) (Ping timeout: 256 seconds)
[14:21:00] <blueagain> so between 0 and 1, use toFixed(), otherwise just floor?
[14:21:12] <OnkelTem> :)
[14:22:03] <OnkelTem> That was my first though. But it actually should be more sophisticated. Image 2.5. You'd most likely want to see that 0.5
[14:22:06] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae) (Ping timeout: 252 seconds)
[14:22:16] <OnkelTem> Imagine*
[14:22:29] <OnkelTem> I'm pretty there is an algorithm for that, and it can even have a common name.
[14:23:09] <OnkelTem> something from Observational errors topic
[14:23:31] <blueagain> what are your parameters for determining a worthy presentation?
[14:23:59] *** Joins: wyclif (~wyclif@user/wyclif)
[14:24:06] <blueagain> besides a differentiation between 0 < x < 1 and other cases
[14:24:29] <OnkelTem> I haven't yet structured my thoughts that far! Ahhah
[14:25:00] *** Quits: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be) (Ping timeout: 240 seconds)
[14:25:17] <OnkelTem> Something like: it should be reasonable to not overload user with needless info, and yet - not loose important
[14:25:54] <OnkelTem> 1) Integers should not about rounded.
[14:26:43] <blueagain> integers are per definition already "rounded"
[14:27:05] <OnkelTem> yeah, I mean that 123456 should not be rounded down to 123500
[14:27:11] <blueagain> they don't have a fractional component
[14:27:47] <OnkelTem> 2) If there is a fractional part, the total number of meaning full digits should not be more than N
[14:27:54] <OnkelTem> meaningful
[14:27:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:28:02] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[14:29:37] <blueagain> so basically, you want to split every number into an integer and a fractional part, and then run fractional_part.toFixed(N) and add them?
[14:30:00] *** Joins: aLeSD_ (~aLeSD@91.126.33.194)
[14:30:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 240 seconds)
[14:31:56] <OnkelTem> N - including integer digits
[14:32:15] <OnkelTem> ok, nevermind... Let me write a function instead. But it's not gonna be optimal
[14:32:22] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[14:33:39] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Ping timeout: 252 seconds)
[14:33:57] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 240 seconds)
[14:34:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:34:17] *** Quits: stagas (~stagas@2a02:587:c4c7:f3eb:80d1:2652:cd45:ca63) (Ping timeout: 240 seconds)
[14:36:54] *** Joins: audiobirb (~audio@user/audio)
[14:37:58] *** Joins: wyclif (~wyclif@user/wyclif)
[14:38:01] <blueagain> n> const present = (n, fix_point = 0) => { const int = Math.trunc(n); const fra = Number(Number(n - int).toFixed(fix_point)); return int + fra; }; present(12.0227, 3);
[14:38:02] <jellobot> (okay) 12.023
[14:38:02] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[14:38:07] <blueagain> OnkelTem: how about that?
[14:38:11] *** Joins: w0ng (~w0ng@185.218.127.24)
[14:39:17] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[14:39:52] <friend> why not multiply by the 10n power where n is the number of decimal places. Then trunc, then do you math and divide by 10n power
[14:40:07] <friend> that's 10^n, sorry
[14:41:03] <OnkelTem> friend: sure, that looks very reasonable
[14:41:43] <OnkelTem> but also I need to ensure that a non zero number stays non zero
[14:41:57] <OnkelTem> 0.000001 should stay untouched basically
[14:42:45] *** Joins: fef (~thedawn@user/thedawn)
[14:43:09] <OnkelTem> blueagain: I see. It doesn't address this req ^^
[14:43:41] <friend> so you make the number of decimal places equal to that number. For example. .0001 would require the same precision in your other numbers.
[14:44:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:44:19] <hans> what are you discussing?
[14:44:22] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:44:41] <friend> being picky about rounding significant digits, I think
[14:46:07] <OnkelTem> hans: I received a bug report on that non zero number displayed as zeros after rounding. So I'm trying to come up with a heuristics which makes rounding "smart"
[14:46:15] <OnkelTem> just shared it here
[14:46:42] <hans> my first thought was .toFixed(100)
[14:46:46] <OnkelTem> haha
[14:48:05] *** Joins: D4mned (~D1mned@89.108.142.102)
[14:48:15] <OnkelTem> blueagain: I'm still trying to count digits in fra part. Well, it seems converting to string is the only option
[14:48:32] <OnkelTem> n> const int = Math.trunc(x); Number(Number(x - int));
[14:48:32] <jellobot> (fail) ReferenceError: x is not defined
[14:48:45] <OnkelTem> n> const int = Math.trunc(2.312321); Number(Number(x - int));
[14:48:46] <jellobot> (fail) ReferenceError: x is not defined
[14:48:55] <OnkelTem> n> const int = Math.trunc(2.312321); Number(Number(2.312231 - int));
[14:48:56] <jellobot> (okay) 0.31223100000000015
[14:49:11] <OnkelTem> (Sorry for spamming the bot with bs)
[14:49:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:49:38] <OnkelTem> javascript numbers have always been tough!
[14:49:55] <OnkelTem> n> 1.1 % 1￼
[14:49:55] <jellobot> (fail) SyntaxError: Invalid or unexpected token
[14:50:07] <OnkelTem> n> 1.1 % 1
[14:50:08] <jellobot> (okay) 0.10000000000000009
[14:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:52:17] *** Joins: stenno (~stenno@user/stenno)
[14:52:18] *** Quits: stenno (~stenno@user/stenno) (Client Quit)
[14:53:07] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Read error: Connection reset by peer)
[14:53:24] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[14:55:20] *** Joins: nightw0lf (~nightw0lf@77.125.126.151)
[14:56:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:59:24] *** Quits: nightw0lf (~nightw0lf@77.125.126.151) (Client Quit)
[14:59:32] *** Joins: cK (~cK@77.125.126.151)
[14:59:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:00:20] *** Quits: cK (~cK@77.125.126.151) (Remote host closed the connection)
[15:01:13] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[15:02:28] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:03:23] <blueagain> OnkelTem: why are you counting digits in the fra part? Also, toFixed returns a string anyway so you need no conversion, just drop the Number() call I put around it
[15:04:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:04:31] *** Quits: osXnut (~osXnut@77.125.126.151) (Remote host closed the connection)
[15:04:44] *** Joins: trevors (~trevors@user/trevors)
[15:04:47] <blueagain> if you think stuff like 0.000001 should stay untouched, just check if the int part equals 0 and if so, return the fra instead of the rest of the calculation
[15:04:48] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:05:53] *** Joins: matsaman (~matsaman@user/matsaman)
[15:07:06] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[15:07:18] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[15:08:24] <blueagain> n> const present = (n, fix_point = 0) => { const int = Math.trunc(n); return int === 0 ? n : int + Number(Number(n - int).toFixed(fix_point)); }; present(0.000012);
[15:08:24] <jellobot> (okay) 0.000012
[15:08:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[15:10:44] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[15:11:24] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[15:15:12] *** osXnut is now known as osXnuts
[15:16:03] *** osXnuts is now known as osXnut
[15:16:27] *** Quits: osXnut (~osXnut@77.125.126.151) (Quit: leaving)
[15:16:30] *** Joins: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be)
[15:21:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:21:31] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 250 seconds)
[15:26:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[15:26:48] *** Quits: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[15:27:21] *** Joins: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be)
[15:31:08] *** Joins: mud (~mud@user/kadoban)
[15:33:06] *** Quits: makara (~makara@196.214.171.83) (Ping timeout: 272 seconds)
[15:33:22] *** Joins: dvanloon8 (~dvanloon@user/dvanloon)
[15:33:28] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Ping timeout: 250 seconds)
[15:33:28] *** dvanloon8 is now known as dvanloon
[15:34:06] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[15:34:15] *** Joins: spynx (~spynxic@spynxic.powered.by.lunarbnc.net)
[15:35:27] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[15:38:59] *** Joins: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:41:20] *** Quits: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[15:41:38] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:42:40] *** Joins: stdInOut (~stdInOut@user/stdInOut)
[15:45:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[15:45:44] *** Joins: wyclif (~wyclif@user/wyclif)
[15:50:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[15:51:11] *** Joins: wyclif (~wyclif@user/wyclif)
[15:54:30] *** Quits: doji (~doji@user/doji) (Ping timeout: 252 seconds)
[15:54:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:55:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[15:56:41] *** Joins: wyclif (~wyclif@user/wyclif)
[15:56:41] *** Joins: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr)
[15:57:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:58:06] *** Quits: busch_ (~busch@tunnel544981-pt.tunnel.tserv18.dus1.ipv6.he.net) (Quit: Bye)
[15:58:24] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[15:59:11] *** Joins: summersault (~summersau@179.221.251.36)
[15:59:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:00:35] *** Joins: busch (~busch@tunnel544981-pt.tunnel.tserv18.dus1.ipv6.he.net)
[16:01:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:02:37] *** Joins: makara (~makara@196.214.171.83)
[16:03:30] *** Quits: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[16:04:38] *** Quits: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com) (Quit: leaving)
[16:09:23] *** Joins: D3mned (~D1mned@212.101.251.87)
[16:11:23] *** Joins: D2mned (~D1mned@212.101.234.101)
[16:11:33] <ProfSimm> What's the latest on building ad-hoc objects from function constructors vs. using prototypes?
[16:11:37] *** Quits: D4mned (~D1mned@89.108.142.102) (Ping timeout: 240 seconds)
[16:11:51] <ProfSimm> i.e.   new Foo(1, 2, 3);   vs  foo(1, 2, 3) with "return {...}" inside
[16:12:34] *** D2mned is now known as D4mned
[16:12:41] *** Quits: niop_ (niop@gateway/vpn/airvpn/niop) (Remote host closed the connection)
[16:12:47] <ProfSimm> As in performance, which is faster on V8 etc
[16:13:37] *** Quits: D3mned (~D1mned@212.101.251.87) (Ping timeout: 240 seconds)
[16:13:50] *** Joins: vantage|work (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[16:16:01] *** Joins: niop (~niop@2406:3400:215:2560:1a3b:3ae4:34b4:59f3)
[16:16:32] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Ping timeout: 240 seconds)
[16:16:32] *** Quits: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be) (Quit: Leaving...)
[16:17:41] *** Joins: niop_ (niop@gateway/vpn/airvpn/niop)
[16:17:49] *** Joins: doji (~doji@user/doji)
[16:17:56] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:18:28] *** Joins: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr)
[16:20:06] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[16:20:11] *** Joins: remolej (~kenoba@user/kenoba)
[16:20:13] *** Quits: niop (~niop@2406:3400:215:2560:1a3b:3ae4:34b4:59f3) (Ping timeout: 240 seconds)
[16:23:06] *** Joins: summersault (~summersau@179.221.251.36)
[16:23:23] *** Quits: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr) (Max SendQ exceeded)
[16:23:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[16:27:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:27:47] *** Joins: l__q (~modinfo@user/modinfo)
[16:27:54] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[16:28:50] *** Joins: ColorShes (~yoann@1.618.talagrand.com)
[16:29:46] *** Joins: nomic (~nomic@185.217.117.111)
[16:31:16] *** Quits: vantage|work (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Quit: Leaving)
[16:31:41] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[16:32:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:34:14] *** Joins: stagas (~stagas@2a02:587:c4c7:f3eb:b9d6:575:b5e0:3bff)
[16:42:17] *** Joins: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com)
[16:47:29] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[16:49:12] *** Joins: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be)
[16:49:24] *** Joins: bqv (4d75ff82a9@198.108.77.17)
[16:49:48] *** bqv is now known as Guest6367
[16:54:54] <austincheney> ProfSimm, I prefer to avoid inheritance
[16:55:21] <austincheney> ProfSimm, the only time I have benefitted from inheritance is the one time you are not supposed to use it: to modify something you don't own
[16:55:46] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[16:55:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:56:48] <austincheney> ProfSimm, as for performance you will have to test those using a microbenchmark tool
[16:56:50] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae)
[16:57:04] <austincheney> I prefer https://jsbench.github.io/
[16:57:37] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[16:57:42] *** Joins: pmercado (~pmercado@186.107.37.71)
[16:58:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:00:13] *** Quits: JaredCE (~JaredCE@188.211.162.68) (Ping timeout: 240 seconds)
[17:01:30] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[17:01:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:09:43] *** Joins: optimist (~optimist@27.58.155.72)
[17:13:40] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[17:14:26] *** Quits: prodigius (~prodigius@75-163-174-136.clsp.qwest.net) (Quit: Leaving)
[17:15:35] *** Joins: morpho-pie (81f0417332@198.108.77.17)
[17:16:36] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[17:18:44] *** Joins: summersault (~summersau@179.221.251.36)
[17:20:52] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[17:20:56] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[17:21:07] <OnkelTem> blueagain: customer is thinking now on what do they really need. Thanks for trying to help!
[17:21:21] <OnkelTem> Folks. What is vite? Is it worth switchin on?
[17:21:33] <ProfSimm> austincheney: from architectural PoV I don't use inheritance either, but the problem is V8 and friends use the prototype chain as 'hints' to optimize hidden classes.
[17:21:36] <ProfSimm> austincheney: I'll test
[17:22:08] <ix> morpho-pie: oh you made it
[17:22:21] <ix> Ask questions here
[17:22:32] <ix> Its a JS channel
[17:22:48] <ix> They'll know shit
[17:25:02] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:25:14] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[17:25:26] *** Joins: summersault (~summersau@179.221.251.36)
[17:25:33] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[17:26:25] <ProfSimm> austincheney: how does this thing work, is the first function I write executed?
[17:27:21] <ProfSimm> No it just calls the results by the first function it seems
[17:27:23] <austincheney> ProfSimm, put your first test sample in the box labeled "1".  Then click the "add code snippet" button to add another test sample
[17:28:01] <ProfSimm> austincheney: no memory I see
[17:28:09] <austincheney> then when you execute the tests it will execute them as quickly as possible to output a measurement of operations per second
[17:28:11] <ProfSimm> only ops/sec
[17:28:35] <austincheney> memory is irrelevant because JS is garbage collected
[17:28:44] <austincheney> if you want memory precision use Rust
[17:28:50] <Decker> I wish that was true
[17:28:59] <ProfSimm> austincheney: well I mean memory before it's freed naturally
[17:29:08] <ProfSimm> austincheney: i.e. while it's used
[17:29:09] <austincheney> if you want to measure memory you will have to use Node and write your own test harness
[17:29:24] <austincheney> Node will output memory consumption but its high variable
[17:29:29] <austincheney> highly
[17:29:42] *** Joins: pulse (~pulse@user/pulse)
[17:29:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:29:58] <ProfSimm> Hm strange, constructors are *slower* in my test
[17:30:12] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:a0e8:161:d037:4cae) (Ping timeout: 252 seconds)
[17:30:16] <ProfSimm> This may be because I init via "this.foo = bar' instead of directly setting object prop
[17:30:25] <ProfSimm> Or V8 optimizes for both patterns
[17:30:53] *** Joins: ggnoredo (~user@212.98.236.50)
[17:31:59] <austincheney> ProfSimm, it could be due to reference resolution.  The way it works in the language is that variables are lexically resolved first and then once the scope chain is exhausted the prototype chain is traversed.  "this" outside of arrow functions refer to that which called the containing function which is likely slower
[17:32:07] <austincheney> then there are optimizations on top of all of that
[17:32:30] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:32:49] *** Quits: stdInOut (~stdInOut@user/stdInOut) (Quit: Leaving)
[17:33:01] *** Quits: shkurata (~shkurata@ptr-8riebugsz1piq13k2pd.18120a2.ip6.access.telenet.be) (Quit: Leaving...)
[17:33:41] <ix> morpho-pie: ping
[17:33:48] <ix> morpho-pie: scroll up
[17:34:04] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[17:34:44] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[17:36:45] <ProfSimm> austincheney: interesting https://i.imgur.com/VGUivdm.jpg
[17:36:57] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[17:38:15] *** Quits: ggnoredo (~user@212.98.236.50) (Remote host closed the connection)
[17:40:41] <austincheney> 26 ops per second is incredibly slow
[17:41:35] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:41:43] <austincheney> for example static dom methods in Chrome top out at around 45 million ops/s in chrome and in the billions in firefox
[17:41:48] <ProfSimm> austincheney: updates https://i.imgur.com/nhbFWsz.jpg
[17:42:20] *** Joins: onosendi (~onosendi@user/onosendi)
[17:42:26] <ProfSimm> austincheney: well first, that's million items pushed in an array
[17:42:34] <ProfSimm> austincheney: second, maybe I'm running on a potato
[17:42:37] <austincheney> ah, good point
[17:42:59] <ProfSimm> Well my computer isn't that slow, but maybe yours is faster :D
[17:43:02] <austincheney> yeah, the long array most likely explains the smaller results
[17:43:02] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[17:43:06] <onosendi> Can't push to get, weird. [remote rejected] master -> master (Internal Server Error)
[17:43:11] <onosendi> git, rather.
[17:43:40] <austincheney> ProfSimm, I have spent a lot of time working with JavaScript performance and there 3 areas of hardware that are separately critical.
[17:43:44] <ProfSimm> austincheney: I'm pleasantly surprised the cleanest pattern is fastest, but I suspect it may take more mem
[17:43:54] <austincheney> the gpu is all that matters for anything visual in the browser
[17:44:03] *** Joins: summersault (~summersau@179.221.251.36)
[17:44:28] <austincheney> for memory dependent tasks, such as the DOM, all that matters is memory speed and bus speed (it really doesnt matter how fast the cpu is)
[17:45:00] <austincheney> cpu speed is important for arithmetic, but the need here is rare compared to the other two hardware conditions
[17:45:48] *** Joins: JaredCE (~JaredCE@188.211.162.68)
[17:46:20] <blueagain> onosendi: is it your personal git server? because error 500 sounds like an issue on the server
[17:46:40] <onosendi> blueagain: nah, it's github. Tried with multiple repositories.
[17:47:31] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 256 seconds)
[17:47:51] <blueagain> maybe github's acting up
[17:49:00] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[17:50:35] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[17:51:07] *** Joins: Arisco (~ckmptnml@201-11-17-238.user3p.brasiltelecom.net.br)
[17:51:47] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[17:51:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:52:45] <ProfSimm> austincheney OK I decreased the count of loops on all tests and suddenly the "class" one is WAY slower. WTf :)
[17:53:06] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:54:22] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[17:54:45] *** Joins: c_ (~c@92.40.197.84.threembb.co.uk)
[17:55:32] *** Joins: voltage_ (voltage@user/voltage)
[17:56:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[17:58:39] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:58:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:01:02] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[18:01:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:02:13] *** Joins: thojanssens (~thojansse@182.232.2.140)
[18:02:13] <ProfSimm> Can someone explain WTF is wrong with the last one making it so slow: https://i.imgur.com/C4oveNz.jpg
[18:03:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:03:07] <ljharb> ProfSimm: why are you using both class fields and constructor assignment
[18:03:20] <ljharb> ProfSimm: remove the class fields and they should be more the same
[18:03:31] <ProfSimm> ljharb: with the hope of not varying the 'shape' of the object during construction
[18:03:40] <ljharb> ok, fair
[18:04:03] <ljharb> very bizarre the last one is so much slower
[18:04:16] <ljharb> of course, microperf tools like this are a toy and should never be used to make coding decisions
[18:04:35] <Decker> do the tests in a different order; maybe the gC from previous runs is catching up at the end
[18:05:27] <ProfSimm> ljharb: surprise: https://i.imgur.com/dcHiiHU.jpg
[18:06:42] <ljharb> why only 33 runs sampled
[18:06:46] <ljharb> they should all have thousands
[18:07:32] <ljharb> but again, it doesn’t matter. Performance can only be reasonably measured of the entire program at once, because of all the JIT optimizations you can’t predict or plan for
[18:07:52] <ljharb> always do the cleanest thing - it’s easier to make clean code fast than to make fast code clean.
[18:08:39] <ProfSimm> ljharb: it's only 33 because it's so slow. Also it loops 10k times per test
[18:08:40] <since_> ProfSimm: what are the result units?
[18:08:49] <since_> is it average?
[18:09:14] <since_> i want the min time :D
[18:11:32] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[18:12:26] <ljharb> it’s surprising the gap is so large, but not that it’d be the slowest - new syntax always is slower than old, because optimizations take time
[18:13:07] <since_> ProfSimm: what tool do you use? i want to play aswell :D
[18:15:05] <since_> also how are "ops" estimated?
[18:15:33] <ProfSimm> ljharb: https://jsbench.github.io/ but it wants to link my github account to save the sample and I don't wanna
[18:16:20] <ProfSimm> oops since_ ^
[18:16:27] <since_> ProfSimm: can you pastebin it :D?
[18:16:35] <ProfSimm> 1 min
[18:16:38] <since_> thanks
[18:17:09] <ProfSimm> https://pastebin.com/aEHX05Si
[18:17:12] <ProfSimm> since_: ^
[18:19:01] *** Quits: drew (~drew@user/drew) (Ping timeout: 240 seconds)
[18:19:20] <onosendi> Anyone else having issues pushing to git? I hope it's not just me :/
[18:19:25] <onosendi> github
[18:19:42] *** Quits: Senz (whoa@ool-ad0244e9.dyn.optonline.net) (Read error: Connection reset by peer)
[18:20:24] *** Joins: Senz (whoa@ool-ad0244e9.dyn.optonline.net)
[18:24:06] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Ping timeout: 252 seconds)
[18:25:28] *** Quits: optimist (~optimist@27.58.155.72) (Quit: Leaving...)
[18:26:45] <since_>  i dont trust that benchmark tool. when leaving away the instantiation loop i get Inf ops/sec for the function one and 80k ops/sec for the class one
[18:27:33] <ljharb> stagas: not authed again, put it in your client
[18:28:48] <stagas> ProfSimm: what you're using is prob not using native class defined properties because i run it and get the same results, except the literal which is sign. faster https://i.ibb.co/FJGVLFy/image.png here is the code https://pastebin.com/HkNidj64
[18:29:56] <ljharb> ProfSimm: what browser are you running it in?
[18:30:00] <ljharb> that definitely matters
[18:32:49] <ProfSimm> ljharb: Chrome.
[18:32:54] <ProfSimm> ljharb: Windows
[18:32:57] <ProfSimm> odd
[18:33:02] <ljharb> Which chrome tho
[18:33:09] <ljharb> no browser is evergreen
[18:33:21] <ProfSimm> Slightly out of date, I'll update it (running web client, so I'll leave now)
[18:33:31] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:33:45] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:35:22] <ProfSimm> I get the same results. Class with properties is slow as f***
[18:35:28] <ProfSimm> Odd.
[18:37:03] <stagas> ProfSimm: it probably won't matter at all irl unless all your app is doing is creating literal objects with constants, if you introduce Math.random() to the arguments the gap closes by half
[18:40:22] *** Joins: sa0 (~sa0sin@88.120.82.205)
[18:41:16] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[18:42:22] <ProfSimm> stagas: it closes but does it close because of the objects, or because Math.random takes up CPU in the loop
[18:42:59] <ProfSimm> stagas: anyway I make and destroy lots of objects in a parser, so this matters. Also honestly I prefer to make objects as literals. it's cleaner.
[18:43:04] <ProfSimm> stagas: inheritance is a mess.
[18:43:25] <ProfSimm> stagas: luckily we have interfaces in TS to close the type gap
[18:44:27] *** Joins: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7)
[18:46:15] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:47:30] *** Quits: average (~average@user/average) (Read error: Connection reset by peer)
[18:53:13] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[18:53:36] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[18:58:54] <stagas> ProfSimm: literals then. though bench with some more context according to the use case, because the gains you get there might deoptimize something else elsewhere, you don't know
[18:59:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:00:10] <stagas> though unlikely, literals are going to be faster it seems that's the case
[19:02:46] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[19:02:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[19:03:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[19:04:01] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:05:18] <ProfSimm> stagas: yes you're right
[19:05:54] <ProfSimm> stagas: I'm surprised they are, because I thought prototypes are to the V8 as 'hey i know that, I can reuse it for each object'. Apparently not quit
[19:05:56] <ProfSimm> quite
[19:08:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:09:12] *** Quits: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:16:13] *** Joins: zebrag (~chris@user/zebrag)
[19:17:04] *** Joins: drew (~drew@user/drew)
[19:17:35] *** Joins: l__q (~modinfo@user/modinfo)
[19:20:59] *** Joins: pulse (~pulse@user/pulse)
[19:21:37] <stagas> ProfSimm: when you introduce some more things in the constructor body then it almost flattens https://i.ibb.co/k0fpszF/image.png https://pastebin.com/QJvYUejL
[19:22:05] *** Quits: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:22:32] <stagas> ProfSimm: so prob the (a,b,c) => { a, b, c } is very optimized to simply copy the arguments object as it is, when it's not just copying the arguments to the literal then it has some more work to do
[19:22:46] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:24:03] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[19:24:56] *** Joins: silverdust (~silverdus@user/silverdust)
[19:25:07] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:25:26] <stagas> but you're going to have some benefit overall if you're dealing in the perf margins like in a parser, so even 5% gain is something, 5 here 5 there
[19:26:03] <stagas> as long as it doesn't mess with your ability to reason with the code afterwards, which is more important imho than perf
[19:27:31] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:30:47] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:d026:fbc:9f82:6678) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:34:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[19:37:06] *** Joins: drew (~drew@user/drew)
[19:38:45] *** Joins: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:40:52] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[19:44:14] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[19:49:26] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[19:56:19] *** Joins: terminalpusher (~terminalp@2a01:586:abfb:1:31dc:a4f3:420d:5622)
[19:58:04] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[19:58:12] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:58:43] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[19:59:57] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[20:00:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:01:17] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (Quit: ZNC - https://znc.in)
[20:01:35] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[20:01:54] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[20:03:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:06:18] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:08:46] *** Quits: dimi1947 (~dimi1947@ppp037153164084.access.hol.gr) (Quit: Leaving)
[20:10:19] *** Joins: thiras (~thiras@user/thiras)
[20:10:21] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[20:10:36] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[20:10:52] <ljharb> gurkenglas: you need to auth with nickserv for non-ops to see what you say; see the last link in the topic
[20:12:34] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[20:13:24] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[20:14:13] *** Joins: src (~src@user/src)
[20:16:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62) (Read error: Connection reset by peer)
[20:17:00] *** Joins: p-i- (~Ohmu@2403:6200:8978:d82d:89c0:e177:c2f7:c9a9)
[20:18:08] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[20:19:58] <gurkenglas> ljharb: Thanks. When I find code that looks like this https://pastebin.com/raw/V1kTpFxn in Firefox's DevTools->Debugger, is there some tool that'll make it more readable, such as by moving the (used only once) definition of n(2840) to the place it's used?
[20:23:19] *** Joins: stdInOut (~stdInOut@user/stdInOut)
[20:24:18] <theskillwithin> sourcemaps
[20:25:28] <ljharb> gurkenglas: no, that's a webpack bundle, and i'm not aware of anyone who's made a tool to make those more readable. if the site doesn't provide source maps, you're largely SOL.
[20:26:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:29:30] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 252 seconds)
[20:40:47] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[20:45:27] *** Quits: Junxter (~Junxter@222.94.37.130) (Ping timeout: 252 seconds)
[20:46:21] *** Quits: OhTheCode (~OhTheCode@59-102-101-124.tpgi.com.au) (Read error: Connection reset by peer)
[20:46:49] *** Joins: OhTheCode (~OhTheCode@59.102.101.124)
[20:51:32] *** Quits: JaredCE (~JaredCE@188.211.162.68) (Ping timeout: 240 seconds)
[20:54:12] *** Quits: clamiax (~clamiax@net-109-116-207-140.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[20:56:47] *** Joins: trevors (~trevors@user/trevors)
[20:57:54] *** Quits: aLeSD_ (~aLeSD@91.126.33.194) (Remote host closed the connection)
[21:00:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:01:02] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 240 seconds)
[21:02:16] *** Joins: Betal (~Betal@user/betal)
[21:02:46] *** Joins: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:03:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:04:24] *** Quits: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:07:58] *** Joins: qswz (~caub@89-80-20-125.abo.bbox.fr)
[21:08:23] <qswz> what's best practice if I want to log possibly a large array in case of errors?
[21:08:41] *** Quits: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b) (Ping timeout: 256 seconds)
[21:08:43] <qswz> then I'm using papertrail to inspect that data
[21:08:52] <qswz> but doesn't look ideal
[21:09:07] <qswz> should I try to send an email, or save that to s3 instead?
[21:09:45] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:12:05] <austincheney> qswz, if the data is both large and iterable the best answer is generally always to write to a database
[21:13:39] <qswz> well nvm guys, for privacy reasons as well, we won't do it
[21:14:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[21:14:27] *** Quits: thojanssens (~thojansse@182.232.2.140) (Read error: No route to host)
[21:15:38] <austincheney> qswz, there are two new technologies coming that will solve for privacy: decentralization (a couple of years away) and new storage hardware that is persistent yet executes as fast as ram (still about 6 years away)
[21:16:09] <austincheney> those two will be highly disruptive because there will be less value in cloud environments or enterprise storage
[21:16:33] <qswz> we're 100% cloud
[21:17:01] <austincheney> then by the end of decade (possibly) that may become an expensive liability
[21:19:53] <systemfault> Somebody should ask the companies in Russia what they think of the Cloud at the moment,.
[21:20:14] <qswz> russia is going under ground
[21:20:30] <FlorianBad> Let's say I'm building a list library, meaning that it will show a table of items e.g.. If there are 100K items (rows) I need to find a way to deal with that (without splitting in multiple pages). Would that be a good practice to do like an infinite scrolling where I keep the number of row elements to 300 max e.g. so as the user scrolls down I
[21:20:31] <FlorianBad> remove the first elements? (and vice versa when scrolling back up)
[21:21:03] <qswz> infinite scroll sucks
[21:21:14] <austincheney> FlorianBad, I strongly recommend pagination for usability
[21:21:19] <austincheney> users don't care for long lists
[21:21:21] <qswz> I mean infinite load
[21:21:31] <qswz> but a virtualized table yes you could
[21:22:01] <qswz> pagination is restful, saner
[21:22:05] <FlorianBad> qswz: what do you mean by "virtualized"?
[21:22:21] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[21:22:33] <austincheney> if you believe your users are willing to scroll through thousands of records I recommend usability testing with actual clientel to verify
[21:23:10] <FlorianBad> ok, so of course for pagination we're talking about an "illusion" of pages, so the actual data might already be loaded in some objects, and then displayed as pages, right?
[21:23:50] <qswz> FlorianBad: https://bvaughn.github.io/react-virtualized/#/components/List
[21:23:50] <austincheney> FlorianBad, yes, the appearance of pagination is better than none at all
[21:24:34] <qswz> this lib isoptimized to only render visible rows
[21:25:16] <farn> (there is a rewrite of react-virtualized called react-window)
[21:25:26] <qswz> ^ good point
[21:25:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:26:03] <qswz> https://react-window.vercel.app/#/examples/list/fixed-size
[21:26:32] <FlorianBad> qswz: hmm, that virtualized thing is exactly what I was talking about when saying "similar to infinite scrolling"
[21:26:41] <FlorianBad> do you see anything wrong with the virtualized thing?
[21:29:39] <austincheney> the react-window demos look awesome, but I don't think it solves for the primary usability concern.  Users generally aren't willing or wanting to look at more than 20 most relevant results
[21:30:09] <austincheney> the users that want large data tend to do in things like spreadsheets
[21:30:35] *** Quits: Enissay (~Enissay@user/enissay) (Quit: WeeChat 3.0)
[21:31:30] *** Joins: Enissay (~Enissay@user/enissay)
[21:31:59] *** Quits: silverdust (~silverdus@user/silverdust) (Quit: leaving)
[21:32:09] *** Joins: gavinhungry (~gavin@user/gavinhungry)
[21:32:18] *** Joins: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7)
[21:32:30] <farn> there are technical downsides to virtualization. one is that ctrl+f doesn't work
[21:33:24] <farn> https://github.com/bvaughn/react-window/issues/305
[21:33:27] *** Joins: silverdust (~silverdus@user/silverdust)
[21:33:38] <farn> I guess accessibility is questionable for similar reasons
[21:33:49] *** Quits: gavinhungry (~gavin@user/gavinhungry) (Client Quit)
[21:34:32] *** silverdust is now known as josephrexme
[21:34:41] *** Quits: terminalpusher (~terminalp@2a01:586:abfb:1:31dc:a4f3:420d:5622) (Remote host closed the connection)
[21:36:18] *** JoelJoel is now known as Joel
[21:36:55] *** Joins: KevinX (~KevinX@user/KevinX)
[21:37:17] *** Quits: josephrexme (~silverdus@user/silverdust) (Client Quit)
[21:38:24] <FlorianBad> austincheney: ok, but if I was doing this anyway in some specific cases then that would be the way to do it, right?
[21:38:59] <FlorianBad> farn: yeah I thought about the CTRL+F, but if there's a search tool right above the list then... ;)
[21:39:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[21:40:01] <FlorianBad> So this react virtualized/window library, all it does is create/remove elements as we scroll, correct? There's no other magic involved?
[21:42:15] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[21:42:15] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[21:42:15] *** Joins: average (~average@user/average)
[21:42:35] <qswz> austincheney: can be a more specific app
[21:42:41] <qswz> scientific data, ..
[21:42:57] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[21:43:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[21:46:40] <FlorianBad> I'm wondering how it deals with the scroll-bar that would get messed up when we add/remove elements, right? Or is it because all elements are on average the same approximate height so we don't notice?
[21:46:58] <FlorianBad> Or is this scroll bar an illusion? :)
[21:47:52] <FlorianBad> I'd be tempted to put an element before and another after to fake the height of the non-rendered elements, but it would be difficult to predict their exact height
[21:48:33] <farn> react-window positions the visible elements absolutely within a large scrollable container
[21:48:51] <qswz> yea, just blank space around
[21:48:59] <qswz> I imagine
[21:49:08] <farn> yup
[21:49:16] <FlorianBad> hmm, ok I see
[21:49:54] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[21:49:57] <FlorianBad> so then the height of the blank space is ESTIMATED, right? Because it's pretty much impossible to predict accurately without rendering
[21:50:15] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:51:13] <farn> I think the sizes of the elements have to be known beforehand, they can't be dynamic
[21:51:31] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Read error: Connection reset by peer)
[21:51:36] <banana_> wait
[21:51:39] <farn> they don't have to be equal though, see Variable Size List
[21:51:46] <banana_> I did something similar
[21:52:00] <banana_> you could render it but make it hidden
[21:52:03] <FlorianBad> oh I see, the "medium-size", "large-sized", etc. right?
[21:52:07] <banana_> and then get it's computed height
[21:52:22] <qswz> I'm stocked in bananas
[21:52:38] <FlorianBad> banana_: yeah but the whole point is to be able to handle 100K rows smoothly...
[21:52:47] <qswz> that with avocadoes, that's my fuel
[21:52:50] <banana_> oh just chimed in randomly
[21:52:59] <banana_> thought I came in at the right time
[21:53:14] *** Quits: c_ (~c@92.40.197.84.threembb.co.uk) (Read error: Connection reset by peer)
[21:53:15] <qswz> you came just for digestion
[21:53:18] <qswz> too late
[21:53:30] <banana_> I thought you were talking about how to know an elements height, when styles are applied without rendering it first
[21:54:09] <qswz> they just average the ones from visible
[21:54:12] <banana_> qswz: it's st patty's maybe im drunk?
[21:54:12] <qswz> and estimate I imagine
[21:54:13] <FlorianBad> banana_: we're talking about this: https://bvaughn.github.io/react-virtualized/#/components/List
[21:54:22] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[21:54:39] <qswz> I get drunk from fruit overdose as well
[21:54:56] <qswz> https://react-window.vercel.app/#/examples/list/fixed-size
[21:55:03] <qswz> more recent
[21:55:07] <FlorianBad> qswz: yes that's what I would do, because if that's wrong by a tiny bit but the scroll position is adjusted so things don't jump around, then no one will notice that the scroll bar size is not perfect
[21:55:51] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[21:56:30] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:57:05] <farn> it's not just about the scroll bar though. when the user scrolls somewhere in the middle of the list, you have to know exactly which elements to render, otherwise I imagine you'd get really weird behavior when scrolling
[21:57:44] <farn> I'm not sure but I don't think there is any estimation happening here
[21:58:02] <banana_> ok this convo started as a UX question
[21:58:28] <banana_> and yeah no idea about that
[21:58:28] <banana_> virtualized thing
[21:58:32] <banana_> my bad
[21:59:02] <ljharb> morpho-pie: you need to auth with nickserv for non-ops to see what you say; see the last link in the topic
[21:59:42] <banana_> id be pissed if I had to scroll for find a user in a huge list
[21:59:59] <banana_> like IRC when you join a channel
[22:00:24] <banana_> to find*
[22:00:29] <qswz> fortunately rooms don't have 30k users
[22:00:35] <qswz> yet
[22:00:41] <banana_> they don't?
[22:00:49] <banana_> wow
[22:01:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:02:07] <farn> if you're looking for a specific one, there should be a search/filter feature for that
[22:02:26] <farn> but if a web-based IRC client wanted to allow you to scroll back in the channel log, this could be a way to do that
[22:03:11] *** Joins: drew (~drew@user/drew)
[22:03:44] <qswz> I had 0.06 BTC sleeping since years
[22:03:59] <ljharb> i'll say that overall, if you have more than one scrollbar, or if the sole scrollbar isn't attached to the window, you've probably designed a terrible UI
[22:04:04] <qswz> was 200€ intially, now 2k+ hah
[22:04:09] <FlorianBad> :)
[22:04:16] <qswz> time to withdraw
[22:04:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:04:33] <qswz> because I hate the bitcoin thing, it's polluting
[22:04:43] <qswz> or swith to ethereum
[22:04:57] <ljharb> ethereum is no better than bitcoin in that regard
[22:05:03] <qswz> oh
[22:05:04] <ljharb> it's proof of work, same same
[22:05:11] *** Joins: jazzy (~jaziz@user/jaziz)
[22:05:13] <qswz> I'll buy some treecoins so
[22:05:19] <ljharb> you'd need a proof of stake currency to minimize that
[22:05:35] <ljharb> lol if that works then you could just have bitcoin and buy carbon credits
[22:05:38] <qswz> fruitcoins, the proof of work is your poop
[22:05:38] <ljharb> same rationale :-p
[22:05:42] <systemfault> We should stop writing JS and switch to C++ because it's not good for the environment.
[22:05:58] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:b07c:9a96:dc65:7346)
[22:06:10] <qswz> nah, JS is eeficient
[22:06:27] <banana_> single-thread
[22:07:02] <systemfault> qswz: We don't have the same definition of efficient.
[22:07:28] <banana_> how is JS bad for the environment
[22:07:44] <qswz> presumbly heats more your CPU
[22:07:49] <ljharb> needless to say, all these arguments are dumb, a) people's ideas of what harms the environment most are often way off, b) individual action will not have a material impact.
[22:07:51] <qswz> but I think it's not
[22:07:54] <KevinX> If you're concerned about polluting the environment, you should also not reproduce
[22:08:14] <qswz> I check that
[22:08:18] <systemfault> Less efficient programs -> worse usage of the hardware -> more machines -> more electricity
[22:08:21] <qswz> more by default tho
[22:08:37] <ljharb> you - and a massive critical mass of people - would have to avoid eating farmed meat, and anything that consumes a ton of water, which includes any almond or quinoa products, for example, to make an impact
[22:09:30] <banana_> and yeah pollution being bad I think is relative to what planet you live on
[22:09:32] <banana_> right?
[22:09:38] <ljharb> and, that would have to happen everywhere in the world. eg, if literally everyone but china was ecologically perfect, and china stayed the same, we'd still all be fucked in approximately the same amount of time
[22:10:13] <systemfault> ljharb: I've always seen you as more idealist, that's a pretty down to earth way of seeing it.
[22:10:21] <ljharb> systemfault: i contain multitudes
[22:10:22] <systemfault> (It's my point of view)
[22:10:36] <ljharb> systemfault: i also still rigorously recycle
[22:10:59] <qswz> recycling is kind of myth
[22:11:05] <qswz> take plastics for example
[22:11:17] <qswz> it recylces to another class
[22:11:27] <qswz> only 2 iterations pollisible
[22:11:31] <qswz> possible*
[22:11:42] <systemfault> We're been recycling aluminum and glass since forever...
[22:11:50] <qswz> ex: bottle -> thicker thing like a bin
[22:11:53] <systemfault> But you took plastic, the worse one.
[22:12:07] <qswz> and recycling use a lot of energy and resources
[22:12:10] <banana_> littering's bad because it makes your environment look less classy
[22:12:11] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:12:29] <banana_> some animals die but they were going to die anyway
[22:12:33] <qswz> best thing is avoid plastics as much as possible, I never plastic wrapped food
[22:12:36] <qswz> buy*
[22:12:42] <ljharb> qswz: using energy is fine. it's producing energy that's a problem
[22:12:52] <systemfault> qswz: I also try to avoid plastic when possible...
[22:12:54] <ljharb> primarily because we all were timid little children about nuclear power
[22:12:55] <banana_> qswz: lowers testosterone?
[22:12:58] <qswz> you're playing on words
[22:13:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: WeeChat 3.3)
[22:13:14] <ljharb> qswz: no, i'm using more precise wording
[22:13:23] <qswz> right
[22:13:30] <theseb> Odd question perhaps....I'm trying to understand an architecture diagram and there is a component labeled "node services".  Do you think that means microservices built with node.js?  Is node.js typically used to build microservices?
[22:13:31] <systemfault> ljharb: Nuclear scared a whole generation of people... once "they're gone", nuclear could possibly become the norm
[22:13:33] <ljharb> if we had nuclear power plants, we could replace fossil fuels entirely, and then "using energy" wouldn't harm the planet at all
[22:13:49] <ljharb> systemfault: indeed, there's tons of things we could get away with if everyone over <my current decade> died off
[22:13:54] <systemfault> Heh.
[22:14:02] <qswz> theseb: could be, services are just servers
[22:14:14] <qswz> servers with more vice
[22:14:20] <banana_> what about the nuclear waste? or is that not actually a thing
[22:14:32] <qswz> nuclear waste is no issue
[22:14:38] <ljharb> banana_: it's not a thing
[22:14:53] <qswz> everything is radioactive
[22:15:05] <banana_> what about that shit that happened in japan
[22:15:24] <qswz> it as overstated
[22:15:26] <qswz> was*
[22:15:48] <systemfault> Was it though?
[22:15:58] <ljharb> i mean, it was radiation, sure
[22:16:11] <ljharb> nobody's saying it's safe. but it's objectively much safer than fossil fuels
[22:16:13] <systemfault> Or we'll actually see the effects in 20 years... malformed babies, cancer and other problem
[22:16:33] <ljharb> add up all the accidents digging for crude, transporting, refining, transporting, storing, dispensing
[22:16:52] <ljharb> systemfault: maybe in that particular prefecture, but the amount of radiation isn't high enough to affect anyone outside it
[22:16:55] <qswz> ^
[22:17:13] <ljharb> and i happily eat slightly radioactive fish caught in the pacific ocean. a sprinkle of rads won't hurt anyone
[22:17:18] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[22:17:51] <qswz> might cause bit shifts tho?
[22:17:52] <banana_> ok you eat first
[22:18:01] *** Joins: justAstache (~justache@user/justache)
[22:18:22] <banana_> so like tuna has that
[22:18:27] <qswz> isn't pacific where all plastics end uptoo?
[22:18:43] <ljharb> qswz: they end up in every ocean
[22:19:01] <qswz> yea but they concentrate there a bit more
[22:19:30] <qswz> big fish accumulate more pollution/mercury and shit
[22:19:59] *** Joins: gehn (~gehn@user/gehn)
[22:20:17] <KevinX> isn't the bit shift thing actually legit
[22:20:30] <qswz> from gamma rys tho
[22:20:37] <ljharb> from random cosmic rays, yes
[22:20:54] <qswz> does it go through my roof?
[22:21:31] <systemfault> I wonder if ECC memory really helps with something like that
[22:24:10] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:b07c:9a96:dc65:7346) (Quit: Textual IRC Client: www.textualapp.com)
[22:24:51] *** Quits: iomari891 (~iomari891@197.210.76.112) (Ping timeout: 256 seconds)
[22:25:17] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:25:46] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:25:52] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Quit: Leaving)
[22:27:41] <sheetjs> for new (2022) code, is it better to implement node streams and use a wrapper for web or implement web streams and use a wrapper for nodejs?
[22:28:23] *** Joins: osXnut (~osXnut@77.125.126.151)
[22:28:26] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:29:21] <systemfault> Haha, been wondering the same thing last week...
[22:29:49] <qswz> why do you care about comat on node?
[22:29:53] <qswz> it's not browser
[22:29:59] <qswz> compat*
[22:31:12] *** Quits: Maali (~Toppin@e190017.upc-e.chello.nl) (Ping timeout: 250 seconds)
[22:31:56] <sheetjs> ideally, if its "just javascript", you could feed two birds with one scone
[22:32:41] *** Quits: konrados (~konrados@user-5-173-148-18.play-internet.pl) (Ping timeout: 250 seconds)
[22:32:56] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[22:33:02] <qswz> https://www.reddit.com/r/MapPorn/comments/td46s6/regional_difference_of_scone_pronunciation_in_the/
[22:33:05] *** Joins: konrados (~konrados@user-5-173-148-31.play-internet.pl)
[22:33:10] *** Joins: crashrep (~crashrep@user/crashrep)
[22:35:22] <KevinX> i'd say it like "cone"
[22:36:01] <sheetjs> https://www.lexico.com/definition/scone
[22:36:08] <sheetjs> There are two possible pronunciations of the word scone: the first rhymes with gone and the second rhymes with tone. In US English the pronunciation rhyming with tone is more common. In British English the two pronunciations traditionally have different regional and class associations, with the first pronunciation associated with the north of England and the northern working class, while the second is associated with the south and the middl
[22:36:08] <sheetjs> e class
[22:37:06] *** Quits: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:40:21] <sheetjs> back to the original point, qswz it is still desirable to write one implementation rather than two
[22:40:41] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[22:41:33] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[22:42:52] <systemfault> sheetjs: I wanted to assess the NodeJS web stream implementation before deciding(compared to standard node stream)... but I've been too lazy to do it.
[22:43:03] <systemfault> *assess the performance
[22:43:31] <systemfault> Web streams look nicer so I would like to use those everywhere.
[22:45:59] <qswz> sheetjs: oh sorry I misread your question. I think the latter,implement the latest tech, and wrap for older
[22:46:39] *** Joins: prodigius (~prodigius@75-163-174-136.clsp.qwest.net)
[22:47:07] <sheetjs> latest tech has been disappointing for performance as of late
[22:47:42] <sheetjs> its 2022 and doing a character code test for a string match is still faster than lowercase-equality
[22:49:04] <sheetjs> https://github.com/SheetJS/sheetjs/blob/master/bits/10_ssf.js#L15 this literally tests 7 character codes to see if it matches "general", about 3x as fast as string.slice(i, i+7).toLowerCase() == "general"
[22:51:09] <qswz> what about 3. white your own stream impl, that works most efficient and wrap for node and web streams
[22:52:09] <sheetjs> 4. write your own javascript engine and runtime
[22:52:36] <qswz> :p
[22:52:59] <sheetjs> after google's reticence to address performance issues around low-level operations, it's tempting
[22:53:00] <qswz> yea streaming is complex
[22:53:04] <qswz> backpressure and shit
[22:53:26] <qswz> it's like digestio
[22:54:48] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[22:57:28] <sheetjs> that and the lack of a sleep primitive
[23:01:26] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:01:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:01:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:01:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:03:18] <average> ljharb: hi, let's write some code together
[23:03:33] *** Joins: bambanxx (~bambanx@2800:150:106:1061:80a4:10eb:7bcc:ccd7)
[23:03:57] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[23:04:18] *** Joins: Maali (~Toppin@e190017.upc-e.chello.nl)
[23:04:26] *** Quits: stagas (~stagas@2a02:587:c4c7:f3eb:b9d6:575:b5e0:3bff) (Quit: Leaving)
[23:04:27] *** Quits: D4mned (~D1mned@212.101.234.101) (Read error: Connection reset by peer)
[23:04:42] *** Joins: stagas (~stagas@2a02:587:c4c7:f3eb:b9d6:575:b5e0:3bff)
[23:04:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:05:28] <KevinX> what kind of code?
[23:05:53] *** Joins: D4mned (~D1mned@212.101.253.149)
[23:06:13] <ljharb> average: can you stop with these creepy out-of-nowhere intros?
[23:06:33] <ljharb> and yes it's like "cone" unless you're a limey
[23:09:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[23:10:31] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:12:32] *** Quits: friend (~friend@user/friend) (Remote host closed the connection)
[23:26:23] <qswz> I'm cone to bed guys, too tired
[23:26:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:26:48] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[23:27:25] *** Quits: qswz (~caub@89-80-20-125.abo.bbox.fr) (Quit: leaving)
[23:28:46] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:29:49] <ljharb> groan
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:35:18] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:36:08] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[23:37:42] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[23:38:58] <hyper_dave> I have list of words in csv which I want to find and extract them in a text file. What would be an elegant implementation of it?
[23:40:35] <hyper_dave> The list of words is list of skills and the text would be a job description
[23:40:46] <hyper_dave> I want to extract skills from job description
[23:42:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:43:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:44:40] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:46:36] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[23:47:16] <austincheney> hyper_dave, use a csv parser
[23:47:27] <austincheney> I am sure you can find one off NPM or just write your own
[23:47:49] <austincheney> CSV is perhaps the most trivial formal grammar to write a parser for
[23:49:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:50:36] <farn> I think the CSV file just provides the keyword list and the goal is to find those keywords in another file that has the job description
[23:50:46] <farn> I'm just not sure what "extract" means here
[23:51:24] <Decker> split("\n").split(",") done :)
[23:51:51] <austincheney> nope, that won't work if any index contains a quoted string or an escaped comma
[23:52:07] <Decker> oh .map( .split ) blah
[23:53:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:53:39] <austincheney> the task sounds like a job interview leet code homework assignment
[23:53:58] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 250 seconds)
[23:54:24] <farn> n> const csv = `"first column","second, column",third column`; csv.split(",")
[23:54:25] <jellobot> (okay) [ '"first column"', '"second', ' column"', 'third column' ]
[23:54:42] <hyper_dave> The csv part is not the problem
[23:55:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:55:17] <hyper_dave> it is formatted like, "t1,t2,t3,t4..."
[23:55:49] <hyper_dave> I just want an efficient way to find out which of those words are in another string.
[23:56:11] <austincheney> hyper_dave, if you are working something an object like { "job_code_name": "job_description"};  You can dynamically access keys using array notation:   myObject[job_name];
[23:56:38] <Decker> .includes
[23:57:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:59:07] <hyper_dave> Okay let me give an example
