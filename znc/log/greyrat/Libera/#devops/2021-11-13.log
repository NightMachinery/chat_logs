[00:11:04] *** Joins: Brainium (~brainium@user/brainium)
[00:22:39] *** Joins: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net)
[00:26:55] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:27:27] *** Joins: X-Scale` (~ARM@46.50.4.208)
[00:29:08] *** X-Scale` is now known as X-Scale
[00:46:06] *** Joins: AsenMx (~AsenMx@user/asenmx)
[00:51:13] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 268 seconds)
[01:01:39] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:00:12] *** Joins: lilgopher (~textual@2601:249:8a00:6480:f08c:1939:78fd:78fa)
[02:01:49] <lilgopher> How is a standard way of implement automatic deployments for a repo with a few microservices in it? I was going to use ":latest" version in the k8s deployment files, and tag docker images with the last commit hash, but that wont work since "kubectl apply" wont deploy if it doesn't detect any changes in the yaml files. And also I've been reading SO and seems like it is not recommended to use ":latest" in the deployment files
[02:10:00] *** Joins: Harlin_ (~DonQixote@75-163-134-75.clsp.qwest.net)
[02:11:50] *** Quits: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net) (Ping timeout: 260 seconds)
[02:41:51] <kwilczynski> rawtaz: Knock, knock.
[02:44:51] <rawtaz> kwilczynski: this: https://www.youtube.com/watch?v=kWHOafRR0Sk&t=46s
[02:45:59] <kwilczynski> rawtaz: I am more like the cat on the backseat.
[02:46:00] <kwilczynski> :)
[02:46:24] <rawtaz> oh, not very interested? :)
[02:46:51] <kwilczynski> OK.
[02:46:58] <kwilczynski> Ready for some aksssion?
[02:47:28] <rawtaz> yeah but first i have a question
[02:47:33] <rawtaz> have you seen that movie (Home)?
[02:47:33] <kwilczynski> 42
[02:47:36] <kwilczynski> No.
[02:47:48] <rawtaz> ok (not, but that's a different story)
[02:47:54] <rawtaz> ok im here so shoot
[02:48:20] <kwilczynski> rawtaz: https://whereby.com/kwilczynski
[02:48:27] <kwilczynski> rawtaz: There ^
[02:48:36] <kwilczynski> This will be for your chown thing.
[02:50:34] <kwilczynski> rawtaz: Waittting.
[02:50:49] <rawtaz> what are you suggesting?
[02:50:57] <kwilczynski> Join.
[02:51:11] <rawtaz> yeah but are you intending to share your screen?
[02:51:15] <kwilczynski> Yes.
[02:51:32] <rawtaz> this can be interesting, considering the "call me maybe" video on youtube :-)
[02:51:45] <rawtaz> moment i gotta find a useful browser that whereby doesnt complain about :>
[02:51:50] <kwilczynski> I don't have Twitch account nor I am famous YouTuber, so video call have to do.
[02:52:08] <kwilczynski> Yeah. Bloody hell. Firefox not liked. I had to fire up Chrome the Data Miner.
[02:52:17] <kwilczynski> Used to work just fine.
[02:52:29] <rawtaz> just so you know, i don thave camera and mic though. does that make it not work? i dont know if you meant to just show your screen or "more"
[02:52:39] <rawtaz> yeah and it doesnt like old safari versions :D
[02:52:46] <kwilczynski> So we can't talk about the problem?
[02:52:53] <kwilczynski> :(
[02:52:53] <rawtaz> no im sorry
[02:52:59] <kwilczynski> *broken heart*
[02:53:05] <kwilczynski> OK.
[02:53:08] <rawtaz> unless we both know sign language :<
[02:53:19] <kwilczynski> But you have no camera.
[02:53:24] <rawtaz> sorry to disappoint, it was very kind of you to offer
[02:53:26] <kwilczynski> So ... no sign language.
[02:53:29] <kwilczynski> :)
[02:53:33] <rawtaz> DUH, lol
[02:53:38] <kwilczynski> OK then. Plan B.
[02:53:50] <kwilczynski> We shall spam here for the time being.
[02:53:59] <rawtaz> but have you been able to even reproduce the "issue"?
[02:54:08] <rawtaz> if you have then perhaps thats just the way its intended to work
[02:54:14] <kwilczynski> Haha.
[02:54:16] <kwilczynski> Well.
[02:54:18] <kwilczynski> So, OK.
[02:54:30] <kwilczynski> Patience, young Padawan.
[02:54:32] <kwilczynski> So...
[02:54:40] <kwilczynski> I will put some music then.
[02:55:35] <rawtaz> thats always a good idea :)
[02:55:38] <kwilczynski> https://www.youtube.com/watch?v=Eiijm2GhKAA
[02:55:42] <kwilczynski> Sounds appropriate.
[02:58:07] <rawtaz> yup why not
[02:58:26] <rawtaz> hm just for kicks i might run that when i do some Go programming tomorrow
[03:01:35] <rawtaz> so glad im finally done with three days of accounting. now it's weekend (even though i have to work)
[03:02:59] <kwilczynski> rawtaz: OK.
[03:03:06] <kwilczynski> rawtaz: Setting the scene: https://gist.github.com/kwilczynski/6199974b72dc582d7e90ea08565ee34a
[03:03:11] <kwilczynski> rawtaz: Looks about right, correct?
[03:04:05] <rawtaz> looking
[03:06:30] <rawtaz> looks to me like you havent set up the same two test users as i have, but im not sure that matters at all. seems like you created a baseline container
[03:06:44] <kwilczynski> OK.
[03:06:55] <kwilczynski> rawtaz: Testing: https://gist.github.com/kwilczynski/6199974b72dc582d7e90ea08565ee34a#file-gistfile2-txt
[03:07:02] <kwilczynski> rawtaz: Looks good?
[03:07:18] <kwilczynski> Pay close attention there. :)
[03:09:11] <rawtaz> i honetly dont understand why you are 1) not using the same specific test as i was - this suggests youre trying something else here, and 2) why you involve setuid and setgid
[03:09:43] <kwilczynski> It's the same test as yours.
[03:09:57] <kwilczynski> su needs to change EUID/EGID.
[03:10:03] <kwilczynski> I assume you know that.
[03:10:04] <kwilczynski> Anyway.
[03:10:18] <kwilczynski> https://www.man7.org/linux/man-pages/man2/chown.2.html
[03:10:38] <kwilczynski> https://www.irccloud.com/pastebin/psOghEOC/
[03:10:44] <kwilczynski> https://www.man7.org/linux/man-pages/man3/chown.3p.html
[03:10:52] <kwilczynski> https://www.irccloud.com/pastebin/xTI09Wne/
[03:11:30] <kwilczynski> https://unix.stackexchange.com/questions/16828/what-roles-do-dac-file-permissions-acl-and-mac-selinux-play-in-linux-file-s
[03:12:38] <kwilczynski> I hope it makes sense a little more now.
[03:15:23] <kwilczynski> To add, because of this "feature", there is sometimes possible to exploit ownership test if software is not written properly.
[03:15:40] <kwilczynski> There has been number of exploits against "chown" in the past.
[03:17:54] <rawtaz> i understand what https://www.irccloud.com/pastebin/psOghEOC/ is saying. so basically, the CAP_CHOWN is not at all about whether the chown command may be used at all or not, but rather it's about whether or not a process can do the *privileged* tyoe of chowning. but any user can always, at the very least, use chown in "unprivileged" ways.
[03:17:59] <rawtaz> type*
[03:18:48] <kwilczynski> If the DAC permission test will pass, then chown will be allowed.
[03:19:00] <kwilczynski> And in this case since you are changing a file that you own.
[03:19:07] <kwilczynski> Sharing group membership.
[03:19:31] <kwilczynski> Which is why removing the capability didn't work to stop the syscall as it did for root.
[03:19:34] <rawtaz> yeah. i was expecting that *any* use of chown would be forbidden when the CAP_CHOWN was dropped
[03:19:50] <kwilczynski> Sadly, that is a quirk of the DAC on Linux/UNIX/POSIX.
[03:19:57] <kwilczynski> Your file is your file. I suppose.
[03:20:43] <rawtaz> yep. i mean it isnt like that doesnt make sense at all. it's just not what i expected after reading the man page for capabilities (which has a very short description).
[03:21:07] <kwilczynski> No worries.
[03:21:19] <rawtaz> i also tried another thing, i tried to ping stuff, and could do that even though the cap for raw sockets wasnt there. that was surprising
[03:21:27] <kwilczynski> Any reason to do all these experiments?
[03:21:29] <kwilczynski> :)
[03:21:33] <kwilczynski> Just poking at things?
[03:21:41] <rawtaz> yeah a very silly but understandable reason
[03:22:26] <rawtaz> i have this container. i drop ALL caps in it. i then expect to NOT be able to do some things that i am otherwise able to do when caps are not dropped.
[03:22:54] <rawtaz> i figured chown would be a simple test. i also tried the ping which didnt give me the expected result. so i was starting to wonder if theres something wrong and caps arent dropped after all.
[03:23:19] <rawtaz> i still havent found a command that i have been able to verify works when caps are NOT dropped, and that doesnt work when caps ARE dropped.
[03:23:23] <rawtaz> (for a regular user)
[03:24:13] <rawtaz> CAP_NET_RAW is the one that i thought would "block" usage of ping
[03:24:45] <rawtaz> perhaps ping doesnt use a raw socket though, i dont know
[03:29:11] <rawtaz> here is another test i performed with all caps dropped: `strace touch foo` - i figured stracing processes would be forbidden when CAP_SYS_PTRACE is off. but it isnt, i can strace all i want.
[03:30:02] <rawtaz> however the man page for CAP_SYS_PTRACE says that it's for *arbitrary* processes, so i guess it might be something similar to the chown, that you can still strace your own processes. so effectively the cap restriction then only applies to privileged users that would otherwise be able to strace any process (even those they dont own)
[03:43:45] <rawtaz> kwilczynski: are you a very late nighter?
[03:48:12] <rawtaz> i really have to go to bed now, too little sleep lately
[03:48:28] <rawtaz> night, and thank you for looking at that thing earlier :)
[03:49:41] <rawtaz> oh btw, you mentioned chown vulnerabilities, is there anything in particular you had in mind?
[04:19:34] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[04:19:34] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[04:19:34] *** Joins: menace (~someone@user/menace)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:58:13] *** Quits: lilgopher (~textual@2601:249:8a00:6480:f08c:1939:78fd:78fa) (Quit: Textual IRC Client: www.textualapp.com)
[06:13:17] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[06:54:32] *** Joins: lilgopher (~textual@2601:241:8000:38f0:f03f:654:e769:8104)
[08:07:55] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[08:08:25] *** Quits: versa_gone (~versageek@32.215.132.28) (Quit: I was here, Now I'm gone.)
[08:08:55] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Client Quit)
[08:09:09] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[09:09:41] *** Quits: Chadwick (~IceChat95@user/chadwick) (Quit: It's a dud! It's a dud! It's a du...)
[09:50:11] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[09:50:31] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[11:58:20] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: leaving)
[12:00:26] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:14:50] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[12:48:59] *** Quits: Liothen (sid23291@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:35] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: shush (sid21719@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:50:00] *** Joins: Liothen (sid23291@helmsley.irccloud.com)
[12:50:25] *** Joins: shush (sid21719@tinside.irccloud.com)
[12:50:31] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[12:50:42] *** Joins: obviyus (sid415299@user/obviyus)
[12:52:10] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[12:56:24] *** Quits: kubblai (sid478659@fedora/kubblai) (Ping timeout: 256 seconds)
[12:56:58] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:58:10] *** Joins: obviyus (sid415299@user/obviyus)
[12:59:33] *** Joins: kubblai (sid478659@fedora/kubblai)
[15:36:10] *** Quits: CapitalistPunk (~Capitalis@liledevil.xs4all.nl) (Remote host closed the connection)
[15:41:40] *** Joins: CapitalistPunk (~Capitalis@liledevil.xs4all.nl)
[16:43:29] *** Quits: zacts (~zacts@user/zacts) (Quit: leaving)
[18:01:33] *** Joins: phost (~phost@112.84.37.188.rev.vodafone.pt)
[19:12:32] *** Quits: inflatador (~inflatado@user/inflatador) (Quit: ZNC 1.8.2 - https://znc.in)
[19:14:00] *** Joins: inflatador (~inflatado@user/inflatador)
[19:37:36] *** Quits: phost (~phost@112.84.37.188.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:08:56] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[20:16:00] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:44:21] <rawtaz> kwilczynski: poppin' that music of yours :3
[20:44:42] <kwilczynski> ;)
[20:46:59] <kwilczynski> rawtaz: To answer your question: due to my illness I can't sleep sometimes.
[20:47:51] <kwilczynski> In terms of ptrace(), then it's similar to DAC for fiels. But not quite the same.
[20:48:57] <kwilczynski> As ptrace() can be used to inject code, access virtual address space of other processes (it has special provisions in the kernel to do that) and also allows to turn opcodes directly (this is how debugger is implemented).
[20:49:39] <kwilczynski> The whole security model of Linux is actually quite fascinating and it's more than just Unix permission model and some POSIX attributes.
[20:50:01] <rawtaz> indeed, i realize that. i never delved into it that much before
[20:50:17] <kwilczynski> When you look into things like IOMMU, VFIO and such.
[20:50:25] <kwilczynski> Where things are platform dependent.
[20:50:31] <rawtaz> kwilczynski: do you know of any simple test command i can use that for a regular user would work fine when caps are NOT dropped, and that would fail when caps ARE dropped?
[20:50:33] <kwilczynski> Then it's a heat twister.
[20:50:46] <rawtaz> yeah. and i mean the last decade or so it's gotten much more complex
[20:50:59] <kwilczynski> head*
[20:51:41] <kwilczynski> rawtaz: Not a command per se. Well maybe capsh?b
[20:52:21] <kwilczynski> But things like SELinux can perhaps enforce this sort of things for a specific context
[20:52:22] <rawtaz> capsh --print happily reports that all caps are dropped. i'd just like to see that this fact is actually having some effect, even for a regular unprivileged user and not just root
[20:52:59] <kwilczynski> Capabilities are also of different nature. So that is also something to keep in mind.
[20:53:15] <kwilczynski> From set to inherited to ambient.
[20:53:38] <kwilczynski> Some work differently across fork()/vfork() and exec*() family.
[20:54:10] <kwilczynski> Funny that you are interested in this.
[20:54:23] <kwilczynski> Most people lives happily ablivius to those sort of things.
[20:54:27] <kwilczynski> :)
[20:54:31] <kwilczynski> Cloud and such...
[20:54:31] <rawtaz> i should be more interested, but i realize that there's too much to learn for the time i have
[20:55:17] <rawtaz> so i'll just have to live with researchign the basics of securing e.g. my containers, and try to understand and implement that, and hope noone is interested enough to exploit the remaining 20% that these basics doesnt cover :)
[20:55:36] <kwilczynski> Haha
[20:55:46] <kwilczynski> If you want to research container security
[20:55:57] <kwilczynski> Then look at past container escapes.
[20:56:03] <rawtaz> yeah
[20:56:08] <kwilczynski> And then how namespaces are implemented
[20:56:12] <rawtaz> got a good resource for summing them up? :L)
[20:56:14] <rawtaz> -L
[20:56:29] <kwilczynski> Looking at sandboxing is a good idea to9
[20:56:59] <kwilczynski> seccomp, bubblewrap, NaCl
[20:59:36] <rawtaz> https://github.com/containers/bubblewrap says "These tools are not suitable to give to unprivileged users, because it is trivial to turn such access into to a fully privileged root shell on the host" (regarding e.g. Docker). in what way is it "trivial"?
[20:59:45] <rawtaz> im not really getting that part.
[21:00:42] <rawtaz> also the NaCl i didnt find on google, there's too many other unrelated hits i think - which NaCl are you thinking of?
[21:08:54] *** Joins: phost (~phost@112.84.37.188.rev.vodafone.pt)
[21:25:45] <rawtaz> lo
[23:25:17] <rawtaz> kwilczynski: the music stopped after 2.5 hours :(
[23:25:25] <rawtaz> so i put on: https://www.youtube.com/watch?v=1SJfM2sHQls
