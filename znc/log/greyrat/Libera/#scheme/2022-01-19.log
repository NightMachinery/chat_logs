[00:00:16] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:01:39] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[00:20:59] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:32:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[00:32:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:39:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[00:40:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:41:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:41:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:42:52] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[00:48:19] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:49:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[00:51:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:54:09] *** Joins: evdubs__ (~evdubs@user/evdubs)
[00:55:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[00:56:02] *** Quits: evdubs_ (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[01:08:45] *** Quits: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl) (Quit: Client closed)
[01:12:03] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) ()
[01:12:14] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:41:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:43:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:52:03] *** Quits: neocron (~NeoCron@p200300c4cf1b4400f695d81d4d068b5c.dip0.t-ipconnect.de) (Quit: Leaving)
[01:53:12] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[01:54:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:01:06] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Read error: Connection reset by peer)
[02:03:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[02:05:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:06:40] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[02:07:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:26:15] *** Joins: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl)
[02:29:51] *** Joins: notzmv (~zmv@user/notzmv)
[02:32:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:34:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:36:39] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 268 seconds)
[02:50:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:51:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:53:41] *** Quits: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl) (Quit: Client closed)
[03:33:47] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[03:39:40] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:40:02] *** Joins: seninha (~seninha@user/seninha)
[03:45:43] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[03:52:03] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:56:26] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:07:02] *** Joins: even (~steve@ayerhart.party)
[04:37:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:14:21] *** Joins: pat (~pat@35.161.159.143.dyn.plus.net)
[05:14:40] *** Quits: pat (~pat@35.161.159.143.dyn.plus.net) (Remote host closed the connection)
[05:16:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:23:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:24:32] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[05:24:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:27:05] *** Joins: jao (~jao@45.152.183.62)
[05:31:47] *** Quits: jao (~jao@45.152.183.62) (Ping timeout: 268 seconds)
[05:33:05] *** Joins: jao (~jao@static-68-235-44-43.cust.tzulo.com)
[05:34:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:50:10] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[05:53:27] *** Quits: klovett (~klovett@166.205.90.163) (Quit: ZZZzzzâ€¦)
[06:03:36] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Read error: Connection reset by peer)
[06:03:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:20:32] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[06:21:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:33:27] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[06:34:08] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[06:35:09] *** Quits: jao (~jao@static-68-235-44-43.cust.tzulo.com) (Ping timeout: 256 seconds)
[06:35:43] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[06:35:59] *** Joins: frost (~frost@user/frost)
[06:36:44] *** Joins: amk (~amk@109.255.169.126)
[06:37:04] *** Joins: jao (~jao@45.152.183.54)
[06:42:11] <Spawns> do you guys know roughly what functions need to be implemented as "primitives" and what can be implemented in scheme itself by using those primitives? the spec doesn't really say much about that
[06:42:16] <Spawns> at least what I could tell
[06:42:40] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:42:47] <Spawns> by functions I mean stuff like "car, cdr, cons, list, equal?, etc"
[06:44:26] <aeth> by the way mathematics works...
[06:44:38] <aeth> if you can implement A with B, you can implement B with A... generally.
[06:44:38] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:44:53] <aeth> At least, as programming language constructs.
[06:46:48] <Spawns> i want to try to get my scheme/lisp "creation" to implement as much of possible of itself in itself, if that makes sense. do the least possible work in rust 
[06:49:13] <aeth> If I was unclear, e.g. with a toy example (x*y)*z = x*(y*z) = (x*y*z)
[06:49:40] <Spawns> what does the mean in practice?
[06:49:41] <aeth> Do you build x*y*z out of (x*y) and z, out of x and (y*z), or do you just implement it in the host language? All three would work. And then more
[06:51:13] <aeth> So there's no one way to implement it.
[06:51:32] <Spawns> i guess everyone does it in a different way 
[06:51:46] <aeth> The spec seems to try to build everything out of lambda where possible (e.g. let), while that's not necessarily the case in practice.
[06:51:55] <aeth> But if you really, really wanted to, you could build EVERYTHING out of lambda.
[06:51:58] <Spawns> i guess i'll just start implementing stuff, and if I can see things that can be reduced or compacted i'll do it
[06:52:15] <Spawns> yeah i am going to try to do that with lambda as well
[06:53:14] <Spawns> right now I am implementing macros so I can have stuff like 'let' or 'case' and whatever else. i wanted to try to implement 'and/or/not/' with 'if'
[06:54:10] <edgar-rft> It's easy to implement total crap in scheme, so scheme an be easily implemented from total crap?
[06:54:32] <Spawns> lol
[06:54:46] <aeth> Spawns: `if` and `lambda` go a long way, but you can e.g. write `if` with `lambda` if you cover it up with a macro
[06:55:04] <Spawns> no way!
[06:55:22] <Spawns> how does that work
[06:56:56] <aeth> iirc, anyway
[06:57:37] <Spawns> some of the stuff they pull off with just lambda is mind bending
[06:58:00] <aeth> I think it involves continuations? But then I guess you're just doing the conditional branching, just at that level of abstraction
[06:58:03] <aeth> it has been a while
[06:59:23] <aeth> or, hmm
[07:00:27] <aeth> there is, of course, some actual minimum number of basic building blocks, they're just arbitrary once you have the right amount
[07:04:41] <aeth> I'm trying to remember... You can, of course, build if as syntactic sugar on top of this: ((lambda (f x y) (if (f) (x) (y))) (lambda () (= 1 1)) (lambda () 2) (lambda () 3))
[07:04:46] <jrincayc> The minimum for lambda calculus is application.  See for example http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf
[07:04:47] <aeth> but this is, of course, circular because it uses if
[07:05:09] <aeth> so I think you'd have to do a continuation-first runtime environment and handle that sort of if-like behavior in the continuations
[07:05:30] <Spawns> sounds like it might not be worth it, 'if' is fairly trivial to implement 
[07:05:42] <Spawns> at least for me
[07:05:49] <aeth> at some point, you just destroy performance. Same with car/cdr/cons, which can be built from lambdas
[07:06:05] <aeth> which is why you're probably using x86 or ARM instead of NAND
[07:07:28] <jrincayc> aeth: I agree on the performance comment.  Just because you can do arithmetic with Church numerals, doesn't mean it is efficient.
[07:09:18] <aeth> or, very similarly, building the integers out of the length of a list that contains all prior integers. '() for 0, '(()) for 1, '(() (())) for 2, etc. I think that's based on Peano arithmetic, but s-expressionified
[07:09:29] <aeth> it's quite elegant
[07:09:55] <aeth> (well, that's building the natural numbers... you then build the integers from the natural numbers)
[07:21:18] *** Joins: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au)
[07:24:27] <aeth> Less esoterically... you can implement OR and AND with IF, or you can implement IF with OR and AND
[07:25:56] <aeth> iirc (if c a b) is just (or (and c a) b) when your OR and AND short-circuit because the AND will return the first true value and the OR the last true value.
[07:26:30] <aeth> iirc, Lisps/Schemes prefer starting with IF on mathematical grounds: it's one fewer.
[07:28:24] <Spawns> if is nice and simple to implement in an interpreter as well
[07:28:34] <Spawns> just a simple jump opcode for mine
[07:29:31] <aeth> (sorry, I had it backwards in my description even though the code was correct. AND returns the last true and OR the first true)
[07:30:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:31:46] <aeth> (and with short-circuiting, that means that (or (and c a) b) won't evaluate b when c is true, making it possible to implement IF)
[07:33:19] <Spawns> that may actually be a neater way to implement if 
[07:33:37] *** Joins: klovett (~klovett@166.205.90.163)
[07:33:55] <Spawns> it would not require messing around with the length of the program and calculating the offsets from what I can tell
[07:34:03] *** Quits: klovett (~klovett@166.205.90.163) (Client Quit)
[07:34:45] <aeth> you could of course do both and implement if with and/or in the host language and then implement and/or in Scheme with Scheme's if
[07:45:38] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:51:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:01:06] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:11:22] *** Parts: jackson99 (~bc8147f2@cerf.good1.com) ()
[08:11:29] *** Quits: f8l (~f8l@37.228.213.3) (Ping timeout: 256 seconds)
[08:14:14] *** Joins: f8l (~f8l@37.228.213.3)
[08:26:42] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:29:13] *** Quits: jao (~jao@45.152.183.54) (Ping timeout: 256 seconds)
[08:42:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:50:45] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:51:51] *** Joins: amk (~amk@109.255.169.126)
[08:53:25] *** Quits: xsperry (~xs@user/xsperry) ()
[08:53:28] *** Joins: frost (~frost@user/frost)
[08:57:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:07:06] *** Joins: xsperry (~xs@user/xsperry)
[09:25:38] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[09:38:42] *** Quits: Perryman (~perryman@216.97.249.113) (Read error: Connection reset by peer)
[09:42:07] *** Joins: Perryman (~perryman@216.97.249.113)
[09:55:28] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:58:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:07:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:10:19] *** Joins: frost (~frost@user/frost)
[10:11:36] *** Joins: klovett (~klovett@166.205.90.163)
[10:18:01] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:34:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[10:37:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:42:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[10:46:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[10:58:21] *** Joins: Darkcoal (~user@139.64.58.149)
[10:58:35] *** Joins: frost (~frost@user/frost)
[11:04:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:04:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:16:02] *** Joins: notzmv (~zmv@user/notzmv)
[11:21:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:55:55] *** Joins: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl)
[12:00:43] *** Quits: Wezl (Wezl@grape.ircnow.org) (Quit: WeeChat 3.2.1)
[12:05:12] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[12:32:41] *** Joins: klovett_ (~klovett@166.205.90.163)
[12:34:40] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 250 seconds)
[12:52:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:393b:a077:e5c1:3104) (Ping timeout: 240 seconds)
[12:53:41] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c030:2b1f:300e:31b6)
[13:04:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:06:11] *** Joins: seninha (~seninha@user/seninha)
[13:06:57] <amazigh> Spawns: car, cdr, cons, etc... are usually primitives to make them faster, but there might be another way: implement a records, and then implement pairs on top records; spoiler: I never finished the implementation using that approach (but it is possible)
[13:07:12] <amazigh> s/implement a records/implement records/
[13:07:39] <amazigh> there is a circular dependency between car, cdr, cons and quasiquote
[13:07:59] <amazigh> hence between the interpreter or compiler and paris
[13:08:31] <amazigh> maybe not circular, but still a dependency
[13:10:50] <amazigh> Zipheir: I am working on the markdown file
[13:11:19] <amazigh> I mean, I translated the tex to html, the html to markdown, and now proceed from the markdown.
[13:11:34] <amazigh> s/from the markdown/with the markdown/
[13:16:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:17:45] <amazigh> do you know a good domain .tld for building web ring?
[13:17:55] <amazigh> or maybe I will re-use scheme.rs?
[13:18:53] <sjamaan> amazigh: Why not simply add your blog to Planet Scheme?
[13:19:03] <amazigh> ah
[13:19:15] <amazigh> my blog is just a bunch of random notes not strictly scheme related
[13:19:29] <sjamaan> ah
[13:19:56] <sjamaan> There's also schemers.org which has several sites
[13:22:46] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[13:24:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:26:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:51:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:00:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:08:48] <dpk> if you have pairs implemented as a record-type, you have a more serious circular dependency between the reader and the record-type definition than anything else
[14:09:32] <sham1> At what level of metacircularity does one just give up
[14:09:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:11:20] <sham1> "everything is actually a byte vector"
[14:31:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:48:34] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[14:56:13] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[14:59:17] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[15:08:02] *** Joins: civodul (~user@guix/contributor/civodul)
[15:13:25] *** Joins: schulze (~schulze@dynamic-095-116-224-191.95.116.pool.telefonica.de)
[15:17:37] *** Quits: schulze (~schulze@dynamic-095-116-224-191.95.116.pool.telefonica.de) (Ping timeout: 256 seconds)
[15:18:30] *** mdhughes_ is now known as mdhughes
[15:18:45] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[15:19:01] *** Joins: civodul (~user@guix/contributor/civodul)
[15:28:09] *** Joins: schulze (~schulze@dynamic-095-116-224-191.95.116.pool.telefonica.de)
[15:43:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:58:27] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:04:45] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:34] *** Joins: rubin55_ (sid175221@id-175221.hampstead.irccloud.com)
[16:13:38] *** Joins: terrorjack0 (~terrorjac@2a01:4f8:1c1e:509a::1)
[16:13:43] *** Joins: robin__ (~robin@user/terpri)
[16:14:13] *** Joins: szkl_ (uid110435@uxbridge.irccloud.com)
[16:14:16] *** Joins: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[16:14:28] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[16:14:55] *** Joins: mjsir911 (~bnc@user/mjsir911)
[16:15:01] *** Joins: dstein64- (~dstein64@dannyadam.com)
[16:15:04] *** Joins: greaser|q (greaser@antihype.space)
[16:15:12] *** Joins: deltab_ (~deltab@95.154.230.49)
[16:15:21] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[16:16:06] *** Quits: msirabella (~bnc@user/mjsir911) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: chris2 (cky@meredith.poweredbytaylor.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dnm (sid401311@id-401311.lymington.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: croc (~quassel@45.33.123.12) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: webshinra_ (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6)
[16:16:08] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[16:16:08] *** Joins: drakonis (drakonis@2600:3c02::f03c:92ff:fe5e:b8bf)
[16:16:13] *** dstein64- is now known as dstein64
[16:16:13] *** dnm_ is now known as dnm
[16:16:13] *** wallymathieu_ is now known as wallymathieu
[16:16:13] *** terrorjack0 is now known as terrorjack
[16:16:15] *** rubin55_ is now known as rubin55
[16:16:52] *** Joins: chris2 (cky@meredith.poweredbytaylor.com)
[16:17:12] *** Server sets mode: +ntz 
[16:17:16] *** Joins: nisstyre (~wes@user/nisstyre)
[16:18:01] *** Quits: drakonis (drakonis@2600:3c02::f03c:92ff:fe5e:b8bf) (Client Quit)
[16:18:08] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:18:12] *** Joins: drakonis (drakonis@user/drakonis)
[16:19:57] *** Quits: szkl_ (uid110435@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[16:21:26] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[16:26:19] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[16:31:23] *** Joins: seninha (~seninha@user/seninha)
[16:41:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:43:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[16:44:08] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[16:46:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:59:56] *** robin__ is now known as robin
[17:33:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:48:54] *** Joins: vats (~vats@180.149.226.41)
[18:16:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:18:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:24:28] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[18:28:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:33:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:42:58] <tokie> Spawns: i did end up changing how i do builtin procedures
[18:44:08] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[18:44:13] *** Joins: m455 (~m455@user/m455)
[18:45:54] *** Joins: yewscion (~yewscion@52.94.133.130)
[18:46:09] *** Quits: vats (~vats@180.149.226.41) (Ping timeout: 256 seconds)
[18:47:12] *** Quits: nmeum (~nmeum@barium.8pit.net) (Read error: Connection reset by peer)
[18:47:29] *** Joins: nmeum (~nmeum@barium.8pit.net)
[18:52:50] *** hugo- is now known as hugo
[18:57:18] *** Quits: yewscion (~yewscion@52.94.133.130) (Ping timeout: 250 seconds)
[18:59:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:14:22] *** Joins: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com)
[19:20:01] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[19:21:12] <jdevoo> hello! I am learning Scheme (11.2) and have a question with (graphics-operation device 'fill-polygon #(0 0 0 1 1 0)) - it responds with The object #(0. 0. 0. 1. 1. 0.), passed as the first argument to floating-vector-length, is not the correct type.
[19:21:27] <jdevoo> what am I doing wrong?
[19:36:00] <lagash_> amazigh: if only there were a way to add, say, only tagged articles to a planet.. most of that software is just plain ancient and ugly..
[19:46:02] <aeth> jdevoo: exactly as the error message says, there's a type error. This is implementation specific and entirely out of context, but my guess is that the literal #(0 0 0 1 1 0) is just a vector, when it wants a floating vector, which has to be created a different way?
[19:47:00] <aeth> Scheme in general is very... anti-generic with how it does things. It's a miracle that + is generic.
[19:47:05] <jdevoo> but the statement comes straight from the ref https://www.gnu.org/software/mit-scheme/documentation/stable/mit-scheme-ref/Custom-Operations-for-Win32-Graphics.html#index-fill_002dpolygon
[19:47:06] <rudybot> https://teensy.info/jNvMMJjoJa
[19:48:28] <aeth> maybe it's a bug in the docs?
[19:48:48] <jdevoo> thanks aeth
[19:49:00] <aeth> try (floating-vector 0. 0. 0. 1. 1. 0.) because that's what I'd guess as the way to create a floating vector
[19:49:08] <aeth> as opposed to (vector 0. 0. 0. 1. 1. 0.)
[19:49:20] <aeth> but it might be called something else
[19:52:08] <aeth> afaik, and maybe an implementation disagrees, but again afaik, the literal #(1 2 3) is equivalent to (vector '1 '2 '3) and with numbers, '1 is the same as 1, etc. so that's the same as (vector 1 2 3)
[19:52:18] <jdevoo> the doc is for win32 only perhaps - not x11
[19:52:30] <jdevoo> yes ok
[19:52:34] <aeth> but e.g. #(a b c) is the same as (vector 'a 'b 'c) vs (vector a b c) which will read the variables a, b, and c
[19:53:35] <aeth> perhaps it used to auto-convert types when there was a mismatch, but now it expects you to manually provide the correct type, which isn't a generic vector?
[19:54:00] <aeth> but without checking the type at the procedure API... just waiting for it to fail in the internals, in this case on a floating-vector-length call
[19:54:11] <aeth> (you'd use vector-length on a vector instead)
[19:54:35] <jdevoo> I also noticed this thread under bug-mit-scheme https://lists.gnu.org/archive/html/bug-mit-scheme/2019-01/msg00009.html
[19:55:27] <jdevoo> but hoped this had been resolved - not sure; I am using very basic out-of-the-box statements here
[19:55:39] <jdevoo> will look some more
[19:55:46] <jdevoo> thanks again aeth
[19:55:53] <aeth> you're welcome
[20:00:23] *** Quits: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[20:01:50] <tokie> Spawns: i found one reason to not go down the "implement the bare minimum" in rust route is that you do get better error reporting for anything you implement in the compiler. it really depends what the purpose of your scheme implementation is i guess
[20:17:19] *** Quits: Darkcoal (~user@139.64.58.149) (Ping timeout: 268 seconds)
[20:19:01] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Quit: leaving)
[20:24:30] *** Joins: Darkcoal (~user@139.64.58.149)
[20:25:43] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[20:27:31] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[20:38:25] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:38:57] *** Quits: klovett_ (~klovett@166.205.90.163) (Quit: ZZZzzzâ€¦)
[20:39:21] *** Joins: klovett (~klovett@166.205.90.163)
[20:44:55] *** Joins: akarle (~akarle@user/akarle)
[20:48:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:49:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:04:15] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[21:13:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[21:13:58] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[21:14:15] *** Joins: jao (~jao@194.99.104.13)
[21:17:34] *** Quits: Lysandros_ (~Lysandros@2a02:aa13:8104:c080:21a:a0ff:fea7:35e) (Changing host)
[21:17:34] *** Joins: Lysandros_ (~Lysandros@user/lysandros)
[21:17:41] *** Lysandros_ is now known as Lysandros
[21:25:56] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 250 seconds)
[21:28:14] *** Joins: jao (~jao@45.152.183.44)
[21:28:56] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[21:32:14] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[21:32:17] *** Quits: jao (~jao@45.152.183.44) (Ping timeout: 240 seconds)
[21:34:37] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:36:09] *** Quits: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl) (Ping timeout: 256 seconds)
[21:36:38] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[21:48:23] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[21:55:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:08:29] *** Joins: jdevoo_ (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[22:08:58] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[22:09:23] <jdevoo_> hello! I am trying to figure out why (flo:vector-length #(-1.0 2.0)) fails with a type error
[22:14:36] <dpk> i'm assuming from Google you're in MIT Scheme
[22:15:09] <dpk> it looks like 'flonum vectors' are actually a distinct type from vectors per se and you have to create them with the flo:vector-cons procedure, not with the #(â€¦) reader notation
[22:15:09] <jdevoo_> oh yes dpk
[22:27:09] <jdevoo_> thank you dpk
[22:30:38] *** Quits: jdevoo_ (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Quit: leaving)
[22:37:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:38:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:00:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[23:00:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[23:00:25] *** Joins: skapata (~Skapata@user/skapata)
[23:09:22] *** Quits: Darkcoal (~user@139.64.58.149) (Quit: Darkcoal)
[23:22:59] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:22:59] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:23:02] *** greaser|q is now known as GreaseMonkey
[23:23:15] *** Quits: sdu (~sidu@185.44.146.61) (Ping timeout: 256 seconds)
[23:28:19] *** Joins: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl)
[23:30:49] *** Joins: sdu (~sidu@185.44.146.61)
[23:40:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:41:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:43:06] <dpk> trivial macro proposal not worth putting in a SRFI: (erroneous-syntax â€¦) creates a syntax transformer which always errors, useful for auxiliary syntax keywords in cases where SRFI 206 semantics are not desired, as well as the initial definition of syntax parameters
[23:49:29] <gwatt> What do you think about (define-aux-syntax ...) To me, the name erroneous-syntax reads like it should signal an error, not define a syntax transformer.
[23:51:28] <Oxyd> You mean like syntax-error?
[23:52:38] <dpk> well, syntax-error and syntax-violation are both already taken
[23:52:58] <Oxyd> Well how is your erroneous-syntax different from syntax-error?
[23:53:25] <dpk> erroneous-syntax creates a syntax transformer, syntax-error is a macro which causes an error
[23:53:41] <dpk> so (define-syntax something (erroneous-syntax "you can't use this macro like this"))
[23:53:54] <Oxyd> So erroneous-syntax just produces a transformer that always transforms into syntax-error?
[23:54:14] <dpk> which is equivalent to (define-syntax something (lambda (stx) (syntax-violation "you can't use this macro like this")))
[23:54:27] <dpk> (in syntax-case terms)
[23:54:30] <dpk> (i did say it was trivial)
[23:54:40] <Oxyd> b
[23:54:44] <Oxyd> Oop.
[23:54:59] <gwatt> Ah, I misunderstood. I thought you wanted erroneous-syntax would expand to a define-syntax.
[23:57:01] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
