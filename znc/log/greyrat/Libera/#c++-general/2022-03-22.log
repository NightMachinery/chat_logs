[01:02:46] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:02:57] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:04:12] <Alipha> Or you could use my gc_ptr or herb's deferred_ptr ;-) The ironic thing there is that my gc_ptr is implemented using a doubly-linked list. So you'd be implementing a doubly-linked list using a doubly-linked list
[01:04:55] <rpav> ðŸ¤” why doubly
[01:05:22] <rpav> gc_ptr surely ought to be a singly-linked list with a thread-local (or not) roots pointer
[01:05:49] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:04] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[01:07:39] *** Joins: wyre (~wyre@user/wyre)
[01:08:37] *** Quits: foul_owl (~kerry@23.82.193.87) (Ping timeout: 240 seconds)
[01:10:06] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[01:14:07] <yolo> https://github.com/cyrus-and/gdb-dashboard/wiki I must recommend this gdb gem here
[01:14:09] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:16:02] <johnny> didn't i just see that mentioned somwehere?
[01:16:48] <johnny> i swear i just heard about it today, but i don't recall where..
[01:19:02] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:20:32] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:22:07] <Alipha> rpav: so the nodes can remove themselves from the list when they get destroyed
[01:22:39] <Alipha> where "node" == gc_ptr
[01:24:04] *** Joins: foul_owl (~kerry@174-21-69-110.tukw.qwest.net)
[01:27:04] <rpav> there isn't a type trait for "variant can hold a..." is there
[01:27:41] <rpav> Alipha: hrm .. yeah i guess you probably can't splice it another way
[01:27:44] <PJBoy> convertible_to?
[01:28:26] <rpav> i don't think you can just cast a variant though
[01:28:29] <rpav> can you
[01:28:50] <rpav> yeah it's pretty much std::get or bust
[01:28:57] <PJBoy> << convertible_to<int, variant<int>>, convertible_to<int, variant<float>>
[01:28:58] <geordi> true, false
[01:29:05] <rpav> ðŸ¤”
[01:29:14] <rpav> oh, c++20, bah
[01:29:30] <rpav> is_convertible might work
[01:29:34] <PJBoy> << is_convertible_v<int, variant<int>>, is_convertible_v<int, variant<float>>
[01:29:35] <geordi> true, false
[01:29:41] <rpav> sold
[01:29:48] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[01:30:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:31:24] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[01:32:02] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[01:32:10] <rpav> "enable construction implicitly but only for things the variant holds"
[01:33:10] *** Joins: HvszrStykp (~X@81.171.62.87)
[01:33:22] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[01:33:39] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:34:00] <LordKalma> what's the difference between is_convertible_v and convertible_to?
[01:34:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[01:34:40] <TinoDidriksen> The _v variants are the same as the non-v ones's ::value - just shorthand for the most common member.
[01:34:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:35:49] *** Joins: mint (~mint@46.159.204.49)
[01:37:39] <PJBoy> more importantly, convertible_to is a concept and is_convertible_v isn't
[01:38:17] <PJBoy> convertible_to also has an extra requirement that I don't fully understand
[01:40:26] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[01:40:35] <PJBoy> I can't think of a type that would be implicitly convertible to another type, but not *explicitly* convertible
[01:40:49] <PJBoy> which seems to be the extra requirement
[01:41:14] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[01:46:30] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:48:13] <ville> you just = delete?
[01:48:51] <PJBoy> and retain implicit convertability?
[01:49:46] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:50:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:50:10] <ville> if you control A and B, some combo of = deletes, one parameter ctors or conversion functions
[01:51:03] <ville> sounds like it's comlex enough set of rules that control all of that there must be some funny combo
[01:51:38] *** Joins: kleiner (uid540109@id-540109.uxbridge.irccloud.com)
[01:53:45] <PJBoy> oh
[01:55:07] <PJBoy> { A a{B()}; } struct A { A() = default; explicit A(struct B) = delete; }; struct B { operator A() { return {}; } };
[01:55:07] <geordi> error: use of deleted function 'A::A(B)'
[01:55:12] <PJBoy> { A a = B(); } struct A { A() = default; explicit A(struct B) = delete; }; struct B { operator A() { return {}; } };
[01:55:13] <geordi>  
[01:55:15] <PJBoy> like so
[01:55:24] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6469:70ea:b962:2f9) (Remote host closed the connection)
[01:55:33] <PJBoy> wow that's pretty crazy
[01:55:47] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[01:55:51] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[01:56:19] <PJBoy> I'm annoyed that's possible
[01:56:24] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:56:49] <PJBoy> surely no one relies on that behaviour
[01:56:50] <ville> c++ always gives you more than enough rupe to hang your self
[01:56:56] <ville> err rope
[01:57:02] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[01:59:32] *** Joins: seninha (~seninha@user/seninha)
[01:59:38] <PJBoy> at least it's zero overhead rope
[01:59:53] <PJBoy> with the strong exception guarantee
[02:02:13] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[02:05:45] <Alipha> that's fun
[02:06:15] <bomb> PJBoy zero overhead? my programs always manage to run slower than GC'ed equivalents :P
[02:06:49] <PJBoy> your programs must be complete garbage then
[02:07:41] <PJBoy> man that sounds rude if you miss the joke
[02:08:12] <MaddHatter> "surely no one relies on that behaviour" <- haha. Surely you know better.
[02:08:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:09:13] <MaddHatter> it doesn't even matter what the behavior in question is. H<mumble>'s law and all.
[02:09:42] <PJBoy> Hyrum's what?
[02:10:05] <MaddHatter> yeah, that's the one
[02:10:13] <ville> you know someone using tmp to do a dsl relies on it
[02:10:59] <PJBoy> ok but it seems less likely to break stuff than changing how aggregates work again
[02:11:28] <MaddHatter> I'm still not sure I have {}-initialization all straight
[02:11:32] <PJBoy> I think that's a reasonable reference point for determining acceptable breakage
[02:11:45] *** Quits: robod34 (Username@79.113.200.158) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[02:12:23] <PJBoy> nothing about {} is straight
[02:12:29] <PJBoy> you want [] for that
[02:12:56] <MaddHatter> Let's use <>. We've already made the language hard enough to parse, what's a little bit more?
[02:14:56] <ville> MaddHatter: nothing about initialization is alright
[02:15:02] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:15:26] <MaddHatter> rpav: (re: asan test case) unless someone's going to pay my time to do it, I'm not motivated enough to make it a personal free-time project to help fix the multitude of issues asan seems to have. And indications so far are that my employer isn't going to pay for that.
[02:16:24] <johnny> ya'll ever looked at raku then?
[02:16:35] <MaddHatter> the test case I have now is (as always) part of a huge, proprietary code base, so it would take effort and time to extract a shareable test case from it
[02:21:18] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[02:21:49] *** Parts: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de) ()
[02:23:12] <MaddHatter> it's a Loki::AssocVector<Loki::TypeInfo, ProprietaryThing>, and ProprietaryThing is a wrapper around more AssocVectors and some boost::functions.
[02:24:38] <MaddHatter> correction: a Loki::AssocVector<Loki::TypeInfo, ProprietaryThing*>
[02:25:57] <MaddHatter> asan seems to be complaining about the AssocVector's insert though, so I don't even know if the types matter
[02:28:21] <MaddHatter> (I really want to purge Loki from this code base, but even that is an uphill battle given it's significant effort for no customer-visible change)
[02:29:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[02:29:41] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:32:02] *** Quits: LuckyFire (~LuckyFire@79.125.173.139) (Ping timeout: 260 seconds)
[02:32:40] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Client Quit)
[02:32:42] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:98a8:5b40:1f3d:c925)
[02:35:51] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:37:27] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:43:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:44:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:23] *** ChanServ sets mode: +v npaperbot
[02:48:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cd00:568b:6ca3:f1ed)
[02:50:37] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[02:54:09] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[03:02:37] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[03:03:09] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[03:05:38] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:07:24] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[03:11:12] *** Joins: Tokamak (~Tokamak@172.58.188.41)
[03:13:36] *** Quits: proller (~p@2a02:6b8:b081:20::1:21) (Ping timeout: 268 seconds)
[03:17:59] *** Joins: badone (~badone@209.132.189.152)
[03:18:31] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:34] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:19:37] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[03:21:08] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:24:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:25:10] <cq-work> Herm... I just realized that std::span and std::string_view aren't ABI stable
[03:31:33] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628) (Ping timeout: 252 seconds)
[03:34:46] <pulse> is anything in std
[03:35:03] *** Joins: proller (~p@80.240.216.69)
[03:36:21] *** NyB_ is now known as NyB
[03:37:21] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:98a8:5b40:1f3d:c925) (Quit: Client closed)
[03:49:01] <cq-work> There's a couple like to_chars_result and from_chars_result.
[03:49:38] <cq-work> Well... maybe not if errc doesn't doesn't have a defined size.
[03:51:55] <cq-work> I guess no std::span or std::string_view in APIs for me :(
[03:54:16] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[03:55:57] *** Quits: Tokamak (~Tokamak@172.58.188.41) (Ping timeout: 240 seconds)
[03:58:21] *** Joins: Tokamak (~Tokamak@107.116.82.179)
[03:58:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[03:59:16] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[04:01:18] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:01:30] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:02:18] *** Joins: LBV_User (~leonardo@45.183.248.98)
[04:10:57] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[04:13:24] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:19:20] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:19:32] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:19:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d)
[04:19:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d) (Changing host)
[04:19:48] *** Joins: skapata (~Skapata@user/skapata)
[04:20:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:20:54] *** Joins: proller (~p@2a02:6b8:b081:b407::1:10)
[04:21:15] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:21:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:25:41] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[04:27:46] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:28:45] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:44:24] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:54:50] *** Quits: comrad (~quassel@holarse/comrad) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[04:58:01] *** Joins: comrad (~quassel@holarse/comrad)
[05:03:37] *** Quits: foul_owl (~kerry@174-21-69-110.tukw.qwest.net) (Ping timeout: 240 seconds)
[05:11:56] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:19:11] *** Joins: foul_owl (~kerry@23.82.193.88)
[05:23:51] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[05:24:34] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[05:26:46] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[05:30:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:44:35] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308) (Quit: Textual IRC Client: www.textualapp.com)
[05:56:40] *** Parts: LBV_User (~leonardo@45.183.248.98) (Konversation terminated!)
[05:58:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:02:04] *** Joins: seninha (~seninha@user/seninha)
[06:04:55] *** Joins: seninha_ (~seninha@user/seninha)
[06:05:34] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:06:20] *** Joins: kaichiuchi (uid547644@user/kaichiuchi)
[06:06:41] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:07:18] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:07:32] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[06:07:51] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:56] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[06:08:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 250 seconds)
[06:10:13] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:11:42] *** Joins: seninha (~seninha@user/seninha)
[06:12:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:18:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308)
[06:22:27] *** Joins: seninha (~seninha@user/seninha)
[06:23:48] *** Quits: bomb (~bomb@user/bomb) (Quit: â€Ž)
[06:24:28] *** Joins: palindrome (~thais@cpe-75-82-64-80.socal.res.rr.com)
[06:24:53] <palindrome> anyone familiar with assimp/quit
[06:25:04] *** Quits: palindrome (~thais@cpe-75-82-64-80.socal.res.rr.com) (Client Quit)
[06:26:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:31:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:34:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:39:40] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[06:44:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:22] *** ChanServ sets mode: +v npaperbot
[06:47:30] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Remote host closed the connection)
[06:57:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:05:24] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[07:09:30] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:09:50] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:10:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:12:07] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:14:52] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:20:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 250 seconds)
[07:22:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[07:26:40] *** Joins: nshire (~nshire@user/nshire)
[07:41:00] *** Joins: tonitch_ (~tonitch@user/tonitch)
[07:41:07] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[07:41:08] *** Joins: sonOfRa_ (sonOfRa@user/sonofra)
[07:41:13] *** Joins: nolyc_ (~nolyc@tinodidriksen.com)
[07:41:13] *** ChanServ sets mode: +v nolyc_
[07:41:29] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[07:41:29] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[07:41:29] *** Quits: DrMax_ (~DrMax@132.215.96.30) (*.net *.split)
[07:41:29] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[07:41:29] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[07:41:29] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[07:41:29] *** nolyc_ is now known as nolyc
[07:42:11] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[07:42:33] *** Joins: taiyu (~taiyu@user/taiyu)
[07:51:45] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[08:04:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[08:07:25] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326) (Ping timeout: 240 seconds)
[08:09:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[08:11:22] *** Joins: teepee (~teepee@openscad/teepee)
[08:37:17] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[08:39:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:47:27] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[08:48:01] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[08:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:55:30] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 252 seconds)
[08:55:39] *** Joins: LangerJan (~jan@user/langerjan)
[08:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[09:01:53] *** Joins: smeso (~smeso@user/smeso)
[09:03:02] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[09:03:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:11:17] *** Quits: jsbach (~jsbach@2a01:c23:6148:1d00:b546:c5e3:316a:a) (Ping timeout: 256 seconds)
[09:20:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[09:24:00] *** Joins: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064)
[09:25:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:25:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cd00:568b:6ca3:f1ed) (Quit: Quit)
[09:30:40] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[09:31:20] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[09:37:16] <ac_slater> guys, should I be able to do `std::string s; std::copy(other.begin(), other.end(), s.begin());`? That, is, copy from some other interator support container to a string?
[09:37:28] *** Quits: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net) (Quit: WeeChat 3.4)
[09:37:45] *** Joins: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net)
[09:38:17] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[09:38:20] <ac_slater> hey guys, should I be able to do `std::string s; std::copy(other.begin(), other.end(), s.begin());`? That is, copy from an iterator-supported container to a string?
[09:38:31] <ac_slater> (apologies if I pasted this twice, my IRC client choked)
[09:42:40] <Raziel> ac_slater, sure https://wandbox.org/permlink/GLOgoBTxkpLXVqDf
[09:43:32] <ac_slater> ah
[09:43:40] <ac_slater> s.begin() is wrote, I need back_inserter
[09:43:44] <ac_slater> (or some other inserter)
[09:45:46] <Raziel> ac_slater, begin works but only if the string already has exactly the same number of chars, basically
[09:45:53] <Raziel> https://wandbox.org/permlink/CqwhUhjXy7IdMtsR
[09:46:04] <Raziel> if it has less, it won't actually *insert* new ones, if it has more the extra ones are left in
[09:46:15] <ac_slater> right that's what I was afraid of
[09:46:18] <ac_slater> very helpful Raziel
[09:47:21] <Raziel> also, probably obvious but back inserter inserts at the end, so it's the equivalent of appending
[09:47:41] <Raziel> if your string isn't empty that'll be an issue potentially :p unless that's what you want
[09:57:27] *** Joins: mint (~mint@46.159.204.49)
[10:01:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:03:51] <ac_slater> yup! thanks!
[10:04:02] <ac_slater> I'm messing with spans and I get really mixed up sometimes
[10:04:11] <ac_slater> especially with iterators and STL containers
[10:09:00] <Raziel> understandable :p
[10:13:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 256 seconds)
[10:14:30] *** Joins: toulene (~toulene@user/toulene)
[10:20:59] *** Quits: nq (~nq@2a02:2f08:e015:a900:7e72:2af9:f526:1e8f) (Quit: Leaving)
[10:32:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:35:10] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[10:43:12] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:44:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:22] *** ChanServ sets mode: +v npaperbot
[10:47:38] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[10:48:31] <lpapp> hi, in a templated (by T) Vec3 class, should I have const static Vec3 XAxis; or const static Vec3<T> XAxis;?
[10:48:36] <lpapp> inside this class
[10:49:02] *** Joins: Xardas (~Xardas@149.233.51.127)
[10:49:26] <lpapp> class is template <typename T> class Vec3 { ... const static Vec3<T> XAxis; //< Constant for the X axis vector ... }
[10:50:46] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[10:52:36] *** Joins: malloy (~jimery@116.30.221.173)
[11:03:02] *** Joins: kariosfox (~Student@2001:a17:2840:1200:4cab:80c2:464:9b7f)
[11:07:20] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628)
[11:16:31] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[11:18:38] *** Joins: ravan (~ravan@user/ravan)
[11:19:01] *** Joins: Gvidon (~Gvidon@user/gvidon)
[11:19:01] *** Joins: pulse (~pulse@user/pulse)
[11:22:29] <ac_slater> lpapp, I can't help but checkout boost::qvm
[11:28:09] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[11:30:06] *** Quits: kariosfox (~Student@2001:a17:2840:1200:4cab:80c2:464:9b7f) (Quit: Leaving)
[11:35:07] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:35:13] *** Quits: emerent (~quassel@p200300cd5743c3adba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:35:19] *** Joins: emerent (~quassel@p200300cd5743c3f3ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:39:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:40:21] *** Joins: ravan (~ravan@user/ravan)
[11:48:15] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[11:50:36] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[11:51:14] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[12:00:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:01:16] *** Joins: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca)
[12:01:57] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:04:31] *** sonOfRa_ is now known as sonOfRa
[12:05:42] *** Joins: ville (~ville@user/ville)
[12:12:29] *** manjaro-user is now known as Kill-Animals
[12:13:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1544:a8b3:4801:36b5)
[12:14:25] *** Joins: kenan-office (~kenanmara@user/kenanmarasli)
[12:24:17] *** Quits: Kill-Animals (~manjaro-u@199-7-159-112.eng.wind.ca) (Ping timeout: 268 seconds)
[12:25:40] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882)
[12:35:57] *** Joins: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca)
[12:37:02] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:39:47] *** ChanServ sets mode: +o ville
[12:40:12] *** ville changes topic to 'C++ algorithms, libraries, practices, projects, tools. || pastes: https://godbolt.org || stats/logs: https://i.pjj.cc/lb || channels: #c++ #c++-basic #c++-social #geordi'
[12:40:20] *** ville sets mode: -o ville
[12:43:08] *** Quits: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca) (Quit: Konversation terminated!)
[12:43:22] *** Joins: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca)
[12:43:22] *** Quits: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca) (Client Quit)
[12:43:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:43:38] *** Joins: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca)
[12:43:38] *** Quits: manjaro-user (~manjaro-u@199-7-159-112.eng.wind.ca) (Client Quit)
[12:43:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:46:32] *** Joins: Kill-Animals (~anon@199-7-159-112.eng.wind.ca)
[12:52:40] *** Quits: kenan-office (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[12:53:05] *** Joins: kenan-office (~kenanmara@user/kenanmarasli)
[12:56:10] <LordKalma> A super interesting overview of C++23: https://twitter.com/TartanLlama/status/1505918874583248900
[12:56:17] <LordKalma> Exciting times for C++
[12:56:30] <LordKalma> Hum, so now we are officially endorsing godbolt? cool
[12:56:33] <LordKalma> !testcase
[12:56:34] <nolyc> A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[12:56:40] <LordKalma> coool
[12:56:51] <LordKalma> only a shame the multifile support is so janky
[13:03:10] <Haohmaru> you mean compiler explorer? ;P~
[13:04:34] <LordKalma> hahah Godbolt said in a talk he gave he regrets the domain name haha
[13:04:55] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:05:18] <LordKalma> should have been compilerexplorer.com
[13:05:26] <LordKalma> and honestly, the .org is probably the worst part
[13:05:37] <LordKalma> compilerexplorer.com does redirect, at least that
[13:05:37] <Haohmaru> .org is cheap
[13:05:46] <LordKalma> I thought .org was policed
[13:06:10] <Haohmaru> when i was buying my domain, .org and .net were cheap (and at the same price)
[13:06:18] <LordKalma> I have a .com for myself, and it's "cheap"-ish
[13:06:23] <Haohmaru> but i thought "i'm definately not an organization, nor organized)
[13:06:25] <LordKalma> there's cheaper of course, but I didn't want a .xyz hahah
[13:06:59] <Haohmaru> iirc .com was either more $$$ or was taken
[13:07:01] <LordKalma> what I do regret, well, not that I really had a choice, but I'm here building a platform with a friend about a subject that interests us both
[13:07:05] <LordKalma> and we bought a .pt
[13:07:10] <LordKalma> and holy shit managing .pt is a pain
[13:07:27] <LordKalma> many arbitrary BS rules
[13:07:36] <Haohmaru> no idea bout .pt, but .bg are muchos $$$ grande
[13:07:49] <LordKalma> our .pt was actually more or less the price of a .com
[13:07:57] <LordKalma> 12â‚¬ year? + vat? something like that
[13:08:01] <Haohmaru> also .eu was $$$$
[13:09:24] <LordKalma> but we had many problems. I have my .com on a portuguese registrar, and I'm satisfied, so I suggested we buy the .pt in the same place. We couldn't even change the glue records on it... Like, really, wtf
[13:09:52] <LordKalma> I use webmin, and so I want to host my own DNS server, because webmin manages everything, like LE wilcard certificates via dns records, dkim, all that
[13:09:55] <LordKalma> and we couldn't do it, ffs
[13:10:16] <LordKalma> we had to contact the managing entity for all .pt and transfer the management to their website directly
[13:10:31] <Haohmaru> .bg is like 29euro
[13:10:53] <LordKalma> and *then* the dns.pt (that's the place) makes you have two glue records, mandatory, and with two different IP addresses
[13:10:56] <LordKalma> I only have one server....
[13:10:59] <TinoDidriksen> ... #C++-social
[13:11:03] <LordKalma> haha sorry :)
[13:12:33] *** Quits: Gvidon (~Gvidon@user/gvidon) (Remote host closed the connection)
[13:13:54] * Haohmaru sprinkles some randomness over nolyc's head
[13:13:56] <Haohmaru> !fact
[13:13:57] <nolyc> Haohmaru: Values of type bool are either true or false.
[13:14:27] <Haohmaru> until you hit some UB and their neither true nor false
[13:14:31] <Haohmaru> * they're
[13:16:24] <LordKalma> {cout << foo();} bool foo(){;} // It's always true or false
[13:16:24] <geordi> warning: no return statement in function returning non-void
[13:16:33] <LordKalma> geordi, -w
[13:16:33] <geordi> Success
[13:16:57] <LordKalma> what did I just do?
[13:17:08] <Haohmaru> in my case, it was an uninitialized bool var
[13:17:09] <TinoDidriksen> Executed nothing. You forgot the "use"
[13:17:24] <LordKalma> why did it say success then?
[13:17:30] <LordKalma> geordi, use -w
[13:17:31] <geordi> Success
[13:17:37] <ville> it'd run {} likely
[13:17:41] <TinoDidriksen> Now you used -w on the empty code.
[13:17:44] <LordKalma> now it already forgot the code, no?
[13:17:45] <LordKalma> yeah...
[13:17:52] <Haohmaru> geordi show
[13:18:05] <TinoDidriksen> Need that comma
[13:18:24] <Haohmaru> yeah, who even uses punctuation... like.. who?
[13:18:35] <ville> speaking of avr and disassembly how do you guys get disassembly in intel syntax on avr-g++ projects?
[13:19:00] <Haohmaru> i don't know about the syntax, i don't schprachen ze ASM
[13:19:03] <LordKalma> copy paste your code to godbolt :p
[13:19:29] <Haohmaru> i do generate a listing file from the linker.. or was it objdump
[13:19:36] <Haohmaru> ..of the final .elf
[13:19:52] <ville> i am passing in -masm=intel, man page claims it's supported, but then: cc1plus: error: unrecognized command-line option '-masm=intel'
[13:20:20] <LordKalma> I wish godbolt offline supported just giving it a compile_commands.json
[13:20:28] *** Joins: Gvidon (~Gvidon@user/gvidon)
[13:20:30] *** Quits: Gvidon (~Gvidon@user/gvidon) (Remote host closed the connection)
[13:20:59] <Haohmaru> "avr-objdump -h -S $(TARGET_OUTPUT_FILE) > $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).lss"
[13:21:22] <Haohmaru> LordKalma "compiler explorer"
[13:21:58] <LordKalma> I wish Godbolt wrote support for giving CE offline a compile_commands.json
[13:21:58] <ville> also apparently `man avr-g++` just is the gcc man page
[13:22:25] <ville> so...
[13:22:32] <Haohmaru> ville another possibly useful option is to load the .elf in Radare/Cutter, it knows some avr MCUs and can give explanations about the instructions
[13:22:34] <LordKalma> in 0-10, what's the half-assed rating of avr-g++?
[13:22:55] <ville> Haohmaru: trying to get rmsbolt to work: https://gitlab.com/jgkamat/rmsbolt
[13:23:16] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[13:23:33] <Haohmaru> what's this o_O
[13:23:55] <LordKalma> WOW I wish I had that on vscode :(
[13:24:05] <ville> Haohmaru: an addon for emacs that gives you disassembly with the hit of a button in your editor
[13:24:07] <Haohmaru> something like compiler-explorer but offline, in the emacs thing?
[13:24:24] <Haohmaru> right, so that's for h4x0rz
[13:24:38] <ville> and also you don't have to install anything like godbold and its webcrap dependencies
[13:24:39] *** Joins: robod34 (Username@79.113.200.158)
[13:24:42] <ville> godbolt
[13:25:00] <LordKalma> I already use a browser for my editor so that I wouldn't mind haha
[13:25:01] <Haohmaru> ville i don't think i'll recognize ASM syntax so no idea about that, perhaps mr Ameisen would know more
[13:25:05] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:26:06] <Haohmaru> i mean, when i see "ASM" i'm like an american seeing cyrillic.. "it looks like russian to me, yeah"
[13:28:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:15] <ville> LordKalma: avr-gcc is mostly alright. you get to do -std=c++20. of course you dodn't get the c++ standard library, but that wouldn't do you much good anyways possibly depending on your disposition on exceptions and such
[13:29:18] <Haohmaru> ville compiler explorer is pretty heavy (the mere page.. they've put so much www fanciness in it), but if you can get your intel syntax in there, then it should be doable.. avr-gcc is available there
[13:41:20] <Haohmaru> ville there's no #avrgcc channel, avrgcc is on topic, altho not a favorite topic in #gcc ;P~
[13:41:50] <Haohmaru> Ameisen know more about these topic, including ASM
[13:41:53] <Haohmaru> * knows
[13:42:29] <Haohmaru> ville what are you currently using to generate the asm output?
[13:42:36] <Haohmaru> avr-objdump?
[13:43:23] <Haohmaru> or the other scheme where you generate asm listing from each .o individually (iirc this scheme doesn't work when you use -flto)
[13:43:29] <ville> on regular gcc/g++ projects just the compiler frontend directly
[13:44:49] <Haohmaru> for objdump this is all i found: https://stackoverflow.com/questions/10362630/how-can-objdump-emit-intel-syntax
[13:50:32] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4.1)
[13:51:18] *** Joins: paul424 (~tom@ip-5-172-234-96.multi.internet.cyfrowypolsat.pl)
[13:51:53] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:53:41] *** Joins: Furai (~Furai@furai.pl)
[14:06:39] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[14:13:03] *** Joins: plastico (~plastico@neomutt/plastico)
[14:15:56] *** gentooclimax is now known as climax
[14:16:54] *** climax is now known as gentooclimax
[14:29:59] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[14:31:02] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:34:22] *** Joins: ravan_ (~ravan@user/ravan)
[14:34:28] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[14:34:53] *** gentooclimax is now known as climax
[14:38:15] <PJBoy> that looks right
[14:38:28] * PJBoy has fond memories of objdump and dumpbin
[14:44:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:23] *** ChanServ sets mode: +v npaperbot
[14:45:20] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[14:46:10] *** Joins: toulene (~toulene@user/toulene)
[14:51:23] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:55:20] *** climax is now known as gentooclimax
[14:57:16] *** Joins: ivii (~ivan@user/ivii)
[15:04:55] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[15:05:47] *** Joins: toulene (~toulene@user/toulene)
[15:08:18] <fiesh> objdump -dSrwC -Mintel is what you want normally
[15:11:07] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 256 seconds)
[15:13:33] * PJBoy checks manual
[15:14:12] <PJBoy> don't think I've ever used -r
[15:14:18] <PJBoy> but yeah those all look good
[15:14:28] * PJBoy writes down
[15:14:55] <Haohmaru> <useful_things.txt>
[15:15:10] <PJBoy> --visualize-jumps=color looks interesting too
[15:18:04] *** Joins: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377)
[15:20:37] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:20:38] <fiesh> I have objdump aliased to the version above... but adding --visualize-jumps=extended-color seems reasonable, yeah
[15:21:59] <Haohmaru> "the fiesh eye can see more colors than the human eye"
[15:22:37] <fiesh> lol
[15:23:11] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[15:26:57] *** Joins: seninha (~seninha@user/seninha)
[15:27:30] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:41:24] <PJBoy> ouch
[15:42:07] <PJBoy> this code calls some external API that has an `int&` out parameter
[15:42:08] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[15:42:27] <Haohmaru> is that bad?
[15:42:34] <Haohmaru> i've done that sometimes
[15:42:36] <PJBoy> and it turns out that it's somehow only setting some of the bits of it
[15:42:38] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[15:42:55] <Haohmaru> aww
[15:43:03] <PJBoy> probably due to a memcpy, but possibly due to some bitwise operations
[15:43:20] <PJBoy> so we need to initialise this int to 0 before passing it D:
[15:43:32] <PJBoy> that was a tricky one to find
[15:43:39] <LordKalma> who needs sane APIs anyway, we're strong man
[15:44:10] <LordKalma> https://twitter.com/m_ou_se/status/1506221465116585984  hum.......
[15:44:21] <Haohmaru> you wouldn't wanna toss an uninitialized var to such function unless you're sure it always initializes it inside
[15:44:42] *** Quits: ville (~ville@user/ville) (Ping timeout: 268 seconds)
[15:45:00] <PJBoy> it does always set the integer
[15:45:13] <PJBoy> it just for some reason preserves the upper bits
[15:45:49] <LordKalma> speaking of
[15:46:01] <Haohmaru> optimizations?
[15:46:12] <PJBoy> also man, that's some idealistic shit in that tweet
[15:46:13] <LordKalma> that thread of Sy says C++23 will have facilities for in_out and out unique_ptr stuff
[15:46:17] <LordKalma> great for C++
[15:46:26] <PJBoy> "give me money so I don't need to work, but also don't expect anything for that money"
[15:46:26] <LordKalma> *C++/C interfacing, I mean
[15:46:56] <LordKalma> the mean "don't expect me to work on *your* priorities
[15:46:59] <LordKalma> but I get what you mean
[15:47:18] <LordKalma> https://twitter.com/TartanLlama/status/1505948479885041668  // These. These look like nice features
[15:47:36] <PJBoy> yeah I still haven't looked at those properly to see how much effort they save
[15:47:50] <PJBoy> I've been using smart pointers with C APIs without a hitch so far
[15:48:23] <PJBoy> man this guy tweets a lot wtf
[15:48:55] <Haohmaru> they gotta call him Sir-Tweet-A-Lot
[15:49:11] <LordKalma> Sy Brand? More like Sy-ren?
[15:49:13] <LordKalma> get it?
[15:49:17] <LordKalma> I'll see myself out
[15:49:23] <PJBoy> because they're alarming?
[15:49:38] <LordKalma> it was because they shout (tweet) a lot, but yeah, that's the idea
[15:49:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[15:49:50] <PJBoy> nice
[15:56:37] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:10:55] *** flooded is now known as _flood
[16:16:21] *** Joins: ville (~ville@user/ville)
[16:18:49] <PJBoy> yo MS said they fixed the static_assert(false) bug I submitted
[16:18:49] <very_sneaky> lol that tweet is so entitled
[16:18:54] <PJBoy> ikr
[16:19:07] <very_sneaky> "amazon gave me 15k, hey microsoft, google, meta - give me some too"
[16:20:05] <PJBoy> those companies can just pay employees to work on rust if they really wanted to
[16:20:32] <PJBoy> an entire team even
[16:20:37] <very_sneaky> yup
[16:20:39] <very_sneaky> oh to have resources
[16:22:08] <PJBoy> makes me wonder if any of those companies would care about rust
[16:22:22] <PJBoy> meta is pretty knee deep in C++ from what I've seen at cppcon
[16:22:35] <PJBoy> MS like their C# and .NET stuff
[16:23:12] <very_sneaky> i mean, having said that, msvc is the only feature complete compiler out atm
[16:23:33] <PJBoy> oh yeah, ain't that interesting
[16:23:43] <very_sneaky> for C++20 anyway
[16:23:44] <PJBoy> so they're pretty invested in C++ and C# et al
[16:24:28] <PJBoy> they've got the best C++23 library support too
[16:24:32] <very_sneaky> gcc isn't far off - 3 partial complete features and 2 features not present
[16:24:37] <PJBoy> but yeah falling behind on C++23 language
[16:24:49] <very_sneaky> i'm not sure how exhaustive the list on cppreference is though
[16:25:05] <PJBoy> gcc and clang need to focus on C++20 <_<
[16:25:09] <very_sneaky> i don't see much of the std::chrono extension on their list
[16:25:23] <very_sneaky> yeah that's what i mean: https://en.cppreference.com/w/cpp/compiler_support/20
[16:25:24] <PJBoy> they have far too many implemented C++23 features to not be C++20 complete
[16:25:24] *** Quits: proller (~p@2a02:6b8:b081:b407::1:10) (Ping timeout: 252 seconds)
[16:25:32] <very_sneaky> gcc isn't _too_ far off
[16:25:40] <very_sneaky> apple-clang is woeful
[16:25:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[16:25:55] <PJBoy> GCC only need modules, not bad
[16:26:09] <PJBoy> on the language side
[16:26:28] <very_sneaky> they don't have std::format or atomic compare-and-exchange, whatever that is
[16:26:34] <PJBoy> by chrono extension, do you mean P0355?
[16:26:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[16:27:31] <very_sneaky> i mean introduction of howard hinants tz database, and clock expansion, so std::chrono::{utc,tai,gps,file}_clock
[16:27:31] <PJBoy> GCC haven't finished ranges yet, huh
[16:27:52] <very_sneaky> clock_cast, the calendar features etc
[16:27:59] <PJBoy> ok those are P0355
[16:28:05] <PJBoy> which is listed
[16:28:21] <very_sneaky> oh i'm blind, calendar and timezone is there
[16:28:25] <very_sneaky> i was searching for chrono
[16:29:07] <PJBoy> how have they not merged std::format yet
[16:29:57] <very_sneaky> wow
[16:30:05] <very_sneaky> you're right, gcc have made incredible progress on 23
[16:30:47] <very_sneaky> even the library features are pretty well implemented
[16:31:18] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:31:34] *** Joins: toulene (~toulene@user/toulene)
[16:32:21] <very_sneaky> interesting. clang still isn't c++17 complete
[16:32:37] <very_sneaky> this is actually some motivation to start prioritising gcc over clang
[16:33:06] <very_sneaky> but wait, you can compile libstdc++11 with clang - is there a difference here?
[16:33:28] <PJBoy> yeah libc++ gets no love
[16:33:36] *** Joins: Gvidon (~Gvidon@user/gvidon)
[16:33:41] <very_sneaky> is that what these pages represent though?
[16:33:52] <very_sneaky> like, not the compiler themselves, but the std c++ lib implementation
[16:34:02] <PJBoy> well if you look at the header row
[16:34:07] <PJBoy> "clang libc++"
[16:34:16] <PJBoy> it used to just be libc++, but people got confused
[16:34:42] <very_sneaky> gotcha, so core language features is specific to the compiler binary, but library features are stdlib specific?
[16:34:48] <PJBoy> yeah
[16:35:04] <very_sneaky> so if i compile libstdc++11 with clang, i gain/lose the language features of clang, but the library features should be identical
[16:35:06] *** Joins: markong (~kvirc@213.146.188.203)
[16:35:07] <PJBoy> of course some library features require compiler support
[16:35:21] <very_sneaky> gotcha, which i assume is why you can't build libc++ with gcc
[16:35:50] <PJBoy> yeah
[16:35:57] <PJBoy> and clang doesn't always agree with libstdc++
[16:36:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:36:14] <very_sneaky> i haven't had any problems with clang and libstdc++ so far
[16:36:17] <PJBoy> like you can try and use libstdc++'s ranges stuff with clang
[16:36:21] <PJBoy> but it won't work too well
[16:36:31] <very_sneaky> i'm using them
[16:36:36] <LordKalma> I Want C++ on free compilers :(
[16:36:44] <PJBoy> oh really?
[16:36:52] <LordKalma> C++20*
[16:36:52] <PJBoy> I *always* have issues using ranges with clang
[16:36:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:36:57] <very_sneaky> ranges::all_of, anyway
[16:37:17] <PJBoy> alright good to know
[16:37:21] <very_sneaky> it doesn't work with macos though, so i'm considering dropping it
[16:37:22] <PJBoy> might just be the views that it doesn't like
[16:37:41] <very_sneaky> i'm not sure it's more readable than a foreach loop
[16:37:45] <PJBoy> I need to make some tweets demanding big corps pay me to work on clang
[16:37:47] <very_sneaky> or, range based for loop
[16:38:16] <very_sneaky> i'm happy to pile on if that's helpful :P
[16:38:50] <PJBoy> all_of does initially strike me as better, semantically
[16:39:27] <very_sneaky> i think the for loop is reasonably clear semantically
[16:39:44] <PJBoy> I do agree with that
[16:40:09] <PJBoy> but I could totally argue the all_of side
[16:40:18] <very_sneaky> can you sell me on it?
[16:40:40] <PJBoy> I mean it's like a comment that's enforced with code
[16:40:51] <PJBoy> you're saying what you're doing, so the reader doesn't even need to think about it
[16:41:10] <PJBoy> you're like "all of" and the reader's like "all of what?" and then they'll see
[16:41:34] <very_sneaky> i have somehting like { std::ranges::all_of(v.begin(), v.end(), []() { const auto& a) { if (!a) return false; return true; } }
[16:41:48] <PJBoy> and then in code review, the reviewer won't need to spend a couple seconds sanity checking the for loop
[16:42:26] <PJBoy> .begin and .end? >_>
[16:42:35] <very_sneaky> iterators?
[16:42:42] <PJBoy> that's not very rangey
[16:42:51] <very_sneaky> i'm probably doing it wrong
[16:42:58] <PJBoy> it looks like `std::ranges::all_of(v)` would be enough
[16:42:58] <very_sneaky> i think this might have been the suggestion by clang tidy lol
[16:43:31] <PJBoy> unless your lambda does something more, then `std::ranges::all_of(v, lambda)`
[16:44:56] <very_sneaky> this is the cppreference example: https://coliru.stacked-crooked.com/view?id=604ba9d5a1f95006
[16:45:01] <very_sneaky> they literally use the iterators
[16:45:10] <very_sneaky> yeah, that is tidier though.
[16:45:23] <PJBoy> yeah that's just for the sake of showing the iterator pair overload
[16:45:32] <very_sneaky> i should consider named lambdas more - a much more fp approach
[16:46:00] <PJBoy> definitely
[16:46:08] <PJBoy> not enough people used named lambdas >:(
[16:46:11] <very_sneaky> i have a lot to consider more :(
[16:46:17] <LordKalma> functional-programming, data-oriented, test-driven, modern C++. // Did I win the Bingo?
[16:46:19] <very_sneaky> my api design is horrible i discovered
[16:46:30] <very_sneaky> also my approach to unit testing
[16:46:38] <very_sneaky> which, in fairness, is a symptom of my bad api design
[16:46:50] <LordKalma> very_sneaky, that's because you code too much and use the pen and paper too less :p
[16:47:04] <very_sneaky> lol, not even
[16:47:15] <very_sneaky> spend too much time configuring conan pipelines
[16:58:32] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:01:10] *** Joins: john99 (~john99@102.246.103.34.bc.googleusercontent.com)
[17:02:46] *** Quits: paul424 (~tom@ip-5-172-234-96.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[17:07:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:07:41] *** Joins: jokoon (~eio@2a01:e0a:542:e160:717a:dffa:a9a:49b5)
[17:13:09] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[17:13:43] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[17:19:37] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[17:26:23] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:27:54] * Haohmaru warms up nolyc
[17:27:56] <Haohmaru> !fact
[17:27:57] <nolyc> Haohmaru: Assignment to a reference assigns to the object referred to by the reference.
[17:32:47] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:35:36] <PJBoy> can confirm
[17:36:05] <Friithian> can confirm, am refernce
[17:36:20] <Haohmaru> i'll reference PJBoy
[17:36:27] <PJBoy> then the compiler applauded
[17:36:50] <PJBoy> and Microsoft gave out a sponsorship of 15k to some twitter user
[17:37:16] <Haohmaru> did M$ buy twitter?
[17:37:51] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 250 seconds)
[17:38:59] *** Joins: lispy (~lispy@user/lispy)
[17:40:09] *** Quits: Kill-Animals (~anon@199-7-159-112.eng.wind.ca) (Ping timeout: 256 seconds)
[17:42:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[17:43:12] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882) (Quit: Leaving)
[17:43:56] *** Joins: toulene (~toulene@user/toulene)
[17:44:03] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[17:44:26] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:51:27] <rpav> is twitter worth that little? i mean, monetarily
[17:56:47] *** Joins: darkbit (~db@152.32.100.99)
[17:58:33] <LordKalma> PJBoy, that sponsor to mara was from AWS, not MS
[17:58:41] <PJBoy> yeah I know
[17:58:50] <Haohmaru> <close_enough.jpg>
[17:59:43] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[18:02:33] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:05:11] <Alipha> Haohmaru: presumably geordi commands require either `geordi,` or `geordi:` so that geordi isn't triggered in regular conversation by people beginning a message with "geordi", e.g., "geordi is awesome"
[18:05:39] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:05:42] <Haohmaru> i was lazy
[18:06:23] <Haohmaru> geordi, you are the precious
[18:06:23] <geordi> error: 'you' does not name a type
[18:06:25] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:07:03] <LordKalma> what kind of IRC client doesn't autocomplete nicks with ", "?
[18:07:29] <Haohmaru> one configured to do so
[18:07:46] <Haohmaru> btw, i hate that
[18:08:07] <Haohmaru> i hate even appending a mere space
[18:08:47] <Alipha> i autocomplete with : which works fine
[18:09:04] <Haohmaru> i put , or : when i want to
[18:09:05] <Alipha> geordi: int main() { cout << "i'm a good boy"; }
[18:09:05] <geordi> i'm a good boy
[18:09:41] <PJBoy> I autocomplete with ,
[18:10:45] <PJBoy> geordi << "I'm a good boy";
[18:10:46] <geordi> I'm a good boy
[18:10:54] * PJBoy shrugs
[18:12:08] <ashafq> LordKalma: That's Hexchat's default option
[18:12:19] <ashafq> LordKalma: I had to change that to ":"
[18:12:24] <Alipha> oh, interesting
[18:14:08] <LordKalma> I prefer ", "
[18:14:51] <Alipha> LordKalma--i prefer --
[18:15:15] *** Joins: fluter (~fluter@user/fluter)
[18:16:29] <Haohmaru> yeah, hexchat is ", " by default, f*ck it
[18:16:44] <Haohmaru> hexchat also by default changes "teh" to "the"
[18:17:23] <PJBoy> chatzilla default was ": " IIRC
[18:17:29] <PJBoy> and I had to change it to comma
[18:17:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[18:22:33] <very_sneaky> weechat is : by default
[18:41:03] <Haohmaru> !fact
[18:41:04] <nolyc> Haohmaru: An elaborated-type-specifier can also be used as a type-specifier as part of a declaration.
[18:41:17] <Haohmaru> a what
[18:41:45] <Haohmaru> nolyc could you elaborate
[18:41:46] <nolyc> Haohmaru: Error: "could" is not a valid command.
[18:41:48] <Friithian> an elaborated-type-specifier
[18:41:58] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:44:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:24] *** ChanServ sets mode: +v npaperbot
[18:46:45] *** Quits: kenan-office (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[18:48:58] <ashafq> Haohmaru: You can change auto replace settings to remove the "teh" entry.
[18:49:35] <Haohmaru> i did.. but i struggled with it for a long time
[18:50:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:55:15] *** Joins: jsbach_ (~jsbach@2a01:c22:a861:c200:b455:8fb0:343e:163a)
[18:56:13] *** Quits: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064) (Ping timeout: 240 seconds)
[18:56:17] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[19:00:58] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:02:13] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[19:02:13] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[19:02:13] *** Joins: Alipha (~AliphaX@user/alipha)
[19:04:09] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:08:15] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:08:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:09:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[19:11:16] <OnlineCop> !POD
[19:11:17] <nolyc> POD is http://www.informit.com/guides/content.aspx?g=cplusplus&seqNum=309 . Scalar types (see !scalar), POD-struct types (see !podstruct), POD-union types, arrays of such types and cv-qualified versions of these types are collectively called POD types. The acronym POD stands for `plain old data.'
[19:12:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:12:08] <OnlineCop> If I want to pass a struct into a function (to avoid passing in an ever-changing number of parameters), is it typical to include a ctor/dtor?
[19:18:21] <Raziel> OnlineCop, that depends? overloaded ctors can help with the ever-changing number issue
[19:18:31] <Alipha> OnlineCop: if it's just a "bag of data", then no. if it's a "class with invariants", then you should probably have a constructor and private member data. you shouldn't need your own destructor because you should be using "RAII members" which clean up themselves.
[19:18:32] <Raziel> dtors are usually not required unless you're doing fancier things
[19:20:31] <OnlineCop> Mainly plain types (doubles) and const-refs of vectors.
[19:21:00] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[19:21:12] <OnlineCop> Out of habit, I've often supplied ctors/dtor, but I don't know whether adding a default ctor will make passing in an initialization list no longer available.
[19:24:02] <PJBoy> if by that you mean aggregate initialisation
[19:24:06] <Alipha> reference members are generally a bad idea. you can't change what a reference refers to, so that often makes writing assignment operators not possible. generally, just use pointers instead
[19:24:08] <PJBoy> then yeah adding ctors prevents that
[19:25:42] *** Quits: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[19:27:47] *** Joins: xkuru (~xkuru@user/xkuru)
[19:28:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:28:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[19:30:50] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[19:31:01] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:33:23] *** hesse is now known as TheHermann
[19:36:24] <Raziel> Alipha, ref wrapper sez hi
[19:36:26] <Raziel> :^)
[19:36:40] <Alipha> Ugh, no
[19:37:10] <Raziel> Alipha, also, is this a decent way to make a refcounting, "self-cleaning" main store that other collections will tap into? https://wandbox.org/permlink/5DZRVhPUSzryklee
[19:39:45] *** Quits: jokoon (~eio@2a01:e0a:542:e160:717a:dffa:a9a:49b5) (Quit: Leaving)
[19:42:12] *** Quits: Tokamak (~Tokamak@107.116.82.179) (Ping timeout: 240 seconds)
[19:42:42] <Alipha> Raziel: I would have a map of weak_ptrs and have CreateFoo return a shared_ptr. Then you can go the extra mile and have a custom shared_ptr deleter that automatically removes foos from fooStore.
[19:43:12] <Raziel> weak_ptrs for the maps other than the main store?
[19:43:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:44:17] *** Joins: pulse (~pulse@user/pulse)
[19:45:20] <Alipha> No, weak_ptr in the main store and shared_ptr elsewhere. Or I'm not understanding the purpose of this. Mostly I'm surprised CreateFoo doesn't return a shared_ptr to the Foo it created.
[19:45:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:46:00] *** Joins: Tokamak (~Tokamak@107.116.82.179)
[19:46:58] <Raziel> hmmmmm
[19:48:17] <Alipha> Ideally, you'd want Foos to be removed from the store automatically after all references to them elsewhere are gone, right? Without having to call CleanStore?
[19:49:41] <Raziel> I do think that'd at least be faster, since the iterative clean might get a bit slow if the store is large enough, I'd imagine
[19:50:17] <Raziel> but it would also take some design changes to where things are loaded and unloaded, to make sure they don't get removed before the new stuff tries to get the same one again and then has to re-load it off disk
[19:51:18] <Raziel> (this is mostly for assets getting loaded off disk and freed when no part of the platform needs them anymore, and that's usually during an unload-old-stuff and load-new-stuff pass when switching screens or whatever)
[19:52:29] <Raziel> the "problem" in that case is, I don't know how much of the new stuff was also included in the old stuff before I actually load the new stuff, so I might not want to destroy the old stuff before doing that
[19:52:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:56:54] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 260 seconds)
[19:57:02] *** Joins: Tokamak_ (~Tokamak@172.58.188.152)
[19:57:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:57:42] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[19:57:57] *** Quits: Tokamak (~Tokamak@107.116.82.179) (Ping timeout: 240 seconds)
[19:58:58] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[20:00:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 268 seconds)
[20:01:01] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[20:02:36] *** Joins: Tokamak (~Tokamak@166.205.152.100)
[20:03:00] *** Quits: Tokamak_ (~Tokamak@172.58.188.152) (Ping timeout: 240 seconds)
[20:04:26] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[20:05:09] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[20:07:39] *** Joins: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net)
[20:10:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:12:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[20:17:50] *** Joins: pah (~pah@user/pah)
[20:18:03] *** Quits: pa (~pah@user/pah) (Ping timeout: 252 seconds)
[20:18:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a)
[20:18:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a) (Changing host)
[20:18:07] *** Joins: skapata (~Skapata@user/skapata)
[20:20:14] *** pah is now known as pa
[20:23:30] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Ping timeout: 260 seconds)
[20:25:40] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:31:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:31:43] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[20:32:40] <rpav> it's BS that out-of-line member functions aren't implicitly inline (right)
[20:34:02] <rpav> it's really _kindof_ bs that all functions in headers aren't implicitly inline unless explicitly static, but member functions _can't_ be static (as in per-file static) afaict
[20:39:43] *** Joins: paul424 (~tom@ip-5-172-239-101.multi.internet.cyfrowypolsat.pl)
[20:42:47] <mort> yea
[20:42:57] <Alipha> Header files don't exist by the time the compiler sees it
[20:44:49] <mort> is there a reason why all static functions couldn't be inline though
[20:45:10] <PJBoy> static and inline have opposite linkage
[20:45:11] <mort> I suppose maybe inline lets the linker omit them from an so if nothing is calling them
[20:45:29] <mort> sorry, I meant why all non-static functions couldn't be inline
[20:51:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:53:46] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:54:57] <PJBoy> would cost compilation time
[20:55:21] <PJBoy> if you do LTO or unity build, then it very much is like all non-static functions are inline
[20:56:26] <rpav> PJBoy: there is no way to have a non-static-declared member function; also i don't see any detriment to always having `inline` before any function that is also not explicitly defined/declared static
[20:56:38] <rpav> err, non-static-declared member function be implemented statically
[20:57:01] <PJBoy> you can have a class in an anonymous namespace
[20:57:52] <PJBoy> and yeah, compile times
[20:57:55] <rpav> also, only tangentially related in that we could have nice things, why isn't there an "rvalue-copy" type
[20:58:23] <PJBoy> a what
[20:58:34] <rpav> e.g., the function wants something it's going to move, like std::string, but you could pass in an lvalue or anything and a copy is created
[20:58:46] <PJBoy> oh so the new auto copy
[20:58:47] <rpav> unless it gets passed an rvalue, in which case no need
[20:59:03] <rpav> oh they added something?
[20:59:14] <PJBoy> `void f(string x) { g(auto(x)); }`
[20:59:18] <PJBoy> x is copied
[20:59:38] <rpav> ðŸ¤”
[20:59:53] <rpav> really doesn't do much except make you type slightly less
[21:00:19] <PJBoy> yeah it's pretty simple
[21:00:20] <rpav> my goal is to have _implicit_ move available
[21:00:33] <rpav> e.g. `void f(string&& x) : g(x) {}`
[21:00:46] <PJBoy> oh you want herb's forward parameters
[21:00:48] <rpav> but you can std::string v = "..."; f(v);
[21:00:53] <PJBoy> where it forwards on last definite use
[21:01:07] <rpav> that sounds better yeah
[21:01:17] <rpav> someone ought to put that guy in charge of the language heh
[21:01:25] <PJBoy> yeah I really want that
[21:01:33] <rpav> well
[21:01:50] <rpav> actually i'm not sure .. does that still accept lvalues and rvalues and do the right thing?
[21:01:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:20b1:b36f:805d:9afa)
[21:02:07] <PJBoy> yeah sure
[21:03:39] <rpav> bah gcc still has terrible errors
[21:04:01] <rpav> no one must use variant because it's a huge mess
[21:07:17] <PJBoy> language variant when
[21:07:36] *** Joins: mekor (~mekor@mekor.vpk.bme.hu)
[21:08:35] *** Quits: mekor (~mekor@mekor.vpk.bme.hu) (Client Quit)
[21:09:37] <rpav> library better than language
[21:09:51] <rpav> syntax nice though; custom syntax when
[21:10:04] <rpav> tuple integration everywhere though would be excellent
[21:26:36] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 245 seconds)
[21:28:21] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:32:03] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:32:11] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[21:34:35] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[21:35:35] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[21:39:04] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[21:40:38] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:43:04] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[21:44:13] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[21:53:40] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[21:58:31] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[22:07:17] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[22:07:47] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[22:19:17] *** Quits: Tokamak (~Tokamak@166.205.152.100) (Ping timeout: 240 seconds)
[22:19:54] *** Joins: john99 (~john99@102.246.103.34.bc.googleusercontent.com)
[22:21:27] <rpav> bah what's a reasonable (non-std::any :p) way to allocate blocks of arbitrary types all owned by a single struct
[22:21:37] <Friithian> void* *runs*
[22:21:59] *** Joins: Tokamak_ (~Tokamak@107.116.82.163)
[22:22:06] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:22:38] <rpav> void* is just a mechanic and and not really a full solution
[22:23:30] <rpav> like you could have an unordered_map<type<T>, void*> that mapped to a std::vector<T>
[22:23:51] <rpav> for some struct type<T> that was purely for mapping types to values
[22:25:19] * Raziel glances at his typeid mappings to std::any, then looks back at chat
[22:25:22] <Raziel> no idea fam
[22:25:36] <rpav> er. specifically you'd have unordered_map<type, void*> or similar with `type` as a base of type_impl<T> with a static pointer value representing its value etc etc etc
[22:26:39] <rpav> Raziel: eugh that adds a few more indirections
[22:27:45] <Raziel> I know :p I mean, I'd take a better way if I could find one. But the only other realistic way I've seen is a shitload of overloads instead of a mapping, which, yeah.
[22:28:35] <rpav> the real issue afaict is storing arbitrary vector<T> (or deque<T> or whatever)
[22:29:45] <rpav> the above is one virtual call to get a custom type ID from a type which might not be too bad .. a vector/deque add another but both are probably cache hits if you're allocating the same thing a lot in a row?
[22:30:28] <Raziel> I'd imagine so
[22:34:32] <Gamah> is it safe (up to values in the low billions) to use float for only half values? or is there a chance that errors could add up to over 1 whole number of difference after lots of iterations?
[22:35:32] <rpav> "half values"?
[22:35:32] <Gamah> so like... double y = 0.0; for(long x;x<5000000000;x++){y += 0.5;)
[22:35:41] <Gamah> i guess i could just run that and see...
[22:35:48] <rpav> good plan
[22:36:01] <Gamah> but some backround knowledge about why/why not would be nice
[22:36:04] <rpav> not sure if foolproof or portable but
[22:36:16] <PJBoy> << setprecision(100) << 5000000000.f + 1
[22:36:16] <geordi> 5000000000
[22:36:26] <Gamah> i'd really like to use floats instead of implementing "half units" as longs
[22:36:28] <PJBoy> think 23 bits of precision aren't gonna cut it
[22:37:03] <Gamah> the numbers are unlikely to actually get into the low billions... that's like 4+ standard deviations high
[22:37:13] <Gamah> more likely to stay in the mid millions
[22:37:24] <rpav> double or nothing
[22:37:24] <Gamah> i guess i meant double, not float sorry
[22:37:49] <Gamah> but double is safe to be used in this way? no weird gotchya's like 0.1+0.2?
[22:37:59] <Gamah> rpav: it is ironically for blackjack code...
[22:38:43] <PJBoy> double gets 53 bits
[22:38:52] <rpav> Gamah: hopefully not for money
[22:39:07] <PJBoy> << setprecision(100) << 5000000000 + 0.5
[22:39:09] <Gamah> rpav: no, the smallest possible value is 0.5
[22:39:14] <geordi> 5000000000.5
[22:39:15] <PJBoy> so that's not too bad
[22:39:30] <PJBoy> sounds like you could just work with integers
[22:39:44] <Gamah> PJBoy: but what about... like... 8739384579.5? because 5 billion works can i trust that everything below it works?
[22:39:46] <PJBoy> where the working values are twice what they should be
[22:40:26] <rpav> struct count { int value; bool hasHalf : 1; }; // *runs*
[22:40:30] <Gamah> PJBoy: yeah... that's probably the right approach, and more portable, and faster.... but i don't /like/ it :(
[22:40:30] <PJBoy> yeah what matters is the highest and lowest bits set
[22:41:18] <Gamah> highest and lowest set, can you elaborate? i get the gist of how floats are stored but why does highest/lowest mean everything in between is safe?
[22:41:48] <PJBoy> so your highest bit is the 4294967296 bit
[22:41:52] <PJBoy> and your lowest bit is the 0.5 bit
[22:41:58] <rpav> std::hash .. #include <functional> .. ah yes _that's_ intuitive
[22:42:24] <PJBoy> so if you were to map those onto integers, that'd be an integer in the range 0..8589934591
[22:42:36] <Gamah> ah...
[22:42:38] <Gamah> thanks!!
[22:42:39] <PJBoy> which needs 33 bits
[22:42:46] <PJBoy> so that's less than the 53 bits a double can represent
[22:43:01] <Gamah> wait maybe i'm not making it clear on what my fear is
[22:43:25] <Gamah> is it just a JS thing that gets float math weird sometimes?
[22:43:47] <PJBoy> JS has the same doubles
[22:44:00] <Gamah> but if i print(0.1+0.2) in chrome's js console...
[22:44:15] <PJBoy> same in C++
[22:44:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:44:18] <Gamah> i guess as long as i'm rounding to halves it doesn't matter
[22:44:22] <PJBoy> 0.1 and 0.2 can't be represented exactly
[22:44:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:26] *** ChanServ sets mode: +v npaperbot
[22:44:26] *** Joins: mint (~mint@46.159.204.49)
[22:44:27] <Gamah> but halves can
[22:44:35] <PJBoy> but any power of 2 can, yeah
[22:44:37] <PJBoy> including negative powers
[22:44:44] <Gamah> okay now i think i'm on board
[22:44:49] <Gamah> appreciate you bearing with me
[22:44:49] <PJBoy> up to some maximum exponent that I don't remember
[22:45:19] <Gamah> i guess now i need to actually consider the overhead of float vs int
[22:45:29] <Gamah> becausae moving them around is more cycles than int, right?
[22:46:09] <PJBoy> it's not obvious to me whether floating point operations are slower than the equivalent integer operations on modern architectures
[22:46:25] <PJBoy> especially when you bring SIMD operations into the mix
[22:46:38] <Gamah> gprof is a thing, i guess if i need to go that far... for now i can at least just re-type things in place
[22:53:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1544:a8b3:4801:36b5) (Ping timeout: 268 seconds)
[22:56:51] *** Joins: lispy (~lispy@user/lispy)
[22:57:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:18b3:ab56:6ddb:c942)
[22:59:44] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[23:05:56] <rpav> try_emplace sucks / isn't useful (?) for polymorphic values, e.g. unique_ptr<Base>
[23:06:10] <MaddHatter> float math does get weird, but it's not so bad that it loses tens of orders of magnitude of precision
[23:06:39] <rpav> MaddHatter: it doesn't?
[23:06:52] <rpav> well, loses _when_, i guess
[23:07:16] <MaddHatter> rpav: I mean, a sufficiently determined idiot will find a way, but in general, no
[23:07:20] <rpav> as it grows, it definitely loses tens of orders of magnitude of precision
[23:08:03] <PJBoy> yeah indeed
[23:08:54] <rpav> one easy way to blow up is using regular `float` for counting ms .. you run out of precision in a few hours or a day or so
[23:09:06] <MaddHatter> if you're doing (value*2**-999)*2**999 then you qualify as aforementioned idiot
[23:09:26] <rpav> but float _starts_ with a lot of precision
[23:09:37] <rpav> MaddHatter: it's a lot lot easier than that
[23:10:03] <rpav> (or to be specific, you have a float value in seconds and you're counting ms)
[23:10:17] <MaddHatter> so the question was, "can I add 0.5+0.5+0.5+0.5+..." safely?
[23:10:47] <MaddHatter> nobody is doing to lose tens of orders of magnitude doing that
[23:10:55] <rpav> that's actually not too bad given floats are binary and as PJBoy pointed out you can predict when you lose that precision
[23:11:06] <rpav> but if you want to guarantee it, probably best not to use a float
[23:11:25] <MaddHatter> I mean, I agree the best solution is to just using uint* and 2*value
[23:11:30] <PJBoy> if you're dealing with stuff that could just as easily be scaled into integers, it should be safe
[23:11:30] <rpav> MaddHatter: you will pretty quick =P
[23:11:47] <rpav> like, what are you thinking "an order of magnitude" is
[23:13:33] <paul424> Suppose I just modified one of the Config.h file and "This file is automatically generated by CMake and should be changed by setting CMake options and regenerating, rather than editing directly. " my build system -- snapcraft will overwrite what is inside that file, and the build process of the cegui library would be lost. Is there any way of dealing with it ?
[23:13:37] <rpav> << std::numeric_limits<float>::min()
[23:13:38] <geordi> 1.17549e-38
[23:13:49] <MaddHatter> rpav: it can exactly represent integers up to 2**53
[23:13:58] <MaddHatter> that's a lot of +0.5s
[23:13:59] <rpav> you are quickly going to go from -38 to single digits adding 0.5
[23:14:18] <rpav> MaddHatter: yes, but orders of magnitude are on both sides of the decimal
[23:14:53] <MaddHatter> rpav: I don't see how that's relevant
[23:15:11] <rpav> because you don't need to lose integer-precision, you need to lose 0.5-precision for this to start failing
[23:15:26] <MaddHatter> okay, so 2**52 then. You're still in the quadrillions.
[23:15:52] <rpav> and if you think "well you can't easily lost orders of magnitude / tens-of-orders" you will be surprised when you quickly run out of decimal precision for relatively small integers
[23:16:05] <Friithian> upgrade to quad floats!
[23:16:27] <MaddHatter> 4503599627370496 is not what I consider "small integers"
[23:19:49] <MaddHatter> does anything have hardware support for quad float?
[23:20:22] <rpav> not sure about quad but aren't most modern architectures like 80-bit doubles internally
[23:20:29] *** Joins: luizfrds (~Luiz@152.250.243.147)
[23:20:33] <PJBoy> going back to 1998
[23:20:50] <rpav> and even i don't consider that modern anymore!
[23:21:00] <PJBoy> > IEEE quadruple precision was added to the IBM S/390 G5 in 1998, and is supported in hardware in subsequent z/Architecture processors.
[23:21:27] <PJBoy> little less esoteric is RISC-V
[23:21:29] <MaddHatter> oh. Why isn't it a standard widely-used C++ type then?
[23:21:44] <PJBoy> float, double and long double are all allowed to be quad floats
[23:22:11] <PJBoy> and they're all standard and widely used
[23:22:16] <MaddHatter> "allowed" is a recipe for disaster like "long"
[23:22:35] <PJBoy> long's not so disasterous
[23:23:10] <MaddHatter> oh boy do I have stories to tell you, then
[23:23:39] <MaddHatter> I'm *still* fighting compiler warnings over that
[23:23:48] <rpav> cstdint ftw
[23:24:17] <MaddHatter> yeah. I like knowing exactly how many bits I have, and what the overflow behavior will be
[23:24:42] <rpav> basic int types are not to be relied on, which i define precisely as they should be treated as pessimistically as the standard allows
[23:25:05] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[23:25:24] <MaddHatter> the only place I think I use int is as a default counter in short for-loops that I know aren't going to exceed a few thousand.
[23:25:37] <rpav> i just always use size_t
[23:25:38] <PJBoy> I like the minimum width guarantees
[23:25:41] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[23:25:55] <rpav> there's not really a reason to not use size_t .. or really to use old-style for loops tbh
[23:26:18] <PJBoy> old school for loops will never die
[23:26:22] <rpav> for(auto&& [i,v] : zip(count(), vec)) { .. }
[23:26:29] <rpav> they won't, but they should
[23:26:44] <PJBoy> now do binary search
[23:26:54] <rpav> while(...)
[23:26:55] * rpav runs
[23:27:00] <PJBoy> <_<
[23:27:16] <PJBoy> kinda fair though
[23:27:20] <rpav> std::lower_bound(...)
[23:27:26] <rpav> (a better choice)
[23:27:40] <Juliu> size_t might be unsigned, which can produce a lot of problems
[23:27:45] <PJBoy> lower_bound can be slower than a manual binary search
[23:27:54] <PJBoy> size_t is definitely unsigned
[23:27:55] <MaddHatter> It's like uz... it's nice but it's going to be decade(s) before zip/count/ranges are widespread enough that alternatives aren't needed
[23:28:06] <rpav> what's annoying is a lot of the "utility" use of for(;;) comes with blank statements in the fields which just shows it's not really the best tool
[23:28:25] <Juliu> Unsigned integers should have never been invented
[23:28:36] <rpav> MaddHatter: well yeah
[23:28:40] <kalven> oh boy, here we gho
[23:28:47] <Friithian> there's nothing inherently wrong with unsigned ints
[23:28:55] <Friithian> oh why am I helping this along
[23:28:56] <rpav> although i think one could probably come up with a nice zip()-able binary search
[23:29:20] <PJBoy> there's nothing wrong with the idea of an unsigned integral data type
[23:29:28] <MaddHatter> and vim is the best editor
[23:29:32] <Juliu> The advantage of unsigned integers is so little, and their potential to cause problems is so large
[23:29:33] <Friithian> neovim reeeee
[23:29:44] <MaddHatter> let's get all the holy wars going at once
[23:29:47] <rpav> for(auto&& [b, v] : zip(binsearch(v), v)) { ... x ? b.left() : b.right(); }
[23:29:52] <kalven> psa: dont bite
[23:29:55] <PJBoy> but the realisation of unsigned ints does warrant criticism
[23:29:55] <MaddHatter> Juliu: defined overflow behavior is huge
[23:30:02] <Friithian> on the same topic, tabs are for inentation, not spaces
[23:30:26] <PJBoy> tabs are for drinking
[23:30:51] <rpav> what are the only actual signed operations again .. bitshift and err
[23:30:58] <Juliu> MaddHatter, for( unsigned int i = 10; i >= 0; --i ) printf( "Fool" );
[23:31:17] <Friithian> do something stupid, something stupid happens. Who knewâ€½
[23:31:18] <rpav> assuming the sanity of two's complement
[23:31:58] <Juliu> Friithian, if no one did anything stupid ever, we should not use safety belts and airbags. Good idea. I bet that helps
[23:32:24] <Friithian> just because you can footgun yourself with something does not mean it is inherently bad
[23:32:48] <PJBoy> all the bitwise operations can be performed on signed values now
[23:32:51] <Juliu> As I said, the advantage is so little
[23:32:52] <rpav> ah comparisons and multiplication sign extension
[23:33:08] <PJBoy> I think all the operations work on signeds
[23:33:34] <rpav> so if we had purely unsigned values, with *-, >>-, and <- >-
[23:33:38] <Juliu> Since they are bitwise, why would they care if something is signed or not?
[23:34:31] <PJBoy> ideally they're require unsigned inputs
[23:34:48] <PJBoy> or alternatively ideally there wouldn't be integral promotion
[23:35:04] <PJBoy> those sign extensions suck
[23:35:37] <PJBoy> and then for bitshift, that's always been an issue prior to C++20
[23:35:50] <PJBoy> as it's not been clear how to handle shifting into and out of the sign bit
[23:36:00] <rpav> yeah but if you could always be explicit about what you wanted it might be less error-prone than not, but i'm not sure
[23:36:32] <Juliu> Let's get rid of all types and we don't have that problem anymore
[23:36:53] <rpav> we could just all use int128_t; 127 bits is enough precision for anybody!@#
[23:37:27] <Juliu> 64 kB RAM is enough for everybody
[23:37:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:37:50] <rpav> i wonder how big of a number 2^(1024*1024*1024*32) is
[23:38:50] <Juliu> 2^(2^35) ?
[23:40:02] <PJBoy> trick question
[23:40:27] <PJBoy> the answer is actually the size of the number 1024*1024*1024*32
[23:40:35] <PJBoy> and ^ was XOR
[23:41:28] <rpav> heheh
[23:42:24] <Juliu> I could use integers that are stored with a variable number of bits
[23:43:43] <PJBoy> oh yeah so the whole fixed width versus minimum width integers thing
[23:44:15] <PJBoy> I feel like it's weird to put a maximum width on integers where there doesn't need to be one
[23:44:20] <PJBoy> (e.g. serialisation)
[23:44:40] <Juliu> Since 8, 16, 32, or 64 bits are probably not minimal for most numbers, but something like 27 bits would be minimal, no
[23:44:55] <rpav> well, you need to represent _how_ wide the integer you're reading is
[23:45:03] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[23:45:09] <Juliu> rpav, no
[23:45:16] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[23:45:20] <rpav> make some guarantees so implementations don't have to have to use libgmp or whatever just to be able to load files
[23:45:28] <rpav> a number of practical concerns really
[23:45:38] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[23:45:50] <Juliu> You can operate on integers that have a variable length
[23:46:12] <nq> I like size_t because, when using index_t and size_t, if I search a container for some element, I can return size_t(-1) and that would be a valid "not found, reserved state" for an index, because one typically uses "for (index_t index = 0; index < size; index++)", so index_t is always strictly less than size_t(-1); [<note> typedef size_t index_t;]
[23:46:49] <PJBoy> I'm a big fan of `typedef size_t index_t;` too
[23:47:18] <nq> yes, I wish I could have formal verification for the loops using size_t and index_t
[23:47:24] <Juliu> I'm a big fan of simply not using unsigned integers, so you don't have all these problems
[23:48:10] <PJBoy> also that's a neat trick
[23:48:29] <nq> Juliu, well true, using iterators is also nice, but whenever I need index-aware conditional code I still use indices
[23:48:38] <rpav> when i see `size_t` i always think "indexing integer"
[23:48:52] <Juliu> nq, I'm not talking about iterators. I am talking about just making everything a signed integer
[23:49:12] <Friithian> let's just use bytes for everything, make your own bigger types
[23:49:30] <nq> Juliu, I see.. I don't know know when or why exactly i started using size_t actually; initially I also used int for "everything"
[23:50:03] <Juliu> nq, they should just make size_z signed and we would have no problems
[23:50:30] <PJBoy> except that half of all possible sizes represented by that type would be invalid >_>
[23:50:35] <nq> I guess it bothers their conscience too much to give up that much state-space
[23:50:38] <bpalmer> This is why ssize_t is used.
[23:50:43] <Juliu> PJBoy, so what
[23:50:49] <PJBoy> for highly questionable benefit
[23:51:17] <rpav> i actually used ssize_t for things recently ðŸ¤”
[23:51:23] <Juliu> nq, since you need -1 as invalid index anyway, you have to give up something anyway
[23:51:27] <rpav> i don't actually recall what, but it was pretty useful
[23:51:27] <nq> it's semantically preferable to use something like std::optional<> if something can fail, but that is much more costly than a bit in signed integers
[23:51:58] <PJBoy> you can always make an optional_size_t type
[23:52:04] <nq> Juliu, I have size_t(-1) as an "invalid" (/ reserved) index_t actually
[23:52:40] <nq> cotnainer[size_t(-1)] ought to be a false tautology in the case of (index < size)
[23:52:46] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[23:53:05] <Juliu> nq, sometimes you might want to have an index that is smaller or larger than all other indices inside of an algorithm, for example as a starting value
[23:53:08] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[23:53:28] <nq> ah, setting a fictive minimum or maximum, or in Dijkstra's algorithm
[23:53:46] <Juliu> nq, for example something like that
[23:53:51] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[23:54:03] <nq> well.. the min/max is typically solved by just letting the starting element be that, and in dijkstra you'd use float::infinite
[23:54:04] <nq> but
[23:54:22] <bpalmer> see, this is why the best index_t type is float.
[23:54:23] <Juliu> I'm talking about integers
[23:54:23] <nq> for Dijkstra it would indeed be much preferable to have "one more bit" to simply say "not yet set"
[23:54:30] <Juliu> bpalmer, lol
[23:54:32] <rpav> haha
[23:54:46] <PJBoy> the fact that p[size_t(-1)] almost always breaks is a good reason to stick with unsigned
[23:54:59] <PJBoy> p[-1] is likely to work incorrectly
[23:55:17] <nq> you could wrap it around in the operator
[23:55:23] <Juliu> If you really need that last bit, you did something wrong anyway, since you optimized too much (since an increase by only 2 would already crash your algo)
[23:55:25] <nq> or saturate it to container.size()
[23:55:42] <Juliu> *increase by a factor of 2
[23:55:44] <PJBoy> yeah but if you need negative sizes, then you've drunk too much
[23:55:52] <nq> :)))
[23:56:07] <PJBoy> would rather have valid sizes I might not need than invalid sizes I can't need
[23:56:08] <nq> quite a technical argument
[23:56:09] <Juliu> PJBoy, as I just explained, there are good reasons why you often want negative sizes or indices
[23:56:42] <PJBoy> you would claim that negative sizes could possibly have a good reason to exist?
[23:56:45] <Juliu> At least one that is smaller than all valid ones
[23:56:51] <PJBoy> very questionable
[23:56:54] <rpav> oh right
[23:57:01] <rpav> becuase you want to represent a negative offset
[23:57:23] <rpav> so you need _some_ type for this, and you should generally work with compatible types
[23:57:26] <PJBoy> that's where ptrdiff_t comes in
[23:58:27] <Juliu> PJBoy, you often initialize something with -1 and then update it when you found a larger index or integer, and since -1 is smaller than 0, 1, 2, ... it works nice that way and you don't need an extra case
[23:58:35] <rpav> working with signed and unsigned together still sucks, and i'm not sure ptrdiff_t is guaranteed to be equivalent to ssize_t
[23:58:39] <PJBoy> no I don't
[23:59:04] <PJBoy> stdlib doesn't have an ssize_t, so it's certainly not guaranteed
[23:59:11] <Juliu> rpav, yes, which is why we should get rid of all unsigned integers and punch people in the face that use them
[23:59:11] <nq> does ptrdiff_t use void* underneath or what's it do ?
[23:59:43] <PJBoy> ptrdiff_t is just a signed integer
[23:59:47] <Juliu> Is it guaranteed that size_t is unsigned? I doubt it
