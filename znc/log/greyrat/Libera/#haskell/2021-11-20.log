[00:00:24] <zincy_> In the machines library what is the difference between Wye and Tee?
[00:00:40] <zincy_> Wye is "non-deterministic"
[00:01:06] <zincy_> Does this just mean that we don't know the order of the input events i.e they arent sequenced LRLR
[00:01:25] *** Joins: mimmy (~mimmy@146.70.75.190)
[00:01:37] <tomsmeding> EvanR: I suddenly see a pattern in my tables. Recall https://tomsmeding.com/f/ghci-evaluation.html . The 'Without typesig' column, as well as the 'With let' rows of the 'With typesig' column, are consistent: before evaluation, only the bare ['a','b','c'] is in WHNF, and after evaluation, the 'id' variant immedately returns the fully applied constructor, and the 'map' variant produces a fully lazy
[00:01:37] <tomsmeding> result.
[00:01:59] <tomsmeding> The only weird cases are the 'Without let' cases in the 'With typesig' column: i.e. a :: [Char] ; a = ...
[00:02:19] <EvanR> i didn't think the type sig mattered...
[00:03:05] <dolio> zincy_: Tee only has 'read from left' and 'read from right'. Wye has, 'read from either input; I don't care which.'
[00:04:24] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:cc0f:3c1b:cb:bfd6) (Ping timeout: 268 seconds)
[00:05:13] <dolio> So it's impossible for Tee to read from whichever is currently available, for instance.
[00:05:56] *** Joins: acidjnk (~acidjnk@2001:16b8:671e:6000:64a5:6a76:f3c4:2f23)
[00:06:43] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[00:07:06] <dolio> Tee is for things like zipping two streams, and Wye is for interleaving.
[00:07:30] *** Quits: chisui (~chisui@2001:16b8:6687:d600:ec27:7b7a:c771:651e) (Quit: Client closed)
[00:07:51] <zincy_> So Wye there is no order to sequences of input reading
[00:08:25] <dolio> You can still request particular sides with Wye. But you can't do something unordered with Tee.
[00:09:17] <zincy_> Do you know of any good examples for getting started writing a card game in Machines?
[00:09:36] <dolio> I don't.
[00:09:54] <zincy_> ah no worries
[00:10:58] <zincy_> If I want to model a player which has state and has a moore machine as input representing the game state should the player be written as a custom plan?
[00:11:52] <zincy_> Actions would come in from a source to the machine, but also the other moore machine for game state would 
[00:11:56] <zincy_> be another input
[00:13:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:50] <dolio> I'm not sure. I haven't thought about machines in a long time. I just remember the basics.
[00:15:21] <zincy_> no worries
[00:15:31] <EvanR> an interactive coupling between a player and a computer game, or two players, or two computers could be modeled with a shared history that they simultaneously try to add to. With the catch that whoever adds "first" (prior in time) forces the other guy to recompute their move (they are interrupted)
[00:15:45] <zincy_> I wonder if I can get away with using streamly instead
[00:15:46] <EvanR> if both sides add to the same point in time, no problem
[00:16:42] <zincy_> interesting
[00:17:13] <EvanR> also either side can wait forever until something changes
[00:17:16] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[00:17:58] <monochrom> It may be useful to have a machine for the game master.
[00:19:17] <zincy_> yeah the game master is essentially a moore machine
[00:21:28] <monochrom> RPGs taught me the value of spelling out that there is a game master, and if the game needs someone to do something but it would be wrong to ask any player to do it, then let the game master do it.
[00:21:31] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 256 seconds)
[00:21:32] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:22:17] <monochrom> RPG : game master : players :: Haskell : IO : pure sublanguage
[00:22:53] <EvanR> you hope IO is not a killer DM
[00:23:06] <int-e> So only the DM is allowed to cuss?
[00:23:11] <monochrom> Including the role of IO as the kitchen sink for every dirty thing that doesn't look like pure FP :)
[00:23:49] <monochrom> You want IORefs? IO.  You want threads? IO.  You want STM? IO.
[00:23:53] <int-e> (if it isn't flawed then it isn't an analogy)
[00:24:09] <monochrom> Ugh I tend to make flawless analogies.
[00:24:46] <monochrom> What I call analogies, mathematicians say "homomorphism", sometimes even "isomorphism".
[00:24:54] <monochrom> Unlike normal people analogies.
[00:25:38] <EvanR> isn't that javascript, analogies are called isomorphisms xD
[00:25:49] <monochrom> Ugh yikes haha
[00:26:37] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[00:28:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[00:30:17] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:5000:2c7a:ffb3:dbe2) (Remote host closed the connection)
[00:30:33] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:e439:7cf7:eb8b:77aa)
[00:30:46] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:31:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[00:33:58] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[00:38:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Remote host closed the connection)
[00:43:01] <tomsmeding> EvanR: https://gitlab.haskell.org/ghc/ghc/-/issues/20687#note_392794
[00:43:47] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:e439:7cf7:eb8b:77aa) (Remote host closed the connection)
[00:44:04] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:5d2d:5d37:b74:c17b)
[00:45:13] <EvanR> so, it's like quicksand. The only thing you can do is nothing, at least it won't get worse
[00:45:39] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[00:45:47] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[00:46:06] *** Joins: sm2n (~sm2n@user/sm2n)
[00:47:57] <tomsmeding> accurate :)
[00:48:07] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[00:50:38] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:51:06] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[00:51:14] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[00:51:14] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[00:51:14] *** Joins: turlando (~turlando@user/turlando)
[00:52:25] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:5d2d:5d37:b74:c17b) (Remote host closed the connection)
[00:52:43] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:2df4:3045:88e8:7284)
[00:57:25] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[01:00:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:02:39] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[01:05:36] *** Quits: rusty (~rustyboy@82.77.237.221) (Quit: Leaving)
[01:06:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[01:10:34] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[01:10:51] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[01:11:36] *** Joins: sm2n (~sm2n@user/sm2n)
[01:13:25] *** Joins: __monty__ (~toonn@user/toonn)
[01:16:49] *** Quits: michalz (~michalz@185.246.204.119) (Remote host closed the connection)
[01:19:46] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:23:05] *** Joins: rusty (~rustyboy@82.77.237.221)
[01:23:19] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[01:24:02] *** Quits: rusty (~rustyboy@82.77.237.221) (Client Quit)
[01:24:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:28:11] *** Joins: aegon (~mike@174.127.249.180)
[01:31:07] *** Joins: BobFang1992 (~textual@2a01:4b00:87fe:be00:2087:7385:664a:83cd)
[01:38:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[01:39:17] <dsal> I refuse to  learn where `asum` is
[01:39:28] <Hecate> % :i asum
[01:39:29] <yahb> Hecate: asum :: (Foldable t, Alternative f) => t (f a) -> f a -- Defined in `Data.Foldable'
[01:39:39] <Hecate> dsal: it's okay, the bot knows it for you
[01:39:46] <dsal> I used @hoogle in pm
[01:40:00] <dsal> It's not my first or second choice.
[01:43:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Ping timeout: 265 seconds)
[01:44:21] *** BobFang1992 is now known as bobfang1992_
[01:44:54] <dsal> Turns out I was just reinventing optional anyway.
[01:45:50] <dsal> My first attempt was like     `((Just <$> p) <|> pure Nothing)`   Then I translated it from lisp to `asum [Just <$> p, pure Nothing]` which is `optional p`
[01:46:15] *** Joins: rusty (~rustyboy@82.77.237.221)
[01:47:25] <jle`> is there a way to have cabal install default to --overwrite-policy=always ?
[01:48:05] <sclv> you can set it in the ~/.cabal/config file
[01:48:23] <jle`> ooh thanks :)
[01:49:55] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 256 seconds)
[01:50:02] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[01:51:00] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:54:21] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[01:56:01] <[itchyjunk]> noob question, i get this error : https://bpa.st/WGRA. i thought maybe i am not using runghc properly but trying to compile gives me an issue too
[01:56:09] <[itchyjunk]> my code is `sum a b = a + b`
[01:57:09] <sm> whats in sumFunction.hs ?
[01:57:14] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[01:57:54] <[itchyjunk]> just that one line :( 
[01:58:01] <[itchyjunk]> it seems i need to use main somehow
[01:58:28] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 268 seconds)
[01:58:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:59:19] <pavonia> main = putStrLn $ sum 2 3
[01:59:23] <sm> ah yes. runghc will run the `main` function 
[01:59:23] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[01:59:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[01:59:26] *** allbery_b is now known as geekosaur
[01:59:32] <pavonia> * main = putStrLn $ show $ sum 2 3
[01:59:34] <[itchyjunk]> ah
[02:00:08] <monochrom> If you don't want to have a "main", consider "ghc -e" instead.
[02:01:11] * sm wonders how to force brick to render a widget once, to generate a viewport, so I can adjust the scroll position, before first rendering the screen
[02:01:45] *** Joins: mimmy (~mimmy@146.70.75.189)
[02:02:02] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[02:02:11] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[02:02:42] <monochrom> Either "ghc -e 'sum 2 3' sumFunction.hs" or "ghc sumFunction.hs -e 'sum 2 3'"
[02:04:39] <[itchyjunk]> ah, guess it also doesn't like "sum", changing to add with what you suggest works. or using that main
[02:04:50] <monochrom> Yes, that too.
[02:04:58] <[itchyjunk]> interesting, the random tutorials i am looking at assumes i do everything inside ghci so it never mentions these things
[02:05:00] <monochrom> > sum [3,1,4,1,5]
[02:05:01] <lambdabot>  14
[02:05:03] <byorgey> sm: I have wondered things like that too.  I'm not sure it's possible.
[02:05:14] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:2df4:3045:88e8:7284) (Ping timeout: 260 seconds)
[02:05:38] *** lbseale_ is now known as lbseale
[02:05:43] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:42c4:fa07:876d:825a)
[02:06:03] <sm> byorgey: cool. https://github.com/jtdaugherty/brick/issues/170 is about this but I'm not quite seeing the solution
[02:08:00] <[itchyjunk]> i renamed my file and function and now it suddenly doesn't work again ;_;
[02:08:11] <sm> not a quick fix it seems, I'll come back it 
[02:08:48] <[itchyjunk]> https://bpa.st/2JGA
[02:08:55] <[itchyjunk]> https://bpa.st/UGMQ
[02:09:02] <[itchyjunk]> code and error respectively
[02:09:48] <pavonia> What's the name of the file?
[02:09:58] <[itchyjunk]> addFunction.hs
[02:10:10] <monochrom> "Did you save?"
[02:10:14] <[itchyjunk]> yes
[02:10:58] <pavonia> It really looks like you're compiling the wrong file
[02:11:12] <monochrom> Works for me.
[02:12:06] <[itchyjunk]> ah yes i was editing the wrong file maybe
[02:12:14] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[02:12:39] <[itchyjunk]> i was :(
[02:13:04] <[itchyjunk]> so is it best practice to just figure out how to include main everywhere? i'll need that eventually?
[02:13:06] <monochrom> BTW our favourite https://paste.tomsmeding.com supports putting multiple files/blocks on the same page so no one needs to keep switching tabs any more.
[02:13:58] <byorgey>  [itchyjunk]: no, you don't need main unless you are writing an application you want to compile to an executable.
[02:14:11] <monochrom> It is best practice to learn about "main".  But it is not best practice to assume that one size fits all.
[02:14:49] <[itchyjunk]> hmm
[02:15:02] <monochrom> "it depends" is the only correct rule of thumb, best practice, state of the art, cream of the crop, and correct answer.
[02:15:03] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:15:16] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[02:15:45] <[itchyjunk]> do beginners just write functions, load it into ghci and test it there?
[02:15:59] <byorgey> [itchyjunk]: yes, for learning, instead of using runghc / ghc -e, I recommend testing in ghci
[02:16:10] <monochrom> Yes, most do, it's OK.
[02:16:12] <byorgey> experts also do that.
[02:16:13] <pavonia> That's what the pros do too 8)
[02:17:17] <monochrom> Writing "main" early is also OK. It just means a different path of learning. Some books teach it that way.
[02:18:05] <hpc> whatever happens to give you the tightest write/test/debug loop in the moment
[02:18:16] <monochrom> Even for Python, both teaching camps co-exist.
[02:18:49] <monochrom> And in the case of PHP and Javascript, "what main?".
[02:18:49] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[02:19:10] *** Quits: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2087:7385:664a:83cd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:15] <[itchyjunk]> I am in a "OOP" class and it's being taught using java. that does have the `main() { }` thing going as well
[02:19:53] <geekosaur> most compiled languages do
[02:21:39] <[itchyjunk]> the signature for my `add a b = a + b` should takes a value `b` of type `int->int` and applies `a` of type `int` ? so `add :: int a => int->(int->int)` would make sense no?
[02:22:05] <monochrom> No.
[02:22:54] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[02:22:55] <monochrom> Either "Integer -> Integer -> Integer" to KISS, or "Num a => a -> a -> a" if you're ready for type classes.
[02:23:55] <monochrom> b is not going to be Integer->Integer.
[02:23:56] <[itchyjunk]> hmm google isn't giving me a good result for `haskell KILL`
[02:24:18] <geekosaur> ?
[02:24:25] <monochrom> Yeah that would sound pretty murderous. Google has reported you to the police!
[02:24:29] <[itchyjunk]> KISS*
[02:24:38] <geekosaur> "KISS" = "keep it simple, s…"
[02:24:40] <monochrom> keep it simple and stupid
[02:26:02] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:42c4:fa07:876d:825a) (Ping timeout: 240 seconds)
[02:26:18] <[itchyjunk]> ah
[02:26:42] <EvanR> keep it stupid simple
[02:26:50] <monochrom> A long forgotten virtue.
[02:26:55] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:8923:f787:bbfb:445e)
[02:26:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:27:17] <[itchyjunk]> i thought `+` had the type int->(int->int) and you start evaluating from the right so + 2 would give me a value of type (int -> int) and 2 + 2 would be int -> (int -> int)
[02:27:32] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:27:39] <[itchyjunk]> i was trying to apply that to the sum as well
[02:27:53] <Rembane_> :t (+) -- if we're lucky this will be a hint
[02:27:54] <lambdabot> Num a => a -> a -> a
[02:28:05] <monochrom> Nah, "2+2" is syntax sugar for "((+) 2) 2".
[02:28:31] <monochrom> Similarly "(add 2) 3".
[02:29:36] <[itchyjunk]> hmmmmmm
[02:30:05] <hpc> try querying the type of partially applied addition
[02:30:09] <hpc> see what type it gives you
[02:30:29] <hpc> and then just keep adding arguments
[02:30:32] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (Ping timeout: 268 seconds)
[02:31:26] <[itchyjunk]> it tells me its add :: Num a => a -> a -> a
[02:31:29] *** Joins: max22- (~maxime@2a01cb08833598007605f3bf70b72c1c.ipv6.abo.wanadoo.fr)
[02:31:39] <monochrom> Yes. (+) has that type too.
[02:31:54] <monochrom> But "2+2" is not parsed as "2 (+ 2)".
[02:32:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:32:07] <monochrom> It is parsed as what I said.
[02:32:46] <pavonia> :t 2 (+2)  -- for extra confusion
[02:32:47] <lambdabot> (Num a, Num ((a -> a) -> t)) => t
[02:33:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:33:23] <hpc> :t 2 (+) 2 -- and certainly not this :D
[02:33:24] <lambdabot> (Num a, Num t1, Num ((a -> a -> a) -> t1 -> t2)) => t2
[02:34:50] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[02:34:51] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[02:34:54] <[itchyjunk]> ((+) 2) 2 so first i want to think about ((+) 2) part. here the type is (num -> num) and then for the ((+) 2)2 it then becomes  (num->num)->num ?
[02:35:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[02:36:08] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:36:14] <pavonia> No, just num
[02:36:25] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[02:36:31] <pavonia> The more arguments you apply, the less arrows
[02:36:36] *** Joins: BobFang1992 (~textual@152.37.66.232)
[02:37:22] <hpc> you can put all of these into ghci and test your own hypothesis, btw
[02:37:26] <[itchyjunk]> oh right, the result of ((+) 2)2 is 4 which has a type num .. hmmm
[02:37:31] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 256 seconds)
[02:39:53] <sm> so then KILL is.... Keep It Lazy, Lummox ?
[02:40:48] <sm> Keep It Lean, Loon ?
[02:41:01] <monochrom> keep it lazy and lean.  Hence, "OOM KILL" >:)
[02:41:06] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[02:41:21] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:41:38] <sm> makes sense
[02:41:48] <monochrom> the "lazy" part refers to overcommitment. As someone in #haskell-tw put it, "happy malloc" i.e. malloc always succeeds :)
[02:41:53] *** Joins: wagle (~wagle@quassel.wagle.io)
[02:42:53] *** BobFang1992 is now known as bobfang1992_
[02:43:02] <hpc> nah, malloc can return 0 sometimes
[02:43:05] <hpc> just push to the stack instead
[02:43:09] <hpc> /that/ never fails
[02:44:04] <monochrom> "malloc can return 0 sometimes" is on the same calibre as "environment variables can be visible to other users sometimes".
[02:44:05] <awpr> some allocators guarantee malloc success or abort
[02:44:15] *** Joins: favonia (~favonia@user/favonia)
[02:45:04] <monochrom> I mean, if you're on Solaris or something, and sufficiently old version or something, sure.
[02:45:13] <awpr> the idea being that you probably can't do anything meaningful about a malloc failure anyway in 99% of software, so why include an extra opportunity for UB at every malloc call?
[02:45:26] <hpc> i am basing this on malloc(3)
[02:45:52] <monochrom> Oh, the envvar thing is also on some man page.
[02:45:54] <awpr> yeah, the POSIX spec allows it to fail IIRC
[02:46:39] <monochrom> There is still a difference between "the kernel can be configured to do this" and "statistically, how frequently?"
[02:48:17] <hpc> if we're doing that, we can statistically remove almost every case of error handling
[02:48:26] <hpc> because somewhere it's in a reliable tight loop
[02:48:35] <monochrom> Besides, overcommitment and happy malloc is also mentioned on the same man page.
[02:49:59] <hpc> overcommit is configurable at runtime
[02:50:10] <hpc> this can probably go into -offtopic :P
[02:50:29] <awpr> I must have misremembered something or transferred this property from the C++ allocator function to malloc, since I can't find a reference for malloc specifically being abort-or-succeed anywhere
[02:51:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[02:53:07] *** Joins: Cajun (~Cajun@user/cajun)
[02:53:44] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[02:54:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[02:54:55] <[itchyjunk]> wait, i think i got it. ((+) 2) 2. the (+) 2 part take 2 and returns a function  num -> num so it looks like num -> (num -> num) and ((+)2)2 look like something that take two arguments and returns a num so num->num->num ?
[02:55:06] <monochrom> Yes.
[02:55:11] <[itchyjunk]> phew
[02:55:29] <monochrom> A pretty mechanical rule.
[02:57:12] <unit73e> newbies get all confused when ghc is saying "expected A but got C -> B" and that just means you're missing an argument lol
[02:57:30] <awpr> there's a difference between the type of the "topmost function" being applied and the type of the whole expression.  `2+2` is just `Int` (or any other numerical type), but within that expression, `(+)` is `Int -> Int -> Int`
[02:57:44] <[itchyjunk]> unit73e, noted
[02:58:15] <Boarders_> do any of you know the haddock syntax for linking to Data.List.foldl1'?
[02:58:55] <monochrom> unit73e, sometimes the error message does include "perhaps wrong number of arguments"
[02:59:14] <awpr> applying an additional argument means two things: one, the "topmost function" must accept one more argument, i.e. its type must have one more arrow; and two, the entire expression accepts one less argument than before, i.e. its type has one _less_ arrow
[02:59:56] <monochrom> But there is a fundamental tension between error messages second-guessing beginner intentions and error messages second-guessing experienced intentions.
[03:00:12] <monochrom> My unpopular stance is never second-guess.
[03:00:39] <awpr> so if you have something like `(+) 2 :: Int -> Int` and apply that to one more argument, the whole expression's type has one less argument: `((+) 2) 2 :: Int`
[03:00:41] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:00:46] <monochrom> Well, either that, or the compiler is so smart it should write the code and get rid of the erroneous human already.
[03:01:23] <hpc> replace all human error with machine error
[03:02:21] <awpr> but on the other hand, if you have `f 2`, then you know `f :: Int -> r` for some `r`; but if you apply one more argument `(f 2) 2`, then `f` must be `Int -> Int -> r2` for some other `r2`.   (still ignoring that it could be other numeric types instead of `Int`)
[03:03:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 264 seconds)
[03:03:31] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[03:05:02] *** Quits: acidjnk (~acidjnk@2001:16b8:671e:6000:64a5:6a76:f3c4:2f23) (Ping timeout: 240 seconds)
[03:05:21] <monochrom> I agree there is a confusion, but my attribution is the words "expected" and "inferred", encouraging beginners to second-guess how important it is to take those two words seriously. (Answer: Very unimportant.)
[03:05:57] <monochrom> In this regard I agree with Hugs in just presenting two conflicting types without name-calling them.
[03:06:49] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[03:06:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:07:02] *** Quits: connrs (~connrs@user/connrs) (Quit: ZNC 1.8.2 - https://znc.in)
[03:07:19] *** Joins: connrs (~connrs@user/connrs)
[03:07:21] <hpc> you have to think like the compiler with that sort of error message
[03:07:54] *** Quits: max22- (~maxime@2a01cb08833598007605f3bf70b72c1c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:08:20] <monochrom> I bet that experienced Haskellers don't care about "expected vs inferred" either.
[03:08:47] <hpc> "expected" is "based on the information in the program so far, this is what type fits in this part of your code"
[03:09:02] <hpc> and "inferred" is "this is what was found in this part of your code instead"
[03:09:17] <[itchyjunk]> blah :: (a -> b) -> [a] -> [b]. blah takes 2 arguments, namely a function of type (a->b) and a list of type [a] and produces a list of type [b]. the function f :: a -> b takes an argument of type a and produces somethign of type b. so blah f :: [a] -> [b] , partial application of f on blah produces a new function blah f that takes an argument of type [a] (map will elements of type a) and returns something of type [b] (map with elements 
[03:09:17] <[itchyjunk]> of type b) ?
[03:09:37] <monochrom> Yes.
[03:09:56] <[itchyjunk]> okay i think i actually understand this then.. ;_;
[03:10:11] <awpr> except with "list" instead of "map" in the last sentence
[03:10:22] <monochrom> Ah I didn't read carefully heh
[03:10:28] <[itchyjunk]> ah list! right list!
[03:10:35] <sm> I see "expected" and "actual" here, did this change with ghc 9 ?
[03:10:38] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 260 seconds)
[03:10:51] <awpr> I remember it being "expected" and "actual"
[03:11:06] <geekosaur> it's been "expected" and "actual" since ghc6.6 at least, I have no idea where "inferred" came from
[03:11:07] <monochrom> Anyway, see how if you just follow the rules mechanically, if you forget that "intuition" and "understanding" is a thing, everything works.
[03:11:10] <hpc> i remember it being "expected" and "the other thing" :P
[03:11:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Remote host closed the connection)
[03:11:36] <monochrom> Ah there was a time it said "inferred".
[03:11:41] <awpr> I slightly thought "expected" meant "the type in negative position as part of a function type" and "actual" meant "the type in positive position in a function application"
[03:12:12] <geekosaur> hm, maybe that means it did change in 9.x
[03:12:12] <geekosaur> since I'm still on 8.10.7
[03:12:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[03:12:31] <monochrom> And I liked it that way because I just told myself "e for external, i for internal" as a simple and yet pretty effective model.
[03:12:32] <sm> I look at expected and actual quite a bit, it seems to give better info than the Couldn't match type... line above
[03:13:12] <sm> ie, Expected seems to show the specialised type, not a fully general one
[03:13:29] <monochrom> I saw "actual" with GHC 8.10.7 just an hour ago.
[03:13:47] <sm> eg:
[03:13:47] <sm> • Couldn't match type ‘Screen’ with ‘GenericList Name V.Vector e0’
[03:13:47] <sm>   Expected: List Name e0
[03:13:47] <sm>     Actual: Screen
[03:13:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:14:54] <sm> the Couldn't match type line also is harder to read because the order is not clear. I'm not sure why we shouldn't just remove it
[03:15:42] <hpc> hmm, what about, say you wrote a type error in (f a b)
[03:15:54] <hpc> expected: in (f _ b), _ :: A
[03:15:59] <hpc> actual: a :: B
[03:16:28] <hpc> plus or minus formatting
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:17:27] <monochrom> sm, having those 3 lines is only since 9.0 or 9.2, right?  Because on 8.10 I get 2 lines:
[03:17:30] <monochrom> > not "abc"
[03:17:32] <lambdabot>  error:
[03:17:32] <lambdabot>      • Couldn't match expected type ‘Bool’ with actual type ‘[Char]’
[03:17:32] <lambdabot>      • In the first argument of ‘not’, namely ‘"abc"’
[03:17:40] <monochrom> err even one line
[03:17:40] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:17:48] <sm> I see, yes I expect it has been changing
[03:18:09] <sm> maybe 9.4 will have elm/rust-level readability
[03:18:29] <awpr> I've been doing most of my compiling on 8.10.7 still, and I thought expected/actual was familiar error message formatting for a long time
[03:18:36] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[03:19:02] <awpr> could it be that it's omitted if the expected/actual types are no larger than the specific unification failure?
[03:19:27] <awpr> > map not "abc"
[03:19:29] <lambdabot>  error:
[03:19:29] <lambdabot>      • Couldn't match type ‘Char’ with ‘Bool’
[03:19:29] <lambdabot>        Expected type: [Bool]
[03:19:58] <awpr> looks like it tried to print it there, at least
[03:20:06] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[03:20:56] <monochrom> Ah in that case 8.10.7 also gives 3 separate lines.
[03:21:09] <awpr> oh, yeah, it looks like it merged them into one -- above, "Couldn't match _expected_ type ... with _actual_ type ..."
[03:21:29] <geekosaur> my guess is it merges them when they'd say the same thing?
[03:21:38] <monochrom> Yeah.
[03:22:30] <monochrom> OK, not 'a' is a simple enough example that 9.2 also gives just one line, "Couldn't match expected type ‘Bool’ with actual type ‘Char’"
[03:23:23] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:26:15] *** Joins: Guest98 (~Guest98@2601:547:902:5e80:3c6c:c3e3:11e0:2f8)
[03:26:49] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[03:27:31] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) ()
[03:27:49] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[03:27:53] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[03:28:47] *** Joins: ouroboros_ (~ouroboros@2804:14c:65e4:93f6::1001)
[03:28:52] *** Quits: tom_ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Remote host closed the connection)
[03:29:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:29:35] *** Quits: ouro_boros (~ouroboros@2804:14c:65e4:93f6::1001) (Remote host closed the connection)
[03:29:35] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: No Ping reply in 180 seconds.)
[03:29:38] *** Quits: averell (~averell@user/averell) (Quit: .)
[03:29:40] *** Joins: m4lvin_ (~m4lvin@w4eg.de)
[03:29:54] *** Joins: averell (~averell@user/averell)
[03:32:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[03:34:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:39:30] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:40:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:40:15] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:47:16] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:55:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:01:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[04:02:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:07:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[04:09:31] *** Quits: bobfang1992_ (~textual@152.37.66.232) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:22] *** Quits: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:22:58] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[04:22:59] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[04:24:51] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[04:25:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:25:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:25:35] *** Joins: wroathe (~wroathe@user/wroathe)
[04:27:27] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:28:37] *** Quits: emf_ (~emf@2620:10d:c090:400::5:5ceb) (Quit: emf_)
[04:28:59] *** Joins: emf (~emf@2620:10d:c090:400::5:5ceb)
[04:29:43] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[04:29:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[04:30:27] *** Quits: Guest98 (~Guest98@2601:547:902:5e80:3c6c:c3e3:11e0:2f8) (Quit: Client closed)
[04:36:58] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[04:37:35] *** Quits: emf (~emf@2620:10d:c090:400::5:5ceb) (Ping timeout: 264 seconds)
[04:40:48] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:43:44] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[04:46:32] *** Joins: Guest|35 (~Guest|35@S010684948ccddec3.vf.shawcable.net)
[04:48:03] <Guest|35> Can I install ghc on a macintosh with an m1 chip running monterey?
[04:49:05] <geekosaur> 8.10.7 recommended and you'll need to point it at /opt/llvm
[04:49:26] <geekosaur> 9.2.1 has a native codegen but some severe bugs were found post-release
[04:50:02] <geekosaur> ghcup should work fine to install either
[04:50:10] <glguy> Last time I tried I had some trouble where C libraries (openssl in my case) I wanted to use were using one architecture and GHC was compiling for the other
[04:50:15] *** Joins: favonia (~favonia@user/favonia)
[04:51:41] <geekosaur> I *think* most of that has been resolved, there were some aberrant uses of `arch` that inappropriately forced x86_64 builds
[04:52:07] <geekosaur> also I think you need to find a native stack binary if you use that, or stack will try to build everything x86_64
[04:53:23] <glguy> OK,I'll have to give it a shot
[04:53:26] <glguy> another*
[04:53:49] <Guest|35> I don't mind whether it runs natively or not.. I have problems missing LLVM.  I had further problems when i tried to install LLVM with home-brew.
[04:53:53] <geekosaur> possibly get stack from https://gitlab.haskell.org/maerwald/stack/-/jobs/849239/artifacts/browse/.local/bin/ ?
[04:54:36] <geekosaur> last I heard, a full working llvm is in /opt
[04:54:50] <geekosaur> you just have to convince ghc to look there
[04:57:01] <glguy> To get GHC to use my LLVM from homebrew I had to edit the lcc and opt keys in the ghc settings file
[04:59:09] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[04:59:13] <sm> interesting
[04:59:58] <dsal> Guest|35: I'm running it fine out of nix
[05:00:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[05:04:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[05:06:29] *** Joins: xyzaMan (~TheMan@85.203.34.97)
[05:08:30] *** Quits: Guest|35 (~Guest|35@S010684948ccddec3.vf.shawcable.net) (Quit: Ping timeout (120 seconds))
[05:21:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[05:23:18] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[05:23:54] *** Joins: deadmarshal (~deadmarsh@95.38.119.181)
[05:25:21] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[05:28:39] *** Quits: deadmarshal (~deadmarsh@95.38.119.181) (Ping timeout: 256 seconds)
[05:29:30] *** Quits: xyzaMan (~TheMan@85.203.34.97) (Quit: WeeChat 3.3)
[05:32:07] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:32:29] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[05:36:29] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:52:12] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[05:52:26] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:54:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:58:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:59:18] *** Joins: econo (uid147250@user/econo)
[05:59:34] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[05:59:40] *** Joins: Vajb (~Vajb@85-76-10-195-nat.elisa-mobile.fi)
[06:00:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[06:09:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:09:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:09:42] *** Joins: wroathe (~wroathe@user/wroathe)
[06:10:01] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[06:12:29] *** Quits: alx741 (~alx741@186.178.109.242) (Quit: alx741)
[06:13:48] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:15:37] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:8923:f787:bbfb:445e) (Ping timeout: 268 seconds)
[06:17:06] *** Joins: xff0x (~xff0x@2001:1a81:5231:4c00:b29b:34ce:44e1:612b)
[06:24:42] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[06:26:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:29:26] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:42:08] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[06:50:11] *** Joins: slice (~slice@user/slice)
[06:52:38] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[06:59:48] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:00:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:04:40] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[07:05:36] *** Joins: favonia (~favonia@user/favonia)
[07:06:48] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[07:09:24] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:11:08] *** Joins: zebrag (~chris@user/zebrag)
[07:20:42] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[07:22:50] *** Quits: td_ (~td@muedsl-82-207-238-169.citykom.de) (Ping timeout: 268 seconds)
[07:24:31] *** Joins: td_ (~td@muedsl-82-207-238-028.citykom.de)
[07:30:48] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[07:32:47] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[07:35:35] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:38:05] *** Joins: takenobu (uid459077@hampstead.irccloud.com)
[07:39:49] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[07:41:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:41:11] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 264 seconds)
[07:53:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[07:55:06] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[07:56:27] *** Quits: favonia (~favonia@user/favonia) (Quit: Leaving)
[07:59:57] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[08:00:49] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[08:05:37] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[08:08:01] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[08:17:33] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[08:19:18] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:19:28] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[08:29:32] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 240 seconds)
[08:38:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:48:36] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[08:50:01] *** Quits: monochrom (~trebla@216.138.220.146) (Quit: NO CARRIER)
[08:51:44] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:52:31] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[08:53:29] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[08:53:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[08:56:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:59:07] *** Quits: bgamari (~bgamari@64.223.235.131) (Remote host closed the connection)
[08:59:26] *** Joins: bgamari (~bgamari@64.223.235.131)
[09:02:11] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[09:02:21] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[09:06:28] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[09:06:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[09:11:21] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[09:12:40] *** Quits: flukiluke (~m-7humut@plum.alephc.xyz) (Remote host closed the connection)
[09:14:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[09:15:20] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[09:22:56] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[09:25:24] *** Joins: mbuf (~Shakthi@171.61.241.64)
[09:28:01] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[09:31:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[09:32:31] *** Joins: BobFang1992 (~textual@2a01:4b00:87fe:be00:5534:65fd:7:6614)
[09:33:58] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[09:35:01] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:35:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:38:44] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[09:40:49] *** Quits: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon) (Ping timeout: 256 seconds)
[09:40:55] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[09:45:26] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[09:46:50] *** Quits: takenobu (uid459077@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:57:23] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[09:57:59] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[09:58:01] *** Joins: monochrom (trebla@216.138.220.146)
[10:01:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[10:02:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[10:03:56] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[10:03:59] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[10:04:03] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Quit: Going elsewhere)
[10:04:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:10:54] *** Joins: mimmy (~mimmy@146.70.75.149)
[10:14:53] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[10:19:21] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[10:22:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:23:53] *** Quits: ishutin (~ishutin@84-236-40-131.pool.digikabel.hu) (Ping timeout: 256 seconds)
[10:25:17] *** Joins: ishutin (~ishutin@89-186-118-211.pool.digikabel.hu)
[10:27:50] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 268 seconds)
[10:30:00] *** Joins: monochrom (trebla@216.138.220.146)
[10:36:11] *** Joins: deadmarshal (~deadmarsh@95.38.119.181)
[10:39:51] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:39:51] *** Quits: Vajb (~Vajb@85-76-10-195-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[10:40:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:41:32] *** Joins: mei (~mei@user/mei)
[10:47:15] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[10:48:23] *** Quits: deadmarshal (~deadmarsh@95.38.119.181) (Ping timeout: 264 seconds)
[10:51:53] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[10:52:10] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[10:55:46] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:56:55] *** Joins: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[11:01:26] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:03:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:16:59] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[11:17:18] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:18:18] *** Joins: vysn (~vysn@user/vysn)
[11:19:39] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[11:21:07] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[11:24:59] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[11:26:55] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[11:27:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:28:16] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[11:33:31] <jle`> is there a ghc-pkg list that i can use within a cabal project?
[11:34:36] <jle`> ah i guess i can cabal freeze
[11:37:33] *** Quits: BobFang1992 (~textual@2a01:4b00:87fe:be00:5534:65fd:7:6614) (Quit: Textual IRC Client: www.textualapp.com)
[11:38:24] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[11:38:58] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:40:23] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:45:22] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 260 seconds)
[11:45:51] *** Quits: jrm (~jrm@156.34.187.65) (Quit: ciao)
[11:46:09] *** Joins: jrm (~jrm@156.34.187.65)
[11:50:35] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:53:50] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[12:01:23] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[12:01:47] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:02:32] *** Quits: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93) (Ping timeout: 240 seconds)
[12:03:38] <Tisoxin> Is there a project to implement anonymous sum types in Haskell (roc calls them „tags“: https://youtu.be/6qzWm_eoUXM?t=1008)?
[12:04:23] <Tisoxin> I have already found compound-types, but that's not quite what i want
[12:05:56] <Tisoxin> because I want to name constructors for better readibility
[12:06:11] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[12:06:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[12:11:58] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[12:18:20] *** Joins: mimmy (~mimmy@146.70.75.149)
[12:21:35] *** Joins: AndrejKarpathy (~AndrejKar@182.64.9.106)
[12:21:43] <AndrejKarpathy> Hi.
[12:22:11] <jle`> AndrejKarpathy: hi :)
[12:22:48] <arahael> I'm about to install haskell and cabal for a musl system (Alpine), any caveats I should be aware of?  Shoudl I use the distro packages or ?
[12:23:18] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[12:23:21] <jle`> AndrejKarpathy: your cars are very impressive, you must be very proud
[12:23:46] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[12:24:38] <Lycurgus> arahael, this musl https://en.wikipedia.org/wiki/Musl ?
[12:24:59] <arahael> Lycurgus: Yes.
[12:25:11] <Lycurgus> in general using distro pkgs with hs is a bad idea
[12:25:15] <AndrejKarpathy> I had a question regarding the effects of Haskell code on the computational complexity of algorithms. Is there any significant change in it?  I'm working on a small Haskell project that undertakes the handling of certain test cases on Codeforces. Thanks in advance.
[12:25:22] <arahael> Lycurgus: Which is why I'm asking here. :)
[12:25:28] <Lycurgus> probably manifestly so for alpine
[12:25:34] <AndrejKarpathy> @Jle Thank you. I like the civic too
[12:25:34] <lambdabot> Maybe you meant: pl let
[12:25:58] <arahael> Lycurgus: Yeah?
[12:26:38] <Lycurgus> yes by virtue of the principle of less use/exposure
[12:26:55] <Lycurgus> -/eyes
[12:26:56] <jle`> AndrejKarpathy: the "same" algorithms have the same complexities. but certain algorithsm can be easier or harder to write in haskell than in other languages, and superficial syntax similiaries can be misleading
[12:27:38] <arahael> Lycurgus: I'll try ghcup.
[12:28:05] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[12:28:34] <Lycurgus> AndrejKarpathy, yeah at the source level easier but as far as the actual thing more work than with a simple algol like lang
[12:29:08] <Lycurgus> there are tools but with c you don't need em
[12:29:21] <AndrejKarpathy> Alright. Perfect answers, thank you jle`and Lycurgus
[12:29:48] <arahael> Lycurgus: Yeah, ghcup doesn't work.
[12:30:16] <arahael> Lycurgus: sh: /root/.ghcup/bin/ghcup: not found
[12:30:29] <arahael> Lycurgus: "_eghcup upgrade" failed!
[12:31:50] <Lycurgus> arahael, ack
[12:31:51] <arahael> Lycurgus: Looks like it's there but missing a whole bunch of libraries.
[12:32:09] <arahael> Eg, libtinfo.so.6 is missing.
[12:32:24] *** Joins: chenjf (~chenjf@104.208.72.114)
[12:33:15] *** Quits: chenjf (~chenjf@104.208.72.114) (Client Quit)
[12:33:17] <AndrejKarpathy> What is the Haskell community's collective outlook on Haskell being used as an official programming language in the competitive programming world? If possible, please mention the advantages and disadvantages of standardizing Haskell in accordance with competitive programming?
[12:34:18] *** Joins: dschrempf (~dominik@62.240.134.78)
[12:34:27] * arahael hates competitive programming - it's basically ego-stroking.
[12:35:37] *** Joins: chenjf (~chenjf@104.208.72.114)
[12:37:15] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[12:37:38] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[12:38:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Remote host closed the connection)
[12:38:33] *** Joins: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93)
[12:40:20] <arahael> Though, I plan to do advent of code, I suppose that's competitive programming - but I tend to do that non-competitively.
[12:44:17] <Hecate> AndrejKarpathy: there is no collective outlook because there is no single Haskell community
[12:44:41] <Hecate> for example I'm certain the Russians will wholeheartedly agree that you should do Haskell for Competitive Programming
[12:45:16] <arahael> Haskell's popular in Russia?
[12:45:52] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[12:46:40] *** Quits: chenjf (~chenjf@104.208.72.114) (Remote host closed the connection)
[12:46:57] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:10] <AndrejKarpathy> All right. :]
[12:47:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:48:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:49:03] *** Quits: AndrejKarpathy (~AndrejKar@182.64.9.106) (Quit: Client closed)
[12:49:20] <Hecate> arahael: is Haskell even popular? ;)
[12:49:20] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[12:49:38] <Hecate> but there is a Russian Haskellers community that exists and it's tightly-knit
[12:49:46] <arahael> Hecate: If that's a matter of opinion, then I'd say it is. ;)
[12:50:33] <Hecate> nah it's a matter of observing the real world
[12:51:23] <arahael> Hecate: God gives us but one Real World Token.
[12:51:47] *** Quits: dschrempf (~dominik@62.240.134.78) (Ping timeout: 256 seconds)
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:00:12] *** Quits: mbuf (~Shakthi@171.61.241.64) (Quit: Leaving)
[13:01:02] *** Joins: mimmy (~mimmy@146.70.75.149)
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:04:44] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[13:07:05] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 256 seconds)
[13:07:25] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 250 seconds)
[13:08:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[13:09:07] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:13:44] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[13:15:22] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[13:17:07] *** Joins: dschrempf (~dominik@62.240.134.78)
[13:19:18] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[13:19:38] *** Joins: slice (~slice@user/slice)
[13:21:54] *** Quits: dschrempf (~dominik@62.240.134.78) (Ping timeout: 260 seconds)
[13:28:53] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:30:59] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 264 seconds)
[13:35:27] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[13:40:07] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:40:14] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[13:43:56] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[13:45:17] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[13:45:35] *** Joins: euouae- (~euouae@user/euouae)
[13:45:45] <euouae-> Hello what are some good benchmarking packages for speed and memory?
[13:46:25] <Hecate> euouae-: https://hackage.haskell.org/package/tasty-bench
[13:46:27] <euouae-> I'm reading https://chrisdone.com/posts/fast-haskell-c-parsing-xml/ which mentions the 'weigh' package for memory tracking
[13:47:32] <euouae-> Hecate, thank you
[13:50:06] *** Joins: ubert (~Thunderbi@p200300ecdf0ba279e6b318fffe838f33.dip0.t-ipconnect.de)
[13:50:51] <euouae-> Hecate, how can I use tasty-bench with stack instead of cabal?
[13:51:44] <euouae-> Hecate nevermind me, I misread the instructions. It's like every other package. 
[13:52:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 260 seconds)
[13:53:27] *** Quits: ubert (~Thunderbi@p200300ecdf0ba279e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:54:45] *** Joins: desantra (~skykanin@user/skykanin)
[13:55:55] *** Joins: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[13:57:59] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[13:58:52] <euouae-> Actually, I don't understand how to write benchmarks with stack, `stack bench --help` doesn't have information on the package.yaml syntax and I can't find it in the docs either.
[14:00:32] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:00:49] <euouae-> I guess I'll look up a popular package and see how they do it
[14:02:41] <Hecate> euouae-: stack bench is just a shortcut to run the benchmarks stanza of your Cabal file, not write them
[14:03:04] <euouae-> Hmmm so maybe I should `stack --help` and go from there 
[14:04:30] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[14:04:46] <euouae-> for example `hspec` seems to use stack but it doesn't have any benchmarks
[14:04:56] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[14:05:02] <Hecate> euouae-: `stack` is just a CLI tool to run builds, tests and benchmarks
[14:05:21] <Hecate> learn how to make benchmarks, `stack` is just how you call them, and is interchangeable with `cabal`
[14:05:56] <euouae-> But stack is using the files `package.yaml` and `stack.yaml` which cabal doesn't know about, and package.yaml is where you specify the unit tests 
[14:05:58] *** Joins: hololeap (~hololeap@user/hololeap)
[14:06:06] <Hecate> no
[14:06:11] <Hecate> stack uses the cabal file
[14:06:29] <Hecate> package.yaml is turned into *.cabal through the use of a tool called hpack, which stack uses
[14:06:33] <euouae-> It generates a cabal file
[14:06:48] <Hecate> stack.yaml is only here for dependency resolution, not calling tests and benchmarks
[14:07:09] <Hecate> you should maybe read the Stack manual if you want to use it
[14:07:16] <euouae-> OK so if I learn about cabal and how hpack works, I'll figure it out 
[14:07:27] <euouae-> right
[14:07:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[14:10:05] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[14:15:05] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:17:14] *** Quits: xff0x (~xff0x@2001:1a81:5231:4c00:b29b:34ce:44e1:612b) (Ping timeout: 268 seconds)
[14:17:32] *** Joins: xff0x (~xff0x@2001:1a81:5231:4c00:af6c:e4ce:ed0b:b587)
[14:18:29] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[14:20:49] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (Quit: lambdap)
[14:21:10] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[14:21:56] <maerwald> arahael: ghcup should work on alpine
[14:22:27] <maerwald> because ghcup binaries are built on alpine...
[14:23:02] <arahael> maerwald: Ah, good to know, that probably means there's just a dependency or two it's missed.
[14:23:39] <maerwald> well, I don't know the error
[14:24:32] <arahael> maerwald: It's a minimal system, ghcup is literally the first thing that's added.
[14:24:49] <maerwald> you need curl at least
[14:26:12] <arahael> Yeah, I tried, found curl wasn't installed, instaleld that, and then now stuck, but I ahven't been trying hard as I'm a bit lazy today.
[14:26:18] <arahael> It's missing  the following libraries:
[14:26:20] <maerwald> works here https://imgur.com/He0FQpE.png
[14:26:32] <arahael> libtinfo.so.6, libnuma.so.1
[14:26:48] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[14:27:24] <arahael> I'm on alpine 3.14, though actually I should update just in case.
[14:27:36] <maerwald> I still don't understand what exactly failed, you're only giving half the information
[14:29:17] <arahael> There's two libraries that are missing on my system that's required by ghcup, and a bunch of symbols which, I assume, are provided by those libraries.
[14:29:31] <maerwald> ghcup binary is static, it needs nothing
[14:29:40] <arahael> Uh? That's weird, then.
[14:30:03] <arahael> It's definintely dynamic here.
[14:30:20] <maerwald> / # ldd ~/.ghcup/bin/ghcup
[14:30:22] <maerwald> /lib/ld-musl-i386.so.1: /root/.ghcup/bin/ghcup: Not a valid dynamic program
[14:30:34] <arahael> Yeah, that's what I'm running, and it's definitely dynamic.
[14:30:47] *** Joins: alx741 (~alx741@186.178.109.242)
[14:31:05] <maerwald> what's the checksum of the binary
[14:31:09] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[14:31:30] <arahael> The sha256sum is...
[14:32:13] <arahael> 5a3075337...2974c4a2.  First and last 8 characters or so of the hash.
[14:32:27] <arahael> More than that and the chance I make a typo becomes pretty high. :)
[14:32:31] <maerwald> what's the architecture?
[14:32:36] <arahael> aarm64
[14:32:47] <arahael> aarch64*.  ARM 64, anyway.
[14:32:48] <maerwald> well, yeah... there are no static binaries for that arch
[14:33:04] <arahael> That explains the mystery!
[14:33:19] <maerwald> because there's no GHC aarch64 musl bindist
[14:34:04] <maerwald> and alpine repos don't have one either
[14:34:10] <maerwald> no one ever bootstrapped one
[14:34:37] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[14:34:38] <euouae-> Why is - -with-rtsopts="-A32m -T" giving me an error about -T" being an unknown option?
[14:34:39] <arahael> Hmm.  And I'm guessing that means I can't build static haskell applicatiosn on this either (unless I were to bootstrap one, and that's probably a bit over my head at the moment)
[14:35:03] <euouae-> in package.yaml 
[14:35:57] *** Joins: hololeap (~hololeap@user/hololeap)
[14:36:03] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[14:36:37] <arahael> Looks like this is https://github.com/haskell/cabal/issues/6715
[14:36:55] <arahael> (Closed, but only because they want it solved by #6616)
[14:37:01] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:37:57] <maerwald> arahael: that's about normal linux arm
[14:38:01] <maerwald> and that's already solved
[14:38:35] <arahael> Ah, so it's the musl one that's peculiar, then.
[14:38:44] <maerwald> musl is always peculiar
[14:39:10] <arahael> Heh.
[14:39:22] <arahael> Well, it sounds like I can make do with a dynamically linked one, at least.
[14:39:27] *** Joins: neurocyte0132889 (~neurocyte@94.46.77.154)
[14:39:27] *** Quits: neurocyte0132889 (~neurocyte@94.46.77.154) (Changing host)
[14:39:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:39:32] <arahael> Just gotta find these libs - which isn't going to be today. (It's getting late)
[14:39:49] <arahael> Would've been nice if it was static, but it's not a big deal.
[14:41:03] *** Joins: mimmy (~mimmy@146.70.75.148)
[14:43:13] <arahael> maerwald: I see your name pops up in a few of those tickets :)  I'm happy to raise a bug report if you want, but not today - perhaps tomorrow?  However, I'm really quite OK with finding these libs and bootstrapping it that way.  I can probably just get all the required libs by installing the alpine ghc anyway.
[14:44:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:51] *** Quits: tv (~tv@user/tv) (Read error: Connection reset by peer)
[14:45:58] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[14:46:24] <maerwald> there is no alpine ghc on aarch64
[14:48:08] <arahael> Ah, ha!
[14:48:32] <arahael> Looks like that might be a bit tricky, then!  Well, will check it out tomorrow.
[14:48:32] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[14:48:36] <arahael> G'night. :)
[14:49:38] <arahael> (And thanks)
[14:52:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:57:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:59:13] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d0f4:92d3:1aef:5b27)
[15:01:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[15:02:01] *** Quits: euouae- (~euouae@user/euouae) (Quit:  )
[15:02:47] *** Joins: tv (~tv@user/tv)
[15:05:12] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[15:06:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:08:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:08:47] *** Quits: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Ping timeout: 264 seconds)
[15:12:19] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[15:12:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[15:19:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:20:05] *** Joins: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[15:20:54] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[15:23:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:27:51] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[15:32:34] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:36:18] *** Quits: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Quit: Lost terminal)
[15:37:12] *** Joins: Nrmncr (~Neuromanc@user/neuromancer)
[15:41:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[15:42:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:43:35] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:48:12] *** Joins: mimmy (~mimmy@146.70.75.148)
[15:51:20] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[15:52:33] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:54:03] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 268 seconds)
[15:54:56] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[15:56:13] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:57:55] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:57:59] *** Quits: xff0x (~xff0x@2001:1a81:5231:4c00:af6c:e4ce:ed0b:b587) (Ping timeout: 264 seconds)
[16:01:27] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 268 seconds)
[16:04:41] *** Joins: monochrom (~trebla@216.138.220.146)
[16:08:44] *** Joins: Everything (~Everythin@37.115.210.35)
[16:08:58] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:10:08] *** Joins: xff0x (~xff0x@2001:1a81:5231:4c00:af6c:e4ce:ed0b:b587)
[16:14:48] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[16:16:29] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[16:16:38] *** Joins: FragByte (~christian@user/fragbyte)
[16:16:39] *** Joins: amk (~amk@109.255.169.126)
[16:18:10] *** Joins: fabfianda (~fabfianda@net-93-148-114-144.cust.dsl.teletu.it)
[16:18:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:21:11] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[16:22:30] *** Quits: fabfianda (~fabfianda@net-93-148-114-144.cust.dsl.teletu.it) (Ping timeout: 260 seconds)
[16:23:34] *** Joins: fabfianda (~fabfianda@mob-5-90-247-119.net.vodafone.it)
[16:26:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[16:27:35] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[16:27:40] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:37:44] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[16:38:19] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[16:42:19] *** Joins: sagax (~sagax_nb@user/sagax)
[16:48:55] *** Joins: __monty__ (~toonn@user/toonn)
[16:49:00] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[16:49:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:53:22] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 260 seconds)
[16:55:03] *** Quits: xff0x (~xff0x@2001:1a81:5231:4c00:af6c:e4ce:ed0b:b587) (Remote host closed the connection)
[16:55:20] *** Joins: xff0x (~xff0x@2001:1a81:5231:4c00:cc14:8453:5a9c:d44b)
[16:55:33] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[16:57:02] *** Quits: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93) (Ping timeout: 240 seconds)
[17:01:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzz…)
[17:04:48] *** Quits: fabfianda (~fabfianda@mob-5-90-247-119.net.vodafone.it) (Read error: Connection reset by peer)
[17:04:57] *** Joins: fabfianda (~fabfianda@net-93-148-114-144.cust.vodafonedsl.it)
[17:12:48] *** Joins: jkaye (~jkaye@216.53.205.34)
[17:13:01] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[17:15:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:16:37] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[17:18:22] *** Quits: mei (~mei@user/mei) (Quit: mei)
[17:19:46] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[17:19:52] *** Joins: mei (~mei@user/mei)
[17:24:20] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[17:26:04] *** Joins: mimmy (~mimmy@146.70.75.149)
[17:27:23] *** Joins: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93)
[17:29:01] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[17:29:59] *** Joins: euouae (~euouae@user/euouae)
[17:30:32] <euouae> Hello how can I memoize the function (a -> a) -> a -> [a] given by [x, f x, f $ f x, f $ f $ f x, ...]
[17:30:37] *** Joins: Xnuk (~xnuk@vultr.xnu.kr)
[17:30:43] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[17:30:59] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 264 seconds)
[17:31:37] *** Joins: dschrempf (~dominik@62.240.134.78)
[17:31:38] <hololeap> euouae: you could use the monad-memo package
[17:32:07] <euouae> hm, that looks nicer than the memoize package, which has very little docs
[17:32:25] *** Quits: dschrempf (~dominik@62.240.134.78) (Client Quit)
[17:32:29] <hololeap> I've used it before. you can also roll your own pretty easily
[17:34:00] <hololeap> but you will necessarily end up with something that looks like: (a -> m a) -> a -> m [a]
[17:35:12] *** Quits: gg (~gg@2a01:e0a:819:1510:8568:3ca4:33bc:8c5b) (Ping timeout: 268 seconds)
[17:38:32] *** Quits: viole (~viole@user/viole) (Ping timeout: 240 seconds)
[17:39:29] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:39:58] <euouae> thanks 
[17:40:22] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[17:42:51] <euouae> If I have a vector of N elements and I'd like to iterate over all k-tuples with elements fron that vector, how can I do it without building a vector of N^k elements?
[17:43:08] <euouae> One way is by using indices, maybe that's it?
[17:44:03] *** Quits: Xnuk (~xnuk@vultr.xnu.kr) (Remote host closed the connection)
[17:44:51] <hpc> you just make the list of tuples and loop over it
[17:45:11] <euouae> I'm assuming N,k large
[17:45:14] <hpc> the whole list won't be in memory at once unless you need all of it at the same time, or hold onto a reference to it
[17:45:25] <hpc> a list is just a loop waiting to happen :D
[17:45:44] <euouae> I don't understand, can it really be true?
[17:45:59] <hpc> > [1..] -- unless you think lambdabot has infinite memory, it must be true :D
[17:46:01] <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
[17:46:13] <hpc> laziness in action
[17:46:25] <euouae> You're saying I can have e.g. let xs = map f [1..n], and then you can loop over k-tuples and what is the space/time analysis
[17:47:33] *** Joins: kuribas (~user@ptr-25vy0i85dt12hx5mopu.18120a2.ip6.access.telenet.be)
[17:47:54] <euouae> I'm not convinced :P 
[17:47:58] <hpc> as long as you write it so there's no lingering references to parts of the list you have already looped over, it will be f*n
[17:48:19] <euouae> but the list is looped over k elements
[17:48:35] <euouae> e.g. [g a b c d ... z | a <- xs, b <- xs, ... z <- xs]
[17:49:03] <euouae> so up until the very last few iterations, all elements are needed, right?
[17:49:03] <hpc> oh, i was misreading what xs was there
[17:49:22] <hpc> all elements of xs, sure
[17:49:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:49:34] *** Joins: notzmv (~zmv@user/notzmv)
[17:49:42] <hpc> but that fits in memory anyway, since that's a precondition to your question
[17:50:16] <euouae> right. oh yeah. but [ g ...] is an N^k list.
[17:50:20] <hpc> [g a b ...] will not all be in memory at once unless you hold onto a reference to it
[17:50:31] <euouae> Oh, I see!
[17:50:48] <euouae> Very nice, thanks 
[17:51:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:52:40] <kuribas> I wish more libraries would use abstractions such as monad, aplicative, (pro)functor, etc...
[17:53:26] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[17:53:42] <kuribas> Looking at graphql libraries, the choice is either: a dynamically typed library following the javascript model, a fancy type level library (alla servant), and even more crazy, a library that uses your database schema as the API.
[17:54:23] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[17:54:38] <Lycurgus> speaking of which, does impredication in 9 break much stuff or it can easily be turned off to be 8 like?
[17:54:52] <geekosaur> it defaults off
[17:54:59] <Lycurgus> ah
[17:55:06] <kuribas> What does impredication allow?
[17:55:13] <geekosaur> it's just a fixed ImpredicativeTypes, which was always a hack before that
[17:56:04] <kuribas> Does it mean you can return polymorphic functions from a function?
[17:57:16] * geekosaur is actually not sure, this goes beyond his small understanding of type theory
[17:57:40] <geekosaur> I think it allows inference of forall-ed types
[17:57:41] <Franciman> kuribas: it allows
[17:57:44] <Franciman> \x. x x
[17:57:46] <Franciman> to be well typed
[17:57:59] <Franciman> but you can never use it :P except for applying it to id
[17:58:25] <geekosaur> to an extent at least, since ghc's type inference doesn't really support rank-2 polymorphism and rank >2 is undecidable
[17:58:37] <Franciman> yes you can return \forall x. x -> y
[17:59:04] <kuribas> I don't care about infering rank-2 or type extensions.
[17:59:34] *** Quits: acidjnk (~acidjnk@2001:16b8:67ca:f700:e19c:d1d8:58a0:5a93) (Ping timeout: 260 seconds)
[17:59:43] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:05:39] <hololeap> I care about your bear
[18:05:59] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:06:02] <kuribas> hololeap: I don't have a bear...
[18:06:05] <kuribas> I have cat though
[18:06:17] <hololeap> close enough
[18:06:38] *** Quits: jkaye (~jkaye@216.53.205.34) (Ping timeout: 260 seconds)
[18:09:23] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:09:34] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[18:09:57] <euouae> Suppose I want the functionality `lookup x xs` to be fast, as well as `add x xs` and `remove x xs`. What data structure should I be using? Hash table?
[18:10:19] <euouae> the adds won't be many, but there will be a lot of lookups
[18:10:46] <euouae> and there will be a lot of "modify" so to speak, I basically store (x,y) values where x is used for lookup and y is updated 
[18:11:46] <euouae> IntMap would do, x is an int
[18:11:47] *** Quits: fabfianda (~fabfianda@net-93-148-114-144.cust.vodafonedsl.it) (Ping timeout: 264 seconds)
[18:11:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:12:03] *** Joins: slice (~slice@user/slice)
[18:12:12] <geekosaur> if x is an Int you probably want IntMap, yeh
[18:12:14] *** Joins: fabfianda (~fabfianda@mob-5-90-247-119.net.vodafone.it)
[18:13:10] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 260 seconds)
[18:13:31] *** Quits: slice (~slice@user/slice) (Client Quit)
[18:13:39] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[18:13:51] *** Joins: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5)
[18:15:53] <hololeap> vector might make sense too
[18:16:29] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:16:31] *** Joins: cheater (~Username@user/cheater)
[18:16:56] <euouae> I'm going to write something cool and share soon
[18:18:11] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 256 seconds)
[18:20:32] *** Quits: pwug (~pwug@user/pwug) (Remote host closed the connection)
[18:21:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:22:24] *** Joins: mimmy (~mimmy@146.70.75.148)
[18:22:38] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:24:10] <zincy> Does anyone want to look over my code and help me connect two Mealy machines? https://gist.github.com/therewillbecode/22ad270985e3970f4d08444afdad704f
[18:24:24] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[18:25:51] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[18:26:05] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:26:58] *** Joins: max22- (~maxime@2a01cb08833598001ac225a432e05a7f.ipv6.abo.wanadoo.fr)
[18:27:10] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[18:27:23] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[18:28:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:29:32] *** Joins: xkuru (~xkuru@user/xkuru)
[18:29:54] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Ping timeout: 260 seconds)
[18:30:40] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[18:35:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:35:47] <euouae> Here it is, https://paste.tomsmeding.com/rQEcSSn0
[18:37:02] <euouae> maybe I should call it minimalRepresentatives
[18:38:50] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:42:06] *** Joins: xkuru (~xkuru@user/xkuru)
[18:46:23] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:47:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:47:49] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[18:49:09] <int-e> > M.assocs . M.fromListWith min . map ((`mod` 2) &&& id) $ [100,200,301,401]
[18:49:11] <lambdabot>  [(0,100),(1,301)]
[18:50:48] <int-e> euouae: `fromListWith` + `map` can express your `aux`
[18:51:48] <euouae> int-e nice! let me think about it
[18:52:48] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:53:40] *** Joins: gg (~gg@88.160.100.84)
[18:53:53] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:53:59] *** Joins: serg (~a@p200300ef97155109502293e1a26d2ca1.dip0.t-ipconnect.de)
[18:56:34] <hololeap> euouae: one simple change would be to replace your case block with: let y = f x in aux f xs $ IntMap.insertWith min y x m
[18:57:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[18:58:17] <serg> Hi. I have data Expr a = ... I want a Show instance for a = Int. I write instance Show (Expr Int) where but I get a error: Int is not a type variable. True. Can I have a Show instance for Expr Int?
[18:59:27] <hololeap> serg: wouldn't you want Show a => Show (Expr a) ?
[18:59:41] <hololeap> why limit it to Int?
[19:00:04] <janus> % data Expr a
[19:00:05] <yahb> janus: type role Expr phantom; type Expr :: forall {k}. k -> *; data Expr a
[19:00:20] <janus> % :set -XFlexibleInstances
[19:00:20] <yahb> janus: 
[19:00:30] <euouae> How can I refer to the constructor of some field in case of ambiguous name?
[19:00:37] <janus> % instance Show (Expr a) where
[19:00:37] <yahb> janus: ; <interactive>:61:10: warning: [-Wmissing-methods]; * No explicit implementation for; either `showsPrec' or `show'; * In the instance declaration for `Show (Expr a)'
[19:00:41] <euouae> e.g. I have both `area` as a constructor and as a function
[19:01:00] <euouae> ah -- nevermind me
[19:01:03] <hololeap> euouae: simply put, you can't
[19:01:15] <serg> This means I have to write show for every a not only Int?
[19:01:25] <janus> % instance Show (Expr Int) where
[19:01:25] <yahb> janus: ; <interactive>:62:10: error:; * Overlapping instances for Show (Expr Int) arising from a use of `GHC.Show.$dmshowsPrec'; Matching instances:; instance Show (Expr Int) -- Defined at <interactive>:62:10; instance [safe] forall k (a :: k). Show (Expr a) -- Defined at <interactive>:61:10; * In the expression: GHC.Show.$dmshowsPrec @(Expr Int); In an equation for `showsPre
[19:01:27] <hololeap> serg: no, just derive it
[19:01:57] <hololeap> data Expr a = ... deriving (Show, ...)
[19:02:00] <int-e> % :q
[19:02:00] <yahb> int-e: 
[19:02:36] <serg> I know. I wanted to exercise. So meaning of Show a => is every a in Expr a has Show instance too?
[19:02:50] <hololeap> right
[19:02:58] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Quit: -)
[19:03:08] <serg> And FlexibleInstances of janus?
[19:03:12] <geekosaur> "if there is a Show instance for a, then the Show instance for (Expr a) is …"
[19:03:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[19:03:24] <int-e> % data FooBar a = Foo a | Bar
[19:03:25] <yahb> int-e: 
[19:04:50] <hololeap> at some point when writing show or showsPrec for `Expr a`, you will inevitably be calling show or showsPrec for `a`
[19:05:14] <int-e> % instance Show a => Show (FooBar a) where show (Foo a) = "a Foo holding a " ++ show a; show Bar = "a Bar holding nothing"
[19:05:14] <yahb> int-e: 
[19:05:16] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:05:18] <hololeap> thus `a` needs to have a Show instance
[19:05:21] <int-e> % Foo Nothing
[19:05:22] <yahb> int-e: a Foo holding a Nothing
[19:06:00] <int-e> % Foo (Foo Bar)
[19:06:00] <yahb> int-e: a Foo holding a a Foo holding a a Bar holding nothing
[19:06:15] <int-e> Hah.
[19:06:32] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[19:06:35] <janus> what is the motivation for having data constructors here?
[19:06:57] *** Joins: acidjnk_new (~acidjnk@2001:16b8:67ca:f700:55fd:e2e5:a98b:cf1a)
[19:07:10] <int-e> me? just having some fun
[19:07:57] <janus> right right, just wanted to make sure i wasn't missing anything. seemed to me like the question was not concerned with data
[19:08:01] <serg> I think I understand. show inside show for Expr is a different show.
[19:08:15] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[19:08:45] <serg> but original solution works with flexibleinstances
[19:09:24] <janus> but i think the question is if that is really want you want. but since this is an exercise i guess the requirements cannot be pinned down
[19:09:46] <serg> is flexibleinstances bad?
[19:09:55] *** Joins: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr)
[19:10:40] <geekosaur> not in and of itself. but using it for this is something of a smell
[19:10:45] <int-e> Nah, FlexibleInstances is benign. UndecidableInstances is benign if your code compiles. Anything overlapping is a road to hell, where incoherent instances live.
[19:11:25] <janus> benign also according to diehl http://dev.stephendiehl.com/hask/#classes
[19:11:39] <int-e> Yeah I wonder why FlexibleInstances would be required for something simple like this.
[19:11:46] *** Joins: rusty (~rustyboy@82.77.237.221)
[19:11:54] <geekosaur> just because haskell98/2010 doesn't spec it
[19:12:14] <serg> Is meaning of flexibleinstances only Show instance for Expr a for some a?
[19:12:21] <geekosaur> "must be of the form T a b c where a, b, c are type variables"
[19:13:01] <int-e> if you have  instance (Show a) => Show (Expr a) where ...  then that doesn't require FlexibleInstances
[19:13:09] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:13:12] <int-e> though enabling FlexibleInstances won't hurt of course
[19:13:38] <serg> this works: instance Show a => Show (Expr a) where show (Lit a) = show a ...
[19:14:12] <serg> I think I understand. Thank you.
[19:14:41] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[19:16:21] *** Quits: serg (~a@p200300ef97155109502293e1a26d2ca1.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[19:18:01] <janus> where can a read more about how templateHaskell causes more module invalidation than w/o TH?
[19:18:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[19:20:47] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 264 seconds)
[19:21:08] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:22:50] <euouae> A file contains this data, "Just [(0,Triangle {a = Point {x = 0, y = 0}, b = Point {x = 0, y = 0}, c = Point {x = 0, y = 0}})]\n" how can I read it back into a variable?
[19:23:06] <euouae> I've tried `read <$> f :: IO (Maybe (Int, [Triangle]))` but it's not working out
[19:23:17] <euouae> Also tried with `return`, but that didn't work out either 
[19:25:32] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[19:26:16] <janus> % newtype A = A Int deriving (Show, Read)
[19:26:16] <yahb> janus: 
[19:26:19] <janus> % read (show (A 1))
[19:26:19] <yahb> janus: *** Exception: Prelude.read: no parse
[19:27:41] <int-e> % read (show (A 1)) :: A
[19:27:42] <yahb> int-e: A 1
[19:28:07] <janus> ooh it is type defaulting :O omg
[19:28:10] <int-e> (it's ghci with extended defaulting rules... defaults to ())
[19:28:34] <int-e> % read "A 1" :: ()
[19:28:34] <yahb> int-e: *** Exception: Prelude.read: no parse
[19:28:35] <euouae> I recall doing something like `((,) <*> f <$> g) x y` to get (f x, g y)...
[19:28:39] <euouae> But I can't get it to work, is that wrong?
[19:29:10] <int-e> ((,) <*> f <$> g) x is (f x, g x)
[19:29:18] <janus> euouae: are you using the same deriving strategy for Read and Show?
[19:29:24] <euouae> janus yeah 
[19:29:28] <zincy> With the Machines library how do you express a bidirectional relationship between machines. For example machine A writes output which updates machine B but depending on the state of machine B, machine A might need to be updated.
[19:29:40] <int-e> :t curry (?f *** ?g)
[19:29:41] <lambdabot> (?f::a -> c, ?g::b -> c') => a -> b -> (c, c')
[19:29:42] <euouae> int-e oh nice 
[19:30:05] <euouae> That's /actually/ what I need 
[19:30:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[19:30:26] <int-e> :t f &&& g
[19:30:27] <lambdabot> (Arrow a, FromExpr (a b c), FromExpr (a b c')) => a b (c, c')
[19:30:39] <int-e> :t id . (f &&& g)
[19:30:40] <lambdabot> (Show a, FromExpr c, FromExpr c') => a -> (c, c')
[19:30:56] <int-e> oh, duh
[19:31:00] <int-e> :t id . (?f &&& ?g)
[19:31:01] <lambdabot> (?f::a -> c, ?g::a -> c') => a -> (c, c')
[19:32:15] <euouae> `fromListwith min $ map ((,) <*> f <$> id) xs` is what you propose int-e I believe
[19:32:32] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 240 seconds)
[19:32:40] <int-e> euouae: yeah I used &&& earlier
[19:34:43] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9)
[19:35:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[19:35:51] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:38:02] <euouae> I'm getting it wrong because things like `((,) <*> (1+) <$> Just) 1` fail
[19:38:07] <euouae> I'm not sure why, ugh :D 
[19:38:17] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d0f4:92d3:1aef:5b27) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:47] <int-e> euouae: oh you've mixed up <$> and <*>
[19:39:06] <euouae> I'm going with &&&, seems nice 
[19:39:06] <int-e> (and I copied it without noticing)
[19:39:47] <int-e> > ((,) <$> (1+) <*> Just) 1
[19:39:49] <lambdabot>  (2,Just 1)
[19:40:03] <int-e> > ((1+) &&& Just) 1
[19:40:05] <lambdabot>  (2,Just 1)
[19:40:35] <int-e> and before you ask, &&& comes from Control.Arrow
[19:40:45] <euouae> Indeed -- no worries, I hoogled that 
[19:41:01] <janus> applicative style is better just because it avoids control.arrow ;)
[19:41:36] *** Quits: acidjnk_new (~acidjnk@2001:16b8:67ca:f700:55fd:e2e5:a98b:cf1a) (Ping timeout: 268 seconds)
[19:41:46] <janus> and you have less churn when you need a third member.
[19:42:33] <janus> even less churn if you decide to have a dedicated data type instead of tuples
[19:42:38] <int-e> in that spirit you should minimize dependencies and write a lambda  \x -> (f x, x)
[19:42:49] <Rembane_> Applicative style isn't as cool though :D 
[19:43:35] <janus> int-e: unavoidable dependencies don't need to be avoided ;)
[19:43:54] <janus> applicative is in prelude, no?
[19:46:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:47:32] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[19:47:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9) (Ping timeout: 268 seconds)
[19:47:51] <int-e> Not in Haskell2010 :P
[19:48:01] <euouae> I think that might be a good idea too, to write it that way 
[19:48:52] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d0f4:92d3:1aef:5b27)
[19:49:13] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9)
[19:49:24] <janus> Rembane_: here's a cool applicative pattern in purescript: instance DecodeJson Person where decodeJson json = o <- decodeJson; Person <$> { name: _, age: _ } <$> (o .: "name") <*> (o .: "age")
[19:49:45] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[19:50:30] <janus> (advantage is multiple errors if an element has a problem) (possible because the _ are arguments to an implicit anonymous function)
[19:51:14] <Rembane_> janus: That's pretty. Should there be two <$> in that line? 
[19:52:02] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:52:47] <janus> Rembane_: yeah, depends whether you want to wrap your records with a newtype constructor or not. we do that here. but if you don't , just remove "Person <$>". purescript's records are not necessarily wrapped in a data constructor with a similar name to the type, as is common in haskell
[19:52:49] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[19:53:02] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d0f4:92d3:1aef:5b27) (Ping timeout: 240 seconds)
[19:53:26] <Rembane_> janus: Got it. Cool! 
[19:55:47] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[19:55:49] <hololeap> zincy: those mealy machines seem confusing
[19:55:59] <zincy> hololeap: How come?
[19:56:23] <hololeap> I guess I just don't have an intuition for them
[19:57:35] <zincy> Its just a turn based game that has a mealy for whether each player has acted and a mealy for game stages
[19:58:01] <zincy> Players cannot act if they are in an inactive state etc ...
[19:59:10] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[19:59:37] <hololeap> unfoldMealy :: (s -> a -> (b, s)) -> s -> Mealy a b
[20:00:10] <hololeap> this is a much more understandable representation to me, which makes me wonder if the whole Mealy abstraction is worth it or if it's just extra mental overhead
[20:00:57] <hololeap> but I guess that could be said about any abstraction I don't have an intuition for :p
[20:01:09] <hololeap> then again, you seem to be having problems with it as well, zincy
[20:01:49] <zincy> yes I am hehe
[20:07:55] *** Joins: oxide (~lambda@user/oxide)
[20:09:03] *** Joins: ubert (~Thunderbi@p200300ecdf0ba279387348ed975200f7.dip0.t-ipconnect.de)
[20:10:22] <hololeap> A Profunctor p is a Cosieve on f if it is a subprofunctor of Costar f.
[20:10:49] <hololeap> where does ekmett get these terms from?
[20:12:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[20:13:04] <hololeap> Sketches of an Elephant – A Topos Theory Compendium
[20:13:09] <hololeap> is that the original source?
[20:15:10] <hololeap> I'm tired of going into a drooling stupor when I read the docs for profunctors
[20:18:59] <zincy> I am finding this library quite tricky to understand
[20:20:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:21:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:29:05] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:30:59] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[20:31:31] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:36:23] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[20:37:38] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:38:41] *** Joins: serg (~a@p200300ef97155109502293e1a26d2ca1.dip0.t-ipconnect.de)
[20:39:48] *** Quits: tired (~tired@user/tired) (Quit: /)
[20:41:21] *** Joins: tired (~tired@user/tired)
[20:41:24] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:41:51] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: Lost terminal)
[20:41:56] <ProfSimm> I have something odd to ask, but I wanna her your opinion. In Haskell, two identical types by different names are different, right. Nominal
[20:41:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:42:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:42:18] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-158.cust.tzulo.com)
[20:44:24] *** Joins: timCF_ (~timCF@m91-129-99-212.cust.tele2.ee)
[20:44:32] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 240 seconds)
[20:44:55] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:45:38] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[20:46:34] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:46:41] *** Quits: ubert (~Thunderbi@p200300ecdf0ba279387348ed975200f7.dip0.t-ipconnect.de) (Quit: ubert)
[20:47:19] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[20:48:26] <timCF_> Hello! Let's say I do have a `newtype PosRat = PosRat (Ratio Natural)` with smart constructors and stuff to create new values of this type with potential failure for example in case where value is == 0. Is there the way to have literals of my new type which I can write in a code just as values (without applying smart constructors)? Basically I want to apply smart constructor in compile-time. But without 
[20:48:32] <timCF_> TH. Just similar the way Natural type literals are handled.
[20:48:55] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9) (Ping timeout: 250 seconds)
[20:49:15] <ProfSimm> Haskell is nominal, right. Two identical types with different name would be different types
[20:49:54] <monochrom> Yes.
[20:51:39] <ProfSimm> Let's imagine a system where two differently named types are compared structurally, at depth, and Haskell speculatively branches by executing the code twice by substituting one of the other. And at some threshold, if they cause the same outcomes, they become one type.
[20:52:09] <ProfSimm> Is there a name for this idea
[20:52:30] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[20:53:27] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Client Quit)
[20:54:50] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[20:54:50] <geekosaur> timCF_, not without patching the compiler to recognize the new literals
[20:54:59] *** Quits: xff0x (~xff0x@2001:1a81:5231:4c00:cc14:8453:5a9c:d44b) (Ping timeout: 268 seconds)
[20:55:16] <timCF_> geekosaur: so TH is the simplest way to go I guess?
[20:55:17] <geekosaur> heck, it doesn't even recognize Ratio Integer literals, % is a smart constructor
[20:55:31] *** Joins: xff0x (~xff0x@2001:1a81:5231:4c00:adf9:5009:dcd2:4bf0)
[20:55:44] <geekosaur> or quasiquoters, which amount to the same thing
[20:56:00] *** Joins: benin (~benin@183.82.178.244)
[20:56:03] <timCF_> geekosaur: but it does recognize Natural, and will not compile negative literals
[20:56:15] <geekosaur> right
[20:58:56] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[20:59:11] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[20:59:18] *** Joins: zero (~z@user/zero)
[20:59:20] <dsal> ProfSimm: We do have a concept of a type role which allows us to treat (or prevents us from treating) a structure of one type as a structure of another type with the same representation, but the deep comparison thing is orthogonal, I think.
[20:59:33] <dsal> (super likely I don't understand what you're getting at, but this at least sounds similar)
[21:00:14] <ProfSimm> dsal, the structural comparison would be some initial sanity check. But I think two types stand the test of being compatible if they actually produce the same outcomes
[21:00:53] <zero> if we can have a total linear function that only uses total linear functionss, we could pattern match against them, couldn't we?
[21:00:54] <ProfSimm> dsal well I'm using a type a bit differently here. Not as in "same contract, different result, different implementation"
[21:01:08] <ProfSimm> But as in "same contract and result, different implementation"
[21:01:32] <ProfSimm> zero, do you know how epicycles work (related concept fourier transform)
[21:01:49] <zero> ProfSimm: i know nothing about it
[21:01:49] *** Quits: juhp (~juhp@128.106.188.82) (Read error: Connection reset by peer)
[21:02:09] <zero> not by name at least
[21:02:22] <ProfSimm> zero, basically you can take a signal and decompose it to frequencies, each a sine wave with different amplitude
[21:02:31] <zero> ah yes
[21:02:35] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[21:02:46] <dsal> ProfSimm: Yeah, I don't think that concept exists directly.  I'm thinking about coerce, which looks like this:  https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Coerce.html  -- type role allows us to say that given a `Map k v` the `v` can be coerced without changing meaning, but the `k` cannot.
[21:02:52] <ProfSimm> zero, do the same in 2D you get circles. You can use this analysis to draw homer simply by connecting rotating circle of various size and speed
[21:03:17] <shapr> o hi ProfSimm, how's code?
[21:03:20] <ProfSimm> zero: https://www.youtube.com/watch?v=QVuU2YCwHjw
[21:03:34] <zero> ProfSimm: yes, i get that. how does it relate to my questin?
[21:03:42] <ProfSimm> shapr, I'm in a very odd place dude. I'm gonna need a quantum computer to implement some features :-)
[21:04:10] <ProfSimm> zero, well the thing I wanna achieve is not match linear functions, but match result
[21:04:32] <ProfSimm> And actually "close enough" is an allowance, for some specific amount of close enough
[21:05:10] <ProfSimm> Wait, let me redefine this
[21:05:35] <ProfSimm> Imagine if Haskell trained a neural network on a type, and when they get close enough, it replaces the type with the neural network
[21:06:02] <zero> ProfSimm: ah, i was confused. i entered the channel just now to ask my question, have no idea of what you were talking about ;)
[21:07:39] <ProfSimm> Oh OK
[21:08:58] <dsal> ProfSimm: It's not  clear to me what it means to change a type along the way.  It sounds like you're describing a sum type at some point with some kind of ability to coerce that I don't think you're going to get for free.
[21:10:25] <geekosaur> zero, I think you would need more than linearity to pattern match a function
[21:11:03] <geekosaur> try figuring out what this would look like
[21:13:44] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[21:15:59] *** Quits: ouroboros_ (~ouroboros@2804:14c:65e4:93f6::1001) (Quit: Konversation terminated!)
[21:21:02] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 240 seconds)
[21:23:43] *** Joins: econo (uid147250@user/econo)
[21:24:11] <hololeap> @hackage validated-literals -- timCF_
[21:24:11] <lambdabot> https://hackage.haskell.org/package/validated-literals -- timCF_
[21:24:22] <hololeap> this uses TH, but it might be useful for you
[21:27:19] <awpr> oh I missed that question -- check out https://hackage.haskell.org/package/dependent-literals-plugin
[21:29:26] <awpr> it's a bit heavyweight just to rule out zero without calling a smart constructor, but I guess it could be worth it if you have code with tons of PosRat literals that would be overwhelmed with noise otherwise
[21:30:01] <timCF_> thanks!
[21:31:25] *** Quits: fabfianda (~fabfianda@mob-5-90-247-119.net.vodafone.it) (Ping timeout: 256 seconds)
[21:31:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0) (Remote host closed the connection)
[21:31:58] *** Joins: fabfianda (~fabfianda@net-2-32-17-50.cust.vodafonedsl.it)
[21:36:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a8:9431:5c1:c0e0)
[21:42:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:42:51] *** Quits: tired (~tired@user/tired) (Quit: /)
[21:43:22] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[21:43:22] *** Quits: fabfianda (~fabfianda@net-2-32-17-50.cust.vodafonedsl.it) (Quit: Quit)
[21:44:23] *** Joins: tired (~tired@user/tired)
[21:45:35] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[21:47:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[21:52:45] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzz…)
[21:54:08] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[21:55:52] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[21:56:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a)
[21:57:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:59:45] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:05:52] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[22:06:05] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:06:26] *** Quits: rusty (~rustyboy@82.77.237.221) (Ping timeout: 260 seconds)
[22:13:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:14:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:15:47] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[22:15:54] *** Joins: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374)
[22:16:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:22] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[22:18:51] *** Quits: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr) (Ping timeout: 268 seconds)
[22:19:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:21:51] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:23:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:25:02] *** Quits: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:25:42] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:26:32] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (Ping timeout: 240 seconds)
[22:27:19] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:27:21] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Quit: ZNC 1.8.2 - https://znc.in)
[22:27:48] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[22:28:51] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[22:31:12] *** Quits: max22- (~maxime@2a01cb08833598001ac225a432e05a7f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:36:39] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d41b:9326:c4d8:9f2a) (Quit: gone to sleep. ZZZzzz…)
[22:36:50] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[22:39:45] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[22:40:35] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:42:07] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:42:19] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:42:40] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[22:44:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 240 seconds)
[22:47:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:50:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:53:03] <sm> g'day all
[22:54:11] *** Joins: coolnickname (~omg@user/coolnickname)
[22:54:18] <sm> so.. for haskell code, 2-space indent, or 4 ?
[22:54:58] <geekosaur> I use 2 fwiw
[22:55:06] <sm> I use 2, but I'm getting the feeling 4 might be smoother with haskell syntax
[22:55:15] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:55:42] *** Joins: pwug (~pwug@user/pwug)
[22:55:48] <sm> let a=1
[22:55:48] <sm>     b=2
[22:55:48] <sm> ... eg
[22:55:53] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 250 seconds)
[22:56:07] <EvanR> hah
[22:56:48] <awpr> I've seen some people just put the first let-binding on a new line.  but I tend to just make an exception and align let-bindings at 4 spaces, and use 2 for normal indentation
[22:56:53] <geekosaur> I wouldn't use 2 there but that's because of block indentation; I'd use 2 if I hit enter after the let
[22:58:27] <EvanR> if I need recursive definitions I try hard to use where not let
[22:59:10] <EvanR> if I need a sequence of lets I do https://paste.tomsmeding.com/xHhQbPoZ
[22:59:14] <EvanR> which is rare
[23:00:17] <EvanR> basically, over 1 level of indentation and I feel like I did something wrong
[23:00:37] <EvanR> (which sm's let has)
[23:02:05] * sm was trying out floskell, which uses 4 by default
[23:02:41] <monochrom> I use a 2-4 combo.  "f x = y" "<2 spaces>where" "<4 spaces>y = x+x"
[23:03:21] <Hecate> hohai
[23:03:27] <Hecate> I've done a thing: https://twitter.com/TechnoEmpress/status/1462135732680769539
[23:03:27] <maerwald> I use whatever I feel like at the moment
[23:03:36] <monochrom> I learned it from tibbe's style guide. I think it's an ingenious design accomodating "where" which you don't find in other languages.
[23:03:53] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Quit: Leaving.)
[23:04:12] <monochrom> https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
[23:04:21] <sm> thanks
[23:04:30] <maerwald> burn all style guides
[23:04:33] *** Joins: max22- (~maxime@2a01cb0883359800a2387d5f4d01fe15.ipv6.abo.wanadoo.fr)
[23:04:48] <sm> ah yes, half-indent for `where`
[23:05:07] <monochrom> In other languages (e.g., C, shell script), I use 2 spaces.
[23:05:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:05:18] <sm> that's another reason I think 4 might be smoother. Half of a 2-indent is not much
[23:05:39] <maerwald> I've worked on a 4spaces indent codebase, I remember some corner cases there too
[23:05:53] <sm> though, I tend to give `where` a full indent, and just indent the definitions more
[23:06:06] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[23:06:11] <maerwald> ah yeah... there's a corner case with `do` and indenting
[23:06:33] <geekosaur> yeh, my usual style means it's indented by 3 because of block indenting
[23:06:43] <geekosaur> unless I start it with a newline, then it's 2
[23:06:47] <sm> (why should where bindings be indented less than let bindings, after all)
[23:07:35] <monochrom> I'm very happy that in "let x=1", the "let " length is 4, so when on the next line I have "<4 spaces>y=2" it lines up.
[23:08:30] <maerwald> here strict 4 indenting makes compilation fail: https://paste.tomsmeding.com/rLQWB31q
[23:08:50] <sm> I guess I'll start by just adopting the 4-space indent for let.. that's pretty low impact
[23:09:14] <sm> low benefit too I guess, code formatters will be confused
[23:09:30] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[23:10:15] <EvanR> I put the main where at the end of the line before the indented chunk, and people seem to hate it
[23:10:23] <EvanR> dunno why
[23:11:21] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-158.cust.tzulo.com) (Quit: Leaving)
[23:11:23] <maerwald> in all the time I had to engage in styling discussions in industry... I could have written a Haskell compiler
[23:12:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:12:58] <monochrom> I don't hate it, but I don't do it because " where" is like 9% of your "70-column line" quota.
[23:13:36] <monochrom> Although, I have long relaxed to 80 columns.
[23:14:15] <geekosaur> I'm up to 96
[23:14:26] <monochrom> It's the 21st century. We use 16:9 screens, not 9:16 screens. Even 100 columns is reasonable.
[23:14:39] <maerwald> savage... what if someone reads your code on a small ssh terminal in a bunker after doomsday?
[23:14:41] <geekosaur> 70/72 died with card readers, 80 died with physical terminals :)
[23:15:04] <monochrom> dragging column limits screaming kicking into the century of the 16:9 screen.
[23:15:06] <Rembane_> OTOH, human eyes seem to have a max width that's reasonable to read 
[23:15:45] <maerwald> Rembane_: there's neuroscience research that moving your eyes laterally increases happiness (I'm not kidding) :p
[23:15:58] <sm> for code, I think logical grouping by line is more important than line width
[23:16:13] <sm> we are usually skimming code, not reading every word
[23:16:36] <sm> it's fine if the last bit is cut off at times
[23:16:51] <Rembane_> maerwald: Nice! Now we need some creative surgery so we can rotate the eyes inside the skull :D
[23:16:53] *** Joins: acidjnk_new (~acidjnk@2001:16b8:67ca:f700:252c:a817:9d7d:a6ca)
[23:16:59] <Rembane_> maerwald: Eyes go: "WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!!!"
[23:17:11] <monochrom> Oh well, I guess 30 years later people read code on TikTok, they will be back at 40 columns again (remember those? >:) )
[23:17:22] <EvanR> if you aren't coding in style, what's the point
[23:17:28] <EvanR> :sunglasses:
[23:17:29] <maerwald> https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6596227/
[23:17:51] <sm> but for text, speaking of short lines readability.. I really like the newspaper-style layout of https://scroll.pub
[23:17:59] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 250 seconds)
[23:18:02] <geekosaur> after the great emp pulse we won't be reading code at all :þ
[23:18:25] <sm> geekosaur: :-/
[23:18:29] <monochrom> Actually I hate those double-column layouts.
[23:18:56] <monochrom> Well OK, I'm fine with in on physical paper. But on a 16:9 screen?! 
[23:19:42] <geekosaur> I use a 2-column layout. two separate editor windows, usually on different files
[23:19:43] <maerwald> Rembane_: people usually get really confused if you bring scientific research into the style discussion... I mean if you're nitpicking on irrelevant stuff, do it all the way!
[23:20:13] <Rembane_> maerwald: Sure thing! Eventually we need to go to the sources. 
[23:20:27] <monochrom> OK, I'm fine with it on a 16:9 screen if each column fits within the verticle screen length.
[23:20:36] <monochrom> Clearly, academic paper 
[23:21:00] <monochrom> Clearly, neither academic paper PDFs nor scroll.pub satisfies that.
[23:21:29] <sm> monochrom: scroll.pub doesn't do that (it fits the width, and extends downward). But that (fitting the height, and extending sideways) would also be nice to try.
[23:22:05] <maerwald> Rembane_: also, really good argument for spaces: https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/
[23:22:06] <sm> even as it is now, I found it pretty refreshing and efficient for reading a faq
[23:22:20] <Rembane_> maerwald: I dig that! 
[23:22:51] <maerwald> and apparently, haskell is wrong with using camelCase: https://ieeexplore.ieee.org/document/5521745
[23:23:00] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:23:18] <monochrom> Therefore, when a sentence is split between 2 columns, it is also separated by like a metre.
[23:23:39] <monochrom> a metre of scrolling
[23:23:51] <sm> it gets worse the more content you put on one page, yes
[23:23:53] <monochrom> How would any human consider it ergonomic, I don't know.
[23:24:30] <sm> but newspapers work like that too, and we manage
[23:24:58] <monochrom> scroll.pub itself shows an ample example of doing it wrong.
[23:25:14] <monochrom> newspapers are on physical paper, as said. you just fly your eyes.
[23:25:45] <geekosaur> newspapers also have "above/below the fold"
[23:25:53] <monochrom> Where as on scroll.pub, consider the section "How do I check browser performance?"
[23:26:05] <monochrom> You have an opening sentence.
[23:26:21] <monochrom> And then, what, the sample code requires scrolling all the way back to the top.
[23:26:36] <monochrom> Remember cathoy ray tubes?
[23:27:14] <monochrom> Remember its electron beam goes horizontally normally, but it has to quickly fly back to the left for the next line.
[23:27:34] <monochrom> I feel like 2-column layout fanatics want me to do the same manually vertically.
[23:27:52] <monochrom> I feel like they are maschosists.
[23:28:03] <monochrom> "Hahaha let's torture the readers thus!"
[23:28:09] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[23:28:36] <hololeap> I indent using random fibonacci numbers
[23:28:38] <monochrom> If you have 5 lines of code to post.
[23:28:46] <awpr> once per page, though.  if I see lines the full width of my monitor, I have no chance of moving my eyes correctly back to the start of the next line
[23:29:03] <awpr> with a newspaper column width line, it's almost 100% reliably accurate
[23:29:20] <monochrom> They're like "let's put 3 of those lines at the far bottom, let's put the other 2 lines at the far top, so that people cannot use copy-paste".
[23:29:25] <hololeap> just for that e e cummings vibe
[23:29:59] <maerwald> but the realy question is: do you align vertically?!
[23:31:55] <monochrom> It breaks all kinds of proximity, locality principles.
[23:32:20] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:32:24] <EvanR> quantum style
[23:32:50] <EvanR> my C code is entangled
[23:33:14] <maerwald> I have seen suggestions like this: https://paste.tomsmeding.com/TV7JCPRb
[23:33:30] <maerwald> so you can see relations of identifiers
[23:33:33] <EvanR> :horror:
[23:34:20] <maerwald> I mean... in maths you sometimes do that
[23:36:03] <monochrom> You know, it works when your function can be linearly typed. Clearly, in retrospect.
[23:36:32] <monochrom> If your x needs to be mentioned at 100 places, good luck with that.
[23:36:48] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:42] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:39:38] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[23:39:50] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[23:40:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:41:02] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 240 seconds)
[23:41:47] *** Joins: finsternis (~X@23.226.237.192)
[23:49:57] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:50:53] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[23:54:45] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 265 seconds)
[23:55:09] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[23:59:40] *** Joins: Sgeo (~Sgeo@user/sgeo)
