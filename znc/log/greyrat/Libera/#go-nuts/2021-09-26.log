[00:00:52] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:10:45] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:10:50] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:18:31] *** Joins: wroathe (~wroathe@user/wroathe)
[00:21:37] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:36:45] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[00:44:24] *** Joins: Guest89 (~Guest89@c-98-248-66-141.hsd1.ca.comcast.net)
[00:47:20] *** Quits: kayprish (~kayprish@46.240.130.158) (Remote host closed the connection)
[00:53:17] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[00:54:33] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:55:17] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:57:46] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[00:58:05] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[01:02:26] *** Quits: Guest89 (~Guest89@c-98-248-66-141.hsd1.ca.comcast.net) (Quit: Client closed)
[01:02:49] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[01:04:28] *** Joins: dza (~dza@user/dza)
[01:09:55] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.3)
[01:14:24] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[01:20:16] *** Joins: Torr (~Torr@user/torr)
[01:21:24] *** Joins: Gaffel (~gaffel@h-178-174-170-170.a1405.priv.bahnhof.se)
[01:22:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:24:45] *** Joins: fikran (~fikran@user/fikran)
[01:25:40] *** Quits: Torr (~Torr@user/torr) ()
[01:26:35] *** Joins: Torr (~Torr@user/torr)
[01:27:06] <Torr> Hey
[01:27:18] *** Parts: wroathe (~wroathe@user/wroathe) ()
[01:27:34] <Torr> Is there an interface both json and xml adhere to?
[01:28:23] *** Joins: prout (~prout@user/prout)
[01:28:53] <seebs> i don't understand the question, but in general, no.
[01:29:29] <seebs> XML has too many kinds of things that JSON doesn't have anything corresponding to.
[01:29:45] *** Joins: shka (~herr@109.231.62.239)
[01:30:32] *** Quits: int3l (~int3l@78-83-116-167.spectrumnet.bg) (Quit: WeeChat 3.3)
[01:35:00] <b0nn> Torr: What are you asking, JSON and XML are data formats
[01:35:10] *** Quits: pts33 (~pts33@2603-8000-9103-a43f-1132-8b6b-c5ae-81da.res6.spectrum.com) (Ping timeout: 260 seconds)
[01:35:39] <b0nn> Torr: are you looking for a {Un,}Marshal type that will do the job for either input?
[01:38:33] <Torr> b0nn: That's what I did. What I'd like to know is if there's an interface with these marshalling functions both xml and json packages use.
[01:39:25] <Torr> seebs: "in general, no" lol
[01:40:03] <seebs> XML doesn't have something corresponding to unmarshal because XML doesn't correspond as closely to object-shaped things.
[01:41:16] <fizzie> If I got the gist of the question right, `encoding.TextMarshaler` is an interface both "encoding/xml" and "encoding/json" will use to marshal types in some cases.
[01:41:22] *** Joins: sshow (~sshow@neo.hackeriet.no)
[01:42:35] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:44:05] <seebs> ... sort of, I guess?
[01:44:42] <seebs> But basically, if you have a JSON stream, everything is either objects (which correspond meaningfully to structs), arrays (which correspond meaningfully to slices) or values which correspond directly to bools/ints/floats/strings.
[01:44:54] <seebs> So it makes sense to try to convert that to and from objects fairly directly.
[01:45:24] <Torr> fizzie: Thank you
[01:45:27] <seebs> XML has things like attributes, so a tag could be a container tag that contains other tags, the order of the contained tags might matter even if there's no array-like thing, and so on.
[01:46:21] *** Quits: prout (~prout@user/prout) (Quit: prout.)
[01:53:43] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:57:11] <b0nn> Hmm, arbitrary types can satisfy a common interface purely by finding common method signatures between them
[01:58:06] <b0nn> So, your {Un,}Marshal method on both type is enough to have a "Marshalling" interface
[02:01:45] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[02:05:33] *** Joins: goldfish (~goldfish@user/goldfish)
[02:10:16] *** Joins: toretto (~ryan@user/toretto)
[02:14:19] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.2)
[02:14:48] *** Joins: pts33 (~pts33@2603-8000-9103-a43f-e459-d706-2fce-74f3.res6.spectrum.com)
[02:18:04] *** Joins: mohan43u (~mohan@user/mohan43u)
[02:20:20] *** Joins: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net)
[02:23:58] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[02:35:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:43:47] *** Joins: josuah- (~josuah-@i19-les03-th2-31-37-164-83.sfr.lns.abo.bbox.fr)
[02:54:02] *** Joins: alzgh (~alzgh@user/alzgh)
[02:54:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[02:54:53] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:00:57] <alzgh> hello, I was wondering what go books you can recommend for learning. I'm not very new to programming. Have a little experience with js, py, c#, etc. Newly learning Haskell. I like books with lots of exercises. Thank you and sorry if this is not the right channel to ask :D
[03:01:27] *** Quits: josuah- (~josuah-@i19-les03-th2-31-37-164-83.sfr.lns.abo.bbox.fr) (Remote host closed the connection)
[03:04:34] <since_> alzgh: the interactive go tour is fun https://tour.golang.org/
[03:05:07] <Tv_> alzgh: gopl.io
[03:05:25] <Tv_> gopl.io is the K&R C book equivalent for Go, same K
[03:05:31] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:11:19] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:11:40] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 252 seconds)
[03:12:30] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[03:18:52] <LogicAside> Am I a dingus? base64.RawStdEncoding.DecodeString() fails on my base64 when it ends in =, the padding character. Just says it's illegal, no other information. I'm sure it's something simple, but what's going on here?
[03:21:11] <LogicAside> Aw, it's the RawStdEncoding. StdEncoding allows padding. I am in fact a dingus.
[03:21:11] <seebs> test case?
[03:21:20] <seebs> playground is great for things like that
[03:21:42] <seebs> hmm
[03:21:47] <seebs> i think i may have it though
[03:21:48] <seebs> > RawStdEncoding is the standard raw, unpadded base64 encoding, as defined in RFC 4648 section 3.2. This is the same as StdEncoding but omits padding characters.
[03:22:30] <LogicAside> Yep I just glazed over when looking at that part apparently.
[03:23:09] <seebs> it happens
[03:28:37] <alzgh> thank you guys
[03:32:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:34:05] *** Joins: fikran (~fikran@user/fikran)
[03:39:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:39:43] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[03:40:57] <b0nn> alzgh: https://github.com/dariubs/GoBooks
[03:41:18] <b0nn> Just read, whatever works is stiull current and worth reading, whatever doesn't, isn't
[03:41:22] <b0nn> still*
[03:41:42] <alzgh> this is great b0nn was looking for something like this
[03:41:52] <alzgh> yeah, I connect with some books and dislike others
[03:42:02] <alzgh> gonna look around there, thanks
[03:44:09] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Quit: Leaving)
[03:45:07] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:48:51] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:49:52] *** Parts: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) ()
[03:51:05] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[03:53:41] *** Quits: Torr (~Torr@user/torr) ()
[03:53:54] *** Joins: Torr (~Torr@user/torr)
[03:54:44] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[03:54:55] *** Joins: Torr (~Torr@user/torr)
[03:57:52] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Quit: Leaving)
[04:05:08] *** Joins: Praise- (~Fat@user/praise)
[04:05:10] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[04:14:44] *** Joins: beeza (sid53872@id-53872.tinside.irccloud.com)
[04:17:44] *** Joins: juvenalmuniz (~Juvenal@177-2-85-199.3g.brasiltelecom.net.br)
[04:18:52] *** Quits: juvenalmuniz (~Juvenal@177-2-85-199.3g.brasiltelecom.net.br) (Client Quit)
[04:26:04] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Ping timeout: 252 seconds)
[04:27:14] *** Quits: Torr (~Torr@user/torr) ()
[04:27:27] *** Joins: Torr (~Torr@user/torr)
[04:28:12] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[04:28:23] *** Joins: Torr (~Torr@user/torr)
[04:28:46] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[04:33:25] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[04:33:54] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[04:34:35] *** Joins: khrbt (~znc@user/khrbt)
[04:35:26] *** Quits: gggpkm (~gggpkm@111-251-148-94.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[04:39:21] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[04:43:04] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:52:36] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[04:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:55:00] *** Joins: thing (~thing@user/thing)
[04:55:03] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[05:00:08] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[05:00:41] *** Joins: califax- (~califax@user/califx)
[05:04:27] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:04:28] *** califax- is now known as califax
[05:11:11] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[05:11:27] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.2)
[05:11:41] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[05:13:24] *** Joins: LiftLeft (~LiftLeft@172.98.80.37)
[05:15:51] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:22:08] *** Quits: Torr (~Torr@user/torr) ()
[05:22:19] *** Joins: Torr (~Torr@user/torr)
[05:25:49] *** Joins: neurocyte01328 (~neurocyte@212.232.84.178)
[05:25:49] *** Quits: neurocyte01328 (~neurocyte@212.232.84.178) (Changing host)
[05:25:49] *** Joins: neurocyte01328 (~neurocyte@user/neurocyte)
[05:28:04] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:28:04] *** neurocyte01328 is now known as neurocyte0132
[05:28:33] *** Joins: fef (~thedawn@user/thedawn)
[05:30:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:33:44] *** Joins: unixcat647 (hyperreal@envs.net)
[05:40:47] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[05:41:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:43:25] *** Joins: fikran (~fikran@user/fikran)
[06:05:07] *** Joins: fmlatghor (~lcoogan@2601:5cd:8100:2890::3)
[06:13:29] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[06:14:24] *** Joins: StoneMoe (~stonemoe@103.135.250.130)
[06:18:09] *** Parts: jsanford (~jsanford@user/jsanford) ()
[06:19:58] *** Joins: jsanford (~jsanford@user/jsanford)
[06:20:52] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[06:28:57] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[06:34:42] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[06:35:37] <Izem> The Go type switch reminds me of Scheme, it makes me wonder, what was the motivation for generics in Go?
[06:39:14] <b0nn> compile time vs runtime
[06:41:22] <b0nn> generics (I am led to believe) brings performance enhancements because the compiler has checked all the calls, and there's no "If typ foo run command Bar" instead it's "int calls command BarInt float calls command BarFloat" and so on
[06:42:31] <Izem> yeah, that is true
[06:43:01] <Izem> well, I can't wait to see what they do
[06:43:09] <b0nn> They'
[06:43:23] <b0nn> re in the main branch now, so you can try them out
[06:43:33] <Izem> oh nice :-)
[06:43:53] <b0nn> They're not part of any tagged release though (yet)
[06:45:29] <Izem> Is the proposal the latest document?
[06:45:41] <b0nn> Pass
[06:47:13] *** Joins: yoonkn (~user@175.197.208.79)
[06:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:55:09] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:04:18] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.247)
[07:04:30] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[07:06:35] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[07:06:36] <seebs> the implementation in the compiler right now is pretty buggy and limited, but it's looking good for 1.18
[07:06:48] *** Joins: Lohengrin (~fredo@user/lohengrin)
[07:06:50] <seebs> they are going with GC-stenciling, so it's not full monomorphism, because of concerns about binary size, i guess.
[07:16:42] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:17:38] *** Quits: Lohengrin (~fredo@user/lohengrin) (Quit: WeeChat 3.2.1)
[07:23:51] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[07:23:54] *** Joins: Lohengrin (~fredo@user/lohengrin)
[07:35:54] *** Quits: LiftLeft (~LiftLeft@172.98.80.37) (Ping timeout: 265 seconds)
[07:40:36] <A_Dragon> I had some nice performance with them with my matrix code
[07:40:59] <A_Dragon> <1ms/tick with multiple large copies and accesses a tick
[07:41:11] <A_Dragon> thats also with an additional constraint
[07:41:14] <A_Dragon> Im quite happy with them
[07:50:21] <Izem> if err != nil { ... } -- Is this pattern typically supposed to be true?
[07:50:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:50:52] <A_Dragon> as in, err is non-nil?
[07:51:22] <A_Dragon> if yes, no, it would be the unhappy path, the following code generally is the happy path
[07:52:01] <b0nn> not nil means that the error isn't nil, which means that it has an error to handle
[07:52:41] <b0nn> which is a bit weird at first, but if err == nil means the error returned is nil, therefore it's good (reverse logic :)
[07:52:46] *** Joins: fikran (~fikran@user/fikran)
[07:53:38] *** Joins: k0ta (~k0ta@103.108.94.37)
[07:54:34] * b0nn has to go out, the neighbours upstairs are smoking pot, which I have no problem with, except it stinks the blok out
[08:05:20] *** Quits: pkx (~pkx@user/pkx) (Read error: Connection reset by peer)
[08:09:56] *** Joins: pkx (~pkx@user/pkx)
[08:21:19] *** Quits: pkx (~pkx@user/pkx) (Ping timeout: 252 seconds)
[08:22:55] *** Joins: pkx (~pkx@user/pkx)
[08:24:20] *** Quits: Torr (~Torr@user/torr) ()
[08:24:31] *** Joins: Torr (~Torr@user/torr)
[08:24:35] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[08:32:53] *** Quits: zwr (~zwr@2804:d45:b966:fb00:444d:93c6:eb87:79af) (Remote host closed the connection)
[08:40:52] <fikran> I wrote some Go code, but I believe this was either before or I just never learned about directory structures
[08:40:55] <fikran> the directory structure
[08:41:01] <fikran> is there some documentation that ya'll would recommend?
[08:41:15] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[08:41:16] <fikran> I am trying to restructure some code to have a package, but this is all new to me.
[08:42:16] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:48:32] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[09:11:50] *** Quits: Lohengrin (~fredo@user/lohengrin) (Quit: WeeChat 3.2.1)
[09:13:26] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:15:25] *** Joins: Lohengrin (~fredo@user/lohengrin)
[09:15:26] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.247) (Read error: Connection reset by peer)
[09:18:08] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[09:20:43] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[09:24:56] *** Joins: noxim57 (~noxim@user/noxim)
[09:25:05] *** Quits: noxim57 (~noxim@user/noxim) (Client Quit)
[09:25:24] *** Joins: noxim91 (~noxim@user/noxim)
[09:26:16] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:28:10] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 256 seconds)
[09:31:11] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[09:32:00] *** Joins: califax (~califax@user/califx)
[09:32:16] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[09:42:18] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Remote host closed the connection)
[09:47:51] *** Quits: A_Dragon (A_D@libera/staff/dragon) (Quit: ZNC - https://znc.in)
[09:47:58] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[09:48:08] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[09:48:28] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[09:49:35] *** Joins: mmfood (~mmfood@45.135.187.13)
[09:50:30] *** Joins: k0ta (~k0ta@103.108.94.37)
[09:56:18] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[09:56:29] *** Joins: spithash (~spithash@user/spithash)
[09:59:16] *** Joins: danmurf (uid480399@user/danmurf)
[10:00:14] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[10:00:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[10:00:44] *** Quits: Lohengrin (~fredo@user/lohengrin) (Quit: WeeChat 3.2.1)
[10:02:05] *** Joins: fikran (~fikran@user/fikran)
[10:05:42] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:14:54] *** Quits: StoneMoe (~stonemoe@103.135.250.130) (Quit: Leaving...)
[10:16:25] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[10:16:58] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[10:17:14] *** Joins: ninjin (~ninjin@user/ninjin)
[10:19:48] *** Joins: nrl^ (~nrl@68.101.50.106)
[10:21:02] *** Joins: mrig (~mrig@user/mrig)
[10:23:25] *** Quits: pkx (~pkx@user/pkx) (Quit: leaving)
[10:41:27] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (Changing host)
[10:41:27] *** Joins: jjhoo (~jahakala@user/jjhoo)
[10:50:22] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 252 seconds)
[10:53:14] *** Quits: nrl^ (~nrl@68.101.50.106) (Ping timeout: 252 seconds)
[10:54:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:54:54] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:56:34] *** Joins: shka (~herr@109.231.62.239)
[10:58:48] *** Quits: danmurf (uid480399@user/danmurf) ()
[10:59:55] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[11:00:23] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 252 seconds)
[11:00:47] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Ping timeout: 240 seconds)
[11:05:11] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 265 seconds)
[11:05:35] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[11:08:34] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[11:11:20] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[11:11:44] *** Joins: cim (~cim@205.185.117.110)
[11:20:35] *** Joins: nrl^ (~nrl@68.101.50.106)
[11:35:23] *** Joins: andlabs (~andlabs@70.107.171.168)
[11:38:47] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[11:42:00] *** Joins: bomb (~bomb@user/bomb)
[11:46:25] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: Textual IRC Client: www.textualapp.com)
[11:48:07] *** Joins: andlabs (~andlabs@70.107.171.168)
[11:50:27] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[11:58:00] *** Joins: danmurf (~danmurf@user/danmurf)
[11:59:18] *** Quits: danmurf (~danmurf@user/danmurf) (Client Quit)
[12:06:25] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[12:09:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[12:11:26] *** Joins: fikran (~fikran@user/fikran)
[12:16:57] *** Joins: alzgh (~alzgh@user/alzgh)
[12:29:27] *** Joins: khrbt (~znc@user/khrbt)
[12:30:05] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Read error: Connection reset by peer)
[12:30:48] *** Joins: iluxa (~iliaf@user/iluxa)
[12:31:53] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[12:31:56] *** Quits: iliaf (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[12:33:14] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[12:33:15] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[12:33:15] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[12:40:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:45:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 265 seconds)
[12:46:55] <albertito> fikran: https://golang.org/doc/code
[12:48:33] <albertito> fikran: the very simple answer is to put the code for your package in a directory of its own, and that's the gist of it
[12:49:39] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:52:49] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[12:53:09] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:54:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:57:47] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:58:46] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 265 seconds)
[13:14:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:16:07] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[13:25:55] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[13:30:39] *** Joins: int3l (~int3l@78-83-116-167.spectrumnet.bg)
[13:33:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:36:30] <bomb> https://i.imgur.com/6NS960f.png
[13:37:54] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[13:38:14] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[13:39:20] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Ping timeout: 252 seconds)
[13:43:37] *** Quits: mmfood (~mmfood@45.135.187.13) (Ping timeout: 252 seconds)
[13:45:24] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[13:50:55] *** Quits: dfch (~dfch@user/dfch) (Quit: bye)
[13:52:08] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[13:53:34] *** Joins: dfch (~dfch@user/dfch)
[13:55:38] *** Quits: noxim91 (~noxim@user/noxim) (Ping timeout: 256 seconds)
[14:09:35] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Ping timeout: 252 seconds)
[14:10:14] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:10:25] *** Joins: int33l (~int3l@78-83-116-167.spectrumnet.bg)
[14:13:12] *** Quits: int3l (~int3l@78-83-116-167.spectrumnet.bg) (Ping timeout: 265 seconds)
[14:15:24] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[14:18:49] *** Joins: JeSCaLis23-F (~rizon@188.119.22.206)
[14:19:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:19:12] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Client Quit)
[14:20:11] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[14:20:14] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:20:46] *** Joins: fikran (~fikran@user/fikran)
[14:20:50] *** Quits: JeSCaLis23-F (~rizon@188.119.22.206) (Client Quit)
[14:25:58] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[14:36:06] *** Joins: ninjin- (~ninjin@user/ninjin)
[14:37:00] *** Joins: Atque (~Atque@user/atque)
[14:37:45] *** Quits: ninjin (~ninjin@user/ninjin) (Ping timeout: 276 seconds)
[14:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:55:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:57:10] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Quit: Hecc! My server must have died!)
[15:01:42] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[15:08:07] *** Praise- is now known as Praise
[15:12:41] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[15:18:34] *** Joins: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de)
[15:19:40] <dostoyevsky2> If I am using mux for a web api like so `router := mux.NewRouter(); router.HandleFunc("/user/upload", uploadHandler).Methods("POST")' there isn't really a way to make uploadHandler use a dynamically assigned struct, no?  So I could reuse the uploadHandler for "/files/upload" ... in plain Go I could just declare (d DataStore)uploadHandler(w http.ResponseWriter, r *http.Request)
[15:20:59] <dostoyevsky2> router.HandleFunc("/user/upload", dataStoreUsers.uploadHandler).Methods("POST") // will have to try whether this works
[15:23:09] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:23:48] *** Quits: normen (~normen@p200300d7173dc900845b6146041adbaf.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:23:50] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[15:30:45] *** Quits: erri (~meow@52.8.199.178) (Ping timeout: 260 seconds)
[15:32:40] *** Joins: erri (~meow@52.8.199.178)
[15:40:15] <dostoyevsky2> yeah, seems to work
[15:41:17] *** Joins: xiongxin (~quassel@113.116.32.187)
[15:41:23] <bomb> just suck it up until we get generics in February
[15:44:33] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[15:47:21] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[15:47:39] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[15:48:37] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:03:33] *** Joins: noxim91 (~noxim91@user/noxim)
[16:11:28] *** brooks457 is now known as brooks
[16:15:42] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[16:28:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[16:30:06] *** Joins: fikran (~fikran@user/fikran)
[16:44:29] *** Joins: jla (~jordi@64.225.79.195)
[16:46:58] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[16:49:40] *** Joins: mmfood (~mmfood@45.135.187.94)
[16:53:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:54:27] *** Joins: mrig (~mrig@user/mrig)
[16:54:33] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:55:14] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:01:09] *** Joins: jespada (~jespada@2803:9800:9842:7a62:8558:368:788c:6dc6)
[17:01:35] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 246 seconds)
[17:01:40] *** Quits: pjs (~pjs@user/pjs) (Quit: brb)
[17:02:27] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:05:53] *** Joins: pjs (~pjs@user/pjs)
[17:06:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[17:18:20] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[17:19:21] *** Joins: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl)
[17:19:31] *** Joins: flous (~Undervolt@2a02:a213:2901:5c00:a3bb:ae08:ae8:d830)
[17:23:35] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[17:24:34] *** Joins: califax (~califax@user/califx)
[17:44:39] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:50:03] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Quit: https://www.youtube.com/watch?v=Cvn88kkcEGg)
[17:51:01] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[17:57:05] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[18:03:06] *** Quits: xiongxin (~quassel@113.116.32.187) (Ping timeout: 260 seconds)
[18:03:58] *** Joins: xiongxin (~quassel@113.116.34.58)
[18:08:29] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:09:33] *** Quits: X-Scale (~ARM@83.223.233.176) (Ping timeout: 265 seconds)
[18:10:13] *** X-Scale` is now known as X-Scale
[18:11:29] *** Quits: nrl^ (~nrl@68.101.50.106) (Ping timeout: 265 seconds)
[18:15:50] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 265 seconds)
[18:16:35] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922)
[18:17:07] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[18:19:33] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-3d44-b4b4-9588-c922.inf6.spectrum.com) (Ping timeout: 268 seconds)
[18:20:44] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:27:07] *** Joins: sillybooties (~sillyboot@65.128.48.91)
[18:27:10] *** Quits: flous (~Undervolt@2a02:a213:2901:5c00:a3bb:ae08:ae8:d830) (Quit: Leaving)
[18:28:46] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[18:29:29] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 264 seconds)
[18:33:33] *** sillybooties is now known as sillyboots
[18:33:47] <sillyboots> Hey all, wondering if anyone has set up a good pattern to serialize concrete errors as e.g. json for sending over the network. I'd like to have all of the information stored in the error created on the server available on the client so I can re-parse into a go struct. I'd like the errors to still be human readable, so gob is out.
[18:36:53] *** Joins: LiftLeft (~LiftLeft@172.98.92.24)
[18:37:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:38:58] *** Quits: mmfood (~mmfood@45.135.187.94) (Ping timeout: 252 seconds)
[18:39:25] *** Joins: fikran (~fikran@user/fikran)
[18:40:03] *** Joins: nrl^ (~nrl@68.101.50.106)
[18:40:12] *** Quits: nrl^ (~nrl@68.101.50.106) (Remote host closed the connection)
[18:40:14] <albertito> sillyboots: https://cloud.google.com/apis/design/errors  talks a lot about designing errors over the wire
[18:40:41] *** Joins: mmfood (~mmfood@45.135.187.94)
[18:41:04] <sillyboots> albertito: thanks, I will take a look. Haven't read this one before
[18:41:09] <albertito> sillyboots: https://pkg.go.dev/google.golang.org/grpc/codes have the grpc canonical error codes, but little design discussion around them
[18:45:58] <sillyboots> It looks like GRPC takes the approach of transmitting the type name over the wire as a string, which I was trying to do but was running into issues with sentinel errors and trying to use reflect.TypeOf
[18:47:01] <novns> sillyboots, json is too slow sometimes
[18:47:10] <novns> when you have some high load
[18:47:18] <albertito> sillyboots: designing rpc errors is, in my experience, fairly difficult. It depends a lot on what you're trying to do
[18:48:21] <albertito> sillyboots: I think the approach of "if you can, map your error to one of the canonical ones, and have your client side logic only use the canonical info to make decisions if possible" is quite good. But then, it's not always possible
[18:49:05] <albertito> sillyboots: do you pass the errors purely for human consumption, or you want to use them in your logic? are the attached values relevant for it, or you just need to know the kind of error?
[18:51:04] *** Quits: mmfood (~mmfood@45.135.187.94) (Ping timeout: 252 seconds)
[18:53:08] *** Joins: mmfood (~mmfood@45.135.187.94)
[18:56:04] *** Joins: Lohengrin (~fredo@user/lohengrin)
[18:56:19] <sillyboots> I was hoping to have my cake and eat it too -- I wanted the http responses to be human readable (optionally, or perhaps tunable so by default payloads are pbf or gob encoded, but could be transmitted by e.g. json), equivalent to basically calling err.String(). But at the same time I want the client to be able to parse that payload into what amounts to the same (or nearly the same) err value that
[18:56:20] <sillyboots> the server had. Obviously this problem seems pretty tricky now that I look at it, but that was my initial goal.
[18:59:10] *** Quits: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex) (Quit: WeeChat 2.0.1)
[18:59:33] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[19:09:54] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Quit: Hecc! My server must have died!)
[19:10:39] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[19:14:48] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Ping timeout: 265 seconds)
[19:14:56] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[19:17:49] *** Joins: bomb (~bomb@user/bomb)
[19:26:11] *** Quits: xiongxin (~quassel@113.116.34.58) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:28:51] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:29:17] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:29:46] *** Joins: califax (~califax@user/califx)
[19:32:34] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:34:06] *** Quits: keiser0091075852 (~keiser@188.47.0.153.ipv4.supernova.orange.pl) (Ping timeout: 260 seconds)
[19:38:04] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-3d44-b4b4-9588-c922.inf6.spectrum.com)
[19:40:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:910d:b18d:ade0:cbdd)
[19:41:34] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:3d44:b4b4:9588:c922) (Ping timeout: 268 seconds)
[19:48:20] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Remote host closed the connection)
[19:48:44] *** Joins: shtirlic (~shtirlic@178.70.139.14)
[19:50:31] *** Joins: consolers (~consolers@117.193.4.245)
[19:50:39] *** Parts: consolers (~consolers@117.193.4.245) ()
[19:54:22] *** Quits: shtirlic (~shtirlic@178.70.139.14) (Remote host closed the connection)
[19:54:59] *** Quits: LoRez (~lorez@user/lorez) (Ping timeout: 252 seconds)
[19:55:40] *** Joins: shtirlic (~shtirlic@178.70.139.14)
[19:59:08] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Quit: unmanbearpig)
[19:59:33] *** Joins: bankin (~user@user/bankin)
[19:59:36] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:59:57] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[20:09:16] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Remote host closed the connection)
[20:09:40] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[20:12:41] *** Joins: LoRez (~lorez@user/lorez)
[20:20:35] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-3d44-b4b4-9588-c922.inf6.spectrum.com)
[20:23:17] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[20:23:38] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-3d44-b4b4-9588-c922.inf6.spectrum.com) (Ping timeout: 252 seconds)
[20:25:57] *** Quits: menace (~someone@user/menace) (Quit: menace)
[20:26:38] *** Quits: noxim91 (~noxim91@user/noxim) (Ping timeout: 256 seconds)
[20:28:56] *** Quits: jespada (~jespada@2803:9800:9842:7a62:8558:368:788c:6dc6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:30:31] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[20:30:45] *** Joins: Lorra (~lorenzo@2001:a61:be4:201:e803:654f:a1be:f3b5)
[20:31:59] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d961:6f41:954c:7423)
[20:32:05] *** Joins: Torr (~Torr@user/torr)
[20:32:08] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[20:35:22] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-3d44-b4b4-9588-c922.inf6.spectrum.com) (Ping timeout: 250 seconds)
[20:43:19] *** Quits: mmfood (~mmfood@45.135.187.94) (Ping timeout: 252 seconds)
[20:46:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:48:45] *** Joins: fikran (~fikran@user/fikran)
[20:52:36] *** Joins: Torr (~Torr@user/torr)
[20:54:36] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: leaving)
[20:54:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:54:51] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:55:49] *** Quits: LoRez (~lorez@user/lorez) (Ping timeout: 265 seconds)
[21:07:31] *** Joins: LoRez (~lorez@user/lorez)
[21:20:11] *** Joins: mmfood (~mmfood@45.135.187.94)
[21:25:38] *** Quits: mmfood (~mmfood@45.135.187.94) (Ping timeout: 250 seconds)
[21:26:17] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:27:29] *** Joins: mmfood (~mmfood@45.135.187.94)
[21:28:24] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:30:01] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[21:37:59] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[21:41:53] *** Joins: Jad (~Nashmi@user/jad)
[21:43:13] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[21:47:13] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[21:47:35] *** Joins: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi)
[21:48:19] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[21:48:59] *** Quits: rockyh2 (~rockyh@user/rockyh) (Ping timeout: 265 seconds)
[21:50:47] *** Joins: rockyh2 (~rockyh@user/rockyh)
[21:50:57] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[21:59:26] *** Joins: normen (~normen@p200300d7173dc90051ad00e91f4e4b0c.dip0.t-ipconnect.de)
[22:04:03] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Quit: Hecc! My server must have died!)
[22:04:11] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[22:04:53] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[22:11:24] *** Quits: Lohengrin (~fredo@user/lohengrin) (Quit: WeeChat 3.2.1)
[22:19:04] *** Joins: sshow (~sshow@neo.hackeriet.no)
[22:19:43] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[22:26:19] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[22:27:16] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: config)
[22:27:59] *** Joins: someuser (~user@102.43.175.235)
[22:29:00] *** Joins: sshow (~sshow@neo.hackeriet.no)
[22:29:24] <someuser> hello, 	buffer := bytes.NewBuffer(make([]byte, 0))
[22:29:25] <someuser> , does this create a new buffer which can be expanded ? and what's the difference between buffer := new(bytes.Buffer) or &bytes.Buffer{}
[22:30:07] <someuser> very old gist but i was looking at https://gist.github.com/minikomi/2900454
[22:31:22] <foobaz> yes it does, and there is no difference
[22:32:02] *** Joins: digits9 (~digits9@c-148-59-58-69.rev.sailinternet.net)
[22:32:13] *** Quits: sshow (~sshow@neo.hackeriet.no) (Client Quit)
[22:32:26] *** Joins: sshow (~sshow@neo.hackeriet.no)
[22:32:50] <someuser> ty, in here he mentioned something like bytes.Buffer has 64 bytes internal bootstrap field : https://stackoverflow.com/questions/48335214/how-do-you-initialize-an-empty-bytes-buffer-of-size-n-in-go
[22:33:56] <someuser> i find new(bytes.Buffer) easier to create a pointer to a buffer that I can use but sometimes i see bytes.NewBuffer(make([]byte, 0)) or bytes.NewBuffer(make([]bytes, 0, capacityWantedToStartWith))
[22:34:36] <foobaz> interesting post, maybe bytes.NewBuffer() is different, if it causes it to skip the internal bootstrap buffer
[22:36:53] <someuser> indeed, but i am a little newbie in those aspects, so if  bytes.NewBuffer(make([]byte, 0)) just seems to work, and it skips this internal buffer as you've said but can grow in its own
[22:37:15] <someuser> maybe the new(bytes.Buffer) is capped at 64 bytes and if i want to expand, i use Grow method or am i wrong?
[22:37:28] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: config again)
[22:37:38] *** Joins: sshow (~sshow@neo.hackeriet.no)
[22:45:45] <foobaz> no matter how you create the buffer, it will expand on its own
[22:48:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a)
[22:52:39] *** Quits: sshow (~sshow@neo.hackeriet.no) (Remote host closed the connection)
[22:54:43] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:55:54] *** Joins: sshow (~sshow@neo.hackeriet.no)
[22:55:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:58:05] *** Joins: fikran (~fikran@user/fikran)
[22:58:30] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[22:58:39] *** imm__ is now known as imm_
[22:59:59] *** Joins: X-Scale` (~ARM@92.250.96.13)
[23:00:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[23:01:19] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[23:01:54] *** X-Scale` is now known as X-Scale
[23:05:51] <dostoyevsky2> I see that gcc's go compiler is updated all the time... does this mean I could still compile generics for older MacOS version which are not supported by the default GoCompiler?
[23:06:07] <dostoyevsky2> (one gcc has catched up)
[23:06:13] <seebs> someuser: You never *need* to use Grow, it's just a way to hint at a known desired size and reduce resizing operations. It's always going to resize.
[23:07:04] <seebs> Honestly, now that `&type{}` exists, `new` is essentially never useful/necessary, it's just that it predates that syntax, I think?
[23:07:42] <KirkMcDonald> You can't use a composite literal with every type.
[23:08:18] <KirkMcDonald> Though you can always declare a variable of any type, and take its address, which is functionally the same as new().
[23:08:53] <KirkMcDonald> Since new() is basically defined as creating a new variable of some type.
[23:09:29] <seebs> yeah. i think it is a design flaw that you can't use composite literals with all types, at this point.
[23:10:01] <seebs> i'm also still slightly annoyed that i can't actually request "a slice of len x, and whatever cap makes sense for runtime to use for that".
[23:10:01] <KirkMcDonald> Rather than that, I think the logical thing would be to permit taking the address of other types of literals.
[23:10:14] <seebs> that too
[23:10:27] <KirkMcDonald> As well as conversions of literals.
[23:10:52] <KirkMcDonald> e.g. `&int64(23)`
[23:11:04] <KirkMcDonald> &"foo"
[23:11:16] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Remote host closed the connection)
[23:13:21] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[23:19:44] <Tv_> seebs, KirkMcDonald: there's an open issue about that, with pretty good points made
[23:20:01] <seebs> yeah, i'm familiar :)
[23:20:10] <Tv_> https://github.com/golang/go/issues/45624
[23:20:30] <Tv_> looks like they're leaning toward `new(int64(23))`
[23:23:19] *** Joins: Compy_ (~compy@user/compy)
[23:33:25] *** Joins: hexfive (~eric@50.35.83.177)
[23:35:19] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[23:40:48] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[23:42:45] *** Quits: digits9 (~digits9@c-148-59-58-69.rev.sailinternet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:45:53] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[23:48:26] <KirkMcDonald> I disagree with the criticism of `p := &3` in the first post. It can just use the inferred type of the literal, just like if you do `a := 3`.
[23:50:00] <KirkMcDonald> Looks like otheres have already pointed this out.
[23:50:03] <KirkMcDonald> others*
[23:52:12] *** Quits: Lorra (~lorenzo@2001:a61:be4:201:e803:654f:a1be:f3b5) (Quit: Konversation terminated!)
[23:57:50] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[23:58:49] <seebs> the case i've been thinking about is specifically `p := &m[k]`, which has gotten me towards preferring an explicit "we are now creating an object of a named type with the following values, as opposed to using a value" distinction.
[23:59:18] <seebs> so, `p := &mapValueType{m[k]}` would work, because it would make explicit that you were reading the value and using it to initialize a distinct object.
[23:59:44] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
