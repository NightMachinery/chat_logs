[00:00:41] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:00:46] *** Quits: nhartman (~Nathan22@206.223.160.26) (Client Quit)
[00:00:56] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:01:08] *** Joins: nhartman (~Nathan22@206.223.160.26)
[00:01:40] *** Quits: nhartman (~Nathan22@206.223.160.26) (Client Quit)
[00:01:50] *** Joins: nhartman (~SaltHillS@206.223.160.26)
[00:02:25] *** Joins: jennie (~jennie@user/jennie)
[00:02:26] <jennie> hiii
[00:05:56] *** Joins: ravella (~ravella@user/ryanavella)
[00:07:45] *** Quits: Albright (~Albright@149.28.13.173) (Quit: ZNC 1.8.2 - https://znc.in)
[00:08:55] *** Joins: Albright (~Albright@149.28.13.173)
[00:11:19] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:12:05] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[00:12:26] *** Joins: meator (~meator@user/meator)
[00:12:56] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[00:13:44] <meator> Hello. How can I write a single zeroed out byte to a file descriptor?
[00:14:16] <koollman> "yes"
[00:14:39] <koollman> what is a single zeroed out byte, though, and what makes you think you can't write it ? :)
[00:14:51] <leah2> write(fd, "", 1);
[00:15:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:15:53] *** Joins: zacts (~zacts@user/zacts)
[00:16:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:17:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:17:58] <meator> leah2: Thanks!
[00:18:41] <meator> And I can't get an address of an integer literal, am I right?
[00:18:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:18:53] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c) (Remote host closed the connection)
[00:19:00] <fizzie> Right, but you can have an integer-typed compound literal and take its address.
[00:19:09] <leah2> this is not fortran ;)
[00:19:20] <fizzie> As in, `&(int){123}`. (Mind the lifetime.)
[00:20:10] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[00:20:11] <meator> So I could do: write(fd, &(char){'\0'}, 1)?
[00:20:20] <fizzie> You could.
[00:20:38] *** Quits: fwg (~fwg@user/fwg) (Quit: so long and thanks for all the fish.)
[00:20:39] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[00:20:58] <fizzie> ,cc write(1, &(char){'x'}, 1);
[00:21:00] <candide> fizzie: x
[00:21:17] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Client Quit)
[00:21:31] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[00:21:36] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[00:22:08] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[00:22:20] <meator> I have thought that write(fd, &0, 1) could be more descriptive, but since it isn't possible, I'll use leah2's shorter method.
[00:22:22] <meator> Thanks!
[00:24:40] <koollman> I wonder how ugly it could be done
[00:24:45] *** Quits: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[00:24:57] <koollman> surely in some platforms there are known addresses that must contain a null byte :)
[00:25:59] <fizzie> write(fd, "this writes a 0 byte" + 20, 1); // self-documenting ;)
[00:26:10] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[00:26:24] <koollman> argc ? argv+argc : argv
[00:26:25] <fizzie> Hmm, maybe that should've been "this writes a \0 byte" + 14 instead.
[00:26:59] <fizzie> Obligatory nitpick: a null pointer isn't necessarily all-bits-zero.
[00:27:04] <fizzie> On some platforms though, sure.
[00:27:20] <koollman> fizzie: I'll wait for the first bug report saying 'wtf!' ;)
[00:27:21] <fizzie> You'd probably get some sort of a pointer type warnings though.
[00:27:22] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:27:31] <fizzie> Well, I guess not with `write`.
[00:27:40] <koollman> polkit cve made me think of that one
[00:28:24] <koollman> actually that's just argv+argc, always
[00:30:51] *** Parts: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) ()
[00:41:32] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[00:41:32] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[00:41:32] *** Quits: merced (merced@user/merced) (*.net *.split)
[00:41:32] *** Quits: kassle (~kassle@107.175.32.53) (*.net *.split)
[00:41:32] *** Quits: mbarbar (~mbarbar@oak.xen.prgmr.com) (*.net *.split)
[00:41:32] *** Quits: bixo_ (~bixo@190.200.253.127) (*.net *.split)
[00:41:32] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (*.net *.split)
[00:41:32] *** Quits: cocalero (~cocalero@200-140-37-88.user3p.brasiltelecom.net.br) (*.net *.split)
[00:41:32] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[00:41:32] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[00:41:32] *** Quits: mandanguita (~mandangui@139.47.119.61) (*.net *.split)
[00:41:32] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (*.net *.split)
[00:41:32] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: alch (~alch@151.68.88.205) (*.net *.split)
[00:41:32] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (*.net *.split)
[00:41:32] *** Quits: AmR (~AmREiSa@156.207.136.200) (*.net *.split)
[00:41:32] *** Quits: Filystyn (~piotr@user/filystyn) (*.net *.split)
[00:41:32] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[00:41:32] *** Quits: FluffyMask (~masque@user/fluffymask) (*.net *.split)
[00:41:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (*.net *.split)
[00:41:32] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (*.net *.split)
[00:41:32] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[00:41:32] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[00:41:32] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (*.net *.split)
[00:41:32] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[00:41:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[00:41:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[00:41:32] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[00:41:32] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[00:41:32] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[00:41:32] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[00:41:32] *** Quits: Klinda (~superleag@user/klinda) (*.net *.split)
[00:41:33] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[00:41:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[00:41:33] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[00:41:33] *** Quits: Viewday11 (~Viewday@61.141.126.127) (*.net *.split)
[00:41:33] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[00:41:33] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (*.net *.split)
[00:41:33] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[00:41:33] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[00:41:33] *** Quits: robyn (~robyndrak@user/robyndrake) (*.net *.split)
[00:41:33] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[00:41:33] *** Quits: silkworks (~silkworks@ctrl-c.club) (*.net *.split)
[00:41:33] *** Quits: APic (~apic@apic.name) (*.net *.split)
[00:41:33] *** Quits: nathanael (~nathanael@user/nathanael) (*.net *.split)
[00:41:33] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[00:41:33] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[00:41:33] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[00:41:33] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (*.net *.split)
[00:41:33] *** Quits: sokan (~sokan@85.73.227.251) (*.net *.split)
[00:41:33] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[00:41:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[00:41:33] *** Quits: tbcr (~tbcr@107.13.189.161) (*.net *.split)
[00:41:33] *** Quits: towel (~towel@user/towel) (*.net *.split)
[00:41:33] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[00:41:33] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[00:41:33] *** Quits: MrC (~Ben@mrbenc.net) (*.net *.split)
[00:41:33] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (*.net *.split)
[00:41:33] *** Quits: constxd (~brad@142.167.170.88) (*.net *.split)
[00:41:33] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[00:41:33] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[00:41:33] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (*.net *.split)
[00:41:33] *** Quits: ai (~ai@shell.k4be.pl) (*.net *.split)
[00:41:33] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[00:41:33] *** Quits: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca) (*.net *.split)
[00:41:33] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[00:41:33] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[00:41:33] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[00:41:33] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[00:41:33] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (*.net *.split)
[00:41:33] *** Quits: sr20det (~sr20det@user/sr20det) (*.net *.split)
[00:41:33] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[00:41:33] *** Quits: reset (~reset@user/reset) (*.net *.split)
[00:41:33] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[00:41:33] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[00:41:33] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[00:41:33] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[00:41:33] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[00:41:33] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[00:41:33] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[00:41:33] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[00:41:33] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[00:41:33] *** Quits: cyphics (~cyphix@user/cyphics) (*.net *.split)
[00:41:33] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[00:41:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[00:41:34] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[00:41:34] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[00:41:34] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[00:41:34] *** Quits: pi0 (~default@23.95.234.10) (*.net *.split)
[00:41:34] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[00:41:34] *** Quits: Tordek (~tordek@triton.blinkenshell.org) (*.net *.split)
[00:41:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[00:41:34] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[00:41:34] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[00:41:34] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[00:41:34] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[00:41:34] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[00:41:34] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[00:41:34] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[00:41:34] *** Quits: eletrotupi (~eletrotup@user/eletrotupi) (*.net *.split)
[00:41:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[00:41:34] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[00:41:34] *** Quits: van (~van@46.23.94.214) (*.net *.split)
[00:41:34] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:34] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[00:41:34] *** Quits: les_ (~whome@user/les) (*.net *.split)
[00:41:34] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[00:41:34] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[00:41:34] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[00:41:34] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[00:41:34] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[00:41:34] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[00:41:34] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[00:41:34] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[00:41:34] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[00:41:34] *** Quits: rahl (~rahl@otaku.sdf.org) (*.net *.split)
[00:41:34] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[00:41:34] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[00:41:34] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[00:41:34] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (*.net *.split)
[00:41:34] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (*.net *.split)
[00:41:34] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[00:41:34] *** Quits: MrFantastik (~f@2607:f598:bbda:270:af90:c2f0:20b5:e42e) (*.net *.split)
[00:41:34] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (*.net *.split)
[00:41:34] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[00:41:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[00:41:34] *** Quits: jx0 (~jx0@199.229.250.138) (*.net *.split)
[00:41:34] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[00:41:34] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (*.net *.split)
[00:41:34] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[00:41:34] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (*.net *.split)
[00:41:34] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (*.net *.split)
[00:41:34] *** Quits: csrf (~csrf@user/csrf) (*.net *.split)
[00:41:34] *** Quits: gproto23 (~gproto23@user/gproto23) (*.net *.split)
[00:41:34] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[00:41:34] *** Quits: coruja (~coruja@user/coruja) (*.net *.split)
[00:41:34] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[00:41:34] *** Quits: Rounin (~david@84.212.130.215) (*.net *.split)
[00:41:34] *** Quits: nuxil_ (~nuxil@141.195.51.213) (*.net *.split)
[00:41:35] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[00:41:35] *** Quits: pizdets (~pizdets@183.182.111.120) (*.net *.split)
[00:41:35] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[00:41:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[00:41:35] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (*.net *.split)
[00:41:35] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[00:41:35] *** Quits: zhiayang (~zhiayang@user/zhiayang) (*.net *.split)
[00:41:35] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[00:41:35] *** Quits: joev (~joev@user/joev) (*.net *.split)
[00:41:35] *** Quits: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59) (*.net *.split)
[00:41:35] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[00:41:35] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (*.net *.split)
[00:41:35] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (*.net *.split)
[00:41:35] *** Quits: fmlatghor (~lcoogan@2601:5cd:8100:2890::6) (*.net *.split)
[00:41:35] *** Quits: skipper (~whatsupbo@user/scobydoo) (*.net *.split)
[00:41:35] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[00:41:35] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (*.net *.split)
[00:41:35] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: trvv (555a816688@user/trvv) (*.net *.split)
[00:41:35] *** Quits: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[00:41:35] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: saribro (~swinnenb@user/swinnenb) (*.net *.split)
[00:41:35] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (*.net *.split)
[00:41:35] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[00:41:35] *** Quits: Guest7572 (~luca0N@nautilus.luca0n.com) (*.net *.split)
[00:41:35] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[00:41:35] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[00:41:35] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[00:41:35] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[00:41:35] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[00:41:35] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[00:41:35] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[00:41:35] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (*.net *.split)
[00:41:35] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[00:41:35] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[00:41:35] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[00:41:35] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (*.net *.split)
[00:41:35] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[00:41:35] *** Quits: nate (NBishop@o.apocaleaps.com) (*.net *.split)
[00:41:35] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[00:41:35] *** Quits: int (~int@0x4.cx) (*.net *.split)
[00:41:35] *** Quits: chris1 (~chris@ip-103-85-39-45.syd.xi.com.au) (*.net *.split)
[00:41:35] *** Quits: dupl0x (~duplox@137.220.127.235) (*.net *.split)
[00:41:35] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[00:41:35] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[00:41:35] *** Quits: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net) (*.net *.split)
[00:41:35] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[00:41:35] *** Quits: candide (~pbot3@about/c/bot/candide) (*.net *.split)
[00:41:35] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[00:41:35] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[00:41:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[00:41:35] *** Quits: kzootech (~contact@kzoo.tech) (*.net *.split)
[00:41:35] *** Quits: eau (~chat@user/eau) (*.net *.split)
[00:41:35] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[00:41:35] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[00:41:35] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[00:41:35] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[00:41:35] *** Quits: ChoHag (~mking@81.187.183.71) (*.net *.split)
[00:41:35] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[00:41:35] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[00:41:36] *** Quits: domve (~dom@user/domve) (*.net *.split)
[00:41:36] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[00:41:36] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[00:41:36] *** Quits: aighearach (~paris@user/aighearach) (*.net *.split)
[00:41:36] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[00:41:36] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[00:41:36] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[00:41:36] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[00:41:36] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[00:41:36] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (*.net *.split)
[00:41:36] *** Quits: noose (~noose@user/noose) (*.net *.split)
[00:41:36] *** Quits: jayaura (e2d69d141a@2604:bf00:561:2000::2b0) (*.net *.split)
[00:41:36] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[00:41:36] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[00:41:36] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[00:41:36] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (*.net *.split)
[00:41:36] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[00:41:36] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (*.net *.split)
[00:41:36] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[00:41:36] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (*.net *.split)
[00:41:36] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (*.net *.split)
[00:41:36] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (*.net *.split)
[00:41:36] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[00:41:36] *** Quits: ikiryo (sid109660@user/ikiryo) (*.net *.split)
[00:41:36] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[00:41:36] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[00:41:36] *** Quits: bayleaf (~bayleaf@192.249.60.20) (*.net *.split)
[00:41:36] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[00:41:36] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[00:41:36] *** Quits: Macuser (Macuser@here.for-the.chat) (*.net *.split)
[00:41:36] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[00:41:36] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[00:41:36] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (*.net *.split)
[00:41:36] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[00:41:36] *** Quits: hecanjog2 (~hecanjog@2a01:4f9:6a:5326::2) (*.net *.split)
[00:41:36] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[00:41:36] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: psb___ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: overrider (~overrider@user/overrider) (*.net *.split)
[00:41:36] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[00:41:36] *** Quits: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com) (*.net *.split)
[00:41:36] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[00:41:36] *** Quits: bw_ (~bw@coconut.xen.prgmr.com) (*.net *.split)
[00:41:36] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[00:41:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[00:41:36] *** Quits: meator (~meator@user/meator) (*.net *.split)
[00:41:36] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[00:41:36] *** Quits: ravella (~ravella@user/ryanavella) (*.net *.split)
[00:41:36] *** Quits: jenkins (~jenkins@user/jenkins) (*.net *.split)
[00:41:36] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[00:41:37] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (*.net *.split)
[00:41:37] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[00:41:37] *** Quits: Oddity (~Oddity@user/oddity) (*.net *.split)
[00:41:37] *** Quits: ravndal (~weechat@user/ravndal) (*.net *.split)
[00:41:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[00:41:37] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[00:41:37] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[00:41:37] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[00:41:37] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[00:41:37] *** Quits: katsuragi (katsuragi@tilde.institute) (*.net *.split)
[00:41:37] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[00:41:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[00:41:37] *** Quits: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net) (*.net *.split)
[00:41:37] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[00:41:37] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[00:41:37] *** Quits: scaramanga (~scara@1.239.35.120) (*.net *.split)
[00:41:37] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (*.net *.split)
[00:41:37] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[00:41:37] *** Quits: nowz (~nowz@user/nowz) (*.net *.split)
[00:41:37] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[00:41:37] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[00:41:37] *** Quits: alicef (~none@gentoo/developer/alicef) (*.net *.split)
[00:41:37] *** Quits: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl) (*.net *.split)
[00:41:37] *** Quits: crudo (~crudo@livredigital.com) (*.net *.split)
[00:41:37] *** Quits: Chpy0 (~chpy@30-8-178-69.static.gci.net) (*.net *.split)
[00:41:37] *** Quits: marcj (~marc@205.175.215.11) (*.net *.split)
[00:41:37] *** Quits: novns (~novns@user/novns) (*.net *.split)
[00:41:37] *** Quits: timmot (~timmot@207.148.85.201) (*.net *.split)
[00:41:37] *** Quits: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (*.net *.split)
[00:41:37] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (*.net *.split)
[00:41:37] *** Quits: begriffs (~begriffs@user/begriffs) (*.net *.split)
[00:41:37] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[00:41:37] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[00:41:37] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[00:41:37] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (*.net *.split)
[00:41:37] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[00:41:37] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[00:41:37] *** Quits: kplant (~kplant@user/kplant) (*.net *.split)
[00:41:37] *** Quits: Dreg- (~Dreg@fr33project.org) (*.net *.split)
[00:41:37] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[00:41:37] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[00:41:37] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[00:41:37] *** Quits: xSavitar (~xSavitar@user/xsavitar) (*.net *.split)
[00:41:37] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[00:41:37] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[00:41:37] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[00:41:37] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[00:41:37] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (*.net *.split)
[00:41:37] *** Quits: Pentode (~Pentode@mobile-166-170-29-174.mycingular.net) (*.net *.split)
[00:41:37] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[00:41:37] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[00:41:37] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[00:41:37] *** Quits: jennie (~jennie@user/jennie) (*.net *.split)
[00:41:37] *** Quits: nhartman (~SaltHillS@206.223.160.26) (*.net *.split)
[00:41:37] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (*.net *.split)
[00:41:37] *** Quits: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net) (*.net *.split)
[00:41:37] *** Quits: Atque (~Atque@user/atque) (*.net *.split)
[00:41:37] *** Quits: System_Error (~SystemErr@user/systemerror) (*.net *.split)
[00:41:37] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (*.net *.split)
[00:41:37] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (*.net *.split)
[00:41:37] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (*.net *.split)
[00:41:37] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[00:41:37] *** Quits: diiirt (~diiirt@user/diiirt) (*.net *.split)
[00:41:37] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (*.net *.split)
[00:41:37] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[00:41:37] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[00:41:37] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[00:41:37] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (*.net *.split)
[00:41:37] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[00:41:37] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (*.net *.split)
[00:41:37] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[00:41:37] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[00:41:37] *** Quits: aradesh (~aradesh@user/aradesh) (*.net *.split)
[00:41:37] *** Quits: nicode (~nic@45.72.195.35) (*.net *.split)
[00:41:37] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (*.net *.split)
[00:41:37] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[00:41:37] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (*.net *.split)
[00:41:38] *** Quits: go4godvin (~go4godvin@user/go4godvin) (*.net *.split)
[00:41:38] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (*.net *.split)
[00:41:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[00:41:38] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (*.net *.split)
[00:41:38] *** Quits: beneth (~beneth@2001:41d0:c:a71:1000:25::) (*.net *.split)
[00:41:38] *** Quits: danieln (~danieln@erebor.danieln.de) (*.net *.split)
[00:41:38] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[00:41:38] *** Quits: vassili (~vt@osa.vbc.su) (*.net *.split)
[00:41:38] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[00:41:38] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[00:41:38] *** Quits: subvisor (sid502026@id-502026.helmsley.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: oj (oj@user/oj) (*.net *.split)
[00:41:38] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[00:41:38] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (*.net *.split)
[00:41:38] *** Quits: omegatron (~some@p5b056436.dip0.t-ipconnect.de) (*.net *.split)
[00:41:38] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[00:41:38] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[00:41:38] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[00:41:38] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[00:41:38] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[00:41:38] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[00:41:38] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[00:41:38] *** Quits: mrec_ (~markus@user/mrec) (*.net *.split)
[00:41:38] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[00:41:38] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[00:41:38] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[00:41:38] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[00:41:38] *** Quits: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net) (*.net *.split)
[00:41:38] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[00:41:38] *** Quits: kernelc (~kornel@46.101.204.33) (*.net *.split)
[00:41:38] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[00:41:38] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[00:41:38] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[00:41:38] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[00:41:38] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[00:41:38] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[00:41:38] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[00:41:38] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[00:41:38] *** Quits: gemelen (~gemelen@zooey.gemelen.net) (*.net *.split)
[00:41:38] *** Quits: Justin_T (~Justin@user/justin-t/x-2449983) (*.net *.split)
[00:41:38] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[00:41:39] *** Quits: ka80_ (~ka80@111.60.138.34.bc.googleusercontent.com) (*.net *.split)
[00:41:39] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (*.net *.split)
[00:41:39] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c) (*.net *.split)
[00:41:39] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (*.net *.split)
[00:41:39] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (*.net *.split)
[00:41:39] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (*.net *.split)
[00:41:39] *** Quits: bingulo (~carlos@2804:39b0:1db:1f00::50c) (*.net *.split)
[00:41:39] *** Quits: bebyx (~Thunderbi@user/bebyx) (*.net *.split)
[00:41:39] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:add1:9b6a:adbc:6291) (*.net *.split)
[00:41:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[00:41:39] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (*.net *.split)
[00:41:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[00:41:39] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (*.net *.split)
[00:41:39] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (*.net *.split)
[00:41:39] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[00:41:39] *** Quits: remedan (~remedan@octo.cafe) (*.net *.split)
[00:41:39] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[00:41:39] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (*.net *.split)
[00:41:39] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (*.net *.split)
[00:41:39] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (*.net *.split)
[00:41:39] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (*.net *.split)
[00:41:39] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[00:41:39] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (*.net *.split)
[00:41:39] *** Quits: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1) (*.net *.split)
[00:41:39] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[00:41:39] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[00:41:39] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[00:41:39] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[00:41:39] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (*.net *.split)
[00:41:39] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[00:41:39] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (*.net *.split)
[00:41:39] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[00:41:39] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (*.net *.split)
[00:41:39] *** Quits: AsenMx (~asen@user/asenmx) (*.net *.split)
[00:41:39] *** Quits: mattroelle (~Matt_Roel@funbox.mattroelle.com) (*.net *.split)
[00:41:39] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[00:41:39] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[00:41:39] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[00:41:39] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:39] *** Quits: icy (~icy@user/icy) (*.net *.split)
[00:41:39] *** Quits: nheir (~nheir@public.itai.re) (*.net *.split)
[00:41:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[00:41:39] *** Quits: stilbruch (~stilbruch@157.245.122.124) (*.net *.split)
[00:41:40] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[00:41:40] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[00:41:40] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[00:41:40] *** Quits: exz (~exezin@oods.net) (*.net *.split)
[00:41:40] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[00:41:40] *** Quits: glenfe (sid231748@user/glenfe) (*.net *.split)
[00:41:40] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[00:41:40] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[00:41:40] *** Quits: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2) (*.net *.split)
[00:41:40] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[00:41:40] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[00:41:40] *** Quits: livestradamus (~quassel@user/livestradamus) (*.net *.split)
[00:41:40] *** Quits: veltas (~veltas@104.236.34.215) (*.net *.split)
[00:41:40] *** Quits: Darkcoal (~user@user/Darkcoal) (*.net *.split)
[00:41:40] *** Quits: bick (~kotaman@94.46.203.147) (*.net *.split)
[00:41:40] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (*.net *.split)
[00:41:40] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (*.net *.split)
[00:41:40] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[00:41:40] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (*.net *.split)
[00:41:40] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (*.net *.split)
[00:41:40] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (*.net *.split)
[00:41:40] *** Quits: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de) (*.net *.split)
[00:41:40] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (*.net *.split)
[00:41:40] *** Quits: glider (~glider@user/glider) (*.net *.split)
[00:41:40] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[00:41:40] *** Quits: mahmutov (~mahmutov@37.155.28.181) (*.net *.split)
[00:41:40] *** Quits: Khoyo_ (~khoyo@user/khoyo) (*.net *.split)
[00:41:40] *** Quits: foul_owl (~kerry@94.140.8.105) (*.net *.split)
[00:41:40] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[00:41:40] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (*.net *.split)
[00:41:40] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[00:41:40] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (*.net *.split)
[00:41:40] *** Quits: random-nick (~random-ni@87.116.167.125) (*.net *.split)
[00:41:40] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[00:41:40] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[00:41:40] *** Quits: vboykox (~user@95.134.14.76) (*.net *.split)
[00:41:40] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[00:41:40] *** Quits: strajder (~strajder@user/strajder) (*.net *.split)
[00:41:40] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[00:41:40] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[00:41:40] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[00:41:40] *** Quits: Azem (~haise01@user/haise01) (*.net *.split)
[00:41:40] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[00:41:40] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[00:41:40] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[00:41:40] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (*.net *.split)
[00:41:40] *** Quits: moose (~moose@user/moose) (*.net *.split)
[00:41:40] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: TommyC (~TommyC@user/tommyc) (*.net *.split)
[00:41:40] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (*.net *.split)
[00:41:40] *** Quits: jkotra (~jkotra@223.230.91.108) (*.net *.split)
[00:41:40] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[00:41:40] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[00:41:40] *** Quits: Jong (~Jong@163.114.132.5) (*.net *.split)
[00:41:40] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: duds- (~duds-@user/duds) (*.net *.split)
[00:41:40] *** Quits: raym (~raym@user/raym) (*.net *.split)
[00:41:40] *** Quits: bramhaag (~bramhaag@134.195.121.39) (*.net *.split)
[00:41:40] *** Quits: cp--- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[00:41:40] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[00:41:40] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (*.net *.split)
[00:41:40] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[00:41:40] *** Quits: pgib (~textual@173.38.117.89) (*.net *.split)
[00:41:40] *** Quits: cryptonector (~nico@24.28.108.183) (*.net *.split)
[00:41:40] *** Quits: cation (cation@user/cation) (*.net *.split)
[00:41:40] *** Quits: BGL (ninety@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (*.net *.split)
[00:41:40] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[00:41:40] *** Quits: abraxis (~abraxis@user/abraxis) (*.net *.split)
[00:41:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[00:41:40] *** Quits: mplio (~mplio@81-205-35-3.fixed.kpn.net) (*.net *.split)
[00:41:40] *** Quits: z14 (~alzee@user/alzee) (*.net *.split)
[00:41:40] *** Quits: rick123 (~rick123@157.245.192.96) (*.net *.split)
[00:41:40] *** Quits: _slate_ (~slate@159.69.26.92) (*.net *.split)
[00:41:40] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[00:41:40] *** Quits: hasu (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp) (*.net *.split)
[00:41:40] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[00:41:40] *** Quits: ReimuHakurei_ (~Reimu@raphi.vserver.alexingram.net) (*.net *.split)
[00:41:40] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[00:41:40] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[00:41:40] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[00:41:40] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[00:41:40] *** Quits: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net) (*.net *.split)
[00:41:40] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (*.net *.split)
[00:41:40] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[00:41:40] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[00:41:40] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[00:41:40] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[00:41:40] *** Quits: amorel_ (~amorel@mx.mompl.net) (*.net *.split)
[00:41:40] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[00:41:40] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[00:41:40] *** Quits: phroa (~phroa@user/phroa) (*.net *.split)
[00:41:40] *** Quits: clarity (~clarity@user/clarity) (*.net *.split)
[00:41:40] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[00:41:40] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[00:41:41] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (*.net *.split)
[00:41:41] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[00:41:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (*.net *.split)
[00:41:41] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[00:41:41] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:81a7:a11a:626:f80c) (*.net *.split)
[00:41:41] *** Quits: armin (~armin@unix.porn) (*.net *.split)
[00:41:41] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (*.net *.split)
[00:41:41] *** Quits: Beastie (~lcu@user/thebeastie) (*.net *.split)
[00:41:41] *** Quits: 076AAFO7U (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[00:41:41] *** Quits: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530) (*.net *.split)
[00:41:41] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (*.net *.split)
[00:41:41] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[00:41:41] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (*.net *.split)
[00:41:41] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (*.net *.split)
[00:41:41] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (*.net *.split)
[00:41:41] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (*.net *.split)
[00:41:41] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (*.net *.split)
[00:41:41] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (*.net *.split)
[00:41:41] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[00:41:41] *** Quits: p0g0 (~p0g0@23.252.182.13) (*.net *.split)
[00:41:41] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[00:41:41] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (*.net *.split)
[00:41:41] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[00:41:41] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (*.net *.split)
[00:41:41] *** Quits: shalok (~shalok@user/shalok) (*.net *.split)
[00:41:41] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[00:41:41] *** Quits: Elladan (~elladan@user/elladan) (*.net *.split)
[00:41:41] *** Quits: thiccdaddy (~o_O@user/thiccdaddy) (*.net *.split)
[00:41:41] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (*.net *.split)
[00:41:41] *** Quits: hsv (~unknown@user/hsv) (*.net *.split)
[00:41:41] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[00:41:41] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[00:41:41] *** Quits: Masklin (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[00:41:41] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[00:41:41] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[00:41:41] *** Quits: PublicWifi (~PublicWiF@user/publicwifi) (*.net *.split)
[00:41:41] *** Quits: geeknix (~pi@2001:e68:5432:46d8:39f7:e80b:25f7:e9cb) (*.net *.split)
[00:41:41] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (*.net *.split)
[00:41:41] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (*.net *.split)
[00:41:41] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[00:41:41] *** Quits: Jmtrix (~qed@user/jmtrix) (*.net *.split)
[00:41:41] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[00:41:41] *** Quits: oldlaptop (~quassel@45.63.78.126) (*.net *.split)
[00:41:41] *** Quits: buzel (~buzel@fsf/member/buzel) (*.net *.split)
[00:41:41] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[00:41:42] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[00:41:42] *** Quits: meowray (MaskRay@user/meowray) (*.net *.split)
[00:41:42] *** Quits: sirdidymus (~sirdidymu@sorcsys.net) (*.net *.split)
[00:41:42] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[00:41:42] *** Quits: dhch (~dhch@185.213.154.165) (*.net *.split)
[00:41:42] *** Quits: carrar (~tim@osburn.jp) (*.net *.split)
[00:41:42] *** Quits: Ckat (~Ckat@xn--z7x.xn--6frz82g) (*.net *.split)
[00:41:42] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[00:41:42] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (*.net *.split)
[00:41:42] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (*.net *.split)
[00:41:42] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (*.net *.split)
[00:41:42] *** Quits: effexzi (uid474242@ilkley.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: Akuli (~Akuli@213.216.211.88) (*.net *.split)
[00:41:42] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (*.net *.split)
[00:41:42] *** Quits: kuber (~kuber@75-172-24-205.tukw.qwest.net) (*.net *.split)
[00:41:42] *** Quits: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu) (*.net *.split)
[00:41:42] *** Quits: Nex8192_ (~Nex8192@user/nex8192) (*.net *.split)
[00:41:42] *** Quits: BSaboia (~bsaboia@95.179.154.99) (*.net *.split)
[00:41:42] *** Quits: highrate (~presonic@user/highrate) (*.net *.split)
[00:41:42] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (*.net *.split)
[00:41:42] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[00:41:42] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[00:41:42] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (*.net *.split)
[00:41:42] *** Quits: root__ (~root@157.245.144.252) (*.net *.split)
[00:41:42] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[00:41:42] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (*.net *.split)
[00:41:42] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[00:41:42] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[00:41:42] *** Quits: lm- (~lm-@vps-a26d080c.vps.ovh.net) (*.net *.split)
[00:41:42] *** Quits: gera (~gera@user/gera) (*.net *.split)
[00:41:42] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[00:41:42] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[00:41:42] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[00:41:42] *** Quits: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com) (*.net *.split)
[00:41:42] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[00:41:42] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[00:41:42] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[00:41:42] *** Quits: knittl (~knittl@user/knittl) (*.net *.split)
[00:41:42] *** Quits: savy_ (~z@io.tl) (*.net *.split)
[00:41:42] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[00:41:42] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[00:41:42] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[00:41:42] *** Quits: tarzeau (~alex@mail.aiei.ch) (*.net *.split)
[00:41:42] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[00:41:42] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[00:41:42] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[00:41:42] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[00:41:42] *** Quits: justaguy (~quassel@2a05:d014:742:eb00:7693:c44f:1fc3:29) (*.net *.split)
[00:41:42] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[00:41:42] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[00:41:42] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[00:41:42] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (*.net *.split)
[00:41:42] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (*.net *.split)
[00:41:43] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[00:41:43] *** Quits: tobiasu (~tobiasu@user/tobiasu) (*.net *.split)
[00:41:43] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[00:41:43] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[00:41:43] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (*.net *.split)
[00:41:43] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[00:41:43] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[00:41:43] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[00:41:43] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[00:41:43] *** Quits: neunon (~neunon@user/neunon) (*.net *.split)
[00:41:43] *** Quits: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de) (*.net *.split)
[00:41:43] *** Quits: ominionx (~ominionx@172.58.136.5) (*.net *.split)
[00:41:43] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (*.net *.split)
[00:41:43] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[00:41:43] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (*.net *.split)
[00:41:43] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[00:41:43] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[00:41:43] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: orc (sid509852@user/orc) (*.net *.split)
[00:41:43] *** Quits: krissmaster (~kriss@213.239.83.90) (*.net *.split)
[00:41:43] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: no-n (sid524992@smol/hors) (*.net *.split)
[00:41:43] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[00:41:43] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[00:41:43] *** Quits: user282069 (~user@li1512-248.members.linode.com) (*.net *.split)
[00:41:43] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[00:41:43] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[00:41:43] *** Quits: mjh4386_ (~mjh4386@165.22.53.231) (*.net *.split)
[00:41:43] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[00:41:43] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (*.net *.split)
[00:41:43] *** Quits: fstd_ (~fstd@xdsl-89-1-56-234.nc.de) (*.net *.split)
[00:41:43] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[00:41:43] *** Quits: deflected (~deflected@user/deflected) (*.net *.split)
[00:41:43] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[00:41:43] *** Quits: routeveg (~lee@197.ip-51-195-136.eu) (*.net *.split)
[00:41:43] *** Quits: eqw (~eqw@31.134.178.99) (*.net *.split)
[00:41:43] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (*.net *.split)
[00:41:43] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[00:41:43] *** Quits: th1_ (~th@test.secomondo.dk) (*.net *.split)
[00:41:43] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[00:41:43] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[00:41:43] *** Quits: mcinglis (~mcinglis@user/mcinglis) (*.net *.split)
[00:41:43] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[00:41:43] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[00:41:43] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[00:41:43] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[00:41:43] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[00:41:43] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[00:41:43] *** Quits: Seng (~nick@hurtig.ninja) (*.net *.split)
[00:41:43] *** Quits: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de) (*.net *.split)
[00:41:43] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[00:41:43] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[00:41:43] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: nyah (~nyah@05453449.skybroadband.com) (*.net *.split)
[00:41:43] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (*.net *.split)
[00:41:43] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (*.net *.split)
[00:41:43] *** Quits: soul-d (~uknown@user/soul-d) (*.net *.split)
[00:41:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (*.net *.split)
[00:41:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[00:41:43] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (*.net *.split)
[00:41:43] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[00:41:43] *** Quits: zwr (~zwr@2804:d45:b966:fb00:35ea:d66c:6406:325c) (*.net *.split)
[00:41:43] *** Quits: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (*.net *.split)
[00:41:44] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (*.net *.split)
[00:41:44] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (*.net *.split)
[00:41:44] *** Quits: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[00:41:44] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[00:41:44] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (*.net *.split)
[00:41:44] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (*.net *.split)
[00:41:44] *** Quits: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net) (*.net *.split)
[00:41:44] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[00:41:44] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[00:41:44] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[00:41:44] *** Quits: shokara (8a599707f6@198.108.77.17) (*.net *.split)
[00:41:44] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (*.net *.split)
[00:41:44] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:ec54:cd88:99c3:2b2f) (*.net *.split)
[00:41:44] *** Quits: riposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net) (*.net *.split)
[00:41:44] *** Quits: travankor (travankor@user/travankor) (*.net *.split)
[00:41:44] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[00:41:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[00:41:44] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (*.net *.split)
[00:41:44] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[00:41:44] *** Quits: mort (~mort@188.166.114.29) (*.net *.split)
[00:41:44] *** Quits: gdarko (~me@dg.mk) (*.net *.split)
[00:41:44] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[00:41:44] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[00:41:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[00:41:44] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[00:41:44] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[00:41:44] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[00:41:44] *** Quits: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch) (*.net *.split)
[00:41:44] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[00:41:44] *** Quits: gluon (~gluon@2a01:4f8:c0c:e2da::1) (*.net *.split)
[00:41:44] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[00:41:44] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[00:41:44] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[00:41:44] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[00:41:44] *** Quits: koisoke (xef4@epilogue.org) (*.net *.split)
[00:41:44] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[00:41:44] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[00:41:44] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[00:41:45] *** Quits: peace[m] (~elliotal_@2001:470:69fc:105::bb21) (*.net *.split)
[00:41:45] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (*.net *.split)
[00:41:45] *** Quits: rany (~rany@user/rany) (*.net *.split)
[00:41:45] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (*.net *.split)
[00:41:45] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (*.net *.split)
[00:41:45] *** Quits: asd (~noname@user/asd) (*.net *.split)
[00:41:45] *** Quits: xcm (~xcm@user/xcm) (*.net *.split)
[00:41:45] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[00:41:45] *** Quits: nf (~n@monade.li) (*.net *.split)
[00:41:45] *** Quits: daurn (~daurnimat@vultr.daurnimator.com) (*.net *.split)
[00:41:45] *** Quits: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (*.net *.split)
[00:41:45] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[00:41:45] *** Quits: jonbryan (~ea@user/jonbryan) (*.net *.split)
[00:41:45] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[00:41:45] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[00:41:45] *** Quits: poprocks (~logan@user/poprocks) (*.net *.split)
[00:41:45] *** Quits: micronnn (~micronn@user/micronn) (*.net *.split)
[00:41:45] *** Quits: prime (~prime@user/prime) (*.net *.split)
[00:41:45] *** Quits: snappy (~snappy@user/snappy) (*.net *.split)
[00:41:45] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[00:41:45] *** Quits: nikomo (~quassel@nikomo.fi) (*.net *.split)
[00:41:45] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[00:41:45] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: kfv (~kfv@mail.kfv.io) (*.net *.split)
[00:41:45] *** Quits: NovaXrine_ (~NovaXrine@2604:a880:4:1d0::183:6000) (*.net *.split)
[00:41:45] *** Quits: drew (~drew@user/drew) (*.net *.split)
[00:41:45] *** Quits: drocan (~drocan@user/drocan) (*.net *.split)
[00:41:45] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[00:41:45] *** Quits: pounce (~pounce@facebook/engineering/pounce) (*.net *.split)
[00:41:45] *** Quits: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: sunarch (uid526836@user/sunarch) (*.net *.split)
[00:41:45] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: glowcoil_ (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: krychu_ (~krychu@static.152.151.251.148.clients.your-server.de) (*.net *.split)
[00:41:45] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: daviwil (~daviwil@systemcrafters/daviwil) (*.net *.split)
[00:41:45] *** Quits: snickerbockers (sid210497@id-210497.ilkley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: buffet (~buffet@buffet.sh) (*.net *.split)
[00:41:45] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (*.net *.split)
[00:41:45] *** Quits: megamus_prime (~megamus_p@46.101.47.16) (*.net *.split)
[00:41:45] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[00:41:45] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[00:41:45] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (*.net *.split)
[00:41:45] *** Quits: Xgc (~Xgc@user/xgc) (*.net *.split)
[00:41:45] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (*.net *.split)
[00:41:45] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[00:41:45] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[00:41:45] *** Quits: Brewster (~Brewster@user/brewster) (*.net *.split)
[00:41:45] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (*.net *.split)
[00:41:45] *** Quits: homura (uid398348@user/homura) (*.net *.split)
[00:41:45] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[00:41:45] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[00:41:45] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[00:41:45] *** Quits: Teckla (uid172075@user/teckla) (*.net *.split)
[00:41:45] *** Quits: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de) (*.net *.split)
[00:41:45] *** Quits: zalt (~zalt@user/zalt) (*.net *.split)
[00:41:46] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[00:41:46] *** Quits: dos (~dos@dosowisko.net) (*.net *.split)
[00:41:46] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[00:41:46] *** Quits: om3ga (~oz@46.49.41.80) (*.net *.split)
[00:41:46] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[00:41:46] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[00:44:13] *** Joins: xcm (~xcm@static.90.45.69.159.clients.your-server.de)
[00:44:13] *** Joins: flynn (~mcbloch@user/flynn)
[00:44:13] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[00:44:13] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[00:44:13] *** Joins: rahl (~rahl@otaku.sdf.org)
[00:44:13] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[00:44:13] *** Joins: koollman (~samson_t@user/koollman)
[00:44:13] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[00:44:13] *** Joins: Phil-Work (~phil@62.3.100.20)
[00:44:13] *** Joins: aesin_ (~aesin@81.211.127.107)
[00:44:13] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[00:44:13] *** Joins: corelax (~corelax@user/corelax)
[00:44:13] *** Joins: noonien (~noonien@user/noonien)
[00:44:13] *** Joins: les_ (~whome@user/les)
[00:44:13] *** Joins: andjjj23_ (~irc@107.170.228.47)
[00:44:13] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[00:44:13] *** Joins: van (~van@46.23.94.214)
[00:44:13] *** Joins: n1000 (~n1000@user/n1000)
[00:44:13] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[00:44:13] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[00:44:13] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[00:44:13] *** Joins: gjvc (~gjvc@user/gjvc)
[00:44:13] *** Joins: Spydar007 (~spydar007@user/spydar007)
[00:44:13] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[00:44:13] *** Joins: blinky42 (~quassel@user/blinky42)
[00:44:13] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[00:44:13] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:44:13] *** Joins: brdb (~alarm@24.61.226.255)
[00:44:13] *** Joins: [R] (~rs@genoce.org)
[00:44:13] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[00:44:13] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[00:44:13] *** Joins: pi0 (~default@23.95.234.10)
[00:44:13] *** Joins: Zenton (~user@user/zenton)
[00:44:13] *** Joins: gce108 (~gce@user/gce108)
[00:44:13] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[00:44:13] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:44:13] *** Joins: cyphics (~cyphix@user/cyphics)
[00:44:13] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[00:44:13] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[00:44:13] *** Joins: sebito91 (~sborza@45.55.74.66)
[00:44:13] *** Joins: sunyour (~sunyour@129.226.182.99)
[00:44:13] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:44:13] *** Joins: cehteh (~ct@git.pipapo.org)
[00:44:13] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[00:44:13] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[00:44:13] *** Joins: justGhost (~justache@user/justache)
[00:44:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[00:44:13] *** Joins: reset (~reset@user/reset)
[00:44:13] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[00:44:13] *** Joins: sr20det (~sr20det@user/sr20det)
[00:44:13] *** Joins: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net)
[00:44:13] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[00:44:13] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[00:44:13] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[00:44:13] *** Joins: haliucinas (~haliucina@5.20.153.21)
[00:44:13] *** Joins: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca)
[00:44:13] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[00:44:13] *** Joins: ai (~ai@shell.k4be.pl)
[00:44:13] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[00:44:13] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[00:44:13] *** Joins: cursey (~cursey@user/cursey)
[00:44:13] *** Joins: constxd (~brad@142.167.170.88)
[00:44:13] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[00:44:13] *** Joins: MrC (~Ben@mrbenc.net)
[00:44:13] *** Joins: dansan (~daniel@75.81.148.51)
[00:44:13] *** Joins: gonogo (~gonogo@167.88.62.87)
[00:44:13] *** Joins: towel (~towel@user/towel)
[00:44:13] *** Joins: tbcr (~tbcr@107.13.189.161)
[00:44:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:44:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:44:13] *** Joins: sokan (~sokan@85.73.227.251)
[00:44:13] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[00:44:13] *** Joins: lowin (~lowin@user/lowin)
[00:44:13] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[00:44:13] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[00:44:13] *** Joins: nathanael (~nathanael@user/nathanael)
[00:44:13] *** Joins: APic (~apic@apic.name)
[00:44:13] *** Joins: silkworks (~silkworks@ctrl-c.club)
[00:44:13] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[00:44:13] *** Joins: robyn (~robyndrak@user/robyndrake)
[00:44:13] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[00:44:13] *** Joins: Wulf (~Wulf@user/wulf)
[00:44:13] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:44:13] *** Joins: cust_ (amaama@blackbox.amaama.org)
[00:44:13] *** Joins: Viewday11 (~Viewday@61.141.126.127)
[00:44:13] *** Joins: Trashlord (~trash@user/trashlord)
[00:44:13] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:44:13] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[00:44:13] *** Joins: Klinda (~superleag@user/klinda)
[00:44:13] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[00:44:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[00:44:13] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[00:44:13] *** Joins: abraham (~abraham@143.244.185.86)
[00:44:13] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:44:13] *** Joins: supakeen (~user@python/site-packages/supakeen)
[00:44:13] *** Joins: seninha (~seninha@user/seninha)
[00:44:13] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[00:44:13] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[00:44:13] *** Joins: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[00:44:13] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[00:44:13] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[00:44:13] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[00:44:13] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:44:13] *** Joins: FluffyMask (~masque@user/fluffymask)
[00:44:13] *** Joins: orthoplex64 (~crm@70.120.0.94)
[00:44:13] *** Joins: AmR (~AmREiSa@156.207.136.200)
[00:44:13] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:44:13] *** Joins: alch (~alch@151.68.88.205)
[00:44:13] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[00:44:13] *** Joins: Filystyn (~piotr@user/filystyn)
[00:44:13] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:44:13] *** Joins: mandanguita (~mandangui@139.47.119.61)
[00:44:13] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[00:44:13] *** Joins: Betal (~Betal@user/betal)
[00:44:13] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[00:44:13] *** Joins: cocalero (~cocalero@200-140-37-88.user3p.brasiltelecom.net.br)
[00:44:13] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[00:44:13] *** Joins: lonjil (~quassel@user/lonjil)
[00:44:13] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[00:44:13] *** Joins: Justin_T (~Justin@user/justin-t/x-2449983)
[00:44:13] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[00:44:13] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[00:44:13] *** Joins: computerquip (sid423484@user/computerquip)
[00:44:13] *** Joins: mweckbecker (~matthias@weckbecker.name)
[00:44:13] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[00:44:13] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[00:44:13] *** Joins: grumble (grumble@user/grumble)
[00:44:13] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[00:44:13] *** Joins: bleb (~cm@user/bleb)
[00:44:13] *** Joins: kernelc (~kornel@46.101.204.33)
[00:44:13] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[00:44:13] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[00:44:13] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[00:44:13] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[00:44:13] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[00:44:13] *** Joins: dcx (~dcx@user/dac)
[00:44:13] *** Joins: mrec_ (~markus@user/mrec)
[00:44:13] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[00:44:13] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[00:44:13] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[00:44:13] *** Joins: koolazer (~koo@user/koolazer)
[00:44:13] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[00:44:13] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:44:13] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[00:44:13] *** Joins: omegatron (~some@p5b056436.dip0.t-ipconnect.de)
[00:44:13] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[00:44:13] *** Joins: Fleck (~fleck@user/fleck)
[00:44:13] *** Joins: subvisor (sid502026@id-502026.helmsley.irccloud.com)
[00:44:13] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[00:44:13] *** Joins: Soni (~quassel@autistic.space)
[00:44:13] *** Joins: vassili (~vt@osa.vbc.su)
[00:44:13] *** Joins: baloona (~baloona@mail.baloona.de)
[00:44:13] *** Joins: danieln (~danieln@erebor.danieln.de)
[00:44:13] *** Joins: beneth (~beneth@2001:41d0:c:a71:1000:25::)
[00:44:13] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[00:44:13] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[00:44:13] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[00:44:13] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[00:44:13] *** Joins: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e)
[00:44:13] *** Joins: nicode (~nic@45.72.195.35)
[00:44:13] *** Joins: aradesh (~aradesh@user/aradesh)
[00:44:13] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[00:44:13] *** Joins: leah2 (~leah@vuxu.org)
[00:44:13] *** Joins: om3ga (~oz@46.49.41.80)
[00:44:13] *** Joins: enyc (~enyc@user/enyc)
[00:44:13] *** Joins: dos (~dos@dosowisko.net)
[00:44:13] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[00:44:13] *** Joins: zalt (~zalt@user/zalt)
[00:44:13] *** Joins: Teckla (uid172075@user/teckla)
[00:44:13] *** Joins: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de)
[00:44:13] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[00:44:13] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[00:44:13] *** Joins: greenbagels (~gb@user/greenbagels)
[00:44:13] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[00:44:13] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[00:44:13] *** Joins: homura (uid398348@user/homura)
[00:44:13] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[00:44:13] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[00:44:13] *** Joins: Brewster (~Brewster@user/brewster)
[00:44:13] *** Joins: DonRichie (~DonRichie@ricl.de)
[00:44:13] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[00:44:13] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[00:44:13] *** Joins: Xgc (~Xgc@user/xgc)
[00:44:13] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[00:44:13] *** Joins: SoF (~skius@user/skius)
[00:44:13] *** Joins: dmgk (~dmgk@user/dmgk)
[00:44:13] *** Joins: megamus_prime (~megamus_p@46.101.47.16)
[00:44:13] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[00:44:13] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[00:44:13] *** Joins: buffet (~buffet@buffet.sh)
[00:44:13] *** Joins: snickerbockers (sid210497@id-210497.ilkley.irccloud.com)
[00:44:13] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[00:44:13] *** Joins: krychu_ (~krychu@static.152.151.251.148.clients.your-server.de)
[00:44:13] *** Joins: glowcoil_ (sid3405@id-3405.tinside.irccloud.com)
[00:44:13] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[00:44:13] *** Joins: drocan (~drocan@user/drocan)
[00:44:13] *** Joins: drew (~drew@user/drew)
[00:44:13] *** Joins: ldlework (~hexeme@user/hexeme)
[00:44:13] *** Joins: NovaXrine_ (~NovaXrine@2604:a880:4:1d0::183:6000)
[00:44:13] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[00:44:13] *** Joins: sunarch (uid526836@user/sunarch)
[00:44:13] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[00:44:13] *** Joins: kfv (~kfv@mail.kfv.io)
[00:44:13] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[00:44:13] *** Joins: nikomo (~quassel@nikomo.fi)
[00:44:13] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[00:44:13] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[00:44:13] *** Joins: snappy (~snappy@user/snappy)
[00:44:13] *** Joins: prime (~prime@user/prime)
[00:44:13] *** Joins: poprocks (~logan@user/poprocks)
[00:44:13] *** Joins: micronnn (~micronn@user/micronn)
[00:44:13] *** Joins: mdw (~root@159.65.86.163)
[00:44:13] *** Joins: andi_ (~andi@user/andi/x-3467420)
[00:44:13] *** Joins: jonbryan (~ea@user/jonbryan)
[00:44:13] *** Joins: derelict (~derelict@user/derelict)
[00:44:13] *** Joins: daurn (~daurnimat@vultr.daurnimator.com)
[00:44:13] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[00:44:13] *** Joins: nf (~n@monade.li)
[00:44:13] *** Joins: daviwil (~daviwil@systemcrafters/daviwil)
[00:44:13] *** Joins: markand (~markand@markand.fr)
[00:44:13] *** Joins: asd (~noname@user/asd)
[00:44:13] *** Joins: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[00:44:13] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[00:44:13] *** Joins: rany (~rany@user/rany)
[00:44:13] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[00:44:13] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[00:44:13] *** Joins: peace[m] (~elliotal_@2001:470:69fc:105::bb21)
[00:44:13] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[00:44:13] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:44:13] *** Joins: Tempesta (~Tempesta@user/tempesta)
[00:44:13] *** Joins: meator (~meator@91.187.59.126)
[00:44:13] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[00:44:13] *** Joins: Chaser (~Chaser@user/chaser)
[00:44:13] *** Joins: Ckat (~Ckat@xn--z7x.xn--6frz82g)
[00:44:13] *** Joins: carrar (~tim@osburn.jp)
[00:44:13] *** Joins: dhch (~dhch@185.213.154.165)
[00:44:13] *** Joins: Exa (exa@irc.moe)
[00:44:13] *** Joins: sirdidymus (~sirdidymu@sorcsys.net)
[00:44:13] *** Joins: meowray (MaskRay@user/meowray)
[00:44:13] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[00:44:13] *** Joins: orkim (~orkim@user/orkim)
[00:44:13] *** Joins: buzel (~buzel@fsf/member/buzel)
[00:44:13] *** Joins: oldlaptop (~quassel@45.63.78.126)
[00:44:13] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[00:44:13] *** Joins: Jmtrix (~qed@user/jmtrix)
[00:44:13] *** Joins: s1b1 (~s1b1@user/s1b1)
[00:44:13] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[00:44:13] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[00:44:13] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[00:44:13] *** Joins: geeknix (~pi@2001:e68:5432:46d8:39f7:e80b:25f7:e9cb)
[00:44:13] *** Joins: PublicWifi (~PublicWiF@user/publicwifi)
[00:44:13] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[00:44:13] *** Joins: phryk (~totallyno@user/phryk)
[00:44:13] *** Joins: Masklin (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[00:44:13] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[00:44:13] *** Joins: dzz007 (~dzz007@user/dzz007)
[00:44:13] *** Joins: hsv (~unknown@user/hsv)
[00:44:13] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[00:44:13] *** Joins: thiccdaddy (~o_O@user/thiccdaddy)
[00:44:13] *** Joins: Luke (~ldm@hacksoc/member)
[00:44:13] *** Joins: Elladan (~elladan@user/elladan)
[00:44:13] *** Joins: shalok (~shalok@user/shalok)
[00:44:13] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[00:44:13] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[00:44:13] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[00:44:13] *** Joins: hussam (~hussam@user/hussam)
[00:44:13] *** Joins: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718)
[00:44:13] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[00:44:13] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[00:44:13] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[00:44:13] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[00:44:13] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[00:44:13] *** Joins: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1)
[00:44:13] *** Joins: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530)
[00:44:13] *** Joins: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[00:44:13] *** Joins: Beastie (~lcu@user/thebeastie)
[00:44:13] *** Joins: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328)
[00:44:13] *** Joins: armin (~armin@unix.porn)
[00:44:13] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:81a7:a11a:626:f80c)
[00:44:13] *** Joins: pulse (~pulse@user/pulse)
[00:44:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[00:44:13] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[00:44:13] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[00:44:13] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[00:44:13] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[00:44:13] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[00:44:13] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[00:44:13] *** Joins: Pentode (~Pentode@mobile-166-170-29-174.mycingular.net)
[00:44:13] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[00:44:13] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[00:44:13] *** Joins: ns12 (~ns12@user/ns12)
[00:44:13] *** Joins: BUSY (~BUSY@user/busy)
[00:44:13] *** Joins: ndorf (~nd@ob.noxio.us)
[00:44:13] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[00:44:13] *** Joins: synbiose (~synbiose@user/synbiose)
[00:44:13] *** Joins: elemongw (~elemongw@20.107.36.50)
[00:44:13] *** Joins: minto (~mintograd@47.201.5.61)
[00:44:13] *** Joins: Dreg- (~Dreg@fr33project.org)
[00:44:13] *** Joins: kplant (~kplant@user/kplant)
[00:44:13] *** Joins: ornxka (~ornxka@user/ornxka)
[00:44:13] *** Joins: Cyp (~cyp@213.237.88.120)
[00:44:13] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[00:44:13] *** Joins: monchi (~joints@143.198.92.132)
[00:44:13] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[00:44:13] *** Joins: bkhl (~bkhl@user/bkhl)
[00:44:13] *** Joins: begriffs (~begriffs@user/begriffs)
[00:44:13] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[00:44:13] *** Joins: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[00:44:13] *** Joins: novns (~novns@user/novns)
[00:44:13] *** Joins: marcj (~marc@205.175.215.11)
[00:44:13] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[00:44:13] *** Joins: timmot (~timmot@207.148.85.201)
[00:44:13] *** Joins: crudo (~crudo@livredigital.com)
[00:44:13] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[00:44:13] *** Joins: alicef (~none@gentoo/developer/alicef)
[00:44:13] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[00:44:13] *** Joins: Cienisty (Cienisty@user/cienisty)
[00:44:13] *** Joins: nowz (~nowz@user/nowz)
[00:44:13] *** Joins: LIERO (~no@user/liero)
[00:44:13] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[00:44:13] *** Joins: scaramanga (~scara@1.239.35.120)
[00:44:13] *** Joins: koo5_ (~quassel@51.140.155.227)
[00:44:13] *** Joins: useretail (~useretail@185.132.19.151)
[00:44:13] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[00:44:13] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:44:13] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[00:44:13] *** Joins: katsuragi (katsuragi@tilde.institute)
[00:44:13] *** Joins: edk (edk@libera/staff/edk)
[00:44:13] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[00:44:13] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[00:44:13] *** Joins: paulo (paulo@user/paulo/x-9032687)
[00:44:13] *** Joins: dstein64 (~dstein64@dannyadam.com)
[00:44:13] *** Joins: ravndal (~weechat@user/ravndal)
[00:44:13] *** Joins: Oddity (~Oddity@user/oddity)
[00:44:13] *** Joins: sdk_ (~x@shell.codevoid.de)
[00:44:13] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[00:44:13] *** Joins: ravella (~ravella@user/ryanavella)
[00:44:13] *** Joins: Albright (~Albright@149.28.13.173)
[00:44:13] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[00:44:13] *** Joins: p0g0 (~p0g0@23.252.182.13)
[00:44:13] *** Joins: shachaf (~shachaf@user/shachaf)
[00:44:13] *** Joins: koisoke (xef4@epilogue.org)
[00:44:13] *** Joins: Stx (stx@libera/staff/stx)
[00:44:13] *** Joins: reda_ (~reda@user/reda)
[00:44:13] *** Joins: con3 (~con3@143.198.53.32)
[00:44:13] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[00:44:13] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[00:44:13] *** Joins: strudl (~strudl@user/strudl)
[00:44:13] *** Joins: asm (~alexander@user/asm)
[00:44:13] *** Joins: aosync (~aws@mx1.aosync.me)
[00:44:13] *** Joins: gshumway (~gshumway@user/gshumway)
[00:44:13] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[00:44:13] *** Joins: Epakai (Epakai@drislock.org)
[00:44:13] *** Joins: gdarko (~me@dg.mk)
[00:44:13] *** Joins: mort (~mort@188.166.114.29)
[00:44:13] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[00:44:13] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[00:44:13] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:44:13] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[00:44:13] *** Joins: travankor (travankor@user/travankor)
[00:44:13] *** Joins: riposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net)
[00:44:13] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[00:44:13] *** Joins: gluon (~gluon@2a01:4f8:c0c:e2da::1)
[00:44:13] *** Joins: shokara (8a599707f6@198.108.77.17)
[00:44:13] *** Joins: chiptuner (~bobby@user/chiptuner)
[00:44:13] *** Joins: Riviera (Riviera@user/riviera)
[00:44:13] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[00:44:13] *** Joins: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net)
[00:44:13] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[00:44:13] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[00:44:13] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[00:44:13] *** Joins: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e)
[00:44:13] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[00:44:13] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[00:44:13] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[00:44:13] *** Joins: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com)
[00:44:13] *** Joins: zwr (~zwr@2804:d45:b966:fb00:35ea:d66c:6406:325c)
[00:44:13] *** Joins: Telvana (~capo@user/telvana)
[00:44:13] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[00:44:13] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[00:44:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[00:44:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:44:13] *** Joins: soul-d (~uknown@user/soul-d)
[00:44:13] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[00:44:13] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[00:44:13] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[00:44:13] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[00:44:13] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[00:44:13] *** Joins: Sadale (~Sadale@user/sadale)
[00:44:13] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[00:44:13] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[00:44:13] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[00:44:13] *** Joins: Muzer (~muzer@tim32.org)
[00:44:13] *** Joins: vancz (~vancz@user/vancz)
[00:44:13] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[00:44:13] *** Joins: savy_ (~z@io.tl)
[00:44:13] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[00:44:13] *** Joins: supernovah (~supernova@mail.ijk.nz)
[00:44:13] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[00:44:13] *** Joins: mgocobachi (~m@ancrae.com)
[00:44:13] *** Joins: tarzeau (~alex@mail.aiei.ch)
[00:44:13] *** Joins: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com)
[00:44:13] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[00:44:13] *** Joins: dme2 (~dme2@67.205.140.199)
[00:44:13] *** Joins: jda (~jadra@chai.0xbad.coffee)
[00:44:13] *** Joins: knittl (~knittl@user/knittl)
[00:44:13] *** Joins: gera (~gera@user/gera)
[00:44:13] *** Joins: lm- (~lm-@vps-a26d080c.vps.ovh.net)
[00:44:13] *** Joins: nortoh (~nortoh@user/nortoh)
[00:44:13] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[00:44:13] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[00:44:13] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[00:44:13] *** Joins: root__ (~root@157.245.144.252)
[00:44:13] *** Joins: jaeckel (~jaeckel@sleipnir.jaeckel.eu)
[00:44:13] *** Joins: alex11 (~alex11@user/alex11)
[00:44:13] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[00:44:13] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it)
[00:44:13] *** Joins: highrate (~presonic@user/highrate)
[00:44:13] *** Joins: BSaboia (~bsaboia@95.179.154.99)
[00:44:13] *** Joins: Nex8192_ (~Nex8192@user/nex8192)
[00:44:13] *** Joins: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu)
[00:44:13] *** Joins: kuber (~kuber@75-172-24-205.tukw.qwest.net)
[00:44:13] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[00:44:13] *** Joins: Akuli (~Akuli@213.216.211.88)
[00:44:13] *** Joins: effexzi (uid474242@ilkley.irccloud.com)
[00:44:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:44:13] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[00:44:13] *** Joins: carlos_ (~carlos@2804:39b0:1db:1f00::50c)
[00:44:13] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:44:13] *** Joins: sivoais (~zaki@199.19.225.239)
[00:44:13] *** Joins: clarity (~clarity@user/clarity)
[00:44:13] *** Joins: Dijky (~Dijky@user/dijky)
[00:44:13] *** Joins: phroa (~phroa@user/phroa)
[00:44:13] *** Joins: Teacup (~teacup@user/teacup)
[00:44:13] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[00:44:13] *** Joins: amorel_ (~amorel@mx.mompl.net)
[00:44:13] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[00:44:13] *** Joins: majors_ (~majors@user/majors)
[00:44:13] *** Joins: alip (~alip@exherbo/developer/alip)
[00:44:13] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[00:44:13] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[00:44:13] *** Joins: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net)
[00:44:13] *** Joins: simontime (~simontime@irc.simonti.me)
[00:44:13] *** Joins: mniip (mniip@libera/staff/mniip)
[00:44:13] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[00:44:13] *** Joins: vinay (~Vinay@user/vinay-keshava)
[00:44:13] *** Joins: ReimuHakurei_ (~Reimu@raphi.vserver.alexingram.net)
[00:44:13] *** Joins: bone (~bone@user/mbo)
[00:44:13] *** Joins: hasu (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp)
[00:44:13] *** Joins: leosilva (~leosilva@canonical/leosilva)
[00:44:13] *** Joins: _slate_ (~slate@159.69.26.92)
[00:44:13] *** Joins: rick123 (~rick123@157.245.192.96)
[00:44:13] *** Joins: z14 (~alzee@user/alzee)
[00:44:13] *** Joins: mplio (~mplio@81-205-35-3.fixed.kpn.net)
[00:44:13] *** Joins: klys (~mdasoh@show.op8.us)
[00:44:13] *** Joins: abraxis (~abraxis@user/abraxis)
[00:44:13] *** Joins: jkl (~jkl@user/jkl)
[00:44:13] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[00:44:13] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:13] *** Joins: BGL (ninety@75-149-171-58-Washington.hfc.comcastbusiness.net)
[00:44:13] *** Joins: cation (cation@user/cation)
[00:44:13] *** Joins: cryptonector (~nico@24.28.108.183)
[00:44:13] *** Joins: pgib (~textual@173.38.117.89)
[00:44:13] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[00:44:13] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[00:44:13] *** Joins: Byteflux (~byte@byteflux.net)
[00:44:13] *** Joins: cp--- (~cp-@b157153.ppp.asahi-net.or.jp)
[00:44:13] *** Joins: bramhaag (~bramhaag@134.195.121.39)
[00:44:13] *** Joins: raym (~raym@user/raym)
[00:44:13] *** Joins: duds- (~duds-@user/duds)
[00:44:13] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[00:44:13] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:13] *** Joins: Jong (~Jong@163.114.132.5)
[00:44:13] *** Joins: somlis (~somlis@user/somlis)
[00:44:13] *** Joins: immibis (~hexchat@62.156.144.218)
[00:44:13] *** Joins: jkotra (~jkotra@223.230.91.108)
[00:44:13] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[00:44:13] *** Joins: TommyC (~TommyC@user/tommyc)
[00:44:13] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:44:13] *** Joins: moose (~moose@user/moose)
[00:44:13] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[00:44:13] *** Joins: tazle (tazle@kapsi.fi)
[00:44:13] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[00:44:13] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[00:44:13] *** Joins: Azem (~haise01@user/haise01)
[00:44:13] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:44:13] *** Joins: slavfox (~slavfox@93.158.232.111)
[00:44:13] *** Joins: karakedi (~eAC53C340@user/karakedi)
[00:44:13] *** Joins: strajder (~strajder@user/strajder)
[00:44:13] *** Joins: Ragnor (~Ragnor@user/ragnor)
[00:44:13] *** Joins: vboykox (~user@95.134.14.76)
[00:44:13] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[00:44:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:44:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:13] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[00:44:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[00:44:13] *** Joins: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no)
[00:44:13] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:44:13] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[00:44:13] *** Joins: noarb (~noarb@user/noarb)
[00:44:13] *** Joins: foul_owl (~kerry@94.140.8.105)
[00:44:13] *** Joins: Khoyo_ (~khoyo@user/khoyo)
[00:44:13] *** Joins: mahmutov (~mahmutov@37.155.28.181)
[00:44:13] *** Joins: wovixo (~wovixo@128.104.205.49)
[00:44:13] *** Joins: glider (~glider@user/glider)
[00:44:13] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[00:44:13] *** Joins: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de)
[00:44:13] *** Joins: magla (~gelignite@55d436fa.access.ecotel.net)
[00:44:13] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[00:44:13] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:13] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[00:44:13] *** Joins: vicfred (~vicfred@user/vicfred)
[00:44:13] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[00:44:13] *** Joins: bick (~kotaman@94.46.203.147)
[00:44:13] *** Joins: Darkcoal (~user@user/Darkcoal)
[00:44:13] *** Joins: jennie (~jennie@user/jennie)
[00:44:13] *** Joins: nhartman (~SaltHillS@206.223.160.26)
[00:44:13] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[00:44:13] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[00:44:14] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[00:44:14] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Max SendQ exceeded)
[00:44:14] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[00:44:24] *** boreas is now known as 076AAFO7U
[00:44:26] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[00:44:26] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[00:44:26] *** Joins: finsternis (~X@23.226.237.192)
[00:44:26] *** Joins: MrFantastik (~f@2607:f598:bbda:270:af90:c2f0:20b5:e42e)
[00:44:26] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[00:44:26] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[00:44:26] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:44:26] *** Joins: jx0 (~jx0@199.229.250.138)
[00:44:26] *** Joins: Akiva (~Akiva@user/Akiva)
[00:44:26] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[00:44:26] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:44:26] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:44:26] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[00:44:26] *** Joins: csrf (~csrf@user/csrf)
[00:44:26] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:44:26] *** Joins: plastico (~plastico@neomutt/plastico)
[00:44:26] *** Joins: coruja (~coruja@user/coruja)
[00:44:26] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[00:44:26] *** Joins: Rounin (~david@84.212.130.215)
[00:44:26] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[00:44:26] *** Joins: jancoow (~jancoow@user/jancoow)
[00:44:26] *** Joins: pizdets (~pizdets@183.182.111.120)
[00:44:26] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[00:44:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:44:26] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[00:44:26] *** Joins: EtherNet (~ethernet@user/ethernet)
[00:44:26] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[00:44:26] *** Joins: Isthmusi (~Isthmus@user/isveni)
[00:44:26] *** Joins: joev (~joev@user/joev)
[00:44:26] *** Joins: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59)
[00:44:26] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[00:44:26] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[00:44:26] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[00:44:26] *** Joins: fmlatghor (~lcoogan@2601:5cd:8100:2890::6)
[00:44:26] *** Joins: skipper (~whatsupbo@user/scobydoo)
[00:44:26] *** Joins: johnnyreb (~tth@user/johnnyreb)
[00:44:26] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[00:44:26] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[00:44:26] *** Joins: trvv (555a816688@user/trvv)
[00:44:26] *** Joins: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c)
[00:44:26] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[00:44:26] *** Joins: saribro (~swinnenb@user/swinnenb)
[00:44:26] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[00:44:26] *** Joins: Furai (~Furai@furai.pl)
[00:44:26] *** Joins: Guest7572 (~luca0N@nautilus.luca0n.com)
[00:44:26] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[00:44:26] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[00:44:26] *** Joins: buhman (sid411355@user/buhman)
[00:44:26] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[00:44:26] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[00:44:26] *** Joins: BlueShark (sid10311@user/blueshark)
[00:44:26] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[00:44:26] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[00:44:26] *** Joins: |smlckz| (~smlckz@user/smlckz)
[00:44:26] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[00:44:26] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[00:44:26] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[00:44:26] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[00:44:26] *** Joins: digilink (~digilink@user/digilink)
[00:44:26] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[00:44:26] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:44:26] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[00:44:26] *** Joins: nate (NBishop@o.apocaleaps.com)
[00:44:26] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[00:44:26] *** Joins: int (~int@0x4.cx)
[00:44:26] *** Joins: chris1 (~chris@ip-103-85-39-45.syd.xi.com.au)
[00:44:26] *** Joins: dupl0x (~duplox@137.220.127.235)
[00:44:26] *** Joins: nitrix (~nitrix@user/nitrix)
[00:44:26] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[00:44:26] *** Joins: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net)
[00:44:26] *** Joins: tm512 (~tm512@user/tm512)
[00:44:26] *** Joins: candide (~pbot3@about/c/bot/candide)
[00:44:26] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[00:44:26] *** Joins: edr (~edr@user/edr)
[00:44:26] *** Joins: kzootech (~contact@kzoo.tech)
[00:44:26] *** Joins: eau (~chat@user/eau)
[00:44:26] *** Joins: AssKoala (~asskoala@user/asskoala)
[00:44:26] *** Joins: trenka (~ykaliuta@user/trenka)
[00:44:26] *** Joins: fluter (~fluter@user/fluter)
[00:44:26] *** Joins: g2anj (~v@58.228.230.4)
[00:44:26] *** Joins: ChoHag (~mking@81.187.183.71)
[00:44:26] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[00:44:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:44:26] *** Joins: domve (~dom@user/domve)
[00:44:26] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:44:26] *** Joins: mixfix41 (~homefame@user/mixfix41)
[00:44:26] *** Joins: aighearach (~paris@user/aighearach)
[00:44:26] *** Joins: OverCoder (~OverCoder@user/overcoder)
[00:44:26] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[00:44:26] *** Joins: tafa (~tafa@user/tafa)
[00:44:26] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[00:44:26] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[00:44:26] *** Joins: rkta (~rkta@2001:4ba0:cafe:eaf::1)
[00:44:26] *** Joins: noose (~noose@user/noose)
[00:44:26] *** Joins: jayaura (e2d69d141a@2604:bf00:561:2000::2b0)
[00:44:26] *** Joins: Retr0id (~Retr0id@user/retr0id)
[00:44:26] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[00:44:26] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:44:26] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[00:44:26] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[00:44:26] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[00:44:26] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[00:44:26] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[00:44:26] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[00:44:26] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[00:44:26] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[00:44:26] *** Joins: ikiryo (sid109660@user/ikiryo)
[00:44:26] *** Joins: trn (jhj@sourcehut/user/trn)
[00:44:26] *** Joins: FLHerne (flh@flherne.uk)
[00:44:26] *** Joins: bayleaf (~bayleaf@192.249.60.20)
[00:44:26] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[00:44:26] *** Joins: lewisje (~lewisje@72.49.207.113)
[00:44:26] *** Joins: Macuser (Macuser@here.for-the.chat)
[00:44:26] *** Joins: ra4king (~ra4king@roiatalla.com)
[00:44:26] *** Joins: divine (~divine@2001:470:8247:1::31)
[00:44:26] *** Joins: Djoobstil (~djoobstil@djoobstil.online)
[00:44:26] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[00:44:26] *** Joins: hecanjog2 (~hecanjog@2a01:4f9:6a:5326::2)
[00:44:26] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[00:44:26] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[00:44:26] *** Joins: decartes (sid240036@id-240036.helmsley.irccloud.com)
[00:44:26] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[00:44:26] *** Joins: overrider (~overrider@user/overrider)
[00:44:26] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[00:44:26] *** Joins: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com)
[00:44:26] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[00:44:26] *** Joins: bw_ (~bw@coconut.xen.prgmr.com)
[00:44:26] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[00:44:29] *** Joins: kassle (~kassle@107.175.32.53)
[00:44:29] *** Joins: mbarbar (~mbarbar@oak.xen.prgmr.com)
[00:44:29] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Max SendQ exceeded)
[00:44:34] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:ec54:cd88:99c3:2b2f)
[00:44:37] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Ping timeout: 240 seconds)
[00:44:38] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:44:40] *** Quits: mixfix41 (~homefame@user/mixfix41) (Max SendQ exceeded)
[00:44:40] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[00:44:49] *** Joins: ka80_ (~ka80@111.60.138.34.bc.googleusercontent.com)
[00:44:49] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c)
[00:44:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[00:44:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:44:49] *** Joins: bebyx (~Thunderbi@user/bebyx)
[00:44:49] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:add1:9b6a:adbc:6291)
[00:44:49] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:44:49] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[00:44:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:44:49] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[00:44:49] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[00:44:49] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[00:44:49] *** Joins: remedan (~remedan@octo.cafe)
[00:44:49] *** Joins: JanC (~janc@user/janc)
[00:44:49] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[00:44:49] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[00:44:49] *** Joins: NRK (~nrkmatrix@2001:470:69fc:105::4e30)
[00:44:49] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[00:44:49] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:44:49] *** Joins: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1)
[00:44:49] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[00:44:49] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[00:44:49] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[00:44:49] *** Joins: kline (~freedom0@libera/staff/kline)
[00:44:49] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[00:44:49] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:44:49] *** Joins: fizzie (irc@selene.zem.fi)
[00:44:49] *** Joins: Red (~Red@41.92-221-233.customer.lyse.net)
[00:44:49] *** Joins: Echoz (~chris@user/echoz)
[00:44:49] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[00:44:49] *** Joins: cpuid (~cpuid@user/cpuid)
[00:44:49] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[00:44:49] *** Joins: AsenMx (~asen@user/asenmx)
[00:44:49] *** Joins: mattroelle (~Matt_Roel@funbox.mattroelle.com)
[00:44:49] *** Joins: regulate (~regulate@koduro.com)
[00:44:49] *** Joins: exz (~exezin@oods.net)
[00:44:49] *** Joins: icy (~icy@user/icy)
[00:44:49] *** Joins: taru9 (~realTaru9@user/taru9)
[00:44:49] *** Joins: wyre (~wyre@user/wyre)
[00:44:49] *** Joins: amosbird (~amosbird@13.75.119.182)
[00:44:49] *** Joins: energizer (~energizer@user/energizer)
[00:44:49] *** Joins: nheir (~nheir@public.itai.re)
[00:44:49] *** Joins: Artea (~Lufia@artea.com.pt)
[00:44:49] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[00:44:49] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[00:44:49] *** Joins: Learath2 (~learath2@user/learath2)
[00:44:49] *** Joins: eof (~eof@tty3.dev)
[00:44:49] *** Joins: bparker (~nobody@user/bparker)
[00:44:49] *** Joins: glenfe (sid231748@user/glenfe)
[00:44:49] *** Joins: twkm (twkm@rfc1459.net)
[00:44:49] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[00:44:49] *** Joins: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2)
[00:44:49] *** Joins: DCTWD (~dc@uz.utmappro.com)
[00:44:49] *** Joins: fakenullie (~nullie@london.nullie.name)
[00:44:49] *** Joins: veltas (~veltas@104.236.34.215)
[00:44:49] *** Joins: livestradamus (~quassel@user/livestradamus)
[00:44:50] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[00:44:56] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[00:44:56] *** Quits: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1) (Ping timeout: 245 seconds)
[00:45:01] *** Joins: Atque (~Atque@user/atque)
[00:45:01] *** Joins: System_Error (~SystemErr@user/systemerror)
[00:45:01] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[00:45:01] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[00:45:01] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[00:45:01] *** Joins: diiirt (~diiirt@user/diiirt)
[00:45:01] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:45:01] *** Joins: bindu (~bindu@user/bindu)
[00:45:01] *** Joins: de-facto (~de-facto@user/de-facto)
[00:45:01] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:45:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:45:01] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[00:45:01] *** Joins: teepee (~teepee@openscad/teepee)
[00:45:01] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:45:01] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (Ping timeout: 250 seconds)
[00:45:01] *** Joins: justaguy (~quassel@2a05:d014:742:eb00:7693:c44f:1fc3:29)
[00:45:01] *** Joins: voldial (~user@user/voldial)
[00:45:01] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[00:45:01] *** Joins: gl (~x@pwn.lu)
[00:45:01] *** Joins: laris (undead@37.221.209.36)
[00:45:01] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[00:45:01] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[00:45:01] *** Joins: bjs (sid190364@user/bjs)
[00:45:01] *** Joins: merced (merced@user/merced)
[00:45:02] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: Akawama[m] (~akawama@user/akawama) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: peace[m] (~elliotal_@2001:470:69fc:105::bb21) (Ping timeout: 240 seconds)
[00:45:04] *** Joins: finsternis (~X@23.226.237.192)
[00:45:08] *** Quits: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: hussam (~hussam@user/hussam) (Ping timeout: 252 seconds)
[00:45:10] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Ping timeout: 260 seconds)
[00:45:11] *** Quits: sebbu (~sebbu@user/sebbu) (Read error: Connection reset by peer)
[00:45:13] *** Joins: epony (epony@lz2.eu)
[00:45:15] *** Joins: rcf (rcf@iceland.sdf.org)
[00:45:18] *** Joins: krzych (krzych@nroot.pl)
[00:45:18] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[00:45:18] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[00:45:18] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[00:45:18] *** Joins: m4v (~znc@ubuntu/member/m4v)
[00:45:18] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[00:45:18] *** Joins: remexre (~remexre@user/remexre)
[00:45:18] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[00:45:18] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[00:45:18] *** Joins: cebor (~cebor@user/cebor)
[00:45:18] *** Joins: V (~v@anomalous.eu)
[00:45:18] *** Joins: Celelibi (celelibi@user/celelibi)
[00:45:18] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[00:45:18] *** Joins: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de)
[00:45:18] *** Joins: neunon (~neunon@user/neunon)
[00:45:18] *** Joins: ominionx (~ominionx@172.58.136.5)
[00:45:18] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:45:18] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[00:45:18] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[00:45:18] *** Joins: LangerJan (~jan@user/langerjan)
[00:45:18] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[00:45:18] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[00:45:18] *** Joins: orc (sid509852@user/orc)
[00:45:18] *** Joins: krissmaster (~kriss@213.239.83.90)
[00:45:18] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[00:45:18] *** Joins: no-n (sid524992@smol/hors)
[00:45:18] *** Joins: celphi (sid97751@user/celphi)
[00:45:18] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[00:45:18] *** Joins: user282069 (~user@li1512-248.members.linode.com)
[00:45:18] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[00:45:18] *** Joins: gdd (~gdd@129.199.146.230)
[00:45:18] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[00:45:18] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[00:45:18] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[00:45:18] *** Joins: fstd_ (~fstd@xdsl-89-1-56-234.nc.de)
[00:45:18] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[00:45:18] *** Joins: deflected (~deflected@user/deflected)
[00:45:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:45:18] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[00:45:18] *** Joins: eqw (~eqw@31.134.178.99)
[00:45:18] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[00:45:18] *** Joins: nisstyre (~wes@user/nisstyre)
[00:45:18] *** Joins: th1_ (~th@test.secomondo.dk)
[00:45:18] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[00:45:18] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[00:45:18] *** Joins: mcinglis (~mcinglis@user/mcinglis)
[00:45:18] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[00:45:18] *** Joins: Seng (~nick@hurtig.ninja)
[00:45:18] *** Joins: theglass (~glass@user/theglass)
[00:45:18] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[00:45:18] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[00:45:18] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[00:45:18] *** Joins: Emil (emil@emil.fi)
[00:45:18] *** Quits: gdd (~gdd@129.199.146.230) (Max SendQ exceeded)
[00:45:18] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Ping timeout: 245 seconds)
[00:45:23] *** Quits: rcf (rcf@iceland.sdf.org) (Client Quit)
[00:45:25] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Ping timeout: 250 seconds)
[00:45:32] *** Quits: Roman[m]1 (~wrongt@2001:470:69fc:105::341e) (Ping timeout: 240 seconds)
[00:45:36] *** Joins: rcf (rcf@iceland.sdf.org)
[00:45:38] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Ping timeout: 260 seconds)
[00:45:41] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Ping timeout: 252 seconds)
[00:45:46] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Ping timeout: 245 seconds)
[00:45:46] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 245 seconds)
[00:45:51] *** Quits: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e) (Ping timeout: 250 seconds)
[00:46:10] *** Quits: rcf (rcf@iceland.sdf.org) (Client Quit)
[00:46:14] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (Ping timeout: 252 seconds)
[00:46:15] *** Quits: szkl (uid110435@uxbridge.irccloud.com) (Client Quit)
[00:46:21] *** Joins: rcf (rcf@iceland.sdf.org)
[00:46:29] *** Joins: sebbu (~sebbu@2a01:cb10:856f:3000:70bc:5bd0:8f78:3b97)
[00:46:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[00:47:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[00:47:13] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:47:26] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:47:26] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 245 seconds)
[00:47:29] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 254 seconds)
[00:47:29] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 254 seconds)
[00:47:31] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:47:41] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:47:49] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[00:47:52] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:48:04] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:48:20] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:49:01] *** Joins: Pent (sid313808@lymington.irccloud.com)
[00:49:18] *** Quits: kuber (~kuber@75-172-24-205.tukw.qwest.net) (Quit: leaving)
[00:49:42] *** Joins: kristjansson (sid126207@tinside.irccloud.com)
[00:50:08] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[00:50:19] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[00:50:23] *** Joins: tech_exorcist (txrcst@de1.hashbang.sh)
[00:51:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:52:11] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (Quit: Stay safe!)
[00:53:33] *** Quits: szkl (uid110435@uxbridge.irccloud.com) ()
[00:54:26] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 256 seconds)
[00:54:50] *** Quits: Filystyn (~piotr@user/filystyn) (Quit: Lost terminal)
[00:57:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:57:53] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[00:58:00] *** Joins: MatthiasG2 (~matthias@i6DFA0138.versanet.de)
[00:58:08] *** Joins: ZedHedTed (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net)
[00:58:28] *** Joins: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3)
[01:01:29] *** Quits: meator (~meator@91.187.59.126) (Changing host)
[01:01:29] *** Joins: meator (~meator@user/meator)
[01:01:42] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[01:01:49] *** epony is now known as Guest3959
[01:02:01] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[01:02:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:02:26] *** Quits: bick (~kotaman@94.46.203.147) (Quit: leaving)
[01:02:40] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[01:02:45] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:03:24] *** Joins: mandanguita (~mandangui@139.47.119.61)
[01:03:29] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Quit: leaving)
[01:03:37] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[01:03:40] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:04:59] *** Quits: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:06:47] *** Joins: gdd (~gdd@129.199.146.230)
[01:07:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:08:08] *** Joins: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de)
[01:12:03] *** Joins: imp (~imp@179-191-215-167.static.sumicity.net.br)
[01:12:36] *** Quits: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3) (Quit: No Ping reply in 180 seconds.)
[01:12:41] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[01:14:38] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:15:08] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:15:19] *** Quits: tech_exorcist (txrcst@de1.hashbang.sh) (Quit: Disconnecting)
[01:16:26] *** Joins: oj (oj@user/oj)
[01:17:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:18:50] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:19:37] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[01:20:07] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:21:16] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[01:21:51] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[01:23:17] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:23:57] *** Joins: Alhazred (~Alhazred@86.106.74.43)
[01:24:29] *** Quits: alch (~alch@151.68.88.205) (Ping timeout: 256 seconds)
[01:24:57] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[01:25:02] *** Quits: Narrat (~omnius@p2e51179b.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:25:56] *** Joins: Akawama[m] (~akawama@user/akawama)
[01:26:01] *** Joins: alch (~alch@151.38.212.114)
[01:26:55] *** Joins: nitrix (~nitrix@user/nitrix)
[01:27:01] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:28:33] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[01:29:20] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[01:30:58] *** Joins: peace[m] (~elliotal_@2001:470:69fc:105::bb21)
[01:31:01] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[01:31:01] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[01:31:05] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:31:10] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[01:31:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[01:31:12] *** Joins: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1)
[01:31:15] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[01:31:17] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[01:34:28] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[01:34:48] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[01:35:07] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[01:36:59] *** Joins: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1)
[01:37:36] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[01:37:41] *** Joins: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530)
[01:37:47] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[01:37:51] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[01:39:01] *** Joins: hussam (~hussam@user/hussam)
[01:41:45] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[01:41:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:42:00] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[01:42:01] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[01:42:03] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[01:42:06] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[01:42:06] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:42:09] *** Joins: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e)
[01:42:10] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[01:42:20] *** Quits: strajder (~strajder@user/strajder) (Quit: later)
[01:42:34] *** Joins: Charadon (~Charadon@155.138.164.183)
[01:43:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[01:44:06] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[01:44:06] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[01:44:06] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[01:44:07] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[01:44:08] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[01:44:35] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:44:49] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:44:59] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:45:03] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[01:45:17] *** Joins: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e)
[01:45:22] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[01:45:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:45:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:45:31] *** Joins: wroathe (~wroathe@user/wroathe)
[01:45:41] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[01:45:51] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:46:32] *** Joins: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718)
[01:47:36] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[01:48:02] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:48:12] *** Joins: psydroid (~psydroid@user/psydroid)
[01:52:01] *** Quits: mahmutov (~mahmutov@37.155.28.181) (Ping timeout: 256 seconds)
[01:53:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[01:53:29] *** Joins: echo (uid504326@user/echosmile)
[01:54:20] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:54:56] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:add1:9b6a:adbc:6291) (Ping timeout: 245 seconds)
[01:55:51] *** Quits: MatthiasG2 (~matthias@i6DFA0138.versanet.de) (Ping timeout: 250 seconds)
[01:56:16] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:56:17] *** Quits: carlos_ (~carlos@2804:39b0:1db:1f00::50c) (Ping timeout: 250 seconds)
[01:56:24] *** Joins: NRK (~nrkmatrix@2001:470:69fc:105::4e30)
[01:56:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:56:51] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[01:57:18] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[01:57:26] *** Joins: AmR (~AmREiSa@156.207.136.200)
[01:59:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:01:29] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:01:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:01:43] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[02:03:13] *** Quits: Akuli (~Akuli@213.216.211.88) (Quit: Akuli)
[02:04:15] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[02:05:21] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 245 seconds)
[02:05:45] *** Joins: Roman[m]1 (~wrongt@2001:470:69fc:105::341e)
[02:06:05] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[02:07:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:07:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:07:06] *** Joins: wroathe (~wroathe@user/wroathe)
[02:11:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:14:17] *** Joins: rcf (rcf@sdf.org)
[02:16:59] <nhartman> I have a long lived thread that I would like to be able to toggle the execution of. Currently I'm doing something similar to this: https://paste.ee/p/UwgsV
[02:17:28] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:18:00] <nhartman> Is there a better synchronization mechanism available?
[02:18:34] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[02:18:59] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[02:20:20] <cuppajoe> I am finding bit manipulation to be quite a challenging topic, not the concepts, but solving problems with them. Is there any advice on how to get better?
[02:20:50] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 252 seconds)
[02:22:09] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[02:24:27] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[02:24:53] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[02:27:10] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:30:13] *** Quits: APic (~apic@apic.name) (Ping timeout: 256 seconds)
[02:30:16] <nitrix> Practice.
[02:30:31] *** Quits: Alhazred (~Alhazred@86.106.74.43) (Ping timeout: 250 seconds)
[02:31:56] *** Joins: APic (apic@apic.name)
[02:32:00] <nitrix> Being relaxed, good nutrition and quality sleep.
[02:33:49] *** Joins: pizdets_ (~pizdets@183.182.110.216)
[02:34:03] <nitrix> Also spaced repetition (https://en.wikipedia.org/wiki/Spaced_repetition).
[02:34:26] *** Quits: pizdets (~pizdets@183.182.111.120) (Ping timeout: 250 seconds)
[02:35:39] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (Ping timeout: 256 seconds)
[02:37:35] *** Joins: advanced_malform (~nuke@189.5.58.77)
[02:41:03] *** nhartman is now known as SaltHillStroller
[02:41:29] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:45:33] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:45:52] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[02:46:44] *** Joins: bixo (~bixo@190.200.253.127)
[02:48:36] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 276 seconds)
[02:51:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:53:57] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[02:56:13] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:57:27] *** Quits: advanced_malform (~nuke@189.5.58.77) (Quit: Leaving.)
[03:02:32] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:11:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:11:55] *** Joins: Archetypic` (~Archetypi@072-182-154-233.res.spectrum.com)
[03:12:59] *** Joins: advanced_malform (~nuke@189.5.58.77)
[03:14:56] <Archetypic`> Hello, how do I adjust the for loop to operate on all arguments? https://bpa.st/FOLA
[03:15:04] *** Quits: Archetypic` (~Archetypi@072-182-154-233.res.spectrum.com) (Remote host closed the connection)
[03:16:01] *** Joins: Alhazred (~Alhazred@86.106.74.43)
[03:16:13] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[03:16:18] *** Joins: Archetypic (~archetypi@072-182-154-233.res.spectrum.com)
[03:19:31] *** Quits: Archetypic (~archetypi@072-182-154-233.res.spectrum.com) (Client Quit)
[03:20:22] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[03:21:19] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:21:42] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:54] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:f478:d096:1f51:baa8)
[03:23:07] <nitrix> argv[1] is always looking at the 2nd argument. You have `argc` to tell you the argument count.
[03:24:57] <nitrix> You could then nest the loops (e.g. for each argument, for each characters not nul of that argument, etc).
[03:25:31] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[03:29:12] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[03:30:33] *** Quits: advanced_malform (~nuke@189.5.58.77) (Quit: Leaving.)
[03:31:55] *** Joins: zacts (~zacts@user/zacts)
[03:33:47] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 256 seconds)
[03:36:41] <MrFantastik> +1 on spaced repetition
[03:37:45] <caze> +1     on     spaced     repetition
[03:38:04] *** Joins: Nutte35 (~Nutte@43.231.30.192)
[03:38:27] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[03:39:52] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:45:35] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:48:08] *** Parts: cmburn (~Charlie_B@2601:441:4c00:67d:f478:d096:1f51:baa8) ()
[03:49:03] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[03:50:42] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:51:16] *** nuxil_ is now known as nuxil
[03:52:16] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[03:53:44] *** Quits: ZedHedTed (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net) (Quit: leaving)
[03:54:04] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[03:56:48] *** Quits: echo (uid504326@user/echosmile) ()
[03:58:14] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[03:58:40] *** Joins: AmR (~AmREiSa@156.207.136.200)
[03:59:31] *** Parts: AmR (~AmREiSa@156.207.136.200) ()
[03:59:34] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[04:03:08] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Ping timeout: 252 seconds)
[04:03:23] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[04:03:53] *** Joins: crashrep (~crashrep@user/crashrep)
[04:03:57] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:05:58] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:06:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:07:49] *** Joins: Wulf (~Wulf@user/wulf)
[04:12:26] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[04:12:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:12:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:13:10] *** Joins: szutt (~szutt@116.37.2.145)
[04:18:23] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[04:23:54] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:26:14] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[04:33:52] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[04:34:02] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[04:39:26] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[04:39:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[04:45:37] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[04:46:33] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[04:52:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:52:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:52:17] *** Joins: wroathe (~wroathe@user/wroathe)
[04:54:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:56:38] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[04:58:03] *** peace[m] is now known as Elliot[m]
[05:00:08] *** Joins: kish` (~aqua@user/aqua)
[05:02:38] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Ping timeout: 256 seconds)
[05:02:57] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 240 seconds)
[05:03:48] *** Joins: pert (~pert@fsf/member/pert)
[05:05:20] *** Quits: cocalero (~cocalero@200-140-37-88.user3p.brasiltelecom.net.br) (Quit: Going offline, see ya! (www.adiirc.com))
[05:08:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:10:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:10:42] *** Joins: bixo (~bixo@190.200.253.127)
[05:11:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[05:12:18] *** Quits: bixo (~bixo@190.200.253.127) (Remote host closed the connection)
[05:12:43] *** Joins: bixo (~bixo@190.200.253.127)
[05:14:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:15:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:16:14] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Remote host closed the connection)
[05:16:45] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[05:18:28] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[05:18:53] *** Quits: effexzi (uid474242@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:19:00] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[05:19:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[05:19:41] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[05:19:56] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[05:20:21] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[05:24:15] *** Joins: malina (~malina@user/malina)
[05:24:43] *** Quits: alch (~alch@151.38.212.114) (Ping timeout: 250 seconds)
[05:26:30] *** Joins: alch (~alch@151.38.174.182)
[05:26:48] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:26:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[05:28:32] *** Joins: random-nick (~random-ni@87.116.181.150)
[05:29:31] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 245 seconds)
[05:30:04] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[05:31:52] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::f2bf)
[05:32:15] *** Joins: Torr (~Torr@user/torr)
[05:33:02] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[05:33:53] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 252 seconds)
[05:34:04] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-bc02-4f8c-9935-9143.fixed6.kpn.net)
[05:34:29] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:39:01] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-bc02-4f8c-9935-9143.fixed6.kpn.net) (Ping timeout: 256 seconds)
[05:39:42] *** Joins: quartz (~quartz@user/quartz)
[05:46:02] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[05:46:12] *** Joins: vysn (~vysn@user/vysn)
[05:46:24] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 250 seconds)
[05:47:05] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[05:49:45] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[05:49:59] *** Joins: pert (~pert@fsf/member/pert)
[05:50:01] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[05:50:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:54:42] *** Joins: julien (~julien@192-222-140-27.qc.cable.ebox.net)
[05:55:24] <julien> g
[05:57:15] *** Joins: sweetsymph (uid509475@lymington.irccloud.com)
[05:58:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:58:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:58:35] *** Joins: wroathe (~wroathe@user/wroathe)
[05:58:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:59:05] *** Quits: Guest3959 (epony@lz2.eu) (Quit: QUIT)
[05:59:58] *** Joins: Rynn (rynn@gateway/vpn/protonvpn/rynn)
[06:02:23] *** Joins: dsrt^ (~dsrt@128-092-174-141.biz.spectrum.com)
[06:03:03] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[06:03:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:04:29] *** Joins: epony (epony@user/epony)
[06:10:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:13:15] *** Quits: Rynn (rynn@gateway/vpn/protonvpn/rynn) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:13:35] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[06:13:42] *** Joins: Rynn (rynn@gateway/vpn/protonvpn/rynn)
[06:22:49] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::f2bf) (Quit: abducted by aliens)
[06:23:46] *** Quits: julien (~julien@192-222-140-27.qc.cable.ebox.net) (Quit: Leaving)
[06:30:37] *** Joins: pyook (~pyook@user/puke)
[06:31:02] *** Quits: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[06:31:49] *** Quits: jennie (~jennie@user/jennie) (Remote host closed the connection)
[06:33:19] *** Joins: hanzo (uid532183@user/hanzo)
[06:33:39] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:23] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[06:38:43] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[06:42:43] *** Quits: pyook (~pyook@user/puke) (Read error: Connection reset by peer)
[06:42:57] *** Joins: pyook (~pyook@user/puke)
[06:43:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:44:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:45:05] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 250 seconds)
[06:45:28] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[06:48:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:50:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:53:00] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[06:54:32] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:00] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:55:20] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:56:30] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:57:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:01:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:02:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:03:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:04:49] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[07:06:46] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:02] *** Quits: xcm (~xcm@static.90.45.69.159.clients.your-server.de) (Remote host closed the connection)
[07:07:20] *** Joins: xcm (~xcm@user/xcm)
[07:07:39] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[07:09:55] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:11:44] *** Quits: Rynn (rynn@gateway/vpn/protonvpn/rynn) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:11:57] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[07:12:44] *** Joins: ferdna (~ferdna@user/ferdna)
[07:13:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:15:49] *** Joins: crashrep (~crashrep@user/crashrep)
[07:16:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:18:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:18:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:18:55] *** Joins: wroathe (~wroathe@user/wroathe)
[07:20:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:23:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:32:09] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:40:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:40:23] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:41:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:41:14] *** Quits: jx0 (~jx0@199.229.250.138) (Ping timeout: 250 seconds)
[07:42:50] *** Joins: bixo (~bixo@190.200.253.127)
[07:42:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:49:22] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[07:49:55] *** Joins: beencubed (~beencubed@209.131.238.248)
[07:55:29] *** Joins: hinata (~hinata@2409:4042:2486:40e7:111e:957b:4407:f685)
[08:02:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:04:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:04:39] *** Quits: bixo (~bixo@190.200.253.127) (Ping timeout: 256 seconds)
[08:06:37] *** Parts: Soni (~quassel@autistic.space) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[08:06:40] *** Joins: Soni (~quassel@autistic.space)
[08:08:17] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[08:10:42] *** Quits: MrFantastik (~f@2607:f598:bbda:270:af90:c2f0:20b5:e42e) (Ping timeout: 250 seconds)
[08:13:07] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[08:15:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (Quit: Quit)
[08:16:39] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:17:15] *** Joins: raym (~raym@user/raym)
[08:19:06] <tusko> out of fork() malloc() fopen() printf() and sqrt() only fork() fopen() and printf() make system calls, yeah?
[08:20:00] <caze> What does that mean?
[08:20:52] <dave0> tusko: if you're asking if unix has system calls for fork, open, mmap/sbrk, write then yes
[08:21:11] <dave0> sqrt might trap if you have an old cpu without fpu
[08:21:23] <dave0> but that would be rare
[08:21:50] <tusko> Iḿ thinking fork(), fopen(), and printf() definitely make system calls. Iḿ on the fence about malloc(0 but lean towards yes.
[08:21:59] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[08:22:05] <tusko> sqrt() almost certainly not
[08:22:20] <caze> Why?
[08:22:26] <nitrix> That's a long way of asking whether or not malloc needs to make syscalls to allocate memory.
[08:23:31] <nitrix> The memory doesn't come from thin air. On a hosted environment, the implementation needs a way of claiming the memory for its own process.
[08:24:11] <tusko> Yeah, essentially. It seems like malloc would have to make a systemcall to get that memory
[08:24:13] <caze> Unless it's just: void *malloc(size_t n) { return NULL; }
[08:24:33] <NRK> i don't think all malloc calls would make systemcall
[08:24:54] <NRK> if the allocator already has available memory then it's just gonna give from there
[08:25:03] <caze> But I mean, it could also just carve out allocations from a big static object.
[08:25:43] <dave0> traditional unix used sbrk, posix prefers mmap
[08:26:21] <dave0> not sure why it's not automatic like it is with extending the stack
[08:27:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:28:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:29:27] *** Quits: imp (~imp@179-191-215-167.static.sumicity.net.br) (Quit: imp)
[08:31:06] <NRK> is there any popen like function that gives you back two fds/FILEs and takes argv as argument instead of shell escaped string?
[08:34:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[08:36:18] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:39:23] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:42:19] *** Joins: jx0 (~jx0@199.229.250.142)
[08:42:25] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[08:43:11] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 250 seconds)
[08:43:32] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[08:44:26] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:44:46] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:52:17] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:54:03] *** Quits: ominionx (~ominionx@172.58.136.5) (Remote host closed the connection)
[08:55:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:02:13] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:04:23] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[09:04:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:04:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:04:38] *** Joins: wroathe (~wroathe@user/wroathe)
[09:05:18] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[09:06:10] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:08:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:09:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:13:01] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:16:33] <Maxdamantus> NRK: posix_spawn might pretty much do what you want.
[09:17:16] <Maxdamantus> You'll need to create the pipes yourself and pass in the appropriate ends (and close the other ones).
[09:18:58] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:19:21] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[09:19:52] <NRK> hmm, i mean i already have a function that does what i want. im trying to figure out what name to give it.
[09:20:32] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[09:21:43] *** Joins: Guest9017 (~Guest90@181.199.144.102)
[09:23:13] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[09:23:35] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:23:56] *** Quits: alch (~alch@151.38.174.182) (Read error: Connection reset by peer)
[09:24:39] <NRK> .oO( spawn seems liek a good name! )
[09:24:49] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:25:50] *** Joins: alch (~alch@151.38.194.181)
[09:27:26] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:27:40] <Maxdamantus> You should probably just use posix_spawn anyway. It will probably be more performant unless you implemented your one with vfork. If you wrote your function on top of `popen` it will create an unnecessary shell.
[09:28:33] <NRK> no i didn't use popen, the shell escape is why i switched to using execv.
[09:29:01] <NRK> and thus my function was no longer similar to the popen interface, so i was looking for new name.
[09:29:31] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[09:31:42] *** Joins: kts (~kts@103.73.237.94)
[09:34:47] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-bc02-4f8c-9935-9143.fixed6.kpn.net)
[09:36:50] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:37:46] *** Quits: Guest9017 (~Guest90@181.199.144.102) (Quit: Client closed)
[09:38:57] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-bc02-4f8c-9935-9143.fixed6.kpn.net) (Ping timeout: 240 seconds)
[09:42:41] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[09:44:46] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:47:29] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[09:54:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[09:54:54] *** Joins: node1 (~hex@user/node1)
[09:54:59] <node1> How to make a user defined data type that can store interger, float and string. For instance it should be like an array but different data type can be stored at any index. Consider a list in a python for real example.
[09:55:15] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:56:11] <sham1> node1: you need some kind of an aggregate structure to implement it as a tagged union
[09:56:20] <sham1> So something like the following
[09:58:37] <sham1> struct value { enum { VALUE_TYPE_INT, VALUE_TYPE_FLOAT, VALUE_TYPE_STRING, } value; union { int integer; float floating; char *string; }; };
[09:58:39] *** Joins: ominionx (~ominionx@172.58.136.5)
[09:58:55] <node1> I tried using this http://codepad.org/UEPmmlvd
[09:59:31] <sham1> Yeah, can't do that
[10:04:59] *** Joins: masoudd (~masoudd@user/masoudd)
[10:06:13] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:15:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:16:18] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:46] *** Joins: vysn (~vysn@user/vysn)
[10:21:07] *** Joins: zdctg[m] (~zdctgmatr@2001:470:69fc:105::1:8a86)
[10:22:24] <node1> sham1, Your code does not workout.
[10:22:30] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[10:27:39] <caze> node1: You need an array of them.
[10:28:45] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[10:29:21] <node1> caze, What's wrong here http://codepad.org/DUCU2s2R
[10:30:09] <caze> { 1,"test"}, {"checking",0}
[10:30:16] <caze> One of these things is not like the other.
[10:30:23] <sham1> Also you're doing it wrong
[10:31:08] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[10:31:22] *** Joins: de-facto (~de-facto@user/de-facto)
[10:31:41] <node1> sham1, Could you please correct it?
[10:31:43] <caze> node1: http://codepad.org/NP7k54yo
[10:34:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:37:11] <node1> Okay thanks for the idea.
[10:37:28] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[10:40:27] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[10:41:02] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Max SendQ exceeded)
[10:41:23] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[10:43:18] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[10:45:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:45:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:46:05] <NRK> node1: here's a more elaborate example https://dpaste.com/2Z6QRCJSK
[10:46:55] *** Joins: node1 (~hex@user/node1)
[10:47:56] <node1> caze, It looks it does not store on the memory. Apart it gives warrning messsages related to type cast.
[10:49:02] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (Ping timeout: 252 seconds)
[10:49:15] <NRK> what exactly are you doing btw?
[10:50:35] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:50:35] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[10:51:15] *** Joins: dld (~davidlowr@73.61.8.20)
[10:51:25] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[10:52:03] *** Quits: Alhazred (~Alhazred@86.106.74.43) (Ping timeout: 256 seconds)
[10:52:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[10:52:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:53:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Ping timeout: 240 seconds)
[10:53:39] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[10:54:10] <node1> I'm just trying to make `Heterogeneous array implementation` For instance it should be like an array but different data type can be stored at any index. Consider a list in a python for real example.
[10:55:20] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[10:55:52] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[10:55:52] *** Quits: merced (merced@user/merced) (*.net *.split)
[10:55:52] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[10:55:52] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[10:55:52] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (*.net *.split)
[10:55:52] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[10:55:52] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[10:55:52] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[10:55:52] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (*.net *.split)
[10:55:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[10:55:52] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[10:55:52] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[10:55:52] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[10:55:52] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[10:55:52] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[10:55:52] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[10:55:52] *** Quits: Viewday11 (~Viewday@61.141.126.127) (*.net *.split)
[10:55:52] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[10:55:52] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (*.net *.split)
[10:55:52] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[10:55:52] *** Quits: robyn (~robyndrak@user/robyndrake) (*.net *.split)
[10:55:52] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[10:55:52] *** Quits: silkworks (~silkworks@ctrl-c.club) (*.net *.split)
[10:55:52] *** Quits: nathanael (~nathanael@user/nathanael) (*.net *.split)
[10:55:52] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[10:55:52] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[10:55:52] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[10:55:52] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (*.net *.split)
[10:55:52] *** Quits: sokan (~sokan@85.73.227.251) (*.net *.split)
[10:55:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:55:52] *** Quits: tbcr (~tbcr@107.13.189.161) (*.net *.split)
[10:55:52] *** Quits: towel (~towel@user/towel) (*.net *.split)
[10:55:52] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[10:55:52] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[10:55:52] *** Quits: MrC (~Ben@mrbenc.net) (*.net *.split)
[10:55:52] *** Quits: constxd (~brad@142.167.170.88) (*.net *.split)
[10:55:52] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[10:55:52] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (*.net *.split)
[10:55:52] *** Quits: ai (~ai@shell.k4be.pl) (*.net *.split)
[10:55:52] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[10:55:52] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[10:55:52] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[10:55:52] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[10:55:52] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (*.net *.split)
[10:55:52] *** Quits: sr20det (~sr20det@user/sr20det) (*.net *.split)
[10:55:52] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[10:55:52] *** Quits: reset (~reset@user/reset) (*.net *.split)
[10:55:52] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[10:55:52] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[10:55:52] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[10:55:52] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[10:55:52] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[10:55:52] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[10:55:52] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[10:55:52] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[10:55:52] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[10:55:52] *** Quits: cyphics (~cyphix@user/cyphics) (*.net *.split)
[10:55:52] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:55:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[10:55:52] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[10:55:52] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[10:55:52] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[10:55:52] *** Quits: pi0 (~default@23.95.234.10) (*.net *.split)
[10:55:52] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[10:55:52] *** Quits: Tordek (~tordek@triton.blinkenshell.org) (*.net *.split)
[10:55:52] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[10:55:52] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[10:55:52] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[10:55:52] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[10:55:52] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[10:55:52] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[10:55:52] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[10:55:52] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[10:55:52] *** Quits: eletrotupi (~eletrotup@user/eletrotupi) (*.net *.split)
[10:55:52] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[10:55:52] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[10:55:52] *** Quits: van (~van@46.23.94.214) (*.net *.split)
[10:55:52] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[10:55:52] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[10:55:52] *** Quits: les_ (~whome@user/les) (*.net *.split)
[10:55:52] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[10:55:52] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[10:55:52] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[10:55:52] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[10:55:52] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[10:55:52] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[10:55:52] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[10:55:52] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[10:55:52] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[10:55:52] *** Quits: rahl (~rahl@otaku.sdf.org) (*.net *.split)
[10:55:52] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[10:55:53] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[10:55:53] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[10:56:01] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[10:56:57] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:58:04] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[10:58:04] *** Joins: Betal (~Betal@user/betal)
[10:58:04] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[10:58:04] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:58:04] *** Joins: orthoplex64 (~crm@70.120.0.94)
[10:58:04] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[10:58:04] *** Joins: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[10:58:04] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[10:58:04] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[10:58:04] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[10:58:04] *** Joins: abraham (~abraham@143.244.185.86)
[10:58:04] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[10:58:04] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:58:04] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[10:58:04] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[10:58:04] *** Joins: Trashlord (~trash@user/trashlord)
[10:58:04] *** Joins: Viewday11 (~Viewday@61.141.126.127)
[10:58:04] *** Joins: cust_ (amaama@blackbox.amaama.org)
[10:58:04] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[10:58:04] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[10:58:04] *** Joins: robyn (~robyndrak@user/robyndrake)
[10:58:04] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[10:58:04] *** Joins: silkworks (~silkworks@ctrl-c.club)
[10:58:04] *** Joins: nathanael (~nathanael@user/nathanael)
[10:58:04] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[10:58:04] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[10:58:04] *** Joins: lowin (~lowin@user/lowin)
[10:58:04] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[10:58:04] *** Joins: sokan (~sokan@85.73.227.251)
[10:58:04] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:58:04] *** Joins: tbcr (~tbcr@107.13.189.161)
[10:58:04] *** Joins: towel (~towel@user/towel)
[10:58:04] *** Joins: gonogo (~gonogo@167.88.62.87)
[10:58:04] *** Joins: dansan (~daniel@75.81.148.51)
[10:58:04] *** Joins: MrC (~Ben@mrbenc.net)
[10:58:04] *** Joins: constxd (~brad@142.167.170.88)
[10:58:04] *** Joins: cursey (~cursey@user/cursey)
[10:58:04] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[10:58:04] *** Joins: ai (~ai@shell.k4be.pl)
[10:58:04] *** Joins: haliucinas (~haliucina@5.20.153.21)
[10:58:04] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[10:58:04] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[10:58:04] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[10:58:04] *** Joins: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net)
[10:58:04] *** Joins: sr20det (~sr20det@user/sr20det)
[10:58:04] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[10:58:04] *** Joins: reset (~reset@user/reset)
[10:58:04] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[10:58:04] *** Joins: justGhost (~justache@user/justache)
[10:58:04] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[10:58:04] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[10:58:04] *** Joins: cehteh (~ct@git.pipapo.org)
[10:58:04] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[10:58:04] *** Joins: sunyour (~sunyour@129.226.182.99)
[10:58:04] *** Joins: sebito91 (~sborza@45.55.74.66)
[10:58:04] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[10:58:04] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[10:58:04] *** Joins: cyphics (~cyphix@user/cyphics)
[10:58:04] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:58:04] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[10:58:04] *** Joins: gce108 (~gce@user/gce108)
[10:58:04] *** Joins: Zenton (~user@user/zenton)
[10:58:04] *** Joins: pi0 (~default@23.95.234.10)
[10:58:04] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[10:58:04] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[10:58:04] *** Joins: [R] (~rs@genoce.org)
[10:58:04] *** Joins: brdb (~alarm@24.61.226.255)
[10:58:04] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[10:58:04] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[10:58:04] *** Joins: blinky42 (~quassel@user/blinky42)
[10:58:04] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[10:58:04] *** Joins: Spydar007 (~spydar007@user/spydar007)
[10:58:04] *** Joins: gjvc (~gjvc@user/gjvc)
[10:58:04] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[10:58:04] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[10:58:04] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:58:04] *** Joins: n1000 (~n1000@user/n1000)
[10:58:04] *** Joins: van (~van@46.23.94.214)
[10:58:04] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[10:58:04] *** Joins: andjjj23_ (~irc@107.170.228.47)
[10:58:04] *** Joins: les_ (~whome@user/les)
[10:58:04] *** Joins: noonien (~noonien@user/noonien)
[10:58:04] *** Joins: corelax (~corelax@user/corelax)
[10:58:04] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[10:58:04] *** Joins: aesin_ (~aesin@81.211.127.107)
[10:58:04] *** Joins: Phil-Work (~phil@62.3.100.20)
[10:58:04] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[10:58:04] *** Joins: koollman (~samson_t@user/koollman)
[10:58:04] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[10:58:04] *** Joins: rahl (~rahl@otaku.sdf.org)
[10:58:04] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[10:58:04] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[10:58:04] *** Joins: flynn (~mcbloch@user/flynn)
[10:58:04] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[10:58:04] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[10:58:04] *** Joins: bjs (sid190364@user/bjs)
[10:58:04] *** Joins: merced (merced@user/merced)
[10:58:08] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Max SendQ exceeded)
[10:59:11] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 256 seconds)
[10:59:26] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[10:59:27] <NRK> are you expecting something like this to work? `v[0] = "something"; v[1] = 50;` ?
[10:59:36] <node1> yes
[10:59:50] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:59:55] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[11:00:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:00:19] <NRK> yeah, that's not gonna happen in C
[11:00:36] <dave0> v[0].value = VALUE_TYPE_STRING; v[0].string = "something"; v[1].value = VALUE_TYPE_INT; v[1].integer = 50;
[11:00:39] *** Joins: teelrabbit (~teelrabbi@206.214.239.17)
[11:00:40] <node1> Not using with user defined data type either?
[11:00:52] <teelrabbit> anyone here into lkm dev?
[11:00:53] *** Joins: Xatenev (~xatenev@2a02:8108:9640:74d4:2f48:5160:5148:492c)
[11:00:56] *** Quits: Xatenev (~xatenev@2a02:8108:9640:74d4:2f48:5160:5148:492c) (Changing host)
[11:00:56] *** Joins: Xatenev (~xatenev@user/xatenev)
[11:01:07] <Xatenev> in (a = b)->c(), is the assignment a = b sequenced before the call to c() ?
[11:01:15] <Xatenev> and can you show me the relevant part in the standard for this?
[11:01:35] <dave0> someone said the standard... where's fizzie ?
[11:01:45] <Xatenev> I summon fizzie
[11:01:47] * Xatenev sacrifices sheep
[11:02:04] <Xatenev> I summon dorp too, but I think he wont listen to me :(
[11:02:44] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[11:02:53] <teelrabbit> i gues not
[11:04:13] <node1> dave0, That can be done using struct. But how do we check the data type in c? on run time?
[11:04:41] <Xatenev> maybe `Between the evaluation of a full expression and the next full expression to be evaluated. The following are full expressions: an initializer that is not part of a compound literal` in annex c is somehow related but probably not
[11:04:44] <teelrabbit> anyone have a solution for not being able to find my kallsym.h file
[11:04:52] <teelrabbit> or even like init.h
[11:05:10] <teelrabbit> they simply dont exist in my /include/linux
[11:05:16] <dave0> node1: you could   switch(v[0].value) { case VALUE_TYPE_STRING: printf("%s",v[0].string); break; case VALUE_TYPE_INTEGER: printf("%d",v[0].integer); break; }
[11:06:22] <NRK> node1: you manually encode the type in there as well. see the example i posted earlier.
[11:06:25] <NRK> ,recall NRK dpaste
[11:06:25] <candide> [20m20s ago] <N﻿RK> node1: here's a more elaborate example https://dpaste.com/2Z6QRCJSK
[11:06:33] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[11:06:54] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-38-76.pa.qld.optusnet.com.au)
[11:07:06] <NRK> .oO( candide is down again... )
[11:07:21] <dave0> hi candide
[11:07:31] <node1> Thank's let have look on it.
[11:07:32] <candide> Hola d﻿ave0
[11:08:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:08:29] <NRK> .oO( ...or just being laggy )
[11:09:08] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:09:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:10:16] <NRK> also, i suspect you should actually learn some basics of C first.
[11:10:25] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[11:11:01] <masoudd> teelrabbit, Ask in your distro channel. Probably need kernel-headers package or something like that
[11:12:13] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:16:51] <Xatenev> ok i answered my question ,it is sequenced
[11:16:54] <Xatenev> due to https://port70.net/~nsz/c/c11/n1570.html#6.5.2.2p10
[11:18:46] *** Joins: hex_ (~hex@43.230.42.213)
[11:20:13] *** Joins: Rounin (~david@84.212.130.215)
[11:20:17] *** Quits: node1 (~hex@user/node1) (Ping timeout: 240 seconds)
[11:22:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:23:32] <pragma-> The bot's `hi` command has a built-in randomized delay. The `recall` command does not. If there was any lag from the `recall` command, it was on your end. On my end the output appeared instantly.
[11:24:36] <NRK> ooh? could be i guess.
[11:25:09] <NRK> i know about the "hi" command delay, it's simulating conversation delay or something like that.
[11:26:29] *** Quits: hex_ (~hex@43.230.42.213) (Quit: Leaving)
[11:26:37] *** Quits: foul_owl (~kerry@94.140.8.105) (Ping timeout: 256 seconds)
[11:27:45] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:27:54] *** Joins: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net)
[11:28:06] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:29:10] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl)
[11:32:21] *** Joins: the_lanetly_052 (~the_lanet@194.135.155.95)
[11:33:02] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 240 seconds)
[11:36:22] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[11:36:29] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[11:37:13] *** Quits: teelrabbit (~teelrabbi@206.214.239.17) (Remote host closed the connection)
[11:37:37] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[11:39:12] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[11:39:23] *** Quits: the_lanetly_052 (~the_lanet@194.135.155.95) (Remote host closed the connection)
[11:41:16] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:42:27] *** Joins: gnoo (gnoo@user/gnoo)
[11:42:59] *** Quits: Trigraph (~dev@68-251-63-205.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[11:45:34] *** Joins: carlavilla (~carlavill@188.26.219.45)
[11:46:17] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:44] *** Parts: Xatenev (~xatenev@user/xatenev) ()
[11:50:25] *** Quits: carlavilla (~carlavill@188.26.219.45) (Ping timeout: 256 seconds)
[11:54:47] *** Emet-Selch is now known as Azem
[11:54:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:05:37] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:06:16] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[12:06:40] *** Joins: mrig (~mrig@user/mrig)
[12:07:36] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[12:08:52] *** Quits: sweetsymph (uid509475@lymington.irccloud.com) ()
[12:10:00] *** Joins: sweetsymph (uid509475@lymington.irccloud.com)
[12:10:01] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[12:14:54] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:18:31] *** Quits: ominionx (~ominionx@172.58.136.5) (Ping timeout: 256 seconds)
[12:19:34] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[12:19:43] *** Joins: ominionx (~ominionx@172.58.136.5)
[12:19:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:24:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[12:27:55] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[12:29:13] *** Joins: jenkins (~jenkins@user/jenkins)
[12:30:06] *** Quits: hinata (~hinata@2409:4042:2486:40e7:111e:957b:4407:f685) (Quit: Leaving)
[12:31:44] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:32:06] *** Quits: Nutte35 (~Nutte@43.231.30.192) (Remote host closed the connection)
[12:33:59] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:36:53] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[12:37:05] *** Joins: Guest64 (~Guest64@net-93-144-89-157.cust.vodafonedsl.it)
[12:37:22] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[12:37:45] *** Joins: noose (~noose@user/noose)
[12:38:21] *** Quits: ominionx (~ominionx@172.58.136.5) (Ping timeout: 256 seconds)
[12:38:50] *** Joins: ominionx (~ominionx@172.58.136.5)
[12:41:05] *** Quits: lewisje (~lewisje@72.49.207.113) (Quit: Leaving)
[12:41:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:43:15] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:50:38] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:51:07] *** Joins: Klinda (~superleag@user/klinda)
[12:52:53] *** Joins: xa0s (~xa0s@mab.sdf.org)
[12:55:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:56:32] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:02:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:08:57] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-38-76.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[13:09:12] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-27-229.pa.qld.optusnet.com.au)
[13:09:31] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:06] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:44] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:16:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:17:20] *** Joins: tmpm697 (~tmpm697@171.224.178.134)
[13:22:16] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[13:22:32] *** Joins: node1 (~hex@user/node1)
[13:23:09] <node1> NRK, Thank you. Yes i will go throught the basics again.
[13:23:13] *** Quits: node1 (~hex@user/node1) (Remote host closed the connection)
[13:23:55] *** Quits: vboykox (~user@95.134.14.76) (Ping timeout: 256 seconds)
[13:23:57] *** Quits: alch (~alch@151.38.194.181) (Ping timeout: 240 seconds)
[13:25:38] *** Joins: vboykox (~user@69-46-134-95.pool.ukrtel.net)
[13:26:11] *** Joins: alch (~alch@151.36.222.116)
[13:31:43] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[13:32:05] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:33:36] *** Joins: hinata (~hinata@2409:4042:2486:40e7:111e:957b:4407:f685)
[13:35:29] *** Joins: kts_ (~kts@103.73.237.48)
[13:36:23] *** Quits: kts (~kts@103.73.237.94) (Ping timeout: 256 seconds)
[13:36:33] *** Quits: kts_ (~kts@103.73.237.48) (Client Quit)
[13:38:49] *** Joins: bnchs (~bnchs@196.65.49.136)
[13:41:20] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[13:42:27] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[13:42:41] <bnchs> why do i get an error everytime i run a program normally, but not in gdb
[13:42:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[13:43:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:44:36] <sham1> Hard to say
[13:45:16] <bnchs> i mean a segfault, when running in gdb without breakpoints or one-by-one execution, it gets a segfault
[13:45:37] <bnchs> the structure gets corrupted, even though i haven't written to it
[13:47:12] *** Joins: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk)
[13:47:45] <smallville7123> bnchs: probably some timing/race issue in the code
[13:48:48] <bnchs> the structure had a function pointer and the code executed that in a while loop
[13:48:52] <smallville7123> gdb executes slower and thus some sensitive timing/race issues would (appear) to fix themselves due to the slow execution
[13:49:15] <smallville7123> (entirely depends on the timing/race issues tho)
[13:49:54] <smallville7123> another cause might be optimization
[13:50:19] <smallville7123> assuming you for example run -O0 for gdb and -O2 for normal
[13:50:32] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 252 seconds)
[13:50:58] <smallville7123> tho as sham1 sais, it could be anything
[13:51:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:53:05] <smallville7123> tho common causes for memory corruption are writing past the end of an allocation
[13:53:23] <smallville7123> and accidental use-after-free
[13:53:25] <bnchs> compiled with address sanitizer, said it was a stack buffer overflow (makes sense, since the gdb frame were all corrupt)
[13:53:34] <smallville7123> yea
[13:53:43] <sham1> Were you recursing?
[13:53:57] <smallville7123> also buffer underflow (is?) possible as well
[13:54:08] <bnchs> yes
[13:55:18] <bnchs> i might have written more data to a buffer which corrupt the stack and stack variables
[13:56:17] <smallville7123> tho there are cases where asan may fail to find a buffer overflow
[13:56:43] <smallville7123> or rather may fail to detect a buffer overflow
[13:56:46] *** Joins: Elladan (~elladan@user/elladan)
[13:58:23] <smallville7123> (i think)
[13:58:37] <smallville7123> (im not sure)
[13:58:49] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[13:59:17] <smallville7123> anyway, im not sure how i should handle expanding a function in the case where the function name is a function-like macro, and where the function name is not a function-like macro
[14:00:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01)
[14:00:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01) (Changing host)
[14:00:12] *** Joins: skapata (~Skapata@user/skapata)
[14:03:01] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:03:16] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:05:45] <fizzie> ,cc -fsanitize=address char buf1[10] = "", buf2[10] = ""; ptrdiff_t d = buf2 - buf1; buf1[d] = 'x'; printf("buf1[%td] = %d", d, buf1[d]); // technically a buffer overflow, not caught by ASan
[14:05:47] <candide> fizzie: buf1[32] = 120
[14:06:22] <fizzie> It'll generally catch everything where you write *just* past the end (or beginning) of an entire object, since that's where it puts its redzone bytes in.
[14:07:57] *** Joins: ko (~i.am@user/marlboro)
[14:09:57] <smallville7123> fizzie: yea :)
[14:10:48] <smallville7123> those and others are rare but possible
[14:12:10] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[14:12:31] <dave0> %td
[14:12:34] <dave0> crazytalk
[14:12:55] <dave0> %zu more crazytalk
[14:17:34] *** Joins: SCP-1471 (~NOX@59.red-83-32-35.dynamicip.rima-tde.net)
[14:17:34] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:f143:90e7:e058:c617)
[14:17:47] *** Parts: SCP-1471 (~NOX@59.red-83-32-35.dynamicip.rima-tde.net) ()
[14:19:11] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Quit: leaving)
[14:19:13] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-27-229.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[14:19:13] *** Joins: shivesh (~shivesh@user/shivesh)
[14:19:26] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[14:19:36] <sham1> Nothing mad about %td or %zu
[14:20:18] <fizzie> ,cc -fsanitize=address struct { int arr[10]; int always_zero; } big_thing = {0}; for (int i = 0; i <= /* whoops */ 10; i++) big_thing.arr[i] = i; printf("always_zero = %d", big_thing.always_zero); // maybe a more realistic case
[14:20:19] <candide> fizzie: always_zero = 10
[14:21:01] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[14:23:53] <NRK> meh. most people use macro for getting array len.
[14:24:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:24:32] <NRK> and using `<` in loop is basically muscle memory. `<=` would be odd cases.
[14:24:52] <sham1> If only iterators
[14:25:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:25:16] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Quit: leaving)
[14:25:24] <NRK> bloat ✋
[14:25:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:00] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[14:26:52] *** Joins: imp (~imp@179-191-215-167.static.sumicity.net.br)
[14:33:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:21] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:34:46] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:56] <bnchs> i just realized the receive function i used gave me more data than i specified
[14:35:42] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[14:37:02] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[14:40:38] *** Joins: seninha (~seninha@user/seninha)
[14:40:44] *** Joins: marshmallow (~marshmall@user/marshmallow)
[14:41:14] <NRK> after calling `dup2(p[0], 0);` am i supposed to close `p[0]` ?
[14:44:34] <dave0> if you don't want to use it?
[14:45:36] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[14:45:52] <NRK> well im going to be calling exec right after. and afaik pipe() stuff don't have CLOEXEC set.
[14:46:36] <kurahaupo_> NRK: And after checking p[0] != 0 and dup(…) != -1
[14:47:03] *** Quits: marshmallow (~marshmall@user/marshmallow) (Remote host closed the connection)
[14:47:47] *** Joins: marshmallow (~marshmall@94.177.224.11)
[14:47:53] <NRK> hmm, aright.
[14:48:17] <fizzie> I prefer to check p[0] != 0 before the dup2. Not that it matters (dup2(x, x) is a no-op), just feels more right and since you have to check anyway...
[14:48:30] *** Quits: marshmallow (~marshmall@94.177.224.11) (Changing host)
[14:48:30] *** Joins: marshmallow (~marshmall@user/marshmallow)
[14:50:24] <NRK> is it even possible for p[0] to be 0 since p is acquired via pipe() ?
[14:50:57] <fizzie> If file descriptor 0 was closed before calling pipe(), sure.
[14:51:55] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[14:53:20] *** Quits: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk) (Quit: Lost terminal)
[14:53:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:54:28] <bnchs> whats the most harmful thing a C program can do
[14:54:52] <kurahaupo_> bnchs: Be read by a novice programmer
[14:54:52] <bnchs> like memory allocation overcommit
[14:56:15] <bnchs> calloc (1, (size_t) -1)
[14:56:50] <bnchs> one-liner speedrun
[14:57:39] <bnchs> ,cc int *pointer = calloc (1, (size_t) -1);
[14:57:41] <candide> bnchs: [warning: argument 2 value '18446744073709551615' exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] note: in a call to allocation function 'calloc' declared here] no output: pointer = 0x0
[14:59:49] <bnchs> ,cc int *pointer = calloc (1, INT64_MAX-1);
[14:59:51] <candide> bnchs: no output: pointer = 0x0
[15:00:44] *** Joins: mandanguita (~mandangui@139.47.119.61)
[15:01:21] <dave0> ransomware seems to be popular
[15:01:43] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Ping timeout: 256 seconds)
[15:02:02] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[15:02:10] <dave0> oh covertly downloading the entire contents of your iphone or android seems to be in the news
[15:02:26] <dave0> you could make c do that
[15:04:46] *** Joins: aqua (~aqua@user/aqua)
[15:04:48] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:04:49] *** Joins: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a)
[15:05:06] <markand> bnchs, #define true false
[15:05:09] *** Joins: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk)
[15:07:07] *** aqua is now known as kish
[15:07:19] *** kish is now known as kish`
[15:09:31] <kurahaupo_> markand: cc -Dtrue=false -Dfalse=true
[15:09:53] <dave0> true should be all-bits-1
[15:09:57] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 240 seconds)
[15:10:24] <sham1> What, like Forth?
[15:10:37] *** Quits: reset (~reset@user/reset) (Quit: reset)
[15:10:42] <kurahaupo_> dave0: Signed or unsigned?
[15:10:58] <kurahaupo_> IIRC BASIC did that
[15:11:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:12:08] *** Quits: sweetsymph (uid509475@lymington.irccloud.com) ()
[15:13:35] *** Joins: gnx (~heh@yep.i.am.1337.cx)
[15:14:03] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[15:15:59] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[15:17:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:20:19] <markand> kurahaupo_, :)
[15:20:21] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[15:23:18] <dave0> x86 simd stuff uses all-bits-one
[15:23:58] *** Quits: Guest64 (~Guest64@net-93-144-89-157.cust.vodafonedsl.it) (Quit: Client closed)
[15:24:19] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:25:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:25:39] *** Quits: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk) (Quit: Lost terminal)
[15:27:58] <fizzie> True should be all-bits-1 so that you can express `z = c ? x : y;` as `z = y ^ (x^y)&c;` or some other equivalent formulation.
[15:28:07] *** Joins: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk)
[15:29:18] <dave0> you could do   if(a > 10) a += 5;  as   a += (a > 10) & 5;
[15:29:36] <dave0> branchless! which is the style at the time
[15:29:59] <bnchs> you can fit more number in ternary than binary
[15:30:05] *** Joins: eeerik9_ (~eeerik9@85-135-137-113.adsl.slovanet.sk)
[15:30:07] *** Quits: eeerik9_ (~eeerik9@85-135-137-113.adsl.slovanet.sk) (Client Quit)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:34] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[15:31:05] *** Joins: csrf (~csrf@user/csrf)
[15:31:35] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:32:16] <kurahaupo_> fizzie: z = x ^ (x^y)&-c
[15:32:36] *** Joins: Emet-Selch (~haise01@user/haise01)
[15:32:52] <scaramanga> din't true used to be all 1's on pascal?
[15:32:54] *** Emet-Selch is now known as haise01
[15:33:29] <kurahaupo_> scaramanga: Pascal didn't treat bool as an integer
[15:34:00] <kurahaupo_> At least, standard Pascal didn't.
[15:34:53] <dave0> can the robot output assembly like godbolt?
[15:35:10] <dave0> i want to see what it does for   -(a > 10) & 5
[15:35:43] <fizzie> I had a DIY ,sh line for that, because without some mangling the assembly output from Clang/GCC isn't really IRC-friendly.
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:10] <sham1> pragma- should just include that as a command tbh
[15:36:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:54] <sham1> It's like godbolt but IRC
[15:37:11] <dave0> i did it on godbolt with -O3 and it gave    xor eax,eax ; cmp edi,10 ; setg al ; neg eax ; and eax,5
[15:37:22] <dave0> pretty tight code
[15:38:08] <fizzie> ,sh echo 'int f(int a) { a += (a > 10) & 5; return a; }' | gcc -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'
[15:38:09] <candide> fizzie: f: 	xorl	%eax, %eax 	cmpl	$10, %edi 	setg	%al 	addl	%edi, %eax 	ret
[15:38:35] <fizzie> Whoops, forgot the -.
[15:38:42] <NRK> dave0: a += 5 * (a > 10);
[15:38:48] <NRK> .oO( i think that works! )
[15:38:57] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:39:16] <dave0> NRK: ah it would, but would the code be as tight?
[15:39:19] <fizzie> ,sh echo 'int f(int a) { a += (a > 10) * 5; return a; }' | gcc -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'  # no mul
[15:39:20] <candide> fizzie: f: 	movl	%edi, %eax 	leal	5(%rdi), %edx 	cmpl	$10, %edi 	cmovg	%edx, %eax 	ret
[15:39:26] <dave0> tighter!
[15:39:38] <NRK> ,cc a = 11; a += 5 * (a > 10);
[15:39:39] <candide> NRK: error: 'a' undeclared
[15:41:28] <dave0> ,sh echo 'int f(int a) { if(a > 10) a += 5; return a; }' | gcc -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'
[15:41:29] <candide> dave0: Same output.
[15:41:42] <dave0> oh wow ok
[15:41:49] <dave0> branchless++
[15:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[15:43:28] <NRK> has the robot outputted my thing yet? or is it jsut me lagging?
[15:43:43] <pragma-> dave0: the robot runs the program within a gdb debugger instance and provides the gdb() function which lets you send any command to the debugger. you can use `gdb("disas <func>");` to disassemble <func>
[15:43:50] <pragma-> NRK: it output it immediately.
[15:43:50] <dave0> NRK: it complained that 'a' undeclared
[15:44:04] <sham1> In this case it's showing the benefits of branching and the fact that doing it can get you the same stuff while being more maintainable. Sufficiently smart compiler and all that
[15:44:15] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:44:15] <sham1> NRK: it's probably just Matrix being slow
[15:45:43] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31)
[15:45:53] <pragma-> dave0: but as fizzie says, it's quite verbose and often requires click a paste link
[15:46:02] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[15:46:18] <NRK> dang, candide has no implicit ints :(
[15:46:20] <pragma-> the bot also has sanitizers enabled by default, which adds quite a few instructions
[15:47:02] <NRK> yeah, for some reason im seeing candide's output really late
[15:47:09] <NRK> dave0: https://godbolt.org/z/6dx4Mr4Mo
[15:47:15] <libh> I didn't know previously that #define would default to int and you have to specify long long if you wanted that. like #define KILOBYTE 1024 * 1024 requires ULL at the end if you want unsigned long long, otherwise it's just an int.
[15:47:24] <supakeen> the networks have been tremulous with many splits etc
[15:47:31] <supakeen> it wouldn't surprise me too much if there's some delay somewhere :)
[15:47:36] <fizzie> I don't think `a = 11;` has ever been an implicit declaration, not even in C89.
[15:47:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:47:56] <dave0> NRK: pretty good code
[15:48:07] <fizzie> `auto a = 11;` would have been an implicit int in C89 though.
[15:48:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[15:48:26] <dave0> signed a = 11;
[15:48:35] <libh> Am I right with what I posted?
[15:48:55] <fizzie> libh: It's not nothing to do with #define specifically, but sure.
[15:49:15] <fizzie> The type of the integer literal `1024` is int, so `1024 * 1024` is an int as well.
[15:49:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[15:49:34] <sham1> Well, 1024 * 1024 isn't a kilobyte but a mebibyte, and yeah, it has nothing to do with being a macro
[15:49:41] <libh> I was trying to allocate several gigabytes with malloc, gcc warned me over integer overflow unless I put ULL in the #define. I'm still experimenting with C right now.
[15:50:26] <bnchs> why gigabytes?
[15:50:40] <libh> Just experimenting like I said. I got 12 gigabytes of memory, so plenty to spare.
[15:51:01] <bnchs> yes but i'm pretty sure theres a memory per process limit
[15:51:13] <libh> Not on 64 bit I don't think.
[15:51:13] <fizzie> The preprocessor just replaces tokens; you'd have the same problem if you wrote the expression directly in.
[15:51:23] <clarity> The other day I had to kill an instance of xterm that used 28 gigabytes of ram -_-
[15:51:38] <sham1> Something something memory overcommitting something
[15:51:41] <fizzie> ,cc unsigned long long not_two_gigs = 2 * 1024 * 1024 * 1024;
[15:51:43] <candide> fizzie: [warning: integer overflow in expression of type 'int' results in '-2147483648' [-Woverflow]] no output: not_two_gigs = 18446744071562067968
[15:51:44] <bnchs> the kernel has safeguards that prevent processes from allocating too much memory
[15:51:58] <bnchs> such as the OOM killer
[15:52:00] <caze> "the kernel"
[15:52:09] <supakeen> "kernel sanders"
[15:52:11] <sham1> Yeah, just the one
[15:52:29] <clarity> the oom killer wouldn't be necessary if processes couln't allocate too much memory
[15:52:36] <caze> There is at least one kernel that just lets you allocate as much memory as you want, even if it knows it can't honor it.
[15:52:37] <libh> candide, yeah. That's the warning I was getting if I didn't add ULL to my define.
[15:52:39] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:52:43] <candide> l﻿ibh, But of course.
[15:52:45] <kurahaupo_> cousin of orbital saunders and belt sunders
[15:52:54] <libh> I'm on windows right now if that makes a difference.
[15:52:57] <bnchs> modern distributions have OOM killer disabled, so the entire system freezes when the kernel can't find enough memory
[15:53:12] <NRK> fizzie: not even pre-standard?
[15:53:55] <libh> This is what I did to stop getting integer overflow warnings, is there anything really damning wrong with this? https://paste.debian.net/hidden/4fe9a791/
[15:54:02] *** Quits: pyook (~pyook@user/puke) ()
[15:54:07] <libh> I put in scanf to pause the program.
[15:54:26] <kurahaupo_> OOM killer is to compensate for over commit. If you set the OC ratio to 1, there's nothing to trigger the OOM killer
[15:54:53] <bnchs> windows default memory per process limit is 2 GB regardless if it's 32 or 64 bits
[15:55:51] <caze> libh: You forgot to free.
[15:56:20] <bnchs> unless you pass the /LARGEADDRESSAWARE, it's 2 GB regardless if it's 32 or 64 bits*
[15:56:34] <caze> libh: Also, you should use size_t.
[15:56:45] <caze> libh: Your macros can use the previous macros.
[15:57:04] <clarity> Or you can stop using them
[15:58:01] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: Leaving)
[15:58:17] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[15:58:43] *** Quits: eeerik9 (~eeerik9@85-135-137-113.adsl.slovanet.sk) (Quit: Lost terminal)
[15:59:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:59:45] <libh> Directly using the bytes rather than a #define works also
[16:01:02] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:01:34] <dave0> unix doesn't like it if you fill up /tmp either
[16:02:00] <libh> GNU is not unix.
[16:02:18] <bnchs> ./tmp is a ramdisk
[16:02:34] <NRK> not always
[16:02:37] <supakeen> Pfft.
[16:02:41] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[16:02:42] <supakeen> This is #assumption central today isn't it.
[16:02:51] <bnchs> well should it be a ramdisk?
[16:02:55] <NRK> not all distros have /tmp setup as ramdisk
[16:03:20] <NRK> could be. not "should be".
[16:03:41] <bnchs> so the tmp directory is just a directory or mounted partition?
[16:04:18] <supakeen> It could be, yes. Just don't write code that assumes it's going to be in RAM.
[16:05:28] <NRK> don't assume what LOOKS like ram to be actually ram either. since swapping is a thing.
[16:05:46] <supakeen> With my hazy recollection of it all it might not even be called /tmp.
[16:05:53] <bnchs> the BIOS is not a bios right?
[16:05:54] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: Leaving)
[16:08:09] <libh> I think I'm finally demystifying memory management in C. It used to be some big scary thing, now it's not so bad.
[16:09:14] <sham1> Memory management in C: don't worry about it, the libc handles it
[16:09:41] <sham1> One just needs to remember to free any allocated stuff
[16:12:25] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[16:13:48] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[16:13:55] <DarkUranium> sham1: Terms and conditions may apply.
[16:14:18] <bnchs> memory management is 2 easy
[16:14:29] <libh> I should avoid pointers if I can help it.
[16:14:39] <bnchs> if people get filtered by this, theres rust
[16:15:09] <bnchs> libh: i use pointers as a reference to object, including functions that modify a structure
[16:15:25] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[16:16:00] *** Joins: jkotra (~jkotra@223.230.91.108)
[16:17:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[16:18:16] *** Joins: DEFACED (~agent@91.218.173.105)
[16:18:51] *** Joins: dfmaaa1 (~dfmaaa1@49.36.221.10)
[16:18:54] <DEFACED> there
[16:18:56] <dfmaaa1> HELLO
[16:18:59] <dfmaaa1> hello*
[16:19:00] <DEFACED> hi
[16:19:06] <dfmaaa1> are you from assaultcube
[16:19:15] <DEFACED> no
[16:19:27] <dfmaaa1> same usernames
[16:19:54] <dfmaaa1> hahahaha
[16:20:01] <dfmaaa1> how old are you
[16:20:47] <bnchs> >>>#c-offtopic
[16:20:49] <NRK> libh: pointers are fine
[16:21:38] <NRK> allocated pointers are something i try to avoid
[16:21:48] *** Quits: bnchs (~bnchs@196.65.49.136) (Remote host closed the connection)
[16:24:54] *** Joins: bnchs (~bnchs@196.65.49.136)
[16:25:02] <bnchs> don't press esc+shift+ctrl
[16:25:06] <sham1> Libraries shouldn't allocate if they can help it
[16:25:07] *** haise01 is now known as Azem
[16:26:09] *** Quits: Nex8192_ (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[16:26:09] <NRK> ^
[16:26:34] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:26:44] <bnchs> what if you want to make a string
[16:27:06] <NRK> asking the user for an allocator is also pretty nice. though it doesn't seem to be widespread practice.
[16:28:44] <sham1> Either ask the user for an allocator or ask them to allocate N bytes so you as the library can fill it up
[16:29:38] <supakeen> i usually do 'give me two pointers, one for where and one for the size im gonna allocate to'
[16:30:21] *** Quits: dfmaaa1 (~dfmaaa1@49.36.221.10) (Ping timeout: 256 seconds)
[16:30:25] <bnchs> why pointer to size
[16:30:30] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[16:31:11] <sham1> So it can set the size allocated
[16:31:28] <sham1> Because you as the user of the library might be interested in that
[16:31:31] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:31:49] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 256 seconds)
[16:31:50] <supakeen> if you're later going to copy stuff you'd be interested in the size :)
[16:32:05] <supakeen> i think i saw this in getline() and really liked it there
[16:32:38] <bnchs> my program currently uses malloc/free but i would like a modular allocater
[16:32:48] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:32:57] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 240 seconds)
[16:33:08] *** Quits: DEFACED (~agent@91.218.173.105) (Quit: leaving)
[16:34:37] *** Joins: yelhamer (~yelhamer@41.98.30.118)
[16:35:18] *** Quits: yelhamer (~yelhamer@41.98.30.118) (Client Quit)
[16:35:18] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[16:36:46] *** Joins: Elladan (~elladan@user/elladan)
[16:42:05] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[16:42:33] *** Joins: jkotra (~jkotra@223.230.91.108)
[16:46:37] *** Joins: dfmaaa1 (~dfmaaa1@49.36.221.10)
[16:46:38] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[16:47:08] <dfmaaa1> hello
[16:47:43] *** Joins: strajder (~strajder@user/strajder)
[16:49:24] *** Quits: dfmaaa1 (~dfmaaa1@49.36.221.10) (Client Quit)
[16:53:22] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:57:19] *** Quits: hinata (~hinata@2409:4042:2486:40e7:111e:957b:4407:f685) (Quit: Leaving)
[16:58:10] *** Joins: ethrl (~ethereal@user/doforlove33)
[17:06:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:06:44] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:08:35] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[17:09:56] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:10:14] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:10:49] *** Quits: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: WeeChat 3.4)
[17:11:11] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:11:24] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:12:51] *** Joins: mrig (~mrig@user/mrig)
[17:13:39] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[17:13:54] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[17:14:14] *** Joins: myth (~myth@173.233.125.203)
[17:15:50] *** Quits: joev (~joev@user/joev) (Ping timeout: 250 seconds)
[17:16:48] *** Joins: joev (~joev@user/joev)
[17:17:01] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[17:17:15] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[17:17:41] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:18:25] *** Parts: AmR (~AmREiSa@156.207.136.200) ()
[17:18:30] *** Joins: jkotra (~jkotra@223.230.91.108)
[17:22:02] *** Quits: alch (~alch@151.36.222.116) (Read error: Connection reset by peer)
[17:23:13] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:25:30] *** Joins: alch (~alch@151.36.189.99)
[17:28:32] *** Joins: ntwk (~ntwk@user/ntwk)
[17:30:56] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[17:32:25] *** Joins: jkotra (~jkotra@223.230.91.108)
[17:33:27] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[17:35:46] *** Joins: Archetypic (~user@072-182-154-233.res.spectrum.com)
[17:36:17] *** Quits: jkotra (~jkotra@223.230.91.108) (Client Quit)
[17:36:54] *** Quits: Archetypic (~user@072-182-154-233.res.spectrum.com) (Client Quit)
[17:37:48] *** Joins: jkotra (~jkotra@223.230.91.108)
[17:38:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:40:20] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:41:35] *** Joins: mad_enz (~mad_enz@lnsm1-toronto35-142-120-17-169.internet.virginmobile.ca)
[17:42:22] *** Joins: alo (~alo@host-79-36-108-33.retail.telecomitalia.it)
[17:42:40] *** Parts: alo (~alo@host-79-36-108-33.retail.telecomitalia.it) ()
[17:45:12] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[17:46:12] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[17:46:36] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[17:46:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[17:46:48] <useretail> how to make following fn portable? void help(){fprintf(stderr, "Usage: %s <file>\n", __argv[0]);}
[17:47:31] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[17:48:28] <BtbN> define portable
[17:48:50] <fluter> useretail: what is __argv ?
[17:49:03] <useretail> it compiles in windows fine, but throws __argv undeclared in linux
[17:49:20] <fluter> useretail: show your full code?
[17:49:30] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[17:49:43] *** Quits: Torr (~Torr@user/torr) ()
[17:49:44] <useretail> it just calls help(); from main fn
[17:49:51] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:49:55] <fluter> useretail: don't use __argv then.
[17:50:02] <fluter> looks like some windows crap.
[17:50:23] <fluter> https://docs.microsoft.com/en-us/cpp/c-runtime-library/argc-argv-wargv?view=msvc-170#:~:text=__argv%20is%20a%20pointer,arguments%20to%20main%20or%20wmain%20.
[17:50:24] <candide> Title of fluter's link: __argc, __argv, __wargv | Microsoft Docs
[17:50:28] <fluter> It's not C standard.
[17:50:34] *** Joins: pulse (~pulse@user/pulse)
[17:50:39] <useretail> ok, got it
[17:50:50] <fluter> useretail: Pass argv from main function to help if you want to access it.
[17:51:03] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:51:17] <useretail> code is not mine, so i was just wondering what is it actually
[17:51:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:53:13] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:54:04] <sham1> __argv is probably just the same thing that Windows passes to main
[17:54:25] <sham1> In fact I think that's exactly what it is
[17:54:41] <sham1> Certainly looks like it
[17:56:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:56:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:56:39] *** Joins: wroathe (~wroathe@user/wroathe)
[18:00:49] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[18:01:08] *** Quits: mad_enz (~mad_enz@lnsm1-toronto35-142-120-17-169.internet.virginmobile.ca) (Remote host closed the connection)
[18:01:44] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[18:02:04] <bnchs> #ifdef __WIN32 #define argv __argv
[18:03:03] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:03:19] *** Joins: jkotra (~jkotra@223.230.91.108)
[18:03:33] *** Joins: mad_enz (~mad_enz@lnsm1-torontoxn-142-120-17-169.internet.virginmobile.ca)
[18:05:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:09:25] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: The Lounge - https://thelounge.chat)
[18:09:31] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 256 seconds)
[18:10:19] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[18:10:39] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:11:09] *** Joins: node1 (~hex@user/node1)
[18:11:54] <node1> What's LLVM stands in LLVM based compiler?
[18:13:10] *** Joins: jkotra (~jkotra@223.230.91.108)
[18:14:16] <sham1> Low-Level Virtual Machine
[18:14:41] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[18:14:53] <sham1> It's the library clang and such use for doing stuff like instruction selection and such, by generating some bytecode that the llvm library can then lower into actual machine instructions
[18:16:37] *** Joins: jkotra (~jkotra@223.230.91.108)
[18:18:22] *** Joins: mandanguita (~mandangui@139.47.119.61)
[18:19:17] *** Quits: jkotra (~jkotra@223.230.91.108) (Client Quit)
[18:21:05] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[18:21:33] *** Joins: jkotra (~jkotra@223.230.91.108)
[18:21:55] <node1> ok
[18:22:22] <nightstrike> it looks like this works:  union U { struct { size_t sF32; float arrayF32[]; }; struct { size_t sF64; double arrayF64[]; }; };  // How far off the rails is doing that? :)
[18:22:57] *** Parts: jkotra (~jkotra@223.230.91.108) ()
[18:22:58] <nightstrike> IOW, it's a way to get a FAM in a union (after the discussion the other day, I've been curious how much they could be abused :P )
[18:25:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:26:45] *** Quits: node1 (~hex@user/node1) (Ping timeout: 256 seconds)
[18:28:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:02] *** Joins: meator (~meator@user/meator)
[18:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[18:38:15] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:41:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:42:02] *** Joins: mikeross (~michael@90.253.28.103)
[18:42:03] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[18:43:26] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:43:47] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[18:43:54] *** Joins: mtor (~meator@user/meator)
[18:44:08] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[18:44:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[18:45:31] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[18:45:33] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:45:37] *** Joins: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es)
[18:46:23] <uskerine> hi, I am looking for a bit on advise on how to handle this. I have an API which has a callback which apparently can be called in several threads. I have a block that shall be atomic. How can I handle that?
[18:48:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:48:20] <sham1> What do you mean with a "block that shall be atomic
[18:48:21] <sham1> "
[18:48:50] *** Quits: mtor (~meator@user/meator) (Quit: Leaving)
[18:49:01] *** Joins: meator (~meator@user/meator)
[18:49:07] <bnchs> is it like a void (*callback)(type *name)?
[18:50:05] <NRK> does anyone have link to the `DEFER` macro?
[18:50:21] *** Joins: jkotra (~jkotra@223.230.91.108)
[18:50:27] <NRK> one where you specify `DEFER_EXEC`
[18:52:33] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[18:55:11] *** Quits: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net) (Ping timeout: 256 seconds)
[18:58:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b8e4-8b58-fcf6-173a.res6.spectrum.com)
[19:00:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31) (Quit: Quit)
[19:00:12] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:01:01] <clarity> uskerine: There are no atomic blocks in C.  If you need to protect concurrent access, you must use locks
[19:02:02] *** Parts: mikeross (~michael@90.253.28.103) ()
[19:04:27] *** Joins: constxd (~brad@142.167.170.88)
[19:07:52] <uskerine> what shall I look into? pthreads? semaphores? -just to google it and learn-
[19:08:13] <uskerine> it is basically protecting three lines of code
[19:08:21] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[19:10:03] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31)
[19:11:03] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Ping timeout: 256 seconds)
[19:11:17] *** Quits: dsrt^ (~dsrt@128-092-174-141.biz.spectrum.com) (Ping timeout: 256 seconds)
[19:12:23] <clarity> uskerine: pthreads are ok if they're available on your platform.
[19:19:03] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[19:19:43] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:20:44] <ChoHag> Are there any platforms left it's not available for?
[19:21:19] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[19:22:20] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[19:23:27] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[19:25:01] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[19:27:39] <SaltHillStroller> ChoHag: Lots of embedded envs
[19:28:22] <ChoHag> I'm going to go out on a limb and bet that such are not applicable here.
[19:29:59] *** Quits: bnchs (~bnchs@196.65.49.136) (Ping timeout: 256 seconds)
[19:31:16] <SaltHillStroller> You never know :P
[19:31:17] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:31:40] <SaltHillStroller> Even lots of hobby-ist RTOS's have ... limited ... threading capabilities
[19:34:54] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[19:34:59] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[19:35:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:35:56] *** Joins: mahmutov (~mahmutov@37.155.52.196)
[19:35:59] <nightstrike> clarity: I use atomic spin waits all the time
[19:36:39] <nightstrike> depending on what you need, https://en.cppreference.com/w/c/atomic/atomic_thread_fence does nicely
[19:36:51] <nightstrike> my point is that "must use locks" isn't really trye
[19:38:50] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[19:39:13] <ChoHag> How do you spin without a lock to wait for?
[19:39:36] <nightstrike> it depends entirely on the desired end goal
[19:39:58] <nightstrike> I use atomic spins to have threads that check an atomic flag to know when some operation is ready to go
[19:40:18] <nightstrike> you could also use a lock free dynamic to have a shared data structure
[19:40:20] <ChoHag> So the flag is the lock.
[19:40:24] <nightstrike> there are a number of solutions
[19:41:02] <nightstrike> a lock is a kind of sync mechanism, not THE sync mechanism
[19:42:32] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[19:42:59] *** Quits: ka80_ (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[19:43:19] *** Joins: meator (~meator@user/meator)
[19:44:13] *** Quits: zwr (~zwr@2804:d45:b966:fb00:35ea:d66c:6406:325c) (Ping timeout: 250 seconds)
[19:45:14] *** Joins: zwr (~zwr@2804:d45:b966:fb00:12d7:13aa:3127:57bc)
[19:48:10] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:49:04] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[19:49:28] *** Joins: de-facto (~de-facto@user/de-facto)
[19:53:49] <uskerine> I useds pthread mutex and apparently works
[19:54:57] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[19:55:06] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:57:17] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:57:43] *** Quits: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es) (Remote host closed the connection)
[19:58:53] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:59:52] *** Joins: seninha_ (~seninha@user/seninha)
[20:00:52] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:02:37] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:02:45] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[20:03:30] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[20:03:37] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[20:05:23] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:06:19] *** Joins: Atque (~Atque@user/atque)
[20:08:45] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 257 seconds)
[20:11:46] *** Joins: Alhazred (~Alhazred@86.106.74.39)
[20:13:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[20:14:00] <clarity> "you don't need locks"
[20:14:04] <clarity> "impements a spinlock"
[20:14:05] <clarity> :D
[20:14:17] <clarity> implements even
[20:14:27] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[20:16:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:16:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:16:45] *** Joins: wroathe (~wroathe@user/wroathe)
[20:16:49] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:17:19] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[20:17:39] *** Quits: Trashlord (~trash@user/trashlord) (Read error: Connection reset by peer)
[20:18:58] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) ()
[20:20:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:21:13] *** Quits: Alhazred (~Alhazred@86.106.74.39) (Ping timeout: 256 seconds)
[20:21:40] *** Joins: Trashlord (~trash@user/trashlord)
[20:21:42] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:22:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[20:24:29] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Quit: Reconnecting)
[20:24:41] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[20:25:11] *** Quits: theglass (~glass@user/theglass) (Remote host closed the connection)
[20:27:58] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[20:28:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[20:31:33] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[20:31:48] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[20:35:00] *** Joins: cmburn (~Charlie_B@2607:ea00:107:3c07:6d77:ec3f:2fe:ae8f)
[20:35:02] *** Parts: cmburn (~Charlie_B@2607:ea00:107:3c07:6d77:ec3f:2fe:ae8f) ()
[20:35:10] *** Joins: Betal (~Betal@user/betal)
[20:35:40] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:36:03] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[20:36:52] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[20:39:14] *** Joins: inlight (~thomas@157.42.233.26)
[20:39:14] *** Quits: inlight (~thomas@157.42.233.26) (Changing host)
[20:39:14] *** Joins: inlight (~thomas@user/inlight)
[20:41:18] *** Joins: leib (~leib@2405:201:900a:f021:f0e6:d93d:1679:48cc)
[20:42:23] *** Joins: orr (~onildo@177.130.3.13)
[20:42:31] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[20:44:50] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:45:38] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[20:49:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:49:23] *** Joins: node1 (~hex@user/node1)
[20:51:02] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[20:52:06] <node1> Just wanted to know that to draw state transition diagram for any function in C. It should always be in a nondeterministic state?
[20:54:47] *** Joins: Akuli (~Akuli@82-203-167-197.bb.dnainternet.fi)
[20:56:21] <sham1> Well you can't really draw a state transition diagram unless you know the possible states of the function. So yeah, you'd need to know what the function does and how it does it (source code) and unless that's a thing, you can only rely on whatever is documented, if anything
[20:56:51] <node1> ok.
[20:58:50] <node1> So possible state is being decided by a  user not the functions?
[20:59:10] *** Joins: Akiva (~Akiva@user/Akiva)
[20:59:43] <node1> If we take this function in terms of discrete mathematic function i believe c function and and that mathematics functional poses same property.
[21:00:01] <node1> function*
[21:00:22] <node1> but leave it.
[21:00:55] *** Joins: tavares (~tavares@user/tavares)
[21:01:09] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:01:12] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[21:01:25] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[21:04:04] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:04:20] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:05:57] *** Quits: imp (~imp@179-191-215-167.static.sumicity.net.br) (Quit: imp)
[21:06:34] *** Quits: strajder (~strajder@user/strajder) (Quit: brb)
[21:07:58] <nitrix> int x = 42; int f(int *p) { return *p++; }; printf("%d", f(&x) + f(&x)); // Have fun modeling that with discrete mathematics.
[21:09:06] *** Joins: strajder (~strajder@user/strajder)
[21:14:21] <nitrix> You'll need a way to model the effects by pretending the function is pure. The output parameters that gets mutated becomes an implicitly curried argument, perhaps a tuple if there are multiple, so on.
[21:15:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:15:37] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[21:16:00] <node1> pk
[21:16:02] <node1> ok
[21:16:14] <nitrix> I could've made it worse with I/O inside of the function. Now your model suddenly has to explain those effects, typically it's by introducing a type system, with a World that represent the entire state outside of the program.
[21:16:31] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[21:16:41] <sham1> Just stuck it into the IO monad. Easy
[21:16:47] <nitrix> You usually see this kind of interest in functional languages.
[21:16:55] *** Joins: joev (~joev@user/joev)
[21:18:26] <nitrix> Haskell for example does lazy evaluation, which, because you don't control when expressions are evaluated, requires them to be "conceptually" pure, at least enough so that the sequencing can be expressed explicitly.
[21:19:11] <nitrix> Otherwise you would have indeterminism (not to be confused with nondeterminism).
[21:20:19] *** Quits: leib (~leib@2405:201:900a:f021:f0e6:d93d:1679:48cc) (Quit: Leaving)
[21:20:38] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:39] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:f143:90e7:e058:c617) (Quit: fe23)
[21:21:53] *** Quits: alch (~alch@151.36.189.99) (Read error: Connection reset by peer)
[21:23:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:23:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:23:16] *** Joins: wroathe (~wroathe@user/wroathe)
[21:23:20] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:25:49] *** Joins: alch (~alch@151.38.149.195)
[21:26:06] <node1> nitrix, Between what you trying to convey with the given code?
[21:26:32] <nitrix> Your question doesn't parse.
[21:27:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:08] <node1> Well my question was meaningful. I was seeking to know if i have to draw a state transition diagram for these fuction let say  printf() or scanf()
[21:30:39] <node1> What would be it's state? In general i have seen mostly it's NFA
[21:30:50] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[21:30:52] *** Joins: ns12 (~ns12@user/ns12)
[21:31:11] <node1> printf() or scanf() or f(&x)*
[21:31:22] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[21:31:29] *** Joins: meator (~meator@user/meator)
[21:31:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:31:30] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[21:32:41] <sham1> printf should be just a DFA
[21:32:52] *** Quits: zwr (~zwr@2804:d45:b966:fb00:12d7:13aa:3127:57bc) (Quit: Lost terminal)
[21:33:09] <node1> Even this also looks to me DFA f(&x)
[21:33:22] <nitrix> Depends how accurate you want to be. The function does more than evaluate to a value, it produces effects (to stdin/stdout in your case).
[21:33:33] <sham1> Well that's not a state transition
[21:33:45] <sham1> Calling just some f with a pointer to x
[21:33:57] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[21:33:58] *** Joins: seninha (~seninha@user/seninha)
[21:34:18] <nitrix> So you may want to explain the state of the streams stdin/stdout as part of your calls to printf.
[21:34:24] <node1> Ok.
[21:36:08] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[21:38:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:38:41] *** Joins: neshpion_ (~neshpion@gateway/tor-sasl/neshpion)
[21:38:41] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Killed (NickServ (GHOST command used by neshpion_)))
[21:38:50] *** neshpion_ is now known as neshpion
[21:41:08] <sham1> printf for example has three main states. The first and primary state you read from the current position at the format string, and you have three choices. 1st, if the current character is '\0', you stop and return to the caller the amount of chars written. 2nd choice is if the current character is '%'. In that case you go to a sub-statemachine. And if neither of those choices are correct, you print the current character somehow, whether it be to a file
[21:41:08] <sham1> handle like stdout (printf and fprintf) or a char buffer (sprintf and family)
[21:42:30] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[21:42:35] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 256 seconds)
[21:42:36] <retr0> is this legal https://onlinegdb.com/EG_QteFt_
[21:43:02] <retr0> having int and char return types and also returning foo from main
[21:43:10] <sham1> Is the police after you?
[21:43:13] *** Joins: MrFantastik (~f@2607:f598:bbda:270:f69c:fa1f:1773:50fc)
[21:43:16] <retr0> yes
[21:43:33] *** Joins: zacts (~zacts@user/zacts)
[21:43:34] <retr0> are the police after you*
[21:43:46] <sham1> Well I can't help you with the legality of the code, but it is valid
[21:43:51] <retr0> cool
[21:44:08] <fizzie> `return` statements do the same sort of implicit conversions as simple assignment, which includes converting between the different numeric types.
[21:44:17] <ski> (sounds a bit weird to use a `char' literal for an exit status, though)
[21:44:43] <fizzie> Weird but cute. You could make the characters mnemonic of the kind of error it was.
[21:44:53] <ski> i suppose
[21:45:48] <sham1> "Returns '\0' in success, and other characters in the case of an error. Refer to the Appendix Z13 of the manual for a full description of the error codes as well as their mnemonics."
[21:45:57] *** Quits: ominionx (~ominionx@172.58.136.5) (Ping timeout: 240 seconds)
[21:47:26] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 245 seconds)
[21:47:33] *** Joins: bnchs (~bnchs@196.65.49.136)
[21:48:46] <sham1> But yeah, the "sub-statemachine" for printf then parses the format specifiers in all their glory, so if one gets '%', you print '%' and go back to the first stage, if you see 'd' you take the current argument from the parameter list somehow, although at least now with C2023 it will be specified that it has to be as if it was taken with va_list stuff
[21:48:46] <ski> where's that from ?
[21:48:56] <ski> (or, maybe that was invented on the spot)
[21:49:03] <sham1> It was invented
[21:50:40] <sham1> ,cc printf("%"); // I don't know if this is an error
[21:50:43] <candide> sham1: [warning: spurious trailing '%' in format [-Wformat=]] %
[21:51:06] <sham1> Well apparently a warning, but I'm not sure if that's just undefined behaviour or actually expected
[21:52:06] <sham1> Although I am going to wager undefined behaviour
[21:52:50] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[21:53:09] <fizzie> So do I. 7.21.6.1p9: "If a conversion specification is invalid, the behavior is undefined." p4 "After the `%`, the following appear in sequence: [A bunch of things, and:] A /conversion specifier/ character that specifies the type of conversion to be applied."
[21:54:57] <sham1> I'd look at what a production-grade libc does with printf, but I'm a bit scared to do that considering what glibc code is usually like. Hell, I'm scared of looking at Musl in this case as well
[21:55:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[21:58:19] <nitrix> I expect to see #if POLICE_AFTER_YOU \n legal(); \n #else \n illegal(); \n #endif
[21:59:10] <sham1> Welp, my curiosity got the best of me and holy mother of god: https://sourceware.org/git/?p=glibc.git;a=blob;f=stdio-common/vfprintf-internal.c;h=59bd76c890dcd75f423f6611bbd90d203775b1ab;hb=HEAD
[22:00:25] <sham1> Well, musl is better but it is still somewhat odd: https://git.musl-libc.org/cgit/musl/tree/src/stdio/vfprintf.c
[22:00:42] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[22:01:10] <sham1> Of course, there is a lot to do here considering that it has to also handle stuff like the %{5}d stuff of POSIX
[22:01:26] *** Quits: MrFantastik (~f@2607:f598:bbda:270:f69c:fa1f:1773:50fc) (Remote host closed the connection)
[22:01:47] <sham1> Err, %5$d
[22:02:18] <ChoHag> Here's openbsd's for comparison: https://cvsweb.openbsd.org/src/lib/libc/stdio/vfprintf.c?rev=1.81&content-type=text/x-cvsweb-markup
[22:02:31] * ChoHag attempts to read some GNU source...
[22:03:07] <fizzie> They should have added a %*$d where the next consecutive argument is an `int` that designates which argument to use for the actual value.
[22:03:17] <fizzie> "For consistency."
[22:03:35] <sham1> Mmm, also %n$d because not having that is annoying
[22:03:48] *** Joins: mandanguita (~mandangui@139.47.119.61)
[22:03:55] <sham1> And there's the entire POSIX to use as prior art
[22:04:06] <sham1> Could be indicated by a preprocessor macro or something, I don't knot
[22:04:25] <nitrix> Wait until you get old. You'll knot.
[22:04:49] <nitrix> Oh I had knit in mind.
[22:05:47] <sham1> I mean yeah, printf is a gnarly state machine but it's still amazing just how much code there is
[22:05:58] *** Joins: ominionx (~ominionx@172.58.136.5)
[22:06:31] <sham1> ,cc printf("%l");
[22:06:33] <candide> sham1: [warning: conversion lacks type at end of format [-Wformat=]] %
[22:06:36] <sham1> Hmm
[22:08:29] <sham1> I'll just assume that within the printf implementations there is some logic which is essentially `/* We're in the state where we parse format specifiers */ if (*c == '\0') { putchar('%'); /* Go to the state where we just read characters */ }`
[22:08:40] <sham1> I could look at the three linked implementations to find it, but nah
[22:09:10] <ChoHag> 		default:	/* "%?" prints ?, unless ? is NUL */
[22:09:10] <ChoHag> 			if (ch == '\0')
[22:09:10] <ChoHag> 				goto done;
[22:10:52] <ChoHag> GNU has a few.
[22:11:47] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.4)
[22:12:22] <sham1> Hm
[22:15:36] <nomagno> if(ch == '\0') is so verbose
[22:15:50] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[22:16:04] <nomagno> half GNU code is extremely verbose, and the other half was coded by a person of above average knowledge and of below average common sense
[22:16:05] <ChoHag> Openbsd devs would lynch you if you tried to propose if (!ch)
[22:16:24] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[22:16:42] <sham1> I might not go as far as to lynch people but yeah, I'd rather not do !ch
[22:17:58] <sham1> It's for the same reason I don't like to do !ptr or ptr
[22:18:44] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:18:45] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Quit: institute budget)
[22:18:53] <ChoHag> Yeah that's an abuse of pointer arithmetic.
[22:19:10] <theseb> is memcpy the only way to copy multiple contiguous values to another place in memory?
[22:19:22] <theseb> my only gripe with it is memcpy wants units of bytes not ints
[22:19:24] <sham1> There's also memmove
[22:19:28] <ChoHag> No you could do *dst = *src in a loop.
[22:19:30] <theseb> is there another version that uses other types?
[22:19:36] <theseb> ChoHag: true
[22:19:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[22:19:41] <theseb> don't even need memcpy
[22:19:55] <ChoHag> But that's basically what memcpy/memmove do, but slower.
[22:19:57] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:20:12] <nomagno> Arrays in structs are another way, though obviously you can get a bit of garbage padding around the copied memory.
[22:20:20] <ChoHag> Although ripe for the optimiser.
[22:20:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:20:44] <theseb> sham1: why is memmove "safer" ?
[22:20:50] <theseb> (that's what this doc says)
[22:20:56] <ChoHag> One can handle src/dst ranges overlapping.
[22:20:59] <ChoHag> I think that's memmove.
[22:21:06] <sham1> Because memmove handles overlapping memory regions while memcpy does not
[22:21:17] <theseb> why does that make it safer though?
[22:21:21] <nomagno> struct array { int arr[2]; }; struct array myarray1 = {{1, 1}}; struct array myarray2 = myarray1;
[22:22:07] *** Joins: crashrep (~crashrep@user/crashrep)
[22:22:12] <nomagno> ,cc struct array { int arr[2]; }; struct array myarray1 = {{1, 1}}; struct array myarray2 = myarray1;
[22:22:14] <candide> nomagno: no output: myarray1 = {arr = {1, 1}}; myarray2 = {arr = {1, 1}}
[22:22:58] <ChoHag> theseb: Because they were written that way.
[22:23:09] <sham1> theseb: because if you had something like `char c[10]; /* ... */ memcpy(&c[2], &c[0], 5);` that would lead to the values becoming corrupted while with memmove everything is fine. The standard says that memmove acts as if the data from the source pointer was first read to a temporary buffer and then written to the destination
[22:23:32] <sham1> Of course it doesn't actually need a temporary buffer, you just need to order the reads and writes correctly
[22:23:43] <ChoHag> There's probably no reason to not use memmove but probably somebody will come up with an edge case.
[22:23:47] <fizzie> That function name really should be `memmve` for consistency with `memcpy` though.
[22:23:59] <ChoHag> Maybe that's the reason.
[22:24:01] *** Joins: Nutte35 (~Nutte@43.231.30.192)
[22:24:35] <sham1> What I just wrote with memcpy is undefined behavior
[22:24:52] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:24:56] <sham1> Meanwhile if it were memmove, it wouldn't be. And that's why with memcpy the pointers are restrict while memmove they aren't
[22:25:00] <nomagno> memmove is far safer inside of UB land
[22:25:10] *** Joins: somlis (~somlis@user/somlis)
[22:27:42] *** Joins: bionade24 (~bionade24@2a03:4000:33:45b::1)
[22:28:38] *** Joins: vicfred (~vicfred@user/vicfred)
[22:28:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:28:41] <bionade24> Hi, in what channel is appropriate for autotools questions? #gnu seems pretty dead
[22:28:41] <SamuelMarks> hi
[22:28:56] <sham1> Of course because of the characteristics of memcpy, it can be optimised nicely, especially if the writes are native word-size, and so for example `float a = 3.141953f; uint32_t b; memcpy(&b, &a, 4);` Can be optimised into a single register-to-register load instruction, if even that. Can even be constant folded if the compiler is feeling fancy
[22:28:57] <SamuelMarks> #m4
[22:29:17] *** Quits: Nutte35 (~Nutte@43.231.30.192) (Read error: Connection reset by peer)
[22:31:10] <sham1> As can be seen from this: https://godbolt.org/z/TKE9WcbfP
[22:31:52] <sham1> No loading the floating point value to a XMM register, no moving from that to the integer register, it's all constant folded
[22:32:21] <sham1> It could have probably even constant folded the printf into a constant puts if it really wanted to
[22:32:54] <sham1> Although that might have been too much
[22:33:42] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1c35:8f5c:4397:2de5)
[22:34:54] <bionade24> SamuelMarks: #m4 has only once user
[22:35:45] <bionade24> s/once/one/
[22:35:47] <sham1> Maybe the workingsets channel
[22:37:12] <bionade24> sham1: Thx, is there any IRC command that unlike lits searches channel descriptions?
[22:37:35] <sham1> I think there's a bot for that
[22:37:41] <sham1> I just don't recall how to invoke it
[22:37:49] <SamuelMarks> #C++-general I guess also
[22:38:09] *** Joins: MatthiasG2 (~matthias@i6DFA038C.versanet.de)
[22:38:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:39:05] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:40:55] <theseb> if i want to modify a pointer in f then i declare it "void f(**e);" right? and if i want to access the ADDRESS the original pointer pointed to I would do &*e yes?
[22:41:22] <sham1> No
[22:41:29] <sham1> &*e is just e
[22:41:33] <theseb> wait..*e is the address
[22:41:35] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:41:40] <theseb> because a pointer *is* an address
[22:41:48] <sham1> Yes to some approximation
[22:41:53] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[22:42:07] <theseb> ug...multple *'s melt my brain....then &*e is painful too ;)
[22:42:53] *** Joins: nhartman (~SaltHillS@206.223.160.26)
[22:43:12] *** Quits: nhartman (~SaltHillS@206.223.160.26) (Client Quit)
[22:43:22] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[22:44:09] *** Joins: pulse_ (~pulse@user/pulse)
[22:44:30] *** Quits: pulse_ (~pulse@user/pulse) (Read error: Connection reset by peer)
[22:46:08] *** Joins: pulse_ (~pulse@user/pulse)
[22:46:38] *** Quits: pulse (~pulse@user/pulse) (Killed (NickServ (GHOST command used by pulse_)))
[22:46:40] *** pulse_ is now known as pulse
[22:47:08] *** Joins: constxd (~brad@142.167.170.88)
[22:49:47] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[22:50:35] *** Quits: dld (~davidlowr@73.61.8.20) (Ping timeout: 256 seconds)
[22:52:29] *** Joins: dld (~davidlowr@73.61.8.105)
[22:52:51] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[22:53:45] <theseb> if you have a pointer int *p; .....what is the meaning of &p?
[22:54:12] <sham1> You get a pointer to p, so you have a pointer to a pointer to an int
[22:54:43] <theseb> can you modify the value of p with *&p = new_address; ?
[22:54:54] <sham1> *&p is p
[22:54:57] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[22:54:59] <theseb> good thanks
[22:55:23] <sham1> So you'd instead do something like `int *p = /* ... */; int *pp = &p; *pp = new_address;`
[22:55:26] <theseb> sham1: &p seems like it provides the cleanest way to allow a function to alter the value of a ptr
[22:55:32] <sham1> Yeah
[22:55:43] <theseb> ok good..i'm not crazy
[22:56:05] <theseb> then i'll stop messing with double *'s
[22:56:11] <sham1> So if you have a function, it'd be like `void f(int **pp) { /* ... */ } /* ... */ int *p = /* ... */; f(&p);`
[22:56:19] <theseb> f(**e) is not necessary if i pass in &p
[22:56:22] <theseb> i like it
[22:57:13] <sham1> And inside f, you can do *pp = new_value; and then p will have that value
[22:57:22] <theseb> sham1: wait..i'm trying to avoid **
[22:58:23] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[22:58:29] <sham1> Well then you can't modify p from within f
[22:58:46] <theseb> sham1: to use your example...void f(int *p_ptr, int new_address) { *p_ptr = new_address; }.....then i can call like this f(&p);
[22:58:49] <theseb> will that work?
[22:59:01] <sham1> No
[22:59:07] <sham1> Well, it won't change p
[22:59:19] <sham1> You need a pointer to the object you're changing, so in this case you need a pointer to p
[22:59:23] <sham1> So &p, whose type is int **
[22:59:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[22:59:24] <theseb> sham1: but f knows the address where p's value is stored
[22:59:32] <sham1> No it doesn't
[22:59:39] <theseb> sham1: but i passed in &p!
[22:59:50] <sham1> Well the type signature is wrong
[23:00:07] <theseb> how so?
[23:00:27] <theseb> oh..the address type is wrong
[23:00:34] <theseb> not sure the type of p_ptr
[23:00:48] <sham1> int **p_ptr
[23:00:57] <sham1> That will be correct
[23:01:17] <ski> (also `int *new_address')
[23:01:22] <sham1> Also that
[23:01:49] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[23:02:53] <theseb> sham1: wait...doesn't &p have type int*?
[23:03:18] <sham1> No. If you have `int *p;` then &p has the type int **
[23:03:20] <theseb> sham1: &p is an address to an it
[23:03:22] <theseb> int
[23:03:32] <theseb> and int* is an address to an int
[23:03:34] <theseb> they match
[23:03:35] <sham1> Didn't you say that p is an int
[23:03:47] <sham1> > <theseb> if you have a pointer int *p; .....what is the meaning of &p?
[23:04:04] <theseb> sham1: p is a pointer
[23:04:06] <sham1> Yeah. If you had `int p;` then `&p` would be `int *`
[23:04:18] <sham1> But since it's `int *p`, `&p` is `int **`
[23:04:18] <ski> if `x' has type `T', then `&x' has type `T *'. if `p' has type `T *', then `*p' has type `T'
[23:05:38] *** Joins: imp (~imp@179-191-215-167.static.sumicity.net.br)
[23:05:48] <ski> (also `*' converts from rvalue to lvalue, while `&' is the other way around. both of them would typically be no-ops, in implementations. the implicit conversion from lvalue to rvalue, would not be a no-op, though. nor, obviously, assignment)
[23:05:49] <theseb> sham1: oh a pointer to an int is a different type than an int
[23:05:58] <sham1> Yes
[23:06:12] <sham1> For example
[23:06:13] *** Quits: nicode (~nic@45.72.195.35) (Read error: Connection reset by peer)
[23:06:23] <theseb> also, an address to an int is different than an address of a pointer to an int
[23:06:42] <sham1> ,cc printf("%zu %zu", sizeof(int), sizeof(int *));
[23:06:44] <candide> sham1: 4 8
[23:06:52] <sham1> Yes
[23:06:54] <ski> (`T *p;' even literally declares `*p' to be of type `T', which means that `p' itself, in order for its dereferncing (`*') to have type `T', must have type `T *', pointer to `T')
[23:10:59] *** Joins: nicode (~nic@2607:f2c0:9541:7100:4a3c:29f0:c179:f26c)
[23:13:17] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[23:14:09] *** Quits: dld (~davidlowr@73.61.8.105) (Ping timeout: 256 seconds)
[23:14:12] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 250 seconds)
[23:14:17] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:16:07] *** Joins: dld (~davidlowr@2601:197:600:1210:3c77:90a4:f938:18fe)
[23:16:11] *** Joins: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[23:17:42] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[23:17:44] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[23:19:04] *** Joins: terminalpusher (~terminalp@2a01:586:8e51:1:3197:8117:4d18:b86c)
[23:21:44] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[23:22:33] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[23:23:41] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:25:49] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:27:19] *** Quits: orr (~onildo@177.130.3.13) (Quit: Leaving)
[23:30:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[23:32:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[23:34:34] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[23:34:50] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[23:35:17] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[23:36:29] *** Quits: kristjansson (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[23:36:41] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[23:38:45] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[23:39:39] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[23:40:07] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[23:41:19] <theseb> help! trying to implement a key value store (i.e. dictionary / hash table) in C....i'm hesitant to use structs because later i need to reimplement in asm
[23:41:22] <theseb> suggestions?
[23:42:02] <theseb> however, all the pointer arithmetic is getting so painful with my naive method that it might be easier to use structs and later implement structs in asm
[23:42:58] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[23:43:34] *** Quits: terminalpusher (~terminalp@2a01:586:8e51:1:3197:8117:4d18:b86c) (Remote host closed the connection)
[23:46:27] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[23:47:10] <seninha> Hello. Supose I have a function that requires the address of a structure. I have two ways to call it: passing the argument as the pointer to a compound literal, or define a struct and then pass the address to it. Do both codes compiles to a binary with the same static data? Is there any major difference in the compiled code?
[23:47:19] <seninha> Here's more info: https://0x0.st/oHdI.txt
[23:48:08] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:48:42] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[23:53:10] <fizzie> The compound literals inside `main` have automatic storage, the others (at file scope) have static storage. So there can definitely be differences.
[23:54:45] <nitrix> Except for the lifetimes as mentioned by fizzie, if you don't do anything special with them, they should lead to the same generated code once optimized.
[23:55:32] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:55:45] *** Quits: skipper (~whatsupbo@user/scobydoo) (Quit: quit quit quit)
[23:56:04] <seninha> but literal compounds have to be stored somewhere in the binary... Are they stored along with static data?
[23:56:24] <seninha> Btw, which method is the more idiomatic and recommended?
[23:56:37] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[23:56:55] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[23:57:41] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:58:31] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:59:36] <nitrix> SSA optimizations throws a very wide net and is implemented to work on a very granular level, down to even the very bits of the fields of a struct. Static analysis will propagate the values as it realizes they can be inlined, to the point where an instruction might be altered, knowing that the field is always 0 or something like that.
