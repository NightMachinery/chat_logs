[00:02:23] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[00:07:13] <lotuseater> i was asked earlier for what i would need a computer or what i do with it
[00:07:50] <White_Flame> how much earlier?  70 years?
[00:08:39] <lotuseater> no 2h ago by a girl who is the same age as me and now has a new iPhone11
[00:08:57] <lotuseater> but White_Flame that was a nice response :D
[00:09:36] <White_Flame> ask her what she needs her handheld computer for
[00:09:48] <lotuseater> i thought so too
[00:10:26] <lotuseater> after all those are calculating machines
[00:10:48] <pjb> just computers.
[00:10:57] <pjb> people don't even use them to phone with most of the time.
[00:11:09] <White_Flame> or go back a bit further and tell her to go sit at a desk and punch numbers like a good little computer ;)
[00:11:33] <lotuseater> garbaging the internet with even more garbage brainless stuff
[00:11:34] <pjb> lotuseater: you could write iOS / Android apps.
[00:11:48] <lotuseater> pjb: wtf?
[00:12:16] <lotuseater> this app and web stuff isn't anything for me
[00:12:19] <pjb> there the formula is different. instead of getting $1M from 1 customer, you get $1 from 1M customers.
[00:12:30] <pjb>  lotuseater: but same result for you ;-)
[00:12:38] <lotuseater> haha yes
[00:12:38] <Alfr> pjb, that's a cruel and unusual punishment.
[00:12:42] <pjb> it's always programming.
[00:12:57] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[00:13:14] <lotuseater> it's too orthogonal for my brain. call me dumb if you want
[00:13:24] <Alfr> pjb, ... and more customer complaints.
[00:14:42] *** Joins: razzy (razzy@user/razzy)
[00:14:45] <pjb> well, when you have 500,000,000 customers, you don't care about complains.
[00:14:58] <lotuseater> oh like facebook or such
[00:15:23] <pjb> lotuseater: but half the world have a iPhone, and the other half have an Android phone!
[00:15:31] <pjb> You have 8 billion customers.
[00:15:36] <White_Flame> you're basically looking at lottery probably of success for those numbrs
[00:15:43] <White_Flame> *probability
[00:15:49] <lotuseater> hm let's say 1.5 billion
[00:15:57] <pjb> there are still apps that will sell.
[00:16:15] <lotuseater> isn't there too much of nearly everything?
[00:16:22] <pjb> Sure if you do a silly game, it'll be luck if it sells.
[00:16:47] <lotuseater> I won't.
[00:16:50] <pjb> But you can still address professional markets, or programs that are really useful and will sell themselves.
[00:17:33] <lotuseater> "now design your molecules on the phone"
[00:17:39] <pjb> There are things to be done in AR (augmented reality), with AI (Apple puts AI (ANN) chips in their phones), etc.
[00:17:48] <pjb> lotuseater: indeed. exactly that kind of things.
[00:18:13] <White_Flame> if that's true, then are you wealthy now from it pjb?
[00:18:36] <White_Flame> it's easy to say from the outside
[00:19:24] <pjb> There's Ultra Wide Band arriving (the airtag thingy).  with a whole new set of applications that can be written, given the physical possibilities that gives (precise localisation, orientation, analysis of the gestures of the user (holding the phone) in the context of the room where he is, etc.
[00:20:04] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[00:20:14] <pjb> For example, you can have a gesture to open a door; when you're near your house door and orient the phone toward it, it will open the house door, but if turn around and orient the phone to your car, it'll open the car door.
[00:20:55] <pjb> Let your imagination running.  Basically, handheld computers are magic wands. Think magic wands, and what magic you want to sell the customers.
[00:21:37] <selwyn> https://www.youtube.com/watch?v=WQRmSOKgMPA perhaps of interest to people here
[00:21:37] -ixelp- Silicon Photonic Quantum Computing - PsiQuantum at 2021 APS March Meeting - YouTube
[00:21:41] <selwyn> 7:18 most exciting
[00:24:36] <lotuseater> ahh
[00:26:34] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[00:33:36] <selwyn> simply being able to use a proper manufacturing line is such a bonus 
[00:38:17] <contrapunctus> gilberth: are you the administrator of http://bauhh.dyndns.org:8000/clim-spec ?
[00:38:17] -ixelp- CLIM 2 Specification â€” Common Lisp Interface Manager CLIM II Specification
[00:38:32] <selwyn> yes he is
[00:39:41] <lotuseater> "bauhh" i see what is meant by that :D
[00:59:40] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[01:01:21] <gilberth> That is bauhh = BAUmann Hansestadt Hamburg.
[01:02:03] <gilberth> contrapunctus: You could have read the footer.
[01:04:58] *** Joins: lisp123 (~lisp123@45.130.83.191)
[01:05:22] <contrapunctus> gilberth: it said "Gilbert Baumann" and you're "gilbert*h*", so I was somewhat uncertain. Would you be willing to set up TLS for the site?
[01:06:50] <Gnuxie> oh, welcome to lispcafe contrapunctus 
[01:06:58] <selwyn> i always read it with a silent Â´tÂ´ as how it would be pronounced in french
[01:07:09] <Gnuxie> brauhh
[01:07:10] <contrapunctus> Gnuxie: hello ðŸ™‚
[01:07:13] <selwyn> jilberr
[01:09:20] <gilberth> The name "bauhh" sticked because that was the name of UUCP node and we didn't came up with something better. I was connected over a "wolfhh" via sub.org.
[01:10:07] <pjb> gilberth: nice uucp name!   
[01:10:10] <gilberth> contrapuctions: I believe CL-HTTPD can't do that. And: What for?
[01:11:05] <gilberth> pjb: Which way were bang pathes? gilbert@bauhh!wolfhh!sub.org ? I don't remember.
[01:12:31] <gilberth> selwyn: The nice thing about my name is that both british and french could pronounce it without trouble. I listen to all the three variants, be it english, french, or german. And btw it's a german name.
[01:13:06] <selwyn> cool
[01:14:43] <gilberth> Funny though, that many Germans pronounce it the French way, when they want to appear educated, as they are not aware that it's a German name. :)
[01:16:02] <gilberth> contrapuctus: Sorry about the misspelling, no completion for me :(
[01:17:19] <pjb> gilberth: source to destination.
[01:17:22] <gilberth> contrapunctus: Actually I contemplate to move the clim spec to free-clim.org, which has SSL. But then I don't see the point, you can't leave your credit card number there to sponser FreeCLIM :)
[01:18:04] <gilberth> pjb: So that would be right.
[01:18:22] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[01:18:45] <MichaelRaskin> I guess the point is that people expect Chrome to start maliciously breaking HTTPS any release nowâ€¦
[01:18:57] <contrapunctus> gilberth: heh, no problem. I just feel a little uneasy enabling JS from HTTP domains, but it's not a huge issue.
[01:19:12] <gilberth> Which JS?
[01:19:43] <contrapunctus> gilberth: the JS on http://bauhh.dyndns.org:8000/clim-spec
[01:19:43] -ixelp- CLIM 2 Specification â€” Common Lisp Interface Manager CLIM II Specification
[01:20:28] <gilberth> Which JS? I don't have any.
[01:22:00] <gilberth> And besides, what difference would HTTPS make.
[01:22:45] <gilberth> MichaelRaskin: You mean Chrome wants to break non-HTTPS? Otherwise I would be surprised.
[01:23:22] <MichaelRaskin> Ooops, yes, I meant HTTP. For now
[01:23:22] <contrapunctus> gilberth: strange...NoScript lists bauhh.dyndns.org as a domain serving JS ðŸ¤”
[01:24:07] <MichaelRaskin> If they suceed they might start breaking actual HTTPS for glory of QUIC, but that is not imminent yet.
[01:24:19] <gilberth> There are some pages with JS, mainly for demo. But not inside the clim-spec.
[01:24:59] <contrapunctus> I see. Thanks for explaining that.
[01:25:45] <gilberth> contrapunctus: Oh dear!
[01:26:17] <contrapunctus> ? O.o
[01:26:43] <gilberth> But before moving, I need figure out how to keep Google page rank.
[01:27:32] <gilberth> contrapunctus: Confusion on my part. I need more coffee.
[01:28:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:29:20] <gilberth> But I got CCL on my hosters whitelist again. Either I port clim-spec from cl-httpd or I run cl-httpd on the hoster. Either way it would be behind Apache.
[01:30:28] *** Joins: aeth (~aeth@user/aeth)
[01:38:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:51:35] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[01:53:08] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b8b0:22c8:d1ea:efcc)
[02:15:55] *** Joins: lisp123 (~lisp123@45.130.83.191)
[02:21:08] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 268 seconds)
[02:50:56] *** Joins: lisp123 (~lisp123@45.130.83.191)
[02:56:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:03:08] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[03:03:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:03:25] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[03:04:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:04:37] <dave0> maw
[03:05:19] * gilberth hides and waits for more space to collect.
[03:06:17] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[03:06:58] <dave0> s p a c e s
[03:07:24] * gilberth carefully peeks from behind the bar he uses for cover and spots the spaces.
[03:09:10] * gilberth while nobody is paying attention sneaks silently and quick towards the luxurious spaces to claim them.
[03:09:55] * gilberth stashes the spaces into the fridge and appears again.
[03:10:10] <gilberth> Hello dave0! What would it be for you tonight?
[03:10:31] <dave0> today is thursday.. payday!
[03:11:54] <gilberth> Great! You'll gonna stand a round?
[03:12:56] <dave0> if you mean buy a round of beers, sure!
[03:13:46] <gilberth> We still have this lovely stout on tap.
[03:13:53] *** Joins: mr_rob0t (~user@cpe-174-102-100-18.columbus.res.rr.com)
[03:13:58] <mr_rob0t> hey
[03:14:29] * gilberth rinses a few mugs. Quick.
[03:15:15] <dave0> "can i have a clean glass"
[03:15:17] <dave0> lol
[03:15:49] <gilberth> dave0: Guess why I rinse them?
[03:16:42] * mr_rob0t why
[03:17:43] <dave0> i give up
[03:18:03] <dave0> does it make the beer taste better?
[03:18:04] <gilberth> Ok. DAVE0 IS STANDING A ROUND FOR EVERYONE! WHO WANTS SOME STOUT? RAISE YOUR HAND!
[03:18:31] * dave0 throws some money into the pot
[03:18:38] <gilberth> dave0: Well, I don't mind dirty glasses as long as nobody else used it.
[03:18:59] <dave0> oh!
[03:19:04] <dave0> i'm like that with my coffee cup
[03:19:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b8b0:22c8:d1ea:efcc) (Remote host closed the connection)
[03:19:21] <dave0> it's got a picture of garfield on it
[03:19:24] <gilberth> Saves time for doing dishes, actually.
[03:19:44] <dave0> i firmly believe in rinsing dishes
[03:19:59] <mr_rob0t> i agree
[03:20:17] <dave0> maw mr_rob0t 
[03:20:28] <gilberth> dave0: Looks like it is only us two wanting a beer. So, then.
[03:20:51] * dave0 orders a couple of stouts
[03:21:00] <dave0> gilberth: 2's alright
[03:21:17] <dave0> me and my friend used to drink at the bar and pump money into the video jukebox
[03:21:34] <gilberth> dave0: Have you watched. I already at tapping them. Stout needs it's time when properly tapped.
[03:24:02] * gilberth tries to "paint" a lambda into the foam and passes the glass over to dave0.
[03:24:12] <gilberth> Cheers!
[03:24:25] <hayley> https://www.youtube.com/watch?v=PHcCSZ5nScM
[03:24:26] -ixelp- I made a RELAY!!! - YouTube
[03:25:48] <dave0> gilberth: oh that's interesting!
[03:26:21] <dave0> gilberth: i heard that if the barista makes a pretty picture in your foam, you're more likely to leave a big tip !
[03:26:34] <dave0> like a love heart... or a lambda!
[03:27:13] <gilberth> Apropos logic gates: <https://www.youtube.com/watch?v=p7SkE5pERtA>
[03:27:13] -ixelp- Magnetic Logic - Forgotten Technology - YouTube
[03:27:35] <mr_rob0t> im so fried lol
[03:31:28] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[03:32:01] <mr_rob0t> is there like, a graphics lib for lisp? im making a text adventure game but might later try to make a 2d topdaown game
[03:32:17] <gilberth> CLIM?
[03:32:35] <mr_rob0t> does it work like canvas?
[03:33:13] <gilberth> What kind of canvas do you mean?
[03:33:38] <mr_rob0t> like html canvas; you can draw on it with js
[03:34:44] <mr_rob0t> sorry, im still like, really new to lisp
[03:34:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[03:35:00] <gilberth> Sure. There is whole host of drawing functions. And: You don't need to have a stream and output recording, if you don't want that. Just define your own pane class and implement event handlers and a repaint method.
[03:35:23] <mr_rob0t> with CLIM?
[03:36:10] *** Joins: aeth (~aeth@user/aeth)
[03:40:10] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:41:54] <gilberth> mr_rob0t: Indeed.
[03:42:02] <mr_rob0t> awesome, thanks man
[03:42:08] <gilberth> Sigh. One of the reasons, why I want to sell Silica.
[03:42:41] <mr_rob0t> oh yeah?
[03:43:04] <gilberth> I mean there is no need to use the presentation stuff. A perfect lower level layer taking to a display server and having some (possibly native) gadgets is included.
[03:45:41] <hayley> https://www.youtube.com/watch?v=F5QfcsHQ-BM
[03:45:42] -ixelp- Dead Loss Angeles - YouTube
[03:46:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 268 seconds)
[03:47:25] *** Quits: mr_rob0t (~user@cpe-174-102-100-18.columbus.res.rr.com) (Ping timeout: 252 seconds)
[03:47:32] <gilberth> mr_rob0t: <http://clim.rocks/gilbert/simple-pane.lisp> For the most simple example of a "raw" pane.
[03:48:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:48:28] <gilberth> But depending on what you want to do, I really would consider using a stream and thus output recording.
[03:51:14] <gilberth> mr_rob0t: <http://bauhh.de/free-clim/clim-animation.mp4> and <http://bauhh.de/free-clim/clim-animation-with-output-records.mp4> and <http://clim.rocks/gilbert/clim-animation-with-output-records.lisp>
[03:59:48] <gilberth> hayley: Hey, there is a Wagner hammer in your video. Connect an antenna to it to cause radio interference!
[04:08:15] <hayley> https://www.youtube.com/watch?v=RhtYvu-5rE0
[04:08:15] -ixelp- Artists Only (2005 Remaster) - YouTube
[04:29:38] <hayley> AIUI I have successfuly ratioed the ACM: https://twitter.com/nodefunallowed/status/1427594362402205699
[04:34:38] <dave0> time for a walk!
[04:34:45] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[04:58:22] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:02:45] <hayley> https://www.youtube.com/watch?v=xevq955tY8c
[05:02:46] -ixelp- OMD - Stanlow [Live with the Royal Liverpool Philharmonic Orchestra] - YouTube
[05:04:36] <lotuseater> hayley: i can never remember correctly who is Susskind or the other from the two SICP profs :) but the other is the one with the fez
[05:04:52] <hayley> Sussman?
[05:05:58] <lotuseater> damn
[05:06:08] <lotuseater> Susskind was the physicist
[05:06:20] <lotuseater> so you definitely see what i mean :D
[05:06:22] <White_Flame> and abelson is the ohter
[05:06:29] <lotuseater> ah yes
[05:17:34] <lotuseater> https://trash.randomerror.de/t1zqv/sicp.png
[05:19:18] * hayley uploaded an image: (44KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kcCRfaLNqBmWfZxJLXRHZSST/interpret-this-stick.jpeg >
[05:21:40] <lotuseater> :D
[05:23:35] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[05:33:04] <hayley> https://www.youtube.com/watch?v=k7OqjisABps
[05:33:05] -ixelp- David Bowie - Sense Of Doubt/Moss Garden/NeukÃ¶ln - YouTube
[05:43:22] <lotuseater> annoying these over and over reconnects
[05:53:15] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:26:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[06:26:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[06:35:30] *** Joins: ChanServ (ChanServ@services.libera.chat)
[06:35:30] *** iridium.libera.chat sets mode: +o ChanServ
[06:42:59] *** Joins: derelict (~derelict@user/derelict)
[06:56:29] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:17:35] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[07:42:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:52:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:29:17] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:30:03] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[08:30:20] <mr_rob0t> sup
[08:36:21] <lotuseater> hey mr_rob0t :)
[08:36:54] <lotuseater> good that you're now also into lisp
[08:37:53] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Remote host closed the connection)
[08:38:05] <mr_rob0t> super new
[08:38:19] <mr_rob0t> creating this text base game now! Thanks, man :)
[08:38:22] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:38:43] <lotuseater> ok i didn't want to interrupt you
[08:39:08] <mr_rob0t> not at all, im blogging, chatting and coding :)
[08:39:46] <lotuseater> :)
[08:40:28] <clothespin> if i have six cores and twelve threads, what does 1566% cpu mean?
[08:40:31] <mr_rob0t> besides, i need more friends into coding! :)
[08:41:00] <lotuseater> in "Land of Lisp" there are chapters where a text adventure is created and then how to extend the command possibilities with macros
[08:41:21] <mr_rob0t> thats exactly what im working through!
[08:41:27] <lotuseater> clothespin: they want to buy you a new computer?
[08:41:35] <lotuseater> mr_rob0t: great!
[08:41:53] <lotuseater> with all those funny comics
[08:42:43] <mr_rob0t> lotuseater: im only a couple days new to lisp so its helping me learn a lot through fun little projects]
[08:43:31] <lotuseater> and it's fully enough for now when you use CLISP as described there
[08:43:36] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:43:43] <lotuseater> ohai Qwnavery 
[08:44:02] <mr_rob0t> clisp or sbcl?
[08:44:17] <Qwnavery> lotuseater: \o
[08:44:17] <lotuseater> hm the book tells you about CLISP
[08:44:28] <Qwnavery> bytecode... ew
[08:44:46] * Qwnavery looks in the general direction of python
[08:44:46] <lotuseater> one big difference is that this produces bytecode
[08:45:17] <lotuseater> Qwnavery: as I told you, the CMUCL and SBCL compiler is also named Python ^^
[08:45:17] <Qwnavery> clash is pretty cool though.
[08:45:25] <Qwnavery> lotuseater: double meaning
[08:45:32] <Qwnavery> :)
[08:45:35] <mr_rob0t> very true, i was trying to look up tutorials and some suggested clisp and others sbcl so i homebrew'd them on my emacs shell
[08:45:54] <lotuseater> hm CLaSH reminds me of some other tool
[08:46:10] <Qwnavery> there was a scheme shell
[08:46:12] <Qwnavery> scsh
[08:46:37] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[08:46:39] <Qwnavery> It was implemented with scheme 48, I don't think it's actively maintained anymore
[08:46:56] <lotuseater> ah actually you normally can do general code
[08:47:10] <lotuseater> there is rash, a shell in racket
[08:47:35] <Qwnavery> don't scratch it hehe
[08:47:59] <lotuseater> oh when you want to do a shell in scratch ..
[08:49:56] <lotuseater> mr_rob0t: of course if you look at some macroexpands you will see what implementation specific things apply, eg for DEFUN
[08:52:12] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:52:12] <jasom> TIL most implementations of the unix command "pax" do not support the "pax" file format
[08:53:03] <lotuseater> that's the first time i hear of this format
[08:53:41] <jasom> lotuseater: it's an extended version of the ustar format; I think gnutar may generate that by default now, let me check
[08:53:55] <lotuseater> ah hm
[08:55:08] <jasom> strangely enough the manpage for gnu tar doesn't seem to tell you what the default format is?
[08:55:22] <lotuseater> lol
[08:55:28] <jasom> ah, tar --show-defaults shows the defaults
[08:56:37] <lotuseater> cool i see it
[08:57:13] <mr_rob0t> lotuseater: im not that far yet, im not sure what macros are yet
[08:57:37] <lotuseater> mr_rob0t: also a cool nick. or you call yourself when you learned some advanced magic "mr_macr0"
[08:57:58] <lotuseater> don't worry!
[08:58:24] <jasom> apparently it's a compile-time option which format is default; the gnu info page says that the plan is to make posix (which is an aliax for pax) the default format.
[08:58:37] <mr_rob0t> have you ever seen the show? I relate to the main char a lot
[08:58:45] <lotuseater> i did!
[08:58:52] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[08:58:55] <mr_rob0t> and thanks, im working at manic pace
[08:59:12] <lotuseater> and your nick reminded me i could watch again sometime when i don't know what else
[09:00:06] <lotuseater> you have all time in the world, it's nothing like this "one week this, the other that" mainstream mess
[09:00:21] <mr_rob0t> I just started, its really good
[09:00:36] <mr_rob0t> and i know, i just love to code and learn languages and how to build things
[09:00:43] <mr_rob0t> break things
[09:00:46] <mr_rob0t> fix them
[09:00:48] <mr_rob0t> so fun
[09:01:34] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:02:30] <lotuseater> :)
[09:04:14] <mr_rob0t> thats why i need coding friends; its all i think about but its not necesarrily a topic people think is interesting
[09:04:58] <lotuseater> yes but taking things granted for those is easy
[09:05:35] <lotuseater> *taking things for granted
[09:06:45] <lotuseater> then you're at great place. friendly people from various backgrounds here
[09:07:12] <mr_rob0t> i hope so :)
[09:07:51] <lotuseater> the other dude who was here some minutes ago, Qwnavery, is also new to it
[09:08:37] <mr_rob0t> awesome, im not alone lol
[09:09:15] <lotuseater> and I know what you mean, in "real life" I mostly can't talk seriously about most stuff with others although most of them work or do something with IT stuff
[09:10:22] <lotuseater> no, in LISP timing I'm also just an embryo. but I more like the term "Sorcerer's Apprentice"
[09:11:18] <mr_rob0t> Oh that sucks... i'm the same way, people in my OS class are so ignorant and arent even interested enough to fix it lol.
[09:11:39] <mr_rob0t> i hope to hold that title soon!
[09:11:46] <mr_rob0t> sounds so much better
[09:11:52] <lotuseater> haha
[09:11:58] <mr_rob0t> i guess im an Acolyte?
[09:12:10] <mr_rob0t> Novice, maybe?
[09:12:16] <lotuseater> or they are scared and believe myths
[09:12:47] <lotuseater> we are all beings in the cosmic flow :)
[09:15:18] <mr_rob0t> YES
[09:15:26] <mr_rob0t> I love your energy man
[09:15:48] <lotuseater> I just want to motivate.
[09:16:15] <mr_rob0t> i often have coding shows/movies in the background for constant motivation!
[09:16:27] <mr_rob0t> i went on a 38 hour coding spree
[09:16:33] <mr_rob0t> my gf was so mad lol
[09:16:46] <lotuseater> oh yes they can get mad
[09:17:03] <mr_rob0t> but can they get glad?
[09:17:12] <lotuseater> also
[09:17:14] <mr_rob0t> its an occasional occurance for me lol
[09:17:17] <mr_rob0t> also?
[09:17:21] <lotuseater> hmmmm
[09:18:08] <mr_rob0t> whats up?
[09:18:16] <lotuseater> nothing actually
[09:18:26] <lotuseater> maybe sleeping a bit later
[09:18:28] <mr_rob0t> what do you have up for tonight?
[09:18:32] <mr_rob0t> ah gotcha
[09:18:55] <lotuseater> my rhythm is a bit out of bounds the last weeks
[09:19:18] <lotuseater> and I bet I'm in another time zone like you :)
[09:20:05] *** Joins: lisp123 (~lisp123@45.130.83.191)
[09:21:06] <mr_rob0t> Sounds like we might be :)
[09:21:20] <lotuseater> it's now 6:50am here
[09:21:29] <mr_rob0t> oh wow
[09:21:33] <lotuseater> haha
[09:21:37] <mr_rob0t> 12:51
[09:21:40] <mr_rob0t> am
[09:22:03] <lotuseater> sounds like US or something like that
[09:22:11] <lotuseater> or ..
[09:22:13] <mr_rob0t> bingo
[09:22:16] <lotuseater> ah!
[09:22:25] <mr_rob0t> :)
[09:22:40] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[09:22:51] <lotuseater> or Canada, Brazilia, Argentinia, etc
[09:23:27] <mr_rob0t> are you copenhagen?
[09:23:41] <lotuseater> no from Germany
[09:24:03] <mr_rob0t> oh fuck yeah
[09:24:05] <lotuseater> so the "Berlin" time zone
[09:24:16] <mr_rob0t> i'v always wanted to go to germany
[09:24:31] <mr_rob0t> Deutchland, i should say
[09:24:39] <lotuseater> ^^
[09:24:44] <kakuhen> how do I determine if using CLOS is premature optimization for what I want to do :s
[09:25:00] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[09:25:01] <mr_rob0t> oof
[09:25:10] <kakuhen> i just refactored almost all of the code in my flac-decoder just to have some amorphous structure to a flac file in terms of objects
[09:25:20] <lotuseater> here people for political positions aren't voted by their twitter posts
[09:25:36] <lotuseater> kakuhen: ehm .. 
[09:25:40] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[09:26:01] <kakuhen> well, i learned that i have one more bad habit from obj-c that i need to get rid of
[09:26:12] <lotuseater> it can help when defining specialized methods instead of functions with declarations
[09:26:48] <kakuhen> in obj-c you're able to do special things when a object is being deallocated, and I don't know if CLOS has any similar method (probably not due to garbage collection)
[09:27:20] <mr_rob0t> lotuseater: sounds like a reasonable place
[09:27:41] <lotuseater> i think the metaobject protocol should cover also something for that
[09:28:17] <lotuseater> mr_rob0t: we now get a new cancellor
[09:28:28] <mr_rob0t> oh nice
[09:28:35] <gilberth> kakuhen: What exactly do you mean by "deallocated"?
[09:28:55] <lotuseater> no don't say that, it seems some incompetent will be it
[09:29:05] <lotuseater> oh gilberth is awake :)
[09:29:22] <kakuhen> gilberth: -(void)dealloc
[09:29:30] <gilberth> mr_rob0t: That isn't nice at all. But, never mind.
[09:29:40] <mr_rob0t> hey, better than trump; i can assure you
[09:29:56] <gilberth> kakuhen: Which does what? free(3)?
[09:30:10] <mr_rob0t> gilberth: oof, my bad; i don't know much about the affairs over there'
[09:30:31] <lotuseater> it's not about affairs at all
[09:30:33] <kakuhen> gilberth: unsure; i havent looked at objc internals too much for what dealloc does, but the idea is to remove object from memory, yes.
[09:30:46] <kakuhen> before ARC days, people would do special things in dealloc
[09:30:56] <mr_rob0t> lotuseater: bigger oof
[09:31:02] <mr_rob0t> im gonna be quiet now xD
[09:31:02] <lotuseater> oh yes, much
[09:31:05] <gilberth> mr_rob0t: The Green party wants to raise taxes in response to climate change, that is happening.
[09:31:14] <lotuseater> haha no, it's great to have you here mr_rob0t 
[09:31:26] <kakuhen> gilberth: e.g. -(void)dellaoc { /* do stuff here...*/ [super dealloc]; }
[09:31:28] <mr_rob0t> gilberth: what will that do?
[09:31:48] <lotuseater> kakuhen: into the void ...
[09:31:51] <gilberth> kakuhen: Yes, and then why in hell do you want the equivalent for CLOS? We have garbage collection.
[09:32:05] <kakuhen> that's why I said "probably not because of garbage collection" 
[09:32:14] <gilberth> My bad.
[09:32:26] <kakuhen> one of my slots contains a file stream and i want to close it in case it wasn't closed before
[09:32:34] <kakuhen> so maybe i shouldn't have such a slot
[09:32:52] <gilberth> I was just a bit triggered, because often people want to use finalizers for managing external resources, which is wrong. Always.
[09:33:00] <kakuhen> in obj-c i'd just override the dealloc method to ensure the file gets closed
[09:33:39] <gilberth> kakuhen: You should never depend on what ever memory management scheme you have for closing files. Never.
[09:33:45] <kakuhen> doesn't work with ARC either but I like pain so I avoid ARC 
[09:33:49] <gilberth> There is unwind-protect for that.
[09:33:54] <lotuseater> WITH-OPEN-FILE manages that with an UNWIND-PROTECT
[09:34:31] <lotuseater> or maybe with an around method combination?
[09:35:20] <gilberth> There is an annotation in the clim-spec asking for DEALLOCATE-PIXMAP being called automatically. I responded.
[09:35:35] <gilberth> :around on what?
[09:35:52] <lotuseater> don't know :D depends what should be achieved
[09:37:18] <gilberth> And how does an :around method ensure that you still do work after call-next-method?
[09:37:31] <lotuseater> i don't know
[09:37:37] <lotuseater> so forget about it
[09:38:39] <gilberth> kakuhen: Isn't ARC somehow mandatory these days?
[09:38:47] <kakuhen> if you use swift, yes
[09:38:49] <kakuhen> i don't use swift
[09:39:03] <lotuseater> what is this ARC you tell about?
[09:39:04] <gilberth> I use CCL for my Obj-C work :)
[09:39:17] <kakuhen> lotuseater: "automatic reference counting"
[09:39:21] <kakuhen> think of just refcounting
[09:39:34] <kakuhen> except in the good ol days apple used to make developers manipulate refcounts by hand
[09:39:40] <kakuhen> hence the term "automatic" prepended
[09:39:42] <gilberth> A poor excuse for a not having a garbage collection.
[09:39:52] <kakuhen> There used to be a conservative GC for objective-c but it got deprecated in favor of ARC
[09:40:17] *** Joins: Alfr (~Alfr@user/alfr)
[09:40:18] <kakuhen> also the GC was really janky, based on anecdotal evidence i heard from others
[09:40:37] <gilberth> Hmm.
[09:41:00] * gilberth never really understood those autorelease pools.
[09:41:29] <gilberth> kakuhen: CCL uses it's GC to reclaim Obj-C objects, too.
[09:41:46] <kakuhen> the best analogy I have for NSAutoreleasePool is the std::shared_ptr from C++
[09:42:04] <gilberth> Oh. I don't speak C++.
[09:42:16] <kakuhen> you have some NSObjects (pointers to them, really) and you do not touch the pointers at all (i.e. in the C++ analogy, do not call new or delete)
[09:42:26] <kakuhen> continuing in the C++ analogy, just let them fall out of scope
[09:42:39] <kakuhen> translated to obj-c, this means don't call release/retain yourself, just [pool drain] at the end
[09:43:01] <lotuseater> kakuhen: or you metaclass your class and get the made instances count automatically if needed ^^
[09:43:37] <gilberth> And how does the pool know what to drain? I mean, what if I need to get an object out of that pool? retain again?
[09:44:03] <kakuhen> when you enter an autorelease pool, every new object that gets allocated within its scope is part of the pool
[09:44:06] <gilberth> lotuseater: How would you do that?
[09:44:14] <kakuhen> and these objects to not get released until the pool is drained
[09:44:19] <kakuhen> do not get released*
[09:44:35] <hayley> gilberth: shared_ptr refcounts.
[09:44:35] <gilberth> I figured. But could i retain them via retain?
[09:44:57] <gilberth> hayley: Milady, I really don't speak C++.
[09:45:16] <hayley> unique_ptr is linear, shared_ptr is RC, I forgot the rest.
[09:45:27] <kakuhen> if you allocate an object inside an autorelease pool and want to keep it afterwards, then you want something to hold a reference to it outside of the pool (i.e. retain it)
[09:45:32] <hayley> boehm_ptr?
[09:45:39] <kakuhen> because every single object allocated inside an autorelease pool gets release'd the moment the pool is drained
[09:46:10] <lotuseater> hm make a class counter-class or such, then using this in the :metaclass for your other class and defining the methods for counting. but know i think how then is tracked when the object is deallocated, so the counter is decremented
[09:46:25] <hayley> https://www.youtube.com/watch?v=1G-YVPtA3GQ
[09:46:26] -ixelp- Gary Numan Complex - YouTube
[09:46:38] <gilberth> kakuhen: ok. ok. So a retain on just the objects within that pool that I want to carry along, when I leave, works? Did i get that right?
[09:46:49] <kakuhen> yeah that sounds correct to me
[09:46:52] <hayley> Wouldn't a class allocated slot work fine for a counter?
[09:47:07] <hayley> n.b. if you are not thread safe, I will come to your house and bonk you
[09:47:13] <hayley> n.b. if you lock to increment the counter, I will also bonk you
[09:47:21] <gilberth> lotuseater: CL /= C++.
[09:47:23] <lotuseater> at some point you would need closer-mop:validate-superclass
[09:47:38] <lotuseater> gilberth: I know?
[09:47:48] <gilberth> kakuhen: Many thanks! Again.
[09:47:54] <kakuhen> gilberth: so for instance, you can make something hold a strong reference to an object (which increments the refcount, unlike weak reference) and it should survive outside the pool
[09:48:02] <kakuhen> np
[09:48:55] <gilberth> lotuseater: How in hell would you bumb reference counts on (setf x y)? y could well be an instance of your nifty class, or something else entirely.
[09:49:15] <lotuseater> hm
[09:49:29] <gilberth> kakuhen: Oh dear. Yes, this kludge for handling circular data structures.
[09:49:37] <lotuseater> so for what do you use metaclasses?
[09:50:12] <gilberth> For having a different kind of classes.
[09:51:14] <hayley> Let's see, for changing up the class precedence list algorithm, for making slot access do something else, for sticking annotations on slots...
[09:51:30] <lotuseater> hayley: ^^
[09:51:48] <kakuhen> hayley: I once tried implementing a form of refcounting by making a slot holding the count
[09:51:54] <kakuhen> i quickly landed myself at the diamond problem
[09:51:55] <hayley> My apologies.
[09:52:27] <lotuseater> kakuhen: or you mean like circle-ellipse?
[09:52:27] <kakuhen> refcounting becomes a headache when you mix in classes at runtime
[09:52:43] <kakuhen> lotuseater: no, that's a problem with types I think
[09:52:52] <hayley> For the refcounting, rather. In CL the diamond problem is sort of avoided as IIRC superclasses are deduplicated.
[09:52:54] <lotuseater> ah yes
[09:53:25] <lotuseater> kakuhen: but CLOS supports you great with things like that :)
[09:53:30] <kakuhen> it's more like uhh, say you have a class bank-account and two classes bofa-account and wf-account (both of which have bank-account as their superclass)
[09:53:41] <kakuhen> now create a class whose superclass is both bofa-account and wf-account
[09:53:47] <kakuhen> what path do you take for accessing a slot in bank-account
[09:53:52] <kakuhen> that's the diamond problem, iirc
[09:53:53] <hayley> One second...
[09:54:23] <kakuhen> C++ has a very ugly solution to this using virtual inheritance. I forgot how it works since I've been months out of uni and only needed to care about it in some mandatory programming class.
[09:54:33] <kakuhen> CLOS apparently solves it with MOP voodoo
[09:54:46] <kakuhen> Objective-C solves the problem by just saying "you can't do that"
[09:54:52] <hayley> No MOP necessary, just that it eliminates duplicates in the class precedence list.
[09:55:10] <hayley> (defclass bank-account () ()) (defclass bofa-account (bank-account) ()) (defclass wf-account (bank-account) ()) (defclass kakuhens-account (bofa-account wf-account) ())
[09:55:33] <hayley> (sb-mop:finalize-inheritance *) (mapcar #'class-name (sb-mop:class-precedence-list **)) â‡’ (KAKUHENS-ACCOUNT BOFA-ACCOUNT WF-ACCOUNT BANK-ACCOUNT STANDARD-OBJECT
[09:55:33] <hayley>  SB-PCL::SLOT-OBJECT T)
[09:55:59] <kakuhen> i see
[09:56:21] <kakuhen> objective-c just disallows multiple inheritance so the problem is avoided, though you can get really close to it via categories, which behave nearly identically to mixins
[09:57:21] <lotuseater> C++ has multiple inheritance?
[09:57:53] <kakuhen> yes
[09:58:15] <gilberth> kakuhen: Just came to my mind: In C++ delete methods are at times used, when we would use unwind-protect. Also, see: <http://clim.rocks/gilbert/dynbind/unwind_protect.c> which is the same, but in C (GCC). When curious look at the other examples in <http://clim.rocks/gilbert/dynbind/>
[09:58:17] <White_Flame> the "diamond of death" is a C++ term
[09:58:42] <kakuhen> lotusflame: say you have classes X and Y; then you can do something like class Z: public X, public Y { ... }; to inherit from both X and Y
[09:59:51] <White_Flame> a<-b, a<-c, (b,c)<-d = diamond of death
[09:59:59] <lotuseater> I'm the flame!
[10:00:53] <White_Flame> oh sorry, websearch says it's actually the "Deadly Diamond of Death"
[10:01:02] <White_Flame> just as a greater indicator of how messed up it is in C++
[10:01:17] <kakuhen> my programming midterm at uni forced us to deal with the diamond problem, it was kinda funny
[10:01:29] <kakuhen> i also have no idea how polymorphism works in C++; i got marked down points for not using it even though I was very very convinced I was usig it
[10:01:31] <kakuhen> using*
[10:01:32] <gilberth> Is there non-fatal death?
[10:01:49] <White_Flame> "He's only _mostly_ dead" ?
[10:02:08] <lotuseater> oh no, marked down points *scary*
[10:02:14] <gilberth> Heh. Then I am only mostly alive.
[10:02:27] *** Joins: robin (~robin@user/terpri)
[10:02:36] <contrapunctus> White_Flame: Â«Deadly Diamond of DeathÂ» Redundant Department of Redundancy
[10:04:23] <White_Flame> yep
[10:04:50] <White_Flame> the Evil Problem of Evil Evilness
[10:05:55] <lotuseater> kakuhen: ironic is when those people who mark down points don't have a real deep clue about the thing themselves
[10:07:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[10:07:07] <kakuhen> i had some homework assignment involving linked lists; i forgot what i was supposed to do, but i found it way easier to implement in lisp
[10:07:21] <kakuhen> so i ended up making a half-assed lisp in my homework assignment just to do this one thing to complete my homework correctly
[10:07:33] <kakuhen> i didnt comment anything besides "sorry" and got points removed :')
[10:08:31] <kakuhen> actually i dont even think it was half close to being a lisp; i just implemented a bunch of common macros in C++ so that I could do what I did in ~30 seconds in my *scratch* buffer
[10:09:02] <kakuhen> think cons, car, cdr, nullp, and so on.
[10:09:11] <kakuhen> null*
[10:09:45] <gilberth> Have you called it greenspun.cpp?
[10:10:37] <kakuhen> clever name; i wish i did that now
[10:10:39] <lotuseater> gilberth: i thought exactly the same while reading
[10:10:57] <lotuseater> or greenspun10.cpp
[10:11:53] <kakuhen> I found somebody write a lisp using just the C preprocessor
[10:12:01] <kakuhen> he got way further than I did with C++
[10:12:16] <kakuhen> https://github.com/BlueFlo0d/CSP
[10:12:16] -ixelp- GitHub - BlueFlo0d/CSP: Compile-time LISP interpreter on C macro preprocessor
[10:12:44] <lotuseater> or you have a lisp macro preprocessor that produces C
[10:14:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:20:36] *** Joins: makomo (~makomo@user/makomo)
[10:22:59] <gilberth> kakuhen: Heh, that might be useful as part of the test suite for my cpp in CL.
[10:23:19] <gilberth> I wonder, if you can get way further with m4.
[10:23:51] <kakuhen> i have no idea how m4 works or what it even does
[10:24:07] <kakuhen> i attempted updating automake(?) on macports, and when i saw the sheer amount of m4 files to patch, i gave up
[10:24:39] <gilberth> kakahuen: It's a preprocessor, but unlike cpp it can redefine macro and has conditionals.
[10:25:05] * gilberth needs nick completion.
[10:25:10] <gilberth> Sorry.
[10:25:50] <gilberth> kakuhen: So, it should be possible to write Lisp in m4. As the implementation in TeX I recently found.
[10:26:25] <gilberth> https://ctan.org/pkg/lisp-on-tex?lang=en
[10:26:26] -ixelp- CTAN: Package lisp-on-tex
[10:27:40] <lotuseater> uii
[10:29:12] <hayley> https://www.youtube.com/watch?v=7DuL114EMmo
[10:29:13] -ixelp- Eloise - YouTube
[10:32:08] * hayley uploaded an image: (21KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/TfzTHJqbYDBCqdzUuswqTBVc/the-duality-of-man.png >
[10:32:09] <hayley> The duality of man
[10:32:59] <lotuseater> hah.
[10:33:17] <lotuseater> types are theorems
[10:35:05] <hayley> Yes. You can misread the prover output, but you'll be none the wiser, and so it will appear you successfuly proved something to be correct.
[10:35:26] <lotuseater> nice
[10:35:28] <kakuhen> curry-howard HYPOTHESIS
[10:35:37] <lotuseater> or isomorphism
[10:35:43] <hayley> IT'S JUST A THEORY!!!1!!!!1ONE
[10:35:45] <kakuhen> isomorphism of what though
[10:35:46] <kakuhen> :3c 
[10:35:59] <hayley> isomorphism of types to me doin ur mum
[10:36:04] <hayley> ðŸ¤”
[10:36:10] <lotuseater> lol
[10:36:21] <kakuhen> i am confused
[10:36:36] <kakuhen> i dont even know what a type is, much less qualifying it to that
[10:37:01] <lotuseater> hm i thought the term hypothesis applies to unproved things. or conjecture
[10:37:17] <kakuhen> well i call it a hypothesis for a very specific reason
[10:37:45] <hayley> A type is a miserable set of values.
[10:37:54] <kakuhen> i haven't seen an actual formulation of any proof, let alone a statement of the isomorphism
[10:38:09] <kakuhen> but it is nonetheless sometimes helpful to consider connection between logic, category theory, and type theory
[10:38:26] <kakuhen> so my mind registers is as a convenient assumption
[10:38:30] <kakuhen> and i apply the word hypothesis to it
[10:38:34] <kakuhen> registers it*
[10:38:39] <lotuseater> and when you can at least give one value of a type this gives that this type exists, in a constructive way
[10:38:52] <hayley> Each set could be specified with a predicate, i.e. { x | P(x) } and then if we can construct a function from type A to type B, then we have an implication like \forall (x : A(x)) B(x)
[10:39:39] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[10:40:07] <lotuseater> kakuhen: and as you can't give a value of type "void" this type can't exist :)
[10:40:27] <kakuhen> hayley: i recall briefly seeing the internal language of a category giving rise to some type theory, but that was almost 1 year ago in one of my classes, so i recall nothing about it
[10:40:48] <kakuhen> I just recall objects corresponding to "types" whatever they are, and morphisms being--something--something similar to your function
[10:42:03] <kakuhen> oh i think i remember it now
[10:42:11] <kakuhen> so your objects were non-dependent types, whatever that meant
[10:42:24] <kakuhen> and then you had X-dependent types, which were morphisms Y->X
[10:42:34] <kakuhen> and this was all done in a cartesian closed category
[10:42:44] <hayley> Do I look like I know what a morphism is?
[10:42:54] <kakuhen> yes
[10:43:01] <hayley> https://www.youtube.com/watch?v=QwucZK1BCj4
[10:43:01] -ixelp- Do I look Like I know What a JPEG is - YouTube
[10:43:08] <lotuseater> :D
[10:43:15] <kakuhen> listen, jack, how do I open PDF?
[10:43:48] <lotuseater> kakuhen: you could have a read at "Category Theory for Programmers" for that
[10:44:02] <hayley> I'm alright Jack, keep your types off my stack...
[10:44:02] <gilberth> hayhey: Do you actually visitid an university?
[10:44:03] <kakuhen> i think i learned enough CT from my algebra classes
[10:44:03] <lotuseater> and dependent types are such that depend on values
[10:44:23] <kakuhen> ive seen type theory pop up exactly twice -- once in lean and another time when reading on some stuff about categories
[10:44:26] <hayley> gilberth: Maths is next semester. But it's 50-50 w.r.t I see it online or in person.
[10:44:36] <hayley> But then that maths is just statistics.
[10:44:55] * hayley studies maths in #lispcafe
[10:44:57] <gilberth> Oh dear! Statistics, you say? Boring.
[10:44:57] <kakuhen> im actually still confused at how programmers even use category theory, if at all
[10:45:08] <kakuhen> for me it is mostly a convenient language to describe things in algebra
[10:45:12] <kakuhen> rather than a tool
[10:45:26] <ck_> for street cred, of course
[10:45:34] <kakuhen> what'd be pages of mundane/routine checks in algebraic geometry can be neatly summarized in a few words thanks to category theory
[10:45:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:45:40] <kakuhen> and apparently this stuff has applications to programming too
[10:46:02] <lotuseater> kakuhen: some programming languages which build on it make good use of some properties
[10:46:09] <kakuhen> i did the mistake of trying to learn haskell, actually
[10:46:15] <kakuhen> i got really mad when i saw people say things like
[10:46:19] <kakuhen> "if you squint, Hask is a category"
[10:46:25] <kakuhen> ah yes, if you squint hard enough, then 2+2=5
[10:46:27] <hayley> Monad m => m a -> (a -> m b) -> m b
[10:46:28] <kakuhen> >.<
[10:46:36] <lotuseater> haha
[10:46:40] *** Joins: lisp123 (~lisp123@45.130.83.191)
[10:46:44] <kakuhen> with that said, I wanted to see how monads actually used in programming
[10:46:52] <kakuhen> and it seems that haskell attempts to mimick kleisli triples though im not entirely sure
[10:46:55] * hayley wants [exists e. SomeTypeclass e => e] type in Haskell
[10:47:07] <kakuhen> ive never used the language, and we didnt really cover klesli categories much in my CT class since they aren't that interesting to mathematicians
[10:47:12] <lotuseater> they are eg for managing side effects, but not just for that
[10:47:18] <kakuhen> the eilenberg-moore category tends to be more interesting
[10:47:20] <kakuhen> or at least we focused mostly on that
[10:47:50] <kakuhen> anyway, i really hate how the word "functor" gets misused in C++, and I thought SML would be better
[10:47:57] <kakuhen> oh no, turns out the actual functor is ffunctor
[10:48:02] <kakuhen> so that made me take a hard pass on SML
[10:48:12] <kakuhen> then a friend told me that functors in haskell are actual functors (actual = how we define them in math)
[10:48:24] <kakuhen> so I decide to take a look and then see this huge mess online about "let's squint hard enough so that Hask is a category lol"
[10:48:25] <kakuhen> >.<
[10:48:28] <hayley> .oO( https://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html )
[10:48:29] -ixelp- Room 101: A DOMain of Shadows
[10:48:51] <kakuhen> eventually this same friend poisoned my mind with lisp
[10:48:51] <lotuseater> yes it's mathematically :)
[10:49:07] <kakuhen> so now i just use common lisp and rarely anything else; and i keep math to my math studies/intersts
[10:49:15] <kakuhen> interests*
[10:49:40] <lotuseater> lisp is more built around set theory
[10:49:49] <kakuhen> yeah i heard the type stuff is based around set theory
[10:50:01] <kakuhen> that's fine by me; im not a position to understand the proof of gigard's paradox
[10:50:08] <kakuhen> and in practice the implication of that paradox doesn't matter, i think?
[10:50:14] <White_Flame> lisp is so much more of a practical language than so many others
[10:50:33] <White_Flame> even with its "functional" (in the classical sense) programming style
[10:51:44] <lotuseater> White_Flame: and every time all this blubbery of others with "oh but it's also just turing complete as mine"
[10:52:45] * gilberth notes, that strictly speaking, even the whole universe is not Turing complete.
[10:52:59] * hayley thinks the state space is large enough to not care.
[10:53:14] <kakuhen> yeah i recall first hearing that lisp is functional programming; at the time i didnt know much programming so i didnt really understand/care about that claim
[10:53:16] * gilberth thinks that is handwaving.
[10:53:28] <lotuseater> hayley: just ~260qubits :P
[10:53:31] <kakuhen> but nowadays i like lisp so much because of the fact you can adapt it to several paradigms
[10:53:38] <hayley> lotuseater: Only?
[10:53:41] <kakuhen> though in my experience I feel very heavily biased towards "CLOS-style"
[10:53:45] <lotuseater> haha yes :D
[10:54:03] <hayley> 16GiB of primary memory, eight bits per byte, however many cores with however many registers...
[10:54:25] <White_Flame> cache...
[10:54:35] <gilberth> disk...
[10:54:38] <hayley> Let's assume cache coherency before I blow my mind.
[10:55:01] <hayley> Maxima doesn't feel like computing 2^(16*2^30 * 8) without blowing the heap so...
[10:55:04] <gilberth> The network ...
[10:55:04] <lotuseater> von neumann bottle neck
[10:55:52] <hayley> moar cores
[10:55:55] <kakuhen> i just want to understand computer audio -- the stuff i learn along the way is kinda neat though
[10:56:12] <lotuseater> or Knuth tower notation 2â†‘â†‘2â†‘â†‘2â†‘â†‘2â†‘â†‘2â†‘â†‘...â†‘â†‘2
[10:56:12] <kakuhen> i don't caer about turing completeness -- i just want giant magnet to vibrate
[10:57:04] <gilberth> What would the magnet do besides vibrating?
[10:57:13] <kakuhen> burn a copper coil
[10:57:20] <lotuseater> what a side effect
[10:57:25] <White_Flame> ackshually, the magnet doesn't vibrate
[10:57:32] <kakuhen> hahahah i knew this was gonna happen
[10:57:35] <kakuhen> i laughed irl
[10:57:36] <hayley> It still takes minutes to go through all the cases of four processes and a mutex.
[10:57:45] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 248 seconds)
[10:57:49] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[10:58:17] <hayley> <>(theorem provers go acceptably fast) \* or something idk temporal logi
[10:58:19] <hayley> *logic
[10:58:40] <kakuhen> but all jokes aside, as a kid i played around a lot with music production, and at one point I wanted to make my own VST plugins -- I did nothing programming-related for 7-8 years and now here I am, trying to make a flac decoder in lisp
[10:58:46] <gilberth> kakuhen: Actually I was hoping for some very high voltage to have nice sparks. And you gave me fire? It has a plasma, too. Granted.
[10:59:02] <lotuseater> oh cool
[10:59:05] <hayley> * Modification history * Last typoed Thu 2021-08-19 16:28:35 * Created Thu 2021-08-19 16:28:20
[10:59:43] <lotuseater> hayley: you are from the future
[10:59:58] <kakuhen> gilberth: there are specific kinds of failures in subwoofers that can make beautiful sparks for you; I forget which exact ones, however.
[11:00:06] <hayley> gilberth: can I have money for a 1000-core shared memory machine to run TLC faster
[11:00:29] <gilberth> hayley: Nope. I am short.
[11:01:19] <White_Flame> don't get squoze!
[11:01:33] <gilberth> hayley: And besides, you would use it to mine crypto, anyway.
[11:01:42] <hayley> gilberth: I would not.
[11:01:51] <kakuhen> i would mine dogecoin
[11:02:07] <kakuhen> i was driving to los angeles yesterday and on the way i found a chinese bank with a giant banner
[11:02:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:02:10] <kakuhen> "ACCEPTING DOGECOIN"
[11:02:12] <gilberth> hayley: Words, milady, only words. tztz
[11:02:27] <hayley> https://lemmster.de/talks/MSc_MarkusAKuppe_1497363471.pdf how 2 optimize TLC
[11:02:32] <lotuseater> oh then you can make use of this new book with racket and bitcoin hayley twittered about :D
[11:02:46] <hayley> gilberth: I would just use my GPU for that, since mining is all lockstep. Model checking...not so much.
[11:03:10] <lotuseater> kakuhen: ah you're at the westcoast? ^^
[11:03:18] <kakuhen> im sorry, this was next to a chinese bank
[11:03:23] <kakuhen> this building seems unlabelled
[11:03:28] <White_Flame> hmm, what sort of 1000 core cpu options are out there?
[11:03:47] <gilberth> hayley: There is a CS department in my home city?! News to me.
[11:04:01] <lotuseater> i've never seen a chinese bank here
[11:04:07] <kakuhen> https://imgur.com/i3L3Edx
[11:04:07] -ixelp- Imgur: The magic of the Internet
[11:04:15] <hayley> The paper is about using a faster hash table, but they use TLA+ for the description, so I can't tell if they are modelling a hash table and optimizing that, or they gave TLC a new hash table.
[11:04:23] <kakuhen> i promise i am not standing in the middle of the freeway
[11:04:45] <kakuhen> lotuseater: correct
[11:05:02] * hayley notes the hash table is a cache and eviction has to write to disk, so shouting "USE NONBLOCKINGHASHMAP" at the author wouldn't work.
[11:06:38] <hayley> LongArrays now? I think I did actually find this while scanning the TLA+ source code.
[11:07:02] <hayley> "The implementation is included in the master branch of the official TLA+ repository" Okay, the author really isn't fucking about.
[11:08:36] <White_Flame> hm, intel phi only went up to 72 processors
[11:10:19] <gilberth> hayley: Curious, it says: "This document can befound by searching the Web for the 17-letter string uidmscthesis17mak." It's not even random.
[11:10:30] <lotuseater> oh noez how do i even run my aaaapps then?
[11:11:58] <gilberth> Guess, I spoiled that, would #lispcafe logs ever appear on the internet.
[11:12:24] <hayley> "First, the popular approach of lock-striping to eliminate lock contention does not scale. Our exp eriments show, that an increase in the numb er of locks, leads to what can be described as lock coherence." Woohoo!
[11:13:02] <lotuseater> I'm hungry.
[11:13:03] <hayley> Once I applied Amdahl's law and the birthday paradox to figure when striping ends up locking a lot, but that was purely theoretical.
[11:13:24] <gilberth> hayley: Have you found fancy formatting options, finally?
[11:13:37] <hayley> gilberth: Eh?
[11:13:39] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[11:14:02] <lotuseater> welcome back mr_rob0t 
[11:14:49] <gilberth> hayley: It's in reverse here.
[11:14:59] <hayley> Weird.
[11:15:42] <gilberth> With a ^V in inbetween. My client interprets that.
[11:16:29] <hayley> Hm, doubt a GPU will handle a state space search problem well. And we have to fit the fingerprint set in memory, which is possible but not scalable.
[11:17:49] <hayley> Or not: https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.169.1121&rep=rep1&type=pdf
[11:18:06] <gilberth> hayley: http://clim.rocks/gilbert/reverse-irc.png
[11:18:25] <hayley> Must have been TeX interference.
[11:18:56] <gilberth> Yes, and there is some strike-though earlier.
[11:19:09] <lotuseater> erc also highlights that for me
[11:19:11] <gilberth> Which is ^^
[11:19:36] <hayley> That said, I wonder how well a dumb NonBlockingHashMap "scales" on CLOSOS paging.
[11:21:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:21:15] <hayley> Probably terribly, as if you just make a huge vector and you have totally random access, you get nowhere fast.
[11:22:18] <lotuseater> "Better gone bad by driving than good by walking."
[11:23:27] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[11:26:17] <hayley> https://www.youtube.com/watch?v=k_zwxCp8Blc
[11:26:17] -ixelp- The Smiths - Nowhere Fast - YouTube
[11:28:21] <kakuhen> is BLOCK keyword reserved in common lisp?
[11:28:44] <hayley> BLOCK is the name of a special form, but it is not a keyword.
[11:28:58] <kakuhen> I want to do something like (defmethod metadata-action ((block flac-metadata-block)) (format t "Unimplemented.~%"))
[11:29:08] <kakuhen> basically the "default" method for an object I have and I intend to override
[11:29:17] <hayley> That's fine (IIRC).
[11:29:19] <kakuhen> but my emacs highlights 'block' and makes me think it is reserved
[11:29:23] <kakuhen> ok cool
[11:29:24] <hayley> But s/format t/error/
[11:29:29] <kakuhen> w
[11:29:32] <gilberth> HASH-KEYS is a keyword :-)
[11:29:38] <kakuhen> i keep forgetting fail silently is not a good idea
[11:29:51] <kakuhen> well in my case I want to do it because I only care about two things in metadata blocks of a FLAC file
[11:29:55] <hayley> Yes, the Emacs highlighter is kind of dumb. Though most languages don't let you name e.g. a variable "int" or "return".
[11:30:20] <kakuhen> 1. streaminfo, and 2. is this metadata block the final one? The former gives me useful information like channels, sample rate, etc. The latter lets me know when I can start processing frames
[11:30:37] <gilberth> Indeed, and you could even shadow symbols.
[11:30:49] <kakuhen> >Though most languages don't let you name e.g. a variable "int" or "return".
[11:30:58] <kakuhen> yeah, and the highlighter in emacs made me think this was the case heh
[11:31:12] <gilberth> #define int myint // :-p
[11:31:18] <hayley> Hm, there's pretty close to a 100x speedup on 100 cores. Anyone want to pool money for one server to run TLA+ (and no mining, no Minecraft servers, no fun allowed)?
[11:31:28] <kakuhen> gilberth: my favorite part of objective-c is the definition of boolean
[11:31:51] <kakuhen> typedef signed char BOOL; then YES and NO are defined as (BOOL)1 and (BOOL)0, respectively.
[11:32:01] <kakuhen> this leads to real funny stuff if you do the mistake of comparing BOOLs
[11:32:27] <gilberth> How is it defined? #define false (0!=0) ? Just in case the C standard would change?
[11:33:09] <kakuhen> I gave the definition
[11:33:23] <gilberth> A signed char, you say? Hmm. Never bothered with YES and NO. But then I don't use NULL either, as 0 is the perfect null pointer in C.
[11:33:23] <kakuhen> BOOL is typedef'd as a signed char. Then NO and YES are just casting 0 and 1 (resp.) to this type
[11:33:43] <hayley> Sadly both Google and Microsoft only seem to let you use the itty bitty servers on your "free trial".
[11:33:57] <gilberth> kakuhen: I type slowly and can't read while typing. :/
[11:34:14] <kakuhen> oh, that's fine
[11:34:16] <kakuhen> I'll keep that in mind
[11:34:36] <hayley> If I did support contracts for decentralise2, I would consider paying for something to make the theorem prover faster. Otherwise, yeah no I'll wait.
[11:35:15] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[11:38:01] <gilberth> kakuhen: I consider it somewhat dangerous to have BOOL being a char. A cast would only keep the lower eight bits.
[11:38:46] <kakuhen> iirc the reason it is signed char is due to a historical reason
[11:39:30] <gilberth> kakuhen: Because 'char' could either be signed or unsigned?
[11:39:35] <kakuhen> C compilers (during the infancy of objective-c) were inconsistent at the time for the size of chars and ints
[11:39:41] <kakuhen> but they all somehow agreed on the size of signed char
[11:39:44] <kakuhen> so they went with that
[11:40:29] <gilberth> Isn't sizeof(char) defined as being 1?
[11:40:57] <kakuhen> was it defined as that in 1980
[11:41:17] <gilberth> I would bet so, but I am not sure.
[11:41:34] <kakuhen> me too actually; in any case, it's a weird story that a little birdie told me
[11:42:10] <gilberth> But ISO C is good. It allows for sizeof(void*), sizeof(long), sizeof(double), etc all being just 1.
[11:43:19] <gilberth> And char can have a trap representation/value. So memcpy could be implemented in terms of char*, even when not everything you read really is a byte.
[11:44:13] <gilberth> Hence, as long as you don't look, a variable declared char could also hold a pointer, say. This comes handy, when you want to implement C in CL.
[11:45:12] <gilberth> At another place, it's said that a 'char' is the smallest addressable unit. And when your C runs in CL, that is a Lisp object.
[11:46:00] <gilberth> Or on my itty-bitty TTL^CMOS design, which I really need to build, which is word-addressed.
[11:46:45] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[11:46:58] *** Joins: lisp123 (~lisp123@45.130.83.191)
[11:47:56] <gilberth> kakuhen: When was ANSI-C? I found a copy and am curious.
[11:48:08] <kakuhen> no idea; I'm actually very bad at C
[11:48:27] <kakuhen> i would assume somewhere in the mid 80s
[11:48:32] <kakuhen> oh wait, yeah, 1989
[11:48:37] <lotuseater> better than me I'm sure :P
[11:49:26] <gilberth> kakuhen: That late?
[11:49:37] <kakuhen> Yeah. C89 is ANSI-C iirc
[11:49:55] <kakuhen> and stdbool wasn't even a thing until C99!
[11:50:00] <kakuhen> thats 99, not 99 factorial
[11:50:16] <gilberth> Yes, as you mention it. So back to K&R.
[11:50:20] <lotuseater> oh someday it will be version 99! :D
[11:51:05] <gilberth> kakuhen: I always wondered what purpose that stdbool really serves.
[11:51:25] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[11:51:39] <kakuhen> supposed to somehow unify the way C programmers defined and dealt with booleans, but idk how much it worked
[11:51:40] <gilberth> lotuseater: We have C17 now.
[11:52:04] <lotuseater> i said someday ^^
[11:52:06] <gilberth> kakuhen: Ex-Pascal hackers?
[11:52:40] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[11:53:08] <gilberth> kakuhen: Actually, I am fine with everything !=0 being true, like in CL everything non-NIL being true, too.
[11:53:28] <kakuhen> Objective-C does something similar for id's, so the behavior felt really natural to me in Common Lisp
[11:53:53] <kakuhen> Swift has optionals and other fancy modern features, but in Objective-C, checking against null was as simple as if(obj) { /* not null! */ }
[11:54:31] <gilberth> Aren't id's just pointers? On the other side of my beloved Obj-C bridge they are.
[11:55:03] <kakuhen> they are objc_object structs
[11:55:16] <kakuhen> well, pointers to such structs.
[11:55:35] <kakuhen> I assume in CCL they appear as a macptr and they just hide the foreign struct stuff.
[11:56:26] <kakuhen> but yes, they are just pointers to classes, and it lets you have dynamically typed objects which is really nice
[11:56:31] <kakuhen> pointers to instances of classes*
[11:57:02] <kakuhen> and if you want safely send messages to an id object, then you'd better be checking [obj respondsToSelector:@selector(someMethod:)]
[11:57:12] <kakuhen> otherwise you get a runtime error and possibly your program crashing
[11:59:34] <gilberth> kakuhen: ANSI-C defines sizeof(char) as 1.
[12:00:33] *** Joins: razzy (~razzy@user/razzy)
[12:00:55] <gilberth> kakuhen: Yes, it's essentially macptrs, but typed. That is: CCL knows when it gets an NSString say.
[12:01:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:02:02] <gilberth> I would be surprised, if it would be different for K&R because: How to implement memcpy otherwise?
[12:04:20] <gilberth> Yes, K&R is the same.
[12:05:02] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 245 seconds)
[12:05:02] <contrapunctus> hayley: where's that image from?
[12:05:22] <contrapunctus> * Reddit thread link?
[12:05:25] <hayley> contrapunctus: Which one?
[12:05:33] <gilberth> B has no char type. char is a function there.
[12:05:34] <hayley> Right, one moment...
[12:05:48] <hayley> https://www.reddit.com/r/programming/comments/p6yerh/can_you_guarantee_that_a_function_has_no_bugs/
[12:05:49] -ixelp- Can you guarantee that a function has no bugs? : programming
[12:06:58] <kakuhen> before opening the link, i'll assume the answer has to do with formal verification of programs
[12:07:19] <gilberth> Can you guarantee that the specification, which you proof, has no bugs?
[12:07:37] <hayley> Two points to kakuhen and gilberth each.
[12:08:30] <kakuhen> I just opened the link, I am seeing TLA a lot tonight
[12:09:35] <kakuhen> also the discussion they are having about rice's theorem reminds me of my metalogic class
[12:09:39] *** Joins: shka (~herr@109.231.62.239)
[12:09:44] <kakuhen> there are two big issues when it comes to formal languages -- semantics and syntax
[12:09:54] <kakuhen> if you focus on semantics then you get into model theory and other good stuff
[12:10:00] <kakuhen> syntax leads you to proof theory, which i've never studied
[12:10:10] <kakuhen> my metalogic class focused mostly on models
[12:11:50] *** Joins: selwyn (~selwyn@user/selwyn)
[12:13:27] * gilberth spots chapter 17 in K&R titled "Anachronisms" and is curious, but only finds "x=-1;" for decrementing x and "int x 1;" for initializing x.
[12:13:52] <hayley> Does it say "See the rest of this book?"
[12:14:37] <gilberth> Well, it was written as it was eh written.
[12:14:37] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[12:15:19] <gilberth> I like the rational for changing it to "int x = 1;" because otherwise "int x (1+2);" could confuse the compiler.
[12:16:55] <gilberth> As it could be taken as a function declaration. Hello, why haven't you fixed "a(b);" along with it. It could be a function invokation, or a declaration. Likewise "a*b;"
[12:17:51] <gilberth> Or wasn't typedef there yet? /me isn't old enough.
[12:19:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:21:00] <ck_> what was the name for those three-character escape sequences again?
[12:21:16] <gilberth> trigraphs.
[12:21:22] <gilberth> easy.
[12:22:09] <ck_> thanks
[12:22:23] <gilberth> Pascal has digraphs, but that are actual tokens. I used them once with Turbo Pascal under CP/M 80
[12:23:39] <ck_> "trigraphs [...] are removed from C++17 despite the opposition from IBM" says w'pedia
[12:24:09] <gilberth> Have you ever seen them?
[12:25:03] <ck_> in production you mean? I don't think so, no.
[12:26:11] <gilberth> They are handled right before the parser even sees them and a nightmare to handle correctly. One of the reasons that there is \? defined for chars and string literals.
[12:26:36] <gilberth> ck_: Well, just reading about them wasn't what I meant. ;)
[12:46:49] <pjb> well, trigraphs were nice, but even if removed from the standard, this doesn't prevent an implementation to use them, as a custom encoding of source files.  The standard doesn't force the implementations to use bare ascii or unicodeâ€¦
[12:51:33] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (Remote host closed the connection)
[13:02:31] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[13:05:05] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:14:16] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:15:06] *** Joins: hayley (~theemacss@user/hayley)
[13:21:13] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[13:27:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:29:25] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:32:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:35:40] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[13:36:37] <selwyn> what was it like back in the day with the preponderance of iso-8859* and ascii
[13:37:21] <ck_> the sound was great
[13:37:42] <ck_> https://www.youtube.com/watch?v=_3SLadufyx0
[13:37:42] -ixelp- Conner CP30254 hard drive sounds - YouTube
[13:38:29] *** Joins: nihaal (~nihaal@117.96.193.218)
[13:40:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:00] <pjb> selwyn: it was worse with national ASCII variants!
[13:48:55] <selwyn> i can imagine
[13:49:07] <pjb> selwyn:  eg. in French ASCII,  the codes 123 and 125 were for Ã© and Ã¨ while in US-ASCII it was for { and }.
[13:49:18] <pjb> and so on, for each variant.
[13:49:35] <pjb> Hence the interest for digraphs and trigraphs.
[13:49:40] <selwyn> right
[13:50:21] <pjb> iso-8859-* helped solve the problem since then the code <128 were pure US-ASCII, and the national characters were >=128.
[14:00:12] *** Joins: razzy (~razzy@user/razzy)
[14:01:22] <edgar-rft> you would have been surprised how many nations Amerika suddenly had!
[14:04:57] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[14:10:10] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 240 seconds)
[14:16:00] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[14:20:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:20:49] <selwyn> god i can't imagine writing code with those trigraphs
[14:23:15] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[14:24:26] *** Joins: selwyn (~selwyn@user/selwyn)
[14:26:42] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:27:06] *** Joins: selwyn (~selwyn@user/selwyn)
[14:35:18] *** Joins: razzy (~razzy@user/razzy)
[14:38:55] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:41:20] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 256 seconds)
[14:57:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:00:38] *** Joins: razzy (~razzy@user/razzy)
[15:06:25] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:11:57] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[15:12:24] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[15:16:10] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:16:22] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 245 seconds)
[15:17:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:18:49] <hayley> selwyn: https://www.youtube.com/watch?v=CqYjKdKCm_I
[15:18:50] -ixelp- I'm banishing you to the shadow realm! - YouTube
[15:20:58] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[15:25:16] *** Joins: nihaal (~nihaal@117.96.193.218)
[15:29:55] <contrapunctus> Why is Common Lisp code so frequently un(der)documented? ðŸ˜­
[15:30:55] <contrapunctus> I hate having to read code to figure out basic use.
[15:33:13] <kakuhen> libraries lack documentation because little people use it 
[15:33:20] <kakuhen> or maybe im saying nonsense since its 4am and im tired orz
[15:34:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:35:33] <hayley> Well, pretty much. Though I had to read the source code of a few programs in other languages to compare algorithms in my paper.
[15:43:45] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:48:57] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[15:52:05] <contrapunctus> And I actually like working on documentation, but it's just very difficult if one is not the original author.
[15:53:42] <contrapunctus> I can still manage restructuring a ton of existing, messy documentation, but filling in the blanks of incomplete documentation (when I'm not the original dev) is beyond me.
[16:13:10] <hayley> https://www.youtube.com/watch?v=GRu1wntfie0
[16:13:10] -ixelp- KOB 13 - Henrique suffers dreadfully, and no one cares - YouTube
[16:15:46] *** Joins: lisp123 (~lisp123@45.130.83.208)
[16:16:07] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[16:22:36] <hayley> https://gbracha.blogspot.com/2011/01/maybe-monads-might-not-matter.html "What do space suits, nuclear waste containers, romantic conquests, monsters, macros, containers, and conversations have in common? Theyâ€™ve all been used as metaphors for monads."
[16:22:38] -ixelp- Room 101: Maybe Monads Might Not Matter
[16:23:30] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:27:53] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 248 seconds)
[16:42:11] <selwyn> oh, newspeak is actually a proglang
[16:42:18] <selwyn> i thought you were making 1984 references all this time
[16:42:32] <sm2n> forgot burritos
[16:43:34] <hayley> selwyn: Newspeak is a doubleplusgood pure messaging language.
[16:45:23] <selwyn> indeed
[16:46:38] <hayley> From the same guy that brought you mixins, Java, mirrors and Dart for some reason.
[16:47:20] <ck_> what's the room 101 of programming
[16:48:46] <selwyn> ck_: the rest of programming
[16:49:36] <ck_> sounds Cantorian
[16:49:47] <hayley> The room where you are subjected to crabs and gophers until you tell me that mirrors are neat.
[16:50:54] <ck_> I'll try to only use the entertainment-park-type concepts like trampolines
[16:51:18] <hayley> inb4 ck_ is a vampire
[17:10:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:13:38] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[17:17:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:26:17] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[17:35:08] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[17:39:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:39:15] <shka> eh
[17:39:25] <shka> so that thread stuff i was doing
[17:39:30] <shka> cleanup was so annoying
[17:39:51] <shka> that i simply decided that it is easier to do it all on a separate process
[17:41:38] <shka> so now i have a lisp process that is starting another lisp process
[17:41:52] <shka> unix programming or lisp?
[17:41:57] <shka> WHY NOT BOTH!
[17:42:18] *** Joins: derelict (~derelict@user/derelict)
[17:42:59] * hayley uploaded an image: (88KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tgKLvPuquFVACscEhIGNqPux/elvis-costello-cringe-compilation.jpeg >
[17:44:38] <shka> well, if destroy-thread sometimes does not destroy thread, i had no choice left
[17:51:00] <hayley> Rule 1 of Bordeaux threads: never destroy-thread
[17:51:17] <hayley> Rule 2 of Bordeaux threads: never destroy-thread
[17:52:27] <shka> so why there is destroy-thread function?
[17:52:30] <shka> *sigh*
[18:01:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:05:59] <hayley> In case you really just need to get rid of a thread and dislike having defined state.
[18:08:01] <random-nick> in sbcl's thread api destroy-thread just schedules an interruption which runs abort-thread iirc
[18:08:13] <random-nick> and bordeaux threads probably uses that function
[18:09:04] <hayley> Yeah, but it is also allowed to disappear your thread too.
[18:30:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:38:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:05:34] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[19:14:30] <clothespin> we need something like Cilk for CL
[19:15:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:22:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:35:54] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[19:40:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:45:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:50:55] <shka> what is cilk?
[19:52:30] <shka> ok, i remember it
[19:52:41] <clothespin> it's a compiler extension and runtime for c/c++ which allows you to parallelize things on a fine grained intelligent basis
[19:55:50] <clothespin> it may be for other languages too
[19:56:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:05:35] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[20:11:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[20:18:30] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[20:23:29] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Read error: Connection reset by peer)
[20:23:42] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[20:26:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:29:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:30:55] <gilberth> Good morning #lispcafe!
[20:31:12] <contrapunctus> Good evening, gilberth 
[20:32:47] <aeth> https://www.cnbc.com/2021/08/19/facebook-launches-vr-remote-work-app-calling-it-a-step-to-the-metaverse.html
[20:32:48] -ixelp- Facebook launches VR remote work app, calling it a step to the 'metaverse'
[20:32:56] <lotuseater> hey gilberth 
[20:37:15] <lotuseater> the first description of this cilk sounds like having Erlang BEAM for C/C++
[20:37:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:40:59] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[20:43:36] <shka> lotuseater: no, it completely different
[20:44:27] <lotuseater> i said it sounds like
[20:44:47] <lotuseater> from this cilk_spawn, cilk_sync
[20:45:16] <lotuseater> so this could be greenspun rule 11 for concurrent programs :)
[20:57:12] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[21:00:41] <mr_rob0t> am i on
[21:01:18] <mr_rob0t> looks like it
[21:04:01] <lotuseater> yes
[21:04:42] <mr_rob0t> How are you, my friend?
[21:04:57] <lotuseater> hm not different than before
[21:05:04] <lotuseater> but i slept some hours
[21:06:07] <mr_rob0t> nice man, same here
[21:06:20] <lotuseater> now getting something to eat
[21:06:43] <mr_rob0t> i think my gf and i are going to get ramen soon
[21:07:06] <lotuseater> sounds good
[21:07:56] <mr_rob0t> as long as its the one place
[21:08:38] <lotuseater> i once did this with a friend
[21:10:21] <mr_rob0t> ooo
[21:10:38] <mr_rob0t> a friend huh? 
[21:10:52] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[21:12:01] <lotuseater> yes why?
[21:12:13] <lotuseater> or what do you mean?
[21:12:35] <mr_rob0t> or...
[21:12:39] <mr_rob0t> a DATE???
[21:12:52] * mr_rob0t *adds spice*
[21:12:53] <lotuseater> we cooked ramen on a gas stove
[21:12:53] <clothespin> august 19
[21:13:02] <lotuseater> no
[21:13:10] <mr_rob0t> oh nice, that can be fun
[21:13:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:13:29] <lotuseater> that was back then when meeting a the hackerspace was no problem
[21:14:16] <mr_rob0t> i wish i knew how to hack
[21:14:54] <mr_rob0t> i've written a ransomware for fun but thats the extent of my background
[21:15:00] <lotuseater> there is more to it than just what the film industry forces
[21:16:28] <mr_rob0t> i try to watch more realistic films about hacking; i saw a hacker reacts and they rate scenes on realness
[21:17:35] <lotuseater> It means solving problems in unusual ways without simply buying ready-made solutions, anyone can do that.
[21:18:08] <mr_rob0t> ah, a true test for an engineer
[21:18:14] <lotuseater> it means NOT being a scriptkiddie with that "oh now I installed Kali Linux"
[21:18:31] <mr_rob0t> what is a scriptkiddie
[21:19:00] <lotuseater> one just using such tools and having even no clue at all about things
[21:19:46] <lotuseater> but thinks it
[21:19:58] <mr_rob0t> see, this is why i was against libs at first; everything i built is purely just the language - rather its js, lisp, php, sql, python or java
[21:20:04] <mr_rob0t> unless i have to
[21:20:55] <mr_rob0t> otherwise, i feel as though it isnt really MY work, you know?
[21:21:09] <lotuseater> no explain a bit
[21:21:24] <mr_rob0t> hm?
[21:21:26] <lotuseater> hm
[21:22:13] <lotuseater> in js, php, sql, python, java you can't build language, you have to live with what they think is "right" or "good"
[21:22:41] <mr_rob0t> correct, i just meant using libs that others have made; i would build it myself.
[21:23:12] <mr_rob0t> like a special math lib that lets you do integrals or whatever; i would rather build it myself than to install the lib and use it
[21:23:13] <lotuseater> that's not always a good idea
[21:23:23] <mr_rob0t>  oh no? how come?
[21:23:26] <lotuseater> of course, nothing easier than that
[21:24:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:24:56] <mr_rob0t> brb
[21:24:58] <lotuseater> but surely you can implement the Risch algorithm
[21:25:41] *** Joins: selwyn (~selwyn@user/selwyn)
[21:26:03] <mr_rob0t> i did exactly that lol
[21:26:43] <lotuseater> the whole thing?
[21:28:59] <lotuseater> even the specification for Risch is long, few cas have it covered completely
[21:30:56] <mr_rob0t> yeah for a calc class. i made a rudementary program so that i can just type the integral in and i gives me the answer
[21:31:02] <mr_rob0t> oh no
[21:31:29] <mr_rob0t> i just took the idea of the algorithm to do something that i needed lol
[21:31:47] <mr_rob0t> i also installed some libs for it
[21:31:47] <lotuseater> that doesn't sound like Risch at all
[21:32:24] <mr_rob0t> i mean, its used to integrate elementary functions, no?
[21:32:50] <lotuseater> Risch algorithm is primarily for finding heuristically if integrals of certain classes have a closed form in elementary functions
[21:33:21] <mr_rob0t> right
[21:33:44] <lotuseater> and this worked symbolically?
[21:33:57] <lotuseater> or just numerically evaluating the integral?
[21:34:28] <mr_rob0t> these functions are obtained by composing things like logarithms, trig functions, etc as well as arithmatic operations like + and - and etc
[21:34:51] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[21:35:24] <mr_rob0t> give it a little tweak here and there... well its more like a revamp. But the logic worked, just needed some reworking
[21:35:29] <lotuseater> so what's the solution to Integrate[Log[x]/x,x] ?
[21:35:33] <mr_rob0t> just numeric
[21:35:53] <mr_rob0t> oof, let me get my pc and see
[21:36:09] <lotuseater> so numerically this isn't Risch at all
[21:36:14] <lotuseater> no do it by hand
[21:38:26] <mr_rob0t> (log^2(x))/2 + C
[21:39:09] <lotuseater> yes
[21:39:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[21:39:49] <mr_rob0t> I guess? Its not supposed to be; but i wanted to make my own wolfram alpha; and that algorithm helped a lot - but it isn't exactly that
[21:40:27] <lotuseater> wolfram alpha is just a web frontend for mathematica
[21:40:49] <lotuseater> you should start when it shall be exact and symbolically with differentiation
[21:40:54] <mr_rob0t> oh shit, it's not a calculator? lol
[21:41:08] <mr_rob0t> i know
[21:41:12] <mr_rob0t> but thats hard
[21:41:15] <lotuseater> so what algorithm did you use?
[21:41:42] <lotuseater> see? even those "simple" things aren't even easy at all
[21:42:17] <mr_rob0t> i feel like i had to have done something right though; it was giving me right answers when it did work
[21:43:16] <lotuseater> it's one thing evaluating things like Sum[1/k^2,{k,1,infinity}] numerically but another knowing it's pi^2/6
[21:43:50] <mr_rob0t> very fair
[21:43:55] <lotuseater> yes and how does it behave for functions like Sin[1/x] near the critical point?
[21:44:54] <lotuseater> but very cool that it works
[21:45:20] <mr_rob0t> it probably crashes, i only made it so far with the program; it handles low complexity calculations - its not exactly Risch-norman
[21:47:37] <lotuseater> ok
[21:48:20] <lotuseater> so primarily get the difference between symbolically and numerically :)
[21:48:39] <mr_rob0t> yeah... i got yelled at a lot for it in class
[21:48:42] <mr_rob0t> but it was right so
[21:48:50] <mr_rob0t> i just didnt have time for the class
[21:49:13] <mr_rob0t> i was a physics and bio and philosophy trip major lol
[21:49:23] <lotuseater> ok
[21:50:18] <mr_rob0t> so i through something together real quick to do work for me; i thought it was neat but it definitely isnt to the level of symbolic stuff
[21:50:27] <mr_rob0t> but i might go back and work on it
[21:52:13] <mr_rob0t> sorry if i sound off; i haven't been this high in a while lol
[21:52:34] <lotuseater> when going from symbolic to numeric you normally loose information
[21:52:51] <lotuseater> high like in "hiiigh"?
[21:53:03] <mr_rob0t> yeah im pretty baked lol
[21:53:20] <mr_rob0t> i usually get high and go on coding tyrads for a few hours
[21:53:37] <mr_rob0t> and why would i want to lose information?
[21:54:14] <lotuseater> i don't know, so the question goes back to yourself as you did it
[21:54:43] <mr_rob0t> idk
[21:55:19] <mr_rob0t> i guess i shouldve put more thought into it lol
[21:55:32] <lotuseater> a bit
[21:56:32] <mr_rob0t> i wasnt a cs major back then cut me some slaaack xD
[21:56:55] <lotuseater> I'm not either.
[21:57:20] <mr_rob0t> whaaat
[21:57:26] <lotuseater> and I am with you :)
[21:57:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:57:43] <lotuseater> but I'm hungry actually
[21:58:01] <mr_rob0t> you're super knowledgable; self teaching is always better in my opinion
[21:58:08] <mr_rob0t> no deadline, added stress
[21:58:15] <mr_rob0t> me too
[21:58:26] <mr_rob0t> might break from here to get food soon :)
[21:58:42] <lotuseater> good
[21:59:07] <mr_rob0t> see you soon :)
[21:59:56] <lotuseater> yeah i think so
[22:00:15] <lotuseater> hope the other people didn't get annoyed too much
[22:00:37] <mr_rob0t> oof same, i forgot to be quiet xD
[22:04:06] <lotuseater> so you can think about the difference between having the square root of 2 as 1.414213... and in the lisp s-expression form '(sqrt 2)
[22:04:27] <mr_rob0t> oh, i see
[22:07:29] <lotuseater> just think about it more :) i gave it to you for one of the next times talking. or that you can apply rules for things like (log (sqrt x)) => (* 1/2 (log x))
[22:13:27] *** Joins: lisp123 (~lisp123@45.130.83.208)
[22:14:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:18:25] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[22:24:48] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[22:31:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:37:37] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[22:39:10] *** Joins: razzy (~razzy@user/razzy)
[22:43:34] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 256 seconds)
[22:44:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:50:38] *** Joins: razzy (~razzy@user/razzy)
[22:54:18] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:55:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:00:36] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-cd4d-9973-178a-1efd.res6.spectrum.com)
[23:06:40] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[23:07:14] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[23:09:34] *** Joins: lotuseater (~lotuseate@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de)
[23:10:00] <lotuseater> hm why can't i reconnect with ERC?
[23:11:35] *** Joins: lisp123 (~lisp123@45.130.83.208)
[23:12:28] <edgar-rft> because ERC hates you
[23:13:05] <lotuseater> ok
[23:16:32] <lotuseater> the web interface is so wibbly wobbly
[23:18:33] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[23:20:38] *** Joins: razzy (~razzy@user/razzy)
[23:21:07] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[23:26:41] <pjb> OnlyFans to Block Sexually Explicit Videos Starting in October <https://twitter.com/business/status/1428422301536727043>
[23:26:42] <pjb> LOL
[23:27:07] <pjb> I've never seen an OnlyFans link for anything other than sexually explicit content :-)
[23:27:20] <pjb> People are idiots.
[23:27:34] <pjb> This is the first thing that you should teach your children.
[23:28:02] <lotuseater> i don't know this at all
[23:28:35] <selwyn> whatÂ´s the pivot? it becomes substack?
[23:29:08] <selwyn> just trying to get investor money perhaps
[23:29:12] <selwyn> but how can it not be profitable
[23:30:27] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[23:30:27] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[23:30:27] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[23:30:27] *** Quits: gko (~user@user/gko) (*.net *.split)
[23:30:41] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[23:30:51] *** Joins: gko (~user@user/gko)
[23:31:00] *** Joins: amirouche (~amirouche@user/amirouche)
[23:31:47] *** Joins: minion (~minion@common-lisp.net)
[23:32:24] <pjb> selwyn: Well I only know OnlyFans from the name and the obviously sexually explicit linksâ€¦
[23:32:29] <mr_rob0t> lotuseater: "/reconnect" doesnt work for you on erc?
[23:32:42] <pjb> Which ironically are linked from pictures that are only suggestives! :-)
[23:32:50] <mr_rob0t> i just had to do it not too long ago
[23:32:54] <pjb> You'd click and pay on onlyfans to have the meat.
[23:33:11] <pjb> Crazy.
[23:33:50] *** Quits: lotuseater (~lotuseate@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de) (Quit: lotuseater)
[23:34:05] <mr_rob0t> i think it was a smart thing to develop
[23:34:10] <mr_rob0t> similar to facebook
[23:34:26] *** Joins: lotuseater (~user@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de)
[23:34:30] <lotuseater> it worked again
[23:35:02] <mr_rob0t> "you can go anywhere online and see pics of hot girls" but facesmash by zuckerberg was successful because it was of hot girls that they knew
[23:35:12] <shka> lol
[23:35:28] <shka> do they don't know what business they are in?
[23:35:41] <mr_rob0t> same with adding the "relationship status" feature in facebook, "are you having sex or not" drive what a lot of people do
[23:36:02] <mr_rob0t> so, with onlyfans, its the same thing; except a lot more explicit
[23:36:58] <mr_rob0t> with an added "salesman/saleswoman" feature that actually might a llow you to make some money if you played your cards wisely and do some decent marketing
[23:37:15] <mr_rob0t> a very clever idea, onlyfans. Wish i thought of it.
[23:37:32] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 245 seconds)
[23:39:27] *** Joins: razzy (~razzy@user/razzy)
[23:47:15] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[23:47:15] *** ChanServ sets mode: +o MichaelRaskin
[23:48:37] *** Joins: lisp123 (~lisp123@45.130.83.208)
[23:50:12] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:51:11] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[23:51:35] *** Joins: minion (~minion@common-lisp.net)
[23:55:32] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 256 seconds)
[23:57:17] *** Joins: razzy (~razzy@user/razzy)
