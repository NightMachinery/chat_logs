##anime/2021-07-14.log:254:[02:18:54] <beaky> !quote lucerne 
##anime/2021-07-14.log:255:[02:18:55] <ImoutoBot> beaky: lucerne has no quotes.
##crypto/2021-06-25.log:116:[02:49:49] *** greyrat was kicked by ChanServ (Invite only channel)
##english/2021-06-14.log:3:[14:57:57] <greyrat> `the said book` or `said book`?
##english/2021-06-14.log:6:[15:12:09] <greyrat> darsie: I feel that way, too, but why? `Said` is not an article, is it?
##philosophy/2021-06-07.log:26:[18:19:12] <greyrat> (Testing if I can message)
##philosophy/2021-06-07.log:29:[18:19:20] <lalia> greyrat: howdy
##philosophy/2021-06-07.log:31:[18:19:28] <greyrat> lalia Thanks!
##philosophy/2021-06-07.log:32:[18:19:45] <greyrat> I am setting up ZNC and emacs, and it's quite obtuse
##philosophy/2021-06-07.log:37:[18:21:43] <lalia> greyrat: you're in good company. plenty of OG emacs fans around here if you're having trouble. I think there's probably a channel or two dedicated to the software even.
##philosophy/2021-06-07.log:183:[18:57:57] <lucerne-> lalia: Can you see this? 😅
##philosophy/2021-06-07.log:184:[18:58:36] <lalia> Yep, lucerne- :)
##philosophy/2021-06-07.log:185:[18:58:59] <lucerne-> Why is my nick lucernce- though
##philosophy/2021-06-07.log:186:[18:59:09] <lucerne-> It should be lucerne
##philosophy/2021-06-07.log:189:[19:00:15] <alix> 'lucerne' is connected with the same IP as yours, which is why your nick on this client is 'lucerne-'
##philosophy/2021-06-07.log:190:[19:00:18] <alix> and greyrat also
#anime/2021-06-08.log:98:[15:04:46] <lucerne> fef Shiki is pretty good, though not that horrorful
#anime/2021-08-05.log:46:[13:18:15] *** greyrat_ was kicked by confact (greyrat_)
#clschool/2021-06-19.log:3:[21:00:02] <greyrat> How do I define a global variable? Using `setq` gives me warnings of `undefined variable: ...`, using `defvar`, `defparameter` declares the value as special.
#clschool/2021-06-20.log:3:[01:44:01] <greyrat> mfiano: Is there any danger of conflicts by using special global vars? Not in my own package (e.g., not in `common-lisp-user'), but with external packages
#clschool/2021-06-20.log:15:[02:30:44] <greyrat> white_flame: Umm. So to override a global variable in the package `y`, I use `(let ((y:*some-var* ...)))`? 
#clschool/2021-06-20.log:79:[16:51:20] <lucerne> Is there a way to write an escaped newline in a string literal, ala "hello\nworld"?
#clschool/2021-06-20.log:83:[17:04:33] <beach> lucerne: I take it you are not pleased with that solution. 
#clschool/2021-06-20.log:84:[17:05:44] <lucerne> beach: It's overkill to use a formatter for a simple new line, honestly. It's not very important, but it's a rough edge.
#clschool/2021-06-20.log:87:[17:06:21] <lucerne> beach: In verbosity
#clschool/2021-06-20.log:90:[17:08:06] <lucerne> Well, newer langs all agree on =\n=. I think the adoption would be better if CL didn't have the rough edges.
#clschool/2021-06-20.log:93:[17:08:41] <lucerne> Why?
#clschool/2021-06-20.log:96:[17:10:19] <greyrat>  Why is it not used for teaching though? 
#clschool/2021-06-20.log:98:[17:11:22] <greyrat> (Though, truth to tell, in my university only Java/C were taught formally. People just picked up other langs like Python when the courses demanded them.)
#clschool/2021-06-20.log:101:[17:12:52] <greyrat> beach: Didn't the students protest? CL wouldn't help on their resumes or scientific computing stuff
#clschool/2021-06-20.log:105:[17:14:05] <greyrat> As opposed to CS, or general humanities?
#clschool/2021-06-20.log:107:[17:15:10] <greyrat> I don't quite knoow what you mean by eng schools, coming from Iran.
#clschool/2021-06-20.log:112:[17:16:41] <greyrat> Makes sense. Non-ambitious people just want a degree, I assume? Were they enthusiastic in learning?
#clschool/2021-06-20.log:116:[17:18:20] <greyrat> I really dislike the education systems though. Most people have no use for what is taught.
#clschool/2021-06-20.log:120:[17:20:12] <greyrat> I mean, CS/SWE is probably one of the most suited majors to teaching practical stuff, but, e.g., I have studied years of chemistry in K12.
#clschool/2021-06-20.log:122:[17:20:30] <greyrat> Which don't help me in anything except holding an intelligent conversation
#clschool/2021-06-20.log:125:[17:21:33] <greyrat> Well, yes.
#clschool/2021-06-20.log:129:[17:22:29] <greyrat> True, but wouldn't even a stupid curriculum that is designed to be somewhat useful beat the current K12 completely?
#clschool/2021-06-20.log:133:[17:22:58] <greyrat> The only courses from K12 that are useful at all are math, and even then, not all of it.
#clschool/2021-06-20.log:135:[17:23:19] <beach> greyrat: I can't argue with K12 in your country.
#clschool/2021-06-20.log:139:[17:24:01] <greyrat> beach: I don't think Iran's would be worse, actually. It's a very STEM-heavy courseload. What do you have in mind that will help students?
#clschool/2021-06-20.log:143:[17:25:08] <beach> greyrat: My domain is at the university level.  I don't have the competence for the lower levels. 
#clschool/2021-06-20.log:144:[17:25:50] <greyrat> I only have experience in CS at that level, where the courses were adequate enough, even though they still aren't very practical.
#clschool/2021-06-20.log:145:[17:26:41] <greyrat> The curriculum was definitely biased towards someone who wanted to pursue a PhD though
#clschool/2021-06-20.log:150:[17:29:00] <greyrat> Indeed! The programs mostly waste time on unpromising projects in my uninformed opinion.
#clschool/2021-06-20.log:153:[17:31:01] <greyrat> I think a project-based model could do the system some good.
#clschool/2021-06-20.log:155:[17:31:51] <beach> greyrat: We need competent teachers more than anything, and the university system does not produce such teachers. 
#clschool/2021-06-20.log:156:[17:32:06] <greyrat> Like, there should be some standard projects that a student should deliver to get their degree. It would vastly improve over programs that don't teach any skills whatsoever.
#clschool/2021-06-20.log:158:[17:32:19] <greyrat> True
#clschool/2021-06-20.log:159:[17:32:35] <greyrat> But isn't this also a cosequence of their SW skills not mattering?
#clschool/2021-06-20.log:161:[17:33:21] <greyrat> E.g., one of my profs who actually worked for the industry (as a data consultant sth), didn't (probably still doesn't) even know about `git`
#clschool/2021-06-20.log:162:[17:33:48] <greyrat> But I think he could do his job. His prooductivity wouldn't improve all that much by knowing, e.g., git.
#clschool/2021-06-20.log:168:[17:36:03] <greyrat> Yes! That idea of mandatory, standard projects would help with this, as the students will fail if they cannot deliver some basic stuff, and a uni can't go on with rampant failing students.
#clschool/2021-06-20.log:169:[17:36:32] <greyrat> The problem is cheating, though.
#clschool/2021-06-20.log:171:[17:37:09] <greyrat> Yes, but the projects could be defined on a national level, and their skill level can be ramped up gradually over the years
#clschool/2021-06-20.log:172:[17:37:40] <greyrat> The profs would then have an incentive to up their game. They are smart people, they will learn the stuff if they need it.
#clschool/2021-06-20.log:174:[17:38:11] <greyrat> Yes. The gov is the most incompetent of all, usually.
#clschool/2021-06-20.log:175:[17:38:26] <greyrat> Do you think it would work at all though?
#clschool/2021-06-20.log:176:[17:38:42] <greyrat> Wouldn't people just copy some template project from Github?
#clschool/2021-06-20.log:177:[17:38:57] <greyrat> Or pay some shop that specializes in delivering uni projects?
#clschool/2021-06-20.log:179:[17:39:54] <greyrat> The teachers will have an incentive to encourage cheating, too
#clschool/2021-06-20.log:180:[17:40:10] <greyrat> As they can then not teach and focus on other obligations
#clschool/2021-06-20.log:183:[17:41:13] <greyrat> You were kind :)) My profs would usually ask people to change stuff
#clschool/2021-06-20.log:184:[17:41:33] <greyrat> Add some feature, change some parameters that were supposed to be constants, etc
#clschool/2021-06-20.log:185:[17:42:05] <greyrat> People still cheated though. Most students' pratical HWs were 100/100, I think.
#clschool/2021-06-20.log:187:[17:42:38] <greyrat> Though those practical exercises were not monitored as strictly as bigger projects.
#clschool/2021-06-20.log:189:[17:43:44] <greyrat> BTW, Julia looks pretty promising to me.
#clschool/2021-06-20.log:190:[17:44:02] <greyrat> Have you used it? I think it just lacks the reader macros.
#clschool/2021-06-20.log:191:[17:44:35] <greyrat> Its structs are also currently not redefinable, which somewhat limits the REPL-driven experience.
#clschool/2021-06-20.log:193:[17:48:01] <lucerne> Why do you think a standard helps?
#clschool/2021-06-20.log:195:[17:48:20] <lucerne> It seems more of a luxury thing to me
#clschool/2021-06-20.log:196:[17:48:34] <lucerne> It's nice to have, but doesn't provide any concrete benefits.
#clschool/2021-06-20.log:198:[17:49:08] <lucerne> Yes, but this also helps it be more 'agile.'
#clschool/2021-06-20.log:201:[17:49:45] <lucerne> Well, can't same thing happen with, e.g., SBCL?
#clschool/2021-06-20.log:203:[17:50:41] <lucerne> Hmm. I think if they should have the manpower, migrating from breaking changes won't cost them much.
#clschool/2021-06-20.log:205:[17:51:09] <lucerne> Perhaps Rust is a good historical example. Mozilla abandoned them. How is the language doing currently?
#clschool/2021-06-20.log:206:[17:51:19] <beach> lucerne: Yes, that's what I tell them.  If they have a group that knows about compilers and language implementation, they are fine.  Most don't.
#clschool/2021-06-20.log:210:[18:33:14] <lucerne> beach: how you seen the risk actualized though?
#clschool/2021-06-20.log:211:[18:33:21] <lucerne> have*
#clschool/2021-06-23.log:53:[19:09:30] <lucerne> rdrg109: I personally use `@question` so that I can find my own questions through the logs I keep 😂
#clschool/2021-06-23.log:57:[19:32:09] <lucerne> skempf: I generally copy both questions and answers when they are good (to my notes)
#commonlisp/2021-06-19.log:497:[15:47:20] <lucerne> How do I read all of the stdin?
#commonlisp/2021-06-19.log:498:[15:47:45] <lucerne> (I want to read some JSON froom stdin.)
#commonlisp/2021-06-19.log:500:[15:47:53] <lucerne> yes
#commonlisp/2021-06-19.log:502:[15:48:46] <lucerne> thanks
#commonlisp/2021-06-19.log:506:[15:51:07] <lucerne> phoe: which library do you recommend?
#commonlisp/2021-06-19.log:507:[15:51:37] <phoe> lucerne: https://github.com/Zulu-Inuoe/jzon
#commonlisp/2021-06-19.log:508:[16:02:55] <lucerne> phoe: How do I install it? `(ql:system-apropos "jzon")` doesn't return anything
#commonlisp/2021-06-19.log:511:[16:06:44] <ldb> lucerne: you know how to use ASDF?
#commonlisp/2021-06-19.log:512:[16:08:34] <lucerne> ldb: I have read on it once, but I really don't want to manage the deps manually. (IIRC, ASDF is basically just cloning the repo in the loadpath and then loading it, no?)
#commonlisp/2021-06-19.log:519:[16:12:56] <ldb> lucerne: ASDF is used by Quicklisp to load dists, so if you clone the git repos to quicklisp/local-projects, you should be able to quickload them as well
#commonlisp/2021-06-19.log:520:[16:14:51] <lucerne> ldb: Doesn't sth like emacs package fetchers  (like `straight.el`) exist? Sth that automatically fetches from a git repo.
#commonlisp/2021-06-19.log:525:[16:23:43] <etimmons> lucerne: there's also qlot and clpm
#commonlisp/2021-06-19.log:526:[16:25:02] <lucerne> Thanks!
#commonlisp/2021-06-19.log:563:[18:46:39] <greyrat> `sbcl --script` doesn't load `~/.sbclrc`?
#commonlisp/2021-06-19.log:565:[18:51:39] <edgar-rft> greyrat: according to http://www.sbcl.org/manual/ --script <filename> implies --no-userinit --no-sysinit --disable-debugger --end-toplevel-options
#commonlisp/2021-06-19.log:569:[18:55:25] <greyrat> edgar-rft: Thanks. I should use =--non-interactive=, it seems.
#commonlisp/2021-06-19.log:571:[19:03:11] <greyrat> I tried `#!/usr/bin/env -S sbcl --non-interactive --load`, but this gets into conflicts with the shebang line. Should I just load the init file manually?
#commonlisp/2021-06-20.log:3:[00:24:20] <lucerne> How do I convert a string to a stream? `with-input-from-string' doesn't help me, because the conversion needs to bind the value in `let', and not immediately use it.
#commonlisp/2021-06-20.log:7:[00:28:29] <greyrat> phoe: (let (s (create-stream-here)) (use-stream s))
#commonlisp/2021-06-20.log:9:[00:28:52] <phoe> greyrat: with-input-from-string is going to work with dynamic context
#commonlisp/2021-06-20.log:13:[00:32:11] <greyrat> phoe: Thanks, that's exactly what I wanted.
#commonlisp/2021-06-20.log:15:[00:33:25] <phoe> greyrat: but still, this code should be equivalent to (with-input-from-string (s "...") (use-stream s)) as long as S does not leak outside this context
#commonlisp/2021-06-20.log:16:[00:33:58] <greyrat> Yes, but that example was simplified
#commonlisp/2021-06-20.log:104:[01:36:02] <greyrat>  Guest63 
#commonlisp/2021-07-17.log:219:[17:19:44] <lucerne> I want sth like `~&`, but for two-lines, not just one. I.e., I want to ensure that at some point in the output, there are at least two new-lines present.
#commonlisp/2021-07-17.log:227:[17:35:56] <pjb> lucerne: ~2&
#commonlisp/2021-07-17.log:228:[17:36:29] <lucerne> pjb: I think that will insert a newline in any situation
#commonlisp/2021-07-17.log:229:[17:36:43] <pjb> lucerne: well, for at-least 2 lines, perhaps ~2% would be better. Of ~&~V% (1- n)
#commonlisp/2021-07-17.log:230:[17:37:09] <pjb> lucerne: the output streams won't count the newlines. Only if the current column is zero.
#commonlisp/2021-07-17.log:231:[17:38:03] <lucerne> pjb: I want to insert a newline only if the last two inserted characters are not new-lines. Any way to do this with format?
#commonlisp/2021-07-18.log:9:[00:28:21] <lucerne> How do I convert `#P"/sth/" to `#P"/sth"`?
#commonlisp/2021-07-18.log:10:[00:32:17] <lucerne> (I want to check for symlinks, and `osicat:file-kind` returns the wrong result when the last slash is present.)
#commonlisp/2021-07-18.log:13:[00:41:07] <lucerne> _death: I want to check if a pathname is a symlink or not. Are you suggesting `(equalp (truename path) path)`?
#commonlisp/2021-07-18.log:14:[00:41:27] <lucerne> I think this will encounter edge cases
#commonlisp/2021-07-18.log:15:[00:42:16] <lucerne> I am currently using an SBCL-only solution courtesy of https://stackoverflow.com/questions/32927250/sbcl-determine-if-symbolic-link , but I was hoping to find a portable solution in a library
#commonlisp/2021-07-19.log:488:[21:26:23] <lucerne> I am seeing some unexpected output in the stderr of one of my scripts, beginning with `#= REPL\[213]:1 =#`. Any idea what could have caused it?
#css/2021-08-04.log:285:[14:42:31] <lucerne> I want to use some userstyle CSS to make the results in https://sourcegraph.com/search?q=context:global+file:indices/.*.org+repo:%5Egithub%5C.com/NightMachinary/r_rational%24+antholog&patternType=regexp wrap, so that I can read them without scrolling horizontally. I have tried some basic stuff, but it seems the problem is out of my meagre league.
#css/2021-08-04.log:288:[14:50:07] <hassoon> lucerne: i don't understand
#css/2021-08-04.log:291:[14:50:53] <lucerne> hassoon: I want to add some CSS to that page, so that the search results it displays wrap (i.e., the long lines are displayed as multiple lines)
#css/2021-08-04.log:292:[14:51:44] <hassoon> lucerne: you don't want the text blocks to be scrollable in result ?
#css/2021-08-04.log:293:[14:51:51] <lucerne> Yes
#css/2021-08-04.log:294:[14:58:29] <lucerne> I found a solution, which seems to work so far:
#css/2021-08-04.log:295:[14:58:30] <lucerne> ``` css
#css/2021-08-04.log:296:[14:58:30] <lucerne> td {
#css/2021-08-04.log:297:[14:58:30] <lucerne>     /* https://stackoverflow.com/questions/1057574/wrap-text-in-td-tag */
#css/2021-08-04.log:298:[14:58:30] <lucerne>     white-space: normal !important;
#css/2021-08-04.log:299:[14:58:30] <lucerne> }
#css/2021-08-04.log:300:[14:58:30] <lucerne> ```
#css/2021-08-04.log:301:[15:00:00] <hassoon> lucerne: for .code-excerpt .code, do white-space:normal;
#css/2021-08-04.log:304:[15:00:29] <lucerne> Thanks
#css/2021-08-24.log:134:[15:42:57] <lucerne> Userstyles: How do I make the sidebar at a Github Issues page, be above the posts, instead of staying glued to the right of the page?
#css/2021-08-24.log:135:[15:43:19] <lucerne> (An example URL of Github Issues: https://github.com/CorentinJ/Real-Time-Voice-Cloning/issues/364 )
#css/2021-08-24.log:136:[15:45:21] <hassoon> lucerne: above the posts? you mean in a fixed manner ? or glued above the posts and then it should disappear with the scroll ?
#css/2021-08-24.log:137:[15:46:06] <lucerne> hassoon: Can you give me the code for both? I will probably like the not-sticky version better though
#css/2021-08-24.log:141:[15:54:09] <lucerne> hassoon: I don't like the sidebar wasting my precious screen space. I found the solution myself:
#css/2021-08-24.log:142:[15:54:10] <lucerne> #discussion_bucket > div > div.flex-shrink-0.col-12.col-md-9.mb-4.mb-md-0 > div {
#css/2021-08-24.log:143:[15:54:10] <lucerne>     zoom: 1.5;
#css/2021-08-24.log:144:[15:54:10] <lucerne>     width: 64vw !important;
#css/2021-08-24.log:145:[15:54:10] <lucerne> }
#css/2021-08-24.log:146:[15:54:10] <lucerne> #discussion_bucket > div {
#css/2021-08-24.log:147:[15:54:10] <lucerne>  flex-direction: column-reverse !important;
#css/2021-08-24.log:148:[15:54:11] <lucerne> }
#css/2021-08-24.log:149:[15:54:11] <lucerne> #discussion_bucket > div > div.flex-shrink-0.col-12.col-md-3 {
#css/2021-08-24.log:150:[15:54:12] <lucerne>     padding: 20px !important;
#css/2021-08-24.log:151:[15:54:12] <lucerne>     zoom: 1.5;
#css/2021-08-24.log:152:[15:54:13] <lucerne>     width: 64vw !important;
#css/2021-08-24.log:153:[15:54:13] <lucerne> }
#css/2021-08-24.log:154:[15:56:06] <hassoon> lucerne: you can make a browser extension that does that for you whenever you openup the github issues
#css/2021-08-24.log:156:[15:56:52] <lucerne> Indeed, I already have a CSS userstyles extension. I just didn't know what CSS to use, which I found through trial-and-error now.
#debian/2021-06-09.log:219:[05:12:20] <queso> greyrat, PMT: debian 11.0.  xfce 4.16.  X.Org version: 1.20.11.  Now when I do ctrl-shift-c the behavior is no different from ctrl-c.
#debian/2021-08-09.log:1273:[18:54:27] <greatcoof> n4dir: also there is a guy named greyRat
#debian/2021-08-16.log:473:[07:24:46] <jhutchins> greyrat: Does it not write to a log in /root?
#emacs/2021-06-07.log:110:[19:04:20] <lucerne-> In circe, how do I make the arrows go through the history using a prefix match of what is already written?
#emacs/2021-06-07.log:115:[19:11:19] <thomasb06> lucerne-: M-p
#emacs/2021-06-07.log:117:[19:11:36] <thomasb06> lucerne-: and M-n to move forward
#emacs/2021-06-07.log:122:[19:14:41] <thomasb06> lucerne-: M-p and M-n
#emacs/2021-06-07.log:133:[19:20:22] <greyrat> thomasb06: Thanks. These still do not use prefix-matching though.
#emacs/2021-06-07.log:134:[19:21:07] <thomasb06> greyrat: prefix-matching? What do you mean?
#emacs/2021-06-07.log:151:[19:31:09] <lucerne> thomasb06 Yes, exactly that.
#emacs/2021-06-07.log:152:[19:31:46] <lucerne> BTW, even though I am using ZNC, each time I quit circe and login to IRC again, my chat history is empty. Is that normal?
#emacs/2021-06-07.log:163:[19:34:37] <greyrat> rpav Both. I think znc's config is corrrect, but I do not know what i should do with =circe=
#emacs/2021-06-07.log:169:[19:38:42] <bremner> lucerne: circe works fine for me with bip (another bouncer_
#emacs/2021-06-07.log:174:[19:41:11] <lucerne> How do I make circe use persistent notifications? Should I monkey patch it (its underlying library, `alarm.el`, does support persistent notifs)?
#emacs/2021-06-07.log:185:[19:46:17] <greyrat> bremner: persistence means the notif needs to be dismissed by the user, and it won't fade away by itself.
#emacs/2021-06-07.log:191:[19:49:14] <greyrat> I guess the problem was indeed with my ZNC config. I changed some stuff, and now it seems to work.
#emacs/2021-06-07.log:206:[20:03:37] <greyrat> bremner: Emacs uses the native OS's APIs, so it depends on the OS. I only know of how it works on macOS.
#emacs/2021-06-07.log:211:[20:04:53] <greyrat> lispmacs: Your best bet is to use a tag in the file name, then use the find-file-hook to run arbitrary elisp for those files
#emacs/2021-06-07.log:212:[20:05:07] <greyrat> Look at my https://github.com/NightMachinary/doom.d/blob/master/autoload/night-extension-hooks.el#L1 for an example
#emacs/2021-06-07.log:213:[20:05:45] <lispmacs> greyrat: hmm... I can't just add some kind of variable setting code at the top of the file?
#emacs/2021-06-07.log:217:[20:06:39] <greyrat> lispmacs: That  would need you to either run unsafe elisp on all your files, or allow the elisp each time you open that file (perhaps there is a way to cache the permissions though?)
#emacs/2021-06-07.log:222:[20:07:42] <greyrat> Well, then use the eval local var to eval arbitrary code
#emacs/2021-06-07.log:225:[20:08:35] <lispmacs> greyrat: do you know the code for that?
#emacs/2021-06-07.log:234:[20:12:20] <greyrat> wasamasa: I think that wouldn't be buffer loocal though?
#emacs/2021-06-07.log:236:[20:12:31] <wasamasa> greyrat: press the keys and see for yourself
#emacs/2021-06-07.log:238:[20:13:24] <greyrat> wasamasa: They don't seem to work in the TUI
#emacs/2021-06-07.log:242:[20:14:04] <greyrat> The TUI allows me to easily use the neighboring terminal tabs, and I have it already bound to a fast hotkey window
#emacs/2021-06-07.log:243:[20:14:10] <greyrat> I never use the GUI
#emacs/2021-06-07.log:245:[20:14:55] <greyrat> How do I disable the company's tooltip frontend for the current buffer? (It plays very badly with circe)
#emacs/2021-06-07.log:248:[20:15:50] <greyrat> It completes usernames
#emacs/2021-06-07.log:252:[20:16:01] <greyrat> I think I should just set company-frontends to nil
#emacs/2021-06-07.log:260:[20:23:52] <greyrat> My find-file doesn't display stuff beginning with `.` or `#` (unless I type these prefixes myself). How do I disable this behavior?
#emacs/2021-06-07.log:267:[20:30:42] <greyrat> I found out I need to set `counsel-find-file-ignore-regexp` to `nil`.
#emacs/2021-06-08.log:1584:[14:29:14] <greyrat> I need a hook that runs when the user interactively switches to a buffer (buffer-list-update-hook triggers on programmatic switches, too). (I want to display how many people are online when I switch to an IRC buffer.)
#emacs/2021-06-08.log:1595:[14:32:21] <irek> greyrat: Well you can always write your own interactive function that will switch to irc buffer and after that eval anything you want.
#emacs/2021-06-08.log:1605:[14:33:29] <lucerne> irek: I hoped for sth general, but this will have to do. I can advice the ivy channel switcher. 
#emacs/2021-06-08.log:1612:[14:35:58] <irek> lucerne, greyrat: you can also use (interactive-p) function to test if something was run by user input.  So use hook like before and then add condition with (interactive-p)
#emacs/2021-06-08.log:1615:[14:36:54] <lucerne> irek: (Both are my accounts, I was told IRC doesn't allow multiple logins at the same time. One is a web client, one is circe.)
#emacs/2021-06-08.log:1616:[14:38:06] <irek> lucerne: I see.  Anyway, I think that solution with (interactive-p) will be quite general :)
#emacs/2021-06-08.log:1621:[14:39:14] <lucerne> I am going the advice function route. Using that interactive-p seems likely to be trouble.
#emacs/2021-06-08.log:1623:[14:39:50] <dale> greyrat: Maybe you want to test the value of this-command?
#emacs/2021-06-08.log:1625:[14:40:05] <lucerne> That could also work!
#emacs/2021-06-08.log:1626:[14:40:14] <lucerne> kakuhen: ?
#emacs/2021-06-08.log:1633:[14:41:11] <lucerne> I hadn't noticed :))) They are indeed down
#emacs/2021-06-08.log:1636:[14:41:24] <lucerne> btw, Dash has offline stackoverflow, it's pretty good
#emacs/2021-06-08.log:1637:[14:41:25] <dale> greyrat: Of course, I can think of many ways to potentially "switch to a buffer", like what if you kill a buffer and now your IRC buffer is the active buffer, should that trigger your code?  What if you make a new frame displaying your IRC buffer?
#emacs/2021-06-08.log:1639:[14:42:31] <lucerne> dale: I am content now with just advizing a few important functions. It was a best-effort thing.
#emacs/2021-06-08.log:1744:[15:25:07] <lucerne> How do I disable recentf-cleanup on exit? 
#emacs/2021-06-08.log:1747:[15:27:11] <jamzattack> lucerne: (setq recentf-auto-cleanup 'never)
#emacs/2021-06-08.log:1752:[15:29:48] <lucerne> jamzattack: Can I not have idabled for idle cleanup?
#emacs/2021-06-08.log:1753:[15:29:59] <lucerne> I just  don't emacs to hang before exiting for 5 minutes
#emacs/2021-06-08.log:1774:[15:45:24] <greyrat> huria4: Use `(line-number-at-pos)`
#emacs/2021-06-08.log:1775:[15:45:54] <greyrat> How do I increase the font size in the TUI?
#emacs/2021-06-14.log:2427:[21:41:32] <JordiGH> greyrat: Can a regex do this? Regexes can't count.
#emacs/2021-06-17.log:1751:[18:19:09] <greyrat> How do I see the elisp code of a function that was defined programmatically, and thus has no source code?
#emacs/2021-06-17.log:1755:[18:22:58] <wasamasa> greyrat: symbol-function
#emacs/2021-06-17.log:1758:[18:23:22] <wasamasa> greyrat: let me guess, you're trying to make sense of a macro
#emacs/2021-06-17.log:1759:[18:23:28] <wasamasa> greyrat: in which case, macroexpand it
#emacs/2021-06-17.log:1760:[18:24:18] <wasamasa> greyrat: this will actually give you the source form, unlike symbol-function (which might give you bytecode instead)
#emacs/2021-06-17.log:1763:[18:25:27] <lucerne> Thanks! 
#emacs/2021-06-18.log:88:[00:52:00] <greyrat> I have a lambda that is not capturing an outer variable. What might be wrong?
#emacs/2021-06-18.log:90:[00:52:23] <bpalmer> greyrat: you probably are evaluating it in a location that uses dynamic scoping.
#emacs/2021-06-18.log:91:[00:52:50] <greyrat> bpalmer: What should I do to capture the variable in dynamic scopes?
#emacs/2021-06-18.log:92:[00:52:58] <bpalmer> greyrat: use the lexical-let macro
#emacs/2021-06-18.log:95:[00:54:08] <greyrat> Thanks! It worked like a charm.
#emacs/2021-06-19.log:1311:[16:26:01] <greyrat> Does `auto-revert-mode' work in tramp buffers? I am trying to use it on IRC logs on my server
#emacs/2021-06-20.log:284:[02:26:21] <MattByName>     theoceaniscool hmw brainfunnel zebrag Krystof hypera1r siika__ lucerne
#emacs/2021-06-20.log:1637:[16:43:57] <greyrat> Is there a reason that emacs docs quotes symbols ala `x'? Why the asymmetry?
#emacs/2021-06-25.log:2725:[10:47:47] <lucerne> Is vimrc-mode the best extension for vimscript files?
#emacs/2021-08-02.log:723:[10:27:05] <aidalgol> twb: AIUI, alfalfa is what we call lucerne.
#emacs-circe/2021-06-07.log:3:[21:09:43] <greyrat> how do you jump to your username mentions?
#emacs-circe/2021-06-07.log:4:[21:20:02] <bone-baboon> greyrat: `C-r greyrat` or `C-s greyrat`. Maybe someone else knows a Circe specific way.
#emacs-circe/2021-06-08.log:1:[00:02:45] <greyrat> How do I get the number of current online users in a channel?
#emacs-circe/2021-06-08.log:2:[00:19:05] *** Parts: greyrat (~greyrat@ip202.ip-51-178-215.eu) (#linux-ops)
#emacs-circe/2021-06-08.log:8:[01:08:45] <greyrat> wasamasa: thanks! My ZNC/circe setup still loses history though :((
#emacs-circe/2021-06-08.log:9:[01:09:29] <greyrat> I need to abandon my emacs setup :(
#emacs-circe/2021-06-08.log:25:[10:43:39] <greyrat>    /znc *playback PLAY #emacs-circe 0
#emacs-circe/2021-06-08.log:26:[10:43:56] <greyrat> (sorry, wrong input)
#emacs-circe/2021-06-08.log:28:[11:22:26] <lucerne> How do I disable the notifs for `/join ...` on startup?
#emacs-circe/2021-06-08.log:30:[11:34:02] <aidalgol> lucerne: I don't disable that specifically, instead I just enable `circe-reduce-lurker-spam'.
#emacs-circe/2021-06-08.log:31:[11:34:57] <lucerne> `circe-reduce-lurker-spam` is already `t`, but I still get these messages (only for myself though)
#emacs-circe/2021-06-08.log:36:[14:34:30] <lucerne> Do you use a separate emacs server for IRC? I find my emacs constantly garbage collecting (even though I have increased its gc limit) after using circe.
#emacs-circe/2021-06-08.log:38:[15:29:45] <wasamasa> lucerne: how exactly did you notice it's constantly garbage collecting?
#emacs-circe/2021-06-08.log:39:[15:30:50] <lucerne> wasamasa: I have emacs print a notif in the minibuffer whenever it gcs
#emacs-circe/2021-06-08.log:41:[15:32:38] <lucerne> I use sth to try to gc when idle
#emacs-circe/2021-06-08.log:42:[15:33:00] <lucerne> `gcmh.el`
#emacs-circe/2021-06-08.log:45:[15:33:36] <lucerne> It's not that high; 32 MB
#emacs-circe/2021-06-08.log:60:[15:55:20] <lucerne> jdz It's just so sad how most developers don't see what they can do with an open system
#emacs-circe/2021-06-08.log:61:[15:56:17] <jdz> lucerne: What do you mean?
#emacs-circe/2021-06-08.log:62:[15:57:02] <lucerne> jdz Emacs is great because it is so extensible. Most people I know wouldn't get the value of this.
#emacs-circe/2021-06-08.log:63:[15:57:58] <lucerne> The Spacemacs/Doom key scheme is also very good. I tried Spacevim, but vim couldn't handle the load of all the cruft. I wish VSCode has sth similar.
#emacs-circe/2021-06-08.log:64:[15:58:08] <lucerne> had*
#emacs-circe/2021-06-08.log:70:[16:02:17] <greyrat> I am waiting out the native comp for it to mature
#emacs-circe/2021-06-08.log:71:[16:02:29] <greyrat> I am tired of all the time I spent on maintaining my env
#emacs-circe/2021-06-08.log:75:[16:03:19] <greyrat> Bitlbee? What good channels do they have?
#emacs-circe/2021-06-08.log:78:[16:03:52] <Thaodan> greyrat: Bitlbee is an IM to IRC bridge. 
#emacs-circe/2021-06-08.log:79:[16:04:00] <greyrat> jdz there is `profiler-memory-start', haven't used it
#emacs-circe/2021-06-08.log:81:[16:05:02] <greyrat> Thaodan: Oh, I see. I generally try to bridge stuff over to Telegram, as it has good native clients for everything, and its APIs are completely open, and it is very feature-rich.
#emacs-circe/2021-06-08.log:82:[16:05:06] <jdz> greyrat: I was rather looking for actual current memory contents, not memory behavior of a piece of code.
#emacs-circe/2021-06-08.log:84:[16:05:44] <Thaodan> greyrat: true however bitlbee has better integration into IRC and I found using that inside emacs more pleasant
#emacs-circe/2021-06-08.log:85:[16:06:20] <greyrat> I wish there was a bridge for Whatsapp
#emacs-circe/2021-06-08.log:86:[16:07:01] <greyrat> The congress is just nuts. Facebook doesn't even have an iPad app for their shitty messenger, and they still doubt if there is a monopoly problem.
#emacs-circe/2021-06-08.log:87:[16:07:28] <greyrat> Their services completely suck, but the network effects are enough to keep the sheep users.
#emacs-circe/2021-06-09.log:1:[00:17:23] <lucerne> Do I need to set sth for circe to auto-reconnect? 
#emacs-circe/2021-06-09.log:2:[00:17:51] <lucerne> (I want it to reconnect and load the new messages when I open my laptop, not when I send a message.)
#emacs-circe/2021-06-18.log:9:[16:03:18] <greyrat> I have an emacs dedicated to IRC, and it is using more CPU than any other process on my system. Is this normal? 
#emacs-circe/2021-06-18.log:11:[16:04:34] <greyrat> wasamasa: I am! But browsers start many processes, thus any one of them still consumes less
#emacs-circe/2021-06-18.log:14:[16:05:18] <bremner> greyrat: do you have any limits on buffer size?
#emacs-circe/2021-06-18.log:16:[16:06:06] <greyrat> bremner: I don't have buffer size limits. Should I add one?
#emacs-circe/2021-06-18.log:18:[16:06:41] <greyrat> Currently emacs consumes 18% of CPU on my MBP, which is quite a bit.
#emacs-circe/2021-06-18.log:19:[16:07:26] <greyrat> bremner: How do I add limits?
#emacs-circe/2021-06-18.log:20:[16:08:44] <bremner> greyrat: customize lui-max-buffer-size
#emacs-circe/2021-06-18.log:23:[16:11:14] <greyrat> Thanks, I set it.
#emacs-circe/2021-06-18.log:24:[16:14:58] <greyrat>   wasamasa: It seems the offedning fn is `irc--filter'
#emacs-circe/2021-06-18.log:27:[16:16:02] <greyrat> Hmm. Here is that explain-pause buffer:
#emacs-circe/2021-06-18.log:29:[16:16:13] <greyrat> http://ix.io/3qkG
#emacs-circe/2021-06-18.log:33:[16:17:02] <greyrat> how do I expand them? pressing tab says the buffer is read-only
#emacs-circe/2021-06-18.log:36:[16:20:16] <greyrat> wasamasa: I think it's buggy. Clicking on the buffer throws an exception: https://github.com/lastquestion/explain-pause-mode/issues/95
#emacs-circe/2021-06-18.log:37:[16:20:28] <greyrat> After that exception, nothing reacts to RET etc
#emacs-circe/2021-06-18.log:39:[16:20:50] <greyrat> I am
#emacs-circe/2021-06-18.log:42:[16:21:24] <greyrat> I started a normal profiler/start
#emacs-circe/2021-06-18.log:45:[16:28:08] <greyrat> wasamasa: http://sprunge.us/kS3oK3
#emacs-circe/2021-06-18.log:46:[16:28:30] <greyrat> Is there a way to expand all entries in the profilerr report? I manually expanded most of them :facepalms:
#emacs-circe/2021-06-18.log:53:[16:29:48] <greyrat> wasamasa: So I should disable company for circe buffers?
#emacs-circe/2021-06-18.log:56:[16:30:11] <greyrat> I haven't. Must be a doom thing.
#emacs-circe/2021-06-18.log:67:[16:36:02] <greyrat> wasamasa: Well, I need doom and my config when I work with IRC, so I still need to find the offending parts and disable them. Just using the vanilla emacs doesn't help me. I will disable flycheck as well. Thanks!
#emacs-circe/2021-06-18.log:71:[16:40:48] *** Parts: greyrat (~greyrat@ip202.ip-51-178-215.eu) (linux)
#emacs-circe/2021-06-18.log:72:[16:45:21] <greyrat> These changes helped a lot. Now emacs consumes around 1-7%.
#emacs-circe/2021-06-18.log:75:[16:49:07] <greyrat> These changes helped a lot. Now emacs consumes around 1-7%.
#emacs-circe/2021-06-18.log:78:[16:50:47] <greyrat> I will tell them
#emacs-circe/2021-06-18.log:81:[16:51:32] <greyrat> I am getting `Can not send to channel` on some channels, not sure if it's related to these changes or not. What can cause sucha message?
#emacs-circe/2021-06-18.log:87:[16:52:34] <greyrat> rejoining the channel solved that error
#evil-mode/2021-06-10.log:14:[12:18:08] <greyrat> Is there a text object for URLs? If not, how can I add one using the regex
#evil-mode/2021-06-10.log:15:[12:18:08] <greyrat> `(?i)\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\s()<>{}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))`
#evil-mode/2021-06-10.log:16:[12:18:08] <greyrat> ?
#evil-mode/2021-06-10.log:23:[12:23:53] <greyrat> You're right, `doom` had it already defined for me :facepalms: `i u             +evil:inner-url-txtobj`
#evil-mode/2021-06-17.log:26:[18:15:46] <greyrat> I want to select a region based on a text object from elisp. How do I do this?
#evil-mode/2021-06-17.log:29:[18:18:08] <greyrat> This is text object I have defined myself using a pair of regexes
#evil-mode/2021-06-17.log:30:[18:25:48] <i0e> greyrat: are you using /?
#evil-mode/2021-06-17.log:31:[18:26:32] <greyrat> i0e: I don't think so. I am using `targets.el` to create a text object for shell functions.
#evil-mode/2021-06-17.log:32:[18:27:35] <i0e> greyrat: oh, sorry i dont know how targets does it
#evil-mode/2021-06-17.log:33:[18:33:32] <i0e> greyrat: but you can use Ctrl+h if you would like to read that code.
#fanfiction/2021-06-07.log:3:[18:20:08] <lucerne> hi
#fanfiction/2021-06-07.log:4:[18:20:18] <lucerne> hi8
#fanfiction/2021-06-07.log:5:[18:20:20] <lucerne> hi1
#fanfiction/2021-06-07.log:10:[18:54:16] <lucerne> k?
#fanfiction/2021-06-07.log:11:[18:57:49] <lucerne-> hi
#fanfiction/2021-06-07.log:12:[18:57:50] <lucerne-> hey
#fanfiction/2021-06-07.log:17:[19:18:33] <lucerne> ?
#fanfiction/2021-06-07.log:18:[19:18:42] <greyrat> hi
#fanfiction/2021-06-07.log:19:[19:18:45] <greyrat> ??
#fanfiction/2021-06-07.log:20:[19:18:48] <greyrat> wtf
#fanfiction/2021-06-07.log:21:[19:18:51] <greyrat> ???????
#fanfiction/2021-06-07.log:22:[19:18:54] <greyrat> s
#fanfiction/2021-06-07.log:23:[19:18:57] <greyrat> ok
#fanfiction/2021-06-07.log:24:[19:19:01] <lucerne> k
#fanfiction/2021-06-07.log:25:[19:19:40] <greyrat> 8hi
#fanfiction/2021-06-07.log:26:[19:19:42] <greyrat> 1jungle
#fanfiction/2021-06-07.log:27:[19:30:23] <greyrat> test
#fanfiction/2021-06-07.log:28:[19:32:04] <lucerne> kill
#fanfiction/2021-06-07.log:29:[19:32:08] <greyrat> i988
#fanfiction/2021-06-07.log:30:[19:41:30] <lucerne> greyrat hi
#fanfiction/2021-06-07.log:31:[19:41:54] <lucerne> lucerne yo
#fanfiction/2021-06-07.log:32:[21:07:32] <greyrat> hi
#fanfiction/2021-06-07.log:33:[22:11:39] <greyrat> lucerne: hi
#fanfiction/2021-06-08.log:1:[00:41:44] <lucerne> l
#fanfiction/2021-06-08.log:2:[10:49:54] <greyrat> /msg *controlpanel set AutoClearChanBuffer $me False
#fanfiction/2021-06-08.log:3:[10:49:54] <greyrat> /msg *controlpanel set AutoClearQueryBuffer $me False
#fanfiction/2021-06-08.log:5:[11:21:29] <mado_scientisto> lucerne, hi
#fanfiction/2021-06-08.log:6:[11:57:59] <mado_scientisto> lucerne 78
#fanfiction/2021-06-08.log:7:[11:58:13] <mado_scientisto> greyrat 6
#fanfiction/2021-06-08.log:8:[12:01:06] <mado_scientisto> lucerne hmm
#fanfiction/2021-06-09.log:1:[00:36:27] <lucerne> greyrat: hi
#fanfiction/2021-06-09.log:2:[00:42:41] <lucerne> greyrat: hj
#fanfiction/2021-06-09.log:3:[00:43:04] <lucerne> greyrat: hmm
#fanfiction/2021-06-09.log:4:[00:45:37] <lucerne> greyrat: 8
#fanfiction/2021-06-09.log:5:[00:48:58] <lucerne> greyrat: 77
#fanfiction/2021-06-09.log:6:[01:00:04] <lucerne> greyrat: ho
#fanfiction/2021-06-09.log:7:[01:00:16] <lucerne> lucerne: hmm
#fanfiction/2021-06-09.log:8:[01:00:21] <lucerne> jbjj
#fanfiction/2021-06-09.log:9:[01:01:06] <lucerne> lucerne: wow set message_escape HTML
#fanfiction/2021-06-09.log:10:[01:01:06] <lucerne> set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message}
#fanfiction/2021-06-09.log:11:[01:02:27] <lucerne> lucerne: set message_escape HTML
#fanfiction/2021-06-09.log:12:[01:02:27] <lucerne> set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message} set message_escape HTML
#fanfiction/2021-06-09.log:13:[01:02:27] <lucerne> set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message} set message_escape HTML
#fanfiction/2021-06-09.log:14:[01:02:27] <lucerne> set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message}
#fanfiction/2021-06-09.log:15:[01:02:41] <lucerne> lucerne,, set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message} set message_escape HTML set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message} set message_escape HTML set message_content <i>{context}</i>: &lt;<b>{nick}</b>&gt; {message} set message_escape HTML
#fanfiction/2021-06-09.log:19:[20:28:59] <lucerne> alis
#fanfiction/2021-06-10.log:1:[01:05:38] * lucerne tests
#fanfiction/2021-06-11.log:1:[19:49:23] <greyrat> http://ix.io/3pA7
#fanfiction/2021-06-18.log:1:[16:49:10] <greyrat> hi
#fanfiction/2021-06-18.log:2:[16:49:13] *** Parts: greyrat (~greyrat@ip202.ip-51-178-215.eu) (linux)
#fanfiction/2021-06-18.log:3:[16:49:16] <greyrat> hi
#fanfiction/2021-06-18.log:4:[16:49:21] <greyrat> 7776
#fanfiction/2021-06-18.log:5:[16:49:43] <greyrat> 8
#fanfiction/2021-06-18.log:6:[16:49:53] <greyrat> 8877
#fanfiction/2021-06-18.log:7:[16:50:58] <greyrat> a
#fanfiction/2021-06-18.log:10:[16:52:08] <greyrat> hi
#fanfiction/2021-06-18.log:11:[16:59:15] <greyrat> hi8
#fanfiction/2021-06-18.log:12:[16:59:27] <greyrat> 7
#fanfiction/2021-06-19.log:3:[17:32:22] <lucerne> hi
#fanfiction/2021-06-20.log:6:[16:53:20] <lucerne> LF Voldemort timetravel @helpme
#fanfiction/2021-06-20.log:7:[16:53:31] <lucerne> @greyrat 
#julia/2021-09-06.log:8:[14:26:15] <lucerne> @tatsumaru Julia's package resolver is more similar to pip's new resolver, and I don't like it at all, but it's not so bad that you can't do serious work with it. The problems are especially apparent when you use a global env (which I like to do).
#julia/2021-09-06.log:9:[14:26:32] <lucerne> Use `jill` to install Julia and upgrade it easily, btw.
#lesswrong/2021-06-09.log:1258:[22:46:05] <lucerne> Is there an ebook 'anthology' of gwern posts?
#lesswrong/2021-06-09.log:1259:[22:46:27] <lucerne> (Ala https://www.slatestarcodexabridged.com/ )
#lesswrong/2021-06-09.log:1265:[22:59:31] <lucerne> kuudes: Govs had a debt ceiling?
#lesswrong/2021-06-09.log:1266:[23:02:58] <Logos01> lucerne: I'm not aware of any that don't.
#lesswrong/2021-06-09.log:1295:[23:30:41] <dbohdan> lucerne: I haven't seen an ebook of gwern's site.  It would be more difficult to adapt his site to a static format than it was SSC.  If you want a best-of list, try https://www.gwern.net/index#popular and https://www.gwern.net/index#notable.
#lesswrong/2021-06-10.log:66:[00:58:56] <lucerne> What are the 'star' messages called in the IRC protocol? (like "goes to install his windshield wiper replacement blades and realizes that he should've looked closer - wipers, it turns out, are not sold in pairs")
#lesswrong/2021-06-10.log:67:[00:59:23] <dbohdan> lucerne: "Actions"
#lesswrong/2021-06-10.log:81:[01:02:01] <Obormot\Arcturus> lucerne: Actions, see http://web.archive.org/web/20160419125154/http://www.irchelp.org/irchelp/rfc/ctcpspec.html
#lesswrong/2021-06-10.log:110:[01:05:53] * lucerne tests
#lesswrong/2021-06-10.log:115:[01:14:37] * bildramer slaps lucerne around a bit with a large trout
#lesswrong/2021-06-11.log:540:[16:20:32] <greyrat> I need an AI/ML paper to present to my AI class. Any ideas on good choices? It shouldn't be very advanced, this is my first AI (undergrad) class.
#lesswrong/2021-08-27.log:1021:[22:33:19] <gwern> ...Hôtel National, Lucerne, Switzerland, June 30, 1939.[21][22][23]' hee hee
#linux/2021-06-08.log:65:[00:24:48] <lucerne> `| nc termbin.com 9999` doesn't work with GNU netcat
#linux/2021-06-08.log:142:[01:05:44] <carlos> lucerne ... termbin ... works perfect in my computer, i use devuan
#linux/2021-09-06.log:2718:[13:40:38] <lucerne> Is there a way to disable this warning from the `at` command: `at: pluralization is wrong`?
#linux/2021-09-06.log:2721:[13:41:21] <Sauvin> lucerne, what syntax are you using to elicit the error you want to ignore?
#linux/2021-09-06.log:2722:[13:41:54] <lucerne> Sauvin: `at now +2 minute` or `at now +1 minutes`
#linux/2021-09-06.log:2782:[14:07:41] <lucerne> Sauvin: yes, the 'error' is just bullshit
#linux-ops/2021-06-08.log:6:[03:39:10] <jim> greyrat, Hi, you've reached the channel for linux channel staff, how can we help?
#linux-ops/2021-06-08.log:7:[03:40:14] <greyrat> jim sorry, I thought it was for dev-ops
#linux-ops/2021-06-08.log:8:[03:40:20] *** Parts: greyrat (~greyrat@ip202.ip-51-178-215.eu) (#linux-ops)
#linux-ops/2021-06-08.log:11:[12:15:08] <DLange> greyrat, you have joined here again...
#linux-ops/2021-06-08.log:12:[12:19:26] <jim> greyrat, is there something you needed?
#linux-ops/2021-06-08.log:13:[12:22:18] <jim> greyrat, you;d have to be actively discussing with us, otherwise that's idling... so, would you mind doing /part #linux-ops
#linux-ops/2021-06-08.log:21:[12:37:13] *** greyrat was kicked by jim ("no idle policy")
#lobsters/2021-06-09.log:4:[01:43:43] <greyrat> Is there sth like http://hn.algolia.com/ for lobste.rs? 
#lobsters/2021-06-09.log:9:[01:45:22] <greyrat> I think if you reach out to Algolia, they might give the site a free plan
#lobsters/2021-06-09.log:10:[01:45:36] <greyrat> It works as free advertisement for them, too, after all
#lobsters/2021-06-09.log:11:[01:51:36] <greyrat> wink: The default search is very weird, too. I tried =hyperbole emacs=, and the results don't include hyperbole at all. Same for ="hyperbole" emacs=.
#machomebrew/2021-06-09.log:3:[14:02:04] <greyrat> `brew install googler --head` fails because their branch is `main`. What should I do?
#machomebrew/2021-06-09.log:7:[18:07:41] <R2robot> greyrat: one way is to edit the formula
#org-mode/2021-06-08.log:173:[11:57:24] <greyrat> What are `<<x>>`? Are they some kind of ID for links?
#org-mode/2021-06-08.log:214:[17:49:33] <rdrg109> greyrat: If they are used in a code block, they are noweb references. Further information can be found in the section "(org) Noweb Reference Syntax" of the Org Mode info manual.
#org-mode/2021-06-08.log:222:[17:57:03] <lucerne> zebrag: (Have you seen org-super-links?)
#org-mode/2021-06-08.log:228:[17:59:02] <zebrag> hi lucerne
#org-mode/2021-06-09.log:31:[01:35:51] <lucerne> zebrag: Sourcegraph might be better for searching: https://sourcegraph.com/search?q=context:global+org-capture-templates+lang:%22emacs+lisp%22+&patternType=literal
#org-mode/2021-06-09.log:38:[01:51:57] <zebrag> lucerne: Nice search tool, thanks
#org-mode/2021-06-09.log:44:[02:44:05] <rdrg109> lucerne: Thank you for sharing that. I was wondering whether a tool for searching multiple code repositories existed, so thanks for that! :)
#org-mode/2021-06-09.log:253:[21:04:43] <lucerne> Has anyone used https://polymode.github.io/defining-polymodes/ to use org-mode in the comments of another language (sort of a reverse org-babel)?
#org-mode/2021-06-09.log:268:[23:31:03] <rdrg109> lucerne: You mean, let's say, using Org Mode in a Python comment?
#org-mode/2021-06-10.log:6:[00:43:04] <lucerne> rdrg109: yes
#org-mode/2021-06-10.log:7:[00:43:29] <lucerne> (My main use case is to use org links in the comments of other langs)
#org-mode/2021-06-19.log:181:[19:15:20] <greyrat> What commonlisp libraries are there to produce org-mode text?
#org-mode/2021-06-19.log:202:[20:57:53] <greyrat> /join #clschool
#org-mode/2021-08-12.log:202:[18:10:45] <lucerne> I like to open links like `[[mailto:falimirzaei76@gmail.com][mailto:falimirzaei76@gmail.com]]` with the gmail site in Chrome. Any ideas?
#org-mode/2021-08-12.log:203:[18:17:47] <ericsfraga> lucerne: check out the value of org-link-parameters. There should be an entry for mailto: links.  You may be able to customise this to start up Chrome with gmail as the site?
#pandoc/2021-08-26.log:16:[17:18:37] <lucerne> How do I make pandoc not output extra cruft such as `{.verbatim}` in its markdown output?
#pandoc/2021-08-27.log:17:[16:15:42] <ede> lucerne, just stumbled upon it myself (writing some text which i wanted to actually include it), check Extension: header_attributes
#pandoc/2021-08-28.log:14:[11:05:21] <lucerne> ede: How do I disable these extensions?
#pandoc/2021-08-28.log:19:[15:11:01] <ede> lucerne: i always converted from markdown, but never to. maybe the same pattern: target+ext1-ext2. if not, maybe select another output format like markdown_strict.
#pandoc/2021-08-28.log:20:[15:11:56] <lucerne> thanks
#perl/2021-06-10.log:3:[01:11:05] <greyrat> What is the regex `(11+?)`? How can `?` come after `+`?
#perl/2021-06-10.log:6:[01:12:17] <revhippie> greyrat: see https://perldoc.perl.org/perlre#Quantifiers
#perl/2021-06-10.log:43:[01:25:04] <greyrat> raku had some grammary stuff, I wonder if perl 7 is going to adopt them?
#perl/2021-06-10.log:55:[01:26:58] <greyrat> revhippie: I always used `[^"]*`, because I did not know of the non-greedy quals :))
#perl/2021-06-10.log:642:[11:12:06] <greyrat> How do I search and replace a literal string? I currently use `'s/\Q$ENV{AGR_FROM}\E/$ENV{AGR_TO}/g'`, but I think this would break if `ENV{AGR_FROM}` contains `\E`, no?
#perl/2021-06-10.log:644:[11:12:44] <Grinnz> greyrat: nope, \E only works literally
#perl/2021-06-10.log:655:[11:15:54] <greyrat> Grinnz: Thanks, you are right. Is this the most concise way? Isn't there a CLI flag or sth that forces literal matching?
#perl/2021-06-10.log:666:[11:19:25] <Grinnz> greyrat: there isn't
#perl/2021-06-10.log:667:[11:19:49] <Grinnz> greyrat: you can use the substr function to see if a literal string is contained within another string, and even replace it with another string
#perl/2021-06-10.log:687:[11:25:16] <greyrat> Gin: Do you have a server somewhere (sth that is always on)?
#perl/2021-06-10.log:694:[11:30:56] <greyrat> Grinnz: How is the no-logging policy enforced? I kind of feel that it gives a false sense of security, as bad actors can easily keep logs of everything, and publish them if it suits them.
#perl/2021-06-10.log:697:[11:31:44] <greyrat> So what's the use of the policy?
#perl/2021-06-10.log:712:[11:34:56] <greyrat> I just thought that the public utility that public logging could provide (e.g., think sth like http://hn.algolia.com/ ) is very concrete, while banning the logging doesn't have any concrete benefits that I can see. Anyhow, I keep logs for myself, so it doesn't matter much for me.
#perl/2021-06-10.log:716:[11:35:24] <Grinnz> greyrat: yes, some places find it useful enough
#perl/2021-06-10.log:719:[11:37:12] <greyrat> I agree with that, but I already feel like I am logged, and am suitably 'chilled.' I would create throwaways if I wanted to say anything too controversial.
#perl/2021-06-10.log:721:[11:38:01] <Grinnz> greyrat: for the record i personally prefer public logging, but in the case of this channel i don't care enough to make the case for it
#perl/2021-06-10.log:725:[11:39:03] <greyrat> 🤠
#perl/2021-06-10.log:730:[11:39:57] <greyrat> Gin: (Google or send an email?)
#perl/2021-06-10.log:734:[11:41:02] <greyrat> Grinnz: Discourse is also very good in my experience. New languages usually have one, but I haven't seen them for more mature langs.
#perl/2021-06-10.log:738:[11:41:46] <greyrat> Gin: Have you found Stackoverflow wanting?
#perl/2021-06-10.log:741:[11:42:19] <greyrat> xenu: What do you dislike about it? 
#perl/2021-06-10.log:742:[11:42:25] <Gin> greyrat: I haven't
#perl/2021-06-10.log:744:[11:43:54] <xenu> greyrat: mostly the fact that it lazy loads the posts using javascript and because of that it hijacks ctrl+f
#perl/2021-06-10.log:745:[11:45:02] <greyrat> xenu: Yes, that would be very awful. Can it not be turned off?
#perl/2021-06-10.log:747:[11:45:27] <greyrat> I hadn't tried scraping the forum pages before, so I hadn't noticed. 
#perl/2021-06-10.log:748:[11:45:40] <greyrat> xenu: They are opensource, open an issue?
#perl/2021-06-10.log:751:[11:46:36] <greyrat> xenu: You can always use the site's own search though. It can even integrate with algolia.
#perl/2021-06-10.log:752:[11:46:59] <greyrat> I also think publishing dumps of the site's data is possible.
#perl/2021-06-10.log:753:[11:47:44] <Gin> greyrat: What is Stackoverflow wanting?
#perl/2021-06-10.log:756:[11:49:30] <greyrat> Gin: I mean, use SO. It will probably answer your questions, and the archives are better suited for future visitors.
#perl/2021-06-10.log:757:[11:49:56] <greyrat> xenu: I like that. 😺
#perl/2021-06-10.log:759:[11:50:22] <greyrat> Gin: So why do you want to ask questions on the mailing list?
#perl/2021-06-10.log:763:[11:52:28] <Gin> greyrat: My thought is that some more insightful questions can be asked through mailing lists.
#perl/2021-06-10.log:768:[11:53:52] <greyrat> True, mailing lists are better for advanced questions.
#perl/2021-06-10.log:786:[11:59:35] <greyrat> In `print DES $_;`, Is it equivalent to `print (DES $_)` or `print DES, $_`?
#perl/2021-06-10.log:788:[11:59:51] <Grinnz> greyrat: first one - the filehandle argument is not followed by a comma
#perl/2021-06-10.log:790:[12:00:13] <greyrat> Adura: Can't they just use a standard solution like Hugo?
#perl/2021-06-10.log:791:[12:00:16] <Grinnz> greyrat: it has custom parsing
#perl/2021-06-10.log:1440:[20:40:36] <greyrat> How do I use interpolation instead of the dummy variable `b` in
#perl/2021-06-10.log:1441:[20:40:39] <greyrat> $b = scalar @a;
#perl/2021-06-10.log:1442:[20:40:39] <greyrat> print "$#a, $b\n";
#perl/2021-06-10.log:1447:[20:42:55] <revhippie> greyrat: you can impose scalar context with the concatenation operator -- print "$#a, " . @a . "\n";
#perl/2021-06-11.log:1021:[19:07:39] <greyrat> how does perl's performance hold up against ripgrep? `perl -lne '/x/ && !/y/ && print'` vs `rg 'x' | rg -v 'y'`
#perl/2021-06-11.log:1067:[19:27:35] <greyrat> lopid: I did one naive test, and perl was almost 3x faster. :)) https://github.com/BurntSushi/ripgrep/issues/1889#issuecomment-859635595
#perl/2021-06-11.log:1070:[19:28:43] <Altreus> greyrat: there's only one perl process in your thing... can ripgrep perform both tests in the same process?
#perl/2021-06-11.log:1071:[19:29:09] <greyrat> Altreus: As of now, no. But boolean patterns are an open FR on their repo.
#perl/2021-06-11.log:1074:[19:29:51] <greyrat> Well, I wouldn't mind even if perl was slower
#perl/2021-06-11.log:1076:[19:30:05] <greyrat> I just wanted to see if it's not *that* slower
#perl/2021-06-11.log:1078:[19:30:51] <greyrat> integral: I am not very experienced with these. Please create better benchmarks.
#perl/2021-06-11.log:1083:[19:32:05] <greyrat> Altreus: just divide its time in two, it would still be slower than perl in this test.
#perl/2021-06-11.log:1085:[19:32:35] <greyrat> ack doesn't have anything oover ripgrep, does it? 
#perl/2021-06-11.log:1086:[19:33:01] <greyrat> What is good about perl is `a pre-built turing complete language`
#perl/2021-06-11.log:1091:[19:35:00] <greyrat> Altreus: The exact docs are:
#perl/2021-06-11.log:1092:[19:35:02] <greyrat> TIMEFMT="%J  %U user %S system %P cpu %*E total; max RSS %M"
#perl/2021-06-11.log:1093:[19:35:02] <greyrat> # See TIMEFMT in zshall
#perl/2021-06-11.log:1095:[19:36:10] <greyrat> But the important value is `1:11.19 total`, which is its total time (1 minute and 11 seconds)
#perl/2021-06-11.log:1096:[19:36:23] <greyrat> gordonfish: `man zshall`
#perl/2021-06-11.log:1097:[19:37:20] <greyrat> (So no, I realy waited a minute. That directory is huge.)
#perl/2021-06-11.log:1103:[19:39:30] <gordonfish> greyrat: Ah, forgot that actually existed. Felt like a typo for a moment :)
#perl/2021-06-11.log:1110:[19:41:41] <greyrat> xenu: arr0 () {
#perl/2021-06-11.log:1111:[19:41:41] <greyrat> 	print -nr -- "${(pj.\0.)@}"
#perl/2021-06-11.log:1112:[19:41:41] <greyrat> }
#perl/2021-06-11.log:1114:[19:41:59] * Altreus applies clue-stick to greyrat
#perl/2021-06-11.log:1118:[19:42:33] <lucerne> Altreus: It just outputs its ARGV separated by the null char
#perl/2021-06-11.log:1126:[19:44:34] <greyrat> I just tested it with just the first `rg` process. The time didn't change much for rg: `arr0 * | time (xargs -0 rg 'time.?loop\b' | cat)`  
#perl/2021-06-11.log:1127:[19:44:34] <greyrat>  
#perl/2021-06-11.log:1128:[19:44:34] <greyrat> 2.51s user 13.45s system 23% cpu 1:08.77 total; max RSS 8384
#perl/2021-06-18.log:154:[01:11:58] <greyrat> I am using `                    revaldbg perl -0777 -pe 's/^\s*(:PROPERTIES:(.|\n)*?:END:)|(<<.*?>>)\s*$//gm'` to remove some lines from a document. It works, but it leaves a blank line behind; How can I remove the line entirely?
#perl/2021-06-18.log:156:[01:12:38] <greyrat> (That `revaldbg` is nothing, just ignore it. Sorry.)
#perl/2021-06-18.log:164:[01:18:09] <par> greyrat: maybe have it print everyline except the one that match regex?
#perl/2021-06-18.log:165:[01:18:30] <greyrat> par one of those patterns is multiline
#perl/2021-06-18.log:171:[01:25:35] <greyrat> par: I discovered `perl -0777 -pe 's/(\n|\A)\s*(:PROPERTIES:(.|\n)*?:END:)|(<<.*?>>)\s*(\n|\Z)//g'` works just fine.
#python/2021-07-09.log:1450:[12:58:12] <rannnn8888> greyrat here ?
#raku/2021-06-10.log:3:[21:35:04] <greyrat> Is the perf of raku better than perl?
#raku/2021-06-10.log:6:[21:54:32] <greyrat> I was thinking of simple one-liners for data processing (`perl -lpe`)
#raku/2021-06-10.log:7:[21:54:45] <greyrat> It seems perl5 is still best there?
#reddit-sysadmin/2021-08-02.log:3485:[21:35:23] <iphone> greyrat_: rats are cool
#thelounge/2021-06-08.log:7:[00:50:00] <lucerne> The new search seems to break the hotkeys? `Alt-J` and then selecting a channel and starting typing will search instead of sending the message
#thelounge/2021-06-08.log:8:[00:54:18] <bookworm> lucerne: update to the latest master
#thelounge/2021-06-08.log:12:[01:05:18] <lucerne> How do I make newly joined channels go to the end of the list, instead of the beginning?
#thelounge/2021-06-10.log:163:[15:28:39] <lucerne> how do I open a chat with `alis`?
#thelounge/2021-06-10.log:167:[15:38:27] <bl1nk> lucerne: If that's a user on this network you can use /query alis to open a chat with that user.
#thelounge/2021-06-10.log:168:[15:38:55] <lucerne> Thanks
#thelounge/2021-06-14.log:618:[15:38:22] <Snuupy> lucerne: what platform
#thelounge/2021-06-14.log:620:[15:38:49] <lucerne> ?
#thelounge/2021-06-14.log:621:[15:39:25] <lucerne> ah, you meant lucenera 
#thelounge-offtopic/2021-06-08.log:100:[14:43:47] *** Parts: lucerne (~thelounge@ip202.ip-51-178-215.eu) (Bye)
#vim/2021-07-17.log:872:[23:26:00] <greyrat> How do I supress the warnings about changes in an open file? 
#znc/2021-06-07.log:3:[19:21:30] <greyrat> DarthGandalf: Is it normal for the ZNC-connected user to have noticeable delays? My messages can take from a second to more than 10 seconds to arrive
#znc/2021-06-07.log:6:[19:22:42] <lucerne> Thelounge is on the same server
#znc/2021-06-07.log:10:[19:30:02] <greyrat> DarthGandalf: I think I got `/znc` working. How can I test if it's working? (`/znc down` doesn't produce any output)
#zsh/2021-06-11.log:149:[13:17:58] <greyrat> I have a file whose name is 'weird':
#zsh/2021-06-11.log:150:[13:17:59] <greyrat> ❯ ls Fade_–_One_Reason_opening_Deadman_w.mp3| cat -vte                                                     0|0
#zsh/2021-06-11.log:151:[13:17:59] <greyrat> Fade_⍭^@M-^S_One_Reason_opening_Deadman_w.mp3$
#zsh/2021-06-11.log:154:[13:18:45] <greyrat> Does this filename contain a NUL char? Is there a command I can run to 'normalize' its filename?
#zsh/2021-06-11.log:163:[13:24:19] <greyrat> Mikachu: When I feed that filename to Python, it breaks Python's UTF decoder
#zsh/2021-06-11.log:164:[13:24:38] <greyrat> `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb3 in position 57: invalid start byte`
#zsh/2021-06-11.log:167:[13:25:35] <greyrat> Any tool I can use to sanitize the filename myself?
#zsh/2021-06-11.log:169:[13:25:51] <greyrat> I want it to be automatic
#zsh/2021-06-11.log:170:[13:26:15] <greyrat> It's likely that the other files are problematic, too, as they were all exported by Telegram
#zsh/2021-06-11.log:174:[13:30:12] <greyrat> BTW, the hex of that dash is:
#zsh/2021-06-11.log:175:[13:30:13] <greyrat> 00000000  e2 80 93                                          |...|
#zsh/2021-06-11.log:176:[13:30:14] <greyrat> 00000003
#zsh/2021-06-11.log:180:[13:43:47] <greyrat> Mikachu:
#zsh/2021-06-11.log:181:[13:43:49] <greyrat> iconv: conversion to utf7 unsupported
#zsh/2021-06-11.log:182:[13:43:49] <greyrat> iconv: try 'iconv -l' to get the list of supported encodings
#zsh/2021-06-11.log:183:[13:44:25] <greyrat> ❯ echo -E - Fade*mp3 | iconv -f latin1 -t utf-8
#zsh/2021-06-11.log:184:[13:44:25] <greyrat> Fade_â_One_Reason_opening_Deadman_w.mp3
#zsh/2021-06-24.log:91:[02:06:52] <lucerne> I want the glob `*.png` to be sorted so that `b-3.png` comes before `b-10.png`
#zsh/2021-06-24.log:93:[02:07:49] <lucerne> thanks!
#zsh/2021-06-30.log:191:[13:30:11] <lucerne> How do I use gprof2dot with zprof? I tried `zprof  | gprof2dot -f perf | dot -Tpng -o output.png ` but I get `UnicodeDecodeError: 'utf-8' codec can't decode byte 0x83 in position 4884: invalid start byte`
#zsh/2021-07-01.log:206:[15:01:06] <greyrat> I am trying to write a completion function for a dictionary function. I have tried:
#zsh/2021-07-01.log:207:[15:01:10] <greyrat> function _sp {
#zsh/2021-07-01.log:208:[15:01:10] <greyrat>   _alternative "words:nothing here:${(pj. .)$(cat /usr/share/dict/words)}"
#zsh/2021-07-01.log:209:[15:01:10] <greyrat> }
#zsh/2021-07-01.log:210:[15:01:10] <greyrat> compdef _sp sp
#zsh/2021-07-01.log:211:[15:01:18] <greyrat> But this does not work.
#zsh/2021-07-01.log:212:[15:03:57] <greyrat> `  _alternative "words:nothing here:(${(pj. .)${(f)$(cat /usr/share/dict/words)}})"` does not work either.
#zsh/2021-08-07.log:311:[22:00:02] <lucerne> I like to use a "getter" function for some variable foo, such that using "$foo" is equivalent to "$(foo-getter)".
#zsh/2021-08-07.log:312:[22:00:02] <lucerne> It think this should be possible, as $EPOCHREALTIME seems to do so.
#zsh/2021-08-07.log:325:[22:45:29] <lucerne> No, it's not worth patching the source :(
#zsh/2021-09-05.log:245:[16:11:32] <lucerne> What does `${YSU_IGNORED_ALIASES[(r)$key]}` mean?
#zsh/2021-09-05.log:246:[16:11:49] <lucerne> (`(r)` is where I don't underdont.)
#zsh/2021-09-06.log:15:[01:07:14] <lucerne> Is bash's `huponexit` the default behavior in zsh?
alis/2021-06-08.log:1:[00:38:10] <greyrat> list emacs
alis/2021-06-08.log:33:[16:19:46] <greyrat> list tmate
alis/2021-06-08.log:39:[16:19:56] <greyrat> list tmate
alis/2021-06-08.log:45:[16:20:15] <greyrat> list tmate
alis/2021-06-08.log:51:[16:20:47] <greyrat> list tmate
alis/2021-06-09.log:1:[14:00:51] <greyrat> list brew
alis/2021-06-10.log:1:[01:06:36] <greyrat> list perl
alis/2021-06-10.log:23:[01:29:56] <greyrat> list awk
alis/2021-06-10.log:34:[01:31:06] <greyrat> list sed
alis/2021-06-10.log:44:[01:31:52] <greyrat> list regex
alis/2021-06-10.log:52:[15:28:54] <greyrat> list v2
alis/2021-06-10.log:60:[15:29:09] <greyrat> list ss
alis/2021-06-10.log:128:[15:29:54] <greyrat> list shadow
alis/2021-06-10.log:137:[15:30:03] <greyrat> list vpn
alis/2021-06-10.log:148:[15:30:43] <greyrat> list trojan
alis/2021-06-10.log:151:[15:30:51] <greyrat> list naive
alis/2021-06-10.log:154:[22:18:14] <greyrat> list php
alis/2021-06-10.log:188:[22:19:07] <greyrat> list discourse
alis/2021-06-11.log:1:[14:32:48] <greyrat> list lua
alis/2021-06-11.log:11:[15:00:37] <greyrat> list django
alis/2021-06-11.log:32:[18:37:24] <greyrat> list grep
alis/2021-06-11.log:40:[18:37:35] <greyrat> list rg
alis/2021-06-11.log:108:[18:38:01] <greyrat> list elixir
alis/2021-06-11.log:112:[18:58:36] <greyrat> list ack
alis/2021-06-14.log:1:[14:56:27] <greyrat> list eng
alis/2021-06-14.log:58:[14:57:03] <greyrat> list english
alis/2021-06-18.log:1:[14:16:02] <greyrat> list disc
alis/2021-06-18.log:31:[16:40:45] <greyrat> list linux
nickserv/2021-06-07.log:1:[17:47:45] <greyrat> /msg nickserv identify mantle5admix'dream
nickserv/2021-06-07.log:4:[17:47:53] <greyrat> identify mantle5admix'dream
nickserv/2021-06-07.log:6:[17:54:55] <greyrat> register greyrat fiery&alexei rudiwillalwaysloveyou@gmail.com
nickserv/2021-06-07.log:8:[17:55:48] <greyrat> register fiery&alexei rudiwillalwaysloveyou@gmail.com
