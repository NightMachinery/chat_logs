[01:45:01] *** Joins: boc_tothefuture[ (~boctothef@2001:470:69fc:105::1:3558)
[01:47:24] <boc_tothefuture[> Hello folks - I have been working on (with help from this room and others) a JRuby integration for the OpenHAB home automation project.  The PR was merged today (yay!) so it should be in the next release.  I had a question that I couldn't find an answer to on the wiki or the website (maybe I missed it?).  Are there any restrictions on the JRuby logo or can it be included? Most integrations have an icon so the user can visually identify
[01:47:24] <boc_tothefuture[> them when installing.  
[02:49:14] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[04:23:08] *** Joins: sagax (~sagax_nb@user/sagax)
[05:15:25] <MattWelke[m]> I'm having some trouble dockerizing a test JRuby app. I'm going for the modern approach where you have multi layer builds and you use the first layer to build your runtime and your app and then copy in just what's needed to run your app into the final layer.
[05:15:25] <MattWelke[m]> This is the app, which I've got working when I run it on my machine (using sdkman! to get Java and rbenv to get JRuby): https://github.com/mattwelke/jruby-javalin-example
[05:16:03] <MattWelke[m]> Here's my Dockerfile so far: https://gist.github.com/mattwelke/6c2076a33f1aa7e77c410bcfc5bce724
[05:16:35] <MattWelke[m]> The error I get when I try to run my image as a container is:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ef08f6eb9df65f7533c0f37d7cfd688ae66586cb)
[05:18:39] <MattWelke[m]> I'm not surprised by this error because I'm not copying in the jars that jbundle downloaded for me. I can't figure out where jbundler put them though in my `build-ruby` image. On my machine, jbundler puts jars into `$HOME/.m2`, like its docs say it would. But I'm not using Maven in my builder image, as far as I know. Either way, the builder image has no `HOME` env var. I tried adding some `ls` commands in my Dockerfile to try to look
[05:18:39] <MattWelke[m]> around for the jars as the build executes, but had no luck.
[05:22:40] <MattWelke[m]> A few things that might look odd, which I'm open to feedback on. I might be missing important things.
[05:22:40] <MattWelke[m]> I'm using Java 17 for one of the builders but Java 11 to fetch my dependencies. This is intentional. I noticed when using JRuby on my local machine that jbundler appears to not support anything greater than Java 11. But I want to use Java 17 to run my app for performance reasons. My understanding is that new Java can run old Java class files because they're forwards compatible.
[05:22:40] <MattWelke[m]> I'm copying in the Gemfile and Jarfile (and their lock files) from the build context into the runtime image. That's because I noticed a different error when I tried to run the app before doing this. I forgot to write down that error, but I googled around and learned that jbundler needs to be around at runtime in order to set up the classpath for the running app.
[05:22:40] <MattWelke[m]> I'm using bundler version 1.17.3 instead of the most recent version. This is also intentional because I noticed when trying to use the most recent version that jbundler didn't work. I commented about this on https://github.com/mkristian/jbundler/issues/90.
[05:25:30] <MattWelke[m]>  * A few things that might look odd, which I'm open to feedback on. I might be missing important things.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/0d547163dc0f4d1a8e151a6839732db70503de72)
[06:28:43] *** Joins: rcrews[m] (~rcrewsmat@2001:470:69fc:105::1:3583)
[08:47:45] <kares[m]> Hey Matt, believe JBundler is effectively dead by now and has been replaces by jar-dependencies (part of JRuby).
[08:47:45] <kares[m]> Jars (dependencies) either loads jars from the Maven repo or rather you could vendor the jars with your app/gem.
[09:11:53] <MattWelke[m]> Thanks! I found both jbundler and jar-dependencies when looking around. I couldn't find a clear answer about what each one was for but I saw jar-dependencies mentioned in jbundler's repo, so I concluded that the relationship between them was that jbundler worked at a higher level and somehow leveraged jar-dependencies.
[09:12:21] <MattWelke[m]> I'll look more into jar-dependencies next time I hack on this.
[09:22:53] <MattWelke[m]> Just checked again. I had it backwards. jbundler was mentioned in the jar-dependencies readme. But the reason I directed my attention to jbundler instead was because the jar-dependencies readme begins by talking about gemspecs and bundling gems. That's not what I was looking for. I was looking for something to help me manage the Java dependencies my app has. In my little test app, that's Javalin.
[09:24:41] <MattWelke[m]> But the jbundler readme jumps right into talking about Jarfile and Jarfile.lock. It immediately felt to me like it was a tool meant to track and download jars you're interested in, like how one would use Maven or Gradle in JVM projects. That's what drew me to it.
[10:24:30] <kares[m]> Honestly I haven't used JBundler that much but there was a way to lock down jars - would have expected a way to vendor them as well, again I am not sure and would need to play with things a bit. But I am sure jar-dependencies has the vendoring functionality.
[12:19:17] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[15:56:03] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[17:31:57] <boc_tothefuture[> headius:  are you the right person for my icon question above?  I did search again and couldn't find anything. 
[18:05:06] <enebo[m]> boc_tothefuture: You can use the logo.  It was made for our use when we worked at engine yard but it was made specifically to not run afoul with use Java duke
[18:40:55] <boc_tothefuture[> Thanks!  
[18:42:00] *** Quits: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net) (Remote host closed the connection)
[18:42:24] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[18:46:51] <headius> Good morning!
[18:46:54] <headius> back in the saddle
[18:48:51] <kares[m]> Good afternoon!
[18:49:49] <headius> boc_tothefuture: hopefully you also found jruby/collateral which has the vector originals for the various logos and logotypes
[18:50:23] <headius> anewbhav: obviously startup time is a known issue but there are some ways to mitigate... maybe you can describe your setup a bit for us?
[18:51:00] <headius> We still support "drip" which is a JVM preloader that has helped some folks. You might also look at "thein" (I think that's the name) which is a JRuby-compatible preloader for Rails
[18:52:08] <headius> Matt Welke: The maven+jruby situation is kinda all over the place and we are seeking to take over the related gems so we can get that straightened out. That whole ecosystem was maintained by someone who is no longer active in JRuby, so it is a bit confusing and undermaintained right now
[18:52:53] <headius> related gems/artifacts... there's a combination of Ruby and Java libraries that support JRuby+Maven (several of which we use to build and test JRuby itself)
[18:54:17] <boc_tothefuture[> @headius: I hadn't.. but that is perfect. 
[19:18:05] <headius> enebo: 9.3.2
[19:18:15] <enebo[m]> yeah
[19:18:42] <enebo[m]> we cannot consider it until we get GHA worked out but that is pretty close
[19:18:42] <headius> I think we were close two weeks ago, what is outstanding now?
[19:18:48] <headius> ah that is a good call
[19:18:57] <headius> I will look at mattpatt PR today
[19:19:11] <enebo[m]> I also just opened an issue with strftime perf improvements
[19:19:17] <headius> noice
[19:19:24] <enebo[m]> I would like to merge it but not until we have GHA
[19:19:47] <enebo[m]> strftime for pattern logger uses is 3.3x faster
[19:20:08] <enebo[m]> but I imagine that will generally translate to most format strings
[19:20:41] <enebo[m]> It is a fairly complicated format so perhaps it gets faster the longer it is but it is all pretty linear
[19:21:06] <enebo[m]> Once we get a callsite cache then this can be made faster again too
[19:21:38] <headius> yeah for sure
[19:21:58] <headius> looking at GHA PR and my first thought is about all these jobs
[19:22:05] <enebo[m]> HAHAH
[19:22:16] <enebo[m]> yeah it is a lot when you see it in this UI
[19:22:17] <headius> at least they scroll now (for a while they just made the "checks" box gigantic) but there's sure a lot of them
[19:22:50] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[19:22:50] <lopex[m]> heh I guess you already know about this https://openjdk.java.net/jeps/8277131
[19:22:55] <enebo[m]> some of these can be groups like all spec/ruby ones but they need to toggle the group to not cancel on first fail
[19:23:22] <headius> lopex: I did not know about the JEP but I knew this was coming
[19:23:33] <headius> this is a fairly natural progression from coroutines
[19:23:49] <lopex[m]> so internal green scheduler ?
[19:23:51] <enebo[m]> That seems to just be a config.  For me though I am ok with refining this and just getting something showing reasonable results first
[19:23:57] <headius> if we could get some time to play with experimental stuff we could have true fibers within a week
[19:23:57] <lopex[m]> M:N like BEAM ?
[19:24:18] <headius> I believe it's more like a fiber scheduling system based on the coroutine work in loom
[19:24:48] <lopex[m]> so cooperative..
[19:26:05] <headius> yeah mostly that I guess... I am behind on it but they have taken care to make coroutines live well with blocking calls and locks and such so I guess there could be scheduler intervention at those points too
[19:26:30] <headius> if we're lucky they are basically implementing the new Ruby 3 scheduler model and we'll be able to just plug it in
[19:26:47] <headius> we have also been tossing around thoughts about what JDK level to go to when we drop 8
[19:27:02] <enebo[m]> "The scheduler for virtual threads is a work stealing ForkJoinPool, that works in first-on-first-out (async) mode, and with parallelism set to the number of available processors."
[19:27:05] <headius> clearly it won't be 9, but if we do it next year could it be 17?
[19:27:28] <lopex[m]> 17 is LTS I guess ?
[19:27:34] <enebo[m]> Feels like this will mostly just allow a lot of people to stop handrolling this
[19:27:34] <headius> enebo: yeah so probably work-stealing at blocking-call points due to coroutine work
[19:27:56] <headius> it already will work steal on subjob boundaries but this would expand it into fiber yields etc
[19:28:08] <enebo[m]> perhaps some magic on seeing blocking beneath java?
[19:28:40] <headius> they already have hooks to know when you are going to do a blocking IO or lock so at that point they can deschedule the current coroutine and run another one for a while
[19:28:51] <enebo[m]> yeah
[19:29:30] <enebo[m]> The evolution of Java has been interesting to watch
[19:29:56] <lopex[m]> and I guess it will affect jit as well right ? since similar things arise like biasing etc
[19:30:01] <enebo[m]> It started where nothing could ever change to build up its reliability across a large number of vendors
[19:30:23] <enebo[m]> Then when externally pressured they realized they needed to improve things quicker
[19:30:30] <enebo[m]> Now the firehose is wide open
[19:30:31] <headius> it is funny and sad that I/we told them how useful this would be over a decade ago at JVMLS and I was shot down by none other than Doug Lea who tried to tell me that thread switching wasn't that bad and nobody needs more than 1000 concurrent jobs
[19:30:42] <headius> thanks Doug
[19:31:10] <enebo[m]> yeah rear guard was defeated by the time they switched release strides
[19:31:41] <enebo[m]> Honestly adding new stuff under the covers is a much simpler sell than externally visible features
[19:32:00] <enebo[m]> but people have been wishing for externally visible features more and they are providing them
[19:32:14] <headius> we could see some interesting use cases if we got our fibers hooked up to Loom
[19:32:38] <enebo[m]> This is sort of the shark decided to start swimming but the the difference between this and Ruby is people actually wanted these features for over a decade
[19:32:50] <headius> yeah and were told they didn't really want them
[19:33:05] <enebo[m]> yeah from google employees :) /ducks
[19:33:14] <headius> so back to GHA...
[19:33:31] <headius> this is promising already... mri:core passes along with most of the smaller suites
[19:33:44] <enebo[m]> getlogin is not working on the image so I think we tag it
[19:34:00] <headius> I will look into the failing suites and work with mattpatt to tweak them, or else we merge and just fix on branch
[19:34:28] <enebo[m]> we have 6 other failures in spec/ruby which I actually see on fedora core as well but they are ipv6 or socket constants.  We should probably tag all of these since they were never working
[19:35:35] <enebo[m]> spec:ji has an issue with no 'touch' (which seems simple to workaround) but there might be another issue in there since a bunch of stuff is giving unhelpful error messages.  I will but it is not having javac or something
[19:35:38] <headius> JI specs failing is a a bit surprising
[19:35:40] <headius> aha
[19:35:57] <enebo[m]> it could all just be touch but that is the easy error
[19:36:24] <enebo[m]> errors above those errors are mysterious so I figured something we compile is not happening which leads to weird errors...it is just a guess though
[19:36:47] <headius> how can touch not exist
[19:36:58] <enebo[m]> on a stripped down linux instancer?
[19:37:29] <enebo[m]> I find it funny it is not there but it is pretty easy to see how it happens
[19:37:36] <headius> well are these really stripped down? it is a basic POSIX utility
[19:37:43] <headius> it would be like not having ls
[19:38:05] <enebo[m]> Is it POSIX?
[19:38:08] <headius> it is
[19:38:27] <enebo[m]> Even if it wasn't it is GNU coreutils
[19:38:37] <headius> yeah something else might be causing this
[19:38:42] <headius> weird path or something
[19:38:55] <headius>  /usr/local/bin/touch or something
[19:39:03] <headius> but that would still be really weird
[19:39:27] <enebo[m]> yeah I thought of that but why would touch not be in same place as cp rm (unless those fail too)
[19:39:36] <headius> TestSocketAddrinfo#test_addrinfo_new_inet [/home/runner/work/jruby/jruby/test/mri/socket/test_addrinfo.rb:90]:
[19:39:36] <headius> <[46102, "127.0.0.2"]> expected but was
[19:39:36] <headius> <[46102, "127.0.0.1"]>.
[19:39:46] <headius> this is clearly a GHA ifconfig issue
[19:39:57] <enebo[m]> ah yeah I forgot about that
[19:40:08] <headius> that's the only one failing in mri:stdlib
[19:40:42] <enebo[m]> yeah that is a bad MRI test
[19:40:56] <enebo[m]> err no it isnt
[19:41:04] <enebo[m]>     ai = Addrinfo.new(["AF_INET", 46102, "localhost.localdomain", "127.0.0.2"])
[19:41:05] <enebo[m]>     assert_equal([46102, "127.0.0.2"], Socket.unpack_sockaddr_in(ai))
[19:41:14] <headius> oh hmm
[19:41:30] <enebo[m]> I thought it would be based on how much they hard-code 127.0.0.1 here
[19:41:31] <headius> why would that run differently here
[19:41:59] <enebo[m]> are we reverse looking up smoething based on localhost.localdomain?
[19:42:53] <headius> that seems likely
[19:43:26] <headius> well or at least a good possibility
[19:43:33] <headius> but I have no 127.0.0.2 locally and it works
[19:43:36] <enebo[m]>             return RubyArray.newArray(runtime, addrinfo.ip_port(context),
[19:43:36] <enebo[m]>                                       addrinfo.ip_address(context));
[19:43:44] <headius> hah
[19:43:46] <enebo[m]> ip_address is the thing
[19:44:13] <headius> yeah it goes back to the address and asks for its address
[19:44:27] <headius> which may resolve back to 127.0.0.1 in this env
[19:44:40] <enebo[m]> yeah and this dips into Java impl of this
[19:46:14] <enebo[m]> heh it is possible AddrInfo changes this before that point in initialize too
[19:46:21] <headius> looks like it from the JDK source
[19:46:37] <headius> I don't see anything weird in the "get" methods
[19:47:12] <headius> this passes for you on fedora?
[19:49:01] <enebo[m]> I get no failures locally with test:mri
[19:49:26] <headius> test:mri:stdlib is a subset, but I think included in test:mri
[19:49:36] <enebo[m]> I get the 6 we see in spec/ruby but those I always thought were some env issue with ipv6
[19:49:48] <enebo[m]> Let me try running locally
[19:50:24] <enebo[m]> I thought that was the last part of doing spec:mri
[19:50:57] <headius> task mri: ['test:mri:core:int', 'test:mri:extra:int', 'test:mri:stdlib:int']
[19:51:01] <headius> so yeah it should run
[19:51:25] <enebo[m]> yeah I just ran through these on my new_strftime branch before landing since I will not get CI
[19:51:33] <headius> reading through the code nothing jumps out so it would help to be able to step through this and see where the address goes arong
[19:51:34] <headius> wrong
[19:51:55] <enebo[m]> GHA is basically just a container thing right?
[19:52:03] <enebo[m]> Can we run them locally?
[19:52:09] <headius> ubuntu 20.04
[19:52:12] <headius> probably
[19:52:34] <enebo[m]> but it has to be "some" ubuntu 20.04 image since it does not seem to have touch of getlogin
[19:52:38] <enebo[m]> s/of/or
[19:56:54] <headius> I have 20.04 running on docker locally, will try to repro
[19:57:54] <headius> I always forget to install jdk headless
[20:07:00] <headius> of course it works fine
[20:07:51] <headius> I will try mri:stdlib run on this container and hope it fails
[20:10:53] <headius> huh that one didn't fail but the ipv6 version did
[20:10:58] <headius> TestSocketAddrinfo#test_addrinfo_new_inet6 [/jruby/test/mri/socket/test_addrinfo.rb:520]:
[20:10:58] <headius> <[42304, "::1"]> expected but was
[20:10:58] <headius> <[42304, "127.0.0.1"]>.
[20:11:14] <headius> so something along that path is re-resolving this back to 127.0.0.1
[20:14:41] <headius> I can repro at command line
[20:15:48] <headius> I think I see it
[20:16:02] <headius> if nodename is given it prefers that for getting the InetAddress
[20:21:44] <headius> # bin/jruby -rsocket -e 'p Socket.unpack_sockaddr_in(Addrinfo.new(["AF_INET6", 42304]))'
[20:21:44] <headius> ConcurrencyError: Detected invalid array contents due to unsynchronized modifications with concurrent users
[20:21:47] <headius> woah
[20:21:59] <headius> # bin/jruby -rsocket -e 'p Socket.unpack_sockaddr_in(Addrinfo.new(["AF_INET6", 42304]))'
[20:21:59] <headius> ConcurrencyError: Detected invalid array contents due to unsynchronized modifications with concurrent users
[20:22:07] <headius> not bounds-checking the incoming array at all
[20:27:23] <enebo[m]> heh
[20:29:02] <headius> I may have a fix
[20:29:16] <headius> basically when it has both a host and an address it needs to use the InetAddress.getByAddress form
[20:29:30] <headius> so it gets the requested hostname with the requested address rather than looking up the hostname
[20:30:41] <headius> it was basically ignoring the address if you give a hostname in this form
[20:35:56] <headius> enebo: https://github.com/jruby/jruby/pull/6943
[20:36:17] <headius> I can't repro the ip4 version but that should work
[20:37:07] <headius> the rubyspec failures almost look like it is laying out the sockaddr wrong for current platform
[20:37:14] <headius> BasicSocket#recvmsg_nonblock using IPv6 using a connected but not bound socket raises Errno::ENOTCONN ERROR
[20:37:14] <headius> Expected Errno::ENOTCONN
[20:37:14] <headius> but got: NotImplementedError (recvmsg_nonblock is not implemented)
[20:37:17] <headius> that is pretty weird
[20:38:28] <enebo[m]> headius: looks good to me
[20:39:06] <headius> I'm not thrilled about creating another InetAddress to get the address bytes but not sure what logic to use to turn an arbitrary string into appropriate ip4 or ip6 bytes
[20:39:29] <headius> it should see this as an IP and not try to resolve so it should be cheap enough
[20:40:21] <headius> ```Etc.getlogin.should == `logname`.chomp```
[20:40:53] <headius> the related failure in rubyspec probably indicates `logname` is not available either
[20:42:30] <enebo[m]> but getlogin was also an issue as wellright?
[20:42:53] <headius> hmm this does check if logname can be run
[20:43:04] <enebo[m]> https://github.com/jruby/jruby/pull/6942
[20:43:11] <enebo[m]> Just to show that PR
[20:43:44] <headius> nice
[20:43:58] <enebo[m]> HAHAHA so longname does exist but getlogin doesn't
[20:44:11] <headius> our etc should be using ffi though
[20:44:14] <enebo[m]> and touch is not in PATH or there
[20:46:34] <headius>   1) Dir globs (Dir.glob and Dir.[]) respects jar content filesystem changes
[20:46:34] <headius>      Failure/Error: `zip -d #{jar_path} glob_target/bar.txt`
[20:46:34] <headius>      Errno::ENOENT:
[20:46:34] <headius>        No such file or directory - zip
[20:46:36] <headius> another one
[20:46:59] <headius> instaling zip and touch would fix JI specs
[20:48:48] <enebo[m]> we can write a ruby touch in a few lines
[20:49:06] <headius> makes no sense for it not to be there so I still suspect something else is up
[20:49:06] <enebo[m]> I would say the same of zip but that I guess depends on what we are doing with zip
[20:49:15] <enebo[m]> sure
[20:49:28] <headius> looks like this is using it to manipulate jars
[20:49:34] <headius> could just be a jar comman
[20:49:51] <headius> jar uf
[20:51:06] <headius> how can touch not be there 😡
[20:52:01] <enebo[m]> HAHAHA logname is there
[20:52:36] <headius> yeah I am still stumped on that one... mspec has poor language for failures but I think what is failing may actually be the getlogin call
[20:53:11] <enebo[m]> I thought it was getlogin returning nil
[20:53:15] <headius> hmm or not?
[20:53:22] <headius> Etc.getlogin.should == `logname`.chomp
[20:53:32] <headius> error is Expected "runner" == ""
[20:53:46] <headius> I assume the order is the same so getlogin returned "runner" and logname returned "" or just failed outright
[20:54:03] <headius> in the log above
[20:54:03] <headius> aha
[20:54:04] <headius> ```logname: no login name```
[20:54:10] <headius> how
[20:54:59] <enebo[m]> I was going to say spec/mspec is better than test/unit in that is makes expected vs actual simpler to write but I cannot read that error string 
[20:55:20] <headius> The "logname: no login name" error is due to logname expecting a tty session which ssh normally does not provide and has nothing to do with your script. The -t option forces a tty so logname completes successfully
[20:55:32] <headius> rando comment on some linux forum
[20:55:41] <enebo[m]> ah yeah
[20:56:00] <headius> this would need a patch in rubyspec
[20:56:00] <enebo[m]> This happens for other things too
[20:56:18] <enebo[m]> Interesting to think no one else is running this spec on GHA
[20:56:30] <headius> travis probably set up a pty for their runs and gha doesn't
[20:56:31] <enebo[m]> how are they running it?
[20:56:50] <headius> hmm good question
[20:56:51] <enebo[m]> Or maybe they are running an instance which does set up a pty
[20:57:13] <enebo[m]> I would argue the PR would make sense regardless
[20:57:27] <enebo[m]> it can still pass without tty/pty
[20:57:51] <headius> I don't see anything odd in the rubyspec GHA
[20:58:10] <enebo[m]> and they don't tag
[20:58:32] <headius> the spec even has special logic for env TRAVIS
[20:58:33] <enebo[m]> for MRI
[20:59:47] <headius> this spec is bad
[21:00:18] <headius> it also has logic that checks if Etc.getlogin returns nil, and if it does, it makes sure that Etc.getlogin returns ENV['USER']
[21:00:25] <headius> which will probably never pass
[21:01:13] <headius> I have patches for zip and login -t 
[21:01:21] <headius> logname -t
[21:32:33] <headius> I merged the Addrinfo thing, will push this other stuff shortly
[21:42:28] <headius> hmm great, logname -t is a gnuism
[21:50:04] <headius> enebo: FileUtils also provides touch so I'll just use that
[21:54:23] *** Joins: MateuszFryc[m] (~lirimaery@2001:470:69fc:105::1:3640)
[21:58:24] <MateuszFryc[m]> Hi all, I am wondering if some of you could shed some light on issue which I am struggling with, namely I migrated from jruby 1.7.2 to jruby 9.3.1.0. I am sending queries written in ruby to java server, and after migration it happened twice in last two days that jvm crashed with fatal error, during compilation of method from jruby. As far as I understand this crash occurs during OSR compilation by C2 compiler, and OSR_BCI equals to 408,
[21:58:24] <MateuszFryc[m]> what is peculiar is the fact that each time it crashed OSR_BCI indicated 408th byte.
[21:58:47] <MateuszFryc[m]> I tried to reproduce this issue, but without a success so far.
[21:59:09] <MateuszFryc[m]> Could you please advice how to approach such problem ? 
[22:00:58] <MateuszFryc[m]> I attach small excerpt from hs_err file: https://pastebin.com/2Ytxw43s
[22:01:34] <headius> Congrats on finding a jvm bug
[22:01:37] <MateuszFryc[m]> # JRE version: OpenJDK Runtime Environment (17.0+35) (build 17+35-2724)
[22:02:39] <MateuszFryc[m]> So it has not much in common with the fact that, crash occurs on compilation of parser_magic_comment, I suppose.
[22:03:05] <MateuszFryc[m]> * common with JRUBY (the fact, * of parser_magic_comment), I
[22:03:57] <MateuszFryc[m]> because this is peculiar that crash showed up on compiling this particular method twice. However other compilation of this method where OSR_BCI was different than 408 finshed sucessfully.
[22:05:08] <headius> Usual procedure here is filing an issue with openjdk directly, which I can help with
[22:05:34] <headius> There's really nothing we can do in jruby other than provide workarounds like not compiling this particular method
[22:05:54] <headius> Any crash in the jvm compiler is entirely a jvm bug and they are usually pretty quick to jump on it
[22:06:12] <MateuszFryc[m]> ok, I understand.
[22:06:16] <headius> You could try disabling osr
[22:06:39] <headius> Sometimes disabling the tiered compiler can help as well
[22:06:50] <MateuszFryc[m]> well I have never submitted any bug to openjdk, so it would be probably helpful If you could direct me somehow.
[22:06:56] <headius> Via JVM flags
[22:07:19] <MateuszFryc[m]> Well, but as I understand this kind of configuration can decrease the overall performance of my app.
[22:07:23] <headius> You need to be an open jdk member to directly file bugs but you could also post this to the public hotspot compiler list and have the same effect
[22:08:03] <headius> Disabling osr is unlikely to affect performance since most methods will compile normally. Osr just allows it to replace code that's running on the stack, like a long loop
[22:08:29] <headius> If it can't osr than it will just replace the method for future calls
[22:08:49] <headius> If the bug is actually in how it is compiling this method then we we'll need to find another option
[22:09:01] <MateuszFryc[m]> yeah, I read some articles about this technique. Some long running loops could underperfom then If I understand correctly.
[22:09:26] <headius> Only if they never exit. If they are hot and eventually return then future calls should use the optimized version
[22:09:30] <MateuszFryc[m]> But of course it would be worth to try it, and check experimentally whether this will have visible impact on my server.
[22:10:09] <MateuszFryc[m]> If the issue is only with compilation of this particular method parser_magic_comment, then most likely I will be able to workaround it by excluding from compiling this single method.. I guess.
[22:10:13] <headius> And if this is failing in C2 using tiered compilation, the worst case is that the method is only compiled by C1 and should still be plenty fast
[22:10:36] <headius> Anyway that would be my first recommendation for you to try, and we should raise this up to openjdk folks one way or another
[22:10:42] <headius> Especially since this is in a 17 release
[22:11:11] <headius> Clearly it would help if we could reproduce but if you know exactly what method is failing that might be enough
[22:12:56] <MateuszFryc[m]> Well I tried to reproduce it, but without a success, I didn't come across same compilation (same method (parser_magic_comment)/compilation type OSR/phase - 4/OSR_BCI 408)
[22:13:38] <MateuszFryc[m]> I have two hs_err files, probably they could be handy?
[22:13:49] <headius> For sure
[22:14:04] <headius> I'm on mobile for a few minutes but I will have a look at them in a bit
[22:16:35] <MateuszFryc[m]> Perhaps a stupid question, because program which crashes doesn't belong to me. Are there some vulnerable information in such hs_err file, which I wouldn't like to leak out ? Shuld I sanitize it somehow, can you advice?
[22:17:28] <headius> There definitely could be environment specific information, like file paths. Hard to say what would really be sensitive
[22:17:50] <headius> It's just text so have a look at it and see if anything looks risky
[22:18:25] <headius> I know they try to keep sensitive information out of there so mostly file paths and call stacks you can't really avoid
[22:18:27] <MateuszFryc[m]> what about binary data? from registers etc?
[22:20:29] <mattpatt[m]> @headius: will be around for a bit once kid is down if you want to look at GHA stuff
[22:23:39] <headius> mattpatt: yeah cool, I will push some of these other fixes and have you rebase or merge and see how we're doing
[22:24:20] <headius> I am leaning towards merging before it is green just to make it easier to test small fixes and to get the green jobs running
[22:25:24] <MattWelke[m]> Hey headius just wanted to say that JS for being so active here and answering questions, including my own. I'm not using JRuby at work right now so it's mostly a weekend thing for me because I find the project interesting. I'll read up on your answers next time I'm tinkering.
[22:25:24] <MattWelke[m]> P.s. hope you're feeling better. Saw the Twitter messages.
[22:25:33] <MattWelke[m]> s/that/thanks/, s/JS//
[22:26:25] <headius> Yeah just a bit tired at this point
[22:39:42] <headius> enebo: this login spec also has a fallback to the 'id' command, which is also posix.2 and may not have the same tty issues
[22:40:10] <headius> Matt Welke: let us know if you get to the point of running something larger on JRuby, we're happy to help you bootstrap
[22:40:49] <enebo[m]> headius: I wonder why id is not used
[22:41:50] <headius> yeah not sure
[22:42:21] <headius> it could also read LOGNAME env but there are clearly a bunch of possible fallbacks here and no clear way to choose the right one
[22:42:39] * MateuszFryc[m] posted a file: (348KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/osfLRafGHfBVxUnjOsrfufSm/hs_err_pid18093.sanitized.log >
[22:42:57] <MateuszFryc[m]> this is hs_err log file from one crash.
[22:43:59] <MateuszFryc[m]> if you could help me @headius to send it to  openjdk team I would be grateful :) 
[22:45:19] <headius> yup, that's definitely a hotspot bug
[22:45:32] <MateuszFryc[m]> the question is also whether they will be able to handle it without the way to reproduce it.
[22:46:11] <headius> SEGV no less
[22:46:11] <headius> Mateusz Fryc: I have yet to dump a crash on them they couldn't figure out
[22:46:51] <MattWelke[m]> <headius> "Matt Welke: let us know if you..." <- Yeah for sure. I doubt that'd happen at my work. We have many languages in our stack already, none of which are Ruby. But we do use the JVM a lot. Some things I want to explore out of curiosity though are writing Apache Beam pipelines and ML stuff in Ruby.
[22:46:53] <headius> Mateusz Fryc: https://mail.openjdk.java.net/mailman/listinfo/hotspot-compiler-dev
[22:47:18] <headius> feel free to post there what you've told us here + hs_err dump
[22:47:33] <headius> drop my name if you like and I will monitor the list
[22:47:58] <headius> I'd open an issue directly but I'm not sure about procedure for crashes like this
[22:48:09] <MattWelke[m]> In the Beam ecosystem, right now, the Java stuff is better than the Python stuff (and those are the only two langs officially supported). Lots of Beam users hate having to code in Java. Static typing can slow them down when writing data pipelines. Hence me being curious what it'd be like using Ruby.
[22:48:15] <MateuszFryc[m]> ok, thank you. I will do it this week, now I go to  supper ;] thank you for your help and time.
[22:48:25] <headius> Matt Welke: yeah that sounds like a great use case
[22:48:38] <headius> Mateusz Fryc: if you get a chance open a JRuby issue too, so we can track discussion there
[22:48:49] <headius> it's not a bug we can fix but we like to have a record of it in our tracker
[22:49:26] <MateuszFryc[m]> Ok.
[22:49:53] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/dfc1a8b01976aadc6f348ab307495e39f22920a0
[22:50:09] <headius> enebo: without knowing why one would use `logname` instead of `id` this might be workable
[22:50:30] <headius> I will open an issue on ruby/spec for discussion
[22:51:16] <mattpatt[m]> headius: think I'm out of the woods and kid is asleep, I'll be about for an hour or so before I turn into a zombie
[22:52:18] <enebo[m]> heh that is way too much logic for this too.  If it is that hard to determine a username then perhaps it should be its own gem
[22:52:31] <enebo[m]> not that we want a spec library to depend on a gem
[22:53:16] <enebo[m]> I guess env edges are always where you see this sort of logic though
[22:55:06] <headius> https://github.com/ruby/spec/issues/898
[22:55:29] <headius> we could just tag this for now and untag when it is fixed
[22:55:43] <headius> I just don't know what the "best" way to get login user is
[22:56:21] <headius> BTW I have not been able to find any standard image for the GHA env
[22:56:27] <headius> it may exist but naive searches did not find it
[22:58:30] <mattpatt[m]> headius: doubt there's a standard image accessible outside GHA
[22:58:49] <mattpatt[m]> if they're anything like Travis there's a lot of extra stuff baked in
[22:59:02] <mattpatt[m]> and it'll change regularly
[22:59:55] <mattpatt[m]> My assumption is that the main difference between Travis and GHA as far as our tests are concerned is that it seems like Travis ran stuff in a login shell and GHA is using a non-interactive shell
[23:00:21] <headius> yeah seems like that
[23:00:24] <mattpatt[m]> (Kinds of errors here smell like login/interactive vs non-interactive)
[23:00:39] <headius> travis did publish a docker image you could run that would be identical to their env, but that was years ago
[23:02:38] <headius> mattpatt: jruby-9.3 branch has all my current fixes: `jar` instead of `zip`, FileUtils.touch instead of `touch`, and an Addrinfo.new fix
[23:02:56] <mattpatt[m]> rebasing now
[23:03:15] <headius> that should get test:mri:stdlib and spec:ji green at least
[23:05:08] <headius> enebo: looks like logname on BSDish does not have the terminal requirement
[23:05:44] <MateuszFryc[m]> so basically,  I should post an email to hotspot-compiler-dev@openjdk.java.net.  and attach hs_err file? I thought there will be some site where I could upload it. Correct me If I am wrong ;)
[23:06:26] <headius> Mateusz Fryc: yes do that but put hs_err in a gist or something and link to it
[23:06:41] <MateuszFryc[m]> ok
[23:06:54] <enebo[m]> bleh
[23:07:04] <MateuszFryc[m]> thank you once again.
[23:07:45] <headius> Mateusz Fryc: of course you can try other JDK versions and maybe it will go away... this method has been in JRuby for a long time and this is the first time it has crashed the JVM
[23:08:43] <MattWelke[m]> <headius> "BTW I have not been able to find..." <- Is this helpful? https://github.com/actions/virtual-environments
[23:08:43] <MattWelke[m]> GHA runs workflows in VMs by default. You have to opt in to using a Docker container to run the workflow in. Their docs on networking for backing services talks about that because it has implications for whether you use `localhost` or a DNS name derived from part of the workflow YAML to connect to your backing service.
[23:08:43] <MattWelke[m]> But there they describe the environment present in the VM your workflow runs in.
[23:08:46] <headius> mattpatt: these are all really close to green as it is
[23:09:08] <headius> Matt Welke: that's useful information about the env at least
[23:09:24] <headius> the two main types of things we are seeing failing are terminal-related and socket-related
[23:09:49] <MattWelke[m]> Ah. That's all I've ever been able to find on the environments sorry.
[23:10:08] <headius> no worires
[23:10:20] <mattpatt[m]> Matt Welke: that's super useful
[23:10:29] <headius> we had to do this dart-throwing to get other suites running in GHA so it's fine
[23:10:29] <enebo[m]> mattpatt: I think you should just squash and we can merge and then solve these one by one on jruby-9.3
[23:10:38] <headius> agree
[23:11:14] <MattWelke[m]> You can check out https://docs.github.com/en/actions/using-containerized-services/about-service-containers though for examples on running your workflow in the runner (a VM) vs. in a container running on the runner.
[23:11:43] <mattpatt[m]> okay, I'll do that. It needs to be two commits because of the whole reusable-workflow thing requiring SHAs.
[23:12:03] <mattpatt[m]> Once we're green we can look at getting the snapshot deploy task working.
[23:12:08] <enebo[m]> mattpatt: cool
[23:34:04] <mattpatt[m]> headiusenebo: Updated. sha ref means the whole thing will error until it's merged
[23:34:33] <mattpatt[m]> merging it should magically make it work provided the SHAs of the commits don't change
[23:35:44] <mattpatt[m]> if that's a problem, then we could do one merge for the resuable workflow file, which is harmless by itself, and then do a merge where the PR checks will actually run the actiosn
[23:36:01] <mattpatt[m]> tbh, that's probably better
[23:36:06] <mattpatt[m]> lmk
[23:43:43] <enebo[m]> mattpatt: merged. 
[23:46:00] <mattpatt[m]> enebo: welp, the CI workflow is running now, so the SHAs work now :-)
[23:46:14] <MateuszFryc[m]> I sent an email with description of the problem to the hot spot email group. Hopefully someone will have a chance to take a look at it, unfortunately I don't know how to track discussion when it starts. ISo, when it reaches you, please open issue in jruby yourself. 
[23:46:28] <MateuszFryc[m]> * @headius I sent
[23:46:49] <MateuszFryc[m]> * headius:  I sent
[23:57:11] <headius> ok
