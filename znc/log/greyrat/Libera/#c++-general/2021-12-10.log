[00:00:13] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Ping timeout: 252 seconds)
[00:00:13] *** Flonk7 is now known as Flonk
[00:05:25] *** Joins: paulmcquad (~gamer@78.17.198.24)
[00:10:55] *** Joins: Tokamak (~Tokamak@172.58.191.89)
[00:16:55] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Ping timeout: 268 seconds)
[00:17:48] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Ping timeout: 250 seconds)
[00:18:13] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 250 seconds)
[00:18:42] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 260 seconds)
[00:19:19] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Ping timeout: 250 seconds)
[00:19:57] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 250 seconds)
[00:20:06] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[00:20:38] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Ping timeout: 268 seconds)
[00:22:10] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:30:08] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Remote host closed the connection)
[00:32:04] *** Quits: paulmcquad (~gamer@78.17.198.24) (Quit: Konversation terminated!)
[00:34:28] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[00:34:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:36:11] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[00:39:04] *** Joins: bobb_ (~bobb_@dslb-092-074-247-064.092.074.pools.vodafone-ip.de)
[00:41:05] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[00:42:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ccb1:cdc:f709:ea36)
[00:42:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ccb1:cdc:f709:ea36) (Changing host)
[00:42:12] *** Joins: skapata (~Skapata@user/skapata)
[00:46:27] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[00:46:46] *** Joins: cursey (~cursey@user/cursey)
[00:47:55] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4c95:39cf:567e:8e81) (Ping timeout: 265 seconds)
[00:48:03] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:8920:faf5:f7d:be9e)
[00:49:04] *** Tobbi__ is now known as Tobbi
[00:49:53] <KombuchaKip> Is there any way to determine at runtime how large a lambda is in terms of memory required, including all of its captures?
[00:51:09] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:52:37] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:53:17] <kalven> you have sizeof at compile time
[00:53:57] <Alipha> { int x = 3, y = 5; auto foo = [x, y]() { return x + y; }; cout << sizeof foo; }
[00:53:57] <geordi> 8
[00:53:57] <rpav> sizeof will show you as much as sizeof any struct will
[00:54:08] *** Quits: jellyknight (~gelignite@55d403aa.access.ecotel.net) (Quit: Stay safe!)
[00:54:46] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:55:13] <rpav> { std::vector<double> v = { 1.0, 2.0, 3.0, 4.0 }; auto f = [v]() { return v.size(); }; cout << sizeof(f); }
[00:55:14] <geordi> 56
[00:55:36] <kalven> thicc vector
[00:55:48] <rpav> yeesh
[00:56:02] <rpav> { std::vector<double> v; auto f = [v]() { return v.size(); }; cout << sizeof(f); }
[00:56:03] <geordi> 56
[00:56:05] <rpav> (to be clear)
[00:56:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:57:31] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[00:58:02] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[00:58:13] <rpav> (though i'm not clear if you have to actually reference `v` there for it to be captured, if it's captured explicitly)
[00:58:39] <Alipha> { std::vector<double> v; auto f = [v]() {}; cout << sizeof(f); }
[00:58:39] <geordi> 56
[00:58:48] <Alipha> { std::vector<double> v; auto f = [&v]() {}; cout << sizeof(f); }
[00:58:49] <geordi> 8
[00:59:05] <Alipha> { std::vector<double> v; auto f = [=]() {}; cout << sizeof(f); }
[00:59:06] <geordi> 1
[00:59:24] <rpav> sure given gcc or whatnot, but
[00:59:58] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[00:59:59] <rpav> otoh i guess it amounts to "merely observable sizeof difference" either way
[01:01:00] <rpav> "if you capture a variable in a lambda, but no one's around to reference it, does it actually take space?" .. clearly in the cases I see!
[01:03:32] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[01:04:28] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:10:24] *** Joins: KhazAkar (~KhazAkar@217.96.207.76.ipv4.supernova.orange.pl)
[01:10:56] <Alipha> i would assume a compiler would be allowed to optimize [v](){} and [&v](){} to take up 1 byte (the former allowed via the "as if" rule, if it can determine that the copy construction and destructor have no outward effect))
[01:13:45] *** Quits: KhazAkar (~KhazAkar@217.96.207.76.ipv4.supernova.orange.pl) (Quit: KhazAkar)
[01:14:31] *** Joins: KhazAkar (~KhazAkar@217.96.207.76.ipv4.supernova.orange.pl)
[01:14:56] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[01:16:05] *** Joins: letto (~letto@188.26.158.104)
[01:18:39] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[01:18:44] <KombuchaKip> Hmm the problem is sizeof() doesn't account for any memory allocated on the heap, like whatever the vector actually allocated.
[01:18:57] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[01:19:40] <kalven> okay, but this issue has nothing to do with lambdas per se
[01:21:18] <KombuchaKip> kalven: Agreed. But my memory leak likely does unfortunately. It's sometimes hard to at what looks like a trivial lambda, only to find out later that it actually had allocated several GB on the heap.
[01:21:45] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 265 seconds)
[01:21:47] <cbreak> KombuchaKip: you're not using smart pointers?
[01:21:58] <cbreak> or if you are, you're not careful to avoid ownership cycles?
[01:22:06] <kalven> hmm, I feel that gigabytes are of the order that you should know how you spend them?
[01:22:33] <cbreak> especially with lambdas, I'd recommend being very careful with your value captures if you capture owning smart pointers
[01:22:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[01:23:44] *** Joins: stefanos82 (~stefanos8@62-56-66.netrun.cytanet.com.cy)
[01:23:48] <KombuchaKip> cbreak: The STL containers might well be.
[01:23:48] <KombuchaKip> kalven: You should, except that if something funny happens with a client request arriving at the server.
[01:24:26] <kalven> what do you want to happen in this case?
[01:24:30] <cbreak> stl containers?
[01:25:56] <cbreak> KombuchaKip: avoiding ownership cycles should be your primary focus when using owning pointers
[01:27:01] <KombuchaKip> kalven: Well I'd like to find out why the memory that was allocated for the client's request isn't being automatically cleaned up. Valgrind thus far hasn't been helpful, and likely because this is a space leak and not a traditional memory leak.
[01:27:39] <KombuchaKip> cbreak: Yes, the client's data arrives in the form of a large std::vector<std::byte>. Maybe the STL is using a smart pointer internally or not, I don't know and shouldn't need to care.
[01:27:52] <cbreak> no
[01:28:25] <cbreak> vectors just store their own copy of everything inside.
[01:28:34] * KombuchaKip nods
[01:28:39] <cbreak> no cycles unless you put in something circularly owning yourself
[01:28:43] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:29:28] <SuperNintendoSUX> :>
[01:29:28] <Alipha> KombuchaKip: do you use std::shared_ptr?
[01:30:05] *** Quits: stefanos82 (~stefanos8@62-56-66.netrun.cytanet.com.cy) (Quit: Leaving)
[01:31:16] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:32:00] <KombuchaKip> Alipha: I do in some places, but it's not clear that they are the problem. I just wish there was some kind of tool that I could take a snapshot of the entire process space and it shows me a pie chart with the 99% slice pointing to one statement somewhere where something was allocated and never cleaned up.
[01:32:45] <PJBoy> linux or windows?
[01:32:54] <kalven> tcmalloc can do heap profiling
[01:33:38] <KombuchaKip> kalven: Tried it already, and thank you for having suggested it recently. It was helpful for tracking down some other memory issues, but thus far I haven't been able to get any use out of it for this one.
[01:33:55] <kalven> ah I see.. I didn't recall who asked for it :)
[01:35:12] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[01:35:17] <KombuchaKip> PJBoy: Not sure if that was directed at me, but I'm using GNU/Linux.
[01:35:25] <PJBoy> it was, thanks
[01:37:07] <kalven> or as I have recently taken to calling it, GNU plus Linux
[01:37:21] * KombuchaKip nods
[01:38:23] <Raziel> so where is this mythical linux minus GNU whose existance is implied?
[01:38:50] *** Quits: bobb_ (~bobb_@dslb-092-074-247-064.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[01:38:51] <Raziel> can we get some BSD/Linux up in here?
[01:38:53] <kalven> oh that's just the kernel
[01:39:01] *** Quits: troller (~p@2a02:6b8:b081:8815::1:29) (Ping timeout: 240 seconds)
[01:39:03] *** Quits: KhazAkar (~KhazAkar@217.96.207.76.ipv4.supernova.orange.pl) (Quit: KhazAkar)
[01:39:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:24] *** ChanServ sets mode: +v npaperbot
[01:39:48] <KombuchaKip> Raziel: https://www.gnu.org/gnu/gnu-users-never-heard-of-gnu.en.html
[01:40:13] <Raziel> >never heard of gnu >there's four instances of "gnu" in that link
[01:40:58] <PJBoy> what would the equivalent for BSD be
[01:42:00] <PJBoy> I was unable to read Stallman's prose there
[01:42:07] <PJBoy> but I think I get the gist of what gnu is
[01:42:28] <Raziel> PJBoy, a random collection of weird bits of code they found across both the internets and old hard-drives, thrown together hastily, that manages to somehow run better than the alternative anyway
[01:42:36] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[01:42:56] <Raziel> also no one's sure how that code was licensed in the first place so now it's "do whatever the fuck you want"
[01:42:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[01:43:31] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:44:12] <PJBoy> I guess BSD would just be BSD+BSD
[01:46:33] <rpav> bah godbolt cmake is such a pita
[01:49:51] *** Joins: andreasbuhr (~quassel@p549db5b0.dip0.t-ipconnect.de)
[01:49:51] *** Quits: andreasbuhr (~quassel@p549db5b0.dip0.t-ipconnect.de) (Client Quit)
[01:50:06] <rpav> PJBoy: i'm not sure if this is entirely correct, https://godbolt.org/z/KMz6jq78r
[01:50:09] <RandomReader> Raziel - the distinction is just that most full distributions use a GNU userland
[01:50:24] <rpav> PJBoy: tldr `std::cout << "foo" * "+++[>,+.<-]"_bf;`
[01:50:24] <RandomReader> embedded Linux uses often don't fall into that category
[01:50:56] <Raziel> RandomReader, I do understand the point, but it's still a nice meme :p
[01:51:09] <RandomReader> BSD doesn't make the distinction
[01:51:34] <PJBoy> so there's no embedded BSD that doesn't have userland?
[01:51:58] <PJBoy> rpav, is that some kind of esoteric language parser?
[01:52:05] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Read error: Connection reset by peer)
[01:52:07] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Write error: Connection reset by peer)
[01:52:07] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Write error: Connection reset by peer)
[01:52:08] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Write error: Connection reset by peer)
[01:52:08] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Write error: Connection reset by peer)
[01:52:08] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Read error: Connection reset by peer)
[01:52:11] <rpav> PJBoy: yeah brainfuck parser that applies as a user literal
[01:52:13] <RandomReader> I mean it's still just BSD, they don't care politically like GNU does
[01:52:17] <PJBoy> possibly called kirby-lang
[01:52:25] <RandomReader> IIRC there used to be a dual-kernel distribution, Gentoo maybe?
[01:52:26] <PJBoy> oh that's brainfuck?!
[01:52:31] <RandomReader> could be either Linux or BSD kernels
[01:52:40] <RandomReader> FreeBSD specifically I think
[01:52:41] <rpav> PJBoy: at least as i gathered from wikipedia's page on it
[01:52:49] <rpav> it seemed like a simple one to implement
[01:52:57] <PJBoy> good stuff
[01:52:59] <Raziel> there are BSD distributions that do use a lot of gnu as well, I wonder if the gnu people like to call those GNU/BSD?
[01:53:23] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[01:53:28] <RandomReader> as far as I'm aware the BSD distributions (at least the major ones) don't fall into that category, because the core parts of the userland are still BSD
[01:53:29] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[01:53:41] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:53:44] <RandomReader> the GNU tools tend to be isolated for license reasons, even if they're a significant part
[01:53:51] <Raziel> I guess that's true
[01:53:52] <PJBoy> I think I was on the money with BSD + BSD then
[01:53:53] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[01:53:53] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:54:07] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[01:54:21] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[01:54:22] <RandomReader> it's been a while since I checked on them though
[01:54:35] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[01:54:40] *** Joins: troller (~p@2a02:6b8:b081:1205::1:1a)
[01:54:47] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:54:51] <Raziel> but it does sound like it's getting into pretty arguable logic. like what counts as "core", and why does the gnu being isolated mean we can say it's not gnu even if they are important or significant by some descriptions
[01:55:03] <RandomReader> the GNU/Linux thing is pretty much a political distinction, a way of promoting GNU's ideals, as opposed to anything clearly technical
[01:55:20] <RandomReader> the BSDs do not promote GNU's ideals
[01:55:30] <Raziel> politics, the best part of open source software
[01:55:43] <PJBoy> you could have Microsoft/Linux presumably
[01:55:46] <PJBoy> that kinda thing
[01:56:12] <RandomReader> it's also quite true that GNU had most of the tooling in place that Linux came along and used to get a reasonable OS out of
[01:56:17] <PJBoy> Android = Google/Linux perhaps
[01:56:27] <RandomReader> the BSDs haven't had that requirement, they are capable of standing without GNU tools, the ones that are there are just for convenience
[01:56:30] <kalven> RandomReader: just a stop gap until hurd is ready
[01:56:40] <RandomReader> (or again, were last I checked, who knows if some of them have changed that policy)
[01:56:57] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[01:57:04] <RandomReader> standing as an OS, to be clear
[01:57:08] <RandomReader> ignoring embedded customization stuff
[01:57:47] <RandomReader> lol aye, Hurd
[01:58:23] <PJBoy> latest release was 3 months ago
[01:58:29] <RandomReader> actually that pointer research thing that came up earlier reminded me a little of microkernels
[01:58:34] <PJBoy> that's active sounding
[01:59:17] <kalven> PJBoy: it's been puttering along for 30 years
[01:59:21] <RandomReader> I think it was in here? maybe not: https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/
[01:59:29] <kalven> 1.0 when? who knows
[01:59:55] <PJBoy> wikipedia tells me "After years of stagnation, development picked up again in 2015 and 2016, with four releases during these two years"
[02:00:02] <RandomReader> their focus is on essentially having bounds checking associated with pointers in a software-transparent way, but some of the design approach reminds me of microkernel ideals
[02:00:18] <RandomReader> since a lot of our software design is influenced pretty heavily by what popular models hardware wants to support
[02:00:26] <johnny> well it's only recently that the bsds hace been able to get away from gcc though
[02:00:35] <RandomReader> it's a self-reinforcing loop
[02:00:43] <johnny> they were definitely relyin on that for quite some time
[02:01:22] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[02:01:36] <RandomReader> yeah gcc effectively took over the compilation space for a huge section of OS work, for many years
[02:01:40] <PJBoy> hm, starting to wonder if this 2021 release is real or not
[02:02:08] <RandomReader> can't fault it for being the tool for the job, but it did make some separation a bit complicated
[02:02:12] <johnny> RandomReader, did you know that there's a linux distro that defaults to clang rahter than gcc?
[02:02:22] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[02:02:25] <johnny> it still of course falls back to gcc when necessary though
[02:02:30] <RandomReader> I knew there were efforts in that area, didn't know any had made the switch
[02:02:30] <Raziel> now just wait for the linux distro that defaults to msvc
[02:02:51] <johnny> one of the mandrake derivatives defaults to clang. i think it's openmandriva
[02:03:03] <RandomReader> one of clang's goals was to build the Linux kernel, which is pretty gcc specific
[02:03:43] <PJBoy> I assume it's still nowhere near
[02:03:59] <johnny> hmm? i think there have been successful kernel builds with clang already
[02:04:13] <cbreak> ubuntu defaults to which ever you install
[02:04:14] <RandomReader> yeah it was close when I last heard about it several years ago
[02:04:38] <johnny> cbreak, i'm takling about what they use internally to build their own packages
[02:05:01] <johnny> src.rpm -> rpm in this case
[02:05:36] <PJBoy> ah indeed, clang can build linux
[02:05:46] <PJBoy> maybe that's why clang development came to a grinding halt
[02:05:55] <johnny> hah.. because they achieved the goal :)
[02:06:06] <PJBoy> because their regression testing requires building the kernel :D
[02:07:29] <RandomReader> tonitch - I'm late to the party, but Beej's guide may help with some of the I/O flow: http://beej.us/guide/bgnet/
[02:10:00] <RandomReader> in particular, you need to be using the return value of recv() .. the pattern for using a std::string would be like:  auto command = std::string(1024); auto count = recv(new_fd, command.data(), command.size(), 0);  /* check count for error states, <= 0 */ command.resize(count);
[02:10:13] <RandomReader> and then "command" is a correctly-sized std::string of what you actually got
[02:11:27] <RandomReader> (in practice on real networks you'll need buffering and end-of-command markers, because you may not receive all the data at once)
[02:12:49] <PJBoy> Raziel, I forgot I made this paste https://wandbox.org/permlink/Yt1oC171GK4NrV5s
[02:13:01] <PJBoy> if you were curious about some stupid metaprogramming
[02:14:04] <PJBoy> I remember having to jump through some hoops to make that SFINAE friendly
[02:14:29] <Raziel> ohboy
[02:15:13] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[02:16:50] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[02:17:12] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[02:17:13] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Quit: Client limit exceeded: 20000)
[02:17:35] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Client limit exceeded: 20000)
[02:17:53] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Client limit exceeded: 20000)
[02:18:05] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Client limit exceeded: 20000)
[02:18:19] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Quit: Client limit exceeded: 20000)
[02:18:38] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Client limit exceeded: 20000)
[02:18:55] *** Joins: seninha (~seninha@user/seninha)
[02:19:02] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[02:27:23] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[02:27:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 240 seconds)
[02:38:13] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[02:39:16] *** Joins: KombuchaKip (~kip@192.252.230.5)
[02:40:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:40:47] *** Joins: Inline (~Inline@aftr-37-201-241-234.unity-media.net)
[02:45:41] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[02:45:54] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[02:46:12] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[02:46:40] <cart_man> Do you always have to have all the functions involved in a threads as Static?
[02:47:03] <ville> no
[02:47:23] <ville> also what does "involed mean"?
[02:49:21] <Raziel> the vast majority of my functions/systems are free nowadays, so, same thing ish. but doing that just for threads seems a bit silly. making something thread-safe is very specific.
[02:49:22] <ville> if you are thinking of using a non-static member function as the function the new thread of execution runs then it needs an object to call it with
[02:49:40] <Raziel> I assume that's why you ask, since you expect a static function to be inherently more thread safe. it's not, really.
[02:49:57] <ville> as per usual non-static member functions require an object to be called with
[02:51:21] <johnny> hmm.. did somebody ever make a threadsafe way to handle locales on unix systems
[02:51:42] <cart_man> ville: I want to pass my member function to a thread spawned by the same Object.
[02:52:12] <ville> cart_man: then give it something it can call the member function with
[02:52:33] <cart_man> ville:  -> reader_thread = new std::thread(this, std::move(MemIPC::IPC::read_routine));
[02:52:43] <cart_man> ignore the move
[02:52:47] <ville> !give cart_man testcase
[02:52:48] <nolyc> cart_man: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[02:54:31] <Alipha> cart_man: assuming `this` is a MemIPC::IPC*, you have the arguments backwards. also, don't use new. reader_thread = std::thread(&MemIPC::IPC::read_routine, this);
[02:54:36] <Alipha> and yes, the & is necessary
[02:54:43] <ville> http://www.eelis.net/c++draft/thread.thread.constr#5 says it calls invoke(), http://www.eelis.net/c++draft/func.invoke#2 says it calls INVOKE and then http://www.eelis.net/c++draft/func.require#1
[02:56:41] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Quit: Leaving)
[02:57:46] <cart_man> Alipha: But the thread is a member of the class to if I don't have it as a pointer I need init it with the class init and that's not possible. Therefore I have a std::thread * my_ptr;   my_ptr = new std::thread()  etc
[02:57:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:58:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:59:04] <kalven> negative
[02:59:06] <ville> cart_man: the thread type is default constructible...
[02:59:14] <Alipha> { std::thread t; }
[02:59:15] <geordi>  
[02:59:24] <ville> cart_man: http://www.eelis.net/c++draft/thread.thread.constr#lib:thread,constructor
[03:00:36] <ville> cart_man: and it has move assignment: http://www.eelis.net/c++draft/thread.thread.assign
[03:02:11] <cart_man> ville: Meaning I can construct it and later populate it with a function to run?
[03:02:39] <cart_man> So I can instantitae it as the class instantiates  clas xx() : thread{std::thread()} ?
[03:02:56] <cart_man> Alipha: Is this what you meant ^^ ?
[03:03:14] <Alipha> cart_man: yes. or simply:  clas xx() : thread{}
[03:03:40] <cart_man> Alipha:  Hmmm ... interesting.. then I use std::move() to populate later?
[03:04:08] <Alipha> cart_man: yep.
[03:05:18] <Raziel> speaking of threads, is there any good general-use global-ish threadpool lib?
[03:06:13] <cbreak> I think there's something in intel's tbb
[03:06:26] <NyB> Raziel: doesn't Boost have a thread_pool implementation? Or do you want something different?
[03:06:35] <Raziel> I do have tbb for one project, but I've only really used the containers. I'll have a look
[03:06:47] <Raziel> NyB, no idea, I'm not very up to date on boost :p
[03:06:50] <Raziel> I'll check that too
[03:07:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:07:17] <cart_man> Alipha: Ok one more thing. After I have instantiated using class x() : thread{}  ... how do I syntatically std::move()  the new thread into the instantiated one?
[03:08:03] <Alipha> cart_man: if you create a temporary object, you don't even need to use std::move. e.g., reader_thread = std::thread(&MemIPC::IPC::read_routine, this);
[03:08:50] <Alipha> std::thread tmp(&MemIPC::IPC::read_routine, this); reader_thread = std::move(tmp);  // you generally only need to use std::move with variables, more or less.
[03:10:59] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 265 seconds)
[03:11:02] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:15:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a076:5dc9:a674:c827) (Quit: Quit)
[03:16:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:20:20] <cart_man> Alipha: So why would I be getting ->  error: use of deleted function   ? I dont have any const values in that class
[03:22:41] <Alipha> !give cart_man testcase
[03:22:42] <nolyc> cart_man: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[03:25:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8920:faf5:f7d:be9e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:25:42] <KombuchaKip> Assigning a std::function a nullptr should clear whatever memory may have been required by the previous lambda, including any of its captures, correct?
[03:27:34] <kalven> sure
[03:28:14] * KombuchaKip can't help but wonder wtf is going on then.
[03:38:05] *** Joins: ferdna (~ferdna@user/ferdna)
[03:38:27] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[03:44:28] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:48:44] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:53:15] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:54:01] <cart_man> Alipha: When I try and make a testcase I get a different error...
[03:56:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:06:07] <cart_man> I just had to construct my class using MyClass x{stuff}; instead of MyClass x = MyClass{}: I have no idea why.
[04:06:30] *** Joins: tesuji (~quassel@2a02:908:180:9500:c920:d3a7:8e12:f696)
[04:08:31] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:49] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[04:24:52] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[04:25:05] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:34:04] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[04:34:21] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[04:36:16] *** Quits: Tokamak (~Tokamak@172.58.191.89) (Read error: Connection reset by peer)
[04:37:46] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:39:03] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:41:51] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[04:43:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[04:44:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:48:19] <KombuchaKip> What is the signature of the constructor for value that is invoked in this? Assume thing and value are same type.Does the compiler automatically implement a default move constructor for value? auto lambda = [value = std::move(thing)] { ... };
[04:50:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[04:51:34] *** Joins: skapata (~Skapata@user/skapata)
[04:54:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:55:04] <kalven> it'll try, but there are things that will prevent the default move constructor
[04:56:50] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[04:59:01] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000F11692CFE14EEDDA.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[05:01:52] *** Joins: seninha (~seninha@user/seninha)
[05:02:09] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[05:03:02] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1cce:ad41:7c5b:4355)
[05:03:23] *** Quits: malloy (~jimery@116.30.222.36) (Quit: WeeChat 3.0)
[05:03:40] *** Joins: malloy (~jimery@116.30.222.36)
[05:14:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:15:34] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:15:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[05:16:44] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:17:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:19:28] * KombuchaKip nods
[05:20:02] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:20:32] <RandomReader> how is the excess memory usage showing up?
[05:21:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:31:54] <KombuchaKip> RandomReader: Each time there is a client request, top(1) reports total memory usage for the process increases a little. That would be fine, up until processing is complete and all objects (allegedly) associated have gone out of scope and cleaned themselves up. The client request is assigned to a work queue with a pool of consumer threads.
[05:32:31] *** Joins: frost (~frost@user/frost)
[05:34:33] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[05:37:28] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[05:37:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:39:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:25] *** ChanServ sets mode: +v npaperbot
[05:40:49] <RandomReader> you may want to look for some tools that break down the process memory map
[05:43:07] <RandomReader> memory accounting is surprisingly complex, and depending on what you're looking at top may be including things you weren't considering
[05:43:27] <RandomReader> but even for just arbitrary dynamic allocations, at a basic level the kernel hands out entire pages, with mmap being the most common API for it
[05:43:55] <RandomReader> and then most C-family programs will use malloc, which maintains its own heap using something like mmap behind the scenes to make its requests
[05:44:21] <RandomReader> C++ containers will use the standard allocator, which eventually will use malloc, which is the entire chain you're looking at now
[05:44:34] <RandomReader> but that leaves everything *else* that's capable of using the other APIs directly
[05:45:02] <RandomReader> so what you're seeing may have nothing to do with the code you're digging through
[05:47:23] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[06:02:13] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[06:08:30] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Quit: Hello72)
[06:18:14] <KombuchaKip> RandomReader: You might well be write. My work queue code is pretty simple enough, but let me show you it in case you see something amiss: https://pastebin.com/vpneAbTZ
[06:18:18] <KombuchaKip> *right
[06:19:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 240 seconds)
[06:22:05] <KombuchaKip> RandomReader: Some of the captures in the lambdas passed to Add() could be large in the tens of megabytes.
[06:23:16] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 245 seconds)
[06:27:04] <RandomReader> that looks pretty straightforward
[06:27:40] <RandomReader> only two things I'd note is that inside ConsumerThread(), WorkFunction seems like it has a larger scope than necessary, should be able to move it into the blocks and avoid ever having to nullptr it
[06:28:04] <RandomReader> and maybe consider std::move(m_WorkQueue.front()) because right now that's a copy
[06:28:33] <RandomReader> but nothing stands out as holding on to data longer than you'd expect
[06:30:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:32:50] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[06:32:52] <KombuchaKip> RandomReader: For the std::move(m_WorkQueue.front()) I actually originally had that but removed it because I thought front() removed a reference. But if the move still casts it to an rvalue and allows the left hand side to steal the pointer, then I should put it back. And as for the WorkFunction variable having a larger scope than necessary, I'm a little confused. All the operations on the m_WorkQueue need to be mutex protected.
[06:32:55] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1cce:ad41:7c5b:4355) (Ping timeout: 252 seconds)
[06:33:34] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:34:12] <RandomReader> I mean the variable itself, if you create it inside the first while block, and then a second one inside the lower do block, they'll be destroyed automatically with no need to =nullptr
[06:34:54] <KombuchaKip> RandomReader: Yes indeed. I actually tried that too initially, but it didn't make any difference at all to memory usage. But I like your suggestion anyways because it reads cleaner. I will put it back.
[06:35:18] <RandomReader> and yeah I don't expect either of these to affect memory usage
[06:35:48] <RandomReader> I mean the copy instead of move on the queue would temporarily, but not for any meaningful period of time
[06:36:22] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:36:44] <KombuchaKip> RandomReader: Still helpful though. Thank you. Move semantics are especially helpful when even copying a temporary instead of stealing its contents can make memory usage potentially spile.
[06:37:24] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:39:20] <RandomReader> if by some fluke you *do* notice a significant difference from this, what I'd look at next would be the captures you have in practice, maybe one of those types has broken copy behavior
[06:40:44] <KombuchaKip> RandomReader: It's possible. I don't think I implemented a move constructor, so the default compiler generated one could be inadequate.
[06:43:05] <Alipha> Ko
[06:43:21] <Alipha> KombuchaKip: are you using "new" anywhere? (or malloc)
[06:43:49] <KombuchaKip> Alipha: Not directly, no. But various STL containers with default allocators surely are.
[06:43:54] *** Joins: smeso (~smeso@user/smeso)
[06:46:02] <artok> just using modern c++ allocations for memory and you feel good
[06:50:29] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[06:50:57] <Alipha> KombuchaKip: any compiler-generated copy/move ctor/op= aren't going to leak memory unless you're using raw new yourself
[06:51:47] <Alipha> KombuchaKip:...do you use inheritance?
[06:52:32] <Alipha> If so, do all of your base classes have virtual destructors?
[06:53:32] <KombuchaKip> Alipha: Hmm, good call. I think they either have virtual ~Foo() = default defined, or no destructor at all explicitly declared.
[06:56:39] <Alipha> KombuchaKip: you might want to review your classes and see if any don't have a virtual dtor that should. Though there's also a gcc warning for that (I'm not sure how accurate it is)
[06:57:20] <KombuchaKip> Alipha: Probably easiest thing to do is for me to enable the warning. I'm using -Wall -Wextra already, but perhaps there's something else?
[06:58:49] <Alipha> KombuchaKip: according to a stackoverflow post in reading, -Wnon-virtual-dtor is enabled by -Wall
[06:59:01] * KombuchaKip nods
[07:00:12] <Alipha> I also assume you're not doing anything weird like memcpying objects or using placement new
[07:02:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:03:31] <KombuchaKip> Alipha: Correct.
[07:04:31] <Alipha> I think pretty much your problem would have to be long-lived containers being larger than you expect or shared_ptr circular dependencies. Note also that std::vector and std::string don't reduce their capacity if you erase or clear them.
[07:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[07:09:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[07:10:54] <KombuchaKip> Alipha: Indeed. I thought about container capacity not being reduced to meet a source container's size on assignment, but then that wouldn't explain why memory always keeps growing after every client request.
[07:16:04] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[07:18:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:27:19] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:25b2:70d2:878b:e528)
[07:29:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[07:32:14] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:25b2:70d2:878b:e528) (Ping timeout: 260 seconds)
[07:45:21] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000F11692CFE14EEDDA.catv.pool.telekom.hu)
[07:49:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:53:35] <KombuchaKip> RandomReader: Memory seems to be proportional to the number of consumer threads (set in constructor).
[07:56:22] <KombuchaKip> RandomReader: It's like all of a consumer thread's memory from whatever it grabbed off of the m_WorkQueue isn't cleaned up until the thread exits.
[08:04:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[08:04:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:09:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:10:10] *** Quits: nshire (~nshire@user/nshire) (Quit: Leaving)
[08:18:33] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:21:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[08:21:24] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[08:21:49] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:25:09] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:25:37] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[08:26:50] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000F11692CFE14EEDDA.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[08:27:37] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:28:44] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[08:30:18] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:30:46] *** Joins: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu)
[08:31:09] *** Quits: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[08:32:27] *** Joins: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu)
[08:32:54] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[08:33:13] *** Quits: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[08:33:32] *** Joins: CoderCharmander (~CoderChar@254C6471.nat.pool.telekom.hu)
[08:33:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:34:52] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:38:02] *** Quits: CoderCharmander (~CoderChar@254C6471.nat.pool.telekom.hu) (Ping timeout: 260 seconds)
[08:38:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:38:47] *** Joins: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu)
[08:41:11] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[08:43:01] *** Joins: malloy (~jimery@116.30.222.36)
[08:43:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[08:54:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:57:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[09:01:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[09:07:30] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:10:35] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[09:22:42] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:25:10] *** Quits: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu) (Ping timeout: 260 seconds)
[09:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[09:31:09] <johnny> and that's when i just spawn workers and reap them later :)
[09:31:38] <johnny> i've been told that processes aren't cheap enough to just rely on on windows though
[09:31:55] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[09:35:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[09:35:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:39:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:26] *** ChanServ sets mode: +v npaperbot
[09:45:00] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:45:22] *** Joins: skapata (~Skapata@user/skapata)
[09:47:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[09:47:22] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[09:50:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:51:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[09:57:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:04:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[10:07:08] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 265 seconds)
[10:08:54] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[10:10:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:14:59] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:f116:92cf:e14e:edda)
[10:27:39] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:37:29] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 252 seconds)
[10:38:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[10:39:28] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[10:41:24] *** Joins: malloy (~jimery@116.30.222.36)
[10:44:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[10:50:24] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[10:53:31] <RandomReader> KombuchaKip - it *is* cleaned up when the WorkQueueManager is destroyed?
[10:57:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[11:01:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[11:10:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:cd4a:e45:3a35:4281)
[11:17:27] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 252 seconds)
[11:24:35] *** Joins: andreasbuhr (~quassel@p548ddf4b.dip0.t-ipconnect.de)
[11:25:11] *** Quits: andreasbuhr (~quassel@p548ddf4b.dip0.t-ipconnect.de) (Client Quit)
[11:30:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[11:35:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[11:36:56] <ville> https://www.lunasec.io/docs/blog/log4j-zero-day/ that's a bit funny feature. a logging library that does network requests. by default?
[11:37:14] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:f116:92cf:e14e:edda) (Ping timeout: 260 seconds)
[11:37:24] *** Joins: CoderCharmander (~CoderChar@195.199.251.79)
[11:37:34] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:38:10] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cd4a:e45:3a35:4281) (Ping timeout: 260 seconds)
[11:41:47] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[11:44:08] *** Joins: nshire (~nshire@user/nshire)
[11:45:20] <TinoDidriksen> And it was apparently something that was added in version 2.0. I wonder who needed JNDI in the logger at that time.
[11:46:09] <LangerJan> I have a vector<string> and i transform() it to a vector<int>, just to accumulate() the sum of it. Is there a one-step algorithm to do the same thing?
[11:47:02] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 260 seconds)
[11:47:26] <TinoDidriksen> Yes, you can accumulate directly with a lambda as the callback.
[11:48:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[11:48:35] <TinoDidriksen> https://en.cppreference.com/w/cpp/algorithm/accumulate has an example going the other way, from int to string. Extrapolate and make it string-to-int.
[11:49:20] <cbreak> ville: that's not even a vulnerability, that looks like it's working as intended
[11:49:52] <LangerJan> TinoDidriksen: ah, I see! Thanks :)
[11:50:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[11:52:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[11:55:02] <ville> cbreak: yes if it's intended that you get remote code execution
[11:55:45] <cbreak> I can't imagine why they would download and load a class file for any other reason
[11:55:58] <Haohmaru> is it h4x0r day?
[11:56:37] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:57:10] <ville> cbreak: a better model would have required "registering" a named external source of "things" with the logger object. and then you have to refer to that name. then the people configuring the logger object are in control of the places where network requests are made to. you can't inject one
[11:57:44] <TinoDidriksen> Or just have it off by default.
[11:58:03] <cbreak> I don't see why, first, they don't restrict the format string to be literals, and second, they want the format string to be able to load external code in the first place
[11:58:36] <ville> ...and you still can. in a sane way that is controlled by you
[11:58:57] <cbreak> even C's printf is vulnerable to attacker-controlled format strings, so it's not like this is new :/
[11:59:34] <ville> could you raise an objection to what i suggested then, rather than saying "sucking is ok because other things have sucked before"?
[11:59:46] <cbreak> I don't say it's ok
[11:59:49] <cbreak> I say it's dumb.
[12:00:05] <cbreak> and I don't see what the intended purpose of it was
[12:01:06] *** Quits: CoderCharmander (~CoderChar@195.199.251.79) (Ping timeout: 256 seconds)
[12:01:23] <ville> and at least printf does not go do remote requests out of the box
[12:02:22] <cbreak> yeah. Unless you give an attacker enough control over the format string to get RCE working :)
[12:02:39] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 265 seconds)
[12:15:04] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3903:97c7:b91d:e3ae)
[12:16:26] <Haohmaru> !fact
[12:16:28] <nolyc> Haohmaru: Assignment to objects of a class is defined by the copy/move assignment operator.
[12:19:38] *** Quits: chozorho (~chozorho@2601:146:300:c30::f5f4) (Ping timeout: 268 seconds)
[12:19:59] *** Joins: robod34 (Username@79.113.195.239)
[12:21:14] <ville> TinoDidriksen: also the "off by default" is a terrible choise if your overall system still needs you to turn it on, then you're back to where you started from. the requirement to register named sources fixes this as well
[12:21:18] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[12:21:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[12:23:03] <cbreak> ville: if you'd have to register locations (as in actual .class files, or what ever libraries are on java), that'd probably be safe-ish
[12:23:25] <cbreak> if you'd register domain names, you'd still be vulnerable to DNS Cache poisoning and other backbone-based attacks
[12:23:34] <cbreak> unless you somehow also do certificate pinning
[12:23:51] <cbreak> (or what ever the equivalent is for ldap)
[12:26:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 260 seconds)
[12:30:35] <ville> it's a real thin shim for what they have now. right now you can give a URL right in the input, instead you would give a $name instead. that then gets looked up from a hash table where the URL sits and was set by you, not the attacker
[12:32:40] <cbreak> why not compile the .class into the binary directly?
[12:33:01] *** Joins: bobb_ (~bobb_@dslb-092-074-253-076.092.074.pools.vodafone-ip.de)
[12:33:07] *** Joins: immibis (~hexchat@62.156.144.218)
[12:33:59] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[12:34:23] *** Joins: JohnMS_WORK (~kvirc@89-64-71-70.dynamic.chello.pl)
[12:37:54] <ville> who knows java people be crazy. if that's a feature these folks need then that's a way to implement it in a sane manner
[12:38:09] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:38:46] <manuels> If I define a static vat in a function, is it static per instance or static per class?
[12:39:45] <ent58> the storage is the same in both cases: static, program lifetime, but a static variable in a class is scoped to that class
[12:40:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[12:40:36] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[12:41:49] <ent58> So 'class a { static int b; }' would mean that 'b' is zero initialized at the beginning of the program, and any code that refers to a::b refers to that single variable, no matter how many objects you declare from that class
[12:42:54] <TinoDidriksen> "static per instance" wouldn't be static - that'd just be a class member variable.
[12:43:10] <ville> ent58: that's just a declaration, there's no variable yet, so there's nothing to zero initialize yet
[12:45:01] <ent58> right so yeah, I left out actually doing an 'a c;' in appropriate scope, thanks
[12:45:51] <ent58> was thinking of static methods
[12:49:15] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[12:50:39] <Haohmaru> std::cout isn't vulnerable, right?
[12:51:45] <sonOfRa> Haohmaru: only if you enable shared object loading via LDAP!
[12:52:11] <Haohmaru> enough with the java
[12:53:11] <ent58> is it being used on arbitrary strings?
[12:54:08] <Haohmaru> { string s = "arbitrary"; }
[12:54:09] <geordi>  
[12:54:48] <ent58> Lol! well not in that case
[13:02:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:05:09] <ville> Haohmaru: an implementation of it could contain bugs of course
[13:05:27] <Haohmaru> sure..
[13:05:40] <ville> so what was your question then?
[13:05:57] <Haohmaru> non-critical
[13:07:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 240 seconds)
[13:08:35] *** Joins: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu)
[13:10:52] *** Quits: CoderCharmander (~CoderChar@2A001110022327DF00000050054A6401.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[13:14:26] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:15:07] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:21] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[13:19:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:19:26] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:23:54] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:24:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[13:27:41] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[13:27:59] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:29:28] <lionkor> Here's a fun question: is there any case where you would want to invoke `operator new` outside of a constructor? Assuming you are in a codebase that usually follows common best practices.
[13:30:06] <ent58> placement new into aligned storage
[13:30:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Client Quit)
[13:30:33] <ent58> at least, that's what I've done before
[13:34:16] *** Quits: troller (~p@2a02:6b8:b081:1205::1:1a) (Ping timeout: 268 seconds)
[13:34:54] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:37:08] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[13:39:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:27] *** ChanServ sets mode: +v npaperbot
[13:39:38] *** Joins: malloy (~jimery@116.30.222.36)
[13:39:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[13:42:55] *** Joins: immibis (~hexchat@62.156.144.218)
[13:43:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:51:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:55:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 260 seconds)
[13:55:57] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[14:01:56] *** Joins: pulse (~pulse@user/pulse)
[14:04:13] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[14:07:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:08:27] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[14:08:48] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:08:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:10:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:13:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[14:14:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:14:52] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[14:16:55] *** Joins: CoderCharmander (~CoderChar@195.199.248.88)
[14:18:52] *** Quits: CoderCharmander (~CoderChar@195.199.248.88) (Read error: Connection reset by peer)
[14:20:00] *** Joins: CoderCharmander (~CoderChar@195.199.248.88)
[14:25:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:25:49] *** Quits: CoderCharmander (~CoderChar@195.199.248.88) (Read error: Connection reset by peer)
[14:27:31] *** Joins: CoderCharmander (~CoderChar@195.199.248.88)
[14:29:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[14:29:49] *** Joins: troller (~p@2a02:6b8:0:40c:901f:ff8:79b1:49ae)
[14:30:55] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:33:02] <manuels> so a static var in a function is basically a hidden class (not instance) member variable with late binding?
[14:34:00] <manuels> no this makes no sense. its late bound but it is only visible in the scope of the function
[14:36:41] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:38:40] *** Joins: frost (~frost@user/frost)
[14:38:52] <ville> manuels: it just extends what a static does in non-member functions
[14:39:11] <ville> well not so much extends as in being exactly the same thing
[14:40:57] <manuels> thats what I though. it is basically a regular static variable with a scope
[14:40:59] <manuels> right?
[14:41:01] <manuels> https://godbolt.org/
[14:41:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:41:21] <PJBoy> almost
[14:41:26] <manuels> Foo::bar()::i
[14:41:58] <ville> if you wish us to see what you're doing, you need to give us an url specific to your paste, not the the website's main page
[14:42:12] *** Joins: seninha (~seninha@user/seninha)
[14:42:34] <manuels> sorry :D https://godbolt.org/z/oY74477je
[14:42:43] <manuels> PJBoy why almost?
[14:43:05] <PJBoy> you almost pasted the URL
[14:43:14] <PJBoy> you had the domain name and TLD
[14:43:53] <manuels>  it is basically a regular static variable with a scope < almost
[14:43:57] <manuels> is what I thought
[14:44:06] <PJBoy> static function local variables get stored allocated on program startup and get initialised first time execution hits that line
[14:44:21] <PJBoy> by regular static variable I assume you mean a namespace scope
[14:44:31] <PJBoy> in which case that's similar, but gets initialised on startup too
[14:44:39] <manuels> global scope
[14:44:55] <PJBoy> if you never call Foo::bar, then that `i` never gets initialised ever
[14:45:24] <manuels> i see
[14:46:17] <manuels> so at leas global, namespace, class static vars are the same (initializes on startup) und function statics on function execution. besides that, they are all the same right?
[14:46:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[14:46:44] <PJBoy> the same insofar as they have static storage duration
[14:47:00] <manuels> they are global in the sense that the dont belong to an instance (not visibility)
[14:47:16] <PJBoy> yeah
[14:47:24] <manuels> okay thank you
[14:47:35] <PJBoy> of course namespace scope variables don't need static to act this way
[14:47:45] <PJBoy> (global scope being a namespace scope)
[14:50:43] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[14:59:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[15:04:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[15:05:50] *** Quits: JohnMS_WORK (~kvirc@89-64-71-70.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:08:15] *** Quits: CoderCharmander (~CoderChar@195.199.248.88) (Read error: Connection reset by peer)
[15:09:02] *** Joins: CoderCharmander (~CoderChar@195.199.248.88)
[15:11:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[15:14:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:22:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Quit: Quit)
[15:22:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[15:28:37] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[15:29:09] *** Joins: JohnMS_WORK (~kvirc@89-64-71-70.dynamic.chello.pl)
[15:33:54] *** Quits: troller (~p@2a02:6b8:0:40c:901f:ff8:79b1:49ae) (Ping timeout: 268 seconds)
[15:33:59] *** Joins: proller (~p@2a02:6b8:0:40c:b19e:8a12:e0c8:7465)
[15:53:46] <RandomReader> manuels - from some of your phrasing, you might be focused a little too much on classes right now (are you coming from an OOP-heavy language?)
[15:54:01] <RandomReader> C++ classes are just custom types, not organizational containers
[15:54:43] <RandomReader> that's why all the answers about "static" are focused on storage duration and scope, because those are the concepts C++ uses here
[15:55:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:59:25] *** Quits: malloy (~jimery@116.30.222.36) (Quit: WeeChat 3.0)
[16:01:52] *** Joins: xkuru (~xkuru@user/xkuru)
[16:02:14] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:06:02] *** Quits: CoderCharmander (~CoderChar@195.199.248.88) (Ping timeout: 260 seconds)
[16:07:26] *** Quits: proller (~p@2a02:6b8:0:40c:b19e:8a12:e0c8:7465) (Ping timeout: 260 seconds)
[16:11:23] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[16:11:53] *** Joins: JohnMS_AWAY (~kvirc@89-64-71-70.dynamic.chello.pl)
[16:15:38] *** Joins: JohnMS_WORK|2 (~kvirc@user-5-173-138-115.play-internet.pl)
[16:15:50] *** Quits: JohnMS_WORK (~kvirc@89-64-71-70.dynamic.chello.pl) (Ping timeout: 260 seconds)
[16:18:03] *** Quits: JohnMS_AWAY (~kvirc@89-64-71-70.dynamic.chello.pl) (Ping timeout: 250 seconds)
[16:19:18] *** Joins: proller (~p@2a02:6b8:0:40c:7ac4:23bb:3b66:5790)
[16:28:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[16:30:26] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:31:57] <manuels> I only do C++/Python/Qt. Right, maybe I think a bit to much on the logical level.
[16:35:39] <manuels> Will a Vektor<T> where T ist a struct containing a pointer and a char allocate 9 byte items. I read something about padding. I wonder if I can just "expand" the char for free, since it represents a factor and therefore would be more precise
[16:36:37] *** Joins: xkuru (~xkuru@user/xkuru)
[16:37:11] *** Quits: proller (~p@2a02:6b8:0:40c:7ac4:23bb:3b66:5790) (Remote host closed the connection)
[16:39:40] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[16:40:52] *** Joins: meator (~meator@user/meator)
[16:41:36] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[16:41:40] *** Joins: proller (~p@2a02:6b8:0:40c:9ab2:20c6:7f79:eec1)
[16:53:33] <ville> is std::source_location some magic type?
[16:53:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:22] <PJBoy> yeah
[16:55:05] <ville> figures. lsp having difficulty giving anything useful for it
[16:56:37] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[17:04:23] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:05:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:07:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:09:10] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:10:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[17:16:01] <tonitch> RandomReader: I'm also late and thanks for your reply! I have already read the beej's guide but in french... I just noticed that the english version has more content so I'll read it too! Thanks a lot for your explanation tho ! apreciate that ^^
[17:19:11] *** Joins: JohnMS_WORK (~kvirc@user-5-173-138-115.play-internet.pl)
[17:19:39] *** Joins: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[17:20:05] *** Quits: JohnMS_WORK|2 (~kvirc@user-5-173-138-115.play-internet.pl) (Read error: Connection reset by peer)
[17:20:57] *** Quits: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[17:21:32] *** Joins: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl)
[17:22:27] *** Quits: JohnMS_WORK (~kvirc@user-5-173-138-115.play-internet.pl) (Read error: Connection reset by peer)
[17:23:26] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:35:18] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[17:35:47] *** Joins: limubs (~limubs@cgn-89-1-58-17.nc.de)
[17:36:33] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bc2d:ca62:1f76:4faa)
[17:37:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:37:32] *** Quits: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl) (Read error: Connection reset by peer)
[17:39:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:25] *** ChanServ sets mode: +v npaperbot
[17:39:44] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[17:43:31] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Client Quit)
[17:46:11] <lionkor> Good day! Is there an sql query string builder for sqlite that *simply* builds a query? like `query.select("*").from(...)...` etc.? I'm not happy with the way sqlpp11 is designed. I just want to have a string query builder.
[17:48:36] <TinoDidriksen> Just build it yourself at the call site. It's usually so simple that you don't need anything extra.
[17:50:11] <lionkor> I just felt like it would be better to have a well tested library to escape sql, instead of writing it myself :(
[17:50:18] <lionkor> but i guess that's what it's gonna be! thanks :)
[17:51:02] <PJBoy> don't escape, use prepared statements
[17:51:03] <PJBoy> etc,
[17:52:13] <rpav> ??! ^^^^this^^^
[17:52:27] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[17:55:17] <cbreak> why escape?
[17:55:23] <lionkor> I might be confused here, but isn't there inherently an issue with getting, say, a `name` from the user, then just being like `"INSERT INTO mytable VALUES('" + name + "')"`? You can do sql injection there. I don't see how turning that into a prepared statement is going to help...?
[17:55:30] <cbreak> if you trust external content, then you've already lost.
[17:56:05] <cbreak> lionkor: because prepared statements don't try to interpret data as sql code
[17:56:26] <lionkor> Oh, okay, that sounds nice
[17:56:39] <cart_man> If you use UALARM with a callback... how does that run synchornously with your single thread application..or doesit? -> https://man7.org/linux/man-pages/man3/ualarm.3.html
[17:57:22] <lionkor> okay, yeah, I was confused. Sorry to be a bother, prepared statements is what i want! Thanks!
[17:57:29] <cbreak> lionkor: the key is that you separate user data from the query itself
[18:08:43] <rpav> lionkor: that's the _entire point_ of prepared, stmt("INSERT INTO mytable VALUES (?)").insert(name);
[18:09:22] <rpav> well, not the _entire_ point, the other entire point is reusing and not recompiling/resending statements every time, but ;)
[18:09:55] <pulse> Escape is right. When I see SQL, I turn around and escape.
[18:09:55] *** Quits: bobb_ (~bobb_@dslb-092-074-253-076.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[18:10:05] <rpav> bah SQL is fine
[18:10:25] <pulse> For some values of `fine`
[18:10:40] <rpav> RDBMS stuff does a lot for you at scales that are hard to appreciate until you hit them
[18:10:57] <pulse> Oh, I have nothing but respect for DB admins
[18:11:01] *** flooded is now known as _flood
[18:11:10] <rpav> it's no worse than having to write text for shaders
[18:11:18] <pulse> But honestly I will take any kind of hell, callback hell, template hell, macro hell, whatever you've got, before I will accept SQL hell
[18:11:28] <rpav> o.O
[18:11:33] <pulse> A fate worse than death
[18:11:35] <rpav> i don't think you're very familiar with SQL
[18:12:01] <rpav> or you had an experience with SQL without really knowing it, or whoever's code you dealt with was written by someone clueless, or whatever, but like
[18:12:21] <rpav> there is no "SQL hell" except from extremely newbish devs
[18:12:46] <PJBoy> SQL's not my favourite thing to write
[18:12:54] <PJBoy> but it's better than say latex
[18:12:55] <rpav> like really you should not be dealing directly with SQL for the most part _anyway_, you should have a decent batch API you submit data to that does all the SQL handwaving in the background
[18:13:09] <pulse> Perhaps I should have said database hell, but they are equivalent in my mind
[18:13:37] <rpav> unless you're dealing with mysql, or nosql, there really isn't
[18:13:55] <PJBoy> I've done quite a lot of database and SQL stuff, and never really had a bad experience
[18:14:10] <rpav> well maybe if you're dealing iwth oracle, and you don't have a dba on staff 🤔
[18:14:44] <PJBoy> oh it did take a few days of my time figuring out this psql backup/import system
[18:14:52] <PJBoy> but that's whatever
[18:15:01] <rpav> PJBoy: the only bad experiences i've had were of my own making due to lacking clue, and even then they were mostly minor abrasions vs some of the truly terrible stuff ;)
[18:15:28] <pulse> I stand by my claim, I'll take any sort of bad software situation before I take a truly fucked up database. Especially when said database is the only thing keeping some company afloat
[18:15:39] <PJBoy> I do have to admit, if it's been a while since I've done SQL, it takes me a while to get back into the mental model
[18:15:41] * pulse gallops away on a small horse
[18:16:00] <PJBoy> gotta make backups
[18:16:06] <rpav> yeah sounds newbish
[18:19:54] <rpav> "oops we didn't test and blew up some data" => roll back; "oops the entire server died" => fail-over; "oops both data centers are under water and we're rebuilding" => backups; .. it takes a lot of fuckupery by everyone to lose data with a reasonably well-run db
[18:20:34] <pulse> Never assume competence when you assume any job is my advice :P
[18:21:18] <rpav> if you didn't find compentence when you interviewed, you shouldn't have taken the job
[18:21:50] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 260 seconds)
[18:23:57] <Alipha> manuels: your message didn't make much sense. Testcase? <manuels> Will a Vektor<T> where T ist a struct containing a pointer and a char allocate 9 byte items. I read something about padding. I wonder if I can just "expand" the char for free, since it represents a factor and therefore would be more precise
[18:25:06] *** Joins: gehn (~gehn@user/gehn)
[18:31:06] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[18:35:49] *** Joins: szutt (~szutt@116.37.2.145)
[18:37:12] <cart_man> Is it possible to call signal(SIGALRM,read_routine) in a constructor? I am trying to make it call "read_routine" from the same class but I can't seem to pass a member function of the same class to it -> argument of type "void (MemIPC::IPC::*)(int signum)" is incompatible with parameter of type "__sighandler_t"
[18:37:28] *** Joins: bobb_ (~bobb_@dslb-092-074-253-076.092.074.pools.vodafone-ip.de)
[18:38:58] <Alipha> cart_man: non-static member function pointers are not compatible with normal function pointers. You'd have to make read_routine static
[18:39:15] <cart_man> Alipha: Ahh I see
[18:50:03] <SuperNintendoSUX> :)
[18:50:54] <SuperNintendoSUX> C callbacks usually fight C++ objects. if they don't have a void * context, you're screwed
[18:54:00] <rpav> C callbacks usually need a void* for the same reason C++ does
[18:54:09] *** Joins: supernova (~quassel@2405:9800:ba11:6207:4206:86d1:e39b:31be)
[18:54:32] <rpav> a few sortof assume you're only going to want one and there's going to be some global response, but it's still fairly poor design even for C
[18:54:40] <supernova> hey folks!
[18:55:14] <supernova> Can you please explain these statement
[18:55:24] <supernova> https://wandbox.org/permlink/WUu9U9gH922w0XAx
[18:55:26] <supernova> this*
[18:56:11] <supernova> when in the decribed process happens the variable actual change?
[18:56:52] <SuperNintendoSUX> wut
[18:56:56] <rpav> i don't see any statements, just some kind of non-C++ text
[18:57:19] <ashafq> rpav: I think it's English :)
[18:57:28] <rpav> ashafq: who has time for that! ;)
[18:57:43] <supernova> https://wandbox.org/permlink/66obg7MC2ZSuqgxF
[18:58:06] <rpav> more poorly-formatted homework ;/
[18:58:26] <ashafq> supernova: You really need to clang-format your code.
[18:58:33] <supernova> ssec
[18:58:35] <rpav> or use an editor with simple indent
[18:59:14] <ashafq> supernova: yes, then you don't have to "// end main" anymore
[18:59:37] <supernova> its very hot here, i forgot to ident and clear comments
[18:59:58] <ashafq> supernova: Tell me what is the difference between pointer and value?
[19:00:29] <supernova> Pointer is adress contained in physical memory that contains address of value
[19:00:47] <supernova> value is adress of the variable in memory
[19:01:12] <ashafq> value isn't an address
[19:01:24] <ashafq> it could be
[19:01:52] <ashafq> See back in the day when PDP-1 came out.... :)
[19:01:53] <rpav> trick question; a pointer _is_ a value
[19:02:30] <ashafq> ^
[19:03:06] <supernova> still not get it :)
[19:03:08] <rpav> i feel like the key to understanding pointers is probably understanding that, and that there isn't anything magical
[19:03:36] <ashafq> Pointers are values that _POINT_ to something else.
[19:04:03] <rpav> supernova: say i have a giant library full of books, but each book is a number. each of them are sequential, right? 0 - first book, 1 - second book, etc
[19:04:12] <supernova> yes
[19:04:21] <ashafq> rpav: My background is in hardware, so I would love to talk about the different addressing modes. But I feel like that will make things more confusing :)
[19:04:25] <rpav> each book _contains_ a number, book 0 contains 986455, book 1 contains 89765456 etc
[19:04:46] <rpav> now i _hand you_ a book, and tell you taht the number _in_ that book is the _index_ of another book
[19:05:11] <rpav> you look in the book and the number is 1; so you go and pull book 1, what number do you find?
[19:05:39] <supernova> 89765456
[19:05:46] <rpav> ashafq: yeah non-flat addressing gets complicated and stuff but it's still all basically numbers
[19:05:58] <rpav> supernova: exactly, and that's how pointers work
[19:06:06] <supernova> yes
[19:06:16] <supernova> what is mechanics
[19:06:32] <rpav> in C++ the thing you get may not exactly be a number (even though it's still a number), but that's how it works
[19:06:41] <rpav> supernova: that is the mechanic
[19:07:39] <supernova> i mean how do you pass value to function by reference
[19:08:12] <rpav> supernova: a pointer is the book, a value like any other; if i told you saying "star thisbook" meant "take thisbook, and go find the value in book it refers to", that would be exactly like saying *ptr
[19:08:13] <cart_man> rpav: You mean it's poor program design?
[19:08:16] <cart_man> On my part?
[19:08:45] <rpav> cart_man: i'm not sure really what your case is
[19:09:12] <cart_man> rpav: Using the sigterm / ualarm functions and having to make some member fuctions static etc..
[19:09:23] <rpav> oh signal handlers .. that can be tricky because they're somewhat fragile already .. you could make/keep like a global list of handlers to call, but
[19:11:12] <Alipha> { int x = 3; cout << x; }
[19:11:13] <geordi> 3
[19:11:22] <Alipha> { int x = 3; cout << &x; }
[19:11:22] <geordi> 0x7ffe941c6a14
[19:11:46] <rpav> { int *p = (int*)3; cout << p; }
[19:11:47] <geordi> 0x3
[19:11:53] <PJBoy> https://xkcd.com/138/
[19:12:30] <PJBoy> oh rpav, I saw a proposal you might like
[19:12:31] <rpav> nice, there's an old one
[19:12:36] <Alipha> supernova: x has an address of 0x7ffe941c6a14. So if you pass &x to a function, you're passing the value 0x7ffe941c6a14 to the function.
[19:12:49] <PJBoy> [P2142]
[19:12:50] <npaperbot> P2142R1: [EWGI] Allow '.' operator to work on pointers <https://wg21.link/p2142r1> (by Jim Buckeyne) (2020-05-17) (Related: https://wg21.link/p2142r1/github)
[19:13:36] <rpav> PJBoy: numerous decades too late really
[19:13:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:13:42] <PJBoy> :D
[19:13:59] <Alipha> supernova: void foo(int *p) { *p = 5; } // so then *p is looking up what int lives at address 0x7ffe941c6a14 and then we assign 5 to the int at that address
[19:14:24] <Alipha> Assuming you call foo(&x);
[19:16:26] *** MaddHatt1r is now known as MaddHatter
[19:18:23] <supernova> Alipha: point meant to reduce hardware expenses?
[19:18:27] <supernova> pointer?
[19:19:48] <supernova> P2142 downloaded
[19:20:01] *** Joins: meator (~meator@user/meator)
[19:20:01] <rpav> i suppose also critical to this is understanding that `void foo(int p) { .. } ... int x; foo(x);` makes a copy of `x` and passes it to `foo`
[19:20:24] <Alipha> supernova: in my foo example and in your wandbox example, the point is being able to allow a function to modify a variable
[19:20:55] <rpav> and it always makes a copy; if you say `void foo(int* p) ..` it's still making a copy, and the value it's copying is a pointer
[19:21:29] <rpav> (optimizations aside, the observable behavior is mostly indistinguishable)
[19:21:53] <supernova> yes, so when we use & operator it means we explicitly will edit variable with pointer assigned to its address, right?
[19:22:10] <rpav> probably don't think of it that way
[19:22:42] <rpav> &foo means "get a value, and that value is the address of foo"
[19:22:49] <supernova> yes
[19:22:50] <rpav> operator overloading aside :P
[19:23:06] <supernova> ok. clear
[19:23:12] <supernova> going for P2142
[19:23:53] <rpav> hrm how many unary operators are there? 🤔
[19:25:03] <supernova> I will skip it for a while, i dont know how to use struct
[19:25:20] <supernova> looks familiar with constructor
[19:31:47] <rpav> ok so 6 unary operators, making it probably possible to specify an esoteric language via prefix operators, `&*!+-&~p;`
[19:32:10] <rpav> i would now actually be fairly surprised if this hasn't already been done
[19:32:41] <rpav> some might call it C++ 🤔
[19:32:42] * rpav runs
[19:35:22] <rpav> (analog literals is obviously vaguely along these lines but not an esolang, but you could probably make a cooler 2D one with that)
[19:37:28] <Alipha> supernova: https://wandbox.org/permlink/KHQpwdXX5NrPKztT
[19:41:31] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:43:05] *** Quits: limubs (~limubs@cgn-89-1-58-17.nc.de) (Ping timeout: 252 seconds)
[19:45:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:46:15] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:52:45] <cart_man> What is the trick with static functions/members not being referenced correctly on compile again?
[19:54:11] <Alipha> cart_man: are you getting an error? what error?
[19:55:58] <cart_man> Alipha: https://pastebin.com/i5FKt3PE
[19:56:14] <cart_man> Only after making them static
[19:58:13] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[19:59:21] <Alipha> cart_man: yeah, so, `static int com_status_fd;` is only a declaration. you need to define com_status_fd. inside your .cpp file, `int IPC::com_status_fd;`
[20:01:22] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:03:18] <ville> (or inline)
[20:03:20] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:07:05] <supernova> Alipha: Yeah! I see thanks. We can return to caller without using return 'variable' when we use pointer? Right
[20:08:00] *** Joins: meator (~meator@user/meator)
[20:08:45] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[20:09:47] <Alipha> supernova: yes... though pointers have a broader, more-interesting usage than just that... but i'm not sure if you're ready for those conversations, heh
[20:16:06] <cart_man> Alipha: You mean everwhere they are used needs the entire "Reference" char *str_tmp = MemIPC::IPC::pipe_fd->pointer;
[20:16:54] <Alipha> cart_man: no
[20:17:28] <cart_man> Alipha: Because they where declared and define before I made them static. And compiled fine also
[20:18:46] <Alipha> cart_man: what is the difference between a declaration and a definition?
[20:19:29] <OnlineCop> Declare: The structure of this function has THIS return type, and takes THESE parameters.
[20:19:51] <Alipha> OnlineCop: i'm specifically talking about variables
[20:19:53] <cart_man> Declare is just telling its there. Define is the Guts of what it does generally comes in C++
[20:19:53] <OnlineCop> Define: When the function gets called, this is the logic that will use the parameters and return this value.
[20:20:12] <cart_man> I mean Cpp file
[20:20:14] <cart_man> no header`
[20:20:20] <cart_man> accept obv in header only libs etc
[20:20:21] <OnlineCop> Variables are the same: I declare that a variable is a specific type (int, float, vector<map<int, string>>)
[20:20:24] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:20:47] <OnlineCop> Then I define what the value actually contains.
[20:21:01] <Alipha> cart_man: that's a fine explanation of declaration vs definition when regarding functions. but what's the difference between a variable declaration and a variable definition?
[20:21:53] <OnlineCop> You can declare a static variable in a header file. You can also declare an 'extern' variable in a header file.
[20:21:58] <cart_man> Alipha: Declaring a variable just allocates memory for it. Where definition is actually assigning something to it. If we are talking primitives?
[20:22:06] <Alipha> cart_man: nope, wrong
[20:22:19] <cart_man> :*(
[20:22:38] <Alipha> cart_man: a declaration just says "this variable exists somewhere". a definition allocates memory for it (and initializes it with a value)
[20:23:10] <OnlineCop> That will allow you to declare a 'static const int' in a header, and all of the files that #include that header will know that the variable will be static, const, and take up sizeof(int) storage space.
[20:23:31] <OnlineCop> Then in a single .cpp file, you define it and assign its value.
[20:23:59] <cart_man> Alipha: ah ok ok. I was a little wrong
[20:24:07] <OnlineCop> All the other files that included that header won't need to know WHAT the value is at compile time. Just as long as _one_ of the .cpp files does.
[20:26:02] <Alipha> cart_man: https://wandbox.org/permlink/uLpuScZiNx5Y3T6t
[20:31:09] <LordKalma> I know you missed me
[20:32:09] <Alipha> who are you again? ;-)
[20:35:30] <LordKalma> I'm the person with the best (takls about c++ + knows about c++ ecosystem)/(actually does c++) ratio
[20:36:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:37:23] <OnlineCop> int c{0}; int a = c++ + c++;
[20:39:40] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:46:02] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:47:42] <cart_man> Alipha: Thanks allot for the good example! However... why can you not declare it in the constructor itself? Like say MemIPC::IPC::IPC(){ int com_status_fd; }  ? That doesn't seem to work although I am a bit curious as to why it is not the same and defining it inside a namespace into the class from outside the class?
[20:50:11] <Alipha> cart_man: you just defined a local variable that exists inside the constructor only.  ... With static variables, there's only one static variable per class--all objects of that class share the same static variable. A constructor is run per object, so it doesn't make sense to initialize a static variable in a constructor because static variables are not associated with any specific object
[20:50:21] <SuperNintendoSUX> !give cart_man books
[20:50:22] <nolyc> cart_man: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[20:50:56] <cart_man> Alipha: Omg yes that seems obvious now that you mention it
[20:51:09] <SuperNintendoSUX> C++ is not a hobby. it needs to be taken seriously if you really want to make something to work
[20:51:19] <cart_man> SuperNintendoSUX: No doubt yea
[20:51:51] <InPhase> SuperNintendoSUX: That depends on how seriously you take your hobbies.  But I agree it takes a serious time investment to do well in.
[20:52:38] <cart_man> Its quite unfortunate that finding a job in C++ is pretty defficult. Everybody wants 5 years of experience min or Senior devs.
[20:52:47] <cart_man> sigh RIP my spelling
[20:53:11] <rpav> Alipha: but you might make a static variable in a ctor! .. though probably a bad idea
[20:54:27] <InPhase> cart_man: What I found really hard actually was hiring people who can actually program in C++.
[20:54:35] *** Quits: Inline (~Inline@aftr-37-201-241-234.unity-media.net) (Ping timeout: 252 seconds)
[20:54:46] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:54:52] <InPhase> cart_man: You have to sort through a lot of people who did a few homework exercises in it.
[20:54:57] <rpav> i don't think finding a job writing C++ is hard if you can write C++
[20:55:03] <rpav> yeah
[20:55:27] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:55:43] <rpav> though finding one very close to $RANDOM_LOCATION _might_ be tough
[20:55:45] *** Joins: meator (~meator@user/meator)
[20:56:14] <InPhase> The delta between homework assignments and writing C++ is just much larger than with some languages.  That probably gets reflected in some of the postings you see where they just try to slap on a larger experience value to deal with the problem.
[20:56:36] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:56:58] <cart_man> InPhase: Sure but I found that trying to prep for general cpp jobs leaves you in the middle of understanding basics to understanding C++17+ really well. They ask you tricky questions about both ... it is hard to cover all the basis. Hopefully you get some interviewer that doesn't ask you C stuff also
[20:57:01] <rpav> yeah C++ is not like a lot of the "easy" languages where you can pretty much have a reference guide open and get going in 15 minutes
[20:57:38] <cart_man> Although the companies code base is stuck in pre C++11
[20:57:40] <cart_man> etc
[20:57:55] <rpav> i dunno, if you have to prep much beyond looking up some ass-old stuff you've likely not seen in a decade+, you probably need to just write more code
[20:58:26] <great_taste> the job is going to suck anyways. you'll be stuck trying to fix impossible bugs.
[20:58:33] <rpav> you can't really gain experience by studying trivia, and experience is the killer
[21:00:01] <cart_man> rpav: I have been through multiple interviews ... I find it very hard to try and gain experience post your daily 5-9 job and cover all the basis you "Might" get asked
[21:00:18] <InPhase> cart_man: Here's the secret.  If you're an applicant that lists substantive C++ projects on the resume, explicitly labeling them as C++ projects, and you link to the source code, and that source code looks decent, you're ahead of almost every other entry level applicant.
[21:00:48] <rpav> the questions usually cover things you _ought_ to know just by having written sufficient C++, and/or can figure out by knowing CS in general
[21:00:51] <InPhase> cart_man: So the very thing that one should be doing to learn C++ is the thing that makes your resume an extreme stand-out.
[21:01:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:01:42] <cart_man> Ah yea that makes sense. Although I sometimes look at code I have written and can notfor the life of me recall what I am doing there. Same with interviews in general. You get a question that you understood in the past and its like ...uhhh
[21:01:50] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[21:02:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:02:14] <InPhase> cart_man: Like if I see a near entry level position and the candidate links to code with classes, smart pointer usage, and so on, this is very likely to be a short list candidate.
[21:02:29] <Alipha> cart_man: if you can't recall what you were doing in your code just by looking it, then it's probably bad code ;-)
[21:02:30] <InPhase> s/position/position application/
[21:02:36] <rpav> yeah what InPhase said
[21:02:44] <rpav> Alipha: not necessarily ;/
[21:02:53] <cart_man> Alipha: haha well I am not reading it quickly I can just see that I am using stuff that I can't recall how to even do it
[21:03:35] <cart_man> Like... threads ... gawd knows how many times I have had to re learn it... Use it like once a year on my spare time
[21:03:45] <cart_man> Its easier of course the second time.
[21:03:50] <rpav> dunno, i haven't really touched threads in forever
[21:03:50] <cart_man> Just the actual usage of it
[21:03:52] <cart_man> not the concept
[21:04:05] <cart_man> rpav: Really?
[21:04:24] <InPhase> cart_man: I've been programming for 36 years, and I also get questions about things I knew in the past that I can't recall on the spot.  That's normal human brain function, but a good sign of experience is when people respond to that confidently explaining what they knew or did in the past regarding that, explaining the edges of what they remember, and explaining how they would refresh on it.
[21:04:25] <rpav> i vaguely recall the things, but i would definitely not start with a threading API even if i was doing parallel stuff
[21:04:34] <cart_man> See thats the other thing... C++ feels way more general. So it can be C++ OOP or C++ Funcitonal or C++ Hybrid stuff etc
[21:04:53] <rpav> i mean, sure .. you have threads and mutexes and condition variables and atomics and all that bullshit but
[21:04:53] <InPhase> cart_man: In fact you should expect forgetting things in the past to only increase with time.  :)\
[21:04:57] <cart_man> InPhase: Yea that is how I got my last job haha
[21:05:05] <rpav> you should at least know vaguely what those things do and how they work but
[21:05:13] <InPhase> If only for the fact that there is a lot more past to forget.
[21:05:32] <rpav> don't worry, they're constantly inventing new things to forget too
[21:05:43] <cart_man> hahahaha Yaaay
[21:16:21] *** Quits: bobb_ (~bobb_@dslb-092-074-253-076.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:20:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[21:27:38] <vdamewood> InPhase: I don't even remember what I had for breakfast yesterday.
[21:33:18] *** Quits: causative (~halberd@user/causative) (Quit: may the truth move you)
[21:33:23] <supernova> whois Online Cop? I like the definations from him
[21:33:41] <supernova> Is these definations for Declare and *Defination from some book?
[21:34:29] *** Joins: causative (~halberd@user/causative)
[21:34:55] *** Quits: proller (~p@2a02:6b8:0:40c:9ab2:20c6:7f79:eec1) (Ping timeout: 252 seconds)
[21:35:17] <SuperNintendoSUX> if you properly learned theory, it's impossible to forget it
[21:36:51] <InPhase> SuperNintendoSUX: Definitely not true.
[21:37:47] <supernova>  SuperNintendoSUX:this was reply to me?
[21:39:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:26] *** ChanServ sets mode: +v npaperbot
[21:41:41] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[21:41:57] <malinus> "so you would like to work here? Well go up to the whiteboard and show me an example where you would use std::launder"
[21:48:06] <SuperNintendoSUX> ew
[21:48:23] <SuperNintendoSUX> InPhase: unless you have brain issues, ofc
[21:48:23] <Alipha> https://github.com/alipha/cpp/blob/f97fae71a5fcb13b02926b6edc2ae4665fc548e0/poly_obj/poly_obj.h#L127 :-)
[21:48:58] <SuperNintendoSUX> Alipha: whyy?
[21:54:17] <Alipha> SuperNintendoSUX: i'm doing "Case 2" of the example: https://en.cppreference.com/w/cpp/utility/launder ... i have a char array pointed to by `data` which i'm storing a Derived object, and i want to return a pointer to that Derived object
[21:55:29] <supernova> InPhase, could you please  share any decent entry level applicant CV? Would be very greatful
[22:01:08] <PJBoy> malinus, would it be cheating to show its usage as a cppreference example for the std::launder page?
[22:02:49] <PJBoy> tbh if you just add enough leading double underscores in your variable names, they'll probably assume you know what you're talking about
[22:06:40] <Alipha> PJBoy: eh, I'd be like wtf, those are reserved identifiers. Denied.
[22:06:53] * great_taste proceeds to launder the whiteboard with soap and a sponge
[22:06:55] <cart_man> Alipha: So... If any one of my objects instantiates a Static member ... all the object for their duration will point to the same static address right?
[22:07:05] <PJBoy> but the only time launder would sanely be used is in stdlib code
[22:07:56] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:09:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[22:09:42] <Alipha> cart_man: an object can't "instantiate a static member"... static members are instantiated before main, at the same time all global variables are instantiated. Static member variables are really just global variables that are namespaced inside the class name and obey the class's access modifiers
[22:10:12] <cart_man> Alipha: Ok that makes WAY more sense!
[22:11:42] <Alipha> cart_man: if you want to initialize a static member variable with a specific value, do that at the variable's DEFINITION (lines 22 and 23 of my paste). eg, `int IPC::com_status_fd = 3;`
[22:12:28] <cart_man> Alipha: Got that) . Btw would it be possible to make a static pointer to an object of a class? Or is that just a dump idea?
[22:13:23] <cart_man> Instantiate the class in Main and assign it
[22:13:28] <cart_man> or thje obj rather
[22:14:10] <Alipha> cart_man: people do that in the traditional singleton pattern, eg, https://www.tutorialspoint.com/Explain-Cplusplus-Singleton-design-pattern
[22:14:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:15:26] <Alipha> (Scott Meyer's singleton pattern is better)
[22:18:03] *** Joins: meator (~meator@user/meator)
[22:24:29] <KombuchaKip> RandomReader: Yes, but more precisely when its destructor signals to consumer threads to exit and joins all of them. So the memory is being consumed within the consumer threads somehow.
[22:26:17] <cart_man> Alipha:  -> http://laristra.github.io/flecsi/src/developer-guide/patterns/meyers_singleton.html  Singleton struct?
[22:27:16] <malinus> PJBoy: yes, that's cheating, I'm afraid.
[22:28:35] <malinus> Honestly I'm going more for something like "tell me which features in C++20 you are most excited about"
[22:28:52] *** Joins: paul424 (~tom@ip-5-172-232-252.multi.internet.cyfrowypolsat.pl)
[22:29:32] <kalven> [[no_unique_address]] obviously
[22:29:46] <PJBoy> that thing that doesn't work in MSVC >_<;
[22:30:28] <PJBoy> I think it just might be the worst attribute
[22:30:32] <malinus> kalven: you are hired, I don't even know what that does
[22:30:43] <Alipha> cart_man: yes, that. also note that "class" vs "struct" is irrelevant--they're the same thing.
[22:30:46] <Alipha> !give cart_man struct
[22:30:47] <nolyc> cart_man: The only difference between classes and structs is that the former default to private members and bases, while the latter default to public members and bases.
[22:30:48] <PJBoy> it shouldn't be ignorable
[22:30:54] <kalven> malinus: mainly used to trip up msvc
[22:31:21] <malinus> hehe. I actually thought msvc stepped up their game with keeping up newest implementations
[22:31:32] <malinus> I think they were the only ones with proper module support and such?
[22:31:44] <malinus> I don't really use msvc, just what I've heard
[22:31:51] <Alipha> cart_man: scott meyer's singleton is simpler--just a static local variable that you return. there's no pointers, there's no `if(!instance)`, and scott meyer's singleton gets free thread safety
[22:32:10] <Alipha> ("free", as in, you don't have to write thread safety yourself)
[22:33:05] <cart_man> Alipha: That is the one you are refering to right? I do like the idea of a struct more also. I am just making sure its not some other varient you are refering to
[22:33:12] <cart_man> Ill use Scott meyers then
[22:33:30] <PJBoy> MSVC has modules, yeah
[22:33:38] <PJBoy> and it has no_unique_address by another name
[22:33:39] <Alipha> cart_man: yes, that's scott meyer's singleton you linked
[22:34:46] <cart_man> Alipha: I am about to do something crazy. Ill be surprised if this works
[22:35:24] <Alipha> remember to record it so you can post it on tik tok
[22:36:28] <Alipha> .. that would be a pretty boring tik tok: "Crazy things i've done in c++"
[22:36:31] <PJBoy> but apparently allowing the [[no_unique_address]] optimisation breaks their ABI
[22:37:13] <kalven> ABI, the hot button topic of C++
[22:37:34] <PJBoy> and always will be
[22:37:54] <cart_man> Alipha: hahah you say that until you see me rack millions of views
[22:38:18] <Alipha> ABI, the filibuster topic of the c++ committee
[22:38:34] <PJBoy> one day we'll get 'strict' mode for C++, where everything you do will be considered non ABI forward compatible
[22:38:53] <cart_man> Ill just have overwlheming amounts of enthusiam... that is basically what 98% of a tik tok video consist of anyway
[22:39:03] <PJBoy> and maintain a old stdlib and new stdlib at the same time
[22:39:23] <mort> so one thing I'm realizing I'm a bit confused by is: why exactly is std::forward necessary
[22:39:37] <mort> if I have a Foo &&x, then do whatever(x), what happens to x
[22:39:43] <Alipha> void f(int &&x) { /* x is an lvalue */ }
[22:39:45] <mort> evidently it's not an rvalue reference anymore when passed to whatever
[22:40:05] <mort> so rvalue references kind of decay into lvalues once they're used?
[22:40:15] <mort> or well, in the expressions where they're used
[22:40:36] <Alipha> mort: yes. the "rvalue-ness" of the reference only affects what x can be initialized with. after initialization, x is an lvalue.
[22:40:48] <mort> I see
[22:41:04] <mort> I figured it was something like that, but I wasn't quite sure if it became an lvalue or an lvalue reference or something else strange was happening
[22:41:40] <PJBoy> it's still silly that you have to provide the template argument to std::forward
[22:42:03] *** Joins: seninha (~seninha@user/seninha)
[22:42:15] <PJBoy> I know why, but it's still silly
[22:42:30] <mort> you can use decltype(x) as the type, right?
[22:42:34] <PJBoy> yeah
[22:42:42] <Alipha> well, similarily, after initialization, you can't tell if a variable is a reference variable or an object itself. that is, after initialization, `int b = 3; int &c = 4;` it's impossible to tell if b or c were originally declared as a reference
[22:42:44] <mort> #define FORWARD(x) std::forward<decltype(x)>(x)
[22:42:49] <Alipha> !FWD
[22:42:50] <nolyc> FWD is #define FWD(x) std::forward<decltype(x)>(x)
[22:43:01] <Alipha> :-) (compliments of me)
[22:43:39] <Alipha> ... i've yet to actually use that macro
[22:44:46] <PJBoy> I've used it once
[22:45:21] <PJBoy> for that function operator example
[22:50:00] <supernova> guys, what is the deiffrence between array and built in array? I googled and found main difference is that array could be copied and treat like value
[22:50:49] <PJBoy> !array
[22:50:50] <nolyc> In C++, `array' can mean either: (1) static sized array like T x[3]; (2) a dynamically allocated area of memory like T* x = new T[3]; (3) std::array type from the standard library. As such you need to disambiguate which you meant.
[22:51:12] <PJBoy> hm
[22:51:32] <PJBoy> !native arrays
[22:51:33] <nolyc> Native arrays are very inflexible: they cannot be copied, returned from functions, resized, stored in containers, treated as containers by generic code, allocated without decay using new, or have zero size. Hence, std::array and/or std::vector are to be preferred in virtually all cases.
[22:51:34] <InPhase> supernova: I can't share any applicant CVs as they're all considered confidential.  But I'm willing to review a CV and give a few pointers (usually in American evening hours).  You can pm me or ping me over in ##programming about this if it's at a later time point, as this is on-topic there.
[22:51:34] <rpav> supernova: std::array is a class and you should generally use it; T[N] is a low-level construct on which it's implemented
[22:51:57] <rpav> i'm not sure there's much good reason to not use std::array, but i admittedly don't usually
[22:52:33] <rpav> though i'm mostly assuming it's T[N] and doesn't do something silly like dynamically allocate
[22:52:39] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 252 seconds)
[22:53:54] <PJBoy> builtin arrays can be CTAD'd in aggregates, but std::array can't https://www.godbolt.org/z/sYhjfarvW
[22:54:06] <PJBoy> quite possibly the only case where builtin arrays win
[22:54:27] *** Joins: proller (~p@2a02:6b8:b081:8826::1:17)
[22:54:34] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:54:56] <supernova> Clinical Trials on Alzheimer's Disease ? :D
[22:55:13] <PJBoy> !ctad
[22:55:14] <nolyc> ctad is Class Template Argument Deduction, e.g. `vector v{1, 4, 9};` == `vector<int> v{1, 4, 9};`, introduced in C++17 see https://en.cppreference.com/w/cpp/language/class_template_argument_deduction
[22:55:40] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[22:56:06] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:56:20] <supernova> InPhase: Thank you. I will message you in the evening @ PST time
[22:57:51] <supernova> PJBoy: this cold be cool feature.!
[23:01:22] <robod34> https://paste.gg/p/anonymous/e47e91b116e64dd78681f1078a9b177a
[23:01:40] <robod34> why is it saying uint* cannot be converted to uint?
[23:02:55] <robod34> on line 5 and the following ones
[23:04:43] <robod34> @ PJBoy
[23:05:04] <kalven> you need to dereference the pointers
[23:05:13] <kalven> *ResizedW = givenW;  etc
[23:06:05] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[23:10:46] <robod34> thank you kalven
[23:19:41] <LordKalma> !fact
[23:19:42] <nolyc> LordKalma: Any assignment operator, even the copy and move assignment operators, can be virtual.
[23:21:43] <PJBoy> { B&& b = D(); b = D(); } struct B { virtual void operator=(const B&) { BARK; } }; struct D : B { void operator=(const B&) override { BARK; } };
[23:21:43] <geordi> D::operator=(const B&)
[23:21:47] <PJBoy> good stuff
[23:23:53] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:35:16] <ville> ...but can't have more than 1 parameter
[23:35:52] <ville> LordKalma: was it you who was planning to write a committee paper? someone here was i recall
[23:36:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:38:24] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[23:39:00] <cart_man> Alipha: How would you instantiate Scott Meyers singleton though? With the deleted constructors and all... Like I get you call instance() but I get errors about the deleted ctor.
[23:42:10] <Alipha> cart_man: you're supposed to just always call instance whenever you want to use it. e.g., `singleton_t::instance().foo();` And the point of the singleton is that it's instantiated on first use--you have no need to manually instantiate it
[23:42:41] <cart_man> Alipha: Ahh shit I was trying to instantiate it ... my bad. Thats a great way to do it though
[23:42:43] <cart_man> Thanks
[23:43:02] <Alipha> if you don't like typing `singleton_t::instance()` all the time, you could put it in a reference: `singleton_t &inst = singleton_t::instance(); inst.foo();`
[23:43:57] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3)
[23:44:02] <cart_man> Alipha: Nah the typing is ok. Makes it a bit clearer to whats going on I thihnk
[23:44:29] <LordKalma> ville, definitely not me. Not unironically haha :p
[23:51:37] <Alipha> ville: so you feel that every operator and special function (e.g., destructor and copy/move constuctors) should be able to have extra default parameters in order to facilitate use of std::source_location?
[23:52:18] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:5c94:a166:37ee:2bab)
[23:55:22] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:59:26] <PJBoy> sounds good to me
