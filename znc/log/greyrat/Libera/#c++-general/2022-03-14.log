[00:00:39] <johnny> man.. jlink is weird software  neither -h or --help works .
[00:00:44] <johnny> hmm.. maybe it's -help ..
[00:01:11] <PJBoy> the new style is better for browsing media heavy subs
[00:01:24] <PJBoy> with images and videos and whatnot
[00:01:46] <johnny> "stack corruption"  thanks ..
[00:01:50] <PJBoy> and on mobile it's cancer because that fuels activity on /r/softwaregore
[00:02:37] <RandomReader> ah, I suppose I don't come across the media-heavy ones very much, since I typically land from tech search results
[00:03:27] <johnny> i don't browse media heavy ones myself ether, but i know tons of folks who do
[00:04:18] *** Joins: Hawker (~pi@user/hawker)
[00:05:07] <Hawker> I just learnt about vectors in C++... what do you guys think of them? Are they generally a bad practice or will I be able to post on stack overflow about them without getting bullied off the site?
[00:05:12] <johnny> RandomReader, you should consider getting yourself a toy sometime. any cortex-m0 based (or higher) dev board
[00:05:21] <johnny> vectors good
[00:05:45] <johnny> without stuff like vectors, i don't really have a reason to use C++ in the first place
[00:06:22] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:06:32] <PJBoy> vector's the most important and fundamental stdlib data structure
[00:06:50] <PJBoy> rpav would go as far as to tell you that vector is the only important one
[00:06:50] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[00:06:52] <johnny> not that those standard containers are fit for every purpose.  if you're not very specialized stuff you might want to use alternative container implementaions, but they'd still be std::vector like
[00:07:26] <johnny> err i mean if you're doing very specialized stuff, then you might wnt to use alternative container implementations, but they'd still be std::vector like
[00:07:44] <RandomReader> std::vector tends to be recommended as a default for a lot of cases .. it's useful to understand why that is, so explore away
[00:07:56] <Hawker> I really want to get better at C++ since I've had like... 2 years coding almost solely in python and I  much prefer C++'s syntax and efficiency
[00:08:00] *** Quits: paul424 (~tom@ip-5-172-236-205.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:08:06] <Hawker> so thanks
[00:08:09] <PJBoy> suffice to say vector is stackoverflow approved
[00:08:33] <johnny> eh.. there are a fair amount of people who still peddle bad ideas about writing C++ like C!
[00:09:18] <johnny> Hawker, the efficiency probably doesn't matter as much as you think it does tho.. if 'm being honest. it really depends on your domain though
[00:09:39] <RandomReader> johnny - yeah I probably will at some point, especially since I'm in an economic position to get myself some of the equipment I didn't have a chance to previously .. one project at a time though, right now that's a long overdue storage server, so more in IT/sysadmin mode than programming mode
[00:09:45] <johnny> it's certainly not feasible to write say a super intensive video game or server application in python
[00:10:04] <johnny> RandomReader, economic position? i'm talking about $10 USD
[00:10:16] <Hawker> johnny, Oh I'm 100% aware of that, but I want to get better at coding programs that run faster
[00:10:23] <RandomReader> not just the board, some of the hardware analysis toys :)
[00:10:30] <johnny> oh.. well indeed
[00:10:39] <Hawker> Also there have been times where I write a program in python that takes half an hour to run, and C++ is less than a minute
[00:10:43] <johnny> i have an early 1990s oscilloscope!
[00:10:54] <RandomReader> yeah that's basic equipment I'm missing at the moment
[00:11:07] <RandomReader> and really think I should have .. right after I find a good enough excuse
[00:11:20] <johnny> Hawker, you should consider soething like pybind11
[00:11:40] <Hawker> I don't like python! XD
[00:11:41] <johnny> you can still write python for the main logic and put the stuff that needs to be faster/use less memory in the C++ side
[00:11:45] <johnny> why not? python is good
[00:11:53] <johnny> although i prefer javascript over python
[00:12:00] <PJBoy> >:(
[00:12:18] <RandomReader> *slow chants* C++ is all... embrace the C++...
[00:12:20] <johnny> javascript lets me write code the way i wanna write it, unlike ptyhon :(
[00:12:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:12:32] <Hawker> Two weeks ago I spent 3 hours at work debugging to find out... one block of code got indented twice more than I should have
[00:12:33] <Hawker> also
[00:12:47] <johnny> Hawker, you should be using a linter and code formatter to avoid such problems, and also in C++
[00:13:01] <johnny> btw.. that same thing can happen in C++ since if statements aren't required to have braces
[00:13:06] <Hawker> I like being able to do if(val == 1){cout << ("lol");}
[00:13:27] <johnny> so you'll end up with similiar problems no matter what you do
[00:13:38] <Hawker> lol isn't that very old C++
[00:13:42] <johnny> no
[00:13:46] <Hawker> really?
[00:13:51] <PJBoy> `if val == 1: print("lol")` is almost identical
[00:14:41] <johnny> C++ is fully of backwards compatible stuff that will bite you
[00:14:44] <johnny> full of*
[00:14:55] <PJBoy> braces aren't one of them >:(
[00:15:08] <johnny> hmm?
[00:15:16] <PJBoy> optional braces are good
[00:15:19] <RandomReader> javascript and semicolons... >:(
[00:15:21] <PJBoy> and should be embraced
[00:15:23] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[00:15:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:15:43] <johnny> i have cmake-format setup to allow single line optional braces, but nowhere else
[00:15:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:16:08] <PJBoy> you mean clang-format
[00:16:12] <johnny> err yes
[00:16:28] <RandomReader> Hawker - it is true that for C++, there's a lot of reliance on static analysis / linting tools to help keep code reasonable .. so a decent editor/IDE kind of setup is very useful
[00:16:45] <Hawker> I'm fine coding in nano for now
[00:16:53] <johnny> i just wish there was the equivaent of prettier/black for C++
[00:17:02] <RandomReader> especially since the coreguidelines were meant to be automated, so a lot of the checkers will pull in those
[00:17:04] <johnny> Hawker, actually you're not. i wouldn't recommend it
[00:17:07] <RandomReader> !basics
[00:17:08] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[00:17:22] <PJBoy> I do C++ in nano occasionally
[00:17:31] <RandomReader> even if you stick to a plain text editor, making one of the linters like clang-tidy be part of your build cycle is still useful
[00:17:48] <Hawker> johnny, what is a linter?
[00:17:54] <PJBoy> static analysis
[00:18:03] <RandomReader> a linter is an automated opinion
[00:18:18] <johnny> well you want both a linter and a formatter. i used both in python programs.  pylint and black
[00:18:30] <RandomReader> meant to enforce consistent style and safer code patterns
[00:18:40] <johnny> it would make sure i would never run into that indentation problem you mentioned, becase my editor would tell me/fix it for me
[00:19:27] <RandomReader> hm, is there a clang-tidy sandbox somewhere?
[00:19:49] <RandomReader> ...oh, yeah, godbolt has it
[00:20:18] <PJBoy> you can have clang-tidy in -fix mode and have it fix your code in real time
[00:20:30] <johnny> i'm back to my cmake enabled project and i'm hating it
[00:20:44] <johnny> it'd be impossible to rewrite the build systme though
[00:20:55] <johnny> well not impsossible. it's just not my project
[00:21:18] <PJBoy> write a tool that converts the project into one that can be compiled via `g++ **/*.cpp`
[00:22:17] <PJBoy> optionally with some libraries specified
[00:22:43] <johnny> no .. i prefer cmake to that..  the build matrix is 3 x 4 at least
[00:23:22] <johnny> 4 different sets of hardwware, 3 different default configrations
[00:24:08] <PJBoy> our build matrix at work is probably in the thousands
[00:24:12] <PJBoy> ;_;
[00:24:27] <johnny> although maybe now that all my boards have some sort of onboard flash.. i can make the default options non compile time
[00:24:34] <RandomReader> Hawker - opinionated linter: https://godbolt.org/z/secM8MGsT
[00:25:26] <johnny> does readability identifier length default allow i and such?
[00:26:04] <johnny> maybe it's just not part of my config and since i only use single letter vars for loops like that i didn't notice
[00:27:47] <PJBoy> i/j/k/_ are allowed for loop variables by default
[00:28:36] <PJBoy> and e is an allowed catch variable name by default
[00:29:35] <RandomReader> Hawker - it's not just aesthetics though, it can show you more concrete things: https://godbolt.org/z/rzaGb67sr
[00:30:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:30:53] <johnny> the one rule i'm missing from my jslinter is allowing _ prefixed args to be unused
[00:33:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:48:30] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[00:50:08] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[00:57:54] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:01:03] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[01:13:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:16:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:16:43] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:19:25] *** Quits: robod34 (~Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:20:57] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:24:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:26:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:28:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:32:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:33:53] <yolo> is std::move atomic for multithread
[01:35:11] <yolo> i disabled clang-tidy as it spits out wrong error messages on c++20(even some c++17) that's annoying enough to silence it(for now, until clang++ catches up)
[01:36:27] <johnny> wrong error messages
[01:36:28] <johnny> ?
[01:36:55] <johnny> i've never had wrong error messages with clang-tidy on C++20
[01:37:19] <yolo> i gave one example here a while ago, basically for those unsupported c++20 features from clang++, but g++ supports it, and I use g++
[01:37:24] <RandomReader> I'm not sure how to answer the std::move question .. if you mean the utility, it doesn't do anything, it's up to the functions/operators/constructors for the objects involved, as usual
[01:37:38] <RandomReader> if you mean the algorithm, then definitely not, usual iterator rules
[01:38:35] <yolo> RandomReader: thanks. i was thinking std::move is really just a "pointer" switch and could be "atomic" as it involves no lengthy copying
[01:38:51] <RandomReader> oh, no, nothing is ever implicitly atomic
[01:39:29] <RandomReader> std::move is just a cast to rvalue type, so the overloads choose e.g. the move constructor instead of the copy constructor, or move assignment operator instead of copy assignment operator, so *those* are what would need to be atomic
[01:39:52] <RandomReader> but even if it were just a pointer switch, that on its own is never atomic anyway -- synchronization is never implicit, because there's always a cost
[01:40:20] <RandomReader> so it'll always be something explicit, e.g. using std::atomic or one of the atomic operations, or the type you're using saying "thread safe under XXX conditions"
[01:40:42] <yolo> got it, thanks
[01:41:58] <johnny> yolo, ok, so they aren't wrong. it's exactly as if compiling with clang wouldn't support it
[01:42:39] <johnny> it is sad to see clang in this manner though :(
[01:43:04] <johnny> clang did so well and so much for C++ that we all got dependent on it, and then.. crickets
[01:43:24] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[01:43:47] *** Quits: magla (~gelignite@55d47190.access.ecotel.net) (Quit: Stay safe!)
[01:43:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:58] *** ChanServ sets mode: +v npaperbot
[01:45:18] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[01:46:10] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[01:48:24] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Client Quit)
[01:48:52] *** Joins: badone (~badone@209.132.189.152)
[01:50:58] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[01:52:08] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[01:53:30] <yolo> https://gist.github.com/jweinst1/d1fe43349dd8eaec3bf5d9cfe89133f3#file-singleton_job_queue-cpp  playing with this gist and it crashes, could not spot the bug
[01:54:24] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 252 seconds)
[01:58:13] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[02:00:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:04:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:04:38] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[02:06:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:06:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:07:51] <johnny> you should probably be doing that on godbolt if you can
[02:08:39] *** Joins: blackout69 (~blackout6@37.183.198.248)
[02:11:15] *** Joins: proller (~p@80.240.216.69)
[02:17:23] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:18:14] *** Joins: _filename (~kilitary@82.148.25.66)
[02:21:28] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 272 seconds)
[02:21:35] *** _filename is now known as filename
[02:21:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:24:06] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[02:24:06] <RandomReader> you may not have sufficient warnings on, since gcc should be complaining about that
[02:24:47] <RandomReader> anyway, returning Job&& is incorrect for dequeue(), since you're making a reference to a local variable
[02:25:34] <RandomReader> the correct form is actually less complex / less to worry about:  return type is Job, statement is just "return gotJob;"
[02:25:34] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:25:36] *** Quits: blackout69 (~blackout6@37.183.198.248) (Quit: Leaving.)
[02:25:37] <RandomReader> no rvalue reference, no std::move
[02:28:37] <RandomReader> where you may want to use std::move is actually when pulling it out of the queue:  auto gotJob = std::move(_jobs.front());
[02:31:19] <Alipha> Hawker: don't know about stackoverflow, but here on IRC, you'll get bullied off for NOT using std::vector :-p
[02:33:10] <Alipha> yolo: missing a move: `_jobs.push(std::move(job));` Though if your Job struct is really just going to contain an int and other primitives, there's no reason to bother with moving.
[02:34:48] <Hawker> Alipha, you can get bullied off stack overflow for asking a legitimate question
[02:37:28] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:55e3:354c:cb16:8919) (Quit: Konversation terminated!)
[02:38:16] *** Joins: jsbach (~jsbach@ip5f5ab04f.dynamic.kabel-deutschland.de)
[02:39:54] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[02:40:09] *** Joins: _filename (~kilitary@188.242.105.134)
[02:42:40] *** Quits: filename (~kilitary@82.148.25.66) (Ping timeout: 250 seconds)
[02:42:44] *** _filename is now known as filename
[02:46:14] <yolo> thanks, testing
[02:46:43] <yolo> the difficult in learning c++ is that many blog/tutorials are themselves incorrect :(
[02:50:54] <RandomReader> yeah, the amount of poor-quality information is one of the biggest issues .. particularly since the best quality information is in book form, which is not the medium people tend to expect these days
[02:51:53] <yolo> it's twitter era, nobody enjoys 1400 pages of book anymore.
[02:52:19] <yolo> so, book writers should write one blog at time on medium and earn $5 each month there.
[02:52:49] <RandomReader> hm, I wonder if that would be more effective financially these days
[02:52:55] * yolo is a paid medium subscriber, yeah its contents are not all that great, still worth $50 a year though
[02:56:17] <yolo> some c++ experts have their own (paid) blogs, python has realpyton doing similarly, the common issue I had with them is, too lengthy, tech blogs should always be concise, just like code, as simple as possible but not simpler, and use code snippet can save lots of explanation too, if there are blogs like that, I'm happy to pay right away
[02:56:27] <yolo> anything saves time is valuable
[02:57:27] * yolo wish medium has a pure text version though, no those eyecandy pictures all over the place
[03:03:44] <Hawker> yolo, what books do you reccomend?
[03:07:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:10:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:11:06] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[03:12:20] *** Joins: manjaro-user (~manjaro-u@199.119.235.163)
[03:13:59] <very_sneaky> do eigen's unsupported modules ship with the main distribution?
[03:15:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:17:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[03:18:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:18:22] <yolo> Hawker: i don't know...i can hardly read books these days though i bought some
[03:22:18] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:26:28] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[03:26:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:35:12] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[03:38:34] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:43:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:47:38] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:1030:27f5:3084:25d2) (Remote host closed the connection)
[03:48:21] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:5ba:e205:a1b:4e98)
[03:48:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:49:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:53:31] <RandomReader> !basics
[03:53:33] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[03:53:52] <RandomReader> the stackoverflow link has recommended C++ books
[03:55:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:00:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:01:29] <very_sneaky> what are the practical considerations when deciding to bring in large dependencies like boost, provided it has been pre-compiled? distributable size? anything else?
[04:01:59] <very_sneaky> and, does linking against specific components in boost mitigate any of these effects?
[04:02:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:02:35] <very_sneaky> also, turns out eigen does ship the unsupported modules
[04:04:27] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:06:34] <ac_slater> ok guys this is stumping me. If I want an std::function to store a member function pointer (for class foo) would it be `std::function<R (foo::*)(ArgTs...)>`?
[04:07:48] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:5ba:e205:a1b:4e98) (Quit: Leaving...)
[04:07:59] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:11:40] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:11:54] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Ping timeout: 252 seconds)
[04:12:19] *** Joins: Soni (~quassel@autistic.space)
[04:12:42] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:14:19] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[04:15:03] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:17:09] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[04:19:21] <Hawker> yolo, yeah I get that... I only read my monthly magazine and weekly paper it's rough
[04:25:26] <RandomReader> ac_slater - no, the template arguments for std::function need to match the *usage* signature, which is applied to any Callable type you put in it
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:52] <RandomReader> for pointer-to-member, that means you use it with a first argument of pointer-to-object
[04:26:20] <RandomReader> std::function<R(foo*, ArgTs...)>
[04:26:51] <RandomReader> called as   f(fooptr, arg1, ...);
[04:27:38] <RandomReader> that std::function can accept a pointer-to-member of Foo, or a pointer to free function that also takes a foo* as its first param, or... etc
[04:28:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:29:08] <RandomReader> very_sneaky - for distributing resulting binaries? that tends to mean you're locked to the same environment you're building for, including versions of dependencies-of-dependencies
[04:30:09] <RandomReader> but otherwise, it's basically just the size of what you're distributing
[04:30:49] <RandomReader> depending on what you're distributing on what schedule, servicing may be relevant -- e.g. if there's a security issue in some boost library, how do you update it?
[04:31:04] <RandomReader> ship everything, ship something that updates the copy of the boost .so, etc
[04:31:15] <very_sneaky> RandomReader: i'm not sure what you mean. I just meant that compile time is a big complaint i've seen online - this seems to be largely mitigated by having prebuilt binaries distributed by a package manager, for any platform. The only downsize that i can see is the resulting binary size of what you're distributing since (from what i can gather), there are a lot of interdependencies in boost so
[04:31:17] <very_sneaky> you end up linking against more than you think, depending on how much you use it for
[04:31:41] <very_sneaky> gotcha, should've let you finish :P
[04:32:13] <RandomReader> oh, maybe I'm not following the question -- one of the common uses for package management is to have the target systems do the same installation, so you don't distribute e.g. boost
[04:32:44] <very_sneaky> well, maybe. i could use a package manager either as a consumer only, or as a distribution tool
[04:32:49] <yolo> RandomReader: yes your fix worked on that gist. so all members of an object are on the stack then unless they're static, or new from heap? what about the variables in namespace, is that on stack?
[04:33:23] <very_sneaky> if it's as a consumer only then i might be distributing via archive/binaries/installers, at which point i would need to bundle up dependencies
[04:33:50] <RandomReader> yolo - I usually find it better to frame it in terms of scope or lifetime, rather than stack/heap .. in this case, the object (in the variable) is going to be destroyed as soon as you leave the function, so having a reference to it would be bad
[04:34:10] <RandomReader> (doesn't really matter where it's stored when you look at it that way -- and that applies to scopes in C++ in general, so e.g. namespace scope is "always available")
[04:34:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9d44:ce22:b648:2a17) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:59] <yolo> ok, was a c programmer, so it's like stack|heap|data-section(.data and bss) for me
[04:35:01] <RandomReader> a "static" variable explicitly has a longer lifetime, so wouldn't be a problem here .. same for something created with new
[04:35:48] <RandomReader> for a rough analogy with C, return a pointer instead of a reference, same logic applies
[04:36:56] <yolo> yes, i was thinking gotJob is an object member, it is not, it's jsut a local var for that method
[04:36:58] <RandomReader> hm, phrasing: I mean think of it as if you returned a pointer instead of a reference .. the same reasoning about lifetime of the object applies to both, as does the storage perspective (stack/heap/etc)
[04:37:18] <RandomReader> ah, right
[04:38:12] <yolo> block scope, method/local scope, class|object scope, file scope, namespace scope, global scope, for c++20 module scope, there are quite a lot blocks
[04:39:01] <yolo> or there is class-static scope and file-static scope too
[04:39:37] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[04:40:15] <yolo> as a c programmer, how does c++ store namespace variable and object variables(static and non-static)...problem in some data|bss sections
[04:40:29] <RandomReader> true .. I suppose I mentally use scope to determine lifetime, and then reason from there, which is a smaller set of options: https://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration
[04:40:45] <RandomReader> (plenty of *combinations*, but smaller set overall)
[04:41:12] * yolo is writing a small program and objdump it too see how c++ stores them
[04:41:22] <RandomReader> yeah in general it's going to mimic C, with name mangling handling the scopes
[04:41:49] <RandomReader> most implementations started with C, specifically wanting to reuse the C tooling (including linkers), so
[04:42:37] <very_sneaky> i think lack of package management has really hurt the c++ ecosystem. too many kitchen sink libraries, not enough small, composable libraries - and it's obvious why that's the case, but it's a shame
[04:42:47] <RandomReader> I should clarify what I mean by "scopes" there: variables in namespace A and B are both global, but the variable names will have the namespace attached in order to tell them apart
[04:43:17] <RandomReader> so just like you'd manually prefix names or whatever in C, except less readable in raw mangled form
[04:44:22] <RandomReader> class statics are also just globals under the hood
[04:45:40] <RandomReader> very_sneaky - I know it's a common desire of folks, and we'll see how it ends up .. for me, at least currently, I think software is largely worse by the current use of small libraries
[04:46:55] <RandomReader> the benefit people seem to be going for is just being able to rapidly assemble existing code to Make A Thing .. but in practice, the differences seem to make The Thing not all that much faster to create, and at the end there's a mountain of tiny dependencies all with versions, incompatibilities, bugs, and security holes to deal with
[04:47:38] *** Quits: jsbach (~jsbach@ip5f5ab04f.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[04:47:52] <very_sneaky> i guess that depends on how generalisable the small libraries are
[04:48:01] <very_sneaky> the idea of composition works really well with the unix utilities
[04:48:13] <RandomReader> so it's less stable, less reliable, and has a much higher overhead to maintain than something that is purpose built, has a coherent vision, and only the surface area it needs to
[04:48:20] <yolo> very_sneaky: it's unlikely we can have rustc|cargo or go|pkg for c++ and cross-platform, but, if c++ can agree on one tool somehow unites win|macos|linux build that will be nice, something like ziglang does, or exotic xmake tool
[04:48:27] <very_sneaky> cat file.txt | grep "some pattern" | uniq | sort
[04:48:57] <yolo> then you can have many small libraries compile them once for all platforms
[04:49:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:49:12] <RandomReader> depends on the space it's targeting as to how much of a difference that makes .. e.g. rapid changes are the norm for something exposed on the web, which of course is very different from something that's shipped as firmware on a device
[04:49:42] <RandomReader> I just personally think the "rapid changes" camp doesn't actually work out to as many benefits as hoped for
[04:49:43] <very_sneaky> yolo: conan is doing a pretty good job
[04:50:15] <RandomReader> but the software industry as a whole is pretty immature, so who knows where things will be in a few more decades
[04:50:38] <very_sneaky> RandomReader: i think there's a false equivalency that you're making between small, composable libraries and incoherency - one can certainly plan coherency if they're in charge of multiple libraries
[04:50:38] <yolo> not every is buying in conan is the problem, e.g. microsoft wants to have its own, as always
[04:50:52] <RandomReader> maybe something will solve the downsides I see and things will become even more mutable
[04:51:16] <RandomReader> well, that would apply to something like the Boost project, since that's what it is -- a collection of libraries
[04:51:26] <very_sneaky> it would, but instead it's a monorepo
[04:51:29] <RandomReader> I don't think it applies to the way I typically see package managers used though
[04:51:30] <very_sneaky> would also apply to qt
[04:51:33] <yolo> to be fair, c++'s stdlib is way more useful than rust's, javascript does not even have a stdlib
[04:51:49] <RandomReader> right, but Qt is also one of those frameworks you were mentioning, vs independent and composable
[04:52:14] <very_sneaky> i'm not anti-framework
[04:52:26] <yolo> Qt lost steam along with nokia, sadly, and its license model never fly
[04:52:50] <ac_slater> RandomReader:thanks!
[04:53:01] <very_sneaky> yolo: there really aren't that many package management options for c++ as a language
[04:53:06] <very_sneaky> it's really just conan and vcpkg
[04:53:44] <RandomReader> the unix utilities are also largely standardized and don't change much
[04:53:54] <RandomReader> it's rare that I see a library with that level of "done"
[04:54:27] <yolo> very_sneaky: to me, header-only-library works file
[04:54:42] <very_sneaky> RandomReader: i mean, vulnerability/bug management is a thing you need to deal with regardless of whether it's in a dependency or your code base
[04:55:07] <yolo> a pretty good stdlib plus a (big) pool of header-only-libs seem to having more than I need at this stage
[04:55:13] <RandomReader> yes of course, I just mean the surface area for it is much larger when the thing you've made is a collection of many small libraries, and that surface area ceases to be under your control
[04:56:04] <very_sneaky> yolo: i think that's one of the unfortunate side effects of an immature package management system. package management is objectively better because you're not vendoring code, header only libraries are designed that way to be "convenient", rather than for more functional design or performance purposes
[04:56:31] <RandomReader> and the flip side of that is in theory, the libraries might be better tested than anything you can come up with
[04:56:44] <very_sneaky> RandomReader: i think you have more control than you realise. most package management solutions provide lockfiles so that you cna pin versions all the way up your dependency tree
[04:57:06] <RandomReader> pinning versions is the exact opposite of security and bug management though, is my point
[04:57:36] <very_sneaky> it's a tool in the management of your lib and the dependencies
[04:57:49] <RandomReader> if nothing else, you often have to figure out if Bug #2542 is something you might encounter in your usage of the library, and then what to do about it (unpin, backport, etc) .. vs already applying to you by virtue of being a bug
[04:57:56] <very_sneaky> i would have a variable version range in my dependency specification, and then for reproducibility i would lock the deps for a particular release
[04:58:06] <very_sneaky> then unlock them as i continue to develop
[04:58:19] *** Joins: pulse (~pulse@user/pulse)
[04:58:21] <RandomReader> it also seems to be rare that any libraries have the discipline to set up long term stability, so you may get forced to upgrade major versions to deal with an issue
[04:58:34] <very_sneaky> if there's a critical vulnerability in a newer version, i would pin that dep to the version without it, and issue a patch release, or something
[04:58:37] <RandomReader> which then requires changes on your side that may *create* bugs
[04:59:22] <very_sneaky> RandomReader: yeah, i'm not saying there aren't challenges - it's either that or reinvent the wheel yourself in a lot of cases though
[04:59:36] <very_sneaky> reinventing the wheel seems to be a uniquely c++ community thing to do
[04:59:44] <very_sneaky> and i think it wastes a lot of time
[05:00:26] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[05:00:28] <yolo> reinvent-the-wheel and NIH are definitely not c++ specific...
[05:00:39] <RandomReader> yeah, too much reinvention is bad ... I'm just saying that in terms of what I see from the places heavily into package management, at best those outcomes aren't any better, once you look at the whole thing over a project lifespan
[05:00:54] <RandomReader> it looks good short term, doesn't work out that way long term
[05:01:09] <RandomReader> somewhere there's a balance, just not really a solved problem
[05:01:12] <very_sneaky> perhaps i exaggerated. i certainly see a signfiicantly higher incidence rate of reinventing the wheel in the c++ community in comparison to other communities i engage with
[05:02:05] <yolo> i look at it "positively": with bugs and UB and reinventing and NIH, job is secure :))
[05:02:10] <RandomReader> lol
[05:03:08] <very_sneaky> I think i work with too many people with that attitude
[05:05:03] <yolo> why you fix something that will lead to jobless, you already have AI trying to code better than human.
[05:05:15] <yolo> :)
[05:05:23] <very_sneaky> sounds like a good excuse not to learn anything new
[05:06:56] <yolo> recall a story i read a while ago, can't find its source anymore: a gifted bugless coder that is invisible to his boss got fired, a bug producer that asks for more coder to help got promoted and became a director a VIP for the company, it's ironic, but it seems real
[05:08:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:08:16] <yolo> if you write a lot bugless code quietly and quickly, your boss might think you're doing nothing or simple/easy stuff and you're not important at all, crying baby has milk, sadly
[05:10:06] <very_sneaky> lol, and the moral is what, deliberately create bugs to create the perception that you're doing work, whereas in reality you're taxing resources?
[05:10:29] <very_sneaky> no thanks, would rather just do good work and make sure i communicate properly
[05:10:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:12:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:19:06] <yolo> nobody wants to do that of course, in fact true engineer would not like it anyways
[05:21:26] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:22:34] <yolo> the more i do c++, the more i am scared, e.g. dynamic initialization is unordered, yet another one
[05:22:56] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:23:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:27:25] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:38:59] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[05:41:36] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:43:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:56] *** ChanServ sets mode: +v npaperbot
[05:44:17] <ac_slater> alright guys, one more for today. I want a byte buffer that encodes size. Do you guys thinking using std::basic_string<std::byte> (or unsigned char) is OK? I've seen some folks do `std::pair<size_t, std::unique_ptr<std::byte[]>>`
[05:44:27] <ac_slater> s/thinking/thing
[05:44:32] <ac_slater> s/thinking/think *
[05:44:40] *** Quits: manjaro-user (~manjaro-u@199.119.235.163) (Ping timeout: 250 seconds)
[05:45:04] <ac_slater> (the benefit of basic_string is it has iterators so std::span will work nicely
[05:45:06] <ac_slater> )
[05:49:44] <Alipha> ac_slater: why not just std::string? Or std::vector<std::byte>
[05:50:14] <ac_slater> I'd like the underlaying type to be unsigned to avoid casting all over the place
[05:50:34] <johnny> thus std::vector with std::byte
[05:50:44] <ac_slater> yea. good point
[05:51:02] <ac_slater> I saw a talk from a few years ago that says basic_string is underused. Been looking for an excuse ;)
[05:51:22] <johnny> really depends on if you want the std::byte behavior vs say uint8_t or somethin
[05:51:37] <johnny> well use it for things that are strings and not bytes
[05:51:44] <ac_slater> yea std::byte was an example. I guess I really want uint8_t/unsigned char
[05:52:38] <johnny> it really does depend on what you're tryin to do though
[05:54:30] <ac_slater> I guess vector has the correct semantics
[05:54:33] *** Joins: ferdna (~ferdna@user/ferdna)
[05:55:16] <ac_slater> thanks guys
[05:59:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:59:50] *** Quits: emerent (~quassel@p200300cd5743c31aba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:00:53] *** Joins: emerent (~quassel@p200300cd5743c32cba27ebfffed28a59.dip0.t-ipconnect.de)
[06:03:46] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 272 seconds)
[06:04:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[06:08:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:08:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:11:01] <johnny> still missing .append from the qt containers :(
[06:11:20] <johnny> although strangely, they also allowed that for push_back as well
[06:11:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:11:48] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:13:04] *** Joins: Inline__ (~Inline@p200300cd47082500eff0453775466c26.dip0.t-ipconnect.de)
[06:15:26] *** Quits: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:17:43] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Remote host closed the connection)
[06:18:05] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[06:28:21] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[06:29:02] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[06:30:17] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:31:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:36:23] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:38:30] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[06:38:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[06:40:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Quit: Quit)
[06:41:30] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[06:53:46] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[06:54:15] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[06:54:55] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[06:55:02] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[06:56:55] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[06:58:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[07:03:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:05:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:09:00] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:12:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[07:14:16] *** Joins: adeliktas9 (~adeliktas@i59F4D410.versanet.de)
[07:16:36] *** Quits: adeliktas (~adeliktas@i59F5FF5C.versanet.de) (Ping timeout: 272 seconds)
[07:16:37] *** adeliktas9 is now known as adeliktas
[07:19:57] *** Joins: kevr (~kevr@user/kevr)
[07:19:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[07:23:22] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:24:18] *** Joins: xkuru (~xkuru@user/xkuru)
[07:28:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:31:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:43:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:49:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:56:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:08:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:09:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:09:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Leaving)
[08:10:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:11:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:11:05] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:12:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[08:13:21] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Ping timeout: 252 seconds)
[08:22:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:23:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Ping timeout: 240 seconds)
[08:23:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:24:04] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:30:08] *** Joins: Xardas (~Xardas@149.233.51.127)
[08:30:39] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[08:34:53] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:53:34] *** Joins: sigma_ (~sigma@164.215.206.158)
[08:53:56] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:56:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[08:59:03] <sigma_> hi, i have a problem. i read some where std::string default encoding is utf-8 and yeh that was correct, so my problem start when i want spread string to char. the char or wchar cannot display any thing
[09:02:00] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:09:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:09:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:12:22] <sigma_> this my problem https://wandbox.org/permlink/mZry8mIi46P45R42
[09:12:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:12:55] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[09:13:12] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:13:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[09:14:19] *** Joins: darkbit (~db@136.158.8.67)
[09:15:19] <sigma_> https://wandbox.org/permlink/D8U8Ckkq8W12ZVHz
[09:20:17] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:22:44] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[09:23:19] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Max SendQ exceeded)
[09:23:53] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[09:24:14] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:26:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:29:23] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:36:02] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:36:12] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 240 seconds)
[09:43:39] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:43:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:58] *** ChanServ sets mode: +v npaperbot
[09:49:53] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[09:55:17] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[09:59:42] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:01:23] <sigma_> hey, anybody is here
[10:08:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:09:15] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:09:34] <johnny> sigma_, why would you expect this to work?     for (int i = 0; i < 5; i++ ) cout << str[i] <<endl;
[10:10:05] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:11:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b8ef:e8a6:302c:c34c)
[10:11:45] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:12:36] <sigma_> <johnny>: i try with itrator but the result is like that, i say mybe can be diffrent
[10:13:00] <johnny> aren't they just bytes?
[10:13:43] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[10:13:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:13:58] <johnny> well i guess the real question is what you're expecting to get
[10:15:28] <sigma_> yeh, i think thats problem. in normal string in utf8 is chain but i think when you want char from string can make problem
[10:15:29] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[10:15:47] <sigma_> i want char in string
[10:16:34] <johnny> you want char? or you want a character?
[10:16:47] <sigma_> character
[10:16:53] <johnny> those are 2 different things
[10:17:18] <sigma_> yeh, sorry. i konw normal char cant hold
[10:17:33] <johnny> this is arabic right?
[10:17:38] <sigma_> yeh
[10:18:10] <johnny> can all of arabic be represented in a 16 bit string?
[10:18:24] <johnny> err 16 bit type
[10:19:09] <johnny> i know that's not the case in all languges
[10:19:23] <johnny> which is why we hve utf-8 in the first place
[10:19:29] <johnny> also, are you using windows or unix?
[10:19:51] <sigma_> it is alphabet 28, but my languge is persian so we have 32. i use unix
[10:20:05] <sigma_> in unix defualt is utf8
[10:20:14] <johnny> well.. not exactly.. but that's probably the case for you
[10:20:16] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:20:28] <johnny> technically unix has no default .. everything is just a byte stream
[10:20:52] <johnny> it just happens to be that everybody sets up most unixes to be utf-8, but nothing enforces it
[10:21:32] <johnny> if you actually want to index by character, you can't only rely on the C++ standard library. you have to look afield iirc
[10:22:37] <johnny> when i took your wchar_t and turned it into a std::string on my linux setup here, i did get the output i expected from those couts
[10:22:45] <johnny> rather than the numbers you see
[10:22:53] <sigma_> i say, i try itrator but doesnt work.
[10:23:17] <johnny> well it works fine.. it's giving you the byte value at that index
[10:23:31] <johnny> which is what you're telling it to do :)
[10:24:18] <sigma_> no in my system work, if you convert wchar_t  to td::string
[10:24:21] <johnny> it's just that the iterator doesn't know about chracters
[10:25:52] <johnny> sigma_, you probably want something like this or icu https://github.com/nemtrif/utfcpp
[10:26:04] <sigma_> iterator doesnt know but, know the size of any block. like if you use uint16. itrat jump 16 bit
[10:26:06] <johnny> i can't specifically recommend a library
[10:26:23] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:26:33] <johnny> i'd suggest sticking to utf-8 since your output won't be always correct on unix
[10:26:51] <johnny> if you try playing with 16 bit types and the output expects utf-8
[10:27:04] <johnny> sigma_, so please look at that library
[10:27:45] <johnny> hmm.. whatever hapenedt o codecvt..
[10:28:05] <sigma_> so, we dont have standard way
[10:28:34] <johnny> well i guess it really depends on what your program is really gonna do.. is it just gonna print hardcoded strings? or will there be user input?
[10:28:42] <johnny> and if there is, where is it gonna come from?
[10:28:53] <johnny> will you ever accidentally swallow invalid sequenes?
[10:30:16] <johnny> maybe somebody can correct me here.  the only experience i've had in C++ land is using Qt and/or icu to convert between legacy shift-jis to utf-8 and back
[10:30:23] <TinoDidriksen> It's even worse than just UTF-8 vs. -16 or -32. Even with UTF-32 you need to be aware of combining marks, which Arabic also has.
[10:30:49] <johnny> TinoDidriksen, so do you have a recommendation for a library that will allow one to iterate by characters?
[10:31:13] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[10:31:17] <johnny> or am i wrong and there's something you can do with the stdlib?
[10:32:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:32:45] <TinoDidriksen> nemtrif/utfcpp does the iteration part fine, but just be aware that a code point != character. A single rendered character can be made up of infinite code points. And knowing which code points are combining marks is unfortunately something you should use ICU for, unless you have a small known list.
[10:33:24] <johnny> aha
[10:33:32] <johnny> sigma_, so you should probably just rely on icu
[10:33:44] <johnny> i asn't familiar with nemtrif
[10:34:12] <johnny> uggh reminding me hat MS won't ship the C+ api for icu with windows :(
[10:34:15] <TinoDidriksen> It also depends on what other libraries you're using. Like you mentioned, Qt does all this as well, so if you have a Qt console or UI app then you're done.
[10:34:16] <johnny> that*
[10:34:46] <johnny> i never looked into the difference of what happens in cases like this if you have qt without icu
[10:35:07] <johnny> iirc qt can be compiled without icu support, but i don't actually know what the fallbacks or limitations are
[10:35:22] <johnny> no idea how much their own stuff handles it
[10:36:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b8ef:e8a6:302c:c34c) (Ping timeout: 252 seconds)
[10:37:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:37:43] <sigma_> ok, thank you guys :)
[10:39:51] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[10:40:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[10:41:48] <johnny> you're welcome
[10:47:20] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:48:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:52:26] <johnny> oh lol.. nemtrif/ .. it's the name. i thought that was a slash as in "or" lol
[10:53:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4993:549:e4aa:55f6)
[11:00:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:00:51] *** Joins: manjaro-user (~manjaro-u@208.98.223.11)
[11:03:10] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[11:10:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:13:21] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[11:14:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[11:14:09] *** Joins: toulene (~toulene@user/toulene)
[11:23:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[11:25:06] *** Joins: toulene (~toulene@user/toulene)
[11:25:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:26:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 272 seconds)
[11:30:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:30:47] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:34:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[11:35:21] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[11:35:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:39:08] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[11:50:53] <ac_slater> anyone know how to use std::copy and a std::span? I figured it out be simple since span support itereators. But, back_inserter and front_inserter aren't comaptible obviously. Curious if there is another <algorithm> feature I'm missing
[11:53:12] <TinoDidriksen> You want to add to a span?
[11:56:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:03:00] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:03:41] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[12:11:13] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:13:09] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[12:13:29] *** Joins: toulene (~toulene@user/toulene)
[12:13:35] *** Joins: Furai (~Furai@furai.pl)
[12:14:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:14:23] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Remote host closed the connection)
[12:15:47] *** Joins: robod34 (~Username@79.113.243.73)
[12:17:20] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[12:18:11] *** Joins: ymwm (~yingmanwu@27.153.167.53)
[12:27:10] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[12:46:48] *** Joins: paul424 (~tom@ip-5-172-233-215.multi.internet.cyfrowypolsat.pl)
[12:58:36] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:01:12] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:04:23] *** Joins: fivespoons (~fivespoon@user/fivespoons)
[13:05:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:05:16] *** Joins: andreasbuhr (~quassel@p549db62a.dip0.t-ipconnect.de)
[13:08:40] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[13:11:58] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:15:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:15:46] *** Joins: aleios (~aleios@user/aleios)
[13:20:44] *** Quits: aleios (~aleios@user/aleios) (Quit: WeeChat 3.4)
[13:22:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:25:29] *** Quits: fivespoons (~fivespoon@user/fivespoons) (Quit: leaving)
[13:32:39] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[13:34:27] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:35:07] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:35:30] *** gentooclimax is now known as climax
[13:36:16] *** climax is now known as gentooclimax
[13:38:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:42:07] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[13:42:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:43:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:59] *** ChanServ sets mode: +v npaperbot
[13:44:44] *** Joins: ravan (~ravan@user/ravan)
[13:49:07] *** Joins: cursey (~cursey@user/cursey)
[13:51:38] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:55:13] *** Joins: ville (~ville@user/ville)
[14:00:47] <ville> does git, or one of the "publishing front ends" such as gitlab, have some funtionality where a repo that is visible to outside would appear to be a single repo, but in reality have submodulues for example?
[14:02:26] <Shell> ville: not really, but you might want to look at git subtrees.
[14:02:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:06:38] <ville> i suppose in this instancce it'd be acceptable to just script the creation of this "public repo" with out submodules. as it's not expected anything like pull requests accepted back in through it
[14:11:57] *** Joins: DSpider (~DSpider@82.79.237.43)
[14:12:39] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:16:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:17:04] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:22:23] <TinoDidriksen> That is basically how git subtree works.
[14:27:40] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:31:10] <LordKalma> submodules show up on github as links to another repos, so it's not too bad
[14:31:46] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[14:34:17] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[14:34:53] *** Joins: plastico (~plastico@neomutt/plastico)
[14:39:59] <ville> yes subtree seems like the closest git approximation
[14:55:56] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[14:56:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:56:36] *** Quits: lru (~lru@240.ip-51-79-50.net) (Ping timeout: 240 seconds)
[14:56:49] *** Joins: lru (~lru@240.ip-51-79-50.net)
[14:57:06] *** Joins: Praise (~Fat@user/praise)
[14:57:36] *** Joins: Roughy (~mdaw45ns@user/roughy)
[14:58:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[15:05:26] <johnny> ville, i've seen folks tend to do it the opposite way. dev in a a mono repo and script it out to separate repos for each project
[15:05:44] <johnny> i've not yet seen how git subtree works with git though. do you know any repos that are known to use it?
[15:06:48] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:07:10] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[15:10:50] *** Quits: undeclared (nullx@user/undeclared) (Quit: undeclared)
[15:12:10] *** Joins: undeclared (nullx@user/undeclared)
[15:13:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:15:16] *** Quits: undeclared (nullx@user/undeclared) (Client Quit)
[15:15:35] *** Joins: undeclared (nullx@user/undeclared)
[15:16:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[15:19:52] <ville> nope
[15:25:04] <smallvil_> what are some good cross platform gesture libraries for things such as scrolling, rotation, pinch, swipe, and custom gestures
[15:25:22] <smallvil_> swipe/fling *
[15:26:51] <Haohmaru> if i make a gesture library, i'd call it libmiddlefinger
[15:27:06] <very_sneaky> ugh! missed opportunity
[15:27:17] <very_sneaky> i created a gesture library for the atmega32a
[15:27:31] <very_sneaky> i think i called it libgesture or something mundane
[15:28:05] *** Joins: unyu (~pyon@user/pyon)
[15:30:06] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:32:12] *** Quits: ymwm (~yingmanwu@27.153.167.53) (Ping timeout: 240 seconds)
[15:42:19] *** Quits: paul424 (~tom@ip-5-172-233-215.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:43:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[15:44:31] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:69b7:8443:1124:b10f) (Ping timeout: 256 seconds)
[15:45:23] *** Joins: paul424 (~tom@ip-5-172-233-215.multi.internet.cyfrowypolsat.pl)
[15:45:31] *** Joins: undephin3d (~undephin3@158.181.72.222)
[15:45:58] *** Quits: paul424 (~tom@ip-5-172-233-215.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:48:56] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[15:52:09] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:57:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[15:59:19] *** Quits: andreasbuhr (~quassel@p549db62a.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:00:25] *** Joins: andreasbuhr (~quassel@p549db62a.dip0.t-ipconnect.de)
[16:01:12] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[16:04:32] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[16:07:14] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:07:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:07:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:07:57] *** Quits: manjaro-user (~manjaro-u@208.98.223.11) (Ping timeout: 240 seconds)
[16:09:59] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:13:00] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:13:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:14:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:17:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[16:20:17] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:dc5b:897:dfbc:2d30)
[16:22:46] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:23:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:fc09:57a0:d89c:b417) (Ping timeout: 245 seconds)
[16:31:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:dc5b:897:dfbc:2d30)
[16:33:17] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:dc5b:897:dfbc:2d30) (Ping timeout: 252 seconds)
[16:38:15] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[16:39:59] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:41:48] *** Joins: msk (~msk@103.213.213.65)
[16:44:18] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[16:52:04] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:52:11] *** Joins: toulene7 (~toulene@user/toulene)
[16:52:26] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Read error: Connection reset by peer)
[16:52:45] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:52:58] *** Joins: proller (~p@2a02:6b8:b081:23::1:3b)
[16:53:04] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:53:05] *** toulene7 is now known as toulene
[16:54:09] *** Quits: slavfox (~slavfox@93.158.232.111) (Read error: Connection reset by peer)
[16:54:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[16:59:03] *** Joins: GreyXor (~GreyXor@2a01:e0a:13e:a720:8ede:210:7dd8:e7a9)
[16:59:38] <GreyXor> Hi everyone :)  i'd like to use DebugString() from protobuf library. Everything working fine i can get my string correctly. But sometime the parsing fails because I don't have the protobuf sub messages. Can someone help me with that?
[17:04:59] *** Quits: sigma_ (~sigma@164.215.206.158) (Ping timeout: 256 seconds)
[17:05:24] *** Joins: sigma_ (~sigma@86.57.83.153)
[17:07:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[17:14:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:16:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:17:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:19:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:19:29] *** Quits: proller (~p@2a02:6b8:b081:23::1:3b) (Ping timeout: 256 seconds)
[17:19:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:26:33] <CarloWood> This compiles: https://wandbox.org/permlink/mN5mf8JJEu8uIaTN
[17:26:56] <CarloWood> But if you comment out the `#include "Application.h"` it doesn't anymore.
[17:28:13] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:30:04] <CarloWood> The reason seems to be that Handle.h includes SynchronousWindow.h for it's first part - but accidently includes the second part because Handle.h is included from the first part of SynchronousWindow.h - this way evading the inclusion of Application.h before we get to the second part of SynchronousWindow.h.
[17:30:42] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:30:55] <CarloWood> I wonder what a general solution is for this kind of thing :/
[17:34:37] *** Quits: GreyXor (~GreyXor@2a01:e0a:13e:a720:8ede:210:7dd8:e7a9) (Quit: Client closed)
[17:35:04] <CarloWood> The use of the macro guards comes from a (lengthy) analysis involving two headers (posted on SO). But apparently that isn't general enough since it breaks down with three headers.
[17:37:37] <CarloWood> Basically - each header exists of three parts: 0) forward declarations that are needed for 1.  1) A class definition that does not require the forward declared things to be defined.  2) Definitions (usually a template member function) that *does* need the forward declared classes to be defined.
[17:38:19] <CarloWood> It never hurt to include forward declarations, so part 0 and 1 can always be put together. Hence we basically have just two parts.
[17:40:04] <CarloWood> In the general case of N such headers (that all define one class) that all use each other; each would forward declare all the other classes - then define itself - and then define inline/template definitions that need all classes to be defined.
[17:41:13] <CarloWood> So, each header would have the form:
[17:41:25] <CarloWood> struct A; struct B; struct C; ...
[17:42:28] <CarloWood> struct D { A* a; B* b; C* d; template<typename T> void f(); };
[17:43:10] <CarloWood> template<typename T> void D::f() { a->use(); b->use(); c->use(); ... }
[17:43:27] <CarloWood> s/C* d;/C* c; .../
[17:43:49] *** Quits: d12fk (~heiko@exit0.net) (Ping timeout: 240 seconds)
[17:43:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:00] *** ChanServ sets mode: +v npaperbot
[17:44:58] <PJBoy> if only wandbox supported -E
[17:45:46] <CarloWood> Because the template function definition needs A, B, C etc to be defined - their header needs to be included before that point. Thus we need #include "A.h" // #include "B.h" // #include "C.h" // ...  before part 2 (here, the template definition)
[17:45:55] <LordKalma> if only CE's IDE mode was good
[17:46:45] <CarloWood> I wonder if this is even possible ... :/
[17:47:50] <rpav> wandbolt? godbox?
[17:53:15] <PJBoy> godbox sounds like the name for TV back in the 90s
[17:54:52] <CarloWood> I saw the light: you need a separate macro guard for each additional header: N headers will need N-1 guard macros for their first part.
[17:55:24] *** Joins: pulse (~pulse@user/pulse)
[17:55:57] <CarloWood> This is because -say- A.h will be included N times before you're allowed to process the second part.
[17:57:04] <CarloWood> There must be a cleaner way to do this though... Lemme make an example case on wandbox with four headers.
[17:57:05] <Alipha> CarloWood: eh, split the "first part" and "second part" into their own headers and call the first part "Afwd.h" (eg, there's <iosfwd>)
[17:57:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:57:54] <ashafq> https://paste.debian.net/1234142/ what locks should I use here from reading from disk and playback of audio?
[17:58:02] <ashafq> std::binary_semaphore?
[17:58:06] <Alipha> And then A.h would include Afwd.h, Bfwd.h, and Cfwd.h
[17:58:44] <CarloWood> It's not a forward declaration.
[17:58:58] *** Joins: jokoon (~eio@2a01:e0a:542:e160:bc83:54aa:162e:e52)
[17:59:07] <CarloWood> Part 1 contains the definition of the class.
[17:59:40] <CarloWood> (or declaration - without defining the inline and template member functions)
[17:59:44] <Alipha> CarloWood: then perhaps call it something different, but I would still look into that form
[18:00:02] <CarloWood> Yes I understand what you mean... Lemme think about it...
[18:03:09] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[18:03:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:04:00] <rpav> challenge: write a (nontrivial) "square" of code such that it works as-is and character-transposed
[18:04:37] <rpav> bonus: make it do the same thing; bonus 2: make it identical when transposed
[18:06:00] *** Joins: Shell (~shell@user/shell)
[18:06:30] <rpav> a b / c d => a c / b d .. rotated would probably be interesting too, a b / c d => c a / d b
[18:06:31] *** Quits: Shell (~shell@user/shell) (Remote host closed the connection)
[18:09:56] *** Joins: Shell (~shell@user/shell)
[18:14:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:16:54] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:17:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[18:19:00] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:34:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:34:02] *** Quits: LordKalma (~LordKalma@server.portaldoradioamador.pt) (Quit: The Lounge - https://thelounge.chat)
[18:35:00] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[18:35:43] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:36:37] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[18:52:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:52:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:56:48] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:58:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:08:48] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:12:13] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Remote host closed the connection)
[19:12:14] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Remote host closed the connection)
[19:12:30] <LordKalma> PJBoy, did you hear about
[19:12:31] <LordKalma> "By default, fp_contract is off, which tells the compiler to preserve individual floating-point instructions. Set fp_contract to on to use floating-point contraction instructions where possible. This behavior is new in Visual Studio 2022. In previous compiler versions fp_contract defaulted to on."
[19:12:40] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[19:13:03] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[19:13:04] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[19:13:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:17:30] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a896:dea:2287:d7fd)
[19:17:30] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a896:dea:2287:d7fd) (Changing host)
[19:17:30] *** Joins: skapata (~Skapata@user/skapata)
[19:18:33] *** Joins: jp__ (~jp@bl13-171-74.dsl.telepac.pt)
[19:18:53] <jp__> <jp__> i can't seem to get my file open with ifstream
[19:18:53] <jp__> <jp__> https://pasteboard.co/9svL8Y2GbpMG.png
[19:18:53] <jp__> <jp__> i tried changing permissions on file, but it doesn't work
[19:18:53] <jp__> <jp__> the code for opening the file is from cplusplus.com
[19:20:47] <Haohmaru> jp__ so it prints "file error \n" ?
[19:20:54] <jp__> yeah
[19:21:17] <Haohmaru> are you sure the file exists in the directory?
[19:21:31] <Haohmaru> you know about relative paths, don't you?
[19:21:36] <jp__> https://wandbox.org/permlink/WRAoSEhGW2NaSjkB
[19:22:21] <jp__> it's in the same dir as the sources
[19:23:15] <Haohmaru> that doesn't mean it's gonna be visible.. depending on how you run the .exe
[19:23:16] <jp__> ehmmm,like the full path?
[19:23:33] <jp__> lemme try
[19:23:56] <jp__> yeah i guess it would be in the build folder or so
[19:24:29] <Haohmaru> you could use an ofstream to make a "dummy.txt" file, and then see where that file appears
[19:26:05] <jp__> absolute path did it!
[19:26:14] <jp__> you were right
[19:26:50] <jp__> yeah,that is needed for release
[19:27:08] <jp__> thanks
[19:28:28] <PJBoy> "Haohmaru.txt"
[19:28:35] <PJBoy> oh wait that's the same thing
[19:30:13] <jp__> lol
[19:30:47] <jp__> if he were dumb his first comment wouldnt be right
[19:32:08] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:32:24] <Haohmaru> i can be dumb and i can also be right.. at the same time
[19:32:33] <Haohmaru> ;P~
[19:33:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:33:44] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:36:25] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[19:36:35] <ac_slater> anyone know how to use std::copy and a std::span? I figured it out be simple since span support itereators. But, back_inserter and front_inserter aren't comaptible obviously. Curious if there is another <algorithm> feature I'm missing
[19:36:45] <ac_slater> (sorry duplicate from a few hours ag)
[19:36:46] <ac_slater> ago*
[19:36:59] <ac_slater> TinoDidriksen: ^ you answered above, and yes, I want to add to a span. I can do memcpy
[19:37:05] <ac_slater> but curious if I can use std::copy or something
[19:37:08] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[19:38:42] <TinoDidriksen> You can't add to a span. You can only take subspans.
[19:39:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:39:55] <TinoDidriksen> If you just mean overwrite existing elements without changing number, then you don't need inserters.
[19:41:04] <Alipha> ac_slater: a span is just a view into another container. if you want to add elements to that container, you have to use the container's insert/push_back/whatever
[19:46:23] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:47:18] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:47:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Write error: Broken pipe)
[19:47:38] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:53:46] *** Inline__ is now known as Inline
[19:57:39] *** Joins: magla (~gelignite@55d4c150.access.ecotel.net)
[19:58:22] <ac_slater> right but span's are writeable Alipha. I kinda use span as a std::pair<T*, size_t> , maybe I shouldn't.
[19:58:34] <PJBoy> that's exactly how you should use span
[19:59:55] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[20:00:24] <PJBoy> you can grow a span manually
[20:00:54] <PJBoy> { vector v{1, 2, 3}; span s(v), ss = s.subspan(0, 2), sss(data(ss), 3); SHOW(s), SHOW(ss), SHOW(sss); }
[20:00:55] <geordi> s = {1, 2, 3}, ss = {1, 2}, sss = {1, 2, 3}
[20:01:20] <jp__> any tips on using malloc for storing thousands of strings of the exact same lengvth?
[20:01:27] <PJBoy> don't
[20:01:49] <PJBoy> unless you're interfacing with some C library ofc
[20:02:15] <jp__> what should i use then?
[20:02:34] <CarloWood> Will you be freeing and allocating it a lot?
[20:02:58] <PJBoy> vector<string_t> where string_t = array<char, string_size> possibly
[20:03:01] <PJBoy> it depends
[20:03:04] <jp__> nah allocating once,freeing once at the end
[20:03:49] <CarloWood> Do you need to treat the strings as std::string_view ?
[20:03:55] <jp__> but its about 40MB of data so far
[20:04:30] <jp__> ideally i'd like to treat them as char arrays
[20:05:23] <imMute> PJBoy's suggestion sounds the best then
[20:05:25] <CarloWood> Is the string size known at compile time?
[20:05:42] <jp__> yeah
[20:05:53] <CarloWood> Yes, then what PJBoy said.
[20:06:03] <PJBoy> what I said
[20:06:15] <jp__> lemme read up on vectors
[20:06:24] <CarloWood> And reserve the size in advance so you get a single allocation.
[20:07:18] <CarloWood> 'vector' is almost synonym with 'malloc' ;)
[20:07:36] <CarloWood> If you think you need malloc, you probably want to use a vector instead.
[20:08:22] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:08:28] <jp__> i wont lose speed?
[20:08:37] <CarloWood> no
[20:08:38] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:08:53] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:09:07] <CarloWood> vector<string_t> v;  v.reserve(number_of_string); // that does your malloc.
[20:09:29] <Friithian> something something rule 1
[20:10:06] <jp__> yeah, i have 100.000 strings
[20:10:15] <CarloWood> Or you can use resize() instead and get all strings in advance, zero filled. If you use reserve you still need to push_back fill it
[20:10:39] <jp__> would i have to manually create the vectors?
[20:11:11] <CarloWood> Where did that 's' come from?
[20:11:19] <jp__> .or can i have a vector array,and would it go so high?
[20:11:53] <CarloWood> I don't think allocating a single block of memory of 40MB is a problem these days.
[20:11:55] <jp__> isn't every string a seperate vector?
[20:12:04] <CarloWood> no
[20:12:09] <CarloWood> Not like this
[20:12:12] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[20:12:30] <jp__> ah i think i need to read up on it
[20:12:36] <rpav> sadly string is not a vector type in c++
[20:13:47] <jp__> ideally i would have a memory map with everything in a callable mem address
[20:14:08] <jp__> but if vectors work as well
[20:14:09] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:14:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:14:37] *** Quits: jokoon (~eio@2a01:e0a:542:e160:bc83:54aa:162e:e52) (Quit: Leaving)
[20:14:37] <CarloWood> I have no idea what a 'callable mem address' is.
[20:14:48] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[20:15:47] <Inline> loadable ?
[20:16:00] <jp__> well i used to program micro controllers in C
[20:16:51] <jp__> so you made a memory map with bits having a specific function
[20:17:30] <jp__> like 0x0AD000000D = interrupt routine X
[20:17:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:18:02] <CarloWood> You can't allocate memory in C++ that can contain executable code. Your strings are not code, are they?
[20:18:18] <jp__> it's very fast if you organize memory close to each other
[20:18:37] <jp__> nah, its string
[20:19:28] <rpav> CarloWood: well, you can, but i think it's UB if you try calling them
[20:21:39] <CarloWood> I should make a youtube about "How people *think* that the IRC guru is answering your questions" (sitting in a quiet living room, stirring in a cup of coffee - patient and fully concentrated on the IRC conversation) and what is *actually* going on.
[20:23:23] <jp__> actually i used to guru python channels
[20:24:02] <Friithian> I'm stting in a wooden cabin on the top of a cliff like thing overlooking a river, sipping coffee made by an aeropress
[20:24:09] <jp__> i would reserve the last half hour of work
[20:24:16] <Friithian> but the whole guru part, well, doesn't apply to me
[20:24:21] <jp__> lol
[20:24:39] <CarloWood> Friithian: seriously? Post a picture :)
[20:25:03] <Friithian> please hold…
[20:25:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:27:03] <rpav> Friithian: aeropress ftw
[20:27:10] <rpav> mesh filter?
[20:27:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:30:26] <Friithian> https://friithian.dev/pictures/photos/cabinriver.jpg
[20:30:42] <Friithian> rpav: I'm just using the stock inverted method
[20:31:20] <rpav> ah yeah i took to mixing in a separate glass then pouring in because inverted was killing the plunger .. i think the new silicone plungers ought to handle it better now though
[20:32:00] <CarloWood> I see it's not all sunshine - you have a busy road in front of your house.
[20:32:09] <Friithian> it's rental lol
[20:32:13] <Friithian> 5~but yeah annyoing
[20:32:16] <rpav> but an aeropress mesh filter makes the coffee a _lot_ better .. and if you don't roast, it makes it 10x better _again_
[20:33:16] <Friithian> interesting, seems more annoying to dispose of the grounds
[20:33:21] <rpav> (also since you can get green bean for like $5-6/lb, vastly cheaper..)
[20:33:37] <Friithian> I haven't the time to roast beans
[20:33:50] <Friithian> not energy to source good ones
[20:33:55] <Friithian> sstsrs
[20:33:55] <rpav> only slightly .. i found if you rinse a bit of water over then pull back on the grounds it usually comes away 90% clean and you can rinse off waht little residue is left
[20:34:02] <rpav> ;/
[20:34:25] <Friithian> is that face a response to my valid find replace
[20:34:43] <rpav> nah "time to roast"
[20:34:45] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 252 seconds)
[20:34:53] <jp__> oh nice,reminds me of working in norway
[20:35:01] <Friithian> rpav: I'm a uni student
[20:35:05] <rpav> sadly it does take a bit of time and good ventilation
[20:35:12] <rpav> Friithian: that means you have all the time#@!
[20:35:13] <jp__> the cabin view
[20:35:17] <Friithian> hahahahaha I wish
[20:35:21] <rpav> grad?
[20:35:34] <Friithian> no, just lots of work
[20:35:38] <rpav> jp__: yeah i used to live up in the mountains and now i want to again
[20:35:41] <rpav> ah
[20:35:46] *** Quits: jp__ (~jp@bl13-171-74.dsl.telepac.pt) (Quit: Leaving)
[20:35:49] <Friithian> junior year of comp sci, also work at my uni's makerspace
[20:35:59] <rpav> damn, fun
[20:36:03] <Friithian> currently in the great smokey mountains on spring break
[20:36:15] <rpav> i wish i got spring break heh
[20:36:54] <Friithian> this is my first spring break
[20:37:01] <rpav> sadly you go from "4-6 hours of work/class a day" to "8-10 hours of work/day with no weeks-long vacations" but at least there's no homework
[20:37:03] <Friithian> in my third year of uni, my first break
[20:37:31] <rpav> what were you doing during the other ones?!
[20:37:53] <Friithian> I didnt have other ones
[20:37:59] <Friithian> covid fucked them
[20:38:23] <rpav> (* ok i lied, there's homework, especially if you're devops, and overtime might as well be, but at least, uh, you get paid..)
[20:38:30] <rpav> lame :(
[20:39:19] <rpav> huh, g++ allows lambda references to structured bindings, but i think someone mentioned that
[20:40:42] *** Joins: Praise (~Fat@user/praise)
[20:45:41] <ashafq> Friithian: break sounds nice, I forgot what a breaks are.
[20:46:41] <Friithian> yeah this is one of the last breaks Ill have
[20:46:59] <rpav> right? that occasional 3-day weekend is like omfg finally
[20:47:02] <ashafq> Senior year or grad school?
[20:47:22] <rpav> assuming you're not working in a 6/7-day work-week country
[20:47:30] <ashafq> yes, the three day weekends are amazing.
[20:48:07] <Friithian> junior year, but my future isn't looking positive
[20:49:10] <ashafq> If you're in programming, your future is always positive 😊
[20:49:44] <rpav> maybe not if gamedev 🤔
[20:50:22] <ashafq> It depends.
[20:50:47] <Friithian> well, positive in the general sense, like, the world is going to shit sorta thing
[20:51:23] <rpav> the world is _always_ going to shit
[20:51:31] <ashafq> Defence needs a lot of C++...
[20:51:42] <rpav> chuckle
[20:52:04] <ashafq> Someone needs to write those drone software 😊
[20:52:32] <PJBoy> my workload went down considerably after leaving uni
[20:52:49] <PJBoy> I don't get a big summer holiday, but at least I get weekends
[20:52:53] <rpav> true
[20:53:03] <rpav> i forgot how weekends aren't really in school
[20:53:26] <rpav> also not having to switch between a bunch of different topics is a lot easier
[20:53:42] <rpav> less constant introduction of new material
[20:54:10] <ashafq> Btw, since I have your attention. Can someone recommend a literature about multi-threaded programming.
[20:54:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:54:57] <ashafq> I have coded embedded systems for a while, dealing with interrupts are not same as dealing with threads.
[20:57:14] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:22] <ashafq> Here is the problem I am trying to solve: I have an audio thread that is interfacing to the hardware, while I have a disk thread writing to the circular buffer.
[20:58:53] <ashafq> I want the disk thread to wait until audio thread finishes up some of the queue and then start resuming to fill up the buffer.
[20:59:13] <rpav> i don't think i'd make those two threads
[20:59:34] <rpav> too much latency in the coordination, and you're buffering already right
[20:59:47] <rpav> i am not a threading expert though so i dunno
[21:00:50] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:00:53] <CarloWood> I wanted to post a picture of where I sit on imgur - and started scrolling there a bit :,(
[21:01:03] <rpav> maybe .. with like the 828mk2 i think it doesn't tolerate but a couple ms of latency filling its buffer
[21:01:35] <ashafq> rpav: https://github.com/thestk/rtaudio/blob/master/tests/playraw.cpp#L81 like this?
[21:01:49] <CarloWood> Oh man, humanity is so stupid. I feel I have brain damage by just scrolling the memes for 5 minutes. Imagine growing up doing nothing else then the todays social media :/.
[21:02:42] <rpav> ashafq: maybe, you might die on disk waits i guess so if you have a reasonably chunky ring buffer you can load up it might be worth threads
[21:03:49] <rpav> the trivial/heavy way is a condition variable i think you can wait on in the disk buffer then signal when you reach some low-water-mark or whatever in the ring buffer
[21:04:02] <rpav> no sense calling it everytime you use 4 bytes
[21:05:49] <kraa> we might have an entire generation of invalids because of screen exposure at young ages and social media, but the older generation always worries so who knows until we get there
[21:05:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:06:12] <rpav> pfft that's what they said for the last N generations watching TV
[21:06:47] <rpav> social media hurts everyone, but maybe the younger will be more well-adapted
[21:07:08] <rpav> or maybe it'll be like lead in gasoline and everyone will have their IQ halved
[21:08:10] <kraa> yep thats the thing, its fine and all when the older generations are wrong, but when tey are right...
[21:08:38] <rpav> were they ever right
[21:09:02] <kraa> doesnt mean they will always be wrong
[21:10:19] <rpav> even a blind pig guesses the correct time of a stopped watch once in awhile?
[21:11:07] <Friithian> what?
[21:14:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:15:26] <LordKalma> PJBoy, ping?
[21:15:42] <PJBoy> I'm semi-here
[21:15:53] <LordKalma> did you see my message about VS?
[21:16:40] <PJBoy> yeah, but I didn't really understand it
[21:16:50] <PJBoy> never heard of floating point contraction before
[21:18:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:23:01] <MaddHatter> I better read about that. fp_contract change sounds like something that's going to break all of my code.
[21:23:13] *** Quits: LordKalma (~LordKalma@server.portaldoradioamador.pt) (Quit: The Lounge - https://thelounge.chat)
[21:23:58] <MaddHatter> (https://docs.microsoft.com/en-us/cpp/preprocessor/fp-contract?view=msvc-170 apparently)
[21:24:03] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[21:24:29] *** Joins: x_kuru (xkuru@user/xkuru)
[21:24:39] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:25:40] <MaddHatter> does gcc or clang have an equivalent?
[21:27:10] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[21:27:53] <MaddHatter> yes -- https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#:~:text=O2%2C%20%2DO3%2C%20%2DOs.-,%2Dffp%2Dcontract%3Dstyle,-%2Dffp%2Dcontract%3Doff
[21:28:47] <MaddHatter> but -ffp-contract=on is the same as -ffp-contract=off. How intuitive and useful.
[21:36:54] *** Quits: undephin3d (~undephin3@158.181.72.222) (Ping timeout: 252 seconds)
[21:37:08] <PJBoy> what?
[21:37:41] <PJBoy> wow
[21:38:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4993:549:e4aa:55f6) (Ping timeout: 240 seconds)
[21:39:33] <PJBoy> so fp_contract is now off by default in MSVC
[21:39:36] <PJBoy> that's sensible enough
[21:40:33] <LordKalma> seems a pessimization?
[21:41:02] <PJBoy> yeah
[21:41:11] <PJBoy> but it's not like /O2 is on by default either
[21:41:38] <PJBoy> I'd assume the contracted instructions are somehow less precise?
[21:41:49] <PJBoy> otherwise I'm not sure why it would be possible to turn them off
[21:42:28] <PJBoy> man that fp_contract page is terrible now
[21:42:56] <PJBoy> "Remarks: By default, fp_contract is off [...] By default, fp_contract is on [...] By default, fp_contract is off [...]"
[21:43:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:53] <MaddHatter> PJBoy: the contracted instructions are more precise.
[21:44:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:01] *** ChanServ sets mode: +v npaperbot
[21:44:07] <MaddHatter> regardless, it's being _different_ that's the problem
[21:44:21] <PJBoy> they might preserve more arithmetic precision
[21:44:33] <MaddHatter> right
[21:44:47] <PJBoy> but w.r.t. the C++ operations, they're probably less conforming in their increased precision
[21:44:56] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3a:7c81:c789:5753)
[21:45:03] <PJBoy> if that makes sense
[21:46:25] <PJBoy> probably if it matters for your project, then it's already manually specified
[21:47:16] <PJBoy> but yeah I'm not sure if should be on or off by default
[21:47:27] <PJBoy> would be cool to know the rationale
[21:48:19] <PJBoy> and here it is https://devblogs.microsoft.com/cppblog/the-fpcontract-flag-and-changes-to-fp-modes-in-vs2022/
[21:48:54] <PJBoy> ah so it didn't actually have a flag before
[21:49:05] <PJBoy> ok that changes things
[21:50:33] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Remote host closed the connection)
[21:51:34] <PJBoy> seems reasonable
[21:51:50] <PJBoy> but also I can't find the will to really care
[22:00:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[22:12:23] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[22:14:11] *** Joins: teepee (~teepee@openscad/teepee)
[22:15:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:16:39] *** Joins: ivii (~ivan@user/ivii)
[22:18:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:22:06] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:25:06] <mort> what if we made a new x86_64 "platform"
[22:25:30] <mort> what if we made an x86_64_2 which gets a whole new libstdc++ ABI
[22:26:28] <mort> the x86_64 -> x86_64_2 transition would look much like an x86 -> x86_64 transition, i.e it would eventually complete and support for the old "architecture" would be killed
[22:26:39] <mort> but we would have the opportunity to fix all ABI mistakes in the process
[22:28:02] <mort> since people are so worried about things like std::regex and std::unique_ptr and whatnot having suboptimal implementations which can't be changed without an ABI break
[22:28:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:30:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:37:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:41:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Remote host closed the connection)
[22:45:35] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 250 seconds)
[22:46:15] <MaddHatter> what's suboptimal about unique_ptr and regex that an ABI rev could fix?
[22:47:25] *** Joins: taiyu (~taiyu@user/taiyu)
[22:50:19] <mort> isn't unique_ptr passed less efficiently than pointers due to how Itanium specifies passing structs?
[22:50:46] <mort> and std::regex is absolute garbage in most stdlibs, and the explanation that's usually given is that it can't be made more efficient without changing the layout of the std::regex struct
[22:52:34] <mort> or other such ABI issues, I haven't looked that much into the particulars of std::regex
[22:55:19] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:01:22] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:03:42] <rpav> unique_ptr isn't suboptimal; regex was poorly-implemented by earlier gcc _and_ they abi-broke it
[23:03:57] <rpav> also it doesn't take string_view which is annoying as hell
[23:06:31] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:06:41] <BurumaSerafuku> eh?
[23:06:58] <BurumaSerafuku> ah you're talking about regex, rpav?
[23:07:15] <BurumaSerafuku> heh heh heh
[23:07:39] <rpav> regex? what about it
[23:07:49] <BurumaSerafuku> [15:33] <rpav> also it doesn't take string_view which is annoying as hell
[23:07:53] <rpav> ah yeah
[23:08:14] <mort> rpav: so https://github.com/mariomka/regex-benchmark#optimized these results are outdated?
[23:08:15] <BurumaSerafuku> what are the ugly ducklings of std? unordered_map ? regex ? what else?
[23:08:30] <rpav> super incredibly annoying and i can only imagine because they didn't want to require implementations implement anything and require libraries to support non-null-terminated strings
[23:08:42] <rpav> unordered_map isn't _that_ ugly?
[23:09:03] <rpav> i think i said the other day it's made a lot less useful by no builtin hash combiner / no hash for std::tuple
[23:09:18] <mort> std::unordered_map isn't ugly in terms of its API, it's an "ugly duckling" in terms of being one of the things that's way slower than it has to be for backwards compatibility reasons
[23:09:45] <rpav> since with map you only need a much-easier-to-implement operator<
[23:10:08] <mort> (tho in the case of unordered_map, AFAIU, it's mostly the standard limiting it, by mandating that it's bucket-based rather than flat)
[23:10:53] <mort> I sure wish we had a default std::hash implementation for structs which just calls std::hash on all its members and XORs them
[23:11:06] <mort> (and same for std::tuple ofc)
[23:11:33] <rpav> xor alone is a terrible combiner
[23:11:40] <rpav> and unordered_map is a perfectly fine closed hash
[23:11:53] <rpav> open address / non-bucket hashing has to be used carefully
[23:11:58] <BurumaSerafuku> { auto p = pair(1,2); cout << hash()(p); }
[23:11:58] <geordi> error: class template argument deduction failed:
[23:12:11] <BurumaSerafuku> { auto p = pair<int,int>(1,2); cout << hash()(p); }
[23:12:11] <geordi> Same error.
[23:12:15] <mort> alright, replace xor with a better combiner
[23:12:29] <BurumaSerafuku> { auto p = pair(1,2); cout << hash<decltype(p)>()(p); }
[23:12:29] <geordi> error: use of deleted function 'hash<pair<int, int> >::hash()'
[23:12:31] <mort> I'm just agreeing that more implicit std::hash implementations would be nice
[23:12:32] <rpav> well sure, it's not hard to write .. i ripped off boost's, it's like one line of code
[23:12:43] <rpav> but yeah it absolutely should be there
[23:12:44] <BurumaSerafuku> also not even std::hash for pairs
[23:12:52] <BurumaSerafuku> another ugly duckling
[23:12:57] <rpav> BurumaSerafuku: the hash for pair is the same problem/solution as a hash for tuple
[23:13:03] <BurumaSerafuku> bs
[23:13:17] <mort> I'm betting that in 99% of cases, a decent default combiner would be better than any std::hash specialization I could come up with in the moment
[23:13:19] <BurumaSerafuku> a combine algo can be used
[23:13:22] <BurumaSerafuku> yeah
[23:13:23] <rpav> pretty much all of std is an ugly duckling, except for like, vector and string
[23:13:43] <mort> eh even string is kinda bad
[23:13:50] <rpav> a hash combiner _is_ the same solution to the problem for pair and tuple :p
[23:14:01] <BurumaSerafuku> { auto v = vector({1,2}); cout << hash<decltype(v)>()(v); }
[23:14:01] <geordi> error: use of deleted function 'hash<vector<int> >::hash()'
[23:14:07] <mort> it feels like people really haven't decided whether std::string should get utility methods or if there should be utility algorithms which works on containers including std::string
[23:14:10] <BurumaSerafuku> :~~~~~~~~~~~~~~~~
[23:14:20] <mort> so we aren't getting string algorithm free functions and we aren't getting string algorithm methods
[23:14:29] <BurumaSerafuku> we can hash a string, but we can't hash a pair/tuple/vector
[23:14:33] <mort> we just got contains() ffs
[23:14:42] <BurumaSerafuku> C++ is gonna die :~~~~~~
[23:14:59] <rpav> they haven't decided that for most of C++; everyone wants to stick to begin()/end() which is dumb; they introduced ranges which are dumb; they're still ignoring utf-8 which is dumb
[23:15:02] <InPhase> BurumaSerafuku: Probably in a few decades, yeah.
[23:15:12] * BurumaSerafuku loves C++
[23:15:18] <BurumaSerafuku> but I am hating stdlib more and more
[23:15:20] <rpav> yeah it's going to be dead just like cobol died
[23:15:34] <InPhase> rpav: That is the nature of language death.
[23:15:37] <mort> C++ isn't gonna die, it's just gonna be worse than it should be
[23:15:42] <rpav> InPhase: never actually happening?
[23:15:52] <InPhase> rpav: Well COBOL is basically in zombie mode.
[23:15:55] <BurumaSerafuku> C++2 with std2 now! all clean, fast and simple
[23:15:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:16:07] <BurumaSerafuku> with an ABI that works!!!1!
[23:16:08] <rpav> C is pretty close to zombie mode, but never count anything out
[23:16:18] <rpav> fortran has had somewhat of a revolution from what i understand
[23:16:21] <BurumaSerafuku> and actually usable, unlike Rust
[23:16:24] <mort> there's nothing there to replace C++ yet imo, someone would need to make a new language (or keep C++ but throw out the stdlib, which would effectively be a new language) to replace C++
[23:16:26] <InPhase> rpav: COBOL is dead, no one wants to use it, but it's still out there walking around slowly eating programmer brains.
[23:16:48] <mort> I love rust, but as much as I enjoy it, it doesn't feel like a C++ replacement
[23:16:58] <mort> rust doesn't trust the programmer enough to be a C++ replacement
[23:16:58] <BurumaSerafuku> what about https://github.com/Echorial/Carbon , mort?
[23:17:07] <mort> 3 stars
[23:17:33] <InPhase> mort: I'm tired of languages trusting the programmer too much by default.  This makes larger reliable programs hard to write.
[23:17:45] <BurumaSerafuku> they should trust the coder
[23:17:48] <BurumaSerafuku> they should be easy to code
[23:17:54] <johnny> that seems to be a failure in practice
[23:17:57] <BurumaSerafuku> nah
[23:18:00] <johnny> same old use after free.. in 2022
[23:18:02] <johnny> ALL THE TIME
[23:18:05] <InPhase> mort: What I like most about C++ is that it at least ENABLES writing code where you don't trust yourself.  But it doesn't do a good job of facilitating this in a systematic manner.
[23:18:10] <mort> InPhase: I think rust is awesome, I just think there's a niche for C++ where you don't want to get bogged down with keeping the compiler happy by introducing inefficiencies and verbosity you *know* isn't actually necessary
[23:18:17] <BurumaSerafuku> rust kills the coder
[23:18:28] <mort> like, I can have one mutable reference and one immutable reference to the same variable
[23:18:31] <BurumaSerafuku> annoying to write, annoying to read, and even more annoying to MAINTAIN
[23:18:39] <mort> and the mutable reference can mutate the variable without locking at runtime
[23:18:44] <cbreak> trusting programmers is risky
[23:18:48] <johnny> that seems like C++.. particualrly the last part BurumaSerafuku
[23:18:56] <BurumaSerafuku> nah! C++ has decent coding idioms
[23:18:58] <mort> (talking about in a single-threaded code base here)
[23:18:59] <johnny> static analyzers can only do so much
[23:19:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:19:08] <InPhase> mort: I have multithreaded code where I work very hard to keep that from happening in C++.
[23:19:16] <cbreak> static analyzers can do as much as the language restricts / guarantees
[23:19:17] <BurumaSerafuku> you stick to the correct idioms, C++ is a beauty
[23:19:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:19:23] <InPhase> mort: In a single-threaded context of course it is fine.
[23:19:23] <rpav> trust or distrust programmers is not the right approach
[23:19:25] <mort> InPhase: yeah, in multi-threaded code it's nice to have code which forces you to acquire and release locks
[23:19:26] <BurumaSerafuku> ofc if you go wild and rogue, C++ is the worst nightmare ever
[23:19:30] <cbreak> for languages that are restrictive at compile time, static analyzers can do more
[23:19:31] <BurumaSerafuku> especially if you mix it with C
[23:19:39] <johnny> indeed cbreak indeed
[23:19:40] <rpav> trust programmer laziness; make writing correct code easy; the problem solves itself
[23:19:49] <cbreak> for languages with a lot of runtime dynamicism, like python, static analyzers are fucked
[23:19:50] <mort> I think it would be awesome if C++ had some atomic variable type which would work kinda like a weak_ptr
[23:20:01] <rpav> this is what rust and other things get wrong .. writing correct code should not be more work
[23:20:04] <rpav> it should be _less_ work
[23:20:08] <BurumaSerafuku> :)
[23:20:10] <mort> aka that you could use it to get a mutable reference to something, that would acquire a lock, and then when the reference is destroyed the lock is unlocked
[23:20:25] <InPhase> mort: No, I don't want to acquire and release locks.  I want the guarantees of no mutability of my immutables on my multithreaded data so that no locks are needed.
[23:20:28] <cbreak> mort: sounds more like a shared_ptr
[23:20:33] <cbreak> mort: since you want ownership
[23:20:43] <cbreak> weak_ptr doesn't give ownership
[23:21:05] <cbreak> InPhase: that exists in c++ via const
[23:21:09] <BurumaSerafuku> the reality is that all the old coders are withering and retiring. now we only have fapping webdev kids who never cared about the art of coding
[23:21:19] <rpav> sounds like conflating ownership with thread safety
[23:21:21] <mort> cbreak: the analogy is: weak_ptr doesn't let you modify the pointed-to variable, you have to use your weak_ptr to get a shared_ptr to the variable and you can modify through that
[23:21:48] <BurumaSerafuku> "stack overflow coders" "gimme the best framework" "where do I click to generate my function?"
[23:21:50] <cbreak> mort: so... why aren't you happy with shared / weak_ptr already?
[23:21:56] <mort> cbreak: analogously, you could have a weak_lock which doesn't let you modify the pointed-to variable, but you could use it to get a locked_ptr which locks a mutex in the ctor and unlocks it in the dtor
[23:22:04] <mort> cbreak: shared/weak_ptr doesn't do any locking
[23:22:12] <rpav> because they're about ownership, not locking
[23:22:22] <BurumaSerafuku> gotta go play visual novels in my PC98 emulator
[23:22:47] <cbreak> so... you want something like a wrapper that adds a mutex and locks it on access
[23:23:01] <mort> somethinrg like that
[23:23:03] <rpav> you should write a unique_locked_ptr though that only allows one non-const handle and one (or N) const handle if you really wanted
[23:23:04] <cbreak> should be somewhat possible to create
[23:23:52] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[23:24:12] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[23:24:27] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[23:25:06] <rpav> i don't see why it would be hard
[23:25:47] *** Joins: k8yun (~k8yun@user/k8yun)
[23:26:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Ping timeout: 252 seconds)
[23:27:16] <cbreak> I think I'd create some wrapper struct with the mutex and the object itself, and a lock() function which returns some handle, containing a unique_lock locking the mutex, and an overloaded operator* / operator-> to the main object, somewhow.
[23:27:42] <cbreak> so that on destruction of the handle, it'd unlock.
[23:30:01] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[23:30:08] <mort> https://godbolt.org/z/7zETqKeqd something like this
[23:30:58] <cbreak> mort: that has some bugs
[23:31:06] <cbreak> well. Problems.
[23:31:13] <mort> probably true. Which ones are you thinking about?
[23:31:18] <mort> I just threw it together just now
[23:31:38] <cbreak> if you used unique_lock in the handle, the handle would become naturally uncopyable
[23:31:56] <cbreak> and properly movable
[23:32:09] <mort> that makes sense
[23:32:13] <cbreak> for now, it is copyable, which would double unlock
[23:32:16] <mort> yeah
[23:32:26] <mort> might want lock_guard tho, no need to do the runtime check
[23:32:37] <cbreak> this is why I prefer to compose my inventions with stdlib primitives
[23:32:50] <cbreak> the c++ standard library is one of its greatest assets, might as well use it to avoid bugs :)
[23:33:12] <cbreak> lock_guard is more restrictive
[23:33:23] <mort> if we have a unique_lock/lock_guard in LockedRef though, we're carrying around an unnecessary pointer to the mutex in addition to the pointer to the parent
[23:33:23] <cbreak> you'd give up on movability I thik. Maybe no big deal.
[23:33:39] <cbreak> one additional pointer? no big deal for sure.
[23:33:49] <cbreak> also, I wouldn't have a pointer to the parent
[23:33:54] <cbreak> I'd have a pointer to the object itself
[23:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:34:15] <mort> if this was some core piece of infrastructure used everywhere I would prefer if the struct was the size of 1 pointer rather than 2
[23:34:26] <mort> (or the size of 3 pointers in the case of unique_lock)
[23:34:29] <cbreak> having a pointer to the object itself has several advantages
[23:34:42] <cbreak> mort: it's a scope guard
[23:34:44] *** Quits: DrMax_ (~DrMax@132.215.96.30) (Remote host closed the connection)
[23:34:46] <cbreak> it will exist on the stack
[23:34:55] <cbreak> a few pointers more or less are irrelevant
[23:35:13] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[23:35:24] <cbreak> anyway: advantages of pointing to the object instead of the parent:
[23:35:51] <mort> I agree that in my code base, it would probably be better to have the two pointers; but if this was in the stdlib I would expect implementations to use the 1-pointer solution
[23:35:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:35:53] <cbreak> you can lock a sub-part of an object. Like locking a std::string name field in a struct Employee
[23:36:04] <cbreak> mort: no
[23:36:16] <cbreak> mort: I'd expect them to have a multi-pointer solution
[23:36:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:36:26] <cbreak> because that's what they do for shared_ptr too
[23:36:37] <mort> shared_ptr *has to be* multi-pointer though, right?
[23:36:47] <mort> it *needs* one control block that's separately allocated from the object
[23:36:47] <cbreak> not really. But it's better if it is.
[23:37:20] <cbreak> you could put the pointer next to the control block
[23:37:26] <mort> you couldn't have an API where you can have some arbitrary pointer and put it in a shared_ptr, without a two-pointer solution
[23:37:28] <cbreak> then your shared_ptr would only be size 1ptr
[23:37:33] <cbreak> but that'd be slower
[23:37:43] <cbreak> since you'd have a double-indirection on every access
[23:38:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:38:17] <cbreak> also, it wouldn't allow for having dependent pointers
[23:38:26] <mort> right, you could put the object pointer in the control block, but as you say that has runtime costs, the one-pointer solution in the LockedRef has the same runtime performance characteristics, and half or 1/3 as much memory use which also means better cache utilization
[23:38:37] <cbreak> similarly, having pointer-to-value instead of pointer-to-parent would allow dependent locking
[23:38:53] <cbreak> cache utilization is irrelevant
[23:38:54] <mort> it's not a big difference for sure but I would expect libstdc++ to use a 1-pointer solution for std::shared_ptr if it wasn't slower
[23:38:58] <cbreak> since this is meant to be on the stack
[23:39:07] <cbreak> not live in some dense container
[23:39:32] <mort> very likely true, but not something I feel like a stdlib would assume
[23:39:33] <cbreak> besides: we can easily make it faster too
[23:39:58] <cbreak> hmm...
[23:40:39] <cbreak> well, depends on whether we want to force the object to be inside the same block as the mutex, or not
[23:40:41] <mort> now, I don't think it's right that the 2-pointer solution lets you lock a field of a bigger structure, unless that field is a Lockable<T>, in which case you could also do that with the 1-pointer solution
[23:40:56] <cbreak> similarly to how make_shared is an option, but could be mandatory
[23:41:10] <cbreak> mort: it does
[23:41:12] <mort> well
[23:41:32] <cbreak> I could lock a member with an additional lock fuction
[23:41:38] <mort> you could have a struct Employee with one mutex and a bunch of other fields, and you could then create a LockedRef which locks that one shared mutex and gives access to a single member
[23:41:41] <cbreak> which returns a lock handle owning the mutex lock
[23:41:44] <johnny> uggh.. i sure do wish i wasn't printf debugging :(
[23:41:45] <cbreak> and a pointer to the member
[23:41:52] <cbreak> johnny: could be worse.
[23:42:01] <cbreak> you could do blinky-led debugging, or osciloscope debugging
[23:42:08] <johnny> i'm doing both of those things also
[23:42:14] <cbreak> fun times.
[23:42:15] <mort> like `struct Employee { std::string name; int age; std::string title; std::mutex mut; };` and `LockedRef<std::string>{&employee.name, &employee.mut}`
[23:42:17] <johnny> well not really oscilliscope i guess
[23:42:28] <johnny> i am using it to see that the signal i expect isn't hppening
[23:43:03] <udet> whats the trougle with "template<T> class foo { friend class T; };"?
[23:43:09] <udet> trouble
[23:43:12] <johnny> got a new little devboard with an equivalent chip, but i ain't getting any output with i2s
[23:43:13] <cbreak> mort: having a Lockable Employee
[23:43:28] <cbreak> mort: and a LockedRef locking said employee, but containing a pointer to name only
[23:43:47] <mort> right
[23:43:52] <cbreak> mort: I'm modeling this idea in my head on the same functionality in std::shared_ptr
[23:44:00] <johnny> and the i have the swd cable for a proper debugging experience, but.. there's no connector for it. i have to order a breakout :(
[23:44:07] <mort> you would be locking all fields in order to view/modify only one
[23:44:14] <mort> but that might be worth it
[23:44:18] <cbreak> in particular the aliasing constructor https://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr
[23:44:34] <mort> if it's infrequently locked and has many fields and you don't want to pay for the space of one mutex per member
[23:44:49] <cbreak> johnny: soldering time :D
[23:45:07] <johnny> i'd totally destroy that cable trying to split out the pins.. it's too thin
[23:45:18] <cbreak> mort: not just space
[23:45:31] <cbreak> more mutexes means you have to deal with mutex ordering, or possible deadlocks
[23:45:36] <mort> right, true
[23:45:55] <johnny> i just don't have anyhing to plug it into.. no 10 pin header with the proper spacing
[23:46:25] <mort> cbreak: but wouldn't it make sense to just get a LockedRef<Employee>
[23:46:30] <mort> so you have access to all the fields
[23:46:49] <cbreak> mort: maybe...
[23:46:54] <cbreak> but... maybe not.
[23:47:00] <mort> I mean maaybe you would sometimes give some other piece of code access to the name, and let it keep the lock for some time after the function call but not give it ownership
[23:47:09] <cbreak> for example, imagine a function that takes a locked ref as parameter
[23:47:17] <mort> yeah
[23:47:19] <cbreak> one that works only on locked string refs
[23:47:36] <cbreak> personally, I wouldn't do it like this
[23:47:50] <cbreak> I'd decouple the lockedness from the code that does string stuff
[23:48:00] <cbreak> the string stuff functions can get plain refs
[23:48:08] <cbreak> and lockedness is only handled at the boundaries
[23:48:28] <johnny> i'd say the naming screws up how i can properly think of it :(
[23:48:40] <johnny> proper naming is important
[23:48:53] <mort> I agree, I also personally wouldn't do it like that, but it is a use-case which is only made possible by having two pointers
[23:49:22] <johnny> probably best to use a real example in which you need 2 pointers rather than contrived one
[23:49:49] <johnny> real code trumps all
[23:49:49] <mort> I mean it's a real example, if a bit abstract
[23:53:16] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[23:57:48] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
