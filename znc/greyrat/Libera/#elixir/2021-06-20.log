[19:27:53] *** Joins: hpox_ (~hpox@modemcable196.1-82-70.mc.videotron.ca)
[19:29:04] *** Quits: hpox (~hpox@modemcable196.1-82-70.mc.videotron.ca) (Ping timeout: 265 seconds)
[20:31:55] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[20:33:28] *** Joins: chenghiz_ (uid349735@id-349735.charlton.irccloud.com)
[20:38:00] *** Quits: mercerist (~mercerist@user/mercerist) (Read error: Connection reset by peer)
[20:38:36] *** Joins: mercerist (~mercerist@user/mercerist)
[20:54:19] *** Joins: Celeo (~Celeo@user/celeo)
[20:59:41] <hmans> Nicd: will the entire struct, by definition, not be changed?
[21:00:22] <hmans> ie. if something changes deep inside it, all parents must also be changed, immutability and all. Right?
[21:00:35] *** Quits: Snyp (~rksht@49.207.194.192) (Ping timeout: 258 seconds)
[21:00:38] <hmans> It's just individual branches that will remain unchanged.
[21:04:10] *** Joins: Rubyn (~Rubyn@94.19.170.70)
[21:05:15] *** Quits: Rubyn (~Rubyn@94.19.170.70) (Changing host)
[21:05:15] *** Joins: Rubyn (~Rubyn@user/rubyn)
[21:13:55] <Nicd> hmans: obviously due to immutability it will be semantically a different struct
[21:14:21] <Nicd> but it's pretty limiting if we can't track changes inside structs
[21:16:10] *** Joins: hpox (~hpox@modemcable196.1-82-70.mc.videotron.ca)
[21:17:46] *** Quits: hpox_ (~hpox@modemcable196.1-82-70.mc.videotron.ca) (Ping timeout: 265 seconds)
[21:18:02] <hmans> Nicd: what are you trying to accomplish?
[21:18:11] <Nicd> smaller diffs
[21:18:45] <hmans> As far as I know/remember, the diffs should only contain the changed bits (with information about their nesting)
[21:19:45] <hmans> I've definitely managed to achieve super-small diffs with my LiveView-powered 3D world, but it's been a few months and I would not remember the intricacies.
[21:22:06] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[21:22:39] <Nicd> it also includes all the non-changed data
[21:22:46] <Nicd> well, in many places
[21:38:48] <hmans> It's been too long. I just remember that I was facing the same issue and managed to tweak it to get the sort of diffs I was expecting from LV.
[21:39:07] <Nicd> for example I have a user struct
[21:39:24] <Nicd> the struct is not changed in any way, but it's always re-rendered
[21:39:43] <Nicd> I wonder if it's my usage of `assign`, even if the value did not change
[21:45:42] *** Joins: hpox_ (~hpox@modemcable196.1-82-70.mc.videotron.ca)
[21:47:04] <hmans> Nicd: I remember my optimizations largely revolved around the use of stateful live components by giving them an ID
[21:47:15] *** Quits: hpox (~hpox@modemcable196.1-82-70.mc.videotron.ca) (Ping timeout: 265 seconds)
[21:47:16] <hmans> I am probably remembering things wrong.
[21:47:36] <hmans> But if I had to guess, only a stateful component might have a chance of comparing its previous state against a new one, right?
[21:47:53] <hmans> While a stateless component would always rerender, no matter what, causing more stuff to end up in the diff.
[21:48:02] <hmans> I'm just guessing. I hardly remember most of these things. :S
[21:48:15] <hmans> (Have been off Elixir for the past 4-5 months, unfortunately)
[21:49:43] <Nicd> all of mine are stateless
[21:50:38] <hmans> That might be related, but seriously, I'm just talking out of my ass and probably saying wrong things. It's just the one thing I think I remember.
[22:00:19] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[22:05:06] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 240 seconds)
[22:55:33] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[23:01:56] *** Joins: biozz (~biozz@178.57.22.163)
[23:11:14] *** Quits: thojanssens__ (~thojansse@ptr-178-51-147-253.dyn.mobistar.be) (Quit: Leaving)
[23:11:32] *** Joins: thojanssens (~thojansse@ptr-178-51-147-253.dyn.mobistar.be)
[23:12:15] *** Quits: biozz (~biozz@178.57.22.163) (Quit: Leaving...)
[23:13:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[23:13:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:29:57] *** Quits: rahul_j (~rahul_j@49.37.168.72) (Remote host closed the connection)
[23:33:08] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:33:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:34:24] *** Quits: mercerist (~mercerist@user/mercerist) (Quit: mercerist)
[23:35:10] <josevalim> Nicd: we don't change tracking inside maps and structs.but if you through a list at the top, then we can't anymore
[23:35:18] <josevalim> because we would need to track IDs and stuff
[23:35:23] <josevalim> the goal is to have a collection aware helper in the future
[23:35:59] <Nicd> 22:05:10 <josevalim> Nicd: we don't change tracking inside maps and structs.but if you through a list at the top, then we can't anymore
[23:36:06] <Nicd> I don't understand this message
[23:36:14] <josevalim> sorry, i don't understand it either
[23:36:17] <josevalim> it was meant to be
[23:36:26] <josevalim> *we do change tracking inside maps and structs
[23:36:53] <Nicd> Ah, thanks :)
[23:37:08] *** Joins: hpox (~hpox@modemcable196.1-82-70.mc.videotron.ca)
[23:37:16] <Nicd> My data is somewhat involved in many places
[23:38:29] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:38:54] *** Quits: hpox_ (~hpox@modemcable196.1-82-70.mc.videotron.ca) (Ping timeout: 265 seconds)
[23:39:13] <Nicd> Often something like `[{"Foo", %{id: 1, xp: 150, new_xp: 47}}, ...]` with the xp values being subject to change
[23:39:56] <josevalim> if you move each of them inside a stateful component, using "Foo" as a key, then it works
[23:40:12] <Nicd> Ah, now they're all stateless
[23:40:31] <Nicd> Would be a lot of stateful components
[23:41:01] <Nicd> 365 for my year table alone, but that's the biggest one
[23:41:09] <Nicd> 366*
[23:49:58] *** Joins: pera (~pera@user/pera)
