[00:00:44] *** Joins: badone (~badone@209.132.189.152)
[00:01:42] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[00:09:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[00:14:57] *** Quits: Tokamak_ (~Tokamak@172.58.191.77) (Ping timeout: 240 seconds)
[00:18:11] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[00:23:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[00:28:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[00:39:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[00:42:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:43:01] *** Joins: seninha (~seninha@user/seninha)
[00:44:21] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 268 seconds)
[00:49:59] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[00:54:47] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[00:56:30] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[00:57:26] *** namo is now known as nomo
[00:57:39] *** nomo is now known as namo
[01:01:32] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 240 seconds)
[01:02:42] *** Quits: user334 (~user@p200300cdb7070300c528c51e94837680.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[01:03:16] *** Joins: plastico (~plastico@neomutt/plastico)
[01:05:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[01:09:27] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[01:12:37] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[01:13:33] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Client Quit)
[01:15:32] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:15:48] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:16:04] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:19:23] *** Joins: Tokamak_ (~Tokamak@107.116.82.115)
[01:20:44] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[01:21:18] *** Quits: proller (~p@2a02:6b8:b081:7212::1:5) (Ping timeout: 260 seconds)
[01:21:21] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:23:15] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[01:24:14] *** Quits: Tokamak_ (~Tokamak@107.116.82.115) (Ping timeout: 256 seconds)
[01:24:58] <rpav> qt layouting stuff is just so bad, and not in a good way
[01:26:15] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:36:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[01:38:34] *** Joins: CaCode (~CaCode@user/cacode)
[01:39:35] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[01:39:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[01:39:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:56] *** ChanServ sets mode: +v npaperbot
[01:43:23] *** Joins: markong (~kvirc@213.146.188.203)
[01:48:04] *** Quits: magla (~gelignite@55d4e80d.access.ecotel.net) (Quit: Stay safe!)
[01:53:35] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:58:36] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[02:01:52] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:04:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:04:37] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[02:07:05] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:07:59] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[02:09:43] *** Joins: CaCode_ (~CaCode@user/cacode)
[02:12:24] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[02:12:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[02:15:02] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[02:22:01] <johnny> i'm surprised to hear that
[02:22:11] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:23:29] *** Joins: teepee (~teepee@openscad/teepee)
[02:24:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:26:54] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[02:28:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[02:29:06] *** Joins: Tokamak_ (~Tokamak@166.205.152.147)
[02:30:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:30:44] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:31:39] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[02:32:59] *** Joins: teepee (~teepee@openscad/teepee)
[02:35:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[02:49:04] *** Joins: ferdna (~ferdna@user/ferdna)
[02:53:00] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:55:14] *** Joins: cq-work (~Z_Lund@user/cq-work)
[02:55:32] <cq-work> Anyone here ever develop with Linux containers?
[02:55:42] *** Quits: Tokamak_ (~Tokamak@166.205.152.147) (Ping timeout: 268 seconds)
[03:00:13] *** Joins: Tokamak (~Tokamak@166.205.152.147)
[03:00:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:03:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:04:39] *** Joins: Hokedli (~laslie@gateway/tor-sasl/hokedli)
[03:07:09] <very_sneaky> cq-work: a little bit
[03:09:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:11:24] <very_sneaky> PJBoy: colony sounds too oppressive
[03:11:57] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[03:16:39] <PJBoy> tell that to the ants
[03:17:36] <PJBoy> it's fine to talk about colonies when you're discussing ants
[03:17:46] <PJBoy> and so it should be when talking about a C++ container too
[03:17:56] <PJBoy> there's nothing human about it AFAIK
[03:17:57] * Alipha writes a std::colony factory called colony_queen
[03:18:27] <PJBoy> that said I think colony is a bad name for a slew of other reasons
[03:19:06] *** Quits: Hokedli (~laslie@gateway/tor-sasl/hokedli) (Ping timeout: 276 seconds)
[03:20:11] <Alipha> std::bag
[03:21:02] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:24:03] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[03:24:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:25:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[03:26:37] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 240 seconds)
[03:31:46] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b9b9:658d:369d:1685) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:36:57] *** Quits: Tokamak (~Tokamak@166.205.152.147) (Ping timeout: 240 seconds)
[03:38:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:40:48] *** Joins: Tokamak (~Tokamak@172.58.188.156)
[03:41:29] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Read error: Connection reset by peer)
[03:42:25] *** AbleBacon_ is now known as AbleBacon
[03:43:10] *** Joins: Tokamak (~Tokamak@172.58.188.156)
[03:43:48] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:45:58] *** Joins: Tokamak_ (~Tokamak@107.116.82.132)
[03:48:10] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Ping timeout: 256 seconds)
[03:51:50] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:961:e816:8c8d:54a1) (Ping timeout: 268 seconds)
[04:08:41] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[04:09:07] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:12] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[04:12:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:14:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[04:17:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[04:18:42] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:21:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:29:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:30:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:31:14] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[04:33:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:34:09] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:39:01] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:42:35] *** Joins: msk (~msk@103.213.213.70)
[04:43:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:48:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:56:04] <lru> std::bag man;
[05:02:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:08:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[05:15:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:17:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:19:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:23:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[05:26:32] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 240 seconds)
[05:29:12] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:30:16] <Raziel> {constexpr std::string derp = "Derp"; cout << derp;}
[05:30:16] <geordi> error: 'string{string::_Alloc_hider{((char*)(& derp.string::<anonymous>.string::<unnamed union>::_M_local_buf))}, 4, string::<unnamed union>{char [16]{'D', 'e', 'r', 'p', 0}}}' is not a constant expression
[05:30:28] <Raziel> well cppreference says it is. |:
[05:33:06] *** Quits: adeliktas (~adeliktas@i59F52B3A.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[05:33:15] *** Joins: adeliktas (~adeliktas@i59F52B3A.versanet.de)
[05:37:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:39:48] *** Quits: phoenix (~phoenix@user/phoenix) (Ping timeout: 256 seconds)
[05:39:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:57] *** ChanServ sets mode: +v npaperbot
[05:40:52] *** Joins: phoenix (~phoenix@user/phoenix)
[05:41:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[05:42:36] <johnny> what C++ mode does geordi use?
[05:42:36] <Alipha> { cout << foo(); } constexpr string foo() { string derp = "Derp"; return derp.size(); }
[05:42:36] <geordi> error: could not convert 'derp.string::size()' from 'string::size_type' {aka 'long unsigned int'} to 'string' {aka 'string'}
[05:43:13] <johnny> if it's not C++20 then it shouldn't work at all right?
[05:43:16] <Alipha> { constexpr size_t f = foo(); cout << f; } constexpr size_t foo() { string derp = "Derp"; return derp.size(); }
[05:43:17] <geordi> 4
[05:43:20] <johnny> well C++20 or above*
[05:44:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:45:00] <johnny> i know geordi uses some in development version of gcc 12, but i don't know if gcc 12 even added constexpr strings yet?
[05:45:02] <johnny> did they?
[05:45:25] <RandomReader> geordi uses the current implementing lang by default (pre-standard)
[05:45:26] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 252 seconds)
[05:45:31] <RandomReader> and yes, Alipha's last example shows that
[05:45:57] <RandomReader> Raziel's original example isn't valid in C++20, because constexpr strings must live entirely within a constexpr context
[05:46:01] <johnny> ah
[05:46:10] <RandomReader> (so e.g. wrapped in a constexpr function, not stored in a constexpr variable)
[05:46:29] <RandomReader> the broader rule is that any dynamic allocation in a constexpr context must die in the same context
[05:46:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:46:37] <RandomReader> it can't carry over to runtime
[05:46:59] <RandomReader> or: compile time memory is not runtime memory
[05:47:29] <johnny> you're answering a question i didn't ask
[05:48:10] <RandomReader> it's what I'm guessing Raziel wanted to know
[05:48:39] <johnny> the answer seems to be that yes.. constexpr std::string does work in gcc 12, and that the version of the std that geordi defaults to must be c++20 or above (with or without gnu extensions)
[05:51:12] <johnny> RandomReader, so thanks to you i got a tiny bit more confident in my ability to try to do something totally ridiculous
[05:51:27] <johnny> it probably won't work, but .. i guess it'll be fun
[05:52:53] <RandomReader> hehe
[05:53:22] <Raziel> RandomReader, well shiet. string_view it is then eh
[05:53:22] <johnny> i'm sure it's acutally overconfidence, but i'm gonna try to implement DwmExtendFrameIntoClientArea in wine
[05:54:17] <kalven> I'm rooting for oyu
[05:55:02] <RandomReader> hah, have fun!
[05:55:11] <Raziel> speaking of string_view, is there any point in passing it by reference like I was doing for the strings?
[05:55:16] <RandomReader> (I've never actually seen Wine's codebase, so no clue what that's going to be like)
[05:55:40] <johnny> i didn't even know that was a question until recently Raziel but people have been saying weird stuff about that on r/cpp and other places
[05:55:49] <johnny> i've been passing it by value in the few places i used it
[05:55:59] <RandomReader> no, since string_view is already a lightweight view object, I'd treat it with value semantics
[05:56:24] <Raziel> that's what I thought
[05:56:25] <RandomReader> if there's a place you *wouldn't* pass a string by reference, that'd be a place to not use string_view at all
[05:56:34] <Raziel> I mean I imagine reference will *work* just fine, but
[05:56:45] <Raziel> all those places I was passing const std::string&
[05:56:52] <Raziel> so I should make them const std::string_view, prolly
[05:57:13] <johnny> RandomReader, interesting things are afoot in wineland that's for sure.. especially since mac os doesn't have any 32bit support at all!
[05:57:32] <RandomReader> the const wouldn't mean anything to callers, so for that follow your function-local-variable preference
[05:57:34] <johnny> it's all gone
[05:59:12] <RandomReader> yeah, last time I was doing a thing on my personal mac, I ended up using the full CrossOver for a bit since it covered 32bit
[06:00:27] <johnny> right now in linux you still need 32bit libs to run 32bit wine apps on linux, but that won't be the case much longer
[06:00:42] <Alipha> You might pass a string_view by non-const reference...
[06:00:44] <johnny> all the dlls and exes are proper PE
[06:00:59] <Raziel> RandomReader, right. the whole string_view thing is, I suppose, a little bit confusing to me. in the "why does it exist" way. I've mostly always just passed around std::string by ref
[06:01:04] <johnny> or rather.. will be*
[06:01:49] <Raziel> does a string auto cast to string_view if needed? like...
[06:01:55] <RandomReader> Raziel - string_view is basically an "array view" tailored to strings, it's useful because it has implicit creation from std::string, char*, etc
[06:02:22] <RandomReader> so it's more general/useful as a function param
[06:02:23] <Raziel> right
[06:02:36] <smallville7123> imma just stick to ASCII and just error out on any non ASCII byte encountered
[06:02:38] <RandomReader> otherwise to be equivalently lightweight, you need several overloads
[06:02:46] <Raziel> so pretty much all my functions that were taking const std::string& should probably just take string_view
[06:03:03] <RandomReader> probably, with the notable exception of interacting with C APIs
[06:03:17] <Raziel> does it not offer a similar .c_str?
[06:03:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdb2:1444:46f4:adc7) (Ping timeout: 240 seconds)
[06:03:23] <RandomReader> because it's effectively an array slice kind of thing, it has no zero terminator, so you'd still need a full std::string for that
[06:03:35] <Raziel> ah
[06:03:46] <RandomReader> (the original thing you made the string_view from might, but it has no way of knowing that)
[06:04:02] <RandomReader> another place I've used it is as a tokenizer
[06:04:14] <RandomReader> make a vector of string_views for command and args, kind of thing
[06:04:24] <johnny> RandomReader, you saying that changes how i might have done something. i didn't think about abusing the lack of the nul terminator
[06:04:46] <Raziel> it also seems to be useful in my case of "holding some constexpr text properly"
[06:04:57] <Raziel> yes, I know, data in cpp code, bleh. :p
[06:04:58] <johnny> and that actually did matter in some code i was writing
[06:05:35] <RandomReader> yeah I was writing some trivial code the other day, and using string_view.substr was oddly freeing
[06:05:48] <RandomReader> like JS, except without the BS :D
[06:06:26] <RandomReader> and remove_prefix()/remove_suffix()
[06:08:05] <johnny> have you ever written any ruby?
[06:08:33] <RandomReader> no, I've seen bits of it but never had the desire to dig into it
[06:08:49] <johnny> funnest code i've ever written indeed
[06:09:56] <johnny> for how not used it was in many areas.. it was really influential in some specific areas..web dev (via sinatra and rails respectively) and testing (rspec, and cucumber)
[06:10:26] <johnny> which is how we ended up with stuff like gtest even in C++ land
[06:10:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:11:58] <RandomReader> seems like Rails made CRUD frameworks popular
[06:12:34] <RandomReader> I wasn't exactly paying attention to that space, but that's one of the things I remember there being buzz about
[06:13:47] <johnny> crud frameworks were already popular. the real revolution was in how it was done
[06:14:15] <johnny> convention over configuration  with lots of work done for you, and then there was stuff like 12factor apps that came from it via stuff that ran rails applications like heroku
[06:15:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[06:15:38] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[06:16:12] <johnny> sinatra made micro webframeworks popular. nobody could really tell how easy it was until all the extra was stripped away. the ruby language made it really easy to express and show. even to folks who didn't write ruby
[06:16:21] <johnny> myself being one of them
[06:17:30] *** Joins: malloy (~jimery@116.30.221.255)
[06:18:24] <johnny> the optional parens for function arguments really did a lot of work there
[06:38:49] *** Joins: adeliktas8 (~adeliktas@i59F52042.versanet.de)
[06:40:30] *** Quits: adeliktas (~adeliktas@i59F52B3A.versanet.de) (Ping timeout: 260 seconds)
[06:40:30] *** adeliktas8 is now known as adeliktas
[06:44:55] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:47:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:49:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[06:50:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:152:f162:2b1b:5a42) (Quit: Quit)
[06:52:34] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:03:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:04:23] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[07:07:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[07:08:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:10:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:15:03] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[07:15:04] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:17:39] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[07:20:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:25:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[07:33:54] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1946:a1aa:47c7:df0a)
[07:37:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:38:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1946:a1aa:47c7:df0a) (Ping timeout: 240 seconds)
[07:42:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:43:36] *** Quits: adeliktas (~adeliktas@i59F52042.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[07:44:09] *** Joins: adeliktas (~adeliktas@i59F52042.versanet.de)
[07:45:32] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[07:47:12] *** Quits: adeliktas (~adeliktas@i59F52042.versanet.de) (Client Quit)
[07:52:04] *** Joins: adeliktas (~adeliktas@i59F52042.versanet.de)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:03:24] *** Joins: smeso (~smeso@user/smeso)
[08:13:24] *** Quits: traxex (~traxex@user/traxex) (Remote host closed the connection)
[08:15:05] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:16:32] *** Joins: ravan (~ravan@user/ravan)
[08:20:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[08:20:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[08:26:50] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:29:05] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:29:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:30:26] *** Joins: aniketgm (~Aniket@49.36.109.33)
[08:33:01] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:41:57] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:43:52] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[08:55:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:55:29] *** Quits: beanzilla (beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[08:55:29] *** Quits: notEVIL (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[08:56:30] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[08:56:33] *** Joins: notevil (~notevil@user/notevil)
[08:56:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:27:07] *** Quits: aniketgm (~Aniket@49.36.109.33) (Read error: Connection reset by peer)
[09:27:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:29:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[09:31:29] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:39:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:57] *** ChanServ sets mode: +v npaperbot
[09:55:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:05:07] *** Quits: aniketgm (~Aniket@49.36.109.33) (Read error: Connection reset by peer)
[10:09:53] <KombuchaKip> This should create a vector of floats of 29 elements, each initialized to 0.0f. Or is my assumption on the latter wrong? vector<float> foo(29)
[10:10:11] <kalven> that is correct
[10:10:35] * KombuchaKip nods
[10:12:57] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:23:27] *** Joins: aniketgm (~Aniket@49.36.109.33)
[10:23:30] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:23:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:27:22] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:27:44] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:30:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[10:31:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:31:40] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:35:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:40:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:42:49] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[10:42:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:46:41] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[10:47:32] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[10:55:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:56:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:57:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[10:58:16] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:08:53] *** Joins: kaph (~kaph@151.35.8.156)
[11:11:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[11:15:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:16:39] *** Joins: namo (~nomo@95.87.208.95)
[11:16:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[11:17:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:25:19] *** Quits: kaph (~kaph@151.35.8.156) (Remote host closed the connection)
[11:26:12] *** Quits: namo (~nomo@95.87.208.95) (Quit: Leaving)
[11:26:25] *** Joins: namo (~nomo@95.87.208.95)
[11:28:33] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:34:26] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:36:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:39:39] *** Quits: gothicserpent (~gothicser@89.45.90.225) (Quit: Leaving)
[11:44:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:52:08] *** Joins: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001)
[11:53:32] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:56:58] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[12:05:32] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d1a:ba44:ae3c:70ae)
[12:15:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:18:19] *** Joins: robod34 (Username@79.113.195.239)
[12:18:20] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[12:20:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:23:46] *** Joins: asen (~asen@2408:821a:618:18f0:8897:d604:5f77:77c9)
[12:29:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[12:31:00] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[12:31:25] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:34:38] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:50] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[12:36:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:37:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:40:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:46:17] *** Joins: plastico (~plastico@neomutt/plastico)
[12:52:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[13:03:40] <Haohmaru> https://godbolt.org/z/5K7z5nv8s my compressor after some bug fixes and enhancements
[13:03:47] <Haohmaru> this is "RLE" type, right?
[13:03:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[13:05:05] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[13:06:23] <LordKalma> johnny, I use Django for my REST frameworking :P
[13:16:23] *** Joins: |7| (~seachdamh@user/seachdamh)
[13:20:37] *** Quits: |7| (~seachdamh@user/seachdamh) (Client Quit)
[13:21:05] *** Joins: |7| (~seachdamh@user/seachdamh)
[13:22:30] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:32:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:39:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:58] *** ChanServ sets mode: +v npaperbot
[13:46:19] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:48:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:55:45] *** Joins: MarcoFe (~marcofe@5.170.16.125)
[14:00:31] *** Quits: MarcoFe (~marcofe@5.170.16.125) (Client Quit)
[14:01:59] <kapil> tomorrow is my interview for c++ job! what should I prepare today?
[14:02:08] <LordKalma> you anus
[14:02:23] * Haohmaru washes LordKalma's mouth with a soap
[14:03:08] <PJBoy> !interviewquestion
[14:03:08] <nolyc> PJBoy: Error: "interviewquestion" is not a valid command.
[14:03:11] <PJBoy> bah
[14:03:25] <LordKalma> what's that website with all the gotcha c++ questions?
[14:03:27] <Haohmaru> !iq
[14:03:28] <nolyc> Haohmaru: Error: "iq" is not a valid command.
[14:03:32] <PJBoy> cppquiz
[14:04:03] <Haohmaru> what if they ask you normal questions instead? ;P~
[14:04:10] <PJBoy> that site that probably not enough people realize isn't serious >_>
[14:04:14] <Haohmaru> ..and you've prepared for all the gotchas
[14:04:22] <LordKalma> read all the fizzbuzz implementations
[14:05:43] <very_sneaky> leetcode/hackerrank?
[14:06:07] <very_sneaky> also, LordKalma why django over something more barebones like flask or fastapi?
[14:06:18] <LordKalma> the django-admin panel <3
[14:06:29] <LordKalma> and automatic browsable api <3
[14:06:42] <LordKalma> and good and automatic handling of auth/cors/whatever you might need <3
[14:06:55] <Haohmaru> what if they ask you "which editor you use?"
[14:06:59] <kapil> PJBoy, thanks
[14:07:01] <Haohmaru> you're f*cked
[14:07:09] <PJBoy> thanks for what?!
[14:07:14] <kapil> cppquiz
[14:07:22] <PJBoy> no
[14:07:25] <LordKalma> HE LITERALLY SAID IT'S IRONIC
[14:07:25] <PJBoy> don't thank me for that
[14:08:03] <PJBoy> yeah that website is for people to make fun of C++ language lawyerism
[14:08:13] <PJBoy> a worthy cause
[14:08:16] <very_sneaky> LordKalma: interesting. maybe i'll have to tkae another look at it. i've had really good experiences with flask though
[14:08:42] <very_sneaky> for those of you not tracking, cppcon is putting up cppcon 2021 videos now
[14:08:52] <LordKalma> yap
[14:08:57] <LordKalma> TWO of them by Straustrup
[14:09:03] <very_sneaky> yep
[14:09:06] *** Joins: r-g (~r-g@51.159.55.86)
[14:09:09] <LordKalma> one of them titled something like "c++, finally getting good" :p
[14:09:13] <LordKalma> but politically corrected :p
[14:09:22] <very_sneaky> C++20: Reaching for the Aims of C++
[14:09:25] <very_sneaky> lol
[14:09:53] <very_sneaky> i saw that bloomberg have their own package manager that they did a talk about too
[14:10:00] <very_sneaky> or, the lessons they learnt from packaging their packages
[14:11:45] <Haohmaru> kapil what kind of C++ job?
[14:12:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:13:46] <kapil> https://gist.github.com/kapilpipaliya/f44467719b6e856c55c3df6e78bf98d0
[14:14:35] <Haohmaru> kinda generic
[14:15:03] <Haohmaru> "knowlage of the latest C++11 ..."
[14:15:23] <LordKalma> latest C++11?!
[14:15:24] <LordKalma> wtf
[14:15:30] <LordKalma> are there many C++11s?
[14:15:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:15:35] <kapil> thanks.do i need to know which syntax is in which version?
[14:15:36] <Haohmaru> component datasheets.. is this electronics too now?
[14:15:46] <LordKalma> Haohmaru, maybe embedded
[14:16:12] <Haohmaru> so then probably just MCU/CPU datasheets.. tho those are the fattest ones
[14:16:21] <kapil> I dont have knowledge of component data sheets and specifications
[14:16:29] <kapil> what is it?
[14:16:36] <LordKalma> kapil, you've seen one of them, you've seen them all
[14:16:58] <LordKalma> what they mean is that if you can program from a datasheet :)
[14:17:02] <LordKalma> I do that all the time at work
[14:17:14] <LordKalma> grab programming manuals from very expensive equipment from the 90s
[14:17:16] * Haohmaru is mostly doing baremetal so..
[14:17:26] <kapil> oh thanks
[14:17:33] <LordKalma> "let's look at this ancient language they call GPIB/VISA"
[14:17:43] <LordKalma> sometimes the programming just DOESN'T MAKE SENSE
[14:17:49] <Haohmaru> datasheets is #1 reason for turning this FullHD monitor in portrait mode
[14:18:06] <kapil> :)
[14:19:32] <PJBoy> Bjarne literally has the worst talks
[14:19:56] <PJBoy> you can replace all his videos with "C++ is a designed language"
[14:19:57] <Haohmaru> run clangd on his talks then
[14:20:36] <Haohmaru> or a vocoder
[14:29:08] <xkoncek> i have a proposed sytax for continuiing the outer loop: `break, continue;`
[14:30:18] <xkoncek> or maybe just a space
[14:32:17] <xkoncek> couldn't we make use of [[attributes]] to implement named loops?
[14:32:56] <xkoncek> while (true) [[name]] {... continue [[name]];...}
[14:33:58] <PJBoy> nah
[14:34:02] <PJBoy> attributes are ignorable
[14:34:54] <Haohmaru> why not a label ;P~
[14:35:14] <xkoncek> i am probably going to do that but labels can be confusing
[14:35:31] <xkoncek> bo i put them at the beginning of the loop or at the end?
[14:35:32] <Haohmaru> they smell like "goto"
[14:35:34] <xkoncek> *do
[14:35:43] <Haohmaru> tho "continue" smells like goto too, but more safe
[14:35:49] <xkoncek> if i call goto from the middle
[14:36:12] <xkoncek> i think a label at the beginning wont trigger for-loops end condition
[14:36:30] <PJBoy> I'm fine with the javascript syntax myself
[14:36:51] <xkoncek> which is...?
[14:36:56] <PJBoy> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label
[14:37:16] <PJBoy> basically a limited form of goto
[14:37:39] <PJBoy> except ofc it doesn't restart the loop
[14:37:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:38:08] <PJBoy> perl does that too
[14:38:13] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[14:38:38] <PJBoy> PHP has the `break 1` / `continue 2` syntax for breaking/continuing out of 1/2 levels of nesting
[14:38:43] *** Joins: eck (~root@user/eck)
[14:39:30] <xkoncek> that would be fine too
[14:39:47] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:39:52] <xkoncek> continue^^
[14:39:56] <PJBoy> I saw a proposal for python for this that used `break break` and `continue continue`
[14:40:14] <xkoncek> *wink* *wink*
[14:40:22] *** Quits: nshire (~nshire@user/nshire) (Read error: Connection reset by peer)
[14:40:43] <PJBoy> ofc in python you just use exceptions for control flow instead
[14:40:55] *** Joins: nshire (~nshire@user/nshire)
[14:41:06] <Haohmaru> how is the "throw" called in snek? "spit" ?
[14:41:14] <PJBoy> "raise"
[14:41:25] <PJBoy> for some reason
[14:41:29] <Haohmaru> "hiss" would've worked too
[14:42:14] <xkoncek> raise Hand
[14:42:29] <Haohmaru> sneks have no hands
[14:43:58] <Haohmaru> !fact
[14:43:59] <nolyc> Haohmaru: Operations involving indeterminate values may cause undefined behavior.
[14:44:55] <xkoncek> {int i; cout << i}
[14:44:56] <geordi> error: expected ';' before '}' token (fix known)
[14:44:59] <xkoncek> {int i; cout << i;}
[14:44:59] <geordi> warning: 'i' is used uninitialized
[14:45:57] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[14:46:05] *** Joins: ravan (~ravan@user/ravan)
[14:46:46] <Haohmaru> { int i; int x = i+1; }
[14:46:47] <geordi> Same warning.
[14:46:56] <leduyquang753> Smart bot.
[14:47:13] <johnny> well don't both js and python have "finally". if you have finally, you probably don't need to overuse goto right?
[14:47:14] <Haohmaru> of course, geordi is the preciousss
[14:47:59] *** Joins: pulse (~pulse@user/pulse)
[14:48:18] <Haohmaru> what's "finally" even
[14:49:03] <leduyquang753> C++ has enough tools to eclipse the need of `finally`.
[14:49:26] <PJBoy> finally is like short-term RAII
[14:49:56] <PJBoy> actually
[14:50:10] <PJBoy> is it? hahaha
[14:50:17] <PJBoy> I don't think I've ever used a finally before
[14:52:27] <xkoncek> basically all the non-RAII languages opted for some form of "try-with-resources" approach for managing non-memory (closable) resources
[14:52:57] <xkoncek> Python: `with open("file", "r") as f: ... (nested block)
[15:06:30] *** Joins: seninha (~seninha@user/seninha)
[15:06:36] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[15:06:41] <op0x0f05> If I'm writing a constructor which gets arguments and puts them in fields, should I use : foo { std::move(foo) } or just : foo { foo } ?
[15:06:45] <op0x0f05> It's not redundant right?
[15:07:25] <PJBoy> indeed
[15:07:30] <PJBoy> the former is better
[15:07:33] <op0x0f05> ok cool
[15:07:40] <PJBoy> assuming foo isn't an lvalue reference
[15:07:52] <LordKalma> if you used clang-tidy it'd tell you to use move :p
[15:08:00] <op0x0f05> i'm using clangd in coc.nvim
[15:08:05] <xkoncek> iterative tree traveral is a bit slower than a recursive one...
[15:08:12] <LordKalma> op0x0f05, so add --clang-tidy to its arguments ;)
[15:08:16] <PJBoy> you must be doing it wrong then :D
[15:08:24] <op0x0f05> oh cool i'll try it
[15:08:25] <xkoncek> i thought that saving those 20 stack frames might do something
[15:09:06] <PJBoy> well if the data from those stack frames end up on the heap
[15:09:13] <PJBoy> then that's likely to be a bit slower
[15:09:16] <LordKalma> op0x0f05, and you'll need a .clang-tidy file for you to enable and disable checks
[15:09:26] <LordKalma> PJBoy, and I can share ours if you're interested
[15:09:31] <xkoncek> on the other hand, each time it goes up one level, it has to find the index from where
[15:09:52] <very_sneaky> ugh, i feel like i've been to involved in the devops side of things and not enough the dev
[15:09:54] <PJBoy> mine's considerably more verbose
[15:10:15] <LordKalma> mine's considerably more agressive
[15:10:56] <xkoncek> i am pretty sure it is going to be clang-tidy that will solve the Halting problem and not even by trying to
[15:11:36] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:12:22] <LordKalma> hahahaha
[15:12:34] <LordKalma> xkoncek, I know we have a clang-tidy circle jerk
[15:12:36] <LordKalma> but it's *that* good
[15:12:48] <LordKalma> after I started using it it's very very rare I have bugs other than semantic bugs
[15:13:03] <op0x0f05> Wow it's really good
[15:13:24] *** Joins: kaph (~kaph@151.37.203.0)
[15:13:35] *** Joins: markong (~kvirc@213.146.188.203)
[15:13:37] <LordKalma> op0x0f05, https://github.com/ruilvo/aether_dsp/blob/master/.clang-tidy
[15:13:38] <LordKalma> this is mine
[15:13:49] <LordKalma> it enables almost everything, and you'll find it agressive
[15:13:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[15:13:56] <PJBoy> it literally caught one of our bugs that we made a whole jira issue for
[15:13:58] <LordKalma> disable the ones  you don't want after :)
[15:14:06] <PJBoy> and gave detailed information about it
[15:14:18] <PJBoy> and we were only able to get this bug to show symptoms on a specific VM
[15:14:21] <PJBoy> it was so annoying to debug
[15:14:26] <PJBoy> and clang-tidy just nailed it
[15:14:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:14:31] <op0x0f05> I just enabled modernize-*
[15:14:51] <LordKalma> disable modernize-use-trailing-return-type because it's annoying as fuck :p
[15:14:54] <LordKalma> unless you're into that
[15:14:56] <op0x0f05> yeah i already did
[15:15:11] <LordKalma> NO CLANG I DON'T WANT auto main() -> int
[15:15:22] <op0x0f05> yuck
[15:15:27] <PJBoy> I disabled modernize-use-nodiscard too
[15:15:34] <PJBoy> fuck that noise
[15:15:48] <LordKalma> hahaha
[15:15:53] <very_sneaky> does clang tidy work with visual studio?
[15:15:59] <PJBoy> yup
[15:16:04] <very_sneaky> nice
[15:16:06] <op0x0f05> LordKalma **includes are not sorted properly**
[15:16:11] <PJBoy> (that said, it only wants you add [[nodiscard]] to pure functions)
[15:16:33] <LordKalma> op0x0f05, my includes are always sorted correctly; https://github.com/ruilvo/aether_dsp/blob/master/.clang-format
[15:16:40] <LordKalma> L17
[15:17:02] <LordKalma> op0x0f05, just keep in mind you can disable warnings just for a line/file/section
[15:17:15] <op0x0f05> it's a bit extreme but I guess it gives consistency
[15:17:20] <LordKalma> https://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics
[15:17:23] <PJBoy> if you like scattering NOLINTs into your code >:(
[15:17:27] <LordKalma> hahaha I do :p
[15:17:49] <LordKalma> op0x0f05, welcome to the clang linting ecosystem :)
[15:18:01] <LordKalma> .clang-tidy + .clang-format and you'll be happy
[15:18:12] <op0x0f05> it's nice
[15:18:15] <LordKalma> and spend a working day just setting the perfect file :p
[15:18:45] <LordKalma> My include categories are basically the reason I started knowing any regex haha
[15:18:45] <PJBoy> here's my .clang-tidy fyi https://pastebin.com/3a111erd
[15:19:10] <LordKalma> PJBoy, oh man, you can put the checks as a vertical list, instead of a string
[15:19:11] <LordKalma> fuck
[15:19:13] <LordKalma> thanks
[15:19:32] <LordKalma> (op0x0f05, the file syntax is poorly documented)
[15:20:25] <PJBoy> the > token is used for declaring a multiline string
[15:20:32] <PJBoy> that's standard YAML
[15:20:32] <LordKalma> YAML <3
[15:20:55] <PJBoy> unfortunately you can't add comments on those lines
[15:21:05] <very_sneaky> i didn't realise yaml was a strict superset of json - that's pretty cool
[15:21:06] <PJBoy> nor can you put the commas at the start of the line rather than the end
[15:21:15] <PJBoy> it's weird like that
[15:22:05] <op0x0f05> reinterpret_cast
[15:22:05] <op0x0f05> Do not use reinterpret_cast
[15:22:25] <op0x0f05> i like it when the linter respects me
[15:24:22] <johnny> the real problem is how the yaml is used :(
[15:24:32] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:24:42] <johnny> there's no reason thec checks can't be used as a real yaml array with optional object for check options
[15:24:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:25:03] <mort> possibly unpopular opinion, but: I appreciate that C++ designated initializers forces me to use a consistent order and I think more systems should do that
[15:25:05] <johnny> no idea why they'd just NOT use yaml
[15:25:25] <johnny> what has the consistent order actually given you tho?
[15:25:58] <mort> consistency
[15:26:29] <LordKalma> very_sneaky, yaml 1.0 wasn't, but yaml 1.1 introduced the compat, and 1.2 fixed it
[15:26:39] <LordKalma> so yeah, any json file can be parsed with a yaml parser
[15:26:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:26:59] <LordKalma> I didn't know that before I installed a json parser in python, while the stdlib has a yaml parser *facepalm*
[15:27:07] <mort> it's like having an auto formatter or a linter, consistency is a virtue in and of itself
[15:27:54] <very_sneaky> LordKalma: heh
[15:27:58] <mort> I think I remember some vulnerability in python software related to using a yaml parser to parse json
[15:28:21] <mort> because yaml supports loading python objects which involves arbitrary code execution or something
[15:28:42] <very_sneaky> i wonder if they'll introduce a data structure that has a 1:1 relationship with yaml like the dict->json relationship
[15:29:05] <LordKalma> very_sneaky, after using JS, I admit that the json->js automagic feels so good
[15:29:17] <mort> a dict can't actually be losslessly converted to json
[15:29:27] <very_sneaky> LordKalma: python has it too though?
[15:29:32] <very_sneaky> mort: oh? what's lost?
[15:29:32] <LordKalma> nah
[15:29:37] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[15:29:38] <LordKalma> very_sneaky, if gives tou a dictionary
[15:29:46] <LordKalma> python doesn't have Object in the JS sense
[15:29:48] <LordKalma> and dicts suck
[15:29:48] <op0x0f05> Parameter 'x' is unused
[15:29:48] <op0x0f05> All parameters should be named in a function
[15:29:48] <op0x0f05> Catch-22
[15:29:50] *** Joins: kaph (~kaph@151.37.203.0)
[15:30:05] <LordKalma> op0x0f05, you can add [[maybe_unused]] or remove the name
[15:30:14] <LordKalma> like void foo(int); // doesn't want
[15:30:17] <LordKalma> *warn
[15:30:23] <mort> I can't recall exactly what was lost, I just remember something not carrying over perfectly
[15:30:45] <very_sneaky> dicts are fine - they're pretty handy for function pointers
[15:30:46] <mort> it might've been something stupid like using a tuple as a dict key
[15:30:58] <mort> that's probably the biggest one; json keys can only be strings
[15:30:59] <LordKalma> very_sneaky, bah, I have that you have to dict["myelement"]
[15:31:08] <LordKalma> js's object.element is so much better
[15:31:19] <very_sneaky> dict.get("myelement", default)?
[15:31:24] <LordKalma> get outta here!
[15:31:33] <LordKalma> but yeah, that useful, sometimes
[15:31:52] <LordKalma> and dics can use any immutable data as index
[15:32:25] <mort> object.my element is super nice, but only works because all objects are hash maps... I don't know if I prefer that
[15:32:37] <very_sneaky> it does look a bit hairy when you're like `dict.get(var, None)()` to a call a function pointer though
[15:32:42] <mort> plus you have magic object keys you probably don't wanna overwrite with arbitrary user data
[15:32:43] <LordKalma> JS is the language of magic
[15:33:13] <very_sneaky> LordKalma: you _can_ write classes to give you the behaviour you described though
[15:33:17] <LordKalma> I knwo
[15:33:20] <LordKalma> Django does that
[15:33:24] <mort> the language will literally use the 'value' key in comparisons iirc
[15:33:27] <LordKalma> djago is the most magi thing there is
[15:33:47] <very_sneaky> i came across a cool client rest api that inserted the endpoints as dynamic fields, so `client.endpoint.get()` or whatever
[15:34:01] <LordKalma> @property in python is all you need, really
[15:34:07] <very_sneaky> pretty flexible to api version changes
[15:34:28] <LordKalma> and the fact classes themselves are objects of type Meta is cool
[15:34:35] <LordKalma> because you can do reflection with it
[15:34:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c545:211c:aaf8:e74)
[15:34:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c545:211c:aaf8:e74) (Changing host)
[15:34:54] *** Joins: skapata (~Skapata@user/skapata)
[15:35:09] <very_sneaky> i'd like to have a heterogenous map in c++
[15:35:10] <mort> same with JS almost.. except that there, classes are functions
[15:35:23] <LordKalma> JS classes are a joke
[15:35:32] <very_sneaky> hmm, maybe that wouldn't be so useful come to think of it
[15:35:36] <LordKalma> it's an object with a local `this` injected
[15:35:38] <LordKalma> it's a hack
[15:35:44] <mort> well
[15:35:56] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[15:36:03] <mort> any function gets a 'this' if you call it with the 'new' operator
[15:36:42] <mort> and the method call syntax also provides a 'this' object
[15:37:07] <LordKalma> there are hour-long videos with the `this` gotchas
[15:37:26] <mort> console.log("hello"); works, log=console.log;log("hello"); errors because 'this' isn't a console object
[15:38:29] <very_sneaky> can you interpret js files as scripts?
[15:38:29] <mort> the 'this' isn't a property of the object at all, it's just down to the different function call syntaxes to inject a 'this' into the function call scope
[15:38:42] <mort> depends on what you mean
[15:38:54] <LordKalma> JS is really insane
[15:38:54] <very_sneaky> or package cli programs written in js? or do you need a browser/server
[15:39:07] <leduyquang753> very_sneaky JS is an interpreted language.
[15:39:30] <mort> there are lots of non-browser JavaScript runtimes
[15:39:40] <very_sneaky> gotcha. i've not played around with it much
[15:39:42] <mort> the most popular one is node.js, you might've heard of it
[15:40:00] <very_sneaky> i've only ever used nodejs to run a server
[15:40:12] *** Joins: kaph (~kaph@151.37.203.0)
[15:40:21] <mort> that was running JavaScript without a browser
[15:40:43] <very_sneaky> yes, but it was the latter part of my question :P
[15:41:01] <very_sneaky> i guess i'm asking can you just do `nodejs hello.js` and have it print "Hello, World!" to the console
[15:41:08] <mort> yes
[15:41:10] <very_sneaky> or some analog
[15:41:22] <very_sneaky> gotcha
[15:42:15] <mort> that's also basically what you do when you use node.js to run a server, you're just running a script which happens to implement a web server and handle requests
[15:44:57] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:45:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[15:49:34] <very_sneaky> yeah that makes sense. similar to pythons http.server
[15:49:45] <mort> exactly
[15:50:25] <mort> though to be fair @LordKalma, on the list of "craziest languages with huge warts" both JS and C++ are pretty high up
[15:50:32] <LordKalma> hahaha indeed
[15:50:38] <LordKalma> I've actually been enjoying using JS
[15:50:47] <LordKalma> I can see how it's superior to python in many regards
[15:50:52] <LordKalma> just twice the gotchas
[15:51:04] <PJBoy> nah denied
[15:51:07] <mort> I enjoy JS too
[15:51:26] <PJBoy> javascript has no features
[15:51:29] <mort> it's nice to have a pretty ergonomic language with insanely good JITs
[15:51:49] <PJBoy> python has list comprehensions, which are like a language in and of themselves
[15:52:06] <very_sneaky> dict too
[15:52:09] <very_sneaky> comprehensions are amazing
[15:52:28] *** Quits: asen (~asen@2408:821a:618:18f0:8897:d604:5f77:77c9) (Quit: Leaving)
[15:52:37] <LordKalma> comprehensions are indeed amazing
[15:52:48] <mort> I bet the 3 best interpreted/JITed language runtimes on the planet at the moment are V8, SpiderMonkey and JavaScriptCore
[15:52:58] <LordKalma> but as I said yesterday, JS pushes much better functional idioms
[15:53:01] <mort> which is a pretty big deal for anything remotely performance sensitive
[15:53:05] <LordKalma> inline functions are much better in JS
[15:53:19] <mort> oh don't get me started on python's lambdas
[15:53:22] <mort> just whyy
[15:53:50] <LordKalma> lambda x: x
[15:53:51] *** Joins: seninha (~seninha@user/seninha)
[15:53:55] <leduyquang753> Python was afraid of multi-statement lambdas being unPythonic.
[15:54:29] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/frontend/src/components/repeaters/RepeatersList.vue#L61
[15:54:38] <LordKalma> look at the crazy shit you can do with inline functions in JS
[15:54:39] <PJBoy> nah python lambdas are good
[15:54:49] <PJBoy> because you can just declare a function if you need statements
[15:54:59] <PJBoy> no point making lambda act exactly like functions
[15:55:07] <mort> that's the problem
[15:55:20] <PJBoy> JS lambdas don't act exactly like JS functions either I guess
[15:55:24] <mort> you need to first declare the function then call the function you want to pass your function into
[15:55:30] <PJBoy> but the only difference is a gotcha
[15:55:52] <PJBoy> declaring the function you want to use is good coding anyway
[15:56:12] <mort> I like lambdas, in all my languages a lambda expression is an open brace, some list of expressions, then a closing brace
[15:56:25] <PJBoy> anonymous functions are really just an elaborate form of magic numbers
[15:56:33] <PJBoy> you should really give that shit a name
[15:56:39] <mort> nah
[15:56:47] <LordKalma> oh come'on
[15:56:47] <mort> anonymous functions is just code
[15:56:54] <mort> you don't give every line of code a name
[15:57:01] <LordKalma> in a .map() is pretty clear :)
[15:57:46] <LordKalma> var data_in_format_A = data_in_format_B.map(format_from_B_to_A);
[15:57:48] <mort> there's something to be said for writing short named functions, but whether your 5 statements is in an 'if' block or in a callback really doesn't matter from a quality perspective imo
[15:57:56] <LordKalma> `format_from_B_to_A` is pretty redundant
[15:57:58] <mort> python just makes the latter annoying for no good reason
[15:58:30] <mort> I think the biggest reason against multi-statement lambdas in python is that it doesn't mesh very well with python's syntax
[15:58:40] <mort> and I think that's a perfectly fine argument on its own tbh
[15:58:50] <PJBoy> I like the purity of python's lambdas
[15:59:14] <PJBoy> plus I've seen callbacks in javascript
[15:59:23] <LordKalma> but you can write *any* code that doesn't throw with a comprehension
[15:59:26] <PJBoy> we both know that lambdas don't get used for self explanatory operations
[15:59:30] <LordKalma> so lambdas can be whatever you want
[15:59:31] <mort> callback hell is a real place and you don't want to be there
[15:59:52] <mort> and JS, especially node, especially in the early days, encourages callback hell
[15:59:56] <LordKalma> lambda x: [write_ll_code_here][0] ;)
[16:00:25] <mort> everyone should just use my language and let all blocks be lambdas
[16:00:44] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[16:02:02] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[16:02:45] <LordKalma> pure functional?
[16:03:26] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[16:05:39] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 268 seconds)
[16:06:10] *** Joins: kaph (~kaph@151.37.203.0)
[16:06:12] <mort> no, there are mutations
[16:08:23] <Haohmaru> bluh, still have a bug in my compressor
[16:08:54] <mort> compressor?
[16:08:56] <PJBoy> "does not compress white noise"
[16:09:02] <LordKalma> today in sentences you can hear in programming or rally
[16:09:12] *** Quits: kaph (~kaph@151.37.203.0) (Read error: Connection reset by peer)
[16:09:28] *** Joins: kaph (~kaph@151.37.203.0)
[16:10:22] <PJBoy> wtf conan
[16:10:24] <LordKalma> op0x0f05 is now fixing 3-man-days worth of clang-tidy checks
[16:10:44] <PJBoy> I'm doing the windows side of dev now
[16:11:00] <Haohmaru> mort the data compressor i posted earlier
[16:11:15] <PJBoy> it generates the default MSVC profile for me via `conan profile new default --detect`
[16:11:35] <PJBoy> and then when I go to install this project, it complains that settings.compiler.runtime isn't set
[16:11:42] <Haohmaru> PJBoy noise is difficult to compress ;P~
[16:11:44] <PJBoy> why wasn't that given a value by the default
[16:11:47] <PJBoy> Haohmaru, exactly
[16:12:22] <Haohmaru> my compressor needs 2 bytes to encode 0x0F for example.. so it's really for very boring signals only
[16:12:28] <Haohmaru> 0x55 is worst-case input
[16:12:39] <LordKalma> PJBoy, what did it dettect for the default?
[16:12:46] <LordKalma> msvc doesn't use .runtime?! iirc
[16:12:58] <PJBoy> https://pastebin.com/q8DrNrSD
[16:13:18] <PJBoy> this error came from openssl
[16:13:25] <LordKalma> never saw compiler.runtime_type=Release
[16:13:46] <LordKalma> oh, it does have it!
[16:14:02] <very_sneaky> my conan profile on my windows vm doesn't have .runtime in it
[16:14:08] <LordKalma> PJBoy, ohh no
[16:14:12] <LordKalma> I think I know what the problem is
[16:14:27] <PJBoy> https://conan.io/center/openssl?os=Windows&tab=configuration conan wants me to specify MT or some such
[16:14:39] <LordKalma> PJBoy, don't use compiler=msvc
[16:14:41] <PJBoy> I know visual studio has those runtime options
[16:14:43] <PJBoy> oh?
[16:14:44] <LordKalma> use compiler=Visual Studio
[16:14:57] <PJBoy> hm
[16:15:02] <LordKalma> this is why: https://bpa.st/3SFDQ75USHJAJOVVN4CQVRUYQU
[16:15:02] <very_sneaky> is this a build tools only compilation?
[16:15:06] <PJBoy> bearing in mind I never specified anything in the first place
[16:15:14] <PJBoy> this was what conan decided the defaults were
[16:15:37] <LordKalma> yeah, fuck that shit
[16:16:00] <LordKalma> PJBoy, here have this one: https://bpa.st/5WAABDQ5AVIVRDVBSPFOKNMO74
[16:16:08] <LordKalma> also, you don't need to run that in windows
[16:16:13] <very_sneaky> what's the difference between msvc and visual studio in this context, aside from one being an ide and the other a compiler
[16:16:20] <LordKalma> very_sneaky, idk, conan is weird man
[16:16:33] <LordKalma> I've never even saw msvc as a compiler option
[16:16:38] <LordKalma> everybody uses Visual Studio with conan
[16:16:54] <very_sneaky> i did notice that when grepping the index
[16:17:08] <PJBoy> also, you don't need to run that in windows <-- what don't I need to run?
[16:17:14] <LordKalma> nothing
[16:17:20] <LordKalma> it gives you the default profile for free
[16:17:21] <PJBoy> the conan profile new default --detect?
[16:17:23] <PJBoy> ah
[16:17:45] <LordKalma> anyway, use the default profile I linked you
[16:17:57] <LordKalma> oh nevermind
[16:18:00] <LordKalma> it's missing a compiler!
[16:18:10] <LordKalma> now I understand why I always have to add -s compiler="visual studio"
[16:18:11] <LordKalma> hahaha
[16:18:22] <LordKalma> so you *do* have to run it
[16:18:23] <LordKalma> interesting
[16:18:37] <LordKalma> PJBoy, anyway, for the sake of everything working, use compiler: Visual Studio
[16:18:46] <LordKalma> and check the settings.yml for the suboptions
[16:18:53] <LordKalma> and I'm now going to the slack to complain about this
[16:19:00] *** Quits: kaph (~kaph@151.37.203.0) (Ping timeout: 256 seconds)
[16:19:21] <very_sneaky> i thought it was standard practice to have to detect a new profile - didn't think it did this by default
[16:19:29] <LordKalma> it doesn't
[16:19:34] <LordKalma> my bad :p
[16:20:25] *** Joins: CaCode (~CaCode@user/cacode)
[16:21:04] <PJBoy> bah now I have to figure out what version of visual studio I have
[16:21:15] <PJBoy> and what toolset I have
[16:21:31] <very_sneaky> fortunately the toolset is pretty tied to the version you've got
[16:21:56] <LordKalma> PJBoy, 16 is 2019 build tools/vs
[16:21:58] <LordKalma> 17 is 2022
[16:22:05] <PJBoy> right
[16:22:13] <Haohmaru> hm, i could've made it work on nibbles..
[16:22:39] <PJBoy> 16 then
[16:22:50] <LordKalma> -s compiler="Visual Studio" -s compiler.version="16" -s compiler.runtime // .... you get the point
[16:23:26] <very_sneaky> cool, that was an interesting response on slack
[16:23:32] <PJBoy> that would be v142 for the toolset then
[16:23:37] <very_sneaky> msvc is the intended replacement for "Visual Studio"
[16:23:53] <LordKalma> PJBoy, yes, but I never set it, I think it even works without it
[16:23:57] <PJBoy> can they backpeddle on that?
[16:24:13] <PJBoy> because those 19.N version numbers are the hardest ones to find
[16:24:14] <LordKalma> PJBoy, Conan unfortunately "moves fast and breaks things"
[16:24:22] <LordKalma> and Conan 2.0 will be python 3 all over again
[16:24:28] <PJBoy> they're not listed anywhere within visual studio AFAIK
[16:24:50] <LordKalma> PJBoy, Î» cl --version
[16:24:55] <LordKalma> Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30138 for x86
[16:25:02] <PJBoy> is that a lambda?
[16:25:08] <very_sneaky> lambda is the $ of cmder
[16:25:13] <PJBoy> wow you like functional programming more than I thought
[16:25:20] <LordKalma> hahah
[16:25:23] <LordKalma> nah, just Half-life
[16:25:32] <LordKalma> but yeah, cmder uses lambda as the default
[16:25:48] *** Joins: evocatus (~evocatus@62.182.78.42)
[16:25:53] <PJBoy> so should I try for msvc profile?
[16:25:57] <very_sneaky> LordKalma: what shell do you use on windows out of curiosity?
[16:26:02] <PJBoy> meaning I need to specify a runtime of my choosing
[16:26:05] <very_sneaky> PJBoy: it looks like that's the future
[16:26:07] <LordKalma> PJBoy, leave it as it is for now
[16:26:12] <LordKalma> wait for conan 2.0 to migrate
[16:26:20] <very_sneaky> https://blog.conan.io/2021/01/27/New-conan-release-1-33.html for info
[16:26:27] <PJBoy> ah great
[16:26:32] <LordKalma> very_sneaky, regular cmd
[16:26:32] <LordKalma> https://i.gyazo.com/4685b458129d40b543f86d9360aa7a33.png
[16:26:33] <PJBoy> well I'm down for being futuristic
[16:26:37] <LordKalma> with cmder
[16:26:52] <very_sneaky> gotcha
[16:26:55] <LordKalma> very_sneaky, they should have had anchor tags for the chapters
[16:26:57] <PJBoy> lol at ignored option
[16:26:59] <LordKalma> "New msvc compiler in settings"
[16:27:09] <LordKalma> PJBoy, it worked :D
[16:27:10] <very_sneaky> i just ctrl+f
[16:27:28] <very_sneaky> i've been trying to work out how to get a first class bash terminal in windows
[16:27:37] <LordKalma> very_sneaky, git bash like everybody else?
[16:27:43] <PJBoy> the microsoft approved method is `cl /Bv`
[16:27:44] <very_sneaky> seems like msys2 + git-for-windows is the best we can have for the moment
[16:27:50] <LordKalma> I don't use git bash because I have a lil secret ;)
[16:27:55] <LordKalma> I have msys2 on path :p
[16:28:00] <very_sneaky> LordKalma: if you go for msys2 over git bash it gives you pacman
[16:28:00] *** Joins: CaCode_ (~CaCode@user/cacode)
[16:28:10] <LordKalma> I have git for windows installed
[16:28:16] <very_sneaky> as in, the sdk?
[16:28:25] <LordKalma> because msys2's git is shit
[16:28:35] <very_sneaky> i installed git for windows git in msys2
[16:28:38] <LordKalma> but I don't have git for windows injecting the rap
[16:28:40] <LordKalma> crap*
[16:28:48] <LordKalma> very_sneaky, https://gitforwindows.org/
[16:29:06] <LordKalma> it gives you the option of putting only itself on path, or everything the git bash has
[16:29:07] <very_sneaky> yeah, doesn't the user dist version of that *not* come with pacman?
[16:29:13] <LordKalma> I have only git
[16:29:15] <very_sneaky> ah
[16:29:24] <LordKalma> and then use msys2 for the rest
[16:29:35] <very_sneaky> why not just install that git into msys2
[16:30:02] <very_sneaky> https://github.com/git-for-windows/git/wiki/Install-inside-MSYS2-proper
[16:30:18] <LordKalma> interesting
[16:30:25] <very_sneaky> the only thing i'm a bit salty about is that you have to spin up the mingw64 subsystem to do any c++ compilation
[16:30:27] <LordKalma> msys2 does allow you to pacman install git
[16:30:31] <LordKalma> but it's SHIT
[16:30:38] <LordKalma> very_sneaky, I just have it on path, whatever
[16:30:41] <very_sneaky> you have to install the mingw64-git
[16:30:54] <very_sneaky> `pacman -S mingw-w64-x86_64-{git,git-doc-html,git-doc-man} git-extra` is what they suggest
[16:30:54] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[16:31:16] <very_sneaky> yeah, probably good enough
[16:31:33] <LordKalma> https://i.gyazo.com/a7dc28f4acce89d94e1f6d321e26d54e.png
[16:31:41] <LordKalma> doesn't even fit on a whole screen
[16:31:46] <LordKalma> fucj,, I have to push msys2 down
[16:31:51] <LordKalma> sometimes things install after
[16:31:55] <LordKalma> msys2 must always be last
[16:32:00] <LordKalma> otherwise shit can happen
[16:32:16] <very_sneaky> lol, i manage all of my bash path stuff in bashrc
[16:32:29] <very_sneaky> the windows path stuff in env vars
[16:32:33] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:32:37] <very_sneaky> idk though, it's all a hodgepodge
[16:32:41] <very_sneaky> i hate windows
[16:33:00] <very_sneaky> windows is the operating system equivalent of bamboo, kinda
[16:33:09] <very_sneaky> yaml support just thrown in as an afterthought
[16:33:57] <PJBoy> bamboo is an environmentally friendly source of wood
[16:34:47] <very_sneaky> yep, useful for building huts, shite for continuous integration
[16:35:20] <PJBoy> :D
[16:36:57] <PJBoy> ok so the msvc compiler config did not work in my favour
[16:37:04] <PJBoy> going for the visual studio route
[16:37:06] <LordKalma> just use the visual studio one
[16:37:12] <LordKalma> we're discussin in the slack
[16:37:27] <LordKalma> 500 recipes use "Visual Studio" for something
[16:37:30] <LordKalma> just short of HALF of them
[16:37:53] <PJBoy> including openssl
[16:37:58] <PJBoy> and the other half use msvc?
[16:38:02] <LordKalma> no
[16:38:08] <PJBoy> the other half don't support VS?
[16:38:09] <LordKalma> the other half might not have specific problems with it
[16:38:26] <LordKalma> like it's automatic if you don't have to like change requirements of stuff
[16:38:37] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[16:38:52] <PJBoy> I'm not sure what to make of that
[16:38:59] <very_sneaky> the recipe's might just have statements like `if settings.compiler == "Visual Studio"`, which would break for settings.compiler=msvc
[16:39:02] *** Quits: evocatus (~evocatus@62.182.78.42) (Ping timeout: 240 seconds)
[16:39:44] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[16:39:51] <very_sneaky> so sticking with `Visual Studio` is the suggested method atm because not all (none?) of the recipes have transitioned to incorporate the new standard compiler name
[16:40:35] <PJBoy> looking at the openssl recipes https://conan.io/center/openssl?os=Windows&tab=configuration
[16:40:44] <PJBoy> it names Visual Studio as the compiler
[16:40:55] <PJBoy> and like surely all windows recipes do that?
[16:41:03] <LordKalma> pretty much
[16:41:07] <very_sneaky> that just means that's what those binaries would have been built with
[16:41:16] <very_sneaky> not _necessarily_ that they can't be built with a different compiler
[16:41:26] <PJBoy> fair enough
[16:41:29] <very_sneaky> in this case you're obviously running into issues though
[16:41:32] <PJBoy> but would conan ever be able to connect those dots?
[16:41:53] <LordKalma> it can be hardcoded in the recipes
[16:41:54] <PJBoy> "you have a msvc profile, hence you can use this visual studio build"
[16:41:58] <very_sneaky> are you talking about the recipe you see in the "Configuration" tab or the "Recipe" tab?
[16:42:03] <LordKalma> or for example,
[16:42:12] <PJBoy> there are tabs on this website?
[16:42:19] <very_sneaky> https://conan.io/center/openssl?os=Windows&tab=recipe
[16:42:22] <PJBoy> oh I'm in the configuration tab
[16:42:24] <very_sneaky> that's the generic recipe
[16:42:34] <PJBoy> ah I see
[16:42:36] <LordKalma> if you're packaging a C library, you can tell it it doesn't depend on the C++ standard
[16:42:37] <very_sneaky> so the configuration tab is the non-generic version of the recipe
[16:42:43] <PJBoy> the recipe is much more in depth
[16:43:11] <very_sneaky> the configuration tab has the values used to build each of those binaries, the recipe tab has the fulyl generic recipe as written
[16:43:27] <LordKalma> PJBoy, the "configurations" tab is the ones they have cached btw
[16:43:36] <LordKalma> the recipe might support infinitely many others
[16:43:43] <LordKalma> it's just if you use those you get binaries
[16:43:47] *** Joins: jokoon (~jokoon@185.61.188.186)
[16:43:48] <PJBoy> right ok
[16:43:51] <PJBoy> that makes perfect sense
[16:44:03] <jokoon> any idea when microsoft will fix intellisense?
[16:44:15] <LordKalma> jokoon, who gives a fuck about intellisense? adopt clangd :D
[16:44:18] *** Joins: kaph (~kaph@151.47.131.129)
[16:44:21] <jokoon> why does it always seem to break?
[16:44:38] <PJBoy> wish the box for viewing the recipe was a bit bigger -_-
[16:44:43] <PJBoy> does VS support clangd?
[16:44:44] <jokoon> not everybody can use clang
[16:44:51] <PJBoy> or were you just assuming VS code
[16:44:53] <LordKalma> jokoon, clang*d*
[16:44:56] <very_sneaky> PJBoy: you can view it on github if it's easier
[16:45:06] <LordKalma> I always look at recipes in github
[16:45:10] <LordKalma> rather
[16:45:16] <PJBoy> oh can I?
[16:45:16] <jokoon> does it work with visual studio?
[16:45:16] <LordKalma> with vscode web via github
[16:45:20] <PJBoy> I don't see a link
[16:45:22] <very_sneaky> https://github.com/conan-io/conan-center-index/tree/master/recipes
[16:45:37] <LordKalma> (click "." on your keyboard to open vscode
[16:45:38] <PJBoy> I take it there's no link then
[16:45:41] <PJBoy> also thanks
[16:45:42] <LordKalma> and that way tou can ctrl+f
[16:45:56] <LordKalma> https://github.dev/conan-io/conan-center-index/tree/master/recipes
[16:45:58] <LordKalma> ^much better
[16:46:00] <very_sneaky> PJBoy: link up the top right, "GitHub"
[16:46:17] <PJBoy> ah, that's cool and all
[16:46:28] <PJBoy> but shame it doesn't link to the openssl directory directly
[16:46:33] <very_sneaky> yeah
[16:46:47] <very_sneaky> i take issue with a bunch of jfrog's UI decisions
[16:46:54] <LordKalma>     @property
[16:46:54] <LordKalma>     def _is_msvc(self):
[16:46:54] <LordKalma>         return self.settings.compiler == "Visual Studio"
[16:46:56] <LordKalma> shit
[16:46:59] <LordKalma> in openSSLs recipes
[16:47:15] <PJBoy> shame conan doesn't provide that function itself
[16:47:30] <PJBoy> seems like the kind of thing you'd want to offer
[16:47:56] <LordKalma> this is 750 lines long, shit
[16:47:57] <PJBoy> so I assume clangd can't work with visual studio proper
[16:47:59] <LordKalma> it'll be fun to fix
[16:48:05] <jokoon> it seems there is no alternative to intellisense on VS studio
[16:48:27] <PJBoy> this shit is impossible to google thanks to visual studio code
[16:48:39] <PJBoy> and it's not like I can add `-code` to my query
[16:49:14] <LordKalma> yap
[16:49:30] <PJBoy> but I'm quite sure it has no clangd support
[16:49:36] <PJBoy> as that would require some LSP integration
[16:50:02] <PJBoy> that said, intellisense works fine over here and always has done
[16:50:10] <PJBoy> it chokes on modules, but what do you expect
[16:50:44] <PJBoy> my build worked, woah
[16:50:49] <LordKalma> :D :D :D :D
[16:50:51] <very_sneaky> https://marketplace.visualstudio.com/items?itemName=caphyon.ClangPowerTools2022
[16:50:58] <very_sneaky> looks like clang tidy is in visual studio
[16:51:06] <very_sneaky> oh wait, we established that already
[16:51:08] <LordKalma> clang-tidy is available natively since ages
[16:51:14] <LordKalma> that's useless
[16:51:19] <LordKalma> so is format, btw
[16:51:24] <LordKalma> so that extension is useless x2
[16:51:45] <very_sneaky> yeah gotcha
[16:52:12] <very_sneaky> `visual studio clangd -"Visual Studio Code" -vscode` removed all promising looking results for clangd, lol
[16:52:47] <LordKalma> yap
[16:52:50] <PJBoy> oh I didn't know you could remove entire quoted strings
[16:53:17] <LordKalma> my favorite in google queries is probably `site:
[16:53:27] <very_sneaky> or `type:`
[16:53:29] <very_sneaky> or `after:`
[16:53:37] <LordKalma> type, yeah
[16:53:44] <very_sneaky> after is handy for news
[16:53:46] <PJBoy> `type:` was amazing during uni
[16:53:53] <LordKalma> type:pdf :p
[16:54:01] <PJBoy> you know it ;)
[16:54:13] <LordKalma> you know what I hate?!
[16:54:19] <LordKalma> shady sites that picked on that
[16:54:35] <PJBoy> never had that experience
[16:54:36] <LordKalma> and gave you single page pdfs claiming to be the book you wanted to warez
[16:54:43] <LordKalma> with a shadier url
[16:54:55] <LordKalma> so annoying
[16:55:14] <PJBoy> if only you could demand filesize>=1MB or something
[16:55:39] <LordKalma> now I use libgen or whatever the modern z-lib name is
[16:55:51] <LordKalma> when when I really like something, buy it :)
[16:55:55] <very_sneaky> it's funny what you can find with google
[16:56:05] <PJBoy> zlib changed their name?
[16:56:10] <very_sneaky> one of the first exercises in oscp was to find all public webcams
[16:56:30] <PJBoy> people make their webcams public?
[16:56:33] <very_sneaky> that was an interesting experience
[16:56:40] <very_sneaky> unknowinlgy so, yes
[16:56:43] <LordKalma> PJBoy, seems z-lib.org is function. it was bookzz that changed, I think
[16:56:46] <very_sneaky> a lot of hotels in the carribbean
[16:56:54] <LordKalma> PJBoy, there's a whole world of public webcam sites
[16:57:16] <PJBoy> I mean I know you have your omegles and twitches and whatnot
[16:57:22] <PJBoy> but I assume we're not talking about those
[16:57:34] <LordKalma> really random security webcams
[16:58:16] <PJBoy> weird
[16:58:25] <PJBoy> so how did you discover these?
[16:58:39] <PJBoy> I feel like I need to check that mine isn't randomly public
[17:00:09] <rpav> default configurations?
[17:00:50] <PJBoy> > cmake wants to use my VS 2022
[17:01:05] <PJBoy> I thought conan was going to somehow tell cmake to do the right thing
[17:01:13] <rpav> things ought to be configured not to work until they're configured out of defaults
[17:01:14] <LordKalma> I think it happens when people have their surv cameras on networks that are either public or publicly NATed
[17:01:26] <LordKalma> PJBoy, you're building with a conanfile.py?
[17:01:31] <PJBoy> nah
[17:01:39] <LordKalma> then no
[17:01:44] <PJBoy> hm
[17:01:45] <LordKalma> open the developer prompt for 2019 :p
[17:01:53] <LordKalma> or use a toolchain file
[17:01:54] <PJBoy> maybe if I set the env variables in the conan profile?
[17:01:55] <very_sneaky> PJBoy: try this query on for size: `intitle:"netbotz appliance" "OK" -filetype:pdf`
[17:02:01] <LordKalma> PJBoy, no
[17:02:02] <PJBoy> oh I should specify the toolchain
[17:02:05] <PJBoy> that's my bad
[17:02:08] <LordKalma> conan and cmake are totally different
[17:02:13] <LordKalma> toolchain file for *cmake*
[17:02:24] <PJBoy> yeah I know you meant toolchain for cmake
[17:02:51] <PJBoy> but when I was testing this stuff out for clang
[17:03:02] <PJBoy> I had to set the CC and CXX env variables in my clang's conan profile
[17:03:12] <LordKalma> yes
[17:03:15] <PJBoy> otherwise cmake was using gcc
[17:03:24] <LordKalma> setting the conan profile doesn't actually set the compiler it's going to use
[17:03:30] <LordKalma> it just sets the recipe expected config
[17:03:36] <LordKalma> and if you use --build
[17:03:47] <LordKalma> then you have to add CC and CXX for it to build with the right thing
[17:03:59] <LordKalma> --build=missing for example
[17:04:05] <PJBoy> that's the one I used, yeah
[17:04:25] <very_sneaky> uh? I'm not sure that is true
[17:04:29] <LordKalma> saying -s compiler = "clang" doesn't make conan search for clang
[17:04:38] <very_sneaky> if you go through the configure stage with a compiler it will try to use what it's been configured for
[17:04:46] <LordKalma> nope
[17:04:53] <LordKalma> it'll use CXX/CC iirc
[17:05:07] <very_sneaky> yeah, i have to wipe my build dir every time i do that, even after changing profiles with those env vars set
[17:05:15] <PJBoy> that's the results of my finding too
[17:05:23] <PJBoy> had to specify clang for the CC/CXX
[17:05:40] <PJBoy> and without having specified anything for MSVC, I'm finding it's using the wrong MSVC toolchain
[17:05:51] <LordKalma> open the 2019 developer prompt :D
[17:05:58] <LordKalma> it's the Windows Way TM
[17:06:18] <PJBoy> but all I want to do is generate the VS project with cmake
[17:06:26] <PJBoy> surely I don't need a full dev prompt
[17:06:45] <LordKalma> at least it's the easy way to get detection right
[17:06:54] <LordKalma> if you use vscode you can just select the kit
[17:07:00] <very_sneaky> you shouldn't do - i've been able to do it from git bash or msys2
[17:07:29] <PJBoy> I can't help but feel there's some way to specify VS version as part of the [env] section of the conan profile
[17:07:39] <LordKalma> sure
[17:07:47] <LordKalma> CC: cl.exe /C
[17:07:52] <LordKalma> CXX: cl.exe
[17:07:55] <LordKalma> the RIGHT cl.exe
[17:08:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305)
[17:08:12] <PJBoy> would that be able to generate the visual studio project correctly?
[17:08:14] <LordKalma> but that still won't change the cmake version on your project
[17:08:16] <very_sneaky> PJBoy: what's your profile got in it atm?
[17:08:26] <PJBoy> it's quite minimal
[17:08:28] <LordKalma> we're talking spaggetty
[17:08:37] <LordKalma> conan settings only matter for conan built things
[17:08:41] <LordKalma> wither build = missing
[17:08:43] <PJBoy> https://pastebin.com/apGtxPGB
[17:08:45] <LordKalma> or conanfile.py's
[17:08:56] <LordKalma> what you do with YOUR cmake is your problem
[17:09:05] <very_sneaky> yeah that looks fine
[17:09:09] <PJBoy> that's half-true
[17:09:18] <LordKalma> no, it's trye
[17:09:20] <LordKalma> *true
[17:09:29] <PJBoy> because like I said before, specifying the CC and CXX for clang made cmake work with no extra configuration required
[17:09:43] <PJBoy> I dare say it was a necessary step
[17:09:44] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7d33:9c49:8a76:cfa0)
[17:09:45] <LordKalma> conan install .; cmake .; // totally different things
[17:09:59] <LordKalma> and the conan profile CXX will only apply to the first
[17:10:09] <PJBoy> that doesn't seem to be the case
[17:10:14] <LordKalma> pretty sure it is
[17:11:16] <LordKalma> pretty sure it is
[17:11:32] <very_sneaky> PJBoy: what's the error you're getting?
[17:12:07] <PJBoy> I run cmake and it tells me "-- Building for: Visual Studio 17 2022"
[17:12:22] <PJBoy> then goes on to fail for an unrelated reason
[17:12:32] <LordKalma> of course it does
[17:12:37] <very_sneaky> do you have multiple visual studio installations?
[17:12:42] <LordKalma> of course he does
[17:13:02] <jokoon> anybody here using CLion? and would tell how good it is?
[17:13:15] <LordKalma> Jason Tuner loves it
[17:13:37] <PJBoy> I have 2022, 2019 and 2015 on this machine
[17:13:48] <PJBoy> two versions of 2019
[17:13:51] <Haohmaru> tuner?
[17:13:54] <very_sneaky> and you want to build with 2019? one of those versions?
[17:13:58] <PJBoy> yeah
[17:13:58] <Haohmaru> FM tuner?
[17:14:00] <fiesh> << 2022 + 2019 + 2015
[17:14:00] <geordi> 6056
[17:14:05] <fiesh> so much software
[17:14:12] <PJBoy> my 2019 is the one specified in conan profile
[17:14:17] *** Quits: Tokamak_ (~Tokamak@107.116.82.132) (Ping timeout: 240 seconds)
[17:14:22] <LordKalma> just use the dev promp :D
[17:14:37] <LordKalma> and no, settings env variables in the conan profile will NOT affect anything outside conan commands
[17:15:41] <PJBoy> I mean
[17:15:53] <PJBoy> it has some effect
[17:15:56] <PJBoy> directly or indirectly
[17:16:05] <PJBoy> it changed what compiler cmake used
[17:16:05] *** Joins: Tokamak (~Tokamak@172.58.188.122)
[17:16:29] <LordKalma> hum, perhaps some .cmake file?
[17:16:34] <LordKalma> interesting
[17:17:19] *** Joins: teepee (~teepee@openscad/teepee)
[17:17:27] <rpav> jokoon: clion is pretty good; it's a very solid "just works" out of the box and does all the things .. but you can download a trial and try it out to see
[17:17:36] <PJBoy> also https://docs.conan.io/en/1.3/reference/profiles.html#examples
[17:17:53] <PJBoy> eh nvm
[17:18:02] <PJBoy> but that's the docs that made me write the CC and CXX
[17:18:11] <rpav> if i didn't have emacs working with all the features and more, i'd probably be re-subbed to jetbrains stuff
[17:18:12] <jokoon> rpav can it use msbuild?
[17:18:32] <rpav> jokoon: not sure, it used to be cmake-only but they added support for various things at some point .. google and see?
[17:18:41] <very_sneaky> PJBoy: have you tried setting CC and CXX?
[17:18:46] <PJBoy> I have not
[17:18:49] <jokoon> it's weird that I never hear about it
[17:18:51] <rpav> maybe if you google it on bing, you'll get better results ;)
[17:18:58] <very_sneaky> to like, `C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.20.27508\bin\Hostx64\x64` or whatever
[17:18:59] <rpav> (for msbuild)
[17:19:05] <PJBoy> it's not obvious to me what I should set them to
[17:19:16] <LordKalma> The right CL.exe
[17:19:35] <LordKalma> But I'm still betting it won't matter
[17:19:36] <PJBoy> sounds reasonable, but not reasonable enough
[17:19:47] <rpav> jokoon: people making the most noise aren't necessarily the best to listen to
[17:19:49] <LordKalma> And you should just open the Dev prompt
[17:19:51] <PJBoy> guess I'll give it a try anyway
[17:20:04] <LordKalma> In fact the Dev prompt calls a bat file
[17:20:07] <LordKalma> Go see what it does
[17:20:22] <jokoon> do you work at jetbrains?
[17:20:28] <PJBoy> I've seen those bat files
[17:20:30] <rpav> no
[17:20:39] <rpav> nor do i actually use their stuff at the moment
[17:20:52] <very_sneaky> yeah, the dev prompt invokes vcvarsall.bat
[17:21:07] <rpav> (nor have i worked there .. they're really a java company for the most part afaik)
[17:21:52] <rpav> jokoon: https://www.jetbrains.com/clion/download/#section=linux
[17:22:08] <rpav> or wait, you wanted msbuild, so probably click the ms tab ;P
[17:22:54] <rpav> "msbuild is not supported" but they do support nmake
[17:23:41] <rpav> (at least as a cmake target .. but really, ninja! .. if you have heavy msbuild dependency then you're probably already stuck with VS, so ðŸ¤·
[17:24:38] <jokoon> thanks for the search :)
[17:24:55] <jokoon> there are not many C++ well made IDE
[17:24:57] <PJBoy> ok setting CC and CXX had no effect
[17:25:10] <jokoon> especially when it comes to auto completion and debugging
[17:25:23] <rpav> but there are; and there are many good editor integrations these days via clangd
[17:25:32] <PJBoy> "many"
[17:25:38] <PJBoy> there's VS code
[17:25:39] <jokoon> yeah but Im tired of having to configure everything
[17:25:46] <PJBoy> and maybe some terminal based editors
[17:25:58] <jokoon> vs code is made with electron, I hate it
[17:26:07] <rpav> vscode is pretty shit, but there are other options; for "full IDE" there's VS, clion, and i think some people even use eclipse
[17:26:09] <PJBoy> I hate it too
[17:26:14] *** Joins: fredi (~fredi@189.6.232.131)
[17:26:14] <PJBoy> but it's a good editor in spite of that
[17:26:16] <very_sneaky> PJBoy: this says either use the visual studio command prompt or add the compiler to your path: https://stackoverflow.com/questions/31629966/how-to-set-cmake-cxx-variable-on-windows
[17:26:27] <PJBoy> yikes
[17:26:29] <very_sneaky> i've not had to tackle multiple vs versions before
[17:26:29] <PJBoy> ok
[17:26:52] <very_sneaky> another reason not to use windows imo. even apple has a good way of switching between toolchains easily
[17:26:53] <rpav> oh right, qt creator and kdevelop are a couple "free" IDE options
[17:27:12] <rpav> kdevelop is slightly slicker but last i checked only had single head editor support
[17:27:14] <PJBoy> I mean I really should just open visual studio and use its cmake integration
[17:27:25] <PJBoy> I was only doing this to test cmake's native project file generator
[17:27:42] <rpav> (neo)vim/emacs if you really want power
[17:27:51] <very_sneaky> fwiw i haven't had problems building .sln from the cli on windows
[17:28:04] <PJBoy> I've never tried that actually
[17:28:22] <rpav> PJBoy: you didn't try VS?!
[17:28:25] <very_sneaky> using cmake/ninja
[17:28:35] <fredi> PJBoy  TinoDidriksen thanks again for your assistence yesterday
[17:28:36] <rpav> it's sortof like vscode's integration, in that they layer some shit on top, but it's slightly less crap iirc
[17:28:52] <PJBoy> I've used VS' CMake integration before
[17:28:59] <PJBoy> it's a bit rough around the edges, but it works
[17:29:08] <rpav> ah
[17:29:16] <rpav> it was even better when i tried a bit ago
[17:29:18] <PJBoy> except that it doesn't work for cross compiling on linux
[17:29:28] <rpav> ðŸ¤”
[17:29:31] <PJBoy> because it randomly adds these flags with no option to remove them
[17:29:46] <PJBoy> and they break gcc
[17:29:51] <fredi> the issue was solved, confirming that was hypotesized about synchronizing the whole methods
[17:30:00] <rpav> ooh right i remember you mentioning that now
[17:30:14] <PJBoy> yeah it's trash
[17:30:25] <PJBoy> but no one else has ever complained about this before
[17:30:35] <rpav> then again developing on windows for linux is like worst way
[17:30:39] <PJBoy> so idk if it's just my unfamiliarity with cmake or some shit
[17:30:52] <PJBoy> yeah it kinda is I guess
[17:31:14] <PJBoy> never thought I'd have to concede that VS Code is better than VS in some way
[17:31:37] <PJBoy> but VS Code does linux development on windows really damn well
[17:32:06] <PJBoy> even if visual studio worked, VS code would still be better for not needing a local copy of the code
[17:32:24] <PJBoy> and for its clangd support
[17:32:57] <PJBoy> I wouldn't be surprised if they just trashed visual studio down the road
[17:33:13] <PJBoy> it's so bloated itself that it competes with electron for bloatedness
[17:33:17] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:33:38] <PJBoy> meanwhile VS Code is pretty quick in spite of its electron-ness
[17:33:50] <PJBoy> it's a mad mad mad mad world
[17:35:08] * PJBoy concedes defeat
[17:35:14] <PJBoy> alright lets try the dev prompt
[17:36:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:37:09] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[17:37:28] <PJBoy> "Compiler version specified in your conan profile: 16" "Compiler version detected in CMake: 19.30"
[17:37:30] <PJBoy> uhh
[17:38:01] <PJBoy> I was pretty sure the Visual Studio versions were the non 19 versions
[17:38:08] <very_sneaky> aren't those different things
[17:38:21] <very_sneaky> 19.30 is the msvc version and 16 is the visual studio version?
[17:38:28] <PJBoy> yeah that's what I thought
[17:38:48] <very_sneaky> did it throw an error?
[17:38:57] <PJBoy> yeah
[17:39:16] <PJBoy> conanbuildinfo.cmake:582 (conan_error_compiler_version)
[17:39:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:58] *** ChanServ sets mode: +v npaperbot
[17:40:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:40:40] <very_sneaky> it might be worth asking some of these questions in the cpplang#conan slack channel - the devs hang out there, you're probably more likely to get pointed in the right direction - i've barely touched conan in the windows dev i do
[17:40:42] <PJBoy> also 19.30 is VS2022
[17:40:50] <PJBoy> so even with the dev prompt it's using the wrong version
[17:41:35] <very_sneaky> https://cppalliance.org/slack/ for an invitation
[17:41:36] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:42:40] <PJBoy> I suspect this is a cmake issue
[17:42:53] <LordKalma> yere are as many dev prompts as there are vs versions
[17:42:54] <very_sneaky> there's a reasonably active cmake channel there too
[17:42:57] <PJBoy> I might just need to make a toolchain file and do that
[17:44:08] <very_sneaky> https://stackoverflow.com/questions/37149071/cmake-and-different-versions-of-visual-studio
[17:44:23] <very_sneaky> this suggests it's just a matter of passing different values to the `-G` flag
[17:45:52] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[17:46:10] <PJBoy> you can write the VS version in there?!
[17:46:14] <PJBoy> I'll try that then
[17:47:22] <PJBoy> dude why the hell can't cmake delete its crap
[17:47:32] <PJBoy> I hate deleting the cache file and CMakeFiles directory
[17:47:46] <very_sneaky> https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html
[17:48:59] <Haohmaru> !fact
[17:49:00] <nolyc> Haohmaru: The inline specifier shall not appear on a block scope declaration.
[17:49:13] <very_sneaky> could also be worht trying the ninja generator. iirc most of this was automated for me when i've done my testing on windows, and i think it used ninja by default though i could be wrong
[17:49:33] <PJBoy> now we're getting somewhere
[17:50:00] <very_sneaky> one thing you could try is cloning the package index, navigating to the openssl recipe and running `conan create . 3.0.1@user/experimental` and see what happens
[17:50:13] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Quit: Leaving)
[17:50:17] <PJBoy> ninja doesn't work with this project
[17:50:44] <PJBoy> for reasons I don't quite understand
[17:50:51] <PJBoy> but openssl is brought in as an ExternalProject
[17:50:58] <very_sneaky> ah
[17:51:04] <PJBoy> so I added the byproducts option for it on its libcrypto
[17:51:08] <PJBoy> and that got me closer to functioning
[17:51:28] <PJBoy> but it became increasingly clear that I was just doing stuff without any idea of what I was doing
[17:52:16] <PJBoy> ninja's on the todo list though
[17:52:33] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[17:55:14] <PJBoy> > Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
[17:55:16] <PJBoy> uhhhhhhh
[17:55:27] <PJBoy> yikes
[17:55:35] <PJBoy> that's what happens when I run `python3` on windows
[17:55:44] <PJBoy> I have to run `python` for python 3
[17:55:51] <very_sneaky> well, for shits and giggles, i just did what i suggested to you from within git bash
[17:55:53] <PJBoy> fuck microsoft for making that stupid MS store link though
[17:56:07] <very_sneaky> conan seems to activate the vs developer console environment by default
[17:58:50] <very_sneaky> and it seems to be building without issue for me
[17:59:40] <very_sneaky> how long does building openssl take? rough order of magnitude
[17:59:56] <PJBoy> a minute
[18:00:04] <PJBoy> on 24 cores
[18:01:04] <very_sneaky> so, in a vm with 8 cores... probably half an hour
[18:01:22] <PJBoy> mine was in a VM too fwiw
[18:01:35] <PJBoy> but that VM gets a lot of resource allocation
[18:01:40] <very_sneaky> actually it's done
[18:01:45] <very_sneaky> only took ~5 mins
[18:01:51] <PJBoy> yeah that sounds more reasonable
[18:02:00] <very_sneaky> yeah, so it just built for me fine
[18:02:14] <very_sneaky> might be worth trying for you to see if you can skip the cmake step
[18:02:21] <Haohmaru> huh, 4bit compression was easier to implement, it seems
[18:03:24] <rpav> Haohmaru: you're compressing nibbles?
[18:03:32] <Haohmaru> yeah
[18:04:10] <Haohmaru> the format is [4bit pattern] [4bit integer saying the number of repetitions of that pattern, minus one]
[18:04:17] <rpav> ah rle
[18:04:37] <Haohmaru> so 0x00 -> 0x01, 0x55 -> 0x51
[18:04:41] <PJBoy> specifying the -G flag was the secret hidden trick I needed
[18:04:51] <rpav> huffman is pretty easy to implement too though costlier on compression (if that matters)
[18:04:57] <very_sneaky> PJBoy: all working?
[18:04:57] <PJBoy> I was just completely unaware that you could specify the VS version itself through that
[18:05:02] <PJBoy> yeah all working
[18:05:06] <PJBoy> life is good again
[18:05:09] <very_sneaky> sweet
[18:05:18] <Haohmaru> maybe i should've implemented this as a template so you can specify the number of bits you wanna give for the "pattern" and thus for the "integer"
[18:05:46] <rpav> eh
[18:05:48] <very_sneaky> fwiw, the way i mentioned of cloning the index and creating the package manually is another way to get the packages into your local cache
[18:05:50] <Haohmaru> rpav not sure about huffman, the data is really a 1bit signal
[18:05:52] <rpav> you can always fix it if you need it
[18:05:58] <Haohmaru> supposedly shouldn't have much high freqs in it
[18:06:08] <very_sneaky> it doesn't necessarily have to be from consuming a conanfile.{txt,py} - and might help you debug some of the issues you're having
[18:06:26] *** Quits: fredi (~fredi@189.6.232.131) (Quit: leaving)
[18:06:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:06:41] <very_sneaky> though, once built in your local cache, if you do it to the anonymous user/channel, then it can be consumed by your consumer conanfile.{txt,py}
[18:06:47] <rpav> Haohmaru: not sure, you get better compression and it's fairly easy, but you need more space to store things during compression as i recall
[18:07:13] <rpav> what it is probably only matters if you _really_ know how your data optimally compresses
[18:07:18] <very_sneaky> a way of triggering one of your dependencies to build in isolation
[18:08:23] <very_sneaky> https://docs.conan.io/en/latest/reference/commands/creator/create.html
[18:08:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:10:28] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d1a:ba44:ae3c:70ae) (Quit: Konversation terminated!)
[18:12:08] <Haohmaru> i only know my data shouldn't have too much high freqs
[18:14:37] *** Quits: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:16:47] <xkoncek> can i declare the names of enum class member but define them later separately?
[18:18:24] <rpav> sucks Qt doesn't have more lambda-based overrides .. implementing them isn't hard; having to is what sucks
[18:24:20] *** Joins: evocatus (~evocatus@62.182.78.42)
[18:29:25] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:36:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:36:18] <rpav> bah isnt' it possible in lldb to log a debug session to a file
[18:37:01] <rpav> (apparently)
[18:38:27] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[18:40:42] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[18:43:54] *** Joins: proller (~p@2a02:6b8:b081:1214::1:1d)
[18:47:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:48:13] <PJBoy> man I really hate how tortoise's diff viewer marks spaces with dots
[18:48:51] <PJBoy> specifically the unified diff viewer
[18:48:59] <PJBoy> the non unified one has the option to turn it off
[18:53:00] *** Joins: rajkosto (~rajkosto@77-46-243-198.dynamic.isp.telekom.rs)
[18:56:11] *** Quits: rajkosto (~rajkosto@77-46-243-198.dynamic.isp.telekom.rs) (Client Quit)
[18:56:23] *** Joins: meator (~meator@user/meator)
[18:56:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:56:44] <PJBoy> hm
[18:57:05] <PJBoy> think this visual studio project is working?
[18:57:28] <PJBoy> but could definitely stand to be improved somehow
[18:58:56] *** Quits: proller (~p@2a02:6b8:b081:1214::1:1d) (Ping timeout: 268 seconds)
[18:59:41] <Alipha> xkoncek: no
[19:00:08] <Alipha> xkoncek: maybe just use an int and constants
[19:00:10] *** Quits: Tokamak (~Tokamak@172.58.188.122) (Ping timeout: 268 seconds)
[19:03:18] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[19:07:55] <PJBoy> damn, openssl is missing somehow
[19:11:57] <PJBoy> do I need to copy those libs from conan into the build directory?
[19:12:30] <rpav> autoconf is annoying if for no other reason than out-of-tree-builds often behave poorly; also, there are a lot of other reasons ;)
[19:12:46] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[19:14:26] <PJBoy> any way I can make conan not barf in my source directory?
[19:14:49] <LordKalma> mkdir build/; conan install ..
[19:14:56] <LordKalma> mkdir build/; cd build; conan install ..
[19:15:04] <LordKalma> just as you'd do with cmake?
[19:15:31] <PJBoy> I'm doing `mkdir ../build; cd ../build; conan install ../source`
[19:15:55] <LordKalma> yes, and I think thatÂ«s it
[19:16:00] <LordKalma> it only populates the build dir
[19:16:05] <LordKalma> it never contaminated source dir for me
[19:16:19] <PJBoy> :/
[19:16:53] <LordKalma> you can try -if INSTALL_FOLDER,
[19:16:55] <LordKalma> -if INSTALL_FOLDER *
[19:18:28] <xkoncek> Alipha have to go with typed structs and named static const members
[19:19:55] <Haohmaru> i think i'm liking the 4bit compressor more
[19:21:05] <PJBoy> just doing a super clean in case I mistakenly executed conan in source
[19:21:58] <Haohmaru> with the 1bit compressor, worst-case should be data like 0x55 which would turn out to 8 "compressed" bytes, that's pretty terrible, while with the 4bit worst case would be like 0xF0 which would turn into just 2 "compressed" bytes
[19:28:24] *** Quits: jokoon (~jokoon@185.61.188.186) (Quit: Client closed)
[19:28:55] <xkoncek> putting objects into a static library just puts them on the top level with no notion of file hierarchy
[19:29:09] <xkoncek> .o .o .o -> .a
[19:29:15] *** Joins: Simplar (~Simplar@188.163.93.76)
[19:29:24] <PJBoy> alright I must have run conan in source like an asshole
[19:29:28] <PJBoy> v_v
[19:30:36] * PJBoy tries statically linking openssl
[19:30:50] <Haohmaru> you what
[19:31:13] <xkoncek> saving yourself from future regressions, smart
[19:32:09] <PJBoy> :D
[19:32:43] <PJBoy> imagine LGPL
[19:32:50] <PJBoy> not being able to protect yourself from regressions
[19:33:18] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:37:13] <PJBoy> so what the heck do I do with conan to get the DLL
[19:37:21] <PJBoy> for the dynamically linked build
[19:38:01] <Haohmaru> something barbaric
[19:40:12] <cq-work> Conan works better with static builds.
[19:40:30] <LordKalma> conan works absolutely fine with shared builds
[19:40:38] <LordKalma> it's just that static builds don't have deployment issues
[19:40:46] <PJBoy> yeah copying the DLL files over, it all works out
[19:40:47] <cq-work> https://github.com/conan-io/conan/issues/7402
[19:41:15] <PJBoy> it's just that those DLLs are in C:\Users\me\.conan\data\openssl\3.0.0\_\_\package\fb45c2da544bb0f80ba3a2dfba73683cde626805\bin
[19:41:19] <cq-work> I'm not saying it doesn't work fine, I'm saying it works better.
[19:41:21] <PJBoy> which is like, wtf
[19:41:44] <cq-work> er, I'm saying static builds work better*
[19:42:32] <PJBoy> linked to these docs https://docs.conan.io/en/latest/reference/conanfile/methods.html#imports
[19:42:43] <PJBoy> seems actually straightforward?
[19:43:30] <cq-work> I'd really ask if distributing a DLL with your application is worth it. If you're using a distributions depedencies, you don't have to worry about it. If you're building for Windows, you're likely not going to benefit much from a DLL anyways.
[19:50:13] <PJBoy> well it means the DLL can be swapped out for openssl 3.1 one day
[19:50:26] <rpav> only if you overlook all the cases where building deps is a huge pita (or impossible) and distributing a dll is easy because that's what you get
[19:50:45] <LordKalma> PJBoy, you can copy all dlls from packages into your output directly
[19:50:48] <rpav> sdl2 is a good example, and glew iirc
[19:50:57] <PJBoy> LordKalma, just figured it out
[19:51:21] <PJBoy> put a `[imports] bin, *.dll -> ./bin` into the conanfile.txt
[19:51:26] <LordKalma> yes
[19:51:49] <PJBoy> and it didn't break the linux builds
[19:51:53] <PJBoy> which is kinda crazy
[19:54:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[19:56:21] <cq-work> Unless you have an update system that will effeciently swap out just the DLL, you're likely not going to just swap out the DLL itself.
[19:56:30] <cq-work> And Conan is literally meant to ease the building of dependencies.
[19:56:37] <cq-work> That's why you're using it.
[19:57:03] <PJBoy> and it does
[19:57:08] <rpav> conan the comqlicator
[19:57:10] <PJBoy> it provides me with that imports command
[19:57:20] <PJBoy> all is well in the world again
[19:57:32] <cq-work> Missing the point but at least the result is there.
[19:57:45] <PJBoy> I think it's a bit questionable that I had to do that step manually
[19:57:50] <PJBoy> but whatever
[19:57:56] <rpav> are you using conan_cmake or whatever?
[19:58:00] <PJBoy> conan probably doesn't understand DLLs
[19:58:10] <PJBoy> nah just conan and CMake
[19:58:23] <rpav> https://github.com/conan-io/cmake-conan
[19:58:31] <LordKalma> btw
[19:58:43] <LordKalma> cmake has a "find the dlls that this shit needs" command
[19:58:43] <PJBoy> I do want the cmake stuff as a standlone though
[19:58:47] <LordKalma> for use in install scripts :)
[19:58:50] <rpav> rather than "bunch of complicated setup + conanfile.txt" or whatever it's like "extra cmake command"
[19:58:59] <LordKalma> PJBoy, and it's the best flow
[19:59:02] <cq-work> I'd recommend against that, decoupling the packaging system from the build system is good design in my opinion.
[19:59:06] <LordKalma> I've used cmake-conan and it's easy
[19:59:12] <LordKalma> but yeah, not ideal for those reasons
[19:59:20] <PJBoy> I'd be inclined to agree
[20:00:21] <PJBoy> so far the working process is "svn checkout this shit", "conan install ../src --build=missing", do CMake + other stuff depending on programmer workflow
[20:00:55] <PJBoy> in this case programmer workflow is "cmake -G "Visual Studio 16 2019" ../src", "open project.sln in visual studio", "build"
[20:00:55] <rpav> more tears of suffering on which to feed ðŸ¤¤
[20:01:32] <PJBoy> but in other cases it'll be "open this directory in visual studio as a CMake project"
[20:01:42] <PJBoy> or "open this directory in VS Code with the CMake extension"
[20:03:57] <rpav> will llvm build with mold .. no apparently not ;/
[20:07:36] <PJBoy> so actually you can do all this work with conan using just conanfile.ttxt
[20:07:40] <PJBoy> no python needed
[20:09:02] <PJBoy> only thing left to tweak is this post-build event in visual studio
[20:09:07] <PJBoy> it's pretty awful
[20:11:31] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[20:13:03] <PJBoy> though I'm not entirely sure whose fault that is
[20:21:45] <rpav> i'm starting to think 64GB is the new dev-box minimum
[20:25:47] <kalven> that really depends..
[20:26:28] <cq-work> I still use vim and cmake on a 2GB laptop sometimes.
[20:26:42] <rpav> ok let me clarify, 4GB/core
[20:27:13] <Raziel> rpav, per physical core or logical core? :^)
[20:27:25] <rpav> like 2GB/core has been pretty sufficient for awhile but e.g. building llvm i'm nearly maxing swap
[20:27:40] <cq-work> Oh yeah... I wouldn't build chromium on that laptop lol
[20:27:42] <rpav> Raziel: per however many invocations of the compiler/linker you think will be simultaneous
[20:27:53] <cq-work> As a matter of fact, I often buy servers for the sole sake of building llvm or chromium...
[20:28:39] <rpav> yea if you need to build something giant bidding on some cheap/quick time on a distcc server is a nice way to go
[20:29:13] <rpav> i did that occasionally building gentoo stuff when i was using that .. a few pennies can get you an hour or so on a server you otherwise would be paying dollars for
[20:38:14] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:42:25] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:43:41] *** Quits: kaph (~kaph@151.47.131.129) (Ping timeout: 245 seconds)
[20:53:57] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:54:16] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 268 seconds)
[20:54:43] <PJBoy> ah ok, so it's the cmake post build stuff that's being ugly
[20:57:56] *** Quits: flynn (~mcbloch@user/flynn) (Quit: The Lounge - https://thelounge.chat)
[20:59:13] *** Joins: flynn (~mcbloch@user/flynn)
[21:05:23] <PJBoy> don't think there's any way to deuglify it :(
[21:10:15] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:24:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:11b2:2f3a:e95:308)
[21:25:30] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:31:06] <ashafq> Which C++ compiler supports C++20 modules?
[21:32:12] *** Joins: aniketgm (~Aniket@49.36.109.81)
[21:35:49] <rpav> VS / CL
[21:36:02] <rpav> i think clang has a branch
[21:36:38] <rpav> maybe gcc?
[21:38:45] <hnOsmium0001[m]> I think gcc at this point has better module support than clang (though IMO none of them are usable)
[21:39:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:59] *** ChanServ sets mode: +v npaperbot
[21:41:10] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[21:42:26] *** Joins: magla (~gelignite@55d4a813.access.ecotel.net)
[21:48:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:49:42] <ashafq> <rpav> i'm starting to think 64GB is the new dev-box minimum
[21:49:56] <ashafq> rpav: It's really useful if you're using docker/vm
[21:50:32] <ashafq> Often times, I would test my dev packages in VM
[21:51:13] <ashafq> rpav: Also, if you're building Yocto, the more cores and RAM the better.
[21:51:22] <rpav> yea a lot of big projects are kidna insane
[21:51:45] <rpav> i hope mold grows fast ðŸ˜‰ the linker is the biggest culprit
[21:51:58] <kalven> the machine I use at home has 16GB and works well for my hobby projects. My work box has 176GB ðŸ¤·
[21:52:57] <rpav> it all depends on what you build and how many compilers you run at once to do it
[21:53:35] <rpav> i've seen single processes chewing 10-15GB though and typically 3+
[21:53:46] <rpav> it's a bit stupid tbh
[21:54:17] *** Joins: sysctl (~user@88.215.77.255)
[21:59:53] <LordKalma> rpav, try other linker
[21:59:55] <LordKalma> like gold
[22:00:28] <LordKalma> kalven, why don't you just have a building farm at work?
[22:00:34] <kalven> I do
[22:00:38] *** Quits: aniketgm (~Aniket@49.36.109.81) (Quit: leaving)
[22:00:49] <LordKalma> and you still got a 170gm machine?
[22:00:51] <LordKalma> daaaamnnn
[22:00:53] <LordKalma> *gb
[22:02:37] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 240 seconds)
[22:04:20] <rpav> gold is going to be even worse
[22:04:22] <rpav> and slower
[22:04:26] *** Quits: meator (~meator@user/meator) (Ping timeout: 252 seconds)
[22:04:42] <LordKalma> I never remember which one is supposed to be the good one
[22:04:48] <rpav> i'm not sure how mold compares on ram but it doesn't work yet sadly
[22:04:59] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[22:05:01] <rpav> ld < gold < lld < mold
[22:05:07] <rpav> not sure if i'm missing any
[22:05:09] <LordKalma> ah ok ok thanks
[22:05:17] <LordKalma> link.exe? :D
[22:05:21] <rpav> with the exception that mold doesn't work on a lot of stuff, so ;)
[22:05:34] <rpav> not sure on that actually
[22:06:05] <kalven> LordKalma: the memory is a bit excessive.. https://i.imgur.com/z6UfhmQ.png
[22:08:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:08:46] <LordKalma> 128 core machine?
[22:09:10] <kalven> 96 (48 with smt)
[22:10:08] <LordKalma> ah those are all of them, ok
[22:18:54] <rpav> 176 is like barely enough for 48, less than 2GB/core at 96 ;/
[22:21:09] <AmR> Any one look at https://github.com/KDAB/KDBindings ?
[22:21:45] <kalven> you have bigger issues if every unit you're building is causing the compiler to use 2gb
[22:28:29] <Raziel> "we were supposed to be a unit!" - the several hundred MBs of headers, probably
[22:29:54] <hnOsmium0001[m]> AmR: looks like a standalone version of the stuff offer in qt?
[22:30:04] <hnOsmium0001[m]> it would've been usefult if it had been a thin ga year ago, I already hand rolled a bunch of the stuff in there for my personal project lol
[22:31:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305) (Ping timeout: 240 seconds)
[22:31:42] *** Joins: meator (~meator@user/meator)
[22:34:13] <LordKalma> C++ bindings are available in 6.2
[22:34:27] <LordKalma> out of the box
[22:36:58] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 256 seconds)
[22:37:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:38:49] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[22:40:42] *** Joins: xkuru (~xkuru@user/xkuru)
[22:41:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:42:30] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Client Quit)
[22:43:17] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:45:53] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[22:49:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:51:52] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:54:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[23:00:18] *** Joins: andreasbuhr (~quassel@p549db7a9.dip0.t-ipconnect.de)
[23:00:30] *** Quits: andreasbuhr (~quassel@p549db7a9.dip0.t-ipconnect.de) (Client Quit)
[23:03:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7d33:9c49:8a76:cfa0) (Quit: Quit)
[23:05:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e0f7:dc28:dd0d:f0d5)
[23:13:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:11b2:2f3a:e95:308) (Ping timeout: 240 seconds)
[23:16:38] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[23:17:26] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Read error: Connection reset by peer)
[23:17:59] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[23:18:42] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:22:51] <LordKalma> finally learned how to use vscode to develop *inside* the docker ontainer
[23:22:52] <LordKalma> pretty cool
[23:23:01] <LordKalma> sincec I was duplicated the environment between my machine and the container
[23:24:00] *** Joins: proller (~p@2a02:6b8:b081:8814::1:24)
[23:25:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:32:17] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[23:34:38] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:34:50] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:36:24] *** Quits: namo (~nomo@95.87.208.95) (Quit: Leaving)
[23:36:37] *** Joins: namo (~nomo@95.87.208.95)
[23:37:42] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[23:39:42] *** Joins: Terminus (~null@user/terminus)
[23:43:17] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 240 seconds)
[23:51:08] *** Joins: jwillikers (~jwilliker@2604:2800:2:a401:45e7:7e6b:1111:1b5c)
[23:57:06] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[23:59:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:59:17] *** Quits: jwillikers (~jwilliker@2604:2800:2:a401:45e7:7e6b:1111:1b5c) (Remote host closed the connection)
