[00:01:03] *** Quits: amb007 (~a_bakic@66.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:01:34] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:07:26] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 268 seconds)
[00:08:02] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[00:08:44] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[00:09:00] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:09:30] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[00:10:34] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:13:03] <jackdaniel> I find it the most annoying that it complains about &optional and &key parameters in the same lambda list
[00:13:06] <Guest74> jcowan: thankfully I'm not doing any of that. Only graphics related stuff, but anybody can use the ioctl macros to make kernel interface headers easy to convert.
[00:13:07] <jackdaniel> like - duh, I know
[00:15:39] <Guest74> I don't know why but i had a lot of optional then key stuff, but now i just find it annoying.
[00:17:01] *** Joins: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[00:17:05] <jackdaniel> you don't always have control over the specification
[00:17:32] <Xach> i do like that you can patch things like that out fairly easily
[00:18:01] <Guest74> jd: that's when you write a new specification :)
[00:18:11] <jackdaniel> that's not how stable api works
[00:18:40] <Guest74> I don't know what that means :)
[00:18:54] <jackdaniel> I know
[00:18:59] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:19:23] <Guest74> I wish there was an easy way to change all calls across a bunch of systems.
[00:19:29] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 250 seconds)
[00:19:36] <Guest74> cause i do keep changing my api.
[00:19:41] <Guest74> s
[00:20:03] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:28:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[00:31:13] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[00:35:49] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[00:40:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[00:45:24] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[00:46:01] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[00:46:06] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[00:47:01] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 245 seconds)
[00:47:16] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[01:00:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:01:35] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Quit: @)
[01:01:53] <Guest74> I've just noticed that when a package has a . in it slime onlydisplays what's after the period when in the package. Is this supposed to be like this?
[01:07:12] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:07:29] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:07:51] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[01:09:06] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[01:10:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:15:18] <pjb> Guest74: type: /nick somehonestnick
[01:15:28] <pjb> somehonestnick: yes.
[01:16:13] <rotateq> pjb: hehe
[01:16:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:16:32] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[01:16:44] <Guest74> pjb: have you seen the nicks on here???
[01:16:56] <pjb> choose a better one.
[01:16:57] <rotateq> what about them?
[01:17:17] <Guest74> mines as 'honest' as any of them.
[01:17:39] <rotateq> ahh sure. and mnemonic :)
[01:18:10] <Guest74> probably the most literally accurate as well.
[01:20:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[01:30:41] <etimmons> How? I doubt anyone here would really consider you a guest any more
[01:30:43] <theothornhill> I'm working on a compiler where I have an AST, and a hash-table with keys as type names pointing to ast nodes.  I want to access both of these regularly from other functions.  What is best practice here?  I was thinking of creating a macro such as `with-ensured-ast` that either returns a memoized ast and hash-table or initializes one.  Or I could suck it up and ensure that all functions that need them get them as parameters.
[01:31:05] <theothornhill> Is dynamically binding it the way to go?
[01:32:27] <theothornhill> Now i just remember to (let ((*schema* (build-schema "..."))) ...) everytime I do things
[01:32:55] <semz> I'd probably go for a dynamic variable, especially if that table is essentially global during the compilation.
[01:34:02] <theothornhill> Yeah, it is. So you just decide the entry point, bind it and hope for the best?
[01:35:02] <White_Flame> +1 for defvar.  It's side-band contextual information for your accessing calls
[01:35:19] *** Joins: jpl01 (~user@2001:16b8:4958:4c00:e970:62e1:adda:dadb)
[01:35:42] <theothornhill> Ok thanks, I'll get back to it then :)
[01:36:38] <semz> Yes. If you want a little less hoping during development, it might help to set the variable's default value to something that cannot possibly do anything but blow up instantly.
[01:36:44] <White_Flame> btw, I'd also make a with-ensured-ast which creates the dynamic bindings for you
[01:37:48] <semz> e.g. NIL if it's a hashtable, or :invalid if it's a list. Not always possible though, depending on the intended type.
[01:38:15] <White_Flame> DEFVAR can actually leave the value unbound, too
[01:38:22] <theothornhill> Yeah, I was just putting that off until I made a decision
[01:38:25] <White_Flame> well, bound with no value, or whatever it's properly worded as
[01:39:14] <theothornhill> Well the ast is just an instance of an object and the table a table, so nil will break things nicely
[01:41:05] <semz> Neat, that avoids the edge case where there is no good value.
[01:45:43] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:46:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:51:52] <Guest74> etimmons: it's like a low slashdot id before they sold out.  I'm the 74th guest! this will be mint in a few years.
[01:52:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:53:48] *** Joins: Bike (~Bike@71.69.170.70)
[01:53:48] *** ChanServ sets mode: +o Bike
[01:56:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:56:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:58:32] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 240 seconds)
[02:04:17] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[02:09:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:16:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:19:20] *** Joins: akoana (~ah@user/akoana)
[02:26:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:32:46] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[02:35:42] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 260 seconds)
[02:39:17] *** Joins: dra (~dra@2a04:4540:641d:2a00:7dc9:276a:ebaa:f765)
[02:44:04] <phantomics> quick question: is there a standard way in CL to make a rational number other than (/ x y)? In SBCL, there's a sb-kernel function called (build-rational) that does this, but I can't find anything that's implementation-independent
[02:44:16] <Guest74> rational
[02:44:21] <Guest74> rationalize
[02:44:56] <phantomics> Those take a single argument converting a number to rational, I was talking about a function that takes the numerator and denominator as its args
[02:48:18] <semz> if you're building them from integers, / seems like the obvious way
[02:48:51] <rotateq> phantomics: and when you use something like (/ (the integer x) (the integer y)) ?
[02:49:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:49:59] <phantomics> Using (/ x y) gets you the rational, wasn't sure if there were problems with that method since utilities within SBCL use (build-rational x y)
[02:50:14] *** Joins: form_feed (~form_feed@user/f/x-7101985)
[02:52:57] <semz> it's probably that / is generic and needs to be built from something implementation-dependent
[02:56:10] <phantomics> Then I suppose using / outside of the internal functions of an implementation is fine
[02:57:11] *** Quits: pve (~pve@188-67-191-164.bb.dnainternet.fi) (Quit: leaving)
[02:58:10] <Guest74> jackdaniel: seeing as how you're a fan of stable things maybe you can help me out.  For linux keysyms I can't decide how to handle keysyms that have an upper and lower case.  e.g.  |Greek-IOTA|  |Greek-iota| . I'm not a fan of having everything having pipes, but not too comfortable with only some having pipes. wondering if should make those go to
[02:58:11] <Guest74> something like GREEK-SMALL-LETTER-IOTA
[03:04:56] *** Quits: gaqwas (~john@dynamic-077-004-185-088.77.4.pool.telefonica.de) (Ping timeout: 245 seconds)
[03:06:52] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 268 seconds)
[03:07:25] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[03:12:22] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[03:14:51] <pjb> Î¹
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1065) (Remote host closed the connection)
[03:18:02] *** Joins: Jing (~hedgehog@2604:a840:3::1065)
[03:38:49] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:39:34] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 268 seconds)
[03:41:05] *** Joins: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c)
[04:00:06] *** Quits: dra (~dra@2a04:4540:641d:2a00:7dc9:276a:ebaa:f765) (Quit: Leaving)
[04:15:27] *** Quits: Jing (~hedgehog@2604:a840:3::1065) (Remote host closed the connection)
[04:16:18] *** Joins: Jing (~hedgehog@2604:a840:3::1065)
[04:33:49] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[04:39:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:40:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:40:54] *** Joins: s-liao (~s-liao@101.86.101.83)
[04:52:30] *** Joins: Oladon (~olad@98.43.81.226)
[04:56:53] <hobo> so, I wrote a chat program to learn CL, and I currently connect to the server via telnet. One thing I noticed is that if the user is in the middle of typing, and they receive a message, then the input gets broken up.
[04:57:00] <hobo> Is there a way to prevent that from happening?
[04:57:06] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[04:57:35] <semz> that's a problem with your terminal
[04:57:43] <hobo> ideally, the incoming message appears above the prompt and their input remains untouched
[04:57:47] <hobo> ah, okay.
[04:58:37] <semz> running the program through something like rlwrap might be enough to fix that
[04:59:03] <ns12> pjb: Regarding defstruct: thank you.
[05:00:03] <semz> alternatively you could use something like curses on the Lisp side or output the necessary control codes yourself, but that might go beyond the scope of a beginner project
[05:00:43] *** Quits: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:01:34] <hobo> i wonder how MUDs do it
[05:01:55] <hobo> I remember using telnet to connect to MUDs on *nix and Windows.
[05:02:31] <hobo> maybe curses is the next piece of the project :)
[05:06:13] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[05:10:08] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[05:13:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[05:21:25] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:22:00] <phantomics> hobo: for curses, you should check out the croatoan library
[05:24:02] <phantomics> The concept of curses is pretty simple: you can get the dimensions of the screen, move the cursor to a given point and enter characters. What you want to do is keep track of where the user's cursor is, and then when a new message comes in, you rewrite all the text in the chat area above the entry area, then when finished, move it back to where the user had the cursor before the message came in
[05:24:17] <phantomics> That way the text entry process feels seamless for the user
[05:29:26] <hobo> to be clear, would i need to write a separate curses client, or can I just send the telnet client the screen buffer?
[05:30:33] <hobo> i wonder how i'd get the client's screen size.
[05:33:07] <phantomics> curses has a method to get the screen size, croatoan exposes it, see: https://github.com/McParen/croatoan/blob/master/test/evolution.lisp
[05:33:16] <phantomics> As for buffers, not sure
[05:33:44] <phantomics> See the (width) and (height) methods on that page
[05:41:19] <hobo> phantomics: thank you for the references.
[05:41:39] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:41:58] *** Joins: Oladon1 (~olad@98.43.81.226)
[05:42:42] <phantomics> anytime hobo
[05:42:46] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (Quit: Ex-Chat)
[05:43:07] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 256 seconds)
[05:45:29] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:45:42] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:47:01] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Quit: Leaving)
[05:47:57] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:48:54] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:52:01] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:52:30] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[05:55:21] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[06:00:09] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 268 seconds)
[06:08:56] *** Quits: jpl01 (~user@2001:16b8:4958:4c00:e970:62e1:adda:dadb) (Remote host closed the connection)
[06:10:20] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:12:14] *** Joins: notzmv (~zmv@user/notzmv)
[06:15:03] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[06:16:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:18:01] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[06:24:49] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 268 seconds)
[06:29:02] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[06:30:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:31:37] *** Quits: green_ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[06:39:50] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Read error: Connection reset by peer)
[06:41:36] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 245 seconds)
[06:53:32] *** Quits: prxq_ (~quassel@x4db31002.dyn.telefonica.de) (Ping timeout: 240 seconds)
[06:54:11] *** Joins: prxq (~quassel@x4dbe733d.dyn.telefonica.de)
[06:55:47] *** Joins: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net)
[06:57:56] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[07:02:28] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[07:20:11] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[07:20:24] <hayley> I just got SIMD scanning working in my regex engine. It is now about three times as fast as Hyperscan at finding resolutions in my Xorg.0.log apparently.
[07:22:24] <White_Flame> hobo: are you sure you used raw telnet for muds, and not something like tinyfugue?
[07:22:31] <White_Flame> because yes, MUDs have the same problem
[07:28:47] *** Quits: Jing (~hedgehog@2604:a840:3::1065) (Remote host closed the connection)
[07:29:21] *** Joins: Jing (~hedgehog@125.105.11.101)
[07:30:42] <beach> Good morning everyone!
[07:35:12] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:37:01] <phantomics> Morning beach
[07:39:36] <phantomics> Interesting thing I just discovered in LispWorks: (expt 10.0d0 10) gives 1.000000000000004D10, the 4 is not there in other CLs. Causes problems when taking the ceiling of the result
[07:41:35] <Nilby> hayley: just don't sell out to intel, or if you do make sure to get a big ask like qpx
[07:42:31] <hayley> Nilby: Too late, they already bought Hyperscan in 2013.
[07:42:56] <Nilby> I know, I mean your faster code :)
[07:42:57] <hayley> Note to self: sell out to AMD.
[07:43:06] <phantomics> Is this a CL regex engine? Distinct from cl-ppcre?
[07:43:16] <hayley> Right.
[07:43:22] <hayley> https://github.com/telekons/one-more-re-nightmare
[07:43:47] <hayley> Not quite as "feature"ful, given that I have to generate a DFA from everything, but it's pretty fast in return, even without SIMD.
[07:44:41] <phantomics> Cool, I'll have tackle SIMD at some point for April, I take it the SIMD is using define-vop and only works with SBCL?
[07:44:46] <beach> hayley: Congratulations!
[07:44:55] <hayley> Thanks!
[07:45:00] <hayley> phantomics: Right and right.
[07:45:30] *** Joins: s-liao (~s-liao@101.86.101.83)
[07:46:46] <semz> phantomics: A program that relies on this exact behavior sounds misdesigned to me, the same way a program using exact FP comparisons would.
[07:47:20] <hayley> I guess LispWorks uses another float parsing algorithm?
[07:47:43] <phantomics> I guess, I've found a few inconsistencies in its float handling
[07:48:11] <phantomics> It also has a tendency to lock up a lot during intensive April computations, maybe it's a problem with the multithreading
[07:48:35] <phantomics> I have to do C-c and select (CONTINUE) to get it going again
[07:48:58] <hayley> Ouch.
[07:52:12] <phantomics> ECL sometimes locks up once or twice when doing the intensive demo test suite, but LW locks up a dozen times or so needing manual restarts. SBCL, CCL, and ABCL get through it fine.
[07:53:24] <beach> I think you should report it to LispWorks.  I am sure they will appreciate the feedback.
[07:54:32] <phantomics> I figured they'd send me a bill for requesting tech support
[07:57:15] <beach> I don't think so.  Martin Simmons seems like a very reasonable person.  At least when we have diner together at ELS. :)
[07:57:39] * beach is assuming Martin is still in charge. 
[07:59:07] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[07:59:51] <phantomics> I'll give them a try then
[08:02:34] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[08:04:13] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[08:12:30] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[08:12:43] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:17:32] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[08:19:26] *** Quits: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26) (Quit: ERC (IRC client for Emacs 27.1))
[08:19:31] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:25:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:25:56] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[08:26:18] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:27:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:32:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[08:32:48] *** Joins: semz (~none@user/semz)
[08:35:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:39:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:40:47] *** Quits: Oladon1 (~olad@98.43.81.226) (Quit: Leaving.)
[08:41:37] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:43:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:49:47] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[09:06:47] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[09:07:01] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[09:41:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[09:42:15] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 256 seconds)
[09:44:25] *** Joins: Oladon (~olad@98.43.81.226)
[10:01:36] <White_Flame> phantomics: CLHS says that "a floating point approximation might result" for anything but (expt <rational> <integer>)
[10:02:20] <phantomics> Makes sense, all other CLs give the same result though
[10:08:44] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[10:14:19] *** Joins: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[10:16:46] *** Quits: neocron (~NeoCron@p200300c4cf3f7e00320b69bf1a44e74d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:21:09] <susam> Good morning, #commonlisp!
[10:22:42] <beach> Hello susam.
[10:22:54] <susam> Hello beach!
[10:29:42] <phantomics> Morning susam
[10:41:20] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[10:54:05] <susam> Hello phantomics!
[10:54:06] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 245 seconds)
[11:12:46] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[11:17:26] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 245 seconds)
[11:18:36] <jackdaniel> Guest74: I don't understand what I could help you with
[11:19:32] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:19:56] <jackdaniel> n.b I'm not "a fan of stable things" - most notably I'm not that cool (a pun towards the word "fan"), but changing stable apis breaks existing code - mind that no common lisp implementation changed nth argument order to match elt, even if someone could have thought that it is a good idea :)
[11:21:03] <jackdaniel> or that changing the interface of with-output-to-presentation in a non-backward compatible way would break many preexisting clim applications
[11:29:10] *** Joins: gaqwas (~john@dynamic-077-007-070-034.77.7.pool.telefonica.de)
[11:33:05] *** Quits: pok (~pok@user/pok) (Ping timeout: 265 seconds)
[11:36:03] <beach> jackdaniel: It would be much easier to parse what you wrote if you would capitalize NTH, ELT, API, and CLIM.
[11:36:55] <jackdaniel> duly noted, thanks
[11:36:55] <beach> "nth argument order" took me quite some time to figure out.
[11:37:30] <jackdaniel> yes, I can tell in hindsight that it could be clearer
[11:39:26] *** Joins: pok (~pok@castor.klingenberg.no)
[11:39:26] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[11:39:26] *** Joins: pok (~pok@user/pok)
[11:40:16] *** Joins: attila_lendvai (~alendvai@catv-176-63-3-39.catv.broadband.hu)
[11:43:16] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 245 seconds)
[11:43:47] *** Joins: amb007 (~a_bakic@98.245.204.77.rev.sfr.net)
[12:13:07] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[12:15:33] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[12:16:54] *** Joins: taiju (~taiju@210.160.37.45)
[12:22:03] *** Quits: amb007 (~a_bakic@98.245.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[12:23:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:23:48] *** Quits: taiju (~taiju@210.160.37.45) (Ping timeout: 256 seconds)
[12:28:42] *** Joins: pve (~pve@37-33-108-186.bb.dnainternet.fi)
[12:28:54] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[12:32:48] *** Joins: s-liao (~s-liao@101.86.99.70)
[12:37:38] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[12:38:11] *** Joins: Alfr (~Alfr@user/alfr)
[12:39:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:45:31] *** Joins: nature (~nature@45.32.235.173)
[12:50:02] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[13:00:11] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[13:10:49] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 250 seconds)
[13:15:30] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[13:30:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:31:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:36:39] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 265 seconds)
[14:03:43] *** Joins: x88x88x (~cheeg@218.212.160.154)
[14:13:28] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[14:13:44] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[14:22:30] *** Joins: lisp123w (~user@80.227.170.170)
[14:23:20] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:32:05] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:42:23] *** Quits: pok (~pok@user/pok) (Ping timeout: 265 seconds)
[14:51:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:52:37] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[14:55:08] <pjb> jackdaniel: beach: would I suggest to use instead ð§ð­ð¡, ðð¥ð­, ððð, ðððð, given the flame you can get when using upper case?
[14:56:10] *** Joins: VincentVega (~user@212.241.29.202)
[14:56:10] <hayley> pjb: (I AM NOT SHOUTING THANK-YOU VERY MUCH)
[14:58:00] *** Quits: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c) (Quit: Leaving)
[14:59:35] *** Quits: x88x88x (~cheeg@218.212.160.154) (Ping timeout: 256 seconds)
[15:01:03] <pjb> hayley: exactly. You're just using a nice typographical feature.
[15:01:32] <pjb> But I've been forced to (setf *print-case* :downcase); I'm traumatised!
[15:13:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[15:14:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:22:16] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:33:59] *** Joins: amb007 (~a_bakic@230.247.204.77.rev.sfr.net)
[15:34:15] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:36:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:40:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[15:52:09] *** Joins: cage (~cage@dynamic-adsl-84-220-230-36.clienti.tiscali.it)
[16:14:06] *** Joins: makomo (~makomo@user/makomo)
[16:14:06] *** Quits: amb007 (~a_bakic@230.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:14:45] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[16:15:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:31] *** Joins: yewscion (~yewscion@52.94.133.128)
[16:32:23] *** Quits: yewscion (~yewscion@52.94.133.128) (Remote host closed the connection)
[16:34:18] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 260 seconds)
[16:46:29] <pdietz> phantomics: in SBCL, expt will sometimes give different results on the same arguments depending on whether they appear as variables or constants in the form.
[16:48:07] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:48:22] <pdietz> (expt -1.0d0 1/2) ==> #C(6.123233995736766d-17 1.0d0)
[16:48:53] <pdietz> (funcall (lambda (x) (expt x 1/2)) -1.0d0) ==> #C(0.0d0 1.0d0)
[16:50:58] *** Joins: VincentV` (~user@212.241.29.202)
[16:52:32] *** Quits: VincentVega (~user@212.241.29.202) (Ping timeout: 240 seconds)
[17:02:00] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:02:20] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[17:02:36] *** Joins: theothor` (~user@217.84-49-191.nextgentel.com)
[17:02:52] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[17:03:29] *** Quits: theothor` (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[17:03:49] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[17:06:40] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[17:06:59] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[17:33:11] *** Quits: kdlv (~kdlv@user/kdlv) (Quit: The Lounge - https://thelounge.chat)
[17:34:21] *** Joins: kdlv (~kdlv@user/kdlv)
[17:36:15] *** Joins: casionaut (~casionaut@user/casionaut)
[17:42:22] *** Joins: cosimone` (~user@93-44-184-115.ip98.fastwebnet.it)
[17:44:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[17:57:47] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:02:29] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[18:02:46] *** Joins: casionaut (~casionaut@user/casionaut)
[18:03:11] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 256 seconds)
[18:08:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:22:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[18:24:13] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:33:09] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[18:33:50] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[18:37:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:38:03] *** Joins: AndrewYu (~andrew@user/andrewyu)
[18:40:45] <AndrewYu> Hey there- I'm here to ask: How feasible would it be to create a Lisp dialect that's as powerful as common lisp, but slightly more elegant (like towards Scheme). An example would be cleaning up the eq equal = eql mess. I'm pretty new, so I'm not sure how many of those pragmatic/syntax comprimises there are. I'd appreciate somehow a list of those weird comprimises. Thanks!
[18:41:53] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[18:42:17] <frgo> AndrewYu: Well. Difficult to answer. I'm quite happy with the "eq equal = eql mess".
[18:43:36] <jackdaniel> AndrewYu: equality is a hard problem :) regarding question of how to make something as powerful as common lisp but more elegant (i.e more tailored for your taste), create a separate package that doesn't USE the package CL and define your own abstractions
[18:43:38] *** Joins: x88x88x (~cheeg@218.212.160.154)
[18:44:04] <jackdaniel> (i.e with only eql function, without equal, eq, = etc)
[18:44:48] <frgo> I do have a question myself. Anybody have a readily running c2ffi (from https://github.com/rpav/c2ffi) on macOS Monterey? (I'm having issues with building it on Monterey and, well, yak shaving ...)
[18:44:49] <jackdaniel> AndrewYu: this library is a fine example: https://github.com/rongarret/ergolib
[18:45:45] <jackdaniel> AndrewYu: if you look for a different lisp somewhere between scheme and common lisp take a look at eulisp, afaik it has around three implementations, perhaps they even build
[18:46:12] <phantomics> Interesting, thanks pdietz
[18:46:23] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[18:48:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:49:39] *** Quits: x88x88x (~cheeg@218.212.160.154) (Ping timeout: 256 seconds)
[18:50:54] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:54:58] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Read error: Connection reset by peer)
[18:55:56] *** Joins: igemnace (~ian@user/igemnace)
[19:00:48] *** Joins: paule32 (~paule32@user/paule32)
[19:04:35] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:08:16] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:11:14] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:15:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:15:40] <pjb> AndrewYu: it wouldn't be too difficult: it's already done. It's called ISO Lisp.  There are several implementations. http://christian.jullien.free.fr http://www.islisp.org https://github.com/sasagawa888/eisl etc.
[19:19:25] <jcowan> "ISLISP" means "IS LISP".  There never has been, and by McCarthy's will never will be, a standard or implementation called just "Lisp" (the Scheme community extends that to "Scheme")
[19:20:15] <jcowan> s1/will/Will
[19:20:28] <jackdaniel> sure there is, I've made a symlink "lisp" to ecl, so it clearly /is lisp/ ;)
[19:20:34] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:20:46] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:23:55] <jcowan> But that doesn't change the public world.  It is no secret that many U.S. diplomats abroad are spies.  But for the U.S. Government to announce "Many of our diplomats abroad are spies" would change the public world hugely.  See also the jealous husbands who all shoot their wives on day N after a newcomer arrives, where N = number of jealous husbands.
[19:25:01] <jackdaniel> return EDOESNTCOMPUTE;
[19:27:04] <beach> jcowan: Er, what?
[19:27:30] <jcowan> With every day that passes and no wife shot (that never happens without proof), public knowledge grows, and eventually each husband knows that his wife (and all others) have been adulterous, so they are all shot on the same day
[19:27:33] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[19:28:13] <jackdaniel> I don't understand, but I have a strong suspiction that it is (pick at least one) 1) nonsense, 2) offtopic
[19:28:26] <jackdaniel> or no, pick at least two
[19:30:38] <beach> AndrewYu: Your premise is wrong.  The equality thing is not a mess.  It exists pretty much by necessity, as the page by Kent Pitman explains.  The fact that you recognize that you are new, should also perhaps indicate that what you consider "weird compromises" may in fact exit for good reasons.
[19:31:52] <beach> *exist
[19:32:36] <Guest74> @jackdani
[19:32:41] <Guest74> :)
[19:32:56] <Guest74> I guess you can't.
[19:34:26] <Guest74> it seems any time I try and ask questions related to developing a stable api I get no feedback.  I guess I might be weird in trying to develop a comfortable stable api first instead of not changing an api so that it remains stable.
[19:35:01] <jcowan> https://en.wikipedia.org/wiki/Induction_puzzles doesn't explain this particular puzzles, but the rest on that page are all of the same type.
[19:35:32] <beach> Guest74: Is this the IOCTL API still?
[19:35:37] <jackdaniel> I'm not sure how many questions and where you have asked but I agree that starting with an API and only after then implementing is not a good idea unless you have specification
[19:35:38] <jcowan> You don't know if it's comfortable until you've actually used it.
[19:36:07] <Guest74> I'm a big fan of not writing a specification until you have something that works nicely.
[19:36:29] <jackdaniel> sounds cool (another "fan" pun)
[19:36:40] <Guest74> beach: ioctl, drawing,  x11 utils, etc...
[19:37:24] <beach> Guest74: I don't recall seeing a suggested API.
[19:37:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:37:41] <jcowan> I think almost the opposite: write a spec followed by tests and code, and be prepared to change any of them as you go.  At the end they should all agree (modulo inevitable bugs).
[19:39:04] <jcowan> I always tell someone implementing one of my specs to complain if something is too hard or Just Wrong, because the fault is most likely in the spec.
[19:40:46] <Guest74> i would think the first part of writing a spec would be getting feedback from people in the field, as was done with the common lisp spec.
[19:41:29] <beach> Guest74: Did you give links to the suggestions you want feedback on?
[19:42:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:43:31] <jcowan> Sure.  Or proxies in the form of existing implementations.
[19:43:49] <_death> you start with something instable and use it in diverse contexts, each time changing it to fit while keeping other desiderata.. with such use, it may become more stable.. writing documentation or tests help because these are very different contexts of "use"
[19:44:33] <Guest74> that's what I currently do.  Trying to clean everything up now.
[19:45:30] <beach> Guest74: I don't understand.  Do you want feedback on something that has not yet been suggested?
[19:46:01] <jcowan> Oh, the puzzle I mentioned *is* on that page with genders reversed as "Josephine's Problem" with full details and the solution.  Nuf sed.
[19:46:48] <Guest74> beach: what I was talking about yesterday was representation of linux key symbols.
[19:48:11] <jackdaniel> that wasn't a very comprehensible proposal now, was it?
[19:48:14] <beach> Guest74: I think you need to write down a fairly complete suggestion and then provide a link to it.
[19:48:52] <Guest74> it's a representation of a keysym, how much detail do you need???
[19:49:26] <beach> Never mind.
[19:49:41] <jackdaniel> a good start would be i.e some context :)
[19:50:05] <beach> I was going to say that, but decided to drop it.
[19:50:07] <Guest74> I guess nobody uses keysyms in linux.
[19:50:25] <beach> Context and issues, pros and cons, stuff like that.
[19:52:36] <Guest74> keysyms map key codes, what you get from a keyboard, to a printable or non printable symbol, such as TAB or Keypad-1.
[19:53:16] *** Quits: kdlv (~kdlv@user/kdlv) (Quit: The Lounge - https://thelounge.chat)
[19:53:18] <Guest74> you use them for binding keypress to functions or to get support for non standard characters.
[19:53:38] <Guest74> under linux, they're the same for the console as x11.
[19:53:41] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[19:53:51] <frgo> Juist for the record: c2ffi problem solved. I now have a running c2ffi on macOS Monterey.
[19:53:58] <jackdaniel> frgo: congrats
[19:54:02] <jackdaniel> was it a problem in c2ffi?
[19:54:46] *** Joins: kdlv (~kdlv@user/kdlv)
[19:55:06] <beach> Guest74: What does CLX do?  Is there something wrong with that?
[19:55:17] <frgo> It was the fact that Apple decides to move the installation location of Clang and tools around and also that homebrew installs now in /opt/homebrew/... and no more under /usr/local/homebrew/...
[19:56:25] <beach> Guest74: Again, you should write things down on a page an provide a link to it.  It should contain existing practice like CLX, CLIM, etc.  Also several suggestions with comparisons and pros/cons.  Otherwise, I am afraid "feedback" is not meaningful.
[19:56:31] *** Joins: makomo (~makomo@user/makomo)
[19:57:18] <Guest74> beach: it's not ideal, and part of the difficulty in getting better keyboard support in clx.
[19:57:21] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[19:57:41] *** Joins: makomo (~makomo@user/makomo)
[19:57:53] <jackdaniel> frgo: I see; if I had a penny each time I hear about some issue due to osx changes I'd be able to buy a lollipop :)
[19:58:18] <beach> Guest74: I give up.  I have given you all the advice I have.
[19:58:57] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[19:59:07] *** Joins: makomo (~makomo@user/makomo)
[19:59:57] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[20:00:14] *** Joins: makomo (~makomo@user/makomo)
[20:00:18] <Guest74> for example, they use keywords for case dependent keysyms and so erroneously have :c_h eql to :C_H
[20:00:43] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[20:01:01] *** Joins: makomo (~makomo@user/makomo)
[20:02:50] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 265 seconds)
[20:04:00] *** Joins: random-nick (~random-ni@87.116.180.220)
[20:04:07] <frgo> jackdaniel: A ton of them!
[20:04:28] <jackdaniel> :)
[20:05:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:05:15] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:06:15] <etimmons> Monterey broke cl-plus-ssl
[20:06:36] <frgo> etimmons: In what way?
[20:07:38] <etimmons> <https://github.com/cl-plus-ssl/cl-plus-ssl/issues/138> and the later comments on <https://github.com/cl-plus-ssl/cl-plus-ssl/issues/114>
[20:09:40] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[20:09:57] <etimmons> Apple decided that loading the unversioned libcrypto or libssl should abort the process. Then, Monterey introduced a change (seeems to be a bug, but who knows with Apple) such that calling dlopen on a non-existent absolute path will result in the OS "helpfully" searching some standard locations to try and find the lib
[20:11:23] <frgo> Ah! Hm. - I have my own way of dealing with things like this: Do not assume any "load paths" within a CFFI library definition. This *has* to be decided by the OS. So I always set my DYLD_LIBRARY_PATH accordingly and have no issues like that.
[20:11:51] <etimmons> cl-plus-ssl tries to load the library from a bunch of places to deal with macports/homebrew/fink/pick your poison. If the first one it tries doesn't exist, your process is aborted
[20:12:49] *** Joins: anddam (~anddam@user/anddam)
[20:13:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[20:13:03] <etimmons> Yeah, it seems like the solution is going to be similar to what you want. cl-plus-ssl will likely try only the system provided libs. If you want anyother version you have to set it up some other way.
[20:13:31] <frgo> Using my approach just solves this kind of issue - putting the burden on the application user or a clever script around the application.
[20:15:21] <AndrewYu> beach: True. My problem is with the names---it'd be better to name eq something like 'pointer-equal?', instead of random abbreviations, if i'm right
[20:15:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:16:24] <AndrewYu> jackdaniel: That's a fine point! Will dig into that today morning (12AM lol)
[20:16:29] <AndrewYu> Thanks :D
[20:16:54] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[20:17:00] <jackdaniel> AndrewYu: generally you are right, some names may seem obscure, but in practice this is a superficial problem, they are not harder to memorize than pointer-equal
[20:17:59] <jackdaniel> t and nil are a different pair of shoes, because each have multitude of meanings depending on the context, so there is no /distinct/ false and true value
[20:18:34] <jackdaniel> but they are not very problematic, mostly from the aesthetic point of view
[20:18:40] <_death> AndrewYu: these are the names used for decades by Lisp programmers..
[20:20:16] <jackdaniel> Guest74: if the character case is the issue, you could represent them as keywords that have preserved case
[20:20:29] <jackdaniel> :|C-h| vs :|C-H}
[20:20:35] <jackdaniel> s/}/|/
[20:22:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[20:23:15] <Guest74> which is what my whole question was about, having inconsistency in some symbols having pipes and others not, or going to long form
[20:23:43] <_death> Guest74: what does "symbols having pipes" mean?.. the name of the symbol :|C-h| is "C-h"
[20:24:13] <_death> you could write :C-\h instead
[20:24:33] <jackdaniel> oh, I didn't know I could!
[20:24:40] <jackdaniel> cool :)
[20:25:35] <AndrewYu> jackdaniel: I just really hate comprimises that seem to be avoidable
[20:26:03] <Guest74> _death: then you have to write \ in front of everything.
[20:26:09] *** Joins: Oladon (~olad@98.43.81.226)
[20:26:23] * AndrewYu doesn't appeal to history, _death
[20:26:23] <_death> AndrewYu: Common Lisp is a compromise reached by various entities in the 1990s.. if you don't want compromises, write AndrewYuLisp
[20:26:30] <AndrewYu> I mean, yeah, people used DOS and Windows since long ago, OpenBSD and Linux only existed since the 1995s/1990s. SO switch to Windows... nah. But you're kinda right
[20:26:41] <AndrewYu> lol, that might happen when i get more familiar with the place
[20:27:00] <jackdaniel> AndrewYu: it is not really a compromise, it is pragmatism
[20:27:11] <AndrewYu> sounds similar to me :)
[20:27:36] <jackdaniel> I hope that one day you will fix your hearing
[20:27:57] <random-nick> https://libera.ems.host/_matrix/media/r0/download/matrix.org/lOcqjVoqhLPYRUmpdZgtsZLt/Screenshot%20from%202021-11-28%2009-47-28.png
[20:28:02] <random-nick> whoops
[20:28:44] <Guest74> _death: greek-\i\o\t\a doesn't seem like a good compromise.
[20:28:59] <_death> Guest74: so use strings
[20:29:32] <_death> Guest74: if you want symbol like properties, you can define an "atom" abstraction
[20:30:16] <Guest74> strings could work, you lose eq though.
[20:30:44] <beach> AndrewYu: As _death pointed out, these are very old conventions.  Are you trying to make Lisp more attractive to newbies who don't know these conventions?  I am afraid what you are suggesting then won't work.  EQ is not one of the reasons Common Lisp is not more widely used.
[20:30:58] <jackdaniel> then use :|greek-iota| if you don't like backslashes
[20:31:19] <Guest74> which is what my question was about.
[20:31:30] <_death> Guest74: you could also use try readtable-case, modern mode, writing your own reader, etc. I'm not sure what will satisfy you
[20:32:25] <Guest74> which is what my whole question was about, having inconsistency in some symbols having pipes and others not, or going to long form
[20:33:01] <_death> you should also know that :C-|iota| is the same as :|C-iota| given the default readtable case
[20:34:08] <_death> || is just escaping syntax
[20:34:22] <AndrewYu> I'll be back in around, ugh, 18 hours... sorry though
[20:35:23] <jackdaniel> Guest74: just as _death said, || is not part of the symbol name, so it does not introduce an inconsistency
[20:36:02] <jackdaniel> depending on the readtable-case you may be forced to write |EQ| if you want to use this /terrible terrible/ symbol name :)
[20:38:07] <phantomics> AndrewYu: have you seen http://cl21.org/? A project to "modernize" CL
[20:38:28] <beach> Please, no.
[20:39:08] <jackdaniel> well, is it modernized yet? I can't wait to jump the drain ,)
[20:39:27] <AndrewYu> Scheme looks more appealing to me in that resp- why am I still awake
[20:39:42] * AndrewYu sends SIGSEGV to his brain
[20:39:51] <beach> AndrewYu: That's fine, but then you are in the wrong channel.
[20:39:56] <Guest74> it is inconsistent as in you have to type it. If you want to use autocomplete to see all greek symbols you can't.
[20:40:55] <Guest74> but then again, doesn't seem anybody has a problem with that.
[20:41:48] <_death> Guest74: that's a bug in autocomplete
[20:43:16] <_death> try (apropos "GREEK-") instead
[20:43:33] <Guest74> which probably nobody will fix until judgment day.
[20:43:45] <phantomics> In terms of improvements to CL, I might like to see some functions that do similar things condensed into a single function that takes options to work in different ways
[20:43:51] <_death> Guest74: you could be the one to fix it.. I'm won't be surprised if it takes <10m
[20:43:59] <Guest74> apropos doesn't help when you're typing. Already have a function to display all keysyms in a language set.
[20:44:20] <Guest74> I don't know elisp or the emacs system.
[20:44:42] <_death> luckily elisp is a lisp, like CL is a lisp
[20:46:06] <_death> if you want to move just a bit to the right in the complain-fix scale, I guess there's submitting an issue
[20:47:09] *** Joins: sheb (~sheb@31.223.228.71)
[20:47:59] <_death> anyway, maybe it's not a good day for irc ;).. later
[20:48:22] <jackdaniel> see you
[20:49:50] <beach> phantomics: Common Lisp is not going to change.  And such changes would not necessarily be possible to reach consensus with anyway.  Do you have an example of what you mean?
[20:50:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Ping timeout: 268 seconds)
[20:51:08] <jackdaniel> well, it changed a few times already. i.e defpackage local nicknames extension, but this is a backward-compatible change
[20:51:34] <jackdaniel> (not part of the standard, but it could be considered a consensus)
[20:52:44] <dbotton> jackdaniel except I backed out local nicknames from my project since LW doesn't support it
[20:53:25] <beach> I think they said it will.
[20:53:33] <dbotton> so consensus even when there takes a snails pace
[20:54:11] <dbotton> you is in some future build but I recall that was the case a year ago
[20:54:11] <beach> And that's a good thing.
[20:54:29] <beach> It avoids hasty decisions that we may regret later.
[20:54:35] <jackdaniel> it must be said that phoe was very active in the area of prompting people to implement this api back when only sbcl, abcl and ecl had it
[20:54:58] <jackdaniel> (and he implemented himself the extension for ccl)
[20:55:39] <dbotton> I think an a very good thing even if I am only using CL for less than a year
[20:56:18] <dbotton> I like the idea that CL's ability to extend itself "good enough"
[20:56:37] <dbotton> (sorry for typos)
[21:04:01] <phantomics> beach: For instance, condensing eq, eql, equalp etc. into one function that takes a third parameter to determine the type of comparison
[21:04:30] <Guest74> ew, break all the :test functions
[21:05:36] <Guest74> Does the amount of symbols in the keyword package present any problems the larger it gets?  mines already over 5000
[21:06:08] <phantomics> At that level it shouldn't be a problem, but really large numbers of keywords can be a problem
[21:07:22] <phantomics> There are DOS attacks involving JSON libraries like Jonathan that create keywords for JSON keys, you can exhaust the heap by sending a service like this big JSON strings with thousands or millions of different keys
[21:07:24] <engblom> Is it somehow possible to create a macro inside of function, in the same way as you can with label define functions inside of a function?
[21:07:47] <phantomics> engblom: Yes, with (macrolet)
[21:07:55] <engblom> phantomics: Thanks!
[21:11:09] * engblom is still trying to figure out how to make a recursive setf so that (rsetf some-plist 1 'one :b) would set change some-plist from ('one (:a 2 :b 1) 'two (:a 3 :b 4)) into ('one (:a 1 :b 1) 'two (:a 3 :b 4)).
[21:11:30] * engblom is still trying to figure out how to make a recursive setf so that (rsetf some-plist 1 'one :a) would set change some-plist from ('one (:a 2 :b 1) 'two (:a 3 :b 4)) into ('one (:a 1 :b 1) 'two (:a 3 :b 4)).
[21:13:40] <engblom>  rsetf (recursive-plist value &rest indicators)
[21:29:18] <phantomics> If the structure you're changing will only ever by a plist, you can write a macro that builds (setf (getf (getf plist 'one) :b) X)
[21:31:41] <phantomics> (defun build-form (value keys &optional output) (if (not keys) `(setf ,output ,value) (build-form value (rest keys) `(getf ,output (first keys)))))
[21:32:17] <phantomics> That's more or less how you do it, you pass the key path in as the second arg to that function, and the name of the list i.e. some-plist as the third arg
[21:32:41] <phantomics> (defun build-form (value keys &optional output) (if (not keys) `(setf ,output ,value) (build-form value (rest keys) `(getf ,output ,(first keys)))))
[21:32:55] <phantomics> corrected
[21:39:10] *** Quits: paule32 (~paule32@user/paule32) (Remote host closed the connection)
[21:39:43] *** Joins: paule32 (~paule32@user/paule32)
[21:39:51] <engblom> phantomics: They will always be plists but of different depts. Some might be only two levels, some 3 or more levels.
[21:40:27] <phantomics> Then that function will build the nested (getf) you need, it works recursively with any number of keys
[21:40:35] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[21:40:40] <engblom> Thanks!
[21:45:36] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:c93d:9f3e:f0b5:db46)
[21:52:45] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:54:47] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[22:08:36] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:14:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:15:09] <lisp123> phantomics: in general, imo its better to have keyword arguments
[22:15:57] <phantomics> keyword arguments for what?
[22:15:58] <Guest74> so I've noticed some problems with pipes, or vertical bars, when typing at the repl.  If you make a mistake while typing you're screwed because of 'unbalanced parantheses'. Is this a paredit only thing, or does it happen with other modes that provide the same functionality.
[22:16:07] <lisp123> (like :test). Also equal DOES mean a lot of different things - is it the same object? is it an 'equivalent' object, is something based on a particular criteria for equality
[22:16:17] <engblom> phantomics: I rewrote it into a macro so I do not need to quote stuff in the function call. I now have this https://pastebin.com/1pzn6EzE
[22:16:34] <lisp123> phantomics: re a third parameter for equal as one function
[22:17:08] <engblom> phantomics: Even thou macroexpand-1 shows a correct form, it complains that the plist I pass to it is undefined.
[22:17:18] <engblom> What could be wrong?
[22:17:32] <lisp123> Guest74: bind 'paredit-mode' to a hotkey so that you can quickly switch between paredit mode on and paredit mode off
[22:18:10] <engblom> Oh, now I noticed where my mistake is, I still have build-form even thou the macro got another name
[22:18:21] <Guest74> It happens in paredit, i'm wondering if it happens in other modes that provide the same functionality.
[22:19:38] <Guest74> I don't remember what any of those packages are called, but i'm guessing somebody here must use something besides paredit.
[22:20:38] <lisp123> I don't find any of the other ones as good as paredit to be honest (tried them a few times)
[22:21:02] <lisp123> Google search is your friend
[22:22:05] <phantomics> Hi engblom, it appears this macro is supposed to work recursively but macros don't work like that, functions do
[22:22:24] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:22:40] <phantomics> You want to use the recursive function inside the macro, use (labels) to set up the recursive function within the macro
[22:23:01] <engblom> phantomics: Okay, I will try that!
[22:23:06] <hobo> White_Flame: sorry for the late response, but yes, I remember telnetting into Valheru MUD from my high school's windows box in the library that only had telnet on it.
[22:23:10] *** Joins: Inline (~Inline@aftr-37-201-240-2.unity-media.net)
[22:23:24] <hobo> That said, it's very likely I'm mistaken.
[22:23:25] <Guest74> oh well, can't even figure out where to report a bug.
[22:24:56] *** Quits: cosimone` (~user@93-44-184-115.ip98.fastwebnet.it) (Ping timeout: 265 seconds)
[22:25:03] <lisp123> Paredit? Good luck contacting the author, he is a mysterious legend. Here is his website: https://mumble.net/~campbell/
[22:25:34] <Guest74> yeah, it's where the git is stored with no way to raise issues
[22:26:39] <lisp123> It's like god, he gives you the bible / religious document of [insert language], but doesn't want to deal with mortals raising issues ;)
[22:27:19] <hobo> White_Flame: logged onto valheru for the first time in 8 years :P
[22:27:22] <lisp123> I tried contacting him one to no luck. You probably have a better chance of forking the repo and adjusting it to your needs
[22:27:25] <hobo> just now*
[22:28:28] <hobo> and it turns out I was mistaken. It actually enters a CRLF, writes message, and then rewrites the prompt.
[22:28:35] <Guest74> I'm not concerned about my needs, i'm concerned how my stuff works on everybody elses machine.
[22:29:27] <lisp123> Then you should definitely fork it, amend it to your requirements and include that as part of your delivery mechanism
[22:29:42] <Guest74> at least I've determined constants over keywords.
[22:30:03] <Guest74> I do not think bundling emacs stuff with a common lisp library is a good thing.
[22:30:23] <lisp123> that's why you should learn (Mc)CLIM
[22:30:53] <Guest74> no thank you.
[22:31:08] <Guest74> which uses the same broken model as clx.
[22:31:12] <lisp123> *shrugs* good luck
[22:31:51] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:33:09] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:c93d:9f3e:f0b5:db46) (Ping timeout: 265 seconds)
[22:35:43] <White_Flame> hobo: huh, that's an interesting compromise, but it would break the input-buffering clients like mudlet or tf
[22:35:54] <White_Flame> unless the server detects telnet vs not
[22:43:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:45:32] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:47:21] <engblom> Is it somehow possible to use strings as keys in property lists?
[22:48:27] <engblom> If I have something like ("a" (:A 1 :B 2) "b" (:A 3 :B 4)) I get nothing with (getf my-plist "a")
[22:48:29] <rain3> engblom why not use :|keyWoRDS| ?
[22:49:14] <White_Flame> alists are more flexible
[22:49:19] <White_Flame> at least in terms of support functions
[22:49:21] <engblom> rain3: The key will actually be a string that I will have to use. Keywords are converted to upper case.
[22:49:43] <rain3> engblom: use | |
[22:50:20] <rain3> (let ((my-plist '(:|a| "a's value" :|A| "A's value")))
[22:50:20] <rain3> 		(list (getf my-plist :|a|) (getf my-plist :|A|)))
[22:50:29] <White_Flame> there is reader conversion, but (intern "FooBar" (find-package "KEYWORD")) => :|FooBar|
[22:50:52] <rain3> ;=> ("a's value" "A's value")
[22:50:56] <White_Flame> however, that means that you'll also need to search the plist with an interned symbol, too
[22:51:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:53:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[22:53:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:54:26] <engblom> White_Flame: And how would I convert the other way, from keyword to string?
[22:56:27] <White_Flame> symbol-name
[22:56:37] <White_Flame> which is just a field accessor of the symbol
[22:56:44] <rain3> 3(string :|keyWORD|)
[22:56:56] <White_Flame> but, if it makes more sense to keep things strings, then use alists instead of plists
[23:01:13] <engblom> This is the beginning of one of the plists I have: https://pastebin.com/JsN5Wqmv
[23:01:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:01:41] <engblom> White_Flame: Does it make sense to make this an alist?
[23:02:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:04:04] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:04:11] <engblom> It was for plists like this I needed to write the recursive forms of getf/setf.
[23:04:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:04:35] <White_Flame> alists allow you to use :key, :test, etc
[23:05:18] <White_Flame> and it's easier to use plain list operators on alists than plists, because on alists there's a 1:1 correspondence between list entries and alist mappings.  With plists it's 2:1 and can get funky
[23:06:04] <White_Flame> depending onthe size of your tables, you might want to consider hashtables as well
[23:06:13] <engblom> White_Flame: Is it possible to nest alists, like I have done in the pasted example? Or would you keep the inner list as a plist?
[23:06:24] <White_Flame> plists are legacy
[23:06:40] <White_Flame> but key=>value is just data.  the outer container doesn't care what's inside the value slots
[23:07:28] <White_Flame> however, I think the one advantage that plists have is that you can (setf (getf ...) ..), which I don't think you can do as simply with alists
[23:07:49] <White_Flame> but can do as easily with hashtables
[23:08:10] <engblom> White_Flame: The lists will be around 100 pairs long, so hastables are probably overkill. Besides, the lists are actually are actually handwritten in a configuration file and then read in by read-from-file
[23:08:57] <White_Flame> that handwritten form doesn't need to be the canonical format at runtime, though.  You can read it in as an easy-to-hand-edit list, and then store it in another format, too
[23:09:24] <White_Flame> optimize the former for editing, and the latter for runtime access
[23:14:13] <engblom> doplist from alexandria seems to be able to loop over a plist with string keys, so it should be easy to convert it to a hash table by inserting each key and value.
[23:14:32] <engblom> Or would there be a better way to convert this plist to a hash table?
[23:17:29] <engblom> Clojure has this nice syntax for hash maps: {:key1 1, :key2 2}. Is there something similar I could directly read in from a file with common lisp?
[23:18:16] <yitzi> engblom there are hash-table to plist conversion functions in Alexandria.
[23:19:49] <yitzi> There are also various packages which define a reader macro character for hash tables. Or you could just define your own.
[23:20:34] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 256 seconds)
[23:21:56] *** Joins: etiago (~etiago@user/etiago)
[23:22:17] *** Joins: cosimone (~user@93-44-184-115.ip98.fastwebnet.it)
[23:29:13] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 265 seconds)
[23:29:59] *** Joins: etiago (~etiago@user/etiago)
[23:32:23] <borodust> Xach: about bodge-host: did you nuke only bodge-host cache or everything?
[23:36:14] <borodust> i've updated bodge-host stable tag to latest commit
[23:36:30] <borodust> hopefully, that won't break anything
[23:38:41] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 245 seconds)
[23:40:00] *** Joins: etiago (~etiago@user/etiago)
[23:43:14] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[23:52:55] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[23:54:39] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[23:54:56] *** Joins: danieli (~danieli@user/danieli)
[23:55:56] *** Joins: notzmv (~zmv@user/notzmv)
[23:56:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[23:56:46] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 265 seconds)
[23:58:16] *** Joins: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se)
