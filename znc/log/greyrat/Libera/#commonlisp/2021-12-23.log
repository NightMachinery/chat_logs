[00:08:21] *** Joins: notzmv (~zmv@user/notzmv)
[00:10:01] <rotateq> and i deleted something in the /usr/share and cannot load other libs anymore :D maybe complete reinstallation of SBCL could help
[00:12:57] <Bike> jmercouris: you can define asdf classes to express dependencies on cc output more easily, i think? cffi does it for the groveler
[00:14:00] *** Joins: paul0 (~paul0@user/paul0)
[00:18:47] <jmercouris> Bike: right that’s what I’m remembering groveling
[00:18:58] <jmercouris> I’ll investigate thanks
[00:26:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[00:28:26] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:33:07] *** Joins: random-nick (~random-ni@87.116.180.98)
[00:34:19] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:34:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[00:35:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:36:49] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:17] *** Joins: amk (~amk@109.255.169.126)
[00:51:55] *** Joins: john__ (~john@215.76.133.37.dynamic.jazztel.es)
[00:56:23] *** Quits: john__ (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[00:56:23] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[00:57:06] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[01:08:46] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:09:11] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:15:09] *** Joins: Algernon666 (~Algernon6@i19-lef01-t2-89-85-246-93.ft.lns.abo.bbox.fr)
[01:23:26] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[01:27:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[01:28:17] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[01:29:02] *** Quits: pve (~pve@176-93-11-86.bb.dnainternet.fi) (Quit: leaving)
[01:31:03] *** Joins: asarch (~asarch@189.250.251.32)
[01:33:31] *** Quits: asarch (~asarch@189.250.251.32) (Client Quit)
[01:34:15] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:40:06] *** Joins: Oladon (~olad@98.43.81.226)
[01:43:41] <phoe> okay, my production-grade AMB should be sorta decent now - asking for some review on https://plaster.tymoon.eu/view/2789#2789
[01:45:04] <phoe> ideas for test cases welcome
[01:45:15] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 268 seconds)
[01:45:56] <phoe> as for the obvious question of why am I doing it - I want to make a calligraphy of AMB for the next ELS, and I need an implementation of it that I can trust (as opposed to the current rosetta code one)
[01:46:15] <Bike> calligraphy?
[01:46:30] <Bike> as for test cases, i guess i'd just copy sicp exercises or something
[01:46:48] <phoe> oh, SICP has exercises for AMB? sure, that's a good pointer
[01:46:56] <Bike> i think it does
[01:47:10] <phoe> and yes, a little bit of pretty handwritten lisp stuff to raise money for the lisp world again
[01:47:51] <Bike> https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-28.html#%_sec_4.3.2 yeah there's a couple
[01:47:56] <Bike> (also pythagorean triples just above this)
[01:48:30] <phoe> ;; I hope no one will mind if I steal these test cases for my code
[01:57:13] <rotateq> phoe: s/steal/reuse ;)
[01:58:09] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[02:04:14] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:11:05] *** Quits: heisig (~heisig@p579c8c84.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:18:44] *** Joins: findiggl` (~user@2601:601:9f00:5c60:ea51:63ee:d408:b6e8)
[02:20:17] *** Quits: findiggle (~user@2601:601:9f00:5c60:dfe7:ec34:7bba:73c5) (Ping timeout: 240 seconds)
[02:24:41] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[02:25:35] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 252 seconds)
[02:28:01] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[02:28:22] <shinohai[m]> hello!
[02:28:26] <phoe> hey hi
[02:29:48] *** Joins: frodef (~frode@46.212.93.4)
[02:30:57] *** Quits: frodef_ (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[02:31:10] <shinohai[m]> Trying to get this matrix crap to work in weechat
[02:31:23] <phoe> well, I can see your message about matrix
[02:35:16] <rotateq> shinohai[m]: hi :)
[02:37:01] <phoe> Bike: thanks for that resource, already found a few bugs in my code just by trying to implement that
[02:38:12] *** Quits: Algernon666 (~Algernon6@i19-lef01-t2-89-85-246-93.ft.lns.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:44:21] *** Joins: dra (~dra@2a04:4540:641b:5900:1015:93e1:eb49:c063)
[02:58:57] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:02:49] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[03:03:38] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[03:03:39] *** Joins: Bike (~Bike@71.69.170.70)
[03:03:39] *** ChanServ sets mode: +o Bike
[03:03:57] *** Quits: cosimone (~user@93-47-230-208.ip115.fastwebnet.it) (Ping timeout: 240 seconds)
[03:15:37] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[03:18:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:20:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:33:54] *** Joins: KvL (~KvL@130.95.254.231)
[03:42:43] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.3)
[03:44:00] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:47:31] *** Joins: dra_ (~dra@2a04:4540:6409:ed00:1015:93e1:eb49:c063)
[03:50:25] *** Quits: dra (~dra@2a04:4540:641b:5900:1015:93e1:eb49:c063) (Ping timeout: 268 seconds)
[04:20:57] *** Joins: Oladon (~olad@98.43.81.226)
[04:31:31] <akater[m]> The standard doesn't specify which predicate does getf use to find the relevant property, doesn't it?  E.g. in SBCL,... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/184a9a04c6d8a133b5296c1a0d575240e3e0590d)
[04:33:08] <hayley> It specifies "identical", i.e. the same under eq.
[04:33:18] <hayley> Unlike assoc, there is no way to change that behaviour.
[04:39:54] <akater[m]> Oh, now I see.  But I certainly saw “identical” being interpreted as something broader in a neighbourhood of Lisp which I considered small enough.  That,s why I didn't follow that link in CLHS.  Weird.  Thank you.
[04:40:53] *** Quits: KvL (~KvL@130.95.254.231) (Remote host closed the connection)
[04:42:25] *** Joins: dre (~dre@2001:8003:c932:c301:ee34:5349:cb14:8f8e)
[04:43:57] *** Quits: VincentVega (~user@212.97.4.228) (Remote host closed the connection)
[04:48:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[05:04:05] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[05:04:58] *** Quits: dra_ (~dra@2a04:4540:6409:ed00:1015:93e1:eb49:c063) (Remote host closed the connection)
[05:10:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:11:16] *** Joins: Colt (~Colt@user/colt)
[05:16:47] *** Joins: Algernon666 (~Algernon6@88.124.69.179)
[05:20:22] *** Joins: igemnace (~ian@user/igemnace)
[05:20:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[05:22:49] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:23:47] *** Quits: Algernon666 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[05:24:43] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:26:39] *** Joins: KvL (~KvL@103.212.224.205)
[05:28:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:33:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[05:38:02] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[05:41:23] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 252 seconds)
[05:42:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:43:31] *** Joins: frodef (~frode@46.212.93.4)
[05:45:15] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:47:06] *** Quits: KvL (~KvL@103.212.224.205) (Ping timeout: 260 seconds)
[05:49:05] *** Joins: KvL (~KvL@103.212.224.205)
[05:58:53] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 256 seconds)
[06:02:00] *** Joins: Bike (~Bike@71.69.170.70)
[06:02:00] *** ChanServ sets mode: +o Bike
[06:21:23] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[06:29:29] *** Quits: rgherdt (~rgherdt@95.90.244.15) (Ping timeout: 256 seconds)
[06:46:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:47:57] *** Quits: KvL (~KvL@103.212.224.205) (Ping timeout: 240 seconds)
[06:50:24] *** Joins: KvL (~KvL@103.212.224.205)
[06:51:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:00:13] *** Quits: dre (~dre@2001:8003:c932:c301:ee34:5349:cb14:8f8e) (Ping timeout: 240 seconds)
[07:15:15] *** Joins: dre (~dre@2001:8003:c932:c301:58d1:88a7:d83f:4266)
[07:19:07] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:22:17] *** Quits: KvL (~KvL@103.212.224.205) (Ping timeout: 240 seconds)
[07:24:44] *** Joins: KvL (~KvL@103.212.224.204)
[07:25:11] *** Joins: miique (~miique@181.46.139.166)
[07:28:13] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Read error: Connection reset by peer)
[07:28:37] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[07:30:26] <beach> Good morning everyone!
[07:33:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:39:39] <semz> Good morning
[07:52:57] *** Quits: KvL (~KvL@103.212.224.204) (Ping timeout: 240 seconds)
[07:55:09] *** Joins: KvL (~KvL@103.212.224.204)
[07:55:14] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:03:14] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:07:35] *** Joins: Oladon (~olad@98.43.81.226)
[08:08:17] *** Joins: semz (~none@user/semz)
[08:11:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:15:11] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:24:22] *** Quits: KvL (~KvL@103.212.224.204) (Ping timeout: 260 seconds)
[08:26:34] *** Joins: KvL (~KvL@103.212.224.206)
[08:46:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:48:10] *** Quits: jealousmonk (~user@2804:431:e7c4:325e:faf7:a143:6e41:2f65) (Quit: ERC (IRC client for Emacs 27.1))
[08:51:59] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:52:28] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[08:54:10] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:54:37] *** Quits: KvL (~KvL@103.212.224.206) (Ping timeout: 240 seconds)
[08:57:00] *** Joins: KvL (~KvL@185.210.218.220)
[08:58:28] *** Quits: KvL (~KvL@185.210.218.220) (Read error: Connection reset by peer)
[09:01:07] <dre> good morning beach!
[09:28:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[09:43:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:45:26] *** Joins: notzmv (~zmv@user/notzmv)
[09:56:20] *** Joins: treflip (~user@user/treflip)
[10:26:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:28:36] <ns12> Hello! For CMUCL, what is the difference between https://cmucl.org and https://www.cons.org/cmucl/ ? Which is the official website?
[10:33:16] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[10:40:28] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[10:40:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:46:14] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 260 seconds)
[10:46:41] *** Joins: Colt (~Colt@user/colt)
[10:55:38] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:02:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:03:00] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[11:04:34] <lisp123> ns12: The former if I had to guess
[11:04:49] <lisp123> Although the official repo is here https://gitlab.common-lisp.net/cmucl/cmucl/wikis/home
[11:05:00] <lisp123> I wonder who owns cons.org anyway?
[11:06:42] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:07:01] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:07:02] <hayley> cons.org redirects to https://wiki.zs64.net/Main_Page for me, and according to https://wiki.zs64.net/Was_ist_ZS64.net a guy called Martin seems to host Lisp pages.
[11:07:35] <hayley> https://www.cons.org/cracauer/ Martin Cracauer.
[11:12:43] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:13:51] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:14:27] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e6:6932:a8ea:ffcc:9735:9bce)
[11:15:59] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:16:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:16:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Remote host closed the connection)
[11:16:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:18:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[11:19:41] <ns12> I wonder why CMLCL is packaged in Debian but not in Ubuntu.
[11:19:45] <lisp123> hayley: Nice detective work!
[11:20:23] <hayley> I can't think of anyone that uses CMUCL; I'd sorta expect they moved to SBCL.
[11:24:31] <remexre> is package-inferred-system supposed to hook up something that makes (uiop:define-package (:import-from :foo/bar)) automatically try to asdf:load-system, or do I need to manually run the load-system in SLIME every time I add a new file to the import graph?
[11:27:19] <lisp123> Martin Cracauer : Previously I worked for Google and before that for ITA software.
[11:28:36] <lisp123> hayley: There's a few. It's still actively maintained by the few that use it (which pale in comparison to SBCL user base)
[11:36:05] <ns12> Apparently CMUCL is not in the Ubuntu repositories because CMUCL does not support 64-bit. Ubuntu no longer supports 32-bit.
[11:39:34] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[11:44:48] <beach> ns12: Out of curiosity, why are you interested in CMUCL?
[11:45:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:dde:eed4:1c5f:551e)
[11:47:45] *** Joins: pve (~pve@87-93-164-140.bb.dnainternet.fi)
[11:48:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:52:09] *** Joins: heisig (~heisig@p579c8c84.dip0.t-ipconnect.de)
[11:54:22] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[11:55:47] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[11:56:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:56:53] <ns12> beach: Because I have just found it, and I am trying to find out what it offers.
[11:57:01] <ns12> Is it considered obsolete?
[11:57:05] *** Joins: Krystof (~user@81.174.155.115)
[11:57:21] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[11:59:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:08:40] *** Joins: shka (~herr@109.231.0.226)
[12:08:42] <jackdaniel> it is a maintained common lisp implementation, so no - it is not obsolete. that said sbcl (that is based on cmucl) has much larger mindshare among common lisp developers
[12:08:55] <jackdaniel> s/is based on/was forked from/
[12:10:09] <ns12> jackdaniel: And why does SBCL have a much larger mindshare than CMUCL?
[12:10:29] <lisp123> SBCL is Sanely Bootstrappable
[12:10:43] <jackdaniel> it has more developers and cleaner bootstrap procedure
[12:11:09] <jackdaniel> (that lead to it being ported to more architectures and more performance improvements)
[12:11:57] <jackdaniel> also since it is more popular software is more often tested on it than on other implementations
[12:12:26] <jackdaniel> so popularity gives a boost in bug reports, specialized library support and such
[12:13:52] <ns12> CMUCL appears to have some extra features such as a GUI debugger/profiler, and Hemlock (Emacs implementation). Are these useful?
[12:14:25] <phoe> the slime debugger is a GUI debugger enough for me, or does CMUCL have something better?
[12:14:28] <jackdaniel> most likely yes (I don't know)
[12:15:54] <jackdaniel> phoe: I don't understand implication - since slime debugger is good enough for you, then you wonder whether cmucl has something better?
[12:16:10] <jackdaniel> I like applies, does it mean that oranges are tasty?
[12:16:15] <jackdaniel> s/applies/apples/
[12:16:17] <phoe> ...better *for me*, in particular :D
[12:16:23] <ns12> CMUCL also includes an X11 interface (CLX), but that has already been ported to SBCL https://github.com/sharplispers/clx
[12:16:32] <phoe> I never realized that CMUCL has a GUI debugger of its own
[12:17:17] <jackdaniel> ns12: cmucl bundles quite a few things, some of them are available as portable libraries - as you have noted clx is one of them
[12:17:24] <ns12> phoe: https://cmucl.org says: "a graphical source-level debugger using a Motif interface, and a code profiler".
[12:18:03] <phoe> hmmm, http://www.chiark.greenend.org.uk/doc/cmucl-docs/debugger.html says "Note: there are two debugger interfaces in CMUCL: the TTY debugger (described below) and the Motif debugger. Since the difference is only in the user interface, (...)"
[12:19:00] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[12:23:18] <ns12> I wonder if there is a screenshot of the CMUCL GUI debugger somewhere.
[12:23:55] <ns12> Maybe I should run 32-bit Debian in a VM to try out cmucl ...
[12:26:39] <phoe> or you can multiarch to add the i386 architecture, it works for me for running cmucl on amd64
[12:27:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[12:29:38] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[12:35:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:38:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:55:53] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[12:57:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:00:54] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Quit: WeeChat 3.3)
[13:01:36] *** Joins: cosimone (~user@93-34-133-112.ip49.fastwebnet.it)
[13:01:42] <ecraven> has anyone here worked with modbus tcp with CL before? any libraries to read from a modbus tcp server?
[13:05:52] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[13:06:08] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Read error: Connection reset by peer)
[13:06:30] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[13:08:31] *** Joins: treflip (~user@user/treflip)
[13:12:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[13:16:11] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:20:37] *** Quits: amb007 (~a_bakic@cable-94-189-181-124.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[13:21:06] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[13:30:31] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:31:24] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[13:36:41] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[13:39:57] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 268 seconds)
[13:40:06] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[13:41:09] *** Joins: frodef (~frode@46.212.93.4)
[13:43:57] *** Joins: nature (~nature@45.32.235.173)
[13:51:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:52:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:55:40] *** Demosthe1ex is now known as Demosthenex
[13:56:39] <rotateq> interesting, i should explore cmucl some day too
[13:58:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:59:37] <beach> SBCL inherited the breakpoint facility of CMUCL, but in SBCL it is used only for tracing (not the encapsulation tracing).  As I recall, SBCL does not even document the breakpoint interface, so it is hard to write a real debugger for SBCL.  The SBCL stepper uses a different mechanism.
[13:59:37] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:59:45] *** Joins: amb007 (~a_bakic@178-221-44-133.dynamic.isp.telekom.rs)
[14:02:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[14:10:43] <yitzi> I can attest to the difficulty of using SBCL's breakpoints to build a debugger. Finding the correct source line information isn't easy and sometimes the breakpoints don't appear to be triggered.
[14:21:41] *** Joins: heisig_ (~heisig@p508b541c.dip0.t-ipconnect.de)
[14:23:59] *** Joins: KvL (~KvL@195.242.213.163)
[14:24:26] *** Quits: heisig (~heisig@p579c8c84.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:27:24] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[14:31:02] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[14:41:48] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[14:43:20] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e6:6932:a8ea:ffcc:9735:9bce) (Read error: Connection reset by peer)
[14:43:37] *** heisig_ is now known as heisig
[14:43:46] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:6cf1:227:a611:3ad5)
[14:52:44] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:6cf1:227:a611:3ad5) (Ping timeout: 268 seconds)
[15:04:27] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 268 seconds)
[15:12:48] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (Quit: Bye)
[15:13:07] *** Joins: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de)
[15:13:55] *** Joins: igemnace (~ian@user/igemnace)
[15:16:17] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[15:23:40] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:34:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:39:28] <ns12> yitzi: How does SLIME do it then?
[15:40:12] <ns12> Does Conium help? https://github.com/sharplispers/conium
[15:40:30] <phoe> ns12: conium is a fork of swank AFAIK, so I doubt it would help much
[15:41:31] <yitzi> And conium is bitrotted, IMHO.
[15:44:00] <ns12> phoe: Why wouldn't it help? Conium is described as "a portability library for debugger- and compiler-related tasks".
[15:45:32] <yitzi> I contemplated using in common-lisp-jupyter but ended writing my own stuff b.c. it is broken on several implementations or hasn't been updated. Plus the semantics of compiling notebook cells is a bit different.
[15:45:43] <yitzi> using conium that is.
[15:46:20] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d824:1b8e:8932:48b6)
[15:50:30] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[16:00:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:03:17] *** Quits: amb007 (~a_bakic@178-221-44-133.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[16:04:02] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[16:08:02] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:99f5:e580:78b6:1a07)
[16:13:43] <Xach> Hmm, is there a hacker's delight-ish formula for getting the index of the last set bit in an integer?
[16:13:59] * Xach goes to fetch the book
[16:16:36] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:16:43] <phoe> last set bit, you mean like, 16 = #b10000 so the 4th bit, but 17 = #b10001 so the 0th bit?
[16:17:09] <Xach> Sorry. Leftmost set bit.
[16:17:17] <phoe> oooh, integer-length?
[16:17:19] *** Joins: amb007 (~a_bakic@c82-214-92-250.loc.akton.net)
[16:17:23] <Xach> Oh, duh.
[16:17:30] <Xach> thanks phoe! I was overthinking it a lot.
[16:17:34] <phoe> (integer-length 16) ;=> 5
[16:17:39] <phoe> whew
[16:17:45] <phoe> I hoped you meant this rather than the other thing
[16:17:54] <phoe> ;; mostly since I have no idea how to efficiently compute the other thing
[16:19:05] <Xach> M-. integer-length
[16:21:56] <phoe> I have variables x1, x2, ..., xn, and I want to return true only if none of them are EQUAL to one another. is there a hacker's delight-ish formula for doing that in Lisp?
[16:22:44] <phoe> (so, only if all are different)
[16:23:50] * Xach cannot help phoe as phoe helped him
[16:23:55] <phoe> :(
[16:24:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:26:44] <yitzi> phoe: So basically the same semantics as /=? I recall that it is done with a nested loop.
[16:28:37] *** Quits: KvL (~KvL@195.242.213.163) (Quit: KvL)
[16:31:19] <phoe> yitzi: I'm doing it this way now and I wonder if there is a "cleaner" way
[16:32:25] <_death> hash table?.. you described the problem in general terms
[16:32:37] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[16:32:42] *** Joins: frodef_ (~frode@46.212.93.4)
[16:33:08] <yitzi> phoe: I figured. :)
[16:33:32] <phoe> _death: I wish I was able to write (none #'equal x1 x2 x3 x4 x5 x6) but NONE is not a standard function
[16:33:51] <phoe> and I wonder if there is a short/elegant definition of NONE that I can use
[16:36:33] <_death> if it's so few variables, and you don't know much about their values, a simple macro that expands to (and (not (equal x1 x2)) (not (equal x1 x3)) ... (not (equal x5 x6))) seems ok?
[16:36:51] <phoe> hmm
[16:41:21] <jackdaniel> (this kind of none is different than some and every - latter accept any number of sequences)
[16:42:11] <phoe> yes - I was looking at NOTANY in the beginning but it doesn't work in my use case
[16:45:42] *** Joins: Bike (~Bike@71.69.170.70)
[16:45:42] *** ChanServ sets mode: +o Bike
[16:45:46] <jackdaniel> I guess that a fancy-ish way of doing this is mapping combinations (i.e using alexandria function)
[16:45:54] <jackdaniel> not sure whether this is more elegant than nested loop
[16:46:07] <jackdaniel> and since it may be put behind a functional interface it doesn't matter much, does it?
[16:46:50] <jackdaniel> i.e like this https://plaster.tymoon.eu/view/2792#2792
[16:47:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:47:55] <_death> often :copy nil makes sense
[16:50:17] <Bike> (defun none (seq) (let* ((len (length seq)) (table (make-hash-table :test #'equal :size len))) (map nil (lambda (o) (setf (gethash o table) t)) seq) (= (hash-table-count table) len))). it's not short AND it's not elegant
[16:50:18] <Colleen> Bike: drmeister said 28 minutes, 19 seconds ago: No - I haven't seen those bugs - I'll take a look today.
[16:51:09] <_death> Bike: instead, just check whether it exists before inserting
[16:51:23] <Bike> oh point
[16:51:32] <jackdaniel> (eq (pushnew elt list) list))
[16:56:17] <phoe> hmmmm
[16:56:21] <phoe> yes
[16:56:25] <phoe> I'll stay with a double loop
[16:57:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:59:38] <yitzi> You could use mapcar with sxhash and /= as shortcut before the loop. Not sure if that would be faster though.
[17:00:19] <jackdaniel> still, more fancy! :)
[17:03:28] <Bike> i just vaguely remembered seeing remove-duplicates implementations using a table
[17:04:44] <_death> Bike: only in specialized cases though?
[17:05:32] <Bike> "vaguely"
[17:05:34] <jackdaniel> phoe: (eq list (remove-duplicates list :test #'equal))
[17:05:53] <_death> Bike: actually probably not in any case.. due to the ordering constraint
[17:07:23] <yitzi> Is remove-duplicates required to return the same sequence if there are no duplicates?
[17:07:38] <heisig> jackdaniel: remove-duplicates returns a copy, so EQ won't work.  But (= (length list) (length (remove-duplicates list :test #'equal))) will.
[17:08:18] <heisig> Or rather it "may share with sequence or may be identical to sequence if no elements need to be removed".
[17:08:21] <yitzi> heisig: Beat me too it. length test!
[17:08:33] <scymtym> Bike: maybe this https://gist.github.com/nikodemus/2423090 ?
[17:09:02] * scymtym didn't read the comments. hopes there is nothing embarrassing
[17:09:22] <heisig> Bike: The one I wrote for SICL uses a table: https://github.com/robert-strandh/SICL/blob/master/Code/Sequence/delete-duplicates.lisp
[17:09:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[17:10:29] <phoe> jackdaniel: thanks! that works
[17:10:32] <phoe> clhs remove-duplicates
[17:10:32] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_rm_dup.htm
[17:11:13] <jackdaniel> I've only plagiarised Bike's subconcious conclusion where he hinted remove-duplicates
[17:11:14] <phoe> jackdaniel: ...the only issue is that EQ won't work, because R-D is allowed to cons up a new list that is EQUAL but not EQ
[17:11:26] <phoe> oh, right, heisig already mentioned that
[17:11:27] <jackdaniel> read above, I've been already told that
[17:11:46] *** Joins: aeth (~aeth@user/aeth)
[17:12:07] <jackdaniel> (most likely, if there are no duplicates, the original list will be returned though; sure, relying on undefined behavior is bad)
[17:13:17] <resttime> I'm curious, what use cases have/are there to define new SBCL intrinsics? Been reading a little about them, trying to figure out the 'what', and figure that knowing more 'why's would help. Here's one I found https://pvk.ca/Blog/2014/08/16/how-to-define-new-intrinsics-in-sbcl/ so my current impression is that it's modification of the assembly that gets generated on output
[17:14:49] <jackdaniel> i.e when you have a running system with a bottleneck but you can't avoid the particular calculation - then you may try to squeeze something that way
[17:18:06] <resttime> So would an example be like if (optimize (speed 3)) is not fast enough, then delving into intrinsics lets you optimize (or at least modify the DISASSEMBLE) even further?
[17:18:19] <jackdaniel> yes
[17:18:35] <resttime> Oh I see, interesting
[17:22:42] *** Joins: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com)
[17:23:05] <resttime> Hmmm, might have to look more into it. I somewhat been learning how to optimize vector maths for my raytracer. Declared types, ftypes, speed 3, safety 0, dynamic-extent and stuff wherever I could. I hope intrinsics stuffs aren't too advanced for me
[17:24:31] <_death> heisig: neat
[17:25:35] <phoe> resttime: I know that heisig has been pushing SBCL to its limits with regard to vectorized code, maybe he can give you some pointers
[17:28:02] *** Joins: random-nick (~random-ni@87.116.167.125)
[17:28:21] <_death> sbcl also uses hash-tables sometimes.. makes me wonder why I remember remove/delete-duplicates performing badly (doubt I was using a nonstandard test)
[17:31:27] <resttime> Oh, okay I'll throw out a question out here after working through rest of tutorial. Been following this: https://raytracing.github.io/books/RayTracingInOneWeekend.html but using Common Lisp instead. Current performance is 'decent' such that I can get something like a 400px wide render in 'decent' time but starting to slow down as more features like materials are added.
[17:31:56] <resttime> I figure it can be much faster somehow and it might be the vector maths as bottleneck
[17:32:13] <jackdaniel> you should first profile your code to dertmine whether it is the vector maths
[17:35:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:38:13] <phoe> Bike: thanks for that SICP pointer, I've managed to recreate the standalone REQUIRE in https://plaster.tymoon.eu/view/2789#2789 - my only worry is if I should define what happens when there is a REQUIRE without any AMB, since in my current implementation it means THROWing without a matching CATCH
[17:38:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:38:50] <phoe> and I've written some basic tests from the SICP exercises, more might come later - triples and dwellings and 8 queens are probably the most important ones
[17:39:15] <Bike> eh, that's a control-error. about what one would expect i think
[17:39:52] <sm2n> resttime: As someone who did the same thing, iirc the biggest wins came from declaring float array types and inlining
[17:39:54] <phoe> for once I am glad that this is not UB but defined to be a control-error
[17:40:07] <phoe> but, yes, I don't think SICP defines that either
[17:40:43] <sm2n> But the one I was working on also used GFs, so there was some balance between ergonomics and performance-at-all-costs
[17:41:16] <sm2n> I need to look into one of those sealer libraries for static dispatch with CLOS
[17:45:37] <heisig> sm2n, resttime: SIMD vectorization and manual/semi-automated lowering of AREF to ROW-MAJOR-AREF can boost the performance a lot, at least for number crunching.
[17:45:50] <heisig> I'm working on a library for both.  Stay tuned for the ELS paper :)
[17:46:08] <resttime> jackdaniel: sm2n: ah yeah I did do a bunch of profiling and inlining as well before adding materials:  https://i.imgur.com/S8gKKDh.png MAKE-RAY and MAKE-HIT-RECORD are default DEFSTRUCT constructors, I dunno how to make these faster at all. My vectors used to be defstruct too then I switched their implementations to simple-array single-float after some advice and similarly found super fast
[17:46:09] <resttime> speed up. Maybe I need to do it again somehow with these too then redefine how my vector operations work on this theoretical new representation of data
[17:46:16] <resttime> heisig: and ooooh interesting :)
[17:48:04] <heisig> resttime: The current state is at https://github.com/marcoheisig/sb-simd.  But I recommend waiting a few more weeks until it is published.
[17:49:02] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[17:49:16] <heisig> This also means now is the time to send me some feedback :)  If anyone on this channel has some time to read/think things through, I'd really appreciate it.
[17:49:56] <heisig> The preferred format for handing in feedback on sb-simd is via Github issues, or by writing me on #petalisp.
[17:50:18] <sm2n> heisig: oh neat
[17:50:44] <mfiano> I'd like to hear more about row-major-aref boosting performance
[17:50:47] <Xach> my copy of hacker's delight is signed by george boole
[17:51:41] <sm2n> resttime: what are you calcuating in MAKE-RAY? mine just makes a unit vector from a direction and sticks it in an object with an origin point
[17:52:11] <sm2n> if yours is similar I guess you've already inlined everything else
[17:53:29] <resttime> heisig: I wish I was experienced enough to provide feedback xD but I'll make sure to check it out
[17:53:50] <sm2n> It'd be nice if displaced array slices were a thing
[17:54:22] <heisig> mfiano: SBCL is not good at open coding AREF.  If you hoist all stride and index calculation outside of the innermost loop, and replace (AREF A i1 ... iN-1 iN) by (ROW-MAJOR-AREF A (+ ... iN)), the code usually runs much faster.
[17:54:25] <resttime> sm2n: Yeah I think so, let me double check and I've definitely inlined whole bunch of stuff too
[17:56:05] <heisig> mfiano: Doing so by hand is tedious, but I am working on a loop optimization framework that does it automatically.
[17:56:09] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Quit: Konversation terminated!)
[17:57:05] <mfiano> Interesting.
[17:57:42] <sm2n> heisig: How difficult would it be to add support for other archs? For example, aarch64
[17:59:28] <heisig> sm2n: Extending sb-simd is really simple, adding FMA on x86-64 took me less than a day.  The tricky part is to get the SIMD instructions into SBCL in the first place.
[18:00:35] <sm2n> I see, I'll download it and play with it a bit. Don't know if I'll have any meaningful feedback though
[18:00:53] <resttime> sm2n: Oh misunderstood question, yeah MAKE-RAY just default constructor origin is either at the camera or the point on object the ray scatters/bounces off. Direction is where camera is shooting ray or calculation off of the surface scatter/bounce
[18:02:01] <jackdaniel> perhaps instead of allocating a new object reuse existing ones?
[18:02:43] <jackdaniel> also, if you don't specialize on the structure class, then you may request the allocation to be a vector
[18:03:34] <sm2n> oh also, resttime have you added parallelism yet?
[18:03:45] <sm2n> it's pretty easy to do so with lparallel
[18:10:25] <resttime> jackdaniel: Hmmm, gonna have to think about how to reuse object if possible. I did do something similar althought just for my vector maths lib where possible with a pattern to supply a third parameter to set in a function like (vec3 out a b) with inspiration from https://github.com/mfiano/origin (thanks mfiano, gave your repo a look a while back for an example). What do you mean about
[18:10:27] <resttime> specialization and request allocation to be vector? (unfamiliar with it, wondering if it's just type declarations)
[18:10:45] <resttime> sm2n: and nope, not yet but looking forward to it in that case
[18:11:32] <resttime> I went through the whole Raytracing in the weekend series in Rust before, when I added parallelism it was super easy, hoping it'll be same
[18:12:36] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[18:13:22] <sm2n> yeah, CL people should be proud of lparallel the same way Rust people are of rayon
[18:13:57] <sm2n> resttime: you can make the backing storage for a struct to be a vector
[18:14:19] <rotateq> resttime: there's still a video series on youtube about how writing a raytracer in CL from which i learned much :)
[18:16:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[18:16:56] <resttime> rotateq: Interesting, is it the one by Alexander Lehmann I found?
[18:17:33] <resttime> sm2n: I think I might have read something about that actually
[18:17:38] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[18:18:17] <resttime> Found it, section on structures here: https://github.com/guicho271828/sbcl-wiki/wiki/Object-representation-(lowtags,-widetags,-memory-consumption,-arrays)
[18:18:36] <resttime> I thought it was by default
[18:26:20] <resttime> Oh yeah, I think the one by Lehmann is only one I can find. I'll make sure to check it out thanks!
[18:27:01] <sm2n> I think jackdaniel was assuming you were using a structure-object, not a struct? Not sure, I'm not really familiar with structure-objects
[18:27:24] <phoe> sm2n: what do you mean by "structure-object, not a struct"?
[18:27:37] <phoe> structs as in raw untagged C memory?
[18:27:55] <jackdaniel> spec structure-object
[18:28:03] <jackdaniel> clhs structure-object
[18:28:03] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_stu_ob.htm
[18:29:54] <jackdaniel> structure-object is a superclass of all structure-class instances
[18:30:13] *** Quits: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 240 seconds)
[18:30:14] <jackdaniel> the relation is similar between standard-object and standard-class
[18:30:26] *** Joins: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net)
[18:31:51] <jackdaniel> and I've meant, that when you use the operator defstruct, you may add a type parameter, then it will construct i.e a vector, not a structure-object when created
[18:32:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[18:34:07] <jackdaniel> i.e (defstruct (foo (:type (simple-array fixnum (4)))) a b c d)
[18:34:16] <jackdaniel> (make-foo :a 1 :b 2 :c 3 :d 4) ; -> #(1 2 3 4)
[18:34:26] <jackdaniel> you have all accessors in place, but not structure class is defined
[18:34:55] <mfiano> That isn't conforming
[18:35:08] <sm2n> phoe: struct as in defstruct
[18:35:44] <jackdaniel> right, the type must be either a list, vector or (vector size)
[18:35:49] <jackdaniel> thanks for the correction mfiano
[18:36:01] <resttime> jackdaniel: Ooooh interesting, I did not know that was possible. I had only been declaring types for the slots
[18:36:34] <Bike> it kind of makes it a different operation. instead of defining a new kind of storage, you're defining a bunch of accessors for a normal vector or whatever.
[18:37:00] <phoe> sm2n: I don't understand the difference then, every instance of a class defined via DEFSTRUCT is a STRUCTURE-OBJECT
[18:37:15] <mfiano> You can however use (vector size) and then create an alias with deftype to be a simple-array, and SBCL will be smart enough
[18:39:02] <jackdaniel> mfiano: not really non-conforming, rather not portable
[18:39:26] <jackdaniel> " type---one of the type specifiers list, vector, or (vector size), or some other type specifier defined by the implementation to be appropriate. "
[18:39:58] <mfiano> resttime: Note however, that doing this means you can no longer specialize on a nominal type.
[18:40:06] <sm2n> phoe: huh, for some reason I thought there was a difference. Never realized you could dispatch on structs
[18:40:08] <jackdaniel> and it seems that sbcl assumes that in (vector size) size is the type specifier, i.e (vector fixnum) :)
[18:40:43] <phoe> sm2n: you can! structure classes are classes like all others and they obey CLOS dispatch normally
[18:40:48] <Bike> yes, well, down the page in defstruct it says you can do list, vector, or (vector element-type)
[18:41:02] <jackdaniel> ah, I see, thanks
[18:41:05] <Bike> which is less dumb than the "arguments and values" section saying (vector size), since that's not actually a type specifier
[18:41:05] <sm2n> phoe: yup
[18:41:17] <Bike> it is a spec bug :(
[18:41:30] <jackdaniel> spec is the ground truth!
[18:41:37] <phoe> we must live with the contradiction
[18:42:05] <Bike> it's not the only arguments and values section that says stupid things, so whatever
[18:42:18] <resttime> mfiano: looked up nominal just now, not exactly sure meaning, is it that the defgeneric/defmethod functions won't work anymore then? (unable to distinguish the type)
[18:42:26] <phoe> I wish DEFSTRUCT was actually split into a proper chapter and glossary like all other parts of CL
[18:42:36] *** Joins: user_ (~user@70.34.196.141)
[18:42:36] <phoe> but, no, it's just one huge page that attempts to describe everything
[18:42:42] * phoe ,rant over
[18:42:48] <Bike> well, it's a big macro
[18:42:55] <mfiano> resttime: Using standard-object or structure-object means that you can create custom printed representations without clobbering existing vectors'. I mean you could use the priority argument to set-pprint-dispatch, but...
[18:43:00] <phoe> Bike: well, so is LOOP
[18:43:04] <Bike> point
[18:43:52] <Bike> me, i think the defstruct that defines accessors for sequence type should be split off, and the normal defstruct should just be a :metaclass option to defclass. i can only dream
[18:44:01] <Bike> (that could involve problems with compile time knowledge, though)
[18:44:07] <mfiano> resttime: A structure with a :type specified is no longer a user type, basically. It's just an alias with convenient named accessors (in addition to integral indexing)
[18:44:13] <sm2n> Wait this is actually really neat — you could use this to destructure some fixed size binary protocol/format trivially
[18:44:39] <sm2n> resttime: yes
[18:44:42] <mfiano> So you can't specialize it without possibly affecting other code in other packages.
[18:44:45] <Bike> trivially?
[18:44:52] <user_> hi, anybody willing to hint me regarding fast-http and parsing request from string? I am using (parse-request (make-http-request) callbacks *request*), where callbacks is made with make-callbacks and *request* is a string of request (= "GET / HTTP..."). But I am getting invalid HTTP method error, what am I doing incorrectly?
[18:45:08] *** Quits: amb007 (~a_bakic@c82-214-92-250.loc.akton.net) (Read error: Connection reset by peer)
[18:45:44] <sm2n> or hmm nvm, that doesn't work because it can't cross element bounds
[18:45:46] *** Joins: amb007 (~a_bakic@c82-214-92-250.loc.akton.net)
[18:46:11] <sm2n> can't exactly take an accessor to the leading 24 bits of a bytevector
[18:46:33] <sm2n> reminds me that I wanted to write a CL backend to kaitai struct
[18:47:04] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d824:1b8e:8932:48b6) (Ping timeout: 268 seconds)
[18:48:08] <resttime> Oh hmmmm, I'll have to think about tradeoffs with design and such if DEFSTRUCT isn't a user type
[18:48:32] <sm2n> it is, just not when you declare it to be a vector or list or whatever
[18:48:33] <mfiano> It is a user class that maps to a CL type.
[18:48:40] <jackdaniel> this is only useful when you'd use bare vectors either way - you have somewhat useful accessors
[18:48:57] <jackdaniel> usually you want a standard-class and  standard objects
[18:49:16] <mfiano> Common Lisp has a weird hybrid of nominal and structural typing, and this is one area that is troublesome in that regard.
[18:50:08] <mfiano> I would use a regular structure-object if you want a print-object method, rather than increasing the priority argument for set-pprint-dispatch which is a hack
[18:51:14] <Bike> in what sense does CL have structural typing at all? i mean, you can define generic functions on whatever, but that's not part of the type system
[18:53:13] *** Quits: amb007 (~a_bakic@c82-214-92-250.loc.akton.net) (Ping timeout: 268 seconds)
[18:53:26] <jackdaniel> perhaps (integer 3 8) , 3 and could be considered as "features"
[18:53:34] <jackdaniel> 3 and 4 *
[18:53:53] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[18:55:05] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d824:1b8e:8932:48b6)
[18:55:44] <jackdaniel> hands on, who's staring at "Structural type system" article on wikipedia right now? :)
[18:55:56] * phoe googles it
[18:56:03] <phoe> me
[18:56:54] <mfiano> with a nominal type system (deftype foo () 'bar) would be a distinct type, and not just an alias to the structural of BAR
[18:57:23] <mfiano> but this gets muddy real fast in CL, so that is not a good example
[18:57:38] <Bike> it's ok, i have a copy of TaPL somewhere
[18:57:49] <mfiano> TaPL?
[18:57:59] <Bike> types and programming languages, a book about type systems
[18:58:04] <mfiano> Aha
[18:58:09] <Bike> it's the only reason i know anything about this
[18:59:17] <Bike> anyway, deftype is just a macro mechanism for types. it's just like a type alias in c or haskell, not really even a factor in the type system per se
[18:59:59] <jackdaniel> or (cons foo-type (cons bar-type null))
[19:00:13] <Bike> it doesn't actually let you define a "new" type in a meaningful way, unlike defclass for example
[19:00:32] <Bike> but in lisp new types can only be defined in that nominal way
[19:00:53] <Bike> no ADTs or anything
[19:01:55] <mfiano> Right. What I was getting at earlier is a non-structure-object struct's name behaves just like this nominative aliasing
[19:02:18] <Bike> you mean if you provide :type to defstruct?
[19:02:24] <mfiano> Yes
[19:02:35] <Bike> it doesn't even do that.
[19:03:02] <mfiano> You can't, for example, define a print-object method on it exclusively.
[19:03:06] <Bike> the page has an example (defstruct (binop (:type list)) ...) and says "binop is a conceptual data type in that it is not made a part of the Common Lisp type system. typep does not recognize binop as a type specifier, and type-of returns list when given a binop structure. There is no way to distinguish a data structure constructed by make-binop from
[19:03:07] <Bike> any other list that happens to have the correct structure."
[19:04:06] <mfiano> Ah this is true
[19:04:10] <jackdaniel> so what would constitue a structural type?
[19:04:29] <mfiano> http://wiki.c2.com/?NominativeAndStructuralTyping
[19:04:34] <Bike> a type meaning something like "an object that has a FOO accessor"
[19:05:46] <phoe> accessor? would a slot be enough?
[19:06:04] <phoe> (if we want to pretend that SLOT-VALUE is the universal accessor in the CL world)
[19:06:15] <Bike> lisp does not have this concept at all so don't expect much specificity
[19:06:27] <phoe> yes, that's exactly what I've been poking at
[19:06:45] <Bike> the type of a lisp object is generally closely tied to its class, which is like the name in a nominal system. in a structural type system there is no dependence on classes in this way
[19:08:24] <Bike> say (struct foo) specifies the type of objects with a foo accessor. then if a function is specified to take a (struct foo) argument, you can just as well pass in a (struct foo bar) without bothering to "define a subclass" or whatnot
[19:10:58] <mfiano> I am completely agreeing with everything you said.
[19:11:44] <Guest74> heisig: anywhere to look on this framework you're working on? Could always insight to help optimize my stuff.  I only use 1d arrays anyways to represent 2d rasters, but i'm sure my padding/width(to fake conformal arrays)  stuff could probably be better.
[19:13:23] <Bike> might be kind of neat if the lisp type system could be extended in some way like this, but it can't, oh well
[19:14:02] <jackdaniel> I need to think about it (this distinction is still not clear to me)
[19:14:35] <jackdaniel> you could define (deftype has-foo (object) `(find-method (... standard-reader-method ... ) ))
[19:14:52] <jackdaniel> bleh, throw satisfies somewhere in between :)
[19:15:28] <Bike> well ok, sure, satisfies lets you do literally anything, and you could probably finagle it to work with subtyping
[19:15:34] <mfiano> nominal typing is common in strictly static type systems
[19:15:37] <mfiano> runtime types can do pretty much anything.
[19:16:59] <Bike> maybe extended sequences are a good example? crhodes's extension lets you specialize protocol methods to treat whatever as a sequence... but to make it work fully, you also need to hook up the nominal typing element by making your sequence class a subclass of SEQUENCE
[19:17:27] <Bike> the type system works in terms of subclassing rather than "does it work with this protocol"
[19:18:57] *** Quits: frodef_ (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[19:19:05] <mfiano> By the latter do you mean like C#, Go, etc "interfaces"?
[19:19:33] <Bike> i don't know anything about those i'm afraid
[19:19:49] *** Joins: frodef (~frode@46.212.93.4)
[19:20:09] <jackdaniel> I get that generic functions can't specialize on other types than classes (+ eql) - do we limit ourself to what clos recognizes as a specializable type?
[19:20:43] <Bike> oh, well, here i'm talking about the type system rather than clos
[19:21:14] <Bike> structural types are usually not conceived of in terms of being able to test them at runtime, i don't think
[19:21:44] <Bike> (i mean, types in general aren't, but with a nominal type system you can just do tagging)
[19:22:14] <jackdaniel> so how extensible sequences are a good example then? the fact that /something in the system/ requires object to have a sequence as a superclass is an implementation decision?
[19:23:14] <Bike> well, what i mean is you could define your own class, specialize all the sequence generic functions, but it still wouldn't work unless you also did the subclassing
[19:23:21] <Bike> even though the actual protocol would be fully defined for it
[19:23:51] *** Joins: ldb (~user@user/ldb)
[19:24:20] <mfiano> Same with Gray streams right?
[19:24:35] <Bike> I suppose so yeah
[19:25:34] * jackdaniel feels dumb because he doesn't understand
[19:25:56] <jackdaniel> but oh well, happens; I need to catch up with other things
[19:26:06] <mfiano> jackdaniel: I think we are getting into duck typing is all.
[19:26:07] <jackdaniel> thanks for attempts to explain it to me
[19:27:51] <Bike> it takes some work to wrap your head around, especially if like me you haven't actually programmed with it
[19:29:22] <mfiano> I am understanding the general ideas here, being familiar with a lot of Blubs, but I am not very into PL or type theory.
[19:34:38] <mfiano> It's sort of unfortunate that all the interesting extensions to CL require implementation support: extensible sequences, Gray streams, PLN, etc.
[19:36:52] <Bike> if it can be done within the language we usually call it a "library" rather than an "extension"
[19:37:08] <mfiano> Yes
[19:37:38] *** Quits: heisig (~heisig@p508b541c.dip0.t-ipconnect.de) (Quit: Leaving)
[19:38:07] <mfiano> Although macros are often touted as a way to extend the language without implementation support.
[19:38:53] <yitzi> The Gray stream protocol doesn't depend on subclassing from from Gray stream classes.
[19:39:34] * mfiano checks his Gray stream usages to remember how it works
[19:40:28] <yitzi> Technically if you define all the methods it should work, unless a particular CL implementation chooses to dispatch on the subclass.
[19:40:46] <mfiano> Well I inherit from trivial-gray-streams:fundamental-binary-input-stream in this one usage
[19:42:13] <Bike> macros are a way to extend the language without implementation support (well, beyond the implementation supporting macros). doesn't mean they can do everything
[19:42:16] <Bike> yitzi: ah
[19:42:19] <yitzi> The protocol proposal says that the classes are there for convenience so you can reuse `stream-write-string` etc.
[19:42:32] <mfiano> Ah
[19:42:42] <Bike> but you probably still want to subclass from STREAM somehow, no?
[19:43:10] <yitzi> If you define `output-stream-p`, etc but have your own superclass it should still work.
[19:43:23] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[19:43:30] <Bike> but without subclassing from stream, any type declaration saying something is a stream won't be correct
[19:44:06] <Bike> and you can't use typep, etc
[19:44:20] <yitzi> Bike: Correct.
[19:45:27] <yitzi> I would think using streamp would be better though, since it is made a generic.
[19:46:24] <yitzi> At least that is what is done in Cyclosis (from Mezzano)
[19:46:48] <Bike> well, the point is just that the actual type system can't know your thing can be treated as a stream without the subclassing
[19:47:04] <yitzi> Yep
[19:47:06] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d824:1b8e:8932:48b6) (Ping timeout: 260 seconds)
[19:47:35] <random-nick> you can use typep with a (satisfies streamp), no?
[19:47:35] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:47:51] *** Joins: amb007 (~a_bakic@cable-94-189-181-124.dynamic.sbb.rs)
[19:47:54] <Bike> yeah, but that's not what the cl:stream type is.
[19:48:56] <random-nick> hmm yes, clhs says that stream is a class and not that it's a type
[19:50:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:50:44] <mfiano> All classes are also types of the same name.
[19:51:41] <random-nick> yes, but not all types are classes of the same name
[19:52:13] <Bike> that doesn't seem relevant, since stream is in fact a class
[19:52:16] <mfiano> Well I suppose you could create an anonymous class named NIL
[19:56:57] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[19:58:52] <jackdaniel> anonymous class or named nil?
[19:59:42] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:01:41] <mfiano> Both?
[20:01:53] <mfiano> (class-name (make-instance 'standard-class)) ; => NIL
[20:03:34] *** Joins: Oladon (~olad@98.43.81.226)
[20:03:58] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Client Quit)
[20:04:20] <jackdaniel> class-name of anonymous class is nil, but is the term "named class" appropriate?
[20:05:00] <jackdaniel> the class is named in the environment, and in cl nil names another type
[20:06:49] <beach> There is the concept of a "proper name" for a class.
[20:07:12] <beach> clhs class-name
[20:07:12] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_class_.htm
[20:07:24] <beach> "The name of an anonymous class is nil"
[20:10:01] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 256 seconds)
[20:10:23] <jackdaniel> yes, I saw this passage, I'm wondering whether "named class" applies to the class-name or the class name in the environment
[20:10:33] *** Joins: frodef (~frode@46.212.93.4)
[20:10:46] <beach> The standard does not seem entirely clear on that I think.
[20:10:49] *** Joins: jealousmonk (~user@2804:431:e7c4:325e:faf7:a143:6e41:2f65)
[20:10:57] <beach> Maybe an issue for WSCL.
[20:11:07] <mfiano> Is "named class" a term?
[20:11:24] <jackdaniel> it is used in the glossary sparingly (in context of class designators)
[20:11:31] <mfiano> Ah
[20:12:32] <jackdaniel> there is 'named constant', but that's for variable namespace
[20:13:15] <jackdaniel> also "proper name n. (of a class) a symbol that names the class whose name is that symbol."
[20:14:42] <mfiano> Ok, I can now feel my brain seeping out my ears. I am going to go rest for a bit.
[20:23:00] *** Joins: frodef_ (~frode@46.212.93.4)
[20:23:37] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 256 seconds)
[20:24:01] <yitzi> Bike and mfiano: I was able to actually make a functional character output stream that does is not a subclass of stream on ECL that works. Not so on SBCL since it is doing typechecks in terpri, etc.
[20:25:00] <jackdaniel> there is also "traits" library prototype by scymtym
[20:25:45] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:31:59] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:8140:592c:cee6:b689)
[20:42:28] *** Joins: notzmv (~zmv@user/notzmv)
[20:43:26] <Bike> oh, interesting.
[20:44:19] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[20:54:56] <Bike> i see, and this works by specializing the mop method applicability methods. so typep wouldn't work. which is fine, it's still interesting. i should put more thought into what an extensible type system could look like.
[20:55:46] <jackdaniel> there is also presentation-typep in clim
[20:55:59] <jackdaniel> along with presentation-subtypep
[20:56:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:56:57] <jackdaniel> (presentation generic function may be specialized on the presentation type)
[21:03:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:06:21] *** Joins: atgreen (~green@104.156.64.75)
[21:14:33] *** Joins: rain3 (~rain3___@86.127.204.59)
[21:14:57] *** Quits: frodef_ (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[21:16:06] *** Joins: frodef (~frode@46.212.93.4)
[21:16:55] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[21:18:21] <phoe> jackdaniel: aren't all classes named in portable CL if we skip the MOP? even classes that have been removed from the global environment still have their names intact, AFAIK
[21:21:15] <jackdaniel> the gist of deliberations was whether the term "named" applies to the state in the environment or to the result of class-name invoked on the class
[21:21:27] <jackdaniel> "we name him silly-bob" vs "his name is bob"
[21:21:42] *** Quits: atgreen (~green@104.156.64.75) (Remote host closed the connection)
[21:21:46] <Bike> you can use (setf (find-class name) nil) and (setf (class-name class) nil) to remove any name association even without the mop.
[21:22:02] <Bike> and in fact it looks like there's a note on class-name saying "The name of an anonymous class is nil."
[21:22:11] <jackdaniel> class-name is not an accessor in cl standard, is it?
[21:22:21] *** Joins: atgreen (~green@104.156.64.75)
[21:22:23] <phoe> it's a reader
[21:22:36] <jackdaniel> nope, it is accessor: http://www.lispworks.com/documentation/HyperSpec/Body/f_opsetf.htm
[21:22:36] <phoe> also (defclass foo () ()) (setf (find-class 'bar) (find-class 'foo)) (class-name (find-class 'bar)) ;=> FOO
[21:22:37] <Bike> no there's also (setf class-name)
[21:22:42] <Bike> they have separate pages for whatever reason.
[21:22:47] <phoe> oh wait a second
[21:22:58] * phoe updates cache
[21:23:14] <Bike> (setf find-class) mutates the environment but does not affect the actual class at all. (setf class-name) does affect the class (and not the environment)
[21:23:21] <phoe> clhs class-name
[21:23:21] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_class_.htm
[21:23:27] <phoe> "If S is a symbol such that S =(class-name C) and C =(find-class S), then S is the proper name of C. For further discussion, see Section 4.3 (Classes)."
[21:23:37] <phoe> so there needs to be a mutual relationship for a "proper name" to be formed
[21:23:44] <phoe> in my above example there's no proper name, then
[21:24:33] <jackdaniel> phoe: I think that these things were mentioned in the prior discussion too
[21:28:41] * phoe quietly dissolves
[21:30:15] <contrapunctus> `(reconstitute phoe)`
[21:34:39] <jackdaniel> (error 'already-garbage-collected-error :name 'phoe :proper-name-p nil)
[21:38:16] <phoe> touché
[21:38:21] <phoe> (incf jackdaniel)
[21:46:36] *** Joins: Everything (~Everythin@37.115.210.35)
[21:49:16] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[21:50:49] *** Quits: user_ (~user@70.34.196.141) (Quit: leaving)
[21:54:28] <jackdaniel> alright, starting from tomorrow I will be rather offline until after Holiday, so Merry Christmas and Happy Hannukah everyone :) o/
[22:06:18] *** Quits: OlCe` (~user@lfbn-nic-1-117-75.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[22:06:42] *** Quits: Jing (~hedgehog@115.207.51.59) (Read error: Connection reset by peer)
[22:07:29] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[22:09:02] <jeosol> Good morning all and seasons greetings
[22:09:18] <jeosol> jackdaniel: Merry Xmas to you too
[22:11:47] <jeosol> I have a question guys relating to maintaining deployed CL resources. Now I have looked at two options: 1) Docker containers and 2) just a repl. For updates, rebuilding my images takes longer for sure (I also use multi-stage build) but with repl option, I push updated code to the machine and can send update command the running repl is updated
[22:11:47] <jeosol> incrementally
[22:12:45] <jeosol> Now I get for easier deployments, CI/CD, devops, etc, containers are better. I wanted what you guys are doing especially at is also related to image-based development in CL. Thanks
[22:13:19] <jeosol> I should add the second option appears ok for now, I just have a small machine (dev) and another for the prod testing, so nothing super complicated
[22:16:53] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f4:eb56:8140:592c:cee6:b689) (Ping timeout: 252 seconds)
[22:21:48] *** Joins: green__ (~green@104.156.64.75)
[22:22:16] *** Quits: atgreen (~green@104.156.64.75) (Read error: Connection reset by peer)
[22:32:45] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Ping timeout: 268 seconds)
[22:33:01] *** Quits: rain3 (~rain3___@86.127.204.59) (Ping timeout: 240 seconds)
[22:47:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:48:02] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[22:48:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:56:29] <flip214> what's the quicklisp build status page?
[22:56:33] <flip214> thanks in advance!
[22:59:04] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[22:59:45] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:99f5:e580:78b6:1a07) (Remote host closed the connection)
[23:00:11] <_death> http://report.quicklisp.org/ ?
[23:12:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:15:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:17:54] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[23:21:04] <opalvaults[m]> I'm a little confused on the use of a lambda here in Practical Common Lisp.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/674d99d9c802ef3b4a88a04363f1155bb0fa6425)
[23:22:14] <opalvaults[m]> such as
[23:22:14] <opalvaults[m]> `(defun where (&key title artist rating (ripped nil ripped-p))
[23:22:14] <opalvaults[m]>     (if title (equal (getf *db* :title) title t)...etc.
[23:22:32] <Bike> you can do like (funcall (where ...) cd)
[23:22:48] <opalvaults[m]> db = global var that contains a bunch of keywords and values
[23:26:26] *** Joins: pjb (~pjb@user/pjb)
[23:30:26] *** Joins: VincentVega (~user@212.97.4.228)
[23:32:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[23:34:50] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:36:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:38:08] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:dde:eed4:1c5f:551e) (Remote host closed the connection)
[23:39:18] <opalvaults[m]> Bike: I feel like remove-if-not could also be used here to select optional arguments?
[23:40:29] <Bike> what's wrong with keyword arguments and what does that have to do with returning a function
[23:40:57] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:19a6:db30:97eb:3075)
[23:44:56] *** Joins: concrete-houses (~g@209.6.150.53)
[23:45:37] <concrete-houses> using postgresql makes me wonder if a lisp database would be less work
[23:45:45] <concrete-houses> I thought it was going to be a fun ride
[23:45:58] *** Joins: frodef_ (~frode@46.212.93.4)
[23:46:29] <concrete-houses> I remember paul graham saying in one of his essays that they didn't use sql database... in VIAWEB
[23:46:37] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[23:47:19] <hayley> It's hard to get durability without a SQL database, but possible.
[23:47:20] <Xach> that's for a program that had one user most of the time
[23:47:23] <hayley> And see <https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-RelationalDatabases.html>
[23:50:06] <concrete-houses> do most lispers use postgresql when doing a lot of data stuff?
[23:50:33] <opalvaults[m]> Bike: nothing wrong with keyword arguments, I'm just curious if there's a way to select keywords out of a list of database entries in an easier way than using a lambda expression. Also, do arguments in a definition automatically get passed to a lambda function?
[23:51:13] <opalvaults[m]> s/easier/different
[23:51:16] <hayley> Yes, lexical bindings are closed over.
[23:52:02] <hayley> concrete-houses: Most of the time I am parsing whatever data format I am given, but arguably that's not a lot of data.
[23:52:15] <hayley> ...parsing without making a copy in a database.
[23:53:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:54:09] <Bike> opalvaults[m]: for a real program using a database you would probably use a better representation. this is just an introductory example for the book.
[23:54:33] <Bike> if you DO want to grab values from a keyword parameter list, you can use getf
[23:54:35] *** Joins: aeth (~aeth@user/aeth)
[23:54:35] <Bike> clhs getf
[23:54:45] <Bike> someday i'll remember how bots work.
[23:54:46] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_getf.htm
[23:54:50] <Bike> oh ok
[23:58:12] <opalvaults[m]> Bike: gotcha, okay i'll read on then. it looks like this intro is just a quick and dirty and not meant to explain everything all at once. that's interesting how lambda (cd) is able to parse over every argument passed into a procedure
[23:58:21] <concrete-houses> Baker says non relational databases are FASTER? now thats interesting
[23:58:45] <phoe> opalvaults[m]: it has access to these variables - this is how lexical closures work
[23:59:10] <phoe> (let ((x 0)) (lambda () (incf x))) ; here is a simple counter, call it a few times
