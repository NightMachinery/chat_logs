[00:08:01] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ef:d61b:6998:4307:2323:94d4) (Read error: Connection reset by peer)
[00:08:56] <Josh_2> new sbcl compiled using --fancy
[00:09:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:10:55] <Josh_2> https://plaster.tymoon.eu/view/2813#2813 adopt is pretty easy
[00:18:01] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[00:34:14] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:35:30] *** Joins: karlosz (~karlosz@136.56.98.53)
[00:36:45] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:39:50] <Spawns_Carpeting> would you guys be interested in a string util library for common lisp that implements the "s.el" library for emacs lisp?
[00:40:03] <Spawns_Carpeting> https://github.com/magnars/s.el
[00:40:17] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 250 seconds)
[00:40:20] <Spawns_Carpeting> the api i mean
[00:40:57] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[00:43:59] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:10d7:de5b:7e19:7bec)
[00:44:32] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:45:52] *** Joins: nij- (~jin@2001:48f8:9021:806::d58e)
[00:46:22] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:47:17] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:47:18] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[00:47:37] *** Joins: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs)
[00:48:57] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:10d7:de5b:7e19:7bec) (Ping timeout: 250 seconds)
[00:49:46] <Xach> Spawns_Carpeting: It looks interesting, but I don't think I'd personally use it - I think I would use built-ins or roll my own for most of that functionality.
[00:52:44] <Josh_2> Hmm, my saved lisp image is throwing a condition saying "dont know how to REQUIRE sb-posix"
[00:53:25] <Josh_2> Spawns_Carpeting: https://github.com/vindarel/cl-str
[00:54:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:55:30] <kakuhen> Spawns_Carpeting: I would use it if it offers something that the "str" package on Quicklisp doesn't, and if it's easy-to-use
[00:55:55] <Josh_2> If it offers something str doesn't, then I think it would be better to just make a PR for str
[01:00:26] <Spawns_Carpeting> Xach: I can understand that for sure. that's actually my motivation for writing it, so far I've just been adding stuff that I needed for writing little scripts
[01:00:37] <Spawns_Carpeting> i've been trying to do my scripting tasks in CL
[01:00:58] *** Parts: nij- (~jin@2001:48f8:9021:806::d58e) (#commonlisp)
[01:01:18] <edgar-rft> Spawns_Carpeting, two thoughts: 1) many of that functions already exist in Common Lisp under a very similar name, and 2) regular expressions in Emacs are built-in by default, in Common Lisp you need another non-trivial external library (CL-PPCRE or similar) to make these functions work.
[01:01:18] <edgar-rft> On the other hand, for *learning* how string manipulations work in Common Lisp it would be a great exercise to port that library.
[01:02:49] <Spawns_Carpeting> yeah thats my other goal, is to help learn lisp
[01:04:33] <Spawns_Carpeting> i do need to require cl-ppcre for some of the stuff
[01:04:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:08:53] <Josh_2> I would say whatever doesn't exist in str you should implement and then make a PR
[01:09:04] *** Joins: hyperdash (~user@host-92-18-120-33.as13285.net)
[01:09:32] *** Parts: hyperdash (~user@host-92-18-120-33.as13285.net) (ERC 5.4.1 (IRC client for GNU Emacs 27.2.50))
[01:09:41] <Josh_2> Now I need to figure out why I can't use sb-posix on my sbcl build :cry:
[01:11:38] <edgar-rft> sb is a margerine brand here :-)
[01:12:53] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[01:13:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:14:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058)
[01:15:57] <Catie> Is it POSIX compliant?
[01:27:21] *** Joins: miique (~miique@181.46.139.166)
[01:32:52] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b) (Ping timeout: 268 seconds)
[01:33:48] <rotateq> Spawns_Carpeting: Maybe you can have a read on that: https://stevelosh.com/blog/2021/03/small-common-lisp-cli-programs/
[01:41:27] <etimmons> Anyone here use Windows regularly? I'm nearing completion on a PR for osicat that should fix iterating over directory contents, add sym/hard link support, allow modification of environment variables, and export some low-level win32 APIs. I rarely use Windows myself, so it'd be great if there's someone else who could look it over for usefulness and correctness
[01:42:13] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:10d7:de5b:7e19:7bec)
[01:42:27] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 250 seconds)
[01:43:07] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ef:d61b:4874:705:ccbf:2b8d)
[01:43:47] <rotateq> etimmons: Was nearly before asking "What is this Windows you talk about?" :)
[01:44:11] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[01:46:54] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:10d7:de5b:7e19:7bec) (Ping timeout: 260 seconds)
[01:49:12] <NotThatRPG> rotateq: You mean "What are these windows you talk about?" ;-)
[01:49:37] <etimmons> rotateq: Yeah, that's how I normally feel. But enough folks out there use windows (/me shudders) that I feel it's worth having things actually support it. My current goal is to get cl-tar working well on Windows, which requires some low-level file-system APIs that the standard doesn't provide
[01:49:52] *** Quits: varjag (~user@188.95.247.249) (Quit: ERC (IRC client for Emacs 28.0.50))
[01:50:51] <etimmons> I probably /could/ ignore symlinks on Windows, but my understanding is that more things have finally started using them
[01:51:24] <etimmons> Even the git installer prompts you nowadays if you want to use symlinks when checking out repos
[01:55:03] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 268 seconds)
[01:58:21] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[01:58:33] <rotateq> Right NotThatRPG :D
[01:59:01] <rotateq> Yes of course, do you use SBCL for that?
[02:00:36] <dbotton> Anyone know if regarding this quote from Let over Lambda if the source is real or a joke? "Common Lisp does away with spaghetti stacks and only provides lexical closures[MACARONI]."
[02:00:58] <dbotton> pg 73
[02:01:05] <rotateq> Let me see.
[02:01:29] <dbotton> either way had me laughing
[02:01:49] <etimmons> rotateq: SBCL is my primary implementation and what I'm using to test this. But these changes should work on any implementation where CFFI works
[02:02:53] <rotateq> Sounds good.
[02:03:34] <rotateq> dbotton: Seems to be the title of an article by Guy Steele :D
[02:04:15] <Catie> Oh yeah no, I looked up that article when I saw it, it's real
[02:04:29] <rotateq> The future is now. ^^
[02:05:51] *** Joins: notzmv (~zmv@user/notzmv)
[02:05:53] *** Joins: john-a-carroll (~john-a-ca@host-92-29-108-55.as13285.net)
[02:07:13] *** Joins: Everything (~Everythin@37.115.210.35)
[02:07:43] <theothornhill> Where can I read more on this pattern? https://paste.sr.ht/~theo/49647c1a71046a7e0a874c41c58c66c441e515ba
[02:08:25] <rotateq> Can you be more specific please? :)
[02:08:30] <theothornhill> defuns using a common let bound table
[02:08:51] <rotateq> yes this data is just scoped for those DEFUNs
[02:09:19] <theothornhill> i understand how that works, but is this common?  I've seen similar things around in sbcl code, but not in libraries
[02:09:29] <Catie> I use it from time to time
[02:09:30] <rotateq> so when one function is called and may change something for the hash-table, the other one can see it too
[02:10:11] <rotateq> yes why not? i don't know your former background, but you could see it as some kind of declaring "private"
[02:10:34] <theothornhill> Right, so it's a good way to avoid having to name global vars?
[02:10:41] <theothornhill> That makes sense
[02:10:53] <Catie> Not necessarily to avoid naming them, but to restrict their scope
[02:10:53] <rotateq> yes and no :) depends what you want to achieve ^^
[02:12:15] <theothornhill> Catie: I see.  And the lifetime of the table in this case is the same as the image?
[02:12:28] <Catie> Correct, it has indefinite extent
[02:13:33] <Catie> As long as it's referenced in the functions named in the DEFUN forms, it can't be garbage collected. If someone has more in-depth knowledge about specific implementations, please correct me, but I believe as long as the DEFUN'd functions exist then the table will as well
[02:14:44] *** Quits: pve (~pve@37-136-205-24.rev.dnainternet.fi) (Quit: leaving)
[02:14:45] <theothornhill> That makes sense
[02:14:49] *** Quits: john-a-carroll (~john-a-ca@host-92-29-108-55.as13285.net) (Ping timeout: 256 seconds)
[02:15:49] <NotThatRPG> I believe in at least some implementations, non-top-level DEFUNs may be significantly less efficient than top level ones. But my memory of when and in what context I was told this, alas, is gone.
[02:16:13] <Catie> It's really cool! There's a bit about it in Practical Common Lisp, and if I recall correctly an entire chapter in Let Over Lambda about it
[02:17:27] <theothornhill> Nice.  Didn't get to that book yet.  Does this pattern have a name?  I mean, it looks a little like a closure, but it isn't right?
[02:17:28] <Catie> NotThatRPG: That wouldn't surprise me at all, probably something about "eval in a null lexenv"
[02:17:36] <Catie> No it is. That's a lexical closure
[02:17:52] <theothornhill> Thanks
[02:17:59] <Catie> Any time!
[02:18:06] <rotateq> theothornhill: Pretty advanced stuff in this book.
[02:18:57] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[02:19:03] <theothornhill> great book so far!
[02:19:34] *** Joins: frodef (~frode@46.212.93.4)
[02:19:35] <rotateq> Yes I don't know where you are at your journey.
[02:20:35] <theothornhill> well, me neither, since it only feels like the rabbit hole gets bigger and bigger.  But I've been at it for a couple of years now
[02:20:53] <theothornhill> or did you mean in the book, hehe
[02:21:08] <rotateq> The basics are much. :) But you will profit from it in the long run.
[02:21:28] <rotateq> No I meant in general. How long is it now?
[02:21:33] <Catie> Common Lisp is the gift that keeps on giving
[02:21:41] <rotateq> Ah okay good couple of years.
[02:24:10] <rotateq> Catie: Recently I have been with a newer friend who's now in IT business for some years in the movies (Matrix Resurrection) and when we waited to buy the tickets, he told on with his newer Docker experiences and the that C# is the thing he knows upto now with which one can do "every" paradigma and that it won't get cryptic.
[02:24:13] <theothornhill> I tumbled into lisp when listening to James Gosling talking about Simula 67 during the 50 year anniverary of Simula in Oslo, so the niche stuff hit me pretty hard
[02:24:33] <rotateq> But sometimes I like giving people the red pill, taking it they have to themselves as I did some day in the past.
[02:25:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[02:25:02] <rotateq> Ah cool, I associate this name with creation of Java also (like Steele's).
[02:25:16] <theothornhill> That's right
[02:25:17] <rotateq> "We were after the C++ programmers ..."
[02:25:28] <theothornhill> gosmacs also
[02:25:32] <Catie> rotateq: I'm very impressed by your friend's optimism, and I truly hope he gets to hold onto it
[02:25:49] <rotateq> Catie :)
[02:26:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:27:41] <drakonis> guy steele's involvement in java was very limited though
[02:27:55] <drakonis> he came on board after java was designed
[02:28:10] <theothornhill> "designed"
[02:28:21] <drakonis> for a lack of a better word.
[02:28:44] <rotateq> Okay, hope he got enough money for the pain.
[02:29:34] <drakonis> looks like it was for writing the spec
[02:30:03] <rotateq> So what he perfectly fits. :)
[02:30:50] <theothornhill> He talks about that a bit in his talk in sussmans 60th(?) anniversary
[02:32:15] <edgar-rft> java first was signed, then unsigned, but finally they gave up, so java got designed
[02:32:35] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[02:32:48] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[02:35:33] <rotateq> edgar-rft: as always you back us up with humor and i like it. plus truth
[02:38:04] *** Joins: phantomics (~phantomic@97-118-174-39.hlrn.qwest.net)
[02:40:53] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[02:43:44] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[02:47:01] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Ping timeout: 240 seconds)
[02:48:16] <phoe> (incf edgar-rft)
[02:49:14] <White_Flame> good java roast
[02:55:38] <rotateq> phoe: maybe now would be your chance asking about array-oriented things as phantomics joined again
[02:56:05] <phantomics> have a question about arrays phoe?
[02:56:06] <rotateq> White_Flame: Good Java beans roasted for good coffee.
[02:56:36] <rotateq> instantly triggered :D i mentioned you this week about it
[02:56:55] <phoe> rotateq: I think I am good for the time being
[02:57:14] <phoe> i implemented my solution imperatively, I'll try learning me some array-oriented programming another time :D
[02:57:22] <rotateq> Okay I just remembered.
[02:57:34] <phoe> yes, thank you
[02:59:08] * rotateq likes acting as kind of gluon with spin 1ℏ
[02:59:27] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[03:03:31] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 268 seconds)
[03:04:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 240 seconds)
[03:16:45] <phoe> I really like vecto gradient architecture
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:10] <phoe> now that I have both coordinate and domain functions I can make gradients of all sorts of shapes and values
[03:17:32] <phoe> I'll try making a hexagon-shaped gradient tomorrow
[03:17:38] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:19:32] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[03:24:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:25:12] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[03:29:33] <phantomics> Quick question: has anyone used CL to talk to Arduino devices over USB? I'm having inconsistent results sending and receiving serial messages. In some cases I can get CL to do the same things I can do with the Arduino IDE's serial monitor, but in other cases it doesn't work
[03:29:51] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:30:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:34:21] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:34:33] <rotateq> I just know of this uLisp for those devices.
[03:37:22] <phantomics> I've heard of it, for my purposes will be easiest to just go with stock software on the Arduino and communicate with it from CL
[03:37:22] <rotateq> But maybe as CLISP is very hardware portable ...
[03:38:21] <Catie> It is?
[03:38:27] <rotateq> Not? ^^
[03:38:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:39:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[03:39:08] <rotateq> https://trash.randomerror.de/h7xc3/bootstrap.jpg
[03:40:54] <Xach> phoe: it is pretty slow! but if speed isn't the key thing flexibility is nice
[03:45:14] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:45:55] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[03:48:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:48:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[03:51:35] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[03:53:56] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:54:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:00:18] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:19:58] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 268 seconds)
[04:25:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:29:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:35:06] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[04:37:33] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[04:41:11] *** Quits: VincentV` (~user@212.97.4.33) (Remote host closed the connection)
[04:44:41] *** Joins: dre (~dre@2001:8003:c932:c301:8304:d78a:deb9:dfd1)
[04:44:44] <yottabyte> Some things I would like as I learn cl: I wish print took more than one argument so I could do like (print a b c)
[04:45:08] <yottabyte> And I wish concatenate worked with numbers so I didn't have to first write-to-string them
[04:45:11] <Xach> yottabyte: i often use (list a b c) in that situation. and sometimes (list :got-here a b c)
[04:45:38] <yottabyte> Oh that's a good idea
[04:45:42] <Xach> yottabyte: format is used in that situation pretty often
[04:45:50] <yottabyte> Thank you, I will do that
[04:45:55] <yottabyte> format is used when?
[04:46:10] <Xach> when producing strings that have strings and numbers in them
[04:46:27] <Xach> (format nil "foo ~A bar ~D" "quuz" 42)
[04:46:47] <yottabyte> Ooo, I guess I'll have to start doing that
[04:47:40] <Catie> I haven't used it myself, but there's also the printv package which I've heard is very nice
[04:48:36] <yottabyte> I'll check that out too
[04:49:46] <yottabyte> Xach are you the person who made quicklisp? If so, kudos to you, I love it. So easy to use. Coming from js and node/npm it's so refreshing
[04:49:58] <Xach> yottabyte: glad to hear it's useful
[04:55:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[04:55:55] * Xach hasn't yet gone mad with VC cash 
[04:56:09] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[04:56:42] <remexre> > yet
[05:00:04] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[05:02:33] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 256 seconds)
[05:03:01] *** Joins: Alfr (~Alfr@user/alfr)
[05:04:03] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[05:04:34] <drakonis> yet.
[05:04:52] *** Joins: mrmr1 (~mrmr@user/mrmr)
[05:06:16] <rotateq> yottabyte: FORMAT is a beast of a powerful function facility :)
[05:06:37] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[05:06:37] *** mrmr1 is now known as mrmr
[05:06:37] <Xach> oh man, i accidentally published two quicklisp updates this month.
[05:06:48] <drakonis> nice?!
[05:06:51] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[05:06:59] <drakonis> is that a bad thing?
[05:07:12] <rotateq> cool, i could update sometime
[05:08:04] <Xach> drakonis: it's not great to not be aware of when i made the last release, but it's not otherwise harmful
[05:08:36] <drakonis> i see
[05:08:57] <drakonis> there's new projects here
[05:09:29] <Xach> I could have relaxed more during my vacation week
[05:09:51] <dre> I'm about to go on vacation
[05:10:09] <drakonis> i'm currently on vacation and learning cl
[05:10:10] <dre> and was wanting to work a bit on putting common lisp into the vim conjure plugin
[05:10:14] <drakonis> its v. nice.
[05:10:24] <dre> drakonis, :D welcome
[05:10:54] <rotateq> I just give the remainder of spacemacs :)
[05:11:12] <dre> xD nooo~~ stop
[05:11:58] <drakonis> i've heard about sicl while checking the available implementations and it looks pretty swell.
[05:12:08] <rotateq> okay if you say so. i thought likewise at some point first
[05:12:32] <rotateq> drakonis: yes very interesting :)
[05:12:43] <drakonis> looks like clasp uses one of its libraries
[05:12:45] *** Quits: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) (Quit: leaving)
[05:13:58] <drakonis> https://github.com/lisp-polymorph/polymorph.stl this is very impressive.
[05:13:59] <rotateq> yeah as it's also intended for implementors of other impls ^^ using modulwise
[05:14:37] <rotateq> yes if it's appropriate
[05:14:44] <drakonis> indeed
[05:15:07] <rotateq> and sure, shadowing a symbol and then redefining with also using the cl:foo
[05:15:42] <rotateq> and drakonis, iirc the first SICL module was for LOOP
[05:15:50] <drakonis> fun.
[05:16:42] <rotateq> https://www.youtube.com/watch?v=ZJr81DtSwUc
[05:17:29] <rotateq> and other videos tell about creating an impl ^^ or the SICL papers, but have to read most of those still (beside understanding)
[05:18:10] <drakonis> i'm very much looking forward to seeing how it'll fare as a implementation target
[05:20:07] *** Quits: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[05:20:55] <rotateq> and then climacs as a CL editor and develope environment :)
[05:21:03] *** Joins: amb007 (~a_bakic@109.245.225.179)
[05:23:04] <drakonis> haha yes
[05:23:05] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[05:23:10] <drakonis> that would be lovely.
[05:23:23] <drakonis> climacs as a emacs replacement
[05:23:38] <rotateq> so really then completely "Now featuring 100% less C."
[05:23:39] <drakonis> but the real killer feature would be a package that adds emacs compat for migrating off it
[05:24:01] <rotateq> yes and with much improvement for CL editing as someone told me :)
[05:24:05] <drakonis> yes.
[05:24:09] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[05:24:13] <drakonis> is climacs usable right now?
[05:24:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:24:56] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ef:d61b:4874:705:ccbf:2b8d) (Read error: Network is unreachable)
[05:24:58] <rotateq> I don't know.
[05:27:23] <dre> what we really need is vimacs
[05:28:00] <rotateq> you think so?
[05:28:02] <drakonis> nahhh
[05:28:04] <rotateq> :P
[05:28:07] <drakonis> give me second climacs
[05:28:26] <rotateq> emacs (the idea) as art of text editing
[05:28:35] <rotateq> but surely, vim is powerful
[05:28:40] <drakonis> robert wants to use sicl to make a lisp os
[05:28:42] <drakonis> wow...
[05:28:45] <drakonis> aight.
[05:29:05] <rotateq> CLOSOS
[05:29:07] <drakonis> the revival of the lisp machine beckons
[05:29:12] <drakonis> LispOS
[05:29:26] <rotateq> no the name i wrote :)
[05:29:33] <drakonis> the world needs a nix/guix in cl
[05:29:46] <rotateq> ohhh
[05:30:11] <rotateq> hm you mean additional ideas from those maybe
[05:30:26] <drakonis> https://github.com/robert-strandh/LispOS
[05:30:37] <drakonis> also i remember linking consfigurator earlier today
[05:30:44] <drakonis> its neat but it doesnt go all the way
[05:31:02] <rotateq> yes but there's also a paper for CLOSOS
[05:31:21] <rotateq> he will come up in ~2h if you have questions
[05:31:34] <drakonis> i see
[05:31:42] <rotateq> you could try running Mezzano
[05:31:55] <drakonis> perhaps.
[05:32:28] <drakonis> is CLOSOS newer or older than Li
[05:32:31] <drakonis> lispos?
[05:33:06] <sm2n> it's the same thing
[05:33:10] <rotateq> it's more the paper for now :)
[05:33:19] <drakonis> i see
[05:33:21] <drakonis> neat.
[05:33:39] <rotateq> but with FPGAs, nothing can stop us! :D
[05:33:46] <drakonis> hah
[05:34:20] <drakonis> does mezzano require a vm?
[05:34:39] <rotateq> yes mostly you want it that way i would say
[05:35:03] <drakonis> alright.
[05:36:14] <rotateq> dre: hope you come along well on your journey
[05:36:27] <dre> thanks :)
[05:36:44] <dre> I'm getting along. I still love CL; just trying to find the time between everything else.
[05:37:01] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:37:13] <rotateq> love grows by time deeply
[05:37:24] *** Joins: s-liao17 (~s-liao@101.86.96.21)
[05:39:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:43:11] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 250 seconds)
[05:43:55] <drakonis> but really, i kinda want to have common lisp as a system management layer and a daemon
[05:44:12] <rotateq> ok
[05:44:24] <drakonis> it takes work
[05:44:50] <rotateq> yes everything does
[05:45:22] <drakonis> consfigurator is a half measure
[05:46:13] <drakonis> anyhow, gotta go back to learning
[05:46:31] <rotateq> okay didn't want to annoy. good luck
[05:47:39] <drakonis> i mean, i feel like i'm being annoying
[05:48:00] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:48:49] <rotateq> i wonder if someone i teach for some time now will come up by himself with a non-string solution for adding up the digits of an integer ^^
[05:48:56] <rotateq> drakonis: you? no.
[05:49:17] *** Quits: kotshie (~kotshie@68.72.208.140) (Ping timeout: 240 seconds)
[05:50:01] *** Joins: igemnace (~ian@user/igemnace)
[05:54:19] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 268 seconds)
[05:56:23] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[06:03:44] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[06:04:07] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[06:09:38] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[06:26:38] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:32:05] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[06:32:19] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[06:35:34] *** Quits: s-liao17 (~s-liao@101.86.96.21) (Quit: Client closed)
[06:49:59] <Catie> SBCL replaces #\LATIN_SMALL_LETTER_LONG_S in symbol names: 'ſomething => SOMETHING
[06:51:19] <Catie> Neither CCL, ECL, nor CLISP do this, only SBCL
[06:51:20] <mfiano> You can turn off normalization if you prefer.
[06:52:08] <Catie> Oh interesting, okay
[06:52:44] <mfiano> Section 7.1.2 of the manual.
[06:53:28] <Catie> That is nuts, thank you for pointing me to it
[06:54:28] <Catie> On second thought, I'm gonna keep it. This way long-s source code will still be evaluated as thought it were normal people source code
[07:03:23] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[07:09:42] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:09:47] <drakonis> ah i finally recognized where i saw consfigurator's author first
[07:09:52] <drakonis> he maintains the anaphora package
[07:18:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:19:04] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:24:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:30:30] <beach> Good morning everyone!
[07:31:27] <drakonis> mornin'
[07:46:32] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[07:49:06] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[07:49:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[07:49:45] *** Joins: karlosz (~karlosz@136.56.98.53)
[07:58:55] *** Joins: semz (~none@user/semz)
[07:58:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[07:59:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:00:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:02:06] *** Joins: akoana (~ah@user/akoana)
[08:06:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:07:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:08:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:08:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:22:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:36:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[08:43:38] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:49:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:05:49] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[09:08:10] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[09:17:11] *** Joins: _paul0 (~paul0@2804:1b3:8402:8085:ed96:8fa4:4e45:1461)
[09:19:31] *** Quits: paul0 (~paul0@user/paul0) (Ping timeout: 245 seconds)
[09:29:11] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[09:41:12] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[09:44:53] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[09:50:30] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[09:56:45] <dre> Good morning BEACH!
[09:56:53] <dre> I'm about to go on holiday to the #beach
[09:57:16] <dre> my plans: swin, nap, lisp, repeat, probably
[09:58:22] <beach> Southern hemisphere, I take it?
[09:58:40] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[10:00:03] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[10:00:14] <dre> yeah
[10:00:24] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[10:00:36] <dre> we have a lot less land down here, so there's less to worry about
[10:00:41] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:99f1:6d34:38bc:e28a)
[10:13:14] *** Joins: hexology (~hexology@user/hexology)
[10:15:55] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[10:40:13] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:42:32] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:99f1:6d34:38bc:e28a) (Read error: Connection reset by peer)
[10:43:42] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[10:47:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:53:44] <stylewarning> i have situated a popcorn machine next to my surplus symbolics monitors
[10:54:22] <stylewarning> they'll probably smell like popcorn and burnt cons cells
[11:04:57] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[11:05:01] *** Joins: Alfr (~Alfr@user/alfr)
[11:09:04] *** Quits: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (Remote host closed the connection)
[11:10:57] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 240 seconds)
[11:13:07] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[11:13:15] *** Joins: pjb (~pjb@user/pjb)
[11:13:21] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[11:18:40] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-166.catv.broadband.hu)
[11:35:59] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[11:36:43] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[11:44:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:46:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:56:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:58:26] *** Joins: akoana (~ah@user/akoana)
[12:06:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:08:11] *** Joins: pve (~pve@176-93-22-211.bb.dnainternet.fi)
[12:16:35] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Read error: Connection reset by peer)
[12:17:22] *** Quits: dre (~dre@2001:8003:c932:c301:8304:d78a:deb9:dfd1) (Ping timeout: 260 seconds)
[12:20:44] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[12:27:58] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[12:35:46] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[12:38:25] *** Joins: Krystof (~user@81.174.155.115)
[12:39:20] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[12:56:34] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[12:58:14] *** Joins: nij- (~jin@2001:48f8:9021:806::d58e)
[12:59:37] <frodef> good morning! Any recommendations for a test framework?
[12:59:48] <Shinmera> https://shinmera.github.io/parachute
[12:59:53] <nij-> Heard of fiveam many times.
[13:00:57] <Shinmera> There's also this survey. https://sabracrolleton.github.io/testing-framework
[13:01:09] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:02:00] <Shinmera> Which I'm happy to say names Parachute as the overall "best".
[13:02:11] <Shinmera> That's in quotes because it depends on what you need.
[13:07:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:11:08] <frodef> That survey was quite an extensive answer :) Thanks!
[13:11:21] <nij-> Yeah. Thanks for sharing!
[13:12:02] <frodef> I've tried to look at fiveam, but I find the documentation overly terse.
[13:14:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:14:17] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[13:14:52] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ef:d61b:2051:1acf:5e7d:b012)
[13:15:59] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[13:16:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[13:16:50] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:18:37] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[13:23:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:25:36] <jackdaniel> Shinmera: autoquoting functions in IS is quite annoying, I can't say i.e (rcurry #'member …) because it recognizes only symbols and lambda expressions
[13:27:00] <Shinmera> you mean for the comparator?
[13:27:08] <jackdaniel> yes
[13:27:15] <Shinmera> Yeah I'm not too happy with the magic of that either
[13:28:27] <frodef> So about testing, is the "best practice" to put tests in separate source file(s) from the code, or intertwine it with the target code, or what?
[13:29:01] <Shinmera> separate files. you don't want to pull in a test framework as a dependency for your regular library.
[13:29:38] <jackdaniel> well, you can always put them behind a feature flag
[13:29:50] <Shinmera> that's not going to fly well with asdf.
[13:29:53] <jackdaniel> i.e #+fiveam (Deftest …) but yeah, they are usually in separate files
[13:30:39] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[13:30:45] <Shinmera> jackdaniel: Re your issue, could you file that as a ticket https://github.com/shinmera/parachute/issues ?
[13:30:50] <Shinmera> Thanks
[13:31:14] <jackdaniel> if I'll remember when truly in front of the compute then sure
[13:32:05] *** Parts: nij- (~jin@2001:48f8:9021:806::d58e) (#commonlisp)
[13:32:58] <frodef> Could I ask for a pointer to a project I can look at that uses parachute "like it should be done" more or less?
[13:33:44] <Shinmera> Here's one of mine I guess. https://github.com/Shinmera/3d-matrices/blob/master/test.lisp
[13:35:58] <frodef> Thanks!
[13:41:00] <Shinmera> Here's another that uses it in a much less conventional way to process a couple million tests. https://github.com/Shinmera/uax-9/blob/master/test.lisp
[13:56:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[13:57:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:58:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:58:26] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:02:04] <phoe> Shinmera: in https://github.com/Shinmera/uax-9/blob/master/test.lisp you :USE parachute in L8 and then redefine PARACHUTE:TEST in L16?
[14:02:23] <Shinmera> note the :shadow
[14:02:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:02:29] <phoe> welp
[14:02:32] * phoe notes
[14:09:19] *** Joins: mingus (~jan-magnu@auth-147-77.anyconnect.uib.no)
[14:09:23] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[14:12:14] *** Joins: utis (~utis@vpn-client281.uio.no)
[14:15:11] <utis> i had a feeling i'd seen a way to have a long argument name that shows up in slime hints and a short one in the function, but couldn't find it.  i suppose there's no such feature?
[14:15:36] *** Joins: amb007 (~a_bakic@109.245.225.179)
[14:15:39] <phoe> long argument name, what do you mean?
[14:15:52] <phoe> as in, you have a symbol with a really long name interned into some package and you want to locate it?
[14:16:07] <utis> like (defun foo (string) . . . but with `s' in the body
[14:16:38] <phoe> oh, like that
[14:16:46] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[14:16:56] <phoe> hm, I guess you could (defun foo (string) (symbol-macrolet ((s string)) ...))
[14:17:16] <Shinmera> why bother, just (let ((s string)) ...)
[14:17:43] <phoe> or that, sure
[14:18:18] <utis> yeah, just wanted to make sure there wasn't a neat builtin way of doing it
[14:19:37] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Ping timeout: 240 seconds)
[14:20:43] <Shinmera> another solution is to just write an emacs macro to type out the long name for you ;)
[14:21:48] <utis> it's more that i like having hints that are simlar to those in other functions, but i don't like the sight of long names repeated
[14:23:37] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-166.catv.broadband.hu) (Ping timeout: 240 seconds)
[14:24:09] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[14:24:59] <utis> how about defgeneric with long names and defmethod with short names?  is it a bad idea to use methods when functions suffice?
[14:25:13] <Shinmera> Yes
[14:25:37] <Shinmera> Anyway, I'm writing a roundup for all that happened in 2021 with Kandria. What's everyone else up to on the last day of the year?
[14:26:25] *** Quits: mingus (~jan-magnu@auth-147-77.anyconnect.uib.no) (Ping timeout: 250 seconds)
[14:26:30] <phoe> well I'm having fun with lisp after a long sabbatical from programming in it
[14:26:49] <phoe> doing some vector graphics in it with Xach's vecto in order to make a tile generator for one board game
[14:26:56] <Shinmera> cool
[14:27:14] <Shinmera> Anything to show?
[14:28:17] <phoe> https://cdn.discordapp.com/attachments/670707716322492436/926252950081400892/Zrzut_ekranu_z_2021-12-31_00-12-35.png
[14:28:20] <phoe> https://cdn.discordapp.com/attachments/670707716322492436/925899261655261285/Zrzut_ekranu_z_2021-12-30_00-22-34.png
[14:28:27] <Shinmera> sick
[14:28:28] <phoe> plus the recent vecto PR that adds radial gradients
[14:28:54] <Shinmera> Reminds me I still need to add support for gradients into Alloy's GL backend.
[14:29:13] <Shinmera> (which reminds me of a huge number of other things that still need to be done, SIGH)
[14:29:15] <phoe> and all of that is generated from 300 lines/10kB of my own Lisp code plus vecto
[14:29:16] <kakuhen> phoe: you reminded me i made fast progress on some toy mahjong utility, only to suddenly stop because I couldn't think of a good algorithm to count sequences for shanten calculations
[14:29:31] <phoe> kakuhen: gasp
[14:29:45] <kakuhen> it was also the first program i got to use reader macros in, since my notation for tiles uses lists internally
[14:29:50] <phoe> maybe we can join forces eventually, I also need to do shanten calculation in my mahjong stuff
[14:29:55] <kakuhen> but i allow the usual to input hands with the "usual" notation
[14:30:12] <kakuhen> and an ugly reader macro converts user input to a list in a format my program accepts for processing tiles
[14:31:51] <kakuhen> allow the user to input* oops
[14:32:04] <phoe> I think I have a reader macro too
[14:32:33] <phoe> oh yes, https://github.com/phoe/riichi-evaluator/blob/master/src/tiles.lisp#L260-L263
[14:32:39] <kakuhen> yeah so mine will do something like [123m4p] ;=> ((1 man) (2 man) (3 man) (4 pin))
[14:33:01] <kakuhen> then I defined a tile type that basically pattern matches against the lists in a list
[14:33:31] <phoe> oh, I just parse strings for hands
[14:33:32] <phoe> https://github.com/phoe/riichi-evaluator/blob/master/test/hand.lisp#L620-L685
[14:33:33] <kakuhen> it may not be a good representation but i stuck with it over, say, a CLOS object, for simplicity
[14:33:42] <phoe> doing a reader macro is trivial at that point
[14:34:50] <kakuhen> yeah; also, the list representation is nice because then counting frequencies of tiles in a hand is really elegant, at least to me
[14:35:18] <phoe> sure
[14:35:23] <kakuhen> i populate a hashtable with tiles not associated yet, then maphash to get what i want
[14:35:49] <kakuhen> its hard to explain in english; id have to share the code
[14:35:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:36:12] <kakuhen> but its really simple and generalizes to counting n repetitions of tiles in a hand
[14:36:50] <kakuhen> then i had to count sequences and got lazy because I dont know how I should interpret, say, 4556
[14:37:17] <kakuhen> Should the algorithm consider it one sequence and an isolated tile? or two partially complete sequences? Which one you choose will alter the end result
[14:37:29] <kakuhen> anyway this is barely CL related so I'll end here
[14:48:38] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[14:48:59] *** Joins: amb007 (~a_bakic@109.245.225.179)
[14:51:53] *** Joins: treflip (~user@user/treflip)
[15:05:47] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[15:06:32] *** Joins: amb007 (~a_bakic@109.245.225.179)
[15:10:59] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[15:11:33] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[15:22:47] *** Alfr is now known as Guest1333
[15:22:47] *** Quits: Guest1333 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[15:22:52] *** Joins: Alfr (~Alfr@user/alfr)
[15:23:37] <sm2n> I'm not sure who to tell this to, but cliki appears to be down
[15:27:57] <rotateq> yes could happen some time due to how it's hosted
[15:28:15] <rotateq> but i don't have a clue where and how it is
[15:32:10] * phoe takes it to #common-lisp.net
[15:33:36] <rotateq> oh there's such channel .. *curious*
[15:35:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:41:54] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[15:52:04] *** Joins: mingus (~jan-magnu@auth-147-77.anyconnect.uib.no)
[15:52:53] *** Quits: mingus (~jan-magnu@auth-147-77.anyconnect.uib.no) (Client Quit)
[15:56:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:06:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[16:07:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:11:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:23:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:29:29] *** Joins: miique (~miique@181.46.139.166)
[16:47:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:47:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:00:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:02:09] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:07:03] *** Joins: random-nick (~random-ni@87.116.180.98)
[17:09:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:11:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[17:12:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:13:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:15:34] <etimmons> On this last day of the year, I'm learning more than I ever wanted to know about win32 APIs
[17:16:03] <etimmons> (working on cl-tar extraction/creation on Windows and want to handle symlinks)
[17:22:08] <tyson2> my former boss, one of the designers of Logo, Scratch, etc., really misses the win 32 api.  Now he implements stuff in javascript :(
[17:24:26] <rotateq> "And if you want to trick your boss that you can do stuff in LISP, tell him it's similar to XML." :D
[17:24:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:24:45] <ns12> Hello, when using MAPHASH, it is possible to abort the iteration without going through the rest of the keys of the hash table? For example, if I have found the key-value combination that I am looking for, I no longer want to look at the rest of the entries in the hash table.
[17:25:23] <_death> (block foo ... (return-from foo) ...)
[17:25:24] <frodef> ns12: Yes, with RETURN, or GO, or whatever.
[17:25:59] <rotateq> or you do it via LOOP
[17:29:36] <ns12> Okay, I could probably do (block foo (maphash (lambda (k v) ... (return-from foo)) the-hash-table))
[17:30:07] <Shinmera> etimmons: At least it's documented.
[17:30:12] <_death> you can also check out with-hash-table-iterator
[17:31:14] <ns12> Is it possible to iterate through a hash table using a DO loop?
[17:31:58] <_death> w-h-t-i gives you a function to call, so you can call it in the DO form
[17:34:19] <_death> the issue there is that it uses multiple values, which makes you jump through hoops if you don't call it in the DO body.. so there are more straightforward solutions
[17:35:06] <Shinmera> Why *do* you want to do it with DO or maphash anyway
[17:35:19] <Shinmera> LOOP is almost always more concise and clear for this purpose.
[17:36:38] <ns12> Shinmera: Currently learning about the different methods of iterating over hash tables.
[17:36:58] <ns12> I found some examples in the cookbook: https://lispcookbook.github.io/cl-cookbook/data-structures.html#traversing-a-hash-table
[17:37:20] <ns12> _death: Thanks for the tips.
[17:43:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:49:13] <ns12> phoe: What is #common-lisp.net?
[17:49:36] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ef:d61b:2051:1acf:5e7d:b012) (Read error: Network is unreachable)
[17:49:52] <rotateq> ns12: another channel
[17:50:10] <ns12> But what's the topic there?
[17:50:11] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d)
[17:50:37] <rotateq> or maybe a rewritten #c dispatch macro character ..? who knows :)
[17:50:59] <ns12> It's Common Lisp, but how is it different from this channel?
[17:51:17] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 240 seconds)
[17:51:21] <rotateq> it's due to the website i might think
[17:52:28] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:52:40] <phoe> ns12: it's not about common lisp itself, it's about the Common Lisp Foundation, https://common-lisp.net and related services
[17:53:34] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[17:56:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:57:50] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:59:15] <etimmons> Shinmera: true! I'm actually mostly happy with the experience so far. I'm just a bit salty that the only real way to get the target of a symlink is an ioctl followed by some parsing of a data structure that contains a maybe not null terminated wide string.
[17:59:49] <etimmons> At least doing this in CL means I can iterate fast when trying to figure out how it all works :)
[18:02:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:03:41] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d) (Ping timeout: 245 seconds)
[18:07:35] <Shinmera> Yeah, at least until your image gets corrupted
[18:16:58] <_73> I am having trouble figuring out the syntax for passing a condition argument to the SIGNALS macro from the fiveam system. I can't find an example of its usage. I am specifically confused about the error message `unknown type specifier: QUOTE`? http://dpaste.com/GHYNZGJLJ
[18:17:02] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d)
[18:18:14] <beach> _73: Since it is a macro, maybe the type specifier is not evaluated.
[18:18:42] <beach> _73: If so, remove the quote in front of FOO-ERROR after SIGNALS.
[18:20:50] <beach> The SIGNALS macro has a bad docstring.
[18:21:17] <_73> one moment I am still getting an error
[18:21:18] <beach> But I am guessing that it is saying exactly that, i.e., that the CONDITION-SPEC argument is not evaluated.
[18:22:22] <beach> _73: [unrelated] Also, I suspect that the THROWS in the name is inappropriate
[18:23:11] <_73> When I unquote FOO-ERROR I now get `unknown type specifier: FOO-ERROR` http://dpaste.com/ACQGPZCVX
[18:23:52] <beach> That's probably because you haven't defined any condition type with that name.
[18:24:21] <_73> oh so ERROR does not automatically define a condition type for me?
[18:25:15] <beach> That's correct.  It doesn't.  How could it?  How would it know what slots to put in it?  How would it know how to report it?
[18:26:10] <_73> now I understand thanks. Why do you say THROWS in the name is inappropriate?
[18:26:26] <beach> Because I don't see anything being thrown.
[18:26:38] <beach> clhs throw
[18:26:38] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_throw.htm
[18:27:36] <_73> ok I just don't understand condition systems well enough yet
[18:28:07] <beach> _73: THROW is not part of the condition system.  Errors are not "thrown" in Common Lisp.  They are "signaled".
[18:28:17] <phoe> in general, conditions are signaled, not thrown - that's the CL nomenclature, "throw" is a control flow concept whereas "signal" is a condition concept
[18:28:20] <beach> In general, conditions are "signaled".
[18:29:01] <rotateq> beach: Do you sometimes use the special operators CATCH and THROW directly or more in macros? (like with maybe TAGBODY)
[18:29:47] <beach> I don't think I have used it in a macro, but I use it for that kind of non-local transfer of control.
[18:29:52] <beach> ... when I need that.
[18:30:02] <phoe> I'm not beach but I used catch/throw recently while implementing amb, https://github.com/phoe/amb/blob/main/src/amb.lisp
[18:30:19] <rotateq> phoe: You're always welcome too of course!
[18:30:20] <phoe> they're a natural fit for backtracking
[18:30:22] <phoe> :D
[18:31:14] <rotateq> Maybe when I finally read and understood more of your book I finally can do something more with the condition system.
[18:34:47] <phoe> to be honest, nowadays I think TCLCS is less about the condition system and more about using control flow techniques and macro writing
[18:34:57] <phoe> at least the first two big parts are
[18:35:04] <frodef> Is there any other language (than CL) that doesn't conflate SIGNAL and THROW?
[18:35:45] <beach> Maybe Multics PL/I since it was the inspiration for the Common Lisp condition system.
[18:35:52] <rotateq> frodef: Erlang is also very interactive as a system runs, but I don't know what terms they use.
[18:38:38] <frodef> Shinmera: parachute looks good! When I have a bit of combinatorial explosion in generated tests, is there a way to group them so as to avoid hundreds of checkmarks in the default report?
[18:38:52] *** Quits: _paul0 (~paul0@2804:1b3:8402:8085:ed96:8fa4:4e45:1461) (Remote host closed the connection)
[18:39:20] <Shinmera> There's no facility in the plain report to hide groups, but there is a grouping macro to make more fine-grained groups than on the test definition level.
[18:39:27] <Shinmera> err, hide group contents.
[18:42:44] <frodef> Shinmera: what macro is that? Searching for "group" fails me..
[18:43:25] <Shinmera> frodef: (apropos "group" "PARACHUTE") ; => group fbound
[18:44:47] <frodef> righ, I was searching https://shinmera.github.io/parachute/   :)
[18:45:00] <Shinmera> Ah, yeah. Docs are not autogenerated, so might be out of date.
[18:45:58] <frodef> hm.. isn't the point of autogenerated docs that they *don't*  go out of date? :)
[18:46:24] <Shinmera> you might be missing a *not* here.
[18:46:41] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:47:01] <frodef> hm.. how so?
[18:47:18] <phoe> the parachute docs are *NOT* autogenerated
[18:47:40] <frodef> ah, sorry, I misunderstood! :)
[18:47:52] <frodef> s/misunderstood/failed at reading
[18:49:17] <MichaelRaskin> phoe: hmm now I read your tests and fail to understand if (amb:amb ((x (list 1 2))) (amb:constrain (> x 1)) x) should work
[18:50:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[18:53:17] <phoe> MichaelRaskin: it should work, if I understand it correctly
[18:53:23] <frodef> rotateq: From a glance, Erlang seems to conflate SIGNAL and THROW completely.
[18:53:27] <phoe> X is allowed to take values from (1 2)
[18:53:34] <phoe> then there is a constraint that X must be greater than 1
[18:53:48] <phoe> 1 does not match that constraint, but 2 does, so then X is returned
[18:56:08] <sm2n> frodef: what it essentially comes down to is having both nonlocal exits and having access to both dynamic and lexical scope, I think
[18:56:49] <sm2n> and no other language is coming to mind, but I'm sure there's some niche scheme that implements both (throw/signal)
[18:57:13] <MichaelRaskin> Oh how interesting, if I load amb.lisp directly (lazy me) it half-works, but via ASDF it works properly, and I don't see why is the difference
[18:57:45] *** Joins: jstoddard (~user@2600:8801:a400:5a00::6fd9)
[18:58:58] <frodef> sm2n: I also rather suspect that THROW/SIGNAL is the prize (among several) you get when you haven't made a lot of horrible assumptions early on in your language/runtime design :-)
[19:00:38] <sm2n> sure
[19:02:25] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b)
[19:04:15] *** Quits: raeda (~raeda@74.215.109.33) (Remote host closed the connection)
[19:04:36] *** Joins: raeda (~raeda@74.215.109.33)
[19:05:38] <phoe> half-works? what do you mean?
[19:10:43] <MichaelRaskin> Without constraints it works, but with constraints it does not
[19:11:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:11:40] <MichaelRaskin> I am just impressed that it is not obvious what is the source of the problem when loading things wrong
[19:12:04] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:16:20] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[19:16:32] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:16:57] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[19:25:21] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Ping timeout: 245 seconds)
[19:26:06] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[19:26:43] <sm2n> Shinmera: is there a reason that parachute uses a fullwidth question mark in the default report?
[19:27:06] <sm2n> it's bothered me for a while because it usually means it goes to a fallback font and that screws up the spacing
[19:28:54] <Shinmera> because the other ones also use a unicode symbol that is typically full-width, so that it's aligned.
[19:28:56] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:29:24] <Shinmera> there's no pleasing everyone though, depending on the font it's gonna be wrong one way or the other.
[19:30:25] <Nilby> I appreciate the lovely big check marks.
[19:33:14] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Ping timeout: 260 seconds)
[19:33:51] *** Joins: amb007 (~a_bakic@109.245.225.179)
[19:33:55] <sm2n> fair enough I guess
[19:36:45] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[19:38:18] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[19:39:48] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:42:17] *** Joins: mrmr5 (~mrmr@user/mrmr)
[19:42:34] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[19:44:17] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[19:44:17] *** mrmr5 is now known as mrmr
[19:53:25] <Josh_2> Is cliki dead?
[19:53:32] <hobo> shouldn't be
[19:56:43] <phoe> MichaelRaskin: weird!
[19:57:04] <Josh_2> hmm
[19:57:33] <Josh_2> Got a 503
[19:57:44] <phoe> Josh_2: yes, there is an issue
[19:57:58] <Josh_2> rip, I should have saved the bknr manual
[19:58:17] <Josh_2> ha, nice I have it open in another tab
[19:59:53] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[20:01:08] *** Joins: amb007 (~a_bakic@178-221-44-133.dynamic.isp.telekom.rs)
[20:04:02] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[20:05:25] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b) (Ping timeout: 240 seconds)
[20:15:07] <hobo> Shinmera: i thought the only "correct" font was Comic Sans M?
[20:15:10] <hobo> MS*
[20:15:27] <hobo> ;)
[20:15:41] <Josh_2> oof
[20:16:27] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[20:28:07] <Shinmera> Alright, the year-roundup is done: https://reader.tymoon.eu/article/404
[20:30:37] <phoe> looks like cliki is back up, Josh_2
[20:30:42] <phoe> (for now)
[20:32:45] <phoe> MichaelRaskin: I cannot reproduce this issue on my machine
[20:33:49] *** Joins: paul0 (~paul0@user/paul0)
[20:35:27] <MichaelRaskin> 2.1.11?
[20:35:39] <MichaelRaskin> (SBCL version)
[20:35:49] <phoe> yes
[20:36:07] <MichaelRaskin> Interesting…
[20:36:32] <MichaelRaskin> (I load alexandria via ASDF and only load amb.lisp directly but not documentation)
[20:36:39] <phoe> I did the same
[20:36:42] <phoe> no problems running that repl example
[20:38:03] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[20:43:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:44:41] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:01:47] <sm2n> Shinmera: not the kind of 404 page I expected :)
[21:02:14] <Shinmera> Yeah, well, we also passed other kinds of unfortunate numbers in my blog posts already.
[21:02:44] <sm2n> btw, the plain text email rendering of the post is broken
[21:02:55] <sm2n> there's no spacing
[21:03:14] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[21:03:44] *** Joins: paul0 (~paul0@user/paul0)
[21:05:41] *** Joins: danieli (~danieli@user/danieli)
[21:06:59] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[21:07:35] *** Joins: aeth (~aeth@user/aeth)
[21:07:57] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[21:11:56] *** Joins: karlosz (~karlosz@136.56.98.53)
[21:16:50] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[21:16:56] *** Joins: kotshie (~kotshie@68.72.208.140)
[21:29:16] <Shinmera> Ah, damn. Good to know, thanks. I guess https://github.com/Shirakumo/courier/blob/master/send.lisp#L19 needs some more work :)
[21:30:50] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058) (Ping timeout: 260 seconds)
[21:32:40] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608)
[21:39:22] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Read error: Connection reset by peer)
[21:41:11] <MichaelRaskin> phoe: thanks for checking…
[21:41:22] *** Joins: tfeb (~tfb@88.98.95.237)
[21:41:35] *** Quits: amb007 (~a_bakic@178-221-44-133.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[21:42:53] *** Joins: amb007 (~a_bakic@109.245.225.179)
[21:47:24] <Fade> I see christophe has tagged sbcl 2.2.0
[21:47:42] <Fade> thanks fellas. nice cap to the year. :)
[21:54:52] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:04:55] *** Joins: karlosz (~karlosz@136.56.98.53)
[22:05:32] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[22:05:58] <phoe> :D
[22:10:12] <phoe> and a new quicklisp dist!
[22:11:32] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d) (Ping timeout: 240 seconds)
[22:12:32] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[22:12:43] *** Joins: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs)
[22:13:40] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d)
[22:18:32] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:c82d:f17a:341d:8c6d) (Ping timeout: 268 seconds)
[22:25:42] <yottabyte> What's the difference between split-sequence and split?
[22:25:54] <phoe> where's split from?
[22:26:43] <yottabyte> I guess they're from different libraries and split takes regex?
[22:27:03] <yottabyte> https://edicl.github.io/cl-ppcre/#split
[22:27:14] <phoe> oh, yes
[22:27:31] <phoe> so split-sequence only splits with delimiters of length 1, so, single sequence elements
[22:27:38] <phoe> whereas the regex split utilizes regex
[22:28:40] <yottabyte> Gotcha
[22:31:28] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Ping timeout: 268 seconds)
[22:32:33] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[22:37:43] *** Joins: pk (~pk@c-68-32-217-32.hsd1.mi.comcast.net)
[22:55:10] *** Joins: Oladon (~olad@98.43.81.226)
[22:56:39] <aeth> imo, always use the simplest function for the task
[22:56:43] <phoe> ^
[22:57:04] <aeth> combination of probably faster + more people can understand it
[23:00:11] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[23:21:27] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[23:29:10] *** Joins: VincentVega (~user@212.97.4.16)
[23:30:43] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Remote host closed the connection)
[23:31:31] *** Quits: amb007 (~a_bakic@cable-94-189-190-155.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[23:32:38] *** Joins: amb007 (~a_bakic@109.245.225.179)
[23:33:36] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[23:36:46] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[23:40:35] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:42:22] *** Joins: akoana (~ah@user/akoana)
[23:44:04] *** Joins: myrrh (~markus@172.58.196.70)
[23:49:48] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[23:50:10] *** Joins: amb007 (~a_bakic@109.245.225.179)
[23:52:16] *** Parts: VincentVega (~user@212.97.4.16) (ERC (IRC client for Emacs 27.2))
[23:52:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[23:54:16] <alcaeus> Question: how do you loop some code over one second? Something that looks like this but that works. https://pastebin.com/9n1ymdkD
