[00:05:02] *** Joins: bartholin (~bartholin@109.53.5.131)
[00:12:53] *** Quits: bartholin (~bartholin@109.53.5.131) (Ping timeout: 256 seconds)
[00:23:27] <d_bot> <Pim> Better support ? I haven't setup anything on my emacs, but in general, languages servers are really effective supports. Don't know the case for merlin though
[00:25:55] *** Quits: gravicappa (~gravicapp@178.214.246.212) (Ping timeout: 256 seconds)
[00:26:11] *** Joins: bartholin (~bartholin@109.53.7.130)
[01:01:51] *** Joins: romildo (~Romildo@ip-191-5-85-170.isp.valenet.com.br)
[01:02:14] *** Quits: romildo (~Romildo@ip-191-5-85-170.isp.valenet.com.br) (Client Quit)
[01:09:39] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[01:10:10] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[01:22:26] <d_bot> <concatime> When using `dune`, can I tell it to NOT compile the `.so` library?
[01:27:27] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:27:44] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:28:57] *** Quits: jlrnick (~josephler@2a01cb040a159400593e7a6802b925cf.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:41:01] *** Quits: bartholin (~bartholin@109.53.7.130) (Quit: Leaving)
[01:41:47] <williewillus> orbitz: not really a good reason IMO. In some ways, language specific plugins can be better as they aren't bound by the least common denominator that's the lsp protocol. Though in this case the lsp just uses merlin under the hood anyways, so it doesn't really matter.
[01:41:52] <williewillus> I prefer to use merlin directly
[01:41:58] <williewillus> less layers in the way
[01:47:12] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933)
[01:48:39] <companion_cube> otoh editors will probably have better LSP support than merlin support
[01:50:29] *** Joins: zebrag (~chris@user/zebrag)
[02:00:10] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:01:07] <d_bot> <orbitz> My only complaint is Merlin is slow which actually will stall emacs as i type sometimes. Not sure if the LSP is asynchronous and would help with that. But other than that Merlin has been good to me
[02:01:18] <d_bot> <froyo> interesting, for the longest time i thought merlin was the flagship and ocamllsp was just a protocol layer over it
[02:03:16] <d_bot> <froyo> i can see the lsp server being the future tho because it's more integrated w/ the existing tooling, and i think we also have a tree sitter module :>
[02:04:40] <d_bot> <orbitz> I'd imagine LSP is future too
[02:04:45] <companion_cube> I don't know if merlin is really the flagship now
[02:04:59] <companion_cube> it was for a while, but now the active project is called "ocamllsp"
[02:05:05] <d_bot> <orbitz> I'll have to poke around for tutorial on emacs setup
[02:05:08] <companion_cube> and of course, the VSCode custom extensions :/
[02:23:13] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:57:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:01:11] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933)
[03:09:22] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:10:01] *** Quits: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d) (Ping timeout: 250 seconds)
[03:10:48] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[03:27:12] *** Joins: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d)
[03:28:23] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:38:12] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[04:10:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:14:02] *** Joins: Soni (~quassel@autistic.space)
[04:16:03] <d_bot> <hcarty> Since the OCaml language server is using merlin code internally the real differences come down to editor integration
[04:18:23] <d_bot> <hcarty> And it's kind of nice that more editors can benefit from the language server than those with explicit community support. Even if the support isn't 100% what you get with a custom emacs config
[04:23:14] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[04:34:46] <companion_cube> that's exactly the point: people don't all use emacs :p
[04:40:56] <rgrinberg> companion_cube you're still managing to use lsp with neovim?
[04:44:12] <companion_cube> yeah of course
[04:44:15] <companion_cube> it works super well
[04:46:56] <companion_cube> hmmm. although very recently it has sometimes crashes on me I guess. now that I think of it?
[04:47:12] <rgrinberg> version 1.10.1?
[04:48:28] <companion_cube> 1.10.0
[04:48:43] <companion_cube> are you thinking of a specific bug?
[04:48:58] <rgrinberg> Yes, but it's only related to ppx which you don't use :/
[04:49:43] <rgrinberg> 1.10.0 is the first version that uses a proper scheduler under the hood, so it might have other bugs
[04:50:04] <rgrinberg> it's best if you paste the stderr if you notice it crashing
[04:50:20] <companion_cube> I use ppx a bit at work :)
[04:56:09] <rgrinberg> companion_cube how is cargo's watch mode?
[04:56:51] <companion_cube> there's only a 3rd party plugin I think
[04:57:13] <companion_cube> otoh rust-analyzer does the whole build itself
[04:57:32] <rgrinberg> using cargo tho?
[04:59:20] <companion_cube> I'm not sure
[04:59:31] <companion_cube> it might use cargo's library to build dependencies
[04:59:51] <companion_cube> but otherwise, building rust is a lot more predictable :)
[05:00:48] <d_bot> <hcarty> companion_cube Exactly! I don't use emacs and appreciate how easy lsp is to setup and use
[05:01:12] <rgrinberg> curious to see how they'll make it "just work" with the editor and watch mode
[05:02:56] <companion_cube> I suspect rust-analyzer does its own watching
[05:30:50] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[05:40:42] <rgrinberg> we could eventually move to something like that in lsp as well
[05:40:49] <rgrinberg> have the server run dune in the background for you
[05:41:24] <rgrinberg> the problem with this approach is that sometimes users run their build and their editor in slightly different environments
[05:41:57] <rgrinberg> and if those little differences matter, it can create some hard to debug bugs
[05:44:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:58:17] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[06:04:09] *** Joins: gentauro (~gentauro@user/gentauro)
[06:08:05] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[06:08:43] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:24:48] *** Joins: mbuf (~Shakthi@223.178.90.64)
[06:29:59] <companion_cube> indeed
[06:30:12] <companion_cube> like, I run some of my builds -w with `--profile=release` :p
[06:40:51] *** Joins: zebrag (~chris@user/zebrag)
[07:03:51] *** Joins: bobo (~bobo@37.164.104.23)
[07:04:02] *** Quits: spip (~bobo@37.171.176.64) (Ping timeout: 272 seconds)
[07:39:04] <d_bot> <Dennis> I’ve been sitting on this idea of reimplementing liveview in ocaml. Beside having a dev to spearhead the design, liveview works well on Erlang/elixir because the Erlang VM can balance processes so well. See the bit where Chris found elixir. https://fly.io/blog/how-we-got-to-liveview/.
[07:39:04] <d_bot> <Dennis>
[07:39:05] <d_bot> <Dennis> We can try to take the same websocket route, or do the html over the wire route like with basecamp’s hotwire or laravel’s livewire.
[07:39:07] <d_bot> <Dennis>
[07:39:08] <d_bot> <Dennis> If ocaml 5’s fibers are anything like goroutines or Erlang processes, then it might be possible to have to have the whole websocket idea.
[08:09:28] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[08:32:29] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:56:23] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:16:37] *** Quits: greenbagels (~gb@user/greenbagels) (Remote host closed the connection)
[09:16:58] *** Joins: greenbagels (~gb@user/greenbagels)
[09:21:46] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: Fardale (~Fardale@fuyukaidesu.fardale.eu) (*.net *.split)
[09:21:46] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:21:46] *** Quits: hyphen (~hyphen@41.47.119.183) (*.net *.split)
[09:21:46] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:21:46] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[09:21:46] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[09:21:46] *** Quits: afrosenpai (~afrosenpa@li642-224.members.linode.com) (*.net *.split)
[09:22:04] *** Joins: Fardale (~Fardale@fuyukaidesu.fardale.eu)
[09:22:11] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[09:22:14] *** Joins: cbarrett (sid192934@2a03:5180:f:1::2:f1a6)
[09:22:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:22:24] *** Joins: hyphen (~hyphen@41.47.119.183)
[09:22:24] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:22:24] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[09:22:24] *** Joins: afrosenpai (~afrosenpa@li642-224.members.linode.com)
[09:22:24] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[09:23:10] *** Joins: JSharp (sid4580@2a03:5180:f:2::11e4)
[09:25:03] *** Quits: ccx (~ccx@82.142.125.46) (*.net *.split)
[09:26:19] *** Joins: ccx (~ccx@82.142.125.46)
[09:28:58] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (*.net *.split)
[09:28:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[09:28:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[09:30:18] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:30:18] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[09:34:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:34:16] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[09:39:12] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Ping timeout: 272 seconds)
[09:43:28] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:47:39] *** Joins: gravicappa (~gravicapp@178.214.246.212)
[10:45:24] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[11:21:13] <d_bot> <orbitz> Is there documentation on how to set up LSP in emacs?
[12:10:25] *** Joins: Dimonax (~Dimonax@2600:6c4a:727f:ee89:215:17ff:feea:8304)
[12:11:01] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[12:12:40] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:13:40] <random-jellyfish> how do I include the Plot module from Owl?
[12:13:52] <random-jellyfish> open Owl.Plot;; didn't work
[12:13:57] <random-jellyfish> open Plot didn't work
[12:19:55] <d_bot> <bnguyenv> You need owl-plplot.
[12:20:14] <d_bot> <bnguyenv> Then `Owl_plplot.Plot`. I think.
[12:20:48] <random-jellyfish> $ opam install own-plplot
[12:20:49] <random-jellyfish> [ERROR] No package named own-plplot found.
[12:22:17] <random-jellyfish> there's no place in the owl documentation where they specify how to link this package
[12:22:31] <d_bot> <NULL> With an l maybe ?
[12:22:33] <random-jellyfish> just code snippets that assume it's already included
[12:22:47] <random-jellyfish> ok I'll try
[12:23:10] <random-jellyfish> you mean an I instead of a lower case L?
[12:23:45] <d_bot> <NULL> I mean you tried to install `own-plplot` instead of `owl-plplot`
[12:24:27] <random-jellyfish> oh yes, my bad
[12:24:34] <random-jellyfish> ok it got installed
[12:25:56] <random-jellyfish> open Owl_plplot.Plot;; works
[12:26:21] <random-jellyfish> but for Plot.create - Error: Unbound module Plot
[12:27:14] <random-jellyfish> I see I have to use the prefix Owl_plplot. everywhere
[12:27:58] <random-jellyfish> can I do something like a qualified import in haskell?
[12:28:01] <d_bot> <actionshrimp> if you install the `lsp-mode` package it knows about ocaml-lsp already (and associates it with tuareg mode). if you're interested in perf you'll probably want to turn off a lot of the UI features via various config vars -  I've got a fairly streamlined config now and it does feel a bit snappier than merlin used to
[12:30:25] <d_bot> <bnguyenv> You can do `open Owl_plplot` for this kind of thing, or `module Plot = Owl_plplot.Plot`.
[12:31:07] <d_bot> <orbitz> I got it going (turned out my dash version was too old for latest lsp-mode).  Although what I'm running into now is it cannot find any of my symbols
[12:31:58] <d_bot> <glennsl> `eglot` also knows about `ocaml-lsp`, and is generally snappier with zero configuration needed. I haven't actually tried it with `ocaml-lsp` myself though, but it does make `rust-analyzer` usable. Barely.
[12:32:36] <d_bot> <actionshrimp> ah good to know, thanks
[12:32:41] <d_bot> <glennsl> it was also very easy to set `eglot` up for `rescript`s lsp, just a single line of config.
[12:33:02] <random-jellyfish> yes Module Plot = ... works
[12:48:12] *** Quits: Dimonax (~Dimonax@2600:6c4a:727f:ee89:215:17ff:feea:8304) (Quit: Leaving)
[12:54:41] *** Joins: jlrnick (~josephler@gw.lipn.univ-paris13.fr)
[13:00:43] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[13:14:46] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[13:15:55] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[13:23:26] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[13:25:51] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[13:37:52] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:42:18] <d_bot> <antron> summarized my concerns about eio (the proposed multicore effects i/o library) being too influenced by the needs of mirage, in (afaict) agreement with others from the thread, namely leo, dbuenzli, @companion_cube: https://discuss.ocaml.org/t/eio-0-1-effects-based-direct-style-io-for-ocaml-5/9298/29?u=antron
[13:43:23] <d_bot> <antron> i hope interested people take a look
[13:43:46] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[13:44:13] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[13:53:08] *** Joins: olle (~olle@i5E866D85.versanet.de)
[13:55:14] <SquidDev> Capabilities aside, I will say the fibre and structured concurrency model of eio is really nice to work with.
[13:56:28] <d_bot> <antron> yes, and most people i think agree. but the capabilities thing really sticks out and is imo completely unnecessary yet quite burdensome, so that's what we objected to (though i think dbuenzli additionally objected to fibers etc as well, but his objection as i understood it covers capabilities)
[14:01:18] *** Joins: einar (~einar@einar.io)
[14:03:24] <einar> Instead of `dune utop .` followed by `#use "myproject.ml` how can I do both in a single shell command?  I would like my bindings to be available for experimentation inside utop.
[14:04:47] <SquidDev> Yeah, the ergonomics of capabilities definitely leave something to be desired. It's a shame, as conceptually I do like the idea (though realise I'm in the minority here!)
[14:07:22] <d_bot> <antron> i also like the idea conceptually, being from a PL background especially. however i have chosen the path of engineering deliberately in my life 😛 and capabilities in ocaml, with how leaky the ocaml context is, have no real use except as a fun exercise. unless you are coding in an environment like mirage, where you need them anyway. and for mirage, capability objects are an upgrade over the current extremely heavyweight things t
[14:07:51] <d_bot> <antron> whereas for general-purpose ocaml programming, capability objects are a downgrade
[14:09:20] <d_bot> <antron> and ocaml is a pragmatic language and e.g. in dream i want the api to "show" how fluent such a language can be, if the api is not loaded with excessive concepts
[14:10:01] <d_bot> <antron> concepts that may be interesting but that nonetheless don't offer any actual pragmatic benefit in the reality of ocaml
[14:12:08] <d_bot> <antron> as i said in one of the posts, i think it would be extremely disappointing if ocaml went the other way in its I/O library, and *introduced* such interesting but not practical concepts, in a part of the ecosystem where they weren't even there to begin with
[14:14:00] <d_bot> <KW78> dune requires `myproject.ml` being part of a library to in `dune utop` One workflow would be
[14:14:00] <d_bot> <KW78> - minimal main.ml declared with a dune file as as executable and calling `start ()`
[14:14:02] <d_bot> <KW78> - a start.ml with the start entry point `let start () =...` plus ...others.ml in one or more librairies (each with associated dune file)
[14:15:29] *** Joins: bartholin (~bartholin@158.110.71.2)
[14:17:11] <d_bot> <mefyl> digging this up from last friday @Et7f3  : what do you mean by "try to switch" please, switch what ? I have the latest dune and merlin, I supposed they where able to interact however they want to get such path informations
[14:31:52] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:34:33] <gahr> I'm learing dune and trying to switch --profile between a debug build and a release build
[14:34:38] <gahr> unsuccessfully, until now
[14:34:42] <gahr> https://dune.readthedocs.io/en/stable/quick-start.html?highlight=release#setting-the-ocaml-compilation-flags-globally
[14:35:02] <gahr> here it says (flags (:standard -O3))), which I think should be (flags (:standard -ccopt -O3))) ?
[14:35:30] <d_bot> <Butanium (@me on answer)> flag O3 doesn't work for me too
[14:35:42] <gahr> also, --profile=dev and --profile=release produce identical .exe files :/
[14:36:32] <d_bot> <Butanium (@me on answer)> `/root/.opam/myswitch/bin/ocamlc.opt: unknown option '-O3'.`
[14:36:44] <d_bot> <Kakadu> you could add --verbose and compare exact compilation switches
[14:37:29] <d_bot> <NULL> O3 is only accepted by ocamlopt IIRC
[14:37:39] <gahr> I do see profile = Dyn and profile = release in _build/log
[14:37:47] <d_bot> <Butanium (@me on answer)> https://cdn.discordapp.com/attachments/436568060288172044/942738893562867722/error_dune
[14:38:05] <d_bot> <Butanium (@me on answer)> https://cdn.discordapp.com/attachments/436568060288172044/942738968540233788/error_dune.txt
[14:39:09] <d_bot> <Butanium (@me on answer)> Am I doing something wrong ?
[14:39:36] <d_bot> <NULL> ocamlc.opt <> ocamlopt
[14:39:57] <d_bot> <Butanium (@me on answer)> ah
[14:40:30] <d_bot> <NULL> I'm yet to learn what .opt stands for: both ocamlopt and ocamlopt.opt exist
[14:41:07] <d_bot> <Butanium (@me on answer)> but what do I miss if it's the doc it says that you can use -O3 flag ?
[14:41:17] <d_bot> <Butanium (@me on answer)> is it a problem of my switch ?
[14:41:36] <d_bot> <NULL> Where ?
[14:41:51] <d_bot> <Butanium (@me on answer)> https://dune.readthedocs.io/en/stable/quick-start.html?highlight=release#setting-the-ocaml-compilation-flags-globally
[14:42:25] <d_bot> <NULL> The release profile uses ocamlopt, which the build one doesn't
[14:44:55] <d_bot> <Butanium (@me on answer)> hmm
[14:46:09] <d_bot> <Butanium (@me on answer)> so how do you use the -O3 flag ?
[14:46:14] <d_bot> <Butanium (@me on answer)> if you can't build with it
[14:46:33] <d_bot> <NULL> `--profile=release`
[14:47:05] <d_bot> <Butanium (@me on answer)> `dune exec ./tests/Single_test.exe --profile=release`
[14:47:14] <d_bot> <Butanium (@me on answer)> is the command which causes the error above
[14:47:37] <d_bot> <Butanium (@me on answer)> oh
[14:48:14] <gahr> so depending on the profile a different compiler is used?
[14:48:26] <d_bot> <Butanium (@me on answer)> `dune build --profile=release` give me the same error
[14:50:20] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[14:50:44] <gahr> also interestingly, if I don't specify profiles in my dune file and I just dune build --profile=dev vs. dune build --profile=release, the exes from the release build are 10x slower than the dev ones
[14:56:58] <d_bot> <NULL> I don't know then
[14:57:21] <d_bot> <Butanium (@me on answer)> I have a lambda switch
[14:57:25] <d_bot> <Butanium (@me on answer)> that's maybe why
[14:57:26] <d_bot> <NULL> It's not that unexpected that simply using ocamlopt should be slower
[15:01:14] <gahr> but isn't it unexpected that --profile release is slower than --profile dev?
[15:08:35] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:08:54] <d_bot> <glennsl> why do you assume `release` would optimize for speed rather than, say, portability?
[15:12:30] <d_bot> <NULL> I misread and thought that compilation was slower. Weird indeed
[15:12:33] *** Quits: Chouhartem (~fmoumou@epheme.re) (Quit: WeeChat 3.1)
[15:14:46] <gahr> glennsl: because that's what I've been seeing in all other contexts where dev vs. release is mentioned so far :)
[15:15:12] <gahr> also, because the example on the dune docs add a -O3 in release mode
[15:15:42] <gahr> are you saying I got this wrong and dev vs. release aren't about debuggability vs. speed?
[15:21:45] *** Joins: Chouhartem (~fmoumou@epheme.re)
[15:21:54] <d_bot> <glennsl> I don't know, I find it hard to find much of anything on what these profiles actually do, but I don't think it's obvious that speed is the holy grail that should always be the optimization target.
[15:23:14] <d_bot> <glennsl> I think it mostly is so because it's the standard for dick measurement contests across languages, but for most programs it would seem to make more sense to optimize for portability.
[15:23:53] <d_bot> <glennsl> That's just my hunch for why it may be so though.
[15:27:40] <d_bot> <mseri> @gahr I think you should open an issue on the dune repository or mention in the discuss forum. I think dune release is meant to be faster tbh
[15:30:35] <d_bot> <Bluddy> any idea what's making it run slower? release should definitely be faster
[15:34:44] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[15:40:31] <d_bot> <Et7f3> Try to stop using merlin and use the new extension
[15:41:53] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[15:53:45] *** Quits: bartholin (~bartholin@158.110.71.2) (Ping timeout: 252 seconds)
[15:59:53] <d_bot> <mefyl> the new extension ? I don't use VSCode if that's what you're referring to
[16:00:08] <d_bot> <mefyl> But I'll open a merlin issue since it seems there is no simple answer to my problem
[16:06:32] *** Joins: bartholin (~bartholin@158.110.71.2)
[16:12:36] *** Quits: jlrnick (~josephler@gw.lipn.univ-paris13.fr) (Ping timeout: 240 seconds)
[16:15:43] <gahr> https://github.com/ocaml/dune/issues/5435
[16:15:53] *** Joins: Haudegen (~quassel@91.114.49.10)
[16:31:09] *** Quits: bartholin (~bartholin@158.110.71.2) (Ping timeout: 252 seconds)
[16:42:56] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[16:44:33] *** Joins: bartholin (~bartholin@158.110.71.2)
[17:09:24] *** Quits: bartholin (~bartholin@158.110.71.2) (Ping timeout: 240 seconds)
[17:13:07] *** Quits: olle (~olle@i5E866D85.versanet.de) (Remote host closed the connection)
[17:15:12] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:c84:1582:c796:2258)
[17:16:59] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:22:47] *** Joins: bartholin (~bartholin@158.110.71.2)
[17:36:36] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[17:39:58] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[17:42:07] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[17:42:17] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[17:59:21] *** Joins: olle (~olle@213.61.81.133)
[18:05:45] *** Quits: olle (~olle@213.61.81.133) (Read error: Connection reset by peer)
[18:28:55] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[18:39:34] *** Joins: mro (~mro@2002:5cc3:cc11:0:d4f1:7a94:c753:3e2d)
[18:47:15] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[18:47:39] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[19:01:20] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[19:01:46] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Client Quit)
[19:02:15] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[19:02:44] <sadiq> gahr, 10x is pretty weird
[19:03:44] *** Joins: spip (~bobo@37.168.43.70)
[19:04:46] *** Quits: bobo (~bobo@37.164.104.23) (Ping timeout: 272 seconds)
[19:05:06] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Client Quit)
[19:16:16] *** Joins: olle (~olle@213.61.81.133)
[19:27:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:28:31] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:30:26] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:c84:1582:c796:2258) (Quit: Konversation terminated!)
[19:39:47] <gahr> sadiq: I am not sure I know what I'm doing
[19:43:21] <sadiq> gahr, how big are the executables for each?
[19:43:34] <sadiq> iirc the biggest win from release is cross module inlining? Maybe something has gone horribly wrong.
[19:46:34] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[19:53:05] <gahr> this test was just Array.init with some large number and some semi-complex float operations
[19:53:32] <gahr> it was a single module with a single let _ : () =
[19:57:59] <sadiq> did you use a robust way of measuring the performance?
[19:58:21] <sadiq> (e.g runtime on a laptop can be all over the place if it's a short run)
[19:59:28] <gahr> 0.06 vs 0.6 seconds
[19:59:35] <gahr> shouldn't be noise
[20:00:46] <gahr> now I can't reproduce it anymore
[20:00:50] <gahr> :( nevermind
[20:01:19] <gahr> now they seem comparable.. I expected to see a difference like the one i see in C or C++ between O0 and O3
[20:01:38] <companion_cube> for a tiny bit of code, it probably won't change anything
[20:02:02] <companion_cube> --profile=release allows cross module inlining, notably, so that makes a difference on bigger programs.
[20:03:37] <gahr> and that doesn't neeed any particular settings in the dune file, as per https://github.com/ocaml/dune/blob/main/doc/quick-start.rst#setting-the-ocaml-compilation-flags-globally ?
[20:05:08] <gahr> I think it works out of the box
[20:06:17] <gahr> I can see different ocamlc.opt and ocamlopt.opt invocations in _build/log
[20:06:21] <companion_cube> it should work out of the box yes
[20:06:36] <companion_cube> and note that `dune build -p foo` (as used in opam files) automatically uses profile=release internally
[20:12:38] <gahr> I se
[20:12:39] <gahr> e
[20:20:52] *** Quits: mro (~mro@2002:5cc3:cc11:0:d4f1:7a94:c753:3e2d) (Remote host closed the connection)
[20:21:13] *** Joins: zebrag (~chris@user/zebrag)
[20:22:45] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[20:26:40] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:39:03] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[20:54:38] *** Quits: mbuf (~Shakthi@223.178.90.64) (Quit: Leaving)
[20:55:20] <olle> Does anyone here have experience with free monad in OCaml?
[20:55:59] <companion_cube> no, and it's probably a bad idea
[20:56:38] <rgrinberg> I have experience and I concur :)
[20:57:39] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Remote host closed the connection)
[20:58:17] <olle> Why bad?
[20:58:24] <olle> You hate DSL? :O
[20:59:33] <rgrinberg> nope. as far as I can tell, you can accomplish everything with tagless final without the 10x performance penalty and needless monad juggling
[21:00:07] <olle> rgrinberg: Oh
[21:00:08] <olle> OK then
[21:00:18] <olle> Anyone here have experience with tagless-final in OCaml...?
[21:00:40] <rgrinberg> smondet[m]
[21:04:01] <companion_cube> read the BAP blog
[21:04:53] <olle> It's gonna be Oleg, isn't it?
[21:06:11] <rgrinberg> who else :D
[21:07:31] <olle> ^^
[21:07:35] <olle> Who is that guy anyway?
[21:07:38] <olle> Some wizard?
[21:07:42] <companion_cube> yes
[21:09:07] <olle> From the ancient times
[21:23:45] *** Quits: bartholin (~bartholin@158.110.71.2) (Quit: Leaving)
[21:32:35] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Read error: Connection reset by peer)
[21:33:11] <d_bot> <orbitz> some say he's a time traveling super smart compiler
[21:34:40] <olle> :D
[21:34:54] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[21:37:00] <smondet[m]> yes I did some tagless-final extensible EDSLs a few years ago (bioinformatics stuff)
[21:37:14] <smondet[m]> I did a talk at one of the ocaml workshops
[21:39:38] <smondet[m]> 2017: https://icfp17.sigplan.org/details/ocaml-2017-talks/17/Bioinformatics-The-Typed-Tagless-Final-Way
[21:40:38] <smondet[m]> there was this also: https://bitbucket.org/knih/quel/src/master/
[21:46:34] <olle> smondet[m]: Nice, thanks
[21:47:56] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:49:24] <Corbin> olle: Note that free-monad approaches are like "tagless initial" encodings; there are many different valid encodings for an API, and the free monad and tagless-final approaches are at opposite ends.
[21:49:46] <olle> I will not note that, because I have no idea what that means, hahaha
[21:49:52] <olle> Don't bother, I have to read more first
[21:50:08] <Corbin> Relevant to OCaml, a free monad tends to build up lots of intermediate work, and the bookkeeping for that work can dominate everything else. I've written OCaml programs that should run fine, but overflow the stack.
[21:50:40] <Corbin> The tagless-final approach removes all of that. Or most of it, at least.
[21:52:21] <olle> Alright :)
[21:55:42] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:59:18] *** Joins: rgrinberg (~textual@187.194.14.9)
[22:02:09] *** Quits: olle (~olle@213.61.81.133) (Remote host closed the connection)
[22:12:19] *** Quits: Johann (~johann@user/johann) (Ping timeout: 268 seconds)
[22:14:59] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[22:15:44] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:19:09] *** Joins: mro (~mro@2002:5cc3:cc11:0:594e:5d09:9565:378f)
[22:23:49] *** Quits: mro (~mro@2002:5cc3:cc11:0:594e:5d09:9565:378f) (Remote host closed the connection)
[22:32:20] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:32:47] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:08:06] <d_bot> <Quentin Fortier> How do you use List.sort to sort floats? I struggle for a simple compare function.
[23:08:31] <companion_cube> `compare` works on floats
[23:09:16] <rgrinberg> Yes, but avoid compare in general. Use Float.compare
[23:10:03] <d_bot> <Quentin Fortier> Thanks.
[23:10:55] <companion_cube> oh that's right, there's a Float module now
[23:22:43] *** Quits: rgrinberg (~textual@187.194.14.9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:28:10] *** Joins: mro (~mro@port-92-195-204-17.dynamic.as20676.net)
[23:32:40] *** Quits: mro (~mro@port-92-195-204-17.dynamic.as20676.net) (Ping timeout: 272 seconds)
[23:34:13] <d_bot> <Quentin Fortier> How can I flush automatically with Format.printf ?
[23:34:25] <companion_cube> add @. in your format string
[23:34:29] <companion_cube> adds a \n and flushes.
[23:34:38] <companion_cube> (otherwise, just @? but it's less good imho)
[23:35:38] <d_bot> <Quentin Fortier> The docs says %! but I may misunderstand
[23:35:44] <d_bot> <Quentin Fortier> https://ocaml.org/api/Printf.html
[23:35:56] <companion_cube> that's for Printf itself
[23:37:13] <d_bot> <Quentin Fortier> Didn't notice that there are Format.printf and Printf.printf
[23:39:06] <companion_cube> they share the same format strings, but in Format most things are @-prefixed
[23:39:11] <companion_cube> @[hello@ world@]@.
[23:44:02] *** Joins: mro (~mro@2002:5cc3:cc11:0:594e:5d09:9565:378f)
[23:47:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:51:31] *** Quits: gravicappa (~gravicapp@178.214.246.212) (Ping timeout: 256 seconds)
[23:54:41] <d_bot> <orbitz> @rgrinberg What would I need to do for you to be comfortable with some sort of non-dune-based way to feed ocaml-lsp merlin data?
[23:55:14] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:89c:f82b:eb69:d057)
[23:55:54] <d_bot> <rgrinberg> dune has a subcommand called `ocaml-merlin` that is used by lsp to feed it whatever information it needs.
[23:56:15] <d_bot> <rgrinberg> so all you need to do is provide an alternative to this command that understand your build layout
[23:56:52] *** Joins: jlrnick (~josephler@2a01cb040a15940054ec4eb0b34c0e67.ipv6.abo.wanadoo.fr)
[23:57:43] <d_bot> <orbitz> Cool, I found where I think that is run in the code (merlin_config.ml).  Would you be comfortable accepting commits to ocaml-lsp that allow specifying the command to run in some other way (command line option, maybe?)
[23:58:29] <d_bot> <rgrinberg> I wouldn't mind
[23:58:42] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:89c:f82b:eb69:d057) (Client Quit)
[23:59:33] <d_bot> <orbitz> Cool, thank you.  I'll look to creating some PRs.  Thank you for you your help today
