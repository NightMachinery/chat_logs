[00:00:19] <teut> I am trying to use the interceptor extension but the requests are not visible in postman
[00:00:34] *** Joins: salad (~cucumber@188.25.234.155)
[00:00:57] <teut> https://ibb.co/dmqKRgL
[00:01:19] <teut> https://ibb.co/vPBqGk8
[00:01:36] <teut> https://www.postman.com/product/postman-interceptor/ I saw the video and read the docs
[00:03:39] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[00:06:17] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c865:bd48:8b5c:8488) (Ping timeout: 240 seconds)
[00:08:23] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:2d44:9744:ee2b:29ff)
[00:09:35] <de-facto> data size is 8MB of JSON so even with gzip thats a lot to download
[00:10:15] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:11:19] <de-facto> correction 6.8MB of JSON 1.7MB gzipped
[00:14:43] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[00:18:17] <systemfault> rustyshackleford: Would be easier for you to get answers on the TS channel (Generally)
[00:18:32] *** Quits: sumaro (~sumaro@88.244.93.37) (Ping timeout: 256 seconds)
[00:21:24] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[00:22:50] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[00:23:16] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35) (Ping timeout: 250 seconds)
[00:27:17] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[00:27:36] *** Joins: thiras (~thiras@user/thiras)
[00:34:28] <austincheney> rustyshackleford, that TypeScript editor is telling you both the problem and the solution.  Your compile target is set too early to use something super new like Object.fromEntries.  Change your compiler target in your tsconfig.json
[00:35:19] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-af6c.res6.spectrum.com)
[00:35:23] <rustyshackleford> austincheney: ah, thats true
[00:35:24] *** Quits: salad (~cucumber@188.25.234.155) (Quit: salad)
[00:35:40] <austincheney> rustyshackleford, in "compilerOptions" specify "target": "ES2020" or whatever value you want.  That will fix your compile issue but it could result in browser incompatibility issues at run time
[00:35:45] <rustyshackleford> not sure if I can do that in the playground. In my project, I do have es2020 set
[00:36:14] <austincheney> is this a playground only problem?
[00:37:33] <austincheney> rustyshackleford, you can change it in the playground.  In the second top menu there is a TS Config.  Once you click into that target is top center.
[00:38:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:38:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:38:21] *** Joins: wroathe (~wroathe@user/wroathe)
[00:39:42] <austincheney> I have verified in my own browser that is the fix you need.
[00:41:20] <systemfault> You can set the tsconfig options on the playground
[00:43:00] <systemfault> Anyway, even if Object.entries exists, it won't work without a type assertion
[00:43:14] <systemfault> Object.entries removes type information
[00:43:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:43:32] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[00:43:49] <systemfault> *Object.fromEntries
[00:52:58] <austincheney> yeah, the playground is clear about that as it throws that error after fixing the former target error
[01:02:19] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 256 seconds)
[01:12:27] *** Joins: sam_1 (~sam_1@87.51.251.118)
[01:13:09] <de-facto> are arrays in objects a bad idea?
[01:13:18] <de-facto> its extremely slow on v8 it seems
[01:16:32] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[01:21:20] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[01:24:59] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[01:28:13] *** Joins: pulse (~pulse@user/pulse)
[01:28:21] *** Quits: nomic (~nomic@185.217.117.104) (Quit: Leaving)
[01:29:06] *** Joins: nomic (~nomic@185.217.117.104)
[01:29:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[01:30:10] *** Joins: trevors (~trevors@user/trevors)
[01:31:55] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:33:48] *** Joins: Joss (~joss@user/Joss)
[01:37:04] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[01:37:28] *** Quits: teut (~teut@2401:4900:1c68:6b85:8d9c:5c88:1fa7:34f3) (Quit: Client closed)
[01:40:32] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[01:41:06] *** Joins: Praise (~Fat@user/praise)
[01:41:39] *** Quits: Joss (~joss@user/Joss) (Quit: Leaving.)
[01:43:31] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:44:49] *** Quits: cotko_ (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 256 seconds)
[01:55:15] <systemfault> de-facto: You have strange questions my wonderful human being
[01:56:09] <systemfault> I use data structures when I need them... If I need an array inside an object then I do it.
[01:56:26] <systemfault> Not sure how you figured out that they were somehow slow...
[01:57:01] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[01:58:50] <de-facto> are there any articles about computation costs in v8? i am having a hard time imagining what happens in the background in terms of memory management and optimizations
[01:58:54] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:59:15] <de-facto> i guess the asm.js guys looked into writing code that is highly optimizable by v8 et al?
[01:59:29] <systemfault> You're not supposed to know or care to be honest with you... you're writing JS, not C++
[01:59:48] <systemfault> de-facto: You should explain us your problem instead...
[01:59:56] *** Joins: Naan (~Naan@user/naan)
[02:01:35] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[02:02:29] <de-facto> its quite complicated, i dont know where to start
[02:02:41] <hmw[at]> de-facto: Ask in ##javascript, they have actual experts there
[02:03:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[02:03:32] <hmw[at]> I don't see, how arrays in objects would be slow, btw. Could be a bug or some kind of special case. ##javascript should know such things.
[02:03:51] <hmw[at]> oops
[02:03:58] <hmw[at]> I am not in #gamedev, I guess.
[02:04:37] <de-facto> there is only #javascript
[02:04:51] <hmw[at]> uhm, you're right :)
[02:05:56] <hmw[at]> FlorianBad: A timeout with 0 ms delay should do the trick the same as any other
[02:06:27] <FlorianBad> hmw[at]: really? How do we know FOR SURE, like cross-browser, all scenarios possible?
[02:06:28] <hmw[at]> It is about giving the engine one tick to "breathe"
[02:06:36] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[02:06:59] <hmw[at]> You set the style, which potentially triggers a recalculation. That happens as soon as the main loop gets control back, hence 0ms does the trick.
[02:07:01] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:59da:fcd2:abfb:4d1d) (Read error: Connection reset by peer)
[02:08:43] <FlorianBad> ok. I already implemented another approach:  a css transition of opacity 0 to 1 (delay .1s, duration .5s), then event listener transitionstart, and on top of that I put a 300ms timeout that calls the drawing if the transitionstart didn't for some reasons.
[02:09:06] <hmw[at]> Heheh. If it works. It sounds a bit convoluted.
[02:09:06] <FlorianBad> That way my canvas fades in nicely too, which I actually want after all
[02:10:19] <FlorianBad> hmw[at]: the thing I noticed though is that for the opacity transition to start the className (which has opacity:1, as opposite to opacity:0 by default without class) has to be set in a setTimeout, otherwise it goes straight to opacity:1 without transition
[02:10:32] <FlorianBad> so I put a transition of 10ms for the className
[02:10:41] <FlorianBad> no, a setTimeout of 10ms, sorry
[02:10:45] <hmw[at]> FlorianBad: It needs to have _a_ value before you can transition to another
[02:11:34] <FlorianBad> it does, it has opacity:0, but without a timeout it probably gets the class immediately so it never starts at 0
[02:11:37] <hmw[at]> Make sure the canvas has an opacity at all times
[02:11:58] <hmw[at]> It might need one tick to apply, depending on your situation
[02:12:02] <FlorianBad> it's on the wrapper that I put the opacity
[02:12:11] <hmw[at]> have a fiddle?
[02:12:25] <FlorianBad> let me make one to clarify
[02:14:04] <FlorianBad> hmw[at]: https://jsfiddle.net/scm3zLj0/   You can't run it because it's part of a much bigger context, but at least you can understand how I organized this
[02:15:58] <FlorianBad> you may want to search for  timeout, class, and opacity
[02:16:12] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:17:34] *** Joins: AtomicLong (~primamate@p200300ee170add00affc486c3e024911.dip0.t-ipconnect.de)
[02:18:43] <hmw[at]> Looks like you create the element, insert to DOM then add the class "show". Without a timeout it will be as if you created it with ".show" to begin with. You need at least one timeout so there can be a change between the transitioned states. Hope that makes sense.
[02:19:19] <hmw[at]> 0ms should do the trick tho. First have the thing inserted to DOM, and in the next loop call to your code, the class is added, creating the wanted "difference"
[02:20:07] <hmw[at]> iow, if you assing a style, then set another value and only then leave your event handler, the last set state is, what the system is going to work with
[02:20:10] <FlorianBad> ok, there's no other "cleaner" way to make that transition happen then setting a class w/ timeout?
[02:20:56] <hmw[at]> Hmm. Not sure. The timeout is nice enough for me. Perhaps it can be simulated with animations, but that'd be more complicated even.
[02:21:15] <FlorianBad> because the only purpose of that class here is to initialize that transition... it seems a bit silly to make a class just to set it 10ms later
[02:21:26] <FlorianBad> ok
[02:21:51] <hmw[at]> you need to have an established base state in the DOM, that is calculated and rendered, before you can trigger a _change_.
[02:22:02] <FlorianBad> ok
[02:22:24] <hmw[at]> You're already doing it right, by just assigning a class
[02:22:42] <FlorianBad> and even if there was a way to initialize some kind of transition without doing that, it would probably not fire the transition event... or it may not be reliable
[02:22:44] <hmw[at]> Try timeout(..., 0). If you didn't mess up, it should work
[02:23:16] <FlorianBad> yeah but I don't have any hurry worth 10ms in this case lol So it makes it even safer just in case
[02:23:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:23:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:23:18] *** Joins: wroathe (~wroathe@user/wroathe)
[02:23:40] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[02:24:17] <FlorianBad> This is just the loading of a graphic at opening of a page, so not only the 10ms + .1s of delay is perfectly fine, but the .5s transition also makes it nicer
[02:24:18] <hmw[at]> It should be as safe. If it fails, that is an indication that something is still missing.
[02:25:03] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[02:25:13] <hmw[at]> As for browser compatibility, this works with all major browsers on the Desktop. I don't know much about mobile. I'd expect it to be the same.
[02:25:48] <FlorianBad> ok. I'm glad you looked into it though;)  I wanted to make sure that I don't do anything totaly absurd at least ;)
[02:26:37] <hmw[at]> No, looks sound
[02:26:46] <FlorianBad> :D
[02:28:43] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[02:29:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:31] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:54] *** Joins: pluri (~pluri@user/pluri)
[02:32:52] *** Quits: pizdets (~pizdets@183.182.110.138) (Ping timeout: 250 seconds)
[02:33:03] <de-facto> it seems my array copy function is interrupted by "code optimization" in v8, is there some way to prevent that from happening?
[02:33:16] <de-facto> its just too slow like this
[02:34:00] *** Joins: pizdets (~pizdets@183.182.111.203)
[02:34:22] <de-facto> i already tried pre-initializing the arrays with Array(len).fill(0)
[02:34:33] <de-facto> it makes it a tiny bit faster but not by much
[02:34:41] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[02:35:21] <hmw[at]> Maybe https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
[02:35:52] <hmw[at]> In Javascript, one does not really consider optimization like in C. You only do the high level common sense type of optimization.
[02:36:31] <hmw[at]> Perhaps you can find a different approach to the problem.
[02:36:59] <hmw[at]> What kind of operation is this array thing about, de-facto?
[02:37:11] <austincheney> de-facto, why do you believe its something V8 that is slowing your code down?
[02:37:37] <de-facto> because i see in the devtools that it constantly switches between running and optimizing
[02:37:52] <de-facto> so i guess it tries too hard to optimize something that is not finished yet
[02:38:15] <de-facto> i just wish i somehow could tell it in advance what its going to need and then not have it interrupt the processing
[02:38:19] <austincheney> de-facto, I dont think so.  If V8 were the problem it would be stuck on "running" only.
[02:38:22] <de-facto> is something like that possible with typed arrays?
[02:38:40] <hmw[at]> JS can over-optimize, in that case, it rolls back certain optimizations. You can't do much about it except using a different algorithm. No switches to turn it off or something.
[02:38:48] <austincheney> I strongly believe you are doing something wrong per array index.
[02:38:58] <hmw[at]> ^
[02:39:13] <hmw[at]> Sounds like you are trying to use the language with the wrong paradigm in mind
[02:39:15] <de-facto> what do you mean doing something wrong with indices?
[02:39:26] <de-facto> yeah i may simply not be fast enough
[02:39:41] <hmw[at]> What is the high level goal of the operation?
[02:40:01] <de-facto> to unpack transport optimized data
[02:40:03] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:40:07] <austincheney> de-facto, you are populating an array using a loop and in each loop interval you are doing something wrong and V8 is trying to recover (slowly)
[02:40:09] <hmw[at]> as in networking?
[02:40:23] <de-facto> austincheney, yes
[02:40:36] <de-facto> hence my desire to understand the memory management
[02:40:44] <de-facto> networking yes
[02:40:46] <hmw[at]> heheh good luck with that :)
[02:40:49] <austincheney> de-facto, it has nothing to do with memory
[02:40:57] <austincheney> de-facto, this is a problem only in your code
[02:41:10] <austincheney> de-facto, if you post the code somewhere I can recommend a solution
[02:41:13] <hmw[at]> ^likely this
[02:42:10] <hmw[at]> de-facto: Check out WebRTC data channels
[02:42:35] <de-facto> why?
[02:42:47] <hmw[at]> They would be doing all the heavy lifting for you
[02:42:53] <de-facto> its a JSON download
[02:43:29] <hmw[at]> what for, on an even higher level?
[02:43:38] <hmw[at]> like, video streaming, etc
[02:43:45] <de-facto> no its numerical data
[02:43:53] <hmw[at]> for what type of application
[02:43:55] <de-facto> to render tables and traces
[02:44:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:44:06] <austincheney> webRTC is hands down the solution and likely successor of the WWW, but its model is extremely expensive to implement, particularly TURN servers.  I am working on my own decentralization model that ignores the need for TURN servers by ignoring users trapped in IPv4 (for the moment).
[02:44:29] <hmw[at]> WebRTC is a bit complicated, indeed
[02:44:43] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[02:44:51] <de-facto> yeah WebRTC is nice, but I just dont see how it could be related to my array problem
[02:45:10] <austincheney> I see a lot of nonsense online conflating blockchain with decentralization, which it isn't, when really people should be looking at webRTC as a true decentralized solution
[02:45:21] <hmw[at]> The assumption is, that you aren't haveing an "array problem", but are approaching the issue from the wrong angle
[02:45:28] <austincheney> de-facto, it isn't.  I am completely off topic
[02:45:50] <austincheney> hmw[at] is correct
[02:46:13] <hmw[at]> How large are those JSONs, that it could be possibly too slow? Must be some kind of high volume real time data, or really huge tables
[02:46:19] <de-facto> i mean i could pre-process everything on the server and barely do anything in the client browser, but then download size would increase significantly even with gzip
[02:46:42] <austincheney> even if the JSON is monster large most of the processing lag should be on the JSON.parse
[02:46:44] *** Joins: nomad1 (~nomad@user/spacenomad)
[02:46:44] <de-facto> lots of redundancy in there in a semantic way
[02:46:58] <de-facto> i dont do json parse
[02:47:11] <de-facto> i include it as js file in the header
[02:47:20] <hmw[at]> lol
[02:47:26] <austincheney> de-facto, are you receiving a JSON string from across the network and implementing your own parse scheme?
[02:47:37] <de-facto> no
[02:47:46] <hmw[at]> he dies JSON.parse the funny way
[02:47:49] <hmw[at]> does*
[02:47:54] <de-facto> var data = { ... }
[02:48:10] <austincheney> well, JSON is a string.  Otherwise you are receiving JavaScript containing a big data object.
[02:48:20] <de-facto> yes
[02:48:28] <hmw[at]> de-facto: I recommend you switch over to JSON.parse
[02:48:29] <de-facto> but thats not the issue at all
[02:48:35] <de-facto> why?
[02:48:42] <hmw[at]> using globals has a lot of drawbacks
[02:49:03] <de-facto> it caches by etag for example
[02:49:04] <hmw[at]> also, your method makes the code hard to retrace for the reader
[02:49:17] <austincheney> hmw[at], that is absolutely true, but first he needs working code.
[02:49:21] <hmw[at]> and possibly you lose performance too
[02:49:28] <de-facto> this really is not the problem, it loads very fast that json into an object
[02:50:01] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[02:50:07] <austincheney> de-facto, are you able to post your code somewhere like a github gist so we can see what you are doing?
[02:50:10] <hmw[at]> All I can say and recommend is to use best known practices. Injecting JS to the head hasn't been needed for quite a while now
[02:50:17] <hmw[at]> yeah. example would help
[02:50:40] <austincheney> i cannot recommend a solution without knowing the problem
[02:50:58] <hmw[at]> Well. Generic questions can only get generic answers.
[02:52:02] <de-facto> my question only was about how to optimize array operations, but maybe that is not possible in js
[02:52:02] *** Quits: nomad1 (~nomad@user/spacenomad) (Ping timeout: 240 seconds)
[02:52:42] <austincheney> de-facto, optimizing array operations won't unbreak your code
[02:52:43] <hmw[at]> It isn't. Perhaps you need to stick your thing into a worker or something
[02:53:32] <hmw[at]> We can't even find out how much RAM there is left, or how much we use
[02:54:13] <hmw[at]> Trust the allmighty engine! Hail the V8!
[02:56:00] <systemfault> de-facto: Array are extremely fast in JS, either your dataset is huge or you're doing something really really wrong.
[02:56:56] <de-facto> my dataset is quite big, maybe about 10MB unpacked
[02:57:12] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[02:57:19] <systemfault> n> const myArray = []; console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray.push(i) } console.timeEnd('X');
[02:57:20] <jellobot> (okay) X: 52.045ms
[02:57:22] <austincheney> I remember processing 2 million index arrays in the early days of my code beautifier before V8 or JavaScript became fast.  It would take about 5 seconds.  Now it would take about 20-50ms.
[02:57:43] <systemfault> n> const myArray = []; console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray.push(i) } console.timeEnd('X');
[02:57:44] <jellobot> (okay) X: 36.471ms
[02:58:16] <hmw[at]> We can use underscores like that??
[02:58:36] <ThePendulum> n> 1_000_000 * 2_000
[02:58:36] <jellobot> (okay) 2000000000
[02:58:47] <austincheney>  n> const myArray = []; console.time('X'); for (let i = 0; i < 1e6; i += 1) { myArray.push(i) } console.timeEnd('X');
[02:58:52] <hmw[at]> that's awesome!!
[02:59:03] <austincheney> n> const myArray = []; console.time('X'); for (let i = 0; i < 1e6; i += 1) { myArray.push(i) } console.timeEnd('X');
[02:59:04] <jellobot> (okay) X: 34.919ms
[02:59:05] <hmw[at]> I used to do things like 1000*1000*1000
[03:00:30] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:00:56] <ThePendulum> for time I still tend to do 30*24*3600*1000
[03:01:09] <systemfault> Anyway, we're talking about 30ms to create an array and push 1M numbers in it.
[03:01:32] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 240 seconds)
[03:02:00] <systemfault> n> console.time('X'); const myArray = Array.from({ length: 1_000_000 },(_, i) => i); console.timeEnd('X');
[03:02:00] <jellobot> (okay) X: 137.454ms
[03:02:11] <systemfault> (A lot slower, as expected)
[03:02:16] <systemfault> Was just curious
[03:02:44] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 250 seconds)
[03:03:04] <hmw[at]> ThePendulum: That's different tho, I do that too. Nicer is to have const HOURS=1000*60*60;  const thing = 30*HOURS;
[03:05:51] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: Quit.)
[03:06:46] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Read error: Connection reset by peer)
[03:07:08] <de-facto> const myArray = Array(1e6).fill(0); console.time('X'); for (let i = 0; i < 1e6; i += 1) { myArray.push(i) } console.timeEnd('X');
[03:07:12] <de-facto> n> const myArray = Array(1e6).fill(0); console.time('X'); for (let i = 0; i < 1e6; i += 1) { myArray.push(i) } console.timeEnd('X');
[03:07:13] <jellobot> (okay) X: 41.156ms
[03:07:24] <de-facto> n> const myArray = []; console.time('X'); for (let i = 0; i < 1e6; i += 1) { myArray.push(i) } console.timeEnd('X');
[03:07:24] <jellobot> (okay) X: 36.77ms
[03:07:29] <de-facto> hmm
[03:08:41] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:09:56] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[03:10:20] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[03:11:18] <systemfault> JS is not C++...
[03:13:19] <systemfault> n>const myArray = new Array(1_000_000); console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray[i]=i } console.timeEnd('X');
[03:13:20] <jellobot> (okay) X: 5.971ms
[03:13:43] <systemfault> This is the fastest V8 can do
[03:15:54] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:16:30] *** Joins: g2anj (~v@58.228.230.4)
[03:19:26] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Quit: ZNC 1.8.2+deb1 - https://znc.in)
[03:28:15] *** Joins: Denver (~Denver@174-16-83-85.hlrn.qwest.net)
[03:29:04] *** Joins: sam_1 (~sam_1@87.51.251.118)
[03:29:08] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:31:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:33:25] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[03:34:21] <de-facto> n> myArray = new Array(1_000_000); console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray[i]=i } console.timeEnd('X');
[03:34:22] <jellobot> (okay) X: 7.108ms
[03:34:41] <de-facto> n> myArray = Array(1_000_000); console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray[i]=i } console.timeEnd('X');
[03:34:42] <jellobot> (okay) X: 5.957ms
[03:34:57] <de-facto> n> const myArray = Array(1_000_000); console.time('X'); for (let i = 0; i < 1_000_000; i += 1) { myArray[i]=i } console.timeEnd('X');
[03:34:58] <jellobot> (okay) X: 4.479ms
[03:35:38] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:45:17] *** Quits: stagas (~stagas@2a02:587:c43a:e9ef:f6ed:6a6d:5cda:3add) (Ping timeout: 240 seconds)
[03:45:44] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:47:32] *** Joins: sam_1 (~sam_1@87.51.251.118)
[03:49:39] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:49:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:52:14] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[03:58:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:05] *** Joins: wroathe (~wroathe@user/wroathe)
[03:58:15] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:58:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[03:59:05] *** Joins: trevors (~trevors@user/trevors)
[04:02:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:06:26] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[04:08:44] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[04:12:39] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d45:c0f8:56d9:c89f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:15:01] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[04:15:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[04:19:43] *** Quits: AtomicLong (~primamate@p200300ee170add00affc486c3e024911.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[04:21:32] *** Quits: Denver (~Denver@174-16-83-85.hlrn.qwest.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:21:32] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Read error: Connection reset by peer)
[04:22:07] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:29:33] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:32:35] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:39:35] *** Parts: madprops (hj8oijo@user/madprops) (Leaving)
[04:41:56] *** Joins: sam_1 (~sam_1@87.51.251.118)
[04:43:01] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[04:43:31] *** Joins: Denver (~Denver@174-16-83-85.hlrn.qwest.net)
[04:43:53] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:2d44:9744:ee2b:29ff) (Quit: WeeChat 3.4)
[04:46:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:46:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:46:12] *** Joins: wroathe (~wroathe@user/wroathe)
[04:50:31] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[04:53:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[05:01:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:01:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[05:06:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:07:02] *** Joins: matsaman (~matsaman@user/matsaman)
[05:07:17] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-af6c.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:09:35] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[05:10:21] *** Joins: zebrag (~chris@user/zebrag)
[05:11:32] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[05:14:25] *** Joins: bprompt (~default@207.98.72.182)
[05:14:36] *** Quits: bprompt (~default@207.98.72.182) (Remote host closed the connection)
[05:15:20] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com)
[05:19:26] *** Joins: H4Z3 (~H4ZE@165.227.36.29)
[05:19:37] *** Joins: bobdobbs` (~user@2406:5a00:4434:4c00:d34d:a933:4966:ed54)
[05:19:57] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[05:21:24] *** Quits: bobdobbs (~user@116.251.149.196) (Ping timeout: 250 seconds)
[05:26:33] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Read error: Connection reset by peer)
[05:28:21] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[05:40:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:40:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:40:05] *** Joins: wroathe (~wroathe@user/wroathe)
[05:45:03] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 240 seconds)
[05:45:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:52:56] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[05:55:12] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[05:56:43] *** Joins: stenno (~stenno@user/stenno)
[05:56:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:56:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:56:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:01:43] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[06:01:45] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:03:38] <oscurochu> If I'm using passport for user logins, why should i also use passport for user registrations?
[06:04:01] <oscurochu> my api can register users all day long without using passport.
[06:04:40] <oscurochu> i just want to make sure im not opening myself up to bad stuff by not taking advantage of possport
[06:06:22] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[06:06:31] *** Joins: junebug (~junebug@2600:1700:3db0:2540:47eb:8d98:191c:cbbb)
[06:07:32] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 240 seconds)
[06:09:30] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Ping timeout: 250 seconds)
[06:10:13] *** Quits: src (~src@user/src) (Quit: Leaving)
[06:14:01] *** Joins: sam_1 (~sam_1@87.51.251.118)
[06:14:42] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Ping timeout: 250 seconds)
[06:16:30] *** Joins: trevors (~trevors@user/trevors)
[06:17:29] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[06:18:21] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[06:18:26] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:24:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:27:10] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:27:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:28:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:31:19] *** Quits: junebug (~junebug@2600:1700:3db0:2540:47eb:8d98:191c:cbbb) (Remote host closed the connection)
[06:32:23] *** Joins: junebug (~junebug@2600:1700:3db0:2540:7236:29f5:ad13:7e19)
[06:34:06] *** Joins: Rockwood (~Rocky@user/rocky)
[06:35:30] *** Quits: nomic (~nomic@185.217.117.104) (Quit: Leaving)
[06:35:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:35:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:35:52] *** Joins: wroathe (~wroathe@user/wroathe)
[06:35:57] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[06:36:29] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:40:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:44:55] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:2e68:4546:ca7:5dd6)
[06:45:36] <trafficjam> how can i pass my authentication state around my entire next.js app so that if i log out anyway on a "logged-in required page", it refresh?
[06:46:03] <trafficjam> is there a way to do this without having to check a "isLoggedIn" function on each page?
[06:52:23] *** Joins: incog (~ayy@pool-108-46-169-14.nycmny.fios.verizon.net)
[06:55:21] *** Quits: \mSg (mSg@user/msg/x-0285936) (Ping timeout: 256 seconds)
[06:55:52] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 250 seconds)
[06:57:50] *** Joins: quazimodo (~quazimodo@n1-40-220-128.bla1.nsw.optusnet.com.au)
[06:58:20] *** Joins: falafel (~falafel@2603-8000-d800-688c-ac19-0e1c-4d33-588b.res6.spectrum.com)
[07:06:51] *** Parts: optimant (~asavage@user/optimant) (WeeChat 3.2.1)
[07:14:48] *** Quits: Denver (~Denver@174-16-83-85.hlrn.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:18:32] *** Quits: incog (~ayy@pool-108-46-169-14.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[07:22:32] *** Joins: \mSg (mSg@user/msg/x-0285936)
[07:22:43] *** Joins: jazzy (~jaziz@user/jaziz)
[07:25:37] *** Quits: bobdobbs` (~user@2406:5a00:4434:4c00:d34d:a933:4966:ed54) (Ping timeout: 240 seconds)
[07:27:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-ac19-0e1c-4d33-588b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:29:09] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:e9a4:e83d:72a2:3f42)
[07:31:44] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[07:33:06] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[07:34:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:34:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:34:00] *** Joins: wroathe (~wroathe@user/wroathe)
[07:34:12] *** Joins: Rockwood (~Rocky@user/rocky)
[07:39:38] *** Quits: hax (~hax@user/hax) (Ping timeout: 250 seconds)
[07:39:56] *** Joins: falafel (~falafel@2603-8000-d800-688c-5ce0-dd73-b1f9-b000.res6.spectrum.com)
[07:41:14] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[07:48:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:7236:29f5:ad13:7e19) (Ping timeout: 240 seconds)
[07:52:49] <Croran> if i want to delete every element of a certain type from my page, what's the easiest way to do that?
[07:54:14] <Croran> they all have the same ID so i tried this and it didn't work:
[07:54:21] <Croran> while (var a = document.getElementById("svgTest")){ a.parentNode.removeChild(a); }
[07:54:45] <Croran> I think while doesn't recognize the output of the assignment as a 'true' value...
[07:54:47] *** Joins: g2anj (~v@58.228.230.4)
[07:54:53] <Croran> but i'm not sure how to fix that
[07:55:24] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[07:57:36] *** Joins: Akiva (~Akiva@user/Akiva)
[08:01:15] <Croran> nvm this page helped me figure it out. their 'looping through dom elements' example was pretty much exactly what i needed
[08:01:18] <Croran> https://www.freecodecamp.org/news/master-the-art-of-looping-in-javascript-with-these-incredible-tricks-a5da1aa1d6c5/
[08:12:40] *** Joins: audiobirb (~audio@user/audio)
[08:13:06] <matsaman> "tricks" =P
[08:13:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-5ce0-dd73-b1f9-b000.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:13:40] *** Joins: sam_1 (~sam_1@87.51.251.118)
[08:13:46] *** Joins: thojanssens (~thojansse@182.232.192.216)
[08:18:18] <Croran> haha right?
[08:20:21] <matsaman> loops ftw
[08:21:48] <systemfault> Not more than one element on a page can have a specific ID... otherwise you have an invalid document.
[08:21:49] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[08:22:27] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[08:22:42] <Croran> ok. well my current solution ignores the IDs anyway. I guess I could just take out the IDs.
[08:27:34] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:28:49] *** Joins: panella32 (~panella32@180.149.246.206)
[08:31:08] *** Joins: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com)
[08:34:55] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[08:37:20] *** Quits: panella32 (~panella32@180.149.246.206) (Quit: Textual IRC Client: www.textualapp.com)
[08:49:02] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[08:49:50] *** Quits: lilmonkey (~lilmonkey@user/lilmonkey) (Ping timeout: 250 seconds)
[09:01:38] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:2e68:4546:ca7:5dd6) (Read error: Connection reset by peer)
[09:03:53] *** Joins: visicalc[m] (~visicalct@2001:470:69fc:105::1:6bba)
[09:04:33] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[09:04:48] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:07:03] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:2e68:4546:ca7:5dd6)
[09:13:03] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[09:14:18] *** Joins: sam_1 (~sam_1@87.51.251.118)
[09:17:14] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[09:17:57] *** Joins: sudomann (~sudomann@2601:543:100:4fc8:dc64:3ab8:7f09:81e5)
[09:19:07] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[09:29:59] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[09:30:03] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:2e68:4546:ca7:5dd6) (Read error: Connection reset by peer)
[09:31:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:32:54] *** Joins: stagas (~stagas@2a02:587:c43a:e9ef:7954:80f7:e9f1:8e8b)
[09:35:11] *** Joins: sam_1 (~sam_1@87.51.251.118)
[09:36:55] *** Joins: falafel (~falafel@2603-8000-d800-688c-5435-b1cc-d2eb-fa57.res6.spectrum.com)
[09:39:10] *** Quits: falafel (~falafel@2603-8000-d800-688c-5435-b1cc-d2eb-fa57.res6.spectrum.com) (Remote host closed the connection)
[09:39:29] *** Joins: falafel (~falafel@2603-8000-d800-688c-1a9c-587e-2206-f653.res6.spectrum.com)
[09:39:31] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[09:47:01] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:53:06] *** Quits: falafel (~falafel@2603-8000-d800-688c-1a9c-587e-2206-f653.res6.spectrum.com) (Quit: Leaving)
[09:59:17] *** Joins: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de)
[09:59:23] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[10:00:04] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[10:01:46] *** Quits: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:15:09] <sickdyd> how can I pass a component as prop and then use the component to wrap children?
[10:18:43] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:19:38] <Maxdamantus> sickdyd: sounds like something called "higher-order components", but that's generally a bad idea (at least in my opinion, and I think increasingly other people's opinions nowadays too)
[10:20:17] <Maxdamantus> sickdyd: it's probably much cleaner to just pass a function that the receiver can call to invoke your desired rendering logic.
[10:21:14] <Maxdamantus> sickdyd: <Foo render={child => <div className="my-child">{child}</div>}/>
[10:22:01] <Maxdamantus> I don't think I've seen people talking about HoCs recently, so hopefully people have stopped using them.
[10:26:09] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[10:27:10] <Maxdamantus> (fwiw, the alternative pattern I showed above has sometimes been called a "render prop", but I'm not sure it really even needs a name. I figured that solution out naturally when learning React before reading about "higher-order components" or realising that someone had called the function pattern "render props")
[10:28:03] <Maxdamantus> https://reactjs.org/docs/render-props.html
[10:28:05] <stagas> sickdyd: did u try something like: const Foo = ({ Component, children }) => <Component inner={children} />; then render with: <Foo Component={Other}>hello</Foo>, then in the Other component do something with the 'inner' prop
[10:28:05] <Maxdamantus> https://reactjs.org/docs/higher-order-components.html
[10:28:55] <stagas> it'll be the children hopefully, at least it worked on my virtual dom, don't know if react can handle it
[10:30:11] <stagas> that's called strategy pattern, not higher order which doesn't even exist, it's the decorator pattern
[10:30:16] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:31:03] <Maxdamantus> "strategy pattern" is a more generic term which could be used to describe the "higher-order component" pattern, but what you wrote is very much referred to as "higher-order components" in React.
[10:32:42] <stagas> in the strategy pattern you swap implementations, and from the point of the consumer it's irrelevant, which is what passing a component in props is, higher order is adding=>decorating additional functionality to a function
[10:33:00] <sickdyd> thanks guys, I'll try some of the above
[10:34:21] <Maxdamantus> stagas: sure, "strategy pattern" basically just means something to do with dynamic dispatch, for example passing a function.
[10:34:29] <Maxdamantus> stagas: it's not very specific.
[10:36:06] <Maxdamantus> btw, the render prop way of writing that HoC code: const Foo = ({ render, children }) => render(children); ... <Foo render={children => <Other inner={children}/>}>hello</Foo>
[10:37:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[10:38:46] <Maxdamantus> (the "render prop" can also be described as an instance of the "strategy pattern")
[10:39:11] <Maxdamantus> (so can practically anything that is described as "higher-order")
[10:39:41] <stagas> i guess higher order then can apply  to both patterns which is why it's not a good term
[10:40:10] <Maxdamantus> Right. Your pattern is normally called "HoC" and my pattern is normally called "render prop".
[10:40:23] <Maxdamantus> (in the context of React)
[10:40:38] <stagas> because the one in the webs for React higher order shows a Foo = Wrap(Bar) is the HoC, which is more like decorator
[10:40:43] <Maxdamantus> (I linked pages from the React docs about both patterns)
[10:40:49] <stagas> what you showed is a strategy
[10:42:36] <Maxdamantus> Actually, I guess your sample is missing one aspect of the HoC pattern, which is passing through received props.
[10:44:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[10:44:15] <stagas> but u can do ...props it'll be fine, just that the 'children' is overwritten in my case so it needs a different name for passing the children
[10:44:16] <Maxdamantus> So the HoC pattern would be something like: const Foo = ({ Component, children, ...props }) => <Component inner={children} {...props} />; ... <Foo Component={Other}>hello</Foo>;
[10:44:48] <Maxdamantus> can't remember if `{...props}` is the right syntax for passing a props object. Haven't had to do that in a very long time.
[10:45:26] <stagas> that's still called strategy, there's no higher order pattern, that's a React specific term
[10:46:23] <stagas> it's vague to mean both decorator and strategy for some reason idk why
[10:46:26] <Maxdamantus> "higher-order" refers to where something analogous to a function is passed in.
[10:47:07] <Maxdamantus> It's the same concept for example in "higher-order logic", where you can pass in parameterised propositions (ie, relations) as parameters.
[10:47:41] <Maxdamantus> and in FP it involves passing functions (ie, parameterised computations) to other functions.
[10:47:53] <Maxdamantus> "higher-order function"
[10:47:57] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[10:48:13] <stagas> passing a function is called dependency injection, it's an implementation detail, not the pattern we're trying to achieve, you could also dynamically require(someUnknownComponent) the component you needed to use and it's still the same pattern, strategy
[10:49:33] <Maxdamantus> They're all more-or-less different terms used for the same thing, just in different contexts.
[10:50:39] <Maxdamantus> in React, the specific terms for the demonstrated examples of the pattern are "higher-order components" and "render props". You can surely create more variations of the same thing ("higher-order X", "strategy pattern", "dependency injection", whatever you want to call it) within React.
[10:50:51] *** Joins: hax (~hax@69.165.175.67)
[10:50:51] *** Quits: hax (~hax@69.165.175.67) (Changing host)
[10:50:52] *** Joins: hax (~hax@user/hax)
[10:50:56] <Maxdamantus> and they might deserve other names.
[10:51:25] <Maxdamantus> anyway, the terminology isn't very interesting. It's only useful for looking things up.
[10:51:42] <Maxdamantus> Documentation and other sources use the React terms I've used.
[10:51:43] <stagas> Foo = Wrap(Bar) and Foo(Bar) are not the same thing
[10:52:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:53:19] <stagas> react defines HoC as Foo = Wrap(Bar), which is fine, it's called decorator pattern. strategy is when you swap implementations, so Foo(Bar) Foo(Zoo) Bar and Zoo can have the same interface but different implementations, that's the strategy pattern
[10:55:40] <Maxdamantus> Yeah, just like anything higher-order.
[10:55:52] <Maxdamantus> things.map(bar), things.map(zoo)
[10:56:03] <Maxdamantus> same interface, different implementation.
[10:57:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[10:57:58] <Maxdamantus> https://blog.cleancoder.com/uncle-bob/images/fpvsoo.jpg
[10:58:46] <stagas> haha yeah of course actually it's all a stack and a queue
[11:01:19] <stagas> patterns are useful when communicating, "function" and "higher order" are not enough of terms to use when trying to convey what has to happen, "use a higher order function" doesn't mean anything because it can mean all of these things, "use a decorator" means exactly what it says, also "use a strategy" etc.
[11:08:02] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 240 seconds)
[11:23:08] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:23:45] *** Quits: zer0 (~zer0@user/zer0) (Remote host closed the connection)
[11:24:06] *** Joins: lenarhoyt (~lenarhoyt@mail.bfc-net.de)
[11:25:00] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[11:26:58] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:30:08] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[11:31:07] *** Joins: stenno (~stenno@user/stenno)
[11:35:32] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[11:48:06] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[11:48:22] *** Quits: colordrops (~erahhal@2603-8001-9600-7b60-0010-0100-0001-cee7.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:52:26] *** Joins: iomari891 (~iomari891@197.210.70.203)
[11:53:09] <paulcarroty> I think "clean code" concept is a bit outdated now
[11:53:59] *** Quits: thojanssens (~thojansse@182.232.192.216) (Ping timeout: 256 seconds)
[11:55:01] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:56:30] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[11:58:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:59:58] *** Quits: iomari891 (~iomari891@197.210.70.203) (Quit: WeeChat 3.3)
[12:00:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:00:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[12:00:39] *** Joins: bobdobbs (~user@116.251.149.196)
[12:01:12] *** Joins: iomari891 (~iomari891@197.210.71.129)
[12:01:16] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[12:02:54] *** Joins: D4mned (~D1mned@212.101.251.93)
[12:05:59] *** Joins: stenno (~stenno@user/stenno)
[12:09:03] *** Joins: thiras (~thiras@user/thiras)
[12:13:15] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[12:16:19] *** Joins: benni (~benni@ipbcc2c849.dynamic.kabel-deutschland.de)
[12:23:27] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[12:23:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-193.dhcp.inet.fi)
[12:25:30] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:29:31] *** Quits: benni (~benni@ipbcc2c849.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[12:32:15] *** Joins: benni (~benni@p5084a116.dip0.t-ipconnect.de)
[12:38:00] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[12:39:32] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:41:14] *** Joins: pluri (~pluri@user/pluri)
[12:45:42] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f93b:a580:30af:53b2)
[12:45:51] *** Joins: Naan (~Naan@user/naan)
[12:52:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:53:30] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[12:58:44] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:00:28] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Remote host closed the connection)
[13:00:51] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[13:03:20] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[13:09:44] <Swayze> exactly its all about making fancy ascii art with your code
[13:09:54] <Swayze> like a mandlebrot set shape code that generates madelbrots
[13:10:12] <Swayze> or maybe a blonde in a bikini
[13:21:05] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 256 seconds)
[13:22:15] *** Joins: Axy (~Axy@user/axy)
[13:22:59] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[13:29:19] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:32:48] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:33:40] *** Quits: quazimodo (~quazimodo@n1-40-220-128.bla1.nsw.optusnet.com.au) (Ping timeout: 250 seconds)
[13:37:41] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[13:42:21] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[13:42:39] *** Joins: xse (~xse@user/xse)
[13:48:43] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[13:50:49] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[13:51:01] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:55:19] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[14:00:32] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[14:00:34] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[14:09:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:13:04] *** Quits: Sven_vB_ (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[14:14:24] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[14:16:31] <DnzAtWrk> jesus f christ
[14:16:36] <DnzAtWrk> CopyWebpackPlugin has ONE TASK
[14:16:42] <DnzAtWrk> one job
[14:16:52] <DnzAtWrk> and it can't even ignore files
[14:17:57] *** Joins: jazzy2 (~jaziz@user/jaziz)
[14:20:32] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:21:17] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[14:22:56] *** Quits: lenarhoyt (~lenarhoyt@mail.bfc-net.de) (Quit: Client closed)
[14:24:11] *** Joins: stenno (~stenno@user/stenno)
[14:25:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:30:48] <DnzAtWrk> can you force a webpack build to load certain modules at start
[14:31:00] <DnzAtWrk> I use DI to register some entities in a factory
[14:31:23] <DnzAtWrk> I would normally just list those modules in my index file
[14:33:23] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:33:48] *** Joins: pluri (~pluri@user/pluri)
[14:34:10] *** Quits: pluri (~pluri@user/pluri) (Client Quit)
[14:41:09] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[14:45:19] *** Joins: pulse (~pulse@user/pulse)
[14:45:22] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Read error: Connection reset by peer)
[14:52:48] *** Quits: lain6141 (~lain6141@119.224.72.222) (Quit: leaving)
[14:58:31] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:59:04] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:04:02] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[15:04:32] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[15:12:11] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:14:44] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d)
[15:16:51] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[15:21:24] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:25:51] *** Joins: zer0 (~zer0@user/zer0)
[15:26:53] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[15:28:09] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:30:53] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[15:32:07] *** Quits: Stanley (~stanley@d66-183-88-69.bchsia.telus.net) (Quit: ZNC - https://znc.in)
[15:32:32] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[15:36:59] *** Joins: voltage_ (voltage@user/voltage)
[15:41:12] *** Joins: pmercado (~pmercado@186.107.48.199)
[15:44:51] *** Joins: mknod (~mknod@user/mknod)
[15:46:02] <mknod> Hello. Does null always strictly equal null in JavaScript? From what I'm currently troubleshooting I'd say no...?
[15:46:22] *** Quits: SpiceMan (~spiceman@user/SpiceMan) (Quit: WeeChat 2.8)
[15:47:03] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:51:03] <mknod> n> console.log('Foo#42=Bar'.match(/^\s*(.*?)\s*(#[0-9]+)?\s*(?:=(.*))?\s*$/))
[15:51:05] <jellobot> (okay) [   'Foo#42=Bar',   'Foo',   '#42',   'Bar',   index: 0,   input: 'Foo#42=Bar',   groups: undefined ]
[15:51:14] *** Quits: iomari891 (~iomari891@197.210.71.129) (Quit: WeeChat 3.3)
[15:51:17] <mknod> n> console.log('Foo=Bar'.match(/^\s*(.*?)\s*(#[0-9]+)?\s*(?:=(.*))?\s*$/))
[15:51:18] <jellobot> (okay) [   'Foo=Bar',   'Foo',   undefined,   'Bar',   index: 0,   input: 'Foo=Bar',   groups: undefined ]
[15:52:15] <mknod> What the fuck. Why Google and playcode.io says null and not undefined for unmatched groups?
[15:52:18] *** Joins: Stanley (~stanley@d66-183-88-69.bchsia.telus.net)
[15:54:11] <mknod> JSFiddle seems to get it right on the other hand.
[15:55:37] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:59:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[16:00:14] <pavonia> Your group is used with a quantifier, not sure how well-defined behavior this is
[16:02:05] <mknod> Can you elaborate? And how can the interpreter show null but only succeed on === undefined?
[16:04:53] *** Joins: N4buc0- (~N4buc0@187.59.149.196)
[16:05:17] *** Quits: simius (~simius@user/simius) (Ping timeout: 240 seconds)
[16:06:12] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[16:06:19] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f93b:a580:30af:53b2) (Remote host closed the connection)
[16:09:17] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[16:12:10] *** Joins: simius (~simius@user/simius)
[16:13:14] <pavonia> mknod: Every implementation is free to choose a behavior different from the standard, so that's one thing. But I'm not even sure what the standard says about this (...)? case
[16:13:19] *** Joins: Kake (~Kake_Fisk@62.73.202.194)
[16:16:32] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:16:41] <mknod> Ok but ['Foo', null, 'Bar'].some(tok => tok === null) being false is nasty.
[16:17:11] <mknod> I see null, but I have to test for undefined.
[16:17:17] <wyre> hi guys, do you think could I use this timeline library https://timeline.knightlab.com/ with a local spreadsheet or .csv?
[16:18:33] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[16:22:04] <pavonia> mknod: I would consider that a bug in the implementation and report it
[16:24:02] <mknod> pavonia, please feel free to do so. You can test it for yourself on PlayCode. I'm too new to JS to report anything.
[16:24:51] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[16:28:15] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:4c25:9571:1c35:3e29)
[16:32:53] <silly> mknod, to test for both, undefined and null, it's ok to use != or ==
[16:33:23] <mknod> silly, I don't want to test for both, I want a reliable debugging output.
[16:38:23] *** Joins: thojanssens (~thojansse@182.232.192.216)
[16:38:28] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[16:40:34] <silly> pavonia, don't you have to use {} for quantifiers in regex or did you mean the + for "once or more"
[16:40:34] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:41:55] <pavonia> silly: I meant using a quantifier directly on a capturing group
[16:43:45] <OnkelTem> Hi all. Can you recommend a url shorterner?
[16:44:17] <OnkelTem> Except of bitly please, as this crap wants me to login for some reason
[16:45:02] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[16:45:42] <mknod> Seems 100% off-topic to me.
[16:50:41] <OnkelTem> mknod: if I send my link not shortened, you'll squeak
[16:51:59] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[16:52:30] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:57:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:58:36] *** Joins: stenno (~stenno@user/stenno)
[16:58:50] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:02:30] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[17:03:24] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[17:04:06] <austincheney> mknod, null == undefined because both are falsey and the == operator coerces to boolean before performing a comparison.  That is why there is ===
[17:04:28] <mknod> austincheney, sure but it's not the problem I describe.
[17:04:59] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:efce:e92e:a54f:2046)
[17:05:36] <Cork> mknod: https://262.ecma-international.org/5.1/#sec-15.5.4.10
[17:05:43] <Cork> i think that is what your looking for
[17:06:17] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-193.dhcp.inet.fi)
[17:06:37] <Cork> if what you get doesn't match that rule, they aren't following the spec
[17:06:47] *** Quits: N4buc0- (~N4buc0@187.59.149.196) (Ping timeout: 256 seconds)
[17:07:09] <Cork> *then they aren't*
[17:08:37] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[17:09:08] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[17:09:31] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[17:11:26] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:13:48] *** Quits: oscurochu (~oscurochu@37.120.215.102) (Ping timeout: 250 seconds)
[17:17:25] *** Joins: trevors (~trevors@user/trevors)
[17:17:32] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[17:23:42] *** Joins: nomic (~nomic@185.217.117.104)
[17:26:14] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[17:32:51] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:34:55] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[17:37:18] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:4c25:9571:1c35:3e29) (Remote host closed the connection)
[17:37:34] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:4c25:9571:1c35:3e29)
[17:39:39] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[17:39:56] *** Quits: benni (~benni@p5084a116.dip0.t-ipconnect.de) (Quit: Client closed)
[17:48:19] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:49:06] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[17:50:45] *** Joins: trevors (~trevors@user/trevors)
[17:51:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:52:43] *** Joins: stenno (~stenno@user/stenno)
[17:53:15] *** Joins: src (~src@user/src)
[17:56:07] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:57:32] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[17:58:21] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:59:02] *** Joins: pulse (~pulse@user/pulse)
[17:59:03] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d) (Read error: Connection reset by peer)
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:03:48] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[18:05:06] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[18:05:17] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d)
[18:07:20] *** Joins: henry40408 (~henry4040@175.181.155.165)
[18:08:32] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 240 seconds)
[18:16:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:27] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:4c25:9571:1c35:3e29) (Remote host closed the connection)
[18:18:41] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:4c25:9571:1c35:3e29)
[18:23:59] *** Joins: wolfshappen (~waff@irc.furworks.de)
[18:24:12] *** Joins: stenno (~stenno@user/stenno)
[18:25:03] *** Quits: simius (~simius@user/simius) (Ping timeout: 240 seconds)
[18:27:35] <redcat> is there an equivalent of Number.isInteger() for floats rather than having to use extra bloat ?
[18:30:02] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Ping timeout: 240 seconds)
[18:33:00] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[18:33:48] <ThePendulum> do you want to count 1.00 as a float?
[18:38:00] *** Joins: drvsh[m] (~drvshmatr@2001:470:69fc:105::1:6c1e)
[18:38:16] *** Joins: simius (~simius@user/simius)
[18:38:32] <Decker> (n)=>(n===(n-n%1))
[18:47:26] *** Quits: simius (~simius@user/simius) (Read error: Connection reset by peer)
[18:49:25] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[18:50:27] *** Joins: junebug (~junebug@2600:1700:3db0:2540:14c0:3d8e:c030:40e0)
[18:53:57] <buu> ETOOMANYEQUALS
[18:54:42] <buu> (n,a)=>(n<=a)
[18:54:46] <buu> heh
[18:54:46] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 250 seconds)
[18:57:14] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[18:57:41] *** Quits: D4mned (~D1mned@212.101.251.93) (Ping timeout: 256 seconds)
[18:58:34] *** Joins: D4mned (~D1mned@212.101.251.93)
[18:59:06] <Decker> (n)=>(0===(n%1))  // really was too many n's
[18:59:18] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[18:59:37] *** Quits: junebug (~junebug@2600:1700:3db0:2540:14c0:3d8e:c030:40e0) (Ping timeout: 240 seconds)
[19:00:40] *** Joins: junebug (~junebug@2600:1700:3db0:2540:12aa:2fee:7b0a:8e2a)
[19:01:05] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 256 seconds)
[19:01:33] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[19:02:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[19:02:35] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:03:55] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:06:31] *** Joins: sam_1 (~sam_1@87.51.251.118)
[19:07:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:07:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:07:03] *** Joins: wroathe (~wroathe@user/wroathe)
[19:08:32] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 240 seconds)
[19:09:35] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[19:11:01] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[19:13:09] *** Joins: duuude (~user@user/duuude)
[19:13:14] *** Quits: junebug (~junebug@2600:1700:3db0:2540:12aa:2fee:7b0a:8e2a) (Remote host closed the connection)
[19:13:29] <duuude> I want a "file://" page to load stuff from a remote origin in Firefox. How do I do it?
[19:14:04] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[19:14:20] <buu> I have a feeling you can't
[19:14:37] <buu> I mean, if the obvious doesn't work, I bet it's impossible
[19:15:29] <ljharb> redcat: what do you mean for floats
[19:15:40] <ljharb> redcat: all Numbers are floats. typeof x === ‘number’?
[19:16:03] <buu> But are all floats numbers
[19:16:12] <ljharb> Number.isInteger is built in, and polyfills and packages are not bloat.
[19:17:16] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[19:18:04] *** Quits: thojanssens (~thojansse@182.232.192.216) (Read error: Connection reset by peer)
[19:18:10] *** Joins: junebug (~junebug@2600:1700:3db0:2540:fb33:a80c:6390:494)
[19:18:41] <buu> If a number floats
[19:18:44] <buu> is it made of wood?
[19:22:40] *** Joins: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[19:22:47] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[19:27:22] *** Quits: Kake (~Kake_Fisk@62.73.202.194) (Quit: Leaving)
[19:30:59] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[19:31:51] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[19:32:30] <junebug> buu, It's made of 0.333333334 pieces of wood
[19:34:30] <stenno> floats are witches
[19:35:01] <hassoon> this agile methodology thing is getting annoying in jobs interviews
[19:35:15] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 256 seconds)
[19:35:17] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d) (Read error: Connection reset by peer)
[19:36:13] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[19:40:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:40:41] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d)
[19:41:08] *** Quits: peteyboy1 (~peteyboy1@95.169.232.161) (Ping timeout: 250 seconds)
[19:47:58] <buu> getting?
[19:48:39] *** Quits: junebug (~junebug@2600:1700:3db0:2540:fb33:a80c:6390:494) (Quit: Leaving)
[19:50:47] <ljharb> if a number floats it would indeed be a witch
[19:51:13] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Quit: WeeChat 3.1)
[19:51:48] <stenno> yes, thats the proof
[19:52:57] <silly> do we still burn witches?
[19:53:11] <D4mned> sometimes!
[19:54:27] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:54:52] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[19:56:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[19:58:47] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[19:59:29] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:00:27] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:00:43] *** Joins: Crassus (~Crassus@user/crassus)
[20:00:48] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:02:03] *** Joins: trevors (~trevors@user/trevors)
[20:02:32] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[20:03:01] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:05:08] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[20:05:10] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Remote host closed the connection)
[20:05:29] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:05:34] *** Parts: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) ()
[20:06:02] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Read error: Connection reset by peer)
[20:06:22] *** Joins: pulse (~pulse@user/pulse)
[20:06:41] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[20:07:19] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:11:05] *** Joins: ccapndave (~ccapndave@217-162-124-46.dynamic.hispeed.ch)
[20:16:01] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:17:07] *** Joins: duuude (~user@user/duuude)
[20:18:11] *** Quits: ccapndave (~ccapndave@217-162-124-46.dynamic.hispeed.ch) (Quit: Textual IRC Client: www.textualapp.com)
[20:20:17] *** Joins: peteyboy1 (~peteyboy1@95.169.232.161)
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:23:32] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:27:43] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[20:28:22] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 250 seconds)
[20:31:44] *** Joins: bayleaf (~bayleaf@192.249.60.20)
[20:31:50] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:44:44] *** Joins: fef (~thedawn@user/thedawn)
[20:46:39] *** Quits: \mSg (mSg@user/msg/x-0285936) (Ping timeout: 256 seconds)
[20:48:17] *** Joins: konrados (~konrados@user-5-173-147-19.play-internet.pl)
[20:48:31] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[20:48:46] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[20:49:46] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:49:51] *** Joins: Betal (~Betal@user/betal)
[20:50:57] *** Quits: sudomann (~sudomann@2601:543:100:4fc8:dc64:3ab8:7f09:81e5) (Ping timeout: 240 seconds)
[20:51:44] <systemfault> Agile sucks because everyone has their own version... but they're mostly all still better than the old waterfall model
[20:52:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:56:48] <ljharb> silly: do we still punish women for being different? yes, yes we do
[20:56:49] <austincheney> I find agile to be pretty unproductive because it conforms to a schedule of intervals opposed to nonstop effort and then the schedule of intervals can be throw off by a wave of defects
[20:57:15] <ljharb> "agile" is a useful overcorrection to 80s-style software engineering. but it was needed 3-4 *decades* ago, and isn't needed now.
[20:57:38] <ljharb> there is precisely zero danger of anything going back to 6 month release cycles
[20:57:44] <ljharb> * in the absence of agile, i mean
[20:58:05] *** Joins: hackers (~self@user/hackers)
[20:59:35] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:00:06] *** hackers is now known as remote
[21:00:19] <austincheney> I really wish my employer would invest in a largely transparent continuous deployment process.  Instead they do scheduled deployments just like the travel industry.  It is pretty inefficient because there is a lot ritual and process focused solely upon releases that should be always present
[21:00:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:00:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:00:35] *** Joins: wroathe (~wroathe@user/wroathe)
[21:01:49] *** Joins: dimi1947 (~dimi1947@2a02:1388:86:24a0:1da1:f3e:a4df:7512)
[21:01:51] <remote> austincheney: can you use some of your time to work on a project to showcase how this could benefit them?
[21:02:20] <remote> it can be a good way to pass the message
[21:03:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[21:03:43] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[21:04:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:05:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:05:24] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[21:06:47] *** Quits: dimi1947 (~dimi1947@2a02:1388:86:24a0:1da1:f3e:a4df:7512) (Quit: Leaving)
[21:07:05] <austincheney> remote, kind of.  My super duper large employer has no problem with consuming open source absolutely opposes contributing to software publicly.  But I am granted plenty of time to write my software.
[21:07:07] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[21:08:01] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[21:08:13] <redcat> ljharb: surely, Number.isFloat() in stl would be better than n != &()%$££$% and I hope you appreciate there are instances where a distinction needs to be made between an int and a float
[21:08:34] <austincheney> The only way I have found to make initiative work like that is to execise software of my personal computer (because github/gitlab are blocked from the employer network) using my personal internet and then download it onto my work computer via npm
[21:08:40] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[21:09:50] <austincheney> redcat, why would you need Number.isFloat() ?
[21:10:32] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[21:10:54] <austincheney> redcat, JS only has 2 number types and they do not intermingle
[21:11:12] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:11:36] *** Joins: enoq (~enoq@194-208-178-35.lampert.tv)
[21:11:51] <redcat> austincheney, it was for some spreadsheet work whereby we needed to distinguish between integers and floating point numbers
[21:12:02] <redcat> austincheney, what are the 2 number types ?
[21:12:34] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[21:12:58] <austincheney> redcat, 1) Number 2) BigInt  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
[21:13:02] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[21:13:09] <redcat> thanks
[21:13:41] *** Joins: kevindank (~kevindank@c-76-99-182-66.hsd1.de.comcast.net)
[21:14:27] <austincheney> n> 17n / 3n
[21:14:29] <jellobot> (okay) 5n
[21:14:33] <austincheney> n> 17n / 3
[21:14:34] <jellobot> (fail) TypeError: Cannot mix BigInt and other types, use explicit conversions
[21:17:02] *** Joins: duuude (~user@user/duuude)
[21:19:05] *** Quits: D4mned (~D1mned@212.101.251.93) (Quit: Leaving)
[21:22:14] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[21:26:30] *** Quits: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[21:27:43] *** Joins: stenno (~stenno@user/stenno)
[21:28:02] *** Joins: asciibenefactor (~asciibene@modemcable105.68-56-74.mc.videotron.ca)
[21:29:43] *** Quits: asciibenefactor (~asciibene@modemcable105.68-56-74.mc.videotron.ca) (Client Quit)
[21:30:01] *** Joins: utoneq (~utoneq@gateway/tor-sasl/utoneq)
[21:30:42] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:17] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:32] *** Joins: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca)
[21:35:20] *** Quits: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca) (Client Quit)
[21:35:24] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d) (Read error: Connection reset by peer)
[21:36:11] *** Joins: idk (~idk@2804:29b8:505a:f33d:8187:1eee:9f1b:78aa)
[21:37:55] *** Joins: \mSg (mSg@user/msg/x-0285936)
[21:39:00] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Ping timeout: 250 seconds)
[21:39:04] *** Joins: dvanloon (~dvanloon@user/dvanloon)
[21:39:26] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 250 seconds)
[21:40:54] *** Joins: sudomann (~sudomann@2601:543:100:4fc8:5c68:5817:cec9:586d)
[21:41:09] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d)
[21:43:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:43:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:43:48] *** Joins: wroathe (~wroathe@user/wroathe)
[21:44:22] *** Joins: bambanxx (~bambanx@181-163-46-81.baf.movistar.cl)
[21:46:02] *** Quits: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d) (Read error: Connection reset by peer)
[21:46:38] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[21:48:10] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Quit: enoq)
[21:48:25] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[21:48:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:48:32] *** Joins: xse (~xse@user/xse)
[21:48:54] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[21:49:47] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:51:00] *** Quits: utoneq (~utoneq@gateway/tor-sasl/utoneq) (Ping timeout: 276 seconds)
[21:51:32] *** Joins: trafficjam (~qubes@2001:8004:2748:32f4:6ffc:9ddb:e1d7:a07d)
[21:52:10] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:54:10] *** Joins: thelounge5901 (b9dc6606@67.205.143.82)
[21:55:49] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 240 seconds)
[21:56:34] *** Quits: bambanxx (~bambanx@181-163-46-81.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:56:44] <ljharb> redcat: all numbers are floats
[21:56:48] <ljharb> redcat: so i really don't know what you mean
[21:57:07] <ljharb> redcat: `Number.isInteger` is how you determine if it's an integer value (but it's still a float)
[21:57:13] <ljharb> redcat: there's also BigInt, of course, which are real integers
[21:57:21] <ljharb> !number @ redcat
[21:57:22] <jellobot> redcat, The Number type has exactly 2^64 − 2^53 + 3 values, representing the double-precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 2^53 − 2 distinct “Not-a-Number” values of the IEEE Standard are represented as a single special NaN value. : http://www.2ality.com/2012/04/number-encoding.html
[21:59:14] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:59:15] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[22:00:05] *** Joins: bambanxx (~bambanx@181-163-46-81.baf.movistar.cl)
[22:00:57] *** Joins: zebrag (~chris@user/zebrag)
[22:01:19] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[22:04:54] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[22:05:21] *** Quits: thelounge5901 (b9dc6606@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[22:07:45] <ljharb> redcat: also, an integer isn’t *not* a float. being floating point doesn’t require a decimal part.
[22:08:49] *** Joins: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca)
[22:08:53] *** Quits: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca) (Client Quit)
[22:09:22] *** Joins: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca)
[22:12:23] *** Quits: duuude (~user@user/duuude) (Remote host closed the connection)
[22:15:11] *** Quits: asciibenefacto (~asciibene@modemcable105.68-56-74.mc.videotron.ca) (Quit: seeya)
[22:26:34] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[22:27:56] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Quit: Leaving)
[22:29:09] *** Quits: dimino (~dimino@user/dimino) (Quit: Leaving...)
[22:31:13] *** Joins: Akiva (~Akiva@user/Akiva)
[22:32:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c) (Ping timeout: 240 seconds)
[22:32:11] <mknod> .setNumberFormat(numberFormat[pushSpreadsheetLocale][cell.format] || cell.format)
[22:32:13] <mknod> TypeError: Cannot read property '0.###############' of undefined
[22:32:19] <mknod> I was hoping something else.
[22:33:44] <mknod> Can I ask JavaScript not to complain if the (nested) property doesn't exist, and instead default to whatever I want?
[22:35:40] <mknod> hasOwnProperty() to the rescue I guess?
[22:36:23] <mknod> I liked the terseness of foo || bar.
[22:37:13] *** Quits: stagas (~stagas@2a02:587:c43a:e9ef:7954:80f7:e9f1:8e8b) (Remote host closed the connection)
[22:38:16] *** Joins: stagas (~stagas@2a02:587:c43a:e9ef:7954:80f7:e9f1:8e8b)
[22:42:25] *** Joins: duuude (~user@user/duuude)
[22:43:27] <systemfault> mknod: Look at the "optional chaining " and  "nullish coalescing" operators
[22:43:32] <mknod> Basically, I would like to access a tree of any depth without JavaScript erroring out, regardless of its existence.
[22:43:50] <mknod> systemfault, looking into it thanks.
[22:43:55] *** Quits: idk (~idk@2804:29b8:505a:f33d:8187:1eee:9f1b:78aa) (Remote host closed the connection)
[22:43:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:43:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:43:59] *** Joins: wroathe (~wroathe@user/wroathe)
[22:44:14] *** Joins: idk (~idk@ec2-54-87-145-249.compute-1.amazonaws.com)
[22:44:34] *** ruel is now known as lvlinux
[22:45:04] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:55] <mknod> systemfault, wow, on point.
[22:46:02] <austincheney> mknod, as with any tree if the format is not a prior known you will have to perform discovery to see whats there
[22:46:12] <austincheney> this is true of DOM, JSON, file system, whatever
[22:46:27] <mknod> The format is known.
[22:46:36] *** Joins: harpia (~harpia@2804:2aec:205:1400:be2a:c8d5:4566:5dc8)
[22:46:44] <austincheney> mknod, then there is no cause for error
[22:47:03] *** Quits: konrados (~konrados@user-5-173-147-19.play-internet.pl) (Remote host closed the connection)
[22:47:21] <mknod> We may disagree on format then?
[22:47:31] <silly> except if the format is ☐yes ☐no ☑maybe
[22:47:38] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:48:17] *** Joins: konrados (~konrados@user-5-173-147-19.play-internet.pl)
[22:49:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:49:12] *** Joins: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net)
[22:49:42] <mknod> systemfault, so is there a bracket equivalent to ?. ?
[22:49:52] <systemfault> mknod: Same shit?
[22:50:13] *** Joins: trevors (~trevors@user/trevors)
[22:50:32] <austincheney> bracket equivalent?  I am not sure what you mean, perhaps template strings?
[22:50:45] <systemfault> n> const w = {}; w?.[10] ?? 20
[22:50:46] <mknod> numberFormat[pushSpreadsheetLocale][cell.format]
[22:50:46] <jellobot> (okay) 20
[22:50:52] *** Quits: idk (~idk@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[22:50:54] <systemfault> n> const w = { 10: 'lol' }; w?.[10] ?? 20
[22:50:54] <jellobot> (okay) 'lol'
[22:51:19] <mknod> n> console.log(numberFormat?.['en_xUS']?.['dd/mm/yyyxy'] || 'hi');
[22:51:19] <jellobot> (fail) ReferenceError: numberFormat is not defined
[22:51:35] <mknod> well, whatever. It works, thanks a bunch.
[22:51:40] <systemfault> Sweet
[22:52:09] <mknod> ?? will be useful too.
[22:52:27] <systemfault> Yeah, ?? is a bit like || but without the error-prone part.
[22:53:31] <mknod> 0 is a valid number format in Google Sheets so || was definitely wrong here.
[22:53:42] *** Joins: teut (~teut@2401:4900:1c68:6b85:81e5:34bc:8adc:b633)
[22:54:03] <teut> https://polaris.shopify.com/components/forms/text-field  how does this handler works?
[22:54:21] <teut> I means they are not doing event.target.value there
[22:54:35] <teut> also why they are ysing useCallback
[22:54:39] <teut> using*
[22:54:56] <austincheney> mknod, || (logical or) evalutes whether a value is falsey or not as opposed to equality or equivalence
[22:55:15] <austincheney> 0 is falsey
[22:55:28] <mknod> Yeah I figured that out.
[22:56:02] *** Quits: pizdets (~pizdets@183.182.111.203) (Ping timeout: 240 seconds)
[22:56:11] <austincheney> JS does not have a ||| operator for (logical or) of value without type coalescence
[22:56:17] <mknod> This would never happen here because such number formats are not locale dependant, but I'm all for correctness!
[22:56:50] *** Joins: pizdets (~pizdets@183.182.110.188)
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:02:55] *** Joins: audiobirb (~audio@user/audio)
[23:07:16] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:efce:e92e:a54f:2046) (Remote host closed the connection)
[23:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:10:16] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:10:42] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:13:25] *** Joins: Joss (~joss@user/Joss)
[23:15:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[23:15:10] *** Quits: Joss (~joss@user/Joss) (Client Quit)
[23:15:24] *** Joins: Joss (~joss@user/Joss)
[23:15:38] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[23:15:49] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[23:17:55] *** Quits: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[23:18:00] *** Quits: Joss (~joss@user/Joss) (Client Quit)
[23:19:14] *** Joins: summersault (~summersau@179.221.251.36)
[23:20:37] *** Quits: kevindank (~kevindank@c-76-99-182-66.hsd1.de.comcast.net) (Quit: Client closed)
[23:21:01] *** Quits: bambanxx (~bambanx@181-163-46-81.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:22:55] *** Joins: shadow_ (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[23:23:43] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:26:12] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[23:28:33] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[23:29:19] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[23:32:51] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: Lost the game...)
[23:36:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:36:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:36:50] *** Joins: wroathe (~wroathe@user/wroathe)
[23:39:21] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:39:58] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[23:43:54] *** Quits: flannelK (~flannelK@cpe-98-10-225-222.rochester.res.rr.com) (Quit: Leaving)
[23:44:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:47:56] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[23:48:04] *** Joins: Neuromancer_ (~Neuromanc@user/neuromancer)
[23:50:32] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[23:50:44] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 250 seconds)
[23:50:49] *** Neuromancer_ is now known as Neuromancer
[23:51:02] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:52:21] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[23:52:41] *** Joins: summersault (~summersau@179.221.251.36)
[23:56:46] *** Joins: debayer948 (~debayer@cpe-76-169-99-230.socal.res.rr.com)
[23:56:54] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
