[00:00:12] <monochrom> The GUI community has basically given up on concurrency.
[00:01:02] <monochrom> They began with caring a lot yes. So they added a lot of locking and mutexes. Then they found that it was too slow.
[00:01:07] <EvanR> isn't GUI a thing that necessarily must be concurrent
[00:01:11] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930:40c5:3263:848f:5ae1) (Remote host closed the connection)
[00:01:11] <geekosaur> that's only part of it
[00:01:46] <geekosaur> you can lock/mutex the data structures all you want, or go the xcb route and put it all on the programmer
[00:01:52] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930:40c5:3263:848f:5ae1)
[00:01:59] <geekosaur> the connectionb to the X server can't be shared between threads
[00:02:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:02:33] <geekosaur> it's a unix socket. if two threads read from the socket for X server events, who wins?
[00:02:56] <tomsmeding> if two threads _write_ to the socket, what happens?
[00:03:01] <geekosaur> that too
[00:03:40] <geekosaur> in any case the point is you still lose when it comes to concurrency, so there's really no point in trying
[00:03:57] <monochrom> Concurrency was "solved" in the 1970s unix by select-loops. So that's what GUIs do today.
[00:04:06] <EvanR> I'm mildly flabbergasted
[00:04:47] <EvanR> access to some socket needs to be synchronized, so the entire field of research must be single threaded
[00:05:04] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 268 seconds)
[00:05:31] <tomsmeding> I guess it also just... works like this
[00:05:43] <tomsmeding> no one had a pressing enough need for concurrent UI access
[00:05:57] <myShoggoth> I'm very excited to announce that the Haskell Foundation has a DevOps position available, supporting GHC and core open source Haskell projects! 
[00:05:57] <myShoggoth> Please take a look at https://haskell.foundation/careers/devops.html and spread it around. This position is central in the Haskell ecosystem and is an opportunity to make a huge impact.
[00:06:07] <geekosaur> EvanR, at some point you get a server response that mustr be directed to a particular thread
[00:06:13] <geekosaur> which is why I used the read example
[00:06:15] <EvanR> particular files that are open shouldn't be wildly accessed by various threads, but we still have multi-threaded programs that use files?
[00:06:20] <geekosaur> it doesn't happen by magic
[00:06:37] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[00:07:22] <monochrom> Ugh unix presents a lot of non-file things with file-like interfaces, so yeah...
[00:07:51] <EvanR> it's just that gtk+ is a huge thing, and a unix socket is a small thing. So the small thing dictacts the entire nature of the huge thing, is what I'm hearing
[00:07:57] *** Joins: vicfred (~vicfred@user/vicfred)
[00:08:21] <monochrom> The precise wording is stream interfaces but you get what I mean, it talks of reading and writing a handle.
[00:09:11] <tomsmeding> EvanR: I invite you to submit a proposal to change the interface of the X server :p
[00:09:21] <EvanR> I doubt that matters at this point
[00:09:24] <maerwald> O.o
[00:09:24] <tomsmeding> yeah
[00:09:41] <tomsmeding> maybe people began caring when it was too late
[00:09:51] * tomsmeding wonders if wayland does this differently
[00:09:56] * tomsmeding knows ~nothing about wayland
[00:10:36] <maerwald> wayland is great... unless you use nvidia... or use voice control desktop software... or want properly working window icons in your WM, or...
[00:10:56] <tomsmeding> yeah I tried sway, then it wouldn't start because I have nvidia, then I went back to i3
[00:10:57] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:11:13] <monochrom> A select-loop has its convenience. Namely, nothing to lock because until you call select next time, you have monopoly.
[00:11:16] <tomsmeding> (yes, also wouldn't start with the --fuck-you-start-please flag)
[00:11:30] <monochrom> Or rather, no need to think what needs to be locked.
[00:11:51] <tomsmeding> monochrom: isn't that the whole deal with single-threaded concurrency? Not having to deal with two things running at the same time?
[00:11:51] <monochrom> (As usual, the hardest part of programming is to have to think.)
[00:11:59] <monochrom> Yeah!
[00:12:05] <monochrom> Royally convenient.
[00:12:14] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[00:12:18] <tomsmeding> part of why nodejs is so nice to program in (if you don't dislike js as a language)
[00:12:32] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[00:12:50] <monochrom> For the price of very contorted logics, in those cases when multi-threading is easier to follow.
[00:13:55] *** Joins: alx741 (~alx741@157.100.93.160)
[00:15:21] <sm> myShoggoth++
[00:16:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:16:49] *** Joins: cosimone (~user@93-34-132-251.ip49.fastwebnet.it)
[00:17:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[00:19:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[00:25:01] <geekosaur> sigh. I wish…
[00:25:14] <geekosaur> a decade ago I would have jumped at that
[00:26:16] <EvanR> similarly in lambdamoo only 1 object runs at a given time, blocking the server from doing anything else. A timer kills the instance if it takes too long, leaving whatever effects half finished xD. Concurrency!
[00:27:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:27:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:27:55] *** Joins: wroathe (~wroathe@user/wroathe)
[00:29:41] *** Quits: _ht (~quassel@2a02:a468:b619:1:b7fa:be1e:6eb0:5ee1) (Remote host closed the connection)
[00:30:06] <janus> geekosaur: what would you have jumped onto? the devops role?
[00:30:46] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:9996:52da:e8ad:1d27)
[00:30:48] *** Quits: polyphem (~rod@2a02:810d:840:8754:a778:fc55:137:3e0) (Ping timeout: 250 seconds)
[00:31:00] *** polyphem_ is now known as polyphem
[00:31:53] <geekosaur> yeh
[00:31:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:33:44] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:34:18] <geekosaur> sadly I can no longer guarantee availability, becuase while I'm in treatment it's not doing enough :(
[00:34:34] <geekosaur> \(also I "love" the timing of my router falling over)
[00:34:37] *** Joins: alx741 (~alx741@157.100.93.160)
[00:34:43] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Quit: Leaving)
[00:36:34] <polyphem> geekosaur: did your router fall over or did you type at the shell prompt :(){:|:&};:
[00:36:37] <janus> i hope the treatment will work better soon!
[00:37:00] <janus> > :(){:|:&};:
[00:37:01] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[00:37:16] <monochrom> I think it was +++ATH >:)
[00:37:23] <monochrom> err, s/think/thought/ !
[00:38:58] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-40df-b781-ef29-193a.res6.spectrum.com) (Remote host closed the connection)
[00:39:22] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-3c68-95a2-3c50-c518.res6.spectrum.com)
[00:40:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:40:30] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:505d:6d63:cb2e:fb52)
[00:41:36] <polyphem> monochrom: thats modem AT Command AT HangUp iirc
[00:41:46] <monochrom> Yeah!
[00:42:13] <monochrom> So, "did your router fall over, or did you accidentally tell it to hang up" :)
[00:42:42] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[00:42:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:42:43] <polyphem> i did the fork bomb :)
[00:43:09] <monochrom> Oh!
[00:46:37] *** Joins: imalsogr_ (~imalsogre@2601:147:300:f930::b46b)
[00:48:45] <polyphem> i also rebootet my android phone with the fork bomb on termux right now , hehehe
[00:49:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Remote host closed the connection)
[00:49:36] *** Joins: pavonia (~user@user/siracusa)
[00:50:18] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930:40c5:3263:848f:5ae1) (Ping timeout: 250 seconds)
[00:50:51] <geekosaur> no, my router failed to survive a couple of years in storage and occasionally locks up
[00:51:26] <geekosaur> someday I'll save up enough money to replace it (I do have one in reserve but it's 2.4 only so I'd have to be pretty desperate to use it)
[00:51:39] <polyphem> ATZ ATDT 0800-....
[00:52:12] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:52:53] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (Ping timeout: 250 seconds)
[00:53:07] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[00:54:28] <haskellberryfinn> how to understand data definition where there is forall x . on the right hand side
[00:54:44] <haskellberryfinn> and x is not on the left hand side
[00:55:03] <EvanR> one way is via existential quantification, or another way which can be easier is GADT syntax
[00:55:10] <haskellberryfinn> data Fold a b = forall x . Fold a b
[00:55:23] <haskellberryfinn> data Fold a b = forall x . Fold (x->a) b
[00:55:23] <EvanR> e.g. data Fold :: * -> * -> * where
[00:55:42] <davean> geekosaur: Why don't you use the reliable router as a router and your unreliable one mearly as an AP for anything that isn't wired?
[00:55:53] <EvanR>   Fold :: (x -> a) -> b -> Fold a b
[00:56:02] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:56:32] <EvanR> that x doesn't appear in the type constructor is fine, you just can't rely on it later
[00:56:35] <haskellberryfinn> EvanR: so semantically it is meaningful
[00:57:00] <EvanR> the x becomes an unknown type
[00:57:03] <geekosaur> (1) out of outlets on the power strip (2) wouldn't really solve this problem since this computer is also on wifi (can't run a cable across the room)
[00:57:26] <haskellberryfinn> EvanR: and I have to use forall on all type variables that are not on the left hand side
[00:57:41] <davean> Oh I just usually shove a fiber under the baseboard.
[00:57:46] <geekosaur> at some point I'll probably become annoyed enough to switch to the 2.4 router/AP
[00:57:55] <EvanR> the type variables need to be introduced somewhere
[00:58:09] <EvanR> often there's an implicit forall on the very outside
[00:58:15] <EvanR> when you put your own, it takes priority
[00:58:16] <geekosaur> I'm in an apartment, don't get to do things like that
[00:58:21] <geekosaur> sadly
[00:58:26] <haskellberryfinn> EvanR: i see
[00:58:30] <davean> geekosaur: oh, I do it *because* I'm in an appartment
[00:58:48] <davean> I just take a fiber and a spatula and push it under the wall joint, pull it out when I leave
[00:59:17] <ProfSimm> Is implicit returns sometimes more inconvenient than explicit returns
[00:59:32] <geekosaur> at one point I had a long enough cable to run around the room but it wasn't long enough for this room.
[00:59:34] <davean> ProfSimm: what are you talking about?
[00:59:46] <davean> geekosaur: Oh, I just have a 100m long OM5 cable
[00:59:57] <geekosaur> don't I wish
[01:00:17] <ProfSimm> davros: I'm comparing FP to imperative languages with "return" statements
[01:01:15] *** Joins: alx741 (~alx741@157.100.93.160)
[01:01:18] <EvanR> haskell doesn't have return statements implicit or explicit
[01:01:34] <EvanR> the thing called return is something else
[01:01:36] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[01:01:40] <ProfSimm> Well it has implicit return semantics doesn't
[01:01:41] <ProfSimm>  it
[01:01:46] <EvanR> no
[01:01:47] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:01:49] <davean> This doesn't make conceptual sense
[01:02:02] <ProfSimm> :/
[01:02:05] <davean> This shows a deep missunderstanding
[01:02:15] <ProfSimm> All right, please teach me
[01:02:34] <davean> ProfSimm: Ok, why do you think it would have that?
[01:02:36] *** Joins: ystael (~ystael@user/ystael)
[01:02:54] <hololeap> where can I find the docs for cabal-3.2?
[01:03:14] <hololeap> oh, nvm
[01:03:23] <EvanR> ProfSimm, in haskell you like to think you are holding an expression that is being evaluated, lazily
[01:03:24] <davean> https://cabal.readthedocs.io/en/3.2/
[01:03:40] <EvanR> ProfSimm, i.e. 2 + 2 becomes 4, rather than returning 4
[01:03:54] <EvanR> fst (2,2) becomes 2 rather than returning 2
[01:04:14] <davean> its a definition of a value
[01:04:33] <davean> Theres nothing about how its computed, etc
[01:04:48] <EvanR> on some level yes
[01:04:57] <ProfSimm> Well, becomes, returns... 
[01:04:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:05:02] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:05:03] <EvanR> operationally holding a value that is being evaluated helps sometimes
[01:05:17] <davean> ProfSimm: No, no return. The value doesn't "go" anywhere
[01:05:19] <EvanR> the point is that returning from a function is not really related to this
[01:05:24] <davean> it may never even exit
[01:05:26] <davean> *exist
[01:05:27] <EvanR> we're not even talking about functions
[01:05:30] <davean> or exit for that matter
[01:05:32] <polyphem> ProfSimm:  f p = fst p  <=> f p is fst p 
[01:05:35] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[01:05:57] <davean> You could use it to rewrite, you could ... whatever
[01:06:05] <davean> they're mathematical definitions
[01:06:05] <geekosaur> is this where I point them to graph reduction?
[01:06:10] <EvanR> implicit or explicit return from a subroutine implies some kind of call stack 
[01:06:20] <davean> EvanR: it implies a subroutine
[01:06:35] <EvanR> yeah none of which is happening here
[01:06:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:07:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[01:07:54] <davean> ProfSimm: so
[01:08:03] <davean> ProfSimm: You're familiar with inlining for example?
[01:08:20] *** Joins: lrngystdlted^ (~lrngystdl@50-207-160-170-static.hfc.comcastbusiness.net)
[01:08:20] <davean> Whats the return sematnics when we inline a function and reduce instead of actually running it>?
[01:08:30] <davean> what if we never evalaute it?
[01:09:40] <davean> ProfSimm: What are the return semantics of the algebraic law of associativity?
[01:09:49] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[01:09:54] *** Joins: thyriaen (~thyriaen@dynamic-078-055-124-059.78.55.pool.telefonica.de)
[01:10:04] <davean> The question doesn't make sense, does it?
[01:10:08] <[exa]> "implicit return" is the thing from Scheme and R?
[01:10:19] <[exa]> (and julia)
[01:10:22] <EvanR> ruby
[01:10:38] <haskellberryfinn> EvanR: why not add the left-handed variable also on the right-hand side?
[01:11:04] <EvanR> haskellberryfinn, you mean like data Hmm = forall a b . Hmm a b ?
[01:11:04] <haskellberryfinn> EvanR: since it's used by the data constructor anyway
[01:11:23] <EvanR> so if you have a value of type Hmm, you won't know what types are in it
[01:11:40] <haskellberryfinn> EvanR: I mean data F a b = forall x . F (x->b) a
[01:11:58] <[exa]> haskellberryfinn: you want the type to be "complete" and usable (be in kind *) without specifying the `x`, but still valid for many different choices of `x`.
[01:12:20] <EvanR> F a b = forall x a b . F (x -> b) a would be introducing the same variables twice
[01:12:37] <EvanR> F = forall x a b . F (x -> b) a would work but cripple F, kind of
[01:13:06] <haskellberryfinn> data FoldShell a b = forall x . FoldShell (x -> a -> IO x) x (x -> IO b)
[01:13:16] <EvanR> cool
[01:13:28] *** Joins: analognoise (~analognoi@2600:8801:8c26:9e00:985c:5a64:faa:5347)
[01:13:28] <EvanR> everything is accounted for somewhere
[01:14:04] <EvanR> again, try writing that definition with GADT syntax to maybe see if it makes more sense
[01:14:08] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:14:15] <haskellberryfinn> Ok
[01:14:27] <EvanR> it doesn't involve a weird forall 
[01:14:32] <EvanR> (necessarily)
[01:15:03] *** Joins: analognoise1 (~analognoi@185.202.221.105)
[01:15:21] <haskellberryfinn> the forall doesn't bother me. What's weird for me is x doesn't appear on the right hand side
[01:15:41] <EvanR> it does appear on the right
[01:15:50] <haskellberryfinn> i mean on the left
[01:15:58] <EvanR> yes, that's the whole point
[01:16:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:16:26] <EvanR> two values of FoldShell A B could have used different x and then placed in the same list for example
[01:16:28] <haskellberryfinn> anyway [exa] comment makes some sense to me
[01:16:38] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:16:44] <EvanR> which is impossible if x were also in the type constructor
[01:16:56] <haskellberryfinn> i see
[01:17:05] <haskellberryfinn> that's quite flexible
[01:17:10] <EvanR> yeah
[01:17:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:17:32] *** Quits: analognoise1 (~analognoi@185.202.221.105) (Client Quit)
[01:17:49] *** Joins: analognoise1 (~analognoi@185.202.221.105)
[01:18:37] *** Quits: analognoise (~analognoi@2600:8801:8c26:9e00:985c:5a64:faa:5347) (Ping timeout: 240 seconds)
[01:18:48] *** Joins: Pickchea (~private@user/pickchea)
[01:20:06] *** analognoise1 is now known as analognoise
[01:20:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:22:52] *** Joins: alx741 (~alx741@157.100.93.160)
[01:23:37] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[01:25:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[01:26:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:27:03] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 256 seconds)
[01:27:04] *** Quits: imalsogr_ (~imalsogre@2601:147:300:f930::b46b) (Remote host closed the connection)
[01:27:23] *** Joins: iteratee (~kyle@162.218.222.107)
[01:27:36] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::b46b)
[01:29:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:29:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:29:28] *** Joins: wroathe (~wroathe@user/wroathe)
[01:31:54] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::b46b) (Ping timeout: 250 seconds)
[01:32:23] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:65bb:7e4c:2cd0:965)
[01:33:03] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:34:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:34:29] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 268 seconds)
[01:36:14] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:36:35] <ph88> https://www.stackage.org/ down ?
[01:37:15] <maerwald> finally they shut down
[01:37:22] <ph88> haha
[01:37:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-037.wadham.ox.ac.uk) (Remote host closed the connection)
[01:37:41] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:38:01] <EvanR> the page loads for me
[01:38:24] <ph88> ok thanks, maybe slow load on my side
[01:38:30] *** Joins: son0p (~ff@2800:484:1d81:b700::5)
[01:40:35] *** Joins: iteratee (~kyle@162.218.222.107)
[01:41:30] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:44:29] *** Joins: alx741 (~alx741@157.100.93.160)
[01:45:18] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::b46b)
[01:49:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:54:39] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:57:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-037.wadham.ox.ac.uk)
[01:59:29] <Henson> is there a pipes library to be able to do processing in parallel?  Not concurrently with threads, but in parallel using functions in the "parallel" library.
[02:00:12] *** Quits: michalz (~michalz@185.246.204.58) (Remote host closed the connection)
[02:02:22] *** Quits: max22- (~maxime@2a01cb0883359800fbaebbbb888c1e29.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:06:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: Lost terminal)
[02:06:33] *** Joins: alx741 (~alx741@157.100.93.160)
[02:08:00] *** Joins: vysn (~vysn@user/vysn)
[02:08:23] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-3c68-95a2-3c50-c518.res6.spectrum.com) (Remote host closed the connection)
[02:08:46] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-b296-221b-2190-d11e.res6.spectrum.com)
[02:10:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:10:37] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[02:11:13] <ph88> how can i have allow more of the same option in optparse-applicative ?   like myprogram --input file1.txt --input file2.txt
[02:11:32] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:11:59] <maerwald> `many`
[02:12:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:15:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:15:57] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[02:16:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[02:17:09] *** Joins: wroathe (~wroathe@user/wroathe)
[02:18:53] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 268 seconds)
[02:19:14] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:21:32] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 240 seconds)
[02:22:15] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:22:29] <ph88> thanks
[02:22:57] <maerwald> there's also `some` (0 or more)
[02:23:04] <maerwald> eh, one or more
[02:28:10] *** Joins: alx741 (~alx741@157.100.93.160)
[02:32:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:33:18] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:35:36] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[02:35:49] *** Joins: califax (~califax@user/califx)
[02:37:17] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:39:14] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 268 seconds)
[02:42:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:44:14] *** Joins: hololeap (~hololeap@user/hololeap)
[02:47:15] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[02:48:52] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[02:49:05] <Axman6> I've wondered for a while if there's a way to change foldl (the library) so that the step function can be replaced - there are many folds which are implemented by passing around some state which at some point becomes redundant, for example drop (drop :: Natural -> Fold a b -> Fold a b) continues to pass around a Natural after finishing counting down - it would be nice if it could just swap its step function and state to the one it's wrapping 
[02:49:39] <Axman6> maybe that would break a lot of the benefits of the composability of foldl
[02:50:32] *** Joins: iteratee (~kyle@162.218.222.107)
[02:50:42] *** Joins: alx741 (~alx741@157.100.93.160)
[02:51:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:51:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:51:34] *** Joins: wroathe (~wroathe@user/wroathe)
[02:54:02] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 268 seconds)
[02:54:07] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:54:24] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:56:00] <Axman6> The way I'd been thinking about it was more in terms of stream fucion's Step type data Step s a = Yield a s | Skip s | Done. The change I was thinking of would be something like: data Step a s b = Yield b s | Skip s | Done | Update (Fold a b)
[02:56:04] <Axman6> I should play with this...
[02:56:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[02:56:46] * geekosaur wonders how long before you've reinvented conduit or pipes
[02:58:30] *** Joins: lispy (~lispy4@84.69.59.93)
[03:00:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:00:26] <Axman6> well, there's a FoldM too, so I guess that's not too far off
[03:01:07] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[03:03:10] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Quit: WeeChat 3.4)
[03:03:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[03:03:38] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[03:04:31] *** Quits: cosimone (~user@93-34-132-251.ip49.fastwebnet.it) (Ping timeout: 256 seconds)
[03:06:16] <Axman6> I guess you could fake it by using the state variable which contains the function to call, which can be updated
[03:06:22] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[03:10:05] <EvanR> if the state becomes useless and should be dropped, why is there an exposed s type variable
[03:11:15] <EvanR> this is reminding me of KSP / rocketry where you need stages to begin then you need to discard at some point
[03:11:25] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[03:12:19] *** Joins: alx741 (~alx741@157.100.93.160)
[03:13:51] <monochrom> I thought Haskell was not rocket science >:)
[03:14:37] <monochrom> There is an exposed type variable, but you still can't change it in the middle.
[03:14:54] <EvanR> I mean why is it there in the first place
[03:15:15] <EvanR> and not existential, or just not in the type
[03:15:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:16:02] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[03:16:33] <EvanR> imagine an OOP type system where each class must declare the type of its internal state
[03:17:00] <EvanR> i.e. why is it anyone's business
[03:23:05] <monochrom> If the Fold type exposes s, then the programmer who uses Fold has the flexibility of controlling in which scope s is known, outside which scope s is unknown. I.e., where to put the existential quantifier.
[03:23:38] <hpc> s isn't really the state type
[03:23:46] <hpc> if you go all the way down, it ends up being a phantom type
[03:23:56] <EvanR> tricky
[03:24:00] <hpc> maybe it's better to say s is the scope of the statefulness
[03:25:00] <hpc> with RealWorld meaning global state
[03:25:04] <monochrom> In OOP, I thought I had to declare the types of fields in my class, too.  Here:  class Complex { private double realpart; private double imagpart; }
[03:25:56] <hpc> "state" and "scope" both start with s, and s is used in "State s a" too, so that's a bit unfortunate
[03:25:59] <hpc> but there you go
[03:26:05] <EvanR> but is a circle in the complex plane also an ellipse in the complex plane
[03:26:27] <monochrom> haha
[03:27:00] <hpc> it's actually just a rectangle in a hyperbolic complex geometry :D
[03:27:06] <hpc> there are no circles
[03:28:41] <monochrom> Oh yeah let me relate a story.
[03:29:08] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Changing host)
[03:29:08] *** Joins: vgtw (~vgtw@user/vgtw)
[03:30:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Remote host closed the connection)
[03:30:26] <monochrom> A computer graphics prof was explaining to a math prof the fact that raytracing a sphere and raytracing a cube require different algorithms.
[03:30:47] <hpc> this is going to be good
[03:30:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[03:31:02] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:12] <monochrom> The math prof said: But a cube is a sphere under the infinity norm!
[03:31:48] <monochrom> I cried at both the beauty and the irrelevance of that.
[03:32:18] <hpc> someday i hope to be that useless
[03:32:41] <EvanR> google filament has some nice looking pics in its nice looking docs
[03:32:53] <EvanR> including spheres
[03:33:28] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[03:33:56] *** Joins: alx741 (~alx741@157.100.93.160)
[03:35:16] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[03:35:32] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:36:21] <EvanR> realtalk for a second, how the F does Printf work
[03:36:37] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[03:37:17] <monochrom> The f in printf stands for "format string"  <duck>
[03:37:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:37:56] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:38:47] <hpc> EvanR: Printf's instances let you write arbitrarily long chains of a -> b -> c -> ... -> IO ()
[03:38:54] <hpc> (or -> String)
[03:39:11] <hpc> and then the format string just has to have placeholders for a, b, c, etc
[03:39:39] <geekosaur> yeh, PrintfType is pretty freaky
[03:39:42] <hpc> the type determines what format strings work, instead of like in C where the format string would determine if the parameters are valid
[03:40:02] <EvanR> so a bad format string waits until runtime to fail?
[03:40:06] <hpc> yes
[03:40:08] <EvanR> ok
[03:40:13] <hpc> same as in C
[03:40:17] <geekosaur> there's at least one compile-time printf, though
[03:40:21] <hpc> the class just makes it variadic
[03:40:39] <EvanR> in C there is a warning xd
[03:40:57] <hpc> only for static format strings
[03:41:10] <EvanR> which is all there is right. right?
[03:41:13] <geekosaur> there's also a warning if your format string isn't static :)
[03:41:15] <hpc> because libc is... libc, compilers are aware of it like linters are aware of indentation
[03:41:24] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:65bb:7e4c:2cd0:965) (Remote host closed the connection)
[03:41:42] <hpc> but it's not something you can count on, and you can't write a printf that has the same level of checking
[03:41:52] <hpc> whereas you can write Printf yourself
[03:42:37] <hpc> in a language like idris, you could fully validate the format string within the type checker
[03:42:58] <hpc> or maybe with a format string lifted to a type you can do it in haskell too
[03:43:53] <geekosaur> https://hackage.haskell.org/package/typelits-printf
[03:44:30] *** Joins: img (~img@user/img)
[03:45:50] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:46:59] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[03:48:50] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Ping timeout: 250 seconds)
[03:49:17] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:49:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[03:49:51] <jackdk> there's also GCC (and probably LLVM) annotations you can attach to functions that say "this function accepts a printf-style format string
[03:50:18] <geekosaur> right, but you can't define your own format specifiers for e.g. dates
[03:50:48] <hpc> you also can't define your own format types
[03:50:59] <hpc> imagine you're writing a code generator of some sort, and you want a format AST
[03:51:48] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:52:38] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[03:52:39] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[03:55:33] *** Joins: alx741 (~alx741@157.100.93.160)
[03:57:30] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[03:59:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:04:35] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:04:46] <Axman6> EvanR: hpc: in what I was talking about, s is definitely the state type (called x internally in foldl). The reason for Update returing a new Fold is so that the existential s/x inside the Fold can chage
[04:04:49] <Axman6> change*
[04:05:16] *** Quits: thyriaen (~thyriaen@dynamic-078-055-124-059.78.55.pool.telefonica.de) (Quit: Leaving)
[04:05:37] *** Quits: td_ (~td@94.134.91.163) (Ping timeout: 240 seconds)
[04:06:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[04:07:24] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[04:10:05] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[04:10:29] <Axman6> EvanR: The Step type isn't visible externally to anything, the fold would look like: data Fold a b = forall s. Fold (s -> a -> Step a s b) s (s -> b)
[04:11:11] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[04:11:41] <monochrom> Oops. What I said of Fold, should be for Step then.
[04:11:48] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:12:12] <EvanR> so if you erase s from that, you get Mealy, I'm guessing
[04:12:26] <EvanR> where the state could change type or disappear
[04:12:58] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 268 seconds)
[04:14:34] <Axman6> and if Step is ever Update, then whatever is executing the fold will just update its step and done functions when executing its loop
[04:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:16:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:18:19] *** Joins: alx741 (~alx741@157.100.93.160)
[04:19:29] <Axman6> so, drop would look like: drop n (Fold step0 st0 done0) = Fold step n done where step 0 a = Update (Fold step0 (step0 a st0) done0); step n = Skip (n-1); done _ = done0 st0
[04:20:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[04:20:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:21:31] <Axman6> one of the wierd things about foldl for me is that it accumulates these potetnially quite large state structures, which can never get smaller, even in cases where there's no useful information, and the composition of folds ends up having to unpack this extra state all the time
[04:22:15] <Axman6> I think the Done constructor in Step isn't needed actually
[04:22:46] *** Joins: td_ (~td@muedsl-82-207-238-055.citykom.de)
[04:23:12] <Axman6> so... I uess the step function really just becomes: (s -> a -> Either (Fold a b) s)
[04:24:41] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 268 seconds)
[04:25:09] <EvanR> so you either continue folding using the same strategy and state, or you 'snap' and switch to an entirely new fold with potentially different state
[04:25:35] *** Joins: amk (~amk@109.255.169.126)
[04:25:46] <Axman6> yep
[04:26:11] <EvanR> so at least that lets the state get smaller
[04:27:04] <Axman6> yeah exactly, the smaller state is encapsulated in the new Fold
[04:27:12] <Axman6> I shjould try writing this, I'm curious now
[04:27:19] <Axman6> I should try writing this, I'm curious now
[04:27:44] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[04:31:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[04:31:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:34:25] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[04:38:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:38:23] *** Joins: jespada (~jespada@87.74.36.188)
[04:38:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:38:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:38:28] *** Joins: wroathe (~wroathe@user/wroathe)
[04:39:01] *** Joins: alx741 (~alx741@157.100.93.160)
[04:41:40] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:47:21] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[04:47:47] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:04] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[04:52:47] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[04:58:32] *** Joins: notzmv (~zmv@user/notzmv)
[05:00:38] *** Joins: alx741 (~alx741@157.100.93.160)
[05:04:31] *** justache is now known as justGhost
[05:05:03] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:07:01] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::b46b) (Remote host closed the connection)
[05:10:41] <Axman6> hmm, I found a problem with my plan
[05:12:07] <Axman6> In step 0 a = Left (Fold step0 (step0 x0 a) done0), step0 returns (Either (Fold a b) x) no just x so there might need to be some sort of recursive step function to handle the fact that a step can always return _another_ fold
[05:12:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:14:24] <Axman6> actually, I think this is ok...
[05:17:47] <Axman6> yeah I think I've made it work
[05:17:59] <Axman6> and importantly things aren't recursive
[05:18:45] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:21:03] <EvanR> meanwhile I've so far failed to do something like Printf but with a heterolist
[05:22:00] <EvanR> (printf carries a list of Strings around, and I'm trying to carry a list of whatevers)
[05:22:47] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-b296-221b-2190-d11e.res6.spectrum.com) (Remote host closed the connection)
[05:23:10] *** Joins: alx741 (~alx741@157.100.93.160)
[05:23:10] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-af23-4557-ff2b-bd76.res6.spectrum.com)
[05:23:11] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by asdfasf!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[05:23:21] *** Joins: lispy (~lispy4@84.69.59.93)
[05:23:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:25:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-037.wadham.ox.ac.uk) (Remote host closed the connection)
[05:26:28] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[05:27:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:27:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:28:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:28:49] <Axman6> The Applicativer instance is pretty hairy...
[05:28:54] <Axman6> Applicative*
[05:29:43] *** Joins: jackson98 (~bc8147f2@cerf.good1.com)
[05:29:52] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::b46b)
[05:30:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[05:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[05:30:59] *** Joins: xsperry (~xs@user/xsperry)
[05:34:02] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca)
[05:34:05] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:34:15] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[05:35:26] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[05:37:20] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca)
[05:38:28] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca) (Ping timeout: 250 seconds)
[05:38:39] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 256 seconds)
[05:40:08] *** Joins: deadmarshal (~deadmarsh@95.38.230.223)
[05:42:59] *** Quits: mmhat (~mmh@55d400c1.access.ecotel.net) (Ping timeout: 256 seconds)
[05:43:18] <EvanR> was looking at the code for Auto, which contains many constructors. What an Applicative instance
[05:43:32] <EvanR> near the end says "-- I give up!"
[05:44:20] *** Joins: alx741 (~alx741@157.100.93.160)
[05:44:53] *** Quits: deadmarshal (~deadmarsh@95.38.230.223) (Ping timeout: 256 seconds)
[05:49:07] *** Quits: lrngystdlted^ (~lrngystdl@50-207-160-170-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[05:49:59] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[05:50:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:51:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:51:41] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:52:49] *** Quits: xff0x (~xff0x@port-92-193-184-123.dynamic.as20676.net) (Ping timeout: 256 seconds)
[05:54:31] *** Joins: xff0x (~xff0x@2001:1a81:53ac:af00:3dc0:eeb6:6533:2585)
[05:55:52] *** Joins: mmhat (~mmh@55d411b0.access.ecotel.net)
[05:59:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:02:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[06:03:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:03:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[06:04:37] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[06:05:46] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 250 seconds)
[06:06:41] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[06:07:38] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:08:27] *** Joins: alx741 (~alx741@157.100.93.160)
[06:09:37] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[06:09:39] <Axman6> Annoyingly I have ended with a (non-tail) recursive definition of (<*>) which probably defests the purpose of what I was trying to do, though with proper inlining, in the cases where recusions isn't possible, GHC should be able to remove the recursive cases.
[06:09:55] <jackdk> Axman6: rewrite in CPS, defunctionalise the continuation, keep going
[06:10:09] <jackdk> Axman6: https://www.youtube.com/watch?v=wppzFzzD4b8
[06:10:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:11:09] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[06:15:07] <Axman6> https://paste.tomsmeding.com/XnGY0kN6 is what I have so far
[06:16:14] <Axman6> IS there a way to make -ddump-simpl output less noisy?
[06:17:28] <Axman6> CPS may be useful...
[06:19:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:20:02] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[06:20:20] *** Joins: mbuf (~Shakthi@122.173.231.124)
[06:20:41] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[06:23:28] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:b4c3:bc35:ccb7:fa58)
[06:25:57] *** Quits: mmhat (~mmh@55d411b0.access.ecotel.net) (Ping timeout: 240 seconds)
[06:25:59] *** Joins: califax- (~califax@user/califx)
[06:29:09] *** Joins: alx741 (~alx741@157.100.93.160)
[06:30:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:30:34] *** califax- is now known as califax
[06:31:37] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[06:33:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:37:47] *** Joins: razetime (~quassel@49.207.209.26)
[06:38:09] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:39:27] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[06:40:16] *** Joins: mmhat (~mmh@55d41489.access.ecotel.net)
[06:43:10] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[06:43:56] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:45:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:45:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:45:36] *** finn_elija is now known as FinnElija
[06:45:54] *** Quits: td_ (~td@muedsl-82-207-238-055.citykom.de) (Ping timeout: 268 seconds)
[06:47:13] *** Joins: td_ (~td@muedsl-82-207-238-208.citykom.de)
[06:47:17] *** Quits: vglfr (~vglfr@46.96.147.122) (Ping timeout: 240 seconds)
[06:49:53] *** Joins: vglfr (~vglfr@46.96.147.122)
[06:50:19] *** Joins: alx741 (~alx741@157.100.93.160)
[06:53:09] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[06:53:26] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[06:54:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:57:47] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[07:05:48] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[07:09:53] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[07:12:51] *** Joins: alx741 (~alx741@157.100.93.160)
[07:13:16] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[07:14:08] <lionhairdino> :/w
[07:17:22] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:17:37] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[07:20:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:21:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:22:27] *** Parts: lionhairdino (~jacoo@121.131.39.82) (WeeChat 3.4)
[07:23:12] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[07:23:39] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[07:26:23] *** Quits: jackson98 (~bc8147f2@cerf.good1.com) (Quit: quit)
[07:26:28] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: quit)
[07:28:37] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[07:30:24] *** Quits: xsperry (~xs@user/xsperry) ()
[07:30:24] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:30:49] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[07:31:24] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[07:39:28] *** Joins: alx741 (~alx741@157.100.93.160)
[07:43:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:43:52] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:49:20] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[07:50:28] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[07:53:48] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:b4c3:bc35:ccb7:fa58) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:56:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:56:35] <EvanR> if something wants Proxy a, and I have an actual `a' on me, is there a slick way to get a proxy for it
[07:57:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:58:50] *** Quits: mbuf (~Shakthi@122.173.231.124) (Read error: Connection reset by peer)
[08:00:17] *** Joins: mbuf (~Shakthi@122.173.231.124)
[08:01:08] <Axman6> proxyFor :: a -> Proxy a; proxyFor = const Proxy
[08:02:00] *** Joins: alx741 (~alx741@157.100.93.160)
[08:02:05] <EvanR> gotta define this myself, got it
[08:03:33] *** Joins: xsperry (~xs@user/xsperry)
[08:04:12] <ephemient> :t let a = "" `asProxyTypeOf` proxy; proxy = Proxy in proxy
[08:04:13] <lambdabot> error:
[08:04:13] <lambdabot>     Variable not in scope: asProxyTypeOf :: [Char] -> Proxy t0 -> t1
[08:05:06] <ephemient> hmm that doesn't seem to work anyway, oh well
[08:05:21] <awpr> % let f Proxy =  "" in f (pure True)
[08:05:21] <yahb> awpr: ""
[08:06:10] <monochrom> Oh! Smart. pure :: a -> Proxy a
[08:06:32] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[08:08:17] <EvanR> duuuuude
[08:09:00] <EvanR> "stupid applicative tricks"
[08:10:38] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:10:53] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[08:11:37] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::b46b) (Remote host closed the connection)
[08:12:49] <ephemient> % pure @Proxy $! undefined
[08:12:49] <yahb> ephemient: Proxy
[08:13:31] <ephemient> % const Proxy $! undefined
[08:13:31] <yahb> ephemient: Proxy
[08:13:40] <ephemient> % const () $! undefined
[08:13:40] <yahb> ephemient: *** Exception: Prelude.undefined; CallStack (from HasCallStack):; error, called at libraries/base/GHC/Err.hs:75:14 in base:GHC.Err; undefined, called at <interactive>:54:13 in interactive:Ghci29
[08:13:48] <ephemient> huh.
[08:14:04] <awpr> oh, I think I see
[08:14:16] <awpr> % show (undefined :: Proxy Int)
[08:14:16] <yahb> awpr: "Proxy"
[08:14:47] <awpr> yeah, a lazy Show instance
[08:16:14] <EvanR> being strict here would be especially silly xd
[08:16:18] <ephemient> interesting. so show () forces while show Proxy doesn't
[08:16:44] <EvanR> fails due to missing value of which you should not have anyway!
[08:16:49] <EvanR> unlike ()
[08:17:44] <ephemient> you can have a value of type of Proxy
[08:17:54] <EvanR> forcing () for other purposes should work, even if in any case I can think of it could get away with returning a new () without doing any work
[08:19:11] <EvanR> () lets you manipulate the value system while Proxy lets you manipulate the typeclass system? xD
[08:20:25] <monochrom> I think () has "deriving Show" which is pretty strict.
[08:22:37] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[08:23:01] <ephemient> > show (undefined :: (a, b))
[08:23:02] <lambdabot>  "*Exception: Prelude.undefined
[08:23:09] <ephemient> I guess that's consistent with other tuples
[08:25:00] <ephemient> % show (undefined :: Solo a)
[08:25:00] <yahb> ephemient: ; <interactive>:56:20: error: Not in scope: type constructor or class `Solo'
[08:25:17] <ephemient> % show (undefined :: Data.Tuple.Solo a)
[08:25:18] <yahb> ephemient: ; <interactive>:57:20: error: Not in scope: type constructor or class `Data.Tuple.Solo'
[08:25:18] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 250 seconds)
[08:28:37] *** Joins: alx741 (~alx741@157.100.93.160)
[08:28:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:21] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 256 seconds)
[08:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.230.223)
[08:31:06] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:54a1:8815:7a95:cd26)
[08:31:39] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[08:33:16] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:34:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:42:05] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::b46b)
[08:43:47] *** Joins: cyphase (~cyphase@user/cyphase)
[08:48:43] *** Quits: razetime (~quassel@49.207.209.26) (Read error: Connection reset by peer)
[08:51:23] *** Joins: alx741 (~alx741@157.100.93.160)
[08:56:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:59:59] *** Joins: ardell (~ardell@user/ardell)
[09:02:19] *** Joins: lispy (~lispy4@84.69.59.93)
[09:05:27] *** Quits: lispy (~lispy4@84.69.59.93) (Client Quit)
[09:08:58] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[09:14:08] *** Joins: alx741 (~alx741@157.100.93.160)
[09:18:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:19:54] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[09:24:17] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::b46b) (Ping timeout: 240 seconds)
[09:26:18] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[09:28:14] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[09:33:49] *** Quits: deadmarshal (~deadmarsh@95.38.230.223) (Ping timeout: 256 seconds)
[09:35:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:36:40] *** Joins: alx741 (~alx741@157.100.93.160)
[09:38:00] *** Joins: Akiva (~Akiva@user/Akiva)
[09:40:33] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:41:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:41:48] *** Joins: deadmarshal (~deadmarsh@95.38.230.223)
[09:43:16] *** Joins: michalz (~michalz@185.246.204.40)
[09:46:20] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[09:46:28] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[09:48:45] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[09:49:05] *** Joins: nightbreak (~nightbrea@victors-mbp.dyndns.rice.edu)
[09:49:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[09:55:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:59:10] *** Joins: alx741 (~alx741@157.100.93.160)
[10:00:53] *** Quits: nightbreak (~nightbrea@victors-mbp.dyndns.rice.edu) (Quit: Signing off for now...)
[10:04:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:04:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:04:21] *** Joins: wroathe (~wroathe@user/wroathe)
[10:08:03] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[10:08:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:08:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:13:29] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[10:17:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:21:25] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:23:35] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[10:24:37] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[10:25:57] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 256 seconds)
[10:26:43] *** Joins: alx741 (~alx741@157.100.93.160)
[10:27:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[10:28:54] *** Joins: dobblego (~dibblego@122-199-1-30.ip4.superloop.com)
[10:28:54] *** Quits: dobblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[10:28:54] *** Joins: dobblego (~dibblego@haskell/developer/dibblego)
[10:31:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:32:33] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 256 seconds)
[10:32:33] *** dobblego is now known as dibblego
[10:38:30] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[10:45:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:48:53] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[10:49:29] *** Joins: alx741 (~alx741@157.100.93.160)
[11:02:56] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:06:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:08:41] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:08:57] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:09:17] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:09:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:10:03] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:13:13] *** Joins: dut (~dut@user/dut)
[11:14:46] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[11:16:26] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:16:53] <dminuoso> What's your bar for uploading something to hackage?
[11:17:27] <dminuoso> I have this module that would expose basic domain name parsing, a simple domain name pattern language and some simple matching primitives along - and I now need it in a secondary project.
[11:17:42] <dminuoso> And I cant help but wonder whether this is genuinely something worth putting on hackage.
[11:18:48] <dminuoso> In the past I would have simply put it inside a git repo and depended upon that, but it's a hassle to update these (since you would always have pinned commit hashes), and it brings a variety of other ergonomic issues.
[11:18:54] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[11:19:25] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Quit: Ping timeout (120 seconds))
[11:19:43] *** Joins: Goodbye_Vincent (~Goodbye_V@freakshells.net)
[11:19:56] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 245 seconds)
[11:20:07] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:20:07] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:20:07] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:20:11] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[11:20:11] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 252 seconds)
[11:20:11] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[11:20:21] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 245 seconds)
[11:20:21] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 245 seconds)
[11:20:21] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 245 seconds)
[11:20:44] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 252 seconds)
[11:21:18] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[11:21:18] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[11:21:18] *** Joins: mcfilib (sid302703@user/mcfilib)
[11:21:19] *** Joins: jackdk (sid373013@cssa/jackdk)
[11:21:19] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[11:21:22] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[11:21:32] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:21:54] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Ping timeout: 260 seconds)
[11:22:01] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[11:22:23] <davean> dminuoso: Its probably worth it
[11:23:18] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[11:23:20] *** Joins: idnar (sid12240@debian/mithrandi)
[11:23:23] *** Joins: obviyus (sid415299@user/obviyus)
[11:24:18] *** Joins: alx741 (~alx741@157.100.93.160)
[11:26:11] <[exa]> dminuoso: avoid giving it a overly generic name as people often do, then it's all okay I'd say
[11:26:51] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:26:55] <dminuoso> Overly generic in the sense of abstract? Or would you detest a dns-utils package?
[11:27:21] *** Joins: cfricke (~cfricke@user/cfricke)
[11:27:31] <[exa]> domain-parser is wrong, simple-domain-name-patterns is better, except a bit long
[11:27:47] <dminuoso> domain-patterns is actually a nice fit. :)
[11:28:11] <[exa]> I wanted to avoid the effect where people call their package 'regex' and implement one completely inextensible view of regex, no idea if it has a name
[11:28:12] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:28:39] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:29:14] <[exa]> domain-patterns is okay I'd say, people who do the same in a different way have a lot of space to differentiate the name
[11:29:51] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:30:09] <[exa]> maybe domain-name-patterns even, to avoid math geeks who patternmatch function domains lol
[11:30:35] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:30:47] * ski . o O ( `integral-domain-patterns' )
[11:31:28] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:31:58] <[exa]> I didn't really want to open that box of ideas but here we go.
[11:33:53] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:35:01] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:36:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:36:16] *** Joins: chele (~chele@user/chele)
[11:36:25] *** Joins: alp (~alp@user/alp)
[11:38:06] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[11:39:17] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:505d:6d63:cb2e:fb52) (Ping timeout: 240 seconds)
[11:39:25] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (Ping timeout: 256 seconds)
[11:39:26] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[11:45:00] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:45:56] *** Joins: alx741 (~alx741@157.100.93.160)
[11:46:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Remote host closed the connection)
[11:46:57] *** Joins: Major_Biscuit (~MajorBisc@c-001-017-008.client.tudelft.eduvpn.nl)
[11:47:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:48:17] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:49:25] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:50] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:50:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:50:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:52:05] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:58:22] *** Joins: fendor (~fendor@91.141.44.222.wireless.dyn.drei.com)
[11:59:39] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:00:04] <mjrosenb> has anyone seen this before: https://gist.github.com/mjrosenb/b949e67f57ef80b6f3a4602f75eb9c83 ?
[12:02:01] <dminuoso> mjrosenb: https://github.com/NixOS/nixpkgs/issues/93446
[12:02:03] <dminuoso> Potentially related
[12:02:29] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:02:34] *** Joins: dsrt^ (~dsrt@50-207-160-170-static.hfc.comcastbusiness.net)
[12:03:15] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[12:04:03] <dminuoso> mjrosenb: What GHC version are you using?
[12:06:15] *** Quits: deadmarshal (~deadmarsh@95.38.230.223) (Ping timeout: 256 seconds)
[12:07:03] *** Joins: alx741 (~alx741@157.100.93.160)
[12:07:08] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:7a00:67ce:f137:ad93)
[12:08:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:08:31] <mjrosenb> ghcjs 8.10
[12:09:46] *** Joins: akegalj (~akegalj@141-136-204-193.dsl.iskon.hr)
[12:11:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[12:12:12] *** Quits: analognoise (~analognoi@185.202.221.105) (Read error: Connection reset by peer)
[12:15:32] <dminuoso> mjrosenb: Ah!
[12:15:40] <dminuoso> mjrosenb: https://github.com/haskell-foundation/foundation/blob/master/foundation/foundation.cabal#L199
[12:15:41] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:15:47] <dminuoso> I think you're tripping into that cabal flag here.
[12:16:04] <dminuoso> That makes this package unbuildable, the rest is just strange diagnostic interaction between cabal and nix
[12:16:23] <dminuoso> Or rather, not the package is unbuildable but that particular component
[12:16:27] <dminuoso> Which is why you get the diagnostic:
[12:16:33] <dminuoso> Setup: No executables and no library found. Nothing to do.
[12:18:45] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:48] <mjrosenb> it seems like that is saying that foundation itself isn't buildable on ghcjs
[12:19:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:20:05] <dminuoso> Yes.
[12:21:19] <mjrosenb> which seems kind of strange, since from what I can tell, there isn't much that would break
[12:21:56] <dminuoso> https://github.com/haskell-foundation/foundation/commit/e96a6d4b90ba416c6c7f2cc598d635f6e58d71ad
[12:21:58] <dminuoso> https://github.com/vincenthz/haskell-pkg-guidelines/blob/master/support.md
[12:22:12] <dminuoso> https://github.com/haskell-foundation/foundation/issues/486
[12:23:30] <dminuoso> If you think can build it, you can override this with overrideCabal
[12:23:35] <dminuoso> At your own peril. :)
[12:25:32] <dminuoso> Question: When two packages expose the same module, can I diambiguate the package in an import statement?
[12:25:37] <dminuoso> Im not seeing anything in the Haskell standard at least.
[12:26:00] <dminuoso> I recall there was some way to specify, is this some GHC extension?
[12:26:29] <jackdk> dminuoso: https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/package_qualified_imports.html#extension-PackageImports ?
[12:26:42] <dminuoso> jackdk: Thanks, thats it. :)
[12:26:52] *** Joins: ubert1 (~Thunderbi@p200300ecdf099416f339e1e74dd0e9e7.dip0.t-ipconnect.de)
[12:27:00] <mjrosenb> I'm also questioning why this is getting pulled in at all
[12:27:35] <mjrosenb> https://gist.github.com/mjrosenb/085708d232d3b16701371b561e1563ed
[12:27:57] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:29:47] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:31:46] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[12:32:07] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[12:32:07] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[12:32:13] *** Quits: michalz (~michalz@185.246.204.40) (Ping timeout: 240 seconds)
[12:32:16] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[12:32:20] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[12:32:41] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[12:32:43] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[12:32:54] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[12:32:54] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Read error: Connection reset by peer)
[12:34:10] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[12:34:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[12:34:41] <wmacmil> are there any blog posts/resources roughly about "python for haskell programmers"?
[12:35:09] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[12:35:52] <wmacmil> like what are indensible resources to learning/using python if you're used to haskell : i see that typing and dataclasses modules seem to be haskelly, but is there a general way to approach the transition
[12:36:20] <dminuoso> wmacmil: Not that I have seem
[12:36:24] <dminuoso> It's an unusual transition
[12:36:33] <wmacmil> indeed, an unfortunate one too
[12:36:34] <mjrosenb> ahhh, memory depends on foundation for testing.
[12:36:41] <dminuoso> mjrosenb: Ah yes
[12:37:10] <dminuoso> mjrosenb: Then you can avoid it by lib.dontCheck
[12:37:14] <dminuoso> Probably should go upstream
[12:37:34] *** Joins: alx741 (~alx741@157.100.93.160)
[12:38:17] <mjrosenb> I know I've used lib.dontCheck before, but have completely forgotten how it is supposed to be used.
[12:38:34] <dminuoso> mjrosenb: Depends on the ergonomics of what you're doing.
[12:39:03] <dminuoso> See https://github.com/NixOS/nixpkgs/issues/26561
[12:39:05] <mjrosenb> I'm ok turning off tests entirely within this project.
[12:39:26] <dminuoso> But essentially you want to have an overlay that fixes this inside haskellPackages
[12:39:29] <dminuoso> mjrosenb: That wont work
[12:39:37] <dminuoso> You have to do this for this component
[12:39:56] *** Joins: michalz (~michalz@185.246.204.58)
[12:41:03] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:54a1:8815:7a95:cd26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:41:11] <dminuoso> mjrosenb: Anyway, you want to use either `haskellPackages.extend` or `haskellPackages.override` inside an overlay for your nixpkgs.
[12:41:21] <dminuoso> And inside those you do something like:
[12:41:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:41:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:42:20] <dminuoso> let extendedPkgs = pkgs.extend (self: super: { haskellPackages = super.haskellPackages.override (lib: { overrides = (selfHS: superHS: { memory = lib.dontCheck superHS.memory; })})})
[12:42:30] <dminuoso> Or rather
[12:43:06] <dminuoso> let extendedPkgs = pkgs.extend (self: super: { haskellPackages = super.haskellPackages.override (lib: { overrides = (selfHS: superHS: { yourPackage = superHS.callCabal2nix "foo" ./foo {}; memory = lib.dontCheck superHS.memory; })})}) in extendedPkgs.yourPackage
[12:43:11] <dminuoso> Might be some typos in there.
[12:43:31] *** Quits: cynomys (~cynomys@user/cynomys) (Remote host closed the connection)
[12:43:34] <mjrosenb> hrm, I'm currently using extend
[12:43:34] <dminuoso> Alternatively you can move the memory fix into some regular overlay for your nixpkgs
[12:43:45] <dminuoso> mjrosenb: Be sure to give https://github.com/NixOS/nixpkgs/issues/26561 a read
[12:43:48] <mjrosenb> I may be able to make this work.
[12:44:12] <mjrosenb> I did.  I suspect I'll be consulting it again before I get this working :-)
[12:44:16] <dminuoso> Heh :)
[12:44:43] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:46:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:47:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d)
[12:47:04] <mjrosenb> how do I get lib?
[12:47:40] <mjrosenb> ahh, it is bound in a lambda.
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[12:48:41] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:e5fb:7a43:8199:8861)
[12:48:58] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[12:50:15] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:601e:b34d:f58c:b5e8)
[12:50:28] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:51:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:cceb:625b:cb9d:590d) (Ping timeout: 240 seconds)
[12:51:33] *** Joins: vysn (~vysn@user/vysn)
[12:53:23] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[12:58:45] *** Joins: deadmarshal (~deadmarsh@95.38.230.223)
[13:00:19] *** Joins: alx741 (~alx741@157.100.93.160)
[13:03:52] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: m4lvin)
[13:04:18] *** Joins: m4lvin (~m4lvin@w4eg.de)
[13:07:00] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[13:08:03] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:08:09] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[13:11:19] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[13:11:40] <mjrosenb> bummer.
[13:11:41] <mjrosenb>       ghcjs = super.haskell.packages.ghcjs.override {
[13:11:41] <mjrosenb>         overrides = import ./haskell/packages/ghcjs options self;
[13:11:43] <mjrosenb>       };
[13:11:46] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[13:13:03] <mjrosenb> is where I'm pulling it from, so it looks like `override` was already used once, whic I believe means I can't extend ghcjs to fix memory?
[13:13:55] *** Joins: Erutuon (~Erutuon@user/erutuon)
[13:15:49] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:16:45] <jackdk> https://www.irccloud.com/pastebin/ukRt6y2O/shell.nix mjrosenb I don't have time to dig in and help, I'm sorry, but here's an example of replacing and reconfiguring a bunch of haskell packages I wrote for someone else at one point. Note the doJailbreak call - you can use dontCheck in the same way
[13:25:48] *** Joins: alx741 (~alx741@157.100.93.160)
[13:28:51] <mjrosenb> jackdk: thanks, I think the issues I'm having at this point are with the upstream nixexpr
[13:30:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:30:50] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[13:35:46] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[13:36:16] *** Joins: nunggu (~q@user/nunggu)
[13:41:50] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:42:49] <dminuoso> mjrosenb: That's the beauty of these overrides, you dont need to extend ghcjs
[13:42:58] <dminuoso> mjrosenb: Roughly you'd do:
[13:43:10] <dminuoso> uh
[13:43:15] <dminuoso> mjrosenb: Can you share the entirety of that nix expression?
[13:47:07] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[13:48:20] *** Joins: alx741 (~alx741@157.100.93.160)
[13:49:00] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[13:49:57] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[13:50:08] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:50:16] *** Joins: rusrushal13 (~rusrushal@2409:4056:e95:fe3c:29c9:f5b0:286b:2495)
[13:50:43] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:51:24] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[13:51:48] *** Joins: nunggu (~q@user/nunggu)
[13:53:21] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:57:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:59:02] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[14:00:40] *** Joins: romesrf (~romes@bl8-111-202.dsl.telepac.pt)
[14:00:48] <romesrf> hey everyone
[14:01:02] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[14:01:10] <romesrf> if f :: a -> m a, how would you rewrite this without the do notation: mapM (\(ref, rec) -> do rec' <- updateRecord rec; return (ref, rec')) records
[14:01:21] <romesrf> sorry, replace updateRecord with f*
[14:01:31] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[14:01:56] <[exa]> you can always resort to >>= and more lambdas (basically expand the `do`)
[14:02:28] *** Quits: xff0x (~xff0x@2001:1a81:53ac:af00:3dc0:eeb6:6533:2585) (Remote host closed the connection)
[14:02:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:02:32] <romesrf> right :), that's probably best than whatever way i can get rid of bind (>>=) right
[14:02:45] *** Joins: xff0x (~xff0x@2001:1a81:53ac:af00:4616:9444:a1c8:27cf)
[14:02:59] <[exa]> @undo do {rec' <- updateRecord rec; return (ref, rec'); }
[14:02:59] <lambdabot> updateRecord rec >>= \ rec' -> return (ref, rec')
[14:03:07] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:03:28] <romesrf> cool cool
[14:03:36] <romesrf> how would you go about not using bind?
[14:03:38] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:03:51] <dminuoso> romesrf: https://gist.github.com/dminuoso/a42206fdd79b79ab73dc2eccc8f6bc53
[14:04:02] <[exa]> you may fmap the (ref,) inside the monad
[14:04:09] <romesrf> nice!
[14:04:24] <dminuoso> Also, traverse looks nicer than mapM :)
[14:04:29] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[14:04:35] <[exa]> ah yes there we go :]
[14:04:52] <dminuoso> romesrf: Note that this needs the extension TupleSections enabled.
[14:05:00] <romesrf> got it :)
[14:05:36] <dminuoso> romesrf: Also, if you insist on writing it densly, you can also use for
[14:05:38] <romesrf> dminuoso: traverse vs mapM?
[14:06:04] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:06:04] <romesrf> dminuoso: i do enjoy the dense notation, if i could learn to get rid of the lambda here it would be even cooler hahahaha
[14:06:14] <dminuoso> romesrf: https://gist.github.com/dminuoso/a42206fdd79b79ab73dc2eccc8f6bc53
[14:06:23] <dminuoso> I would probably opt for the second
[14:06:52] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Quit: Leaving)
[14:07:42] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[14:08:10] <romesrf> I see so :) but i was wondering why traverse over mapM (is it because mapM is specific for [] in the base?)
[14:08:18] *** Joins: __monty__ (~toonn@user/toonn)
[14:08:26] <romesrf> while traverse is over any traversable?
[14:08:35] <[exa]> romesrf: mapM is basically traverse that _requires_ that the type there is monad
[14:08:39] <dminuoso> mapM is arbitrarily constrained to Monad rather than Applicative
[14:08:45] <romesrf> understood!
[14:08:56] <dminuoso> but also because I have a certain mind model of Traversable
[14:08:56] <[exa]> usually that's not required at all (certainly not required for functionality of mapM)
[14:09:07] <dminuoso> So I like seeing the word `traverse` since it makes me think of traversables
[14:09:14] <dminuoso> The word `map` just triggers `Functor` in my mind.
[14:09:22] <romesrf> thank you, then I will use `traverse` because you have indeed convinced me haha
[14:09:51] <dminuoso> Also on the off chance that mapM will be removed someday, you have one fix less for future GHCs.
[14:10:11] <dminuoso> (Its removal was discussed but forgotten a while ago)
[14:11:04] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[14:15:52] *** Joins: alx741 (~alx741@157.100.93.160)
[14:16:10] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:17:09] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:17:18] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[14:18:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:18:27] *** Lord_of_Life_ is now known as Lord_of_Life
[14:18:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:19:31] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:23:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[14:25:20] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:25:24] <dminuoso> Im writing a package and I want an instance whose presence conditionally depends on a cabal flag.
[14:25:42] <dminuoso> Is there a way to induce a CPP macro in the cabal package guarded by a flag?
[14:26:08] <dminuoso> Background is for development purposes it'd be nice to have a morally wrong and bug inducing Read instance
[14:26:14] <geekosaur> gcc-options: -D... ?
[14:26:23] <dminuoso> geekosaur: Ah, I see.
[14:26:27] <dminuoso> Thanks
[14:29:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:29:20] <lortabac> dminuoso: maybe you can put the instance to a separate module to avoid CCP
[14:29:27] <lortabac> CPP
[14:29:58] <mjrosenb> dminuoso: I don't know enough about miso, and miso's nix tree to know why it is pulling in a library that it shouldn't.
[14:30:31] <dminuoso> lortabac: Mmm, unsafe orphan instances?
[14:30:50] <dminuoso> That has more bug potential if this library was used inside yet another library
[14:31:04] <dminuoso> That I can definitely see leading to incoherence
[14:31:56] <mjrosenb> dminuoso: https://gist.github.com/mjrosenb/c319971baa1a48b02fe647c7d740caf5
[14:31:57] <lortabac> dminuoso: you can load that module conditionally through a cabal flag
[14:32:07] <geekosaur> doesn't seem much worse to me than putting it in the same module, you'd just be conditionally including the orphans module instead of conditonally including code
[14:32:51] <lortabac> it's not worse but it can be inconvenient if your formatter doesn't support CPP or something like that
[14:34:58] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[14:36:32] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[14:37:29] *** Joins: alx741 (~alx741@157.100.93.160)
[14:39:49] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[14:46:01] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[14:46:23] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:51:24] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 250 seconds)
[14:55:44] *** Quits: deadmarshal (~deadmarsh@95.38.230.223) (Ping timeout: 250 seconds)
[14:58:37] *** Quits: romesrf (~romes@bl8-111-202.dsl.telepac.pt) (Ping timeout: 240 seconds)
[14:59:40] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[14:59:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:00:25] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:601e:b34d:f58c:b5e8) (Remote host closed the connection)
[15:02:26] *** Joins: ksqsf (~user@2001:da8:d800:602:8943:50ae:a41b:213e)
[15:03:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[15:03:57] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[15:04:06] *** Joins: alx741 (~alx741@157.100.93.160)
[15:05:24] *** Joins: hololeap (~hololeap@user/hololeap)
[15:15:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:15:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:15:59] *** Joins: wroathe (~wroathe@user/wroathe)
[15:18:12] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:21:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[15:25:25] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:30:27] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2055:673d:3155:da63)
[15:35:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk)
[15:35:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[15:36:39] *** Joins: alx741 (~alx741@157.100.93.160)
[15:41:31] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[15:43:02] *** Joins: zaquest (~notzaques@5.130.79.72)
[15:43:49] <__monty__> Does anyone have some experience with SBV? I'm having a hard time figuring out how to refer to previously introduced variables. `sInteger` with the same string introduces a new variable with an appropriate suffix. https://hackage.haskell.org/package/sbv-8.17
[15:44:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:45:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:45:53] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[15:50:28] *** Joins: thevishy (~Nishant@2405:201:f005:c007:39ad:8b3b:de67:f2a2)
[15:52:55] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[15:53:08] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[15:53:58] *** Joins: chele_ (~chele@user/chele)
[15:55:58] *** Quits: chele (~chele@user/chele) (Ping timeout: 250 seconds)
[15:56:07] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[15:57:16] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[15:58:13] <tomsmeding> __monty__: no idea, but aren't you supposed to use this instance? https://hackage.haskell.org/package/sbv-8.17/docs/src/Data.SBV.Core.Model.html#line-1345
[15:59:00] *** Joins: chele__ (~chele@user/chele)
[16:01:25] *** Quits: chele_ (~chele@user/chele) (Ping timeout: 256 seconds)
[16:01:30] <dminuoso> Gah, Im slowly beginning to feel the pain of attoparsec. This backtracking is completely impeding my ability to produce legible diagnostics.
[16:01:31] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[16:01:57] <dminuoso> As soon as you have some `many` outside, you turn all errors into no endOfInput errors.
[16:02:19] <dminuoso> Maybe I should just bite the bullet and switch to megaparsec. :(
[16:02:58] *** Quits: vglfr (~vglfr@46.96.147.122) (Read error: Connection reset by peer)
[16:03:18] *** Joins: alx741 (~alx741@157.100.93.160)
[16:03:59] *** Joins: vglfr (~vglfr@46.96.147.122)
[16:05:20] <__monty__> tomsmeding: Yes. And it's all pretty nice if you have the full model specification in one do-block. But I'm building the model up incrementally so I need a way to refer to previously defined symbolic variables.
[16:06:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:06:57] <__monty__> dminuoso: If you do some comparative benchmarks and a usability report, i.e., are the error reporting features worth the performance impact (if there is one), would be awesome : )
[16:07:32] <geekosaur> would be interesting. last time I checked the megaparsec folks were claiming to have caught up with attoparsec
[16:07:35] <tomsmeding> __monty__: have you tried just storing the 'SBV Integer' somewhere?
[16:10:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:10:32] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[16:10:51] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[16:13:54] *** Joins: alp (~alp@user/alp)
[16:15:37] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[16:16:37] *** chele__ is now known as chele
[16:16:45] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[16:16:58] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[16:19:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[16:20:41] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:20:54] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[16:21:11] <dminuoso> geekosaur: My previous with megaparsec was that the ruthless use of INLINE pragmas on almost every binding was that in degenerate cases the simplifier would spend 2 minutes for a single function...
[16:21:46] <dminuoso> Which was quite painful for my use case, since based on the use style at the time it blew up compilation time of our package from a minute to about 15.
[16:22:08] <dminuoso> Not that this is relevant here, but it didn't leave me quite convinced about the internal quality
[16:23:30] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:23:33] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[16:23:43] <dminuoso> Perhaps the only way megaparsec can be made performant, is by ensuring GHC sees the entire transitively used code in a single compilation unit?
[16:24:54] *** Joins: alx741 (~alx741@157.100.93.160)
[16:28:02] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[16:28:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:28:50] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[16:33:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:34:46] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[16:36:17] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[16:36:37] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[16:36:42] *** Quits: ksqsf (~user@2001:da8:d800:602:8943:50ae:a41b:213e) (Ping timeout: 250 seconds)
[16:37:32] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:40:57] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 240 seconds)
[16:41:03] *** Joins: fendor_ (~fendor@77.119.167.8.wireless.dyn.drei.com)
[16:41:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk) (Remote host closed the connection)
[16:41:36] *** Joins: burnsidesLlama (~burnsides@client-8-74.eduroam.oxuni.org.uk)
[16:43:17] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[16:43:55] *** Quits: fendor (~fendor@91.141.44.222.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:45:25] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:45:32] *** Quits: burnsidesLlama (~burnsides@client-8-74.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[16:46:44] *** Quits: mmhat (~mmh@55d41489.access.ecotel.net) (Quit: WeeChat 3.4)
[16:46:44] *** Joins: alx741 (~alx741@157.100.93.160)
[16:49:47] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:49:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:49:55] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[16:50:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[16:52:13] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[16:52:13] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[16:55:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Ping timeout: 240 seconds)
[16:55:41] <mcgroin> what is that tild?        fmap (\ ~(a, s') -> (f a, s')) $ runStateT m s
[16:55:47] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[16:55:50] <dminuoso> mcgroin: It's a irrefutable pattern.
[16:56:00] <dminuoso> Sometimes inaccurately called a lazy pattern
[16:56:19] <mcgroin> ok let me check
[16:58:07] *** Joins: slack1256 (~slack1256@191.126.99.75)
[16:58:45] <dminuoso> % case True of ~False -> 1 -- mcgroin 
[16:58:45] <yahb> dminuoso: 1
[16:59:13] *** Joins: deadmarshal (~deadmarsh@95.38.230.223)
[16:59:25] <geekosaur> "Matching the pattern ~apat against a value v always succeeds. The free variables in apat are bound to the appropriate values if matching apat against v would otherwise succeed, and to ⊥ if matching apat against v fails or diverges. (Binding does not imply evaluation.)" (https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-580003.17)
[17:00:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[17:00:07] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[17:02:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:06:28] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[17:06:47] *** Joins: alx741 (~alx741@157.100.93.160)
[17:09:51] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:13:00] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[17:15:21] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:18:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:22:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[17:25:12] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[17:27:01] *** Joins: alx741 (~alx741@157.100.93.160)
[17:27:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[17:29:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:33:13] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[17:33:47] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[17:34:21] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 250 seconds)
[17:35:08] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:36:14] <janus> do all of you think it would be a good idea to have an official deprecation notice for libraries maintained by hvr? because i'd like to point people to something official such that the last packages can be moved off of hslogger/MissingH/cryptohash
[17:37:07] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[17:37:25] *** Quits: xff0x (~xff0x@2001:1a81:53ac:af00:4616:9444:a1c8:27cf) (Ping timeout: 240 seconds)
[17:38:53] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:39:50] <geekosaur> janus, talk to the HF first, I believe there are already plans to get tose moved to new maintainers
[17:40:01] <geekosaur> sorry, to the CLC I think
[17:40:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[17:40:10] <maerwald> that's not a HF matter
[17:40:57] <maerwald> there's no such thing as an official deprecation notice... either take over the package or fork it
[17:41:06] <maerwald> for taking over packages contact trustees
[17:41:26] <maerwald> CLC is not involved in maintaining anything outside of base
[17:42:33] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[17:43:07] <janus> but i want these packages to die, nobody is interested in maintaining them. there are already alternatives.
[17:43:31] <janus> hvr took these over from John Goerzen anyway, they have been on life support for years
[17:44:47] <maerwald> that's not how hackage works
[17:45:13] <janus> what is not how hackage works? you mean packages are never deprecated?
[17:45:26] <maerwald> you can take over the package and put a deprecation notice yourself, I guess... 
[17:45:40] <maerwald> that also goes via trustees
[17:45:54] <maerwald> and that intention should probably be communicated
[17:46:27] <geekosaur> looks like I misremembered anyway, wasn't hvr's packages. https://mail.haskell.org/pipermail/libraries/2022-January/031582.html
[17:46:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:47:01] <dminuoso> What happened to hvr?
[17:47:21] <janus> geekosaur: cryptonite/memory is a very different case since Vincent has claimed he is actually working on GHC 9.2 support
[17:47:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:47:30] *** Joins: alx741 (~alx741@157.100.93.160)
[17:47:33] <geekosaur> I have no clue, but he's been absent for close to a year now
[17:47:42] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[17:47:42] <maerwald> geekosaur: Vincent replied to that and not very amused
[17:47:54] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[17:48:42] *** noctux is now known as kuyatzu
[17:48:59] *** kuyatzu is now known as noctux
[17:50:09] <geekosaur> not even updating his ghc ppa
[17:50:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:51:32] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 240 seconds)
[17:54:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[17:55:14] <maerwald> it would probably be interesting to have something like a CRC (crypto committee), but you'd have to find competent people first
[17:56:51] <geekosaur> probably stakeholders
[17:57:13] <maerwald> huh?
[17:57:38] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:57:47] *** Joins: slac63614 (~slack1256@186.11.82.162)
[17:58:03] *** Joins: xff0x (~xff0x@2001:1a81:53ac:af00:4616:9444:a1c8:27cf)
[17:59:22] <maerwald> I mean people who actually know something about crypto
[17:59:54] *** Quits: slack1256 (~slack1256@191.126.99.75) (Ping timeout: 250 seconds)
[18:00:32] <maerwald> not "I had a course back in uni" :p
[18:01:13] *** Joins: fef (~thedawn@user/thedawn)
[18:01:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:01:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[18:03:29] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[18:06:37] *** Joins: alx741 (~alx741@157.100.93.160)
[18:07:42] <janus> seems to me like most of the cryptocurrency people (they ought to know about cryptography, no?) make their own bindings
[18:07:50] <janus> for example secp256k1 bindings: https://github.com/ElementsProject/simplicity/blob/master/Haskell/Core/Simplicity/LibSecp256k1/FFI.hs
[18:08:13] <dminuoso> I wish we'd just abolish cryptonite and get back to openssl bindings. :(
[18:08:27] *** Joins: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5)
[18:08:36] <maerwald> dminuoso: well, linking openssl into your binary is a pita
[18:08:49] <maerwald> feel free to create mbedTLS bindings
[18:09:17] <dminuoso> Sure, but just like I'd wish for for a trip to the ISS one day, one can dream no?
[18:09:33] <maerwald> it's cold up there I think 
[18:10:25] <bjourne> can you get cabal to install packages system-wide?
[18:10:33] <maerwald> bjourne: v1-install
[18:10:34] <dminuoso> bjourne: Yes and no.
[18:10:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:10:38] <maerwald> or use Setup.hs directly
[18:10:42] <dminuoso> bjourne: Even with v2-install they are installed system-wide... sort of..
[18:10:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:11:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:12:08] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[18:12:23] <dminuoso> maerwald: Im not sure what is worse. That cryptonite is written by someone who is not a reknown crypographer with an experience in implementing robust side-channel free crypo on well researched (with respect to side channels) languages and tools...
[18:12:36] <maerwald> xD
[18:12:44] <dminuoso> Or that it seems mostly unmaintained, with nobody even willing to pick it up..
[18:12:51] <maerwald> I'm more concerned about half the haskell community not caring about that fact
[18:12:52] <yushyin> one can re-use the same package env with --package-env=
[18:13:05] <maerwald> so much for haskellers care about correctness
[18:13:09] <maerwald> no, they care about their types
[18:13:10] <dminuoso> And before someone misunderstands this, Im not questioning HVRs expertise as an expert Haskell programmer...
[18:13:36] <dminuoso> But writing good Haskell code and writing safe cryptographic code are two very separate tasks. :(
[18:13:46] <janus> dminuoso: nobody _can_ pick it up since he explicitly disagreed with that. and he claims he is working on 9.2 support. so i would not flat out say 'unmaintained'
[18:14:03] <dminuoso> janus: Fair.
[18:14:07] <maerwald> dminuoso: https://github.com/GaloisInc/haskell-tor/issues/23#issuecomment-179598343
[18:14:13] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) The Power Rangers use BitchX. Shouldn't you?)
[18:14:15] <maerwald> "In this particular case, I, personally, am comfortable offloading the responsibility for a lot of timing-level attacks to the author of the cryptonite library"
[18:14:18] <maerwald> well....
[18:14:36] <janus> (my previous message referred to cryptonite/memory/foundation, not hvr)
[18:14:50] <dminuoso> maerwald: Yeah I read that, but the argument starts all wrong.
[18:15:10] <maerwald> I think they are completely wrong
[18:15:41] <maerwald> And Haskell is in fact not the right language for this. Types mean very little in this context, unless they are algorithmic proof and even that's maybe 30% of your issues
[18:15:43] <dminuoso> I mean there's so many published papers on securely implementing cryptographic schemes on specific compilers and languages...
[18:17:11] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[18:17:36] <maerwald> I'm not even confident that bindings eliminate all those issues. Doesn't that depend on the API?
[18:17:57] <maerwald> A secret could leak into the Haskell codebase
[18:18:33] <maerwald> so many reasons I don't touch any of that with a 10 foot pole
[18:18:52] <dminuoso> maerwald: Ive read enough cryptopapers to be seriously scared, there's so many non-obvious mistakes.
[18:18:55] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:19:18] <dminuoso> The combination of efficient and side-channel-free elliptic curve cryptography is ridiculously hard.
[18:19:41] <maerwald> My practical experience is limited to writing a toy implementation of NTRUEncrypt. That was enough for me to figure out I don't know sh*t about those things
[18:19:56] <dminuoso> You essentially have to resort to specifically picked algorithms that, when executed on traditional van neumann machines, will run under constant times, dont leak things into caches..
[18:20:04] <dminuoso> *specific implementations
[18:20:31] <dminuoso> In the presence of super scalar processors that each year introduce new optimizations, defeating old assumptions
[18:20:51] *** Joins: nvdp (~nvdp@80-100-97-100.ip.xs4all.nl)
[18:21:20] *** Joins: cheater (~Username@user/cheater)
[18:21:39] <maerwald> there's still hope project everest will... maybe some day... turn out to be usable
[18:22:44] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[18:22:57] *** Quits: polyphem (~rod@2a02:810d:840:8754:9996:52da:e8ad:1d27) (Ping timeout: 240 seconds)
[18:24:03] *** Joins: polyphem (~rod@2a02:810d:840:8754:f5a2:d787:2125:a747)
[18:24:16] <maerwald> until then, we just trust some random dude on hackage
[18:25:22] *** Quits: nvdp (~nvdp@80-100-97-100.ip.xs4all.nl) (Remote host closed the connection)
[18:27:04] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:27:46] *** Joins: alx741 (~alx741@157.100.93.160)
[18:28:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[18:30:06] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:30:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:30:59] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:31:57] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[18:32:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:22] <dminuoso> Like, if you do the naive thing for EC point multiplication, you have a guaranteed side-channel attack. Unless you use a very careful implementation of a particular sliding window method.. or use montgomery ladder..
[18:32:33] <dminuoso> But you dont know this unless you read the right crypto papers of course.
[18:32:51] <dminuoso> I hate crypto
[18:32:53] <dminuoso>  :(
[18:33:11] *** Joins: futty14 (~futty14@c90-143-137-255.bredband.tele2.se)
[18:34:35] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:36:22] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:39:56] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[18:40:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:40:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:40:21] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:51] *** Quits: polyphem (~rod@2a02:810d:840:8754:f5a2:d787:2125:a747) (Ping timeout: 268 seconds)
[18:45:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:48:29] *** Joins: alx741 (~alx741@157.100.93.160)
[18:50:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:52:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:52:47] <futty14> fn 1 = 1
[18:52:48] <futty14> fn n = sum $ map fn [(n `div` 2)..n-1]
[18:52:48] <futty14> I had this question as an OLD exam question. I can now see that it is Narayana-Zidek-Capell numbers.
[18:52:49] <futty14> map fn [(n `div` 2)..n-1]
[18:52:49] <futty14>  I understand that the fn above does the exact same sequence of calculation beginning from head of the list and adds another f(n+1)... f(n+2) to each successing list element. That is why the function call map is hanging, because there are just too many repetitive recursive calls that occupies stack frames.
[18:52:50] <futty14> I have tried but cant find a way to store fn(n) and use that to find fn(n+1), that is the next element of the list.  How would you solve this?
[18:54:43] <sshine> futty14, memoization with an IntMap?
[18:55:41] <futty14> sshine I would preferably want to solve it with an accumulator or an auxiliary function.
[18:56:05] <sshine> futty14, I'd keep the IntMap in an accumulated parameter.
[18:56:13] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[18:57:31] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:59:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:59:28] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:01:02] *** Quits: xff0x (~xff0x@2001:1a81:53ac:af00:4616:9444:a1c8:27cf) (Ping timeout: 240 seconds)
[19:02:14] *** Joins: xff0x (~xff0x@2001:1a81:53ac:af00:ba25:4d71:4d47:a3a5)
[19:02:28] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[19:03:16] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:03:23] *** Joins: polyphem (~rod@2a02:810d:840:8754:ab25:19d5:5fa5:69d5)
[19:04:15] <ski> futty14 : if you have a max you want, then make a (recursively defined, immutable) array ?
[19:04:16] <futty14> sshine I am getting the error "Data constructor not in scope:" despite using import Data.IntMap (IntMap). Why might this be?
[19:04:27] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 250 seconds)
[19:04:35] <ski> *data* constructor ?
[19:05:21] <futty14> @ski
[19:05:21] <lambdabot> Maybe you meant: wiki src ask
[19:05:58] <ski> perhaps at this point you should show some snippet of code
[19:06:37] <futty14> ski hmm, I think you are referring to data [] = [] | a : [a]. A recursive definition like this? The problem is that, at the time we had to write this, we were just beginning with HOF so this is a bit out of scope.
[19:06:40] <janus> futty14: IntMap won't be a data constructor anyway because you construct with something like https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-IntMap-Strict.html#v:fromList
[19:06:44] *** Joins: mmhat (~mmh@55d41489.access.ecotel.net)
[19:06:49] <ski> no
[19:06:56] <ski> (not referring to lists)
[19:07:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:07:32] <janus> but IntMap doesn't have a data constructor named IntMap, surely. so if the error message says such a constructor wasn't imported, something is already wrong, no?
[19:08:04] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:08:26] <geekosaur> IntMap's data constructors are hidden, and even if they weren't the import statement only imports the type constructor
[19:08:49] <janus> i agree
[19:09:11] <ski> > let fib12 i = arr ! i; ix = (0,12); arr = listArray ix [case i of 0 -> 0; 1 -> 1; _ -> fib12 (i-1) + fib12 (i-2) | i <- range ix] in fib12 12
[19:09:12] <lambdabot>  144
[19:09:33] <ski> futty14 : that's a recursively defined array, doing (top-down) dynamic programming
[19:10:05] *** Joins: alx741 (~alx741@157.100.93.160)
[19:12:41] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:12:41] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:12:46] *** Quits: dsrt^ (~dsrt@50-207-160-170-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[19:13:31] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Client limit exceeded: 20000)
[19:13:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:16:09] *** Quits: akegalj (~akegalj@141-136-204-193.dsl.iskon.hr) (Quit: leaving)
[19:16:39] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Client limit exceeded: 20000)
[19:18:03] *** fendor_ is now known as fendor
[19:18:14] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.3)
[19:19:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:20:13] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[19:20:26] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[19:20:49] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[19:21:27] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[19:23:57] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[19:25:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:25:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:26:42] <shapr> somewhat on topic: Dr Rob Stewart is looking for a postdoc and PhD students for graph reduction hardware research: https://haflang.github.io/
[19:26:43] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[19:26:43] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[19:26:53] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[19:27:16] <shapr> If you've been interested in the Reduceron ( https://www.cs.york.ac.uk/fp/reduceron/ ) and the like, that's where this is going.
[19:27:38] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:27:53] *** Quits: futty14 (~futty14@c90-143-137-255.bredband.tele2.se) (Quit: Client closed)
[19:28:15] *** Joins: futty14 (~futty14@c90-143-137-255.bredband.tele2.se)
[19:29:09] *** Logio_ is now known as Logio
[19:29:13] *** Joins: alx741 (~alx741@157.100.93.160)
[19:29:33] *** Joins: ardell (~ardell@user/ardell)
[19:31:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:32:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:32:40] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[19:34:28] *** Joins: slack1256 (~slack1256@191.126.227.197)
[19:35:18] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:36:45] *** Quits: slac63614 (~slack1256@186.11.82.162) (Ping timeout: 256 seconds)
[19:38:15] *** Joins: lispy (~lispy4@84.69.59.93)
[19:39:19] *** Joins: ahammer (~ahammer@120.230.113.41)
[19:43:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:43:57] *** Quits: ahammer (~ahammer@120.230.113.41) (Ping timeout: 240 seconds)
[19:45:02] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:45:33] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[19:47:17] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[19:47:29] *** Joins: max22- (~maxime@2a01cb08833598006a0c8f5f388a6d4e.ipv6.abo.wanadoo.fr)
[19:47:48] *** Joins: ahammer (~ahammer@120.230.113.41)
[19:49:23] *** Quits: mbuf (~Shakthi@122.173.231.124) (Quit: Leaving)
[19:49:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:49:55] *** Joins: alx741 (~alx741@157.100.93.160)
[19:52:07] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:52:10] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[19:52:10] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[19:52:10] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:55:05] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[19:55:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:37] *** Quits: ahammer (~ahammer@120.230.113.41) (Ping timeout: 240 seconds)
[19:55:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:55:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:59:03] *** Joins: RFV89 (~RFV@171.red-88-13-191.dynamicip.rima-tde.net)
[19:59:07] <haskellberryfinn> how to build and run a single .hs file? for quick test purpose
[19:59:32] <haskellberryfinn> I've installed the necessary lib via cabal install --lib --env . a_library
[20:00:59] *** RFV89 is now known as RFV
[20:01:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:03:45] *** Quits: rusrushal13 (~rusrushal@2409:4056:e95:fe3c:29c9:f5b0:286b:2495) (Ping timeout: 256 seconds)
[20:04:09] *** Joins: slac74418 (~slack1256@186.11.82.162)
[20:04:11] <tomsmeding> haskellberryfinn: it seems if you just use 'ghc yourfile.hs' in the directory where you put that .ghc.environment file, it works?
[20:05:13] <geekosaur> for a quick test if you're not worried about performance you can run it in bytecode mode: runghc file.hs
[20:05:40] *** Quits: RFV (~RFV@171.red-88-13-191.dynamicip.rima-tde.net) (Quit: Client closed)
[20:06:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:07:57] *** Quits: slack1256 (~slack1256@191.126.227.197) (Ping timeout: 240 seconds)
[20:08:25] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:08:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:09:02] *** Joins: alx741 (~alx741@157.100.93.160)
[20:09:38] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:10:33] *** Joins: Guest65 (~Guest65@2a02:8109:a380:b58:917e:d1c3:3da5:dce7)
[20:10:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:10:55] <haskellberryfinn> great
[20:11:24] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:11:26] *** Quits: alx741 (~alx741@157.100.93.160) (Client Quit)
[20:11:53] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[20:12:30] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:13:01] *** Joins: vysn (~vysn@user/vysn)
[20:14:15] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:14:51] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[20:15:01] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[20:15:13] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:16:58] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:18:49] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:18:49] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[20:19:22] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:20:23] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:7a00:67ce:f137:ad93) (Quit: WeeChat 2.8)
[20:20:52] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:24:16] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:24:43] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:27:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:30:49] *** Joins: slack1256 (~slack1256@191.126.227.197)
[20:31:25] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:32:52] *** Quits: slac74418 (~slack1256@186.11.82.162) (Ping timeout: 250 seconds)
[20:32:53] *** Quits: vglfr (~vglfr@46.96.147.122) (Read error: Connection reset by peer)
[20:32:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:33:40] *** Joins: vglfr (~vglfr@46.96.147.122)
[20:34:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:36:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:36:21] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:38:09] <justsomeguy> Also, if you have stack you can write a stack script -- https://www.fpcomplete.com/haskell/tutorial/stack-script/ -- in particular check out the "Script interpreter" section. This is more complicated, but lets you add packages and specify a version of GHC.
[20:38:22] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:38:26] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[20:38:40] <geekosaur> it also makes "cabal install --lib" unnecessary
[20:39:00] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[20:39:10] <geekosaur> (which is good as it pollutes the Haskell environment and can cause version conflicts)
[20:39:25] <geekosaur> cabal also has a script mode but it's less well developed
[20:41:07] *** Joins: RFV (~Thunderbi@171.red-88-13-191.dynamicip.rima-tde.net)
[20:42:49] *** Joins: RFV_ (~RFV_@171.red-88-13-191.dynamicip.rima-tde.net)
[20:43:02] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 240 seconds)
[20:43:16] *** Quits: mmhat (~mmh@55d41489.access.ecotel.net) (Ping timeout: 250 seconds)
[20:43:38] <sclv> i don't think cabal's script mode is less developed in any particular way?
[20:43:43] <sclv> except maybe ghc specification?
[20:43:47] <sclv> curious what you consider is missing
[20:43:55] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[20:44:00] *** Quits: RFV_ (~RFV_@171.red-88-13-191.dynamicip.rima-tde.net) (Client Quit)
[20:44:14] *** Joins: RFV__ (~RFV__@171.red-88-13-191.dynamicip.rima-tde.net)
[20:44:33] <yushyin> caching the binary
[20:45:16] <yushyin> it will recompile and relink every time
[20:45:18] <c_wraith> what binary? it definitely caches any packages it needs to build. And it doesn't compile the script it's running...
[20:45:45] <c_wraith> Oh, unless you mean the fakepackage thing
[20:45:52] *** Joins: Akiva (~Akiva@user/Akiva)
[20:47:10] <monochrom> I don't mind recompiling the script, in the context that if I use "cabal run" it's because I have a casual, easy to recompile script in the first place.
[20:47:41] <monochrom> I do mind the "everything is up to date" message to stdout.
[20:48:11] <monochrom> I understand the dilemma of "but where do you want it sent?!" and I have no good solution.
[20:48:28] <c_wraith> What about the dilemma of "why do you want it sent at all?"
[20:48:35] <monochrom> Unless "add more cmdline options!" is a good solution :)
[20:49:23] <c_wraith> It seems like an oversight from sharing code with cabal build
[20:49:28] <monochrom> Oh, this is going to be the great debate between 1970s UI design and 21st century UI design.
[20:50:04] <monochrom> In the 1970s unix philosophy, no news is good news, if there is no error, the program must output nothing.
[20:50:20] <c_wraith> Like, I can definitely see a reason to have a command line option to add it.
[20:50:30] <monochrom> In the modern philosophy, reporting on progress and success is all the rage.
[20:50:57] <c_wraith> maybe it can write to 3 by default. :)
[20:51:39] <geekosaur> what good is writing to stdaux? :þ
[20:51:55] <geekosaur> (I don't think even windows has that any more)
[20:51:59] <c_wraith> it won't show up the terminal. :P
[20:52:14] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:52:18] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[20:52:29] <monochrom> Windows? Oh! Send to PRN:  >:)
[20:52:57] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[20:53:14] <c_wraith> the real issue is that text streams are a horrible way to present structured information.  "this is from the build tool" and "this is from the subprogram you asked the build tool to run" is not a distinction unix is designed to handle
[20:53:16] <monochrom> Perhaps send to syslog or Window's equivalent of syslog... >:)
[20:53:25] *** Joins: vicfred (~vicfred@user/vicfred)
[20:53:38] <c_wraith> windows, on the other hand, has tools for it!  cmdlets are pretty cool
[20:53:51] <geekosaur> so fd 4 :þ
[20:54:25] <geekosaur> (somehow I think my reference when whizzing high overhead)
[20:54:35] <geekosaur> *went
[20:54:55] <yushyin> c_wraith: don't know if anything has changed recently, but for me it used to recompile my script every time, linked it every time into a binary and executed it
[20:55:10] <geekosaur> \back in the DOS days fd 3 was stdaux aka COM1: and fd 4 was stdprn aka LPT1:
[20:55:56] <EvanR> you got your serial port and your parallel port, what else could you want
[20:56:32] <monochrom> parallel bundle of multiple serial ports >:)
[20:56:39] <polyphem> EvanR: PCSpeaker :)
[20:56:49] <monochrom> Oh haha I forgot the speaker
[20:57:17] <geekosaur> no problem, just plug some wires into the right parts of the parallel port and make another one :)
[20:57:17] <EvanR> important
[20:57:37] *** Joins: mmhat (~mmh@55d40230.access.ecotel.net)
[20:57:40] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[20:59:01] *** Joins: lechner (~lechner@debian/lechner)
[21:05:26] <polyphem> http://jubatian.com/articles/building-an-lpt-dac/
[21:06:33] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:ccf7:da52:f075:1ff9)
[21:06:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[21:17:11] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[21:17:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[21:19:12] <random-jellyfish> is the state monad the equivalent of a Moore machine?
[21:20:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:21:39] <EvanR> moore machines take input and produce output, but s -> (a,s) just produces output (if iterated on its own state)
[21:22:33] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[21:22:52] <EvanR> State s a is basically s -> (a,s)
[21:23:30] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:e5fb:7a43:8199:8861) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:24:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:24:27] <random-jellyfish> newtype Moore in out = Moore ( in->s->(out, s) )
[21:24:40] <random-jellyfish> would that be a valid definition of a Moore type?
[21:24:45] <EvanR> looks closer
[21:24:58] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:25:57] <EvanR> out is basically what wikipedia is calling an "entry action", a possible action on entering a state
[21:26:43] <EvanR> I'm not sure if this technically makes any sense
[21:26:55] <EvanR> the old and new state are accessible to the function
[21:27:59] <EvanR> there are more things in haskell functions and earth than dreamt of in first year compsci/engineering xD
[21:29:26] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:29:30] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[21:30:37] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[21:30:43] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[21:32:50] <random-jellyfish> true
[21:33:13] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[21:39:10] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[21:39:28] <monochrom> Also take a look at https://hackage.haskell.org/package/machines .  In Data.Machine.Moore, take a look at unfoldMoore; in Data.Machine.Mealy, take a look at unfoldMealy.
[21:40:03] <monochrom> It looks like in->s->(out, s) is Mealy there.
[21:40:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:40:37] <monochrom> I like Wikipedia, but I trust edwardk more than I trust Wikipedia. :)
[21:41:17] <EvanR> the reference for Data.Machine.Moore goes to wikipedia xD
[21:41:27] <EvanR> an authority loop
[21:41:52] <EvanR> the trust levels are incomparable 
[21:42:06] <EvanR> or both infinite, depending
[21:42:30] *** Quits: futty14 (~futty14@c90-143-137-255.bredband.tele2.se) (Quit: Client closed)
[21:43:40] <EvanR> yeah unfoldMoore is carefully defined so the output only depends on the target state
[21:45:18] *** Joins: lispy (~lispy4@84.69.59.93)
[21:46:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-017-008.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:46:42] *** Joins: econo (uid147250@user/econo)
[21:47:41] *** carbolymer_ is now known as carbolymer
[21:47:49] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:47:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:47:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:47:52] *** Joins: wroathe (~wroathe@user/wroathe)
[21:48:05] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[21:48:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[21:49:23] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[21:50:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[21:50:21] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[21:51:40] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:52:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:52:47] *** Joins: neceve (~quassel@2.26.93.228)
[21:54:08] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Remote host closed the connection)
[21:55:20] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[21:56:01] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:56:53] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:59:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[22:01:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[22:02:50] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:b072:e210:a25e:85eb)
[22:02:55] <EvanR> is it possible to have a pure interface to opengl, like, imagine a Picture type contains all values necessary to produce an Image (juicy pixels), can f :: Picture -> Image RGB8 be done
[22:03:37] <EvanR> even a 'software' opengl like mesa will involve going through the arcane opengl dynamic loading process
[22:03:57] <EvanR> can it be pure
[22:05:22] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:06:00] <EvanR> other than writing an entire gl implementation in haskell code
[22:06:09] *** Quits: RFV__ (~RFV__@171.red-88-13-191.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[22:06:35] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 268 seconds)
[22:06:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[22:07:48] <EvanR> is the main issue concurrent access to the gpu from different values wanting to render from different threads
[22:07:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:08:25] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:08:39] <EvanR> is it like, "son of the gdk/gtk+ thing from yesterday"
[22:09:04] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[22:12:10] <monochrom> I think it is just that all Haskell compilers today compile pure Haskell to CPU-only code, not GPU code.
[22:12:44] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:56] <EvanR> ok, good angle on that, but just asking from a logic perspective not performance
[22:13:07] <monochrom> In Haskell today, to invite the GPU to work. IO is involved because, just because, inviting the GPU requires an FFI call.
[22:13:24] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[22:13:32] <EvanR> similar to the use of GMP for Integer
[22:13:33] <dolio> I'm sure you can do it, but a lot of it is going to be pretty bad GPU code.
[22:13:37] <monochrom> Logically it is pure.
[22:13:46] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[22:13:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:13:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:13:50] *** Joins: wroathe (~wroathe@user/wroathe)
[22:15:13] <EvanR> to allow multiple values simultaneously do you have to spawn a new process? xD
[22:15:19] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[22:16:05] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:16:10] <EvanR> clearly we have concurrent apps all using the gpu 
[22:16:24] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:16:37] <dolio> GPUs want to run the same code on a lot of data at once. And probably don't want you to be using things persistently.
[22:16:39] <megaTherion> EvanR: not necessarily rendering or?
[22:16:49] *** Joins: dminuoso_ (~dminuoso@static.88-198-218-68.clients.your-server.de)
[22:17:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Client Quit)
[22:17:09] <EvanR> yes rendering
[22:17:29] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[22:17:29] *** Quits: canta (~canta@user/canta) (Ping timeout: 256 seconds)
[22:17:33] <megaTherion> I dont think so, but Im not very good with GLX .. thought that has to be done by a single thread
[22:17:46] *** Quits: noddy_ (~user@user/noddy) (Quit: WeeChat 3.4)
[22:17:51] *** Joins: canta (~canta@user/canta)
[22:17:55] <EvanR> right, which is where multiple processes comes in (uhg)
[22:18:51] *** Joins: noddy (~user@user/noddy)
[22:19:42] <EvanR> if one of the images is demanded, spawn a side process, run the rendering, get the image back, return the image through IPC, end of process
[22:20:53] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[22:20:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:22:18] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:23:02] <EvanR> haskell simply running on the gpu in the first place would be interesting though
[22:23:44] <geekosaur> it'd run poorly though. graph reduction is rather different from what gpus are designed to do
[22:23:48] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[22:24:06] <EvanR> ok, not simply running then
[22:25:00] <geekosaur> so, like e.g. atom or clash, there are haskell libraries that can write programs for gpus (see for example the accelerate gpu backend)
[22:26:03] <EvanR> something similar to haskell where the primitives are like mapping, folding, which can be done in so many words iterating gpu ops
[22:26:31] <EvanR> the more gpu friendly the program the better performance
[22:27:42] <EvanR> a certain type of fold over 1024 value array could be done with 10 passes
[22:27:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:28:23] <EvanR> getting side tracked nvm
[22:28:29] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[22:28:45] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[22:28:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:29:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:29:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:29:04] *** Joins: wroathe (~wroathe@user/wroathe)
[22:29:16] *** Joins: noddy (~user@user/noddy)
[22:29:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:30:19] <EvanR> does vulkan have any better story with the thread safety
[22:30:55] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[22:32:48] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:32:56] <geekosaur> I'd imagine it's not so different from the X server communication I described yesterday: each thread would need its own independent connection to the GPU, and I'm not sure a GPU can even handle multiple threads talking to it
[22:34:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:36:48] *** Quits: max22- (~maxime@2a01cb08833598006a0c8f5f388a6d4e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:37:58] <EvanR> only 1 GPU, only 1 X Server. in BeOS there was only 1 user and at least there they exploited that for simplification purposes xD
[22:38:27] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[22:39:31] *** Joins: noddy (~user@user/noddy)
[22:39:48] <geekosaur> actually I suspect 1 GPU (which itself has multiple threads) is fine if you allocate a CPU thread that manages and communicates with N GPU threads
[22:40:16] <geekosaur> and use locking/mutexes as you might for communication between CPU threads
[22:40:36] <geekosaur> it may well be more expensive than between CPU threads though
[22:41:00] <geekosaur> the GPU model is to push as much onto the GPU as possible and communicate only at the start and end
[22:42:12] *** Quits: noddy (~user@user/noddy) (Client Quit)
[22:43:00] *** Joins: noddy (~user@user/noddy)
[22:43:33] <EvanR> I see and that is where the OS graphics system sits
[22:43:58] <EvanR> threads mediator
[22:44:13] <geekosaur> but I don't know whether opengl gives you that level of access or if you'd have to switch to opencl/cuda/etc
[22:46:17] *** Joins: dmitrydidi (~dmitrydid@2a02:a317:e040:3700:d129:fb7:b5de:86bb)
[22:46:37] *** Quits: deadmarshal (~deadmarsh@95.38.230.223) (Ping timeout: 240 seconds)
[22:47:30] <EvanR> well pure values would have a hard time gaining access to this thread manager if it's just made of regular data 
[22:47:52] <EvanR> without globals
[22:48:09] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[22:49:07] <[exa]> EvanR: you may make a small monad that abstracts the single ("active") OpenGL context and just write an interpreter or a pure DSL for that
[22:49:08] <geekosaur> right, I'm not entirely sure how this relates to your original question. clearly with opengl some amount of data lives on the cpu and could presu,mably be accessed without gpu involvement (which is guaranteed to be in IO) but it's entirely possible that it lives in the host (CPU) opengl library and aain requires IO to access
[22:49:19] <geekosaur> *again
[22:49:46] <[exa]> EvanR: Vulkan kinda improves it because they worked hard for not having the "active context" there except for absolutely neccessary parts (like, there's 1 OS and 1 GPU)
[22:49:48] <geekosaur> although depending on the API it might be wrappable or even directly declared as pure FFI
[22:49:57] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[22:50:08] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:50:28] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[22:51:08] <EvanR> what I'm thinking is there's no data assumed or left on the GPU, to do a rendering, everything is uploaded, the pixels are crunched, the framebuffer is downloaded, and all the resources are deleted
[22:51:31] <EvanR> i.e. no side effects
[22:51:39] <[exa]> that can be done pretty easily with vulkan, yes, although it's inefficient
[22:51:49] <geekosaur> ^
[22:51:54] <EvanR> oh really?
[22:52:01] <geekosaur> the ideal there is you upload it to the gpu and manage it there
[22:52:04] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[22:52:09] <EvanR> well yes
[22:52:10] <geekosaur> you only rarely do one-shot things
[22:52:17] <[exa]> yeah, perhaps a different more complicated DSL would be needed for that
[22:52:19] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[22:52:22] <geekosaur> because they are by their nature inefficient
[22:52:37] <EvanR> but uploading a bunch of stuff, managing it with imperative programming in various ad hoc ways, sucks
[22:52:48] <EvanR> and I've done it enough xD
[22:53:10] <[exa]> the most problematic thing on GPUs is that the basic imperative building blocks there (kernels) do not compose well at all (you can run them serially but you usually lose tons of cache performance, which is the main point for using GPUs)
[22:53:23] *** Quits: dmitrydidi (~dmitrydid@2a02:a317:e040:3700:d129:fb7:b5de:86bb) ()
[22:53:35] <[exa]> and there really aren't many "better languages" to specify kernels in more composable way; check out perhaps Accelerate or Futhark
[22:54:00] <[exa]> and AFAIK the human optimization intervention there is still mostly uncontested
[22:54:51] <[exa]> I wish there was a good math for cache efficient array traversal shapes
[22:57:38] *** Joins: nightbreak (~nightbrea@nat-168-7-239-4.rice.edu)
[22:57:39] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[22:58:23] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[22:58:51] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[22:59:00] <EvanR> what's inefficient is doing nothing because the API is too horrible or having nothing to show for a bunch of work that needs to be abandoned because it took too much time before you even got 1 picture
[23:00:29] *** bontaq` is now known as bontaq
[23:00:33] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[23:01:05] *** Quits: statusfailed (~statusfai@statusfailed.com) (Quit: leaving)
[23:01:58] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[23:02:46] <[exa]> EvanR: anyway why is Accelerate not the thing you're aiming for?
[23:03:57] *** Joins: statusfailed (~statusfai@statusfailed.com)
[23:04:01] <EvanR> high performance parallel arrays for haskell
[23:04:16] <EvanR> is this related to graphics somehow?
[23:04:48] <statusfailed> EvanR: are you talking about Accelerate?
[23:04:51] <[exa]> yeah it executes on GPUs
[23:05:28] <EvanR> the goal isn't really to make code run on GPUs, the goal is to make pictures
[23:05:36] <geekosaur> well, that does not guarantee it's useful for graphics
[23:05:43] <dolio> Pictures are arrays.
[23:05:46] <geekosaur> you probably want opengl for that
[23:05:53] <EvanR> pictures are functions from the plane to color
[23:06:10] *** Joins: max22- (~maxime@2a01cb08833598002ff4585ddd5d42b3.ipv6.abo.wanadoo.fr)
[23:07:08] <EvanR> and a lot of techniques in these articles involve composing pictures in weird ways, layering
[23:07:17] <[exa]> EvanR: how big are your pictures? are the pixels computed independently? how regular is the computation?
[23:07:42] <EvanR> well pictures are infinite until you crop them
[23:07:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:07:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:07:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:08:00] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:08:20] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:08:22] <[exa]> how much are you going to crop the pictures? :D
[23:08:58] <[exa]> the problem there ^ is that answers to the questions basically randomly effect whether you can or can't efficiently use GPU for the problem
[23:09:23] <dolio> I thought you were talking about GPUs.
[23:09:25] <EvanR> I care less about efficiency right now and more about working
[23:09:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[23:09:34] <EvanR> in finite time
[23:09:46] <dolio> On which GPU is a picture represented by an abstract function from the plane to colors?
[23:09:47] <[exa]> with simple things you might be good, with even slightly complicated things you'll be just wasting a _lot_ of energy unless you spend extra time optimizing it in a weird ways
[23:09:49] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[23:10:03] <EvanR> no the GPU was not the focus of the question
[23:10:11] <EvanR> it was about purity and the opengl api
[23:10:16] <[exa]> ah okay
[23:10:25] <EvanR> whose backends end up being weird even if no GPU is involved
[23:10:31] <[exa]> why you need opengl for making pictures tho? (sorry for questioning, still trying to understand the problem)
[23:11:21] <EvanR> good point, I have made imaging DSLs before, definitely slower to run
[23:11:46] <monochrom> OpenGL was designed imperatively. But it is the state kind of imperative rather than the I/O kind. You can always think of it as a state monad in the worst case. And the state is even pretty simple, it's a stack of matrices.
[23:11:59] <EvanR> but also, if you get pictures by writing it with the OpenGL stuff, then you could hypothetically take the finished result and put it into a more performance engine
[23:12:14] <EvanR> without first needing to mess with the engine
[23:12:21] <monochrom> Still, this does not mean that a Haskell compiler today compiles pure code to OpenGL calls.
[23:12:25] <EvanR> so prototyping visual effects
[23:12:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[23:12:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[23:12:55] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[23:13:00] <[exa]> openGL is a DSL for setting up a very regular graphics pipeline and then firing as much data through it as quickly as possible, so it might be useful but you should be aware of the limitations, which are very often derived from the design of GPU hardware
[23:13:01] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:13:38] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[23:13:51] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[23:13:56] *** Quits: ubert1 (~Thunderbi@p200300ecdf099416f339e1e74dd0e9e7.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:14:00] <EvanR> literal functions from R2 to Color work well, they are just very slow
[23:14:01] <dolio> Or derived from the design of GPU hardware 15 years ago.
[23:14:09] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:14:18] <[exa]> for example, if you have a pure function that does (x,y) -> PixelColor and that doesn't contain any cases, that's literally THE GPU usecase and it's going to be fast
[23:14:20] *** Joins: masa (~masa@146.185.219.13)
[23:14:25] <masa> hi
[23:14:26] <EvanR> uploading the few things to the GPU, creating 1 picture, downloading the frame buffer and deleting the objects is much faster, surprisingly
[23:14:30] <masa> whats haskell?
[23:14:37] <[exa]> EvanR: yeah that's Accelerate. :]
[23:14:46] <monochrom> Hey, C idioms are derived from the design of CPU 55 years ago. We're doing OK! :)
[23:15:03] *** Quits: nightbreak (~nightbrea@nat-168-7-239-4.rice.edu) (Quit: Signing off for now...)
[23:15:06] <dolio> Are we, though? :þ
[23:15:06] <[exa]> dolio: true, maybe more like 25. :D
[23:15:45] <geekosaur> 50's probably right
[23:16:01] <masa> americans r u?
[23:16:16] *** Parts: masa (~masa@146.185.219.13) ()
[23:16:42] <monochrom> Haskell is a programming language.
[23:16:45] <geekosaur> dammit, was going to answer but had to check something outside my apt
[23:16:59] <monochrom> Oh you can answer whether you're American. :)
[23:17:33] <dsal> americans.ru
[23:17:33] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[23:17:38] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[23:19:27] <monochrom> dsal: Did you know of Sheet Music Boss's American anthem but Russian? https://youtu.be/JSAzUlJd4yg
[23:19:32] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[23:20:40] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:20:59] <dsal> That's amazing.
[23:21:06] <monochrom> :)
[23:21:50] <monochrom> Notice that at some point the left hand is already doing the Russian anthem subtly.
[23:22:03] <EvanR> [exa], yeah in fact that's the only form allowed for a fragment program xD
[23:22:48] <EvanR> so the old school fire effect has to be done iteratively
[23:24:02] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:24:55] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:25:13] *** Quits: fendor (~fendor@77.119.167.8.wireless.dyn.drei.com) (Remote host closed the connection)
[23:26:40] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:ccf7:da52:f075:1ff9) (Remote host closed the connection)
[23:26:57] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:ccf7:da52:f075:1ff9)
[23:27:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[23:29:17] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:29:39] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:30:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:30:50] *** Joins: RFV1 (~Thunderbi@171.red-88-13-191.dynamicip.rima-tde.net)
[23:31:32] *** Quits: RFV (~Thunderbi@171.red-88-13-191.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[23:31:32] *** RFV1 is now known as RFV
[23:32:24] *** Quits: RFV (~Thunderbi@171.red-88-13-191.dynamicip.rima-tde.net) (Client Quit)
[23:34:52] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:56] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[23:37:05] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:13] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[23:37:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca)
[23:37:27] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:ccf7:da52:f075:1ff9) (Remote host closed the connection)
[23:42:36] <oak-> I'd say use of Vulkan is rather simple, and my opinion is that in the end it is easier to understand than OpenGL. You just need to do many initialization steps before you get to draw your first triangle, because Vulkan wants to support all common desktop operating systems (Linux, macOs, Windows) and Android, and all different kinds of graphics hardware and color spaces
[23:44:01] <oak-> I didn't read the whole discussion, but yes it provides quite good threading support, although you rarely need to use more than 1 thread for pushing the command queues to the GPU
[23:44:38] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[23:46:40] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[23:47:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:47:32] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:47:38] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:48:04] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[23:50:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[23:50:49] <EvanR> the issue is having a pure value that can be interpreted as an image by secretly using the GPU in the background. It seems feasible only if you do so from 1 thread
[23:50:59] <EvanR> which kind of hurts purity
[23:51:49] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[23:52:41] <EvanR> because it doesn't obey the same rules as other pure values that can be arbitrarily passed between forkIO threads in haskell
[23:54:38] <EvanR> s/using the GPU/using OpenGL regardless of if you have a GPU/
[23:55:52] <EvanR> so even if you don't want to use multiple threads, the fact that you can't is a mark against the idea
[23:57:20] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:58:23] <EvanR> (I wonder how GMP integers gets around this)
[23:59:23] *** Quits: michalz (~michalz@185.246.204.58) (Remote host closed the connection)
