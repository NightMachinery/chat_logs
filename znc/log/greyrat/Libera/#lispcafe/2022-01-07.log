[00:15:17] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Ping timeout: 240 seconds)
[00:22:44] <drakonis> https://twitter.com/UnsolicitedDiks
[00:22:53] <drakonis> best twitter account.
[00:23:09] <drakonis> unsolicited dik-dik pics
[00:23:53] * hayley wonders why moon-child wants a pillow
[00:24:43] * gilberth wonders why hayley wonders why moon-child wants a pillow.
[00:24:59] <hayley> 'All long-lived programs are either implemented in dynamic languages,1 or eventually Greenspun themselves into subverting static programming languages to create a dynamic system (e.g., Unix process trees). The latter approach isn’t a bad idea'
[00:25:13] <hayley> I guess the "The latter approach isn’t a bad idea" part? Yeah, sure.
[00:25:19] * hayley passes pillow about 3.5 hours too late
[00:26:10] <drakonis> https://ideolalia.com/essays/thought-leaders-and-chicken-sexers.html
[00:26:11] -ixelp- thought leaders and chicken sexers
[00:34:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:34:38] <semz> I don't really know what this is trying to tell me
[00:35:14] <semz> There's a summary at the bottom, but it seems unrelated to the text
[00:36:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:43:04] <drakonis> its a essay about paul graham
[00:43:52] * hayley thinks she should start making a list of notable programmers that seem to hate programming. Would make for interesting correlations.
[00:44:05] <hayley> e.g. the program manager for TypeScript doesn't seem too happy: <https://twitter.com/drosenwasser/status/1478926380884652032>
[00:44:39] <drakonis> lol
[00:45:52] *** Joins: OutsideContextPr (GreatFlea@168.138.73.107)
[00:49:13] <selwyn> hayley: do you like programming?
[00:49:28] <drakonis> alternatively, instead of reading essays about pg being wrong
[00:49:29] <hayley> selwyn: Usually yes.
[00:49:31] <drakonis> listen to master boot record
[00:49:33] <drakonis> https://masterbootrecord.bandcamp.com/
[00:49:34] -ixelp- Music | MASTER BOOT RECORD
[00:49:37] <drakonis> this is some stylin' music
[00:50:39] <selwyn> i went to a gig that was called 'pc music'
[00:50:50] <selwyn> it was only loosely computer themed
[00:52:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:53:08] <selwyn> hayley: happy greek baptism (?) day
[00:53:21] <selwyn> or perhaps it is already over for you
[00:57:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:57:58] <MichaelRaskin> For Eastern Orthodox, 7th is Christmas
[01:05:49] <aeth> which effectively makes it the end of the Christmas season
[01:06:14] <aeth> 12 days of Christmas end on either the 5th or the 6th depending on the culture (heh, programmer-style off-by-ones... it's supposed to be the 5th)
[01:06:28] <aeth> and then right after that, it's the Julian calendar Christmas
[01:06:47] <aeth> for now, anyway. It'll keep drifting
[01:06:56] <selwyn> ?
[01:07:03] <aeth> selwyn: https://en.wikipedia.org/wiki/Julian_calendar
[01:07:25] <aeth> selwyn: observe how it's the 25th of December 2021 in the Julian calendar when it's the 7th of January 2022 in the Gregorian
[01:07:34] <aeth> (depending on your time zone, the box in the upper right should be one of the two)
[01:07:45] <selwyn> what do you mean by drifting
[01:07:45] <aeth> (either 6th + 24th, or 7th + 25th)
[01:07:51] <selwyn> are the leap year rules not the same or something
[01:07:53] <contrapunctus> sm2n: I had a look at Snooze - I'm not sure how to use it to dispatch methods on URLs for my web scraper...
[01:08:08] <aeth> selwyn: The whole point of the Gregorian calendar was to remove some of the leap years
[01:08:26] <aeth> selwyn: Julian was every 4 years, leap year
[01:08:36] <aeth> Gregorian adds confusing exceptions
[01:08:38] <selwyn> oh
[01:08:41] <selwyn> right
[01:08:44] <sm2n> contrapunctus: look at how the backends are implemented
[01:08:45] <aeth> however, Gregory was a pope
[01:08:54] <aeth> so the Orthodox keep the Julian calendar as a religious calendar
[01:09:06] <aeth> today/tomorrow (depending on the time zone) is the Julian Dec 25th
[01:10:02] <sm2n> contrapunctus: <https://github.com/joaotavora/snooze/blob/a84d44efce5d9f8b0e3916ea137dc3d43a561944/api.lisp#L253>
[01:10:03] -ixelp- snooze/api.lisp at a84d44efce5d9f8b0e3916ea137dc3d43a561944 · joaotavora/snooze · GitHub
[01:10:22] <aeth> selwyn: I think the next drift day is 2100 because the rule is no leap year every 3 of 4 '00s
[01:10:38] <aeth> so no leap year 1800, 1900, 2100, 2200, 2300, 2500
[01:10:43] <aeth> 2000 was
[01:11:07] <aeth> so unlike lunar/etc. calendars, there's a very long period of time where "January 7th" is "Russian Christmas"
[01:11:13] <aeth> but it will still drift
[01:11:20] <sm2n> you need to specialize backend-payload, and *backend*
[01:11:22] <sm2n> I think that's it
[01:11:26] <contrapunctus> sm2n: oh boy...detailed docstrings in Common Lisp code! 🤯
[01:11:28] <selwyn> i see
[01:11:55] <sm2n> and then you call handle-request
[01:13:09] <aeth> I need to reform the calendar
[01:13:17] <selwyn> the determination of ramadan start dates is a real mess and cannot be done to everyones satisfaction
[01:13:25] <Alfr> aeth, don't. Correct Earth
[01:13:28] <selwyn> iirc microsoft tried to computerise it and failed
[01:13:34] <aeth> selwyn: right, because iirc it's based on observations
[01:13:38] <selwyn> yes
[01:13:40] <aeth> and there are different sects, so there's no one source
[01:13:44] <selwyn> well
[01:13:50] <Alfr> Earth's angular momentum by periodically crashing things into it.
[01:14:02] <selwyn> interestingly, the division doesn't seem to have a sectarian basis
[01:14:09] <aeth> location, then?
[01:14:15] <selwyn> it is just different countries deciding to do different things
[01:14:21] <aeth> interesting
[01:14:54] <selwyn> iirc in turkey they use 16th century astronomical instruments since this is the custom for a while, whereas in the gulf they just look at the moon
[01:15:13] <selwyn> and other countries can either do their own thing or follow the saudis
[01:15:20] <selwyn> in practice it means there is always an off by one error
[01:15:33] <sm2n> selwyn: sometimes it is off by two
[01:15:41] <aeth> I was only aware of the gulf way
[01:16:40] <sm2n> NA just uses astronomical calculations and doesn't care about sightings
[01:16:51] <MichaelRaskin> I think Christianity has all the date-by-observation part via Easter?
[01:16:53] <sm2n> it's a cultural thing
[01:17:21] <aeth> MichaelRaskin: no, I think Easter is constant
[01:17:21] <Alfr> But they can't both be right.
[01:17:30] <aeth> MichaelRaskin: constant but lunar, I mean
[01:17:49] <Alfr> We can't synchronize clocks, alright, but it isn't that bad locally.
[01:19:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a965:2f8a:47ef:cba2) (Remote host closed the connection)
[01:19:21] <MichaelRaskin> aeth: isn't there some degree of freedom in resynchronising the lunar calendar with the new Moon from time to time?
[01:19:25] <aeth> I think the point of the Gregorian calendar was to make Easter not drift over the centuries
[01:19:37] <aeth> so I wouldn't be surprised if it also fixed Easter with a more constant calculation method, too
[01:19:56] <aeth> eventually, Orthodox Christmas and Orthodox Easter will be around the same time
[01:20:00] <aeth> afaik
[01:20:08] <selwyn> lol
[01:20:11] <aeth> Julian will keep adding a day every 4 centuries, Easter will keep being calculated by the seasons
[01:20:23] <aeth> now it's in January, it won't be forever
[01:20:38] <aeth> only needs to get to March to hit Easter sometimes
[01:21:10] <MichaelRaskin> That will take more thousands of years than Christianity exists by now, though
[01:22:31] <aeth> calendar-designing bureaucrats get to make the assumption that nothing changes in the long run
[01:22:36] <selwyn> sigh
[01:22:48] <aeth> (if they're wrong, someone changes the calendar again)
[01:22:49] <selwyn> born too late to witness byzantium
[01:23:13] <selwyn> born too early to celebrate christmas and easter at the same time in a space colony
[01:23:35] <aeth> oh that would be fun because then winter and spring festivals mean absolutely nothing in the context of another planet
[01:23:41] <sm2n> born just in time to bikeshed timezones on the internet
[01:24:03] <selwyn> sm2n: lol
[01:24:46] <aeth> MichaelRaskin: but I think the calendar issues come into play thousands of years before Christmas and Easter intersect
[01:25:09] <aeth> because Catholicism and other high church denominations have elaborate month-long schedules of various events
[01:25:16] <aeth> you know, like the 12 days of Christmas, and advent and...
[01:25:54] <aeth> lent, I guess?
[01:26:01] <aeth> those are the only ones I know, they probably have a whole year's worth
[01:26:05] <sm2n> the year is 3050, christianity has died out, but I must finish advent of code
[01:27:15] <MichaelRaskin> aeth: It's true that Christmas hitting the Easter lent would be interesting
[01:27:49] <aeth> that's... christmas+11 (the 12 days) hitting Easter - idk 30? 40?
[01:27:56] <aeth> shifts the issue a few months
[01:27:57] <MichaelRaskin> But late-March Easter means mid-February Great lent start, and 20 days of drift give you only late January
[01:28:17] <MichaelRaskin> 40-day great lent
[01:28:31] <aeth> yeah, kind of figured 40 instead of 30 because that has biblical significance
[01:28:34] <aeth> Noah's flood
[01:28:44] <aeth> a few other places, too
[01:28:50] <MichaelRaskin> We-ell, there are some holidays during great lent anyway
[01:29:12] <MichaelRaskin> Christmas is too much because it has its own lent
[01:29:50] <MichaelRaskin> Post-Christmas special services? Maybe fine
[01:42:17] <hayley> https://www.youtube.com/watch?v=Ee2JdO3IlsQ
[01:42:18] -ixelp- The Aircrash Bureau (Live 81) - YouTube
[01:44:31] <hayley> gilberth: https://www.reddit.com/r/C_Programming/comments/rlf347/are_there_any_open_source_commandline_tool/hqa8qxc/
[01:44:47] <hayley> "If ripgrep could be written in Lisp while achieving similar speeds [...], then I would definitely learn something." We may have to make our compilers slower.
[01:48:14] <selwyn> lol
[01:50:15] <hayley> I'd have to make OMRN much slower to achieve similar speeds to Rust regex :-(
[02:04:42] <sm2n> on hyperscan: "The debug version of dll is 500 megs, and takes longer to build than the kernel on my computer. Think that native build in release mode is about 12 meg for the dll."
[02:04:45] <sm2n> why?
[02:05:02] <sm2n> That sounds like code bloat
[02:12:51] <selwyn> sigh
[02:12:52] <semz> C++ template fuckery maybe?
[02:13:02] <selwyn> i have blocked the web, which is great for productivity
[02:13:07] <selwyn> now i can't look up latex commands
[02:13:20] <hayley> IIRC Hyperscan is all C.
[02:16:59] *** Joins: christophergray (~christoph@186.151.17.162)
[02:17:19] *** Quits: christophergray (~christoph@186.151.17.162) (Client Quit)
[02:19:36] <semz> selwyn: What about separate browser profiles? In my experience, it's enough that switches between work/distraction are just a bit awkward. That way you can't "quickly" check some distraction (and get suckered in for two hours)
[02:19:45] <semz> Separate X sessions also work pretty well
[02:20:14] <selwyn> semz: its a nice idea and i might try it
[02:20:28] <selwyn> but my experience leads me to suspect it wouldn't work on me
[02:23:29] <semz> I spot some C++ in the tree, but no template abuse so far
[02:23:35] <selwyn> i am a cold turkey kind of guy
[02:34:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:40:07] <gilberth> Suppose I represent signed 8-bit integers by 0 = -128, 1 = -127, ... 128 = 0, ... 255 = 127. That is, representing x by x+128, how is that called?
[02:41:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:41:57] <hayley> idk, but I had used it for turning an unsigned comparison into a signed one before.
[02:42:16] <dave0> maw
[02:42:46] <dave0> maw
[02:42:48] <hayley> maw
[02:42:54] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[02:42:54] <dave0> whoops i repeat myself
[02:42:58] <dave0> hi hayley 
[02:43:00] <dave0> sup?
[02:43:03] <gilberth> hayley: Yep, you flip the MSB. I am doing exactly that for my B32, which doesn't have an overflow flag. I wanted to write a kind of programmer's manual.
[02:43:18] <hayley> dave0: https://www.youtube.com/watch?v=pCCornRCFOs
[02:43:18] -ixelp- He repeats himself when under stress - YouTube
[02:43:22] <gilberth> Hello dave0!
[02:43:28] <hayley> Touching up an article I wrote. You?
[02:43:33] <dave0> hey gilberth :-)
[02:43:37] <dave0> i'm having a coffee :-)
[02:44:02] <gilberth> Sound terrific! Pitch black, please.
[02:44:20] * dave0 pours gilberth a long black
[02:44:48] * gilberth sips and goes mmmmmmh.
[02:45:27] <dave0> hayley: that video lives up to it's description!
[02:45:31] <gilberth> hayley: Wait a second. I turn a signed into an unsigned. I have only the unsigned at the hw level.
[02:45:47] <hayley> Looks like the reverse then. oops
[02:46:05] * hayley trying to work out how to phrase a paragraph.
[02:46:08] <gilberth> It works both ways, doesn't it?
[02:46:17] <dave0> gilberth: yep
[02:46:31] <hayley> "The issue is that, by not waiving one's intellectual property "rights", the publisher may still threaten legal action on the user. There is little reason for one to believe that the publisher will not exercise their "rights", perhaps other than being overly trusting of the publisher. Such trust is possibly due to a phony sense of a relationship with the publisher, which is, in turn, due to an imposed community." Hmm.
[02:46:53] <hayley> I guess that λx.x - #x8000 (mod #x10000) is its own inverse, yes.
[02:47:55] <gilberth> IHMO it's more obvious, if you say (lambda (x) (logxor #x8000 x))
[02:48:12] <hayley> Speaking of burntsushi being an asshole, I'm also left wondering, would a scanner parse UTF-8, if there are many optimisations to statically know if we can match literal bytes rather than characters. Something like .*b can skip bytes, rather than characters, up till the b.
[02:50:05] <sm2n> selwyn: grab manuals in pdf, that way it's not an issue
[02:50:10] <dave0> gilberth: bool signedless(int aa, int bb) { unsigned int a = aa + 0x8000, b = bb + 0x8000; return a < b; }
[02:50:34] <dave0> change + to - for an unsigned less using a signed comparison
[02:51:42] <gilberth> I still prefer seeing this as flipping the MSB, but it's the same.
[02:52:35] <hayley> I remember flipping the MSB and it not working, idk why. But subtracting made more sense in my little head.
[02:53:46] <gilberth> hayley: Flipping the MSB works and doesn't invoke modulo arithmetic. The latter make me alert and reason about the lost bit.
[02:54:21] <hayley> You have a lost bit to track, I'm on a vector machine and thus no overflow bits.
[02:54:53] * hayley still wonders why it didn't work. Probably her fault implementing the translation.
[02:55:06] <gilberth> For (unsigned) a < b I then use the carry bit of (a-b), which is the (n+1)th bit of the subtraction with my hw. I made it this way for both addition and subtraction.
[02:55:18] <dave0> i used it in real code because 8086 doesn't have a set-if-less-than (it was introduced with 386) but it does have a clever way of almost-set-if-carry
[02:55:54] <dave0> so it was worth turning the signed less than into unsigned and using the carry
[02:56:06] <moon-child> gilberth: I also don't know how that's called, but 8-bit wav works that way
[02:56:23] <hayley> https://i.redd.it/8v75ulbfb0g61.png Fear of Music summary
[02:56:27] <gilberth> dave0: What do you mean by "set" compute (a<b) as a boolean value?
[02:57:03] <gilberth> moon-child: Exponents in IEEE floating point numbers also encoded that way. IIRC
[02:57:26] <moon-child> sounds right
[02:57:45] <moon-child> (though ieee also has a bunch of special cases for subnormal,nan,inf)
[02:57:50] <dave0> gilberth: it's a non-stnadnrd bool ... all-bits-0 for false, all-bits-1 for true
[02:58:30] <gilberth> What's funny is: The 8080 lack an overflow bit and thus you need to do signed comparison this way. The 8085 has the undocumented but always implemented K flag for just that signed less-than operation. The Z80 has an overflow flag incompatible with the 8080.
[02:58:32] <dave0> gilberth: if the bit is in carry, sbb ax,ax  does it
[02:58:41] <moon-child> gilberth: looks like it's 'offset binary' https://en.wikipedia.org/wiki/Offset_binary
[02:58:47] <selwyn> recently i learned how the quake fast inverse square root works
[02:59:07] <gilberth> dave0: subtract-with-borrow or substract-with-carry from 0 gets you there, yes.
[02:59:15] <selwyn> some smart shit
[03:00:19] <gilberth> moon-child: Yeah. Thanks. I would prefer the term "biased" though, I'll use that.
[03:03:03] <gilberth> The 8085 had other very useful undocumented instruction. For one reading from (sp+imm), which would provide for way compacter code for languages like C. w/o that instructions you would need sth. like lxi h, imm ; dad sp ; mov b, m. I wonder why these useful instruction never were documented.
[03:03:17] <hayley> https://applied-langua.ge/posts/the-poverty-of-post-open-source.html
[03:03:18] -ixelp- The poverty of "post-open source" - what to do about the Left's foray into intellectual property
[03:03:21] <gilberth> What also was undocumented was a 16-bit rotate on HL.
[03:03:28] <hayley> Hey, ixelp doesn't cut the title. Nice.
[03:04:58] <gilberth> So now I wonder, if this two's-complement -> biased trick could also work to detect actual signed addition/substraction overflow. It should. Hmm.
[03:06:19] <dave0> gilberth: are you revising your B32 cpu instructions?
[03:07:52] <gilberth> dave0: No. I am bored and write sth like a brief programmar's manual. Like: How to have indirect addressing, subroutine calls, and comparisons.
[03:08:19] <dave0> cool
[03:08:23] <gilberth> Multiplication both signed and unsigned, division and mod.
[03:09:00] <gilberth> I have all that, I wanted to gather it at one place with a line or two on how to do it.
[03:09:36] <dave0> ah sort of like a library?
[03:10:19] <dave0> your wheeler jump is cool
[03:10:24] <gilberth> Kind of. Like I saw with 8080 documentation by Intel, where they also showed how do multiplication and division.
[03:10:40] <gilberth> dave0: Well, it's not mine. Wheeler came up with that.
[03:10:58] <dave0> you made it cool :-p
[03:12:10] <dave0> gilberth: ever since you showed me, i've noticed little things in cpus that i never noticed before.. like that call/ret is an added feature, not something that's been there since the beginning
[03:13:11] <gilberth> dave0: Yes. On my journey I realized why FORTRAN has no recursion.
[03:14:04] <gilberth> As in the early days there was no stack pointer and no PUSH nor POP.
[03:14:55] <moon-child> o.o
[03:15:00] <dave0> gilberth: i never not had (phew!) a hardware stack so it never occured to me that it might not be there
[03:15:01] <gilberth> And I learned how far you can go without recursion. I always took that for granted.
[03:15:40] <gilberth> dave0: Besides GOSUB and RETURN does BASIC have a stack?
[03:15:43] <moon-child> well, you can surely still implement recursion
[03:15:49] <moon-child> it's just more work
[03:16:07] <dave0> gilberth: no idea.. does it?
[03:16:11] <gilberth> moon-child: Of course you can, but it gets really expensive.
[03:16:24] <moon-child> hmm...inline everything
[03:16:26] <moon-child> :^)
[03:16:54] <gilberth> dave0: BASIC has no PUSH or POP commands. There is only GOSUB and RETURN and a stack for the return address. But none for your data.
[03:17:04] * hayley puts moon-child in an inline cache
[03:17:34] <sm2n> Robert harper has a related rant post on this topic
[03:17:35] <moon-child> hayley: hey, that code may be big, but it has perfect spatial locality!
[03:17:38] <sm2n> https://existentialtype.wordpress.com/2016/02/22/it-is-what-it-is-and-nothing-else/
[03:17:38] -ixelp- It Is What It Is (And Nothing Else) | Existential Type
[03:18:17] <hayley> "Implementing recursion does not require a “stack”.  The idea that the two concepts are related is simply mistaken." Reminds me of when we were taught about object identity and pointers with diagrams of RAM.
[03:18:31] <gilberth> moon-child: Still very expensive. I would need to say: lod sp ; add #1 ; sto sp ; add #(sto - lod) ; sto .+2 ; lod X ; sto 0 for a push
[03:18:51] <gilberth> Seven instructions for a push.
[03:19:56] <moon-child> gilberth: :/ what impoverished isa is this?  8085 you said?
[03:20:43] <gilberth> Likewise loading from sp[offset]. Loading from a global is one instruction. The former is lod sp ; add #offset ; sto .+1 ; lod 0 => four instructions. Seven for sp[offset] = x
[03:20:59] <hayley> gilberth: Cheney on the MTA on B32 when
[03:21:28] <gilberth> moon-child: My example, I just gave? No, that my B32. The 8085 has a stack pointer and PUSH and POP. And more than one register.
[03:21:45] <moon-child> oh, ok
[03:21:48] <gilberth> hayley: That would help exactly how?
[03:22:27] <hayley> Instead of POPing so frequently, you do a very long POP infrequently.
[03:23:07] <hayley> https://existentialtype.wordpress.com/2011/04/02/functions-are-values/ seems to have the same sentiment to never touch a compiler or implementation.
[03:23:08] -ixelp- Functions Are Values | Existential Type
[03:23:33] <hayley> Strangely, after diddling compilers for a while, I wish that's how teaching CS worked.
[03:24:17] <moon-child> just what are you doing to those poor compilers??
[03:24:23] <gilberth> moon-child: The 8080 is a proper CPU. Even more proper than the 6502. The 8086 ISA is a superset of the 8080 ISA, if you wish to see it that way. Compatibility with CP/M-80 was a concern when the 8086 was introduced. DOS 1 was a CP/M-86 clone. And there is almost a one-to-one mapping of 8085 instructions to 8086 instructions.
[03:26:02] <gilberth> hayley: A pop is only three instructions. I do this once per activation frame, not all too expensive. But, in fact I use shallow binding not deep binding. And only when needed.
[03:32:18] <gilberth> dave0: When you think about it the return address is just another parameter to a subroutine. And a call instruction does not always pass that by pushing it on the stack. E.g. the ARM has a "BL <target>" branch and link instruction. It copies the pc (R15) to the link register LR (R14) and then branches to the subroutine at <target>. You return by saying MOV PC, LR.
[03:33:06] <moon-child> I always thought that was cute
[03:33:13] <gilberth> The link register is the return address. This is similar to the Wheeler jump, where the accumulator is used for that.
[03:33:15] <moon-child> I mean, complete waste of encoding space.  But rather cute
[03:34:56] <dave0> gilberth: ah yes, and you have to implement your own PUSH LR if you want to call another function
[03:37:46] <dave0> freshen your coffee, hun?
[03:38:09] <dave0> i gotta freshen mine :-p brb
[03:41:33] <gilberth> dave0: The arm does that. It has ldmia and stmdb instructions. "load multiple and increment after" and "store multiple and decrement before" It gets an index register (which could be sp = r13) and a bitmaks of which of the 16 registers to push or pop.
[03:44:04] <gilberth> The first arguments are also passed in r0 to r3 (iirc). So when the function is not a leaf call and calls other functions it would go stmdb sp!, {<what needs to be saved>, lr} and would push registers needed to be saved and the lr (return address), which is r14. When leaving it would just say ldmia sp!, {<what needs to be restored>, pc}. The return address will then wind up in the pc, which is r15.
[03:45:16] <gilberth> When no further functions are called from that function, you don't need to save or restore anything. Since there is a bitmask in that ldmia and stdb instructions, they are a single instruction. You get pretty compact code that way. And it's pretty fast too.
[03:46:32] <dave0> i heard they dropped the load/store multiple in aarch64
[03:46:38] <dave0> unconfirmed
[03:46:46] <gilberth> The passing of arguments with registers is pretty common with RISC. Also the link register.
[03:47:50] <dave0> gilberth: i grew up on m68k, i never knew any other way besides passing it in registers :-p
[03:49:46] <gilberth> dave0: Weren't you the guy being fond of stack-based VMs?
[03:50:57] <gilberth> I don't know anything about aarch64 other than that it is a bit different from the olde 32-bit ARM ISA.
[03:51:08] <dave0> not sure, doesn't sound like me
[03:51:59] <gilberth> dave0: And I grew up with the 8080. Passing arguments in the registers was the usual thing to do in assembly language.
[03:52:27] * dave0 reminisces
[03:54:07] <gilberth> It has the same thing as with e.g. BH and BL with 8086. Only called differently there is BC, DE, and HL as 16-bit registers. and B, C, D, E, H, L as 8-bit registers being the upper and lower 8-bit bits.
[03:55:27] <hayley> lol, you know how the smallest unit of currency in Bitcoin is a Satoshi, after the creator's pseudonym? Whoever made Solana decided to call the smallest unit there a Lamport, after the computer scientist.
[03:56:30] <hayley> "They are named in honor of Solana's biggest technical influence, Leslie Lamport." Having your biggest technical influence be Lamport for distributed systems would be like having Jon Ive be your biggest influence for UI design.
[04:01:28] <hayley> Kinda cliched, and it's safe to say that they have influenced everyone, more or less.
[04:10:40] <sm2n> why is everyone apparently talking about solana recently
[04:11:16] <hayley> Energy efficiency, methinks.
[04:11:21] <hayley> But I'm not sold on a few of the claims.
[04:12:13] <sm2n> No, I mean I don't follow cryptocurrency news or have a social media feed and I'm seeing it
[04:12:31] <sm2n> Something definitely happened recently
[04:13:33] <hayley> e.g. <https://solana.com/news/proof-of-history---a-clock-for-blockchain> at the end claims that ASICs won't be notably faster than CPUs. First it shouldn't stop a timestamp machine, as Bitcoin has "difficulty" to throttle block production. And ASICs already exist for Bitcoin (double SHA-256) and they _are_ magnitudes faster, due to sheer parallelism. If you don't have the rest of a CPU, you can just cram more hashing units.
[04:13:33] -ixelp- Proof of History — A clock for blockchain
[04:13:34] <sm2n> I had never heard of solana prior to this week
[04:13:45] <hayley> Hm...either crabs or NFTs.
[04:14:39] <hayley> A friend and I are trying to...well, "negotiate" the situation? Trying to find the good parts, I guess.
[04:16:40] <sm2n> Oh it's all written in rust
[04:17:44] <hayley> "Our VM mucho fast, we have Rust" .oO("My VM is faster, I don't do unnecessary things in it. lol")
[04:18:33] <sm2n> Wait, their on-chain vm is the berkeley packet filter?
[04:18:38] <sm2n> That's actually hilarious
[04:18:41] <hayley> AIUI yes.
[04:19:16] <hayley> Still, it's faster to just not do things, as a rule of thumb. Exceptions include caching and prefetching, of course.
[04:19:48] <sm2n> caching can be bad if you need lots of coherency
[04:20:12] <hayley> Sure.
[04:21:35] <semz> That argument as to why ASICs couldn't be faster is something else
[04:21:41] <sm2n> This is in their introductory materials <https://2501babe.github.io/posts/solana101.html>
[04:21:41] -ixelp- 2501babe: solana 101
[04:21:49] <sm2n> "they also claim to offload data to Not Filecoin so validators can run light clients but someone in their discord told me they never implemented that so idk"
[04:21:52] <sm2n> this is killing me
[04:23:08] <hayley> https://solanabeach.io/ now mentions leaders? What kind of blockchain is this, where we need a leader? *scratches head*
[04:23:08] -ixelp- Dashboard | Solana Beach
[04:23:27] <hayley> Also "voting" in the instruction breakdown. Erm.
[04:25:14] <sm2n> I don't know, but those terms seem evocative of Raft/Paxos
[04:25:38] <hayley> Exactly.
[04:28:32] <sm2n> oh
[04:28:38] <sm2n> It actually does work like raft
[04:28:49] <sm2n> <https://docs.solana.com/cluster/leader-rotation>
[04:28:49] -ixelp- Leader Rotation | Solana Docs
[04:28:50] <hayley> Link?
[04:29:06] <hayley> "serialization and dispatch are your problem. if youre calling somone elses program, you have to rely on them giving you client code or documentation to be able to determine how to properly form an instruction because all interfaces are opaque and ad hoc"
[04:29:27] <hayley> Eventually consistent Smalltalk-80 1-0 eventually consistent crab
[04:32:19] <sm2n> wow, it's like unix, but Decentralized and on the Blockchain
[04:32:39] <sm2n> Can programs segfault too?
[04:34:33] <gilberth> Is that an essential feature of UNIX?
[04:35:14] <hayley> In the case of WASM, you don't even get a segfault, you just read bogus stuff.
[04:35:31] * hayley taps on https://arxiv.org/abs/2112.11745
[04:35:49] <gilberth> Nice, no more crashes.
[04:37:50] <hayley> Well, I pissed off my friend when I asked for a link.
[04:38:48] <hayley> "These articles don't convince me that it achieves anything - the Bitcoin whitepaper was more straightforward at that." "That was straightforward?" "No, but it was better than anything else I've read."
[04:39:02] * hayley reads https://solana.com/solana-whitepaper.pdf instead
[04:39:20] <hayley> Note that https://bitcoin.org/bitcoin.pdf does not include a legal disclaimer about selling tokens. Hm.
[04:40:22] <Alfr> gilberth, https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html
[04:40:23] -ixelp- <signal.h>
[04:41:28] <Alfr> gilberth, at least it's there, whether it's actually used may be up to the system.
[04:43:42] <hayley> But having to connect to a leader makes me wonder if Solana is as fault tolerant as proof-of-work. Then the network can't be as...I guess "loosely organised" as with a blockchain?
[04:45:34] <gilberth> Alfr: I wonder if UNIX actually had that. I mean the real thing, the PDP-11.
[04:46:23] <hayley> Still, the Bitcoin paper makes sense IMO. It explains that this is all about maintaining a distributed "timestamp server", which lets you prove that a transaction was published at a given virtual "time".
[04:46:50] <sm2n> I agree
[04:47:11] <sm2n> This feels like they mashed together all the trendy distributed systems research from the 2010s
[04:47:40] <sm2n> (which is reasonable, honestly)
[04:48:02] * sm2n spots a typo in the abstract
[04:48:29] <hayley> The Solana paper is also a bit over 3x as long, which worries me. Though Ethereum is even longer!
[04:49:36] <sm2n> So they use a gossip protocol to avoid DDoSing the leader
[04:49:52] <sm2n> and they use proof of stake to elect the leader
[04:52:47] * sm2n wonders if anyone actually uses formal verification to test any of their "reliable" blockchain stuff
[04:53:20] <sm2n> iirc all the Raft implementations that did ran into serious bugs
[04:53:30] <hayley> Best I can tell, it's in part probabilistic, as honest users and attackers race to generate blocks.
[04:54:08] <hayley> There's one famous bug in Paxos which is due to misreading the English description of the algorithm. Else it works in TLA+...but as Lamport made both, we can't be sure if he rigged TLA+ or not.
[04:54:28] <sm2n> link?
[04:54:47] <hayley> https://brooker.co.za/blog/2021/11/16/paxos.html
[04:54:48] -ixelp- The Bug in Paxos Made Simple - Marc's Blog
[04:54:58] <hayley> https://stackoverflow.com/questions/29880949/contradiction-in-lamports-paxos-made-simple-paper
[04:54:59] -ixelp- algorithm - Contradiction in Lamport's Paxos made simple paper - Stack Overflow
[04:55:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:55:57] <sm2n> I had to close the solanabeach tab as it was burning my lap
[04:56:45] <hayley> Ouch.
[04:58:07] <sm2n> I wasn't aware of P, neat
[04:58:42] <hayley> https://lamport.azurewebsites.net/pubs/pubs.html#paxos-simple also has the warning in bold "Do not try to implement the algorithm from this paper."
[04:58:43] -ixelp- The Writings of Leslie Lamport
[04:59:49] <sm2n> heh
[05:00:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:02:23] <sm2n> hmm
[05:02:35] <sm2n> their section on attacks is kind of vague
[05:02:43] <sm2n> 5.13.1
[05:03:06] <hayley> I haven't actually read past page 3 yet, I got distracted.
[05:03:08] <sm2n> what's stopping someone from doing a sybil style attack?
[05:03:11] <sm2n> ah
[05:03:44] <hayley> My friend said "I dont understand any of this thread as per usual but some smart and influential people on sol still follow me, so maybe I can give you some exposure. Ill try."
[05:04:33] <hayley> Very kind of her, though I think #lispcafe is one of the more neutral venues to discuss distributed systems.
[05:13:33] <hayley> I got sent this video <https://www.youtube.com/watch?v=rywOYfGu4EA> but all I got answered was that you can compare to a clock to order events. But we know this from Lamport's Time, clocks and the ordering of events in a distributed system already.
[05:13:33] -ixelp- Proof of History Explainer - YouTube
[05:14:20] <sm2n> lol that's an amazing non-answer
[05:15:12] <hayley> w.r.t actually implementing the clock...what's the hash function doing? You can make a clock from hashes, that's what blockchains already do. But what's the laws of entropy going to achieve? You don't have more entropy in later blocks.
[05:16:10] <hayley> You can sort blocks because they literally store which blocks came before.
[05:18:36] <sm2n> They don't seem to say it explicitly, but I think the idea is that you pick the longest chain
[05:18:45] <sm2n> and then there is something about staking I don't really understand
[05:18:52] <hayley> "Intelligence is not a measure of how much total information you have stored. I call that trauma lol." lol
[05:19:04] <sm2n> is that related at all?
[05:19:27] <hayley> Picking the longest chain is what normal blockchains do, though. I can't tell what's different.
[05:19:47] <sm2n> Does there need to be a difference there?
[05:20:06] <sm2n> The innovation appears to be in that people don't have to bruteforce hashes anymore
[05:20:20] <hayley> If the claim is that "we do some stuff that makes it fast and cheap", I'd like to know what the stuff is.
[05:21:25] <sm2n> As I understand it, the stuff comes from the social structure
[05:21:58] <hayley> Hm.
[05:22:07] <sm2n> i.e nodes stake their stuff, and there's a privileged leader, which means 
[05:22:11] <sm2n> no mining
[05:22:24] <hayley> Not a great start then.
[05:23:19] <sm2n> But I don't know, I had not read any technical material on solana before an hour ago
[05:23:21] <hayley> Reminds me that there are analogues between people talking about DAOs and the sort of "communities" I write against. Like how both are well-defined sets that can't be too large, and one can't be part of too many of. Just a thought.
[05:23:33] <hayley> Nor have I.
[05:24:05] <sm2n> They also have a thing for scaling the network
[05:24:22] <sm2n> i.e if you rely on a single node to mint every tx, that's a bottleneck
[05:24:32] <sm2n> so you can have multiple nodes in a quorum
[05:24:49] <sm2n> but they don't seem to have anything in the paper on how to actually elect that quorum
[05:25:43] <sm2n> Anyway I'm bored and done now I think
[05:25:44] <hayley> Guess it is time for me to disappear for lunch. Then I'll start to properly read that paper.
[05:25:54] <sm2n> I don't believe in global consensus protocols anyway
[05:26:29] <hayley> "If I'm in Sweden, and you're in the US, then where do we put the shared state? In the middle of the ocean?" - Joe Armstrong, very paraphrased
[05:27:05] <hayley> "In distributed systems there is no real shared state (imagine one machine in the USA another in Sweden) where is the shared state? In the middle of the Atlantic?"
[05:32:55] <gilberth> Greenland.
[05:35:10] *** Joins: Darzen (~Darzen@047-027-075-036.res.spectrum.com)
[06:08:53] <sm2n> This has been said many times before, but I really don't understand people who talk a whole lot about "digital autonomy", "decentralization", etc on _Medium_ and _Discord_
[06:16:57] *** Quits: Darzen (~Darzen@047-027-075-036.res.spectrum.com) (Ping timeout: 240 seconds)
[06:20:01] <hayley> https://twitter.com/burntsushi5/status/1479273458861281283 FUCK
[06:20:46] <drakonis> hayley: lmao
[06:21:12] <hayley> Well, I just need to prepare a sample Xorg.0.log and code. I mean, I saw those results, so I can't be that wrong...
[06:22:03] <drakonis> also omrn?
[06:22:14] <drakonis> you've mentioned it before but i cant recall what it means
[06:22:26] <hayley> one-more-re-nightmare
[06:23:28] <drakonis> oh, its for regex i see
[06:23:42] <hayley> Yes.
[06:23:50] <drakonis> search engine completion is way too good, it completed the name as soon as one-more
[06:23:57] <hayley> And notably I try to optimize running the DFA, and not just substring search.
[06:24:14] <hayley> Damn, so it does. Nice.
[06:24:38] <sm2n> sample Xorg.0.log?
[06:24:50] <drakonis> time to make burntsushi eat his words
[06:24:53] <hayley> Yes, my test is looking for resolutions in Xorg.0.log
[06:25:23] <drakonis> rust developer hubris
[06:25:37] <sm2n> oh
[06:25:57] <sm2n> good luck
[06:26:27] <hayley> And the tight loop is matching digits, which only Hyperscan and I optimise (though in practice the former didn't?)
[06:27:48] <drakonis> this is what i live for
[06:28:11] <drakonis> rust still doesnt have tco
[06:28:13] <drakonis> wth
[06:30:31] <hayley> IOW burntsushi will get burnt
[06:31:42] * moon-child wants sushi
[06:32:58] <hayley> FWIW I could be biased in calling it "hubris", as gilberth and I did not really get any useful information when I asked him about matching more complex sets.
[06:33:24] <hayley> ...and some of it didn't even match up with practice in any regex engine he wrote.
[06:34:01] <sm2n> <https://github.com/rust-lang/rfcs/pull/1888>
[06:34:03] -ixelp- Proper tail calls by DemiMarie · Pull Request #1888 · rust-lang/rfcs · GitHub
[06:34:03] <sm2n> huh
[06:35:06] <hayley> Like how rust-lang/regex runs machines which match codepoints, but burntsushi was telling me to use byte machines, and that DFAs would get too hairy.
[06:35:43] <sm2n> "As a non-FP/non-PL person, it would be really nice to see some concrete examples of where become is nicer than a simple while loop. Personally, I only ever use recursion when I want a stack." ????
[06:35:52] <waleee> where was that burntsushi quote from? A tweet?
[06:36:15] <sm2n> If you can optimize something into a tail call, then a stack is entirely superfluous, I don't get it
[06:36:19] <hayley> When I get around to it, I'll match codepoints (even in encoded utf-8, so we decode on the fly) and see which I can optimise down to byte searches instead.
[06:36:23] <hayley> Which quote?
[06:36:51] <waleee> the one with "If ripgrep could be written in ..."
[06:37:04] <hayley> Reddit. One sec...
[06:37:35] <hayley> The obligatory question: what did he search to find me? Just stumbled on my sense of humour?
[06:37:52] *** Joins: utkarshsingh (~utkarshsi@43.230.66.25)
[06:37:57] <waleee> rg twitter.com hayley?
[06:38:00] <hayley> https://old.reddit.com/r/C_Programming/comments/rlf347/are_there_any_open_source_commandline_tool/hqa8qxc/
[06:38:01] -ixelp- burntsushi comments on Are there any open source command-line tool rewrites in C?
[06:38:10] <White_Flame> or somebody forwarded your post to him
[06:38:10] <hayley> lol, explains why he took half the day.
[06:38:28] <sm2n> "[deleted]"
[06:38:37] <sm2n> nice
[06:38:39] <waleee> ah, 9 days ago, I didn't go back far enough on his reddit user
[06:39:05] <hayley> "Boo, you're making fun of ripgrep again. I thought you already admitted you were being mean."
[06:39:59] <sm2n> hopefully he never finds #lispcafe 
[06:40:05] <hayley> White_Flame: then whom? Idk who would forward the information over.
[06:40:18] <White_Flame> you could always ask him?
[06:41:02] <hayley> I guess.
[06:41:22] *** Quits: utkarshsingh (~utkarshsi@43.230.66.25) (Quit: rcirc on GNU Emacs 29.0.50)
[06:42:31] <sm2n> huh, <https://docs.github.com/en/search-github/searching-on-github/searching-code>
[06:42:32] -ixelp- Searching code - GitHub Docs
[06:42:37] <sm2n> Since when did this exist?
[06:42:59] <sm2n> Was code always indexed?
[06:43:16] <hayley> I think so?
[06:43:20] <drakonis> yes but you have to be logged in to search it nowadays
[06:43:35] <drakonis> and they're not indexing inactive repositories anymore
[06:44:36] <sm2n> Huh, I never knew that
[06:44:49] <sm2n> But I avoid using github as much as possible
[06:45:11] <hayley> Nonetheless, I'd still say that most RE engines only really optimise literal substrings, since you can have tight loop functions for those, without a compiler.
[06:46:12] <drakonis> oof the tco rfc got nuked
[06:46:18] <drakonis> closed, that is.
[06:46:23] <drakonis> what a bummer
[06:46:30] <hayley> Hence OMRN is one of the few fast regex engines, as opposed to a regular engine with a fast prefix scanner.
[06:48:20] <sm2n> Could a compiler person please explain to me what is so difficult about detecting tail calls?
[06:49:38] <moon-child> sm2n: afaik scheme identifies tail calls syntactically
[06:49:53] <hayley> Best I can tell, it's not, but destructors in Rust move things out of tail calls.
[06:51:17] <sm2n> So it's a hangover from C++, I guess
[06:51:45] <sm2n> "WebAssembly does not support tail calls at all yet, so stablization of this feature will need to wait until this changes, which could take years."
[06:51:49] <sm2n> hahaha ok
[06:52:39] <sm2n> moon-child: I've done that in crappy interpreters I've written
[06:52:55] <waleee> isn't the point that you would compile down to webassembly? (and said compiler would deal with it?)
[06:53:06] <sm2n> ^ This is what I was going to ask
[06:53:20] <moon-child> wouldn't be guaranteed then
[06:53:40] <sm2n> I think the issue is that wasm doesn't have goto iirc
[06:53:58] <sm2n>  /jmp
[06:54:00] <moon-child> tail calls are not about performance; they are about asymptotic space usage
[06:54:28] <hayley> Rust on the MTA?
[06:54:32] <moon-child> hahha
[06:54:40] <drakonis> tail calls are for not blowing up the stack
[06:54:44] <drakonis> tco
[06:55:32] <drakonis> when using recursion
[07:00:39] <drakonis> if i understand that discussion correctly, the limitation lies on rust's llvm dependency
[07:01:22] <hayley> IIRC LLVM can tail call...maybe?
[07:01:57] <sm2n> not on wasm and mips apparently
[07:02:15] <gilberth> TCO is an optimization. Specified tail calls are a semantic issue. The issue is that a tail call is just a jump. Then the language is a target of a compiler, this makes a huge difference. With tail calls you can implement a computed goto essentially, without it, you need to emit one gigantic loop with a case statement on a virtual pc.
[07:02:56] <gilberth> Neither having tail calls or a goto seriously cripples your language as a target for a compiler.
[07:03:57] <drakonis> yes.
[07:04:10] <aeth> no
[07:04:13] <drakonis> well
[07:04:15] <aeth> not quite
[07:04:17] <sm2n> wasm appears to have a tagbody equivalent
[07:04:17] <aeth> the goto has to be contained
[07:04:36] <drakonis> its weird how rust does not have it
[07:04:53] <aeth> if you can just jump into the middle of any function body by line number, and all lines are numbered, then you can't remove (or replace with equivalent) seemingly unnecessary code
[07:05:02] <aeth> you can't raelly do much at all
[07:05:07] <sm2n> drakonis: technically cl doesn't have it either
[07:05:19] <drakonis> i'm aware
[07:05:31] <drakonis> but most implementations have it
[07:05:36] <sm2n> yeah
[07:05:45] <drakonis> the ones that don't are the ones that are hosted
[07:05:57] <aeth> people hate goto because they think of old-style gotos
[07:06:00] <sm2n> Isn't it just abcl
[07:06:01] <drakonis> https://doc.rust-lang.org/reference/attributes/limits.html 128
[07:06:02] -ixelp- Limits - The Rust Reference
[07:06:02] <drakonis> oof
[07:06:04] <aeth> gilberth: TCO isn't just an optimization, though
[07:06:12] <aeth> gilberth: if you can't assume that the optimization is there, that changes how you write code
[07:06:21] <drakonis> someone wrote up which ones have it
[07:06:27] <aeth> that's maybe 2/3 of the difference between CL and Scheme
[07:06:29] <gilberth> aeth: Is it a real tagbody, or just a block/return-from? The variant like JS has it, with a named block you could either break or continue?
[07:06:56] <aeth> not sure, I'm multitasking and I'm bad at multitasking
[07:07:03] <sm2n> gilberth: block/return-from
[07:07:10] <drakonis> https://0branch.com/notes/tco-cl.html
[07:07:11] -ixelp- Tail Call Optimisation in Common Lisp Implementations
[07:07:24] <aeth> drakonis: the real problem there is that you can't force it on
[07:07:39] <drakonis> it has to be detected?
[07:07:41] <gilberth> aeth: It's called tail call optimization. I am talking about specified tail calls. E.g. Any CL is free to have TCO, but the standard does not mandate that certain calls are tail calls.
[07:07:49] <aeth> you can kind of force TCO by messing with DECLARE/DECLAIM OPTIMIZE
[07:07:53] <drakonis> i see
[07:07:57] <gilberth> sm2n: So no goto. Thanks.
[07:07:57] <aeth> but there's no (declare (optimize (tco 1))
[07:07:58] <aeth> )
[07:08:00] <drakonis> does sbcl not do it by default?
[07:08:04] <drakonis> although
[07:08:10] <aeth> I'm not sure that's helpful
[07:08:20] <aeth> code that runs by default, but not when you're trying to debug it, is not good code :-)
[07:08:25] <sm2n> sbcl does it except when speed <= debug or debug = 3, iirc
[07:08:32] <drakonis> i see
[07:08:41] <aeth> I mean, I do write some light recursive code
[07:08:45] <sm2n> gilberth: you can take a look for yourself <https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-control>
[07:08:45] -ixelp- Instructions — WebAssembly 1.1 (Draft 2021-12-18)
[07:08:46] <gilberth> aeth: Show me where the standard says that. This is my point: I am not talking about a particular compiler, but about a language and CL as a language doesn't have that.
[07:08:53] <aeth> I don't tail recurse instead of LOOP like a Schemer
[07:09:03] <aeth> but a lot of e.g. parsing stuff is just naturally recursive
[07:09:11] <aeth> and I'm not going to avoid tail recursion there
[07:09:12] <drakonis> that post's a bit fair out of date
[07:09:16] <drakonis> i wonder if clasp does tco
[07:09:37] <aeth> gilberth: the standard afaik permits anything in OPTIMIZE and just gives ones that are guaranteed to be there
[07:09:52] <aeth> http://www.lispworks.com/documentation/HyperSpec/Body/d_optimi.htm
[07:09:52] -ixelp- CLHS: Declaration OPTIMIZE
[07:09:55] <aeth> lots of freedom there
[07:10:00] <gilberth> It's not about recursion, or not. Tail calls and goto are equivalent. I am talking about what a language could do.
[07:10:26] <aeth> oh, in particular, http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_o.htm#optimize_quality
[07:10:26] -ixelp- CLHS: Glossary-Section O
[07:10:42] <gilberth> aeth: Again: An CL implementation having no tail calls at all, is a conforming CL implementation.
[07:10:48] <aeth> by the standard, you could have a (optimize (tco 1)) if you chose to.
[07:11:09] <gilberth> I am talking about Common Lisp, not Aeth Lisp.
[07:15:01] <gilberth> With Scheme (define (foo) (foo)) (foo) is guaranteed to take O(1) space. (defun foo () (foo)) (foo) with CL may blow your stack. Huge difference.
[07:15:14] <drakonis> yes but why can't we have that
[07:16:01] <gilberth> Any CL compiler is free to apply TCO, it's not forbidden.
[07:16:58] <sm2n> Would you say it's bad practice to define a state machine using LABELS?
[07:17:20] <gilberth> Yep, you are taking bets.
[07:17:32] <moon-child> maybe you are willing to take those bets
[07:17:41] <moon-child> or maybe you only care about some implementation that you know does tco
[07:18:16] <gilberth> When I am a compiler, and I want to compile a GOTO statement, I won't use LABELS for that.
[07:18:41] <gilberth> [Compiling Foolang to CL]
[07:19:25] <sm2n> I suppose in this scenario TAGBODY is pretty much the same ergonomically
[07:19:37] <gilberth> All I said is, if your language neither has a GOTO nor specified tail calls, you need to resort to a loop with a case statement to implement GOTO.
[07:19:40] <moon-child> sure.  But a state machine is not a goto, exactly
[07:20:01] <drakonis> zig has tco
[07:20:02] <moon-child> and: when I am a cl compiler, I would sure like to generate good code from LABELS, if that is what the user used
[07:20:03] <drakonis> neat.
[07:20:20] <sm2n> I'm saying, _if_ I'm writing a state machine, how should I do it
[07:20:51] <sm2n> doesn't zig use llvm?
[07:20:52] <moon-child> gilberth: what I want to know is, how is the loop implemented without goto and tail calls?
[07:21:04] <sm2n> Does it work on wasm target?
[07:21:32] <gilberth> moon-child: Take JS e.g. it has while(1), but no goto.
[07:21:48] <drakonis> ah, it does not have it yet
[07:21:52] <drakonis> it keeps getting pushed back
[07:22:03] <moon-child> hm, js, yes I suppose
[07:22:10] <moon-child> I was thinking of civilized languages :)
[07:22:23] <drakonis> the llvm dependency is getting removed in time apparently
[07:22:46] <sm2n> yes, iirc they want a self-hosted compiler for 1.0
[07:22:47] <drakonis> there is a call that forces tco
[07:23:00] <gilberth> Well, you need some kind of loop, tail calls, or goto to be Turing complete.
[07:23:21] <moon-child> no, you can have just regular recursion
[07:23:23] <sm2n> why do you need tail calls?
[07:23:24] <drakonis> https://ziglang.org/documentation/0.9.0/#call
[07:23:24] -ixelp- Documentation - The Zig Programming Language
[07:23:26] <drakonis> refer to this
[07:23:28] <drakonis> recursion
[07:23:31] <moon-child> turing completeness assumes infinite space anyway
[07:23:56] <moon-child> (because you need unbounded space to be able to simulate arbitrary turing machines regardless of whether you have loops or not)
[07:24:03] <sm2n> lambda calculus usually doesn't define a reduction strategy regardless
[07:24:32] <gilberth> moon-child: Sure. Damn Turing argument. I should invoke another argument and talk about complexity, rather.
[07:26:09] <drakonis> https://github.com/ziglang/zig/issues/1006 this sure is something
[07:26:10] -ixelp- safe recursion · Issue #1006 · ziglang/zig · GitHub
[07:26:11] <gilberth> Isn't there some "feasible Turing complete" argument? No computer is Turing complete after all.
[07:26:35] <sm2n> Doesn't ring a bell
[07:27:23] <gilberth> Or "practical Turing complete". The argument for that for the Z3, which has no loop instructions worked by gluing the program tape together at both ends to have loops.
[07:28:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:29:34] <gilberth> Anyhow, if WASM really has no GOTO or tail calls, it a very bad target for a compiler.
[07:29:50] <moon-child> I assume it has goto, but no indirect goto
[07:34:11] * gilberth reads the obfuscated spec.
[07:36:37] <gilberth> Ok. WASM has no goto. Only the block/return-from kind of thing.
[07:37:58] <gilberth> For sth like (tagbody L1 ... (if # (go L1) (go L2)) ... L2 ... (if # (go L1) (go L2))) I would need a loop with a case statement.
[07:38:12] <moon-child> wow
[07:39:48] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:41:09] <gilberth> Which is exactly the kind of thing that JS offers.
[07:44:15] <hayley> IIRC the stopper was that V8's IR didn't know goto, so they can't get most browsers to implement goto.
[07:45:32] <hayley> "Functional programming literature is hard for me to understand because it all seems to ignore the reality of computers. Where is the memory allocated? That's a really important question that you can't just gloss over."
[07:45:42] <hayley> haha Henry Baker goes brrrr
[07:46:15] <robin> js requires tco but only javascriptcore (webkit) actually implements it iirc :/ (last time i checked, anyway)
[07:47:09] <hayley> gilberth: Okay, what cases do we have where other RE engines barf? (a|aa)* is a classic. Ditto for (aba|ab|a)(aba|ab|a)(aba|ab|a). Without submatches, [0-9]+x[0-9]+ really benefits from a compiler.
[07:50:11] <hayley> Anything with iteration seems to be more mediocre.
[07:52:55] *** Joins: semz (~none@user/semz)
[07:58:04] <gilberth> robin: Yes, since recently it seems.
[07:58:42] <hayley> "If the DFA comes across any non-ASCII byte, it will quit and fall back to an alternative matching engine that can handle Unicode word boundaries correctly" wait wot
[07:59:00] <GreaseMonkey> whyyyyyyy
[07:59:03] <hayley> They bail to a DFA...for Unicode? I don't recall reading that in the source.
[07:59:24] <GreaseMonkey> oh right, spaces
[07:59:59] <robin> 2015 i think, presumably before they had the 2+ implementations requirement for proposals
[08:03:12] * robin still a bit bitter about google sabotaging BigInt's potential for a JS numeric tower ('shipped in nightly, too late to change')
[08:04:51] <robin> but at least i got to be on the right side of a mathematical argument alongside fabrice bellard :))
[08:18:38] * hayley is this high in debt still.
[08:20:55] <hayley> So my wins are in longer prefixes that you can't actually optimise for, without using compilation, anything that you classically would bail out to a NFA for, and any repetitions in the middle of strings?
[08:22:57] *** Quits: OutsideContextPr (GreatFlea@168.138.73.107) (Quit: The Lounge - https://thelounge.chat)
[08:27:07] <epony> in favour of GCC or PCC  Jan07 0349<drakonis> the llvm dependency is getting removed in time apparently
[08:49:02] <sm2n> epony: self-hosted, llvm will be kept around for bootstrap
[08:54:13] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:54:36] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:06:06] <hayley> Hooray, Casey Muratori blocked me. lol
[09:06:31] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:07:26] <sm2n> lol what happened?
[09:07:35] *** Joins: Alfr (~Alfr@user/alfr)
[09:08:06] <hayley> Someone mentioned one of his videos (and pinging him), and I replied that it only solved anything, indirectly by killing people with unsafe code.
[09:08:18] <hayley> s/, indirectly/indirectly, /
[09:09:07] <sm2n> Haha, I wonder if he thought you were part of the rust evangelism strike force
[09:10:28] <hayley> No, only the Henry Baker Evangelism Strike Force
[09:11:35] <sm2n> I doubt he knows who henry baker is
[09:12:38] <hayley> I linked a letter from Baker...
[09:12:47] <sm2n> oh
[09:12:55] <hayley> https://twitter.com/nodefunallowed/status/1479024641049968646
[09:12:55] <sm2n> nice, but I doubt he read it
[09:16:57] <hayley> "Some of these benchmarked systems are "mission-critical" embedded systems, in which bad programming style can kill people" "That sign won't stop me, cause I think everyone should be fired!"
[09:29:15] <hayley> Does lower IPC correlate with lower power usage? I know that sometimes OMRN will match in speed with lower IPC and fewer branches.
[09:33:42] <hayley> Anyways, for lower wall time I can think of SIMDing more complex prefixes (as I can compile any isums, not just one prefix byte), submatching isn't awfully slow, and anything with repetition can be faster.
[09:39:16] * hayley uploaded an image: (126KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lIktCSpqSkrXGqipGAhnLPPb/i-cant-read.jpg >
[09:41:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:41:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:29:03] <hayley> One problem is that SIMDing loops is in an experimental branch, and one has to build SBCL from source to get the latest changes. Fuck.
[10:37:11] <hayley> At the very least, it appears that the runtime of my benchmarks is not greatly affected by disabling or enabling Unicode support. Mostly that I don't do any ranges that are outside ASCII anyway.
[10:53:59] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[11:02:39] <hayley> But I am 125% faster than PCRE on recognising a phone number with ([0-9]+) ([0-9]+), and 470% faster than Rust regex. The difference with the resolution test is that there are submatches, which makes Rust regex poop itself.
[12:00:43] <hayley> moon-child: Wouldn't your idea to use traps to handle type/bounds errors be a bit like having a prediction hint that says "predict definitely untaken, and don't even bother to put this in prediction cache"? Though I don't think the latter actually exists on any ISA of course.
[12:01:11] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[12:03:06] * hayley uploaded an image: (178KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tfkprybyfdzMuZUDlTsnxyYy/risc.jpg >
[12:21:38] * hayley got played by the head of TypeScript
[12:21:49] <hayley> "Don't let the shitposting fool you, I literally made programming for programmers my career."
[13:20:07] *** Joins: OlCe (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr)
[13:56:12] <epony> sm2n, I've heard better jokes ;-)
[13:58:55] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ziNcqCJHEmEydKpQAOVZbbOf/some-benchmarks.png >
[13:59:04] <hayley> gilberth: I think we won?
[13:59:43] <hayley> Hm, did I mix up quotes and submatches? /me scratches head - labels are wrong, but the numbers should be okay.
[14:34:15] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:36:53] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[14:38:33] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[14:41:01] <hayley> https://github.com/no-defun-allowed/re-benchmarks
[14:41:02] -ixelp- GitHub - no-defun-allowed/re-benchmarks: Some regular expression benchmarks
[14:43:00] *** Joins: kevingal (~quassel@37.228.202.92)
[15:38:36] * hayley uploaded an image: (137KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/jvWdYQCSXjsxOlgOoPNWIrJT/mealy-machine-music.jpeg >
[16:07:53] <luis> so Freenode's got a crypto coin now is it? https://freenode.net/n/freenode/80/freenode-belongs-to-you
[16:07:54] -ixelp- freenode belongs to you | freenode
[16:08:06] <ck_> "freecoin"?
[16:08:18] <ck_> suppose it was inevitable
[16:08:41] <hayley> It's free?
[16:11:37] <luis> I have yet to see a blockchain thing that doesn't involve trading things for money at the end.
[16:11:56] * hayley buys all the coins for $0, becomes new god emperor of Freenode
[16:12:15] <luis> I'd rejoin that Freenode.
[16:13:44] <hayley> Hayley 1-0 Freenode
[16:13:53] <hayley> Also telling to have 6 deleted replies.
[16:16:07] <selwyn> sigh
[16:17:05] <ck_> -coin is the -gate of this decade
[16:17:21] <ck_> okay it is amongst them. amongst those terms, amongst our weaponry..
[16:17:32] <selwyn> they are allocating tokens for the libera userbase as well?
[16:18:09] <ck_> 15% of the tokens for .. (guessing here) 99% of the userbase
[16:19:31] <selwyn> perhaps it is a clever (dumb) plan to launch a coup on libera by offering its users free crypto bux
[16:20:38] <ck_> I have only skimmed that text, but would generally hesitate to characterize his actions as smart or deeply planned after witnessing how the whole takeover thing played out
[16:21:20] <selwyn> open source has more juicy drama than academia
[16:22:00] <ck_> https://www.bbc.com/news/uk-england-lancashire-59909808 the army will save us all
[16:22:00] -ixelp- Covid: North West Ambulance Service receives help from military - BBC News
[16:22:05] <selwyn> yes i saw that
[16:22:12] <hayley> The Poverty of Post Freenode: What to do about the root's foray into crypto
[16:22:13] <ck_> but that picture has me singing oh-one-one-eight-nine-nine-nine ...
[16:22:20] <selwyn> ck: hahaha
[16:22:46] <selwyn> as i have said i wonder how useful military personnel are in these kinds of situations
[16:23:14] <selwyn> driving an ambulance very different from a military truck
[16:23:35] <selwyn> and the requirements of the job are surely very different
[16:23:43] <Gnuxie> useless 
[16:23:47] <Gnuxie> that 150 sounds like the entire lot 
[16:24:11] <selwyn> for any military, getting the cargo through seems to be very much more important than civilian life
[16:24:21] <selwyn> witness the high number of traffic incidents in any military occupation
[16:24:33] <ck_> I enjoyed some army personnel in a vaccination center
[16:25:08] <ck_> I think officer candidates or whatever the international term for that is, ncos? 
[16:25:27] <selwyn> um
[16:25:43] <selwyn> maybe officer cadet is what you mean?
[16:26:01] <ck_> no, turns out there is no such thing in other militaries https://en.wikipedia.org/wiki/Unteroffizier
[16:26:23] <selwyn> there must be a nato equivalent surely
[16:27:01] <selwyn> well, glad you enjoyed it
[16:27:11] <ck_> anyway the point I was getting at is that they were there in an um.. organizational capacity?
[16:27:41] <ck_> a lot of please and thank yous, and please move forward one rank of chairs.
[16:28:20] <ck_> a lot different than I'd expected the role of army support in a civilian setting to be.  I had more the type of "grunts moving sand bags for desaster relief" type of thing in my head
[16:28:59] <selwyn> i saw a soldier delivering fuel a few months ago but there was very little to report
[16:29:08] <selwyn> imagine a man in uniform driving
[16:29:15] <ck_> so, who knows what exactly those 150 people do in the ambulances. I'm sure they can stop a bleeding and place a venous access just like a civilian medic
[16:33:02] <ck_> and if this little speech doesn't convince you of my trust, let me have you know that I'll be buying 100 brexcoin as soon as possible
[16:33:05] <selwyn> one of my friends went to university one day to play snooker
[16:33:17] <selwyn> when he arrived, there were military uniforms all over the tables
[16:34:14] <selwyn> it turns out that it was being used as a temporary garrison (?) for soldiers who were involved in a nearby royal event
[16:34:20] <ck_> what :D
[16:34:51] <selwyn> he played a few practice games and left
[16:34:53] <ck_> bunk beds in the mess hall?
[16:35:18] <selwyn> on the way downstairs, one of the university campus security teams stopped him and told him off
[16:35:47] <selwyn> 'you shouldn't be here' 'i'm a member of the snooker club i'm allowed to come in' etc.
[16:36:08] <selwyn> eventually, they barred him
[16:36:58] <selwyn> it turns out that we have two campus security organisations: one that we know about, that is relatively friendly, and a different one that was outsourced and is more aggressive
[16:37:40] <selwyn> owing to overlapping responsibilities and lack of communication no-one was told that their facilities would be used to station hm forces
[16:38:05] <ck_> hm means "her majesty" ?
[16:38:12] <selwyn> yes
[16:39:23] <ck_> well, and you said academia didn't have juicy stories
[16:39:24] <selwyn> the military and police are subject to the crown, not the public, which occasionally has consequences
[16:40:00] <selwyn> i would say this is more of a modern british incompetency story set in a university
[16:46:01] <ck_> it has pool tables, aristocracy (somewhat), and university -- that's a good story to me
[16:46:24] <selwyn> royal nonsense, pointless institutional fragmentation/outsourcing, heavy handedness
[16:46:27] <ck_> do you (as a culture I mean) have figures of speech that relate every day life to pool or billiards?
[16:46:59] <selwyn> the greatest snooker player of all time has released a series of novels
[16:47:19] <selwyn> the titles of which are all double entendres relating to snooker
[16:47:36] <ck_> ah, snooker, that's I think what I had in mind.  If that's the one with a white-gloved arbiter that constantly places balls back on the felt and says a number afterwards
[16:47:46] <ck_> .. twenty-seven ..
[16:48:01] <selwyn> yes
[16:49:29] <ck_> it's nice to have things like that, it's an amazing feeling you can experience by instantly bridging the gap between complete strangers with the right phrase
[16:49:38] <ck_> today we'd probably use memes
[16:50:16] <selwyn> not sure if there are any good snooker memes
[16:50:22] <ck_> .. at tanagra.  Have you seen s05e02, Darmok, yet?
[16:50:30] <selwyn> probably not
[16:50:45] <ck_> I'd enjoy resuming this conversation once you have
[16:50:56] <ck_> well this topic rather
[16:51:03] <selwyn> https://www.memesmonkey.com/images/memesmonkey/e3/e30981b15c91171a6acc124b2fb7f375.jpeg
[16:51:05] <selwyn> i mean, this is ok
[16:51:30] <ck_> 'thier' is another inside joke?
[16:51:41] <selwyn> probably unintentional
[16:51:48] <ck_> ok. you never know
[16:52:17] <selwyn> that meme looks too old to employ deliberate mispelling
[16:52:36] <ck_> "but it checks out, sir"
[16:52:50] <moon-child> hayley: yes, though it should also give slightly smaller code (only on a variable-width isa), as you don't have to specify the branch target
[16:53:29] <selwyn> lol
[16:57:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:00:25] *** Joins: cranium (~cranium@user/cranium)
[17:03:57] <selwyn> gnuxie: > freenode grew larger as it began hosting live events in the United Kingdom for the free and open source software community.
[17:04:50] <Gnuxie> really 
[17:04:56] <Gnuxie> probably true 
[17:05:30] <selwyn> i know what i'm going to book tickets for next
[17:06:00] <ck_> easy there friend, do you have enough freenode tokens to do that?
[17:14:16] <ck_> totally unrelated, but a conversation with someone for whom german isn't a first language makes me ask you: is there something you see me write here that makes you suck air through your teeth and go "that's not quite how you'd say that"?
[17:14:34] <ck_> other than probably that sentence o_O
[17:15:12] <selwyn> um
[17:15:33] <selwyn> earlier when you said that you enjoyed some army personnel :D
[17:16:04] <ck_> I understand :) thanks
[17:16:12] <selwyn> it's funny
[17:17:14] <selwyn> https://www.youtube.com/watch?v=3DgZbEPFF6w
[17:17:14] -ixelp- Why Melbourne’s Biggest Street Was Wiped Off the Map - YouTube
[17:17:30] <selwyn> a good video but we already know that australia doesn't exist
[17:17:40] <selwyn> let alone one street in it
[17:24:12] <ck_> who knows whether you or me exist
[17:34:38] <ck_> mrmr: "this you?" https://www.youtube.com/watch?v=nKhN1t_7PEY
[17:34:38] -ixelp- Mr. Mister - Broken Wings - YouTube
[18:26:55] *** Joins: domovod (~domovod@176.196.122.197)
[18:30:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:31:24] * ck_ .oO( computer says no )
[18:33:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:35:27] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[20:21:27] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7)
[20:27:57] <selwyn> how common is it for foreigners to speak german that is as grammatically correct as what the natives use
[20:28:03] <selwyn> (not talking about accent)
[20:30:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[20:31:08] <aeth> you can spot the foreigners because they don't consistently capitalize their nouns when speaking German
[20:34:28] <epony> das ist nicht richtig!
[20:42:38] <White_Flame> speaking or typing?
[20:42:47] <aeth> speaking
[20:42:50] <White_Flame> I don't know how capitalization comes across in voice ;)
[20:43:09] <White_Flame> (oh, or thatsthejoke.gif :-P )
[20:43:27] *** Joins: notzmv (~zmv@user/notzmv)
[20:43:49] <White_Flame> I would think that people generally have issues with word ordering
[20:43:50] <aeth> it's like that one web comic where the American revolutionaries find the British spy because of the British spelling for words like 'honour'
[20:44:28] <White_Flame> yes, that's something you notice in speech, too ;)
[20:44:35] <edgar-rft> selwyn: I don't know a single german native who speaks grammatically correct german (no joke) :-)
[20:46:14] <edgar-rft> we have so many dialects that we need a "high-german" language standard to make written text understandable to all germans
[20:46:22] <selwyn> indeed
[20:46:40] <aeth> right, there's no one German language, or Italian for that matter
[20:46:41] <aeth> or French
[20:51:13] <edgar-rft> When I write a story on paper and then freely speak the same story into a mirophone and write down the words I get two signifiantly different texts. That's beause at school I learned writing high-german and when I speak I mix in a lot of words an phrases from the local dialect.
[20:51:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:57:35] <ck_> selwyn: you mean consistently? very uncommon. but many reach a very high accuracy level
[20:58:13] <ck_> still, there's the one blemish in a tapestry of excellence that stands out every once in a while
[20:58:25] <ck_> which is what motivated my question earlier 
[20:58:57] <ck_> in other news: new mocca pot arrived. My delight is immesurable and my day is saved. victory-pose emoji \o/
[20:59:32] <ck_> immeasurable*
[21:02:01] <ck_> (and also, whether I have achieved some partial command of The English Language or not remains for you to judge, that wasn't what I wanted to say)
[21:04:49] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[21:05:18] <nij-> What's exciting about life without Lisp?
[21:09:39] <ck_> the same thing that makes a life with lisp worth living
[21:09:42] <ck_> nothing
[21:10:41] <nij-> o/ common
[21:21:17] <aeth> Common Lisp? yuck, who wants to use the commoner Lisp when they can use Royal Lisp instead?
[21:22:32] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 240 seconds)
[21:22:57] <ck_> (one-would-like-to-define-a-function-named ... )
[21:23:52] <nij-> what is royal lisp?
[21:24:01] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[21:27:40] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[21:28:09] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[21:28:24] *** Joins: Alfr (~Alfr@user/alfr)
[21:31:25] <selwyn> a rebranded (american) common lisp to use patriotic spelling
[21:31:30] <selwyn> much like the trident missiles
[21:31:41] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[21:32:07] <epony> expect random refusals to launch, much like "dark star" the carpenter film
[21:32:38] <epony> https://en.wikipedia.org/wiki/Dark_Star_(film)#Plot
[21:33:09] <epony> it might as well be named vaxident
[21:33:28] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[21:34:44] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:35:44] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:40:46] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[21:42:50] <ck_> !clhs doily
[21:43:18] <ck_> should've said !rlhs .. I should have said rlhs :( one more year of humor school
[22:00:02] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7) (Ping timeout: 240 seconds)
[22:02:04] <aeth> selwyn: no, wouldn't Royal Lisp be the UK English version of it?
[22:02:26] <aeth> INITIALISE-INSTANCE instead of INITIALIZE-INSTANCE, etc.
[22:02:31] <aeth> maybe I should make it for April 1st
[22:02:38] <selwyn> lol
[22:02:54] <selwyn> the bbc micro lisp is the only programming language i've seen that uses british english
[22:03:02] <selwyn> runs on a 6502
[22:04:54] <ck_> what about excel?
[22:05:28] <aeth> I hate Excel ever since I realized that it was "Excel" and not "Excell" and they missed the perfect pun opportunity
[22:05:36] <aeth> it took me years to notice, too
[22:05:50] <aeth> it's one of those things your mind fills in if you're inattentive
[22:06:25] <aeth> who actually reads the labels instead of just looking for the green icon, anyway?
[22:06:31] <ck_> ex cell, magnum opus? or what pun am I missing
[22:06:45] <aeth> Microsoft Excel, the spreadsheet program, with cells
[22:06:55] <aeth> when you use it, you are getting data from the cells, i.e. ex cell
[22:06:56] <ck_> yes, that's what I meant, ok
[22:07:46] <aeth> OK, it's mixing Latin and English but still, it's common enough of a thing in English
[22:07:52] <aeth> https://en.wiktionary.org/wiki/ex#Latin
[22:07:53] -ixelp- ex - Wiktionary
[22:07:54] <aeth> "out of, from"
[22:10:47] <selwyn> i guess prolog is the most non-anglo language?
[22:11:12] <ck_> what about things like mondrian or brainfuck
[22:11:30] <selwyn> well
[22:11:41] <selwyn> i guess those are pretty culture neutral
[22:12:12] <ck_> (brainfuck is left to right though)
[22:26:09] <White_Flame> ruby was developed in japan
[22:26:22] <epony> NOOOOOOOOOOOOOOOOOOOOOOOOoooooooooooooooooooooooooo.
[22:26:30] <White_Flame> or are you specifically talking about keyword language/spelling?
[22:27:08] <aeth> the least anglo language would probably be a Lisp that doesn't use English at all?
[22:27:41] <aeth> you can even give it right to left evaluation... it's actually unspecified in Scheme so some Schemes do that (but it's specified LTR in CL)
[22:27:42] <White_Flame> or a forth with the same?
[22:28:17] <aeth> Latin would be a good choice for a Forth-like language
[22:28:19] <aeth> verbs go at the end
[22:28:28] <White_Flame> or german
[22:28:40] <White_Flame> I think japanese has some of that, too?
[22:28:41] <epony> you only have to learn latin now.. and forth
[22:29:33] <White_Flame> were there any BASICs with non-american spellings?
[22:29:46] <White_Flame> I would think that "COLOUR" would be a prime candidate for some
[22:30:11] <White_Flame> I know I've seen minor 3rd party languages with such
[22:31:25] <ck_> hmm, what about the sinclair computers maybe
[22:31:37] <aeth> a Latin-based programming language should use manual memory management
[22:31:46] <ck_> or turing parchment
[22:32:17] <White_Flame> and the eXtreme 90s version would be Latinx
[22:32:17] <aeth> e.g. to destroy the object Carthago, write (Carthago delenda-est)
[22:35:57] <epony> no, latin programming is divisive and conquering, so.. must be a family of languages
[22:36:23] <epony> knock knock
[22:38:17] <aeth> the Italian fork of the Latin programming language is focused on OOP to the point where it has 9 layers of dependency hell
[22:38:27] <aeth> (because standard Italian is based on Dante)
[22:39:04] <epony> plandante9
[22:39:14] <epony> th gate
[22:39:14] <selwyn> lol
[22:39:17] <selwyn> didn't know that
[22:41:10] <epony> 13-green and 11-pink in rapidly shifting ordinances
[22:41:25] <epony> counterclockwise
[22:57:29] <Alfr> Who here opened up that part-time parliament rabbit hole yesterday?
[22:59:29] <Alfr> I mean the article is nice, only that I initially didn't intend to work though a consensus protocols for half a day.
[23:00:00] <Alfr> But still, thanks for the tip.
[23:15:05] <White_Flame> such is the nature of the internet ;)
[23:20:35] <sm2n> Alfr: hayley did
[23:22:39] <selwyn> was reddit ever the driver of internet content the way twitter is now?
[23:23:52] <sm2n> maybe for a year or so around ~2013
[23:24:10] <sm2n> All the stuff with "gamers" and r/atheism
[23:24:22] <sm2n> fedora tipping
[23:26:07] <epony> the internet is driven by nic drivers
[23:48:44] <edgar-rft> don't surf the internet without a driver's license!
