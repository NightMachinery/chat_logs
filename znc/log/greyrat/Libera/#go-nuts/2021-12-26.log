[00:03:28] *** Joins: hannibal_ad_port (c99abf4150@2604:bf00:561:2000::297)
[00:09:04] *** Parts: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) ()
[00:16:08] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[00:30:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:33:56] *** Joins: Maxattax97 (~max@2600:1700:68c0:3bb0::3b)
[00:36:57] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4247:1136:32e9:54c2) (Ping timeout: 240 seconds)
[00:38:38] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[00:44:58] *** Joins: hackers (~self@user/hackers)
[00:47:02] *** Joins: Teckla_ (~Teckla@user/teckla)
[00:47:38] *** Quits: Teckla (~Teckla@user/teckla) (Ping timeout: 268 seconds)
[00:50:59] *** Quits: Teckla_ (~Teckla@user/teckla) (Client Quit)
[00:51:18] *** Joins: Teckla (~Teckla@user/teckla)
[00:54:02] *** Joins: jla (~jordi@64.225.79.195)
[00:56:53] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c)
[01:02:17] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[01:05:11] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:12:22] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:12:29] *** Quits: hackers (~self@user/hackers) (Quit: leaving)
[01:13:11] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:13:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:393a:ffee:2e04:d088)
[01:18:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:18:28] *** Quits: zer0bitz (~zer0bitz@196.244.192.54) (Ping timeout: 268 seconds)
[01:28:20] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:32:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:32:59] *** Joins: jla (~jordi@64.225.79.195)
[01:33:17] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:33:25] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[01:33:43] *** Joins: moog (~moog@107.126.53.93)
[01:46:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:48:59] *** Joins: fikran (~fikran@user/fikran)
[01:50:57] *** Quits: rbn (~rbn@user/rbn) (Read error: Connection reset by peer)
[02:01:10] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:02:04] *** Joins: rbn (~rbn@user/rbn)
[02:09:31] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:5918:fc97:aab5:e6ef)
[02:10:43] *** Joins: kiteman (~nilo@8.red-79-146-59.dynamicip.rima-tde.net)
[02:11:32] *** Parts: kiteman (~nilo@8.red-79-146-59.dynamicip.rima-tde.net) ()
[02:21:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:22:49] *** Joins: bluedust (~bluedust@59.89.212.159)
[02:26:57] *** Quits: bluedust (~bluedust@59.89.212.159) (Ping timeout: 240 seconds)
[02:26:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:31:50] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[02:35:01] *** Joins: hellstabber_ (hellstabbe@gateway/vpn/protonvpn/hellstabber)
[02:38:02] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Ping timeout: 268 seconds)
[02:40:32] *** Joins: hellstabber__ (~hellstabb@178.233.16.12)
[02:42:34] *** Quits: isflavior (~isflavior@2001:8a0:5dd8:4100:5918:fc97:aab5:e6ef) (Quit: isflavior)
[02:42:37] *** Quits: hellstabber_ (hellstabbe@gateway/vpn/protonvpn/hellstabber) (Ping timeout: 240 seconds)
[02:43:22] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-b8d8-7d61-956a-534e.ip6.gigabit.dk)
[02:45:39] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:47:49] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Quit: IRC Bouncer crashed ...)
[02:53:57] <mfiano> mikoto-chan: Isn't that the official site I was referring to that let's you search instead of browse by popularity?
[02:55:53] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[02:56:14] *** Quits: hellstabber__ (~hellstabb@178.233.16.12) (Quit: Leaving)
[03:03:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:07:55] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Remote host closed the connection)
[03:08:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:09:31] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[03:15:35] *** Quits: Maxattax97 (~max@2600:1700:68c0:3bb0::3b) (Ping timeout: 250 seconds)
[03:17:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:18:06] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[03:27:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:28:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Client Quit)
[03:30:19] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[03:32:03] *** Joins: resamvi (~resamvi@2a02:8071:9190:5300:e957:410f:4182:5aa3)
[03:32:03] *** Quits: resamvi (~resamvi@2a02:8071:9190:5300:e957:410f:4182:5aa3) (Changing host)
[03:32:03] *** Joins: resamvi (~resamvi@user/resamvi)
[03:32:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[03:35:32] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[03:36:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[03:37:51] *** Joins: resamvi (~resamvi@2a02:8071:9190:5300:e957:410f:4182:5aa3)
[03:37:51] *** Quits: resamvi (~resamvi@2a02:8071:9190:5300:e957:410f:4182:5aa3) (Changing host)
[03:37:51] *** Joins: resamvi (~resamvi@user/resamvi)
[03:42:12] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[03:43:34] *** Joins: resamvi (~resamvi@user/resamvi)
[03:48:12] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[03:51:51] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:56:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:58:20] *** Joins: fikran (~fikran@user/fikran)
[04:03:06] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:07:55] *** Joins: wim (~wim@42.be)
[04:10:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[04:21:37] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 268 seconds)
[04:35:14] *** Joins: drewr (~drew@user/drewr)
[04:43:11] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:44:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:23] *** Joins: drewr (~drew@user/drewr)
[04:47:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:51:58] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 260 seconds)
[04:58:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:59:56] *** Joins: drewr (~drew@user/drewr)
[05:04:28] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:04:31] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:08:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com)
[05:28:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[05:36:29] *** Quits: kochchef (~quassel@80.146.255.46) (Ping timeout: 256 seconds)
[05:40:34] *** Joins: kochchef (~quassel@80.146.255.46)
[05:42:57] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:53:25] *** Joins: jackneilll (~jackneill@20014C4E1807E60093F76D4D45F4DFC3.dsl.pool.telekom.hu)
[05:55:46] *** Quits: jackneillll (~jackneill@20014C4E18209D005566DD3B255CD367.dsl.pool.telekom.hu) (Ping timeout: 245 seconds)
[06:00:03] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[06:00:34] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[06:04:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:04:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[06:05:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:07:41] *** Joins: fikran (~fikran@user/fikran)
[06:17:12] *** Joins: bluedust (~bluedust@117.204.152.129)
[06:21:17] *** Quits: bluedust (~bluedust@117.204.152.129) (Ping timeout: 240 seconds)
[06:47:31] *** Joins: darkapex (~darkapex@user/darkapex)
[06:47:53] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[06:54:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:56:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c9ea-abca-3b0d-a0e2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:03:18] *** Quits: tumdum (uid783@id-783.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:09:32] *** Joins: bluedust (~bluedust@117.204.152.129)
[07:11:47] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[07:16:23] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[07:31:58] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[07:39:33] <LiENUS> so i have (including main goroutine) numcpu+3 goroutines going and my task (just finding primes as an exercise in parallel processing and solving the issues around it). it completes in a reliable amount of time with an accurate answer. If I add just one more  goroutine, even if it has a completely empty body just go func(){}() the answer becomes inaccurate and time becomes unreliable could be an additional 20 seconds or an
[07:39:33] <LiENUS> additional minute on a normally 30 second set.
[07:40:04] <LiENUS> its got to be triggering an additional pause on one of the goroutines by going numcpu + 4 im not sure how to cleanly provide a test case for it though
[07:40:25] <LiENUS> i'm only noticing it because its triggering a timing issue in how i'm testing primes
[07:40:27] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[07:42:23] <LiENUS> if i have enough primes in my result set then i only check divisibility by the known primes, if i dont then it divides by all odd numbers less than the square root of the possible prime. enough primes is determined by x/(ln(x)-1) its usually accurate enough but i can see how the right timing issue would cause the occasional inaccuracy
[07:44:01] <LiENUS> its such an involved timing issue that im really not sure how i would even begin to isolate it
[07:45:26] <LiENUS> i guess add comments to my code explaining what its doing and where the timing issue hits and open up an issue on the issue tracker?
[07:47:26] <seebs> probably not
[07:47:37] <seebs> because the issue tracker is for cases where you *do* know what's going on and it's the language's fault
[07:47:43] <seebs> and that seems extremely unlikely
[07:47:50] <seebs> i think the first thing i'd do is build and run with the race detector on
[07:48:16] <LiENUS> it passes with the race detector
[07:48:19] <seebs> hmm
[07:48:27] <seebs> this seems like it should be a small sample program, no?
[07:48:33] <LiENUS> 217 lines
[07:48:37] <seebs> post it on go playground?
[07:49:26] <seebs> if it reproduces for other people then they can look also and see whether there's a plausible bug, or whether they can see something wrong in the code. the behavior you describe sounds like a really weird edge case of *some* sort.
[07:49:41] <LiENUS> i'm changing the mitigation for the timing issue now to see if it solves the actual timing issue, it should mask the weirdness about the additional goroutine
[07:49:54] <LiENUS> going to use something more accurate than just "well we should have enough primes that the relevant batches are done"
[07:50:58] <LiENUS> though the x/(ln(x)-1) bit normally works so well
[07:51:08] <seebs> i mean, anything that would depend on that *should* be caught by the race detector if it's actually causing the problem
[07:51:59] <LiENUS> well the way it works is every prime is stored in an array of primes, writing is done behind rwmutex.lock each worker pool when it goes to check the prime does rwmutex.rlock() before accessing so its protected from race conditions
[07:52:08] <seebs> i would have started with "check against known primes such that p*p < x, if you have primes left you're done, if you ran out of primes, now check multiples of 6 +1 and +5 until n*n > x, etc.
[07:52:20] <LiENUS> but if the worker pool for say set 6 tries to check before the worker pool for set 5 has sent in its results
[07:52:30] <LiENUS> it might not have enough known primes to satisfy the test
[07:52:48] <LiENUS> in which case it would falsely flag that that numbers as a prime number
[07:52:54] <seebs> ahh, yeah. that is sort of a race condition thing that would not actually be a data race, just a logical race condition where you're getting stable bits but they might be wrong.
[07:53:05] <LiENUS> so i mitigate by estimating if i have enough primes
[07:53:17] <LiENUS> x/(ln(x)-1)
[07:53:58] <LiENUS> and i think somehow the extra go func(){}() is throwing off that logical race in a way x/(ln(x)-1) isn't accurate enough for
[07:54:41] <LiENUS> i'm trying to verify that by changing how i mitigate, there are more accurate ways. for example when i'm done if the last known prime i checked with was less than the square root of the number, just continue from there with all odd numbers
[07:54:50] <LiENUS> that wouldnt fall into that logical race condition
[07:55:59] <seebs> don't estimate "enough" primes, check the highest prime currently known
[07:56:20] <seebs> you can tell whether it's high enough instantly, and you should use the primes already known first and only look at other odd numbers once you're past them.
[07:57:02] <LiENUS> either path, adding go func(){}() shouldn't break things
[07:57:10] <seebs> but in general, you shouldn't have any problems with this, because sqrt(n) is a LOT smaller than n, so once you have any kind of decent pool of primes, the numbers you're checking for primality should be WAY smaller than the numbers that the existing primes are enough to check for
[07:57:11] <seebs> agreed
[07:57:22] <seebs> but if it does, i suspect they're actually very broken already :P
[07:57:37] <LiENUS> and i cant check the highest prime currently known, i have 16 cores, its entirely possible to end up with a highest prime that exceeds the square root of my input
[07:57:46] <LiENUS> but still not yet have the set i need
[07:58:24] <seebs> i guess, "the highest in the contiguous set starting at 0 that are definitely fully searched".
[07:59:02] <LiENUS> granted estimating still falls under that same issue, it was a bandaid that works to avoid overcomplicating my isprime function while i'm toying around with other things
[07:59:11] <seebs> so like, if you start with the primes under 65k, you can now search every batch from 65k to 4 billion with zero risk, and as long as you do those batches even approximately in-order, you'll have the 65k-128k batch done shortly and that'll get you through 16 billion, and so on.
[08:01:37] <LiENUS> i'd have to track contiguousness, which is probably not a bad exercise
[08:01:40] *** Parts: Gnuman (~gnuman@user/gnuman) ()
[08:01:44] <LiENUS> thats kind of the point of this little bit
[08:02:01] <LiENUS> solving problems like the output array isn't sorted, how to ensure it's sorted without actually doing a full sort on it
[08:03:08] <LiENUS> my big problem i actually have right now is the target for the program is to say ./primes 800 and it spit out the 800th prime and it shut off shortly after the 800th prime is known to be found and then spit that out to me, it'll have to complete all already sent worksets for that to be accurate
[08:03:50] <LiENUS> i went to add that goroutine to handle a clean shutdown so it can properly wait for all of the in progress sets to be flushed when i ran into this weird issue
[08:14:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:17:02] *** Joins: fikran (~fikran@user/fikran)
[08:20:03] <seebs> WaitGroups are a good thing
[08:20:45] <seebs> x/sync/errgroup "WithContext" is probably very close to what you want there, although possibly the errors are a non-issue
[08:22:15] <LiENUS> i'm using a waitgroup to wait for them all it's deadlocking because one of them won't finish feeding on a context cancel
[08:23:14] <LiENUS> i had figured out what wasn't feeding a minute ago but its slipped my head now as i work on isolating this down
[08:23:47] <LiENUS> the continuousness of the completed result sets is giving me issues with isolating it
[08:24:08] <LiENUS> or lack there of rather
[08:45:58] <LiENUS> so predictably adding a contiguous highest prime my check and only doing the timing based one if i have a contigous highest prime greater than the square root makes it so that empty go func has no effect
[08:48:26] <LiENUS> it doesnt want to reliably trigger in the go playground
[08:48:36] <LiENUS> presumably because parallelism is limited there
[08:55:30] <LiENUS> spaghetti code inbound but https://go.dev/play/p/s2h-WgA9jsJ that fails ~20% of the time on the go playground, ~50-75% of the time for me on a system with 16 cores, more cores  seems to make it trigger more
[08:55:47] <LiENUS> i'd be curious if it triggers on something with a shit ton of cores without the go func(){}() bit
[08:56:57] <LiENUS> if i remove go func(){}() it never fails on me. its definitely the x/(ln(x)-1) being misused there but why would adding another goroutine that does nothing and immediately exits trigger it
[08:57:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[09:03:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:03:46] <seebs> messes with the scheduler
[09:04:48] <LiENUS> thats got to be a pretty big pause
[09:06:06] <seebs> not necessarily a *pause*, just some sort of perturbation of the scheduler. Hmm.
[09:06:39] <LiENUS> i mean obviously... don't rely on timing that closely, i wasn't thinking enough about what len(pl.primes) actually was
[09:06:57] <seebs> I don't think isPrime is actually meaningfully a method on the Job.
[09:07:05] <seebs> you can take away the name of the Job it's a method on and it still runs.
[09:07:09] <LiENUS> it doesnt need to be part of Job
[09:07:25] <LiENUS> this is purely me screwing around to get a better understanding of thinking in goroutines
[09:07:49] <seebs> so, the length calculation is definitely error-prone by nature.
[09:07:50] <LiENUS> at some point it was using the rwmutex directly and that felt wrong
[09:08:50] <seebs> i mean, it'd be idiomatic if it needs the mutex.
[09:09:30] <seebs> your wait group logic is wrong, i think
[09:09:32] <LiENUS> it needs the mutex to lock the primelist when it accesses it, it just felt cleaner to put the mutex outside of it surrounding the call to it
[09:09:55] <seebs> you're adding items to the wait group per task, and you're adding them only at the very end of the Do call
[09:09:57] *** Joins: resamvi (~resamvi@2a02:8071:9190:5300:94f:87dd:a284:afc8)
[09:09:57] *** Quits: resamvi (~resamvi@2a02:8071:9190:5300:94f:87dd:a284:afc8) (Changing host)
[09:09:57] *** Joins: resamvi (~resamvi@user/resamvi)
[09:10:13] <seebs> the usual idiom would be to Add when *creating* the goroutine, and then only call Done when the goroutine *exits*.
[09:10:50] <seebs> Add should always be happening before the work starts, and really before the goroutine starts, and Done should be happening from the goroutine exiting.
[09:10:56] <LiENUS> its using a worker pool  the goroutine doesn't exit
[09:11:16] <LiENUS> the reader for the output calls done, not all results in that one return a result to the reader
[09:11:21] <seebs> the workers should exit when their input goes away
[09:11:27] <seebs> also don't check length on a channel
[09:11:29] <seebs> basically ever
[09:11:46] <seebs> the length can change after you check it but before you read from it
[09:11:47] <LiENUS> thats the logic issue with shutting down
[09:11:59] <LiENUS> thats where i was at in messing around
[09:12:13] <seebs> the only valid operation is to read from the channel, and then when you're done writing to the channel, you close it, and then the workers are doing something like "for j := range workchan" and they close automatically when the channel closes.
[09:12:18] <LiENUS> cleaning that up to allow a midway shutdown anything involving ctx.done isn't used yet
[09:12:20] <seebs> that's *probably* unrelated.
[09:12:29] <seebs> you don't actually need a context for that, just channel close.
[09:12:40] <LiENUS> yeah was playing around there
[09:13:24] <LiENUS> you can see the commented out if len(primes) >= 800 bit thats where the len of channel would matter
[09:13:49] <LiENUS> the idea was look at the length of the channel and finish flushing it and return but that won't work because it'll see len = 0 but the supply goroutine may not be done
[09:14:33] <LiENUS> i was going to add a goroutine to wait for the supply go routine to finish writing and let that be what it waits on, so context cancel, or closing the done channel would only affect the supply goroutine
[09:14:47] <LiENUS> it all needs to be turned into a pipeline pattern, thats  the final step
[09:16:15] <LiENUS> https://go.dev/play/p/iOpZxeyRhJC this is the one with the bug fully fixed by checking for the contiguous highest prime found
[09:17:25] <LiENUS> that one will let me fix the workgroup logic now too because every job returns a result even if its no primes
[09:17:54] <LiENUS> i had to add on the workgroup in job.Do because before not all sets return a result
[09:18:06] <LiENUS> though ideally i run a stepsize high enough so they all do
[09:27:56] *** Quits: bluedust (~bluedust@117.204.152.129) (Remote host closed the connection)
[09:36:56] <LiENUS> i could probably just find my exact prime im looking for in a fraction of the time with a sieve but y'know
[09:48:06] *** Joins: wcsiu (~wcsiu@user/wcsiu)
[09:49:03] *** Quits: wcsiu (~wcsiu@user/wcsiu) (Client Quit)
[09:50:09] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:53:28] *** Joins: Thedarkb1-Work (~Thedarkb@62.232.253.82)
[09:54:18] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (Remote host closed the connection)
[10:03:01] *** Joins: cskr (~cskr@49.207.217.77)
[10:17:34] *** Quits: cskr (~cskr@49.207.217.77) (Quit: Leaving)
[10:17:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[10:24:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[10:26:23] *** Joins: fikran (~fikran@user/fikran)
[10:30:50] *** Joins: resamvi (~resamvi@user/resamvi)
[10:32:39] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[10:37:21] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[10:40:03] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:12:18] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.3)
[11:20:06] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[11:25:46] *** Joins: mohan43u (~mohan@user/mohan43u)
[11:25:49] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[11:26:12] *** Joins: mohan43u (~mohan@user/mohan43u)
[11:27:35] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[11:34:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[11:38:01] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 256 seconds)
[11:47:09] *** Joins: resamvi (~resamvi@2a02:8071:9190:5300:94f:87dd:a284:afc8)
[11:47:10] *** Quits: resamvi (~resamvi@2a02:8071:9190:5300:94f:87dd:a284:afc8) (Changing host)
[11:47:10] *** Joins: resamvi (~resamvi@user/resamvi)
[11:52:44] *** Joins: shka (~herr@109.231.0.226)
[11:53:20] *** Joins: jla (~jordi@64.225.79.195)
[11:53:20] *** Joins: rendar (~rendar@user/rendar)
[12:08:17] *** Joins: bluedust (~bluedust@117.204.152.129)
[12:28:03] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[12:30:09] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (Quit: You have been kicked for being idle)
[12:34:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:34:27] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[12:35:44] *** Joins: fikran (~fikran@user/fikran)
[12:35:58] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:51:18] *** Joins: tumdum (uid783@id-783.helmsley.irccloud.com)
[12:51:54] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[12:55:13] *** Joins: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9)
[12:56:51] *** Quits: carlavilla (~carlavill@188.26.219.124) (Remote host closed the connection)
[12:58:18] *** Joins: mrig (~mrig@user/mrig)
[13:02:19] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[13:02:46] *** Joins: aaaaa (~a@65.79.136.69)
[13:03:08] *** Joins: jla (~jordi@64.225.79.195)
[13:06:09] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[13:08:29] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[13:09:55] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[13:17:16] *** Quits: bluedust (~bluedust@117.204.152.129) (Remote host closed the connection)
[13:20:05] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[13:22:30] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[13:25:18] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[13:39:39] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[13:43:38] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[13:43:51] *** Joins: jla (~jordi@64.225.79.195)
[13:43:51] *** Joins: mrig (~mrig@user/mrig)
[13:50:56] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:51:58] *** Joins: bluedust (~bluedust@117.204.152.129)
[13:52:27] *** Joins: duca310 (~duca31@net-93-148-10-104.cust.dsl.teletu.it)
[13:59:32] *** Joins: zer0bitz (~zer0bitz@196.244.192.59)
[14:24:36] *** Quits: duca310 (~duca31@net-93-148-10-104.cust.dsl.teletu.it) (Remote host closed the connection)
[14:24:55] *** Joins: duca310 (~duca31@net-93-148-10-104.cust.vodafonedsl.it)
[14:26:50] *** Quits: duca310 (~duca31@net-93-148-10-104.cust.vodafonedsl.it) (Client Quit)
[14:27:09] *** Quits: bluedust (~bluedust@117.204.152.129) (Remote host closed the connection)
[14:27:10] *** Joins: duca310 (~duca31@net-93-148-10-104.cust.vodafonedsl.it)
[14:28:31] *** Parts: duca310 (~duca31@net-93-148-10-104.cust.vodafonedsl.it) ()
[14:30:12] *** Joins: carlavilla (~carlavill@2a0c:5a84:340b:7600:221:6bff:fe3b:cee4)
[14:31:19] *** Quits: jhchabran_ (~jhchabran@user/jhchabran) (Quit: ZNC 1.8.2 - https://znc.in)
[14:34:30] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[14:36:47] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.56)
[14:37:31] *** Joins: mrig (~mrig@user/mrig)
[14:37:58] *** Quits: jjido (~Denis@2a01:e0a:90c:e970:b5d7:43fa:58e1:8be9) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:39:07] *** Joins: jjonah (~jjonah@p200300d5d7245f00dea632fffeb3342f.dip0.t-ipconnect.de)
[14:39:17] *** Quits: zer0bitz (~zer0bitz@196.244.192.59) (Ping timeout: 240 seconds)
[14:40:43] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1)
[14:41:57] *** Joins: arinov (~arinov@178.240.175.124)
[14:43:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:44:14] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:44:17] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.56) (Ping timeout: 240 seconds)
[14:45:05] *** Joins: fikran (~fikran@user/fikran)
[14:46:42] *** Quits: jjonah (~jjonah@p200300d5d7245f00dea632fffeb3342f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:47:43] *** Joins: jjonah (~jjonah@p200300d5d7245f00dea632fffeb3342f.dip0.t-ipconnect.de)
[14:48:06] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[14:56:52] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.59)
[15:00:29] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1) (Ping timeout: 268 seconds)
[15:00:51] *** Quits: tumdum (uid783@id-783.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:02:55] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.59) (Read error: Connection reset by peer)
[15:07:25] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[15:33:40] *** Joins: lalitmee_ (~lalitmee@180.94.33.150)
[15:40:27] *** Joins: bluedust (~bluedust@117.204.152.129)
[15:41:24] *** Quits: novns (~novns@user/novns) (Remote host closed the connection)
[15:42:59] *** Joins: novns (~novns@user/novns)
[15:46:17] *** Joins: huoy99 (~huoy99@gateway/vpn/pia/huoy99)
[15:48:11] *** Joins: bluedust_ (~bluedust@185.248.85.25)
[15:49:12] *** Quits: slowtype- (~slowtyper@79.103.178.210.dsl.dyn.forthnet.gr) (Ping timeout: 268 seconds)
[15:51:37] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:51:37] *** Quits: bluedust (~bluedust@117.204.152.129) (Ping timeout: 240 seconds)
[15:56:14] <huoy99> i'm trying to port some java code to Go and i'm struggling to figure out how to properly convert bytes to ints where the java code uses the autoconversion feature between their byte (which i believe is an int8 in go) and ints. at the moment i'm just converting the bytes to ints but it doesn't give the right output. the culprit lines in the code are
[15:56:15] <huoy99> 24, 31, 33 in this playground link: https://go.dev/play/p/_fqclbFmPr9  asking here is a longshot as you may need to know java. any help is appreciated though :)
[16:04:17] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 240 seconds)
[16:08:15] *** Joins: casionaut (~casionaut@user/casionaut)
[16:23:50] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:29:11] *** Joins: bluedust (~bluedust@117.204.152.129)
[16:32:17] *** Quits: bluedust_ (~bluedust@185.248.85.25) (Ping timeout: 240 seconds)
[16:32:54] *** Joins: ivche (~ivche@77.28.121.160)
[16:33:01] <ivche> hey everyone!
[16:33:13] <ivche> Soo
[16:33:14] <ivche> I'm learning some go, and as I was reading through the const keyword's docs I couldn't help but ask,
[16:33:17] <ivche> does const in Go work the same as in JS? Where you can't reassign the value, but you can mutate object state or does it prevent u from doing that too?
[16:40:28] *** Joins: jla (~jordi@64.225.79.195)
[16:52:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[16:54:26] *** Joins: fikran (~fikran@user/fikran)
[16:57:54] <mrig> ivche: constants in go are really special you can not mutate them and more particularly they do not have a type, the consequence of which is that you can set a phenomenal precision when using constants that are real numbers, such as those used in engineering from time to time. I think that internally, to the compiler, they are quite likely strings under the hood.
[16:58:58] <mrig> The closest to a JS object that you might find, would probably be a struct, which is a much higher level construct than a string to the compiler.
[16:59:54] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[17:00:23] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[17:01:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:08:14] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Quit: Leaving)
[17:12:46] *** Joins: darkapex_ (~darkapex@user/darkapex)
[17:13:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:14:18] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 268 seconds)
[17:17:15] <fizzie> Not all `const`s are untyped. And untyped integer / floating-point constants are not internally treated as strings. IIRC, integer constants are 512-bit integers or something around that order of magnitude.
[17:18:28] <fizzie> (The spec guarantees 256 bits for integers, and 256 bits of mantissa and 16 bits of exponent for floats.)
[17:18:47] <mrig> oh of course yes some are typed, was just thinking of the literal numeric constants.
[17:19:38] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[17:20:14] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Remote host closed the connection)
[17:20:35] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[17:20:54] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Client Quit)
[17:25:57] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de)
[17:26:04] *** Quits: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de) (Changing host)
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:26:21] <ivche> oh so I can't mutate them in any way
[17:26:24] <mfiano> huoy99: I am too new to Go to be of much help, but I think your primary problem is your assumption that an int8 can represent your desired output values. an intN is a signed type. a uint and the byte alias are unsigned.
[17:27:01] *** Joins: darkapex (~darkapex@user/darkapex)
[17:28:13] <fizzie> Just out of curiosity... https://cs.opensource.google/go/go/+/master:src/go/constant/value.go suggests untyped numeric constants are internally either an int64 (if small enough), a big.Int, a big.Rat or a big.Float, with a 512-bit limit on float precision too.
[17:28:25] <huoy99> mfiano: thanks for the input. but i'm not sure what you mean since it's returning int and not int8
[17:29:54] <mfiano> The code needs comments. The algorithm is unclear to me as to why those particular values are expected.
[17:31:45] <huoy99> that's the output from the java code
[17:32:16] <huoy99> also other bitreaders like this one output those values: https://github.com/icza/bitio
[17:32:21] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[17:33:03] <mfiano> That doesn't explain the algorithm at play. Like is it just a case of sign extension?
[17:33:03] <mrig> ivche the concept of an object in javascript is similar to that of a struct in go, the way that you think about programming is going to have to shift perspective a little, if you want to mutate object types you can use an interface to achieve similar.
[17:33:03] <huoy99> i can't use that library because it's missing a feature that i need though
[17:34:12] <ivche> mrig: I did some reading, and it turns out constants in Go are a lot different than in js
[17:34:29] <fizzie> huoy99: Your problem is operator precedence.
[17:34:36] <fizzie> huoy99: See https://go.dev/play/p/zcWO3bB9cgw
[17:34:37] <ivche> It's not about constant assignment, but a total immutability
[17:35:59] * mfiano notices fizzie's output is wrong for the first value, and assumes that to be a typo in the original comment
[17:37:29] <fizzie> Specifically, `... << count - shift` is `(... << count) - shift` and not `... << (count - shift)` in Go.
[17:38:03] <huoy99> fizzie: thanks!
[17:38:20] <mrig> ivche: yes they are, having things somewhat more strictly defined can be very useful; Enjoy exploring.
[17:38:35] <ivche> mrig: z, ok := y.(map[string]interface{})
[17:38:42] <ivche> can you elaborate this statement for me?
[17:38:54] <mrig> ivche:  this is a bit of an anti pattern ;)
[17:39:09] *** Joins: kayprish (~kayprish@188.120.102.122)
[17:39:27] <ivche> It's a resource i'm following, and i think it's to illustrate a point
[17:39:40] <ivche> but i have trouble understanding the syntax
[17:39:52] <mrig> an interface is a container that will take any type, but when you use that which it contains you will have to either test for or specify what it is.
[17:40:23] <mrig> ivche: oh I missed the y.() there, this is a cast.
[17:40:50] <ivche> so it casts Z into the type of the element it containts?
[17:41:15] <ivche> i mean not z, but what's being assigned to z
[17:41:32] <mrig> it is quite a curious syntax for starting out learning about interface, can you link to the resource that you are using?
[17:41:33] *** Quits: newbie|2 (~kvirc@37.112.16.28) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:41:59] <fizzie> Every time I see a map[string]interface{}, my first thought is "someone's using encoding/json wrong".
[17:42:09] <ivche> https://ghostbin.com/NcvnO/raw mrig
[17:42:15] <ivche> here's the function
[17:42:44] <mrig> well that is not your resource
[17:42:46] <mrig> :P
[17:42:53] <ivche> im a bit wierded out cuz it presents this in the "Type assertion" section
[17:42:54] <fizzie> The official name for the y.(map[string]interface{}) is a "type assertion", just in case you'll be seeing that somewhere.
[17:43:01] <ivche> but it hasn't told me about interfaces yet
[17:43:17] <ivche> mrig: yeah, my resource is educative
[17:43:18] <fizzie> (Heh, good timing.)
[17:43:23] <ivche> fizzie: hahaha
[17:43:25] <ivche> yeah
[17:44:00] <ivche> Im a bit confused with the dot, does it access a property of y or?
[17:44:09] <fizzie> No, it's just syntax for saying a thing about a type.
[17:44:23] <mrig> ivche: If I were you I would look for some better learning materials.
[17:44:46] <ivche> mrig: yeah, but this seemed easy to digest, and I am confident I can pick out stuff that smells
[17:44:47] <fizzie> The semantics are: if the value in y (which must be an interface type) has the concrete type of `map[string]interface{}`, assign that value to `z` and and `true` to `ok`; otherwise, assign the zero value of that type to `z` and `false` to `ok`.
[17:45:07] <fizzie> (There's also a single-result form of a type assertion that just panics if the value didn't have the type.)
[17:45:09] <ivche> fizzie: i see
[17:45:14] <mfiano> After reading a lot of learning materials, I can say I got the most out of the new O'Reilly book.
[17:45:26] <ivche> mfiano: getting it rn
[17:45:39] <ivche> mfiano: I just don't want it to focus on programming concepts
[17:45:44] <ivche> and let me learn just Golang
[17:45:50] <ivche> with good practices and stuff
[17:46:33] <ivche> does the book do that?
[17:46:52] <mfiano> I'm not sure what "programming concepts" means in this regard. Semantics of Golang are very different from the same concepts in other languages.
[17:47:04] <mrig> "The go programming language" is a great book.
[17:47:37] <ivche> no i meant, i don't need it to teach me programming
[17:47:46] <ivche> i need it to teach me Go specific stuff
[17:47:52] <mrig> it will explain how objects can be constructed, how you cat assert their type when retrieving them from an interface amongst many other things.
[17:47:58] <mrig> s/cat/can/
[17:48:28] <ivche> Good
[17:49:55] <ivche> "Introducing Go" is that the one?
[17:50:13] <mfiano> Not the one I was referring to
[17:50:29] <ivche> What is it called then?
[17:50:36] <mfiano> Learning Go - An Idiomatic Approach to Real-World Go Programming
[17:50:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[17:51:16] <ivche> okay, got the ebook
[17:51:31] <mfiano> You mean you stole it?
[17:51:39] <ivche> no, i'm not like that
[17:51:45] <ivche> I buy good material
[17:51:51] <mrig> "The go programming language" is also a great book, you can get the first chapter from its website, to try out the questions.
[17:52:06] <mfiano> I was not very satisified with the dated "Phrasebook"
[17:52:14] *** Quits: huoy99 (~huoy99@gateway/vpn/pia/huoy99) (Quit: Client closed)
[17:52:17] <mfiano> I think that was very dry and examples were not very great.
[17:52:27] <ivche> I mean, I prefer doing one resource at a time
[17:52:38] <mrig> I thought that they are fantastic an the content very funny.
[17:52:44] *** Joins: g4wjs (~quassel@mail.classdesign.com)
[17:52:50] <mrig> but can understand why some would miss the points.
[17:53:04] <mrig> horses for courses and all that.
[17:53:07] <mfiano> What is "they"?
[17:53:45] <mrig> it is a collective pronoun in this case referring to the set of questions and examples in the book.
[17:54:01] <mrig> lol, facepalm
[17:54:18] <mfiano> lol, I meant which of the 2 books.
[17:54:43] *** Quits: henry40408 (~henry4040@175.181.186.198) (Quit: Ping timeout (120 seconds))
[17:54:51] *** Quits: jlaffaye (~jlaffaye@user/jlaffaye) (Remote host closed the connection)
[17:55:01] <ivche> "The go programming language" i think
[17:55:07] *** Joins: henry40408 (~henry4040@175.181.186.198)
[17:57:44] <ivche> https://i.imgur.com/5dnfyrU.png
[17:57:48] <ivche> let's get it!
[17:58:07] <mfiano> I borrowed the Phrasebook from a friend and finished it in a day (it's not very big). I wasn't impressed so I bought the new "Learning Go" O'Reilly book about idiomatic Go usage, and I am thoroughly enjoying it. It does a much better job of explaining low-level details and design choices of the language, and isn't filled with typos and poor type-setting like the former.
[17:58:31] <mfiano> I might check out "TGPL" too at some point if it is a good resource.
[17:59:19] *** Quits: g4wjs (~quassel@mail.classdesign.com) (Ping timeout: 268 seconds)
[17:59:21] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[17:59:35] <avemestr> A bit sad that they haven't updated TGPL... quite a bit has changed since the v1.5 days.
[18:01:59] <mrig> the content is so fundamental though that the things missed are really syntactic sugar mostly.
[18:02:31] <mrig> I class it with knr second edition which is still relevant, even if much is considered to be wrong by many.
[18:02:45] <mrig> context is a curious thing.
[18:04:56] <avemestr> If you're already well-versed in Go, you know which parts match go-current. If you're newcomer, you'll be confused why the book doesn't mention "go mod init".
[18:05:40] <mfiano> I think I am getting more from "Learning Go" than I did from the Tour, "Effective Go", and the phrasebook, because it explains design decisions very well, and contrasts the unique semantics of its features with those of other languages, and instructs you how to (and how not to) write idiomatic Go.
[18:06:17] <avemestr> mfiano: Sounds like a book worth checking out. Added to the endless list of "books I want to check out" :-)
[18:06:17] *** Quits: kayprish (~kayprish@188.120.102.122) (Read error: Connection reset by peer)
[18:07:58] <mfiano> I haven't actually written anything more than quick test code though, as I'm still reading it (using a development checkout)
[18:08:19] <mrig> avemestr: ah yes well, unfortunately this is true. But in all honesty the go modules section also really would require a course in using git and versioning too, but this is not really the language.
[18:08:25] <ivche> what are u guys using go for?
[18:08:27] <ivche> server stuff or?
[18:08:30] <mfiano> I want to learn this language carefully, because I'm coming from a language very different than the Algol derivatives most came from :)
[18:08:42] <ikke> ivche: mostly utilities
[18:09:19] <mrig> ivche: I've an implementation of a astronomical library that i've ported to go, its not finished yet though.
[18:11:09] <ivche> do you accept PRs?
[18:11:41] *** Joins: g4wjs (~quassel@mail.classdesign.com)
[18:12:42] <mfiano> One thing I found a bit overwhelming so far, is the plethora of linters available. I mean just go `golangci-lint help linters` and that's not even all of them. Also finding popular libraries seems to be a challenge, as pkg.go.dev wants a search term, instead of drilling down into categories sorted by GitHub stars or some popularity metric.
[18:14:18] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:17:48] <mrig> mfiano: go by design is very easy to analyse, so it is easy to write linters for, the point is that you can use the abstract syntax tree yourself; One of the main mantras or proverbs is 'A little copying is better than a little dependency.' See log4j to understand why.
[18:18:05] *** Quits: g4wjs (~quassel@mail.classdesign.com) (Ping timeout: 256 seconds)
[18:19:16] <mfiano> mrig: I come from 20 years of exclusive use of a language whoses syntax is the same as its own AST. :)
[18:20:40] <ikke> Some linters are very oppinionated and / or questionable
[18:20:43] <mrig> Oh which language? ;{
[18:20:48] <mrig> :)
[18:20:54] <ikke> I assume lisp like languages?
[18:21:00] <mfiano> Yes, ANSI Common Lisp
[18:21:19] <mfiano> I wonder how generics are going to shape that little copying bit of the mantra. I would assume it will greatly reduce it.
[18:22:27] <mrig> well you can still apply it, no matter what the flock are doing.
[18:22:33] <sztanpet> doubtful
[18:22:55] <mfiano> I also would assume that generics will get some mixed reviews for a language community that mostly favors simplicity and comprehensibility over concision/DRY
[18:23:09] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[18:23:52] *** Joins: fef (~thedawn@user/thedawn)
[18:27:19] <mfiano> I played around with them a little bit, and I think the way they integrated it into the language was very Go-like, and backwards compatible, so seems like a welcome change to me as a beginner.
[18:27:25] *** Joins: egm (~egm@user/egm)
[18:28:14] <ivche> did someone say common lisp?
[18:28:15] <ivche> :D
[18:30:25] <mfiano> Heh, yeah, I know. I'm an old greybeard using secret alien technology from the 50's.
[18:33:44] <ivche> yo guys, do I need to initialize a module before using make as my build tool?
[18:34:13] <ivche> Because the book doesn't mention it, but I get this error
[18:34:14] <ivche> go: go.mod file not found in current directory or any parent directory
[18:35:38] <ivche> oh nvm, I figured there's an env variable that disables it
[18:35:38] <resamvi> Did the book mention "go mod init <name>" at some point?
[18:35:38] <ikke> ivche: do have have a go.mod file?
[18:35:42] <ikke> ah
[18:35:54] <ikke> GO111MODULES?
[18:35:59] <ivche> GO111MODULE=off
[18:36:03] <ikke> right
[18:37:02] *** Quits: Liexei (~Liexei@user/liexei) (Ping timeout: 240 seconds)
[18:39:57] *** Quits: barnoby (~barnoby@2603-6000-a409-2660-00ad-e02d-acef-6e5f.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:41:09] *** Joins: barnoby (~barnoby@2603-6000-a409-2660-f9d3-2587-b407-8893.res6.spectrum.com)
[18:41:56] *** Joins: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se)
[18:56:35] *** Joins: arinov (~arinov@213.194.126.155)
[19:01:55] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[19:02:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[19:03:33] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:03:47] *** Joins: fikran (~fikran@user/fikran)
[19:04:26] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[19:06:44] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:09:37] <joshbaptiste> hmm running "go get github.com/go-redis/redis/v8" but it's not in my go env GOROOT which is $HOME/.local/go
[19:13:48] <fizzie> Nothing goes to $GOROOT other than the standard library and the Go tools.
[19:14:31] <fizzie> If you're in module-aware mode, `go get` will update the relevant go.mod file and the module cache (`go env GOMODCACHE`).
[19:15:20] <joshbaptiste> hmm not sure... just want to start a project using this module
[19:15:46] <joshbaptiste> vscode is complaining can't find it
[19:16:11] *** Joins: g2anj (~v@58.228.230.4)
[19:16:17] *** Quits: egm (~egm@user/egm) (Ping timeout: 240 seconds)
[19:16:34] <joshbaptiste> import "github.com/go-redis/redis/v8"
[19:17:03] <fizzie> Do you have a go.mod file for your project? Does it have a `require` line for that in it? (`go get ...` should have added one.)
[19:18:25] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:18:29] <joshbaptiste> ah no go.mod .. just started a blank file.go started with vscode and added import statement than errors
[19:18:40] <joshbaptiste> where should i read to understand more on this
[19:18:56] *** Joins: bindu (~bindu@user/bindu)
[19:19:05] <fizzie> https://go.dev/doc/code perhaps.
[19:20:21] <joshbaptiste> ah ok thx
[19:20:45] <fizzie> But the short version is `go mod init <something>` + `go get github.com/go-redis/redis/v8` should set things up properly. Where <something> is by convention a thing that starts with a domain name where you intend the code to eventually live, though if it's something you're not planning to publish it can be pretty much anything.
[19:21:57] <fizzie> Alternatively, `go mod init <something>` + write one of those import statements in a .go file + `go mod tidy` to automatically add the dependency.
[19:23:40] *** Joins: Everything (~Everythin@37.115.210.35)
[19:24:38] <joshbaptiste> ah
[19:29:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:31:19] *** Joins: gopherkh (~Administr@185.97.93.3)
[19:36:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:39:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[19:45:25] *** Joins: Liexei (~Liexei@user/liexei)
[19:54:32] *** Quits: mobbi_ (~quassel@dfsm20yfq3mh3v8xkw21y-3.rev.dnainternet.fi) (Ping timeout: 240 seconds)
[19:56:04] *** Joins: mobbi (~quassel@dfsm20ydpm85l8nn-br0t-3.rev.dnainternet.fi)
[19:56:10] *** Joins: arinov (~arinov@213.194.126.155)
[20:00:49] *** Joins: zer0bitz_ (~zer0bitz@185.112.82.230)
[20:01:15] *** Joins: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[20:03:50] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 260 seconds)
[20:04:35] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[20:10:14] *** Joins: rogersm (~rogersm@90.166.180.250)
[20:11:02] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[20:21:57] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[20:23:37] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:27:21] *** Joins: holgersson (~quassel@user/holgersson)
[20:28:05] <mikoto-chan> can someone link me Go's sprintf specification?
[20:28:42] <ikke> https://pkg.go.dev/fmt
[20:29:59] <mikoto-chan> ikke: my function returns 3 integers and I was wondering how I could format them in a string without doing `a, b, c := foo()`
[20:30:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:30:50] <ikke> If you return a list, you can do fmt.Sprintf("%d %d %d", lst...)
[20:32:14] <fizzie> If the default format separated by spaces is sufficient, you can use fmt.Sprint and the feature that the entire set of return values can be passed to a function that can accept them as arguments: https://go.dev/play/p/lTjZPhcRPLO
[20:33:02] <fizzie> To do `fmt.Sprintf("%d %d %d", lst...)` the lst would need to be an []interface{}, which sounds unlikely.
[20:33:18] <ikke> hmm, right
[20:40:16] *** Quits: lalitmee_ (~lalitmee@180.94.33.150) (Ping timeout: 268 seconds)
[20:43:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:46:46] <LiENUS> you could use fmt.Sprint(foo())
[20:46:54] <LiENUS> if i understand their question corectly
[20:47:46] <LiENUS> you wouldn't be able to do any of the formatting stuff though
[20:51:30] <LiENUS> you could however do something like https://go.dev/play/p/zwG8PZfCGfU
[20:52:35] <LiENUS> have an intermediate function between your that could easily return a string and just return that sprintf instead of printf
[20:54:07] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:55:42] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[21:01:03] <mikoto-chan> thanks
[21:02:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[21:04:41] <rogersm> team, quick question on golang deployment.
[21:05:16] *** Quits: chameleon (~chameleon@62.ip-51-89-164.eu) (Quit: ZNC - https://znc.in)
[21:05:29] <ikke> Takes too long for a quick question :)
[21:05:36] <rogersm> for a web public facing golang app I plan to put on front of it Cloudfare service. Should I point cloudfare to golang or to a nginx proxy that is between cloudfare and the golang app
[21:06:28] <ikke> Do you have static assets that you need to serve besides what you provide with go? Do you handle tls yourself?
[21:07:03] *** Joins: chameleon (~chameleon@62.ip-51-89-164.eu)
[21:07:20] *** Joins: egm (~egm@user/egm)
[21:07:24] *** Joins: jla (~jordi@72.red-88-20-39.staticip.rima-tde.net)
[21:07:42] <rogersm> I will have a minimum amount of static assets
[21:08:14] <ikke> Does your application serve them, or are they stored on disk?
[21:08:23] <rogersm> disk
[21:08:31] <ikke> Then you need something like nginx in front
[21:08:31] <rogersm> but the app needs to check for access rules
[21:08:37] <ikke> hmm
[21:08:41] <rogersm> something that nginx won't be able to do
[21:08:54] <ikke> ok, so your app handles them
[21:08:57] <rogersm> yep
[21:09:02] <rogersm> let me rephrase it
[21:09:13] *** Quits: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se) (Ping timeout: 256 seconds)
[21:09:22] <rogersm> does it make sense to have nginx proxy as a security layer or cloudfare is enough
[21:10:46] *** Joins: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se)
[21:11:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:12:20] *** Quits: jla (~jordi@72.red-88-20-39.staticip.rima-tde.net) (Ping timeout: 268 seconds)
[21:12:44] <mikoto-chan> LiENUS: tried to do what you said but ended up with this
[21:12:45] <mikoto-chan> https://go.dev/play/p/YLMoT64WvXK
[21:13:01] <LiENUS> @mikoto-chan, you have to use sprint
[21:13:03] <mikoto-chan> tried to look in the time package for a more efficient way but couldn't find anything
[21:13:08] *** Joins: fikran (~fikran@user/fikran)
[21:13:16] <LiENUS> or an intermediate function
[21:14:02] <fizzie> Or the Format() method, for that specific thing.
[21:15:15] <LiENUS> @mikoto-chan, https://go.dev/play/p/3T5_RxC7hUy that would be the only way to "directly" pass those three returns to sprintf
[21:15:56] <fizzie> Specifically, `t.Format("15:04:05")` (which gives a string) rather than `t.Clock()` (which gives three integers).
[21:16:19] <LiENUS> https://go.dev/play/p/FxNNL7LAgR2 oh typo on the empty interface
[21:16:29] <mikoto-chan> fizzie: yeah that's what I was looking at too
[21:18:17] <mikoto-chan> fizzie: why 15:04:05 btw? I have never understood the idea behind those magic numbers in the time package
[21:18:41] <LiENUS> its just 1 2 3 4 5 in the order they would be printed for the default formatting
[21:19:01] <fizzie> It's just how the time package specifies formats.
[21:19:17] <fizzie> You give it a template that specifies how a particular reference time would look like, and it figures it out from there.
[21:19:29] <fizzie> (It's not universally loved.)
[21:19:30] <LiENUS> january 1st 03:04:05PM 2006 -0700
[21:19:33] <mikoto-chan> I just tried 11:22:33 and it didn't like that
[21:19:41] <mikoto-chan> LiENUS: unix epoch?
[21:19:46] <LiENUS> err january 2nd not 1st
[21:19:47] <mikoto-chan> oh no nvm
[21:19:49] <mikoto-chan> lol
[21:19:51] <LiENUS> 01 02 03 04 05 06 07
[21:20:00] <fizzie> You can't give it _random_ numbers (like 11:22:33), of course.
[21:20:02] <LiENUS> just think month day hour minute second year timezone and count up
[21:20:12] <mikoto-chan> thanks, now it's evident
[21:20:14] <fizzie> (Otherwise how'd it know whether your 22 and 33 mean seconds or minutes?)
[21:20:24] <LiENUS> id prefer the YYYY-mm-dd style but its not hard once you get the hang of it
[21:20:42] <LiENUS> i do forget the order and find myself googling but when im in a session dealing with times its easy enough to keep in my head
[21:21:01] <fizzie> What I keep forgetting is, for time.Parse, which one's the template and which one's the input. :)
[21:21:29] <LiENUS> https://yourbasic.org/golang/format-parse-string-time-date-example/ this page solves both of our problems right in one spot lol
[21:23:26] *** Quits: egm (~egm@user/egm) (Ping timeout: 268 seconds)
[21:27:22] *** Joins: jla (~jordi@64.225.79.195)
[21:28:17] *** Quits: zer0bitz_ (~zer0bitz@185.112.82.230) (Ping timeout: 240 seconds)
[21:28:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.56)
[21:39:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:48:00] *** Joins: phoenixh (~phoenixh@p200300dd6f0738006b3e3e611567cbb0.dip0.t-ipconnect.de)
[21:54:03] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[21:58:29] *** Quits: phoenixh (~phoenixh@p200300dd6f0738006b3e3e611567cbb0.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:03:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:06:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:09:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[22:10:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:16:28] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 268 seconds)
[22:20:13] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[22:21:12] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[22:28:00] *** Quits: gopherkh (~Administr@185.97.93.3) (Remote host closed the connection)
[22:28:23] *** Joins: gopherkh (~Administr@185.97.93.3)
[22:33:31] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:34:56] *** Quits: Liexei (~Liexei@user/liexei) (Ping timeout: 245 seconds)
[22:37:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d3b-cffd-943a-eda6.res6.spectrum.com)
[22:43:34] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[22:46:12] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 240 seconds)
[22:46:25] *** Joins: jla (~jordi@64.225.79.195)
[22:51:19] *** Joins: bluedust_ (~bluedust@185.206.227.136)
[22:54:13] *** Quits: bluedust (~bluedust@117.204.152.129) (Ping timeout: 240 seconds)
[22:57:11] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:57:29] *** Joins: bluedust (~bluedust@194.37.96.152)
[23:00:52] *** Quits: bluedust_ (~bluedust@185.206.227.136) (Ping timeout: 268 seconds)
[23:02:08] *** Joins: Liexei (~Liexei@user/liexei)
[23:08:28] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[23:08:38] *** Quits: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:11:27] *** Joins: tumdum (uid783@id-783.helmsley.irccloud.com)
[23:11:49] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[23:15:32] *** Quits: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[23:16:06] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:17:42] *** Joins: bluedust_ (~bluedust@103.165.167.220)
[23:20:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:21:15] *** Quits: bluedust (~bluedust@194.37.96.152) (Ping timeout: 256 seconds)
[23:22:29] *** Joins: fikran (~fikran@user/fikran)
[23:23:37] *** Joins: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[23:24:13] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:26:47] *** Quits: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[23:29:10] *** Joins: bluedust (~bluedust@185.248.85.10)
[23:32:26] *** Quits: bluedust_ (~bluedust@103.165.167.220) (Ping timeout: 260 seconds)
[23:35:47] *** BuddyTheElf is now known as launchd
[23:37:30] *** Joins: darkapex_ (~darkapex@user/darkapex)
[23:38:27] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[23:48:15] *** Quits: bluedust (~bluedust@185.248.85.10) (Remote host closed the connection)
[23:51:35] <mrus> does anyone know an implementation that allows to range over a slice to convert it to a different format and in the same step sort it?
[23:53:14] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[23:53:41] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:39b4:753:3ee6:7868)
[23:54:49] <b0nn> You cannot, because of the typing
[23:56:21] <b0nn> I mean, if you implemented the Less or Swap functions to convert before comparison, the signature of the Less function would bebroken Less(i, j int) bool would be Less(i, j, int or int32) bool
[23:56:48] <b0nn> When Less encounters one val that's been converted and another that hasn't
