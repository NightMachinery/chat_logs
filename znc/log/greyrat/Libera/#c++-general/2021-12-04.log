[00:01:52] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:22:44] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[00:24:16] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[00:26:27] <RandomReader> pinchartl - the straight int constructor for an fd owner is the same approach I've taken in the past .. to cut down on issues, I limit the functions directly dealing with fds ahead of time, and they all return the owned object
[00:26:43] <RandomReader> so they're more like factories
[00:27:16] <RandomReader> (since the ways you get fds are so varied, there's no reasonable way to unify creation of an owning type)
[00:27:41] <RandomReader> I haven't felt the need to treat it like a move, so far
[00:28:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 240 seconds)
[00:29:19] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[00:29:49] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[00:31:19] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[00:32:19] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[00:33:29] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[00:35:15] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:27] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:37:45] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:38:16] *** Quits: paul424 (~tom@ip-37-248-154-21.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:39:51] *** Joins: noarb (~noarb@user/noarb)
[00:44:15] <pinchartl> RandomReader: thanks for your feedback
[00:45:41] <pinchartl> all my functions that create an fd return an instance of UniqueFD (or SharedFD in some specific cases), but I also expose an API that takes fds in, and it has to comply with a pre-defined C API that I have no control on. it's limited in size though, so I think that code can just be carefully reviewed
[00:46:29] <pinchartl> I only had SharedFD to start with, and when someone proposed a SharedFD::release() function I had to bite the bullet and move most users to a new UniqueFD
[00:46:50] <pinchartl> that are proposals that are very effective at nerd-snippingm e
[00:47:00] <RandomReader> lol
[00:47:33] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[00:49:41] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[00:53:07] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[00:53:15] *** Joins: johnny (~johnny@user/johnny)
[00:54:20] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:3212:7c7e:4f66:bf77)
[00:54:20] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:3212:7c7e:4f66:bf77) (Changing host)
[00:54:20] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:54:54] <imMute> pinchartl: would it make sense to change the design to a FileDescriptor class that models just the FD and wrap it in std::unique_ptr<> or std::shared_ptr<> based on usage?
[00:55:41] <imMute> pinchartl: FileDescriptor could be made move-only (which I think would be similar to your current UniqueFD) or it could be made copyable by using dup()
[00:58:40] <pinchartl> I've thought about that, but decided not to, and I don't remember why :-) I'll have another look, maybe things have changed since then
[00:58:58] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[00:59:17] <pinchartl> my SharedFD is actually a wrapper of a std::shared_ptr<Descriptor> with a dup() function for real copies
[00:59:57] <imMute> I've been down that road too and i used the std smart pointers because people were familiar with them and I made my FileDescriptor act as much like a fd as I could (doing the dup() stuff)
[01:00:01] <pinchartl> but UniqueFD wraps an int only, moved to std::unique_ptr<Descriptor> would then require allocating two objects, it's a bit of a waste of memory and CPU
[01:00:29] <pinchartl> but it's still an interesting idea, I'll think about it again
[01:00:30] <imMute> I think I also had an implicit conversion to int so that it could be used in the C calls directly and I didn't have to worry about someone calling getFdInt() and storing that somewhere and then getting out of sync
[01:01:31] <imMute> my FileDescriptor was just   class FileDescriptor { int fd; public: /* public API */ };  so there's *no* dynamic allocation unless it's wrapped in unique_ptr or shared_ptr.  and all 3 ways of using it were valid
[01:14:53] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[01:14:58] *** Joins: CaCode (~CaCode@user/cacode)
[01:18:24] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:18:33] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[01:24:03] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[01:24:03] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Read error: Connection reset by peer)
[01:28:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Quit: Leaving)
[01:30:53] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[01:31:06] *** Joins: chozorho (~chozorho@2601:146:300:c30::1df0)
[01:33:33] <cbreak> I would not recommend abusing unique_ptr or shared_ptr for this
[01:33:49] <cbreak> FDs are not pointers, they can't be dereferenced in any reasonable way
[01:33:57] *** Quits: tesuji (~quassel@2a02:908:180:9500:3852:8ba:a318:ea61) (Ping timeout: 252 seconds)
[01:35:14] <johnny> dealing with plain magic numbers seems kinda funny though. have any of you folks played around with libraries that refer to uhmm "strong" typing?
[01:36:48] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of tea smugglers at https://indiedevs.net/)
[01:37:27] <cbreak> Creating an owner type for an FD like unique_ptr is fairly easy
[01:37:49] <cbreak> and one would obviously give it a better API for FD than unique_ptr has
[01:37:55] <cbreak> no -> or * or [] overload
[01:38:02] *** Joins: markong (~kvirc@213.146.188.203)
[01:38:20] <cbreak> but maybe helper member functions, or even value semantic via dup, as was mentioned before
[01:38:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:07] *** ChanServ sets mode: +v npaperbot
[01:41:50] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:45:18] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:46:00] <RandomReader> "strong typedefs"? a little, but so far haven't used one in a significant project
[01:47:01] <RandomReader> it's been on my mental to-do list for a while, but I haven't done anything that's triggered my sense of "this should be a pervasive unit of some sort"
[01:47:19] <cbreak> boost units ftw :D
[01:50:45] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:51:05] <RandomReader> in general I tend to write ad-hoc types for things .. this fd case is one, or disambiguating a coordinate from an adjustment to it, since only a couple operations were needed .. that sort of thing
[01:51:41] <RandomReader> but I also don't remember much recently where I cared about an arithmetic type .. that I think I'd be tempted to use a library for, since I wouldn't want to write all those operations
[01:52:09] <RandomReader> well, other than indices, but those are usually contextual enough .. usually
[01:55:39] <imMute> cbreak: wait, why you using unique or shared ptr here be "abusing" them?   or are you talking about pinchartl's descriptions?
[01:56:02] <cbreak> putting non-pointers into unique_ptr or shared_ptr is abusing them
[01:56:39] <imMute> so std::unique_ptr<SomeDataType> is abusing them???  I'm confused as to what you mean?
[01:56:57] <cbreak> for that you put a pointer in
[01:57:17] <imMute> I still don't get waht you mean by that
[01:57:17] <senoraraton> I'm trying to install the SDL TTF font package, and it requires freetype 2.  pacman -sS freetype shows freetype2 as installed, but freetype-config is not found.
[01:57:31] <cbreak> a pointer to SomeDataType, which is expected to point to an object of SomeDataType
[01:57:37] <cbreak> but FDs are not pointers
[01:57:57] <cbreak> FDs are integers
[01:58:53] <senoraraton> Is there a way to see where the package is installed to?
[01:59:10] <imMute> I still don't understand.  I was never suggesting passing the fd int to the unique_ptr constructor, but rather FileDescriptor was a class that wrapped an int (the fd) and then *that* class could be put into a unique_ptr or shared_ptr (or just used by itself)
[01:59:15] <cbreak> senoraraton: on ubuntu, there's dpkg-query -S
[01:59:24] <cbreak> maybe your distro has something similar
[01:59:26] <senoraraton> O, I'm in the wrong channel. >.<  Sorry.
[01:59:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:00:04] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:00:19] <cbreak> imMute: then you'd have to dynamically allocate, which is wasteful, for no good reason
[02:00:27] *** Quits: varioust (~Srain@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[02:00:33] <cbreak> if you already have a FileDescriptor wrapper type, making it movable is trivial
[02:00:37] <cbreak> so no need for unique_ptr
[02:00:56] <imMute> but when the lifetime forces you to dynam ically allocate, then wrap it in shared/unique ptr.  if the lifetime is fixed, just use FileDescriptor itself.
[02:01:08] <cbreak> making it shared ownership is also trivial, by simply giving it value semantic, such as via dup, to some degree
[02:01:31] <cbreak> that way, you save yourself any dynamic allocation outside the kernel
[02:02:09] <imMute> and there will *never* be a case where lifetime/ownership requirements *force* you to use dynamic allocation?
[02:02:25] <cbreak> I don't think so.
[02:02:42] <cbreak> you can design your wrapper type to handle ownership transfer like unique_ptr does
[02:02:56] <cbreak> or to act like shared_ptr, in a way
[02:03:00] <PJBoy> nothing ever forces you to use dynamic allocation
[02:03:36] <imMute> yeah, nevermind.
[02:03:41] <cbreak> an FD is a handle, it refers to an object in kernel space
[02:03:50] <cbreak> it's not a pointer, but it has indirection very similar to pointers
[02:04:13] <PJBoy> actually there is a very specific locale thing that requires you to dynamically allocate
[02:04:22] <PJBoy> but that's stupid
[02:04:30] <cbreak> PJBoy: it forces you to learn english... :D
[02:05:11] *** Joins: varioust (~Srain@cpe-108-167-11-88.neb.res.rr.com)
[02:08:24] *** Joins: SrainUser (~Srain@cpe-108-167-11-88.neb.res.rr.com)
[02:08:38] <PJBoy> I need it
[02:08:44] <PJBoy> my typing has been so bad this year
[02:09:23] <johnny> at least i can blame mine on keyboard issues
[02:10:59] *** Quits: varioust (~Srain@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 252 seconds)
[02:17:58] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:18:21] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:20:47] *** Joins: proller (~p@80.240.216.69)
[02:26:10] <Alipha> imMute: if you weren't able to or didn't want to use dup, you could give FileDescriptor shared ownership without dynamic allocation by doing `struct FileDescriptor { int fd; FileDescriptor *prev, *next; };` in order to maintain a linked list of the FileDescriptors which all refer to the same fd
[02:26:33] *** Joins: Guest195 (~Guest19@2601:647:5280:2a50:a4d0:e86d:318c:d3f8)
[02:27:02] <Guest195> hello. Why can't I push a stringstream to a vector? I get reference to deleted function error. vec.push_back(std::move(myss)); works fine though
[02:28:21] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[02:28:42] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:3212:7c7e:4f66:bf77)
[02:28:43] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:3212:7c7e:4f66:bf77) (Changing host)
[02:28:43] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:28:50] <imMute> Guest195: because stringstreams can't be copied
[02:28:51] <Alipha> Guest195: none of the stream classes are copyable. Doesn't particularly make sense why stringstream isn't though
[02:29:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:31:44] <Guest195> ah I see, thanks inMute and Alipha
[02:31:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2129:7998:3c7b:2425) (Quit: Leaving)
[02:33:11] <PJBoy> stringbuf is move-only
[02:33:16] <PJBoy> but I'm entirely sure why
[02:33:21] <PJBoy> *not entirely sure why
[02:38:02] <Guest195> ah, I should have seen copy assignment operator of std::stringstream and seen that it was deleted.
[02:38:15] <Guest195> trying to plug gaps in my knowledge
[02:42:01] *** Joins: proller (~p@2a02:6b8:b081:1210::1:1f)
[02:44:21] *** Quits: SrainUser (~Srain@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 252 seconds)
[02:53:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[02:55:36] *** Quits: markong (~kvirc@213.146.188.203) (Read error: Connection reset by peer)
[02:59:23] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 252 seconds)
[03:02:02] *** Joins: johnny (~johnny@user/johnny)
[03:05:25] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[03:06:21] *** Joins: johnny (~johnny@user/johnny)
[03:06:45] <kaichiuchu> jesus christ
[03:06:53] <kaichiuchu> does anyone know how to tell googletest to forcibly pass a test
[03:07:20] <kaichiuchu> (the test condition isn't an assertion)
[03:09:28] <PJBoy> `return;`?
[03:10:09] <kaichiuchu> w-will that actually work the way it's supposed to
[03:10:20] <kaichiuchu> I thought it would throw some type of error if you'd just not use any of the googletest faculties
[03:13:57] <PJBoy> I don't see why not
[03:20:26] <kaichiuchu> okay I guess that worked
[03:20:27] <kaichiuchu> overthought it
[03:20:33] <kalven> you can also use --gtest_filter to exclude test(s)
[03:26:35] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[03:26:59] *** Joins: ferdna (~ferdna@user/ferdna)
[03:28:18] <kaichiuchu> also
[03:28:31] <kaichiuchu> is there any difference between using an initializer list vs an in-class initializer?
[03:28:37] <kaichiuchu> my instincts say yes because nothing is ever simple
[03:28:39] *** Joins: Colt (~Colt@user/colt)
[03:30:36] <kaichiuchu> noted on the --gtest_filter portion
[03:31:46] <PJBoy> there's no notable difference
[03:32:16] <kaichiuchu> okay
[03:32:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[03:35:52] *** Joins: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612)
[03:36:18] <senoraraton> How do I assign a set of strings {'1','2','3'} to a vector?
[03:36:42] <Guest195> vector<string> myvec{"1", "2", "3"};
[03:37:00] <Guest195> you're welcome senoraraton
[03:38:47] <senoraraton> std::vector<std::string> keys {'1','2','3'};  Yes?  Its still not compling.
[03:39:24] <PJBoy> 'c' isn't a string
[03:39:29] <PJBoy> it's a char literal
[03:39:42] <PJBoy> "s" is a string literal
[03:39:52] <PJBoy> single quotes vs double quotes
[03:39:55] <senoraraton> Ahh, yeah that fixed it.  Thanks!
[03:40:21] *** Joins: aegon (~mike@174.127.249.180)
[03:42:45] *** Quits: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612) (Ping timeout: 268 seconds)
[03:43:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:44:47] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[03:51:27] *** Joins: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612)
[03:57:50] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:00:06] <senoraraton> How do I begin to debug: terminate called after throwing an instance of 'std::logic_error' what():  basic_string::_M_construct null not valid
[04:00:12] <senoraraton> zsh: abort (core dumped)  ./rpg
[04:00:14] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[04:14:30] <very_sneaky> set breakpoints in your editor and step through it to see what's happening?
[04:15:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:15:59] <Guest195> senoraraton : share snippet of code where you see the crash
[04:18:10] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:18:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:23:43] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[04:24:02] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[04:25:03] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[04:25:16] <PJBoy> sounds like you did a `std::string bad_string = nullptr;`
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:56] <PJBoy> or `f(nullptr);` with `void f(std::string str);`
[04:26:06] *** Quits: Guest195 (~Guest19@2601:647:5280:2a50:a4d0:e86d:318c:d3f8) (Quit: Client closed)
[04:26:50] *** Joins: Terminus (~null@user/terminus)
[04:31:03] *** Quits: causative (~halberd@user/causative) (Ping timeout: 250 seconds)
[04:31:54] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[04:33:29] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:7c39:aad5:22e:d595) (Remote host closed the connection)
[04:44:15] *** Joins: causative (~halberd@user/causative)
[04:49:00] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:04:03] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Remote host closed the connection)
[05:06:59] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[05:14:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2d70:be4:aaac:8b09) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:14:43] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:15:44] *** Joins: SrainUser (~Srain@cpe-108-167-11-88.neb.res.rr.com)
[05:15:53] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:2576:d244:71b:1dc7)
[05:17:48] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[05:20:03] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[05:20:25] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[05:28:50] *** Joins: ferdna (~ferdna@user/ferdna)
[05:31:22] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[05:31:43] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:33:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[05:33:21] *** Joins: CaCode- (~CaCode@user/cacode)
[05:33:26] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[05:34:35] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[05:36:21] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[05:38:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:08] *** ChanServ sets mode: +v npaperbot
[06:10:36] *** amosbird- is now known as amosbird
[06:18:20] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[06:21:12] *** Joins: teepee (~teepee@openscad/teepee)
[06:21:25] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[06:30:23] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:35:51] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[06:42:03] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:2576:d244:71b:1dc7) (Quit: Client closed)
[06:42:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:54:03] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:21:01] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:24:12] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Quit: Lost terminal)
[07:48:30] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[07:49:06] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[07:53:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[08:01:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:ed9e:6da6:fee6:2db6)
[08:04:05] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:654a:7e1b:4ab5:b4bb) (Ping timeout: 252 seconds)
[08:07:51] *** Joins: aegon (~mike@174.127.249.180)
[08:20:40] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[08:26:50] *** Joins: seninha (~seninha@user/seninha)
[08:30:33] *** Joins: aleios (~aleios@user/aleios)
[08:30:44] *** Quits: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612) (Ping timeout: 268 seconds)
[08:40:10] *** Joins: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612)
[08:40:23] *** Quits: BucetaPeluda (~istupy@2620:0:1003:206:5397:2605:6f82:ba23) (Ping timeout: 252 seconds)
[08:40:45] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[08:40:55] *** Joins: BucetaPeluda (~istupy@2620:0:1003:206:db0:a087:349c:f4b6)
[08:54:51] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:54:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2129:7998:3c7b:2425)
[09:14:01] <hnOsmium0001[m]> https://www.qt.io/blog/installing-qt-via-conan-package-manager
[09:25:51] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:a4d0:e86d:318c:d3f8)
[09:39:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:08] *** ChanServ sets mode: +v npaperbot
[09:52:11] <hnOsmium0001[m]> it's kinda inconvenient that you have to use their specific set of profiles in order to get prebuilt binaries, but I guess they do cover most of the usecases
[09:53:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:05:07] <very_sneaky> it's cool that conan is the first package manager to support qt builds
[10:05:15] <very_sneaky> wonder if that will have any impact on uptake
[10:07:38] <very_sneaky> hnOsmium0001[m]: i mean, that's the case with everything. in order to get pre-built binaries, they have to be built, and they have to be built for some set of profiles, and because of the size of the parameter space for profile configuration it's never going to be the full set of profiles
[10:07:54] <very_sneaky> on the bright side, you can always build it yourself and cache it either locally or on your own remote
[10:07:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:09:15] *** Joins: seninha (~seninha@user/seninha)
[10:10:45] <ville> very_sneaky: just about every distro out there has qt pre-built
[10:11:30] <very_sneaky> first c++ pm*
[10:14:26] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[10:14:39] <hnOsmium0001[m]> actually vcpkg supported qt a while before both the conan-center one and the offical one appeared
[10:15:12] <very_sneaky> yeah true, i was forgetting that cci already had a community package - should have realised vcpkg probably would too
[10:15:38] <hnOsmium0001[m]> but it didn't quite work right in that some of the tool executables are not working
[10:16:14] <hnOsmium0001[m]> don't remeber what's exactly the problem (and to be fair, it's not like the conan-center one works all good either--you have to recompile the whole thing from source if you want any additional modules)
[10:22:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[10:26:35] <very_sneaky> i'd imagine that's a problem for most reasonably large projects
[10:28:23] <hnOsmium0001[m]> hmmm I was able to compile a program successfully, but running it results in no windows nor error messages...?
[10:29:49] <hnOsmium0001[m]> oh wait I'm dumb: I was using powershell but ran the activate.bat file (I needed activate.ps1)
[10:30:05] <very_sneaky> I've done that more than i care to admit
[10:34:53] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[10:36:31] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[10:36:49] <ac_slater> anyone know a good place to ask about ARM (CM0) low level stuff?
[10:46:15] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[10:48:08] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[10:55:01] *** Quits: BucetaPeluda (~istupy@2620:0:1003:206:db0:a087:349c:f4b6) (Remote host closed the connection)
[10:59:59] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:03:01] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[11:03:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:04:27] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:04:47] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[11:15:43] *** Joins: andreasbuhr (~quassel@p549db208.dip0.t-ipconnect.de)
[11:15:43] *** Quits: andreasbuhr (~quassel@p549db208.dip0.t-ipconnect.de) (Client Quit)
[11:19:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[11:37:16] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:37:33] *** Joins: meator (~meator@user/meator)
[11:42:55] *** Joins: Burgundy (~yomon@79.115.213.171)
[11:45:15] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[11:51:24] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:51:35] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Read error: Connection reset by peer)
[11:55:02] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[12:01:05] *** Quits: chozorho (~chozorho@2601:146:300:c30::1df0) (Quit: WeeChat 3.0)
[12:08:37] *** Quits: Spirit532 (~Spirit532@mm-254-35-84-93.mgts.dynamic.pppoe.byfly.by) (Killed (NickServ (GHOST command used by Spirit5328!~Spirit532@mm-32-1-84-93.mgts.dynamic.pppoe.byfly.by)))
[12:08:38] *** Joins: Spirit532 (~Spirit532@mm-32-1-84-93.mgts.dynamic.pppoe.byfly.by)
[12:12:27] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:12:41] *** Quits: meator (~meator@user/meator) (Ping timeout: 252 seconds)
[12:13:59] *** Joins: robod34 (Username@79.113.195.239)
[12:22:51] *** Quits: pa (~pah@user/pah) (Ping timeout: 245 seconds)
[12:24:12] *** Joins: pah (~pah@user/pah)
[12:26:49] *** Joins: pulse (~pulse@user/pulse)
[12:28:42] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:9888:ce90:62f6:831a)
[12:34:41] *** Joins: xkuru (~xkuru@user/xkuru)
[12:34:46] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:58] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:39:40] <mort> ranges do seem nice, but I'm not looking forward to having to prefix every call with std::ranges
[12:56:19] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[13:01:57] *** Quits: causative (~halberd@user/causative) (Ping timeout: 250 seconds)
[13:07:25] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[13:10:56] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:9888:ce90:62f6:831a) (Quit: Client closed)
[13:11:37] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:13:39] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:14:40] *** Joins: Terminus (~null@user/terminus)
[13:23:43] *** Joins: causative (~halberd@user/causative)
[13:23:59] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:24:13] *** Joins: CaCode_ (~CaCode@user/cacode)
[13:26:41] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[13:28:17] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[13:32:34] <ville> mort: you'll have time as you wait your current build to finish
[13:34:28] <ville> on the surface they are sort of nice idea, in practice not that convinced. build times and related error messages do not exactly improve the developer experience. also when you pipe lot of them together with out any intermediary variables debugging sucks as well
[13:34:54] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[13:35:40] *** Joins: Terminus (~null@user/terminus)
[13:36:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[13:37:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:39:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:39:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:10] *** ChanServ sets mode: +v npaperbot
[13:40:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:42:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:44:32] <mort> I admit I have never used them in practice
[13:45:13] <mort> maybe we should just have a way to think of a "range" as a begin iterator + an end iterator so that we don't have to pass begin() and end() everywhere and that's it
[13:47:23] *** Quits: kurfen (~kurfen@lfbn-ann-1-320-249.w86-200.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[13:51:29] <ville> that's what ranges are. sort of. and don't see why you couldn't use them just like that really. some of the examples out there seem to focus on the ability to create those chains using pipe
[13:52:04] *** Joins: kurfen (~kurfen@160.238.38.225)
[13:53:31] <mort> yea tbh the pipe stuff seems like it has so many challenges in C++
[13:53:44] <mort> it makes a lot of sense in GC'd languages where you can just throw objects around and not care
[13:54:30] <mort> in C++ we have move-only types, copy-only types, expensive-to-copy types, reference types which can dangle, and it's all very hard to generally create a pipe abstraction over I feel
[13:56:53] <ville> haven't looked at code generation if one was to "unroll" those pipe chains and doing something like: auto&& a = std::range::op0(xs); auto&& b = std::range::op1(a); ... sort of transform
[13:58:31] <ville> would it come out the same as: op0(xs) | op1 | ...
[13:59:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:59:18] <mort> one thing I wonder is, where do you keep those intermediate values? Does a range reside within the view? Is everything by value?
[13:59:51] <mort> or do views keep references and we'll have a bunch of dangling reference errors
[14:00:33] <manuels> consider this template:    template<typename T, typename C = std::set<T*>> C extensionsOfType() {…}       can I insert somehow insert polymorphically into C
[14:01:01] <manuels> is there a function which is like a merged emplace and emplace back?
[14:01:32] <mort> well the idea of std::set is that it's unordered, emplace will insert a value if it doesn't already exist afaik
[14:01:50] <mort> are you talking about runtime polymorphism or
[14:02:13] <RandomReader> if you're trying to be container agnostic, accept an OutputIterator instead, have the caller provide e.g. std::insert_iterator
[14:02:39] <RandomReader> (or: no, you can't be container agnostic and care about specific operations on the container at the same time)
[14:05:01] <manuels> no compiletime poly
[14:05:41] <mort> the C is a concrete type, it's a set of pointers to whatever you passed as T
[14:06:02] <manuels> std::vector<T*> results; do_dynamic_stuff_to_get_extensions(); return C(results.begin(), results.end());
[14:06:46] <mort> that should probably work
[14:06:52] <manuels> works but it copies the entire range. just wondering if I could do it in one go
[14:07:42] <mort> do_dynamic_stuff_to_get_extensions could return a set<T*>?
[14:07:47] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[14:08:36] <mort> is the issue that you want to be able to use do_dynamic_stuff_to_get_extensions with a vector as well, so you need something which you can push_back into
[14:08:40] *** Quits: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612) (Ping timeout: 268 seconds)
[14:09:08] <manuels> does std::back_inserter work on sets?
[14:09:16] <manuels> mort i simplified
[14:09:17] <manuels> wairt
[14:09:29] <manuels>     template<typename T, typename C = std::set<T*>>
[14:09:29] <manuels>     C extensionsOfType()
[14:09:29] <manuels>     {
[14:09:29] <manuels>         std::vector<T*> results;
[14:09:29] <manuels>         T* t;
[14:09:30] <manuels>         for (Extension *e : extensions()){
[14:09:30] <manuels>             t = dynamic_cast<T*>(e);
[14:09:31] <manuels>             if (t)
[14:09:31] <manuels>                 results.insert(t);
[14:09:32] <manuels>         }
[14:09:32] <manuels>         return C(results.begin(), results.end());
[14:09:33] <manuels>     }
[14:10:33] <mort> why can't you just change 'std::vector<T*> results' to 'C results'
[14:11:16] <manuels> because the i need this polymorphic insert i am looking for :)
[14:11:28] <manuels> then*
[14:12:17] <mort> why? C is always a std::set<T*>
[14:13:02] <mort> or, wait
[14:13:15] <mort> will you be calling extensionsOfType with C=vector sometimes
[14:13:51] <mort> so you need a way to either append to the vector or insert into the set
[14:14:08] <manuels> exactly
[14:14:16] <manuels> the client should decide which container to get
[14:14:23] <mort> right
[14:15:17] <manuels> yes, does std::insert_iterator work for all containers?
[14:16:06] *** Joins: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612)
[14:18:02] <mort> I don't think so
[14:21:14] <mort> if you don't mind making the code less nice for the user, you could say you take something with an insert method and then they can give you an adapter type thing
[14:23:52] <manuels> oh no. I'd rather copy :D
[14:24:10] *** Joins: CaCode- (~CaCode@user/cacode)
[14:25:11] <RandomReader> you accept an OutputIterator, not insert_iterator specifically
[14:25:17] <RandomReader> the caller will provide the appropriate thing
[14:25:57] <manuels> that not that bad actually. thank you all
[14:26:15] <mort> https://godbolt.org/z/7f3663TTa here's an example
[14:26:18] <LordKalma> rpav, https://quasar.dev/ I was shown this. Since you like vue, it looks amaaaazing
[14:26:34] <mort> accepting an outputiterator is probably a better idea than what I just linked
[14:26:41] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[14:26:45] <RandomReader> (and yes, insert_iterator will work for sets)
[14:27:14] *** Joins: paul424 (~tom@ip-37-248-154-242.multi.internet.cyfrowypolsat.pl)
[14:28:37] <manuels> but not for vector?
[14:28:53] <RandomReader> it will work for vector too, but what's your underlying question here?
[14:29:08] <RandomReader> the thing you're building and usage of it are separate things
[14:29:27] <RandomReader> either the thing you're building cares deeply about the container, or it doesn't .. those are you two choices
[14:29:40] <RandomReader> if it doesn't, then you don't care what works for what container at all .. that's purely a usage question
[14:29:41] <mort> insert_iterator won't work for vector, but back_insert_iterator will
[14:29:54] <RandomReader> or do you not understand the OutputIterator concept yet?
[14:31:31] <manuels> vaguely. never used it (afaik) but I think I get it. the client has to decide to pass std::back_inserter or std::inserter for its container.
[14:31:43] <RandomReader> right
[14:32:29] <manuels> okay that fine I guess. thank you
[14:33:42] <manuels> how would a signature look like then ?
[14:34:21] <manuels> because the inserter itself should have two template parameters right (C<T>)
[14:34:29] <RandomReader> template <typename T, typename OutputIterator> void extensionsOfType(OutputIterator it)
[14:35:02] <mort> https://godbolt.org/z/Kh6q9G37d
[14:35:32] <RandomReader> if (t) { *it++ = t; }
[14:37:01] <mort> manuels: ^ shows a function which inserts some data into an OutputIterator, and then how to use that with a back_insert_iterator with a vector and a insert_iterator with a set
[14:38:25] <mort> https://godbolt.org/z/1xf5sjTE6 is probably better, the iterator shouldn't be a reference
[14:41:10] <manuels> trying to get my head around
[14:41:11] <manuels> *it++ = 10;
[14:41:35] <manuels> can i increment the iterartor just like that?
[14:41:48] <mort> think of it as '*it = 10; ++it'
[14:41:59] <manuels> sure but I wonder where the allocation happens
[14:42:39] <mort> I don't technically think you need the ++ for the back_inserter_iterator and inserter_iterator
[14:42:50] <mort> if I'd guess, I'd say they're probably just implemented something like this:
[14:43:14] <mort> wait
[14:43:19] <manuels> if i have the output iterator id use std:tranform I guess
[14:43:41] <manuels> no wait. copy_if
[14:44:11] <manuels> no wait, this does not cast :D id have to look sth up
[14:44:25] <mort> cppreference says, for back_insert_iterator, that 'The container's push_back() member function is called whenever the iterator (whether dereferenced or not) is assigned to. Incrementing the std::back_insert_iterator is a no-op. '
[14:45:16] <manuels> ahhh, good to know :D
[14:45:33] <manuels> is ther something like std::transform_if
[14:45:48] <mort> so I'd guess something like: template<typename T, typename C> struct back_insert_iterator { C &c; auto operator=(T &&x) { c.push_back(std::forward(x)); return *this; } auto operator++() {}; auto operator*() { return *this; } }
[14:46:17] <mort> ++ is a no-op, * is an identity function, = pushes back
[14:46:54] <mort> but I would keep the *it++ there just for the insert_values to use the output iterator according to the output iterator contract
[14:48:10] <RandomReader> (it could just as easily be an iterator into an existing array of nullptrs that's already the correct size .. the point is that you don't care, it's just something you assign to)
[14:48:26] <mort> yeah
[14:49:58] <manuels> thank you guys
[14:50:17] <manuels> still have on unrelated question
[14:50:28] <manuels> is conan a thing in town?
[14:51:03] <manuels> and is it as mature as sth like pip or conda?
[14:51:56] <mort> so far, I use packages from my distro when possible, and use git submodules when that's not realistic
[14:52:19] <mort> conan seems potentially interesting tho, dunno
[14:52:31] <mort> I like the git submodule approach
[14:55:51] <manuels> same here. I just wondered if I miss sth out. I mean it would not exist if it had no advantages in some areas
[14:57:36] *** Quits: CaCode- (~CaCode@user/cacode) (Quit: Leaving)
[14:58:57] *** Joins: meator (~meator@user/meator)
[15:01:05] <mort> I'd say it's probably worth keeping in mind, and worth checking out if you ever feel like you have trouble with dependencies, but unless it solves a real problem for you I don't think fomo makes sense
[15:05:48] *** pah is now known as pa
[15:07:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:14:51] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[15:18:15] *** Quits: AmR (~AmREiSa@156.199.223.24) (Ping timeout: 256 seconds)
[15:18:28] *** Joins: ibenn (~benn@2a02:8071:45af:1700:6ab3:ab1:5b69:4d2f)
[15:19:53] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:30ff:5b2c:fa32:5fd3)
[15:19:53] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:30ff:5b2c:fa32:5fd3) (Changing host)
[15:19:53] *** Joins: RoKenn (~RoKenn@user/rokenn)
[15:22:15] *** Joins: markong (~kvirc@213.146.188.203)
[15:22:22] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[15:22:57] *** Joins: Terminus (~null@user/terminus)
[15:27:51] *** Quits: paul424 (~tom@ip-37-248-154-242.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:37:03] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[15:38:16] *** Joins: Terminus (~null@user/terminus)
[15:38:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b98b:e7d6:2f0c:dc80)
[15:39:02] *** Quits: Terminus (~null@user/terminus) (Remote host closed the connection)
[15:39:18] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[15:50:42] *** immibis_ is now known as immibis
[15:50:46] *** Joins: meator (~meator@user/meator)
[15:51:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:52:28] <NyB> hmm... if I just want to get an istream out of a Web URL, which library would you suggest? A couple I've seen have the complexity of a 7-course meal... "first set up your root cert storage, then this, then that"
[15:53:51] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:56:34] <TinoDidriksen> Sounds appropriate. HTTPS is complex.
[15:58:57] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[16:07:41] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b98b:e7d6:2f0c:dc80) (Ping timeout: 268 seconds)
[16:16:05] *** Quits: letto (~letto@188.25.118.240) (Quit: Konversation terminated!)
[16:17:26] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[16:18:01] *** Joins: letto (~letto@188.25.118.240)
[16:24:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:26:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b874:cd1a:cf5c:6fc4)
[16:27:44] <Cheaterman> Hi, I'm trying to find (and fix) undefined behaviors in my program (such as rule-of-three violations). What is the most appropriate tool for this? ASAN, Valgrind, something else? Thanks in advance
[16:30:13] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[16:30:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:33:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:35:45] *** Joins: Terminus (~null@user/terminus)
[16:39:53] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:40:14] *** Joins: meator (~meator@user/meator)
[16:40:42] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f08c:4877:a491:d984)
[16:41:26] <lh_mouse> NyB, libcurl
[16:42:22] <NyB> lh_mouse: yeah, looking at curlpp. Its guide is ~useless, but the examples are OK - it might do.
[16:42:32] <lh_mouse> no don't use libcurlpp.
[16:43:00] <lh_mouse> almost all c++ libraries were built by morons.
[16:43:11] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[16:43:30] *** Joins: meator (~meator@user/meator)
[16:43:31] <lh_mouse> (especially libcurlpp and Qt)
[16:43:48] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:44:02] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[16:45:17] *** Joins: Terminus (~null@user/terminus)
[16:49:33] <TinoDidriksen> Cheaterman, all of the above. Really, throw everything at it. scan-build, the sanitizers, valgrind.
[16:50:32] <Cheaterman> TinoDidriksen: Thanks, I didn't know scan-build! I'll add it to the toolbelt. Yeah, my approach so far was basically to throw everything at it and see what comes back ; sadly my program is a plugin for another program and that other program apparently doesn't know its new[]s from its deletes which generates a lot of noisy output
[16:50:48] <Cheaterman> Are there other tools of that kind you would recommend?
[16:52:44] <Cheaterman> Oh wow scan-build truly seems amazing ; and at first glance I would have thought it was clang-only but apparently it supports other compilers too
[16:52:58] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[16:53:18] *** Joins: plastico (~plastico@neomutt/plastico)
[16:55:30] *** Joins: Terminus (~null@user/terminus)
[16:56:33] <mort> Cheaterman: I've had pretty good experience with libcurl
[16:56:51] <mort> it's a C library, but it's fairly reasonable and you can probably wrap it up in your own istream class
[16:57:02] <Cheaterman> NyB: ↓
[16:57:03] <Cheaterman> ↓
[16:57:06] <Cheaterman> Damn. ↑
[17:08:12] <mort> sorry that should've been a NyB ping not a Cheaterman, sorry :p
[17:10:36] <Cheaterman> NP haha :-D and sorry for spamming my beautiful unicode arrows the wrong way around
[17:11:29] <Cheaterman> mort: OTOH if you have extra suggestions for sanitization tools, I'd certainly take a look :)
[17:11:29] <mort> ⮍
[17:11:40] <mort> -fsanitize=address,undefined
[17:11:57] <mort> oh I have had great experience with afl++
[17:12:01] <Cheaterman> Aha, I only did =address, so I'll add undefined
[17:12:03] <Cheaterman> OH
[17:12:06] <mort> it's a fuzzer
[17:12:07] <Cheaterman> I forgot this was a thing, thanks a lot
[17:12:16] <Cheaterman> Yeah i think people found sudo bugs with it?
[17:12:18] <mort> I found a bunch of bugs in my C code with it once
[17:12:31] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:12:59] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[17:14:09] <Cheaterman> https://fluidattacks.com/blog/fuzzing-sudo/ (I think that's what I was talking about)
[17:14:34] <Cheaterman> (But AIUI that's just a way to re-discover the exploit, it wasn't originally found with AFL?)
[17:14:39] <mort> https://github.com/mortie/gilia/commits/main?after=e302a546fd06b53ab7e43464248c5f90a8931951+34&branch=main look at those commits on Apr 28, 2021 :p That's the day I played around with afl++
[17:15:12] <Cheaterman> GIL?
[17:15:18] <Cheaterman> Oh wow
[17:15:24] <Cheaterman> It's a programming language you created, Gilia? nice
[17:15:51] <Cheaterman> (GIL made me think of something else haha.... I'm a Python programmer)
[17:16:16] <mort> yea
[17:16:34] <mort> turns out there are many corner cases
[17:17:07] <Cheaterman> Yeah programming languages are pretty complicated ; even the most BASIC
[17:17:18] <Cheaterman> ( https://github.com/Cheaterman/basic :-p )
[17:17:29] <mort> oh, nice
[17:17:36] <mort> are you participating in the langjam?
[17:17:44] <Cheaterman> I didn't realize this was a thing O__O
[17:17:55] <mort> it is
[17:18:07] <mort> you know jason turner, right?
[17:18:38] <Cheaterman> I did absolutely not! And apparently I was very much missing out!!
[17:18:52] <mort> yea he does a lot, cppcast, c++ weekly, a bunch of talks
[17:19:09] <mort> well, his cousin has been doing these langjams, the first one was some months ago
[17:19:45] <mort> https://github.com/mortie/lafun-language this was my team's submission last time
[17:19:45] <LordKalma> who's talking about Turner?
[17:20:11] <mort> the turners came up because langjam, langjam came up because programming languages
[17:20:12] <Cheaterman> langjam seems pretty awesome, AIUI the new one started yesterday
[17:20:17] <mort> yeah
[17:20:56] <Cheaterman> (and programming languages came up because my C++ code is a bit crashy :-3)
[17:21:28] <Cheaterman> (then again C++ is mostly a language I write on weekends, I'm nowhere near as fluent as I would be if I did it for a living)
[17:22:01] <Cheaterman> (I only fully internalized the rule of three yesterday evening... making me gasp at my own code)
[17:22:14] <mort> https://s.mort.coffee/fun-snake/ is a snake game I wrote in lafun, https://s.mort.coffee/fun-snake/snake.pdf this is the generated pdf from the source code
[17:22:31] <Cheaterman> Oh wow so you actually used it! lemme see :)
[17:22:59] <Cheaterman> awesome haha!
[17:23:55] <Cheaterman> oh wow so := is for local vars while = is for member assignment?
[17:24:11] <mort> yeah
[17:24:13] <Cheaterman> very cool ; I like your language :) especially "self" makes me feel right at home hahaha
[17:24:44] <mort> I like having a separation between declaration and assignment, and my favorite way to do that at the moment is with := for declarations and = for assignment
[17:24:54] <ville> use . to do the lookup as in: x = 0 is local, .x = 0 is member
[17:24:57] <Cheaterman> I like the principle
[17:25:19] <Cheaterman> ville: !!! didn't realize one can do that, certainly will do in my own code
[17:25:31] <mort> ville: would that implicitly look up on self?
[17:25:32] <mort> that's neat
[17:25:32] <PJBoy> I also think separation between declaration and assignment is a requirement for good design
[17:25:44] <mort> PJBoy: well, people seem to think python is well-designed
[17:25:55] <ville> Cheaterman: not in c++ you can't. just an idea how a syntax in some lanuage could be
[17:25:56] <Cheaterman> ah you meant for lafun not C++
[17:25:57] <PJBoy> python added := for this reason
[17:26:01] <Cheaterman> ville: yeah makes sense
[17:26:02] <PJBoy> I think
[17:26:07] <Cheaterman> PJBoy: It's a bit more complicated
[17:26:10] <mort> guido stepped down as bdfl for := heh
[17:26:10] <Cheaterman> to the point the BDFL resigned
[17:26:13] <Cheaterman> ↑↑↑ exactly
[17:26:22] <PJBoy> you what?
[17:26:27] <PJBoy> I'm out of the loop on that one
[17:26:29] <mort> it was a whole big thing
[17:26:44] <Cheaterman> Guido Van Rossum stepped down as Benevolent Dictator For Life of the Python Language over the walrus operator (:=)
[17:26:55] <mort> he pushed := through then resigned due to the backlash of unilaterally pushing through := against the community or core team's wishes
[17:27:04] <PJBoy> was he against the operator entirely or did he disagree with the way it ended up being spec'd?
[17:27:16] <PJBoy> oh
[17:27:33] <Cheaterman> PJBoy: More like he agreed with it but the decision wasn't unanimous among the delegates
[17:27:33] <PJBoy> well
[17:27:36] <Cheaterman> and he had to veto it
[17:27:44] <PJBoy> hrm
[17:27:58] <PJBoy> I mean I agree with the := op from what I've seen
[17:28:03] <PJBoy> but going against absolutely everyone else?
[17:28:10] <PJBoy> that's a predicament
[17:28:26] <Cheaterman> the issue (but also the good thing) about := is it allows assigning while checking, which has been historically dangerous in eg C
[17:28:28] <mort> it's also still possible to use = for declarations because backwards compat
[17:28:33] <Cheaterman> where people did if(uid = 0) by accident
[17:28:47] <Cheaterman> Hence controversial
[17:29:12] <Cheaterman> But "open Kimono" policy sorta implies "if you prevent people from doing stupid things you also prevent them from doing the smart ones", hence walrus being OK
[17:29:12] <ville> mort: yes . for this->/self.
[17:29:20] <PJBoy> no one is ever gonna do := by accident though
[17:29:20] <mort> ville: I like that
[17:29:23] <Cheaterman> PJBoy: it's not "absolutely everyone else"
[17:29:28] <Cheaterman> it was a bit more complicated :)
[17:29:29] <mort> that's how C++ should've been, I dislike the implicit this->
[17:29:43] <Cheaterman> PJBoy: exactly - no one will do := by accident, that's why this was pushed through
[17:29:44] <mort> I decorate all my class members with a trailing _ but that's not as nice as having a leading . syntax
[17:30:00] <PJBoy> = is done by accident because programming languages are stupid and use the equals sign for assignment
[17:30:23] <PJBoy> well, good to know it was a controversy
[17:30:45] *** Joins: seninha (~seninha@user/seninha)
[17:31:03] <mort> Cheaterman: what do you think of gilia's syntax
[17:31:05] <mort> I think it's super cute
[17:31:12] <Cheaterman> IMHO it's a great thing. I'm sure even recent addition of pattern matching was somewhat controversial ; mostly because many people don't see the difference between it and a switch case
[17:31:24] <PJBoy> lack of automatic self. is my biggest issue with python
[17:31:56] <PJBoy> python added pattern matching?
[17:31:58] <PJBoy> jesus
[17:31:58] <Cheaterman> mort: the example of the match construct sorta lost me lol, not the match itself but the lines before
[17:32:06] <Cheaterman> {'true} for example
[17:32:06] <geordi> error: Unexpected end of request. Expected any symbol.
[17:32:28] <mort> I suppose the readme should introduce atoms
[17:32:42] <Cheaterman> Yes :-) I think you need an intermediate step to make the thing clearer
[17:32:57] <Cheaterman> But ignoring that last code block that I don't fully understand, yes, I personally like the syntax!
[17:33:08] <mort> think of a language which uses strings for everything, where say "true" is considered true, you can call functions with strings to select what they should do
[17:33:18] <mort> like http-request("get", "http://whatever")
[17:33:21] <Cheaterman> Oh, so like a smarter bash?
[17:33:47] <mort> something like that
[17:34:04] <mort> and it's common to use strings as enums in javascript for example
[17:34:11] <Cheaterman> PJBoy: I like the explicit self, but I can see how it's a bit annoying for a C++ programmer
[17:34:19] <Cheaterman> And yes Python added pattern matching, pretty powerful and well-made IMHO
[17:34:23] <mort> like you can have a log("warning", "some log message") and log("debug", "some log message")
[17:34:33] <Cheaterman> mort: ah yes, makes sense
[17:34:43] <mort> Cheaterman: my language's "atoms" can be used similarly, but they're actually integer constants internally rather than arbitrary length strings
[17:35:06] <PJBoy> I'd like to claim I dislike the explicit self regardless of my C++ experience
[17:35:08] <mort> their syntax is a quote then an identifier, and every instance of the same identifier will compare equal (because they have the same underlying integer)
[17:35:09] <Cheaterman> Interesting, so you compile a static string table and those are the indices basically?
[17:35:15] <mort> so 'foo == 'foo is true but 'foo == 'bar is false
[17:35:18] <PJBoy> definitely gonna check out the pattern matching though
[17:35:22] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Quit: WeeChat 3.3)
[17:35:30] <mort> I actually don't have the strings at all in the bytecode, it's just handled by the parser
[17:35:36] <Cheaterman> mort: i see, makes a lot of sense ; but what about constructing strings at runtime, do you try to match against the existing ones?
[17:35:40] <Cheaterman> oh neat
[17:36:02] <mort> I might make it possible eventually to match against strings at runtime by putting an atoms table in the bytecode
[17:36:07] <mort> it would be useful for pretty printing atoms too
[17:36:13] <mort> idk
[17:36:19] <Cheaterman> PJBoy: I personally like the explicit self, followed by C++ implicit this, followed by god-awful JS implicit this and weird scoping
[17:36:48] <mort> you can also do member lookup of objects like this, like you can have `foo := {value: 10, name: "My Value"}` then `key := 'value; print foo.(key)`
[17:37:04] <mort> `.(expression)` is my syntax for a dynamic lookup, like brackets in JS
[17:37:14] <Cheaterman> mort: pretty neat
[17:37:21] <PJBoy> Cheaterman, I can see the appeal to explicit self, for sure
[17:37:22] <Cheaterman> it's sensible IMO
[17:37:31] <Cheaterman> PJBoy: yes - especially in contrast to JS
[17:37:32] <PJBoy> not sure what the JS rules are
[17:37:39] <mort> JS and python let you do the same but with strings everywhere and everything is a hash table
[17:37:39] <Cheaterman> PJBoy: Oh, you're in for a treat
[17:37:48] <Cheaterman> https://www.youtube.com/watch?v=YOlr79NaAtQ
[17:37:55] <Cheaterman> PJBoy: ↑ you're gonna love this.
[17:38:04] <PJBoy> thanks
[17:38:08] <Cheaterman> NP :-)
[17:39:00] <mort> I like that `if x < 10 { print "x is less than 10" }` is just valid syntax even though it's a function call with a lambda as its second argument
[17:39:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:09] *** ChanServ sets mode: +v npaperbot
[17:40:28] <Cheaterman> PJBoy: (fun part starts at 2:00)
[17:40:53] <Cheaterman> "plenty of rope to hang yourself with" is the key quote here IMHO xD
[17:41:21] <PJBoy> I embrace excess rope
[17:42:25] <Cheaterman> Hahahhaha
[17:43:36] <PJBoy> lambdas not getting a class `this` makes sense
[17:43:45] <mort> my least favorite javascript APIs are ones which you give a callback, then instead of passing something as a parameter, they pass something as a 'this' value
[17:44:18] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b940:2c5d:9a87:d849)
[17:44:18] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b940:2c5d:9a87:d849) (Changing host)
[17:44:18] *** Joins: RoKenn (~RoKenn@user/rokenn)
[17:45:01] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[17:45:23] <PJBoy> for such a short video, this guy sure does ramble
[17:45:47] <PJBoy> yeah idk `this` seems completely fine in JS based on that
[17:46:42] <PJBoy> I mean the fact that it refers to something when not inside a class is my big complaint
[17:46:43] <mort> the main surprising thing is that you would expect to be able to do things like passing `console.log` as a callback to something
[17:47:12] <Cheaterman> If you want a more comical view of this: https://www.youtube.com/watch?v=kb0Af7dzCTs
[17:47:22] <mort> function doSomething(logger) { logger("Starting..."); /* whatever */; logger("Done."); } doSomething(console.log); <-- breaks
[17:47:46] <mort> why would you make a vertical programming video
[17:47:47] <Cheaterman> PJBoy: Yeah that's the issue. strict mode somewhat helps but not always
[17:47:59] <Cheaterman> mort: #shorts #competingWithTikTok
[17:48:08] <mort> ah, it's a #shorts
[17:48:11] <mort> I hate those
[17:48:19] <PJBoy> I do like vertical videos sometimes
[17:48:26] <PJBoy> when it's suitable for mobile phone viewing
[17:48:28] <mort> ever since it was introduced I'm spammed with 10 second completely uninteresting low-effort videos
[17:48:30] <Cheaterman> yeah... they don't really belong on YT IMHO. but still watch them because they're short haha
[17:48:53] <Cheaterman> mort: that is the main issue IMHO ; but I'm lucky enough to watch content creators that make interesting stuff out of them, like NileRed
[17:49:09] <Cheaterman> some chemical stuff lends itself to the format well
[17:49:42] <mort> the main person I've noticed them from is LegalEagle, and every time I've watched a #shorts from him I'm left with a feeling of, "oh, this topic would've been really interesting if it was an actual video and not 30 seconds which barely scratch the surface"
[17:49:51] <Cheaterman> TOTALLY.
[17:50:00] <Cheaterman> I watch Legal Eagle a lot and I'm no big fan of his shorts
[17:54:37] *** Quits: aleios (~aleios@user/aleios) (Quit: WeeChat 3.3)
[17:57:10] <Cheaterman> mort: was looking at lafun snake and saw the neat true/false/none, so those would also be strings in gilia hence the {'true} for example?
[17:57:32] <Cheaterman> (lafun is really cool too IMHO)
[17:57:37] <mort> Cheaterman: true and false in gilia are atoms (so not strings, but yea)
[17:57:42] <Cheaterman> Aaah, alright!
[17:57:49] <Cheaterman> Yeah you need to introduce those in the readme :-DDD
[17:57:53] <mort> 'true is true, everything else is false
[17:58:00] <Cheaterman> Oh interesting
[17:58:24] <Cheaterman> so again a bit like bash, one true and many false?
[17:58:28] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[17:58:32] <Cheaterman> (which is the opposite of most other languages?)
[17:58:45] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:58:50] <LordKalma> this on JS is hilariously bad
[17:59:00] <mort> I think scheme also has one true and everything not-true is false
[17:59:22] <mort> https://github.com/mortie/gilia/blob/main/include/gilia/vm/vm.h#L54-L127 here is how the value struct is defined, you can see the atom union member there
[17:59:30] <mort> gil_word is a uint32_t
[17:59:50] <mort> so an atom is represented as a single u32, which the parser figures out
[18:00:28] <Cheaterman> neat
[18:00:56] <Cheaterman> very neat in fact, I like how you did this
[18:00:56] <mort> I've been thinking of re-doing this whole thing, currently a value reference is a single entry into a values table so every value has reference semantics, I might instead make it possible to encode atoms and maybe ints and such in "references" so that they in essence get value semantics
[18:01:36] <mort> and don't need a heap allocation
[18:03:25] <mort> it's tricky to properly tightly pack stuff into a struct, making sure that it won't be greater than 16 bytes even though you have a bunch of different kinds of stuff there, without abusing __attribute__((packed))
[18:04:16] <mort> after careful consideration of the C standard with the help of the #c people I think we concluded that this is guaranteed to work because 'flags' and the 'padding' values must have the same address
[18:06:32] <PJBoy> ew
[18:06:46] <mort> if you have a better suggestion I'm all ears
[18:07:09] <PJBoy> I'm not gonna pretend to know how to do unions any better than you
[18:07:25] <PJBoy> but why do you have the flags inside the union?
[18:07:51] <PJBoy> wouldn't flags as the first member of the struct and omitting all the padding work?
[18:07:53] <mort> well, you have to know the flags before you know what type it is
[18:08:02] <mort> oh
[18:08:07] <mort> putting the flags completely outside of the union
[18:08:19] <mort> no, that wouldn't really work
[18:08:50] <mort> if any of the structs start with something with 4-byte alignment, the entire union would be 4-byte aligned, which means the compiler would put 3 bytes of padding between the flags and the union
[18:09:30] <PJBoy> << alignof(S); struct S { uint8_t a; uint32_t b; };
[18:09:31] <geordi> 4
[18:09:43] <PJBoy> doesn't matter what the first member's alignment is in particular
[18:10:19] <mort> << alignof(S::b); struct S { uint8_t a; uint32_t b; }; // does this work
[18:10:19] <geordi> error: ISO C++ does not allow 'alignof' with a non-type
[18:10:29] *** Joins: meator (~meator@user/meator)
[18:10:39] <PJBoy> << offsetof(S, b); struct S { uint8_t a; uint32_t b; };
[18:10:40] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:10:40] <geordi> 4
[18:10:54] <mort> eh I'll just use sizeof in examples, let's see
[18:11:24] <mort> << sizeof(S); struct S{ union { uint8_t flags; struct { uint8_t x; char *ptr; } }; };
[18:11:25] <geordi> error: expected ';' after struct definition (fix known)
[18:11:33] <PJBoy> geordi, fix
[18:11:34] <geordi> error: extra ';' (fix known)
[18:11:36] <PJBoy> geordi, fix
[18:11:36] <geordi> Same error.
[18:11:45] <mort> << sizeof(S); struct S{ union { uint8_t flags; struct { uint8_t x; char *ptr; }; }; };
[18:11:45] <geordi> error: ISO C++ prohibits anonymous structs
[18:11:52] <mort> ugh fucking C++
[18:11:56] <mort> << sizeof(S); struct S{ union { uint8_t flags; struct { uint8_t x; char *ptr; }; } u; };
[18:11:57] <geordi> Same error.
[18:12:09] <mort> << sizeof(S); struct S{ union { uint8_t flags; struct { uint8_t x; char *ptr; } whatever; } u; };
[18:12:10] <geordi> 16
[18:12:31] <mort> << sizeof(S); struct S{ uint8_t flags; union { struct { uint8_t x; char *ptr; } whatever; } u; };
[18:12:31] <geordi> 24
[18:12:35] <mort> wait sorry
[18:12:39] <mort> << sizeof(S); struct S{ uint8_t flags; union { struct { char *ptr; } whatever; } u; };
[18:12:40] <geordi> 16
[18:12:59] <mort> let me play around in godbolt
[18:16:08] <mort> PJBoy: https://godbolt.org/z/GGhsoMdvE
[18:16:51] *** Joins: philip (~philip@210.16.81.112)
[18:16:57] <PJBoy> huh.
[18:17:11] <mort> << sizeof(S); struct S{ uint8_t flags; union { struct { uint8_t padding; uint32_t length; char *ptr; } s; } u; };
[18:17:12] <geordi> 24
[18:17:25] <mort> wait
[18:17:25] <mort> << sizeof(S); struct S{ uint8_t flags; union { struct { uint32_t length; char *ptr; } s; } u; };
[18:17:26] <geordi> 24
[18:17:40] <mort> << sizeof(S); struct S{ union { uint8_t flags; struct { uint8_t padding; uint32_t length; char *ptr; } s; } u; };
[18:17:40] <geordi> 16
[18:17:47] <mort> thar
[18:18:10] <PJBoy> it was the same size with or without the padding just then
[18:18:14] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[18:18:27] <PJBoy> ugh
[18:18:58] <philip> Hello! I'm hoping this is the right place to ask C++ questions. I apologise in advance since I'm a new user and still trying to figure things out. I was wondering if anyone knew of a simple way to accept an array/vector's dimension as a parameter. For example, if I wanted to create a d-dimensional array, would there be any way to accept "d" as a parameter?
[18:18:59] <mort> I think: because there's a pointer in the struct, it has to be 8-byte aligned
[18:19:44] <mort> if you have a uint8_t before the struct, there has to be 6 bytes of padding before the union which contains 8-byte-aligned structs
[18:20:20] <mort> with the uint8_t in the union, the struct can start with a uint8_t, then 3 bytes of padding, then a uint32_t, then a pointer
[18:20:31] <PJBoy> ahh
[18:20:34] <mort> there's one case where I even squeeze a uint16_t in there so there's 1 byte of padding
[18:21:02] <PJBoy> what an annoying thing to have to work around
[18:21:05] <mort> yeah
[18:21:13] <mort> there's a reason everyone uses __attribute__((packed)) lol
[18:21:51] <PJBoy> but then you end up getting non-naturally aligned data members
[18:22:09] <PJBoy> and this example demonstrates that that's overkill
[18:22:19] <mort> mhm
[18:23:10] <mort> philip: I don't think C++ has nice facilities for multi-dimensional stuff, so you end up doing a lot of stuff manually (or using libraries)
[18:23:27] *** Joins: Terminus (~null@user/terminus)
[18:23:29] <philip> mort: Ah rats, that's what I was afraid of :(
[18:23:38] <PJBoy> can confirm
[18:23:55] <PJBoy> I made a class for that once
[18:24:46] <mort> almost all my multi-dimensional array work is where I have a pixel buffer with a width and a height and pixel x,y is at buffer[y*width+x] (or more often buffer[y*stride+x])
[18:24:54] <mort> but that's not very general lol
[18:26:07] <philip> I'm trying to do a physics simulation and I figured it'd be cool if I could do it in d dimensions, would save me the effort of manually writing out different codes for d=2,3,4,5. ;) But maybe I'll just have to do that, it might be simpler.
[18:26:17] <mort> philip: do you know the dimensionality at runtime or at compile time?
[18:26:26] <PJBoy> https://gist.github.com/PJBoy/f0051be02d3cd5c6d1fe4fafb106a1d6 fwiw
[18:26:37] <mort> sounds like you probably want dimensionality to be a compile-time thing
[18:26:41] <philip> mort: At compile time, nothing too fancy.
[18:27:04] <mort> isn't a "tensor" essentially an n-dimensional array
[18:27:14] <philip> mort: It's fixed per simulation, I just want the code to be flexible enough to accept it as a parameter.
[18:27:14] <mort> like a matrix but with more than just rows and columns
[18:27:15] *** Joins: ferdna (~ferdna@user/ferdna)
[18:27:29] <mort> because I think eigen has some tensor stuff
[18:27:52] <philip> mort: Is it? Let me look it up. I'm really new to this, been using python for most things, but had to shift to C/C++ because it's just SO much faster...
[18:28:01] <mort> yea
[18:28:22] <mort> tho numpy is fast, if your calculations can be expressed in terms of a small number of numpy operations
[18:28:51] <PJBoy> there's always Cython
[18:28:58] <mort> eh
[18:29:11] <philip> I'm doing random walk problems, so no :( Yeah, I could do Cython, but figured it'd be interesting to use a new language :)
[18:29:25] <mort> my experience with all the different python implementations is that they're not really able to optimize most code that well
[18:29:38] <mort> pypy is pretty fast for some things but it's so easy to encounter cases it just doesn't deal with
[18:29:49] <mort> *as in degenerates into basically as fast as cpython
[18:30:44] <mort> PJBoy: what does Array refer to in the code you sent?
[18:31:26] <mort> it looks like a dynamic array
[18:32:01] <mort> PJBoy: do you happen to know the sizes of your dimension at compile time
[18:32:01] <PJBoy> oh I didn't realise I had that dependency
[18:32:08] <PJBoy> yeah it's a vector clone
[18:32:09] <mort> sorry, philip
[18:32:57] <mort> a good old C array could possibly work, where you have a float[44][3][27] for a space 44 wide, 3 deep and 27 tall
[18:33:12] <philip> mort: No worries, thanks for trying! :)
[18:33:31] <mort> philip: the "sorry, philip" was just because I accidentally pinged PJBoy rather than you :p
[18:33:40] <philip> oops! :P
[18:33:41] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[18:34:46] <philip> mort: Well all my arrays represent a "hyper-cube" of dimension d. So it's basically a grid in d dimensional space. And it's all boolean, and initialised to false.
[18:35:17] <mort> so
[18:35:27] <mort> for a grid of x*y*z*w you could do something like
[18:35:30] <PJBoy> added the array class into the gist
[18:35:39] <philip> mort: So I'm not looking for anything which has variable dimension or anything. I'm guessing I should just use a vector recursively and keep pushing back arrays?
[18:36:03] <mort> std::array<std::array<std::array<std::bitset<w>, z>, y>, x>
[18:36:35] <philip> mort: Right. Except that I wanted (though perhaps it's not feasible) to decide in advance if I want to do a grid of x, or x*y, or x*y*z, etc.
[18:36:54] <mort> aha
[18:37:02] <philip> mort: Otherwise I'd have to write separate codes for my "2D" and "4D" lattices. (if I've understood you right)
[18:37:05] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:37:17] <mort> how will your code do dimension-agnostic indexing?
[18:37:57] <mort> let me check something
[18:38:12] <mort> << sizeof(std::bitset<10>) << ", " << sizeof(std::bitset<1000>)
[18:38:13] <geordi> 8, 128
[18:38:27] <mort> aight neat, so array<array<array<bitset>>> becomes one allocation
[18:39:15] <mort> maybe ideally the outer array should've been a vector
[18:39:28] <mort> wait, second-to-outermost array would make more sense
[18:39:31] <mort> don't mind me
[18:41:14] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b874:cd1a:cf5c:6fc4) (Ping timeout: 268 seconds)
[18:41:18] *** Quits: letto (~letto@188.25.118.240) (Quit: Konversation terminated!)
[18:41:57] *** Joins: letto (~letto@188.25.118.240)
[18:42:04] <mort> philip: how will you do the indexing though, say you have an 'mdarray' variable which you don't know if is 2D, 3D, 4D, 5D or whatever
[18:43:13] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:47:09] <philip> mort: That's what I'm figuring out too :( Now I think I'll just have to do it "level by level". First get the i-th level (d-1)dim thing, then the j-th level (d-2) dim thing and so on. Seems like a pain, though. So reconsidering...
[18:47:51] <PJBoy> my approach was indexing with initializer_list
[18:48:00] <PJBoy> which worked pretty well I thought
[18:48:30] <mort> a common approach for multi dimensional indexing is to use operator()
[18:48:50] <mort> but I was thinking more along the lines of, how does one figure out what the indexes should be, not how does the indexing syntax look
[18:49:04] <mort> but hey, operator, in brackets is deprecated now
[18:49:13] <mort> we'll get multiadic operator[] soon
[18:49:32] <mort> polyadic?
[18:51:33] <mort> ok it seems like adicity is from greek so it'd be polyadic
[18:52:07] <mort> ugh, poly seems to imply 3 or more, not 2 or more
[18:53:09] <mort> the closest thing I can come up with would be pluriadic but that's mixing greek and latin
[18:55:23] <philip> @mort: How do you mean "figure out"? As in, what the indices represent physically?
[18:56:17] <mort> philip: no, when you need to index into the multi-dimensional array, how do you know what the index is given that you don't know the number of dimensions
[18:57:09] <philip> Ah right. Well, these points are "coordinates" in space. So I should have a vector that contains the "coordinates" separately. But it's increasingly looking like too much work.
[18:57:20] <mort> that's what you gave the "level by level" answer to right, while pj answered more technically how he has a function which accepts an arbitrary number of indexes
[18:57:45] <mort> you said you're doing a random walk
[18:58:08] <mort> wait
[18:58:18] <mort> doesn't simplex noise resemble a random n-dimensional walk
[18:59:02] <mort> I suppose it's not one connected line, I don't know if that's a problem for your case or not
[18:59:03] <philip> No clue :(
[19:00:36] <mort> https://i.stack.imgur.com/Rlib0.png does something like this look like a 2d version of the kind of pattern you want to walk
[19:02:06] <philip> Hm, I'm actually modelling something called a self-avoiding walk. It's a random walk that never crosses. It's fine, I'm definitely not going to need to do it beyond 4d, so I'll just make a couple of different simulations. Thanks a ton, guys! :)
[19:02:29] <mort> ah
[19:02:38] <mort> np
[19:03:32] <mort> if you can create those 4 random walker implementations, and do the rest in a dimension-agnostic way, is there enough of "the rest" for it to be worth being shared code?
[19:04:39] <philip> I don't think so :/
[19:05:55] <mort> it's possible that there are some super cute abstractions here, but one would need more domain knowledge than I have :p
[19:06:15] <philip> :D
[19:06:37] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[19:08:55] *** Joins: xkuru (~xkuru@user/xkuru)
[19:09:04] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[19:12:55] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[19:17:10] *** Joins: Terminus (~null@user/terminus)
[19:17:49] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[19:18:14] <mort> philip: maybe this helps: https://godbolt.org/z/K3zqc6jns
[19:18:42] <mort> it's a kind of pretty way to write multi-dimensional arrays, if you know your dimensionality and your dimension sizes at compile time
[19:19:23] *** Joins: andi_ (~andi@user/andi/x-3467420)
[19:19:44] <andi_> can somebody tell me why i get a permission denied on my nmap? https://paste.xinu.at/Vrf5Ad/
[19:20:00] <ville> andi_: you opened it in read only, but your mmap is for write?
[19:33:38] <TinoDidriksen> Also, ask #C for C code or use a C++ wrapper that does all the mmap for you in nice cross-platform manner.
[19:35:28] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[19:46:05] <ville> TinoDidriksen: this is -general. it's fine here
[19:46:10] <andi_> TinoDidriksen: there's a C++ wrapper?
[19:47:13] <ville> ...since when did knowing how to actually program your system become something to avoid
[19:51:36] *** Quits: Alipha (~AliphaX@user/alipha) (Read error: Connection reset by peer)
[19:54:41] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[19:59:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[20:04:11] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:04:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[20:04:31] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:08:22] *** Joins: markong (~kvirc@213.146.188.203)
[20:26:41] <PJBoy> since abstractions were realised to be useful
[20:27:11] <PJBoy> setting up a situation so that you don't need to know something is the purest form of intelligence
[20:27:11] <mort> my experience is that a lot of "C++ wrapper around a C library" style libraries are really annoying to work with and one might as well just use the C library
[20:29:44] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:29:56] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[20:32:20] <rpav> a better way to put it is "setting up a situation to work with the things you need" since abstractions don't necessarily hide anything
[20:33:11] <rpav> an abstraction may reorganize how you access things without covering up your ability to get at any details
[20:38:05] *** Joins: paul424 (~tom@ip-37-248-155-129.multi.internet.cyfrowypolsat.pl)
[20:42:24] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[20:44:30] *** Joins: aleios (~aleios@user/aleios)
[20:52:14] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[20:54:47] *** Joins: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net)
[20:54:47] *** Quits: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net) (Changing host)
[20:54:47] *** Joins: Alipha (~AliphaX@user/alipha)
[20:57:55] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[21:15:42] *** Joins: AmR (~AmREiSa@156.199.223.24)
[21:15:52] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:21:11] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:27:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:27:45] *** Joins: kurfen_ (~kurfen@160.238.38.230)
[21:28:17] *** Quits: kurfen (~kurfen@160.238.38.225) (Ping timeout: 256 seconds)
[21:35:29] *** Quits: ibenn (~benn@2a02:8071:45af:1700:6ab3:ab1:5b69:4d2f) (Quit: Leaving)
[21:39:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:10] *** ChanServ sets mode: +v npaperbot
[21:49:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:56:46] <Alipha> mort: ranges work like an assembly line: if you have for(auto &obj : foo | x | y | z), then an element from foo gets processed through x, y, and z, and produces obj. Then the next loop, the next element from foo is read. And so, you don't have to worry about intermediary containers
[22:06:43] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[22:11:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c5dd:3e79:954e:8ffa)
[22:11:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c5dd:3e79:954e:8ffa) (Changing host)
[22:11:58] *** Joins: skapata (~Skapata@user/skapata)
[22:18:43] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:28:27] *** Quits: proller (~p@2a02:6b8:b081:1210::1:1f) (Remote host closed the connection)
[22:30:38] <Guest19> Hello. I can understand basic template stuff like how you pass a type when invoking and how classes store that type internally etc. But variadic templates, fold expressions, advances usage of templates, CRTP etc confuses the hell out of me. I think I am missing the mental model of how to interpret/understand the template code. Like Args ...args and
[22:30:38] <Guest19> then args... etc confuses me. How do I understand it better? Any tips/articles/books ?
[22:31:08] *** Joins: proller (~p@80.240.216.69)
[22:33:06] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[22:33:24] <CarloWood> Guest19: Just like with normal templates, eg template<typename T> void f(T);, for each different type T a new function is generated as if you have void f_int(int); void f_float(float); etc.
[22:35:00] <CarloWood> Guest19: using variadic templates also have as 'unknown' the number of template parameters. That number also depends on how you use/call them, at which point for that specific case the types and the number of arguments are known and a new function/class is generated.
[22:35:02] <Guest19> Yeah I understand that part fine CarloWood. It's just that when it comes to what I see as "advanced" usages, I find it difficult to comprehend
[22:35:19] <Guest19> like https://godbolt.org/z/K3zqc6jns example from mort
[22:36:12] <CarloWood> Just like when you can use 'T' inside a templates body to take the place of whatever the type is for that case, you can use ... to expand expressions over the number of template arguments.
[22:36:58] <CarloWood> There you have on line 5: template<int Head, int... Tail>
[22:37:12] <CarloWood> and then on line 7: std::array<NDBoolArray<Tail...>, Head> vals;
[22:38:28] <CarloWood> If a given instantiation is <int, int, int , int , int>  then line 7 becomes std::array<NDBoolArray<int, int, int, int>, Head> vals;
[22:39:08] <Guest19> I see. But now we've to deal with templates and recursion lol
[22:39:25] <CarloWood> Here is a more interesting case:
[22:39:53] <CarloWood> template<typename DeviceType, typename... ARGS> boost::intrusive_ptr<DeviceType> create(ARGS&&... args)
[22:39:55] <CarloWood> {
[22:39:58] <CarloWood> ...
[22:40:08] <CarloWood>     (LibcwDoutStream << ... << (std::string(", ") + libcwd::type_info_of<ARGS>().demangled_name())) << ">(" << join(", ", args...) << ')';
[22:40:53] <CarloWood> I am sure you understand what 'args...' becomes: just a comma separated list of the arguments passed to this create() function.
[22:41:15] <CarloWood> But there is another one, the  '<< ... <<<'.
[22:41:58] <CarloWood> The pattern is:  ( something ... something  ARGS something)
[22:42:41] <CarloWood> hmm, I'm not 100% too familiar with that either :P.
[22:42:48] <Guest19> lol
[22:43:01] <Guest19> okay let me as a simpler doubt
[22:43:13] <CarloWood> I am wondering if the inner () also matter.
[22:43:21] <CarloWood> so
[22:43:36] <Guest19> how do you remember Args&&... args vs args...
[22:44:03] <CarloWood> The pattern is:  ... << (something1 ARGS something2)
[22:44:06] <CarloWood> probably
[22:44:18] <CarloWood> then for each argument in ARGS that is repeated.
[22:44:52] <CarloWood> so you get:   << (something1 arg1 something2) << (something1 arg2 something2) << ...etc
[22:46:22] <CarloWood> Args&&... args   is special thing, it doesn't mean that this is an rvalue. I forgot the name, sorry. But it allows perfect forwarding by using std::forward<ARGS>(args)...
[22:46:50] <CarloWood> Google "C++ perfect forwarding" I guess.
[22:47:17] <Guest19> okay
[22:47:20] <CarloWood> I use that in this function a few lines lower:
[22:47:26] <CarloWood>   DeviceType* device = new DeviceType(std::forward<ARGS>(args)...);
[22:47:48] <Guest19> Need to understand forwarding too
[22:48:06] <CarloWood> Then the result is that whatever you pass to the create function is used as argument for the constructor of DeviceType, with all type bells and whistles intact.
[22:51:24] <CarloWood> Here is another one:
[22:51:27] <Guest19> I ssee
[22:51:32] <CarloWood> template<typename ...Args>
[22:51:32] <CarloWood> template<size_t ...I>
[22:51:32] <CarloWood> void Join<Args...>::print_on(std::ostream& os, std::index_sequence<I...>) {
[22:51:43] <CarloWood>   using ostream_serializer_catch_all::operator<<;
[22:51:43] <CarloWood>   (..., (os << (I == 0 ? "" : m_separator) << std::get<I>(m_args)));
[22:51:43] <CarloWood> }
[22:52:04] <CarloWood> So <size_t ...I> is a list of size_t's.
[22:52:14] <CarloWood> Ie, 5, 8, 0 10
[22:52:29] <CarloWood> Then (...,  something with I) expands to
[22:52:51] <CarloWood> (something with 5, something with 8, something with 0, something with 10)
[22:53:48] <CarloWood> Aka, this prints arguments with m_separator between them (prefixes each except the first one)
[22:53:49] <Guest19> this will give me headache :S
[22:54:23] <CarloWood> Really the sequence is always 0, 1, 2, 3, ..
[22:54:50] <CarloWood> so for the first one, I==0, the prefix is "", and for all the rest it is m_separator.
[22:55:28] <CarloWood> std::get<I>(m_args) just gets the I-th argument of m_args (which has as many args as there are in the size_t list
[22:56:24] <CarloWood> Then you have  sizeof...(Args)  which is just a single size_t: the number of elements in the template pack Args.
[22:58:08] <Guest19> okay
[22:58:20] <Guest19> these "..." keep jumping all around lol
[23:03:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[23:04:25] *** Joins: chozorho (~chozorho@2601:146:300:c30::71e1)
[23:05:28] <Alipha> Fold expressions are rather confusing. I still have problems with it. But parameter pack expansion is pretty straightforward, imo
[23:05:31] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:07:27] <Guest19> Alipha : how do you know where to put "..." . is that something that you just memorize? like if it's part of argument, do Args... args, if it's part of function body, do args...
[23:08:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:12:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:13:03] <CarloWood> If the '...' are on the left side then they are unknown, if they are on the right side then they are known and just expanded.  'Args... args' expands into a comma separated list of arguments with type, while args... expands to a comma separate list of just the arguments (no types).
[23:13:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:13:45] <CarloWood> You can even change the types.
[23:14:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:14:27] <CarloWood> You can do:  Args const&... args    getting a comma separated list of the arguments with types, where each type is a const&.
[23:15:00] <Guest19> okay
[23:15:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:15:50] <CarloWood> but I totally agree that the exact placement of the ... is also not clear to me always - it seems to be a case of trial and error haha.
[23:16:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:17:08] <Guest19> that's what haha..I thought experienced devs can shed some light on it
[23:17:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:17:42] <CarloWood> { cout << f(42, 3.14); }  template<typename ...Args> std::string f(Args const&... args) { return to_string(... + args); }
[23:17:42] <geordi> error: expected primary-expression before '...' token
[23:18:05] <CarloWood> I guess I guessed wrong.
[23:18:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:18:20] <PJBoy> fold expressions require their own parentheses
[23:18:40] <CarloWood> yeah, thought so.. can't abuse the () of the to_string
[23:18:49] <CarloWood> { cout << f(42, 3.14); }  template<typename ...Args> std::string f(Args const&... args) { return to_string((... + args)); }
[23:18:49] <geordi> 45.140000
[23:18:51] <CarloWood> yay
[23:19:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:19:50] <CarloWood> I guess that  args...   is just the same as  (..., args)
[23:20:03] <CarloWood> except that the latter will have () around it.
[23:20:04] <PJBoy> nah
[23:20:17] <PJBoy> args... is a bit more awkward
[23:20:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:20:41] <CarloWood> so you can do:  g(1, 3, args...);  but not replace that with:  g(1, 3, (..., args));
[23:21:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:21:55] <CarloWood> never the same I guess.  (expression, expression, expression)  is just not the same as an argument list.
[23:22:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:22:51] <CarloWood> I came here to ask something :P .. what was it
[23:23:06] <PJBoy> { cout << f(42); }  string f(auto... args) { return to_string((args...)); }
[23:23:07] <geordi> error: expected ')' before '...' token (fix known)
[23:23:09] <PJBoy> take that for example
[23:23:23] <PJBoy> it seems like that should be equivalent to the comma folded expression
[23:23:26] <PJBoy> but it's not
[23:23:37] <PJBoy> parameter pack expansion only works in some limited contexts
[23:23:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:24:28] <CarloWood> Oh right - I want to invent a C++ syntax based way to define a "structure" (in the english meaning of the word, not a struct). Ie, you could define an audio pipeline with a series of << and filters in between:
[23:24:43] *** Quits: zenstoic (uid461840@id-461840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:24:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:25:14] <CarloWood> audio_source >> equalizer >> VU_Meter(vu2) >> main_speaker;
[23:25:31] <CarloWood> overloading operator>> in nasty ways etc.
[23:25:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:25:56] <CarloWood> What I need however is a "pipeline" like structure that has multiple things in parallel.
[23:26:24] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[23:26:45] <CarloWood> That is a lot harder to code in C++... you can not very easily write two lines of C++ code above eachother and have them "communicate" along the way, vertically.
[23:26:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:27:11] <CarloWood> So, looking for ideas to make that work anyway :)
[23:28:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:28:13] <CarloWood> Lets say (this is all very abstract) you have a few things that have two inputs and two outputs:
[23:29:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:29:19] <CarloWood> .       .-------.
[23:29:20] <CarloWood> --in1-->|       |--out1-->
[23:29:20] <CarloWood> --in2-->|_______|--out2-->
[23:29:28] <CarloWood> and then a bunch of those on a row.
[23:29:48] <CarloWood> That is pretty hard to turn into value C++ code no? :/
[23:30:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:31:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:31:23] <PJBoy> so what's the idea here
[23:31:26] <PJBoy> you have these boxes
[23:31:31] <bv> https://wiki.gnuradio.org/index.php/Handling_Flowgraphs
[23:31:43] <PJBoy> and you want to be able to wire up the boxes so that your can eventually give it some inputs
[23:31:53] <PJBoy> and it will go through all the boxes to get the output?
[23:32:03] <PJBoy> but you want to be able to wire up the boxes in advance of getting the input
[23:32:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:33:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:34:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:34:37] <CarloWood> I guess I want to be able to make a pipe line, like  foo << bar << baz, but then one that can span multiple lines.  That would require -say- 'foo' to be three lines tall, but also have an element at line 1 that has a 'connection' to an element one or two lines lower.
[23:34:42] <CarloWood> 2D C++ code :)
[23:34:51] <CarloWood> or "ascii art" code.
[23:35:10] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:35:11] <PJBoy> trying to compete with
[23:35:15] <PJBoy> Eelis' analog literals
[23:35:31] <CarloWood> wazthat?
[23:35:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:35:49] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c0df:1ba6:10f2:5481)
[23:36:09] <PJBoy> wow someone made a rust crate for it
[23:36:14] <PJBoy> http://www.eelis.net/C++/analogliterals.xhtml
[23:36:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:37:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:38:39] <CarloWood> wow, haha - something already pasted that to me (not the url).  It is interesting... You think that could be expanded such that you can have multiple boxes on a row with lines between them?
[23:38:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:38:48] <CarloWood> s/something/someone/
[23:39:19] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[23:39:41] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b940:2c5d:9a87:d849)
[23:39:42] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b940:2c5d:9a87:d849) (Changing host)
[23:39:42] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:39:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:40:41] <PJBoy> I have too much sanity to think about something like that
[23:40:48] <CarloWood> rofl
[23:40:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:41:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:41:54] <CarloWood> I sure won't be easy to make something like this that is interpreted by the compiler line by line and then internally understood as the 2 dimensional drawing it is :P
[23:42:00] <CarloWood> It* sure
[23:42:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:43:58] *** Quits: paul424 (~tom@ip-37-248-155-129.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:44:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:45:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:46:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:47:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:47:26] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Quit: leaving)
[23:48:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:49:23] *** Quits: philip (~philip@210.16.81.112) (Ping timeout: 256 seconds)
[23:49:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:50:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[23:51:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:51:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (K-Lined)
