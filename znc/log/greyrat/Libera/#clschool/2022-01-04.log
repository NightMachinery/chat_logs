[00:01:15] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:57:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:59:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:41:41] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[02:02:37] *** Joins: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21)
[02:05:10] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[02:07:19] *** Quits: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21) (Client Quit)
[02:13:09] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[02:41:20] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[02:46:14] *** Joins: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1)
[03:05:37] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[03:05:57] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[03:12:34] *** Joins: mrmr (~mrmr@user/mrmr)
[03:18:26] *** Quits: artchad (~user@public-gprs233196.centertel.pl) (Read error: Connection reset by peer)
[03:29:50] *** Quits: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16) (Quit: Client quit)
[03:34:53] *** Joins: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1)
[03:37:17] *** Quits: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1) (Ping timeout: 240 seconds)
[03:50:56] *** Quits: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1) (Quit: Leaving)
[03:55:07] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:56:03] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[03:56:20] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Client Quit)
[03:59:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:33:49] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[05:13:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[05:15:54] *** Joins: aeth (~aeth@user/aeth)
[05:20:55] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[05:48:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:34:38] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[06:41:45] *** Quits: sts-q (~sts-q@91.200.108.152) (Ping timeout: 256 seconds)
[06:46:19] *** Joins: sts-q (~sts-q@212.53.219.148)
[06:48:59] *** Joins: drakonis (drakonis@user/drakonis)
[07:02:45] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[07:31:23] <beach> Good morning everyone! 
[08:06:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:09:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:34:52] *** Joins: Oladon (~olad@98.43.81.226)
[10:01:26] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[10:02:09] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:02:17] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[10:43:13] *** Joins: Jing_ (~hedgehog@2604:a840:3::103c)
[10:46:17] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Ping timeout: 240 seconds)
[11:06:03] *** Joins: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de)
[11:09:28] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:19:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:24:53] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[11:25:05] *** Joins: shka (~herr@109.231.0.226)
[12:18:57] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:37:55] *** Quits: beach (~user@2a01:cb19:150:3400:c341:38a2:d2af:9009) (Ping timeout: 268 seconds)
[12:46:22] *** Joins: beach (~user@2a01:cb19:150:3400:4e13:e680:ba99:cfc5)
[13:09:58] *** Joins: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[13:13:33] *** Joins: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16)
[13:14:09] *** Quits: beach (~user@2a01:cb19:150:3400:4e13:e680:ba99:cfc5) (Ping timeout: 250 seconds)
[13:40:15] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[14:08:01] *** Joins: nexeq (~nexeq@user/nexeq)
[14:53:47] *** Joins: artchad (~user@public-gprs233196.centertel.pl)
[15:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[15:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[15:56:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:21:08] *** Joins: Flar86 (~Flar86@dyn14.pub.mors.si)
[16:30:33] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:38:23] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[16:38:42] *** Parts: artchad (~user@public-gprs233196.centertel.pl) (ERC (IRC client for Emacs 27.2))
[16:38:51] <nij-> I understand that a Lisp doesn't take too much in the metacirculate state to define EVAL. But.. why is this important?
[16:39:27] <nij-> (Some people even went on and said that it's the Maxwell equation in computing?)
[16:49:16] <nij-> (I do feel something deep behind, but I couldn't elaborate. So I didn't ask this as if it's a joke. I'm serious.)
[16:50:06] <bremner> I only know the argument from convenience: it's better to build your compiler in lisp than in C
[16:50:52] <bremner> I guess you could also argue about the software stack needed to bootstrap the compiler; the primitives could be compiled/interpreted in some trivial way
[16:55:44] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[16:57:00] *** Joins: nexeq (~nexeq@user/nexeq)
[17:03:16] <nij-> I guess this should be a practical answer but I cannot defend it well:
[17:03:57] <nij-> That EVAL can be defined upon such a thin layer is a proof for the effectiveness of LISP's minimal syntax.
[17:04:41] <nij-> Why is this useful? Well, practically it means that the user can hack the language easily.
[17:06:43] <nij-> --- But I'm not sure if I'm begging the answer. Like.. why does EVAL provide a good proof? Why is EVAL so special?
[17:23:06] *** Joins: beach`` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[17:23:13] *** Quits: sts-q (~sts-q@212.53.219.148) (Ping timeout: 256 seconds)
[17:24:21] *** Quits: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:27:14] *** beach`` is now known as beach
[17:28:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:30:51] *** Quits: Flar86 (~Flar86@dyn14.pub.mors.si) (Quit: Client closed)
[17:31:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Ping timeout: 240 seconds)
[17:31:17] *** Joins: nij- (~jin@24-225-98-35-dynamic.midco.net)
[17:34:07] *** Joins: sts-q (~sts-q@212.53.219.148)
[17:41:11] <nij-> Got disconnected.. did I miss anything?
[17:43:48] <bremner> nope
[17:48:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:01:13] *** Quits: nexeq (~nexeq@user/nexeq) (Remote host closed the connection)
[18:03:34] *** Joins: nexeq (~nexeq@user/nexeq)
[18:07:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:08:15] <beach> nij-: Metacircular evaluators make it much easier to explain the semantics of the language being evaluated.  
[18:09:57] <pjb> Well, I think the problem comes fundamentaly from the formal semantics.  We are not able, mathematically, to define semantics, more satisfactorily, than by a mapping from one formal system to another formal system.  Seemingly, this doesn't bring much.
[18:10:25] <pjb> In practice, it can be an improvement, if the target formal system is simplier than then source formal system.
[18:10:42] <beach> Sure.
[18:11:18] <pjb> So an apparent infinite recursion in formal semantics is avoided by successive mappings to simplier formal systems, until we reach a formal system simple enough that we can agree it's correct, and the forms we present in it, express the right semantics.
[18:12:01] *** Quits: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de) (Quit: Leaving)
[18:12:17] <beach> Denotational semantics is such a system. 
[18:12:19] <pjb> So, now for evaluators and meta-circular evaluators, it's a mere recognition of this state of affair.  We're just mapping one formal system (one language) to another formal system (another language), which happens indeed, to be only a subset of the same language actually.
[18:13:00] <pjb> Basically, the point of defining lisp with eval, is that you can take the lisp source of eval, and implement it in assembler, and you get a working lisp interpreter.
[18:14:26] <pjb> Then there's the compiler/interpreter bootstrapping question, where it's useful to write your language implementation in that very same language, since once you have a runnable version,  you can use it to compile its own source, and thus, validate the correctness of that implementation (using it as a first, rather extensive, test).
[18:14:36] <pjb> nij-: ^
[18:16:13] <beach> So you mean it is possible to write a Common Lisp compiler in Common Lisp? :)
[18:16:25] <pjb> :-)
[18:16:39] <pjb> Today, it is, since we have working CL implementations.
[18:18:25] <pjb> If the new implementation is careful to produce "reproducible builds", ie. images that are only functionally dependent on the sources, then we can validate it by comparing the images produced by the implementation when it's compiled with another implementations vs. when it's compiled by itself.
[18:19:36] <beach> That would be highly desirable.  It can be a bit tricky, but it is possible.
[18:21:18] <pjb> beach: well, there are obvious things to avoid, like including revision strings, or time stamps.  (starting from a known initial state, for stuff line *gensym-counter* may help).  Then as images, we'd want to avoid any randomness, eg. in the order in which the objects are saved.  Sorting may help.
[18:22:15] <beach> Right, there are several such minor issues to take into account.
[18:27:25] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[18:44:51] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[18:46:02] *** Joins: cranium (~cranium@user/cranium)
[18:48:36] *** Joins: shka (~herr@109.231.0.226)
[18:59:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:06:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:40] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[19:14:11] *** Joins: nexeq (~nexeq@user/nexeq)
[19:14:11] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[19:15:15] *** Joins: nexeq (~nexeq@user/nexeq)
[19:19:25] *** Quits: nexeq (~nexeq@user/nexeq) (Ping timeout: 241 seconds)
[19:20:25] *** Joins: nexeq (~nexeq@user/nexeq)
[19:21:49] *** Quits: nij- (~jin@24-225-98-35-dynamic.midco.net) (Ping timeout: 263 seconds)
[19:49:42] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:50:17] <nij-> My connection is working bad today. However, I was lucky enough to save a part of the conversation.
[19:50:36] <nij-> (The last sentence I saw was::   beach   > Right, there are several such minor issues to take into account.)
[19:51:14] <beach> There was nothing after that.
[19:51:29] <nij-> I guess I'm still a bit confused. The file I was discussing was Paul Graham's Root of Lisp.
[19:52:03] <nij-> In that article, he defines the 7 special ops, and then define how functions work. Then he provides the definition of eval.
[19:52:23] <nij-> My problem is.. basically what eval can do has been given before eval. 
[19:52:39] <nij-> The definition eval is just a recap of what Lisp is doing in terms of itself.
[19:52:48] <nij-> So.. what's the point of that?
[19:53:48] <beach> I am not sure what you are trying to say, but EVAL handles a crucial part of what it means to interpret or compile Lisp, namely the lexical environment.  
[19:54:32] <beach> That one must be handled correctly so that scoping rules are followed, and nesting/shadowing work as advertised. 
[19:55:32] <nij-> I mean, before the definition of eval, we had already (in the host language) the power to evaluate as we like.
[19:55:51] <nij-> So why do we bother wrapping it into a Lisp function (eval)?
[19:56:19] <beach> I don't recall the document in question, so I don't know. 
[19:58:57] <beach> Let me read the document.
[20:00:08] <nij-> Thanks, beach.
[20:00:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:00:26] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:00:48] <beach> The point seems to be homoiconicity.  Part of it anyway.
[20:04:50] <beach> The point is probably also that initially there was no "host implementation", so the EVAL function had to be translated to assembly as pjb pointed out.  But it is very simple, so that's not a big problem.  Compare that to an EVAL in a language in the Algol family.
[20:07:04] <beach> And, despite the objections by pjb, EVAL does "define" the semantics of the language, so you have quite a good specification of the language in just a page or so.
[20:07:32] <beach> Again, if you were to try that with a language in the Algol family, you would probably fail.
[20:08:51] <beach> Can you think of a better way of explaining the semantics of Lisp?
[20:09:58] <mfiano> He is busy discussing his confusion in #lisp
[20:10:12] <nij-> I'm not sure how `eval` explains the semantics of lisp. Before `eval`, not only were there the 7 special ops, but also how a list whose car is a lambda form will evaluate was already specified.
[20:10:20] <nij-> We do not need eval to bootstrap Lisp.
[20:12:22] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[20:12:46] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[20:17:57] <beach> OK.
[20:21:11] <nij-> beach: My point is not against that there's a simple semantics for Lisp. My point is that things started working before eval already.
[20:33:39] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:00:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:05:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[21:11:57] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:24:34] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[21:24:47] *** Joins: nexeq (~nexeq@user/nexeq)
[21:44:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:14:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[22:27:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:38:27] *** Joins: Oladon (~olad@98.43.81.226)
[22:46:25] <lisp123> If I use a special variable *armin* in a function, should I (declare (special *armin*))?
[22:46:32] <lisp123> in the form
[22:51:10] <mfiano> if it's a special variable, then it was already declared special
[22:51:27] <mfiano> either implicitly with defvar/defparameter, or manually elsewhere
[22:51:33] <mfiano> otherwise it would not be a special variable
[22:51:40] <lisp123> I think its still good style to do so?
[22:51:45] <mfiano> No
[22:51:53] <lisp123> I see
[22:51:56] <lisp123> Ok thanks
[22:54:55] *** Joins: artchad (~user@public-gprs233196.centertel.pl)
[22:55:00] <artchad> You know what's interesting. When I call the SDL2 example like this: (bordeaux-threads:make-thread (sdl2-examples:basic-test) :name fred), I can't interact with the repl. But If I wrap the call to the example inside a lambda, it works. So now I use (bordeaux-threads:make-thread (lambda () (sdl2-examples:basic-test)) :name fred)
[22:57:00] <bremner> artchad: check the docs for make-thread; it expects a function, which is what the lambda is giving it
[22:57:15] <bremner> not sure what happens in the other case.
[22:57:37] <bremner> although my thinking about function values is probably scheme-biased
[22:58:08] <artchad> bordeaux-threads has docs?
[22:58:20] <artchad> almost all functions have a "TODO" tag
[22:58:24] <bremner> uh. According to google, yes
[22:58:44] <bremner> https://quickref.common-lisp.net/bordeaux-threads.html#Exported-functions
[22:59:00] <artchad> It seems I've misunderstood what was meant with "function". It was supposed to be a function object and not a function call.
[22:59:29] <bremner> well, the function call could evaluate to anything, but that evaluation happens first
[22:59:53] <artchad> you're right. I'm a bit rusty with lisp
[23:00:00] <bremner> argument expressions are evaluated, then the results passed to the function 
[23:00:01] <artchad> all arguments are passed by value
[23:00:15] <bremner> mainly it's not haskell :)
[23:00:17] <artchad> yeye, thanks for the reminder
[23:00:20] <artchad> :D
[23:15:26] *** Joins: paule32 (~paul@user/paule32)
[23:15:51] <paule32> hello, and a very happy new year, and good fortunes
[23:16:22] <paule32> i have a problem in context of class's in sbcl: https://dpaste.com/594PANGQQ
[23:17:04] <paule32> i would use "sym" (in line 8) as variable, that is defined after the load of the code
[23:17:30] <paule32> means: sym should be a placeholder - if possible
[23:24:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:25:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:27:00] <lisp123> paule32: Did you get an answer?
[23:27:18] <paule32> no, sorry
[23:27:55] <lisp123> I didn't see SYM reference in the form for CREATE-GATE-NOT, so is there a reason it needs to be in the parameter list?
[23:31:05] <lisp123> (Although I don't know exactly what you need to do, my suspicion is this may work for you: (defmethod create-gate-not (sym (input integer)) (make-instance 'gate-not :input-A input)))
[23:31:23] <lisp123> As there was a typo in that line
[23:34:56] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 245 seconds)
[23:38:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:40:13] *** Quits: nexeq (~nexeq@user/nexeq) (Remote host closed the connection)
[23:42:24] *** Joins: nexeq (~nexeq@user/nexeq)
