[00:22:11] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[00:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[00:35:40] *** Joins: aeth (~aeth@user/aeth)
[00:47:06] <gilberth> Ok. I found a bug with my assertion. The receiver buffer would be clobbered when a packet comes in, in very rare accessions like one out of 1,000 packets. I still don't have a proper fix, but polling for that assertion become fulfilled, and now my retransmission count drop to zero, which is what I would expect. Still kind of fishy.
[00:53:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[00:55:06] *** Joins: aeth (~aeth@user/aeth)
[01:03:07] <gilberth> Over wifi I get real retransmissions.
[01:28:31] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:33:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[01:35:56] *** Joins: aeth (~aeth@user/aeth)
[01:40:04] <hayley> "This is exactly the trap Node fell into; and you have to do it anyways.   Double-unsmiley.   :-(   :-("
[01:54:01] <moon-child> mfiano: why do you think raku messed up rationals and floats?
[01:54:07] <moon-child> auto-promotion of rationals to floats?
[02:11:56] <hayley> https://www.youtube.com/watch?v=uhIGuqZzFNA
[02:35:23] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 246 seconds)
[02:35:47] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-101F-static.midco.net) (Quit: Leaving)
[02:57:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[03:00:26] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:04:26] <hayley> Fun that they don't just tell you which part of the universities fees you're paying now. It says "Overdue: $1,764" but that's almost all going to debt, but I still have to pay $120 now for student services.
[03:06:41] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[03:07:13] <copec> What is the government interaction with universities like there?
[03:07:36] <hayley> As in? They pay for 2/3 of the fees for domestic students, I guess.
[03:08:22] <copec> That's nice at least
[03:09:12] * selwyn__ enjoys student debt interest
[03:10:31] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[03:12:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[03:13:02] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:13:26] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:13:58] <selwyn__> https://www.imperial.ac.uk/news/228373/major-nuclear-fusion-milestone-reached-ignition/
[03:17:58] * hayley uploaded a video: (4136KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/UepeYGRVMYZYfKnAUaFpNCBx/totally-legit-rust-video.mp4 >
[03:25:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:29:42] <gilberth> Now after I rewrote that to match the hardware description more closely, the code has less lines, less state, and less glitches.
[03:30:19] <gilberth> And less polling.
[03:33:53] <hayley> Apparently synchronisation primitives, nor SLEEP, exist now.
[03:38:35] <gilberth> ?
[03:39:43] <hayley> https://www.reddit.com/r/ProgrammingLanguages/comments/q6f7cy/on_asyncawait_and_its_contagiousness/hgf19le/
[03:39:56] <hayley> "let's say you want to be woken up in a year with a detailed analysis of the stock market. That's what you want. That's the semantics you want to express. So you write await followed by the code that will arrange to go off and do what you want to wait for."
[03:40:04] <hayley> (PROGN (SLEEP +YEAR+) (GET-DATA)) not good enough?
[03:41:40] <gilberth> Nah, that are not enough threads.
[03:42:18] <gilberth> It will be faster if the sleep runs on one core and the get-data runs on another.
[03:42:38] *** Joins: lad (~lad@user/lad)
[03:45:22] <hayley> If ye really want threads, we could do (LET (X) (BT:JOIN-THREAD (BT:MAKE-THREAD (LAMBDA () (SLEEP +YEAR+) (GET-DATA)))) X), or something similar with mailboxes and semaphores.
[03:45:28] <hayley> What kind of drugs are async/await people on?
[03:48:05] *** Quits: selwyn__ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:50:54] <hayley> But, due to the definition of BT:JOIN-THREAD, adding a thread like this is basically "eta-conversion" as there are appropriate synchronisation points when the thread is created and joined.
[04:00:31] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[04:54:36] <hayley> https://www.youtube.com/watch?v=1iY9hut8kPY
[05:05:24] <hayley> gilberth: What's funny is that there is no concurrency in this example, so the least contrived thing to do is always to block.
[05:08:45] *** Joins: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net)
[05:17:46] <gilberth> Easiest configuration file parser in C: spawn cc to compile the config file as a dynamic lib and then use dlopen. Good idea?
[05:17:47] <hayley> It's like, you have a thing you need to do, and you don't want to do anything before it's done. You know what we have for sequencing expressions? Fucking PROGN of all things.
[05:18:34] <hayley> I /REALLY/ must be missing something here, because all these examples are not concurrent and are synchronous. It'd be less effort to write sequential code, cause the problem is sequential.
[05:18:40] <gilberth> hayley: LISP doesn't have PROGN.
[05:19:13] <hayley> Assuming you evaluate function arguments left-to-right, then do ((lambda (x y) y) (print "I'm working") 4)
[05:20:08] <gilberth> hayley: Won't make a difference without side effects. :-)
[05:20:36] <gilberth> Anyhow, I am kidding you.
[05:20:42] <hayley> ((lambda (x y) (funcall y (funcall x)) (lambda () (print "Hi")) (lambda (drop) 42))
[05:21:00] <hayley> I dropped a right paren.
[05:21:06] <gilberth> There is no PRINT.
[05:21:15] <hayley> ((lambda (x y) (funcall y (funcall x))) (lambda () (print "Hi")) (lambda (drop) 42))
[05:21:21] <hayley> Now, don't tell me you use lazy evaluation too.
[05:21:56] <gilberth> Me? I am talking about JMC's original LISP. And as it has COND, it doesn't need lazy evaluation.
[05:22:32] <hayley> When the hell did Dijkstra invent PARBEGIN anyway? I keep saying that all the uses of futures/promises/async/etc are better with PARBEGIN.
[05:23:03] <gilberth> hayley: Anyhow, what do you thing of my crazy idea? I'm lazy.
[05:23:13] <gilberth> k
[05:23:35] <hayley> IIRC some suckless software does that, except without generating the C file on the fly. You just write a header file.
[05:25:42] <hayley> (FWIW with first-class functions you can make dynamic "graphs" of threads of execution, i.e. let f () = par { A, B } in par { f(), C })
[05:25:59] <gilberth> I would include a header with a typedef for a struct. Then the user would say e.g. struct cadr_config = { .hostaddr = 0401, .color_tv: 1, .disk_image = "frob.img" } cadr_config;
[05:26:31] <hayley> (Now we have A, B and C running concurrently, and it can be configured by providing a different value for F.)
[05:26:57] <gilberth> Or .use_gl = 1, .debug_chaos = DEBUG_PKT | DEBUG_INTR, ... You get the idea.
[05:27:54] <hayley> The bastard of a guy even said "So, agreed: one pretty much can't beat await. :)" to me, and I really had to not tell him to fuck off, else I would be banned again.
[05:27:55] <gilberth> The only problem is that we need to guess how to invoke cc.
[05:28:19] <hayley> CC=/usr/bin/clang ./cadr-simulator
[05:28:59] <gilberth> And what is the option for a dynamic lib? A pity that dlopen can't cope with a plain .o file, or has that changed?
[05:29:12] <hayley> Link your favourite compiler as a library?
[05:29:29] <gilberth> libtcc? Great idea!
[05:30:14] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ce7f:4e93:4cc4:1ccd) (Ping timeout: 265 seconds)
[05:30:15] <gilberth> It takes a string to compile right into memory and you then ask for symbols.
[05:30:31] <gilberth> hayley: Thanks! That's just terrific!
[05:30:36] <hayley> Sure.
[05:30:47] * hayley puts https://www.youtube.com/watch?v=JoMCip83GZ4 on the jukebox
[05:31:23] <gilberth> Now I only need to install libtcc :-/
[05:35:17] <hayley> Hm, I have gotten spam on my fancy email address already.
[05:35:41] <hayley> I was going to collate how long everyone I know takes to respond to emails.
[05:36:27] <hayley> Gilad Bracha apparently took 2 hours 10 minutes, Cliff Click 3 hours 30 minutes, Gil Tene 26 hours, Alan Kay at least 2 years probably.
[05:45:10] <hayley> Aha, it's in Dijkstra's "Cooperating sequential processes".
[05:45:18] <hayley> https://www.cs.utexas.edu/users/EWD/transcriptions/EWD01xx/EWD123.html
[05:46:46] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[05:51:58] <gilberth> Hmm. /usr/include/sys/cdefs.h:81: warning: #warning "Unsupported compiler detected" So much for that. Why is that include file even touched? I said "#include <stdint.h>" and that should come from tcc.
[05:52:24] <hayley> You sure of it? Perhaps it pulls something else?
[05:52:49] <hayley> In my copy of tcc 0.9.27 there's no stdint.h
[05:53:19] <gilberth> find ~/opt/tcc-0.9.27/|grep stdint => nothing.
[05:53:45] <gilberth> You were faster.
[05:55:01] <gilberth> But I could live with sticking to the builtin C types.
[05:56:34] <hayley> http://cyclone.thelanguage.org/blog/trevor/Memory%20management%20in%20Flash-20060413194616/ "Another article gives some numbers: the overhead of reference counting was about 20% of runtime, and the overhead of the new garbage collector is only 1–2%.  (The collector is an incremental mark and sweep collector.)  Also, memory use is reduced by about 50%."
[06:03:49] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:11fc:225b:3e1b:f83b)
[06:07:59] <gilberth> Ok. Works. Saves me from writing a parser.
[06:09:54] <gilberth> hayley: Is it compacting? And my little cdr-coding benchmark indicates we could win there, too.
[06:10:25] <hayley> No, it is not, and idk how applicable cdr-coding is when you have mutable conses.
[06:11:25] <hayley> I thought I'd try cdr-coding for the Zero Feet compiler (just make another map where the last slot is cdr-coded), but it doesn't work when we have the indirection in objects for redefinition.
[06:11:40] <gilberth> We have read barriers anyway, and do you really say RPLACA or RPLACD that often. I mean, wisdom is that in a function that just gathers some list, a final REVERSE is faster than NREVERSE.
[06:12:27] <hayley> The Pauseless read barrier only works at the granularity of pages though.
[06:12:40] <gilberth> But: We are trained somehow to use vectors instead of lists.
[06:12:44] <hayley> I don't RPLACD too often, but some do.
[06:12:44] <gilberth> hayley: Oh.
[06:13:01] <gilberth> bbl
[06:13:31] <hayley> I mean, every barrier other than Brooks forwarding pointers works at page or semispace granularity. And the forwarding pointers add a slot to every object, which is bad.
[06:16:31] <moon-child> sbcl uses high alignment so every standard object takes at least 64 bytes.  So one more slot would not be terrible.  Of course you wouldn't want to do that for conses, but
[06:26:53] *** Quits: iAmDecim (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 250 seconds)
[06:30:55] <hayley> IIRC it's 16 byte alignment?
[06:32:00] <hayley> Hm, though I don't know how many bits are used for standard objects. 64 bytes sounds...very large though?
[06:36:50] <moon-child> hmm, I may be misremembering
[06:39:24] <hayley> I allocated 20 STANDARD-INSTANCES and apparently the average difference is 30.4 bytes. Which makes no sense...
[06:40:48] <hayley> .oO(If they continue saying that "await" makes it explicit, I'll just say "Look, in Smalltalk they write A. B. and they're like sentences - clearly . is sequencing!")
[06:42:14] <hayley> Seems to be 32 bytes.
[06:42:37] <hayley> (let ((o (make-instance 'standard-object))) (loop repeat 1000 for n = (make-instance 'standard-object) sum (- (sb-kernel:get-lisp-obj-address n) (sb-kernel:get-lisp-obj-address o)) do (setf o n)))
[06:42:43] <mfiano> moon-child: I think it made a strange tradeoff in favor of correctness over efficiency by having decimal literals be treated as Rat if they are able to, and IEEE otherwise. I also think it is strange that the denominator is bounded, and the separate FatRat type is what Scheme and CL users are familiar with.
[06:43:06] <mfiano> I also have to think like a "scientist" if I absolutely want a IEEE literal.
[06:43:23] <mfiano> Which imo is a cognitive switch
[06:44:09] <mfiano> Also with rational arithmetic, if the denominator overflows the result is now a float, not a Rat.
[06:52:24] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[07:04:59] *** Joins: semz (~none@user/semz)
[07:06:55] *** Joins: iAmDecim (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[07:16:42] <hayley> Huh, they are teaching us MD5 and SHA1 for examples of hash functions?
[07:25:38] <mfiano> This book is incredibly painful to read
[07:26:03] <mfiano> Example:
[07:26:13] <mfiano> "This collection of operators perform operations greater (gt), greater or equal (ge), later (lt), and less or equal (le) respectively."
[07:26:33] <hayley> I really can't believe that this university isn't trying to teach people to write broken code, at this point.
[07:29:34] <moon-child> heh!
[07:31:32] <mfiano> 200 pages in and it just keeps getting worse. They clearly didn't want to hire a copy editor.
[07:32:28] <mfiano> It's getting so bad that I can't translate their typos into what they meant. I should probably burn this book and move on.
[07:34:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[07:40:22] <mfiano> This language seems very difficult to code in without some pocket reference. The number of [meta/hyper] operators is crazy
[07:41:52] <moon-child> yeah, the operators and regex docs pages I look at rather frequently
[07:42:10] <mfiano> I can see why now!
[07:42:16] <moon-child> (https://docs.raku.org/language/operators etc., in case you missed it)
[07:42:47] <mfiano> moon-child: I didn't read the official language docs yet. I'm reading a book that was recommended to me just to get a quick overview first.
[07:43:10] * moon-child nods
[07:43:12] <mfiano> I should have probably started there in retrospect though
[07:43:24] <mfiano> moon-child: What do you use Raku for?
[07:43:39] <moon-child> mostly scripts
[07:43:44] <moon-child> and compiler test-runners
[07:44:18] <mfiano> Do you have any public examples of small script programs I can take a look at?
[07:46:29] <moon-child> hmm, this is not very idiomatic and I would probably write it differently today, but https://github.com/moon-chilled/Uploader/blob/master/upload.p6
[07:48:13] <mfiano> Cool, thanks
[07:48:43] <mfiano> I am using vim for raku. Needed an excuse to get away from Emacs.
[07:49:08] <mfiano> Currently trying to figure out how I can easily convert say <= or 1/2 to the unicode equivalents
[07:50:03] <hayley> <Compose> 1 2
[07:50:37] <mfiano> Well I'd like to be able to just type 1/2 and have it converted for me. I could add a bunch of abbrevs, but that isn't practical
[07:51:02] <moon-child> I think there's a plugin for it somewhere
[07:51:05] <moon-child> but yeah compose ftw
[07:51:38] <mfiano> But yeah compose is probably better for things like superscript exponentiation :)
[07:51:44] <moon-child> mfiano: https://github.com/Raku/vim-raku#unicode-ops
[07:52:34] <mfiano> I doubt that would work very well
[07:52:47] <mfiano> Not all unicode characters are "words"
[07:53:11] <mfiano> superscripts don't have preceding whitespace for example
[07:53:24] <mfiano> also not even sure yow you'd abbrev that anyway
[07:54:14] <hayley> "My computer factored <large number ending in 5> instantly" "Yes, it's divisible by 5."
[07:54:22] <moon-child> just tried it.  Typed '5**6 ' and it expanded to '5⁶ '
[07:55:38] <mfiano> moon-child: I see. However the abbrev list seems rather incomplete
[07:55:47] <mfiano> I don't see any fractions for example
[07:57:52] <mfiano> Also not sure how i feel about all `e` vars being euler constants
[07:58:44] <moon-child> hehe
[07:58:48] <moon-child> 𝑒 if you're feeling fancy
[07:59:05] <mfiano> iabbrev <buffer> e 𝑒
[07:59:07] <mfiano> cringe
[07:59:23] <moon-child> oh I see.  Plain e is the same constant in raku
[07:59:34] <mfiano> Ah
[08:00:48] <mfiano> Oh jeez...raku defined something incredibly useless
[08:02:19] <mfiano> ≠ is the same as !=, and !≠ is = lol
[08:03:23] <moon-child> that has surprisingly annoying consequences, by the way
[08:03:24] <gilberth> Is there also !≤ ?
[08:03:32] <mfiano> moon-child: oh?
[08:05:17] <mfiano> gilberth: yes
[08:06:08] <moon-child> there are 'junctions', which bypass normal dispatch by default.  I can say something like: 5|8 < 6 (which is shorthand for: any(5,8) < 6), and get back a result of any(True, False)
[08:06:35] <mfiano> Yes I know about any/all/one junctions
[08:06:46] <mfiano> But not seeing the annoyance yet
[08:06:57] <moon-child> unary ? is coerce to boolean, which does not bypass dispatch for junctions.  So ?any(True, False) --> True.  ! is coerce to boolean and invert, so !any(True, False) --> False
[08:07:15] <moon-child> 5|8 !< 6 turns into !(5|8 < 6), so it flattens immediately
[08:07:32] <moon-child> instead of giving any(5!<6, 8!<6)
[08:08:03] <mfiano> hmm
[08:11:16] <mfiano> This book is horrible. They explain =:= in terms of := without explaining :=
[08:11:27] <mfiano> So now I am confused about reference binding
[08:13:14] <moon-child> I do not fully understand it either.  There is something to do with 'containers' and 'boxes', which is the semantic distinction between $-sigilled and unsigilled variables
[08:14:40] <mfiano> my $a = 'foo'; my $b := $a; $b = 'bar'; say $a; # prints 'bar'
[08:16:02] <mfiano> seems like it is implemented as a pointer to a pointer or something
[08:19:36] <moon-child> would only need a single level of pointer for that.  (Unless you count the string itself as a pointer; but you could as easily make it a fixnum)
[08:20:02] <moon-child> (or the local variable as a pointer; but you could as easily store it in a register)
[08:20:23] <mfiano> ah
[08:20:36] <mfiano> I think they messed up =~=
[08:21:19] <moon-child> should be relative instead of absolute?
[08:21:21] <moon-child> (or hybrid?)
[08:21:41] <mfiano> THe latter. When dealing with floating point numbers, it is a mistake to always compare against an absolute tolerance.
[08:22:27] <moon-child> agreed.  J uses relative tolerance by default, which I have been meaning to complain about
[08:22:38] <mfiano> This would need to be a function though. can't be a binary op
[08:22:50] <moon-child> why?
[08:23:36] <mfiano> (~= x y abs rel)
[08:23:55] <moon-child> there is currently $*TOLERANCE
[08:24:14] <moon-child> why not simply separate into $*ABSOLUTE-TOLERANCE $*RELATIVE-TOLERANCE?
[08:24:30] <mfiano> Oh yes I see. I question the performance of a dynamic special variable over a register here
[08:27:15] <moon-child> accessing specials is pretty fast (or at least it should be; idk how it's implemented).  I would expect dispatch overhead to be higher in most cases
[08:28:34] <moon-child> and if your constraints are such that you decide ahead-of-time the dynamic type of some value, then performing the operation in-line (or making your own routine to do it) is not much more effort
[08:28:58] <mfiano> Not sure. I didn't get to $* in my reading yet. Was just assuming they are dynamically looked up in a runtime stack
[08:29:00] <moon-child> weighed against the enhanced semantic richness of making the tolerance special, I think they made the right choice here
[08:29:32] <mfiano> But I agree
[08:29:50] <mfiano> I tend to like that they are special and it makes the syntax nice and concise as a binop
[08:30:19] <mfiano> or it, not they. I would have to implement a proper =~= myself
[08:30:36] <moon-child> mfiano: (let ((*x* y)) ...) can be implemented as (let ((old-x *x*)) (unwind-protect (progn (setf *x* y) ...) (setf *x* old-x))).  Modulo tls, but that is fairly cheap as well
[08:30:40] <mfiano> I would almost consider it a bug though worth reporting
[08:31:44] <mfiano> What is ~= btw? I am assuming that means something else hence =~=
[08:32:05] <moon-child> ~ is string concatenation.  OP= is modified assignment
[08:32:24] <mfiano> oof yeah ok
[08:35:20] <mfiano> wait what...
[08:35:24] <mfiano> https://docs.raku.org/language/operators#infix_=~=
[08:39:23] <mfiano> Seems it does abs and rel with 1 var. I will have to work this out to see what that means
[08:39:47] <mfiano> also not sure what it means by not being arithmetically symmetrical
[08:39:59] <moon-child> it does abs if either operand is 0, otherwise rel
[08:40:52] <moon-child> which is dumb because it keeps the quirk of rel that numbers with opposite signs are never equal
[08:41:37] <mfiano> hmm
[08:41:49] <moon-child> mfiano: imagine a number line.  Given a point on that number line, highlight the region of numbers which are relatively equal to the number at the given point.  That region will not be centred around the point
[08:42:02] <moon-child> that's what 'asymmetric' means
[08:42:24] <mfiano> oh sure
[08:42:52] <moon-child> and in complex plain the shape is weird https://code.jsoftware.com/mediawiki/images/b/b8/Circle2.GIF
[08:43:16] <moon-child> *plane
[08:43:31] <mfiano> Well raku wasn't designed by/for numerical analysts
[08:43:36] <mfiano> like say julia
[08:44:08] <mfiano> i will just have to implement my own approximate equality (i use this a lot in float codes)
[08:44:20] <mfiano> can you overload _operators_?
[08:44:40] <moon-child> if you're doing numerical analysis, I think you want intervals or balls, not floats :P
[08:44:59] <moon-child> yes, you can overload operators.  Also shadow builtin ones if you want to use the same names.  Also modify the grammar arbitrarily but that's more complicated
[08:45:12] <moon-child> sub infix:<whatever>(parameters) { body }
[08:46:05] <mfiano> That is very cool.
[08:46:30] <mfiano> I liked the postfix example someone gave on the lisp reddit
[08:46:56] <mfiano> > sub postfix:<º>($self) { $self / 180 * π }; say sin 45º
[08:46:58] <mfiano> 0.7071067811865475
[08:47:10] <mfiano> that kind of expressiveness is very nice
[08:47:22] <moon-child> indeed
[08:47:38] <moon-child> sort of like read-macros, but it composes better
[08:47:40] <moon-child> imo
[08:47:45] <mfiano> Yeah
[08:48:58] <moon-child> (though the premature-optimizer in me wants to complain that divs are slow and that should be $self * (1 / 180 * π))
[08:49:51] <mfiano> Yep. I saw that too :)
[08:51:37] <mfiano> hmmm
[08:51:46] <moon-child> gah, / /.  I'm used to apl j
[08:52:00] <moon-child> *to apl and its right-associativity
[08:52:05] <mfiano> https://i.lisp.cl/dKkhPb.png
[08:52:18] <mfiano> did unicode get mangled somewhere in my copy/paste or what?
[08:52:40] <moon-child> repl sucks.  A number of things don't work in it, including operator overloading
[08:52:47] <mfiano> ah
[08:53:12] <mfiano> oh wait
[08:53:16] <mfiano> it works outside of rlwrap
[08:53:38] <moon-child> there's an in-progress rewrite of the parsing/semantic analysis bits, which will lead to sensible macros and a better repl.  Probably a year or so out though
[08:56:26] <mfiano> looks like repl is pretty primitive without rlwrap. no history etc
[08:56:38] <mfiano> but rlwrap definitely seems to be breaking unicode
[08:57:34] <moon-child> have you installed zef (package manager)?
[08:57:42] <moon-child> zef install readline and the repl should pick it up automatically
[08:58:27] <mfiano> ah let me install zef...i forgot :)
[09:03:32] <mfiano> i don't have zef in my path, and it only installed files into /usr/share....
[09:03:41] <mfiano> i see no binary
[09:05:28] <moon-child> ~/.raku/bin?
[09:05:53] <mfiano> no such directory
[09:06:54] <moon-child> no idea then
[09:07:26] <moon-child> complain in #raku, zef's dev seems to be there
[09:07:28] <mfiano> https://gist.github.com/mfiano/51196f74e5b1a104da6b91df4ad582e0
[09:07:32] <mfiano> build script for Arch
[09:08:07] <moon-child> oh, then I would guess the binary is actually in /usr/share/perl6
[09:08:58] <mfiano> ah /usr/share/perl6/vendor/bin/zef
[09:09:00] <mfiano> weird
[09:18:13] <mfiano> I wonder what the proper way to set up my PATH would be..do i need to add more than vendor/bin?
[09:18:32] <mfiano> i mean for anything else raku related
[09:27:01] <mfiano> moon-child: The issue is with the repl itself, not rlwrap or readline
[09:27:22] <mfiano> https://i.lisp.cl/C3fful.png
[09:27:30] <mfiano> works one 1 line, but not 2
[09:27:33] <mfiano> any thoughts?
[09:37:52] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:38:19] <dave0> maw
[09:47:36] *** Joins: makomo_ (~makomo@user/makomo)
[10:04:12] <moon-child> mfiano: yep, again, repl sucks
[10:10:03] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 250 seconds)
[10:12:31] <mfiano> hmm what is the difference between cont and elem?
[10:12:51] <moon-child> x (elem) y ←→ y (cont) x
[10:13:18] <mfiano> oh i see
[10:13:58] <mfiano> THis language seems really cool so far.
[10:14:24] <mfiano> The only thing I am scared of is learning regex, since I absolutely suck with them in other langs
[10:17:14] <mfiano> a "role" is just an abstract type?
[10:17:19] <mfiano> s/type/class/
[10:18:13] <moon-child> apparently classes are 'inherited from', whereas roles are 'mixed in'.  I don't know what exactly the difference is; would ask somebody who knows what they're doing :)
[10:18:55] <mfiano> ah.
[10:19:06] <moon-child> but yeah that's the way I use them
[10:19:13] <mfiano> i think one of my favorite features is the adverbial syntax so far
[10:19:27] <moon-child> this 'is x' stuff?
[10:19:50] <mfiano> :foo(bar) in different contexts
[10:20:34] <moon-child> ah, yeah
[10:21:51] <mfiano> like it isn't implemented yet, but for =~= they intend for you to be able to use it there instead of making a new block for the dynavar. something like $a =~= $b :tolerance(0.01)
[10:23:07] <moon-child> you can do that currently, albeit with not as nice syntax
[10:23:26] <mfiano> i tried it and the docs say it isn't implemented yet
[10:23:39] <moon-child> you can refer to the function underlying an op with e.g. &infix:<=~=>.  And then call it, passing the argument: &infix:<=~=>($x, $x, :tolerance(0.01))
[10:24:00] <mfiano> raku
[10:24:03] <mfiano> oops wrong window
[10:24:55] <moon-child> also &[=~=] as shorthand cuz 'infix' is long
[10:26:09] <mfiano> Why can't you call this without the parens?
[10:27:18] <moon-child> the syntactiic rule matching 'foo bar' and 'foo bar, baz' only matches the case when 'foo' is an identifier, afaik
[10:27:31] <mfiano> I seem to remember functions or methods or something can be called without the explicit arglist parens
[10:28:07] <moon-child> so, functions can be called using 'f x, y, z'
[10:28:21] <moon-child> methods can be called using 'a.b: c, d, e'
[10:28:39] <moon-child> (though you can use parens in either case)
[10:28:41] <moon-child> but if you wanna apply a function object you have to use parens
[10:28:45] <mfiano> ah so everything except functionized operators?
[10:29:15] <moon-child> no
[10:29:58] <mfiano> what rule prevents this: &[=~=] 42.0, 42.1, :tolerance(0.1)
[10:29:58] <moon-child> given 'sub f { ... }', you can refer to f using '&f'.  (This is a bit like #'f in cl.)  If you want to call such a function object, you have to use parens.  &f(1, 2)
[10:30:36] <mfiano> ah
[10:30:42] <moon-child> there's a rule 'f x, y' --> '&f(x, y)'
[10:32:50] <mfiano> guess if you want that for some reason you're stuck with { my $*TOLERANCE = 0.1; [=~=] 42.0, 42.1 }
[10:32:57] <mfiano> until the adverb is supported
[10:33:27] <moon-child> no; right now you can say  '&[=~=](42.0, 42.1, :tolerance(0.1))'
[10:34:21] <mfiano> Ah right, I mean if you want 42.0 =~= 42.1
[10:34:40] <moon-child> yeah
[10:36:22] <mfiano> I look forward to that adverb. That was one of my complaints about Nim and Crystal...if you wanted to overload a binary operator and change the arity you had to call it like a function, of course
[10:40:33] <mfiano> following your discussion and i'm baffled at the response
[10:42:04] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:43:03] <moon-child> there are a number of very strange inconsistencies in the language.  For instance, calling an operator with zero arguments conventionally returns its identity element.  But != returns True, even though its identity element is False
[10:43:24] <mfiano> that is weird
[10:44:06] <mfiano> `[-] 42` not being -42 is so strange
[10:45:13] <moon-child> and, I think it was a mistake to include methods when there are proper multi subs.  The former have some strange pitfalls (https://redd.it/pz3y0z)
[10:46:08] <mfiano> That's too advanced for me to follow yet
[10:46:15] <mfiano> I am still on basic types and operators
[10:46:30] <mfiano> Havent got to OOP or anything yet
[10:46:32] <moon-child> heh, fair enough :)
[10:46:57] <mfiano> But i dont think that guy is answering your question
[10:47:10] <mfiano> That or I still dont understand why it's not -5
[10:47:21] <mfiano> and that makes me very scared to continue :)
[10:49:13] *** Joins: makomo (~makomo@user/makomo)
[10:53:38] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[11:53:52] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[11:54:06] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:54:47] *** Quits: selwyn (~selwyn@user/selwyn) (Client Quit)
[11:55:32] *** Server sets mode: +nrt 
[11:57:00] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[11:57:26] *** Joins: selwyn (~selwyn@user/selwyn)
[11:59:01] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[12:01:06] *** Quits: Posterdati (~posterdat@host-95-233-158-46.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[12:01:54] *** Joins: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it)
[12:21:02] *** Joins: derelict (derelict@user/derelict)
[12:21:11] *** Joins: copec (~copec@schrodbox.unaen.org)
[12:21:17] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[12:22:41] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 246 seconds)
[12:28:28] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:30:35] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 265 seconds)
[12:32:21] *** Joins: selwyn (~selwyn@user/selwyn)
[12:56:20] *** Joins: cranium (~cranium@user/cranium)
[13:13:41] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[13:16:04] *** Quits: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:17:54] *** Joins: notzmv (~zmv@user/notzmv)
[13:29:16] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Bridge terminating on SIGTERM)
[13:29:21] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[13:35:12] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:35:12] *** Joins: sp (~sp@user/susam)
[13:35:12] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[13:35:12] *** Joins: hayley (~theemacss@user/hayley)
[13:55:50] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:57:20] *** Joins: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de)
[13:57:20] *** ChanServ sets mode: +o gilberth
[13:57:40] <gilberth> Good morning #lispcafe!
[13:57:53] <selwyn> hi gilberth
[13:58:28] *** Joins: makomo_ (~makomo@user/makomo)
[14:00:40] <gilberth> This is curious, I just recognized while staring at the label saying "Smaragd 192.168.1.24" on my Mac mini I have here, that even after a complete reinstall and despite the LAN here governed by DHCP, the machine grabbed the very same IP address. This somehow survived the reinstall.
[14:01:36] <selwyn> it was meant to be
[14:01:42] <selwyn> that's your fated ip address
[14:04:18] <gilberth> Because of the 23 of Hans Hübner fame? I actually misstyped, it's 192.168.1._23_. Hmm.
[14:09:42] <gilberth> Anyhow I was just surprised. At the haunted house and at my little company we label machines with their IP address and go by static IP addresses within the LAN.
[14:09:51] <gilberth> Old school.
[14:10:59] *** Quits: ratzkewa1zke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (Ping timeout: 250 seconds)
[14:11:10] <selwyn> why is 23 a special number
[14:18:15] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[14:19:03] <gilberth> https://en.wikipedia.org/wiki/23_(film)
[14:20:03] <gilberth> It's about a group of hackers who sold "pirated" software to the KGB. Hans was one of them.
[14:20:54] <gilberth> Taking place in Berlin for the most part.
[14:24:09] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[14:25:41] <gilberth> When I tell the CADR to find the "SYS" pathname host at my little server, I somehow cannot specify local pathnames anymore; I digged the sources of the pathname stuff, but that is a maze of twisty pathes, all different.
[14:29:22] <gilberth> And *DEFAULT-PATHNAME-DEFAULTS* is an alist of hosts and what would be the current working directory on that host. Makes sense actually, but doesn't help me.
[14:31:20] <hayley> https://www.youtube.com/watch?v=4VvwWMjblgc
[14:33:41] *** Joins: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de)
[14:33:41] *** ChanServ sets mode: +o ixelp
[14:37:03] <ixelp> Nobody missed me :-( Please remind my master to make me ping myself every now and then to make me reconnect when needed. Thanks!
[14:37:21] *** Joins: selwyn (~selwyn@user/selwyn)
[14:37:31] *** Quits: selwyn (~selwyn@user/selwyn) (Client Quit)
[14:41:25] <mfiano> ixelp: Remind your master, whoever that is, to ping you.
[14:42:20] <mfiano> Oh gilberth 
[14:42:56] <mfiano> Heh, I didn't notice because I had notices from ixelp ignored. Pretty annoying :)
[14:44:50] *** Joins: selwyn (~selwyn@user/selwyn)
[14:46:41] *** Quits: selwyn (~selwyn@user/selwyn) (Client Quit)
[14:50:41] *** Joins: treflip (~user@95.79.32.99)
[14:52:01] <hayley> Got 25/25 on the first programming assignment this semester. This group rocks. 
[14:54:09] <hayley> What's funny is that they just didn't drop marks, because they realised that some of the stuff (e.g. smoothing the terrain somewhat then pathfinding it) was just too damn complex. 
[14:55:30] <ck_> the terrain, yeah, sure
[14:56:07] <hayley> Context: we do procedural generation of villages in Minecraft. All totally random and done (nearly) wherever you want.
[14:56:29] <dave0> nite all
[14:57:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:00:23] <gilberth> mfiano: It's helpful to see if our lady just uses the jukebox or posts an actual video with some content of interest. ;)
[15:01:22] <mfiano> to be fair i ignore hayley's yt messages too, since 90% of the are unlicensed and taken down in my country
[15:14:38] <mfiano> Very interesting: my @a = 0,1,*+*...*;@a[42]
[15:24:38] <SAL9000> gilberth: reinstall normally doesn't change your network cards' MAC address, which is what the DHCP lease is (usually) tied to.
[15:26:52] *** Joins: selwyn (~selwyn@user/selwyn)
[15:40:29] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:42:55] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[15:47:43] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[15:48:07] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:54:07] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[15:55:40] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[16:09:46] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[16:10:11] *** Joins: selwyn (~selwyn@user/selwyn)
[16:18:51] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 245 seconds)
[16:19:20] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[16:29:52] *** Joins: selwynning (~selwyn@user/selwyn)
[16:30:49] <hayley> https://www.youtube.com/watch?v=qzSVokSfg30
[16:30:50] -ixelp- Drafted Again - YouTube
[16:33:56] *** Quits: selwynning (~selwyn@user/selwyn) (Client Quit)
[16:34:06] *** Joins: selwynning (~selwyn@user/selwyn)
[16:35:32] *** Quits: selwynning (~selwyn@user/selwyn) (Client Quit)
[16:35:42] *** Joins: selwynning (~selwyn@user/selwyn)
[16:35:49] *** Quits: selwynning (~selwyn@user/selwyn) (Client Quit)
[16:35:59] *** Joins: selwynning (~selwyn@user/selwyn)
[16:39:08] *** Quits: selwynning (~selwyn@user/selwyn) (Client Quit)
[16:39:18] *** Joins: selwynning (~selwyn@user/selwyn)
[16:46:05] *** Quits: selwynning (~selwyn@user/selwyn) (Quit: WeeChat 3.3)
[16:46:15] *** Joins: selwynning (~selwyn@user/selwyn)
[16:54:26] <mfiano> Mondenkind: Stupid question: Is the reduction meta-operator supposed to behave like cl:reduce or cl:apply?
[16:55:54] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[16:57:04] *** Quits: selwynning (~selwyn@user/selwyn) (Quit: WeeChat 3.3)
[16:57:15] *** Joins: selwynning (~selwyn@user/selwyn)
[16:59:37] <mfiano> Mondenkind: Ah it is reduce. This explains my confusion. with -42
[17:04:30] <mfiano> Interesting. TIL there is roughly a 50/50 split between programming languages regarding exponentiation operator associativity
[17:10:21] <mfiano> Looks like that's another strike for C++ (it does the opposite of what mathematicians would expect)
[17:10:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:11:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:11:57] <Alfr> Wait, what? Why would anyone introduce a left associative ^, as (a^b)^c = a^(ac)?
[17:12:21] <Alfr> s/a^(ac)/a^(bc)/
[17:13:15] <mfiano> i haven't actually confirmed this table but https://codeplea.com/exponentiation-associativity-options
[17:14:13] <Alfr> Wow! I guess the best entry is for hand-held calculators. :D
[17:14:19] <mfiano> haha
[17:14:54] <mfiano> I guess Lisp is exempt from this
[17:15:23] <mfiano> (reduce #'expt '(2 3 4) :from-end *whatever*) :)
[17:16:32] <Alfr> So it varies too, depending on the value of *whatever* ... \o/
[17:17:58] <mfiano> I am very surprised Matlab and Octave are left
[17:18:08] <mfiano> That doesn't sound right, but I'm too lazy to check :)
[17:18:34] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:21:10] <Alfr> mfiano, interesting. Anyways, thanks for the link. :)
[17:22:35] <mfiano> Alfr: Oh...see the note at the end of the first table
[17:23:06] <mfiano> In C++, ^ is XOR, but a lot of people apparently overload it and get left-to-right]
[17:24:33] <mfiano> https://rosettacode.org/wiki/Category:C%2B%2B
[17:24:39] <mfiano> err
[17:24:49] <mfiano> https://rosettacode.org/wiki/Exponentiation_operator#C.2B.2B
[17:24:51] -ixelp- Exponentiation operator - Rosetta Code
[17:24:59] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[17:27:10] *** Quits: selwynning (~selwyn@user/selwyn) (Quit: WeeChat 3.3)
[17:27:19] *** Joins: selwyn (~selwyn@user/selwyn)
[17:56:25] *** Joins: makomo_ (~makomo@user/makomo)
[17:57:17] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[18:01:56] <copec> Your university class group sounds like a good time hayley
[18:20:02] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[18:48:34] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:01:13] *** Joins: makomo_ (~makomo@user/makomo)
[19:04:31] *** Joins: makomo (~makomo@user/makomo)
[19:25:40] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[19:28:30] *** iAmDecim is now known as v3ga
[20:40:15] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[20:47:16] *** Joins: rogersm (~rogersm@90.166.177.48)
[21:18:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:34:52] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[23:12:35] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
