[00:00:32] <Red> tru
[00:00:53] <Twix> i want my "modern" types. Also bool, uintptr_t. I want for loops.
[00:01:00] <Twix> So i really dislike C89
[00:01:24] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[00:01:28] <Red> bool is useless
[00:01:39] <twkm> ewww.
[00:01:41] <Twix> you could use a int, of course
[00:01:45] <Red> ^
[00:01:52] <floatcomplex> i never use bool, but i dislike c89 just the same
[00:02:00] <Twix> buts its a nice hint, in case you mean a bool there
[00:02:13] <floatcomplex> i used to be a c89 enthusiast like you
[00:02:25] <twkm> _Bool can be surprising, to some.
[00:02:30] <Twix> if something only can be 1 or 0
[00:02:37] <Twix> ...
[00:02:45] <floatcomplex> [0, BOOL_MAX]
[00:02:47] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[00:02:57] <floatcomplex> ,cc return BOOL_MAX
[00:02:59] <candide> floatcomplex: error: 'BOOL_MAX' undeclared
[00:03:05] <floatcomplex> ,cc -std=c2x return BOOL_MAX
[00:03:07] <candide> floatcomplex:  Exit 1
[00:03:11] <Twix> :D
[00:03:20] <Red> what the hell
[00:03:41] <Twix> yeah, on my platform, BOOL_MAX is 2
[00:03:54] <floatcomplex> ðŸ˜±
[00:04:01] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[00:04:39] <bruda> K&R 2nd edition is C89 right? or is it?
[00:05:07] <floatcomplex> it's c89
[00:05:13] <floatcomplex> it has no idea about const iirc
[00:05:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:05:51] <bruda> "Great book" everyone says. "I dislike C89" says floatcomplex :P
[00:05:54] <Red> yeah K&R second edition is C89
[00:06:03] <floatcomplex> bruda: i didn't say it wasn't a great book
[00:06:16] <bruda> I know. Just thought it was funny.
[00:06:20] <Red> it's a pretty good book if you ask me
[00:06:36] <Twix> it might be a good book, but things evolved and you can do things even better today
[00:06:44] <bruda> Yea so far it's awesome. I might even have to start over and take a new approach to the chapter 1 exercises.
[00:06:54] <Red> .... if only there were more hard copies, my pocket one's in pieces
[00:07:00] <bruda> Maybe after I get farther in to the book...
[00:07:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:07:16] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:992d:a11c:78b:b202)
[00:08:15] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:08:34] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 265 seconds)
[00:09:31] <pragma-> Twix: what plaform?
[00:10:44] <Twix> none ...
[00:11:38] *** Joins: sheldon (~sheldon@user/sheldon)
[00:12:01] <pragma-> oh you were joking?
[00:13:36] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[00:16:00] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[00:17:27] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:17:42] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[00:19:55] *** Joins: sheldon (~sheldon@user/sheldon)
[00:20:04] <twkm> floatcomplex: c89 most certainly has const.
[00:22:13] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 250 seconds)
[00:22:51] *** Quits: FrostKiwi (~FrostKiwi@user/frostkiwi) (Quit: Leaving)
[00:23:19] *** Joins: random-nick (~random-ni@87.116.165.220)
[00:24:23] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[00:26:13] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[00:26:20] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[00:26:35] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[00:26:51] <floatcomplex> twkm: yes, it has const, but idiomatic c89 code (or c99 and later with -Wdeclaration-after-statement) cannot be const-correct in all cases
[00:27:03] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:28:31] <floatcomplex> you have to choose whether declarations after statements or unnecessarily mutable variables are more offensive to your sensitibilities
[00:28:55] <floatcomplex> sensibilities too
[00:29:18] *** Joins: Guest50 (~Guest50@85.174.198.135)
[00:31:34] *** Quits: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com) (Quit: leaving)
[00:31:45] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[00:32:34] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:34:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 265 seconds)
[00:35:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[00:36:09] *** Falconer_ is now known as Falconer
[00:37:33] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[00:38:38] *** Quits: Guest50 (~Guest50@85.174.198.135) (Quit: Client closed)
[00:40:25] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[00:40:51] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[00:42:12] *** Quits: shivesh (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[00:42:56] *** Joins: shivesh (~shivesh@user/shivesh)
[00:44:20] *** Joins: macaw (~macaw@77-255-134-52.adsl.inetia.pl)
[00:48:18] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[00:49:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[00:50:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:51:41] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[00:52:02] *** Joins: tejr (~tejr@user/tejr)
[00:53:22] *** Joins: crankslider (~slidercra@user/slidercrank)
[00:54:19] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[00:54:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[00:57:04] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:57:56] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[00:58:25] <caze> Twix: _Bool has wrap around behavior that no other unsgined integer type has.
[00:59:17] <Twix> ,cc -std=c2x return true--
[00:59:19] <candide> Twix: error: lvalue required as decrement operand
[00:59:23] <Twix> hmm
[00:59:25] <Twix> right
[00:59:44] <Twix> ,cc -std=c2x _Bool a = true; return a--
[00:59:46] <candide> Twix:  Exit 1  no output: a = false
[00:59:50] <Twix> ,cc -std=c2x _Bool a = true; return a++
[00:59:52] <candide> Twix:  Exit 1  no output: a = true
[01:00:03] <Twix> o_O
[01:00:23] <Twix> ,cc -std=c2x _Bool a = false; return a--
[01:00:25] <candide> Twix: no output: a = true
[01:00:32] <Twix> Ã–_o
[01:00:37] <caze> ,cc _Bool b = 0; for (int i = 0; i < 10; i++) { printf("%d ", b++); }
[01:00:39] <candide> caze: [warning: increment of a boolean expression [-Wbool-operation]] 0 1 1 1 1 1 1 1 1 1
[01:00:46] <caze> ,cc _Bool b = 0; for (int i = 0; i < 10; i++) { printf("%d ", b--); }
[01:00:48] <candide> caze: [warning: decrement of a boolean expression [-Wbool-operation]] 0 1 0 1 0 1 0 1 0 1
[01:01:19] <Twix> so -- is a toggle and ++ just set to true
[01:01:21] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:01:33] <veltas> Yes but please don't
[01:01:38] <Twix> :D
[01:01:50] <caze> Twix: Sort of but not really.
[01:02:21] <Twix> I'll use it everywhere now!
[01:02:31] *** Quits: mahmutov (~mahmutov@37.155.60.179) (Ping timeout: 250 seconds)
[01:02:39] <floatcomplex> ,cc -std=c2x assert(true == BOOL_MAX);
[01:02:41] <candide> floatcomplex: no output: __PRETTY_FUNCTION__ = {<optimized out>, <optimized out>, <optimized out>, <optimized out>, <optimized out>}
[01:02:42] <Twix> right into my library of weird and unreadable code
[01:03:57] <floatcomplex> ,cc -std=c2x assert(USHRT_MAX * BOOL_MAX == USHRT_MAX);
[01:03:59] <candide> floatcomplex: Same output.
[01:05:41] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[01:06:35] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[01:07:52] *** Quits: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa) (Remote host closed the connection)
[01:09:16] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:10:24] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[01:10:25] *** Joins: sheldon (~sheldon@user/sheldon)
[01:12:40] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[01:12:51] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[01:13:02] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[01:14:09] <bruda> Just for the record, I'm glad I'm not the only one who prefers the opening curly braces on the same line as the start of functions/loops/etc.
[01:14:42] <floatcomplex> ,recall -t 'slides down'
[01:14:42] <candide> No message in #c containing "slides down".
[01:14:56] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[01:15:23] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 264 seconds)
[01:17:58] <caze> Twix: It has to do with promotions and stuff.
[01:19:50] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:20:02] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[01:20:38] <zwr> oh no that _Bool trick 
[01:21:08] <johnjay> this tutorial video on youtube said int is 4 bytes and long is 8 bytes
[01:21:25] <floatcomplex> could be!
[01:21:26] <johnjay> but when I print sizeof(long) on this pc it says 4. the video was wrong
[01:21:27] <caze> johnjay: URL?
[01:21:39] <floatcomplex> johnjay: long is at least 4 bytes
[01:21:42] <johnjay> it's on my phone. but because i'm nice i will find it
[01:21:47] <floatcomplex> assuming a byte is 8 bits
[01:21:49] <caze> It's possible for long to be 1 byte.
[01:22:10] <johnjay> this is 2nd result for "C# tutorial"
[01:22:10] <floatcomplex> long byte is long
[01:22:11] <johnjay> https://www.youtube.com/watch?v=gfkTfcpWqAY
[01:22:12] <candide> Title of johnjay's link: C# Tutorial For Beginners - Learn C# Basics in 1 Hour - YouTube
[01:22:18] <LangerJan> in int64_t we trust
[01:22:19] <zwr> that's C# not C
[01:22:27] <johnjay> well you asked for it
[01:22:31] *** Joins: linguist (~autistic@user/linguist)
[01:22:39] <johnjay> or rather caze did
[01:22:52] <floatcomplex> johnjay: c# isn't beholden to any of c
[01:23:06] <floatcomplex> beharken
[01:23:08] <johnjay> then why was he talking about short int and long and its relation to Integer in C#?
[01:23:45] <caze> johnjay: What does he say about their relationships to Integer in C?
[01:24:09] <johnjay> ah ok. so in c# i think long is simply defined to be 8 bytes
[01:24:15] <johnjay> ok. i thought he meant from C
[01:24:22] <johnjay> cause the video started out comparing C# and C
[01:25:02] <floatcomplex> doesn't c# run in its own weird vm like java does
[01:25:07] <johnjay> yes
[01:25:09] <floatcomplex> it can define whatever it wants
[01:25:29] <caze> see pound
[01:25:38] <floatcomplex> with no relation to the size of c types compiled for the same host platform
[01:25:41] <johnjay> does it not do interops of some kind? apparently you package them in dll files
[01:26:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Remote host closed the connection)
[01:26:14] <johnjay> i think they call this "FFI"
[01:26:48] <johnjay> by the way if i scroll further down a video comes up saying not to watch coding tutorials
[01:27:20] <floatcomplex> youtube is a weird scene
[01:27:36] <johnjay> apparently so
[01:28:50] *** topside_ is now known as topside
[01:30:44] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[01:30:59] *** Joins: Burgundy (~yomon@86.127.194.72)
[01:32:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112)
[01:33:47] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:34:09] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[01:34:32] *** Joins: cousteau_ (~cousteau@user/cousteau)
[01:34:45] *** Quits: linguist (~autistic@user/linguist) (Quit: Leaving)
[01:34:55] *** Joins: violet (~vi@user/violet)
[01:35:01] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[01:35:36] *** cousteau_ is now known as cousteau
[01:36:10] *** Joins: sheldon (~sheldon@user/sheldon)
[01:39:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[01:40:26] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[01:41:01] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:41:33] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[01:41:42] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[01:44:24] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[01:45:00] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:46:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Ping timeout: 265 seconds)
[01:49:22] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:50:04] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[01:53:24] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:57:15] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:57:37] *** Joins: kurahaupo (~kurahaupo@pa49-180-51-62.pa.nsw.optusnet.com.au)
[01:57:48] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[01:58:55] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[01:59:17] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[02:00:43] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[02:00:55] *** Joins: luizfrds (~Luiz@152.250.243.147)
[02:01:59] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:04:28] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[02:06:03] *** Quits: brad_mssw|mbp (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:07:57] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 250 seconds)
[02:08:41] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[02:11:34] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:13:51] *** Joins: noord (~noord@user/noord)
[02:15:34] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 256 seconds)
[02:15:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:15:57] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[02:16:37] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[02:18:06] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[02:19:53] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 264 seconds)
[02:20:09] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[02:22:22] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:22:27] *** Joins: vysn (~vysn@user/vysn)
[02:24:52] *** Joins: msk (~msk@185.124.240.174)
[02:25:04] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[02:25:26] *** Joins: sheldon (~sheldon@user/sheldon)
[02:26:37] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:26:54] *** Quits: kurahaupo (~kurahaupo@pa49-180-51-62.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[02:27:17] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[02:29:37] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[02:31:38] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[02:32:41] *** Joins: SystemError (~SystemErr@user/systemerror)
[02:33:06] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[02:33:22] *** Quits: System_Error (~SystemErr@user/systemerror) (Killed (NickServ (GHOST command used by SystemError)))
[02:33:57] *** Joins: pizdets (~pizdets@183.182.115.203)
[02:34:21] *** SystemError is now known as System_Error
[02:34:24] *** Quits: pizdets_ (~pizdets@183.182.111.21) (Ping timeout: 268 seconds)
[02:35:19] *** Joins: Fairy97 (~Fairy@ti0004a400-3806.bb.online.no)
[02:36:01] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Excess Flood)
[02:36:26] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[02:38:29] *** Quits: Fairy (~Fairy@2001:464a:4992:0:151c:2e2b:3b8e:26b) (Ping timeout: 250 seconds)
[02:38:35] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[02:39:15] *** Quits: GlobalBanksta (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[02:44:02] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[02:44:28] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 256 seconds)
[02:47:49] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[02:47:58] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[02:48:03] *** topside_ is now known as topside
[02:48:15] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[02:51:36] <mort> say I have something like this: 'void *foo = malloc(sizeof(size_t) + sizeof(enum whatever)); enum whatever *x = (enum whatever *)((size_t *)foo + 1); *x = 5;`
[02:51:42] <mort> don't ask why
[02:51:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:51:53] <mort> is there necessarily any UB going on here?
[02:52:47] <mort> if the enum has to be aligned at a boundary that's greater than the size of a size_t, it would be an unaligned access obviously, which is UB
[02:52:54] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 265 seconds)
[02:53:15] <cousteau> mort: yeah, possible alignment issues
[02:53:22] <mort> but on platforms where an enum have to be aligned at 32- or 64-bit boundaries, and size_t is 32- or 64-bit and sizeof(size_t) >= _Alignof(enum whatever), are there any issues?
[02:54:01] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:19] <cousteau> ...wouldn't it be easier to just create a struct?
[02:55:06] <mort> possibly, I don't know the context, I'm not the one who wrote this code, I'm just curious about it from a language lawyer perspective atm
[02:55:11] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 250 seconds)
[02:55:15] <cousteau> struct size_and_enum { size_t s; enum whatever e; } *foo = malloc(sizeof *foo);  enum whatever *x = &foo->e;
[02:55:18] *** mjh4386_ is now known as mjh4386
[02:55:37] <cousteau> it looks unnecessarily susceptible to UB
[02:55:54] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:56:02] <cousteau> I'm also concerned about type aliasing, which I've never really understood
[02:56:02] *** Quits: AmR (~AmREiSa@41.36.24.35) (Quit: Konversation terminated!)
[02:56:04] <mort> I agree, it's just a curiosity for me
[02:56:29] <mort> I don't *think* it should run foul of any aliasing rules, but I also don't understand them completely
[02:56:57] <cousteau> assuming there's no UB caused by misalignment, I don't think there would be UB at all, but I'm not sure if there's some hidden clause somewhere
[02:57:01] <mort> my understanding is that pointers returned by malloc are essentially magic and that parts of the memory you get from malloc only gain an effective type when you write to them
[02:57:02] *** Joins: sheldon (~sheldon@user/sheldon)
[02:57:44] <cousteau> I think that's correct
[02:58:10] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[02:58:13] *** Quits: bruda (~bruda@172.58.62.226) (Ping timeout: 250 seconds)
[02:59:43] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[03:01:15] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[03:05:58] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[03:06:26] *** Quits: zalt_ (~zalt@user/zalt) (Ping timeout: 265 seconds)
[03:06:59] *** Quits: alch (~alch@mi-18-29-143.service.infuturo.it) (Ping timeout: 264 seconds)
[03:08:48] *** Joins: alch (~alch@to-18-92-40.service.infuturo.it)
[03:09:38] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:10:47] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 265 seconds)
[03:10:59] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:13:23] *** Joins: rgrinberg (~textual@201.192.183.100)
[03:14:32] *** Joins: kish` (~sid742412@user/aqua)
[03:16:41] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[03:17:18] *** Joins: vicfred (~vicfred@user/vicfred)
[03:19:00] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[03:19:00] *** Joins: lesihctej (jetchisel@user/jetchisel)
[03:19:27] *** Joins: bruda (~bruda@172.58.62.226)
[03:20:39] *** Joins: harbabum (~test@93.56.45.82)
[03:21:20] <harbabum> hi
[03:22:03] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[03:23:14] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[03:23:49] <bruda> Wouldn't that be a modern 'hello world'? Just "hi". Simple and to the point.
[03:25:28] <harbabum> why is no one talking on a channel about the most important programming language in the world?
[03:26:02] <bruda> Because they probably working on code in said language :P
[03:26:35] <bruda> According to Tiobe Python is #1. C is now #2 for the moment :)
[03:26:47] <twkm> plus it's irc.
[03:27:07] <g0z> php will always be #1
[03:27:40] <floatcomplex> ,recall me -t uncomfortable -b1 -a2
[03:27:41] <candide> [18d18h ago] <fâ€‹loatcomplex> i'm writing c right now [18d18h ago] <fâ€‹loatcomplex> does that make you uncomfortable [18d18h ago] <katnis> c [18d18h ago] <Fâ€‹euermagier> fâ€‹loatcomplex, oh, definitely
[03:28:11] <bruda> php almost dropped out of the top 15 now.
[03:29:23] <g0z> based on one metric anyway.
[03:30:02] <bruda> Yea. Though I've seen a few different 'metrics' and Tiobe seems to have a pretty good system to gauge languages with.
[03:30:15] *** Quits: malloy (~jimery@116.30.220.108) (Read error: Connection reset by peer)
[03:30:36] *** Quits: superdupond (~Kev@2a01cb0400149f003cb560b0419e9063.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[03:31:20] *** Quits: harbabum (~test@93.56.45.82) (Read error: Connection reset by peer)
[03:32:48] <bruda> With Tiobe, C's lowest position since 2001 is #2.
[03:33:30] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:33:55] <apotheon> interesting
[03:34:01] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:34:22] <apotheon> . . . but Tiobe's metrics are only conditionally useful.
[03:35:06] <apotheon> Some people try to use it as support for a claim that a particular language is *better* than another, or that some language isn't worth learning, and that's usually unrelated to the Tiobe rankings in reality.
[03:35:17] <apotheon> s/unrelated/effetively unrelated/
[03:36:07] *** Joins: malloy (~jimery@116.30.222.115)
[03:36:10] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:38:05] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[03:38:52] *** Quits: bruda (~bruda@172.58.62.226) (Ping timeout: 256 seconds)
[03:39:49] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[03:40:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:40:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:40:20] *** Joins: wroathe (~wroathe@user/wroathe)
[03:41:05] * neshpion programs in hutu
[03:43:26] *** Joins: bruda (~bruda@172.58.62.226)
[03:43:58] <bruda> Blah, this hotspot is barely better than dialup right now. Even then it cuts out sometimes. 
[03:44:14] *** Joins: bruda_ (~bruda@172.58.62.226)
[03:44:33] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:44:59] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:45:40] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: Night everyone!)
[03:45:49] *** Joins: Enitin (~Enitin@82.102.22.86)
[03:46:37] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:51:10] *** Quits: The_Jag (~The_Jag@host-87-9-29-108.retail.telecomitalia.it) (Quit: The_Jag)
[03:52:35] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[03:54:46] <floatcomplex> malloc isn't magical at runtime
[03:55:07] <floatcomplex> the semantics of functions known to the compiler to be malloc-like can seem magical, at compile time
[03:55:52] *** Joins: rgrinberg (~textual@201.192.183.100)
[03:58:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:58:54] *** Quits: defjam (~eb0t@90.209.246.132) (Ping timeout: 260 seconds)
[04:00:35] *** Joins: defjam (~eb0t@90.197.82.19)
[04:00:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:01:19] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:01:40] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[04:02:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:29] *** Joins: EdFletcher (~PKD@user/edfletcher)
[04:06:38] *** Joins: ferdna (~ferdna@user/ferdna)
[04:08:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[04:08:51] *** Quits: defjam (~eb0t@90.197.82.19) (Ping timeout: 250 seconds)
[04:10:39] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[04:10:53] *** Joins: defjam (~eb0t@90.203.122.187)
[04:10:53] *** Joins: tejr (~tejr@user/tejr)
[04:11:53] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[04:12:19] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:14:11] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[04:14:17] *** Joins: Wulf (~Wulf@user/wulf)
[04:17:13] <fizzie> On the malloc thing, using FAMs pretty much looks exactly like that (except for the fact that alignment issues are solved by the FAM declaration rather than an implementation-specific assumption), and presumably those are legal, so that should be as well.
[04:20:51] <fizzie> As in, if you can have a `struct s { size_t size; enum whatever enums[]; }` and then do `struct s *p = malloc(sizeof *p + sizeof (enum whatever)); p->enums[0] = 5;`, *and* you are comfortable with assuming `sizeof (struct s) == sizeof (size_t)` on your implementation, then I don't see how that could be any different from your example.
[04:21:46] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:21:57] *** Quits: loganlee (~Thunderbi@user/loganlee) (Client Quit)
[04:23:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[04:24:42] *** Joins: sheldon (~sheldon@user/sheldon)
[04:24:56] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:29:10] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:30:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:30:32] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Client Quit)
[04:30:55] <smallville7123> if i do this, does currentStack still point to the top of my stack?
[04:31:04] <smallville7123> RLGL.State.currentStack = &RLGL.State.stackTransform;
[04:31:11] <smallville7123> rl_Matrix_push(&RLGL.State.stackTransform, rlMatrixIdentity());
[04:31:19] <smallville7123> in a linked list
[04:31:34] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[04:31:59] <smallville7123> void rl_Matrix_push(struct rl_MatrixStackNode** root, Matrix data) {    struct rl_MatrixStackNode* stackNode = rl_Matrix_newNode(data);    stackNode->next = *root;    *root = stackNode; }
[04:32:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[04:32:42] <smallville7123> or do i need to explicitly do    RLGL.State.currentStack = &RLGL.State.stackTransform;   after pushing so that it still points to the top of the stack?
[04:33:54] *** Joins: sheldon (~sheldon@user/sheldon)
[04:34:42] <smallville7123> eg after a push i want currentStack to point to the newly pushed node
[04:36:30] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 268 seconds)
[04:37:22] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:37:27] *** Quits: inomoz (~inomoz@176.59.125.26) (Ping timeout: 250 seconds)
[04:39:11] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[04:39:31] <smallville7123> also is the same true for     rl_Matrix_push(RLGL.State.currentStack, currentMatrix()[0]);    ?
[04:40:29] <smallville7123> this is a bit confusing :(
[04:45:42] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[04:45:57] *** Joins: Colt (~Colt@user/colt)
[04:46:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[04:54:07] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[04:54:13] *** Quits: defjam (~eb0t@90.203.122.187) (Ping timeout: 265 seconds)
[04:54:56] *** Joins: frost (~frost@user/frost)
[04:56:11] *** Joins: defjam (~eb0t@90.194.39.133)
[04:56:58] *** Joins: dutch (~DutchIngr@user/dutch)
[04:59:47] *** Joins: constxd (~brad@142.134.38.68)
[05:01:34] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[05:02:38] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:02:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:02:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:02:41] *** Joins: wroathe (~wroathe@user/wroathe)
[05:03:23] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[05:03:51] *** Joins: sheldon (~sheldon@user/sheldon)
[05:06:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[05:07:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[05:09:32] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[05:16:16] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:16:18] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[05:16:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:18:15] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:19:13] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[05:25:28] *** Joins: rgrinberg (~textual@201.192.183.100)
[05:26:20] *** Joins: quartz (~quartz@user/quartz)
[05:26:47] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[05:28:55] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[05:30:39] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[05:31:12] *** Joins: System_Error (~SystemErr@user/systemerror)
[05:31:30] *** Joins: VincentValentine (~VincentVa@PPPoE-78-29-68-241.san.ru)
[05:33:42] *** Joins: sheldon (~sheldon@user/sheldon)
[05:33:51] *** Quits: defjam (~eb0t@90.194.39.133) (Ping timeout: 265 seconds)
[05:33:51] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 265 seconds)
[05:35:29] *** Joins: defjam (~eb0t@90.197.82.195)
[05:37:44] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[05:37:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[05:38:12] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[05:38:13] *** Joins: novns (~novns@user/novns)
[05:38:54] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[05:39:06] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[05:40:12] *** Joins: System_Error (~SystemErr@user/systemerror)
[05:41:35] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[05:42:58] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[05:44:45] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:46:35] *** Joins: rgrinberg (~textual@201.192.183.100)
[05:49:57] *** Joins: Mi2305 (~maikel@127.red-79-156-22.staticip.rima-tde.net)
[05:50:20] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[05:50:36] *** Joins: geli (~gelignite@55d4e1d7.access.ecotel.net)
[05:51:25] <SrPx> What is the best way to inspect and read the assembly output of clang, for optimizing purposes?
[05:51:30] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[05:52:21] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[05:53:38] <floatcomplex> godbolt
[05:53:40] *** Quits: magla (~gelignite@55d4d6da.access.ecotel.net) (Ping timeout: 265 seconds)
[05:53:47] *** Quits: ColdKeybo[a]rd (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[05:53:52] <floatcomplex> s/best/fastest/
[05:54:22] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[05:57:20] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[05:57:38] *** Joins: Matt|home (~matt@adsl-74-233-58-226.mia.bellsouth.net)
[06:01:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[06:01:58] <bruda> who was it that showed me this arbitrary lines code last night? https://ideone.com/T6jvsG
[06:04:10] <floatcomplex> hmm?
[06:04:33] <bruda> It was related to kr exercise 1-16 I think?
[06:04:34] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[06:04:35] <floatcomplex> it doesn't recursively call main() so it can't have been caze
[06:05:08] <fizzie> Sorry, but it was.
[06:05:48] <bruda> Well I stared at that code and played with it. I think I shrunk it down and came up with my own clever solution. 
[06:06:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[06:06:47] <bruda> What do you guys think of this? https://ideone.com/S7P6Tq
[06:07:15] <bruda> So far it handles everything I throw at it.
[06:07:36] <fizzie> It prints short lines when given the input at https://ideone.com/6wdTvR
[06:07:47] *** Joins: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net)
[06:07:58] <bruda> Well I just threw simple lines in that part. But I tested longer lines in my environment.
[06:08:38] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com)
[06:08:40] <bruda> Note it's only a 5 char buffer. So it already demonstrates its ability to continue beyond that size of input.
[06:08:44] <fizzie> No, I mean, the thing I linked should only print the two longer lines (1234567 and "something..."), but it also prints two of the three "1234" lines.
[06:08:49] <fizzie> (Which isn't right.)
[06:09:11] <bruda> hmm? Weird. Let me test further.
[06:09:47] <bruda> its working in my environment. Prints out the lines I type. Nothing more nothing less.
[06:09:57] <fizzie> Did you try the same input? 
[06:10:27] <bruda> I tried various input. Testing different lengths and partial buffers.
[06:10:41] <fizzie> Well, it prints out "1234" locally for me as well, which isn't right.
[06:10:52] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:11:08] <bruda> I type 1234 and hit enter. It prints 1234. 
[06:11:13] <fizzie> Yes, that's not right.
[06:11:49] <fizzie> The whole point of the program is to print only lines longer than 5 characters. Or was it longer than or equal to 5? Anyway, definitely not lines shorter than 5.
[06:11:51] <bruda> I guess I fail to see the problem. It prints the input out regardless of length. Arbitrary line lengths.
[06:11:59] <fizzie> That's not what the exercise is all about.
[06:12:20] <fizzie> If you want to "print the input out regardless of length", all you need is a getchar-putchar loop with *no* logic.
[06:12:27] <bruda> Ohh. Well I'm doing this aside from that exercise. Not trying to limit the line. Just experimenting with a way to print arbitrary length lines.
[06:12:44] <tusko> many cs students believe electrical engineers are generally poor programmers
[06:12:55] <bruda> I guess I wasn't very clear on what I was doing. My bad.
[06:13:19] <fizzie> Well, fair enough, but if you want to condense *that* program down, it just reduces to `while ((c = getchar()) != EOF) putchar(c);` which isn't particularly interesting.
[06:13:54] <bruda> Hmm true.
[06:14:15] <bruda> Was a fun experiment anyways lol
[06:15:07] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Quit: WeeChat 3.3)
[06:15:09] <bruda> Figured I'd play with code and have fun. 
[06:18:13] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[06:20:07] <bruda> Have a long ways to go before I can say I'm any good at this stuff. But at least I'm having fun.
[06:21:00] *** Joins: sheldon (~sheldon@user/sheldon)
[06:21:16] *** Quits: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net) (Quit: Client closed)
[06:22:05] *** Joins: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net)
[06:23:30] <bruda> Tomorrow the hotspot goes back so I won't be in here to pester ya guys lol
[06:25:01] *** Quits: geli (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[06:25:34] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[06:25:59] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[06:28:43] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[06:29:06] *** Joins: sheldon (~sheldon@user/sheldon)
[06:33:47] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[06:34:32] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:38:10] *** Joins: Khoyo (~khoyo@user/khoyo)
[06:38:33] *** Quits: Khoyo (~khoyo@user/khoyo) (Remote host closed the connection)
[06:39:19] *** Joins: Khoyo (~khoyo@user/khoyo)
[06:42:12] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[06:43:02] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[06:43:19] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:49:09] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:50:28] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) ()
[06:51:12] <quartz> Can anyone explain the char *p line of code here? https://i.ibb.co/9w4JPkW/image.png
[06:51:46] <quartz> If x is an int of uint16_t, than how can you do char *p = (char *) &x
[06:52:06] <dave0> i like how it's a picture of text and not text itself
[06:52:11] <floatcomplex> quartz: iirc the c standard makes a specific exception to the usual aliasing rules for accessing the bytes of anything else using char *
[06:52:12] <bparker> and also how it's homework
[06:53:15] <quartz> floatcomplex: p is accessing the bytes of x?
[06:53:27] <floatcomplex> indeed
[06:53:31] <dave0> quartz: yes
[06:53:33] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:37] <floatcomplex> well it allows them to be accessed via it
[06:54:00] <floatcomplex> i'd still use a union instead of that even if that's legal
[06:54:09] <floatcomplex> because i can't be bothered to remember whether it is or not
[06:54:11] <bparker> that's not related to the question though
[06:54:14] <dave0> quartz: if you think of the uint16_t as an object, c lets you treat any object as an array of char... it's a special rule only for char*
[06:54:38] <caze> Some of those casts are redundant.
[06:55:10] *** Joins: missogra (~missogra@dynamic-077-003-061-083.77.3.pool.telefonica.de)
[06:55:23] <bparker> caze: wouldn't it depend on the compiler
[06:55:44] <caze> bparker: No.
[06:55:45] <quartz> dave0: What do you mean by "treat any object as an array of char"
[06:56:27] <bparker> I like how there's no return statement
[06:56:57] <quartz> Can you guys get the answer? I have it, but I don't want to look
[06:57:05] <bparker> also why not just run the code on both endian-nesses and see what it does for yourself
[06:57:08] <quartz> Honestly I think these silly questions are stupid
[06:57:15] <caze> bparker: Specifically, printf("%d %d\n", (int) p[0], (int) p[1]);
[06:57:19] <bparker> quartz: we don't solve homework questions
[06:57:43] <dave0> quartz: i don't know the technical words, but when you create a variable the compiler sets aside some memory for it... uint16_t x; reserves 2 bytes of memory (assuming bytes are 8 bits.. a uint16_t needs 16 bits... so 2 bytes)
[06:57:58] <caze> dave0: Just quote the standard.
[06:58:06] <quartz> It's a sample test, not homework
[06:58:18] <caze> quartz: What is your answer?
[06:58:20] <quartz> But I'm more into learning this stuff for myself than getting a stupid answer
[06:58:24] <dave0> caze: i don't know the standard! where's fizzie?
[06:58:34] <caze> dave0: It's about time that you learn it.
[06:58:39] <bparker> lol
[06:58:46] <bparker> most helpful answer
[06:59:09] <quartz> caze: I'm not sure about the third printf
[06:59:37] <quartz> It shifts the bytes by i, than does & 1. But I'm not sure what that will return
[06:59:41] <caze> quartz: What are you not sure about?
[07:00:17] <dave0> quartz: if you just want the answer, it's A and C
[07:00:56] <quartz> I have the answers I just don't wanna look haha
[07:01:17] <quartz> I thought the second one WAS endianness independent
[07:01:26] <caze> quartz: The thing to understand is that bitops work on *values*, not representation.
[07:01:28] <quartz> Ohh no nevermind
[07:02:13] <bparker> those bit shifts do not produce different results on big/little
[07:03:12] <quartz> Endian is just a way to store bytes of data in memory, one is reverse, the other is "normal"
[07:03:21] <floatcomplex> lol
[07:03:42] <caze> quartz: Almost.
[07:03:47] <quartz> :P
[07:03:49] <bparker> why are you telling us if you said you don't know what it does
[07:04:15] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[07:04:15] <dave0> quartz: when the compiler sets aside some memory, the c rules let you examine that memory as though it was an array of char... this is a c peculiarity i dont think it's common in programming languages
[07:04:20] *** Quits: alch (~alch@to-18-92-40.service.infuturo.it) (Read error: Connection reset by peer)
[07:04:47] <quartz> bparker: Because I can't understand why the third output is endianess independet
[07:04:49] <floatcomplex> dave0: except they added it to js just within the last few years
[07:05:18] <dave0> oh i didn't think it was common.. it's very low level
[07:05:21] <caze> quartz: What makes you believe that it should be dependent on endianess?
[07:05:33] <floatcomplex> because it turns out to be really hard to write performant code without it, for some reason people want to wrote performant code in js
[07:06:12] <bparker> quartz: 03:31 < caze> quartz: The thing to understand is that bitops work on *values*, not representation.
[07:06:21] <caze> dave0: Find it yet?
[07:06:40] <bparker> https://stackoverflow.com/questions/7184789/does-bit-shift-depend-on-endianness
[07:06:40] <quartz> bparker: OK
[07:06:48] <fizzie> dave0: C11 6.3.2.3p7: "When a pointer to an object is converted to a pointer to a character type, the result points to the lowest addressed byte of the object. Successive increments of the result, up to the size of the object, yield pointers to the remaining bytes of the object."
[07:07:01] <caze> wtf fizzie
[07:07:02] <dave0> thanks fizzie !
[07:07:09] <caze> He's supposed to look for ithimself.
[07:07:46] <dave0> fizzie is more reliable
[07:07:47] <fizzie> Look, my name was mentioned, I'm going to reply without looking at the rest of the context.
[07:07:51] <caze> It's about time he started familiarizing himself with what is where in the standard.
[07:08:17] <bparker> second time you mentioned that
[07:08:17] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[07:08:38] <fizzie> Well, while you're at it, take a look at 6.2.6.1p4 and 6.5p7, they're also quite relevant for that piece of code.
[07:09:02] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[07:09:03] <bparker> they know there's a standard, they also know google exists... do you really think telling them to look at it will do anyone any good?
[07:09:06] *** Joins: alch (~alch@151.82.15.109)
[07:09:13] <caze> dave0: This is how it's organized, under Language, Conversions, Pointers.
[07:10:28] *** Joins: doofenshmirtz (~farawayas@103.160.128.32)
[07:11:01] *** Joins: vysn (~vysn@user/vysn)
[07:12:10] <quartz> dave0: Congrats you're correct on the answer.
[07:12:36] <dave0> thank the c standard
[07:13:11] <quartz> I'm assuming that the second printf IS endian dependent because it references the BITS of x, which are stored differently in memory from big to little endian
[07:14:02] *** Quits: pucara (~i@181.95.204.204) (Quit: Lost terminal)
[07:14:37] *** Parts: bruda_ (~bruda@172.58.62.226) ()
[07:14:59] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:b8be:8397:ccc3:6dc)
[07:18:28] *** Joins: sheldon (~sheldon@user/sheldon)
[07:19:13] <bparker> quartz: bits or bytes?
[07:19:51] <quartz> bparker: bytes
[07:20:42] <bparker> right
[07:21:50] <bparker> I think aliasing to different size types in general is endian sensitive
[07:22:59] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[07:24:05] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:25:20] <quartz> This entire class could just be "memorize the C standard"
[07:25:59] <floatcomplex> no because your professor
[07:27:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[07:29:02] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:29:45] <bparker> quartz: yea which IMO screeching to learn it is just plain rude and unhelpful
[07:30:11] <bparker> but this is IRC, everyone has egos the size of planets
[07:30:30] <quartz> bparker: What do you mean "screeching to learn it"
[07:30:50] <bparker> quartz: the person in here earlier that kept repeating 'you should memorize the C standard' and 'learn how to read it' etc.
[07:30:50] <floatcomplex> quartz isn't doing anything wrong
[07:30:57] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:c658:30eb:dfd1:12ad)
[07:31:02] <dave0> i should learn the technical words :-/
[07:31:04] <bparker> it was just in very poor taste IMO
[07:31:14] *** Joins: missogra_ (~missogra@dynamic-077-010-115-150.77.10.pool.telefonica.de)
[07:31:21] <bparker> floatcomplex: indeed
[07:31:30] <dave0> sometimes it helps to be precise
[07:31:30] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[07:31:33] <bparker> I wasn't saying anything bad to them, on purpose at least
[07:31:55] <bparker> I was referring to someone else
[07:32:34] <caze> bparker: That was directed at one specific individual. You haven't been in the channel long enough to know the history and understand why I said what I did.
[07:32:40] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Quit: Leaving)
[07:32:59] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5) (Quit: Leaving)
[07:33:21] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[07:34:44] <quartz> Do ya'll want to explain to me another one? https://i.ibb.co/8MPFvX9/image.png  How can they do int c = *(char *)&a;
[07:34:50] <quartz> if c is not char *
[07:35:04] <quartz> I think the answer is just b
[07:35:10] *** Quits: missogra (~missogra@dynamic-077-003-061-083.77.3.pool.telefonica.de) (Ping timeout: 265 seconds)
[07:35:23] <dave0> oh more quizzes
[07:35:33] <caze> quartz: Promotion
[07:35:51] <caze> quartz: You missed a *.
[07:35:54] <quartz> But how can you do int d = *(char *)&b
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:09] <quartz> if d is not char *
[07:36:27] <caze> quartz: *(char*) do you know what this does?
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:14] <quartz> caze: Uhm
[07:37:19] <quartz> Sorry no. 
[07:37:32] *** Quits: missogra_ (~missogra@dynamic-077-010-115-150.77.10.pool.telefonica.de) (Quit: Leaving)
[07:37:35] <caze> quartz: Your question is as if they had written: int d = (char *) &b;
[07:37:35] <quartz> I thouhght the * before (char *) "cancels out" the &
[07:37:57] <bparker> what
[07:38:09] <caze> quartz: There is something in between them thogh.
[07:38:29] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[07:38:30] <quartz> I don't know what that * is for
[07:38:38] <caze> It is the dereference operator.
[07:38:43] <quartz> omg
[07:38:44] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:39:00] <quartz> Yeah so I was right. *&b just equals b
[07:39:03] <dave0> a moment of clarity?
[07:39:12] <caze> > quartz: There is something in between them thogh.
[07:39:24] <quartz> (char *)
[07:39:32] <quartz> dave0: yeah
[07:40:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:40:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:40:09] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:02] <bparker> why can't you just run the code and observe the output
[07:41:25] <caze> Can't compile a .png
[07:41:30] <quartz> exactly
[07:41:37] <bparker> type it in...
[07:41:40] <bparker> to a text editor
[07:41:50] <quartz> It's meant to be a paper test, so no computer should be used or needed
[07:42:02] <bparker> ...
[07:42:05] <caze> quartz: Okay, what does (char *) do?
[07:42:14] <floatcomplex> your professor is an idiot
[07:42:15] <bparker> quartz: but you're using a computer to ask us
[07:42:17] <bparker> what's the difference
[07:42:36] <floatcomplex> paper is not an appropriate format for this material
[07:42:39] <quartz> bparker: Yes, but I wanted to understand it without compiling the code. 
[07:42:47] <quartz> caze: Casts something to char *
[07:42:55] <quartz> floatcomplex: Why not?
[07:43:02] <bparker> so you want to inconvenience others when running the code would tell you what it does just the same? /s
[07:43:19] <caze> quartz: So what do you have after that operator is applied?
[07:43:23] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[07:44:07] <quartz> caze: Just b
[07:44:13] <quartz> *b
[07:44:28] <caze> quartz: No you do not. You have a char pointer.
[07:44:50] <caze> quartz: What do you get when you apply the next operator, *, to the char pointer?
[07:44:51] <tusko> Is there a standard practice in c for what to do with the *
[07:45:05] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 250 seconds)
[07:45:15] <tusko> int* char, int * char, int *char, does it matter?
[07:45:18] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[07:45:30] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[07:45:33] <bparker> no
[07:45:59] <bparker> there might be standard placements depending on the followed standard, but it makes no effective difference
[07:46:01] <caze> The only way to maintain consistency with more complicated types is to put it as the type.
[07:46:19] <caze> I mean identifier.
[07:46:41] <quartz> caze: the * operator is meant to dereference the char pointer
[07:46:45] <tusko> like `uint8_t const *buffer`?
[07:46:52] <quartz> so the answer is actually a and d
[07:46:58] <bparker> wut
[07:47:03] <quartz> Because somehow, int a = 100; is endianness independent
[07:47:04] <tusko> no u
[07:47:16] <bparker> 'somehow'
[07:47:23] <bparker> remember that line about values
[07:47:28] <bparker> instead of representations
[07:47:33] <bparker> printing a value gives a value
[07:47:38] <dave0> maybe i could look up in the standard what it says about where you can put whitespace
[07:47:43] <bparker> you're not printing individual bytes of memory
[07:47:46] <bparker> with the first one
[07:48:42] *** Quits: rgrinberg (~textual@201.192.183.100) (Ping timeout: 265 seconds)
[07:48:58] <bparker> also why do you think #2 won't be the same?
[07:49:15] <bparker> yet you do for #4
[07:49:47] <quartz> Hmmm
[07:49:51] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[07:50:29] <quartz> htonl(a) just converts a to host to network byte order
[07:50:41] <quartz> So that can't be endian independent
[07:50:45] <bparker> wat
[07:50:48] <bparker> why not
[07:50:56] <bparker> if it ALWAYS converts to network byte order
[07:50:58] <bparker> from a VALUE
[07:50:58] <candide> bparker: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[07:51:03] <bparker> ...
[07:51:10] <bparker> I'm not abusing anything
[07:51:10] *** ChanServ sets mode: +o candide
[07:51:11] *** candide sets mode: +b *!~nobody@user/bparker
[07:51:20] <quartz> Oh no
[07:51:36] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 265 seconds)
[07:52:18] *** candide sets mode: -b *!~nobody@user/bparker
[07:53:15] *** Joins: mahmutov (~mahmutov@176.30.167.181)
[07:53:23] <quartz> Well, the answer says only A and D are the correct answers
[07:53:41] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:53:56] <quartz> But yeah that makes sense, B should be on there
[07:53:59] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[07:55:00] *** Quits: bruda (~bruda@172.58.62.226) (Quit: thanks guys. Always educational. See you around hopefully.)
[08:01:54] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[08:03:05] *** Quits: mahmutov (~mahmutov@176.30.167.181) (Ping timeout: 268 seconds)
[08:03:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[08:05:27] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[08:09:24] <bparker> quartz: no, it should not
[08:10:30] <quartz> bparker: Do you think these questions are ridiculous?
[08:10:39] <bparker> no
[08:10:46] <bparker> they test your understanding
[08:10:54] <quartz> True
[08:10:57] <bparker> on little endian you will get a huge number, on big-endian you would get 100
[08:11:01] <bparker> for the second one
[08:11:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:11:33] <quartz> What do you mean a huge number?
[08:11:49] <bparker> well you're reading bytes that it had to fill in
[08:11:52] <bparker> with FF's
[08:12:23] <bparker> 100 is smaller than an int
[08:12:33] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[08:13:01] *** Quits: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net) (Quit: Client closed)
[08:13:08] <bparker> so something has to go into the unused bytes of the int
[08:13:22] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:13:47] <quartz> Who said anything about "filling anything in"
[08:14:35] <bparker> well first of all, the fact that you stored the value 100 into an int means you didn't use all the available bytes, so something must go in that place
[08:14:57] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:14:57] *** Viewday112 is now known as Viewday11
[08:15:00] <quartz> ok...
[08:15:05] <bparker> then you swapped the bytes around with htonl, exposing those 'filled in' bytes when you print it
[08:15:56] <quartz> Uhh
[08:16:06] <quartz> I thought we were talking about binary here
[08:16:45] <bparker> if, in little endian, having the least-significant byte first... you store the value '100' (0x64) into an int... then in memory it looks like 00 00 00 64
[08:17:02] <bparker> when you call htonl on that value, it swaps the bytes, so now in memory it looks like 64 00 00 00
[08:17:04] *** Quits: Xgc (~Xgc@user/xgc) (Read error: Connection reset by peer)
[08:17:08] <bparker> which is 16 million something when you print it out
[08:17:16] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:17:28] <quartz> ahhh
[08:17:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:17:51] *** Quits: Budd (~Budd@2001:470:8d44:1::5) (Remote host closed the connection)
[08:17:58] <bparker> those zeroes could be FF or whatever it fills in with, maybe the standard says something about that
[08:18:07] <danielcamiel> dat's the other way around!
[08:18:12] <bparker> whatever
[08:18:19] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[08:18:55] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[08:19:10] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[08:20:06] *** Joins: Burgundy (~yomon@86.127.194.72)
[08:20:47] <quartz> bparker: So, wait, how is int a = 100; endian independent?
[08:21:17] <quartz> Dumb question I know
[08:21:38] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[08:21:39] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[08:21:45] <rcf> Because it doesn't involve the byte ordering at all. 
[08:21:49] <bparker> because 100 is a value
[08:21:58] <bparker> it gets stored in whatever way is appropriate, you don't care
[08:22:45] <bparker> but if instead you wrote 4 bytes into memory and then printed it out as a single value... the value you get would depend on the endian-ness
[08:22:58] <bparker> that's the aliasing discussed earlier
[08:23:05] <quartz> Right
[08:23:08] <quartz> Yeah I get itnow
[08:23:22] <quartz> Can I ask ya'll about one more?
[08:23:38] <quartz> I have the answer but I Need to know why
[08:23:49] <bparker> better to ask forgiveness than permission :p
[08:23:51] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[08:24:31] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 250 seconds)
[08:24:37] <quartz> https://i.ibb.co/HXBhR0Y/image.png
[08:24:42] <quartz> I suppose
[08:24:51] <quartz> This one has nothing to do with endianness
[08:26:18] <quartz> I'm not sure how to apporach this one
[08:26:27] <bparker> have you read the manpage for fread, it explains
[08:26:33] <quartz> YEs
[08:26:40] <quartz> It returns the number of elements successfully read
[08:26:44] <bparker> which part are you confused on?
[08:27:34] <quartz> Well, mainly the answers C and D
[08:27:39] <quartz> WHere a or b can be 20
[08:28:14] <rcf> Well, what is the maximum number of elements that could be read by either call? 
[08:28:21] <quartz> I'm not sure what I'm askin gsorry
[08:28:37] *** Joins: kdc (~kdc@196.211.197.159)
[08:28:39] <quartz> Max? 40
[08:29:17] <rcf> Only for the one that you told to read 40 elements. 
[08:29:45] <bparker> by 'elements' we mean the nmemb argument
[08:29:58] <bparker> their size is not relevant to this
[08:30:06] <bparker> the return value is how many nmemb were read
[08:30:46] <quartz> True
[08:30:53] <quartz> rcf: Yeah sorry I'm slow
[08:31:21] <bparker> for a, since nmemb is 40, possible values are anywhere from 0 to 40
[08:31:27] <bparker> for b, since nmemb is 1, possible values are anywhere from 0 to 1
[08:32:17] <quartz> OH yeah :(
[08:32:19] <quartz> Omg
[08:32:41] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 268 seconds)
[08:32:51] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[08:33:11] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 250 seconds)
[08:33:38] <quartz> Wow why didn't I see it that way
[08:33:47] *** Joins: m4v (~znc@ubuntu/member/m4v)
[08:33:55] <bparker> because the manpage is written by a programmer
[08:33:58] <bparker> :p
[08:34:22] <bparker> it's not always obvious to *lots* of people, not just you
[08:35:30] <quartz> Your approach was very good to getting the right answer
[08:35:38] <quartz> The approach is more important I feel
[08:35:56] <quartz> Listing the ranges of all potential elements that could be returned was a good approach
[08:36:50] <rcf> quartz: it is confusing because people tend to think of trying to read a certain number of bytes, especially if they've been exposed to POSIX read()
[08:37:35] <bparker> and some people want to read in terms of 'words' or buffer sizes or other things
[08:37:44] <rcf> So they'll choose either approach, use it correctly, and never really think about why, because the end result is the same. 
[08:38:54] <bparker> I also wonder if size > 1 has an effect on performance
[08:39:16] <bparker> or if that instead depends on other things like vbuf
[08:41:32] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[08:41:56] <rcf> It is situationally-dependent, of course. 
[08:42:43] <bparker> so it's libc-dependent ?
[08:42:47] <bparker> and there is no standard
[08:44:29] <rcf> Because there is no chance for a partial read barring EOF I don't think it would ever truly be a consideration. 
[08:46:02] <quartz> Well thanks for your help everyone. I think I need to sleep now 
[08:46:53] <rcf> In something like an event processing loop, for example, using fread() in general would potentially be much slower if you held up the loop by forcing it to block on a single source of input waiting on either the full expected input, EOF, or an error. 
[08:48:04] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[08:48:20] <rcf> Whereas the at times annoying partial read behavior of read() is fine if you just dump it into a buffer, note how much more data you need, and move onto the next event. 
[08:49:58] *** Quits: tinyweasel (~weasel@15.235.28.27) (Ping timeout: 256 seconds)
[08:50:34] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 268 seconds)
[08:51:17] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:e982:a62b:99c8:220c)
[08:57:02] *** Joins: phax (~phax@user/phax)
[08:57:40] *** Joins: loganlee (~Thunderbi@user/loganlee)
[08:59:11] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[09:00:43] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 265 seconds)
[09:01:06] <novns> do you think it would be worthy to format date & time string myself instead of using strftime()
[09:01:10] <novns> if the format is known and never will be changed
[09:01:18] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[09:01:49] <bparker> no
[09:02:16] <novns> bparker, reasons?
[09:02:17] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:03:05] *** Quits: phax (~phax@user/phax) (Ping timeout: 250 seconds)
[09:03:12] <bparker> rolling your own date/time parsing is always bound to fail in some way, IMO
[09:03:13] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[09:03:17] <dave0> novns: the only reason i can think of is if you are not using the standard time functions
[09:03:21] <novns> I have some high load here, and it would be nice to skip format parsing overhead
[09:03:29] <bparker> especially if you ever need to change the date/time after parsing it
[09:03:31] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[09:04:06] <novns> bparker, it's not about parsing, it's about formatting
[09:04:16] *** Joins: wootz (~wootz@193.160.245.86)
[09:04:38] <dave0> novns: instead of unix time as number of seconds since whenever, maybe if you were counting in days or months or some different thing to seconds since 1970
[09:04:59] <bparker> novns: is there a possibility that your end users will need a format that's different from yours?
[09:05:15] <bparker> like say, one that's dependent on their timezone, language, culture etc.
[09:05:48] <novns> bparker, very doubtful, because I am the single user of this code
[09:05:57] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[09:06:57] <bparker> I guess it depends on how accurate you want to be
[09:07:08] <bparker> there's all sorts of gotchas you probably aren't even aware of
[09:07:13] <novns> I have struct tm already, and I just want to skip slower strftime()
[09:07:26] <novns> will do some benchmarks
[09:07:45] <Maxdamantus> novns: date formatting is for people. If you're concerned about performance of formatting/parsing dates, why are you even doing it?
[09:08:00] <Maxdamantus> You can just send the number of seconds some other way
[09:08:07] <novns> Maxdamantus, because it's for logs with high load
[09:08:27] <novns> like zillion records per nanosecond
[09:08:29] <Maxdamantus> novns: right, so don't format the dates.
[09:08:39] <floatcomplex> rolling your own time parsing is a bad idea, but it can be done correctly in one line of code, and avoiding a shitty libc implementation that calls getenv() even when the time zone is utc can be a massive speedup
[09:08:40] <Maxdamantus> novns: plenty of tools don't do that, they just store the seconds.
[09:09:00] <novns> using timestamps is not nice too
[09:09:37] <Maxdamantus> novns: when someone wants to view the logs, the tooling should format the dates.
[09:09:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:10:01] <novns> that wasn't the question
[09:10:43] <Maxdamantus> There are other major advantages to not formatting the times immediately, namely localisation.
[09:10:51] <novns> the question is would it be faster enough to implement a custom formatting function with hardcoded format
[09:11:02] <novns> I will do some benchmarks
[09:11:35] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[09:12:27] <SrPx> How can I visualize and inspect the ASM output of clang -O2? Is there any good tool? I want to optimize my C program as much as possible, measure cache misses, etc.
[09:13:26] <bparker> either with a disassembler or have the compiler output the assembly itself
[09:13:36] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[09:13:58] <novns> SrPx, what about cachegrind, callgrind and friends
[09:14:10] <SrPx> thanks for the recommendation!
[09:14:12] <floatcomplex> SrPx: godbolt
[09:14:24] <SrPx> @bparker that is what I'm asking
[09:14:34] <floatcomplex> SrPx: and perf
[09:17:26] <SrPx> godbolt is amazing!
[09:17:37] <bparker> if only it had other arches
[09:17:43] <bparker> like powerpc
[09:17:48] <floatcomplex> it does
[09:18:21] <bparker> show me where it supports ppc
[09:18:56] <floatcomplex> bparker: https://godbolt.org/z/11q3Px7zP
[09:19:15] <bparker> must be new
[09:19:23] <floatcomplex> not really
[09:19:25] <rcf> It's supported it for a while now. 
[09:19:37] <floatcomplex> at least two years
[09:20:23] <caze> How do you get it to excecute?
[09:21:27] <bparker> you don't
[09:21:55] <rcf> Thankfully I have a proper powerpc system to discover just how little people care about big endian systems these days 
[09:23:01] <floatcomplex> caze: it will only execute x86_64 or i386 code
[09:23:02] <novns> rcf, the whole world is not perfect enough
[09:23:30] <rcf> Clearly they should cheat with qemu to run the other stuff 
[09:23:54] <floatcomplex> yeah but you can do that too without even realizing it
[09:24:44] <bparker> I don't really blame them rcf
[09:24:54] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[09:25:25] <bparker> even just casting int64 to int32 on big-endian requires pointer math
[09:25:34] <novns> btw intercal is a nice language, I wonder why nobody uses it
[09:25:39] <floatcomplex> the google term you're looking for is binfmt-misc
[09:25:53] <floatcomplex> if you install qemu-user on ubuntu i'm pretty sure it gets set up for you
[09:26:28] <floatcomplex> and then you can "run" pretty much any static binary as if it were a native one
[09:26:53] <bparker> assuming you have a complete toolchain for it
[09:27:03] <floatcomplex> no, merely assuming someone did
[09:27:13] <rcf> floatcomplex: oh I assure you I realize it, it's fun to mess around with, but poudriere on FreeBSD uses it to avoid the usual annoyances of a cross-compilation toolchain at the expense of any hope of decent performance. 
[09:28:11] <floatcomplex> rcf: the performance hit is about on par with rewriting it in python
[09:29:36] <rcf> Which is... pretty abysmal, when trying to build hundreds of packages at a time. 
[09:32:28] <floatcomplex> actually i take that back. speed-wise it is about as slow as python would be, but there's no 10-100x hit to the amount of ram required for no good reason
[09:38:08] <rcf> Having made the mistake of trying to debug an application which include python script support through valgrind, I'd say there are several hundred possible reasons at minimum. 
[09:39:12] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[09:39:29] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[09:42:57] *** Joins: sheldon (~sheldon@user/sheldon)
[09:46:29] <floatcomplex> python: "i accidentally 93 copies of your temporary array, and they won't be garbage collected for two years, ram is cheap though *checks notes* uwu"
[09:46:59] *** Joins: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net)
[09:47:17] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[09:48:01] *** Joins: kuku (~kuku@user/kuku)
[09:51:15] *** candide sets mode: -o candide
[09:54:17] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[09:58:53] <dave0> a 64 bit address space is so large, you only have to run the garbage collector once every 5 years :-)
[09:59:37] <floatcomplex> i can hear your hard drive from here
[10:00:21] <floatcomplex> it sounds like a zip drive had a tryst with a rattlesnake
[10:01:33] *** Joins: zalt_ (~zalt@user/zalt)
[10:01:49] <rcf> dave0: you joke, but there are certain people who genuinely believe that this is such a universal design principle that no operating system can truly manage memory without a large amount of swap space. 
[10:02:59] *** Quits: SB8364 (~SB8364@S01067483c2d6b92b.gv.shawcable.net) (Quit: Client closed)
[10:03:08] <floatcomplex> and then there are people who don't even think hard enough to have beliefs about it, and just allocate half of however much ram there is free for their java app when it starts up
[10:03:41] <rcf> Generally the same sorts who believe that proper memory accounting during allocation (i.e. not Linux) is impossible. 
[10:04:35] *** Quits: nyarmith (~reader@pool-72-95-220-156.pitbpa.fios.verizon.net) (Ping timeout: 264 seconds)
[10:08:34] *** Joins: Xgc (~Xgc@user/xgc)
[10:09:16] <sham1> Well that "allocate half of RAM for a java application" does make some sense for a server dedicated to running the thing
[10:09:29] <sham1> Or half the memory quota of the container
[10:09:45] <sham1> rcf: "malloc never fails!"
[10:09:52] <sham1> Except, you know, when it does
[10:11:57] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[10:13:57] *** Joins: Viewday112 (~Viewday@user/viewday)
[10:14:27] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[10:15:09] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 265 seconds)
[10:15:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:15:37] *** Viewday112 is now known as Viewday11
[10:16:07] *** Quits: defjam (~eb0t@90.197.82.195) (Ping timeout: 265 seconds)
[10:16:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[10:17:48] *** Joins: defjam (~eb0t@90.210.88.222)
[10:18:03] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[10:18:26] <dave0> rcf: i read a paper where the author was saying that the idea that address space is limited and the unix model of each process running in it's own virtual address space is obsolete with the modern 64 bit address space machines
[10:19:56] <dave0> that the unix process model comes from legacy notions of limited address spaces
[10:20:16] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[10:20:44] <dave0> that is no longer true
[10:21:18] <floatcomplex> plenty of important 32 bit linux systems out there for quite a while to come
[10:22:32] <dave0> yes but who has explored the current 64 bit systems
[10:22:33] *** Joins: crankslider (~slidercra@user/slidercrank)
[10:24:20] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 265 seconds)
[10:24:21] *** Quits: Xgc (~Xgc@user/xgc) (Quit: Leaving)
[10:25:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:28:44] *** Joins: AmR (~AmREiSa@41.36.24.35)
[10:31:52] <Maxdamantus>  
[10:32:02] <dave0> OMG vim keyboard bindings for web browser
[10:32:47] <apotheon> dave0: Is this new to you?
[10:33:19] <dave0> yep
[10:33:24] <apotheon> I'm sorry.
[10:33:42] <apotheon> You missed the halcyon days when vi-like keyboard bindings were able to be much more comprehensive and amazing.
[10:34:02] <apotheon> . . . before Firefox neutered its own extension system in a stupid attempt to be like Chrome.
[10:34:05] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[10:34:18] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:34:44] <apotheon> There's a WebKit browser called Vimb that is much better than Chrome and Firefox extensions these days for vi-like keybindings, though.
[10:34:56] <apotheon> (if you want to try that)
[10:35:46] <apotheon> If you don't have a window manager that allows you to create a tabbed set of windows, or some piece of software in addition that allows you to do that, you might not find Vimb to your taste, though.
[10:36:06] <apotheon> It does not have tabbing functionality built in.
[10:43:34] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:49:13] *** Joins: iddev5 (~iddev5@2409:4062:2e92:d627:655f:bbfd:44f9:2fdf)
[10:51:07] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:51:30] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[10:53:42] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[10:54:48] <rahl> I just wish `vimb` had granular control over JS, etc; something like uMatrix
[10:54:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:55:54] <sham1> Does it even block ads?
[10:57:55] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[10:58:20] <rahl> sham1: not itself, but it can use this: https://github.com/jun7/wyebadblock
[10:58:21] <candide> Title of rahl's link: GitHub - jun7/wyebadblock: An adblock extension for wyeb, also webkit2gtk browsers.
[10:58:45] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:58:49] *** Joins: abip20 (~abdullah@103.66.177.186)
[10:59:08] *** Joins: phineasflynn (~farawayas@103.160.128.32)
[11:00:47] <apotheon> Yeah, Vimb is extensible, but via different means than something like Chrome or Firefox.
[11:01:15] <apotheon> I wrote a couple download extensions for it, but never ended up using them, so they went away.
[11:01:49] *** Quits: doofenshmirtz (~farawayas@103.160.128.32) (Ping timeout: 250 seconds)
[11:05:18] *** Quits: alch (~alch@151.82.15.109) (Read error: Connection reset by peer)
[11:08:54] <rahl> I'm not sure where to even start with trying to do something like uMatrix does
[11:09:02] <NRK[m]> apotheon i used palemoon for a bit and tried one of the vi extensions
[11:09:19] <NRK[m]> it was a really seamless experience 
[11:09:27] *** Joins: alch (~alch@151.82.18.207)
[11:09:43] <NRK[m]> compared to vimium on chromium/modern-firefox
[11:10:13] <rahl> Other than vimb, I'm just finding all other browsers to be abusers of memory and cpu
[11:10:35] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:c658:30eb:dfd1:12ad) (Ping timeout: 264 seconds)
[11:15:14] *** Joins: sheldon (~sheldon@user/sheldon)
[11:15:24] <rahl> ok, _all_ other browsers was a bit of an over-generalization :)
[11:15:34] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:15:56] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:18:07] *** Quits: iddev5 (~iddev5@2409:4062:2e92:d627:655f:bbfd:44f9:2fdf) (Quit: iddev5)
[11:18:59] <apotheon> NRK[m]: Palemoon should work well with Vimperator or Pentadactyl, I guess.  It's basically "pre-lobotomy Firefox".
[11:19:19] <sham1> NRK[m]: of course Palemoon has its own issues that makes it somewhat annoying
[11:19:34] <sham1> Mostly related to the people at the top
[11:19:47] <apotheon> Palemoon is still a recent enough Firefox to have a bunch of other technical problems, anyway.
[11:20:00] <apotheon> It's just not the trashfire of an experience I get from new Firefox.
[11:20:11] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[11:23:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:25:14] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[11:28:39] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:29:13] <dacav> dave0: you could also try Qutebrowser, which is vim-like
[11:29:18] <dacav> I've used it for a while
[11:29:44] <dacav> Now I don't remember why I dropped itâ€¦ but I think I'll re-install it now and remember why
[11:30:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.70)
[11:31:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[11:33:05] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:33:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[11:35:11] *** Quits: rahl (~rahl@102.114.43.255) (Ping timeout: 250 seconds)
[11:35:26] *** Quits: defjam (~eb0t@90.210.88.222) (Ping timeout: 256 seconds)
[11:35:40] *** Joins: Guest91 (~Guest91@85.174.198.135)
[11:37:03] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:dc84:5802:f8de:ecee)
[11:37:06] *** Joins: defjam (~eb0t@90.210.94.131)
[11:37:11] *** Joins: rahl (~rahl@102.114.198.36)
[11:38:46] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[11:40:23] *** Quits: chasmo77 (~chas77@71.63.241.168) (Ping timeout: 250 seconds)
[11:41:41] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[11:43:12] *** Joins: chasmo77 (~chas77@71.63.241.168)
[11:43:26] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[11:45:31] *** Joins: aradesh (~aradesh@user/aradesh)
[11:45:42] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[11:46:04] <NRK[m]> i wouldn't recommend using palemoon tbh. it's insanely slow, and I heard that recently the palemoon devs started to hunt down on forks trying to abuse copyright/trademark laws or w/e
[11:46:25] <NRK[m]> dacav: sounds like a good reason to reinstall something haha
[11:47:03] *** Joins: Rounin (~david@84.212.130.215)
[11:47:19] *** Quits: defjam (~eb0t@90.210.94.131) (Ping timeout: 250 seconds)
[11:48:38] <dacav> IKR? :D
[11:48:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:49:24] *** Joins: defjam (~eb0t@90.197.82.230)
[11:49:40] <dacav> Ok, I've emerged it :D
[11:52:16] <dacav> (the amount of dependencies is stunning, stupid browsers)
[11:52:44] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:56:36] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:00:34] *** Joins: mrig (~AdiIRC@user/mrig)
[12:01:22] *** Joins: sheldon (~sheldon@user/sheldon)
[12:05:47] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[12:07:16] *** Joins: AsenMx (~AsenMx@user/asenmx)
[12:08:43] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[12:08:54] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:11:35] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 250 seconds)
[12:11:36] *** Joins: useretail (~useretail@185.132.19.151)
[12:13:20] *** Joins: Viewday117 (~Viewday@user/viewday)
[12:14:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:14:59] *** Viewday117 is now known as Viewday11
[12:18:48] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[12:18:56] <De4nWhit3> Hi everyone.
[12:21:23] *** Quits: zalt_ (~zalt@user/zalt) (Ping timeout: 264 seconds)
[12:28:03] *** Joins: pulse (~pulse@user/pulse)
[12:29:52] *** Joins: Klinda (~superleag@user/klinda)
[12:32:17] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[12:33:15] *** Joins: sheldon (~sheldon@user/sheldon)
[12:34:12] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[12:34:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[12:35:11] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:35:36] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:37:44] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 265 seconds)
[12:39:34] *** Joins: zalt_ (~zalt@user/zalt)
[12:40:06] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[12:40:35] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[12:42:59] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[12:43:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:44:05] *** Quits: Thedarkb (~Thedarkb@cpc105342-pool17-2-0-cust428.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[12:44:56] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[12:45:07] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:47:37] *** Joins: NEYi (~NEYi@109.251.216.38)
[12:47:40] *** Joins: gdd (~gdd@129.199.146.230)
[12:47:55] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[12:49:22] *** Joins: svenzhou (~svenzhou@119.4.177.77)
[12:50:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[12:50:44] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[12:51:40] *** Quits: svenzhou (~svenzhou@119.4.177.77) (Quit: Client closed)
[12:51:53] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 250 seconds)
[12:52:18] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:55:15] *** Quits: phineasflynn (~farawayas@103.160.128.32) (Remote host closed the connection)
[13:08:10] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:18] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[13:13:34] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[13:13:47] <sham1> Hi
[13:17:02] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:18:01] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[13:19:42] *** Quits: defjam (~eb0t@90.197.82.230) (Ping timeout: 256 seconds)
[13:20:43] *** Joins: defjam (~eb0t@90.202.44.78)
[13:21:26] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[13:22:59] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[13:23:15] *** Joins: svenzhou (~svenzhou@119.4.177.77)
[13:23:26] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:24:46] *** Quits: svenzhou (~svenzhou@119.4.177.77) (Client Quit)
[13:25:30] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:25:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:26:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:28:23] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[13:31:11] *** Joins: Xgc (~Xgc@user/xgc)
[13:31:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[13:31:59] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[13:33:51] *** Joins: svenzhou (~svenzhou@240e:476:ba02:14d3:f9cd:f3cb:1d6b:64d9)
[13:35:13] *** Quits: kdc (~kdc@196.211.197.159) (Ping timeout: 250 seconds)
[13:36:18] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[13:37:49] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 250 seconds)
[13:38:12] *** Joins: JayDoubleu (~jaydouble@2001:470:69fc:105::1:371a)
[13:39:28] *** Quits: svenzhou (~svenzhou@240e:476:ba02:14d3:f9cd:f3cb:1d6b:64d9) (Quit: Client closed)
[13:45:05] *** Joins: gproto10 (~gproto23@user/gproto23)
[13:46:21] *** Joins: svenzhou (~svenzhou@240e:476:ba02:14d3:f9cd:f3cb:1d6b:64d9)
[13:47:14] *** Quits: svenzhou (~svenzhou@240e:476:ba02:14d3:f9cd:f3cb:1d6b:64d9) (Client Quit)
[13:50:03] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[13:50:11] *** Quits: kuoi (~kuoi@109.175.166.58) (Quit: kuoi)
[13:58:36] *** Quits: Guest91 (~Guest91@85.174.198.135) (Quit: Client closed)
[14:02:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[14:08:07] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Remote host closed the connection)
[14:08:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:10:12] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:12:02] *** Joins: ko (~i.am@user/marlboro)
[14:12:02] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[14:12:46] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[14:13:28] *** Joins: Viewday110 (~Viewday@user/viewday)
[14:14:15] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[14:14:17] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[14:14:24] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[14:15:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:15:14] *** Viewday110 is now known as Viewday11
[14:17:28] *** Joins: shivesh (~shivesh@user/shivesh)
[14:18:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:19:12] *** Quits: defjam (~eb0t@90.202.44.78) (Ping timeout: 256 seconds)
[14:20:06] *** Joins: defjam (~eb0t@90.204.62.61)
[14:20:22] *** Joins: harbabum (~test@93.56.45.82)
[14:23:34] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[14:25:39] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:26:18] *** Joins: kish` (~sid742412@user/aqua)
[14:28:14] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:30:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[14:34:00] *** Quits: harbabum (~test@93.56.45.82) (Quit: Leaving)
[14:34:11] *** Quits: Mi2305 (~maikel@127.red-79-156-22.staticip.rima-tde.net) (Quit: Leaving)
[14:34:11] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:34:56] *** Joins: csrf (~csrf@user/csrf)
[14:36:41] *** Joins: cart_man (~rynot@host-78-144-121-1.as13285.net)
[14:37:45] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[14:40:50] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[14:40:55] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[14:41:40] *** Joins: fputs (~fputs@67.59.83.166)
[14:42:27] *** Joins: strajder (~strajder@user/strajder)
[14:43:17] *** Joins: bbju (~bbju@103.144.148.54)
[14:44:59] *** Quits: VincentValentine (~VincentVa@PPPoE-78-29-68-241.san.ru) (Ping timeout: 250 seconds)
[14:48:11] *** Quits: violet (~vi@user/violet) (Quit: leaving)
[14:48:20] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:52:52] *** Quits: bbju (~bbju@103.144.148.54) (Quit: Client closed)
[14:53:23] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.58)
[14:54:22] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[14:55:09] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[14:55:29] *** Quits: defjam (~eb0t@90.204.62.61) (Ping timeout: 265 seconds)
[14:56:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.70) (Ping timeout: 256 seconds)
[14:57:24] *** Joins: defjam (~eb0t@90.202.47.175)
[14:58:33] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[14:59:00] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[15:03:45] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[15:04:33] *** Quits: alch (~alch@151.82.18.207) (Read error: Connection reset by peer)
[15:08:48] *** Joins: alch (~alch@151.82.4.244)
[15:14:49] *** Quits: defjam (~eb0t@90.202.47.175) (Ping timeout: 265 seconds)
[15:16:42] *** Joins: defjam (~eb0t@90.210.93.250)
[15:17:01] *** Quits: Zenton (~user@user/zenton) (Remote host closed the connection)
[15:17:02] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[15:17:09] *** Joins: Zenton (~user@user/zenton)
[15:17:31] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[15:23:10] *** Joins: Guest82 (~Guest82@c-24-30-27-91.hsd1.ga.comcast.net)
[15:23:40] <Guest82> What is good practice to ensure a string too long won't be used to cause a buffer overflow?
[15:25:54] <asd> ensure that your string isn't larger than the destination
[15:26:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:26:28] <asd> or cut it after it has filled the buffer
[15:26:57] <Guest82> I can't stop a user from attempting to use a longer string than what is allowed.
[15:27:12] *** Joins: Iarfen (~quassel@181.43.59.114)
[15:27:19] <asd> well the your parse the input 1 character at a time until it fits your criteria
[15:27:23] <dacav> pass a shorter length to the function that writes on it
[15:27:41] <dacav> and always add the '\0' at the end
[15:27:41] <asd> if you dump it into a variable it's neglience on your part
[15:27:44] <Guest82> I'm just trying to understand good security practices with C.
[15:28:26] <asd> well if you're ready to use a library i think google made a c library for parsing data safely and fast in regards to such situations. but in standard C, you should be accountable for each byte you process
[15:28:46] <Guest82> What's the name of that library asd?
[15:29:11] <dacav> Guest82: I think your question is a bit too generic.  What exactly are you trying to accomplish?  Where does the string come from?
[15:29:20] <asd> Guest82: 1 min let me search my notes for the lib name
[15:29:52] <Guest82> I'm still getting the hang of C dacav, I always hear about buffer overflows related to strings, and wanted to know best practices to avoid such incidents.
[15:30:03] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[15:30:51] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:31:05] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[15:31:31] <dacav> ah, that's simple then: always check for boundaries, that's all
[15:31:39] <Guest82> Example?
[15:32:01] <asd> Guest82: i guess this is the library i was talking about: https://github.com/google/wuffs
[15:32:02] <candide> Title of asd's link: GitHub - google/wuffs: Wrangling Untrusted File Formats Safely
[15:32:50] <dacav> Example: you've got a buffer where you are going to copy a string â†’ you don't write beyond the buffer size.  It is better to truncate the string.  Even if you use functions from the standard library, you typically have a variant that checks the size
[15:32:52] <asd> Guest82: well a general approach to the problem is to read 1 character at a time to ensure it fits your criteria
[15:32:59] <dacav> e.g. avoid strcpy, use strncpy
[15:33:12] <asd> strncpy is shit 
[15:33:18] <Guest82> I've been told that even strncpy is insecure, I should use foo bar instead.
[15:33:49] <dacav> strncpy checks the boundary, but you've to write your terminator character
[15:33:57] <dacav> strcpy does not check it
[15:34:23] <dacav> As you keep using these libraries, it just enters your muscolar memory
[15:34:30] <dacav> s/libraries/functions/
[15:35:09] <Guest82> What about openbsd's strlcpy? Yet I've been told even that is insecure to use.
[15:35:25] <dacav> In short, don't be just afraid because they told you it's insecure: check what it does, instead
[15:35:28] <dacav> the documentation is very clear
[15:35:58] <Guest82> In other words, "secure" and "insecure" are mostly trendy buzzwords?
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:25] <dacav> Yes, because they're too generic
[15:36:27] <dacav> it doesn't mean anything
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] <dacav> it's like saying that going to the market is dangerous
[15:36:51] <dacav> it doesn't say anything as long as you don't also mention *why*
[15:37:33] <Guest82> But do you recommend using strlcpy over strncpy or do you find they're both equal and just use whichever I want?
[15:38:01] <rcf> Guest82: C strings are inherently insecure by most modern standards because they are potentially unbounded. What matters is your vigilance in dealing with them.
[15:38:16] <dacav> strlcpy is available under bsd and under linux if you've got libbsd installed.  If you don't want the extra dependency, you can use strncpy just as fine, as long as you check what it does
[15:38:24] *** Joins: superdupond (~Kev@2a01cb0400149f00b1870375c2ef476a.ipv6.abo.wanadoo.fr)
[15:38:34] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:38:47] <dacav> let's take the strncpy example, just to pinpoint some idea
[15:38:57] <dacav> you type 'man strncpy'
[15:39:27] *** Joins: derjanni (~Hans@p508ee2f0.dip0.t-ipconnect.de)
[15:39:36] <dacav> it clearly says thta it copies at most n bytes, but if there's no null byte among the first n bytes of the source string, the string placed in dest will not be null-terminated
[15:40:03] <dacav> so obviously you have to tell it that your buffer is one byte shorter
[15:40:11] <dacav> then you put your null terminator explicitly
[15:40:13] <dacav> and then you're safe
[15:40:54] <dacav> zero black-magic involved
[15:40:55] *** Joins: earnestly (~earnest@user/earnestly)
[15:40:59] <Guest82> Can I please have an example of using strncpy safely? Like bpa.st it? Just something to reference for later.
[15:41:13] <supakeen> I think the entire discussion and various flavours of those functions is specifically because people don't think that's obvious.
[15:41:48] <supakeen> strncpy(dst, src, sizeof(dst)); dst[sizeof(dst)] = '\0';
[15:41:55] <supakeen> -1
[15:41:55] <dacav> char buffer[BUFSIZE]; strncpy(buffer, very_long_string, sizeof(buffer) - 1); buffer[sizeof(buffer) - 1] = 0
[15:42:16] <supakeen> What a great time to be off by one too.
[15:42:30] <dacav> supakeen: srsly, :D 
[15:42:42] <dacav> Guest82: please ignore supakeen's bad example
[15:42:46] <rcf> strlcpy is generally fine. strlcat is the more controversial one, because it *can* leave the result unterminated 
[15:43:03] *** Parts: JayDoubleu (~jaydouble@2001:470:69fc:105::1:371a) ()
[15:43:04] <dacav> Guest82: in short, know your shit.
[15:43:04] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 256 seconds)
[15:43:06] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[15:43:39] <dacav> also, use a checker, like cppcheck, or many compilers
[15:43:56] <Guest82> That's it? Just 3 lines? Other languages sniff their fats over how it's 250+ lines to safely check strings in C?
[15:44:04] *** Joins: beencubed (~beencubed@209.131.238.248)
[15:44:06] <Guest82> *sniff their farts
[15:44:14] <dacav> sniff farts?
[15:44:26] * dacav is not a native English speaker
[15:44:26] <Guest82> It's a meme that someone is extremely smug and obnoxious about it.
[15:44:29] <supakeen> Depending on the actual usecase, if you're fine with truncating the copied string sure it's just the above (with the -1).
[15:44:37] <supakeen> If you're not, it's more work.
[15:44:47] <supakeen> But also not 250+ lines.
[15:44:53] <dacav> I've plenty of projects in C, never had a issue
[15:45:29] <dacav> Guest82: another good thing you can do is... hack yourself :) that is, neglect security and see what happens by being evil guy
[15:45:42] <rcf> Guest82: itâ€™s one thing to be memory-safe; validating your input otherwise is still necessary 
[15:45:54] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 256 seconds)
[15:46:17] <Guest82> I just want to hack away some xlib wm's and maybe make a game or two in SDL. So C seems like a fun language.
[15:46:30] *** zalt_ is now known as zalt
[15:47:12] <dacav> that sounds great :)
[15:47:19] <dacav> doing is the best way of learning
[15:47:32] <dacav> learning is the path to knowing
[15:47:37] <dacav> knowing is the path to not being afraid
[15:47:37] <candide> dacav: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[15:47:44] <dacav> being afraid brings to the dark side
[15:47:49] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:48:06] *** Joins: Klinda (~superleag@user/klinda)
[15:48:17] <dacav> candide: my apologies
[15:48:17] <candide> [Users] dacav: apologies is not set.
[15:49:12] *** Quits: Guest82 (~Guest82@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Client closed)
[15:51:50] *** Joins: ns12 (~ns12@user/ns12)
[15:51:50] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[15:53:21] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[15:53:25] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:53:28] *** Joins: wallby (~wallby@40-106-20-31.ftth.glasoperator.nl)
[15:53:37] *** Joins: pulse (~pulse@user/pulse)
[15:56:52] <dacav> (did I just apologise with a bot?)
[15:58:33] <dave0> candide: are you a bot?
[15:58:48] <candide> dâ€‹ave0, Not likely!
[15:58:54] <dacav> ^_^
[15:58:55] <dave0> proof
[15:59:43] <dacav> I hope your proof doesn't mention https://github.com/pragma-/pbot
[15:59:44] <candide> Title of dacav's link: GitHub - pragma-/pbot: A pragmatic Perl IRCv3 bot
[16:00:01] *** Parts: wallby (~wallby@40-106-20-31.ftth.glasoperator.nl) (Leaving)
[16:00:59] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[16:03:01] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:04:24] *** Joins: VincentValentine (~VincentVa@PPPoE-78-29-68-241.san.ru)
[16:07:05] *** Parts: ns12 (~ns12@user/ns12) (The Lounge - https://thelounge.chat)
[16:07:40] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 265 seconds)
[16:15:59] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:16:01] *** Quits: derjanni (~Hans@p508ee2f0.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[16:16:36] *** Joins: masterbuilder (~user@user/masterbuilder)
[16:17:38] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[16:19:15] *** X-Scale` is now known as X-Scale
[16:19:33] *** Joins: noord (~noord@user/noord)
[16:20:28] *** Quits: Iarfen (~quassel@181.43.59.114) (Ping timeout: 256 seconds)
[16:21:34] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[16:22:49] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[16:22:55] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:23:05] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:25:09] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[16:31:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:32:26] *** Joins: constxd (~brad@192.75.101.164)
[16:33:52] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Quit: leaving)
[16:34:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:35:20] *** Joins: seninha (~seninha@user/seninha)
[16:36:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:36:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d15f:a494:a911:62f8)
[16:38:28] *** Joins: kexec (~kexec@user/kexec)
[16:41:06] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[16:41:30] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[16:41:34] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[16:42:49] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[16:45:01] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[16:45:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[16:45:27] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[16:46:58] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[16:47:04] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[16:47:49] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[16:51:35] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[16:52:00] *** Joins: abip20 (~abdullah@103.66.177.186)
[16:52:23] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[16:52:49] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 250 seconds)
[16:53:02] *** Quits: abip20 (~abdullah@103.66.177.186) (Client Quit)
[16:53:20] *** Joins: abip20 (~abdullah@103.66.177.186)
[16:54:38] *** Joins: beencubed (~beencubed@209.131.238.248)
[16:55:42] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e8446-248.dhcp.inet.fi)
[16:56:28] *** Quits: beencubed (~beencubed@209.131.238.248) (Max SendQ exceeded)
[16:56:55] *** Joins: beencubed (~beencubed@209.131.238.248)
[16:57:33] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:59:03] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[16:59:19] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:dc84:5802:f8de:ecee) (Quit: Leaving)
[17:01:06] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Quit: leaving)
[17:02:03] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[17:08:35] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Quit: leaving)
[17:09:22] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[17:09:42] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:09:51] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[17:09:52] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[17:13:08] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:20:16] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[17:20:32] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:23:52] *** Joins: nyah (~nyah@94.6.71.219)
[17:24:32] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[17:28:04] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:31:36] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[17:32:15] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[17:33:23] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[17:36:15] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e8446-248.dhcp.inet.fi) (Quit: WeeChat 2.8)
[17:37:32] *** Quits: kurfen (~kurfen@45.152.181.20) (Ping timeout: 244 seconds)
[17:37:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:37:49] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Remote host closed the connection)
[17:39:18] *** Joins: kurfen (~kurfen@45.152.181.20)
[17:39:52] *** Joins: harbabum (~test@93.56.45.82)
[17:42:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:42:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:43:41] *** Quits: g2anj (~v@39.112.227.198) (Ping timeout: 265 seconds)
[17:46:54] <Feuermagier> what does this do: while(*src)
[17:46:54] <Feuermagier>         *dest++ = *src++;
[17:48:13] <asd> copies source to destination until src is == 0
[17:48:32] <asd> afaik it's an idiom you should know about, see K&R2 
[17:48:37] *** Quits: strajder (~strajder@user/strajder) (Remote host closed the connection)
[17:48:53] <Feuermagier> well, time to find out what K&R2 is
[17:49:14] <edk> it is an idiom, but it's also the kind of thing you should be able to work out from first principles
[17:49:33] <dacav> Feuermagier: and back on the safety topic: that loop does not check for boundaries
[17:49:49] *** Joins: halabund (~halabund@192.55.244.3)
[17:50:39] <floatcomplex> it's a stunt
[17:50:58] <floatcomplex> it's important to recognize in old code
[17:51:13] <edk> i think new code should also do it
[17:52:57] <Feuermagier> edk, I'm pretty sure it's causing a buffer overflow in the code I have here...
[17:53:24] <dacav> no wonder
[17:53:34] <Feuermagier> I have no idea why some C programmers like their "stunts" so much
[17:53:41] <Feuermagier> as they clearly get hurt in the process
[17:53:58] <dacav> depends on the experience, I'd say
[17:54:25] <fizzie> Assuming `src` is string, it also doesn't copy the null terminator. But perhaps it's followed by a `*dest = 0` or something.
[17:54:25] <floatcomplex> if i saw that in a production codebase i would scan it for duff's device
[17:55:00] <Feuermagier> what's that floatcomplex ?
[17:55:13] <edk> why would you "scan it" for anything?
[17:55:16] <floatcomplex> a worse stunt
[17:55:30] <edk> you should all go away and write python or something
[17:55:59] <fizzie> I would say the classic idiom is the `while (*dst++ = *src++);` one, which *does* copy the terminating zero as well.
[17:56:29] *** Joins: kuoi (~kuoi@109.175.166.58)
[17:56:47] <dacav> and then die in magnets because dst's buffer is shorter than src's buffer?
[17:57:12] *** Joins: bogdomania (bogdomania@user/bogdomania)
[17:57:16] *** Joins: jscottb (~jscottb@cpe-173-92-212-35.carolina.res.rr.com)
[17:58:12] *** Joins: rgrinberg (~textual@201.192.183.100)
[17:59:21] <edk> if you're copying something that might be bigger than the buffer you're copying it into, obviously you should do something about that
[17:59:54] <edk> if you know you aren't, say because you computed the size of the destination so that everything would fit, checking would be pointless
[18:00:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:00:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:00:10] *** Joins: wroathe (~wroathe@user/wroathe)
[18:00:49] <dacav> Indeed.  My point is that Feuermagier's one-liner is missing some really important context :)
[18:01:01] <edk> every one-liner is missing important context
[18:01:10] <dacav> True story! :D
[18:01:25] <dacav> oh well, minus perl's oneliners, those are usually complete :D
[18:03:51] <edk> yes, but not even their author will be able to understand them, so context is irrelevant
[18:04:08] <dacav> :D
[18:04:55] *** Joins: Iarfen (~quassel@181.43.59.114)
[18:05:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[18:09:14] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:13:20] <floatcomplex> edk: i have found and removed duff's device used gratuitously in production code and seen a huge code speedup in doing so
[18:14:36] *** Joins: quartz (~quartz@user/quartz)
[18:15:38] <dacav> floatcomplex: I always wondered about it! Could you quantify the speed-up?
[18:17:10] <floatcomplex> dacav: it was close to ten years ago now, at a previous job, i don't have access to that code anymore. but you could probably benchmark it
[18:17:45] <floatcomplex> just to clarify, i'm saying that with a modern-ish compiler, the duff's device version was significantly slower than clean code
[18:19:50] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[18:20:27] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[18:21:25] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[18:21:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[18:21:32] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[18:21:59] <dacav> ah yes, that's something I heard.  I never had the chance of measuring it though
[18:22:32] <floatcomplex> it shouldn't be too hard to set up such a benchmark
[18:23:27] *** Joins: ProperN[out] (~holyShizn@2600:1700:eb30:a2c0::48)
[18:24:41] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[18:24:57] *** Parts: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8) ()
[18:25:08] *** Quits: Iarfen (~quassel@181.43.59.114) (Ping timeout: 256 seconds)
[18:25:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d)
[18:25:40] <Feuermagier> davros, well, better check on godbolt if the assembler is even different first
[18:26:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:27:37] *** Quits: ProperN[out] (~holyShizn@2600:1700:eb30:a2c0::48) (Changing host)
[18:27:37] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[18:27:53] *** ProperN[out] is now known as ProperNoun
[18:27:58] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[18:29:16] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Remote host closed the connection)
[18:34:12] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[18:34:55] *** Quits: harbabum (~test@93.56.45.82) (Quit: Leaving)
[18:35:29] *** Joins: johnjay (~pi@192.142.100.50)
[18:35:37] <gproto10> struct {char pass[20], msg_err[20];} pwfile = {{0}}; | what equals pwfile here?
[18:36:45] *** Joins: jess (~jess@libera/staff/jess)
[18:36:51] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[18:37:53] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:38:19] *** Parts: the_lanetly_052_ (~the_lanet@194.135.166.58) (Leaving)
[18:38:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:39:21] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[18:39:21] <clarity> gproto10: pwfile equals pwfile
[18:39:53] <clarity> Oh wait that's a struct.  Equality is not defined.
[18:42:05] <nomagno> Can you implement general purpose coroutines with just setjmp and longjmp?
[18:42:52] *** Joins: kdc (~kdc@196.211.197.159)
[18:43:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:43:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:43:04] *** Joins: wroathe (~wroathe@user/wroathe)
[18:43:16] *** Quits: defjam (~eb0t@90.210.93.250) (Ping timeout: 256 seconds)
[18:43:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 265 seconds)
[18:44:09] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:45:08] *** Joins: defjam (~eb0t@90.210.95.134)
[18:46:55] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:47:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:48:56] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 265 seconds)
[18:49:23] *** Quits: defjam (~eb0t@90.210.95.134) (Read error: Connection reset by peer)
[18:49:53] *** Joins: Famine- (~Famine@user/famine)
[18:50:44] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:50:49] *** Quits: halabund (~halabund@192.55.244.3) (Remote host closed the connection)
[18:50:52] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 265 seconds)
[18:52:39] <nomagno> If I understand this correctly, you can probably malloc a struct with a few varied types to act as a limited "stack", and refrain from putting variables into automatic storage, and you would get an UB-free coroutine's functionality
[18:52:48] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 265 seconds)
[18:53:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d) (Remote host closed the connection)
[18:53:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d)
[18:54:49] <gproto10> nomagno: malloc? how?
[18:55:13] <nomagno> gproto10: sec
[18:55:26] *** Joins: defjam (~eb0t@90.213.43.181)
[18:55:56] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:58:18] *** Joins: pulse (~pulse@user/pulse)
[18:59:58] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.58)
[19:00:31] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.58) (Client Quit)
[19:00:48] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.58)
[19:01:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.58) (Client Quit)
[19:01:48] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.58)
[19:05:22] *** Quits: alch (~alch@151.82.4.244) (Read error: Connection reset by peer)
[19:05:30] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[19:08:48] *** Joins: jailop (~jailop@172.58.224.54)
[19:09:10] *** Joins: alch (~alch@151.46.18.84)
[19:09:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d) (Quit: Leaving)
[19:11:54] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[19:13:35] *** Quits: jailop (~jailop@172.58.224.54) (Ping timeout: 265 seconds)
[19:13:38] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[19:13:42] *** Joins: kexec (~kexec@user/kexec)
[19:17:20] *** Quits: luiserebii (~luiserebi@2400:8902::f03c:91ff:fe65:3ff5) (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
[19:18:52] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:e982:a62b:99c8:220c) (Remote host closed the connection)
[19:20:46] *** Joins: arinov (~arinov@5.24.160.250)
[19:23:01] <floatcomplex> nomagno: no, you cannot do it with setjmp and longjmp without UB
[19:23:19] <floatcomplex> i've done it anyway, but i don't do it that way anymore because it's UB and doing it properly isn't that hard
[19:23:50] <floatcomplex> nomagno: it's specifically UB with setjmp because you're not allowed to setjmp into a context that you've previously left via longjmp
[19:25:57] *** Joins: pk__ (~pk__@103.253.173.58)
[19:26:54] <pk__> i have this in my functionÂ  Â i=somefx();Â  Â if(i==2) someotherfx();Â  Â  but valgrind says Conditional jump or move depends on uninitialised value(s)
[19:26:57] <nomagno> floatcomplex: and how do you "do it properly"?
[19:27:14] <pk__> how is it possible, somefx would return some value ,Â  how could i be uninitialized
[19:27:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[19:28:21] <floatcomplex> nomagno: https://gist.github.com/rlcamp/f6efb0b1bab9a60de7e6323ea82641d8
[19:28:22] <candide> Title of floatcomplex's link: Coroutines for generator functions, sequential pipelines, state machines, and other uses in C Â· GitHub
[19:28:38] <floatcomplex> nomagno: note that this is "for c", not "in c"
[19:29:05] <nomagno> I was specifically trying to avoid the assembly inline mess :P
[19:29:27] <floatcomplex> nomagno: well you can't
[19:29:31] <nomagno> I guess if I want to use 2000-era deprecated POSIX functions, that would work
[19:29:57] <floatcomplex> nomagno: there is an implementation of this same API that uses those, if you scroll down
[19:30:18] <floatcomplex> scroll down to coroutine_using_ucontext.c
[19:31:01] <nomagno> You can use global structs to kind of emulate coroutine functionality and multiple stacks, with more success than not doing it at all
[19:31:16] <nomagno> I have yet to figure out nice macros to handle that mess tough
[19:32:30] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:32:42] <nomagno> if you can provide minimal guarantees (AKA not forgetting) you will set this or that number in a global struct before "yielding", you have the basic functionality there
[19:33:23] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:33:57] <nomagno> I guess I can use macros to turn the function into a big switch statement without making it look like a mess.
[19:34:30] <floatcomplex> nomagno: please don't
[19:35:10] <floatcomplex> nomagno: see the above discussion about duff's device. what you're describing is a generalization of duff's device that even tom duff specifically discouraged
[19:35:21] *** Joins: rgrinberg (~textual@201.192.183.100)
[19:35:26] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[19:36:04] <floatcomplex> just use the asm you need, or libucontext, or pthreads if you don't care about fast switching
[19:37:01] <quartz> Can someone please explain what the output of question 2.3 will be? https://i.ibb.co/PTPv12v/image.png
[19:37:48] <nomagno> I am not the first person ever to figure out you can turn a coroutine into an ugly switch statement with global variables, apparently.
[19:38:11] <floatcomplex> nomagno: yeah. it's been widely discussed and is known to be a very bad idea
[19:38:45] <pragma-> quartz: bad things.
[19:38:48] <quartz> I'm confused what the fork() does within the while loop. From my understanding, the fork will create a child process. Each child process will inherit the variable x because fork was called AFTER x was declared.
[19:39:08] <quartz> pragma-: What do you mean?
[19:39:10] <floatcomplex> nomagno: the biggest issue with that technique is that the compiler can't warn you that a local variable can't be trusted to preserve its value across yields
[19:39:13] <Xgc> quartz: fork in a while loop is always a good sign.
[19:39:22] <quartz> Xgc: why?
[19:39:23] *** Joins: jailop (~jailop@65.254.29.162)
[19:39:25] <pragma-> me inputs 0
[19:39:51] <floatcomplex> ,cc return atoi(NULL, NULL, 0);
[19:39:53] <candide> floatcomplex: error: too many arguments to function 'atoi'
[19:39:55] <quartz> Oh I forgot the directions to the question. they are running it with argv = 3
[19:39:57] <floatcomplex> ,cc return atoi(NULL);
[19:40:00] <candide> floatcomplex: [warning: argument 1 null where non-null expected [-Wnonnull] note: in a call to function 'atoi' declared 'nonnull']  runtime error: null pointer passed as argument 1, which is declared to never be null Program received signal SIGSEGV, Segmentation fault in ____strtoll_l_internal () called by atoi () called by main () at statement: return atoi(NULL);
[19:40:00] <Xgc> quartz: Just joking.  It's a good way to cause problems, if not very careful.
[19:40:17] <pragma-> Haven't we had this exact identical conversation before? I am feeling an incredible amount of deja vu right now.
[19:40:32] <quartz> But how can I determine the output? A fork will RETAIN the value of the variables up to the point where fork was called right?
[19:41:07] <quartz> pragma-: No I think this was different.
[19:41:09] *** Quits: defjam (~eb0t@90.213.43.181) (Ping timeout: 268 seconds)
[19:41:44] <quartz> Yesterday was big and little endian
[19:42:00] *** Parts: pk__ (~pk__@103.253.173.58) ()
[19:42:28] <nomagno> quartz: that function exponentially prints powers of two, I think as many as the first argument
[19:42:29] <floatcomplex> nomagno: that should be a big enough reason to not use that technique, but there are more
[19:42:45] *** Joins: defjam (~eb0t@90.210.91.65)
[19:43:08] <nomagno> I'm not sure what the exact ratio is... But since x is static, it is from a lot to forever
[19:43:26] *** jailop is now known as itisjailop
[19:43:43] <nomagno> Not sure how forking main changes argument strings, so would have to check
[19:44:23] <nomagno> It is definitely unlimited and exponential if argv[1] doesn't change.
[19:44:41] *** Joins: harbabum (~test@93.56.45.82)
[19:44:58] <quartz> They are calling it with 3 as a command line arguement
[19:45:00] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[19:45:55] <nomagno> Worst-case scenario, it prints powers of two forever
[19:46:10] *** Quits: itisjailop (~jailop@65.254.29.162) (Quit: leaving)
[19:46:12] <nomagno> However again no idea how forking main works
[19:46:24] *** Joins: jailop (~jailop@65.254.29.162)
[19:47:05] <quartz> I was more confused in visualizing how the fork processes work within a while loop
[19:47:31] <pragma-> You could write out the program and then add some printfs to print the pids and output
[19:47:47] <nomagno> Sounds like a good idea yeah
[19:50:23] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: smlavine)
[19:50:32] <quartz> OK
[19:50:33] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[19:50:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1)
[19:51:51] <pragma-> I find printf-debugging to a log-file to be far easier than setting up a debugger and stepping through things.
[19:51:59] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:51:59] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[19:52:06] <pragma-> You can easily ctrl-f the log file and filter it and whatnot.
[19:52:44] *** Joins: pulse (~pulse@user/pulse)
[19:53:16] <pragma-> of course, make sure your prints are as verbose as possible with as many relevant variables. otherwise, you'll end up running the program several times to add more printfs and more format specifiers.
[19:53:32] <pragma-> then just leave the printfs in the program but wrapped with #ifdef DEBUG.  /me taps brain.
[19:53:43] <pragma-> then later you can just #define DEBUG and get them back!
[19:53:48] * pragma- lazy af.
[19:53:52] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:54:05] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (K-Lined)
[19:54:06] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (K-Lined)
[19:54:06] *** Quits: enick_519 (~mercvrivs@2001:470:69fc:105::2ee6) (K-Lined)
[19:54:06] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (K-Lined)
[19:54:06] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (K-Lined)
[19:54:07] *** Quits: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8) (K-Lined)
[19:54:08] *** Quits: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a) (K-Lined)
[19:54:08] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (K-Lined)
[19:54:08] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (K-Lined)
[19:54:09] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (K-Lined)
[19:54:09] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (K-Lined)
[19:54:09] *** Quits: hussam (~hussam@user/hussam) (K-Lined)
[19:54:09] *** Quits: psydroid (~psydroid@user/psydroid) (K-Lined)
[19:54:10] *** Quits: prepro[m] (~prepromat@2001:470:69fc:105::1:68) (K-Lined)
[19:54:11] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (K-Lined)
[19:54:11] *** Quits: ormaaj (~ormaaj@user/ormaaj) (K-Lined)
[19:54:11] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (K-Lined)
[19:54:13] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (K-Lined)
[19:54:13] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (K-Lined)
[19:54:13] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (K-Lined)
[19:54:14] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (K-Lined)
[19:54:15] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (K-Lined)
[19:54:15] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (K-Lined)
[19:54:15] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (K-Lined)
[19:54:16] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (K-Lined)
[19:54:17] *** Quits: jinsun_ (~jinsun@user/jinsun) (K-Lined)
[19:54:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (K-Lined)
[19:54:20] *** Quits: go4godvin (~go4godvin@user/go4godvin) (K-Lined)
[19:54:20] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (K-Lined)
[19:54:20] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (K-Lined)
[19:54:21] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (K-Lined)
[19:54:21] *** Quits: Akawama[m] (~akawama@user/akawama) (K-Lined)
[19:54:22] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (K-Lined)
[19:54:22] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (K-Lined)
[19:54:23] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (K-Lined)
[19:54:23] <pragma-> these klines are so random
[19:54:23] *** Quits: atulu[m] (~atulumatr@2001:470:69fc:105::d50c) (K-Lined)
[19:54:24] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (K-Lined)
[19:54:24] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (K-Lined)
[19:54:24] *** Quits: kaji (~kajiryoji@2001:470:69fc:105::405b) (K-Lined)
[19:54:29] * pragma- waits for it...
[19:55:25] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[19:55:43] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[19:56:31] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:56:57] <pragma-> In fact, lately, I tend to use a runtime conditional if-check instead of compile-time #defines. Why? So I can tell remote end-users to just enable teh debugging options and re-run their program and send me the generated debug logfile instead of having to talk to the guy and figure out what he did.
[19:58:11] *** Quits: jailop (~jailop@65.254.29.162) (Quit: leaving)
[20:01:28] *** Quits: defjam (~eb0t@90.210.91.65) (Ping timeout: 256 seconds)
[20:01:36] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[20:02:04] *** Joins: defjam (~eb0t@90.199.243.99)
[20:02:15] *** Joins: jailop (~jailop@65.254.29.162)
[20:02:37] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[20:02:45] <constxd> what i do is the following
[20:03:00] <floatcomplex> possibly heavy handed statement: resolution of #ifdefs should be solely a function of what target environment is being compiled for, and no other configurable options
[20:04:04] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[20:04:05] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:54c4:ff9d:b310:bc85)
[20:04:35] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (Ping timeout: 246 seconds)
[20:04:53] *** Quits: terabit (sid146285@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[20:04:54] *** Quits: rgrinberg (~textual@201.192.183.100) (Ping timeout: 260 seconds)
[20:05:00] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[20:05:11] *** Quits: jailop (~jailop@65.254.29.162) (Client Quit)
[20:05:25] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Ping timeout: 250 seconds)
[20:05:29] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 264 seconds)
[20:05:53] *** Joins: jailop (~jailop@65.254.29.162)
[20:05:57] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:06:05] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 264 seconds)
[20:06:05] *** Quits: dreamcat4 (uid157427@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[20:06:05] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 264 seconds)
[20:06:05] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 264 seconds)
[20:06:06] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[20:06:14] <constxd> in foo.c: static void f() { ... DEBUG_1 ... DEBUG_2 .. } static int g(int x) { ... DEBUG_3 ... }, then in debug.h: #define DEBUG_1 printf("blah: %d, %d\n", a, x[i]);\n #define DEBUG_2 for (int i = 0; i < pd->n; ++i) { printf("foo: %f\n", pd->data[i]); }\n ... 
[20:06:18] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[20:06:18] *** Joins: terabit (sid146285@uxbridge.irccloud.com)
[20:06:18] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[20:06:21] *** Joins: abip20 (~abdullah@103.66.177.186)
[20:06:41] *** Quits: elichai2 (sid212594@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[20:06:58] <constxd> that way i can have nice, verbose debug log messages without adding lots of noise to the actual program logic
[20:06:59] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[20:07:03] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[20:07:04] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 268 seconds)
[20:07:13] *** Joins: Akawama[m] (~akawama@user/akawama)
[20:07:13] *** Joins: kaji (~kajiryoji@2001:470:69fc:105::405b)
[20:07:24] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:07:28] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[20:07:29] *** Joins: Guest4443 (~mercvrivs@2001:470:69fc:105::2ee6)
[20:07:30] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[20:07:35] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[20:07:37] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[20:07:44] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[20:07:44] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[20:07:44] *** Joins: hussam (~hussam@user/hussam)
[20:07:44] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:07:44] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[20:07:56] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[20:07:56] *** Joins: psydroid (~psydroid@user/psydroid)
[20:07:56] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[20:07:56] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[20:07:56] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[20:07:57] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[20:08:08] *** Joins: atulu[m] (~atulumatr@2001:470:69fc:105::d50c)
[20:08:08] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[20:08:08] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[20:08:21] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[20:08:22] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[20:08:22] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[20:08:29] *** Quits: glenfe (sid231748@user/glenfe) (Ping timeout: 264 seconds)
[20:08:34] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[20:08:36] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[20:08:47] *** Joins: prepro[m] (~prepromat@2001:470:69fc:105::1:68)
[20:08:47] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[20:08:51] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Ping timeout: 265 seconds)
[20:08:58] *** Joins: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8)
[20:08:58] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[20:08:59] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[20:08:59] *** Joins: jinsun_ (~jinsun@user/jinsun)
[20:08:59] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[20:08:59] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[20:08:59] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[20:09:02] *** Quits: psb_ (sid500598@ilkley.irccloud.com) (Ping timeout: 240 seconds)
[20:09:02] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 240 seconds)
[20:09:02] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 240 seconds)
[20:09:07] <constxd> when i want to add a debug log statement i just press ctrl-i in my editor and it inserts the text DEBUG_{n} where n is the first number for which the macro is not already defined
[20:09:07] <pragma-> nomagno: what did you do?
[20:09:11] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[20:09:11] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[20:09:11] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[20:09:11] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[20:09:11] *** Joins: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a)
[20:09:24] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[20:09:31] <constxd> and pops me over to the debug.h file where i can write the definition
[20:09:31] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 268 seconds)
[20:09:32] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 240 seconds)
[20:09:33] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (Ping timeout: 250 seconds)
[20:09:39] *** Quits: nohit (sid334887@tinside.irccloud.com) (Ping timeout: 265 seconds)
[20:09:39] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:09:40] <floatcomplex> ,ps
[20:09:40] <candide> No running processes.
[20:09:45] <pragma-> nomagno: or rather, what happened to you?
[20:09:54] <pragma-> nomagno: why did you get klined?
[20:09:58] *** Quits: kevinsjoberg (sid499516@lymington.irccloud.com) (Ping timeout: 256 seconds)
[20:09:59] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (Ping timeout: 264 seconds)
[20:10:00] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Read error: Connection reset by peer)
[20:10:01] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: schna (sid484866@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: buhman (sid411355@user/buhman) (Read error: Connection reset by peer)
[20:10:02] *** Quits: englishm (sid6629@tinside.irccloud.com) (Write error: Connection reset by peer)
[20:10:02] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: Pent (sid313808@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: computerquip (sid423484@user/computerquip) (Read error: Connection reset by peer)
[20:10:02] *** Quits: illustris (sid211748@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Write error: Connection reset by peer)
[20:10:02] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: ullbeking (sid5364@user/ullbeking) (Read error: Connection reset by peer)
[20:10:02] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Read error: Connection reset by peer)
[20:10:02] *** Quits: Satin (uid193953@ilkley.irccloud.com) (Write error: Connection reset by peer)
[20:10:03] *** Quits: ff9527ff_ (uid527419@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:10:03] *** Quits: decartes_ (sid240036@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:03] *** Quits: dohtem (uid524096@user/dohtem) (Write error: Connection reset by peer)
[20:10:04] *** Quits: sunarch (uid526836@user/sunarch) (Read error: Connection reset by peer)
[20:10:04] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:10:27] <pragma-> i didn't mean for my first question to appear accusatory.
[20:11:25] <pragma-> oh maybe it was a matrix thing
[20:11:33] *** Quits: terabit (sid146285@uxbridge.irccloud.com) (Max SendQ exceeded)
[20:11:36] <pragma-> oh i just toggled my join/quit filter, yup
[20:11:36] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[20:11:36] *** Joins: Satin (uid193953@ilkley.irccloud.com)
[20:11:36] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[20:11:39] <pragma-> definitely a matrix thing
[20:11:41] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[20:11:45] <pragma-> disregard that. carry on.
[20:11:47] *** Joins: ff9527ff_ (uid527419@uxbridge.irccloud.com)
[20:11:54] *** Joins: ikiryo (sid109660@user/ikiryo)
[20:12:05] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 264 seconds)
[20:12:10] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[20:12:15] *** Joins: sunarch (uid526836@user/sunarch)
[20:12:20] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[20:12:23] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[20:12:27] *** Joins: placeb0 (uid283215@lymington.irccloud.com)
[20:12:35] *** Joins: TallonRain (sid214799@user/tallonrain)
[20:12:37] *** Joins: dreamcat4 (uid157427@hampstead.irccloud.com)
[20:12:40] *** Joins: glenfe (sid231748@user/glenfe)
[20:12:42] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[20:13:07] *** Joins: elichai2 (sid212594@hampstead.irccloud.com)
[20:13:25] *** Joins: Viewday117 (~Viewday@user/viewday)
[20:13:35] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[20:13:40] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[20:13:42] *** Joins: terabit (sid146285@uxbridge.irccloud.com)
[20:13:45] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[20:13:47] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[20:13:54] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[20:13:58] *** Joins: BlueShark (sid10311@user/blueshark)
[20:13:58] *** Joins: decartes_ (sid240036@helmsley.irccloud.com)
[20:14:20] *** Joins: kevinsjoberg (sid499516@lymington.irccloud.com)
[20:14:24] *** Joins: Manouchehri (sid384576@hampstead.irccloud.com)
[20:14:26] *** Joins: bjs (sid190364@user/bjs)
[20:14:27] *** Joins: nohit (sid334887@tinside.irccloud.com)
[20:14:28] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[20:14:33] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[20:14:38] *** Joins: sa (sid1055@tinside.irccloud.com)
[20:14:41] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[20:14:50] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[20:14:55] *** Joins: Pent (sid313808@lymington.irccloud.com)
[20:15:04] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[20:15:04] *** Viewday117 is now known as Viewday11
[20:15:17] *** Joins: ullbeking (sid5364@user/ullbeking)
[20:15:20] *** Joins: buhman (sid411355@user/buhman)
[20:15:20] *** Joins: illustris (sid211748@ilkley.irccloud.com)
[20:15:25] *** Joins: dohtem (uid524096@user/dohtem)
[20:15:26] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[20:15:30] *** Joins: englishm (sid6629@tinside.irccloud.com)
[20:15:42] *** Joins: rgrinberg (~textual@201.192.183.100)
[20:15:43] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[20:15:44] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[20:16:02] *** Joins: abip20 (~abdullah@103.66.177.186)
[20:17:04] <nomagno> pragma-: What? I'm confused
[20:17:39] <pragma-> me too, friend. me too.
[20:17:45] <twkm> irccloud and matrix.  joy.
[20:18:49] *** Joins: schna (sid484866@helmsley.irccloud.com)
[20:18:59] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[20:19:35] *** Quits: defjam (~eb0t@90.199.243.99) (Ping timeout: 264 seconds)
[20:19:44] *** Joins: Nautilus_ (~me2@d27-96-220-62.nap.wideopenwest.com)
[20:19:54] *** Joins: psb_ (sid500598@ilkley.irccloud.com)
[20:20:13] *** Joins: celphi (sid97751@user/celphi)
[20:20:25] *** Joins: Bou (sid274843@user/bou)
[20:20:46] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[20:20:53] *** Joins: computerquip (sid423484@user/computerquip)
[20:21:24] *** Joins: defjam (~eb0t@90.210.93.143)
[20:22:28] *** Quits: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com) (Ping timeout: 268 seconds)
[20:22:49] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[20:22:56] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:23:11] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 265 seconds)
[20:23:30] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:29:19] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[20:29:20] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[20:29:38] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[20:29:44] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[20:29:55] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:29:56] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[20:30:01] *** Quits: Guest4443 (~mercvrivs@2001:470:69fc:105::2ee6) (Quit: Client limit exceeded: 20000)
[20:30:04] *** Quits: hussam (~hussam@user/hussam) (Quit: Client limit exceeded: 20000)
[20:30:08] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[20:30:18] *** Joins: chasmo77 (~chas77@71.63.241.168)
[20:30:20] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Quit: Client limit exceeded: 20000)
[20:30:21] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Quit: Client limit exceeded: 20000)
[20:30:30] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[20:30:30] *** Joins: hussam (~hussam@user/hussam)
[20:30:31] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:30:31] *** Joins: psydroid (~psydroid@user/psydroid)
[20:30:31] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[20:30:38] *** Joins: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6)
[20:30:41] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[20:30:42] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[20:30:44] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Quit: Client limit exceeded: 20000)
[20:31:03] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (Quit: Client limit exceeded: 20000)
[20:31:14] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Client limit exceeded: 20000)
[20:31:27] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (Quit: Client limit exceeded: 20000)
[20:31:30] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (Quit: Client limit exceeded: 20000)
[20:31:34] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: Client limit exceeded: 20000)
[20:31:36] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[20:32:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:33:42] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Quit: Client limit exceeded: 20000)
[20:33:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[20:34:57] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Quit: Client limit exceeded: 20000)
[20:36:18] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[20:37:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:37:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:37:39] *** Joins: tejr (~tejr@user/tejr)
[20:39:26] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[20:39:29] *** Quits: cart_man (~rynot@host-78-144-121-1.as13285.net) (Quit: Konversation terminated!)
[20:42:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f954:9200:423c:88b2)
[20:42:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f954:9200:423c:88b2) (Changing host)
[20:42:02] *** Joins: skapata (~Skapata@user/skapata)
[20:43:08] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[20:43:42] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[20:45:05] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 250 seconds)
[20:46:07] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[20:50:31] *** Joins: arinov (~arinov@213.194.126.155)
[20:51:32] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 240 seconds)
[20:51:40] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[20:52:44] *** Joins: trampel (~trampel@2601:602:9c00:921:cf97:e543:d68f:5867)
[20:52:58] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[20:54:10] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[20:55:04] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:57:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.58) (Ping timeout: 268 seconds)
[20:58:27] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:59:07] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:00:23] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:1048:6f6a:9cd9:ae7b) (Ping timeout: 264 seconds)
[21:00:31] *** Joins: mahmutov (~mahmutov@37.155.29.32)
[21:00:48] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:01:23] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:03:59] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[21:06:07] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[21:07:56] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:54c4:ff9d:b310:bc85) (Quit: This computer has gone to sleep)
[21:08:14] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:54c4:ff9d:b310:bc85)
[21:11:19] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[21:22:21] *** Quits: harbabum (~test@93.56.45.82) (Quit: Leaving)
[21:25:09] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[21:25:26] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[21:29:24] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[21:29:45] *** Joins: iddev5 (~iddev5@2409:4062:228e:fad9:43d0:c500:5ddd:da4)
[21:30:23] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 264 seconds)
[21:31:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:32:33] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[21:32:53] *** Joins: Klinda (~superleag@user/klinda)
[21:35:40] *** Quits: trampel (~trampel@2601:602:9c00:921:cf97:e543:d68f:5867) (Quit: Leaving)
[21:36:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:38:57] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[21:39:12] <hans_> why doesn't C support "continue 2;" ? eg https://paste.debian.net/plain/1219975
[21:39:27] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[21:39:40] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[21:39:40] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[21:39:40] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[21:39:40] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[21:39:40] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[21:39:40] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[21:39:40] *** Joins: jinsun_ (~jinsun@user/jinsun)
[21:39:52] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[21:39:52] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[21:40:59] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: issued !quit command)
[21:41:35] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[21:42:16] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:42:30] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[21:42:51] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[21:42:54] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[21:46:48] <floatcomplex> hans_: just set ret = haystack_len and then continue
[21:46:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:47:14] <floatcomplex> oh...wait no that's not the same thing
[21:47:29] <floatcomplex> that's scary
[21:47:36] <hans_> ?
[21:47:39] *** Joins: mrig (~mrig@user/mrig)
[21:47:57] <hans_> fwiw its just (supposed to be?) a binary-safe version of cspn()
[21:48:28] <hans_> err, strcspn()
[21:48:36] <hans_> binary-safe version of strcspn
[21:50:46] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com)
[21:53:23] <floatcomplex> mask should be called noodle
[21:53:31] <floatcomplex> it's not a needle because it's not strstr
[21:54:59] <hans_> hah good point
[21:55:11] <floatcomplex> const char * noodles, size_t noodle_count
[21:55:54] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[21:56:29] <floatcomplex> actually haystack should probably be void * in the function prototype
[21:57:27] <twkm> for binary data i usually use unsigned char's.
[21:57:29] <floatcomplex> (i just looked at the musl strcspn and my brain broke a little bit and i started talking about noodles)
[21:58:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:58:27] <floatcomplex> twkm: yeah unsigned char makes sense within the function, but if the prototype has void * there then it is more user friendly and closer to the related libc mem* functions
[22:00:03] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:b8be:8397:ccc3:6dc) (Quit: simon323)
[22:00:28] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:00:32] *** Quits: defjam (~eb0t@90.210.93.143) (Ping timeout: 240 seconds)
[22:01:22] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e8446-248.dhcp.inet.fi)
[22:02:08] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e8446-248.dhcp.inet.fi) (Client Quit)
[22:02:42] *** Joins: defjam (~eb0t@90.198.60.224)
[22:02:56] <fizzie> Ugh, `continue 2;` is the terriblest.
[22:03:11] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[22:03:15] <fizzie> Languages with a *sane* multi-level break/continue make it `continue <label>` instead.
[22:03:26] <topside> hans_, because multi-level continue statements arent typically supported in low level languages
[22:03:28] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[22:03:29] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[22:03:29] *** Joins: nortoh (~nortoh@user/nortoh)
[22:05:31] <topside> but as fizzie mentioned, you can just label your inner/outer loops and continue to those labels if you must
[22:05:40] <floatcomplex> fizzie: https://git.musl-libc.org/cgit/musl/tree/src/string/strcspn.c
[22:05:52] <nomagno> OOH! strcspn is basically "lazy bytewise NAND"
[22:05:53] <nomagno> that's cool
[22:06:10] *** Joins: abip20 (~abdullah@103.66.177.186)
[22:06:45] *** Joins: FrostKiwi (~FrostKiwi@user/frostkiwi)
[22:08:08] *** Joins: Akuli (~Akuli@82-203-161-22.bb.dnainternet.fi)
[22:08:35] <nomagno> I assume from the behaviour that you can use it to check a variety of things, from whether a character is in a given dictionary, to whether two strings match in a specific way
[22:09:03] *** Quits: abip20 (~abdullah@103.66.177.186) (Client Quit)
[22:09:29] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:09:30] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[22:09:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[22:10:11] <floatcomplex> i basically use it to find the possible \r or \n at the end of a line without offending mcf's sensibilities
[22:10:27] *** Quits: triv_ (ytgodenr46@morgulis.trivcraft.com) (Quit: leaving)
[22:11:06] <floatcomplex> const char * newline = strchr(line, '\r') ?: strchr(line, '\n'); is nice and const-correct, but not portable
[22:12:18] *** Joins: abip20 (~abdullah@103.66.177.186)
[22:12:51] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 268 seconds)
[22:13:20] *** Quits: neunon (~neunon@user/neunon) (Quit: ZNC 1.8.2 - https://znc.in)
[22:13:29] <floatcomplex> s/const char */const char * const/
[22:13:37] *** Joins: bruda (~bruda@172.58.140.139)
[22:14:12] <bruda> Got an EBB hotspot from boost. Yall are stuck with me now. Hehe. Until the kids use up my 35gb anyways.
[22:14:14] *** Quits: FrostKiwi (~FrostKiwi@user/frostkiwi) (Quit: Leaving)
[22:14:28] *** Joins: Viewday111 (~Viewday@user/viewday)
[22:14:51] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[22:14:52] *** Joins: neunon (~neunon@user/neunon)
[22:14:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:14:53] *** Viewday111 is now known as Viewday11
[22:15:59] *** Quits: darkstardev13 (~darkstard@50.39.114.152) (Ping timeout: 264 seconds)
[22:16:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[22:17:41] *** Quits: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (Quit: Bye!)
[22:19:40] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 265 seconds)
[22:20:08] *** Joins: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[22:23:44] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:57d1:ba2a:466c:e93f)
[22:24:33] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[22:25:49] *** Quits: iddev5 (~iddev5@2409:4062:228e:fad9:43d0:c500:5ddd:da4) (Quit: iddev5)
[22:26:52] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:29:39] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[22:30:56] *** Joins: bindu (~bindu@user/bindu)
[22:31:25] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[22:31:42] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[22:32:57] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:34:34] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[22:36:13] *** Joins: X-Scale` (~ARM@92.250.99.18)
[22:36:35] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[22:37:31] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[22:38:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 264 seconds)
[22:39:08] *** Joins: strajder (~strajder@user/strajder)
[22:39:28] *** Joins: X-Scale (~ARM@46.50.7.119)
[22:41:50] *** Quits: X-Scale` (~ARM@92.250.99.18) (Ping timeout: 256 seconds)
[22:44:51] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[22:45:51] *** Joins: chr0meice91 (~chr0meice@pool-173-61-194-175.cmdnnj.fios.verizon.net)
[22:47:43] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 250 seconds)
[22:49:34] *** Joins: pucara (~i@181.93.164.73)
[22:51:51] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:52:35] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[22:52:50] *** Joins: fentanyl (~ryan@user/sapi01)
[22:57:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:57:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d15f:a494:a911:62f8) (Ping timeout: 268 seconds)
[22:58:29] *** Joins: remavas (~Remavas@user/remavas)
[22:58:55] *** Joins: charadon (~charadon@155.138.164.183)
[23:03:12] *** Joins: mimmy (~mimmy@72.142.88.18)
[23:03:35] *** Joins: vysn (~vysn@user/vysn)
[23:03:44] *** Joins: Klinda (~superleag@user/klinda)
[23:04:33] *** Quits: alch (~alch@151.46.18.84) (Read error: Connection reset by peer)
[23:07:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[23:09:33] *** Joins: alch (~alch@151.46.79.64)
[23:10:12] *** Joins: luckyxxl (~luckyxxl@193.27.14.10)
[23:11:12] *** Joins: mimmy_ (~mimmy@37.19.213.65)
[23:11:34] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:13:54] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[23:13:56] *** Joins: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk)
[23:16:18] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[23:18:39] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[23:20:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:21:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[23:21:32] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[23:21:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[23:24:28] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[23:25:17] *** Joins: bindu (~bindu@user/bindu)
[23:25:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:26:53] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:27:07] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[23:27:44] *** Joins: cmburn (~cmburn@2601:441:4c00:67d:d333:655:39a8:230b)
[23:29:04] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[23:30:50] <cmburn> this is me just screwing around, yes i know it's pointless, but is there a way to "duplicate" a function (i.e. just the stack and static really) other than recursive calls?
[23:32:52] <bruda> Like re-running a snapshot of the execution state of a function?
[23:33:40] <bruda> I'm not one to provide any answers, just trying to make sure I understand the question is all.
[23:35:07] *** Quits: fentanyl (~ryan@user/sapi01) (Quit: leaving)
[23:35:08] *** Quits: hans_ (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[23:35:35] <cmburn> yeah, more or less, i guess like a local static to a function without having to pass args
[23:35:36] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[23:35:56] <cmburn> no real usage, but i like trying to find weird ways to mess with compilers
[23:36:16] <bruda> Heh. Messing with things is a good way to learn lol
[23:36:59] <bruda> You asked in the right channel. Though the pro's among us are usually busy but they pop in eventually.
[23:38:19] <markand> so TIL anonymous union seems to be forbidden outside of structs?
[23:38:46] <markand> aka union { foo f; bar b }; in a block scope throws an error
[23:38:46] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[23:39:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:41:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:41:47] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[23:42:05] <bruda> Some day I hope smart enough to help answer questions in here.
[23:43:20] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:43:27] <cmburn> yeah i've done a fair bit of coding in C, but it's usually in the realm of QA or in personal projects
[23:44:01] <cmburn> markand: i think the standard says they can only be members of another union/structure
[23:44:18] <bruda> Yea. Most of my coding is just educational dabbling. But I've been coding for years in various languages. C is my attempt at systems programming for a change.
[23:44:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:45:10] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[23:45:17] <bruda> Had a blast coding in Go. That was lots of fun. C is sorta fun. But some things make my brain fart and require coffee to comprehend. Heh.
[23:47:51] *** Joins: Burgundy (~yomon@86.127.194.72)
[23:48:15] *** Joins: quartz (~quartz@user/quartz)
[23:48:38] *** Joins: chr0meice91_ (~chr0meice@pool-173-61-194-175.cmdnnj.fios.verizon.net)
[23:49:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[23:50:28] <cmburn> anyone else seem to notice Copilot loses its shit when you're dealing with linked lists...
[23:51:31] *** Quits: chr0meice91 (~chr0meice@pool-173-61-194-175.cmdnnj.fios.verizon.net) (Ping timeout: 268 seconds)
[23:51:51] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com) (Ping timeout: 250 seconds)
[23:51:56] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:52:34] <floatcomplex> cmburn: there are whole generations that believe that programmers should be trusted to implement crypto but not linked lists
[23:53:09] *** Joins: Klinda (~superleag@user/klinda)
[23:53:27] <floatcomplex> but also i'm terrified at the idea of anyone modifying their coding style based on what copilot says
[23:54:51] <cmburn> it keeps trying to recommend i manually go through (no looping) each member of a potentially infinite list in one go and freezes up after the first 30 or so iterations :-/
[23:55:07] <twkm> copilot is the builtin idiotstack.
[23:56:32] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[23:56:38] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:56:52] *** Hexmind is now known as Hexmind_
[23:56:57] *** Hexmind_ is now known as Hexmind__
[23:56:59] *** Hexmind__ is now known as Hexmind
[23:57:23] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[23:58:46] <cmburn> it gets a lot right, weirdly fantastic at perl, C /C++ though... not so much
[23:59:48] <pragma-> It's kidn of hard to get Perl wrong. They say you can smash your forehead into your keyboard and produce a valid Perl program.
