[00:23:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[01:08:48] *** Joins: beach` (~user@2a01:cb19:150:3400:c6:70c3:435f:d71d)
[01:13:28] *** Quits: beach (~user@2a01:cb19:150:3400:c969:654c:71df:64a7) (Ping timeout: 268 seconds)
[01:33:01] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[01:37:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[01:42:08] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:43:45] *** Joins: aeth (~aeth@user/aeth)
[01:56:49] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:56:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[01:57:22] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:02:50] *** Joins: selwyn_ (~selwyn@user/selwyn)
[02:17:34] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[02:19:52] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[02:23:46] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:29:59] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[02:30:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:48:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[03:01:27] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[03:45:26] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:06:42] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: nyaa~)
[04:52:11] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[05:09:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:11:21] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[05:30:33] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:33:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:36:30] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[06:00:49] *** Quits: sts-q (~sts-q@212.53.219.225) (Ping timeout: 252 seconds)
[06:16:07] *** Joins: sts-q (~sts-q@91.200.108.235)
[06:22:16] *** beach` is now known as beach
[06:22:27] *** ChanServ sets mode: +o beach
[06:24:06] *** beach sets mode: -o beach
[06:43:15] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:47:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:43:44] <seok-> is there a problem if I reference function a in b and function b in a?
[07:43:53] <seok-> What happens at package load time ?
[07:44:16] <beach> Packages are defined, not loaded.
[07:44:36] <beach> Do you mean "systems"?
[07:44:47] <seok-> Maybe
[07:44:48] <seok-> Yes
[07:45:14] <beach> As long as both systems are loaded before either of the functions is executed, there is no problem. 
[07:45:39] <seok-> the two functions are in the same system
[07:45:58] <seok-> If I write a first, then b wouldn't exist at read time for it to reference
[07:46:03] <beach> But, you may indeed have package problems.  If each system defines its own package, then you can't refer to a symbol in the other package when the first system is loaded.
[07:46:04] <seok-> is there a way around this ?
[07:46:28] <beach> It doesn't matter if it exists at read time.
[07:46:35] <seok-> oh ok
[07:46:41] <beach> Common Lisp is not a static programming language.
[07:46:51] <seok-> Yes I was confused
[07:46:52] <beach> Functions can be defined and redefined at any point in time.
[07:47:16] <kagevf> CL can even have mutually recursive functions
[07:47:44] <seok-> Amazing
[07:48:32] <White_Flame> the only thing that needs to exist at read time is the package itself, else the symbol won't read properly
[07:50:20] <White_Flame> either of (defun foo::bar () ...) or (foo::bar) may occur first, and both will end up using the same symbol object instance to name the function it's using
[07:50:34] <White_Flame> the foo:: is implicit with whatever your current use-package is
[07:50:44] <White_Flame> erm, in-package
[08:21:02] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[09:20:21] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:04:12] *** Joins: sgithens_ (sid10659@id-10659.helmsley.irccloud.com)
[10:04:54] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[10:04:54] *** sgithens_ is now known as sgithens
[10:05:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:27:19] *** Joins: cranium (~cranium@user/cranium)
[10:29:55] *** Joins: makomo_ (~makomo@user/makomo)
[10:30:05] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:30:09] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[11:21:19] <CodeBitCookie[m]> <White_Flame> "also, I think this might just..." <- pjb: White_Flame: So variables are just "symbols" for bindings but the bindings themselves are references/pointers to values (which in my understanding is a lisp object after a calculation which should be a proper lisp datum)
[11:22:28] <CodeBitCookie[m]> One thing I don't get is when a variables changes in it's local binding, or when it changes what it is referencing 
[11:22:33] <CodeBitCookie[m]> So for example
[11:22:38] <beach> CodeBitCookie[m]: There is a distinction between "symbol" and "variable" because some symbols are not variables, and two different variables can have the same name (i.e., a symbol).
[11:23:29] <CodeBitCookie[m]> oh yeah sorry I wasn't clear
[11:23:52] <beach> CodeBitCookie[m]: Some operators, like SETQ do not introduce another binding, but alter the existing binding by changing the value the variable is bound ot.
[11:23:52] <CodeBitCookie[m]> so now, variables are just for us programmers to use bindings?
[11:23:54] <beach> to
[11:24:05] <beach> Some operators like LET introduce new bindings. 
[11:24:37] <CodeBitCookie[m]> for e.g, under then "Examples" Section of this: http://metamodular.com/common-lisp-semantics.html
[11:24:59] <beach> Yes, variables are not first-class objects.  And it is sometimes not clear whether two occurrences of a symbol as a variable refer to the same variable or to different variables, since there is no clear definition of "variable".
[11:25:07] <pjb> CodeBitCookie[m]: only (setf var ...) will change the binding.
[11:25:34] <pjb> CodeBitCookie[m]: (setf (other-accessor var) â€¦) will change the place referenced, not the variable.
[11:25:44] <CodeBitCookie[m]> ahhh
[11:26:14] <CodeBitCookie[m]> Thanks a lot, I think I finally understand, its not that complicated but I guess I was just over complicating it myself.
[11:27:18] <pjb> CodeBitCookie[m]: now, you could also write some degenerate place, such as (setf (double x) 42) (assert (= x 21)) that change the variable.  But this is a trick, and it makes it ambiguous on the value returned by setf which should be the last value assigned, but here we don't know if it's 42 or 21; we assign 21 as double of x, but x gets assigned 21â€¦[
[11:28:16] <pjb> Normal places forms will just designate some slot in the objects.
[11:29:12] <beach> CodeBitCookie[m]: For example: (defun fact (n) (if (zerop n) 1 (* n (fact (1- n))))) is a recursive function.  It is clear that each recursive invocation has its own binding of N, but it is not clear whether it is the same variable in each invocation or a different one.  And it doesn't matter which one it is.  The sematics will be the same.
[11:29:12] <pjb> (there's also (setf (values x y z) (values 1 2 3)) that binds the variables.  (setf (values x (car y)) (value 1 2)) binds the variable x and the car slot of the cons cell bound to y).
[11:30:07] <CodeBitCookie[m]> beach: ah I see
[11:30:27] <beach> CodeBitCookie[m]: However, for special variables, the situation is clearer.  All references to a special variable with a particular name refer to one and the same variable. 
[11:31:14] <CodeBitCookie[m]> hmmm
[11:31:26] <CodeBitCookie[m]> but I will have to try what pjb is saying. I will have to play with setf and setq in the repl
[11:31:32] <beach> ... but not necessarily to the same binding of it, obviously. 
[11:31:53] <CodeBitCookie[m]> wait what?
[11:32:06] <CodeBitCookie[m]> I think the confusion is in the term reference.
[11:32:16] <beach> CodeBitCookie[m]: Say you have (defparameter *x* 234).
[11:32:50] <CodeBitCookie[m]> reference is like a pointer to me or a pointer to a value, while you are using reference as in "reference to that variable in the code by typing the name out"
[11:32:52] <beach> Then you have (progn *x* (let ((*x* 345)) *x*))
[11:32:54] <CodeBitCookie[m]> maybe?
[11:33:04] <CodeBitCookie[m]> ok
[11:33:05] <beach> Then the first *x* refers to a different binding that the last one.
[11:33:14] <CodeBitCookie[m]> yes
[11:33:29] <CodeBitCookie[m]> oh
[11:33:39] <CodeBitCookie[m]> but what is a "reference"
[11:33:47] <beach> Right, I was using "reference" more generally here.
[11:34:04] <beach> The technical term "reference" is the same as a "pointer".
[11:34:13] <CodeBitCookie[m]> Oh, I thing I understand now.
[11:34:17] <CodeBitCookie[m]> think*
[11:34:20] <CodeBitCookie[m]> lol
[11:34:24] <beach> Except that "pointer" is usually used to mean something that is defined in the language. 
[11:34:37] <CodeBitCookie[m]> ðŸ™ƒ
[11:35:12] <beach> So defined like that, Common Lisp doesn't have "pointers", but every Common Lisp datum is a reference, semantically speaking.
[11:35:56] <CodeBitCookie[m]> Every? Aren't some ints and fixnums just copied?
[11:36:02] <beach> *sigh*
[11:36:07] <CodeBitCookie[m]> oops
[11:36:17] <CodeBitCookie[m]> I mean... thats what Practical Common Lisp said?
[11:36:23] <CodeBitCookie[m]> in its footnote?
[11:36:31] <beach> You can safely ignore such exceptions.  There is no test you can do to check how a fixnum is implemented.
[11:36:43] <CodeBitCookie[m]> Ohhh, its implementation specific?
[11:36:48] <beach> yes.
[11:36:56] <CodeBitCookie[m]> and nobody cares anyway as it makes no difference?
[11:37:17] <CodeBitCookie[m]> except for performance in some really really rare cases?
[11:37:26] <beach> This information should be reserved for people who worry that the semantics are implemented in the most direct and stupid way.
[11:37:37] <beach> so they worry about performance.
[11:37:44] <beach> Exactly.
[11:38:01] <CodeBitCookie[m]> Yayyyy
[11:38:10] <beach> That's why I discourage people from bringing that up when talking to relative newbies like you.
[11:38:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:01] <beach> And in fact, my plans for a particular Common Lisp implementation would indeed implement the semantics in the most stupid way. :)
[11:39:33] <beach> So then, not only can I say that the information you are given is implementation specific, but also false for some implementations. :)
[11:40:24] <CodeBitCookie[m]> Ah, Very good point
[11:45:06] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:50:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:51:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:55:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[12:02:40] <beach> Let me check what the Common Lisp HyperSpec says about MOST-POSITIVE-FIXNUM.
[12:04:21] <beach> No restrictions on fixnums.  So I guess I'll make it (expt 2 100000) or something like that.
[12:04:30] <beach> ... just because I can.
[12:05:12] <beach> Oh, and the standard doesn't require symmetry between positive and negativce fixnums.
[12:05:31] <beach> So I can make it -1 to (expt 2 100000)
[12:14:13] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:20:08] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[12:20:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:24:50] <pjb> beach: it must contain at least (signed-byte 16)
[12:25:01] <pjb> so -32768 .. (expt 2 100000)
[12:26:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:26:42] <pjb> (typep (- most-negative-fixnum) 'fixnum) #| --> nil |#  in general (2-complement)
[12:36:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:38:00] <beach> Oh, right.  Thanks.
[12:40:23] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[13:05:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[13:08:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:09:36] <beach> pjb: It is an amusing pass-time to imagine ways in which BOCL could interpret the standard in extreme ways, just to mess with the people who assume things that aren't true. :)
[13:10:17] <beach> It would be silly to actually implement those ways, of course. 
[13:10:43] <beach> ... like deleting all files when a non-array is given to AREF. 
[13:14:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[13:22:05] <mfiano> I vote for bogosorted #'sort
[13:46:43] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:48:22] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:49:08] *** Joins: makomo_ (~makomo@user/makomo)
[14:20:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:26:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[14:34:03] <pjb> beach: but it could display https://termbin.com/p145
[14:52:18] <rotateq> cool ASCII graphic
[14:58:45] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[15:00:27] *** Joins: makomo_ (~makomo@user/makomo)
[15:18:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:23:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[15:34:19] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[17:19:11] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:28:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:30:28] *** Joins: lisp123_ (~lisp123@45.86.202.12)
[17:33:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[17:38:06] <beach> pjb: Wow, nice!
[17:58:34] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[18:07:08] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:3cb1:c1ee:97df:becb)
[18:11:28] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:12:25] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:3cb1:c1ee:97df:becb) (Quit: Konversation terminated!)
[18:13:44] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:d5a8:feca:7e29:db08)
[18:19:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:19:49] *** Quits: lisp123_ (~lisp123@45.86.202.12) (Remote host closed the connection)
[18:27:47] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[18:27:49] *** Joins: Josh_2 (~user@37.25.47.130)
[18:37:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:37:53] *** Joins: thrig (~thrig@65.113.153.50)
[18:38:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:39:34] *** Joins: aeth (~aeth@user/aeth)
[18:39:39] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:44:36] *** Joins: makomo_ (~makomo@user/makomo)
[18:50:01] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[18:57:13] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[19:00:07] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:10:09] *** Joins: makomo (~makomo@user/makomo)
[19:11:30] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:16:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:23:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[20:25:43] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:27:13] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:30:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:31:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:36:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[20:37:30] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:52:52] <hendursaga> How do I make it so it doesn't consume if it's true? (format nil "~:[N/A~;~,2f~]" 3.149)
[20:55:23] <hendursaga> I'm looking through the HyperSpec but I can't remember what I did before to do this..
[20:56:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:59:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:59:51] <hendursaga> OK, found it, it's ~:*
[21:05:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:15:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[21:27:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:32:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:34:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:36:35] *** Joins: aeth (~aeth@user/aeth)
[21:37:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[21:44:04] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[21:48:03] *** Quits: thrig (~thrig@65.113.153.50) (Quit: leaving)
[21:48:26] *** Joins: thrig (~thrig@65.113.153.50)
[22:08:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:15:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:32:01] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:39:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:43:35] <pjb> hendursaga: (loop for item in '(3.14 nil) collect (format nil "~:[N/A~;~:* not consumed ~] ~A" item 'rest)) #| --> (" not consumed  3.14" "N/A rest") |# 
[22:44:18] <pjb> hendursaga: note how you need something more when nil.  
[22:44:46] <pjb> hendursaga: (loop for item in '(3.14 nil) collect (format nil "~@[consumed: ~A~] ~A" item 'rest)) #| --> ("consumed: 3.14 rest" " rest") |# 
[22:46:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:07:11] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[23:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:17:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:17:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:20:19] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:35:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[23:49:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
