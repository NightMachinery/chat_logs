[00:08:50] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[00:16:58] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:33:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:33:33] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:45:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[00:46:53] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:47:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:54:49] *** Joins: seninha (~seninha@user/seninha)
[00:58:08] *** Quits: Darkcoal (~user@167.86.178.227) (Quit: Darkcoal)
[01:13:00] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[01:13:33] *** Joins: m455 (~m455@user/m455)
[01:16:55] *** Quits: m455 (~m455@user/m455) (Client Quit)
[01:17:49] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:c605:728b:f9f0:455e)
[01:24:59] *** Joins: m455 (~m455@user/m455)
[01:29:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[01:31:30] *** Joins: badkins (~badkins@136.56.92.199)
[01:34:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:36:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:47:58] *** Joins: sham1_ (~sham1@212-146-44-107.aboa.net)
[01:48:32] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 240 seconds)
[01:52:57] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:53:27] *** Joins: badkins (~badkins@136.56.92.199)
[01:58:04] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[02:01:23] *** Joins: badkins (~badkins@136.56.92.199)
[02:10:24] <daviid> fwiw, geiser [for emacs users] supports a few scheme impl.
[02:11:30] *** sham1_ is now known as sham1
[02:15:40] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[02:22:28] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[02:24:59] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026) (Ping timeout: 256 seconds)
[02:31:37] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Ping timeout: 240 seconds)
[02:36:29] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:c605:728b:f9f0:455e) (Quit: Konversation terminated!)
[02:42:16] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[03:05:27] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:26:31] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[03:29:14] *** Quits: X-Scale (~ARM@83.223.224.94) (Ping timeout: 256 seconds)
[03:29:15] *** X-Scale` is now known as X-Scale
[03:38:14] *** Joins: badkins (~badkins@136.56.92.199)
[03:39:43] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[03:42:03] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:59:15] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:01:55] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:03:38] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[04:08:32] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[04:09:38] <Zipheir> Re: flexvectors, I think we can do better with a non-mutative functional structure: https://srfi.schemers.org/srfi-101/srfi-101.html
[04:10:22] <Zipheir> That's in R7RS-large, actually.
[04:15:38] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Excess Flood)
[04:15:48] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:16:03] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Client Quit)
[04:16:49] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:17:30] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:22:46] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:32:22] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[04:33:43] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:43:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:45:34] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[04:46:07] *** Joins: badkins (~badkins@136.56.92.199)
[04:47:20] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:50:06] *** Joins: masoudd (~masoudd@user/masoudd)
[04:50:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:57:54] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[04:58:50] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:09:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:12:19] *** Joins: badkins (~badkins@136.56.92.199)
[05:13:17] <mdhughes> Why would you need flexvector if you can't mutate it anyway? The whole point of flex is that you're adding & modifying stuff!
[05:14:26] <Zipheir> Would you prefer set-car! over cons, then?
[05:15:01] <mdhughes> Well, we do need both, otherwise you can't build structures.
[05:15:46] <Zipheir> You can *always* update a data structure immutably; it's just that some structures are optimized for it.
[05:15:46] <mdhughes> Or you can just copy with one minor change over and over, which is great for gc when you've got a few gig data set.
[05:16:26] <Zipheir> C'mon, you know that a huge amount of work on immutable structures is to reuse as much as possible.
[05:17:26] <Zipheir> Maybe cons returns a new list, but I can more or less assume that the entire list hasn't been copied.  It's the same for any good immutable structure.
[05:18:03] <mdhughes> I do, but it's often not possible. A simple hashtable, you can reuse the key-value-hash tries, but the entire spine has to be regenerated on every write if it's immutable.
[05:18:38] <mdhughes> RB trees are worse, the entire thing may be rebalanced by a write.
[05:19:40] <mdhughes> Meanwhile, a growable vector only has to realloc when you go past the end of the buffer.
[05:22:36] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 250 seconds)
[05:23:01] <Zipheir> Well, this is why immutable hashtables are rather rare.  Hash-mapped trees are better suited to "pure" update.
[05:23:25] <Zipheir> And the situation with pure-update R-B trees is not so bad; rebalancing is generally fast.
[05:24:50] <Zipheir> Okasaki's implementation of R-B trees guarantees O(log n) for all operations, whether or not rebalancing is involved.
[05:25:28] <Zipheir> (_Pure Functional Data Structures_, Cambridge 1998)
[05:28:00] <Zipheir> All of which is not to say there aren't some serious challenges for immutable data.
[05:29:06] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[05:32:35] <Zipheir> I think a lot of people get the kind of CS education that says "For job X, use hash tables.  For job Y, use arrays. ..."; as such, there's some cargo cult thinking about what structures work for what.
[05:33:49] <mdhughes> I do need to see if I can get SRFI 214 into Chez, it's not in thunderchez. Or just adapt my mutable stringbuffer into a vector equivalent.
[05:34:13] <Zipheir> Looking at it more abstractly, in terms of what operations you want and what complexity you expect, there's a lot more out there.  Hash-tables, e.g., are *one* way to implement an abstract dictionary type.
[05:34:37] <mdhughes> But we do generally want linear-search/update, which is hard or slow in a lot of alternative structures.
[05:39:42] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:41:07] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:41:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:42:27] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:47:36] *** Joins: frost (~frost@user/frost)
[05:48:06] *** Joins: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net)
[06:16:56] *** Joins: livoreno (~livoreno@user/notzmv)
[06:22:22] *** Joins: aeth_ (~aeth@user/aeth)
[06:25:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:26:56] *** aeth_ is now known as aeth
[06:28:13] *** Joins: badkins (~badkins@136.56.92.199)
[06:33:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[06:33:58] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:46:23] <Zipheir> Did anyone ever do a finger tree sequence implementation for Scheme?
[06:51:45] <edgar-rft> I don't finger trees, at least not in public
[06:52:11] <s-liao> Yes. What is " a finger tree sequence"?
[06:52:42] <edgar-rft> if you finger a tree several times in a row
[06:53:39] <Zipheir> It's like a list, but with O(1) head, O(1) last, O(log n) append, and O(1) length.
[06:53:39] <s-liao> http://www.staff.city.ac.uk/~ross/papers/FingerTree.pdf
[06:53:53] <Zipheir> For many purposes they're strictly better than lists.
[06:53:59] <Zipheir> This is clearer: https://www.researchgate.net/publication/220676477_Finger_trees_A_simple_general-purpose_data_structure
[06:54:23] <Zipheir> I found the original Hinze & Paterson paper a bit hard to understand.
[06:54:41] <Zipheir> Oops, that's not the link I wanted.
[06:54:58] <Zipheir> This is the clear explanation: https://dl.acm.org/doi/10.1145/3406088.3409026
[06:55:14] <edgar-rft> I found this on wikipedia -> https://en.wikipedia.org/wiki/Finger_tree
[06:55:48] <Zipheir> They're pretty awesome.  We should have them.
[06:55:59] *** Joins: badkins (~badkins@136.56.92.199)
[06:56:27] <Zipheir> edgar-rft: Yeah, that's it.
[06:57:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:58:42] <Zipheir> Not a very clear Wikipedia page, either. :-(
[06:59:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:59:49] <s-liao> https://github.com/Sciss/FingerTree
[07:00:32] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[07:00:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:01:42] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[07:02:12] <edgar-rft> Zipheir: Wikipedia is written by amateurs, not by sientific experts, but the images show what is meant.
[07:02:27] *** Joins: aeth (~aeth@user/aeth)
[07:04:07] <Zipheir> s-liao: OK, Scala, that's not too far off.
[07:04:07] *** Joins: badkins (~badkins@136.56.92.199)
[07:04:23] <Zipheir> They're the basis of Haskell's Seq type (Data.Sequence).
[07:04:49] <s-liao> https://stackoverflow.com/questions/8897515/finger-tree-data-sequence-vs-rope-data-rope-haskell-or-in-general
[07:05:55] <s-liao> Are you planning to implement it in the chicken implementation?
[07:06:07] <s-liao> Zipheir
[07:06:50] <Zipheir> Maybe?
[07:06:58] *** Joins: madage (~madage@user/madage)
[07:07:04] <s-liao> Okay.
[07:07:10] <Zipheir> You could use finger trees to implement https://wiki.call-cc.org/eggref/4/srfi-101
[07:07:42] <Zipheir> "Random-access lists"  That egg uses Okasaki's binary rlist structure.
[07:07:51] <Zipheir> But finger trees might be even better.
[07:08:53] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[07:09:34] <s-liao> this one https://wiki.call-cc.org/eggref/5/rb-tree?
[07:09:40] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:10:37] <Zipheir> Those are trees, so they are more like https://srfi.schemers.org/srfi-146/
[07:11:03] <Zipheir> Not as good for sequences.
[07:12:05] <s-liao> https://apfelmus.nfshost.com/articles/monoid-fingertree.html
[07:12:13] <Zipheir> Hmm, I forgot about ropes.  So many structures!
[07:13:09] <Zipheir> s-liao: Looks very nice!
[07:14:54] *** Joins: masoudd (~masoudd@user/masoudd)
[07:17:00] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:24:55] <Zipheir> s-liao: I found a Scheme finger tree implementation I started back in 2020 http://ix.io/3On7
[07:25:26] <Zipheir> It's pretty bare-bones, but it looks OK.
[07:26:52] <s-liao> Zipheir yes
[07:26:54] <s-liao> Sequences on top of finger-trees
[07:27:27] <s-liao> Which implementation do you find out it?
[07:27:35] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[07:28:55] <Zipheir> s-liao: Which implementation?  I'm not sure what you mean.  I based that on the Claessen 2020 paper.
[07:28:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[07:29:00] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:29:42] <s-liao> I mean that can we load into Chicken or Chibi?
[07:32:25] <Zipheir> CHICKEN works for that code.  You need Oleg's pmatch, too: http://ix.io/2fav
[07:32:47] <Zipheir> Otherwise it has no dependencies.
[07:34:05] <s-liao> Okay
[07:34:08] <Zipheir> I'll switch it to standard-ish Scheme pattern matching if I keep working on it.
[07:35:07] <Zipheir> So far, it only provides cons, car and cdr.  Lots to do.
[07:40:26] <s-liao> the code of Oleg Kiselyov is quite old. last time, I tried a few test case in ssax package. What I found is that it is Gambit 3.0.
[07:40:37] <s-liao> But it is quite strong.
[07:41:41] <Zipheir> Yeah, he's a wizard.
[07:52:36] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:00:08] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:00:32] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:03:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:31:01] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:31:20] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:32:10] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 260 seconds)
[08:45:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:08:12] *** Quits: karlosz (~karlosz@47.151.136.69) (*.net *.split)
[09:08:12] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[09:08:12] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (*.net *.split)
[09:08:12] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (*.net *.split)
[09:08:12] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (*.net *.split)
[09:08:12] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[09:08:12] *** Quits: sdu (~sidu@185.44.146.61) (*.net *.split)
[09:08:12] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[09:08:12] *** Quits: Lysandros (~Lysandros@user/lysandros) (*.net *.split)
[09:08:12] *** Quits: taw10 (~taw@46.235.227.49) (*.net *.split)
[09:08:12] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[09:08:12] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[09:08:12] *** Quits: ASau (~user@lmpc.drb.insel.de) (*.net *.split)
[09:08:13] *** Quits: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com) (*.net *.split)
[09:08:13] *** Quits: aoh (~aki@haltp.org) (*.net *.split)
[09:08:13] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:08:13] *** Quits: lazr_ (~lazr@45.76.248.123) (*.net *.split)
[09:08:13] *** Quits: Zipheir (~wcm@98.4.178.27) (*.net *.split)
[09:08:13] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:08:13] *** Quits: tristero (~nobody@user/tristero) (*.net *.split)
[09:08:13] *** Quits: fgudin_ (~fgudin@sdf-eu.org) (*.net *.split)
[09:08:13] *** Quits: wingo (~wingo@li270-233.members.linode.com) (*.net *.split)
[09:08:13] *** Quits: wheeler (~josh@useirc.net) (*.net *.split)
[09:08:13] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (*.net *.split)
[09:08:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[09:08:13] *** Quits: livoreno (~livoreno@user/notzmv) (*.net *.split)
[09:08:14] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (*.net *.split)
[09:08:14] *** Quits: flatwhatson (~flatwhats@220.253.110.95) (*.net *.split)
[09:08:14] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (*.net *.split)
[09:08:14] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:08:14] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (*.net *.split)
[09:08:14] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[09:08:14] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (*.net *.split)
[09:08:14] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (*.net *.split)
[09:08:14] *** Quits: mdhughes (~mdhughes@user/mdhughes) (*.net *.split)
[09:08:14] *** Quits: evdubs (~evdubs@user/evdubs) (*.net *.split)
[09:08:14] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[09:08:14] *** Quits: chris2 (cky@meredith.poweredbytaylor.com) (*.net *.split)
[09:08:14] *** Quits: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f) (*.net *.split)
[09:08:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:08:15] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[09:08:15] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[09:08:15] *** Quits: akarle (~akarle@user/akarle) (*.net *.split)
[09:08:15] *** Quits: nmeum (~nmeum@barium.8pit.net) (*.net *.split)
[09:08:15] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[09:08:15] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[09:08:15] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[09:08:15] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (*.net *.split)
[09:08:15] *** Quits: j0ni (c79e08d4b1@2604:bf00:561:2000::2a) (*.net *.split)
[09:08:15] *** Quits: Kooda (~kooda@natsu.upyum.com) (*.net *.split)
[09:08:15] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:08:15] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: light (~light@user/light) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: Andrew (andrew@andrewyu.org) (*.net *.split)
[09:08:15] *** Quits: wxallowed (~d4@151.51.155.155) (*.net *.split)
[09:08:15] *** Quits: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10) (*.net *.split)
[09:08:15] *** Quits: Keele_ (~keele@91-158-68-128.elisa-laajakaista.fi) (*.net *.split)
[09:08:15] *** Quits: dbohdan (~dbohdan@user/dbohdan) (*.net *.split)
[09:08:16] *** Quits: malaclyps (~mala@user/malaclyps) (*.net *.split)
[09:08:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:08:16] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[09:08:16] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[09:08:16] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[09:08:16] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[09:08:16] *** Quits: linen (~user@S0106a84e3f501ab3.ed.shawcable.net) (*.net *.split)
[09:08:16] *** Quits: rudybot_ (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[09:08:16] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[09:08:16] *** Quits: amoe (~amoe@visarend.solasistim.net) (*.net *.split)
[09:08:16] *** Quits: apg (~apg@97-120-110-243.ptld.qwest.net) (*.net *.split)
[09:08:16] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (*.net *.split)
[09:08:16] *** Quits: Menchers (Menchers@user/menchers) (*.net *.split)
[09:08:16] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: DeeEff (~DeeEff@user/deeeff) (*.net *.split)
[09:08:17] *** Quits: em (~em@user/emnode) (*.net *.split)
[09:08:17] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[09:08:17] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:08:17] *** Quits: gabot (~gabot@lambda.ccs.neu.edu) (*.net *.split)
[09:08:17] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: samth (sid14502@id-14502.ilkley.irccloud.com) (*.net *.split)
[09:11:51] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[09:14:18] *** Joins: m455 (~m455@user/m455)
[09:16:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:21:14] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:21:14] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[09:21:14] *** Joins: psf (~pi@206.55.172.18)
[09:21:14] *** Joins: em (~em@user/emnode)
[09:21:14] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[09:21:14] *** Joins: deltab (~deltab@user/deltab)
[09:21:14] *** Joins: linen (~user@S0106a84e3f501ab3.ed.shawcable.net)
[09:21:14] *** Joins: rudybot_ (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[09:21:14] *** Joins: eMBee (~eMBee@realss.com)
[09:21:14] *** Joins: amoe (~amoe@visarend.solasistim.net)
[09:21:14] *** Joins: apg (~apg@97-120-110-243.ptld.qwest.net)
[09:21:14] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[09:21:14] *** Joins: Menchers (Menchers@user/menchers)
[09:21:14] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[09:21:14] *** Joins: DeeEff (~DeeEff@user/deeeff)
[09:21:14] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[09:21:14] *** Joins: ns12 (~ns12@user/ns12)
[09:22:18] <rudybot_> la la la
[09:22:45] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:22:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:22:45] *** Joins: livoreno (~livoreno@user/notzmv)
[09:22:45] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:22:45] *** Joins: flatwhatson (~flatwhats@220.253.110.95)
[09:22:45] *** Joins: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6)
[09:22:45] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:45] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[09:22:45] *** Joins: robin (~robin@user/terpri)
[09:22:45] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[09:22:45] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[09:22:45] *** Joins: evdubs (~evdubs@user/evdubs)
[09:22:45] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[09:22:45] *** Joins: buhman (sid411355@user/buhman)
[09:22:45] *** Joins: chris2 (cky@meredith.poweredbytaylor.com)
[09:22:45] *** Joins: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com)
[09:22:45] *** Joins: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f)
[09:22:45] *** Joins: Andrew (andrew@andrewyu.org)
[09:22:45] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[09:22:45] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[09:22:45] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:22:45] *** Joins: elflng (~elflng@5.28.137.182)
[09:22:45] *** Joins: akarle (~akarle@user/akarle)
[09:22:45] *** Joins: nmeum (~nmeum@barium.8pit.net)
[09:22:45] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[09:22:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[09:22:45] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[09:22:45] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[09:22:45] *** Joins: j0ni (c79e08d4b1@2604:bf00:561:2000::2a)
[09:22:45] *** Joins: Kooda (~kooda@natsu.upyum.com)
[09:22:45] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:22:45] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[09:22:45] *** Joins: light (~light@user/light)
[09:22:45] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:45] *** Joins: wxallowed (~d4@151.51.155.155)
[09:22:45] *** Joins: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10)
[09:22:45] *** Joins: Keele_ (~keele@91-158-68-128.elisa-laajakaista.fi)
[09:22:45] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[09:22:45] *** Joins: malaclyps (~mala@user/malaclyps)
[09:23:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:23:35] *** Joins: masoudd (~masoudd@user/masoudd)
[09:23:35] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[09:23:35] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[09:23:35] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[09:23:35] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[09:23:35] *** Joins: sdu (~sidu@185.44.146.61)
[09:23:35] *** Joins: Lysandros (~Lysandros@user/lysandros)
[09:23:35] *** Joins: taw10 (~taw@46.235.227.49)
[09:23:35] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[09:23:35] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[09:23:35] *** Joins: ASau (~user@lmpc.drb.insel.de)
[09:23:35] *** Joins: aoh (~aki@haltp.org)
[09:23:35] *** Joins: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com)
[09:23:35] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[09:23:35] *** Joins: lazr_ (~lazr@45.76.248.123)
[09:23:35] *** Joins: Zipheir (~wcm@98.4.178.27)
[09:23:35] *** Joins: amk (~amk@109.255.169.126)
[09:23:35] *** Joins: wheeler (~josh@useirc.net)
[09:23:35] *** Joins: tristero (~nobody@user/tristero)
[09:23:35] *** Joins: fgudin_ (~fgudin@sdf-eu.org)
[09:23:35] *** Joins: wingo (~wingo@li270-233.members.linode.com)
[09:24:51] *** Joins: gabot (~gabot@lambda.ccs.neu.edu)
[09:24:51] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[09:24:51] *** Joins: samth (sid14502@id-14502.ilkley.irccloud.com)
[09:25:21] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[09:25:23] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[09:27:15] *** Joins: madage (~madage@user/madage)
[09:28:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:28:51] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[09:29:16] *** Joins: m455 (~m455@user/m455)
[09:53:04] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:53:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:56:36] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:08:48] *** Joins: notzmv (~zmv@user/notzmv)
[10:16:24] <ns12> Is rudybot_ really a bot?
[10:27:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[10:32:38] *** Joins: thevishy (~Nishant@2405:201:f005:c007:3c07:8d1a:dd0:be31)
[10:40:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:52:49] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[10:55:46] <sham1> Finger trees are nice, but having some non-functional data structures in the language makes sense, when one wants the perf characteristics
[10:56:42] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[11:37:37] *** Joins: frost (~frost@user/frost)
[11:39:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:43:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:45:26] *** Quits: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[11:45:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:46:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:14:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:16:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:42:40] *** Joins: civodul (~user@guix/contributor/civodul)
[12:46:03] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[12:55:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:55:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:57:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:09:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:11:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:21:28] *** Joins: frost61 (~frost@user/frost)
[13:32:46] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[13:38:24] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 268 seconds)
[13:45:57] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[13:54:19] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[14:02:06] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:07:03] *** Joins: daviid (~user@179.210.52.91)
[14:12:01] *** Joins: seninha (~seninha@user/seninha)
[14:13:11] *** Quits: frost61 (~frost@user/frost) (Ping timeout: 250 seconds)
[14:16:42] *** Joins: shakdwipeea (~akash@49.207.203.250)
[14:26:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:28:46] <ns12> Do Schemers dream of Lisp machines as much as the Common Lispers do?
[14:33:22] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[14:34:44] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[14:35:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:01] *** Quits: shakdwipeea (~akash@49.207.203.250) (Ping timeout: 256 seconds)
[14:49:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:51:36] <ecraven> some do ;)
[14:55:32] *** Quits: dTal (quassel@dragonbox/wizzard/dtal) (Ping timeout: 240 seconds)
[14:56:20] <ns12> But most Scheme implementations have less "interactivity" than Common Lisp implementations. Besides, there has never been any "Scheme machines". Why would a Schemer want a Lisp machine, when it is not Scheme?
[14:57:13] *** Joins: dTal (~quassel@dragonbox/wizzard/dtal)
[14:58:16] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[15:02:16] <ecraven> ns12: MIT/GNU Scheme ran on actual hardware. There's not much information around on them, just a few papers :-/
[15:03:13] <ns12> Wasn't that during the time of R0RS, R1RS, or R2RS?
[15:03:25] <ecraven> middle of the 80s, I think
[15:04:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:06:58] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Quit: Darkcoal)
[15:07:44] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[15:09:51] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[15:10:24] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Client Quit)
[15:10:41] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494)
[15:11:10] <dTal> #scheme I'm losing my mind
[15:11:18] <dTal> (define (expo n e) (if (= e 0) 1 (expo n (- e 1))))
[15:11:42] <dTal> why does this always return 1?
[15:12:31] <dTal> never mind
[15:12:48] <dTal> why is it that I always have to humiliate myself before seeing the obvious answer
[15:17:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:19:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:23:18] <sham1> Nothing humiliating about it
[15:23:28] <sham1> Mistakes happen
[15:23:29] <_________> dTal: don't worry, rubber duck debugging is valid problem solving method, even if in your case the rubber duck was irc ;)
[15:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:24:46] <sham1> Rubber IRC
[15:26:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:32:31] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[15:41:50] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:955:5d45:ceb5:e494) (Ping timeout: 250 seconds)
[15:42:43] *** Joins: frost (~frost@user/frost)
[15:43:59] *** Joins: Darkcoal (~user@167.86.178.227)
[15:44:53] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[15:47:54] *** Joins: akash_ (~akash@49.207.203.250)
[15:53:05] *** Quits: Darkcoal (~user@167.86.178.227) (Quit: Darkcoal)
[15:55:53] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[15:57:33] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[16:01:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:10:37] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[16:12:51] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:15:16] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:22:42] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:35:42] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[16:35:43] *** Joins: TCZ (~tcz@91.150.178.124)
[16:39:25] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[16:40:07] *** Joins: seninha (~seninha@user/seninha)
[16:40:26] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[16:40:49] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[16:44:03] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[16:59:29] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:05:53] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:bf6:c4f3:e6d3:935c)
[17:23:38] *** Joins: badkins (~badkins@136.56.92.199)
[17:27:54] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[17:33:25] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:bf6:c4f3:e6d3:935c) (Quit: Client closed)
[17:33:34] *** Joins: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de)
[17:33:53] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[17:47:00] <leah2> is there a lispy language that doesn't use exceptions/conditions but something like Either/Result instead?
[17:50:37] <sham1> Carp, mayhaps
[17:51:25] <sham1> Although you can make like Go and return multiple values where the first one is "did the operation succeed"
[17:51:51] <sham1> Not sure if that's a thing one can do in Carp necessarily but it can be done in both CL and Scheme
[17:54:43] <jcowan> Carp is only Lispy in its syntax.
[17:55:17] <sham1> That's true, although it wasn't specified just how lispy is lispy enough
[17:56:14] <jcowan> it reminds me of Tinylisp, which was Fortran with Lisp syntax and was usad as the input to a parallalizer.  Using Tinylisp meant not having to write a Fortran parser.
[17:56:41] <leah2> Carp, i forgot about that. thanks
[17:56:55] <leah2> i just think if you had some do-style macro programming with Result would also be quite nice
[17:57:12] <sham1> (-> â€¦)
[17:58:29] <sham1> Although I don't really see how much benefit there is for having monadic code in a Lisp. Carp at least would have the excuse of being essentially a batch language but with s-expressions
[18:00:22] <leah2> i wonder if Result is less popular in dynamically typed languages because it's easier to get wrong
[18:05:52] <wasamasa> why would you deal with results in a first place?
[18:06:10] <wasamasa> it's not like a dynamically typed language is subjected to a type system encouraging such stunts
[18:06:29] <wasamasa> there needs to be a compelling advantage to use them
[18:06:40] <wasamasa> such as having a monadic parser combinator as a result
[18:09:06] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[18:16:01] <aeth> why did you assume dynamically typed? there's Typed Racket, some estoeric (ab)uses of Common Lisp, and a bunch of mini-languages on top of other Lisps, especially CL (e.g. Coalton and Shen)
[18:16:07] <aeth> just off of the top of my head
[18:17:15] <leah2> wasamasa: in practice, may things fail or succeed
[18:17:44] <leah2> and instead of throwing an exception on failure, it may be nicer to just work with values
[18:17:58] *** Joins: badkins (~badkins@136.56.92.199)
[18:19:14] <wasamasa> I mean, the idea of exceptions is that they're exceptional
[18:19:31] <wasamasa> instead of handling everything that may raise an error individually, you handle the error in one place
[18:19:38] <wasamasa> convenient stuff, until it isn't
[18:21:09] <leah2> in practice people just forget to do it and paper over it at the end :p
[18:21:22] <wasamasa> even lazier, yes
[18:22:10] <wasamasa> so, a compelling advantage why you'd instead want to check every failing case with monadic syntax, hm
[18:22:22] <wasamasa> it might be slightly less painful than C-style error handling :D
[18:23:22] <leah2> i mean many of these new low-level languages have a result type, either explicitly or built-in. say rust, zig, etc
[18:23:42] <leah2> and lisps certainly can do the syntactic sugar to make them convenient to use
[18:23:58] <sjamaan> Presumably those languages do it because you can't just unwind the stack like with an exception
[18:24:14] <sjamaan> You might need to do resource deallocation before passing on the error
[18:24:27] <wasamasa> yeah, C's way to handle a finally-like construct is terrible
[18:24:33] <wasamasa> a goto
[18:24:34] <sjamaan> I don't really see why a GC'ed language would need it
[18:24:55] <leah2> many ocaml libs also move to it
[18:25:02] <jcowan> But SRFI 189 is very new and I don't think most Lispars are convinced of its merits, which is why there's a whole section concerned with translating between Mayba/Either and other protocols.
[18:25:49] <wasamasa> the only reason I can come up with, other than being subjected to a statically typed language, is to prove that all exceptional situations and errors are handled
[18:26:02] <wasamasa> this might be useful if you compile your lisp to a language where failure is not an option
[18:26:18] <sjamaan> Java does that in a different way IIRC
[18:26:25] <sjamaan> There's a way to indicate what exceptions are thrown
[18:26:28] <wasamasa> right, java has checked exceptions and people absolutely hate them
[18:26:31] <leah2> well java had checked exceptions but they kind of got rid of them
[18:26:34] <sjamaan> Exactly
[18:27:02] <wasamasa> ada has varying degrees of proving that you're not shooting yourself in the foot
[18:27:03] <sjamaan> They're a total pain because you have to explicitly add new exception types even if you don't care in middleware, for example
[18:27:26] <wasamasa> there are special DSLs/dialects for increasingly difficult tasks, such as writing cryptography code
[18:27:42] <wasamasa> imagine a language that allowed you to prove your code executes in constant time
[18:27:47] <wasamasa> or doesn't allocate memory
[18:28:02] <gwatt> sjamaan: or you get lazy and make everything extend RuntimeException which doesn't require "throws ___" in the method prototype
[18:28:10] <wasamasa> or only uses a specified amount of memory
[18:28:17] <wasamasa> uclisp :P
[18:29:13] <wasamasa> or other time guarantees, like if you're writing algo trading code for some financial exchange
[18:29:33] <wasamasa> or bounded loops when executing your code in the kernel
[18:30:02] <wasamasa> or something that's not quite turing complete for security reasons
[18:49:02] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[18:49:53] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:50:17] *** sudden is now known as Guest6340
[18:53:41] *** Joins: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80)
[18:58:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac)
[18:59:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:00:55] *** Quits: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80) (Ping timeout: 250 seconds)
[19:01:31] *** Quits: thevishy (~Nishant@2405:201:f005:c007:3c07:8d1a:dd0:be31) (Quit: Leaving)
[19:01:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[19:04:39] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[19:04:56] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:06:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:09:06] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[19:09:49] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[19:09:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b)
[19:12:13] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac) (Ping timeout: 240 seconds)
[19:23:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65)
[19:26:26] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b) (Ping timeout: 260 seconds)
[19:35:18] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:bf6:c4f3:e6d3:935c)
[19:38:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:39:21] *** Quits: akash_ (~akash@49.207.203.250) (Quit: Leaving)
[19:55:34] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[19:57:51] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[20:00:17] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:05:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d)
[20:05:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d) (Changing host)
[20:05:04] *** Joins: skapata (~Skapata@user/skapata)
[20:08:51] *** Joins: mason (~mason@redhat/mason)
[20:40:34] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:45:39] <bsima> leah2: toccatta uses only Maybe/Result, no booleans http://www.toccata.io/2017/10/No-Booleans.html
[20:51:35] <bsima> imo 'nil' in Clojure is functionally the same as 'Nothing' in Haskell so its a wash
[20:56:41] <Zipheir> Decidables are a strict upgrade to booleans (and to Maybe, since Nothing is not witness-generating): https://plfa.github.io/Decidable/
[21:00:01] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[21:02:23] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:34c8:da42:162b:99f5)
[21:05:30] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[21:05:55] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:10:20] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:10:52] *** Joins: badkins (~badkins@136.56.92.199)
[21:11:59] <mdhughes> failure is always an option, if only by crashing/shutting off the machine.
[21:12:21] <sham1> Halt and Catch Fire
[21:13:54] <mdhughes> Scheme/LISPs have too many intermediate steps to make manual error handling practical. In ObjC, you have to check RC and maybe log **error after most operations, because exceptions are always (in an application, not system services) fatal.
[21:13:59] <aeth> technically speaking, everything fails eventually.
[21:15:29] <mdhughes> But if you nested up a bunch of functions and somewhere down inside it errors, you have to pass it all the way up. Scheme doesn't even *have* call-by-address to make that plausible. Have to use a box? Ick.
[21:15:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[21:15:34] <sham1> I suppose that depends on the definition of failure
[21:16:39] <mdhughes> Well, a shut-off machine is no longer generating errors.
[21:16:47] <mdhughes> So often that's an improvement.
[21:17:03] <mason> Much improved carbon footprint too.
[21:17:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece)
[21:18:06] <mdhughes> We can solve global warming. Just shut off all computers.
[21:20:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65) (Ping timeout: 250 seconds)
[21:24:16] <leah2> bsima: yet closure also uses exceptions, or at least the java api do
[21:24:41] <leah2> and Nothing is not enough in practice, you want errno or something ;)
[21:25:31] <Zipheir> Climate change will be solved by 5G, apparently... https://www.techdirt.com/articles/20220127/07422248366/wireless-industry-now-claims-5g-will-miraculously-help-fix-climate-change.shtml
[21:25:32] <rudybot_> https://teensy.info/ppqITCtVJw
[21:26:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578)
[21:27:27] <leah2> people here claim that 5G uses so much more energy than fiber ;)
[21:27:38] <leah2> stop watching netflix for climate change
[21:27:48] *** Joins: museee (~museee@user/museee)
[21:28:04] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:34c8:da42:162b:99f5) (Ping timeout: 250 seconds)
[21:28:40] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:1c08:37e5:f5b7:2cd7)
[21:29:07] *** Quits: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece) (Ping timeout: 250 seconds)
[21:29:23] *** Joins: badkins (~badkins@136.56.92.199)
[21:30:50] <Zipheir> Indeed, streaming services use tons of energy.
[21:31:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[21:32:22] <Zipheir> The manufacture of the sheer number of new 5G phones that are being made/demanded probably offsets any network efficiency gains, I'm guessing.
[21:32:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4)
[21:34:04] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[21:35:42] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578) (Ping timeout: 260 seconds)
[21:36:16] <gwatt> I wonder if the totality of streaming services use more or less energy than cryptocurrencies & associated insanity
[21:37:20] <mdhughes> #1 killer: Waiting for boost to recompile every time I update MacPorts.
[21:40:02] <leah2> idk if streaming really uses that lot energy?
[21:40:16] <leah2> certainly hosts that actually compute and are not i/o bound use more energy?
[21:40:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671)
[21:41:00] <leah2> "streaming a Netflix video in 2019 typically consumed around 0.077 kWh of electricity per hour"
[21:41:27] <LeoNerd> kWh per hour?
[21:41:33] <LeoNerd> If only there was a more convenient unit to measure that in
[21:41:38] <leah2> %)
[21:41:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:42:06] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:42:09] <LeoNerd> Ohgod.. I saw an even worse thing. In the UK, lightbulbs have a figure quoted in "kWh per thousand hours"
[21:42:15] <leah2> hahaha
[21:42:20] <leah2> uk also has own energy ratings now
[21:43:23] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:43:38] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4) (Ping timeout: 260 seconds)
[21:45:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Client Quit)
[21:45:55] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:47:51] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[21:48:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09)
[21:49:18] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:1c08:37e5:f5b7:2cd7) (Ping timeout: 250 seconds)
[21:50:09] *** Joins: Darkcoal (~user@2001:16a2:764b:d100:46e9:8338:e639:9863)
[21:51:18] *** Joins: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be)
[21:51:20] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671) (Ping timeout: 252 seconds)
[21:53:16] *** Quits: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09) (Ping timeout: 245 seconds)
[21:57:20] *** Joins: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch)
[21:58:20] *** Quits: Darkcoal (~user@2001:16a2:764b:d100:46e9:8338:e639:9863) (Changing host)
[21:58:20] *** Joins: Darkcoal (~user@user/Darkcoal)
[21:59:37] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.3)
[22:00:15] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[22:03:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd)
[22:05:49] *** Quits: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be) (Ping timeout: 240 seconds)
[22:05:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48)
[22:08:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd) (Ping timeout: 245 seconds)
[22:09:49] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[22:11:51] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:16:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b)
[22:19:06] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48) (Ping timeout: 260 seconds)
[22:20:07] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Quit: leaving)
[22:24:53] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:31:21] *** Joins: badkins (~badkins@136.56.92.199)
[22:34:58] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 260 seconds)
[22:35:40] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[22:36:49] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:37:35] *** Joins: badkins (~badkins@136.56.92.199)
[22:38:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:41:24] *** Joins: daviid` (~user@179.210.52.91)
[22:42:45] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[22:42:45] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[22:45:41] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[22:46:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:48:32] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:48:41] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:48:48] *** ouestbillie is now known as cedb
[22:49:01] *** Joins: robin (~robin@user/terpri)
[22:49:07] *** cedb is now known as ouestbillie
[22:58:30] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[22:58:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e)
[22:59:08] *** Joins: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[22:59:45] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[22:59:45] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[22:59:54] *** Joins: civodul` (~user@91-160-117-201.subs.proxad.net)
[23:01:06] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 256 seconds)
[23:01:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b) (Ping timeout: 245 seconds)
[23:03:28] *** Joins: Lysandros (~Lysandros@2a02:aa13:8104:c080:21a:a0ff:fea7:35e)
[23:06:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:08:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:09:15] *** Joins: madage (~madage@user/madage)
[23:11:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f)
[23:14:40] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e) (Ping timeout: 250 seconds)
[23:17:26] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 245 seconds)
[23:19:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:28:15] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:bf6:c4f3:e6d3:935c) (Quit: Client closed)
[23:30:25] *** Joins: Fare (~fare@2607:fb91:bd89:35cf:ccd1:b56e:6bc2:9629)
[23:31:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:31:59] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[23:34:13] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:40:40] *** Quits: Fare (~fare@2607:fb91:bd89:35cf:ccd1:b56e:6bc2:9629) (Ping timeout: 250 seconds)
[23:41:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:43:08] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:43:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:45:07] *** Joins: badkins (~badkins@136.56.92.199)
[23:49:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5)
[23:50:08] *** daviid` is now known as daviid
[23:51:47] *** Quits: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f) (Ping timeout: 252 seconds)
[23:52:12] <Zipheir> sham1: I wonder, though, if the presence of mutation-based structure operations has held Scheme programming back somewhat.
[23:53:37] <Zipheir> FP's self-imposed restriction, for the most part, to immutable structures has paid dividends in all of the structures and algorithms discovered in the last 30 years.
[23:53:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d038:d67f:f4bd:95ae:c30:7222)
[23:54:39] <Zipheir> A lot of those remain obscure in Scheme, maybe because people reach for vectors/hash-tables/etc. whenever lists won't do.
[23:56:17] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5) (Ping timeout: 240 seconds)
[23:58:23] <Zipheir> Lisp programming has historically been not just "hybrid functional", but *aggressively* hybrid--it can be hard to factor out the imperative parts.
[23:59:11] <Zipheir> Probably just because of folklore--"X has to be done with vectors!  Otherwise it's slow."
