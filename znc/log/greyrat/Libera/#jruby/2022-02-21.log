[00:11:32] *** Joins: pboling[m] (~pbolingma@2001:470:69fc:105::1:c666)
[00:14:33] <pboling[m]> Trying to understand an apparent regression I am seeing in JRuby head.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f13e559cc5de3c87b2e81e833f354fc49a2c4f87)
[00:16:08] <pboling[m]> I was reporting this in the issue tracker, and it has a suggestion to bring my issue here.  Don't want to add noise to the tracker if I'm missing something obvious.
[00:38:54] <headius> Yeah that is a peculiar error, it does look like it should match fine. No harm opening an issue, even if it just turns out to be something weird with the test
[00:39:27] <headius> pboling: go ahead and open something
[01:44:35] <pboling[m]> merely because this is fascinating to me - I refactored my code, thinking it might be caused by `rescue KeyError; raise KeyError`, and even if I just use the natural initial KeyError the same failure to match the error happens.
[02:28:05] <headius> Maybe something related to encoding of the message
[02:33:36] <pboling[m]> While investigating this, I discovered other bugs in the code.  :D The best of rabbit holes.
[02:41:01] <byteit101[m]> kares: require_jar 'org.apache.commons:commons-lang3:3.12.0'
[02:41:01] <byteit101[m]> ArgumentError (wrong number of arguments (given 1, expected 2+))
[02:41:16] <byteit101[m]> require_jar 'org.apache.commons','commons-lang3','3.12.0'
[02:41:16] <byteit101[m]> RuntimeError ()
[02:41:16] <byteit101[m]> 	you might need to reinstall the gem which depends on the missing jar or in case there is Jars.lock then resolve the jars with `lock_jars` command
[02:41:16] <byteit101[m]> no such file to load -- org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar (LoadError)
[02:41:42] <byteit101[m]> If i have a jarfile, then that work, but this for no-setup loading
[02:42:48] <byteit101[m]> ie: open an irb session, type something like `maven_require "ch.qos.logback:logback-classic:LATEST"` wait several seconds, and then it's loaded, no other files or configuration necessary
[02:52:20] <byteit101[m]> kares: what my thing does: https://github.com/byteit101/jar-dependencies/commit/ffcb256ef9a3f187b2451c093028fad5407b82dd
[03:01:49] <byteit101[m]> headius: oh, you wanted me to write a thing on some of the recent changes. a) what medium am I writing for? b) what audience? and c) which things do you want me to cover?
[03:12:53] <headius> Writing for wiki or a post on JRuby blog, for existing users of JRuby Java integration, mostly just covering the enhanced subclass and Java field stuff
[03:44:46] <byteit101[m]> cool, will work on that this holiday weekend
[03:45:33] <byteit101[m]> Mostly a "here is how to use it?" sort of focus?
[03:53:12] <pboling[m]> In case anyone is interested - I have completed my analysis of the issue I mentioned above (https://github.com/jruby/jruby/issues/7112).
[03:53:12] <pboling[m]> In JRuby-dev, MiniTest is able to match errors and their messages.  RSpec is not able to, and it fails for both exact string comparison and regex pattern matching.  IMO, marginal chance this is an RSpec bug.
[05:19:53] <AndyMaleh[m]> I read quite a bit about TruffleRuby, and it always struck me as just a JRuby clone that is sadly a bit incompatible, thus severly compromising its selling points since I could not port JRuby applications to TruffleRuby without having to make changes. That said, I have been hearing interesting things about [GraalVM Native Image](https://github.com/oracle/truffleruby/blob/master/doc/contributor/native-image.md), but apparently it does not
[05:19:53] <AndyMaleh[m]> do AOT compilation of Ruby code, yet only to TruffleRuby and GraalVM implementation. Anyways, my opinion about all of this is the Oracle projects are only good as experiments, but they do not seem that practical or long-sighted (like not matching the JRuby API with TruffleRuby was a very bad move that renders TruffleRuby almost pointless in my opinion). Also, it seems TruffleRuby might be a good experiment for optimizing Ruby performance,
[05:19:53] <AndyMaleh[m]> but to be honest, I would never want to use directly. It would be great if JRuby could then import all the optimization results of the TruffleRuby experiment to enable more "practical" use of these optimizations in JRuby. TruffleRuby just seems like a toy Ruby implementation that fragments the Ruby market (kinda like how Rubinius was). I cannot see myself recommending TruffleRuby to people ever to be frank. Can JRuby consider importing all
[05:19:53] <AndyMaleh[m]> the features of TruffleRuby to retire that project and make JRuby be the main Ruby implementation that takes advantage of GraalVM features instead?
[06:38:21] <AndyMaleh[m]> I am sorry if I opened a can of worms or struck a very sensitive nerve regarding a topic that everybody avoided in the past. Honesty has always been the best policy for me, so I never tiptoe around any topic. I think tiptoeing only fosters mediocrity and encourages little lies that people tell themselves to feel good while things are getting worse. Anyways, forgive me if you'd rather not answer. I was just brainstorming about TruffleRuby,
[06:38:21] <AndyMaleh[m]> and I thought I'd shoot some ideas here, but If I'm totally off base, forget I said anything for now. Otherwise, thank you for keeping JRuby alive and growing.
[09:26:18] <kares[m]> pboling: might be due jruby-head being in a state of alpha ... last time I checked
[10:48:20] <kares[m]> byteit101: yeah that's smt that might be missing but would need more thought.
[10:48:20] <kares[m]> at some point I think smt similar worked with JBundler and/or jar_deps.
[10:48:20] <kares[m]> given the resolving of operation is a potentially 'heavy' operation it made sense to have a separate install and than lock step.
[10:48:20] <kares[m]> that does not mean doing that at runtime could not work - just like bundler can resolve stuff on demand if everything is local.
[12:00:02] <byteit101[m]> kares: Yes, that is why I started with the block version before I simplified it. Should I submit a PR to work on this or not at this time?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/4bac1d2643d88562ec4764a00983a5782725dde2)
[12:04:43] <kares[m]> this is a long shot on my side - the feature looks useful but we would need to revisit our existing options
[12:04:43] <kares[m]> if those are insufficient see how this could fit with existing APIs - as noted for such a feature I would prefer a separate step.
[12:04:43] <kares[m]> for now I just do not like the `maven_require` method being top-level as it's named every such addition should have a second thought ðŸ˜‰
[18:44:02] <headius> Andy Maleh: it's a valid question, no worries
[18:47:27] <headius> We have always been focused on providing the best compatibility and features that we can before we work on performance, so that has meant lagging behind on some optimizations. In general folks seem to find JRuby to be the best option for deploying Ruby apps at scale, and as far as I know we are still the only alt Ruby being deployed in critical production environments.
[18:48:20] <headius> We know many areas of JRuby that are still unoptimized and once we have 9.4 out we will be caught up on compatibility and can spend some months on performance
[18:51:36] <headius> Some of the strategies in TruffleRuby will be useful in JRuby but their runtime is quite different and would limit us to only running on graalvm, so we decided long ago it is not the right approach for a JVM Ruby. As for native aot, we have done proof of concept work to aot compile JRuby with graalvm and will try to provide a real solution this year that includes precompiling Ruby code
[18:54:53] <headius> Best thing anyone can do right now is help finish Ruby 3.0 and 3.1 features on master and file specific perf bugs for real world cases that do not perform as well as they could
[20:13:20] *** Joins: sagax (~sagax_nb@user/sagax)
