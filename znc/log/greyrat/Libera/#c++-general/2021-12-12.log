[00:00:19] <immibis> and of course if it's a variable of type const char* then its contents are another memory address so you need to go to THAT address to get the string contents
[00:00:48] <immibis> and this assumes it actually has some value in the program file, which essentially means it is a global or static variable.
[00:15:08] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:15:58] <RPNX> Question, thoughts on a channel like #open-c++ to discuss open source c++ projects (and progress updates)?
[00:16:32] <RPNX> #c++-dev
[00:16:36] <RPNX> or something
[00:16:38] <RPNX> idk
[00:17:02] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:19:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[00:19:51] <immibis> doesn't really have to be C++-specific?
[00:20:26] <RPNX> Yes it does...
[00:20:37] <RPNX> Even been like
[00:20:55] <RPNX> Let's write open source thing that does X together!
[00:21:05] <RPNX> "Yeah, let's all do it"
[00:21:13] <RPNX> "Sure, let's use Java"
[00:21:20] <RPNX> "No, we should use Rust"
[00:21:33] <RPNX> "Screw that, I'm gonna write it in Go"
[00:21:41] <RPNX> ...
[00:22:21] <RPNX> This is an actual thing that happened to me once. Everyone agreed that it sounded like a cool thing to do... nobody agreed on the programming language.
[00:22:49] <immibis> then, in the C++-only channel won't you just get tumbleweeds?
[00:23:16] <RPNX> I'm not sure that C++ is that dead...
[00:24:07] <NyB> RPNX: more like, if I want to know how project X is doing, I'll go to the project page and read the News - I'm not going to join an IRC channel and hope somebody knows
[00:24:30] <Guest19100> https://imgur.com/a/r2dvmGo I am trying to understand why do they delete assignment operator but allow copy constructor? Can someone help?
[00:24:34] <RPNX> Oh, I was more thinking of a development channel
[00:24:46] <RPNX> like, find projects to work on
[00:24:51] <RPNX> discover new stuff
[00:24:57] <RPNX> specific to c++
[00:25:03] <RPNX> pitch ideas
[00:25:05] <RPNX> etc
[00:25:06] <NyB> is "hi, I'd doing X, anyone interested in helping?" off-tipic here?
[00:25:12] <NyB> s/tipic/topic/
[00:25:30] <RPNX> Progress updates are marked as offtopic
[00:25:38] <RPNX> so i assume?
[00:26:07] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Quit: Quit)
[00:26:32] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:26:41] <NyB> RPNX: there seems to be c++-social
[00:26:51] <RPNX> That moment when you click disconnect instead of close channel .-.
[00:27:30] <NyB> RPNX: frankly, an IRC channel would be a bad place to discuss the progress of a single project, unless it's #${project}
[00:28:07] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Client Quit)
[00:28:21] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:28:31] <NyB> huh... pretty elusive, that close channel button, eh?
[00:28:50] <RPNX> Nope this time I changed a setting and hit save =w=
[00:29:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:37:11] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[00:39:18] <cart_man> RandomReader: Hey ...you know allot about the inner workings of signals and using timer_settimer() right?
[00:55:12] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4)
[00:55:12] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4) (Changing host)
[00:55:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:56:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:59:00] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[01:00:18] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[01:00:44] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:00:57] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[01:00:57] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[01:02:06] <RPNX> How about #c++-oss ?
[01:05:43] <NyB> RPNX: well... channels are free anyway. Go for it :-)
[01:07:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[01:12:08] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c090:f547:35ff:6299)
[01:12:08] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c090:f547:35ff:6299) (Changing host)
[01:12:08] *** Joins: skapata (~Skapata@user/skapata)
[01:12:10] <johnny> i didn't know what was meant by "progress updates"
[01:12:12] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:13:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:13:41] *** Joins: teepee (~teepee@openscad/teepee)
[01:13:55] <NyB> johnny: I'm not sure what it means either...
[01:14:27] <johnny> i guess the rule worked, because i've never seen anybody get shushed for that particular behaviour
[01:15:09] <NyB> johnny: _which_ behavior?
[01:15:21] <johnny> whatever caused the creation of that rule
[01:16:56] * NyB wonders whether a "don't talk about ${fuzzy term}" rule might just be a good trick to stop all those "I'm not doing X (which is disallowed), I'm doing Y!" people
[01:16:59] <RandomReader> cart_man - some, but what's the underlying problem you're solving here? e.g. what kind of things are you doing on a time basis, what is the program doing the rest of the time, how often are the timers, etc
[01:17:23] <RandomReader> (as the others said previously, using signals correctly is very difficult)
[01:18:11] <cart_man> RandomReader: Well I am using the timer_settimer() with a signal to try and make the CPUs wait until certain flags are up. BUT I figured that using a signal might not be the best since it actually can not handle even 10 000 Mico Seconds it seems.
[01:18:39] <cart_man> The TIMER just basically checks 1 flag and then cv.notify() another thread to conitnue
[01:18:43] <RandomReader> what do you mean by making the CPUs wait?
[01:18:45] <johnny> NyB, that is often the reason for vagueish rules so people don't play rules lawyer.   It's the "i'm not touching you" of rules
[01:18:51] <cart_man> RandomReader: With cojnditionals
[01:18:55] <RandomReader> like step back, what's the big picture problem, not the details of how you're doing it
[01:19:02] <johnny> if you're familiar with little kids behaving in such a manner or have a phrase for that where you're from
[01:20:15] <cart_man> RandomReader: I want a process to check flags as fast as it possible can and while the flags are down the rest of the CPUs shouldn't be running some while loop(). I am just making a makeshift IPC implementation
[01:20:19] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f986:1faa:a6d6:f8a1) (Ping timeout: 252 seconds)
[01:20:43] <RandomReader> IPC for what kind of use?
[01:21:17] <NyB> ...and also with what kind of shared medium for the communication?
[01:24:34] <johnny> "<RPNX> This is an actual thing that happened to me once. Everyone agreed that it sounded like a cool thing to do... nobody agreed on the programming language." too real.. although i'm generally willing to compromise, as long as i *know* the language
[01:25:33] <NyB> I think you are more likely to get contributors if a. the language is somewhat broadly used and b. you write a prototype for others to contribute to
[01:25:35] <johnny> and of course, it's not something silly like trying to implement an OS kernel in java or something :)
[01:26:23] <NyB> e.g. Linus did not say "hey, how about we write a new kernel?" - he said "I'm writing a new kernel!"
[01:26:25] <johnny> i only learned more C++ just because it was the language a thing was already written in, and i'd rather learn more C++ than start over
[01:26:54] <johnny> lots of programmers love to start from scratch, but not me
[01:27:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:27:34] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:30:35] <johnny> the most important thing to a non oneoff program is somebody to maintain it. the last thing i wanna do is take on that effort, especially if i'm not necessarily a domain expert in whatever problem it's solving
[01:39:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:29] *** ChanServ sets mode: +v npaperbot
[01:39:54] *** Joins: proller (~p@80.240.216.69)
[01:39:57] *** Joins: troller (~p@80.240.216.69)
[01:42:27] *** Joins: Simplar (~quassel@188.163.93.76)
[01:56:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:00:33] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:05:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::fa0f)
[02:05:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[02:16:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:16:40] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:21:13] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[02:21:34] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4)
[02:21:35] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4) (Changing host)
[02:21:35] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:29:44] *** Joins: proller (~p@2a02:6b8:b081:8830::1:25)
[02:30:06] *** Joins: troller (~p@2a02:6b8:b081:8830::1:25)
[02:35:52] <KombuchaKip> RandomReader: And now today the memory doesn't seem to be cleaned up upon consumer thread pool join in WorkQueueManager destructor.
[02:37:25] <immibis> cart_man: timer to wait for a flag is just stupid. you should wait for the thing that you are trying to wait for
[02:37:55] <immibis> i.e. the flag. now you can't wait for a boolean flag so you'll have to wait for one of the other available synchronization mechanisms
[02:38:44] <immibis> locks and condition variables are pretty flexible, you can wait for a boolean flag if you combine it with a condition variable; you also need a lock
[02:39:16] <cart_man> immibis: Well I actually had a global step thing in mind but had to change that anyway
[02:39:18] <immibis> cart_man: i think you complained about the predicate in a condition variable wait earlier? the predicate is the condition, it's the flag you are waiting for!
[02:39:36] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:40:13] <immibis> condition variable wait is essentially while(!predicate) sleep_until_something_about_the_predicate_changes();
[02:40:29] <immibis> (the system doesn't automatically know when something about the predicate changes, but that's what notify is for)
[02:40:42] <cbreak> conditional variables allow waiting for something abstract, not just a specific value
[02:40:55] <cbreak> you could wait for a vector to have a size that is a prime number, for example.
[02:41:39] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:46:38] <RandomReader> KombuchaKip - does it get cleaned up if you destruct and then just sleep for 30s?
[02:47:11] <KombuchaKip> RandomReader: Destruct what? The consumer threads or the WorkQueueManager?
[02:47:36] <RandomReader> the WorkQueueManager
[02:47:48] <RandomReader> or, well, either really
[02:48:03] <RandomReader> read this as "arbitrary delay after you're done"
[02:49:04] <KombuchaKip> Let me try inserting a sleep after the join.
[02:54:26] <KombuchaKip> RandomReader: Memory appears to stay allocated all the way to main() exiting.
[02:55:59] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:56:07] <Guest19100> RandomReader : https://imgur.com/a/r2dvmGo I am trying to understand why do they delete assignment operator but allow copy constructor?  Incase you're free to help with my doubt
[02:57:12] <RandomReader> KombuchaKip - interesting, implies the decision process isn't about the threads, but not entirely sure what to make of it
[02:57:26] <KombuchaKip> RandomReader: Indeed.
[02:57:30] <RandomReader> I'd probably still start with the process vm map just to narrow down what kind top is reporting at least
[02:57:46] <RandomReader> I think there's pmap? but probably something less awkward
[02:59:04] <RandomReader> Guest19100 - I'm guessing, but they probably mean that since the entire stack cannot be "replaced", that's one less thing to have to make thread-safe
[02:59:48] <Guest19100> ah I see, thanks RandomReader
[03:00:35] <RandomReader> (would need the rest of the context to see what they're doing to make it thread-safe and why they consider that specifically a problem .. it could just be to make it simpler, rather than something that's hard to solve)
[03:04:19] <Guest19100> they basically design a threadsafe wrapper over std::stack
[03:04:36] <Guest19100> making pop() throw an exception if stack is empty
[03:05:19] <Alipha> Guest19100: it's incredibly odd for a class to delete copy op= but not the copy ctor. I'm curious about more context as to why that'd be done.
[03:07:16] <Guest19100> Alipha - I think RandomReader is correct - one less thing to worry about. With copy constructor, object isn't constructed yet
[03:07:37] <Guest19100> so they just take lock of "other" object and do mydata = other.data;
[03:09:03] <Alipha> comrad: an array is NOT a pointer. `int b[10];` There is no pointer here. What's confusing is that `b` will implicitly convert to a pointer to &b[0] in many situations, however. But `b++` nor `b += 5;` works. There's no pointer there
[03:19:41] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:28:21] *** Joins: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs)
[03:32:52] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[03:45:36] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[03:52:55] <KombuchaKip> RandomReader: I don't know anything about vm maps or pmap. Do you have a good tutorial you recommend you can link me to?
[03:54:06] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4)
[03:55:22] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:56:32] <RandomReader> not offhand, but at a basic level, it's just displaying what the kernel has assigned to each region of the process's address space
[03:57:11] <RandomReader> code, private space which is likely heap of some sort, stack, mapped files, etc
[03:57:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4) (Ping timeout: 268 seconds)
[03:57:35] <RandomReader> what's shared with others and what isn't
[03:59:45] <KombuchaKip> RandomReader: Ok, what should I be looking for? I see lots of [ anon ] blocks.
[04:01:07] *** Parts: pinchartl (~laurent@perceval.ideasonboard.com) ()
[04:01:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Ping timeout: 250 seconds)
[04:01:59] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[04:04:10] <RandomReader> just whatever category seems like it covers the excessive amount
[04:04:12] *** Joins: seninha (~seninha@user/seninha)
[04:04:40] <RandomReader> if it's anon, then it's dynamic allocations, and either from malloc-type stuff or things that don't go through malloc
[04:05:20] <KombuchaKip> RandomReader: Yeah all I see are a bunch of `00007f75e0021000  65404K -----   [ anon ]` lines, but it doesn't really tell me anything helpful about what or why.
[04:08:35] <RandomReader> 65404K of space assigned to anonymous use, so ~64MB of of memory used for arbitrary data storage
[04:08:58] <cart_man> What is the right parameter values so this function takes a Lambda instead of a normal function? This is what I have ->   void Seed_Callback(void (*funcptr)(std::string))       ... It works for void something(std::string) etc
[04:09:08] <KombuchaKip> RandomReader: Right, but without knowing what asked for it, it's hard to be able to do anything with that information.
[04:09:20] <RandomReader> the point is to find out if it *is* these allocations at all
[04:09:35] <RandomReader> that's been an assumption this entire time, because like I said earlier, top covers several categories depending on what you have it display
[04:09:58] <RandomReader> if it turns out to be dirty memory mapped files for example, it turns into an entirely different troubleshooting exercise
[04:10:17] <KombuchaKip> RandomReader: It's feeling a bit hopeless right now.
[04:10:34] <KombuchaKip> RandomReader: valgrind is totally useless too, unfortunately.
[04:10:44] <RandomReader> if the amount of excess you're seeing could all be covered by adding up these anonymous sections, then you know it's dynamic allocations and not something else
[04:10:45] <KombuchaKip> RandomReader: Doesn't report any leaks.
[04:11:30] <RandomReader> which means it's being tracked and accounted for by some part of the program, so it
[04:11:36] <RandomReader> it's intentional as opposed to lost
[04:12:10] <KombuchaKip> RandomReader: Yes, hence why it's a space leak =(
[04:13:12] <immibis> cart_man: void Seed_Callback(std::function<void(std::string)>) OR template<typename Function> Seed_Callback(Function)
[04:13:24] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[04:13:26] <immibis> every lambda is its own type so to pass a lambda it technically has to be a template
[04:13:44] <RandomReader> you said before tcmalloc didn't account for it, and this is with LD_PRELOAD?
[04:13:55] <immibis> std::function wraps all kinds of callable objects including lambdas, but it does that by allocating memory so for more efficiency maybe you'd like to pass the lambda directly
[04:14:32] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:15:40] <KombuchaKip> RandomReader: I linked directly with tcmalloc and couldn't make sense at all of massif-visualizer.
[04:16:04] <RandomReader> but the total amount was visible?
[04:16:08] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:16:24] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[04:16:51] <KombuchaKip> RandomReader: I actually don't know how to read what it was displaying. It had a lot of figures, but it wasn't clear what the numbers meant, as in were they aggregates over time of all allocations that might have been followed by cleanup, or what.
[04:17:15] *** Quits: geli (~gelignite@55d43f19.access.ecotel.net) (Quit: Stay safe!)
[04:20:14] *** Quits: proller (~p@2a02:6b8:b081:8830::1:25) (Ping timeout: 260 seconds)
[04:20:21] *** Quits: troller (~p@2a02:6b8:b081:8830::1:25) (Ping timeout: 252 seconds)
[04:21:02] <RandomReader> I'm not familiar with it, but based on the kind of tool it is, I'd expect it to be able to take a snapshot of what's currently allocated and the breakdown of where it came from
[04:21:23] <RandomReader> and you should be able to trigger that either from a debugger-type interface or programmatically in code (e.g. in the destructor)
[04:21:41] <KombuchaKip> RandomReader: Yeah, but getting it to trigger a snapshot when you want is difficult when the application already traps SIGINT and needs to execute for a long time.
[04:22:01] <cart_man> immibis: are you sure? -> argument of type "lambda []void (std::string x)->void *" is incompatible with parameter of type "std::function<void (std::string)> *"
[04:22:39] <cart_man> immibis: I am trying to pass this ->    auto x = [&](std::string x){};    auto x_ptr = &x;
[04:22:52] <cart_man> The x_ptr
[04:22:58] <RandomReader> std::function<...>* is not std::function<...>
[04:23:07] <RandomReader> (why does your code keep ending up with pointers all over the place?)
[04:23:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:24:18] *** Tobbi__ is now known as Tobbi
[04:24:37] <cart_man> RandomReader: Cause I am a masochist
[04:24:50] <KombuchaKip> RandomReader: It also takes forever to get the application into a state where the memory is ballooning because everything in valgrind becomes slow as shit.
[04:24:58] <cart_man> RandomReader: No I didn't actually know that I can pass a reference of a lambda function
[04:25:04] <cart_man> Or of a function
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:37] <KombuchaKip> RandomReader: But tcmalloc doesn't need it, so let me try again.
[04:27:24] <RandomReader> cart_man - usually you use std::function as a value, it's a container for something you can call
[04:28:34] <kalven> KombuchaKip: have you considered asan instead of valgrind? it's quite a bit faster
[04:28:51] <cart_man> RandomReader: Whow I took a wild guess and replaced the auto with std::function and it worked
[04:29:02] <KombuchaKip> kalven: I did try it, but let me try it again. I don't remember the reason why I abandoned it.
[04:45:36] *** Quits: chozorho (~chozorho@2601:146:300:c30::fa0f) (Ping timeout: 268 seconds)
[04:47:07] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:48:31] *** Joins: proller (~p@2a02:6b8:b081:8802::1:14)
[04:48:35] <cart_man> expression preceding parentheses of apparent call must have (pointer-to-) function typeC/C++(109) std::function<void (std::string)> *MemIPC::IPC::callback_ptr
[04:51:09] <cart_man> Thansk for the help everyone ^ RandomReader immibis
[04:51:41] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[05:28:46] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:31:31] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:33:51] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[05:39:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:30] *** ChanServ sets mode: +v npaperbot
[05:48:03] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c94c:7b63:2f85:a7d)
[05:48:03] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c94c:7b63:2f85:a7d) (Changing host)
[05:48:03] *** Joins: skapata (~Skapata@user/skapata)
[06:02:26] *** Quits: proller (~p@2a02:6b8:b081:8802::1:14) (Ping timeout: 260 seconds)
[06:07:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:09:38] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:11:27] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:17:52] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:18:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:20:00] *** Quits: AmR (~AmREiSa@156.207.199.106) (Quit: Konversation terminated!)
[06:21:07] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:48:02] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:49:01] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:49:28] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:50:06] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:50:29] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:50:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:54:07] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[06:57:59] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:58:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:59:18] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[07:14:39] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[07:16:49] *** Quits: john99 (~john99@170.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[07:19:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:33:03] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[07:48:21] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:49:15] *** Quits: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:57:32] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[07:57:42] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:02:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[08:04:11] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:07:09] <KombuchaKip> kalven: I've managed to get asan to work. It was breaking before because it didn't like to be used with -static-libstdc++, which I removed. It's found a bunch of direct and indirect leaks in av_malloc in src/libavutil/mem.c:86 (ffmpeg), but it's not giving me any details on where it was called from.
[08:11:39] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[08:12:11] <kalven> okay
[08:14:39] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[08:20:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:20:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[08:20:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:23:03] *** Quits: causative (~halberd@user/causative) (Ping timeout: 250 seconds)
[08:24:38] *** Joins: causative (~halberd@user/causative)
[08:30:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 240 seconds)
[08:44:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[08:46:41] *** Joins: frost (~frost@user/frost)
[08:49:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[08:53:20] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[08:59:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[09:04:27] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[09:04:49] <ent58> Is having a relative directory structure for source libraries "fine"? Or is having the compiler search directories always the better option
[09:07:10] <KombuchaKip> kalven: If I have a vector of type foo, and I have some lambda that can generate a foo each time it is called, is it safe to be able to call std::generate(std::execution::par, begin(MyVector), end(MyVector), lambda)? I know you don't use the fancy execution policies, but not sure if this is thread safe on a vector since generate shouldn't need to fiddle with the vector other than to write each foo to each distinct element. You shoul
[09:07:10] <KombuchaKip> dn't need to synchronize, correct?
[09:08:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:12:13] <ent58> if that call to std::generate doesn't touch the vector metadata and just updates each element (and nothing else is writing those elements or reading them non-atomically) then I don't see why that would be an issue
[09:12:47] <KombuchaKip> ent58: That's what I thought, but for some reason asan claims there is a leak when I use execution::par.
[09:12:48] <ent58> But I can't remember exactly how begin and end function here: are they reading the vector first in an atomic way to get the heap location?
[09:13:00] * KombuchaKip shrugs
[09:13:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[09:15:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:16:59] <ent58> oh like a memory leak?
[09:17:48] <KombuchaKip> ent58: Yup. #2 0x7f0cb0384075 in tbb::internal::arena::arena(tbb::internal::market&, unsigned int, unsigned int) ../../src/tbb/arena.cpp:270
[09:18:07] <kalven> KombuchaKip: and that goes away when you use the regular std::generate?
[09:18:16] <KombuchaKip> kalven: Yup.
[09:18:18] <ent58> O.o that's weird.
[09:18:42] <KombuchaKip> I'm sure I must be doing something wrong and it can't be a problem inside tbb.
[09:20:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:23:31] <kalven> how big is the leak and does it grow?
[09:24:21] <KombuchaKip> kalven: It's 6168 bytes, but let me try and construct a minimal that reproduces the problem (if I can).
[09:29:37] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:30:47] <kalven> KombuchaKip: right.. but I mean - does it keep growing if you run this multiple times? a lot of libs might lazily allocate stuff without the intention of ever freeing it
[09:30:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:31:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:33:00] <ent58> which then questions whether depending on OS process cleanup for program lifetime allocations is The Way (tm) or not
[09:34:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[09:35:14] <KombuchaKip> kalven: Doesn't look like it. If I put the vector / generate in a loop, still 6168 bytes leaked.
[09:35:32] <KombuchaKip> kalven: So this might be just an internal library thing, aka a false positive.
[09:35:51] <kalven> right
[09:36:17] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:36:28] <KombuchaKip> kalven: This is really similar to what I'm seeing: https://community.intel.com/t5/Intel-oneAPI-Threading-Building/memory-leak-from-parallel-for/m-p/1021726
[09:37:24] *** Joins: supernova (~quassel@2405:9800:ba11:6207:85ce:3956:d0d0:b7e7)
[09:37:26] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:37:53] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:39:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:25] <kalven> okay, so that's probably not the reason for the large leaks you were seeing?
[09:39:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:31] *** ChanServ sets mode: +v npaperbot
[09:39:47] <KombuchaKip> kalven: Agreed. This is probably a red herring.
[09:40:16] <KombuchaKip> Usually whenever I think I find a problem in a library I am using, I begin with the assumption I'm probably using it wrong.
[09:50:34] <KombuchaKip> kalven: This is what I see for my application on exit from ASan after I leave it running for a while with lots of client requests: https://pastebin.com/EaHfvTJ8
[09:50:54] <KombuchaKip> kalven: What I need to know is a more useful stack trace.
[09:51:27] <KombuchaKip> kalven: But that appears to be the main, if not the only real leak.
[09:52:14] <KombuchaKip> kalven: The ffmpeg API is, *ahem*, not exactly the most elegant or best documented. But it is what it is.
[09:54:26] <kalven> so it's that one from src/libavutil/buffer.c:177 that seems to be the culprit?
[09:54:49] <KombuchaKip> kalven: Note that the memory leak dump above is from a binary that was compiled with full debugging symbols and linked against ffmpeg libraries that were built with full debugging symbols and no optimizations.
[09:55:08] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:55:29] <KombuchaKip> kalven: It looks to be the most bloated, yes. But who is calling it, I don't know.
[09:56:10] <KombuchaKip> kalven: I could set a breakpoint on it, but I suspect there's all kinds of innocuous uses for it that aren't the problem.
[09:57:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[09:59:41] <kalven> welp.. I don't know what that __interceptor_whatever is about.. but it seems to be rendering the stacktraces mostly useless, which is a shame
[09:59:57] * KombuchaKip bangs head on desk
[10:00:06] * KombuchaKip goes to bed and tries to sleep on it
[10:00:07] <kalven> I'd investigte what that's about.. and if there's no way to get proper stacktraces then I'd start putting breakpoints
[10:05:39] <RandomReader> isn't that asan's tracking functions?
[10:07:41] <RandomReader> given that they all die in the av functions with an interesting address, I'd question whether libav is build correctly, and whether its callers are using the correct interface
[10:08:03] <RandomReader> e.g. calling convention, extern "C", that sort of thing
[10:09:06] <RandomReader> alternate option would just be to run it under gdb, put a breakpoint in the same spot, and see whether gdb can pull the stack trace
[10:09:23] <RandomReader> if it can, then I'd switch to suspecting something wrong/unsupported about this asan build
[10:10:52] <RandomReader> or how it's attached, given there was also mention of static libstdc++ etc
[10:17:00] <RandomReader> asan also suggests -fno-omit-frame-pointer for all the builds, if that wasn't done
[10:18:35] *** Quits: supernova (~quassel@2405:9800:ba11:6207:85ce:3956:d0d0:b7e7) (Ping timeout: 252 seconds)
[10:35:50] *** Joins: supernova (~quassel@2405:9800:ba11:6207:f7b1:60e7:840d:ac1c)
[10:44:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:44:59] *** Joins: frost (~frost@user/frost)
[11:08:02] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:10:17] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[11:11:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:12:51] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[11:16:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 240 seconds)
[11:27:31] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f7b1:60e7:840d:ac1c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:34:29] *** Joins: ravan (~ravan@user/ravan)
[11:35:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[11:46:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:49:00] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[11:51:21] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 252 seconds)
[11:56:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:05:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:09:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[12:12:21] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[12:12:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[12:12:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:13:55] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:17:00] *** Joins: magla (~gelignite@55d4a165.access.ecotel.net)
[12:23:22] *** Joins: meator (~meator@user/meator)
[12:23:49] *** Joins: robod34 (Username@79.113.195.239)
[12:27:25] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:30:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:32:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[12:32:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:33:58] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 260 seconds)
[12:36:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:38:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:43:55] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[12:44:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:45:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:49:28] *** Joins: supernova (~quassel@2405:9800:ba11:6207:413e:a25b:15b7:ec15)
[12:49:53] <supernova> folks, could you explain what is dereferencing pointer. In max simple words
[12:50:06] <supernova> trying to go deep with pointers, but still got confused a little
[12:50:14] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a06f:10d1:179a:1cf6)
[12:50:14] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a06f:10d1:179a:1cf6) (Changing host)
[12:50:14] *** Joins: skapata (~Skapata@user/skapata)
[12:50:49] <ent58> for simplification, imagine that main memory is a single large array where each cell is a byte, and each data type that has a size greater than one byte occupies multiple cells
[12:51:24] <ent58> a pointer is simply a group of cells that contain a number that represents the location of another cell
[12:51:50] <ent58> and dereferencing a pointer is the act of treating the value inside any arbitrary cell as a location to the data you want
[12:52:15] <ent58> arbitrary group of cells*
[12:53:09] <supernova> as i understood before, dereferencing = being able to manipulate (copy or modify) data to the pointer points
[12:53:57] <supernova> if you want to activate this ability, you dereferencing pointer, with *, connect it with &value and now it dereferenced and ready to modify, right?
[12:55:10] <ent58> it might be better think of it more generally, where the act of dereferencing (*) is the act of "treat this variable's data as an address and retrieve the data at that address"
[12:55:24] <ent58> and & as "retrieve the address of this variable"
[12:56:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:56:12] <ent58> the & and * "matching" the way they do when you use them with local/global variables is a byproduct of the language, but indirect addressing is a fundamental CPU operation in most cases
[12:58:23] <supernova> thanks, dude
[12:58:38] <supernova> pointers section is nightmare
[12:59:47] <ent58> no problem...I like to think of it this way: Computers, essentially, move data, and do mathematical operations to it. Those are the only really true functions of the CPU itself, and everything else is just hardware interpreting that data as "something"
[13:00:20] <ent58> and so pointers are just a special case of numbers that just so happen to be where other numbers are
[13:01:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 260 seconds)
[13:01:05] <ent58> the types laid on top of those numbers are a safety construct
[13:02:17] <supernova> pointers are interpeted by CPU like what?
[13:03:19] <ent58> the simplest example I can think of is a plain old x86 'mov' instruction
[13:05:18] <ville> supernova: http://ftp.acc.umu.se/mirror/gnu.org/savannah/pgubook/ProgrammingGroundUp-1-0-booksize.pdf this is a really great book that will explain some of the underlying details that c++ tries to abstract over. even if you neverevernever plan to write any assembly it is still great infromation. the first 4 chapters cover everything upto and including how function calls happen
[13:05:50] <ent58> ^ that, go do that lol
[13:06:03] <ville> supernova: you don't have to do the exercises or anything. just read through the first 4 chapters. it's worth the time
[13:06:37] <ent58> another link: https://www.cs.virginia.edu/~evans/cs216/guides/x86.html
[13:07:23] <ent58> this explains the introduction to some assembly language concepts (the quasi-simplest form of instructions to x86 CPUs) and in there is the relevant information you want
[13:07:30] <ent58> which is the addressing modes of the processor
[13:07:48] *** Joins: CaCode (~CaCode@user/cacode)
[13:07:57] <ent58> where you can select a register, or memory
[13:08:07] <ent58> as the destination for your data
[13:09:17] <ent58> the memory is represented as an address, and the [ ] you see in the instruction syntax represents the act of dereferencing
[13:09:18] <ville> the benefit of the book above is that it really does not rely on you understanding anything about programming really
[13:11:35] <RandomReader> supernova - the C++ abstraction is actually fairly straightforward: a pointer is an object, just like int is an object, and it stores a value
[13:11:41] <RandomReader> the value is a location/address of another object
[13:12:22] <RandomReader> * is just an operator, like multiplication is an operator, but in this case it's simply "get the object at the stored location"
[13:12:34] <RandomReader> rough analogy would be location = street address for a building
[13:13:22] <RandomReader> the conceptual part of pointers, the indirect nature of "you're storing only locations and have to go get objects" tends to be the big thing to get used to the first time around
[13:14:28] <RandomReader> so that's basically three different ways to wrap your head around it: the conceptual indirect part, the language part, and how it works on certain physical hardware
[13:16:22] <RandomReader> having a pointer is like having a piece of paper with the address on it .. dereferencing the pointer is like hopping in a vehicle and traveling there so you can interact with the house/object
[13:18:34] <ville> the book has an analogy section already
[13:24:09] <RandomReader> one that covers pointers as expressed by a high-level language?
[13:24:48] <RandomReader> it's not that I'm against details, but that book is unfortunately old enough to be full of incorrect information past a certain point
[13:25:16] <RandomReader> I mean it still talks about unix memory space as if there's a "break", which I'm pretty sure wasn't even true when it was written...
[13:26:17] <RandomReader> still a lot of relevant concepts at a low level, but it does need to translate them to high level to be useful for programming in, say, C++
[13:27:57] <supernova> ville: what pages do i need?
[13:28:59] <ent58> well I mean...the brk() system call is still a thing
[13:29:24] <ent58> it's what malloc does under the covers for small allocations, as it creates a sequentially increasing bound for memory
[13:29:34] <supernova> ent58: i saved your book, it's a bit out of context atm to dive with assembly part
[13:30:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[13:30:15] <RandomReader> ent58 - no, it isn't .. memory spaces haven't been that consistent for decades, not on common VM-based platforms anyway
[13:30:24] <RandomReader> not what malloc does, I mean
[13:30:51] <RandomReader> mmap() is the most common interface to the real abstraction these days, which is several independent spaces, not a single dual-ended pool
[13:31:24] <RandomReader> you can still find something that simple in some embedded contexts
[13:33:50] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[13:34:06] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[13:34:25] <RandomReader> looks like POSIX had brk() marked as "legacy" in 1997, and removed it in 2001, if I'm reading the changes correctly
[13:34:33] <ent58> Ah, I guess that's what I get for looking up docs that haven't been updated
[13:34:35] <RandomReader> (I may not be, still figuring out how to navigate opengroup's site)
[13:34:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[13:35:29] <ent58> die.net mentions how memory allocation is still performed by a combination of sbrk/mmap, but that's probably no longer true
[13:35:58] <RandomReader> as of 97, they basically gave up and said "it's unspecified if you use malloc" which I find somehow amusing: https://pubs.opengroup.org/onlinepubs/7908799/xsh/brk.html
[13:36:26] <RandomReader> I mean, it's true, but the subtext of "if you want to use this you have to avoid malloc" I find funny
[13:36:38] <ent58> interesting
[13:37:11] <ent58> I mean if you need that style of allocation
[13:37:43] <ent58> mmap a reserved range and commit pages sequentially...I'm sure that's how newer memory managers might do it
[13:38:34] <ent58> It is actually really useful for one or two data structures that vary in size/grow, as you avoid the normal amortization cost
[13:39:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:27] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:39:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:32] *** ChanServ sets mode: +v npaperbot
[13:41:55] *** Joins: proller (~p@80.240.216.69)
[13:42:13] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:46:06] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[13:46:07] <ville> supernova: umm, read to and including chapter 4. not in one go. memory and addressing is explained very early in chapter 1?
[13:46:55] <RandomReader> (would also concur with that book, if you're going to use it, read it through .. it's not a reference manual to skip around in)
[13:47:56] <ville> sorry chapter 2 has memory
[13:49:18] <ville> anyways don't have to memorize this stuff by heart, just be aware that what sort of things are going on below the abstraction level c++ sits at
[13:53:00] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:56:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:56:36] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:02:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:02:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:04:17] *** Joins: DSpider (~DSpider@82.79.237.110)
[14:08:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[14:11:05] *** Joins: plastico (~plastico@neomutt/plastico)
[14:24:36] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1c1:ac3d:59ba:4a9e)
[14:28:48] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 256 seconds)
[14:35:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:39:18] *** Joins: letto (~letto@188.26.158.104)
[14:40:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 252 seconds)
[14:43:21] *** Joins: paul424 (~tom@ip-5-172-236-126.multi.internet.cyfrowypolsat.pl)
[14:47:23] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:53:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:54:03] *** Joins: CaCode_ (~CaCode@user/cacode)
[14:55:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[14:58:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 260 seconds)
[14:59:23] *** Joins: xkuru (~xkuru@user/xkuru)
[15:02:48] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[15:30:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:30:25] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[15:30:31] *** Joins: pulse (~pulse@user/pulse)
[15:35:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[15:36:08] *** Quits: paul424 (~tom@ip-5-172-236-126.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:41:26] <LordKalma> !fact
[15:41:27] <nolyc> LordKalma: Any attribute-token that is not recognized by the implementation is ignored.
[15:41:44] <LordKalma> {} [[mycustomattribute]] void foo(){};
[15:41:45] <geordi> warning: 'mycustomattribute' attribute directive ignored
[15:50:06] <PJBoy> bad warning
[15:50:37] <PJBoy> imagine if it came up with that warning for all [[msvc::something]]s
[15:50:50] <PJBoy> would kinda completely defeat the point of that ignoring thing
[15:50:50] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[15:58:09] <ville> imagine if you could control these things
[15:59:11] <PJBoy> that would imply my tools are working for me, instead of vice versa
[15:59:25] <PJBoy> which isn't a feeling I'm familiar with
[15:59:37] <ville> they are. with some creative #pragma push and pop you can control warning output and thus make your attribute not emit them
[16:00:01] <PJBoy> but what if those #pragmas get ignored by MSVC
[16:00:02] <ville> https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html
[16:00:08] <PJBoy> and MSVC decides to warn on it
[16:00:23] <ville> i am sure it has its own flavour of them. define your macros per compiler you silly
[16:00:36] <ville> it's not that complicated
[16:00:41] <PJBoy> but then there's a chicken and egg of which compiler's warnings I disable first!
[16:00:52] <PJBoy> (I'm just playing around)
[16:00:53] <ville> no there isn't
[16:01:15] <ville> it's fairly simple to know which compiler is being used to compile a translation unit
[16:01:35] <ville> so you've never done portable code?
[16:01:55] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:02:11] <PJBoy> tbf
[16:02:37] <ville> you can do it on the build system level or with macros
[16:02:38] <PJBoy> I've done portable code, and have never written one of those `#if compiler==MSVC` things before
[16:02:50] <PJBoy> but yeah I know that's a thing
[16:03:13] <ville> you'll have: xyz_linux.hxx, xyz_macos.hxx, xyz_win32.hxx...
[16:03:25] <PJBoy> kinda wish the standard would mandate a compiler string so that that above #if check would work
[16:04:14] <PJBoy> but if I wanted to disable that warning, I would just -Wno-ignored-attributes or however it's spelt
[16:04:36] <ville> yes, and the pragmas let you do that
[16:04:51] <PJBoy> no reason to limit this problem solution to some confined area
[16:05:07] <PJBoy> an attribute being ignored is never worth reporting
[16:05:20] <PJBoy> except if that attribute is [[no_unique_address]]
[16:05:26] <ville> or packing or...
[16:05:28] <ville> you push your current settings, disable the warning, issue the pragma, then pop back to current settings
[16:05:50] <PJBoy> that's noisy and hacky
[16:06:00] <ville> you stick all that in a macro
[16:06:38] <ville> which also just lets you leave the macro empty on specific platforms
[16:06:46] <PJBoy> at worst I would write a `#define IGNORABLE_ATTRIBUTE [[ignoreable_attribute]]` or `#define IGNORABLE_ATTRIBUTE` somewhere with one of those vendor specific #ifs
[16:07:23] <ville> seems like you're making a big deal out of something that really isn't. it works.
[16:07:33] <PJBoy> I think you're the one making a big deal out of this
[16:07:39] <PJBoy> I already said I'm just playing around
[16:18:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Quit: Quit)
[16:21:21] *** Joins: andreasbuhr (~quassel@p548dd563.dip0.t-ipconnect.de)
[16:21:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:24:58] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:38:03] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[17:01:17] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[17:01:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:11:02] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[17:14:59] *** Joins: Terminus (~null@user/terminus)
[17:15:25] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:17:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:17:12] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (Quit: WeeChat 3.0)
[17:39:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:32] *** ChanServ sets mode: +v npaperbot
[17:42:03] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:42:10] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[17:44:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:45:50] *** Joins: Terminus (~null@user/terminus)
[17:47:03] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[18:02:30] *** Joins: seninha (~seninha@user/seninha)
[18:13:33] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:33:07] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[18:46:07] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[18:46:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[19:00:41] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:00:59] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[19:01:11] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87)
[19:01:12] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87) (Changing host)
[19:01:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:02:04] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:02:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:02:51] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[19:03:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:03:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[19:04:20] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:06:29] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[19:18:24] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[19:25:48] *** Joins: paul424 (~tom@ip-5-172-239-164.multi.internet.cyfrowypolsat.pl)
[19:29:22] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-4114-c3a8-f0dd-f3a3.inf6.spectrum.com) (Read error: Connection reset by peer)
[19:30:07] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3)
[19:43:41] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:43:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:56:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:59:00] *** Quits: supernova (~quassel@2405:9800:ba11:6207:413e:a25b:15b7:ec15) (Quit: No Ping reply in 180 seconds.)
[20:00:07] *** Joins: supernova (~quassel@2405:9800:ba11:6207:7a0d:5a67:9b8e:22f2)
[20:08:02] *** Joins: Munnu (~timo@81-197-121-241.elisa-laajakaista.fi)
[20:08:59] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:19:13] *** Quits: supernova (~quassel@2405:9800:ba11:6207:7a0d:5a67:9b8e:22f2) (Quit: No Ping reply in 180 seconds.)
[20:19:48] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Read error: Connection reset by peer)
[20:20:11] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:20:20] *** Joins: supernova (~quassel@2405:9800:ba11:6207:3f7c:e6d9:860d:2551)
[20:24:39] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3) (Read error: Connection reset by peer)
[20:25:24] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3)
[20:43:10] *** Joins: Snyp (~Snyp@49.207.209.233)
[20:52:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:52:11] *** Quits: Snyp (~Snyp@49.207.209.233) (Quit: Textual IRC Client: www.textualapp.com)
[20:56:47] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:57:05] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:04:35] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:17:07] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:17:46] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:29:58] *** Quits: paul424 (~tom@ip-5-172-239-164.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:32:06] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[21:39:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:33] *** ChanServ sets mode: +v npaperbot
[21:39:58] *** Joins: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs)
[21:50:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[21:51:53] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Ping timeout: 250 seconds)
[21:51:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:08:21] *** Joins: jkaye (~jkaye@pool-96-234-204-169.bltmmd.fios.verizon.net)
[22:12:51] *** Quits: jkaye (~jkaye@pool-96-234-204-169.bltmmd.fios.verizon.net) (Ping timeout: 252 seconds)
[22:17:56] <KombuchaKip> RandomReader: I'm already building with -fno-omit-frame-pointer. This also seems to happen whether I build ffmpeg from source or use my distro's package. I'm not using -static-libstdc++ or -static-libgcc. Should I? The former gives me std::bad_cast when I use a regex, probably because differences in the ABI.
[22:18:08] <KombuchaKip> kalven: What do you recommend putting breakpoints on?
[22:18:19] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[22:21:49] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 240 seconds)
[22:22:02] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[22:24:16] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:38d0:a1a2:5189:934b)
[22:25:14] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1c1:ac3d:59ba:4a9e) (Ping timeout: 260 seconds)
[22:26:27] *** Joins: meator (~meator@user/meator)
[22:39:03] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:46:26] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[22:50:01] *** Joins: radu2424074 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:50:14] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:50:14] *** radu2424074 is now known as radu242407
[22:50:17] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[22:51:35] *** Joins: Ghou1s (~Ghou1s@user/Ghou1s)
[22:51:36] *** Joins: paul424 (~tom@ip-5-172-233-220.multi.internet.cyfrowypolsat.pl)
[22:59:39] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:59:44] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[23:08:45] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[23:09:34] <supernova> Guys, could you help me to unstuck. Its 12th hour of my education today, probably im dumb
[23:10:26] <supernova> https://wandbox.org/permlink/jbkcfDiTwXRR4wQF
[23:12:05] <comrad> put the offending line in the main method
[23:12:41] <ville> supernova: you can't have such statements outside of functions
[23:13:31] <ville> (for some low value of correct answer)
[23:16:05] <ashafq> comrad: You can only initialize outside function
[23:19:30] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:19:33] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:24:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[23:29:26] <supernova> 8.4.cpp:16:8: error: cannot convert ‘double’ to ‘double*’ in assignment
[23:31:06] <supernova> i can not get it
[23:31:25] <supernova> book says the answer is double *fPtr = nullptr;
[23:31:25] <supernova> fPtr = number1;
[23:31:41] <supernova> sorry, double *fPtr = nullptr;
[23:31:41] <supernova> fPtr = &number1;
[23:33:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[23:34:21] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:36:34] <ville> supernova: do you understand the error message's structure or what it is saying?
[23:36:54] <supernova> Usually yes
[23:36:59] <supernova> now it has no sence
[23:37:03] <supernova> 8.4.cpp:16:8: error: cannot convert ‘double’ to ‘double*’ in assignment
[23:37:35] <ville> "cannot convert 'A' to 'B' in assignment" your types don't match to a sufficient degree
[23:38:11] <ville> so you've something like: b = a; and b's type is B, a's type is A
[23:39:29] <supernova> How to ammend?
[23:39:46] <supernova> i did similar assignment with pointers to arrays
[23:39:48] <supernova> no problem
[23:40:58] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[23:43:06] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:43:30] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:44:03] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:855f:9909:bca8:ecc3)
[23:44:16] <ville> !give supernova testcase
[23:44:17] <nolyc> supernova: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[23:44:56] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:45:12] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Ping timeout: 268 seconds)
[23:45:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:45:42] <supernova> why is this bad?
[23:45:43] <supernova> https://wandbox.org/permlink/jbkcfDiTwXRR4wQF
[23:46:15] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:46:36] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[23:46:42] *** Parts: meator (~meator@user/meator) (Leaving)
[23:47:36] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[23:49:12] <ville> as said alreaday you can't have an assignemt statement such as on line 9 outside of a function
[23:50:38] <supernova> how can i fix it?
[23:50:45] <ville> put it in a function?
[23:51:09] *** Quits: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[23:51:53] <supernova> if i delete null ptr it works
[23:52:31] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[23:52:36] <supernova> i need to comply with book, it says i need to go with these points... Maybe i missing something
[23:52:47] <supernova> there is no function
[23:53:55] <mort> take the code you have and put it in a function
[23:54:08] <mort> as ville said
[23:54:21] <mort> put it between the { and the } for the main function for example
[23:55:54] <supernova> still failing
[23:56:41] <supernova> https://wandbox.org/permlink/kcdX02nEoKrKToJk
[23:57:10] <mort> it's not failing
[23:58:52] <supernova> oh
[23:59:15] <supernova> i need to have some sleep :D
[23:59:27] <supernova> ville, mort, big thanks
