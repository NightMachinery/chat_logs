[00:17:05] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[00:20:04] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Read error: No route to host)
[00:25:59] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:26:10] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[00:26:10] *** ChanServ sets mode: +o MichaelRaskin
[00:26:42] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[00:28:14] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:28:51] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:35:31] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[00:39:24] *** Joins: nature (~nature@mail.blazebone.com)
[00:46:47] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 245 seconds)
[00:48:42] <jasom> did ESRAP stop doing backtracking suddenly?  I'm seeing (or X Y) fail to parse and (or Y X) succeed...
[00:49:43] <MichaelRaskin> ESRAP is packrat
[00:50:06] <MichaelRaskin> It must not do backtracking in such a situation, by specification
[00:50:10] <MichaelRaskin> Never did
[00:56:07] <jasom> that seems at odds with the description of "or" in the grammar.  Is it not always true that if X can parse a string than (or Y X) can parse it regardless of what Y is?
[00:56:50] <MichaelRaskin> Depends on your settings (trailing-garbage-allowed or not), but in the latter case, which I think is the default, no
[00:57:27] <jasom> "An ordered choice succeeds if any of the subexpressions succeeds, and consumes all the input consumed by the successful subexpression. An ordered choice produces whatever the successful subexpression produces.:
[00:57:33] <jasom> does that not mean what I think it means?
[00:58:18] <MichaelRaskin> On the top-level, by default the check is success _and_ consumption of the entire input
[00:58:39] <jasom> oh
[00:59:00] <jasom> so if Y matches a substring of the input then that will prevent it from checking if X can parse the entire input
[00:59:11] <MichaelRaskin> Yes
[01:01:11] <MichaelRaskin> It might be that packrat is just not the parsing model that you want to use right now for the current task, that happens. All general parsing models there are are somewhat suboptimal, so check what fits whatâ€¦
[01:02:28] <jasom> This is easily worked around by a followed-by
[01:02:59] <MichaelRaskin> If the or is at the top level, yes
[01:03:04] <MichaelRaskin> But this does not compose
[01:03:10] <jasom> in this case it does
[01:04:19] <jasom> I need to parse things like the following: T12:34 T1234 T12:34:56 I can just check for the version without the : first and ad a (! #\:) to resolve the ambiguitiy between T12 and T12:34:56
[01:04:34] <MichaelRaskin> If something works only at the top level, this is not exactly enough to say this solution composes well (say, under concatenation)
[01:04:59] <jasom> in no case will it ever be followed by a colon
[01:06:02] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[01:09:20] <jasom> I suppose to really make it compose I should have a (! digit) in the version that expects colons.
[01:09:49] <jasom> then they can be used in any order safely
[01:11:44] *** Quits: h3ck3r9696 (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Quit: Leaving)
[01:16:21] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 258 seconds)
[01:17:57] *** Joins: akoana (~ah@user/akoana)
[01:20:25] *** Joins: copec (~copec@204.48.8.36)
[01:24:14] <jasom> Indeed this works even for those perverse enough to store basic timestamps with a colon separator (e.g. T12:T12 as a pair of timestamps)
[01:24:32] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:30:27] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[01:30:57] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Client Quit)
[01:31:26] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[01:32:52] *** Quits: z147 (~z147@gateway/tor-sasl/z147) (Ping timeout: 244 seconds)
[01:37:23] *** Quits: copec (~copec@204.48.8.36) (Ping timeout: 250 seconds)
[01:37:53] *** Joins: copec (~copec@home.unaen.org)
[01:39:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[01:40:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:41:51] <nirnam> I did (let ((..)) (defun ...)) to keep persistant variable between function call, am I doing it right? or does it have more convensional way to keep data between fcuntion call
[01:42:06] <phoe> nirnam: you did a closure, and that's an OK approach
[01:42:29] <phoe> if this data needs to be accessible from outside, you can instead hold it in a global variable
[01:43:27] <_death> it also plays better with redefinitions.. basically (let ... (defun ...)) is not a good idea
[01:43:57] <nirnam> I don't want to pollute the global var namespace with it internal, if this was an ok approach I'm fine with it
[01:44:41] <phoe> _death meant that every reevaluation of the LET form is going to reset your value to the initial one
[01:44:53] <phoe> whereas e.g. DEFVAR is going to hold it through redefinitions
[01:45:21] <phoe> also it's not really polluting it, just keep the global variable symbol internal to your package and don't export it
[01:45:34] <_death> there's no need to worry about "pollution" here.. just use a descriptive name (with earmuffs) and be done with it
[01:46:50] <Bike> _death: hey thanks for mentioning the new sussman book, i impulse bought it and love it so far
[01:46:59] <nirnam> I still want it to keep it internal to itself, I find it easy to reason when everything about a function is gather in the same place
[01:47:43] <Bike> just keep in mind that reevaluating/recompiling the file the definition is in will reset the state
[01:47:47] <_death> Bike: cool, it's a fun book :)
[01:49:17] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[01:49:26] <akoana> what new Sussman book are you talking about?
[01:49:42] <Bike> software design for flexibility
[01:49:50] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:49:55] <akoana> ah, thank you
[01:58:33] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 268 seconds)
[01:59:24] *** Quits: nature (~nature@mail.blazebone.com) (Remote host closed the connection)
[01:59:57] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[02:01:22] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 240 seconds)
[02:01:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:04:51] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:09:32] *** Joins: dave_ (~dave@2600:1700:38a0:3d40::49)
[02:10:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[02:10:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:11:46] *** Joins: brettgilio (~brettgili@147.182.227.11)
[02:25:18] *** Quits: jealousmonk (~jealousmo@brettgilio.com) (Ping timeout: 276 seconds)
[02:33:50] *** Quits: brettgilio (~brettgili@147.182.227.11) (Quit: The Lounge - https://thelounge.chat)
[02:41:50] *** Quits: gaqwas (~john@dynamic-095-117-123-054.95.117.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:42:54] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[02:44:12] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:45:13] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: This computer has gone to sleep)
[02:45:54] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[02:56:38] *** Joins: selwyn (~selwyn@user/selwyn)
[02:59:09] <lisp-newbie> Hi, does anyone know how to make in visible in a child class a variable which is defined in the parent?
[02:59:56] <lisp-newbie> I have a child, which in the package it's defined, I see all the slots. There are multiple slots that whenever I access them from another package are missing. I want one slot, but not the rest. Does anyone know how to do this?
[03:00:18] <lisp-newbie> I'm inherting from a package so I don't want to edit the parent class
[03:02:55] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:08:10] *** Quits: rgherdt (~rgherdt@ip5f5af456.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:08:30] <Bike> lisp-newbie: it sounds like you may be confused about how packages work. packages only name symbols. classes (and slots, and accessor functions) are not related to packages except that they may be named, and then that name is a symbol in a package
[03:08:58] <Bike> lisp-newbie: try fully qualifying the symbols you're referring to - like write mypackage::slot-a
[03:09:47] <Bike> and slots a parent defines are definitely going to be available in the child (unless maybe if you're doing exotic MOP stuff, but you aren't)
[03:11:19] <lisp-newbie> Bike, thank you
[03:11:27] <lisp-newbie> I am trying a couple of things
[03:12:29] *** Joins: karlosz (~karlosz@router.cloyne.org)
[03:13:10] *** Joins: cjb (~cjb@user/cjb)
[03:15:21] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Ping timeout: 276 seconds)
[03:15:59] *** Quits: pve_ (~pve@37-136-183-8.rev.dnainternet.fi) (Quit: leaving)
[03:16:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:16:19] <jeosol> @Bike, that's a recent book that was out this year. For some reason, I was thinking it's an old book since Sussman is one of the authors
[03:16:39] <jeosol> Bike: have you gone through the book, any comments
[03:16:53] <Bike> i'm only on the second chapter, but yes, it's new
[03:18:44] <jeosol> Bike: That's great then. I should look it into it.
[03:19:08] *** Quits: frgo (~frgo@p200300deef181d00e0da849b86d281c4.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:19:29] <jeosol> Especially seeing that some of my design decisions painted me into a corner, with the thread and race issue I was getting. I have a partial fix for now to get things moving
[03:19:33] *** Joins: Josh_2 (~user@37.25.47.130)
[03:19:34] *** Joins: frgo (~frgo@p200300deef181d009d5ea094dbc19f3c.dip0.t-ipconnect.de)
[03:20:43] <mfiano> I started reading it yesterday as well
[03:21:16] <mfiano> Was kind of annoyed at the pages of biological analogs, but i'm past that, about to where Bike is
[03:22:22] <jeosol> mfiano: ok, what's feedback so far, i guess minus the annoying part
[03:22:38] <mfiano> Haven't read enough of the meat to really comment yet
[03:22:47] <jeosol> ok
[03:26:01] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:30:37] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:35:01] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: This computer has gone to sleep)
[03:39:20] *** Joins: djuber (~user@65.79.128.64)
[03:44:42] *** Quits: Melantha (~pyon@user/pyon) (Quit: WeeChat 3.2)
[03:45:07] *** Joins: Melantha (~pyon@user/pyon)
[03:58:53] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 258 seconds)
[04:16:06] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:21:46] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[04:31:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:35:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:35:11] *** Joins: makomo (~makomo@user/makomo)
[04:45:20] *** Joins: raeda (~raeda@72.49.219.33)
[04:45:26] *** Quits: raeda_ (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[04:45:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[04:56:15] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[05:09:02] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[05:23:17] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:26:42] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[05:30:02] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:35:35] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:35:54] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[05:50:19] *** Joins: brettgilio (~brettgili@45.55.53.68)
[06:01:06] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[06:01:46] <nij-> Has anyone tried sbcl on windows? SBCL's official site says it's experimental there. What's the implementation that supports Windows the best?
[06:03:02] <hayley> I once "deployed" a program on SBCL on Windows, and it appeared to work fine.
[06:03:22] <hayley> We'll say a dozen users using the networking and threading implementation without issues.
[06:05:17] <nij-> Sounds promising.. which program is that? (a secret?)
[06:05:46] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 258 seconds)
[06:05:50] <hayley> Yes, a secret. Sorry.
[06:23:42] *** Quits: lad (~lad@user/lad) (Ping timeout: 252 seconds)
[06:24:00] <nij-> No worries :) I'm encouraged enough to get a VM and test it on Windows. Thanks!
[06:25:30] <hayley> Though I never actually tested it on Windows, funnily enough.
[06:27:14] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 258 seconds)
[06:28:09] <nij-> Oh wow. It works.. though it's sbcl 1.4.14.. it still works.
[06:28:33] <nij-> Getting my hands on windows reminds me the "good old days" :))
[06:30:00] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:30:58] *** Joins: sander (~sander@user/sander)
[06:35:04] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: This computer has gone to sleep)
[06:37:05] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:55:53] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: This computer has gone to sleep)
[06:56:08] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:56:20] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[06:56:22] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 258 seconds)
[06:56:29] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:56:42] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[06:56:51] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:57:11] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[06:57:39] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[06:58:02] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[06:58:02] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[07:01:33] *** Joins: prxq_ (~quassel@x4db34e54.dyn.telefonica.de)
[07:05:32] *** Quits: prxq (~quassel@x4db98f32.dyn.telefonica.de) (Ping timeout: 256 seconds)
[07:17:40] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:21:48] *** Quits: beach (~user@2a01:cb19:150:3400:ab61:96c6:c18c:396a) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:bf91:f21a:87da:7f64)))
[07:23:04] *** Joins: beach (~user@2a01:cb19:150:3400:bf91:f21a:87da:7f64)
[07:23:04] *** ChanServ sets mode: +o beach
[07:24:11] *** beach sets mode: -o beach
[07:26:16] *** Quits: dave_ (~dave@2600:1700:38a0:3d40::49) (Read error: Connection reset by peer)
[07:34:40] <beach> Good morning everyone!
[07:35:22] <phantomics> Morning beach
[07:36:41] <Josh_2> 'mornin
[07:44:36] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:44:40] *** Joins: karlosz (~karlosz@216.9.110.8)
[07:44:50] *** Quits: z3t0 (~z3t0@107-159-7-18.on.dsl.ebox.net) (Read error: Connection reset by peer)
[07:46:05] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:46:14] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[07:47:09] *** Joins: z3t0 (~z3t0@107-159-7-18.on.dsl.ebox.net)
[07:47:57] *** Joins: dsk (~dsk@user/dsk)
[08:13:25] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 258 seconds)
[08:20:04] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:29:58] <sm2n> Bike, I just updated to sbcl 2.1.7 and PARSE-COMPILER-MACRO from INTROSPECT-ENVIRONMENT appears to be erroring out on build, just wanted to make sure you were aware (I don't actually use the library directly, but I noticed it with quickload :verbose t)
[08:30:28] *** Joins: lad (~lad@user/lad)
[08:31:36] <Bike> i can take a look. that function is always going to be brittle as hell, though.
[08:32:47] <sm2n> I thought as much looking at it
[08:47:15] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[08:48:52] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[08:52:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[08:57:44] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: Leaving)
[09:01:06] *** Quits: karlosz (~karlosz@216.9.110.8) (Ping timeout: 240 seconds)
[09:04:41] *** Quits: nirnam (~nirnam@1.47.135.162) (Read error: Connection reset by peer)
[09:04:44] *** Joins: karlosz (~karlosz@216.9.110.8)
[09:04:48] *** Joins: nirnam_ (~nirnam@1.47.135.162)
[09:05:54] *** nirnam_ is now known as nirnam
[09:11:47] *** Joins: z3t06 (~z3t0@107-159-7-18.on.dsl.ebox.net)
[09:14:42] *** Quits: z3t0 (~z3t0@107-159-7-18.on.dsl.ebox.net) (Ping timeout: 240 seconds)
[09:14:42] *** z3t06 is now known as z3t0
[09:17:25] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:31:21] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[09:41:32] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:47:26] *** Quits: karlosz (~karlosz@216.9.110.8) (Quit: karlosz)
[09:53:15] *** Joins: karlosz (~karlosz@216.9.110.8)
[09:56:00] *** Quits: karlosz (~karlosz@216.9.110.8) (Client Quit)
[09:56:55] *** Joins: karlosz (~karlosz@75.104.67.15)
[09:57:36] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:07:51] *** Quits: karlosz (~karlosz@75.104.67.15) (Quit: karlosz)
[10:33:46] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b1c3:cd52:1265:428f)
[10:48:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[10:48:27] *** Joins: amb007 (~a_bakic@0.199.204.77.rev.sfr.net)
[10:52:44] *** Joins: gaqwas (~john@dynamic-077-004-171-029.77.4.pool.telefonica.de)
[10:53:47] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[10:54:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:54:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:55:24] *** Quits: silasfox (~sbv@xdsl-87-79-98-159.nc.de) (Ping timeout: 252 seconds)
[10:55:53] *** Lord_of_Life_ is now known as Lord_of_Life
[10:58:04] *** Joins: silasfox (~sbv@xdsl-87-79-98-159.nc.de)
[11:01:20] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[11:08:55] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:16:31] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[11:17:49] *** Joins: Wairu_Goodman (~Wairu_Goo@2804:389:e016:80fa:2cfa:3c30:c4bf:9a82)
[11:31:13] *** Quits: nirnam (~nirnam@1.47.135.162) (Quit: leaving)
[11:35:03] *** Joins: pve (~pve@87-93-198-41.bb.dnainternet.fi)
[11:43:06] *** Joins: tfeb (~tfb@88.98.95.237)
[11:45:43] *** Quits: amb007 (~a_bakic@0.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:46:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:51:32] *** Quits: gaqwas (~john@dynamic-077-004-171-029.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[11:51:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:52:58] *** tfeb is now known as tfb
[11:53:34] *** Joins: nature (~nature@mail.blazebone.com)
[11:53:53] *** Joins: selwyn (~selwyn@user/selwyn)
[11:54:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:55:47] *** Joins: rgherdt_ (~rgherdt@ip5f5af1d0.dynamic.kabel-deutschland.de)
[11:58:26] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 258 seconds)
[11:58:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:59:30] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[11:59:38] *** Joins: z3t00 (~z3t0@107-159-10-134.on.dsl.ebox.net)
[11:59:44] *** Joins: selwyn (~selwyn@user/selwyn)
[11:59:58] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b1c3:cd52:1265:428f) (Ping timeout: 258 seconds)
[12:00:21] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[12:02:16] *** Quits: z3t0 (~z3t0@107-159-7-18.on.dsl.ebox.net) (Ping timeout: 258 seconds)
[12:02:17] *** z3t00 is now known as z3t0
[12:07:51] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[12:11:21] <phoe> how is readtable-case :INVERT useful? what are its main benefits?
[12:12:23] <pjb> phoe: it provides end-to-end case sensitive symbols, while allowing lower-case entry of symbol named in uppercase.
[12:14:11] *** Joins: nature (~nature@mail.blazebone.com)
[12:14:13] <pjb> phoe: (let ((*readtable* (copy-readtable))) (setf (readtable-case *readtable*) :invert) (mapcar (function symbol-name) (read-from-string "(all-lower ALL-UPPER MixedCase)"))) --> ("ALL-LOWER" "all-upper" "MixedCase")
[12:15:01] <pjb> phoe: so that (not (eq 'foo 'FOO)) and (not (eq 'foo 'Foo)) but (eq 'if (find-symbol "IF" "CL"))
[12:16:17] <jackdaniel> phoe: it is in linked issues afair
[12:16:21] <pjb> phoe: as extensions, you may mention "modern" (allegro) mode (which is similar to :invert, but different), and eg. clisp case sensitive package (eg. symbols interned in LINUX are case sensitive, so that (symbol-name 'LINUX:open) -> "open".
[12:16:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:17:17] <lisp123> http://clhs.lisp.se/Body/m_prog1c.htm
[12:17:45] <lisp123> is the CLHS wrong re description of prog2? Based on the syntax it seems to return the result of the second form not the first form
[12:17:52] <jackdaniel> basically: make foobar to be recognized like ordinary lisp as FOOBAR and have FooBar recognized as such (for parsers of other languages, like Java)
[12:18:20] <phoe> lisp123: yes
[12:18:25] <phoe> https://www.cliki.net/ANSI%20Clarifications%20and%20Errata
[12:18:25] <pjb> lisp123: yes, it's a known spelling error. See wscl
[12:18:33] <phoe> jackdaniel: thanks
[12:18:35] <lisp123> phoe & pjb: thanks
[12:18:43] <lisp123> What's wscl?
[12:19:02] <phoe> mingus: tell lisp123 about wscl
[12:19:07] <phoe> oops sorry
[12:19:10] <phoe> minion: tell lisp123 about wscl
[12:19:11] <minion> lisp123: wscl: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/robert-strandh/Well-Specified-Common-Lisp
[12:19:42] <lisp123> thanks minion
[12:20:54] <hayley> Hm, shouldn't that link to the S-expressionists repository?
[12:20:56] <pve> phoe: at one point, I used :invert when reading code for that smalltalk-like language I'm working on. It was quite convenient to have, so I was happy that it was built-in.
[12:21:12] <phoe> pve: thanks!
[12:21:23] <hayley> https://github.com/s-expressionists/wscl
[12:21:30] <phoe> hayley: possibly
[12:22:05] <phoe> beach: what do you think? should you point the contents of your repository towards s-expressionists, or should minion be modified?
[12:23:46] <pve> phoe: oh right, basically exactly what jackdaniel said
[12:25:07] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[12:26:05] <jackdaniel> it is hinted in the linked issue, but I think that I've read somewhere about this design decision in more detail
[12:28:55] <beach> phoe: The latter now, I think.
[12:30:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[12:31:44] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Remote host closed the connection)
[12:32:01] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[12:34:04] *** Joins: rt (~robin@user/terpri)
[12:36:18] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:20] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:58] *** Quits: rgherdt_ (~rgherdt@ip5f5af1d0.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[12:40:16] *** Joins: rgherdt_ (~rgherdt@ip5f5af1d0.dynamic.kabel-deutschland.de)
[12:40:48] <phoe> minion: add wscl as "Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/s-expressionists/wscl"
[12:40:48] <minion> OK, done.
[12:40:55] <phoe> minion: tell phoe about wscl
[12:40:55] <minion> phoe: wscl: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/robert-strandh/Well-Specified-Common-Lisp
[12:41:16] <phoe> uh oh, let me try to fix minion in private
[12:41:19] <beach> Hmm.
[12:41:37] <beach> Maybe remove the old one first.
[12:42:47] <phoe> ah-ha, yes, that solves it
[12:42:48] <phoe> minion: tell phoe about wscl
[12:42:49] <minion> phoe: wscl: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/s-expressionists/wscl
[12:42:58] <beach> Perfect!
[12:43:01] <beach> Thank you!
[12:43:06] <phoe> for future reference: the command is "forget"
[12:43:18] <phoe> https://github.com/stassats/lisp-bots/blob/master/minion/minion.lisp#L348-L356
[12:46:22] <beach> I notices that minion joined other channels like #clschool as well.  That can come in very handy.
[12:46:39] <beach> ... and #sicl.
[12:48:34] *** rt is now known as robin
[12:48:38] <phoe> hmmmm
[12:48:46] <phoe> that is useful!
[12:51:20] *** Joins: makomo (~makomo@user/makomo)
[12:51:36] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:53:23] *** Quits: silasfox (~sbv@xdsl-87-79-98-159.nc.de) (Quit: WeeChat 3.2)
[12:55:15] *** Joins: notzmv (~zmv@user/notzmv)
[12:56:18] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Ping timeout: 256 seconds)
[12:58:32] <phoe> mutating a string that is a package name invokes UB, right?
[12:59:02] <beach> Good question.  I would think so.
[12:59:20] <phoe> CLHS Function PACKAGE-NAME and System Class PACKAGE do not mention this
[13:00:32] <phoe> it does confuse SBCL, as the altered package can no longer be FIND-PACKAGEd
[13:00:32] <beach> Nor does MAKE-PACKAGE.
[13:00:42] <phoe> UB enough, then
[13:01:01] <phoe> ;; maybe it's worth WSCLing this topic
[13:01:38] <beach> Absolutely!
[13:01:45] <phoe> :D
[13:05:48] <hayley> While a "controversial" change, it wouldn't hurt to have the implementation copy the string?
[13:06:47] <beach> Right, both times.  Or stick the string in read-only memory.
[13:08:06] <hayley> I see that INTERN states it is UB to alter the string that names a symbol.
[13:08:17] <hayley> "the HyperSpec page for INTERN" rather
[13:09:51] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 250 seconds)
[13:10:58] <hayley> You don't tend to INTERN much in a loop, let alone MAKE-PACKAGE in a loop, so I don't think there are huge performance raisins for not copying. But again, my suggestion is evidently not what Lisp implementations already do.
[13:13:47] <kakuhen> what's the deal behind WSCL? it looks like i misinterpreted what it was supposed to be
[13:13:48] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[13:14:10] <kakuhen> i thought it was going to be something like a modernized version of the hyperspec but without all the pesky restrictions attached to it
[13:14:25] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 268 seconds)
[13:15:33] <hayley> The result would be presentable like the HyperSpec (though, if you can use an extension which lets you add CSS to websites, it can be made to look nice), but I believe the idea is to clean up ambiguities left in the HyperSpec and ANSI standard.
[13:18:30] <kakuhen> Has there been discussion on the behavior of RANDOM yet? It seems that there could be better elaboration on "[a]n approximately uniform choice distribution"
[13:19:40] <kakuhen> say you want to generate random floats, one implementation may generate floats with uniform distribution over R but another one may not (although it may give a uniform distribution over the set of floats that it can possibly generate)
[13:19:57] <kakuhen> there's no way to tell without actually seeing how the implementation handles RANDOM
[13:28:15] <shka> kakuhen: i think that this nitpicking at this point
[13:28:39] <kakuhen> well, coming from a math background, this seems like a perfectly reasonable question to me
[13:28:57] <shka> the intention seems to be "not Gaussian distribution or anything like that"
[13:30:06] <shka> from the practical standpoint CL:RANDOM is perfectly well suited for most applications that require uniform random number, but probably not for the cryptography
[13:31:19] <shka> and i don't think that anything would change that
[13:31:54] <shka> besides, cl:hashtable can be implemented with linear scan and nobody seem to freak about it
[13:32:44] <kakuhen> OK. Let's say I decide to implement RANDOM such that we generate random floats that converge in distribution at an awfully slow rate (i.e. we need a very large N to be within  even a rather large epsilon of a uniformly distributed RV with the same image)
[13:33:06] <beach> kakuhen: The main idea with WSCL is to make sure that the Common Lisp LANGUAGE is safe, in addition to the majority of the implementations.  As it turns out, there are many situations in the standard where the behavior is undefined, and in many of those situations, it is not necessarily justified to leave the behavior undefined.
[13:33:08] <kakuhen> as long as there is a convergence in distribution, this seems to quality as "approximately uniform" but in practice that's obviously not going to be good enough for people who want something like a uniform dist
[13:33:16] <kakuhen> seems to qualify as*
[13:34:14] <kakuhen> beach: I see. So WSCL is more about clarifying corner cases of the spec, right?
[13:34:18] <shka> kakuhen: sure, in such case, you are getting bug requests to fix your cl:random
[13:35:02] <phoe> kakuhen: the fact that it's conforming doesn't mean that it's bug-free
[13:35:07] <phoe> (or useful)
[13:35:13] <kakuhen> OK there we go
[13:35:15] <beach> kakuhen: Slightly more ambitious than that.  It's about defining behavior in safe code (term defined by the glossary) in a way that most implementations already do.
[13:35:18] <kakuhen> phoe: That answers my question perfectly, actually
[13:35:38] <kakuhen> I was mistakenly believing conformity to the spec implied some level of correctness when I shouldn't have done so
[13:36:05] <phoe> you can conform by setting CL:ARRAY-TOTAL-SIZE-LIMIT to 1024 in your implementation
[13:36:21] <phoe> but you really, really do not want to do this
[13:36:32] <beach> kakuhen: I think you are confusing "correctness" with "completeness".
[13:37:23] <phoe> ;; and regarding randomness there's always this https://www.incibe-cert.es/sites/default/files/blog/comprobando-aleatoriedad/dilbert.png comic
[13:37:32] <beach> kakuhen: If the standard explicitly says that in some situation, the behavior is undefined, then any behavior an implementation chooses to do is conforming.
[13:38:16] <beach> kakuhen: But, if it is not justified to have that situation imply undefined behavior, it is better to alter the specification to specify what happens in that situation.
[13:38:37] <shka> also, specifying things like random to such details in practice often in practice enforces the implementation strategy
[13:38:48] <jackdaniel> The random numbers are too important to leave them to chance.
[13:38:56] <shka> jackdaniel: nice one
[13:39:25] <jackdaniel> thanks
[13:39:59] <kakuhen> phoe: I've seen that comic several times before, and I've always had an issue with it, but I don't want to post too much offtopic ramblings in  here, heh.
[13:40:20] <jackdaniel> right, there are passages where in the safe code virtually every implementation will signal a condition - the problem is that each implementation will signal something different since it is not specified
[13:40:41] <phoe> kakuhen: #lispcafe welcomes you
[13:45:15] *** Joins: nirnam (~nirnam@1.47.135.162)
[13:45:16] *** Joins: tfeb (~tfb@88.98.95.237)
[13:49:09] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[13:52:07] *** Joins: makomo_ (~makomo@user/makomo)
[13:54:12] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 258 seconds)
[13:55:28] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[13:56:04] <beach> kakuhen: For example, the standard for the C language leaves the behavior unspecified in many situations.  Most C compilers take advantage of this situation to do whatever gives the highest performance, resulting in a language that is unfit for most programming tasks.
[13:56:11] <beach> kakuhen: The Common Lisp standard has many such situations as well, but the tradition for Common Lisp systems is to detect the situation and signal an error, at least when performance is not an issue.  So it seems reasonable at this point to transfer this tradition to the language specification, and very little needs to be done in implementations to conform.
[13:56:16] <beach> kakuhen: A similar thing would not work in the C language, because every existing compiler would then be in violation of the new specification, and C programmers seem to not mind using an unsafe language anyway, preferring maximum performance (for reasons I fail to understand, but hey).
[13:59:06] <nij-> Can't believe this happening. WSCL might be the first major hard fork of Common Lisp. Thanks for the work <3
[13:59:30] <nij-> (I mean it's going to be an effective fork. Similar, but effectively a new standard.)
[13:59:36] <beach> It is neither a fork nor major, which is the point.
[13:59:50] <nij-> Hopefully the diff won't be too large, and will be clearly doc in a file.
[14:00:10] <nij-> Not a fork?
[14:00:48] <beach> nij-: Not really.  Since every implementation of WSCL is also an implementation of Common Lisp, I wouldn't call that a "fork".
[14:01:47] <beach> It will be similar to the "strict HTML" tag that some web sites announce.
[14:01:58] <beach> An implementation would say "WSCL conforming".
[14:02:31] <nij-> What really defines Common Lisp? Is it CLHS?
[14:02:48] <beach> Sort of.  The standard, and the Common Lisp HyperSpec is pretty much the same as the standard.
[14:04:06] <nij-> I might being too picky - forgive me - but if CLHS is the definition of CL, and if CLHS contains some error, and if WSCL corrects those errors, then an impl of WSCL isn't really an impl of CL..
[14:04:22] <nij-> (It would be better, of course. But strictly speaking it won't be a CL impl...)
[14:05:03] <beach> nij-: The ambition is not to "correct errors".  It is to define situations where the standard explicitly says the behavior is undefined.
[14:05:09] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:d560:82b8:97b4:9051)
[14:05:39] <nij-> I see
[14:05:42] <beach> nij-: So if the standard says that some behavior is undefined, and WSCL defines it, WSCL is still Common Lisp.
[14:07:22] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[14:08:19] <nij-> Yes. Going through the commit history again of WSCL indeed I haven't seen any error to be fixed.
[14:08:30] <beach> nij-: When a standard or a specification says that some behavior is undefined, it doesn't mean that an implementation of the standard has to behave in some unpredictable way.  It means that an implementation is free to behave in whatever way it sees fit.  So by taking such situations in the Common Lisp standard where a particular behavior seems reasonable, even though the standard doesn't say that, WSCL is still conforming.
[14:08:33] <nij-> My false impression could come from previous discussion..
[14:08:45] <nij-> Yep
[14:09:17] <nij-> Some time ago, iirc (hopefully), you mentioned there are some errors in clhs..
[14:09:40] <beach> Having said that, I admit that there are things in the standard, like PROG2, that are obvious mistakes, and we can correct those.  It would be uncontroversial as well.
[14:10:20] <beach> Yes, and those obvious errors have mostly been turned into WSCL issues by Bike.
[14:10:39] <nij-> Great work! :)
[14:11:06] <beach> https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/prog2-return-value for instance.
[14:11:12] <beach> nij-: Thanks!
[14:11:15] <nij-> Does the wscl team plan to document the differences between wscl and other specs?
[14:11:30] <beach> nij-: Already done.
[14:11:48] <beach> nij-: Let me see if I can find some versions of it...
[14:13:25] <nij-> I can see so far many suggestions have been made.
[14:13:38] <beach> I can't find it now, but scymtym has an HTML version of the dpANS where WSCL issues are indicated so that when the pointer is hovered above the text, you get to see the issue.
[14:13:56] <nij-> When does it plan to be released?!?! (the time when clhs will be "freed")
[14:14:17] <beach> There is no planned release date.
[14:14:23] <nij-> And do you still want to use a doc system in CL?
[14:14:39] <nij-> I see. What's the main crux now for releasing?
[14:14:51] <nij-> What are the major undone works?
[14:15:28] <beach> Each issue has to be examined.  Behavior of existing implementations must be documented.  Then, experienced Common Lisp programmers should discuss each issue and ultimately vote on it.
[14:15:58] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[14:16:09] <beach> pjb and jcowan have already started doing this with many issues.
[14:16:25] <nij-> I remember that tex macros were in your way before. Is that solved?!
[14:17:07] <beach> nij-: It doesn't have to be complete for it to be released.  It would be in several steps.  So we can just stop at some point and declare WSCL version 1 as frozen.
[14:17:44] <nij-> <3 <3 <3 2021
[14:17:54] <beach> nij-: Yes, scymtym now parses the entire dpANS specification, which is what allowed us to finally start the WSCL effort.
[14:18:18] <phoe> ultraspec done right
[14:18:31] <beach> nij-: The thing is that you won't notice the difference.  Your implementation is very likely already WSCL conforming, or nearly so.
[14:19:01] <nij-> macros issues have been solved?
[14:19:05] <nij-> phoe:  <3 <3
[14:19:35] <nij-> beach: I'm sure I won't notice XD I just hope that the old Bible can be smoothly transitioned into a new one.
[14:19:47] <nij-> The legacy must be well preserved!
[14:21:15] *** Quits: victor (sid208353@id-208353.tinside.irccloud.com) (Changing host)
[14:21:15] *** Joins: victor (sid208353@user/victor)
[14:21:37] <Shinmera> Anyone here using Parachute and GitHub actions?
[14:23:12] <lisp123> https://pastebin.com/p9u55Wfr
[14:23:48] <lisp123> To me this is bad style, what do you guys think? (The outer let can be replaced by default values or a conditional statement in the return form)
[14:30:11] <phoe> I'd LOOPify the whole thing, but that's me
[14:32:42] <beach> lisp123: What is the return value of PROCESS-WAIT?
[14:33:42] <beach> lisp123: Apparently, it can be a function, so it is not a Boolean value.  Therefor using that return value with OR or WHEN is a violation of the rule stated on page 13 of the LUV slides.
[14:33:44] <nij-> I'd use when for if, and setf for setq. But that's just me (noob). THrowing my ideas out to be flamed and learn something ;)
[14:34:32] <beach> And, yes, an IF with only a `when' branch is suspect.
[14:34:54] <beach> Er, with only a `then' branch, I mean.
[14:35:21] <beach> So either the value is used, and there should be an explicit `else' branch, or the value is not used, and the IF should be turned into a WHEN.
[14:36:26] <beach> lisp123: And what is TRUE?
[14:36:44] *** Joins: selwyn (~selwyn@user/selwyn)
[14:36:51] <beach> As in (let (... (value-1 true)) ...).
[14:37:13] <nij-> true seems to be a global variable @@?
[14:37:27] <nij-> should be named +true+ or *true* at least
[14:37:54] <beach> I see no reason for its existence at all.
[14:39:32] <beach> lisp123: Where did you find this?
[14:39:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:39:48] <nij-> Is there a better logical operator XYZ that does (or (not A) B) == (XYZ A B)?
[14:39:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:40:02] <nij-> Or rather, what's the proper name for such XYZ?
[14:40:04] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:40:09] *** Quits: z147 (~z147@gateway/tor-sasl/z147) (Quit: z147)
[14:40:27] <phoe> you want side effects only, or a meaningful return value?
[14:40:32] <lisp123> beach: On Lisp, page 280
[14:40:33] <phoe> because this looks like UNLESS
[14:40:42] <lisp123> I'm just reading the comments above now
[14:41:05] <beach> lisp123: As we have said before, the style of Paul Graham should not be used as a model for good style.
[14:41:18] <nij-> oh i see yes it's unless
[14:41:20] *** Joins: amb007 (~a_bakic@16.199.204.77.rev.sfr.net)
[14:41:35] <nij-> beach: who to turn to then?
[14:41:51] <nij-> I was trying to understand continuation.. but gave up with his presentation.
[14:41:57] <beach> nij-: As I recall, PCL is much better.
[14:42:07] <nij-> I plan to use a cl implementation for continuation and learn from there..
[14:42:26] <lisp123> beach: but that's cant be a blanket statement right :) there's always pros & cons to each style
[14:42:27] <nij-> But On Lisp covers more in depth topic than pcl..?
[14:43:13] <beach> lisp123: I don't see that.  Style is mainly about following conventions.
[14:43:30] <beach> lisp123: Which one did you take to be a "blanket statement"?
[14:43:46] <lisp123> "the style of Paul Graham should not be used as a model for good style"
[14:44:05] <beach> nij-: I didn't say you should avoid the book.  Just compensate for the often not conventional style being used.
[14:44:15] <nij-> I see!
[14:44:18] <phoe> he does a lot of interesting stuff in On Lisp that quirks brows nowadays - at least around here
[14:44:59] <beach> lisp123: Right.  But as phoe says, there are some recurring quirks that should be avoided.  For one thing, he doesn't use generic functions or standard classes.
[14:45:06] <nij-> He also had some rants about CL.. which is a question that I dare not bring up here.
[14:45:08] <nij-> I wish I dare.
[14:45:12] <nij-> OK I will do that now -
[14:45:14] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:45:33] <lisp123> beach: fair enough
[14:45:52] <phoe> nij-: well, pg in his book ANSI CL said that CLOS is too heavy and not really all that useful
[14:46:05] <phoe> and that statement did not age well
[14:46:15] <mfiano> Ha
[14:46:18] <phoe> that's the most extreme example I can find
[14:46:26] <phoe> s/find/remember off the top of my head/
[14:46:26] <beach> phoe: It sounds like he is a victim of the "Blub paradox".
[14:46:34] <mfiano> That is much more extreme than the opinions found in Let Over Lambda
[14:46:34] <phoe> beach: xD
[14:46:52] <lisp123> nij-: but he wrote two of the best books (not the best, but in the collection of books that can be deemed best), so I think he can be regarded as a supporter, regardless of any other comments he might have made :)
[14:46:56] <nij-> http://www.paulgraham.com/popular.html :: PG in this essay rants about CL and how the older lisps are better. Given his devoted writings into CL, I am very curious why those rants.. like really what did (does) CL lack of?
[14:47:09] <phoe> lisp123: sure, the books are pretty valuable and useful
[14:47:16] <phoe> just don't take them as holy scriptures
[14:47:42] <phoe> ;; mostly because the position of holy scriptures is reserved by the CL standard :D
[14:47:47] <nij-> lisp123 i think so too
[14:47:55] <lisp123> beacH: do you have a link to the LUV slides?
[14:48:15] <mfiano> https://www.iiia.csic.es/~puyol/TAPIA/transpas/Norvig-luv-slides.pdf
[14:48:24] <beach> Thanks mfiano.
[14:48:37] <lisp123> phoe: and I heard a new testatement is being done (WISL if I spelled it correctly) for those holy scriptues :D
[14:48:49] <phoe> WSCL
[14:49:01] <phoe> and it's more like an errata than a new testament
[14:49:18] <mfiano> We just need the one true new testament
[14:49:26] <mfiano> We can call it monocl
[14:49:34] <phoe> every WSCL implementation is a CL, which can't be said about every christianity being a judaism
[14:49:40] <phoe> mfiano: okay that was a terrible pun
[14:49:46] <mfiano> :/
[14:49:55] <beach> I like the name.
[14:50:09] <phoe> I like it too
[14:50:10] <lisp123> yeah it sounds nice off the tongue
[14:50:11] <nij-> x'D
[14:50:14] <phoe> but I do not like the fact that I like it
[14:50:20] <beach> Heh.
[14:50:38] <nij-> me either
[14:50:44] <beach> Anyway, all these religious references made me want to take a long-ish break.
[14:50:53] <nij-> but I do like the fact that I don not the fact that I like it
[14:51:02] <shka> my understanding is that WSCL is just maintenance revision of the standard
[14:51:07] <phoe> yes, I am sorry for those
[14:51:15] * phoe goes back to doing LaTeX
[14:51:23] <nij-> poor phoe
[14:51:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:53:46] *** Quits: amb007 (~a_bakic@16.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:54:45] <lisp123> beach: I am curious on why OR / AND should be boolean only, if I read that correctly. Isn't (or A B), better than (if A A (if B B))? As it avoids double evaluation
[14:55:08] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:55:33] *** Joins: amb007 (~a_bakic@16.199.204.77.rev.sfr.net)
[14:55:34] *** Quits: amb007 (~a_bakic@16.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:56:09] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:56:39] <phoe> AFAIU it's more about NOT than it is about OR
[14:57:34] <lisp123> Ah okay
[14:57:47] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Quit: ERC (IRC client for Emacs 27.2))
[14:57:48] <nij-> Yeah I don't understand that (not (..) (..)) either.
[15:02:24] <mfiano> That's unary?
[15:05:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 258 seconds)
[15:05:38] *** Joins: amb007 (~a_bakic@16.199.204.77.rev.sfr.net)
[15:07:17] <phoe> NOT is unary, so (not (...) (...)) is invalid CL
[15:07:51] <mfiano> That's what I meant
[15:07:59] <phoe> OK
[15:08:14] <mfiano> Also bear in mind, the LUV slides style suggestions are pretty old and a lot are out of use.
[15:10:10] <lisp123> lol...well the funny part is that was a typo in my transcription
[15:10:13] <lisp123> *ducks & runs*
[15:11:15] <nij-> Do you mean (or (not A) B)?
[15:11:23] <lisp123> yeah that's what it is
[15:11:32] <nij-> "unless"?
[15:11:32] <lisp123> I just had a typo
[15:11:50] <lisp123> unless definitely sounds better there
[15:12:41] <mfiano> IIRC it even recommends choosing either "?" and "!", over "-p" and "n" if it will improve consistency.
[15:12:42] *** Quits: amb007 (~a_bakic@16.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:12:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:12:56] <mfiano> Which is funny, because doing so makes your code inconsistent with standard predicates
[15:13:21] <mfiano> (or potentially destructive variants)
[15:14:12] <nij-> wait.. unless seems to be different
[15:14:15] <nij-> logic is hard
[15:14:23] <lisp123> very :)
[15:15:30] <mfiano> Boolean logic is simple but requires care to do anything non-trivial, and lots of unit tests :)
[15:15:44] <mfiano> Just ask phoe. Can't remember how many times I asked him to verify my boolean logic
[15:15:51] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 258 seconds)
[15:15:56] <mfiano> It happens to the best of us (not that I'm the best at anything)
[15:16:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:17:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:18:08] *** Quits: frgo (~frgo@p200300deef181d009d5ea094dbc19f3c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:18:37] *** Joins: frgo (~frgo@p200300deef181d009d5ea094dbc19f3c.dip0.t-ipconnect.de)
[15:20:43] <nij-> I see.. at least using the truth table, (or (not A) B) is (imply A B) ;; https://en.wikipedia.org/wiki/IMPLY_gate
[15:20:53] <nij-> Which is weird..
[15:26:27] <phoe> why weird
[15:28:54] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:34:43] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[15:35:19] *** Joins: tfeb (~tfb@88.98.95.237)
[15:37:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:52:11] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[16:01:35] <jackdaniel> nij-: all boolean logic operators may be expressed in a form of some combination of 'or' and 'not'
[16:01:56] <phoe> ;; no, it's 'or' and 'nand'
[16:02:13] <phoe> ;; actually 'or' and 'and'
[16:02:23] <phoe> ;; ...wait, no, I cannot into logic today
[16:02:28] <sm2n> or and not also works
[16:02:34] <jackdaniel> 'or' and 'not' are sufficient
[16:02:50] <jackdaniel> nand gates are just more convenient
[16:03:58] <jackdaniel> i.e (not (and a b)) -> (not (not (or (not a) (not b)))) -> (or (not a) (not b))
[16:04:57] <sm2n> well, even easier is that both nand gates and nor gates are individually sufficient, and making nor from not and or is trivial
[16:05:51] <sm2n> nij-, if you find that odd you should study some propositional logic, it's more useful than you'd think
[16:05:54] <jackdaniel> right you are
[16:14:14] <pjb> phoe: (nand a b) = (or (not a) (not b)) = (not (and (a b)))
[16:15:09] <pjb> and the thing with NAND, is that they have 1 less transistor than AND.
[16:15:26] <pjb> But you can also just use diodesâ€¦
[16:19:46] *** Joins: Guest40 (~Guest40@39.41.12.66)
[16:28:44] *** Joins: Bike (~Glossina@71.69.170.70)
[16:28:44] *** ChanServ sets mode: +o Bike
[16:30:07] <nij-> jackdaniel: phoe  every thing there can be expressed with NAND xD
[16:30:46] <nij-> sm2n:  oh yeah you just said that
[16:30:50] <nij-> it's fun
[16:31:05] <nij-> I wonder how non-conventional logic can bring to the humanity
[16:31:12] <nij-> s/how/what
[16:31:47] *** Quits: rgherdt_ (~rgherdt@ip5f5af1d0.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[16:31:49] <jackdaniel> fuzzy logic gives more flexibility where you have more variables (in a decision making process); also it allows you to represent uncertainity
[16:31:59] <jackdaniel> these things already have uses in technology
[16:32:50] <jackdaniel> neural networks are also kind of gates with somewhat even less comprehensible logic behind them
[16:33:33] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 276 seconds)
[16:34:13] <hayley> nij-: Perhaps implement Hegel's logic in CL?
[16:37:09] *** Quits: Guest40 (~Guest40@39.41.12.66) (Quit: Client closed)
[16:40:13] <beach> lisp123: It is not about semantics.  It's about using a value that is not a Boolean, and instead is either an interesting object, or a default value (which happens to be NIL) as argument to an operator that takes Boolean values.
[16:42:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[16:44:08] *** Joins: aeth (~aeth@user/aeth)
[16:54:29] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[16:58:57] <pjb> nij-: well, humanity uses non-conventional logic, every day.
[16:59:28] <pjb> nij-: if we only used logic, we couldn't make any generalizationâ€¦
[17:07:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[17:08:26] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[17:09:44] *** Joins: aeth (~aeth@user/aeth)
[17:10:22] *** Joins: makomo_ (~makomo@user/makomo)
[17:16:09] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:32:22] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[17:34:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:34:14] *** Quits: Wairu_Goodman (~Wairu_Goo@2804:389:e016:80fa:2cfa:3c30:c4bf:9a82) (Ping timeout: 258 seconds)
[17:34:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:36:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:42:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:43:00] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:21b3:6127:81b3:cee9)
[17:44:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[17:45:44] <nij-> Guy Steele gave a talk back in 2010 with a main message that programming language should take care of parallelism itself; programmers shouldn't worry that.
[17:46:15] <lisp123> beach: Thanks. However, I thought it was an accepted paradigm to use logical operators as control structures and not just for boolean. Per CLTL: Common Lisp provides three operators on Boolean values: and, or, and not. Of these, and and or are also control structures because their arguments are evaluated conditionally. The function not necessarily examines its single argument, and so is a simple function.
[17:46:21] <nij-> I think it would be nice if SBCL can achieve that. Imagine having SBCLs on multiple nodes in a network, handling the parallelism themselves.
[17:46:42] <nij-> The question now is that - is it possible?
[17:46:54] <lisp123> So I thin Norvig's suggestion to use and, or only for boolean values seems a bit heavy handed in that context
[17:47:05] <phoe> nij-: swank-crew maybe
[17:49:40] <nij-> O_O my eyes wide opened. Thanks phoe
[17:49:56] <beach> lisp123: Sure, but that's not the point.  The fact that an expression always yields a Boolean value is an issue that is orthogonal with the time it is evaluated.
[17:50:00] *** Joins: nature (~nature@mail.blazebone.com)
[17:50:02] <shka> nij-: bolting DSL for distributed programming is possible, but non-trivial
[17:50:36] <beach> lisp123: Here is an example of the distinction...
[17:50:54] <beach> lisp123: Suppose you have an operator like FIND-CLASS.
[17:51:28] <beach> lisp123: It can either return a class object, or a default value when there is no class with the name you supply.  That default value happens to be NIL.
[17:51:43] <beach> lisp123: But FIND-CLASS is not returning a Boolean value.
[17:52:13] <nij-> phoe:  Do you know the internal of swant-client? Like how it works?
[17:52:40] <nij-> I've asked multiple times here if there's a way to serialize functions well, and the answer was always negative.
[17:52:49] <lisp123> beach: And in this case we don't want to associated the default object with false?
[17:52:52] <nij-> In this case, how can multiple lisp repls work together?
[17:52:57] <beach> lisp123: So, if you do (let ((potential-class (find-class ...))) (when potential-class ...)) you are using a non-Boolean in a position where a Boolean should be used.
[17:53:24] <beach> lisp123: The good way of doing that is (unless (null potential-class) ...)
[17:53:59] <lisp123> I see. Because I always do the former on the basis that any value not nil is T
[17:54:00] <beach> lisp123: Because then NULL is the operator that tests whether the default value was returned, and NULL returns a Boolean, which can then be used in the UNLESS form.
[17:54:54] <beach> lisp123: I am not talking about what you always do.  I am talking about the expectations that the person reading your code might have, as discussed by Pitman and Norvig on page 13 of the LUV slides.
[17:55:15] <phoe> nij-: swank-client?
[17:55:24] <lisp123> But I can see how the second version is a bit more explicit. My bigger question is (or A B) --> If you have to separate the the test for boolean from the evaluation, doesn't that mean you have to evaluate twice?
[17:55:25] <phoe> it's a client for swank, nothing surprising there
[17:55:41] <beach> lisp123: When I see (WHEN POTENTIAL-CLASS ...) I have to stop and mentally turn it into the other variant before I understand it and that slows me down.
[17:55:48] <phoe> where swank here means swank-the-network-protocol that swank-the-server uses
[17:56:05] <nij-> Yeah. I understand the difference of slime, swank, swank-client, and swank-crew.
[17:56:06] <nij-> Hmm
[17:56:18] <beach> lisp123: You would not evaluate twice obviously.
[17:56:41] <nij-> So the code itself still have to make sure that the global state of one repl isn't used.
[17:56:53] <phoe> nij-: what do you mean, global state of one repl
[17:57:05] <phoe> if some code refers to a REPL for its global state then something is seriously broken
[17:57:30] *** Joins: rgherdt__ (~rgherdt@ip5f5af1d0.dynamic.kabel-deutschland.de)
[17:57:36] <beach> lisp123: There is always a configuration with IFs, WHENs, UNLESSes, etc, that will do the same thing semantically, and evaluate just once.
[17:57:44] <nij-> don't we usually use package-name:*global-default*?
[17:58:29] <lisp123> beach: Oh, so if I do (if A A (print "else")), A is only evaluated once?
[17:58:29] <nij-> Ah! I now see why people want purely functional code more nowadays..
[17:58:48] <nij-> It's exactly because repls and repls cannot really understand each other (serialization failure)
[17:58:59] <beach> lisp123: No, but (let ((a A)) (if a a (print "else")) ) works.
[17:59:21] <lisp123> but then you are adding some minor overhead no? since its creating an additional frame?
[17:59:24] <nij-> phoe: CLOS is huge in CL and can not be easily made purely functional iiuc..
[17:59:31] <nij-> How would we take care of that fact then?
[17:59:45] <nij-> Most of the time, CLOS info can be serialized.. but not always.
[17:59:47] <beach> lisp123: Absolutely not.  You need to know how a compiler works.
[18:00:17] <beach> lisp123: Only a very naive compiler would create a frame for the LET.
[18:00:24] <lisp123> fair enough, I guess it gets optimised out
[18:00:34] <mfiano> likely register allocated
[18:01:15] <beach> lisp123: And what do you think the expansion of (OR (F X) (G Y)) is?
[18:01:22] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:21b3:6127:81b3:cee9) (Ping timeout: 240 seconds)
[18:01:28] <phoe> nij-: uhhh, wait a second
[18:01:32] <lisp123> touche
[18:01:40] <phoe> what do you mean
[18:02:11] <phoe> you seem to be touching the topic of network communication, which requires serialization and deserialization
[18:02:21] <nij-> Yes
[18:02:34] <phoe> it's hard to have a distributed object system that spans network boundaries, but hayley has been working on one
[18:02:44] <nij-> To achieve parallel programming, we either need perfect serialization or pure functions, no?
[18:02:53] <phoe> "perfect" serialization isn't hard
[18:02:59] <nij-> ??!
[18:03:00] <phoe> it's just cumbersome at times
[18:03:06] <beach> lisp123: This discussion reminds me of the reason I introduced a compiler course in the undergraduate program.  Programmers need to know what compilers are capable of, or they will make their code worse according to an incorrect model of how things work.
[18:03:09] <nij-> How do you serialize a closure?
[18:03:10] *** Joins: silasfox (~sbv@xdsl-87-79-98-159.nc.de)
[18:03:14] <nij-> perfectly
[18:03:35] <phoe> you don't, you send the other computer a unique token that allows the other computers to refer to it
[18:03:59] <phoe> and then, when you receive that token back, then you can e.g. funcall that closure and return the result back
[18:04:54] <phoe> I remember we talked about that some time ago
[18:05:10] <hayley> phoe: You won't get a speedup from Netfarm. And the type system is mediocre.
[18:05:13] <phoe> you cannot send e.g. device access around
[18:05:34] <phoe> hayley: in this case it's less about speedup and more about possibility
[18:05:48] <phoe> since we're talking Lisp farms now
[18:06:12] <hayley> Usually when I write parallel code, it still uses shared memory (i.e. we run everything on the same process). If you only have one fast computer, you aren't making a mistake to assume shared memory in my opinion.
[18:07:11] <beach> lisp123: For example, in C my students would avoid introducing a local variable inside a `for' loop, because "then the variable had to be created in each iteration", so they increased the scope instead, making the code harder to understand.
[18:07:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Ping timeout: 258 seconds)
[18:08:34] <lisp123> beach: its a valid point - i agree with you
[18:09:09] <hayley> On the other hand, I get a sort of happy middle ground between shared memory and isolation, wherein I can run a lot of threads on a machine with one database, then I can just add more machines and partition the work. Such a paradigm (if you can call it that) could be useful.
[18:10:26] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[18:11:26] <hayley> If one, say, wrote a very parallel chess AI program, it could be useful to have a cache for intermediate values (which tend to be for eliminating redundant evaluations of the same board) on each machine.
[18:11:28] <beach> lisp123: Good.  And that's why every serious programmer should know how a modern compiler works.
[18:12:27] <hayley> phoe: Okay. I just don't like to see it brought up, because the programming style is still strange in a way. It isn't at all like programming a serial or non-replicated program.
[18:13:06] <lisp123> beach: I have started getting into that a bit. I didn't draw the connection that or macroexpands to an IF and also that a LET would be optimised (even though I read parts of that - I think it was SICP?), takes a few tries to make all the connections
[18:14:36] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-954B-dynamic.midco.net)
[18:14:42] <nij-> (Lost of connection. Back.)
[18:15:39] <hayley> Also, I am still not really working on it. So I'd prefer not to let anyone down with that information.
[18:18:18] <nij-> Is your project a secret, hayley ?
[18:18:44] <beach> lisp123: But as I recall, you have been programming for quite some time, in other languages, right?
[18:18:46] <nij-> phoe: I see that you can use unique tokens.. hmm but that also means that in a network of nodes, there should still be one MASTER?
[18:18:57] <hayley> No, this project is not a secret. I am just not motivated to work on it at all.
[18:19:04] <nij-> oh..
[18:19:22] <phoe> nij-: no, not really
[18:19:28] <phoe> look up at content-addressable networks
[18:19:33] <nij-> phoe: also, is there any implementation for cl that makes it work?
[18:19:40] <phoe> you can use e.g. a UUID that can be generated without a master key
[18:19:42] <nij-> ! lemme see
[18:19:47] <phoe> nij-: makes *what* work
[18:19:50] <lisp123> beach: No that was someone else perhaps - I have been programming for some time but _without_ any formal training, all from google :D
[18:20:42] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 240 seconds)
[18:20:45] <beach> lisp123: I wasn't referring to formal training.  Just that there are programmers out there who make a living of it, but who do not know how compilers work.
[18:20:50] <hayley> The token system is for representing a closure on another process, right?
[18:21:19] <nij-> phoe: *what* - it allows me to dispatch the work to another lisp repl
[18:21:37] <hayley> So I assume that the token would only correspond to anything for that process. It is not really a "master" process, as ...
[18:21:40] <phoe> nij-: it's called swank-crew and it runs on other implementations
[18:21:48] <phoe> there's also erlangen that is CCL-specific
[18:22:00] <beach> Plus, I also have colleagues who were against introducing a compiler course, because "these students are never going to write a compiler anyway".
[18:22:01] <hayley> Why are we talking about using another Lisp REPL?
[18:22:16] <nij-> beach: sigh
[18:22:19] <phoe> also what hayley said, REPLs are not really happening there
[18:22:20] <lisp123> beach: I'm sure there are and its an increasing amount - after all, so much is just an electron app now. And now there are pushes for 'no code' solutions & GitHub Pilot.
[18:22:27] *** Quits: silasfox (~sbv@xdsl-87-79-98-159.nc.de) (Quit: WeeChat 3.2)
[18:22:43] <nij-> hayley: I hope that a network of lisp repl can all work together toward some goal easily.
[18:22:58] <nij-> I will look into swank-crew and how to use it then. Thanks phoe !
[18:22:59] <nij-> ?
[18:23:01] *** Joins: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de)
[18:23:12] <lisp123> beach: well good you are doign it :) I'm sure your students will be very grateful to have that knowledge for the rest of their careers
[18:23:24] <hayley> As I understand it (note: I absolutely don't) you just want to run tasks in parallel. So you don't need another REPL, just some threads or something.
[18:23:40] <phoe> nij-: it seems that you want s/repl/process/
[18:24:04] <phoe> you can have ten REPLs running inside a single process, and you can have ten processes all running without a single REPL.
[18:24:11] <hayley> nij-: If they were all REPLs, then you'd have to type in the goal into each. With my 12 thread machine that would get boring quickly :)
[18:24:57] <hayley> Also, do you have more than one machine you want to give work to? If not, you don't need to serialize anything.
[18:25:18] <nij-> I'm not sure. Just thinking about the possibility ..
[18:25:40] <nij-> phoe: By process you mean a lisp process?
[18:25:50] <phoe> yes
[18:26:07] <phoe> a standalone, executing lisp image
[18:26:14] <hayley> With only one machine, it is perfectly fine to use mere threads, which share an address space, and thus you can literally just give a thread the object in question.
[18:27:38] <nij-> I see, phoe, and one working implementation is swank-crew right? I will look into it :)
[18:28:39] <hayley> If the work is trivial to parallelize, then I would look into lparallel and toy with PMAP, PREDUCE, PREMOVE-IF-NOT, etc. If not, then you might want to brush up on parallelism before anything.
[18:29:14] <nij-> Back to compiler. beach, do you recommend noobs like me to start with understanding how C codes are compiled into assembly? Or can I just try to understand how it's done for CL? I have much more patient for CL than for C.
[18:29:25] <hayley> Maybe I should write another chess AI some day. My first and last one nearly worked, but I messed up the negamax thing and it ended up playing the worst move half the time.
[18:29:33] <nij-> hayley: thanks for the keywords too!
[18:29:52] <lisp123> hayley: Are you working on rule based AI?
[18:30:22] *** Joins: srhm (~ascii@user/srhm)
[18:30:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 258 seconds)
[18:30:39] <phoe> nij-: yes, swank-crew builds over swank-client which is an implementation of swank protocol in CL.
[18:31:03] <hayley> lisp123: No, a chess program does state space search.
[18:32:28] <lisp123> hayley: Nice!
[18:32:46] <hayley> But I haven't written one for years.
[18:32:48] <beach> nij-: OK, there are (at least) two aspects to a compiler.  One is translating the source language to intermediate form.  The other is optimizing the intermediate form.
[18:33:34] <beach> nij-: The first part is specific for each language of course.
[18:33:49] <phoe> and for this particular issue you're more interested in the second aspect
[18:33:59] <hayley> Seriously, I remember messing with threading in...2018 while I was waiting for a meeting to pick classes for my final year at high school.
[18:34:05] <beach> nij-: You can do that for Common Lisp if you want, there are several ways.
[18:34:25] <beach> nij-: And, as phoe points out, for the points about OR and LET, the second part is more interesting.
[18:34:31] <phoe> stuff like narrowing variable lifetimes, figuring out constants, eliminating dead code, etc..
[18:34:36] <beach> nij-: And then the source language doesn't matter much.
[18:34:44] <phoe> a good thing is that this is mostly language-indepe--exactly what beach said
[18:35:41] <beach> nij-: I recommend Steven Muchnick's book for that.
[18:36:33] <beach> nij-: That book is a good overview of techniques, and the general descriptions are good.  But if you ever want to write a compiler, whatever you do, don't base it on his code.
[18:36:59] <shka> beach: that bad or just overly complicated?
[18:37:01] <nij-> The intermediate lang is almost universal?
[18:37:17] <shka> or just overly simplistic
[18:37:21] <beach> shka: Very bad.  The man wrote a compiler, but he doesn't know about pointers.
[18:37:42] <beach> shka: It is as if he wrote the compiler in Fortran.
[18:37:45] <shka> that is... interesting
[18:38:24] <Josh_2> casual 800+ pages
[18:38:26] <beach> nij-: All books assume a simple source language like C without closures and stuff, so languages like Common Lisp complicate stuff, but you still get the general idea from his book.
[18:38:27] <shka> moment
[18:38:45] <hayley> nij-: I think that the parts an application programmer needs to know about are relatively language independent, at least if you have a reasonable language. Otherwise hell no.
[18:38:52] <shka> old version of fortran lacked what compiler people call "pointer aliasing" right?
[18:39:05] <beach> nij-: I second what hayley says.
[18:39:08] <nij-> You mean the ~900-page book ðŸ˜‚ðŸ˜‚ðŸ˜‚?
[18:39:18] <shka> could this is be why code uses pointers in weird fashion?
[18:39:56] <beach> shka: I am talking about his data structures.  They are all arrays indexed by integers.
[18:40:03] *** Joins: cosimone (~user@151.14.38.15)
[18:40:25] <beach> shka: Exactly the way you would write a compiler if all you know is Fortran.
[18:40:26] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[18:41:16] <Josh_2> nij-: fortunately its mostly code
[18:41:17] <shka> it honestly astonish me that anybody would try to teach anything non-numeric with Fortran of all things
[18:41:20] <hayley> Well, to some extent, you do also have different intermediate languages and representations (words you don't need to care about: SSA, CPS, ANF, basic blocks, sea of nodes...) but I guess the optimisations are invariant still.
[18:41:24] <shka> but ok, i guess
[18:42:15] *** Quits: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[18:42:36] <beach> hayley: Yes, I agree.
[18:43:08] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[18:43:09] <shka> the book was first published in the 1997?!?!?!?!
[18:43:15] <shka> and Fortran?
[18:43:18] <_death> the fortran style has its own advantages sometimes, though in Lisp we tend to use (maybe overuse) the pointers approach a lot.. you can read about it in http://www.the-adam.com/adam/rantrave/st02.pdf
[18:43:46] <hayley> nij-: I would guess a book would not cover the specific IR of some real compiler, so you are welcome to imagine your own IR to think about optimisations with.
[18:43:54] <beach> shka: The man just doesn't know how to program.
[18:44:35] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Connection closed)
[18:44:36] <shka> beach: i would not dare say such thing, i mean he somehow became very well acquainted with compilers
[18:44:45] <shka> but this is just so weird
[18:44:53] <beach> Very strange indeed.
[18:45:29] <beach> But then, I hear there are people using languages such as C++ to write compiler frameworks such as LLVM.  That's weird too.
[18:46:24] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[18:47:50] <shka> yeah, C++ is not the best choice, but again given the selection of the mainstream languages and corporate politics it is understandable
[18:48:33] <shka> you wanna automatic management? C# or java, both of which are very much connected to MS and Oracle respectively.
[18:48:48] <shka> and neither is exactly a "stable standard"
[18:49:27] <beach> Like I often say, people go to a lot of trouble, and waste a lot of time and energy, to avoid learning Common Lisp.
[18:49:41] <shka> true
[18:50:52] <Josh_2> very true
[18:51:06] <hayley> According to Wikipedia, LLVM originated as a project to investigate dynamic compilation techniques. With the exception of KleinVM for Self, I don't think there were any "just in time" compilers not written in C++ at the time.
[18:52:07] <shka> hayley: i don't think that "exists only in C++" is a valid excuse
[18:53:24] <pl> I think Python would count too, even if arguably it uses older logical framework than LLVM
[18:54:08] <hayley> Ironically now it seems LLVM is too slow to use for a JIT, with the exception of optimizing the hottest loops.
[18:55:50] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[18:55:50] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:55:55] <hayley> shka: What I mean is that metacircular dynamic compilers were mostly non existent. But as pl said, Python the compiler did exist then.
[18:56:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:57:15] <beach> hayley: I have been wondering whether the slowness of LLVM is due to this phenomenon that I often cite, namely that it is impossible to write a C++ program that is both fast and modular.
[18:57:23] <scymtym> beach: Aaron Hsu's thesis has a more well-founded position on avoiding pointers in compilers than "only knowing fortran": https://scholarworks.iu.edu/dspace/handle/2022/24749 . i'm not sure whether it contains his statement about pointers being "the refined sugar of programming", though
[18:57:48] <beach> I mean, I can't imagine that the LLVM people attempted to write a monolithic program of that size.
[18:58:56] <beach> scymtym: I see, yes.  I don't think that's what Muchnick is up to though.
[18:59:43] <beach> hayley: But I haven't studied the LLVM code to see whether they make heavy use of things like smart pointers and/or reference counting.
[19:00:04] <scymtym> beach: very likely true. i was pointing out (ha) other possible reasons for wanting to avoid pointers
[19:00:21] <beach> scymtym: Yes, thank you!
[19:02:03] <beach> ... smart pointers, reference counting, or perhaps just a lot of copying to keep the reference count to 1 or 0.
[19:02:04] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[19:02:29] <beach> Either "technique" could explain a lot of slowness.
[19:04:45] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 250 seconds)
[19:06:24] <hayley> I don't know what the LLVM developers do, but I watched a presentation on the Java C2 compiler, in which Cliff said he did a lot of hash consing in order to keep everything in cache.
[19:07:13] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[19:07:24] <shka> compilers are that cache performance sensitive?
[19:07:43] <hayley> And in the context of a compiler, you could be slack and use an arena allocator, assuming no IR or other temporary data outlives compilation.
[19:08:00] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-954B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:08:07] <hayley> shka: Apparently so. But I suppose going slow hurts more in a JIT compiler.
[19:08:21] <shka> i would never thing so
[19:08:27] <shka> *think
[19:08:42] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[19:09:50] <beach> Didn't GCC used to use obstack and then switched to Boehm or something like that?
[19:10:47] <hayley> I believe so.
[19:11:31] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Remote host closed the connection)
[19:14:58] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 240 seconds)
[19:15:34] <hayley> C2 apparently uses an arena allocator, and so does the frontend of Clang.
[19:16:45] <beach> But that gives more responsibility to the programmer to determine liveness.
[19:16:59] <hayley> So garbage collection could be somewhat better on the cache, provided that there are temporary objects which die.
[19:17:37] <beach> So it's an unwanted source of the same kinds of bugs that manual memory management has.  Right?
[19:17:55] <hayley> But if the compiler doesn't run for long, and nothing outlives compilation, the programmer can be lazy and remove the arena at the end of compilation.
[19:18:00] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[19:18:19] <beach> Maybe so.
[19:20:48] <hayley> Still, you could achieve much better locality of reference if there is any garbage produced. And for sufficiently large compilation units, the memory usage would become a problem, so I doubt that LLVM solely uses arenas.
[19:21:18] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[19:21:22] <beach> Sounds right.
[19:21:49] * hayley imagines this isn't far off how an explicit memory management fan would talk about a program with a GC.
[19:21:49] <shka> maybe allocates multiple chunks
[19:23:03] <hayley> Maybe, but any chunks would only be provably dead when compilation finishes.
[19:24:08] <shka> hmmm
[19:24:31] <hayley> If there were cleanly separated passes, you could have separate allocators for each pass.
[19:24:41] <shka> yeah, wanna suggested that
[19:24:49] <hayley> Still, I expect there to be some other memory management technique.
[19:24:52] <shka> *yeah, i wanted suggest that
[19:25:15] <shka> honestly, memory management is not all that interesting :/
[19:25:23] <shka> it is like tetris
[19:25:24] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:25:28] <shka> for programmers
[19:25:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:26:11] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[19:26:29] <hayley> It's boring stuff that makes the rest of my life boring. 10/10 would study again
[19:26:31] <beach> I am always in favor of general-purpose techniques rather than special-purpose ones.  So it seems to me work should be put into a good tracing GC.
[19:26:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:28:37] <hayley> shka: w.r.t the cache, I think the example of hash consing was for type inference. As that compiler also does something like Kildall's algorithm, it also makes a fair few intermediate types, and getting that done with quickly would be good.
[19:28:37] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Ping timeout (120 seconds))
[19:34:05] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[19:49:58] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-954B-dynamic.midco.net)
[19:50:14] <nij-> Ah - the link to the internal manual for sbcl in this site is down - http://www.sbcl.org/manual/#Internals-Documentation
[19:50:22] <nij-> Does anyone have a copy of the internal manual?
[19:51:53] <nij-> Btw, as wscl is going on - can we expect a program that checks if an implementation satisfies spec wscl?
[19:52:45] *** Joins: tfeb (~tfb@88.98.95.237)
[19:52:52] <beach> Augmenting the ANSI test suite would be a good thing.
[19:54:14] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[20:00:28] *** Joins: copec (~copec@home.unaen.org)
[20:06:25] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[20:08:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:09:05] *** Joins: amb007 (~a_bakic@166.149.22.93.rev.sfr.net)
[20:09:05] *** Quits: amb007 (~a_bakic@166.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:09:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:13:46] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[20:14:04] *** Joins: amb007 (~a_bakic@166.149.22.93.rev.sfr.net)
[20:16:06] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 272 seconds)
[20:23:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:24:45] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[20:33:04] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[20:33:12] *** Joins: makomo (~makomo@user/makomo)
[20:36:54] *** Joins: ramHero (~user@90.166.59.133)
[20:37:18] *** Joins: ski (~ski@remote12.chalmers.se)
[20:38:42] *** Quits: amb007 (~a_bakic@166.149.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[20:39:18] *** Joins: amb007 (~a_bakic@201.104.204.77.rev.sfr.net)
[20:39:18] *** Joins: z3t05 (~z3t0@107-159-10-134.on.dsl.ebox.net)
[20:42:10] *** Quits: z3t0 (~z3t0@107-159-10-134.on.dsl.ebox.net) (Ping timeout: 240 seconds)
[20:42:10] *** z3t05 is now known as z3t0
[21:06:39] *** Quits: ramHero (~user@90.166.59.133) (Quit: Bye)
[21:07:52] *** Joins: santiagopim (~user@90.166.59.133)
[21:13:01] *** Quits: amb007 (~a_bakic@201.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:13:53] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 258 seconds)
[21:15:39] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:19:40] *** Joins: asarch (~asarch@2806:10ae:7:c9a9:507f:f82b:6779:bc32)
[21:21:28] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[21:27:12] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Ping timeout: 245 seconds)
[21:27:28] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[21:29:22] *** Joins: sonnaz (~sonnaz@45.33.93.30)
[21:35:29] *** Quits: santiagopim (~user@90.166.59.133) (Quit: Bye)
[21:35:42] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[21:38:21] *** Quits: sonnaz (~sonnaz@45.33.93.30) (Remote host closed the connection)
[21:39:17] *** Joins: santiago` (~user@90.166.59.133)
[21:41:14] *** Quits: santiago` (~user@90.166.59.133) (Client Quit)
[21:41:37] *** Joins: santiagopim (~user@90.166.59.133)
[21:44:34] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[21:46:59] *** santiagopim is now known as santiagopim_
[21:47:56] *** Joins: attila_lendvai (~alendvai@1F2E5CC9.dsl.pool.telekom.hu)
[21:48:03] *** santiagopim_ is now known as santiagopim
[21:55:00] *** Joins: sonnaz (~sonnaz@45.33.93.30)
[21:58:43] *** Quits: sonnaz (~sonnaz@45.33.93.30) (Remote host closed the connection)
[21:59:07] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 258 seconds)
[22:01:48] *** Joins: sonnaz (~des@45.33.93.30)
[22:02:12] *** sonnaz is now known as Guest8263
[22:03:13] *** Quits: Guest8263 (~des@45.33.93.30) (Remote host closed the connection)
[22:04:30] *** Joins: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi)
[22:04:54] *** Joins: dsz (~des@45.33.93.30)
[22:08:15] *** dsz is now known as sonnaz
[22:08:31] *** sonnaz is now known as dsz
[22:10:50] *** Parts: dsz (~des@45.33.93.30) ()
[22:24:21] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[22:30:18] *** Quits: OlCe` (~user@amontpellier-658-1-232-244.w109-210.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.1))
[22:30:32] *** Joins: OlCe (~user@amontpellier-658-1-232-244.w109-210.abo.wanadoo.fr)
[22:35:00] *** Quits: peterhil (~peterhil@mobile-access-5d6ace-52.dhcp.inet.fi) (Ping timeout: 252 seconds)
[22:49:21] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:50:24] *** Joins: tfeb (~tfb@88.98.95.237)
[22:53:02] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 252 seconds)
[22:53:54] *** Joins: trufas (~trufas@177.240.218.218)
[23:08:38] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:09:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:29:08] *** Joins: vats (~vats@103.70.83.249)
[23:29:31] *** Quits: vats (~vats@103.70.83.249) (Client Quit)
[23:29:39] *** Joins: vats (~vats@103.70.83.249)
[23:31:25] *** Quits: vats (~vats@103.70.83.249) (Client Quit)
[23:31:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:1a1:da17:4f00:366b)
[23:32:23] *** Joins: gaqwas (~john@dynamic-077-004-171-029.77.4.pool.telefonica.de)
[23:34:34] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 258 seconds)
[23:37:26] *** Joins: vats (~vats@103.70.83.249)
[23:37:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:1a1:da17:4f00:366b) (Remote host closed the connection)
[23:44:14] *** Quits: copec (~copec@home.unaen.org) (Remote host closed the connection)
[23:44:50] *** Joins: copec (~copec@home.unaen.org)
[23:46:04] <mfiano> 99999999999999999999999999999999999999999999999999999-098iu77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:06] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:08] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:10] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:12] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:14] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:16] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:18] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:20] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:22] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:24] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:27] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:28] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:30] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:32] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:34] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:36] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:38] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:40] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:42] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:45] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:46] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:48] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:50] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:52] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:54] <moon-child> 7?
[23:46:54] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:56] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:46:58] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:47:00] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:47:02] <mfiano> 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
[23:47:04] <mfiano> 77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777788888888888888888888888888888888788888888888666666666666666666666666666666666666
[23:48:10] <lotuseater> oh hm something went wrong :)
[23:49:06] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:d560:82b8:97b4:9051) (Remote host closed the connection)
[23:49:46] <_death> I expect the culprit has paws
[23:51:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:54:53] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[23:55:31] *** Joins: vats (~vats@103.70.83.249)
[23:56:34] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[23:56:43] *** Joins: vats (~vats@103.70.83.249)
[23:58:31] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[23:58:40] *** Joins: vats (~vats@103.70.83.249)
[23:58:52] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[23:59:07] *** Joins: vats (~vats@103.70.83.249)
[23:59:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
