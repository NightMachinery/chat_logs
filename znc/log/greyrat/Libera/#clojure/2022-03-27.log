[00:57:08] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 272 seconds)
[00:58:48] *** Joins: lunik1 (~lunik1@37.205.14.203)
[01:03:02] *** Quits: lunik1 (~lunik1@37.205.14.203) (Read error: Connection reset by peer)
[01:06:15] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[01:30:37] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:35:51] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[01:39:16] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[01:39:23] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Ping timeout: 260 seconds)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:29:37] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[02:59:17] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Ping timeout: 240 seconds)
[02:59:48] *** Joins: Intelo (~Intelo@user/Intelo)
[03:01:18] *** Quits: fluxit (~fluxit@techsmix.net) (Quit: Bye!)
[03:01:53] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[04:07:47] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[04:10:00] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:44:26] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:46:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[05:07:24] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Read error: Connection reset by peer)
[05:07:33] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:08:17] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[05:08:42] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:21:10] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[05:34:49] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[05:35:18] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[05:58:33] *** Joins: irontom (~user@69.174.103.168)
[05:58:37] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Quit: Leaving)
[05:58:56] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:59:50] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Client Quit)
[06:00:06] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[06:39:19] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[06:45:00] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[06:48:47] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[06:49:28] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[06:57:08] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:04:46] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[07:04:46] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[07:06:49] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[07:07:53] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[07:12:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[07:14:52] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[07:27:27] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[07:40:12] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 240 seconds)
[07:54:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:18:55] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[09:00:22] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[09:11:14] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[09:56:55] *** Quits: Intelo (~Intelo@user/Intelo) (Ping timeout: 256 seconds)
[10:55:12] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:56:20] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[11:10:17] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 252 seconds)
[11:15:14] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[11:23:54] *** Joins: Yaser_Amiri (~Thunderbi@5.208.190.100)
[11:27:36] *** Joins: Xylon (~joseph@mail.xylon.me.uk)
[11:38:35] *** Quits: op2 (~op2@user/op2) (Ping timeout: 260 seconds)
[11:53:48] *** Quits: uncleyear (~ian@178.176.79.141) (Ping timeout: 240 seconds)
[11:56:00] *** Joins: uncleyear (~ian@178.176.79.141)
[12:35:39] *** Joins: leah2 (~leah@vuxu.org)
[12:50:09] *** Joins: op2 (~op2@user/op2)
[12:51:48] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[13:08:02] *** Joins: leah2 (~leah@vuxu.org)
[13:53:43] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:58:07] *** Quits: uncleyear (~ian@178.176.79.141) (Ping timeout: 260 seconds)
[13:59:39] *** Joins: uncleyear (~ian@178.176.79.141)
[14:21:18] *** Quits: Yaser_Amiri (~Thunderbi@5.208.190.100) (Read error: Connection reset by peer)
[14:28:30] *** Joins: Yaser_Amiri (~Thunderbi@5.208.190.100)
[14:36:46] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Quit: Konversation terminated!)
[15:22:16] *** Joins: seschwar (~seschwar@user/seschwar)
[15:35:58] *** Joins: puchka (~marius@103.156.51.116)
[15:54:03] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:15:17] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:27:22] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[17:36:07] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:27:35] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 260 seconds)
[19:56:44] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[20:12:23] *** Quits: puchka (~marius@103.156.51.116) (Ping timeout: 260 seconds)
[20:12:25] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[20:16:03] *** Quits: eldritch (~eldritch@user/eldritch) (Quit: bye)
[20:16:03] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[20:20:34] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:31:27] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[20:31:28] *** Joins: eldritch_ (~eldritch@user/eldritch)
[20:33:05] *** Joins: glider (~glider@user/glider)
[20:53:22] <seebs> hmm. is there a nice idiom for (if foo (conj v foo) v) that's less repetitive or something? basically, i want to append a value if it's non-nil, but not otherwise.
[21:06:42] <Para> I can think of a worse way to write that with `or` and `some->>` :P 
[21:07:47] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:10:29] <nazarii[m]> when there are more than one such nil check I would prefer cond-> like (cond-> v foo (conj foo) bar (conj bar)) otherwise if expression is fine
[21:39:05] *** Quits: jsha (~jsha@v22017094906452957.megasrv.de) (Quit: The Lounge - https://thelounge.chat)
[21:39:41] *** Joins: jsha (~jsha@v22017094906452957.megasrv.de)
[21:43:08] <seebs> man there are just a ton of these primitives
[21:43:35] <seebs> so i reworked the word-splitter because i disliked how many calls to recur it had with basically the same arguments.
[21:43:37] <seebs> https://gist.github.com/seebs/7e27f472ec0b88b228679a5e1e434adc
[21:44:03] <seebs> this is "split line into words around spaces, but allow double quotes and backslashes to control this"
[21:52:44] <seebs> hmm. on the other hand, i can just do the two booleans instead of the fancy state and it's easier to read.
[21:53:16] <seebs> originally i had more complex nested conditions, and i was trying to compress that, but i think the reordering was sufficient and the compression of state was probably a bit much.
[21:55:10] *** Joins: puchka (~marius@103.156.51.114)
[21:58:55] <jeaye> seebs: I've implemented something very similar using just a few lines and a regex here: https://github.com/libera-programming/bayaz/blob/main/src/irc/libera/chat/bayaz/operation/util.clj#L39-L45
[21:59:21] <jeaye> You can see how the regex works here: https://regex101.com/r/GUHh5H/1
[22:00:34] <jeaye> You're welcome to copy that bit of code and regex, if you want.
[22:01:42] <seebs> huh.
[22:03:18] <seebs> i think that produces different, but also reasonable, results.
[22:03:46] <seebs> but for instance, given the input <a" "b>, it produces "a" " " "b" as outputs, and mine produces "a b" as a single word.
[22:09:40] <seebs> (i'm aiming for "basically sh quoting only without the single quote rules")
[22:10:26] <jeaye> Why would a" "b be a single word?
[22:11:18] <jeaye> Ah, because you're looking to match shell quoting. Eek.
[22:14:23] <seebs> yeah. quotes make spaces stop being magic until you're out of quoting.
[22:14:44] <seebs> the only thing worse than using a bad quoting system is using multiple incompatible quoting systems and having to remember which one this is
[22:15:40] <jeaye> With that mentality, we'd all be writing C still.
[22:15:43] <jeaye> :)
[22:16:11] <seebs> i still am sometimes, because jvm and full-size go don't target machines with 2kb of memory well
[22:16:17] <seebs> although i look longingly at tinygo sometimes
[22:16:32] <technomancy> atmega?
[22:17:27] <jeaye> Missed my point.
[22:17:59] <technomancy> I've had some fun using microscheme on 2kb devices
[22:18:01] *** Quits: puchka (~marius@103.156.51.114) (Quit: leaving)
[22:19:21] <jeaye> There are other systems languages than C which work well in low memory situations. The first of which being C++, which can be used as C with a stronger type system, RAII and namespaces. The second being Rust, which can be used much the same but with better tooling.
[22:19:53] <technomancy> I'd reach for Forth before either of those
[22:19:53] <jeaye> So going back to 1972 to write those programs isn't necessary.
[22:20:10] <jeaye> You do a lot of weird things, technomancy. :)
[22:20:56] <technomancy> at least that way you get to keep your repl
[22:20:59] <seebs> i am aware of C++ and i am using C instead as a result. :P
[22:21:00] <technomancy> it's called having standards =)
[22:21:10] <seebs> (and yeah, atmega)
[22:22:08] <jeaye> My point exactly.
[22:22:33] <jeaye> At least you're consistent.
[22:23:11] <jeaye> Curious that a C and Go dev would be interested in Clojure.
[22:23:33] <jeaye> C, Go, and Python don't fall far from the same tree. Clojure is in a different forest altogether.
[22:23:35] <seebs> i've bounced off functional programming a bunch of times, i think largely because after about a minute "lambda" stops even sounding like a word anymore
[22:24:09] <seebs> so the high-level goal is, i want to write about learning-to-program, and i want to get away from the thing where programming intro books pick The Language They're In and then the students end up sort of having a hard time thinking outside that language.
[22:24:46] <seebs> like the guy i know who, being used to lisp, wanted to read a file in python (not, like, parsing nested data structures, just "read each line"), and of course that can only be expressed recursively.
[22:25:13] <seebs> so he spent a couple of days implementing a thing like tail-calls (which he just calls "tail calls" because there is no such thing as a non-optimized tail call) in python so he could write the program at all.
[22:25:43] <jeaye> Sounds like he was more interested in writing the program than using it. There's nothing wrong with that.
[22:25:43] <technomancy> tail calls in userspace??
[22:25:44] <seebs> and i have had probably structurally similar problems reasoning well about functional programming, and i thought i should pick up something Significantly Different.
[22:26:04] <seebs> well, implementing a thing that substitutes for them, which you can sort of do
[22:26:10] <technomancy> ah, like trampolines I guess?
[22:26:33] <seebs> anyway, my default daily stuff is usually imperative languages with mutable objects and strongly-typed, so i wanted to find something functional with immutable objects and dynamically-typed.
[22:26:41] <technomancy> https://github.com/ryansuchocki/microscheme/ <- anyway this is pretty slick for projects that target atmega
[22:27:16] <seebs> also i browsed programming communities a bit, and found some cultural complaints about racket (less immutable, but otherwise a credible candidate), and decided to try clojure and have found the community cool so far.
[22:27:41] <jeaye> Sounds about right.
[22:28:28] <seebs> so yeah, it's definitely a big shift in mindset, although i'm starting to get used to it. i definitely struggle a *lot* with things like ->, cond->, and so on, because i can't easily visualize what the things these expand to look like
[22:28:53] <technomancy> cond-> is a lot weirder than ->
[22:29:26] <seebs> yeah, but they're all hard for me to get my head around when looking at them
[22:29:39] <seebs> i suspect more experienced people have a rewrite buffer
[22:29:48] <jeaye> Most of use know what that feels like.
[22:29:50] <seebs> or ... possibly not? possibly it just gets comfortable to think about those after a while.
[22:30:14] <technomancy> if you haven't learned your editor's shortcuts to expand the macro you're looking at, that would be a good first step
[22:30:22] <seebs> it's always weird to me trying to figure out what people find confusing. one of my friends commented about something or other being "one of the big a-hah moments in programming, like recursion".
[22:30:43] <technomancy> haha, yeah that's weird.
[22:30:44] <seebs> and i was utterly confused because i hadn't encountered people being particularly confused by recursion, but then i met one recently and they actually explained what they were stuck on.
[22:31:03] <technomancy> what kind of wonky-ass language lets you call anything *except* the current function; that makes no sense
[22:31:05] <jeaye> I came from systems programming. Game engines and OS kernels in C, C++, and Rust. Clojure was so very difficult to get into.
[22:32:00] <seebs> huh. i have no idea whether my editor supports macro-expansion. the main thing i care about is the ability to have Every Identifier Different Colors because that helps me read a lot and "syntax highlighting" is mostly awful.
[22:36:30] <technomancy> well, in any case you can always macroexpand in the repl
[22:38:38] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[23:06:50] <seebs> yeah.
[23:10:28] <seebs> i got actually sort of turned around in the numeric-state version of that, because i wanted to check whether something was 0, 1, or (2 or 3), so i did (condp > state ...) but it turns out that i find the < and > behavior slightly confusing to begin with, and the behavior of (condp < x ...) is apparently blowing some internal parser stack in my fuzzy little brain.
[23:10:42] <technomancy> don't use >
[23:11:12] <seebs> yeah, i ended up with (condp < x 1 :twoOrThree 0 :one :zero)
[23:11:15] <technomancy> and don't read < as "less than"; read it as "arguments-in-increasing-order?"
[23:12:05] <seebs> yeah. and the thing that throws me, then, is that i've written "condp < x", but actually, what gets evaluated is "< 1 x".
[23:12:16] <technomancy> honestly I had to go look up condp
[23:12:18] <seebs> yeah
[23:12:19] <technomancy> I don't think I've ever used it
[23:12:26] <technomancy> the code would probably be clearer with regular cond IMO
[23:12:45] <seebs> yeah
[23:12:53] *** Quits: Yaser_Amiri (~Thunderbi@5.208.190.100) (Quit: Yaser_Amiri)
[23:13:01] <seebs> i eventually dropped the combined-single-state and went back to two booleans
[23:13:06] *** Joins: Yaser_Amiri (~Thunderbi@5.208.190.100)
[23:13:17] <seebs> but the single state helped me think about it in a way that made it easier to see how to reshuffle and combine things.
[23:16:03] <technomancy> oh geez the :>> thing in condp is WEEEEEIRD
[23:16:20] <technomancy> what the hell
[23:16:27] <technomancy> that should be two separate macros
[23:18:54] <seebs> what the heck
[23:20:03] <seebs> huh
[23:20:26] <seebs> so in that let, there's a binding to "emit" of "(fn emit [...) ...)"
[23:20:33] <seebs> which i assume is done so it can recurse
[23:21:01] <seebs> but also it calls itself not-with-recur, so i suppose the lesson here is that a long enough condp can run out of stack
[23:21:16] <technomancy> if you tried to suggest that :>> stuff as a new feature in clojure today you would get tossed out of the room before you could finish your sentence
[23:22:13] <seebs> cowards
[23:22:24] <seebs> it's interesting to me that it's the *result* of the predicate
[23:22:32] <seebs> huh
[23:22:53] <seebs> well i sort of see a way to use this. say you have a possibly-empty list.
[23:23:27] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:23:31] <seebs> then in a condp you can do something like "(first list) :>> (fn [cmd] ...)" that will get invoked with the first word if and only if the first word is non-nil/non-false.
[23:25:01] *** Joins: justOkay (~justache@user/justache)
