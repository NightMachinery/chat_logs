[00:03:32] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:04:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:07:44] *** Quits: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[00:10:23] *** Joins: asarch (~asarch@189.250.218.98)
[00:12:20] *** White__Flame is now known as White_Flame
[00:12:35] *** Quits: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[00:19:06] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[00:26:56] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[00:31:37] *** Quits: tanners (~tanners@2600:1003:b11a:a16f:d0aa:19cc:13f7:58b7) (Ping timeout: 240 seconds)
[00:32:37] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:32:38] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[00:34:13] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:35:09] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:37:27] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:37:38] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:38:58] <yitzi> Bike: beach: Figured out to capture the source code references by abusing the stream style stuff I came up with.
[00:39:16] <yitzi> Oops. Wrong channel
[00:43:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[00:49:33] *** Quits: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de) (Remote host closed the connection)
[00:50:32] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[01:02:10] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:02:42] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[01:03:37] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[01:03:42] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[01:04:00] *** Joins: Josh_2 (~user@37.25.47.130)
[01:04:33] <Josh_2> Hi, is Dex actually faster than Drakma if the connection pool doesn't work?
[01:06:32] <Josh_2> Drakma also supports reusing a connection, pretty sure thats how Dex gets the edge on it in the benchmarks
[01:07:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:07:19] <Josh_2> I think I will just abstract away the differences so I can swap from drakma to dex if I want
[01:07:25] *** Joins: mcoll- (~mcoll@91.116.34.166)
[01:09:20] <etimmons> Josh_2: Good question. I think in the Dex presentation I saw floating around, it claimed there was.
[01:09:32] <etimmons> But I remember thinking it didn't look like much to write home about
[01:09:45] * etimmons could very well be misremembering, though
[01:10:13] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[01:10:14] <Josh_2> https://github.com/fukamachi/dexador#benchmark
[01:10:36] <phoe> I have a possibly cyclic graph data structure that I would like to get a modified copy of, where "modified copy" means that I'd like some of the nodes to be different, and also that I want not to mutate the original, and also that I want to maximize structure sharing wherever possible. Is anyone aware of any Lisp code that will help me do that?
[01:11:06] <etimmons> I can't work on it for a bit, but I've got a connection pool built on top of drakma. I'm working to get it pulled out into a sensible library and also married with schannel for TLS on Windows
[01:11:28] <phoe> a simple example of what I'd like to do is turning (1 2 3 . #1=(4 5)) into (1 2 :three . #1#)
[01:11:42] <theothornhill> phoe: FSet? Sounds like a persistent data structure, doesn't it?
[01:11:47] <etimmons> When it's in a clean-ish state, I'm planning to reach out to see if it should be incorporated into drakma itself or live as a wrapper around it
[01:11:55] <Josh_2> In this case there is a serious chance that I will be making a lot of HTTP requests (webhooks) to listeners
[01:12:01] <phoe> a slightly more involved one is turning #1=(1 2 3 4 5 . #1#) into #2=(1 2 :three 4 5 . #2#) because then everything needs to be copied due to a cycle
[01:12:31] <phoe> theothornhill: yes, except the catch is, I'd like to use standard Lisp data structures for the nodes - conses, vectors, standard objects
[01:12:41] <phoe> hence it sounds more like a GF protocol to participate in if anything
[01:13:05] <phoe> also I have no idea if fset permits cycles
[01:13:11] <theothornhill> I see
[01:14:04] <etimmons> Josh_2: This is the presentation I was thinking of. https://www.slideshare.net/fukamachi/dexador-rises starts on slide 49
[01:14:06] <phoe> if there's no code, is anyone aware of already existing algorithms that I can try to implement for doing that?
[01:15:45] <Josh_2> etimmons: Thank you :)
[01:15:59] <Josh_2> It would be nice if he fixed connection pools :facepalm:
[01:16:16] <Josh_2> I think I will just go with Dex
[01:16:22] <phoe> everyone can fix it, actually! it's free software
[01:16:44] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:19:13] <Josh_2> In principle
[01:20:00] <theothornhill> Josh_2: Wasn't there a new drakma maintainer just recently?
[01:20:44] <Josh_2> etimmons: have you ever used Snooze?
[01:22:46] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:23:14] <Josh_2> I think I will use Snooze instead of Carlyle. If I was to modify Carlyle it would just end up like Snooze anyway
[01:23:52] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:25:28] <Josh_2> Carlyle works great for less complex applications, but the one I have to build now is going to end up exceptionally complicated I think
[01:25:40] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:25:53] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:28:58] *** Joins: citizenandrew (~citizenan@216.13.217.230)
[01:30:24] <citizenandrew> Josh_2: If you really want to use Dexador and have a working connection pool, you could try https://github.com/ajberkley/dexador ... Fukamachi isn't answering pull requests...
[01:30:28] <_death> phoe: I think it depends on how you actually want to "modify" it.. if it's a kind of sublis that works on graphs, that's one thing.. if you want to substitute for a specific element not necessarily based on its value, it's another..
[01:32:28] <phoe> let me split this into two parts
[01:33:26] <phoe> part one: I want to make a part of the whole graph "fresh", where the part involves making a shallow copy of everything between some root vertex of the graph and one or more "target" vertices that I want to mutate in part two
[01:33:52] <Josh_2> citizenandrew: hmm I could
[01:33:58] *** Quits: VincentVega (~user@212.97.1.105) (Quit: ERC (IRC client for Emacs 27.2))
[01:34:06] <phoe> because of cycles, such copying also involves copying everything that refers to any of the copied vertices, because otherwise they'd refer to the "old" version
[01:36:14] *** Joins: Oladon (~olad@98.43.81.226)
[01:39:07] <Josh_2> For now I will just use normal dex with :use-connection-pool nil and later if a PR is accepted or a permanent fork is made I will change this
[01:40:15] <_death> not sure I understand.. since each node can presumably refer to its children, when you replace a child what do you think should happen?
[01:40:26] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[01:40:41] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[01:41:41] <phoe> a simple example of what I'd like to do is turning (1 2 3 . #1=(4 5)) into (1 2 :three . #1#)
[01:41:56] <phoe> so in that example, the conses whose CARs and 1 and 2 need to be copied
[01:42:13] <phoe> same with the cons whose CAR is 3, we need to copy it and its new CAR becomes :THREE
[01:42:22] <phoe> but #1# doesn't need to be copied
[01:42:50] <phoe> s/whose CARs and/whose CARs are/
[01:42:52] <citizenandrew> Josh_2: also make sure if you do not explicitly set :keep-alive nil, beware that you should close the streams that are returned to you... there is no auto-closing / finalizing.
[01:42:58] <etimmons> Josh_2: No, never tried snooze nor carlyle
[01:43:07] *** Joins: attila_lendvai (~alendvai@220.33.199.178.dynamic.wline.res.cust.swisscom.ch)
[01:43:11] <Josh_2> citizenandrew: is this your fork?
[01:44:27] <citizenandrew> Josh_2: yes... that's me.  I made the changes because I saw some complaints on irc or reddit about dexador being broken so I figured it was worth fixing... but now I've got a bad taste in my mouth because there's no response to my PR.
[01:44:55] <Josh_2> I see, I left a comment on your PR, I think if it is not accepted than you should hard fork and rename honestly
[01:45:06] <_death> phoe: in this example there is no cycle, so a simple sublis could work
[01:45:08] <etimmons> citizenandrew: I got a PR merged to dexador back in December.
[01:45:41] <etimmons> sometimes they can take a while
[01:45:55] <phoe> _death: yes, but then #1=(1 2 3 4 5 . #1#) should turn into #2=(1 2 :three 4 5 . #2#)
[01:46:00] <Josh_2> Thank you for your work citizenandrew :)
[01:46:44] <phoe> and things like #1=(1 2 #1# 4 5) â†’ #2=(1 :two #2# 4 5) and so on
[01:46:48] <citizenandrew> etimmons: OK.  I'll keep my hopes up!
[01:47:22] <phoe> I need to figure out which part of the structure to copy, then do the copying while making the modifications, then return the modified version
[01:47:28] <phoe> s/which part/which parts/
[01:48:54] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:51:37] <_death> phoe: in both of these you need to recreate the whole structure, correct? and #1=(1 #3=(a b) #1# 4 5) => #2=(1 #3# #2# 4 5)? but #1=(1 #3=(a b #1#) #1# 4 5) => #2=(1 (a b #2#) #2# 4 5)?
[01:51:56] <phoe> _death: the (4 5) can be shared
[01:52:28] <_death> right
[01:52:32] <phoe> (a b) too
[01:52:42] <phoe> since it doesn't cause a cycle to happen
[01:52:52] <phoe> it's a "leaf", in a way
[01:53:13] <_death> in my first example yes (hence #3#) but in my second example?
[01:53:13] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:53:28] <phoe> oh, second example - yes, (a b #1#) needs to be copied
[01:53:50] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:01:34] <_death> (my examples should've contained a suitable modification to justify the copying)
[02:02:01] *** Parts: citizenandrew (~citizenan@216.13.217.230) ()
[02:04:28] <phoe> that's the easy part, I know what you meant
[02:06:12] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Remote host closed the connection)
[02:06:53] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[02:07:50] *** Quits: attila_lendvai (~alendvai@220.33.199.178.dynamic.wline.res.cust.swisscom.ch) (Ping timeout: 250 seconds)
[02:08:11] <_death> so you need to determine whether any of the descendants refer to the parents, and if so, replace those parents and so on
[02:08:18] <phoe> yes
[02:08:42] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[02:09:00] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[02:09:29] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:11:29] <_death> I'm thinking connected components with cut points..
[02:12:47] <phoe> OK, that's an idea
[02:14:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:16:15] *** Joins: mrmr (~mrmr@user/mrmr)
[02:16:43] <_death> maybe a search can result in a ready made algorithm, but otherwise I'd just try to work it out on paper
[02:16:53] <phoe> yes
[02:17:02] <phoe> I'll try doing that tomorrow when I'm a bit fresher
[02:17:05] <phoe> thanks!
[02:17:32] <_death> I'm already spent today ;)
[02:18:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:21:46] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:22:48] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:24:45] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:36:46] *** Quits: mcoll- (~mcoll@91.116.34.166) (Ping timeout: 256 seconds)
[02:46:37] <sveit_> Hi. I saw a statement that "displaced arrays perform poorly" here: https://stackoverflow.com/questions/40810796/displaced-multidimensional-arrays-in-common-lisp#comment68846900_40810796 . Is someone here familiar with why this would be true?
[02:47:31] <sveit_> The reason I ask is that it is of course fairly simple to just implement an additional object that can store information on the "view" I'd like to provide on a flat array (as suggested in that comment) but why would my user-space implementation be better than what is in the compiler?
[02:47:58] <Bike> well, it kind of wouldn't be
[02:48:07] <Bike> which is why they usually perform poorly
[02:48:30] <sveit_> (in case it's not claer, that link is directly to the comment by someone named Dan Robertson that has the statement i'm confused about)
[02:49:15] <Bike> so the problem is, say we have (aref a ...) in the code. if the compiler knows a is NOT displaced, that's pretty straightforward - bounds check and a memory read
[02:49:36] <Bike> but if it could be displaced, it has to compile in a check for that, and then code to loop through displacements to get the underlying array
[02:50:01] <Bike> with what the comment describes, you'd have one simple vector which can be accessed quickly, and then you just briefly compute the index you actually want
[02:50:36] <mfiano> Implementations just don't optimize everything they could.
[02:50:50] <mfiano> On SBCL at least, bounds checking occurs on both
[02:51:03] <sveit_> Bike: i think you have revealed that I don't understand what array displacement means :) I thought it was exactly what you described in your last statement: a backing vector and some new procedure for computing indices
[02:51:20] <Bike> sveit_: the trick is that you can displace to another array that is itself displaced
[02:51:38] *** Joins: igemnace (~ian@user/igemnace)
[02:52:52] <sveit_> Bike: sure, but doesn't the procedure "close" on itself? meaning if A0 is the original array, A1 is displaced to A0, and A2 is displaced to A1, can't the implementation just treat A2 as displaced to A0?
[02:53:13] <Bike> no, because the array-displacement function allows you get at the underlying array
[02:53:17] <Bike> clhs array-displacement
[02:53:17] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_ar_dis.htm
[02:53:43] <Bike> and, for example, if A1 is adjusted, A2 needs to reflect that adjustment, even if A0 itself has not changed
[02:56:36] <sveit_> Bike: ah, thank you very much, this makes a lot more sense now.
[02:57:10] <Bike> think the standards committee should have put a little more thought into this thing, honestly
[03:00:22] <Catie> Adjusting a displaced array is something they actually put a decent bit of thought into, there's an issue writeup about it
[03:00:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[03:01:24] <Bike> sure, i mean it all works, just not very well.
[03:01:38] <Catie> Oh well. Yeah okay, hard to argue with that
[03:02:10] <Bike> something like a flat array view might have been both useful and efficient.
[03:02:25] *** Joins: thomp (~thomp@162.212.34.219)
[03:03:14] <Catie> Like row-major-aref, but for displacement purposes?
[03:04:36] <Bike> no, i mean instead of having displaced arrays like they exist, having a more limited construct that can't get recursive
[03:04:59] <mfiano> Wish we had conformal displacement
[03:06:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:07:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:704f:b8f4:696c:16cc)
[03:07:47] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[03:08:02] *** Joins: tanners (~tanners@2600:1003:b10c:b4b6:4e2:294a:11a:8db2)
[03:10:04] *** phadthai_ is now known as phadthai
[03:17:35] <aeth> there's no incentive to optimize displaced arrays because nobody uses displaced arrays... because they're not optimized
[03:18:10] <aeth> the idiomatic way of thinking is start/end indices and almost everything in the standard library has it, as well as any well-written third-party library
[03:21:57] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:22:52] *** Joins: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de)
[03:24:35] <Bike> i mean, how would you optimzie displaced arrays
[03:25:02] <Bike> given that, in general, you have this indefinite-length chain of displacements to navigate
[03:26:13] <aeth> if the problem is the function ARRAY-DISPLACEMENT, and someone really wanted to optimize displaced arrays, couldn't they just optimize them if ARRAY-DISPLACEMENT cannot possibly show up in the program?
[03:26:30] <aeth> couldn't really do that in current implementations, but maybe in a conforming one
[03:27:48] <Bike> did you read the message i wrote after that one
[03:27:54] <_death> Bike: what about keeping both the immediate displacement and the farthest one possible, and recomputing the latter when needed
[03:28:13] <Bike> yeah i guess you could have each array maintain weak backpointers to every array that's displaced to it
[03:28:33] <Bike> to trigger the recomputation
[03:31:11] <Bike> aeth: and for the record, it's more or less impossible (in general, actually impossible, for computability reasons) for a compiler to determine that some function will never be called, in a world where any function could be redefined to do (eval (read))
[03:32:41] <aeth> Bike: you do something like what JITs do... you are prepared to deoptimize if necessary. Easier task than JITs because you'd only need to do it on the equivalent of C-c C-c or C-c C-k
[03:32:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:33:08] <aeth> Bike: but when something has EVAL obviously you don't even try
[03:33:14] <aeth> If it's unknown, it's treated as if it calls it
[03:33:36] <Bike> yeah great, so you can't optimize if an array is fed to any nonstandard function
[03:34:30] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:40:15] *** Quits: pve (~pve@178-55-23-137.bb.dnainternet.fi) (Quit: leaving)
[03:41:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:46:24] <_death> maybe instead of backpointers some signature can be kept?
[03:48:44] <_death> I suppose the backpointers approach would be overall better, speedwise
[03:50:38] *** ryanbw1 is now known as ryanbw
[03:50:58] *** Quits: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de) (Ping timeout: 250 seconds)
[03:54:17] *** Quits: tanners (~tanners@2600:1003:b10c:b4b6:4e2:294a:11a:8db2) (Ping timeout: 240 seconds)
[03:54:20] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: WeeChat 3.3)
[03:54:36] *** Joins: selwyn (~selwyn@user/selwyn)
[03:56:17] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[03:58:24] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[04:03:21] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[04:05:04] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[04:07:03] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:704f:b8f4:696c:16cc) (Remote host closed the connection)
[04:19:27] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[04:19:44] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:19:52] <nij-> Hello! Is it possible to define setf-expander that does file reading and writing on the file?: https://bpa.st/LMUA
[04:21:29] <nij-> Hmm what I typed cannot be possible. But this could:
[04:21:33] <nij-> (setf (getf (get-sexpr "/tmp/record.sexpr") :a) 8)  ; => 8
[04:26:08] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 256 seconds)
[04:26:47] *** Joins: mcoll- (~mcoll@91.116.34.166)
[04:29:22] <_death> (defsetf get-sexpr write-sexpr)
[04:38:02] *** Quits: mcoll- (~mcoll@91.116.34.166) (Ping timeout: 256 seconds)
[04:41:10] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[04:43:45] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:48:25] <nij-> Amazing. Thanks! I was trying (defun (setf ..)).
[04:53:27] <_death> that could also work
[04:56:43] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[04:59:08] *** Joins: s-liao87 (~s-liao@101.86.96.21)
[05:01:37] *** Quits: jpl01 (~user@2001:16b8:497a:cd00:3d07:f3b:5cfa:3fa9) (Remote host closed the connection)
[05:02:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:11:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:15:10] *** Joins: akoana (~ah@user/akoana)
[05:21:24] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: back later maybe)
[05:23:51] <nij-> While it works, it's kinda leaky.. especially used with access:accesses.
[05:24:42] <nij-> I might try another way. Instead of defsetf, is there a way to monitor the value cell of a symbol, so that whenever the value cell is changed, we invoke a certain function?
[05:25:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:26:36] <_death> define-symbol-macro?
[05:27:53] <nij-> Does that help add a hook to the value cell watcher?
[05:28:15] <_death> no.. there's no standard hook for that
[05:28:52] <Catie> You could define a :before method on the (setf ...) function, but that only handles the case where it's mutated via setf
[05:30:09] <moon-child> (define-symbol-macro x '(get-x)) (let (x) (defun (get-x) x) (defun (setf get-x) (nx) (notify-about nx)))
[05:31:03] <nij-> Feels like dark magic. Lemme think..
[05:31:15] <moon-child> err, no quote
[05:32:09] <nij-> Maybe I can use MOP for this too.
[05:32:18] <moon-child> could also do it without the symbol macro, and simply use get-x
[05:32:20] <moon-child> no magic required
[05:33:49] <nij-> I don't understand the syntax (defun (name) ..).
[05:37:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:39:19] <nij-> moon-child: Oh I see I think you mean: (let (x) (defun get-x () x) (defun (setf get-x) (nx) (setf x nx)))
[05:40:37] <moon-child> oh, oops, my bad, yes
[05:41:08] <moon-child> tired, and I was thinking about wrapping the parentheses around (setf get-x), my fingers got ahead of me
[05:48:53] *** Joins: thomp (~thomp@162.212.34.219)
[05:51:12] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:56:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[05:59:14] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 250 seconds)
[06:00:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[06:02:26] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Ping timeout: 245 seconds)
[06:08:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:11:58] *** Quits: s-liao87 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:16:19] *** Joins: beach` (~user@lfbn-bor-1-623-116.w86-213.abo.wanadoo.fr)
[06:17:37] *** Quits: beach (~user@2a01:cb19:150:3400:a173:2cef:ba0f:9b68) (Ping timeout: 240 seconds)
[06:18:04] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[06:23:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[06:23:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:27:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[06:28:45] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:37:12] *** Joins: occ (~occ@user/occ)
[06:56:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:57:05] *** Joins: Bike (~Bike@71.69.170.70)
[06:57:05] *** ChanServ sets mode: +o Bike
[06:58:16] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (Ping timeout: 245 seconds)
[07:00:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:01:14] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[07:02:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:06:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:10:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:12:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:41] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:23:18] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[07:23:53] *** beach` is now known as beach
[07:30:22] <beach> Good morning everyone!
[07:42:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247)
[07:43:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[07:56:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:56:39] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:59:13] *** Joins: pillton (~user@193-116-203-249.tpgi.com.au)
[08:15:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:20:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:25:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:30:32] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:31:32] *** Quits: semz_ (~none@user/semz) (Ping timeout: 240 seconds)
[08:31:44] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:42:18] *** Joins: occ (~occ@user/occ)
[08:43:52] *** Joins: semz_ (~none@user/semz)
[08:47:50] *** Joins: igemnace (~ian@user/igemnace)
[08:51:16] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[08:57:31] *** Joins: occ (~occ@user/occ)
[09:05:00] *** Joins: asarch (~asarch@189.250.218.98)
[09:06:06] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[09:07:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[09:12:34] *** hugo- is now known as hugo
[09:22:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:23:35] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Remote host closed the connection)
[09:24:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[09:25:20] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:28:01] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:29:31] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 245 seconds)
[09:34:06] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[09:41:07] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[09:41:17] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[09:53:11] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[09:55:15] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:57:56] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[09:58:13] *** Joins: notzmv (~zmv@user/notzmv)
[09:58:34] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[09:58:53] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:59:22] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[10:09:54] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:91de:85f0:a816:591c)
[10:10:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:14:05] *** semz_ is now known as semz
[10:14:42] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[10:17:18] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[10:23:22] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[10:28:03] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[10:28:43] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[10:30:01] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:38:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:40:03] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:40:23] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:46:05] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:46:27] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:47:24] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[10:49:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:49:41] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:50:58] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5c41:3f00:25ec:9b4a:82e1:98b2)
[10:54:41] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:02:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:12:28] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:13:06] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[11:13:26] *** Joins: ahammer (~ahammer@157.122.68.247)
[11:14:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:15:07] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[11:15:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:21:38] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[11:26:16] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[11:27:39] *** Joins: occ (~occ@user/occ)
[11:27:48] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[11:37:12] *** jdz_ is now known as jdz
[11:40:04] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5c41:3f00:25ec:9b4a:82e1:98b2) (Ping timeout: 256 seconds)
[11:41:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:41:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:42:54] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c5fe:2ecc:be3b:db98)
[11:46:00] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e0:a7ed:607d:81a8:b645:3a30)
[11:48:00] *** Quits: ahammer (~ahammer@157.122.68.247) (Quit: Leaving)
[11:50:18] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c5fe:2ecc:be3b:db98) (Ping timeout: 268 seconds)
[11:51:22] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:51:53] *** Joins: pve (~pve@178-55-65-112.bb.dnainternet.fi)
[11:52:28] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[11:54:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:56:16] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:91de:85f0:a816:591c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:56:18] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:56:31] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:01:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:05:25] *** Quits: varjag (~user@188.95.247.247) (Ping timeout: 240 seconds)
[12:12:57] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:1910:eb62:16d3:8874)
[12:13:29] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[12:15:10] *** Joins: Jing_ (~hedgehog@240e:390:7c53:a7e1:dddb:2811:79d2:379)
[12:18:17] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:1910:eb62:16d3:8874) (Ping timeout: 240 seconds)
[12:22:44] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[12:23:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[12:24:15] *** Joins: gaqwas (~john@dynamic-077-009-125-230.77.9.pool.telefonica.de)
[12:27:10] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[12:37:37] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[12:48:29] *** Quits: gaqwas (~john@dynamic-077-009-125-230.77.9.pool.telefonica.de) (Remote host closed the connection)
[12:54:04] *** Joins: scymtym (~user@2001:638:504:20e6:d2b:67db:8460:2e05)
[12:59:20] *** Joins: unyu (~pyon@user/pyon)
[13:01:18] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[13:04:23] *** Joins: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[13:04:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:05:16] *** Joins: kevingal (~quassel@149.157.111.113)
[13:05:35] <nij-> Those who have used accesses - while it is great to access a place given by a variable, it doesn't seem to be working for a general place form like this
[13:05:40] <nij->  (setf *X* '(:a 1)) (setf (access:accesses (nth *X* 0) :a :b) 10) ;; error
[13:06:51] <nij-> If I want to extend the behavior, I need to hack the function accesses to expand the inner forms, right? Is it possible in principle?
[13:09:58] *** Quits: kevingal (~quassel@149.157.111.113) (Ping timeout: 250 seconds)
[13:10:06] <nij-> Grrrr stupid me. It should have been (nth 0 *X*).. please ignore.. :(
[13:10:22] *** Joins: kevingal (~quassel@2001:770:c0:401:7d0b:379:62a3:e7c4)
[13:13:59] <nij-> Ok.. without stupid mistake (hopefully), here's a case that's expected to work but not:
[13:14:05] <nij->  (setf *X* '((:a 1))) (setf (access:accesses (nth 0 *X*) :a :b) 10) ;; => error
[13:14:36] <nij-> It seems to be a complicated problem to expand (nested) setfable forms correctly.
[13:14:50] *** Joins: gaqwas (~john@dynamic-077-009-125-230.77.9.pool.telefonica.de)
[13:26:17] <pve> nij-: don't know about access, but it looks like you're trying to modify a quoted list
[13:26:21] <phoe> nij-: found an issue
[13:26:33] <phoe> other than modifying a literal
[13:26:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:26:52] <phoe> first, (setf (access:accesses (nth 0 *X*) '(:a :type :plist)) nil) because it is 1 at the moment
[13:27:10] <phoe> then, (setf (access:accesses (nth 0 *X*) '(:a :type :plist) '(:b :type :plist)) 10) to push into the new plist
[13:27:25] <phoe> the error is because access is trying to treat 1 as a plist
[13:27:36] <phoe> because, seemingly, you tell it to treat it like a plist
[13:29:27] <phoe> seems that you need to maintain some sort of typing discipline while playing with
[13:29:49] <phoe> either that, or implement type errors in access itself - it should tell you that it cannot treat 1 as a plist
[13:33:47] *** Quits: pillton (~user@193-116-203-249.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[13:37:48] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Quit: Leaving)
[13:39:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:49:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:57:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:58:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:04:47] *** Joins: crunchdef (~crunchdef@79-66-0-136.dynamic.dsl.as9105.com)
[14:08:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:09:33] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:15:50] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e0:a7ed:607d:81a8:b645:3a30) (Read error: Connection reset by peer)
[14:18:07] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677)
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:27:47] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:27:53] *** Joins: amb007 (~a_bakic@59.14.23.93.rev.sfr.net)
[14:40:16] *** Joins: mcoll- (~mcoll@70.34.211.89)
[14:40:35] <nij-> I see, phoe, that makes sense.
[14:43:10] *** Quits: amb007 (~a_bakic@59.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:43:20] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:45:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:49:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:53:33] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[15:04:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:11:37] *** Quits: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[15:29:09] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:30:54] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:32:21] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[15:33:15] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677) (Remote host closed the connection)
[15:33:32] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677)
[15:33:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:55:26] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677) (Read error: Connection reset by peer)
[15:55:43] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677)
[16:03:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[16:05:26] <pjb> nij-: have a look at https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/file.lisp#L248 & following.
[16:05:45] <pjb> nij-: what's wrong with http://groups.google.com/group/comp.lang.lisp/msg/1bab4b5bae1fdca3 http://groups.google.com/group/comp.lang.lisp/msg/190d771c0e033a1c ?
[16:07:06] <pjb> nij-: also, access seems to be like & and defref: http://informatimago.com/articles/usenet.html#C-like-pointers-in-Lisp
[16:10:57] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:11:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[16:15:38] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[16:29:56] *** Quits: kevingal (~quassel@2001:770:c0:401:7d0b:379:62a3:e7c4) (Ping timeout: 245 seconds)
[16:32:30] *** Joins: Guest29 (~Guest29@51.138.53.46)
[16:32:49] *** Quits: Guest29 (~Guest29@51.138.53.46) (Client Quit)
[16:35:02] *** Joins: VincentVega (~user@212.97.1.105)
[16:36:35] *** Quits: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net) (Ping timeout: 256 seconds)
[16:45:27] <VincentVega> How does SBCL decide when to call a compiler macro? I am trying some examples from CLHS define-compiler-macro and the original function is called.
[16:45:56] <phoe> VincentVega: which example?
[16:46:03] <VincentVega> the square one
[16:47:23] <phoe> all examples up to (funcall (compiler-macro-function 'square) '(funcall #'square x) nil) work as expected
[16:48:34] <VincentVega> yeah, but (square 3) keeps calling the original function definition
[16:48:53] <phoe> (macroexpand '(square x)) =>  (SQUARE X), false
[16:49:10] <phoe> that's from the examples
[16:49:36] <phoe> and how do you know it keeps calling the original function definition?
[16:49:42] <VincentVega> http://ix.io/3M4g this keeps printing hmmm
[16:50:10] <beach> VincentVega: As I recall, the OPTIMIZE values may determine whether the compiler macro is called.
[16:50:24] <VincentVega> beach: thanks, I'll try that
[16:50:43] <phoe> yes - (sb-ext:restrict-compiler-policy)
[16:50:46] <phoe> uh sorry
[16:50:51] <phoe> (sb-ext:describe-compiler-policy)
[16:52:13] <VincentVega> phoe: interesting summary, thanks
[16:52:53] <phoe> VincentVega: and check the SBCL manual for optimization qualities, maybe some high DEBUG or something can cause SBCL to not use compiler macros
[16:54:27] <phoe> ...welp, the manual does not seem to mention that!
[16:54:48] <phoe> #sbcl might provide more information, or the devs could write something in the manual about how CMs are treated
[16:56:37] <VincentVega> phoe: thanks! I will probably ask there. http://ix.io/3M4h optimization options didn't turn out to have an effect.
[17:01:39] <VincentVega> oh, nevermind, top-level compiling it was the reason. Putting it in a function definition works out just fine.
[17:07:01] *** Quits: crunchdef (~crunchdef@79-66-0-136.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[17:14:39] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[17:22:44] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Remote host closed the connection)
[17:23:05] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[17:28:00] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[17:32:39] *** Joins: Bike (~Glossina@71.69.170.70)
[17:32:39] *** ChanServ sets mode: +o Bike
[17:33:29] *** Joins: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[17:41:37] *** Quits: mcoll- (~mcoll@70.34.211.89) (Ping timeout: 240 seconds)
[17:42:39] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:53:32] *** Joins: crunchdef (~crunchdef@79-66-0-136.dynamic.dsl.as9105.com)
[17:53:36] *** Joins: kevingal (~quassel@149.157.111.113)
[18:00:09] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:02:17] *** Joins: miique (~miique@181.46.139.166)
[18:09:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:11:02] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 240 seconds)
[18:13:42] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[18:16:48] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[18:20:37] *** Joins: occ (~occ@user/occ)
[18:21:57] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[18:30:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:32:48] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[18:33:18] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[18:37:37] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[18:37:51] *** Quits: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1) (Ping timeout: 245 seconds)
[18:44:37] *** Quits: kevingal (~quassel@149.157.111.113) (Ping timeout: 240 seconds)
[18:50:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:51:52] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[18:53:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:53:09] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[18:53:37] *** Joins: kevingal (~quassel@149.157.111.113)
[18:58:14] *** Joins: mcoll- (~mcoll@70.34.211.89)
[18:58:14] *** Quits: mcoll- (~mcoll@70.34.211.89) (Read error: Connection reset by peer)
[18:58:28] *** Joins: mcoll- (~mcoll@70.34.211.89)
[19:02:47] *** Quits: kevingal (~quassel@149.157.111.113) (Ping timeout: 256 seconds)
[19:03:15] *** Joins: kevingal (~quassel@2001:770:c0:401:d5d0:8a1c:2bda:4295)
[19:12:08] *** Joins: nature (~nature@45.32.235.173)
[19:14:12] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[19:20:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:22:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:22:37] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[19:24:14] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[19:24:48] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[19:24:48] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:27:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:28:41] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Ping timeout: 252 seconds)
[19:29:03] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[19:30:39] <rotateq> Okay definitely one of the most funny lines I read in the last days. :) "Sometimes, when the full moon rises and foolish programmers declare (optimize (safety 0)), you can hear the howl of the Loopus, and screams of source code that is ripped to shreds."
[19:31:27] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:32:26] <jackdaniel> someone explores heisig repositories :)
[19:36:01] <rotateq> yes! ^^ the loopus one i didn't know
[19:39:11] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[19:43:59] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:45:41] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Ping timeout: 256 seconds)
[19:47:01] *** Joins: Oladon (~olad@98.43.81.226)
[19:47:23] *** Quits: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:47:37] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[19:48:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:54:44] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[19:56:26] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[19:59:05] *** Quits: crunchdef (~crunchdef@79-66-0-136.dynamic.dsl.as9105.com) (Quit: Client closed)
[19:59:42] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:00:49] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[20:01:33] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:03:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:03:57] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[20:03:59] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:05:43] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:07:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[20:08:50] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[20:08:54] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:09:03] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[20:09:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:15:04] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[20:19:23] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[20:32:53] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:34:53] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:45:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:46:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:9cbd:ac34:e54d:c677)
[20:47:14] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:49:06] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e0:a7ed:9cbd:ac34:e54d:c677) (Ping timeout: 245 seconds)
[20:52:31] *** Quits: kevingal (~quassel@2001:770:c0:401:d5d0:8a1c:2bda:4295) (Ping timeout: 250 seconds)
[20:55:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:55:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:56:23] *** Joins: ksp (~ksp@cpc115140-livi7-2-0-cust438.18-2.cable.virginm.net)
[20:57:01] <ksp> Hello, does anyone know how to split a string by a specific character? I want each line of my data to be a seperate string
[20:57:25] <jackdaniel> there is a library called split-sequence, you may use that
[20:57:31] <jackdaniel> (or write your own funciton)
[20:57:34] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:57:41] *** Joins: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[20:58:14] <ksp> I'm rather new to lisp
[20:58:57] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[20:59:01] <jackdaniel> you may find a manager to easily download libraries and quicklisp.org ; as for introduction
[20:59:04] <jackdaniel> minion: tell ksp about pcl
[20:59:04] <minion> ksp: please see pcl: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[20:59:28] <jackdaniel> s/libraries and/libraries at/
[20:59:45] *** Joins: tanners (~tanners@2600:1003:b127:bfd4:fcb8:9a4c:c23:f972)
[21:01:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:01:57] *** Quits: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[21:03:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:07:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:09:00] <White_Flame> ksp: the READ-LINE function does that from a stream.
[21:09:05] <rotateq> hi ksp, good to have you on board
[21:09:08] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[21:09:14] <White_Flame> and WITH-INPUT-FROM-STRING can stream from a string
[21:09:41] <rotateq> White_Flame: i was about putting exactly that to your first sentence :)
[21:10:16] <rotateq> jackdaniel: and I no more confuse the other PCL abbreviation (Potable Common Loops)
[21:10:28] <jackdaniel> congratulations ,)
[21:10:50] <jackdaniel> on the other hand, having your pot full makes a dinner
[21:10:58] <jackdaniel> so I'm not sure whether it is /that/ good
[21:11:35] <rotateq> since some longer time now ^^ first I thought "hmm, what shall this sb-pcl module name stand for?"
[21:12:37] <White_Flame> ksp: examples: https://plaster.tymoon.eu/view/2863#2863
[21:15:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:16:35] *** Quits: Jing_ (~hedgehog@240e:390:7c53:a7e1:dddb:2811:79d2:379) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:18:00] *** Quits: mcoll- (~mcoll@70.34.211.89) (Remote host closed the connection)
[21:22:47] <rotateq> jackdaniel: or when hearing "Flavors" not to only think of the quantum number :)
[21:23:48] <jackdaniel> both Pot(able) and Flavors comes up to me as food
[21:23:50] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:23:57] <rotateq> yummy
[21:24:27] <jackdaniel> btw there is an interesting history behind "mixins" and "flavors" (so I've read somewhere) - there was an icecream shop on the campus where they were invented
[21:24:58] <jackdaniel> and they had this service, that they had a basic flavor and allowed to have a mixin - so you had a "vanilla" icecream with a "strawberry" mixin
[21:24:58] <rotateq> yes two physicists got the idea for naming it that way at that ^^
[21:25:17] <rotateq> but okay, also with mixins, funny :)
[21:26:08] *** Joins: Catie (~user@user/catie)
[21:29:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:49] *** Joins: ns12 (~ns12@user/ns12)
[21:31:14] <lisp123> Is there anything Sly is bad at? I'm about to make the jump..
[21:32:20] <rotateq> we had the topic of debugging some days ago
[21:32:56] <rotateq> but for in general
[21:36:31] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:36:44] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:40:15] <lisp123> rotateq: thanks, i'll have a read
[21:41:32] <rotateq> it was said a good debugger is another thing needed in the future
[21:42:09] <lisp123> i see
[21:43:04] <etimmons> I recently discovered Sly stripped out Slime's integration with sb-sprof
[21:43:09] <etimmons> Only thing I've missed so far
[21:43:16] <rotateq> hmm
[21:48:15] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[21:54:27] *** Joins: jeosol (~jeosol@user/jeosol)
[21:55:23] <rotateq> today I build a game made with CL and SDL here, i saw it some times on youtube
[21:55:27] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:55:41] <rotateq> https://github.com/flotsfacetieux/sorcery-es
[21:57:12] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:57:25] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:57:46] <rotateq> and with "here" I mean in that case my local machine :)
[21:57:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[22:00:39] <Catie> This is really cool!
[22:01:03] <rotateq> yes and a nice example with the "what, you can change the game while it runs?"
[22:03:09] <phoe> wait until you see lockie's videos
[22:03:10] <rotateq> baggers has another example with his CEPL videos. sad that the docu isn't up-to-date
[22:03:31] <rotateq> phoe: oh do you have something now to look at? :)
[22:04:05] <phoe> https://www.youtube.com/watch?v=YiiuYm_9-_U for example
[22:04:41] <rotateq> wooow :o
[22:04:46] <rotateq> diablo clone
[22:05:31] <rotateq> or remaking age of empires :)
[22:05:50] <lisp123> etimmons: Thanks
[22:05:53] <rotateq> but maybe first i finish my baba is you or human resource machine clones
[22:06:30] <rotateq> hihi he has the game-loop function and first thing is a full garbage collect ^^
[22:06:31] <phoe> or in cl, (assert (eq *you* :baba))
[22:07:14] <rotateq> i still try doing some thought work on it
[22:07:20] <lisp123> rotateq: nice
[22:07:46] <rotateq> like how doing it "cleverly" when it gets "wall is you" and you become multiple objects at once
[22:08:46] <rotateq> and it gets me to think more and more, without CLOS capabilities, how do they even do it in Lua without it becoming too messy? ^^ not to talk about more complex games
[22:09:57] <rotateq> and doing some simple sentence analysis
[22:10:23] <rotateq> or not calling it "simple", would be too naive, it's hard
[22:11:03] <rotateq> phoe: in beginning of 2020 i stumbled upon this sucle engine minecraft clone
[22:13:51] <lagash> rotateq: I saw sucle, haven't messed with it yet, is it any good?
[22:14:06] <jackdaniel> it sucls
[22:14:11] <rotateq> lagash: more "just" an engine which needs more love
[22:14:16] <rotateq> jackdaniel: :D
[22:17:38] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[22:18:37] *** Quits: tanners (~tanners@2600:1003:b127:bfd4:fcb8:9a4c:c23:f972) (Ping timeout: 240 seconds)
[22:18:58] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[22:19:03] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Client Quit)
[22:22:50] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:9cbd:ac34:e54d:c677) (Read error: Network is unreachable)
[22:22:51] *** Quits: VincentVega (~user@212.97.1.105) (Remote host closed the connection)
[22:23:13] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fcd4:8c5d:7c22:5e25)
[22:24:36] <rotateq> but maybe minecraft players would get afraid when it becomes fasta
[22:25:48] *** Joins: notzmv (~zmv@user/notzmv)
[22:28:02] <rotateq> like when a popular python tool is replaced but the API and superficial look leaves to be the same :)
[22:28:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:30:27] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fcd4:8c5d:7c22:5e25) (Ping timeout: 250 seconds)
[22:33:36] *** Joins: VincentVega (~user@212.97.1.105)
[22:33:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:33:56] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[22:36:13] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[22:56:47] <lisp123> With sly, everytime I exit sly-db, it asks me whether I want to throw to the toplevel (y / n), is there a way to set this to y always?
[22:57:18] <phoe> how do you quit it?
[22:57:42] <lisp123> i press Q
[22:58:02] <lisp123> so I have to do Q y, which is 2x longer :(
[22:58:03] <phoe> I see - on Slime it simply invokes an ABORT restart
[22:58:15] <phoe> and that performs all the non-local exit stuff that is necessary
[22:58:17] <lisp123> Yeah Slime works well, this is just for Sly
[22:58:55] <lisp123> "a" seems to work well, ignore me :)
[22:59:06] <phoe> :O
[22:59:08] <phoe> TIL, thanks
[22:59:35] <lisp123> there's a clash between EVIL mode & Sly, so will need to fix that, but otherwise all good
[22:59:39] *** Quits: jdz (~jdz@185.23.160.114) (Ping timeout: 256 seconds)
[23:00:13] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Ping timeout: 256 seconds)
[23:01:29] *** Joins: jdz (~jdz@185.23.160.114)
[23:01:30] *** Joins: flip214 (~marek@user/flip214)
[23:01:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[23:06:02] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[23:07:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:08:23] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[23:08:36] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[23:08:42] *** Joins: miique (~miique@181.46.139.166)
[23:12:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:14:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:18:02] <Bike> say we had the code (let ((a (foo))) (map nil #'print a) (aref a 0)), and at some particular time FOO returned a list rather than a vector. how would people feel about an implementation that signaled a type error as soon as the list was returned, i.e. before doing the map?
[23:19:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:20:31] *** Joins: Volt (~Volt@c-73-145-161-51.hsd1.mi.comcast.net)
[23:21:05] <edgar-rft> I would expect AREF to signal an error (after the MAP), not at the time of the the LET binding
[23:21:31] *** Quits: miique (~miique@181.46.139.166) (Quit: Leaving)
[23:23:27] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 256 seconds)
[23:24:01] *** Quits: jdz (~jdz@185.23.160.114) (Ping timeout: 256 seconds)
[23:24:09] <Bike> that's how it usually works now. i'm asking how people would feel if it worked as in the hypothetical.
[23:24:18] *** Joins: jdz (~jdz@185.23.160.114)
[23:25:11] *** Joins: flip214 (~marek@user/flip214)
[23:26:04] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[23:26:17] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[23:26:48] *** Joins: morganw (~user@80.225.24.132)
[23:28:49] <White_Flame> Bike: would that be because the type inference from aref hoisted up for the whole body?
[23:29:09] <White_Flame> eg a declaration on A
[23:29:38] <White_Flame> I think that would be the actual consequence of what "type inference" means.  It's about A itself
[23:30:42] <White_Flame> hmm, but those usually aren't errors, are they?
[23:31:14] <Bike> it would be inferring backwards from the fact that (aref a 0) is undefined unless a is a vector, yes
[23:32:31] <Bike> as far as i'm aware, no actual implementation does what i'm describing. they might issue a type warning at compile time if foo is declared to never return a vector, and probably signal an error from aref if it receives a non vector
[23:33:25] <White_Flame> with high safety and debug, are there runtime warnings when type declared bodies are entered with the wrong value type?
[23:37:10] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:37:52] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[23:38:39] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:42:09] <Bike> sbcl will signal an error if there's an explicit type declaration, but not for my example
[23:45:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:45:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:46:23] <jeosol> Good morning guys!
[23:47:05] <jeosol> When writing a paper about CL, what is the canonical reference for CLOS in terms of reference citation
[23:47:34] <NotThatRPG> jeosol: I imagine the specification?
[23:47:45] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[23:47:58] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[23:48:50] <NotThatRPG> White_Flame: That would be up to the individual implementation
[23:49:47] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:49:59] <jeosol> NotThatRPG: Thanks, I think you are right. I remembered I have a copy of "OOP: The CLOS Perspective" and that is what they cited too for CLOS
[23:50:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:50:43] <NotThatRPG> jeosol: I think it depends on whether you want to give credit to the people who developed CLOS, or just point someone at an explanation of what CLOS Is.
[23:51:45] <jeosol> good point. But it's more as a reference too for people to understand what I am refering too. Lispers probably does but it's making adding reference appropriately
[23:52:12] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[23:52:29] <jeosol> I use SBCL primarily, so not sure if there is doc for SBCL CLOS(?) but I imagine since implementations are mostly compliant, I don't have to cite any specific to SBCL just that higher-level should cover everything
[23:53:13] <NotThatRPG> So if your readers are not familiar with CLOS the Keene book might be a better citation (or compromise and give both)
[23:55:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:58:52] <jeosol> Yeah, that's true. I was thinking of that too, hmm, good point.
[23:59:32] <jeosol> Keene's book was what I read front to back to understand CLOS so it is definitely useful, guess for non CL folks
[23:59:48] <jeosol> Thanks
