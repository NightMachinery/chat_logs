[00:02:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:05:09] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322)
[00:05:28] <foxfromabyss> how do I put a local fork of the library into `asd` system definition?
[00:05:38] <foxfromabyss> and do i need to change both `package` and `asd` or just asd?
[00:08:12] <pjb> foxfromabyss: just put it in some directory, and have asdf:*central-registry* or quicklisp:*local-project-directories* point to it.
[00:08:39] <pjb> Changing the name of the system would be in order if you wanted to be able to load both the old and the new library at the same time.
[00:09:03] <pjb> In that case, making sure they mutate different packages could be a good idea.
[00:09:39] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[00:09:48] <foxfromabyss> hmm
[00:09:49] <foxfromabyss> asdf and quicklisp variables don't intersect at all
[00:09:49] <foxfromabyss> is this the way it's supposed to be to make local fork work?
[00:11:25] <foxfromabyss> oh i figured it out, thanks for the help!
[00:11:25] <pjb>  asdf:*central-registry* let you shadow a library locally for all asdf commands.  quicklisp:*local-project-directories* or storing in ~/quicklisp/local-projects/ let you shadow a library locally for all quicklisp and asdf commands.
[00:11:53] <foxfromabyss> i see i see, thanks :P
[00:12:33] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:18:14] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 260 seconds)
[00:19:18] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322) (Quit: Client closed)
[00:21:40] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:22:37] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[00:27:16] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[00:27:26] *** Joins: notzmv (~zmv@user/notzmv)
[00:29:50] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[00:35:33] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[00:41:06] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:45:24] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[00:46:07] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:52:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:52:32] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[00:52:41] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102F-static.midco.net)
[00:54:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:32] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-102C-static.midco.net) (Ping timeout: 240 seconds)
[00:58:49] *** Joins: samps (~samps@179.225.196.215)
[00:59:52] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:00:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:01:10] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:03:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:06:16] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:10:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[01:14:52] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[01:20:03] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:24:03] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:27:14] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:29:04] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:dcf2:f40b:6901:1627)
[01:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:35:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:37:39] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[01:39:36] *** Joins: morganw (~user@80.225.24.132)
[01:39:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:41:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:44:45] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:49:49] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:50:45] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[01:55:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[02:01:17] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[02:05:13] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[02:08:34] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[02:09:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[02:17:29] <_73> is there a library that provides reader macros on top of cl-ppcre that enables you to use syntax similar to perl?
[02:18:38] <Demosthenex> _73: i saw one that did #R for regexps, but its not going to improve the function calls
[02:19:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:20:01] <_73> Demosthenex: do you happen to remember what is was called? I was thinking of making my own but don't want to reinvent the wheel.
[02:21:09] <Josh_2> oof
[02:21:25] <Bike> _73: http://edicl.github.io/cl-interpol/
[02:23:24] <_73> Bike: this library goes beyond string interpolation? I was thinking syntax similar to perl's m// s/// etc.
[02:25:23] <Bike> it has stuff intended to allow you to write regexes exactly as you would in perl. i don't know anything beyond that.
[02:26:05] <_73> Ill try it thanks
[02:26:59] *** Joins: kevingal (~quassel@80.233.36.216)
[02:31:11] *** Quits: occ (~occ@user/occ) (Ping timeout: 245 seconds)
[02:35:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:dcf2:f40b:6901:1627) (Ping timeout: 240 seconds)
[02:36:14] *** Joins: tom (~tom@host-2-100-248-83.as13285.net)
[02:37:09] <tom> Hey! Any sly&sbcl users here? :) I'm trying to trace a method with sly, but it doesn't pass `:methods t` so sbcl doesn't trace the method
[02:37:29] <tom> aside from modifying my slynk, what are my options?
[02:37:38] *** tom is now known as Guest6655
[02:43:07] *** Joins: lispy2 (~lispy@84.69.59.93)
[02:43:13] *** lispy2 is now known as lispy
[02:44:59] *** Joins: shka (~herr@109.231.0.226)
[02:47:40] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[02:52:10] *** Quits: kevingal (~quassel@80.233.36.216) (Remote host closed the connection)
[02:55:44] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:57:08] <Demosthenex> _73: https://www.cliki.net/regular%20expression  shows wrappers
[02:57:26] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[03:04:26] <Josh_2> Guest6655: you should keep your name as tom
[03:04:47] <Josh_2> also you could just type (trace ..) in the repl, flex those finger muscles
[03:04:47] *** Quits: pve (~pve@178-55-15-63.bb.dnainternet.fi) (Quit: leaving)
[03:06:37] *** Joins: samps (~samps@179.225.196.215)
[03:10:32] *** Joins: djuber (~user@65.79.128.64)
[03:14:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:14:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[03:17:04] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[03:19:02] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 240 seconds)
[03:21:13] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[03:25:20] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[03:26:32] <morganw> Would a sticker work?
[03:31:13] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:37:40] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[03:44:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[03:46:33] <yottabyte> should I use fset:equal? instead of equalp for fset:set equality? both appear to work
[03:47:26] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:48:57] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:49:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:51:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:57:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[03:58:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:00:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:02:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:11:55] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:24:00] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[04:26:24] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[04:26:57] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:27:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:35:06] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[04:36:27] *** Joins: jeosol (~jeosol@user/jeosol)
[04:38:34] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:39:00] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[04:40:39] *** Joins: akoana (~ah@user/akoana)
[04:43:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[04:50:57] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[04:55:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:12:23] *** Joins: Oladon (~olad@98.43.81.226)
[05:16:10] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:23:38] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[05:26:15] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:41:54] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:44:16] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Quit: #guix)
[05:45:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:47:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[05:55:05] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:57:34] *** Joins: xsperry (~xs@user/xsperry)
[05:57:42] *** Joins: samps (~samps@179.225.196.215)
[05:58:08] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:04:03] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:08:43] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[06:10:40] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[06:16:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:16:59] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:18:53] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[06:26:37] *** Quits: Catie (~user@user/catie) (Quit: good night my friends)
[06:42:10] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2d90:ff3:b02f:c2ef)
[06:42:40] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:48:04] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[06:57:37] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[06:59:00] *** Joins: russe (~user@cl-user.org)
[07:03:15] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[07:04:40] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[07:13:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:13:34] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 256 seconds)
[07:14:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:18] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:28:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[07:30:23] <beach> Good morning everyone!
[07:31:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:32:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:34:13] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:38:29] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:38:35] <lispy> morning beach
[07:41:06] *** Joins: luis9 (~luis@lisp/luis)
[07:41:06] *** ChanServ sets mode: +o luis9
[07:43:10] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 250 seconds)
[07:43:10] *** luis9 is now known as luis
[07:44:29] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:54:52] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:59:29] *** Quits: lispy (~lispy@84.69.59.93) (Quit: O/)
[08:02:09] *** Joins: samps (~samps@179.225.196.215)
[08:13:19] *** Joins: user__ (~semz@user/semz)
[08:15:40] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[08:15:45] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:16:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:20:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[08:29:22] *** Joins: epony (epony@user/epony)
[08:38:37] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[08:46:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:55:29] *** user__ is now known as semz
[08:55:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:03:21] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Quit: ERC (IRC client for Emacs 27.1))
[09:03:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:17:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[09:23:20] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[09:28:14] *** Joins: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:28:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[09:28:44] *** Joins: EsoAlgo3 (~EsoAlgo@152.70.142.52)
[09:29:07] *** Joins: frodef_ (~frode@46.212.93.4)
[09:29:10] *** Joins: scymtym_ (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[09:29:30] *** Joins: form_fee- (~form_feed@nixon.einval.eu)
[09:29:37] <remexre> is there a library for representing sets as sorted vectors?
[09:30:05] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[09:31:32] *** Joins: jdz_ (~jdz@185.23.160.114)
[09:32:07] *** Joins: xantoz_ (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[09:32:52] <beach> remexre: Sets are tricky things.  There is really no abstract data type called a "set" because it is impossible to have all set operations be efficient simultaneously.  That is why every abstract data type that contains other objects is defined by the operations that are supported.  If you give us the operations you like, perhaps we can help.
[09:33:22] <beach> remexre: But in general, such a representation would not allow for many operations to be efficient.
[09:33:32] <remexre> small sets of strings, I want fast intersection, union, and emptyp
[09:34:14] <beach> If they are small, then just concatenate and sort for union.
[09:34:38] <moon-child> remexre: why not use a hash table?
[09:35:14] <moon-child> sorted vector gives you binary search if you care for it, but no in-place intersection or union
[09:35:40] <remexre> moon-child: I thought there was a "two-finger" O(n) intersection
[09:35:41] <beach> remexre: For intersection, convert to lists, do the intersection, convert to a vector, sort.
[09:36:06] <remexre> and if I'm fine with excess capacity + a fill pointer, union is O(n)
[09:36:11] <beach> remexre: It won't matter if the sets are small.
[09:36:28] <remexre> yeah, and that's where vectors would be a win, right? b/c of cache effects?
[09:37:08] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[09:37:08] *** Quits: russe (~user@cl-user.org) (*.net *.split)
[09:37:08] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (*.net *.split)
[09:37:09] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:37:09] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[09:37:09] *** Quits: frodef (~frode@46.212.93.4) (*.net *.split)
[09:37:09] *** Quits: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net) (*.net *.split)
[09:37:09] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[09:37:09] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:37:09] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[09:37:09] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[09:37:09] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[09:37:09] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:37:09] *** Quits: ski (~ski@remote11.chalmers.se) (*.net *.split)
[09:37:09] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:37:09] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[09:37:10] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[09:37:10] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[09:37:10] *** Quits: form_feed (~form_feed@nixon.einval.eu) (*.net *.split)
[09:37:10] *** Quits: leo_song_ (~leo_song@1.156.41.129) (*.net *.split)
[09:37:10] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[09:37:10] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:37:11] <beach> That sounds like premature micro-optimization without any measure to determine whether it is necessary.
[09:37:50] <beach> remexre: You are comparing cache effects and asymptotic complexity.  They are not the same order of magnitude.
[09:38:29] <beach> remexre: My guess is that you are going to spend all the time comparing characters in strings anyway.
[09:38:37] *** EsoAlgo3 is now known as EsoAlgo
[09:39:05] <moon-child> beach: 'For intersection, convert to lists, do the intersection, convert to a vector, sort'  hmm?  If you were using such a representation--and you cared for performance--you could do it in O(m+n) by iterating over both vectors and VECTOR-PUSH-EXTENDing a result
[09:39:18] <moon-child> (and if you don't care for performance, just use a list and don't bother with anything else)
[09:39:32] <beach> It won't matter if the sets are small.
[09:39:43] <remexre> the point with the asymptotics was that they're not terrible; not ruining the cache by using vectors was more of the point
[09:39:52] <moon-child> indeed.  Hence 'don't bother with anything else' (including sorting)
[09:39:58] <beach> moon-child: You can't use a list if the prerequisite is to use a vector.
[09:40:55] <moon-child> sure.  I think the problem is insufficiently motivated/contextualized.  If it's desirable for some reason to use a vector in the first reason, that same reason may also make it undesirable to use an intermediate list (which was your suggestion)
[09:41:09] <beach> moon-child: And you can't not sort if the prerequisite is to use sorted vectors.
[09:41:17] <beach> moon-child: Oh, totally.
[09:41:55] <moon-child> given two sorted vectors, you can produce a sorted intersection vector in linear time, without consing an intermediate list and calling SORT on it
[09:42:13] <beach> But it won't matter if the sets are small.
[09:42:33] <moon-child> yes.  And if it doesn't matter then you can just use lists.  We are going in circles :P
[09:42:47] <beach> moon-child: You can't use a list if the prerequisite is to use a vector. :)
[09:42:51] *** Joins: amk (~amk@109.255.169.126)
[09:42:51] *** Joins: ski (~ski@remote11.chalmers.se)
[09:42:51] *** Joins: russe (~user@cl-user.org)
[09:42:51] *** Joins: mzan (~quassel@mail.asterisell.com)
[09:42:51] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[09:42:51] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[09:42:51] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:42:51] *** Joins: les_ (~whome@user/les)
[09:42:51] *** Joins: TMA (~tma@twin.jikos.cz)
[09:42:51] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[09:42:51] *** Joins: materialfuture (~materialf@149.248.8.187)
[09:42:51] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:43:44] *** Joins: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net)
[09:43:46] <moon-child> remexre: can you motivate your problem?  Do you have set-processing code which is slow?
[09:44:09] <remexre> no, I'm planning on writing code that I don't want to go back and change the set representation for
[09:44:28] <moon-child> I see
[09:44:46] <moon-child> if your interface is properly abstracted, it should not be prohibitively difficult to change your representation
[09:45:52] *** Quits: bollu (~bollu@159.65.151.13) (Quit: Ping timeout (120 seconds))
[09:46:04] <remexre> right, but i know the representation I want, and I would be surprised if I needed to change *from* that later
[09:46:10] *** Joins: bollu (~bollu@159.65.151.13)
[09:51:55] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[09:54:50] *** Joins: artchad (~user@public-gprs225103.centertel.pl)
[09:56:26] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 260 seconds)
[10:19:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[10:22:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[10:23:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:25:10] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[10:28:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:36:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:53:04] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[10:58:32] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[11:00:20] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:03:17] *** Joins: occ (~occ@user/occ)
[11:05:54] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[11:13:19] <qhong> Any reason for not just using `fset'?
[11:18:50] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 268 seconds)
[11:25:22] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:26:56] *** Joins: pve (~pve@37-136-195-65.rev.dnainternet.fi)
[11:26:59] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[11:29:48] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[11:37:03] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[11:40:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[11:41:02] *** Joins: amb007 (~a_bakic@94.134.22.93.rev.sfr.net)
[11:49:04] *** Quits: Guest6655 (~tom@host-2-100-248-83.as13285.net) (Quit: Lost terminal)
[11:51:44] *** Joins: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl)
[12:04:06] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 245 seconds)
[12:08:39] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f4:5ff0:397b:3ff9:d4a9:1b8e)
[12:12:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:13:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[12:17:08] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[12:17:18] *** Quits: amb007 (~a_bakic@94.134.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[12:18:01] *** Joins: amb007 (~a_bakic@146.148.22.93.rev.sfr.net)
[12:23:31] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 250 seconds)
[12:25:28] *** Joins: varjag (~user@188.95.247.248)
[12:26:08] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[12:29:12] *** Quits: amb007 (~a_bakic@146.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:29:20] *** Joins: amb007 (~a_bakic@146.148.22.93.rev.sfr.net)
[12:30:46] *** Quits: amb007 (~a_bakic@146.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:30:50] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[12:32:08] *** Joins: amb007 (~a_bakic@146.148.22.93.rev.sfr.net)
[12:37:49] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[12:37:57] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[12:40:16] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[12:41:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5) (Ping timeout: 240 seconds)
[12:43:50] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0)
[12:45:15] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[12:50:01] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:50:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:51:24] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[12:57:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 260 seconds)
[13:02:41] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[13:04:01] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[13:08:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0) (Ping timeout: 250 seconds)
[13:10:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0)
[13:10:16] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[13:14:13] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[13:14:13] *** Quits: amb007 (~a_bakic@146.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:14:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:15:26] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[13:18:52] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[13:21:25] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[13:21:44] *** Joins: kevingal (~quassel@2001:770:c0:401:c508:4b61:3017:5550)
[13:24:31] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[13:27:29] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2d90:ff3:b02f:c2ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:31:17] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:32:03] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f9c4:ec41:3bfb:d5c6)
[13:32:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:34:05] *** Joins: shka (~herr@109.231.0.226)
[13:49:02] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[13:54:12] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Quit: karlosz_)
[14:03:43] *** Joins: shozo (~user@178.74.52.55)
[14:10:41] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[14:19:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:19:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[14:20:57] *** Lord_of_Life_ is now known as Lord_of_Life
[14:27:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[14:32:31] <neominimum> Anyone have a more elegant solution to finding the first element of a list and all sub-lists than what I have managed to hack together? https://pastebin.com/raw/6W6ppPTb
[14:33:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[14:34:45] *** Joins: amb007 (~a_bakic@167.148.22.93.rev.sfr.net)
[14:42:58] *** Joins: attila_lendvai_ (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:43:16] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[14:44:41] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[14:45:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:47:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:48:49] <flip214> We've got a CI/CD pipeline for Alexandria now. Are there volunteers for finding out why some implementations disagree with the majority? https://gitlab.common-lisp.net/alexandria/alexandria/-/jobs shows 4 of 8 failing (in overlapping sets of tests).
[14:52:10] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[15:04:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:05:18] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:08:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[15:09:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:16:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[15:16:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:19:22] <phoe> flip214: you have found bugs in ABCL!
[15:19:38] <phoe> according to ABCL, (ALEXANDRIA:TYPE= (QUOTE LIST) (QUOTE (OR NULL CONS))) ;=> NIL T
[15:19:41] <phoe> same story with (ALEXANDRIA:TYPE= (QUOTE NULL) (QUOTE (AND SYMBOL LIST)))
[15:21:38] * phoe makes an abcl ticket
[15:24:18] *** Quits: amb007 (~a_bakic@167.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:25:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[15:25:36] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:25:51] <phoe> flip214: regarding CLISP, (+ 0.0 #C(0 2)) ;-> #C(0.0 2)
[15:26:00] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:26:09] <phoe> I have no idea if this is conforming, because the complex number has different types for realpart and imagpart
[15:27:59] <phoe> no idea about cmucl and allegro - cmucl complains about some undefined function, which is weird, and acl has some type failures as well as a copy-hash-table failure
[15:28:11] * phoe runs off for work
[15:33:31] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f4:5ff0:397b:3ff9:d4a9:1b8e) (Ping timeout: 250 seconds)
[15:33:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[15:36:43] <flip214> phoe: (EQUAL #C(0.0 0.0) 0.0) -- That's what my testing branch shows as difference. Looks like clisp doesn't see them as EQL...
[15:38:20] *** Joins: amb007 (~a_bakic@167.148.22.93.rev.sfr.net)
[15:39:38] <flip214> phoe: https://paste.debian.net/hidden/8fc427ac/
[15:48:04] *** Joins: notzmv (~zmv@user/notzmv)
[15:48:35] <phoe> oh, #C(0.0 0.0) doesn't decay into 0.0
[15:48:41] <phoe> that's a conformance bug AFAIK
[15:49:19] <phoe> clhs 12.1.5.3
[15:49:19] <specbot> Rule of Canonical Representation for Complex Rationals: http://www.lispworks.com/reference/HyperSpec/Body/12_aec.htm
[15:49:58] <phoe> actually it isn't a conformance bug
[15:50:30] <phoe> if I am reading this correctly, if their parts are floats, then they are not meant to be EQL
[15:52:07] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:52:24] *** attila_lendvai_ is now known as attila_lendvai
[15:53:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:53:33] <flip214> phoe: I pushed a workaround - starting with #c(0.0 0.0) should make it work
[15:54:07] *** Joins: samps (~samps@179.225.196.215)
[15:57:44] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:58:28] <pjb> phoe: #C(0.0 0.0) cannot decay into 0.0, because 0.0 is not 0.0, but 0.0±ε
[15:58:45] <phoe> pjb: yes
[15:59:25] <flip214> phoe: https://gitlab.common-lisp.net/alexandria/alexandria/-/jobs/27975 (allegro) has the same subtypep problems
[15:59:57] <flip214> pjb: but 4 implementations agree that (EQL #C(0.0 0.0) 0.0)
[16:00:41] <flip214> http://www.lispworks.com/documentation/HyperSpec/Body/f_eql.htm#eql says " If an implementation supports positive and negative zeros as distinct values, then (eql 0.0 -0.0) returns false. Otherwise, when the syntax -0.0 is read it is interpreted as the value 0.0, and so (eql 0.0 -0.0) returns true."
[16:00:50] <pjb> flip214: Nope, https://termbin.com/txqo you're confusing EQL and =.
[16:01:44] <pjb> #C(0.0 0.0) cannot be eql to 0.0, since it's  0.0±ε + 0.0±ε * i
[16:02:26] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f4:5ff0:397b:3ff9:d4a9:1b8e)
[16:04:14] <flip214> pjb: I don't understand where you get the ε from - the zero can be expressed exactly (though perhaps non-unique because of ±), and so 0.0 == 0.0??
[16:04:35] <pjb> flip214: it's because floating points are used to represent real numbers.
[16:05:01] <flip214> https://gitlab.common-lisp.net/alexandria/alexandria/-/pipelines/5874 shows that 4 implementations were okay with (EQUAL #C(0.0 0.0) 0.0)
[16:05:02] <pjb> All floating points are exact. But they represent a range of real numbers.
[16:05:18] <pjb> flip214: yes, EQUAL uses = for numbers.
[16:05:39] <pjb> = performs the range comparison.
[16:06:03] <pjb> double-float-epsilon #| --> 1.1102230246251568D-16 |#
[16:06:09] <flip214> pjb: http://www.lispworks.com/documentation/HyperSpec/Body/f_eql.htm#eql has the example  (eql 3.0 3.0) =>  true
[16:06:45] <flip214> http://www.lispworks.com/documentation/HyperSpec/Body/f_equal.htm says if they are numbers that are eql,
[16:08:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:08:42] <pjb> This is precised in the Note: Two complex numbers are considered to be eql if their real parts are eql and their imaginary parts are eql. For example, (eql #C(4 5) #C(4 5)) is true and (eql #C(4 5) #C(4.0 5.0)) is false. Note that while (eql #C(5.0 0.0) 5.0) is false, (eql #C(5 0) 5) is true. In the case of (eql #C(5.0 0.0) 5.0) the two arguments are of different types, and so cannot satisfy eql. In the case of (eql #C(5 0) 5), #C(5 0)
[16:08:42] <pjb> is not a complex number, but is automatically reduced to the integer 5.
[16:11:48] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:11:50] <beach> neominimum: You omitted (1 2 3).
[16:12:32] *** Quits: amb007 (~a_bakic@167.148.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[16:12:45] <beach> neominimum: And FORM is a bad name for the parameter.
[16:13:37] *** Joins: amb007 (~a_bakic@81.13.23.93.rev.sfr.net)
[16:14:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:15:01] <neominimum> beach: ah yes, that was intentional. removing `(atom (caar form))` prints (1 2 3)
[16:15:03] <yitzi> Hello beach. How are things?
[16:15:24] <beach> yitzi: Very busy still.  ELS paper deadline is Sunday.
[16:15:32] <beach> neominimum: The form (and root (print (car form))) is better written as (when root (print (car form)))
[16:16:09] <yitzi> beach: gotcha. Hope it goes well!
[16:16:12] <beach> neominimum: AND should be used only to return Boolean values.
[16:16:26] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[16:16:40] <beach> yitzi: Thanks.  It has been a very busy week, mostly with uninteresting tasks.
[16:16:51] <beach> yitzi: What about you?
[16:16:51] *** Quits: amb007 (~a_bakic@81.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[16:16:52] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:17:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:17:11] <neominimum> beach: alright, using when there looks better
[16:18:07] <beach> neominimum: I also don't understand what ROOT is there for.  It is only true for the top-level expression.
[16:18:17] <neominimum> beach: Yeah,
[16:18:34] <neominimum> I was going to bring that up
[16:19:33] <yitzi> beach: Lots of non-interesting real life distractions. Trying to get back into the groove though. I am still seeing that SICL issue I mentioned about a month ago, but I made some progress on isolating it. I'll bug you when I have something useful and you have time. :)
[16:19:45] <neominimum> I was stumped trying to print the root of the tree in the same recursive function that returns the first elements of all sub-lists
[16:20:00] <beach> neominimum: And I think (and form (listp form)) is just (consp form) which has the additional advantage of not using arbitrary lists as Boolean values.
[16:20:29] <beach> yitzi: I understand.
[16:20:46] <neominimum> beach: The optional root parameter seems hacky to me as well
[16:22:02] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:22:15] <beach> neominimum: Also, it would be better to return a list of the objects you want, rather than printing them.  That way, client code can print them, or do something else with them.  Right now, they are useless.
[16:22:22] *** Joins: artchad (~user@public-gprs225103.centertel.pl)
[16:24:38] <neominimum> beach: sure, I was only printing them so that I could tell that the appropriate elements were being isolated.
[16:24:50] <beach> neominimum: And I think you should be able to have the base case of the recursion be simpler.
[16:26:02] <beach> So I don't understand why you omitted (1 2 3) because that was not part of your specification.
[16:26:54] <beach> Is the specification to "return/print the first element of each sublist, provided it is an atom"?
[16:27:32] <beach> Er, "return/print the first element of each non-empty sublist, provided that element is an atom"
[16:27:45] <neominimum> beach: yes that's correct I should have been more specific
[16:28:17] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:33:06] <beach> The recursion on the CDR is fundamentally different from the recursion on the CAR it seems.  So I would either use different functions for the two, or use LOOP instead of recursion on the CDR.
[16:33:44] *** Joins: occ (~occ@user/occ)
[16:38:33] <neominimum> beach: okay thanks, I'm trying your suggestions
[16:38:41] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 245 seconds)
[16:43:17] <beach> (defun tt (thing) (if (atom thing) '() (append (if (atom (car thing)) (list (car thing)) '()) (loop for element in thing append (tt thing)))))
[16:43:21] <beach> Something like that.
[16:52:18] <neominimum> Oh nice, thanks beach for the example. It's good to see how you approach the solution.
[16:53:49] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:59:51] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[17:17:04] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:23:38] <beach> Pleasure.
[17:26:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[17:28:05] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:32:56] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 256 seconds)
[17:33:22] *** Quits: kevingal (~quassel@2001:770:c0:401:c508:4b61:3017:5550) (Ping timeout: 250 seconds)
[17:35:21] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[17:35:21] *** Joins: kevingal (~quassel@149.157.101.196)
[17:36:24] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[17:37:43] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (Remote host closed the connection)
[17:40:43] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:45:24] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[17:53:58] *** Joins: samps (~samps@179.225.196.215)
[17:54:07] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[17:56:11] *** Joins: Bike (~Glossina@71.69.170.70)
[17:56:44] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[18:00:54] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:04:06] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[18:04:29] *** Joins: kevingal (~quassel@2001:770:c0:401:18ad:1fde:a212:a601)
[18:18:45] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[18:19:15] *** Quits: xsperry (~xs@user/xsperry) ()
[18:23:38] *** Joins: Josh_2 (~user@37.25.47.130)
[18:32:44] *** Quits: kevingal (~quassel@2001:770:c0:401:18ad:1fde:a212:a601) (Ping timeout: 252 seconds)
[18:33:11] *** Joins: kevingal (~quassel@149.157.101.196)
[18:33:51] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[18:35:31] <lagash> Would anyone know of a Common Lisp ANSI escape codes parser? Not bindings to say Curses or anything like that.
[18:36:10] <phoe> lagash: cl-ansi-term?
[18:36:19] <phoe> or do you mean something else?
[18:37:25] <lagash> phoe: that generates escape codes, so no
[18:37:32] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:37:38] <phoe> oh, you want to do the inverse
[18:38:51] <Josh_2> Hi
[18:38:56] <lagash> say, something like converts escape codes to CSS?
[18:39:12] <Josh_2> huh
[18:39:35] <phoe> CSS? you mean the web styling technology?
[18:40:02] <Josh_2> Well if you know the characters you want you can probably knock something together easily using LASS
[18:40:25] <phoe> I am curious what's your idea for turning terminal escape codes for something that is meaningfully understandable by browsers - escape codes can include stuff like colors that is trivially CSSable, but also things like query-terminal-size and set-cursor-position
[18:40:38] <phoe> I have no idea how much CSS-fu is required to encode this
[18:40:51] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[18:41:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:41:52] <lagash> phoe: just the colors, really
[18:42:25] <lagash> I suppose the task is rather trivial, I just don't like reinventing the wheel :)
[18:42:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:42:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:44:16] <Josh_2> Because you can just use (char-code <char>) you can quickly generate colours for the ascii character codes using LASS
[18:45:49] <lagash> Josh_2: pardon, LASS?
[18:46:02] <Josh_2> https://shinmera.github.io/LASS/
[18:47:19] <lagash> Oh, right, sounded familiar
[18:48:18] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:48:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:49:02] <Josh_2> LASS is very cool, I am a big fan
[18:49:27] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[18:49:30] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[18:49:33] <Josh_2> LASS mixed with spinneret and CLOS beats any templating library
[18:49:42] <Josh_2> unless you need some non lisp peasant to read your code and understand it ofc
[18:50:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:50:41] *** scymtym_ is now known as scymtym
[18:51:33] *** Joins: jeosol (~jeosol@user/jeosol)
[18:52:53] *** Joins: xsperry (~xs@user/xsperry)
[18:53:38] <lagash> Any other similar projects?
[18:54:11] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 252 seconds)
[18:56:55] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:59:52] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:00:24] <neominimum> beach: You were right about the CAR and CDR recursion representing different objectives, I didn't fully understand what you meant by that at first, but it clicked and I have something I'm happy with now. https://pastebin.com/raw/bxJxX9wp
[19:00:43] <neominimum> I tried to implement something different to your solution as an exercise. It uses recursion still + a simple switch to indicate whether a sub-list has been found before attempting to get the atom at the head of the list.
[19:00:59] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[19:05:07] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Client Quit)
[19:07:28] *** Joins: madand (~user@45.12.27.30)
[19:16:26] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[19:17:46] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[19:17:54] *** Joins: kevingal (~quassel@2001:770:c0:401:b5f1:3b1a:48a5:75f)
[19:19:19] *** Joins: samps (~samps@179.225.196.215)
[19:19:27] <beach> neominimum: WHEN should be used only in a context where the value is not needed.  If the value is needed, use and IF with an explicit `else' branch.
[19:19:43] <beach> neominimum: In this case, your `else' branch would be '().
[19:20:00] <beach> Same thing with UNLESS.
[19:20:22] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[19:21:23] *** Quits: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[19:23:18] <neominimum> Ah okay, I suppose it makes sense to make the return values explicit. Is that what you intended?
[19:24:07] <beach> Yes, the message you send to a person reading your code when you use WHEN or UNLESS, is that the body has only side effects, and the value is not used, like in a PROGN when it is not the last form.
[19:24:56] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 245 seconds)
[19:25:12] <neominimum> that's great, thanks!
[19:25:25] <beach> Sure.
[19:27:17] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[19:27:57] <beach> neominimum: You might want to join #clschool.  This channel is not really for help with simple stuff, though some amount of that is tolerated.
[19:29:35] <neominimum> alright, will do
[19:34:29] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[19:41:56] *** Joins: morganw (~user@80.225.24.132)
[19:58:36] *** Joins: Guest7475 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:00:50] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:03:22] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[20:05:42] *** Joins: treflip (~user@user/treflip)
[20:05:56] *** Quits: ski (~ski@remote11.chalmers.se) (Ping timeout: 256 seconds)
[20:08:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:20:53] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:24:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:27:02] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[20:28:42] *** Joins: samps (~samps@179.225.196.215)
[20:32:12] *** Joins: jeosol (~jeosol@user/jeosol)
[20:33:44] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Remote host closed the connection)
[20:34:01] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[20:34:17] *** Quits: raeda (~raeda@72.49.252.109) (Ping timeout: 240 seconds)
[20:36:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:41:38] *** Joins: raeda (~raeda@72.49.252.109)
[20:45:20] *** Quits: samps (~samps@179.225.196.215) (Quit: Leaving)
[20:48:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:48:13] *** Quits: varjag (~user@188.95.247.248) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[20:49:00] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[20:49:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:49:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:50:08] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[20:50:22] *** Joins: amb007 (~a_bakic@66.13.23.93.rev.sfr.net)
[20:57:20] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:00:06] <mzan> neominimum: I'm a newbie too. In CL recursive functions are not used as much as in Haskell. It favours explicit loop/iterate.
[21:00:46] <mzan> The CL standard does not guarantee tail call optimizations, so there can be problems for some compilers, if you recurse on a big list.
[21:01:38] <beach> More precisely, iteration is preferable on linear structures, because it is more efficient, and with recursion on linear structures, there is a risk to blow the stack.
[21:01:38] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:01:42] <mzan> I'm using the "iterate" macro, and I like it a lot. https://common-lisp.net/~loliveira/tmp/iterate-manual/iterate.html#Control-Flow
[21:02:20] <beach> Recursion is fine on tree-like structures when the depth is limited to (say) logarithmic.
[21:02:33] <mzan> yes
[21:03:20] <beach> mzan: I would not recommend an external library over a standard operator to a newbie.  It is fine if that's your choice, but I would be more careful with recommending it to others.
[21:04:46] <mzan> At least I didn't suggested Haskell :-)
[21:05:08] <mzan> or Scheme
[21:05:39] <mzan> neominimum: you are using recursion. Use Scheme because it supports tail call recursion directly in the standard :-)
[21:09:18] *** Parts: djuber (~user@65.79.128.64) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[21:15:32] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[21:16:45] <mzan> beach: in any case I disagree. LOOP is a macro, so it must be studied apart. "Iterate" is a very similar macro, but better. "Iterate" is used a lot, so it is not standard, but for sure not esoteric. It is nearly standard.  In case he had to read legacy code, if he knows "iterate" macro, he can understood LOOP macro.
[21:17:02] *** Quits: dre (~dre@2001:8003:c932:c301:c799:698e:a7d8:4ce6) (Ping timeout: 240 seconds)
[21:17:25] <beach> Of course.
[21:17:37] <beach> I mean "of course you disagree".
[21:21:48] <_death> some thoughts I had about iterate a while ago https://old.reddit.com/r/adventofcode/comments/e92jm2/2019_day_11_solutions/faht58g/?context=3 ... since then the breaking change was committed btw
[21:22:00] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:22:37] *** Joins: didi (~user@user/didi)
[21:26:04] *** Joins: djuber (~user@65.79.128.64)
[21:26:59] <mzan> _death: ah ah, funny enough I discovered that if I try to optimize the code with "iterate", SBCL complains because variables like "x1", "x2" in your example can be "nil" and not only "fixnum" or something of similar. But probably there are sane workarounds, and it is also my fault in specifying typing constraints.
[21:27:29] <mzan> Your example code is very clear.
[21:27:33] <mzan> I like a lot the CL loops.
[21:28:18] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:397b:3ff9:d4a9:1b8e)
[21:28:35] <_death> according to its source code iterate existed since 1989, and perhaps made into a library in 2003.. so when a breaking change is introduced in 2021 I think it's a good argument for LOOP
[21:29:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[21:29:46] <mzan> And to be fair, if you "iterate" on an empty data-structure, then the returned "x1" can be nil, and the code must take in account this. So SBCL is right.
[21:30:10] <mzan> ah ok, you were "deadh" in the thread, not "oantolin". I will read better, sorry.
[21:30:21] *** Joins: eddof13 (~textual@177.230.240.94)
[21:31:29] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f4:5ff0:397b:3ff9:d4a9:1b8e) (Ping timeout: 252 seconds)
[21:31:57] *** Quits: amb007 (~a_bakic@66.13.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[21:32:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:32:40] *** Joins: amb007 (~a_bakic@36.105.204.77.rev.sfr.net)
[21:33:26] *** Quits: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:34:17] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f9c4:ec41:3bfb:d5c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:37:30] <_death> probably beach's point had a different rationale, btw.. a CL newbie should learn to read and write CL proper well before getting too comfortable with (reliant on) external libraries purporting to replace or improve upon some CL counterpart
[21:38:10] <mzan> _death: I read better now. Yes. Probably in a perfect world, one should change the version of "iterate" and other macro, every time there is a breaking change. So one can import something like "iterate_v2", and this will not break code using "iterate_v1".
[21:39:11] <_death> in a perfect world one would not need to create new versions, since everything would be perfect already ;)
[21:39:18] <mzan> LOOP for sure is more stable, because it is part of the standard. And then there are also "mapcar" & C. that are more standards and more direct.
[21:39:53] <mzan> Probably a newbie should first exsercise with mapcar & C. Then study LOOP and/or "iterate".
[21:40:06] <Alfr> tagbody anyone?
[21:40:26] <Bike> considered harmful
[21:41:57] <Alfr> The problem with loop is, imho, that it has non-obvious rules regarding clause placement.
[21:42:05] <Alfr> s/rules/restrictions/
[21:42:09] <didi> Puzzle: How to print "X A\nX B\nX C\n" from (X A B C) using only format? i.e., without transforming (X A B C) into something more suitable.  I think, if at all possible, it might involve ~? and ~*.
[21:42:12] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:42:15] <edgar-rft> the only reason why there is no edgar-v2 is because I'm already perfect? probably no...
[21:42:46] <Alfr> Bike, just in case someone doesn't like the other constructs.
[21:44:03] <mzan> _death: "probably beach's point had a different rationale, btw.. a CL newbie should learn to read and write CL proper". Yes. If one is serious, it should start from the bases, and then build up.
[21:44:26] <Alfr> Bike, also many things are considered harmful, and I guess manually writing tagbodies may actually be unhealthy.
[21:44:30] <mzan> BTW I studied a little of CL basic (but not too much), and then I started playing with macro and other powerful features, for discovering the funny/powerful parts of CL.
[21:46:02] <phoe> hey why is tagbody considered harmful
[21:46:50] <ck_> is it?
[21:47:00] <edgar-rft> try to tag your body and you'll instantly know
[21:47:07] <phoe> Bike did mention it
[21:47:39] <Bike> well you see, our intellectual powers are rather geared to master static relations
[21:47:54] <ck_> maybe because of go because of goto because of "Dijkstra decreed it"
[21:47:58] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[21:48:23] <Bike> not because dijkstra decreed it, but rather because his reasons make sense. better to use higher level constructs in almost all cases.
[21:48:37] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[21:48:58] <ck_> doesn't PCL use it as an example for how awesome a direct translation of one of Knuths algorithms can be done using tagbody, as a first step for refacoring it
[21:49:21] <Bike> 's not like i'd want it removed from the language or anything.
[21:49:28] <ck_> yeah was about to say something like that
[21:49:40] <Bike> but i wouldn't recommend using it instead of loop or iterate.
[21:49:42] <ck_> maybe "harmful" bothers me too much as a descriptor
[21:49:55] <mzan> "can be harmful"
[21:50:19] <_death> to get better context for Dijkstra, imagine (tagbody <your whole program here, using go to jump around>)
[21:50:26] <Bike> the context of dijkstra's paper was that people were regularly using goto when they could have used better control constructs. nowadays that's not really a problem with tagbody
[21:50:29] <Bike> yeah
[21:51:16] <Bike> people rarely use tagbody, and when they do use it it's for some weird shit that's hard or impossible to express with higher level constructs. like in eclector off the top of my head
[21:51:20] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[21:51:28] <mzan> +1
[21:51:33] <didi> (tagbody <your whole ...>) reminds me of an assembly program.
[21:51:45] <mzan> (+0.25 because I'm a newbie :-)
[21:51:53] *** Joins: treflip (~user@user/treflip)
[21:52:08] <_death> didi: indeed.. or old time BASIC, which Disjktra also had some thoughts about
[21:52:38] <didi> _death: Are your mind damaged forever?
[21:52:47] <Bike> dijkstra was also writing when "structured programming" was new, instead of now where it's so basic people don't remember it had to be invented
[21:52:55] <didi> s/Are/Is
[21:52:57] <_death> didi: only since I learned BASIC I guess.. but I started with LOGO :)
[21:53:04] <didi> :-)
[21:53:45] <mzan> Between GOTO and structured programming there were...
[21:53:48] <mzan> ... GOSUB :-)
[21:56:09] *** Quits: eddof13 (~textual@177.230.240.94) (Ping timeout: 250 seconds)
[21:56:23] <ck_> also COME FROM
[21:59:16] <yottabyte> I'm not too knowledgeable about namespaces, but when I quickload a library, how do I add it to my namespace so I don't have to call functions from it with the name? like instead of library:function just call function. I guess this can become a problem if the library contains a function that's already defined in your namespace? but yeah.
[21:59:24] <yottabyte> I'm pretty certain that this library doesn't
[21:59:52] <didi> Oh, well, I can't solve my format puzzle. I'll transform the argument. /me likes format "puzzles"
[22:00:16] <Bike> yottabyte: use-package (or :use specified in your defpackage)
[22:00:36] <_death> Bike: aside from tagbody being useful for state machines and such, it may also be useful to expand to in macros..
[22:01:01] <yottabyte> so Bike I just did (ql:quickload :arrow-macros)
[22:02:19] <Bike> Okay
[22:02:24] <Bike> ?
[22:02:45] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[22:02:55] <yottabyte> I don't know what you mean
[22:03:20] <_death> yottabyte: (defpackage :yottabyte (:use :cl :arrow-macros)) (in-package :yottabyte) (-> "Hello" write-line)
[22:04:45] <yottabyte> I see
[22:05:37] <didi> Done. Bo-ring.
[22:05:48] <_death> in a real program, consider using (:import-from :arrow-macros :->) instead of :use, to explicitly import the symbols you care about
[22:07:11] <didi> phoe: Sorry, but what's the name of the library which has literal tabs inside strings again?
[22:10:45] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[22:16:49] *** Quits: kevingal (~quassel@2001:770:c0:401:b5f1:3b1a:48a5:75f) (Remote host closed the connection)
[22:17:24] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[22:18:26] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 260 seconds)
[22:22:27] *** Joins: z3t05 (~z3t0@146.71.14.98)
[22:23:13] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[22:23:17] *** Joins: Alfr (~Alfr@user/alfr)
[22:24:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:24:48] *** Joins: jgkamat- (~jay@user/jay)
[22:24:48] *** Joins: Shinmera- (~shinmera@shirakumo/shinmera)
[22:25:05] *** Joins: danieli3 (~danieli@user/danieli)
[22:25:14] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[22:25:14] *** Quits: jgkamat (~jay@user/jay) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:25:15] *** z3t05 is now known as z3t0
[22:25:21] *** Joins: kagevf_ (~jfh@ip68-108-33-76.lv.lv.cox.net)
[22:25:26] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[22:25:27] *** Joins: aeth (~aeth@user/aeth)
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:41] *** Quits: danieli (~danieli@user/danieli) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: stack (~stack@ctrl-c.club) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[22:25:43] *** Shinmera- is now known as Shinmera
[22:25:56] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[22:25:59] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[22:26:03] *** Joins: stack (~stack@ctrl-c.club)
[22:26:06] *** danieli3 is now known as danieli
[22:29:22] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[22:29:45] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:32:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:35:13] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:397b:3ff9:d4a9:1b8e) (Read error: Network is unreachable)
[22:37:29] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 252 seconds)
[22:42:06] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[22:48:12] *** Quits: didi (~user@user/didi) (Remote host closed the connection)
[22:50:17] *** Quits: amb007 (~a_bakic@36.105.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:54:11] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[22:54:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:56:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:01:12] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[23:06:12] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[23:18:27] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:18:33] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[23:18:47] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[23:18:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Client Quit)
[23:19:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:28:44] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Quit: leaving)
[23:35:04] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[23:35:52] *** Quits: stack (~stack@ctrl-c.club) (Killed (NickServ (GHOST command used by stack69!~StackDoub@45-29-51-69.lightspeed.cicril.sbcglobal.net)))
[23:36:11] *** Joins: stack1 (~stack@ctrl-c.club)
[23:39:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:43:39] *** Joins: kevingal (~quassel@37.228.202.92)
[23:43:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:43:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:54:06] *** Joins: amb007 (~a_bakic@70.105.204.77.rev.sfr.net)
[23:58:48] <Josh_2> _death: I agree with your sentiments about iterate
