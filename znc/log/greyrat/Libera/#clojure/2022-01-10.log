[00:08:10] *** Quits: victor (uid208353@user/victor) (Quit: Connection closed for inactivity)
[00:25:57] <nij-> Hmm so far cider doesn't sound like a stable thing to use. Should I avoid it?
[00:31:38] <technomancy> I mean if you got it working then use it
[00:31:43] <technomancy> it just has a reputation for instability
[00:32:33] <ridcully> nij-: few years back cider was in a rough spot, where it broke for heavy users.  those users switched to simpler tooling and stayed with it.  from the complains here i'd guess, that these times are over
[00:32:58] *** Joins: schmudde1 (~schmudde@2001:b07:ae6:7d19:e795:d5e:5051:fedb)
[00:34:09] <nij-> Got it. Thanks for the wisdom. I will pay attention to that. (By the way, thanks for your work on leiningen, technomancy! It's amazing.)
[00:38:09] <shem> i'm using cider developing a fairly heavy commercial application and i'm happy with it. 
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:48:57] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[00:49:25] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 240 seconds)
[00:53:27] *** Quits: struchu (~struchu@staticline-31-183-169-189.toya.net.pl) (Quit: WeeChat 3.3)
[00:58:44] *** Joins: seabass (~seabass@user/seabass)
[01:02:16] <seabass> Hello! Does anyone know if there's a way to 'inject' something into the return value of a function's calling function?
[01:03:35] <seabass> imagine a do function with two forms as arguments - normally, the do call would only return the return value its last form. How could one of the forms inside the do squeeze something extra onto the do's return value? 
[01:05:23] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[01:10:20] <technomancy> seabass: put it in at `update` call I guess?
[01:10:42] <technomancy> that question is really vague; maybe an example would help clarify
[01:14:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[01:27:28] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:33:56] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[01:45:30] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:45:31] <seabass> technomancy, OK, but it's getting a little late here in Britain, so I'll save that for another day ;) 
[01:46:41] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[01:47:25] *** Quits: schmudde1 (~schmudde@2001:b07:ae6:7d19:e795:d5e:5051:fedb) (Ping timeout: 240 seconds)
[01:51:49] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 240 seconds)
[01:54:26] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[02:18:52] <TimMc> nij-: Yeah, what ridcully said -- it broke a lot and was a very bad choice for beginners (or anyone who touched their config) as a result.
[02:19:10] <TimMc> I never went back and tried it again, although it's good to hear that it's working better now.
[02:21:03] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 256 seconds)
[02:21:23] <nij-> But I cannot imagine doing lisp without staying in emacs......
[02:21:29] <nij-> What would be a better choice for me?
[02:22:25] <TimMc> If it's working, use CIDER and be happy!
[02:22:47] <nij-> how about it's not? I simply fall back to a terminal with a repl?
[02:22:52] <TimMc> yep
[02:23:06] <TimMc> I suppose you could run the shel from Emacs, too...
[02:23:11] <nij-> *gasp*     ;; => true
[02:24:08] <TimMc> But yeah, my workflow was often: Edit edit edit, alt-tab to REPL, retrieve last "require" from REPL history, execute, retrieve test command from history, execute.
[02:24:51] <nij-> *gasp-again*     ;; => true
[02:24:57] <TimMc> At times I also used unit tests with auto-reloading.
[02:25:32] <goodger> does gasp need to be an atom in this context?
[02:26:04] <TimMc> I guess I'd also recommend keeping your emacs configuration under source control so that if something breaks, you can revert. :-)
[02:34:19] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:34:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:35:54] <technomancy> nij-: cider isn't the only emacs option; I use https://github.com/sanel/monroe/
[02:36:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:36:28] <technomancy> it's just an nrepl client and nothing else
[02:36:38] <technomancy> but it also works with nrepl servers in other languages
[02:37:01] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:37:36] <nij-> Thanks! I will keep that in my note. 
[02:38:16] <nij-> I start to learn how much I've been spoiled by CL.. hotload libs, super interactive repl (slime/sly).. etc etc. But heck that's not a complaint. I come here to learn whawt Clojure can offer :)
[02:39:17] <technomancy> the biggest loss by far is not having restarts
[02:39:30] <technomancy> somehow we manage to survive
[02:39:48] <nij-> restarts?
[02:40:04] <technomancy> from CL
[02:46:04] <nij-> How about the full condition system?
[02:48:19] <technomancy> also not present, but lacking restarts is the part that hurts the most
[02:48:49] <technomancy> there are ports of the full condition system but they're not that useful because they're 3rd-party so libraries still throw exceptions instead of conditions
[02:50:51] <nij-> Gotcha. How about CLOS, another killer feature of CL. I'm aware that Clojure does no OOP, so maybe this is a weird question. But do you miss some power of CLOS from CL?
[02:53:10] <technomancy> not a bit
[02:53:22] <technomancy> not having OOP is one of the best features of clojure
[02:54:13] <nij-> Good to hear. I'm so excited to learn more about the paradigm (DOD? . new to me).
[02:54:26] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[02:54:59] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:55:33] <nij-> As this will be a brand new paradigm for me, I might not just start learning it by writing code. I'm familiar with lisp syntax, so I think I'm good to just start reading code. Would you recommend some small-medium sized project that follows Clojure's idiom nicely?
[02:58:20] <technomancy> hm... good question. best I can think of is https://github.com/technomancy/syme which is pretty small but self-contained and useful on its own
[02:58:26] <technomancy> I haven't looked at it in years tho
[02:59:21] <technomancy> but nothing's really changed since then that would change how I would have written this kind of code
[03:00:42] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:01:02] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:43:46] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[03:53:57] <nij-> Thanks :)
[03:58:37] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 240 seconds)
[04:14:44] <nij-> Why blue and green in the logo of clojure?
[04:18:35] <selfsymmetric-mu> nij-: I don't know, but presumably you could ask the designer. It's Tom Hickey, the creator's brother.
[04:36:41] <nij-> selfsymmetric-mu: I will go knock on his door then :)
[04:37:24] <nij-> Btw, I'm aware that clojure does no OOP. How do we design a system with lots of inheritance-relation then? (e.g. a computer algebra system)
[04:41:35] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:50:26] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[05:03:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:05:38] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:11:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:12:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6) (Ping timeout: 240 seconds)
[05:17:57] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[05:18:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[05:40:31] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:43:37] <nij-> What does R Hickey meant by simple services in "Consider building simple services rather than lang libs"? in  1:00:59 of https://www.youtube.com/watch?v=ROor6_NGIWU
[05:49:33] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:54:37] *** Joins: mbuf (~Shakthi@182.77.103.82)
[05:55:58] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[06:01:54] *** Joins: sunarch (uid526836@user/sunarch)
[06:03:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:09:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:33:02] <selfsymmetric-mu> nij-: Multimethods, protocols, and tags all have inheritance relationships.
[06:33:39] <selfsymmetric-mu> Though they do not satisfy the other core concept of OOP, viz. coupling functions with data.
[06:36:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:47:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:48:12] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:58:29] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[06:58:47] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:02:55] <technomancy> the problem with OOP is that it mushes together a bunch of unrelated concepts and makes you use them together
[07:03:38] <technomancy> it's not that inheritance is bad; it's bad if you want to use some polymorphism and you got some inheritance that came along with it that you can't detatch
[07:04:06] <technomancy> polymorphism isn't bad on its own, but it's bad as the default way of doing every single call like in Java
[07:04:58] <technomancy> IMO: stop talking about OOP and talk about actual specific concepts on their own merits; the term has simply outlived its usefulness
[07:05:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[07:05:21] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:38:23] *** Joins: puchka (~marius@165.73.242.6)
[09:01:25] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:21:14] *** Joins: matty_ma1 (~matt@129.222.239.110)
[09:26:02] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:49:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[09:51:54] *** Joins: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw)
[10:05:52] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:37:49] *** Quits: puchka (~marius@165.73.242.6) (Ping timeout: 240 seconds)
[10:40:02] *** Joins: puchka (~marius@165.73.242.5)
[10:46:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:58:29] *** Joins: struchu (~struchu@62.87.192.114)
[11:00:06] *** Quits: struchu (~struchu@62.87.192.114) (Client Quit)
[11:06:57] *** Joins: struchu (~struchu@62.87.192.114)
[11:31:41] *** Quits: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:39:30] *** Quits: struchu (~struchu@62.87.192.114) (*.net *.split)
[11:39:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: henry40408 (~henry4040@175.182.108.239) (*.net *.split)
[11:39:31] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (*.net *.split)
[11:39:31] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[11:39:32] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[11:39:32] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[11:39:32] *** Quits: nuorzi (nuorzi@hilla.kapsi.fi) (*.net *.split)
[11:39:32] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[11:39:32] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (*.net *.split)
[11:39:32] *** Quits: markmarkmark (~mark@user/markmarkmark) (*.net *.split)
[11:39:32] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (*.net *.split)
[11:39:32] *** Quits: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net) (*.net *.split)
[11:39:32] *** Quits: nighcoder (~ciumbi@206.176.143.59) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[11:39:32] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[11:39:32] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[11:39:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[11:39:32] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[11:39:33] *** Quits: gonewest818[m] (~gonewest8@2001:470:69fc:105::f38b) (*.net *.split)
[11:39:33] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (*.net *.split)
[11:39:33] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[11:39:33] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[11:39:33] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[11:39:33] *** Quits: goodger (~goodger@2a01:4f8:c2c:33db::1) (*.net *.split)
[11:39:34] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (*.net *.split)
[11:39:34] *** Quits: TimMc (~timmc@user/timmc) (*.net *.split)
[11:39:34] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: gueorgui (~gueorgui@user/gueorgui) (*.net *.split)
[11:39:34] *** Quits: ocTan_14_yKp[m] (~replikvlt@2001:470:69fc:105::2cb0) (*.net *.split)
[11:39:34] *** Quits: gko (~user@user/gko) (*.net *.split)
[11:39:34] *** Quits: technomancy (~user@170.ip-158-69-211.net) (*.net *.split)
[11:39:34] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[11:39:34] *** Quits: mp (sid298319@id-298319.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: sushimako (~flo@2a03:b0c0:2:d0::e3:d001) (*.net *.split)
[11:39:35] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[11:39:35] *** Quits: puchka (~marius@165.73.242.5) (*.net *.split)
[11:39:35] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:35] *** Quits: Harlin_ (~DonQixote@63-230-76-242.clsp.qwest.net) (*.net *.split)
[11:39:35] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (*.net *.split)
[11:39:35] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[11:39:35] *** Quits: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de) (*.net *.split)
[11:39:35] *** Quits: lazr (~lazr@45.76.248.123) (*.net *.split)
[11:39:35] *** Quits: lunik1 (~lunik1@37.205.14.203) (*.net *.split)
[11:39:35] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[11:39:36] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (*.net *.split)
[11:39:36] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[11:39:36] *** Quits: HDurer (~hdurer@104.132.45.86) (*.net *.split)
[11:39:36] *** Quits: RedNifre (~michael@dslb-002-203-247-192.002.203.pools.vodafone-ip.de) (*.net *.split)
[11:39:36] *** Quits: Duke- (~duke@198.20.115.180) (*.net *.split)
[11:39:36] *** Quits: wht (~wht@havoc.proulx.com) (*.net *.split)
[11:39:36] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[11:39:36] *** Quits: aphyr (~kyle@aphyr.com) (*.net *.split)
[11:39:36] *** Quits: RendySurvage (~rendysurv@64.72.216.39) (*.net *.split)
[11:39:36] *** Quits: sobel (~matt@66.219.34.76) (*.net *.split)
[11:39:36] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[11:39:37] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[11:39:37] *** Quits: wink (fhtagn@user/wink) (*.net *.split)
[11:39:37] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[11:39:37] *** Quits: i7c (~i7c@user/i7c) (*.net *.split)
[11:39:37] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (*.net *.split)
[11:39:38] *** Quits: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa) (*.net *.split)
[11:39:38] *** Quits: shem (~shem@saltus.discendum.com) (*.net *.split)
[11:39:38] *** Quits: bbz (sid62109@id-62109.ilkley.irccloud.com) (*.net *.split)
[11:39:39] *** Quits: glider (~glider@user/glider) (*.net *.split)
[11:39:39] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[11:39:39] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[11:39:39] *** Quits: rovanion (~rovanion@h-46-59-13-236.A163.priv.bahnhof.se) (*.net *.split)
[11:39:39] *** Quits: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru) (*.net *.split)
[11:39:39] *** Quits: madscientist` (tpalohei@kapsi.fi) (*.net *.split)
[11:39:39] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[11:39:39] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[11:39:39] *** Quits: mala (~mala@user/malaclyps) (*.net *.split)
[11:39:39] *** Quits: karthink[m] (~karthinkm@2001:470:69fc:105::d777) (*.net *.split)
[11:39:40] *** Quits: nivekuil (~nivekuilc@2001:470:69fc:105::d57e) (*.net *.split)
[11:39:40] *** Quits: punnie (~punniemat@2001:470:69fc:105::1193) (*.net *.split)
[11:39:40] *** Quits: spec (~spec@user/spec) (*.net *.split)
[11:39:40] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[11:39:40] *** Quits: harryvederci (aca786de33@user/harryvederci) (*.net *.split)
[11:39:40] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[11:39:41] *** Quits: penguwin (~penguwin@fribbledom.com) (*.net *.split)
[11:39:41] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[11:39:41] *** Quits: jsn- (~jason@scw.ice-9.eu) (*.net *.split)
[11:39:41] *** Quits: benoitj (~benoitj@user/benoitj) (*.net *.split)
[11:39:41] *** Quits: bcmiller (~bm3719@66.42.95.185) (*.net *.split)
[11:39:41] *** Quits: golanv (~golanv@2001:470:69fc:105::54c) (*.net *.split)
[11:39:41] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[11:39:41] *** Quits: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152) (*.net *.split)
[11:39:42] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[11:39:42] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[11:39:42] *** Quits: dale (dale@user/dale) (*.net *.split)
[11:39:42] *** Quits: zak (~zak@144.172.69.61) (*.net *.split)
[11:39:42] *** Quits: Para (~Para@95.216.176.167) (*.net *.split)
[11:39:42] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[11:39:42] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[11:39:42] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[11:39:43] *** Quits: maskd (~eu@user/maskd) (*.net *.split)
[11:39:43] *** Quits: Wanderer (~wanderer@user/wanderer) (*.net *.split)
[11:39:43] *** Quits: rommudoh[m] (~rommudoht@2001:470:69fc:105::d736) (*.net *.split)
[11:39:43] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[11:39:43] *** Quits: spirit- (~spirit@233.ip-144-217-92.net) (*.net *.split)
[11:39:43] *** Quits: amoe (~amoe@visarend.solasistim.net) (*.net *.split)
[11:39:44] *** Quits: Solid (~slot@xmonad/slotThe) (*.net *.split)
[11:39:44] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[11:39:44] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[11:39:44] *** Quits: pam_cakes[m] (~pamcakesm@2001:470:69fc:105::925c) (*.net *.split)
[11:39:44] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[11:39:44] *** Quits: thinkerer0891[m] (~thinkerer@2001:470:69fc:105::1:5c62) (*.net *.split)
[11:39:44] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[11:39:44] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[11:39:45] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: nackjicholson (e492d83292@2604:bf00:561:2000::1d8) (*.net *.split)
[11:39:45] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: EdwardIII (~edwardiii@user/edwardiii) (*.net *.split)
[11:39:45] *** Quits: broquain1 (~dbrook@static.140.30.69.159.clients.your-server.de) (*.net *.split)
[11:39:45] *** Quits: djm (djm@user/djm) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:46:09] *** Joins: matty_ma1 (~matt@129.222.239.110)
[11:50:42] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[11:51:59] *** Joins: shiranaihito (~textual@2001-b011-4000-12bc-747e-740b-ef4b-9691.dynamic-ip6.hinet.net)
[11:51:59] *** Joins: puchka (~marius@165.73.242.5)
[11:51:59] *** Joins: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de)
[11:51:59] *** Joins: struchu (~struchu@62.87.192.114)
[11:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[11:51:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:51:59] *** Joins: mbuf (~Shakthi@182.77.103.82)
[11:51:59] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:51:59] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[11:51:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:51:59] *** Joins: henry40408 (~henry4040@175.182.108.239)
[11:51:59] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[11:51:59] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[11:51:59] *** Joins: justIrresolute (~justache@user/justache)
[11:51:59] *** Joins: Harlin_ (~DonQixote@63-230-76-242.clsp.qwest.net)
[11:51:59] *** Joins: fluxit (~fluxit@techsmix.net)
[11:51:59] *** Joins: xerox (~edi@user/edi)
[11:51:59] *** Joins: lazr (~lazr@45.76.248.123)
[11:51:59] *** Joins: nuorzi (nuorzi@hilla.kapsi.fi)
[11:51:59] *** Joins: lunik1 (~lunik1@37.205.14.203)
[11:51:59] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[11:51:59] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[11:51:59] *** Joins: tomku (~tomku@user/tomku)
[11:51:59] *** Joins: golanv (~golanv@2001:470:69fc:105::54c)
[11:51:59] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:51:59] *** Joins: karthink[m] (~karthinkm@2001:470:69fc:105::d777)
[11:51:59] *** Joins: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152)
[11:51:59] *** Joins: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa)
[11:51:59] *** Joins: gonewest818[m] (~gonewest8@2001:470:69fc:105::f38b)
[11:51:59] *** Joins: pam_cakes[m] (~pamcakesm@2001:470:69fc:105::925c)
[11:51:59] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[11:51:59] *** Joins: rommudoh[m] (~rommudoht@2001:470:69fc:105::d736)
[11:51:59] *** Joins: thinkerer0891[m] (~thinkerer@2001:470:69fc:105::1:5c62)
[11:51:59] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[11:51:59] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[11:51:59] *** Joins: nivekuil (~nivekuilc@2001:470:69fc:105::d57e)
[11:51:59] *** Joins: punnie (~punniemat@2001:470:69fc:105::1193)
[11:51:59] *** Joins: ocTan_14_yKp[m] (~replikvlt@2001:470:69fc:105::2cb0)
[11:51:59] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[11:51:59] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[11:51:59] *** Joins: i7c (~i7c@user/i7c)
[11:51:59] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[11:51:59] *** Joins: wink (fhtagn@user/wink)
[11:51:59] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:51:59] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[11:51:59] *** Joins: sobel (~matt@66.219.34.76)
[11:51:59] *** Joins: RendySurvage (~rendysurv@64.72.216.39)
[11:51:59] *** Joins: aphyr (~kyle@aphyr.com)
[11:51:59] *** Joins: jjhoo (~jahakala@user/jjhoo)
[11:51:59] *** Joins: wht (~wht@havoc.proulx.com)
[11:51:59] *** Joins: Duke- (~duke@198.20.115.180)
[11:51:59] *** Joins: RedNifre (~michael@dslb-002-203-247-192.002.203.pools.vodafone-ip.de)
[11:51:59] *** Joins: HDurer (~hdurer@104.132.45.86)
[11:51:59] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[11:51:59] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[11:51:59] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[11:51:59] *** Joins: TimMc (~timmc@user/timmc)
[11:51:59] *** Joins: goodger (~goodger@2a01:4f8:c2c:33db::1)
[11:51:59] *** Joins: mcint (mcint@user/mcint)
[11:51:59] *** Joins: amk (~amk@109.255.169.126)
[11:51:59] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[11:51:59] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[11:51:59] *** Joins: sushimako (~flo@2a03:b0c0:2:d0::e3:d001)
[11:51:59] *** Joins: mp (sid298319@id-298319.lymington.irccloud.com)
[11:51:59] *** Joins: obviyus (sid415299@user/obviyus)
[11:51:59] *** Joins: technomancy (~user@170.ip-158-69-211.net)
[11:51:59] *** Joins: gko (~user@user/gko)
[11:51:59] *** Joins: mala (~mala@user/malaclyps)
[11:51:59] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[11:51:59] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[11:51:59] *** Joins: madscientist` (tpalohei@kapsi.fi)
[11:51:59] *** Joins: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru)
[11:51:59] *** Joins: rovanion (~rovanion@h-46-59-13-236.A163.priv.bahnhof.se)
[11:51:59] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[11:51:59] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[11:51:59] *** Joins: glider (~glider@user/glider)
[11:51:59] *** Joins: bbz (sid62109@id-62109.ilkley.irccloud.com)
[11:51:59] *** Joins: shem (~shem@saltus.discendum.com)
[11:51:59] *** Joins: bcmiller (~bm3719@66.42.95.185)
[11:51:59] *** Joins: benoitj (~benoitj@user/benoitj)
[11:51:59] *** Joins: jsn- (~jason@scw.ice-9.eu)
[11:51:59] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[11:51:59] *** Joins: penguwin (~penguwin@fribbledom.com)
[11:51:59] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[11:51:59] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[11:51:59] *** Joins: harryvederci (aca786de33@user/harryvederci)
[11:51:59] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:51:59] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[11:51:59] *** Joins: spec (~spec@user/spec)
[11:51:59] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[11:51:59] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[11:51:59] *** Joins: Solid (~slot@xmonad/slotThe)
[11:51:59] *** Joins: amoe (~amoe@visarend.solasistim.net)
[11:51:59] *** Joins: spirit- (~spirit@233.ip-144-217-92.net)
[11:51:59] *** Joins: samebchase (~samebchas@51.15.68.182)
[11:51:59] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[11:51:59] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[11:51:59] *** Joins: sudden (~cat@user/sudden)
[11:51:59] *** Joins: Para (~Para@95.216.176.167)
[11:51:59] *** Joins: zak (~zak@144.172.69.61)
[11:51:59] *** Joins: drakonis (drakonis@user/drakonis)
[11:51:59] *** Joins: dale (dale@user/dale)
[11:51:59] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[11:51:59] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[11:51:59] *** Joins: Wanderer (~wanderer@user/wanderer)
[11:51:59] *** Joins: maskd (~eu@user/maskd)
[11:51:59] *** Joins: _\_ (~o@user/ding)
[11:51:59] *** Joins: djm (djm@user/djm)
[11:51:59] *** Joins: broquain1 (~dbrook@static.140.30.69.159.clients.your-server.de)
[11:51:59] *** Joins: EdwardIII (~edwardiii@user/edwardiii)
[11:51:59] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[11:51:59] *** Joins: Ragnor (~Ragnor@user/ragnor)
[11:51:59] *** Joins: nackjicholson (e492d83292@2604:bf00:561:2000::1d8)
[11:51:59] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[11:51:59] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[11:51:59] *** Joins: leah2 (~leah@vuxu.org)
[11:51:59] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[11:51:59] *** Joins: unyu (~pyon@user/pyon)
[11:51:59] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[11:51:59] *** Joins: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net)
[11:51:59] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[11:51:59] *** Joins: markmarkmark (~mark@user/markmarkmark)
[11:51:59] *** Joins: _tjr_ (~tjr@233.ip-144-217-92.net)
[11:51:59] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:51:59] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:16] *** Joins: matty_ma1 (~matt@129.222.239.110)
[11:52:24] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[11:53:23] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 256 seconds)
[11:55:39] *** Quits: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de) (Ping timeout: 256 seconds)
[11:55:46] *** Joins: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de)
[11:56:13] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[12:04:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl)
[12:16:49] *** Joins: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[12:19:31] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[12:27:23] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:28:55] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:31:02] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[12:31:48] *** Quits: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:34:07] *** Joins: dsdolzhenko (~textual@ip-213-127-111-129.ip.prioritytelecom.net)
[12:37:50] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:38:09] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:54:43] *** Joins: schmudde1 (~schmudde@2001:b07:ae6:7d19:f5de:fd96:3367:61df)
[13:01:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:13:45] *** Joins: kipz (~kipz@home.kipz.org)
[13:22:11] *** Joins: balavir (~daniel@2605:a601:a189:1d00:bdad:7ea:f635:ce7a)
[13:28:01] *** Parts: balavir (~daniel@2605:a601:a189:1d00:bdad:7ea:f635:ce7a) ()
[13:40:38] *** Joins: matty_matt (~matt@129.222.239.110)
[13:46:18] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[13:47:19] *** Joins: dadinn (~dadinn@31.14.248.250)
[13:56:47] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[14:05:21] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[14:29:25] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[14:50:48] <sobel> that's a great take which i'll happily join. OO is a big bag of schemes and i don't hate them all. i just hate languages that stop at OO.
[15:02:50] <lunik1> nij-: https://github.com/weavejester/medley is a small project with good code that doesn't do anything exotic
[15:09:25] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:20:22] <nij-> > Multimethods, protocols, and tags all have inheritance ===> This is uplifting. I will look into that.
[15:20:59] <sobel> reading medley/core is reminding me of several coding sessions where the pervasive feeling/comment was, "huh, there's probably a builtin for this that i'd know if i weren't such a n00b"
[15:22:08] <nij-> technomancy: In CL's "OOP model" (aka CLOS) the methods are seperated from class. Does that makes things better? What's still not enough (except for mutability) comparing to Clojure's approach?
[15:23:18] <nij-> lunik1: Thanks for sharing :)
[15:24:26] *** Joins: henry404088 (~henry4040@175.181.188.127)
[15:25:49] *** Quits: henry40408 (~henry4040@175.182.108.239) (Ping timeout: 240 seconds)
[15:25:49] *** henry404088 is now known as henry40408
[15:38:57] *** Quits: schmudde1 (~schmudde@2001:b07:ae6:7d19:f5de:fd96:3367:61df) (Ping timeout: 240 seconds)
[15:48:56] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[15:58:13] *** Quits: struchu (~struchu@62.87.192.114) (Ping timeout: 240 seconds)
[16:04:08] *** Joins: struchu (~struchu@62.87.192.114)
[16:31:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687)
[16:37:29] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[16:39:15] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:45:18] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Quit: Sleep.)
[16:45:48] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[16:47:02] *** Quits: nighcoder (~ciumbi@206.176.143.59) (Remote host closed the connection)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:05:52] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl)
[17:19:01] *** Quits: puchka (~marius@165.73.242.5) (Ping timeout: 240 seconds)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:22:17] *** Joins: puchka (~marius@196.240.128.5)
[17:23:23] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:23:50] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[17:24:05] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[17:31:26] *** Joins: matty_matt (~matt@129.222.239.110)
[17:36:56] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[17:41:38] *** Joins: struchu (~struchu@62.87.192.114)
[17:48:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[17:48:37] *** Quits: struchu (~struchu@62.87.192.114) (Ping timeout: 240 seconds)
[17:48:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:50:47] *** Joins: struchu (~struchu@62.87.192.114)
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:34] *** Joins: xsperry (~xs@user/xsperry)
[17:55:21] *** Quits: dsdolzhenko (~textual@ip-213-127-111-129.ip.prioritytelecom.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:01:08] *** Joins: matty_matt (~matt@129.222.239.110)
[18:06:30] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[18:06:45] *** Joins: schmudde1 (~schmudde@public.toolboxoffice.it)
[18:07:06] *** Parts: dfreeman (~dfreeman@user/dfreeman) ()
[18:08:56] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[18:19:34] <nij-> selfsymmetric-mu: By inheritance in Multimethods, did you mean something like `(derive ::rect ::shape)`?
[18:21:49] <aphyr> This is one of those corners of Clojure I almost *never* use--multimethods and the inheritance system
[18:22:18] <nij-> aphyr: Why not?
[18:22:37] <aphyr> Not sure! I just never seem to hit problems where they feel like the right fit.
[18:22:40] <aphyr> Same with agents and STM
[18:22:58] <leah2> i think open classes are not that common in practice, really
[18:23:30] <aphyr> I *have* multiple times gotten mad at protocols/records/deftypes for not supporting method inheritance
[18:23:53] *** Joins: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[18:23:54] <nij-> leah2: What are open classes? aphyr: i see, maybe your projects do not involve the need to use them
[18:24:07] <leah2> nij-: open classes = you can add new implementations anytime
[18:24:14] <leah2> if you use pattern matching, that wouldnt work e.g.
[18:24:48] <aphyr> Ah, see here, I very much disagree--open classes are a constant thing for me
[18:24:52] <nij-> @_@ sure.. note taken..
[18:25:23] <leah2> but protocols are good enough then?
[18:25:32] <aphyr> Yeah, I think protocols/interfaces are generally good enough
[18:26:34] <aphyr> In almost all cases you can decompose what you would have done with inheritance chains into a plain function `general-foo` and a type-specific protocol function `specific-foo`, and have `specific-foo` call `general-foo` in place of `super`
[18:26:39] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[18:27:17] <aphyr> But there are some cases where that function call boundary gets awkward and has to take a zillion arguments
[18:27:55] <aphyr> or you wind up doing a weird (condp instance?) sort of dynamic type dispatch
[18:28:42] <nij-> I'm way too noob. I don't understand interface, let alone protocols - https://clojure.org/reference/protocols
[18:28:59] <nij-> Any more newb-friendly intro to interfaces and protocols?
[18:29:27] <aphyr> They're very close to the same thing. Both are a named type with a package of functions you can call, which dispatch based on the type of their first argument.
[18:29:53] <nij-> So interfaces here have nothing to do with definterface, right? https://clojuredocs.org/clojure.core/definterface
[18:30:19] <aphyr> Bingo. Interfaces are built into the JVM, defined with definterface. Faster, but classes have to declare they implement that interface explicitly.
[18:30:48] <aphyr> Protocols are a Clojure construct, defined with defprotocol. Slower, but they can be extended over arbitrary types even if those types had no idea the protocol exists.
[18:30:51] <nij-> Ok.. so I got to understand what interfaces mean in the first sense.
[18:31:23] <aphyr> (Technically defintferface doesn't define clojure functions, just methods, but it's a real easy thing to fix)
[18:32:12] <aphyr> https://aphyr.com/posts/352-clojure-from-the-ground-up-polymorphism might be handy
[18:32:18] *** Parts: Lycurgus (~juan@98.4.112.204) (Deus Ex)
[18:34:02] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:34:51] <aphyr> (this covers inventing ad-hoc runtime polymorphism, multimethods, hierarchies, interfaces, protocols, deftypes, and defrecords
[18:37:01] *** Quits: shiranaihito (~textual@2001-b011-4000-12bc-747e-740b-ef4b-9691.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[18:38:22] *** Quits: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: Textual IRC Client: www.textualapp.com)
[18:38:30] *** Joins: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch)
[18:38:41] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[18:39:57] <aphyr> Protocols are IMO one of the finest parts of Clojure and something I miss in most other languages
[18:49:02] <dfreeman> I use multimethods a lot in clojurescript for implementing views. We may have a generic concept for a piece of data, but depending on it's "type" we use multimethods to build a specific UI for it. It's very useful with reagent views
[18:50:16] <dfreeman> I also use a multimethod for routing. The router does all the navigation stuff, an a multimethod is used to dispatch to the correct view based on the route name. It felt very cumbersome to do that with protocols
[18:50:17] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:58:33] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[18:59:56] <nij-> aphyr: I'm reading (slowly and repeatingly). It's a bit dense to me but I think it's a very nice write-up. Thanks in advance!
[19:01:27] <aphyr> It's a bit confusing because Clojure's interface/protocol/deftype/defrecord system is strongly shaped by the underlying JVM, so you kind of have to understand the JVM's polymorphism in order to get why Clojure's is shaped this way
[19:02:09] <aphyr> e.g. "what the hell is a method, you promised me everything was functions" "welll... I lied"
[19:07:34] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[19:08:10] *** Quits: puchka (~marius@196.240.128.5) (Ping timeout: 256 seconds)
[19:09:09] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[19:12:48] *** Joins: matty_matt (~matt@129.222.239.110)
[19:13:08] <sobel> hindsight: i was much happier with clojure once i saw some great examples of why immutable data is great (hello, concurrency), and the areas where it is great to use a mutable transient.
[19:13:22] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[19:13:36] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[19:14:01] <sobel> as a SQL nerd it was truly handy to see a proper STM engine under the hood. lacking MVCC experience i might not have recognized what that thing is and why i like it.
[19:14:30] <aphyr> sobel: absolutely with you
[19:15:03] <sobel> i was prepared to be a monk of immutability but that was not really the center path
[19:16:16] <sobel> i still think STM is the best thing since sliced bread. SQL is a great model, clojure data is a great model. both offer immutability where it counts.
[19:18:39] *** Joins: puchka (~marius@165.73.240.116)
[19:23:15] <nij-> aphyr: If several methods are applicable with respect to a given dispatch function, does Clojure have an algorithm to decide which method to call? Or it simply calls all of the applicable methods?
[19:30:56] <aphyr> For multimethods, it tells you about the ambiguity and lets you explicitly prefer one
[19:31:14] <aphyr> (which, lmao, multimethods are not JVM methods)
[19:31:15] <nij-> And.. a takeaway from your article is that while interfaces are for JVM, protocols are for Clojure.. is that valid?
[19:31:57] <aphyr> for protocols/interfaces, resolution follows the JVM inheritance rules. Starts with the implementations for the concrete class, then walks up to superclasses.
[19:32:20] <aphyr> Both are for Clojure, but protocols are Clojure-specific
[19:32:30] <nij-> 🤯🤯🤯🤯 OK!
[19:33:10] <aphyr> In general, I use protocols/defrecords for like 90% of my polymorphic stuff.
[19:33:51] <aphyr> I drop to interfaces when performance is critical, and deftypes if I either need to shave down memory or implement Weird Stuff, like mutable datatypes.
[19:35:19] <aphyr> I basically only touch multimethods when I have to talk to other Clojure code that uses them--the built-in pretty printer for instance.
[19:36:11] <nij-> Why isn't type dispatching enough? What forces us to use protocols sometimes?
[19:36:30] *** Quits: schmudde1 (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[19:36:31] <aphyr> Yeah, in general first-arg type dispatch is like 90% of what you wat
[19:36:33] <aphyr> *want
[19:37:27] <aphyr> But like... maybe you want an open function which, I dunno, merges two sets. (union s1 s2). You want to care about the type of *both* sets for perf reasons. A protocol won't dispatch on the second arg.
[19:37:58] <aphyr> That's a reasonable thing for a multimethod if union is infrequently called and processing time *inside* union dominates.
[19:38:04] *** Joins: schmudde1 (~schmudde@public.toolboxoffice.it)
[19:38:39] <aphyr> (faster yet, drop to java and write a class with a union method, because the JVM actually DOES do later argument type dispatch)
[19:39:11] <nij-> This is example is for "Why we need interface dispatch sometimes" right?
[19:39:16] <nij-> How about protocols?
[19:39:39] <aphyr> The way Clojure interfaces work, I don't think you actually get to do type dispatch on later args.
[19:40:00] <aphyr> It's in the JVM, I think Clojure definterface just can't express it. Might be wrong though, been years since I tried.
[19:40:48] <aphyr> Ditto, protocols have no type dispatch on later args.
[19:41:56] <aphyr> In Java you can write `Set union(SortedSet a, TreeSet b) { ... }` and `Set union(SortedSet a, SortedSet b) { ... }` and those are different methods.
[19:43:21] <ridcully> multimethods give you the power to dispatch on whatever.  so they might even be ok to use locally (without planning to extend on them) for some poor persons pattern-matching
[19:45:20] <nij-> aphyr: I appreciate your help, but I have to be honest that it's over my head 🤯🤯 I have put this into note and will come back to interfaces and protocols later.
[19:46:08] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[19:46:10] <aphyr> Yeah, sorry, it's a bit much
[19:46:51] *** Quits: schmudde1 (~schmudde@public.toolboxoffice.it) (Read error: No route to host)
[19:46:59] <aphyr> You don't really need to care about most of this stuff until you Know You Need Type Polymorphism--then you can come back and learn it
[19:47:07] <nij-> No sorry at all. I really appreciate your article. 
[19:47:08] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[19:47:25] <nij-> Would it be helpful for me to first understand the basics of JVM and java?
[19:47:49] <aphyr> That's a useful but longer path.
[19:48:01] <aphyr> The short path is just to stick to defrecord + protocols
[19:49:51] <aphyr> It's perfectly valid to put most of the JVM in a box and stick it in your mental attic for like "when I really need to care later, this is here"
[19:53:07] <aphyr> Also, like... I think I wrote Clojure for several months before needing a protocol--in other languages you're generally defining types all over the place, in Clojure it's usually not as much a thing
[19:53:57] <aphyr> They're gonna come in super handy if you wind up, say, wrapping an existing Java library, or trying to write a fast data structure with alternate implementations
[19:54:10] <aphyr> But day to day stuff... maps and if/case statements, peel out
[19:58:49] <lagash> aphyr: us lurkers are learning some stuff today :)
[20:01:15] <Solid> after AoC, I now feel at a point where I'm comfortable with the basics of the language.  experience tells me that the best way to dive deeper into things is to find FLOSS projects to contribute to (bonus, I get to share the love :); do people here have any recommendations for this?
[20:03:41] <nij-> aphyr: from this good answer I think protocols' goal is to achieve better performance.
[20:04:02] <nij-> So I can safely skip this notion until the day I need to get serious with the underlying JVM?
[20:07:05] <Para> I'd say the change you will _ever_ need to get serious with JVM is pretty close to zero.
[20:07:08] <Para> *chance
[20:08:02] <nij-> Great to know.
[20:08:12] <nij-> Rich Hickey is such a giant.
[20:09:05] <Para> I personally don't care much about him at all. Well, I specifically avoid recognizing _people_ in tech, just the things people have produced :) Person cults are sneaky and dangerous.
[20:09:24] <nij-> I remember seeing someone says that Guy Steele was also surprised by how an outsider like R. Hickey could have done lisp so right.
[20:10:23] <nij-> Para: Agree. I just felt a little bit overwhelmed. I will still keep my nose sharp and examine his claims or decisions.
[20:10:59] <Para> That said, he's had a bunch of good ideas with Clojure. And a handful of bad ones as well, but nothing overtly dangerous. Maybe superfluous :)
[20:15:46] <aphyr> nij-: Yeah. Logically speaking there's nothing a protocol does that you can't do yourself with an if statement.
[20:16:32] <lunik1> I think we are now starting to see the rise of the lisps clearly directly inspired by clojure, which is nice to see
[20:16:37] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:17:18] <logiz> the rise of the lisps!
[20:17:34] <aphyr> There's so much good stuff to adopt/refine from Clojure!
[20:17:40] <aphyr> The sequence library is hands down the best I've ever used
[20:17:44] <Para> For me Clojure's greatest idea is simply "what if this code was both glanceable and pronouncable?"
[20:17:57] <nij-> pronouncable?
[20:18:10] <nij-> logiz: How do we make it rise even harder?!?!
[20:18:11] <Para> You can literally read Clojure code out loud without sounding like you have a stroke.
[20:18:12] <aphyr> caddr, nilp
[20:18:13] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[20:18:51] <lunik1> I would like to see a lisp where transducers are a more fundamental building block
[20:19:05] *** Joins: matty_ma1 (~matt@129.222.239.110)
[20:19:08] <aphyr> I really need to get *into* transducers at some point
[20:19:33] <lunik1> once I groked them I starting seeing cases where I could use them everywhere
[20:19:33] <logiz> nij-: I wish I knew, but I've noticed more people talk about CL in the past year or so
[20:19:48] <lunik1> groked? grokked?
[20:20:17] <technomancy> nij-: if your background is with OOP then I would consider avoiding polymorphism entirely until you get a feel for how to write code without it
[20:20:44] <technomancy> if you try to learn protocols and multimethods in a way that maps them onto CLOS instead of coming to them afresh I don't expect it will go well
[20:21:06] <technomancy> depending on what you're doing you can easily go for years without ever needing to write polymorphic code
[20:22:01] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[20:22:15] <aphyr> Speaking of transducers/iteration, I've been folding some ideas from CL's `loop` into `loopr`. We've got early return and optimized array loops now--it's an order of magnitude faster than reduce. https://github.com/aphyr/dom-top/blob/18d4f332e5bf2f06c53e9b256d65d95d8843f1a6/src/dom_top/core.clj#L705-L746
[20:23:12] *** Joins: seschwar (~seschwar@user/seschwar)
[20:23:21] <aphyr> I thought it would be sort of a fools errand to do this, like "how am I going to do loop better than the language designers" but it turns out I need this shape of "starting with variables, reduce over these collections, finally doing something" constantly
[20:23:32] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[20:24:27] <nij-> logiz: Where? Yeah, I got into CL last year too. 
[20:25:08] <nij-> technomancy: Hmmm.. the current project I have is a computer algebra system.
[20:25:48] <logiz> just around the nets, I've never used CL though, I just mess around with scheme on occasion
[20:25:53] <nij-> In math, there are many inheritance relations. For example, a GroupAlgebra is an Algebra, which is a Monoid, which is a Magma, which is a Category, which is a oo-Category.
[20:26:25] <nij-> aphyr: Aren't transducers `just' higher order functions?
[20:27:25] <aphyr> Yeah, that's true. loopr is syntactic, rather than functions.
[20:30:45] *** Joins: matty_matt (~matt@129.222.239.110)
[20:31:43] <nij-> Can I easily define "subrecords" in Clojure? Somethin like (defrecord People [name title]) (defsubrecord Adults [People] [job])?
[20:32:01] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:03] <nij-> So that an adult not only has a name and a title, but also has a job.
[20:32:36] *** Quits: dadinn (~dadinn@31.14.248.250) (Ping timeout: 256 seconds)
[20:33:13] <aphyr> nij-: You'd generally model this as {:name "aphyr", :title "doofus"}, {:name "aphyr", :title "doofus", :job "researcher"}
[20:33:37] <nij-> Oh you mean "just use maps"?
[20:33:39] <aphyr> Yup
[20:33:58] <nij-> Hmmmmmmm it feels itchy.
[20:34:05] <aphyr> It's gonna feel weird. :)
[20:34:09] *** Joins: matty_ma1 (~matt@129.222.239.110)
[20:34:29] <aphyr> Clojure leans really hard away from inheritance.
[20:34:30] <nij-> I mean.. what if I come back to the code one year later, and forgets that {:name .. :title .. :job ..} is supposed to model an adult?
[20:34:53] <nij-> I can write comments yes.. but wouldn't it be better if I can declare this model programatically?
[20:34:57] <aphyr> This is a real challenge without types!
[20:34:59] *** Joins: matty_ma2 (~matt@2600:381:4912:f85c:d1d5:960d:3bc9:260e)
[20:35:03] <nij-> What is?
[20:35:11] <aphyr> Remembering what maps "mean"
[20:35:23] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:35:47] <nij-> So.. how do I use types to help me remember?
[20:36:40] <aphyr> This is usually addressed through a.) documentation & variable names, b.) constructor functions like `(def adult ...)`, c.) tests, d.) validation functions (ad-hoc or more structured, ala schema or spec), and e.) static type libraries like core.typed.
[20:37:01] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[20:37:01] <aphyr> `(defn adult ...)` rather
[20:37:03] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[20:38:08] <aphyr> There's a cost spectrum here. Comments and variable names are ubiquitous and easy, but provide weak guardrails. Static types are much stronger, but core.typed is frankly... I'd say infeasible for large-scale work.
[20:38:09] * nij- feels naked.
[20:38:42] <nij-> Ok.. note taken. How to use static type in this scenario then?
[20:38:45] <aphyr> Every language has these choices, but make different choices about where they fall on the continuum, right? Haskell leans hard into Types Types Types.
[20:38:54] <aphyr> Clojure leans much more on the docs/tests side of things
[20:39:10] <aphyr> nij-: I advise against trying to do this right now.
[20:39:36] <aphyr> But when you want to lean into that rabbithole, https://github.com/typedclojure/typedclojure
[20:40:01] <technomancy> embrace the discomfort IMO
[20:40:38] * nij- embraces his nakedness!
[20:41:12] <aphyr> I have deployed core.typed in multiple projects when I felt like I Simply Could Not Keep Track Of All These Maps, and I've found that... for me personally it's usually more trouble than it's worth.
[20:41:25] <nij-> So the wisdom here to learn is that OOP's encapsulation doesn't do much good than mental comforts?
[20:41:41] <technomancy> encapsulation is great!
[20:41:43] <zephyr> what is a PL if not a mental futon
[20:41:45] <technomancy> it's by far the best part of OOP
[20:41:58] <technomancy> but you can do encapsulation easily without any of the other parts of OOP
[20:43:08] <nij-> I just feel comfortable to be able to inspect things like (class-of Adam) ;; => Adult
[20:43:19] <technomancy> a wise former co-worker of mine said "I only have one trick! find something complicated and take it apart; identify what it's made up of, and learn how to treat those different things distinctly. that's basically all I do but it takes me a long way."
[20:43:27] <nij-> And then I know everything about the class/collection/set/whatever-term "Adult" applies to Adam.
[20:43:40] <lunik1> nij-: a transducer is specifically a higher-order function that transforms one reducing function into another
[20:43:58] <lunik1> they made much more sense to make when I used them in actual code
[20:44:10] <nij-> lunik1: What is a reducing function? I know the function reduce btw.
[20:44:42] <aphyr> nij-: It might help initially to put a :type field in your maps. `{:type :adult, :name "aphyr", ...}`
[20:44:55] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[20:45:18] <lunik1> nij-: basically it's the kind of function you would use in reduce
[20:45:24] <ridcully> nij-: the reducing function is the function you pass in to reduce.  it takes two args - the previous result or init and the next item
[20:45:40] <technomancy> aka foldl or inject
[20:46:44] <nij-> aphyr: That sounds like a good idea @@
[20:47:06] <ridcully> Groovy also uses `inject`... i never understood that naming
[20:47:25] <nij-> lunik1: ridcully: Sounds like "binary operations", aren't they?
[20:48:07] *** Joins: matty_ma1 (~matt@129.222.239.110)
[20:48:18] <aphyr> nij-: specifically, monoids!
[20:48:24] <technomancy> ridcully: it's taken from smalltalk IIRC
[20:48:37] <aphyr> f :: a -> b -> a
[20:48:40] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:47] <technomancy> language devs always try to steal from smalltalk because it makes them sound cooler and more sophisticated
[20:50:11] <nij-> kinda weird. these are breads and butters in mathematics.
[20:50:18] <nij-> maybe smalltalk stole from mathematics ;)?
[20:50:40] <technomancy> oh, I just mean they took the name. the idea is much older, yeah.
[20:51:26] <nij-> gotcha
[20:51:41] <nij-> aphyr: would it be an ok style to do this instead?
[20:51:49] <ridcully> technomancy: maybe it makes sense in smalltalk... i'll never know ;)
[20:51:53] <nij-> `{:type :adult :data{:name "aphyr", ...}}`
[20:53:03] <aphyr> nij-: Try it and see--I think you'll probably find it's nicer to have things at once level.
[20:53:11] <nij-> Btw after watching several Hickey's talk, I've come to the conclusion that I have to work hard simplifying my talk slide in the future. 
[20:53:27] <nij-> aphyr: Gotcha.
[20:55:03] <technomancy> after I started going on long walks during the "all hands" call at work I realized slides are kinda pointless 98% of the time
[20:57:00] <nij-> all hands?
[20:57:53] <technomancy> like ... a big status update call that everyone in the company listens in on
[20:58:05] <ridcully> a navy term.  all hands on deck.  something's fucky and we need all folks to help
[20:58:35] <technomancy> oh, no this is a totally routine thing, not a crisis
[21:02:04] <nij-> Hmm DOD makes me rethink C and C++ somehow. I always thought C++ is an improvement to C because it gets OOP supports! In contrast, C only has its "lowly struct".
[21:02:15] <nij-> But if DOD makes sense, then structs are enough, right?
[21:02:39] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[21:03:20] <technomancy> yeah C++ isn't an improvement over C, but structs aren't enough
[21:03:32] <technomancy> you also need like ... actual strings, not just pointers in a trenchcoat
[21:04:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:05:40] <nij-> Why isn't struct enough? What's the difference between it and (CLojure's) maps?
[21:05:51] <technomancy> clojure has strings?
[21:06:43] <technomancy> it's just silly to look at C and think that "objects are thing that will fix this shitshow"
[21:07:11] <technomancy> there are a ton of bigger problems that it just doesn't even try to address
[21:09:56] <goodger> :D
[21:19:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[21:32:00] <nij-> Is it true that in many scenarios procedural algorithms perform better than functional algorithms?
[21:32:23] <nij-> If so, how to clojurians deal with it?
[21:33:18] *** Joins: matty_matt (~matt@129.222.239.110)
[21:35:01] *** Quits: matty_ma2 (~matt@2600:381:4912:f85c:d1d5:960d:3bc9:260e) (Ping timeout: 240 seconds)
[21:36:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[21:36:56] *** Joins: mbuf (~Shakthi@182.77.103.82)
[21:38:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[21:39:10] *** Joins: matty_ma1 (~matt@129.222.239.110)
[21:46:31] <technomancy> it's true but in my experience it has never once mattered
[21:46:55] <technomancy> 95% of the performance issues I've encountered using Clojure have been caused by the DB
[21:47:13] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:55] <technomancy> in the rare event you encounter a problem like that, rewrite just the bottleneck code using arrays or whatever. maybe, if it matters, which it probably won't.
[21:49:06] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[21:49:06] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:53:51] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:54:29] *** Joins: matty_ma1 (~matt@129.222.239.110)
[22:00:58] <nij-> How about the (useless) problems in LeetCode? For those types of questions, do FP programmers have to think of other ways in order to achieve the same efficiency?
[22:01:11] *** Quits: puchka (~marius@165.73.240.116) (Quit: leaving)
[22:01:34] <technomancy> like ... making things faster just for fun you mean?
[22:01:42] <Para> You seem to be very fixated on performance :)
[22:02:05] <technomancy> if I'm going to optimize just for kicks I'd rather play a Zachtronics game
[22:02:08] <technomancy> they have better soundtracks
[22:02:20] <Para> My second job is Factorio.
[22:02:53] <technomancy> https://zachtronics.bandcamp.com/track/exapunks
[22:07:16] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[22:12:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[22:13:55] *** Joins: matty_ma1 (~matt@129.222.239.110)
[22:14:02] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:18:51] *** Joins: matty_matt (~matt@129.222.239.110)
[22:23:01] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[22:34:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:34:34] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: Textual IRC Client: www.textualapp.com)
[22:36:29] *** Joins: matty_ma1 (~matt@129.222.239.110)
[22:39:22] *** Joins: matty_matt (~matt@129.222.239.110)
[22:42:57] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[22:45:25] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[22:45:46] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:46:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Remote host closed the connection)
[22:46:47] *** Joins: matty_ma1 (~matt@129.222.239.110)
[22:53:35] *** Joins: matty_matt (~matt@129.222.239.110)
[22:58:05] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:58:14] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:59:14] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:00:05] <sobel> i sorta like Poly Bridge 2 but i spend way more time in MAME
[23:01:05] *** Joins: struchu (~struchu@staticline-31-183-169-189.toya.net.pl)
[23:03:18] *** Joins: seabass (~seabass@user/seabass)
[23:06:46] *** Joins: matty_matt (~matt@129.222.239.110)
[23:17:55] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:18:24] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:25:26] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:26:57] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[23:27:18] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:28:47] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[23:32:38] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:41:09] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:52:38] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
