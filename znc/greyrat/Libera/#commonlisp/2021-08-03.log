[00:01:12] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Quit: Ping timeout (120 seconds))
[00:02:02] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[00:03:49] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 250 seconds)
[00:03:51] <Bike> i managed to write a macro transformer for delimited continuations to see what would happen. don't think it looks entirely like CPS transformation
[00:04:19] <shka> Bike: how?
[00:04:21] <Bike> (defun yield (x) (with/dc (shift k (cons x (k))))) (with/dc (reset (yield 1) (yield 2) nil)) => (1 2)
[00:04:50] <Bike> how did i write the transformer?
[00:05:09] <shka> yeah
[00:05:11] *** Joins: random-nick (~random-ni@87.116.182.181)
[00:05:24] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 252 seconds)
[00:05:46] <shka> you had to use code walker, right?
[00:05:55] <Bike> more or less
[00:06:48] <shka> maybe you want to share your code?
[00:06:52] <Bike> it's mostly like CPS i guess actually
[00:06:53] <Bike> yeah, why not
[00:07:45] <Bike> https://gist.github.com/Bike/6b06222bfca8c5e096f101133e419251
[00:07:57] <Bike> the code it produces is impressively garbage, optimization wise
[00:09:07] <shka> this may be true, but i wonder how to even approach such problem
[00:09:36] <shka> and this code at least looks like something which can be easy to understand
[00:09:38] <shka> so thanks!
[00:09:52] <Bike> i think it's reasonably easy to understand, but the code it produces is not
[00:10:02] <Bike> i can explain anything in the generator, probably
[00:10:03] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[00:10:17] <Bike> basically it does CPS except saves the continuation in a dynamic variable instead of adding a parameter like the usual formulation
[00:10:23] <shka> this is very nice of you, but i need to sleep
[00:10:36] <Bike> good night
[00:10:46] <shka> i will take a look tomorrow
[00:18:12] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[00:19:32] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 272 seconds)
[00:21:17] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[00:24:36] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 272 seconds)
[00:26:16] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[00:37:44] *** Joins: rgherdt (~rgherdt@ip5f5af456.dynamic.kabel-deutschland.de)
[00:45:43] *** Joins: z3t0 (~z3t0@107-159-7-18.on.dsl.ebox.net)
[00:45:55] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Remote host closed the connection)
[00:46:14] *** Quits: psycomic (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Remote host closed the connection)
[00:46:42] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[00:47:57] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Remote host closed the connection)
[00:48:10] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[00:50:48] *** Joins: tfeb (~tfb@88.98.95.237)
[00:57:58] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[00:59:32] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:01:13] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[01:07:37] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:17:07] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Remote host closed the connection)
[01:17:23] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[01:18:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:19:17] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[01:19:56] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 258 seconds)
[01:24:08] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Ping timeout: 272 seconds)
[01:26:23] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:26:35] *** Joins: tfeb (~tfb@88.98.95.237)
[01:35:56] <lad> Anyone here use emacs/org-mode/babel for common lisp snippets? I seem to have to call "(in-package :my-package)" at the top of every code snippet. Seems each snippet defaults to COMMON-LISP-USER NS. I asked in #org-mode, but didn't get much
[01:48:54] *** Quits: pve (~pve@37-136-181-173.rev.dnainternet.fi) (Quit: leaving)
[01:52:31] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[01:53:07] *** Joins: Oddity (Oddity@user/oddity)
[01:56:30] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[01:57:36] <pjb> lad: it doesn't work if you put a snippet with in-package?
[01:58:09] <pjb> lad: Do you use it with slime or with something else (perhaps bare inferior-lisp?  ilisp?)?
[01:58:31] <lad> pjb, hi. I'm using it with slime
[01:59:22] <pjb> lad: you could force the value of slime-buffer-package as a file-local variable.
[01:59:36] <lad> pjb, my very first snippet has (in-package :my-package), but that package isn't auto used in subsequent snippets
[01:59:43] <pjb> # -*- mode:org;coding:utf-8:slime-buffer-package:"MY-PACKAGE" -*-
[02:00:16] <pjb> lad: i would expect indeed for it not to be used.  slime tries to scan the file for in-package forms, but since your file is an org-mode file, not a lisp-mode file, it may break.
[02:00:40] <pjb> Try to edit the mode-line as indicated (use M-x normal-mode RET to reset it).
[02:02:41] <lad> pjb, forcing that does work actually. Everytime I write the file I am prompted if I really want to write because "invalid coding system".
[02:03:36] <pjb> sorry s/8:/8;/
[02:04:45] <lad> pjb, thx that helps a lot.
[02:07:00] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Ping timeout: 256 seconds)
[02:13:31] <lad> pjb, actually, i spoke to soon. I don't think it's working actually
[02:22:10] <lad> Looks like I can add :package my-package to each snippet.
[02:35:19] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[02:36:09] *** Quits: gaqwas (~john@dynamic-077-007-123-010.77.7.pool.telefonica.de) (Ping timeout: 265 seconds)
[02:38:08] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Read error: Connection reset by peer)
[02:52:10] *** Quits: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:52:33] <waleee> if you wanted to redirect output generated by log4cl to a file in the standard *nix-way, aka APP > log.txt and similar, how do you config log4cl?
[02:57:24] <lotuseater> I would say in your implementations rc file. or in emacs
[02:58:47] <waleee> lotuseater: well, yeah, but it still spits out loads of info-level stuff. This if for nyxt if it helps
[02:59:46] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[03:00:53] <waleee> A tip on how to either configure it to enable redirections, or how to configure it via (log:config ...) to not produce the logs to a file without clogging stdout with info would be great
[03:02:28] <waleee> aha, :daily did work with :sane et al, I got the impression that it didn't when I tried some stuff
[03:06:27] *** Joins: pillton (~user@61.68.66.196)
[03:07:50] <lotuseater> waleee: it helps for me :)
[03:08:17] <lotuseater> I realized just yesterday to also use and learn more log4cl and such
[03:08:19] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[03:08:54] <lotuseater> are you working on or using nyxt?
[03:09:25] <waleee> I'm guessing you could work around the initial "loading auto-config.lisp & init.lisp" too if you compile the image with log4cl
[03:09:31] <waleee> lotuseater: just using
[03:10:31] <lotuseater> it's so annoying, seeing the terminal output from Firefox even small time after starting. lots of (always the same) JS exceptions and errors
[03:11:00] <lotuseater> they should use more Elm for runtime safety by types :D
[03:11:39] *** Joins: cjb (~cjb@user/cjb)
[03:12:31] <lotuseater> waleee: ah when I remember correctly nyxt starts by default without the normal rc file
[03:12:59] <waleee> ah, you meant eg sbclrc?
[03:13:05] <lotuseater> yes
[03:13:16] <waleee> ... I forgot to try it
[03:13:30] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Ping timeout: 240 seconds)
[03:13:40] <lotuseater> hm I wonder on which implementations it also runs ..
[03:15:09] *** Joins: Kabouik (~Kabouik@user/kabouik)
[03:18:21] <lotuseater> oh damn so much dependencies (I mean all)
[03:21:03] *** Quits: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:21:29] <lotuseater> I just get nyxt 2.0.0 with nix-shell
[03:21:30] *** Joins: frgo (~frgo@p200300deef181d00e0da849b86d281c4.dip0.t-ipconnect.de)
[03:21:36] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Quit: Leaving)
[03:21:39] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[03:28:39] *** Quits: z147 (~z147@gateway/tor-sasl/z147) (Ping timeout: 244 seconds)
[03:34:56] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:35:01] <waleee> lotuseater: jmercouris has a pr on nixpkgs to update it, there's an overlay on an issue at the nyxt repo
[03:35:17] <lotuseater> ah it's ok
[03:35:33] <waleee> ttps://github.com/atlas-engineer/nyxt/issues/984#issuecomment-890599791
[03:35:38] <waleee> *https://github.com/atlas-engineer/nyxt/issues/984#issuecomment-890599791
[03:35:38] <lotuseater> thx
[03:35:59] *** Quits: pillton (~user@61.68.66.196) (Quit: ERC (IRC client for Emacs 27.2))
[03:36:08] <lotuseater> haha the commentor name "DieracDelta" :D
[03:36:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[03:36:20] *** Joins: tankrim (~user@c-7928e655.023-110-6f72654.bbcust.telenor.se)
[03:36:29] <lotuseater> "No, I'm not a function, be careful or you get distributed!"
[03:38:05] *** Joins: dsk (~dsk@user/dsk)
[03:40:31] <lotuseater> there's a famous quote by a math prof: "With (mathematical) functions you can do all that is explicitely allowed, with distributions you can do anything that's not explicitely forbidden."
[03:42:42] *** Quits: rgherdt (~rgherdt@ip5f5af456.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:54:02] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:54:07] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[03:56:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[03:56:59] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:59:55] *** Joins: lottaquestions (~nick@172.103.188.122)
[04:00:54] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[04:14:06] *** Joins: igemnace (~ian@user/igemnace)
[04:20:38] *** Joins: Guest90 (~Guest90@2a02:8109:b6bf:4e14:45bf:9423:d8e7:e413)
[04:25:45] *** Quits: Guest90 (~Guest90@2a02:8109:b6bf:4e14:45bf:9423:d8e7:e413) (Quit: Client closed)
[04:27:42] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:36:51] *** Quits: lottaquestions (~nick@172.103.188.122) (Quit: Konversation terminated!)
[04:37:14] *** Joins: lottaquestions (~nick@172.103.188.122)
[04:38:16] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[04:39:02] *** Joins: orenishii (~orenishii@S01066c55e885c6e1.cg.shawcable.net)
[04:40:48] *** Quits: orenishii (~orenishii@S01066c55e885c6e1.cg.shawcable.net) (Client Quit)
[04:41:40] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 272 seconds)
[04:44:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:02:10] *** Joins: orenishii (~orenishii@S01066c55e885c6e1.cg.shawcable.net)
[05:02:18] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Read error: Connection reset by peer)
[05:02:18] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Write error: Connection reset by peer)
[05:02:21] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Read error: Connection reset by peer)
[05:02:22] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Write error: Connection reset by peer)
[05:02:22] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Read error: Connection reset by peer)
[05:02:22] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Read error: Connection reset by peer)
[05:02:23] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Read error: Connection reset by peer)
[05:02:23] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[05:02:23] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Write error: Connection reset by peer)
[05:02:23] *** Quits: hayley (~theemacss@user/hayley) (Write error: Connection reset by peer)
[05:02:23] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[05:02:23] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Read error: Connection reset by peer)
[05:03:34] *** Quits: lottaquestions (~nick@172.103.188.122) (Quit: Konversation terminated!)
[05:03:35] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[05:05:21] *** Quits: orenishii (~orenishii@S01066c55e885c6e1.cg.shawcable.net) (Client Quit)
[05:07:49] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:11:18] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[05:11:18] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[05:11:18] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[05:11:18] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[05:11:18] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[05:11:18] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[05:11:18] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[05:11:18] *** Joins: hayley (~theemacss@user/hayley)
[05:11:30] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[05:11:31] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[05:11:31] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[05:13:35] *** Joins: dsk (~dsk@user/dsk)
[06:13:10] *** Quits: fbiaaa (~fbiaaa@89-73-224-15.dynamic.chello.pl) (Ping timeout: 265 seconds)
[06:15:35] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 265 seconds)
[06:21:04] *** Joins: raeda (~raeda@72.49.219.33)
[07:03:02] *** Joins: prxq (~quassel@x4db98f32.dyn.telefonica.de)
[07:06:46] *** Quits: prxq_ (~quassel@x4db4d3c2.dyn.telefonica.de) (Ping timeout: 256 seconds)
[07:08:14] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 252 seconds)
[07:17:14] *** Joins: ldb (~user@user/ldb)
[07:17:18] <ldb> good morning
[07:32:30] <beach> Good morning everyone!
[07:39:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[08:00:07] *** Quits: ldb (~user@user/ldb) (Ping timeout: 245 seconds)
[08:05:34] *** Joins: ldb (~user@user/ldb)
[08:10:14] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[08:13:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[08:15:39] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[08:15:57] *** Joins: ldb (~user@user/ldb)
[08:21:06] *** Quits: ldb (~user@user/ldb) (Ping timeout: 276 seconds)
[08:25:51] *** Joins: ldb (~user@user/ldb)
[08:28:33] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[08:28:51] *** Joins: ldb (~user@user/ldb)
[08:32:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:48:47] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: leaving)
[09:00:24] *** Quits: nirnam (~nirnam@1.46.144.168) (Ping timeout: 265 seconds)
[09:02:07] *** Joins: nirnam (~nirnam@1.47.135.162)
[09:06:34] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[09:19:15] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Ping timeout: 252 seconds)
[09:33:27] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Read error: Connection reset by peer)
[09:34:14] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:36:25] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[09:36:28] *** Quits: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:36:28] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:36:28] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[09:36:29] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[09:36:29] *** Quits: ullbeking (sid5364@2001:67c:2f08:3::14f4) (*.net *.split)
[09:36:29] *** Quits: jsatk (sid304796@2001:67c:2f08:5::4:a69c) (*.net *.split)
[09:36:29] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[09:36:29] *** Quits: hirez (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[09:36:35] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[09:36:40] *** Joins: mmk2410 (~mmk2410@mmk2410.org)
[09:36:51] *** Quits: mmk2410 (~mmk2410@mmk2410.org) (Changing host)
[09:36:51] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[09:37:13] *** Joins: ullbeking (sid5364@id-5364.charlton.irccloud.com)
[09:37:14] *** Joins: danieli (~danieli@user/danieli)
[09:37:31] *** Joins: specbot (~specbot@common-lisp.net)
[09:37:31] *** Joins: minion (~minion@common-lisp.net)
[09:38:14] *** Joins: hirez (~hirez@104.128.237.40)
[09:38:33] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:47:31] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[09:50:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[10:01:34] *** Joins: shka (~herr@109.231.62.239)
[10:04:21] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 252 seconds)
[10:05:45] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[10:09:48] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[10:09:48] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 272 seconds)
[10:12:01] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[10:15:01] *** Joins: ldb (~user@user/ldb)
[10:19:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 245 seconds)
[10:25:26] *** Joins: ldb (~user@user/ldb)
[10:28:21] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[10:30:05] *** Quits: ldb (~user@user/ldb) (Ping timeout: 258 seconds)
[10:32:07] *** Joins: lisp123__ (~lisp123@5.30.23.247)
[10:35:18] *** Joins: ldb (~user@user/ldb)
[10:35:50] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Ping timeout: 258 seconds)
[10:39:33] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[10:42:18] *** Joins: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de)
[10:42:41] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[10:45:35] *** Joins: ldb (~user@user/ldb)
[10:49:55] *** Quits: ldb (~user@user/ldb) (Ping timeout: 250 seconds)
[10:52:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:55:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:55:19] *** Lord_of_Life_ is now known as Lord_of_Life
[10:55:52] *** Joins: ldb (~user@user/ldb)
[10:57:14] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[10:58:17] *** Joins: gaqwas (~john@dynamic-095-117-123-054.95.117.pool.telefonica.de)
[10:59:59] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[11:00:41] *** Quits: ldb (~user@user/ldb) (Ping timeout: 268 seconds)
[11:01:30] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[11:02:17] *** Joins: amb007 (~a_bakic@249.106.204.77.rev.sfr.net)
[11:08:04] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[11:17:11] *** Quits: lad (~lad@user/lad) (Ping timeout: 265 seconds)
[11:18:02] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 245 seconds)
[11:24:50] *** Joins: dsk (~dsk@user/dsk)
[11:36:22] *** Quits: gaqwas (~john@dynamic-095-117-123-054.95.117.pool.telefonica.de) (Ping timeout: 245 seconds)
[11:51:46] *** Quits: amb007 (~a_bakic@249.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:52:28] *** Joins: amb007 (~a_bakic@249.106.204.77.rev.sfr.net)
[11:52:28] *** Quits: amb007 (~a_bakic@249.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:52:49] *** Joins: amb007 (~a_bakic@249.106.204.77.rev.sfr.net)
[11:52:49] *** Quits: amb007 (~a_bakic@249.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:53:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:57:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 258 seconds)
[12:04:46] *** Joins: pve (~pve@37-136-230-187.rev.dnainternet.fi)
[12:08:39] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[12:22:51] *** Joins: selwyn (~selwyn@user/selwyn)
[12:24:31] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[12:35:54] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:28] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:42:55] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:44:33] *** Joins: karlosz (~karlosz@router.cloyne.org)
[12:47:42] *** Quits: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[12:48:05] *** Joins: silasfox (~sbv@xdsl-87-79-98-159.nc.de)
[12:54:31] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[12:54:43] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[13:03:23] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:04:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:14:59] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[13:15:22] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Client Quit)
[13:19:22] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[13:19:50] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[13:20:40] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[13:21:14] *** Joins: psycomic (~psycomic@2a01cb0588c5e400f0296a20b651e8f5.ipv6.abo.wanadoo.fr)
[13:36:47] <shka> https://mov.im/?blog/phoe%40movim.eu/ee18159d-a6ed-4487-a3cc-56eb800c536e
[13:37:11] <shka> phoe: what are your role in this publishing process?
[13:37:45] <beach> shka: "author"
[13:37:51] <Gnuxie> Author? Lol
[13:38:04] <shka> huh, i thought that this was book by edi
[13:38:25] <beach> The first edition was, yes.
[13:38:27] <shka> phoe wants to write additions?
[13:38:31] <shka> that's really cool
[13:38:42] <Gnuxie> (Bleh message was sent before beach bit bridge was slow sorry )
[13:38:43] <beach> Apress wants phoe to write the second edition.
[13:38:49] <shka> i have paperback of the first addition
[13:39:05] <beach> "edition", not "addition". :)
[13:43:12] <shka> beach: i mean, edition to make additions :D
[13:43:34] <shka> oh, now i see
[13:43:39] <shka> silly me
[13:43:53] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[13:44:00] <beach> wydanie?  (says Google translate).
[13:44:25] <lotuseater> ah right CLR was also selled by Apress like "Programming Algorithm" by vsevolod
[13:44:28] <moon-child> an edition to edit!
[13:44:30] <shka> beach: yeah, yeah
[13:45:06] <shka> just something went haywire in my brain for a second
[13:45:10] <shka> that's all
[13:45:14] <shka> i am back to normal
[13:45:24] <beach> shka: Welcome to the club.
[13:45:37] <shka> the "normal" club? :D
[13:45:47] <beach> Possibly, yes.
[13:46:09] <shka> i must check what was in that book
[13:48:49] <shka> phoe: I think that the first edition of the Recipes book did not mention lparallel at all, and thats a shame because (at least for me) this is one of the most frequently used lisp libraries
[13:49:01] <shka> and has been for years at this point
[13:50:22] <shka> IMHO it would be valuable addition to the book
[13:52:07] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 268 seconds)
[13:52:45] <shka> especially since "use lparallel" seems to be an efficient solution to questions asked on #commonlisp
[13:53:00] <shka> so it is not just me
[13:54:13] <shka> phoe: i will let you know when i will come up with something else
[14:00:20] *** Joins: rgherdt (~rgherdt@ip5f5af456.dynamic.kabel-deutschland.de)
[14:09:44] <lotuseater> shka: but it does
[14:10:01] <shka> lotuseater: oh, so i've missed it?
[14:10:06] *** Joins: z147 (~z147@gateway/tor-sasl/z147)
[14:12:08] <shka> sorry about that, i was checking "concurrency" chapter
[14:17:59] <lotuseater> it in 11-5. "Parallelizing Algorithms without Threads and Locks"
[14:18:44] <lotuseater> and now there's even this Software Transactional Memory Library STMX to achieve that: https://stmx.org/
[14:19:21] <hayley> But there are threads and locks in lparallel (or perhaps atomics). Though they aren't exposed to the lparallel user I guess.
[14:19:56] <lotuseater> yes that would make sense
[14:20:21] <lotuseater> as I see it lparallel builds on bordeaux-threads (and what does that build on?)
[14:21:03] <hayley> ...or maybe they are. (defun contains-one-p (sequence) (lparallel:pmap 'nil (lambda (x) (when (= x 1) (return-from contains-one-p t))) sequence) nil) would not work obviously.
[14:21:24] <lotuseater> hmmm
[14:21:45] <hayley> bordeaux-threads just uses the threading facility your Lisp implementation provides.
[14:21:57] <lotuseater> okay makes also sense
[14:22:22] <lotuseater> so eg SB-THREAD
[14:23:00] <shka> oh
[14:23:12] <shka> lotuseater: yeah, how silly of me
[14:23:25] <lotuseater> ah don't say that :)
[14:24:35] <lotuseater> or there are libs like GREEN-THREADS
[14:25:25] <hayley> I like transactional memory, though it is somewhat slow in software, and no one can implement it in hardware apparently. There's also the livelock thing, but you can "fix" that by grabbing a global lock eventually.
[14:25:32] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 245 seconds)
[14:26:56] <shka> hayley: SMX needs hardware support
[14:27:05] <lotuseater> hayley: it's more about safety and correctness :)
[14:27:16] <shka> but oddly enough there was only a small window when i had suitable CPU
[14:27:27] <shka> because haswell microcode took it away from me
[14:27:32] <hayley> shka: I thought STMX had a fallback software version too. At least that is what I got after (ql:quickload :stmx) or so.
[14:27:37] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[14:27:38] <shka> and then i moved to AMD
[14:27:48] <shka> oh, ok
[14:28:35] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[14:29:03] <hayley> lotuseater: I don't know if livelock is an improvement over deadlock, to be fair. But you could use it to "speculate" over coarse-grained locking too.
[14:30:04] <hayley> See https://software.intel.com/content/www/us/en/develop/documentation/tbb-documentation/top/intel-threading-building-blocks-developer-reference/synchronization/mutexes/speculative-locking-transactional-lock-elision.html for example.
[14:30:05] <hayley> What a URL!
[14:30:20] <lotuseater> hmm okay I have to learn more about it. I came first in touch from where it origins, Haskell
[14:31:47] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[14:32:43] <hayley> The trick to that is that, say, if you never write any variables, all the "transactions" can appear in any order. So you can just use transactional memory rather than a proper lock.
[14:34:04] <lotuseater> yes being functional makes it a lot easier to reason about
[14:34:08] <hayley> That notion also extends to transactions which write places (rather than variables - my bad) which no other transactions read. And the hardware implementation of it is something like one bit per cache line.
[14:34:47] <lotuseater> ah
[14:35:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[14:35:23] <hayley> Or you can really skimp out if you're okay with one write per transaction as per https://dl.acm.org/doi/10.1145/1353522.1353529
[14:35:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[14:35:55] <hayley> ...skimp out and just use one bit per core if you're okay...
[14:40:43] <lotuseater> a wild paywall appears :D
[14:43:00] <lotuseater> https://booksc.org/book/44855211/006a75
[14:43:24] <shka> lotuseater: ~~~do what you want because a pirate is free~~~
[14:44:18] <lotuseater> such knowledge should be free
[14:44:34] <hayley> Herlihy and Moss's paper on the first transactional memory system(?) also boasts performance, for reference: http://cs.brown.edu/~mph/HerlihyM93/herlihy93transactional.pdf
[14:44:36] <shka> agreed
[14:45:36] <hayley> Huh, same Moss that wrote the GC Handbook I have on my desk.
[14:46:55] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 258 seconds)
[14:47:28] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Quit: ERC (IRC client for Emacs 27.2))
[14:48:47] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[14:48:48] <lotuseater> "The Art of Automatic Memory Management"?
[14:49:18] <hayley> Yes.
[14:50:02] <lotuseater> can you recommend it when someone knows nothing about it?
[14:50:32] <hayley> Do you find yourself wanting to know about the implementation of garbage collectors?
[14:50:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[14:50:42] <lotuseater> a bit wouldn't hurt
[14:50:54] *** Joins: amb007 (~a_bakic@201.106.204.77.rev.sfr.net)
[14:50:55] <lotuseater> at least how SBCL does it
[14:51:25] <hayley> I think it might be a few hundred pages too long for "a bit", but it came from a summary paper somewhere...
[14:51:43] <lotuseater> haha yes
[14:52:35] <hayley> Here is a summary, though it only covers single-processor GCs: https://www.cs.cmu.edu/~fp/courses/15411-f08/misc/wilson94-gc.pdf
[14:53:04] <hayley> Though (un)fortunately SBCL does not use a parallel or concurrent GC, so you wouldn't miss much.
[14:53:10] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:53:15] <lotuseater> I also don't have a clue but could be useful someday how GHC does it.
[14:53:24] <lotuseater> okay I see
[14:54:36] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:55:44] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[14:56:08] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[15:00:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:07:06] *** Joins: icer (~eric@107-218-253-217.lightspeed.tukrga.sbcglobal.net)
[15:12:10] *** Quits: amb007 (~a_bakic@201.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:12:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:20:03] *** Quits: frgo (~frgo@p200300deef181d00e0da849b86d281c4.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:20:31] *** Joins: frgo (~frgo@p200300deef181d00e0da849b86d281c4.dip0.t-ipconnect.de)
[15:23:31] *** Quits: icer (~eric@107-218-253-217.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 2.9)
[15:23:58] *** Joins: OlCe` (~user@amontpellier-658-1-232-244.w109-210.abo.wanadoo.fr)
[15:26:09] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[15:40:46] <lotuseater> Hey I defined a struct and for that an :AFTER method with INITIALIZE-INSTANCE. It doesn't seem to be triggered.
[15:41:11] <lotuseater> Seems like another difference when working with structs.
[15:41:23] <hayley> Right, structure classes don't use the instance creation protocol.
[15:41:39] <lotuseater> okay :) wasn't aware of that before
[15:48:52] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 245 seconds)
[15:49:29] <shka> don't use structs unless you really have to
[15:49:58] <lotuseater> yes for prototyping classes are more flexible
[15:50:17] <shka> oh, not only for that
[15:51:04] <shka> multiple inheritance, mixins
[15:51:36] <lotuseater> this with the mixins, I want to hear more about
[15:52:39] <shka> well, you can inherit class that has no slots, just so you will have a different method dispatch
[15:52:51] <shka> and since :before and :after exists...
[15:52:58] <shka> it is very useful
[15:53:12] <shka> heck, you can even employ multiple dispatch
[15:53:25] <lotuseater> yes alone those two are great for modularizing methos and the primary method stays clean
[15:53:52] <shka> (defgeneric example* (mode object)) (defun example (a) (example* a a))
[15:54:41] <shka> and then you can (defclass example-mode ())
[15:54:53] <shka> (defclass example-object (example-mode other-object))
[15:55:33] <shka> anyway, CLOS is very flexible
[15:55:39] <shka> perhaps to its fault even
[15:55:56] <lotuseater> the most powerful meta OO system in the galaxy :)
[15:55:57] <pjb> lotuseater: you can use a defstruct macro that expands to defclass and associated generic functions and methods.
[15:56:07] <lotuseater> but could also be too powerful or heavy
[15:56:07] <pjb> lotuseater: a "define-entity".
[15:56:21] <lotuseater> pjb: great idea
[15:56:22] <shka> just don't use defstruct
[15:56:33] <shka> unless profiler says otherwise
[15:56:44] <shka> saves a headache
[15:57:11] <shka> trust me, i am a very lazy person, i KNOW how to avoid extra work :P
[15:57:27] <lotuseater> top advice. I'm lazy too :D
[15:59:30] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:00:55] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[16:01:07] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[16:09:11] *** Joins: makomo (~makomo@user/makomo)
[16:14:06] <pjb> lotuseater: see com.informatimago.common-lisp.cesarum.utility:define-structure-class
[16:14:50] <pjb> https://github.com/informatimago/lisp/blob/6e4ef5480c7c03613eda423fb9d265d7ef466954/common-lisp/cesarum/utility.lisp#L895
[16:16:10] <pjb> lotuseater: also, have a look at https://github.com/informatimago/lisp/blob/master/clext/association.lisp
[16:18:10] <pjb> lotuseater: example of usage: https://gitlab.com/abnotation/abnotation/-/blob/master/src/core/model.lisp
[16:20:22] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[16:27:54] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 272 seconds)
[16:34:23] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[16:36:55] *** Joins: Bike (~Glossina@71.69.170.70)
[16:36:56] *** ChanServ sets mode: +o Bike
[16:46:37] *** Joins: bxtn (~bxtn@2600:1700:38a0:3d40::49)
[16:50:02] *** Joins: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[16:52:42] *** Quits: psycomic (~psycomic@2a01cb0588c5e400f0296a20b651e8f5.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:55:53] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 268 seconds)
[16:58:02] *** Joins: tux0r (~tux0r@rosaelefanten.org)
[17:08:21] <phoe> shka: can you send a mail to phoe@disroot.org with those remarks? I'll lose them on IRC and I am in dayjob now
[17:11:50] <shka> phoe: yeah, sure, but scratch lparallel, it is already covered
[17:12:30] *** Quits: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Remote host closed the connection)
[17:12:55] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e400f0296a20b651e8f5.ipv6.abo.wanadoo.fr)
[17:15:46] <phoe> shka: OK - still, please include it
[17:15:57] <phoe> I'll see if there is anyting that needs to be added wrt lparallel
[17:16:21] <shka> well, lparallel:chain is not covered
[17:16:31] <shka> i will try to review this chapter and add my remarks
[17:16:36] <phoe> thanks
[17:22:51] *** Joins: raeda (~raeda@72.49.219.33)
[17:30:24] *** Quits: Melantha (~pyon@user/pyon) (Ping timeout: 252 seconds)
[17:30:40] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[17:31:00] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:32:12] *** Joins: Melantha (~pyon@user/pyon)
[17:33:55] *** Joins: h3ck3r9696 (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[17:34:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Client Quit)
[17:35:54] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e400f0296a20b651e8f5.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[17:36:03] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:44:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[17:45:03] *** Joins: raeda_ (~raeda@72.49.219.33)
[17:46:17] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:47:37] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 245 seconds)
[17:47:58] *** Joins: Josh_2 (~user@37.25.47.130)
[17:48:40] <Josh_2> Hello
[17:50:16] <hayley> Hello.
[17:57:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[18:00:24] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:02:46] <phoe> hey hi
[18:05:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:05:33] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[18:06:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:08:15] *** Joins: jetty (~user@cpc144000-mars4-2-0-cust582.11-1.cable.virginm.net)
[18:08:27] *** Parts: jetty (~user@cpc144000-mars4-2-0-cust582.11-1.cable.virginm.net) (ERC (IRC client for Emacs 27.2))
[18:10:00] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[18:10:07] *** Quits: bxtn (~bxtn@2600:1700:38a0:3d40::49) (Quit: bxtn)
[18:10:54] *** Joins: bxtn (~dave@2600:1700:38a0:3d40::49)
[18:16:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[18:17:28] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:25:45] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[18:36:06] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.2)
[18:38:05] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:38:28] *** Joins: amb007 (~a_bakic@249.106.204.77.rev.sfr.net)
[18:38:29] *** Quits: amb007 (~a_bakic@249.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[18:39:47] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:40:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:57:18] <pl> lotuseater: I'd recommend "The Garbage Collection Handbook" to any programmer serious about their craft
[18:57:37] <pl> (the book also known as "Art of Automatic Memory Management")
[18:58:00] *** Quits: h3ck3r9696 (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[18:58:03] <shka> eh
[18:58:14] <shka> pl: no free copies online?
[18:58:35] <pl> I think there were some, I'd have to check
[18:58:55] <pl> I had the comfort of reading the paper book, one of the benefits of uni that I miss these days
[18:59:28] <Bike> it's indeed a very interesting book
[18:59:48] <Bike> (i still have access to a university library. lucky me)
[19:00:12] <pl> It's kind of from zero to hero
[19:01:17] <shka> well, if you prize it so highly i will read given the chance
[19:01:45] <pl> shka: I'm not sure there's any comparable book on GC
[19:02:15] <pl> And from my pov, the next step after it is to actually read research and implementation papers
[19:03:14] <Josh_2> https://plaster.tymoon.eu/view/2581#2581 Why do I keep getting an error about not enough arguments to satisfy? I think its related to spinneret
[19:04:16] <Josh_2> I just added the macroexpansion to the paste
[19:09:58] <shka> pretty price book, but maybe i will get one
[19:10:37] <Josh_2> you can find online
[19:11:43] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[19:13:23] <Bike> Josh_2: i would guess that spinneret doesn't let you throw arbitrary forms in like that, but I don't know the system well enough to say with certainty
[19:13:42] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 276 seconds)
[19:14:27] <beach> pl: There is the survey paper by Wilson et al.
[19:15:25] <pl> Hmm, I don't remember if I have seen it or not, but will add to my to-read list
[19:16:14] <beach> https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.138.5038
[19:16:29] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:17:04] <beach> It's a bit old, but the basic techniques are still the same.
[19:24:02] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[19:25:03] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[19:27:29] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[19:28:37] <pl> A good use for that JSTOR access I recently found I have
[19:30:10] <pl> Turns out my university is old enough it doesn't believe in alumni having left it
[19:36:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[19:39:50] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[19:40:25] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:40:53] <Josh_2> Bike: alrighty, i'll just yeet the macros
[19:53:55] *** Joins: srhm (~ascii@user/srhm)
[19:59:49] *** Joins: lad (~lad@user/lad)
[20:15:28] *** Joins: brownjm (~brownjm@firewall.wlc.edu)
[20:17:22] *** Quits: brownjm (~brownjm@firewall.wlc.edu) (Client Quit)
[20:17:34] *** Joins: plds (~plds@firewall.wlc.edu)
[20:21:30] *** Quits: plds (~plds@firewall.wlc.edu) (Client Quit)
[20:24:44] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:28:46] *** Joins: peterhil (~peterhil@mobile-access-b04851-37.dhcp.inet.fi)
[20:35:16] *** Quits: bxtn (~dave@2600:1700:38a0:3d40::49) (Remote host closed the connection)
[20:37:06] *** Joins: selwyn (~selwyn@user/selwyn)
[20:38:05] <jcowan> pl: "Death will not release you -- even if you die."
[20:39:54] <jcowan> --standing rule 0 of the Los Angeles Science Fantasy Society, which prevents you from voting if your dues are unpaid, but otherwise only removes members by a vote of the membership and the board, separately
[20:44:42] *** Quits: peterhil (~peterhil@mobile-access-b04851-37.dhcp.inet.fi) (Ping timeout: 240 seconds)
[20:54:49] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[20:55:05] *** Joins: shka (~herr@109.231.62.239)
[21:14:30] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[21:18:17] *** Joins: lad (~lad@user/lad)
[21:22:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[21:22:48] *** Joins: amb007 (~a_bakic@233.106.204.77.rev.sfr.net)
[21:26:30] *** Joins: dsk (~dsk@user/dsk)
[21:35:22] <jmercouris> how can I check how many processor cores exist?
[21:35:27] <jmercouris> I seem to recall there was a library for this...
[21:36:58] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:37:14] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Remote host closed the connection)
[21:37:22] <pl> System dependant, but yeah, there was something for that
[21:37:31] <jmercouris> Yes, I just can't remember what it is called...
[21:38:35] <pl> jcowan: I found out about it when I noticed an invitation to vote in university administration... Turned out that t wasn't just alumni charity spam that I was getting
[21:39:41] <jmercouris> there we go serapeum:count-cpus
[21:40:04] *** Quits: lisp123__ (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:40:50] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[21:45:31] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[21:54:48] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Quit: Leaving)
[22:12:01] *** Quits: amb007 (~a_bakic@233.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:12:09] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:15:35] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[22:15:56] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Client Quit)
[22:21:49] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:28:50] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[22:30:34] <lisp-newbie> Hi, interesting question, I'm trying to execute multiple prints from a let, or let* after the variable definitions, and every time I do, the program just seems to go into an infinite loop. I tried doing (progn exp1 exp2) but still get's stuck
[22:30:37] <lisp-newbie> Any ideas?
[22:31:10] <Josh_2> What? You should be able to do (let ((a "a") (b "b")) (print a) (print b))
[22:31:20] <Josh_2> can you share the code?
[22:31:34] <lisp-newbie> Here's a paste bin https://pastebin.com/rev2scsA
[22:31:45] <lisp-newbie> Yeah, didn't work
[22:31:51] <lisp-newbie> Maybe because of another macro???
[22:31:57] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:32:18] <moon-child> lisp-newbie: you definitely should not need progn; let* and let have an implicit progn
[22:32:21] <lisp-newbie> How do I print a macro in the real?
[22:32:30] <Bike> you can do (macroexpand-1 '(macro form here))
[22:32:35] <lisp-newbie> thanks
[22:32:37] <Bike> e.g. (macroexpand-1 '(defroute ...))
[22:32:58] <Bike> i don't know the particulars of defroute here, but this code doesn't look like it should be looping
[22:33:10] <White_Flame> FORMAT NIL prints to a string and returns it.  FORMAT T should print to your visible output
[22:33:29] <Bike> i figured it was returning a string to send to the client or whatever
[22:33:35] <moon-child> ^
[22:33:40] <White_Flame> ok
[22:34:27] <Bike> it's not really "printing" so in the context of the question it is kind of confusing
[22:34:29] <lisp-newbie> Don't seem to find it
[22:34:34] <Bike> What?
[22:34:53] <lotuseater> moon-child: a few days ago i stumbled over old ported SHRDLU code from Maclisp to CL. it seems they liked using PROG very much. and COND for also where IF, WHEN or UNLESS would be more clear
[22:34:56] <lisp-newbie> Bike, yeah, just the client waits forever
[22:35:20] <lisp-newbie> (macroexpand-1 'caveman2:defroute) gives me NIL
[22:35:27] <sm2n> maybe you are supposed to flush the request or something?
[22:35:28] <lisp-newbie> Other things I tried give me errors
[22:35:31] <jasom> Is there an iso-8601 parser for lisp already written?  local-time can't handle things like "2021-W31-2T10:58:20"
[22:35:38] <Bike> lisp-newbie: okay, so i wrote (macroexpand-1 '(defroute ...))
[22:35:47] <White_Flame> also, if it goes into an infinite loop, your CPU should show 100% and your fans ramp up
[22:35:48] <Bike> lisp-newbie: what i meant was that you give macroexpand the entire form, and it returns the expansion
[22:35:54] <Bike> lisp-newbie: (macroexpand-1 'defroute) is nothing
[22:36:05] <lisp-newbie> Oh, thanks
[22:36:15] <lisp-newbie> Bike Got it, thought I could see the macro itself
[22:36:17] <lisp-newbie> One sec
[22:36:37] <sm2n> you can do that too, just do M-. on the name
[22:36:45] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:37:00] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[22:37:09] *** Joins: gaqwas (~john@dynamic-095-117-123-054.95.117.pool.telefonica.de)
[22:37:13] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[22:37:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:41:03] <lisp-newbie> Bike, can you please explain what to do inside the macro expand? I put a quote ' before the defroute and gave me errors
[22:41:22] <Bike> what did you use and what error did you get?
[22:41:24] <lisp-newbie> and before the let
[22:41:32] <lisp-newbie> illegal function call
[22:41:38] <White_Flame> copy/paste your entire '(defroute ...) form
[22:41:49] <White_Flame> into the macroexpand call
[22:42:09] <Josh_2> lisp-newbie: like this https://plaster.tymoon.eu/view/2582#2582
[22:42:33] <lisp-newbie> got it, thanks
[22:43:39] <jcowan> No WHEN or UNLESS in the Pitmanual (descendant of the Moonual).  IF was available, but I suspectt it was a late introduction.
[22:44:38] <lisp-newbie> nope, get's stuck Josh_2
[22:44:52] <Bike> lisp-newbie: "gets stuck"? do you get an error? is it the same error?
[22:44:54] <Josh_2> yeh I never claimed it would work, thats just how you use macroexpand
[22:44:55] <jcowan> And no TAGBODY or BLOCK either, so it was fairly common for function bodies to be PROGs.
[22:44:58] <Bike> jcowan: the real primitive being COND i guess?
[22:45:06] <lisp-newbie> oh haha
[22:45:07] <jcowan> yes, as in Elisp today
[22:45:11] <lisp-newbie> meaning it got stuck
[22:45:19] <Bike> please be descriptive
[22:45:23] <lisp-newbie> I thought I had to quote every single thing inside the macro expand
[22:45:26] <lisp-newbie> I have an idea one sec
[22:45:29] <Bike> no just
[22:45:33] <Bike> just literally put in what josh_2 pasted
[22:45:39] <Bike> copy that text and paste it into your lisp
[22:45:52] <Bike> do not make any alterations
[22:46:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[22:46:57] <lisp-newbie> still stuck in the macroexpand
[22:47:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:47:07] <Bike> what do you mean by
[22:47:08] <Bike> "stuck"
[22:47:23] <Bike> it halts? you get an error? lisp crashes?
[22:47:24] <lisp-newbie> one sec, will try again copy paste what Josh_2 wrote
[22:47:35] <lisp-newbie> oh, no, just the browser waits forever
[22:47:48] <Bike> the browser...? we're talking about doing this in your lisp repl
[22:48:55] <Josh_2> I think he means when a request is made to caveman
[22:49:25] <lisp-newbie> ok, just did what Josh_2 said again, now the browser still waits for a request forever... here's what I did. maybe I'm mising something...
[22:49:29] <lisp-newbie> erureka!
[22:49:32] <lisp-newbie> in the repl it worked
[22:49:37] <lisp-newbie> sorry I was doing it in the controller
[22:49:40] <lisp-newbie> here one sec
[22:49:47] <Josh_2> bruh xD
[22:50:07] <lisp-newbie> https://pastebin.com/4UBt4VG2
[22:50:12] <lisp-newbie> sorry...
[22:50:15] <lisp-newbie> haha
[22:50:56] <lisp-newbie> I was doing this: https://pastebin.com/ksV9Mjdv I didn't understand it would work staright in the repl
[22:51:35] <lisp-newbie> Ok, I have no idea what the macroexpand is returning: https://pastebin.com/4UBt4VG2
[22:51:44] <Josh_2> Its returning the macroexpansion
[22:53:27] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[22:53:47] <Bike> well it doesn't seem like that's going to help
[22:54:00] <Bike> from glancing at the manual, i don't see any reason a route that just returns a string shouldn't work
[22:54:06] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[22:54:07] <Josh_2> Yep
[22:54:10] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:54:10] <Bike> you could try something really basic like (defroute "/test" () "hello i am a test")
[22:54:20] <Bike> or something literally from the manual
[22:54:28] <Bike> and if that doesn't work, you must have something misconfigured
[22:54:36] <Bike> like trying to acccess the wrong port or whatnot
[22:54:37] <lisp-newbie> It's just when I have two "forms" (if that's what two function calls is) doing something
[22:54:44] <lisp-newbie> Bike that works
[22:54:46] *** Joins: karlosz (~karlosz@router.cloyne.org)
[22:54:56] <lisp-newbie> the defroute works if I keep the expressions to one
[22:55:18] <lisp-newbie> but as soon as I want to do some function and also return something, it breaks
[22:55:19] <Bike> Okay, what about (defroute "/test" () (print "hello") "world")
[22:55:24] <lisp-newbie> I'll give another example, let me test it
[22:59:37] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:03:54] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:09:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:09:47] *** Joins: akoana (~ah@user/akoana)
[23:09:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:09:52] <lisp-newbie> Bike I need to track down whats happening, things that were working before are now broken, but other things seem to be working normally... I need some time... tried restarting the server
[23:09:52] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:09:52] <lisp-newbie> is there a way to force compile the whole project again?
[23:17:38] <White_Flame> best to restart the image to clear everything out
[23:18:01] <White_Flame> because recompiling won't necessarily change any runtime state you've accumulated
[23:18:30] <Josh_2> restart your image then ql your package again
[23:20:12] <lisp-newbie> ok, before it was working, now it's not... here's the code and the macro expands
[23:20:13] <lisp-newbie> https://pastebin.com/WzvS0uir
[23:20:32] <Josh_2> well I guess log4cl is doing something
[23:20:39] <lisp-newbie> White_Flame Josh_2 just did it thanks
[23:20:45] <lisp-newbie> well one sec
[23:24:29] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[23:30:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:30:29] *** Joins: pve_ (~pve@37-136-183-8.rev.dnainternet.fi)
[23:32:23] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:33:01] *** Quits: pve (~pve@37-136-230-187.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[23:39:15] <lisp-newbie> ok, weird. I closed the repl completely and restarted it again and waited a while for quicklisp to download all the dependencies, now things are working
[23:39:37] <lisp-newbie> Now I don't understand what happened. The compiling many times a few lines or a file broke things?
[23:40:19] <lisp-newbie> On a side question, is there a way for quicklisp to not have to download every dependency every single time but to download once and continue? like node_modules type caching?
[23:40:31] <Josh_2> it shouldn't be downloading every dependency everytime
[23:40:40] <Josh_2> it will load them but it shouldn't be downloading them
[23:40:41] <lisp-newbie> thanks a lot for the help and sorry for this. I learned new things like macroexpand! :D
[23:45:52] *** Joins: h3ck3r9696 (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[23:47:42] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:48:46] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: This computer has gone to sleep)
[23:49:03] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[23:49:15] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[23:49:24] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[23:49:44] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Remote host closed the connection)
[23:51:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:54:51] *** Joins: tfeb (~tfb@88.98.95.237)
