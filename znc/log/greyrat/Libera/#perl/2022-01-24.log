[00:05:19] *** Joins: humky_ (~humky@user/humky)
[00:05:56] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:07:25] *** Quits: v` (~v@user/ctrl) (Remote host closed the connection)
[00:08:14] *** Quits: humky (~humky@user/humky) (Ping timeout: 268 seconds)
[00:10:18] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:18:43] *** Joins: lispy (~lispy4@84.69.59.93)
[00:21:04] *** Quits: lispy (~lispy4@84.69.59.93) (Client Quit)
[00:21:57] *** Joins: lispy (~lispy4@84.69.59.93)
[00:27:15] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[00:27:54] *** Quits: XV8 (~XV8@2601:5cb:c001:50:812:6105:a298:6382) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:28:41] *** Joins: XV8 (~XV8@2601:5cb:c001:50:cdc5:f205:91c5:de06)
[00:34:06] *** Quits: haarg (haarg@haarg.org) (Ping timeout: 245 seconds)
[00:37:42] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[00:38:02] *** Quits: ferz (~ferz@93-39-143-61.ip76.fastwebnet.it) (Ping timeout: 240 seconds)
[00:38:49] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[00:39:37] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[00:40:50] *** Joins: humky__ (~humky@user/humky)
[00:40:51] *** Joins: ferz (~ferz@93-39-143-61.ip76.fastwebnet.it)
[00:41:37] * GumbyPAN CPAN Upload: DateTime-Format-Natural-1.13 by SCHUBIGER https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.13
[00:42:57] *** Quits: humky_ (~humky@user/humky) (Ping timeout: 240 seconds)
[00:46:18] *** Joins: humky_ (~humky@user/humky)
[00:48:57] *** Quits: humky__ (~humky@user/humky) (Ping timeout: 240 seconds)
[00:50:19] *** Joins: humky__ (~humky@user/humky)
[00:53:22] *** Quits: humky_ (~humky@user/humky) (Ping timeout: 250 seconds)
[00:53:23] *** Joins: proller (~p@2a02:6b8:b081:1213::1:16)
[00:54:17] *** Quits: humky__ (~humky@user/humky) (Remote host closed the connection)
[01:03:32] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01) (Ping timeout: 240 seconds)
[01:08:14] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[01:12:38] <simcop2387> aquanight: they don't have control of the size one i believe
[01:12:50] <simcop2387> or the len, essentially not both in the way they'd need
[01:16:50] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[01:24:23] *** Joins: v` (~v@user/ctrl)
[01:25:14] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[01:26:49] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Quit: Stay safe!)
[01:28:32] *** Quits: martinus__ (~martin@127.59.202.77.rev.sfr.net) (Ping timeout: 240 seconds)
[01:37:03] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:39:53] *** Joins: Corin-EU (~miller@88.207.140.249)
[01:40:51] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[01:42:16] *** Quits: XV8 (~XV8@2601:5cb:c001:50:cdc5:f205:91c5:de06) (Quit: Textual IRC Client: www.textualapp.com)
[01:43:02] *** Joins: haarg (haarg@haarg.org)
[01:44:42] *** Joins: monkey_ (~user@190.104.116.153)
[01:44:52] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:45:17] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[01:45:36] <Corin-EU> Is there a simple PERL regex substitution equivalen of sed -ne 's/^string_match\(.*')$/1/p' for multiline data so that output is just the \1 group and nothing else?  I have tried using the /m modifier in perl with ^ and % specified but the output is the substiution plus the other lines.   
[01:46:24] <LeoNerd> No, because -n always reads and prints a line at a time
[01:46:32] <LeoNerd> Any modifications can only work on the one line it is dealing with at the moment
[01:46:39] <mst> perl -nlE 'say $1 if /^string_match(.*)/;'
[01:46:49] <LeoNerd> If you want to make edits that are sensitive to multiple lines you'll have to work to different boundaries
[01:47:11] <Corin-EU> Okay thanks, I thought that might be the case.   So i need to extract the line with the string match first and then do the substitution.
[01:47:15] <mst> (that may be wrong because I misread but it may be illustratively wrong even so)
[01:47:28] <mst> Corin-EU: no, if the matching is line by line I just gave you the answer
[01:47:35] <mst> we just don't know for sure what you meant by multiline
[01:47:44] <LeoNerd> I believe -777 is the traditional solution to that
[01:48:05] <mst> indeed  but I want to find out if my first guess was right before overclevering
[01:48:36] <Corin-EU> HEre is a simple example I do   my $data = qx (pip show some_module);
[01:49:54] <Corin-EU> I am then trying to get just the value of version from the line  Version:  1.2.3
[01:50:35] <Corin-EU> I know I could use grep or whatever to pre-filter but I thought I might be able to do it in a a single regex substitution  as one can do with sed
[01:50:48] <mst> my ($version) = grep /^Version:\s*(.*)$/, qx(pip show ${module});
[01:51:07] <mst> ok, epic failure at error checking on my part but that should do the trick
[01:51:37] <Corin-EU> thanks mst  let me try that in my perl script 
[01:52:22] <mst> note the fact the original quesdtion was actually not a sed pipelkine like case would've been something helpful to tell us up front
[01:52:43] <mst> shell one liner 'sed -e' style perl and what you'd put in a script aren't necessarily the same thing
[01:53:13] <mst> (please note this is not my bitching, this is me filing a feature request against your question asking protocol implementation going forwards ... if you do it again, then maybe I'll bitch, but not yet ;)
[01:53:26] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:55:30] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[01:58:59] <Corin-EU> mst:  sorry for not being clearer.   In my shell script I do   data=$(some_command) ; some checks; then echo version = "echo -n $data | sed -ne 's|match\(.*)|\1|'"  and I am trying to do the same in a perl script.  (The perl script is not a translation of the shell script, just need to do a similar construct)
[01:59:27] <mst> Corin-EU: it's fine, and in that case I'm fairly sure my grep line should be the thing
[02:00:47] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[02:01:01] <mst> but I/we regularly use one liners as part of a shell pipeline so my first thought was that you were switching sed to perl within a bash script, hence the brief confusion
[02:04:08] <Corin-EU> No I keep my shell scripts sed and perl scripts  regex separate.  ;+)
[02:06:32] <mst> there is a sweet spot where something's slightly too complicated for me to remember how to do it in sed but not complicated enough for me to feel like rewriting the whole thing in perl
[02:07:05] <mst> though admittedly it's probably a larger sweet spot for me than many people because I'm fucking useless at sed
[02:14:39] <Corin-EU> mst:  your grep works but grep output an array so to get version, looks like you need  my @version = grep ... ;  print STDOUT "version  is -->" . $version[0] . "<--\n"
[02:14:57] <xenu> i don't understand why :const doesn't allow named subs, sub foo :const { ... } should be equivalent to BEGIN { *foo = sub :const { ... } }
[02:15:10] <mst> Corin-EU: lies
[02:15:22] <Corin-EU> Sorry?
[02:15:31] <mst> Corin-EU: 'my ($version) =' needs the parens, that treats the return of the grep as a list and captures the first element
[02:15:33] <aquanight> my ($version) = grep ...;
[02:15:56] <mst> Corin-EU: if you removed the () when trying the suggestion that's why it didn't work :)
[02:16:20] <aquanight> although, can I ask the question of why one can't do: my ($version) = qx"pip show $module" =~ /^Version:\s*(.*)$/m; ?
[02:17:50] <aquanight> (you still need () around $version)
[02:18:15] <aquanight> xenu: isn't :const intended for lexical subs to lock them to the current value of a captured lexical?
[02:18:18] <Corin-EU> mst: you are correct.   I had done my on the $version earlier so I had in ERROR omitted  the parentheses for captuyring the output from grep.   Putting them in works as you say
[02:19:13] <aquanight> sweval: sub test { my $x = 42; my sub foo :const { $x }; $x = 33; return \&foo; } my $c = test; [ &$c ]
[02:19:15] <perlbot> aquanight: ERROR: :const is not permitted on named subroutines at (IRC) line 1, at end of line Bareword "test" not allowed while "strict subs" in use at (IRC) line 1. 
[02:19:53] <xenu> aquanight: from the docs: > it forces the sub to be called when the sub expression is evaluated. The return value is captured and turned into a constant subroutine:
[02:19:58] <xenu> so it happens at compilation time
[02:20:04] <aquanight> sweval: sub test { my $x = 42; my $foo = sub :const { $x }; $x = 33; return $foo; } my $c = test; [ &$c ]
[02:20:05] <perlbot> aquanight: [42]
[02:20:24] <xenu> hmm
[02:20:32] <aquanight> ... interesting.
[02:20:40] <xenu> no wait, actually that excerpt doesn't imply what i said
[02:20:42] <aquanight> and ugly.
[02:20:46] <xenu> still
[02:21:04] <xenu> i want it to work the way i described
[02:21:18] <aquanight> which is?
[02:21:23] <xenu> 23:44 < xenu> i don't understand why :const doesn't allow named subs, sub foo :const { ... } should be equivalent to BEGIN { *foo = sub :const { ... } }
[02:21:29] <aquanight> oh
[02:21:32] <aquanight> wait
[02:21:35] <aquanight> wouldn't that just be
[02:21:39] <aquanight> use constant foo => ...;
[02:21:49] <xenu> pretty much, yes
[02:21:57] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[02:23:15] <aquanight> sweval: my $foo = sub :const { ('s','l','v')[wantarray//2] }; [ $foo ]
[02:23:15] <xenu> i don't like the fact that constant.pm exists and is 200 lines long, it should be a core language feature
[02:23:16] <perlbot> aquanight: [sub { "DUMMY" }]
[02:23:23] <aquanight> sweval: my $foo = sub :const { ('s','l','v')[wantarray//2] }; [ &$foo ]
[02:23:25] <perlbot> aquanight: ["s"]
[02:23:49] <aquanight> xenu: I mean... it kinda is.
[02:23:54] <aquanight> :prototype()
[02:24:36] <aquanight> the only catch is that constants defined via use constant count as imported
[02:24:45] <aquanight> sweval: use constant fork => 42; [ fork ]
[02:24:47] <perlbot> aquanight: Ambiguous call resolved as CORE::fork(), qualify as such or use & at (IRC) line 1. [2]
[02:24:55] <aquanight> ...wait really?
[02:25:13] <xenu> speaking of importing, one of the weirdest misfeatures of perl
[02:25:14] <aquanight> sweval: use subs 'fork'; use constant fork => 42; [ fork ]
[02:25:16] <perlbot> aquanight: Prototype mismatch: sub main::fork: none vs () at $BLEAD/lib/5.35.8/constant.pm line 171. [42]
[02:25:22] <mst> Corin-EU: no worries, glad it does work, "mst fucked up typing this into IRC from memory" was always a pretty good possibility too :D
[02:25:22] <xenu> is that #line directives affect caller()
[02:25:35] <xenu> which means caller() can lie
[02:25:43] <aquanight> xenu: .... uh. Isn't that kinda the entire point of #line ?
[02:26:03] <xenu> aquanight: depends
[02:26:13] <xenu> aquanight: you *sometimes* want that behaviour, but often you don't
[02:26:26] <xenu> ideally it should return both fake and real data
[02:26:43] <aquanight> except as I understand it the "real data" doesn't exist.
[02:26:58] <aquanight> it's just drawn from PL_curcop which I think gets overwritten by #lines
[02:27:00] <xenu> although tbh i'm not sure why would anyone want a lying stacktrace
[02:27:06] <xenu> which also reminds me that goto &SUB is stupid
[02:28:03] <mst> Corin-EU: my @foo = some_func(); my $bar = $foo[0]; my $baz = $foo[2];
[02:28:05] <Corin-EU> aquanight:  you are correct     ($version) = qx"pip show pip" =~ /^Version:\s*(.*)$/m;     does work and just output the version number.  I was trying something similar earlier and could not get that to work because it was showing all the other lines as well as just the substitution version line.
[02:28:07] <mst> Corin-EU: can also be written as
[02:28:10] <aquanight> you want to be able to "lie" to caller because when you, say, read a file that isn't literal perl but is filtered through a code generator, you can put #lines for the part tha thumans write
[02:28:13] <xenu> i mean lying stacktraces *kind of* make sense in automatically generated code but it's extremely rare
[02:28:16] <mst> Corin-EU: my ($bar, undef, $baz) = some_func();
[02:28:24] <mst> Corin-EU: to give you an idea of the general case I'm borrowing
[02:28:55] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[02:29:11] <mst> Corin-EU: my version with a grep I like because it does a line by line regexp so it's a more useful general case, for your specific case aquanight is not at all wrong but my fingers' habits are tuned to what I need in general
[02:30:10] <aquanight> I'm not sure what the general output of 'pip show thing' is like but a more generalized version would probably parse each line into a hash and let you pick what things you want.
[02:30:41] <aquanight> at that point maybe look on CPAN for something to just parse data out of whatever pip looks at directly.
[02:30:52] <aquanight> start eliminating the middle-man
[02:33:30] *** Quits: pizdets (~pizdets@183.182.111.1) (Ping timeout: 250 seconds)
[02:33:51] *** Joins: pizdets_ (~pizdets@183.182.110.153)
[02:35:20] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[02:40:45] <pragma-> xenu: speaking of constant.pm, imagine my surprise to discover `use lib "path";` requires lib.pm -- or at least requires installing perl-lib in addition to perl-interpreter (on Fedora).
[02:41:27] <LeoNerd> Yeah, the redhats all seemed to have broken perl packaging, until very recently
[02:41:33] <Corin-EU> aquanight:  I did have a look on metaCPAN to see if there was some interface to python's pip but did not find anything from a web search.  Confusingly there is also a perl PIP.  In my script I just need to know if a module is installed, grab the version number from the installed version and then do a comparison with a supplied version number.  Ulitimately if the version is less, it then downloads the new version.  This is not just for pypi modules but 
[02:41:33] <Corin-EU> also for cpan modules.  And this check on the pything module version is also being used as a check in determining the version for other modules.
[02:42:18] <pragma-> LeoNerd: perl-interpeter is supposed to be a minimal perl install consisting of mostly just the interpeter. I would have expected `use lib` to be a core Perl interpreter feature, hence my surprise.
[02:43:03] <pragma-> The other package without the qualified -interpreter installs quite a bit more... quite a bit more indeed. 
[02:43:37] <LeoNerd> Yes, most people would expect that core-shipped perl modules come with the perl interpret; yet redhat thought different
[02:43:57] <aquanight> to be fair
[02:44:17] <aquanight> use lib "thing"; is pretty much unshift @INC, "thing";
[02:44:33] <pragma-> hm.
[02:44:48] <LeoNerd> Well, in a BEGIN block. But yes
[02:44:49] <pragma-> So I can just omit that dependency by manipulating @INC instead.
[02:44:56] <pragma-> Yeah, use lib just looks nicer.
[02:44:57] <pragma-> Modern.
[02:44:59] <pragma-> clean.
[02:45:02] <LeoNerd> It's also useful so you can  perl -Mlib=whatever ...
[02:45:09] <LeoNerd> But then you might as well just  perl -Iwhatever
[02:45:12] <aquanight> there might be some more shenanigans besides
[02:46:04] <LeoNerd> It does a few other bits and pieces; read lib.pm 's import function
[02:46:17] <aquanight> looks like it injects architecure dirs
[02:46:26] <aquanight> and perl-versioned dirs
[02:46:41] <aquanight> I'm not sure what the business with the !~ /\.par$/ is
[02:46:50] <aquanight> .par extension makes me think "perl archive"?
[02:47:05] <aquanight> but this is the first I'm hearing about such a thing
[02:47:21] <pragma-> makes me think of recovery archives 
[02:47:34] <pragma-> for recovering corrupt binary files from a newsgroup download
[02:47:37] <mst> pragma-: you might like V.pm
[02:47:47] <aquanight> ...
[02:47:51] <aquanight> the top google result:
[02:47:52] <aquanight> A PAR file is an aircraft parameters file used by FMS (Flying-Model-Simulator), a flight simulation game for Windows.
[02:48:02] <aquanight> TIL perl is a flight simulator
[02:48:21] <mst> fatpacker exists in part because mst has never successfully used PAR
[02:48:27] <pragma-> aquanight: https://en.wikipedia.org/wiki/Parchive
[02:48:27] <Paperbot> Link title(s): [ Parchive - Wikipedia ]
[02:48:35] <pragma-> that's what I associate .par with
[02:48:38] <mst> also I need to cleanup and ship XSPacker at some point
[02:49:21] <aquanight> it doesn't help that PAR isn't a core module apparently
[02:49:59] <mst> it's angry audrey crack, that was never gonna happen
[02:50:33] <mst> though it does a primitive form of self-fatpacking that means that's not a problem, it's everything else about its crackness that's a problem
[02:51:52] *** Joins: parv (~quass@user/parv)
[02:51:56] <aquanight> hmm.
[02:52:14] <aquanight> what was bad aboue it?
[02:52:30] <aquanight> other than it's based on PKZIP
[02:52:52] <aquanight> which probably isn't a problem these days but I'm not sure if that was always true
[02:53:11] <aquanight> could've done a debian and go off of ar(1)
[02:53:22] <mst> first, I dislike needing to be able to unpack to a tempdir to run anything
[02:53:48] <mst> but honestly mostly it tried to do so much clever shit that I got regular botches and found it very hard to get a mental model together that let me actually debug them
[02:55:12] <aquanight> perhaps my biggest complaint with most operating systems is the lack of ability to create a process-private in-memory filesystem that can then be used with normal FS APIs
[02:55:29] <LeoNerd> Yeah, that would be nice
[02:56:24] <aquanight> I mean sure you need a way to identify the path but that's easy enough. Linux could've reserved /tmp/ for that purpose (and use /var/tmp/ or /dev/shm/ for shared temporaries)
[02:57:08] <mst> xan's Filesys::POSIX is a failed but interesting attempt at something in that direction
[02:57:12] <aquanight> with Windows I think you just duplicate/share the file handle....... somehow.
[02:57:30] <aquanight> and make, say, T:\ paths process-private
[02:58:13] <aquanight> then we can kill the need for $ENV{TMP} and File::Temp/File::Spec->tmpdir can work under perl -T
[02:58:31] <mst> aquanight: did you ever see my xspacker code?
[02:58:50] <aquanight> I hav enot
[02:58:50] <mst> I got 'fatpack base64 of a .so and dynaload it' working
[02:59:02] <aquanight> and metacpan thinks it doesn't exist
[02:59:11] <mst> because I never cleaned it up enough to ship
[02:59:35] <mst> had it working on linux and fbsd though
[02:59:40] <aquanight> mst: did you ever get "teleporting an .so to remote system via memfile/dlopen shenanigans" to work?
[02:59:53] <mst> that was precisely what that code does
[03:00:08] <aquanight> nice
[03:00:42] <mst> has to dlopen a proc fd/$id on linux
[03:00:58] <mst> the freebsd kernel has fdlopen so can do it directly
[03:01:57] <aquanight> I still wonder how you got the fd in the first place? I'm assuming you had to start from pure perl...
[03:02:28] <aquanight> I remember it was some fancy syscall to create a memory fd
[03:02:35] <mst> perldoc -f syscall
[03:02:36] <perlbot> mst: Your documentation is available at: https://perldoc.perl.org/functions/syscall
[03:02:56] <aquanight> yeah I remember syscall() I just can't remember the specific syscall involved.
[03:03:43] <aquanight> it was some relatively new on
[03:04:00] <aquanight> memfd_create ?
[03:04:04] <mst> hermit1.scsys.co.uk/~matthewt/xspacktest
[03:04:21] <mst> not complete code but I'm in the pub right now so digging through the whole source tree would be effort
[03:05:21] <aquanight> hmm
[03:05:34] *** Parts: parv (~quass@user/parv) ()
[03:05:42] <aquanight> interesting to go straight to syscall write. I'd probably have gotten hung up trying to use 3-arg open to get perlio on that handle and use print/syswrite
[03:06:21] <mst> I figured since I was already necessarily at that level to get the memfd it was better to stay consistent within that particular sub
[03:06:36] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:08:22] <aquanight> makes sense
[03:09:05] <mst> also I really didn't want perlio's refcounting and auto-close() to happen at the wrong moment
[03:09:08] <aquanight> I like how you basically replace DynaLoader::bootstrap and XSLoader::load with the same sub
[03:09:38] <aquanight> ... wouldn't that only happen at the end of the sub?
[03:09:49] <aquanight> wait
[03:09:56] <aquanight> you never close the fd at all
[03:10:25] <aquanight> does it need to stay open? I would assume once dlopen mmap's it it's safe
[03:10:26] *** Joins: pabogr (uid27497@id-27497.tinside.irccloud.com)
[03:11:06] <aquanight> (also it's hilarious that an memfd can be mmap()ed)
[03:11:39] <mst> I got as far as proving the concept and got distracted so don't trust me on this but my memory is that closing it freed it out from under the dlopen
[03:12:07] <aquanight> I could believe that.
[03:13:48] <mst> not having done things like actually double checking that and seeinf what the best approach would be is why it didn't get shipped, I was curious as to whether I could do it at all and having proven I could, filed it under "that was fun, I'll productionise it if somebody (probably me) ever comes up with a reason it's a -good- idea rather than merely possible"
[03:15:29] <mst> though of course if you ever come up with such a situation and I'm busy hating other code, I'm perfectly happy to give you all of my notes and test code and be credited
[03:16:04] <mst> the last test I wrote, I managed to make DBI + DBD::SQLite packable
[03:16:41] <mst> next time I need to do an audit of a bunch of customer machines without touching the filesystem, that's going to get used
[03:16:58] *** Joins: XV8 (~XV8@2601:5cb:c001:50:289b:8a8a:656f:919)
[03:20:19] <mst> (the last time I did a full scale one of those we found a fucking botnet on half their production platform ... and two extra single point of failure machines nobody realised existed because the creator had already been fired)
[03:24:34] *** Joins: gast0n (~g4570n@user/gast0n)
[03:27:51] <aquanight> honestly I wonder if it'd be simpler to fork, have the child unshare its filesystem, mount tmpfs on /, and start loading shit into that.
[03:28:37] <aquanight> discovering that unsharing the user namespace lets you do privileged things within it could be useful for that purpose as well
[03:29:22] <aquanight> but if you already have root you don't need that
[03:36:03] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[03:37:25] <mst> aquanight: my interest is basically ssh into an unprivileged account where I would prefer not to be able to write into a filesystem of any sort
[03:37:45] <mst> aquanight: think Object::Remote on steroids and crack
[03:39:29] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:39:40] <mst> well also provide a no-further-wtire-access-required packed script for arbitrary OSen
[03:42:57] *** Quits: anthk_ (~anthk_@41.85-84-206.dynamic.clientes.euskaltel.es) (Ping timeout: 240 seconds)
[03:54:10] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:56:56] * GumbyPAN CPAN Upload: Amazon-SecretsManager-1.0.0 by BIGFOOT https://metacpan.org/release/BIGFOOT/Amazon-SecretsManager-1.0.0
[04:01:57] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-GEEKRUTH-1.0100 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/Dist-Zilla-PluginBundle-Author-GEEKRUTH-1.0100
[04:05:37] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[04:10:55] *** Joins: whynot (~whynot@88.155.59.57)
[04:13:34] *** Quits: XV8 (~XV8@2601:5cb:c001:50:289b:8a8a:656f:919) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:16:58] * GumbyPAN CPAN Upload: Amazon-API-1.1.7 by BIGFOOT https://metacpan.org/release/BIGFOOT/Amazon-API-1.1.7
[04:21:28] *** Joins: krismatrix (~krismatri@38.80.149.51)
[04:24:25] *** Quits: krismatrix (~krismatri@38.80.149.51) (Client Quit)
[04:24:44] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[04:25:00] *** Joins: frost (~frost@user/frost)
[04:25:34] *** Quits: furrymcgee (~devuan@cgn-89-1-211-103.nc.de) (Quit: leaving)
[04:28:36] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:30:36] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Remote host closed the connection)
[04:33:57] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Ping timeout: 240 seconds)
[04:39:30] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[04:42:01] * GumbyPAN CPAN Upload: Task-BeLike-GEEKRUTH-0.0001 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/Task-BeLike-GEEKRUTH-0.0001
[04:42:01] * GumbyPAN CPAN Upload: Task-BeLike-GEEKRUTH-1.0000 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/Task-BeLike-GEEKRUTH-1.0000
[04:55:29] *** Quits: kst`` (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[05:02:17] <Corin-EU> @aquanight and @mta  Thank you for all your help.  I finally got the simple case to work in a generic function to call qx and parse output, with storage of the intermediate qx output. It came down to the CAREFUL positioning of the parentheses when doing the substitution.      my ($available, $output);  $output = qx ($command 2> /dev/null); ... test output lenghth, error message unless ignore error set ...  ($available) = ($output =~ /^$match\s*(.*)$/m);  
[05:02:17] <Corin-EU> check length of available, error message and exit unless ignore error set .  So there is a perl script equivalent of sed -ne 's|pattern\(match\)|\1|p'  One just has to get the PARENTHESES in the correct position around the expressions.   *waves*                             
[05:03:09] *** Quits: Corin-EU (~miller@88.207.140.249) (Quit: Leaving)
[05:16:14] <zgu> is the buffer returned by SvPVbyte supposed to be free()d or not?
[05:18:25] <zgu> ...i'm gonna go with no
[05:20:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[05:20:57] *** Joins: XV8 (~XV8@2601:5cb:c001:50:289b:8a8a:656f:919)
[05:24:06] <aquanight> no I believe it's the pointer into the actual memory used by the SV*
[05:24:32] <aquanight> in other words, you can modify the string through that pointer
[05:37:07] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-GEEKRUTH-1.0200 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/Dist-Zilla-PluginBundle-Author-GEEKRUTH-1.0200
[05:37:40] <zgu> yeah that explains why removing the free stopped the intermittent double free aborts
[05:43:54] *** Joins: krismatrix (~krismatri@38.80.149.51)
[05:44:09] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:47:34] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[05:52:09] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 256 seconds)
[05:52:09] * GumbyPAN CPAN Upload: Dist-Zilla-Plugin-Upload-OrePAN2-0.0001 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/Dist-Zilla-Plugin-Upload-OrePAN2-0.0001
[05:58:17] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[06:07:26] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[06:07:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:16:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[06:17:20] *** Joins: alex11 (~alex11@user/alex11)
[06:22:17] *** Quits: Su-Shee (~Susanne@p4ff49c4a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:24:19] *** Joins: Su-Shee (~Susanne@p508942ef.dip0.t-ipconnect.de)
[06:28:17] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 240 seconds)
[06:43:04] *** Joins: sniff (sid387688@id-387688.hampstead.irccloud.com)
[06:45:40] <EvanCarroll> IT IS I, EVAN THE GREAT
[06:46:29] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:46:29] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:46:29] *** finn_elija is now known as FinnElija
[06:46:42] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:52:04] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[06:55:30] *** Quits: pabogr (uid27497@id-27497.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:03:55] *** Quits: whynot (~whynot@88.155.59.57) (Quit: leaving)
[07:36:48] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 250 seconds)
[07:36:50] *** Quits: Woodzy (~quassel@198.204.246.228) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:37:23] *** Joins: Woodzy (~quassel@198.204.246.228)
[07:45:12] *** Joins: krismatrix (~krismatri@38.80.149.51)
[07:45:32] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:48:41] *** Quits: krismatrix (~krismatri@38.80.149.51) (Client Quit)
[08:01:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:09:58] *** Joins: Martchus_ (~martchus@dynamic-077-009-024-238.77.9.pool.telefonica.de)
[08:11:11] *** Quits: Martchus (~martchus@dynamic-077-009-112-114.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:11:24] * GumbyPAN CPAN Upload: IP-Geolocation-MMDB-1.002 by VOEGELAS https://metacpan.org/release/VOEGELAS/IP-Geolocation-MMDB-1.002
[08:20:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[08:46:23] *** Joins: vanessa (~annada@103.160.128.7)
[08:51:28] * GumbyPAN CPAN Upload: SPVM-0.9128 by KIMOTO https://metacpan.org/release/KIMOTO/SPVM-0.9128
[08:56:51] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[09:09:57] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[09:12:05] *** Joins: Darkcoal (~user@130.164.162.247)
[09:32:56] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 250 seconds)
[09:39:33] *** Joins: ufobat (~martin@dynamic-077-002-117-047.77.2.pool.telefonica.de)
[09:41:01] *** Joins: mexen (uid495612@user/mexen)
[10:01:05] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[10:05:29] *** Joins: diskin (~diskin@109.165.118.140)
[10:05:44] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[10:10:09] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[10:10:09] *** diskin is now known as Guest7265
[10:10:09] *** Quits: Guest7265 (~diskin@109.165.118.140) (Killed (strontium.libera.chat (Nickname regained by services)))
[10:10:09] *** diskin_ is now known as diskin
[10:10:57] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:15:02] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:16:11] *** Joins: vanessa (~annada@103.160.128.7)
[10:16:23] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ðŸ‘‹)
[10:26:22] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:32:11] *** Quits: randir (~randir@95-26-4-13.broadband.corbina.ru) (Remote host closed the connection)
[10:32:44] *** Joins: randir (~randir@95-26-4-13.broadband.corbina.ru)
[10:33:09] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[10:33:37] *** Quits: japh (~scp1@user/japh) (Ping timeout: 240 seconds)
[10:33:56] *** Joins: japh (~scp1@user/japh)
[10:36:58] <japh> just another manic monday
[10:37:11] *** Quits: randir (~randir@95-26-4-13.broadband.corbina.ru) (Ping timeout: 256 seconds)
[10:39:03] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:39:44] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[10:39:51] *** Joins: martinus__ (~martin@127.59.202.77.rev.sfr.net)
[10:41:34] *** Joins: vanessa (~annada@103.160.128.7)
[10:44:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:45:55] *** Joins: randir (~randir@93.159.239.42)
[10:51:27] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (Quit: Going offline, see ya! (www.adiirc.com))
[11:05:45] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[11:16:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:17:16] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[11:33:10] *** Joins: tobybl (~tobybl@248.64.200.146.dyn.plus.net)
[12:03:18] *** Joins: Pali (~pali@user/pali)
[12:18:59] *** Quits: Peppaq (~quassel@2001:470:1f0b:751:e4a1:77cc:f52d:55be) (Remote host closed the connection)
[12:20:08] *** Joins: Peppard (~quassel@2001:470:1f0b:751:7164:3540:1c53:8a7d)
[12:23:37] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:23:38] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com)
[12:26:16] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Ping timeout: 250 seconds)
[12:31:19] *** Quits: proller (~p@2a02:6b8:b081:1213::1:16) (Ping timeout: 268 seconds)
[12:32:01] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:33:12] <rindolf> japh: i am hypomanic
[12:34:07] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 256 seconds)
[12:36:55] * GumbyPAN CPAN Upload: Firefox-Marionette-1.20 by DDICK https://metacpan.org/release/DDICK/Firefox-Marionette-1.20
[12:46:56] * GumbyPAN CPAN Upload: AsposeCellsCloud-CellsApi-22.1 by ASPOSE https://metacpan.org/release/ASPOSE/AsposeCellsCloud-CellsApi-22.1
[12:51:11] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:58:05] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: Ping timeout (120 seconds))
[12:58:29] *** Quits: treefrob (~treefrob@p2e5429e4.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[13:01:22] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:03:52] *** Joins: henry40408 (~henry4040@175.181.155.165)
[13:07:55] *** Quits: judabuda (kowbunga@user/judabuda) (Ping timeout: 256 seconds)
[13:08:19] *** Quits: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741) (Ping timeout: 268 seconds)
[13:08:19] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (Ping timeout: 268 seconds)
[13:08:32] *** Quits: k33p3r (kexik@2605:6400:c847:1948::8491) (Ping timeout: 240 seconds)
[13:09:20] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:11:45] *** Joins: treefrob (~treefrob@p57a967da.dip0.t-ipconnect.de)
[13:12:58] *** Joins: furrymcgee (~devuan@cgn-89-1-211-103.nc.de)
[13:18:11] *** jplesnik_ is now known as jplesnik
[13:25:06] *** Joins: pajamian (~pj@ghettoforge/pj)
[13:26:04] *** pj is now known as Guest4867
[13:26:04] *** pajamian is now known as pj
[13:26:17] *** Quits: Guest4867 (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[13:27:17] *** Quits: veesh (~veesh@89.237.107.142) (Ping timeout: 240 seconds)
[13:35:25] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[13:37:02] * GumbyPAN welcomes KAZITO - Jose "Kaz" Casimiro to CPAN!
[13:37:02] * GumbyPAN welcomes LEGIONER - Valerii Dundukov to CPAN!
[13:37:26] *** Joins: art1 (~romeyke@p200300ccdf04da0006e7e149c032f371.dip0.t-ipconnect.de)
[13:42:35] *** Joins: veesh (~veesh@77.137.130.142)
[13:42:42] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:47:00] <ilmari> LeoNerd: sdview wishlist: an option to use [terminal hyperlink escapes](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)
[13:47:04] <Paperbot> Link title(s): [ Hyperlinks in Terminal Emulators Â· GitHub ]
[13:47:33] <LeoNerd> ilmari: Is that OSC 51 ?
[13:48:13] <LeoNerd> 8, even. yeah
[13:48:17] <LeoNerd> It's on my list to think about
[13:48:43] <ilmari> printf '\e]8;;http://example.com\e\\This is a link\e]8;;\e\\\n'
[13:48:43] <Paperbot> Link title(s): [ Example Domain ]
[13:49:45] <LeoNerd> Yup
[13:50:02] <ilmari> it'd have to be an explicit option (possibly an SDVIEW_OPTIONS env var?), because Â«Currently there's no way of detecting whether the terminal emulator supports hyperlinks.Â»
[13:50:31] <ilmari> OTOH Â«Any terminal that correctly implements OSC parsing according to ECMA-48 is guaranteed not to suffer from compatibility issues. That is, even if explicit hyperlinks aren't supported, the target URI is silently ignored and the supposed-to-be-visible text is displayed, without artifacts.Â»
[13:50:51] <LeoNerd> HAH
[13:51:00] <LeoNerd> That's rich, coming from Gnome VTE :P
[13:51:11] <LeoNerd> But yes, any *proper* terminal should at least ignore them
[14:03:02] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[14:03:15] <ilmari> wishlist ticket filed: https://rt.cpan.org/Ticket/Display.html?id=140834
[14:03:16] <Paperbot> Link title(s): [ Bug #140834 for App-sdview: Support terminal hyperlink escapes <https://rt.cpan.org/Public/Bug/Display.html?id=140834> ]
[14:07:24] <ilmari> looking for other markdown viewers, I found https://github.com/ondratu/formiko - that name sounds like esperanto?
[14:07:25] <Paperbot> Link title(s): [ GitHub - ondratu/formiko: reStructuredText editor and live previewer ]
[14:08:19] <ilmari> indeed, google translate says it's esperanto for ant
[14:08:57] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[14:09:21] <Botje> formica is latin for ant, so close enough
[14:10:26] *** Joins: fling (~fling@user/fling)
[14:13:32] <Botje> macos-- # stop disconnecting IRC everytime you go to sleep
[14:14:58] * ilmari does not expect TCP connections to survive suspend/resume, seeing as that most likely shuts down the network adapter, tearing down the connection state
[14:15:21] <ilmari> especially on wifi, where it has to reconnect to the AP, which might also drop the connection tracking state on disassociation
[14:15:47] <Botje> fair enough. s/go to sleep/blank the screen/
[14:16:03] <Botje> the write end is still functional but the read end is not
[14:16:15] <Botje> so my next line tends to start with <space><space> :P
[14:16:56] *** Joins: Pny (pny1312@2605:6400:c847:1985::5891)
[14:18:18] <LeoNerd> Yes, it's Esperanto.. Many Esperanto words come from common European ones, often with Latin roots
[14:18:33] <LeoNerd> It's also where we get "formic acid" from
[14:19:19] <Mandevil> https://en.wiktionary.org/wiki/formica#Latin
[14:19:19] <Paperbot> Link title(s): [ formica - Wiktionary ]
[14:20:42] <Mandevil> Seems like germanic languages lost the PIE root
[14:21:56] *** Joins: pj (~pj@ghettoforge/pj)
[14:23:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[14:24:57] *** Joins: XV9 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d)
[14:25:55] <art1> Moin, Is it possible to replace a subroutine via PPI / PPIx::Refactor to a new code block? I have tried to use 'my $new_sub = PPI::Statement::Sub->new(\"sub foo {}");' and insert it via '$sub->insert_before($new_sub)', but doesnt work. Could you point me to a working example to replace subs? 
[14:28:28] *** Quits: XV8 (~XV8@2601:5cb:c001:50:289b:8a8a:656f:919) (Ping timeout: 250 seconds)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:36:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[14:41:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[14:42:47] <aquanight> art1: if you're looking to replace a sub, insert_before alone isn't enough to do it.
[14:43:09] *** Quits: furrymcgee (~devuan@cgn-89-1-211-103.nc.de) (Quit: leaving)
[14:43:10] <aquanight> you'll need to also ->remove the prior definition
[14:44:04] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (Ping timeout: 250 seconds)
[14:48:44] *** Joins: proller (~p@2a02:6b8:0:40c:c30b:1605:e861:ef65)
[14:50:36] <aquanight> actually even better, there is an actual ->replace method
[14:51:41] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:58:56] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[15:00:11] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[15:05:45] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[15:06:18] <rindolf> https://twitter.com/shlomif/status/1485024317062717440
[15:06:18] <Paperbot> Shlomi Fish (@shlomif) 1d13h ago: Mr. Linea ( https://en.wikipedia.org/wiki/La_Linea_(TV_series) ) is TheCreator. ;)
[15:07:11] * GumbyPAN CPAN Upload: Koha-Contrib-ValueBuilder-RepeatableAutocomplete-1.000 by DOMM https://metacpan.org/release/DOMM/Koha-Contrib-ValueBuilder-RepeatableAutocomplete-1.000
[15:07:17] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[15:09:19] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[15:10:51] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:11:14] <lopid> another one to add
[15:15:05] <art1> aquanight: I have replace() used too, but does not work. An ugly hack ist stillworking if I use  'my $new_sub = PPI::Token::Comment->new(\"sub foo {}");'
[15:16:35] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:20:25] *** Joins: pj (~pj@ghettoforge/pj)
[15:24:55] *** Joins: k33p3r (kexik@2605:6400:c847:1948::8491)
[15:29:04] <rindolf> lopid: add what to what?
[15:30:12] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[15:31:10] <ilmari> ADD 1 TO A GIVING A
[15:33:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:37:25] *** Joins: alex11 (~alex11@user/alex11)
[15:40:36] *** Joins: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741)
[15:40:52] *** Joins: frost (~frost@user/frost)
[15:42:03] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/01/23 UTC) 64 Bit)
[15:42:16] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:42:23] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:46:32] *** Quits: veesh (~veesh@77.137.130.142) (Ping timeout: 240 seconds)
[15:48:02] *** Quits: XV9 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:49:44] *** Joins: XV8 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d)
[15:52:57] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 240 seconds)
[15:58:02] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (Quit: Power is a curious thing.It can be contained, hidden, locked away,and yet it always breaks free.)
[16:00:18] *** Joins: veesh (~veesh@77.137.128.74)
[16:00:44] *** Joins: Pny (pny1312@2605:6400:c847:1985::5891)
[16:04:13] <Mandevil> ilmari: Learning COBOL?
[16:11:18] * GumbyPAN CPAN Upload: Net-Connector-0.005 by CARELINE https://metacpan.org/release/CARELINE/Net-Connector-0.005
[16:11:55] <simcop2387> Mandevil: GNU COBOL is supported on https://perl.bot/
[16:11:55] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[16:13:30] <Mandevil> TIL there's GNU COBOL
[16:15:12] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[16:20:47] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:24:51] <Altreus> moin
[16:24:54] <Altreus> que pasa
[16:30:29] <El_Che> en la casa
[16:31:20] <Altreus> is there a tortillas restaurant called casa del masa?
[16:33:09] *** Joins: frost (~frost@user/frost)
[16:33:33] *** Joins: bkhl_ (~bkhl@user/bkhl)
[16:34:23] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 256 seconds)
[16:35:29] *** bkhl_ is now known as bkhl
[16:43:08] <rindolf> simcop2387: heh
[16:43:37] <simcop2387> Mandevil: my understanding is that it's basically *the* modern cobol for doing anything cobol on a modern system.  there's still the proprietary ones like IBM and some others but switching to GNU COBOL is often the path to dropping COBOL, since you can then start replacing parts of a system with non-cobol parts with it all running on linux or another system of choice
[16:44:09] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (Ping timeout: 268 seconds)
[16:44:09] <simcop2387> that said, it's only based on one account of someone who worked with a company doing that
[16:44:18] <Mandevil> Interesting
[16:46:23] <rindolf> simcop2387: https://www.shlomifish.org/humour/fortunes/show.cgi?id=the-only-prog-lang
[16:46:24] <Paperbot> Link title(s): [ The Only Programming Language - Fortune ]
[16:47:25] <simcop2387> Mandevil: yea the path seems to tend to be: Old Mainframe system + COBOL -> Linux + GNU COBOL (formerly OpenCOBOL) -> Linux + mixed languages -> Linux + some single language (probably java)
[16:47:50] *** Quits: ufobat (~martin@dynamic-077-002-117-047.77.2.pool.telefonica.de) (Quit: Leaving)
[16:48:12] <simcop2387> basically use GNU to get off the expensive mainframe with nearly the same existing system so it's easier to test, and then you can migrate piece-meal (as is possible) to a rewritten system
[16:49:50] <rindolf> simcop2387: nice!
[16:50:40] * rindolf is now playing: 11Taylor Swift - Shake It Off-nfWlot6h_JM.webm [0802:57/0704:01]
[16:55:34] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[16:57:00] <rindolf> https://twitter.com/shlomif/status/1482599505975463943
[16:57:01] <Paperbot> Shlomi Fish (@shlomif) 8d7h ago: https://memory-alpha.fandom.com/wiki/Bajor is a cool planet where mechanics meets UFP/etc. tech. Each Internet end node has a wooden lever where the lowest bandwidth is Terran [10 Mbps?] Ethernet and usuly kept this way. if a webpage loads slowly ,the author was sloppy: https://www.shlomifish.org/meta/FAQ/site_loads_quickly.xhtml
[16:57:29] *** Quits: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[16:58:05] <aquanight> art1: I think you can't just pass a string to PPI::Statement::Sub->new like that. I'm looking through PPI but I think there's a different call you need to use to properly build a ::Sub node.
[16:58:11] *** Joins: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[17:00:17] <rindolf> ->parse/?
[17:01:04] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200C84646AB62F8D7F0.catv.pool.telekom.hu)
[17:02:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:06:18] <aquanight> I think the way it normally works is the token passed to ->new is "sub" and the rest (name, attributes, signature, block) are added as child nodes
[17:22:33] *** Quits: veesh (~veesh@77.137.128.74) (Ping timeout: 256 seconds)
[17:22:57] *** Joins: veesh (~veesh@77.137.129.112)
[17:25:51] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[17:33:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[17:35:10] *** Joins: morte_ (~user@190.104.116.153)
[17:39:21] *** Quits: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[17:39:55] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:42:10] *** Joins: frost (~frost@user/frost)
[17:53:05] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:58:45] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[17:59:02] *** Joins: HvszrStykp (~X@81.171.62.81)
[18:04:12] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[18:04:37] *** Joins: morte_ (~user@190.104.116.153)
[18:05:59] *** Quits: Linux77 (~LinuMage@186.233.182.173) (Ping timeout: 256 seconds)
[18:12:06] *** Joins: Linux77 (~LinuMage@186.233.182.173)
[18:15:00] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[18:17:20] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[18:17:20] *** Joins: judabuda (kowbunga@user/judabuda)
[18:20:17] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[18:21:17] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 240 seconds)
[18:24:03] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 268 seconds)
[18:25:36] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:26:44] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[18:30:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:34:45] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[18:43:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:43:33] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[18:44:02] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200C84646AB62F8D7F0.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[18:44:18] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Client Quit)
[18:46:34] * GumbyPAN CPAN Upload: Jacode-2.13.4.26 by INA https://metacpan.org/release/INA/Jacode-2.13.4.26
[18:47:07] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:47:40] *** Joins: randir (~randir@93.159.239.42)
[18:49:32] <simcop2387> i like that perl gets used as documentation for things like this, https://news.ycombinator.com/item?id=30052633
[18:49:33] <Paperbot> Link title(s): [ YAML was *intended to be* a superset, but it isn't quite, which is about the wor... | Hacker News ]
[18:52:02] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 240 seconds)
[18:54:58] <Grinnz> oh god, linking to a schmorp rant
[18:55:52] <simcop2387> Grinnz: to be fair, at least this rant isn't wrong
[18:56:07] *** Joins: bkhl (~bkhl@user/bkhl)
[18:56:18] <Grinnz> other than the baseless and unsupported claims all over it, yeah
[18:56:39] *** Joins: thrig (~thrig@207.108.197.156)
[18:56:39] <simcop2387> the footnote though is definitely uncalled for.
[18:57:41] <simcop2387> the unicode issues i've seen before myself, never hit the key length issue but i wouldn't be actually shocked about it
[18:58:05] *** Quits: thrig (~thrig@207.108.197.156) (Client Quit)
[18:58:32] *** Joins: thrig (~thrig@207.108.197.156)
[18:59:01] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[19:00:31] *** Joins: henry40408 (~henry4040@175.181.155.165)
[19:02:20] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[19:06:37] * GumbyPAN CPAN Upload: mb-0.38 by INA https://metacpan.org/release/INA/mb-0.38
[19:11:37] *** Joins: jplesnik (~jplesnik@83.240.61.101)
[19:11:48] *** Joins: randir (~randir@95-26-4-13.broadband.corbina.ru)
[19:14:10] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Read error: Connection reset by peer)
[19:14:31] <daemon> what module could I quickly use to generate timestamps in the format of this: 2022-01-24 16:45:00.98412 using 'now' effectively as the basis
[19:14:33] <daemon> or is sprintf still the best option
[19:15:13] <LeoNerd> Fractional seconds rules out most of the strftime'alikes
[19:15:19] <daemon> ah yes
[19:15:32] <daemon> perlbot time
[19:15:32] <perlbot> daemon: ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time); OR Modules: Time::Piece, Time::Format, Time::Tiny, Time::Moment, Time::C, etc.
[19:15:39] <LeoNerd> Though I'd consider doing  sprintf "%s.%06d", strftime(...), $frac * 1E6;
[19:16:08] <daemon> not a bad idea
[19:16:46] <LeoNerd> Inwardly, I'm really annoyed that strftime broke the sprintf-like convention of having flags
[19:17:05] <LeoNerd> It sucks to have to remember different letters for things like the day number with/without leading zero
[19:17:13] <LeoNerd> That's what the 0 flag is supposed to be for :(
[19:17:37] <daemon> :( possible it could be fixed as we go onwards
[19:18:07] <LeoNerd> Yeah maybe.. strftime doesn't usually support any flags, so nothing's really stopping some new library deciding to invent them, and leave the old aliases as legacy
[19:18:08] * thrig wonders if Apple Bug 15753871 (2014) has seen any action (strptime being buggy)
[19:18:12] <daemon> use feature 'sane_strftime'
[19:18:49] <LeoNerd> Though also I note that strftime doesn't usually define a  %f  so that might be free for "fractional seconds"
[19:19:06] <LeoNerd> %3f, %6f, %9f  to do mili/micro/nanosec precision
[19:19:44] <ology> perl -MDateTime -E'say DateTime->now->strftime("%Y-%m-%dT%R.%3N")' => 2022-01-24T15:49.000  Huh.
[19:19:51] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[19:20:18] <LeoNerd> You likely wanted %T not %R
[19:21:15] <ology> Right. Still no microseconds. Wonder why DateTime provides that.
[19:21:58] <daemon> maybe it just guesses :P
[19:22:18] <daemon> might have an XS binding to a lower level C lib
[19:22:28] <LeoNerd> eval: use DateTime; say DateTime->now->strftime("%3N %6N %9N")
[19:22:32] <perlbot> LeoNerd: ERROR: Bareword filehandle "DateTime" not allowed under 'no feature "bareword_filehandles"' at (IRC) line 1. 
[19:22:44] <LeoNerd> *frown*
[19:22:51] <daemon> turn that frown upside down :D
[19:23:58] <daemon> sweval: use DateTime; DateTime->from_epoch( epoch => time )->strftime('%Y-%m-%d %H:%M:%S.%6N');
[19:24:00] <perlbot> daemon: 2022-01-24 15:53:54.000000
[19:24:19] <daemon> that looks very much like you shoved a load of 0's on the end
[19:24:37] <daemon> sweval: use DateTime; DateTime->from_epoch( epoch => time )->strftime('%Y-%m-%d %H:%M:%S.%6N');
[19:24:38] <perlbot> daemon: 2022-01-24 15:54:33.000000
[19:24:45] <daemon> well that's useless
[19:24:48] <LeoNerd> CORE::time() returns an integer
[19:24:50] <simcop2387> daemon: DateTime can almost certainly do it, you'll need Time::HiRes still
[19:24:55] <daemon> the fun thing is:
[19:24:55] <daemon> [2022-01-24 16:45:00.98412] [17119] [info] [UzlTOxPOED75] poll()
[19:24:56] <simcop2387> sweval: use DateTime; DateTime->from_epoch( epoch => time )->strftime('%Y-%m-%d %H:%M:%S.%6N');
[19:24:58] <perlbot> simcop2387: 2022-01-24 15:54:53.000000
[19:25:02] <daemon> this is from mojo's logging 
[19:25:06] <simcop2387> sweval: use DateTime; use Time::HiRes qw/time/; DateTime->from_epoch( epoch => time )->strftime('%Y-%m-%d %H:%M:%S.%6N');
[19:25:08] <daemon> so it is getting them from somewhere
[19:25:08] <perlbot> simcop2387: 2022-01-24 15:55:02.912019
[19:25:13] <daemon> ah time hires of course
[19:25:23] <ology> simcop2387++
[19:25:37] <daemon> simcop2387++ # I really should have got that! :)
[19:25:46] <LeoNerd> Having time() and sleep() work on non-integers is on my topten list of "if we ever get into making breaking changes"
[19:26:46] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:27:06] <simcop2387> i think sleep supporting it likely wouldn't break anything really.  at least not directly.  i can see time() breaking stuff more often because it'll cause rounding and formatting changes.  though i'd expect 95% of cases to not notice or care
[19:28:04] <krismatrix> Hypothetical question. What would you guys do if your 'salt' that you are using for a password salted hash was compromised? I guess would you havea single salt for all user (say for a login system) or separate saltes for each user.
[19:28:56] <thrig> single salt would make a rainbow table easier to do, so don't do that
[19:28:57] *** Quits: ferz (~ferz@93-39-143-61.ip76.fastwebnet.it) (Ping timeout: 240 seconds)
[19:29:41] <krismatrix> so proably the solution is to have a sql table with salt for each user. 
[19:29:45] <leont> Having a single salt is almost as useless as having no salt
[19:30:11] <krismatrix> hmmm...
[19:30:24] <leont> krismatrix: why not try my Crypt::Passphrase module, which takes care of all of these things, and even allows you to change cipher later on without too much headache
[19:30:44] <krismatrix> so a md5_hex(password.singlesalt) is not your solution
[19:31:05] <leont> No, that is not a particularly safe way to encode passwords
[19:31:33] <Grinnz> sweval: use Time::HiRes 'time'; use Time::Moment; Time::Moment->from_epoch(time)->to_string
[19:31:35] <perlbot> Grinnz: 2022-01-24T16:01:29.721175Z
[19:32:20] <leont> MD5 is broken and should not be used except as a better CRC.
[19:32:28] <krismatrix> CRC?
[19:32:44] <Grinnz> hash used to quickly find if files differ
[19:32:45] <simcop2387> krismatrix: the usual thing these days that i see is: per password salt, and a per instance "pepper".  i.e. there's two bits that get concatted as the real salt, $pepper . $salt, that way there's another bit of info that has to be found by an attacker that isn't in the DB itself.
[19:32:50] <Grinnz> or strings in general
[19:33:02] <leont> Simple hashes in general are ill-suited for password hashing because they're way too fast. A good GPU can do billions of MD5's *per second*. Simply trying out passwords and variants with that salt is entirely feasible
[19:33:31] <simcop2387> krismatrix: it doesn't give any better cryptographic guarantees, but it just makes another little hill for someone to climb and makes a db compromise a bit more difficult to do
[19:33:44] <Grinnz> krismatrix: modern crypt algorithms (like Crypt::Passphrase uses) store the salt for each password with the hash
[19:34:17] <thrig> DES crypt also stored the hash with the password
[19:34:24] <simcop2387> personally i recommend Crypt::Passphrase::Argon2 in argon2id mode
[19:34:35] <zgu> you mean the salt with the hash?
[19:34:50] <leont> The salt should be random but public
[19:34:51] <thrig> yeah, salt
[19:34:53] <krismatrix> hmm..ok.
[19:34:59] <simcop2387> zgu: hash without salt usually doesn't taste very good
[19:35:01] <krismatrix> why public?
[19:35:11] <leont> Because you need it to verify the hash
[19:35:29] <zgu> yeah it was the first two characters in the stored passwd string i think
[19:35:44] <simcop2387> krismatrix: considered public, i.e. it's not a secret, it doesn't need to be published to the world that is
[19:35:46] <leont> With public I meant not-secret, same way the hash is.
[19:35:53] <thrig> bcrypt etc use a larger salt than two bytes
[19:35:58] <Grinnz> stored clearly in your database, not published :)
[19:36:03] <leont> You don't want the world to know, but it's not broken yet if they do
[19:36:11] <krismatrix> ok..
[19:36:12] <simcop2387> cryptography has an interesting and non-intuitive definite of "public" and "private"
[19:36:24] <simcop2387> er definition
[19:36:52] * zgu sings iiiii don't care if the world knows what my hashes are
[19:37:01] <krismatrix> so...i am looking at the module in cpan...i see that initializing it uses an encoder and validator. The latter seems to be the cryptographic algorithm.
[19:37:21] <leont> thrig: des crypt had the right ideas, but is ill-suited for modern hardware. a 12 bit salt meant it could only be unique for 4096 passwords even in ideal circumstances.
[19:37:46] <thrig> CPU power was kinda limited in the 70s
[19:37:59] <simcop2387> thrig: and ram too
[19:38:02] <krismatrix> I think I am going to have to do a simple demo script to get it. I'll take a look and get back to you.
[19:38:11] <gordonfish> 64k'll be enough for anyone
[19:41:19] <xenu> hashing passwords??? but then how will you implement perlmonks-style "what's my password?" feature?
[19:41:36] <simcop2387> argon2 is basically the state of the art/best in class for any password hashing.  it was specifically designed for it and has defensive measures against CPU, GPU and ASIC based mass hashing.	at least in argon2id mode.  it's tunable too, but in general requires more memory than a GPU will reasonably handle per execution unit (so it has to go from cache to vram constantly, which is slow), has
[19:41:42] <simcop2387> branching that also kills GPU performance, and then the design basically makes it so that any ASIC based attack ends up just implementing a cpu in the end anyway.  and CPU attacks can be mitigated by increasing the passes it does as technology moves forward
[19:42:14] <xenu> transparency is important therefore passwords must be stored in plaintext
[19:42:17] <zgu> yeah that's right, argon2 is the one that deliberately needs a lot of RAM
[19:43:09] <simcop2387> scrypt does too, but argon2 is theoretically better designed for it.  i'm not sure just how much analysis either has had about that
[19:43:30] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[19:43:57] <Mandevil> argon2 is bit funny to use.
[19:44:40] <thrig> "Password Hashing Competition" -> and our recommendation for hashing passwords: Argon2 (2015)
[19:44:54] *** Joins: ferz (~ferz@93-39-143-61.ip76.fastwebnet.it)
[19:45:08] <krismatrix> https://l.perl.bot/p/jfjmwj
[19:45:09] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[19:45:30] <krismatrix> why does it say Undefined subroutine &main::get_hash called at test.pl line 15
[19:45:45] <leont> You're supposed to implement that part yourself
[19:45:47] <gordonfish> xenu: What's scary is some banks over the last few years have been found to be storing passwords in either plain text or something reversible as they were able to send passwords to their users when the 'forgot password' option was used.
[19:46:21] <leont> I should have probably called that fetch_hash_from_database or some such
[19:46:25] <thrig> pretty sure linkedin.com had a "passwords in a text file" incident
[19:46:28] <Mandevil> krismatrix: Because get_hash is not defined.
[19:46:40] * GumbyPAN CPAN Upload: Perl-Critic-Policy-PreferredModules-0.001 by ATOOMIC https://metacpan.org/release/ATOOMIC/Perl-Critic-Policy-PreferredModules-0.001
[19:46:49] <krismatrix> isn't that from Crypt::Passphrase?
[19:46:55] <simcop2387> gordonfish: or lowercasing it or trimming it to 8 chars, or ignoring some letters so it'd work on a DTMF phone pad, etc.
[19:47:11] <Mandevil> krismatrix: https://gist.github.com/borekl/22b394392791c85cf4da03bfa11e5a6f
[19:47:11] <Paperbot> Link title(s): [ Creating and checking a hash using Crypt::Passphrase in perl Â· GitHub ]
[19:47:16] <Mandevil> krismatrix: Working example for you
[19:47:31] <gordonfish> simcop2387: Oh yeah those too
[19:48:09] <krismatrix> thx u..checking that out.
[19:48:31] <gordonfish> simcop2387: It's really infurating to have a nice long phrase style password only for only the first eight characters to be checked and the rest dumped.
[19:48:49] <gordonfish> s/dumped/tossed/
[19:50:12] <krismatrix> Mandevil: where is the salt itself? 
[19:50:20] <Mandevil> In the resulting hash.
[19:50:23] <simcop2387> gordonfish: it's one reason why i always recommend if you have to use bcrypt, to instead do bcrypt(salt, hmac_sha256(pepper, password)) instead, since bcrypt is limited to 72 characters only and will silently truncate in most implementations (some raise an error).  as long as you're not really expecting to store more than 256bits (or use 512bit sha2) of entropy per password then it should
[19:50:29] <simcop2387> mathematically be equivilent still and prevents length based issues
[19:51:01] <Mandevil> krismatrix: The resulting string is hash type + salt + hash itself.
[19:51:12] <Mandevil> So you can mix multiple hasing functions, upgrade et.c
[19:51:24] <simcop2387> i think there's a php extended version of bcrypt without that limitation, but i don't trust such non-standard changes to anything cryptographic.
[19:53:42] <krismatrix> ok..i need to understand what is going on. So I have username and password. I use crypt::passphrase (like you showed) and I get the $hash. I assume that $hash is what I should store somewhere in my database right?
[19:53:58] *** Quits: thrig (~thrig@207.108.197.156) (Read error: Connection reset by peer)
[19:53:59] <Mandevil> krismatrix: Exactly.
[19:54:12] <leont> simcop2387: latest Crypt::Passphrase::Bcrypt supports hmacing automatically with the salt.
[19:54:30] <simcop2387> leont: good
[19:54:30] <krismatrix> And this string which you called $hash is actually hash type + salt + hash and not just the hash 
[19:54:34] <Mandevil> Yes.
[19:55:00] <krismatrix> And because of the way it is designed, essentially there is a unique salt for each user
[19:55:03] <Mandevil> So when you feed it back to Crypt::Passphrase, it will know what hash algo and salt to use
[19:55:10] <krismatrix> and therefore unique hash (naturally)
[19:55:11] <Mandevil> krismatrix: It's randomly generated.
[19:55:20] <simcop2387> leont: the 72 character limit like that was a bad design for bcrypt, not likely to be hit for humans but i frequently like to do 128 character passwords for service accounts if there's not a better option
[19:55:34] <krismatrix> right right
[19:55:38] *** Joins: lispy (~lispy4@84.69.59.93)
[19:56:07] <gordonfish> sub blend($salt, $pepper, $password) { bcrypt($salt, hmac_sha256($pepper, $password)); }
[19:56:23] <gordonfish> or maybe we need a new function: cilantro
[19:56:23] <krismatrix> so basically when user is logging in a second time, they provide a password, we know the username, so we get the $hash from our database which has both hash and salt, and then we use the password enter by user the second time to do verify.
[19:56:33] <Mandevil> Yes.
[19:56:54] <Mandevil> But you don't really need to case, Crypt::Passphrase does all this for you.
[19:57:06] <Mandevil> Just get it the new password, the stored hash and off you go
[19:57:23] <Mandevil> s/case/care/
[19:57:23] <krismatrix> ok...cool. Other than not understanding what Bcrypt and argon are, it is basically a salted hash with unique salt per user.
[19:57:41] <leont> Yeah, the point of Crypt::Passphrase is that you don't have to think about any of these things, it does the right thing for you
[19:57:54] <gordonfish> simcop2387: 72 for the input password or for the hash?
[19:58:08] <simcop2387> gordonfish: 72 bytes for the input
[19:59:02] <simcop2387> it's still an ongoing and annoying issue for a lot of auth frameworks, like ruby's devise (used by mastodon) https://github.com/heartcombo/devise/issues/5307
[19:59:03] <Paperbot> Link title(s): [ Passwords shouldn't be limited to 72 characters Â· Issue #5307 Â· heartcombo/devise Â· GitHub ]
[19:59:21] <krismatrix> Just so I am clear...Crypt::Passphrase doesn't store the $hash. I still need to do the leg work of storing that in a database right?
[19:59:24] <gordonfish> simcop2387: And that is small for a password? I know everyone has different ideas when it comes to that, like use something really long and put it in a manger, etc, though 72 is rather long. I'd prefer not having such limits though.
[19:59:38] <Grinnz> krismatrix: correct
[19:59:43] <Mandevil> krismatrix: Sure.
[19:59:49] *** Joins: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com)
[19:59:56] <Grinnz> krismatrix: and retrieving the hash for the user by the provided username or similar key
[20:00:05] <krismatrix> right right.
[20:00:36] <krismatrix> Ok...so let's get back to the original question. Say the salt was compromised. How exactly does Crypt::Passphrase help with updating/changing the salt?
[20:00:39] <Grinnz> and there is a third part, where you can refresh the hash if it's outdated after a successful login (while you still have the password in memory), which Crypt::Passphrase also makes easy
[20:00:41] <Mandevil> krismatrix: Here's actual implementation with sqlite: https://github.com/borekl/mycaches/blob/main/backend/lib/MyCaches/Model/Users.pm
[20:00:42] <Paperbot> Link title(s): [ mycaches/Users.pm at main Â· borekl/mycaches Â· GitHub ]
[20:00:53] <simcop2387> off topic: oh yea, since there's more people around right now since I last mentioned it, if you have a gsuite free account/setup, you *MUST* switch to a paid google workspace account befure June 1st 2022.  If you don't, your account will be deleted and you will lose all your email, youtube accounts, etc.  https://www.reddit.com/r/gsuite/comments/s8tjdt/gsuite_legacy_dont_panic/ for more info
[20:00:55] <Paperbot> Link title(s): [ Gsuite Legacy - donâ€™t panic ðŸ˜± : gsuite ]
[20:01:03] <Grinnz> krismatrix: just hash the same password again and it will have a new salt
[20:01:22] <Grinnz> this requires the user to enter the password, since you're not storing it
[20:01:29] <krismatrix> how...i don't have the password?
[20:01:33] <krismatrix> oh..
[20:01:49] <Grinnz> the usual way this is handled is to force the user to reset their password from scratch
[20:02:00] <krismatrix> Right. That is what I wanted to know. Got it.
[20:02:08] <simcop2387> or to do it blind to them on login while you have it
[20:02:16] <krismatrix> Alright..i am good. Thank you for the explanation guys. I will implement accordingly. 
[20:02:45] <simcop2387> oh wait salt compromised, i thought you were just talking about migrating from one hash to another.  ignore me
[20:03:33] <Mandevil> Is there any immediate danger with compromised salt?
[20:03:52] <Grinnz> no, but it means the password can eventually be brute forced
[20:04:03] <Grinnz> with something like argon2, it's still not much of a risk
[20:04:10] <Grinnz> unless someone really cares about your specific account
[20:04:35] <Mandevil> That's what I though.
[20:04:50] <Grinnz> if it's just salted md5, it means the password is immediately compromised though
[20:05:09] <Grinnz> so don't use that ;)
[20:05:24] <krismatrix> yeah..i am not thinking about immediate danger and my system isn't some super secure place. But I 'try' to think of potential problems when scaling..and I realized I didn't know what to do if my salt was compromised.
[20:05:26] <Mandevil> Who in their right mind would use md5
[20:05:59] <krismatrix> I presently salt a captcha with md5
[20:06:23] <Mandevil> I mean for hashing passwords
[20:06:38] <krismatrix> well..i was doing that until this discussion. lol
[20:06:40] <leont> krismatrix: the whole point of password hashes is that it's still secure if the database is leaked completely, assuming the password is good (which it often isn't, but that's another discussion)
[20:07:17] <Grinnz> yeah, the user will always be the weakest link if you design your system correctly
[20:07:24] <krismatrix> right
[20:08:04] <leont> Having something in the front-end that suggests better passwords is often a good idea, but a lot of sites get that wrong too
[20:08:35] <alh> /b 134
[20:08:37] <alh> erg
[20:08:42] * Grinnz still remembers when schwab required your password to be 6-8 characters
[20:08:43] <Mandevil> Firefox suggests decent passwords.
[20:08:54] <ology> A capital letter, 2 monkeys, digits, vegetation.
[20:08:59] <leont> Like, "It must contain a special character" means a lot of good passwords get rejected -_-
[20:09:54] <ology> https://specopssoft.com/blog/father-password-rules-sorry-wasting-time/
[20:09:55] <Paperbot> Link title(s): [ The father of password rules is sorry for wasting your time - Specops Software ]
[20:09:58] <gordonfish> { Re: <Mandevil> Who in their right mind would use md5 } Had a client not long ago using md2 and rc4...
[20:10:10] <revhippie> Error: password cannot contain the following words:  SELECT, UPDATE, DELETE ...
[20:10:27] <gordonfish> Oh Bobby...
[20:10:38] <Mandevil> revhippie: Lol.
[20:14:11] *** Joins: anthk_ (~anthk_@92.176.105.30)
[20:16:57] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[20:18:35] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[20:18:47] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:20:35] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[20:24:41] * gordonfish wonders what Mr. Tables is up to these days
[20:25:19] <choroba> does he stil drop his son at school?
[20:26:44] * GumbyPAN CPAN Upload: Perl-Critic-Policy-PreferredModules-0.002 by ATOOMIC https://metacpan.org/release/ATOOMIC/Perl-Critic-Policy-PreferredModules-0.002
[20:28:17] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 240 seconds)
[20:29:20] *** Joins: magla (~gelignite@55d4d2c6.access.ecotel.net)
[20:29:34] *** Joins: pj (~pj@ghettoforge/pj)
[20:33:27] *** Joins: BSaboia_ (~bsaboia@187.19.136.30)
[20:35:10] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[20:35:38] *** Joins: lispy (~lispy4@84.69.59.93)
[20:40:31] *** Quits: jplesnik (~jplesnik@83.240.61.101) (Quit: Leaving)
[20:42:26] <EvanCarroll> perl is horrible part 498958 https://stackoverflow.com/q/70834431/124486
[20:42:26] <Paperbot> Link title(s): [ perl - Why is *main::my_func{CODE}* a coderef when function my_func() is exported but not defined... <https://stackoverflow.com/questions/70834431/why-is-mainmy-funccode-a-coderef-when-function-my-func-is-exported-but-n> ]
[20:44:51] <choroba> interestingly, I've never had a problem with this part of Exporter
[20:47:12] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[20:49:32] <rindolf> EvanCarroll: hi. all prog langs are: https://www.shlomifish.org/philosophy/computers/your-programming-language-must-suck/
[20:49:32] <Paperbot> Link title(s): [ Why Your Programming Language Must Suck - Shlomi Fishâ€™s Homesite ]
[20:49:43] <gordonfish> isweval: sub foo; *main::foo{CODE}->();
[20:49:56] <gordonfish> sweval: sub foo; *main::foo{CODE}->();
[20:49:58] <perlbot> gordonfish: ERROR: Undefined subroutine &main::foo called at (IRC) line 1. 
[20:49:59] <gordonfish> sweval: sub foo; *main::foo{CODE};
[20:50:01] <perlbot> gordonfish: sub { "DUMMY" }
[20:50:27] <gordonfish> EvanCarroll: You can get a ref but you should be getting that 'Undefined subroutine' if you actually try to invoke it.
[20:51:02] <EvanCarroll> run the code in his example, you do.
[20:51:26] <EvanCarroll> ah, we're in agreement
[20:51:33] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[20:51:35] <EvanCarroll> yes that's what's happening. it's just 100% stupid.
[20:52:18] <EvanCarroll> No one in their reasonable mind expects to use ->can() to determine if there is an undefined dummy sub implementation detail that will warn in the slot.
[20:53:24] <rindolf> gordonfish: hi, sup? it's a good day to die
[20:56:07] <gordonfish> You could have warn'ed me first
[20:56:47] * GumbyPAN CPAN Upload: Test-MockFile-0.024 by TODDR https://metacpan.org/release/TODDR/Test-MockFile-0.024
[21:00:39] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:01:55] <EvanCarroll> leont: is this a good application for your boolean context stuff?
[21:02:16] <EvanCarroll> https://github.com/Perl/perl5/issues/19366
[21:02:17] <Paperbot> Link title(s): [ pkg->can() should return false if the slot is initialized but undefined. Â· Issue #19366 Â· Perl/pe... ]
[21:02:29] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:02:33] <leont> I think you meant LeoNerd 
[21:03:14] *** Joins: csrf (~csrf@user/csrf)
[21:04:09] <rindolf> gordonfish: hi, sup? it's a good day *for me* to die [and be reborn]: https://www.shlomifish.org/art/recommendations/music/online-artists/fan-pages/chris-grimmie/ 
[21:04:09] <Paperbot> Link title(s): [ Fan page for Chris Grimmie - Shlomi Fishâ€™s Homesite ]
[21:04:11] <EvanCarroll> LeoNerd: !! ^
[21:09:11] *** Joins: krismatrix (~krismatri@2601:283:8103:1920:e6ce:3b4a:7ccb:7b0d)
[21:10:49] <ilmari> EvanCarroll: no. "boolean context" is a pure optimisation, to save wasted work when the compiler can prove that the user is only interested in the truthiness of the result
[21:10:52] *** Quits: XV8 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:11:46] *** Joins: XV8 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d)
[21:12:17] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[21:12:47] <EvanCarroll> so you're saying the functionality wouldn't allow you to return false in boolean context here and still a reference to the dummy sub? Or you're saying it should not be used in that fashion?
[21:13:21] <ilmari> I'm saying "boolean context" is not a user-visible concept in perl
[21:17:05] *** Joins: deadmarshal (~deadmarsh@95.38.118.201)
[21:25:20] *** Joins: pj (~pj@ghettoforge/pj)
[21:25:28] *** Quits: krismatrix (~krismatri@2601:283:8103:1920:e6ce:3b4a:7ccb:7b0d) (Quit: Leaving)
[21:26:03] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[21:26:21] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:27:20] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[21:27:35] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:28:17] *** Quits: japh (~scp1@user/japh) (Ping timeout: 240 seconds)
[21:30:19] *** Joins: japh (~scp1@user/japh)
[21:30:40] *** Quits: henry40408 (~henry4040@175.181.155.165) (Read error: Connection reset by peer)
[21:31:20] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:42] *** choroba is now known as choroba_
[21:32:07] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:32:15] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[21:33:42] *** Joins: e1f (~user@141.117.1.166)
[21:33:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:46:51] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[21:47:36] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[21:48:18] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[21:48:45] *** Quits: tobybl (~tobybl@248.64.200.146.dyn.plus.net) (Remote host closed the connection)
[21:54:32] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[21:56:07] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[21:57:11] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 256 seconds)
[21:59:11] <simcop2387> alright, closing the "CTF" for that vulnerability (and probably others).  going to reboot the perlbot server
[22:00:59] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Quit: MEATBOT listens not to your cries for mercy. ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:00:59] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:00:59] *** Quits: perldoc (~perldoc@2603-6081-6401-8c00-0000-0000-0000-0d8f.res6.spectrum.com) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:00:59] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:00:59] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:01:00] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[22:01:54] * GumbyPAN CPAN Upload: Audit-Log-0.003 by TEODESIAN https://metacpan.org/release/TEODESIAN/Audit-Log-0.003
[22:02:02] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[22:02:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:04:16] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:05:33] *** Joins: krismatrix (~krismatri@2601:283:8103:1920:e6ce:3b4a:7ccb:7b0d)
[22:06:18] <krismatrix> Mandevil is the $auth creation (i.e. Crypt::Passphrase->new()) something that needs to be passed around? Or can I just recreate it each time i need to do the verification?
[22:08:09] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 256 seconds)
[22:08:15] <Grinnz> doesn't matter
[22:08:19] <Botje> krismatrix: from the documentation it looks like it does not contain any state worth keeping.
[22:08:24] <LeoNerd> EvanCarroll: I wouldn't like an interface that distinguishes undef, defined-but-false, or true values. That way feels like the ick that is `wantarray`
[22:08:41] <krismatrix> thx u
[22:08:45] <Grinnz> it doesn't particularly need to be OO, it just does that to store the encoder and validators yous et.
[22:08:47] <Grinnz> set*
[22:09:11] <Grinnz> so if you recreate it with the same encoder and validators, it'll work the same
[22:10:57] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[22:10:59] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:12:27] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:14:30] <krismatrix> got it.
[22:14:48] <leont> krismatrix: it was meant to be kept around, but it's not harmful if you don't
[22:17:09] *** Quits: proller (~p@2a02:6b8:0:40c:c30b:1605:e861:ef65) (Ping timeout: 268 seconds)
[22:17:48] *** Joins: r3z (~r3z@85.101.190.254)
[22:18:23] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:18:46] <Mandevil> krismatrix: BTW, the $auth is Crypt::Passphrase _instance_.
[22:19:19] <krismatrix> yeah.
[22:19:43] *** Joins: Darkcoal (~user@130.164.162.247)
[22:20:48] *** Quits: r3z (~r3z@85.101.190.254) (Read error: Connection reset by peer)
[22:21:11] <Mandevil> Just checked that leont is in fact the author :)
[22:23:59] *** Joins: pj (~pj@ghettoforge/pj)
[22:24:52] <aquanight> 11:38:46/7C3A1 < LeoNerd> EvanCarroll: I wouldn't like an interface that distinguishes undef, defined-but-false, or true values. That way feels like the ick that is `wantarray` ## tristate booleans, why not?
[22:25:09] <krismatrix> As a computer science concpet, what do I call this Crypt::Passphrase based salted hash? This is just for my nnotes.
[22:25:22] <LeoNerd> aquanight: They're horrible
[22:25:51] <krismatrix> i.e. I call md5hex of salt + password as simple salted hash. and I guess this is no different other than the salt not being unique.
[22:26:06] <LeoNerd> if(!defined wantarray)  or  if(wantarray)  are easy enough tests, but there isn't a short neat way to write the defined-but-false version
[22:26:20] <Botje> krismatrix: yes, same concept. 
[22:27:34] *** Joins: ttkp (501@46-97-229-216.sr2.pon.net)
[22:27:58] <krismatrix> thx u.
[22:28:28] <Botje> you know that's not valid grammar, right?
[22:28:38] <Botje> it's one letter more to write "thanks"
[22:29:07] *** Joins: Astrased (~Astrased@82-168-108-38.fixed.kpn.net)
[22:29:45] <ttkp> 'lo .. I'm trying to find Mark Bradshaw, or in a pinch anyone who's worked with Mail::Milter::Authentication or Prometheus::Tiny::Shared, but I'm not finding a milter-related channel
[22:30:29] <krismatrix> does it bother you?
[22:30:31] <Botje> or just show code and question and people can figure it out for you
[22:30:47] <alh> ttkp: What's up?
[22:31:29] <ttkp> alh - hiya :-) I'm trying to find out if Prometheus::Tiny::Shared has any unpleasant failure modes I should know about before using it in a production environment
[22:31:44] <alh> That's quite a broad question!
[22:31:55] <ttkp> like, if a process dies at just the wrong time, will other subprocesses block forever trying to access the shared backing store?
[22:32:06] <alh> God I hope not
[22:32:30] <ttkp> and since Mail::Milter::Authentication is a project which sees some serious use, and it uses Prometheus::Tiny::Shared, I figured if anyone would know it would be milter devs and/or users
[22:34:29] <alh> If you have specific concerns about Mail::Milter::Authentication, I'd email marc
[22:34:33] <ttkp> I'm going to go spelunking in the source, and also trying to make it fail by spinning up processes and shooting them in the head, but figured it would only be wise to ask someone who might already know
[22:34:47] <alh> I work with both authors, and we run that code at Fastmail 
[22:34:57] <ttkp> okie-doke, alh :-) thanks.  I figured that might be the next step, but held out hope that he might hang out on IRC somewhere
[22:35:00] <alh> And we kill processes all the time and haven't had trouble with P::T::S FWIW
[22:35:12] <ttkp> awesome! that helps :-) thanks, alh
[22:35:26] <alh> The biggest thing you want to do is be sure you aren't using the module in something running as some user, then also accidentally load it up running as root
[22:35:30] <alh> As you'll stomp your perms (P::T::S, that is)
[22:35:59] <alh> M::M::A has some weird issues we haven't tracked down and solved yet (occasionally we need to kick it) but for the most part it does its thing
[22:36:10] <ttkp> is that a problem if the two differently-permissioned P::T::S instances are using different backing stores?
[22:36:34] <alh> No, not at all
[22:36:39] <ttkp> cool
[22:38:31] <ttkp> I'll email Marc, paste your testimonial into my ticket, and go spelunking .. thanks again
[22:38:36] <alh> o/
[22:38:50] <Botje> seems like P::T::S is just a bunch of files in a directory; seems hard to have something fail there.
[22:39:52] <LeoNerd> Make sure to check for fcntl mandatory locking
[22:40:03] <ttkp> you read my mind, LeoNerd
[22:40:05] *** Quits: krismatrix (~krismatri@2601:283:8103:1920:e6ce:3b4a:7ccb:7b0d) (Quit: Leaving)
[22:40:08] <LeoNerd> If it has some, it has a chance of deadlocking. If it doesn't, it has a chance of data corruption. ;)
[22:40:13] <LeoNerd> Damned if you do, damned if you don't
[22:40:25] <alh> Data is written by Hash::SharedHash IIRC (zefram)
[22:40:37] <Botje> the perldoc page for Hash::SharedMem reads like the author has done their homework
[22:40:41] <alh> Hash::SharedMem*
[22:41:00] <Botje> first section under "DESCRIPTION" is "Consistency and synchronisation", so that instills a good amount of trust
[22:41:19] <alh> Zefram is responsible for a lot of insanity in the perl core
[22:42:09] <ttkp> *nod* I used Hash::SharedMem to copy metrics from Net::Prometheus' run-time Collector into P::T::S's shared store .. it seemed to jfw nicely, but $boss1 wants me to dig around before we use it in production
[22:42:10] <Grinnz> the good insanity, mostly
[22:43:36] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[22:43:37] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[22:44:11] *** Joins: mcint (mcint@user/mcint)
[22:45:21] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[22:50:05] *** Quits: deadmarshal (~deadmarsh@95.38.118.201) (Ping timeout: 256 seconds)
[22:57:01] *** Joins: pj (~pj@ghettoforge/pj)
[23:03:33] <leont> I generally hate his interface design, but his code is solid
[23:04:02] <Botje> that's why we have ::Simple modules!
[23:04:25] *** Quits: Astrased (~Astrased@82-168-108-38.fixed.kpn.net) (Quit: Astrased)
[23:07:00] <ology> Surgery::Brain::Simple
[23:10:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:15:53] <mst> leont: the interfaces are often -way- more restrictive than I would prefer, damnit this is perl, if I actively -ask- for more rope I want to be given as much as I want
[23:16:44] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[23:17:26] <El_Che> Do you feel the itch for an ::Extra::Rope namespace?
[23:17:26] <leont> They also tend to be weird. Like Hash::SharedMem would make way more sense as an object, but he tends to shun OO even when it makes sense
[23:17:59] <Grinnz> yeah if you want a good argument against "functional is always better than OO" just show people his modules
[23:18:17] <leont> (and then in Authen::Passphrase he uses OO in a way that doesn't)
[23:18:41] <Grinnz> my favorite is https://metacpan.org/pod/XML::Easy which is insanely not easy
[23:18:41] <Paperbot> Link title(s): [ XML::Easy - XML processing with a clean interface - metacpan.org ]
[23:19:02] <leont> I had never realized that was his, but yeah totally
[23:19:06] *** Joins: proller (~p@2a02:6b8:b081:a415::1:10)
[23:19:07] <aquanight> 11:56:28/7F5FC < LeoNerd> if(!defined wantarray)  or  if(wantarray)  are easy enough tests, but there isn't a short neat way to write the defined-but-false version ## on the one hand I'm curious when you'd want to know specifically for specifically scalar context
[23:19:20] <aquanight> on the other: if (!(wantarray//1))
[23:19:31] <mst> leont: and he hardcodes the available algorithms in a file scoped 'my' variable and that's why I have code in production that uses PadWalker's closed_over() to extend it *sulk*
[23:21:23] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[23:21:41] *** Joins: kaitlyn03 (~kaitlyn@user/kaitlyn)
[23:22:25] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[23:22:57] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[23:23:26] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[23:23:55] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[23:23:55] *** ChanServ sets mode: +v perlbot
[23:24:56] *** Joins: perldoc (~perldoc@24.88.49.194)
[23:25:29] <aquanight> mst: imagine if you had to padwalk a global-symbol sub to find a *lexical* protosub to then padwalk that to find the 'my' variable.
[23:26:05] <aquanight> (why do we even call them protosubs? Is there something special about them compared to normal subs?)
[23:27:04] <simcop2387> alright, finally back up.  sorry that took so long, got distracted by $WORK and an initramfs issue (apparently i don't have a new enough toolchain that'll work correctly if i tell the kernel to compress the modules, time to go to the next debian release i guess)
[23:27:38] <simcop2387> i'll start that migration later this week after i have a chance to verify backups, take a VM snapshot, and then work my way through it.
[23:28:26] <mst> aquanight: imagine?
[23:32:57] <aquanight> mst: ... you've had to do that, haven't you.
[23:35:25] <mst> the trick is to use B.pm rather than padwalker so then you can walk the optree to find the right one
[23:37:20] <aquanight> does B.pm have something to get to a specific COP op based on file/line? E.g. you could look at the .pm and see the awfulness in code form and then aim B.pm at the awfulness that way?
[23:37:38] <aquanight> or are you left with opwalking
[23:39:39] <mst> https://perldoc.perl.org/B#Functions-Returning-B::OP-objects-or-for-walking-op-trees and the various CPAN modules that build nicer interfaces atop that will get you where you're going, albeit painfully
[23:39:39] <Paperbot> Link title(s): [ B - The Perl Compiler Backend - Perldoc Browser ]
[23:40:05] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[23:40:37] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[23:41:16] <mst> but generally at the point where file and line numbers would be preferable I shout developers developers developers, throw a chair at somebody, and take a different approach
[23:47:04] * GumbyPAN CPAN Upload: Amazon-API-1.1.8 by BIGFOOT https://metacpan.org/release/BIGFOOT/Amazon-API-1.1.8
[23:47:04] * GumbyPAN CPAN Upload: Console-ProgressBar-1.01 by OAUVERLOT https://metacpan.org/release/OAUVERLOT/Console-ProgressBar-1.01
[23:48:55] *** Quits: finsternis (~X@23.226.237.192) (Quit: Changing server)
[23:49:19] *** Joins: finsternis (~X@23.226.237.192)
[23:53:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:55:45] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:56:10] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[23:57:39] *** Quits: XV8 (~XV8@2601:5cb:c001:50:d0cb:b834:298c:b12d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:59:08] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
