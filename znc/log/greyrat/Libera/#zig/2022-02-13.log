[00:12:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:17:46] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:18:35] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:20:31] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[00:28:06] *** Joins: ravella (~ravella@user/ryanavella)
[00:33:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[00:44:01] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:47:20] <Earnestly> Ada got this right, case doesn't matter
[00:49:25] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[00:50:52] <jemius> Personally, I prefer if the language lets me be as free as possible. I understand Golang's perspective, though
[00:52:16] *** Joins: cabal704 (~cabal704@user/cabal704)
[00:53:20] <marler8997_> motiejus did you see Andrew's DOD talk in handmade seattle?
[00:54:14] <marler8997_> zig-cache/o/381cb091fd25ec81b5b2b629a42fb3b6
[00:54:17] <marler8997_> woops
[00:54:25] <marler8997_> https://vimeo.com/649009599
[00:57:03] *** Quits: cabal704 (~cabal704@user/cabal704) (Client Quit)
[00:57:43] *** Joins: cabal704 (~cabal704@user/cabal704)
[01:19:18] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[01:46:06] *** Joins: keyehzh_ (~keyehzh@user/keyehzh)
[01:46:11] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Read error: Connection reset by peer)
[01:46:33] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e)
[01:55:15] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:56:27] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e)
[02:15:53] *** Joins: todo75 (~todo75@user/todo75)
[02:17:23] *** Quits: todo75 (~todo75@user/todo75) (Client Quit)
[02:20:42] *** Quits: jemius (~imperator@200116b82dc18400cf44e2fbedcfde7e.dip.versatel-1u1.de) (Quit: Leaving)
[02:23:25] *** Quits: ur5us_ (~ur5us@2406:e002:6dd8:5f01:a4b3:dc81:c8c:8966) (Ping timeout: 240 seconds)
[02:39:43] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e) (Ping timeout: 250 seconds)
[02:40:50] *** Joins: rgrinberg (~textual@187.194.14.9)
[02:56:44] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[02:57:48] *** Joins: rgrinberg (~textual@187.194.14.9)
[03:02:38] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[03:04:21] *** Joins: rgrinberg (~textual@187.194.14.9)
[03:07:36] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[03:07:56] *** Joins: cabal704 (~cabal704@user/cabal704)
[03:11:13] *** Quits: cabal704 (~cabal704@user/cabal704) (Client Quit)
[03:11:35] *** Joins: cabal704 (~cabal704@user/cabal704)
[03:16:33] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[03:17:37] *** Joins: cabal704 (~cabal704@user/cabal704)
[03:39:56] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[03:40:32] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f5fc:59c9:ba9b:990)
[03:45:38] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[03:46:00] *** Joins: cabal704 (~cabal704@user/cabal704)
[03:48:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f5fc:59c9:ba9b:990) (Ping timeout: 240 seconds)
[03:51:24] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[03:52:54] *** Joins: rgrinberg (~textual@187.194.14.9)
[03:55:40] *** Joins: cabal704 (~cabal704@user/cabal704)
[04:01:05] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[04:01:38] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:18bd:1c0d:516:57be)
[04:06:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:18bd:1c0d:516:57be) (Ping timeout: 250 seconds)
[04:07:49] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:89b6:75bb:9400:4d95)
[04:07:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:33:09] *** Quits: dmh (~dmh@pclmulqdq.dev) (Changing host)
[04:33:09] *** Joins: dmh (~dmh@user/dmh)
[04:34:46] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[04:36:27] *** Joins: cabal704 (~cabal704@user/cabal704)
[04:44:56] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[04:46:07] *** Joins: cabal704 (~cabal704@user/cabal704)
[04:55:16] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:00:47] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[05:19:12] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:89b6:75bb:9400:4d95) (Ping timeout: 250 seconds)
[05:20:40] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:9818:747d:186f:47b5)
[05:27:46] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (Remote host closed the connection)
[05:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:9818:747d:186f:47b5) (Ping timeout: 256 seconds)
[05:36:24] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f0a2:d1c3:4490:2515)
[05:42:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f0a2:d1c3:4490:2515) (Ping timeout: 240 seconds)
[05:54:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[05:55:23] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439)
[06:05:05] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[06:06:58] *** Joins: cabal704 (~cabal704@user/cabal704)
[06:08:14] *** Joins: jamii (~jamii@2604:3d08:957b:cc00:e08c:c5cf:c30d:fe63)
[06:13:23] *** Quits: jamii (~jamii@2604:3d08:957b:cc00:e08c:c5cf:c30d:fe63) (Ping timeout: 256 seconds)
[06:13:48] *** Joins: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com)
[06:15:25] *** Quits: Tekk (~tekk@206.217.205.105) (Ping timeout: 256 seconds)
[06:16:20] *** Joins: Tekk__ (~tekk@89.46.62.243)
[06:19:03] *** Quits: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com) (Ping timeout: 256 seconds)
[06:20:45] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:21:57] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:8192:df18:486a:6454) (Quit: Leaving)
[06:29:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:46:57] *** Joins: jamii (~jamii@2604:3d08:957b:cc00:caab:3d65:dcd5:70af)
[06:53:38] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[06:54:47] <jamii> Is there any documentation about what assumptions the compiler can make about reads from const pointers/slices? Eg in https://zig.godbolt.org/z/baf5f5aYj the x[0] doesn't get hoisted, but if I replace foo with an extern it does get hoisted and the whole thing constant folds, even though the call to foo() might still be able to reach an alias of x -
[06:54:48] <jamii> https://zig.godbolt.org/z/hKThvvq8b.
[06:57:15] <jamii> Unrelated - I ran into some segfaults I don't understand - https://gist.github.com/jamii/3baa0f5cb2ab7058c1c5ab7020c04731. The first three seem like they might have something to do with RLS and the last seems like it might be a product of multiple implicit casts, but I don't know for sure in either case what I need to be careful to avoid doing.
[07:01:20] <jamii> testD seems like it might be a dupe of https://github.com/ziglang/zig/issues/9284
[07:03:01] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439)
[07:07:58] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab)
[07:16:01] <jamii> testB is weird - looks like the correct value is passed on the stack to print but at some point after that the wrong value is being passed - https://gist.github.com/jamii/3baa0f5cb2ab7058c1c5ab7020c04731#file-testb
[07:23:57] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Remote host closed the connection)
[07:24:35] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[07:25:21] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[07:28:18] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Remote host closed the connection)
[07:30:04] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[07:30:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439) (Ping timeout: 240 seconds)
[07:38:04] *** Quits: factor (~factor@c-73-68-120-166.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[07:44:50] <jamii> Kinda feels like it might be related to RLS, but I filed an issue just in case - https://github.com/ziglang/zig/issues/9284
[07:47:08] *** Quits: jamii (~jamii@2604:3d08:957b:cc00:caab:3d65:dcd5:70af) (Quit: Client closed)
[07:50:58] *** Quits: keyehzh_ (~keyehzh@user/keyehzh) (Remote host closed the connection)
[07:56:50] *** Joins: rgrinberg (~textual@187.194.14.9)
[08:02:36] *** Joins: Guest30 (~Guest30@c-24-143-113-60.customer.broadstripe.net)
[08:04:44] *** Joins: jamii (~jamii@2604:3d08:957b:cc00:caab:3d65:dcd5:70af)
[08:08:03] *** Joins: jamii_ (b58b912050@2604:bf00:561:2000::3c3)
[08:08:34] *** Quits: jamii (~jamii@2604:3d08:957b:cc00:caab:3d65:dcd5:70af) (Client Quit)
[08:10:09] <andrewrk> jamii_, direct answer to your question: no, this part of the spec has not been written down yet
[08:11:41] <andrewrk> why do you think that if you replace foo() with an extern, that it is still possible for it to reach an alias of x?
[08:13:29] <andrewrk> in your code, global_x is private to the zig compilation unit and is only ever captured in the call to `bar`. it is not possible for any external function to mutate it
[08:13:47] <andrewrk> it seems pretty easy for the optimizer to prove this
[08:15:15] <andrewrk> jamii_, check out this example, a slight modification to yours: https://zig.godbolt.org/z/645xx46sx
[08:19:48] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:20:35] <plumeus> I've found a particular C++ code that runs fine on debug and complains about libc++abi on non-debug builds. So close to making a small reproducible example. ugh.
[08:20:57] <plumeus> My lack of C++ expertise hurts. That said, I don't really care to learn more about it.
[08:26:35] *** Quits: Guest30 (~Guest30@c-24-143-113-60.customer.broadstripe.net) (Quit: Ping timeout (120 seconds))
[08:29:33] *** Joins: notzmv (~zmv@user/notzmv)
[08:33:58] *** Joins: rgrinberg (~textual@187.194.14.9)
[08:36:41] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:37:41] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a54b:13e2:82b5:a352)
[08:40:56] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab)
[08:42:12] *** Quits: cr1901_ (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab) (Remote host closed the connection)
[08:42:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a54b:13e2:82b5:a352) (Ping timeout: 240 seconds)
[08:42:40] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab) (Quit: Leaving)
[08:42:55] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab)
[08:43:09] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab) (Remote host closed the connection)
[08:46:40] *** Joins: Guest30 (~Guest30@c-24-143-113-60.customer.broadstripe.net)
[08:47:46] *** Quits: Guest30 (~Guest30@c-24-143-113-60.customer.broadstripe.net) (Client Quit)
[08:50:20] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:8d02:94d4:341b:3a0c)
[08:59:31] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f8ef:a9df:2427:39ab)
[09:38:37] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 240 seconds)
[09:50:11] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:8d02:94d4:341b:3a0c) (Ping timeout: 256 seconds)
[09:59:36] *** Joins: phaleth (~user@user/phaleth)
[10:20:58] *** Quits: Arnavion (arnavion@user/arnavion) (Quit: Arnavion)
[10:21:27] <motiejus> marler8997_: i have of course, that's what the file format is based upon
[10:21:53] <marler8997_> motiejus ah very good, carry on then :)
[10:38:12] *** Joins: Arnavion (arnavion@user/arnavion)
[10:46:41] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:09:06] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Quit: Leaving)
[11:09:14] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:38:12] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:24e8:c3d4:a32e:b10)
[11:58:23] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:24e8:c3d4:a32e:b10) (Remote host closed the connection)
[12:03:19] <motiejus> related: as I am inventing a binary on-disk storage format, I need to decide on endianness of integers. E.g. sqlite stores all ints in big-endian, whereas glibc-abi-tool stores in little-endian: https://github.com/ziglang/glibc-abi-tool/#binary-encoding-format ; I am currently leaning towards big-endian, as that's easier to inspect with xxd. Although I am pretty sure the code will be executed on little-endian only. Any reasons to (re-)consider to
[12:03:19] <motiejus> use one or another?
[12:24:38] <semarie> motiejus: it is for what kind of usage that it would be intented for little-endian only ? there is still big-endian architectures which are common (for example: mips64 powerpc64 sparc64)
[12:25:28] <motiejus> 99% le. It's a glibc nss module
[12:25:41] <motiejus> In my case I'll use it on arm64 and amd64
[12:26:15] <motiejus> But FOSS, so anyone can use it anywhere
[12:26:52] <plumeus> ppc64 is LE or bi-endian since POWER9, was it?
[12:27:26] <semarie> plumeus: possibly. I simply take the list from openbsd (powerpc64 is BE on openbsd)
[12:27:26] <plumeus> oh, ppc64le is since 8
[12:27:56] <semarie> motiejus: if the file isn't intented to be moved between machines, you could simply use 'native' endianess too :)
[12:30:33] *** Joins: jemius (~imperator@200116b82d282400e97ea80bada9ce89.dip.versatel-1u1.de)
[12:30:57] <plumeus> https://en.wikipedia.org/wiki/Endianness#Bi-endianness interesting
[12:33:25] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[12:34:11] <motiejus> Gold idea. I can just add a guard `1234` and check whether the runtime endianess matches the one in the file
[12:34:16] <motiejus> I.e. at the file header somewhere
[12:37:40] <plumeus> That's how Multiboot2 checks for endian-ness, last I checked
[12:38:16] <plumeus> https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Header-magic-fields
[12:53:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[12:55:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:56:46] <motiejus> I'll add 0x01020304 to the file header, read it as u32, and see if the result is as expected, and informatively fail if not. I can afford 4 bytes. Thanks all for the input!
[13:11:39] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:28:46] *** Quits: jemius (~imperator@200116b82d282400e97ea80bada9ce89.dip.versatel-1u1.de) (Quit: Leaving)
[13:37:50] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Quit: WeeChat 3.4)
[13:38:33] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[13:38:38] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:38:48] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[13:44:31] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[14:20:22] *** Joins: haliucinas (~haliucina@5.20.153.21)
[14:47:50] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea)
[15:06:56] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[15:08:24] *** Joins: duck2 (~duck2@146.185.156.161)
[15:18:14] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Ping timeout: 260 seconds)
[15:27:58] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[15:45:34] *** Joins: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de)
[15:53:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:53:48] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:03:31] *** Joins: arkurious (~arkurious@user/arkurious)
[16:20:20] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea) (Remote host closed the connection)
[16:20:34] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea)
[16:22:37] *** Joins: xackus (~xackus@185.15.0.3)
[16:33:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[16:37:57] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4)
[16:39:04] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[16:54:23] *** Joins: cabal704 (~cabal704@user/cabal704)
[17:21:43] *** Quits: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de) (Quit: Nettalk6 - www.ntalk.de)
[17:33:40] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[17:33:40] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[17:33:40] *** Joins: tane (~tane@user/tane)
[17:35:57] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[17:43:43] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Quit: WeeChat 3.4)
[17:44:21] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[17:47:55] *** Joins: xackus (~xackus@185.15.0.3)
[17:57:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:15:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[18:16:35] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[18:41:22] *** Joins: notapenguin (~ryu@187.3.254.107)
[19:00:48] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[19:06:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:07:31] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea) (Remote host closed the connection)
[19:20:15] *** Joins: frmdstryr (~jrm@172.58.203.249)
[19:31:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[20:02:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[20:04:24] *** Joins: [R] (~rs@genoce.org)
[20:22:40] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[20:29:16] *** Joins: Myth (~pi@173.233.125.203)
[20:33:06] *** Quits: cabal704 (~cabal704@user/cabal704) (Ping timeout: 250 seconds)
[20:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:40:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[20:43:08] *** Joins: cabal704 (~cabal704@user/cabal704)
[20:52:02] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f931:4dd:828a:cfc2)
[21:06:04] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:09:26] *** Joins: factor (~factor@c-73-68-120-166.hsd1.ma.comcast.net)
[21:09:59] *** Joins: Guest78 (~Guest78@apoitiers-657-1-52-53.w86-199.abo.wanadoo.fr)
[21:10:48] *** Quits: Guest78 (~Guest78@apoitiers-657-1-52-53.w86-199.abo.wanadoo.fr) (Client Quit)
[21:12:27] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f931:4dd:828a:cfc2) (Ping timeout: 256 seconds)
[21:13:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:15:02] *** Joins: rgrinberg (~textual@187.194.14.9)
[21:19:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:23:18] <motiejus> Correction: 0x1234
[21:28:41] *** Joins: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de)
[21:37:01] *** Joins: jemius (~imperator@200116b82d282400e97ea80bada9ce89.dip.versatel-1u1.de)
[21:47:07] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[21:48:30] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:9dd2:64b9:16ba:553d)
[22:03:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:04:01] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:9dd2:64b9:16ba:553d) (Ping timeout: 256 seconds)
[22:18:54] *** Parts: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de) ()
[22:19:57] *** Quits: frmdstryr (~jrm@172.58.203.249) (Ping timeout: 240 seconds)
[22:38:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:48:41] <andrewrk> we use semarie's idea for ZIR caching which allows serialization/deserialiaztion to be as simple as 1 readv/writev syscall
[22:49:01] <andrewrk> it works great as long as nobody copies the zig cache folder from a big endian to little endian system and expects it to work
[22:49:22] <andrewrk> your idea of a guard integer is a nice idea too
[22:58:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:59:25] <motiejus> yeah, I know about writev/readv, those are very powerful. In my case only reading must be fast, for which I am planning to use mmap. Data, except for the header, requires very minimal interpretation (and most of the things can then be copied with memcpy)
[23:00:41] <andrewrk> a big thing to watch out for with mmap is that you have to handle errors as signals (SIGBUS I believe) and it's tricky to see where errors can happen because they happen on memory loads
[23:06:01] <motiejus> Thanks for the heads up. A bit of general advice: is it reasonable/normal to have signal handlers in a library? (I am writing something that will be called from user's code via glibc)
[23:09:00] <motiejus> Man page suggests very few error cases, which seems like can be avoided with care
[23:09:13] <andrewrk> generally, no, it is unreasonable to have signal handlers in a library. I personally would never use a library that tried to install a global signal handler
[23:09:29] <motiejus> Inaccessible device is an interesting one though. Will read more about mmap
[23:09:32] <andrewrk> the problem is they are global state, conflicting with any other signal handlers, and extremely tricky to get right
[23:10:50] <motiejus> Yeah, will not do it. The thing I am trying to replace already uses mmap for reading though - boltdb
[23:11:13] <motiejus> Works well, mmap, no signal handlers
[23:13:58] <andrewrk> yeah you can mostly get away with it because I/O errors tend to be rare
[23:14:37] <marler8997_> looks like sigbus only occurs if you try to access memory in a page that goes past the file, so if your library doesn't do that then you should be good
[23:15:05] <andrewrk> marler8997_, look at the man page for `read`. pretty much all those possible error codes can happen when you read from a mmapped virtual address
[23:16:19] <marler8997_> oh, so if the OS has an error reading the file into memory, it uses SIGBUS to report it, nevermind then
[23:17:25] <marler8997_> I don't see where in the man pages for mmap it says that.  Am I missing it or is it just missing from the docs?
[23:21:30] <marler8997_> Do you remember if that was documented anywhere or did you just discover it from debugging (that must have been fun if this is the case)
[23:22:58] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[23:24:28] <andrewrk> marler8997_, I think it's just knowledge spread from reading the kernel source code
[23:24:34] *** Joins: cabal704 (~cabal704@user/cabal704)
[23:24:52] <andrewrk> (which is what man pages are in the first place, just happen to be written down methodically by someone who took the time to do it
[23:24:54] <marler8997_> damn, that's a pretty important thing they forgot to document
[23:24:57] <andrewrk> yeah
[23:33:13] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[23:34:41] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[23:34:50] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[23:36:02] *** Quits: Tekk__ (~tekk@89.46.62.243) (Remote host closed the connection)
[23:36:41] *** Joins: Tekk (~tekk@89.46.62.243)
[23:40:11] <freshcoffee> man mmap: "An implementation may generate SIGBUS signals when a reference would cause an error in the mapped object, such as out-of-space condition."
[23:44:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:51:45] *** Quits: cabal704 (~cabal704@user/cabal704) (Ping timeout: 250 seconds)
