[00:01:07] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[00:02:50] *** Quits: theproffesor (~theproffe@user/theproffesor) (Remote host closed the connection)
[00:02:56] *** Parts: python476 (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[00:03:26] *** Joins: alx741 (~alx741@181.199.42.143)
[00:04:43] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:07:16] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:07:55] *** Joins: alx741 (~alx741@157.100.197.240)
[00:08:22] <ehammarstrom> Does anyone know of a good visualisation of function cardinality? |a -> b| = |b| ^ |a|
[00:10:28] *** Joins: bahamas (~lucian@84.232.140.52)
[00:10:38] <slack1256> You mean diagrams? There are some blog post that I can search if that is what you want.
[00:11:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:11:40] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:13:06] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[00:13:11] <ehammarstrom> slack1256: Yes. I would appreciate that.
[00:13:20] <ehammarstrom> My google-fu is not getting me anywhere
[00:15:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[00:15:38] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 272 seconds)
[00:16:18] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:16:33] <slack1256> ehammarstrom: https://www.youtube.com/watch?v=YScIPA8RbVE That is the "pretties" exposition on the subject in terms of style. You can get it summaried on the blogpost linked.
[00:16:52] <slack1256> But yeah, the function cardinality is the hardest one and you already got it.
[00:18:36] <slack1256> s_pretties_prettiest_
[00:20:42] <ehammarstrom> slack1256: Looks like a great talk. What blogpost are you referring to?
[00:22:04] *** Joins: slac23112 (~slack1256@45.4.2.52)
[00:22:15] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:23:08] <slac23112> ehammarstrom: Oh, I swear I saw it on the video description. https://gist.github.com/gregberns/5e9da0c95a9a8d2b6338afe69310b945 
[00:23:47] <slac23112> The author had it formatted differently on various sites, but the general idea is the same and it is well exposed on that gist.
[00:24:13] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Read error: Connection reset by peer)
[00:25:00] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[00:25:03] <[exa]> ehammarstrom: a good intuition is to use `b` as coordinates in an |a|-dimensional space and just draw it as a flimsy 3D-ish vector space. It kinda breaks if the magnitudes get real, but at that point most people will see it.
[00:25:13] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 250 seconds)
[00:25:54] *** Joins: bendo (~bendo@ip5f5bebbb.dynamic.kabel-deutschland.de)
[00:26:15] <ehammarstrom> So I guess my question is, what happens when |a| < |b|? When enumerating functions which would map elements of a to elements of b I feel like I get functions that are not total (?)
[00:26:15] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[00:26:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[00:26:36] <ehammarstrom> I am not sure total is the correct wording
[00:27:08] *** Joins: pavonia (~user@user/siracusa)
[00:27:25] <ehammarstrom> E.g. `Bool -> Quad` where `data Quad = A | B | C | D`
[00:27:36] <[exa]> if the set sizes differ, the function may become surjective or bijective, totality is a different problem
[00:27:41] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[00:27:50] <[exa]> s/bijective/injective/ whoops
[00:29:23] *** Joins: alx741 (~alx741@181.199.42.143)
[00:29:39] <ehammarstrom> [exa]: I see, it seem that |a -> b| becomes injective if |a| < |b|. But thanks for pointing the terms out, I'll have to do some more digging
[00:30:14] *** Joins: alp (~alp@user/alp)
[00:31:58] <[exa]> otoh I'm totally unaware of a cardinality theory (where you usually only consider well-behaved proper function that are total) that would work with partial functions, other than perhaps trivially adding the bottom as a part of `b`
[00:32:35] *** Quits: benin (~benin@223.182.225.201) (Read error: Connection reset by peer)
[00:32:59] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:37:03] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[00:38:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[00:38:19] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[00:38:34] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[00:38:39] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Quit: bye)
[00:39:25] *** Joins: acidjnk (~acidjnk@p5487dbd8.dip0.t-ipconnect.de)
[00:40:23] <dolio> ehammarstrom: Functions a -> b with |a| < |b| are not necessarily injective.
[00:40:44] <dolio> If |a| > |b| then they are necessarily not injective, though.
[00:43:03] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:46:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:49:39] *** Joins: alx741 (~alx741@157.100.197.240)
[00:50:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:52:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:54:54] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[00:55:25] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:55:30] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[00:59:46] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[01:04:34] *** Joins: komikat (~komikat@183.82.154.239)
[01:07:01] *** Quits: xff0x (~xff0x@2001:1a81:53c8:8500:d186:ea73:d14c:679b) (Ping timeout: 245 seconds)
[01:08:14] *** Joins: xff0x (~xff0x@2001:1a81:53c8:8500:acc6:628c:c348:430)
[01:08:45] *** Joins: alx741 (~alx741@157.100.197.240)
[01:08:48] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[01:09:24] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 256 seconds)
[01:11:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:14:07] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:17:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:19:43] <dibblego> @src (>>=) []
[01:19:44] <lambdabot> Source not found. You untyped fool!
[01:19:47] <dibblego> @src [] (>>=)
[01:19:48] <lambdabot> xs >>= f = concatMap f xs
[01:19:50] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:21:04] *** Joins: kenran (~kenran@200116b82bed0b0071c8f52489bfb401.dip.versatel-1u1.de)
[01:21:31] <dibblego> @src concatMap
[01:21:32] <lambdabot> concatMap f = foldr ((++) . f) []
[01:24:10] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:27:52] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fb55:f4b:9349:d06d) (Ping timeout: 250 seconds)
[01:29:12] *** Quits: kenran (~kenran@200116b82bed0b0071c8f52489bfb401.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:29:17] *** Joins: alx741 (~alx741@157.100.197.240)
[01:30:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[01:31:04] *** slac23112 is now known as slack1256
[01:31:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:33:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:34:09] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[01:34:56] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4a7:dec3:a543:4b87) (Ping timeout: 245 seconds)
[01:35:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:36:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Remote host closed the connection)
[01:36:32] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[01:37:16] *** Joins: once_upon_a_pota (~once_upon@117.55.252.24)
[01:43:02] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:43:48] <sm> nice, joeyh's recent arduino/copilot talk got published: https://www.youtube.com/watch?v=l-luyVRgWVU
[01:45:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:45:50] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:45:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[01:47:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:50:02] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:50:24] *** Joins: alx741 (~alx741@181.199.42.143)
[01:52:45] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[01:54:40] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[01:58:08] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:58:20] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:03:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[02:05:36] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:05:50] *** Joins: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net)
[02:05:57] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:06:38] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:09:44] *** Joins: alx741 (~alx741@181.199.42.143)
[02:10:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[02:11:44] *** Quits: once_upon_a_pota (~once_upon@117.55.252.24) (Quit: Client closed)
[02:12:26] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[02:13:59] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:21:33] *** Joins: deadmarshal (~deadmarsh@95.38.230.238)
[02:26:11] *** Quits: deadmarshal (~deadmarsh@95.38.230.238) (Ping timeout: 256 seconds)
[02:28:37] *** Quits: emf_ (~emf@2620:10d:c090:400::5:e9f1) (Ping timeout: 240 seconds)
[02:29:05] *** Joins: alx741 (~alx741@157.100.197.240)
[02:30:35] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[02:31:01] *** Joins: emf (~emf@2620:10d:c090:400::5:3ef2)
[02:31:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[02:31:28] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[02:35:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[02:36:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:42:32] <jackdk> sm: this is very interesting, thanks for the link
[02:43:24] <sm> np
[02:43:51] <monochrom> ski: Last time you used the names "stage" and "costage" for the maps between Hom(F x, y) and Hom(x, G y) when F -| G. Do other category theorists use that name too? What is the etymology of those names? Or what inspired them?
[02:47:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:50:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[02:52:01] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[02:53:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com)
[02:53:43] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[02:54:33] *** Joins: alx741 (~alx741@181.199.42.143)
[02:55:00] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:55:16] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:57:50] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:01:48] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:02:06] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:02:13] <ski> monochrom : i more or less made them up on the spot. for `stage' going from `G . F >---> H' to `G >---> F -> H', i was first thinking of `curry', but then thought that could be confusing. but it in some sense separates the stages of dealing with the outer `G' structure, and then the inner `F' structure. and `costage' (rather than say `unstage', which would suggest inverse; or perhaps rather than something 
[03:02:19] <ski> else), for duality (there might be a nicer name, i didn't think of one)
[03:03:23] <monochrom> Ah thanks.
[03:05:29] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[03:05:37] *** Quits: jrm (~jrm@156.34.173.250) (Ping timeout: 240 seconds)
[03:06:11] <ski> (i think i've seen some name somewhere for going in one or other direction, in the Hom-set natural isomorphism formulation of adjunctions, but i can't quite recall. maybe "transpose", or something)
[03:08:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[03:08:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[03:08:55] <ski> .. i've been trying to think a little, now and then, about a language where one would have terms/expressions of a type that is a functor (so, `F', rather than `F T'). the idea is that in e.g. `[[Integer]]', you'd give one name to the outer list struction, another to the inner, and a third to the `Integer's
[03:09:27] <monochrom> In the case of FreeMonoid -| Forgetful, Monoid(FreeMonoid x, y) becomes foldMap in Haskell, and I think it inspires the "free" package for free monads to say "foldFree" for Monad(Free m, n).  So I am inspired to say "fold" in general.  For the reverse direction Set(x, Forgetful y), I am thinking "core" because it feels like some kind of kernal function of the fold.
[03:09:30] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[03:09:52] <ski> using such notation e.g. emphasizes seeing monads as monoids. also seems to be helpful for algebras over a monad, seeing them as a monoid action
[03:09:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:10:15] <monochrom> I have seen "transpose" BTW, yeah.
[03:10:46] <ski> (i think i've seen "transpose" used for both `curry f' and `uncurry g', too, btw)
[03:11:37] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:12:15] <ski> @type Control.Monad.Free.foldFree
[03:12:16] <lambdabot> Monad m => (forall x. f x -> m x) -> Control.Monad.Free.Free f a -> m a
[03:12:21] <ski> s/struction/structure/
[03:13:02] <monochrom> Emily Riehl also uses sharps and flats, but that's a bit traumatising for me, flash back to the old days when I struggled to read Patrick Cousot's abstract interpretation papers. :)
[03:13:36] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:13:45] <ski> hm, i think i've seen such notation in places, too. (sometimes with stars, or exclamation marks)
[03:13:48] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:14:49] *** Joins: alx741 (~alx741@157.100.197.240)
[03:15:17] *** Quits: np (~nerdypepp@user/nerdypepper) (Quit: bye)
[03:16:25] <monochrom> Oh oops, typo. Set(x, ForgetFul y)->Monoid(FreeMonoid x, y) becomes foldMap; Functor(f, Forgetful m)->Monad(Free f, m) is foldFree.
[03:17:20] <ski> (btw, in case it wasn't too clear, my `costage' above wasn't the inverse of `stage', but rather the `Lan' counterpart version of the one for `Ran')
[03:17:40] <monochrom> so Monoid(FreeMonoid x, y)->Set(x, Forgetful y) feels like extracting the "core" of a monoid homomorphism.
[03:18:01] <monochrom> Ah OK, it was specific to Kan extensions.
[03:18:33] <ski> yes, that was the situation i was trying to give a reasonable name for, there
[03:19:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:20:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:22:17] <ski> looking at <https://hackage.haskell.org/package/free-5.1.7/docs/Control-Monad-Free.html>, to see what this `core' would be there
[03:22:37] <ski> hm, i guess it's (when applied to `id') `lift' in `MonadTrans'
[03:23:04] <monochrom> I think no one cares, but it's liftF id.
[03:23:31] <monochrom> If you squint, liftF is analogous to singleton :: a -> FreeMonoid a, e.g., \x -> [x].
[03:23:55] <ski> ah .. i guess. (i ignored looking at `MonadFree')
[03:24:27] <monochrom> I had a recent revelation that singleton and core are expressible in each other.
[03:24:27] <ski> .. yes
[03:24:49] <ski> ("Oh oops, typo. .." -- yea, i figured)
[03:25:22] <ski> why `core' ? ("kernal function" ?)
[03:26:13] * ski . o O ( <https://en.wikipedia.org/wiki/KERNAL> )
[03:27:23] *** Quits: acidjnk (~acidjnk@p5487dbd8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:27:46] <monochrom> If you give me a monoid homomorphism phi : FreeMonoid x -> y, it is equivalent to giving me a set function g : x -> Forgetful y and letting me extend that to phi. So g is some kind of kernal of phi.  And then I decided to say "core" because I want to have the same number of letters as "fold".
[03:30:39] <ski> `forall f. Functor f => forall a. f a -> Free f a' (Yoneda) `forall m f. (Monad m,Functor f) => (forall a. Free f a -> m a) -> (forall a. f a -> m a)'
[03:30:42] <ski> (i think)
[03:31:30] <monochrom> Ah, I'll have to think about that.
[03:31:42] <monochrom> Damn this Yoneda lemma popping up everywhere.
[03:32:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[03:32:24] <ski> hm .. yea, like going from a linear transformation (from a based/free vector space) to the column vectors of its associated matrix
[03:32:36] <monochrom> The equivalence between adjunctions defined by the transposes and adjunctions defined by the unit-counit pair is also Yoneda striking again.
[03:33:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[03:34:19] <monochrom> I guess basically every time I see "foo = bar id" I should recall "OK so Yoneda told you so" :)
[03:34:48] <ski> hm .. perhaps it is. (the natural isomorphism between Homs was always easiest to grasp for me. and the "universal morphisms" the hardest)
[03:35:54] *** Joins: burnside_ (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[03:36:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[03:36:42] <ski> `P e  <=>  let x = e in P x' is sortof a low-resolution (and undirected) version of Yoneda/Coyoneda
[03:37:21] *** Joins: alx741 (~alx741@157.100.197.240)
[03:37:51] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[03:40:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[03:40:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:44:19] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[03:44:39] *** Joins: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net)
[03:44:48] <ski> the upper closure `<>^+ P' ("possibly/occurred `P'") of `P' is defined by `<>^+ P y  <=>  exists x | x =< y. P x'. the upper interior `[]^+ P' ("necessarily/henceforth `P'") is defined by `[]^+ P x  <=>  forall y | x =< y. P y'
[03:46:09] <ski> if `P' is upper (closed) (aka monotone / increasing / order-preserving), it is equal to its (upper) closure and interior, and hence `P y  <=>  exists x | x =< y. P x' and `P y  <=>  forall y | x =< y. P y'. which are basically Coyoneda and Yoneda
[03:47:04] <ski> (er, should be `P x  <=>  ..x..' in the last one)
[03:53:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:53:30] *** Quits: forell (~forell@user/forell) (Ping timeout: 272 seconds)
[03:54:56] <ski> (expressing Kan extensions in terms of ends & coends (`forall' and `exists' on difunctors), you'd use powers and copowers, with the exponent/scalar being the relevant Hom. `(H <- F) b  =  Ran F H b  =  forall a. H a ^ (F a <---< b)' resp. `(H /| F) b  =  Lan F H b  =  exists a. H a * (a >---> F b)')
[03:56:25] <ski> @type concatMap :: (a -> [b]) -> ([a] -> [b])  -- is basically Yoneda on `concat :: [[a]] -> [b]', btw
[03:56:26] <lambdabot> (a -> [b]) -> [a] -> [b]
[03:56:29] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:57:23] *** Joins: alx741 (~alx741@157.100.197.240)
[03:58:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[04:02:26] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:02:51] <monochrom> join p = (p >>=) id  :(
[04:03:39] <ski> yep
[04:06:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:08:24] *** Quits: max22- (~maxime@2a01cb08833598005699785cb4ec772c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:12:20] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[04:12:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[04:13:34] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:15:00] *** Quits: akegalj (~akegalj@93-139-180-172.adsl.net.t-com.hr) (Ping timeout: 240 seconds)
[04:15:20] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[04:16:20] *** Joins: forell (~forell@user/forell)
[04:16:56] *** Joins: akegalj (~akegalj@78-3-44-141.adsl.net.t-com.hr)
[04:17:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:24:00] *** Joins: alx741 (~alx741@181.199.42.143)
[04:27:35] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[04:27:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:27:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:27:42] *** Joins: wroathe (~wroathe@user/wroathe)
[04:33:41] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Ping timeout: 245 seconds)
[04:34:34] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:35:43] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[04:40:47] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:46:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[04:46:54] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:50:27] *** Joins: vickyHaskell (~textual@49.37.173.82)
[04:51:18] *** Joins: alx741 (~alx741@157.100.197.240)
[04:51:55] *** Quits: vickyHaskell (~textual@49.37.173.82) (Client Quit)
[04:54:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:58:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:01:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:03:57] *** Joins: vickyHaskell (~textual@49.37.173.82)
[05:05:42] *** Quits: td_ (~td@94.134.91.238) (Ping timeout: 256 seconds)
[05:08:56] *** Joins: jrm (~jrm@156.34.173.250)
[05:10:02] *** Quits: dextaa (~DV@user/dextaa) (Quit: Ping timeout (120 seconds))
[05:10:26] *** Joins: dextaa (~DV@user/dextaa)
[05:10:38] *** Quits: ubert (~Thunderbi@p548c8d84.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:10:56] *** Joins: ubert (~Thunderbi@p200300ecdf3be97f8c4ccd199ca8265c.dip0.t-ipconnect.de)
[05:11:22] *** Joins: FragByte_ (~christian@user/fragbyte)
[05:11:30] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[05:11:51] *** FragByte_ is now known as FragByte
[05:12:55] *** Joins: alx741 (~alx741@157.100.197.240)
[05:14:12] *** Quits: jao (~jao@66.63.167.125) (Ping timeout: 256 seconds)
[05:16:06] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:17:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[05:17:40] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[05:17:40] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:18:48] *** Quits: slack1256 (~slack1256@45.4.2.52) (Remote host closed the connection)
[05:18:53] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[05:19:41] *** Quits: xff0x (~xff0x@2001:1a81:53c8:8500:acc6:628c:c348:430) (Ping timeout: 252 seconds)
[05:20:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:21:27] *** Joins: xff0x (~xff0x@2001:1a81:53df:600:42e4:eab6:10ab:71af)
[05:23:41] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[05:24:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:27:24] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79) (Ping timeout: 240 seconds)
[05:28:33] *** Quits: vickyHaskell (~textual@49.37.173.82) (Quit: Textual IRC Client: www.textualapp.com)
[05:34:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:34:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 245 seconds)
[05:36:57] *** Quits: akegalj (~akegalj@78-3-44-141.adsl.net.t-com.hr) (Quit: leaving)
[05:37:02] *** Joins: alx741 (~alx741@181.199.42.143)
[05:38:15] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[05:41:00] *** Joins: vysn (~vysn@user/vysn)
[05:41:15] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[05:41:15] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[05:41:15] *** Joins: tinwood (~tinwood@canonical/tinwood)
[05:44:37] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[05:58:08] *** Quits: burnside_ (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[05:59:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:01:24] *** Joins: alx741 (~alx741@157.100.197.240)
[06:02:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:02:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a068-f96d-6ad8-5504.res6.spectrum.com)
[06:07:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[06:10:28] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:10:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:16:04] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[06:16:29] *** Joins: ravella (~ravella@user/ryanavella)
[06:17:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:21:21] *** Joins: notzmv (~zmv@user/notzmv)
[06:25:05] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[06:25:19] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 256 seconds)
[06:25:55] *** Joins: ski (~ski@remote12.chalmers.se)
[06:27:47] *** Joins: alx741 (~alx741@157.100.197.240)
[06:29:20] *** Joins: xkuru (~xkuru@user/xkuru)
[06:30:46] *** Quits: xff0x (~xff0x@2001:1a81:53df:600:42e4:eab6:10ab:71af) (Ping timeout: 250 seconds)
[06:32:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:32:39] *** Joins: xff0x (~xff0x@2001:1a81:53e8:6f00:9716:e8e7:86fc:1482)
[06:38:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[06:40:04] *** Joins: ub (~Thunderbi@p548c8d84.dip0.t-ipconnect.de)
[06:41:11] *** Quits: ubert (~Thunderbi@p200300ecdf3be97f8c4ccd199ca8265c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:41:11] *** ub is now known as ubert
[06:44:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:44:02] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[06:46:24] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[06:49:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:50:32] *** Joins: alx741 (~alx741@181.199.42.143)
[06:51:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:51:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:51:18] *** Joins: wroathe (~wroathe@user/wroathe)
[06:52:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:53:52] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:55:32] *** Joins: mbuf (~Shakthi@122.174.33.79)
[06:56:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:56:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[07:10:48] *** Joins: alx741 (~alx741@157.100.197.240)
[07:10:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:10:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:10:58] *** Joins: wroathe (~wroathe@user/wroathe)
[07:15:16] *** Quits: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:15:56] *** Joins: deadmarshal (~deadmarsh@95.38.230.238)
[07:16:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:17:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:17:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:17:40] *** Joins: wroathe (~wroathe@user/wroathe)
[07:20:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:26:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:30:18] *** Joins: arjun (~arjun@103.57.87.142)
[07:30:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[07:34:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:35:00] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[07:36:05] *** Joins: drdo (~drdo@roach0.drdo.eu)
[07:38:20] *** Joins: alx741 (~alx741@181.199.42.143)
[07:42:17] *** phma_ is now known as phma
[07:43:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:43:00] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[07:45:14] *** Quits: arjun (~arjun@103.57.87.142) (Changing host)
[07:45:14] *** Joins: arjun (~arjun@user/arjun)
[07:46:58] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[07:49:24] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[07:50:22] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 272 seconds)
[07:54:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[07:56:48] *** Joins: drdo (~drdo@roach0.drdo.eu)
[07:59:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[07:59:43] *** Joins: alx741 (~alx741@157.100.197.240)
[08:00:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:01:01] *** Joins: benin (~benin@106.195.37.136)
[08:02:10] *** Joins: notzmv (~zmv@user/notzmv)
[08:05:37] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 256 seconds)
[08:10:20] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:17:59] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:29:17] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[08:34:09] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Client Quit)
[08:34:26] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[08:34:45] *** Joins: alx741 (~alx741@181.199.42.143)
[08:39:08] *** Joins: benin6 (~benin@106.195.34.202)
[08:41:40] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[08:42:36] *** Quits: benin (~benin@106.195.37.136) (Ping timeout: 240 seconds)
[08:42:37] *** benin6 is now known as benin
[08:43:50] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:44:27] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:44:36] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[08:45:09] *** Joins: wroathe (~wroathe@user/wroathe)
[08:45:40] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[08:47:18] *** Joins: lechner (~lechner@debian/lechner)
[08:48:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:49:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:50:12] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 240 seconds)
[08:52:20] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[08:54:57] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 240 seconds)
[08:58:09] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:01:09] *** Joins: alx741 (~alx741@181.199.42.143)
[09:04:22] <gentauro> "pseudo-science" -> https://greenlab.di.uminho.pt/wp-content/uploads/2017/10/sleFinal.pdf
[09:04:25] <gentauro> :|
[09:04:47] *** Quits: xff0x (~xff0x@2001:1a81:53e8:6f00:9716:e8e7:86fc:1482) (Ping timeout: 250 seconds)
[09:05:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[09:05:17] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:06:50] *** Joins: xff0x (~xff0x@2001:1a81:53fa:e800:fe67:1298:c7d8:80eb)
[09:15:19] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:15:24] *** Quits: analognoise1 (~analognoi@192.145.80.4) (Read error: Connection reset by peer)
[09:18:01] *** Quits: benin (~benin@106.195.34.202) (Read error: Connection reset by peer)
[09:20:12] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[09:22:08] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[09:22:19] *** Joins: alx741 (~alx741@181.199.42.143)
[09:22:20] *** Joins: raym (~raym@user/raym)
[09:24:06] *** Quits: xff0x (~xff0x@2001:1a81:53fa:e800:fe67:1298:c7d8:80eb) (Ping timeout: 250 seconds)
[09:25:40] *** Joins: bahamas (~lucian@84.232.140.52)
[09:26:01] *** Joins: xff0x (~xff0x@2001:1a81:53fb:2b00:39af:d957:9c8c:d6f6)
[09:26:01] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:29:48] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 272 seconds)
[09:36:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:41:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[09:41:24] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[09:42:35] *** Joins: alx741 (~alx741@157.100.197.240)
[09:45:38] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[09:47:08] *** Joins: benin (~benin@106.195.33.202)
[10:01:00] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[10:01:00] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:03:46] *** Joins: lechner (~lechner@debian/lechner)
[10:04:42] *** Joins: benin5 (~benin@106.195.39.120)
[10:05:55] *** Quits: benin5 (~benin@106.195.39.120) (Read error: Connection reset by peer)
[10:06:53] *** Quits: benin (~benin@106.195.33.202) (Ping timeout: 256 seconds)
[10:07:51] *** Joins: benin (~benin@106.195.39.120)
[10:09:43] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:10:12] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 240 seconds)
[10:12:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[10:14:17] *** Quits: benin (~benin@106.195.39.120) (Read error: Connection reset by peer)
[10:14:55] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[10:16:02] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 272 seconds)
[10:17:05] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[10:17:23] *** Joins: benin (~benin@106.195.39.120)
[10:17:51] *** Joins: alx741 (~alx741@157.100.197.240)
[10:22:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:24:19] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Quit: Leaving)
[10:29:14] *** Joins: coot (~coot@213.134.190.95)
[10:33:25] *** Quits: lechner (~lechner@debian/lechner) (Quit: WeeChat 3.0)
[10:33:49] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:35:14] *** Joins: arjun (~arjun@user/arjun)
[10:38:37] *** Quits: benin (~benin@106.195.39.120) (Ping timeout: 256 seconds)
[10:40:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[10:40:26] *** Joins: alx741 (~alx741@157.100.197.240)
[10:43:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:45:08] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 256 seconds)
[10:45:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:54:39] *** Joins: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net)
[10:55:40] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:7b63:89fd:c536:5b73)
[10:56:42] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[10:57:32] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:58:02] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[10:59:19] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:b428:2ed3:2da:8b6f)
[10:59:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:02:54] *** Joins: alx741 (~alx741@181.199.42.143)
[11:03:43] *** Joins: omantere (~pi@85-156-109-34.elisa-laajakaista.fi)
[11:06:17] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Ping timeout: 240 seconds)
[11:06:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:09:13] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:11:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[11:11:42] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[11:12:52] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:b428:2ed3:2da:8b6f) (Ping timeout: 250 seconds)
[11:14:48] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:15:25] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:19:40] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:22:14] *** Joins: komikat (~komikat@183.82.154.239)
[11:23:09] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[11:23:26] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:23:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[11:24:10] *** Joins: komikat (~komikat@183.82.154.239)
[11:25:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[11:28:46] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 256 seconds)
[11:28:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:29:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:31:24] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 272 seconds)
[11:32:16] *** Joins: alx741 (~alx741@157.100.197.240)
[11:33:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:33:56] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Ping timeout: 272 seconds)
[11:36:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:36:56] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:40:40] *** Joins: komikat (~komikat@183.82.154.239)
[11:45:58] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[11:46:33] *** Joins: drdo (~drdo@roach0.drdo.eu)
[11:47:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:48:25] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:53:25] *** Joins: alx741 (~alx741@157.100.197.240)
[11:54:13] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:1ccc:ee98:9b77:cb4a)
[11:54:34] *** Quits: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[11:54:43] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[11:55:09] *** Joins: alp (~alp@user/alp)
[11:55:21] *** Joins: vpan (~0@212.117.1.172)
[12:00:23] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[12:00:29] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[12:00:32] <polezaivsani> Somebody, please, enlighten me - when evaluating x `seq` f x (or the results of the seq, i'm not sure), x becomes gets evaluated to WHNF, but i'm a bit lost as to why it the case for both instances of x in the expression.  As if x has been memoized.  What am i missing?
[12:02:41] <davean> Theres only one x
[12:02:55] <davean> There is no second x
[12:02:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:02:58] <ski> both occurances of `x' refer to the same computation. with lazy evaluation, the result of this computation is cached/shared
[12:03:17] <ski> consider this definition
[12:03:22] <ski>   square x = x * x
[12:03:44] <ski> now, assume that you're computing `square (2 + 3)'
[12:04:09] <polezaivsani> do i have to have a putr language in order to easily make such assumptions?
[12:04:14] <ski> naïvely (using call-by-name evaluation/reduction), you'd imagine a reduction sequence like
[12:04:15] <polezaivsani> s/putr/pure/
[12:04:27] <ski>      square (2 + 3)
[12:04:32] <ski>   =  (2 + 3) * (2 + 3)
[12:04:38] <ski>   =  5 * (2 + 3)
[12:04:40] <ski>   =  5 * 5
[12:04:42] <ski>   =  25
[12:04:44] <polezaivsani> yep
[12:05:05] <ski> this is not directly (but indirectly) related to absence of side-effects
[12:05:18] <ski> anyway, with call-by-value evaluation, you'd instead get
[12:05:23] <ski>      square (2 + 3)
[12:05:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[12:05:27] <ski>   =  square 5
[12:05:30] <ski>   =  5 * 5
[12:05:32] <ski>   =  25
[12:05:48] <polezaivsani> roger that
[12:06:47] <ski> so, with call-by-value, you first evaluate the operand(s) (argument(s), parameter(s)) (and the operator, the function (expression) itself. but often, that's just a name indicating a function), before substituting the actual parameter(s) (here `2 + 3', becoming `5'), for the formal parameter(s) (here `x') in the body of the function definition (here `x * x')
[12:08:30] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[12:08:37] <ski> while, with call-by-name, you (first evaluate the operator expression, the function itself, to know which function you're calling. but here, that's `square' which is just a name, so nothing to do. then you) substitute the actual parameter(s) for the formal parameter(s) in the definiens (definition body of the function). and only if evaluating that body causes the parameter (`x') to be evaluated, do you 
[12:08:42] *** Joins: komikat (~komikat@183.82.154.239)
[12:08:43] <ski> actually evaluate the actual parameter expression (`2 + 3')
[12:09:19] <ski> so, if the formal parameter doesn't occur (or isn't forced to be evaluated, on the path/branch that is chosen), then we save evaluating the actual parameter expression
[12:09:35] * polezaivsani nods
[12:09:43] <ski> however, if that formal parameter occurs more than once, then we actually do the same work more than once, that would only be done once, with call-by-value
[12:10:27] <ski> so, call-by-need evaluation (also called lazy evaluation) is an optimization on call-by-name, where you cache/share the result of the evaluation of parameters, so that you evaluate them at most once
[12:10:45] <ski> so indicate this in a reduction trace like above, we could write like
[12:10:49] <ski>      square (2 + 3)
[12:11:02] <ski>   =  x * x where x = 2 + 3
[12:11:04] <ski>   =  x * x where x = 5
[12:11:08] <ski>   =  5 * x where x = 5
[12:11:10] <polezaivsani> oh, right, now i'm recalling the call-by-need!
[12:11:11] <ski>   =  5 * 5 where x = 5
[12:11:13] <ski>   =  5 * 5
[12:11:16] <ski>   =  25
[12:11:54] <ski> (the step where we remove the `where x = 5', because there's no (use) occurance of `x' anymore (the `x' in `x = 5' is a binding occurance of `x') is called Garbage Collection (GC))
[12:12:46] *** Joins: acidjnk (~acidjnk@p200300d0c71c0563a9d152fa4048aeb9.dip0.t-ipconnect.de)
[12:13:01] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[12:13:03] *** Quits: dextaa_ (~dextaa@user/dextaa) (Quit: The Lounge - https://thelounge.chat)
[12:13:12] <ski> so, the rule is, any actual parameter expressions are shared, and we can indicate that textually in the reduction trace by using `where' (or `let'-`in'), giving them names, and storing the result (here `5') of the evaluation of the actual parameter, in the binding (`x = ...')
[12:13:37] <ski> polezaivsani : this makes sense ?
[12:15:23] <ski> (if the formal parameter isn't actually used more than once in the definiens, there is no need (but you still can, if you wish) to explicitly share its reduction, using `where' like above)
[12:16:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:18:11] <polezaivsani> ski: yes, i guess it does.  i've been missing the by-need evaluation step.  suppose the cached evaluation of expressions is retained for any use within the lexical scope, right?  so that in square x = x * someFn x, the x  in the, say, (someFn x) thunk would still evaluate to a cached value
[12:18:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:19] *** Joins: cfricke (~cfricke@user/cfricke)
[12:19:44] <ski> yes. and even if we provide a result back from the call to the function, some later demand of *part* of this result could still cause `x' (or part of it) to be reduced further. so this cached evaluation is not dropped just because the function call that introduced it has "returned". it may be retained for later
[12:19:45] <davean> x is a name, not the thing
[12:19:51] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:b4ac:6a8f:4bfc:720a)
[12:20:20] <ski> `(*)' is just another function, just like `someFn'
[12:20:32] <ski> it's also worthwhile to point out that the Haskell report does not require an implementation to use call-by-need / lazy evaluation. these three i mentioned above (by-value,by-name,by-need) are reduction strategies, they are kinds of *operational* semantics, which describes a sequence of steps to take, to arrive at an answer/result
[12:21:11] *** Joins: alx741 (~alx741@157.100.197.240)
[12:21:49] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ac5:f557:6cb0:e099)
[12:22:19] <ski> there's a "higher-level" (less concerned with details) semantics, called denotational semantics. it talks about *which* answers you arrive at (or not, in case there is no answer, e.g. because of infinite loop, or pattern-match failure). the two main versions of it that are interesting here are called strict/eager evaluation vs. non-strict evaluation. Haskell is specified to use non-strict evaluation
[12:22:47] <ski> this means that, in general, `f x' may have an answer, even if `x' does not
[12:23:06] <ski> > (const 2) (3 `div` 0)
[12:23:07] <lambdabot>  2
[12:24:00] <polezaivsani> ski: yeah, that does make sense.  Thank you a ton, ski!  i'll go reread the whole explanation couple more times, but i'm close to getting a grip in the concept
[12:24:03] <ski> so, non-strict evaluation can be implemented, by using by-name reduction. but it can also be implemented by using by-need. in practice, most Haskell implementations (at least as a default) uses by-need / lazy reduction
[12:24:28] <ski> @where lazy
[12:24:28] <lambdabot> "Lazy Evaluation of Haskell" by monochrom at <http://www.vex.net/~trebla/haskell/lazy.xhtml>; "The Incomplete Guide to Lazy Evaluation (in Haskell)" by apfelmus in 2015-03-07 at <https://apfelmus.
[12:24:28] <lambdabot> nfshost.com/articles/lazy-eval.html>; "Laziness, strictness, guarded recursion" by bitemyapp at <https://github.com/bitemyapp/learnhaskell/blob/master/specific_topics.md#user-content-laziness-
[12:24:28] <lambdabot> strictness-guarded-recursion>
[12:24:39] <ski> polezaivsani : perhaps some of those ^ links might also help
[12:24:47] <polezaivsani> cheers!
[12:24:54] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[12:26:34] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[12:27:17] <ski> there has been Haskell implementations which have experimented a bit with speculative reduction. where to evaluate `f x', you might still try evaluating `x' in a different thread (if you have an idle one to spare), in the hope that `x' will be needed. but one needs to be careful, because if `x' generates a pattern-match failure, that must be caught, so as to not abort the execution of the whole program (so, 
[12:27:23] <ski> we pretend that we never reduced `x'). also, we most likely will set a time-out, so that if `x' takes too long (e.g. in case it goes into an infinite loop), we will eventually stop attempting to reduce it
[12:27:59] <polezaivsani> yes, i was about to ask how not requiring a particular evalution strategy could allow for all the semantics of the language/library functions, but bet me to it :)
[12:28:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:28:33] *** Joins: fendor (~fendor@91.141.59.141.wireless.dyn.drei.com)
[12:28:36] <polezaivsani> s/but/but you/
[12:29:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[12:29:01] <ski> in practice, when people try to reason about performance (time and space complexity) in Haskell, they normally assume by-need (sometimes modulated by thinking about e.g. fusion optimization, &c.)
[12:29:37] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[12:30:02] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:30:10] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Quit: You have been kicked for being idle)
[12:30:40] *** Joins: alx741 (~alx741@157.100.197.240)
[12:32:23] *** Joins: td_ (~td@94.134.91.148)
[12:34:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:35:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:36:26] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[12:37:12] *** Joins: fef (~thedawn@user/thedawn)
[12:37:30] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:39:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[12:40:58] *** Joins: drdo (~drdo@roach0.drdo.eu)
[12:44:21] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[12:45:00] *** Joins: polezaivsani` (~polezaivs@orangeshoelaces.net)
[12:45:42] *** Quits: polezaivsani` (~polezaivs@orangeshoelaces.net) (Client Quit)
[12:45:59] *** Joins: polezaivsani` (~polezaivs@orangeshoelaces.net)
[12:46:24] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[12:50:59] *** Joins: alx741 (~alx741@181.199.42.143)
[12:51:05] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:a167:dd2d:8526:2dcf)
[12:56:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[12:57:58] *** Joins: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[12:58:35] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[12:59:44] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[13:00:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:00:28] *** Joins: alx741 (~alx741@181.199.42.143)
[13:00:35] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[13:02:51] *** Joins: jespada (~jespada@148.252.133.112)
[13:03:22] *** Quits: Alex_test (~al_test@178.34.160.252) (Quit: ;-)
[13:03:34] *** Quits: AlexZenon (~alzenon@178.34.160.252) (Quit: ;-)
[13:04:07] *** Quits: AlexNoo (~AlexNoo@178.34.160.252) (Quit: Leaving)
[13:04:35] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[13:05:25] <Guest28> Hello everyone, I found this tool https://github.com/camfort/fortran-src written in Haskel. My goal is to get the AST for a fortran source. But I don't understand the format of the output http://sprunge.us/Q5G6p9 . I need to get it in order to process it. Can someone help me to identify it? Is it possible to get it in another format like json or
[13:05:26] <Guest28> xml.
[13:06:15] <[exa]> Guest28: this output format looks like a pretty standard haskell ADT
[13:06:20] <[exa]> aka "normal datatype"
[13:06:29] <ski> that's (sortof, not quite), Haskell format
[13:06:45] <ski> (someone's been abusing `Show')
[13:06:46] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[13:06:51] <[exa]> if you want JSON, formatting it as JSON shouldn't be that hard
[13:07:09] * [exa] wishes that they have Generic instances
[13:08:12] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[13:08:41] *** Joins: irishman (~vshev4enk@178.151.117.243)
[13:08:45] <Guest28> [exa] okay thank you, I will try to understand this format and how I can convert it to xml format or json.
[13:09:05] <[exa]> Guest28: how did you now get the code out?
[13:09:24] <ski> probably it would be simpler to convert it to the format you need/want, on the Haskell side, rather than trying to parse this text output, and translate it that way
[13:09:26] <[exa]> oh they have a commandline interface, I see
[13:09:47] <Guest28> [exa] `fortran-src file.f77`
[13:10:07] <[exa]> you might need to write a tiny bit of haskell to get the conversion done
[13:10:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:10:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:10:31] <[exa]> good news: they indeed have generic instances :D
[13:10:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:11:38] <Guest28> [exa] it would be better indeed, even though I have never used a haskel before.
[13:11:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[13:12:26] <Guest28> thank you for your quick response.
[13:12:37] *** Joins: AlexZenon (~alzenon@178.34.160.252)
[13:12:45] *** Joins: AlexNoo (~AlexNoo@178.34.160.252)
[13:13:22] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 272 seconds)
[13:14:17] *** Joins: Alex_test (~al_test@178.34.160.252)
[13:16:06] <[exa]> okay well, they have an actual supporting library that you can use, docs are here: https://hackage.haskell.org/package/fortran-src
[13:16:33] <[exa]> the source code for the `fortran-src` tool is just using the library, it's here https://github.com/camfort/fortran-src/blob/master/app/Main.hs
[13:17:03] <[exa]> chances are that you'll be able to make a tiny program of your own that just rins the "parsing" action on the source
[13:18:06] <[exa]> and when you have that, you define your chosen JSON encoding of the source (not very complicated) and print it out as JSON
[13:18:20] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[13:18:24] <[exa]> (there's Aeson package for doing that in a pretty straightforward way)
[13:21:43] *** Joins: alx741 (~alx741@157.100.197.240)
[13:23:40] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:24:45] *** Joins: mmhat (~mmh@55d46dab.access.ecotel.net)
[13:26:00] *** Joins: hololeap (~hololeap@user/hololeap)
[13:27:02] <ski> Guest28 ^
[13:28:03] *** Quits: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[13:30:46] *** Joins: califax (~califax@user/califx)
[13:31:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:38:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[13:39:14] *** Joins: hololeap_ (~hololeap@user/hololeap)
[13:41:53] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:7b63:89fd:c536:5b73) (Quit: bye)
[13:41:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[13:42:25] *** Quits: komikat (~komikat@183.82.154.239) (Quit: Leaving...)
[13:44:21] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:7dcd:73c3:ce07:9a72)
[13:44:26] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:45:11] *** Joins: komikat (~komikat@183.82.154.239)
[13:45:46] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:47:54] *** Joins: Guest|81 (~Guest|81@195.176.16.2)
[13:48:28] *** Quits: Guest|81 (~Guest|81@195.176.16.2) (Client Quit)
[13:49:15] *** Joins: alx741 (~alx741@157.100.197.240)
[13:59:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:00:13] *** Joins: cheater (~Username@user/cheater)
[14:01:00] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 240 seconds)
[14:02:12] <polezaivsani`> ski, if you don't mind me asking - the remark about the results of evaluation persisting beyond, hand-wavy, the function that required it - does it happen because that result was somehow reachable from some outer ~lexical scope~?  If not - what kind of identity would be used to know exactly *what* it was that we had evaluated?
[14:05:27] <ski> if you're computing `head (map (^ 2) [3 ..])', then you'll reduce `map (^ 2) [3 ..]' to `(3 ^ 2) : map (^ 2) [4 ..]', but then `head' only asks for the part before the `:', so the latter part (the tail of the list) gets discarded (isn't being reduced)
[14:06:23] <ski> but you could e.g. bind the result of `map (^ 2) [3 ..]' to a pattern `x : xs', binding `x' to the head (`3 ^ 2') and `xs' to the tail. and maybe later, depending on which branch you're choosing, you may or may not reduce `xs' further
[14:07:52] <ski> so, even though the call to `map' in `map (^ 2) [3 ..]' has "returned", we still have a lingering recursive call to `map' (`map (^ 2) [4 ..]') in `xs'. if we later reduce this, it, too, will be shared
[14:08:47] <ski> does that help ?
[14:09:57] *** Joins: thyriaen (~thyriaen@dynamic-089-014-003-224.89.14.pool.telefonica.de)
[14:10:50] <polezaivsani`> i meant that we'd retain the recursive map call only if we'd have it bound to a name - is that correct?
[14:11:47] <ski> well, you could also end up with the recursive call being a *part* of something that's bound to a name
[14:12:27] <polezaivsani`> yes
[14:12:47] <ski> but yes, it's basically via the naming that we're able to refer to some part more than once, and that's where the caching of the result comes in
[14:13:07] <polezaivsani`> makes perfect sense, again - much thanks, ski!
[14:14:14] <ski> if you're matching some result with a pattern `(_,_) : _', then that'll force some reduction, but won't actually bind any name to any part of it. so, that doesn't introduce any reason to keep the (partial reduction) results of that cached
[14:14:49] <ski> hm, btw, another example i was thinking about before, but didn't cover then
[14:14:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[14:14:56] <ski>   swap (x,y) = (y,x)
[14:15:04] <ski>   sumPair (a,b) = a + b
[14:16:14] <ski> consider `sumPair (swap (2,3))'. to reduce this, because `sumPair' is matching its input not against a plain formal parameter variable (like `p' maybe), but against a pattern like `(a,b)', we have to reduce the call to `swap', to be able to reduce the `sumPair' call
[14:16:36] <ski> so, `swap (2,3)' gets reduced to `(3,2)'
[14:16:59] <polezaivsani`> yep
[14:17:34] <ski> if we had had a definition `sumPair p@(a,b) = ...', then `p' could keep this cached result of reducing `swap (2,3)' to `(3,2)'
[14:17:42] *** Joins: alx741 (~alx741@157.100.197.240)
[14:18:45] <ski> or, if we were reducing `let p = swap (2,3) in sumPair p + ..p..', then `p' would also get cached
[14:19:27] <ski> so, it's the fact that the result of a computation gets bound to a name, somewhere, that causes it to require caching, under by-name reduction
[14:20:09] <ski> (the naming might not be visible in the code snippet you're looking at, directly. it could still happen in other code that's called by your code)
[14:21:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:21:23] <polezaivsani`> yes, now there's no ghost of some abstract evaulation cahing happening to bother me anymore :)
[14:21:31] <ski> (if you have a definition `copy t = (t,t)', and then you call `copy (swap (x,y))', then the result of that `swap' call will be cached (in the two components of the computed pair), even though the expression `copy (swap (x,y))' itself doesn't indicate this naming of the result of the `swap' call)
[14:21:33] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[14:22:11] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[14:22:12] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[14:23:17] <polezaivsani`> yes, i see that
[14:23:36] <ski> iirc, the first link i gave above displays the caching in terms of a graph, with multiple arrows pointing to the same location indicating the sharing, rather than using textual names
[14:23:46] <ski> but it's the same concept, just different way to convey it
[14:23:53] *** Quits: mbuf (~Shakthi@122.174.33.79) (Remote host closed the connection)
[14:24:10] *** Joins: mbuf (~Shakthi@122.174.33.79)
[14:24:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[14:25:13] <polezaivsani`> yes, it's a graph in there
[14:28:04] *** Joins: monochrom (trebla@216.138.220.146)
[14:29:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917) (Ping timeout: 240 seconds)
[14:30:06] *** Joins: fef (~thedawn@user/thedawn)
[14:31:31] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:33:01] *** Quits: acidjnk (~acidjnk@p200300d0c71c0563a9d152fa4048aeb9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:33:17] *** Quits: xff0x (~xff0x@2001:1a81:53fb:2b00:39af:d957:9c8c:d6f6) (Ping timeout: 240 seconds)
[14:34:24] *** Joins: xff0x (~xff0x@2001:1a81:53fb:2b00:4af1:dbed:433f:e61a)
[14:37:43] *** Joins: alx741 (~alx741@157.100.197.240)
[14:43:12] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[14:47:44] *** Joins: fendor_ (~fendor@178.115.50.171.wireless.dyn.drei.com)
[14:48:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:48:32] *** Joins: Midjak (~Midjak@82.66.147.146)
[14:50:02] *** Quits: fendor (~fendor@91.141.59.141.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[14:58:29] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[14:59:09] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[15:05:48] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 240 seconds)
[15:06:10] *** Joins: alx741 (~alx741@181.199.42.143)
[15:07:36] *** Joins: Unhammer (~Unhammer@user/unhammer)
[15:07:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[15:08:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[15:08:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:10:43] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[15:16:00] *** Quits: deadmarshal (~deadmarsh@95.38.230.238) (Ping timeout: 256 seconds)
[15:19:47] *** Joins: cajun (~cajun@user/cajun)
[15:24:51] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:24:57] <romesrf> !hello
[15:25:38] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[15:27:04] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:27:33] *** Joins: alx741 (~alx741@157.100.197.240)
[15:30:02] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[15:30:13] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:30:15] <romesrf> I'm wondering: If I use WriterT but never use the accumulated values, is it "zero cost"?
[15:30:45] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:31:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:31:06] <geekosaur> would waste memory
[15:31:13] <geekosaur> thunks aren't free
[15:31:58] <romesrf> thank you
[15:33:06] <romesrf> What were the RTS options to see the memory used ? I want to see how bad it is for my scenario
[15:36:32] <romesrf> it's -T (sorry, that was in the docs obviously)
[15:38:09] <joel135> i tried copying the xmobar config from here https://xmonad.org/TUTORIAL.html but i get a very obscure syntax error
[15:39:16] *** Joins: irishman (~vshev4enk@178.151.117.243)
[15:39:24] <joel135> (line 31, column 10), unexpected "s", expecting space or "Run"
[15:39:38] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:40:30] <joel135> i tried simplifying the file but then it also doesn't work because it needs all those fields apparently
[15:40:56] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:41:27] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:42:57] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:7d10:23d8:e646:5686)
[15:43:24] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 240 seconds)
[15:44:12] *** Joins: maroloccio (~marolocci@pousada3ja.mma.com.br)
[15:44:19] *** Joins: bahamas (~lucian@84.232.140.52)
[15:46:42] <geekosaur> joel135, xmobar config only looks like Haskell, and yes the parser is really lousy about error messages
[15:47:15] <geekosaur> that one *usually* means one of the plugins wasn't included in your build. since most of the ones there are built-ins, I'd guess your build is without alsa
[15:47:59] <joel135> i installed it like "stack install xmobar"
[15:48:28] <geekosaur> if you built xmobar yourself, rebuild it with --flags=all_extensions
[15:49:10] *** Joins: alx741 (~alx741@157.100.197.240)
[15:49:18] <joel135> i tried removing the alsa part and now i get: unexpected end of input
[15:49:57] <geekosaur> @where paste
[15:49:57] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[15:50:55] <geekosaur> (and I *really* wish they'd do proper error handling, it's not that hard ):
[15:51:42] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[15:52:23] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:52:48] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[15:52:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:53:06] <joel135> https://termbin.com/re9i
[15:54:48] <geekosaur> hm, that looks right aside from the alsa plugin still being in the template
[15:55:13] <joel135> i am missing a closing " !
[15:55:14] <geekosaur> which shouldn;t cause an "unexpected end of input", I think
[15:55:31] <joel135> now it works (without alsa, which is fine :)
[15:55:34] <geekosaur> oh right, right at the end of the template
[15:55:53] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7)
[15:56:05] <geekosaur> personally I'd turn on all the extensions, they're nice
[15:56:23] <joel135> can i do it from stack?
[15:56:36] <geekosaur> and it means you won't have to dig this up in the future and rebuildit if you want to for example have it show what you're playing
[15:56:51] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[15:56:58] <geekosaur> yes, just rerun the stack install with --flags=all_extensions
[15:58:23] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:a167:dd2d:8526:2dcf) (Remote host closed the connection)
[15:58:38] <hpc> geekosaur: you have to think like a computer - it keeps reading string stuff until it finds ", which means the parser expects everything except eof
[15:58:43] *** Joins: mastarija_ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97)
[15:58:48] <hpc> it gets all the way to the end, and finally that's where it gets surprised
[15:58:50] *** Quits: mastarija_ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97) (Client Quit)
[15:58:57] <hpc> the error isn't where the problem happened, it's where the surprise happened
[15:59:09] *** Joins: mastarija_ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97)
[15:59:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:59:16] <joel135> it could also have been mismatched {} i think
[15:59:31] <joel135> or []
[16:00:03] <joel135> or any other unfinished syntactical form (if that's the right word for it)
[16:00:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:01:09] <joel135> "stack install xmobar --flags=all_extensions"
[16:01:29] <joel135> did you really mean this? stack says invalid option
[16:02:02] <geekosaur> I'm not a stack user so no, I'm not sure. The install instructions are for cabal
[16:02:43] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:7d10:23d8:e646:5686) (Ping timeout: 268 seconds)
[16:02:56] <geekosaur> looks like it's --flag all_extensions
[16:03:04] <geekosaur> can't have consistency, can we? :(
[16:03:11] *** Joins: mastarija__ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97)
[16:03:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:03:39] <joel135> "option flag: Must have a colon" :(
[16:03:48] <geekosaur> o.O
[16:04:10] <geekosaur> sigh
[16:04:21] <geekosaur> --flag xmobar:all_extensions
[16:04:24] <geekosaur> I think
[16:04:47] *** Joins: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[16:05:44] *** Quits: mastarija__ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97) (Client Quit)
[16:06:02] <joel135> "stack install xmobar --flags=xmobar:all_extensions"
[16:06:02] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97)
[16:06:21] <joel135> ok, this is progress. now it is just asking me to update my global stack.yaml
[16:06:29] *** Quits: mastarija_ (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97) (Ping timeout: 252 seconds)
[16:07:42] <joel135> it is compiling now :)
[16:09:36] <geekosaur> possibly it'llstop later asking for some C libs to be installed for things like mpris
[16:11:01] *** Joins: alx741 (~alx741@157.100.197.240)
[16:11:32] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[16:12:04] *** Joins: mcglk (~mcglk@131.191.49.120)
[16:12:51] <joel135> ok
[16:15:01] <geekosaur> hpc, yes, I know, but parsec/megaparsec makes error handling and proper error reporting pretty easy. but xmobar is infamous for not bothering and thereby reporting errorsthat are really confusing to users
[16:15:33] *** Joins: deadmarshal (~deadmarsh@95.38.230.238)
[16:15:34] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:15:36] <geekosaur> sometimes I recommend the actual haskell config just to get saner error messages
[16:16:02] <geekosaur> (granted, ghc is also infamous for "parse error" with little context…)
[16:18:13] <romesrf> ahah
[16:26:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[16:28:21] <sprout> egelbot: 1 + "2"
[16:29:31] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[16:30:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917) (Ping timeout: 240 seconds)
[16:33:33] *** Joins: alx741 (~alx741@157.100.197.240)
[16:34:36] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[16:37:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:37:37] *** Joins: bahamas (~lucian@84.232.140.52)
[16:42:22] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[16:47:54] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97) (Quit: Leaving)
[16:48:04] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Ping timeout: 272 seconds)
[16:48:15] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[16:48:21] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:48:58] *** Joins: kenran (~kenran@200116b82b58bf00ac94994ddceb2eda.dip.versatel-1u1.de)
[16:54:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:54:56] *** Joins: alx741 (~alx741@157.100.197.240)
[16:55:32] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[16:56:12] *** Quits: jespada (~jespada@148.252.133.112) (Ping timeout: 240 seconds)
[16:57:16] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:59:31] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:01:23] *** Joins: thevishy (~Nishant@2405:201:f005:c007:e022:4c5f:4bd4:2b64)
[17:01:24] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[17:01:42] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[17:06:06] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[17:06:49] *** Quits: mmhat (~mmh@55d46dab.access.ecotel.net) (Quit: WeeChat 3.4)
[17:10:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:10:50] <jiribenes> is there a reason why type operators cannot be partially applied like sections?
[17:10:51] <jiribenes> for example `(a ->)` standing for `((->) a)` similarly to how `(2+)` stands for `((+) 2)`
[17:11:13] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[17:11:24] <jiribenes> (besides "nobody actually implemented it")
[17:12:11] *** Joins: irishman (~vshev4enk@178.151.117.243)
[17:13:14] <merijn> jiribenes: "Type operators weren't a thing when the report was written"? :)
[17:14:09] <geekosaur> does the other way actually work? I think you can't in general do anything with (-> a) the way you can with (a ->)
[17:14:21] <ski> left sections would work. right section wouldn't
[17:14:24] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[17:14:37] <jiribenes> merijn: fair enough :)
[17:15:17] <merijn> Also the above, yeah
[17:15:28] <ski> @type (False,)
[17:15:29] <lambdabot> t -> (Bool, t)
[17:15:29] <ski> @kind (Int,)
[17:15:31] <lambdabot> error: parse error on input ‘)’
[17:15:48] <geekosaur> % :k (Int,)
[17:15:49] <yahb> geekosaur: ; <interactive>:1:6: error: parse error on input `)'
[17:15:52] <geekosaur> bah
[17:16:05] *** Joins: alx741 (~alx741@157.100.197.240)
[17:16:12] <geekosaur> % :set -XTupleSections
[17:16:12] <yahb> geekosaur: 
[17:16:13] <ski> (that's `TupleSections')
[17:16:16] <geekosaur> % :k (Int,)
[17:16:17] <yahb> geekosaur: ; <interactive>:1:6: error: parse error on input `)'
[17:16:18] <ski> it's already on
[17:16:36] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 245 seconds)
[17:16:41] <ski> % :q
[17:16:42] <yahb> ski: 
[17:16:43] <ski> % :type (False,)
[17:16:44] <yahb> ski: t -> (Bool, t)
[17:18:30] <jiribenes> ski: just to be clear, why wouldn't right sections work?
[17:18:33] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[17:20:14] <merijn> jiribenes: *right* sections won't work
[17:20:29] <merijn> i.e. (-> Int) as opposed to (Int ->)
[17:20:50] <merijn> jiribenes: Because right-sections are equivalent to type-level lambdas which break all sorts of things
[17:21:21] <merijn> well, I guess right sections could work IFF immediately applied, but that kinda seems to defeat the purpose
[17:21:28] <ski> `(2 +)' desugars to `(+) 2', while `(+ 2)' basically desugars to `flip (+) 2'. there is no corresponding `Flip' on the type level that one could use here
[17:21:44] <jiribenes> oh right, yeah, that makes sense
[17:22:20] <jiribenes> thanks! :)
[17:23:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:24:34] *** Joins: alx741 (~alx741@157.100.197.240)
[17:24:34] <ski> (well, iirc, the report specifies `(2 +)' to desugar to `\y -> 2 + y' (or `\y -> (+) 2 y' if you prefer), and `(+ 2)' to `\x -> x + 2' (or `\x -> (+) x 2') (`x' and `y' being fresh identifiers here), but, iirc, GHC instead desugars the first of those to `(+) 2')
[17:26:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[17:26:53] <ski> (having `Flip' be a `newtype' or `data' type wouldn't work, since `(-> b) a' would then mean `Flip (->) b a', which would be distinct from `a -> b'. and having it be a type synonym like `type Flip f b a = f a b' also wouldn't work, since type synonyms must be fully applied (saturated application, so just `Flip (->) b' will not work. i guess `(-> a) b' would work, if then you could just write `a -> b' or 
[17:26:59] <ski> `(->) a b' to begin with)
[17:28:14] <ski> (hm .. i guess with `LiberalTypeSynonyms', having `Foo (-> b)' could work, if `Foo' is a type synonym that applies its callback argument)
[17:28:54] *** Joins: komikat (~komikat@183.82.154.239)
[17:32:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:36:16] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[17:38:12] *** Joins: bahamas (~lucian@84.232.140.52)
[17:39:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:39:33] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[17:41:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:42:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[17:44:23] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[17:44:26] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[17:45:35] *** Joins: max22- (~maxime@2a01cb0883359800b5877b22b166e521.ipv6.abo.wanadoo.fr)
[17:46:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:49:46] *** Joins: alx741 (~alx741@181.199.42.143)
[17:51:02] *** Joins: jespada (~jespada@148.252.133.112)
[17:51:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[17:53:07] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[17:54:08] <janus> how do i run cabal outdated on all of my transitive dependencies?
[17:55:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:56:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[17:56:49] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[17:58:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:27] *** Joins: wroathe (~wroathe@user/wroathe)
[18:00:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[18:00:41] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:04:48] <justsomeguy> Is the list type basically the same thing as a stream type wrapped in Maybe? data Stream a = Stream a (Stream a); :type Just (Stream a); :type (1:)? I was thinking about all the things lists can possibly represent...
[18:05:58] <ski> no. lists can be finite
[18:06:15] *** Joins: cfricke (~cfricke@user/cfricke)
[18:06:22] <ski> with `Maybe (Stream a)' you either have no stream, or you have an infinite stream
[18:07:31] <ski> (also, `Just (Stream a)' would have type `Maybe (Stream t -> Stream t)', assuming `a' had type `t' .. i'm not sure what you were aiming for, there)
[18:07:57] *** Joins: irishman (~vshev4enk@178.151.117.243)
[18:08:27] <justsomeguy> My though process is Nothing would correspond to the [] data constructor. Then you can pattern match on (Just Stream a (Just (Stream a ... Nothing), right?
[18:08:48] * justsomeguy is not sure if that makes sense
[18:08:52] <ski> (this is one reason why i typically don't like naming data constructors the same as the type constructor they belong to. i'd prefer `data Stream a = Cons a (Stream a)', or at least `data Stream a = MkStream a (Stream a)' (you could also use a `newtype' of `(a,Stream a)', if you prefer))
[18:09:31] <ski> justsomeguy : yes, it does. but that's not `Maybe (Stream a)', that's not "a stream type wrapped in Maybe". that's *interleaving* your given `Stream' type with `Maybe'
[18:09:51] <ski>   newtype Stream a = MkStream (Maybe (a,Stream a))  -- like this
[18:10:02] *** Joins: alx741 (~alx741@157.100.197.240)
[18:10:49] <ski> another way to do this would be to have
[18:11:07] <ski>   newtype StreamF a s = MkStreamF (Maybe (a,s))
[18:11:14] <ski> or
[18:11:21] <ski>   data StreamF a s = Nil
[18:11:30] <ski>                    | Cons a s
[18:11:35] <ski> together with
[18:11:49] <ski>   type Stream a = Mu (StreamF a)
[18:11:57] <ski> @src Mu
[18:11:57] <lambdabot> newtype Mu f = In { out :: f (Mu f) }
[18:12:11] <ski> (you also see the name `Fix')
[18:12:17] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 256 seconds)
[18:13:05] *** Quits: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[18:13:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:13:55] <ski> so, you'd have `In (Cons 2 (In (Cons 3 (In (Cons 5 (In (Cons 7 (In Nil))))))))', or `In (Just (2,In (Just (3,In (Just (5,In (Just (7,In Nothing))))))))'
[18:14:32] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[18:14:43] <ski> (or with s/In/MkStream/ for the latter one, if you want the directly recursive `newtype' `Stream', rather than doing recursion via `Mu')
[18:14:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[18:15:22] *** Joins: jz99 (~jz99@pa49-179-20-247.pa.nsw.optusnet.com.au)
[18:16:10] *** Quits: jz99 (~jz99@pa49-179-20-247.pa.nsw.optusnet.com.au) (Remote host closed the connection)
[18:17:58] <justsomeguy> I don't know why, but this seems interesting. I'll have to experiment with the examples you gave me just now. Thanks for humoring my silly questions :^)
[18:18:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:20:36] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[18:21:10] <ski> not silly questions
[18:21:28] <ski> playful, curious, questions are not silly
[18:21:44] <merijn> Also, silly isn't a judgement of quality
[18:21:58] <merijn> Some of my favourite haskell code is silly as hell :p
[18:22:22] <merijn> "data Neither a b = Left | Right" remains a favourite :D
[18:23:26] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:23:52] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:24:28] * ski . o O ( "There are no silly questions, only silly people." ? )
[18:24:34] * ski is being silly
[18:24:39] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:25:16] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:27:47] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7)
[18:27:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:28:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[18:29:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[18:29:58] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:30:17] *** Joins: alx741 (~alx741@157.100.197.240)
[18:30:55] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:31:08] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b579:336d:9a22:79d7) (Ping timeout: 252 seconds)
[18:31:32] *** Joins: coot (~coot@213.134.190.95)
[18:32:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:32:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917) (Ping timeout: 240 seconds)
[18:32:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:33:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:34:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:36:02] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[18:36:18] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[18:36:45] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[18:38:35] *** Joins: nf (~n@2001:19f0:7400:8e5a:5400:3ff:fede:4dc0)
[18:39:29] *** Joins: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[18:40:34] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:40:43] *** Joins: adamcstephens[m] (~adamcstep@2001:470:69fc:105::1:72a2)
[18:44:25] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:46:01] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:47:20] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:47:46] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Ping timeout: 272 seconds)
[18:48:47] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 256 seconds)
[18:49:02] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[18:50:41] *** Joins: coot (~coot@213.134.190.95)
[18:51:17] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:51:54] *** Joins: alx741 (~alx741@157.100.197.240)
[18:53:13] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ac5:f557:6cb0:e099) (Quit: WeeChat 2.8)
[18:53:18] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:54:15] *** Joins: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[18:55:20] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ac5:f557:6cb0:e099)
[18:55:34] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:57:54] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[18:58:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:58:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[18:59:02] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[19:00:18] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:01:44] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 250 seconds)
[19:01:58] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[19:05:24] *** Joins: komikat (~komikat@183.82.154.239)
[19:06:02] <maerwald> merijn: lol
[19:07:21] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:f10f:3b24:c2c7:662e)
[19:10:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:13:24] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[19:14:23] *** Joins: rembo10 (~rembo10@remulis.com)
[19:15:20] *** Joins: alx741 (~alx741@157.100.197.240)
[19:15:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[19:16:06] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:16:34] *** Quits: fendor_ (~fendor@178.115.50.171.wireless.dyn.drei.com) (Remote host closed the connection)
[19:16:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:18:26] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:18:40] *** Joins: califax (~califax@user/califx)
[19:18:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:19:14] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[19:19:46] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[19:24:26] *** Joins: Pickchea (~private@user/pickchea)
[19:28:53] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[19:30:05] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: You have been kicked for being idle)
[19:32:59] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[19:33:26] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:34:58] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[19:35:02] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:35:22] *** Joins: alx741 (~alx741@157.100.197.240)
[19:37:04] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:38:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:40:21] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:f10f:3b24:c2c7:662e) (Ping timeout: 245 seconds)
[19:40:58] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 272 seconds)
[19:42:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[19:44:14] *** Quits: mbuf (~Shakthi@122.174.33.79) (Quit: Leaving)
[19:45:27] *** Joins: lechner (~lechner@debian/lechner)
[19:45:59] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:5819:d51:74c8:3e0f)
[19:47:12] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:47:41] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[19:47:48] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:49:14] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Read error: Connection reset by peer)
[19:49:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:52:22] <edwardk> wouldn't data Neither a b = Neither (a -> Void) (b -> Void) ?
[19:53:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[19:53:44] <edwardk> ah merijn left
[19:54:17] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[19:54:31] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[19:54:42] *** Joins: alx741 (~alx741@181.199.42.143)
[19:55:33] *** Joins: wonko (~wjc@user/wonko)
[19:56:58] *** Joins: xkuru (~xkuru@user/xkuru)
[19:56:58] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[19:59:08] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[19:59:47] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[20:01:09] *** Quits: thevishy (~Nishant@2405:201:f005:c007:e022:4c5f:4bd4:2b64) (Quit: Leaving)
[20:01:16] *** Joins: komikat (~komikat@183.82.154.239)
[20:02:02] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Ping timeout: 260 seconds)
[20:02:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917) (Remote host closed the connection)
[20:03:24] *** Joins: irishman (~vshev4enk@178.151.117.243)
[20:05:01] *** Quits: nf (~n@2001:19f0:7400:8e5a:5400:3ff:fede:4dc0) (Quit: Fairfarren.)
[20:05:12] *** Joins: nf (~n@monade.li)
[20:05:51] <carbolymer> edwardk: how do you use that constructor?
[20:06:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[20:06:27] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ac5:f557:6cb0:e099) (Quit: WeeChat 2.8)
[20:07:10] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 260 seconds)
[20:08:12] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 272 seconds)
[20:08:25] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[20:13:28] *** Joins: bahamas (~lucian@84.232.140.52)
[20:14:03] *** Joins: alx741 (~alx741@181.199.42.143)
[20:14:12] *** Quits: kenran (~kenran@200116b82b58bf00ac94994ddceb2eda.dip.versatel-1u1.de) (Ping timeout: 240 seconds)
[20:14:32] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[20:15:03] <byorgey> edwardk: I was going to suggest that too, but decided I was being too nitpicky about something that was just a joke.  Glad I'm not the only one though =)
[20:15:09] *** Joins: kenran (~kenran@200116b82b58bf00e0673ca75d341939.dip.versatel-1u1.de)
[20:16:03] <byorgey> I guess it depends whether 'Neither a b' means 'neither a nor b are inhabited', or 'you have neither a value of type a nor one of type b'
[20:16:17] <edwardk> carbolymer: Neither id id :: Neither Void Void   -- works
[20:16:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[20:16:50] <carbolymer> edwardk: yeah, but I can't think of any other example than that
[20:16:55] <edwardk> data Neither a b = Neither { notLeft :: a -> Void, notRight :: b -> Void }
[20:17:34] <edwardk> carbolymer: V1 a, Const Void x, Down (V1 a), ... are all "uninhabited" data types
[20:17:44] <edwardk> all of which admit those a -> Void embeddings
[20:17:45] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:18:19] *** shapr` is now known as shapr
[20:18:38] <byorgey> deMorgan :: Either a b -> (Neither a b -> Void) -- exercise
[20:18:52] <byorgey> deMorgan2 :: (Neither a b -> Void) -> Either a b   -- beware of pacts with the devil
[20:19:32] <edwardk> the latter may require timetravel or callcc
[20:20:01] <byorgey> or pacts with the devil, yes
[20:20:22] <edwardk> the devil pact would let you go from not not not -> not, no?
[20:20:56] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[20:21:09] <byorgey> ah, right, I guess the devil pact story is actually constructive, isn't it
[20:21:19] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[20:22:09] <edwardk> yeah
[20:22:16] <edwardk> otherwise you need the devil to exist outside the machine =)
[20:22:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:22:39] <byorgey> hehe, right =)
[20:22:44] <geekosaur> always knew programmers were devils :}
[20:23:01] <edwardk> only scheme programmers.
[20:23:39] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[20:25:00] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[20:25:56] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:26:13] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[20:30:13] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:32:13] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[20:32:45] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:34:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:34:18] *** Joins: alx741 (~alx741@157.100.197.240)
[20:34:48] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:35:21] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 245 seconds)
[20:36:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[20:37:46] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[20:37:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:39:00] *** Joins: komikat (~komikat@183.82.154.239)
[20:41:01] *** Joins: vicfred (~vicfred@user/vicfred)
[20:43:31] *** Joins: zebrag (~chris@user/zebrag)
[20:46:18] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:49:28] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[20:50:41] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Quit: Leaving)
[20:50:45] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:51:24] *** Joins: Vajb (~Vajb@2001:999:600:5133:28cb:83bf:5ecf:4314)
[20:53:16] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[20:53:34] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:f10f:3b24:c2c7:662e)
[20:53:49] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:54:16] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:54:28] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[20:54:33] *** Joins: alx741 (~alx741@157.100.197.240)
[20:55:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[20:56:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[20:57:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:57:49] *** Joins: analognoise (~analognoi@212.102.45.103)
[20:59:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:59:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:59:12] *** Joins: wroathe (~wroathe@user/wroathe)
[21:00:34] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:f46a:7190:a000:4e97)
[21:00:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:02:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[21:03:38] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[21:05:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[21:08:18] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 260 seconds)
[21:12:43] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[21:13:23] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[21:13:40] *** Joins: alx741 (~alx741@157.100.197.240)
[21:14:13] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[21:15:36] *** Quits: jespada (~jespada@148.252.133.112) (Read error: Connection reset by peer)
[21:16:41] *** Quits: Guest28 (~Guest28@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[21:18:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:18:36] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[21:19:01] *** Joins: Akiva (~Akiva@user/Akiva)
[21:19:25] *** Quits: sterni (~lukas@user/sterni) (Ping timeout: 240 seconds)
[21:19:43] *** Joins: sterni (~lukas@user/sterni)
[21:21:01] *** Quits: xnbya (~xnbya@2a01:4f8:c17:cbdd::1) (Ping timeout: 240 seconds)
[21:21:07] *** Joins: xnbya (~xnbya@2a01:4f8:c17:cbdd::1)
[21:23:16] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[21:24:19] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[21:26:53] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:30:00] *** Joins: irishman (~vshev4enk@178.151.117.243)
[21:30:17] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[21:31:37] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[21:34:12] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 240 seconds)
[21:34:13] *** Quits: Vajb (~Vajb@2001:999:600:5133:28cb:83bf:5ecf:4314) (Read error: Connection reset by peer)
[21:34:32] *** Joins: Vajb (~Vajb@85-76-130-48-nat.elisa-mobile.fi)
[21:35:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:36:11] *** Joins: alx741 (~alx741@157.100.197.240)
[21:37:28] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[21:38:31] *** Quits: kenran (~kenran@200116b82b58bf00e0673ca75d341939.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[21:39:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:41:03] *** Quits: Vajb (~Vajb@85-76-130-48-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[21:41:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:41:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:41:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:41:36] *** Joins: wroathe (~wroathe@user/wroathe)
[21:42:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:44:27] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:44:55] *** Joins: irishman (~vshev4enk@178.151.117.243)
[21:44:59] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:5819:d51:74c8:3e0f) (Quit: Leaving)
[21:46:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:46:58] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[21:47:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[21:48:22] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[21:49:00] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 240 seconds)
[21:49:08] <bjourne> is there a tool for converting functions in pointfree style to applicative style?
[21:52:20] *** Joins: adverbs (~toy@110.136.217.207)
[21:53:31] <Clint> what?
[21:53:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[21:55:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[21:56:03] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:57:01] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 245 seconds)
[21:57:34] *** Joins: alx741 (~alx741@157.100.197.240)
[21:57:40] *** Quits: adverbs (~toy@110.136.217.207) (Ping timeout: 250 seconds)
[21:57:42] <bjourne> obfuscated haskell
[21:57:44] <bjourne> p = m (vr g) . ysu . mapV (m (vr g)) . mv (m (mv f)) . usy . m (gv 4)
[21:57:48] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[22:02:12] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:04:09] <hgolden> I care about everyone in the Haskell community: https://www.reddit.com/r/haskell/comments/t0hib5/i_care_about_everyone_in_the_haskell_community/?utm_source=share&utm_medium=web2x&context=3
[22:04:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:04:57] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[22:05:00] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:05:19] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:05:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:07:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:08:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[22:08:44] * ski . o O ( "Devils and Angels" <http://lambda-the-ultimate.org/classic/message4528.html>,<http://lambda-the-ultimate.org/classic/message6776.html>,<https://web.archive.org/web/20040919023420/http://www.math.chalmers.se/~augustss/AFP/problems/devils-n-angels/> )
[22:08:56] * ski . o O ( (p. 265) "Programming with Continuations" by Daniel P. Friedman,Christopher T. Haynes,Eugene Kohlbecker in 1984 at (p. 263) <https://link.springer.com/chapter/10.1007/978-3-642-46490-4_23> ; (p. 20) "Call with Current Continuation Patterns" by Darrell Ferguson,Dwight Deugo in 2001-08-24 at <https://3e8.org/pub/scheme/doc/Call%20with%20Current%20Continuation%20patterns.pdf> )
[22:09:43] <ski> bjourne : by using `Applicative (rho ->)' or what ?
[22:11:53] <ski> bjourne : what's the relevant type signatures ?
[22:17:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:18:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:19:47] *** Joins: dextaa_ (~dextaa@user/dextaa)
[22:23:01] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:23:27] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:24:04] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[22:24:12] *** Joins: alx741 (~alx741@181.199.42.143)
[22:26:18] <sm> nice hgolden ! likewise!
[22:26:44] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[22:26:57] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:27:22] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:30:21] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:31:14] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[22:33:05] <byorgey> bjourne: you mean like an inverse to lambdabot's @pointfree command?
[22:34:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:35:10] *** Joins: econo (uid147250@user/econo)
[22:35:38] <byorgey> I don't know of anything which does that automatically.
[22:35:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917) (Remote host closed the connection)
[22:35:56] <dolio> @unpl f . g  . h
[22:35:56] <lambdabot> (\ x -> f (g (h x)))
[22:36:24] <monochrom>  @pl already does both pointfree and applicative.
[22:36:33] <monochrom> @pl \x -> f x (g x)
[22:36:33] <lambdabot> ap f g
[22:36:40] <byorgey> oh! =D
[22:36:47] <monochrom> Just change that "ap" to "(<*>)".
[22:37:05] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:37:14] <byorgey> @unpl  m (vr g) . ysu . mapV (m (vr g)) . mv (m (mv f)) . usy . m (gv 4)
[22:37:14] <lambdabot> (\ x -> m (vr g) (ysu (mapV (m (vr g)) (mv (m (mv f)) (usy (m (gv 4) x))))))
[22:37:14] <monochrom> So "convert pointfree to applicative" sounds like nonsense. applicative is a special case of pointfree.
[22:37:28] <byorgey> not really an improvement
[22:38:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:42:41] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[22:44:36] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[22:44:41] *** Joins: alx741 (~alx741@181.199.42.143)
[22:45:00] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[22:45:44] *** Guest402 is now known as sudden
[22:46:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:49:00] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:49:20] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:50:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[22:50:59] *** Joins: bahamas (~lucian@84.232.140.52)
[22:52:49] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:55:50] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[22:56:40] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:58:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 240 seconds)
[22:58:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[23:00:01] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[23:00:17] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:03:47] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:04:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:04:30] *** Quits: Alex_test (~al_test@178.34.160.252) (Ping timeout: 260 seconds)
[23:05:26] *** Quits: AlexZenon (~alzenon@178.34.160.252) (Ping timeout: 260 seconds)
[23:05:48] *** Quits: AlexNoo (~AlexNoo@178.34.160.252) (Ping timeout: 240 seconds)
[23:06:05] *** Joins: alx741 (~alx741@157.100.197.240)
[23:07:01] *** Joins: AlexNoo (~AlexNoo@178.34.160.252)
[23:07:01] *** Joins: Alex_test (~al_test@178.34.160.252)
[23:07:13] *** Joins: AlexZenon (~alzenon@178.34.160.252)
[23:09:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:14:07] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:16:14] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[23:16:51] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:17:15] <Henson> is there a way I can use BangPatterns in data types with records?  I can do "data Foo = Foo !Double !Int" but I don't know if I can do "data Foo = Foo { !fooVal1 :: Double, !fooVal2 :: Int }" or some variation thereof
[23:17:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:17:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:17:45] <xerox> still bang on the type not the record name
[23:18:02] <geekosaur> @let data Foo = Foo { fooVal2 :: !Double }
[23:18:04] <lambdabot>  Defined.
[23:18:09] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:01] <Henson> xerox, geekosaur: thank you!
[23:21:08] <monochrom> If you don't mind reading a bit of grammar rules, it's covered at https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-690004.2.1
[23:21:12] *** Joins: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net)
[23:22:07] <Henson> monochrom: thank you for the reference
[23:23:59] *** Joins: Pickchea (~private@user/pickchea)
[23:26:06] *** Joins: alx741 (~alx741@157.100.197.240)
[23:26:18] *** Joins: irishman (~vshev4enk@178.151.117.243)
[23:30:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:18a5:3f32:4426:9917)
[23:30:37] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 240 seconds)
[23:32:00] *** Joins: coot (~coot@213.134.190.95)
[23:34:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[23:37:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:37:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:37:54] *** Joins: wroathe (~wroathe@user/wroathe)
[23:38:18] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:38:36] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:40:28] *** Joins: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it)
[23:41:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:43:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:43:32] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[23:44:31] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:44:34] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[23:46:45] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[23:47:37] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:48:11] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:48:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[23:49:20] <Zemyla> Why is minusNaturalMaybe not in Numeric.Natural?
[23:49:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:49:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:49:49] *** Joins: wroathe (~wroathe@user/wroathe)
[23:54:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:59:30] *** Joins: jz99 (~jz99@150.203.66.198)
