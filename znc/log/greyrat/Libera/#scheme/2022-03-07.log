[00:05:23] *** alMalsamo is now known as lumberjack123
[00:06:17] *** Joins: cjb (~cjb@user/cjb)
[00:07:30] <Zipheir> amazigh: No, it was funny.  I was being too serious.
[00:09:36] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[00:11:15] <edgar-rft> hygienic macros won't protect you against covid-19
[00:12:47] *** Joins: notzmv (~zmv@user/notzmv)
[00:18:37] <dpk> continuation barriers won't stop a Russian invasion?
[00:23:29] <Franciman> :)
[00:30:37] *** Joins: Shades (~Shades@201.pool85-61-208.dynamic.orange.es)
[00:33:14] <tokie> Franciman: https://lololo.lol/71 
[00:33:28] <tokie> my scheme has come a long way!
[00:42:50] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e0b4:325e:50ed:8971)
[00:42:50] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e0b4:325e:50ed:8971) (Changing host)
[00:42:50] *** Joins: skapata (~Skapata@user/skapata)
[00:52:28] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[00:56:21] *** Quits: Shades (~Shades@201.pool85-61-208.dynamic.orange.es) (Quit: Client closed)
[01:00:30] <libfud> no map yet?
[01:00:49] <tokie> no :/
[01:01:02] <libfud> I guess this is all in js?
[01:01:11] <tokie> no, it's rust compiled to webasm
[01:01:16] <libfud> ohh
[01:01:19] <libfud> interesting
[01:01:20] <tokie> https://github.com/strtok/marwood
[01:01:23] <libfud> do you have a repo?
[01:01:32] <tokie> it's a virtual machine based impl
[01:01:35] <libfud> neat
[01:01:53] <libfud> one of the things that really taught me a lot about programming was writing a lisp-style calculator in rust
[01:01:53] <tokie> i haven't written map yet because i was working on better error handling so map could have good errors
[01:01:59] <libfud> which turned into a very bad implementation of lisp
[01:03:09] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[01:03:30] <tokie> the VM approach ended up being quite a large project, but it made certain things like call/cc and TCO really easy
[01:03:42] <libfud> nice
[01:03:54] <libfud> rust has changed a lot since I first did that
[01:04:19] <libfud> it's always one of those things that I'd like to try again, but I have so many other higher priorities that I fear that I'll never get to it
[01:06:48] <tokie> it was definitely a lot of work. i think i'm at 13k line snow
[01:07:16] <tokie> *now :)
[01:10:30] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:12] <libfud> I believe it
[01:12:16] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:19:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:21:19] <Franciman> tokie: !
[01:21:22] <Franciman> awesome
[01:30:41] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[01:32:42] *** Joins: johnjaye (~pi@173.209.64.74)
[01:34:46] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[01:39:20] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Client Quit)
[01:41:44] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[01:48:19] *** Joins: badkins (~badkins@136.56.92.199)
[01:56:46] <amazigh> indeed
[01:57:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:01:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:25:24] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[02:45:02] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[02:51:13] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[03:09:48] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[03:12:15] <amazigh> do you know reggae singer bob marley? you surely know bob marlex...
[03:12:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[03:12:22] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[03:13:45] <Zipheir> Is bob marlex a lexer?
[03:14:14] <amazigh> :D
[03:14:21] <amazigh> no, it is reggex singer.
[03:14:29] <Zipheir> Heh :)
[03:15:35] <Zipheir> No matches, no cry.
[03:15:43] <amazigh> :)
[03:16:58] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:22:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:25:09] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[03:35:31] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:45:35] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[03:47:19] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[03:50:24] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Remote host closed the connection)
[03:52:32] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[03:54:24] *** Joins: johnjaye (~pi@173.209.64.74)
[04:11:02] *** Joins: Goodbye_Vincent (~Goodbye_V@freakshells.net)
[04:15:07] *** Joins: badkins (~badkins@136.56.92.199)
[04:15:21] *** Joins: zacque (~zacque@175.143.120.93)
[04:17:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:19:52] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:27:36] *** Joins: badkins (~badkins@136.56.92.199)
[04:28:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:31:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:33:00] *** Joins: lispy (~lispy@user/lispy)
[04:40:32] *** Joins: daviid` (~user@2804:18:5026:4814:9b5d:8ad5:8154:d0b1)
[04:41:31] *** Joins: badkins (~badkins@136.56.92.199)
[04:42:13] *** Quits: opfez (~opfez@ti0013a400-0518.bb.online.no) (Ping timeout: 256 seconds)
[04:42:34] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 272 seconds)
[04:45:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:47:09] *** Joins: daviid`` (~user@189.76.168.84)
[04:48:32] *** Quits: daviid` (~user@2804:18:5026:4814:9b5d:8ad5:8154:d0b1) (Ping timeout: 240 seconds)
[04:58:00] *** Joins: frost (~frost@user/frost)
[04:58:00] *** Quits: daviid`` (~user@189.76.168.84) (Read error: Connection reset by peer)
[04:59:47] *** Joins: daviid`` (~user@179.210.58.162)
[05:03:31] *** Quits: daviid`` (~user@179.210.58.162) (Remote host closed the connection)
[05:08:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[05:08:39] *** Joins: notzmv (~zmv@user/notzmv)
[05:09:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:11:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:12:39] *** Joins: opfez (~opfez@ti0013a400-3552.bb.online.no)
[05:17:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 272 seconds)
[05:20:59] *** Joins: frost (~frost@user/frost)
[05:26:44] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:36:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 272 seconds)
[05:37:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:38:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:38:36] *** Joins: frost (~frost@user/frost)
[05:40:04] *** Joins: badkins (~badkins@136.56.92.199)
[05:43:10] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[05:44:52] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:48:09] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[05:55:25] *** Joins: vats (~vats@103.216.143.6)
[06:07:00] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[06:11:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:16:32] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[06:17:07] *** Joins: aeka (~aeka@user/hiruji)
[06:19:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:20:09] *** Quits: aeka (~aeka@user/hiruji) (Client Quit)
[06:20:45] *** Joins: daviid (~user@2804:18:484b:a27d:758a:52d2:1c14:a952)
[06:20:45] *** Joins: aeka (~aeka@user/hiruji)
[06:20:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:22:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[06:26:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:27:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[06:29:09] *** Joins: frost (~frost@user/frost)
[06:42:40] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[06:59:22] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[07:24:54] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:38:38] *** Quits: lispy (~lispy@user/lispy) (Ping timeout: 272 seconds)
[07:39:54] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[07:52:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:09:22] *** Joins: klf (~fkl@66.220.197.183)
[08:10:11] <klf> (define (foo x) (... <dragons awaken> ...))
[08:10:13] <klf> (+ 2 (foo 666))
[08:10:44] <klf> For a type-checker, what is 
[08:11:18] <klf> a reasonable expression type that we should assign to a function call?
[08:11:39] <Zipheir> a -> b
[08:11:52] <Zipheir> Ah, a function call.
[08:12:10] <Zipheir> Well, if f : a -> b and x : a, then (f x) : b.
[08:14:54] <Zipheir> Although things are more complicated than that with actual Scheme procedures, of course.
[08:15:00] <klf> does that mean the parser need to evaluate the body of foo in order to infer the return type?
[08:15:18] <klf> err... I mean type-checker
[08:15:27] <klf> s/parser/type-checker/
[08:15:39] <Zipheir> No.
[08:16:25] <Zipheir> There are many type systems, but, in most of them, provided every value is well-typed, you don't *need* to apply computation rules to derive a type.
[08:16:47] <klf> (define (foo x) (body1 body2 ...))
[08:17:19] <Zipheir> (That's not the case in Scheme, since a procedure could return any number of different types of values depending on its arguments.)
[08:17:53] <klf> Zipheir: yes, let's talk Scheme (case) :-)
[08:18:35] <klf> For a type-checker, what is a reasonable expression type that we should assignt to a functiono call of a function, in this case `foo`
[08:18:36] <Zipheir> Non-side-effecting Scheme procedures have type Scheme-Obj ... -> Scheme-Obj ...
[08:18:37] <Zipheir> :)
[08:19:31] <Zipheir> klf: "function call of a function"?
[08:20:07] <klf> s/ of a function//
[08:20:12] <klf> :)
[08:20:21] <Zipheir> OK, a function call is not a value.
[08:21:00] <Zipheir> (f x) is not a function call; it is a value in the range of f.
[08:21:01] <s-liao> What is the function call?
[08:21:22] <aeth> '(f x)
[08:21:39] <aeth> because Zipheir is doing eval on it :-p
[08:21:46] <Zipheir> Hah.
[08:21:52] <s-liao> (apply func)
[08:22:21] <Zipheir> klf: Don't get confused by the *operational* idea of a function call.  When we're talking types, we just want to know what the value is.
[08:22:27] <klf> In the context of: "Static type checking is usually performed through the assignment and evaluation of type expressions, each assigned a certain expression type."
[08:22:39] <klf> In the case of C, we have something like this: https://imgur.com/a/nJo4Cvf
[08:23:02] <Zipheir> Oh boy, C...
[08:23:35] <Zipheir> klf: Have you heard of The Little Typer?
[08:24:34] <klf> Some Type expression tree for ya
[08:24:36] <klf> https://imgur.com/a/U5v7Niv
[08:24:59] <Zipheir> s-liao: klf was asking what "the type of a function call" is, and I was saying that doesn't really make sense aside from the type of the *value* of the application.
[08:25:22] <Zipheir> klf: Please use text pastes when possible.
[08:25:56] <Zipheir> klf: How is an "identifier" a type?
[08:26:12] <Zipheir> This seems to mix language syntax and types.
[08:26:40] <Zipheir> I think I see what causing the confusion.
[08:29:20] <Zipheir> klf: Usually, type inference/checking is done *after* an expression has been parsed.  So (Apply f x) might be part of a syntax tree.  Doing type inference on it *then* finds a type that fits it.
[08:31:30] <klf> okay, please work out a very simple example: let's go through the inference/checking that occurs on `(+ 2 foo(2))`
[08:32:02] <Zipheir> klf: (+ 2 (foo 2)), right?
[08:32:28] <klf> yessir.
[08:33:07] <Zipheir> klf: Let's say for simplicity that + : Integer -> Integer -> Integer.  Then (+ x y) : Integer if x : Integer and y : Integer is the rule we want to apply.
[08:33:41] <Zipheir> klf: So, now, (foo 2) must be an integer.  What does foo return?
[08:34:45] <Zipheir> If, for example, foo has type Integer -> Integer, then (+ 2 (foo 2)) is well-typed; it's an Integer.
[08:35:03] <Zipheir> But, if foo : Integer -> String, say, the whole thing isn't well-typed.
[08:35:04] <klf> the example rule you just talked about makes perfect sense, and it's easy to understand.
[08:35:08] <Zipheir> klf: Does that make sense?
[08:36:29] <klf> but since "in Scheme, since a procedure could return any number of different types of values depending on its arguments"
[08:37:03] <klf> it's not easy to infer, wel... at least I don't know how a type-checker would infer it
[08:37:36] <Zipheir> These rules are often written in inference rule form, vide https://en.wikipedia.org/wiki/Natural_deduction
[08:38:05] <Zipheir> klf: Yeah, type inference doesn't work in Scheme without a lot of additional structure (check out Typed Racket).
[08:38:24] <Zipheir> (Type inference also generally doesn't work in any language with inheritance.)
[08:40:22] <klf> Let me share with you what's been taught in class and why it doesn't really apply here, which explains my confusion.
[08:40:26] <Zipheir> Pie, from the Little Typer, is the "most typed" Scheme variant.
[08:40:39] <s-liao> C++ template has type inference.
[08:41:45] <Zipheir> s-liao: Really?  It's got to have runtime support for that, I guess.
[08:41:46] <klf> As you saw from my lecture slides, the example was for C. The general rule that the prof said was to assign a "more general type" to the operand if it's undeterminable
[08:42:39] <klf> 2 * (*x[i]);  that's why type $float was assigned to the right operand
[08:43:16] <Zipheir> That's a practical tactic, but in classical type theory no value can be "undeterminable" if every expression has a type.
[08:43:26] <klf> (more accurately, assigned to the tyep expression that corresponds the right operand)
[08:43:42] <Zipheir> klf: That's actually a cast in disguise.
[08:44:18] *** Quits: daviid (~user@2804:18:484b:a27d:758a:52d2:1c14:a952) (Ping timeout: 252 seconds)
[08:44:33] <Zipheir> klf: They're talking about a type system in which there are additional (but hidden) inference rules that allow values of one type to be converted to another.
[08:45:27] <Zipheir> e.g. a rule Pointer-to-Float   x : Pointer | x : Float
[08:45:41] <klf> https://imgur.com/a/Jo7enqc (the entire slide)
[08:46:31] <Zipheir> klf: Here's a question to consider: If you apply all of your type rules, and you have a term with two possible types, which do you choose?
[08:47:11] <klf> no f'n idea :S lol
[08:47:46] <Zipheir> klf: Exactly.
[08:48:34] <Zipheir> klf: So a basic assumption of most languages/type systems is that a unique type can be determined for every expression.
[08:49:32] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:50:08] <Zipheir> And this is why adding casts makes type inference a lot more complicated.
[08:50:20] <Zipheir> So C is a hard example!
[08:59:10] <klf> so, "Yeah, type inference doesn't work in Scheme without a lot of additional structure (check out Typed Racket).", answers my question.
[08:59:26] <klf> take, (define (foo) "hello" 2 12.3 y), for example
[08:59:33] <klf> where y isn't even defined.
[09:01:38] <klf> Zipheir: yet another newbie question, does type-checking (usually) occur before or after evaluation?
[09:01:53] *** Joins: livoreno (~livoreno@user/notzmv)
[09:02:02] <klf> > (+ 2 (foo))
[09:02:15] <klf> err_mesg: " y: undefined;"
[09:02:15] <Zipheir> klf: Before, but this is a fuzzy line with dependent types.
[09:04:25] <klf> in that case, at least without casting like you mentioned, I can  understand why: "a basic assumption of most languages/type systems is that a unique type can be determined for every expression."
[09:04:29] <klf> thank you.
[09:04:30] <Zipheir> Obviously evaluating programs to find their types is not a workable general solution, since you have to solve the halting problem.
[09:04:48] <Zipheir> klf: yw!
[09:05:03] <klf> ahh... I spoke too soon.
[09:05:08] <klf> There's the halting problem.
[09:05:35] <klf> bah... so is it or is it not a reasonable assumption to have? lol
[09:06:32] <Zipheir> It is.  You just have to craft your language so that everything has a type.  (Some languages also guarantee that every program halts.)
[09:06:40] <Zipheir> Agda, Idris, ...
[09:07:40] <Zipheir> klf: There are tons of details.  I'll recommend The Little Typer again as a great way to get into the topic.
[09:07:44] <Zipheir> Also plfa.github.io
[09:08:23] <klf> Little Typer, as the name suggests is another book my Felleison
[09:08:31] <klf> I'll look it up
[09:08:55] <Zipheir> No Felleisen this time, just Dan Friedman and David Christiansen.
[09:09:25] <Zipheir> It's my second-favorite Little book.
[09:13:23] *** Joins: masoudd (~masoudd@user/masoudd)
[09:18:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[09:23:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:31:45] <klf> > (+ 2 (foo))
[09:31:53] <klf> err_mesg: " y: undefined;"
[09:32:11] <klf> at which stage is this err_mesg emitted?
[09:33:14] <klf> evaluation of foo?
[09:35:34] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:41:49] *** Joins: badkins (~badkins@136.56.92.199)
[09:42:40] <s-liao> like lambda accept the undedined as the value. But it is an unknown type.
[09:45:05] <klf> ^ "a basic assumption of most languages/type systems is that a unique type can be determined for every expression."
[09:45:33] <klf> I came up with that example for a reason.
[09:46:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:46:40] <klf> well... I guess there's a difference between "undeterminable" and "unknown"
[09:49:02] <s-liao> Not sure exactly, like that there is a set, it is unknown. it can be a value as well.
[09:58:13] <s-liao> Most like this is in the implementation level. The theory might not detail in this level.
[09:59:43] *** Joins: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:12:51] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[10:13:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:20:12] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[10:20:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[10:27:05] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[10:28:30] *** Joins: agumonkey (~user@88.163.231.79)
[10:33:49] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:37:03] *** Quits: zacque (~zacque@175.143.120.93) (Quit: Goodbye :D)
[10:57:27] *** Joins: zacque (~zacque@175.143.120.93)
[11:02:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:12:12] *** Quits: vats (~vats@103.216.143.6) (Ping timeout: 240 seconds)
[11:21:17] <sjamaan> amazigh: Ah, you finally received it?
[11:29:10] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[11:32:13] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[11:35:52] *** Joins: civodul (~user@guix/contributor/civodul)
[11:44:18] <amazigh> sjamaan: yes
[11:48:27] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:53:36] <sjamaan> Nice to hear it's working well for you
[12:02:11] *** Quits: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[12:02:27] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Read error: Connection reset by peer)
[12:04:15] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[12:05:46] *** Joins: TCZ (~tcz@91.150.178.124)
[12:11:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:21:45] *** Joins: daviid (~user@179.210.58.162)
[12:29:04] *** Joins: masoudd (~masoudd@user/masoudd)
[12:31:46] *** Joins: klovett_ (~klovett@107.116.92.161)
[12:35:16] *** Quits: klovett (~klovett@107.116.92.161) (Ping timeout: 250 seconds)
[12:41:19] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[12:41:43] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[12:42:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:42:56] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:01:07] *** Quits: klf (~fkl@66.220.197.183) (Remote host closed the connection)
[13:08:40] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[13:18:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[13:18:37] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[13:26:58] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[13:27:31] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[13:27:31] *** karlosz_ is now known as karlosz
[13:30:40] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:32:10] *** wingo_ is now known as wingo
[13:33:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:35:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[13:43:45] *** Joins: badkins (~badkins@136.56.92.199)
[13:48:14] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[13:53:26] *** Joins: seninha (~chatzilla@user/seninha)
[13:57:44] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[14:01:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[14:01:49] *** karlosz_ is now known as karlosz
[14:09:46] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:10:23] *** Quits: klovett_ (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[14:12:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:12:37] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[14:19:20] *** Joins: amk (~amk@109.255.169.126)
[14:49:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[15:08:48] *** Joins: amk (~amk@109.255.169.126)
[15:25:29] *** Quits: zacque (~zacque@175.143.120.93) (Quit: Goodbye :D)
[15:43:29] *** Joins: agumonkey (~user@88.163.231.79)
[16:16:30] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: Ping timeout (120 seconds))
[16:17:17] *** Joins: optimist (~optimist@223.226.147.62)
[16:18:22] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[16:20:39] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:31:17] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[16:31:27] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[16:42:30] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[16:43:24] *** Joins: robin (~robin@user/terpri)
[16:49:07] *** Quits: optimist (~optimist@223.226.147.62) (Remote host closed the connection)
[16:49:54] *** Joins: optimist (~optimist@223.226.147.62)
[17:00:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:01:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[17:02:57] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:08:55] *** Joins: badkins (~badkins@136.56.92.199)
[17:08:59] *** Joins: klovett (~klovett@107.116.92.161)
[17:15:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:24:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:34:04] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[17:38:44] *** Quits: daviid (~user@179.210.58.162) (Remote host closed the connection)
[17:39:02] *** Joins: daviid (~user@179.210.58.162)
[17:40:00] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[17:45:40] *** rgherdt_ is now known as rgherdt
[17:46:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:54:51] *** Joins: badkins (~badkins@136.56.92.199)
[17:57:32] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[18:05:54] *** Joins: madage (~madage@user/madage)
[18:07:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:07:49] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:20:16] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[18:24:58] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[18:26:55] *** Joins: johnjaye (~pi@173.209.64.74)
[18:37:42] *** Joins: seninha (~chatzilla@user/seninha)
[18:52:30] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[18:58:55] *** Quits: optimist (~optimist@223.226.147.62) (Remote host closed the connection)
[19:06:52] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[19:10:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:15:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3119:cbb9:a9db:3cc5)
[19:15:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3119:cbb9:a9db:3cc5) (Changing host)
[19:15:04] *** Joins: skapata (~Skapata@user/skapata)
[19:18:16] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[19:18:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[19:32:27] *** Quits: Perryman_ (~perryman@216.97.249.113) (Ping timeout: 256 seconds)
[19:46:36] *** Joins: badkins_ (~badkins@136.56.92.199)
[19:49:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[19:55:26] *** Joins: lispy (~lispy@user/lispy)
[19:56:14] <lispy> Hi, 'best' Scheme implementation for interop with C? So I can use libraries.
[20:05:44] <sonny> chicken and bigloo perhaps
[20:05:58] <sonny> guile also
[20:06:21] <gwatt> Most schemes have a decent FFI, but I suspect chicken is probably the best. It includes a C parser to manage the FFI, and allows embedding C code in your scheme source.
[20:13:20] *** Quits: badkins_ (~badkins@136.56.92.199) (Remote host closed the connection)
[20:17:24] *** Joins: X-Scale` (~ARM@46.50.5.194)
[20:19:16] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[20:19:17] *** X-Scale` is now known as X-Scale
[20:25:05] <lispy> Sorry for the late response. Thanks for the answers! I'll check out Chicken and Guile scheme
[20:26:42] <Zipheir> chibi is intended to be embedded in C programs and has a pretty straightforward FFI.
[20:27:12] <Franciman> Zipheir: did you do any further progress on finger trees?
[20:27:55] <Zipheir> Franciman: Oof, no.  I put them aside for a while, until I have time to understand measuring them better.
[20:28:24] <Franciman> i started an implementation in sml
[20:28:36] <Franciman> but have a hard time figuring out some things too :(
[20:28:38] <Zipheir> In particular, how much laziness has to be involved to get the advertized amortized complexity?  The papers don't say.
[20:28:48] <Franciman> yes that one too!
[20:28:59] <Franciman> i was planning to use finger-trees as the backing structure for my scheme's list
[20:29:02] <Franciman> but i think it is dumb
[20:29:12] <Franciman> i had better have a separate data structure for them
[20:29:27] <Franciman> so they can wait a bit, and i can do some more work on the interpreter
[20:29:37] <Zipheir> Yes.  You could always use Okasaki's random-access lists, which are a lot simpler.
[20:31:11] <Zipheir> In any case, I'd like to see the SML finger trees, if you do go back to work on them.
[20:31:21] <Franciman> will do, surely
[20:32:07] <Franciman> right now i must understand how appending works
[20:32:27] <Franciman> and why it requires that I add `Three` as a `Some a` constructor
[20:32:46] <Franciman> that's the only part left before going to measures
[20:34:11] <Zipheir> Franciman: Which paper is your version based on, Claessen 2020 or Hinze & Paterson?
[20:34:37] <Franciman> Claessen
[20:34:47] <Zipheir> Ah, good.
[20:36:27] <Franciman> http://comonad.com/reader/2010/finger-trees/ this post by kmett is also amusing
[20:38:58] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:39:43] <Zipheir> I don't find his slides very clear.  Tons of code, among other things.  I appreciate that Claessen's version is pretty simple and concise.
[20:40:19] <Franciman> true
[20:40:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:40:32] <Franciman> the 2-3 tree based derivation is not clear at all to me
[20:40:47] <Franciman> while claessen's one is pretty simple, conceptually
[20:41:56] <Zipheir> The way the subtrees are stored "compacted" is really beautiful.
[20:46:09] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[20:51:57] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:53:21] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[21:04:47] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[21:05:38] <dpk> well, scheme-reports-wg2 is busy today
[21:12:32] <amazigh> Franciman: someone knowledgeable told me to use log-based balanced trees
[21:12:36] <Zipheir> Indeed.  Side note: Google's various web apps really suck for following ml discussions.
[21:13:16] <Franciman> amazigh: sorry for what?
[21:13:22] <Franciman> for deriving finger trees? Or instead of finger trees?
[21:14:20] <amazigh> I asked whether fingertrees were good for an text editor buffer data-structure, they replied that it is better to use lbst.
[21:15:02] <amazigh> a text editor buffer is a immutable list
[21:15:20] <Zipheir> Given that there are thousands of text editors and a new one is unlikely to break the top 100, I say go for whatever cool idea you've got.
[21:15:25] <amazigh> Franciman: instead of finger trees.
[21:15:47] <Zipheir> A finger tree sounds like a perfectly good buffer structure.
[21:16:08] <Zipheir> Although inserting a line might require some thinking.
[21:16:19] <Zipheir> s/line/chunk of text/
[21:16:30] <amazigh> I still need better benchmarks to compare with copying, but so far from a wall-clock time perspective copying is somewhat good.
[21:16:53] *** Joins: evdubs (~evdubs@user/evdubs)
[21:17:24] <amazigh> both fingertrees and lbst are fun :)
[21:19:17] <Zipheir> What's an LBST?  Log Based Spruce Tree?
[21:20:17] <Franciman> thanks amazigh 
[21:20:20] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:3efa:4129:9497:b7d9)
[21:23:08] <Zipheir> dpk: I can't see where it's all going.
[21:25:52] <dpk> nowhere good
[21:27:00] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[21:29:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:30:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[21:35:52] *** Joins: Perryman_ (~perryman@216.97.249.113)
[21:36:36] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 240 seconds)
[21:38:56] *** Joins: notzmv (~zmv@user/notzmv)
[21:41:52] *** Joins: taylan (~taylan@user/taylan)
[21:44:29] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[21:44:50] *** Joins: agumonkey (~user@88.163.231.79)
[21:47:18] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[21:52:44] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[21:59:31] <gwatt> Zipheir: Logarithmic Binary Search Tree
[22:02:24] <dpk> now we are already talking about R8RS, sigh
[22:02:45] <Franciman> lol
[22:03:43] *** Joins: seninha (~chatzilla@user/seninha)
[22:04:10] * edgar-rft eagerly awaits R<bignum>RS
[22:04:10] <Zipheir> gwatt: ty
[22:13:53] *** Joins: badkins (~badkins@136.56.92.199)
[22:18:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[22:20:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:23:22] <gwatt> I propose a new standard which is a product of r6rs and r7rs. It will be called r42rs, which is perfect because 42 is the answer to life, the universe, and everything.
[22:24:04] <amazigh> re lbst the paper is at: https://scholar.google.fr/scholar?cluster=16806430159882137269
[22:24:10] <amazigh> great idea gwatt
[22:24:19] <sonny> maybe it's just time for scheme2
[22:24:42] <Zipheir> Didn't Microsoft just jump to "Windows 7"?
[22:24:47] <gwatt> windows 10
[22:24:58] <Zipheir> Right, there was no 9.
[22:25:13] <Zipheir> (Perhaps a veiled tribute to Plan 9?)
[22:25:19] <gwatt> Microsoft's product naming is all kinds of bonkers
[22:25:39] <amazigh> schememe :)
[22:26:00] <dpk> Windows 7 was actually version 6.1 of the OS kernel, as well
[22:26:01] <Zipheir> Almost as confusing as id Software: Doom, Doom II, Doom 3, Doom.
[22:26:02] <gwatt> Zipheir: well, the official reason is that windows 10 was such an improvement they wanted to jump ahead a version number and skip 9.
[22:26:50] <Zipheir> gwatt: Hahah, great PR.
[22:27:01] <gwatt> A suspected technical reason is that there was a ton code doing windows version checks by comparing the string start to "Windows 9" to detect 95/98
[22:27:17] <Zipheir> "It's too innovative to be the next version.  It's the version after that!"
[22:28:41] <Zipheir> gwatt: That sounds much more likely.
[22:29:33] <gwatt> Also: Xbox One, Xbox Series X/S, Xbox, Xbox 360. (Those are out of order. Try and guess the correct order)
[22:33:42] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:40:48] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[22:40:51] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[22:42:35] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Client Quit)
[22:43:01] *** Joins: badkins (~badkins@136.56.92.199)
[22:46:54] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:49:05] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[22:51:21] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:55:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:56:35] <amazigh> X/S is the latest
[22:56:46] <amazigh> it looks avant garde
[22:57:00] *** Quits: mjsir911 (~bnc@user/mjsir911) (Remote host closed the connection)
[22:57:15] *** Joins: mjsir911 (~bnc@user/mjsir911)
[22:58:06] <gwatt> Is it the sheer rectangles?
[22:59:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[22:59:45] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[23:02:56] <Zipheir> Xbox Malevich.
[23:03:35] <amazigh> gwatt: is the only one that reminds me of nothing 
[23:05:14] <Zipheir> "It's like how much more black could it be?  And the answer is none ... more black."
[23:13:23] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:19:31] <mdhughes> Hotblack Desiato is what made me dress/gear up the way I do. All black. Push a black button and a black panel shows in black, don't push the button.
[23:33:04] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[23:36:17] *** Joins: notzmv (~zmv@user/notzmv)
[23:58:20] *** Joins: cjb (~cjb@user/cjb)
