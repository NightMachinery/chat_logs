[00:00:42] *** Joins: trevors (~trevors@user/trevors)
[00:01:37] *** Quits: japh (~scp1@user/japh) (Remote host closed the connection)
[00:08:10] *** Quits: victor (uid208353@user/victor) (Quit: Connection closed for inactivity)
[00:09:38] *** Quits: panella32 (~panella32@45.130.83.218) (K-Lined)
[00:10:37] *** Quits: stagas (~stagas@2a02:587:c421:9272:1d6e:80:f414:a49d) (Ping timeout: 268 seconds)
[00:11:27] *** Joins: panella32 (~panella32@s91904423.blix.com)
[00:15:22] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (Ping timeout: 260 seconds)
[00:17:58] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[00:23:45] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[00:26:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[00:28:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:31:14] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:31:21] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:32] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:41:57] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[00:42:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:55:15] *** Quits: nomic (~nomic@185.192.69.25) (Quit: Leaving)
[00:55:34] *** Joins: nomic (~nomic@185.192.69.25)
[00:56:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[01:00:04] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[01:00:23] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[01:01:14] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[01:01:21] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[01:01:22] *** Joins: jazzy (~jaziz@user/jaziz)
[01:01:42] *** Joins: pulse (~pulse@user/pulse)
[01:05:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:07:19] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:08:35] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 268 seconds)
[01:10:34] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:11:36] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:13:39] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[01:14:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:14:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:14:06] *** Joins: wroathe (~wroathe@user/wroathe)
[01:14:37] *** Quits: panella32 (~panella32@s91904423.blix.com) (Ping timeout: 240 seconds)
[01:14:42] *** Joins: panella32_ (~panella32@45.130.83.210)
[01:16:02] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[01:17:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[01:18:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:22:05] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[01:22:11] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[01:24:02] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[01:24:57] *** Quits: panella32_ (~panella32@45.130.83.210) (Ping timeout: 240 seconds)
[01:27:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[01:29:15] *** Joins: src (~src@user/src)
[01:31:25] *** Joins: stagas (~stagas@2a02:587:c421:9272:39c:4021:871d:bf87)
[01:32:34] *** Joins: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net)
[01:39:44] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[01:41:47] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Quit: Konversation terminated!)
[01:41:50] *** Joins: noarb (~noarb@user/noarb)
[01:42:39] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[01:45:04] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.3)
[01:45:44] *** Joins: noarb (~noarb@user/noarb)
[01:47:27] *** Quits: bobdobbs (~user@116.251.149.196) (Remote host closed the connection)
[01:47:32] *** Joins: onosendi (~onosendi@user/onosendi)
[01:47:55] *** Joins: JohnnyL (~johntalen@ool-18be2731.dyn.optonline.net)
[01:48:29] <ljharb> JohnnyL: you need to auth with nickserv for non-ops to see what you say; see the last link in the topic
[01:49:14] *** Joins: retsi (~retsi@45.227.79.168)
[01:49:16] <ljharb> JohnnyL: happy to help you as soon as you're authed
[01:49:58] <JohnnyL> okay. i'm authed.
[01:50:22] *** Quits: JohnnyL (~johntalen@ool-18be2731.dyn.optonline.net) (Client Quit)
[01:50:35] <ljharb> awesome
[01:50:39] <ljharb> oops
[01:51:43] <onosendi> I guess he figured it ou.
[01:51:49] *** Joins: JohnnyL (~johntalen@ool-18be2731.dyn.optonline.net)
[01:51:55] <JohnnyL> Okay. i'm ready.
[01:51:56] <JohnnyL> hit me.
[01:52:05] <ljharb> ok there we go
[01:52:14] <JohnnyL> what's the deal.
[01:52:15] <ljharb> JohnnyL: ok so, there's no such thing as "static variables", so you'll need to elaborate
[01:52:19] *** Quits: Carbone5 (~Carbone5@ool-44c63532.dyn.optonline.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:52:27] <ljharb> there's just variables. and then there's static class properties (which are on the constructor)
[01:52:37] <JohnnyL> how can I maintain variable state over a function's lifetime.
[01:52:45] <JohnnyL> ?
[01:52:50] *** Joins: panella32 (~panella32@45.130.83.210)
[01:52:55] <JohnnyL> i've tried class variables.
[01:52:55] <ljharb> JohnnyL: by using closures
[01:53:02] <JohnnyL> i'm seriously f***** pissed.
[01:53:09] <JohnnyL> show an example please.
[01:53:11] <ljharb> n> var x = 1; function f() { x += 1; return x; } [f(), f(), f()] @ JohnnyL
[01:53:14] <jellobot> JohnnyL, [ 2, 3, 4 ]
[01:53:19] *** Joins: remote (~self@user/hackers)
[01:53:22] <ljharb> functions don't have their own state
[01:53:29] <ljharb> (also there's no class variables)
[01:53:40] <ljharb> !eloquent @ JohnnyL
[01:53:41] <jellobot> JohnnyL, Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/
[01:53:44] <ljharb> this free book might help
[01:54:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:55:22] <ljharb> JohnnyL: if you have some code, you can put it in a codesandbox, and then i can show you how to change it
[01:55:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:56:23] <JohnnyL> no, still no good.
[01:56:31] <JohnnyL> ljharb: THANK GOD.
[01:57:15] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:57:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:57:31] <JohnnyL> http://pastie.org/p/2c2YwhJOUSHaLqz8uNIrN5
[01:57:43] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[01:58:22] <JohnnyL> what am I doing wrong?
[01:59:21] <ljharb> JohnnyL: next time please use codesandbox, then it's runnable and editable
[01:59:31] <ljharb> JohnnyL: ok so, a few things
[01:59:35] <ljharb> JohnnyL: first, JS never goes inside html, only in a .js file
[02:00:07] <ljharb> JohnnyL: also this is a lot of code, using very unidiomatic snake_casing, so it's a bit hard to read, and i have no idea where the problem is
[02:00:24] <ljharb> JohnnyL: oh also, don't use `.onblur =`, use `addEventListener`
[02:01:44] <systemfault> "i" is used before being declared, you can't assign an object to an event handler no matter the form
[02:01:59] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[02:02:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:02:17] <JohnnyL> wow, now i have trouble with your code sandbox.
[02:02:20] <avu> the indentation and all the missing whitespace triggers me much more than the snake case =)
[02:02:41] <JohnnyL> avu: try editing in the vim that I"m using. it gets funner.
[02:03:08] <avu> JohnnyL: I've used vim for years, it's not that hard to get right
[02:03:12] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:04:00] <JohnnyL> systemfault: what on earth are you talking about. i is a loop variable that's declared.
[02:04:01] <avu> the space key for example works remarkably similar to other editors most of the time (:
[02:04:16] <ljharb> JohnnyL: no it's not
[02:04:17] <JohnnyL> avu: it pops all over the place.
[02:04:21] <ljharb> JohnnyL: using a variable in a loop does NOT declare anythin
[02:04:26] <ljharb> JohnnyL: you still must use var, const, or let
[02:04:33] <ljharb> JohnnyL: like `for (var i = 0`
[02:04:34] <systemfault> "j" has the same problem
[02:05:02] <JohnnyL> systemfault: are you talking about get_random_number?
[02:05:15] <JohnnyL> that's the only i that exists. and it's declared perfectly fine.
[02:05:25] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 240 seconds)
[02:05:28] <JohnnyL> it's valid javscript and works fine.
[02:05:30] <systemfault> We're two people telling you that you're not...
[02:05:31] *** Joins: Betal (~Betal@user/betal)
[02:06:01] *** Quits: panella32 (~panella32@45.130.83.210) (Quit: Textual IRC Client: www.textualapp.com)
[02:06:25] <systemfault> using variables without declaring them creates globals... it still "technically work" but
[02:07:02] <ljharb> JohnnyL: just because it parses doesn't mean it's valid
[02:07:34] <ljharb> JohnnyL: a variable in javascript is NEVER declared unless it's been declared with `var`, `const`, or `let`, or is a function argument or a catch binding.
[02:07:37] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[02:07:39] <ljharb> using it in a loop doesn't achieve that.
[02:07:47] <ljharb> (oh also, an `import` binding)
[02:08:45] *** Joins: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e)
[02:10:45] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:11:05] <JohnnyL> those loop variables have been working fine. I added 'var' to each loop and I get the same exact results.
[02:11:31] <JohnnyL> wow, this shouldn't be rocket science.
[02:12:11] <JohnnyL> i added eventlistener, no difference in results.
[02:12:20] <JohnnyL> so here I am.
[02:12:40] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Remote host closed the connection)
[02:13:31] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:14:48] *** Quits: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e) (Remote host closed the connection)
[02:14:55] <JohnnyL> <plays jeapordy tune>
[02:15:09] <ljharb> JohnnyL: again, can you make a runnable example?
[02:15:33] <ljharb> JohnnyL: when your code has dozens of problems, you can't expect it to start working as you fix each problem one at a time. all of the problems need to be fixed before it works.
[02:15:59] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[02:16:03] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[02:16:55] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[02:19:22] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[02:19:42] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:21:12] <JohnnyL> i just gave you a running example. you need to use cut and paste.
[02:24:42] *** Joins: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e)
[02:25:49] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 240 seconds)
[02:26:12] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860)
[02:26:35] <avu> JohnnyL: no you need to use codesandbox or something similar to accomodate the people offering you free help
[02:27:44] *** Quits: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e) (Remote host closed the connection)
[02:29:40] <JohnnyL> avu: maybe if I pass the bar I can get my code working on codesandbox.
[02:30:02] *** Quits: Sven_vB_ (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:28] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:30:45] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:32:40] *** Quits: pizdets_ (~pizdets@183.182.115.92) (Ping timeout: 250 seconds)
[02:33:37] <gde35> anyone use js in XLST?
[02:33:50] *** Joins: pizdets (~pizdets@183.182.111.169)
[02:34:19] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:34:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:34:41] <gde35> can one access/modify the xls style sheet?
[02:35:36] *** ogin is now known as ingo
[02:36:18] *** Joins: Rockwood (~Rocky@user/rocky)
[02:36:21] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[02:36:24] <gde35> I imagine if you can run js you should be able to add nodes to the document but is the final document just html?
[02:37:19] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[02:37:43] <JohnnyL> what i want to know is how am I actually going to use spaces so people here can read my code.
[02:37:57] <JohnnyL> because so far it's the only things that's been processed.
[02:38:52] <gde35> I wonder if one could style an OPML as a forum index and use rss for the topics (no idea how to do the hierachy stuff in between tho)
[02:39:17] <gde35> JohnnyL: reading back...
[02:39:21] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:40:02] <gde35> JohnnyL: you are looking for scoping I think?
[02:40:40] <ingo> Open source developer corrupts widely-used libraries, affecting tons of projects https://www.theverge.com/2022/1/9/22874949/developer-corrupts-open-source-libraries-projects-affected
[02:41:02] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[02:41:39] <KevinX> JohnnyL put your code on something like codesnadbox or codpen so it will execute in the browser instead of asking people to just read the code
[02:42:00] <gde35> JohnnyL: and then make a test case as small as possible
[02:42:15] <gde35> JohnnyL: that will be sure to produce fast answers (with little effort)
[02:42:26] <JohnnyL> no i won't.
[02:42:30] <JohnnyL> use cut and paste.
[02:42:35] <KevinX> Besides the onblur property issue, I also don't see where you define get_balls
[02:42:53] <gde35> then the slow answers (if any) might not be what you want :P
[02:43:01] <JohnnyL> KevinX: try looking at the code and reading the function name definition.
[02:43:21] <JohnnyL> gde35: it seems like a lot of work for little return.
[02:43:23] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:43:39] <gde35> JohnnyL: I just use globals for everything
[02:43:51] <JohnnyL> 4 hours later and I can't even use globals or static variables.
[02:43:51] <gde35> JohnnyL: window.foo = "bananas"
[02:44:05] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[02:44:45] <gde35> you get nothing for scoping and passing values around until the application is rather large or involves multiple developers
[02:45:08] <JohnnyL> no window doesn't work.
[02:45:20] <gde35> its not running in the browser?
[02:45:21] <JohnnyL> wow.
[02:45:30] <JohnnyL> it's running in the browser.
[02:45:51] <JohnnyL> if i change all instances of iterfaction to window.iterfaction it bombs.
[02:46:31] <gde35> how does me not knowing what any of those things refers to help me help you?
[02:46:41] <gde35> make a test case, demo the issue
[02:47:07] <JohnnyL> i just did.
[02:47:11] <JohnnyL> i'll upload the latest.
[02:48:32] *** Joins: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e)
[02:48:43] <gde35> https://jsfiddle.net/
[02:49:20] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Remote host closed the connection)
[02:49:25] <JohnnyL> https://codepasta.app/paste/c7dmqtnout2sa0r9cgk0
[02:49:43] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:49:55] <KevinX> =/
[02:50:23] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[02:50:31] <JohnnyL> THERE IT IS.
[02:51:46] <gde35> https://jsfiddle.net/gaby_de_wilde/kuxgwtz2/
[02:52:09] <JohnnyL> https://codepasta.app/paste/c7dmqtnout2sa0r9cgk0
[02:52:10] <gde35> oh we lost "everything"
[02:52:14] <JohnnyL> its' probably my browser.
[02:52:28] <gde35> JohnnyL: you cant run your code on that webpage
[02:53:07] <gde35> JohnnyL: https://jsfiddle.net/gaby_de_wilde/kuxgwtz2/1/
[02:53:28] <JohnnyL> i can run it under firefox no problem.
[02:53:28] <gde35> JohnnyL: which part of all this is the not working part?
[02:53:58] <JohnnyL> have_not and iterfaction do not hold state of the courses of running the onblur function.
[02:54:11] <KevinX> Just write out what the program is meant to do in a sentence or two
[02:54:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[02:54:53] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[02:54:54] *** Joins: pluri (~pluri@user/pluri)
[02:54:55] <JohnnyL> it's supposed to hold state over the lifetimes of the onblur function.
[02:55:25] *** Joins: trevors (~trevors@user/trevors)
[02:55:36] <KevinX> I meant the entire program. I sense you're over complicating things
[02:55:45] <KevinX> But just lift the state out of the method
[02:55:46] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:55:59] <KevinX> cont state = {} // initial state goes here
[02:56:03] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:56:29] <KevinX> Then on blur (or probably on change or input), run a method to check/update state
[02:56:43] <gde35> why use blur?
[02:58:16] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:59:44] <gde35> JohnnyL: now it does something! https://jsfiddle.net/gaby_de_wilde/kuxgwtz2/2/
[03:01:18] *** Quits: paule32 (~paul@user/paule32) (Quit: Leaving)
[03:03:01] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 240 seconds)
[03:05:58] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[03:09:31] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860) (Quit: dingdreher)
[03:09:36] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[03:09:59] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[03:11:27] <JohnnyL> gde35: no, no it doesn't.
[03:11:31] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[03:11:41] *** Quits: summersault (~summersau@2804:7f0:3887:7a1c:29bd:7f7e:419f:9d2e) (Remote host closed the connection)
[03:14:28] *** Quits: nomic (~nomic@185.192.69.25) (Quit: Leaving)
[03:15:07] *** Joins: summersault (~summersau@179.83.98.209)
[03:18:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:19:55] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[03:23:12] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[03:24:57] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 240 seconds)
[03:25:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:25:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:25:21] *** Joins: wroathe (~wroathe@user/wroathe)
[03:25:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:27:27] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[03:27:36] *** Quits: summersault (~summersau@179.83.98.209) (Remote host closed the connection)
[03:30:53] <JohnnyL> 2 hours.
[03:30:54] *** Quits: JohnnyL (~johntalen@ool-18be2731.dyn.optonline.net) (Quit: leaving)
[03:33:27] <systemfault> What an asshole
[03:33:29] <KevinX> Are you complaining about how long it takes to work on it?
[03:33:44] <KevinX> Oh they left
[03:33:49] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[03:33:51] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[03:34:18] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[03:34:44] <EdFletcher> The entitlement on some people is _astounding_
[03:35:15] <KevinX> Especially when new
[03:35:42] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[03:36:13] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Ping timeout: 240 seconds)
[03:36:34] *** Joins: Quark (7f000001@user/quark)
[03:36:50] <Quark> What is the name given to the ability to click on an image, and see the original one in a modal?
[03:37:27] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:37:33] <KevinX> like what would you put on the label?
[03:37:36] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[03:38:22] <Quark> Like having an image with low resolution, and seeing the original one when clicked. There is a name for that, but it is escaping me right now.
[03:41:46] *** Joins: Rockwood (~Rocky@user/rocky)
[03:42:50] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[03:47:06] <oscurochu> I am using mock in one of my test files. I want to use that mock in several tests. is there a way to use globalsetup to instead mock a module?
[03:49:00] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[03:51:02] <oscurochu> im trying to do global.pool = mockPool; im not sure why it doesnt work, my tests are still trying to connect to the unmocked pool
[03:51:09] *** Quits: roadt_ (~roadt@114.100.129.3) (Ping timeout: 256 seconds)
[03:52:25] <oscurochu> https://dpaste.com/ERTQ5M93S
[03:53:13] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:53:51] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 268 seconds)
[03:59:11] *** Quits: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net) (Remote host closed the connection)
[04:00:13] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 240 seconds)
[04:02:32] *** Joins: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net)
[04:03:58] *** Joins: roadt_ (~roadt@60.168.93.72)
[04:08:42] *** Quits: KingPimpCommande (~KingPimpC@upchur.ch) (Quit: KingPimpCommande)
[04:12:16] *** Quits: MrBlue (~MrBlue@162.253.71.249) (Ping timeout: 256 seconds)
[04:12:37] <oscurochu> i may have figured it out
[04:19:11] <oscurochu> yay
[04:23:38] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[04:29:27] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:32:16] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[04:39:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:39:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:39:06] *** Joins: wroathe (~wroathe@user/wroathe)
[04:43:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:44:13] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[04:45:00] *** Joins: pluri (~pluri@user/pluri)
[04:47:15] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[04:47:52] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:49:38] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[04:50:26] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[04:51:39] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[04:52:24] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:57:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:57:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:57:00] *** Joins: wroathe (~wroathe@user/wroathe)
[04:58:10] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 256 seconds)
[05:00:57] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[05:01:23] *** Joins: Rockwood (~Rocky@user/rocky)
[05:02:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:03:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:06:48] *** Joins: vysn (~vysn@user/vysn)
[05:09:01] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[05:09:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:09:48] <ezzieyguywuf> I'm trying to create a routine that will (1) allow the user to select a local file, (2) upload this file to an amazon s3 bucket. I've accomplished (1) by using an `<input type="file"...>` form element, however, I'm unsure how to go about taking this `file` object and creating a bytestream to use with the s3 `putObject` function (see here
[05:09:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:09:48] *** Joins: wroathe (~wroathe@user/wroathe)
[05:09:53] <ezzieyguywuf> https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Bucket.put_object)
[05:09:56] <ezzieyguywuf> can anyone provide some guidance?
[05:10:56] <ezzieyguywuf> to clarify, the client-side code is writtin in javascript using react, and I'll be sending an API request to an endpoint that uses the put_object function I linked
[05:11:08] <ezzieyguywuf> so I need a way to send the selected file over http
[05:11:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:13:57] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 240 seconds)
[05:14:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:15:58] *** Quits: retsi (~retsi@45.227.79.168) (Quit: Leaving)
[05:20:33] *** Quits: qinghai (~qinghai@61.164.40.82) (Quit: leaving)
[05:22:25] <ljharb> jamea: you need to auth with nickserv for non-ops to see what you say. See the last link in the topic.
[05:24:29] *** Joins: MINIMAN10000 (~quassel@c-73-225-3-123.hsd1.wa.comcast.net)
[05:26:10] *** Quits: Talon_ (Talon@172.77.118.229) ()
[05:26:15] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[05:26:57] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[05:29:46] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d)
[05:30:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:30:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:30:00] *** Joins: wroathe (~wroathe@user/wroathe)
[05:30:16] *** Joins: trevors (~trevors@user/trevors)
[05:34:14] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[05:35:01] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f1f5:ac84:57ec:186d) (Ping timeout: 240 seconds)
[05:38:49] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[05:42:44] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[05:44:29] *** Quits: sharperguy (~sharpergu@88.130.217.122) (Ping timeout: 256 seconds)
[05:46:19] *** Joins: sharperguy (~sharpergu@89.244.120.152)
[05:50:37] *** Joins: summersault (~summersau@179.221.251.36)
[05:51:34] *** Joins: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com)
[05:53:42] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 256 seconds)
[05:54:00] *** Joins: Lazenca (~lazenca@user/lazenca)
[05:57:39] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[05:57:52] *** Joins: summersault (~summersau@179.221.251.36)
[05:59:59] *** Joins: ofm (~MetalMonk@user/ofm)
[06:01:37] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:01:40] *** Joins: sunarch (uid526836@user/sunarch)
[06:09:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:09:52] *** Quits: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com) (Quit: WeeChat 3.1)
[06:11:56] *** Quits: pluri (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[06:12:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[06:15:19] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[06:19:59] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[06:20:53] *** Joins: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com)
[06:21:12] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.3)
[06:21:15] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[06:23:25] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[06:25:56] *** Parts: ofm (~MetalMonk@user/ofm) (OM)
[06:30:00] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[06:30:10] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:33:57] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[06:35:38] *** Joins: bobdobbs (~user@116.251.149.196)
[06:36:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:41:11] <ljharb> MINIMAN10000: you need to auth with nickserv for non-ops to see what you say. See the last link in the topic.
[06:49:36] *** Joins: summersault (~summersau@179.221.251.36)
[06:57:04] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[06:57:34] <MINIMAN10000> So I'm trying out prototypes to try and have "out.all" output strings and "out.all.hostname" also output strings.  https://www.toptal.com/developers/hastebin/izufoyizid.js So far out.all successfully outputs and out.other outputs default. But out.all.hostname is undefined... I don't know how to resolve that
[06:58:41] *** Joins: onosendi (~onosendi@user/onosendi)
[06:58:55] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[07:09:24] <ljharb> using proxy isn’t a good idea - it’s slow and not meant for that kind of thing
[07:09:44] <ljharb> it’d be far better to have each string as its own data property on an object
[07:14:41] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[07:15:50] *** Joins: summersault (~summersau@179.221.251.36)
[07:17:26] *** Joins: thojanssens (~thojansse@182.232.179.128)
[07:19:36] <ljharb> MINIMAN10000: the other answer tho, is that out.all needs to be a proxy too. In other words, having the intermediary be a non-object is impossible
[07:19:38] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[07:20:24] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[07:28:13] <MINIMAN10000> @ljharb So specifically the end goal is to be able to call servers[] which is a string that can be directly passed to functions and servers[].PARAMETER in order to get the parameters of those servers[]
[07:28:40] <ljharb> right, I’m saying that’s impossible
[07:28:50] <ljharb> you can’t hang things off of individual primitives
[07:29:30] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[07:29:37] <ljharb> (also @ js for discord/slack, this is irc)
[07:32:59] *** Quits: kmh (~kmh@2a00:6020:5004:6800:c4b8:d9e6:36e5:6265) (Quit: Leaving)
[07:33:01] *** Quits: MINIMAN10000 (~quassel@c-73-225-3-123.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[07:37:58] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[07:38:18] *** Joins: kmh (~kmh@2a00:6020:5004:6800:c006:a6d3:5f30:2560)
[07:39:23] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[07:41:01] *** Quits: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com) (Ping timeout: 240 seconds)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:43:11] *** Joins: colordrops (~erahhal@69.53.245.255)
[07:44:52] *** Joins: junebug (~junebug@2600:1700:3db0:2540:ba52:147a:c08b:149f)
[07:44:54] *** Joins: MINIMAN10000 (~quassel@c-73-225-3-123.hsd1.wa.comcast.net)
[07:46:42] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Quit: Leaving)
[07:49:58] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:53:01] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Ping timeout: 240 seconds)
[07:54:13] *** Joins: MINIMAN10000_ (~quassel@c-73-225-3-123.hsd1.wa.comcast.net)
[07:54:57] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[07:55:12] <MINIMAN10000_> I guess my next best bet is to just use basic arrays and just giving up on the idea of keeping data with its own reference
[07:55:49] *** Quits: MINIMAN10000 (~quassel@c-73-225-3-123.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[07:56:26] *** MINIMAN10000_ is now known as MINIMAN10000
[07:56:40] <MINIMAN10000> I guess my next best bet is to just use basic arrays and just giving up on the idea of keeping data with its own reference
[07:59:25] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[07:59:48] *** Joins: johnjaye (~pi@154.6.152.74)
[07:59:59] *** Quits: junebug (~junebug@2600:1700:3db0:2540:ba52:147a:c08b:149f) (Quit: Leaving)
[08:01:05] <ljharb> MINIMAN10000: or you could use an object instead of a string ad the container
[08:01:28] <MINIMAN10000> I had just assumed that I was using objects lol
[08:01:46] <MINIMAN10000> Does an object require increasing the scope of the shortest variable name?
[08:01:58] <ljharb> I’m not sure what that means
[08:02:07] <ljharb> it just means that the top thing won’t be a string
[08:02:22] <MINIMAN10000> Because I can use things like server[] directly but as far as I understand no such top level exists for object
[08:02:23] <ljharb> like x.all and x.hostname etc
[08:02:41] <ljharb> you wouldn’t use it directly. You’d map it to a property.
[08:03:21] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[08:05:29] <MINIMAN10000> Yeah in that case I believe for my use case I'm just better off seperating all concepts into their own container
[08:08:01] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:09:19] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[08:11:13] *** Joins: robertparkerx2 (~robertpar@45-18-194-105.lightspeed.mmphtn.sbcglobal.net)
[08:12:44] *** Quits: kmh (~kmh@2a00:6020:5004:6800:c006:a6d3:5f30:2560) (Remote host closed the connection)
[08:12:55] *** Joins: kmh (~kmh@2a00:6020:5004:6800:c006:a6d3:5f30:2560)
[08:13:15] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:13:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[08:15:07] *** Joins: audiobirb (~audio@user/audio)
[08:17:38] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[08:18:37] <MINIMAN10000> The one thing that has been wildly successful for me so far has been spread syntax, map, and filter.
[08:19:43] <MINIMAN10000> I havn't exactly found out my flaw just yet, but every time I use "forEach" I seem to stop handling as whole arrays but instead end up writing iteratively and it just isn't as good looking.
[08:21:33] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[08:25:25] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[08:40:44] <MINIMAN10000> So there is the signature "export interface Server", the server object. Which has a bunch of properties
[08:40:51] <MINIMAN10000> Is it possible to pull the properties from it?
[08:41:26] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:47:46] *** Quits: deniska (~denis@user/deniska) (Quit: leaving)
[08:47:57] *** Joins: deniska (~deniska@user/deniska)
[08:48:09] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[08:48:59] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:49:06] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[08:50:13] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[08:50:37] *** Quits: stagas (~stagas@2a02:587:c421:9272:39c:4021:871d:bf87) (Ping timeout: 240 seconds)
[08:51:04] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 256 seconds)
[08:51:38] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70)
[08:54:57] *** Quits: deniska (~deniska@user/deniska) (Remote host closed the connection)
[08:55:05] *** Joins: deniska (~deniska@user/deniska)
[08:55:09] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[08:56:38] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70) (Ping timeout: 268 seconds)
[08:59:42] <systemfault> MINIMAN10000: TypeScript? You can access subtypes using array notation
[09:00:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:01:00] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70)
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:06:13] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70) (Ping timeout: 240 seconds)
[09:06:43] *** Joins: onosendi (~onosendi@user/onosendi)
[09:06:43] *** Quits: onosendi (~onosendi@user/onosendi) (Client Quit)
[09:13:32] *** Quits: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[09:14:51] *** Parts: karjala (sid176588@id-176588.lymington.irccloud.com) ()
[09:18:26] *** Quits: deniska (~deniska@user/deniska) (Quit: leaving)
[09:18:37] *** Joins: deniska (~deniska@user/deniska)
[09:19:27] *** Quits: deniska (~deniska@user/deniska) (Remote host closed the connection)
[09:19:37] *** Joins: deniska (~deniska@user/deniska)
[09:22:11] *** Joins: g2anj (~v@58.228.230.4)
[09:23:18] <rustyshackleford> parsing a pdf is a really a pain
[09:24:35] *** Quits: deniska (~deniska@user/deniska) (Read error: Connection reset by peer)
[09:24:52] *** Joins: deniska (~deniska@user/deniska)
[09:27:15] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[09:33:21] <MINIMAN10000> Gah.
[09:33:29] <MINIMAN10000> Object destructuring is cool but explicit
[09:33:54] <MINIMAN10000> Assigning an object to a variable copies over a whole bunch of data but it's appended on rather than destructured
[09:34:43] <MINIMAN10000> Dynamic variable names exist maybe there is hope
[09:40:43] *** Quits: tempCork (~Cork@2a01:2b0:301d:100:7a24:afff:fe8c:e9d4) (Quit: tempCork)
[09:41:00] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[09:42:33] <Maxdamantus> Assigning an object to a variable doesn't copy or append or destructure. And dynamic variable names don't exist. They're always static (unless you do something bad involving `eval`).
[09:43:23] <Maxdamantus> The only thing that's copied is the object reference.
[09:45:51] <MINIMAN10000> const {VARIABLENAMES}= ns.getServer(server); which maps variable names to the properties of the object seems like magic
[09:45:55] <MINIMAN10000> Is that what it's doing?
[09:46:02] *** Quits: thojanssens (~thojansse@182.232.179.128) (Ping timeout: 256 seconds)
[09:46:26] <Maxdamantus> Sure, but the variable name is static.
[09:47:06] <MINIMAN10000> Yeah so with a little bit of eval magic I should be able to grab those static names and assign them to variables
[09:47:23] <Maxdamantus> Why do you want to do that?
[09:48:19] *** Joins: thojanssens (~thojansse@182.232.179.128)
[09:48:49] <MINIMAN10000> So I don't have to manually list out the 32 properties of the object in order to grab all those static names and assign them to variables
[09:50:12] <leduyquang753> There is another way to do what you want without trying to bend the rules of Java
[09:50:15] <leduyquang753> S
[09:50:18] <leduyquang753> Java
[09:50:29] <leduyquang753> Bruh can't hit the right Shift key properly.
[09:50:34] <leduyquang753> JavaScript.
[09:51:14] <Maxdamantus> MINIMAN10000: why do you want them assigned to variables? Why not just access them by their property names?
[09:51:41] <Maxdamantus> MINIMAN10000: why do you want to write `foo` instead of `o.foo`?
[09:51:51] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70)
[09:52:09] *** Quits: pizdets (~pizdets@183.182.111.169) (Read error: Connection reset by peer)
[09:52:21] *** Joins: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr)
[09:52:31] *** Joins: pizdets (~pizdets@183.182.111.169)
[09:54:08] <MINIMAN10000> It just seems more readable when I start doing things like "portTools = portTools.filter( (tool, select) => foundTools[select] );" as opposed to "server.portTools = server.portTools.filter( (tool, select) => server.foundTools[select] );"
[09:55:18] <Maxdamantus> Using `eval` to dynamically create variable names is not more readable. Feel free to just assign the object to a shorter variable name if you want things to be more concise: const s = server;
[09:55:27] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:56:05] <Inst> hi javascript guys
[09:56:07] <Maxdamantus> if you inject variables dynamically, you can't see where any given variable was actually created.
[09:56:15] <Inst> you have both monads and objects in your language, right?
[09:56:17] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:1092:727b:c994:2f70) (Ping timeout: 240 seconds)
[09:56:31] <MINIMAN10000> So you think I would be better off going the route of writing all 32 properties as opposed to eval?
[09:57:12] <Maxdamantus> MINIMAN10000: no. Just read the properties explicitly from the object.
[09:57:27] <Maxdamantus> MINIMAN10000: don't bother destructuring them into variables.
[09:57:47] <Maxdamantus> MINIMAN10000: are you actually even using all 32 properties?
[09:58:13] <Maxdamantus> If there are properties that you're not using, don't even bother with them.
[09:58:39] <MINIMAN10000> I'm likely to use around 16 or so of them as most of them are data points which are usefult o output
[09:59:44] <Maxdamantus> MINIMAN10000: if you create variables dynamically, you might end up shadowing other variables, and you won't be able to see that in teh source code.
[10:00:12] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[10:00:14] <Maxdamantus> MINIMAN10000: eval(someDynamicCode); console.log(foo);
[10:00:54] <Maxdamantus> MINIMAN10000: is `foo` created by `someDynamicCode`? maybe. `console` might also be created by `someDynamicCode`. You can't tell where any variable comes from.
[10:01:45] <Maxdamantus> MINIMAN10000: there is a `with` statement that does precisely what you're wanting to do, but that has been deprecated for very good reasons.
[10:02:12] <Maxdamantus> MINIMAN10000: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with#ambiguity_contra
[10:03:23] <MINIMAN10000> The thought is that since I am using an interface API, when referencing the API to determine what I data I need to pull, I can simply use the properties without having to first create them as they have already been made in the past
[10:03:25] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[10:03:31] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:03:43] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[10:03:57] <Maxdamantus> MINIMAN10000: but you're only going to use the properties that you're going to refer to statically.
[10:05:01] *** Joins: nomic (~nomic@185.192.69.25)
[10:05:21] <Maxdamantus> MINIMAN10000: if the API decides to add a property in the future that your current code is not using, it would be creating an unused variable. If that property has a name like "console" or the name of some other variable that you're already using, it might even shadow an existing variable, breaking your code in a way that is difficult to detect.
[10:05:55] <Maxdamantus> difficult to diagnose, rather.
[10:07:01] *** Quits: thojanssens (~thojansse@182.232.179.128) (Ping timeout: 240 seconds)
[10:07:01] <MINIMAN10000> LOL oh no
[10:07:32] <MINIMAN10000> I'm just sitting here thinking how you're recommending not doing it. All I can think of now is. "with()" can pull down the entire ns namespace
[10:07:52] <ljharb> MINIMAN10000: dynamic variable names do not exist in JS.
[10:08:06] *** Joins: nullroute (~nullroute@209.141.45.45)
[10:08:09] <ljharb> and you definitely do not want to use eval or with
[10:08:19] <ljharb> code with dynamic variable names is *bad code*
[10:08:41] <MINIMAN10000> I mean the downsides seems to be something I don't even have access to begin with.
[10:08:50] <MINIMAN10000> other than potential silent name collision
[10:09:24] <ljharb> using eval makes code impossible to maintain, and also incredibly slow
[10:10:58] <MINIMAN10000> I feel like the biggest benefit to not using eval is the fact that it keeps all the data neatly organized which is useful
[10:11:57] <Maxdamantus> Right, useful for understanding what the code will do.
[10:12:06] <Maxdamantus> which should be highly desirable.
[10:12:39] <Maxdamantus> More desirable than writing two fewer characters before every property name.
[10:12:42] <MINIMAN10000> It's just the built in editor has no... Well what would you call it. "intellisense" all forms of data tracking and what have you
[10:15:55] *** Quits: ruzui (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[10:16:14] *** Joins: mexen (uid495612@user/mexen)
[10:16:16] <MINIMAN10000> I can't quite tell what I like better "array1.forEach(element => console.log(element));" or "for (let element in array) {}" But honestly I'm learning towards for in
[10:16:32] <leduyquang753> It's `for of`.
[10:16:36] <MINIMAN10000> oh
[10:16:45] <MINIMAN10000> Yeah for of
[10:16:52] <ljharb> !iterations @ MINIMAN10000
[10:16:52] <jellobot> MINIMAN10000, ECMAScript's Array contains a number of built-in methods for iteration (e.g., map, reduce, every, some, filter, and forEach). They relieve the need for manual iteration, provide better abstraction than a `for` loop, and make it clear what your iteration is doing. See https://gist.github.com/ljharb/58faf1cfcb4e6808f74aae4ef7944cff
[10:16:55] <ljharb> !loops are evil @ MINIMAN10000
[10:16:55] <jellobot> MINIMAN10000, Loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: http://qr.ae/RNMEGA and https://gist.github.com/robotlolita/7643014
[10:18:01] <MINIMAN10000> I was told to avoid map when you don't need to return the array
[10:18:27] <MINIMAN10000> That forEach(){} is perferrable in such a situation in fact
[10:18:37] <MINIMAN10000> was that article wrong?
[10:18:42] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[10:18:54] <leduyquang753> When I need to do something with the elements I still stick to `for of`.
[10:19:36] <MINIMAN10000> I mean I'm trying to avoid iterations specifically because the only reason I'm diving into javascript right now is to learn more about higher order functions
[10:20:06] <MINIMAN10000> In the end the parts of my code where I have higher order functions just reads better
[10:20:24] <ljharb> MINIMAN10000: yes, i agree with that
[10:20:47] <ljharb> MINIMAN10000: also higher-order functions do iterate. *loops* are what i'm saying to avoid
[10:20:54] <ljharb> MINIMAN10000: `.map` and `.forEach` are both iterating without loops
[10:21:32] <MINIMAN10000> oh I see
[10:21:47] <MINIMAN10000> But yeah I was told to avoid map unless I'm trying to assign it to a variable
[10:25:27] <ljharb> MINIMAN10000: that is also accurate, use forEach for that.
[10:25:42] <ljharb> MINIMAN10000: well, somewhat accurate. it's totally fine to do `arr.map(…).filter(…).forEach`, for example
[10:26:03] <ljharb> MINIMAN10000: iow, you want to do as much as possible in the non-forEach methods, and then you save forEach for side effects.
[10:26:30] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[10:27:37] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (Read error: Connection reset by peer)
[10:28:43] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[10:30:42] <leduyquang753> Does V8 or so know to optimize out the temporary arrays in that code?
[10:33:51] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[10:34:09] *** Joins: audiobirb (~audio@user/audio)
[10:37:57] *** Quits: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[10:38:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[10:40:13] <ljharb> leduyquang753: a) probably, b) it doesn't matter
[10:41:27] <leduyquang753> I'm kinda sure it does if the code is hot.
[10:42:07] <ljharb> it almost never is or will be :-) performance is the least important consideration.
[10:42:18] *** Joins: salad (~cucumber@188.25.234.155)
[10:42:28] <ljharb> it's easy to make clean code fast; it's hard to make fast code clean. always err on the side of cleaner code; you can speed it up later if it's really necessary (it won't be)
[10:42:54] <ljharb> leduyquang753: also, modern v8 unrolls array iteration methods so they're precisely as fast as loops anyways. but you shouldn't be making code style choices based on perf.
[10:43:08] <MINIMAN10000> so I have data which lists all of the properties
[10:43:12] <MINIMAN10000> But I never assigned it
[10:43:20] <MINIMAN10000> and now it doesn't run because I never assigned itr
[10:43:49] <MINIMAN10000> nvm now it's running at the very least now that I'm not using the data
[10:44:39] <MINIMAN10000> Ok I have no idea what it breaks when I try to print anything
[10:44:52] <leduyquang753> ljharb Thank you for being the first person to manage to free my concerns about this, others only slapped "it's just better semantics".
[10:44:57] <MINIMAN10000> Oh it's just doing weird things it's just breaking
[10:45:10] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[10:45:27] <MINIMAN10000> I have "Data" for the purpose of listing all properties... but it complains that I never assigned them... what's the recommendation for making it not complain?
[10:45:31] *** Joins: han-solo (~hanish@user/han-solo)
[10:46:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:47:01] <ljharb> leduyquang753: better semantics are never achieved by caring about performance. that can only maybe achieve better performance.
[10:47:26] <ljharb> MINIMAN10000: i'm not sure what's complaining
[10:47:35] <ljharb> if you mean typescript, TS often complains about perfectly sensible JS
[10:48:15] <MINIMAN10000> I guess that's a good point
[10:48:15] <MINIMAN10000> https://www.toptal.com/developers/hastebin/noxezihifo.properties
[10:48:22] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:48:34] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:48:37] <MINIMAN10000> Just any time anything throws an error it's a code blob and error blob and... yeah just need to make a link every tim lol
[10:49:07] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:52:05] <ljharb> MINIMAN10000: ok so one huge problem that will cause real bugs in JS is your brace style
[10:52:06] <ljharb> !otbs @ MINIMAN10000
[10:52:06] <jellobot> MINIMAN10000, The One True Brace style: https://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS_.28OTBS.29
[10:52:13] <ljharb> K&R or whatever that is is abomination, don't use it
[10:52:34] <ljharb> MINIMAN10000: but also, that object is only valid syntax if all of those are variables
[10:52:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[10:52:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:52:44] <ljharb> MINIMAN10000: are you sure you want a concise object literal there?
[10:53:01] <ljharb> MINIMAN10000: otherwise, you need to give each property an explicit value
[10:53:33] <MINIMAN10000> I'm just trying to make it easy so assign getServer() which returns those objects
[10:54:45] <ljharb> i'm still not sure what you mean.
[10:54:56] <ljharb> `const data = { a, b, c }` is shorthand for `const data = { a: a, b: b, c: c }`
[10:55:06] <ljharb> which means `a` and `b` and `c` all have to be variables that already exist
[10:55:53] <MINIMAN10000> the getServer() function returns an object with those properties. So I was hoping to use map to map data to the fuction
[10:57:16] *** Joins: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net)
[10:57:16] *** Quits: corgi (~corgi@c-71-202-47-75.hsd1.ca.comcast.net) (Changing host)
[10:57:16] *** Joins: corgi (~corgi@user/corgi)
[10:57:23] *** Joins: stagas (~stagas@2a02:587:c421:9272:79ff:ab38:984:fc2c)
[10:58:08] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:58:55] <ljharb> MINIMAN10000: what does "map data to the function" mean?
[10:58:59] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:59:13] <ljharb> MINIMAN10000: can you share more code than that?
[10:59:23] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:00:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:00:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:00:30] *** Joins: wroathe (~wroathe@user/wroathe)
[11:01:02] <MINIMAN10000> I mean beyond my code it mostly just becomes API https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.server.md . I just was hoping to be able to call something like data = data.map(element => getServer()) psudocode
[11:03:56] <ljharb> i still don't understand what that means
[11:04:03] <ljharb> if you have the object, then you already have the data collected in that object
[11:04:13] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[11:04:18] <ljharb> there's no dynamic variables, so you'd just look up property names on that object if they're dynamic
[11:05:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:05:35] <MINIMAN10000> It's a game so while "getServer()" contains the properties for the specific returned server I don't have any of the property names until getServer() returns... at least as far as my knowledge of javascript goes
[11:05:59] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[11:06:29] <MINIMAN10000> So I was hoping of using data in order to hide all of the properties within each scope
[11:07:05] <avu> wat
[11:07:12] <MINIMAN10000> so while getServer might return into a const or let of a narrow scope, data itself would be global
[11:10:06] *** Joins: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr)
[11:10:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:10:54] *** Joins: programmar (~whatever@118.69.128.37)
[11:10:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:10:54] *** Joins: wroathe (~wroathe@user/wroathe)
[11:11:28] *** Joins: dingir_D (~dingir@user/dingir/x-9303082)
[11:11:30] <dingir_D> hi
[11:11:36] <programmar> i am a little bit dumb with this now so please help, why am i keep getting "Uncaught SyntaxError: missing ) after argument list" ? here is my code https://pastebin.com/4LrY62Q3
[11:11:47] <programmar> is there anything that i haven't escaping or quoting ?
[11:12:15] <dingir_D> i just started using chrome developers tools is it safe to use on a shared computer, can someone see i have been programming?
[11:12:53] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:12:59] <deniska> dingir_D: is someone going to be mad if you were programming? :)
[11:13:26] <deniska> dingir_D: it's as safe as just using your browser on a shared computer
[11:13:57] <MINIMAN10000> So if I run a function to get the type of each property
[11:14:09] <MINIMAN10000> I should be able to create an empty for each parameter right?
[11:14:12] <deniska> dingir_D: whether they can see if you opened dev tools depends on how they monitor things, if they do
[11:15:20] <programmar> actually here is my full code : https://pastebin.com/6PKxnX29 and idk, what is syntactically wrong
[11:16:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:16:27] <MINIMAN10000> I wonder if I can just pass false to all the data types?
[11:19:36] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[11:20:37] <han-solo> programmar: could you remove the `;` from line 21 and see ?
[11:21:14] <MINIMAN10000> "Shorthand property assignments are valid only in destructuring patterns" Dangit dude
[11:21:16] <rick123> programmar: ; in line 21
[11:22:48] <MINIMAN10000> Alright I was using = and not :
[11:25:30] <MINIMAN10000> Alright cool so assigning 0 did work and everything works as expected.
[11:27:59] <programmar> wait what, how is that tiny ";" affecting  my syntax
[11:29:24] <MINIMAN10000> Coming from C++ I'd be surprised at anything else
[11:34:33] <programmar> hm at least it works now
[11:36:06] <rick123> programmar: You are doing event.waitUntil(arg;); The ; after arg is invalid syntax
[11:36:15] <rick123> Guys any idea why var ob = Object.create(HTMLElement.prototype)
[11:36:49] <rick123> Why var ob = Object.create(HTMLElement.prototype) shows the properties directly on the object itself in chrome dev tools ?
[11:36:54] <programmar> aawwh
[11:36:55] <programmar> right
[11:37:36] <rick123> ob.hasOwnProperty('accessKey') for instance returns false but dev tools shows the prototype properties on the object itself as well
[11:39:30] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[11:39:30] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (*.net *.split)
[11:39:30] *** Quits: han-solo (~hanish@user/han-solo) (*.net *.split)
[11:39:30] *** Quits: salad (~cucumber@188.25.234.155) (*.net *.split)
[11:39:31] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (*.net *.split)
[11:39:31] *** Quits: mexen (uid495612@user/mexen) (*.net *.split)
[11:39:31] *** Quits: pizdets (~pizdets@183.182.111.169) (*.net *.split)
[11:39:31] *** Quits: deniska (~deniska@user/deniska) (*.net *.split)
[11:39:31] *** Quits: robertparkerx2 (~robertpar@45-18-194-105.lightspeed.mmphtn.sbcglobal.net) (*.net *.split)
[11:39:31] *** Quits: johnjaye (~pi@154.6.152.74) (*.net *.split)
[11:39:31] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (*.net *.split)
[11:39:31] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[11:39:31] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (*.net *.split)
[11:39:31] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[11:39:31] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[11:39:31] *** Quits: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net) (*.net *.split)
[11:39:31] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (*.net *.split)
[11:39:31] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (*.net *.split)
[11:39:31] *** Quits: oscurochu (~oscurochu@37.120.215.101) (*.net *.split)
[11:39:31] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[11:39:31] *** Quits: henry40408 (~henry4040@175.182.108.239) (*.net *.split)
[11:39:31] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (*.net *.split)
[11:39:31] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[11:39:31] *** Quits: chao (~stenno@user/stenno) (*.net *.split)
[11:39:31] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (*.net *.split)
[11:39:31] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[11:39:31] *** Quits: defjam (~eb0t@90.203.120.248) (*.net *.split)
[11:39:31] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[11:39:31] *** Quits: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990) (*.net *.split)
[11:39:32] *** Quits: Square (~a@user/square) (*.net *.split)
[11:39:32] *** Quits: zero (~z@user/zero) (*.net *.split)
[11:39:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[11:39:32] *** Quits: mosh3k21 (~mosh3k21@user/mosh3k21) (*.net *.split)
[11:39:32] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[11:39:32] *** Quits: ashnur (~rak@user/ashnur) (*.net *.split)
[11:39:32] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[11:39:32] *** Quits: shayr_ (shayr@ip62.ip-91-134-189.eu) (*.net *.split)
[11:39:32] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[11:39:32] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (*.net *.split)
[11:39:32] *** Quits: Slade (~user@user/slade) (*.net *.split)
[11:39:32] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:4dd2:40f6:5cc8:f674) (*.net *.split)
[11:39:32] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[11:39:32] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[11:39:32] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[11:39:32] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[11:39:32] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[11:39:32] *** Quits: dmanto (~dmanto@181.110.128.50) (*.net *.split)
[11:39:32] *** Quits: Croran (~Croran@71.231.214.173) (*.net *.split)
[11:39:32] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[11:39:32] *** Quits: samsch (~samsch@171.ip-192-99-69.net) (*.net *.split)
[11:39:32] *** Quits: ozymandias (~ozymandia@libre.theyareafter.us) (*.net *.split)
[11:39:32] *** Quits: Enissay (~Enissay@user/enissay) (*.net *.split)
[11:39:32] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[11:39:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[11:39:32] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (*.net *.split)
[11:39:32] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[11:39:32] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[11:39:32] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[11:39:32] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (*.net *.split)
[11:39:32] *** Quits: Sven_vB_ (~sven@user/sven-vb/x-2094958) (*.net *.split)
[11:39:32] *** Quits: scara (~user@user/scara) (*.net *.split)
[11:39:32] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[11:39:32] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[11:39:33] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[11:39:33] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[11:39:33] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[11:39:33] *** Quits: doji (~doji@user/doji) (*.net *.split)
[11:39:33] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:39:33] *** Quits: hamess (~hamess@user/hamess) (*.net *.split)
[11:39:33] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[11:39:33] *** Quits: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[11:39:33] *** Quits: Swant (~swant@libera/staff/swant) (*.net *.split)
[11:39:33] *** Quits: davlefou_ (~davlefou@5.183.214.239) (*.net *.split)
[11:39:33] *** Quits: Bish (~arne@b2b-37-24-1-41.unitymedia.biz) (*.net *.split)
[11:39:33] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[11:39:33] *** Quits: devslash (~devslash@46.232.211.210) (*.net *.split)
[11:39:33] *** Quits: davve (davve@bsd.douchedata.com) (*.net *.split)
[11:39:33] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[11:39:33] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[11:39:33] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[11:39:33] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (*.net *.split)
[11:39:33] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (*.net *.split)
[11:39:33] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[11:39:33] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[11:39:33] *** Quits: Kays (Kays@user/kays) (*.net *.split)
[11:39:33] *** Quits: SchmoSeph (sid530771@id-530771.tinside.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[11:39:34] *** Quits: riotz (riotz@user/riotz) (*.net *.split)
[11:39:34] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[11:39:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[11:39:34] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (*.net *.split)
[11:39:34] *** Quits: jushi (~j@2a01:4f9:c010:8455::1) (*.net *.split)
[11:39:34] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[11:39:34] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (*.net *.split)
[11:39:34] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[11:39:34] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[11:39:34] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[11:39:34] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[11:39:34] *** Quits: Voxel (~f8er@user/voxel) (*.net *.split)
[11:39:34] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[11:39:34] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: Selicre (~x@hello.i.am.selic.re) (*.net *.split)
[11:39:35] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[11:39:35] *** Quits: theskillwithin (~theskillw@user/theskillwithin) (*.net *.split)
[11:39:35] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[11:39:35] *** Quits: gkatsev (~gkatsev@spacecompute.com) (*.net *.split)
[11:39:35] *** Quits: mynickisregister (~mynickisr@5.79.67.8) (*.net *.split)
[11:39:35] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (*.net *.split)
[11:39:35] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[11:39:35] *** Quits: colordrops (~erahhal@69.53.245.255) (*.net *.split)
[11:39:35] *** Quits: sheetjs (~sheetjs@user/sheetjs) (*.net *.split)
[11:39:35] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (*.net *.split)
[11:39:35] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[11:39:35] *** Quits: Brett[Air] (~Brett@124.148.79.4) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: Harlin_ (~DonQixote@63-230-76-242.clsp.qwest.net) (*.net *.split)
[11:39:35] *** Quits: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net) (*.net *.split)
[11:39:35] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[11:39:35] *** Quits: nepeat (~nepeat@79.110.170.60) (*.net *.split)
[11:39:35] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[11:39:35] *** Quits: rogorido (~rogorido@mail.georeligion.org) (*.net *.split)
[11:39:35] *** Quits: Quark (7f000001@user/quark) (*.net *.split)
[11:39:35] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[11:39:35] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[11:39:35] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[11:39:35] *** Quits: dka (~code-is-a@193.70.33.83) (*.net *.split)
[11:39:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[11:39:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[11:39:36] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[11:39:36] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[11:39:36] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (*.net *.split)
[11:39:36] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[11:39:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[11:39:36] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[11:39:36] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[11:39:36] *** Quits: arthurpbs (~arthurpbs@168.121.98.7) (*.net *.split)
[11:39:36] *** Quits: zwei (~Zweihande@znc.ext.zweihander.me) (*.net *.split)
[11:39:36] *** Quits: bodiccea (~bodiccea@user/bodiccea) (*.net *.split)
[11:39:36] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[11:39:36] *** Quits: ox1eef (~0x1eef@user/ox1eef) (*.net *.split)
[11:39:36] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[11:39:36] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[11:39:36] *** Quits: defn- (~n0b0dy@user/defn) (*.net *.split)
[11:39:36] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[11:39:36] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[11:39:36] *** Quits: Pajus (~Pajus@user/pajus) (*.net *.split)
[11:39:36] *** Quits: kraucrow (~polarizin@188.166.72.81) (*.net *.split)
[11:39:36] *** Quits: Woet (~me@irc.woet.me) (*.net *.split)
[11:39:37] *** Quits: feoh (~feoh@idlerpg/player/feoh) (*.net *.split)
[11:39:37] *** Quits: eekS (~eekS@user/eeks) (*.net *.split)
[11:39:37] *** Quits: lilmonkey`` (~lilmonkey@user/lilmonkey) (*.net *.split)
[11:39:37] *** Quits: _var (~kdy@kiana.kdy.ch) (*.net *.split)
[11:39:37] *** Quits: monokrome| (~monokrome@50.215.11.140) (*.net *.split)
[11:39:37] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[11:39:37] *** Quits: c17r_ (~c17r@c17r.com) (*.net *.split)
[11:39:37] *** Quits: Jaran (~mail@user/jaran) (*.net *.split)
[11:39:37] *** Quits: NoiseEee (~NoiseEee@178.128.153.219) (*.net *.split)
[11:39:37] *** Quits: seed0 (~seed0@user/seed0) (*.net *.split)
[11:39:37] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[11:39:37] *** Quits: root____ (~root@157.245.144.252) (*.net *.split)
[11:39:37] *** Quits: CoJaBo (~aztec@user/CoJaBo) (*.net *.split)
[11:39:37] *** Quits: flameboi (dgw@user/flameboi) (*.net *.split)
[11:39:37] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (*.net *.split)
[11:39:37] *** Quits: ZeroWalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d) (*.net *.split)
[11:39:37] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3) (*.net *.split)
[11:39:38] *** Quits: christian[m] (~christian@2001:470:69fc:105::f6f1) (*.net *.split)
[11:39:38] *** Quits: nicoty (~nicoty@user/nicoty) (*.net *.split)
[11:39:38] *** Quits: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01) (*.net *.split)
[11:39:38] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[11:39:38] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[11:39:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[11:39:38] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[11:39:38] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[11:39:38] *** Quits: avu (~jan@user/avu) (*.net *.split)
[11:39:38] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[11:39:38] *** Quits: ljharb (sid43720@user/ljharb) (*.net *.split)
[11:39:38] *** Quits: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com) (*.net *.split)
[11:39:38] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[11:39:39] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[11:39:39] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[11:39:39] *** Quits: glider (~glider@user/glider) (*.net *.split)
[11:39:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:39:39] *** Quits: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e) (*.net *.split)
[11:39:39] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[11:39:39] *** Quits: Benett (~Benett@xnetx.de) (*.net *.split)
[11:39:39] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[11:39:39] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[11:39:39] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[11:39:39] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[11:39:39] *** Quits: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com) (*.net *.split)
[11:39:39] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[11:39:39] *** Quits: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c) (*.net *.split)
[11:39:39] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (*.net *.split)
[11:39:39] *** Quits: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575) (*.net *.split)
[11:39:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[11:39:40] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[11:39:40] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (*.net *.split)
[11:39:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[11:39:40] *** Quits: andrew9184_ (sid416777@id-416777.uxbridge.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: hughrawlinson_ (sid11243@2a03:5180:f:3::2beb) (*.net *.split)
[11:39:40] *** Quits: adar (uid1346@user/adar) (*.net *.split)
[11:39:40] *** Quits: croraf (croraf@croraf.ircforever.org) (*.net *.split)
[11:39:40] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[11:39:40] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[11:39:40] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[11:39:40] *** Quits: rosseaux (~BeRo@2a00:1828:2000:859::2) (*.net *.split)
[11:39:41] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[11:39:41] *** Quits: futs (~nico@142.93.239.247) (*.net *.split)
[11:39:41] *** Quits: betterOn1 (~user@vmi489242.contaboserver.net) (*.net *.split)
[11:39:41] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[11:39:41] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (*.net *.split)
[11:39:41] *** Quits: Koopz (~Koopz@koopz.rocks) (*.net *.split)
[11:39:41] *** Quits: thykka (~thykka@2a01:4f8:c0c:e335::1) (*.net *.split)
[11:39:41] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[11:39:41] *** Quits: arash (arash@thinks.life.is-a.beauty) (*.net *.split)
[11:39:41] *** Quits: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at) (*.net *.split)
[11:39:41] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[11:39:41] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[11:39:41] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[11:39:41] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (*.net *.split)
[11:39:42] *** Quits: relipse (sid16131@id-16131.tinside.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (*.net *.split)
[11:39:42] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (*.net *.split)
[11:39:42] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[11:39:42] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[11:39:42] *** Quits: petril (~petril@user/petril) (*.net *.split)
[11:39:42] *** Quits: APic (apic@apic.name) (*.net *.split)
[11:39:42] *** Quits: OneMirror (~far@onegrandcircle.com) (*.net *.split)
[11:39:42] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[11:39:42] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: hackdash (h@user/hackdash) (*.net *.split)
[11:39:42] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[11:39:42] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[11:39:42] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[11:39:42] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[11:39:42] *** Quits: _nderscore (~nderscore@silentf.art) (*.net *.split)
[11:39:43] *** Quits: WizJin (~z0rbaznc@78.141.221.79) (*.net *.split)
[11:39:43] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[11:39:43] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[11:39:43] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[11:39:43] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[11:39:43] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[11:39:43] *** Quits: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2) (*.net *.split)
[11:39:43] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[11:39:43] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[11:39:43] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[11:39:43] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[11:39:43] *** Quits: naeluh__ (sid95128@id-95128.lymington.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: dingir_D (~dingir@user/dingir/x-9303082) (*.net *.split)
[11:39:43] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[11:39:43] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[11:39:43] *** Quits: Decker (~d3x0r@user/d3x0r) (*.net *.split)
[11:39:43] *** Quits: hbjy (~hbjy@rockylinux/web/hbjy) (*.net *.split)
[11:39:43] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[11:39:43] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[11:39:43] *** Quits: pagios (~pagios@life.is-a.beauty) (*.net *.split)
[11:39:43] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[11:39:43] *** Quits: nemesit|znc (~nemesit@2a01:488:66:1000:2ea3:4eeb:0:1) (*.net *.split)
[11:39:43] *** Quits: fakuve2 (~fakuve@192.210.243.250) (*.net *.split)
[11:39:43] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (*.net *.split)
[11:39:43] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[11:39:43] *** Quits: xsznix9 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[11:39:43] *** Quits: pez_ (~pez@user/pez) (*.net *.split)
[11:39:43] *** Quits: ThePendulum (~znc@37.139.2.240) (*.net *.split)
[11:39:43] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[11:39:44] *** Quits: Kirjava (~cake@user/kirjava) (*.net *.split)
[11:39:44] *** Quits: les (znc@user/les) (*.net *.split)
[11:39:44] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[11:39:44] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[11:39:44] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[11:39:44] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[11:39:44] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: lf94 (~lf94@user/lf94) (*.net *.split)
[11:39:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:39:44] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[11:39:44] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[11:39:44] *** Quits: mulchy[m] (~mulchynig@2001:470:69fc:105::1:4dd3) (*.net *.split)
[11:39:44] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[11:39:44] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9) (*.net *.split)
[11:39:44] *** Quits: Liber- (cis@user/cis) (*.net *.split)
[11:39:44] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com) (*.net *.split)
[11:39:44] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: cythrawll (sid384410@id-384410.ilkley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: trog (~trog@user/trog) (*.net *.split)
[11:39:45] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[11:39:45] *** Quits: ekl (~ekl@user/ekl) (*.net *.split)
[11:39:45] *** Quits: newton (james@user/newton) (*.net *.split)
[11:39:45] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[11:39:45] *** Quits: joepie91 (~joepie91p@user/joepie91) (*.net *.split)
[11:39:45] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[11:39:45] *** Quits: Sherpard2 (~VPard@user/sherpard2) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:40:17] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[11:40:41] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:41:38] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[11:48:29] *** Quits: Pilum (~JKM@user/pilum) (Quit: ZNC - 1.6.0 - http://znc.in)
[11:50:37] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[11:50:38] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:51:45] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Max SendQ exceeded)
[11:51:47] *** Quits: jellobot (~jellobot@li334-26.members.linode.com) (Write error: Broken pipe)
[11:52:00] *** Joins: Pilum (~JKM@user/pilum)
[11:52:00] *** Joins: litharge (litharge@libera/bot/litharge)
[11:52:00] *** Joins: biberu (~biberu@user/biberu)
[11:52:00] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:52:00] *** Joins: dingir_D (~dingir@user/dingir/x-9303082)
[11:52:00] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:52:00] *** Joins: han-solo (~hanish@user/han-solo)
[11:52:00] *** Joins: salad (~cucumber@188.25.234.155)
[11:52:00] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[11:52:00] *** Joins: mexen (uid495612@user/mexen)
[11:52:00] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[11:52:00] *** Joins: pizdets (~pizdets@183.182.111.169)
[11:52:00] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[11:52:00] *** Joins: deniska (~deniska@user/deniska)
[11:52:00] *** Joins: g2anj (~v@58.228.230.4)
[11:52:00] *** Joins: sagax (~sagax_nb@user/sagax)
[11:52:00] *** Joins: robertparkerx2 (~robertpar@45-18-194-105.lightspeed.mmphtn.sbcglobal.net)
[11:52:00] *** Joins: johnjaye (~pi@154.6.152.74)
[11:52:00] *** Joins: colordrops (~erahhal@69.53.245.255)
[11:52:00] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[11:52:00] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[11:52:00] *** Joins: Quark (7f000001@user/quark)
[11:52:00] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[11:52:00] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[11:52:00] *** Joins: Betal (~Betal@user/betal)
[11:52:00] *** Joins: noarb (~noarb@user/noarb)
[11:52:00] *** Joins: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net)
[11:52:00] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[11:52:00] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[11:52:00] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[11:52:00] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[11:52:00] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[11:52:00] *** Joins: scara (~user@user/scara)
[11:52:00] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[11:52:00] *** Joins: Cork (~Cork@user/cork)
[11:52:00] *** Joins: ZeroWalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d)
[11:52:00] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:52:00] *** Joins: henry40408 (~henry4040@175.182.108.239)
[11:52:00] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:52:00] *** Joins: thiras (~thiras@user/thiras)
[11:52:00] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[11:52:00] *** Joins: chao (~stenno@user/stenno)
[11:52:00] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[11:52:00] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:52:00] *** Joins: justIrresolute (~justache@user/justache)
[11:52:00] *** Joins: defjam (~eb0t@90.203.120.248)
[11:52:00] *** Joins: Harlin_ (~DonQixote@63-230-76-242.clsp.qwest.net)
[11:52:00] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[11:52:00] *** Joins: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net)
[11:52:00] *** Joins: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990)
[11:52:00] *** Joins: pavonia (~user@user/siracusa)
[11:52:00] *** Joins: nepeat (~nepeat@79.110.170.60)
[11:52:00] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[11:52:00] *** Joins: Square (~a@user/square)
[11:52:00] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[11:52:00] *** Joins: zero (~z@user/zero)
[11:52:00] *** Joins: corwin (someone@fosshost/director/corwin)
[11:52:00] *** Joins: a1paca (~a1paca@user/a1paca)
[11:52:00] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[11:52:00] *** Joins: mosh3k21 (~mosh3k21@user/mosh3k21)
[11:52:00] *** Joins: Kobaz (~libera@its.kobaz.net)
[11:52:00] *** Joins: ashnur (~rak@user/ashnur)
[11:52:00] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[11:52:00] *** Joins: edr (~edr@user/edr)
[11:52:00] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[11:52:00] *** Joins: shayr_ (shayr@ip62.ip-91-134-189.eu)
[11:52:00] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[11:52:00] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[11:52:00] *** Joins: Deide (~deide@user/deide)
[11:52:00] *** Joins: rvgate (~rvgate@user/rvgate)
[11:52:00] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[11:52:00] *** Joins: christian[m] (~christian@2001:470:69fc:105::f6f1)
[11:52:00] *** Joins: akurilin_ (uid322841@id-322841.ilkley.irccloud.com)
[11:52:00] *** Joins: percY- (~percY@138.68.239.19)
[11:52:00] *** Joins: dka (~code-is-a@193.70.33.83)
[11:52:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:52:00] *** Joins: nemesit|znc (~nemesit@2a01:488:66:1000:2ea3:4eeb:0:1)
[11:52:00] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[11:52:00] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[11:52:00] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[11:52:00] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[11:52:00] *** Joins: Slade (~user@user/slade)
[11:52:00] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[11:52:00] *** Joins: Jigsy (~Jigsy@user/jigsy)
[11:52:00] *** Joins: twiclo (~twiclo@2604:7b80:2000:1069:52fc:cedd:fbeb:10c)
[11:52:00] *** Joins: nicoty (~nicoty@user/nicoty)
[11:52:00] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[11:52:00] *** Joins: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01)
[11:52:00] *** Joins: mulchy[m] (~mulchynig@2001:470:69fc:105::1:4dd3)
[11:52:00] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:4dd2:40f6:5cc8:f674)
[11:52:00] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:52:00] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[11:52:00] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[11:52:00] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[11:52:00] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[11:52:00] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[11:52:00] *** Joins: orkim (~orkim@user/orkim)
[11:52:00] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[11:52:00] *** Joins: kadoban (~kadoban@user/kadoban)
[11:52:00] *** Joins: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575)
[11:52:00] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[11:52:00] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[11:52:00] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[11:52:00] *** Joins: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2)
[11:52:00] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[11:52:00] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[11:52:00] *** Joins: kcrk (~kcrk@user/kcrk)
[11:52:00] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[11:52:00] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[11:52:00] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[11:52:00] *** Joins: wolfshappen (~waff@irc.furworks.de)
[11:52:00] *** Joins: flameboi (dgw@user/flameboi)
[11:52:00] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[11:52:00] *** Joins: sunyour (~sunyour@129.226.182.99)
[11:52:00] *** Joins: root____ (~root@157.245.144.252)
[11:52:00] *** Joins: seed0 (~seed0@user/seed0)
[11:52:00] *** Joins: NoiseEee (~NoiseEee@178.128.153.219)
[11:52:00] *** Joins: Jaran (~mail@user/jaran)
[11:52:00] *** Joins: c17r_ (~c17r@c17r.com)
[11:52:00] *** Joins: polyrob (~rob@user/polyrob)
[11:52:00] *** Joins: monokrome| (~monokrome@50.215.11.140)
[11:52:00] *** Joins: _var (~kdy@kiana.kdy.ch)
[11:52:00] *** Joins: lilmonkey`` (~lilmonkey@user/lilmonkey)
[11:52:00] *** Joins: eekS (~eekS@user/eeks)
[11:52:00] *** Joins: feoh (~feoh@idlerpg/player/feoh)
[11:52:00] *** Joins: Woet (~me@irc.woet.me)
[11:52:00] *** Joins: Pajus (~Pajus@user/pajus)
[11:52:00] *** Joins: kraucrow (~polarizin@188.166.72.81)
[11:52:00] *** Joins: nortoh (~nortoh@user/nortoh)
[11:52:00] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[11:52:00] *** Joins: tkazi (~tkazi@user/tkazi)
[11:52:00] *** Joins: defn- (~n0b0dy@user/defn)
[11:52:00] *** Joins: BUSY (~BUSY@user/busy)
[11:52:00] *** Joins: ox1eef (~0x1eef@user/ox1eef)
[11:52:00] *** Joins: eMBee (~eMBee@realss.com)
[11:52:00] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[11:52:00] *** Joins: zwei (~Zweihande@znc.ext.zweihander.me)
[11:52:00] *** Joins: arthurpbs (~arthurpbs@168.121.98.7)
[11:52:00] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[11:52:00] *** Joins: Praise (~Fat@user/praise)
[11:52:00] *** Joins: enyc (~enyc@user/enyc)
[11:52:00] *** Joins: jushi (~j@2a01:4f9:c010:8455::1)
[11:52:00] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[11:52:00] *** Joins: [R] (~rs@genoce.org)
[11:52:00] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[11:52:00] *** Joins: riotz (riotz@user/riotz)
[11:52:00] *** Joins: phenom (~primus@user/phenom)
[11:52:00] *** Joins: SchmoSeph (sid530771@id-530771.tinside.irccloud.com)
[11:52:00] *** Joins: Kays (Kays@user/kays)
[11:52:00] *** Joins: Albright (~Albright@149.28.13.173)
[11:52:00] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[11:52:00] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[11:52:00] *** Joins: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[11:52:00] *** Joins: mcint (mcint@user/mcint)
[11:52:00] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[11:52:00] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[11:52:00] *** Joins: davve (davve@bsd.douchedata.com)
[11:52:00] *** Joins: devslash (~devslash@46.232.211.210)
[11:52:00] *** Joins: Bish (~arne@b2b-37-24-1-41.unitymedia.biz)
[11:52:00] *** Joins: tabakhase (tabakhase@user/tabakhase)
[11:52:00] *** Joins: davlefou_ (~davlefou@5.183.214.239)
[11:52:00] *** Joins: Swant (~swant@libera/staff/swant)
[11:52:00] *** Joins: xisop (~xisop@bnull.net)
[11:52:00] *** Joins: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[11:52:00] *** Joins: celphi (sid97751@user/celphi)
[11:52:00] *** Joins: hamess (~hamess@user/hamess)
[11:52:00] *** Joins: doji (~doji@user/doji)
[11:52:00] *** Joins: abraham (~abraham@143.244.185.86)
[11:52:00] *** Joins: gkatsev (~gkatsev@spacecompute.com)
[11:52:00] *** Joins: mynickisregister (~mynickisr@5.79.67.8)
[11:52:00] *** Joins: theskillwithin (~theskillw@user/theskillwithin)
[11:52:00] *** Joins: DCTWD (~dc@uz.utmappro.com)
[11:52:00] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[11:52:00] *** Joins: llinguini (sid257922@id-257922.hampstead.irccloud.com)
[11:52:00] *** Joins: Selicre (~x@hello.i.am.selic.re)
[11:52:00] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[11:52:00] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[11:52:00] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[11:52:00] *** Joins: Voxel (~f8er@user/voxel)
[11:52:00] *** Joins: Artea (~Lufia@artea.com.pt)
[11:52:00] *** Joins: foo (~foo@user/foo/x-8763512)
[11:52:00] *** Joins: de-facto (~de-facto@user/de-facto)
[11:52:00] *** Joins: morgabra (sid500580@user/morgabra)
[11:52:00] *** Joins: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com)
[11:52:00] *** Joins: Spydar007 (~spydar007@user/spydar007)
[11:52:00] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[11:52:00] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[11:52:00] *** Joins: dlam (~dlam@dlam.me)
[11:52:00] *** Joins: Benett (~Benett@xnetx.de)
[11:52:00] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[11:52:00] *** Joins: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e)
[11:52:00] *** Joins: Exa (exa@irc.moe)
[11:52:00] *** Joins: glider (~glider@user/glider)
[11:52:00] *** Joins: tazle (tazle@kapsi.fi)
[11:52:00] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[11:52:00] *** Joins: dfg (dfg@user/dfg)
[11:52:00] *** Joins: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com)
[11:52:00] *** Joins: ljharb (sid43720@user/ljharb)
[11:52:00] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[11:52:00] *** Joins: avu (~jan@user/avu)
[11:52:00] *** Joins: Dev0n (~Dev0n@user/dev0n)
[11:52:00] *** Joins: zacts (~zacts@user/zacts)
[11:52:00] *** Joins: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at)
[11:52:00] *** Joins: arash (arash@thinks.life.is-a.beauty)
[11:52:00] *** Joins: thykka (~thykka@2a01:4f8:c0c:e335::1)
[11:52:00] *** Joins: Unfixed (~Jake@64.31.33.140)
[11:52:00] *** Joins: Koopz (~Koopz@koopz.rocks)
[11:52:00] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[11:52:00] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[11:52:00] *** Joins: futs (~nico@142.93.239.247)
[11:52:00] *** Joins: Isthmusi (~Isthmus@user/isveni)
[11:52:00] *** Joins: betterOn1 (~user@vmi489242.contaboserver.net)
[11:52:00] *** Joins: rosseaux (~BeRo@2a00:1828:2000:859::2)
[11:52:00] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[11:52:00] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[11:52:00] *** Joins: croraf (croraf@croraf.ircforever.org)
[11:52:00] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[11:52:00] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[11:52:00] *** Joins: adar (uid1346@user/adar)
[11:52:00] *** Joins: hughrawlinson_ (sid11243@2a03:5180:f:3::2beb)
[11:52:00] *** Joins: andrew9184_ (sid416777@id-416777.uxbridge.irccloud.com)
[11:52:00] *** Joins: klys (~mdasoh@show.op8.us)
[11:52:00] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[11:52:00] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[11:52:00] *** Joins: ringo__ (~ringo@157.230.117.128)
[11:52:00] *** Joins: Emil (emil@emil.fi)
[11:52:00] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:52:00] *** Joins: lf94 (~lf94@user/lf94)
[11:52:00] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[11:52:00] *** Joins: Moyst_ (~moyst@user/moyst)
[11:52:00] *** molybdenum.libera.chat sets mode: +o ljharb
[11:52:00] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[11:52:00] *** Joins: theglass (~glass@user/theglass)
[11:52:00] *** Joins: Kirjava (~cake@user/kirjava)
[11:52:00] *** Joins: les (znc@user/les)
[11:52:00] *** Joins: Fossil (~Fossil@95.85.23.165)
[11:52:00] *** Joins: chronon (~chronon@user/chronon)
[11:52:00] *** Joins: ThePendulum (~znc@37.139.2.240)
[11:52:00] *** Joins: pez_ (~pez@user/pez)
[11:52:00] *** Joins: xsznix9 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[11:52:00] *** Joins: Joel (~jjshoe@user/joel)
[11:52:00] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[11:52:00] *** Joins: fakuve2 (~fakuve@192.210.243.250)
[11:52:00] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[11:52:00] *** Joins: phryk (~totallyno@user/phryk)
[11:52:00] *** Joins: pagios (~pagios@life.is-a.beauty)
[11:52:00] *** Joins: ttys000 (~ttys000@user/ttys000)
[11:52:00] *** Joins: hbjy (~hbjy@rockylinux/web/hbjy)
[11:52:00] *** Joins: Decker (~d3x0r@user/d3x0r)
[11:52:00] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[11:52:00] *** Joins: erry (~erry@errietta.me)
[11:52:00] *** Joins: naeluh__ (sid95128@id-95128.lymington.irccloud.com)
[11:52:00] *** Joins: edk (edk@libera/staff/edk)
[11:52:00] *** Joins: niko (~niko@libera/staff/niko)
[11:52:00] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[11:52:00] *** Joins: PigDude (~PigDude@159.203.16.199)
[11:52:00] *** Joins: OverCoder (~OverCoder@user/overcoder)
[11:52:00] *** Joins: hackdash (h@user/hackdash)
[11:52:00] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[11:52:00] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[11:52:00] *** Joins: ross (sid305269@user/ross)
[11:52:00] *** Joins: OneMirror (~far@onegrandcircle.com)
[11:52:00] *** Joins: APic (apic@apic.name)
[11:52:00] *** Joins: petril (~petril@user/petril)
[11:52:00] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[11:52:00] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:52:00] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[11:52:00] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[11:52:00] *** Joins: laris (undead@37.221.209.36)
[11:52:00] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[11:52:00] *** Joins: WizJin (~z0rbaznc@78.141.221.79)
[11:52:00] *** Joins: _nderscore (~nderscore@silentf.art)
[11:52:00] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[11:52:00] *** Joins: quesker (~idnet@mail.89vx.net)
[11:52:00] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[11:52:00] *** Joins: Sherpard2 (~VPard@user/sherpard2)
[11:52:00] *** Joins: Stx (stx@libera/staff/stx)
[11:52:00] *** Joins: joepie91 (~joepie91p@user/joepie91)
[11:52:00] *** Joins: con3 (~con3@143.198.53.32)
[11:52:00] *** Joins: newton (james@user/newton)
[11:52:00] *** Joins: ekl (~ekl@user/ekl)
[11:52:00] *** Joins: madprops (hj8oijo@user/madprops)
[11:52:00] *** Joins: trog (~trog@user/trog)
[11:52:00] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[11:52:00] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[11:52:00] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[11:52:00] *** Joins: cythrawll (sid384410@id-384410.ilkley.irccloud.com)
[11:52:00] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[11:52:00] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[11:52:00] *** Joins: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com)
[11:52:00] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:52:00] *** Joins: Liber- (cis@user/cis)
[11:52:00] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9)
[11:52:00] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[11:52:00] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[11:52:00] *** Joins: cebor (~cebor@user/cebor)
[11:52:00] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[11:52:00] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:52:00] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[11:52:00] *** Joins: Enissay (~Enissay@user/enissay)
[11:52:00] *** Joins: ozymandias (~ozymandia@libre.theyareafter.us)
[11:52:00] *** Joins: samsch (~samsch@171.ip-192-99-69.net)
[11:52:00] *** Joins: Byteflux (~byte@byteflux.net)
[11:52:00] *** Joins: Croran (~Croran@71.231.214.173)
[11:52:00] *** Joins: dmanto (~dmanto@181.110.128.50)
[11:52:00] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:52:00] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:10] *** Joins: jellobot (~jellobot@li334-26.members.linode.com)
[11:52:10] *** ChanServ sets mode: +v jellobot
[11:52:53] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[11:52:55] *** Joins: litharge (litharge@libera/bot/litharge)
[11:53:18] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[11:53:18] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[11:53:22] <dingir_D> deniska yea
[11:54:31] *** Quits: Pilum (~JKM@user/pilum) (Ping timeout: 256 seconds)
[11:54:31] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Ping timeout: 256 seconds)
[11:54:37] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[11:55:07] *** Joins: jazzy2 (~jaziz@user/jaziz)
[11:55:34] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[11:57:39] *** Parts: dingir_D (~dingir@user/dingir/x-9303082) (Leaving)
[11:57:48] *** Parts: programmar (~whatever@118.69.128.37) (Leaving)
[11:58:09] *** Joins: Pilum (~JKM@user/pilum)
[11:58:13] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[11:58:15] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[11:58:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[12:01:16] *** Joins: iomari891 (~iomari891@197.210.79.210)
[12:03:06] *** Quits: salad (~cucumber@188.25.234.155) (Quit: salad)
[12:03:33] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[12:04:31] *** Joins: michaelis (~michaelis@193.183.209.17)
[12:04:46] *** Parts: michaelis (~michaelis@193.183.209.17) ()
[12:12:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:13:28] *** Joins: sheetjs (~sheetjs@pool-108-53-213-150.nwrknj.fios.verizon.net)
[12:17:52] *** Joins: ggnoredo (~user@212.98.236.50)
[12:25:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:26:17] *** jazzy2 is now known as jazzy
[12:26:52] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:28:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:36:32] *** Joins: panella32 (~panella32@89.46.62.25)
[12:41:42] *** Quits: iomari891 (~iomari891@197.210.79.210) (Ping timeout: 256 seconds)
[12:43:19] *** Joins: qswz (~caub@89-80-20-125.abo.bbox.fr)
[12:43:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:45:41] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:50:09] *** Quits: nullroute (~nullroute@209.141.45.45) (Changing host)
[12:50:09] *** Joins: nullroute (~nullroute@user/nullroute)
[12:51:37] *** Joins: maret_ (~maret@static.85-10-193-148.clients.your-server.de)
[12:54:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:54:10] *** Quits: sharperguy (~sharpergu@89.244.120.152) (Ping timeout: 256 seconds)
[12:54:13] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Ping timeout: 240 seconds)
[12:54:41] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:05:55] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[13:06:32] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:13:10] *** Quits: mrdata (~mrdata@user/mrdata) (Ping timeout: 268 seconds)
[13:15:17] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[13:15:57] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[13:16:02] *** Quits: ross (sid305269@user/ross) (Ping timeout: 240 seconds)
[13:16:37] *** Quits: mexen (uid495612@user/mexen) (Ping timeout: 240 seconds)
[13:17:35] *** Joins: ross (sid305269@user/ross)
[13:17:37] *** Joins: mexen (uid495612@user/mexen)
[13:17:48] *** Quits: sheetjs (~sheetjs@pool-108-53-213-150.nwrknj.fios.verizon.net) (Remote host closed the connection)
[13:19:45] *** Joins: iomari891 (~iomari891@197.210.85.125)
[13:24:21] *** Joins: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de)
[13:27:27] *** Quits: colordrops (~erahhal@69.53.245.255) (Ping timeout: 256 seconds)
[13:28:10] *** Quits: mikrosis (~mikrosis@dynamic-046-114-175-218.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[13:29:00] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:33:39] <oscurochu> i stayed up all night working on my tests. ive got 22 test suites done, 64 more to go. im hoping to be done by this weekend.
[13:34:47] *** Joins: spinningCat (~spinningC@about/web/muscles)
[13:35:07] <spinningCat> can i get file name with creation time with javascript?
[13:36:09] <Maxdamantus> spinningCat: not in JavaScript itself, but if you're looking at some filesystem API, the operation would usually be called something like "stat"
[13:36:26] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[13:36:31] <Maxdamantus> JS itself has no concept of files.
[13:36:44] <spinningCat> but it has file api right
[13:36:53] <Maxdamantus> No.
[13:36:58] <spinningCat> hmm
[13:37:12] <Maxdamantus> node has APIs for filesystems and files.
[13:37:35] <spinningCat> i thought i could use this https://developer.mozilla.org/en-US/docs/Web/API/File
[13:37:52] <spinningCat> I see
[13:38:43] <spinningCat> i plan to get files name and creation date and sort it according to creation date and show those images file in page in sorted way
[13:38:50] <spinningCat> i guess i need backend for this
[13:39:10] <Maxdamantus> Get them from where?
[13:39:37] <spinningCat> filesystem
[13:39:52] <Maxdamantus> Is a web browser?
[13:40:19] *** Joins: Naan (~Naan@user/naan)
[13:40:20] <silly> js in browsers has no access to filesystems
[13:40:25] <spinningCat> i coouldnt understand
[13:40:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[13:40:42] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[13:42:46] *** Quits: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[13:44:13] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[13:46:48] *** Joins: mearp (~mearp@gateway/vpn/pia/mearp)
[13:47:12] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[13:47:25] <mearp> hi can anyone help me with tinymce.  I'm using openUrl and the tinymce instance doesn't seem to repsond to any postMessage requests
[13:47:48] <mearp> e.g. mceAction: 'close' to close the dialog window
[13:48:58] *** Joins: pluri (~pluri@user/pluri)
[13:50:09] *** Joins: enoq_ (~enoq@194-208-178-35.lampert.tv)
[13:50:09] *** Quits: enoq_ (~enoq@194-208-178-35.lampert.tv) (Remote host closed the connection)
[13:50:31] *** Joins: enoq__ (~enoq@194-208-178-35.lampert.tv)
[13:50:44] *** Quits: enoq__ (~enoq@194-208-178-35.lampert.tv) (Remote host closed the connection)
[13:55:45] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[13:58:03] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[13:58:37] *** Quits: maret_ (~maret@static.85-10-193-148.clients.your-server.de) (Ping timeout: 256 seconds)
[14:02:20] *** Joins: voltage_ (voltage@user/voltage)
[14:11:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bb:c31d:f4b5:273e) (Quit: Textual IRC Client: www.textualapp.com)
[14:12:56] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[14:18:43] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Remote host closed the connection)
[14:20:08] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[14:20:36] *** Joins: lenarhoyt (~lenarhoyt@mail.bfc-net.de)
[14:23:49] *** Quits: iomari891 (~iomari891@197.210.85.125) (Ping timeout: 240 seconds)
[14:25:03] *** Quits: oscurochu (~oscurochu@37.120.215.102) (Remote host closed the connection)
[14:25:19] *** Joins: iomari891 (~iomari891@197.210.78.79)
[14:28:56] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[14:29:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f)
[14:33:11] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[14:33:11] *** Quits: iomari891 (~iomari891@197.210.78.79) (Ping timeout: 256 seconds)
[14:33:51] *** Joins: iomari891 (~iomari891@197.210.84.204)
[14:34:30] *** Quits: mearp (~mearp@gateway/vpn/pia/mearp) (Quit: leaving)
[14:35:07] *** Joins: D4mned (~D1mned@212.101.251.147)
[14:36:55] *** Joins: maxzor__ (~maxzor@2a01cb04054faa007cbccbd0b03d578c.ipv6.abo.wanadoo.fr)
[14:39:25] *** Quits: iomari891 (~iomari891@197.210.84.204) (Ping timeout: 256 seconds)
[14:46:03] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:48:57] *** Quits: scara (~user@user/scara) (Ping timeout: 276 seconds)
[14:50:40] *** Joins: scara (~user@user/scara)
[14:55:51] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[14:59:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:00:32] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 256 seconds)
[15:07:20] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[15:07:49] *** Quits: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net) (Ping timeout: 240 seconds)
[15:08:17] *** Quits: spinningCat (~spinningC@about/web/muscles) (Ping timeout: 240 seconds)
[15:09:16] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:19:25] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[15:21:43] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[15:22:28] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:23:04] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:24:31] *** Joins: henry404088 (~henry4040@175.181.188.127)
[15:25:49] *** Quits: henry40408 (~henry4040@175.182.108.239) (Ping timeout: 240 seconds)
[15:25:49] *** henry404088 is now known as henry40408
[15:26:00] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:26:13] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[15:29:26] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[15:31:57] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[15:32:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[15:33:49] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[15:34:27] *** Joins: thelounge4695 (6d466420@67.205.143.82)
[15:35:40] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[15:38:30] *** Quits: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[15:40:10] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[15:43:13] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[15:45:39] *** Quits: thelounge4695 (6d466420@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[15:46:54] *** Joins: pmercado (~pmercado@186.107.48.62)
[15:49:12] *** Quits: nomic (~nomic@185.192.69.25) (Quit: Leaving)
[15:54:37] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 240 seconds)
[16:00:01] *** Joins: thelounge8854 (b9dc64fb@67.205.143.82)
[16:00:14] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[16:01:07] *** Quits: thelounge8854 (b9dc64fb@67.205.143.82) (Client Quit)
[16:03:49] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:04:33] *** Joins: thiras (~thiras@user/thiras)
[16:05:23] *** Joins: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de)
[16:06:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[16:07:49] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 256 seconds)
[16:08:14] *** Quits: D4mned (~D1mned@212.101.251.147) (Read error: Connection reset by peer)
[16:09:39] *** Joins: D4mned (~D1mned@212.101.253.125)
[16:10:48] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 256 seconds)
[16:11:04] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:12:19] *** Joins: trevors (~trevors@user/trevors)
[16:12:21] *** Quits: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[16:12:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[16:13:52] *** Joins: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de)
[16:14:09] *** Joins: Manik2375 (~Manik2375@205.253.124.139)
[16:14:57] *** Joins: enoq_ (~enoq@2a05:1141:1f5:5600:c134:6a7a:9835:f219)
[16:16:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:16:17] *** Joins: mrdata (~mrdata@user/mrdata)
[16:16:32] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[16:16:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:19:18] *** Quits: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[16:19:59] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[16:20:02] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[16:20:51] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[16:22:20] *** Quits: Manik2375 (~Manik2375@205.253.124.139) (Quit: Client closed)
[16:23:07] *** Joins: keypusher (~keypusher@user/keypusher)
[16:24:02] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:24:35] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:24:35] *** Joins: tmm88 (~tmm88@user/tmm88)
[16:27:27] *** Joins: keypushe- (keypusher@user/keypusher)
[16:28:17] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 240 seconds)
[16:30:11] *** Joins: MrBlue (~MrBlue@37.19.213.119)
[16:30:41] *** keypushe- is now known as keypusher
[16:37:13] *** Joins: thelounge2311 (c7f9e664@67.205.143.82)
[16:39:17] *** Quits: enoq_ (~enoq@2a05:1141:1f5:5600:c134:6a7a:9835:f219) (Ping timeout: 240 seconds)
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:45:04] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:54:41] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:54:48] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:54:48] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:00:19] *** Joins: Tabmow (~tabmow@user/tabmow)
[17:01:48] *** Quits: MrBlue (~MrBlue@37.19.213.119) (Ping timeout: 256 seconds)
[17:02:45] *** Joins: MrBlue (~MrBlue@172.98.66.25)
[17:04:48] *** Joins: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de)
[17:05:06] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[17:07:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:08:39] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[17:08:47] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:09:18] *** Joins: sam_1 (~sam_1@87.51.251.118)
[17:09:35] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[17:09:58] *** Joins: MrBlue_ (~MrBlue@146.70.75.86)
[17:10:43] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:11:11] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860)
[17:12:13] *** Quits: MrBlue (~MrBlue@172.98.66.25) (Ping timeout: 240 seconds)
[17:13:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[17:14:01] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:15:24] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[17:16:59] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:20:55] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 256 seconds)
[17:21:36] *** Joins: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de)
[17:23:00] *** Quits: thelounge2311 (c7f9e664@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[17:24:49] *** Joins: pulse (~pulse@user/pulse)
[17:26:10] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[17:26:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[17:29:12] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:30:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:30:38] *** Quits: ggnoredo (~user@212.98.236.50) (Remote host closed the connection)
[17:31:13] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[17:33:47] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[17:38:20] *** Joins: Carbone5 (~Carbone5@65.74.234.66)
[17:39:20] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[17:40:22] *** Quits: Carbone5 (~Carbone5@65.74.234.66) (Client Quit)
[17:41:08] *** Joins: johnjaye (~pi@154.6.152.74)
[17:42:36] *** Quits: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[17:42:52] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[17:43:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[17:52:09] *** Quits: D4mned (~D1mned@212.101.253.125) (Quit: Leaving)
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:01] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 240 seconds)
[17:53:32] *** Joins: xsperry (~xs@user/xsperry)
[17:56:13] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 240 seconds)
[17:57:34] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[17:59:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:59:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:59:50] *** Joins: wroathe (~wroathe@user/wroathe)
[18:02:55] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:04:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:05:49] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:07:57] *** Quits: hax (~hax@user/hax) (Ping timeout: 240 seconds)
[18:09:59] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[18:10:15] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[18:12:00] *** Joins: kaye (~kaye@201.30.180.233)
[18:12:23] *** Joins: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com)
[18:17:44] *** Quits: panella32 (~panella32@89.46.62.25) (Ping timeout: 256 seconds)
[18:17:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:18:26] *** Quits: kaye (~kaye@201.30.180.233) (Quit: leaving)
[18:20:39] *** Joins: kill (~killown@user/killown)
[18:22:08] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:26:00] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:26:14] <lmat> I've come not to be surprised by much I see in javascript, but this surprises me: https://imgur.com/Vd7r3Hb.png
[18:26:44] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:26:57] <systemfault> lmat: You just need to understand what the "in" operator does...
[18:27:07] <lmat> systemfault: clearly :-D
[18:27:33] <systemfault> It tells you if key X is in object X
[18:27:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:28:07] <lmat> Ah, gotcha :-D
[18:28:43] <systemfault> n> [0,3,5,6,7][1]
[18:28:44] <jellobot> (okay) 3
[18:28:53] <systemfault> Index 1 definitely exists
[18:29:27] <systemfault> n> [0,3,5,6,7].includes(1)
[18:29:27] <jellobot> (okay) false
[18:29:35] <systemfault> ^This may be what you actually wanted.
[18:31:54] *** Quits: mishiranu (~mishiranu@78.129.171.229) (Ping timeout: 256 seconds)
[18:32:45] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:33:50] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[18:35:00] *** Joins: Rockwood (~Rocky@user/rocky)
[18:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:37:13] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860) (Quit: dingdreher)
[18:37:40] <lmat> systemfault: Sweet, thanks!
[18:38:33] *** Quits: kill (~killown@user/killown) (Ping timeout: 256 seconds)
[18:41:44] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[18:44:19] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[18:45:44] *** Parts: robertparkerx2 (~robertpar@45-18-194-105.lightspeed.mmphtn.sbcglobal.net) ()
[18:46:42] *** Quits: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com) (Quit: Buh-bye)
[18:46:48] *** Quits: robertparkerx (~robertpar@user/robertparkerx) (Killed (NickServ (GHOST command used by robertparkerx2!~robertpar@45-18-194-105.lightspeed.mmphtn.sbcglobal.net)))
[18:46:56] *** Joins: robertparkerx (~robertpar@2001:19f0:5:6262:5400:3ff:fe40:6b40)
[18:46:56] *** Quits: robertparkerx (~robertpar@2001:19f0:5:6262:5400:3ff:fe40:6b40) (Changing host)
[18:46:56] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[18:47:33] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[18:47:40] *** robertparkerx is now known as Guest6684
[18:47:41] *** Quits: Guest6684 (~robertpar@user/robertparkerx) (Killed (zirconium.libera.chat (Nickname regained by services)))
[18:47:51] *** Joins: robertparkerx_ (~robertpar@45.77.96.128)
[18:48:30] *** MrBlue_ is now known as MrBlue
[18:48:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[18:49:46] *** Parts: robertparkerx_ (~robertpar@45.77.96.128) ()
[18:50:24] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[18:53:15] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[18:53:54] *** Joins: zwik (~zwik@84-31-155-106.cable.dynamic.v4.ziggo.nl)
[18:54:35] *** Joins: yte3 (~0@151.31.174.113)
[18:56:33] *** Quits: zwik (~zwik@84-31-155-106.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[18:58:25] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[18:59:07] <FlorianBad> Can  element.innerHTML += '<stuff>'  mess up  what was already in element?
[18:59:42] <FlorianBad> Or force the page to parse the whole html code again, instead of just <stuff>
[19:00:03] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860)
[19:01:18] *** Joins: onosendi (~onosendi@user/onosendi)
[19:05:08] <lmat> FlorianBad: Do you understand what that statement does? (creates a new modified string, and assigns it)
[19:05:42] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[19:05:57] <FlorianBad> ok so it reassigns the entire thing right? It doesn't have the ability to only affect what is added
[19:06:20] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[19:07:29] <systemfault> It kills whatever was in the container... uses the HTML parser to create new nodes and puts them in the container..
[19:07:58] <systemfault> So it resets everything.. including event listeners
[19:10:49] *** Joins: spinningCat (~spinningC@94.54.210.37)
[19:10:49] *** Quits: spinningCat (~spinningC@94.54.210.37) (Changing host)
[19:10:49] *** Joins: spinningCat (~spinningC@about/web/muscles)
[19:10:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:11:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:11:00] *** Joins: wroathe (~wroathe@user/wroathe)
[19:11:02] *** Joins: mishiranu (~mishiranu@78.129.171.229)
[19:12:29] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[19:12:42] <FlorianBad> ok thanks!
[19:14:21] <Rockwood> o/
[19:16:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:19:05] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:2051:e03e:815b:59b9) (Quit: Textual IRC Client: www.textualapp.com)
[19:19:41] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:21:04] *** Joins: chao (~stenno@user/stenno)
[19:21:25] <lf94> TIL "for await"
[19:24:37] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[19:25:32] *** Joins: BaggersIO (~BaggersIO@62.96.248.182)
[19:29:49] *** Quits: lenarhoyt (~lenarhoyt@mail.bfc-net.de) (Quit: Client closed)
[19:31:11] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:49b9:77c7:60be:3860) (Ping timeout: 268 seconds)
[19:32:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[19:34:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:34:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:34:58] *** Joins: wroathe (~wroathe@user/wroathe)
[19:35:49] *** Quits: BaggersIO (~BaggersIO@62.96.248.182) (Ping timeout: 240 seconds)
[19:36:09] *** Joins: colordrops (~erahhal@cpe-142-129-123-225.socal.res.rr.com)
[19:36:44] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:39:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:42:52] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:43:25] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 240 seconds)
[19:43:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:45:27] *** Joins: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de)
[19:47:01] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:48:09] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[19:49:21] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[19:49:28] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[19:51:48] *** Joins: cthulchu (~Cthulchu@ool-18e454e1.dyn.optonline.net)
[19:55:26] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[19:55:35] *** Joins: thelounge4735 (b9dc6508@67.205.143.82)
[19:55:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[19:58:56] *** chao is now known as stenno
[20:00:18] *** Quits: sharperguy (~sharpergu@dynamic-046-114-032-027.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[20:00:34] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[20:03:07] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:04:20] *** Joins: trevors (~trevors@user/trevors)
[20:07:23] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[20:08:33] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[20:12:38] *** Quits: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de) (Quit: Client closed)
[20:14:28] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:15:44] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:16:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:18:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[20:18:51] *** Joins: thojanssens (~thojansse@182.232.182.224)
[20:19:15] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[20:20:15] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:20:41] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:22:30] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[20:23:50] *** Quits: thelounge4735 (b9dc6508@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[20:27:03] *** Joins: nomic (~nomic@185.192.69.25)
[20:31:25] *** Joins: Guest98 (~Guest98@lfbn-bor-1-127-135.w90-50.abo.wanadoo.fr)
[20:31:37] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 240 seconds)
[20:35:22] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:35:44] *** Quits: Guest98 (~Guest98@lfbn-bor-1-127-135.w90-50.abo.wanadoo.fr) (Client Quit)
[20:36:00] *** Joins: src (~src@user/src)
[20:37:09] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[20:38:43] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[20:42:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:45:18] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[20:46:10] <reallymemorable> Is there a consensus on the best QR code generator libraries for JS/TS? I've been looking to use this: https://github.com/nayuki/QR-Code-generator
[20:51:32] *** Joins: Sol3 (~Sol3@user/sol3)
[20:52:49] <Sol3> hello o/
[20:55:28] <Sol3> iam building an fileupload with plupload. but i want the upload start in a popup after some files droped in the main windows. but i dont get the files added with uploaded.addFile( opener.files[i] ). is this a browser restriction? any ideas?
[20:55:43] *** Joins: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d)
[20:55:43] *** Quits: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d) (Changing host)
[20:55:43] *** Joins: corgi (~corgi@user/corgi)
[20:55:57] *** Quits: kakashiAL (~kakashi@ip-37-201-198-9.hsi13.unitymediagroup.de) (Ping timeout: 240 seconds)
[20:58:29] *** Joins: salad (~cucumber@188.25.234.155)
[21:00:30] *** Joins: trevors (~trevors@user/trevors)
[21:11:54] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[21:12:31] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:12:50] *** Quits: simius (~simius@user/simius) (Ping timeout: 256 seconds)
[21:13:06] *** Quits: Sven_vB_ (~sven@user/sven-vb/x-2094958) (Ping timeout: 276 seconds)
[21:18:12] *** Quits: thojanssens (~thojansse@182.232.182.224) (Quit: Leaving)
[21:19:20] <lf94> reallymemorable: code it yourself B)
[21:19:52] <lf94> Sol3: you don't get files but a File object which will cause it to work
[21:20:14] <lf94> I forget the details but iirc you can do something like turn it into a data url
[21:21:27] *** Joins: simius (~simius@user/simius)
[21:22:17] <Sol3> in the popup i see the "files" i.e. console.log(opener.files). but if i want to access them it doesnt work. maybe the popup has no access to files droped to the opener window?
[21:26:50] <Sol3> hm, ok. FileReader can load the file....
[21:27:02] <Sol3> no access problem ^^
[21:27:43] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[21:28:16] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[21:29:31] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:30:17] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 240 seconds)
[21:30:26] <systemfault> reallymemorable: A QR generator in JS isn't something that is used so often there's an obvious answer here... check what's available on NPM, look at the download number, if it's still maintained... etc
[21:30:40] <reallymemorable> ok thanks
[21:31:30] <sheetjs> one caveat with npm: some are server-side solutions
[21:31:40] <reallymemorable> this looks like the most used one on yarn: https://yarnpkg.com/package/qrcode
[21:31:48] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[21:31:49] <reallymemorable> well, the most used one that is recently updated
[21:32:08] <KevinX> Another option: https://larsjung.de/kjua/
[21:32:13] <systemfault> reallymemorable: Then, like sheetjs said, check if it's browser-friendly
[21:32:36] <sheetjs> https://github.com/davidshimjs/qrcodejs is more popular according to another microsoft property but has no presence in the first
[21:32:48] <systemfault> reallymemorable: Looks like it "Works on server and client (and react native with svg)"
[21:33:21] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[21:34:13] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[21:34:26] <sheetjs> hmm anyone else getting service unavailable on npm?
[21:34:54] <reallymemorable> I want to assign a referral link (and corresponding QR code) to my users, which they can share
[21:35:02] <reallymemorable> i assume i should do this server side
[21:35:09] <reallymemorable> since the links will not change once they are set
[21:35:16] <reallymemorable> does that seem correct?
[21:35:42] <sheetjs> assigning the links probably should be done server-side if the server needs to know the link addresses
[21:36:11] <sheetjs> but assuming that qr code generation is deterministic, that part can be done in browser
[21:36:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[21:36:35] <reallymemorable> is it preferable to do it in the browser?
[21:36:44] *** Joins: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d)
[21:36:45] *** Quits: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d) (Changing host)
[21:36:45] *** Joins: corgi (~corgi@user/corgi)
[21:36:47] <reallymemorable> rather than generate the QR code and pass the .png or whatever to the client?
[21:38:05] <sheetjs> you're sending the data necessary to build the QR code already
[21:38:19] <reallymemorable> so send the string, generate QR code client-side
[21:38:21] <sheetjs> so sending the image seems like unnecessary server work
[21:38:26] <reallymemorable> ok
[21:38:28] <reallymemorable> yep makes sense
[21:39:04] <reallymemorable> thank you
[21:42:21] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[21:42:28] *** Joins: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f5bd:b9cb:8667:df40)
[21:44:01] *** Joins: matsaman (~matsaman@user/matsaman)
[21:44:22] *** Joins: vysn (~vysn@user/vysn)
[21:48:48] *** Joins: hax (~hax@69.165.175.67)
[21:48:48] *** Quits: hax (~hax@69.165.175.67) (Changing host)
[21:48:48] *** Joins: hax (~hax@user/hax)
[21:48:57] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:3476:8e2b:2b96:b474)
[21:49:14] *** Joins: tmm88 (~tmm88@user/tmm88)
[21:49:19] *** Quits: BaggersIO (~BaggersIO@2a02:810d:983f:b088:f5bd:b9cb:8667:df40) (Ping timeout: 268 seconds)
[21:49:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:50:26] *** Quits: hax (~hax@user/hax) (Client Quit)
[21:51:25] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:53:43] *** Quits: ZeroWalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d) (Quit: Leaving)
[21:53:51] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) ()
[21:56:57] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:447d:90ef:1d3a:2ae0)
[21:57:00] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[21:57:00] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:447d:90ef:1d3a:2ae0) (Remote host closed the connection)
[21:57:23] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:447d:90ef:1d3a:2ae0)
[22:02:35] <mauz> hello javascript, is there a way to have this function: "function injector(a, b) { return function handler(){ return a + b } }" convert to a string "function handler() { return 2 + 2 }" as a result of calling injector(2,2) ?
[22:03:04] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:3476:8e2b:2b96:b474) (Quit: Client closed)
[22:03:16] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:3476:8e2b:2b96:b474)
[22:03:47] <mauz> for more context I'd like to generate a string of a function code with resolved parameters
[22:07:40] <sheetjs> n> function addn(n) { return function(x) { return x + n; } } addn(2)(3)
[22:07:41] <jellobot> (okay) 5
[22:07:45] <sheetjs> thats the baseline mauz
[22:08:16] *** Joins: panella32 (~panella32@154.6.16.6)
[22:08:26] <sheetjs> n> function addn(n) { return eval(`function(x) { return x + ${n}; }`) } addn(2)(3)
[22:08:27] <jellobot> (fail) SyntaxError: Function statements require a function name
[22:09:00] <mauz> sheetjs: actually at the end I'd like the function source code as a string
[22:09:08] <stenno> why?
[22:09:16] <sheetjs> n> function addn(n) { return eval(`function foo(x) { return x + ${n}; } foo`) } addn(2)(3)
[22:09:17] <jellobot> (okay) 5
[22:09:21] <stenno> do you need the function as a string
[22:09:30] <mauz> Im trying to generate code
[22:09:54] <stenno> metaprogramming?
[22:10:04] <mauz> stenno: yes metaprogramming serverless functions
[22:10:07] <stenno> or that even goes a step beyond metaprogramming
[22:10:19] <mauz> I know I can Function.toString()
[22:10:34] <stenno> i don't think there is a good way of doing what you want to do
[22:10:37] <mauz> but I'd like to replace variables inside
[22:10:46] <corgi> use string literals and replace
[22:10:47] <stenno> oh
[22:10:48] <mauz> I know I can use String.replace() but hey its 2022
[22:10:50] <corgi> there isn't a better way
[22:10:53] <stenno> well tehn just what sheetjs did
[22:10:59] <corgi> ^
[22:11:01] <stenno> tagged template literals
[22:11:04] <sheetjs> you can also use function toString after the fact
[22:11:17] <sheetjs> n> function foo(x) { return x + 1; } foo.toString()
[22:11:18] <jellobot> (okay) 'function foo(x) { return x + 1; }'
[22:11:28] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[22:16:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:18:17] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[22:21:52] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:22:32] *** Quits: simius (~simius@user/simius) (Ping timeout: 256 seconds)
[22:23:07] *** Quits: nomic (~nomic@185.192.69.25) (Quit: Leaving)
[22:23:26] *** Joins: nomic (~nomic@185.192.69.25)
[22:24:04] *** Joins: simius (~simius@user/simius)
[22:24:36] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[22:30:12] <sheetjs> hmm anyone having issues publishing to npm?
[22:30:50] *** Joins: Betal (~Betal@user/betal)
[22:32:47] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[22:35:00] <sheetjs> nvm they just wiped out old auth tokens
[22:35:47] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:39:19] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:40:06] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[22:42:02] <hassoon> never published to npm, i just use it
[22:42:19] <hassoon> i.e download/install packages
[22:42:19] <hassoon> :D
[22:42:29] <matsaman> I just avoid it =)
[22:42:33] <hassoon> wow
[22:42:38] <matsaman> ikr
[22:43:00] <hassoon> what else do you use to install whatever dependency/module/library you might need ?
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:47:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:19] *** Parts: fakuve2 (~fakuve@192.210.243.250) ()
[22:52:15] *** Joins: sam_1 (~sam_1@87.51.251.118)
[22:52:26] *** Joins: rambleba1 (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[22:54:37] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Ping timeout: 240 seconds)
[22:58:25] *** Joins: hax (~hax@69.165.175.67)
[22:58:25] *** Quits: hax (~hax@69.165.175.67) (Changing host)
[22:58:25] *** Joins: hax (~hax@user/hax)
[22:59:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[22:59:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[22:59:47] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[22:59:59] *** Quits: Anonamy (~Anonamy@node-1w7jr9qsmpnqx5s3vo4msg2dy.ipv6.telus.net) (Remote host closed the connection)
[23:00:28] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Read error: Connection reset by peer)
[23:00:39] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[23:01:28] *** Quits: robyn (~robyndrak@user/robyndrake) (Ping timeout: 268 seconds)
[23:01:37] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[23:01:41] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[23:02:24] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[23:02:30] *** Quits: rambleba1 (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[23:02:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:02:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:02:52] *** Joins: wroathe (~wroathe@user/wroathe)
[23:04:31] <ario> The color.js thing broke my build
[23:04:36] <ario> how did you guys fix it?
[23:04:52] <Sol3> FYI: put addFiles in uploader event "PostInit" and it works ^^ omg
[23:08:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:10:33] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[23:10:45] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:11:38] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[23:13:23] *** Quits: eekS (~eekS@user/eeks) (Ping timeout: 256 seconds)
[23:15:34] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[23:15:48] *** Joins: gehn (~gehn@user/gehn)
[23:16:05] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:20:32] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 252 seconds)
[23:28:50] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[23:31:48] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:32:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:32:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:32:05] *** Joins: wroathe (~wroathe@user/wroathe)
[23:33:58] *** Quits: davlefou_ (~davlefou@5.183.214.239) (Ping timeout: 260 seconds)
[23:34:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:35:32] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[23:36:37] <gde35> n> a = function(){/*do something*/};  b= a+"etc"; b
[23:36:38] <jellobot> (okay) 'function(){/*do something*/}etc'
[23:36:49] <gde35> mauz: just use it as a function?
[23:36:55] <ljharb> ario: answering you in #node.js
[23:37:53] <gde35> mauz: string replace seems fine. Slightly better would be to have some kind of object from which the function is always build.
[23:38:45] <gde35> mauz: but most of the excuses to do code generation no longer hold up in 2022
[23:39:53] <gde35> all the low hanging fruit is already done by jit
[23:41:00] <ljharb> mauz: code generation is always bad
[23:41:05] <ljharb> generate data, code should always be hand-written
[23:43:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:43:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:43:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:43:55] *** Joins: wroathe (~wroathe@user/wroathe)
[23:44:30] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:45:24] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[23:45:37] *** Joins: fakuve (~fakuve@192.210.243.250)
[23:45:38] <gde35> ljharb: well, in theory you could make a blob of asm and accomplish something but it would have to be really weird and you would have to know what you are doing.
[23:46:18] <gde35> something with thousands of conditionals that has to run many millions of times
[23:46:34] <gde35> unlikely for js
[23:48:02] <gde35> ljharb: the only instance I've done is menus building downloadable js but even if you have to run it the running version can just mimic the selection
[23:48:20] *** Quits: corgi (~corgi@user/corgi) (Ping timeout: 268 seconds)
[23:48:37] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[23:48:57] *** Joins: vysn (~vysn@user/vysn)
[23:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:55:23] *** Joins: sam_1 (~sam_1@87.51.251.118)
[23:56:45] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:59:49] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[23:59:51] *** Joins: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d)
[23:59:51] *** Quits: corgi (~corgi@2620:1b2:c40:3000:23d5:834:546c:ee7d) (Changing host)
[23:59:51] *** Joins: corgi (~corgi@user/corgi)
