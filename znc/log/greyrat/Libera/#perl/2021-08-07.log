[00:04:42] *** Quits: subie (~subie@2601:4c0:4080:bc0:342d:5fc2:5a63:8ca5) (Ping timeout: 240 seconds)
[00:07:17] *** Joins: ash_mobile (~androirc@2601:681:303:2150:3938:524f:9d48:83e3)
[00:11:21] *** Quits: ash_m (~androirc@user/ash-m/x-3292451) (Ping timeout: 258 seconds)
[00:13:46] *** Quits: ash_mobile (~androirc@2601:681:303:2150:3938:524f:9d48:83e3) (Ping timeout: 240 seconds)
[00:14:12] *** Joins: subie (~subie@2601:4c0:4080:bc0:342d:5fc2:5a63:8ca5)
[00:15:29] *** Quits: subie (~subie@2601:4c0:4080:bc0:342d:5fc2:5a63:8ca5) (Remote host closed the connection)
[00:17:14] *** Joins: subie (~subie@2601:4c0:4080:bc0:342d:5fc2:5a63:8ca5)
[00:22:28] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[00:23:33] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[00:28:21] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[00:29:34] *** Joins: ash_mobile (~androirc@2607:fb90:46e:6764:dd3:3096:f6f6:980f)
[00:30:15] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[00:33:23] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Remote host closed the connection)
[00:34:08] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200183846C844558C42.unconfigured.pool.telekom.hu)
[00:35:05] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200183846C844558C42.unconfigured.pool.telekom.hu) (Remote host closed the connection)
[00:35:23] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200183846C844558C42.unconfigured.pool.telekom.hu)
[00:36:24] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[00:36:50] * GumbyPAN CPAN Upload: Data-Record-Serialize-0.25 by DJERIUS https://metacpan.org/release/DJERIUS/Data-Record-Serialize-0.25
[00:45:50] *** Joins: p71 (~p71@071-090-085-184.res.spectrum.com)
[00:45:50] *** Quits: zakame (~zakame@user/zakame) (Quit: WeeChat 2.9)
[00:47:58] *** Joins: Adois (~Adoi@user/adoi)
[00:55:19] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[00:58:43] *** Quits: silverwhitefish (~hidden@47.202.102.10) (Ping timeout: 250 seconds)
[01:05:16] *** Quits: ash_mobile (~androirc@2607:fb90:46e:6764:dd3:3096:f6f6:980f) (Ping timeout: 268 seconds)
[01:08:31] *** Quits: EGD (~egd@user/egd) ()
[01:20:44] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 258 seconds)
[01:22:16] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:23:45] *** Joins: zakame (~zakame@user/zakame)
[01:23:48] *** Joins: jlenz__ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[01:27:11] *** Quits: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 258 seconds)
[01:33:44] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200183846C844558C42.unconfigured.pool.telekom.hu) (Ping timeout: 256 seconds)
[01:36:44] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:55:20] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[02:05:44] *** Joins: Trigon (~reuben@73.127.1.41)
[02:07:22] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 272 seconds)
[02:26:43] *** LSD is now known as acidsys
[02:28:04] *** Quits: woei (~woei@144.248.22.115) (Quit: Client closed)
[02:28:51] *** Joins: woei (~woei@144.248.22.115)
[02:33:30] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[02:33:55] *** Quits: N4buc0 (~N4buc0@2001:1284:f016:1112:c1b7:d115:ba5a:a45f) (Remote host closed the connection)
[02:40:43] *** Quits: zapwai (~zapwai@2600:8805:8002:ed00:346a:d6e3:bd63:1a16) (Quit: Slackin')
[02:46:11] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 250 seconds)
[03:02:42] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 256 seconds)
[03:08:54] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:09:17] *** Quits: magla (~gelignite@55d4c44d.access.ecotel.net) (Quit: Stay safe!)
[03:17:07] * GumbyPAN CPAN Upload: DNS-Unbound-0.25_06 by FELIPE https://metacpan.org/release/FELIPE/DNS-Unbound-0.25_06
[03:24:07] *** Joins: ens (~ens@yoke.ch0wn.org)
[03:24:34] *** Joins: whynot (~whynot@37.73.5.86)
[03:29:31] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[03:29:41] *** Joins: Su-Shee (~Susanne@p4ffc7a22.dip0.t-ipconnect.de)
[03:31:41] *** Quits: Su-Shee_ (~Susanne@p4ff4945c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:34:00] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 252 seconds)
[03:41:49] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:47:10] * GumbyPAN CPAN Upload: Geo-Address-Formatter-1.96 by EDF https://metacpan.org/release/EDF/Geo-Address-Formatter-1.96
[03:49:12] *** Quits: Sophira (~sophie@matrix.theblob.org) (Ping timeout: 255 seconds)
[03:49:54] *** Joins: Sophira (~sophie@matrix.theblob.org)
[03:50:45] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:52:11] * GumbyPAN CPAN Upload: Archive-Libarchive-Peek-0.04 by PLICEASE https://metacpan.org/release/PLICEASE/Archive-Libarchive-Peek-0.04
[03:55:41] *** Quits: gryphn (~gryphon@84.17.45.19) (Quit: kthxbye)
[04:00:31] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Remote host closed the connection)
[04:09:35] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.2)
[04:18:31] *** Joins: whynot_ (~whynot@37.73.101.67)
[04:18:43] *** Quits: whynot (~whynot@37.73.5.86) (Killed (NickServ (GHOST command used by whynot_!~whynot@37.73.101.67)))
[04:18:51] *** whynot_ is now known as whynot
[04:26:16] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 258 seconds)
[04:32:34] *** Joins: gggp_ (~gggp@60.10.194.46)
[04:33:09] *** Parts: ology (~gene@user/ology) ()
[04:40:12] *** Quits: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net) (Quit: leaving)
[04:40:27] *** Joins: PaulFranz (~pfranz@c-73-187-178-34.hsd1.pa.comcast.net)
[04:42:16] * GumbyPAN CPAN Upload: Firefox-Marionette-1.12 by DDICK https://metacpan.org/release/DDICK/Firefox-Marionette-1.12
[04:57:34] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[05:07:33] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:14:04] *** Joins: gggp__ (~gggp@221.219.65.230)
[05:15:46] *** Joins: gggp (~gggp@221.219.65.230)
[05:17:38] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[05:19:16] *** Quits: gggp__ (~gggp@221.219.65.230) (Ping timeout: 272 seconds)
[05:25:55] *** Quits: jess (~jess@libera/staff/jess) ()
[05:28:04] *** Quits: Somni_ (~insomnia@193-227-58-66.gci.net) (Ping timeout: 272 seconds)
[05:29:37] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[05:56:44] *** Quits: Pali (~pali@user/pali) (Ping timeout: 258 seconds)
[06:01:53] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 268 seconds)
[06:02:08] *** Joins: gast0n (~g4570n@user/gast0n)
[06:06:25] * GumbyPAN CPAN Upload: Time-Zone-Olson-0.37 by DDICK https://metacpan.org/release/DDICK/Time-Zone-Olson-0.37
[06:07:32] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[06:10:27] *** Joins: R2robot (~R2robot@user/r2robot)
[06:16:07] *** Quits: gggp (~gggp@221.219.65.230) (Read error: Connection reset by peer)
[06:16:45] *** Joins: fstd (~fstd@xdsl-78-35-72-109.nc.de)
[06:21:02] *** Quits: fstd_ (~fstd@xdsl-78-34-189-238.nc.de) (Ping timeout: 256 seconds)
[06:21:20] *** Joins: gggp (~gggp@60.10.23.170)
[06:21:35] *** Joins: Su-Shee_ (~Susanne@p4ff499a0.dip0.t-ipconnect.de)
[06:25:06] *** Quits: Su-Shee (~Susanne@p4ffc7a22.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:28:01] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[06:29:11] *** Joins: csrf (~csrf@user/csrf)
[06:29:39] *** Quits: bmeneg (~bmeneg@2804:828:f233:5a4b:7e83:50f:9dc1:719b) (Quit: Konversation terminated!)
[06:30:15] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 268 seconds)
[06:32:01] *** Joins: Trigon (~reuben@73.127.1.41)
[06:40:16] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:46:38] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:46:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:46:38] *** finn_elija is now known as FinnElija
[06:47:01] *** Joins: Peppaq (~quassel@2001:470:1f0b:751:11f9:e344:e09a:f2df)
[06:50:35] *** Quits: Peppard (~quassel@dynamic-095-114-094-013.95.114.pool.telefonica.de) (Ping timeout: 250 seconds)
[06:53:38] *** Joins: YaoNai (~YaoNai@user/yaonai)
[07:04:31] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[07:13:08] *** Quits: whynot (~whynot@37.73.101.67) (Quit: leaving)
[07:17:48] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: No Ping reply in 180 seconds.)
[07:18:03] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[07:31:01] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[07:35:06] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 240 seconds)
[07:38:32] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:43:34] *** Joins: Martchus (~martchus@2a01:c22:7ac3:b700:d250:99ff:fe49:3cce)
[07:46:22] *** Quits: Martchus_ (~martchus@dynamic-077-002-089-160.77.2.pool.telefonica.de) (Ping timeout: 258 seconds)
[07:57:32] *** Quits: arthurpbs_ (~arthurpbs@168.121.98.198) (Ping timeout: 272 seconds)
[07:57:49] *** Joins: arthurpbs (~arthurpbs@168.121.98.198)
[08:01:38] * GumbyPAN CPAN Upload: Text-ANSI-Fold-2.11 by UTASHIRO https://metacpan.org/release/UTASHIRO/Text-ANSI-Fold-2.11
[08:06:13] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:12:42] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (Ping timeout: 240 seconds)
[08:20:01] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[08:24:21] *** Joins: ash_mobile (~androirc@2601:681:303:2150:3938:524f:9d48:83e3)
[08:24:53] *** Quits: ash_mobile (~androirc@2601:681:303:2150:3938:524f:9d48:83e3) (Client Quit)
[08:30:51] *** Joins: gggp_ (~gggp@123.116.95.154)
[08:31:22] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 256 seconds)
[08:31:50] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[08:32:27] *** Joins: Trigon (~reuben@73.127.1.41)
[08:34:18] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[08:35:53] *** Joins: gggp__ (~gggp@60.10.194.46)
[08:39:24] *** Quits: gggp_ (~gggp@123.116.95.154) (Ping timeout: 272 seconds)
[08:41:23] *** Joins: gggp_ (~gggp@60.10.194.46)
[08:44:17] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[08:54:51] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[09:19:53] *** Joins: gggp__ (~gggp@60.10.23.170)
[09:23:07] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 250 seconds)
[09:24:22] *** Joins: gggp_ (~gggp@60.10.194.46)
[09:27:28] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[09:30:04] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 272 seconds)
[09:32:52] *** Joins: gggp__ (~gggp@60.10.194.46)
[09:32:58] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:36:00] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[09:38:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 258 seconds)
[09:47:45] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[10:05:44] *** Joins: furrymcgee (~devuan@31.179.186.66)
[10:06:40] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 258 seconds)
[10:18:52] *** Quits: drbean (drbean@thinks.life.is-a.beauty) (Ping timeout: 245 seconds)
[10:30:50] *** Joins: gggp_ (~gggp@123.113.176.18)
[10:31:53] *** Joins: horsepatat (~horsepata@80.89.78.24)
[10:34:16] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[10:41:56] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[10:42:51] *** Joins: gggp__ (~gggp@60.10.194.46)
[10:46:42] *** Quits: gggp_ (~gggp@123.113.176.18) (Ping timeout: 272 seconds)
[10:56:56] * GumbyPAN CPAN Upload: App-ansifold-1.10 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansifold-1.10
[10:57:01] *** Joins: gggp_ (~gggp@60.10.194.46)
[10:57:46] *** Joins: drbean (drbean@thinks.life.is-a.beauty)
[10:59:34] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:00:21] *** Joins: gggp__ (~gggp@60.10.194.46)
[11:03:47] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:09:03] *** Joins: mattil (~mattilinn@87-92-57-75.bb.dnainternet.fi)
[11:16:48] *** Joins: gggp_ (~gggp@60.10.194.46)
[11:19:30] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:21:32] *** Quits: fling (~fling@user/fling) (Ping timeout: 272 seconds)
[11:21:59] * GumbyPAN CPAN Upload: JSONSchema-Validator-0.006 by LOGIONIZ https://metacpan.org/release/LOGIONIZ/JSONSchema-Validator-0.006
[11:24:20] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:37:18] *** Joins: EGD (~egd@user/egd)
[11:37:37] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[11:43:26] *** Joins: magla (~gelignite@55d4004f.access.ecotel.net)
[11:45:54] *** Joins: Trigon (~reuben@73.127.1.41)
[11:48:52] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 245 seconds)
[11:52:02] * GumbyPAN CPAN Upload: Graphics-Fig-v1.0.6 by SCOOTER https://metacpan.org/release/SCOOTER/Graphics-Fig-v1.0.6
[11:52:12] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[11:52:34] *** Joins: zakame (~zakame@user/zakame)
[12:06:03] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 252 seconds)
[12:18:55] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 258 seconds)
[12:20:56] *** Joins: zakame (~zakame@user/zakame)
[12:27:06] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[12:28:55] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:29:09] <shlomif> incoming dist!
[12:29:42] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 252 seconds)
[12:32:06] * GumbyPAN CPAN Upload: App-Tac_n-0.0.1 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-Tac_n-0.0.1
[12:33:40] *** Quits: tbcr (~tbcr@user/tbcr) (Read error: Connection reset by peer)
[12:33:54] *** Joins: tbcr (~tbcr@75.183.195.9)
[12:34:43] *** Joins: CycoCid (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[12:34:56] *** Quits: smitop (~smitop@user/smitop) (Quit: Ping timeout (120 seconds))
[12:35:36] *** Quits: gugod (gugod@li7-202.members.linode.com) (Ping timeout: 256 seconds)
[12:35:39] *** Joins: smitop (~smitop@user/smitop)
[12:35:54] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Excess Flood)
[12:35:57] *** Quits: Skarn (~skarn@user/skarn) (Remote host closed the connection)
[12:36:10] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (Ping timeout: 256 seconds)
[12:36:10] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 256 seconds)
[12:36:22] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (Ping timeout: 245 seconds)
[12:36:28] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[12:36:44] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 256 seconds)
[12:36:44] *** Quits: bleb (~cm@user/bleb) (Ping timeout: 252 seconds)
[12:36:47] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Ping timeout: 245 seconds)
[12:36:48] *** Quits: bocaneri (~bismilah@about/linux/staff/sauvin) (Ping timeout: 245 seconds)
[12:36:48] *** Quits: buZz (~buzz@sky.thebigblue.tk) (Ping timeout: 245 seconds)
[12:36:58] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[12:37:18] *** Quits: mruszczyk (sid160336@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:37:18] *** Quits: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[12:37:18] *** Quits: systemdlete (~systemdle@c-73-48-236-81.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:37:37] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Ping timeout: 245 seconds)
[12:38:02] *** Joins: bleb (~cm@user/bleb)
[12:38:08] *** Joins: finsternis (~X@23.226.237.192)
[12:38:13] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[12:38:23] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[12:38:23] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[12:38:23] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[12:38:34] *** Joins: buZz (~buzz@sky.thebigblue.tk)
[12:38:40] *** Joins: mruszczyk (sid160336@id-160336.tinside.irccloud.com)
[12:38:42] *** Joins: bocaneri (~bismilah@li889-61.members.linode.com)
[12:38:44] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[12:38:57] *** buZz is now known as Guest5137
[12:39:05] *** Joins: systemdlete (~systemdle@c-73-48-236-81.hsd1.ca.comcast.net)
[12:39:17] *** Joins: gugod (gugod@li7-202.members.linode.com)
[12:41:32] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[12:43:52] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[12:49:07] *** Joins: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net)
[12:52:26] *** Quits: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net) (Read error: Connection reset by peer)
[12:52:44] *** Joins: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net)
[13:01:08] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-19.prtc.net)
[13:07:03] *** Joins: N4buc0 (~N4buc0@2001:1284:f016:1112:ab84:136:c1b1:b7e6)
[13:16:02] *** Quits: horsepatat (~horsepata@80.89.78.24) (Ping timeout: 258 seconds)
[13:24:17] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 245 seconds)
[13:24:58] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[13:31:08] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[13:39:44] *** Joins: zakame (~zakame@user/zakame)
[13:40:01] *** Joins: Adois (~Adoi@user/adoi)
[13:42:37] *** CycoCid is now known as Kulrak
[13:46:55] *** Quits: Adura (~Adura@user/adura) (Quit: Quit)
[13:56:02] *** Joins: Adoi (~Adoi@user/adoi)
[13:58:27] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 245 seconds)
[14:13:16] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-19.prtc.net) (Quit: Client closed)
[14:15:23] *** Joins: habamax (~habamax@broadband-109-173-44-6.ip.moscow.rt.ru)
[14:15:24] *** Quits: habamax (~habamax@broadband-109-173-44-6.ip.moscow.rt.ru) (Changing host)
[14:15:24] *** Joins: habamax (~habamax@user/habamax)
[14:16:18] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-4-51.prtc.net)
[14:16:54] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-4-51.prtc.net) (Client Quit)
[14:17:03] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:33:36] <Altreus> Gonna stream some perl dev https://twitch.tv/mraltreussir
[14:33:36] <Paperbot> Link title(s): [ Twitch ]
[14:48:25] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net) (Ping timeout: 246 seconds)
[14:50:44] *** Joins: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[14:58:08] <shlomif> perlbot: top 20 karma
[14:58:09] <perlbot> shlomif: c: 20972 notepad: 2996 moritz: 2125 i: 1912 jj merelo: 1888 mst: 1431 pmichaud: 1294 mauke: 1252 fglock: 1137 pmurias: 1128 lwall: 968 alexdaniel: 953 zoffix znet: 931 ruoso: 884 x: 878 putter: 875 $i: 873 jj: 805 thrig: 783 leonerd: 774 
[14:58:37] <shlomif> perlbot: bottom 20 karma
[14:58:37] <perlbot> shlomif: <: -10913 mysql: -9049 -: -8410 ----: -2924 ^: -2148 <!: -1833 alpha: -1385 failed: -1101 --: -945 misc: -728 ie: -639 <<: -392 ---: -357 ": -328 ryan: -283 marpa: -269 php: -264 required: -257 <!{endif}: -240 `: -232 
[15:03:08] *** Joins: dimbag (~dimbag@ppp-62-76-16-3.ppp.kmv.ru)
[15:07:18] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[15:13:51] *** Joins: Pali (~pali@user/pali)
[15:42:16] *** Joins: jess (~jess@libera/staff/jess)
[15:44:25] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[15:48:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[15:51:53] <simcop2387> Mst, grinnz, https://i.imgur.com/cxBjpXT.jpg
[16:06:32] <xq> sweval: sprintf "%vB", pack("f", "NaN")
[16:06:34] <perlbot> xq: 0.0.11000000.1111111
[16:06:49] <xq> is this binary value produced according to some standard? if so, which?
[16:08:02] <LeoNerd> I expect it's an IEEE float
[16:08:48] <Pali> yea, it should be according to the IEEE 754 standard
[16:10:44] <LeoNerd> NaN is represented by exponent being all-bits-1
[16:11:10] <Pali> this applies also for +/-inf
[16:11:56] <Pali> nan should differs from inf by having non-zero fraction part
[16:12:26] <Pali> and sign can be both positive and negative
[16:14:22] <Pali> and snan differts from qnan (standard nan) by having set highest bit in fraction part
[16:14:52] <xq> I guess sprintf prints bits in a confusing order
[16:15:24] <xq> order of bits inside byte
[16:15:43] <xq> because the above output does not contain 8 ones in row
[16:15:54] <xq> but if the bit order was reversed, it would
[16:20:35] <xq> if I check all "exponent" checkboxes and first "mantissa" checkbox on this website https://www.h-schmidt.net/FloatConverter/IEEE754.html I get a nan
[16:20:36] <Paperbot> Link title(s): [ IEEE-754 Floating Point Converter ]
[16:20:51] <xq> and the "
[16:21:03] <xq> Binary Representation" field contains: "01111111110000000000000000000000"
[16:21:43] <xq> is there a way to obtain output "01111111110000000000000000000000" from input "NaN" in perl, via sprintf/pack or otherwise?
[16:22:04] <Pali> yea, it should be... now I'm playing with unpack to get it
[16:23:52] <Pali> sweval: reverse unpack("(B8)*", pack("f", "NaN"))
[16:23:54] <perlbot> Pali: 11111110000000110000000000000000
[16:25:31] <Pali> I think now it is correct
[16:25:56] <xq> this neither contains eight ones in a row, nor matches the above
[16:26:22] <xq> sweval: sprintf "%v08B", pack("f>", "NaN")
[16:26:23] <perlbot> xq: 01111111.11000000.00000000.00000000
[16:26:47] <xq> this is what I came up with, but it's strange
[16:27:00] <xq> on my computer, I get first bit set
[16:27:07] *** Guest5137 is now known as buZz
[16:27:12] <xq> for some reason perlbot's perl prefers first bit cleared in NaN
[16:27:40] <Pali> I think that this does not matter as you have both "positive" NaN and "negative" NaN
[16:28:08] <Pali> first bit should be sign bit
[16:28:58] <Pali> sweval: sprintf "%v08B", pack("f>", "+Inf")
[16:29:00] <perlbot> Pali: 01111111.10000000.00000000.00000000
[16:29:02] <Pali> sweval: sprintf "%v08B", pack("f>", "-Inf")
[16:29:03] <perlbot> Pali: 11111111.10000000.00000000.00000000
[16:29:21] <Pali> sweval: reverse unpack("(B8)*", pack("f", "+Inf"))
[16:29:23] <perlbot> Pali: 11111110000000010000000000000000
[16:29:25] <Pali> sweval: reverse unpack("(B8)*", pack("f", "-Inf"))
[16:29:27] <perlbot> Pali: 11111111000000010000000000000000
[16:29:50] <Pali> hm... ok so, so with unpack it is wrong
[16:29:58] <xq> told you so
[16:30:55] <Pali> bytes are OK, but bits itself are in reverse order
[16:33:11] <xenu> perl's nan is sometimes negative, sometimes positive
[16:33:24] <xenu> https://github.com/Perl/perl5/issues/18473
[16:33:25] <Paperbot> Link title(s): [ perl's NaN is -NaN · Issue #18473 · Perl/perl5 · GitHub ]
[16:34:29] <xq> sweval: [reverse unpack("(B8)*", pack("f", "+Inf"))]
[16:34:30] <perlbot> xq: ["01111111",10000000,"00000000","00000000"]
[16:34:41] *** Quits: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net) (Read error: Connection reset by peer)
[16:34:42] <xq> sweval: [reverse unpack("(B8)*", pack("f", "-Inf"))]
[16:34:43] <perlbot> xq: [11111111,10000000,"00000000","00000000"]
[16:35:02] *** Joins: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net)
[16:35:06] <xq> Pali: the bits are fine
[16:35:23] *** Joins: orange97 (~quassel@130.43.94.168.dsl.dyn.forthnet.gr)
[16:35:24] <xq> it's just that leading zero was somehow lost
[16:36:03] <xq> look at your example: 
[16:36:10] <xq> < Pali> sweval: reverse unpack("(B8)*", pack("f", "+Inf"))
[16:36:21] <xq> the output that perlbot reported is "11111110000000010000000000000000"
[16:36:29] <xq> when there should be a leading zero here ^
[16:36:37] <xq> visible here:
[16:36:49] <xq> sweval: [reverse unpack("(B8)*", pack("f", "+Inf"))]
[16:36:50] <perlbot> xq: ["01111111",10000000,"00000000","00000000"]
[16:37:06] <xq> same code only printed by dumper
[16:37:50] <Pali> eval: say reverse unpack("(B8)*", pack("f", "+Inf"))
[16:37:51] <perlbot> Pali: 01111111100000000000000000000000 
[16:38:12] <Pali> eval: reverse unpack("(B8)*", pack("f", "+Inf"))
[16:38:13] <perlbot> Pali: 11111110000000010000000000000000
[16:38:27] <Pali> WTF??
[16:38:35] <xq> bit order differs
[16:39:40] *** Quits: lopid (~lopid@user/lopid) (Quit: WeeChat 3.2)
[16:40:36] <xq> the fact that my perl generated negative nan and perlbot's perl generated positive nan, as well as the fact that bot apparently has different printing mechanisms did not make this easy
[16:41:25] <Pali> eval: unpack("B*", pack("f", "+Inf"))
[16:41:27] <perlbot> Pali: 00000000000000001000000001111111
[16:41:28] <Pali> eval: unpack("B*", pack("f", "-Inf"))
[16:41:29] <perlbot> Pali: 00000000000000001000000011111111
[16:41:37] <Pali> eval: unpack("b*", pack("f", "+Inf"))
[16:41:39] <perlbot> Pali: 00000000000000000000000111111110
[16:41:40] <Pali> eval: unpack("b*", pack("f", "-Inf"))
[16:41:42] <perlbot> Pali: 00000000000000000000000111111111
[16:41:54] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 276 seconds)
[16:42:11] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:42:39] <xq> notice that you are returning a list
[16:42:57] <xq> and the bot somehow implicitly prints that list
[16:43:18] <Pali> B* and b* should produce just one scalar
[16:43:56] *** Joins: lopid (~lopid@user/lopid)
[16:44:10] <xenu> also
[16:44:10] <Pali> so lowercase b* should return just one scalar but with bits in reverse order
[16:44:20] <xq> the case with "(B8)*" produced a list
[16:44:42] <Pali> yes (B8)* produce list
[16:45:08] <Pali> eval: scalar reverse unpack("b*", pack("f", "-Inf"))
[16:45:10] <perlbot> Pali: 11111111100000000000000000000000
[16:45:12] <Pali> eval: scalar reverse unpack("b*", pack("f", "+Inf"))
[16:45:13] <perlbot> Pali: 01111111100000000000000000000000
[16:45:45] <Pali> eval: scalar reverse unpack("b*", pack("f", "NaN"))
[16:45:47] <perlbot> Pali: 01111111110000000000000000000000
[16:46:02] <xenu> yeah this looks correct
[16:46:22] <xq> bot's mechanism of implicitly printing a list uses a different bit order than the order in dumped arrayref
[16:46:33] <xq> compare the same thing with [] and without:
[16:46:40] <xq> sweval: reverse unpack("(B8)*", pack("f", "+Inf"))
[16:46:42] <perlbot> xq: 11111110000000010000000000000000
[16:46:46] <xq> sweval: [reverse unpack("(B8)*", pack("f", "+Inf"))]
[16:46:47] <perlbot> xq: ["01111111",10000000,"00000000","00000000"]
[16:46:52] <Pali> eval: join "", reverse unpack("(B8)*", pack("f", "NaN"))
[16:46:54] <perlbot> Pali: 01111111110000000000000000000000
[16:47:00] <Pali> eval: join "", reverse unpack("(B8)*", pack("f", "+Inf"))
[16:47:02] <perlbot> Pali: 01111111100000000000000000000000
[16:47:34] <Pali> so explicit string concat makes it work too...
[16:48:32] <xq> must be context
[16:48:33] <xenu> xq: it runs in scalar context
[16:48:48] <xenu> eval: print scalar reverse unpack("(B8)*", pack("f", "+Inf"))
[16:48:48] <xq> yeah thats what I just figured
[16:48:50] <perlbot> xenu: 11111110000000010000000000000000
[16:48:57] <xenu> eval: print reverse unpack("(B8)*", pack("f", "+Inf"))
[16:48:59] <perlbot> xenu: 01111111100000000000000000000000
[16:52:38] <xq> reverse is not the best API
[16:52:44] <xq> to put it politely
[16:52:44] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[16:54:06] <xq> sweval: my @A = 1..5; [(reverse @A), (scalar reverse @A)]
[16:54:08] <perlbot> xq: [5,4,3,2,1,54321]
[16:54:35] *** Joins: diskin (~diskin@109.165.42.115)
[16:54:48] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:55:42] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[16:56:02] *** Joins: samir (~samir@pool-173-48-82-26.bstnma.fios.verizon.net)
[16:56:34] * GumbyPAN CPAN Upload: DNS-Unbound-0.25_07 by FELIPE https://metacpan.org/release/FELIPE/DNS-Unbound-0.25_07
[17:01:09] <Altreus> I'm doing perl -It/lib -Ilib script.pl and expecting it to find the module in t/lib before it finds it in lib
[17:01:14] <Altreus> Am I wrong to expect that?
[17:01:27] <Altreus> t/lib is first in @INC
[17:01:36] <Altreus> if I remove it from lib, it does find it in t/lib
[17:01:41] <Altreus> like if I rm the file
[17:03:35] <xenu> are you sure t/lib is first? 
[17:03:43] <xenu> maybe you have PERL5OPT set to "-Ilib"
[17:03:44] <Altreus> yes
[17:03:47] <Altreus> maybe it did work actually
[17:03:58] <Altreus> mojo's output was subtly different and I didn't realise
[17:04:32] <Altreus> aha, yes it did
[17:04:43] <Altreus> I just forgot to make mojo actually error when there are errors
[17:06:04] *** Joins: fling (~fling@user/fling)
[17:08:19] *** Joins: GuiToris (~beni@user/guitoris)
[17:10:40] <GuiToris> hello, I don't know perl at all. I was wondering if I can number the search and replace results? I have a lot of {{c:: that I'd like to replace them by {{c1:: {{c2:: {c3:: so on and so forth
[17:10:42] <Altreus> hmm if I use Module in the *script* then use lib works
[17:10:59] <Altreus> But if I use lib and let the mojo app load Module, it finds the wrong one
[17:12:08] <Altreus> ah ffs
[17:12:13] <Altreus> there was use lib in the app too :D
[17:12:17] <Altreus> never do that :(
[17:12:42] <Altreus> GuiToris: sure, just keep a counter and put it in, then $i++ after the replace
[17:13:01] <Altreus> GuiToris: would help if you showed what you are doing if you want more specific assistance :)
[17:13:37] <xenu> GuiToris: my $i = 1; s/\{\{c::/"{{c" . $i++ . "::"/eg ?
[17:14:49] <xenu> eval: $_ = "{{c:: {{c::"; my $i = 1; s/\{\{c::/"{{c" . $i++ . "::"/eg; $_
[17:14:50] <perlbot> xenu: {{c1:: {{c2::
[17:14:54] <GuiToris> thank you, how this should be run? can I run it directly from the command line, or I have to save it as a file?
[17:15:36] <xenu> ah, you're using perl as a CLI tool? perl -pe 'my $i = 1; s/\{\{c::/"{{c" . $i++ . "::"/eg' file.txt 
[17:15:39] <xenu> will output to stdout
[17:16:00] <GuiToris> thanks a lot!
[17:21:23] <GuiToris> xenu: if I use echo/printf then should I pipe it to perl?  echo 'example{{c::}}' | perl -pe 'my..eg'
[17:21:46] <xenu> yep
[17:24:06] <xenu> golfed version: perl -pe 's/(\{\{c)(::)/$1.++$i.$2/eg'
[17:25:04] *** Quits: orange97 (~quassel@130.43.94.168.dsl.dyn.forthnet.gr) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:26:08] <GuiToris> is it a good idea to redirect the output to another file > output.txt  or pearl has an inbuilt feature for that?
[17:26:38] *** Quits: ens (~ens@yoke.ch0wn.org) (Read error: Connection reset by peer)
[17:26:49] <xenu> you can redirect it
[17:27:13] <xenu> if you want to edit a file in-place, you can do this: perl -pi -e 'my $i = 1; s/\{\{c::/"{{c" . $i++ . "::"/eg' file.txt
[17:27:17] <xenu> (note the 'i' flag)
[17:28:04] <xenu> or -pi.bak (or some other extension) if you want it to make a backup file
[17:28:43] <GuiToris> oh, that's decent, I can't thank you enough
[17:32:34] <GuiToris> that's awesome, it worked really well :)
[17:35:01] *** Quits: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net) (Read error: Connection reset by peer)
[17:35:22] *** Joins: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net)
[17:39:55] <shlomif> xenu++
[17:43:02] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 245 seconds)
[17:44:29] *** Quits: GuiToris (~beni@user/guitoris) (Quit: WeeChat 3.2)
[17:44:48] *** Quits: EGD (~egd@user/egd) ()
[17:49:15] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:59:34] *** Joins: monkey_ (~user@190.104.116.134)
[18:00:02] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:21:59] *** Quits: tbcr (~tbcr@75.183.195.9) (Changing host)
[18:21:59] *** Joins: tbcr (~tbcr@user/tbcr)
[18:35:12] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:36:45] * GumbyPAN CPAN Upload: Astro-Coord-ECI-VSOP87D-0.005_02 by WYANT https://metacpan.org/release/WYANT/Astro-Coord-ECI-VSOP87D-0.005_02
[18:40:52] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Read error: Connection reset by peer)
[18:41:15] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[19:06:48] * GumbyPAN CPAN Upload: Net-FullAuto-1.0000625 by REEDFISH https://metacpan.org/release/REEDFISH/Net-FullAuto-1.0000625
[19:06:48] * GumbyPAN CPAN Upload: Astro-Coord-ECI-VSOP87D-0.006 by WYANT https://metacpan.org/release/WYANT/Astro-Coord-ECI-VSOP87D-0.006
[19:14:23] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.31)
[19:15:07] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 245 seconds)
[19:15:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:17:10] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[19:26:43] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 258 seconds)
[19:27:00] *** Joins: ens (~ens@yoke.ch0wn.org)
[19:31:21] *** Joins: slu (uid501941@id-501941.brockwell.irccloud.com)
[19:33:58] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[19:37:27] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.31) (Ping timeout: 258 seconds)
[19:43:27] *** Joins: thrig (~thrig@70.97.65.251)
[19:50:29] *** Joins: gast0n (~g4570n@user/gast0n)
[19:57:19] *** Joins: deadmarshal (~deadmarsh@95.38.116.31)
[20:10:00] *** Quits: woei (~woei@144.248.22.115) (Quit: quit)
[20:10:13] *** Joins: woei (~woei@144.248.22.115)
[20:24:46] *** Quits: woei (~woei@144.248.22.115) (Quit: quit)
[20:26:56] * GumbyPAN CPAN Upload: Regexp-Pattern-License-v3.8.1 by JONASS https://metacpan.org/release/JONASS/Regexp-Pattern-License-v3.8.1
[20:26:56] * GumbyPAN CPAN Upload: PLS-0.896 by MREISNER https://metacpan.org/release/MREISNER/PLS-0.896
[20:30:42] *** Quits: deadmarshal (~deadmarsh@95.38.116.31) (Ping timeout: 240 seconds)
[20:32:07] *** Joins: woei (~quassel@cust-245-64-110-94.dyn.as47377.net)
[20:32:18] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[20:36:18] *** Quits: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net) (Ping timeout: 240 seconds)
[20:37:37] *** Joins: xrel (~xrel@69.233.98.238)
[20:44:34] *** Quits: i7c (~i7c@user/i7c) (Ping timeout: 240 seconds)
[20:45:28] *** Joins: thrig (~thrig@65.113.153.50)
[20:49:27] <simcop2387> Fucking webbrowsers.  There's a tls bug in lynx, there's a preliminary patch and partial fix out there.
[20:49:38] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[20:49:38] *** Quits: skyl4rk (~tlvb@user/tlvb) (Ping timeout: 272 seconds)
[20:51:02] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[20:51:10] *** Joins: skyl4rk (~tlvb@user/tlvb)
[20:59:23] <LeoNerd> So.. today I'm copying the code for XS::Parse::Keyword::Builder into another module, and thinking to myself "Ooh, maybe I need a BuilderBuilder".,.. and then it's just factories all the way down
[21:01:26] <pragma-> I thought `links` replaced `lynx` as superior in every way... like 50 years ago.
[21:01:49] <pragma-> and then `w3m` or soemthing replaced that or soemthing. I'm out of touch with terminal browsers.
[21:02:38] <pragma-> Maybe I exaggerate the 50 years but it was eons ago.
[21:13:35] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[21:14:51] *** Joins: Adura (~Adura@user/adura)
[21:15:29] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[21:18:57] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Client Quit)
[21:19:06] *** Joins: deadmarshal (~deadmarsh@95.38.116.31)
[21:19:24] <fizzie> There was also something about elinks and links2 on the way there.
[21:19:28] <fizzie> (I think one of them could draw images on top of the text on a Linux framebuffer console, which just feels weird.)
[21:21:38] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[21:22:31] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[21:23:09] *** Quits: xrel (~xrel@69.233.98.238) (Quit: nyaa~)
[21:24:27] <ether> wow I actually found a legitimate case for a C-style for loop to iterate over a list, vs foreach my $element (@list)
[21:24:46] <ether> that being that the list can have more elements added to it during iteration
[21:25:33] <ether> and I can't do a while (my $element = shift @list) { .. } because I need to save the list for future uses
[21:26:15] <ether> so,  for (my $idx = 0; $idx <= $#list; ++$idx) { .. } it is
[21:26:49] <LeoNerd> You know that -technically-  foreach ( @array )  can cope with that, yes?
[21:26:58] <ether> technically?
[21:27:02] <thrig> seems simpler than putting it in RabbitMQ
[21:27:14] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-122.prtc.net)
[21:27:26] <LeoNerd> eval: my @n = (1); foreach (@n) { push @n, $_+1; last if @n > 100 }  [ @n ]
[21:27:27] <perlbot> LeoNerd: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
[21:30:10] <LeoNerd> Whether you want to rely on that in future is an open question,.. it is rather fragile
[21:31:09] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[21:31:56] <ether> huh I didn't realize the foreach array could be dynamic
[21:32:18] *** Quits: skyl4rk (~tlvb@user/tlvb) (Ping timeout: 240 seconds)
[21:33:41] <ether> perlsyn> If any part of LIST is an array, "foreach" will get very confused if you add or remove elements within the loop body, for example with "splice".   So don't do that.
[21:34:12] <LeoNerd> part of the list sure. but this is the whole list ;)
[21:34:29] <ether> so I guess we don't get into trouble *now* if we only add to the end of the list.. but there's no guarantee of that holding in the future
[21:34:42] <LeoNerd> foreach(@array) is implemented differently to foreach(LIST)
[21:34:50] <LeoNerd> Yuh, definitely ;)
[21:34:59] <LeoNerd> eval: my @n = (1); foreach (@n, ()) { push @n, $_+1; last if @n > 100 }  [ @n ]
[21:35:00] <perlbot> LeoNerd: [1,2]
[21:35:05] <ether> should there be some doc revisions? or is "don't do that" still the best way to go here
[21:35:10] <thrig> if you go through the minefield *this* way you'll be okay. probably.
[21:35:20] <ether> if we can guarantee that only mutating the end of the list is safe, then we should document that as a legitimate usecase
[21:35:27] <ether> (and add tests for it)
[21:35:53] *** Joins: skyl4rk (~tlvb@user/tlvb)
[21:36:10] <ether> special-casing looping over a single array as legit would be very useful
[21:38:13] <LeoNerd> It's questionable if we want to guarantee it though. Might be a mailing list question
[21:43:17] *** Joins: Adoi (~Adoi@user/adoi)
[21:45:58] *** Joins: i7c (~i7c@user/i7c)
[21:56:06] <Grinnz> "iterating through indexes of which the range might change during iteration" is a perfectly valid use case for c-style for, though i usually expand it to a while loop so it's actually readable
[21:59:09] <ether> I'm not sure if it would be more readable. it would be more verbose as the iterator needs to be declared in advance, and incrementing needs to be handled manually
[21:59:18] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[22:00:13] <Grinnz> conciseness does not equal readability
[22:00:28] <thrig> I usually use a while loop to fiddle with a list manually
[22:00:39] <Grinnz> the C for loop syntax is readable to exactly the set of people who know C
[22:00:45] <Adura> Less characters the better.
[22:01:10] <Grinnz> it's completely inconsistent with any other perl syntax, and contains no indication of when and how its three statements will be applied
[22:02:43] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:02:52] *** Joins: thrig (~thrig@65.113.153.50)
[22:03:01] *** Joins: mason (~mason@redhat/mason)
[22:03:23] <mason> I need more Perl traffic flowing by, so I'll lurk here too.
[22:13:10] <mst> Adura: *fewer
[22:13:26] <Adura> Less is fewer characters.
[22:13:58] <thrig> doubleplusunverbose
[22:14:03] *** Quits: deadmarshal (~deadmarsh@95.38.116.31) (Ping timeout: 276 seconds)
[22:14:14] <mst> doubleplusunlong ?
[22:17:45] <thrig> that's shorter. maybe doubleplusunverbosetypeoflong
[22:28:35] <furrymcgee> { local @_=@ARGV; print while shift; } die unless @ARGV; # can this work without dying?
[22:29:35] <thrig> seems a complicated way to write print for @ARGV ?
[22:30:17] <furrymcgee> any other ideas?
[22:30:31] <thrig> what exactly are you trying to do?
[22:31:11] <furrymcgee> shift the local @_ inside {}
[22:31:15] <mst> furrymcgee: at top level, i.e. not inside a subroutine, 'shift' operates on @ARGV, see p3rl.org/shift - your 'local @_=@ARGV' is doing exactly nothing. also that code makes no sense at all and it would help if you'd explain why you even wanted to do that.
[22:31:39] <furrymcgee> why is this top level inside {}
[22:31:49] <mst> furrymcgee: because you put {} around it
[22:31:54] <mst> furrymcgee: it's still not inside a subroutine
[22:32:05] <mst> furrymcgee: so the code still makes no sense at all :P
[22:32:35] <Grinnz> i highly recommend not trying to do fancy stuff with @_ like localization
[22:33:17] <Grinnz> though as mst said, that's not what's happening anyway
[22:33:36] <furrymcgee> sub { local @_=@ARGV; print while shift; }->(); die unless @ARGV; # like this?
[22:33:40] <mst> I highly recommend reading the documentation for 'shift' before trying to be clever with it
[22:33:49] <Grinnz> no
[22:34:00] <mst> furrymcgee: until you explain why you want to do this, I can't help any further.
[22:34:09] <Grinnz> print for @ARGV;
[22:34:43] <mst> Grinnz: but then it won't mysteriously stop if @ARGV contains 0, that could be a bug
[22:34:58] <Grinnz> lol
[22:35:55] <mst> at this point my only real opinion on this whole thing is http://trout.me.uk/noxface.jpg
[22:37:37] <mst> furrymcgee: hello?
[22:38:00] <furrymcgee> any other ideas?
[22:38:07] <Grinnz> for what?
[22:38:12] <mst> furrymcgee: not until you stop ignoring our questions
[22:38:23] <mst> you need to explain what you're trying to write
[22:39:08] *** Joins: deadmarshal (~deadmarsh@95.38.116.31)
[22:39:17] <mst> thrig asked and you didn't explain, and this is now the third time I've said it, and until you actually explain our only idea is going to be 'first, stop ignoring the people trying to help you'
[22:39:33] <furrymcgee> is context of shift different from local?
[22:39:38] <Grinnz> yes
[22:39:44] <Grinnz> completely unrelated 
[22:39:58] <mst> furrymcgee: I already linked you to the documentation for shift. it might help to read it.
[22:40:04] <Grinnz> also, using both shift and local are completely useless for what you've shown
[22:40:12] <mst> furrymcgee: also, PLEASE EXPLAIN WHAT YOU ARE TRYING TO ACTUALLY DO
[22:40:13] <furrymcgee> can you change it?
[22:40:18] <Grinnz> change what
[22:40:37] <mst> fucking hell.
[22:41:07] <mst> furrymcgee: what's the point of this? why are you trying to write this? what was the original thought/intention that led you to this unfixable broken code?
[22:41:31] <mst> please stop making it impossible for us to help you, it's really quite rude
[22:41:58] <Adura> furrymcgee, just bang on it until it works.
[22:42:05] <furrymcgee> to me it seems simple and intuitive
[22:42:16] <huf> yes, but you dont know what you're doing
[22:42:18] <huf> that's why you're here
[22:42:31] <Adura> Use English instead of Perl to describe your intent.
[22:42:32] <mst> furrymcgee-- # you're still not explaining anything
[22:42:42] <huf> well it's funnier this way
[22:42:51] <huf> completely pointless, but funnier
[22:43:12] <shlomif> huf: shavua tov
[22:43:18] <huf> shlomif: and how
[22:43:46] <shlomif> huf: pardon?
[22:43:53] <huf> exactly.
[22:44:13] <huf> you might not have noticed but i dont actually speak hebrew...
[22:44:22] <huf> i know like 9 words
[22:44:24] <huf> possibly 5
[22:44:35] <mst> it basically means "have a good week"
[22:44:36] <Adura> Schmeckle
[22:44:39] <huf> in context, i can maybe read 3
[22:44:51] <huf> mst: yeah, tov is one of the 9ish :D
[22:45:15] <shlomif> hmmm... 🤔
[22:46:11] <huf> oh wait no, it has to be more than that, because .hu has some hebrew loanwords :)
[22:46:23] <huf> (mázli and haver come to mind)
[22:46:42] <thrig> my havercraft is full of eels?
[22:47:07] <huf> haver havers have someone to go places with
[22:49:01] <shlomif> huf: everybody knows hebrew: https://www.youtube.com/watch?v=QmklkUpN1YA&t=149s ;)
[22:49:01] <Paperbot> YouTube video linked by shlomif: Spaceballs: Mr. Coffee/Mr. Radar - published by Bitz-O-Funny
[22:51:04] <huf> is it just me? where was the hebrew reference here?
[22:51:44] <Adura> I cleared my throat.
[22:51:55] <huf> oh was this a he brew coffee joke?
[22:52:07] <thrig> he-brew for he-man
[22:52:50] <huf> he bru and irn bru
[23:04:16] *** ens is now known as hunter2
[23:04:26] *** hunter2 is now known as ens
[23:06:21] <djerius> Looking to dump versions of loaded modules to track down CPAN testers regressions (I realize there are limitations to this). Any favorite methods? I'm looking at https://metacpan.org/pod/Module::PrintUsed
[23:06:22] <Paperbot> Link title(s): [ Module::PrintUsed - Prints modules used by your script when your script ends - metacpan.org ]
[23:06:25] *** Joins: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net)
[23:06:33] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:07:54] *** Quits: deadmarshal (~deadmarsh@95.38.116.31) (Ping timeout: 258 seconds)
[23:08:57] <shlomif> djerius: https://metacpan.org/pod/Devel::TraceUse is decent
[23:08:57] <Paperbot> Link title(s): [ Devel::TraceUse - show the modules your program loads, recursively - metacpan.org ]
[23:12:08] <djerius> shlomif: Thanks.  contains a nice description of other approaches as well.
[23:12:40] <shlomif> djerius: you're welcome 
[23:12:43] <mst> djerius: uh, CPAN testers reports contain the versions of your dependencies
[23:15:06] *** Joins: thrig (~thrig@65.113.153.50)
[23:15:17] <djerius> mst: understood.  however, when i match those dependencies in my dev environment, I'm not getting a failure, so I'm wondering if there's a lower level dependency that isn't being matched.  For example, I'm depending on JSON::MaybeXS, so the testers output gives me that dependency, but not the actual underlying JSON module that's being used.
[23:15:20] <Grinnz> https://metacpan.org/pod/Dist::Zilla::Plugin::Test::ReportPrereqs if you're using dzil
[23:15:21] <Paperbot> Link title(s): [ Dist::Zilla::Plugin::Test::ReportPrereqs - Report on prerequisite versions during automated testi... ]
[23:15:30] <Grinnz> i'm not aware of a good analogue without dzil
[23:16:13] <Grinnz> and yeah even that won't report the whole dep tree, so i have to tell it to report extra modules sometimes
[23:16:47] <djerius> Grinnz: that's what I'm running into. 
[23:17:32] <Grinnz> unfortunately, nothing in the process is going to be aware of what the whole dep tree was
[23:17:45] <ether> you can just copy the test that that dzil plugin generates, and customize the table of data it uses.
[23:17:58] <Grinnz> some modules may have alraedy been installed (and thus the installer won't know/care about its prereqs), only the cpan installer even knows what dep tree it's installing at the time
[23:18:03] <ether> but using dzil means it's all taken care of for you as you change your prereqs :)
[23:18:13] <Grinnz> using a module doesn't necessary mean using all of its prereqs
[23:18:29] <ether> if there's certain things upstream that you're concerned about, you can add it to the report that that plugin generates
[23:18:43] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-122.prtc.net) (Ping timeout: 246 seconds)
[23:18:46] <Grinnz> the best you can do is follow the static deptree of the modules in question but that will miss dynamic deps that got installed
[23:18:59] <Grinnz> there is no package manager that can be consulted for this info
[23:19:01] <ether> e.g. you can add Cpanel::JSON::XS and JSON::XS and JSON::PP ot the list of things it reports on, if you're using JSON::MaybeXS, to see if the backend version is important
[23:19:16] <ether> #no_easy_solution
[23:19:27] <Grinnz> so tldr; there's a lot of hacky things you can do but ultimately you're going to have to figure out which hack gets you the info you need
[23:19:40] <ether> djerius: if you have specific failures you can link to, someone else may have seen something similar and can provide a fast answer for you
[23:20:15] <ether> there's a fair bit of tribal knowledge around certain modules + version combinations that are known to have issues
[23:20:27] <mst> furrymcgee: hey, are you ever going to explain the problem?
[23:20:29] <djerius> ether: I like the idea of modifying the prereqs test.  I know there's a limited number of JSON backends that JSON::MaybeXS uses, so that's easy.
[23:21:11] <Grinnz> yes, i just did this https://metacpan.org/release/DBOOK/Mojo-JSON-MaybeXS-1.002/source/dist.ini#L11-13
[23:21:11] <Paperbot> Link title(s): [ dist.ini - metacpan.org ]
[23:22:01] <furrymcgee> why is context of switch an local different?
[23:22:18] <Grinnz> shift
[23:22:23] <Grinnz> and because they are different functions
[23:22:38] <huf> i dont understand that question
[23:22:43] <Grinnz> local operates on the dynamic scope, which can be introduced by any block
[23:22:45] <mst> furrymcgee: there's no 'context' involved in either
[23:22:51] <huf> local isnt even a function
[23:22:55] <mst> furrymcgee: 'local' is dynamic (call stack based) scoping
[23:23:02] <Grinnz> shift has two defaults, and which default it uses depends whether it's in a subroutine or not
[23:23:05] <Grinnz> that's it
[23:23:12] <mst> furrymcgee: shift() is a core function that operates on an array, with defaults as documented in the perldoc you didn't read yet
[23:23:21] <mst> furrymcgee: completely different things are completely different
[23:23:28] <mst> furrymcgee: and you still didn't explain why you care.
[23:23:40] <djerius> Grinnz: nice! didn't realize that was possible.
[23:23:53] <mst> furrymcgee: why do you keep repeating the same nonsense question and refusing to answer mine? :(
[23:23:59] <Grinnz> djerius: i did mention "telling it to report extra modules" :P
[23:24:00] <ether> > 11:48 < ether> if there's certain things upstream that you're concerned about, you can add it to the report that that plugin generates
[23:24:52] <furrymcgee> i did read it, but expected {} is same as sub {}->()
[23:24:56] <mst> furrymcgee: shift's default has absolutely zero relationship to dynamic scope. your question is nonsense. please answer mine.
[23:24:59] <Grinnz> well, that's not the case
[23:25:07] <mst> furrymcgee: a block and a subroutine are completely different things.
[23:25:08] <Grinnz> blocks are blocks, subs are subs
[23:25:18] *** Quits: sdftyguijokpl (~sdftyguij@eth-west-pareq2-46-193-2-167.wb.wifirst.net) (Ping timeout: 252 seconds)
[23:25:19] <Grinnz> blocks aren't first-class values in perl
[23:25:31] <mst> furrymcgee: the body of the subroutine *is* a block, but a block is not a subroutine.
[23:26:15] <mst> furrymcgee: also, you still didn't answer the question: what were you trying to write in the first place?
[23:26:22] <mst> furrymcgee: you are simply being a dickhead now.
[23:27:15] <furrymcgee> just trying too see a reason why shift+local also block+sub are completely different 
[23:27:32] <mst> why though?
[23:27:38] <huf> that seems a bit confused, because shift and local are 100% unrelated
[23:27:57] <huf> blocks/subs are at least similar in many ways
[23:27:59] <mst> right, you are effectively asking "why are tomatoes and motorcycles different?"
[23:28:06] <djerius> Grinnz: ether:  understood.  I was translating "telling" and "add to report" as "hacking code", not adding configuration.
[23:28:16] <mst> furrymcgee: again: why did you even try this in the first place?
[23:28:30] <mst> furrymcgee: repeating the thing you didn't understand is not an answer to my question
[23:29:08] <mst> you wrote: { local @_ = @ARGV; print while shift @ARGV }
[23:29:15] <ether> djerius: ok fair enough :)
[23:29:15] <mst> and I want to know why you tried that in the first place.
[23:29:36] <ether> translation: what are you trying to accomplish here?
[23:29:42] <furrymcgee> there was a question about loops with push shift
[23:29:55] <ether> purl A/B problem
[23:30:01] <ether> oops
[23:30:07] <huf> different other bot
[23:30:22] <mst> furrymcgee: right, but that code explicitly used 'push @array' and 'shift @array'
[23:30:35] <mst> furrymcgee: you decided to write 'shift @ARGV' and then wondered why it didn't shift from @_
[23:31:05] <mst> that's the part we're confused about
[23:31:12] <mst> also 'local' had nothing to do with that loop example either
[23:31:17] * mst completely lost
[23:31:35] <mst> also ... why didn't you just tell me that the first five times I asked you :(
[23:32:56] <Grinnz> alright so i'm gathering that this was a thought exercise of confusion, not attempting to actually accomplish anything, unless a real question gets asked
[23:32:59] <El_Che> hi mst, good to see you're your regular self :)
[23:33:53] <mst> El_Che: I dunno, I asked nicely six times without even banning them, I'm not sure when the last time is that happened
[23:34:50] <El_Che> haha, good point
[23:36:15] <huf> blame covid
[23:36:22] <huf> stupid nato vaccines chipped mst and now he's nicer
[23:36:59] <El_Che> huf: some poeple thought of castration, but if this works than ok :)
[23:37:04] <huf> soon we'll have to send him on an insensitivity training course
[23:37:33] <shlomif> huf: heh
[23:48:04] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:49:23] <Harzilein> hehe
[23:51:42] *** Quits: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Remote host closed the connection)
[23:52:08] *** Joins: R0b0t1``` (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:53:19] *** Joins: Trigon (~reuben@73.127.1.41)
[23:59:00] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 272 seconds)
