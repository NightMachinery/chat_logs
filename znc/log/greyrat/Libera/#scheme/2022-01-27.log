[00:01:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:01:57] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[00:10:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:11:10] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:17:26] *** Joins: klovett_ (~klovett@107.127.17.177)
[00:19:33] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:b4b8:4909:a51f:a4a5) (Quit: Client closed)
[00:20:33] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 256 seconds)
[00:23:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:30:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:702c:f538:99a2:cdd0)
[00:30:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:702c:f538:99a2:cdd0) (Changing host)
[00:30:20] *** Joins: skapata (~Skapata@user/skapata)
[00:30:32] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 240 seconds)
[00:40:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:40:34] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[01:14:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:16:20] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:20:16] *** Joins: mogrim (~mogrim@gateway/tor-sasl/mogrim)
[01:30:15] *** Quits: mogrim (~mogrim@gateway/tor-sasl/mogrim) (Quit: leaving)
[01:32:44] *** Joins: mogrim (~mogrim@gateway/tor-sasl/mogrim)
[01:58:42] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:70bc:f294:948f:2599) (Ping timeout: 250 seconds)
[02:02:35] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[02:02:54] *** Quits: mogrim (~mogrim@gateway/tor-sasl/mogrim) (Ping timeout: 276 seconds)
[02:07:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:38:37] *** Quits: rx80 (~quassel@user/rx80) (Ping timeout: 256 seconds)
[02:39:23] *** Joins: rx80 (~quassel@user/rx80)
[02:39:30] *** Quits: DKordic (~DKordic@178-223-29-22.dynamic.isp.telekom.rs) (Ping timeout: 260 seconds)
[02:50:31] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:14:56] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[03:21:02] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:23:32] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Client limit exceeded: 20000)
[03:26:02] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[03:30:46] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[03:32:56] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Client limit exceeded: 20000)
[03:40:38] <Zipheir> drakonis: You might send an email about that typo to Arthur Gleckler.  If he can't fix it, then he probably knows who can.
[03:40:39] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[03:40:39] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[03:41:01] <drakonis> alright
[03:41:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:42:28] *** Joins: TCZ (~tcz@91.150.178.124)
[03:42:45] <Zipheir> Wow, www.schemers.org's site contact page is from 2003.  No idea who's maintaining it these days; I seriously doubt it's Shriram.
[03:43:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:55:42] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[03:57:54] *** Joins: jao (~jao@68.235.43.173)
[03:58:03] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:02:19] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[04:07:29] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:18:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:27:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:28:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:37:54] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[04:41:17] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[04:55:13] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:18] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:03:30] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:11:03] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:15:22] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:32:44] *** Joins: notzmv (~zmv@user/notzmv)
[05:43:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:55:09] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[06:03:52] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:20:22] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:31:36] *** Joins: livoreno (~livoreno@user/notzmv)
[06:43:41] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:43:41] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:43:53] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:46:43] *** Quits: evdubs (~evdubs@user/evdubs) (Remote host closed the connection)
[06:48:56] *** Joins: evdubs (~evdubs@user/evdubs)
[06:49:10] *** Quits: evdubs (~evdubs@user/evdubs) (Read error: Connection reset by peer)
[06:49:42] *** Joins: evdubs (~evdubs@user/evdubs)
[06:57:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:58:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:12:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:25:03] *** Joins: frost (~frost@user/frost)
[08:00:41] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[08:30:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:31:29] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:32:59] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:35:52] *** Joins: frost (~frost@user/frost)
[08:45:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[08:50:55] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[09:00:14] *** Quits: jao (~jao@68.235.43.173) (Remote host closed the connection)
[09:01:07] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:15:10] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:15:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:16:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:17:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:25:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:55:22] *** Quits: klovett_ (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[09:58:37] *** Joins: klovett (~klovett@107.127.17.177)
[10:16:01] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Client limit exceeded: 20000)
[10:26:30] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[10:27:09] *** Joins: jao (~jao@68.235.43.173)
[10:32:00] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 256 seconds)
[10:36:09] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[10:43:15] *** Joins: xsperry (~xs@user/xsperry)
[10:50:09] *** Quits: xsperry (~xs@user/xsperry) ()
[10:54:08] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:10:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:12:14] *** Joins: thevishy (~Nishant@2405:201:f005:c007:4ce:a391:7558:6be8)
[11:45:59] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[11:47:09] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[12:12:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:38:08] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5fb:e651:57c7:854e)
[12:40:32] *** Joins: civodul (~user@guix/contributor/civodul)
[13:09:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:11:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:39:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:59:37] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 240 seconds)
[14:01:37] *** Joins: ouestbillie (~gallup@185.195.233.171)
[14:03:00] *** Joins: seninha (~seninha@user/seninha)
[14:07:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: tokie (~tokie@thales.strtok.net) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:09:45] *** Joins: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net)
[14:09:52] *** Joins: tokie (~tokie@thales.strtok.net)
[14:25:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:51:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:51:43] *** Joins: mzan (~quassel@mail.asterisell.com)
[15:11:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:14:06] *** Joins: xsperry (~xs@user/xsperry)
[15:46:17] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[15:57:30] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[16:06:29] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:13:54] *** Quits: eMBee (~eMBee@realss.com) (Read error: Connection reset by peer)
[16:18:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:24:59] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[16:41:52] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[16:47:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[16:47:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:55:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:56:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:58:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:15:25] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:22:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:36:50] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[17:37:25] <nij-> How does scheme handle namespace? (in Common Lisp we have the (handy) notion of packages)
[17:37:26] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[17:39:08] <dpk> R6RS and R7RS have (sadly incompatible) library systems
[17:39:31] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[17:39:35] <dpk> each library has a namespace more-or-less completely isolated from other libraries
[17:39:38] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[17:40:13] <dpk> (the more-or-less is that macro expansion can effectively give access to identifiers from other libraries than those explicitly imported, but you don't necessarily notice that)
[17:46:12] <ecraven> dpk: aren't they almost-compatible?
[17:46:20] <ecraven> (depending on what you deem most important, of course)
[17:46:52] <ecraven> for most of my R7RS-libraries, it would probably be enough to replace `define-library' by `library' and they might work fine on R6RS implementations
[17:46:53] <dpk> compatible in the sense that a Scheme can somewhat trivially be made to understand both, and they use mostly the same structure of declarations
[17:47:12] <dpk> but it's utterly impossible to write one library declaration that works unchanged on both
[17:47:43] <ecraven> even if you ignore the `define-library' vs. `library' difference?
[17:47:57] <ecraven> hm.. ok, and the (import (scheme base) ...) part
[17:48:17] <ecraven> but I mean the actual *library* code (including exports) can be the same, right?
[17:48:19] <nij-> Hmm so which library system should I look into to see how namespaces could be used?
[17:51:20] <ecraven> and you could just define the r7rs base libraries in r6rs too, I think?
[17:55:25] <Franciman> why was it chosen to have the (scheme base) library?
[17:55:35] <Franciman> with also the builtin syntax forms in it?
[17:57:06] <ecraven> you could create a library that is *not* Scheme, by just not importing (scheme base) but instead (CL base) or whatever ;)
[17:57:40] <sham1> (racket base Lang)
[17:58:21] <Franciman> awesome
[17:58:34] <dpk> right, the main irritation is the use of define-library instead of just library. i think that was a very, very bad decision on the part of WG1, and they should have been happy to simply say the R7RS library declaration is a (very slightly extended) subset of the R6RS library declaration (no versioning or phasing, at least in small)
[17:59:18] <Franciman> dpk: will r7rs-large have syntax-case?
[17:59:26] <dpk> it's looking that way
[18:00:09] <Franciman> auch
[18:00:13] <Franciman> it seems hard to implement
[18:00:43] <dpk> have you seen Dybvig's book chapter on it?
[18:01:13] <dpk> http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.pdf
[18:01:17] <Franciman> thanks *.*
[18:01:35] <ecraven> dpk: there are some things in r6rs (and unfortunately also in r7rs) that are awkward, like (prefix (... very long list ...) foo:).. imho switching the arguments would have been nicer ;) but I agree, it makes it even harder to unify them :-/
[18:01:42] <Franciman> i can't wait
[18:02:39] <dpk> i find syntax-case actually conceptually simpler than explicit renaming, which has weirdnesses around (the equivalent of) bound-identifier=?
[18:03:33] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#scheme)
[18:16:40] *** Joins: klf (~klf@66.220.205.98)
[18:18:11] <klf> Hello.  I just learned about continuation-passing style by reading https://en.wikipedia.org/wiki/Continuation-passing_style#Examples
[18:19:19] <klf> Please take a look at the first example, specfically the definition for 'pyth&'
[18:19:57] <ns12> klf: Hello klf! What is your question?
[18:21:23] <klf> I'd like to learn how scoping works in Scheme.   as you know, the chain of continuation functions get called when you invoke 'python&'.
[18:22:21] <klf> Hi, ns12!  The specific question I have is:  why is 'x2' in scope when '(+& x2 y2 (lambda (x2py2)' gets invoked
[18:22:23] <klf> ?
[18:24:00] <klf> 'x2' is a parameter of an "earlier" lambda (line2: '(*& x x (lambda (x2) ...')
[18:26:14] <sjamaan> klf: Note that the lambdas are nested inside eachother.  So the inner lambdas can "see" bindings of the outer ones
[18:26:49] <sjamaan> Inner lambdas close over the free variables of the outer ones, creating a closure
[18:27:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:27:21] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[18:28:18] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[18:29:13] <klf> hi sjamaan.  Yep, that's what it looks like to me.  :-)  I forgot... but do you remember if you can define a function within a function in C?
[18:29:30] <sjamaan> Not in standard C, I think
[18:29:43] <sjamaan> And they don't create closures (but IIRC there's a gcc extension to do that)
[18:29:48] <klf> ok.  Gotcha! :-)
[18:31:34] <klf> My project group decided to implement a Racket-> C transpiler this term which will support a **very** small subset of Scheme.
[18:31:45] <sjamaan> Neat!
[18:31:51] <klf> This project spans the whole term.
[18:32:32] <klf> and I am just looking at some interesting stuff that we can support/work on.  I thought CPS would be interesting.
[18:32:35] <sjamaan> You could check out the CHICKEN and Gambit Scheme implementations and see how they implement compilation to C
[18:32:46] <klf> http://www.call-cc.org
[18:32:51] <ns12> klf: You could try reading "The Little Schemer", which implements a minimal evaluator for Scheme in chapter 10. There, you can clearly see how "lambda" works. For more depth, SICP shows an implementation of an evaluator in chapter 4.
[18:32:52] <klf> Yep :-)
[18:32:54] <sjamaan> And definitely read the book "Compiling with Continuations" if you can
[18:33:25] <sjamaan> It's mentioned on that Wikipedia page you mentioned
[18:33:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[18:34:02] <ns12> If you are interested in learning about CPS functions written in the style of that Wikipedia page, try reading "The Seasoned Schemer" (after "The Little Schemer").
[18:35:23] <klf> Scheme uses lazy evaluation, right?
[18:35:37] <sjamaan> No, it doesn't
[18:36:30] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:36:55] <ns12> sjamaan: For the purpose of learning Scheme to C compilation, how does CHICKEN and Gambit compare to the DEC Scheme -> C compiler? https://github.com/barak/scheme2c
[18:37:01] <klf> okay. I'll check out respective chapters in Little Schemer and SICP.
[18:38:42] <sjamaan> ns12: I've never studied that one, TBH
[18:38:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:39:14] <ns12> It's old. One of the first Scheme -> C compilers, if not mistaken.
[18:40:01] <ecraven> klf: it can, if you want it to ;) (delay (/ 1 0)) will only throw an error if you `force' it
[18:40:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:44:01] <ns12> ecraven: Is "delay" and "force" an optional part of R7RS-small?
[18:44:51] <ecraven> yes, (import (scheme lazy))
[18:45:02] <ecraven> not sure how *optional* it is
[18:45:08] <ecraven> it should be there in any R7RS Scheme
[18:45:26] <wasamasa> ns12: did you just volunteer to spend extraordinary amounts of time studying all three compilers and writing a blog post about how they compare?
[18:45:38] <ecraven> that would be very interesting to read!
[18:46:08] * ns12 goes into hiding.
[18:46:22] <ecraven> ... in order to write that blog post?
[18:46:27] <wasamasa> lol
[18:46:52] <Franciman> every library except (scheme base) is optional
[18:46:54] <Franciman> yes
[18:47:19] <wasamasa> seemingly everyone is jealous about the sheer man power in the JS ecosystem, but when it comes to making a contribution to their favorite lisp, they go into hiding
[18:47:37] <sjamaan> wasamasa: Touche
[18:49:00] <s-liao> what is the sheer man power ?
[18:50:38] <klf> Yea, I am anxious to learn how one could implement such closure in C, since you can't define a function within another function.
[18:50:51] <ns12> I am currently studying C in more detail, and my compiler knowledge is poor. After I finish studying these topics, I should be able to study Scheme -> C compilation.
[18:51:14] *** Quits: rx80 (~quassel@user/rx80) ()
[18:51:38] <sjamaan> klf: Usually it's something like (conceptually) a struct holding a function pointer and some form of "display" holding the variables and corresponding values
[18:52:22] <sjamaan> Then when you apply the closure at the Scheme level, in C the function is called with the display as an argument (and any remaining arguments to the closure function itself)
[18:53:30] *** Joins: rx80 (~quassel@user/rx80)
[18:53:37] * sjamaan &
[18:53:45] <sjamaan> (Good luck with your project!)
[18:53:46] <ns12> klf: "Scheme 9 from Empty Space" (book and Scheme interpreter) by Nils M Holm walks the reader through the construction of a Scheme interpreter in C.
[18:53:46] <ns12> "Lisp in Small Pieces" by Christian Queinnec contains implementations of Scheme -> C compilers.
[18:55:08] <klf> ns12:  thank you.
[18:56:08] <s-liao> C structure encapsulate the code?
[18:56:38] <s-liao> C struct.
[18:58:00] *** Joins: frost (~frost@user/frost)
[18:59:02] <klf> sjamaan, at the Scheme level we have nested lambdas, and so I can see what you described is a plausible implementation.  The "display" would be the environment for the function. in other words, the function ptr + "display gives us closure
[19:02:04] <s-liao> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
[19:02:59] <s-liao> That is the definition of closure in JS language.
[19:23:13] <s-liao> does js closure like inner function expression look up lexical environment of its parents to evaluate?
[19:27:02] *** Quits: ouestbillie (~gallup@185.195.233.171) (Ping timeout: 240 seconds)
[19:29:16] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[19:30:22] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:35:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:40:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:41:42] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[19:48:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:54:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[19:56:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:57:16] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[19:58:28] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:07:36] *** Joins: mogrim (~mogrim@gateway/tor-sasl/mogrim)
[20:08:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:09:41] <qhong> Is there a nice way to implement delimit continuation? Nice as in cactus stack to implement call/cc
[20:10:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:14:30] *** Quits: mogrim (~mogrim@gateway/tor-sasl/mogrim) (Quit: leaving)
[20:14:47] <Zipheir> qhong: I was wondering the same thing a little bit earlier.
[20:15:09] <Zipheir> A number of Scheme implementations don't have them (prompts, shift/reset) yet.
[20:15:44] <Zipheir> Oleg has some thoughts on trying to do that https://okmij.org/ftp/continuations/against-callcc.html#traps
[20:16:07] <qhong> Zipheir: I know about those
[20:16:40] <qhong> other arguments aside, I find the one about implementation really funny. Who tf use stack lol
[20:16:53] <Zipheir> "Therefore, in practice if some form of delimited control is needed, it has to be provided as a primitive. We cannot in practice rely on call/cc plus mutation."
[20:17:19] <Zipheir> stack?
[20:17:47] <qhong> Zipheir: not really, one can use low-level call/cc to implement user level call/cc+dynamic-wind+delim/cc etc
[20:18:28] <qhong> Zipheir: I remember Oleg argue that delim/cc impl is simpler than call/cc because instead of copy whole stack you just copy part of it 
[20:18:55] <qhong> But stack itself is continuation done wrong. Under heap allocated activation record, call/cc is simpler a register mov 
[20:19:10] <Zipheir> qhong: Interesting.
[20:19:54] <qhong> I’ve read about some abstract machine that implements delim/cc but they all looks much more complicated and ugly than one implementing full continuation…
[20:21:34] <Zipheir> I don't think they have to be uglier.  But I haven't tried implementing them for real, so...
[20:22:35] <Zipheir> I'd really like to see a call/cc + dynamic-wind implementation of delimited continuations, if one exists.
[20:23:16] <qhong> Zipheir: CPS abstract machine is super simple and probably one of the simplest usable abstract machine, three registers <expression,environment,continuation>, and call/cc is simply push continuation onto environment
[20:23:51] <qhong> Zipheir: as for delim/cc, there need to be meta context (trail of contexts) and different varieties of context concatenation operation...
[20:24:19] <Zipheir> qhong: Yeah, from that perspective they certainly sound trickier.
[20:24:35] <gwatt> Zipheir: I think one of the points Oleg made is that while you can implement delim/cc with call/cc+dynamic-wind, you have to be careful when mixing continuation styles
[20:25:16] <Zipheir> gwatt: Hence the "get rid of call/cc!" thing, I guess.
[20:26:10] <qhong> gwatt: I think the best solution I see so far is, a simple core that provides full call/cc, and a "kernel" library that implements various user facing control operators (including user call/cc) using the full call/cc.
[20:26:35] <qhong> And the user facing control operators can be design to interact in a good way
[20:31:18] <Zipheir> If that's the easiest way, then it's good news for existing Schemes with only call/cc.
[20:32:01] <Zipheir> Then there's the huge number of control operations specified in https://srfi.schemers.org/srfi-226/srfi-226.html
[20:33:09] <qhong> Zipheir: The only obstacle is to change all code to use the newly exported user-facing control operators, and make sure core call/cc is only used in "kernel space"
[20:33:12] <gwatt> I know tspl has an example of building call/cc + dynamic wind from a basic call/cc, but the catch is you can't use the basic call/cc anymore. I imagine building other control structures require similar restrictions
[20:33:19] <qhong> This might be tricky for code in the large
[20:34:02] <qhong> gwatt: yes, and I think this "restriction" is in fact good principle, basically need to separate kernel and user space. But enforcing it may get tricky in practice
[20:34:50] <gwatt> Oh for sure
[20:35:56] *** Joins: mogrim (~mogrim@gateway/tor-sasl/mogrim)
[20:39:18] *** Joins: jao (~jao@static-68-235-44-73.cust.tzulo.com)
[20:40:10] <Zipheir> qhong: Are you working on implementing this for some Scheme?
[20:43:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:45:40] *** Joins: seninha (~seninha@user/seninha)
[20:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:51:57] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[20:54:49] <qhong> Zipheir: I've long been scheming/conspiring, but I haven't started because I don't think I've figured out all design problems
[20:55:12] <qhong> Zipheir: And I will most likely implement something closer to Kernel (F-expr based) rather than Scheme
[20:57:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[20:58:47] *** Quits: thevishy (~Nishant@2405:201:f005:c007:4ce:a391:7558:6be8) (Quit: Leaving)
[20:59:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:04:59] <Zipheir> qhong: Cool.  I'd be interested to see what you come up with.
[21:11:55] *** Quits: mogrim (~mogrim@gateway/tor-sasl/mogrim) (Remote host closed the connection)
[21:45:13] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4014:1b4f:f962:d9d9)
[21:45:13] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4014:1b4f:f962:d9d9) (Changing host)
[21:45:13] *** Joins: skapata (~Skapata@user/skapata)
[21:47:32] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[21:48:11] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:12:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:22:51] *** Joins: neceve (~quassel@2.26.93.228)
[22:26:20] <edgar-rft> what design problems do your conspiracy theories have?
[22:35:57] *** Joins: yewscion (~yewscion@c-24-131-194-135.hsd1.pa.comcast.net)
[22:38:41] <gwatt> edgar-rft: it's just really hard to combine the notion of a hollow earth inhabited by lizard people who control everything and also have a flat earth.
[22:40:48] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:cd48:6f73:4bfa:ecd8)
[22:40:48] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:cd48:6f73:4bfa:ecd8) (Changing host)
[22:40:48] *** Joins: skapate (~Skapata@user/skapata)
[22:44:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[22:46:50] <sham1> It's a disc, but the disc is hollow
[22:48:15] <gwatt> If the disc is hollow how does it sit on the back of the turtle?
[22:55:40] <weinholt> magnets
[23:01:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:08:17] *** Joins: johnjaye (~pi@173.209.65.233)
[23:17:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:19:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:20:37] *** Joins: shawnw (~shawn_w@152.44.212.188)
[23:51:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[23:52:20] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
