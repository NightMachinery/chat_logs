[00:02:56] *** Joins: stoned75 (~seb@78.203.129.116)
[00:06:47] <codesections> gfldex: From a quick look at Roast, I'm sticking with the idea that constraining the signature of a returned Callable is NYI – for one thing, constraining the signature of a Callable parameter is tested in "closure-parameters.t", and there's no similar .t for return values
[00:15:42] <gfldex> codesections: this is a case of „Cannot do non-typename cases of type_constraint yet“ indeed
[00:16:04] *** Joins: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f)
[00:17:36] *** Quits: marekh (~marekh@83.216.136.233) (Quit: Connection closed)
[00:17:41] *** GoneDomattps is now known as domattps
[00:17:55] *** Quits: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f) (Client Quit)
[00:18:01] *** Joins: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f)
[00:29:38] *** Joins: lgtaube (~lgt@45.86.203.1)
[00:48:41] <gfldex> codesections: you might be asking for a rabbit hole. One might return a callable that returns a callable. What do you do if it's callables all the way down? :->
[00:53:14] <jdv> insert a turtle
[00:53:19] *** Quits: rypervenche (~rypervenc@user/rypervenche) (Quit: brb)
[00:53:34] * jdv yawns
[00:58:09] <codesections> m: my $world = "\c[TURTLE]" xx ∞; say $world[42]
[00:58:10] <camelia> rakudo-moar 168da39ae: OUTPUT: «🐢␤»
[01:00:19] <codesections> gfldex: more seriously, that doesn't seem like any more of a problem than other places where recursion could be infinite.  Many of Raku's functional idioms seem to have been inspired by Haskell, and Haskell certainly supports (indeed, requires) specifying the type of a returned function 
[01:01:19] <codesections> e.g. (in Haskell): curry :: ((a,b)->c) -> a->b->c
[01:03:10] <codesections> in (psudo) Raku: sub curry(&fn:(\a, \b --> Code) --> &(--> &(--> Code))) {...}
[01:04:35] <gfldex> In Heskell the return type is part of dispatch, so you acutally need to nail returned functions down. Without proper macros creating functions and therefor signatures on the fly requires EVIL. So with the new macro system we might need checks in the returned subs signature.
[01:07:56] <codesections> interesting.  I don't really know Haskell, so I'm not 100% sure I followed.  Are you saying that the Haskell version of the following (impossible-in-Raku) code would work?
[01:08:38] <codesections> m: multi f(--> Int) { 1 }; multi f(--> Str) { "one" }; my Str $a = f();
[01:08:38] <camelia> rakudo-moar 168da39ae: OUTPUT: «Ambiguous call to 'f(...)'; these signatures all match:␤  ()␤  ()␤  in block <unit> at <tmp> line 1␤␤»
[01:08:59] <gfldex> you got it
[01:09:56] <codesections> So we could potentially get ^^^ that to work one day, post RakuAST?
[01:10:20] <gfldex> No, Raku is to dynamic for that.
[01:10:53] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[01:11:01] <gfldex> Also, there is Nil (and Failure).
[01:16:15] <gfldex> Well, we might get custom dispatchers. So with a slang it might be possible.
[01:20:05] <moritz> you have to be careful with that; dispatch happens based on the actual types at runtime, not just the declared types
[01:20:34] <moritz> you cannot do that with return dispatch, because you don't know the actual type in advance
[01:21:25] <moritz> I don't know how confusing it will be if the two dispatch criteria are subtly different though; maybe it's not as much of a problem as I imagine it to be
[01:23:13] <codesections> even in current Raku, though, you can do something like: 
[01:23:24] <codesections> m: multi f(--> Int) { 1 }; multi f(--> Str) { "one" }; my Str $a = &f.candidates.first({.of ~~ Str})()
[01:23:25] <camelia> rakudo-moar 168da39ae: ( no output )
[01:23:31] <codesections> m: multi f(--> Int) { 1 }; multi f(--> Str) { "one" }; my Str $a = &f.candidates.first({.of ~~ Str})(); dd $a
[01:23:31] <camelia> rakudo-moar 168da39ae: OUTPUT: «Str $a = "one"␤»
[01:24:29] <gfldex> And there is your custom dispatch.
[01:24:53] <gfldex> m: multi f(--> Int) { 1 }; multi f(--> Str) { fail("one") }; my Str $a = &f.candidates.first({.of ~~ Str})(); dd $a
[01:24:54] <camelia> rakudo-moar 168da39ae: OUTPUT: «Earlier failure:␤ one␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Type check failed in assignment to $a; expected Str but got Failure (Failure.new(exceptio...)␤  in block <unit> at <tmp> line 1␤␤»
[01:28:34] *** Quits: ufobat_ (~martin@dynamic-077-002-150-051.77.2.pool.telefonica.de) (Ping timeout: 272 seconds)
[01:37:46] <Geth> ¦ doc/mu-perl: 7082554e2f | (Stoned Elipot)++ | doc/Type/Mu.pod6
[01:37:46] <Geth> ¦ doc/mu-perl: Add Mu.perl back
[01:37:47] <Geth> ¦ doc/mu-perl: 
[01:37:47] <Geth> ¦ doc/mu-perl: ... which may have been removed by mistake.
[01:37:47] <Geth> ¦ doc/mu-perl: 
[01:37:47] <Geth> ¦ doc/mu-perl: Make its documentation somewhat minimal.
[01:37:47] <Geth> ¦ doc/mu-perl: review: https://github.com/Raku/doc/commit/7082554e2f
[01:37:48] <Geth> ¦ doc/mu-perl: ac4e630c84 | (Stoned Elipot)++ | doc/Type/Mu.pod6
[01:37:50] <Geth> ¦ doc/mu-perl: Use code formatting and link to routine documentation
[01:37:52] <Geth> ¦ doc/mu-perl: review: https://github.com/Raku/doc/commit/ac4e630c84
[01:38:30] <Geth> ¦ doc: stoned++ created pull request #3900: Add back Mu.perl and tweak Mu.raku
[01:38:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3900
[01:39:24] *** domattps is now known as GoneDomattps
[01:46:40] *** Quits: cbk (~cbk@47.150.27.47) (Quit: leaving)
[02:24:26] *** Joins: Voldenet (~Voldenet@user/voldenet)
[02:24:32] *** Joins: TonFTP (~Ribdro@50-255-113-125-static.hfc.comcastbusiness.net)
[02:27:01] *** Quits: ribdro (~Ribdro@50-255-113-125-static.hfc.comcastbusiness.net) (Ping timeout: 244 seconds)
[02:42:38] *** Quits: TonFTP (~Ribdro@50-255-113-125-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[03:22:19] *** Joins: yewscion_ (~yewscion@2601:547:a01:2900::c51c)
[03:27:03] *** Joins: holly_ (~holly@109.136.39.83)
[03:29:34] <holly_> I've just uploaded my first sound program, Soundn::Tina (needs to be debugged)
[03:47:06] *** Quits: Doc_Holliwood (~holli@dslb-178-010-216-056.178.010.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:32:59] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:36:01] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:06:32] <Geth> ¦ ecosystem: stuart-little++ created pull request #593: Add Data::Tree to ecosystem
[05:06:32] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/593
[05:07:22] *** pierrot_ is now known as pierrot
[05:07:32] <xinming> m: 
[05:07:34] <xinming> class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } } C.new(:sources[1,2,3]);
[05:07:38] <xinming> m: class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } } C.new(:sources[1,2,3]);
[05:07:39] <camelia> rakudo-moar 168da39ae: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3D (:@!sources) { @!sources.raku.say; } }7⏏5 C.new(:sources[1,2,3]);␤    expecting any of:␤        infix␤       …»
[05:07:54] <xinming> m: class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } }; C.new(:sources[1,2,3]);
[05:07:54] <camelia> rakudo-moar 168da39ae: OUTPUT: «[]␤»
[05:08:23] <xinming> m: class A { }; class B is A { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; }; B.new(:sources[1,2]);
[05:08:23] <camelia> rakudo-moar 168da39ae: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3urces.raku.say; }; B.new(:sources[1,2]);7⏏5<EOL>␤»
[05:08:40] <xinming> m: class A { }; class B is A { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } }; B.new(:sources[1,2]);
[05:08:40] <camelia> rakudo-moar 168da39ae: OUTPUT: «[1, 2]␤»
[05:09:31] <xinming> So, In these 2 examples, why will the class inherited from Supplier doesn't receive the @!sources, but classes we created manually work, is this a bug?
[05:14:54] <guifa> codesections: that’s effectively recreating the old wantarray from the perl era, just on steroids :-)
[05:17:06] <guifa> xinming: not all classes will call BUILD / TWEAK for subclasses.  I forget exactly why but I remember having some issues with that when trying to subclass Hash
[05:18:36] <guifa> Err, no, that’s with it not being called.  Yours is definitely being called
[05:19:22] <xinming> yea, seems args are removed when calling subclasses.
[05:19:29] <xinming> so, I'd think it's a bug.
[05:19:31] <guifa> m: class C is Supplier { has @.sources; submethod BUILD (|c) { c.raku.say; } }; C.new(:sources[1,2,3]);
[05:19:31] <camelia> rakudo-moar 168da39ae: OUTPUT: «\(:taplist(Supplier::TapList.new))␤»
[05:19:56] <xinming> Ok, so we know the reason.
[05:20:34] <guifa> should be an easy fix then.  /me checks out the code
[05:21:24] <guifa> https://github.com/rakudo/rakudo/blob/168da39ae24b84f78525280a8d6750dd3cf1a176/src/core.c/Supplier.pm6#L99
[05:21:50] <guifa> I suppose that should be changed to something like
[05:22:24] <xinming> guifa: another question
[05:22:26] <xinming> guifa: https://dpaste.org/KHKW#L16,19,20,21
[05:23:01] <xinming> Yea, I just figured it's a bug
[05:23:24] <xinming> my latter question is, do we really need the `$!promise = ` part?
[05:24:04] <xinming> method new (\c) { self.bless(taplist => ..., |c) }
[05:24:35] <xinming> But I'm not sure wether it's a bug in Supplier code or designed to be like this
[05:25:33] <guifa> method new (:$taplist = TapList.new, |c) { self.bless: :$taplist, |c } or something similar
[05:27:48] <xinming> guifa: could you please clarify the other questoin?
[05:30:21] <guifa> I admit, I don’t play around with asynch code as much.  Does the react block continue working even after the BUILD method has completed?  If so, and if you don’t really care about getting any other information (like when —if ever — the react block finishes) then it’s probably not necessary
[05:34:43] <xinming> The reason I'm curious is, it worked without storing the promise into a var, so I'm afraid of it'll be gc'ed in the long run, or it'll probably be mem-leak in long run, that's why I got confused.
[05:36:25] <guifa> Alas, GC/mem management is also not a forté of mine
[05:39:20] *** Quits: holly_ (~holly@109.136.39.83) (Quit: This computer has gone to sleep)
[05:42:37] *** Joins: holyghost (~shameen@2a02:a03f:64c8:9200:38ca:92d8:dace:c752)
[05:43:06] *** Joins: holly_ (~holly@2a02:a03f:64c8:9200:1490:7b78:5f0b:760d)
[05:43:23] <xinming> Ok, thx anyway, will trouble someone else.
[05:43:24] <xinming> :-)
[05:43:40] <xinming> guifa: do you think the Supplier thing is a bug?
[05:43:56] <xinming> if so, I'll report it, or write patch?
[06:05:29] <guifa> xinming: it *might* be.  I think the problem is that the taplist uses a private class, so the question would be what to do when someone passes in a :taplist argument
[06:06:34] <guifa> Probably Supplier needs its own BUILD method that sets that property independently (which is effectively what it does).  I’d submit a ticket, and see what someone like jnthn thinks is the better fix to allow easier subclasses
[06:15:11] *** GoneDomattps is now known as domattps
[06:20:15] <xinming> guifa++
[06:26:12] *** Quits: holly_ (~holly@2a02:a03f:64c8:9200:1490:7b78:5f0b:760d) (Quit: This computer has gone to sleep)
[06:26:29] *** Joins: holly_ (~holly@2a02:a03f:64c8:9200:1490:7b78:5f0b:760d)
[06:29:40] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[06:32:35] *** Joins: tejr (~tejr@user/tejr)
[06:37:56] *** Quits: holly_ (~holly@2a02:a03f:64c8:9200:1490:7b78:5f0b:760d) (Quit: CUL)
[06:41:19] *** Joins: japhb (~geoff@mugs/japhb)
[06:53:52] *** Joins: frost (~frost@59.71.241.190)
[06:58:18] *** Quits: frost (~frost@59.71.241.190) (Ping timeout: 240 seconds)
[07:09:54] *** Joins: frost (~frost@59.71.241.190)
[07:10:20] *** Quits: frost (~frost@59.71.241.190) (Client Quit)
[07:10:35] *** Joins: frost (~frost@59.71.241.190)
[07:10:35] *** Quits: frost (~frost@59.71.241.190) (Client Quit)
[07:13:29] *** Joins: frost (~frost@59.71.241.190)
[07:22:16] *** domattps is now known as GoneDomattps
[07:27:56] *** GoneDomattps is now known as domattps
[07:51:29] *** Joins: [1]holyghost (~goon@109.136.39.83)
[07:51:39] *** [1]holyghost is now known as holly_
[07:55:17] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[08:14:26] <holly_> Hi Xliff, still busy on gtk ?
[08:24:05] * holly_ is writing the hollybot
[08:27:34] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[08:57:17] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[09:02:36] *** Joins: vrurg (~vrurg@45.74.95.181)
[09:04:38] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Ping timeout: 268 seconds)
[09:06:18] *** Quits: holyghost (~shameen@2a02:a03f:64c8:9200:38ca:92d8:dace:c752) (Ping timeout: 264 seconds)
[09:25:46] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[09:54:09] *** Joins: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net)
[09:54:35] *** domattps is now known as GoneDomattps
[09:59:20] *** GoneDomattps is now known as domattps
[10:08:22] <Geth> ¦ doc: a2e8cada00 | (Stoned Elipot)++ (committed by Juan Julián Merelo Guervós) | doc/Type/Num.pod6
[10:08:22] <Geth> ¦ doc: Document Num.Str
[10:08:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a2e8cada00
[10:08:25] <linkable6> Link: https://docs.raku.org/type/Num
[10:09:20] *** domattps is now known as GoneDomattps
[10:11:05] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-038.092.218.pools.vodafone-ip.de)
[10:15:36] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:15:55] *** Joins: tejr (~tejr@user/tejr)
[10:32:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:35:28] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[10:36:06] *** Quits: xinming (~xinming@115.219.32.39) (Ping timeout: 244 seconds)
[10:36:29] *** Joins: xinming (~xinming@115.219.32.39)
[10:40:44] *** Quits: holly_ (~goon@109.136.39.83) (Quit:  bbl)
[11:00:04] *** Quits: xinming (~xinming@115.219.32.39) (Ping timeout: 244 seconds)
[11:00:27] *** Joins: xinming (~xinming@115.219.32.39)
[11:08:54] *** Joins: ufobat_ (~martin@dynamic-077-002-150-051.77.2.pool.telefonica.de)
[11:33:16] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:38:12] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 268 seconds)
[11:38:49] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:50:42] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-038.092.218.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[11:51:30] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[11:55:58] *** Joins: greaser|q (greaser@antihype.space)
[12:03:50] *** ufobat_ is now known as ufobat
[12:21:36] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:27:48] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:29:01] *** Joins: holyghost (~shameen@2a02:a03f:64c8:9200:38ca:92d8:dace:c752)
[12:29:05] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Read error: Connection reset by peer)
[12:29:44] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:41:19] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.1)
[12:43:36] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[13:10:21] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:12:54] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[13:15:40] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[13:15:40] *** Joins: greaser|q (greaser@user/greasemonkey)
[13:16:14] *** greaser|q is now known as GreaseMonkey
[13:31:58] *** Joins: kylese (~kylese@dynamic-046-114-172-209.46.114.pool.telefonica.de)
[13:36:34] <Geth> ¦ ecosystem/master: 4 commits pushed by chirvasitua++, (Juan Julián Merelo Guervós)++
[13:36:34] <Geth> ¦ ecosystem/master: f4dc1bc5af | Add Data::Tree to ecosystem
[13:36:34] <Geth> ¦ ecosystem/master: 3bb3cb56ba | initialize PR redo
[13:36:35] <Geth> ¦ ecosystem/master: 09fdb68960 | Add Data::Tree to ecosystem
[13:36:35] <Geth> ¦ ecosystem/master: b9098c6e65 | Merge pull request #593 from stuart-little/raku-data-tree
[13:36:35] <Geth> ¦ ecosystem/master: review: https://github.com/Raku/ecosystem/compare/766c4adbb9af...b9098c6e6548
[13:41:15] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[13:41:49] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Read error: Connection reset by peer)
[13:45:49] *** Joins: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se)
[13:50:41] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:51:02] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[13:52:04] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[13:57:32] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[14:01:30] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[14:01:37] *** Quits: cnx (~cnxhaloge@2001:470:69fc:105::61f) (Quit: Bridge terminating on SIGTERM)
[14:01:37] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Bridge terminating on SIGTERM)
[14:01:38] *** Quits: tyil[m] (~tyilmatri@2001:470:69fc:105::9a1) (Quit: Bridge terminating on SIGTERM)
[14:01:38] *** Quits: ComplYue[m] (~complyuem@2001:470:69fc:105::9b0) (Quit: Bridge terminating on SIGTERM)
[14:01:38] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Quit: Bridge terminating on SIGTERM)
[14:01:39] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[14:01:40] *** Quits: juanfra (~juanfra@user/juanfra) (Quit: Bridge terminating on SIGTERM)
[14:01:40] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: Bridge terminating on SIGTERM)
[14:02:30] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 268 seconds)
[14:03:53] *** Joins: juanfra (~juanfra@user/juanfra)
[14:08:01] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[14:08:01] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[14:08:01] *** Joins: cnx (~cnxhaloge@2001:470:69fc:105::61f)
[14:08:13] *** Joins: tyil[m] (~tyilmatri@2001:470:69fc:105::9a1)
[14:08:13] *** Joins: ComplYue[m] (~complyuem@2001:470:69fc:105::9b0)
[14:08:15] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[14:40:02] *** Joins: xinming_ (~xinming@115.219.33.131)
[14:42:45] *** Quits: xinming (~xinming@115.219.32.39) (Ping timeout: 244 seconds)
[14:43:27] <xinming_> in an object, we have  `start react { ... }`  block, and that async event handler worked fine, but I'm curious will this cause memory leak?
[14:44:04] <xinming_> IIRC, I thought that `start react { ... }` returns a promise, when that promise go out of scope, it should be gc'ed
[14:46:07] <codesections> I haven't done a whole lot in that area, but that sounds correct to me
[14:46:35] <codesections> m: my $p = start { react { }}; say $p; say $p.status
[14:46:35] <camelia> rakudo-moar 168da39ae: OUTPUT: «Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)␤Kept␤»
[15:00:48] <xinming_> codesections: something like.
[15:01:09] <xinming_> m: sub t () { start react { }; "hello"; }; t().say;
[15:01:10] <camelia> rakudo-moar 168da39ae: OUTPUT: «hello␤»
[15:02:11] <xinming_> You see, the `start react { };` here is not stored in var, but it will work in background, So I'm quite curious wether it'll cause mem-leak, or in the long run, the code will be gc'ed, and cause unexpected behavior.
[15:05:54] <moon-child> it will be gc'd
[15:06:00] <moon-child> whether you store it in a variable or not has no bearing on that
[15:06:11] <moon-child> (actually, storing it in a variable can only cause it to _not_ be GCed)
[15:06:58] <xinming_> moon-child: then, the code in `start react { }` will result unexpected behavior, so we shouldn't do this, right?
[15:07:51] <xinming_> We store the `start react { }` in a block somewhere
[15:11:02] <moon-child> start react {} is fine
[15:11:06] <moon-child> nothing wrong with it
[15:13:45] <Voldenet> `start react {}` is a fine way to mess up error handling
[15:15:15] <Voldenet> but otherwise it will work
[15:17:38] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-230.092.218.pools.vodafone-ip.de)
[15:21:41] <Voldenet> `start react {}` will cause memleaks in cases like `my \s = Supplier.new; start react { whenever s.Supply {} };`
[15:24:05] <codesections> How do type captures for return values work?  I expected the below to compile: 
[15:24:27] <codesections> m: sub f(::T $a --> T) { $a } f 42
[15:24:27] <camelia> rakudo-moar 168da39ae: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub f(::T $a --> T) { $a }7⏏5 f 42␤    expecting any of:␤        infix␤        infix stopper␤        statemen…»
[15:24:35] <codesections> m: sub f(::T $a --> T) { $a }; f 42
[15:24:35] <camelia> rakudo-moar 168da39ae: OUTPUT: «Type check failed for return value; expected T but got Int (42)␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[15:25:08] <lizmat> I think there's an issue for this already, I sorta expect this to be fixed in the RakuAST branch
[15:25:44] <codesections> lizmat++ Thanks, I thought I was just missing something 
[15:26:12] <lizmat> actually, I think the error message is also wrong, or it could be an indication of the issue
[15:29:42] <xinming_> Voldenet: if it's not referenced, how will raku know the `start react { }` thing is still in "use"? is `start react { }` block won't be removed?
[15:32:30] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:32:47] *** Joins: tejr (~tejr@user/tejr)
[15:33:20] <lizmat> xinming_: please realize that start react whenever and friends are just syntactic sugar for setting up a bunch of internal objects using UPPERCASE is implementation-detail subs and setting up various dynamic variables
[15:34:04] <lizmat> pretty sure there's something in there that will keep things alive even though from the syntax you might think it doesn't
[15:34:16] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[15:35:15] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[15:40:03] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 268 seconds)
[15:40:37] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[15:50:23] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[15:51:43] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[16:11:20] *** Quits: kylese (~kylese@dynamic-046-114-172-209.46.114.pool.telefonica.de) (Quit: Leaving)
[16:13:35] *** Quits: esh (~quassel@minnesota.heebs.ch) (Ping timeout: 272 seconds)
[16:15:40] *** Joins: esh (~quassel@minnesota.heebs.ch)
[16:15:50] *** Ulti_ is now known as Ulti
[16:32:40] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:33:11] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[16:47:30] *** Quits: yewscion_ (~yewscion@2601:547:a01:2900::c51c) (Ping timeout: 240 seconds)
[16:51:44] *** Joins: ctilmes (~ctilmes@pool-100-16-6-40.bltmmd.fios.verizon.net)
[16:53:59] <ctilmes> alpine linux 3.14.0 released, includes rakudo 2021.05, just 'apk add rakudo'
[16:54:18] <El_Che> ctilmes++
[17:03:10] <lizmat> whee!  :-)
[17:21:36] *** Joins: kakadzhun (~kakadzhun@176.255.94.4)
[17:23:50] <tyil> nice
[17:28:41] *** Joins: Doc_Holliwould (~holli@ipservice-092-218-232-196.092.218.pools.vodafone-ip.de)
[17:30:10] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[17:32:10] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-230.092.218.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[17:39:25] <xinming_> lizmat: I understand that, that's why I feel, if we have bunch of internal objects out there, Does it mean the memory will leak over time? as I'm trying to do something that may dynamically call `start react { ... }` over time.
[17:52:16] <lizmat> it shouldn't  :-)
[17:52:18] <moritz> there will be memory and CPU used for every task you start with 'start'. Do these tasks terminate, eventually?
[18:03:56] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:04:10] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[18:07:29] <xinming_> moritz: It will, the react will finally have `done();` be called, I just got worried about without var, the promise will be gc'ed, and so will react block, then in the long run, the react will stop working.
[18:07:42] <xinming_> well, I'll use it anyway, ram is cheap.
[18:15:58] *** Joins: Guest81 (~Guest81@95.107.226.196)
[18:20:58] *** Joins: jrjsmrtn_ (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[18:22:51] *** Quits: Guest81 (~Guest81@95.107.226.196) (Quit: Connection closed)
[18:24:01] *** gordonfish- is now known as gordonfish
[18:32:02] *** jrjsmrtn_ is now known as _jrjsmrtn
[18:34:09] *** Quits: Henry151 (~bishop@user/henry151) (Quit: leaving)
[18:39:47] *** Joins: Henry151 (~bishop@user/henry151)
[18:40:36] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[18:41:47] *** Joins: Henry151 (~bishop@user/henry151)
[18:45:38] *** GoneDomattps is now known as domattps
[18:59:47] *** Joins: cbk (~cbk@47.150.27.47)
[19:02:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:04:55] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[19:09:25] *** Joins: ufobat_ (~martin@dynamic-077-009-007-175.77.9.pool.telefonica.de)
[19:12:42] *** Quits: ufobat (~martin@dynamic-077-002-150-051.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[19:21:23] *** Quits: Henry151 (~bishop@user/henry151) (Quit: leaving)
[19:22:50] *** Joins: Henry151 (~bishop@user/henry151)
[19:23:19] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:25:48] *** Joins: Henry151 (~bishop@user/henry151)
[19:26:08] *** Joins: morayj (~morayj@31.124.158.221)
[19:29:08] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:29:32] *** Joins: Henry151 (~bishop@user/henry151)
[19:29:51] *** Quits: Henry151 (~bishop@user/henry151) (Client Quit)
[19:33:24] *** Joins: Henry151 (~bishop@user/henry151)
[19:45:00] *** Quits: b2gills (~brad@subscriber-dhcp-cgn-64-191-7-0.wcufiber.net) (Ping timeout: 244 seconds)
[19:49:58] *** Quits: kakadzhun (~kakadzhun@176.255.94.4) (Quit: Connection closed)
[19:58:46] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[20:15:20] <Xliff> m: my $a = Mu; say "Hi" unless $a =:= Mu
[20:15:20] <camelia> rakudo-moar db074a8bc: OUTPUT: «Hi␤»
[20:15:22] <Xliff> Hun?!?
[20:15:45] <Xliff> m: my $a = Mu; say "Hi" unless Mu =:= $a
[20:15:45] <camelia> rakudo-moar db074a8bc: OUTPUT: «Hi␤»
[20:15:49] <Xliff> m: my $a = Mu; say "Hi" unless Mu === $a
[20:15:50] <camelia> rakudo-moar db074a8bc: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»
[20:16:00] <cnx> what is =:=?
[20:16:11] <Xliff> container equality
[20:16:21] <cnx> thanks
[20:16:47] <Xliff> Which... in the case of Mu, doesn't seem to work.
[20:17:06] <Xliff> m: my $a = Any; say $a =:= Any
[20:17:06] <camelia> rakudo-moar db074a8bc: OUTPUT: «False␤»
[20:17:13] <Xliff> m: my $a = Any; say ($a =:= Any)
[20:17:13] <camelia> rakudo-moar db074a8bc: OUTPUT: «False␤»
[20:17:16] <Xliff> m: my $a = Any; say ($a === Any)
[20:17:17] <camelia> rakudo-moar db074a8bc: OUTPUT: «True␤»
[20:17:30] <Xliff> m: my $a = Mu; say ($a === Mu)
[20:17:30] <camelia> rakudo-moar db074a8bc: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»
[20:19:47] *** Quits: Doc_Holliwould (~holli@ipservice-092-218-232-196.092.218.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[20:19:55] <codesections> m: my $a := Mu; say $a =:= Mu; # Is it just the Scalar getting in the way?
[20:19:55] <camelia> rakudo-moar db074a8bc: OUTPUT: «True␤»
[20:20:08] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[20:20:55] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[20:21:41] <codesections> the docs say "Returns True if both arguments are _bound_ to the same container" (https://docs.raku.org/routine/=:=), so I think that's it
[20:22:52] <dakkar> codesections: I guess so
[20:23:02] <dakkar> m: my \a := Mu; say a =:= Mu
[20:23:02] <camelia> rakudo-moar db074a8bc: OUTPUT: «True␤»
[20:23:24] <dakkar> then again, it said "true" in your case as well…
[20:23:39] <dakkar> m: my \a := Mu; say a =:= Int
[20:23:39] <camelia> rakudo-moar db074a8bc: OUTPUT: «False␤»
[20:23:46] <dakkar> (just to check…)
[20:24:52] <codesections> (fyi, `my \a := Mu` is redundant – \a binds by default, so `my \a = Mu` is the same thing.  But $a assigns by default, so you need the := bind operator to bind)
[20:25:08] <codesections> m: my \a = Mu; say a =:= Mu
[20:25:09] <camelia> rakudo-moar db074a8bc: OUTPUT: «True␤»
[20:25:19] <dakkar> thank you! that's a bit of raku I haven't needed yet, so I'm not familiar
[20:34:07] <dakkar> ok, now I've actually read the whole conversation…
[20:34:58] <dakkar> the error message for `== Mu` is LTA, though
[20:35:06] <dakkar> m: 1==Mu
[20:35:06] <camelia> rakudo-moar db074a8bc: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "==" in expression "1==Mu" in sink context (line 1)␤Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»
[20:35:13] <dakkar> m: say 1==Mu
[20:35:13] <camelia> rakudo-moar db074a8bc: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»
[20:35:15] <dakkar> m: say 1===Mu
[20:35:15] <camelia> rakudo-moar db074a8bc: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»
[20:35:29] <dakkar> (I know why it does that, still LTA)
[20:35:40] *** Joins: holly_ (~goon@109.136.39.83)
[20:38:58] <codesections> The fix for that would be pretty easy, if you're interested: just add a multi infix:<===>(Mu \a, Mu \b) candidate in ./core.c/Mu.pm6 that dies with an error (similar to how List.push does).  I'm sure a PR like that would be appreciated :D
[20:43:02] <Altreus> now it's getting to the time I'm feeling overextended today :/
[20:43:05] <moritz> it also kills autothreading
[20:43:11] <Altreus> might try a nap and see how I feel
[20:43:16] <dakkar> moritz: I suspected that
[20:43:55] <dakkar> (also, shouldn't Mu===Mu be True?)
[20:43:58] <codesections> even if it doesn't match?
[20:46:35] <moritz> autothreading works as a fallback to regular dispatch
[20:46:54] <moritz> since Junction ~~ Mu, a dispatch to (Mu, Mu) works, and so there is no fallback
[20:47:32] <moritz> m: multi a($x, $y) { say "($x, $y)" }; a(any(1, 2), 5)
[20:47:33] <camelia> rakudo-moar db074a8bc: OUTPUT: «(1, 5)␤(2, 5)␤»
[20:47:34] <codesections> oh, I didn't realize that. Hmm... nvm, not as easy as I was thinking.  Sorry about that!
[20:47:52] <moritz> m: multi a($x, $y) { say "($x, $y)" }; multi a(Mu, Mu) { say "moooh"};  a(any(1, 2), 5)
[20:47:53] <camelia> rakudo-moar db074a8bc: OUTPUT: «moooh␤»
[20:48:13] <dakkar> moritz: so there's no decent way to have 1==Mu and 1===Mu be False, and Mu===Mu be True? (plus all the other relational ops)
[20:48:36] <dakkar> (short of special-casing in the dispatcher)
[20:50:02] <moritz> not if you want === to autothread
[20:50:44] <moritz> (I still think that === shouldn't autothread, as I thought when we first discussed this. Sadly I couldn't convince Larry)
[20:51:16] <dakkar> I can argue it both ways…
[20:54:17] <dakkar> this is one case where a *rakudo* (not raku) documentation suite would be useful
[20:54:29] <dakkar> so we could document this apparent weirdness
[20:54:56] <dakkar> (which, technically, is a side-effect of the way rakudo works, not exactly required/implied by the raku spec)
[20:56:29] <moritz> === not autothreading and the way the dispatcher works are very much part of raku, and tested to the death in roast
[20:56:41] <moritz> (at least that was the case back in the days...)
[20:57:37] <dakkar> yes
[20:57:58] <dakkar> I mean, 1===Mu throwing instead of returning False, is *probably* not in roast ☺
[20:58:55] <dakkar> (and it could be made to return False, it's just a bad idea to do so in rakudo's dispatcher, AIUI)
[20:59:06] <dakkar> (yes, that "just" is doing a lot of work there)
[21:01:01] <dakkar> anyway, that's the end of my workday, I'm disconnecting now
[21:06:46] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 268 seconds)
[21:06:53] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 268 seconds)
[21:20:12] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[21:21:53] <[Coke]> o/
[21:22:12] <codesections> \o
[21:24:00] <guifa> o/
[21:25:04] <guifa> \o/ (o) (o( /o\
[21:25:34] <guifa> lizmat: any tips on making nqp code not look … ugly as sin?
[21:28:39] <codesections> guifa: I'm not liz (obviously!) but I found that thinking of it as a Lisp helped a bit
[21:28:56] * guifa doesn’t have any lisp experience haha
[21:29:42] *** Quits: ufobat_ (~martin@dynamic-077-009-007-175.77.9.pool.telefonica.de) (Ping timeout: 268 seconds)
[21:30:02] <guifa> Do you just do lots of extra line breaks with indentation to make relations easier?  
[21:33:13] <codesections> yeah, and with more horizontal alignment between expressions. Somewhat like https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org#sequencep, though not 100%
[21:33:44] <guifa> Is there any clean way to mimic a
[21:34:03] <guifa> while my $foo = some-call { … } ?
[21:35:59] *** Quits: morayj (~morayj@31.124.158.221) (Quit: morayj)
[21:36:12] *** Joins: morayj (~morayj@31.124.158.221)
[21:36:18] *** Quits: stoned75 (~seb@78.203.129.116) (Ping timeout: 240 seconds)
[21:36:41] <[Coke]> (rakudo docs) not sure what JJ's thoughts are, but it seems reasonable to me to have [rakudo] only blocks in the docs to describe things that rakudo is doing that may not be "canon", but are nonetheless expected. I'm sure there are some ad hoc ones scattered through the docs already
[21:37:08] <[Coke]> but if there's a need, put together a list on a wiki page on the rakudo/rakudo repo to start.
[21:39:31] <guifa> Actually, the more I’m working on this, the more I’m curious just how complex I should go with DateTime formatting
[21:39:50] <codesections> m: use nqp; my @a = ^5; nqp::while(nqp::stmts((my $foo = @a.pop)), say "foo was $foo") # Does something like this work?
[21:39:50] <camelia> rakudo-moar db074a8bc: OUTPUT: «foo was 4␤foo was 3␤foo was 2␤foo was 1␤»
[21:40:29] <guifa> codesections:  huh, I swear I tried that last night and it didn’t work. But in my defense it was late
[21:40:31] <codesections> (That's a hybrid of nqp and Raku -- in a pure nqp setting, it'd be a bit more verbose)
[21:42:08] <guifa> The other thing I miss is if chaining / given/when
[21:45:41] <guifa> I’ve got a value that can be anything from, say, 0-8, and I’ve tried doing sequential checks with returns, and also divide and conquer style if < 4, if < 2, if == 0, and that just gets ugly fast, even if more optimal.  
[21:46:31] <guifa> I thought about just making an array of subs to act as a jump table of sorts, but I dunno, maybe that’s overly complicating it
[21:48:58] <codesections> Yeah, I've noticed that a lot of the nqp in Rakudo uses nested ternary operators, though ymmv on how readable that is (and I think there might have been a perf. reason for that as well?)
[21:49:06] <codesections> e.g., https://github.com/rakudo/rakudo/blob/master/src/core.c/traits.pm6#L333-L344
[21:49:21] <guifa> Ah that is a good bit more readable
[21:49:26] <guifa> I should have thought of that
[21:52:08] <codesections> well, I know some people hate nested ternaries, but I agree that it's easier to follow here
[21:53:11] <guifa> One GNU variant also has an interesting modifier for formatting: flip casing.
[21:53:49] <ugexe> ternary doesnt have to create a new lexical scope so id expect it to be faster than any construct using blocks
[21:54:46] <guifa> ugexe++ makes sense, I know that’s one of the reason’s that postfix loops are a smidgen faster, right?
[21:55:11] <ugexe> i cant say for sure thats why, but i would expect it to contribute yeah
[21:56:50] <guifa> also F whoever in Gnu thought it would be a good idea for a flipped-case modifier.  
[21:58:09] <codesections> I admit that I've used it
[21:58:26] <guifa> Really?
[21:58:49] * guifa is legit interested, can’t think of when Foo -> fOO makes much sense
[22:00:06] <ugexe> easily create namespace collisions on case insensitive file systems
[22:02:00] <codesections> my current desktop displays the date with
[22:02:13] <codesections> m: say qx{date '+%a, %b %e %l:%M %#Z'}
[22:02:14] <camelia> rakudo-moar db074a8bc: OUTPUT: «Wed, Jun 16  7:32 cest␤␤»
[22:02:32] <lucs> codesections: I don't indent those subsequent ternaries; it would like be indenting each new "elsif" in a series of such.
[22:03:03] <codesections> (actually, with the lowercase timezone flush against the hour)
[22:03:21] <guifa> codesections: yeah, that’s actually where it specifies the use.  But that makes more sense to have a lowercase modifier, than a flip case modifier
[22:04:49] <codesections> yeah, that's fair.  Someone over designed it -- I bet the goal was to avoid having two modifiers (for lower and upper), but they needlessly introduced state into _formatting_  
[22:04:59] <ugexe> maybe useful for a naive almost-right password detector. i think facebook uses something similar where you can enter your password but slightly wrong and it will work
[22:05:01] <guifa> Well, there *is* an upper case one though :-)
[22:05:25] <codesections> wait, really?  Ok, that's just bonkers 
[22:05:25] <guifa> m: say qx{date ‘+%^a, %b %e %l:%M %#Z'}
[22:05:26] <camelia> rakudo-moar db074a8bc: OUTPUT: «/bin/sh: -c: line 0: unexpected EOF while looking for matching `''␤/bin/sh: -c: line 1: syntax error: unexpected end of file␤␤»
[22:05:27] <ugexe> i think it was for entering passwords using T9 or some such
[22:05:56] <guifa> ugexe: yikes, does that still exist?  That sounds like it really opens up a potential space for guessing passwords
[22:06:09] *** Quits: holyghost (~shameen@2a02:a03f:64c8:9200:38ca:92d8:dace:c752) (Ping timeout: 272 seconds)
[22:07:35] <guifa> m: say qx{date '+%a, %^b' }
[22:07:36] <camelia> rakudo-moar db074a8bc: OUTPUT: «Wed, JUN␤␤»
[22:07:45] <guifa> m: say qx{date '+%#a, %^b' }
[22:07:45] <camelia> rakudo-moar db074a8bc: OUTPUT: «WED, JUN␤␤»
[22:07:47] <ugexe> at facebook im not sure... T9 has sort of gone away. but many banking systems also did this (they would just store the T9 number of the password, so multiple passwords would work) but those are legacy systems and many might still do this crap
[22:08:23] <ugexe> i.e. if your password was just "a" then "a" "b" or "c" would all work
[22:08:57] <guifa> codesections: ^^ what's worse is that there's a lot of format commands that are semi-special cased, and it looks like # is one of them.  I might just say screw it, # is lower case, and make my life easier.  It's an extension of the standard, so I suppose I'm not obligaited to do it like everyone else if their way is stupid :-) 
[22:09:32] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[22:11:10] <codesections> wow. So, despite all that complexity, there isn't a way to get 'jun' as the output!
[22:15:17] <guifa> Yup.  Kind of crazy.  I think just using # for lc is probably best and just document it as a difference with GNU
[22:18:18] *** Quits: frost (~frost@59.71.241.190) (Ping timeout: 268 seconds)
[22:20:56] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[22:21:42] *** Joins: stoned75 (~seb@78.203.129.116)
[22:32:37] *** Joins: holyghost (~shameen@2a02:a03f:64c8:9200:5d7b:9f5b:9cf5:e6a0)
[22:32:48] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:34:49] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:35:45] <Altreus> ok plan b since today is crap - gonna do the stream tomorrow instead and hopefully I'll feel better
[22:36:43] <Altreus> Gives me a bit more time to set this pesky environment up too
[22:36:51] <holly_> Altreus : take care
[22:37:33] <Altreus> :)
[22:53:53] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (Quit: leaving)
[22:55:30] *** Joins: melezhik (~melezhik@174.128.60.162)
[22:56:06] <melezhik> Colorizable started to produce a lot of warning under latest Rakudo version - https://gitlab.com/uzluisf/raku-colorized/-/issues/4 I wonder if this relates to Rakudo itself?
[22:57:46] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-196.092.218.pools.vodafone-ip.de)
[22:59:20] *** Joins: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[23:02:03] <MasterDuke> the warning is correct, doing .contains on a map is risky, https://gitlab.com/uzluisf/raku-colorized/-/blob/master/lib/Colorizable.rakumod#L154 and https://gitlab.com/uzluisf/raku-colorized/-/blob/master/lib/Colorizable.rakumod#L160 should be changed
[23:09:17] <melezhik> yeah, this is for the modules's author, I just use it ... thanks
[23:13:24] *** Quits: stoned75 (~seb@78.203.129.116) (Remote host closed the connection)
[23:28:49] <melezhik> I golfed it - raku -e 'use Colorizable; my $s = "hello" but Colorizable; sat $s.yellow.bold '
[23:29:11] <melezhik> it happens only for this style of method invocation
[23:29:39] <melezhik> but not for `raku -e 'use Colorizable; my $s = "hello" but Colorizable; say $s.colorize(:fg(yellow), :mo(bold)) '`
[23:52:42] *** Quits: lgtaube (~lgt@45.86.203.1) (Ping timeout: 240 seconds)
[23:55:33] *** Joins: stoned75 (~seb@78.203.129.116)
