[00:04:13] <gilberth> But then my special friend Keith Packard still believes that LISP is interpreted and that X11 would be high latency. For the latter he mentions start up time of a X11 application because it must get font metrics from the server. Which is silly, I can prepare a PDF for others to read w/o asking the receiver to mail me his font metrics beforehand. Could have been solved.
[00:08:29] <gilberth> His solution was to send rendered glyph as bitmaps to the server instead. Would that make it any faster? Would it reduce memory foot print? That's silly each application using the Render extension to have anti-aliased text rendering has its own rasterized glyph in memory. Why isn't that shared, even?
[00:10:57] <gilberth> On that note: When I prepare SVG files, I just assume the standard PS metrics, which works surprisingly well.
[00:11:33] <gilberth> I wish I could write that up in a coherent way.
[00:11:38] <gilberth> </vent>
[00:22:06] <pl> gilberth: DPS had nothing on NeWS which was afaik much more capable ;)
[00:26:10] <gilberth> pl: Yes.
[00:55:01] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:07:08] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:10:25] <gilberth> Are there terms to name two dimensional coordinate systems with the y-axis pointing up and pointing down? I know left and right handed for 3d. But in 2d?
[01:18:21] <Aurora_v_kosmose> Cartesian?
[01:21:00] <gilberth> And the other with the y-axis pointing downwards?
[01:21:49] <gilberth> CLIM calls the y-axis pointing upwards "first quadrant".
[01:22:41] <Aurora_v_kosmose> It's the same, they're numbered/named differently on conventions that basically change by nation.
[01:23:50] <Aurora_v_kosmose> https://en.wikipedia.org/wiki/Quadrant_(plane_geometry) This is close-enough to what I learned.
[01:25:01] <gilberth> And isn't Cartesian just having coordinates specified by the projection of a point onto the orthogonal axes? In contrast to e.g. polar coordinates?
[01:27:50] <gilberth> Aurora_v_kosmose: Hmm, yes. But would readers understand what I would mean by fourth quadrant coordinates? Despite that this does not make any sense to me, as the IV quadrant is just the part of the plane with a positive x and a negative y. *sigh*
[01:31:11] <Aurora_v_kosmose> It's one of the more likely names they'd remember from schooling.
[01:32:16] <Aurora_v_kosmose> But perhaps there's better more formal names. I don't know.
[01:32:20] <gilberth> I have never seen a different numbering. This numbering is easy to remember as an angle swept out from 0 to 2\pi, visits the quadrants in the order given by the names. How could you number them differently? *sigh-2.0*
[01:33:04] * Aurora_v_kosmose shrugs
[01:34:39] <gilberth> Ok. I guess I just say "y pointing upwards" and "y pointing downwards". I want to clarify how the start and end angles for ellipses in CLIM are specified. This gets counter-intuitive as the default coordinate systems of CLIM have y pointing downwards and thus make angles running clock-wise, but still mathematically positive, it's only that we look at a flipped coordinate system.
[01:36:57] <Aurora_v_kosmose> Inversely proportional is another way to say it.
[01:37:11] <Aurora_v_kosmose> But it's more general than strictly negative vs positive increase.
[01:37:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:43:13] <gilberth> A affine transformation could be reflecting or non-reflecting. This says in which direction angles runs.
[01:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:46:15] <gilberth> Something similar applies to text rendering. The CLIM spec doesn't state that explicitly, but text is non-mirrored (upright) only when angles run clockwise. You set up a "first quadrant" coordinate system with the y-axis pointing upwards, text gets flipped, when you ask for glyphs to be transformed.
[01:46:36] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[01:49:40] <gilberth> Some APIs have a separate text transformation to account for that. PS by default has the origin in the lower left, when you reflect and put the origin at the upper left, you need to mirror text for it being non-mirrored. Cocoa is the same, and I setup a last minute transform, which negates the y-axis. That is ((1 0 0) (0 -1 0))
[01:51:11] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:51:48] <gilberth> Anyhow, my idea was to clarify that a bit. Does also apply to patterns aka images.
[02:01:53] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:08:08] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:11:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:22:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:25:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:33:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:57:01] *** Parts: lotuseater (~user@p200300e7871bf000d922bc6401acd239.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[03:08:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:08:23] *** Joins: Alfr (~Alfr@user/alfr)
[03:10:40] *** Joins: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de)
[03:21:27] *** eschaton_ is now known as eschaton
[03:22:11] <hayley> https://www.youtube.com/watch?v=1hBwEUGoi48
[03:22:12] -ixelp- Machine Gun Etiquette - YouTube
[03:24:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:41:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[03:42:16] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:43:14] <hayley> https://www.youtube.com/watch?v=zRO3KmR9D7Y
[03:43:14] -ixelp- Souvenir (Live at the Museum of Liverpool) - YouTube
[03:50:50] <lotuseater> hi hayley 
[03:58:51] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[03:59:18] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:00:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:00:52] *** Joins: Alfr (~Alfr@user/alfr)
[04:13:28] *** Quits: random-nick (~random-ni@87.116.179.117) (Ping timeout: 250 seconds)
[04:42:26] <hayley> Minor problem: branch instructions on ARM can only jump (with an immediate offset) Â±32MB. Would it be likely that 32MB is enough for a JIT cache?
[04:45:22] <gilberth> Is that all within one function?
[04:46:49] <hayley> That'd be the code generated for a full image (of indeterminate size - picture a Scheme system if you need a mental image).
[04:47:54] <gilberth> Then that'll be tight. Let the assembler handle that.
[04:48:35] <hayley> Well, not a "full" image, as it is a JIT, more like the hot parts. But the hot parts of a full image.
[04:49:46] <gilberth> You don't fragment your code somehow? That is branching from here to some perhaps later generated chunk of instructions somewhere completely else?
[04:50:22] <hayley> Though I'd also have to GC that crap too. Which is feasible on a single-threaded system, also possible on a multi-threaded not-fully-concurrent GC (as you can free while threads are stopped), and total hell on a fully concurrent GCed system.
[04:50:56] <hayley> There would be call-site optimization, which does fragment code, sure.
[04:51:29] <gilberth> Then, I'd say: 32MB is tight.
[04:53:19] <hayley> https://www.youtube.com/watch?v=7OT4NlUugLE
[04:53:20] -ixelp- Random (Live 79) - YouTube
[04:54:00] <gilberth> Would longer branches be more expensive cycle-wise? Are they conditional?
[04:54:51] <hayley> They would require loading the address from somewhere, or reconstructing it with multiple instructions.
[04:55:57] <gilberth> Sure. You would load pc relative, as with any other constants. I am just not aware how good the CPU handles that.
[04:56:16] <gilberth> It's no PDP-11 anymore. :)
[05:02:03] <hayley> Still, GCing JITed code seems like a pile of pain. I guess, again as we have a GC which only occurs at well defined points, we can "mark" code that is being used, and then free anything else. And there would be a back-pointer from the code to the bytecode object, so that we don't have a dangling reference.
[05:04:08] <gilberth> I believe you could use ldr pc, =target, which is ldr pc, [pc, #offset], you need room somewhere for the target to be stored as constant. But's the same as with any word-width constant.
[05:04:33] <hayley> Someone told me that using PC on ARM gets messy with pipelining or something.
[05:05:26] <gilberth> Well, you could handle that at "link time" and use the branch instruction, when it fits.
[05:07:08] <gilberth> Just leave room for the absolute address to be loaded with LDR, when the offset is outside +/- 32MB for a B instruction.
[05:07:45] <hayley> Wow (as of Java 8 - I don't think they changed it still), the JVM defaults to a 32MB or 48MB code cache.
[05:08:33] <hayley> https://docs.oracle.com/javase/8/embedded/develop-apps-platforms/codecache.htm
[05:08:34] -ixelp- 15 Codecache Tuning (Release 8)
[05:10:32] <gilberth> hayley: Yes, this was my question. In general messing with the pc ought to be slow. But I bet, that mov pc, lr and ldmfd sp, {...,pc} is handled in a fast way. So I could imagine that ldr pc, [pc, #offset] for long branches might be as well.
[05:10:44] <hayley> Sure.
[05:11:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:12:26] <gilberth> And beside: You need that only when the +/- 32MB offset is not enough. And in that case there aren't too many options. You may look at what ld(1) does to implement "long" branches / function calls for seeing what the idiomatic way is.
[05:13:10] <hayley> Okay. Think if Java applications survive on a 48MB code cache, I will be safe though.
[05:13:46] <gilberth> What a terrific argument!
[05:14:23] <gilberth> When all are using Rust, I should fare well using it, too.
[05:16:24] <hayley> Do you know how to figure out how much machine code resides in a Lisp image?
[05:17:01] <hayley> Aha, SBCL (room t) says.
[05:17:31] <gilberth> No, but it shouldn't be too hard to figure out.
[05:17:33] <hayley> With McCLIM and SWANK loaded it reports 25MB from 42.8k CODE objects.
[05:18:14] <gilberth> Load ironclad, too :)
[05:18:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[05:18:32] <hayley> Load in decentralise2 and netfarm-server (including Ironclad, yes), and we are still only at 30.4 MB.
[05:18:55] <hayley> And remember a JIT is a lazy compiler, so there would be less code. So yes, I think it is a fine argument.
[05:19:03] <kakuhen> out of curiosity, i will load ironclad right now
[05:19:05] <kakuhen> I have never used it before
[05:22:31] <gilberth> I can't see where SBCL reports code usage.
[05:22:49] <hayley> (room t) prints out a CODE type.
[05:23:24] <gilberth> What about the static space?
[05:23:44] <hayley> It says "Summary of spaces: dynamic immobile static"
[05:28:52] <gilberth> Hmm, is the number that SBCL reports real?
[05:29:26] <hayley> I assume so.
[05:30:08] <gilberth> So what's in all the simple-vectors? I have 10MB in simple-vectors and 15MB in code. Hmm.
[05:31:05] <hayley> Another thing, I figure on a MCU if I let the user screw about, they should get an error rather than trying to update objects in ROM. So the slow path of the write barrier should also check for writes outside of RAM.
[05:31:54] <hayley> (Of course, the write barrier only happens for boxed things - updating a byte vector doesn't trap. Oh well, at least you can't get dangling references that way.)
[05:32:17] <gilberth> Don't you get a bus error when writing to ROM?
[05:32:20] <hayley> https://i.redd.it/wcn58dh3xxi71.png
[05:32:51] <hayley> Not on the Pi Pico apparently. Though I could load the image as read-only, sure.
[05:33:40] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:33:57] <hayley> IIRC writes are silently ignored. So I don't need a write barrier if I can stomach that. Hm.
[05:34:02] <gilberth> No no-way cache?
[05:34:05] <dave0> maw
[05:34:43] <gilberth> What about reading from WOM, write-only memory?
[05:34:51] <gilberth> Hello dave0!
[05:35:59] <gilberth> hayley: Depends on the MCU. The MCU, I used would never bus fault.
[05:36:02] <hayley> It only runs at -1.5GHz, why would it need a 0-way cache?
[05:36:34] <hayley> Oh, right, the barrier could also mark a card bitmap, so we don't want to go out of bounds on that.
[05:37:55] <dave0> hi gilberth ! space
[05:38:15] <gilberth> dave0: Thanks!
[05:38:39] <dave0> np :-)
[05:39:22] <gilberth> dave0: I need more coffee, you want some too?
[05:39:37] <dave0> yes please!
[05:39:45] <dave0> double espresso?
[05:40:28] <gilberth> Sure, I'll fire up the espresso maker. Just a minute.
[05:41:35] <dave0> nice!
[05:41:59] <dave0> i found a convenience mart that has $1 double espressos
[05:44:36] * gilberth makes the machine go brrtbrrbtrrr wwwwrrrrr pffff
[05:45:24] <gilberth> dave0: Here you go! Sorry, no lambda today, the cup is too small for that.
[05:46:10] <dave0> you are a master of the coffee machine!
[05:46:17] <dave0> thanks for the coffee gilberth !
[05:46:38] <gilberth> You're welcome!
[05:47:40] <hayley> https://www.youtube.com/watch?v=QomBOSjUSOA
[05:47:41] -ixelp- Bombers (Live 79) - YouTube
[05:47:51] <gilberth> dave0: The mart you speak of has a good espresso machine?
[05:48:07] <hayley> dave0 at 7-11 what will dave0 do
[05:48:11] <dave0> gilberth: eh it's not too bad but it's cheap!
[05:48:24] <gilberth> Heh.
[05:49:19] <gilberth> So, you could effort to grab one, when you're in the area?
[05:49:23] <hayley> Once I got a hot chocolate there, though IIRC I put milk rather than water (as it is just a cup with hot chocolate powder). No one stopped me.
[05:49:46] <dave0> hayley: you're allowed to :-)
[05:50:46] <gilberth> That is 7-11? A chain of marts?
[05:51:11] <dave0> i can't imagine they make lots of money on $1 coffees unless you buy a muffin or something too
[05:51:15] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[05:52:19] <dave0> gilberth: yup they're everywhere, and also home of the slushee
[05:52:35] <hayley> Though, eh, I may rather use a bytemap, as the space overhead is still acceptable (what, one byte per 256-byte card?), I don't have to do bit hackery, and as the olde-space is mark-sweep, I could rather treat the byte as a "reference count" and decrement it when sweeping.
[05:53:01] <gilberth> I bet it works out to draw customers into the shop. And once there, the incentive to buy more is there. Grocery stores do that all the time with stuff like dog food on sale.
[05:54:14] <kakuhen> wow ironclad took a while to compile
[05:54:19] <kakuhen> somehow compiling McCLIM was faster !
[05:54:37] <kakuhen> i shouldnt complain i guess, it still happened in under 20 seconds
[05:54:41] * gilberth immediatly spots more space.
[05:54:51] <dave0> gilberth: i buy coffee when it's on sale at the grocery store
[05:54:52] <hayley> The damn JVM uses a card map for the entire heap, so that it doesn't branch. But I don't feel like emitting a write on a machine with caches, and I'd require cards for ROM too.
[05:55:14] <hayley> https://shipilev.net/jvm/anatomy-quarks/13-intergenerational-barriers/ mentions it causes L1 misses, so I guess I will stomach the branch instead.
[05:55:15] -ixelp- JVM Anatomy Quark #13: Intergenerational Barriers
[05:56:02] <kakuhen> OK it looks like ironclad adds ~19 MB ram usage to my lisp image
[05:56:08] <gilberth> dave0: Me too. It lasts forever. I used to do that with my favorite brands of wine, too. And I used to have plenty of space at my evil house.
[05:56:12] <kakuhen> but when I compiled it for first time it was as high as +50 MB
[05:56:20] <recordgroovy> kakuhen: Which dependency are you using that needs ironclad?
[05:56:24] <kakuhen> None
[05:56:29] <recordgroovy> For your own project?
[05:56:33] <kakuhen> No
[05:56:41] <recordgroovy> for fun, or...?
[05:56:43] <kakuhen> I just recall last night seeing people talk about high memory usage of ironclad
[05:56:47] <kakuhen> so I decided to see the results on my own machine
[05:56:47] <gilberth> kakuhen: Why is it so huge for you?
[05:56:49] <recordgroovy> oh, yeah
[05:56:55] <kakuhen> gilberth: no idea
[05:57:04] <dave0> gilberth: what happened with you and your evil house? i think i remember you typing the other day that you are staying at your cousins place?
[05:57:05] <kakuhen> ccl first started with 8 mb ram usage, then exploded to 27
[05:57:13] <recordgroovy> Currently, ironclad is one of the biggest dependencies I have, and it's pretty annoying because it's tagged on fukamachiware that's *only* using it for SHA1 hashes, and that's it
[05:57:42] <kakuhen> if we had tree shakers this wouldn't be a problem, maybe
[05:58:07] <kakuhen> or maybe finding a way to split up ironclad into a bunch of subpackages, that we can do something like depending on ironclad/sha-hashes
[05:58:33] <kakuhen> i have no idea how ironclad is actually set up, so im just making naive and probably wrong guesses at what'd be a good approach to making it "smaller"
[05:58:37] <recordgroovy> Actually, there's a solution I'm working on
[05:58:56] <hayley> Another neat one in the series: https://shipilev.net/jvm/anatomy-quarks/11-moving-gc-locality/
[05:58:57] -ixelp- JVM Anatomy Quark #11: Moving GC and Locality
[05:59:22] <recordgroovy> I've been trying to get massung/sha1 that's already in Quicklisp into a more workable library, and then I can use that to convince fukamachi to switch to that via PR's.
[05:59:33] <gilberth> dave0: I still live at my cousin's place. It's better for me. We try to convince one of my nieces (21yo, student) to move into the evil house, as she has trouble at home. She and her mother don't get along well and she (the niece) doesn't like children. And her mother has a total of seven of them.
[05:59:59] <recordgroovy> Fukamachi seems to be pretty receptive to some other dependency-shaving I've been doing, so I reckon I have a more-than-zero chance he'll accept that, as well
[06:00:21] <kakuhen> does anyone here use roswell btw
[06:00:29] <gilberth> kakuhen: Usually I don't care, as I am used to just dump an image for me, with most of the regulary used libraries included.
[06:01:31] <kakuhen> im not too concerned about ram usage in a common lisp image anyway, unless it's a memory leak
[06:03:44] <gilberth> Still I wonder why ironclad is so huge. (It's 4.something MB for me). Does it inline and unroll loops like crazy?
[06:04:07] <kakuhen> i once attempted to make some kind of ui framework for a game I'm working on with a friend
[06:04:17] <kakuhen> it was the first time i managed to cause a memory leak with common lisp :<
[06:04:55] <kakuhen> i didnt want to touch the main rendering loop, so it would endlessly create my own ui objects
[06:04:59] <kakuhen> and memory usage would steadily increase
[06:05:31] <gilberth> McCLIM used to have a severe memory leak with incremental-redisplay.
[06:06:06] <kakuhen> oh also we have our own object-oriented "events API" now 
[06:06:15] <kakuhen> and the more i look at my commit where i introduced my UI stuff
[06:06:26] <gilberth> But, yes, I fear having memory leaks with my Cocoa-stuff on the C heap.
[06:06:29] <kakuhen> i noticed i was halfway there to the events API we now have, but not  quite there yet
[06:07:02] <kakuhen> it's also very early lisp code i wrote; ~3 months ago. I began using lisp about 4 months ago
[06:07:11] <kakuhen> the way i named things makes it very obvious i came from a language with a single namespace heh
[06:07:26] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 250 seconds)
[06:07:48] <gilberth> As for graphics, I need to create NextStep^WCore Foundation objects all the time.
[06:07:53] <recordgroovy> This is basically the one pul request blocking me from moving fukamachiware away from ironclad: https://github.com/massung/sha1/pull/5
[06:07:54] -ixelp- Move from dependency base64 to cl-base64 by samuel-hunter Â· Pull Request #5 Â· massung/sha1 Â· GitHub
[06:08:40] <kakuhen> gilberth: hold weak references to all of your NSCells. problem solved ;)
[06:08:41] <gilberth> I don't like systems using the "CL-" prefix.
[06:08:53] <kakuhen> visually they will appear VERY weird
[06:09:03] <kakuhen> when you hold weak reference to NSWindow and order it front, it is not active window
[06:09:11] *** Joins: razzy (~razzy@user/razzy)
[06:09:13] <kakuhen> i'm not sure why mac os has this behavior, but it just does.
[06:09:14] <gilberth> kakuhen: Heh.
[06:09:18] <recordgroovy> cl-base64 and base64 have a name conflict because both use the package name base64, d'oh
[06:10:11] <kakuhen> choose the "unintern-and-shadow" restart until it goes away :3c 
[06:10:23] <kakuhen> idk how cl packages work, so when package conflicts occur, i just bug my friend to fix it
[06:10:23] <gilberth> kakuhen: It's things like CTLine's for me.
[06:10:34] <recordgroovy> unhinged, lol
[06:10:40] <hayley> The name of the library is cl-decentralise2, but the systems are decentralise2-{system,client,connection,messages,acceptors}, and the packages are decentralise-{system,client,connection,message,acceptor}.
[06:12:40] <gilberth> I would prefer, if everything would be named with a reversed domain name in front. Use the new relative package^W^Wlocal nick names to make it bearable. Unfortunately FOO:BAR:BAZ was not thought of.
[06:13:59] <gilberth> The Lisp machine got it right. I mean: I'd like to load CLIM2, Free-CLIM, and McCLIM into one image, but still use the CLIM: prefix.
[06:14:52] <recordgroovy> how did they manage that, to load multiple systems that use the same package?
[06:16:04] <gilberth> Package names could be relative to another package. Think path names. So you could be in COMMON-LISP realm, or a ZETA-LISP realm, say.
[06:16:09] <hayley> Just give me a first-class global environment per system.
[06:17:20] <hayley> "LOL Hotspot, redundant store, killed two lines below" smh my head
[06:17:49] <gilberth> Ideally I also would like to load two different versions of the very same system.
[06:20:47] <gilberth> BTW who came up with this brain dead idea, that sub-systems should be separated by a slash?
[06:23:10] <kakuhen> what's wrong with that
[06:23:18] <kakuhen> i'm a bit brain dead myself so i don't know any better
[06:23:43] <gilberth> Can I put a slash into a path component?
[06:23:59] <kakuhen> as in logical pathname?
[06:24:35] <hayley> Time to do something fun, and remove callee-saves registers from SICL.
[06:24:47] <gilberth> Oh year, and I define a mapping for each system manually. Great. And map to what %hh escaped?
[06:25:16] <gilberth> No. I like to keep a ~/lisp/systems/ directory with a link farm to .asd files.
[06:25:49] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:26:42] <gilberth> But then ASDF is brain dead too. Or my setup. I load a specific .asd manually, yet REQUIRE would pick another. Why look for another system definition, when one is loaded already?
[06:29:18] <gilberth> Otherwise logical pathnames are a very useful facility.
[06:29:46] <hayley> https://www.youtube.com/watch?v=Ou4u4kOatck
[06:29:46] -ixelp- Summer '68 - YouTube
[06:30:01] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[06:31:09] <gilberth> Heh, in Closure you could say file://logicalhost/... --- Perhaps it's time to resurrect some of it.
[06:36:55] <hayley> Still, how fun that I get to remove code.
[06:37:30] <hayley> gilberth: I was thinking, if you make environments out of objects, then scalar replacement of aggregates and closure conversion are equivalent surely.
[06:42:40] <kakuhen> I love it when the configure script takes longer to run than the actual compilation of the software
[06:43:01] <kakuhen> "portable" operating system interface
[06:46:14] <hayley> https://twitter.com/shipilev/status/1428358860302028800 When sys > real time
[07:29:17] <gilberth> hayley: What do you mean by scalar replacement?
[07:29:44] <hayley> Think of taking a struct and decomposing it into scalar variables.
[07:30:33] <gilberth> As an optimization the compiler does? As C compilers would do with a struct? I see.
[07:30:34] <hayley> That process is pretty similar to deciding whether you need to make an object for the closure environment or not.
[07:30:41] <hayley> Yes.
[07:31:14] <lotuseater> so much to read back ..
[07:31:49] <gilberth> So, you agree that to say lexical environments are objects too, makes sense?
[07:32:20] <hayley> Yes.
[07:35:04] <hayley> Or, put another way, "inlining" the environment and "inlining" an object are one and the same.
[07:36:27] <gilberth> Sure. You get the latter for free :)
[07:37:15] <gilberth> And stack allocation, once you prove that an object cannot escape.
[07:37:57] <hayley> The JVM does SRAA and stack allocation comes from spilling, which seems like a good compromise.
[07:38:18] <gilberth> SRAA = ?
[07:39:04] <hayley> I mean SRoA, which is scalar replacement of aggregates. i.e. I am too lazy to write it all out.
[07:39:58] <gilberth> And too lazy to reach for the "o" away from the lhs of the keyboard. :-p
[07:40:15] <hayley> Indeed.
[07:41:09] <gilberth> Anyhow, I believe you're after a quite nice small, yet powerful, execution model here.
[07:42:28] <hayley> Yes.
[07:43:30] <gilberth> How will you call it? POP = prototype object processor? ;) Or stick a 'model' in there for POMP.
[07:44:27] <hayley> Gnuxie already called it the Utena virtual machine. But the language is unnamed, and my metacircular compiler will probably be called Zero Feet.
[07:44:35] <gilberth> After fifty years people will still complain, that it only can be interpreted.
[07:46:38] <gilberth> I would concentrate on the evaluation model first. Having a virtual machine beforehand sounds like doing last things first.
[07:47:14] <hayley> Not really, we have some idea of the evaluation model written down.
[07:48:28] <gilberth> Great! I'll be happy to peek at it once it's half-way done.
[08:09:38] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[08:15:55] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[08:27:24] *** Joins: nihaal (~nihaal@117.96.193.218)
[08:36:24] * hayley gets to rip out a whole bunch of code for call probabilities.
[09:18:50] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:19:35] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:27:46] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:28:17] <dave0> re maw
[09:31:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:31:30] <lotuseater> yay
[09:39:36] <lotuseater> how are you anyway?
[09:40:02] <lotuseater> the you means all people reading this
[09:40:11] <hayley> https://i.redd.it/qz7h8mclrxi71.jpg
[09:40:15] <dave0> i'm alright
[09:40:55] <dave0> i think i am too low-brow for hayley's memes
[09:41:33] <notzmv> https://www.youtube.com/watch?v=uP3robOYIKY you've seen this one already right hayley 
[09:41:33] -ixelp- {YTP} ~ Blue on the Other - YouTube
[09:45:18] <notzmv> also lmao that meme
[09:45:47] <lotuseater> she definitely can wear leather clothes
[09:46:38] <lotuseater> the meme reminds me of some South Park episode with a similar topic
[09:49:20] <notzmv> yeah I'm not a fan of leather but abigail looks  h u f f
[09:50:07] <lotuseater> >_>
[09:50:10] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 250 seconds)
[09:50:16] <notzmv> agree
[09:50:21] <notzmv> oops wrong window
[09:50:38] <lotuseater> hehe no problem, no log here
[09:50:47] <notzmv> I thought that's what you were getting at though :p
[09:51:57] <lotuseater> ah no not necessarily, just another neutral observation
[09:52:56] <notzmv> got caught being horny on main then :^(
[09:52:58] <notzmv> Sad!
[09:53:28] <lotuseater> I'm not. You?
[10:08:20] <lotuseater> hm making breakfast would be the right thing now
[10:12:02] <gilberth> The original is here: <https://www.youtube.com/watch?v=koud7hgGyQ8> For what it's worth.
[10:12:02] -ixelp- Social Constructs | Philosophy Tube - YouTube
[10:23:04] *** Joins: nihaal (~nihaal@117.96.193.218)
[10:34:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[10:42:47] <hayley> https://www.youtube.com/watch?v=7OT4NlUugLE
[10:42:47] -ixelp- Random (Live 79) - YouTube
[11:11:28] *** Joins: shka (~herr@109.231.62.239)
[11:22:22] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[11:26:30] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[11:35:23] *** Joins: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr)
[11:42:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:52:22] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[11:53:25] *** Joins: razzy (~razzy@user/razzy)
[12:02:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:04:00] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[12:07:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:07:36] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:09:42] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[12:14:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[12:14:31] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:37:10] *** Joins: makomo (~makomo@user/makomo)
[13:03:45] *** Joins: cpape (~user@2a01:4f9:c010:632d::1)
[13:11:27] *** Joins: notzmv (~zmv@user/notzmv)
[13:29:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[13:31:15] *** Joins: selwyn (~selwyn@user/selwyn)
[13:32:44] *** Joins: razzy (~razzy@user/razzy)
[13:33:01] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[13:34:22] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[13:35:36] *** Quits: amirouche (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[13:35:48] *** Joins: amirouche (~amirouche@user/amirouche)
[13:37:07] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[13:42:03] *** amirouche is now known as babelbot
[13:46:05] *** babelbot is now known as amirouche
[14:04:38] <gilberth> More lossage; <http://clim.rocks/gilbert/ellipses-1.svg> SVG ellipse rendering way off. I consider that a bug in the brain dead SVG specification. The major and minor axis, which I compute and need to use to specify an ellipse in SVG are show too, they are correct. Rendering is different in Firefox and Webkit.
[14:05:29] <shka> gilberth: what you are working on?
[14:05:58] <gilberth> shka: My SVG backend.
[14:06:05] <shka> for clim?
[14:06:23] <gilberth> Yes.
[14:08:43] <shka> interesting
[14:08:58] <gilberth> You could have looked at the <!-- Creator: --> comment :)
[14:08:58] <shka> maybe it could be used to draw svg plots and the likes?
[14:09:14] <gilberth> Sure, whatever you like.
[14:09:20] <shka> do you want to support animated SVGs?
[14:09:31] <shka> or is it out of scope
[14:09:56] <gilberth> That would entail extending the spec quite a bit.
[14:10:09] <shka> i see
[14:10:17] <shka> well, cool stuff
[14:10:22] <shka> good luck with that
[14:10:43] <hayley> Reject SVG, return to PostScript
[14:10:44] <shka> currently i am using plotly for making my plots
[14:10:45] <gilberth> My goal is to implement the spec first. We could talk about animated SVGs or for that matter animated GIFs later.
[14:11:08] <shka> but i wish i could also have svg backend
[14:11:10] <gilberth> hayley: PostScript can't do, what CLIM can.
[14:11:21] <kakuhen> hayley: %!
[14:11:26] <kakuhen> i support a return to postscript
[14:11:31] <hayley> Return to https://www.youtube.com/watch?v=Tr7Mbw9gLpk
[14:11:32] <shka> and the way i implemented vellum-plot allows for multiple plots
[14:11:32] -ixelp- HP 7475A Plotter and HPGL Demo - YouTube
[14:11:51] <shka> *multiple plotting backends
[14:11:55] <gilberth> kakuhen: It lacks an alpha channel.
[14:12:04] <kakuhen> Good. I hate transluency
[14:12:08] <kakuhen> It's the worst part of modern mac UI
[14:12:14] <shka> but!
[14:12:21] <gilberth> This is why I didn't bother with PS, while I have PDF.
[14:12:24] <shka> does clim allows for alpha channel?
[14:12:40] <gilberth> Of course it does.
[14:12:42] <kakuhen> regardless of color scheme, stupid translucent bars will eventually lay on top of a page with a color scheme that make the controls hard to distinguish
[14:12:50] <kakuhen> let's do away with the alpha channel
[14:12:50] <shka> gilberth: ok!
[14:13:49] <gilberth> kakuhen: It crops up when you want to mask an image by another shape.
[14:14:21] <kakuhen> make unofficial extension to postscript to add translucency
[14:15:09] <gilberth> CLIM allows for all that. (draw-design (compose-in (make-pattern-from-bitmap-file "foo.png") (make-ellipse 50 50 0 50 50 0))) e.g.
[14:15:21] <kakuhen> i'm too lazy to learn how clim works
[14:15:52] <kakuhen> with thqt said, I learned about Allegro CL's UI thingy and I can't find much screenshots of it online
[14:16:22] <gilberth> Well, CLIM has the the IN, OUT, and OVER Porter-Duff operators specified.
[14:18:16] <gilberth> shka: (compose-in +red+ (make-opacity 1/2)) gives you a half translucent red.
[14:19:03] <shka> gilberth: good to know, because i never could figure this out :D
[14:21:20] <hayley> kakuhen: It is probably going to be anti-CLIMactic anyway.
[14:22:02] <gilberth> shka: It's all here: <http://bauhh.dyndns.org:8000/clim-spec/13-4.html> ff, for the alpha channel.
[14:22:03] -ixelp- CLIM 2 Specification â 13.4 Opacity
[14:22:18] <shka> yeah
[14:24:02] <kakuhen> hayley: took me a while to understand >.<
[14:24:16] * hayley only has one joke
[14:30:20] <kakuhen> can i purchase the intellectual property rights of your joke
[14:30:43] <hayley> For $69,420 you can
[14:30:46] <selwyn> shka: remind me why you use plotly instead of gnuplot or anything else
[14:31:08] <kakuhen> $69,420 zimbabwe dollars?
[14:31:15] <kakuhen> deal
[14:31:52] * hayley only has income measured in Euros so decides to change to â¬69,420
[14:32:14] <kakuhen> that's too expensive for me, unfortunately
[14:32:16] <kakuhen> that's like $120,000
[14:32:40] <kakuhen> (yes, 1.3 ~ 2 in my head; thank my differential equations course)
[14:32:57] <selwyn> https://www.youtube.com/watch?v=-w3iPFl-cfI
[14:32:58] -ixelp- NINE-HUNDED DOLLARYDOOS - YouTube
[14:33:03] *** Joins: razzy (~razzy@user/razzy)
[14:33:08] <dave0> tobias!
[14:33:14] <hayley> https://www.youtube.com/watch?v=ULeDlxa3gyc
[14:33:15] -ixelp- Harry Enfield - Loadsamoney (Doin' Up the House) - YouTube
[14:33:57] <selwyn> classic
[14:34:33] <dave0> and hayley is even an australian!
[14:34:37] <dave0> works on so many levels
[14:35:28] <selwyn> i love that episode so much
[14:35:56] <selwyn> https://www.youtube.com/watch?v=4JQK4bH0J-o
[14:35:57] -ixelp- Mr Prime Minister the simpsons - YouTube
[14:36:21] <dave0> https://youtu.be/fH_-dQNqJZ0
[14:36:22] -ixelp- That's Funny For So Many Reasons (The Simpsons) - YouTube
[14:36:28] <dave0> not that episode but still funny
[14:38:42] <dave0> dispariging the boot is a bootable offense!
[14:39:23] <gilberth> hayley: HPGL isn't too far fetched. I once had a large format HP pen plotter, like this one <https://www.youtube.com/watch?v=_8N747C-z9w> great for schematics.
[14:39:23] -ixelp- HP 7585B pen plotter in action - YouTube
[14:40:04] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[14:40:11] <gilberth> Though these days those plotters are just inkjet printers.
[14:41:11] <hayley> This laser printer I have on my desk is nice enough, I suppose.
[14:41:44] <gilberth> Can it print on DIN A1?
[14:41:46] *** Joins: razzy (~razzy@user/razzy)
[14:42:03] <hayley> A4 only.
[14:42:18] <gilberth> A Gerber backend would also be nice.
[14:43:10] <hayley> So, this printer is specced to print at 62.7 dB on quiet mode, and it says anything over 63 dB is too distracting to put in an office.
[14:43:35] <hayley> I suppose it's in spec, but very barely.
[14:43:57] <gilberth> So you have .3dB left for a conversation.
[14:45:32] <hayley> Also, they spec in B rather than dB, which is a bit weird. But it works.
[14:46:02] <gilberth> I miss my laser printer. My cousin only has a cheap inkjet printer connected via USB to a machine which doesn't want to talk to the Wifi router. And not supported by newer operating systems. So to print here, it's sneaker net.
[14:46:42] <shka> linux interestingly enough has better support for printers then other OS
[14:46:53] <shka> especially older printers
[14:47:13] <gilberth> hayley: I always cringe when I read datasheets and a propergation delay is given in nano-Siemens.
[14:47:14] <shka> i am running 10+ years old printer here
[14:47:56] <gilberth> shka: I don't care, my laser printer speaks PS over port 9100 IIRC. You could also send PDF there directly with nc.
[14:48:20] <shka> yeah, but this is reserved for more expensive printers
[14:48:51] <hayley> Yes, 9100.
[14:49:02] <gilberth> It wasn't too expensive. Laser printers got cheap. As I was a student I could have never afforded one.
[14:49:15] <hayley> Once /me sent some bad PS code to the school printer and wasted a few pages.
[14:49:54] <gilberth> You still could use the back of the paper for notes.
[14:50:13] <gilberth> Unless it was a duplex device.
[14:56:25] <kakuhen> CUPS just works
[14:56:36] <kakuhen> maybe it's because im super young, but not a single printer has failed with CUPS for me
[14:56:42] <kakuhen> if i ever encounter such a printer, i will not use it
[14:57:29] <selwyn> i remember my first printer at age 6 which used thermal paper
[14:59:03] <pl> kakuhen: you probably didn't encounter any GDI printer
[15:00:24] <selwyn> https://www.amazon.co.uk/Vtech-VT35-A4-Thermal-Printer/dp/B002AL0RL4 
[15:00:55] * gilberth just won't by such a device, which guaranteed to stop working in a few years due to missing driver software.
[15:01:24] <pl> it's why I have a ban on any and all lexmark devices
[15:02:54] <gilberth> selwyn: Is that a printer for kids?
[15:03:00] <selwyn> yes
[15:03:10] <selwyn> though an adult should also be able to operate it :)
[15:03:36] <gilberth> pl: I only buy HP printers.
[15:03:45] <selwyn> i used it with a kids laptop that had drawing software as well as a basic implementation
[15:03:50] <selwyn> first programming experience on that
[15:04:30] <gilberth> selwyn: Nice.
[15:04:48] <kakuhen> i haet hp printers
[15:04:48] <selwyn> i cannot say that i was very good at that time lol
[15:04:53] <kakuhen> we have one at my house but i dont like it
[15:05:15] <kakuhen> i bought my dad a laser printer because he was going to print many black and white pages, and did not want to constantly buy ink, it was surprisingly good, and it takes quite a while for the toner to deplete
[15:05:22] <gilberth> selwyn: I am bit surprise that there is hardware for kids.
[15:06:12] <selwyn> i mean, they probably donÂ´t bother to make them these days
[15:06:19] <kakuhen> my favorite hardware as a kid was an abacus
[15:06:24] <kakuhen> it wasn't a real abacus sadly
[15:06:25] <selwyn> but back when a pc was a big investment, it would be silly to buy a kid one
[15:06:34] <selwyn> and we didnÂ´t have a pc at the time anyway
[15:06:51] <gilberth> kakuhen: And then, why do you hate HP printers then?
[15:07:06] <kakuhen> i forgot why
[15:07:07] <selwyn> http://www.computinghistory.org.uk/det/30249/Vtech-I-T-Laptop/ here it is
[15:07:08] -ixelp- Vtech I.T. Laptop - Computer - Computing History
[15:07:41] <kakuhen> but the laser printer is not an hp printer, and i like it
[15:08:10] <selwyn> it could also send email, but unfortunately we had no dial-up
[15:09:07] <gilberth> selwyn: Well, I had my first programming experience in early 80s. So all there was, were those home computers you would hook up to a TV.
[15:09:28] <selwyn> right
[15:10:26] <selwyn> i have a bbc micro
[15:12:33] <gilberth> I found mine on the page you posted :-)
[15:12:58] <gilberth> http://www.computinghistory.org.uk/det/32404/Vtech-Laser-Color-Computer-200/
[15:12:59] -ixelp- Vtech Laser Color Computer 200 - Computer - Computing History
[15:13:42] * hayley isn't olde, got a G3 iBook first. Then learnt programming on a early 2000s second hand Athlon machine.
[15:13:49] <gilberth> Taught myself BASIC from the manual.
[15:14:21] <hayley> There was a potentiometer inside which changed the fan speed. It would shut down randomly, so my dad turned the pot to have the fan run faster, and it stopped doing that.
[15:15:09] <gilberth> A manually regulated fan?
[15:15:14] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:15:28] <hayley> Yes.
[15:15:51] <hayley> But I got to see my aunt's old desktop from '99, which was passively cooled. So relatively new for PCs, I suppose.
[15:16:09] <gilberth> Did it have a TURBO button?
[15:16:21] <hayley> Nope.
[15:16:37] <hayley> Not that old.
[15:16:51] <shka> turbo button :D
[15:17:02] <shka> the silliest aspect of the old pcs
[15:17:16] <hayley> IIRC the latter ran at 250MHz, and the former had a floppy drive and reset button guarded by one of those cylindrical key locks.
[15:17:40] <gilberth> The legend was that some software would expect those 4.77MHz of the XT.
[15:17:43] <hayley> Amusingly, the former ran Minecraft relatively well, and it took a while to find another hand-me-down machine which did as well.
[15:18:51] <hayley> Still took a while to find a reasonable GPU. And my dad had convinced me the GPU memory type (e.g. GDDR5) had to match up with the CPU memory type (e.g. DDR4) which probably didn't help.
[15:19:39] <gilberth> lol
[15:20:26] <gilberth> Must colours match too?
[15:21:13] <hayley> AIUI the machines were disposed from his work, so it made sense that they were shit. Downgraded them from Windows 7 to XP cause they were that slow.
[15:23:01] <hayley> Then the last one I didn't pay for was a Compaq prebuilt, which wasn't notably awful, but it was damn glorious to go from a Pentium to a 5 years newer i5. Funnily enough he now uses the gutted machine, with all "new" components but the same old case.
[15:23:52] <hayley> (He only got it cause he thought I ruined it by installing Linux...somehow, and wanted to use Photoshop. But eventually I got money for the machine I am typing to you on.)
[15:24:49] <gilberth> What was your first programming language?
[15:25:54] <dave0> gilberth: ehehe basic
[15:25:54] <hayley> Either batch script or 8086 assembler via DEBUG.COM. Not joking.
[15:27:06] <hayley> Fun that I knew enough assembler to do the appropriate DOS syscall to change video mode, the Windows-DOS emulation would oblige and draw shit full-screen on the primary school library computers.
[15:27:27] <gilberth> hayley: That's hard core. Though after my dad took the BASIC machine away, I was left with 8085 machine code. No assembler.
[15:28:12] <hayley> But eventually they wanted to make sure the library computers were used for reading (as most people would play video games on them). So a friend, who I consider to be a great hacker but went the C route, and I would cover with looking up olde computer lore.
[15:28:55] <hayley> Then C (gave up, too hard), Python (gave up, too slow), Java (both!) and then CL.
[15:29:34] <gilberth> You're kidding. C isn't hard.
[15:29:50] <hayley> Or rather on my crappy machine, the Java IDE (Eclipse then?) was terribly slow. So was Visual Studio FWIW.
[15:30:04] <hayley> If you are 11, it is hard.
[15:30:07] <selwyn> yes
[15:30:29] <gilberth> At 11? Nope.
[15:30:35] <selwyn> i tried to learn java at that age it was so difficult
[15:31:10] <gilberth> hayley: You could have tried vintage Turbo C under DOS. Very nice IDE for its time.
[15:31:12] <selwyn> would say that i only really got it at age 12
[15:31:33] <hayley> Oh, yes, QuickBASIC was somewhere in that list.
[15:32:17] <hayley> But I would argue C is hard to write if you have no idea what you are doing yet, and hard to write when you do know what you are doing.
[15:32:31] <gilberth> When I am bored, I'll write a Turbo C'ish Lisp. After all there was Turbo Prolog, which I never tried.
[15:32:36] <selwyn> i wonder if there are some downsides to learning programming languages that early
[15:33:08] <hayley> selwyn: 1. You have no life
[15:33:27] <gilberth> hayley: OK, granted I came from Pascal to C.
[15:34:02] <selwyn> i do wish that i had spent more time ages 12-16 on something other than applets tbh
[15:34:08] <selwyn> but i enjoyed it at the time of course
[15:34:10] <hayley> And any non-trivial C program apparently goes to https://www.youtube.com/watch?v=tbHix56qfG8
[15:34:11] -ixelp- The Aircrash Bureau - YouTube
[15:34:19] <gilberth> hayley: Would I had a life, even when I wouldn't have hacked so early?
[15:34:33] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[15:35:14] <hayley> Though when I was like 7 some friends would come over to play free games I downloaded.
[15:35:22] <hayley> Huh, gamehouse.com still does something these days.
[15:36:22] * gilberth had no games, when others had their C64, so no "friends" came over.
[15:36:53] *** Joins: random-nick (~random-ni@87.116.177.176)
[15:38:17] <dave0> i went to my friends who had a c64 and he had boulderdash... that started a life-long obesssion
[15:38:24] <pjb> hayley: nah, C is not hard to write. You just start obj cons(obj a, obj d){ â¦ } obj car(objc k){ â¦ } â¦ and then it's as easy as in lisp car(cons(c_fix(32),c_sym(NIL))) ;-)
[15:39:49] <gilberth> We had Lisp at school, but I had none at home, so I wrote my own.
[15:41:17] <hayley> .oO( I am writing my own, provided MIR counts as Lisp. Though I was stupid and thought none of the Lisp compilers did compile, so I tried to write a few shitty batch compilers early on. )
[15:42:42] *** Joins: razzy (~razzy@user/razzy)
[15:43:13] <hayley> "YAFFL is a statically typed Lisp which compiles to LLVM intermediate code. Cause of my laziness and also LLVM internals, it looks kinda like Rust,  especially with type names (eg `i(number)` for integers)."
[15:43:18] <hayley> brb I am going to kill my prior self
[15:43:34] <selwyn> hahaha
[15:43:48] <hayley> YAFFL stands for Yet Another Fucking Fad Language btw.
[15:44:04] <selwyn> tom scott does programming videos sometimes
[15:44:15] <hayley> $ rm -rf yaflc yaffl2 yafl
[15:44:31] <hayley> With the development of Micro-Utena and Zero Feet hopefully I can forgive myself.
[15:45:47] <hayley> https://www.youtube.com/watch?v=QomBOSjUSOA â average Micro-Utena enjoyer
[15:45:48] -ixelp- Bombers (Live 79) - YouTube
[15:45:54] * gilberth wrote an 8085 assembler, for his dad to use, with an Turbo C'ish IDE for DOS and called it "GLAS".
[15:46:10] <gilberth> Gilbert's Little Assembler :-)
[15:46:43] <gilberth> He used it until he died.
[15:47:11] <hayley> .oO( In case the joke is not gotten, there are a lot of hot air balloons in Smalltalk. But a compiler works with a damn machine and thus it "flies at zero feet". )
[15:48:10] <gilberth> So very unlike aeth's project.
[15:48:44] <hayley> Yes, though a different lineage.
[15:49:51] <hayley> I think I also designed the "Protocol Building Language" which compiled to CL and thus was more interactive. More Smalltalkish, though it used a(b c d) syntax for calls.
[15:49:54] <gilberth> Good that you didn't came up with "six feet under".
[15:51:35] <hayley> Now my compilers have CL syntax (boring) or basically CL syntax, i.e. (a: b c d)
[15:51:36] <gilberth> hayley: Half-way M-expressions and S-expressions? That would make it P-expressions.
[15:52:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[15:53:01] <gilberth> And the ASCII code for P is 80. Hmm.
[15:53:36] <hayley> .oO( Tubeway Army wrote an album called Replicas, but none called Federations. Go figure. )
[15:54:25] <gilberth> Anyhow, I'll seek some rest.
[15:55:03] <hayley> Though I guess I also have the privilege of designing a standard library too, would I end up self-hosting. Guess CL is fine, though I would end up making map: generic (because well, how can't I with message passing), and probably introduce a "real" set rather than a hash table with bogus values. Oh, and immutable vectors so we can pass them around safely.
[15:56:04] <hayley> But, if cheap, immutable vectors can be made by wrapping mutable ones, and sets can be made by wrapping maps.
[15:59:27] <hayley> And I think I would add both :test and :hash-function so that we don't get in trouble with only one .equals() and one .hashCode() or whatever.
[16:26:16] *** Joins: nihaal (~nihaal@117.96.193.218)
[16:39:36] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:54:37] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 252 seconds)
[17:06:48] <hayley> https://www.youtube.com/watch?v=EgKoBKr8yNE
[17:06:49] -ixelp- Station to Station (Live Nassau Coliseum '76) - YouTube
[17:07:02] <shka> i think that python3 did the right thing with the sets and dicts
[17:07:11] <shka> where dict is an extension of set
[17:07:52] <selwyn> python3 did the right thing?
[17:08:01] <selwyn> stop the presses
[17:08:10] <shka> yeah, and it is me who is calling it
[17:08:17] <shka> so it is something!
[17:08:26] <selwyn> shka: how much are they paying you then :p
[17:08:26] <pjb> gilberth: half-way is called clojure ;-)
[17:08:47] <hayley> Oh, also immutable and mutable sets and maps. Which means you have to have a good GC, which would make for a good benchmark as no one implements generational GC.
[17:08:58] <shka> selwyn: nothing, i am afraid
[17:09:08] <hayley> (Well, any benchmark would be good, as no one implements a compiler...)
[17:09:21] <shka> my only loyalty is to fairness and truth 
[17:09:23] <shka> :P
[17:09:43] <hayley> Guido Van Rossum pays shka $13,337/month
[17:10:13] <shka> barely covers hookers and cocaine so it does not count
[17:10:33] <shka> besides, Guido is not involved with python now
[17:10:41] <shka> not anymore
[17:10:51] <shka> the walrus operator broke him
[17:12:03] <selwyn> https://www.youtube.com/watch?v=-eDOJ4L0Edk
[17:12:04] -ixelp- The Big Lebowski - Lenin - YouTube
[17:22:40] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[17:24:21] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:26:21] *** Joins: cranium (~cranium@user/cranium)
[17:39:55] *** Joins: razzy (~razzy@user/razzy)
[17:43:47] <hayley> One redeeming feature: YAFFL was going to be licensed under the Peer Production License, which probably dates it to early Nettle, i.e. late 2017 I guess?
[17:54:29] <White_Flame> shka: how so?  the only property that sets & dicts actually share are unorderedness.  They don't even have the same API
[17:55:34] <White_Flame> although if you treat a key/value pair as an entry it does get closer
[17:55:51] <shka> White_Flame: in python or in general?
[17:55:57] <White_Flame> generally speaking
[17:56:23] <shka> so i think that this is a good idea, because you can consider dicts to be also sets
[17:56:39] <shka> because both hold keys, dicts also associate values
[17:56:58] <shka> so for the purpose of querying, dict is a set+
[17:57:08] <White_Flame> hmm, I'd say that view is that a set is like a dict-
[17:57:19] <shka> well, ok
[17:57:30] <shka> anyway, the main difference is insert into dict
[17:57:37] <shka> which also needs a value
[17:57:51] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[17:58:04] <shka> deletion? same
[17:58:20] <shka> so yeah, i think that python approach is reasonable here 
[17:58:50] <White_Flame> yeah, the view that the dict value is basically a metadata hanger-on to a set key is interesting
[17:59:05] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[17:59:12] <shka> useful as well
[17:59:19] <shka> anyway, i don't even like python
[17:59:30] <shka> but yes, here i agree
[17:59:33] <White_Flame> it isn't super clean, but it's a semantic perspective I hadn't considered
[18:00:08] <shka> oh, you were approaching from the implementation perspective?
[18:00:26] <White_Flame> well, from a "set is a special case of dict" vs "dict is a special case of set"
[18:00:38] <White_Flame> which one "inherits" from the other
[18:00:48] *** Joins: razzy (~razzy@user/razzy)
[18:01:00] <White_Flame> obviously in CL, sets are assumed to be special cases of maps
[18:01:57] <White_Flame> hmm, no not really even there, because there are list-based sets in the standard
[18:02:57] <White_Flame> set-difference and all that jazz
[18:03:41] <gilberth> There are also list based maps.
[18:03:49] <White_Flame> yep, alist/plist
[18:04:02] <White_Flame> but those aren't really compatible with list-based set operations
[18:04:34] <White_Flame> maybe with :key #'car for alists
[18:04:58] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[18:05:19] <gilberth> Mathematically arrays could also be viewed special maps.
[18:05:26] <White_Flame> yep
[18:06:02] <White_Flame> I kinda like javascript's view on array/map equivalence
[18:06:20] <White_Flame> where array is technically just an optimization
[18:07:03] <White_Flame> and I like python's duality of positional vs dict-named parameters to functions
[18:07:05] <hayley> <TLA+> best I can do is functions, take it or leave it
[18:08:06] <gilberth> Functions are also maps.
[18:08:18] <White_Flame> pure functions can be
[18:08:43] <gilberth> Yep. The others would be procedures ;-)
[18:08:56] <White_Flame> hard to consider a defun that returns (values) as any sort of sensible map ;)
[18:09:24] <White_Flame> also "map" in the datastructure sense means the ability to add/remove/change key/value pairings, not just read them
[18:09:33] <gilberth> Well, at least it is defined over some domain.
[18:10:45] <gilberth> Could be undefined for some arguments. This would then be a set again.
[18:11:48] <gilberth> White_Flame: It's then just a read-only map.
[18:15:12] *** Joins: nihaal (~nihaal@117.96.193.218)
[18:16:44] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[18:17:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:25:50] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[18:27:46] *** Joins: razzy (~razzy@user/razzy)
[18:28:22] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:32:41] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[18:41:12] *** Joins: razzy (razzy@user/razzy)
[18:59:38] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[19:01:33] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[19:23:21] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 248 seconds)
[19:27:28] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[19:57:26] *** Joins: nihaal (~nihaal@117.96.193.218)
[20:07:28] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[20:12:07] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 245 seconds)
[20:16:45] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[20:28:23] <amirouche> https://www.youtube.com/watch?v=hcJ34wp41hI
[20:28:24] -ixelp- Frenic - Database Doom (Official Video) - YouTube
[20:39:11] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.2)
[20:57:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[20:59:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:00:06] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[21:09:26] *** Joins: christophergray (~christoph@186.151.158.242)
[21:13:59] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[21:19:20] <shka> amirouche: nice
[21:24:34] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 240 seconds)
[21:28:36] *** Joins: mariari (~mariari@user/mariari)
[21:28:50] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[21:33:21] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[21:50:04] *** Quits: christophergray (~christoph@186.151.158.242) (Quit: WeeChat 3.2)
[21:50:05] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[22:04:13] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[22:11:53] *** Quits: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr) (Ping timeout: 248 seconds)
[22:52:58] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[23:15:57] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[23:35:05] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 248 seconds)
