[00:29:26] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[00:30:21] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[00:45:37] *** Joins: coot (~coot@213.134.190.95)
[00:48:07] *** Joins: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[00:49:56] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 250 seconds)
[01:16:23] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:20:11] *** Quits: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot_)
[01:30:29] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[01:31:36] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[01:32:13] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[01:48:28] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[02:04:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:18:00] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[02:33:10] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[02:34:05] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[02:53:44] *** Joins: TakenBrandi (~TakenBran@104.220.20.37)
[02:55:43] *** Quits: TakenBrandi (~TakenBran@104.220.20.37) (Client Quit)
[02:56:03] *** Joins: takenbrandi (~brandi@104.220.20.37)
[02:58:57] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[03:18:06] *** Parts: takenbrandi (~brandi@104.220.20.37) ()
[03:33:01] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[03:36:05] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[03:37:56] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[03:58:45] *** Joins: dextaa9 (~DV@user/dextaa)
[03:59:29] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 250 seconds)
[03:59:29] *** dextaa9 is now known as dextaa
[04:19:06] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[04:30:06] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[04:37:04] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[04:41:29] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[04:48:44] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[05:38:20] *** Joins: vicfred (~vicfred@user/vicfred)
[06:06:04] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:44:45] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[07:13:16] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:14:32] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:54] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[07:33:49] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[07:39:07] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[07:43:57] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[08:10:15] *** Joins: coot (~coot@213.134.190.95)
[09:09:42] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (EOF))
[09:16:25] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[09:50:03] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:26:20] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[10:26:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[11:46:09] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[13:18:17] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[13:41:26] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:11:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:26:05] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:26:15] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:33:59] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[16:34:45] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[17:01:04] *** Quits: sshine (~simon@zhen.eta.solutions) (*.net *.split)
[17:01:04] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[17:01:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[17:01:04] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[17:01:04] *** Quits: qwd (~qwd@185.203.114.234) (*.net *.split)
[17:01:04] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[17:01:04] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[17:02:30] *** Joins: sshine (~simon@zhen.eta.solutions)
[17:02:30] *** Joins: derelict (derelict@user/derelict)
[17:02:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:02:30] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[17:02:30] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[17:02:30] *** Joins: sclv (sid39734@haskell/developer/sclv)
[17:02:30] *** Joins: qwd (~qwd@185.203.114.234)
[17:02:30] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[17:02:30] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[17:02:30] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[17:02:30] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[17:03:16] *** Quits: qwd (~qwd@185.203.114.234) (Max SendQ exceeded)
[17:04:35] *** Joins: qwd (~qwd@185.203.114.234)
[17:37:28] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:41:14] *** Joins: coot (~coot@213.134.190.95)
[18:18:57] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[18:39:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:40:15] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:56:23] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:30:38] *** Joins: vicfred (~vicfred@user/vicfred)
[19:36:26] *** Joins: coot (~coot@213.134.190.95)
[19:37:14] *** Quits: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net) (Quit: WeeChat 3.3)
[19:37:33] *** Joins: yushyin (UUdtykrwRM@mail.karif.server-speed.net)
[19:45:38] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[19:46:12] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[19:49:16] *** Joins: sander (~sander@user/sander)
[20:01:00] *** Joins: Guest8 (~Guest8@103.159.184.221)
[20:01:03] *** Quits: zaquest (~notzaques@5.130.79.72) (Read error: Connection reset by peer)
[20:03:04] *** Quits: Guest8 (~Guest8@103.159.184.221) (Client Quit)
[20:11:04] *** Joins: yrlnry (~mjd@67.205.255.173)
[20:12:04] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:18:04] <yrlnry> Suppose I Have a do-block in some complicated monad, and it contains`var <- insert $ (Person name)`.  I would like to refactor the expression into a function call so that I can write it as `var <- newPerson name`.   I think I ought to be able to do this without having to understand which monad the <- is operating in, maybe by a pure syntactic transformation.
[20:18:49] <yrlnry> But when I tried simply `newPerson name = insert $ Person uname`, there was a complex type error that mentioned specific components of the original type:
[20:18:53] <reactormonk[m]> Usually works.
[20:18:53] <reactormonk[m]> Yeah, try copy/pasting the arguments out, and let your IDE tell you the expression
[20:19:04] <yrlnry>     • Couldn't match type ‘BaseBackend backend0’ with ‘SqlBackend’
[20:19:04] <yrlnry>         arising from a use of ‘insert’
[20:19:04] <yrlnry>       The type variable ‘backend0’ is ambiguous
[20:19:04] <yrlnry>     • In the expression: insert $ Person uname
[20:19:21] <yrlnry> This is with `newPerson` delcared with a type hole.
[20:19:55] <reactormonk[m]> Write `var <- _` and comment out your function to get the type you gotta put on your function.
[20:20:02] <yrlnry> The inferred type for newPerson is: ‘String
[20:20:02] <yrlnry>                       -> transformers-0.5.6.2:Control.Monad.Trans.Reader.ReaderT
[20:20:02] <yrlnry>                            backend0 m0 (Key Person)’
[20:20:23] <yrlnry> Surely I don't have to actually declare `newPerson` with this complicated type?
[20:20:33] <yrlnry> Thee ought to be a more general one, no?
[20:20:35] <merijn> oh, persistent
[20:20:53] <merijn> The problem is that insert infers a bunch of stuff based on it's argument type
[20:21:11] <merijn> By splitting it off into a new function the inference breaks
[20:21:34] <merijn> Basically, the way you use "var" helps the inference for "insert"
[20:21:45] <merijn> By moving insert into it's own binding, that link no longer exists
[20:21:58] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:22:28] <yrlnry> Which part is it having trouble inferring?
[20:24:28] <yrlnry> (The inferred type for the `_` in `var <- _` is:
[20:24:38] <yrlnry>         _ :: transformers-0.5.6.2:Control.Monad.Trans.Reader.ReaderT
[20:24:38] <yrlnry>                SqlBackend
[20:24:38] <yrlnry>                (monad-logger-0.3.36:Control.Monad.Logger.NoLoggingT
[20:24:38] <yrlnry>                   (resourcet-1.2.4.3:Control.Monad.Trans.Resource.Internal.ResourceT
[20:24:40] <yrlnry>                      IO))
[20:24:43] <merijn> yrlnry: So, the inferred type for "insert" is "ReaderT backend0 m0 (Key Person)", but *only* if "BaseBackend backend0 ~ SqlBackend" (i.e. BaseBackend, a type level function, must return SqlBackend for backend0"
[20:24:43] <yrlnry>                a0
[20:24:46] <yrlnry>       Where: ‘a0’ is an ambiguous type variable
[20:25:09] <merijn> yrlnry: The problem is that GHC does not have enough information to proof that that equality holds
[20:25:47] <yrlnry> Where should the close parenthesis be in your explanation?
[20:26:08] <yrlnry> Oh, at the very end.
[20:26:15] <merijn> oh, at the end, sloppy typing :p
[20:27:05] <merijn> yrlnry: So, one way to fix the issue is by simply writing the type out as: "newPerson :: (Monad m, BaseBackend be ~ SqlBackend) => ReaderT be m (Key Person)"
[20:28:17] <yrlnry> Oh, very useful.  Thanks.  And you know that because it says "Couldn't match type ‘BaseBackend backend0’ with ‘SqlBackend" ?
[20:28:50] <merijn> yeah
[20:29:24] <yrlnry> Why is the type `ReaderT be m` and not something like String -> ... ?
[20:29:39] <merijn> (the "BaseBackend is a type level function" stuff I just kinda happen to know from working with persistent a bunch and hacked on the backends)
[20:30:03] <merijn> yrlnry: oh, you're right, should be "String -> ReaderT be m (Key Person)" (possibly Text instead of String?)
[20:30:45] <yrlnry> Awesome, I guessed a right answer on my own, that's what I just wrote.
[20:35:27] <yrlnry> The type ended up being newPerson :: (Monad m, BaseBackend be ~ SqlBackend, PersistStoreWrite be, MonadIO m) => String -> ReaderT be m (Key Person) ` which is a lot less crazy-seeming.  Thanks for your help.
[20:45:43] <merijn> The heavy reliance on typeclasses in persistent can get some crazy errors, yeah
[20:45:51] <merijn> Monad m is redundant
[20:45:56] <merijn> MonadIO has Monad as superclass
[20:47:01] <yrlnry> I wondered about that, thanks.
[21:00:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[21:00:29] *** Quits: jespada_ (~jespada@85.255.234.170) (Quit: Textual IRC Client: www.textualapp.com)
[21:13:21] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[21:18:28] <yrlnry> I have `records <- decode HasHeader contents` which does not compile, producing an error message that says :
[21:18:30] <yrlnry>     • Perhaps you want to add ‘HasHeader’ to the import list
[21:18:30] <yrlnry>       in the import of ‘Data.Csv’ (trycsv.hs:1:1-45).
[21:18:57] <yrlnry> I do have HasHeader in the import list, but I suspect it is importing the data type HasHeader, not the value constructor HasHeader.  Is that right?
[21:19:21] <geekosaur> type constructor but not data constructor. change the import to `HasHeader(..)`
[21:19:30] <yrlnry> great, thanks.
[21:57:42] *** Joins: coot (~coot@213.134.190.95)
[22:03:15] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[22:03:35] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[22:08:09] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:09:35] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:35:52] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:00:14] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[23:24:42] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[23:26:14] *** Joins: Pickchea (~private@user/pickchea)
[23:32:31] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[23:46:03] *** Joins: coot (~coot@213.134.190.95)
