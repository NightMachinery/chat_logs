[00:01:12] *** Joins: cousteau (~cousteau@user/cousteau)
[00:01:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[00:07:24] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[00:09:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[00:15:28] *** Joins: soul-d (~uknown@user/soul-d)
[00:16:28] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[00:18:16] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[00:18:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[00:18:50] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[00:20:52] <dan_pena> I want to store a code : 00101, firstly I was thinking about an array of int [0, 0, 1, 0, 1]. But now I'm thinking about setting bites in an int. (I know that the max size is 32 bites so it's safe).
[00:21:14] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[00:21:38] <dan_pena> Could it be a better idea ?
[00:21:56] <james[m]123456> What about a boolean array?
[00:22:17] <james[m]123456> Would take up less space.
[00:22:53] <nomagno> james: Sounds like taking a gamble for the compiler to optimize it away
[00:23:16] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35) (Ping timeout: 250 seconds)
[00:23:26] <nomagno> dan_pena: You probably want to use a bitmask
[00:23:29] <nomagno> If you want to make it space-efficient, anyways
[00:24:32] *** Quits: kit_ten (~u0_a391@2600:380:a43d:1c52:7818:8bea:e74b:70b) (Ping timeout: 240 seconds)
[00:25:17] <dan_pena> nomagno: my problem is like in this 00101 if I set that in an int, how to know that I need to stop after the 5 bit
[00:25:26] <dan_pena> you see what I mean?
[00:26:06] <nomagno> dan_pena: You want to use bitshifting
[00:26:17] <dan_pena> or I should store the int with the code and an int being the mask
[00:26:19] <dan_pena> no?
[00:27:09] <dan_pena> nomagno: yeah but I need to know that I need to stop bitshifting after the 5 bit and not continue until 32
[00:28:52] <zwr> don't set the value bit by bit just do it all at once
[00:28:53] <nomagno> int myvar = 0; for(int i = 0; i < 5; i++){ myvar = myvar | (1 << i); }; printf("Decimal representation, should be 5: %i\n", myvar);
[00:29:01] <nomagno> For loops
[00:29:08] <nomagno> Basic imperative control flow
[00:29:17] <nomagno> ,cc int myvar = 0; for(int i = 0; i < 5; i++){ myvar = myvar | (1 << i); }; printf("Decimal representation, should be 5: %i\n", myvar);
[00:29:20] <candide> nomagno: Decimal representation, should be 5: 31
[00:29:31] <nomagno> I clearly messed this up.
[00:29:46] <nomagno> Oh I set all bits
[00:29:50] <zwr> if you want a decimal representation of 5 just do `int myvar = 5;`
[00:29:59] <dan_pena> nomagno: no but here you are based on the fact that it's size 5. But for me it can goes from 1 to 32
[00:30:09] <zwr> that does create the bit pattern `00101` in the lower 5 bits
[00:30:15] <nomagno> 11111 -> 31, indeed
[00:30:28] <cousteau> dan_pena: easiest option is an array of integers (doesn't have to be int, it could be char / signed char / unsigned char / bool to save space)
[00:30:44] <nomagno> dan_pena: I'm not following
[00:31:01] <cousteau> there's also array of characters, like "00101" (...then again you probably want element [0] to be the rightmost one, not the leftmost)
[00:31:10] <nomagno> if you don't know the size of the binary number you're putting onto the thingy, you have a big issue
[00:31:27] <nomagno> In general.
[00:31:34] <cousteau> and then of course using bitwise operators on a uint32_t (or uint_least32_t, or an unsigned long)
[00:32:14] <nomagno> I feel really bad for making my software #error if uint8_t and uint16_t aren't defined, but I am relying on unsigned overflow
[00:32:18] <nomagno> So I can't do much else
[00:32:35] <nomagno> unsigned wrap-around behaviour*
[00:32:51] <cousteau> the size of a bool is usually 1 byte... right?  Can't tell for sure what's in Windows.  (I know it's not required as per the standard, but I *think* it's usually 1 byte.)
[00:33:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:34:33] <cousteau> dan_pena: disregard what I said about using `uint_least32_t`; I thought you meant the maximum was 32 bits, not the number 32 (i.e. 5 bits).  You can just use an unsigned int, or even a plain (signed) int (although I prefer unsigned integers for bitwise arith)
[00:34:37] <cousteau> or an unsigned char, even
[00:34:48] <sham1> 32 requires 6 bits
[00:34:54] <sham1> 31 requires 5
[00:35:10] <nomagno> sham1: Pretty sure that was not what they meant
[00:35:16] <nomagno> they were talking about bits
[00:35:31] <nomagno> So I'd assume they were indeed talking about needing at least 32 bits of storage
[00:35:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:36:23] *** Joins: stonkey2 (~stonkey@user/stonkey)
[00:37:13] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[00:38:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:38:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:38:21] *** Joins: wroathe (~wroathe@user/wroathe)
[00:38:32] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[00:39:55] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[00:40:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:42:02] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:43:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:43:32] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[00:45:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:46:28] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:47:31] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[00:48:27] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:48:58] *** Joins: kit_ten (~u0_a391@2600:380:a43d:1c52:a655:2fba:9fbf:3ba0)
[00:50:02] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Ping timeout: 240 seconds)
[00:50:42] *** Quits: Enitin (~Enitin@82.102.22.86) (Remote host closed the connection)
[00:51:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[00:51:52] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 250 seconds)
[00:51:57] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:57:14] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:57:15] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[01:00:20] <cousteau> sham1: depends on what you mean by "counting 32", if it's "counting up to 32 (included)" or "counting 32 possible values (so 0 to 31)"
[01:01:34] <cousteau> nomagno: but on second thought, I think they meant "they knew *ints* are 32 bits", not that the max size the variable they use in this specific program would be 32 (bits / value)
[01:02:51] <cousteau> btw, the minimum compliant size of an int is 16, not 32.  For example in Arduino it's 16.  And if we're talking bit operations, you probably don't want to use the sign bit, so that leaves 15 reliable bits.  15 is still much larger than 5 anyway.
[01:04:58] <nomagno> cousteau: I specify either uint8_t or uint16_t on my programs because of this. Well, mostly. I would do _least variants if I didn't consistenly find myself depending on wrap-around behaviour like, everywhere
[01:06:05] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[01:06:10] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[01:06:25] <tusko> Do you people ever do any kernel programming in c? asmlinkage type stuff
[01:06:44] <bparker> even in #kernel they barely do anything at all
[01:06:51] <tusko> oooh
[01:06:57] <sham1> Try #osdev
[01:07:27] *** Quits: Nutte35 (~Nutte@202.153.81.63) (Read error: Connection reset by peer)
[01:07:27] <tusko> <3 u guys are the best
[01:07:34] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:07:35] <omegatron> sure, i'm doing a mach / linux kernel hybrid ..
[01:08:07] <omegatron> (for x86 and powerpc)
[01:08:15] *** Joins: Nutte35 (~Nutte@202.153.81.63)
[01:08:23] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 256 seconds)
[01:09:21] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:09:22] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[01:09:25] <cousteau> nomagno: you can use _least and explicitly &0xFF
[01:09:40] <cousteau> which is the elegant, more verbose, and less convenient way
[01:10:14] <cousteau> who knows when you'll be porting your gaming API to a Texas Instruments DSP :)
[01:10:29] <tusko> omegatron, does anything about this syscall and test seem clearly incorrect to you, according to std. practices?  https://bpa.st/VEXA
[01:10:40] <tusko> anyone else for that matter. I really hope to improve here
[01:11:17] <tusko> I think maybe I'm incorrectly copying the address of result
[01:15:55] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[01:18:59] *** Quits: magla (~gelignite@55d4ed71.access.ecotel.net) (Quit: Stay safe!)
[01:20:19] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:20:49] *** yoneda is now known as nf
[01:21:20] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[01:21:52] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:22:33] *** Quits: alch (~alch@151.82.209.171) (Read error: Connection reset by peer)
[01:26:00] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com)
[01:26:44] *** Joins: alch (~alch@151.82.139.155)
[01:28:13] *** Joins: pulse (~pulse@user/pulse)
[01:29:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[01:31:55] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:33:14] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[01:33:48] *** Joins: Joss (~joss@user/Joss)
[01:34:27] *** Quits: warremkaw (~warremkaw@user/warremkaw) (Remote host closed the connection)
[01:36:55] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:37:28] *** Quits: teut (~teut@2401:4900:1c68:6b85:8d9c:5c88:1fa7:34f3) (Quit: Client closed)
[01:39:29] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[01:39:29] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:39:59] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[01:40:32] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[01:41:06] *** Joins: Praise (~Fat@user/praise)
[01:41:39] *** Quits: Joss (~joss@user/Joss) (Quit: Leaving.)
[01:42:55] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:43:15] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[01:44:54] *** Joins: kish` (~aqua@user/aqua)
[01:45:29] *** Joins: oriba (~oriba@dynamic-089-012-117-098.89.12.pool.telefonica.de)
[01:45:45] *** Joins: tbcr (~tbcr@107.13.189.161)
[01:46:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:46:41] *** Joins: stonkey (~stonkey@user/stonkey)
[01:47:11] <nomagno> cousteau: There is no way &0xFF if valid.
[01:47:15] <nomagno> So I don't get what you mean
[01:47:49] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:47:49] <nomagno> Yes, 0xFF is an rvalue
[01:47:51] <nomagno> Doesn't work
[01:49:12] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[01:49:57] <rsjw> nomagno: & is a bitwise operator too
[01:50:33] *** Joins: liba (~liba@user/liba)
[01:51:24] <nomagno> Ah...
[01:51:55] *** Quits: Akuli (~Akuli@82-203-164-95.bb.dnainternet.fi) (Quit: Akuli)
[01:52:42] <nomagno> ... You know, I could make preprocessor macros for & 0xFF and & 0xFFFF
[01:52:54] <nomagno> _L and _S
[01:52:59] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[01:53:04] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[01:53:27] *** Quits: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Client Quit)
[01:53:45] *** Joins: you (~ShmoSeph@c-69-248-83-247.hsd1.nj.comcast.net)
[01:54:04] <dan_pena> For example if I know that maximum I need an array of 256, is it better to set it statically of size 256 of set his size dinamically?
[01:54:18] <KillerWasp> nomagno: or only &0xFFFF and the type of variable cut itself.
[01:54:20] <dan_pena> s/of/or/
[01:55:02] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[01:55:40] <KillerWasp> dan_pena: sos espaÃ±ol?
[01:56:30] <rsjw> if it's just one array, I think it'd be fine as a local variable
[01:56:35] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:56:40] <dan_pena> KillerWasp: no haha
[01:56:55] <dan_pena> rsjw: I have 3 arrays like that
[01:58:04] <rsjw> I think 3 would be fine too. if you're recursively calling this function, however, you might have many instances of that local variable allocated at the same time, which, depending on how deep your recursion is, could be a problem
[01:58:41] *** Joins: loganlee (~Thunderbi@user/loganlee)
[01:58:51] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:59:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[02:00:20] *** Quits: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae) (Ping timeout: 250 seconds)
[02:01:58] *** Parts: you (~ShmoSeph@c-69-248-83-247.hsd1.nj.comcast.net) (Textual IRC Client: www.textualapp.com)
[02:03:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[02:05:02] *** Quits: Nutte35 (~Nutte@202.153.81.63) (Ping timeout: 240 seconds)
[02:06:29] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[02:10:02] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:14:24] <dan_pena> ==55630==   total heap usage: 4 allocs, 4 frees, 28,016 bytes allocated
[02:14:32] <dan_pena> is that too much allocation?
[02:14:53] <BtbN> For what?
[02:15:17] <dan_pena> my program
[02:15:29] <dan_pena> huffman compression
[02:15:33] <dan_pena> on a file
[02:15:44] <BtbN> How is anyone here supposed to be able to tell you? Only you can tell how much memory use is acceptable for what you're doing.
[02:16:02] <dan_pena> BtbN: yes but I don't know how to estimate that
[02:18:23] *** Joins: Nutte35 (~Nutte@43.231.30.12)
[02:21:30] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[02:23:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:23:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:23:18] *** Joins: wroathe (~wroathe@user/wroathe)
[02:24:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:25:42] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:29:06] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:30:25] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[02:30:34] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[02:30:49] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com) (Read error: Connection reset by peer)
[02:30:55] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[02:32:52] *** Quits: pizdets (~pizdets@183.182.110.138) (Ping timeout: 250 seconds)
[02:33:23] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:34:00] *** Joins: pizdets (~pizdets@183.182.111.203)
[02:36:48] <cousteau> nomagno: yeah, I meant &0xFF as in `value_or_whatever & 0xFF`, not the unary operator & applied to 0xFF
[02:38:06] <cousteau> dan_pena: for small arrays, you might get slightly more efficient (and unnoticeably more memory-tolling, if at all) code if you just declare an array of the maximum size
[02:38:15] <rsjw> dan_pena: for local variables, take the sizeof of the variable, and maybe add a little for alignment. for more details, learn a little assembly. for dynamically allocated variables, take the size of the amount allocated and add a little for malloc's bookkeeping. for more details, research whatever malloc implementation your libc uses
[02:39:11] <cousteau> if you have tons of arrays like that, and they'll often use 10-ish % of their capacity rather than 50-80%, it may be a good idea to use malloc
[02:40:25] <cousteau> like, if your 256-element array is going to have 128 elements on average, you'd be allocating 2x as much memory as necessary, which isn't too bad
[02:41:11] <cousteau> but if you need to allocate 5 or 10 times more memory than necessary, and we're not talking a couple of KB but maybe several MB, your code might suck
[02:41:23] <rsjw> to know how large the stack can get, you'll need to know how things work on your system. maybe your stack size is fixed on your operating system. maybe the operating system will automatically allocate more until some size. who knows
[02:44:40] <cousteau> dan_pena: if you want a proper answer to your question, I suppose the only way to get it would be to implement both versions (malloc and automatic/static variable), run them, and time them with a large enough problem which is representative of what you think your program will face normally.  If you see a noticeable difference in execution time or memory use, then consider the alternative.
[02:45:39] <cousteau> ps: I think it's a bad idea to put big variables in the stack (as automatic variables); probably a better idea to make them static (declare them as `static`, or put them at file scope (outside a function))
[02:47:04] *** Quits: gaude (~gaude@114-39-142-46.pool.kielnet.net) (Quit: Client closed)
[02:47:11] <cousteau> your program uses some 28 KB RAM, which is probably negligible on a desktop PC.  If this were on an embedded platform where all you have is 64KB of memory then I'd start worrying.
[02:47:42] <cousteau> but, on the other hand, using malloc might make your program, what, 1% slower?  If it doesn't get too slow it's not gonna matter anyway
[02:48:00] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[02:48:35] <cousteau> In those cases, the usual answer is: "implement it the simplest, most straightforward, most meaningful way, so that the code reflects your intention as best as possible, and worry about optimizing it later if the result is unsatisfactory".
[02:49:17] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Ping timeout: 240 seconds)
[02:49:30] <nomagno> Can you free a static variable any other way than exiting the program?
[02:49:52] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[02:50:22] <cousteau> for example, maybe it just "feels right" to use malloc because it makes sense (as a way to say "I'm creating a variable and I don't know how big it needs to be until the program is executed").  So use that, because it's "the elegant thing to do", not because it's more or less efficient.
[02:50:58] *** Joins: nostar (~nostar@45.14.195.247)
[02:51:16] <nomagno> I purposefully avoid malloc'ing anything in my library
[02:51:31] <cousteau> nomagno: I don't think you "free" variables that haven't been allocated... anyway no, static variables exist from the beginning to the end, and they're neither on the stack nor on the heap (in implementations that have those that I've heard of)
[02:52:08] <cousteau> nothing wrong with having your library call malloc and free, unless you're considering to target systems where those don't exist
[02:52:50] <cousteau> or don't work, or work very bad (e.g. the implementation only mallocs but free() does nothing; I've seen very simple implementations do that)
[02:54:00] <cousteau> s/very bad/very poorly/
[02:54:00] <nomagno> cousteau: Explicitly no libc dependency, so yeah
[02:54:05] <nomagno> Any memory I need has to be provided by the caller
[02:54:11] <cousteau> nomagno: ah then yes don't use malloc :)
[02:54:13] <nomagno> But I've found it a very clean architecture
[02:54:29] <cousteau> or, if really needed, make your own malloc
[02:54:31] <nomagno> It has grown on me after a while coding this way :P
[02:54:36] <nomagno> Less errors, less everything
[02:54:56] <nomagno> cousteau: Fully portable AND no depdencies
[02:55:01] <nomagno> Hard to do that :P
[02:55:13] <cousteau> oh well, if your library is just a bunch of functions and doesn't handle the "created objects" itself then yes, you can live without malloc'ing yourself
[02:55:49] <caze> What is wrong with libc dependency?
[02:56:41] <nomagno> caze: I don't know, I set the portability goals as a challenge for myself before starting the project
[02:56:47] <cousteau> I usually avoid having functions with unbalanced calls to malloc() and free() anyway, unless the function name clearly states that it's "creating"/"allocating" or "destroying"/"freeing" something.  But using `malloc()...free()` inside a function would be OK if needed.
[02:57:03] <caze> nomagno: Sounds like you set the portability goals before you learned the language.
[02:57:46] <cousteau> but for general functions, "let the user create the variable however they damn please and pass it as a pointer" seems like a solid strategy.  Doesn't need to be always allocated or always declared.
[02:57:53] <nomagno> caze: I definitely know how to work with manual memory allocation in C
[02:58:04] <caze> nomagno: That is not what I meant.
[02:58:22] <cousteau> it's how most library functions of this kind work and how I tend to write mine anyway.
[02:58:25] <caze> nomagno: The functions contained in the standard library are a part of the language.
[02:59:03] <caze> nomagno: So avoiding them is a bit like saying, "I'm going to void for loops, and only  use while loops."
[02:59:09] <tusko> you could use free()
[03:00:05] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[03:00:05] *** Joins: Brewster (~Brewster@user/brewster)
[03:00:18] <cousteau> what I guess nomagno meant, is that it's better that your generate_prime_number_list() function doesn't return a list itself, but rather writes the list in a preexisting array
[03:00:49] <nomagno> Yes, it is actually cleaner than malloc'ing and freeing, in many respects
[03:00:50] <caze> It sounds like he's avoiding malloc even if it's for internal use.
[03:01:32] <nomagno> caze: I am avoiding a dependency on the hosted C standard library altogether, yes.
[03:01:56] <nomagno> I didn't set arbitrary requirements... Well they are arbitrary, but no dumb. I do make use of the freestanding libc
[03:02:09] <cousteau> instead of `int *generate_prime_number_list(int length) { int *result = malloc(length * sizeof *result); ...; return result; }` have something like `void generate_prime_number_list(int length, int *dst) { ... }` and do the malloc or declaration or whatever outside
[03:02:27] <nomagno> Game engine that runs on embedded system. Don't tell me it doesn't sound fun to use your Arduino as a server
[03:03:05] <cousteau> ...but it's not like there is something inherently bad on using malloc in general, unless you're concerned with embedded platforms
[03:03:07] <nomagno> Mostly stdint, stddef, and limits
[03:03:19] <cousteau> pretty sure Arduino has malloc though
[03:03:22] *** Joins: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:03:24] <nomagno> Yeah there isn't something bad
[03:03:33] <cousteau> hell, it has C++, that thing uses `new[]` and the like
[03:03:59] <nomagno> cousteau: Let me rephrase, compiling raw to the CPU
[03:04:42] <cousteau> I mean, he may not NEED to use malloc internally, in which case there's no reason to use it
[03:04:43] <nomagno> It is very feasable to make the game run as its own operating system, currently
[03:04:43] *** Quits: cosimone (~user@93-47-231-31.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:04:48] <nomagno> ^
[03:05:17] <cousteau> if the functions were simpler to implement using malloc, then maybe it's a dumb idea not to use malloc.  But if not...
[03:05:20] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[03:05:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com)
[03:05:26] *** Quits: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Client Quit)
[03:05:38] *** Joins: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:05:41] *** Quits: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Remote host closed the connection)
[03:05:51] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: Quit.)
[03:05:57] *** Joins: korg815 (~korg815@user/korg815)
[03:06:01] <nomagno> I don't need dynamic memory
[03:06:11] *** Joins: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:06:17] <nomagno> For the library side of the interface, anyways
[03:06:18] <cousteau> but I wouldn't go from that to "I'm going to avoid using any libc function".  Plenty of useful functions there (memcpy, sprintf...)
[03:06:50] <cousteau> hell, even some floating point operations might end up being implemented as functions without you knowing
[03:07:20] <nomagno> cousteau: Hey, little distinction
[03:07:27] <nomagno> Libc, not libc functions
[03:07:28] <cousteau> source: had more than one headache dealing with systems that wouldn't handle floating point because something something linker error
[03:07:35] <nomagno> I took 3 string.h functions from plan9
[03:08:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:08:17] <cousteau> if you "steal" a function from an existing implementation and copy it to your program that doesn't count as using a library function
[03:08:36] <cousteau> since that function is no longer being taken from a library (even if you did take it from a library when creating the program)
[03:08:53] <nomagno> Well yeah, I know
[03:09:07] <nomagno> My point is to have full portability
[03:09:24] <nomagno> Certain libc functions don't need implementation-specific code at all
[03:09:25] <cousteau> but... yeah, little pointless to avoid using memcpy and the like.  Library memcpy might be much more efficient than any general-purpose function you could implement
[03:09:35] <cousteau> it'll use architecture-specific tricks and the like
[03:09:53] <cousteau> libraries do provide full portability
[03:10:08] *** Quits: nostar (~nostar@45.14.195.247) (Quit: Leaving)
[03:10:09] *** Joins: Guest10 (~Guest10@93-50-90-162.ip151.fastwebnet.it)
[03:10:25] *** Parts: Guest10 (~Guest10@93-50-90-162.ip151.fastwebnet.it) ()
[03:10:38] *** Joins: nostar (~nostar@68.51.221.108)
[03:10:48] <caze> What kind of game?
[03:10:49] <cousteau> if there's a C compiler for a platform, there will be libraries for that platform.  Have to be.  Unless it's a super weird and hardly supported platform for which GCC was ported but not a C standard library like glibc
[03:11:23] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[03:11:31] <cousteau> personally I'd use the existing wheel rather than reinventing it, unless there is a justification/need for doing so
[03:12:17] <nomagno> Need: is fun and cool
[03:13:01] <cousteau> (...and "I'm actually doing this just for fun and because I want to learn if it's possible to do and what are the implications, rather than because I actually want to create something useful" is a legitimate reason, but other than that I'd try to stick to existing stuff
[03:13:22] <cousteau> ok so just for fun then :)  carry on then
[03:14:26] <nomagno> I want to create something useful, the level of usefulness is just to be seen
[03:15:05] <nomagno> At some point it will be a legitimate game engine where the porting effort is essentially zero, on all levels
[03:15:28] <nomagno> It's just, there'll be plenty of room to optimize on many places too :)
[03:15:54] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:16:30] *** Joins: g2anj (~v@58.228.230.4)
[03:17:45] <cousteau> well, I don't really think that resorting to a custom implementation of string/memory functions for a game-oriented API is particularly useful... but it's your project after all
[03:18:18] <cousteau> an interesting alternative would be to have macros to switch those weird things on and off
[03:18:22] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[03:18:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:18:31] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:18:55] <nomagno> cousteau: It's just 3 string functions, because I do have to parse formats
[03:19:04] <nomagno> I have a tokenizer in there
[03:19:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Client Quit)
[03:19:29] <cousteau> #if USE_CUSTOM_MEMCPY  void *my_memcpy(...) { ... }  #else  #include <string.h> #define my_memcpy memcpy  #endif
[03:19:38] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:20:02] <nomagno> strtoul, strcat, and strcmp
[03:20:12] <nomagno> cousteau: yeah I already prefix them
[03:20:24] <nomagno> I could do this very easily already, actually!
[03:20:24] <cousteau> oh... well, no need to parse too much if the format uses fixed width :)  or it's a binary format
[03:21:29] <cousteau> nomagno: my suggestion was to have an alternative to use the potentially faster and less space-consuming implementation provided by the library unless explicitly requested
[03:22:04] <kurahaupo> strcat wouldn't be in my top 3 string functions. stpcpy would be more useful for building robust code
[03:22:11] <cousteau> gcc -DUSE_CUSTOM_MEMCPY program.c -o program.exe  # will use your cute li'l function
[03:22:34] <cousteau> gcc program.c -o program.exe  # will use good ol' memcpy
[03:22:53] <cousteau> kurahaupo: maybe strncpy
[03:23:17] <nomagno> cousteau: I have, uh... Four formats right now. Generic hierarchical data format, virtual machine bytecode, virtual machine assembly, and then based on the generic hierarchical data format one for storing tracks and another for packets
[03:23:29] <cousteau> (...which I just remembered it's been widely regarded as "a misleadingly named function that doesn't necessarily return strings")
[03:23:34] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Read error: Connection reset by peer)
[03:23:42] <kurahaupo> cousteau: sorry I meant stpncpy
[03:23:48] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[03:23:51] <nomagno> They're all binary except the assembly, which I need strcmp and strtoul for
[03:24:08] <nomagno> Strcat... I don't know right now
[03:24:15] <cousteau> kurahaupo: didn't know about stpncpy with a p
[03:24:19] <cousteau> thought it was a typo
[03:24:46] <kurahaupo> cousteau: returns a pointer to the trailing null byte
[03:25:12] <nomagno> No, my bad
[03:25:14] <kurahaupo> (or where it would be if not for overrunning the limit)
[03:25:17] <nomagno> strtok, strtoul, and strcmp
[03:25:35] <kurahaupo> argh, strtok
[03:26:20] <cousteau> kurahaupo: alternatively, returns a pointer to outside of the array, which might be hard-ish to figure out
[03:27:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:27:36] <kurahaupo> cousteau: You give it (endptr-ptr) as the size, so It can't outrun the array
[03:28:03] <cousteau> it can point one past the last element, which is a valid pointer but isn't pointing inside the array
[03:28:32] <cousteau> unless you explicitly made the array one char larger than what you're telling stpncpy
[03:28:54] <cousteau> and then you have to zero out that extra character yourself just in case, because stpncpy won't do that for you
[03:29:17] <cousteau> would all be a lot much easier if strncpy ensured there was going to be a null terminator
[03:29:31] <cousteau> you know, ensure that it creates a string
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:30] <cousteau> and somehow tell you how many bytes it wrote, which is what stpncpy kinda solves I guess
[03:30:35] <kurahaupo> cousteau: start with endptr=array+count; *--endptr=0;
[03:30:38] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:14] <caze> ,c11 stpncpy
[03:31:15] <candide> No such text 'stpncpy' found in C11 Draft Standard (n1570).
[03:31:16] <cousteau> or that, yes
[03:31:25] <kurahaupo> POSIX 2008
[03:31:40] <cousteau> also as caze pointed out (well technically candide did) it's not standard C
[03:32:10] <caze> kurahaupo: He's using a freestanding implementation.
[03:32:58] <cousteau> which might or might not have that function.  It seems to be part of glibc anyway.
[03:33:00] <kurahaupo> and duplicating implementations of string functions
[03:33:19] <cousteau> but if portability is going to be a concern, well, don't use weird non-standard-C stuff
[03:35:08] <nomagno> In any case I haven't needed to use memcpy yet...
[03:35:38] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:35:40] <cousteau> nomagno: fair enough, but I'd just have used the standard functions rather than wasting time implementing them or finding alternatives
[03:36:20] <cousteau> then again, I might be biased because I already had my own deal of fun figuring out how to get math.h functions working on a platform that didn't provide a libm
[03:36:33] <cousteau> super fun times.
[03:36:38] <caze> nomagno: What language are the functions that you copied implemented in?
[03:36:41] <nomagno> cousteau: I'd highlight this process as unremarkable and the least time consuming part
[03:36:50] <cousteau> I only wanted to sepukku myself twice.
[03:36:55] <nomagno> caze: Plan9
[03:37:00] <nomagno> Plan9 libc, MIT license
[03:37:23] <cousteau> so, C?
[03:38:37] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:39:04] *** Quits: pyook (~pyook@user/puke) ()
[03:39:37] <caze> nomagno: By implementing them in C, you might be losing out on optimizations that are available on your platform, in the form of functions implemented in things like vectorized assembly.
[03:39:37] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[03:39:50] *** Joins: pyook (~pyook@user/puke)
[03:40:50] * cousteau was using a high performance state of the art system to implement a simple algorithm that used some trigonometric functions, and throwing away all that performance by having to use fdlibm as a replacement for libm because the stupid super-fancy-pants system wouldn't come with a libm
[03:42:11] <nomagno> caze: Like cousteau said previously, this specifically can be fixed with a #ifdef
[03:42:59] <caze> nomagno: In other words, an SSE implementation of e.g., strcmp might break up the strings into chunks, and do the comparisons in parallel.
[03:43:16] <cousteau> vectorized assembly is one possibility, specific platform-unique assembly instructions another, and also targeting platform characteristics such as optimal word size etc being hard-coded.  Probably not too dramatic, but well, feels better to use the stuff that comes with the tool
[03:43:41] <cousteau> one reason is that the more stuff of yours you add, the more stuff you'll have to debug when something goes wrong, and the higher the chances that something goes wrong
[03:43:55] <nomagno> It's definitely not a noteworthy perf improvemrnt
[03:44:22] <cousteau> it might be an improvement on the performance of the debugging team though
[03:44:44] <cousteau> (the debugging team being you, in the future, if you plan to maintain this)
[03:45:16] <nomagno> I'm only calling these functions a few times at the start of program execution, for tokenizing strings into native data structures
[03:45:45] <nomagno> So while I will add the ifdefs, it is kinda pointless
[03:45:46] *** Joins: graywolf (~wolf@user/graywolf)
[03:46:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[03:47:12] *** Joins: Guest3273 (~Guest@host223.190-139-78.telecom.net.ar)
[03:49:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[03:49:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:49:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:50:49] <cousteau> I suppose it doesn't hurt to have the implementation available as an option.  You had your fun putting it there and the work is already done; might as well leave them there as an option because why the hell not.
[03:51:42] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[03:52:14] <cousteau> Only possible issue is code coverage: if you have code that you never use, you won't notice when it stops working.  Seen that happen with some projects; they added support for a tool and then never tested it again; when I tried to use the tool it wouldn't work, and go find which version broke it.
[03:52:14] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[03:52:35] *** Quits: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Quit: Leaving)
[03:54:23] *** Joins: Soni (~quassel@autistic.space)
[03:55:40] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[03:58:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:05] *** Joins: wroathe (~wroathe@user/wroathe)
[03:58:12] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[04:02:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:03:20] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: â™« I can't forget the day I shot that network down â™«)
[04:08:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:09:58] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (Quit: WeeChat 2.9)
[04:10:52] *** Quits: Guest3273 (~Guest@host223.190-139-78.telecom.net.ar) (Remote host closed the connection)
[04:13:11] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[04:14:57] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[04:19:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:21:08] *** Joins: Wulf (~Wulf@user/wulf)
[04:25:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:29:09] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:29:33] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:32:49] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:33:32] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[04:37:19] *** Joins: llh (~llh@user/llh)
[04:38:25] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:46:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:46:11] *** Joins: wroathe (~wroathe@user/wroathe)
[04:46:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Quit: Quit)
[04:53:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[04:53:50] *** Quits: oriba (~oriba@dynamic-089-012-117-098.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:58:26] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 250 seconds)
[04:59:55] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:00:10] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:00:43] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:01:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:01:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[05:03:07] *** Joins: malloy (~jimery@113.116.52.211)
[05:03:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[05:04:17] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:06:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:07:02] *** Quits: adip (~adip@aedr186.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[05:07:07] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[05:09:06] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[05:11:32] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[05:16:38] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[05:18:04] *** Joins: seninha (~seninha@user/seninha)
[05:19:18] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[05:23:02] *** Quits: alch (~alch@151.82.139.155) (Read error: Connection reset by peer)
[05:23:33] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[05:24:43] *** Joins: _slate_ (~slate@159.69.26.92)
[05:25:32] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:26:38] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[05:27:08] *** Joins: alch (~alch@pa-18-164-183.service.infuturo.it)
[05:28:23] *** Joins: jw5 (~Thunderbi@user/jw4)
[05:28:48] *** Joins: malloy (~jimery@113.116.52.211)
[05:29:37] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[05:29:37] *** jw5 is now known as jw4
[05:31:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:33:55] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[05:36:34] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[05:37:52] *** Quits: kit_ten (~u0_a391@2600:380:a43d:1c52:a655:2fba:9fbf:3ba0) (Ping timeout: 250 seconds)
[05:39:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:40:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:40:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:40:05] *** Joins: wroathe (~wroathe@user/wroathe)
[05:41:02] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:42:55] *** Joins: fe23 (~fe23@2409:8a34:464:4990:25eb:87e9:38b6:c8ca)
[05:44:32] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:44:43] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:45:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:45:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com)
[05:45:14] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:45:48] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:47:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:48:32] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[05:53:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:56:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:56:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:56:59] *** Joins: wroathe (~wroathe@user/wroathe)
[05:58:28] <nicode> is the tool necessary?
[05:59:47] <nicode> if you never use code, get rid of it and you won't need to maintain it. stick to what's necessary as the rest is just eating your overhead.
[06:00:32] <nicode> if that sounded preachy, it wasn't meant to.
[06:00:55] *** Joins: jaggz (~jaggz@user/jaggz)
[06:12:34] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:13:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:17:29] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[06:18:26] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:20:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:24:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:27:02] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:27:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:28:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:31:38] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[06:31:56] *** Joins: kish` (~aqua@user/aqua)
[06:32:14] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[06:32:34] *** Joins: kish` (~aqua@user/aqua)
[06:33:49] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:35:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:35:52] *** Joins: wroathe (~wroathe@user/wroathe)
[06:40:17] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:40:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:40:55] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[06:41:28] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:44:09] *** Joins: tyler (~tyler@165.232.142.93)
[06:47:39] *** Joins: pert (~pert@fsf/member/pert)
[06:52:48] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:56:53] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[07:02:49] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:03:14] *** Joins: Rounin (~david@84.212.130.215)
[07:03:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[07:05:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[07:06:39] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:08:10] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:09:44] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[07:11:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:12:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[07:15:25] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:16:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:19:21] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[07:22:36] *** Joins: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55)
[07:25:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:28:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[07:34:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:34:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:34:00] *** Joins: wroathe (~wroathe@user/wroathe)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:39:12] *** Quits: rcf (rcf@iceland.sdf.org) (Ping timeout: 250 seconds)
[07:39:21] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[07:39:23] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 256 seconds)
[07:45:58] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[07:46:09] *** Joins: frost (~frost@user/frost)
[07:49:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80)
[07:49:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80) (Changing host)
[07:49:15] *** Joins: skapata (~Skapata@user/skapata)
[07:50:16] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[07:52:25] *** Quits: csjp (~csjp@user/csjp) (Ping timeout: 256 seconds)
[07:53:38] *** Joins: csjp (~csjp@user/csjp)
[07:54:47] *** Joins: g2anj (~v@58.228.230.4)
[07:57:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 250 seconds)
[07:57:36] *** Joins: Akiva (~Akiva@user/Akiva)
[07:57:56] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:00:19] *** Joins: hinata (~hinata@2409:4042:2d90:eac6:356e:1f7:b186:346e)
[08:06:28] *** Joins: Satin (uid193953@user/Seten)
[08:07:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[08:09:25] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[08:10:32] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 240 seconds)
[08:12:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:13:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:13:28] *** Joins: Jong (~Jong@2620:10d:c090:400::5:44d9)
[08:13:54] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[08:19:53] *** Joins: Jeaton (~hybrid@user/Jeaton)
[08:22:27] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[08:25:19] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[08:26:50] *** Quits: Jeaton (~hybrid@user/Jeaton) (Quit: Leaving)
[08:26:55] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:27:34] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:28:53] *** Joins: boB_K7IQ (~boB_K7IQ@108.60.52.242)
[08:29:56] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:36:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:36:32] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:37:00] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[08:38:34] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[08:40:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:40:50] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[08:50:44] *** Quits: candide (~pbot3@about/c/bot/candide) (Quit: Departure requested.)
[08:51:00] *** Joins: candide (~pbot3@about/c/bot/candide)
[08:54:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[08:57:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:59:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:02:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:03:26] *** Joins: nicko (~iClass@221.236.54.48)
[09:04:42] *** Joins: rcf (rcf@iceland.sdf.org)
[09:05:12] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[09:05:43] *** Quits: nicko (~iClass@221.236.54.48) (Client Quit)
[09:05:48] *** Quits: rcf (rcf@iceland.sdf.org) (Remote host closed the connection)
[09:08:31] *** Quits: Pentode (~Pentode@mobile-166-171-56-175.mycingular.net) (Ping timeout: 256 seconds)
[09:08:47] *** Joins: Burgundy (~yomon@82.76.72.88)
[09:11:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[09:11:40] *** Joins: frytaped (~frytaped@user/go4godvin)
[09:12:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[09:13:47] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[09:14:45] *** Joins: malloy (~jimery@113.116.52.211)
[09:20:22] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:25:17] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b)
[09:26:05] *** Quits: alch (~alch@pa-18-164-183.service.infuturo.it) (Ping timeout: 256 seconds)
[09:27:16] *** Joins: malina (~malina@user/malina)
[09:27:32] *** Joins: alch (~alch@151.82.176.20)
[09:31:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:34:28] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:37:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:40:54] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[09:52:21] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[09:54:19] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:55:42] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 250 seconds)
[09:56:25] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:56:27] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Remote host closed the connection)
[09:58:13] *** Joins: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[09:58:45] *** Joins: ahammer (~ahammer@157.122.68.240)
[09:59:17] *** Joins: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de)
[09:59:50] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:00:09] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[10:01:46] *** Quits: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:02:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[10:04:02] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:07:31] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:11:59] *** Satin is now known as STUXNET
[10:12:51] *** Quits: tyler (~tyler@165.232.142.93) (Remote host closed the connection)
[10:16:33] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[10:16:56] *** Quits: ahammer (~ahammer@157.122.68.240) (Ping timeout: 250 seconds)
[10:27:06] *** Joins: ahammer (~ahammer@157.122.68.240)
[10:29:38] *** Quits: ahammer (~ahammer@157.122.68.240) (Client Quit)
[10:30:07] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 256 seconds)
[10:30:39] *** Joins: sonde (~sonde@user/sonde)
[10:33:00] *** Joins: ahammer (~ahammer@157.122.68.240)
[10:33:34] *** Quits: ahammer (~ahammer@157.122.68.240) (Client Quit)
[10:36:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55) (Ping timeout: 250 seconds)
[10:37:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[10:38:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[10:40:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:40:22] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:40:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:42:25] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[10:42:26] *** Joins: malloy (~jimery@113.116.52.211)
[10:43:45] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:44:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[10:44:40] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[10:44:41] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:46:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:49:23] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[10:50:30] *** Joins: mrig (~mrig@user/mrig)
[10:51:00] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:51:10] *** Joins: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374)
[10:51:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[10:52:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:52:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:54:05] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:54:33] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:55:51] *** Joins: LaserPete (~Peter@ip4d17fd7c.dynamic.kabel-deutschland.de)
[10:56:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:58:56] *** Joins: malloy (~jimery@113.116.52.211)
[10:59:29] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[11:00:58] *** Joins: adip (~adip@deo188.neoplus.adsl.tpnet.pl)
[11:01:00] *** Joins: thelma (~Sweetsymp@120.22.154.63)
[11:01:32] *** Quits: hinata (~hinata@2409:4042:2d90:eac6:356e:1f7:b186:346e) (Quit: Leaving)
[11:02:33] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[11:03:19] *** Joins: jw4 (~Thunderbi@user/jw4)
[11:04:47] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[11:05:36] *** Joins: osp (~osp@84.19.72.107)
[11:06:12] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[11:07:31] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[11:08:54] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[11:09:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:10:29] *** Joins: bkhl (~bkhl@user/bkhl)
[11:11:01] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[11:11:16] <katsuragi> https://termbin.com/hnfo This won't work if the argument is a pointer. Why?
[11:11:47] <katsuragi> if root is *root instead of **root
[11:13:53] <dave0> katsuragi: this looks like it works
[11:14:12] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:14:46] <dave0> katsuragi: **root   lets you modify the tree, unlike *root
[11:15:28] <novns> katsuragi, because this function modifies the pointer, so they have to pass pointer to this pointer
[11:15:35] <dave0> katsuragi: if you wanted to use   *root   as a parameter, you would need a different way to modify the tree, for example returning the new root of the tree
[11:16:14] <dave0> katsuragi: did you write this? or is this someone's elses code that you are trying to learn?
[11:16:41] <katsuragi> It's not mine. I got it off Youtube
[11:17:09] <dave0> it's using a pointer to modify the tree
[11:17:16] <novns> katsuragi, invest some time to read books
[11:17:35] <novns> to get all concepts in your head clearly
[11:17:40] <dave0> katsuragi: i have a small example of a binary tree that uses a different method
[11:18:12] <katsuragi> alright, novns. I need a lot of practice, honestly.
[11:18:25] <katsuragi> dave0: yes, please
[11:18:52] <dave0> katsuragi: https://termbin.com/e07i
[11:18:53] <novns> katsuragi, if you don't understand how pointers work, you cannot get knowledge fromrandom youtube examples
[11:19:20] <novns> you will confuse yourself more and more
[11:21:48] <dave0> katsuragi: see how my insert() resembles your binary_insert()
[11:23:08] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:23:09] <katsuragi> yes
[11:23:41] <dave0> katsuragi: both methods are valid
[11:24:28] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:25:55] <katsuragi> I'll change the code to use *root
[11:26:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[11:27:50] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:32:53] <novns> katsuragi, why do you want this?
[11:33:13] <novns> they use **root for a purpose
[11:33:43] <novns> because they modify the argument
[11:34:03] <dave0> returning the new root is valid too
[11:34:07] <novns> yes
[11:34:29] <dave0> if he finds one way or the other easier to read, let him decide
[11:34:41] <novns> dave0, I believe katsuragi doesn't understand what he's doing
[11:35:38] <novns> learning from random examples is not a good way
[11:36:02] *** Quits: carlavilla (~carlavill@188.26.219.17) (Ping timeout: 240 seconds)
[11:36:46] <dave0> i dunno.. tweaking some code could give him an insight
[11:37:34] <novns> and frustrations later when thongs don't work as expected
[11:37:38] <novns> *things
[11:39:42] <katsuragi> novns: no, I understand the **method. I just didn't know why my code didn't work out when I tried using *root but after looking at the code carefully, I understood
[11:40:15] <katsuragi> and I am writing a full program based on the idea i got from the video so it's not just a snippet
[11:40:42] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:41:01] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:41:32] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:44:54] *** Quits: Nutte35 (~Nutte@43.231.30.12) (Ping timeout: 250 seconds)
[11:45:03] *** Joins: aradesh (~aradesh@user/aradesh)
[11:45:16] *** Joins: Nutte35 (~Nutte@202.153.80.188)
[11:46:06] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:46:09] *** STUXNET is now known as Satin
[11:46:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Ping timeout: 240 seconds)
[11:48:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[11:52:26] *** Joins: iomari891 (~iomari891@197.210.70.203)
[11:52:42] *** Quits: frytaped (~frytaped@user/go4godvin) (Quit: frytaped)
[11:54:07] <novns> katsuragi, nice then, good luck
[11:58:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:58:23] *** Joins: Vrganj (~vrganj@93-138-60-3.adsl.net.t-com.hr)
[11:59:57] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl)
[11:59:58] *** Quits: iomari891 (~iomari891@197.210.70.203) (Quit: WeeChat 3.3)
[12:00:59] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:01:12] *** Joins: iomari891 (~iomari891@197.210.71.129)
[12:01:15] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:01:43] *** Quits: thelma (~Sweetsymp@120.22.154.63) (Quit: thelma)
[12:05:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:05:54] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:08:45] *** Joins: stblaha (~stblaha@user/stblaha)
[12:12:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[12:13:32] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 240 seconds)
[12:14:18] *** Joins: slavfox (~slavfox@93.158.232.111)
[12:15:09] *** Joins: loganlee (~Thunderbi@user/loganlee)
[12:18:17] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[12:18:36] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[12:22:36] *** Quits: Vrganj (~vrganj@93-138-60-3.adsl.net.t-com.hr) (Ping timeout: 250 seconds)
[12:22:36] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[12:30:09] *** Quits: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d) (Quit: You have been kicked for being idle)
[12:38:31] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:41:52] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[12:43:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[12:44:17] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:46:16] *** Joins: strajder (~strajder@user/strajder)
[12:49:32] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[12:50:07] *** Joins: stonkey (~stonkey@user/stonkey)
[12:50:21] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[12:51:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:51:11] *** Joins: raym (~raym@user/raym)
[12:54:21] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[12:54:30] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[12:54:52] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:56:16] *** Joins: novns (~novns@user/novns)
[12:56:28] *** Joins: gaude (~gaude@114-39-142-46.pool.kielnet.net)
[12:56:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:57:55] *** Joins: anon16_ (~anon16_@user/anon16)
[13:02:30] *** Quits: anon16_ (~anon16_@user/anon16) (Client Quit)
[13:05:48] *** Joins: hlauk (~hlauk@176.33.97.244)
[13:12:56] *** Quits: hlauk (~hlauk@176.33.97.244) (Quit: Leaving)
[13:13:12] *** Joins: jason1236 (~fltk@thunix.net)
[13:13:15] <jason1236> hello
[13:13:32] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:36] <jason1236> do you have maybe a user little C code for making a single "Ping" (socket, to given IP) ?
[13:14:21] *** Joins: System_Error (~SystemErr@user/systemerror)
[13:15:26] <megaTherion> jason1236: would be kinda off topic probably
[13:16:03] <nomagno> Yes, more fit for ##workingset, if you want to do it with *nix sockets
[13:16:12] <megaTherion> there is also #POSIX
[13:17:04] *** Joins: lleo (~leo@188-206-106-40.mobile.kpn.net)
[13:17:56] <jason1236> well it is C.
[13:18:06] <megaTherion> But what you want to do is not.
[13:18:07] <jason1236> C is C
[13:18:17] <jason1236> C cannot do it?
[13:18:20] <megaTherion> no
[13:18:23] <nomagno> It is nonstandard C, specifically POSIX C
[13:18:33] <megaTherion> and on Windows there is a way which would look very different ;)
[13:18:34] <jason1236> it is sockets
[13:18:40] <jason1236> sockets are all available
[13:18:49] <lleo> mornin
[13:18:57] <nomagno> C has two standards: ISO C, and POSIX C
[13:19:12] <nomagno> ISO C, which is more ontopic for this channel, cannot do that
[13:19:16] <nomagno> POSIX C can
[13:19:23] <jason1236> ok
[13:19:33] <nomagno> since it is a Unix-taylored superset
[13:19:35] <jason1236> iso c and posix c. ok.
[13:19:48] <megaTherion> maybe he wants win32 c :p
[13:19:52] <jason1236> but iso c alike 9 right?
[13:20:01] <jason1236> is 9 front iso c or posix C ?
[13:20:38] <megaTherion> I thought plan9 doesnt bother with C *shrugs*
[13:20:39] <nomagno> 9front/plan9 uses its own superset of ISO C 1990
[13:20:48] <megaTherion> didnt they have their own weird language?
[13:21:39] <nomagno> They have a dialect of C
[13:21:43] <nomagno> And a mode to support standard C
[13:21:48] <nomagno> No weird original language
[13:21:59] <dave0> alef
[13:22:47] <jason1236> hi dave !
[13:23:01] <lleo> gnu-c++
[13:23:22] *** Quits: alch (~alch@151.82.176.20) (Read error: Connection reset by peer)
[13:23:22] * jason1236 jason wants unix/BSD and linux --- i dont use windows.
[13:23:53] <jason1236> nomagno: are you sure that 9 is that old 90s stuff?
[13:24:16] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Quit: brb)
[13:25:45] <nomagno> Plan9 is a Unix successor developed by Bell Labs during the 1990s, that uses a nonstandard dialect of C
[13:25:51] <nomagno> It is the operating system 9front is based on
[13:25:59] <nomagno> As well as Inferno from Bell Labs
[13:26:03] <megaTherion> didnt know anyone still bothers with Plan9 at all
[13:26:59] *** Joins: alch (~alch@151.82.157.176)
[13:27:01] <jason1236> there is anyhow i guess no sockets in the 9. so a ping is likely not possible?
[13:27:21] <megaTherion> you cannot ping in plan9... *ugh*
[13:27:36] <nomagno> It's always had the potential to be a nice mainstream OS, but never been good enough to convince anyone other than academics to abandon something like Linux
[13:27:37] <megaTherion> wasnt their idea to shove everything off to the userland?
[13:28:10] <megaTherion> nomagno: ah ok... I think I once wanted to try it on some old laptop like p3 or so... and it didnt work :D
[13:28:12] <nomagno> Well, not better enough than the Unix modek
[13:28:23] <nomagno> jason1236: You can use BSD sockets in Plan9 through their POSIX API layer
[13:29:11] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 256 seconds)
[13:29:19] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:29:22] <ChoHag> https://git.9front.org/plan9front/plan9front/6f9838a6a5b80e0253bdc8fb194ad6f15eb655f5/sys/src/cmd/ip/ping.c/f.html
[13:29:36] <nomagno> It's found its academic niche, but it had the potential to replace Unix had it not been 20 years late to the party
[13:30:06] <megaTherion> ya it came far too late
[13:34:22] *** Quits: lleo (~leo@188-206-106-40.mobile.kpn.net) (Remote host closed the connection)
[13:34:43] *** Joins: lleo (~leo@188-206-106-40.mobile.kpn.net)
[13:36:21] *** Quits: jkotra (~jkotra@122.169.214.214) (Quit: Ping timeout (120 seconds))
[13:36:30] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[13:36:39] *** Joins: jkotra (~jkotra@122.169.214.214)
[13:36:43] *** Joins: mrig (~mrig@user/mrig)
[13:37:11] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[13:37:32] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[13:38:06] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:40:13] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[13:41:27] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[13:42:21] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[13:42:28] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[13:42:39] *** Joins: xse (~xse@user/xse)
[13:46:30] *** Joins: pranja (~pranja@58.240.26.203)
[13:50:30] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:55:12] *** Quits: pyook (~pyook@user/puke) ()
[13:55:45] *** Joins: pyook (~pyook@user/puke)
[13:58:31] <sham1> Seems like plan9 C doesn't have designated initializers
[13:58:44] <sham1> Either that, or it's not used
[14:01:42] *** Joins: seninha (~seninha@user/seninha)
[14:04:01] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[14:04:36] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:04:58] <dave0> sham1: i think it did, and inspired ansi, but i think they used a different syntax.. it might have been   int array[10] = { [2] 1, [5] 2, };   ie no equals
[14:05:22] <dave0> vague recollection from one of the pdf's in the doc/ directory
[14:05:31] *** Joins: strajder (~strajder@user/strajder)
[14:05:45] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca) (Quit: WeeChat 3.4)
[14:06:08] <dave0> iirc there was some feature of unnamed members in a struct
[14:07:54] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[14:08:32] *** Quits: pyook (~pyook@user/puke) (Ping timeout: 240 seconds)
[14:08:51] *** Quits: steerpike (~echelon@gateway/tor-sasl/steerpike) (Remote host closed the connection)
[14:09:14] *** Joins: steerpike (~echelon@gateway/tor-sasl/steerpike)
[14:09:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:11:05] *** Quits: kriss (~kriss@213.239.83.90) (Quit: Lost terminal)
[14:11:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:12:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:14:45] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:15:44] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:23:02] *** Joins: costanza (~i.am@user/heineken)
[14:23:22] *** Joins: bilbo71 (~bilbo@host-37-191-190-173.lynet.no)
[14:25:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:26:10] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[14:27:20] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[14:27:48] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[14:28:14] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[14:29:32] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:32:04] *** Joins: otty (~u0_a161@49.15.93.248)
[14:32:22] <otty> #join #linux_geeks
[14:32:37] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[14:33:10] *** Quits: bilbo71 (~bilbo@host-37-191-190-173.lynet.no) (Quit: Client closed)
[14:34:02] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[14:34:06] <dave0> it's a nice c99 feature but the nicest feature was declarations can appear anywhere in a block
[14:35:33] *** Quits: otty (~u0_a161@49.15.93.248) (Remote host closed the connection)
[14:36:58] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[14:37:41] <nomagno> YES.
[14:38:08] <nomagno> I don't think there was any rational between declarations only being able to appear at the start previously, other than tradition
[14:38:13] <nomagno> rationale*
[14:39:35] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[14:40:24] *** Quits: humky (~humky@user/humky) (Ping timeout: 250 seconds)
[14:42:07] *** Quits: alch (~alch@151.82.157.176) (Ping timeout: 256 seconds)
[14:42:40] *** Quits: Nutte35 (~Nutte@202.153.80.188) (Remote host closed the connection)
[14:42:58] *** Joins: Nutte35 (~Nutte@202.153.80.188)
[14:43:10] *** Joins: alch (~alch@to-18-92-189.service.infuturo.it)
[14:45:19] *** Joins: pulse (~pulse@user/pulse)
[14:46:17] <jason1236> about ping.c is it possible without root actually?
[14:47:10] <sham1> Maybe on some systems, but not on UNIX because you usually don't get access to raw sockets
[14:47:49] *** Joins: shivesh (~shivesh@user/shivesh)
[14:48:04] *** Joins: cursey (~cursey@user/cursey)
[14:50:06] *** Quits: lleo (~leo@188-206-106-40.mobile.kpn.net) (Quit: beyond time space in laws)
[14:50:58] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[14:52:14] <GyrosGeier> Linux has CAP_NET_RAW, which is also sufficient
[14:52:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[14:54:59] <jason1236> sham1: what about netbsd, ? I guess it is much permissive for that.
[14:57:59] *** Joins: cyphics (~cyphix@user/cyphics)
[14:59:34] *** Joins: hinata (~hinata@2409:4042:2d90:eac6:dc64:440f:45cb:fd7b)
[14:59:59] <sham1> I don't think netbsd allows for doing that stuff without SUID
[15:00:46] <sham1> Ah yes
[15:01:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:02:20] *** Joins: inlight (~inlight@157.35.72.43)
[15:02:20] *** Quits: inlight (~inlight@157.35.72.43) (Changing host)
[15:02:20] *** Joins: inlight (~inlight@user/inlight)
[15:02:45] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[15:03:00] <sham1> cvsweb.netbsd.org/bsdweb.cgi/src/sbin/ping/ping.c?rev=1.118&content-type=text/x-cvsweb-markup&only_with_tag=MAIN
[15:03:17] <sham1> The source has a comment explicitlly saying: This program has to run SUID to ROOT to access the ICMP socket.
[15:04:02] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[15:04:32] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:06:16] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[15:06:32] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[15:09:17] <sham1> Also can we just appreciate for a moment just how readable the code is
[15:11:56] <jason1236> sham1: i am not so sure
[15:12:01] <jason1236> for sure openbsd
[15:13:24] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Remote host closed the connection)
[15:13:38] *** Joins: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec)
[15:13:56] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b) (Remote host closed the connection)
[15:13:56] <sham1> I can check
[15:14:39] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b)
[15:15:12] <sham1> OpenBSD's ping is also SUID root
[15:16:23] <sham1> Same disclaimer here: https://cvsweb.openbsd.org/src/sbin/ping/ping.c?rev=1.245&content-type=text/x-cvsweb-markup
[15:16:25] <candide> Title of sham1's link: src/sbin/ping/ping.c - view - 1.245
[15:17:24] *** Joins: bkhl (~bkhl@user/bkhl)
[15:18:58] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b) (Ping timeout: 250 seconds)
[15:19:19] <markand> omg
[15:19:25] <markand> this is insane
[15:19:44] <NRK[m]> it certainly is!
[15:19:57] <sham1> And yeah, readable!
[15:19:58] <trenka>  linux has IPPROTO_ICMP
[15:20:08] <trenka> as I was told here some time ago :)
[15:20:13] <markand> oh it also is on FreeBSD
[15:20:13] <sham1> IIRC that still requires either root or a capability
[15:20:25] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:20:37] <trenka> so it does not require raw sockets
[15:20:59] <NRK[m]> anyways, what's insane??
[15:21:24] <sham1> Well apparently OpenBSD also has IPPROTO_ICMP, but yeah, requires root so SUID it is
[15:21:29] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:22:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:22:10] <trenka> it still uses raw
[15:22:17] <trenka> linux does not
[15:22:36] <trenka> socket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3
[15:22:43] <sham1> Hm
[15:22:43] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[15:23:06] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[15:25:20] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[15:25:38] *** Joins: B1uebird (~palenoon@103.100.150.2)
[15:27:38] *** Joins: Klinda (~superleag@user/klinda)
[15:27:48] <sham1> But yeah. That source
[15:28:27] *** Joins: Darkcoal (~user@2001:16a2:767e:4500:6775:d936:9968:e932)
[15:28:41] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89)
[15:31:41] <jason1236> this is sure for openbsd that SUID root needed. due to ultra very mega high securtiy level
[15:32:09] <jason1236> normally a nmap can be done with -sP without ROOT SSUID
[15:32:13] <jason1236> ion linux.
[15:32:24] *** Quits: B1uebird (~palenoon@103.100.150.2) (Ping timeout: 250 seconds)
[15:33:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Quit: Quit)
[15:33:20] *** Joins: humky (~humky@user/humky)
[15:34:40] *** Quits: pranja (~pranja@58.240.26.203) (Quit: Client closed)
[15:35:31] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Quit: Konversation terminated!)
[15:35:44] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:10] *** Quits: Darkcoal (~user@2001:16a2:767e:4500:6775:d936:9968:e932) (Ping timeout: 250 seconds)
[15:37:33] *** Joins: Darkcoal (~user@130.164.143.112)
[15:37:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:40:39] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:41:52] *** Joins: rcf (rcf@iceland.sdf.org)
[15:42:06] *** Quits: gaude (~gaude@114-39-142-46.pool.kielnet.net) (Quit: Client closed)
[15:42:27] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Quit: Konversation terminated!)
[15:42:58] *** Quits: LaserPete (~Peter@ip4d17fd7c.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:42:59] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:45:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[15:48:17] *** Joins: otty (~u0_a161@2402:8100:390d:e25d:f893:8e33:3f7c:6a53)
[15:48:53] *** Quits: Nutte35 (~Nutte@202.153.80.188) (Read error: Connection reset by peer)
[15:49:33] *** Joins: Wanderer_42 (~Wanderer_@dslb-188-109-015-071.188.109.pools.vodafone-ip.de)
[15:51:14] *** Quits: iomari891 (~iomari891@197.210.71.129) (Quit: WeeChat 3.3)
[15:51:43] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:54:05] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[15:54:39] *** Joins: liba (~liba@user/liba)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:56:13] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[16:00:41] *** Joins: hehehe9 (~hehehe9@110.red-88-21-181.staticip.rima-tde.net)
[16:02:18] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Ping timeout: 250 seconds)
[16:02:54] *** Joins: fluter (~fluter@user/fluter)
[16:11:02] *** Quits: otty (~u0_a161@2402:8100:390d:e25d:f893:8e33:3f7c:6a53) (Ping timeout: 240 seconds)
[16:13:19] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[16:13:34] *** Quits: costanza (~i.am@user/heineken) (Ping timeout: 250 seconds)
[16:14:38] *** Joins: costanza (~i.am@179.83.23.163)
[16:14:39] *** Quits: costanza (~i.am@179.83.23.163) (Changing host)
[16:14:39] *** Joins: costanza (~i.am@user/heineken)
[16:15:22] *** Quits: costanza (~i.am@user/heineken) (Remote host closed the connection)
[16:15:36] *** Joins: costanza (~i.am@179.83.23.163)
[16:15:36] *** Quits: costanza (~i.am@179.83.23.163) (Changing host)
[16:15:36] *** Joins: costanza (~i.am@user/heineken)
[16:16:32] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:18:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[16:19:01] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Ping timeout: 256 seconds)
[16:22:59] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[16:26:25] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[16:29:07] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[16:30:38] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:36:29] *** Quits: aaa__ (~aaa__@2a02:27b0:5303:d6d0:c9cf:ce60:5dc6:24ec) (Quit: Leaving)
[16:42:40] *** Joins: r1d2 (~tom@2e407e8b.skybroadband.com)
[16:42:44] *** Joins: kriss (~kriss@213.239.83.90)
[16:42:52] *** costanza is now known as jhms
[16:42:53] *** Quits: jhms (~i.am@user/heineken) (Changing host)
[16:42:53] *** Joins: jhms (~i.am@user/marlboro)
[16:44:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:44:20] <r1d2> why is it that `printf("é›»è©±\n")` works? Are C strings defined as UTF8? I thought they were ASCII?
[16:44:21] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[16:44:25] *** Joins: stonkey2 (~stonkey@user/stonkey)
[16:45:21] <high_ground> Im not sure, but I assume unicodes are just made out of a few chars
[16:45:49] <high_ground> so when you wrote them to stdout your system renders it as unicode
[16:46:08] <trenka> r1d2: utf8 string is a normal char array, no problem here
[16:46:28] <trenka> that's the point of utf8
[16:46:48] <trenka> C is not limited to ascii anyhow
[16:47:21] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:48:21] <r1d2> interesting, at some point those kanji letters will need to be converted to utf8/unicode, do you know if it's my text editor or the compiler that's doing the conversion? I assume the text editor?
[16:48:59] <high_ground> I believe those letters are already unicode, so it doesnt need conversion
[16:49:01] <trenka> r1d2: it's pretty transparent for C, your editor enters it, your terminal interprets the output
[16:49:19] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:49:29] <r1d2> right I see, so as far as C can tell it's just an array, nothing special
[16:49:42] <high_ground> yea
[16:49:52] <high_ground> Unless you are on windows
[16:50:01] <high_ground> They use utf 16
[16:50:04] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com)
[16:50:09] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Ping timeout: 250 seconds)
[16:50:15] <r1d2> I see, thank you high_ground and trenka !
[16:50:17] <trenka> r1d2: nothing, it's not wchar_t
[16:51:09] *** Joins: hlauk (~hlauk@176.33.97.244)
[16:57:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:58:09] *** Joins: otty (~u0_a161@137.97.99.191)
[16:58:53] *** Quits: hlauk (~hlauk@176.33.97.244) (Quit: Leaving)
[17:01:14] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[17:01:26] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Read error: Connection reset by peer)
[17:02:10] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:06:16] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[17:06:26] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:07:12] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[17:07:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[17:07:49] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:08:22] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:10:36] *** Quits: hinata (~hinata@2409:4042:2d90:eac6:dc64:440f:45cb:fd7b) (Quit: Leaving)
[17:11:57] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[17:12:15] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:aaf6:d7cf:bef:465d) (Quit: Client closed)
[17:14:54] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[17:14:57] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[17:16:13] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[17:17:32] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[17:18:39] *** Joins: ahammer (~ahammer@157.122.68.240)
[17:19:54] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[17:21:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:22:19] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:22:28] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Ping timeout: 250 seconds)
[17:22:33] *** Quits: hehehe9 (~hehehe9@110.red-88-21-181.staticip.rima-tde.net) (Quit: Client closed)
[17:23:17] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[17:23:17] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[17:25:43] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[17:25:47] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[17:29:49] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[17:32:02] *** Quits: otty (~u0_a161@137.97.99.191) (Ping timeout: 240 seconds)
[17:32:33] <sham1> wchar_t is evil
[17:32:40] <sham1> At least one should use char16_t
[17:32:44] <Juliu> Then it fits to C
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:39:39] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[17:42:38] <fizzie> It isn't necessarily "bytes in the source are the bytes you get out", a lot of that is implementation-defined. In the GCC case, for example, https://gcc.gnu.org/onlinedocs/cpp/Character-sets.html
[17:43:30] *** Parts: steerpike (~echelon@gateway/tor-sasl/steerpike) ()
[17:44:35] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:45:11] *** Joins: badsektor (~badsektor@user/badsektor)
[17:48:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:51:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:53:01] <markand> wchar_t is fine only when not doing portable software, otherwise yes it's totally garbage
[17:54:19] <sham1> I only use wchar_t when I'm explicitly doing some Windows facing stuff, and even then I store my strings as UTF-8 until the very last moment, because of things like the UTF-8 Manifesto. Also makes it easier to do stuff with external things
[17:56:16] <sham1> Although on Windows I'd rather not do C if I could help it, since WinAPI is painful
[17:56:38] <lionkor> MSVC's C standard support is abysmal, too
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:57:10] <sham1> At least Visual Studio can use clang, so it's certainly better and work-aroundable
[17:58:05] *** Quits: r1d2 (~tom@2e407e8b.skybroadband.com) (Remote host closed the connection)
[17:58:17] <markand> MSVC is total insanity anyways, along with the win32 API
[17:58:21] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:58:24] *** Joins: r1d2 (~tom@2e407e8b.skybroadband.com)
[17:59:02] *** Joins: pulse (~pulse@user/pulse)
[17:59:12] <sham1> Well MSVC is fundamentally a C++ compiler with C as an afterthought. Meanwhile WinAPI is frankly terrible
[17:59:17] *** Joins: otty (~u0_a161@27.97.175.165)
[18:00:00] <ahammer> i think winapi is great
[18:00:07] <ahammer> great design
[18:00:08] <sham1> I prefer POSIX every day although I understand that not everyone shares the sentiment because POSIX has its fair share of stupid
[18:00:21] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[18:00:26] <ahammer> sadly POSIX cannot draw pixels for us
[18:02:11] <lionkor> for a good laugh, head to the microsoft STL github issues page
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:03:40] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:04:09] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:04:41] <zwr> Mingw-w64 makes Windows less painful. use it, your sanity will thank you
[18:05:12] <sham1> lionkor: at last they own up to their bugs
[18:06:37] <ahammer> mingw is shit on windows. unless u need to compile stuff come from the *nix world.
[18:07:01] <ahammer> no other compiler produce better code than MSVC compiler
[18:07:07] <ahammer> (on win)
[18:07:10] *** Joins: badsektor (~badsektor@user/badsektor)
[18:08:04] *** Quits: otty (~u0_a161@27.97.175.165) (Remote host closed the connection)
[18:08:04] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com) (Read error: Connection reset by peer)
[18:08:40] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-82.cspire.com)
[18:08:47] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[18:09:13] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[18:09:34] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:10:35] <lionkor> sham1: fair enough, now they just need the same for other components of their OS!
[18:11:39] <sham1> ahammer: I would argue clang, especially since apparently clang can link against MSVC compiled libraries and such when used with visual studio
[18:12:25] *** Joins: badsektor (~badsektor@user/badsektor)
[18:13:54] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[18:14:58] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[18:15:13] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:16:17] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[18:16:19] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:17:03] *** Joins: kts (~kts@103.73.237.142)
[18:17:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[18:18:01] *** Quits: Dotz0cat (~Dotz0cat@h177.233.31.71.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[18:19:23] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:21:36] *** Joins: Dotz0cat (~Dotz0cat@h214.238.31.71.dynamic.ip.windstream.net)
[18:22:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add)
[18:22:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add) (Changing host)
[18:22:25] *** Joins: skapata (~Skapata@user/skapata)
[18:24:25] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[18:24:58] *** Joins: malina (~malina@user/malina)
[18:26:23] *** Joins: jw4 (~Thunderbi@user/jw4)
[18:27:05] *** Quits: Dotz0cat (~Dotz0cat@h214.238.31.71.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[18:27:47] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:28:19] *** Joins: Dotz0cat (~Dotz0cat@h214.238.31.71.dynamic.ip.windstream.net)
[18:29:51] *** Joins: mrig (~mrig@user/mrig)
[18:31:22] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[18:32:06] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[18:33:32] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 250 seconds)
[18:34:19] *** Quits: ahammer (~ahammer@157.122.68.240) (Quit: Leaving)
[18:35:41] *** Joins: deck (~deck@177.172.19.128)
[18:36:02] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[18:36:29] *** Joins: kish` (~aqua@user/aqua)
[18:37:05] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[18:37:52] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:40:28] *** Quits: alch (~alch@to-18-92-189.service.infuturo.it) (Read error: Connection reset by peer)
[18:40:57] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[18:43:31] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[18:44:28] *** Joins: mikoto-chan (~mikoto-ch@ptr-4oim6bu0n4pp6j2y5oj.18120a2.ip6.access.telenet.be)
[18:44:32] *** Joins: alch (~alch@to-18-68-4.service.infuturo.it)
[18:50:01] *** Quits: avarab (avar@vm.nix.is) (Quit: Lost terminal)
[18:50:54] *** Joins: avar (avar@vm.nix.is)
[18:51:39] *** Quits: kts (~kts@103.73.237.142) (Quit: Konversation terminated!)
[18:52:09] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:56:49] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::4)
[18:56:56] *** Quits: raym (~raym@user/raym) (Ping timeout: 250 seconds)
[18:57:57] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[18:58:12] *** Joins: raym (~raym@user/raym)
[18:59:37] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[19:00:11] *** Joins: meator (~meator@user/meator)
[19:01:16] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[19:02:03] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:02:18] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:03:37] *** Quits: ozoned (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[19:04:44] *** Quits: Nutte35 (~Nutte@27.114.187.37) ()
[19:04:57] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[19:07:00] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:07:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:07:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:07:03] *** Joins: wroathe (~wroathe@user/wroathe)
[19:08:38] *** Quits: mikoto-chan (~mikoto-ch@ptr-4oim6bu0n4pp6j2y5oj.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[19:09:04] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 250 seconds)
[19:09:30] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[19:09:50] *** Parts: Wanderer_42 (~Wanderer_@dslb-188-109-015-071.188.109.pools.vodafone-ip.de) (carry on)
[19:10:02] *** Quits: Alhazred (~Alhazred@86.106.74.38) (Ping timeout: 240 seconds)
[19:10:41] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:17:05] *** Quits: Jong (~Jong@2620:10d:c090:400::5:44d9) (Quit: Textual IRC Client: www.textualapp.com)
[19:17:06] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[19:17:14] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b)
[19:21:37] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:8918:f95f:5239:8b3b) (Ping timeout: 240 seconds)
[19:21:50] *** Joins: almaember (~user@1F2EA950.dsl.pool.telekom.hu)
[19:22:41] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[19:22:49] <badsektor> i surpassed myself!
[19:22:50] <badsektor> https://github.com/ahmose231/advent2015/blob/main/7.c
[19:23:02] <badsektor> solution for AoC 2015 day 7!
[19:28:16] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:841f:4d2d:96db:3f6d) (Ping timeout: 245 seconds)
[19:28:25] *** Joins: almaember_ (~almaember@1F2EA950.dsl.pool.telekom.hu)
[19:30:31] *** Quits: almaember_ (~almaember@1F2EA950.dsl.pool.telekom.hu) (Client Quit)
[19:34:37] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[19:35:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:36:42] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:37:29] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:38:00] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[19:39:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[19:40:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:40:12] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::4)
[19:42:17] *** Joins: magla (~gelignite@55d4381b.access.ecotel.net)
[19:43:44] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 250 seconds)
[19:45:38] *** Joins: nyah (~nyah@94.6.71.219)
[19:47:28] *** Quits: ozoned (~odoood@2601:c8:c000:c4e0::4) (Quit: Leaving)
[19:47:54] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:49:55] *** Quits: deck (~deck@177.172.19.128) (Quit: WeeChat 3.4)
[19:50:12] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[19:51:17] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89) (Ping timeout: 240 seconds)
[19:51:33] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:52:15] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[19:52:18] <theseb> *p = 0xdeadbeef sets the VALUE the pointer points to....what about in declarations?..e.g. int *p = 0xdeadbeef; ?
[19:52:26] <theseb> i think latter sets the ADDRESS yes!?
[19:52:32] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[19:53:11] *** Joins: badsektor (~badsektor@user/badsektor)
[19:54:17] <sham1> Yes, in an "implementation-defined manner"
[19:54:52] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[19:57:25] *** Quits: badsektor (~badsektor@user/badsektor) (Client Quit)
[19:58:08] *** Joins: euouae (~euouae@user/euouae)
[19:58:12] *** Joins: mahmutov (~mahmutov@37.155.9.41)
[19:58:29] <theseb> sham1: ?
[19:58:30] <euouae> Hello, question about makefiles, does $@ $^ etc always work or are they only for C files?
[19:58:50] <theseb> sham1: you agree might be problematic that sets address since people are hard wired to think putting * in from of var means "I'm setting the value not the address" ?
[19:58:54] <sham1> euouae: yes, they're for all make targets, not just C
[19:59:16] <euouae> sham1, thank you. Do you also have some simplistic explanation for implicit rules? I don't understand them at all
[19:59:57] <pragma-> theseb: it's a pointer. you can't update the pointed at value before it points at anything!
[20:00:05] <sham1> euouae: I'd ask ##workingset since they have better knowledge of make there than I do
[20:00:25] <euouae> thank you
[20:00:42] <theseb> pragma-: i agree! still seems quirky at first
[20:01:10] <pragma-> I have never understood why some people think pointers are magic or difficult.
[20:01:13] *** Joins: Crassus (~Crassus@user/crassus)
[20:02:01] <euouae> pragma- maybe by the time you learned C you already had a concrete understanding of computers
[20:02:31] <euouae> but if you tried to learn C from some basic PHP knowledge, pointers were new...
[20:02:45] <pragma-> It's a logical concept. A mathematical thing. Knowledge of computer semantics is irrelevant.
[20:02:52] <sham1> Pointers have nothing really to do with computers. It's just stuff that the abstract machine has, which is useful on real hardware
[20:02:53] * pragma- shrugs.
[20:03:01] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:03:30] <euouae> no need to tell me :P
[20:04:58] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[20:06:07] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Remote host closed the connection)
[20:06:22] *** Joins: pulse (~pulse@user/pulse)
[20:07:19] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:09:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-29d9-0277-7525-223b.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:09:23] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:09:23] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[20:09:27] <pony> hi
[20:09:45] *** Joins: kish` (~aqua@user/aqua)
[20:09:56] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[20:10:02] *** Quits: euouae (~euouae@user/euouae) (Ping timeout: 240 seconds)
[20:10:13] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[20:10:33] <sham1> hi
[20:10:41] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[20:10:53] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[20:12:13] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:16:13] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[20:18:47] <theseb> if i malloc say 10 bytes....how can i set them all in one line?
[20:20:26] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[20:21:01] <sham1> uint8_t *buf = malloc(10); memset(buf, (uint8_t []){0, 1, 2, 3, 4, 5, 6, 7, 8, 9,},10);
[20:21:06] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:21:56] <theseb> sham1: thanks
[20:22:17] <sham1> ,cc uint8_t *buf = malloc(10); memset(buf, (uint8_t []){0, 1, 2, 3, 4, 5, 6, 7, 8, 9,},10); for(size_t i = 0; i < 10; i++) printf("%u ", buf [I]);
[20:22:18] <candide> sham1: warning: passing argument 2 of 'memset' makes integer from pointer without a cast [-Wint-conversion] note: expected 'int' but argument is of type 'uint8_t *' {aka 'unsigned char *'}  error: array subscript is not an integer
[20:22:30] <sham1> Err
[20:22:42] <sham1> ,cc uint8_t *buf = malloc(10); memcpy(buf, (uint8_t []){0, 1, 2, 3, 4, 5, 6, 7, 8, 9,},10); for(size_t i = 0; i < 10; i++) printf("%u ", buf [i]);
[20:22:44] <candide> sham1: 0 1 2 3 4 5 6 7 8 9
[20:22:50] <sham1> memcpy instead of memset
[20:22:53] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:24:07] <theseb> sham1: what is easiest to set 10 bytes to say... 0xdeadbeefdeadbeefaabb ?
[20:24:26] <theseb> are massive hex numbers like that alllowed?
[20:24:31] <sham1> No
[20:24:56] <theseb> ah bummer
[20:25:35] <sham1> The best you can do is something like (uint8_t []){0xbb, 0xaa, ...}
[20:25:46] <sham1> But even then it depends on endianness and suxh
[20:26:10] <theseb> sham1: ug...yes endianness
[20:26:12] <theseb> forgot about that
[20:26:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:27:00] *** Joins: badsektor (~badsektor@user/badsektor)
[20:27:46] *** Quits: badsektor (~badsektor@user/badsektor) (Client Quit)
[20:29:01] *** Joins: macintosh (~macintosh@103.241.225.155)
[20:29:16] *** Quits: macintosh (~macintosh@103.241.225.155) (Client Quit)
[20:29:53] *** Joins: ArminJ (~macintosh@103.241.225.155)
[20:31:33] *** Joins: bayleaf (~bayleaf@192.249.60.20)
[20:33:03] *** Quits: mahmutov (~mahmutov@37.155.9.41) (Ping timeout: 256 seconds)
[20:33:17] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[20:33:22] *** Quits: ArminJ (~macintosh@103.241.225.155) (Client Quit)
[20:33:39] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:36:45] *** Joins: mahmutov (~mahmutov@37.155.9.41)
[20:38:23] *** Joins: jw4 (~Thunderbi@user/jw4)
[20:39:03] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[20:39:27] *** Joins: orthoplex64 (~crm@70.120.0.94)
[20:39:41] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 256 seconds)
[20:40:09] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[20:41:02] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[20:41:32] <ChoHag> theseb: foo = "\336\255\276\357\336\255\276\357\252\273"; or bar = "\xde""\xad""\xbe""\xef""\xde""\xad""\xbe""\xef""\xaa""\xbb";
[20:41:56] <theseb> ChoHag: nice
[20:41:58] <theseb> thanks
[20:42:02] *** Quits: mahmutov (~mahmutov@37.155.9.41) (Ping timeout: 240 seconds)
[20:43:13] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:44:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Quit: Quit)
[20:44:38] *** Joins: mahmutov (~mahmutov@37.155.9.41)
[20:46:07] *** Quits: jw4 (~Thunderbi@user/jw4) (Quit: jw4)
[20:46:49] *** Joins: Atque (~Atque@user/atque)
[20:47:21] *** Quits: Common-Lisp (~common_li@12.2.190.242) ()
[20:47:37] *** Quits: plantman (~plantman@2601:405:4680:1b0::4) (Ping timeout: 240 seconds)
[20:48:23] *** Joins: plantman (~plantman@c-68-32-187-185.hsd1.mi.comcast.net)
[20:48:31] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[20:49:51] *** Joins: Betal (~Betal@user/betal)
[20:51:27] *** Joins: bkhl (~bkhl@user/bkhl)
[20:52:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:53:17] *** Quits: plantman (~plantman@c-68-32-187-185.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:56:44] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[20:57:11] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:58:12] *** Joins: bkhl (~bkhl@user/bkhl)
[20:58:31] *** Quits: stonkey2 (~stonkey@user/stonkey) (Quit: Leaving)
[20:58:40] *** Quits: boB_K7IQ (~boB_K7IQ@108.60.52.242) ()
[20:58:56] *** Quits: tbcr (~tbcr@107.13.189.161) (Killed (NickServ (GHOST command used by tbcr_!~brclark@user/tbcr)))
[20:59:44] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[21:00:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:00:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:00:35] *** Joins: wroathe (~wroathe@user/wroathe)
[21:01:12] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[21:03:24] *** Joins: plantman (~plantman@2601:405:4680:1b0::4)
[21:05:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:07:56] *** Joins: mh3f_ (~mdhowle@spcvpn.sonoco.com)
[21:08:14] *** Quits: fe23 (~fe23@2409:8a34:464:4990:25eb:87e9:38b6:c8ca) (Quit: fe23)
[21:09:19] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[21:10:24] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 250 seconds)
[21:10:25] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[21:13:30] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[21:13:52] *** Quits: magla (~gelignite@55d4381b.access.ecotel.net) (Ping timeout: 250 seconds)
[21:13:58] *** Joins: geli (~gelignite@55d4fbf8.access.ecotel.net)
[21:19:25] *** Joins: mh3f__ (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[21:19:27] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Remote host closed the connection)
[21:19:47] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[21:21:32] *** Quits: mh3f_ (~mdhowle@spcvpn.sonoco.com) (Ping timeout: 240 seconds)
[21:23:44] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[21:25:29] *** Joins: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net)
[21:26:08] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[21:26:18] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[21:27:28] *** Joins: pjucc (~puke@user/puke)
[21:27:29] *** puke is now known as Guest5859
[21:27:29] *** Quits: Guest5859 (~puke@user/puke) (Killed (strontium.libera.chat (Nickname regained by services)))
[21:27:29] *** pjucc is now known as puke
[21:27:55] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:30:50] *** Joins: stonkey (~stonkey@user/stonkey)
[21:39:15] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[21:41:02] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 240 seconds)
[21:43:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:43:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:43:48] *** Joins: wroathe (~wroathe@user/wroathe)
[21:46:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:46:38] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[21:48:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:48:32] *** Joins: xse (~xse@user/xse)
[21:52:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:54:45] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[21:55:46] *** Joins: stonkey2 (~stonkey@user/stonkey)
[21:57:53] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[21:58:10] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[21:59:14] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:00:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[22:00:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:04:01] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:04:18] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:04:20] *** Joins: stonkey (~stonkey@user/stonkey)
[22:04:39] *** Joins: seninha (~seninha@user/seninha)
[22:04:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[22:05:12] *** Joins: jan_ (~jan@aegl185.neoplus.adsl.tpnet.pl)
[22:05:30] *** Joins: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net)
[22:05:32] <jan_> can someone explain what's the purpose of these macros?
[22:05:33] <jan_> #define ALIGNB(x, align)    (((x) + ((align) - 1)) & ~((align) - 1))
[22:05:35] <jan_> #define ALIGN(x, align)     ((((x) + ((align) - 1)) / (align)) * (align))
[22:05:52] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[22:05:56] <jan_> and what they do
[22:06:31] <caze> Do you know what alignment is?
[22:07:37] <jan_> aligment means that compiler need to make my variables start at even bytes, am I right?
[22:07:50] <caze> No.
[22:09:04] <fizzie> ,cc #define ALIGN(x, align) ((((x) + ((align) - 1)) / (align)) * (align)) \n for (int i = 0; i < 10; i++) printf("%d - %d; ", i, ALIGN(i, 4)); // you might find the output of this illustrative of what ALIGN(x, 4) does for example
[22:09:07] <candide> fizzie: 0 - 0; 1 - 4; 2 - 4; 3 - 4; 4 - 4; 5 - 8; 6 - 8; 7 - 8; 8 - 8; 9 - 12;
[22:09:47] <sham1> It rounds you up to the next power of two
[22:10:04] <fizzie> Neither of those macros does that either.
[22:10:19] <sham1> Well sure, any multiple of a number
[22:10:35] <caze> Any multiple of 1/
[22:11:09] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Quit: Quit)
[22:11:24] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:12:03] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[22:12:45] <sham1> ALINGB gives you the next multiple of a power of two, by doing bit tricks
[22:12:57] <fizzie> ALIGN yields the smallest multiple of `align` that's greater than or equal to `x`; ALIGNB does the same when `align` is a power of two, and something that's almost certainly entirely useless when it's not.
[22:14:02] <caze> He still doesn't know what alignment is to begin with.
[22:14:19] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:14:37] <sham1> x = 0 mod m
[22:14:58] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:15:57] *** Quits: Darkcoal (~user@130.164.143.112) (Quit: Darkcoal)
[22:17:00] *** Joins: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca)
[22:17:23] <jan_> so what is the purpose of knowing the next multiple of 2 for my structure size?
[22:17:44] <sham1> What is the context
[22:18:15] <jan_> https://0x0.st/o-5z.txt
[22:18:28] <jan_> what is the purpose of aligned size
[22:18:34] <jan_> in this code
[22:18:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[22:18:49] <omegatron> to make it very simple: on 32-bit hardware you have an alignment of 4 (32 bits = 4 bytes) and on 64-bit hardware of 8 (64 bits = 8 bytes) - why even bother? because, for example, memory acceess at addresses which are a multiple of that alignment are faster than at other addresses ; and sometimes, it's the only way to access memory
[22:19:47] <omegatron> (on special hardware, often embedded)
[22:20:11] <jan_> i got it
[22:20:32] <sham1> omegatron: well one usually gets 8 and 16 bytes of alignment respectively because things like SIMD
[22:20:33] <sham1> But yes
[22:20:50] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:21:04] <jan_> https://0x0.st/o-5z.txt why there is this calculation of aligned_size instead of just mallocing size + sizeof *alloc_head
[22:21:04] <sham1> But of course the alignments are subsets of each other. If a stricter alignment is reached, you also get a less strict alignment
[22:23:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[22:24:33] *** Joins: hlauk (~hlauk@176.33.97.244)
[22:28:40] *** Quits: hlauk (~hlauk@176.33.97.244) (Client Quit)
[22:28:44] <fizzie> Well TBH that code's somewhat nonsensical. I can guess at what it's *attempting* to fix (while the pointer returned by `malloc` is suitable for "any type", modulo implementation-specific caveats, adding `sizeof *alloc_head` to it isn't necessarily so), but that's not what it does.
[22:31:13] *** Joins: Akiva (~Akiva@user/Akiva)
[22:33:32] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 240 seconds)
[22:35:13] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[22:35:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:38:51] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[22:39:40] <jan_> so to fix this code I need to also calculate the align for alloc_head?
[22:40:05] <jan_> and then malloc(aligned_size + aligned_alloc_head)?
[22:40:14] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:41:15] <jan_> can elaborate what's exactly the problem there with this malloc
[22:41:28] <jan_> *could you
[22:43:08] *** Quits: alch (~alch@to-18-68-4.service.infuturo.it) (Ping timeout: 250 seconds)
[22:43:19] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[22:43:34] <caze> jan_: Why are you messing with alignments when a moment ago, you didn't even know what alignment is?
[22:43:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[22:43:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:43:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:43:59] *** Joins: wroathe (~wroathe@user/wroathe)
[22:44:07] <sham1> Maybe they were looking at that code to understand what it does, but they didn't understand the alignment stuff
[22:44:46] <ChoHag> I think the biggest problem is that it's not aligning anything anywhere.
[22:44:56] *** Joins: alch (~alch@151.82.42.94)
[22:45:04] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:10] <caze> I think the biggest problem is that he doesn't understand the problem is was meant to solve.
[22:47:38] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:47:40] <jan_> exactly that
[22:47:54] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[22:49:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:49:29] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:49:33] <ChoHag> If an object is 4 bytes and it doesn't begin at an address which is a multiple of 4, the CPU has to read two words and do a bunch of bit shifting or it throws an exception.
[22:49:50] <ChoHag> Aligning objects of 4 bytes to a 4-byte boundary eliminates the problem.
[22:49:54] <caze> jan_: Do you know what an address bus is?
[22:50:23] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[22:50:35] <ChoHag> To do so you might allocate memory plus sufficient overhead, then increment the pointer received until it's an appropriate multiple.
[22:51:45] <ChoHag> CPUs (in general) can't read/write a single byte, they have to read multiples of whole words which surround that byte.
[22:51:50] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:52:33] <caze> jan_: The following has nothing to do with C itself, but it's some background for why things are the way they are.
[22:53:42] *** Joins: teut (~teut@2401:4900:1c68:6b85:81e5:34bc:8adc:b633)
[22:53:48] <ChoHag> So aligning objects to word-or-larger boundaries can in some cases make code a lot more efficient, and in other cases stop it from crashing outright.
[22:53:55] <caze> jan_: When you need data stored somewhere in memory, you put the memory address out on the address bus. This might be 8, 16, or 32 wires running in parallel. You set a bit on each wire, and that represents the address you want.
[22:54:34] <caze> jan_: The more wires you have, the harder the routing problem the electrical engineer has to implement the circuit.
[22:55:40] <caze> jan_: But if you only have e.g., 8 wires, then that limits you to 2^8 bytes of memory, unless instead of having each address reference a single byte, you have each address represent a block of bytes.
[22:56:02] *** Quits: pizdets (~pizdets@183.182.111.203) (Ping timeout: 240 seconds)
[22:56:23] <caze> jan_: And this is why we have alignment.
[22:56:37] <sham1> Or use multiple words per address
[22:56:39] <caze> They essentially solve a hardware problem by making the software harder.
[22:56:43] *** Joins: inlight (~inlight@157.35.72.43)
[22:56:44] *** Quits: inlight (~inlight@157.35.72.43) (Changing host)
[22:56:44] *** Joins: inlight (~inlight@user/inlight)
[22:56:50] *** Joins: pizdets (~pizdets@183.182.110.188)
[22:59:41] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:00:09] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[23:00:33] *** Joins: orthoplex64 (~crm@70.120.0.94)
[23:00:49] *** Parts: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) ()
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:02:25] <jan_> I will look into address bus and try to understand it more deeply, thanks a lot for explanation
[23:02:48] *** Joins: AmR (~AmREiSa@41.36.185.103)
[23:04:22] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[23:05:53] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[23:05:54] *** Joins: Dreg- (~Dreg@fr33project.org)
[23:06:42] <kurahaupo> caze: multiple data and address lines operating in parallel haven't been a thing since CPUs hit 100 MHz. Now it's all serial buses.
[23:07:09] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:07:21] <kurahaupo> Generally one "packet" is one cache line
[23:07:22] <caze> kurahaupo: Oh, and next you'll say there are busses wider than 8 bits.
[23:07:35] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[23:07:53] <kurahaupo> cereal buses take more than one bite
[23:08:25] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[23:08:36] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[23:09:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:09:26] *** Quits: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) (Client Quit)
[23:10:20] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[23:11:02] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:12:17] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[23:13:25] *** Joins: Joss (~joss@user/Joss)
[23:13:32] *** Quits: jan_ (~jan@aegl185.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[23:13:36] *** Joins: hanzo (uid532183@user/hanzo)
[23:13:58] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:15:10] *** Quits: Joss (~joss@user/Joss) (Client Quit)
[23:15:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:17:28] *** Quits: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) (Read error: Connection reset by peer)
[23:17:55] *** Quits: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[23:18:15] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:21:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:22:45] *** Joins: shadow_ (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[23:23:03] *** Joins: Akuli (~Akuli@82-203-165-133.bb.dnainternet.fi)
[23:23:18] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:30:05] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:30:09] *** Joins: superboot (~agentgasm@user/superboot)
[23:31:00] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[23:33:04] *** Joins: strajder (~strajder@user/strajder)
[23:35:31] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[23:36:16] *** Joins: inlight (~inlight@157.35.72.43)
[23:36:16] *** Quits: inlight (~inlight@157.35.72.43) (Changing host)
[23:36:16] *** Joins: inlight (~inlight@user/inlight)
[23:36:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:36:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:36:50] *** Joins: wroathe (~wroathe@user/wroathe)
[23:37:03] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:d0b9:9f3c:59d9:5e72)
[23:40:03] *** Joins: jan_ (~jan@aegl185.neoplus.adsl.tpnet.pl)
[23:40:38] <Kerr> Could someone help me understand what this function wants: SDL_Vulkan_GetInstanceExtensions(SDL_Window *window, unsigned int *pCount, const char **pNames); in the third arg. It wants char **, so do I need to give it an appropriately sized array of char** that don't point anywhere, and the function will allocate memory for the strings it will be
[23:40:39] <Kerr> returning, or do I need to allocate memory that pNames points to?
[23:41:14] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[23:41:30] <sham1> What does the documentation say
[23:41:41] <Kerr> https://wiki.libsdl.org/SDL_Vulkan_GetInstanceExtensions
[23:42:00] <Kerr> It's not terribly clear to me
[23:42:34] <Kerr> "a pointer to an array to be filled with required Vulkan instance extensions"
[23:42:37] <sham1> Alright, so
[23:43:29] <sham1> "If pNames is NULL, the the number of required Vulkan instance extensions is returned in pCount. Otherwise, pCount must point to a variable set to the number of elements in the pNames array, and on return the variable is overwritten with the number of names actually written to pNames."
[23:43:36] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:44:05] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:44:16] <sham1> So yeah, you first call it with pNames set to NULL. Then you allocate an array of pointer to const char, where the amount of elements is pCount
[23:44:22] <sham1> And then you call it again
[23:44:50] <sham1> There is a code example on the page as well. It's in C++ although it's not *that* hard to translate to C
[23:44:50] *** Joins: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:c58c:23fa:f7fc:b169)
[23:45:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Client Quit)
[23:45:24] <Kerr> I'm just not familiar with c++ vectors :/
[23:45:41] <sham1> Just think of it like an array
[23:45:54] <sham1> An array that knows its own size and can resize itself as needed
[23:45:55] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:46:18] <not_a_robot06> https://imgur.com/XM7URwM.png . I have no idea how to go about doing this... ik how to use typedef but how do I specify the number of bits?
[23:46:18] <sham1> So yeah, we can see from the example that it's first getting the amount of required Vulkan extensions
[23:46:24] <ChoHag> There's nothing in that call which wants vectors.
[23:46:33] <ChoHag> Does it use them to allocate the space or something?
[23:46:41] <sham1> It does exactly that
[23:47:31] <ChoHag> SDLVGIE(w, &c, NULL); x = calloc(c, sizeof (char *)); SDLVGIE(w, &c, x);
[23:47:37] <ChoHag> Probably some checking of return values.
[23:47:50] <ChoHag> Complete guess. Do I get a cookie?
[23:47:54] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[23:48:21] * sham1 hands ChoHag a cookie
[23:48:25] <sham1> That's exactly what one needs
[23:48:37] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Ping timeout: 240 seconds)
[23:50:02] *** Quits: almaember (~user@1F2EA950.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[23:50:17] <Kerr> Thanks, I just wanted to be sure, any not have something stupid or unexpected happen later haha. This is what I have (I removed the error checking code for clarity) https://ideone.com/ZL1iw7
[23:50:21] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[23:50:50] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[23:51:01] <sham1> One could also be tricky and do the following: unsigned int c; SDLVGIE(w, &c, NULL); const char *(*names)[c] = calloc(c, sizeof(**names)); SDLVGIE(w, &c, *names);
[23:51:09] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[23:51:17] <sham1> Sans checking errors, ofc
[23:51:28] <ChoHag> I'd say that's an error all by itself.
[23:51:53] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[23:52:05] <sham1> C2023 will make that portable again
[23:52:21] <ChoHag> I weep for our children.
[23:55:57] *** Joins: cust (amaama@blackbox.amaama.org)
[23:57:32] *** Joins: ju (~ju@user/ju)
[23:57:41] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:59:16] <nitrix> Given that you have the count `c`, why calloc instead of malloc? All of the elements are assigned.
[23:59:49] <ChoHag> Habit.
[23:59:54] <sham1> Could also do with a malloc sure. But yeah, habit
