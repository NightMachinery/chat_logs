[00:00:28] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[00:01:34] <gordonfish> buZz: Ah, I managed to dig it up: https://perl.bot/p/u4u8zy Wrote this a LOOOOOONG time ago (think the wheel had just been invented then.)
[00:01:35] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:02:07] <buZz> hahaha glorious
[00:02:15] <buZz> i wrote some recentish batch code too for winnt
[00:03:16] <buZz> https://gist.github.com/buzztiaan/941e8df18a7d4b13dd4c92f51aa65581 
[00:03:16] <Paperbot> Link title(s): [ copy latest 2 files from all subdirs · GitHub ]
[00:03:19] <buZz> dumb stuff :)
[00:03:32] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Ping timeout: 240 seconds)
[00:04:21] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[00:05:04] <gordonfish> buZz: Nice
[00:08:23] <buZz> gordonfish: they were doing this by hand before -_- going into ~200 subdirs and just grabbing the latest two setup.exe's
[00:08:34] <buZz> it was mindblowing, they spent almost a day doing it
[00:10:12] <ether> tab completion in bash has just started to get troublesome - filenames are being appended with / which I now have to manually delete before I execute my command. wtf?
[00:19:35] <gordonfish> buZz: Wow....
[00:20:26] <buZz> ether: i think bash is trying to tell you its a directory and not a file
[00:21:05] <gordonfish> ether: Sounds like a broken bash_completion set up
[00:21:50] * GumbyPAN CPAN Upload: Test-Expander-1.0.5 by JSF https://metacpan.org/release/JSF/Test-Expander-1.0.5
[00:23:14] <ether> yeah. but I haven't changed anything recently. it's weird!
[00:23:38] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[00:23:49] <ether> I'm trying to think of what might have changed in my environment recently - e.g. something upgraded - that would be relevant
[00:24:06] <ether> or how long this problem might have existed for. I just noticed it, and I use shell completion all the time, so surely it is recent
[00:25:02] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:9825:20f3:f69:55d5)
[00:27:44] <gordonfish> ether: System update perhaps? What OS/distro, and bash version (and bash-completion package) (On Debian and similar: dpkg -l bash\*, on RH based: rpm -qa | grep bash)
[00:28:22] <ether> GNU bash, version 5.1.4(1)-release (x86_64-apple-darwin19.6.0)
[00:28:27] <ether> no system updates recently
[00:28:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 268 seconds)
[00:28:30] <ether> nor macports
[00:28:45] <gordonfish> I have the same version of bash on debian
[00:28:56] *** Joins: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[00:29:27] <ether> wtf, now it's not reproducable
[00:29:31] <gordonfish> and that slash on the end of files doesn't happen for me, so I'm guessing it's either a bash-completion thing or something broken in the mac build of bash
[00:29:31] * ether ಠ_ಠ
[00:29:40] <gordonfish> Err, it's not happening now?
[00:29:45] <ether> no! wtf. :)
[00:29:59] <ether> I'm going to write this off as some sort of terminal display bug that has gone away
[00:30:14] <gordonfish> (dumb question, are you sure that wasn't actually a directory?)
[00:30:19] <ether> I have something weird in my prompt that sometimes results in badly rendered lines e.g. when uparrowing
[00:30:34] <ether> it may have been! I'm trying to find which window it was in
[00:30:54] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[00:31:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[00:31:53] *** Quits: mns` (~fu@191.253.155.68) (Ping timeout: 256 seconds)
[00:31:58] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[00:33:45] *** Joins: mns` (~fu@187.32.234.131)
[00:34:26] <gordonfish> I've seen mac versions of common tools found on unix-like system to act bizzarly before. I remember not long ago fixing something on a Yosemite, need to use nano, only to have all the text (both the body and the function labels at the bottom) be blank.
[00:38:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[00:40:49] *** Quits: mns` (~fu@187.32.234.131) (Ping timeout: 268 seconds)
[00:41:09] <simcop2387> gordonfish: this is why i usually install gnu coreutils and setup aliases.
[00:41:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:41:53] <simcop2387> there's something to be said about using POSIX only stuff, but honestly that leaves a hell of a lot to be desired.  even over stuff that *BSDs generally extend from posix
[00:42:27] *** Joins: mns` (~fu@191.253.155.68)
[00:43:04] <gordonfish> simcop2387++ # I do the same when ever I need to do any extensive work on some mac
[00:46:52] * GumbyPAN CPAN Upload: CtrlO-Crypt-XkcdPassword-1.011 by DOMM https://metacpan.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.011
[00:48:06] <simcop2387> mst: wednesday addams cosplay https://i.redd.it/8mse0ysluyy71.jpg
[00:48:34] *** Joins: kensanata (~user@user/kensanata)
[00:49:09] <gordonfish> Oh nice
[00:50:02] <gordonfish> simcop2387: It's like Wednesday if she just came out of Nightmare before Christmas after a layover in Coraline
[00:51:36] <gordonfish> (Also kind of reminds me of a Fennah creature)
[00:52:59] <kensanata> How would I wrote a test in Perl to check for correct closing of TLS 1.2/1.3 connections including the close_notify message? I have two Python scripts that test for it, but I'd like to test it in a Perl unit test.
[00:54:07] <kensanata> Grepping for "notify" in the IO::Socket::SSL t/ did not find any matches.
[00:55:46] <gordonfish> That's probably going to be in Net::SSLeay
[00:56:32] <kensanata> Hm right. Checking those tests.
[00:57:18] <alh> Seems like maybe Net::SSLeay::get_shutdown($ssl); # Look for SSL_RECEIVED_SHUTDOWN
[00:57:50] *** Quits: wwalker (~wwalker@platinum.solid-constructs.com) (Quit: leaving)
[00:58:17] <kensanata> Oh, yeah, that looks interesting.
[00:59:30] <Adura> SSLeay never was sure how to pronounce that.
[00:59:45] <Adura> Needed more comma, but you get the idea.
[01:01:09] <gordonfish> Adura: As a word, I'd think like 'sleigh', though I've always thought it in my head as just 'S-S-Lay' like the name of a steam ship.
[01:02:26] <simcop2387> gordonfish: it's really the wig that makes it so creepy
[01:02:31] <gordonfish> (Although my mind a while back would always think 'S-S-L' and then add 'Lay', forgetting that I already considered the L, basically backtracking. Human brains are weird things.)
[01:03:02] <ology> SSL, the letters plus the syllable "eay" in my brain. Ugly but whatever.
[01:03:16] <gordonfish> simcop2387: Indeed
[01:03:18] <ology> Eee-yay!
[01:03:35] <simcop2387> it's pronouced fiah, just oike ghoti
[01:03:38] <simcop2387> fish*
[01:03:39] <gordonfish> ology: Careful, Cathulu is stirring
[01:03:40] <simcop2387> bah
[01:03:45] <Grinnz> secure sockets layer eric andrew young
[01:03:55] <gordonfish> cathulhu*
[01:04:04] <mst> kensanata: while I'm not going to object per se to "writing more tests", surely if you're calling close() correctly yourself then it's the responsibility of the underlying module to get this right and you're unit testing somebody else's code here?
[01:05:07] <gordonfish> That was what I was thinking
[01:05:16] <kensanata> mst: kraih commented on my PR, "Seems like something that could be tested with a unit test." https://github.com/mojolicious/mojo/pull/1875 -- now I feel obligated to at least attempt it. Instead of just showing it using gnutls-cli.
[01:05:18] <Paperbot> Link title(s): [ Close handle when closing the stream by kensanata · Pull Request #1875 · mojolicious/mojo · GitHub ]
[01:06:02] <gordonfish> Unless you have a good need to get dirty, you should be able to rely on the well seasoned modules that exist
[01:06:54] * GumbyPAN CPAN Upload: Commons-Link-0.04 by SKIM https://metacpan.org/release/SKIM/Commons-Link-0.04
[01:07:04] <mst> kensanata: a unit test would be one that tests IO::Socket::SSL->close is called at the right point though
[01:08:21] <kensanata> mst: I was somehow hoping I could stash the handle away somewhere, and after the close I'd still have a reference that I could test for it's state. But then again, I'm just exploring what my option even are at this point.
[01:09:47] <mst> hmm
[01:09:59] <kensanata> gordonfish: I guess I'm trying to show that either IO::Socket::SSL or Mojo::IOLoop::Stream have a bug.
[01:10:04] <mst> grabbing the $handle and using get_shutdown is certainly a way to check if it's done the right thing
[01:10:34] <kensanata> gordonfish: the problem description is here, using gnutls-cli: https://github.com/mojolicious/mojo/issues/1876
[01:10:35] <Paperbot> Link title(s): [ Closing TLS connections · Issue #1876 · mojolicious/mojo · GitHub ]
[01:10:43] <mst> but also I'm surprised IO::Socket::SSL doesn't end up calling ->close in DESTROY if that's required
[01:10:46] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c)
[01:11:03] <kensanata> mst: Yeah, I wonder whether there is a use case for that.
[01:11:34] <mst> wait wtf
[01:11:35] <mst> https://metacpan.org/dist/IO-Socket-SSL/source/lib/IO/Socket/SSL.pm#L2123
[01:11:36] <Paperbot> Link title(s): [ lib/IO/Socket/SSL.pm - metacpan.org ]
[01:11:50] <mst> it *deliberately* stops the shutdown handling happen if DESTROYed without a specific close
[01:12:59] <kensanata> I see the word "thread" and I'm starting cry already.
[01:13:30] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:9c57:4715:1ac5:a700) (Ping timeout: 268 seconds)
[01:14:43] <mst> https://github.com/mojolicious/mojo/pull/1875#issuecomment-966647747
[01:14:44] <Paperbot> Link title(s): [ Close handle when closing the stream by kensanata · Pull Request #1875 · mojolicious/mojo · GitHub ]
[01:15:10] <mst> kensanata: oh hah if it's because if a $socket gets cloned across threads you don't want to accidentally murder the connection ... *augh*
[01:15:12] <gordonfish> mst: IMHO that is a great example of where a comment should have been left so future readers can easily tell what the reasoning was.
[01:15:23] <ether> aha, found the shell with the bad shell completion!
[01:15:24] <mst> like a DBI InactiveDestroy type bug
[01:15:31] <ether> the so-called directory does indeed NOT exist.
[01:15:43] <kensanata> mst: Thank you very much! 
[01:16:54] * mst edits comment
[01:17:20] <mst> kensanata: well, at least we're now a slightly better informed version of completely confused :D
[01:21:18] <gordonfish> ether: Hmm, strange. How can it return a completion result for something that doesn't exist?
[01:22:17] *** Quits: magla (~gelignite@55d4f4a1.access.ecotel.net) (Quit: Stay safe!)
[01:24:49] <ether> I killed the shell and replaced it. it will remain a mystery forever
[01:25:02] *** Quits: mns` (~fu@191.253.155.68) (Ping timeout: 260 seconds)
[01:25:27] <gordonfish> ether: So it only happens with the stock mac version?
[01:26:12] <mst> ether: oh, it was only one specific bash/whatever instance?
[01:26:52] <ether> aye
[01:27:24] <gordonfish> Yeah does 'replace' mean you built/installed another version or just restarted the existing one anew
[01:27:26] <gordonfish> Ah
[01:27:39] <ether> I just opened a new tab in my terminal and killed the bad one
[01:27:43] <mst> could easily be something like "at some point it thought it saw a symlink to something and cached that", bash's tendency to try and be clever across symlinks has got it into a confused state from time to time for me
[01:27:53] <mst> and even if symlinks weren't involved in this specific case
[01:28:10] <mst> "some random bit of clever got confused in that specific process" seems like a pretty reasonable default guess
[01:28:25] <ether> my only guess is it was a termcap issue. I do occasionally do things like vi `..some command.. | less` by accident
[01:28:29] <gordonfish> (Note, you could just do `exec bash` or `exec bash -l` instead of having to load a new tab and kill it manually
[01:28:30] <gordonfish> )
[01:28:57] <mst> gordonfish: what ether did is a cleaner new start though (env vars etc.)
[01:29:05] <mst> and likely no more keystrokes
[01:29:25] <lopid> hash -r
[01:30:05] <gordonfish> good point
[01:30:46] <gordonfish> exec env -i bash (-l, depending on your set up) should do it
[01:31:52] <gordonfish> exec bash is what I'm sometimes done after updating bash and wanting to update my session without loosing it
[01:34:47] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 256 seconds)
[01:35:27] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[01:36:57] * GumbyPAN CPAN Upload: Slovo-2021.11.11 by BEROV https://metacpan.org/release/BEROV/Slovo-2021.11.11
[01:38:02] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 240 seconds)
[01:39:51] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c) (Read error: Connection reset by peer)
[01:40:30] *** Joins: WinterStar (~IceLight@user/icelight)
[01:43:13] *** Quits: eblip (~eb0t@90.209.246.132) (Ping timeout: 250 seconds)
[01:44:49] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[01:45:28] <gordonfish> ^ 'Slovo-2021.11.11' <- Interesting use of a dotted decimal version...
[01:46:58] <kensanata> Hehe. All the date format warriors turn in their graves.
[01:46:58] * GumbyPAN CPAN Upload: HTTP-Message-6.35 by OALDERS https://metacpan.org/release/OALDERS/HTTP-Message-6.35
[01:47:35] <gordonfish> Re: <kensanata> gordonfish: the problem description is here, using gnutls-cli: https://github.com/mojolicious/mojo/issues/1876
[01:47:35] <Paperbot> Link title(s): [ Closing TLS connections · Issue #1876 · mojolicious/mojo · GitHub ]
[01:47:37] <gordonfish> Looking again at that link, I wonder if the problem comes from not specifying content length.
[01:49:00] <gordonfish> kensanata: I just noticed something else. You're starting your server daemon with port => 3000 but connecting to localhost:1965 with gnutls-cli
[01:49:06] <gordonfish> That is, wrong port
[01:49:37] <kensanata> Yeah, a typo. I'll fix that. The reason being that the PR actually refers to the Gemini protocol which uses 1965 as a default port.
[01:51:12] <kensanata> gordonfish: the Gemini protocol also doesn't have headers, so no content length, much like Gopher, Finger, and other such older protocols.
[01:51:13] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[01:56:05] <gordonfish> kensanata: Ok I got the same error message, until I commented out #$stream->close_gracefully();
[01:56:35] *** Quits: mjones (sid6844@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[01:57:32] <gordonfish> It maybe seem kind of ironic, but I suspect that closing is handled properly normally and calling that method explicitly might be doubling up the closing portion and causing gnutls-cli to get confused, or something there abouts.
[01:58:39] <gordonfish> (That is, before commenting out that line, I was getting the same "*** Fatal error: The TLS connection was non-properly terminated.", "*** Server has terminated the connection abnormally." message that you did.
[01:58:51] <gordonfish> With it commented out, the last line I see from gnutls-cli is Hello
[01:59:56] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:02:03] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:04:17] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[02:06:21] <gordonfish> kensanata: Aafter a little digging, I was right that close_gracefully is called automatically: https://metacpan.org/dist/Mojolicious/source/lib/Mojo/IOLoop.pm#L86
[02:06:21] <Paperbot> Link title(s): [ lib/Mojo/IOLoop.pm - metacpan.org ]
[02:06:40] <gordonfish> So also calling it your self was resulting in it being called twice.
[02:07:11] <gordonfish> You're supposed to let the Mojo::IOLoop handle it.
[02:08:45] *** Quits: kylese (~kylese@p5dd8ba77.dip0.t-ipconnect.de) (Quit: Leaving)
[02:09:25] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[02:11:14] <kensanata> gordonfish: uh... one moment while I finish this other thing...
[02:11:49] <kensanata> Trying to figure out how to check the get ssl shutdown response. Where is SSL_RECEIVED_SHUTDOWN defined...
[02:12:00] * GumbyPAN CPAN Upload: Lingua-EN-Inflexion-0.002001 by DCONWAY https://metacpan.org/release/DCONWAY/Lingua-EN-Inflexion-0.002001
[02:14:01] <gordonfish> (I do wonder if it is a bug that Mojo::IOLoop::Stream doesn't track if its been closed already. I can't think of any good reason to ever allow it to occurr more than one.)
[02:16:02] <gordonfish> (https://metacpan.org/dist/Mojolicious/source/lib/Mojo/IOLoop/Stream.pm#L22 should probably have something like return if $self->is_closed or so.)
[02:16:03] <Paperbot> Link title(s): [ lib/Mojo/IOLoop/Stream.pm - metacpan.org ]
[02:17:23] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:23:32] *** Quits: xenial-user5 (~androirc@20014C4C17E1D20014B43D8B18B5D672.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[02:23:59] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 246 seconds)
[02:24:32] *** Quits: proller (~p@2a02:6b8:b081:8831::1:1d) (Ping timeout: 240 seconds)
[02:25:07] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:25:13] *** Quits: perldoc (~perldoc@24.88.49.194) (Ping timeout: 256 seconds)
[02:25:14] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Ping timeout: 260 seconds)
[02:25:14] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 260 seconds)
[02:25:15] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 250 seconds)
[02:25:47] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 256 seconds)
[02:30:40] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[02:32:02] * GumbyPAN CPAN Upload: Slovo-2021.11.12 by BEROV https://metacpan.org/release/BEROV/Slovo-2021.11.12
[02:32:22] *** Joins: jabberwok (~wlindley@75.105.20.104)
[02:33:19] *** Joins: kaitlyn03 (~kaitlyn@user/kaitlyn)
[02:33:32] *** Quits: pizdets (~pizdets@183.182.114.210) (Ping timeout: 240 seconds)
[02:33:41] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[02:34:11] *** Joins: pizdets (~pizdets@183.182.110.210)
[02:36:35] <kensanata> gordonfish: I'm not sure. It seems to me that close_gracefull calls close and close does a return unless my $handle  = delete $self->timeout(0)->{handle} -- which the first time returns something and the next time does not, so no harm done?
[02:37:32] *** Joins: proller (~p@2a02:6b8:b081:7216::1:2a)
[02:38:10] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[02:38:17] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[02:38:45] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[02:38:45] *** ChanServ sets mode: +v perlbot
[02:39:23] <gordonfish> kensanata: From what I see in https://metacpan.org/dist/Mojolicious/source/lib/Mojo/IOLoop/Stream.pm#L30, ->close will be called each time ->close_gracefully is (as long as ->is_writing isn't true.)
[02:39:25] <Paperbot> Link title(s): [ lib/Mojo/IOLoop/Stream.pm - metacpan.org ]
[02:39:44] *** Joins: perldoc (~perldoc@24.88.49.194)
[02:41:06] <gordonfish> kensanata: Oh, I see what you were referring to
[02:41:08] <kensanata> gordonfish: Yeah, but I'm saying that in line 25 close returns early the second time around so I'm not understanding how this can lead to problems. I do agree, however, that without close_gracefully, the error disappears.
[02:41:15] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[02:41:22] <kensanata> There's also a tiny lag that I don't know where it comes from...
[02:42:45] <kensanata> I mean, it must be possible for the server to close the stream when some validation fails... 
[02:43:28] <kensanata> I agree that when I close the stream, the problem appears; I'm just not convinced that I'm supposed to never close that stream myself. That seems ... counterintuitive.
[02:44:43] <gordonfish> It might be good to ask over in #mojo on this network. I am in the process of typing out a question there.
[02:46:03] *** Joins: phryk (~totallyno@user/phryk)
[02:46:06] <kensanata> Yeah… but it's 00:15 over here and I think I need to sleep
[02:46:29] <gordonfish> kensanata: I was looking at your jithub issue again and noticed that I never see '- Peer has closed the GnuTLS connection' when I test.
[02:46:42] <gordonfish> kensanata: No problem, sleep well.
[02:47:09] <kensanata> Thanks. Perhaps a version issue? I have gnutls-cli 3.6.7
[02:47:21] *** Quits: phryk (~totallyno@user/phryk) (Remote host closed the connection)
[02:47:25] *** Joins: whynot (~whynot@37.73.167.183)
[02:47:29] <gordonfish> Might be
[02:48:43] *** Joins: phryk (~totallyno@user/phryk)
[02:50:45] <gordonfish> kensanata: Ok tried it on my home system (debian), using 3.7.1, and I do see '- Peer has closed the GnuTLS connection'. I was testing before from another system that had an older version indeed.
[02:51:59] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 264 seconds)
[02:57:01] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597)
[02:58:19] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597) (Read error: Connection reset by peer)
[02:59:23] *** Joins: splatt9990 (~splatt999@2607:fb90:373:b402:5bfa:170a:90ef:c663)
[02:59:49] *** Quits: splatt9990 (~splatt999@2607:fb90:373:b402:5bfa:170a:90ef:c663) (Read error: Connection reset by peer)
[03:00:01] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597)
[03:00:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[03:00:39] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597) (Read error: Connection reset by peer)
[03:01:02] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597)
[03:02:25] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597) (Read error: Connection reset by peer)
[03:03:01] *** Joins: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597)
[03:04:06] *** Quits: splatt9990 (~splatt999@2600:2b00:8a19:ea00:acca:1c22:9266:f597) (Read error: Connection reset by peer)
[03:04:53] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[03:05:33] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[03:06:01] <gordonfish> kensanata: What I believe is happening is more simple than we realized. Closing the stream in that read callback is simply premature, not allowing the server to finish it's TLS conversation with the client, causing gnutls-cli to emit that 'The TLS connection was non-properly terminated.' error, since it was cut off. It makes total sense when you consider the read callback is for handling http communication, not tls stuff.
[03:06:07] <gordonfish> Bah, he left.
[03:21:29] *** Quits: schro (~schroding@etruscan.konundrum.org) (Read error: Connection reset by peer)
[03:21:39] *** Quits: Benett (~Benett@2a03:4000:1a:7aa::2) (Quit:  )
[03:21:42] *** Quits: keir (~keir@user/keir) (Quit: I've gone)
[03:21:43] *** Joins: schro (~schroding@etruscan.konundrum.org)
[03:21:57] *** Joins: Benett (~Benett@xnetx.de)
[03:22:01] *** Joins: keir (~keir@user/keir)
[03:22:04] *** Joins: Russell- (~russell@bnc4free/staff/russell)
[03:22:05] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:22:53] *** Quits: Russell (russell@bnc4free/staff/russell) (Read error: Connection reset by peer)
[03:24:16] *** Russell- is now known as Russell
[03:59:47] *** Quits: proller (~p@2a02:6b8:b081:7216::1:2a) (Ping timeout: 264 seconds)
[04:01:27] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:15:04] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[04:18:58] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[04:19:25] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[04:24:49] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[04:27:22] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[04:50:50] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[05:00:10] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Ping timeout: 260 seconds)
[05:01:55] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[05:09:53] *** Quits: whynot (~whynot@37.73.167.183) (Quit: leaving)
[05:54:17] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:04:24] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:16:32] *** Quits: Su-Shee (~Susanne@p4ffc7e5b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:18:35] *** Joins: Su-Shee (~Susanne@p50894171.dip0.t-ipconnect.de)
[06:32:08] *** Quits: ProperNoun (~sanko@172-2-59-65.lightspeed.clmasc.sbcglobal.net) (Ping timeout: 246 seconds)
[06:42:49] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:53:01] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Remote host closed the connection)
[06:53:14] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[06:54:58] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Remote host closed the connection)
[06:58:56] *** Joins: pucara (~i@181.95.206.147)
[07:01:17] *** Quits: llh (~llh@user/llh) (Ping timeout: 264 seconds)
[07:04:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:03] *** finn_elija is now known as FinnElija
[07:12:22] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) ()
[07:15:53] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[07:28:53] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[07:28:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:29:08] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[07:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[07:47:39] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 250 seconds)
[07:59:21] *** Quits: Martchus (~martchus@dynamic-095-117-011-154.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[07:59:44] *** Joins: Martchus (~martchus@2a01:c23:b858:7d00:d250:99ff:fe49:3cce)
[08:05:49] *** Joins: tbcr- (~tbcr@107.13.189.161)
[08:06:19] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:06:26] *** Joins: llh (~llh@user/llh)
[08:08:47] *** Joins: _quaddam1ge (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[08:13:51] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[08:13:51] *** Quits: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com) (*.net *.split)
[08:13:51] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[08:13:51] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:13:51] *** Quits: bigpresh (~bigpresh@libera/staff/bigpresh) (*.net *.split)
[08:13:51] *** Quits: a3r0 (~aero@61.100.184.210) (*.net *.split)
[08:13:51] *** Quits: Botje (~Botje@mang.sgaap.be) (*.net *.split)
[08:18:25] *** Joins: marienz (~marienz@libera/staff/marienz)
[08:18:25] *** Joins: chronon (~chronon@user/chronon)
[08:18:25] *** Joins: bigpresh (~bigpresh@libera/staff/bigpresh)
[08:18:25] *** Joins: a3r0 (~aero@61.100.184.210)
[08:18:25] *** Joins: Botje (~Botje@mang.sgaap.be)
[08:23:37] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 250 seconds)
[08:26:07] *** Joins: WinterStar (~IceLight@user/icelight)
[08:27:57] *** Quits: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com) (Ping timeout: 268 seconds)
[08:32:01] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:32:17] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[08:32:37] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:33:15] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:33:55] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[08:34:07] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[08:34:17] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:35:13] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[08:35:37] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:35:56] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[08:36:20] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:36:24] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[09:27:07] *** Joins: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi)
[09:28:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[09:40:08] *** Quits: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:40:32] *** Joins: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi)
[09:48:54] *** Quits: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:49:36] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:50:03] *** Joins: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi)
[09:56:33] *** Quits: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:57:00] *** Joins: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi)
[10:01:33] *** Quits: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi) (Ping timeout: 250 seconds)
[10:01:59] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 268 seconds)
[10:05:38] *** Joins: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi)
[10:05:50] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[10:06:32] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Ping timeout: 240 seconds)
[10:07:05] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:07:12] *** Joins: diskin (~diskin@46.41.64.76)
[10:10:49] *** Joins: zhmylove (~zhmylove@5.142.46.222)
[10:11:14] *** Quits: mattil (~mattil@dtdj9nckr02tprsvwx8-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[10:11:26] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Ping timeout: 260 seconds)
[10:12:48] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:13:44] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:13:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[10:13:59] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:18:08] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[10:20:43] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:21:34] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:26:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:34:55] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[10:42:45] *** Joins: zkrd (~xdg@2a02:587:de00:6d00:f4ab:2db4:2d71:c63e)
[10:46:40] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[10:47:46] *** Joins: Tempesta (~Tempesta@user/tempesta)
[10:49:56] *** Joins: cation (cation@user/cation)
[10:51:17] *** Joins: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:02:49] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[11:03:44] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[11:03:44] *** Quits: diskin (~diskin@46.41.64.76) (Killed (sodium.libera.chat (Nickname regained by services)))
[11:03:44] *** diskin_ is now known as diskin
[11:07:26] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 260 seconds)
[11:14:48] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[11:17:36] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[11:17:37] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:19:38] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:28:23] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:31:19] *** Joins: martinus__ (~martin@95.31.201.77.rev.sfr.net)
[11:35:13] *** Quits: zhmylove (~zhmylove@5.142.46.222) (Read error: Connection reset by peer)
[11:35:34] *** Joins: zhmylove (~zhmylove@188.170.86.221)
[11:36:06] *** Joins: SergeiZhmylev (~zhmylove@188.170.86.221)
[11:38:17] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:39:42] *** Joins: diskin (~diskin@46.41.64.76)
[11:41:58] * GumbyPAN CPAN Upload: Math-GMPq-0.48 by SISYPHUS https://metacpan.org/release/SISYPHUS/Math-GMPq-0.48
[11:47:47] *** Quits: pucara (~i@181.95.206.147) (Quit: Lost terminal)
[11:48:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 264 seconds)
[11:49:47] *** Joins: art1 (~romeyke@p200300ccdf08ed00333adac4b46cb5e4.dip0.t-ipconnect.de)
[12:07:28] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[12:27:03] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[12:30:12] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[12:31:13] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[12:31:13] *** diskin is now known as Guest1481
[12:31:13] *** diskin_ is now known as diskin
[12:31:40] *** Joins: Manderson_ (~manderson@45.40.81.122)
[12:32:38] *** Joins: __Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:32:41] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[12:33:46] *** Quits: Guest1481 (~diskin@46.41.64.76) (Ping timeout: 260 seconds)
[12:34:14] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 260 seconds)
[12:36:02] *** Quits: Manderson_ (~manderson@45.40.81.122) (Ping timeout: 240 seconds)
[12:37:41] *** Quits: Pixi_ (~Pixi@user/pixi) (Quit: Leaving)
[12:37:45] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[12:38:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:42:19] *** Joins: randir (~randir@93.159.239.42)
[12:47:42] *** Joins: Pali (~pali@user/pali)
[12:48:41] *** Joins: Pixi (~Pixi@user/pixi)
[12:52:02] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[12:57:27] *** Joins: cation (cation@user/cation)
[13:04:30] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[13:12:13] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:12:55] *** Quits: zhmylove (~zhmylove@188.170.86.221) (Ping timeout: 256 seconds)
[13:14:02] *** Joins: zhmylove (~zhmylove@5.142.46.222)
[13:15:32] *** Quits: SergeiZhmylev (~zhmylove@188.170.86.221) (Ping timeout: 240 seconds)
[13:16:39] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[13:20:23] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[13:26:30] <Altreus> .
[13:27:35] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 246 seconds)
[13:31:38] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[13:34:45] *** Joins: mns` (~fu@191.253.155.68)
[13:37:10] * GumbyPAN CPAN Upload: SelectPdf-1.2.0 by SELECTPDF https://metacpan.org/release/SELECTPDF/SelectPdf-1.2.0
[13:41:27] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[13:52:04] <Ovid> Anyone here have strong experience with PPR:X?
[13:57:59] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:58:17] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[13:58:27] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:05:01] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Read error: Connection reset by peer)
[14:05:17] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:07:13] * GumbyPAN CPAN Upload: SelectPdf-1.2.1 by SELECTPDF https://metacpan.org/release/SELECTPDF/SelectPdf-1.2.1
[14:14:07] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 256 seconds)
[14:15:33] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Read error: Connection reset by peer)
[14:16:39] *** Joins: tobybl (~tobybl@213.31.134.235)
[14:18:57] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 250 seconds)
[14:22:28] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[14:24:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[14:24:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[14:24:37] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[14:24:37] *** finn_elija is now known as FinnElija
[14:25:07] *** Joins: jabberwok (~wlindley@75.105.20.104)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:57] <rindolf> Ovid: https://dontasktoask.com/
[14:30:58] <Paperbot> Link title(s): [ Don't ask to ask, just ask ]
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:32:49] *** Quits: mns` (~fu@191.253.155.68) (Ping timeout: 256 seconds)
[14:32:59] *** Joins: mns` (~fu@187.32.234.131)
[14:37:19] <Ovid> rindolf: in that case: https://gist.github.com/Ovid/010e2a42511bb6c8706d3ad702a1730a
[14:37:20] <Paperbot> Link title(s): [ Failure to match `extends` · GitHub ]
[14:37:32] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:39:28] <Altreus> well now I know what PPR::X is
[14:41:17] * GumbyPAN CPAN Upload: Google-Ads-GoogleAds-Client-9.2.0 by WFANSH https://metacpan.org/release/WFANSH/Google-Ads-GoogleAds-Client-9.2.0
[14:41:22] <rindolf> Ovid: shouldn't line https://gist.github.com/Ovid/010e2a42511bb6c8706d3ad702a1730a#file-dep-scanner-pl-L199 contain an "extends" key?
[14:41:22] <Paperbot> Link title(s): [ Failure to match `extends` · GitHub ]
[14:41:56] <Ovid> rindolf: reload, please. I updated that a couple of minutes ago when I realized I had an older version.
[14:47:59] *** Joins: cation21 (cation@user/cation)
[14:48:47] *** Quits: cation (cation@user/cation) (Ping timeout: 246 seconds)
[14:51:14] *** cation21 is now known as cation
[14:55:21] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 250 seconds)
[14:56:16] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:56:18] * GumbyPAN CPAN Upload: SelectPdf-1.2.2 by SELECTPDF https://metacpan.org/release/SELECTPDF/SelectPdf-1.2.2
[14:57:59] <rindolf> Ovid: i see
[15:16:50] <Ovid> Found the bug (haj gave me a clue). My PPR::X code was fine. I had misidentified the type in my `for` loop.
[15:18:14] <jabberwok> "May I ask a question?" "No."
[15:19:09] <Mandevil> Do you think it's fine to write this (the 'my' inside the if condition)?   if($mangle && my $vr = $target->validrange) { ... }
[15:20:49] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:21:28] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:21:46] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 245 seconds)
[15:22:09] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:22:21] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:22:40] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 250 seconds)
[15:24:07] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[15:24:23] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 256 seconds)
[15:30:29] <Ovid> It's fixed now (new code posted). 
[15:31:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:31:23] <rindolf> Mandevil: use parenthesis
[15:31:57] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:32:26] <Mandevil> rindolf: But it's not needed, is it?
[15:32:51] <rindolf> Mandevil: i'm not sure
[15:32:52] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:33:04] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:33:10] <Mandevil> rindolf: It seems to work OK for me.
[15:34:05] <rindolf> Mandevil: it should be ok
[15:34:36] *** Joins: pj (~pj@ghettoforge/pj)
[15:40:34] *** Quits: hussam (~hussam@user/hussam) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: Kate[m] (~katewecab@2001:470:69fc:105::1:2b2) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: gordonfish[m] (~gordonfis@user/gordonfish) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: latk (~latk@2001:470:69fc:105::255) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: psyxo[m] (~mercvrivs@user/psyxopompos) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: Michael[m]123 (~mbuddemat@2001:470:69fc:105::1:16a9) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: ilmari_ (~ilmari@user/ilmari) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: sergiotarxz[m] (~sergiotar@2001:470:69fc:105::1:15f2) (Quit: Bridge terminating on SIGTERM)
[15:45:32] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 240 seconds)
[15:45:39] <lopid> it'sok
[15:47:09] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[15:49:34] *** Joins: proller (~p@2a02:6b8:0:40c:478b:c8e7:fd11:fb99)
[15:52:13] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[15:57:12] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[15:57:26] *** Joins: ilmari_ (~ilmari@user/ilmari)
[15:58:27] *** Joins: kensanata (~user@user/kensanata)
[16:01:35] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[16:02:39] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:04:17] <Altreus> Mandevil: looks fine to me
[16:04:20] *** Joins: latk (~latk@2001:470:69fc:105::255)
[16:04:20] *** Joins: Guest9402 (~mercvrivs@2001:470:69fc:105::2ee6)
[16:04:20] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[16:04:20] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[16:04:20] *** Joins: sergiotarxz[m] (~sergiotar@2001:470:69fc:105::1:15f2)
[16:04:20] *** Joins: gordonfish[m] (~gordonfis@user/gordonfish)
[16:04:32] *** Joins: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88)
[16:04:33] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[16:04:33] *** Joins: hussam (~hussam@user/hussam)
[16:04:33] *** Joins: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9)
[16:04:33] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[16:04:40] <Altreus> Mandevil: currently it's a simple condition, but be careful of burying it later by accident
[16:04:46] *** Joins: Kate[m]12 (~katewecab@2001:470:69fc:105::1:2b2)
[16:08:27] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[16:11:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[16:14:01] *** Joins: pj (~pj@ghettoforge/pj)
[16:15:53] <simcop2387> fun it's copying the highly fragmented area of the pool now.
[16:18:52] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 260 seconds)
[16:19:13] *** Joins: ProperNoun (~sanko@2600:1700:eb30:a2c0::45)
[16:19:27] <Mandevil> simcop2387: What is?
[16:19:40] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[16:20:19] *** Quits: ilmari_ (~ilmari@user/ilmari) (Quit: Client limit exceeded: 20000)
[16:20:42] *** Joins: ilmari_ (~ilmari@user/ilmari)
[16:20:55] *** Quits: hussam (~hussam@user/hussam) (Quit: Client limit exceeded: 20000)
[16:20:56] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Quit: Client limit exceeded: 20000)
[16:20:56] *** Quits: latk (~latk@2001:470:69fc:105::255) (Quit: Client limit exceeded: 20000)
[16:21:29] *** Quits: Guest9402 (~mercvrivs@2001:470:69fc:105::2ee6) (Quit: Client limit exceeded: 20000)
[16:21:54] *** Quits: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a) (Quit: Client limit exceeded: 20000)
[16:22:05] <lopid> it
[16:22:16] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: Client limit exceeded: 20000)
[16:22:23] *** Quits: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9) (Quit: Client limit exceeded: 20000)
[16:28:30] <simcop2387> Mandevil: moving from one set of disks to a new one with zfs.  this is an area of them that goes really slow during anything (and currently causes some issues in performance)
[16:28:48] *** Joins: latk (~latk@2001:470:69fc:105::255)
[16:28:48] *** Joins: enick_519 (~mercvrivs@2001:470:69fc:105::2ee6)
[16:28:48] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[16:28:48] *** Joins: ehuelsmann[m] (~ehuelsman@2001:470:69fc:105::169a)
[16:28:48] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[16:28:48] *** Joins: hussam (~hussam@user/hussam)
[16:29:00] *** Joins: Michael[m] (~mbuddemat@2001:470:69fc:105::1:16a9)
[16:29:18] <simcop2387> instead of 200mb/s it usually goes 30-40mb/s
[16:29:29] <lopid> millibits
[16:29:32] *** Joins: hethw (~heth@82.118.240.146)
[16:29:36] <Mandevil> lopid: :)
[16:31:27] <hethw> I'm trying to see what sub is in a $scalar, how can I do that?
[16:31:46] <hethw> with Data::Dumper I see sub { "DUMMY" }
[16:32:12] <rindolf> hethw: hi
[16:32:35] <simcop2387> hethw: set $Data::Dumper::Deparse=1; and it'll do it's best to decompile/deparse the sub and give you some code
[16:32:35] <lopid> try the deparse flag?
[16:32:45] <hethw> thanks
[16:33:44] <simcop2387> keep in mind it wont' be exact, it'll be after any optimizations have happened and B::Deparse will just produce hopefully equivilent code
[16:34:34] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 260 seconds)
[16:35:28] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[16:36:40] <hethw> Ahem. what optimizations?
[16:37:00] <simcop2387> mostly constant foldings and a few other things
[16:38:46] <hethw> nothing major I hope
[16:38:47] *** Joins: xenial-user5 (~androirc@20014C4C17E1D20081A3E971B98ECFCD.catv.pool.telekom.hu)
[16:38:55] <hethw> like skipping code that doesn't run?
[16:39:36] <Altreus> deparse: if (0) { say "meow" }
[16:39:45] <perlbot> Altreus: 0
[16:40:00] <Altreus> hethw: like that?
[16:40:04] <hethw> oh no
[16:40:07] <Altreus> deparse: if (1) { say "meow" }
[16:40:08] <perlbot> Altreus: meow 
[16:40:14] <Altreus> ...
[16:40:20] <Altreus> simcop2387: is that what we expect?
[16:40:22] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[16:40:43] <hethw> dumper: if (1) { say "meow" }
[16:40:48] <Altreus> sweval: $Data::Dumper::Deparse=1; sub { if (0) { say "meow" } };
[16:40:57] <perlbot> Altreus: sub {    BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x00\x04\x50\x01\x01\x00\x55"}    use strict;    use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'isa', 'declared_refs', 'postderef_qq', 'refaliasing', 'say', 'signatures', 'state', 'switch', 'unicode_strings', 'unicode_eval';    0;}
[16:41:05] <Altreus> sweval: $Data::Dumper::Deparse=1; sub { if (1) { say "meow" } };
[16:41:08] <perlbot> Altreus: sub {    BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x00\x04\x50\x01\x01\x00\x55"}    use strict;    use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'isa', 'declared_refs', 'postderef_qq', 'refaliasing', 'say', 'signatures', 'state', 'switch', 'unicode_strings', 'unicode_eval';    do {        say 'meow'    };}
[16:41:24] <Altreus> hethw: yes, if (0) and if (1) are removed in the expected way
[16:42:18] <hethw> I got a bit confused
[16:42:24] <simcop2387> Altreus: basically yes it is
[16:42:30] <hethw> it WILL skip code if(0)?
[16:43:08] <simcop2387> hethw: yea there's some basic static analysis.  if (CONSTANT) {..} will get folded out, but if it's if ($var) {} it won't be
[16:43:41] <hethw> $Data::Dumper::Deparse=1; our $test = 0; sub { if ($test) { say "meow" } };
[16:43:50] <hethw> $sweval: Data::Dumper::Deparse=1; our $test = 0; sub { if ($test) { say "meow" } };
[16:43:59] <hethw> sweval: Data::Dumper::Deparse=1; our $test = 0; sub { if ($test) { say "meow" } };
[16:44:01] <perlbot> hethw: ERROR: Can't modify non-lvalue subroutine call of &Data::Dumper::Deparse in scalar assignment at (IRC) line 1, near "1;" 
[16:44:02] <hethw> sweval: $Data::Dumper::Deparse=1; our $test = 0; sub { if ($test) { say "meow" } };
[16:44:04] <perlbot> hethw: sub {    BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x00\x04\x50\x01\x01\x00\x55"}    use strict;    use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'isa', 'declared_refs', 'postderef_qq', 'refaliasing', 'say', 'signatures', 'state', 'switch', 'unicode_strings', 'unicode_eval';    if ($test) {        say 'meow';    }}
[16:44:04] <hethw> sorry.
[16:44:11] <hethw> oh nice. okay.
[16:44:27] <hethw> constants are fine I guess but important to know
[16:46:12] <simcop2387> yea there's some other things that won't translate back and forth correctly too, but it's generally enough to figure out where the sub came from and it usually will execute properly too.  it's because the code-ref has been compiled to the VM op-codes and has to be decompiled back out of it
[16:48:29] <Mandevil> Man, what does Moo's predicate has_foo actually do? Does it just say the attribute was never set in any way?
[16:49:20] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[16:49:47] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:51:35] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[16:52:53] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:53:25] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:53:47] *** Joins: gast0n (~g4570n@user/gast0n)
[16:55:15] *** Joins: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com)
[17:01:31] * GumbyPAN CPAN Upload: SelectPdf-1.3.0 by SELECTPDF https://metacpan.org/release/SELECTPDF/SelectPdf-1.3.0
[17:01:57] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:02:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:05:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:05:34] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:09:10] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:09:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[17:09:53] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:11:22] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:14:24] <simcop2387> Mandevil: basically yes.  it's a lot like exists() for a hash key.  you can also use a clearer to get rid of the attribute and it will no longer answer true to the predicate
[17:15:20] <Mandevil> OK, made a custom predicate instead.
[17:16:13] <simcop2387> eval: package foo; use Moo; has bar => (is => 'rw', clearer => 1, predicate => 1); my $x=foo->new(); [$x->has_bar(), $x->bar("baz"), $x->has_bar(), $x->clear_bar(), $x->has_bar()]
[17:16:20] <perlbot> simcop2387: ["","baz",1,"baz",""]
[17:18:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:18:49] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:29:23] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:58] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:30:02] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:30:17] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:30:19] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:30:55] *** Quits: xenial-user5 (~androirc@20014C4C17E1D20081A3E971B98ECFCD.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[17:31:02] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:46] <hethw> I'm printing to STDERR and I get ???? for two byte chars like 'ф'
[17:33:03] <hethw> and I can't figure out what's wrong
[17:35:51] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[17:36:19] <hethw> is there any perceivable way to check why?
[17:36:42] <buZz> hethw: are you sure your terminal support then?
[17:36:49] <hethw> yep
[17:36:52] <buZz> hethw: maybe try pushing STDERR through hexdump -C 
[17:36:56] <buZz> to see if the output is correct?
[17:37:00] <hethw> how?
[17:37:14] <hethw> ah you mean in bash
[17:37:34] <choroba> have you set the encoding correctly?
[17:37:43] <buZz> perl ./bla.pl |[2] hexdump -C
[17:37:48] <hethw> how do I set STDERR correctly
[17:37:50] <buZz> oh wait, not in bash
[17:37:57] <buZz> ah
[17:38:08] <buZz> perl ./bla.pl 2> >(hexdump -C)
[17:38:11] <choroba> binmode STDERR, ':encoding(UTF-8)';
[17:38:34] <choroba> then you can send the 'ф' directly
[17:39:05] <choroba> But you have to save the script in UTF-8 and specify use utf8;
[17:39:22] <hethw> I have those
[17:39:43] <choroba> for ?s for a two byte char sounds like double encoding
[17:39:57] <choroba> where does the 'ф' come from?
[17:40:36] *** Parts: art1 (~romeyke@p200300ccdf08ed00333adac4b46cb5e4.dip0.t-ipconnect.de) ()
[17:40:53] <hethw> yes, I'm trying to figure out where can that happen since between print and STDERR there's nothing in my head
[17:40:57] <hethw> but I'm probably wrong
[17:41:12] <hethw> I'm checking the variable and it outputs properly with Dumper x{444}
[17:41:22] <choroba> does printing to STDOUT work correctly?
[17:42:55] <hethw> no, it's the same
[17:43:28] <buZz> you tried hexdump to confirm you're not just seeing the wrong thing?
[17:43:55] <hethw> sadly I can't hexdump
[17:44:11] <hethw> it's complex code
[17:44:24] <hethw> so can't just .pl | hexdump
[17:44:37] <buZz> testing stuff is done by snippet-ing the code into a -new- perl file ;)
[17:44:50] <buZz> to confirm its not somewhere else in your 29837489237 lines of code where you're shooting in your own foot :D
[17:44:51] <hethw> in a new file as you can imagine everything is great
[17:45:06] <buZz> soooo, you're somewhere disabling it? :)
[17:45:11] <hethw> but I have no idea how to debug this
[17:45:30] <hethw> I have print STDERR Dumper $var;
[17:45:37] <hethw> I get \x{444}
[17:45:45] <hethw> I do print STDERR $var
[17:45:48] <hethw> I get ????
[17:46:04] <hethw> so it's utf8 encoded everyting is good
[17:46:13] <hethw> and then bam, it's not
[17:46:20] <buZz> hethw: and if you do this in a -new- file without binmode , it works too?
[17:46:27] <hethw> yes of course
[17:46:35] <buZz> i dont see why you're saying 'of course'
[17:46:44] <hethw> it's normal to work, no?
[17:46:47] <buZz> that suggest to me that you know why its not happening in the 98347893479 lines
[17:47:22] <hethw> I have no idea what changes between print Dumper and print $var
[17:47:38] <buZz> thats not the place you should be looking
[17:47:48] <hethw> where should I be looking
[17:47:55] <hethw> and most importantly for what
[17:47:57] <choroba> search for /encode/i or binmode in the code
[17:48:00] <buZz> maybe start by finding all other binmode lines in the file ?
[17:48:09] <buZz> ah, yeah 'encode' too
[17:48:25] <hethw> how can encode do something?
[17:49:44] <choroba> https://perldoc.perl.org/utf8
[17:49:45] <Paperbot> Link title(s): [ utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code - Perldoc Browser ]
[17:49:52] <hethw> I've read it
[17:49:55] <choroba> utf8::encode can change the value in place
[17:50:06] <hethw> I am dumping the contents of $var just before printing it
[17:50:10] <hethw> it's utf8
[17:50:24] <hethw> it's not double encoded
[17:50:44] <choroba> hm. Are you sure the variable is not tied or magical, or overloading something?
[17:51:02] <hethw> I even stopped using a variable
[17:51:18] <hethw> I'm printing direcftly print STDERR "\n\x{444}"
[17:51:24] <hethw> same problem
[17:52:00] <hethw> the only binmodes I see are binmode STDIN, ":utf8"; binmode STDOUT, ":utf8";
[17:52:19] <hethw> which should help, not cripple the result
[17:53:24] <choroba> help? they are totally unrelated to STDERR
[17:53:41] <hethw> so we're back to square 1
[17:54:05] <buZz> hethw: try binmode STDERR
[17:54:25] <hethw> I said up in the chat that I already did
[17:54:37] <buZz> i dont know, you just said > 15:22:00 < hethw> the only binmodes I see are
[17:55:11] <choroba> try setting it, not searching it
[17:55:37] <hethw> I have it set
[17:56:08] <choroba> is there anything else going on with STDERR?
[17:56:17] <buZz> maybe set it again -straight- before the print
[17:56:17] <hethw> how can I check?
[17:56:29] <buZz> hethw: with 15:08:07 < buZz> perl ./bla.pl 2> >(hexdump -C)
[17:57:14] <ggherdov> Hello, when I import, say, SomePackage into MyPackage, all functions from SomePackage end up in the symbol table of MyPackage. Is there a way to tell the imported functions apart from those actually defined in MyPackage?
[17:57:14] <ggherdov> I'm trying to generate automatically the class hierarchy of my project, and I'd like functions to only be counted in the package they're defined. Example: https://bpa.st/G2MQ . Any advice?
[17:57:15] <Paperbot> Link title(s): [ View paste G2MQ ]
[17:57:48] <hethw> buZz, just before = same result
[17:58:05] <hethw> choroba, no idea how to check what's going on with STDERR
[17:58:06] <buZz> well pastebin your code , maybe someone can see what you're doing wrong
[17:58:36] <choroba> ggherdov with "classes", we usually talk about methods and don't export them at all
[18:01:06] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:01:42] <choroba> but for functions, if the exporting module uses Exporter, you can name the functions you want to import
[18:02:20] *** Joins: diskin (~diskin@46.41.64.76)
[18:02:30] <hethw> buZz, not possible sadly
[18:05:41] <buZz> hethw: maybe just output it to a file then ;)
[18:05:48] <hethw> print STDERR "\x{444}"; outputs ??
[18:06:11] <buZz> eval: print STDOUT "\x{444}";
[18:06:14] <perlbot> buZz: ф
[18:06:45] <hethw> eval: print STDOUT "ф";
[18:06:48] <perlbot> hethw: ф
[18:07:32] <ggherdov> choroba: sure, I can choose which function to import from where. But how to write a program that takes a file and tells me the name of all imported functions? See at the bottom for this pastebin: https://bpa.st/G2MQ I can't tell apart *House::paint_red and *House::build, where actually they're defined in two different files
[18:07:33] <Paperbot> Link title(s): [ View paste G2MQ ]
[18:07:52] <ggherdov> (two different packages <- I meant)
[18:11:03] <Grinnz> hethw: print join ':', PerlIO::get_layers(*STDERR);
[18:11:11] *** Quits: diskin (~diskin@46.41.64.76) (Ping timeout: 264 seconds)
[18:12:18] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[18:13:27] <Grinnz> hethw: if you've binmode correctly and nothing else in the program has, you should get something like unix:perlio:encoding(UTF-8):utf8
[18:13:35] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[18:21:02] <choroba> ggherdov: The author of the code should know what functions they import. That's why @EXPORT_OK is preferred to @EXPORT as it forces you to be explicit
[18:22:35] <Grinnz> sweval: package Foo; our @EXPORT_OK = 'foo'; sub foo { 42 } package main; use Foo 'foo'; use Sub::Util 'subname'; subname \&foo
[18:22:37] <perlbot> Grinnz: ERROR: Can't locate Foo.pm in @INC (you may need to install the Foo module) (@INC contains: $BLEAD/lib/site_perl/5.35.5/x86_64-linux $BLEAD/lib/site_perl/5.35.5 $BLEAD/lib/5.35.5/x86_64-linux $BLEAD/lib/5.35.5) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[18:22:55] <Grinnz> sweval: package Foo; our @EXPORT_OK = 'foo'; sub foo { 42 } package main; Foo->import('foo'); use Sub::Util 'subname'; subname \&foo
[18:22:57] <perlbot> Grinnz: main::foo
[18:23:11] <hethw> Grinnz, unix:perlio:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8:encoding(utf-8-strict):utf8
[18:23:26] <Grinnz> sweval: package Foo; BEGIN { our @EXPORT_OK = 'foo' } sub foo { 42 } package main; BEGIN { Foo->import('foo') } use Sub::Util 'subname'; subname \&foo
[18:23:28] <perlbot> Grinnz: main::foo
[18:23:36] <Grinnz> meh. hard to show in one line
[18:23:49] <Grinnz> use subname to find where originally defined
[18:24:06] *** Joins: Shells (~michelle@203.206.128.220)
[18:24:23] <Grinnz> sweval: package Foo; use Exporter 'import'; BEGIN { our @EXPORT_OK = 'foo' } sub foo { 42 } package main; BEGIN { Foo->import('foo') } use Sub::Util 'subname'; subname \&foo
[18:24:25] <perlbot> Grinnz: Foo::foo
[18:24:31] <Grinnz> helps to use exporter :P
[18:25:05] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:9cac:bcbc:d32:cd3e) (Ping timeout: 246 seconds)
[18:26:42] <hethw> it seems that STDERR is going to a file, that's where ?? comes from
[18:27:22] <Grinnz> once your program is done with it it's bytes, doesn't matter where it goes
[18:27:41] <Grinnz> what did get_layers say?
[18:27:55] <hethw> well, I went for a walk and I remembered I'm actually reading the log files not STDERR directly, silly me
[18:28:00] <hethw> so it's probably the logger
[18:28:31] <Grinnz> what mechanism is being used to redirect it to the file?
[18:29:57] <hethw> I'm about to find out
[18:31:08] <hethw> meanwhile is there a function to convert the 'ф' (aka multibyte utf8) in a var to the 'x{444}' -> literal string?
[18:32:47] <hethw> it seems I'm using the default uwsgi logging functions
[18:33:03] <Grinnz> first of all, that is not multibyte or utf8
[18:33:14] <Grinnz> which is why you need the encoding layer to print it as such
[18:33:36] <Grinnz> sprintf '%vX', $str will convert it to '444'
[18:33:48] <Grinnz> it's a good way to find what characters are actually in a string
[18:33:55] <hethw> but will it convert all symbols?
[18:33:58] <Grinnz> yes
[18:34:08] <hethw> can it convert only nonascii
[18:34:10] <Grinnz> it converts it to a hex vector
[18:34:12] <Grinnz> no
[18:34:16] <hethw> :(
[18:34:29] <hethw> I might do json_encode but that's going to be ugly
[18:34:46] <Grinnz> you used Dumper before, that's one way? if weird sometimes
[18:34:48] <hethw> it converts nonascii to \u444
[18:35:07] <hethw> might as well, maybe properly formatted it can be useful
[18:35:58] <Grinnz> "default uwsgi logging functions" sounds like external to perl, right?
[18:36:04] <choroba> eval: "aф" =~ s/([^\x32-\x7e])/sprintf "\\x{%x}", ord $1/ger
[18:36:06] <perlbot> choroba: a\x{444}
[18:36:12] <Grinnz> so in your perl program all you need to ensure is that the output is correctly encoded to UTF-8
[18:36:31] <Grinnz> if it is, then there are only two places the problem can be
[18:36:37] <Grinnz> the logger, or your method of viewing the log
[18:38:13] <hethw> it's a very big project, you can never be sure about anything :)
[18:38:20] <hethw> but yes, usually
[18:38:44] <hethw> uwsgi is a standard perl lib
[18:38:50] <hethw> there are some settings you can play with
[18:38:56] <hethw> hopefully one will solve it
[18:39:47] <Grinnz> erm, uwsgi is a C server
[18:39:58] <Grinnz> or a protocol
[18:40:01] <hethw> is it
[18:40:06] <hethw> hm, my bad then
[18:40:12] <choroba> and last time I discussed it with someone they told me it's Perl support does unicode wrong
[18:40:15] <hethw> I'm messing gearman and uwsgi
[18:40:48] <hethw> I'm hoping this https://ofstack.com/python/21314/solve-the-encoding-problem-of-uwsgi-in-detail.html might solve it
[18:40:49] <Paperbot> Link title(s): [ Solve the encoding problem of uWSGI in detail ]
[18:41:03] <choroba> Pali: wasn't it with you?
[18:41:06] <xq> does perlbot apply `use utf8` automatically for eval: ?
[18:41:24] <Grinnz> xq: yes
[18:43:43] <hethw> doesn't that depend on the version of perl?
[18:46:40] <buZz> which version are you using?
[18:46:59] <hethw> depends, latest and 5.10.1 and I think there are some others also
[18:48:20] <hethw> choroba, nice! can you help me understand it? Bareword found where operator expected at line 62, near "s/([^\x32-\x7e])/sprintf "\\x{%x}", ord $1/ger"
[18:48:39] <hethw> I get this error, probably the 'eval' magic shortens something
[18:49:24] <Altreus> you can't trap exit can you?
[18:49:39] <hethw> trap exit?
[18:49:39] <Grinnz> hethw: you've put the s/// in a place where the syntax is not appropriate, show more of the code?
[18:49:53] <Altreus> you can trap die with eval but exit just exits
[18:50:25] <Altreus> never mind, it exited at last
[18:50:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:51:05] <hethw> Grinnz, it's just $msg =~ s/([^\x32-\x7e])/sprintf "\\x{%x}", ord $1/ger;
[18:51:30] <Grinnz> hethw: /r modifier only works on perl 5.14+
[18:51:45] <hethw> but I'm not sure sprintf works inside s///
[18:51:49] <Grinnz> it does
[18:51:54] <Grinnz> that's what /e is for
[18:51:55] <ilmari> with /e it does
[18:51:58] <hethw> my perl is 5.30
[18:52:13] <hethw> nice! /e
[18:52:34] <revhippie> you don't need the 'r' if you're actually change $msg and not just returning what $msg would be changed into.
[18:52:45] <revhippie> s/change/changing/
[18:53:21] <Grinnz> hethw: sounds like there is a syntax error somewhere else, if you're getting that error
[18:53:31] <Grinnz> is that the whole error?
[18:53:36] <hethw> success! no /r fixed it
[18:53:48] <Grinnz> alright
[18:53:49] <hethw> yep
[18:54:14] <hethw> I can now happily write nonacsii in \x{} format, thanks choroba 
[18:54:23] <choroba> :)
[18:54:26] <hethw> and maybe fix uwsgi encoding later
[18:57:25] *** Joins: talexb (~tab@bras-base-toroon0335w-grc-44-184-147-4-36.dsl.bell.ca)
[19:00:27] <ggherdov> Grinnz: thanks for the advice and the example code, I'll look into Sub::Util
[19:01:37] <hethw> choroba, this is actually converting a bit too much, I guess I should set the start to 127
[19:04:00] <Grinnz> hethw: [^\x00-\x7F] would do any non-ascii, leaving control characters
[19:05:11] <hethw> ah, it's inverted I get it
[19:05:17] <Grinnz> right
[19:06:22] <choroba> I had 7e there as I don't really like the character in terminal
[19:07:51] <Altreus> 7th edition?
[19:08:40] <choroba> \x32-\x7e
[19:08:44] *** daex_ is now known as daex
[19:08:52] <choroba> and it should have been \x20-\x7e
[19:09:11] <revhippie> [^ -~]
[19:09:17] <choroba> yes
[19:09:36] <choroba> emoji for "visible ascii"
[19:10:27] *** Joins: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[19:10:59] <huf> :D
[19:13:54] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:14:07] <hethw> thank you all for the assistance
[19:14:52] *** Quits: __Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[19:16:27] <Altreus> I have that on a t-shirt
[19:16:52] <huf> when is that
[19:16:56] <huf> T MINUS SHIRT
[19:16:59] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[19:18:03] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[19:18:42] <Altreus> it's the passé
[19:19:06] <talexb> Goofy question: I'm trying to use DateTime::Duration to find out the difference between two dates (ideally in years, months and days). I'm starting with a seconds value, but Duration doesn't do any normalization. :(
[19:20:54] <LeoNerd> I'd calculate that by counting how many times I can bump the year/month/day counter of the start value without exceeding the end value
[19:21:09] <LeoNerd> Otherwise you run into silly problems because of non-constant length years, or months
[19:21:33] <alh> I usually use DateTime::Format::Human::Duration
[19:21:34] <LeoNerd> 1st Jan to 1st March - is that exactly 2 months? What about 1st March to 1st May? That's a different number of seconds
[19:21:39] <LeoNerd> But are they both 2 months, 0 days?
[19:21:40] <huf> yeah, you have to think like an idiot to deal with time
[19:21:45] <huf> because it works stupidly
[19:21:48] <LeoNerd> Feb. is shorter than April
[19:22:05] <LeoNerd> Ultimately the question is ill-formed
[19:22:27] <corwin> LeoNerd: for you: https://bru.st/i/ShaveAYak.pdf
[19:22:55] <huf> :D
[19:23:31] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:23:53] <talexb> Yeah .. what I really want to do is find the difference between two dates.
[19:24:16] <talexb> Maybe I need to go back and read the DateTime docs some more .. ugh.
[19:24:17] <LeoNerd> So use my suggestion
[19:24:39] <talexb> LeoNerd, Yeah .. I'll do that. Thanks.
[19:25:53] <Altreus> The fact that's a PDF sort of adds another layer of humour on the whole thing
[19:26:45] * GumbyPAN CPAN Upload: Test-Mock-Object-0.1 by OVID https://metacpan.org/release/OVID/Test-Mock-Object-0.1
[19:27:43] <huf> should be html, pdf is far too fast
[19:27:51] <corwin> LeoNerd: more infomation in PM; LMK if you didn't get it/them.
[19:28:02] <LeoNerd> :) OH excellent!
[19:28:39] *** Joins: WinterStar (~IceLight@user/icelight)
[19:29:40] <corwin> Per arangement with Laramie Kay Sasseville (the artist) no worries about any free posting you make; I've got to go confirm with her if it's going to get used in paid materials (like a formally published book or something), but that's likely fine too.
[19:29:49] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:32:50] *** Quits: hethw (~heth@82.118.240.146) (Ping timeout: 260 seconds)
[19:35:53] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[19:37:36] <Grinnz> talexb: you would start with two DateTime objects, and use ->subtract_datetime?
[19:37:59] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:38:19] <Grinnz> talexb: the "difference between the dates" is not a fixed measure either, you need to be more specific.
[19:38:20] <talexb> Grinnz, Yeah .. thanks .. brain's a little overloaded right now.
[19:39:05] <Grinnz> talexb: if you take 2000-04-01 and 2000-03-01, do you want the answer to be "1 month" or "31 days" or 31*86400?
[19:39:40] <Grinnz> these all require different methods, because months and days are not fixed sizes
[19:40:09] <Grinnz> subtract_datetime will give you the first answer, subtract_datetime_absolute will give you the last answer
[19:40:26] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[19:40:32] * ology always RTFMs about that
[19:40:38] <Grinnz> delta_days gives you the middle answer
[19:41:11] *** Quits: zkrd (~xdg@2a02:587:de00:6d00:f4ab:2db4:2d71:c63e) (Ping timeout: 264 seconds)
[19:42:04] <Grinnz> delta_ms gives you the last answer in minutes and seconds, ignoring leap seconds, which is what you want if you're working with epoch timestamps that ignore leap seconds
[19:42:16] <mst> DateTime also has -a- way to do exactly what you wanted, but you will almost certainly need the documentation and a unit test to find it
[19:42:19] <Pali> choroba: Hi! Yes, at that time (3,5 years ago) I was implementing web service application for Cisco 7960 IP phones and found a bug in perl's uwsgi library which was breaking Latin1-encoded XML files which had some non-7-bit characters
[19:42:33] <Grinnz> so the first step is figuring out which of those 4 answers you actually want
[19:42:45] <mst> on the upside, while it's like training a brain damaged hyena, once you've got it right the hyena generally stays trained
[19:42:52] <talexb> Grinnz++
[19:43:17] <talexb> Grinnz, Thanks, that worked perfectly. Working with dates is weird sometimes.
[19:44:38] <talexb> I'm now getting exact years (multiples of 12 months) of duration, which is what I was hoping to see.
[19:44:53] <Pali> choroba: accordig to code, workaround was: my $app = sub { ...; utf8::downgrade($string); return [ '200', [ ... ], [ $string ]; }
[19:45:04] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:45:23] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Ping timeout: 264 seconds)
[19:45:45] <Pali> so looks like that uwsgi somewhere lost utf8flag and damaged output, converted it to UTF-8
[19:46:22] <talexb> The confusion is probably mine .. I'm used to dealing with values ($duration) or objects ($duration_obj) in my code. The DateTime documentation example uses $dt->subtract_time($datetime) .. I would have used $dt->subtract_time($datetime_obj) for less confusion.
[19:46:24] <Pali> those Cisco 7960 IP phones support only Latin1-encoded XML files (no UTF-8)
[19:46:24] *** Joins: Pixi (~Pixi@user/pixi)
[19:46:58] <talexb> .. or $dt1->subtract_time($dt2) ..
[19:48:07] <Grinnz> sure, it's assuming you would think of "$datetime" as a DateTime object, since the only other way a scalar could represent a datetime is something like an ISO-8601 string
[19:48:34] <xq> Pali: that's a strange problem and the workaround suggests that the inputted or outputted data is not treated as bytes
[19:49:57] <Pali> xq: I think that the main issue is (or was?) that uwsgi is using SvPV() macro without checking SvUTF8()
[19:50:14] <talexb> Grinnz, Right. And to answer your question earlier, I'd prefer "1 month" because it's the highest level that delta can represent. (I'm probably not expressing it very well.)
[19:50:43] *** Joins: zkrd (~xdg@2a02:587:de00:6d00:f4ab:2db4:2d71:c63e)
[19:50:44] <Pali> and it is needed to either use SvPVbytes() macro which always returns bytes OR to use SvUTF8() macro after SvPV() call and handle situation when data from SvPV are not bytes
[19:50:49] <Grinnz> it depends how you're going to use it; for example, you can't convert "1 month" to an amount of seconds on its own
[19:50:54] *** Quits: zhmylove (~zhmylove@5.142.46.222) (Ping timeout: 268 seconds)
[19:51:47] <talexb> True -- I'm trying to find anomalies in duration values -- if it's an integer multiple of years (12,24,..) that can be filtered out.
[19:51:48] *** Joins: zhmylove (~zhmylove@178.67.192.99)
[19:52:14] <talexb> Ugh .. (12,24,.. months)
[19:56:00] <xq> Pali: I think that if a function that expects bytes receives characters it should very quickly and obviously explode, not try to fix the situation
[19:56:21] <xq> and interfaces should be well spelled out in documentation
[19:56:39] <xq> "this function returns bytes" "this function expects characters" etc
[19:56:54] <Pali> xq: at that time (3.5 years ago) there was nothing in documentation and I have not seen any crash
[19:57:15] <xq> the above workarounds with utf8::downgrade etc is exactly the thing that you want to be doing
[19:57:19] <Pali> I just saw that same repeated HTTP GET request, once returned data in Latin1 and second time in UTF-8
[19:57:57] <xq> Pali: yes well unclear interfaces due to missing documentation can be a real problem
[19:57:58] *** Joins: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[19:58:38] <xq> err
[19:58:50] <xq> the above workarounds with utf8::downgrade etc is exactly the LAST thing that you want to be doing
[19:59:05] <Pali> and during debugging it when data was wrongly displayed on that Cisco phone, UTF8 flag on that $string scalar was set
[19:59:36] <Pali> and when that flag was unset then text was displayed correctly on the phone
[20:00:07] <xq> Pali: your problem description gets even weirder and once again suggest some deeper issues
[20:00:41] <Pali> I have not found any issue in that perl application, so I really guess isssue was in uwsgi library and incorrect usage of SvPV() vs SvPbytes()
[20:02:19] <xq> I am not familiar with uwsgi implementation for Perl. It may be the case of it trying a little too hard, or your code not doing enough, or some combination of it. Either way if the code is still in use I'd recommend a review
[20:11:58] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[20:14:07] *** Joins: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net)
[20:16:50] * GumbyPAN CPAN Upload: Config-Model-Systemd-0.249.1 by DDUMONT https://metacpan.org/release/DDUMONT/Config-Model-Systemd-0.249.1
[20:18:57] *** Joins: bmeneg (~Bruno@2001:1284:f013:a5b:9924:d737:a8ec:3f0b)
[20:19:57] <xq> makes me wonder if other languages have similar issues with strings
[20:20:20] <xq> they probably do, there is no way they don't, right?
[20:21:42] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[20:23:40] <xq> I guess it would be more straightforward in a language with explicit types for encoded string (byte array) and decoded string (grapheme cluster array)
[20:24:45] <Pali> xq: that web service application for Cisco 7960 IP phones was just one time application which was running for one week, I have not used it later and I have not developed in uwsgi nothing more since then...
[20:25:09] <Pali> So I do not know if these issues are still present, it is really old.
[20:27:29] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[20:28:23] *** choroba is now known as choroba_
[20:28:35] *** Quits: mns` (~fu@187.32.234.131) (Ping timeout: 264 seconds)
[20:29:20] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[20:29:22] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[20:29:35] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[20:30:27] *** Joins: mns` (~fu@191.253.159.196)
[20:32:00] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[20:38:53] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[20:39:21] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Read error: Connection reset by peer)
[20:45:59] <Pali> xq: Strong typed languages should not have this issue. Variable of type "array of bytes" cannot be assigned to variable of type "unicode string".
[20:48:39] <Pali> Some pointer based languages (e.g. C) will warn you if you are trying to assing into variable pointer of different type. But you have to enable warnings, and it is only warning...
[20:49:24] <mmlj4> so no tab A into slot B?
[20:50:13] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[20:51:25] <mst> Pali: and then there's typescript, where if they typed a JSON response but didn't actually validate it on receipt, you can spend a long time debugging a problem where your lovingly declared Int turns out to have a string in it
[20:52:31] <Altreus> heh I have a friend (a loosening definition) who keeps giving me shit for using Perl and tells me he's using typescript
[20:52:32] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:700c:3cd7:32f:5bab)
[20:52:59] <Pali> hehe :) I know what it means to debug code if integers are encoded as strings in JSON
[20:53:30] <Altreus> he once rejected a CR for using map to create multiple objects ( map { { field 1 => $_, other => 'fields', are => 'identical' } } qw/type1 type2/ ) instead of writing them out separately
[20:54:02] <Altreus> This is because I was bitching that someone replaced my has [qw/ ... /] => ( is => 'ro' ); with 21 separate fields
[20:54:13] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[20:54:33] <Altreus> and thus broke everything because I added 2 more fields to the qw and this caused a conflict and it was not clear what the change was
[20:54:44] *** Joins: kylese (~kylese@p5dd8b9a8.dip0.t-ipconnect.de)
[20:54:56] <Altreus> apparently typescript means you have to be extremely verbose and forego useful shortcuts like map
[20:55:00] * mst is very glad typescript exists but the false sense of security problem made that bug take rather longer to spot than it would've done otherwise
[20:55:14] *** Joins: magla (~gelignite@55d446ec.access.ecotel.net)
[20:55:56] *** Joins: splatt99` (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[20:56:46] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Ping timeout: 245 seconds)
[20:57:25] <simcop2387> mst: as annoying as it can be i wish ts had a mode that enforced thins like rusts safe/unsafe stuff so you could know where those barriers should be between ts and normal js
[21:03:03] *** Quits: mns` (~fu@191.253.159.196) (Ping timeout: 268 seconds)
[21:03:14] *** Joins: mns` (~fu@186.231.92.60)
[21:04:54] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[21:12:09] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:14:59] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[21:29:00] <Altreus> I'mma stay on this side of the browser
[21:29:08] <Altreus> node notwithstanding
[21:29:19] <Altreus> simcop2387: have you been doing rust?
[21:32:30] <simcop2387> Altreus: some, not a lot.  going to revive a project probably for some webrtc and rtsp stuff and drop the matrix bits of it
[21:32:44] <simcop2387> the perlbot matrix bridge is in rust
[21:33:00] <Altreus> it looks like exactly the language I want, which means I'm probably incapable of understanding it
[21:33:23] <Altreus> It embodies the concept of needing to be cleverer than X to debug X
[21:34:00] <simcop2387> it's ML origins and OCaml influences really shine through a bunch but the type system is a dream once you start to get it
[21:34:26] <Altreus> helpfully I know neither of those
[21:36:22] *** Joins: wwalker (~wwalker@platinum.solid-constructs.com)
[21:41:09] *** Joins: kensanata (~user@user/kensanata)
[21:41:55] *** Quits: proller (~p@2a02:6b8:0:40c:478b:c8e7:fd11:fb99) (Ping timeout: 268 seconds)
[21:56:54] *** splatt99` is now known as splatt9990
[22:00:43] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[22:08:26] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Ping timeout: 245 seconds)
[22:11:22] *** Joins: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[22:35:18] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[22:42:05] * GumbyPAN CPAN Upload: PDL-VectorValued-1.0.14 by MOOCOW https://metacpan.org/release/MOOCOW/PDL-VectorValued-1.0.14
[22:43:33] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 256 seconds)
[22:49:51] *** Quits: papa (~papa@user/papa) (Quit: connection reset again by peer.)
[22:50:50] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:51:01] *** Quits: Skarn (~skarn@user/skarn) (Quit: bye)
[22:51:36] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[22:53:11] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:57:24] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[23:02:01] *** Joins: glider (~glider@user/glider)
[23:04:09] *** Joins: Skarn (~skarn@user/skarn)
[23:08:27] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Quit: ZNC 1.8.2 - https://znc.in)
[23:08:29] *** Quits: WantToHelp (~dale@user/wanttohelp) (Remote host closed the connection)
[23:08:51] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[23:12:35] *** Joins: WantToHelp (~WantToHel@user/wanttohelp)
[23:21:23] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Ping timeout: 264 seconds)
[23:22:36] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[23:24:23] *** Quits: jess (~jess@libera/staff/jess) (Quit: I try to be an optimist / but my glass is always bone dry)
[23:25:40] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:25:59] *** Joins: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a)
[23:27:09] * GumbyPAN CPAN Upload: Crypt-OpenSSL-PKCS12-1.8 by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-PKCS12-1.8
[23:27:28] *** Joins: ratagin (~ratagin@208.96.144.68)
[23:33:26] *** Quits: ProperNoun (~sanko@2600:1700:eb30:a2c0::45) (Ping timeout: 245 seconds)
[23:33:37] *** Joins: ProperNoun (~sanko@172-2-59-65.lightspeed.clmasc.sbcglobal.net)
[23:37:10] * GumbyPAN CPAN Upload: Tree-RB-XS-0.00_01 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.00_01
[23:39:40] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[23:40:56] *** Quits: martinus__ (~martin@95.31.201.77.rev.sfr.net) (Ping timeout: 245 seconds)
[23:45:31] *** Quits: zkrd (~xdg@2a02:587:de00:6d00:f4ab:2db4:2d71:c63e) (Ping timeout: 245 seconds)
[23:45:51] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
