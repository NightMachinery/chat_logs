[00:33:42] *** Quits: hugbubby (~hugbubby@49.207.215.73) (Ping timeout: 260 seconds)
[00:41:36] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb)
[00:44:29] *** Joins: vicfred (~vicfred@user/vicfred)
[00:45:04] *** Joins: rgrinberg (~textual@177.248.150.122)
[00:46:18] <vicfred> Hi, how do I read 4 integers separated by spaces and ended with \n? I did this but it's ugly https://github.com/Vicfred/kyopro/commit/651735c5a0dee57b5996aa47e77389275a45c06b
[00:46:30] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[00:54:13] *** Quits: companion_cube (~simon@user/companion-cube) (Quit: WeeChat 3.3)
[00:54:52] *** Joins: companion_cube (~simon@user/companion-cube)
[01:00:05] <novakane> vicfred: i use something like that https://git.sr.ht/~novakane/zelbar/tree/main/item/src/main.zig#L158-171
[01:27:13] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::4) (Quit: WeeChat 3.4.1)
[01:28:09] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:28:10] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:31:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[01:31:51] *** Quits: zy (~cc@user/zy) (Ping timeout: 260 seconds)
[01:37:27] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:38:55] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 246 seconds)
[01:49:07] *** Quits: hspak6 (~hspak@user/hspak) (Quit: The Lounge - https://thelounge.chat)
[01:50:55] *** Joins: hspak6 (~hspak@user/hspak)
[02:02:06] *** Joins: zy (~cc@user/zy)
[02:02:14] *** Quits: zy (~cc@user/zy) (Client Quit)
[02:02:42] *** Quits: Earnestly (~earnest@user/earnestly) (Quit: WeeChat 3.4.1)
[02:10:55] *** Joins: Earnestly (~earnest@user/earnestly)
[02:21:18] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:21:35] <energizer> why is i32 not capitalized?
[02:21:59] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 272 seconds)
[02:24:41] <Earnestly> I32?
[02:25:02] <energizer> yes
[02:27:19] <Earnestly> Perhaps if zig came from Ada it might be I32, but it came from C, where such things were lowercase (e.g. Linux's u64 or int32_t from stdint)
[02:27:50] <energizer> > If x is a type then x should be TitleCase, unless it is a struct with 0 fields and is never meant to be instantiated, in which case it is considered to be a "namespace" and uses snake_case.
[02:28:08] <energizer> is i32 never meant to be instantiated? does it have 0 fields?
[02:29:14] <energizer> Question 2. How does optional work: is it a `union` or a `enum` or something else?
[02:29:22] <Earnestly> I wonder if the integer/float type notation existed before that convention was even decided on
[02:29:50] <Levy[m]> the same applies to all builtin types afaik
[02:31:32] <Earnestly> energizer: optional in the sense of ?i32 notation?
[02:31:44] <energizer> yes
[02:32:50] <Earnestly> I recall andrewrk mentioning the implementation being something quite simple, hm
[02:33:15] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:41] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3)
[02:35:28] <Earnestly> energizer: struct { bool, T }
[02:37:11] <energizer> ok
[02:46:13] <Earnestly> energizer: (This does have consequence for alignment if you're using them in arrays, as you might expect)
[02:46:17] *** Quits: jemius (~imperator@200116b82d54ae00381e967f014f4f3d.dip.versatel-1u1.de) (Quit: Leaving)
[02:48:02] <energizer> i suppose that could be SoA
[02:49:58] <energizer> or an array of indexes and an array of T
[02:50:45] <Earnestly> I.e an array of u64 will be half the size of the same as ?u64
[02:52:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:04:48] *** Quits: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net) (Ping timeout: 260 seconds)
[03:06:54] <Levy[m]> Earnestly: https://github.com/ziglang/zig/issues/104
[03:17:40] *** Joins: thush (~thush@host-89-242-174-238.as13285.net)
[03:26:04] <thush> Hey all!  Hope everyone's well.  I'm just taking a look through Zig's documentation and was wondering if anyone could point me to something which explains two things I'm not understanding. One is arrays and what [_] or [*] means, and the other is to do with this syntax:  `foo.* = ...` -- what does "foo,*" mean here?  I couldn't quite fathom it from the docs I were reading.  Any help appreciated!
[03:37:52] *** Quits: rgrinberg (~textual@177.248.150.122) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:42:43] <jcmoyer> thush: [_]  is for inferring an array's size e.g. [_]u8{5,6,7} infers a length of 3. You could also write [3]u8{5,6,7}, but then you repeat yourself. [*] is a pointer to an array with an unknown number of elements. You typically use it when working with C APIs. `foo.*` dereferences the pointer `foo`; that expression is equivalent to `*foo = ...` in C.
[03:46:28] <thush> jcmoyer, Ah ha!  Suddenly the penny drops regarding arrays, thank you!  As for `foo.*` meaning `*foo = ...` -- I presume foo.* is idiomatic to Zig, and that should be used?  Or are there any instances where *foo = ..., can only be used?
[03:48:46] <jcmoyer> thush: `*foo = ...` is not valid zig so you don't have a choice :)
[03:52:42] <thush> Understood.  Thank you, jcmoyer 
[04:09:33] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb) (Ping timeout: 260 seconds)
[04:17:33] *** Quits: skipwich (~skipwich@user/skipwich) (Quit: DISCONNECT)
[04:17:50] *** Joins: skipwich (~skipwich@user/skipwich)
[04:27:49] <energizer> where does error.StreamTooLong come from?
[04:28:15] <energizer> i don't see any definition https://github.com/ziglang/zig/search?q=streamtoolong
[04:30:33] *** Quits: thush (~thush@host-89-242-174-238.as13285.net) (Ping timeout: 256 seconds)
[05:06:08] <squeek502> energizer, error sets can be inferred, so it comes from any function that returns error.StreamTooLong (various std.io.Reader functions)
[05:08:43] <energizer> squeek502: so generated docs will (eventually) look at the source of a function and see what errors it returns so i can read them and handle them casewise?
[05:10:40] <energizer> or, how do i know what errors i'm suppressing with `try
[05:13:20] <squeek502> energizer, if you switch on the error without handling any errors, it will give you compiler errors for all the missing error cases
[05:13:45] <squeek502> catch |err| switch (err) {}
[05:15:00] <energizer> are they namespaced at all?
[05:15:46] <squeek502> no, afaik all errors with the same name are treated as equal
[05:16:02] <squeek502> error sets are a bit different though
[05:16:54] <squeek502> see the lang ref for better info: https://ziglang.org/documentation/master/#Errors
[05:17:39] *** Joins: rgrinberg (~textual@177.248.146.216)
[05:20:33] <energizer> "However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value." first reaction is i dont like this
[05:22:54] <energizer> why not have a namespace
[05:23:53] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb)
[05:25:01] *** Quits: rgrinberg (~textual@177.248.146.216) (Ping timeout: 246 seconds)
[05:36:20] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[05:37:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:39:04] *** Joins: rgrinberg (~textual@177.248.146.78)
[05:51:08] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:61e3:f551:d48e:e2b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:24] *** Joins: neurocyte86 (~neurocyte@user/neurocyte)
[05:53:31] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:53:31] *** neurocyte86 is now known as neurocyte8
[06:03:14] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[06:20:09] *** Joins: nektro (~meg@75-164-221-110.ptld.qwest.net)
[06:26:08] *** Joins: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net)
[06:30:09] *** Quits: lumo_e (~enrico@151.29.53.201) (Quit: Quit)
[07:03:30] *** Parts: iceman[m] (~iceman@2001:470:69fc:105::1:e686) ()
[07:05:38] *** Quits: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net) (Ping timeout: 260 seconds)
[07:06:18] *** Quits: rgrinberg (~textual@177.248.146.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:17:54] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:20:59] *** Joins: moog_ (~moog@98.97.82.178)
[07:22:19] *** Quits: moog (~moog@98.97.82.178) (Ping timeout: 260 seconds)
[07:35:47] <energizer> https://github.com/ziglang/zig/blob/4b9fd57aa86a480f2afd6ba117fcc7ef6eace572/lib/std/io/reader.zig#L201
[07:35:57] <energizer> why not just return the empty buffer, instead of null?
[07:49:40] <andrewrk> energizer, I don't think that function is going to survive a std lib audit
[07:50:50] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[07:51:02] <energizer> ah ok
[07:58:40] <andrewrk> I'm thinking a better way to go will be to have delimiter based functions be methods of a BufferedReader
[07:59:21] <andrewrk> this way we can do it more efficiently than reading one byte at a time, ideally even with SIMD
[08:00:38] <andrewrk> then the answer to "wheres the readline function of Reader?" will be "that's the wrong abstraction for reading lines from a stream"
[08:13:15] <nektro> would removing BufferedReader and making Reader always use a buffer be bad?
[08:24:29] *** Joins: livoreno (~livoreno@user/notzmv)
[08:25:06] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:25:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:26:50] *** Quits: rLapz (~rLapz@user/rLapz) (Remote host closed the connection)
[08:31:24] *** Joins: rgrinberg (~textual@177.248.158.178)
[08:32:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:34:20] *** Joins: notzmv (~zmv@user/notzmv)
[08:35:49] <tleydxdy[m]> suppose read triggered some hardware
[08:42:35] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb) (Ping timeout: 260 seconds)
[08:46:34] <braewoods> nektro: i suppose depends on what is the data source. buffers don't really make sense in some cases.
[08:46:51] <braewoods> e.g., special files in some cases.
[08:47:52] <braewoods> i'm mainly thinking of linux /sys special files which usually return data generated by kernel space code so it might vary from one read to the next
[08:55:19] *** Joins: vicfred (~vicfred@user/vicfred)
[09:12:31] *** Quits: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001) (Quit: ZNC 1.8.2 - https://znc.in)
[09:13:07] *** Joins: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001)
[09:22:59] *** Joins: hwj (~hwj@i5C740818.versanet.de)
[09:32:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[09:32:43] <bgiannan> haze, no i didn't?
[09:36:39] *** Joins: hugbubby (~hugbubby@49.207.215.73)
[09:37:55] *** Quits: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[09:46:03] *** Quits: hwj (~hwj@i5C740818.versanet.de) (Ping timeout: 260 seconds)
[10:15:20] *** Joins: Graham31415 (~Graham@user/Graham31415)
[10:21:54] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:22:52] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 246 seconds)
[10:38:38] *** Quits: moog_ (~moog@98.97.82.178) (Ping timeout: 260 seconds)
[10:46:43] *** Quits: rgrinberg (~textual@177.248.158.178) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:51:11] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[10:57:22] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[10:57:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:58:27] *** Joins: neurocyte86 (~neurocyte@user/neurocyte)
[11:08:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dda:4bff:cdb5:90b8) (Ping timeout: 260 seconds)
[11:09:35] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:26:22] *** Quits: nektro (~meg@75-164-221-110.ptld.qwest.net) (Quit: WeeChat 3.1)
[11:30:04] <hugbubby> Is there a standard library function for encoding byte strings in hex? I see hexToBytes() but I want the opposite
[11:33:40] <ikskuh> std.fmt.format (and variants) + "{}" + std.fmt.fmtHexSliceUpper (or Lower)
[11:33:43] <tleydxdy[m]> probably std.fmt?
[11:36:30] *** Joins: euandreh (~euandreh@191.181.59.160)
[11:36:56] <hugbubby> ok, any simple way to create a buffer over a byte slice that fulfills whatever "writer anytype" requires? 
[11:38:48] <ikskuh> std.fmt.fixedBufferStream() for static, std.ArrayList() for dynamic
[11:46:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[11:46:40] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:46:46] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[11:47:08] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[11:49:29] <motiejus> does stdlib have an Allocator which can accept `[]u8` as the backing array?
[11:50:39] <ikskuh> std.heap.FixedBufferAllocator
[11:51:25] <motiejus> uh, exactly what I need. I was looking in `std/heap/*.zig`, not in `std/heap.zig`. Thanks!
[11:51:40] <motiejus> this is amazing.
[11:51:47] <hugbubby> FixedBufferAllocator is really fast, right? I try to use it everywhere I can
[11:51:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[11:51:54] <hugbubby> It makes reducing dynamic allocations so much easier
[11:52:59] <motiejus> oh wow it's so simple
[11:53:13] <ikskuh> yes, but: it's a bump allocator
[11:53:22] <ikskuh> it has not implemented any "free" operation
[11:54:20] <hugbubby> Gotcha. So I need to fully deinit() if I want to reuse the memory, right?
[11:55:03] <ikskuh> nah
[11:55:07] <ikskuh> just override it :D
[11:55:18] <hugbubby> wym
[11:55:39] <ikskuh> the fixed buffer allocator doesn't have a deinit() functioni
[11:55:52] <ikskuh> allocation will only give pointers to the buffer you passed in
[11:55:58] <ikskuh> so each allocation is a portion of that buffer
[11:56:27] <ikskuh> the buffer is stored somewhere else tho
[11:56:41] <ikskuh> if you use a local variable, it is freed by returning from the fn
[11:58:02] <ikskuh> the fba itself is basically struct { buffer: []u8, offset: usize = 0 }
[11:58:29] <ikskuh> and alloc(size) { defer offset += size; return buffer[offset..offset + size]; }
[11:58:49] <ikskuh> (very simplified, but that's the idea)
[11:59:17] <ikskuh> so you don't need to free any allocations, just "assume the memory is free again" if you are sure you don't need any of those allocations anymore
[11:59:17] <hugbubby> Is there an implementation of FBA in the stdlib that does keep track of what segments of the buffer are in use and is able to free those?
[11:59:43] <ikskuh> no
[11:59:54] <ikskuh> i guess you can use the general purpose allocator
[12:00:09] <ikskuh> with a backing allocator that is an FBA
[12:00:42] <ikskuh> brb
[12:00:56] <ikskuh> but can you explain your goals? maybe there's an alternative solution to it?
[12:27:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:35:14] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[12:35:17] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[12:49:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:49:34] *** Quits: squeek502 (~squeek502@user/squeek502) (Ping timeout: 260 seconds)
[12:53:16] <ikskuh> re
[13:22:20] *** Joins: squeek502 (~squeek502@user/squeek502)
[13:27:17] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:27:33] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[13:59:59] *** Joins: ofh (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7)
[14:00:19] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[14:01:10] *** Quits: yelnah (~felix@203.158.51.211) (Ping timeout: 272 seconds)
[14:07:18] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[14:23:12] *** Quits: hugbubby (~hugbubby@49.207.215.73) (Ping timeout: 260 seconds)
[14:25:06] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[14:29:19] *** Quits: BratishkaErik (~bratishka@37.99.44.0) (Ping timeout: 260 seconds)
[14:30:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:32:52] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[14:41:47] *** Joins: BratishkaErik (~bratishka@37.99.44.191)
[15:01:58] *** Joins: hugbubby (~hugbubby@49.207.215.73)
[15:08:41] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:12:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[15:13:36] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[15:15:14] *** Joins: Graham31415 (~Graham@user/Graham31415)
[15:20:58] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[15:29:11] *** Joins: hwj (~hwj@i5C740818.versanet.de)
[15:35:05] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[15:41:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:05:28] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:13:51] *** Joins: marler8997_ (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[16:13:52] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Read error: Connection reset by peer)
[16:16:22] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 246 seconds)
[16:31:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[16:31:41] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[16:32:49] *** Joins: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net)
[16:38:49] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:53:42] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[17:19:04] *** Quits: hwj (~hwj@i5C740818.versanet.de) (Remote host closed the connection)
[17:19:05] *** Joins: hwj2 (~hwj@i5C740818.versanet.de)
[17:34:37] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 240 seconds)
[17:40:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:47:14] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6)
[17:47:18] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[17:52:35] *** Quits: hwj2 (~hwj@i5C740818.versanet.de) (Remote host closed the connection)
[17:52:41] *** Joins: hwj2 (~hwj@i5C740818.versanet.de)
[17:53:02] *** Quits: hwj2 (~hwj@i5C740818.versanet.de) (Remote host closed the connection)
[17:56:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:57:27] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[18:01:47] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[18:09:33] *** Joins: hwj (~hwj@i5C740818.versanet.de)
[18:13:47] *** Joins: arkurious (~arkurious@user/arkurious)
[18:16:32] *** Quits: hugbubby (~hugbubby@49.207.215.73) (Ping timeout: 260 seconds)
[18:20:10] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[18:21:33] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:25:05] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[18:33:51] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:37:30] *** Joins: hugbubby (~hugbubby@49.207.215.73)
[18:43:11] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[18:48:02] *** Quits: hugbubby (~hugbubby@49.207.215.73) (Ping timeout: 260 seconds)
[18:53:12] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:54:03] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[19:01:24] *** Joins: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles)
[19:03:01] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:05:51] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[19:08:04] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Client Quit)
[19:08:38] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[19:10:48] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:17:40] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 246 seconds)
[19:19:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:21:00] *** Quits: hwj (~hwj@i5C740818.versanet.de) (Ping timeout: 272 seconds)
[19:23:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[19:29:59] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:33:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[19:41:11] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::4)
[20:00:16] *** Joins: moog (~moog@98.97.81.134)
[20:02:30] *** Joins: moog_ (~moog@98.97.84.204)
[20:05:19] *** Quits: moog (~moog@98.97.81.134) (Ping timeout: 260 seconds)
[20:08:35] *** Quits: moog_ (~moog@98.97.84.204) (Ping timeout: 260 seconds)
[20:29:16] *** Joins: Tekk (~tekk@static-198-54-133-153.cust.tzulo.com)
[20:29:32] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[20:31:18] *** Quits: tsmanner_ (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Ping timeout: 260 seconds)
[20:32:40] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[20:49:34] *** Joins: xackus (~xackus@185.15.0.3)
[20:56:23] *** Joins: rgrinberg (~textual@177.248.156.216)
[21:02:52] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[21:10:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:213d:84ff:7913:27a6) (Ping timeout: 260 seconds)
[21:12:14] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[21:23:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:26:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:30:34] *** Joins: Guest7 (~Guest7@86.4.72.180)
[21:37:41] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[21:38:16] *** Quits: Guest7 (~Guest7@86.4.72.180) (Ping timeout: 250 seconds)
[21:51:55] *** Joins: hugbubby (~hugbubby@49.207.215.73)
[21:57:01] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:05:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:07:49] *** Joins: thush (~thush@host-92-26-184-190.as13285.net)
[22:15:32] *** Joins: phaleth (~user@user/phaleth)
[22:16:31] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:22:46] *** Quits: Tekk (~tekk@static-198-54-133-153.cust.tzulo.com) (Ping timeout: 272 seconds)
[22:25:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:37:45] *** Joins: vicfred (~vicfred@user/vicfred)
[22:39:52] *** Joins: flyx[m] (~flyxflyxo@mail.flyx.org)
[22:41:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:43:23] *** Joins: rgrinberg (~textual@177.248.156.216)
[22:54:25] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[22:55:22] *** Quits: thush (~thush@host-92-26-184-190.as13285.net) (Ping timeout: 260 seconds)
[23:02:56] *** Joins: Tekk (~tekk@static-198-54-133-153.cust.tzulo.com)
[23:17:10] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:17:30] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[23:27:34] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:27:45] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:31:48] *** Joins: thush (~thush@host-92-26-184-190.as13285.net)
[23:37:02] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:41:41f:11f9:39b8)
[23:41:20] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[23:45:59] *** Quits: phaleth (~user@user/phaleth) (Ping timeout: 256 seconds)
[23:48:28] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[23:49:32] <haze> bruh keyword when
