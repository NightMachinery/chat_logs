[00:01:14] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:05:06] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:19:41] *** Joins: jfuller (~jimfuller@ip-85-160-13-190.eurotel.cz)
[00:28:59] <bagder> why are people finding .netrc bugs now!
[00:29:09] <bagder> these bugs are like 20 years old
[00:38:40] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:48:21] *** Quits: magla (~gelignite@55d483f5.access.ecotel.net) (Quit: Stay safe!)
[01:35:31] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:48:17] *** Quits: jfuller (~jimfuller@ip-85-160-13-190.eurotel.cz) (Ping timeout: 240 seconds)
[02:19:28] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[02:44:22] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Remote host closed the connection)
[02:45:14] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[03:06:00] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:ff6c:f852:4f52:5e7c) (Quit: Konversation terminated!)
[03:30:53] *** Quits: spare (~4tuazk2h3@user/spareproject) (Remote host closed the connection)
[03:34:59] *** Joins: z_lehinsun (~lehinsun@188.113.178.220)
[03:56:43] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:01:03] *** Quits: z_lehinsun (~lehinsun@188.113.178.220) (Quit: Leaving)
[04:03:00] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:08:15] *** Joins: z_lehinsun_ (~lehinsun@188.113.178.220)
[04:23:28] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[04:25:17] *** Joins: xse (~xse@user/xse)
[04:44:24] <Piru> bugs'r'us
[04:44:57] *** Joins: cliluw (~cliluw@47.147.73.223)
[04:47:52] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[05:00:15] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[05:00:27] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[05:00:33] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[05:00:46] *** Joins: xse (~xse@user/xse)
[05:21:52] *** Quits: z_lehinsun_ (~lehinsun@188.113.178.220) (Ping timeout: 256 seconds)
[05:33:44] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:44:14] *** Joins: spare (~goiaqzizi@user/spareproject)
[06:12:21] *** Quits: spare (~goiaqzizi@user/spareproject) (Remote host closed the connection)
[06:13:38] *** Joins: spare (~goiaqzizi@user/spareproject)
[06:28:48] *** Joins: rgrinberg (~textual@187.223.71.231)
[06:30:21] *** Quits: spare (~goiaqzizi@user/spareproject) (Remote host closed the connection)
[06:35:10] *** Joins: Vonter (~Vonter@user/vonter)
[07:18:18] *** Joins: WishBoy (~WishBoy@user/wishboy)
[07:24:07] *** Joins: z_lehinsun (~lehinsun@188.113.178.220)
[07:27:56] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[07:28:39] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[07:33:33] *** Joins: cliluw (~cliluw@47.147.73.223)
[08:33:08] *** Quits: Jaxx (~Jaxx@user/jaxx) (Quit: Leaving)
[08:53:13] *** Joins: jfuller (~jimfuller@ip-85-160-35-215.eurotel.cz)
[09:15:54] *** Quits: jfuller (~jimfuller@ip-85-160-35-215.eurotel.cz) (Ping timeout: 256 seconds)
[09:18:17] <kushal> bagder, :)
[10:00:56] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:03:30] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[10:12:54] *** Joins: Vonter (~Vonter@user/vonter)
[10:21:03] *** Joins: jfuller (~jimfuller@2.100.broadband6.iol.cz)
[10:28:27] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[10:30:28] *** Joins: Vonter (~Vonter@user/vonter)
[10:32:25] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[10:34:31] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:35:21] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:35:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:35:48] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[10:50:56] *** Quits: kolla (~kolla@cloudsmurf.kolla.no) (Quit: %fog relay%)
[10:51:40] *** Joins: kolla (~kolla@cloudsmurf.kolla.no)
[11:24:39] <bagder> ah it was no bug...
[11:26:29] <quinq> Just in the man-page: See netrc(5)
[11:26:37] <quinq> I don't know where to find such man-page :/
[11:27:08] <bagder> no, I don't have one either
[11:27:32] <bagder> annoyingly enough
[11:28:05] <quinq> https://helpmanual.io/man5/netrc/
[11:28:35] <quinq> humm
[11:28:41] <bagder> this one also says default needs to be last
[11:28:52] <bagder> phew
[11:31:42] <quinq> https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html überGNU
[11:32:48] <quinq> https://www.ibm.com/docs/en/aix/7.2?topic=formats-netrc-file-format-tcpip IBM monolith
[11:32:48] <bagder> yes, I linked that in #8256
[11:32:54] <quinq> ok :)
[11:33:17] <bagder> the IBM one *also* says default needs to be last
[11:33:29] <bagder> so I think it is now a rather safe assumption
[11:36:54] <bagder> I'll extend the section in everything curl ...
[11:45:20] <bagder> like this: https://everything.curl.dev/usingcurl/netrc
[12:01:42] *** Quits: rgrinberg (~textual@187.223.71.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:17:22] *** Joins: Vonter (~Vonter@user/vonter)
[12:27:25] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[12:32:29] *** Joins: icing (~stefan@2001:16b8:f341:b400:49eb:de1f:856d:b518)
[12:32:30] *** Quits: icing (~stefan@2001:16b8:f341:b400:49eb:de1f:856d:b518) (Changing host)
[12:32:30] *** Joins: icing (~stefan@user/icing)
[12:32:49] *** Joins: Vonter (~Vonter@user/vonter)
[12:42:32] *** Joins: uid_max (~samw@host81-159-60-189.range81-159.btcentralplus.com)
[12:53:18] *** Joins: spare (~p7znalyiq@user/spareproject)
[12:53:49] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:05:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[13:07:14] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[13:08:43] *** Joins: Vonter (~Vonter@user/vonter)
[13:08:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:30ae:97d7:8d1d:fbf3) (Ping timeout: 240 seconds)
[13:14:37] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Remote host closed the connection)
[13:14:56] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[13:20:08] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[13:24:07] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Remote host closed the connection)
[13:24:24] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[13:28:32] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Client Quit)
[13:29:00] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[13:34:16] *** RemoteHost is now known as A_Dragon
[13:40:02] *** Joins: maroloccio (~marolocci@151.75.59.229)
[13:50:52] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Remote host closed the connection)
[13:53:22] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[14:27:40] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:35:01] <p-i-_> Is there any software in the public dommain for sending an HTTP POST that's faster than libcurl?
[14:35:48] *** Quits: maroloccio (~marolocci@151.75.59.229) (Quit: WeeChat 3.0)
[14:35:56] <p-i-_> As I understand libccurl is a kind of umbrella library... it has to cater for a lot of different scenarios.
[14:36:50] <p-i-_> If I have a fixed target (I'm trying to optimize a POST _from_ a specific server _to_ a specific server) is there anything I can do to reduce latency?
[14:37:23] <bagder> run your service on a machine that's closer to both those machines
[14:37:24] <apollo13> open a tcp socket in whatever language you use and just send the data? although I doubt that you will win massively there
[14:37:36] <apollo13> but as for latency itself, that is not controlled by your code
[14:38:08] <bagder> p-i-_: what kind of numbers/time are we talkina bout?
[14:38:18] <apollo13> also if http post is to slow, http is probably the wrong protocol :D
[14:47:59] <bagder> a start is to consider what the best possible time is, and then measure how curl performs
[14:48:19] <bagder> then ponder if or how much you can improve on that
[14:49:39] <bagder> lunch!
[14:49:42] <p-i-_> I'm already on the same subnet (AWS Tokyo Subnet A) as the target server.
[14:53:39] <p-i-_> Badger: I'm not sure how to measure theoretical minimal time to reach server. I don't know if ping is reliable.
[14:58:53] *** Quits: spare (~p7znalyiq@user/spareproject) (Remote host closed the connection)
[15:11:05] <apollo13> p-i-_: differently put: what makes you think that changing from curl to something else would make it faster?
[15:12:25] <p-i-_> apollo13: Is it possible to perform an HTTP POST at the TCP level? It's over HTTPS... I think I'd just be reinventing the wheel if I tried
[15:12:55] <apollo13> p-i-_: well HTTPS adds a "lot" of time. That said the first step is to get a profile of what takes how long
[15:13:00] <apollo13> and then think about improving
[15:13:56] <apollo13> you'd probably start by measuring the individual times via https://curl.se/libcurl/c/curl_easy_getinfo.html 
[15:13:56] <p-i-_> I placed a trade in response to a signal, and someone else beat my C++ engine to the punch from using Python. I'm still trying to figure out where latency could have entered.
[15:14:29] <apollo13> well maybe they kept an active connection
[15:14:52] <p-i-_> I did too... I greased the pipeline by making a $1 trade 30s before
[15:14:53] <apollo13> then you don't have the overhead of the tcp & tls handshakes
[15:15:06] <p-i-_> yeah I think I solved that one.
[15:15:16] <apollo13> you think or you know?
[15:15:34] <apollo13> also network latencies can be affected by numerous factors especially if the network is saturated
[15:15:46] <jfuller> p-i-_: the only way to get faster is to benchmark your application and understand env (including network)
[15:15:49] <apollo13> either way, I'd get proper timings & logs from your app and then you can start about improving
[15:16:06] <jfuller> going for optimisations (like build curl with minimal deps, etc) would not be my first step
[15:16:11] *** Joins: kdudka_ (kdudka@nat-pool-brq-t.redhat.com)
[15:16:30] <jfuller> understand where time/resource is spent by measuring it
[15:16:34] <p-i-_> yeah, you're right. I need to build a minimal testcase that generates timing info and then find the bottlenecks
[15:17:16] <jfuller> you can characterise best case perf by mocking up something local and hit that with libcurl
[15:17:27] <jfuller> then start layering on more reality (like live network, etc)
[15:18:34] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Ping timeout: 256 seconds)
[15:19:01] <p-i-_> There's an API call to fetch server timestamp... I think that'll do nicely
[15:19:19] <jfuller> start simple like curl --write-out "%{json}" https://targetserver.com/example 
[15:19:30] <jfuller> which should be slower then custom via libcurl
[15:19:41] <jfuller> write out will give you some good breakdown of where time is spent
[15:20:17] <jfuller> defining best and worst case then running multiple times to avg out intermittencies might be a good place to start
[15:20:33] *** Quits: uid_max (~samw@host81-159-60-189.range81-159.btcentralplus.com) (Quit: Leaving)
[15:20:34] <p-i-_> Can I set that flag via code?
[15:20:37] <apollo13> I'd probably add the target url twice to reuse the connection and get better timings for keep alive connections as well? (not sure how that is reflected in the output though)
[15:21:04] <jfuller> you have access to all the timings in libcurl
[15:21:15] <apollo13> p-i-_: I don't know what %{json} shows, but you can check my link above that gives you all the info you need in C
[15:21:48] <jfuller> https://everything.curl.dev/usingcurl/verbose/writeout
[15:22:06] <jfuller> sorry I am not going to check any links ... just trying to give some pointers
[15:22:28] <p-i-_> Thanks!
[15:23:16] <apollo13> jfuller: oh my link was targeted at p-i-_ anyways not at you (sorry)
[15:23:33] <jfuller> np
[15:23:40] * jfuller is easily confused
[15:24:13] *** Joins: uid_max (~samw@host81-159-60-189.range81-159.btcentralplus.com)
[15:40:10] *** Quits: icing (~stefan@user/icing) (Remote host closed the connection)
[15:40:59] *** Joins: icing (~stefan@i59F635EE.versanet.de)
[15:40:59] *** Quits: icing (~stefan@i59F635EE.versanet.de) (Changing host)
[15:40:59] *** Joins: icing (~stefan@user/icing)
[15:42:54] *** Joins: spare (~p7znalyiq@user/spareproject)
[15:45:25] *** Quits: icing (~stefan@user/icing) (Ping timeout: 240 seconds)
[15:49:09] *** Quits: spare (~p7znalyiq@user/spareproject) (Ping timeout: 276 seconds)
[15:53:58] *** Joins: spare (~p7znalyiq@user/spareproject)
[16:19:01] <p-i-_> Well this is bizarre. I'm picking up the signal 1ms after a friend of mine who's using Python (pycurl). And immediately I'm executing 2 curl-multi buys. Yet his buy went through in 162ms and mine took 337ms.
[16:19:03] *** Quits: spare (~p7znalyiq@user/spareproject) (Ping timeout: 276 seconds)
[16:20:00] <p-i-_> It's possible that because his buy moments before, the cronky old crypto-exchange might have spent ages chewing his order, and delayed mine.
[16:20:46] *** Joins: spare (~p7znalyiq@user/spareproject)
[16:23:27] *** Quits: spare (~p7znalyiq@user/spareproject) (Remote host closed the connection)
[16:24:39] <p-i-_> Another possibility is that my network connection is being saturated by inbound websocket packets, and this is affecting an OUTBOUND HTTP POST. Does that sound remotely possible?
[16:25:54] <p-i-_> https://gist.github.com/p-i-/ea9a4bb7888917135ba4b3ecac62282c ... AFAICS I have a clean curl-multi impl -- I can't see any significant optimizations. I see a few at the microsecond level but nothing beyond that...
[16:29:17] <p-i-_> It's possible also the websocket code is fighting for CPU with libcurl, but I'm running as 2 separate processes: `gen_wss_feed | tee log1.txt | process_and_make_orders | tee log2.txt`
[16:30:55] <bagder> that code does not keep any connection alive ?
[16:31:00] <bagder> also, does it use HTTP/2 ?
[16:31:22] *** Joins: spare (~p7znalyiq@user/spareproject)
[16:31:35] <bagder> and again, the RTT time to the server is highly relevant, are you having the same distance to it?
[16:32:04] <p-i-_> distance -- yes, identical: AWS EC2 on same subnet as server
[16:33:12] <p-i-_> `curl --version` reports HTTP2 under Features... does that mean that I _am_ using HTTP2?
[16:33:30] <bagder> it means you *can* use it
[16:33:38] <p-i-_> Is it faster?
[16:34:10] <bagder> it would let you do all transfers "at once" over the same connection
[16:34:45] <p-i-_> hmm well I'm making 2 trades, and responses both got logged within the same millisecond
[16:34:52] <p-i-_> So I think that part is working
[16:35:26] *** Quits: spare (~p7znalyiq@user/spareproject) (Remote host closed the connection)
[16:36:38] <p-i-_> Concerned about "keep connection alive". I thought I WAS doing this. Because `void main() { auto multi = Multi(); multi.post("DOGE-USDT", {1,2}); ... (monitor signals and at some point make another .post call)`
[16:37:24] <p-i-_> How can I keep connection alive?
[16:37:28] <bagder> on line 112 you create a brand new multi handle, it has no connection alive in there
[16:37:33] <p-i-_> If that's the case, that's what nuked me.
[16:38:30] <bagder> probably not
[16:38:48] <bagder> if you run it on the same subnet, a new connections takes less than milliseconds to set up
[16:38:52] <p-i-_> What should I be doing? Moving that line into the c'tor?
[16:39:04] <bagder> nothing in your code explains 100s of milliseconds
[16:39:14] <p-i-_> What, even with SSL handshaking etc?
[16:39:16] <bagder> it should be within a few
[16:39:33] <p-i-_> Nevertheless, that's a great catch! Much obliged.
[16:42:50] <p-i-_> It's possible a bunch of traders got in during that brief gap, which slowed down the server, creating a long processing queue, and that explains the rest.
[16:45:06] *** Joins: icing (~stefan@2001:16b8:f341:b400:49eb:de1f:856d:b518)
[16:45:06] *** Quits: icing (~stefan@2001:16b8:f341:b400:49eb:de1f:856d:b518) (Changing host)
[16:45:06] *** Joins: icing (~stefan@user/icing)
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:50:00] <gevaerts> Could you try a (very small, of course) trade at some non-triggered time, i.e. when lots of other people aren't likely to be doing the same thing?
[16:50:26] <gevaerts> That coult confirm the "server busy" hypothesis
[16:52:56] <p-i-_> Yes! That's what I'm gona do. Then I can examine the distribution in response-time.
[17:01:04] *** Joins: spare (~p7znalyiq@user/spareproject)
[17:10:15] <p-i-_> can libcurl make use of multiple cpu cores? e.g. if I do 10 curl-multi POSTs on a 16-core machine, can I get it to distribute them over the cores?
[17:11:48] <gevaerts> Not with a single multi handle
[17:12:20] <bagder> and if the problem is in the receiver, no such optmization will help
[17:13:55] <p-i-_> I suppose I could create a curl object on each core, and use some IPC mechanism to broadcast to each core to make the POST.
[17:14:03] <bagder> yes
[17:14:11] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[17:14:16] <p-i-_> badger: what do you mean by "in the receiver"?
[17:17:08] <bagder> look, on a modern machine with no RTT to speak of, you should be able to setup and fire away a small POST over HTTPS within 20 milliseconds, everything else is additional time imposed by something else
[17:18:50] <bagder> if I were you, I would do a time stamped log that shows the time for different stages
[17:22:06] <p-i-_> Do you mean putting print statements in that code-chunk I pasted? Or setting some verbose flag...
[17:30:00] <p-i-_> I'm looking through https://www.reddit.com/r/cpp/comments/cp42p8/fast_http_request_libraries/ -- not much usable information, as there are no scientific benchmarks. There's a claim that Python's requests and a go impl are faster than libcurl. But ... unsubstantiated. Is anyone aware of benchmarks of various technologies that perform HTTP POST?
[17:30:26] <bagder> what do you mean?
[17:30:32] <bagder> how fast can it be?
[17:31:37] <p-i-_> I'm looking around for speed comparisons between different packages that perform HTTP POST. I see there's a boost::beast one (but apparently only HTTP 1.1). There's Python's `requests` lib. etc.
[17:31:45] <bagder> run a POST against a dummy https server and you'll see how fast it is
[17:32:06] <bagder> for all of them, setting up the TCP + TLS is going to take the longest
[17:32:17] <p-i-_> Have you come across any decent benchmarks comparing different libraries?
[17:32:31] <bagder> that rarely makes any sense
[17:33:15] <bagder> but no I haven't
[17:33:30] <bagder> everyone would have a different idea what "faster" means too
[17:34:20] <p-i-_> I guess it probably depends on the serverside tech-stack too... too many variables/dimensions-of-freedom
[17:35:19] <bagder> if you can do your operation faster with any other library than libcurl and the difference is larger than a millisecond or two, then I will be surprised
[17:50:33] *** Quits: DonRichie (~DonRichie@ricl.de) (Quit: bye)
[17:53:19] *** Joins: DonRichie (~DonRichie@ricl.de)
[18:09:05] <bagder> I'll be on https://www.twitch.tv/snyklive in 20 minutes
[18:09:09] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6) (Remote host closed the connection)
[18:09:42] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[18:10:11] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[18:13:59] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6) (Ping timeout: 250 seconds)
[18:16:36] *** Joins: xse (~xse@user/xse)
[18:22:12] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:25:01] <icing> more bagder-tv! \o/
[18:33:18] <icing> loud jingle music!
[18:36:55] * jfuller I feel seen - https://slsa.dev/example ... one bullet point they missed off "* make sure Jim is not evil"
[18:37:12] <jfuller> root of trust problem
[18:43:52] *** Joins: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95)
[18:58:12] *** Joins: kdudka__ (kdudka@nat-pool-brq-t.redhat.com)
[19:01:16] *** Quits: kdudka_ (kdudka@nat-pool-brq-t.redhat.com) (Ping timeout: 256 seconds)
[19:11:59] *** Quits: kdudka__ (kdudka@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:13:35] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[19:13:46] <jfuller> there is a low 'people named Daniel' % in the synklive chat
[19:15:41] <gevaerts> Indeed. Worrying :)
[19:26:36] *** Joins: kdudka_ (kdudka@nat-pool-brq-t.redhat.com)
[19:26:46] *** Quits: jfuller (~jimfuller@2.100.broadband6.iol.cz) (Ping timeout: 256 seconds)
[19:29:01] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Ping timeout: 240 seconds)
[19:29:14] *** Joins: nvmd (~nvmd@user/nvmd)
[19:31:58] *** ln5__ is now known as ln5
[19:34:39] <icing> TIL: urllib3 accepts one url with a space in it. the story continues...
[19:37:20] <bagder> haha
[19:37:45] * Piru just found some gaping security fail from microsoft security product
[19:38:06] <zelest> congrats on bountymoney :P
[19:38:10] <icing> urllib3.parse() -> security check -> run('curl %s', url)
[19:38:48] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: The Lounge - https://thelounge.chat)
[19:40:56] <Piru> we'll see. but this is so elementary stuff that I'm really puzzled
[19:41:12] <Piru> like frigging crypto 101
[19:44:20] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[19:45:12] <p-i-> dangit missed ya
[19:45:15] <p-i-> watching now
[19:47:40] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[19:48:21] <bagder> thanks for spicing up the stream
[19:48:57] <moparisthebest> sometimes microsoft just markets gaping security fails as products
[19:49:05] <icing> well, you paying us the big bucks, no need to thank
[19:49:51] <moparisthebest> I remember one I was asked to implement back in the day, this was a web application, and microsoft's security product ran a java applet on the client's computer to "scan for viruses" before letting them log into the web application
[19:50:16] <moparisthebest> 1. who cares if the user of your website has a virus, how poorly is your web application written that this matters
[19:50:37] <moparisthebest> 2. "security by asking-if-you-are-secure" and no one saw a problem with this :P
[19:51:00] *** Quits: kdudka_ (kdudka@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:51:37] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Client Quit)
[19:52:07] <moparisthebest> I couldn't get the project shot down with security arguments, the one that did work though was "this will exclude mobile phones" :D
[19:52:17] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[19:52:40] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:53:20] <Piru> very crafty of you
[19:54:24] <Piru> I was actually evaluating this thing, if we could use it ourselves. yeah, so big "no" for this one
[20:02:02] <moparisthebest> I'm not having any luck finding the name of this product... it was circa 2012 or 2013
[20:08:31] <moparisthebest> this was it! Microsoft UAG, discontinued 2013 https://en.wikipedia.org/wiki/Microsoft_Forefront_Unified_Access_Gateway#Technical_overview
[20:09:14] <moparisthebest> "These components can also perform end-point compliance checks before allowing access, to test for attributes on the PC such as domain name, antivirus definitions date or running processes. "
[20:09:28] <moparisthebest> I'll just run code on a potentially compromised computer to ask it if it's compromised
[20:24:35] <p-i-> wow, you got the urllib3 maintainer listening in
[20:34:41] *** Joins: jfuller (~jimfuller@ip-85-160-35-215.eurotel.cz)
[20:42:08] *** Quits: jfuller (~jimfuller@ip-85-160-35-215.eurotel.cz) (Ping timeout: 256 seconds)
[20:42:57] *** Quits: uid_max (~samw@host81-159-60-189.range81-159.btcentralplus.com) (Quit: Leaving)
[20:44:29] *** Quits: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:20] *** Joins: Jaxx (~Jaxx@user/jaxx)
[21:41:04] *** Joins: kdudka (~kdudka@11.198.broadband2.iol.cz)
[21:47:33] *** Quits: spare (~p7znalyiq@user/spareproject) (Remote host closed the connection)
[21:49:57] *** Quits: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596) (Read error: Connection reset by peer)
[21:51:52] *** Joins: spare (~p7znalyiq@user/spareproject)
[21:55:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[21:57:36] *** Quits: kdudka (~kdudka@11.198.broadband2.iol.cz) (Quit: Leaving)
[21:59:42] *** Joins: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596)
[22:25:44] *** Joins: magla (~gelignite@55d42175.access.ecotel.net)
[22:29:14] *** Quits: spare (~p7znalyiq@user/spareproject) (Remote host closed the connection)
[22:30:21] *** Quits: icing (~stefan@user/icing) (Quit: Leaving...)
[22:32:30] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[22:33:08] *** Joins: Jaxx (~Jaxx@user/jaxx)
[22:36:05] *** Quits: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596) (Read error: Connection reset by peer)
[22:37:38] <p-i-> badger: you pointed out I should be reusing the curl-multi handle
[22:37:52] <p-i-> Is there also a benefit to reusing the easy-handles too?
[22:37:59] <p-i-> e.g. maintaining a pool of them
[22:49:03] *** Joins: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596)
[23:21:47] *** Joins: WishBoy (~WishBoy@user/wishboy)
[23:59:47] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
