[00:17:32] <dpk> i will point out that alists are probably the fastest and memory-cheapest dictionary for things up to about 20 or 25 entries
[00:21:00] <dpk> (now i can't find the blog entry where someone benchmarked that)
[00:21:44] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:22:11] *** Joins: Darkcoal (~user@user/Darkcoal)
[00:22:27] <sham1> But O(n) lookup! But yeah, probably for small dictionaries it's alright
[00:24:07] <Zipheir> O(25) = O(1)
[00:31:19] <dpk> i did accidentally find the blog post (i think from the same author, but i can't find the alist pos i mean) on numbers which i wanted to refer to when we were complaining about the numeric tower recently http://arcanesentiment.blogspot.com/2015/01/if-scheme-were-like-scheme.html
[00:32:19] <sham1> I love that post
[00:32:27] <sham1> Monomorphise ALL THE THINGS
[00:35:58] <dpk> ahh, it was the other blogspot about Lisp with the off-white background http://funcall.blogspot.com/2016/01/alist-vs-hash-table.html
[00:36:40] <tokie> i just implemented a scheme numerical tower a week or two ago, so that blog post is too real
[00:36:57] <dpk> comparable test for Racket: https://eighty-twenty.org/2016/01/30/racket-alist-vs-hashtable
[00:37:06] <sham1> > Arithmetic overflow would still be “a violation of an implementation restriction”. There would still be no way to find out how large a number could safely be.
[00:37:08] <sham1> What is this, C?
[00:37:14] <dpk> (old Racket, not Chez Racket)
[00:37:28] <tokie> sham1: right???
[00:37:33] <dpk> sham1: that's exactly what R5RS and R7RS actually say ;-)
[00:37:43] <sham1> For what
[00:37:49] <dpk> arithmetic overflow
[00:37:54] <tokie> it was great implementing scheme's numerical tower in rust because rust provides things like i64::MAX and num.checked_add() and such
[00:38:32] <dpk> you are only required to have exact integers, and only required to have as many of them as are needed to access the last index in the largest possible string, bytevector, or vector your implementation supports
[00:38:41] <dpk> and It Is An Error if an addition overflows
[00:38:55] <dpk> and you also don't get a way to find out what the largest exact integer is
[00:39:23] <sham1> So one could do only fixnums
[00:39:27] <sham1> If they wanted to
[00:39:41] <tokie> yes, the spec is hand wavey
[00:39:47] <tokie> and suggest speaking to a numerical analyst 
[00:39:51] <tokie> *suggests
[00:40:20] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:40:47] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Remote host closed the connection)
[00:41:08] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:41:12] <sham1> Ah, found it. It's not under any place I would have thought to look, like under the "Standard procedures" subsection for numbers, but 1.3.2
[00:41:35] <dpk> it's why i snarkily noted in SRFI 223 that the sample implementation won't work unless your implementation has bignums. (in practice, i think the only actual R7RS implementation that fits this is Chicken without the numbers egg, which (like Chicken without the utf8 egg) roughly speaking about 0 people actually use)
[00:41:58] <tokie> > (define largest 0)
[00:42:00] <tokie> > (let ~ () (set! largest (+ largest 1))
[00:42:06] <tokie> ^^ it will error eventually
[00:42:25] <tokie> oops, add the ~ call
[00:42:37] <dpk> no, it might just loop infinitely ;-)
[00:42:38] <sham1> "For example, an implementation may report a violation of an implementation restriction if it doesn't have enough storage to run a program, or if an arithmetic operation would produce an exact number that is too large for the implementation to represent."
[00:42:51] <sham1> neat
[00:43:00] <tokie> dpk: well, ... you will run out of memory at some point
[00:43:08] <tokie> even with bignum!
[00:43:23] <tokie> it just might take millions of years or something
[00:43:38] <dpk> and if adding 1 to the equivalent of most-positive-fixnum causes it to return least-positive-fixnum? ;-)
[00:43:45] <sham1> You might just OOM before it
[00:43:54] <tokie> dpk: ooof
[00:44:03] <tokie> okay okay, you need a < 0 check
[00:44:15] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[00:44:34] <sham1> Isn't that why we have SRFI 143 and fx+
[00:45:05] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[00:46:05] <sham1> Also, least-positive-fixnum? I've heard of most-negative-fixnum over in the CL lang
[00:46:06] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[00:46:31] <sham1> Wouldn't the least positive fixnum just be 1
[00:46:42] <sham1> Since zero is non-negative and non-positive
[00:47:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[00:47:20] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:49:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[00:49:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[00:49:25] <tokie> oops, i left that loop running
[00:49:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:49:38] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4)
[00:49:38] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4) (Changing host)
[00:49:38] *** Joins: skapate (~Skapata@user/skapata)
[00:49:46] <dpk> haha
[00:49:52] <sham1> wow
[00:49:59] <sham1> Did you start swapping?
[00:50:00] <dpk> sham1: oh, yes, you're right
[00:50:22] *** Joins: badkins (~badkins@136.56.92.199)
[00:50:45] <tokie> sham1: nah it's TCO!
[00:50:53] <tokie> probably
[00:50:54] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[00:51:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[00:51:18] <sham1> It being TCO doesn't help against bignum allocations
[00:51:30] *** Joins: Darkcoal (~user@user/Darkcoal)
[00:51:43] <tokie> it would have to overflow i64 first
[00:51:48] <tokie> which is actually a really large number
[00:51:56] <sham1> That it is
[00:51:58] *** Quits: ASau` (~user@lmpc.drb.insel.de) (Quit: ERC (IRC client for Emacs 25.3.1))
[00:52:18] *** Joins: ASau (~user@lmpc.drb.insel.de)
[00:54:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[00:56:36] <tokie> looks like even if you could do 1B increments/sec, it'd take about 300 years
[00:58:59] <sham1> Meanwhile with a 32-bit system using a 32-bit integer it would take about 1-4 seconds
[01:02:16] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[01:02:39] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[01:04:20] <sham1> > There would still be no bitwise operations on integers. Schemers who understood the purpose would advise using an implementation that supports bitvectors instead of abusing numbers.
[01:05:05] <tokie> abusing numbers, lol
[01:05:06] <sham1> Honestly, I agree with this. I feel that one shouldn't conflate (Z_2)^n vectors with Z_{2^n} arithmetic
[01:05:13] <sham1> They have a bijection
[01:05:22] <sham1> One could just convert between them
[01:07:14] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[01:07:37] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[01:07:38] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[01:07:57] <sham1> > Complex numbers would, mercifully, be left to a SRFI. The SRFI number would be real, but in most implementations complex-number support would be purely imaginary.
[01:08:02] <sham1> And that's just fun in a punny way
[01:09:39] <sham1> Also it's sad that it rings oh so true
[01:11:11] <skeemer> i am having a hard time going on with SICP and its lectures
[01:11:21] <skeemer> are there simpler books for scheme and functional programming?
[01:11:51] <gwatt> which part of sicp are you looking at?
[01:11:58] <skeemer> it's like i get stuck in the examples that he does which are very mathematical and am not able to apply them to everyday life problems
[01:12:09] <skeemer> gwatt, https://www.youtube.com/watch?v=PEwZL3H2oKg&list=PLE18841CABEA24090&index=5
[01:15:12] *** Joins: badkins (~badkins@136.56.92.199)
[01:15:31] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[01:16:34] <dpk> apropos 64 bits being a lot of bits … i was recently considering allowing users of my (as yet hypothetical) Scheme compiler to define their own immediate types. probably up to 4096 (2**12) of them, each with access to 2**48 bits of machine word (because 4 more bits are used to say "this is a user-defined immediate") to do whatever they like in
[01:18:09] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:18:12] <dpk> one use-case i had was that when i wrote a date-time library, i type punned dates (in Dershowitz/Reingold's rata die system) as exact integers to avoid having to cons them, but it would have been nice to be able to make them a distinct type
[01:18:25] <dpk> anyone got any other ideas what you could potentially do with something like that?
[01:18:46] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[01:20:17] <gwatt> These would be different from bignums?
[01:22:16] <dpk> yes. the point is you would do something like (define-unsigned-immediate-type <rata-die> make-rata-die rata-die?), then (make-rata-die 1) gives you an immutable object representing 1 January, 1 AD proleptic Gregorian, that is of a type disjoint from all other Scheme types, but fits in a register and does not cons
[01:22:59] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Client Quit)
[01:23:28] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[01:23:42] <dpk> and the argument to make-rata-die can be up to (- (expt 2 48) 1). (though probably people want BC dates more than additional AD dates past the probable heat death of the universe, so it'd be define-signed-immediate-type and a limit of (- (expt 2 47) 1))
[01:24:14] <dpk> (oh, it needs an accessor as well to get a fixnum back out, duh. so rata-die->integer as an extra parameter or whatever)
[01:24:59] <sham1> I hope the idea could support ISO 8601's year zero
[01:26:49] <dpk> ISO 8601's 0000-12-31 is represented as 0 in the rata die system
[01:26:59] <sham1> Okay, nie
[01:27:00] <sham1> nice
[01:27:19] <dpk> i highly recommend Calendrical Calculations
[01:27:49] <dpk> for one thing, it's the only book i know which was actually written in Lisp. (they wrote Lisp code to translate Lisp code into mathematical notation with TeX)
[01:33:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[01:33:43] <Zipheir> Aren't the Little Books written with SLaTeX?
[01:34:33] <Zipheir> Yes.  So those are also "in LISP".
[01:34:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:35:01] <sham1> SLaTeX? So what, LaTeX but S-expressions?
[01:36:13] <Zipheir> I think so.  I haven't tried it  https://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/scheme/util/slatex/0.html
[01:36:30] <Zipheir> There's apparently a more recent, extended version (used for the Little Typer) somewhere.
[01:37:05] <Zipheir> Daniel Friedman's private fork, I guess.
[01:37:33] <dpk> okay, the only book not *about* Lisp that's written in Lisp ;-)
[01:38:32] <Zipheir> For some reason, I suspect that Douglas Hofstader may have tried writing in Lisp...  It's very him.
[01:43:26] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[01:43:50] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[01:48:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:53:24] <ASau> sham1: since you've mentioned it, do you know any example of reasonably sophisticaed program in APL or J.
[01:53:48] <ASau> sham1: I mean something that is useful and not an excercise to make the point.
[01:54:55] <ASau> sham1: also, the difference between "interpreter" and "compiler" is hard to draw now.
[01:55:42] <ASau> To the point that there exist people who think that Java is slower than C despite strong counterexamples of the opposite.
[01:56:44] <ASau> (As if HotSpot didn't appear in late 90ies or early 00ies and all related story has never happened.)
[01:57:59] <ASau> dpk: lexical binding existed in one of CLs predecessors for very long time by then.
[01:58:01] <gwatt> there's https://github.com/dyalog and https://github.com/Co-dfns , for APL
[01:59:01] <ASau> dpk: CL took rather long to standardize because there existed and significantly diverging competing de-facto standards.
[01:59:20] <ASau> dpk: the year does not demonstrate a lot.
[02:00:03] <ASau> dpk: IIRC, single name space also existed in several Lisps pre-dating Scheme.
[02:00:39] <ASau> Zipheir: you're wrong on Lisp-2 in treating function values.
[02:00:59] <ASau> Zipheir: The difference is just in name space.
[02:03:26] <Zipheir> ASau: Perhaps I should have said "a Lisp 2 does not treat *value* as true *functions*."
[02:03:36] <Zipheir> s/value/values/
[02:03:44] <ASau> That's also wrong.
[02:03:46] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[02:03:56] <Zipheir> I think it's quite apt, actually.
[02:04:03] <ASau> The primary difference is that in CL (and its predecessors):
[02:04:09] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[02:04:29] <ASau> a) procedural/function name space is separate from "normal" space;
[02:04:54] <ASau> b) first element of form is searched in procedural/function name space.
[02:05:21] <ASau> The rest is consequences.
[02:06:09] <Zipheir> Well, Jones speaking English is a consequence of Jones being able to make sounds with their mouth.
[02:06:10] <ASau> Like separate binding constructs ("labels" and rest), separate quote (#') and "funcall".
[02:08:25] <Zipheir> If f is a defun'd procedure and g is a procedure value, I should be able to write both (f x) and (g x).  But I can't in CL, so I maintain that the result of the choices in that language are that values are not first-class procedures.
[02:08:53] <ASau> Zipheir: yes, because first element in form is searched in different namespace.
[02:08:55] <ASau> That's all.
[02:09:03] <Zipheir> OK, agreed.
[02:09:08] <ASau> #'car is function value.
[02:09:37] <ASau> [1]> #'car
[02:09:37] <ASau> #<SYSTEM-FUNCTION CAR>
[02:10:25] <ASau> And all functions are just as first-class values as in Scheme, SML, O'Caml, Haskell and whatever else you can come up.
[02:10:40] <ASau> Even in Java.
[02:10:53] <sham1> They're first-class but they certainly don't have the same ergonomics as in those other languages mentioned, including Scheme
[02:11:29] <ASau> sham1: yes, but you have other useful features instead.
[02:14:07] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[02:14:10] <ASau> jcowan: your "Harlan" sounds suspiciously reminiscent of contemporary Java. :)
[02:14:31] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[02:14:59] <ASau> mdhughes: in Forth, everything is a number, and variables are just names for addresses.
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:17:07] *** ChanServ sets mode: +o Zipheir
[02:17:20] *** Zipheir sets mode: +b *!*catonano@*.cust.vodafonedsl.it
[02:17:20] *** catonano was kicked by Zipheir (Please fix your bouncer.)
[02:17:33] *** ChanServ sets mode: -o Zipheir
[02:23:12] <ASau> gwatt: I have looked at those references, and unfortunately there's nothing deserving any attention.
[02:24:22] <ASau> gwatt: in fact, it gives even worse impression of APL, since one of "repositories" is R bindings.
[02:24:52] <ASau> gwatt: as if APL cannot handle that easier than that horror that is called "R".
[02:26:01] <Zipheir> I'd prefer not to get into one of those "give me an example I don't think is trash" debates.  In the past, it has seemed like no-one enjoys them or learns much from them.
[02:26:23] <ASau> Zipheir: a demonstration is good in any case.
[02:27:29] <ASau> For Lisp and Scheme it is relatively easy to conceive one, given their "homoiconicity".
[02:28:03] *** Joins: mdhughes_ (mdhughes@user/mdhughes)
[02:28:34] <ASau> At least, Lisp in Lisp within 5 pages is really impressive.
[02:30:57] *** Quits: mdhughes (mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[02:34:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[02:38:13] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[02:39:14] <jcowan> ASau: you looked at the description I wrote?  I designed it to be compilable into either C++ or Java, but its OO is quite different from either.
[02:40:16] <jcowan> Lexical binding in C came specifically from Scheme, via Guy Steele
[02:41:43] <ASau> It is hard to tell, which type of "OO" is Java or C++.
[02:41:48] <ASau> These days.
[02:43:20] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[02:43:55] <ASau> "These days" is important, since Java "2" (1.5) differes from "Java 1" (before 1.5), Java 7-8 differ from Java 2 and 6, Java 11 is even more different, and Java 17 starts reminding Scala in some aspects.
[02:44:28] <sham1> Records!
[02:45:13] <ASau> (The first thing that I noticed is explicit support of SIMD, but right...)
[02:47:38] <jcowan> Unless you have giant alists, you can use ((a b) (c d) (e f) ...) and just make sure you extract the value with cdr (once you are sure it is not #f)
[02:49:00] <ASau> BTW, type inference and streams of Java 8 are also frightening to people who got stuck in 90ies with Java 1.1 and type erasure.
[02:49:35] <jcowan> You could evenn use cdr*: (lambda (x) (if (pair? x) (cdr x) x))) to protect you against trying to take the cdr of #f
[02:50:13] * ASau is strongly against such "solutions".
[02:50:23] <jcowan> HLLs are also frightening to people who are stuck in the 60s with assembler, where you control *everything*.
[02:50:59] <jcowan> (OF course, in those days "assembler" meant "IBM 360 assembler".
[02:51:24] <jcowan> I think targeting "asm" no longer makes sense, given M1 and other ARM machines.
[02:51:52] <ASau> I had once a demonstration how relaxing operations that one doesn't understand and passing respective compiler flags to gfortran one can make about 15-20% speedup.
[02:53:01] *** Joins: epony (epony@user/epony)
[02:53:15] <ASau> It is always funny to talk to people who think that they can "control everything" in C.
[02:53:49] <ASau> This isn't true since Watcom C which is year, I don't remember.
[02:53:54] <ASau> 1985?
[02:53:59] <ASau> 87?
[02:54:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:57:01] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 245 seconds)
[02:57:02] <ASau> We had once a case, when it optimized some test program to single "printf".
[02:59:26] *** Joins: jao (~jao@static-68-235-44-40.cust.tzulo.com)
[03:01:34] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9fb7:fcaa:76f6:5cca)
[03:04:55] *** Quits: jao (~jao@static-68-235-44-40.cust.tzulo.com) (Ping timeout: 250 seconds)
[03:04:55] *** Joins: badkins (~badkins@136.56.92.199)
[03:05:10] <ASau> jcowan: as for targeting asm, I think that these days it is rather stupid, since in overwhelming majority of cases, code passes through only few IRs, which are most likely either GCC's or LLVM's.
[03:05:27] <ASau> Or JVM.
[03:05:39] * jcowan nods
[03:05:41] <ASau> Or CLR.
[03:05:57] <ASau> Because of that, it makes more sense to target either of last 3 from the very beginning.
[03:06:54] <Zipheir> Diversity is good.  I hope we don't end up completely depending on a few backends.
[03:07:20] *** Joins: jao (~jao@68.235.43.85)
[03:07:43] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[03:10:00] <ASau> Zipheir: I don't know where you got that, all eukariotes (at least, I don't remember about bacteria) descend from single ancestor and have essentially the same "backend".
[03:10:16] <Zipheir> lol
[03:10:58] <ASau> I suspect that only viruses have different lines of descendance (also few).
[03:11:01] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:11:27] <ASau> I mean respective origins, not lines.
[03:16:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:17:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:18:14] <ASau> Zipheir: one of important proofs is that the code in DNA and RNA is universal, it is the same for all organisms. Thus life has single "IR" on top of lower-level chemistry.
[03:19:01] *** alMalsam1 is now known as alMalsamo
[03:24:43] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:9fb7:fcaa:76f6:5cca) (Ping timeout: 256 seconds)
[03:46:24] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:47:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:48:48] *** Joins: badkins (~badkins@136.56.92.199)
[03:53:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[03:54:33] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:02:00] *** Joins: badkins (~badkins@136.56.92.199)
[04:02:59] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[04:13:14] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:20:00] <dTal> ASau: a fascinating and underappreciated fact that, that I think about whenever someone brings up the possibility of certain weird organisms bein extraterretrial
[04:20:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:20:33] <dTal> yeah nope, every organism ever discovered is 100% terrestrial, or at any rate from the same lineage as we are
[04:25:00] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:25:25] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[04:27:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:33:53] <jcowan> Either that or our particular arrangement of RNA and DNA is in some way optimal.  I remember reading an article (probably by D. Hoftstadter) saying that protien-DNA mapping is in some sense optimal.
[04:35:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Remote host closed the connection)
[04:35:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:36:14] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:43:50] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[04:47:31] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[05:04:26] *** Joins: seninha (~seninha@user/seninha)
[05:12:20] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[05:13:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[05:13:31] *** Noisytoot is now known as [
[05:14:09] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[05:17:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:33:24] <ASau> jcowan: I don't quite understand what you mean under "optimal" here.
[05:34:07] *** Rue is now known as Carp
[05:34:43] *** Carp is now known as hlz
[05:35:00] <ASau> DNA/RNA code is definitely redundant. AFAICR, there's a hypothesis that originally it was 2 bases per aminoacid "plus padding".
[05:35:10] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:35:57] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:38:49] <ASau> (At least here, those biologists that work in popularization of science use to joke that if god were engineer, he would be fired soon after presenting his first creature.)
[05:49:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:52:09] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Read error: Connection reset by peer)
[05:52:53] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:53:33] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[06:01:07] *** Joins: livoreno (~livoreno@user/notzmv)
[06:15:57] *** Joins: notzmv (~zmv@user/notzmv)
[06:19:07] *** Joins: badkins (~badkins@136.56.92.199)
[06:23:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[06:27:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[06:30:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:44:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[06:45:24] *** Joins: mdhughes (mdhughes@user/mdhughes)
[06:46:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:48:32] *** Quits: mdhughes_ (mdhughes@user/mdhughes) (Ping timeout: 250 seconds)
[07:05:16] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[07:43:19] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:53:14] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:02:28] *** Quits: hlz (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:02:49] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:06:13] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:10:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:11:07] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[08:11:41] *** Quits: mdhughes (mdhughes@user/mdhughes) (Killed (NickServ (GHOST command used by mdhughes_!~mdhughes@user/mdhughes)))
[08:11:45] *** mdhughes_ is now known as mdhughes
[08:12:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:13:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:20:57] *** Quits: jao (~jao@68.235.43.85) (Ping timeout: 240 seconds)
[08:25:19] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:33:24] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:46:33] *** Joins: frost (~frost@user/frost)
[08:52:12] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:53:03] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:57:17] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:57:33] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[09:00:57] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 240 seconds)
[09:02:10] *** Joins: deltab (~deltab@user/deltab)
[09:04:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:06:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:06:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:15:46] *** Joins: badkins (~badkins@136.56.92.199)
[09:20:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:46:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:51:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:01:17] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[10:04:04] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[10:04:33] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:05:29] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:11:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:13:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:17:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[10:31:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:32:33] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[10:33:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:46:31] *** Joins: xsperry (~xs@user/xsperry)
[10:59:36] *** Joins: thevishy (~Nishant@2405:201:f005:c007:742b:aca7:e311:68b4)
[11:03:45] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[11:11:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:12:47] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[11:13:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:16:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:16:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:22:58] *** Joins: civodul (~user@guix/contributor/civodul)
[11:36:05] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[11:37:25] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:37:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:39:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:00:20] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:559e:b16d:1ccd:4b03)
[12:02:19] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:03:20] *** Joins: frost (~frost@user/frost)
[12:32:22] *** Joins: klovett_ (~klovett@107.127.17.177)
[12:34:20] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 250 seconds)
[12:35:38] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:00:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:02:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:17:32] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[13:17:49] *** Joins: badkins (~badkins@136.56.92.199)
[13:18:37] *** Joins: frost (~frost@user/frost)
[13:19:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[13:19:33] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:22:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[13:31:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[13:33:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:43:04] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:43:22] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:45:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:46:22] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[13:47:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:52:54] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:54:03] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:58:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:58:39] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:00:12] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[14:00:34] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:05:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:11:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:11:36] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:19:49] *** Joins: masoudd (~masoudd@user/masoudd)
[14:29:23] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:29:50] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:36:57] *** Joins: X-Scale` (~ARM@66.26.54.77.rev.vodafone.pt)
[14:38:29] *** Quits: X-Scale (~ARM@167.64.114.89.rev.vodafone.pt) (Ping timeout: 256 seconds)
[14:38:29] *** X-Scale` is now known as X-Scale
[14:39:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:40:31] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:47:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:49:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:51:06] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:57:53] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[15:01:09] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[15:06:03] *** Joins: seninha (~seninha@user/seninha)
[15:08:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:08:04] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[15:23:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:23:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:24:02] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[15:24:03] *** Joins: TCZ (~tcz@91.150.178.124)
[15:25:23] *** Quits: TCZ (~tcz@91.150.178.124) (Client Quit)
[15:26:00] *** Joins: TCZ (~tcz@91.150.178.124)
[15:27:23] *** Quits: TCZ (~tcz@91.150.178.124) (Client Quit)
[15:27:43] *** Joins: TCZ (~tcz@91.150.178.124)
[15:27:44] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[15:28:00] *** Joins: TCZ (~tcz@91.150.178.124)
[15:29:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:31:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:32:25] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:34:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:34:54] *** Joins: masoudd (~masoudd@user/masoudd)
[15:36:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:36:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:37:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:38:38] *** Joins: frost (~frost@user/frost)
[15:41:31] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:559e:b16d:1ccd:4b03) (Quit: Client closed)
[15:54:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:01:25] *** Joins: badkins (~badkins@136.56.92.199)
[16:05:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:11:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:13:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:20:05] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:31:21] *** Joins: frost (~frost@user/frost)
[16:33:50] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[16:36:55] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:44:38] <Mrtn[m]> <ASau> "DNA/RNA code is definitely..." <- Not really, as I understand it. RNA is kinda like what cassette tapes is to a home computer, where the dna is like the operating system.
[16:44:57] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099)
[16:44:57] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099) (Changing host)
[16:44:57] *** Joins: skapata (~Skapata@user/skapata)
[16:46:21] *** Joins: Everything (~Everythin@37.115.210.35)
[16:54:24] *** Joins: badkins (~badkins@136.56.92.199)
[16:58:05] *** Joins: civodul (~user@guix/contributor/civodul)
[17:00:06] <sham1> RNA is more like a copy for further processing
[17:01:42] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[17:01:44] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:07:32] *** Joins: seninha (~seninha@user/seninha)
[17:08:12] *** Quits: light (~light@user/light) (Ping timeout: 250 seconds)
[17:10:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:12:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:16:30] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[17:22:44] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[17:25:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:30:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[17:32:00] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[17:32:24] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[17:32:33] *** Joins: aeth (~aeth@user/aeth)
[17:39:11] *** Joins: light (~light@user/light)
[17:46:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:48:04] *** Joins: aeth (~aeth@user/aeth)
[17:48:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:57:22] <jcowan> sham1: Yes, for eukaryotes.  But some single-cell organisms use RNA alone, which is assumed to represent the initial state.  By the same token, viruses can be either DNA like herpes viruses, adenoviruses, smallpox and its relatives, or RNA viruses like those that cause colds, the flu, dengue fever, hep C (but not A or B), mumps, measles, polio, rabies, Ebola, and your friend and mine COVID-19.
[18:01:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:01:30] *** Joins: X-Scale` (~ARM@83.223.227.198)
[18:03:01] *** Quits: X-Scale (~ARM@66.26.54.77.rev.vodafone.pt) (Ping timeout: 240 seconds)
[18:03:01] *** X-Scale` is now known as X-Scale
[18:04:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[18:05:04] *** Joins: badkins (~badkins@136.56.92.199)
[18:06:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:07:24] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:07:49] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:08:10] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[18:08:18] *** Joins: Techcable (~Techcable@168.235.93.147)
[18:09:05] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[18:09:30] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:10:57] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[18:11:35] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:13:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[18:23:29] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:24:15] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:38:45] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:39:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:41:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:43:43] *** Joins: epony (epony@user/epony)
[19:02:54] *** Joins: frost (~frost@user/frost)
[19:05:07] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:05:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:08:15] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[19:09:07] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:14:37] *** Quits: [ (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 240 seconds)
[19:16:33] *** Joins: jao (~jao@static-68-235-44-40.cust.tzulo.com)
[19:17:58] *** Quits: linen (~user@S0106a84e3f501ab3.ed.shawcable.net) (Remote host closed the connection)
[19:21:43] *** Joins: linen (~user@S0106a84e3f501ab3.ed.shawcable.net)
[19:21:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:22:54] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:24:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:29:49] *** Quits: jao (~jao@static-68-235-44-40.cust.tzulo.com) (Ping timeout: 240 seconds)
[19:32:28] *** Joins: jao (~jao@68.235.43.173)
[19:33:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:40:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:40:15] <Zipheir> See also https://en.wikipedia.org/wiki/RNA_world
[19:40:29] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:41:41] *** Quits: thevishy (~Nishant@2405:201:f005:c007:742b:aca7:e311:68b4) (Quit: Leaving)
[19:42:17] *** Joins: epony (epony@user/epony)
[19:43:36] *** ChanServ sets mode: +o Zipheir
[19:43:50] *** Zipheir sets mode: -b *!*catonano@*.cust.vodafonedsl.it
[19:43:59] *** Zipheir sets mode: -b *!*alterform@*.hsd1.or.comcast.net
[19:44:13] *** ChanServ sets mode: -o Zipheir
[19:45:32] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[19:47:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:52:36] *** Joins: epony (epony@user/epony)
[19:56:54] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[20:03:08] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:09:53] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[20:12:21] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 250 seconds)
[20:14:51] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[20:15:16] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[20:20:10] *** Joins: badkins (~badkins@136.56.92.199)
[20:20:47] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 252 seconds)
[20:33:20] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:35:12] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[20:35:34] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[20:39:00] *** Joins: badkins (~badkins@136.56.92.199)
[20:43:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[20:46:38] *** Joins: badkins (~badkins@136.56.92.199)
[20:53:48] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:55:40] *** Joins: badkins (~badkins@136.56.92.199)
[20:58:25] *** Joins: ManDay (~manday@user/manday)
[21:01:05] *** Joins: rgherdt (~rgherdt@port-92-195-61-212.dynamic.as20676.net)
[21:05:32] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[21:05:56] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[21:15:50] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[21:19:35] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[21:19:53] <tatsumaru> Zipheir: was there ever a programming language you looked at and thought - wow that language sucks
[21:21:46] <ASau> php3?
[21:23:56] <Zipheir> tatsumaru: Probably, but I've been trying to avoid that kind of response, since I didn't learn much from it.
[21:24:00] <sham1> VB
[21:24:41] <ASau> VB is huge progress, when comparing it to earlier dialects.
[21:25:00] <Zipheir> tatsumaru: More often, I've read about a language and started writing in it while getting a growing feeling of "something's wrong here...".
[21:26:30] <Zipheir> I definitely had that sinking feeling with Go when the "empty interface type" started spreading everywhere while writing a simple bytecode compiler/machine.
[21:26:51] <ASau> sham1: ever programmed in basic with "letter, two digits at most, special sign" convention on names and "no other operator than goto" in conditional?
[21:27:00] <Zipheir> Ouch.
[21:27:21] <sham1> Well I suppose that any BASIC would qualify
[21:27:31] <sham1> I just happened to think of VB first
[21:27:31] <ASau> Not at all.
[21:28:05] <Zipheir> VisualBasic?  I recall having a lot of fun with that language when I was 11 or so.
[21:28:06] <sham1> Dijkstra seems to think so: https://www.goodreads.com/quotes/79997-it-is-practically-impossible-to-teach-good-programming-to-students
[21:28:25] <Zipheir> I think Dijkstra was a bit of a crank about BASIC.
[21:28:34] <ASau> sham1: yes, Dijkstra is writing with unspoken assumption of BASIC like I mentioned.
[21:29:33] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:71b:fd6b:4e6b:3da7)
[21:29:35] <ASau> Zipheir: no, the paper date's in the time when there was "letter, two digits at most, no else, only goto after then".
[21:30:19] <Zipheir> Yeah, I know.
[21:30:26] <ASau> Sometimes even subroutines weren't supported.
[21:30:26] <Zipheir> Still, I think he was being a grump.
[21:30:51] <ski> C64 BASIC (V2) had two significant identifier characters, but did allow other commands than a `GOTO' after `THEN'
[21:31:15] <ASau> That too, but if you compare BASIC of that kind at least with BASIC FORTRAN, you'll see the difference.
[21:31:25] <ski> can't recall if Casio PB100F BASIC would support the latter
[21:32:53] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[21:33:42] <ASau> ski: sure, later dialects supported "one operator except some restricted list" after "then" and longer variable names.
[21:34:07] <ASau> ZX BASIC supported quite lengthy names.
[21:34:22] <ski> C64 did too .. but only the first two characters counted
[21:34:40] <tatsumaru> Are there any psychotherapists which help basic programmers
[21:34:49] * ski . o O ( "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense." )
[21:34:51] <ASau> ski: Hm. I don't remember, if I met such limitations.
[21:35:31] <gwatt> lots of languages had weird restrictions that people no longer think about
[21:36:22] <gwatt> C certainly had its share, that are hopefully no longer present
[21:36:23] <ASau> For instance, some implementations of C just didn't interpret anything after 254th or 255th character on line.
[21:36:36] * ski . o O ( "PROGV is a testament to the success of synthetic methamphetamines in the rearing and education of the inveterately brain-damaged contributors to the X3J13 standardisation proceedings." )
[21:36:56] * ski . o O ( "BOOLE is the crowning jewel perched precariously upon the perfect peak of programmer prowess, casting its limitless limpid light over the lands of those who scuff and wallow in the dreary dust of digital depravity and unbounded wilful ignorance of the testament of Our Lord God as channeled through the X3J13 committee." )
[21:37:09] <ski> (i dunno the origins of those gems)
[21:37:49] <ASau> OTOH, I seem to remember programming language where only the first letter in any identifier counted.
[21:37:53] <ski> (iirc, they're things that minion could say, anyway)
[21:38:13] <gwatt> ASau: I'd heard 30ish characters as well. also, C struct members had to be unique across all struct definitions at some point
[21:38:15] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:38:56] <ASau> THAT was really weird, especially with line numbers having unconventional dot like
[21:39:11] <ASau> 13.666 L A% = 1
[21:39:17] <gwatt> TI-Basic only allows single character identifiers. you get A-Z an theta
[21:39:36] <ASau> Sure, but that's pocket microcalculator.
[21:39:54] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:39:55] <ASau> You can recall a lot of those without any identifiers allowed.
[21:40:20] <ASau> (I mean only programmable models here.)
[21:42:28] <ASau> (MK-61...)
[21:44:22] <jrincayc> (Compared to languages like FOCAL, BASIC was an improvement.)
[21:46:11] <ASau> I have impression that FOCAL was an attempt to squeeze anything in a little bit smaller amount of memory.
[21:49:08] <ASau> There are many extinct lines of such developments, IIRC. Some are just weird (TECO), some are even weirder.
[21:49:33] <jrincayc> ASau: I agree.  (Tho' for the record, I am seriously impressed at how nice of a language Snek is despite being designed for 32K rom, 2K ram)
[21:50:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[21:54:48] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:55:53] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[21:56:18] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:00:50] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[22:01:04] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[22:01:07] *** Joins: madage (~madage@user/madage)
[22:01:12] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[22:01:14] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[22:01:39] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:01:39] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Remote host closed the connection)
[22:02:02] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:03:33] <ASau> What is really interesting is that today we know a lot more and could squeeze "something useful into smaller memory" more effectively.
[22:04:58] <ASau> So that you don't have really awful limitations like those of FOCAL or FORTH.
[22:07:00] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[22:07:46] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:08:41] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[22:09:32] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[22:09:32] *** karlosz_ is now known as karlosz
[22:12:36] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:21:18] *** Joins: badkins (~badkins@136.56.92.199)
[22:22:14] <jcowan> Extended standard Fortran and extended standard Basic are pretty much equuvalent.
[22:23:29] <jcowan> For that matter, basic Basic, Fortran II, and Focal are pretty mmuch interchangeable too.
[22:23:51] <jcowan> I actuall sketched an interpreter that lets you type in code in any language.
[22:26:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:30:49] *** Joins: epony (epony@user/epony)
[22:32:07] *** Joins: notzmv (~zmv@user/notzmv)
[22:32:17] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:33:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:35:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:38:55] *** Joins: aeth_ (~aeth@user/aeth)
[22:39:01] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:39:06] *** aeth_ is now known as aeth
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[23:07:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:09:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:13:19] <mdhughes> I still code a fair amount of BASIC in retrocomputing projects, and if you have a moderately good one with functions & named line numbers, it's not so bad at all.
[23:14:01] <mdhughes> TinyBASIC is uncomfortable, but it ran on 4K or less RAM systems, which nothing else you have ever used (except ASM) can do.
[23:15:01] <mdhughes> And TI & TRS-80 shipped with a TinyBASIC, but very soon had extended BASIC which was more capable.
[23:17:42] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[23:18:09] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[23:19:18] <mdhughes> PHP is a pretty bad language; it does nothing that can't be done better, safer, and easier in Perl. But it's so easy to just code into a file and have it run, that it survived anyway.
[23:19:26] <Zipheir> The BASICs were admirably simple languages and all of the BASIC games of the 80s show how complex programming languages aren't needed to do a lot.
[23:20:15] *** Joins: gproto23_ (~gproto23@user/gproto23)
[23:21:09] <mdhughes> Also the first REPL most of us had access to.
[23:21:35] <mdhughes> And unlike most current REPLs, your work wasn't wasted; you could just save your program.
[23:22:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[23:25:07] <ski> "named line numbers" ?
[23:26:57] <mdhughes> Well, in TurboBasicXL which I'm using, #INIT names that line, then GO# INIT does GOTO there. Or PROC FUNC ... ENDPROC, and EXEC FUNC is like a GOSUB.
[23:28:16] <ski> ok, so it's a label ?
[23:28:20] <mdhughes> It does have WHILE, REPEAT, IF ... ENDIF, but I honestly mostly use line numbers for short local loops.
[23:28:43] <ski> `FUNC' has formal parameters ?
[23:29:06] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[23:29:20] <mdhughes> Sadly no, TBXL doesn't. Atari BASIC XL does, but it uses a little more RAM, and it's harder to put on an emulated disk, so I'm currently lazy.
[23:29:33] <ski> `DEF FN' ?
[23:30:03] <mdhughes> ABXL's like PROCEDURE "func" USING A, B  and those are local, and it lets you declare more LOCAL.
[23:30:32] <mdhughes> It's not limited like MS's DEF FN, it's just a program subroutine.
[23:30:41] <ski> mhm
[23:30:54] <ski> (limited to expressions, i guess you mean)
[23:31:15] <mdhughes> Yeah, MS could only do a simple formula, and only 26 of them anyway.
[23:32:08] *** Joins: robin (~robin@user/terpri)
[23:35:16] <ski> well, on C64, you can have the same identifiers as for other variables, for them
[23:35:42] <ski> (two significant characters, first is a letter; second, if present, is a letter or a digit)
[23:36:16] <mdhughes> Somewhat spoiled by Atari BASIC (and TBXL follows it) in letting you have any length variable names. Tho they can't start with a builtin's name.
[23:37:33] <mdhughes> Even so, I mostly use 1-2 letter names, but I do that in a lot of modern languages! My Scheme let*'s are all giant stacks of short names modifying arguments, then one line of work.
[23:39:07] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[23:43:14] <mdhughes> I should write up a blog post about rewriting the same program in several levels of BASIC.
[23:43:52] <ski> the narrower the scope, the shorter the name can be
[23:44:27] <ski> (also, the more generic/abstract the thing named, the shorter the name can be)
[23:45:43] * mdhughes is off to bed
[23:48:59] <ASau> mdhughes: "nothing else" is plain wrong. It takes a little thought, yet you can cram 16-bit(!) Forth into 4K just fine.
[23:49:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:50:06] <ASau> mdhughes: if you apply some force, you can compess it into less memory or provide extensions.
[23:50:50] <ASau> mdhughes: Or implement saner syntax without all those stack handling tricks.
[23:51:06] *** Joins: epony (epony@user/epony)
[23:51:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:52:50] * ASau recalls some human obfuscators who renamed all variables into l1, l11, ll1, l111, l1l1...
[23:59:19] <Zipheir> Naming is hard.
