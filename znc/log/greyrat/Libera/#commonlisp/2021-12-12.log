[00:00:18] <rotateq> and yes, (SETF FIRST) works of course ^^ via looping you could use SETFing via NTH or ELT
[00:00:34] * _73 is searching docs for symbol-macros
[00:01:15] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 250 seconds)
[00:02:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[00:02:48] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:03:53] <rotateq> it's for condensing a form and bind that to a symbol
[00:04:28] <rotateq> or a bit like a macro that doesn't need parameters and can be called without parentheses
[00:05:11] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[00:05:39] <_73> is the problem that the element in *NUMS* is being copied to a fresh symbol, NUM, on each iteration?
[00:05:50] <rotateq> (macrolet ((foo () ...))) still needs it to be called with (foo), but when having (symbol-macrolet ((foo form)) ...) it's just foo
[00:05:51] <pjb> _death: well, the default for defstruct is always -p  giving point-p instead of pointp for (defstruct point x)     You need to write: (defstruct (point (:predicate pointp)) x)
[00:06:12] <VincentVega> _73: you are simply setting a symbol NUM to a new value, you need to setf a place in the list, like (loop for num-rest on *nums* do (incf (first num-rest) 100))
[00:06:34] <semz> map-into is another option
[00:06:39] <semz> underrated function
[00:06:56] <pjb> _73: You're not wanting to mutate the variable. The variable is irrelevant to your question, since you want to mutate the elements of the list (ie. the car cells).
[00:07:15] <_73> ok I understand now thanks
[00:07:15] <VincentVega> semz: hmm cool
[00:07:36] <pjb> _73: the only pre-condition to be able to mutate the car slot of the cons cells, is that the cons cell be not a literal (immutable) cell.
[00:08:43] <pjb> _73: (defparameter *foo* (list 1 2 3))   (mapl (lambda (cell) (incf (car cell) 100)) *foo*)  *foo* #| --> (101 102 103) |#
[00:09:29] <pjb> If you wrote (defparameter *foo* '(1 2 3)) or (let ((n 2)) (defparameter *foo* `(1 ,n 3))) this would break.
[00:10:28] *** Joins: Alfr (~Alfr@user/alfr)
[00:11:42] <rotateq> gilberth told me about a special rule for symbol-macros some months ago, that you even can use SETQ on them, which is consistent imo, so that you don't have to remember what's a place and what's not
[00:15:07] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 250 seconds)
[00:15:26] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:25:18] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[00:31:42] <_73> (map-into *nums* (alexandria:curry #'+ 100) *nums*)
[00:31:59] <_73> I like this solution
[00:32:15] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[00:41:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:41:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:41:36] <Guest74> mfiano: is this a freebsd only project? What's the interest in freebsd?
[00:41:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[00:44:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:48:31] *** Joins: dra (~dra@2a04:4540:641e:c500:f8a1:ec29:eb09:fcef)
[00:52:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:59:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:59:34] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[00:59:39] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[01:00:18] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[01:02:59] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[01:09:42] *** Quits: dra (~dra@2a04:4540:641e:c500:f8a1:ec29:eb09:fcef) (Remote host closed the connection)
[01:11:56] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[01:12:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:16:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:17:02] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:20:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:24:51] *** Quits: hobo (~hobo@204.128.242.10) (Quit: ZNC 1.8.2 - https://znc.in)
[01:24:52] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[01:26:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[01:29:05] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[01:31:22] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:d581:5e3c:2d3e:a86c)
[01:32:01] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10b1:fbca:cd36:16e:d144:2002)
[01:35:49] *** Joins: dra (~dra@2a04:4540:641e:c500:5db0:ca6a:674:5d8b)
[01:35:58] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:d581:5e3c:2d3e:a86c) (Ping timeout: 260 seconds)
[01:51:04] *** Quits: pve (~pve@178-55-91-23.bb.dnainternet.fi) (Quit: leaving)
[01:52:57] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 252 seconds)
[01:59:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:00:33] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:04:35] *** Quits: dra (~dra@2a04:4540:641e:c500:5db0:ca6a:674:5d8b) (Quit: Leaving)
[02:04:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[02:04:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:06:02] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[02:08:45] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:12:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[02:17:49] <phoe> Online Lisp Meeting #12 announced, https://www.reddit.com/r/lisp/comments/reahby/
[02:18:18] <phoe> a mail announcement will be sent out tomorrow, minor issues with mailing list server today
[02:18:55] <rotateq> i have no twitch account, but will try to be there passively
[02:19:05] <phoe> no twitch account required
[02:19:27] <phoe> maybe we should be able to set up an IRC bridge again, so commenting can happen on IRC
[02:19:44] <phoe> Duuqnd: do you feel like lending a hand yet another time?
[02:20:26] *** Joins: opalvaults2 (~user@75-172-37-173.tukw.qwest.net)
[02:20:41] *** Quits: cosimone (~user@93-47-231-91.ip115.fastwebnet.it) (Ping timeout: 268 seconds)
[02:32:23] <opalvaults2> Can common lisp do full stack web development? I'd like to create a web application completely in lisp (frontend,db,backend). Someone in #scheme mentioned parascript. Anyone have any experience with this sort of thing?
[02:32:36] <phoe> s/parascript/parenscript/
[02:34:00] <pjb> opalvaults2: it can.
[02:34:09] <ecraven> opalvaults2: there's also weblocks (https://common-lisp.net/project/cl-weblocks/), not sure how dead that is :-/
[02:35:00] <Guest74> ecraven: is the revival dead?
[02:35:16] <ecraven> I have no idea.. I wanted to use it 10 years ago or so, but never managed to fully understand it
[02:35:23] <ecraven> it just seemed like it had some really nice ideas
[02:36:14] <opalvaults2> phoe: thank you for the correction
[02:36:46] <ecraven> seems to be dormant too :-/ https://40ants.com/weblocks/changelog.html
[02:36:56] <opalvaults2> I figure Common Lisp is likely the best candidate for this time of development?
[02:37:06] <opalvaults2> Are there other lisps/scheme that would work better for this purpose?
[02:37:06] <Guest74> i think the revival might have scrapped a bunch of the interesting stuff.
[02:37:23] <opalvaults2> s/time/type
[02:40:11] <ecraven> opalvaults2: noone but you can answer that question. give the candidates that were mentioned a try, with some toy project, to find out which fits you best
[02:40:36] <opalvaults2> ecraven: good point. will do :)
[02:40:53] *** random-nick_ is now known as random-nick
[02:40:59] <random-nick> there's also jscl https://github.com/jscl-project/jscl/
[02:41:51] <random-nick> parenscript is more like an alternative syntax for writing javascript, while jscl is a (partial) implementation of common lisp as a javascript library
[02:42:29] <Guest74> opalvaults2: https://www.cliki.net/web%20framework
[02:42:46] <opalvaults2> oh wow random-nick this looks promising as well, thank you
[02:42:47] <random-nick> common lisp also has more traditional web libraries and frameworks, see fukamachi's work
[02:43:11] <opalvaults2> Thank you Guest74 as well
[02:45:06] <Duuqnd> phoe: Sorry I didn't see your message before
[02:45:41] <Duuqnd> I'm not sure that the bot will work with libera.chat right away since last time I tried I had some trouble
[02:45:47] <phoe> Duuqnd: no problem
[02:45:54] <Duuqnd> I could give you the source code though if you want it
[02:46:08] <phoe> sure! I'll take a look and try to run it
[02:48:08] <phoe> but, tomorrow
[02:48:11] <phoe> good night for now
[02:48:20] <opalvaults2> I found this article for those interested in web devel in Common Lisp. https://dev.to/rajasegar/lisp-for-the-web-5-13ca
[02:48:55] <opalvaults2> Seems like Fukamachi's caveman2 is a good option. Gonna hack for a bit. Thanks for the suggestions all!
[02:51:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:54:37] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 268 seconds)
[02:55:00] <phantomics> opalvaults2: I use a library called Panic to generate React components using Parenscript for full-stack development
[02:55:35] <phantomics> Here's the repo: https://github.com/michaeljforster-zz/panic
[02:55:57] <phantomics> It hasn't been updated in a long time but I've made some of my own changes to it, may publish at some point
[02:57:28] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[02:57:35] <rotateq> ohai phantomics good to read you (don't want to interrupt)
[03:07:25] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[03:07:32] <phantomics> hey rotateq, how've you been? I'm getting back into writing an integration for laser control
[03:07:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:07:46] <opalvaults2> thank you phantomics! i will take a look :)
[03:08:05] <rotateq> I'm good, hope you too.
[03:08:14] <rotateq> oha laser control o_O
[03:10:40] <phantomics> yes, for ILDA lasers that use rotating mirrors to aim the beam, it would be a natural application for APL since it's all about a series of points, similar to vector graphics
[03:11:25] <rotateq> yes i thought so it has to do with it, like your big display
[03:12:12] <mfiano> Guest74: Because I have an interest in it.
[03:14:28] *** Quits: gaqwas (~john@dynamic-095-118-141-032.95.118.pool.telefonica.de) (Ping timeout: 256 seconds)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:20:29] <phantomics> opalvaults2: what kind of web project are you thinking about?
[03:20:58] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10b1:fbca:cd36:16e:d144:2002) (Ping timeout: 260 seconds)
[03:43:13] *** Joins: ahc (~ahc@121.98.229.241)
[03:58:28] *** Joins: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[04:00:22] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[04:00:44] *** Joins: _73`` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[04:01:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:03:03] *** Quits: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 268 seconds)
[04:05:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:05:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[04:05:51] <opalvaults2> phantomics: sorry for the delayed response. I just want a simple web interface to interact with a server-side ticketing system + sqlite DB
[04:06:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[04:11:50] <phantomics> That should be an easy project, React could work or you could just write a simple HTML form posting to a CL server
[04:12:14] <opalvaults2> I'm a bit stuck between Racket and Common Lisp. I'd like to stop spinning my wheels and just make it in Common Lisp because it's got a better REPL.
[04:12:39] <_death> opalvaults2: check out https://github.com/rabbibotton/clog
[04:12:52] <rotateq> not just the REPL :)
[04:13:22] <rotateq> but Racket and all the libs and subdialects are great
[04:13:50] <Guest74> thoughts on font:glyph (char font) or font:glyph (font char) ?
[04:13:55] <opalvaults2> _death: this looks really interesting! thank you, i'll research a bit
[04:14:28] <opalvaults2> rotateq: i'm having trouble grokking the web server lib surprisingly.
[04:14:46] <opalvaults2> racket web server lib*
[04:14:51] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10b1:fbca:cd36:16e:d144:2002)
[04:14:59] <rotateq> hmm, i can't help you, this is absolutely not my topic
[04:15:24] <opalvaults2> it's okay, I think I am going to do it in common lisp. caveman2 has been an actual breeze to set up and get working.
[04:15:47] *** Joins: Algernon91 (~Algernon6@80.215.13.108)
[04:15:48] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10b1:fbca:cd36:16e:d144:2002) (Read error: Connection reset by peer)
[04:16:02] <opalvaults2> I'll see if I can make clog work as well, because that's an excellent resource.
[04:16:19] <rotateq> but maybe in the future when i need to I'll use clsql plus cl for the backend and elm for the frontend. or i don't know, we'll see
[04:16:37] <opalvaults2> is elm another lisp?
[04:16:40] <rotateq> okay let me see what clog is for ... (or logging?)
[04:17:03] <rotateq> no, it's an alternative to javascript for having runtime save code
[04:17:51] <rotateq> ahh it's for GUIs
[04:20:02] *** Quits: Algernon91 (~Algernon6@80.215.13.108) (Ping timeout: 240 seconds)
[04:20:03] <rotateq> or I build another backend with Erlang or Haskell, when concurrency is needed. or or or, many sane possibilities, even using ZeroMQ for distributed applications that shall scale
[04:20:41] <hayley> opalvaults2: Elm is Haskell without the type classes, and a BDFL who takes the dictator part too seriously.
[04:21:05] <hayley> rotateq: I don't see why, as you can write concurrent programs with (common extensions to) Common Lisp.
[04:21:11] <rotateq> or doing it like NASA and embedding a CL REPL everywhere for more debugging capabilities from 100 million miles away
[04:21:26] <rotateq> i know that hayley ;)
[04:21:27] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:21:46] <rotateq> yes of course
[04:21:58] <hayley> "Is Common Lisp webscale?"
[04:22:38] <rotateq> don't know, is the web lispscale?
[04:22:47] <dbotton> <opalvaults2> see the clog db demo 4 and the database tool that uses sql
[04:23:15] <opalvaults2> hayley: sounds like something I want to avoid.
[04:23:25] <opalvaults2> dbotton: I was actually just recommended that in #scheme actually. thanks! :)
[04:23:34] <opalvaults2> oh wait that was here
[04:23:38] <opalvaults2> too many rooms open
[04:23:44] <rotateq> haha ^^
[04:24:01] <hayley> Given that the Web is not a distributed version of Symbolics Concordia, all signs point to "no".
[04:24:39] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c03:feaf:f4fc:a85) (Ping timeout: 268 seconds)
[04:24:45] <rotateq> and too much is still centralized structured
[04:25:00] <hayley> Yeah, well, I retired.
[04:25:28] <dbotton> <opalvaults2> I am working on a gui builder currently still believe I'll have something working by Jan 1
[04:26:08] <dbotton> the ability to design and drop controls working, working on basic code gen now
[04:26:35] <opalvaults2> sounds great! my e-mail is ry@opal.sh. i'd be happy to hack around on it.
[04:26:48] <dbotton> everything is on github
[04:27:05] <opalvaults2> pm me a link if you'd like :)
[04:27:10] <rotateq> opalvaults2: if you're interested, the thing i mentioned indirectly has an interesting talk: https://www.youtube.com/watch?v=_gZK0tW8EhQ
[04:27:27] <dbotton> https://github.com/rabbibotton/clog
[04:28:08] <opalvaults2> oh wait clog, yes.
[04:28:17] <opalvaults2> i'm definitely going to be hacking around on that if I get the time
[04:28:28] <opalvaults2> rotateq: i'll put that on a bit later, thank you :)
[04:28:54] <dbotton> taking my another month after but plan is a delphi like environment mixed of course with emacs and the repl
[04:29:06] <rotateq> yes it's just a given possibility for any time, until youtube will vanish or removes it
[04:30:31] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[04:31:30] *** Joins: s-liao (~s-liao@101.86.96.154)
[04:32:11] *** Quits: VincentVega (~user@212.97.4.44) (Remote host closed the connection)
[04:34:36] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[04:46:42] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[04:53:27] <unixlisp> What situation common lisp variable binding is the same as c?
[04:54:09] <hayley> When you do (define-symbol-macro foo (write-line "Segmentation fault, core dumped"))
[04:54:43] <hayley> I am pretty sure both are lexically scoped by default, though.
[04:55:20] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:58:40] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[04:59:13] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 252 seconds)
[04:59:24] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:01:04] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:01:26] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:03:07] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:03:33] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:05:13] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:05:35] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:05:41] <unixlisp> (defparameter *a* 0) (defparameter *l* (cons *a* nil) )
[05:07:21] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:07:53] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:09:33] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:09:55] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:11:36] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:12:00] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:12:10] <unixlisp> (defparamerer *m* (cons *a* nil)) (setf (car *l*) 1)  -> (car *m*) ?
[05:13:50] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:14:12] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:15:53] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:16:16] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:18:15] <unixlisp> parameter. What is the exact result?
[05:19:19] <White_Flame> (cons *a* nil) evaluates the value of *a* when the DEFPARAMETER is evaluated, and you're never changing the cons cell at *M* after defparameter
[05:20:10] <White_Flame> you're only ever changing the cons cell referenced by *L*
[05:22:00] *** Joins: _73``` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[05:22:29] <unixlisp> Acording spec, is that exact result?
[05:22:40] <White_Flame> what do you think it is?
[05:23:01] <unixlisp> not sure.
[05:23:11] <White_Flame> well, this is basically (and I haven't done C in like a decade or two):
[05:23:32] <White_Flame> int a = 0; //toplevel/static/global/whatever
[05:23:47] *** Quits: _73`` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[05:23:55] <White_Flame> l = new Cons(a,NULL);
[05:23:58] <White_Flame> m = new Cons(a,NULL);
[05:24:09] <White_Flame> l.car = 1;
[05:24:41] <White_Flame> (and yeah, I know that "new" is C++, sue me ;) )
[05:26:22] <White_Flame> CL's *A* is different than C's int a in that the former can have dynamically scoped, thread-local bindings of the globally-named value *A*
[05:26:27] <White_Flame> (primarily)
[05:27:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:28:51] <White_Flame> also, #clschool is a great place to ask introductory questions, they might get lost here
[05:29:05] <unixlisp> spec absolutely define this behavior? such as a highly optimised situation?
[05:29:18] <White_Flame> yes
[05:29:46] <White_Flame> now, also DEFPARAMETER is not a declarative statement as a toplevel "int a" is to the compiler.  DEFPARAMETER changes the runtime to now have *A* declared & allocated properly
[05:30:04] <White_Flame> C can't do any runtime compilation natively
[05:30:48] <White_Flame> so there can be load ordering & initialization effects, but that's beneficial in that you get the entire Common Lisp language at compile-time, too, to generate code or precalculate anything you want
[05:33:12] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:33:35] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:34:33] *** Quits: AndrewYu (~andrew@user/andrewyu) (Remote host closed the connection)
[05:36:00] <unixlisp> I just not see the specifation at spec. not sure all possible situations.
[05:36:08] *** Joins: Oladon (~olad@98.43.81.226)
[05:37:48] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:38:11] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:40:06] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:40:29] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:42:10] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:42:36] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:44:17] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[05:44:39] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[05:45:14] *** Parts: unixlisp (~unixlisp@111.37.115.35) ()
[05:45:58] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[05:48:16] <hayley> clhs defparameter
[05:48:17] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm
[05:48:35] <hayley> "defparameter and defvar establish name as a dynamic variable."
[05:51:39] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:53:37] <unixlisp> Then (let* ((a 0) (b (cons a nil)) (c (cons a nil))) (setf (car b) 1) (car c)) ?
[05:55:26] <White_Flame> exact same effect
[05:55:26] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[05:56:02] <White_Flame> when you evaluate A, that returns the value that A holds
[05:56:11] <White_Flame> and you have 2 different cons cells
[05:56:17] <White_Flame> none of which share anything
[05:56:48] <White_Flame> so (cons a nil) has the effect of (cons 0 nil)
[05:57:00] <White_Flame> this part is no different than C
[05:59:06] <unixlisp> (declare (optimize (speed 3) (safety 0))) sure all possible conforming implementations?
[06:07:08] <White_Flame> yes, this is what evaluation of a variable means
[06:07:11] <White_Flame> not sure what else you're expecting
[06:07:29] <White_Flame> (also, safety 0 reduces guarantees)
[06:10:22] <unixlisp> There seems no *exact* specification in spec about this behavior.
[06:11:04] <White_Flame> the spec is very compartmentalized, and multiple section combine into the various behaviors
[06:11:22] <White_Flame> also, it's tied to the notion of the "environment" where the variable names are found
[06:12:05] <White_Flame> probably the most applicable: http://www.lispworks.com/documentation/HyperSpec/Body/03_abaa.htm
[06:12:19] <White_Flame> (this is from the "Evaluation and Compilation" chapter)
[06:12:56] <hayley> clhs 3.1.1
[06:12:56] <specbot> Introduction to Environments: http://www.lispworks.com/reference/HyperSpec/Body/03_aa.htm
[06:22:42] <unixlisp> Binding is abstract, high level, the best terminology that describes variable in CL. Yet I am not sure it is not same as C at some situations, still standard conforming.
[06:23:32] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[06:24:57] <White_Flame> which C situations in particular?
[06:25:47] <rotateq> aren't the details of such things more a question of the implementation rather than the specification?
[06:26:16] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[06:26:25] <White_Flame> depends on how specific it is, so far the questions are only about "is it different" which could have a million different answers
[06:28:44] <rotateq> yes then first talking about the specification of the question ^^
[06:33:27] <unixlisp> Really? I really care about this detail, it is a *big* feature of LISP.
[06:35:05] <hayley> Yes, the semantics of Lisp are described in terms of a high level, abstract "evaluation" machine. To the best of my knowledge, the semantics of C are described in a similar way.
[06:37:42] <White_Flame> right, C goes through great lengths to avoid the actual memory layout of what it's doing, and any code that relies on it is technically undefined behavior
[06:38:18] <White_Flame> much of it is defining clear pointer math operations, though it's still separate from memory layout technically
[06:39:49] <unixlisp> Then this is an undefined behavior in CL? Maybe I need to read spec word by word.
[06:40:31] <hayley> The nature of how binding is implemented is irrelevant for a language standard.
[06:41:48] <hayley> The other part of your example is object identity.
[06:41:49] <hayley> clhs cons
[06:41:50] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_cons.htm
[06:43:04] <hayley> As per the standard, CONS creates a "fresh" cons cell, which never appears as the result of another call to CONS. So we know that the result of (CAR C) is unaffected by (SETF (CAR B) 1).
[06:43:29] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:45:35] <White_Flame> unixlisp: no, all you're doing is evaluating a variable to get its value, there's nothing weird at all.  The only learning curve here would be dynamic bindings, which you're not using
[06:46:10] <White_Flame> what aspect do you think is suspect in being UB?
[06:50:12] <unixlisp> variable can *own* value like c.
[06:51:27] <unixlisp> (declare (optimize (speed 3) (safety 0))) (let* ((a 0) (b (cons a 2)) (c (cons a 3))) (setf (car b) 1) (car c)) => ?
[06:56:06] <White_Flame> safety 0 could eliminate tests to see if B and C are actually cons cells
[06:56:12] <White_Flame> when accessing the CAR
[06:56:52] <White_Flame> but variables do not "own" values, nor in C.  If "int a=1; int b=a;", then both are independently 1.  Changing one doesn't change the other, nor can you change the value of "1" in C
[06:57:13] <White_Flame> (as you can do in some other languages)
[06:57:17] <White_Flame> ((to your own peril))
[07:02:49] <unixlisp> (car c) *must* be 0? *sure* is this behavior?
[07:02:57] <hayley> Yes.
[07:03:24] <hayley> Disabling safety checks doesn't change the semantics of programs which don't trip those safety checks.
[07:04:33] <White_Flame> unixlisp: yes.  what manner of execution do you think it wouldn't be 0?  obviously you're suspecting something, but I'm not sure what it is you suspect
[07:04:47] <White_Flame> especially since there's zero difference between CL and C in these simple conditinos
[07:04:51] <White_Flame> *conditions
[07:06:51] <unixlisp> yes. I suspect it *can* be 1 and standard conforming.
[07:09:32] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[07:09:40] <edgar-rft> unixlisp: only this code does what you suspect: (let* ((a 0) (b (cons a 2)) (c b)) (setf (car b) 1) (car c)) => 1, because c is now a pointer to b
[07:10:25] <White_Flame> and the value at b is a composite that is referenced
[07:10:35] <White_Flame> but this was about changing a number, or a variable holding a simple number
[07:14:07] *** Quits: opalvaults2 (~user@75-172-37-173.tukw.qwest.net) (Remote host closed the connection)
[07:16:03] <White_Flame> unixlisp: also note that large numbers can be referenced instead of immediate as well, but that doesn't change the semantics, since number values themselves are immutable
[07:18:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[07:21:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:22:25] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:23:26] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:28:34] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:30:11] <beach> Good morning everyone!
[07:30:55] <unixlisp> number value are immutable, spec can guarantee it?
[07:31:36] <beach> unixlisp: There is no defined operation that will modify a number.
[07:32:26] <beach> unixlisp: What is the purpose of this exercise?
[07:40:39] <unixlisp> clear every point about spec. first of all is binding.
[07:41:05] <beach> Do you mean "clear" as in making sure you understand it?
[07:41:54] <unixlisp> yes
[07:42:05] <beach> Got it.
[07:44:22] <unixlisp> Recently I am reading mail archive (cddddr.org) and it is helpful.
[07:45:59] <beach> Common Lisp semantics is typically much simpler that that of languages with manual memory management, because Common Lisp uses what I call "uniform reference semantics", so that there is no need to distinguish between an object and a pointer to an object.
[07:47:52] <unixlisp> (let* ((a 0) (b (cons a 2)) (c (cons a 3))) (setf (car b) 1) (car c)) => ? all possible conforming implementations.
[07:48:48] <hayley> 0. Again.
[07:49:02] <beach> Indeed.
[07:49:26] <unixlisp> standard defined behavior?
[07:49:31] <beach> Yes.
[07:50:13] <hayley> SETF on a variable name replaces the object in the appropriate binding. It does not modify the object.
[07:50:40] <beach> hayley: But here the place is (CAR B).
[07:51:18] <hayley> SETF on a place like (CAR something) does modify an object, but in this case, it modifies a different object.
[07:51:19] <beach> unixlisp: B and C will contain distinct CONS cells, so setting the CAR of B does not have any effect on the contents of the CONS cell that is the value of C.
[07:52:13] <beach> unixlisp: What kind of semantic model would give a different result?  I can't even imagine such a thing.
[07:54:27] <unixlisp> setf modify object but conform standard
[07:55:51] <beach> The object is indeed modified.  The CAR slot of the CONS cell that is the value of B will initially contain 0, and then after the SETF form has been evaluated, it will instead contain 1.
[07:56:20] <White_Flame> beach: there are languages where you can change the value of the canonical integers
[07:56:44] <White_Flame> but that would be something like (setf 0 1) to redefine the notion of 0, not (setf a 1)
[07:57:25] <White_Flame> unixlisp: setf of a variable modifies the value in the binding
[07:57:35] <White_Flame> it doesn't mutate any value itself
[07:57:58] <beach> White_Flame: The only such "language" I know was an early implementation of Fortran where all functions were called by reference, so that passing a literal to a function created a cell in which the literal was stored, and it could be modified inside the function.
[07:59:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[07:59:27] <White_Flame> unixlisp: or to be more clear, it replaces which value the binding is holding
[07:59:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:00:06] <beach> White_Flame: But in this example, it is not the variable binding that is modified.  It is the place (CAR B).
[08:00:34] <White_Flame> oh wait, right :)
[08:00:58] <White_Flame> the first half of this discussion was all about the reading of A
[08:01:53] <beach> So rather "SETF of a place replaces the object contained in that place.  It does not modify the object previously contained in that place".
[08:02:08] <White_Flame> unixlisp: did my pseudotranslation into C help you understand it at all?
[08:02:28] <White_Flame> beach: yes, much clearer
[08:02:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:06:01] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:13:27] <unixlisp> White_Frame: binding is the best terminology about variable. But I want to know the exact behavior spec specifies. every detail.
[08:14:40] <beach> unixlisp: Is it that you are planning to use Common Lisp, but only if the standard is clear about the semantics?
[08:15:14] <beach> unixlisp: I am asking because this desire of yours to know "every detail" is very unusual.
[08:19:06] *** Joins: semz (~none@user/semz)
[08:19:36] <unixlisp> Because I believe Common Lisp is the best programming langauge, the best Lisp dialect at present.
[08:21:26] <beach> So you want to make sure that you are right in your belief?  Are you trying to convince other people of this belief as well?
[08:28:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:30:15] <unixlisp> Surely I will if I have a chance. But there are many things about CL spec I do not exacly know.
[08:31:01] <unixlisp> exactly.
[08:31:25] <beach> Of course.  It may take many years to know every detail of the standard.  But it would be very unusual to avoid using the language until all those details are understood.
[08:32:25] *** Joins: yewscion (~yewscion@2604:ca00:14a:1df9::660:b7a0)
[08:32:32] <rotateq> you can also learn much by trying things out :)
[08:34:49] <unixlisp> Acturally I use it frequently. I use Lem rather than Gnu Emacs + Slime.
[08:36:22] <unixlisp> because it is written by Common Lisp. Hemlock, Climacs do not work sadly.
[08:37:07] <beach> We are working on Second Climacs, but progress is slow.
[08:38:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[08:38:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[08:39:22] <unixlisp> I know. Second Climacs uses clim3.
[08:39:50] <beach> No, CLIM3 has been abandoned.
[08:40:05] <beach> McCLIM is now so good that there is no need for it.
[08:43:20] <rotateq> Do we maybe get a great book about McCLIM some day as an additional resource? :) Or for FreeCLIM ...
[08:43:54] <beach> rotateq: The manual is being worked on, but perhaps too slowly for your taste.
[08:44:25] <beach> The issue, as usual, is available people-power.
[08:44:48] <unixlisp> The most important app of McCLIM is the Listener, now it is bare bone, Second Climacs should integrate with it.
[08:45:20] <rotateq> Yes already great resources where much effort flowed in are there, just about me that I'm so slow learning it and understanding the concepts/capabilities. ^^
[08:46:33] <beach> unixlisp: The plan is rather to create components of an IDE of which Second Climacs, the listener, the backtrace inspector, Clouseau, a real debugger, etc. will be some of those components.
[08:47:01] <rotateq> I would also like to help non-trivial in projects like SICL, but I'm with most things still lightyears away.
[08:47:11] <rotateq> s/away/behind
[08:47:42] <unixlisp> Inspector is good now. but editor is not , the most important.
[08:47:50] <beach> rotateq: Sure, some projects require detailed knowledge of specific domains.
[08:48:02] <beach> unixlisp: I am fully aware of that.
[08:50:34] <unixlisp> You can not just use Gnu Emacs, use Common Lisp Emacs, many (if not most) common lisp hackers do not care about it.
[08:53:27] <beach> unixlisp: Most Common Lisp programmers don't seem to care much about the shortcomings of the development tools.  The plan for Second Climacs is to make it irresistible for Common Lisp programming by having it analyze the Common Lisp source code with much better precision and in much more detail than any other editor is capable of.
[08:56:51] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[09:02:16] <unixlisp> Just like GNU HURD, that is the most important Gnu project. Lem is very easy to extend. Second Climacs is like Gnu Emacs + Slime more than Hemlock?
[09:04:35] <beach> Hard to say.  The idea is to use Eclector as an incremental Common Lisp reader to parse the buffer contents.  This way, it will be more precise than any other technique that I can think of.  We have a paper published on that technique.  But the plan is then to go further, and use the first stages of a compiler for further analysis of the buffer contents.
[09:05:32] <beach> This way, we can do things like get the role of each symbol, as opposed to treating all symbols the same, based only on the package.
[09:05:43] <hayley> GNU Hurd is so important that the last release was released five years ago, and the Free Software Foundation pretty much only recommends GNU/Linux-libre systems.
[09:06:49] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[09:07:34] <rotateq> Do you have the link to that paper or do I find it via the repo?
[09:09:16] <unixlisp> Short sight GNU. GUILE should be GCL or some CL implementation.
[09:12:44] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:17:37] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[09:17:55] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[09:23:26] <beach> rotateq: The incremental parsing paper?
[09:23:54] <beach> http://metamodular.com/incremental-parsing.pdf
[09:24:53] <rotateq> Thank you again as always.
[09:25:05] <beach> Pleasure.
[09:26:05] <unixlisp> beach: How do you think about Mezzano. I think it as a breakthrough.
[09:26:54] <beach> I think it is a great project.  But I want to go further, with first-class global environments and such.
[09:27:21] <White_Flame> yep, all of these can certainly build on each other, because of CL as the common basis
[09:27:27] <White_Flame> mezzano on the low level, etc
[09:29:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:30:01] <hayley> SICL already uses the stream implementation from Mezzano.
[09:32:18] <unixlisp> I think SICL will fininsh about one or two years. But I worry about the performance of SICL because CLOS compared with SBCL.
[09:32:41] <unixlisp> because of
[09:32:58] <White_Flame> a big thing in sicl is improving clos dispatch performance
[09:33:06] <hayley> beach thought a working image was a year away a year ago, but he's come up with a fair few optimisations which would make CLOS faster.
[09:34:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:34:02] <White_Flame> so yeah, I'd expect clos sicl to be faster than clos sbcl, if/until the latter adopts the optimizations of the former
[09:34:04] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[09:34:32] <unixlisp> How about number crunching? SBCL is the best.
[09:34:55] <beach> unixlisp: But have you read the papers on fast generic dispatch and call-site optimization?  I am convinced those techniques are going to make a big difference, especially call-site optimization.
[09:35:29] <hayley> SICL doesn't have any optimisations for number crunching yet, since we are more focused on getting a working image first, rather than a fast image. But there is room for improvement.
[09:36:54] <unixlisp> consider bigfloat? only CLISP have it.
[09:37:00] <hayley> Most C compilers are capable of some auto-vectorisation, and can at least handle the obvious cases, such as parallel sums. No one is working on it for SICL, but I've kept the idea at the back of my head.
[09:37:50] <rotateq> unixlisp: you mean like this "Decimal" type in other langs? with 128-bit
[09:38:00] <hayley> Could do. All the arithmetic functions in SICL bottom out at generic functions, so introducing big floats probably isn't too hard.
[09:39:00] <hayley> Well, it's not entirely true that no one is focusing on optimisation; I'm working on global value numbering at the moment, and GVN can handle common subexpression elimination if configured correctly.
[09:39:14] <beach> rotateq: CLISP has a LONG-FLOAT type with a precision that can be parameterized.
[09:39:21] <unixlisp> rotateq: no. arbitrary-precision float.
[09:39:56] <rotateq> okay much nicer then, like in the package computable-reals, I like it
[09:40:22] * hayley waits at "Satiating all generic functions in E5..." for the fifth time today.
[09:42:44] <unixlisp> complete number tower without bigfloat? Email archive show Fateman even did not want the ratio.
[09:43:50] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b028:d7c:3529:5a79:7d7e:7bdd)
[09:45:24] <beach> unixlisp: You never answered my questions regarding whether you had seen those papers.
[09:47:42] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[09:51:39] <unixlisp> beach: sorry, I know these papers exist, but have not read. I should read it. But CLOS is slow by essence, are there magic?
[09:52:14] <hayley> What essence? Does the standard say "a generic function must be at least 5 times as slow as a standard function"?
[09:52:53] <loke[m]> unixlisp:
[09:52:54] <beach> unixlisp: I don't know where you got that idea.
[09:53:20] <rotateq> CLOS choosing four out of power, elegance, efficiency and usefulness.
[09:53:46] <unixlisp> no. thumb rule :)
[09:54:18] * hayley scratches head
[09:54:24] <beach> unixlisp: I think this idea is based on assumptions that just aren't true.
[09:54:41] <rotateq> must be short thumbs then
[09:56:56] <beach> unixlisp: On the other hand, in a typical Common Lisp implementation, parsing keyword arguments can be very expensive, making a call to a function with keyword parameters not very fast.  The paper on call-site optimization shows how this cost can be largely eliminated.
[09:58:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:59:01] <beach> It is sad to see how Common Lisp programmers might avoid generic functions because of the technique (usually based on PCL from a few decades ago) for generic dispatch of the Common Lisp implementation they currently use.
[10:03:35] <unixlisp> PCL of SBCL is slow compared with CLOS of LISPWORKS
[10:06:00] <beach> Good to know.
[10:07:46] <unixlisp> not every item about clos of cl-benchmark
[10:11:25] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:15:27] *** Joins: igemnace (~ian@user/igemnace)
[10:18:48] <unixlisp> keyword parameters are absolutely necessary about high lever interface, whether ordinary function or generic function.
[10:24:44] <unixlisp> offset the cost of parsing keyword arguments seems not be good point.
[10:24:57] <Lycurgus> http://zeniv.linux.org.uk/~ober/clb/ though old, still ... .
[10:26:37] <Lycurgus> CLOS/methodcalls in particular
[10:33:15] *** Quits: yewscion (~yewscion@2604:ca00:14a:1df9::660:b7a0) (Ping timeout: 252 seconds)
[10:45:22] *** Joins: asarch (~asarch@2806:10ae:7:7254:51e3:bbf7:8947:370e)
[10:47:25] *** Joins: treflip (~user@95.79.32.99)
[10:48:00] <unixlisp> CLOS/instantiate SBCL is the best now.
[10:48:10] *** Joins: s-liao (~s-liao@101.86.96.154)
[10:49:11] <unixlisp> CLOS/simple-instantiate so is.
[10:49:57] <Lycurgus> there's a current comparison?
[10:50:33] <unixlisp> do it youself, very simple.
[10:50:41] <Lycurgus> ah
[10:51:38] <Lycurgus> yeah I assume the old was qualitatively current, the changes you mention are consistent with that
[10:52:03] <Lycurgus> also pcl in the currentish sources looks sorta unchanged
[10:52:17] <Lycurgus> 2.1.something
[10:52:34] <Lycurgus> (i.e for sbcl)
[10:53:12] <Lycurgus> *assummed
[10:55:09] <beach> unixlisp: My point is that, just as some people might avoid generic functions because the way generic dispatch is implemented in the system they use, some people might avoid keyword arguments for similar reasons.  But in fact, the way most systems handle generic dispatch and keyword arguments is not optimal and can be improved upon a lot.
[10:55:29] <beach> unixlisp: But I think I have now said everything I want, so I'll be quiet.
[10:59:57] <unixlisp> better there is a good benchmark
[11:01:50] <unixlisp> Lycurgus: lispworks personal edition 7.1.2 really is impressive about number computation.
[11:02:10] <Lycurgus> yes I know using it now
[11:02:31] <Lycurgus> (looking for heap limit)
[11:03:40] <Lycurgus> looks like 1GB
[11:05:27] <unixlisp> incredible, lispworks is close to sbcl at some number test.
[11:21:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:21:42] <Lycurgus> nope, apparently 100MB unless it expands when you reach that
[11:22:39] *** Joins: rain3 (~rain3___@79.115.252.154)
[11:25:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:31:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:36:12] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10b1:fbca:fce7:8b8d:c86:c2cb)
[11:36:17] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[11:40:32] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 240 seconds)
[11:46:36] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:48:38] *** Quits: asarch (~asarch@2806:10ae:7:7254:51e3:bbf7:8947:370e) (Quit: Leaving)
[11:51:01] *** Joins: pve (~pve@37-136-164-136.rev.dnainternet.fi)
[12:06:23] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[12:11:33] <unixlisp> Anyone uses GARNET? It is lispy, playful, fast, though many bugs exits unavoidably.
[12:11:54] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[12:12:12] <unixlisp> exist
[12:18:22] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[12:21:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:25:24] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[12:26:39] <unixlisp> Garnet stands for Generating an Amalgam of Real-time, Novel Editors and Toolkits. Really a great lisp GUI toolkit.
[12:27:52] <jackdaniel> unixlisp: I think that Earl Ducaine took the maintainership of then-bitrotten codebase
[12:28:09] <jackdaniel> but I haven't heard much about it later
[12:28:31] <jackdaniel> https://github.com/earl-ducaine/cl-garnet
[12:29:06] <lisp123> CLIM from my limited experience is more or less functional to a good degree
[12:29:24] <lisp123> McCLIM I mean
[12:29:26] <jackdaniel> right, I was about to say that there is also McCLIM (I'm working on it among other things)
[12:30:26] <unixlisp> jackdaniel: http://garnetlisp.sourceforge.net/ is better.
[12:30:56] <jackdaniel> I see
[12:31:50] <jackdaniel> not that I contest what you say (I have no clue here) - but what makes you think that it is better?
[12:33:47] <unixlisp> last year I use https://github.com/earl-ducaine/cl-garnet, window object can not persist, sometimes dispear.
[12:38:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:38:55] <jackdaniel> I see, good for you that the other version did not have this problem, that seems like an annoying issue
[12:39:22] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[12:39:23] *** Joins: gaqwas (~john@dynamic-095-117-040-097.95.117.pool.telefonica.de)
[12:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:45:35] <unixlisp> lisp123: McCLIM is surely better than Garnet, thanks for jackdaniel and other hackers.
[12:46:59] <unixlisp> But Garnet complements McCLIM, far better than LTK.
[12:49:58] <unixlisp> It does not use CLOS, but use hashtable pervasively :)
[12:50:03] *** Joins: makomo (~makomo@user/makomo)
[12:51:26] <jackdaniel> is there something wrong with clos?
[12:52:10] <beach> jackdaniel: Oh, you missed an enlightening discussion about that.
[12:53:10] <jackdaniel> ah, I see /me skims the backlog
[12:53:45] *** Joins: rgherdt (~rgherdt@ip5f5af40f.dynamic.kabel-deutschland.de)
[12:54:31] <jackdaniel> whether generic functions are a bottleneck worth sidestepping by using something pervasively is something that would need to be proven - i.e that gf dispatch dominates the effective methods bodies (even if we assume the technique currently used in ecl which is indeed slow)
[12:55:06] <unixlisp> different OO, seems be prototype.
[12:57:01] <hayley> Yes, the trick is to prototype with prototype OO, and then use classes when you need a classy release.
[12:57:02] <jackdaniel> also if we talk about clos it is hard to not talk about mop these days - making dumbed-down non-standard generic function metaclass that dispatches very fast is not hard
[12:57:08] * hayley gets banned from #self
[12:57:15] <unixlisp> https://www.cs.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/FAQ
[12:58:09] <beach> hayley: What did you do?
[12:58:17] <unixlisp> "The main reason is that Garnet uses a prototype-instance model, rather than the conventional class-instance model supported by CLOS.  We have found the prototype model to be more effective for user interface prototyping and construction.  A second reason is performance: it appears that KR is more efficient than CLOS for most standard operations."
[12:58:47] <hayley> beach: No, I didn't actually get banned, I was just telegraphing my terrible joke about "prototype object oriented programming" and the act of prototyping.
[12:59:08] <flip214> unixlisp: I understand prototype-instance models so that you can't use mixins, right?
[12:59:14] <beach> hayley: Oh, OK.
[12:59:42] <hayley> flip214: You can have "mixins" in Self, as it allows multiple inheritance by multiple parent slots.
[12:59:43] <flip214> ie. you can't simply add a parent class to extend behaviour
[12:59:56] <flip214> oh, multiple parents, okay.
[13:00:21] <flip214> and there are method combinations like PROGN, +, APPEND, etc. as well?
[13:01:04] <hayley> There's no method combinations in Self (or Newspeak, which has mixins as a language feature); they're still doing Smalltalk-ish message passing. Or is that question about Garnet?
[13:01:22] <flip214> I asked about Garnet, sorry for being unclear.
[13:01:36] <hayley> Okay.
[13:01:39] <flip214> reading up on it now.
[13:02:25] *** Joins: s-liao (~s-liao@101.86.96.154)
[13:02:33] <jackdaniel> if you find garnet pleasent to use then that's perfectly fine; I'll only point out that some points made in 1996 may not be valid today; that said it would be probably hard to change an underlying abstraction for it
[13:03:00] <jackdaniel> the fact that they've decided to rewrite it in c++ shows a certain mindset
[13:03:15] <beach> WHAT???
[13:03:49] <jackdaniel> authors of garnet decided that they will rewrite it in C and C++
[13:03:55] <jackdaniel> the result is (was?) called amulet
[13:03:57] <beach> Wow!
[13:04:09] <jackdaniel> http://www.cs.cmu.edu/~amulet/
[13:06:20] <Nilby> The probably wanted people to use the software. I'm a fan of Garnet, but it was slow AF in 1990's.
[13:06:23] <jackdaniel> beach: you may read in the linked faq points [10], [11] and [12], that will make a nice source material for an addendum to your training course about programming languages
[13:06:49] <jackdaniel> and [9] of course
[13:08:03] <flip214> 12 is enlightning
[13:09:34] <beach> jackdaniel: Thanks.  Let me have a look.
[13:10:37] <jackdaniel> the point [9] is a compelling argument in favor of MOP (I gather that cmucl didn't have it back then)
[13:10:52] <beach> I don't see any such FAQ points on that page.
[13:11:09] <beach> Nor in the linked FAQ file.
[13:11:10] <jackdaniel> not on the page I linked, I mean here: https://www.cs.cmu.edu/afs/cs.cmu.edu/project/garnet/garnet/FAQ
[13:11:37] <beach> Ah, OK.  Thanks.
[13:13:52] <beach> That does look like good material for my industry talks, yes.  Thanks again.
[13:14:09] <jackdaniel> sure
[13:28:53] <Nilby> It would be cool if Lisp UIs or even more of any UI would use Brad Meyers (& others), research. I especially like semantic zooming, lenses, and demonstrational scripting.
[13:29:54] <Nilby> Garent had gestures before we had devices that could input them well.
[13:32:52] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10b1:fbca:fce7:8b8d:c86:c2cb) (Ping timeout: 268 seconds)
[13:33:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:35:08] <unixlisp> flip214: garnet prototype is not so advanced like CLOS.
[13:37:55] <Nilby> With speed less of an issue now, it's not hard to add a prototype mixin to CLOS objects and have both.
[13:37:56] <unixlisp> "Why the change to C++?"  best points explain CL was not popular at 90's.
[13:39:43] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[13:42:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:43:02] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:43:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:43:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[13:43:34] *** Joins: VincentVega (~user@212.97.4.44)
[13:45:52] *** Lord_of_Life_ is now known as Lord_of_Life
[13:46:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:46:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:47:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:30] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[13:54:41] *** Joins: s-liao (~s-liao@101.86.96.154)
[13:54:55] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[13:57:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:00:26] <hayley> You don't just have a prototype mixin though; there are no classes in prototype OO. Just slots for state and methods, and parent slots for inheritance.
[14:01:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:05:45] <jackdaniel> reading carefully into the faq one could find a certain kind of dishonesty there (if read unfavourably)
[14:06:13] <jackdaniel> they claim that they switch to c++ for some reaons (including technical ones) in [12], but earlier they admit that all people who knew garnet left
[14:06:48] <jackdaniel> so which is it - were that the garnet creators who decided to switch, or a new (possibly less competent) team? of course it could be that garnet devs left because of the forced switch
[14:06:52] <jackdaniel> or some other reason
[14:08:54] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[14:08:54] <Nilby> C/C++ UIs had hideous APIs at the time, but as cool as Garent was, it sadly couldn't keep up with my mouse or typing on a decent machine. The rewrite in C++ lost features, but at least it could type and click. Lisp was still popular for real projects in Pittsburgh (CMU & U.Penn) until web browsers ate everything. As is typical in academia, the students moved on, faculty who definitely were Lispers, stayed, but would have to re-cultivate
[14:08:54] <Nilby> expertise.
[14:09:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[14:11:24] <Nilby> It's very hard to resist both practical and political pressure.
[14:11:52] <unixlisp> Python compiler have been developed more than 30 years, though not are so intensively. I guess the performance of SBCL can rise 50% within next ten years
[14:12:30] * jackdaniel only points out the rationale inconsistency, not that the rationale doesn't make sense
[14:13:01] <jackdaniel> for example gimp was originally started in cl, but they've decided that it is atraciously slow (however I think that they've used lists instead of arrays)
[14:13:21] <unixlisp> Performance is really important about Common Lisp.
[14:13:39] <unixlisp> That is why we respect SBCL.
[14:14:24] <hayley> Nilby: Be realistic, and demand the impossible.
[14:14:35] <jackdaniel> it is not that sbcl is the only performant implementation (or that it outperforms each implementation in every metric)
[14:14:38] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[14:15:17] *** Joins: Jing (~hedgehog@103.121.208.36)
[14:15:36] <Nilby> hayley: I do :) I keep working on the impossible.
[14:15:53] <semz> jackdaniel: The list thing is correct, and mindboggling. http://www.uoxray.uoregon.edu/local/manuals/GUM/whatis.html ctrl+F cs164
[14:15:56] <jackdaniel> I'm sure that there are newer benchmarks but I'm too lazy to look for them: https://common-lisp.net/project/ecl/static/files/misc/benchmarks/2016-05-bench-all.html
[14:16:07] *** Quits: Jing (~hedgehog@103.121.208.36) (Remote host closed the connection)
[14:16:34] <semz> Maybe less mindboggling if you keep in mind they were students at the time, but still
[14:16:38] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[14:16:49] <jackdaniel> heh :)
[14:17:03] <Nilby> Also keep in mind I can now run Garent on my slow phone, and previously it required a $30k workstation thingy.
[14:17:15] *** Joins: s-liao (~s-liao@101.86.96.154)
[14:17:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[14:17:55] <jackdaniel> either way on the benchmark I've linked you could see, that even ecl, abcl and clisp outshine others /in places/ :)
[14:18:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:18:12] <jackdaniel> (or did in 2016)
[14:18:16] <unixlisp> jackdaniel: most items at cl-bench, sbcl stand up.
[14:18:52] <jackdaniel> I did not say that it doesn't, but your previous statement seemed to imply that sbcl is the only implementation that is performant
[14:20:16] * pl puts on evil hat 
[14:20:31] * jackdaniel gets back to work
[14:20:44] <pl> That's because in CL, out performance floor is "still faster than CPython" ;-)
[14:24:50] <unixlisp> As said, lispworks personal edition 7.1.2 really is impressive about number computation.
[14:25:05] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[14:32:40] <unixlisp> Nilby: Tha Garnet was rewrited to Amulet was silly decision. You lost interactivity.
[14:35:11] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[14:36:40] <unixlisp> That Garnet. Python Compiler can improve performance continuously.
[14:40:23] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[14:47:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:47:43] <Nilby> unixlisp: I have a strong fondness for Garnet. It was ahead of it's time. You could try it on 30 year old computer to see. But now we can use it very quickly if we want. :)
[14:49:36] <unixlisp> I like Garnet, it is lightweight :)
[14:50:43] <jackdaniel> I have mixed feelings about grokking someone else code - on one hand it feels like reading a book where you feel deep connection with the author (one sided), on the other hand it is like letting someone else into your head
[14:52:36] <Nilby> jackdaniel: Yes, especially code that you get that "can't unsee" feeling
[14:53:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[14:53:06] <phadthai> it can be educational too
[14:54:17] <jackdaniel> as I said, on one hand it is kind of exciting, on the other it is kind of discomforting
[14:57:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:58:25] <unixlisp> Nilby: Garnet is playful, but has many bugs now.
[14:59:54] <unixlisp> It is still far ahead of GTK, QT.
[15:02:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:02:29] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[15:10:54] *** Joins: VincentV` (~user@212.97.4.44)
[15:12:26] *** Quits: VincentVega (~user@212.97.4.44) (Ping timeout: 256 seconds)
[15:12:37] <VincentV`> Nilby: Does garnet have semantic zooming you mentioned?
[15:13:12] *** VincentV` is now known as VincentVega
[15:14:16] <Nilby> VincentV`: I don't think explicitly. But it can do arbitrary transformation of UI elements and widgets.
[15:15:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:15:50] <VincentVega> Nilby: Well, that's already not bad, especially if you can customize it per "widget" or what has it. Any other cool features about it, perhaps? What makes you fond of it?
[15:16:01] <unixlisp> Garnet give me a hint: class just like alist.
[15:17:10] <unixlisp> live gui object.
[15:17:58] <VincentVega> unixlisp: I gathered from the discussion it has it's own class system. Any class can be represented as a data structure you can hack? Interesting.
[15:18:47] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:19:10] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:20:21] <unixlisp> kr knowlege representation
[15:21:38] <VincentVega> unixlisp: OK, I will read up on it.
[15:21:45] <VincentVega> thanks
[15:22:50] <unixlisp> enjoy it.
[15:28:38] <unixlisp> in kr-macros.lisp (defstruct (schema (:predicate is-schema) (:print-function print-the-schema) name bins)
[15:34:07] <unixlisp> All Garnet objects are implemented as KR schemata.
[15:40:06] <VincentVega> unixlisp: cool, I will search for that than
[15:42:54] <VincentVega> unixlisp: But a practical example would be nice, or maybe there's some resource you could point me to? KR seems like a pretty general concept. Or is it something that has to be explored simply by tinkering with garnet?
[15:44:43] <unixlisp> look at garnet manual. chap 3: garnet tutorial.
[15:45:06] <Nilby> VincentVega: It had a constraint system for making size adaptive UIs, it had a declarative seeming UI contruction style, but that could mix with functional code, in a way which seemed to work well with interface builders. It unfortunately didn't have ‘presentation’ classes like CLIM, but it was more suited to a standard non-Emacs style UI. It's quite a bit simpler than CLIM, but still very flexible in look and function, allowing total
[15:45:06] <Nilby> customization. It had themes, and tried to look like the platorm UI.
[15:46:47] <VincentVega> unixlisp: on to it, thanks!
[15:47:02] <VincentVega> Nilby: sounds pretty nice
[15:47:24] <unixlisp> far better than TCL/TK, so LTK.
[15:48:31] <Nilby> Old Zooming UI examples: https://youtu.be/BlIRYTuSv0Q https://youtu.be/d2xWEKtVv3s
[15:51:20] <Nilby> Slow as heck on 1990's computers, totally fine on cmucl/clisp on typical laptop as of 10 years ago, I'm seeing if I can recompile for sbcl ..
[15:52:51] <unixlisp> SBCL is ok. not CCL.
[15:53:31] <unixlisp> CMUCL is still ok.
[15:53:37] <VincentVega> Nilby: sweet
[15:58:41] <unixlisp> Fred Gilham update it occationally by one or two commits for last five years. Sadly.
[16:06:53] *** Joins: s-liao (~s-liao@101.86.96.154)
[16:07:31] <unixlisp> You can get and set Garnet gui objet properties by GV and S-VALUE. Just ALIST (actually HASHTABE).
[16:07:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:16:30] <unixlisp> such as (gv your-line :foreground-color) (s-value your-line :foreground-color opal:red)
[16:17:57] *** Joins: random-nick (~random-ni@87.116.160.199)
[16:18:00] <unixlisp> HASHTABLE everywhere.
[16:19:19] <VincentVega> unixlisp: I am reading the manual now, damn, the thing has a weight to it.
[16:21:25] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[16:23:14] <unixlisp> There are demos at Chap.10,  just like McCLIM demos.
[16:23:22] *** Joins: s-liao (~s-liao@101.86.96.154)
[16:23:43] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[16:24:06] <VincentVega> unixlisp: yeah, I am already running garnet-user:go-demos. Glad to see it works out of the box.
[16:24:25] *** Joins: Jing (~hedgehog@125.106.89.1)
[16:24:29] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b028:d7c:3529:5a79:7d7e:7bdd) (Ping timeout: 250 seconds)
[16:25:19] <unixlisp> eyeopening
[16:28:00] <VincentVega> It does flicker a bit, i wonder how it handles the drawing under the hood. Guess I will find out soon enough.
[16:28:28] <unixlisp> Just CLX
[16:29:27] <VincentVega> ah, ok
[16:33:57] <unixlisp> plot polyline is interesting. (s-value your-polyline :point-list your-function-data-list)
[16:37:11] *** Joins: igemnace (~ian@user/igemnace)
[16:46:59] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[16:51:36] *** Joins: VincentV` (~user@212.97.4.44)
[16:53:07] *** Quits: VincentVega (~user@212.97.4.44) (Ping timeout: 252 seconds)
[16:59:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:04:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:04:38] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[17:04:52] <rotateq> oh nice, the new christmas lecture by edi is uploaded :)
[17:06:46] *** Joins: shka (~herr@109.231.0.226)
[17:10:51] *** Quits: gaqwas (~john@dynamic-095-117-040-097.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[17:21:34] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[17:25:42] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:31:57] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[17:35:21] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:38dc:24b1:a9:f8e)
[17:48:53] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Ping timeout (120 seconds))
[17:49:05] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:50:37] *** Quits: s-liao (~s-liao@101.86.96.154) (Client Quit)
[17:56:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:57:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:59:13] *** Joins: nature (~nature@45.32.235.173)
[18:00:13] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[18:09:30] *** Quits: VincentV` (~user@212.97.4.44) (Ping timeout: 260 seconds)
[18:17:15] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[18:17:29] *** Joins: treflip (~user@95.79.32.99)
[18:18:40] *** Joins: jpl01 (~user@2001:16b8:491b:a900:905b:e37:e6b9:c44d)
[18:20:34] *** Quits: _73``` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[18:21:37] *** Joins: Bike (~Bike@71.69.170.70)
[18:21:37] *** ChanServ sets mode: +o Bike
[18:23:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:46:46] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[18:54:31] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:55:52] <Lycurgus> rotateq, where?
[18:56:49] <rotateq> on his YouTube Channel, but in German as most of his other great lecture videos
[18:57:20] <Lycurgus> i searched weihnachten vertrag edi weiss
[18:58:04] <rotateq> https://www.youtube.com/watch?v=YIkqZsz4faA
[18:58:28] <Lycurgus> ty
[18:59:10] <rotateq> i should rewatch the last about Chaitin's constant and many other of the smaller ones
[18:59:48] <rotateq> A year ago he made a 40min one with "Teaching computers how to differentiate or: Why Lisp?"
[19:00:01] <Lycurgus> it's clear hochdeutsch, thankfully
[19:00:28] <Lycurgus> but no face
[19:01:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:01:13] <rotateq> yes he has a clear style of speaking and writing. how much time it must have taken creating all those high quality animations/pictures/presentations for the hundreds of videos, but sure tools like LaTeX-beamer have benefit in the long run
[19:01:29] <rotateq> no no face :)
[19:05:11] <Lycurgus> ah, hamburg, that explains
[19:05:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:05:54] <Lycurgus> the topic is less interesting than seeing or hearing the person
[19:05:55] <rotateq> haha yes, but not really northern german accent ^^
[19:06:18] <rotateq> yes this year a not too expert-like topic
[19:07:12] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b027:56d9:fbed:4f9b:c4a:f386)
[19:08:48] *** Quits: Jing (~hedgehog@125.106.89.1) (Read error: Connection reset by peer)
[19:10:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[19:11:33] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:13:53] * Lycurgus *weitz
[19:14:44] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[19:14:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:20:12] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Remote host closed the connection)
[19:20:30] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[19:41:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[19:42:31] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 252 seconds)
[19:42:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:52:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[19:52:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:02:41] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[20:03:05] *** Joins: amb007 (~a_bakic@243.148.22.93.rev.sfr.net)
[20:04:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:09:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:19:54] *** Joins: dra (~dra@2a04:4540:641a:a100:cda8:b2a7:6660:1d6b)
[20:27:02] *** Quits: amb007 (~a_bakic@243.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:27:23] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:31:17] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[20:44:24] *** Joins: gaqwas (~john@dynamic-095-117-040-097.95.117.pool.telefonica.de)
[20:55:06] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:55:29] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[20:57:05] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:01:35] *** Joins: floguard (~floguard@pool-96-233-64-53.bstnma.fios.verizon.net)
[21:03:49] <floguard> Would you recommend slime or sly for a beginner?
[21:04:35] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:10:45] <varjag> more people likely know how to help you with slime in case you have an issue
[21:11:55] <floguard> that is probably more important than most technical differences
[21:18:54] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[21:22:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:28:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[21:29:58] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[21:31:09] *** Quits: floguard (~floguard@pool-96-233-64-53.bstnma.fios.verizon.net) (Quit: Client closed)
[21:36:21] *** Joins: srhm (~srhm@user/srhm)
[21:42:07] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[21:42:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:43:58] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[21:45:16] *** Joins: Oladon (~olad@98.43.81.226)
[21:47:49] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b027:56d9:fbed:4f9b:c4a:f386) (Quit: Leaving)
[21:49:11] *** Joins: b1_xt (~b1_xt@broadband-90-154-70-15.ip.moscow.rt.ru)
[21:55:22] *** Quits: b1_xt (~b1_xt@broadband-90-154-70-15.ip.moscow.rt.ru) (Remote host closed the connection)
[21:58:16] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:59:09] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[22:00:25] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:02:30] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:09:17] *** Joins: hobo (~hobo@69.218.33.204)
[22:17:33] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[22:18:49] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:23:22] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:25:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:30:22] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:33:32] *** Joins: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca)
[22:40:05] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:46:01] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:38dc:24b1:a9:f8e) (Ping timeout: 268 seconds)
[22:49:30] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Ping timeout: 260 seconds)
[22:50:17] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:00:59] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[23:06:21] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Ping timeout: 268 seconds)
[23:17:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:19:30] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:19:33] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:23:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[23:33:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[23:33:59] *** Joins: robin (~robin@user/terpri)
[23:34:21] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:36:37] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[23:43:06] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:43:30] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:44:56] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:45:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:46:10] *** Joins: cjb (~cjb@user/cjb)
[23:46:15] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:53:19] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 252 seconds)
[23:54:34] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:58:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[23:59:12] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
