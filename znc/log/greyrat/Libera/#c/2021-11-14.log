[00:02:48] *** Joins: cousteau (~cousteau@user/cousteau)
[00:05:33] *** Joins: node1 (~node1@user/node1)
[00:06:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[00:07:44] *** Joins: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net)
[00:10:29] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[00:11:26] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[00:11:34] *** Quits: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[00:11:38] *** Quits: van3ll0pe (~van3ll0pe@2a01:e0a:53d:ab30:c079:dce5:c29c:7968) (Remote host closed the connection)
[00:13:10] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[00:16:27] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[00:19:24] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:19:53] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:20:15] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:21:42] <MrMobius> trying to understand a basic makefile for my C project: why does gcc get called twice (line 32-33) when only one line is defined on line 19? https://www.toptal.com/developers/hastebin/hohogucoye.makefile
[00:22:42] <MrMobius> also, how does "-c -o main.o main.c" get added to the end of line 32? is that what make does when it understands it needs to compile a c file?
[00:24:07] <fizzie> There's an implicit rule Make has on how to make foo.o if a foo.c file exists.
[00:24:31] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[00:25:01] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:25:18] *** Quits: V-T60 (~v@91.203.24.166) (Remote host closed the connection)
[00:25:31] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[00:25:34] <fizzie> Your Makefile just asks for main.o as a dependency and does not specify how to make it, so the implicit rule gets used.
[00:26:21] <MrMobius> that makes sense for the second question. is that also why it runs gcc twice?
[00:26:24] *** Joins: echoSMILE (uid504326@user/echosmile)
[00:26:49] <MrMobius> im wondering how it knows which arguments to pass each time. are CFLAGS and LFLAGS special somehow or could you use any variable name?
[00:26:50] <fizzie> Yes, it runs GCC once to compile main.c to main.o, and then (using your explicit rule) it a second time to link main.o into test.out.
[00:26:59] <fizzie> Incidentally, your linking rule should *really* have $(PROJECT).out as the target.
[00:27:18] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[00:27:26] *** Quits: X-Scale (~ARM@46.50.4.208) (Ping timeout: 260 seconds)
[00:27:36] <fizzie> Otherwise it will rebuild the executable even if it's not out of date.
[00:28:21] <MrMobius> the linking rule being line 16?
[00:28:38] *** X-Scale` is now known as X-Scale
[00:28:44] <fizzie> Yes. The conventional way would be to have one rule that's `all: $(PROJECT).out` with no steps (saying just that to make 'all', Make has to make 'test.out'), and another rule that's `$(PROJECT.OUT): $(OBJECTS)` with that $(CC) command line as the steps (saying to make 'test.out', you have to make 'main.o' first, and then run that command).
[00:28:59] <fizzie> Lines 18-19, I mean.
[00:29:29] <fizzie> Line 16 is just a variable definition. And yes, the variables CFLAGS and LFLAGS are special in that they're used by the implicit rules.
[00:30:30] <fizzie> For GNU Make, the implicit rule to make foo.o out of foo.c is `$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<`.
[00:30:48] <fizzie> Actually, LFLAGS isn't one of the conventional variables, so that's not special, that's just what you're using on line 19.
[00:31:15] <fizzie> (The variables used by the implicit rules are LDFLAGS and LDLIBS.)
[00:32:13] <MrMobius> that all makes sense. any reason i shouldnt compile and link in one go? thats what i usually do since i dont use make
[00:32:38] <fizzie> If you have just one file, there's probably no particular reason not to.
[00:32:54] <fizzie> Once you have more than one file, it's less work to rebuild since only the changed files have to be recompiled.
[00:34:01] *** Joins: kish` (~aqua@user/aqua)
[00:35:03] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[00:35:58] <MrMobius> fizzie, thanks a lot
[00:40:34] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[00:40:57] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[00:41:28] <De4nWhit3> Hello everyone.
[00:41:31] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Read error: Connection reset by peer)
[00:44:34] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[00:46:24] <Bou> De4nWhit3: ,cc fwrite((uint64_t[]){0x79656820796568}, 1, 7, stdout);
[00:46:27] <candide> De4nWhit3: hey hey
[00:48:05] <De4nWhit3> ,cc fwrite((uint64_t[]){0x79656820796568}, 1, 7, stdout);
[00:48:08] <candide> De4nWhit3: hey hey
[00:48:13] <De4nWhit3> Neat!
[00:51:10] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[00:52:35] <cousteau> now you need to figure out what happened
[00:53:37] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:28] *** Joins: monkey_ (~user@190.104.116.153)
[00:59:40] <fizzie> ,cc -w __attribute__ ((section (".text"))) const uint64_t f[] = {0xc7ffff31c0ffc031, 0x3100000007358d48, 0x6568c3050f07b2d2, 0x7965682079}; int main(void) { ((void (*)())f)(); }
[00:59:42] <candide> fizzie: hey hey
[01:01:31] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[01:01:47] *** Joins: X-Scale` (~ARM@83.223.243.66)
[01:02:59] <fizzie> (I usually do that with just `uint64_t main[] = ...` but it's not candide-compatible, it insist on there either being a main function, or with -nomain just throws it away completely and then fails to link because there's, well, no main.)
[01:03:18] *** Quits: X-Scale` (~ARM@83.223.243.66) (Excess Flood)
[01:03:20] <MrMobius> bad candide
[01:03:20] <candide> [#bash] 'tac < file | tail | tac # TAOMBWTDI "there's always one more bad way to do it." '
[01:03:22] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[01:03:39] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[01:04:05] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[01:05:36] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[01:05:46] *** Joins: X-Scale (~ARM@83.223.243.66)
[01:13:12] *** Joins: rgrinberg (~textual@190.113.102.153)
[01:18:01] *** Quits: rgrinberg (~textual@190.113.102.153) (Ping timeout: 245 seconds)
[01:19:57] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:20:35] <Samian> you know how python have the builtin __FILE__ macro to get the file's absolute path? Is there anything like that in c?
[01:23:28] *** Joins: rgrinberg (~textual@190.113.102.153)
[01:24:34] <fizzie> ,cc puts(__FILE__);
[01:24:36] <candide> fizzie: prog.c
[01:26:07] <fizzie> But it's implementation-specific what exactly goes there, and really the path the source file has during compilation is a lot less useful than the Python thing.
[01:28:52] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:31:11] <nomagno> fizzie: Precision being implementation-defined is a slight issue, but my question is more along the lines of, can you expect to store decimal numbers without any completely breaking/unexpected changes even if you have to avoid complicated usage?
[01:32:20] <nomagno> ,cc char * mystr= FILE; system(mystr);
[01:32:22] <candide> nomagno: error: stray '\2' in program
[01:32:52] <nomagno> ,cc char * mystr= __FILE__; system(mystr);
[01:32:57] <candide> nomagno: sh: line 1:  command not found
[01:34:01] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:34:51] <nomagno> ,cc char mystr[40]="cc "; strcat(__FILE__);system(mystr);
[01:34:53] <candide> nomagno: error: too few arguments to function 'strcat'
[01:35:16] <nomagno> ,cc char mystr[40]="cc "; strcat(mystr, __FILE__);system(mystr);
[01:35:21] <candide> nomagno: no output: mystr = "cc prog.c"
[01:36:12] <nomagno> candide recursive command running seems possible as long as you can assume POSIX ^
[01:36:12] <candide> recursive is see: recursion
[01:37:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:38:33] *** Joins: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au)
[01:40:48] *** Joins: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de)
[01:40:55] *** Quits: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de) (Client Quit)
[01:41:46] *** Quits: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 245 seconds)
[01:43:26] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:43:59] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[01:44:07] *** Joins: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au)
[01:44:08] *** Quits: monkey_ (~user@190.104.116.153) (Quit: ERC (IRC client for Emacs 27.2))
[01:46:02] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:47:37] *** Quits: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[01:49:21] *** Joins: bruda (~bruda@172.58.62.194)
[01:50:15] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[01:51:23] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[01:52:53] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Remote host closed the connection)
[01:53:49] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[01:53:59] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[01:54:53] <trenka> nomagno: do you know candide answers private messages?
[01:57:06] <nomagno> trenka:I did not
[01:57:59] <trenka> nomagno: have fun :)
[01:58:40] *** kish` is now known as ayahuasca
[01:59:55] <nomagno> Yeah you can definitely do recursive execution with candide. It also thankfully stops itself after a while
[02:01:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:02:52] *** Joins: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de)
[02:04:02] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:04:17] <tusko> Please help tusko
[02:04:23] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 250 seconds)
[02:04:50] *** Joins: bindu (~bindu@user/bindu)
[02:04:57] *** Joins: node1 (~node1@user/node1)
[02:07:57] *** Quits: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de) (Quit: Leaving)
[02:09:08] *** Quits: earnestly (~earnest@user/earnestly) (Read error: Connection reset by peer)
[02:09:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:10:26] <pragma-> candide: recursion?
[02:10:26] <candide> recursion is see: recurrence
[02:10:33] *** Joins: earnestly (~earnest@user/earnestly)
[02:14:39] <nomagno> candide: recurrence?
[02:14:40] <candide> recurrence is see: recurse
[02:14:57] <nomagno> Very funny
[02:16:34] *** Joins: kadir (~kadir@78.178.105.36)
[02:18:03] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[02:18:58] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Quit: Quitting)
[02:19:15] *** Joins: nyah (~nyah@94.6.71.219)
[02:20:12] <tusko> Would one of you kind sirs mind to talk with me about these codes? https://bpa.st/5K4Q
[02:22:29] <floatcomplex> why _main?
[02:22:37] <tusko> I have no idea
[02:23:37] <tusko> It seem to me that we'd like to do is pass some shellcode to be placed in buffer, then overflow the int to be the address where the shellcode is located. So then when p* = a the pointer will be pointed at the shellcode
[02:24:36] <tusko> but actually, maybe, the int should be the return address so code execution will start at the buffer (w/ shellcode in it)
[02:25:20] <nomagno> I'm not sure those words actually fit in that order.
[02:25:46] <tusko> Is there some way to use the fact that char *arg is a pointer and I could use clever pointer arithmetic to overwrite the int before the buffer?
[02:26:28] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[02:26:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:27:13] *** ayahuasca is now known as kish`
[02:27:35] <tusko> nomagno, what u mean fam?
[02:27:46] <tusko> This is clearly vulnerable to some type of buffer overflow
[02:27:49] <fizzie> Pretty sure the intent there is that the objects `int a` and `int *p` come right *after* the buffer in the typical memory layout of many implementations, so overwriting them doesn't need any "clever pointer arithmetic", it just needs a string that's 2048+8 bytes long.
[02:28:22] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:28:39] <tusko> Actually that would make sense. I suppose I didn't think that the buffer would be reversed from the order of the declarations.
[02:29:33] <tusko> `shellcode + ~2000 bytes of junk + address of shellcode + return address` was what I was trying but I seg faulted
[02:30:05] <tusko> Does that suggest that I wrote too much and tried to access memory outside the stack?
[02:30:14] <fizzie> ,cc int a; char buf[2048]; printf("buf %p, &a %p, distance %td", (void *) buf, (void *) &a, (char *) &a - buf);
[02:30:17] <candide> fizzie: buf 0x7fffffffda90, &a 0x7fffffffe29c, distance 2060
[02:30:39] <fizzie> (That's 2060 rather than 2048 probably because of candide's -fsanitize=address,undefined defaults and whatnot.)
[02:31:18] <fizzie> ,cc -m32 -O0 int a; char buf[2048]; printf("buf %p, &a %p, distance %td", (void *) buf, (void *) &a, (char *) &a - buf); // that's more like it
[02:31:20] <candide> fizzie: buf 0xffffcc1c, &a 0xffffd41c, distance 2048
[02:31:21] <tusko> Actually this happend to me, also. If I declared a char buf[100] it made a 116 byte stack
[02:31:25] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::9037) (Quit: Leaving.)
[02:31:37] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:31:48] *** Quits: system_error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[02:32:08] <fizzie> Judging from `sizeof(buf) + 8`, I strongly suspect that code's expecting an environment where sizeof (int) + sizeof (int *) == 8 (i.e., a 32-bit one).
[02:32:33] <fizzie> (Also these days it's exceedingly unlikely the contents of a buffer on the stack would be executable, even if you get the addresses right.)
[02:33:01] *** Quits: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[02:33:58] *** Joins: pizdets_ (~pizdets@183.182.115.124)
[02:34:07] *** Quits: pizdets (~pizdets@183.182.114.166) (Ping timeout: 268 seconds)
[02:34:13] <tusko> Yeah, my next attempt (I think) actually addresses DEP
[02:34:35] <tusko> Then address randomization after that (0-255 byte offset)
[02:35:21] <tusko> Its definitely a 32-bit environment
[02:36:55] <tusko> Actually, now that you mention that I think sizeof(buf) + 8 is exactly what allows me to overflow the buffer and write that int and int *
[02:38:36] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[02:39:25] <nomagno> tusko: Right so, if I understand correctly you mean to allocate the buffer right before the pointer?
[02:41:03] <tusko> That's what I'm thinking. shellcode + junk + address-o-shellcode + loc of return address
[02:41:40] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:41:40] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[02:41:40] <tusko> Then when they dereference the pointer and set it equal to a they will inadvertently clobber the RA and replace it with the address of the shellcode
[02:43:25] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[02:43:33] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[02:44:06] *** Joins: system_error (~SystemErr@user/systemerror)
[02:44:26] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:22] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:46:29] *** Joins: EdFletcher (~EdFletche@user/edfletcher)
[02:46:40] *** Joins: Fault (~Fault@150.230.39.7)
[02:46:49] *** Joins: rgrinberg (~textual@190.113.102.153)
[02:47:23] *** Joins: jbauer (~jbauer@146.71.11.98)
[02:47:31] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[02:49:37] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[02:50:19] <nomagno> I'm not sure that'd work, but this is insanely implementation-dependent anyways so...
[02:50:39] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:52:11] *** Joins: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de)
[02:52:22] *** Joins: superboot (~agentgasm@user/superboot)
[02:54:07] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:55:51] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:02:08] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[03:02:53] *** Joins: Fault (~Fault@150.230.39.7)
[03:04:52] *** Joins: Bilnon (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890)
[03:05:07] *** Quits: alch (~alch@151.38.169.188) (Read error: Connection reset by peer)
[03:05:27] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[03:06:13] *** Quits: supajerm_ (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[03:06:48] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[03:06:53] *** Joins: supajerm_ (~supajerm@gateway/vpn/pia/supajerm)
[03:07:36] *** Quits: EdFletcher (~EdFletche@user/edfletcher) (Ping timeout: 245 seconds)
[03:07:37] *** Joins: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net)
[03:07:39] *** Quits: Bilnon (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890) (Client Quit)
[03:08:27] *** Joins: EdFletcher (~EdFletche@c-98-207-31-171.hsd1.ca.comcast.net)
[03:08:57] *** Joins: alch (~alch@151.36.151.114)
[03:10:58] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:11:50] *** Quits: EdFletcher (~EdFletche@c-98-207-31-171.hsd1.ca.comcast.net) (Client Quit)
[03:15:48] <Bou> it wouldn't be "hacking" if it wasn't
[03:19:38] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::9037)
[03:20:06] *** Quits: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de) (Ping timeout: 245 seconds)
[03:21:24] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:23:37] <Bou> fizzie: cool, I didn't know about `__attribute__ ((section (".text")))`
[03:24:01] <Bou> unfortunately I get "Warning: ignoring changed section attributes for .text" locally
[03:26:58] <fizzie> Yeah, that's one half of what the -w was getting rid of. :) It's not fatal. At least for me.
[03:28:03] <Bou> too bad that `lea rsi` is so long, 7 whole bytes. would `mov rax, 'hey hey'; push rax; mov rsi, rsp;` be shorter?
[03:28:43] <fizzie> Probably. Some of the other parts are slightly overlong too.
[03:29:18] <fizzie> ,cc -w __attribute__ ((section (".text"))) const uint64_t f[] = {0x358d48c78958016a, 0xf06578d00000006, 0x656820796568c305, 0x79}; int main(void) { ((void (*)())f)(); } // is what I landed on, though still with rip-relative lea
[03:29:20] <candide> fizzie: hey hey
[03:29:42] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[03:29:43] <Bou> one last byte to go
[03:31:11] *** Quits: magla (~gelignite@55d45814.access.ecotel.net) (Quit: Stay safe!)
[03:31:23] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[03:33:00] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[03:33:46] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[03:38:45] *** Joins: klax (~klax3@2a01:e0a:8fc:6c50:9fe1:41bd:c767:ba48)
[03:42:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[03:44:18] *** Quits: bruda (~bruda@172.58.62.194) (Quit: catch you all later)
[03:46:35] <fizzie> Heh, actually... const uint64_t main[] = {0x6358d48f889, 0x68c3050f06578d00, 0x796568207965} works as long as you don't pass any arguments (argc == 1). ;)
[03:49:21] *** Joins: shivesh (~shivesh@user/shivesh)
[03:50:17] <omegatron> -_-   ... people and their hobbies ..
[03:50:45] <tusko> coding to the metal
[03:51:21] <omegatron> reminds me of  https://github.com/izabera/zeromaps
[03:51:22] <candide> Title of omegatron's link: GitHub - izabera/zeromaps: A "living" Linux process with no memory
[03:51:49] <omegatron> same madness ..
[03:58:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:59:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:59:54] *** Lord_of_Life_ is now known as Lord_of_Life
[04:00:04] *** Quits: klax (~klax3@2a01:e0a:8fc:6c50:9fe1:41bd:c767:ba48) (Quit: Leaving)
[04:01:08] *** Quits: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[04:02:23] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214)
[04:03:05] *** Joins: graywolf (~wolf@user/graywolf)
[04:03:29] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:09:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[04:10:36] *** Joins: bruda (~bruda@172.58.62.194)
[04:11:53] *** Joins: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se)
[04:12:45] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:13:05] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[04:13:19] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[04:14:22] *** Joins: masterbuilder (~user@user/masterbuilder)
[04:17:06] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:17:29] *** Joins: ogis (~Android@240d:1c:3d:9500:5919:6895:619f:79f4)
[04:18:24] *** Joins: Wulf (~Wulf@user/wulf)
[04:21:46] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[04:24:22] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[04:24:22] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[04:25:19] *** Quits: ogis (~Android@240d:1c:3d:9500:5919:6895:619f:79f4) (Quit: -a- IRC for Android 2.1.59)
[04:26:01] *** Joins: ogis (~Android@240d:1c:3d:9500:5919:6895:619f:79f4)
[04:26:31] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[04:27:22] *** Joins: Fault (~Fault@150.230.39.7)
[04:29:38] *** Joins: Barabacha (~chatzilla@user-5-173-136-7.play-internet.pl)
[04:34:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:35:00] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: ian|)
[04:38:45] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[04:38:59] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[04:39:55] *** Quits: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e) (Ping timeout: 268 seconds)
[04:42:10] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 260 seconds)
[04:42:29] *** Joins: Klinda (~superleag@user/klinda)
[04:43:10] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[04:45:01] *** Joins: riposte (~finalripo@2403-5802-74-2--16c3.ip6.aussiebb.net)
[04:46:07] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[04:46:42] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 268 seconds)
[04:49:32] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[04:50:12] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[04:50:57] *** Joins: Fault (~Fault@150.230.39.7)
[04:51:49] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[04:51:59] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:52:15] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:55:50] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[04:56:07] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[04:57:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:01:10] *** Quits: Barabacha (~chatzilla@user-5-173-136-7.play-internet.pl) (Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805])
[05:03:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[05:05:48] *** Quits: pizdets_ (~pizdets@183.182.115.124) (Ping timeout: 250 seconds)
[05:05:50] *** Joins: pizdets (~pizdets@183.182.115.54)
[05:06:38] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: %xD%)
[05:09:38] *** Quits: bruda (~bruda@172.58.62.194) (Quit: My brain is tired for tonight. Good night all.)
[05:11:36] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[05:13:15] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[05:13:18] *** Joins: taru9 (~realTaru9@user/taru9)
[05:16:19] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:16:37] *** Quits: Brewster (~Brewster@185.145.156.241) (Remote host closed the connection)
[05:22:22] *** Quits: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 260 seconds)
[05:22:57] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 256 seconds)
[05:23:12] *** Joins: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e)
[05:26:06] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[05:26:34] *** Joins: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au)
[05:26:56] *** Joins: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net)
[05:29:20] *** Quits: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[05:30:10] *** Joins: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au)
[05:30:21] *** Quits: cornett_ (~ben@149.28.239.26) (Quit: WeeChat 2.9)
[05:33:23] *** Quits: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 264 seconds)
[05:33:31] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:38:00] *** Joins: quartz (~quartz@user/quartz)
[05:42:16] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:51:18] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[05:52:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Quit: Leaving)
[05:52:58] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:55:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 264 seconds)
[05:59:33] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[06:00:10] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[06:00:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:01:30] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[06:03:33] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:03:50] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[06:07:26] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:08:15] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:08:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:11:44] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-238-251.pa.nsw.optusnet.com.au)
[06:12:16] *** Joins: retro_ (~retro@176.255.22.26)
[06:13:23] *** Quits: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[06:13:35] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:15:07] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[06:15:30] *** Quits: retroid_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[06:15:54] *** Joins: Fault (~Fault@150.230.39.7)
[06:15:56] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-238-251.pa.nsw.optusnet.com.au) (Ping timeout: 245 seconds)
[06:15:59] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:18:09] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[06:18:10] *** Joins: extern (~archer@141.226.72.6)
[06:18:53] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[06:19:45] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[06:21:24] *** Joins: dutch (~DutchIngr@user/dutch)
[06:21:40] *** Quits: riposte (~finalripo@2403-5802-74-2--16c3.ip6.aussiebb.net) (Ping timeout: 268 seconds)
[06:22:07] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:26:50] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[06:27:47] *** Joins: Fault (~Fault@150.230.39.7)
[06:28:23] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[06:28:33] *** Joins: kurahaupo (~kurahaupo@pa49-181-164-116.pa.nsw.optusnet.com.au)
[06:29:36] *** Joins: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au)
[06:30:01] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[06:30:10] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[06:33:06] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:33:13] *** Quits: kurahaupo (~kurahaupo@pa49-181-164-116.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[06:33:20] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:34:21] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:55] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[06:35:08] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:36:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:38:24] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[06:39:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:43:31] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[06:44:32] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:45:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[06:45:43] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 268 seconds)
[06:45:52] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[06:45:59] *** Quits: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 264 seconds)
[06:46:44] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Remote host closed the connection)
[06:46:53] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[06:47:07] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[06:48:51] *** Parts: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) ()
[06:49:23] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-164-116.pa.nsw.optusnet.com.au)
[06:50:53] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:51:23] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[06:51:53] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 268 seconds)
[06:52:20] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:38] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[06:52:47] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[06:53:50] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-164-116.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[06:54:05] *** Quits: AmR (~AmREiSa@156.199.219.108) (Quit: Konversation terminated!)
[06:54:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7) (Ping timeout: 264 seconds)
[06:57:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:59:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:00:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:01:45] *** Quits: retro_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[07:02:56] *** Joins: retroid_ (~retro@176.255.22.26)
[07:04:15] *** Joins: myon98 (~myon98@user/myon98)
[07:04:15] *** Quits: alch (~alch@151.36.151.114) (Read error: Connection reset by peer)
[07:04:52] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[07:06:51] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[07:08:09] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[07:08:59] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[07:09:15] *** Joins: alch (~alch@151.38.135.213)
[07:11:37] *** Quits: retroid_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[07:13:17] *** Joins: johnjay (~pi@192.142.100.50)
[07:13:30] <johnjay> can you make dlls and stuff to interface with CLR code
[07:13:39] <johnjay> or is it similar to C++ where name mangling prevents it
[07:16:54] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[07:18:31] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Client Quit)
[07:19:25] *** Joins: Brewster (~Brewster@104.145.226.5)
[07:23:47] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[07:25:26] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[07:27:05] <Budd> The Raspberry Pico headers contain this: "#define bool_to_bit(x) ((uint)!!(x))". Is this just a branchless way to ensure a 'true' integer value is exactly 1?
[07:27:56] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:28:14] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:50e8:bc6a:72eb:1143)
[07:30:13] <johnjay> Budd: that's a good guess
[07:30:28] <johnjay> ! of 0 is 1 but idk if this is mandated by the standard
[07:31:15] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[07:43:47] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[07:45:28] <Samian> How is calloc used?  I can allocate a certain number of memory blocks, but I don't know how large each block is.
[07:45:44] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[07:46:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:46:59] <caze> Why don't you know that?
[07:47:41] <|smlckz|> hmm, ferror(3) only returns an int, is there any way to understand exactly what kind error has happened?
[07:50:33] *** Quits: Brewster (~Brewster@104.145.226.5) (Remote host closed the connection)
[07:50:50] <Budd> not from ferror, but perhaps errno would help you (assuming it was the most recent error).
[07:51:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:51:32] *** Joins: Brewster (~Brewster@104.145.226.5)
[07:51:38] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[07:52:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:56:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:58:48] *** Joins: bindu (~bindu@user/bindu)
[07:59:07] *** Quits: Brewster (~Brewster@104.145.226.5) (Remote host closed the connection)
[07:59:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[07:59:20] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:00:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:01:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 264 seconds)
[08:01:53] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:03:38] *** Joins: andai (~andai@ip26-92-214-87.adsl2.static.versatel.nl)
[08:04:09] *** Quits: tinyweasel (~weasel@user/tinyweasel) (Quit: quit)
[08:05:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:07:49] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:10:02] *** Quits: extern (~archer@141.226.72.6) (Quit: WeeChat 3.3)
[08:11:43] *** Joins: Brewster (~Brewster@104.145.226.5)
[08:12:52] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[08:12:52] *** Joins: Brewster (~Brewster@user/brewster)
[08:13:09] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[08:19:11] <nitrix> johnjay, Yes, the !!x idiom is to convert any non-zero value into a proper true. The branchless optimization guessing is irrelevant, modern compilers see through things like this easily.
[08:19:48] <dave0> x!=0 is so much better
[08:22:31] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[08:22:47] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[08:23:11] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 264 seconds)
[08:23:39] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[08:24:58] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Client Quit)
[08:25:12] <nitrix> I know C23 is giving `true` the actual type `_Bool` instead of the integer constant 1, I'm not sure whether they also fixed the unary ! operator.
[08:25:43] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[08:26:24] <dave0> what about the type of the comparison operators? and whatever && || is called?
[08:26:51] <nitrix> That one is explicitly defined to be an `int`, so `_Bool` might be a breaking change with regards to C11's _Generic.
[08:27:02] *** Joins: frost (~frost@user/frost)
[08:27:04] <dave0> oh ok
[08:27:42] <dave0> i think having if and while require a _Bool type for the condition is wishful thinking... but maybe compilers could give a warning
[08:28:35] <dave0> wishful thinking cos everything ever written that used if would break :-p
[08:29:35] <nitrix> They would keep working, the conditional expressions are explained in terms of zero/non-zero values and the values here are explicitly 0 and 1 always.
[08:30:54] <nitrix> But I really don't know how they'll make _Generic happy. Things should really be _Bool for _Generic to work properly, but then, there's probably already code accidently working with things being int.
[08:31:34] <nitrix> Seems like either backwards compatibility or correctness has to give.
[08:31:34] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[08:31:39] <dave0> is _Generic meant for the implementation? not so much user code?
[08:31:53] <nitrix> For the users!
[08:32:03] <nitrix> It's like the biggest additions to C11. Atomics and generics.
[08:32:07] <dave0> aw :-(
[08:32:18] *** Joins: mkv (~znc@ubuntu/member/m4v)
[08:32:29] <dave0> i don't understand atomics.. i wrap everthing in a mutex
[08:32:34] <nitrix> ,cc puts(_Generic("foo", char *: "It's a string", int: "It's an int"));
[08:32:37] <candide> nitrix: It's a string
[08:33:14] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 260 seconds)
[08:33:18] *** mkv is now known as m4v
[08:33:31] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[08:33:43] <nitrix> ,cc puts(_Generic(42, char *: "It's a string", int: "It's an int"));
[08:33:45] <candide> nitrix: It's an int
[08:34:18] <nitrix> It's an operator, so you can put that into your fanciest macros.
[08:35:12] <nitrix> Actually, I don't think it's an operator. I wonder what it is.
[08:36:12] <dave0> fancy switch statement?
[08:36:24] <nitrix> It works like _Alignof and is allowed in the same places. _Alignof is explicitly mentioned as an operator. I guess _Generic should be as well, it's just not mentioned anywhere.
[08:37:50] <nitrix> ,c11 6.5.1p6
[08:37:50] <candide> http://www.iso-9899.info/n1570.html#6.5.1p6 [Primary expressions] A generic selection is a primary expression. Its type and value depend on the selected generic association, as detailed in the following subclause. Forward references: declarations (6.7).
[08:40:00] <nitrix> I guess it's an expression with a rather unusual syntax.
[08:40:49] <dave0> are the brackets optional? ;-)
[08:41:09] <dave0> ,cc float a; printf("%d ", _Alignof a);
[08:41:12] <candide> dave0: [warning: ISO C does not allow '_Alignof (expression)' [-Wpedantic]  warning: format '%d' expects argument of type 'int', but argument 2 has type 'long unsigned int' [-Wformat=]] 4
[08:41:46] <dave0> obviously i don't know how to use _Alignof
[08:41:48] <dave0> :-/
[08:46:00] <|smlckz|> ,cc float a; printf("%zu", _Alignof a);
[08:46:02] <candide> |smlckz|: [warning: ISO C does not allow '_Alignof (expression)' [-Wpedantic]] 4
[08:46:09] *** Joins: tinyweasel (~weasel@15.235.28.27)
[08:48:36] <|smlckz|> ,cc -std=c2x struct { int x: 2; uint64_t r[]; } a; printf("%zu", _Alignof a);
[08:48:38] <candide> |smlckz|: 8
[08:57:40] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[08:59:25] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[09:00:06] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[09:00:21] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[09:01:17] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[09:01:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[09:02:53] *** Quits: tinyweasel (~weasel@15.235.28.27) (Quit: quit)
[09:08:10] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[09:09:14] *** Joins: bindu (~bindu@user/bindu)
[09:10:48] *** Joins: jdurand (~jdurand@user/jdurand)
[09:13:07] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:16:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[09:18:34] *** Joins: Bilnon (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890)
[09:19:38] <Bilnon> e
[09:21:06] *** Joins: vftec (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890)
[09:21:29] *** Quits: ogis (~Android@240d:1c:3d:9500:5919:6895:619f:79f4) (Read error: Connection reset by peer)
[09:21:29] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[09:21:29] *** Joins: ogis_ (~Android@240d:1c:3d:9500:5919:6895:619f:79f4)
[09:23:07] *** Joins: vicfred (~vicfred@user/vicfred)
[09:23:23] *** Joins: bogdomania (bogdomania@user/bogdomania)
[09:23:57] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[09:25:23] <pnbeast> f
[09:26:30] *** Joins: missogra (~missogra@dynamic-077-006-020-145.77.6.pool.telefonica.de)
[09:26:45] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[09:30:55] <floatcomplex> k
[09:31:03] *** Quits: vftec (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890) (Quit: Leaving)
[09:31:03] *** Quits: Bilnon (~8iIn0n@2a01:4b00:8e07:7900:904a:a590:3eb3:9890) (Quit: Leaving)
[09:43:17] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214) (Remote host closed the connection)
[09:44:14] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214)
[09:44:52] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[09:45:34] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 260 seconds)
[09:49:35] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214) (Ping timeout: 264 seconds)
[09:49:51] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[09:50:11] *** Quits: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 264 seconds)
[09:56:49] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[09:58:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:03:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:07:22] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[10:09:28] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:16:00] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 268 seconds)
[10:17:38] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:19:15] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[10:20:11] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[10:20:56] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 268 seconds)
[10:21:04] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[10:22:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ea42:8fa9:6c11:b414) (Ping timeout: 245 seconds)
[10:22:30] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[10:23:10] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f670:f79d:3e7d:a052)
[10:31:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:33:57] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Remote host closed the connection)
[10:34:37] *** Quits: amorel (~amorel@mx.mompl.net) (Ping timeout: 256 seconds)
[10:35:13] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[10:37:02] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[10:39:21] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[10:43:12] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:46:08] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: No Ping reply in 180 seconds.)
[10:47:22] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[10:50:08] *** Joins: meator (~meator@user/meator)
[10:56:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[11:01:27] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[11:03:17] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[11:05:05] *** Quits: alch (~alch@151.38.135.213) (Read error: Connection reset by peer)
[11:06:52] *** Joins: bindu (~bindu@user/bindu)
[11:08:38] *** Joins: alch (~alch@151.38.189.206)
[11:12:51] *** Joins: mven4 (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:14:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:14:51] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[11:14:52] *** mven4 is now known as mven
[11:17:31] *** Quits: ogis_ (~Android@240d:1c:3d:9500:5919:6895:619f:79f4) (Read error: Connection reset by peer)
[11:17:40] *** Quits: missogra (~missogra@dynamic-077-006-020-145.77.6.pool.telefonica.de) (Ping timeout: 268 seconds)
[11:18:49] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[11:20:25] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[11:22:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:22:44] *** Joins: Macuser (~Macuser@216.30.159.201)
[11:23:04] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[11:23:19] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[11:28:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:28:35] *** Quits: tbcr- (~tbcr@107.13.189.161) (Ping timeout: 264 seconds)
[11:28:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Remote host closed the connection)
[11:29:38] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:29:57] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[11:30:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:32:26] *** Quits: rahl (~rahl@102.114.106.30) (Ping timeout: 260 seconds)
[11:32:53] *** Quits: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e) (Quit: WeeChat 2.3)
[11:34:07] *** Joins: rahl (~rahl@102.114.61.68)
[11:34:25] *** Joins: mrig (~AdiIRC@user/mrig)
[11:34:47] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Read error: Connection reset by peer)
[11:35:08] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[11:51:46] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[11:51:46] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[11:53:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:54:25] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[11:54:43] *** Joins: kadir (~kadir@78.178.105.36)
[11:58:41] *** Joins: nrl^ (~nrl@h50.174.139.63.static.ip.windstream.net)
[12:00:41] *** Joins: kdc (~kdc@196.211.197.159)
[12:01:20] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[12:01:22] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 260 seconds)
[12:04:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[12:05:08] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:07:38] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:07:52] *** Joins: mrig (~AdiIRC@user/mrig)
[12:11:19] *** Quits: Budd (~Budd@2001:470:8d44:1::5) (Ping timeout: 268 seconds)
[12:12:48] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:13:25] *** Joins: darsie (~darsie@84-113-55-200.cable.dynamic.surfer.at)
[12:18:35] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:21:34] *** Joins: aradesh (~aradesh@user/aradesh)
[12:26:15] *** rkta is now known as _rkta
[12:26:42] *** rkta_ is now known as rkta
[12:27:21] *** _rkta is now known as rkta_
[12:34:09] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:34:12] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:35:16] *** Quits: maxxe (~maxxe@user/maxxe) (Quit: off)
[12:41:02] *** Quits: pizdets (~pizdets@183.182.115.54) (Ping timeout: 260 seconds)
[12:43:19] *** Joins: earnestly (~earnest@user/earnestly)
[12:43:46] *** Joins: pizdets (~pizdets@183.182.111.238)
[12:46:50] *** Joins: NEYi (~NEYi@109.251.216.38)
[12:47:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:47:58] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[12:48:12] *** Joins: mrig (~AdiIRC@user/mrig)
[12:52:14] *** Joins: strajder (~strajder@user/strajder)
[12:57:09] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:59:05] *** Joins: cadmio (~cadmio@151.25.143.75)
[12:59:10] <cadmio> Hello
[13:02:30] <darsie> Are variables defined in main global?
[13:03:49] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:03:50] <dave0> darsie: if you mean visible outside of main, no, unless you make a pointer and pass that
[13:04:04] <darsie> thx
[13:04:07] <dave0> and now i gotta go
[13:04:11] <darsie> cu
[13:04:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:10:42] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[13:11:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Quit: Leaving)
[13:13:28] *** Quits: nrl^ (~nrl@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[13:17:19] *** Joins: myon98 (~myon98@user/myon98)
[13:18:36] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:21:19] *** Parts: cadmio (~cadmio@151.25.143.75) (WeeChat 3.0)
[13:21:44] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[13:23:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:24:19] *** Quits: alch (~alch@151.38.189.206) (Quit: leaving)
[13:25:56] *** Quits: mahmutov (~mahmutov@37.155.41.41) (Ping timeout: 245 seconds)
[13:29:10] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 256 seconds)
[13:29:50] *** Joins: meator (~meator@user/meator)
[13:30:46] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:31:26] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[13:31:41] *** Joins: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp)
[13:31:44] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[13:31:48] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[13:32:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:33:07] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[13:35:47] *** Quits: meator (~meator@user/meator) (Ping timeout: 264 seconds)
[13:38:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:40:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:40:30] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[13:41:02] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:42:19] *** Joins: node1 (~node1@user/node1)
[13:43:01] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[13:43:51] *** Quits: system_error (~SystemErr@user/systemerror) (Remote host closed the connection)
[13:44:36] *** Joins: system_error (~SystemErr@user/systemerror)
[13:46:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e)
[13:53:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[13:54:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[13:55:02] *** Joins: meator (~meator@user/meator)
[13:56:18] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[13:56:22] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[13:57:53] *** Quits: rkta_ (~kt@62.113.246.111) (Quit: leaving)
[14:05:55] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[14:07:19] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:08:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:11:41] *** Joins: plastico (~plastico@neomutt/plastico)
[14:15:07] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[14:21:07] *** Joins: defiant (~defiant@user/defiant)
[14:21:25] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[14:23:50] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[14:25:35] *** Quits: meator (~meator@user/meator) (Ping timeout: 264 seconds)
[14:28:45] *** Joins: tinyweasel (~weasel@15.235.28.27)
[14:29:00] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:32:01] *** Joins: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[14:32:09] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:33:00] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:46] *** Joins: csrf (~csrf@user/csrf)
[14:34:58] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[14:35:49] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[14:36:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:37:44] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:38:34] *** Joins: node1 (~node1@user/node1)
[14:38:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Remote host closed the connection)
[14:39:17] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:41:46] *** Quits: Celelibi (celelibi@user/celelibi) (Ping timeout: 245 seconds)
[14:41:53] *** Joins: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de)
[14:46:31] *** Quits: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de) (Client Quit)
[14:48:23] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[14:49:50] *** Joins: Famine- (~Famine@user/famine)
[14:50:39] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Quit: leaving)
[14:51:17] *** Joins: Celelibi (celelibi@user/celelibi)
[14:52:28] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 256 seconds)
[14:56:22] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[14:57:44] *** Joins: missogra (~missogra@dynamic-077-006-020-145.77.6.pool.telefonica.de)
[14:59:52] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:01:25] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[15:01:52] *** Quits: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp) (Read error: Connection reset by peer)
[15:05:11] *** Joins: Atque (~Atque@user/atque)
[15:06:47] *** Quits: tinyweasel (~weasel@15.235.28.27) (Quit: quit)
[15:08:25] *** Joins: alch (~alch@151.36.165.187)
[15:10:00] *** Joins: ogis (~Android@mp76f1fbc3.ap.nuro.jp)
[15:11:20] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[15:20:09] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[15:24:41] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (Ping timeout: 245 seconds)
[15:25:20] *** Joins: arminweigl (~arminweig@sourcehut/user/arminweigl)
[15:32:42] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (Ping timeout: 256 seconds)
[15:34:24] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:45:09] *** Joins: arminweigl (~arminweig@sourcehut/user/arminweigl)
[15:47:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:52:08] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[15:53:08] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[15:54:04] *** Quits: wwilly (~wwilly@217.140.99.251) (Quit: Leaving)
[15:55:46] *** Joins: Klinda (~superleag@user/klinda)
[15:58:26] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Ping timeout: 245 seconds)
[15:59:04] *** Quits: ogis (~Android@mp76f1fbc3.ap.nuro.jp) (Read error: Connection reset by peer)
[15:59:44] *** Joins: ogis (~Android@mp76f1fbc3.ap.nuro.jp)
[15:59:45] *** Quits: ogis (~Android@mp76f1fbc3.ap.nuro.jp) (Max SendQ exceeded)
[16:00:02] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:01:05] *** Joins: geeknix_ (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e)
[16:02:00] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[16:02:08] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[16:06:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:08:30] *** geeknix_ is now known as geeknix
[16:11:13] *** Joins: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[16:11:27] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:15:24] *** Joins: bindu (~bindu@user/bindu)
[16:17:51] *** Joins: arminweigl_ (~arminweig@sourcehut/user/arminweigl)
[16:19:23] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (Ping timeout: 265 seconds)
[16:19:24] *** arminweigl_ is now known as arminweigl
[16:20:50] *** Joins: seninha (~seninha@user/seninha)
[16:25:58] *** Quits: andai (~andai@ip26-92-214-87.adsl2.static.versatel.nl) (Ping timeout: 260 seconds)
[16:26:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:27:56] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[16:28:10] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:28:25] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:29:47] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: The Lounge - https://thelounge.chat)
[16:30:41] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[16:31:31] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[16:32:25] *** Quits: cpuid (~cpuid@co5.at) (Quit: ZNC 1.8.2 - https://znc.in)
[16:33:15] *** Joins: cpuid (~cpuid@co5.at)
[16:38:53] *** Joins: Rounin (~david@84.212.130.215)
[16:42:47] *** Joins: meator (~meator@user/meator)
[16:44:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:44:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:46:39] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[16:46:45] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:47:30] *** Joins: nf (~n@monade.li)
[16:47:53] <Budd> If I read from a volatile (magic FIFO) memory address like this: uint16_t val = (fifo_reg << 16 | fifo_reg), is it guaranteed that the leftmost access will happen first?
[16:48:09] <Budd> Or should I split it into several statements to be explicit?
[16:51:55] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[16:52:43] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[16:54:13] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[16:55:42] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[16:58:37] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[16:58:51] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Ping timeout: 245 seconds)
[16:59:21] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[17:01:08] *** Joins: pulse (~pulse@user/pulse)
[17:02:59] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[17:04:10] *** Joins: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de)
[17:05:49] *** Joins: Everything (~Everythin@37.115.210.35)
[17:10:52] <fizzie> Evaluation order of most operators isn't specified (the exceptions being &&, ||, ?: and the comma operator), and volatileness of operands doesn't change that, so yes, you'd need to split it to several statements.
[17:11:37] <fizzie> Incidentally, `uint16_t val = anything << 16` seems a little odd.
[17:14:17] <fizzie> On the earlier topic, _Alignof only takes a parenthesized type name, not an expression. There's a few known mistakes in the C11 draft (corrected in the final version) that imply it could be applied to an expression, though the syntax in N1570 6.5.3p1 correctly shows it doesn't.
[17:17:15] *** Joins: smgt (~smgt@user/temjin)
[17:20:23] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[17:20:39] *** Joins: kish` (~aqua@user/aqua)
[17:23:34] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[17:23:55] *** Joins: kish` (~aqua@user/aqua)
[17:24:37] *** Joins: woh42 (~woh@120.158.143.114)
[17:24:57] <woh42> C is pretty good ey.
[17:25:57] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[17:26:50] <pragma-> s'alright.
[17:27:26] <woh42> One things that's really been annoying me is pointers to functions though
[17:28:03] <woh42> My compiler keeps thinking that I want a function that returns a pointer.
[17:28:45] <fizzie> That's just how the syntax-cookie crumbles.
[17:30:36] <fizzie> ,cc int (*p)(const char *) = puts; p("after enough head-banging, it'll start to feel perfectly natural");
[17:30:39] <candide> fizzie: after enough head-banging, it'll start to feel perfectly natural
[17:31:54] <woh42> wut, aight I was going about that all wrong
[17:32:08] <woh42> I'm just going to yoink that if you don't mind
[17:32:14] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Ping timeout: 260 seconds)
[17:32:28] <fizzie> ,cc int (*p(void))(const char *) { return puts; } p()("now *returning* a pointer to function, that'll never feel right");
[17:32:31] <candide> fizzie: now *returning* a pointer to function, that'll never feel right
[17:32:38] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[17:33:26] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 245 seconds)
[17:33:30] <woh42> my mind is blown, what...
[17:33:31] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:33:58] <fizzie> ,cc int (*p(void))(const char *) { return puts; } int (*(*q)(void))(const char *) = p; q()("and let's not even talk about pointers to functions returning pointers to functions");
[17:34:01] <candide> fizzie: and let's not even talk about pointers to functions returning pointers to functions
[17:34:23] <woh42> what the
[17:34:32] <Bou> How often do you really need such things anyway
[17:34:52] <woh42> idk, but I'm putting them everywhere now
[17:35:30] *** Joins: pulse (~pulse@user/pulse)
[17:35:38] <woh42> what's the void for?
[17:35:49] <fizzie> It's the parameter list of the function `p`.
[17:35:56] *** Joins: terminalpusher (~terminalp@2a01:586:9939:1:d0f8:58dc:2d55:7de2)
[17:35:57] *** Joins: mahmutov (~mahmutov@37.155.41.41)
[17:36:03] <fizzie> The `(const char *)` is the parameter list of the returned pointer-to-function type.
[17:36:44] <fizzie> I confess to using a `typedef int print_func(const char *); print_func *get_printer(void) { return puts; }` if I ever needed to actually write that.
[17:38:20] <woh42> huh, that's wild
[17:44:18] <woh42> So the name of the function without the () returns the address of the function?
[17:46:47] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[17:47:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[17:47:59] <woh42> Epic I got it
[17:48:02] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:48:17] *** Joins: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net)
[17:48:25] <woh42> I got a bunch of compiler warnings about the pointer not having a return type
[17:50:47] *** Parts: woh42 (~woh@120.158.143.114) ()
[17:51:03] *** Joins: bindu (~bindu@user/bindu)
[17:53:09] *** Quits: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net) (Ping timeout: 265 seconds)
[17:53:14] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[17:53:38] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[17:55:05] <nomagno> fizzie: any idea if there would be any issues with with replacing puts with printf there? The pointer type is technically incompatible, but would it be UB even if you didn't use the extra arguments?
[17:55:30] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[17:57:54] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[17:57:57] <Budd> fizzie: thanks for the detail on operator ordering; that's helpful.
[17:58:59] <fizzie> Yes, it's undefined to call a function through a "wrong" kind of function pointer.
[18:00:02] <fizzie> C11 6.5.2.2p9: "If the function is defined with a type that is not compatible with the type -- pointerd to by the expression that denotes the called function, the behavior is undefined."
[18:00:35] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:01:49] <fizzie> `printf` is defined with the type `int(const char *, ...)` and that's not compatible with `int(const char *)`, because (6.7.6.3p15) for two function types to be compatible, "the parameter lists, if both are present, shall agree -- in use of the ellipsis terminator; --". Among other things.
[18:02:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:02:33] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:03:50] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:04:11] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:04:34] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:04:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.3)
[18:05:22] *** Joins: Klinda (~superleag@user/klinda)
[18:06:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:06:21] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:06:35] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:07:46] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:08:36] *** Joins: nyah (~nyah@94.6.71.219)
[18:09:11] *** Joins: korg815 (~korg815@user/korg815)
[18:12:16] <johnjay> yeah (const char *) is a little vague to me
[18:12:25] <johnjay> but generally if it looks function-like it is
[18:12:53] <Budd> Is there an elegant way to convert two bytes to a (signed) int16_t? I'm currently bit-shifting them to a uint16_t, then type-punning, but it's a bit ugly.
[18:12:58] <johnjay> nitrix: what did you mean the compiler would easily see through !!x?
[18:13:04] <johnjay> like it would optimize it away?
[18:18:36] *** Joins: magla (~gelignite@55d41163.access.ecotel.net)
[18:18:52] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[18:19:29] *** Joins: shivesh (~shivesh@user/shivesh)
[18:19:45] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[18:20:24] *** Joins: luckyxxl (~luckyxxl@193.27.14.20)
[18:21:13] *** Joins: cousteau (~cousteau@user/cousteau)
[18:21:24] *** Parts: darsie (~darsie@84-113-55-200.cable.dynamic.surfer.at) (No boundaries on the net!)
[18:28:49] <fizzie> Budd: I don't think there's anything better. Sometimes you see `s16 = (u16 & 0x7fff) - (u16 & 0x8000);` for the final conversion, which I think is strictly conforming with a large enough `int` type (so that the operands promote to `int` and both `u16 & 0x8000` and `-(u16 & 0x8000)` can be represented in it).
[18:29:14] <fizzie> There's also some definitely strictly conforming ways that are more like `s16 = u16 & 0x7fff; if (u16 >= 0x8000) s16 += (int16_t) -32768;` but IIRC (someone was experimenting here), those don't tend to turn into no-ops even on systems where the conversion needs no actual code.
[18:30:32] <fizzie> (That deliberately used -32768 rather than -0x8000, which aren't necessarily the same.)
[18:31:45] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[18:34:08] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[18:35:45] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:36:10] <johnjay> meaning -0x8000 might be 0x8000 in two's complement with 32 bits?
[18:36:25] <johnjay> or rather i guess -0x8000
[18:36:37] *** Joins: bud (~bud@user/bud)
[18:38:28] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[18:38:47] <fizzie> The 0x8000 might get the type `unsigned int`, in which case -0x8000 would stay nonnegative. But 32768 will always get a signed integer type. The typing rules are different for decimal vs. hexadecimal constants. And the `-` is not part of the constant, it's just an unary operator.
[18:39:19] <fizzie> ,cc __typeof__(-2147483648) a = 0; __typeof__(-0x80000000) b = 0; ptype(a); ptype(b);
[18:39:21] <candide> fizzie:  a = long   b = unsigned int
[18:39:34] <fizzie> ,cc __typeof__(-2147483648) a = -2147483648; __typeof__(-0x80000000) b = -0x80000000; // and the values
[18:39:37] <candide> fizzie: no output: b = 2147483648; a = -2147483648
[18:39:56] *** Quits: i336 (~i336@121.216.192.215) (Ping timeout: 246 seconds)
[18:40:18] <johnjay> >typing rules are different for decimal vs hexadecimal
[18:40:42] <johnjay> gee i wonder why people find c frustrating.
[18:42:06] <fizzie> C11 6.4.4.1p5, for the record. An unsuffixed decimal constant will be the first of `int`, `long` or `long long` that can represent the value; an unsuffixed octal or hexadecimal constant will be the first of `int`, `unsigned`, `long`, `unsigned long`, `long long` or `unsigned long long` that can do so.
[18:42:30] <Guest42> what is an example of a problem where cache miss performance is important?
[18:42:48] <Guest42> I'm looking for a rather simple problem I can implement naively in under 50 lines or code or so, and that could hugely benefit from cache optimization
[18:43:03] <Guest42> just to demonstrate techniques
[18:43:12] <johnjay> so -0x8 is just applying two's complement to an unsigned
[18:43:26] <johnjay> as opposed to "actually" negating it
[18:44:33] <johnjay> is there some logic behind trying int, then unsigned int, then long, then unsigned long in that order?
[18:44:41] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:46:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:46:40] *** Joins: i336 (~i336@121.217.100.71)
[18:47:18] <fizzie> The corresponding unsigned type is usually the "next larger" type from its signed counterpart in terms of the range of representable nonnegative values.
[18:47:51] <fizzie> So if something doesn't fit in an `int`, `unsigned int` makes sense as the next alternative.
[18:48:09] <johnjay> sure. but i can't think of a benefit to that concretely
[18:48:26] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:48:29] <johnjay> i guess that means you have to specify what you mean always with hexadecimal
[18:49:16] <johnjay> like you could have an expression 0x1 + 0x2 and one of them be signed and the other unsigned
[18:49:27] *** Joins: Viewday111 (~Viewday@user/viewday)
[18:49:44] <fizzie> Not with *those* values, but sure.
[18:50:01] <fizzie> I imagine the practical reason is just that people like to write hex and octal constants in contexts where unsigned types are what they want. Like in `if (flags & 0x8000)` and so on.
[18:50:11] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 264 seconds)
[18:50:19] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[18:50:54] <fizzie> In fact, I think the (C99) rationale document touches on that...
[18:51:28] * johnjay sighs
[18:51:29] <Bou> Guest42: try filling a char[1000] array 1000000 times, and then fill a char[1000000] array 1000 times
[18:51:34] <fizzie> "Unlike decimal constants, octal and hexadecimal constants too large to be `int`s are typed as `unsigned int` if within range of that type, since it is more likely that they represent bit patterns or masks, which are generally best treated as unsigned, rather than 'real' numbers."
[18:51:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:51:36] *** Viewday111 is now known as Viewday11
[18:51:41] <johnjay> so there's not just the standard itself but rationale documents??
[18:52:00] <Bou> Guest42: it's the same number of bytes but the former will be faster as it fits in L1 cache
[18:52:29] <fizzie> Yes, but the rationale is entirely non-normative. It's just explaining the reasoning behind (some of) the choices the standard made.
[18:52:49] <johnjay> evidently given the decisions that are being made that's critical to have
[18:53:10] <johnjay> like if my code is going to crash or not based on some arbitrary decision about type conversion. i need to know about it
[18:53:47] <fizzie> Well, no, you don't need to know *why* the decision about type conversion was made for that, you just need to know what it is.
[18:54:46] <johnjay> i mean. if that decision is in isolation maybe
[18:55:26] <johnjay> honestly i learn a lot more about C from talking to people and finding out things it "shouldn't" be doing than reading just the standard itself
[18:56:02] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[18:57:57] *** Joins: quartz (~quartz@user/quartz)
[18:58:05] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[18:59:09] *** Quits: system_error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[18:59:42] <Guest42> Bou: I do understand the basic aspects, what I'm looking for is an example of "real problem" where I can try my hand at applying techniques like blocking to see how much performace I can expect to squeeze out
[19:00:32] <Guest42> Bou: something like conway's game of life for example ...
[19:00:49] <Guest42> (I see you're on #programming too x))
[19:02:52] *** Quits: magla (~gelignite@55d41163.access.ecotel.net) (Quit: Stay safe!)
[19:05:01] <Bou> well then implement Conway's Game of Life with a 250x250 byte (~61 kB) grid and try it again on a 300x250 (73 kB) grid
[19:05:34] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[19:05:35] <Bou> how much slower will the 73 kB one be? it's 20% bigger but will probably run way slower because of the cache misses
[19:06:46] *** Quits: alch (~alch@151.36.165.187) (Ping timeout: 245 seconds)
[19:06:54] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[19:07:01] *** Joins: johnjay (~pi@192.142.100.50)
[19:07:05] <floatcomplex> sparse grid is sparse
[19:07:21] *** Joins: soul-d (~uknown@user/soul-d)
[19:07:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:07:56] <Bou> sure but let's assume a dumb implementation that checks each cell
[19:08:39] *** Joins: alch (~alch@151.36.24.120)
[19:08:44] <floatcomplex> octree of 8x8 grids implemented as uint64_t's
[19:08:54] <floatcomplex> quadtree rather
[19:11:19] *** Parts: smgt (~smgt@user/temjin) ()
[19:12:49] *** Joins: beencubed (~beencubed@209.131.238.248)
[19:15:47] *** Joins: meator (~meator@user/meator)
[19:16:13] *** Joins: dohtem (uid524096@user/dohtem)
[19:16:54] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[19:18:09] *** Joins: system_error (~SystemErr@user/systemerror)
[19:18:26] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[19:21:13] *** Quits: bud (~bud@user/bud) (Quit: Leaving)
[19:21:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[19:21:42] <Guest42> Bou: how would that be optimized really? there is a lot of busy logic I think
[19:22:21] *** Quits: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de) (Quit: Client closed)
[19:23:34] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[19:23:38] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:26:27] <Bou> I just meant to say that data that gets reused a lot benefits from fitting in cache
[19:26:44] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[19:28:26] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[19:29:49] *** Joins: hinata (~hinata@2405:204:9310:7c00:d5:5b46:585a:fb0d)
[19:30:29] *** Joins: johnjay (~pi@192.142.100.50)
[19:31:21] <DPA> Is there any way in C to, instead of just telling the compiler I won't change some data (const), that that data actually can not be changed by anyone (so it can cache as much as it likes)?
[19:31:21] <DPA> I can copy things in a local variable, and then just use that, but it becomes hard to read with a lot of them.
[19:31:37] *** Quits: nullptr| (~nullptr@user/nullptr/x-2182142) (Ping timeout: 268 seconds)
[19:31:57] *** Joins: node1 (~node1@user/node1)
[19:32:25] *** Joins: rgrinberg (~textual@152.231.136.22)
[19:32:29] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[19:32:38] *** Quits: hinata (~hinata@2405:204:9310:7c00:d5:5b46:585a:fb0d) (Client Quit)
[19:34:23] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:35:00] <fizzie> It's not exactly that, but it's kind of what a `const T * restrict ptr` would express -- it says the object that `ptr` points at cannot be changed through that pointer, but also that all accesses to the object are only through that pointer.
[19:35:28] <fizzie> How much of an effect that would have on optimizations is of course up to the implementation.
[19:38:23] <DPA> But in that case, I shouldn't have more than 1 pointer to that data, and shouldn't compare such pointers or read from different ones pointing to the same thing, and so on, right?
[19:39:33] *** Joins: monkey_ (~user@190.104.116.153)
[19:41:04] <DPA> And I don't think it allows for any additional assumptions when threads are involved either, does it?
[19:41:49] *** Joins: pert (~pert@fsf/member/pert)
[19:44:25] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[19:44:40] <cousteau> DPA: you have `restrict` for "assume this memory space can only be accessed through this pointer (by this program)"
[19:45:03] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:47:01] <cousteau> `const` means "this part of the program can't modify this variable"; `restrict` means "other parts of the program/thread won't modify this (pointed) variable"; and `volatile` means "other things external to this thread/program MAY modify this variable"
[19:47:09] <cousteau> (maybe I'm oversimplifying it)
[19:47:33] <DPA> Interesting. I always though it was only about what happens inside the function and functions it calls.
[19:47:50] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Remote host closed the connection)
[19:47:53] <cousteau> which one?  const or volatile?
[19:48:00] <DPA> restrict
[19:48:33] <johnjay> Bou: i tried your example but it doesn't show a difference for me
[19:48:53] <cousteau> well, same thing; the variable won't be modified by anything outside of the current function while the function is being executed
[19:49:15] <cousteau> (unless threads are involved, hence why I said "this program/thread"
[19:49:18] <cousteau> )
[19:49:18] <johnjay> i have an i5 with 4x32KB L1 data cache here
[19:49:24] <johnjay> https://paste.debian.net/1219495/
[19:49:35] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Quit: leaving)
[19:49:51] <DPA> I always thought it means "no other thing in this function should point to the same thing"
[19:50:26] <cousteau> well, you could create another pointer and assign it the value of that pointer, so you have two pointers pointing to the same thing; I think that would be perfectly valid
[19:50:44] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:51:46] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 245 seconds)
[19:52:00] <fizzie> Yes, that other pointer would still be "based" on the original pointer.
[19:52:40] <cousteau> restrict is useful for example if you do something like   for (i=0; i<size; i++) B[i] = A[i];   which you might think that can be replaced with a memcpy/memmove, but not always can
[19:54:18] <fizzie> (Also, the requirements for `restrict` allow you to *read* the same object's value via other means, as long as it is not modified by anything.)
[19:56:02] <fizzie> (C11 6.7.3.1p4: "During each execution of B, let L be any lvalue that has &L based on P. If L is used to access the value of the object X that it designates, and X is also modified (by any means), then the following requirements apply: [rest of the rules].")
[19:56:53] <cousteau> ,cc void copy_bytes(char *B, const char *A, size_t size) { for (size_t i = 0; i < size; i++) B[i] = A[i]; }  char A[12] = "hello world", B[12];  copy_bytes(B, A, 12);
[19:56:56] <candide> cousteau: no output: B = "hello world"; A = "hello world"
[19:57:10] <cousteau> Looks like that function is equivalent to memmove, doesn't it?
[19:57:13] <cousteau> But now observe:
[19:57:30] <cousteau> ,cc void copy_bytes(char *B, const char *A, size_t size) { for (size_t i = 0; i < size; i++) B[i] = A[i]; }  char A[12] = "hello world";  copy_bytes(A+1, A, 10);
[19:57:33] <candide> cousteau: no output: A = 'h' <repeats 11 times>
[19:57:41] <cousteau> ugh
[19:57:52] <cousteau> ,cc void copy_bytes(char *B, const char *A, size_t size) { for (size_t i = 0; i < size; i++) B[i] = A[i]; }  char A[12] = "hello world";  copy_bytes(A+1, A, 10);  printf("%s", A);
[19:57:54] <candide> cousteau: hhhhhhhhhhh
[19:58:01] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[19:58:03] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:58:35] <cousteau> You may have expected A to be "hhello worl" (first 10 chars shifted right 1 position"; what happened?  Order matters, that's what.
[19:58:43] *** Joins: magla (~gelignite@55d41163.access.ecotel.net)
[19:58:59] <cousteau> So that function can't and won't be optimized to a memcpy.
[20:00:07] <cousteau> Even if you don't call it the way I showed you, the compiler still has to decide what to compile that function to, and it can't just replace it with a convenient memcpy.
[20:00:13] *** Joins: johnjay (~pi@192.142.100.50)
[20:00:44] *** Joins: Klinda (~superleag@user/klinda)
[20:00:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:01:48] <cousteau> BUT, if you add `restrict` to the pointers, the compiler CAN replace it with a call to memcpy.
[20:02:29] *** Joins: seninha (~seninha@user/seninha)
[20:02:46] <cousteau> Maybe my description wasn't accurate.  This is better:   const: the data cannot be modified *through this reference*.  restrict: the data cannot be modified *through another reference*.
[20:03:04] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 268 seconds)
[20:05:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[20:06:33] *** Joins: johnjay (~pi@192.142.100.50)
[20:07:23] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Ping timeout: 268 seconds)
[20:08:15] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[20:08:51] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[20:09:50] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:11:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[20:12:34] *** Joins: Hercules (~Hercules@user/hercules)
[20:14:01] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[20:14:44] *** Joins: alioui (~medeva293@197.3.137.211)
[20:14:56] *** Joins: linguist (~autistic@user/linguist)
[20:15:01] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[20:15:08] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:15:22] *** Joins: begriffs (~begriffs@user/begriffs)
[20:16:22] <alioui> hi all, i have this wierd error from execl function errno = 14 , strerror(errno) = Bad address
[20:16:30] <alioui> any idea why
[20:16:48] <fizzie> Missing the NULL terminator of the argument list, perhaps.
[20:17:07] <pragma-> any idea? Oh, just a guess, but you might have a bad address there.
[20:17:08] *** Parts: Nspace (~Nspace@user/nspace) ()
[20:18:05] *** Joins: monkey_ (~user@190.104.116.153)
[20:18:35] <pragma-> smh, guess I should detect exec*() and skip running gdb there too.
[20:19:31] <alioui> Null is present 
[20:19:49] <alioui> and why gdb since it is a simple function call
[20:19:57] <alioui> gdb is an overkill
[20:20:14] <alioui> arg are a valid string
[20:20:29] <alioui> and return value make no since
[20:20:46] <fizzie> Well, strace it and see what exactly ends up in the system call. Or share an example that reproduces the problem.
[20:21:39] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[20:23:15] <alioui> thanks a lot i solved 
[20:23:25] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[20:23:26] <alioui> one of args was not a string
[20:24:22] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:24:58] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:25:08] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:28:06] *** Joins: monkey_ (~user@190.104.116.153)
[20:30:37] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d01f-a3d3-6b92-da96.res6.spectrum.com)
[20:30:55] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:31:51] <Bou> johnjay: hm, `funca` is faster for me (4.1 seconds versus 4.4)
[20:32:37] *** Joins: plastico1 (~plastico@neomutt/plastico)
[20:33:23] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 264 seconds)
[20:35:18] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[20:37:16] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[20:42:35] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[20:43:14] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[20:43:23] *** Quits: plastico1 (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[20:46:52] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[20:47:22] *** Joins: plastico (~plastico@neomutt/plastico)
[20:48:49] *** Joins: jurjen (~jurjen@89-200-15-28.mobile.kpn.net)
[20:51:12] *** Quits: alioui (~medeva293@197.3.137.211) (Ping timeout: 260 seconds)
[20:53:31] *** Quits: jess (~jess@libera/staff/jess) ()
[20:57:02] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:57:15] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:57:18] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 265 seconds)
[20:58:43] <linguist> Hello! Is there anything like SCNx8 for scanning a string into a size_t?
[21:01:19] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[21:02:08] <cousteau> pretty sure there is, let me check
[21:02:35] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[21:02:47] <cousteau> ah no, size_t just uses the z modifier
[21:02:53] <cousteau> %zx
[21:03:30] <linguist> Ohhh, thanks cousteau 
[21:03:38] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[21:04:39] <cousteau> you only need the SCN* macros for things that don't already have their own modifier, such as uint32_t, which is typedef'd to unsigned int (for example), but you don't know this because that's an implementation-specific detail
[21:05:16] <fizzie> Fun fact: for uintmax_t there's both a macro (SCNuMAX) *and* a dedicated length modifier ('j').
[21:05:36] <cousteau> fizzie: yep, was going to say that
[21:05:56] <linguist> Ohhhh, I see, thanks 
[21:05:57] <fizzie> ,expand #include <inttypes.h> SCNuMAX // just checking
[21:05:58] <candide> fizzie:  "l" "u"
[21:06:03] <fizzie> Doesn't even use it.
[21:06:34] <cousteau> probably predates the j
[21:06:41] <cousteau> and was around there in a draft or something
[21:07:06] <cousteau> also, guess it's better not to use it if it can be avoided, for potential backwards compatibility
[21:08:21] <linguist> ,cc size_t a; sscanf("25", "%zx", &a); printf("%d", (int) a);
[21:08:24] <candide> linguist: 37
[21:09:01] <cousteau> conversely, you may also print the size_t as %zu
[21:09:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[21:09:06] <cousteau> (or %zx for hex)
[21:09:47] <linguist> Ohhh, okay, I think I'm getting it now 
[21:10:07] <linguist> ,cc size_t a; sscanf("25", "%zu", &a); printf("%u", (unsigned int) a);
[21:10:10] <candide> linguist: 25
[21:10:23] *** Joins: rsjw (~quassel@user/rsjw)
[21:10:23] <linguist> I love this bot 
[21:10:34] <cousteau> yeah, sorry for the confusion.  You mentioned SCNx8 so I assumed you wanted hex
[21:10:38] <fizzie> "%zd" and "%tu", the almost-impossible-to-use formats (since there's no names for the relevant types).
[21:11:19] <linguist> Ohhh, I mentioned because it's the only one I knew for an example, sorry, fault on my end 
[21:11:55] <cousteau> yeah I mean it was an example
[21:12:07] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[21:13:44] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:14:02] *** Joins: AmR (~AmREiSa@156.199.219.108)
[21:14:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d01f-a3d3-6b92-da96.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:15:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:15:49] *** Joins: Narrat (~omnius@p200300df5f399f5d06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:16:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:17:45] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[21:19:12] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[21:19:38] *** Joins: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[21:20:48] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: Client closed)
[21:21:30] *** kfv_ is now known as kfv
[21:24:21] *** Joins: masterbuilder (~user@user/masterbuilder)
[21:29:17] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[21:29:38] *** Joins: kish` (~aqua@user/aqua)
[21:31:42] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:33:58] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 260 seconds)
[21:34:15] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[21:35:00] *** Quits: missogra (~missogra@dynamic-077-006-020-145.77.6.pool.telefonica.de) (Quit: Leaving)
[21:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[21:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[21:36:58] *** Joins: skapata (~Skapata@user/skapata)
[21:39:28] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[21:39:49] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[21:41:09] *** Joins: Klinda (~superleag@user/klinda)
[21:43:42] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[21:45:45] <linguist> Does candide have a command to find where some macro or variable is defined? i.e. if I wanna know what to #include
[21:46:44] <pragma-> the gdb `info` command used to work for that.
[21:47:08] <pragma-> but since the latest fedora system upgrade, gdb hasn't been cooperating very nicely.
[21:48:32] *** Quits: rsjw (~quassel@user/rsjw) (Ping timeout: 265 seconds)
[21:49:35] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 264 seconds)
[21:49:52] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:51:00] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214)
[21:51:24] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[21:51:45] <linguist> I'm kinda struggling to find IFNAMESIZ, problem is, I ran a grep on /usr/include and found nothing 
[21:51:55] <twkm> ctags?
[21:52:00] <twkm> cscope?
[21:52:00] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[21:52:09] <cousteau> If grep can't find it, maybe google can
[21:52:12] <twkm> most ide's.
[21:52:42] <linguist> The man pages for socket(7) mention it, but doesn't mention where it is or what it is (judging by the name I'd guess a macro)
[21:52:47] <linguist> Ohhhh great idea
[21:53:55] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[21:54:37] <cousteau> I just searched for "IFNAMEISZ" and got 0 results :(
[21:55:06] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214) (Ping timeout: 245 seconds)
[21:55:11] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[21:55:26] <cousteau> where did you find that macro?
[21:55:43] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:56:02] <pragma-> cousteau: try ifnamsiz
[21:56:07] <linguist> There's a typo there, it's IFNAMSIZ
[21:56:21] <linguist> It's mentioned in the socket(7) man page
[21:56:39] <linguist> In the docs of SO_BINDTODEVICE
[21:56:47] <pragma-> include/linux/if.h apparently
[21:57:14] <cousteau> oh, SIZ, not ISZ, duh
[21:57:27] <pragma-> nam instead of name too
[21:57:29] <cousteau> I trust my ability to read more than I should
[21:57:33] <pragma-> characters are expensive, you know
[21:57:36] * pragma- pats creat()
[21:57:53] <cousteau> linguist: it's OK, I added a typo of my own, so I googled something with two typos
[21:59:26] <linguist> Ohhhh, I had a typo too
[21:59:33] <linguist> That's why grep wouldn't find it
[21:59:43] *** Joins: korg815 (~korg815@user/korg815)
[22:00:00] <linguist> Problem solved, thanks a lot
[22:00:25] <cousteau> arguably not your fault; shortening "name" to "NAM" is kind of absurd
[22:01:42] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.16)
[22:02:12] *** Joins: eson123 (~eson123@118.69.128.37)
[22:02:16] <pragma-> create() wasn't too long for ancient C's limits, but they still shortened it to creat().
[22:02:37] <eson123> is it possible to have a condtional checking at compile time through preprocessing ? #ifdef is cool but it doesn't check the inner value as well
[22:03:24] <pragma-> perhaps you want a static assertion
[22:03:42] <cousteau> sounds a lot like static assertion, yes
[22:03:45] <quartz> Hello, I'm trying to write a simple program that prompts the user to enter an integer, that is to be used as a port number. The port number is used for netcat, which will connect to a server that stores a series of simple text messages. These are the very simple directions: https://bpa.st/B43A   and this is the code I wrote: https://godbolt.org/z/WqTKaza3P   However, the while loop at line 43 never gets
[22:03:47] <quartz> executed, and I don't know why. Can anyone help?
[22:04:19] <cousteau> but only for like constant values.  Values that are assigned at runtime cannot be checked at compile time, obviously.
[22:04:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.16) (Client Quit)
[22:06:39] *** Joins: node1 (~node1@user/node1)
[22:08:41] <eson123> Hm, that looks good
[22:08:45] *** Parts: f1refly (~f1refly@p200300d02f2242fc05c4fb22fc4e3204.dip0.t-ipconnect.de) (WeeChat 3.3)
[22:09:10] *** Quits: rgrinberg (~textual@152.231.136.22) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:10:52] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[22:10:57] <cousteau> quartz: why are you calling waitpid() twice?
[22:11:09] <pragma-> quartz: what do you think the waitpid on line 40 does?
[22:11:26] <linguist> Indeed, this naming doesn't help, and according to Google I found out that more people did the same typo too
[22:11:31] <quartz> Uhhh
[22:11:40] <cousteau> linguist: haha
[22:12:01] <quartz> pragma-: The waitpid() on line 40 is used to check if waitpid fails
[22:12:29] <quartz> cousteau: You mean on line 40 and 43?
[22:12:33] <cousteau> yes
[22:12:39] *** Joins: rgrinberg (~textual@152.231.136.22)
[22:12:56] <eson123> but static assertion is a bit like alerting error if the condition is not satisfied 
[22:13:01] <cousteau> won't the waitpid at 40 wait for the child to finish, and thus the one at 43 won't report any child?
[22:13:06] <eson123> what i am trying to do is to unset or set a section of code if a value is true 
[22:13:09] <eson123> or false
[22:13:41] <cousteau> eson123: you'll have to use if ()
[22:14:10] <cousteau> if it's constant at compile time, the compiler will optimize out the section of code that doesn't get executed
[22:14:15] <quartz> cousteau: Oh I think you're right.
[22:14:29] <quartz> OK I'll try to delete that if statement line 40
[22:14:46] <eson123> cousteau: yea but that section of code will be called a lot tho, so too many if() doesn't seem very optimized 
[22:14:50] <eson123> unless it's madantory 
[22:15:14] <cousteau> the compiler will also remove the call to if () if it's always true
[22:15:26] <eson123> oh that's cool
[22:15:47] <cousteau> alternatively, redesign the function so that the if is only called once, or have two functions
[22:15:48] <eson123> must be a new implementation... or a really old one that i just knew about :P
[22:16:37] <cousteau> I mean, if the test expression is a compile time constant, there's no point in testing for it
[22:17:29] <eson123> but wait, i thought it would remove the call to if() if it's always false
[22:17:41] <eson123> that kinda makes more sense
[22:17:49] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[22:18:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[22:20:08] *** Quits: rgrinberg (~textual@152.231.136.22) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:21:20] <cousteau> https://gcc.godbolt.org/z/T6vWe98e4
[22:21:28] <linguist> Just a detail on your prompt: it's going to print a lot of stuff after that fprintf by the beginning of the loop
[22:22:09] <cousteau> with -O0, that tiny function is stupidly long, and the check for x is performed
[22:22:25] <cousteau> with -O1, the function is simplified a lot, and the check is not performed; it's const after all
[22:23:09] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[22:23:15] *** Quits: Brewster (~Brewster@user/brewster) (Remote host closed the connection)
[22:24:11] *** Quits: luckyxxl (~luckyxxl@193.27.14.20) (Quit: bye)
[22:24:50] <cousteau> oh god, the assembly code with -O0 is really horrible.  Like it's pushing and popping the stack or something.
[22:25:00] *** Joins: Brewster (~Brewster@104.145.226.5)
[22:25:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d4dc-95a8-783c-f257.res6.spectrum.com)
[22:26:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[22:27:19] <fizzie> No, it's just loading from and storing to, and it has to to obey what GCC guarantees for -O0, namely that between each *statement*, the memory locations reserved for variables (like `p`) contain the values they have in the abstract machine.
[22:27:26] *** Joins: p0g0 (~p0g0@64.45.183.0)
[22:27:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[22:27:56] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:50e8:bc6a:72eb:1143) (Quit: simon323)
[22:28:07] <cousteau> ugh, so it HAS to put everything in memory
[22:28:36] <fizzie> Okay, loading the value of `p` twice from memory isn't strictly speaking required, I don't think.
[22:30:58] <fizzie> "-O0: Reduce compilation time and make debugging produce the expected results."
[22:31:02] <fizzie> There's some documentation somewhere that expands the "make debugging produce the expected results" mention to say something about round-tripping all values to memory between each statement that I can't find right now.
[22:31:37] <cousteau> I believe you
[22:31:57] <johnjay> Bou: i didn't measure exactly
[22:32:10] <johnjay> i was hoping for something more than a 10% difference
[22:32:43] <fizzie> `-Og` doesn't do that even thought it's "optimized for debugging", but I guess the idea is that you're supposed to use a more clever debugger too.
[22:32:52] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[22:33:36] *** Joins: rsjw (~quassel@user/rsjw)
[22:33:38] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[22:34:44] <Bou> johnjay: it's tricky writing a benchmark like that, for example your CPU does prefetching when you access memory linearly
[22:35:16] <johnjay> i see
[22:35:56] <Bou> johnjay: this should work better: https://godbolt.org/z/sPvj11xGn
[22:36:41] <Bou> (ignore the comment, I changed 100 million to 50 to keep Godbolt from timing out)
[22:37:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e) (Ping timeout: 245 seconds)
[22:38:09] *** Joins: HardWall (~NeckLek@89.137.113.39)
[22:38:21] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[22:39:02] <johnjay> you're writing a lot to the first 1000 elements vs the first 10 million elements?
[22:40:19] <johnjay> oh i think i see. meaning the entire 1000 elements are in a cache line
[22:40:36] <johnjay> whereas you can't keep 10 million bytes in a cache line
[22:41:21] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[22:41:48] *** Joins: superdupond (~Kev@2a01cb0400149f00c866202855143f20.ipv6.abo.wanadoo.fr)
[22:41:55] <cousteau> that's a damn big line; I thought they were usually 64 bytes or so
[22:41:59] <Bou> a cache *line* is something different (cache is managed in blocks of, typically, 64 bytes, that's a cache line) but yeah
[22:42:16] <johnjay>  oh right
[22:42:33] <johnjay> so when it says i have a 32KB L1 cache then the lines are probably like 32 or 64
[22:42:41] <cousteau> maybe a page though.  4096 bytes per page sounds reasonable
[22:42:54] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[22:43:52] <johnjay> so the reason the first example fails
[22:44:08] <johnjay> it's because you're saying it's prefetching the subsequent bytes?
[22:44:34] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[22:44:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:45:04] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[22:45:04] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[22:45:04] *** Joins: skapata (~Skapata@user/skapata)
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:46:36] <johnjay> hmm i tried 500 mil and i got like. 8.4 sec vs 8.46 sec for your second one lol
[22:46:38] <johnjay> yeah this is tough
[22:46:47] <cousteau> well, it fetches them once
[22:47:03] <cousteau> not all of them at the same time (as would happen with cache lines)
[22:47:30] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:35] <cousteau> but they end up eventually being fetched
[22:48:02] <cousteau> this doesn't happen with the 50 million numbers, which won't fit in the cache
[22:48:30] <cousteau> so every time you fetch a random number, it is most likely not in cache (cache miss)
[22:48:41] *** Joins: lightyear_ (~lightyear@c-24-30-27-91.hsd1.ga.comcast.net)
[22:49:27] <johnjay> task manager says my L1 cache is 256KB not 4x32KB
[22:49:45] <johnjay> maybe it just adds the instruction and data together lol
[22:49:53] <cousteau> oh yeah that could be
[22:50:00] <Bou> yes Windows task managers adds all the cores together
[22:50:22] * pragma- stares at Bou
[22:50:47] <cousteau> no idea how it's like in a PC, but in the embedded systems I've toyed with, L1 had separate data and instruction caches
[22:50:48] <Bou> what did I do now
[22:52:24] <cousteau> so if this is a 4-core, and each core has 32K data + 32K instruction L1 caches... yeah, it adds up
[22:52:49] <cousteau> ,qalc (32+32) × 4
[22:52:49] <candide> cousteau: (32+32) × 4 = 256
[22:53:28] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:54:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:55:15] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[22:55:16] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[22:56:29] <tusko> ,cc printf("Thanks for the wonderful tea party!")
[22:56:31] <candide> tusko: Thanks for the wonderful tea party!
[22:56:56] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:01:50] <quartz> cousteau: I'm sorry but when I delete line 40, the program does not work correctly for some reason. I get this very strang output: https://bpa.st/2MMA    I want it to prompt the user for a port number, run ncat (so there should be a new line), CTRL + C should end that process, and if CTRL + C is pressed, it should return the user to the "port number: " prompt. 
[23:02:36] <quartz> Pressing CTRL + C should end the program from the prompt, but pressing enter should just prompt the user again for a port number. I think there is something wrong with the way I'm forking the process, although I"m not sure.
[23:03:04] *** Joins: chair1 (~bbs@187.109.18.204)
[23:03:54] <twkm> ewww, intr.
[23:04:04] *** Quits: alch (~alch@151.36.24.120) (Read error: Connection reset by peer)
[23:04:05] <quartz> Oh sorry this is the code again: https://godbolt.org/z/KajjTP4dG and directions: https://bpa.st/B43A
[23:04:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:06:40] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[23:06:55] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:08:31] <Budd> Wihh the entire statement 'volatile_variable;' with no operators cause a read of the memory address (it has side effects on this platform)?
[23:08:42] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[23:09:05] *** Joins: alch (~alch@151.36.34.214)
[23:09:37] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[23:10:43] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[23:11:11] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 264 seconds)
[23:13:24] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:13:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d4dc-95a8-783c-f257.res6.spectrum.com) (Ping timeout: 260 seconds)
[23:13:41] <cousteau> that's a good question; I think you might need to cast it to (void), at least to calm down the compiler
[23:14:43] <fizzie> C11 6.7.3p7: "What constitutes an access to an object that has volatile-qualified type is implementation-defined." Not that I have any suggestions how to more explicitly express "please read this".
[23:15:01] <twkm> it should read the variable, discarding what was yielded.
[23:15:19] <cousteau> ,c11 6.8.3p2
[23:15:19] <candide> http://www.iso-9899.info/n1570.html#6.8.3p2 [Expression and null statements] The expression in an expression statement is evaluated as a void expression for its side effects.153) FOOTNOTE.153 Such as assignments, and function calls which have side effects.
[23:16:08] <cousteau> the footnote doesn't say anything about simply mentioning the variable name, but I guess that'd qualify too
[23:16:33] <cousteau> (although, as fizzie pointed out, the implications of `volatile` are basically implementation-dependent)
[23:18:56] *** Quits: jurjen (~jurjen@89-200-15-28.mobile.kpn.net) (Read error: Connection reset by peer)
[23:19:04] <fizzie> Since it's implementation-defined, the implementation does have to document it, though. Here's one implementation doing so: https://gcc.gnu.org/onlinedocs/gcc/Qualifiers-implementation.html
[23:19:06] <fizzie> "In most expressions, it is intuitively obvious what is a read and what is a write."
[23:19:16] *** Quits: piku (~piku@47.202.122.99) (Ping timeout: 245 seconds)
[23:19:39] <fizzie> Later on, though, there's an example of a statement that's just `*src;`.
[23:20:15] <fizzie> (For a `volatile int *src;`)
[23:20:31] *** Quits: terminalpusher (~terminalp@2a01:586:9939:1:d0f8:58dc:2d55:7de2) (Remote host closed the connection)
[23:21:06] *** Joins: piku (~piku@47.202.122.99)
[23:22:51] <cousteau> and then adds, "if it's a scalar thing or a struct with a single member (which is a scalar type), then it reads the thing; but if it's an array, then no it doesn't evaluate the whole array or something lol"
[23:23:00] <cousteau> (not with those exact words)
[23:23:41] <cousteau> so  volatile int arr[3];  --> `arr[0];` would read the object, but `arr;` wouldn't
[23:24:28] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:26:47] <Budd> Thanks everyone! This is an RP2040 - I can check the SDK source to see how they do it.
[23:27:48] <Budd> Though I guess it's really GCC's behavior that I need to know.
[23:29:12] <cousteau> indeed it is
[23:29:20] <cousteau> (well, assuming GCC is your compiler)
[23:29:30] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[23:29:52] <Budd> Since it's a volatile uint32_t, it looks like 'volatile_variable;' will indeed trigger an access.
[23:30:25] <cousteau> yeah that's a scalar
[23:30:47] <Budd> I've never played with a system where memory reads/writes had side effects.
[23:31:31] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[23:31:56] <Budd> I'm trying program asynchronous I2C, and need to read (and ignore) the FIFO address twice to drain don't-care data from it.
[23:32:27] <cousteau> I do lots of embedded design, so memory-mapped registers are a common thing for me
[23:33:10] *** Joins: korg815 (~korg815@user/korg815)
[23:33:14] *** Joins: MarcoFe (~marcofe@host-82-49-154-107.retail.telecomitalia.it)
[23:33:34] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[23:34:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[23:34:47] *** Quits: lightyear_ (~lightyear@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[23:36:32] <cousteau> (although not common enough to know the answer to your question, it seemed)
[23:37:46] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[23:37:58] <twkm> cousteau: arr; evaluates the value of arr which is a pointer not the volatile data.
[23:38:13] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[23:38:20] *** Quits: piku (~piku@47.202.122.99) (Ping timeout: 256 seconds)
[23:39:18] *** Joins: HolyFishPaste91 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90)
[23:40:51] *** Joins: beans (~beans@072-182-047-058.res.spectrum.com)
[23:40:52] <cousteau> twkm: well, that's how I interpret the text
[23:41:09] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[23:41:14] *** Joins: piku (~piku@47.202.113.8)
[23:41:35] <cousteau> then again... maybe they were mentioning scalars to make the distinction from structs and unions, not from arrays
[23:42:51] <cousteau> since, yeah, you cannot evaluate the whole array (or rather, evaluating the array gives you a pointer, not the content of the array)
[23:42:52] *** Quits: HolyFishPaste90 (HolyFishPa@gateway/vpn/protonvpn/holyfishpaste90) (Ping timeout: 256 seconds)
[23:44:17] *** Joins: tombobcat (~tombobcat@178.62.2.76)
[23:50:36] *** Joins: jurjen (~jurjen@89-200-14-25.mobile.kpn.net)
[23:50:48] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 256 seconds)
[23:51:53] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214)
[23:52:19] *** Joins: strajder (~strajder@user/strajder)
[23:52:40] <quartz> Hello, my apologies for asking about this again, but I'm writing this simple C program that prompts the user for input, prints "an instance of mdb-lookup-server started on port %d", than immediately prompts the user again for another port number on a new line. I wrote this program: https://godbolt.org/z/7fn6KnMP5   but it does not prompt me again for port number after I enter it the first time.
[23:53:26] <quartz> I can't figure out why, I thought the issue was not including a continue statement, which I did, but that does not help. The direcitons for this program are here: https://bpa.st/B43A   I believe I have followed them correctly.
[23:54:11] *** Joins: graywolf (~wolf@user/graywolf)
[23:54:18] <rsjw> exec replaces the process
[23:54:49] <fizzie> I think I saw someone bringing it up already, but you have two blocking calls to `waitpid` per loop iteration, and just one process to wait for.
[23:55:33] <rsjw> oh nvmd
[23:55:38] <cousteau> rsjw: yeah but only the fork
[23:55:39] <cousteau> yeah
[23:55:58] <rsjw> yup I was too quick
[23:56:17] <quartz> fizzie: If I delete the if statement at line 39, it does not work correctly. I can try it again.
[23:56:21] *** Joins: rgrinberg (~textual@190.113.102.153)
[23:56:47] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:88b7:c4e:c5db:a214) (Ping timeout: 264 seconds)
[23:57:20] <fizzie> Anyway, per the instructions, you're not supposed to wait for the just-spawned child to exit before continuing with the loop, so that the user can start more than one of those things at a time.
[23:57:41] <cousteau> you may need to re-think how you do things; maybe call waitpid once and read the result twice or something like that
[23:59:06] <quartz> fizzie: Oh yeah....
[23:59:45] <quartz> But how do I get it to reprompt me for another port number after I enter it in the first time?
[23:59:49] <fizzie> Pretty sure the expected shape of the program is: while (1) { do a waitpid WNOHANG loop to report all terminated processes; print prompt; read port number; fork + exec in child; }
[23:59:49] <quartz> I use continue... is that wrong?
