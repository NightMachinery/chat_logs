[00:05:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:05:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:16:46] <White_Flame> I just stick with my unicomps and call it good
[00:25:04] *** Joins: hayley (~theemacss@user/hayley)
[00:28:51] <pl> shka: one thing f spectrum line had membrane 
[00:29:04] <pl> *one of 
[00:29:08] <pl> Stupid auto 
[00:29:11] <pl> Autocorrupt 
[00:29:34] <shka> they wanted to have even worse keyboard? :D
[00:29:35] *** Joins: dra (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6)
[00:29:37] <dra> Hello!
[00:30:02] <pl> shka: it was even cheaper, so... 
[00:30:37] <pl> The whole point of zx80 family was to be cheapest usable possible 
[00:31:37] <pl> This is the computer line where you taped the memory with ductape so the computer won't crash due to its wobbling 
[00:38:53] <shka> commoder 64 was much better imho
[00:38:59] <shka> no wonder it won the home computers war
[00:39:29] <hayley> Good morning everyone!
[00:40:03] <sham1> Good almost midnight
[00:40:27] <sham1> shka: well, the real winner ended up being the boring office worker option and now we're stuck with PC compatibles
[00:41:54] <sham1> Why buy a home computer like a C64 or later on things like Amiga or the Atari ST when you could get a decent clone PC for similar prices and get a lot of the productivity software and other neat things
[00:46:07] <pl> There's also the part that amiga lovers don't want to accept sometimes, that by 1990 it was obsolete in terms of special hw :(
[00:46:29] <pl> Atari ST was even worse, afaik
[00:46:59] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[00:47:00] -ixelp- Beat the Clock - YouTube
[00:47:11] <pl> C64 and Atari 800 line were the winners of 8bit home computing in Poland, afaik, with CP/M era pretty much missing us completely?
[00:47:40] <pl> and in USSR you had suddenly home PDP-11s with QBUS and RT11 in ROM
[00:50:28] <sham1> Welp, at least Amiga had a better processor architecture
[00:50:48] <sham1> But that obviously wasn't what consumers really cared about
[00:52:52] *** Quits: dra (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6) (Quit: Leaving)
[00:53:52] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[00:55:00] <sham1> But speaking of older home computers, I do wonder how something like a garbage collection system would have worked on a C64. Particularly if it had banked memory, because when just using the 64KiB of RAM available it's relatively trivial, but I do wonder how memory management for these kinds of languages would have worked with memory banks
[00:55:19] <sham1> A FORTH for example might not care as much about memory banks
[01:21:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:26:19] <pl> sham1: banked memory could work very well depending on how banks were arranged 
[01:27:00] <pl> But AFAIK the home computers didn't do it like that 
[01:31:09] <pl> Segmented MMU that could simultaneously map two banks in fun ways like PDP-11 MMU would allow early two space GC at reasonable speed 
[01:31:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1) (Ping timeout: 250 seconds)
[01:31:43] <pl> But the banks as handled in most home computers didn't allow remapping 
[01:31:50] <White_Flame> sham1: the c64 ROM did have a garbage collector for BASIC strings
[01:32:18] <White_Flame> but yeah, atari & apple had more standardized expansion banks in their memory map, and that was a bad oversight on the 64 not to include that
[01:32:36] <White_Flame> because "WOW 64KB IS SO HUGE"
[01:32:51] <sham1> Wasn't that remedied for C128 thought
[01:33:00] <White_Flame> not really
[01:33:05] <pl> Atari 800 lìne was probably most advanced home computer outside of apple2 line 
[01:33:09] <White_Flame> it had banking, but iirc it was still pretty fixed
[01:33:20] <sham1> Ah
[01:33:21] <White_Flame> the REU was a DMA ram expansion
[01:33:41] <pl> sham1: IIRC the incompatibility of some software with c128 was due to how c64 lacked expansibility in general 
[01:33:48] <White_Flame> however, the 128 ROM did have a faster garbage collector iirc
[01:34:00] <pl> Atari 130xe was, iirc, very compatible with previous software 
[01:34:10] <White_Flame> the 64 one basically moved a string, re-ran GC, moved the next string, re-ran GC, etc
[01:34:24] <White_Flame> the updated one finally did a more sane pass on everything
[01:35:27] <pl> Did commodore do a custom basic or used Microsoft? 
[01:35:32] <White_Flame> modified MS BASIC
[01:36:33] <White_Flame> iirc they had a one-time paid license to it from the PET or so, and ran with it
[01:37:13] <pl> So, internals probably quite similar to Atari BASIC
[01:37:22] <White_Flame> quite probably
[01:37:26] <pl> Dunno if I had listing to the Atari BASIC 
[01:37:42] <White_Flame> the CBM BASIC had no sound/video support
[01:37:52] <pl> My 8bit experience is pretty much learning "on paper" all of Atari 800 lìne 
[01:37:54] <White_Flame> but that just pushed people to learn asm
[01:38:05] <White_Flame> I'm still active in the c64 scene
[01:38:19] <White_Flame> well, "active" ;)
[01:40:25] <pl> The books I had on Atari described pretty much everything other than dire t schematics 
[01:40:40] <White_Flame> yeah, good times where that was all available
[01:40:40] <pl> *direct 
[01:40:54] <pl> Could have been useful if it included pinouts though 
[01:40:59] <White_Flame> the official c64 programmer's reference guide did actually come with schematics, too ;)
[01:41:23] <White_Flame> (containing their own share of mistakes, of course ;-P)
[01:41:26] <pl> But I think there was a book with extension and SIO port pinouts, I just didn't have it 
[01:42:02] <pl> Writing custom drivers for Atari OS was included, as was the full source code eith comments 
[02:03:35] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[02:13:40] <selwyn> https://www.cnx-software.com/2021/11/18/save-the-planet-program-in-c-avoid-python-perl/
[02:13:41] -ixelp- Save the planet! Program in C, avoid Python, Perl - CNX Software
[02:17:07] <hayley> https://www.youtube.com/watch?v=JlGZN74iaZ4
[02:17:08] -ixelp- La Dolce Vita - YouTube
[02:22:09] <hayley> "Go is the worst language from the compiled languages category, and it’s even worse than languages relying on a VM like Java or Erlang, at least with the binary-trees sample used." No, Erlang consumed _less_ energy than Go apparently. Can you read a graph?
[02:22:48] <hayley> Unless the joke is that you save the planet by killing yourself...
[02:24:08] <hayley> Ditto goes for "interpreted languages" like Hack, Dart, JavaScript and Typescript. This person can't read graphs?
[02:30:32] <selwyn> what kind of projects can you do on an atari? do they have a demoscene?
[02:41:09] <hayley> gilberth: https://alexandrugroza.ro/microelectronics/system-design/isa-80386dx-sbmc/index.html
[02:49:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[02:52:43] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:57:39] * hayley uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/BIftQEsYElMrXQOFYYrLlbHw/Screenshot_2021-11-19_09-55-40.png >
[03:27:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:27:30] <dave0> maw
[03:56:17] <gilberth> Hello dave0!
[03:57:17] <dave0> maw gilberth!
[04:02:00] <gilberth> hayley: Enjoy <http://clim.rocks/lisp100/> -- I was bored.
[04:02:00] -ixelp- /lisp100/
[04:02:29] <hayley> God dammit.
[04:06:16] <gilberth> It's exactly 100 lines, hence the name. :-)
[04:07:11] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[04:07:15] <Jacobis9000> who
[04:07:21] <Jacobis9000> hello!
[04:08:00] <gilberth> I noticed that JMC's alists look like ((A FOO) (B BAR)) instead of ((A . FOO) (B . BAR)) perhaps bare pairs or dotted lists seemed spooky?
[04:27:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:33:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 265 seconds)
[04:46:01] *** Joins: random-nick (~random-ni@87.116.180.220)
[04:55:50] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[05:07:46] *** Quits: Catie (~user@user/catie) (Quit: heading out)
[05:10:41] * hayley uploaded an image: (217KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/YrNiWkxlBYiCKNCenqFLZAVk/evil-cliff-click.jpg >
[05:10:42] <hayley> Evil Cliff Click: sea of basic blocks
[05:12:42] <hayley> Also FWIW I am pretty sure the C, C++, Rust etc demo programs use arena allocators and thus leak memory.
[05:31:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:31:44] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[06:55:21] <hayley> https://www.youtube.com/watch?v=_nw6j0MSW_s
[06:55:22] -ixelp- 'Dogs' Pink Floyd Demo's 1976 Alternative version rare - YouTube
[07:10:41] <hayley> So, of that "efficiency" benchmark with binary trees, all C, C++, Rust and Pascal use custom bump allocators. As nothing is garbage in the test, this is technically fine, but it is just a rubbish comparison.
[07:11:13] <hayley> According to https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/binarytrees.html#binarytrees you can bring someone else's allocator library, but not your own allocator, and you can't tweak GC. What a load!
[07:59:59] *** Joins: christophergray (~christoph@190.148.51.123)
[08:02:29] *** Quits: christophergray (~christoph@190.148.51.123) (Client Quit)
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:12:44] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:18:59] <mfiano> moon-child: around?
[08:22:19] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:35:01] *** Joins: semz (~none@user/semz)
[08:36:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[09:50:30] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 256 seconds)
[10:38:12] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[10:38:38] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[10:44:23] <mfiano> Hmm, anyone know POSIX sh well?
[10:45:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:56:10] <sham1> Somewhat
[11:07:03] <mfiano> POSIX character classes are a pain, and seems can only be used in CASE, not IF
[11:07:15] <mfiano> I'll just use CASE, thanks though
[11:19:40] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[11:20:27] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:49:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:07:46] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:42:37] <shka> accurate review of cherry MY https://youtu.be/uYRVp3cYVg4?t=454
[12:42:38] -ixelp- TOP 10 WORST mechanical keyboard switches of all time - YouTube
[12:42:39] <shka> ;-)
[12:44:45] <shka> it is probably the worst widely available switch type
[13:07:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:46:10] <hayley> https://www.youtube.com/watch?v=yrZDn1fwgKE
[13:46:11] -ixelp- Using Math to Find When Your Dad is Coming Home - YouTube
[13:52:33] <hayley> gilberth: Do you know if olde BASIC implementations used bytecode or some other half-compilation technique? 
[13:53:34] <hayley> Hm, IIRC Apple BASIC used a bespoke VM by Wozniak. And apparently Tiny BASIC could use a VM too.
[13:53:48] <hayley> SWEET16 for the former.
[14:06:43] <shka> hayley: https://www.zdnet.com/article/microsoft-takes-you-back-to-1983-its-just-open-sourced-its-gw-basic-interpreter/
[14:06:58] <shka> almost every one wanted MS basic back in the day anyway
[14:07:24] <shka> https://github.com/microsoft/GW-BASIC
[14:07:24] -ixelp- GitHub - microsoft/GW-BASIC: The original source code of Microsoft GW-BASIC from 1983
[14:08:07] <shka> writing compilers in a assembly language does not feel like a good time
[14:09:03] <shka> also, machines running basic, usually had very, very, very limited memory 
[14:45:41] <selwyn> https://nitter.net/pic/media%2FFEjG1gFXsAggDTA.jpg%3Fname%3Dorig
[14:46:51] <shka> fuck, even socialism is getting privatized
[14:47:54] <Gnuxie> but why, it's a romantic idea and he's still a landlord 
[14:48:04] <Gnuxie> he's not actually comitted to anything 
[14:48:07] <selwyn> such a strange thing to say
[14:48:52] <selwyn> have never previously considered the romance of being bad at being a landlord
[14:49:16] <selwyn> i suppose it is more romantic than being good at being a landlord
[14:49:32] <Gnuxie> lol
[14:51:37] <hayley> https://kristerw.blogspot.com/2017/09/why-undefined-behavior-may-call-never.html
[14:51:37] -ixelp- Krister Walfridsson’s old blog: Why undefined behavior may call a never-called function
[14:53:08] <selwyn> got my phd viva examiners confirmed
[14:53:11] <selwyn> it's happening
[14:53:17] <hayley> GCC backend hacking: https://kristerw.blogspot.com/2017/08/writing-gcc-backend_4.html
[14:53:18] -ixelp- Krister Walfridsson’s old blog: Writing a GCC back end
[14:53:35] <pl> selwyn: congrats
[14:53:43] <selwyn> y
[14:53:45] <selwyn> ty
[14:53:52] <selwyn> well, i still have to finish my thesis lol
[14:59:48] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:00:29] <shka> yesterday i've got email from a person pointing out that example in the cl-ds is wrong
[15:00:39] <shka> that's the first
[15:00:48] <selwyn> how do you feel about that
[15:01:56] <selwyn> i like it when people point out mistakes in things i've done because it means people are actually engaging with it for once
[15:02:02] <selwyn> but it is also stressful
[15:02:35] <shka> well, i am happy with that, i want to make this error free
[15:02:44] <shka> but it is difficult to do it on your own
[15:02:51] <selwyn> indeed
[15:02:55] <shka> so for instance i missed that cl-ds won't build on LW
[15:02:59] <shka> but now it builds!
[15:03:33] <shka> and i learned something as well
[15:04:31] <shka> oh, clasp has AUR package
[15:04:35] <shka> how cool is that
[15:04:56] <hayley> It's less cool when you have to build LLVM from source.
[15:05:10] <selwyn> it's been quite a while since i've been able to build clasp
[15:05:30] <shka> ok, let's see how this goes
[15:05:32] <selwyn> it says on the wiki that you can use package llvm but that may be out of date
[15:11:42] <shka> https://i.imgur.com/Kol9AmE.png
[15:11:56] <shka> selwyn: it is building i think
[15:12:14] <shka> very slowly
[15:12:18] <shka> because C++
[15:12:44] <selwyn> well, it is doing llvm for you
[15:12:55] * hayley uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZfyfycqRctqjArrzDpcMSAio/cliff-click.png >
[15:14:08] <shka> oh
[15:14:16] <shka> LLVM will surely take some time
[15:14:35] <shka> i guess extra cores will help here
[15:14:42] <selwyn> built clasp overnight in the university library once
[15:14:47] <shka> hayley: you are really fangirling over cliff :D
[15:15:22] <hayley> shka: brb fitting Cleavir IR into L1 cache
[15:15:31] <shka> heh
[15:16:00] <shka> is there a portable way to quit lisp?
[15:16:16] <hayley> IIRC there's a shut-it-down library.
[15:16:27] <hayley> 0 dependency version: (loop collect 2) and wait
[15:16:41] <shka> thanks!
[15:17:08] <selwyn> lol
[15:17:19] <hayley> beach and I eventually want to gravitate towards a sea of nodes and global value numbering, but I can't do it as a job as I am inexperienced with both.
[15:18:12] <shka> fake it till you make it
[15:18:14] <shka> :-)
[15:18:29] <hayley> But code motion is damn cool. You find an expression which is loop invariant and you can just schedule it outside the loop, as it has no dependencies from in the loop.
[15:18:54] <hayley> Pretty low effort way to get loop invariant stuff IMO
[15:19:06] <selwyn> doubt anyone else is able (or willing) to do as good a job as you
[15:19:58] <hayley> Well, I'm mostly in it for a good ass compiler. But my parents and the government say I should get a job.
[15:21:12] <selwyn> sounds like you could get a job doing this
[15:21:16] <shka> for what is worth cl-user::quit works for sbcl and ccl
[15:21:50] <selwyn> unfortunately, we cannot ever quit common lisp
[15:21:54] <selwyn> as it is not in the spec :)
[15:22:09] <hayley> (quit) in CLOSOS shuts down the computer
[15:22:10] <selwyn> i guess that is because of lisp machines?
[15:23:22] <shka> that's because only God himself is allowed to use quit
[15:23:28] <shka> to end the world
[15:23:51] <shka> clang still builds
[15:23:58] <shka> *yaw*
[15:24:14] <selwyn> clasp itself only took 20 minutes last time i was successful
[15:24:40] <selwyn> which is a ridiculous speedup
[15:29:56] <shka> https://www.reddit.com/r/datascience/comments/qwqbxn/zillow_loses_billions_on_house_price_prediction/?utm_medium=android_app&utm_source=share
[15:29:58] -ixelp- Zillow Loses Billions on House Price Prediction Algorithm : datascience
[15:30:29] <shka> It is global pandemic crisis, thousands has lost it's job, inflation is rapid but it's fine, let's just deploy 
[15:30:43] <shka> AI will all deal with that
[15:30:58] <selwyn> lol
[15:31:05] <lisp123> shka: dammmmmnnn somebody was bragging me about zillow before
[15:31:21] * hayley got R² ≈ 0.92 on used car asking prices, git gud skrub
[15:31:22] <selwyn> they sponsor kaggle competitions
[15:31:27] <shka> sure
[15:31:44] <lisp123> so property prices falling in the US?
[15:31:53] * hayley got 93% grade too, what did Zillow engineers get for their maths assignment eh
[15:32:33] <selwyn> the british algorithm is simply the line y=x
[15:32:35] <shka> lisp123: well, the think is that a lot of people lost their job, then stimulus money came in
[15:32:40] <shka> and some tax fuckery
[15:33:06] <selwyn> no need for liberal expertise
[15:33:28] <shka> overall, a lot of financial turbulence in a short span of time
[15:33:43] <shka> and none of that was in the training data even
[15:33:54] <lisp123> lol
[15:33:58] <lisp123> that makes my day
[15:34:29] <shka> and also global supply chain disturbance 
[15:34:37] <shka> in case you've missed that
[15:34:39] <shka> somehow :P
[15:35:08] <lisp123> hayley: https://www.linkedin.com/feed/update/urn:li:activity:6866469921568759808/
[15:35:09] -ixelp- Daliana Liu on LinkedIn: #datascience #career | 182 comments
[15:35:31] <lisp123> shka: That one hurts :( Everything so expensive right now
[15:36:36] <selwyn> what else can be prettified besides λ
[15:38:17] <shka> "We are not professionals, we are just determined idiots."
[15:38:45] <selwyn> is that a real quote? i can't open the link rn
[15:39:23] <hayley> lisp123: No one at Amazon knows what they're doing, but no one dares to say that no one at Amazon knows what they're doing.
[15:39:50] <lisp123> From the link I had (for those who don't like LI): I'm not cut to be a data scientist: • I failed my statistics exams twice • I didn't want to study math in college • I didn't know any Python until my second job. Just know that everyone that looks 'successful' had their struggles. Nobody is 'cut' to be a data scientist, they just try.
[15:40:18] <selwyn> sometimes 'no one knows what they're doing' is used as a serious argument and it is often depressing
[15:40:24] <shka> i mean, corporations
[15:40:25] * hayley does graph problems of all shapes, gets like 90% on statistics tests, makes fun of Python semantics, does maths for kicks
[15:40:35] <selwyn> e.g. conspiracies can't be real because our rulers are too incompetent to plan things like that
[15:40:41] <selwyn> if true, that doesn't make things any better!
[15:40:44] <lisp123> hayley: Yeah, I didn't want to reply and say "Perhaps you should work in some other career if you failed statistics." But LI is a corporate platform so I refrained
[15:40:58] * shka really does blends himself toward corporate style or work
[15:41:02] <hayley> selwyn: Based on the "concurrent network programming in Rust" video I once saw, I am pretty sure all Amazon engineers are amazingly incompetent.
[15:42:08] <hayley> - Terrible benchmark that doesn't get close to maximum throughput - using a lock father than lock free table - claiming all tracing GCs stop the world
[15:42:46] <hayley> I'd totally fire myself if I caught myself presenting any of those professionally.
[15:42:58] <hayley> s/father/rather
[15:43:29] <selwyn> although it is not really my jam, am considering buying a productivity book so that i can use org-mode effectively
[15:44:03] <lisp123> selwyn: "Get Things Done"? Seems like that's what all the org-mode users use
[15:44:10] <selwyn> yeah that one
[15:44:10] <hayley> From my own testing, they used the default redis benchmark settings, and that only hits 2% of maximum throughput. Hence you could be 50x slower and get the same results.
[15:44:38] <selwyn> do you know if its worth investing in?
[15:44:46] <lisp123> Nice, let me know if any good
[15:45:07] <hayley> In the end, I found out that their code is like 30% slower than Redis...and Redis used one thread whereas theirs used twelve. My hash table with some shitty netcode I took 20 minutes to write was 30% faster.
[15:45:12] <lisp123> Nah, I was thinking of getting it too a while back but I have stuck to simple TODOs until now
[15:45:21] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[15:45:58] <hayley> Anyways: if your code is shit and you sell hardware hosting, congrats, you just sold more hardware.
[15:46:29] <hayley> So incompetence is quite handy at times.
[15:47:04] <hayley> .oO(Hm, wasn't that presentation so bad that I made the hash table in spite of it? At least that's the official story.)
[15:53:03] <hayley> It's a bit like beach and HP compiler guys. That sort of talk is just plain stupid.
[15:53:27] <hayley> "Somehow I mentioned that transformations are semantics preserving, and they all protested, saying something like "Oh, no!  That would make the resulting code too slow".  I decided then not to use compilers from HP."
[15:57:47] <Gnuxie> but APL JIT was from HP 
[16:57:33] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[17:03:48] <selwyn> sigh
[17:04:05] <selwyn> would be nice if i had invested in proper testing procedures
[17:04:34] <selwyn> to the extent that i have them, they consist of comments ; yeah this works
[17:06:57] <sham1> ; verified in the REPL for common values
[17:08:20] <selwyn> well, one advantage of doing scientific coding is that (usually!) you don't have to worry about software bugs in the same way
[17:08:39] <selwyn> it really does only have to be right one time, on the specific input that gets published
[17:08:46] <selwyn> corner cases go to hell
[17:09:04] <ck_> "and according to fig (1), my method is excellent"
[17:13:30] <selwyn> shka: any border stories?
[17:19:11] <selwyn> https://nitter.eu/pic/media%2FFClAUSRUcAIiRoH.jpg%3Fname%3Dorig
[17:19:43] <ck_> "achievement unlocked"?
[17:36:44] <selwyn> https://nitter.eu/pic/media%2FE7Q8JwsXsAI2rnD.jpg%3Fname%3Dorig
[17:37:02] <selwyn> til that the vietnamese government favours web 1.0 in all things
[17:37:36] <selwyn> no wonder they beat the usa
[17:43:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b)
[17:48:46] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:55:16] *** Joins: defb (~defb@user/defb)
[17:58:30] <selwyn> https://www.ok.co.uk/lifestyle/queen-new-phase-wont-see-25469451
[17:59:11] <selwyn> like she is turning into a butterfly
[17:59:53] <ck_> aren't you supposed to be rapidly inputting some math into a latex document right now, young man? :)
[18:00:34] <selwyn> that's true sigh
[18:04:56] <pl> ck_: does YMCA help with LaTeX? 
[18:05:51] <ck_> https://www.urbandictionary.com/define.php?term=YMCA
[18:05:52] -ixelp- Urban Dictionary: YMCA
[18:06:09] <ck_> so yes, because you don't have to go out for food again
[18:20:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[19:15:06] <gilberth> Good morning #lispcafe!
[19:51:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[20:00:48] *** Joins: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:10:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b) (Ping timeout: 265 seconds)
[20:36:20] <sham1> Good beginning of weekend
[20:36:30] <sham1> So it might as well be a never-ending morning
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:53:28] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:54:37] *** X-Scale` is now known as X-Scale
[20:57:27] *** Joins: rogersm (~rogersm@90.166.177.48)
[21:00:26] *** Joins: treflip (~user@95.79.32.99)
[21:19:40] *** Joins: ln43 (~ln43@user/ln43)
[21:19:57] <ln43> Hi all!
[21:20:39] <ln43> finally i found a quite good relaxing game to play: https://js13kgames.com/entries/exo and to be honest i like the idea
[21:22:16] <ln43> now i can't justify the us of java for that but the concept behind is good
[21:23:04] <sham1> I can. Either that's what the writer wanted or what the people who pay the writer wanted
[21:23:32] *** Joins: Catie (~user@user/catie)
[21:24:41] <selwyn> til about hardware jpeg converters
[21:25:05] <selwyn> decoders
[21:25:13] <edgar-rft> there jpegs showing hardware?
[21:25:40] <selwyn> most intel gpus have them
[21:28:06] <sham1> I mean, if you can off-load it to the hardware
[21:28:14] <sham1> Why wouldn't you
[21:29:11] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[21:31:15] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[21:33:00] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[21:37:26] <gilberth> The X11 XIE extension has direct support for JPEGs; you could send a jpeg to the X server and decoding would happen on the server.
[21:40:10] <gilberth> This is actually relatively common, consider that you could embed JPEGs with PDF directly and of course also with SVG. This is the reason why my image data type for Free-CLIM keeps a reference to the encoded original image and decodes on demand. Thus when talking to a backend with direct JPEG support => No work load on my side.
[21:41:45] <Alfr> Good morning.
[21:42:37] <gilberth> Good morning Alfr! At last, someone sharing my time zone. :-)
[22:01:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:06:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:09:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:11:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:17:05] <edgar-rft> any Lisp programmer ever tried car sharing? :-)
[22:17:45] <gilberth> I don't share my car.
[22:18:50] <edgar-rft> I know that lists can share cdrs, but cars?
[22:23:44] <Alfr> try trees of conses
[22:24:09] <sham1> If two lists share a car, wouldn't that just make them the same list?
[22:25:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:25:45] <edgar-rft> Car sharing sounds like a very obscure idea to me :-)
[22:25:53] <Alfr> sham1, no: (cons (car list) (not (cdr list))) certainly shouldn't be equal to list.
[22:26:17] <sham1> Fair
[22:28:06] *** Quits: sm2n_ (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[22:28:10] *** Joins: sm2n (~sm2n@user/sm2n)
[22:28:38] <sham1> Also can't car share if only has bike
[22:41:46] <Alfr> sham1, hm ... the former might not be a proper list. (But you said list, so all is well.)
[22:44:51] <gilberth> Then take (cons (car list) (list list)), this will be a proper list.
[22:46:26] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (Read error: Connection reset by peer)
[23:06:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[23:13:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:16:55] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:19:31] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:19:58] <gilberth> I wonder why libc can't print floating pointers properly? I mean with CL 0.1D0 prints as "0.1", while with C it prints as "0.1000000000000000055511151231257827021182" with "%.40g". Why were they too lazy to implement say the Dragon algorithm?
[23:20:37] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:22:31] *** Joins: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net)
[23:22:43] <gilberth> When in C land, do I have to implement even basic things like FP printing on my own? Where is INTEGER-DECODE-FLOAT, so that I could even have a starting point for doing this?
[23:23:28] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:26:24] <gilberth> And, could I trust strtod(3) even?
[23:38:56] <gilberth> This will have to do: <http://clim.rocks/gilbert/render_float.c>
[23:41:06] <gilberth> A proper C interface though would return an error status.
[23:41:35] <selwyn> how buggy are common lisp impls in comparison to other things
[23:43:44] <gilberth> Well, ~E is very buggy once you request actual field sizes and such. See <http://clim.rocks/gilbert/format-exp-aux/>
[23:43:45] -ixelp- /gilbert/format-exp-aux/
[23:44:35] <gilberth> selwyn: But, all CL implementations I saw implement the Dragon algorithm for printing. We have no excuse for not doing that because we have an integer (bignum) data type.
[23:47:28] <gilberth> The bugs I found with ~E are mainly in misscalculations in the mantissa width and the position of the dot and thus also at times the exponent. When you don't use those features, you're safe. And as nobody else noticed in perhaps 30 years, you're probably safe anyway. :-)
[23:48:13] <sham1> I couldn't find the Dragon algorithm, although it might just be that my google-fu is not good
[23:49:26] <gilberth> Try searching for "dragon4".
[23:49:55] <sham1> Alright, found
[23:51:15] <gilberth> There are come recent newer algorithm for that. I have a very small one, but have no clue at all where to even start proving its correctness.
[23:55:31] <gilberth> sham1: If you want to play with Dragon4: <http://clim.rocks/gilbert/dragon4.lisp>
