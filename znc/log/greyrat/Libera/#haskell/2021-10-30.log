[00:16:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[00:16:17] *** Quits: OscarH (~OscarH@90.201.86.195) (Ping timeout: 264 seconds)
[00:16:54] <shapr> hololeap: this is brilliant and sneaky, I love it
[00:17:22] <hololeap> shapr: it wasn't really intentional, I swear D:
[00:17:28] <dsal> Is DeriveAnyClass a terrible idea?
[00:17:56] <hololeap> no, but it can be misused to a certain extent
[00:18:23] <dsal> I file like it makes thing slightly better in this one case.
[00:18:39] <hololeap> it's basically the same as `instance Blah T` without the `where` or the following definition block
[00:19:15] <shapr> hololeap: if only it would crash as soon as you update a package instead of when you next speak to the hoogle server
[00:19:28] <hololeap> so for some classes, it makes sense... for instance Exception
[00:20:12] <geekosaur> also for any class that can use a Generic instance in its default implementation, which is IIRC the intended use case
[00:20:53] <hololeap> ^ beat me to it
[00:21:00] <hpc> i forsee a https://xkcd.com/1172/ style bug report in hoogle's future
[00:21:27] <dsal> Well, hlint won't me do it.  That's lame.
[00:22:21] *** Joins: Guest17 (~Guest17@94-255-217-215.cust.bredband2.com)
[00:22:22] <hololeap> it won't let you?
[00:23:17] <dsal> Precommit hook with a bunch of predefined decisions.
[00:24:11] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[00:24:16] <hololeap> hm, bummer. it forbids that extension?
[00:25:03] <dsal> Yeah.  I guess someone did a thing somewhere and it was wrong or something.
[00:25:30] <dsal> It's unfortunate it covers several syntaxes.  I'm using deriving strategies here and I'd think that'd be OK because, you know, I meant to do it.
[00:25:44] <dsal> I think there's something about newtype vs. any doing something different for aeson or something.
[00:25:53] <hololeap> I suppose it makes sense, because you can shoot yourself in the foot if you aren't paying attention. if you want to use it, it's a good idea to have DerivingStrategies enabled and use them everywhere
[00:26:05] <dsal> Yeah, I don't know if we can say that.
[00:26:38] <geekosaur> yeh, strategies exist because if DeriveAnyClass is enabled it overrides GeneralisedNewtypeDeriving
[00:26:54] <geekosaur> so you get something other than what you intended for a newtype
[00:28:54] <dsal> Oh interesting.  Yeah, I guess there needed to be a tie breaker.
[00:29:25] *** Quits: Guest17 (~Guest17@94-255-217-215.cust.bredband2.com) (Quit: Client closed)
[00:31:11] *** Quits: ubert1 (~Thunderbi@178.115.53.120.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[00:32:08] *** Quits: ubert (~Thunderbi@178.115.53.120.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[00:34:14] *** Joins: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz)
[00:35:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:36:57] *** Quits: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz) (Client Quit)
[00:38:29] *** Joins: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz)
[00:39:24] *** Joins: Farzad (~FarzadBek@37.49.150.10)
[00:57:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[01:00:35] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[01:00:52] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:01:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[01:10:11] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[01:11:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[01:14:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[01:15:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[01:17:08] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[01:17:57] *** Joins: kn07_ (~kn07_@86.121.23.168)
[01:22:31] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 260 seconds)
[01:23:04] *** Quits: Farzad (~FarzadBek@37.49.150.10) (Quit: Leaving)
[01:23:05] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[01:29:44] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[01:32:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[01:37:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:39:34] *** Quits: xff0x (~xff0x@2001:1a81:529e:f300:b22f:69e6:aa77:fd2f) (Ping timeout: 268 seconds)
[01:39:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:40:17] *** Joins: xff0x (~xff0x@2001:1a81:529e:f300:d3c7:e134:91d9:4541)
[01:41:39] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:46:51] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:47:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:49:01] *** Quits: kn07_ (~kn07_@86.121.23.168) (Quit: Leaving)
[01:49:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:49:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:49:04] *** Joins: wroathe (~wroathe@user/wroathe)
[01:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:52:54] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[01:53:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:53:47] *** Quits: mcglk (~mcglk@131.191.49.120) (Ping timeout: 260 seconds)
[01:54:05] *** Joins: jespada (~jespada@181.28.253.200)
[01:56:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:59:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[02:00:27] *** Parts: jil (~user@160.155.45.49) (ERC (IRC client for Emacs 27.2))
[02:01:09] *** Quits: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz) (Read error: Connection reset by peer)
[02:01:22] *** Joins: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz)
[02:02:50] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[02:03:41] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:05:22] *** Quits: jespada (~jespada@181.28.253.200) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:07:18] *** Quits: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz) (Read error: Connection reset by peer)
[02:07:26] *** Joins: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz)
[02:09:01] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[02:09:56] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[02:10:00] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:10:27] <f-a> I am writing a small haskell program, is there a way GHC can show me *unused* top-level  functions in my src/ when I run the program?
[02:10:43] *** Joins: ubert (~Thunderbi@178.115.53.120.wireless.dyn.drei.com)
[02:12:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: Lost terminal)
[02:15:59] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:17:38] <hpc> not at runtime
[02:17:50] <hpc> ghc has various -Wunused-* flags you can pass
[02:17:58] <hpc> or maybe hlint
[02:20:36] <f-a> thanks
[02:25:40] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:29:33] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[02:36:05] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 268 seconds)
[02:36:41] <clever> f-a: also, unused top-level functions will only be warned about if you have explicit exports
[02:36:53] <clever> if you export everything, then it cant know what is unused in other modules
[02:37:07] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[02:37:20] <f-a> argh, I see
[02:37:52] *** Joins: Farzad (~FarzadBek@37.49.150.10)
[02:43:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk) (Remote host closed the connection)
[02:44:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk)
[02:44:11] *** Quits: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[02:44:23] *** Joins: proboscis (~proboscis@115-189-132-172.mobile.spark.co.nz)
[02:47:07] *** Quits: max22- (~maxime@2a01cb0883359800df57ac14517550fc.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:48:23] <dsal> Explicit exports are kind of bad, but generating lots of stuff with TH and having to type up a bunch of exports for code that doesn't exist in the file can be annoying.
[02:48:24] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:48:42] <dsal> Er, not having explicit exports is kind of bad.
[02:48:59] <Cajun> also exporting potentially unsafe constructors is obviously not good
[02:48:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[02:49:36] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[02:49:59] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[02:51:39] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 260 seconds)
[02:52:49] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[02:54:18] <energizer> why is there no dynamic language with haskell syntax?
[02:55:24] <geekosaur> define 'dynamic language'
[02:55:58] <aegon> maybe they mean interpreted?
[02:56:00] <energizer> i know it when i see it
[02:56:19] <aegon> like a ghci vm :?
[02:56:25] <hpc> you could always defer type errors :D
[02:56:33] <geekosaur> hugs?
[02:56:56] <geekosaur> if you mean dynamic typing, there's small issues like pattern matching fundamentally relying on strict typing
[02:58:46] <geekosaur> also "i know it when i see it" basiclaly makes your question unanswerable, because we can't get into your head to see what you really want
[02:59:08] <energizer> i think many of us know it when we see it
[02:59:17] <energizer> what is "strict typing"?
[02:59:29] <hpc> you'd be surprised how many people are able to see things without knowing them
[02:59:46] <aegon> i see things without knowing them every day :P
[02:59:55] <aegon> i'm seeing a screen right now, i could say how it works, but i don't know it
[02:59:55] <hpc> strict means "types must match", static means "at compile time"
[03:00:00] <aegon> lets get nit picky!!! :D
[03:00:08] <energizer> now try this schtick when i say python is statically typed
[03:00:13] <hpc> (strict typing is also called strong typing)
[03:00:32] <hpc> weak typing is "the language will do what it can to make things work"
[03:00:42] <hpc> python is strict and dynamic typed
[03:00:47] <hpc> haskell is strict and static typed
[03:01:03] <hpc> perl is weak and static typed
[03:01:05] <energizer> yeah so pattern matching depending on types seems irrelevant
[03:01:17] <energizer> since dynamic languages can have strong types
[03:01:25] <hpc> (its compile-time types are $, @, %, &, and *)
[03:01:38] <hpc> (when you use the wrong one, it might do something like give you the length of a list, or make a list of one element)
[03:01:57] <hpc> C is weak and static typed
[03:02:20] <hpc> its types are sizes, and if you use the wrong size it can sometimes figure things out for you
[03:02:55] <hpc> (byte = 1, int = cpu-dependent, struct = sum of all field sizes, etc)
[03:04:03] <monochrom> Racket has pattern matching, yes.
[03:04:10] <hpc> python has pattern matching
[03:05:11] *** Quits: proboscis (~proboscis@115-189-132-172.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[03:05:14] *** Joins: Domino[m] (~dominothe@2001:470:69fc:105::1:271b)
[03:05:40] *** Joins: proboscis (~proboscis@115-189-83-58.mobile.spark.co.nz)
[03:05:58] <monochrom> But histo-socially, users of dynamic typing don't want haskell syntax in the first place.
[03:07:21] <hololeap> I don't understand what function composition would look like in a dynamically typed language
[03:07:22] <geekosaur> I should have specified Haskell's pattern matching, which I consider part of its syntax
[03:07:32] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (Quit: leaving)
[03:07:40] <hololeap> just passing strings around?
[03:07:55] *** Joins: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com)
[03:08:05] <monochrom> But I brought up Racket pattern matching because it's a superset of Haskell pattern matching.
[03:08:57] <hololeap> hm, nvm that was dumb of me
[03:09:18] <hololeap> I've used ruby before :p
[03:09:31] <monochrom> And function composition in Racket looks like (compose f g)
[03:09:50] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[03:09:55] *** Quits: ubert (~Thunderbi@178.115.53.120.wireless.dyn.drei.com) (Remote host closed the connection)
[03:10:57] <hololeap> energizer: when you say "dynamic languages", do you mean so-called "interpreted languages"?
[03:11:29] <hololeap> https://en.wikipedia.org/wiki/List_of_programming_languages_by_type
[03:11:47] <hololeap> there's no "dynamic language" section here, so it's hard to pin down a definition
[03:13:18] <energizer> let's say language with runtime types
[03:13:58] <monochrom> OK, so dynamic typing.
[03:14:06] <energizer> regardless of whether it also has static types, like python does
[03:15:17] *** Joins: fef (~thedawn@user/thedawn)
[03:15:34] <monochrom> Anyone wanna state that Haskell is a dynamic language with Haskell syntax on account that Typeable is runtime type information? >:)
[03:17:06] <hololeap> or because of typeclasses/polymorphic literals
[03:17:39] <monochrom> But type classes are completely resolved at link time.
[03:18:23] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 264 seconds)
[03:18:42] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[03:18:50] *** Quits: cads (~cads@ip-64-72-99-234.lasvegas.net) (Quit: Leaving)
[03:18:56] <monochrom> Err that contradicts what I said about Typeable haha.
[03:27:07] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d89cc95ba723fa3afc9.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:30:03] *** Quits: mcglk_ (~mcglk@131.191.49.120) (*.net *.split)
[03:30:03] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (*.net *.split)
[03:30:03] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (*.net *.split)
[03:30:03] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[03:30:03] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[03:30:03] *** Quits: AlexNoo (~AlexNoo@178.34.163.209) (*.net *.split)
[03:30:03] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (*.net *.split)
[03:30:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (*.net *.split)
[03:30:03] *** Quits: _xor (~xor@72.49.199.147) (*.net *.split)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[03:30:03] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (*.net *.split)
[03:30:03] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[03:30:03] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[03:30:03] *** Quits: sander (~sander@user/sander) (*.net *.split)
[03:30:03] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: Gestotterd (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (*.net *.split)
[03:30:03] *** Quits: slowtype- (~slowtyper@2a02:214c:8630:300:654c:f501:742f:b8e4) (*.net *.split)
[03:30:03] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (*.net *.split)
[03:30:03] *** Quits: martin02 (~silas@emasq.stusta.mhn.de) (*.net *.split)
[03:30:03] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[03:30:03] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[03:30:03] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (*.net *.split)
[03:30:03] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[03:30:03] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[03:30:03] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[03:30:03] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[03:30:03] *** Quits: defanor (~defanor@tart.uberspace.net) (*.net *.split)
[03:30:03] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[03:30:03] *** Quits: lstor (~lstor@user/lstor) (*.net *.split)
[03:30:03] *** Quits: dolio (~dolio@130.44.130.54) (*.net *.split)
[03:30:03] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[03:30:03] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (*.net *.split)
[03:30:03] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: sa (sid1055@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: grfn (sid449115@helmsley.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[03:30:03] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[03:30:03] *** Quits: mniip (~mniip@libera/staff/mniip) (*.net *.split)
[03:30:03] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[03:30:03] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[03:30:03] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[03:30:03] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[03:30:03] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[03:30:03] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[03:30:03] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (*.net *.split)
[03:30:03] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (*.net *.split)
[03:30:03] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[03:30:03] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[03:30:03] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[03:30:03] *** Quits: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de) (*.net *.split)
[03:30:03] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[03:30:03] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[03:30:04] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (*.net *.split)
[03:30:04] *** Quits: Sqaure (~a@178.62.91.8) (*.net *.split)
[03:30:12] *** Joins: absence (~absence@hildring.pvv.ntnu.no)
[03:30:15] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[03:30:16] *** Joins: tomku (~tomku@user/tomku)
[03:30:17] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[03:30:18] *** Joins: defanor (~defanor@tart.uberspace.net)
[03:30:19] *** Joins: rembo10 (~rembo10@remulis.com)
[03:30:21] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[03:30:23] *** Joins: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de)
[03:30:24] *** Joins: Trattue (~Trattue@152.70.182.158)
[03:30:24] *** Joins: Feuermagier (~Feuermagi@2a02:2488:4211:3400:6419:933b:46e0:8942)
[03:30:25] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[03:30:26] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[03:30:30] *** Joins: pavonia (~user@ip5f5bf406.dynamic.kabel-deutschland.de)
[03:30:31] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[03:30:33] *** Joins: teehemkay (sid14792@lymington.irccloud.com)
[03:30:36] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[03:30:37] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[03:30:37] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[03:30:37] *** Joins: tinwood (~tinwood@canonical/tinwood)
[03:30:38] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[03:30:38] *** Joins: mcfilib (sid302703@id-302703.helmsley.irccloud.com)
[03:30:39] *** Joins: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0)
[03:30:43] *** sudden is now known as Guest4382
[03:30:43] *** Joins: mniip (mniip@libera/staff/mniip)
[03:30:44] *** Joins: AndrewYu (~andrew@andrewyu.org)
[03:30:45] *** Quits: Feuermagier (~Feuermagi@2a02:2488:4211:3400:6419:933b:46e0:8942) (Changing host)
[03:30:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:30:46] *** Joins: bradparker (sid262931@uxbridge.irccloud.com)
[03:30:46] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[03:30:46] *** Joins: Raito_Bezarius (~Raito@2a01:e0a:5f9:9681:a0a0:bb76:611f:9da7)
[03:30:47] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[03:30:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:30:48] *** Joins: dolio (~dolio@130.44.130.54)
[03:30:49] *** Joins: slowtyper (~slowtyper@2a02:214c:8630:300:225:64ff:feb7:4668)
[03:30:54] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[03:30:54] *** Quits: pavonia (~user@ip5f5bf406.dynamic.kabel-deutschland.de) (Changing host)
[03:30:54] *** Joins: pavonia (~user@user/siracusa)
[03:30:55] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[03:30:59] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.22)
[03:31:00] *** Joins: jocke-l (jocke-l@a.x0.is)
[03:31:00] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[03:31:04] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[03:31:08] *** Joins: n3t (n3t@s45.mydevil.net)
[03:31:10] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[03:31:13] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[03:31:15] *** Quits: mcfilib (sid302703@id-302703.helmsley.irccloud.com) (Changing host)
[03:31:15] *** Joins: mcfilib (sid302703@user/mcfilib)
[03:31:16] *** Joins: tritlo (sid58727@id-58727.hampstead.irccloud.com)
[03:31:16] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[03:31:22] *** Quits: AndrewYu (~andrew@andrewyu.org) (Changing host)
[03:31:22] *** Joins: AndrewYu (~andrew@user/andrewyu)
[03:31:24] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[03:31:26] *** Quits: slowtyper (~slowtyper@2a02:214c:8630:300:225:64ff:feb7:4668) (Changing host)
[03:31:26] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[03:31:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:31:28] *** Joins: wroathe (~wroathe@user/wroathe)
[03:31:35] *** Joins: _xor (~xor@72.49.199.147)
[03:31:37] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.22) (Changing host)
[03:31:37] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[03:31:43] *** Quits: tritlo (sid58727@id-58727.hampstead.irccloud.com) (Changing host)
[03:31:43] *** Joins: tritlo (sid58727@user/tritlo)
[03:31:53] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[03:31:53] *** onion is now known as yin
[03:32:12] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[03:32:18] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[03:32:19] *** Joins: sander (~sander@user/sander)
[03:32:30] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[03:32:35] *** Joins: haasn (~nand@haasn.dev)
[03:32:41] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[03:32:43] *** Joins: nonzen (~nonzen@user/nonzen)
[03:32:47] *** Joins: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1)
[03:33:00] *** Joins: OscarH (~OscarH@90.201.86.195)
[03:33:03] *** Joins: Teacup (~teacup@user/teacup)
[03:33:09] *** Joins: urdh (~urdh@user/urdh)
[03:33:11] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[03:33:31] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[03:35:11] *** Joins: lstor (~lstor@user/lstor)
[03:35:11] *** Joins: mcglk (~mcglk@131.191.49.120)
[03:35:11] *** Joins: xerox (~edi@user/edi)
[03:35:11] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[03:35:28] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:37:29] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:38:20] *** Joins: xsperry (~xs@user/xsperry)
[03:38:23] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[03:40:01] *** Quits: fendor (~fendor@178.115.69.81.wireless.dyn.drei.com) (Remote host closed the connection)
[03:48:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:49:28] *** Joins: guniberas (~guniberas@42.191.188.121)
[03:49:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:52:05] *** Joins: trillp (~trillp@69.233.98.238)
[03:59:31] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:01:23] *** Joins: Square (~a@178.62.91.8)
[04:03:29] *** Joins: dustee (~dustee@63.81.59.158)
[04:05:16] *** Joins: dajoer (~david@user/gvx)
[04:07:42] *** Quits: n3t (n3t@s45.mydevil.net) (Changing host)
[04:07:42] *** Joins: n3t (n3t@user/n3t)
[04:12:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3) (Remote host closed the connection)
[04:12:13] *** Parts: dustee (~dustee@63.81.59.158) ()
[04:12:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3)
[04:17:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3) (Ping timeout: 264 seconds)
[04:19:11] *** Quits: alx741 (~alx741@181.196.69.253) (Quit: alx741)
[04:19:58] *** Joins: iqubic (~user@2601:602:9502:c70:367a:1ecd:9a9a:53e8)
[04:22:00] *** Quits: Farzad (~FarzadBek@37.49.150.10) (Ping timeout: 260 seconds)
[04:22:11] <iqubic> I wish there was a unified API for Sets and Maps. I want a way to write a single mapping function that could take a Set and modify the values or it could take a Map and modify the keys.
[04:23:17] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:23:42] <iqubic> This is slightly different from fmap. Because while fmap will modify the values in a Set, it will also modify the values in a Map and not touch the Keys.
[04:31:30] <dsal> Sets are Foldable.
[04:31:34] <aegon> iqubic: changing the key of a value on a map is afaik not normally a Map thing
[04:31:56] <aegon> maps store static keys -> possibly mutable values
[04:32:11] *** Quits: proboscis (~proboscis@115-189-83-58.mobile.spark.co.nz) (Ping timeout: 264 seconds)
[04:32:51] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[04:32:56] <iqubic> aegon, that makes a lot of sense.
[04:33:06] <dsal> > foldMap (S.singleton . (*2)) $ S.fromList [1, 2, 2]
[04:33:07] <lambdabot>  fromList [2,4]
[04:33:52] <iqubic> dsal: I'm afraid I don't understand what that code is doing?
[04:34:09] <iqubic> Is that modifying the Keys in the map?
[04:34:17] <dsal> That's a Set, not a map.
[04:34:35] <dsal> It's doing basically the same thing as `fmap (*2) [1, 2, 2]` but with a Set instead of a list.
[04:34:38] <dsal> :t foldMap
[04:34:38] <lambdabot> (Foldable t, Monoid m) => (a -> m) -> t a -> m
[04:34:47] *** Quits: artemis (~artemis@user/artemis) (Ping timeout: 260 seconds)
[04:34:49] <iqubic> Right. Is it possible to modify the Keys of a Map?
[04:35:04] <aegon> i think to change the keys you'd have to remove the old and andd a new in a transaction so probably put it in an MVar or you could create a whole new map every time
[04:35:24] <aegon> it sounds like if you want to perform operations on the keys your looking for something aside from a Map though
[04:35:26] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:35:36] <iqubic> Yeah. I agree.
[04:35:59] <dsal> Well, if I'm really sloppy with what you're saying then there's `mapWithKey` but doing just the keys in isolation doesn't make any sense at all.  There's not enough information.
[04:36:02] *** Joins: proboscis (~proboscis@115-189-133-238.mobile.spark.co.nz)
[04:36:29] <iqubic> I've gotten the interface I want. It's fine now.
[04:37:37] *** Joins: artemis (~artemis@user/artemis)
[04:39:36] <dsal> Actually, other way around...
[04:39:38] <dsal> > M.mapKeysWith (const ) (*2) $  M.fromList [(1, "a"), (2, "b"), (3, "c")]
[04:39:39] <lambdabot>  fromList [(2,"a"),(4,"b"),(6,"c")]
[04:39:52] <dsal> > M.mapKeysWith const odd $  M.fromList [(1, "a"), (2, "b"), (3, "c")]
[04:39:54] <lambdabot>  fromList [(False,"b"),(True,"c")]
[04:40:15] <dsal> This one at least lets you decide what to do on collision.
[04:40:37] <dsal> > M.mapKeys odd $  M.fromList [(1, "a"), (2, "b"), (3, "c")]
[04:40:39] <lambdabot>  fromList [(False,"b"),(True,"c")]
[04:40:43] <dsal> Otherwise, it'll choose for you.
[04:40:49] <dsal> > M.mapKeys show $  M.fromList [(1, "a"), (2, "b"), (3, "c")]
[04:40:50] <lambdabot>  fromList [("1","a"),("2","b"),("3","c")]
[04:42:09] <aegon> dsal: i guess this digs into how Data.Map is optimized, but wouldnt that seriously jumble cache coherency on using the map? in an OO langauge that would be recreating the map but i'm not sure if thats as much of a concern in Data.Map land
[04:42:11] *** Quits: proboscis (~proboscis@115-189-133-238.mobile.spark.co.nz) (Ping timeout: 245 seconds)
[04:42:48] <dsal> I'd assume rekeying a map is not going to be a cheap process in general.
[04:44:10] <iqubic> I'm no longer wanting to rekey a map. I've rethought my API here and I've realized that just using a different data structure makes more sense in general.
[04:44:58] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[04:45:14] *** Joins: proboscis (~proboscis@115-189-129-63.mobile.spark.co.nz)
[04:45:21] *** Quits: _xor (~xor@72.49.199.147) (Quit: WeeChat 3.3)
[04:45:32] *** Joins: _xor (~xor@72.49.199.147)
[04:46:23] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:49:32] *** Quits: mmhat (~mmh@55d4be4b.access.ecotel.net) (Quit: WeeChat 3.3)
[04:49:35] *** Quits: proboscis (~proboscis@115-189-129-63.mobile.spark.co.nz) (Ping timeout: 264 seconds)
[04:50:39] *** Joins: proboscis (~proboscis@115-189-134-103.mobile.spark.co.nz)
[04:52:54] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:53:47] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[04:54:03] *** Joins: vicfred (~vicfred@user/vicfred)
[04:54:13] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:57:25] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:01:19] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[05:03:01] *** Quits: proboscis (~proboscis@115-189-134-103.mobile.spark.co.nz) (Ping timeout: 245 seconds)
[05:03:40] *** Joins: ceedon (~ceedon@172-11-250-42.lightspeed.tukrga.sbcglobal.net)
[05:03:54] *** Joins: proboscis (~proboscis@115-189-134-232.mobile.spark.co.nz)
[05:05:58] *** yin is now known as onion
[05:07:41] *** Quits: ceedon (~ceedon@172-11-250-42.lightspeed.tukrga.sbcglobal.net) (Remote host closed the connection)
[05:09:37] *** Joins: ceedon (~ceedon@172-11-250-42.lightspeed.tukrga.sbcglobal.net)
[05:13:59] *** Quits: xff0x (~xff0x@2001:1a81:529e:f300:d3c7:e134:91d9:4541) (Ping timeout: 260 seconds)
[05:14:02] *** onion is now known as yin
[05:14:16] *** Quits: ceedon (~ceedon@172-11-250-42.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 245 seconds)
[05:15:39] *** Joins: xff0x (~xff0x@2001:1a81:52e0:c000:6019:bb95:26f0:c29b)
[05:17:46] *** yin is now known as onion
[05:19:04] *** onion is now known as oion
[05:19:17] *** oion is now known as onion
[05:20:47] *** Quits: proboscis (~proboscis@115-189-134-232.mobile.spark.co.nz) (Ping timeout: 264 seconds)
[05:22:05] *** Joins: proboscis (~proboscis@115-189-86-19.mobile.spark.co.nz)
[05:34:53] *** onion is now known as yin
[05:36:05] *** Quits: proboscis (~proboscis@115-189-86-19.mobile.spark.co.nz) (Ping timeout: 264 seconds)
[05:36:43] *** Joins: proboscis (~proboscis@115-189-85-1.mobile.spark.co.nz)
[05:36:43] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Quit: Leaving)
[05:36:51] *** yin is now known as zzz
[05:45:19] <lechner> Hi, can Database.PostgreSQL.Simple connect custom database types like pg-semver with the Haskell semver type, or should I go via text() in the query? Thanks!
[05:45:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[05:45:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:47:14] *** Quits: proboscis (~proboscis@115-189-85-1.mobile.spark.co.nz) (Ping timeout: 246 seconds)
[05:47:45] *** Joins: proboscis (~proboscis@115-189-81-242.mobile.spark.co.nz)
[05:58:26] *** Quits: proboscis (~proboscis@115-189-81-242.mobile.spark.co.nz) (Ping timeout: 246 seconds)
[05:59:12] *** Joins: proboscis (~proboscis@115-189-86-194.mobile.spark.co.nz)
[05:59:29] *** Quits: artemis (~artemis@user/artemis) (Ping timeout: 264 seconds)
[06:00:15] *** Joins: artemis (~artemis@user/artemis)
[06:06:15] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[06:06:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[06:07:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 245 seconds)
[06:08:43] *** Joins: tungki (~tungki@subs31-116-206-15-39.three.co.id)
[06:09:44] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:15:56] *** Quits: proboscis (~proboscis@115-189-86-194.mobile.spark.co.nz) (Ping timeout: 245 seconds)
[06:16:46] *** Joins: proboscis (~proboscis@115-189-81-196.mobile.spark.co.nz)
[06:18:05] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 260 seconds)
[06:18:25] <iqubic> What does the Foldable instance for Data.Map do? Would the toList function get a list of keys, or a list of values?
[06:22:16] *** Joins: Sgeo (~Sgeo@user/sgeo)
[06:23:03] *** Quits: td_ (~td@muedsl-82-207-238-132.citykom.de) (Ping timeout: 260 seconds)
[06:24:23] *** Quits: xff0x (~xff0x@2001:1a81:52e0:c000:6019:bb95:26f0:c29b) (Ping timeout: 264 seconds)
[06:24:40] *** Joins: td_ (~td@muedsl-82-207-238-253.citykom.de)
[06:26:00] *** Joins: xff0x (~xff0x@2001:1a81:52f0:9300:e3ac:46aa:98d2:36ad)
[06:26:15] *** Quits: yushyin (0Ujx9gMz8O@karif.server-speed.net) (Quit: WeeChat 3.3)
[06:26:27] *** Joins: yushyin (vmwyqzEgOc@karif.server-speed.net)
[06:26:51] <c_wraith> iqubic: looking at the type should answer that
[06:27:02] <iqubic> Yeah. I've figure it out now.
[06:27:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:28:35] *** Quits: proboscis (~proboscis@115-189-81-196.mobile.spark.co.nz) (Ping timeout: 265 seconds)
[06:29:13] *** Joins: proboscis (~proboscis@115-189-82-114.mobile.spark.co.nz)
[06:29:51] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[06:36:06] *** Quits: proboscis (~proboscis@115-189-82-114.mobile.spark.co.nz) (Read error: Connection reset by peer)
[06:36:23] *** Joins: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz)
[06:45:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[06:46:09] *** Quits: ishutin (~ishutin@92-249-141-159.pool.digikabel.hu) (Read error: Connection reset by peer)
[06:46:32] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[06:46:53] *** Quits: td_ (~td@muedsl-82-207-238-253.citykom.de) (Ping timeout: 264 seconds)
[06:48:09] *** Joins: td_ (~td@muedsl-82-207-238-113.citykom.de)
[06:48:32] *** Joins: ishutin (~ishutin@62-165-208-189.pool.digikabel.hu)
[06:50:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 246 seconds)
[06:53:13] <dsal> lechner: not sure about the specific types you're referring to, but it can do some quite flexible things
[06:56:11] <sm> anybody running haskell on macos monterey ? any problems ?
[06:56:49] <ski> % :t Data.Map.toList @(Data.Map.Map Int String)
[06:56:49] <yahb> ski: Map (Map Int String) a -> [(Map Int String, a)]
[06:57:36] <ski> % :t Data.Foldable.toList @(Data.Map.Map Int)
[06:57:36] <yahb> ski: Map Int a -> [a]
[07:11:19] <lechner> dsal: thanks!
[07:13:05] <dsal> lechner: just got to a computer and looked.  Yeah, basically you'd just need one of these:  https://hackage.haskell.org/package/postgresql-simple-0.6.4/docs/Database-PostgreSQL-Simple-FromField.html#t:FromField (and the other direction)
[07:14:10] <dsal> Towards the DB is pretty easy because you just need to get a ByteString or something.  From the DB, you'll get a lot of metadata and a bytestring
[07:15:56] <lechner> dsal: that looks great!
[07:18:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[07:20:05] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:32:19] *** Quits: burakcank (burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 252 seconds)
[07:37:29] *** Quits: tungki (~tungki@subs31-116-206-15-39.three.co.id) (Remote host closed the connection)
[07:38:02] *** Joins: tungki (~tungki@subs20-114-142-172-14.three.co.id)
[07:39:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:39:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:39:38] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[07:44:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:46:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:46:29] *** Joins: zebrag (~chris@user/zebrag)
[07:46:53] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[08:01:43] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:01:52] *** zzz is now known as yin
[08:05:07] *** Parts: yin (~z@user/zero) ()
[08:05:50] *** Quits: hueso (~root@user/hueso) (Quit: No Ping reply in 180 seconds.)
[08:06:23] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[08:07:00] *** Joins: hueso (~root@user/hueso)
[08:22:59] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.119)
[08:25:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:35:53] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:40:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:10:10] *** Quits: faultline (~christian@193.27.14.21) (Ping timeout: 260 seconds)
[09:27:48] *** Joins: Farzad (~FarzadBek@109.203.185.154)
[09:27:51] *** Quits: Farzad (~FarzadBek@109.203.185.154) (Client Quit)
[09:30:49] *** Quits: awth13 (~awth13@user/awth13) (Remote host closed the connection)
[09:33:49] *** Quits: tungki (~tungki@subs20-114-142-172-14.three.co.id) (Ping timeout: 256 seconds)
[09:41:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:43:33] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.119) (Read error: Connection reset by peer)
[09:49:15] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[09:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[09:50:02] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[09:50:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[09:52:54] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:54:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 265 seconds)
[10:02:35] *** Joins: cheater1__ (~Username@user/cheater)
[10:02:46] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[10:02:49] *** cheater1__ is now known as cheater
[10:04:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:14:08] *** Joins: Hero (~E-Kolay@212.108.153.129)
[10:14:11] *** Parts: Hero (~E-Kolay@212.108.153.129) ()
[10:17:01] *** Joins: zangi (~zangi@103.154.230.133)
[10:17:38] <zangi> hey, do you need to re-run `hoogle generate` after you run `cabal update`?
[10:19:13] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[10:20:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:20:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:20:51] *** Joins: wroathe (~wroathe@user/wroathe)
[10:25:20] *** Joins: tungki (~tungki@subs31-116-206-15-21.three.co.id)
[10:25:32] <c_wraith> you should need to.  cabal update only updates the index file, not any installed packages
[10:25:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[10:25:36] <c_wraith> *shouldn't
[10:29:16] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 245 seconds)
[10:30:02] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[10:30:45] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[10:32:00] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374)
[10:32:34] *** Quits: tungki (~tungki@subs31-116-206-15-21.three.co.id) (Remote host closed the connection)
[10:33:11] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[10:42:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:46:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[10:48:23] *** Joins: Farzad (~FarzadBek@178.131.28.251)
[10:53:55] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[10:54:39] *** Joins: zincy__ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[10:56:09] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:58:01] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Ping timeout: 245 seconds)
[11:11:46] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[11:13:42] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[11:19:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[11:24:23] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 264 seconds)
[11:25:13] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[11:26:04] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[11:33:19] *** Quits: zincy__ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[11:35:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:54] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d89cc95ba723fa3afc9.dip0.t-ipconnect.de)
[11:38:05] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:46:30] *** Quits: zangi (~zangi@103.154.230.133) (Quit: zangi)
[11:49:30] *** Joins: AlexNoo (~AlexNoo@178.34.163.209)
[11:50:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:56:12] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:9dd3:1e99:a750:2941)
[11:57:43] *** Inst__ is now known as Inst
[12:01:47] *** Joins: ikke (~kevin@alpine/developer/ikke)
[12:02:25] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[12:13:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:18:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[12:19:02] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[12:19:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[12:19:49] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[12:23:02] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:24:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 264 seconds)
[12:25:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:29:04] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[12:29:04] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:29:22] *** Joins: gentauro (~gentauro@user/gentauro)
[12:33:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:34:31] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:34:50] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:25] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[12:40:58] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[12:47:23] *** Joins: zaquest (~notzaques@5.128.210.178)
[12:53:15] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:54:34] *** Joins: ksu (~ksu@user/prtr)
[12:54:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:9dd3:1e99:a750:2941) (Ping timeout: 264 seconds)
[13:02:28] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[13:11:31] <unit73e> Sometimes I wonder why tutorials like to teach the wrong way just because it's simpler. I was continuing the SDL2 examples and noticed most examples use surfaces instead of textures but virtually all devices nowadays have a GPU. No point in using software rendering.
[13:11:44] <unit73e> That just confuses beginners imo
[13:11:53] *** Joins: themc47 (~mc47@xmonad/TheMC47)
[13:13:29] <unit73e> might be a bit easier to code but in the real world all games use hardware acceleration
[13:14:41] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 245 seconds)
[13:20:06] *** Quits: themc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[13:23:06] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[13:23:53] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[13:35:47] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 264 seconds)
[13:43:05] *** Joins: fendor (~fendor@178.115.69.81.wireless.dyn.drei.com)
[13:47:31] *** Joins: trainlag1602 (~saroa@user/trainlag1602)
[13:53:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:55:34] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[13:56:21] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:58:18] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:03:29] <juri_> hey, is there a `mustNotBe` to be the inverse of `shouldBe` in hunit?
[14:05:27] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:06:14] <juri_> oh, sorry, hspec, not hunit.
[14:08:46] *** Joins: viluon (uid453725@id-453725.helmsley.irccloud.com)
[14:08:56] *** Quits: xff0x (~xff0x@2001:1a81:52f0:9300:e3ac:46aa:98d2:36ad) (Remote host closed the connection)
[14:09:13] *** Joins: xff0x (~xff0x@2001:1a81:52f0:9300:56a6:e6bc:62c4:b7e4)
[14:09:35] <juri_> oh, there is. thanks for nothing! :D
[14:09:46] <manicennui> https://hackage.haskell.org/package/hspec-expectations-0.8.2/docs/Test-Hspec-Expectations.html
[14:09:50] <manicennui> Yeah, just found it.
[14:10:17] <juri_> hard to search for. should have just drilled into hackage instead. *shrugs*
[14:10:21] <juri_> thanks. :)
[14:14:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:15:19] *** Joins: guniberas (~guniberas@42.191.188.121)
[14:19:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[14:19:48] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:21:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[14:22:20] *** Joins: mmhat (~mmh@55d4bc38.access.ecotel.net)
[14:23:49] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d89cc95ba723fa3afc9.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:24:57] <maerwald> c_wraith: do you have an account on gitlab.haskell.org?
[14:25:53] *** Quits: xff0x (~xff0x@2001:1a81:52f0:9300:56a6:e6bc:62c4:b7e4) (Ping timeout: 264 seconds)
[14:25:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[14:26:23] *** Joins: xff0x (~xff0x@2001:1a81:52f0:9300:48ef:5b4a:4ac:bf95)
[14:37:16] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[14:38:27] *** Joins: aga (~a@p200300ef973db19d4086f0a6a24fc4dd.dip0.t-ipconnect.de)
[14:39:20] <aga> Can I specify the name of the log file when I do $ stack build --profile -- myexe ... ?
[14:40:33] <aga> I tried to use the GHC flag -ohi but that doesn't work.
[14:42:41] <aga> *exec not build
[14:47:33] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[14:47:49] *** Joins: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:dd79:459d:8214:30ba)
[14:47:59] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[14:48:25] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:50:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 268 seconds)
[14:52:00] *** Joins: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:55ef:5d0:c1e8:90b)
[14:54:59] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[14:55:17] *** Quits: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:dd79:459d:8214:30ba) (Ping timeout: 264 seconds)
[15:09:02] *** Joins: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:30bc:a359:39b5:99ae)
[15:11:43] *** Quits: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:55ef:5d0:c1e8:90b) (Ping timeout: 268 seconds)
[15:12:20] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:13:03] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[15:13:52] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[15:15:23] *** Joins: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:d418:453f:8e01:9edf)
[15:18:05] *** Quits: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:30bc:a359:39b5:99ae) (Ping timeout: 246 seconds)
[15:18:06] *** Joins: chisui (~chisui@95.33.35.0)
[15:19:36] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[15:20:22] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[15:24:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:27:57] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[15:28:44] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[15:30:47] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Client Quit)
[15:31:33] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[15:33:18] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:33:44] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:38:45] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[15:40:24] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:41:08] *** Quits: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:d418:453f:8e01:9edf) (Read error: Connection reset by peer)
[15:50:54] *** Quits: chisui (~chisui@95.33.35.0) (Quit: Client closed)
[15:57:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:58:44] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:02:18] *** Quits: proboscis (~proboscis@115-189-129-117.mobile.spark.co.nz) (Ping timeout: 265 seconds)
[16:07:37] *** Joins: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz)
[16:08:57] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:09:19] *** Joins: __monty__ (~toonn@user/toonn)
[16:13:27] *** Joins: benin (~benin@183.82.30.38)
[16:15:31] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[16:22:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:23:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[16:23:54] *** Quits: Raito_Bezarius (~Raito@2a01:e0a:5f9:9681:a0a0:bb76:611f:9da7) (Changing host)
[16:23:54] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[16:27:12] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[16:27:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[16:29:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:29:24] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[16:29:28] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:29:46] *** Joins: max22- (~maxime@2a01cb0883359800f7ab1f6aa3293843.ipv6.abo.wanadoo.fr)
[16:31:54] *** Joins: dariof4 (~dariof4@134.0.0.51)
[16:32:22] *** Quits: Alex_test (~al_test@178.34.163.209) (Quit: ;-)
[16:32:28] *** Quits: AlexZenon (~alzenon@178.34.163.209) (Quit: ;-)
[16:33:01] *** Quits: AlexNoo (~AlexNoo@178.34.163.209) (Quit: Leaving)
[16:33:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[16:34:05] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[16:34:05] *** Joins: asm (~alexander@user/asm)
[16:35:35] *** Joins: kn07_ (~kn07_@86.121.23.168)
[16:36:02] *** Quits: kn07_ (~kn07_@86.121.23.168) (Remote host closed the connection)
[16:37:21] *** Parts: trainlag1602 (~saroa@user/trainlag1602) ()
[16:47:43] *** Joins: AlexZenon (~alzenon@178.34.163.209)
[16:48:22] *** Joins: jespada (~jespada@181.28.253.200)
[16:48:31] *** Quits: jespada (~jespada@181.28.253.200) (Client Quit)
[16:48:54] *** Joins: Alex_test (~al_test@178.34.163.209)
[16:50:57] *** Joins: AlexNoo (~AlexNoo@178.34.163.209)
[16:56:06] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:01:53] *** Quits: max22- (~maxime@2a01cb0883359800f7ab1f6aa3293843.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[17:02:27] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[17:14:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:14:40] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[17:16:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:17:23] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[17:30:02] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:30:22] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:37:19] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:41:55] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:44:37] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[17:44:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[17:47:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[18:00:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:00:52] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[18:05:41] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[18:09:25] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:11:09] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:15:55] *** Joins: boxscape_ (~boxscape_@i577BCB53.versanet.de)
[18:17:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[18:20:51] *** Joins: floridmarshmallo (~quickspin@pool-100-19-29-41.phlapa.fios.verizon.net)
[18:20:59] *** Joins: burnsidesLlama (~burnsides@client-8-89.eduroam.oxuni.org.uk)
[18:21:17] *** Quits: burnsidesLlama (~burnsides@client-8-89.eduroam.oxuni.org.uk) (Read error: Connection reset by peer)
[18:21:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[18:22:18] *** Quits: floridmarshmallo (~quickspin@pool-100-19-29-41.phlapa.fios.verizon.net) (Client Quit)
[18:22:29] <zincy_> Any ideas how to model mealy machines?
[18:24:33] <Ollie[m]> zincy_ https://hackage.haskell.org/package/machines-0.7.2/docs/Data-Machine-Mealy.html is one option
[18:24:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[18:24:57] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[18:24:59] <zincy_> Is there a way of doing similar with say Streamly?
[18:25:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:25:30] <zincy_> So this is one way of encoding machines as "streams" right?
[18:25:47] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:27:28] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[18:28:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 264 seconds)
[18:28:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[18:29:02] *** Joins: son0p (~ff@181.136.122.143)
[18:29:37] <davean> I'm not sure how streamly could do it
[18:29:57] <davean> Well I mean in a sesne theres a larger embeding it could do
[18:30:06] <davean> what does moeling a mealy machine mean to you?
[18:30:20] <zincy_> Here is the problem, I am lost in this design space :D
[18:30:29] <davean> I'm pretty sure streamly can't perform operations on a mealy machine - just execute it
[18:30:40] <zincy_> Maybe the best thing to do it give Machines a shot and learn the hard way ? :D
[18:30:47] <davean> er, to clarrify - operations on the mealy machine as a mathematical object
[18:31:15] <zincy_> I am still learning what a Mealy machine is tbh
[18:31:30] <zincy_> By modelling I was referring to Haskell code
[18:31:47] <zincy_> I.e custom monad vs Machines
[18:33:20] <davean> if you have machines questions I can answer them
[18:34:06] <zincy_> oh great where do I start :D
[18:34:44] <davean> basicly theres two parts - PlanT which is the monad constructor, and MachineT which is the actual engine
[18:35:06] <davean> you write your thing as the PlanT monad typically and "compile" it to a machine
[18:35:48] <zincy_> Is the Fail data constructor for signifying the machine cannot process the action?
[18:36:02] <zincy_> If I have two machines linked
[18:36:10] <davean> The thing thats notably abotu machines vs. other iterative streaming libraries is that theres an actual general operation used to step the next result
[18:36:36] <zincy_> one produces eithers and the other reads eithers, can the second one  use awaits with the unwrapped Right value?
[18:36:47] <davean> No
[18:36:51] <davean> thats the MonadFail fail
[18:37:05] <davean> so maybe?
[18:37:18] <zincy_> So when is fail used?
[18:37:34] <davean> fail is used to handle the match failure on <- in do notation
[18:37:47] <zincy_> Oh so I shouldnt concern myself with it
[18:37:50] <zincy_> When writing a plan
[18:38:14] <zincy_> The first machine would Just yield Either a b and the other machine would await Either a b 
[18:39:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:39:13] <davean> MonadFail is how that works in Haskell
[18:39:35] <davean> yep thats pretty simple
[18:39:36] *** Joins: neurocyte0132889 (~neurocyte@185.117.69.128)
[18:39:36] *** Quits: neurocyte0132889 (~neurocyte@185.117.69.128) (Changing host)
[18:39:36] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:39:42] <davean> so the thing I was talking about
[18:39:52] <davean> awaits :: k i -> Plan k o i 
[18:39:57] <davean> see how it has a k i?
[18:40:00] <davean> you get an actual selector
[18:40:09] <davean> you probably want await :: Category k => Plan (k i) o i 
[18:40:12] <zincy_> So is k i my "query"
[18:40:16] <davean> (for what you're talking about there)
[18:40:28] <davean> yes, k i is your query saying "under semantic k, give me an i"
[18:40:50] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:41:11] <davean> but you don't have to do this streaming thing to use mealy machines
[18:41:23] <davean> AutomatonM means there is a lifting into machines
[18:41:27] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[18:41:29] <davean> but MealyT m a b exists on its own
[18:41:43] *** Joins: Skyfire (~pyon@user/pyon)
[18:41:46] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 252 seconds)
[18:42:01] <davean> (you'll probably WANT the streaming stuff mind you, but you don't NEED it)
[18:42:31] <davean> So to start with we have its a category
[18:42:34] <davean> so we get (.) :: forall (b :: k) (c :: k) (a :: k). MealyT m b c -> MealyT m a b -> MealyT m a c
[18:43:17] <davean> given a machine reading 'a's, and producing 'b's and a machine reading 'b's and producing 'c's we can compose them into a machine reading 'a's and producing 'c's
[18:43:34] <davean> Its also Arrow, so we can lift functions arr :: (b -> c) -> MealyT m b c
[18:43:52] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:44:04] <davean> Making sense?
[18:44:22] <zincy_> great, the last bit makes sense about composing Mealy machines
[18:44:36] <zincy_> Still confused about the k i
[18:44:50] <davean> ok, so normally you'd have "Is a"
[18:44:51] <zincy_> Is k typically a monadic type to express whether we want to process the input
[18:45:00] <davean> no, k isn't monadic
[18:45:04] <davean> k is usually Is
[18:45:35] <davean> so all the streaming libraries you've used fit their semantics ~ into Is (pushback being a case where that isn't true)
[18:45:50] <davean> awaits (Is a) says "give me an a"
[18:46:40] <zincy_> So (Is a) is essentially a way of matching on a type that wraps the input?
[18:46:58] <davean> It doesn't wrap it, it says it wants it here, let me give a demo
[18:47:08] <zincy_> ok 
[18:47:44] *** Quits: xff0x (~xff0x@2001:1a81:52f0:9300:48ef:5b4a:4ac:bf95) (Ping timeout: 246 seconds)
[18:47:45] <davean> awaits (Refl::Is (Either a b))
[18:47:54] <davean> there k is (Is (Either a b))
[18:48:01] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[18:48:10] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:48:13] <davean> which forces the i, in k i to be (Either a b)
[18:48:27] <davean> (because Is is a GADT with a constraint)
[18:48:31] <zincy_> So its like proxy
[18:48:34] <davean> Yes
[18:48:34] *** Joins: xff0x (~xff0x@2001:1a81:52f0:9300:c38e:4fda:aa4c:3e21)
[18:48:37] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:6122:580e:b697:71e1)
[18:48:37] <davean> very much so
[18:48:38] <zincy_> Ah cool
[18:48:42] <davean> so
[18:48:45] <davean> why do we have k at all?
[18:48:47] <zincy_> How can it form a category
[18:48:49] <davean> Well we can do a LOT MORe
[18:49:04] <zincy_> Ooh what more
[18:49:04] <davean> we can for example do a stack machine
[18:49:09] <davean> https://hackage.haskell.org/package/machines-0.7.2/docs/Data-Machine-Stack.html
[18:49:21] <davean> we can "Pop Either a b"
[18:49:27] <davean> or we can Push Right 5
[18:49:28] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[18:49:34] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:49:39] <davean> For example
[18:49:48] <davean> this is usually custom coded into other libraries
[18:49:55] <davean> or
[18:50:28] <davean> I have a system that abstracts over files on disk, or data in memory using machines that has two operations "Read" and "Seek" seek returns () but moves our pointer in the file
[18:50:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:51:01] <davean> I also have a combinator "Timeout" that allows us to say how long we'll wait for a response before we want to return without data
[18:51:02] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[18:51:05] *** Quits: aga (~a@p200300ef973db19d4086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:51:08] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:51:09] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:51:20] <davean> So how is it a category? Uh, in the most boring way possible.
[18:51:30] <davean> Its not an exciting category
[18:52:04] <zincy_> Im finding it hard to see how the (Is a) comes into the examples you gave
[18:52:13] <davean> It doesn't
[18:52:21] <davean> Is is the equivilent of my Read in the seeking one
[18:52:22] <zincy_> oh ok
[18:52:31] <davean> Is is the basic fixed query
[18:52:45] <davean> you can replace it with more exicting query types
[18:52:55] *** Joins: aga (~a@p200300ef973db1e74086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:52:57] <zincy_> Ah right
[18:52:59] <davean> having a k of Is says "I will only ever ask youfor the next thing"
[18:53:10] <davean> Refl is my Read above
[18:53:17] <davean> (Refl being a constructor of Is)
[18:53:27] <davean> so k is always something specific
[18:53:34] <davean> like "Stack"
[18:53:35] <zincy_> So you don't have to use Is as k but it is a useful choice
[18:53:40] <davean> Right
[18:53:51] <davean> You can use sometyhing more exicting
[18:53:53] <zincy_> Any category can be used to select the input we want
[18:54:05] <davean> and most of them have an identity ish eliment equivilent to Refl
[18:54:22] <davean> Doesn't HAVE to be a category actually - awaits isn't constrainted
[18:54:34] <davean> await though only knows how to get the default boring query out of a Category
[18:54:55] <davean> If its a category, we can do the simple versions
[18:55:09] <davean> if its not, we have to do everything manually
[18:55:16] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:55:24] <davean> we can only "reason" about it as a category?
[18:55:30] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Client Quit)
[18:55:33] <davean> IDK how to say this pithily
[18:56:10] <davean> That all making sense now?
[18:56:35] <zincy_> Ah yes k isnt necessarily a category for awaits
[18:56:54] <davean> We just only get the simple case when it is
[18:56:55] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:57:04] <zincy_> Is the difference between awaits vs await one is less manual than the other?
[18:57:36] <davean> Yep
[18:57:38] <davean> exactly
[18:57:40] *** Joins: alx741 (~alx741@181.196.69.253)
[18:57:52] <davean> awaits is the manual version, await is the onethat just pulls out the identity case
[18:58:05] <davean> Category says "we have the right sort of identity laying around"
[18:58:20] <davean> Thats ... it
[18:58:26] <davean> most boring sense of being categorical
[18:58:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:58:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:58:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:58:47] <zincy_> Awesome I think this is making sense now!
[18:59:07] <zincy_> So say you have this.   awaits (Refl::Is (Either a b))
[18:59:27] <davean> (Which BTW is exactly "await")
[18:59:41] *** Quits: sm2n (~sm2n@user/sm2n) (Remote host closed the connection)
[18:59:41] <zincy_> ah interesting
[18:59:43] <davean> (If you want to do it non-manually)
[19:00:00] *** Joins: sm2n (~sm2n@user/sm2n)
[19:00:18] <zincy_> And you get a Left which means you dont want to do anything further. Would you just not yield anything
[19:00:21] <zincy_> and return ()
[19:00:25] <zincy_> Or use Done
[19:01:17] <davean> stop ideally, but you can just end your monad
[19:01:33] <davean> The difference between plan and machien is machine doesn't "have a value" to "return"
[19:01:36] <davean> it just streams
[19:01:44] <davean> so any () will be rewriten away when you compile it
[19:01:54] <davean> (they're there until you do though, and you can use them - hence the plan)
[19:02:00] <zincy_> awesome
[19:02:11] *** Quits: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[19:02:29] <zincy_> So if multiple plans feed off each other is that one machine?
[19:02:32] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:6122:580e:b697:71e1) (Remote host closed the connection)
[19:02:49] <zincy_> Say one plan relies on two different inputs of other plans
[19:02:57] <zincy_> (I guess that is a common use case)
[19:03:29] <davean> So yes because you can compose machines.
[19:04:03] <zincy_> So compile each plan to a machine then compose machines.
[19:04:19] <davean> generally thats the way I'd do it, there are special complicated cases
[19:04:23] <davean> but you don't care about complications :)
[19:04:44] <zincy_> Okay thank you so much!
[19:04:52] <zincy_> This has been tremendously helpful
[19:05:00] <zincy_> Do you have any code examples btw?
[19:05:12] <zincy_> I found the one on the hackage readme obviously :)
[19:06:23] <davean> Haha yes I have examples but my examples are mostly complicated! They mostly exist because I'm using the power
[19:06:31] <davean> they're PROBABLY not what you want to look at yet
[19:07:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[19:07:29] *** Joins: hippoid (~idris@184.105.6.88)
[19:08:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[19:08:38] <zincy_> davean: Okay I'll save them till I am ready :)
[19:08:44] <zincy_> Time to make some machines
[19:08:49] <zincy_> Thanks again!
[19:08:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[19:08:56] <davean> No problem
[19:09:35] <hippoid> @free x::a->b->c
[19:09:35] <lambdabot> h . x y = x (f y) . g
[19:09:50] <davean> zincy_: you probably want to look at https://hackage.haskell.org/package/machines-0.7.2/docs/Data-Machine-Process.html it has the "simple cases" for normal stream processing
[19:09:56] <davean> and things like ~> for composing
[19:10:40] <davean> (~> feeds one machine's output into another's input)
[19:10:56] <zincy_> ah yes
[19:10:59] <hippoid> in '@free x::a->b->c', how do I know what terms 'f, g, h, x, y' correspond to which types 'a, b, c'?
[19:12:00] <hippoid> or in this simpler example
[19:12:14] <hippoid> @free x::a->a
[19:12:14] <lambdabot> f . x = x . f
[19:12:23] <hippoid> where did f come from?
[19:16:51] <c_wraith> f is any function that will type-check there
[19:17:06] <c_wraith> which is, in fact, any function
[19:18:10] <c_wraith> maerwald: I do not have an account there
[19:18:16] <hippoid> c_wraith: ok that makes sense. Thanks!
[19:20:07] *** Quits: Farzad (~FarzadBek@178.131.28.251) (Quit: Leaving)
[19:20:44] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[19:20:58] *** Joins: max22- (~maxime@2a01cb0883359800e36f11616f1a350a.ipv6.abo.wanadoo.fr)
[19:22:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:23:16] *** Joins: fendor_ (~fendor@178.115.79.50.wireless.dyn.drei.com)
[19:25:18] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:25:32] *** Quits: fendor (~fendor@178.115.69.81.wireless.dyn.drei.com) (Ping timeout: 246 seconds)
[19:26:22] <davean> c_wraith: is that strictly true? Its been almost a year since I played in the scary areas so I'm out of practice
[19:27:58] <c_wraith> in the general case, it's any function that will type-check.  id is a special case in that it will work with any function at all.
[19:28:14] *** fendor_ is now known as fendor
[19:28:51] <davean> right
[19:28:58] <davean> Levity and such
[19:29:25] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[19:29:42] <monochrom> Ah, right. Suppose f::X->Y, then the equation says (x::Y->Y) . f = f . (x::X->X)
[19:30:29] <c_wraith> yeah. you do have to instantiate it at different types
[19:30:55] <davean> details!
[19:31:22] <davean> Turns out they exist, now what are we going to do?
[19:31:24] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:32:18] <monochrom> exorcise?  "the devil is in the details" therefore exorcise the devil i.e. the details!
[19:32:43] <monochrom> the details are coming back to haunt you tomorrow ooooooooo....
[19:33:39] <monochrom> alternatively I heard that if you offer candies, they'll offer a truce...
[19:34:23] <davean> I think in good mathematical tradition I'm going to hide behind a sturdy defense of axiom selection
[19:41:03] <jollygood2> hi. excuse me for being completely offtopic, but what browser/specialized program can I use to download page from subscription website for offline browsing? I have a month long subscription to some site that expires in a few days, and I did not have time to access it at all due to some unforeseen circumstances. chrome doesn't even save all simple images, it just links them to the original site
[19:41:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[19:50:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:51:59] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:52:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 264 seconds)
[19:55:04] <ksu> /part/part
[19:55:09] <ksu> sorry
[19:58:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:58:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:58:06] *** Joins: wroathe (~wroathe@user/wroathe)
[20:01:17] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 264 seconds)
[20:03:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[20:10:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[20:11:07] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:12:23] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[20:12:38] *** Joins: Farzad (~FarzadBek@5.234.230.191)
[20:16:01] *** Joins: sagax (~sagax_nb@user/sagax)
[20:16:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:16:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:12] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[20:26:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[20:28:12] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:28:15] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:29:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[20:29:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:29:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:29:15] *** Joins: wroathe (~wroathe@user/wroathe)
[20:30:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 268 seconds)
[20:38:35] *** Joins: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net)
[20:43:17] *** Quits: dariof4 (~dariof4@134.0.0.51) (Ping timeout: 264 seconds)
[20:44:36] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[20:44:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3)
[20:45:13] *** Joins: dariof4 (~dariof4@5.179.181.91)
[20:45:20] *** Quits: Farzad (~FarzadBek@5.234.230.191) (Ping timeout: 246 seconds)
[20:48:01] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[20:50:35] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 260 seconds)
[20:51:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[20:53:55] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[20:54:27] *** Joins: econo (uid147250@user/econo)
[20:55:38] *** Quits: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:57:07] *** Quits: aga (~a@p200300ef973db1e74086f0a6a24fc4dd.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[20:57:12] *** Joins: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net)
[21:02:23] *** Quits: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[21:04:18] <maerwald> is there a way to hide certain exports with `module Foo ( module Foo ) where`?
[21:04:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:05:26] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:06:02] *** Quits: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com) (Remote host closed the connection)
[21:06:21] <monochrom> Unfortunately no.
[21:11:45] *** Joins: ubert (~Thunderbi@178.115.67.5.wireless.dyn.drei.com)
[21:12:36] *** Joins: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com)
[21:12:38] *** Quits: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3) (Remote host closed the connection)
[21:14:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[21:14:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[21:15:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:42] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:18:52] <dsal> Is `( module Foo )` the same as not having that there?
[21:19:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[21:19:09] *** Joins: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi)
[21:21:17] <maerwald> in my case no
[21:21:27] <maerwald> there are several re-exports
[21:21:52] <maerwald> some of those export the same things, it's easier to have an exclude list
[21:22:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:22:30] <boxscape_> do you actually have the module itself in its own export list or did you just choose "Foo" as example name twice?
[21:22:54] <maerwald> yes
[21:23:30] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[21:23:47] *** Joins: aegon (~mike@174.127.249.180)
[21:25:47] <boxscape_> okay right I just read up on what a module exporting itself does, interesting
[21:26:06] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[21:26:08] *** Quits: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi) (Ping timeout: 265 seconds)
[21:26:39] *** Quits: dariof4 (~dariof4@5.179.181.91) (Ping timeout: 268 seconds)
[21:27:00] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:27:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[21:28:34] *** Joins: dariof4 (~dariof4@5.77.103.193)
[21:31:07] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[21:32:12] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:32:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:32:44] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:32:49] *** Quits: max22- (~maxime@2a01cb0883359800e36f11616f1a350a.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[21:33:26] *** Joins: Nachtgespenst (~user@user/siracusa)
[21:34:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[21:37:58] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[21:39:39] <maerwald> is there a way to compile windows code without starting a VM?
[21:40:44] <maerwald> maybe via wine? :p
[21:42:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:43:20] *** Joins: zebrag (~chris@user/zebrag)
[21:43:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[21:44:09] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[21:44:24] *** Joins: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net)
[21:44:41] <maerwald> https://wiki.haskell.org/GHC_under_Wine
[21:44:48] <maerwald> 10 years old stuff on the wiko, as always
[21:45:08] <maerwald> "grab the latest windows version of haskell platform: wine HaskellPlatform-2012.4.0.0-setup.exe"
[21:45:10] <maerwald> right
[21:45:51] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[21:46:33] <maerwald> apparently, installing powershell in wine isn't easy
[21:47:26] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[21:47:54] <Nachtgespenst> Is the Haskell platform still a thing?
[21:48:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[21:48:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[21:48:42] <maerwald> the solution was to execute a random binary from the internet (as usual on windows)
[21:49:10] *** Quits: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:50:09] <geekosaur> apparently it still is, although it's not recommended any more
[21:50:27] <geekosaur> stack and cabal both provide much more flexible and better solutions
[21:50:45] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[21:50:47] *** Quits: ubert (~Thunderbi@178.115.67.5.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[21:51:53] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[21:51:55] <maerwald> alright, running ghcup windows installer under wine installed powershell didn't work very well
[21:52:06] <shapr> sm: yes, I've recently tried ghc on monterey
[21:52:33] <sm> hey shapr, everything working as expected ?
[21:52:37] <shapr> didn't see any difference from big sur
[21:52:51] <sm> thanks
[21:53:08] <shapr> For whatever reason my work mac kernel panics after about 45 minutes of compiling, but that was true with big sur, and monterey didn't make a differenc.
[21:53:38] <sclv> the haskell platform is _not_ still a thing. or rather, the webpage exists but it simply recommends using ghcup
[21:53:39] <sm> yikes
[21:54:20] <shapr> sm: I've tried a bunch of things, but low power mode is the only fix I've found. Everything takes about 1.5 times as long, but at least it finishes.
[21:54:21] <sm> shapr: is there an open issue for that ?
[21:54:32] <shapr> sm: I don't think it's haskell related.
[21:54:57] <sm> ah.. still yikes, but not quite so much
[21:56:43] <geekosaur> sclv, haskell.org/platform is still there and does not recommend ghcup
[21:56:56] <geekosaur> maybe it's just not reachable these days unless you know the url?
[21:56:56] <sclv> geekosaur: yes it does i just checked
[21:57:12] <maerwald> https://www.haskell.org/platform/#linux-generic
[21:57:41] <sclv> the only exception is windows where it still recommends chocolatey.
[21:57:55] <aegon> whoa
[21:57:57] <sclv> at this point i think we should make the whole platform page redirect to ghcup since it now handles windows and stack both
[21:58:04] <geekosaur> oh, I was looking at from source
[21:58:13] <geekosaur> but yes, probably it should just go away
[21:58:23] <aegon> [a, b, c, d, e, f, g] <- replicateM 6 $ newMVar 0
[21:58:26] <aegon> compiled 
[21:58:33] <maerwald> apparently, there's powershell via snap?
[21:58:44] <aegon> but then as it should be totally failed at runtime
[21:58:50] <aegon> is the type checker taking a day off here?
[22:01:28] <maerwald> first running arbitrary windows executables, now running snap as root... great
[22:02:28] <ski> aegon : length of list is not a part of its type
[22:02:33] *** Joins: Farzad (~FarzadBek@5.234.230.191)
[22:03:07] <aegon> yeah, i guess i thought the pattern matcher would know how many replicate produces but its probaly just [MVar Int)
[22:03:20] <aegon> *[MVar Int]
[22:03:21] <ski> (a dependently typed programming language might fare better here)
[22:03:59] <ski> yes, the command would have type `IO [MVar Int]' there
[22:04:40] <aegon> well, thats the first time haskell let me write a malformed program when not interacting with system calls
[22:05:05] *** Joins: max22- (~maxime@2a01cb08833598001f901fd4ac72f6bc.ipv6.abo.wanadoo.fr)
[22:05:07] <ski> let me introduce you to `head'
[22:05:13] <awpr> `-Werror=incomplete-uni-patterns`
[22:05:28] <boxscape_> does that trigger on pattern matches in a do block?
[22:05:39] <ski> might
[22:05:40] <awpr> hmm, not sure actually
[22:05:52] *** Joins: DNH (~DNH@8.43.122.53)
[22:05:52] <boxscape_> (they could be totally valid if it's in the List monad for instance)
[22:06:38] <awpr> yeah, and it's not really possible for GHC to know whether a MonadFail instance is "desirable" or "undesirable"
[22:06:46] <ski> hm, unfortunately, it seems like it doesn't ..
[22:07:24] <boxscape_> there's a proposal for this https://github.com/ghc-proposals/ghc-proposals/pull/319
[22:08:53] <boxscape_> (well, not this exactly, but this general topic)
[22:09:59] <aegon> i need to be a *little* more careful
[22:13:10] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[22:13:21] <boxscape_> okay actually the proposal *is* about exactly this "When the -Wincomplete-uni-patterns warning flag is enabled alongside NoFallibleDo, we will warn about the incomplete pattern match."
[22:13:48] <maerwald> https://hub.docker.com/r/avalverde/ghc-cross-compiler-windows-x86
[22:13:49] <maerwald> uh-oh
[22:14:34] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:18:01] <johnjay> when i search on google for haskell tutorials top result is... learnyouahaskell
[22:18:41] <johnjay> next few in order are tutorialspoint, a wiki, and learn.hfm.io. are these good?
[22:19:11] <maerwald> I liked https://www.cis.upenn.edu/~cis194/spring13/
[22:19:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[22:19:26] <boxscape_> tutorialspoint is bad, never heard of learn.hfm.io, if you mean the HaskellWiki, there's probably too many links there to figure out which one to go with
[22:20:09] *** Joins: trillp (~trillp@69.233.98.238)
[22:20:13] <boxscape_> learnyouahaskell has mixed reviews, it has a lighthearted approachable tone but is maybe a bit outdated at this point and doesn't teach as much as many other resources
[22:21:02] <maerwald> what do you mean with outdated? I'd say 90% of the basics didn't change in the last 10 years
[22:21:34] <aegon> learnyouahaskell is a good first step but needs some diligent supplimental material to get you to writing a practical bit of haskell
[22:21:37] <aegon> imo
[22:21:49] <aegon> i usually give people learnyouahaskell because its very approachable in tone
[22:21:59] <boxscape_> yeah most of it is probably fine but since it hasn't been touched in many years I suspect there's a few things here and there that don't quite work the same way in modern ghc as they did at the time? To be fair I don't actually know, hence the "maybe"
[22:21:59] <maerwald> it doesn't have exercises, so is rather useless
[22:22:03] <johnjay> sounds like google wins again this time
[22:22:07] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[22:22:12] *** Quits: dariof4 (~dariof4@5.77.103.193) (Ping timeout: 265 seconds)
[22:22:15] <johnjay> if top result is passable but not great, next 3 are bad
[22:22:25] <maerwald> johnjay: did you check my link?
[22:22:37] <johnjay> no because i can't copy in my tmux atm
[22:22:41] <johnjay> sec
[22:22:53] <geekosaur> @where books
[22:22:53] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[22:23:35] <hpc> https://www.haskell.org/documentation/ - the official big list :P
[22:23:55] *** Joins: dariof4 (~dariof4@5.11.107.11)
[22:23:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[22:24:15] <boxscape_> maerwald example I can think of: learnyouahaskell teaches you to use "let a = ..." in ghci, which isn't necessary anymore. Still works of course, but I wouldn't put it into a modern tutorial
[22:24:53] <aegon> learnyouahaskell got me close enough to be able to go grok random fpcomplete posts and some hackage docs. Did a good job of making the syntax / paradigm jump not a barrier to parsing deeper
[22:24:56] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[22:25:11] <maerwald> fpcomplete posts aren't for beginners usually
[22:25:23] * ski still always does the `let' in the interactor
[22:25:41] <boxscape_> understandable if you've been used to it for years
[22:25:44] <ski> (if i could, i would disable being able to let it out)
[22:25:59] <boxscape_> what benefit would that give you?
[22:26:12] <ski> not being annoyed by it being enabled ?
[22:26:17] <boxscape_> I guess that's fair
[22:26:26] *** Joins: kritzefitz_ (~kritzefit@picard.host.weltraumschlangen.de)
[22:26:40] *** Parts: kritzefitz_ (~kritzefit@picard.host.weltraumschlangen.de) ()
[22:28:14] <johnjay> fpcomplete looks like any other generic corporate landing page
[22:28:19] <johnjay> where are the posts
[22:28:21] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[22:28:41] <boxscape_> they have a learn haskell page here https://www.fpcomplete.com/haskell/learn/
[22:29:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[22:29:15] <maerwald> they're doing more rust these days (and typescript I think)
[22:29:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[22:29:21] <boxscape_> I don't actually know how to find that link on the website but google offered it when I searched for fpcomplete
[22:29:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[22:30:01] <johnjay> boxscape_: i would never have found that on my own.
[22:30:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[22:30:11] <boxscape_> yep not very discoverable
[22:30:37] <johnjay> reminds me of a time someone asked me how to read the cdrom on a unix machine
[22:30:49] <johnjay> i told him it's "volcheck". that was his response
[22:30:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:30:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[22:31:05] <boxscape_> :D
[22:31:10] <sm> fpcomplete has always had some of the best beginner content, I would say
[22:32:02] <sm> they tried to make it more discoverable but half the community rejected them
[22:32:08] <johnjay> (by the way not necessarily true in this case. fpcomplete is on the 2nd page of google results)
[22:34:32] <maerwald> sm: huh?
[22:34:46] <maerwald> you mean when they tried to fork haskell.org?
[22:35:07] *** Joins: mrckndt4 (~mrckndt@user/mrckndt)
[22:35:26] <geekosaur> you know, there's a difference between "make it more discoverable" and "be obnoxious about it"
[22:35:29] <maerwald> I'd say that was a faux pas
[22:35:46] <sm> I think that's a divisive and negative way of seeing it, but I won't get into it with you, sorry maerwald
[22:35:46] <johnjay> what do you mean fork 
[22:35:52] <johnjay> like make a website that competes with it?
[22:35:54] *** Joins: vicfred (~vicfred@user/vicfred)
[22:35:56] <maerwald> yeah
[22:35:58] <johnjay> you can't literally take someone's website
[22:36:10] <geekosaur> haskell-lang.org
[22:36:14] <geekosaur> which may still be there
[22:36:29] <geekosaur> half the links rewritten to point to fpcomplete-approved versions, etc.
[22:36:36] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[22:36:46] <sm> they removed it in the interest of community harmony
[22:36:59] <maerwald> I think they removed it because it didn't work
[22:37:11] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Ping timeout: 245 seconds)
[22:37:11] *** mrckndt4 is now known as mrckndt
[22:37:12] <lechner> ouch
[22:37:20] <f-a> I have got a haddock/hackage question
[22:37:50] <geekosaur> that said, imo HF made similar mistakes early on. at least they listened to community input
[22:37:57] <f-a> when I reexport functions from another library, the documentation â€” of course â€” gets reexported as well,  like this https://hackage.haskell.org/package/ansi-terminal-game-1.4.0.0/docs/Terminal-Game.html#t:Hyphenator
[22:38:04] <maerwald> geekosaur: yes they did
[22:38:39] <f-a> but some times â€” as in this case â€” it is a bit wordy or unhelpful, since the setting is another library
[22:39:10] <f-a> is there a haddock way to rewrite that specific doc? 
[22:39:32] <f-a> I thought of defining a function/type with the same name and export that, but it seems a bit cumbersome
[22:39:35] <f-a> and lots of work
[22:39:53] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[22:40:14] <johnjay> geekosaur: well is that really a big deal?
[22:40:21] <Franciman> lol maerwald 
[22:40:31] <johnjay> i can fork ubuntu on github but nobody gets mad at me for copying it
[22:41:14] <maerwald> johnjay: have you seen any language community that has two competing landing pages? It's pretty confusing for everyone, especially newcomers
[22:41:26] <aegon> johnjay: imo fpcomplete has some strong opinions in their articles that seem wrong sometimes
[22:41:36] <Franciman> trying to impose yourself as the true source of haskell is something you think about before doing it, if you care about the harmony of the community
[22:41:43] <johnjay> oh ok so it's more about SEO
[22:41:50] <johnjay> whoever appears first in google is the "real" community
[22:41:54] <geekosaur> yeh, it's very much not a way to help newcomers, it just looks like the community is fractured
[22:42:18] <geekosaur> which is about the last message you want to send
[22:42:21] <Franciman> but fpcomplete puts money in things, they want a return
[22:42:21] <aegon> their article on safe exception handling is a great overview, but the tone of it makes excedptions in haskell out to be silly and broken but on the other end of it, it seems complicated but not any of the other two things and not needlessly so
[22:42:24] <Franciman> that's what you get from companies
[22:42:43] <maerwald> wrt tooling, there's an argument to be made for diversity... but competing landing pages are not
[22:43:05] <johnjay> i guess there are some projects like ubuntu that have a company backing it
[22:43:12] <lechner> maybe they lost confidence in the community?
[22:43:13] <johnjay> but haskell doesn't sound like that
[22:43:15] <sclv> hf made absolutely no remotely similar "mistakes"
[22:43:32] <Franciman> thanks for the daily source of absolutism
[22:43:50] <unit73e> da tru sauce of haskell
[22:43:51] <sclv> well its hard being right about everything all the time but i do my best
[22:44:19] <johnjay> is hf the main haskell landing page?
[22:44:22] <maerwald> sclv: I disagree somewhat, but I don't think it's worthwhile to reiterate it publicly. I think HF has the right intentions, at least.
[22:44:29] <sclv> no, thats controlled by the haskell.org committee
[22:44:53] <sclv> i don't disagree that hf has been going through a learning process and has a long way to go, and didn't get everything right
[22:45:03] <maerwald> and given it's basically bootstrapping itself, maybe one shouldn't be too harsh about communication issues etc
[22:45:05] <sclv> i'm just saying there's nothing similar in those issues to fpco
[22:46:59] <maerwald> I think we're mostly past the historical drama though
[22:47:25] <sclv> rather than just fragmenting everything, hf's problem has, if anything, been mostly paralysis in the face of trying to get too much input from everyone and bend over backwards to reach full consensus on everything, which has meant it just gets stuck or sometimes is totally contradictory
[22:48:40] <maerwald> although drama also hat its beauty, does it not?
[22:48:48] <Franciman> damn yeah
[22:48:56] <geekosaur> only from a distance
[22:48:57] <aegon> Haskell: There's a powerfull set of tools in there somewhere
[22:49:00] <aegon> :P
[22:49:17] <unit73e> linus torlvalds brought some hilarious drama
[22:49:25] <unit73e> nowadays not so much
[22:49:49] <aegon> when did linus engage with haskell talk, that would be fun to hear
[22:50:05] <maerwald> he only mentioned it briefly in one interview I think
[22:50:09] <Franciman> he would probably say that it is shit + other shitty shits
[22:50:16] <maerwald> and considered it a hype or so
[22:50:21] <Franciman> ofc
[22:50:26] <aegon> yeah, he's never light in his thoughts
[22:50:38] <aegon> i expect some bashing, i think he would bash himself just as easily though
[22:50:39] <Franciman> linus' line of thought: can I write a kernel with it?
[22:50:52] <Franciman> would it suck?
[22:51:05] *** Joins: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net)
[22:51:37] <unit73e> linus doesn't care much about functional programming
[22:51:54] <unit73e> john carmack did speak about it and it was positive
[22:52:07] <Franciman> git to me means: let's write a kernel
[22:52:09] <Franciman> it is awful
[22:52:14] <Franciman> but DAMN FAST
[22:52:18] <Franciman> and DAMN POWERFUL
[22:52:30] <Franciman> linus -> do kernel
[22:52:38] <lechner> you curse too much
[22:53:26] <aegon> yeah i've heard carmacks talk, sweeney also has been public about doing some experiments in it
[22:53:46] <johnjay> this course makes haskell sound pretty interesting. a bunch of academics wanted a functional language so they made on in the 80s
[22:54:44] <unit73e> I found out what linus said about it, to sum up he said haskell is nice and but it's not for him because he works on kernels
[22:55:04] <unit73e> so nothing unusual there
[22:55:20] <johnjay> unit73e: that sounds a lot less good for SEO
[22:55:58] *** Quits: yauhsien (~yauhsien@61-231-43-13.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:57:39] <aegon> linus wants to write assembly with better syntax
[22:58:24] <johnjay> let's just have an operating system written in C. then right on topic of it is some hyper functional langauge like haskell or scheme
[22:58:31] <johnjay> could be anything as long as it's functional
[22:59:42] <maerwald> aegon: carmack mentioning haskell has been over-hyped a lot. It doesn't seem he really followed up on it :p
[23:01:34] <aegon> yeah from the talk he's not enthusiastic about haskell but more respects that functional styled code is more re-usable over time
[23:01:55] <Rembane_> Wasn't the idea that he could use the ideas from Haskell in his C++ code? 
[23:02:09] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[23:06:38] <ldlework> could he really though
[23:07:15] <ldlework> I've tried to take lessons learned from my time with Haskell back to Typescript and it just seems like a pointless struggle
[23:08:30] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[23:08:47] *** Quits: dariof4 (~dariof4@5.11.107.11) (Ping timeout: 264 seconds)
[23:09:16] <boxscape_> things like learning to separate pure and impure code are things you can easily apply to other languages as well
[23:09:26] <boxscape_> the type system just doesn't enforce it
[23:10:18] <johnjay> you could name functions with hungarian notation
[23:10:20] *** Joins: dariof4 (~dariof4@95.131.44.100)
[23:10:23] <johnjay> pfunc is a pure function func
[23:10:38] *** Quits: benin (~benin@183.82.30.38) (Quit: The Lounge - https://thelounge.chat)
[23:12:09] <zincy_> boxscape_: Is that a good general practice outside of Haskell?
[23:12:28] <zincy_> I've heard people saying in Haskell it doesn't really matter separating IO from non IO.
[23:13:05] <boxscape_> personally I would say so but idk maybe it depends on what your workflow is or something
[23:13:39] <boxscape_> I certainly would appreciate if library designers learned to do it
[23:14:12] <boxscape_> I still remember getting stuck for an hour or more not understanding why javascripts string replace function doesn't do what I expected because it's stateful, for some reason
[23:14:23] <ikke> Functional core, imperative shell
[23:14:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[23:14:38] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[23:15:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[23:15:06] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Read error: Connection reset by peer)
[23:15:25] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[23:16:02] <maerwald> zincy_: I also don't think the IO vs non-IO thing is what matters. What matters is that you think about shared mutable state explicitly.
[23:16:15] <maerwald> because that's the root of all evil
[23:16:50] <maerwald> Java made it popular to not think about it.
[23:17:07] <zincy_> So when it comes to other languages isolating non pure code equates mostly to push shared mutable state into the corner of the room
[23:17:09] <johnjay> isn't making shared mutable state kind of the point of java?
[23:17:17] <maerwald> yeah, it's scary
[23:18:00] <johnjay> boxscape_: i think the curse of knowledge is real
[23:18:18] <johnjay> once you learn a system, any system, then its weirdness and contradictions seem so normal and matter-of-fact to you
[23:18:24] <boxscape_> that's fair
[23:18:30] <johnjay> that when someone asks you why something is the case, you literally don't even understand what they're talking about
[23:19:09] *** Quits: Farzad (~FarzadBek@5.234.230.191) (Quit: Leaving)
[23:19:17] <johnjay> "Why does 2+2 not equal 4 in this case?" "Well duh,that's common sense!"
[23:19:30] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[23:19:31] *** Joins: Farzad (~FarzadBek@5.234.230.191)
[23:19:43] <johnjay> boxscape_:  i had a scary convo like that last week when i was writing a script for a game
[23:19:58] <geekosaur> flatland. or that variant that was hyperbolic, that I forget the name of now?
[23:20:08] <zincy_> Is this the curse of knowledge?
[23:20:16] <johnjay> basically i was trying to use a custom ability based its ID. which the game editor displays. but apparently some unrelated string called the order ID is what actually matters
[23:20:19] <zincy_> I thought that was I understand the concept but I cannot explain it.
[23:20:30] <johnjay> and the 2 people i was talking to didn't even understand why i was confused.
[23:20:35] <johnjay> it was like talking to an insane person
[23:20:50] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (Remote host closed the connection)
[23:21:06] <johnjay> zincy_: yes exactly. but like. imagine you're in wonderland and asking someone why this drink makes you 10 feet tall. they don't really know
[23:21:10] <zincy_> I think you are talking about a lack of knowledge :)
[23:21:24] <johnjay> what's scary about is more the pretending to know but not really knowing
[23:21:47] <zincy_> Yeah that is a weird place to be.
[23:21:58] <johnjay> at least humpty dumpty is honest that he makes up weird definitions with no regard to anybody else
[23:22:49] <monochrom> A better reference is emperor's new cloth.
[23:25:09] <maerwald> I remember reading quake3 engine code I think and they did annotate side effects in the function documentation.
[23:25:42] <maerwald> or maybe it was RtCW
[23:25:59] <maerwald> Well, ID had great coders
[23:26:13] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[23:26:58] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:27:41] *** Joins: acidjnk_new (~acidjnk@p5487db6d.dip0.t-ipconnect.de)
[23:29:41] <zincy_> maerwald: "What matters is that you think about shared mutable state explicitly."
[23:29:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[23:30:05] <zincy_> So does this mean basically segregate that nasty stuff from the rest?
[23:30:39] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:31:21] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[23:31:21] <maerwald> start with not using the filesystem for anything
[23:32:08] <maerwald> well, windows solved it... the virus scanner will just lock your files and your program will have to wait :D
[23:32:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[23:32:42] <zincy_> haha
[23:32:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[23:33:29] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7441135e59462474fdf3062.dip0.t-ipconnect.de)
[23:33:31] <maerwald> now you need retry strategies and algorithms to delete files (did you know you can always *move* a file, even if it's locked, but not delete it?)
[23:34:59] <maerwald> guess why the recycle bin exists
[23:35:19] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:35:59] <maerwald> does Haskell help you with that? No :p
[23:36:23] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 264 seconds)
[23:36:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:36:58] *** Quits: acidjnk_new (~acidjnk@p5487db6d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[23:37:09] *** Quits: Skyfire (~pyon@user/pyon) (Quit: br)
[23:37:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:37:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:37:28] *** Joins: wroathe (~wroathe@user/wroathe)
[23:37:41] *** Joins: juhp (~juhp@128.106.188.220)
[23:39:28] *** Joins: Skyfire (~pyon@user/pyon)
[23:39:46] <maerwald> I worry less about avoiding IO and more about means to make my IO code correct
[23:40:41] *** Joins: Guest27 (~Guest27@188.64.207.100)
[23:41:01] <maerwald> a syscall filter embedded into the RTS would for example be a start
[23:41:33] <maerwald> that can throw runtime exceptions if constraints aren't met (because a library misbehaves)
[23:42:46] *** Quits: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[23:44:03] <monochrom> Hrm, a shadow state automaton that simulates the OS's state automaton to predict what the OS would dislike.
[23:44:17] <remexre> am I missing something, or is the 9.2.1 manual missing the "Included libraries" section
[23:44:20] <remexre> a la https://downloads.haskell.org/ghc/latest/docs/html/users_guide/9.0.1-notes.html#included-libraries
[23:44:54] <monochrom> And you need like 6 of them, one for linsucks, one for winblows, one for slowaris, 3 for fragmentedbsd...
[23:45:17] <johnjay> you left about malbatrosx
[23:46:30] *** Joins: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com)
[23:51:16] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[23:51:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 264 seconds)
[23:53:28] *** Joins: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr)
[23:57:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:58:21] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[23:58:21] <hpc> but not temple os
[23:58:26] <hpc> that's written 100% in the holy C
[23:59:21] * ski . o O ( isn't that in ROM ? )
