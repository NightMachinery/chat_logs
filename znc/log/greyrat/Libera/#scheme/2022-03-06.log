[00:02:07] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[00:02:36] *** Joins: badkins (~badkins@136.56.92.199)
[00:06:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:08:44] *** Joins: badkins (~badkins@136.56.92.199)
[00:13:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:17:06] <siiky> Hi y'all! Where can I get the official R7RS standard document of what is currently "set in stone"?
[00:23:14] <siiky> Is this it? https://github.com/johnwcowan/r7rs-spec/blob/errata/spec/r7rs.pdf
[00:23:40] *** Joins: eddof13 (~eddof13@185.153.177.238)
[00:31:51] <drakonis> that's the errata for it
[00:32:12] <drakonis> errata branch but yes, that's the right one
[00:34:47] *** Joins: TCZ (~tcz@91.150.178.124)
[00:35:38] *** Joins: seninha (~chatzilla@user/seninha)
[00:36:35] <dpk> my question about lambda* is: in what specific situation would i prefer it over plain lambda?
[00:39:18] <drakonis> looks like you'd use it for optional and keyword arguments
[00:39:57] <drakonis> it seems to be used alongside define for that?
[00:40:02] <siiky> drakonis: the errata branch is the default branch
[00:40:14] <drakonis> ah okay.
[00:40:27] <drakonis> but as i said, you have the right document
[00:40:56] <dpk> drakonis: i meant SRFI 232 lambda*, not SRFI 89/Guile lambda*
[00:41:03] <drakonis> i see
[00:41:11] <dpk> which is by Zipheir 
[00:41:18] <dpk> well, the SRFI is, but the idea is from a paper
[00:41:27] <drakonis> https://srfi.schemers.org/srfi-232/ this one?
[00:41:38] <dpk> yes
[00:41:44] <drakonis> a lambda that can do currying...
[00:42:03] <drakonis> haskellers swear up and down that you use currying for composing functions
[00:43:24] <siiky> drakonis: thanks!
[00:49:40] *** Quits: eddof13 (~eddof13@185.153.177.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:56:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:09:22] *** Joins: badkins (~badkins@136.56.92.199)
[01:10:38] *** Joins: eddof13 (~eddof13@185.153.177.233)
[01:11:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:13:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[01:18:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:35:34] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:50:05] *** Joins: badkins (~badkins@136.56.92.199)
[01:51:46] *** Joins: amirouche` (~guest@2a01:e0a:3f9:9f50:7823:c42b:4bc0:3b7a)
[01:52:28] *** Quits: amirouche` (~guest@2a01:e0a:3f9:9f50:7823:c42b:4bc0:3b7a) (Client Quit)
[01:58:11] *** Quits: amazigh` (e7bf083bc5@2604:bf00:561:2000::3db) (Changing host)
[01:58:11] *** Joins: amazigh` (e7bf083bc5@user/amirouche)
[02:00:03] <amazigh`> Zipheir: I just figured we have to be registred to speak
[02:00:54] *** Joins: amirouche` (~guest@2a01:e0a:3f9:9f50:3656:4f03:51e0:142c)
[02:01:13] <amazigh`> Maybe we should add something in the topic
[02:01:23] *** Quits: amirouche` (~guest@2a01:e0a:3f9:9f50:3656:4f03:51e0:142c) (Client Quit)
[02:02:02] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Read error: Connection reset by peer)
[02:02:12] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:02:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[02:02:26] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[02:04:06] <amazigh`> the topic is rather big already.
[02:05:38] <amazigh`> I guess nobody noticed my comment about building a tool based on git that would centralize the work on R7RS ?
[02:07:43] *** Joins: badkins (~badkins@136.56.92.199)
[02:10:45] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:51] *** Joins: eddof13 (~eddof13@185.153.177.233)
[02:16:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[02:24:05] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:25:30] *** Joins: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:27:04] *** Joins: eddof13 (~eddof13@185.153.177.233)
[02:27:08] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[02:28:53] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:ecef:2a48:4dd9:4d1)
[02:31:00] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:a1e1:9675:6182:bb0a) (Ping timeout: 240 seconds)
[02:32:02] *** Joins: trip (~tripfanda@2a00:a040:19e:72a1:65f2:fdc1:33d4:fe51)
[02:32:24] *** trip is now known as Guest6651
[02:33:50] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:ecef:2a48:4dd9:4d1) (Ping timeout: 260 seconds)
[02:35:20] *** Joins: badkins (~badkins@136.56.92.199)
[02:36:31] *** Quits: Guest6651 (~tripfanda@2a00:a040:19e:72a1:65f2:fdc1:33d4:fe51) (Ping timeout: 268 seconds)
[02:37:26] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:39:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:42:03] *** Joins: badkins (~badkins@136.56.92.199)
[02:44:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:44:18] *** Joins: badkins (~badkins@136.56.92.199)
[02:54:37] *** Quits: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:56:32] *** Joins: eddof13 (~eddof13@185.153.177.231)
[02:59:43] <Zipheir> amazigh`: Thanks, I actually didn't know that channel flag was set.
[03:00:37] <Zipheir> I'll unset it later on when I have a moment.
[03:08:16] *** Quits: eddof13 (~eddof13@185.153.177.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:24:36] *** Joins: eddof13 (~eddof13@185.153.177.240)
[03:29:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[03:29:29] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[03:34:40] *** Quits: eddof13 (~eddof13@185.153.177.240) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:01:37] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:05:02] *** Joins: eddof13 (~eddof13@185.153.177.231)
[04:05:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:14:27] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Quit: Leaving)
[04:14:45] *** Quits: eddof13 (~eddof13@185.153.177.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:24:38] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 272 seconds)
[04:29:36] *** Joins: badkins (~badkins@136.56.92.199)
[04:32:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:34:18] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[04:37:39] *** Joins: eddof13 (~eddof13@185.153.177.241)
[04:44:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:57:42] *** Joins: badkins (~badkins@136.56.92.199)
[04:57:58] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:01:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:12:07] *** Joins: badkins (~badkins@136.56.92.199)
[05:16:20] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[05:37:36] *** Joins: zacque (~zacque@175.143.120.93)
[05:46:16] *** Joins: masoudd (~masoudd@user/masoudd)
[05:47:13] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:8b8a:f94c:82bd:a560) (Quit: Leaving)
[05:52:26] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 245 seconds)
[05:58:50] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[06:04:23] *** Joins: seninha (~chatzilla@user/seninha)
[06:06:22] *** Quits: eddof13 (~eddof13@185.153.177.241) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:55:55] *** Joins: badkins (~badkins@136.56.92.199)
[07:00:20] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:08:12] *** Joins: frost (~frost@user/frost)
[07:20:36] *** Joins: klovett_ (~klovett@107.116.92.161)
[07:22:26] *** Quits: klovett (~klovett@107.116.92.161) (Ping timeout: 256 seconds)
[07:28:43] *** Joins: livoreno (~livoreno@user/notzmv)
[07:41:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:42:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:49:09] <Zipheir> amazigh`: Um, +r is not set, and IIRC has never been set except during a spam wave in the early days of libera.  Were you unable to message the channel?
[07:51:42] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:55:26] *** Parts: DaPinkOne (~Dap@user/dap) (Leaving)
[07:55:30] <Zipheir> dpk: Personally, I would use it for higher-order function.  I like being able to quickly parameterize them, e.g. given some function f, (let ((list-f (curried-map f))) ...)
[07:55:37] <Zipheir> *functions
[07:56:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:56:10] <Zipheir> Also, for procedures that accept a comparator argument.
[07:57:10] *** Joins: frost (~frost@user/frost)
[08:02:20] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[08:07:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[08:16:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:34:27] <mdhughes> You can already use case-lambda to handle optional arguments. Keywords can just be an alist (or there's people who say "plist", but they're incorrect).
[08:35:33] <mdhughes> The best feature is one you don't have to implement. The best code is silence.
[08:36:45] <mdhughes> > Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.
[08:41:11] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[08:46:20] *** Parts: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (WeeChat 3.4)
[08:47:45] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:54:41] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:07:18] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[09:07:55] *** Joins: epony (epony@user/epony)
[09:21:40] *** Quits: epony (epony@user/epony) (Remote host closed the connection)
[09:27:12] *** Joins: badkins (~badkins@136.56.92.199)
[09:31:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[09:33:06] <Zipheir> I can't see much of a use-case for lambda* with optional/keyword arguments.  There are some odd interactions possible.
[09:38:18] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:51:41] *** Joins: epony (epony@user/epony)
[10:17:41] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[10:21:14] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[10:26:44] *** Quits: zacque (~zacque@175.143.120.93) (Quit: Goodbye :D)
[10:28:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:32:36] *** Joins: seninha (~chatzilla@user/seninha)
[10:40:39] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[10:56:10] *** Quits: klovett_ (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[10:56:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:58:40] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[10:58:52] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[11:07:02] <amazigh`> Zipheir: I was able to message the channel, but I was not visible to others
[11:13:41] <amazigh`> I just checked #scheme.log, messages sent by amirouche` were not visible
[11:15:29] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:17:39] <s-liao> Why?
[11:23:06] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[11:34:59] *** Joins: badkins (~badkins@136.56.92.199)
[11:49:37] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:52:12] *** Quits: amazigh (~amirouche@user/amirouche) (Ping timeout: 240 seconds)
[11:52:43] *** Joins: s-liao78 (~s-liao@101.86.96.21)
[11:52:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[11:56:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:01:42] *** Joins: amazigh (~amirouche@user/amirouche)
[12:02:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[12:02:02] <amazigh> s-liao78: idk, that is why I am asking
[12:05:40] <s-liao78> Okay
[12:08:08] <s-liao78> Your display name is like <amazigh`> in the logfile in my site.
[12:10:41] *** Joins: epony (epony@user/epony)
[12:19:42] <amazigh> s-liao78: See the join and qui of the nick: amirouche`
[12:25:00] <amazigh> I will do another test
[12:25:10] *** Joins: guest1 (~guest@2a01:e0a:3f9:9f50:f51c:cb88:ad27:1871)
[12:26:07] <amazigh> I just joined at guest1 and sent the message: echo alpha tango scheme
[12:26:27] *** Quits: guest1 (~guest@2a01:e0a:3f9:9f50:f51c:cb88:ad27:1871) (Client Quit)
[12:27:04] <amazigh> it appears like users that are not registred are not voiced, but they are not notified that they must register.
[12:28:28] <s-liao78> yes
[12:30:09] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Quit: You have been kicked for being idle)
[12:42:18] <mdhughes> How are you even able to get into the server unregistered, tho? I thought… whatever the protocol now is requires reg?
[12:42:35] <mdhughes> SASL
[12:44:18] <amazigh> it is not the case.
[12:45:31] <amazigh> on another channel I was voiced even if I was not registred
[13:18:36] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:27:03] *** Joins: badkins (~badkins@136.56.92.199)
[13:27:18] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[13:28:45] *** Quits: X-Scale (~ARM@83.223.233.227) (Ping timeout: 256 seconds)
[13:28:45] *** X-Scale` is now known as X-Scale
[13:31:20] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 256 seconds)
[13:32:03] *** Joins: Duns_Scrotus (sid262565@id-262565.tinside.irccloud.com)
[13:33:01] *** Joins: daviid (~user@179.210.58.162)
[13:33:03] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[13:44:37] *** Quits: s-liao78 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:24:31] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:28:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:44:52] *** Joins: grettke_ (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[14:45:34] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Ping timeout: 256 seconds)
[14:51:38] *** Quits: devmsv (~devmsv@2a0c:5a80:7001:f900:b996:6cb2:8c94:291c) (Ping timeout: 260 seconds)
[14:53:11] *** Joins: devmsv (~devmsv@2a0c:5a80:7001:f900:a479:e340:bc76:a1c)
[14:59:36] *** Quits: devmsv (~devmsv@2a0c:5a80:7001:f900:a479:e340:bc76:a1c) (Ping timeout: 250 seconds)
[15:00:15] *** Joins: devmsv (~devmsv@79.116.9.226)
[15:04:31] *** Quits: devmsv (~devmsv@79.116.9.226) (Ping timeout: 256 seconds)
[15:07:39] *** Joins: devmsv (~devmsv@79.116.92.164)
[15:12:43] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:13:00] *** Joins: klf (~fkl@66.220.197.183)
[15:15:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:19:24] *** Joins: nmeum (~nmeum@barium.8pit.net)
[15:25:14] <klf> Hello.  I need to 1) write a parser (which also constructs the corresponding AST) for a mini subset of Racket/Scheme and 2) write a type-checker.
[15:26:01] <amazigh> what is the question?
[15:26:34] <klf> amazigh: yes, I have several actually.  Let me give some context first. :-)
[15:26:40] <amazigh> :)
[15:28:33] <klf> My parser mostly works, but not really.  I do have the overall idea but I had (and in fact, still have) trouble with parsing syntactic forms (ya know, the lambda forms, define forms, etc)
[15:29:07] <klf> First, I am implementing both 1) and 2) using PLY
[15:29:58] <amazigh> Is PLY a requirement from the assignement?
[15:30:31] <klf> After thinking this through, I *believe I have come up with a plausible solution which I'd like to first get some comment on before I just tackling it.
[15:30:37] <klf> amazigh: yes.
[15:32:31] <klf> last time our friend Zipheir gave me Keep-It-Simple-Stupid advice which in hindsight I should have followed:
[15:32:35] <klf>  <Zipheir> klf: The simplest approach is to have a parser rule for application.  This should give you (among other things) an identifier in the o    perator position.  A full interpreter would look that up in a table of definitions, and expect to get a procedure.
[15:32:56] *** Quits: daviid (~user@179.210.58.162) (Remote host closed the connection)
[15:33:14] *** Joins: daviid (~user@179.210.58.162)
[15:33:24] <klf> And so I will now reduce my grammar from http://codepad.org/9TS7BIkG to http://codepad.org/vu9tOc28
[15:33:36] *** Joins: badkins (~badkins@136.56.92.199)
[15:35:01] <klf> amazigh: please take a look at my grammar.  From that, you may already get a sense of my problem.   I will then talk about how I plan on parsing syntactic forms.
[15:35:45] <amazigh> I did read both codepad
[15:36:22] <klf> Basically, I am simplifying the racket_form rule to: rkt_form = "(" ( ID | lambda_form) { expr } ")" ;
[15:36:27] <klf> oops
[15:36:37] <klf> I mean, rkt_form = "(" expr { expr } ")" ;
[15:38:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[15:41:21] <klf> Okay.  For the next sprint (phase), we're asked to implement the type checker.  Since a SymbolTable --- which atm is just a table for looking up the type of a given name (aka identifier) ---  is constructed during the type-checking which is implemented using a visitor pattern;  I might as well keep the function signatures ALONG with the type information.,
[15:41:47] <klf> So, a "lambda" would have an entry in SymbolTable =  {"lambda" :  [ID_List, rkt_form, rkt_form, ...]}
[15:42:44] <klf> amazigh: and yes, this is a school project, and so I am not going to implement no macro expander or something fancy.
[15:42:52] <klf> I just need something that works.
[15:42:54] <klf> :-)
[15:43:40] <amazigh> does the assignement require a particular version of python? Does it require to use classes, usually visitor pattern is implemented with a class and it dispatch to ad-hoc method according to some rule like @pydoc ast describes?
[15:44:10] <klf> So yea, with function signature/prototype I believe I can parse syntactic forms.  What do you think?
[15:44:44] <amazigh> @pydoc ast => https://docs.python.org/3/library/ast.html#ast.NodeVisitor
[15:45:49] <amazigh> I repeat that type checking is not done at parsing time, inside the function `parse`; you can do it like that, but it complicates everything.
[15:45:50] <klf> amazigh: yep that's the idea.  let me share with you the miniJava example that the TA used to introduce this to us  You will see exactly 
[15:46:23] <klf> 1 sec.
[15:46:32] <amazigh> sure, no worries.
[15:46:38] <amazigh> take you time.
[15:47:09] <klf> Wow... everyone in #scheme is really nice here. 
[15:50:17] <amazigh> tx!
[15:50:19] <amazigh> can you also give an example racket scheme source code you want to parse?
[15:53:52] <klf> sure. 1 sec.  I am creating a link to my dropbox folder as there are several files part of this tinyJava demo.
[15:55:04] *** Quits: devmsv (~devmsv@79.116.92.164) (Ping timeout: 250 seconds)
[15:56:28] <klf> https://www.dropbox.com/sh/jl32ums0qg9yqz9/AADjm-6LhZ8009L8I_tLd7AWa?dl=0
[15:59:53] <klf> amazigh: you will find the visitor stuff in tinyJavaAST.py
[16:01:56] <klf> Can you comment on my solution --- that is, keep function signatures ALONG with the type information.
[16:02:06] <klf> ?
[16:03:09] <amazigh> I am looking at the Java things
[16:04:24] <amazigh> ok, but how does special forms / syntax relate to typechecking ?
[16:04:50] <amazigh> parsing and typechecking are two different methods, once parsing is done, you can typecheck
[16:04:58] <klf> SymbolTable is a class (declared inside tinyJavaSymbolTable.py), but it's essentially it's a stack of dictionaries. (line 12: "self.scope_stack = [dict()]")
[16:05:06] <amazigh> yes
[16:05:46] <amazigh> but that is mostly unrelated to parsing, the link between parsing and typechecking is the ast
[16:06:22] <klf> amazigh: I am now ready to answer your question :-)_
[16:06:22] *** Joins: devmsv (~devmsv@2a0c:5a81:310d:1500:a479:e340:bc76:a1c)
[16:06:32] <klf> 06:59 < amazigh> what is the question?
[16:06:36] <klf> (problem, rather)
[16:06:45] <amazigh> if you the scheme parser produce an ast made of instance of the same class as the Java version, you will have little change to do to make it work with scheme.
[16:07:41] *** Joins: badkins (~badkins@136.56.92.199)
[16:08:12] <amazigh> klf: re-state the problem you have please.
[16:08:36] <klf> I am particulary having trouble with parsing syntax forms (e.g. lambda form, define, and so on)
[16:09:01] <klf>  <Zipheir> klf: The simplest approach is to have a parser rule for application.  This should give you (among other things) an identifier in the o    perator position.  A full interpreter would look that up in a table of definitions, and expect to get a procedure.
[16:09:25] <klf> So I am planning on keeping the grammar simple:
[16:09:26] <klf> http://codepad.org/vu9tOc28
[16:09:38] <amazigh> ok I think I get it
[16:10:03] <klf> amazigh: basically, the solution I had in mind is to make use of the SymbolTable
[16:10:25] <klf> (more specifically, have it maintain function signature as well)
[16:10:51] <klf> "lambda" would have an entry in SymbolTable =  {"lambda" :  [ID_List, rkt_form, rkt_form, ...]}
[16:10:58] <amazigh> a regular Scheme parser does not produce ast nodes such as AssignStmt, BinOp, Constant, etc.. such as found in https://www.dropbox.com/sh/jl32ums0qg9yqz9/AADjm-6LhZ8009L8I_tLd7AWa?dl=0&preview=tinyJavaAST.py
[16:11:17] <klf> amazigh: I know i know.. those won't be applicable at all in scheme/racket
[16:11:29] <amazigh> you will need an intermediate step between the parser and typechecker
[16:11:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:12:20] <klf> "lambda" would have an entry in SymbolTable =  {"lambda" :  [ID_List, rkt_form, rkt_form, ...]}
[16:12:31] <amazigh> to turn the python list ["define" ["add1" "myvalue"] [+ "myvalue" 1]] into what you just described
[16:12:31] <klf> Do you know where I am going with this ^
[16:12:54] <amazigh> lambda is keyword, it will not appear in the symbol table
[16:13:24] <klf> lambda is a keyword? O_o
[16:13:32] <klf> (define lambda 3)
[16:13:38] <amazigh> e.g. In the java example `return` does not appear in the symbol table
[16:13:41] <klf> it's a regular identifier, isn't it?
[16:13:54] <amazigh> yes and no
[16:14:14] <klf> (define lambda 3) ; it's bound to the integer value 3
[16:14:44] <amazigh> you may redefine `lambda` to hold any object, but it is not recommended.
[16:15:31] <amazigh> try the following in a REPL: (define lambda 1337) ((lambda () 42))
[16:15:42] <amazigh> what happens?
[16:18:05] *** Quits: devmsv (~devmsv@2a0c:5a81:310d:1500:a479:e340:bc76:a1c) (Read error: Connection reset by peer)
[16:18:29] <amazigh> tl;dr: to get started you should consider lambda, define, +, *, /, and if as keywords
[16:18:40] *** Joins: badkins (~badkins@136.56.92.199)
[16:19:59] <amazigh> given that new constraint, you may drop the intermediate step I suggested before, and instead add the keywords in the parser
[16:20:01] <klf> woah...  I didn't expect that.  maybe I am misinformed this while time
[16:20:22] <amazigh> yes and no :)
[16:20:57] <amazigh> it is just that the point is not to learn scheme, but to have a good grade ;)
[16:21:29] <klf> if I add +, -, * and / as keywords in my parser, then they can't be "overloaded", bound, really, to something else
[16:21:35] <amazigh> you are correct in standard compliant scheme, you can redefine lambda.
[16:21:49] <klf> amazigh: that's what my parnter thinks too
[16:22:16] <klf> amazigh: he told me; forget it.  Just make everything as keywords and call it a day.
[16:23:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[16:23:25] <amazigh> later you can investigate how to make it possible to redefine lambda
[16:23:29] <amazigh> or +
[16:27:35] <klf> (define + (lambda (x y) (* x y)))
[16:27:56] <klf> anyway.  can you at least comment on what I had in mind though?
[16:29:44] <amazigh> afk
[16:30:05] <klf> create the bindings at the beginning, say, lambda" would have an entry in SymbolTable =  {"lambda" :  [ID_List, rkt_form, rkt_form, ...]}
[16:30:57] <klf> with that, I am bascially validating function calls with it.
[16:35:06] *** Joins: badkins (~badkins@136.56.92.199)
[16:37:48] <amazigh> ask the TA if you need to support that kind of semantic
[16:39:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:42:24] *** Joins: badkins (~badkins@136.56.92.199)
[16:44:53] <klf> amazigh: k.  atm, my partner is completing this sprint (typechecking and ir (3-address code) generation) based on the approach you suggested.
[16:46:03] <klf> that is, turn lambda, arithmetic operators into keywords :P
[16:49:36] <klf> gotta take a rest and come back to give it a shot at it. thanks for your help :-)
[16:49:42] *** Quits: klf (~fkl@66.220.197.183) (Quit: leaving)
[16:50:06] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[16:55:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[16:56:17] *** Joins: badkins (~badkins@136.56.92.199)
[16:57:32] <sonny> How can I give functions names that require a variable inside sieve? This does not work because p is local to sieve, but not mark and smallest <https://bpa.st/73PA>
[16:58:25] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[16:58:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:00:11] <wasamasa> rudybot: (let ((foo (lambda () 1))) (foo))
[17:00:19] <wasamasa> rudybot: eval (let ((foo (lambda () 1))) (foo))
[17:00:22] <rudybot> wasamasa: error: with-limit: out of time
[17:00:29] <rudybot> wasamasa: your sandbox is ready
[17:00:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:01:34] <sonny> oh, good one!
[17:01:43] <wasamasa> inner define is another option
[17:01:50] <rudybot> wasamasa: ; Value: 1
[17:06:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:18:26] <sonny> my recursion doesn't get new values on each call, I think I forgot how to do recursion :(
[17:18:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:20:29] <sonny> <https://bpa.st/XPLA>
[17:24:23] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[17:25:48] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Client Quit)
[17:29:51] <sonny> nope, just messed up my algorithm
[17:31:19] <amazigh> rudybot: sonny in the sky with parentheses
[17:31:46] <rudybot> amazigh: sonny boy
[17:31:51] <amazigh> meh
[17:32:10] <amazigh> rudybot: you do not know pink floyd?
[17:32:27] <rudybot> amazigh: I don't know it. What I like of Pink Floyd is generally David Gilmour
[17:37:32] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[17:37:51] *** Joins: cedb (~ced@user/ouestbillie)
[17:38:40] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:42:10] *** Joins: badkins (~badkins@136.56.92.199)
[17:44:30] *** Joins: agumonkey (~user@88.163.231.79)
[17:44:35] <agumonkey> https://racket.discourse.group/t/racket-meet-up-saturday-5-feb-18-00-utc/581?u=spdegabrielle
[17:46:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[17:58:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[17:58:43] <sonny> amazigh sonny boy is what I was going for actually :P
[17:59:38] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:00:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:03:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[18:07:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:16:33] *** Joins: badkins (~badkins@136.56.92.199)
[18:19:24] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 268 seconds)
[18:19:37] *** Joins: psf (~pi@206.55.172.18)
[18:20:40] *** Joins: klovett (~klovett@107.116.92.161)
[18:22:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:25:27] *** Joins: badkins (~badkins@136.56.92.199)
[18:29:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:32:40] <amazigh> sjamaan: the redragon is good
[18:33:20] <amazigh> but the keyboard physical layout move the key for \ at a strange location
[18:33:30] <amazigh> I can live with that :)
[18:33:34] <amazigh> thanks for the recommendation
[18:38:37] *** Joins: badkins (~badkins@136.56.92.199)
[18:43:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[18:47:31] *** Joins: badkins (~badkins@136.56.92.199)
[18:47:36] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d96f:789:dcb9:a5e6)
[18:47:36] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d96f:789:dcb9:a5e6) (Changing host)
[18:47:36] *** Joins: skapata (~Skapata@user/skapata)
[19:00:12] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[19:00:59] <sonny> made a working version, but it looks ugly <https://bpa.st/NGTA>
[19:02:33] <sonny> (more comments)  <https://bpa.st/7EWQ>
[19:03:57] <amazigh> mark is missing a !
[19:04:06] <amazigh> what does (boolean? p) mean to do ?
[19:04:22] <amazigh> oh ah got it
[19:04:39] <sonny> so I represent marked primes as a list of pairs (p, #f)
[19:04:51] <sonny> if it's not a pair, then I got #f from findf
[19:05:27] <sonny> oh yeah, forgot about the ! convention
[19:05:29] <amazigh> what about (not p)?
[19:05:37] <amazigh> instead of (boolean? p)?
[19:06:02] <dpk> today's mad proposal http://dpk.io/temp/scheme-doc
[19:06:10] <sonny> I made many mistakes so I wanted to get rid of anything that was confusing
[19:06:14] <dpk> WIP sample implementation https://gitlab.com/dpk/presrfis/-/blob/master/scheme-doc/scheme-doc-guile.scm
[19:06:52] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[19:07:09] <amazigh> sonny: it does the job that is a good start
[19:07:33] <sonny> yeah
[19:08:02] <sonny> I want to give some names to the anonymous functions
[19:08:58] <amazigh> btw another minor improvement at line 12 you do not need `begin`
[19:09:14] <amazigh> naming the lambda does not seem necessary to me
[19:10:15] <amazigh> line 17, (eq? #f (mcdr x)) is equivalent to (not (mcdr x))
[19:12:18] <sonny> good call on begin, since I have a let form
[19:13:24] <pinoaffe> dpk: are these scheme-doc texts intended to be embedded into scheme as doc strings (or something similar)?
[19:13:34] <amazigh> Those are minor problems, I am not familiar with sieve of Eratosthenes, and I am too lazy to give a look.
[19:13:34] <dpk> yes, that's roughly the idea
[19:14:09] <sonny> amazigh thanks, it looks at lot better already
[19:15:33] <amazigh> sonny: There is MANY solutions at https://rosettacode.org/wiki/Sieve_of_Eratosthenes#Scheme
[19:16:00] <sonny> I had just wanted to implement it from the algorithm on wikipedia
[19:16:08] <amazigh> good idea
[19:16:27] <sonny> doing this algorithm in a functional way sounds really difficult
[19:17:00] <sonny> because you need to remember what is prime and what isn't
[19:17:21] <pinoaffe> dpk: cool!
[19:18:27] <amazigh> sonny: without mutations?
[19:18:51] <sonny> yeah
[19:20:56] <amazigh> `p` and `l` could use better names, what do you think about s/p/continue?/g and `l` will be the the output that I just call out usally.
[19:22:09] <amazigh> that is substitute all occurence of `l` with `out` that is s/l/out/g
[19:23:29] *** Joins: civodul (~user@guix/contributor/civodul)
[19:23:29] <amazigh> it is possible to have the same algorithm without mutations
[19:24:52] <amazigh> instead of starting with l = (build-list ...), we would start with l = '(), then iterate from i=0 toward i=n, and for every i compute whether i is a prime or not, and add that information to l (that I call `out`)
[19:25:33] <amazigh> l aka. out will be reversed, the first item will be bigger than the last 
[19:26:00] <amazigh> using a tail rec
[19:26:07] *** Joins: masoudd (~masoudd@user/masoudd)
[19:26:26] <amazigh> when i=n, you may reverse out to have them in increasing order
[19:26:28] *** Joins: Everything (~Everythin@37.115.210.35)
[19:55:32] * sonny is thinking
[19:56:15] <sonny> yeah, constructing the list manually does make it a lot easier
[19:57:44] <Zipheir> amazigh: It must be some ChanServ setting then, since the mode is just +ntz.
[20:01:58] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[20:16:40] <sonny> ok actually correct version of above <https://bpa.st/X75A> next to build the list manually
[20:37:56] <Zipheir> sonny: You don't need to mutate anything.
[20:38:28] <Zipheir> sonny: Take a look at this paper https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
[20:39:42] <sonny> ok, I'll take a look later
[20:42:28] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[20:45:33] <agumonkey> The Mutate Nothing Theory. TMNT. Soon on screen
[20:47:16] <Zipheir> Know when to mold 'em and know when to fold 'em.
[20:47:53] <Zipheir> (fold, unfold, map, scan, ...)
[20:48:30] <Zipheir> *mould
[21:00:37] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:05:46] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:06:42] *** grettke_ is now known as grettke
[21:22:30] *** Joins: seninha (~chatzilla@user/seninha)
[21:34:51] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:38:45] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[21:43:56] *** Joins: badkins (~badkins@136.56.92.199)
[21:47:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:55:31] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:04:25] <amazigh> Zipheir: re srfi 232, I vote for kappa 
[22:05:15] *** Joins: badkins (~badkins@136.56.92.199)
[22:06:54] <amazigh> I wonder what is the advantage compare to wrapping a procedure with lambda say (map (lambda (x) (+ x 1)) xs) vs. (map (+ 1) xs) when + is defined usinng lambda*
[22:07:42] <amazigh> it is shorted than the lambda wrapper true thing. (btw I am not a fan of cut / cute either)
[22:08:41] <Zipheir> Schemers have traditionally not liked auto-partial-application, but it's ubiquitous in Haskell.
[22:09:10] <LeoNerd> It's "spooky action at a distance" via nonobvious syntax... similar to things like C++ operator overloading
[22:09:35] <LeoNerd> Scheme usually has a very C-like nature, in that you can look at a small piece of code and have confidence you know what it's going to do
[22:09:43] <Zipheir> Well, that's a bit strong.  Operator overloading can destroy a type system.
[22:09:59] <Zipheir> No one knows what a C program is going to do. :)
[22:10:17] <mdhughes> There's no operator overloading in C.
[22:10:19] <Zipheir> At least going by the standards.  Hopefully Scheme does better than that.
[22:10:32] <Zipheir> No, just weak typing, which is just as bad!
[22:11:06] <mdhughes> C does have a weird combination of strong type declarations and weak object typing, but it's an OS impl language, where you need that.
[22:11:07] <Zipheir> I exaggerate, it's not as bad.
[22:11:55] <amazigh> speaking of Adam from schemepunk, I think lambda* will help a lot to write pipelines: https://srfi.schemers.org/srfi-197/srfi-197.html
[22:12:05] <Zipheir> In any case, I don't think partial application is in the same league of confusion-causing features.
[22:12:15] <Zipheir> amazigh: Yes.
[22:12:45] <mdhughes> And (map (λ (x) (+ x 1)) xs) is nearly as short as some magic invocation, and it's explicit.
[22:13:16] <mdhughes> Literally a 1-line macro to make λ work.
[22:13:34] <Zipheir> Yet in the ML-derived world of FP, (+ 1) is absolutely standard.
[22:13:41] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 245 seconds)
[22:13:58] * mdhughes looks at topic, sees "Scheme". Maybe Mark needs his eyes checked and it says "ML"?
[22:13:59] <Zipheir> It's fine to avoid that style, but Schemers are outnumbered here.
[22:14:05] <amazigh> maybe they Scheme contrarians :)
[22:14:10] <amazigh> maybe they are Scheme contrarians :)
[22:14:19] <mdhughes> If I wanted ML, I'd be coding in fucking Ocaml.
[22:14:20] <Zipheir> The Curse of Lisp!
[22:14:38] <amazigh> ML and Haskell are Lispers in disguise x')
[22:14:50] <amazigh> more seriously, I need to test lambda*
[22:15:01] <mdhughes> I know it a little, I've shipped fixes to someone else's program in it, it's… fine for what it is. I'd never use it myself.
[22:15:21] <Zipheir> Ostensibly Scheme is part of the functional programming world.  I don't see any reason to drive people away because of contrarian sentiments.
[22:15:41] <Zipheir> No-one has to use any language feature they don't like, after all.
[22:16:06] <mdhughes> > A wide variety of programming paradigms, including functional, imperative, and message passing styles, find convenient expression in Scheme.
[22:16:12] <Zipheir> e.g. I'm not a huge fan of OO, but I don't have any issue with the various Scheme OO systems.
[22:16:46] <amazigh> at least inheritance for errors looks like a good thing.
[22:17:19] <mdhughes> Which is fine to support some of their kind of progamming, but I think adding too much violates the KISS principle.
[22:17:27] <Zipheir> There is a tradition of contrarian-ness in Lisp, and IMHO it has led to some stagnation.
[22:18:45] <Zipheir> It's a special blend of hyper-hybrid low-level functional programming, and Lisp conventions haven't taken much from the last 35 years of research.  Which has its upsides, sure.
[22:19:28] <amazigh> Zipheir: in the examples section, extra arguments, what is interestiong about the example in plain english?
[22:20:35] <amazigh> So proc-one takes one argument and return another procedure, passing three arguments to proc-one will pass the extra arguments to the returned lambda*?
[22:20:42] <Zipheir> I recall a rather intense comment from D.A. Turner to Phil Wadler at some 1990s conference to the effect that "Lisp, unfortunately, hasn't contributed anything to functional programming recently."  It was rather pedantic, but I think he wasn't entirely wrong.  Anyway.
[22:21:18] <amazigh> Sorry, for mentioning MLers and haskellers are Scheme contrarians.
[22:21:35] <Zipheir> amazigh: I'm trying to find the example you're talking about.
[22:21:57] <Zipheir> One moment.
[22:22:01] <amazigh> sometime doing the opposite of what everybody is doing is a good thing, like... microservice hell.
[22:22:13] *** Joins: nimu (~nimu@31-38-22.wireless.csail.mit.edu)
[22:22:46] <amazigh> it is just above "implementation" section
[22:23:25] *** Joins: seninha (~chatzilla@user/seninha)
[22:24:42] <Zipheir> amazigh: Your description makes sense to me.
[22:25:41] <Zipheir> amazigh: Applying a one-arg lambda* procedure to three arguments passes the two remaing arguments to the body, which, since it's a unary procedure, binds an argument and passes the remaining argument to it body.
[22:25:52] <Zipheir> *its
[22:26:22] <amazigh> That is mind expanding, I much prefere lambda* to cut (srfi-26).
[22:26:43] *** Joins: skapata (~Skapata@user/skapata)
[22:26:52] <Zipheir> So ((lambda* (a) (lambda* (b) (lambda* (c) (+ a b c)))) 1 2 3) => ((lambda* (b) (lambda* (c) (+ 1 b c))) 2 3), and so on
[22:27:38] <amazigh> I read the code it makes more sense, maybe adding sentence to explain what happens can help future readers.
[22:27:41] <amazigh> I wonder whether SRFI-197 requires an update?
[22:27:48] <Zipheir> amazigh: Yeah, it's a cool design, because you can still apply the procedure to all the arguments at once.
[22:28:19] <Zipheir> amazigh: OK, thanks, I'll add some explanations to the examples.
[22:28:53] <Zipheir> I also realized that the second variadic example is just vanilla lambda code.
[22:29:43] <Zipheir> amazigh: SRFI 197 is much heavier-weight. 
[22:30:08] <Zipheir> chain macros are a whole different thing.
[22:30:46] <amazigh> yes, but you do not need the syntax _ if all the procedure are created with lambda*
[22:31:03] <amazigh> SRFI-197 could more lightweight.
[22:31:18] <amazigh> with SRFI-232
[22:31:50] <Zipheir> You still need _ (or <>, why didn't they use that?) if you want to specialize an argument other than the first/leftmost.
[22:32:03] <amazigh> indeed!
[22:32:36] <Zipheir> I don't know if you even need chain with lambda star.  Wouldn't compose(-right) do the trick?
[22:32:58] <Zipheir> Weird, I just typed out "lambda star" for some reason.
[22:33:24] <amazigh> compose or compose-right can work with lambda*
[22:33:29] *** Quits: nimu (~nimu@31-38-22.wireless.csail.mit.edu) (Quit: Client closed)
[22:34:06] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[22:35:42] *** Joins: vats (~vats@103.216.143.6)
[22:36:46] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[22:42:05] <Zipheir> amazigh: I definitely agree that it's good to avoid current fads.  But, if you look at the Haskell/Agda/Idris communities, there has been an incredible amount of development in the last few decades.  Scheme hasn't seen that.
[22:42:59] <dpk> hmm, to some extent it has
[22:43:08] <dpk> continuation technology has moved on
[22:43:26] <Zipheir> Yes, that's true.
[22:44:03] <dpk> continuation marks and their ability to give full tail recursion in the presence of dynamic variables (well, parameter objects), and tail-recursive lazy iteration without delay-force, has been a major step forward
[22:44:42] <dpk> hygienic macro technology also, to a lesser extent, with the sets-of-scopes model
[22:44:51] <dpk> (arguably, though, this is all in Racket, not in Scheme)
[22:45:20] <Zipheir> Yeah, Scheme is way ahead in hygienic macro work.
[22:45:32] *** Quits: vats (~vats@103.216.143.6) (Ping timeout: 256 seconds)
[22:47:27] *** Joins: seninha (~chatzilla@user/seninha)
[22:52:20] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[22:53:25] *** Joins: cedb (~ced@user/ouestbillie)
[22:54:43] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[22:59:06] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[23:12:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:19:07] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:40:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:43:59] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[23:47:56] *** Joins: badkins (~badkins@136.56.92.199)
[23:53:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:54:57] <amazigh> Zipheir: I was trying to joke.
[23:55:10] <amazigh> not a good joke.
