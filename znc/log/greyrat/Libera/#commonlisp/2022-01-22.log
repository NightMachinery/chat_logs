[00:03:39] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[00:07:20] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[00:09:17] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[00:10:31] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:20:35] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[00:21:17] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[00:30:08] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:38:17] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[00:44:50] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:45:00] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:46:06] *** Joins: johnjaye (~pi@173.209.65.233)
[00:48:56] *** Joins: patrick_ (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:48:57] *** Quits: attila_lendvai (~alendvai@catv-176-63-13-209.catv.broadband.hu) (Ping timeout: 240 seconds)
[00:49:25] *** patrick_ is now known as pm
[00:55:30] *** pm is now known as karmichammer
[00:56:15] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[00:58:34] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[01:02:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:04:57] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:09:19] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Changing host)
[01:09:19] *** Joins: karmichammer (~patrick@user/karmichammer)
[01:16:01] <marcoxa> Hi everybody...
[01:17:21] <phoe> hey hi
[01:17:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:17:50] <marcoxa> after a long time I found some thime to work on CDR, so there are some news about it (which also include phoe :) ).  You can see an announcement on my blog (https://within-parens.blogspot.com/2022/01/cdr-is-next.html) where you can find the link for the new web site.
[01:18:06] <marcoxa> Enjoy...
[01:18:22] <phoe> marcoxa: is your blog linked to Planet Lisp?
[01:19:21] <marcoxa> Yes.  But I post little.  My day job gets in the way (luckily that includes inflicting Common Lisp to students).
[01:19:26] <phoe> OK - thanks!
[01:20:54] <marcoxa> Bye now... Time to sleep :)
[01:21:05] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Quit: Time to sleep...)
[01:27:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:32:17] *** Joins: parjanya (~esb@200.173.186.29)
[01:38:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:38:30] *** Quits: karmichammer (~patrick@user/karmichammer) (Ping timeout: 250 seconds)
[01:40:45] *** Quits: foxfromabyss (~foxfromab@2a01:c22:ac34:c500:585f:b194:c7c2:5834) (Ping timeout: 256 seconds)
[01:40:51] *** Quits: rotateq (~user@185.66.193.48) (Quit: ERC (IRC client for Emacs 27.2))
[01:42:10] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:44:07] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:45:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:49:26] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[01:50:24] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:54:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[02:01:22] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e6:8fde:298f:e728:848d:e9fd)
[02:05:23] <yottabyte> So what do people do with large apps with lots of functions, methods, etc., when they want to make changes? I've only worked on small lisp programs. Are there like static code analyzers people set up or some way to document the code? I know Clojure has spec but I've never actually used it
[02:05:52] <yottabyte> Or maybe they just have a test suite which will fail if methods/functions/arguments are changed, etc.?
[02:08:00] <pjb> yottabyte: to be sustainable, large applications need to be structured modularly, so you can change or add those small functions without having any major impact on the rest.
[02:08:07] <pve> yottabyte: you could try to structure the large app so that it looks like many small lisp programs working together
[02:08:53] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[02:09:28] <pjb> yottabyte: for example, an important point is the DRY principle.  Don't Repeat Yourself.  Ie. don't copy-and-paste code, but instead factorize things out so that you write a thing only in one place.  Then when you want to make a change, you need to change only this one place.
[02:09:29] <yottabyte> And what do people do, use asdf to bundle everything together?
[02:09:34] <pjb> of course.
[02:10:02] <yottabyte> Gotcha
[02:10:16] <White_Flame> yottabyte: one thing to do is make sure to restart your image often
[02:10:32] <pjb> yottabyte: for an example of application: https://gitlab.com/patchwork/patchwork
[02:10:34] <White_Flame> because just because you have it running doesn't mean it'll load in the same way as what you've ben devving
[02:11:19] <pjb> yottabyte: You may get  https://gitlab.com/patchwork/scripts  and run get-and-compile on a macOS with ccl. https://gitlab.com/patchwork
[02:13:35] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e6:8fde:298f:e728:848d:e9fd) (Ping timeout: 268 seconds)
[02:17:30] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[02:17:37] *** Quits: parjanya (~esb@200.173.186.29) (Ping timeout: 240 seconds)
[02:25:14] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[02:26:56] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[02:28:32] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[02:29:27] *** Quits: pve (~pve@178-55-133-102.bb.dnainternet.fi) (Quit: leaving)
[02:31:05] <yottabyte> I need ccl to compile?
[02:31:42] *** Joins: Bike (~Bike@71.69.170.70)
[02:32:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:33:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[02:37:04] <pjb> yottabyte: yes.
[02:37:11] <pjb> yottabyte: it uses Cocoa.
[02:39:21] *** Joins: igemnace (~ian@user/igemnace)
[02:43:39] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:44:55] <yottabyte> I see
[02:47:29] *** Joins: dra (~dra@2a04:4540:6405:4a00:9da1:d2d3:1f56:71e5)
[02:50:55] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[02:52:15] *** Joins: parjanya (~esb@200.173.186.29)
[02:53:51] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:53:58] *** Joins: lispy (~lispy3@84.69.59.93)
[02:56:04] *** Joins: morganw (~user@80.225.24.132)
[02:59:55] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e6:8fde:298f:e728:848d:e9fd)
[03:00:48] <lispy> (format t "Hello World!")
[03:02:12] *** Joins: akoana (~ah@user/akoana)
[03:04:46] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e6:8fde:298f:e728:848d:e9fd) (Ping timeout: 268 seconds)
[03:04:49] *** r3st` is now known as r3st
[03:18:33] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:23:53] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[03:24:31] *** Quits: dra (~dra@2a04:4540:6405:4a00:9da1:d2d3:1f56:71e5) (Quit: Leaving)
[03:24:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[03:28:06] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[03:37:04] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:45:25] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[03:55:19] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[03:58:59] <White_Flame> when dealing with sockets, what's the best way to manage CRLF end of lines?  I'd like read-line to work with that eol
[03:59:17] <White_Flame> and obviously also sending it by default
[04:01:55] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:06:27] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[04:06:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[04:09:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:11:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[04:12:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:18:41] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:20:38] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:23:23] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[04:27:16] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[04:32:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:37:29] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:51:57] *** Quits: VincentVega (~user@212.97.0.240) (Remote host closed the connection)
[04:58:26] *** Joins: Oladon (~olad@98.43.81.226)
[04:59:05] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[05:03:35] <EdLangley[m]> I'm not sure, I've always used read-sequence and implemented read-line myself
[05:03:59] <mfiano> Is there any way I can transform each value of a multiple-values returning form without an intermediate list, with a macro or such to reduce something like this: (multiple-value-bind (a b c d) (func-that-returns-at-least-four-values) ... (* a 10) (* b 10) (* c 10) (* d 10)). Doubtful but just asking. It is known ahead of time that there will be 1-4 values at all times.
[05:04:27] <EdLangley[m]> multiple-value-call might help?
[05:04:55] <EdLangley[m]> (multiple-value-call 'transform-results (foo)) calls transform-results with all the values of FOO
[05:06:01] <mfiano> Ah that's right. In this case I am trying to clean up some really verbose call sites, both verbose due to DRY, and also the transformation calculation itself. I think it might be worthwhile to macro away the lambda form.
[05:06:37] <EdLangley[m]> I wrote some utilities based on this: https://github.com/fiddlerwoaroof/fwoar.lisputils/blob/master/multiple-values.lisp
[05:07:19] <mfiano> Thanks, I'll have a look.
[05:07:44] <mfiano> Ed, always a very helpful community member :)
[05:10:46] <yitzi> Ed Langley: nice!
[05:11:43] <mfiano> EdLangley[m]: Needs documentation. I'm not quite sure what they do at first glance
[05:12:00] <mfiano> Mind showing some example input/outputs if you have time?
[05:12:55] <EdLangley[m]> SKIP-VALUES drops the first N values FORM returns
[05:13:06] <EdLangley[m]> LIMIT-VALUES retains only N values of FORM
[05:14:43] <EdLangley[m]> TRANSFORM-FIRST-VALUE calls TRANSFORM with the first value returned by FORM and then returns it as the first value, without losing the rest of the values
[05:15:00] <EdLangley[m]> SUBSTITUTE-VALUES is probably a bad idea
[05:15:41] <EdLangley[m]> But, most of these were just intended to show how to use MULTIPLE-VALUE-CALL to avoid an intermediate list
[05:17:05] <mfiano> Great!
[05:19:16] *** Joins: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449)
[05:19:23] <moon-child> ideally, a Sufficiently Smart Compiler would be able to avoid actually consing up a list
[05:19:35] <moon-child> I don't think such a thing exists, but...
[05:19:49] <Common-Lisp> Not yet.
[05:20:03] <moon-child> (though bike was apparently experimenting with optimization to mv-call.  And I know sroa is wanted for sicl.  So combine those and you've got yourself a party)
[05:20:27] <ns12> Anyone buying the SICP in JavaScript? https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1
[05:20:41] <ns12> s/the //
[05:21:18] <moon-child> I looked at a bit of the online version
[05:21:22] <moon-child> (specifically the interpreter)
[05:21:39] <moon-child> it gets _really_ bogged down in syntax, and I don't think it even showed how to build a parser
[05:22:48] <moon-child> moreover it seems to be written in javascript in name only.  No one actually uses head() and tail() in js; they use arrays and hashtables^Wobjects
[05:24:18] *** Quits: lispy (~lispy3@84.69.59.93) (Quit: Leaving)
[05:24:43] <ns12> This one? https://sicp.sourceacademy.org/chapters/4.1.1.html  (4.1.1  The Core of the Evaluator)
[05:25:20] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:25:34] <moon-child> I think it was most blatant in this section  https://sicp.sourceacademy.org/chapters/4.1.2.html
[05:28:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:28:13] <ns12> Ah yes, I think Lispers will have no use for that kind of syntax jungle, given that the Lisp version is much simpler.
[05:29:13] <Bike> multiple-value-call is already pretty optimized in sbcl, or at least if you write (apply ...) that's going to end up as an m-v-call
[05:30:00] <mfiano> Bike: Ah good to know
[05:30:21] <Bike> in clasp (lambda (... &rest r) (values-list r)) will not actually cons a list, and i wouldn't be surprised if that was the case in sbcl as well
[05:30:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:31:28] <mfiano> I'm trying not to assume any specific compiler or heavy type annotations for this code, which is quite unusual for me, and a trend I hope to continue.
[05:32:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[05:32:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:33:21] <moon-child> mfiano: if you are trying to not assume any specific compiler, then you should not make assumptions about your code's performance characteristics
[05:33:35] <mfiano> That is correct
[05:37:20] <mfiano> I won't choose a pattern because "it works good on the implementation I use, or most people use". I also refuse to use structs now, and value the extensibility and modularity supplied by standard-class's and generic functions, which conflicts with any goal for ultimate performance anyway (on current implementations anyway)
[05:37:59] <EdLangley[m]> )
[05:38:22] <mfiano> ?
[05:38:24] <EdLangley[m]> (hopefully someone opened a paren for that
[05:38:33] <mfiano> )
[05:38:35] <EdLangley[m]> my daughter got to my keyboard
[05:38:47] <moon-child> but, then, why do you want to avoid an intermediate list?
[05:41:11] <mfiano> Because it's been a long time since I used CL and I must have been remembering m-v-c, and it's standard behavior. Besides, this was mostly a question to reduce DRY violations.
[05:43:26] *** Joins: unyu (~pyon@user/pyon)
[05:44:00] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:45:06] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[05:45:14] <mfiano> I'm still not quite sure how to use it for my problem though.
[05:46:07] <mfiano> But my problem was ill-specified so that's on me.
[05:47:13] <semz> ns12: To me the book feels like a continuation of this inane obsession that people must be taught in "popular" languages and never learn anything else. It doesn't seem to serve any other purpose. Sad, but what can you do.
[05:49:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[05:50:41] <Bike> i can imagine making (lambda (&rest r) (values-list (mapcar f r))) not cons, but it would take a pretty good amount of compiler work
[05:51:13] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:55:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[06:08:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:12:24] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[06:12:48] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 250 seconds)
[06:16:34] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:22:18] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[06:28:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[06:35:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:36:51] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:41:54] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:45:18] *** Joins: jeosol (~jeosol@user/jeosol)
[06:48:39] *** Joins: Everything (~Everythin@37.115.210.35)
[06:53:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[06:56:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:59:47] *** Quits: parjanya (~esb@200.173.186.29) (Ping timeout: 256 seconds)
[07:04:12] *** Quits: Common-Lisp (~o@2600:1700:94cc:cf:cec6:abc9:37c0:8449) (Quit: Leaving)
[07:12:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:17:57] *** Joins: Oladon (~olad@98.43.81.226)
[07:18:24] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:18:37] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[07:24:50] *** Quits: jpl01 (~user@2001:16b8:49b9:f300:b583:4fba:1c07:2929) (Remote host closed the connection)
[07:30:11] <beach> Good morning everyone!
[07:31:56] <ns12> Good morning beach.
[07:33:24] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[07:44:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:47:00] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[07:49:23] *** Quits: danieli (~danieli@user/danieli) (Remote host closed the connection)
[07:50:01] *** Joins: danieli (~danieli@user/danieli)
[07:50:42] *** Quits: danieli (~danieli@user/danieli) (Remote host closed the connection)
[07:51:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[07:54:36] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Quit: ERC (IRC client for Emacs 27.1))
[07:55:30] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[08:08:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:11:13] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:17:49] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:18:06] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.0)
[08:19:29] *** Joins: semz_ (~semz@user/semz)
[08:19:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:20:30] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[08:21:05] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[08:22:22] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:22:44] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:28:00] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[08:33:36] *** semz_ is now known as semz
[08:33:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Read error: Connection reset by peer)
[08:39:12] <|smlckz|> how can i get the next power of 2 à la ceiling?
[08:40:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:40:52] <EdLangley[m]> (expt 2 (ceiling (log n 2)))
[08:41:24] <|smlckz|> thanks, i forgot log
[08:41:34] <EdLangley[m]> There's also probably some bit-twiddling version...
[08:42:00] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:43:08] <|smlckz|> (ash 1 (ceiling (log n 2))) ;; how do i do the log via bit twiddling, i don't know
[08:44:19] <mfiano> (ash 1 (max 3 (integer-length (ceiling 63.9))))
[08:45:17] <Bike> i feel like there's probably a way to do it with integer-length, but it gets funny if you provide a power of two
[08:46:30] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[08:48:41] <mfiano> What do you mean by funny?
[08:49:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:59:36] *** Joins: Alfr (~Alfr@user/alfr)
[09:00:13] <mfiano> Bike: ?
[09:00:34] <semz> It's just (ash 1 (integer-length (- n 1))) if you want (next-power-of-2 (expt 2 n)) to be (expt 2 n).
[09:01:22] <mfiano> Right. (ash 1 (integer-length (1- (ceiling n)))) or (expt 2 (ceiling (log n 2))) should work. You can remove CEILING from the first if you don't expect floating-point inputs.
[09:07:51] <EdLangley[m]> It's funny how everyone's solutions look like (ash 1 ...)
[09:08:08] <EdLangley[m]> My inclination was to do (ash n 1) then clear everything but the first bit
[09:08:45] *** Joins: parjanya (~esb@200.173.186.29)
[09:11:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[09:11:49] <EdLangley[m]> I think "clear everything but the first bit" ends up being equivalent to this problem, though
[09:15:38] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[09:15:50] <Bike> having to subtract one is the kind of thing i meant by "funny". nothing difficult, but also tricky enough that i'm going to have trouble remembering it
[09:17:56] <mfiano> Well the question _did_ ask for the _next_ power of 2. You could remove the #'1- in that case if you don't want >=
[09:19:35] <Bike> let me rephrase: "funny" was more me saying that i'm bad at bit twiddling than anything substantial about the problem
[09:20:09] <mfiano> Hey, we can start a bad at bit twiddling club!
[09:20:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:21:37] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[09:21:51] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[09:26:19] *** Joins: winningluser (~w@2601:8c1:80:70d0::4b06)
[09:27:40] *** winningluser is now known as [w]
[09:29:32] *** Quits: [w] (~w@2601:8c1:80:70d0::4b06) (Client Quit)
[09:30:08] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:32:23] <moon-child> Bike: I was thinking rather of (lambda (&rest r) (values-list (subseq x 0 3))), which seems more reasonable
[09:32:57] <Bike> also tricky but doable
[09:33:20] <Bike> actually i could probably do that one fairly quickly
[09:34:57] <moon-child> the complication would come from the case where there are fewer than 3 values
[09:35:25] *** Joins: winningluser (~w@2601:8c1:80:70d0::4b06)
[09:35:30] *** winningluser is now known as [w]
[09:37:45] <Bike> don't think that would be difficult. it's just an error.
[09:43:06] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[09:49:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 240 seconds)
[09:52:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[09:53:12] *** Joins: Jing (~hedgehog@115.207.51.203)
[09:53:47] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[10:05:40] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[10:09:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[10:14:42] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[10:15:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:15:29] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:16:05] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:20:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:23:13] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[10:27:56] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[10:33:31] *** Joins: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233)
[10:46:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[10:49:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:50:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:51:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:53:31] *** Joins: s-liao39 (~s-liao@101.86.96.21)
[10:56:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:56:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:58:43] *** Joins: notzmv (~zmv@user/notzmv)
[11:05:47] *** Quits: Jing (~hedgehog@115.207.51.203) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:08:09] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:08:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[11:11:23] *** Quits: s-liao39 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:13:06] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:9dd8:fa79:cee0:389c)
[11:13:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:13:35] *** Quits: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233) (Quit: Leaving)
[11:13:50] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[11:14:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:19:50] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:23:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[11:32:47] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[11:33:23] *** Joins: foxfromabyss (~foxfromab@dynamic-078-055-114-070.78.55.pool.telefonica.de)
[11:38:19] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:42:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[11:45:08] *** Joins: danieli (~danieli@user/danieli)
[11:49:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:50:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:55:16] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:59:28] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[12:00:18] *** Joins: kevingal (~quassel@80.233.43.128)
[12:06:06] *** Joins: pve (~pve@87-93-188-7.bb.dnainternet.fi)
[12:10:02] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c83a:1a80:bf93:c803)
[12:11:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:12:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:19:55] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[12:49:40] *** Joins: shka (~herr@109.231.0.226)
[12:49:59] *** Quits: foxfromabyss (~foxfromab@dynamic-078-055-114-070.78.55.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:53:41] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c83a:1a80:bf93:c803) (Ping timeout: 268 seconds)
[12:54:50] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c83a:1a80:bf93:c803)
[12:56:36] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[13:01:21] *** Joins: vats (~vats@103.158.91.8)
[13:01:30] *** Quits: vats (~vats@103.158.91.8) (Client Quit)
[13:01:43] *** Joins: vats (~vats@103.158.91.8)
[13:18:08] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[13:22:33] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[13:24:14] <contrapunctus> Is there library to access the default applications for an operating system?
[13:25:41] <rotateq> contrapunctus: On which operating system are you running on?
[13:25:45] <moon-child> sounds like fdo-ish crap
[13:25:53] <rotateq> (sometimes also called platform)
[13:27:18] <contrapunctus> rotateq: Linux, but ideally such a library would be cross-platform...
[13:30:09] <rotateq> Maybe you can have a look at uiop, but surely that's just for unix based platforms. I don't know for Windows, Apple or the like.
[13:32:43] <rotateq> Or better I may ask more: Which kind of applications do you want to access?
[13:38:01] <contrapunctus> rotateq: web browsers, PDF viewers, text editors, info viewers, ...
[13:38:04] *** Quits: kevingal (~quassel@80.233.43.128) (Remote host closed the connection)
[13:38:15] <rotateq> Okay :)
[13:39:56] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c83a:1a80:bf93:c803) (Ping timeout: 268 seconds)
[13:40:55] <rotateq> So getting information from or write data to foreign system processes.
[13:41:59] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (Quit: leaving)
[13:42:01] <rotateq> Oh now I remember, MacOS of course roots from unix too.
[13:45:42] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[13:49:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 256 seconds)
[13:54:51] <beach> contrapunctus: This is the first time I hear the term "default applications for an operating system".
[13:57:29] <pjb> beach: GUI system such as macOS or Windows, and even on Linux, Gnome or KDE, have such a notion. So you can ask the system to open a url with the default browser, and the user can decide whether he uses Safari or Firefox as default browser.  Same for email, and other kind of applications.
[13:57:59] <beach> I see.  Thanks!
[13:58:33] <pjb> beach: on linux: https://www.lifewire.com/how-to-set-default-apps-in-linux-4589945
[13:59:10] <beach> Got it, thanks.
[14:00:26] <pjb> contrapunctus: There seem to be a generic tool to do that: xdg-settings set default-web-browser brave-beta-bin.desktop
[14:01:02] <moon-child> on linux, this is primarily specified by fdo.  That is redhat-ware, which should tell you all you need to know about it
[14:07:53] <[w]> it doesnt
[14:08:20] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:09:52] <beach> [w]: Are you new here?  I don't recognize your nick.
[14:10:33] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[14:10:47] <phoe> oh hey [w]
[14:10:51] <[w]> `xdg-open' will also open assumed default applications. like `xdg-open https://examples.com' will attempt to open a browser, or `xdg-open init.el' will open a text editor and so on.
[14:10:56] <phoe> nice to see you around here too
[14:10:59] <[w]> phoe: hey :)
[14:11:01] <[w]> beach: yes
[14:11:27] <beach> [w]: Great.  I take it phoe knows you from elsewhere.
[14:11:32] <phoe> beach: t
[14:11:40] <[w]> yep
[14:12:17] *** Joins: jpl01 (~user@2001:16b8:4916:9700:5e4a:1007:9979:b7a5)
[14:14:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:15:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:17:44] *** Lord_of_Life_ is now known as Lord_of_Life
[14:28:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:30:36] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[14:36:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[14:36:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:36:40] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[14:36:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:39:17] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[14:41:29] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[14:42:56] *** Quits: vats (~vats@103.158.91.8) (Ping timeout: 256 seconds)
[14:49:28] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-67.dsl.bell.ca)
[14:54:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-67.dsl.bell.ca) (Ping timeout: 256 seconds)
[14:55:58] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:08:34] *** Joins: vats (~vats@103.158.91.8)
[15:21:16] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:22:44] <|smlckz|> how do i print the nth argument to format?
[15:23:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:24:30] <phoe> clhs ~*
[15:24:30] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/22_cga.htm
[15:24:34] <phoe> maybe this will help you a little bit
[15:26:00] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:30:54] <|smlckz|> how do i zip (transpose?) a list of lists? ((1 2 3 4) (5 6 7 8) (9 10 11 12)) ==> ((1 5 9) (2 6 10) (3 7 11) (4 8 12))
[15:31:36] <phoe> |smlckz|: (mapcar #'list '(1 2 3 4) '(5 6 7 8) '(9 a b c))
[15:32:51] * |smlckz| bangs head into the wall several times
[15:33:22] <phoe> mapcar #'list is just one of these magical things :D
[15:33:32] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[15:34:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:37:00] <phoe> it makes total sense once you understand it, but it isn't the most trivial thing to come up with on your own
[15:38:22] <|smlckz|> T
[15:39:17] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[15:43:24] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:50:03] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[15:50:20] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:04:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:04:35] <beach> |smlckz|: And if you already have those lists in another list, it is (apply #'mapcar #'list '((1 2 3 4) (5 6 7 8) (9 10 11 12)))
[16:05:36] <beach> ... which is one step harder again to come up with on your own.
[16:12:23] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:13:18] *** Joins: VincentVega (~user@212.97.0.240)
[16:24:22] *** Quits: vats (~vats@103.158.91.8) (Ping timeout: 256 seconds)
[16:28:20] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[16:32:17] *** Joins: kevingal (~quassel@80.233.35.128)
[16:44:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:46:38] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:47:23] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[16:48:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:50:38] <|smlckz|> is there a function which is the same of twice doing not?
[16:50:58] <phoe> usually it isn't necessary, but (lambda (x) (not (null x)))
[16:51:00] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[16:51:17] <phoe> it isn't necessary because every Lisp value is a valid boolean
[16:51:21] <phoe> a concept known as generalized booleans
[16:51:45] <phoe> e.g. to check if a list contains only true values, (every #'identity list) is enough
[16:52:57] <|smlckz|> i want the output of find as an actual instead of generalised boolean
[16:53:21] <phoe> output of find? what do you mean?
[16:54:09] <beach> You already have a generalized Boolean.
[16:54:20] <beach> Oh, sorry misread.
[16:54:40] <beach> But yeah, generalized Booleans should work in all situations.
[16:55:39] <|smlckz|> the output (find item sequence ...) function
[16:56:00] <beach> Why do you need T rather than the element?
[16:56:06] <|smlckz|> is there anything better than (if a t nil)
[16:56:41] <beach> phoe just told you (not (null x)).
[16:56:51] <phoe> there isn't, but the question is why do you explicitly need the output to be EQ to CL:T
[16:57:15] <phoe> it isn't something I encounter often in code, hence my question
[16:58:17] <|smlckz|> i am making a list of truth values from minterms, say, (1 3 6 7) of 3 variables gives (nil t nil t nil nil t t)
[16:59:27] <phoe> oooh, so you *explicitly* want either the symbol NIL or the symbol T
[16:59:49] <beach> And what do you do with those truth values?  If you use them in a test, then any true value will do.
[17:00:01] <phoe> in that case, (if ... t nil) would personally be the most readable to me
[17:00:09] <phoe> if you want them for e.g. later readability, that is
[17:00:28] <|smlckz|> hmm
[17:00:45] <phoe> since it would be more readable than e.g. (nil 2 nil #() nil nil (nil) #<STANDARD-CLASS CL-USER:FOO>)
[17:01:04] <phoe> which is equivalent truth-wise, but not really easy to parse
[17:01:24] <beach> So it depends on what they are going to be used for.
[17:02:33] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:03:56] <|smlckz|> i will share my code here for you to see and to give me suggestions for improvements in it
[17:04:05] <phoe> |smlckz|: please use a pastaebin
[17:04:08] <phoe> pastebin*
[17:04:13] <phoe> and sure, let's take a look at it
[17:06:53] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[17:07:36] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[17:17:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:18:27] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:25:04] *** Joins: silasfox (~fox@p200300cec749ab00c73f14147946d259.dip0.t-ipconnect.de)
[17:27:02] <|smlckz|> here's the current state, it's incomplete, much work is needed to be done to call it what it advertises..: http://sprunge.us/NuxKSQ
[17:27:42] <|smlckz|> suggestions welcome
[17:28:05] <phoe> untabify your sources and only use spaces, that's the first one
[17:28:20] <phoe> otherwise your Lisp indentation depends on the program that opens your file
[17:28:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[17:29:20] *** Joins: amb007 (~a_bakic@101.36.22.93.rev.sfr.net)
[17:29:50] <beach> |smlckz|: There is no particular reason to have a newline after `(loop'.  If you use the slime-indentation contribution, it will indent the clauses correctly.
[17:30:23] <|smlckz|> phoe: i'm using emacs along with slime
[17:30:36] <phoe> |smlckz|: tell your emacs to never use tabs for Lisp, then
[17:31:21] <beach> |smlckz|: Your choice of parameter names is not great.  It is better to use a complete word than one-letter names.
[17:31:35] <|smlckz|> ok
[17:32:27] <beach> |smlckz|: (loop for i from ... to (1- <something>) can be expressed as (loop for i from ... below <something>.
[17:33:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[17:33:24] <beach> |smlckz|: `if ... collect a else collect b' can be expressed as 'collect (if ... a b)'
[17:33:36] <pve> |smlckz|: you can try something like M-x customize-variable RET indent-tabs-mode RET
[17:34:00] *** Quits: kevingal (~quassel@80.233.35.128) (Remote host closed the connection)
[17:34:22] <beach> |smlckz|: The LOOP keyword DO can take more than one form, so no need for PROGN.
[17:35:02] <beach> |smlckz|: LOOP returns NIL by default, so no need to return NIL explicitly afterwards.
[17:36:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:37:18] <|smlckz|> hmm, there was a write-line there, after the loop
[17:37:35] <beach> |smlckz|: I recommend you choose better names also for introduced lexical variables.
[17:41:29] <|smlckz|> what do i use instead of n.. is number-of-variables okay?
[17:42:05] <beach> Sure, or I often use ...-count which is shorter.  Like variable-count.
[17:42:06] *** Quits: amb007 (~a_bakic@101.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:42:09] <phoe> nvars or nvariables maybe - a bit less verbose but still vonveying the intention
[17:42:14] <phoe> conveying*
[17:43:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:45:21] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:46:02] <|smlckz|> i'm going with nvars then
[17:46:05] <mfiano> I would much rather be explicit with full words
[17:46:50] <mfiano> It isn't very good style to name things short unreadable variables
[17:47:38] <|smlckz|> hmm
[17:49:15] <|smlckz|> how can i make boolean-values into an iterative function instead of recursive?
[17:49:56] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[17:53:55] <yitzi> |smickz|: Just increment an n-bit integer from 0 to its max value?
[17:54:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[17:55:41] *** Joins: amb007 (~a_bakic@101.36.22.93.rev.sfr.net)
[17:56:16] <phoe> |smlckz|: https://plaster.tymoon.eu/view/2887#2887
[17:57:59] <mfiano> |smlckz|: my solution: https://gist.github.com/mfiano/dd59e6832d67214e22f7434b7e949276
[17:58:23] <phoe> ;; or, to quirk a few brows, https://plaster.tymoon.eu/view/2888#2888
[17:58:37] <mfiano> Note it's the cartesian product, not combination
[17:58:46] <mfiano> And alexandria has a tool for this! :)
[17:58:46] *** Quits: amb007 (~a_bakic@101.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:59:24] <|smlckz|> &aux?
[17:59:38] <phoe> yes - don't use that one, it can confuse people
[18:00:01] <phoe> it's an obscure way to create local variables, LET and LET* are more readable
[18:00:25] <|smlckz|> hmm, interesting
[18:00:41] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:00:50] <mfiano> Added a comment to my gist with the result. Not sure if it is what you are after
[18:01:18] <phoe> mfiano: looks consistent with what my code outputs, so I assume that's OK
[18:03:08] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[18:05:11] <mfiano> Yeah only difference I can see is mine is sorted
[18:05:23] <mfiano> I am not sure how map-product is implemented. I am too lazy to go look
[18:06:28] <|smlckz|> i'll use external libraries later, but for now i'm sticking to the standard library
[18:07:32] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[18:11:02] <_death> smlckz: (dotimes (i (expt 2 4)) (format t "~4,'0B~%" i)) .. you can use logbitp to test the value at a particular bit position
[18:13:01] <yitzi> And then maybe use bit-vectors since you are converting back and forth between 1/0 and t/f. Just a thought.
[18:19:19] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[18:19:54] <_death> it iterates through each permutation.. bit-vectors don't support such an operation.. they're more useful for, say, representing dense sets
[18:20:32] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[18:20:53] *** Joins: amb007 (~a_bakic@101.36.22.93.rev.sfr.net)
[18:21:52] <_death> the thing about bit-vectors is that they are mutable, unlike integers (think bignums)
[18:27:09] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[18:27:51] <_death> to get 0/1 you can use ldb.. so (defun logbit (index integer) (ldb (byte 1 index) integer))
[18:29:23] *** Joins: johnjaye (~pi@173.209.65.233)
[18:30:49] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[18:31:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[18:36:17] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6526:4700:60fa:dfd3:ee54:41ac)
[18:39:31] *** Joins: vats (~vats@103.216.143.18)
[18:43:37] *** Quits: amb007 (~a_bakic@101.36.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[18:43:55] *** Joins: amb007 (~a_bakic@165.144.204.77.rev.sfr.net)
[18:54:05] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[18:54:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:55:49] *** Joins: Bike (~Bike@71.69.170.70)
[18:56:22] *** Joins: JoshYoshi (~user@37.25.47.130)
[18:58:17] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 240 seconds)
[18:58:53] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[19:00:06] <phoe> what's the somewhat-agreed naming convention for global non-dynamic variables? =foo=?
[19:01:37] *** Quits: JoshYoshi (~user@37.25.47.130) (Ping timeout: 240 seconds)
[19:01:39] *** Quits: [w] (~w@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[19:03:25] <_death> if you mean something like sbcl's defglobal, why not the same as constants (no muffs)?
[19:04:47] <phoe> a bit too close to setting an unbound lexical variable
[19:05:08] <phoe> which looks like a bug unless someone knows that a symbol names a non-dynamic global
[19:07:50] <_death> when you encounter (setf x 123) and don't rely on warnings you need to look at the context anyway.. granted, context of lexical scope is quite limited in comparison.. I wouldn't have muffs.. but global-vars uses "-" and I think I've seen "=", as you mentioned, somewhere too
[19:08:13] <phoe> yes, these are the two I was wondering about
[19:08:45] <_death> sbcl itself seems to use "*"...
[19:09:00] <phoe> single? or double?
[19:09:16] <_death> single.. I guess because they usually move from special to global
[19:11:17] *** Quits: amb007 (~a_bakic@165.144.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[19:11:23] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[19:11:40] *** Joins: amb007 (~a_bakic@143.198.204.77.rev.sfr.net)
[19:12:50] <White_Flame> earmuffing constants with #\+ is quite standard, even if manyclhs constants are unmuffed
[19:13:18] <White_Flame> but yeah, I'd say #\* is fine for globals, too
[19:13:51] <_death> White_Flame: that's true.. I used that convention as well for a while.. but in recent decade(?) I think I just left them unmuffed, like CL itself
[19:14:07] <White_Flame> this is also something I wish the dev environments would automatically markup in some way
[19:20:41] <White_Flame> another thing that I would really like to be more directly optimized is to have thread-local variables, instead of special, to remove checking for whether the current binding is tls or global
[19:21:21] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[19:21:23] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Client Quit)
[19:23:26] <_death> what happens if you (let ((*my-thread-local* *my-special*)) (declare (special *my-thread-local*)) ...)
[19:24:03] <White_Flame> same thing as if it were *my-global* iirc, compilation error
[19:24:09] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:24:16] <_death> ?
[19:24:39] <White_Flame> let me test...
[19:25:35] <White_Flame> oh, the global error comes from attempting a LET, not from a further declaration
[19:25:57] <_death> not sure how we got to a compilation error
[19:26:43] <White_Flame> what's the standard behavior for having conflicting declarations?  the innermost one overrides?
[19:27:29] <_death> I'd guess undefined, but better check
[19:27:59] <White_Flame> ok, so declaring a sb-ext:global as special within a body does error: "Can't declare global variable locally special: *GLOB*"
[19:28:07] <White_Flame> I think that's not unreasonable behavior
[19:28:21] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[19:28:25] <_death> hmm, why would you declare global as special?
[19:28:34] <White_Flame> why would you declare tls as special? :)
[19:28:53] <White_Flame> as per your "what happens if" line
[19:29:16] <_death> I assumed you want special semantics.. otherwise just use a lexical?
[19:29:16] *** Quits: amb007 (~a_bakic@143.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[19:29:24] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:29:36] <White_Flame> special = global or tls
[19:29:47] <White_Flame> and most implemenations have to do a runtime check
[19:30:13] <_death> the reason I mentioned declare special is that then you don't have a global
[19:30:14] <White_Flame> global restricts it to one usage, tls would restrict it to the other usage
[19:31:13] <White_Flame> just like defglobal restricts you from binding it separately, TLS would restrict it from having a global value
[19:32:01] <White_Flame> and you can't take a sb-ext global and declare it locally special
[19:32:21] <_death> again.. my remark had nothing to do with defglobal
[19:32:55] <White_Flame> it's a very related declaration
[19:33:05] <White_Flame> that's already implemented and gives a reasonable model to use
[19:33:33] <_death> I think we are miscommunicating.. time for breakfast ;)
[19:33:40] <White_Flame> I'd consider decisions on edge cases such as locally declaring it special to how defglobal behaves
[19:34:14] <White_Flame> because it already went through all those design decisions
[19:36:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:39:55] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[19:40:03] <marcoxa> Hi there
[19:41:59] <White_Flame> hi
[19:53:09] *** Quits: djuber` (~user@65.79.128.64) (Remote host closed the connection)
[19:53:48] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:01:20] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[20:12:33] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:cf2:af63:d2b:de9)
[20:13:40] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[20:14:43] <White_Flame> a question came up in #lisp that I've pondered as well:  What do you do when a macroexpansion needs to generate toplevel code (say like a DEFUN, or add data to a DEFVAR initializer) but the macro is not used at toplevel?
[20:16:39] <beach> If it's top-level code, you can use EVAL.
[20:16:41] <White_Flame> I proposed LOAD-TIME-VALUE, but that seems like an unintentional use of that facility.
[20:17:09] <White_Flame> beach: but then when would the EVAL be called?
[20:17:25] <beach> I think it would expand to (EVAL ....).
[20:17:34] <beach> But I haven't thought too hard about it.
[20:17:34] <White_Flame> (defun foo ()  (my-macro ...)), you'd want the effect fo that EVAL to exist before the lexical my-macro expansion is executed
[20:17:47] <beach> Oh, I see.
[20:17:57] <marcoxa> I am not sure what you mean White_flame.
[20:18:02] <qhong> If it's top-level code it can just expand to `(DEFUN ...)` directly
[20:18:40] <White_Flame> another idea I used in prior code was that the call-site macro would stuff data into a compile-time variable, then a macro usage at the very end would splat out the top-level accumulation of all that info.  But that can be error-prone in terms of discipline
[20:19:04] <marcoxa> Looks like qhong's suggests may work.  Then you have EVAL'WHEN or plain PROGN.
[20:19:11] <White_Flame> marcoxa: say you want a hashtable that's initialized with data from every non-toplevel macro usage
[20:19:27] <qhong> marcoxa: top-level is easy. Problem is the macro is not at top-level
[20:19:55] *** Quits: parjanya (~esb@200.173.186.29) (Ping timeout: 256 seconds)
[20:20:06] <marcoxa> The hash-table example still is unclear to me.
[20:20:26] <White_Flame> in my case, it was a DSL, where every usage would have an entry in a central hashtable that the compiler referenced
[20:20:46] <White_Flame> but the DSL usages were never toplevel; they were inline forms
[20:21:07] <White_Flame> so no toplevel macro to generate the central DEFVAR value
[20:21:15] <marcoxa> Ok.  So?  You have the HT defined beforehand.
[20:21:26] <White_Flame> you want the HT initialized before anything is run
[20:21:40] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e6:8fde:6139:6fde:c6a9:296b)
[20:21:51] <White_Flame> the initialization data comes from the macros scattered throughout the code, that you want all accumulated before any of them are called
[20:21:52] <marcoxa> Isn't that circular?
[20:21:59] <qhong> marcoxa: Or consider my example: I have a `nclo` macro with syntax like (defun make-inc-1 (x) (nclo inc (y) (setf x (+ x y)))), and it need to generate a toplevel `defun` with name `inc`
[20:22:09] <White_Flame> the accumulation shoudlu happen at compile-time
[20:23:09] <White_Flame> or rather, the accumulation should technically happen at toplevel execution time, before any defun is called
[20:23:22] <White_Flame> *before any runtime entry function is called
[20:23:48] <White_Flame> so yeah, the generalized description is for non-toplevel macro usages to generate toplevel code
[20:24:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:24:28] <marcoxa> Ok qhong.  Quite convoluted but that is what (SETF (SYMBOL-FUNCTION 'INC) ...) seems for.  Ov course, you do need to use EVAL at macro-expansion time.
[20:24:47] <White_Flame> EVAL at macroexpansion time is lost when reloading fasls
[20:25:17] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:25:42] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:cf2:af63:d2b:de9) (Ping timeout: 268 seconds)
[20:26:09] <marcoxa> True.  Then the LOAD-TIME-VALUE suggestion may work.
[20:26:37] <marcoxa> I still think it's convoluted.  KISS principle, etc etc etc.
[20:26:37] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:26:46] <White_Flame> that would seem to be the case.  I haven't tried it, my prior "working" things required blowing away the fasl cache on each build, or the 2-step macro hack
[20:27:05] <qhong> macroxa: (SETF SYMBOL-FUNCTION) seems the obvious solution, but it has wrong redefinition time semantics. For example, if someone redefined the above MAKE-INC-1, the new INC definition only take effect after MAKE-INC-1 is first called rather than right after redefinition. EVAL during macroexpansion has correct redefinition time, but has wrong compile time behavior. The new definition doesn't get carried over to runtime environment
[20:27:11] <White_Flame> you want KISS for the user, not for the implementer ;)
[20:27:16] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:9dd8:fa79:cee0:389c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:27:26] <White_Flame> do the hard things once, so that it's easier to use after solved
[20:27:33] <White_Flame> *after it's solved
[20:28:25] <marcoxa> I think many times implementor and luser like to KISS each other :)  Haveing said that, I would look more carefully at L-T-V.  Just my 2 cents.
[20:28:44] <White_Flame> yep
[20:29:15] <qhong> yep, LOAD-TIME-VALUE looks like the only hopeful direction so far
[20:29:36] <White_Flame> the guarantees in CLHS for it in COMPILE-FILE scenarios seem to put the side effects at the right time.  For other C-c C-c style uses, it's probably also okay
[20:29:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[20:30:18] *** Joins: amb007 (~a_bakic@143.198.204.77.rev.sfr.net)
[20:30:53] <White_Flame> it doesn't seem to be the intent of L-T-V, though, hence the questioning here
[20:31:04] <White_Flame> (and it's a cumbersome problem to describe)
[20:32:24] *** Joins: rogersm (~rogersm@90.166.180.250)
[20:33:06] <mfiano> Is there a way to combine two multiple-values-returning forms to be a values form with all values, without using an intermediate list?
[20:33:07] <rotateq> |smlckz|: Many thanks, you reminded me to refresh my knowledge on Karnaugh-Veitch and Quine-McCluskey some day again. ^^
[20:33:08] <beach> I think load-time-value is fine if it works for this situation.
[20:33:30] <Bike> mfiano: (multiple-value-call #'values form1 form2)
[20:33:38] <mfiano> Thanks
[20:34:18] *** Joins: lispy (~lispy3@84.69.59.93)
[20:36:42] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[20:41:57] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[20:44:29] *** Quits: silasfox (~fox@p200300cec749ab00c73f14147946d259.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[20:46:34] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ea:da13:6139:6fde:c6a9:296b)
[20:46:34] *** Quits: amb007 (~a_bakic@143.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:46:41] *** Joins: jstoddard (~Jeremiah@189.202.78.167.cable.dyn.cableonline.com.mx)
[20:47:53] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:50:22] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e6:8fde:6139:6fde:c6a9:296b) (Ping timeout: 268 seconds)
[20:50:37] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:50:51] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[20:51:55] <mfiano> Thanks again, and I now finally have a fairly complicated macro working the way I want, after 2 days of repeated trial and error.
[20:52:20] <White_Flame> cool, congrats
[20:53:04] <marcoxa> Way to go...
[20:55:15] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[20:55:36] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:55:37] <mfiano> Needed a quasi-code-walker. That was my problem.
[20:56:24] <mfiano> Well the biggest one, anyway
[20:57:52] <mfiano> quasi, because it just needed to find and replace leaf nodes in an arbitrary list...not really code, or constructing a syntax tree in any form. I cheated and used TREE-LEAVES from Let Over Lambda, which worked good enough.
[20:58:31] <marcoxa> mfiano: you may have a look at - shameless plug - clast.sourceforge.net
[21:02:08] <_death> sublis?
[21:03:44] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[21:03:59] *** Joins: amb007 (~a_bakic@143.198.204.77.rev.sfr.net)
[21:07:03] <phoe> _death: AFAIK tree-leaves walks with arbitrary functions for comparison and substitution
[21:07:49] <_death> well, sublis has :test for comparison
[21:07:55] <phoe> sublis would likely work here, too
[21:12:56] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[21:17:17] *** Quits: amb007 (~a_bakic@143.198.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[21:20:37] *** Joins: jeosol (~jeosol@user/jeosol)
[21:24:05] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:24:42] *** Joins: amb007 (~a_bakic@32.147.204.77.rev.sfr.net)
[21:30:23] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[21:31:05] <mfiano> _death: I will look into it, thanks! Admittedly, I don't think I have ever used that one, though I have seen it used in the wild before.
[21:31:06] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:31:50] <mfiano> I'm not a huge fan of tree-leaves' api to be honest.
[21:32:14] <mfiano> I typically always use (constantly replacement) for its replacement function, for example.
[21:36:37] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ea:da13:6139:6fde:c6a9:296b) (Ping timeout: 268 seconds)
[21:47:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:50:17] *** Joins: cosimone (~user@93-47-231-147.ip115.fastwebnet.it)
[21:50:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:50:32] <qhong> Is there a best pratice for defining readable PRINT-OBJECT methods for objects?
[21:50:43] <qhong> Using `#.` looks wacky
[21:51:14] <mfiano> I'm not sure what the correlation is
[21:51:39] <mfiano> #. is for read-time evaluation
[21:51:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:52:27] <qhong> I need PRINT-OBJECT to produce something that is able to be read back
[21:52:44] <qhong> Producing something like #.(make-instance ...) is one obvious solution
[21:53:09] <Bike> well, it's that or making up your own reader macro
[21:57:49] <White_Flame> why the #. ?  just print (make-instance ...)
[21:58:24] <White_Flame> serialization has a ton of identity issues, and *PRINT-CIRCLE* doesn't really solve them
[21:58:30] <Bike> because that will be read back as the list (MAKE-INSTANCE ...), not the actual instance
[22:03:50] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[22:04:09] <pjb> qhong: define a reader macro to read the syntax printed by your print-object method!
[22:04:17] <pjb> qhong: see an example in gsharp.
[22:04:50] <pjb> qhong: https://github.com/robert-strandh/Gsharp
[22:05:00] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[22:08:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:09:28] <pjb> qhong: https://github.com/robert-strandh/Gsharp/blob/da3762f5d023305fba2899655175bc1ef67b57d2/buffer.lisp#L44 and https://github.com/robert-strandh/Gsharp/blob/master/buffer.lisp#L60
[22:10:57] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 240 seconds)
[22:15:53] *** BytesAndCoffee|a is now known as BytesAndCoffee
[22:17:12] <qhong> pjb: Yes that looks sensible. However I'm worried about interoperation in a sufficiently large image. Read syntax are not scoped like symbols and different libraries might clash. Having each library using its own readtable is also not desired because one might want to print nested object with subobjects from different origins.
[22:35:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:44:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[22:52:16] <Gnuxie> what's the name of the portability layer that has stuff like sb-instrospect:function-lambda-list in it?
[22:54:36] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[22:55:28] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[22:55:30] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[22:56:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:57:41] *** Quits: lispy (~lispy3@84.69.59.93) (Quit: Leaving)
[22:57:45] <qhong> Gnuxie: I normally just use `swank'
[22:58:30] <qhong> btw shameless plug: just finished this https://github.com/BlueFlo0d/named-closure
[22:59:06] <Gnuxie> qhong: hmm, yeah I thought about that but I'm a little hesitant to depend on it
[22:59:54] <qhong> Gnuxie: there's also `trivial-arguments'
[23:01:03] <Gnuxie> ok, that works, thanks
[23:03:42] <_death> maybe instead of saying "closures are broken", consider saying "closures are optimized for something that I don't care about, here's what I want"
[23:08:05] <White_Flame> for point 3, the symbol's function is disconnected from any lexical bindings.  Calling the function creates the lexical variable scope
[23:08:38] <White_Flame> a function is legitimately one half of a closure, and its redefinition I don't think is applicable to closures
[23:09:09] <White_Flame> I do agree with the complaint about introspectability/display
[23:09:35] <qhong> White_Flame: or if you regard closure as an object, it's quite useful to be able to redefine class
[23:09:42] *** Quits: VincentVega (~user@212.97.0.240) (Quit: ERC (IRC client for Emacs 27.2))
[23:09:57] <White_Flame> redefine class is about the data moreso than the functions
[23:10:06] *** Joins: tfeb (~tfb@195.213.60.52)
[23:10:11] <qhong> the other half of closure is data
[23:10:19] <White_Flame> ah, ok
[23:10:44] <White_Flame> I was linking a function+parameter bindings to a closure
[23:11:06] <qhong> I in general find anything impossible to redefine annoying -- I make mistake, and I have some closure floating around in the memory with buggy code
[23:11:11] <White_Flame> s/linking/comparing/
[23:11:18] *** Quits: r3st (~user@2601:282:b00:ba30::90c9) (Remote host closed the connection)
[23:11:33] <qhong> what named-closure does have some caveat (only closed variable with same name is carried over), but IMO better than nothing
[23:11:35] <White_Flame> yep, that was one of my biggest complaints about let over lambda style
[23:14:03] <White_Flame> hmm, with your chosen API, if you have 2 usages of NCLO with the same name, will they trample each others' behavior depending on which NCLO form was last executed?
[23:14:39] <qhong> White_Flame: it will, so you have to use distinct names
[23:15:07] <qhong> I don't have anything better than this in mind so far
[23:16:10] <White_Flame> (defun foo1 () (nclo ...)) (defun foo2 () (nclo ...)) I wonder if the behavior would change at runtime based as FOO1 and FOO2 get called, or if all the trampling happened at load time
[23:16:22] <White_Flame> (with the same nclo name)
[23:16:41] <qhong> At least you will get bunch of style-warnings at compile time I think
[23:17:02] <White_Flame> if you used DEFUN, probably.  If you used (setf (symbol-function ...)...) then no
[23:17:41] <qhong> I do use DEFUN and bunch of DEFMETHOD
[23:17:56] <qhong> seems that I actually get 4 style warnings everytime an NCLO is redefined
[23:18:02] <White_Flame> I personally woudl document this as "Externalizes the body of a closure to a DEFUN so that it can be redefined for all instances of that closure"
[23:19:06] <White_Flame> *all existing instances
[23:20:39] <White_Flame> hmm, I guess that's already covered, n/m
[23:30:17] *** Quits: amb007 (~a_bakic@32.147.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[23:31:57] *** Quits: tfeb (~tfb@195.213.60.52) (Quit: died)
[23:35:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:35:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:36:55] *** Joins: morganw (~user@80.225.24.132)
[23:39:53] *** Joins: hobo (~hobo@204.128.242.10)
[23:41:05] *** Joins: amb007 (~a_bakic@84.196.204.77.rev.sfr.net)
[23:41:39] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6526:4700:60fa:dfd3:ee54:41ac) (Ping timeout: 256 seconds)
[23:55:27] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:55:28] *** Quits: amb007 (~a_bakic@84.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:59:04] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
