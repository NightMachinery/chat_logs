[00:00:18] <kakuhen> criticize theora for being a bad h264 clone, only to release an equally bad h264 clone (vp8) years later, but at least the reference encoder isn't absolutely terrible this time
[00:01:00] <GreaseMonkey> speaking of H.264 have the patents expired yet
[00:01:06] <kakuhen> nope
[00:01:09] <GreaseMonkey> dammit
[00:01:26] <random-nick> they didn't even develop vp8, they just bought the firm which was developing it 
[00:01:30] <kakuhen> i have an archive of that libx264 dev's blog somewhere that basically demonstrates how vp8 has basically the same issues as theora as far as "many chunks of the design seem to be ripped straight out of h264"
[00:01:49] <kakuhen> random-nick: sure, but they decided to push what they owned in the end 
[00:02:34] <kakuhen> the one part where theora was slightly better (in its day) against vp8 was apparently the fact that lots of the vp8 spec when google initially released was straight up code from their implementation
[00:02:40] <kakuhen> so bugs in the reference decoder became "features" of vp8
[00:02:41] <random-nick> also, before webp there were a bunch of experimental image formats like flif and bng which had pretty much the same features
[00:03:03] <random-nick> bpg*
[00:11:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:22:55] <shka> https://hackenproof.com/ukraine-will-win/save-millions-lives-hackers-against-russia/reports
[00:22:56] -ixelp- Bug Bounty Program For Ukraine will win ðŸ’™ðŸ’› ðŸ‡ºðŸ‡¦ðŸ‡ºðŸ‡¦ðŸ‡ºðŸ‡¦ | HackenProof
[00:23:08] <shka> they've got some bugs
[00:25:13] *** Guest8728 is now known as Common-Lisp
[00:25:36] <shka> good night all
[00:26:57] <moon-child> https://twitter.com/thingskatedid/status/1498803126765191173
[00:29:26] <GreaseMonkey> WRT that bug bounty, i think the #1 goal should be to make damn sure the Kremlin can't actually shut down the internet
[00:30:38] <hayley> "The cost to ship to Australia seems to have jumped up a lot recently. Dunno why, but I'm getting quoted $70+ for shipping cost." Fuck.
[00:31:30] <hayley> I'd have to check where I found my estimate of $15 or so. Was one of the USPS prices, but I forget which.
[00:39:08] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[00:39:10] *** Joins: aeth_ (~aeth@user/aeth)
[00:39:18] *** aeth_ is now known as aeth
[00:46:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:47:53] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[00:48:55] <selwyn> thats a lot of dollaridoos
[00:53:14] <hayley> https://pe.usps.com/text/dmm300/Notice123.htm#_c341 on "First-Class Package International Service" suggests the $15.85 which I did wire him.
[00:55:43] <hayley> Or not, it actually suggests $19.20 but that's still closer.
[01:02:00] <hayley> But I suspect it's because the USPS quotation site only suggests priority service, but I can wait longer for a damn shirt.
[01:04:29] <hayley> "The Postal Serviceâ„¢ has temporarily suspended international mail acceptance to Australia due to service impacts related to the COVID-19 pandemic. The service disruption affects First-Class Package International ServiceÂ® (FCPISÂ®), Commercial ePacket (CeP), International Priority AirmailÂ® (IPAÂ®) packets, International Priority AirmailÂ® (IPAÂ®) M-Bags, International Surface Air LiftÂ® (ISALÂ®) packets, International Surface Air LiftÂ®
[01:04:29] <hayley> (ISALÂ®) M-Bags, and Airmail M-Bags."
[01:05:13] <hayley> That is apparently from last September (/me has to think to read MM-DD-YYYY dates) but it's still on the site. ):
[01:21:42] *** Joins: lisp123 (~lisp123@120.154.103.52)
[01:26:12] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[01:30:55] * hayley goes back to reading federated Twitter clone
[01:31:06] <hayley> > I am of course, once again asking programmers and tech people to consider Amdahl's law and its implications for society in a world where computer "performance increases" are usually just cramming in more cores
[01:31:09] <hayley> what no LPARALLEL does to a mf
[01:32:08] <hayley> .oO(Aschually, I get bottlenecked by SBCL's single-threaded GC a lot. So much for that.)
[01:32:36] <hayley> Also funny to hear that from a functional programming weenie. You'd think they'd find it easiest to parallelise their code.
[01:41:51] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[01:54:52] <sm2n> what are the implications for society, I don't get it?
[01:56:18] <hayley> "Computers don't really get faster, because no one can write sufficiently parallel code?"
[01:56:40] *** Joins: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[01:57:11] <hayley> Not so sure of that. I mean, GPGPU is still a thing, so there are sufficiently parallel workloads for hundreds or thousands of stupid cores.
[01:58:48] *** Quits: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Remote host closed the connection)
[01:59:40] *** Joins: kevingal (~quassel@37.228.202.47)
[02:03:03] <aeth> yes but
[02:03:28] <aeth> that just makes it harder to parallelize code, strangely enough
[02:03:37] <aeth> because the easiest, most parallel things already moved to GPUs if possible
[02:03:49] <aeth> so CPUs are stuck fighting Amdahl's
[02:11:09] <hayley> ):<
[02:12:13] <hayley> I'd say fuzz testing always can eat more hardware, but I am in GC hell because SBCL either wants a huge heap, or takes its time to collect.
[02:12:45] <hayley> I can't afford to keep increasing the heap with worker count, and I want to get a new CPU with even more cores. So kinda screwed.
[02:14:02] <sm2n> If rust users can afford to spend $40 freeing a hashmap why can't you?
[02:14:14] <sm2n> Clearly this points to a deficiency in the language
[02:14:15] <hayley> :(
[02:15:43] <hayley> Yes, Amazon isn't part of the Common Lisp Foundation, so no one to keep hash map deletion times high.
[02:26:57] <gilberth> Oh dear, (ASH x 0) is slower than (ASH x 1) with CCL as the former insists on a type check.
[02:27:04] <hayley> lol
[02:27:40] * hayley wonders if getting this crap shipped to a friend in Europe, and then getting it shipped here, would be cheaper than the other US->Australia postage options
[02:28:05] <gilberth> Yep, CCL isn't too smart. I always wonder if all those handwritten rules were worth the time, when you could have a better compiler to begin with.
[02:29:08] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:31:36] <hayley> https://www.youtube.com/watch?v=IZS2AeYB_WI
[02:31:36] -ixelp- This lamp can hurt you in two ways - YouTube
[02:32:04] <hayley> "This lamp can hurt you in two ways"
[02:38:48] <gilberth> Two ways? Either on or off?
[02:39:56] <hayley> Yes, one is while it's on, one while it's off.
[02:40:43] *** Joins: tfeb (~tfb@88.98.95.237)
[02:42:40] <gilberth> Oh, so I guessed right. That was easy!
[02:43:18] <hayley> But just how do you hurt yourself with it while the lamp is off?
[02:44:32] <moon-child> thomson's lamp?
[02:44:54] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[02:45:57] <gilberth> When only the neutral is switched, the socket may still be dangerous to touch.
[03:05:35] <GreaseMonkey> i like how this video explains itself and demonstrates it in about 3 minutes
[03:05:54] <GreaseMonkey> and yeah long story short, it probably has a capacitor in it
[03:06:38] <GreaseMonkey> and the other way? it emits UV-C light
[03:08:04] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:11:49] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:15:24] <GreaseMonkey> "low voltage, low power" - your friendly reminder that "very low voltage" ends at 50 V, and 230 V is part of "low voltage" which is in the realm of "probably won't jump out and literally vapourise you"
[03:27:25] <Alfr> gilberth, hm ... I wonder whether (ASH X 0) is defined.
[03:28:11] <Alfr> gilberth, it talks explicitly about positive and negative count, and 0 is neither.
[03:30:29] <moon-child> Alfr: it also says 'Mathematically speaking, ash performs the computation floor(integer*2^count)'
[03:30:37] <|3b|> it says "Mathematically speaking, ash performs the computation floor(integer*2^count).", which seems pretty clear. also, it can shift left or right
[03:31:18] <Alfr> Hm ... okay.
[03:31:20] <|3b|> (or any other direction for that matter)
[03:31:32] <moon-child> it can also shift up? ;o
[03:31:33] <|3b|> and would still get the correct result when shifting by 0 bits
[03:31:39] <|3b|> only by 0 :)
[03:32:00] <Alfr> w/o the floor(..) part, it could shift in either direction by an arbitrary amount.
[03:32:02] <|3b|> for positive and negative shifts it is constrained to left or right
[03:32:16] <|3b|> nah, floor is to make right shifts work
[03:32:25] <|3b|> since input is specified to be an integer
[03:32:56] <moon-child> (ash x #C(0 0))
[03:33:00] <Alfr> |3b|, for positive and negative count, it also says by "count bit positions".
[03:33:14] <|3b|> 2^-2 = 1/4, so FLOOR is what discards bits instead of gibing you a fraction
[03:37:09] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:48:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:48:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Write error: Connection reset by peer)
[03:48:31] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Write error: Connection reset by peer)
[03:50:56] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:51:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:53:19] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:57:21] <gilberth> moon-child: You're almost there. (ash x #c(0 1)) is up. Now what in into the black board?
[04:04:05] <moon-child> well, that is floor(x*2^i)
[04:04:16] <moon-child> 2^i = exp(i*ln2)
[04:04:22] <moon-child> now you need a complex floor
[04:04:35] <moon-child> eugene mcdonnell has one
[04:08:38] <gilberth> Hmm, complex integers?
[04:09:37] <gilberth> Meanwhile I wonder where I could borrow a routine from to subject image to an affine transformation.
[04:16:23] <moon-child> 'complex integers' why not?
[04:16:34] <selwyn> they are called gaussian integers
[04:16:40] <selwyn> and have many nice properties
[04:17:06] <moon-child> https://www.jsoftware.com/papers/eem/complexfloor.htm
[04:17:07] -ixelp- Complex Floor
[04:17:22] <moon-child> specifically https://www.jsoftware.com/papers/eem/img/floor.bmp
[04:17:50] <sm2n> So, I've been writing a bittorrent client and I need a name
[04:17:57] <sm2n> one that doesn't start with cl-
[04:18:09] <sm2n> I really want to use "rapidshare" but it's probably a bad idea
[04:18:15] <sm2n> any ideas?
[04:18:16] <moon-child> jolly-roger
[04:18:27] <sm2n> too on the nose
[04:18:43] <sm2n> We only download linux ISOs :)
[04:19:03] <moon-child> moderately-depressed-roger
[04:19:12] <moon-child> he's sad cuz he can't sail the high seas
[04:19:34] <sm2n> :( poor roger
[04:20:04] *** Quits: kevingal (~quassel@37.228.202.47) (Remote host closed the connection)
[04:23:03] <neominimum> second-rapidshclare
[04:24:46] <Alfr> sm2n, call it: abc
[04:25:00] <sm2n> abc?
[04:25:06] <sm2n> a bittorrent client?
[04:25:15] <Alfr> another bittorrent client
[04:25:24] <sm2n> hmm
[04:25:35] <sm2n> neominimum: I like that it matches second-climacs
[04:25:59] <selwyn> use a one piece reference
[04:26:01] <moon-child> how about YACHT
[04:26:03] *** Joins: X-Scale` (~ARM@153.213.28.37.rev.vodafone.pt)
[04:26:08] <moon-child> yet another chortling hotshot torrenter
[04:26:36] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 240 seconds)
[04:26:36] *** X-Scale` is now known as X-Scale
[04:27:08] <neominimum> sm2n: ;)
[04:27:11] *** Joins: dre (~dre@2001:8003:c932:c301:b9de:333:ba99:ae98)
[04:29:39] <sm2n> hmmm
[04:30:10] <hayley> gilberth: In case you thought GCC was perfect: https://twitter.com/geofflangdale/status/1501718837863288832
[04:30:16] <hayley> "Today in GNU compilers... Straight line code - AND followed by TEST of the same value. Erm, my dude, AND sets the flag (SF) I was looking for. Seriously?"
[04:30:44] <moon-child> 'I was the chair of that working group but I stepped down because I was unhappy with the way the Foundation was being run'
[04:30:52] <moon-child> regarding the riscv dynamic languages extension
[04:31:58] <hayley> This is so sad can we have Smalltalk on a RISC 2
[04:32:30] <moon-child> https://lobste.rs/s/icegvf/will_risc_v_revolutionize_computing#c_vevhgb  oh wow
[04:32:31] -ixelp- Will RISC-V Revolutionize Computing? | Lobsters
[04:34:14] * hayley taps sign saying "No"
[04:37:51] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[04:38:59] *** Joins: robin (~robin@user/terpri)
[04:39:05] *** Quits: X-Scale (~ARM@153.213.28.37.rev.vodafone.pt) (Ping timeout: 256 seconds)
[04:39:05] *** X-Scale` is now known as X-Scale
[04:40:12] <hayley> "Worse, RISC-Vâ€™s i-cache invalidate instruction is local to the current core." Well.
[04:43:53] <pl> ... wait  what
[04:56:23] <hayley> Apparently the "low" end of Threadripper is dead.
[04:56:39] <gilberth> Oh, then what? Tell all cores to invalidate the i-cache? In SW? By using the OS?
[04:56:51] <hayley> Apparently so.
[04:56:54] <moon-child> as the link says
[04:56:57] <moon-child> but sloww
[04:58:05] <random-nick> riscv is essentially popular because of its license, I haven't actually hear anyone praise the instruction set itself
[04:58:12] <gilberth> Ok. I then say (loop (defun foo (x) x)) for fun.
[04:58:13] <random-nick> heard*
[05:06:58] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[05:27:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:28:53] *** Joins: aeth (~aeth@user/aeth)
[05:39:51] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[05:41:07] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[05:41:59] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[05:46:59] <aeth> people who philosophically like RISC like RISC V
[05:47:43] <aeth> as opposed to ARM which gives you... https://news.ycombinator.com/item?id=24808207
[05:47:44] -ixelp- ARM chips have an instruction with JavaScript in the name | Hacker News
[05:48:16] *** Joins: X-Scale` (~ARM@31.22.203.181)
[05:48:38] <GreaseMonkey> RISC-V in my view is a better MIPS from the assembly side
[05:49:04] <aeth> MIPS also has some things that RISC purists complain about, but I can't think of any off of the top of my head
[05:49:05] <GreaseMonkey> no branch delay slots, and also integer multiplication and division aren't shoved over to one side
[05:49:40] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:49:41] *** X-Scale` is now known as X-Scale
[05:50:19] <GreaseMonkey> and honestly, if you know MIPS asm already, then RISC-V asm is pretty easy to pick up
[05:50:31] <moon-child> 'access memory, without any alignment [...] the result will be slow'  bullshit
[05:50:57] <moon-child> it's not gonna be slower than figuring out the offsets yourself, if you need to access something unaligned
[05:52:57] <GreaseMonkey> if unaligned memory accesses are handled in hardware then they should be fast, but SiFive's cores don't do that, and in practice given the OpenSBI emulation of it, it really is painfully slow if you have to hit said emulation
[05:53:40] <moon-child> I think they were talking about x86
[05:54:44] *** Joins: Posterdati (~posterdat@user/Posterdati)
[05:56:05] <GreaseMonkey> as for GCC not being perfect... anything involving Thumb-1 is a total embarassment
[05:57:07] <GreaseMonkey> it ALWAYS assumes that multiplication is slow, and for non-power-of-2 divisions it ALWAYS defers to software division on CPUs w/o a divide instruction, ESPECIALLY given the fact that a magic number multiply approach on even a slow multiplier is faster than the software division
[05:57:51] <GreaseMonkey> Thumb-1 is current, by the way - it's used on the Cortex-M0+ which prior to the electronics shortage was common
[05:58:20] <GreaseMonkey> anything where the ARMv6 (U|S)XT(B|H) opcodes would be used appears to be peephole-optimised, and so if any reordering happens before that, you can end up with the left-shift-right-shift thing
[05:58:45] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[05:59:08] <GreaseMonkey> oh yeah, did i say that it ALWAYS assumes that multiplication is slow? yep, it will happily waste 12 or more cycles doing shifts, adds and subs instead of spending... 1 cycle
[05:59:33] <GreaseMonkey> even the ARM7TDMI was faster than 12 cycles, it was 2-5 depending on the number of leading 0s or sign bits of the arguments
[05:59:39] <GreaseMonkey> erm, of one of the arguments
[05:59:53] <GreaseMonkey> multiplying by a u8 value was 2 cycles if you got this around the right way
[06:07:54] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[07:10:52] * moon-child gets spam email in french and german
[07:12:08] * sm2n doesn't get spam email (yet)
[07:13:24] <moon-child> my favourite was when I got spam with an 'unsubscribe' link
[07:13:56] <hayley> GreaseMonkey: aschually it's not "magic number" it's the multiplicative inverse of that number in the group of Z/2^n
[07:34:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:36:09] *** Joins: aeth (~aeth@user/aeth)
[07:37:06] *** Joins: jeosol (~jeosol@user/jeosol)
[07:38:34] *** Joins: CyberneticRev (~akshay@2600:1700:13d0:66b0:8206:a99c:b3f6:d7c5)
[07:42:58] <moon-child> (defun zerop (x) (loop with r = nil repeat x do (setf r t) finally (return r)))
[07:44:55] * hayley got an email about the startup thing starting next month.
[07:45:12] <hayley> However, two months is not enough time to make a demo-worthy compiler.
[07:46:45] *** Joins: semz_ (~semz@user/semz)
[07:47:05] <sm2n> moon-child: Why do you write these atrocities? Also: negative numbers
[07:47:38] <moon-child> hmm good point
[07:48:15] <moon-child> repeat (ceiling (abs x))
[07:48:18] <gilberth> How about (loop repeat (abs x) do (return nil) finally (return t))?
[07:48:58] <moon-child> gilberth: beat you to it :).  And you need ceiling to deal with nonintegers
[07:49:10] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:49:29] <gilberth> Or better: (loop repeat (ceiling (abs x)) always nil) -- even shorter.
[07:50:08] <moon-child> :/ you win
[07:51:57] <sm2n> Nice, you potentially accidentally added complex number support at the same time
[07:52:24] <moon-child> I did that on purpose
[07:52:25] <moon-child> :P
[07:53:32] <sm2n> btw you don't need the ceiling, at least on sbcl
[07:54:13] <sm2n> the type it declares for repeat is REAL, and it just checks if it goes <= 0 after each decrement
[07:54:23] <sm2n> Not sure if that's specified though
[07:55:39] <gilberth> http://termbin.com/418s
[07:55:40] <moon-child> hmm, spec just sez 'The repeat construct causes iteration to terminate after a specified number of times.  The loop body executes n times, where n is the value of the expression form.  The form argument is evaluated one time in the loop prologue.  If the expression evaluates to 0 or to a negative number, the loop body is not evaluated'
[07:56:06] <moon-child> but not surprised if it's lowered internally to (loop for (gensym) below n) or similar
[07:56:10] <moon-child> gilberth: :L
[07:56:16] * hayley reads the algorithms textbook
[07:56:37] <moon-child> (I thought everybody used the same loop implementation, though ... why the divergence?)
[07:56:45] <hayley> "What is the complexity of this code: x = 0; for (i = 1; i <= N; i++) for (j = 1; j <= i; j++) x++"
[07:56:59] <hayley> Foo, if your compiler can't find the closed form, then you should get a refund.
[07:57:01] <moon-child> O(1) we folded
[07:57:03] <moon-child> it
[07:57:51] <moon-child> hayley: eh.  Folding the inner bit is cool.  Folding the outer bit is a dumb party trick peephole
[07:58:01] <hayley> "for (j = 1; j <= i; j++) x++" == "x += j"
[07:58:20] <moon-child> x += i, rather
[07:58:29] <gilberth> Well, let's see. Addition is O(log n) ...
[07:58:45] <sm2n> gilberth: not in C
[07:59:05] <hayley> "for (i = 1; i <= N; i++) x += j" was Gauss's primary school homework.
[07:59:20] <hayley> Yes, x += i.
[07:59:54] <gilberth> sm2n: Well, all our machines are finite state => there is an upper bound of N => everything is O(1). Now?
[08:00:26] <sm2n> good enough for me
[08:00:40] <sm2n> 64k ought to be enough for anybody
[08:00:55] <gilberth> And hayley didn't say that this is C. Could be any other language. Or C++ and 'N' is of some bignum class.
[08:00:55] * hayley could probably find someone who unironically believes that
[08:01:43] <sm2n> fair enough
[08:02:10] <moon-child> I watched a talk by brian kernighan, he said 'we made unix on computers with 64k of ram, it was really horrible'
[08:02:25] <hayley> The Unix part or the 64k part?
[08:02:30] <moon-child> 64k
[08:02:37] <moon-child> (he also said 'java is interpreted' and 'lisp is a functional language' so make of that what you will)
[08:02:59] * hayley uploaded an image: (400KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qHacSbrwTTlnpymFRuKCCfqN/gun-baker.png >
[08:03:11] <mfiano> lisp functions for me ;)
[08:03:16] <sm2n> well it isn't a dysfunctional language, so he's at least half right
[08:03:53] <hayley> But /me is annoyed that the algorithms class uses "assignments" as a basic operation, when they are mostly imaginary to your compiler and hardware.
[08:03:54] <gilberth> You mean dyswrong?
[08:04:14] <hayley> Tell me about cache misses, arithmetic operations, branches, ...
[08:04:14] <gilberth> Anyhow, to be fair 64kB is tiny.
[08:04:21] * moon-child compiles hayley with a continuation
[08:04:27] <sm2n> dyswrong?
[08:04:45] <sm2n> oh, half
[08:05:16] <sm2n> hayley: Go sit in on the phd classes instead
[08:05:23] <hayley> sm2n: Can't.
[08:05:36] <sm2n> Figures.
[08:05:36] <gilberth> And swapping must have been a pain.
[08:05:59] <hayley> I'm still only in the second year of undergraduate studies.
[08:07:57] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:09:06] <hayley> "Let's say your laptop can run 1 million operations per second" Hm.
[08:09:51] <sm2n> how old is this book
[08:10:12] <sm2n> 1 MHz ought to be enough for anybody?
[08:10:13] <hayley> What the lecturer said two minutes ago.
[08:10:28] <moon-child> sm2n: you only get 1 ipc?
[08:10:30] <moon-child> damn shame
[08:11:12] <gilberth> A workstation once was a machine with 1MIPS, 1MB, and one million pixels.
[08:11:28] <sm2n> Actually I wonder what average ipc I get on my laptop
[08:12:16] <moon-child> a million pixels is not too bad
[08:12:24] <sm2n> considering that most workloads I have are not really tight arithmetic loop style ones
[08:12:36] <moon-child> 1366x768 or so
[08:12:51] <sm2n> Can I run my entire OS under perf or something?
[08:13:00] <sm2n> How would I even check this?
[08:13:15] <moon-child> dunno
[08:13:55] <hayley> So now time complexity isn't your O() in this course, but rather the total number of a particular instruction executed.
[08:14:35] <gilberth> Oh and how would that be useful?
[08:15:05] <moon-child> that's not _inherently_ problematic.  It just projects a particular time complexity onto the set of basic operations, one which may not reflect reality
[08:15:23] <kakuhen> "lisp is functional language" is not the worst, i think
[08:15:31] <hayley> It's not inherently anything, but now I wonder what they call O() if not "time complexity".
[08:15:38] <kakuhen> there's this absolutely brain dead "compilation" of "functional languages," and they include Swift of all languages
[08:16:03] <kakuhen> i'm yet to find out why anyone would consider swift a functional language
[08:16:11] <hayley> Cause it's slow?
[08:16:13] <moon-child> hayley: it is time complexity, unless I have misinterpreted.  Where you
[08:16:19] <kakuhen> hayley: holy shit this is genius
[08:16:20] <moon-child> s/Where you//
[08:16:23] <kakuhen> i laughed irl reading this
[08:16:27] <moon-child> Under a cost model where everything except assignment is free
[08:16:44] <kakuhen> refcounting = functional garbage collector
[08:17:17] <hayley> Some time in the near future:
[08:17:30] <hayley> Welcome to Interlisp from 1976! We have - deferred reference counting - redefinition
[08:17:31] <sm2n> moon-child: Yes, that works
[08:17:44] <sm2n> sudo perf top -e cycles -e instructions
[08:17:47] <gilberth> Really? refcounting is not a working garbage collector.
[08:17:58] <sm2n> And I am way below 1 ipc
[08:18:21] <moon-child> sm2n: average is less than 1 ipc.  But I bet if your cpu could only sustain 1 ipc the average would be lower still
[08:18:28] <gilberth> hayley: Yes, which a table which could overflow. You get a warning that GC is turned off permanently. A joke.
[08:18:40] <moon-child> rc 'works' in a referentially transparent language, where you cannot create cycles
[08:18:59] <sm2n> moon-child: true
[08:19:18] <gilberth> Wouldn't that be a dysfunctional language?
[08:19:53] <sm2n> Hah!
[08:20:10] <hayley> moon-child: Sure, it's a model. But both "estimation of times an instruction is dispatched" and "type of growth" are named "time complexity" now.
[08:20:24] <sm2n> moon-child: Referential transparency isn't sufficient. See: tying the knot
[08:20:35] <sm2n> If your language is lazy you can still create cycles
[08:20:47] <hayley> Tying the knot can be done while lazily copying recursive objects.
[08:20:52] <moon-child> sm2n: sure, yes
[08:21:01] <moon-child> hayley: yes
[08:21:25] <hayley> gilberth: /me wants to use deferred RC for incremental freeing of mature space in a generational GC.
[08:22:28] <gilberth> hayley: Sure, but just don't have a fixed table that could overflow and then render the machine without any GC at all.
[08:22:40] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Ping timeout: 256 seconds)
[08:23:16] <gilberth> It's like "Save your buffers! Now!" Wait a second. Which buffers again?
[08:26:03] * hayley hears "hardware dependent parameter" again.
[08:26:04] <hayley> I sure hope I never live to see hardware where a division is cheaper than an assignment.
[08:26:35] <hayley> gilberth: Yes, there would be backup tracing. But the idea is that I am tight on RAM, and would like to remove stuff without doing a trace all the time.
[08:26:47] * sm2n steals hayley's ALU
[08:27:30] *** Joins: aeth_ (~aeth@user/aeth)
[08:27:30] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[08:27:33] *** aeth_ is now known as aeth
[08:30:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:31:08] <hayley> "If our algorithm takes O(log n) time, how much more data can we put in on a 64x faster computer" "idk, what's the base?" "It doesn't matter, you can factor out the base for order of growth." "But this isn't an order of growth problem."
[08:33:43] <hayley> The lecturer is going to invert it himself, and I hope he will find x = log_b n == n = b^x quickly.
[08:33:49] <sm2n> <https://github.com/simplex-chat/simplex-chat>
[08:33:49] -ixelp- GitHub - simplex-chat/simplex-chat: ðŸš€ SimpleX - the first chat platform that is 100% private by design - iOS and Android [...]
[08:34:00] <sm2n> huh, this is similar to my idea...
[08:34:08] <sm2n> but no persistence
[08:34:10] <hayley> 100% private?
[08:34:14] <sm2n> so close but yet so far
[08:34:47] <sm2n> this seems to be the actual overview: <https://github.com/simplex-chat/simplex-chat/blob/master/simplex.md>
[08:34:48] -ixelp- simplex-chat/simplex.md at master Â· simplex-chat/simplex-chat Â· GitHub
[08:35:04] <hayley> Huh, he found new = old^64. /me scratches head
[08:35:20] <hayley> (where "new" is time for a 64x faster computer, "old" is time for the old computer.)
[08:36:21] <hayley> "Comparison with other protocols": "P2P protocols:" "Federation: No"
[08:36:26] <hayley> Last I checked, that's a good thing.
[08:36:45] <sm2n> yeah, that was what I thought
[08:37:08] <sm2n> their claim is that p2p means you have to have a global identity which is bad, and federation is somehow different
[08:37:15] * hayley head scratches
[08:37:15] <sm2n> as far as I can tell
[08:38:04] <hayley> Macsyma comes up with new = e^(log(old) / 64).
[08:38:30] <hayley> (Of course, we'd replace e with the base in the exponential function - I said it was important.)
[08:38:41] <hayley> So, what I've learnt so far is that the lecturer can't do maths. ok
[08:40:15] <hayley> Or I've fed the wrong problem to Macsyma.
[08:42:06] <hayley> And now Macsyma comes up with new = old^64. But I don't see how that happens, when I have to "invert" the t(N) = log_b(N).
[08:45:49] <hayley> Suppose we can do 64Ã— the instructions in the same time. So ops(new-size) / 64 = ops(old-size) for both to take the same time. Then I substitute to log(new-size) / 64 = log(old-size), then rearrange to log(new-size) = log(old-size) * 64. Then I undo the logs by new-size = old-size ^ 64. ok then.
[08:49:10] <sm2n> Yeah, it makes sense
[08:49:14] <gilberth> You need Macsyma for that?
[08:50:31] <sm2n> Conceptually, for a log n algorithm, every time you increment your compute time i.e add more ops, you double your search space, which is exactly what that says
[08:51:11] <gilberth> Yep, one step more for b times the work.
[08:52:26] <hayley> gilberth: I had come up with new-size = old-size * b^64.
[08:53:38] <hayley> ...when the new machine can do 64Ã— the ops in a time unit, compared to the old machine.
[08:54:05] * sm2n finds out that the thing posted earlier is made by a company. bleh.
[08:54:10] <gilberth> Well, in n steps you do a b^n sized work. So for 64n you do a b^(64n) sized work.
[08:54:29] <hayley> Right.
[08:54:41] <sm2n> <https://github.com/simplex-chat/cla/blob/master/CLA.md>
[08:54:42] -ixelp- cla/CLA.md at master Â· simplex-chat/cla Â· GitHub
[08:54:53] <sm2n> uh huh...
[08:55:06] <hayley> "DHT implementations have complex designs that have to balance reliability, delivery guarantee and latency, and also have some other problems. The proposed chat system design has both _higher delivery guarantee_ and low latency"
[08:55:08] <hayley> Very funny.
[08:55:10] * sm2n is disappointed again
[08:55:24] <hayley> 1-(1-p)^n for n nodes or it didn't happen.
[08:55:53] <sm2n> I think this may have been the first time I have seen someone rewrite a go thing in haskell though
[08:56:01] <hayley> "P2P implementations can be blocked by some Internet providers (like BitTorrent). The proposed design is transport agnostic - it can work over standard web protocols, and the servers can be deployed on the same domains as the websites." wat?
[08:56:56] <sm2n> Translation: Everything should run over HTTPS
[08:57:01] <hayley> So can Netfarm, but "P2P = no content-hiding wire protocol" is an awfully large brush to stroke with.
[08:57:02] <gilberth> Server? peer-to-peer? Now what? Doesn't mix.
[08:57:46] <gilberth> Or blend, for that matter.
[08:58:14] <hayley> "All known P2P networks are likely to be vulnerable to Sybil attack" Only if you need to make a decision based on your peers. Netfarm doesn't. (The mostly non-existent P2P version of) Matrix also doesn't.
[08:59:25] <hayley> gilberth: Having "servers"? Sure. But you could spin up a TCP service on any port, assuming your ISP isn't an asshole and permits incoming TCP connections.
[09:00:00] *** Joins: notzmv (~zmv@user/notzmv)
[09:01:27] <gilberth> hayley: NAT?
[09:02:00] <hayley> Of note - a P2P system allows degrading to a quasi-trusted/federated system, where you and your friends all use a common node that someone operates. But the reverse (one node per user on federation) is more painful.
[09:02:05] <gilberth> You find many internet connections that are actually behind a NAT.
[09:02:45] <sm2n> yup, p2p is more robust
[09:03:17] <hayley> I wouldn't know how a more "traditional" P2P service, usually over UDP, would survive a NAT either.
[09:03:41] <sm2n> hole punching works, mostly
[09:04:13] <hayley> Netfarm is odd by using SSL/TCP.
[09:06:57] <gilberth> Gnutella doesn't.
[09:07:08] <gilberth> Survive NAT that is.
[09:08:25] <gilberth> For queries it can, but not for actual outward file transfer.
[09:09:25] <sm2n> gilberth: webrtc is widely deployed and more or less relies on hole punching
[09:10:06] <sm2n> it can be made to work in most configurations... it is just very fiddly, and you need a signaling server
[09:10:19] <sm2n> which I assume gnutella doesn't have the luxury of having
[09:12:28] <gilberth> I am not that familiar with hole punching. But for gnutella to work you need an UDP port reachable from outside. And file transfer uses TCP then.
[09:13:01] <gilberth> sm2n: Suppose we are both NATed, could we punch a hole to each other with no third party?
[09:13:08] <sm2n> no
[09:13:18] <sm2n> you need a signaling server, as I said
[09:13:33] <sm2n> to coordinate the hole punching handshake
[09:13:49] <gilberth> I was just asking because I never actually diged hole punching.
[09:14:10] <sm2n> basically we both have to open an outgoing connection to each other at the same time
[09:14:34] <sm2n> that way both NATs think there is an outgoing connection, but actually it is bidirectional
[09:14:37] <gilberth> Ok. But when I install a signalling server on say bauhh.dyndns.org, we could punch to each other. Even with NAT enabled at the ISP?
[09:14:43] <sm2n> yes
[09:14:56] <sm2n> in theory, anyway
[09:15:04] <sm2n> and it generally works
[09:17:37] <gilberth> Ok. I see. But how does it work to convince the box doing the NAT to route each others traffic to our machines? There must be some table entry for a connection, doesn't it?
[09:17:47] <sm2n> it's essentially an exploit of a race condition in how NAT works
[09:18:26] <hayley> https://www.youtube.com/watch?v=PCB8nv4fatc "Little did I know that the activity LED can be disabled in software."
[09:18:27] -ixelp- CosmicPI: Detecting Cosmic Rays with a Raspberry Pi - YouTube
[09:18:36] <gilberth> Ok. So one end of the connection is still a wild card in the connection table? I reach for say 1.2.3.4, but you answer instead?
[09:18:58] <sm2n> you have to time it correctly, so that my request reaches you after you send your request, and your request reaches me after I send my request, but before there are any responses on either side
[09:19:27] <sm2n> there shouldn't be a wildcard, I don't think?
[09:20:02] <sm2n> I try to connect to your ip, and the nat table is open because you just tried to connect to my ip and it thinks I am responding to you
[09:20:06] <sm2n> and vice versa
[09:21:12] <sm2n> the signaling server is for negotiating the timings and finding the right ips to use
[09:22:16] <sm2n> the success rate is affected by things like the latency between device to nat, so it can be fiddly in practice, and that's where the complexity is
[09:22:28] <gilberth> Ok. And it perhaps uses something state-less, like UDP?
[09:23:32] <sm2n> hmm, I think it works with both tcp and udp
[09:23:43] <gilberth> Sure. Of course. I send you an UDP packet and you send a reply coordinated by the signalling server. NAT is happy then and makes the entry.
[09:25:03] <gilberth> I mean, the moment I send an UDP packet to 1.2.3.4:5678 a packet from the same address makes it through to me. Doesn't it?
[09:25:23] <sm2n> I think that is the basic idea, yeah
[09:26:14] <gilberth> For TCP I have no clue, I never bothered with learning the details of the connection setup.
[09:28:15] <mfiano> I'd tell you a UDP joke, but you might not get it.
[09:29:05] <sm2n> That was a real TCP joke, considering how many times it was resent
[09:29:29] <mfiano> :)
[09:30:24] <sm2n> Has anyone here ever written a network stack?
[09:30:39] <gilberth> o/
[09:31:19] <gilberth> If a Chaos NCP counts.
[09:31:39] <sm2n> I don't know what that is
[09:31:58] <mfiano> A primitive Lisp Machine protocol.
[09:32:35] <gilberth> Well, not exclusive to the Lisp Machine. The NCP is a network something processor.
[09:33:19] <gilberth> But Chaos is not fit for WAN.
[09:33:31] <sm2n> oh, interesting, is there documentation available somewhere?
[09:34:00] <gilberth> Yep, there is.
[09:34:02] *** Quits: dre (~dre@2001:8003:c932:c301:b9de:333:ba99:ae98) (Ping timeout: 252 seconds)
[09:34:08] <hayley> https://www.youtube.com/watch?v=D28uSzCs7-k "A standard deviation of 0, or a lying deviation in some cases."
[09:34:09] -ixelp- Open Source 8.5 Digit Voltmeter from CERN: Build and Test - YouTube
[09:34:45] *** Joins: dre (~dre@2001:8003:c932:c301:b9de:333:ba99:ae98)
[09:36:19] <sm2n> gilberth: Where?
[09:36:49] <gilberth> AIM-628
[09:37:58] <sm2n> oh, I've heard of chaosnet
[09:39:16] <gilberth> Here is my copy <http://clim.rocks/gilbert/cadr/AIM-628_chaosnet.pdf>
[09:39:29] <sm2n> NCP is apparently Nework Control Program
[09:39:50] * sm2n wonders if they took that from Tron
[09:42:30] <gilberth> The FILE protocol <http://clim.rocks/gilbert/cadr/Chaosnet_File_Protocol_Sep81.pdf>
[09:42:34] * hayley grumbles, someone ruined her Pi uptime by flicking the wrong power switch.
[09:43:09] <gilberth> Anyhow, the Chaosnet protocol is quite simple. When I ever get around to actually build and hack my TTL CPU design, I will perhaps implement Chaosnet for it.
[09:44:34] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:45:31] <gilberth> Meanwhile I wonder whether I should introduce a color space protocol class to CLIM.
[09:52:15] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[09:52:57] <hayley> Bakerposting: foo!
[09:52:58] <Bakerposting> } /* vector of int's. */ .; {int sum=0; for (i=0; i<10; i++) sum+=a[i]; printf("sum=%d\n",sum);} . (Iterators: Signs of Weakness in Object-Oriented Languages <https://plover.com/~mjd/misc/hbaker-archive/Iterator.html>)
[09:52:59] -ixelp- ACM OOPS Messenger 4, 3 (July 1993), 18-25.
[09:53:08] <hayley> Ah yes
[09:53:26] * hayley recovering from an intentional accidental power cut.
[09:54:14] <hayley> Bakerposting: English, please.
[09:54:15] <Bakerposting> In either case, the percentage of objects which can be successfully reclaimed by lazy allocation will be greatly increased. (CONS Should not CONS its Arguments, or, a Lazy Alloc is a Smart Alloc <https://plover.com/~mjd/misc/hbaker-archive/LazyAlloc.html>)
[09:54:15] -ixelp- ACM Sigplan Notices 27, 3 (Mar 1992), 24-34.
[09:57:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:59:31] * hayley uploaded an image: (23KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/NfbMEtkAQXScoPyzsCHZEoML/Screenshot_2022-03-10_17-39-57.png >
[09:59:43] <hayley> This code is hot garbage, and it has a type error if "all variables are of type int", yet there is also an array somehow.
[10:03:38] <gilberth> Pre K&R C is fine with that.
[10:04:08] <hayley> Good for them. I guess.
[10:04:53] <hayley> Another of the programs generated (which looked like FIND/POSITION/etc) would run out of bounds if there were no matches. But there's no "this code is broken" option.
[10:05:05] <gilberth> Yeah, you find things like main(argc,argv) int argv[]; { ... printf ("blah: %s", argv[1]); ... }
[10:06:42] <hayley> I assume there are working types.
[10:07:13] <hayley> And, well, I can't say much for big-O complexity if the loop goes out of bounds. Is it O(h dear) or something?
[10:07:57] <sm2n> O(Segmentation Fault)
[10:08:05] <gilberth> Well, in C when I say int A[100]; Is 'A' really a variable? I mean you can't pass or assign arrays in C.
[10:08:30] * hayley sighs
[10:09:19] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:09:34] <gilberth> And besides, it could have been int A[MAX_INT]; // Look ma, no overflow possible.
[10:10:46] * hayley fails to have any fun.
[10:11:21] <hayley> And btw I would have a backup tracing GC when deferred RC fails. I'd also use single bytes for counts, so I'd have to handle overflows somehow. Compacting would also be nice too.
[10:11:57] <gilberth> And it said that A contains n values, so no overflow either.
[10:12:34] <hayley> A different program.
[10:13:01] <hayley> That program had something like for (i = 0; A[i] != x; i++) something; which could go out of bounds, would A not contain an x.
[10:13:27] <hayley> Speaking of going out of bounds, no response on getting one-more-re-nightmare on Quicklisp.
[10:14:07] <hayley> https://github.com/quicklisp/quicklisp-projects/issues/2142 Seems like there's a backlog of a few weeks.
[10:14:07] -ixelp- Please add one-more-re-nightmare Â· Issue #2142 Â· quicklisp/quicklisp-projects Â· GitHub
[10:14:28] <mfiano> He does it all at once when making a new release.
[10:14:48] <mfiano> Don't be surprised if it takes up to 2 months (the longest period between releases I've seen)
[10:14:52] <hayley> mfiano: I see, thanks.
[10:15:57] <mfiano> Night
[10:16:50] <hayley> Night.
[10:17:21] * hayley still hasn't recovered sleep from the Coffee Compiler Club a month ago.
[10:19:11] <dave0> gilberth: i hate c as much as the next person, but everyone still writes operating systems in it... there must be /something/ about it for people to still do that
[10:19:32] <hayley> Not really.
[10:19:34] <dave0> is it that c is great for that, or just everything else is worse?
[10:19:48] <hayley> The assumption is "people use it so it must be good."
[10:20:12] <hayley> I am sure you have your own biases that violate this assumption.
[10:20:14] <dave0> hayley: yeah but they really do
[10:20:20] <gilberth> Well, it begins with that C compilers are readily available.
[10:20:26] <kakuhen> it's the most familiar tool amongst programmers if i had to guess
[10:20:51] <kakuhen> also if you want any form of posix compatibility, well posix standard basically locks you in to the language
[10:20:56] <gilberth> And it's a proven language. C has been around for decades and it will be around in decades to come.
[10:21:00] <kakuhen> unless you want to emulate headers and a ton of other nasty things
[10:21:16] * hayley uploaded an image: (178KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/YovKxfcKnSTXyTKiRRZXQPgg/risc.jpg >
[10:21:49] <dave0> c is outright hostile
[10:22:14] <gilberth> Ah, hayley still dreams of a free lunch.
[10:22:26] <hayley> ðŸ¥ª
[10:22:35] <gilberth> dave0: Sure. But what are the alternatives?
[10:22:55] <hayley> PL/I?
[10:22:55] <dave0> hayley: and a ðŸš¬ smoke
[10:22:59] <hayley> scnr
[10:23:06] <dave0> gilberth: yeah that's the thing
[10:23:15] <dave0> rust i guess
[10:23:38] <dave0> gilberth: /is/ there no alternatives?
[10:23:51] <gilberth> Rust is a language du jour.
[10:24:06] <gilberth> It doesn't even have a spec.
[10:24:08] <dave0> hehe :-)
[10:25:23] <gilberth> I mean, do you expect that Rust code I write today will run in say 20 years?
[10:26:50] <gilberth> My Lisp code will definitely do that. My C code with a great chance of success.
[10:27:08] <hayley> Why not CL for the operating system (or lack of operating system)?
[10:28:24] <hayley> Pedantically, you cannot use memory mapped IO from C.
[10:28:52] <gilberth> CL would in principle be fine. The only problem is finding hordes of hacker doing tedious unproductive hacking like device drivers. At a pace that their work will not be outdated the time they are done.
[10:29:35] <gilberth> You can do memory-mapped I/O from C just fine.
[10:30:26] <hayley> On paper, you cannot fudge a pointer to your device. In practise, you can, still. And I guess the existence of your device does not exist in the C spec, so everything about it is perhaps UB.
[10:31:16] <dave0> gilberth: lisp goes one better ... code you write today will run 20 years ago!
[10:31:26] <gilberth> If you insist on a specified way to address a specific hardware address, you would need assembly.
[10:32:01] <hayley> Tanembaum's book on operating systems claims you cannot implement an operating system in a language with GC.
[10:32:03] <gilberth> dave0: Yes. It's frighting actually, that I still use code, I wrote some 30 years ago.
[10:32:27] <hayley> So I suppose the Lisp machine(s), Smalltalk, Cedar, Oberon, etc, were a conspiracy by...I don't know who would make such a conspiracy, but trust me.
[10:32:44] <dave0> oh i almost forgot
[10:32:49] * dave0 freshens everyone's coffee
[10:32:51] <gilberth> The Lisp Machine is overrated as an OS.
[10:33:09] <dave0> and i got brownies from the store! brownies all around!
[10:33:23] <hayley> Alan Kay once remarked that the OSes in Lisp were quite good, but never remarked if it was Maclisp or Interlisp.
[10:33:24] <gilberth> It doesn't even do preemptive multi-threading.
[10:33:35] <hayley> s/if it was/he was referring to/
[10:34:41] <dave0> oberon the language seems nice.. it was actually used to make oberon the operating system so you know it works, proof of concept and all
[10:40:55] <dave0> cricket chirp
[10:46:08] <dave0> cricket chirp
[10:46:34] <hayley> ðŸ¦—
[10:48:52] <dave0> cool emoji
[10:59:19] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[10:59:22] *** Quits: Brucio-61 (~Brucio-42@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[11:07:55] <moon-child> hmm.  Suppose I have an expression like (x+1)+2, and I want to fold that into x+3.  This is just for an assembler, so I don't want to go full e-graph (or some such); is there a simpler algorithm that will perform such reductions exhaustively?
[11:08:12] <moon-child> I guess the expressions will generally be small enough that I can do the naive version of e-graphs.  Hmm
[11:15:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[11:33:58] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:43:30] <aeth> you mean this expression? (+ x 1 2)
[11:45:07] <moon-child> Sure.  But consider: 1, binary representation may be simpler; 2, it's not so obvious when you have deeper nesting
[11:45:15] <hayley> Baker: "RISCs today are the poopoo, compilers equally so, you've seen this quote already" Someone: "LLVM exists" Me: "It exists in 1.3 million LOC." Someone: "It's still simpler than executing x86" Me: "Didn't know x86 fared any better"
[11:45:20] <hayley> Someone: "oh, you're advocating for Lisp machines, how could I have missed that. Well, good luck"
[11:45:43] <hayley> I am? You learn something every day.
[11:47:02] <hayley> "what architecture are you advocating for then?" "One that isn't x86, ARM, or a Lisp machine, I suppose."
[11:48:56] *** Joins: Brucio-61 (~Brucio-42@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[11:50:49] <dave0> forth's nice
[11:51:13] <dave0> it's pretty much peek and poke and not much more
[11:52:00] <moon-child> for a hardware isa, you really want registers
[11:52:25] <hayley> Right.
[11:53:13] <hayley> I don't have an architecture in mind, I am not a hardware designer and I don't understand enough to decide on anything. But bounds checks are equally sucky on current RISC and CISC machines alike.
[11:53:14] <moon-child> (that said, first-class call stack is neat.  Avoids the problem of mispredicting all your returns after you do a nonlocal control transfer)
[11:54:02] <moon-child> gilberth: _cmucl_ doesn't even do preemptive multithreading, does it?  Just green threads...
[11:54:14] <hayley> https://mstdn.io/@wolf480pl/107931279537442549 mucho texto
[11:54:14] -ixelp- Wolf480pl: "@nodefunallowed@mas.to @eris@disqordia.space therâ€¦" - Mastodon
[11:55:24] <moon-child> 'x86's out-of-order machinery'  implying other isas don't need ooo to go fast? lol
[11:55:46] <hayley> lol
[11:56:15] <hayley> "mucho texto I guess I'll stick to Smalltalk on a RISC then"
[11:57:51] <hayley> inb4 "but you said RISC was bad!!!111!" 
[11:59:56] <moon-child> oh yeah, that reminds me
[12:00:02] <moon-child> of
[12:00:04] <moon-child> 'C has destroyed our ability to advance the state of the art in automatic optimization, automatic parallelization, automatic mapping of a high-level language to the machine'
[12:03:36] *** Joins: shka (~herr@109.231.3.55)
[12:08:30] * hayley uploaded an image: (3KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ENoAtAjtmnwhlbVGZkQLADNB/tip.gif >
[12:08:37] *** Quits: CyberneticRev (~akshay@2600:1700:13d0:66b0:8206:a99c:b3f6:d7c5) (Ping timeout: 240 seconds)
[12:08:48] * hayley found this fella on online university course material from 2005
[12:13:00] *** Quits: Brucio-61 (~Brucio-42@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[12:24:18] <dave0> i got some brownie crumbs on the keyboard
[12:32:09] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[12:35:44] *** Joins: cosimone (~user@93.55.99.69)
[12:36:08] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[12:58:50] <ck_> what does the brouija board spell?
[13:00:42] *** Joins: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:06:38] *** semz_ is now known as semz
[13:16:03] <kakuhen> hayley: i believe that's what the kids call "soul" nowadays
[13:23:16] *** Quits: dre (~dre@2001:8003:c932:c301:b9de:333:ba99:ae98) (Ping timeout: 250 seconds)
[13:25:16] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:25:56] *** Joins: notzmv (~zmv@user/notzmv)
[13:37:25] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 256 seconds)
[13:46:19] *** Joins: kevingal (~quassel@2001:770:c0:401:e51c:693b:e1a1:e91b)
[13:51:28] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[14:03:40] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 272 seconds)
[14:13:05] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[14:20:01] *** Joins: silasfox (~sbv@p200300cec719ba00b0edad272bf82625.dip0.t-ipconnect.de)
[14:33:02] *** Quits: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Read error: Connection reset by peer)
[14:37:39] *** Joins: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:48:01] *** Quits: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[14:49:14] *** Joins: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:52:08] <hayley> https://www.youtube.com/watch?v=F5QfcsHQ-BM
[14:52:09] -ixelp- Dead Loss Angeles - YouTube
[15:00:35] <drbluefall> morning, y'all
[15:00:47] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:09:27] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:11:23] <notzmv> morning drbluefall 
[15:11:44] <drbluefall> ' ')/
[15:20:41] <shka> drbluefall: hi
[15:20:53] <drbluefall> hielo
[15:21:49] <shka> https://www.youtube.com/watch?v=Y0CwBz5nGTQ
[15:21:49] -ixelp- Merging with Grace 2 - YouTube
[15:28:41] * hayley still fails to find group members for university
[15:29:31] <hayley> I even posted my damn resume, and I've had two people I can't work with (one is their fault, one not). And I've been looking all week, and have to find a group by Saturday. Screwed at this rate.
[15:29:46] <hayley> And Bakerposting still does not count as a member.
[15:29:46] <Bakerposting> A generator is a subroutine which is called like a function, but returns a "new" value every time it is called (i.e., it is emphatically not a mathematical function). (Iterators: Signs of Weakness in Object-Oriented Languages <https://plover.com/~mjd/misc/hbaker-archive/Iterator.html>)
[15:29:47] -ixelp- ACM OOPS Messenger 4, 3 (July 1993), 18-25.
[15:30:38] <Lycurgus> a study group? is that required?
[15:31:19] <hayley> Not a study group, I have to do projects in a group.
[15:32:15] <Lycurgus> but it's at a uni?
[15:32:48] <Lycurgus> having a resume would seem to contradict that
[15:33:20] <Lycurgus> but maybe I'm just out of touch and people have resumes starting in high school now
[15:34:03] <hayley> It's at university, yes. A "software engineering fundamentals" course.
[15:34:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[15:34:17] <hayley> And posting my resume was unnecessary and a joke.
[15:34:22] <Duuqnd> Are you sure Bakerposting can't count as a member?
[15:34:23] <Bakerposting> Its speed is similar. (Efficient Implementation of Bit-vector Operations in Common Lisp <https://plover.com/~mjd/misc/hbaker-archive/Bitvectors.html>)
[15:34:24] -ixelp- ACM Lisp Pointers 3, 2-4 (Apr/Jun 1990), 8-22.
[15:34:25] <Lycurgus> ah
[15:35:29] <hayley> Duuqund: Apparently they have to be human and be a student of the university. Bakerposting is over qualified for both.
[15:35:30] <Bakerposting> ) come in several forms, due to the possible overlaps of sources and destination. (Efficient Implementation of Bit-vector Operations in Common Lisp <https://plover.com/~mjd/misc/hbaker-archive/Bitvectors.html>)
[15:35:31] -ixelp- ACM Lisp Pointers 3, 2-4 (Apr/Jun 1990), 8-22.
[15:35:38] <Lycurgus> it's funny to see all these acm sig pubs i didn throw out
[15:36:06] *** Joins: aeth (~aeth@user/aeth)
[15:36:32] <hayley> "Interestingly, Ada83 cannot use C++-style iterator classes, because Ada83 packages have no friends."
[15:43:17] *** Quits: cosimone (~user@93.55.99.69) (Ping timeout: 240 seconds)
[15:49:00] <kakuhen> how do computer people deal with convolutions
[15:49:12] <kakuhen> so i have a seemingly simple task: audio reverb effect
[15:49:23] <kakuhen> my math brains tells me "just make some impulse signal and convolute it with the input"
[15:49:35] <kakuhen> it just works in the math world, but how do we make computers do this
[15:49:42] <kakuhen> do we seriously just discretize it and pretend there's no errors
[15:50:12] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:50:30] <kakuhen> i.e. do we just write out some convolution over Z and then pretend that is "close enough" to what we'd get over R
[15:50:47] <hayley> Quite likely.
[15:52:03] <kakuhen> guess i'll just write out discrete convolution and see what happens when i finally test my code
[15:58:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:19:37] <shka> selwyn: remember when I said that Russia will use energy dependence of the west Europe as political leverage?
[16:19:58] <shka> don't doubt me again 
[16:19:59] <shka> :P
[16:24:27] <Lycurgus> an imperial challenge gets a huge response, going ahead and doing what you say were gonna do wrt carbon not so much
[16:27:14] <Lycurgus> bodice ripping and sabre rattling ftw, Alex
[16:33:27] <Lycurgus> s/bodice ripping/kriah/
[16:44:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[16:46:22] *** Joins: aeth (~aeth@user/aeth)
[17:01:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:31:32] *** Quits: kevingal (~quassel@2001:770:c0:401:e51c:693b:e1a1:e91b) (Ping timeout: 240 seconds)
[17:32:05] *** Joins: kevingal (~quassel@149.157.122.151)
[18:02:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:07:30] <gilberth> Good morning #lispcafe!
[18:12:34] *** Quits: kevingal (~quassel@149.157.122.151) (Ping timeout: 272 seconds)
[18:12:36] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:12:42] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[18:15:40] <Lycurgus> anybody know about the lw patches? (e.g. comm and soforth)
[18:17:26] <Lycurgus> sorry didn think http://www.lispworks.com/downloads/patch-selection.html would exist
[18:17:27] -ixelp- LispWorks Patches
[18:22:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:24:08] *** Joins: aeth (~aeth@user/aeth)
[18:27:42] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:29:01] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:32:29] <clothespin> good morning gilberth
[18:47:19] <selwyn> well, they will now
[18:47:21] <selwyn> open season
[19:04:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:04:55] <shka> selwyn: that's was always in the cards
[19:08:22] <shka> they just waited for when it was needed 
[19:09:56] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 250 seconds)
[19:10:04] *** Joins: kevingal (~quassel@2001:770:c0:401:d507:75bd:7aa9:3843)
[19:10:47] <shka> you simply can't have reasonable relations with country such as Russia
[19:15:22] <selwyn> wondering whether to go to els
[19:16:20] <gilberth> I dream of a better compiler. I wish (color-rgb ((lambda (p) .. (make-rgb-color r g b)) ...)) could be optimized to ((lambda (p) ... (values r g b)) ...) based solely on a simple compiler macro recognizing (COLOR-RGB (MAKE-RGB-COLOR r g b)) being (VALUES r g b).
[19:18:21] <gilberth> When I wanted to craft such a compiler macro to recognize this in the general case, I would need the better half of a full compiler.
[19:19:00] <gilberth> selwyn: Does ELS even happen off-line? And where would it take place?
[19:20:00] <selwyn> it is in porto
[19:21:05] <ck_> and hybrid, there are online tickets afaiu
[19:22:04] <gilberth> shka: Perhaps. I personally was proven wrong as I always thought you could and was all for establishing good relations with Russia. I believed in peace by trade. I was proven wrong. :(
[19:23:46] <shka> different culture 
[19:23:50] <shka>  :DISPLAY-FUNCTION, :NAME, :EVENT-QUEUE, :PORT, :MANAGER,
[19:24:16] <shka> clim complains that those are invalid initialization arguments for application-pane
[19:24:18] <shka> why?
[19:28:25] <gilberth> Well at least :display-function and :name ought to be valid. For the rest I would need to dig the spec. Are you using MAKE-PANE?
[19:31:15] <shka> nah, i am idiot, i am using application-frame when i wanted application-pane
[19:32:32] <shka> gilberth: tell me, can i use clim slider for floats input?
[19:32:54] <gilberth> That ought to work.
[19:32:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:34:29] <gilberth> If not blame me. The spec says that :min-value and :max-value are reals.
[19:37:00] *** Quits: kevingal (~quassel@2001:770:c0:401:d507:75bd:7aa9:3843) (Ping timeout: 240 seconds)
[19:37:48] *** Joins: kevingal (~quassel@149.157.122.151)
[19:42:58] <shka> yeah, but you need to set decimal places
[19:43:05] <shka> because by default 0
[20:01:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:02:33] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:06:05] <shka> gilberth: ok, silly question
[20:06:28] <gilberth> There is no such thing as a silly question. ;)
[20:06:29] <shka> gilberth: how do i convince clim to call my display function when slider value changes?
[20:06:39] <shka> :display-time t does not seem to work
[20:07:11] <gilberth> No, it doesn't as the slider callbacks are not going through the application command loop.
[20:08:05] <shka> oh the humanity
[20:08:09] <shka> what i am to do?
[20:08:57] <gilberth> You could try to use EXECUTE-FRAME-COMMAND. When I left it would inject the command into the command loop proper.
[20:09:19] <shka> this feels wrong
[20:09:54] <gilberth> Does it? The call back is execute in the event process, your application lives in its own thread.
[20:10:11] *** Joins: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[20:10:58] <gilberth> At the end of day both need to be synchronized somehow.
[20:12:20] *** Quits: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Remote host closed the connection)
[20:13:12] *** Joins: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[20:14:00] <shka> yeah, but shouldn't there be a more specific approach?
[20:14:13] <gilberth> There also is PANE-NEEDS-REDISPLAY.
[20:14:54] <gilberth> But that would also entail to go through the command loop. I won't expect that to be picked up.
[20:14:56] <shka> well, maybe i will just add button 
[20:15:51] <gilberth> shka: CLIM is designed that way. Application frame pane redisplay is centered around a read command, execute command, redisplay panes loop. When you want redisplay, you need to go through there.
[20:16:54] <gilberth> And yes, those gadgets don't blend well with that.
[20:18:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[20:18:38] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:20:10] *** Joins: aeth (~aeth@user/aeth)
[20:21:15] <shka> gilberth: well, ok, then what abouv execute-frame-command?
[20:21:31] <gilberth> What about it?
[20:23:15] <shka> is there something like redisplay command or should i declare something on my own?
[20:24:44] <gilberth> Define some command to be sure.
[20:25:38] <gilberth> There is some option, which I forgot about, to tell it to have no name proper. Otherwise at the end of day a command is just a cons of a function and its arguments.
[20:29:31] <gilberth> Yes, just say (define-foo-command (com-blah :name nil) ...)
[20:31:02] <shka> that works
[20:31:16] *** Quits: kevingal (~quassel@149.157.122.151) (Ping timeout: 272 seconds)
[20:31:30] *** Joins: kevingal (~quassel@2001:770:c0:401:9c5b:c1fb:8c42:36ab)
[20:40:03] *** Quits: kevingal (~quassel@2001:770:c0:401:9c5b:c1fb:8c42:36ab) (Quit: No Ping reply in 180 seconds.)
[20:41:10] *** Joins: kevingal (~quassel@2001:770:c0:401:3ced:6d65:4bbe:4362)
[20:44:35] *** Joins: nwoob (~apple@152.57.204.88)
[20:44:40] <nwoob> what are things in advance backend development that one should learn
[20:44:43] <nwoob> I know how to create apis and know database
[20:47:39] <gilberth> What kind of backend?
[20:54:52] <nwoob> currently I work with nodejs
[20:59:39] <gilberth> Oh, there is a 5120x2880 27" display available by Apple again. I wonder if I could hook that up to my poor MacMini that I have.
[21:03:21] <ck_> you can fit so many 80x24 terminal windows on there
[21:05:20] <moon-child> I think it needs usb-c
[21:05:40] <gilberth> Yep, using the 6x13 font that would be 10 by 9 xterms.
[21:06:05] <gilberth> moon-child: For video?
[21:06:05] <moon-child> (or 'thunderbolt 4'?  I think maybe thunderbolt is just usb-c with some minimum data transfer specs or something? idk)
[21:06:21] <moon-child> gilberth: ^, but I think so
[21:06:57] <moon-child> esp. given https://0x0.st/oZNg.png
[21:07:13] <gilberth> I don't know either. I am always confused by all those connections. Like DisplayPort working where is Thunderbolt, or the reverse. That's too complicated for me.
[21:08:43] <gilberth> Oh, my MacMini is too poor anyway. 5120x2880 is more than the maximum resolution. :(
[21:09:02] <moon-child> I mean, I know about a great deal of connections.  But I sort of missed the boat on usb-c
[21:09:19] <moon-child> feel like everybody was complaining about usb-c, and all my appliances used micro- or in some cases mini-usb
[21:09:36] <moon-child> so now idk the state of things
[21:10:40] <gilberth> I have a second MacMini which is way newer but it's SSD died for some reason. :(
[21:11:26] * moon-child snatches gilberth's apostrophe
[21:11:36] <moon-child> swap it out with the other's ssd?  Or is it soldered?
[21:11:57] <gilberth> They say it is soldered.
[21:12:10] <moon-child> :/
[21:12:26] <moon-child> can it boot from usb?
[21:12:31] <moon-child> (might be slow, but)
[21:12:44] <gilberth> Yeah, that's bad. And it is not the first of our machines which died out of the blue.
[21:12:45] <moon-child> (also, weren't you talking about switching to linux?)
[21:13:05] <gilberth> moon-child: "It's complicated."
[21:13:13] *** Quits: kevingal (~quassel@2001:770:c0:401:3ced:6d65:4bbe:4362) (Remote host closed the connection)
[21:14:21] <gilberth> moon-child: I could try with USB, yes. But the disk I have is very slow so it won't be fun. Heh, can't I boot over the network?
[21:15:41] <gilberth> Or I could just get a new machine. But: I want 32-bit support. For Half-Life 2 :)
[21:16:18] <moon-child> I can play half-life 2 just fine on 64-bit linux
[21:16:31] <moon-child> (and possibly (?) also 64-bit freebsd; people have been working on that)
[21:16:33] <moon-child> just sayin
[21:16:52] <gilberth> Yep. As I said: "It's complicated." ;)
[21:17:42] <moon-child> what is the complication?
[21:17:45] <moon-child> oh, also: vms
[21:18:56] <gilberth> moon-child: I am somehow addicted to macos, I just can't depart from this toxic relationship.
[21:19:06] <gilberth> vms?
[21:19:11] <moon-child> virtual machines
[21:19:35] <gilberth> Ah. Yes, perhaps Parallels is fine. I should try that.
[21:20:35] <moon-child> that wasn't what I meant
[21:20:37] <moon-child> >_<
[21:20:58] <gilberth> Then what have you meant?
[21:21:31] <moon-child> qemu
[21:21:33] <moon-child> bhyve
[21:21:44] <nwoob> gilberth: I work with nodejs
[21:21:57] <gilberth> qemu emulating what?
[21:22:20] <moon-child> something 32-bit
[21:22:59] <gilberth> Yes, would it also do hw 3d-acceleration?
[21:23:39] <nwoob> are my messages not visible?
[21:23:58] <gilberth> nwoob: You mentioned that already. Doesn't answer my question though.
[21:24:57] <gilberth> Nah, I'd see if I could boot from USB. If that works, I could perhaps just get a fast USB drive and see.
[21:25:09] <moon-child> qemu can pass through a GPU to the guest
[21:25:18] <moon-child> you would need two gpus; one for the guest, one for the host
[21:25:30] <moon-child> (possibly if you have an integrated chip you can use that for the host)
[21:25:30] <gilberth> Haha, funny.
[21:25:48] <moon-child> there is also 'virgl', which is cleverer, and lets the gpu be shared.  But I think that only works for linux (and maybe windows?) guests
[21:26:18] <gilberth> moon-child: Why would I want to mess with qemu then?
[21:27:24] <moon-child> you'd be able to play half-life
[21:27:30] <moon-child> that way
[21:27:32] <moon-child> even if linux couldn't run 32-bit apps
[21:31:57] <nwoob> gilberth: web backend
[21:32:10] <nwoob> backend for websites and mobile application
[21:33:50] *** Joins: dra (~dra@2a04:4540:6415:3d00:2dc0:3050:e653:2aa4)
[21:33:52] <dra> Hello!
[21:34:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:34:59] <nwoob> I hope that answers you question. becuase if not maybe please explain a bit cause I'm new in software development
[21:39:59] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[21:41:38] *** Joins: aeth (~aeth@user/aeth)
[21:45:30] <gilberth> nwoob: I almost guessed that. I have little experience with that kind of backends but using CL for it of course.
[21:46:19] <gilberth> moon-child: Well, for Linux I would assume that (1) 32-bit is no problem and (2) I could perhaps just use Wine. You really want to drag me away from macos, don't you?
[21:49:25] <nwoob> gilberth: could you please tell me what other kind of BE development are there
[21:51:15] <gilberth> nwoob: Sorry, you are asking the wrong person. As I said: It'd just use CL. I have no experience with whatever else there might be.
[21:51:29] <nwoob> oh ok
[21:53:52] <gilberth> Dammit, why can't COMPILE take an environment argument? Or EVAL?
[22:15:15] *** Quits: silasfox (~sbv@p200300cec719ba00b0edad272bf82625.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[22:16:20] <sthalik> use a code walker library
[22:16:28] <sthalik> (but you already know that)
[22:17:05] <gilberth> Well, that's my point as you can't implement MACROEXPAND-ALL in CL itself.
[22:19:38] *** Quits: nwoob (~apple@152.57.204.88) (Ping timeout: 256 seconds)
[22:27:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[22:28:35] *** Joins: aeth (~aeth@user/aeth)
[22:38:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:44:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[22:58:33] *** Joins: aeth_ (~aeth@user/aeth)
[23:01:14] *** Quits: aeth (~aeth@user/aeth) (Quit: ...)
[23:10:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:15:03] *** Quits: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com) (Remote host closed the connection)
[23:15:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:687a:56f7:b9ed:24cf)
[23:17:41] <shka> https://old.reddit.com/r/todayilearned/comments/tb4o92/til_in_2010_the_russian_navy_ordered_the_repair/
[23:17:42] -ixelp- TIL In 2010, the Russian Navy ordered the repair of a nuclear battlecruiser at a cost of $11 million dollars. Prosecutor [...]
[23:17:50] <shka> cool story
[23:18:31] <selwyn> chelsea football club cant sell tickets or transfer players
[23:18:33] <selwyn> lol lmao
[23:19:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:19:11] *** Joins: dre (~dre@2001:8003:c932:c301:403f:9f61:c28b:c314)
[23:19:15] <selwyn> (because of sanctions)
[23:20:05] <gilberth> shka: Apropos Russia. I watched the video you posted about that Russian CPU. It mentions that it supports pointer tagging and perhaps bounds check in HW. That sounds exciting. Do we know anything about that?
[23:20:34] <gilberth> What puzzles me a bit through is that they seem to believe that VLIW would work this time.
[23:20:38] <shka> gilberth: i don't i suspect that this is documented but only in Russian
[23:20:51] <shka> *i suspect
[23:21:09] <shka> and those cpus are rather difficult to get your hands on 
[23:21:22] <gilberth> Oh dear. My Russian is practically non-existing. I forgot all I once knew. :(
[23:23:01] <gilberth> Didn't the author of that video mention that he could have got some, but the price tag was not funny at all?
[23:23:50] <shka> yeah, it is in low production numbers, just for the internal high security market
[23:23:58] <selwyn> is this the epirus
[23:24:11] <shka> also, fun fact, when this CPU came out, it was actually surprisingly fast
[23:24:28] <shka> but Russians didn't bother to upgrade this design from what I can tell
[23:24:47] <shka> "niet, elbrus is fine" ;-)
[23:25:36] <gilberth> Perhaps when the goal is to just have some own trusted silicon, it doesn't need to compete with Intel or AMD. It just needs to be suffice for whatever they run on it.
[23:25:57] *** Quits: dra (~dra@2a04:4540:6415:3d00:2dc0:3050:e653:2aa4) (Remote host closed the connection)
[23:25:58] <shka> yes, that was their goal i think
[23:26:38] <selwyn> i heard that russia was hiring tsmc engineers a few months ago
[23:26:45] <selwyn> no idea how reliable it is
[23:26:53] <shka> anyway, I don't think that this cpu is the best thing ever 
[23:27:00] <shka> or it is any good even
[23:27:05] <shka> but it is interesting at least
[23:27:07] <gilberth> Anyhow, I thought they would be farther behind. This doesn't sound too bad. However: Can Russia build a fab, if it wished for one?
[23:27:16] <moon-child> a shitty one, sure
[23:27:36] <moon-child> you can build a fab in your garage, for not _too_ much money or effort
[23:27:40] <moon-child> (relatively ofc)
[23:27:51] <GreaseMonkey> hmm, a CPU with native support for slice values would actually be quite interesting
[23:28:00] <gilberth> As I said, I am a bit surprised that they attempt a VLIW approach.
[23:28:50] <moon-child> vliw is cool though
[23:29:25] <gilberth> moon-child: Sure you can, but what would be the process size?
[23:30:08] <gilberth> As in: With a bunch of 6502 couldn't do much.
[23:30:39] <shka> gilberth: because they had domestic research into VLIW CPUs
[23:30:54] <moon-child> gilberth: http://sam.zeloof.xyz/second-ic/  this guy has 10um apparently
[23:30:55] -ixelp- Second IC :) â€“ Sam Zeloof
[23:31:06] <gilberth> VLIW is a cool idea. But it never succeeded. It makes a bet on compilers being able to take advantage of that. Which they don't.
[23:31:42] <selwyn> i wonder what britain will look like after a few weeks or months
[23:32:30] <shka> gilberth: well, consider this from the Russian perspective
[23:32:43] <shka> they may need custom CPU for military applications
[23:32:45] <selwyn> my assumption is that it still won't actually happen, but what happens if oligarch cash is cleared out from the uk
[23:33:00] <selwyn> and the city of london collapses
[23:33:17] <shka> and those tend to require low power consumption and often are signal processing-ish in application
[23:33:45] <shka> it is worth to even write some assembly by hand, so maybe compilers don't even matter
[23:33:53] <gilberth> moon-child: This sure is impressive. But to relate, wiki says the 8080 is 6um. 8088 is 3um and 80386 is 1.5um to 1um.
[23:34:33] <moon-child> sure.  So, that's some guy in his garage; how much better do you think a government can do?
[23:37:12] <selwyn> theres a guy who is trying to trap ions in his garage to make a quantum computer
[23:37:57] <gilberth> Yes, and this is what I wonder. IIRC the mentioned Russian CPU is 28nm or something. So I wonder if Russia has the technology to manufacture such chips.
[23:38:07] <selwyn> https://media.ccc.de/v/36c3-10808-build_you_own_quantum_computer_home_-_99_of_discount_-_hacker_style
[23:38:08] -ixelp- media.ccc.de - Build you own Quantum Computer @ Home - 99% of discount - Hacker Style !
[23:38:11] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-e149-f31f-1120-01f3.res6.spectrum.com)
[23:38:38] <gilberth> shka: Granted. Signal processing is different. But this CPU looks like being designed for desktops or servers.
[23:38:42] <selwyn> he has done an incredible job to be fair
[23:39:14] <selwyn> i would have given up long beforehand if i was on my own
[23:40:34] <gilberth> I would not have. But it is fun to see how much you actually could do in your garage. If you have one, that is.
[23:41:18] <selwyn> for science, the main obstacle would be cost i would say
[23:41:22] <selwyn> lasers expensive
[23:41:44] <shka> gilberth: it is more of a general purpose thing, but perhaps the figured that the only software that they care about both of speed and security would benefit from VLIW design
[23:42:04] <selwyn> after that, the other obstacle is knowledge
[23:42:17] <gilberth> I remember that guy with the science fair who build a tunnel microscope in his basement. This was in like 1990 or so.
[23:42:22] <selwyn> i can't imagine doing an experiment like that on my own, without anyone else to learn from
[23:43:23] <gilberth> Feynman built his own particle accelerator as he was young.
[23:43:31] <selwyn> did he?
[23:43:50] <gilberth> Yes, he did.
[23:44:21] <gilberth> selwyn: Well, these days all information you need is at your finger tips.
[23:44:42] <selwyn> gilberth: not in experiments
[23:44:57] <selwyn> for example, learning how to align lasers
[23:45:07] <gilberth> Then ask around.
[23:45:08] <selwyn> i don't know if you can really get that from youtube videos
[23:46:14] <selwyn> although i love feynman, this sounds like one of his tall tales
[23:46:34] <selwyn> unless it was a bubble chamber
[23:46:45] <gilberth> Maybe it's a tale. But it sounds plausible.
[23:46:54] <shka> gilberth: anyway, thos elbrus cpus were around in one way or another for a long time
[23:46:58] <shka> https://en.wikipedia.org/wiki/Elbrus_(computer)
[23:47:13] <gilberth> No, he talks about getting lot's of copper wire.
[23:47:25] <shka> russian were actually among one of the first in VLIW
[23:48:13] <shka> gilberth: and wiki at least says that those are made by TSMC
[23:49:11] <shka> oh, and you asked about tags
[23:49:29] <shka> those are for type-checking during execution 
[23:49:47] <shka> so you can't easily modify pointer 
[23:50:08] <shka> or something :P
[23:51:04] <shka> anyway, interesting piece of weirdness 
[23:51:54] <gilberth> Yes, I would like to know more about this something.
[23:52:01] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:52:03] <shka> non-clone soviet computers are really curious beasts
[23:52:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:52:31] <gilberth> Wasn't there also some ternary design? Or is that a myth?
[23:52:44] <selwyn> balanced ternary is a great number system
[23:52:49] <shka> gilberth: yes!
[23:52:57] <shka> and i have no idea why xD
[23:53:21] <gilberth> Because only capitalist use binary?
[23:54:20] <gilberth> I mean, look at Hollywood movies. They are rooted in the idea of good versus evil. Binary thinking :-)
[23:55:15] <gilberth> Anyhow, I wouldn't know to where to start even to build a ternary gate. And what gate exactly?
[23:55:41] <shka> yeah, and i wonder how they arrived at the idea
[23:56:26] <gilberth> Maybe the idea was that the machine would get smaller, as n trits would hold more information that n bits?
[23:57:07] <semz> one advantage would be that fixnum ranges are symmetric yet have a unique zero, but whether that was the motivation i don't know
[23:57:18] <moon-child> base 3 is apparently more 'efficient' in some ense
[23:57:22] <moon-child> by virtue of being closer to e
[23:57:54] <gilberth> What has e to do with that?
[23:58:06] <moon-child> I don't know!
[23:58:13] <moon-child> but I read that somewhere
[23:58:18] <gilberth> ok
