[00:02:04] <aquanight> roles
[00:02:19] <aquanight> LeoNerd: did I already ask you what the destruct order is WRT roles?
[00:02:25] <LeoNerd> You didn't
[00:02:33] <LeoNerd> I don't do anything with destruction so that's just whatever perl does
[00:02:50] <aquanight> what about DESTROY methods?
[00:02:59] <aquanight> or is it just treated as a simple virtual method?
[00:03:02] <LeoNerd> Again, I don't do anything with them ye
[00:03:04] <LeoNerd> +t
[00:03:38] <aquanight> so, classes that override DESTROY are responsible for calling base/role DESTROY
[00:03:48] <aquanight> (and of course, role DESTROY is probably not callable)
[00:04:01] <LeoNerd> Indeed, currently
[00:04:14] <LeoNerd> I'll address it at some point if/when I ever actually run into a real usecase
[00:04:56] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[00:05:00] <aquanight> I'm guessing it'll need to be made a phaser
[00:05:10] <LeoNerd> Seems likely
[00:05:52] *** Quits: hudo_ (~hudo@62.68.20.210) (Remote host closed the connection)
[00:05:55] *** Joins: hudo__ (~hudo@62.68.20.210)
[00:06:34] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[00:06:46] <aquanight> that just leaves the question of what the order *should* be (and pray to all the gods we can exercise SOME kind of sanity during global destruction)
[00:06:55] * GumbyPAN CPAN Upload: App-Netdisco-2.049010 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049010
[00:07:03] <aquanight> the obvious answer is "reverse of construct order"
[00:07:24] <aquanight> much like I believe END {} blocks are... last-to-first?
[00:08:01] <LeoNerd> The order should be the exact reverse of ADJUST
[00:08:23] <aquanight> right
[00:08:32] <aquanight> lexically but also WRT derived -> base -> roles
[00:08:41] <LeoNerd> Indeed
[00:08:46] <LeoNerd> That's still lexical, if squint at it
[00:09:02] <LeoNerd> class D isa A does B, C { ... }    <== will ADJUST in A, then B, then C, then D
[00:09:04] <aquanight> even if I think that if you're banking on destruct order *between* classes, you're doing unsafe method calls during object life events
[00:09:06] *** Quits: rundown (~eb0t@90.208.41.2) (Ping timeout: 260 seconds)
[00:09:36] <LeoNerd> If you apply the same role multiple times, er... ... yeah don't ;)
[00:09:49] <aquanight> ... can that actually happen?
[00:10:12] <LeoNerd> class A does R {}  class B isa A does R {}
[00:10:13] <aquanight> like class A does R { } class B isa A does R { } # what happens
[00:10:31] <LeoNerd> Currently, the second one just silently does nothing, because it's already there
[00:10:32] <aquanight> I'd think the second 'does' would do nothing because it's already composed R via A
[00:10:38] <LeoNerd> Roles application is presumed to be idempotent
[00:10:49] <aquanight> I see nothing wrong with such presumption
[00:10:59] <LeoNerd> Parametric roles might break that
[00:11:13] <LeoNerd> but we don't have those. also I dislike the name "parametric role" but I don't have a better one yet.
[00:11:20] <aquanight> role template?
[00:11:28] <LeoNerd> I don't want to call it a "template role" because ohboy I'd never hear the end of it from the C++ fans
[00:11:35] <aquanight> lol
[00:11:39] <aquanight> generic role?
[00:11:48] <aquanight> those are the only other names for the concept I know of
[00:11:48] <LeoNerd> generic is too ... *ahem* generic a word
[00:11:54] <aquanight> indeed
[00:12:01] <LeoNerd> Naming is hard
[00:12:03] *** Quits: magla (~gelignite@55d44679.access.ecotel.net) (Quit: Stay safe!)
[00:12:38] <aquanight> perlbot: hard problems
[00:12:39] <perlbot> aquanight: there's only two hard things in computer science: naming things, cache invalidation, and off by one errors
[00:13:04] <LeoNerd> Another fun one I saw the other day: Given off-by-one errors, that implies the existence of the off-by-two error
[00:13:07] <aquanight> I knew it was in there somewhere. Took me a minute.
[00:13:21] <aquanight> LeoNerd: yup.
[00:14:23] <aquanight> LeoNerd: what's funny is, you could continue that chain with induction
[00:14:36] <aquanight> P(1): off-by-one errors exist
[00:15:05] <aquanight> since off-by-one errors exist, off-by-two. Since off-by-two exist, off-by-three. Etc.
[00:15:11] <LeoNerd> Uhhuh
[00:15:15] <aquanight> I'm not sure how many bits are in off-by-X
[00:15:21] <LeoNerd> Off-by-Aleph-null error :)
[00:15:24] <aquanight> but I think eventually we'll get back around to off-by-zero
[00:16:03] <aquanight> nah, aleph-null isn't in our domain. This is computer integers, not mathematical ones. It's a closed, circular domain.
[00:16:14] <LeoNerd> Ah, the One Ring
[00:16:39] <aquanight> the Zeros-and-Ones Ring
[00:18:14] <aquanight> if we've proven that "off-by-zero errors" exist, does this mean all programmed behavior is an error, and thus correct programs don't exist?
[00:18:33] <LeoNerd> Certainly seems like it some days ;)
[00:22:38] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 260 seconds)
[00:24:39] <jabberwok> further reading: GÃ¶del's incompleteness theorem, and various writings by Georg Cantor (there are a few problems left unsolved, apparently as an exercise for the student)
[00:28:55] <zgu> what if your off-by-one error is off by negative one
[00:30:16] <xenu> it is annoying that (pop) in lisps does the opposite of pop() in perl
[00:30:33] <LeoNerd> Oh?
[00:30:56] <zgu> it shifts?
[00:30:59] <xenu> yes
[00:31:08] <xenu> at least in elisp and common lisp
[00:31:10] <LeoNerd> oooh that's horrible
[00:31:27] <LeoNerd> Well, hrmm.. I suppose as long as it's the opposite of a "push" operation it's fine
[00:31:28] <zgu> well... a pop off the other end would have to take linear time i think
[00:32:03] <ehuelsmann[m]> zgu: you mean from the end of the list?
[00:32:08] <ehuelsmann[m]> yes, that'd mean allocation of a new list.
[00:33:02] <zgu> i was thinking even to modify in place you'd have to walk through every cons cell first
[00:33:28] <LeoNerd> Yeah if you have an SLL, even a mutable one, you still have O(n) time to walk to the other end to find what to mutate
[00:34:06] <ehuelsmann[m]> yes. all lists in Lisp (at least Common Lisp) are SLL.
[00:34:22] <ehuelsmann[m]> (to be more correct: they're CONS cells)
[00:38:24] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[00:38:35] *** Quits: tomred (~dpaikkos@217.138.14.178) (Read error: Connection reset by peer)
[00:38:49] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:39:37] *** Joins: tomred (~dpaikkos@217.138.14.178)
[00:41:40] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[00:41:57] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:43:19] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:46:26] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:47:32] <mst> ehuelsmann[m]: the *semantics* are specified that way, certainly
[00:47:48] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:47:59] <mst> however e.g. http://trout.me.uk/lisp/vlist.pdf can very definitely help with that
[00:49:48] * ehuelsmann[m] reads
[00:51:16] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:52:37] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:52:40] <mst> LeoNerd: one of the reasons I wrote Package::Variant was to have a way to do parameterised like things for Moo that were actually as obviously insane as they deserved - I genuinely dislike the MooseX::Role::Paramterized syntax for making them look nicer/simpler than they actually are
[00:52:56] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[00:53:05] <LeoNerd> Ooooh "variant" is a nice word
[00:53:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:53:48] <LeoNerd> ... damn, that chat earlier about polyhedra makes me want to call "async*" as "stellated async"
[00:53:58] <mst> ehuelsmann[m]: I may have been collecting interesting papers related to lisp and gc (there's also a /gc/ directory on trout.me.uk)
[00:54:15] <LeoNerd> I think we should steal more words from geometry
[00:55:06] <mst> ehuelsmann[m]: but yeah "Interpreted list manipulation programs in Visp can execute a factor of four or more than their equivalent native compiled versions in OCAML." is rather neat
[00:55:07] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:55:42] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[00:55:47] <mst> LeoNerd: funnily enough the VList relies on geometric progression for its block sizes :D
[00:56:13] <LeoNerd> Ah.. yes I was thinking just that for my thought-experiment on truely sparse arrays
[00:56:22] <LeoNerd> (not the fake ones we have where people try to delete $arr[idx]
[00:56:41] *** Quits: whynot (~whynot@37.73.154.187) (Quit: leaving)
[00:56:43] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 250 seconds)
[00:56:43] *** aquanite is now known as aquanight
[00:57:03] <LeoNerd> You'd need a data structure I call a T tree
[00:57:13] <LeoNerd> Which invites a botanical naming pun
[00:58:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[01:00:42] <mst> LeoNerd: resulting in a well oiled machine
[01:08:31] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[01:18:22] *** tg_ is now known as tg
[01:25:49] <ology> mmmm oiled machines
[01:37:47] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[01:54:58] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[01:59:45] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:12:09] * GumbyPAN CPAN Upload: XS-Parse-Keyword-0.20 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.20
[02:18:47] <mst> https://twitter.com/shadowcat_mst/status/1447695611327832071
[02:18:47] <Paperbot> Matt S "-!- pcre_user has joined #perl" Trout (@shadowcat_mst) 22s ago: Suitably scary halloween display name: Selected.
[02:19:21] *** Joins: markgrady (~markgrady@2a02:c7f:f72b:b200:c0b0:9d55:dd3e:ffca)
[02:22:23] <ether> IDGI
[02:25:08] *** Quits: Paladin` (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Ping timeout: 265 seconds)
[02:27:37] <LeoNerd> ehuelsmann[m]: ^-- bugfix for 5.20
[02:29:22] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[02:32:11] * GumbyPAN CPAN Upload: Object-Pad-0.55 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.55
[02:34:10] *** Joins: pizdets_ (~pizdets@183.182.114.60)
[02:34:48] *** Quits: pizdets (~pizdets@183.182.111.226) (Ping timeout: 250 seconds)
[02:34:58] *** Quits: markgrady (~markgrady@2a02:c7f:f72b:b200:c0b0:9d55:dd3e:ffca) (Quit: Leaving...)
[02:35:11] <jabberwok> Lisp, regretting its niche marketplace, cries into its beer: "I cdr been a contenda."
[02:35:15] *** Joins: markgrady (~markgrady@2a02:c7f:f72b:b200:c0b0:9d55:dd3e:ffca)
[02:36:03] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[02:36:08] *** Paladin is now known as Paladin`
[02:37:12] * GumbyPAN CPAN Upload: Return-MultiLevel-0.06 by PLICEASE https://metacpan.org/release/PLICEASE/Return-MultiLevel-0.06
[02:37:12] * GumbyPAN CPAN Upload: Net-FullAuto-1.0000628 by REEDFISH https://metacpan.org/release/REEDFISH/Net-FullAuto-1.0000628
[02:40:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[02:41:09] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Quit: Leaving)
[02:43:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:52:40] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[02:56:05] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[02:57:14] * GumbyPAN CPAN Upload: Astro-Catalog-4.36 by GSB https://metacpan.org/release/GSB/Astro-Catalog-4.36
[03:03:33] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[03:07:08] <TieUpYourCamel> Is this the best "getting started" tutorial for someone brand new to DBIx::Class?  https://metacpan.org/release/JROBINSON/DBIx-Class-Tutorial-0.0001/view/lib/DBIx/Class/Tutorial/Part1.pod
[03:07:08] <Paperbot> Link title(s): [ DBIx::Class::Tutorial::Part1 - metacpan.org ]
[03:07:49] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:10:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:11:34] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[03:12:16] * GumbyPAN CPAN Upload: Test2-Tools-Process-0.06 by PLICEASE https://metacpan.org/release/PLICEASE/Test2-Tools-Process-0.06
[03:22:39] *** Joins: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net)
[03:30:27] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:39:22] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[03:45:22] <mst> ether: people turning up here thinking PCRE will work the same as perl
[03:48:19] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[04:04:27] *** Joins: mattil (~mattil@87-92-67-65.bb.dnainternet.fi)
[04:07:48] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[04:08:51] *** Quits: mattil (~mattil@87-92-67-65.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[04:53:45] *** Quits: Su-Shee (~Susanne@p4ffc7a48.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:55:19] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[04:55:40] *** Joins: Su-Shee (~Susanne@p50894409.dip0.t-ipconnect.de)
[04:57:30] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:03:49] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:04:05] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[05:04:09] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[05:04:10] *** Quits: mjgardner (sid182628@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: Mithaldu_ (sid27181@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: digdilem (~digdilem@rolf.yuss.org) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (Ping timeout: 260 seconds)
[05:04:53] *** Joins: DrHyde (~david@bytemark.barnyard.co.uk)
[05:05:08] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[05:05:20] *** Quits: a6502 (~wieger@stofzuiger.a6502.net) (Ping timeout: 260 seconds)
[05:05:28] *** Joins: a6502 (~wieger@stofzuiger.a6502.net)
[05:05:40] *** Joins: Mithaldu_ (sid27181@id-27181.hampstead.irccloud.com)
[05:06:50] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[05:08:04] <zgu> 3D printing jack o lantern faces presents some unexpected design for manufacturing challenges
[05:10:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:13:51] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:16:59] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[05:19:31] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[05:23:58] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[05:27:34] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[05:27:46] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:50:06] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 245 seconds)
[06:15:56] *** Quits: humky (~humky@user/humky) (Ping timeout: 245 seconds)
[06:16:24] *** Joins: humky (~humky@user/humky)
[06:20:55] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:22:24] <EvanCarroll> My sequence library is awesome.
[06:22:40] <EvanCarroll> I need to make a DSL parser for this that accepts python syntax.
[06:23:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[06:24:08] <EvanCarroll> The only problem is (a) it uses copies, so it's not theoretically maximally fast.
[06:24:16] <EvanCarroll> (b) it doesn't support fixed numbers.
[06:24:28] <EvanCarroll> fixed point would be nice.
[06:24:57] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:31:57] *** Joins: llh (~llh@user/llh)
[06:46:03] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:56:59] *** Joins: Martchus_ (~martchus@2a01:c23:c5d8:8800:d250:99ff:fe49:3cce)
[06:57:49] *** Quits: Martchus (~martchus@dynamic-095-117-055-132.95.117.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:00:35] *** Quits: pucara (~i@181.95.206.221) (Quit: Lost terminal)
[07:04:49] *** Quits: Su-Shee (~Susanne@p50894409.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:05:51] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[07:06:00] *** Joins: Su-Shee (~Susanne@p4ffc7d4e.dip0.t-ipconnect.de)
[07:18:40] *** Quits: Skarn (~skarn@user/skarn) (Quit: bye)
[07:18:46] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (Quit: Ping timeout (120 seconds))
[07:19:00] *** Joins: Skarn (~skarn@user/skarn)
[07:19:11] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[07:38:41] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Bye)
[07:44:04] *** Joins: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net)
[07:47:53] <boblamont> I've been running this (with no line breaks) and I'm getting "illegal octal digit '9' at -e line 1, at end of line" https://l.perl.bot/p/adpn5q
[07:47:54] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[07:53:24] <rindolf> boblamont: hi
[07:53:35] <boblamont> rindolf: hello
[07:54:05] <rindolf> boblamont: shell quoting is erratic
[07:57:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:58:13] <rindolf> boblamont: i suggest putting the perl program in a separate file  or using a https://en.wikipedia.org/wiki/Here_document
[07:58:14] <Paperbot> Link title(s): [ Here document - Wikipedia ]
[08:02:43] <rindolf> boblamont: ping
[08:03:00] <boblamont> rindolf: I'm reading the article about Here documents
[08:03:21] <rindolf> ah
[08:04:47] <boblamont> it appears to be more complicated than doing search and replace...
[08:08:04] <rindolf> boblamont: why?
[08:08:50] <boblamont> rindolf: It's an entirely new concept to me
[08:09:52] <rindolf> boblamont: i see.
[08:10:20] <boblamont> rindolf: would I be using it to put in the list of substitutions?
[08:10:30] <rindolf> well, it is easier to maintain in the long run
[08:11:03] <rindolf> boblamont: or just put them in a separate file (e.g "myprog.pl")
[08:12:21] <boblamont> rindolf: ok, I'm sort of getting it. I'm not on familiar ground. I was using pcre regex expressions in my text editor, and was going to use sed, but sed doesn't like lookaheads and lookbehinds
[08:12:45] <boblamont> So I decided I should perhaps use perl
[08:12:51] <rindolf> boblamont: ah
[08:14:18] <rindolf> boblamont: you can do 'perl -p myscript.pl' instead of 'perl -pe...'
[08:14:35] *** Quits: Su-Shee (~Susanne@p4ffc7d4e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[08:16:10] *** Joins: Su-Shee (~Susanne@p4ffc7c67.dip0.t-ipconnect.de)
[08:18:30] <rindolf> boblamont: which editor and distro do you use?
[08:18:58] <boblamont> rindolf: ok, that seems to be working. I'm back to getting the illegal octal digit error, but now I know which line it's on
[08:19:03] <boblamont> s//(?=[1-2][0-9][0-9])/~/g;
[08:19:50] <rindolf> boblamont: 4 slashes
[08:20:14] <boblamont> I was using Bluefishrindolf: ah
[08:20:18] <rindolf> boblamont: great! progress
[08:20:46] <boblamont> rindolf: I have to check my original list and see if that second slash is part of the search and needs to be escaped
[08:21:02] <rindolf> perlbot: lts
[08:21:03] <perlbot> rindolf: Leaning Toothpick Syndrome.  Change your delimiter if you are having to escape all the / in your RE, or use \Q\E (perldoc -f quotemeta) if you need to handle lots of metachars.
[08:21:20] <mst> boblamont: that looks like a typo to me tbh but yeah, double check
[08:22:01] <mst> boblamont: also, rindolf meant using a here document to contain the perl code doing the search and replace
[08:22:09] <mst> boblamont: basic bash trick
[08:24:21] <boblamont> ok, it was in need of an escape, I did that, it seems to work
[08:25:09] <rindolf> boblamont: great
[08:25:29] <boblamont> I know I could change the delimiter, but I was carrying over the escape characters from Bluefish anyway
[08:26:03] <rindolf> perlbot: sweval: my $str = "one/two"; $str =~ s#/t#flew#; [$str]
[08:26:05] <perlbot> rindolf: ["oneflewwo"]
[08:26:20] <rindolf> boblamont: ah
[08:29:08] <boblamont> rindolf: thank you for your help and patience
[08:29:15] <boblamont> mst: and thanks to you, as well
[08:29:22] <rindolf> boblamont: you're welcome 
[08:29:32] <mst> not sure I helped that much, but glad you have working code either way :D
[08:34:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:44:45] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[08:46:37] *** Quits: p71 (~p71@071-090-085-184.res.spectrum.com) (Ping timeout: 265 seconds)
[08:47:16] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:68ba:3570:12e9:ed45) (Ping timeout: 252 seconds)
[08:49:25] *** Quits: hudo__ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[08:49:25] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[08:50:31] *** Quits: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net) (Ping timeout: 245 seconds)
[08:51:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:04:00] *** Quits: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br) (Quit: WeeChat 3.2)
[09:08:46] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 268 seconds)
[09:09:53] <boblamont> anyone still around?
[09:16:39] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[09:16:43] <rindolf> boblamont: aye
[09:17:46] *** Joins: p71 (~p71@071-090-085-184.res.spectrum.com)
[09:18:56] <boblamont> When I ran a different file through it, not all of the substitutions happened, but it didn't throw any errors up. The same substitution did work on the first file, and in Bluefish, the search does show a match. How would I figure out where it goes wrong?
[09:23:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:24:21] <rindolf> boblamont: see https://github.com/shlomif/how-to-share-code-online - give us a test case
[09:24:22] <Paperbot> Link title(s): [ GitHub - shlomif/how-to-share-code-online: How to share source code on online forums in order to ... ]
[09:25:38] <rindolf> boblamont: are these multiline-spanning substitutions?
[09:26:12] <boblamont> Yes
[09:27:35] <rindolf> boblamont: then when you use -p , they will work only with the -0777 flag
[09:28:40] <boblamont> Some of the substitutions work, some don't, but some of them did work on the other file I tested
[09:28:51] <boblamont> Here's the one I've noticed that didn't work https://l.perl.bot/p/bgigcj
[09:28:52] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[09:29:49] <boblamont> That one is noticeable because it's hard to miss the little arrow, those lines were correctly deleted from the first file, but not the second one
[09:30:05] <rindolf> boblamont: -p loops on lines
[09:30:37] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:30:49] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[09:31:58] * GumbyPAN CPAN Upload: CallBackery-0.39.2 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.39.2
[09:32:47] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:33:57] <boblamont> rindolf: do I want it to do that in this case?
[09:34:25] <boblamont> rindolf: Also, I was wrong, it did not remove the lines with the arrow from the first file, they were farther down.
[09:36:49] <rindolf> boblamont: with "perl -0777 -p", the default variable, $_, contains the entire file
[09:38:26] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[09:39:50] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[09:39:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:39:55] <boblamont> rindolf: ok, I added that and it did get rid of the arrow lines. Thanks again.
[09:41:17] *** Quits: jaytee8057 (~jaytee80@fw.bmd.cpii.com) (Ping timeout: 256 seconds)
[09:41:48] <rindolf> boblamont: you're welcome . note that some s/// [at least without /g] won't work
[09:42:55] <boblamont> rindolf: I put /g at the end of all of them just in case... is there a way to know what may not work other than trial and error?
[09:44:12] <pj> with -0777 -p sees the entire file as a single string, so when you s/// on it without -g only the first match in the file will be substituted.
[09:44:21] <pj> errr without /g
[09:44:42] <rindolf> boblamont: what pj said 
[09:49:21] <boblamont> ok, thanks both of you
[09:49:25] *** Joins: markgrad_ (~markgrady@204.246.246.254)
[09:52:54] *** Quits: markgrady (~markgrady@2a02:c7f:f72b:b200:c0b0:9d55:dd3e:ffca) (Ping timeout: 260 seconds)
[09:56:47] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:01:16] <rindolf> boblamont: you're welcome 
[10:04:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[10:04:38] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[10:04:38] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[10:04:39] *** Quits: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net) (*.net *.split)
[10:04:39] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (*.net *.split)
[10:04:39] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (*.net *.split)
[10:04:39] *** Quits: karjala (sid176588@lymington.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: vague (~vague@irssi/staff/vague) (*.net *.split)
[10:04:39] *** Quits: tomaw (tom@libera/staff/tomaw) (*.net *.split)
[10:04:39] *** Quits: odc (sid197788@helmsley.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (*.net *.split)
[10:04:39] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[10:04:39] *** Quits: B33F_1338 (~b33f1337@host.b33f1337.com) (*.net *.split)
[10:04:39] *** Quits: boubou_ (~boubou@hide.my.ip.upsidehosting.com) (*.net *.split)
[10:04:39] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (*.net *.split)
[10:04:39] *** Quits: phenom_ (~primus@user/phenom) (*.net *.split)
[10:04:39] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[10:04:39] *** Quits: leont (sid489095@uxbridge.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: scp1 (~scp1@user/japh) (*.net *.split)
[10:04:39] *** Quits: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com) (*.net *.split)
[10:04:39] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (*.net *.split)
[10:04:39] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[10:04:39] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[10:04:39] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[10:04:39] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (*.net *.split)
[10:04:39] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[10:04:39] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[10:04:39] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[10:04:39] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[10:04:39] *** Quits: dilfridge (~quassel@gentoo/developer/dilfridge) (*.net *.split)
[10:04:39] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (*.net *.split)
[10:04:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[10:11:02] *** Joins: pizdets (~pizdets@183.182.115.176)
[10:11:04] *** Quits: pizdets_ (~pizdets@183.182.114.60) (Ping timeout: 265 seconds)
[10:12:02] * GumbyPAN CPAN Upload: CallBackery-0.39.3 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.39.3
[10:20:57] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:21:33] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[10:24:52] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ð)
[10:26:27] *** Joins: akaWolf (~akaWolf@akawolf.org)
[10:26:27] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[10:26:27] *** Joins: Skarn (~skarn@user/skarn)
[10:26:27] *** Joins: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net)
[10:26:27] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[10:26:27] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[10:26:27] *** Joins: karjala (sid176588@lymington.irccloud.com)
[10:26:27] *** Joins: vague (~vague@irssi/staff/vague)
[10:26:27] *** Joins: tomaw (tom@libera/staff/tomaw)
[10:26:27] *** Joins: odc (sid197788@helmsley.irccloud.com)
[10:26:27] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[10:26:27] *** Joins: ztx (~ztx@user/ztx)
[10:26:27] *** Joins: B33F_1338 (~b33f1337@host.b33f1337.com)
[10:26:27] *** Joins: boubou_ (~boubou@hide.my.ip.upsidehosting.com)
[10:26:27] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:26:27] *** Joins: phenom_ (~primus@user/phenom)
[10:26:27] *** Joins: rfi (~rfi@216.70.102.172)
[10:26:27] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[10:26:27] *** Joins: scp1 (~scp1@user/japh)
[10:26:27] *** Joins: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com)
[10:26:27] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[10:26:27] *** Joins: Kassandry (~Kassandry@kassandry.net)
[10:26:27] *** Joins: alh (~alh@hiddenrealms.org)
[10:26:27] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[10:26:27] *** Joins: dotandimet (~dotandime@evomr2.evogene.com)
[10:26:27] *** Joins: jercos (jercos@xyl.be)
[10:26:27] *** Joins: salparadise (~salparadi@129.146.17.140)
[10:26:27] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[10:26:27] *** Joins: Kobaz (~libera@its.kobaz.net)
[10:26:27] *** Joins: dilfridge (~quassel@gentoo/developer/dilfridge)
[10:26:27] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[10:26:27] *** Joins: Artea (~Lufia@artea.com.pt)
[10:26:28] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Excess Flood)
[10:26:40] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[10:26:40] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[10:26:40] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[10:30:37] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[10:33:20] *** Quits: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[10:36:24] *** Joins: discip (~discip@194.242.223.24)
[10:36:59] *** Joins: randir (~randir@93.159.239.42)
[10:37:38] <discip> hello there! I was formerly known as Discipulus (but seems someone took it..)
[10:37:57] <lopid> so you claim
[10:40:16] *** Joins: akaWolf (~akaWolf@akawolf.org)
[10:40:19] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:40:52] *** Joins: mattil (~mattil@airio.portalify.com)
[10:54:46] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Remote host closed the connection)
[10:55:03] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[10:57:46] *** Joins: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net)
[11:08:44] <discip> eh eh.. yes :)
[11:10:11] <discip> but.. who can be proud to have string evaluated the whole cpan? :)
[11:14:07] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[11:17:09] * GumbyPAN CPAN Upload: App-Netdisco-2.049011 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049011
[11:23:38] *** Joins: furrymcgee (~devuan@cgn-89-1-209-32.nc.de)
[11:30:41] <boblamont> Is there a way to make ^ get recognized as the start of a line?
[11:32:07] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[11:32:36] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 245 seconds)
[11:34:04] *** Joins: choroba (~E.Choroba@88.146.255.106)
[11:34:34] <Botje> in a regular expression? that _is_ how you do it.
[11:36:15] <Botje> boblamont: presumably you're asking because somehow it "did not work", so tell us about that.
[11:37:32] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[11:38:33] *** Quits: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net) (Ping timeout: 265 seconds)
[11:40:29] *** Joins: semeion (~semeion@user/semeion)
[11:50:56] *** Quits: nutron|wirk (~nutron@66.51.134.122) (Ping timeout: 245 seconds)
[11:52:21] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[11:53:12] <mst> Botje: he was using -0777 so he'd've needed the 'm' flag
[11:53:59] *** Joins: nutron|wirk (~nutron@66.51.134.122)
[11:55:33] <Botje> oh, missed that. fetching more coffee.
[11:57:19] *** Joins: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net)
[11:57:20] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:03:42] *** Joins: azed (~azed@154.107.100.129)
[12:07:15] * GumbyPAN CPAN Upload: Netstack-0.016 by CARELINE https://metacpan.org/release/CARELINE/Netstack-0.016
[12:08:25] *** Joins: ufobat (~martin@dynamic-077-007-070-012.77.7.pool.telefonica.de)
[12:14:02] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[12:15:27] *** Quits: k-man (~jason@user/k-man) (Ping timeout: 240 seconds)
[12:15:34] *** Joins: diskin (~diskin@5.139.88.40)
[12:29:10] *** Joins: k-man (~jason@user/k-man)
[12:30:05] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[12:30:05] *** diskin is now known as Guest7015
[12:30:05] *** Quits: Guest7015 (~diskin@5.139.88.40) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[12:30:05] *** diskin_ is now known as diskin
[12:31:26] <Su-Shee> good morning
[12:31:40] * Botje waves
[12:31:51] * Altreus hullo
[12:32:10] <Botje> finally escaped from two budgeting meetings
[12:32:46] <Altreus> time is not subject to budgetary constraints
[12:36:18] * GumbyPAN CPAN Upload: XS-Parse-Keyword-0.21 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.21
[12:36:42] <Botje> quite so.
[12:45:50] *** Joins: nx_ (~nitronix@5.29.23.150)
[12:53:07] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Ping timeout: 252 seconds)
[12:55:52] *** Quits: azed (~azed@154.107.100.129) (Quit: WeeChat 3.3)
[12:56:29] *** Quits: vykook (~vykook@mail.zabij.se) (Ping timeout: 250 seconds)
[12:59:33] <Su-Shee> I already spent my budget for next year basically ;) 
[13:00:07] <Botje> Su-Shee: that leaves plenty of time for cost optimization meetings!
[13:00:26] <Botje> Ideally followed up week-per-week at a glacial pace.
[13:03:00] <Su-Shee> luckily I don't have cost optimization meetings I just have buy clouds and machines and that sort of thing ;)
[13:03:47] <Su-Shee> but I am today the first time since march 2020 in the office and it's so difficult
[13:04:12] <Botje>  
[13:04:15] <Botje> oops
[13:04:24] <Botje> are the office docs also coming back to the office?
[13:05:18] <Su-Shee> hmpf the coffee is weird it's not my coffee ;)
[13:05:48] <Botje> ah yes.
[13:05:56] <Botje> the tragedy of office coffee :P
[13:06:21] * GumbyPAN CPAN Upload: Web-Solid-Auth-0.7 by HOCHSTEN https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.7
[13:08:30] *** Quits: waltman (waltman@2601:4a:701:4451:f2ec:9c30:d6e5:9521) (Ping timeout: 250 seconds)
[13:08:49] *** Joins: jabberwok (~wlindley@75.105.20.104)
[13:08:50] *** Joins: nxs__ (~nitronix@88.198.206.243)
[13:09:30] *** Joins: waltman (waltman@2601:4a:701:4451:adb0:32c3:1d86:7604)
[13:11:31] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 268 seconds)
[13:16:17] *** Quits: nxs__ (~nitronix@88.198.206.243) (Ping timeout: 264 seconds)
[13:24:10] <Altreus> I miss the office coffee GoDaddy provided
[13:24:15] <Altreus> It was unbeatably free
[13:24:16] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[13:24:30] <Altreus> They had them magic bean-to-cup machines
[13:29:44] *** Joins: donsequitur_ (~donsequit@c-68-83-221-41.hsd1.md.comcast.net)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:33:13] *** Quits: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[13:33:14] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:36:49] <mst> Altreus: we have a fast brew drip coffee machine
[13:37:51] <Altreus> I know what you mean but also I have to assume that when you say drip coffee you mean IV
[13:39:13] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:39:47] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[13:42:07] *** Joins: nxs__ (~nitronix@5.29.23.150)
[13:42:15] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[13:45:08] *** Joins: nx_ (~nitronix@88.198.206.243)
[13:45:31] <mst> Altreus: I wish :D
[13:45:57] * discip is moka powered
[13:46:10] <Altreus> moka? I barely know her
[13:46:33] <discip> https://en.wikipedia.org/wiki/Moka_pot
[13:46:34] <Paperbot> Link title(s): [ Moka pot - Wikipedia ]
[13:47:11] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 250 seconds)
[13:47:37] *** Quits: nxs__ (~nitronix@5.29.23.150) (Ping timeout: 250 seconds)
[13:48:32] <ilmari> Altreus: my office has bean-to-cup machines that are good enough that I don't bother going to the the in-house barista one floor down unless I'm passing anyway
[13:49:30] *** Quits: markgrad_ (~markgrady@204.246.246.254) (Read error: Connection reset by peer)
[13:49:50] *** Joins: markgrady (~markgrady@2a02:c7f:f72b:b200:d959:b5c9:a23a:7c93)
[13:49:52] <ilmari> at home I just have an aeropress and a pre-ground coffee subscription
[13:50:15] * ilmari goes to make a cup now
[13:50:27] <Altreus> I only miss the coffee because I don't go to the office any more :D
[13:55:07] *** Quits: furrymcgee (~devuan@cgn-89-1-209-32.nc.de) (Quit: leaving)
[13:59:13] *** Joins: nxs__ (~nitronix@88.198.206.243)
[14:00:12] *** Quits: nx_ (~nitronix@88.198.206.243) (Read error: Connection reset by peer)
[14:03:33] *** Quits: Su-Shee (~Susanne@p4ffc7c67.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[14:04:55] *** Joins: Su-Shee (~Susanne@p4ffc781f.dip0.t-ipconnect.de)
[14:05:00] * discip does not misses anything of office :)
[14:07:07] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[14:08:41] <discip> ah.. I claim to be Discipulus if anyone wonder :)
[14:09:12] <mst> aha
[14:10:06] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[14:10:18] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:14:25] <discip> mst: I shown you how to gesticulate to order a bigger pasta dish :)
[14:16:44] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[14:17:12] *** Joins: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net)
[14:17:18] * discip dish.. I missed the opportunity to register as Dishypulus :)
[14:17:45] <mst> hah
[14:18:12] <mst> you can always use ns 'group' to add that nick to your registration
[14:18:20] <mst> and 'set accountname' to switch between them later
[14:18:34] <mst> run /whois on me - 'mst' isn't my primary registered nick because it was funnier this way
[14:19:51] <boblamont> So the good news is, I've successfully verified each of my substitutions are working. The bad news is, they aren't working from the pl file, I have to run each one as a separate command.
[14:25:30] <boblamont> everything in the pl file should be between a pair of single quotes, with each line ending in a semicolon, correct?
[14:26:09] *** Joins: nicolas (~nicolas@178.124.223.35.bc.googleusercontent.com)
[14:26:24] *** Joins: furrymcgee (~devuan@cgn-89-1-209-32.nc.de)
[14:26:43] <boblamont> https://l.perl.bot/p/zbzh51
[14:26:44] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:26:44] <discip> boblamont: are you speaking of a regular perl program? if so no
[14:28:04] <boblamont> discip: no, a list of substitutions called by perl -0777 -p -i subs.pl file
[14:28:13] *** nicolas is now known as nicomen
[14:29:52] <discip> -p read it line by line.. no?
[14:30:43] <discip> ah no.. sorry.. paragraph mode
[14:32:31] <boblamont> each one of the substitutions work singly like this: perl -0777 -p -i -e 's/\s:\s/:/g' file.txt
[14:35:47] <Botje> boblamont: are those '' part of the file as well?
[14:36:06] <Botje> boblamont: Because that means your .pl file is one gigantic string
[14:38:22] <boblamont> Botje: yes, a single ' at the start and end of the file
[14:39:01] <Botje> now read the second bit I said.
[14:45:23] <boblamont> yes, I saw that... shouldn't it be? if it was inline, it would be 's/etc/etc/;s/etc/etc/' and so on, right? so wouldn't the file be a single string since it essentially replicates that?
[14:47:01] <Botje> no.
[14:47:09] <Botje> the '' are just to make your shell not complain.
[14:47:18] <Botje> in a perl file '...' is a string.
[14:47:26] <mst> yeah, those single quotes are an error.
[14:48:11] *** Joins: NeoCron (~NeoCron@p200300c4cf195d00df9b3d9f9a455325.dip0.t-ipconnect.de)
[14:49:01] <Botje> boblamont: even if you do perl -e '...', the perl process never sees the quotes. It just sees a string in its third argument.
[14:49:34] <mst> boblamont: thing about it as
[14:49:40] <mst> boblamont: perl -e '...'
[14:49:54] <mst> boblamont: is a way to do the equivalent of a file containing a single line of that ...
[14:50:05] <mst> boblamont: the '' in the perl -e are for bash not perl
[14:50:43] <mst> perl just sees the code as an entry in argv
[14:50:48] <mst> (argv as in the unix concept)
[14:51:07] <boblamont> ok, thanks, removing them works. Is it ok for me to include comments in the pl file?
[14:51:14] <mst> course it is
[14:51:30] <mst> # <comment goes here>
[14:51:32] * GumbyPAN CPAN Upload: CallBackery-0.39.4 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.39.4
[14:51:35] <mst> works just as well in perl as in shell
[14:52:27] <boblamont> ok, good
[14:52:51] <mst> boblamont: I see you found 'm' to make ^ match interior lines
[14:53:51] <mst> boblamont: was going to mention that after you asked about start of line but your IRC client fell of the internet before I replied ;)
[14:55:03] <boblamont> mst: yeah, network maintanance apparently
[14:55:17] <mst> boblamont: computers hate the living :D
[14:56:15] <boblamont> mst: if I slept when my cable company expects me to, I probably wouldn't notice
[14:56:36] <mst> boblamont: except during spring when the baby squirrels teethe on the cable lines
[14:59:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:00:03] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:04:37] *** Joins: nx_ (~nitronix@5.29.23.150)
[15:07:16] *** Quits: nxs__ (~nitronix@88.198.206.243) (Ping timeout: 252 seconds)
[15:09:54] <LeoNerd> Bah. Indecision time. Today's first task will be  max_by { n_people_helped_tomorrow_by $_ } @possible_tasks
[15:10:34] *** Quits: Su-Shee (~Susanne@p4ffc781f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:10:37] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[15:12:01] *** Joins: Su-Shee (~Susanne@p4ffc78b1.dip0.t-ipconnect.de)
[15:12:33] *** Quits: boblamont (~boblamont@ip24-250-63-11.ri.ri.cox.net) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[15:13:16] <mst> LeoNerd: pare it down to three, then throw an RNG at it
[15:13:29] <mst> LeoNerd: when the RNG produces a result you'll immediately know if it's the right answer or not
[15:13:38] <shaldannon> or play cow pie bingo with it
[15:19:55] *** Quits: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[15:25:31] *** Quits: Su-Shee (~Susanne@p4ffc78b1.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:26:18] *** Joins: Su-Shee (~Susanne@p4ffc78c8.dip0.t-ipconnect.de)
[15:29:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:37:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:40:09] <karjala> I forgot: What's the new test-runner for Test2 that I should/can replace prove with?
[15:40:15] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:41:37] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:42:52] <Grinnz> yath
[15:43:29] <karjala> Thanks
[15:47:09] *** Joins: nxs__ (~nitronix@88.198.206.243)
[15:49:40] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 252 seconds)
[15:55:26] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:57:19] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[15:59:01] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[16:01:40] * GumbyPAN CPAN Upload: App-Netdisco-2.050000 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.050000
[16:04:16] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[16:09:29] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:09:44] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[16:18:51] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[16:21:31] *** Quits: Su-Shee (~Susanne@p4ffc78c8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:21:45] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:23:17] *** Joins: Su-Shee (~Susanne@p4ffc775b.dip0.t-ipconnect.de)
[16:31:13] *** Joins: semeion (~semeion@user/semeion)
[16:34:45] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[16:34:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:37:11] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 245 seconds)
[16:48:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[16:51:29] *** Martchus_ is now known as Martchus
[17:01:46] * GumbyPAN CPAN Upload: Module-Generic-v0.16.1 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.16.1
[17:03:55] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[17:04:14] *** Quits: B33F_1338 (~b33f1337@host.b33f1337.com) (Quit: leaving)
[17:05:44] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[17:08:03] <Altreus> so it's been a while ... how's freenode doing?
[17:09:08] <xenu> you need an account to connect there, so i guess no one knows
[17:10:36] <Altreus> ok so it's dead
[17:10:41] <mst> Altreus: it switched to requiring a clown prince special blockchain account even to connect so everybody stopped caring
[17:10:44] <LeoNerd> If an IRC network falls in the forest and nobody can SASL, does it.. er.. something something?
[17:10:49] <genio> Altreus: it's dead to me. :)
[17:11:40] <LeoNerd> Mm... This file before I started: classical perl OO (much `my $self = shift; ...`), plain Futures, if/elsif chaining... Now rewritten to Object::Pad + Future::AsyncAwait + Syntax::Keyword::Match
[17:11:47] <LeoNerd> I know I keep saying this, but.. honestly this does feel like a whole new language now
[17:12:02] *** Quits: GEttR (~GEttR@user/gettr) (Remote host closed the connection)
[17:12:20] *** Joins: GEttR (~GEttR@user/gettr)
[17:12:23] <LeoNerd> Being able to   async method do_thing($how) { match( $how : == ) { ... } }   that's like... all three + signatures in one go
[17:12:46] <mst> niiiice
[17:13:27] <Altreus> nearly as good as javascript
[17:13:48] <LeoNerd> I don't think javascript has a match/case-alike does it? It's just if/elsif/... chaining
[17:14:00] <Altreus> no idea, I just wanted to cause trouble
[17:15:08] <xenu> there's switch() and it has exactly the same syntax as C
[17:15:19] <LeoNerd> Ah.. complete with fallthrough dangers?
[17:15:20] <xenu> https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Statements/switch
[17:15:20] <Paperbot> Link title(s): [ switch - JavaScript | MDN ]
[17:15:29] <xenu> yep
[17:15:35] <LeoNerd> Icky
[17:15:54] *** Joins: prime (~prime@user/prime)
[17:16:12] <xenu> er, i accidentally linked half-translated polish docs
[17:16:13] <xenu> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch
[17:16:14] <Paperbot> Link title(s): [ switch - JavaScript | MDN ]
[17:18:38] <Altreus> but C's switch knows how to behave because variables have known types
[17:19:10] * mst hits Altreus with a void*
[17:20:01] * Altreus dumps core
[17:20:02] <LeoNerd> Altreus: that's only /one/ of its many problems
[17:20:23] <LeoNerd> Also, it "knows how to behave" because it's only permitted on integers
[17:20:27] <mst> "requiring explicit break" is just cruel
[17:20:29] <LeoNerd> Not strings, or pointers, or floats, or...
[17:20:35] <LeoNerd> fallthrough is terrible
[17:20:41] <LeoNerd> Lack of "goto case" is also annoying
[17:20:54] <LeoNerd> C#'s one is actually not too bad
[17:21:09] <xenu> i have nothing against fallthrought but it shouldn't be the default
[17:21:15] <xenu> fallthrough*
[17:21:22] <mst> LeoNerd: our epitaph was once paid to port gcc to NCR UNIX
[17:21:36] <mst> their favourite bug as they were doing so
[17:21:49] <mst> was that it turned out NCR's C compiler converted switch statements to gotos
[17:21:57] <mst> and used 'dflt' as the label for defaults
[17:22:06] <mst> so if you ever used that as a goto label yourself
[17:22:09] <mst> everything broke
[17:22:12] <xenu> lol
[17:22:23] <LeoNerd> Ohjoy
[17:22:59] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[17:23:47] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:24:16] <Altreus> xenu: I think fallthrough implies default
[17:24:29] <Altreus> xenu: you can of course have a keyword that means "and continue matching"
[17:24:41] <Altreus> or "Do next case irrespective of matching"
[17:24:49] <mst> which is the superior approach
[17:24:54] <Altreus> in fact "continue matching" might be a suitable default
[17:24:57] <LeoNerd> Which is what C# has.  "goto case 3"
[17:24:59] <LeoNerd> etc
[17:25:30] <LeoNerd> "continue matching" wouldn't be helpful. You can't duplicate labels, so if something has matched then by necessity nothing else will
[17:26:17] <Altreus> ah I was thinking more like how when works
[17:26:19] *** Quits: tg (~tg@rockylinux/infra/tg) (Remote host closed the connection)
[17:26:21] <xenu> https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID140
[17:26:22] <Paperbot> Link title(s): [ Control Flow â The Swift Programming Language (Swift 5.5) ]
[17:26:33] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:26:35] <xenu> swift has the "fallthrough" keyword
[17:27:00] <mst> pride goes before the fallthrough
[17:27:05] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:27:29] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:27:38] <xenu> c# unfortunately requires 'break;'
[17:28:03] <Altreus> ah raku uses proceed and succeed because wordplay
[17:29:28] <LeoNerd> I do sometimes wish C had a different controlflow keyword for "stop running this loop" vs "stop running this switch block"
[17:29:41] <LeoNerd> It gets awkward trying to stop the loop from inside a switch inside it.. or vice versa
[17:30:32] <ilmari> or block/loop labels
[17:30:47] <LeoNerd> Ohgodyes.. that could easily be added without breaking syntax. They just _still_ haven't yet
[17:31:08] <ilmari> re switch on pointers: intptr_t!
[17:31:19] <ilmari> (or uintptr_t)
[17:31:28] <LeoNerd> Right, but what would you put in the case labels?
[17:31:37] <LeoNerd> &thing  is not a compiletime constant
[17:32:08] <xenu> well, as long as aslr is disabled, addresses are predictable!
[17:32:40] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[17:33:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 264 seconds)
[17:34:03] *** Joins: hethw (~heth@46.238.32.56)
[17:34:14] * Botje mumbles something about relocations
[17:34:22] <Altreus> asmr?
[17:34:35] <LeoNerd> It may well be load-time constant, or even link-time.. but it won't be compiletime
[17:34:48] <xenu> in windows it used to be common to explicitly decide at compile time whast base addresses should be used to prevent relocations
[17:34:50] <hethw> hi. I want to see all the function chain that led to the function I'm in, how can I do that?
[17:35:04] <LeoNerd> hethw: perldoc -f caller
[17:35:07] <mst> hethw: p3rl.org/Carp
[17:35:08] <xenu> s/addresses/address/
[17:35:09] <LeoNerd> but wonder why
[17:35:25] <Altreus> yeah Carp::cluck for "What the fuck is this code doing?"
[17:35:27] <hethw> LeoNerd, that returns only one level up
[17:35:30] <Altreus> caller() for ... reasons
[17:35:39] <mst> hethw: use Carp qw(cluck);
[17:35:47] <mst> hethw: cluck "I AM HERE";
[17:35:48] <LeoNerd> hethw: then you didn't read the docs
[17:35:56] <mst> hethw: that'll live you a full backtrace of the whole thing
[17:36:03] <mst> hethw: no, that's a lie, please listen to me.
[17:36:24] <xenu> caller can return more levels, but yeah, you probably want cluck()
[17:36:27] <mst> hethw: 'croak', as documented, only returns one level up, 'cluck' is a warn equivalent that provides the whole backtrace
[17:36:37] <xenu> or perhaps longmess()
[17:36:51] <xenu> which just prints a backtrace without throwing an exception
[17:36:53] <mst> hethw: caller() returns one level up unless you call it more than once - but cluck does that for you.
[17:37:06] <mst> xenu: cluck is warn+longmess which seems suitable here
[17:37:14] <hethw> I see.
[17:37:32] <hethw> how do I call it more then once? since it's hard to include new modules like Carp
[17:37:35] <xenu> mst: ah, i confused it with confess()
[17:37:39] <xenu> jesus those names are terrible
[17:37:42] <mst> hethw: Carp is part of perl
[17:37:49] <mst> hethw: stop inventing problems that don't exist
[17:38:15] <hethw> ah lovely.
[17:38:19] <hethw> this is a first for me
[17:38:20] <Altreus> xenu: agreed
[17:38:28] <Altreus> xenu: form over function
[17:38:34] <mst> hethw: seriously, try my advice rather than being a dickhead, you'll get working code faster that way.
[17:39:02] <Altreus> IME if you do both that also works
[17:40:49] <xenu> btw if anyone is bored, Carp's documentation needs some love
[17:40:59] <xenu> it literally doesn't document what its functions do
[17:41:12] <xenu> it assumess that you already know what carp/croak/cluck/confess do
[17:41:16] <xenu> assumes*
[17:41:36] <Altreus> oh I thought I was just being stupid
[17:41:45] <Altreus> perlbot: perldoc Carp
[17:41:46] <perlbot> Altreus: Your documentation is available at: https://perldoc.perl.org/Carp
[17:42:11] <Altreus> xenu: the synopsis "tells" you ... whatever "from the perspective of caller" means
[17:42:24] <mst> > The Carp routines are useful in your own modules because they act like die() or warn(), but with a message which is more likely to be useful to a user of your module. In the case of cluck() and confess(), that context is a summary of every call in the call-stack; longmess() returns the contents of the error message.
[17:42:33] <mst> > For a shorter message you can use carp() or croak() which report the error as being from where your module was called. shortmess() returns the contents of this error message. There is no guarantee that that is where the error was, but it is a good educated guess.
[17:42:48] <xenu> ah yes, only synposis actually tells you what they do
[17:42:51] <xenu> that's still sterrible
[17:42:53] <Altreus> oh that caller
[17:42:54] <mst> right at the top of DESCRIPTION
[17:42:55] <revhippie> carp/croak also append the file/line#, wether you end your message with a "\n" or not.
[17:42:59] <mst> tells you exactly what they do
[17:43:08] <xenu> mst: what you quoted doesn't say anything about throwing exceptions or warnings
[17:43:13] <xenu> and which one does what
[17:43:25] <mst> xenu: " they act like die() or warn()"
[17:43:28] <mst> it could be better written
[17:43:29] <xenu> "they"
[17:43:31] <xenu> what is they
[17:43:34] <xenu> there are 4 functions
[17:43:39] <mst> oh fuck off xenu
[17:43:43] <mst> read the rest of the sentence
[17:43:53] <revhippie> heh pronouns
[17:44:17] <LeoNerd> \PicardLightsMeme{THERE ARE FOUR FUNCTIONS!}
[17:44:36] <Altreus> have to be honest, telling me what *I* did wrong is far better than telling me what the module I used wrong did wrong
[17:44:47] <Altreus> why don't we use carp all the time?
[17:44:52] <mst> hethw: anyway, yeah, the Carp functions plus Data::Dumper are your best friend when debugging
[17:44:54] <xenu> mst: no, seriously, the part you quoted doesn't say which one acts like die() and which one like warn()
[17:44:56] <hethw> mst, nice. this works great. is there any way to also trace beyond evals?
[17:44:59] <mst> Altreus: because people suck
[17:45:11] <mst> hethw: it traces all the way to the top of your script, what are you talking about
[17:45:23] <Altreus> I'm in this picture and I don't like it
[17:45:27] <xenu> anyway i expect that the documentation should just describe each function individually, like perlfunc
[17:45:36] <hethw> mst, well, there are places where the function was called in an eval {} block
[17:45:39] <mst> hethw: please actually *try* the advice
[17:45:40] <hethw> it stops there
[17:45:43] <mst> hethw: no it doesn't
[17:45:46] <LeoNerd> xenu: The docs describe the four functions in terms of their properties. A&B act like die, C&D like warn. A&C print the full message, B&D print shorter ones
[17:45:47] <hethw> I just did
[17:45:52] <LeoNerd> Now just map the letters A to D to the four function names
[17:45:54] <hethw> hm.
[17:46:06] <mst> hethw: seriously, it doesn't.
[17:46:25] <hethw> I believe you. I'll try to understand what is happening then
[17:46:37] <xenu> LeoNerd: that would've been true if the first sentence started with "croak & carp" not "The Carp routines"
[17:46:44] <hethw> thanks for the help!
[17:47:56] <mst> hethw: https://l.perl.bot/p/uj4eze
[17:47:56] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[17:47:59] <revhippie> carp puts me in the mind of aquatic things, so it leads me to associate croak with frogs and not dying.
[17:48:04] <mst> hethw: showing what it looks like
[17:48:53] <mst> hethw: if you're not seeing output like that, ask more questions and hopefully we can figure out why :D
[17:49:03] <mst> LeoNerd: you mean like XXX, YYY and ZZZ ? :D
[17:49:04] <hethw> mst, I guess the eval is the top of the stack
[17:49:26] <hethw> I'll test more and come back if I got more 
[17:49:27] <hethw> ty
[17:49:39] <Altreus> revhippie: to croak is, in fact, to die
[17:49:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 265 seconds)
[17:49:45] <Altreus> in English
[17:50:05] <mst> and to carp is to whine about something
[17:50:28] <Altreus> yeah
[17:50:29] <mst> confess means to explain all your sins
[17:50:35] <mst> cluck is the slightly odd one
[17:50:37] <Altreus> and cluck is irrelevant but started with C
[17:50:39] <LeoNerd> I wrote (but never released) a module for capturing the "caller stack" in variable, and later being able to throw a message from that position, regardless of the stack at time of throwing
[17:50:40] <revhippie> Altreus: Understood; I was just saying that its association with carp (complain, but a homonym of a fish) makes me connect to the noise a frog makes rather than its homonym to die.
[17:50:42] <mst> the other three make perfect sense
[17:50:49] <LeoNerd> My functions were called whine() and wobble(), with whence() to do the capture
[17:51:11] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[17:51:14] <LeoNerd> It's great for  async sub f { my $here = whence(); await thingy; whine $here => "That thing didn't work" }
[17:51:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:51:27] <mst> LeoNerd: yeeeeees WANT
[17:51:36] <Altreus> heh we used to use the term "wbl" to mean whine about something not worth the whining
[17:52:20] <Altreus> cos when someone started to do it we'd do that thing you do at babies where you flick your bottom lip
[17:55:54] <Altreus> LeoNerd: essentially carp with a savepoint
[17:56:00] <Altreus> svp_die
[17:56:06] <LeoNerd> Yuh
[17:56:24] <Altreus> actually this sounds extra helpful because you could end up somewhere entirely irrelevant
[17:56:33] <Altreus> which happens frequently
[17:57:08] <Altreus> for example, getting an undefined warning when something is trying to construct a method name :D
[17:58:06] <Su-Shee> whence is one of those english things which screws my head like "unless". 
[17:58:27] <Altreus> we do like them
[17:58:39] <shaldannon> whither is another fun word
[17:58:58] <Altreus> hence answers whence and hither answers whither
[17:59:05] <mst> I also used Wherefore for a cpan module
[17:59:13] <mst> p3rl.org/Devel::Wherefore
[17:59:16] <Altreus> oh I suppose thence and thither actually answer those
[17:59:19] <shaldannon> wherefore art thou a CPAN module?
[17:59:25] <Altreus> because therefore answers wherefore and there answers where
[17:59:39] <mst> shaldannon: precisely the joke I was going for
[17:59:45] <shaldannon> :-}
[18:00:01] <mst> shaldannon: it shows where you got your imports from
[18:00:13] <mst> shaldannon: "wherefore art thou frob() in my namespace?"
[18:00:13] <Altreus> did you intentionally use wherefore wrong just to troll everyone?
[18:00:34] <Altreus> oh well
[18:00:39] <Altreus> in that context it makes sense
[18:00:46] <mst> Altreus: but also, yes.
[18:00:57] <Altreus> good - I was worried you'd changed
[18:01:52] * GumbyPAN CPAN Upload: App-Netdisco-2.050001 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.050001
[18:02:13] *** Quits: roflbot (~hoydand@195.181.139.135) (Ping timeout: 252 seconds)
[18:02:43] *** Joins: roflbot (~hoydand@195.181.139.135)
[18:02:55] <mst> shakespare pun *and* linguistic trolling? IRRESISTABLE
[18:03:29] <revhippie> "where art thou CPAN module" --> "perldoc -l"
[18:03:49] *** Joins: defjam (~eb0t@90.213.43.87)
[18:04:15] <Altreus> "Why is this on CPAN" --> PERLANCAR
[18:04:31] <mst> http://trout.me.uk/noxface.jpg
[18:04:32] <Altreus> oh I should have picked on MLEHMANN
[18:04:44] <Altreus> that person is melting
[18:05:07] <mst> no, he's just french
[18:06:38] <Altreus> alors
[18:08:55] *** Quits: hethw (~heth@46.238.32.56) (Quit: Leaving)
[18:11:53] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StrongParameters-0.001 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StrongParameters-0.001
[18:13:10] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[18:13:44] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:23:51] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:25:38] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[18:28:01] *** Joins: mattil (~mattil@87-92-67-65.bb.dnainternet.fi)
[18:30:54] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 260 seconds)
[18:32:25] *** Quits: mattil (~mattil@87-92-67-65.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[18:32:47] <TieUpYourCamel> I asked this yesterday, not sure I stuck around long enough to see any answers....
[18:32:50] <TieUpYourCamel> Is this the best "getting started" tutorial for someone brand new to DBIx::Class?  https://metacpan.org/release/JROBINSON/DBIx-Class-Tutorial-0.0001/view/lib/DBIx/Class/Tutorial/Part1.pod
[18:32:51] <Paperbot> Link title(s): [ DBIx::Class::Tutorial::Part1 - metacpan.org ]
[18:34:29] *** Quits: rypervenche (~rypervenc@user/rypervenche) (Quit: æ°æ°ï½)
[18:36:17] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:36:22] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[18:38:11] *** Joins: thrig (~thrig@65.113.153.50)
[18:38:53] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:40:21] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[18:44:31] *** Quits: nxs__ (~nitronix@88.198.206.243) (Ping timeout: 252 seconds)
[18:45:17] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[18:45:46] <mst> TieUpYourCamel: I dunno, depends what you're aiming for
[18:46:23] <mst> TieUpYourCamel: did you try https://metacpan.org/pod/DBIx::Class::Manual like the DBIx::Class documentation tells you to?
[18:46:24] <Paperbot> Link title(s): [ DBIx::Class::Manual - Index of the Manual - metacpan.org ]
[18:51:48] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[18:52:45] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[18:53:29] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[18:55:07] *** Joins: R2robot (~R2robot@user/r2robot)
[18:59:46] *** Quits: markgrady (~markgrady@2a02:c7f:f72b:b200:d959:b5c9:a23a:7c93) (Remote host closed the connection)
[19:00:18] *** Joins: markgrady (~markgrady@204.246.246.254)
[19:03:01] * gordonfish- wonders how different Friday The 13th after the original Part I would have been had Halloween (which came out a couple years before the first film) didn't exist.
[19:03:09] *** gordonfish- is now known as gordonfish
[19:05:57] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[19:07:35] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[19:13:35] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:68ba:3570:12e9:ed45)
[19:16:25] *** Quits: defjam (~eb0t@90.213.43.87) (Ping timeout: 252 seconds)
[19:18:06] *** Joins: defjam (~eb0t@90.213.43.87)
[19:18:56] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 246 seconds)
[19:19:02] <TieUpYourCamel> mst I did not, thanks I'll take a look.
[19:27:14] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[19:27:14] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[19:29:20] <mjgardner> I wrote a blog about Perl documentation: https://phoenixtrap.com/2021/10/12/read-the-fantastic-manual-how-to-get-the-most-out-of-perl-documentation/
[19:29:22] <Paperbot> Link title(s): [ Read The Fantastic Manual: How to get the most out of Perl documentation - The Phoenix Trap ]
[19:32:54] <ether> "why did the mathematicians' marriage fail?" "they thought all arbitrary unions were open"
[19:33:11] <revhippie> ether: boooooooo
[19:34:52] <The_Blode> Good evening Perlites.
[19:35:08] <The_Blode> Quick one. If I want to use a constant in Perl, is there any way I can address it with $?
[19:35:27] <The_Blode> Say I am using a variable that is called in the script as $var
[19:35:31] <thrig> meanwhile there's `go doc` which contains random margin notes and little useful information
[19:37:06] <xenu> The_Blode: not with 'use constant', you need something like Const::Fast or ReadonlyX
[19:37:20] <choroba> Depends on what you mean by "constant"
[19:37:22] <The_Blode> Thank you.
[19:37:37] <mjgardner> The_Blode: There are a number of modules that do that. I favor Const::Fast. Neil Bowers wrote an excellent review of the options here: http://neilb.org/reviews/constants.html
[19:37:38] <Paperbot> Link title(s): [ CPAN modules for defining constants ]
[19:37:39] <The_Blode> How can I address a constant? Like this print CONSTANT;
[19:37:42] <ether> why is addressing it with '$' important?
[19:38:10] <The_Blode> I'm doing a code review and the developer is using a variable in a constant like fashion. Changing the original declaration will have consequence to the uses.
[19:38:23] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 268 seconds)
[19:38:24] <The_Blode> So all uses must be converted to constant value right?
[19:38:40] <choroba> there are two aspects of a constant: 1. it's not changing 2. it can be inlined. There are various solutions that provide different amounts of 1 and 2.
[19:38:54] <mjgardner> The_Blode: If you're declaring them with `use constant` then the constant is just an inline function and you can do things like `print CONSTANT`. Constants aren't a native feature of the language.
[19:39:18] <The_Blode> I understand. Thank you guys.
[19:39:24] <The_Blode> I mean, one example I have is
[19:39:27] <choroba> mjgardner: it's not a function anymore, but can be imagined as being one.
[19:39:34] <The_Blode> my $underscore = "_";
[19:39:38] <mjgardner> choroba: I'm simplifying.
[19:39:39] <The_Blode> Which I thought should be a constant.
[19:39:54] <The_Blode> Am I correct in the assumption or nitpicking?
[19:39:58] <choroba> it's quote common to use $UNDERSCORE for global variables that noone should change.
[19:40:29] <The_Blode> Also, I have encouraged this new developer to use strict mode.
[19:40:35] <The_Blode> Again, am I being too harsh here?
[19:40:40] <mjgardner> No you're not.
[19:40:46] <The_Blode> Strict would reveal tonnes of errors in on compilation.
[19:40:47] <choroba> I'd require all caps at least
[19:41:10] <The_Blode> Also, they're initialising a tonne of variables without using them.
[19:41:11] <thrig> a better question is why they aren't using strict already
[19:41:20] <The_Blode> They're new to Perl.
[19:41:43] <thrig> where are they learning from that didn't recommend strict?
[19:41:43] <The_Blode> This code review may go down as quite harsh as it needs work.
[19:42:03] <The_Blode> Well, they were hired in without Perl knowledge and this is their first Perl script.
[19:42:09] <The_Blode> So they're getting their feet wet so to speak
[19:42:22] <mjgardner> The_Blode: There's a book called "Perl Best Practices" by Damian Conway that's worth looking at. Nothing in it is set in stone, but there are lots of good ideas in there. And there is a module called Perl::Critic (and its command `perlcritic`) that can check your code for compliance with code review policies.
[19:42:26] <choroba> So teach them to reduce each variable's scope to the absolute minimum
[19:42:55] <The_Blode> Well, I have noticed variables being declared and sometimes initialised but never used in the script.
[19:42:58] <Grinnz> mjgardner: The_Blode: note that neilb post is excellent but a bit outdated, ReadonlyX was released since then and provides similar capability to Const::Fast as well
[19:43:05] <The_Blode> Will Perl cry about this?
[19:43:20] <The_Blode> Will Perl allocate memory space for all that unused stuff?
[19:43:34] <The_Blode> Thank you guys for the input appreciate the tips here
[19:43:36] <Grinnz> it will allocate space for them yes
[19:43:42] <mjgardner> The_Blode: If you also say `use warnings;` then Perl will issue a warning about unused variables.
[19:43:43] <Grinnz> but it's negligible
[19:43:49] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[19:43:51] <Grinnz> mjgardner: only for globals and inconsistently
[19:44:03] <The_Blode> mjgardner: thanks! I sometimes don't use that but I use strict.
[19:44:11] <Grinnz> because in globals it's the only way to detect typos; solution: don't use globals
[19:44:15] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[19:44:15] <mjgardner> The_Blode: And there is a specific Perl::Critic policy to catch unused variables: https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUnusedVariables
[19:44:16] <Paperbot> Link title(s): [ Perl::Critic::Policy::Variables::ProhibitUnusedVariables - Don't ask for storage you don't need. ... ]
[19:45:14] <lopid> unused variables isn't a perl thing. they'd have probably done that regardless of the langauge
[19:45:22] <The_Blode> True
[19:45:29] <The_Blode> Warnings can catch this thanks a lot mj
[19:45:39] <The_Blode> It's only 400 lines long so I could go through line by line
[19:45:46] <The_Blode> But if Perl can help, that will save me time
[19:45:49] <mjgardner> (`perlcritic` settles so many arguments. "It's not my personal thing, it's the machine!")
[19:45:56] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[19:45:57] <Grinnz> The_Blode: there is no good reason to avoid warnings either, but if you want to customize your set of warnings there's options to do that as well
[19:46:01] <ether> introducing a newbie to perlcritic right from the start would be fantastic IMO
[19:46:01] <The_Blode> Also, they're not using my so strict is going to get upset
[19:46:13] <The_Blode> Thanks ether
[19:46:27] <The_Blode> Let me check if it's available on my system. Can't use CPAN here.
[19:46:30] <Grinnz> use https://metacpan.org/pod/Perl::Critic::Community as a starting point though, not the core policies
[19:46:30] <Paperbot> Link title(s): [ Perl::Critic::Community - Community-inspired Perl::Critic policies - metacpan.org ]
[19:46:32] <The_Blode> Only got Red Hat repos
[19:46:38] <Grinnz> oh, augh
[19:46:45] <The_Blode> It's a security thing :\
[19:47:03] * GumbyPAN CPAN Upload: App-perlimports-0.000024 by OALDERS https://metacpan.org/release/OALDERS/App-perlimports-0.000024
[19:47:05] <The_Blode> So for now, it's manual checking
[19:47:25] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 268 seconds)
[19:47:51] <Grinnz> you know what really helps security is making your developers write the wrong code /rant
[19:48:16] <The_Blode> Nice :)
[19:48:38] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:48:41] <thrig> "no module installs (but scripts are A-OK!)" usually falls under security theater not security
[19:48:45] <The_Blode> The problem here is, I don't want to sound bad but, 90% of the code is copied and pasted from other scripts.
[19:48:48] <mjgardner> The_Blode: There is probably an RPM for Perl::Critic. Might even be in the official repo or EPEL.
[19:48:55] <The_Blode> And unfortunately, the unused code was copied without knowledge
[19:49:07] <Grinnz> unfortunately if you use the core perlcritic policies you'll have to disable several terrible ones
[19:49:08] <mjgardner> The_Blode: That sounds secure.
[19:49:24] <The_Blode> I'm in the code review stage so I have caught this.
[19:49:29] <mjgardner> (sarcasm)
[19:49:43] <The_Blode> But what I'm disappointed in a bit, this person is meant to be my senior
[19:50:10] <lopid> senior perl programmer?
[19:50:12] <Grinnz> make sure this policy is always disabled when using core policies https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef
[19:50:12] <Paperbot> Link title(s): [ Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef - Return failure with bare return ... ]
[19:50:16] <The_Blode> I learned a concept when I started 4 ish years ago...called DRY
[19:50:17] <Grinnz> it's actively harmful to follow
[19:50:26] <The_Blode> It's something I try to live by with my code and my life
[19:50:26] <mjgardner> The_Blode: Can't help you with politics. :-(
[19:50:46] <The_Blode> Don't Repeat Yourself. You guys may have heard of it
[19:50:52] <Grinnz> The_Blode: just cause someone's been doing something a while doesn't mean they've gotten better
[19:50:54] <The_Blode> If you do copy, make sure you copy with purpose.
[19:50:58] <thrig> Do Radical Yoga?
[19:51:02] <The_Blode> Grinnz I couldn't agree me
[19:51:03] <The_Blode> more
[19:51:07] <mjgardner> The_Blode: Yah, DRY is common.
[19:51:22] <The_Blode> DRY is the first thing I was taught by another programmer when I started my journey
[19:51:42] <thrig> package main; import ( "less/boilerplate" ... ) 
[19:51:43] <Grinnz> you'll also want to disable RegularExpressions::RequireDotMatchAnything, RegularExpressions::RequireExtendedFormatting, and RegularExpressions::RequireLineBoundaryMatching
[19:51:56] <Grinnz> they're cute style preferences, but they're not good code practices
[19:52:09] <Grinnz> (those three together require /xms on all regexes)
[19:52:33] <lopid> barf
[19:52:36] <The_Blode> I have also observed some modules being included but never used.
[19:52:41] <The_Blode> Could this pose any performance hit?
[19:52:51] <Grinnz> potentially, depends a lot on what modules
[19:53:02] <The_Blode> JSON
[19:53:02] <Grinnz> and if they've already been included in the process
[19:53:04] <The_Blode> lib
[19:53:08] <ether> DRY is applied far too frequently.  "get WET before you DRY" is better -- write everything twice before you DRY
[19:53:22] <The_Blode> ether how does that work exactly?
[19:53:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 265 seconds)
[19:53:29] <Grinnz> JSON is unlikely to be much of a hit, and if it has already been loaded then loading it again is mostly a no-op
[19:53:40] <thrig> presumably you implement something to throw it away and write it better
[19:53:40] <The_Blode> Ok cool thanks
[19:54:35] <ether> this is a good thread: https://twitter.com/trevorbrindlejs/status/1440063476248956930
[19:54:53] <The_Blode> She's grabbing values from the database but never using the returned data.
[19:54:57] <ether> the original post was "Iâve said it before, Iâll say it again. DRY is one of the worst things we encourage in software."
[19:54:58] *** Joins: e1f (~user@141.117.1.177)
[19:54:59] <The_Blode> I know for certain this will stall the runtime.
[19:55:14] <Grinnz> i should probably either write a blog post or include a guide in Perl::Critic::Community as to what core perlcritic policies are harmful
[19:55:18] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Quit: Leaving...)
[19:55:28] <lopid> +1
[19:55:29] <Grinnz> but that would require a lot of effort looking through all of those fuckers
[19:55:50] <mjgardner> ether: "This Tweet is from an account that no longer exists."
[19:56:19] <ether> the original post was "Iâve said it before, Iâll say it again. DRY is one of the worst things we encourage in software."
[19:56:46] <Grinnz> overusing it leads to dependency hell sometimes (see 2000s era CPAN)
[19:57:06] <mjgardner>  The_Blode: It sounds like you need to have a talk about basic programming practices, and it's not language-specific.
[19:57:41] <The_Blode> I'm afraid.
[19:57:45] <thrig> some languages teach sloppy scoping
[19:57:54] <The_Blode> She is my senior. I am the mid level developer. It's out of turn for me to speak up.
[19:58:02] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[19:58:12] <The_Blode> Also, I've been accused of being "machine like" and a "perfectionist"
[19:58:20] *** Joins: hudo__ (~hudo@62.68.20.210)
[19:58:26] <The_Blode> But I'm only trying to make sure we put out good code that the business can trust inn.
[19:58:30] <ether> she's not your senior in programming if she's making newbie mistakes
[19:58:40] <The_Blode> I mean in the hierarchy.
[19:58:56] <ether> you can still be a tutor for things she doesn't know
[19:58:56] <The_Blode> She ignores my feedback. I don't know why because it's valid.
[19:59:06] <Grinnz> like mjgardner said, human politics is tricky. but your attention to detail is definitely a worthy quality
[19:59:21] <mjgardner> The_Blode: It's up to you and your conscience then.
[19:59:36] <The_Blode> That's tricky because I never know what to do in the politics thing.
[19:59:49] <The_Blode> The script has several gaps / holes in it.
[20:00:09] <The_Blode> Mostly wastefulness...but Perl might not care too much right?
[20:00:22] <The_Blode> It may care less than JavaScript
[20:00:59] <The_Blode> This might be considered hostile but...as I'm noting the issues, I'm rewriting it...and I propose to show her I would I write this
[20:01:03] <The_Blode> Would that be a bad thing?
[20:01:23] <mjgardner> The_Blode: Every line of code is a line you have to maintain and an opportunity for a bug.
[20:01:26] <The_Blode> Like this is how it should look kinda thing
[20:02:18] <choroba> suggesting how to fix a problem is good
[20:02:26] <The_Blode> Thank you
[20:02:29] <The_Blode> I feel so bad
[20:03:07] <The_Blode> I had an argument with a senior colleague a few weeks back. He told me that as a rule of thumb, Perl scripts exit with "exit 1"
[20:03:23] <The_Blode> I told him I had consulted the Perl experts and they told me "exit" is completely fine for a successful exit call.
[20:03:31] <The_Blode> And that "exit" = "exit 0" which means success.
[20:03:36] <mjgardner> The_Blode: That's patently false. That indicates an error to the process that ran the script.
[20:03:40] <The_Blode> "exit 1" indicates an error not success
[20:03:42] <Grinnz> The_Blode: if you mean whitespace, no that doesn't affect perl
[20:03:49] <Grinnz> the parser skips it
[20:04:15] <The_Blode> I referred him to the perldoc which states "exit" is the equiv of "exit 0"
[20:04:18] <The_Blode> Meaning success.
[20:04:19] <Grinnz> and yes, exit 1 indicates an error
[20:04:34] <The_Blode> This is someone who's been doing Perl for 20 years feeding me false info.
[20:04:39] <Grinnz> wild the things people come up with
[20:04:52] <The_Blode> So like that person said earlier, just because someone has been doing something a long time, doesn't mean they are the best at it
[20:05:04] <mjgardner> The_Blode: You have to ask yourself if this is a good working environment.
[20:05:05] <The_Blode> It takes a bigger person to say I don't know
[20:05:10] <The_Blode> No it's not for me
[20:05:27] <The_Blode> I come here to you the masters of Perl and I seek knowledge
[20:05:35] <The_Blode> No pretenses here that I know everything about Perl
[20:05:41] <The_Blode> And I appreciate the feedback from you guys
[20:06:02] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:06:03] <The_Blode> That "exit 1" situation clearly shows he's not the expert in Perl
[20:06:06] <ether> maybe they got confused with the '1;' that ends every .pm file
[20:06:14] <mjgardner> Meh, there are no "masters," just people who have learned more.
[20:06:20] <thrig> more not an expert with unix exit status words
[20:06:25] <The_Blode> Well 20 years, you'd think they'd be Perl jedi
[20:06:35] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[20:06:39] <The_Blode> Yeah actually, I learned about those codes in Bash
[20:06:44] <mjgardner> ether: That sounds plausible but unfortunate.
[20:06:45] <The_Blode> So maybe Perl got inspiration from that?
[20:06:52] <ether> I've been writing perl since 1994 and there's tons that I don't know :)
[20:06:55] <Grinnz> perl is heavily shell inspired yes
[20:07:07] <mjgardner> The_Blode: Yes, Perl is inspired by shell, awk, sed, and Unix tools in general.
[20:07:10] <Grinnz> see also $? and $!
[20:07:18] <The_Blode> From Bash?
[20:07:27] <The_Blode> Or Shell rather
[20:07:36] <Grinnz> those variables mean the same thing as in shell yeah
[20:07:38] <The_Blode> I'm not sure which came first Bash or some earlier shell
[20:07:45] <The_Blode> Korn?
[20:07:56] <mjgardner> Perl predates bash by a little bit.
[20:07:58] <The_Blode> The only shell I know is Bash
[20:08:02] <Grinnz> well it's just that bash is not the only shell people use now 
[20:08:11] <thrig> perl 1.0 is 1987-Dec-18 while bash is June 1989. so probably not bash.
[20:08:18] <Grinnz> heh
[20:08:32] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Remote host closed the connection)
[20:08:47] <Grinnz> probably bourne shell
[20:08:49] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[20:08:59] <The_Blode> In one function, she's using $_[0] and $_[1]
[20:09:04] <mjgardner> Remember "bash" stands for "Bourne again shell." It is meant to be a replacement for the Bourne shell (sh) which was the default shell for Unix V7.
[20:09:05] <The_Blode> Any advantage for this over shift?
[20:09:20] <Grinnz> technically slightly faster since it doesn't have to remove them from @_
[20:09:24] <Grinnz> but harder to read
[20:09:35] <Grinnz> my ($foo, $bar) = @_; is preferred over either
[20:09:39] <Grinnz> (at least by me)
[20:09:48] <The_Blode> That's pretty nice
[20:09:57] <The_Blode> I use shift myself. It's easier for me to read
[20:10:10] <LeoNerd> I tend to prefer signatures these days when I can (i.e. when on perl 5.26+)
[20:10:25] <LeoNerd> for any newly-written code, and any updates of code I don't care about older versions any more
[20:10:30] <mjgardner> The_Blode: Naming variables is a good thing for readability and maintainability.
[20:10:39] <The_Blode> Thank you
[20:10:40] <Grinnz> just make sure not to forget the "= @_;" part, this leads to confusion
[20:10:47] <thrig> naming variables well, anyways
[20:10:51] <The_Blode> Also, when declaring sub routines, is it best to do sub test() {
[20:10:55] <Grinnz> no
[20:10:57] <The_Blode> or is sub test { acceptable also
[20:11:02] <Grinnz> perlbot: prototypes
[20:11:03] <perlbot> Grinnz: please don't write sub name_of_sub (...) { - it's almost certainly not what you want, just do sub name_of_sub { ... } - see http://ow.ly/RknZs for a detailed explanation of why. To do it properly see "Signatures" in perlsub. If you're on an older perl you can do it with "signatures", "Function::Parameters" from CPAN.
[20:11:21] <Grinnz> unless you're using signatures, () creates an empty prototype which chagnes the behavior of the sub
[20:11:25] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:11:32] <The_Blode> Oh
[20:11:48] <The_Blode> Got it thank you that's handy to know!
[20:13:45] <Grinnz> (and if you are using signatures, it means the sub accepts no arguments, of course)
[20:13:52] <mjgardner> The_Blode: I just wrote a blog on how to use the Perl documentation. You can find all of these details there, and it's helpful to point people to it to resolve disputes so it doesn't become an argument about opinions. But if someone actively ignores the docs, I'm not sure there's much you can do. https://phoenixtrap.com/2021/10/12/read-the-fantastic-manual-how-to-get-the-most-out-of-perl-documentation/
[20:13:54] <Paperbot> Link title(s): [ Read The Fantastic Manual: How to get the most out of Perl documentation - The Phoenix Trap ]
[20:14:12] <Grinnz> mjgardner: nice post btw :)
[20:14:32] <mjgardner> The_Blode: I'm just telling you this so you don't think this is "secret knowledge from the Perl masters on IRC" or something.
[20:14:35] <The_Blode> Thank you mj. I resolved the argument about "exit 1" isn't simply not a rule of thumb. And it's plain as day in perldoc.
[20:14:44] <The_Blode> Thanks to you guys I was able to know this.
[20:14:55] <mjgardner> Grinnz: Thanks
[20:15:16] <The_Blode> Well, it's not secret knowledge but just knowledge.
[20:15:21] <The_Blode> I don't think I'm in the right team honestly
[20:15:31] <The_Blode> I like to be surrounded by people who want to learn
[20:15:54] <The_Blode> Also, is "usleep(1)" problematic?
[20:15:55] <thrig> learnin' gets in the way of makin' money
[20:16:02] <The_Blode> I mean, is it likely to make my server crazy?
[20:16:29] <The_Blode> It's 1 millionth of a second I think?
[20:16:35] <Grinnz> usleep from Time::HiRes? yeah that will do almost nothing
[20:16:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[20:16:39] <thrig> you can remove the sleeps when management complains the code is too slow
[20:16:45] <The_Blode> Got it
[20:16:59] <Grinnz> that will sleep for 1 microsecond (approximately)
[20:17:11] <The_Blode> So this while loop will spin round and round
[20:17:14] <thrig> maybe more! or less!
[20:17:40] * mjgardner is kinda afraid to look at the code The_Blode is talking about.
[20:18:21] <The_Blode> Also, say we're getting a value from a function, if that value is empty. What's best practise to check if it's empty? I usually default to if ($var == undef)
[20:18:29] <The_Blode> Is this sound knowledge or should I use eq ""
[20:18:35] <Grinnz> you use the defined function
[20:18:49] <The_Blode> if (defined($var)) ?
[20:18:54] <Grinnz> undef is not equal or == to anything, by using those operators you coerce it to '' or 0 respectively
[20:18:57] <Grinnz> yes
[20:19:02] <The_Blode> Got it thanks Grinnz
[20:19:04] <Grinnz> or !defined, if you want to check if it's undef
[20:19:34] <Grinnz> btw, if you have "use warnings" on it will warn you when you do something like that (coerce undef to something defined)
[20:20:05] <Grinnz> that warning unfortunately says "uninitialized" for historical reasons, but it really means undefined
[20:20:20] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:21:14] <Grinnz> if you want to check if a variable is either empty string *or* undef, you can use the length function instead
[20:21:18] <Grinnz> if you want accept either
[20:21:29] <Grinnz> length is false for both undef and empty string values
[20:22:06] * GumbyPAN CPAN Upload: Chess-Plisco-0.4 by GUIDO https://metacpan.org/release/GUIDO/Chess-Plisco-0.4
[20:24:26] <The_Blode> Also, if we are in the global scope. Say we have if ($var eq "1") { my $var_two = 2; } if ($var_two == 2) {
[20:24:32] <The_Blode> Is this acceptable?
[20:24:56] <Grinnz> no, $var_two won't be accessible outside that block
[20:24:56] <The_Blode> Or is it better to declare it first outside the conditional statements
[20:24:57] <ilmari> what does the compiler say?
[20:25:04] <mjgardner> That `my` will only exist inside that block.
[20:25:13] <The_Blode> I haven't run this on the compiler, I'm parsing the code manually right now
[20:25:27] <ilmari> the compiler is better at that than you are :)
[20:25:30] <ilmari> perlbot: tias?
[20:25:31] <perlbot> ilmari: Try It And See: the best way to learn whether something works, or what it does. (Alternatively: Touch Ignition And Sprint)
[20:25:34] <The_Blode> Can it be placed in the global scope and it'll be fine right?
[20:25:44] <Grinnz> you can declare it before that if block, yes
[20:25:51] <ilmari> sweval: my $var; if ($var eq "1") { my $var_two = 2; } if ($var_two == 2) { }
[20:25:55] <The_Blode> Great. I heard someone naysaying about globals.
[20:25:59] <The_Blode> Is it frowned upon?
[20:26:05] <Grinnz> globals mean different things
[20:26:07] <perlbot> ilmari: timeout at /home/perlbot/perl5/perlbrew/perls/perlbot-main/lib/site_perl/5.30.0/App/EvalServerAdvanced.pm line 118. 
[20:26:12] <Grinnz> 'my' variables in the global scope are not globals
[20:26:15] <ilmari> if you declare it as `my`, that's not a global
[20:26:18] <Grinnz> they're just file-scoped
[20:26:24] <ilmari> in the top-level file scope
[20:26:35] <The_Blode> Oh
[20:26:39] <ilmari> that's still not global, each file has its own top-level scope
[20:26:46] <Grinnz> real globals are package variables, which is what you get when you don't use "my" and try to use a variable, and why strict prevents that from happening
[20:26:46] <mjgardner> https://perldoc.perl.org/functions/my  or `perldoc -f my` is instructive.
[20:26:47] <Paperbot> Link title(s): [ my - Perldoc Browser ]
[20:27:40] <Grinnz> any part of the code can access and modify a package variable and it's very difficult to know when or why
[20:27:48] <The_Blode> If $var is false, will Perl throw me an error here; my $var = 2; if ($var eq "1") { my $var_two = 2; } if ($var_two == 2) {
[20:28:21] <The_Blode> Can it run the check on the undefined $var_two
[20:28:25] <Grinnz> it will fail to compile that because you still haven't declared $var_two in that scope
[20:28:25] <_73> Is there a term for a lexical variable defined in a packages outermost scope?
[20:28:36] <The_Blode> Thanks
[20:28:37] <ilmari> The_Blode: try it and see!
[20:28:37] <Grinnz> (with strict)
[20:28:39] <mjgardner> The_Blode: It will run just fine if you don't `use strict`. But it won't do what you expect.
[20:28:49] <ilmari> _73: lexical variables have nothing to do with packages
[20:28:53] <The_Blode> I'm promoting strict within my team
[20:28:56] <mjgardner> Which is why you should `use strict`.
[20:28:59] <ilmari> and warnings
[20:29:06] <The_Blode> So some reworking is required here
[20:29:11] <The_Blode> And warnings yes
[20:29:36] <The_Blode> What is the scope when the variables are declared at the top of the file
[20:29:38] <Grinnz> _73: packages can be anywhere and may or may not be associated with one or more scopes
[20:29:39] <The_Blode> File-level global?
[20:29:42] <The_Blode> Script scope global?
[20:29:51] <Grinnz> _73: lexicals only care about the surrounding {} or file
[20:30:03] <Grinnz> The_Blode: file-scoped lexical
[20:30:07] <mjgardner> The_Blode: Should we assume you've got `use strict` for your questions from here on? Because I'm not sure I can make that assumption for your team.
[20:30:11] <The_Blode> Awesome thank you
[20:30:14] <Grinnz> it's not really a global at all, because no other file will be able to see it
[20:30:24] <The_Blode> This script I'm reviewing has no strict enabled
[20:30:32] <ilmari> start with fixing that :)
[20:30:34] <The_Blode> Well, global in the current file's sense
[20:30:38] <Grinnz> but since it's globally visible to that file, sometimes it's referred to as a global 
[20:30:50] <The_Blode> file-scoped lexical though :)
[20:30:51] <ilmari> "top-level" or "file" scope is more precise
[20:30:52] <_73> I think I wanted to ask The_Blode's question, but they stated it more clearly.
[20:31:11] <The_Blode> Top level or File scope will be easier to remember I guess
[20:31:21] <The_Blode> But I could flex my Perl knowledge with file-scoped lexical lol
[20:31:39] <The_Blode> Basically, I can refer to such variables in any part of the script
[20:31:45] <The_Blode> Inside conditionals or loop and inside functions
[20:31:49] <Grinnz> in that file, yes
[20:32:02] <The_Blode> Yes only within the scope of the script it's running in
[20:32:04] <Grinnz> but say if you call a function from a module, that function can't access it by name
[20:32:05] <lopid> but not in a comment
[20:32:07] * GumbyPAN CPAN Upload: PDL-2.057_04 by ETJ https://metacpan.org/release/ETJ/PDL-2.057_04
[20:32:11] <Grinnz> (if it's a package variable, it could)
[20:32:13] <The_Blode> However, I could potentially pass in paramters to other scripts ?
[20:32:16] <Grinnz> yes
[20:32:29] <Grinnz> module functions, more generally
[20:32:31] <The_Blode> Nice I've learned a bucketload and I didn't even come here to do that
[20:32:37] <The_Blode> Thank you all
[20:32:45] <Grinnz> (scripts calling scripts is how perl 4 worked and we don't do that anymore (mostly))
[20:33:00] <thrig> require 'mojo-lib.pl';
[20:33:02] <The_Blode> I promise I won't go on about the reports about Perl being dead
[20:33:14] <The_Blode> It's never dead aslong as we are still around
[20:33:54] <lopid> comment about not being truly dead until the last person who remembers you dies
[20:34:10] <The_Blode> That's deep
[20:34:23] <The_Blode> Technically, Perl will never be forgotten.
[20:34:28] *** Joins: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:34:40] <mjgardner> The_Blode: Hey, I have a blog about that too! (plug plug plug) https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/
[20:34:42] <Paperbot> Link title(s): [ Should Perl die gracefully? - The Phoenix Trap ]
[20:34:47] *** Parts: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) ()
[20:34:53] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[20:34:54] <lopid> steady there, rindolf 
[20:35:00] <The_Blode> Should it die gracefully cradled in your arms? I vote yes
[20:35:10] <The_Blode> I mean NO!
[20:35:18] <The_Blode> Don't let Python win
[20:35:30] <The_Blode> I don't get the Python hype...Perl is just as capable in my eyes
[20:35:30] <mjgardner> It's not a zero-sum game. Nobody has to lose.
[20:35:40] *** Quits: dwxreaper (~quinn@192.155.91.76) (Ping timeout: 265 seconds)
[20:35:53] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[20:35:56] *** Quits: arcanez (~arcanez@warpedreality.org) (Ping timeout: 246 seconds)
[20:35:57] <The_Blode> Why did Python get all the glory and Perl is left out to dry
[20:35:59] <Grinnz> python is doing perfectly well at kneecapping itself
[20:36:08] *** Quits: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com) (Ping timeout: 250 seconds)
[20:36:09] <LeoNerd> network effects
[20:36:23] <Grinnz> there's various theories to that
[20:36:26] <LeoNerd> If "everybody" uses just one language then all the libraries and tutorials and SDKs and everything get built for it
[20:36:35] <LeoNerd> The "just one language" just happens to be Python currently
[20:36:40] <mjgardner> The "X kills Y" narrative is boring.
[20:36:43] <Grinnz> i'd say it's actually JS currently
[20:36:45] *** Quits: bleb (~cm@user/bleb) (Ping timeout: 268 seconds)
[20:36:48] <LeoNerd> 20 years ago it was Java. 30 years ago it was C
[20:36:51] <The_Blode> Python didn't rule the 90s did it? Perl did right?
[20:36:54] *** Joins: bleb (~cm@user/bleb)
[20:36:55] <The_Blode> Perl was on top at one point
[20:37:09] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[20:37:09] *** Joins: dwxreaper (~quinn@192.155.91.76)
[20:37:09] <The_Blode> Python debuted after Perl
[20:37:10] <choroba> not on Tiobe *ducks*
[20:37:20] <Grinnz> python is almost as old as perl, but wasn't as popular early on
[20:37:23] *** Joins: arcanez (~arcanez@warpedreality.org)
[20:37:55] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[20:41:34] <mst> The_Blode: we've been through the popularity game more than once now ... it's not a game we want to win. It's fine. Perl rocks. People make cool shit (and money) writing perl. Fighting language wars isn't helpful.
[20:41:55] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:42:32] <mjgardner> mst++
[20:42:45] <thrig> years ago you served my father in C wars
[20:43:05] <lopid> was that near the tannhauser gate?
[20:43:11] <LeoNerd> More people speak English then French. is French a dead language?
[20:43:27] <genio> dead to me! I suck at it :)
[20:43:31] <mst> all these moments will be lost in time, like tr///s in rain
[20:44:06] <lopid> die time;
[20:44:37] <Grinnz> lopid: tenhauser, clearly https://homeworld.fandom.com/wiki/HW_Campaign:_Tenhauser_Gate
[20:44:38] <Paperbot> Link title(s): [ HW Campaign: Tenhauser Gate | Encyclopedia Hiigara | Fandom ]
[20:45:24] <rindolf> lopid: hi! what are you referring to?
[20:45:38] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:45:48] * lopid is no true fan :~(
[20:46:03] * mst forces rindolf to run along a blade
[20:46:29] <thrig> there wasn't much running in that movie. false advertising.
[20:46:42] <EvanCarroll> The Python vs Perl is a question is too old to be useful anyway.
[20:47:00] <mst> thrig: just put the electric sheep back where you found it unmolested and we'll call it even
[20:47:03] <thrig> Narn vs Caldari otoh
[20:47:07] <lopid> although: https://www.imdb.com/title/tt0083658/quotes/qt0378266
[20:47:07] <Paperbot> Link title(s): [ Blade Runner (1982) - Quotes - IMDb ]
[20:47:09] * GumbyPAN CPAN Upload: Syntax-Keyword-Try-0.26 by PEVANS https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.26
[20:47:19] <EvanCarroll> You can generally put Python, Perl, Ruby, and PHP into the same catagory of old dynamic languages.
[20:47:31] <thrig> and TCL!
[20:47:32] <mst> EvanCarroll: CLISPscript
[20:47:48] <mst> thrig: narn versus centauri?
[20:47:58] <EvanCarroll> A far more interesting question is whether or not Go, which is very easy to learn, will replace *all* of them given enough time.
[20:48:14] <Grinnz> thrig: let's not bring eve online into it
[20:48:42] <EvanCarroll> Or whether Rust, which has is far more complex to learn but technically better in every way, will eventually look more like the future.
[20:48:49] <Grinnz> EvanCarroll: *doubt* to both
[20:49:09] <Grinnz> too many people hate go, and rust doesn't have the whippitupitude
[20:49:29] <LeoNerd> Go is a fine language if you think C's habit of having to check error conditions after every function call is Just Fine
[20:49:41] <LeoNerd> For anyone else who's ever seen proper structured exception handling, they dislike it
[20:49:43] <mst> and ES6's JIT has made it -stupidly- fast for a lot of things
[20:50:08] <Grinnz> my prediction is rust and JS coexistence for most things until some new trend comes along
[20:50:35] <EvanCarroll> LeoNerd: Go isn't my choice, but you have to do that *ANYWAY* in Perl, Python, Ruby, and PHP, so again the question is what is holding Go back from dominating this space -- it's faster, has better tooling, compiles statically (more fit for containers) etc.
[20:50:41] <mjgardner> Again, "X kills Y" is boring.
[20:50:53] <ether> I disagree with many of those points
[20:50:57] <mst> Grinnz: I wish nim and zig got more attention
[20:50:59] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:51:01] <Grinnz> you don't have to do that in perl/python/ruby etc?
[20:51:08] <ether> doing an entire project in go feels like back in the 1990s as far as some tooling is concerned
[20:51:15] <LeoNerd> mst: I used nim and zig as part of my inspiration for `defer`
[20:51:19] <Grinnz> mst: i wish a lot of things got more attention :P
[20:51:23] <mst> LeoNerd: hah
[20:51:31] <The_Blode> I delivered partial feedback to my senior
[20:51:33] <xenu> nim is weird
[20:51:35] <The_Blode> :(
[20:52:02] <LeoNerd> EvanCarroll: You have to do that in older Perl that follows the "lets just return undef for failure and let users check $!",.. i.e. C-style. Anything sufficiently modern throws exceptions
[20:52:02] <mjgardner> The_Blode: I guess it didn't go well. I'm sorry.
[20:52:21] <LeoNerd> perlbot: klingon
[20:52:26] <perlbot> LeoNerd: Succeed or die. Do not return in failure.
[20:52:27] <ilmari> LeoNerd: yeah, but then you have to remember which functions do what
[20:52:36] <LeoNerd> Yeah, it's a bit annoying. Though kinda rare
[20:52:46] <xenu> i hate languages without RAII
[20:52:48] <mst> ilmari: 'use autoderp;'
[21:05:07] <_73> I am having trouble figuring out how to get `Parser::MGC::sequence_of` to return an array with one hash with multiple elements, instead of an array with multiple one element hashed. Here is a detailed explanation - http://dpaste.com/DA77TJZX5
[21:05:08] <Paperbot> Link title(s): [ dpaste: parser example ]
[21:06:00] *** Joins: symdrome (~symdrome@2804:d41:af38:7d00:3d4b:301f:ec7:dbb5)
[21:09:37] <The_Blode> Thanks mj
[21:09:40] <The_Blode> Also is this valid
[21:09:53] <The_Blode> if ($var =~ "Y")
[21:09:57] <The_Blode> My goto is "no"
[21:10:07] <The_Blode> But I could be wrong
[21:10:17] <LeoNerd> _73: Yeah I woudlnt'd o ti that way
[21:10:28] <The_Blode> Shouldn't it be if ($var =~ /Y/) 
[21:10:37] <LeoNerd> my %things; $self->sequence_of( sub { code here to put stuff in %things }); return \%things;
[21:10:41] <The_Blode> or maybe if ($var =~ m/Y/)
[21:10:58] <EvanCarroll> LeoNerd: at some point, I agree with you, and at another point I think that any linter is smart enough to warn you Go for unhandled errors, and that still makes the behavior far more predictable then in interpreted languages of Perl's generation.
[21:11:12] <LeoNerd> The return values aren't _always_ the most useful way to do stuff. sometimes you want to just call the structured methods in void context and side-effect some other code
[21:11:14] <LeoNerd> *variables
[21:11:22] *** Quits: Su-Shee (~Susanne@p4ffc775b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:11:31] <xenu> The_Blode: it's legal and it works as expected but it's unusual
[21:11:38] <LeoNerd> EvanCarroll: it's not about the linter warning. It's about the visual noise and typgin speed of having to think about it the first place
[21:11:59] <xenu> https://perldoc.perl.org/perlop#Binding-Operators
[21:12:00] <Paperbot> Link title(s): [ perlop - Perl operators and precedence - Perldoc Browser ]
[21:12:02] <xenu> If the right argument is an expression rather than a search pattern, substitution, or transliteration, it is interpreted as a search pattern at run time.
[21:12:16] <The_Blode> What would happen xenu?
[21:12:24] <LeoNerd> How to make tea: fill the kettle. oh but if you can't find the kettle, look harder. oh and if there's no water twiddle the tap more. OK so anyay where was I? Righyt, next turn on the kettle. Now if the power is off try checking the fuseboard, ....
[21:12:30] <The_Blode> The variable is a scalar and is checking for a scalar value of "Y"
[21:12:34] <LeoNerd> Nobody wants all that "exception handling crap" in the middle of their instructions
[21:12:38] <The_Blode> Would =~ operate as eq
[21:12:40] <xenu> The_Blode: the same thing as with m/Y/
[21:12:43] <LeoNerd> Instruct the optimistic case and leave the failure handling elsewhere
[21:12:44] <The_Blode> Oh
[21:13:01] *** Joins: Su-Shee (~Susanne@p4ffc7330.dip0.t-ipconnect.de)
[21:13:07] <The_Blode> If we know it's a string, is it best to "eq" or do =~
[21:13:17] <EvanCarroll> LeoNerd: oh, I don't see merit in that then. Having to handle errors isn't "visual noise" imho, and it's something you should have to think about.
[21:13:53] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 264 seconds)
[21:13:59] <xenu> The_Blode: if you check for equality use eq. if you don't then don't
[21:14:15] <The_Blode> The variable only has two values, "" and "Y"
[21:14:23] <xenu> btw i wonder if using a string instead of m// prevents pattern pre-compilation
[21:14:35] <thrig> what if someone wants "J" in addition to "Y"? possibly a German.
[21:14:39] <xenu> The_Blode: well then probably 'eq' is the right solution
[21:14:47] <The_Blode> Thank you xenu
[21:14:50] <The_Blode> thrig --- oh
[21:15:11] <The_Blode> Du ist Deutschlander?
[21:15:19] <thrig> na go'i
[21:15:25] <The_Blode> Oh :)
[21:15:38] <LeoNerd> _73: also, your usecase is basically exactly  https://metacpan.org/release/PEVANS/Parser-MGC-0.19/source/examples/parse-dict.pl#L25  so maybe consider that too
[21:15:39] <Paperbot> Link title(s): [ examples/parse-dict.pl - metacpan.org ]
[21:15:46] <The_Blode> She disregarded most of my feedback but focused on one critical issue.
[21:15:49] <The_Blode> So that's progress right
[21:16:11] <mjgardner> The_Blode: =~ is for matching/substituting via regular expressions. It is not for testing plain equality.
[21:16:31] <_73> LeoNerd: Ya ive been working off that example. I am close, I may ask another question in some minutes.
[21:16:43] <Grinnz> The_Blode: note that m/Y/ would also match 'fooYbar' etc
[21:17:05] <Grinnz> but it doesn't sound like taht matters for your case
[21:17:10] <Grinnz> it's just weird, like xenu said
[21:17:23] <The_Blode> Yeah I thought it was odd so flagged as advisory
[21:17:26] <EvanCarroll> LeoNerd: Even in Perl, I think most enterprises would force the go behavior if they could.
[21:17:35] <The_Blode> And I've put what mj said which is very succinct.
[21:17:39] <Grinnz> i wouldn't
[21:17:41] <The_Blode> Regular expressions are overkill for this
[21:17:53] <Grinnz> using return values for exceptions is a nightmare once you have mroe than two call frames
[21:17:56] <The_Blode> YN would also eval to true 
[21:18:00] <EvanCarroll> LeoNerd: like, I don't anyone desires that code that with autoderp can be run outside of an eval block.
[21:18:02] <The_Blode> NY too
[21:18:04] <Grinnz> we've been down that road and we're still refactoring that horrible crap
[21:18:05] <EvanCarroll> think*
[21:18:08] <LeoNerd> EvanCarroll: I suspect that's unlikely... I've seen many folks complain about forced checked exceptions in Java, or forced "having to look at errno like it's 1995" in Go,.. but very few people ever complain about a lack of it
[21:18:37] <mjgardner> The_Blode: It sounds like you have quite a cargo cult on your hands there. https://en.wikipedia.org/wiki/Cargo_cult_programming
[21:18:37] <Paperbot> Link title(s): [ Cargo cult programming - Wikipedia ]
[21:18:46] <Grinnz> EvanCarroll: if anything the enterprise solution is a full suite of exception objects
[21:18:52] <The_Blode> Cargo Cult? checks link
[21:18:53] <ilmari> rust's Reslt<T, E> type and the ? operator are my favourite error handling paradigm at the moment
[21:19:03] <ilmari> *result
[21:19:09] <LeoNerd> Reslut ;)
[21:19:11] <The_Blode> My team is like a much less funnier version of The IT Crowd
[21:19:30] <ilmari> things that are fallible return *either* an Ok(T) _or_ an Err(E)
[21:19:49] <thrig> what does the Pope return
[21:19:55] <ilmari> T
[21:19:56] <The_Blode> Gottem
[21:20:09] <thrig> or did they remove the infallible thing at some point?
[21:20:46] <The_Blode> Cargo cult = copy paste haulage
[21:20:49] <ilmari> or Result<T, Infallible>, if you're implementing a fallible API, but the concrete implementation can't fail
[21:21:07] <EvanCarroll> Grinnz: agreed fully, and not leaky violations of them so everything must be caught, etc. I mean flagging things and forcing users to put external code behind try-tiny seems like best practice in Perl.
[21:21:11] <ilmari> (soon to be Result<T, !>, where ! is the "never" type)
[21:21:20] <EvanCarroll> And that's more or less what Go forces.
[21:21:33] <EvanCarroll> ilmari: btw, I agree fully. I think rust's error handling is the best.
[21:21:36] <thrig> ! is a funny way to spell NIL
[21:21:39] <ilmari> https://doc.rust-lang.org/std/convert/enum.Infallible.html
[21:21:40] <Paperbot> Link title(s): [ Infallible in std::convert - Rust ]
[21:21:48] <ilmari> thrig: no, NIL is the unit type, ()
[21:21:56] <ilmari> thrig: values of type ! can never exist
[21:22:00] <Grinnz> EvanCarroll: it doesn't force you to. unhandled exceptions propagate to your normal exception handling mechanism, or usefully ending the script
[21:22:19] <ilmari> it's the return type of expressions that don't return, like like panic!() and return
[21:22:22] <Grinnz> thus, less boilerplate required for the normal case
[21:22:54] <_73> LeoNerd: I see why it is better to use an anonymous sub now. It allows you to have a data structure in the outer scope unlike the way I was doing it. 
[21:23:07] <ilmari> Grinnz: in Rust the boilerplate is one whole character: `?`
[21:23:22] <Grinnz> ilmari: we were talking about go
[21:24:53] <ilmari> Grinnz: the omnipresent `if err != nil { return nil, err }` in go drives me nuts
[21:25:02] <Grinnz> right, that's the problem
[21:25:18] <ilmari> _and_ it's not enforced by the compiler
[21:25:33] <xenu> the funny thing about papal infallibility is that it applies only when the pope speaks ex cathedra, which basically means "i mean this for real!"
[21:25:37] <Grinnz> stack frame propagation is a requirement if you want sane error handling for any reasonably complex piece of code
[21:25:40] <xenu> and this happened only twice in the history
[21:25:40] <jabberwok> is Â» panic!() Â« pronounced with Victor Borge's audible punctuation ? it certainly should be.
[21:25:42] <ilmari> and I'm sure there are things that return _both_ a value and an error
[21:25:45] <EvanCarroll> Grinnz: you mean you can propagate them up explicitly with ?, well sure. It's a macro for more chars in Go you write the chars out `if err != nil { return errors.New(err) }` or whatever.
[21:26:21] <Grinnz> it's the same reason that error handling in callback-based async apis is hell
[21:26:28] <Grinnz> and promises/futures/async/await is way better
[21:26:35] <Grinnz> because they propagate failures automatically
[21:27:31] <Grinnz> _73: closures are very useful
[21:27:45] <Grinnz> particularly in order to put the data in a specific place
[21:29:43] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. âChuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.â)
[21:30:15] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[21:30:18] <_73> Grinnz: ya this is my first time experiencing their usefulness in perl.
[21:30:44] <_73> They seem to be much the same as haskells lambdas
[21:30:56] <Grinnz> right, functional programming depends on the concept
[21:31:13] *** Quits: seand (~seand@69.54.142.196) (Remote host closed the connection)
[21:33:58] *** Joins: fb61 (~Frank@ip-109-43-112-85.web.vodafone.de)
[21:35:13] <ilmari> Grinnz: I like the balance in Rust. you have to think about it, but propagating it adds very little overhead. and you can tell a lot about a function from the signature: is it fallible, does it consume, mutate or merely borrow its arguments?
[21:35:50] <thrig> borrow wights. very dangerous. you go first
[21:36:01] <Grinnz> i still think it should be automatic until the level that is prepared to handle it - otherwise someone will forget sometime, and errors explode things or go to the abyss
[21:36:11] <ilmari> Grinnz: the compiler won't let you not
[21:36:12] <Grinnz> but minimal boilerplate does make it much nicer
[21:36:17] <Grinnz> oh, in that case
[21:36:35] <ilmari> you _cannot_ get at the value inside a Result without doing something explicit to it
[21:36:41] * Grinnz really needs to pick up rust one of these days
[21:36:49] <ilmari> ?, .unwrap(), .or() etc
[21:37:08] <ilmari> in go it's far too easy to ignore the err and get a nil pointer panic at runtime
[21:37:14] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StrongParameters-0.002 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StrongParameters-0.002
[21:37:38] <ilmari> yeah, if you scatter .unwrap() willy-nilly in your code, you will get runtime panics
[21:37:41] <Botje> Grinnz: careful for tetanus
[21:37:56] <ilmari> but that's a clear, obvious, code smell and should only be done in top-level applicaiton code prototypes
[21:38:08] <LeoNerd> _73: they're exactly like what a lot of other langauges call "lambda", indeed
[21:38:09] <ilmari> or something that you know can't happen but the compiler can't prove
[21:39:06] *** Parts: fb61 (~Frank@ip-109-43-112-85.web.vodafone.de) ()
[21:40:43] <_73> LeoNerd: I need to get to reading Higher Order Perl.
[21:40:56] <LeoNerd> Eh. *shrug* maybe
[21:41:59] <ehuelsmann[m]> LeoNerd: thanks for the release XS::Parse::Keyword::Builder with the 5.20 fix!
[21:42:07] <_73> I have it downloaded just havent gotten around to starting. You don't like it?
[21:43:16] <thrig> if someone already knows LISP or what it's probably not new material
[21:43:23] <Grinnz> LeoNerd: https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.21 missing a changelog entry
[21:43:23] <Paperbot> Link title(s): [ XS-Parse-Keyword-0.21 - XS functions to assist in parsing keyword syntax - metacpan.org ]
[21:43:29] <EvanCarroll> I've been using Rust a primary langauge on my personal projects for over a year now. I started thinking I would get faster at it, but a year into it I would say my development speed is probably 30% of TypeScript.
[21:43:47] <EvanCarroll> Painful is an understatement
[21:44:32] <_73> thrig: I know haskell which is why it caught my interest in the first place. How to bring those concepts into a procedural language.
[21:48:25] *** Joins: magla (~gelignite@55d450ed.access.ecotel.net)
[21:50:19] <LeoNerd> _73: The shrug was because I'm not familiar with it. But then I'm not familiar with any book
[21:50:42] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:51:09] <LeoNerd> Grinnz: Huh... not sure what happened there
[21:51:56] *** Joins: Pali (~pali@user/pali)
[21:52:09] <LeoNerd> It's an empty change, just repacked because I forgot to update the manifest
[21:52:59] *** Quits: furrymcgee (~devuan@cgn-89-1-209-32.nc.de) (Quit: leaving)
[21:55:23] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[21:56:18] <LeoNerd> Oh. Hah. I forgot to build the tarball after editing it. Bah
[21:57:32] *** Quits: symdrome (~symdrome@2804:d41:af38:7d00:3d4b:301f:ec7:dbb5) (Ping timeout: 268 seconds)
[21:58:26] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[21:59:06] *** Joins: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br)
[21:59:17] *** Joins: nxs__ (~nitronix@5.29.23.150)
[22:05:16] *** Joins: nx_ (~nitronix@88.198.206.243)
[22:06:11] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[22:07:04] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:08:20] *** Quits: nxs__ (~nitronix@5.29.23.150) (Ping timeout: 265 seconds)
[22:08:41] <stephen87> is there a recommended github acton for running perl tidy/perl critic automatically on pushes?  I see a few in the marketplace, but from what i can tell they dont get much use..
[22:11:17] *** Joins: semeion (~semeion@user/semeion)
[22:13:18] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:16:23] <xenu> stephen87: i don't know about perltidy, but for perlcritic there's Test::Perl::Critic (or if you're using dzil: Dist::Zilla::Plugin::Test::Perl::Critic) 
[22:16:42] <xenu> so just make a test and run it the same way the other tests are run 
[22:18:06] <stephen87> cool.  ty
[22:22:12] <Grinnz> for perltidy mojo uses this https://github.com/mojolicious/mojo/blob/main/.github/workflows/perltidy.yml
[22:22:13] <Paperbot> Link title(s): [ mojo/perltidy.yml at main Â· mojolicious/mojo Â· GitHub ]
[22:22:57] <Grinnz> basically just install and run perltidy how you want, and git diff --exit-code counts it as a failure if anything changed
[22:23:57] <Grinnz> (you need -b to have perltidy modify in place for that to work also)
[22:35:24] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[22:36:21] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[22:37:41] <stephen87> Cool ty Grinnz
[22:41:21] * GumbyPAN CPAN Upload: App-Git-Workflow-v1.1.15 by IVANWILLS https://metacpan.org/release/IVANWILLS/App-Git-Workflow-v1.1.15
[22:42:51] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[22:47:07] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 252 seconds)
[22:47:18] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[22:47:29] *** Quits: WantToHelp (~dale@user/wanttohelp) (Ping timeout: 268 seconds)
[22:48:03] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:52:24] *** Joins: WantToHelp (~dale@96.77.40.70)
[22:59:54] *** Quits: markgrady (~markgrady@204.246.246.254) (Read error: Connection reset by peer)
[23:00:23] *** Joins: markgrady (~markgrady@2a02:c7f:f72b:b200:d959:b5c9:a23a:7c93)
[23:06:16] <ether> whee, bad things happen when you ^Z a script that writes to a file, and then read/write that file later on.  the last sector of the file was filled with NULs
[23:06:37] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Ping timeout: 250 seconds)
[23:11:23] <zgu> file pointer got out of sync with buffering or something?
[23:18:30] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[23:20:35] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:31:26] * GumbyPAN CPAN Upload: RT-Extension-TemplateTickets-0.02 by AJWOOD https://metacpan.org/release/AJWOOD/RT-Extension-TemplateTickets-0.02
[23:35:49] *** Quits: ufobat (~martin@dynamic-077-007-070-012.77.7.pool.telefonica.de) (Ping timeout: 265 seconds)
[23:40:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[23:40:33] *** Joins: mrXYZ1 (~rjper@96.59.213.0)
[23:42:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:46:39] <gordonfish> Has anyone seen this site before, https://semiage.top ? Smells like a full on scam and I can't seem to find much info on it
[23:46:40] <Paperbot> Link title(s): [ ãComputer Cable TestersãWholesale Online USA,catalogoTablets & eBook ReadersBathroom Accessories ]
[23:54:18] <mjgardner> gordonfish: It looks like some kind of generic store template filled with random tech products but not customized enough.
[23:54:27] <mjgardner> "Sign up for our free video course and urban garden inspiration"
[23:57:38] *** Joins: gganbu (~yeurt@copyfree/advocate/tusko)
[23:58:14] <gganbu> How would I print the contents of $dh as this does not work `perl -e 'opendir(my $dh, "./"); print "@dh"; closedir $dh'`
[23:59:01] <Grinnz> dirhandles can't be printed directly, you have to use readdir on them to read the contents of the dir
[23:59:07] <Grinnz> https://perldoc.perl.org/functions/readdir
[23:59:08] <Paperbot> Link title(s): [ readdir - Perldoc Browser ]
[23:59:19] <Grinnz> also don't forget to check opendir for errors like the example there
[23:59:42] * discip defending Perl on the raspberry channel :)
[23:59:54] <Grinnz> and as long as you use the 'my $dh' form and not the bareword handle form, you don't need to call closedir yourself
