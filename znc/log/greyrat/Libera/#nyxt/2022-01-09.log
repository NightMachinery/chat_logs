[00:16:25] <lagash> OK yeah, Demeter works for 2.2.3
[01:05:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:25:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:50:43] <qhong> jmercouris: I always had the idea of "fixing" CL, by reproviding a clone of the "common-lisp" package, but with every kind of missing powerful language features added (e.g. gradual typing)
[01:51:22] <qhong> It requires someway to load all other systems/packages using the new "common-lisp" package though, I'm not sure how to do it.
[01:56:30] *** Joins: Guest6 (~Guest6@2800:484:ad7a:a51c:907:cc1b:e06a:a384)
[01:56:51] <Guest6> which are the dependencies of nyxt
[02:02:57] <Guest6> and why the people say that is difficullt to compile to windows
[02:03:16] <Guest6> im using a similar browser called vieb
[02:03:42] <Guest6> but vieb is more vim (neovim) like
[02:04:31] <Guest6> but it is nice and fully customizable
[02:04:52] <Guest6> but btw which are the dependencies of nyxt
[02:05:29] <waleee> vieb uses electron so the actual compilation bit on window is quite low I imagine
[02:06:40] <waleee> Guest6: to have a functional nyxt atm on windows you are forced to use either a vm or a beta-level version of wsl called wslg
[02:06:57] *** Quits: ardon (~user@user/ardon) (Read error: Connection reset by peer)
[02:07:08] <waleee> if you search the issues you will find some windows mentions
[02:07:56] <waleee> Guest6: https://discourse.atlas.engineer/t/nyxt-on-windows-10-with-wslg/120
[02:08:10] <Guest6> i know but i didn't activated hyperv
[02:08:14] <Guest6> hyperV
[02:08:18] <Guest6> yet
[02:08:29] <Guest6> i have all to do it
[02:08:43] <waleee> and re the necessary dependencies, https://github.com/atlas-engineer/nyxt/tree/master/documents#standard-developer-installation
[02:09:13] *** Quits: Guest6 (~Guest6@2800:484:ad7a:a51c:907:cc1b:e06a:a384) (Quit: Client closed)
[02:38:31] *** Joins: ardon (~user@user/ardon)
[03:02:55] *** Quits: ardon (~user@user/ardon) (Remote host closed the connection)
[03:10:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[03:12:32] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:14:38] *** Joins: ardon (~user@user/ardon)
[05:22:39] <jmercouris> lagash: indeed Demeter only works on official releases and not master yet
[05:22:50] <jmercouris> There is not much work to do to update it to also work on master
[05:23:23] <jmercouris> If you post about it on the forum or on GitHub I’ll remember :-D
[05:23:34] <jmercouris> Probably the forum is a better place
[07:13:51] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[08:01:57] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e)
[08:22:16] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:28:20] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:29:07] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:45:57] *** Joins: kitty1 (~kitty@096-039-147-043.res.spectrum.com)
[08:52:18] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:28:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:02:05] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 268 seconds)
[10:06:00] *** Joins: tekakutli (~user@201.141.25.51)
[10:07:30] *** Joins: aeka (~aeka@user/hiruji)
[10:22:37] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f484:3278:789d:d6a5) (Remote host closed the connection)
[10:22:56] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[13:34:41] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[14:03:00] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:07:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[15:10:37] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:26:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da)
[15:53:49] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[16:10:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:40:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:50:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716)
[17:46:41] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[18:09:14] *** Quits: ardon (~user@user/ardon) (Read error: Connection reset by peer)
[18:33:41] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:41:36] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:39:11] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Quit: ZNC 1.7.x-git-3-96481995 - https://znc.in)
[19:40:46] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[19:42:19] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:16] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59)
[20:06:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:18] *** Quits: tekakutli (~user@201.141.25.51) (Remote host closed the connection)
[21:09:29] <lagash> jmercouris: where exactly is the issues tracker for Demeter, anyways?
[21:57:18] *** Joins: ardon (~user@user/ardon)
[22:09:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:10:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:36:32] <jmercouris> lagash: on discourse
[22:36:54] <jmercouris> https://discourse.atlas.engineer/c/demeter/11
[22:38:20] <jmercouris> qhong: I had a similar idea by making a superset of CL that Nyxt would be developed in, so we could use pure CL but in Nyxt we’d have all of the fixes we want
[22:38:43] <jmercouris> For the time being I’ve decided against it because I want our work to be beneficial to the Common Lisp ecosystem
[22:39:03] <jmercouris> I came up with the name of the language to be Gaia
[22:40:34] <mariari> what extensions of the language would gaia have?
[22:41:19] <jmercouris> Like for example a way to write out hash tables
[22:41:30] <jmercouris> I like a lot of the ideas in CL21
[22:41:52] <jmercouris> https://github.com/cl21/cl21
[22:42:34] <jmercouris> For example, Gaia would come with ASDF and UIOP, it would be considered part of the standard
[22:42:55] <mariari> seems like some minor extensions
[22:43:05] <jmercouris> Yes, it’s a superset
[22:43:24] <jmercouris> I don’t want to not be able to use CL, though the other way around may not be possible
[22:43:26] <mariari> like you can view those as library inclusions. Kind of like how I use fset
[22:43:38] <jmercouris> Yes, exactly like that
[22:44:59] <mariari> A lot of OCaml development typically uses jane street core or maybe batteries instead of the original standard
[22:45:21] <jmercouris> I see interesting
[22:45:40] <jmercouris> Well, it’s just an idea I’ve had in my head for a couple years now
[22:45:42] <mariari> I like jane street core myself, and basically use that as the standard when I write OCaml, has nice SEXP derivation as well
[22:45:47] <jmercouris> This is actually the first time I’ve said it
[22:46:16] <jmercouris> I thought it would be a nice way to extend the language in a forward compatible way
[22:46:18] <drakonis> the CDR process might see an revival in the near future
[22:46:21] <drakonis> will be good/fun
[22:46:28] <jmercouris> What is CDR?
[22:46:49] <mariari> > Clean names and clean packages -- Symbols are re-considered and re-organized
[22:46:57] <mariari> that'd be nice, if CL got proper pacakges for most of it's functions
[22:47:08] <drakonis> https://common-lisp.net/project/cdr/
[22:47:09] <jmercouris> It could be good indeed
[22:47:47] <jmercouris> Ah that is interesting
[22:47:54] <mariari> yeah
[22:47:59] <jmercouris> I also like WSCL by mr Strandh
[22:48:11] <drakonis> sicl is also very interesting
[22:48:22] <jmercouris> Yes
[22:48:25] <mariari> CL could use some love in this regard
[22:48:29] <mariari> SICL is exciting
[22:48:43] <drakonis> SICL is the most exciting thing, that and CDR's potential revival
[22:48:43] <jmercouris> Well, when we have an extra million to throw around :-D
[22:49:24] <jmercouris> I would be very interested in proposing and implementing a new CL specification
[22:49:35] <drakonis> we're well beyond the point where needing millions to have a document approved by some standards body is great.
[22:49:50] <drakonis> do it like the schemes did though
[22:49:50] <jmercouris> What do you mean?
[22:50:20] <jmercouris> I think the language development alone would cost that much
[22:50:38] <jmercouris> I’m not seeking necessarily a rubber stamp from ANSI
[22:50:44] <jmercouris> To me, it is meaningless
[22:50:45] <drakonis> the rubber stamp isnt needed
[22:50:47] <drakonis> yes.
[22:51:10] <drakonis> but there's a thing to be learned from the scheme folks, the srfis are a good idea
[22:51:30] <jmercouris> Pierre is much more familiar than me
[22:51:39] <drakonis> does he show up on irc?
[22:51:44] <jmercouris> Perhaps he has some opinions he can share with me tomorrow
[22:51:53] <jmercouris> I’ve only convinced him once to get on irc lol
[22:52:02] <mariari> did CL21 get much love it seems they updated it 6~ yeras ago, did it just kind of go out slowly?
[22:52:05] <jmercouris> But I’ll have a call with him tomorrow
[22:52:12] <jmercouris> CL21 did not get a lot of support
[22:52:22] <jmercouris> If you mention it in common lisp you’ll get laughed at
[22:52:27] <mariari> really?
[22:52:28] <drakonis> i think most cl folks arent going to be on board with a new single standard
[22:52:40] <jmercouris> Additionally the author, Eitaro, is often mocked for his code quality
[22:53:00] <jmercouris> drakonis is correct
[22:53:00] <drakonis> fukamachi does some good stuff though
[22:53:07] <jmercouris> I love his software
[22:53:18] <drakonis> CDR would be much better than going for another big bang standard
[22:53:21] <jmercouris> I’m just saying how people act
[22:53:40] <jmercouris> If Nyxt is big enough, we’ll make our own standard :-D
[22:53:50] <drakonis> because you can improve on CL piecemeal
[22:53:53] <drakonis> like libraries i suppose
[22:54:06] <jmercouris> I sincerely believe that Nyxt can be bigger than eMacs
[22:54:09] <drakonis> i want to roll out my own guix in cl
[22:54:19] <jmercouris> And we can expose more people to a complete CL environment
[22:54:21] <mariari> biggest issues with CL libraries is version numbering with quicklisp seems to be a mess
[22:54:33] <drakonis> because there's quite a lot of things that could be better that require a redesign from scratch
[22:54:37] <jmercouris> Yes that’s a failure of QL
[22:55:02] <mariari> it has huge effects though, as it really encourages me to take on zero dependencies, I even worry about using things like fset as it does occsaionally break in changes
[22:55:42] <drakonis> there are ways to pin dependency versions now
[22:55:52] <mariari> oh?
[22:56:30] <jmercouris> Clpm
[22:56:37] <jmercouris> Not in QL though
[22:57:17] <mariari> it seems a lot of useful things are not in QL for some reason
[22:57:23] <mariari> like coaltion which I want to play with
[22:57:27] <drakonis> you have ultralisp
[22:57:36] <drakonis> coalton isnt there because they're trying to get a stable API first
[22:57:52] <drakonis> its entirely deliberate
[22:58:02] <mariari> gotcha, wasn't sure about coalton
[22:58:22] <mariari> I'll wait to play with it, I like what they've done where you can mix CL. I'd probably use it for small things, and structure in just plain ANSI CL
[23:02:37] <drakonis> there's a library that lets you build language towers with cl
[23:02:39] <drakonis> hold on
[23:03:06] <drakonis> its by serapeum's author
[23:03:22] <drakonis> vernacular
[23:03:57] <mariari> that sounds fun
[23:04:10] <mariari> never heard it oddly enough
[23:05:10] <mariari> -*- mode: my-lang -*-
[23:05:16] <mariari> reminds me of lisp machine language selection
[23:05:31] <mariari> at least from what I've played around with
[23:06:40] <defaultxr> drakonis: what are some of the things in guix that you feel could be better?
[23:06:45] <mariari> do you know how their simple-modules work? I've tried making a modular functor system in CL before, and it was a hack
[23:08:58] <drakonis> rip out the nix daemon or replace it with a guile equivalent
[23:09:22] <drakonis> have it do useful things instead of be a vestigial limb from guix's earlier days
[23:09:30] <drakonis> being
[23:10:10] <drakonis> the APIs that were built to deal with the nix daemon are fine though
[23:10:36] <drakonis> but the main issue i have is with the nix daemon being around and limiting guix's evolution
[23:11:49] <defaultxr> hm, i thought i read somewhere that guix and nix don't share any code
[23:12:27] <drakonis> it only shares in a very old fork of the daemon
[23:12:33] <drakonis> heavily modified as of now
[23:12:45] <drakonis> its a decade old at this point
[23:15:12] <drakonis> if i were to roll a cl equivalent, it'd end taking advantage of cl's features
[23:16:43] <defaultxr> like which?
[23:17:13] <drakonis> debugging, clos, clcs
[23:17:34] <drakonis> basically, if i'm building something with guix, i'd rather not have the whole building stop if something breaks
[23:18:32] <defaultxr> true, agreed
[23:18:43] <defaultxr> it is really sad how few schemes don't take interactivity as seriously as CL
[23:19:19] <drakonis> none of the schemes have come anywhere as close as CL
[23:19:28] <defaultxr> s/don't//
[23:19:53] <drakonis> its difficult to do so too
[23:20:03] <defaultxr> racket seems particularly disappointing in that regard, they seem to have given up on it completely
[23:20:42] <drakonis> ~the top level is hopeless~
[23:20:46] <drakonis> i hate this so much
[23:23:11] <defaultxr> yeah, it must be difficult to implement, because i can't imagine so few people even in the lisp and lisp-adjacent language communities realize the value of interactivity beyond just a repl
[23:24:52] <mariari> "top level considered hopeless" ft racket
[23:25:10] <mariari> MIT scheme, could as it is image based, you have some type of condition system I believe
[23:25:12] <drakonis> there's denxi, which is nix and guix inspired but in racket
[23:25:14] <drakonis> its idk
[23:25:18] <drakonis> ok?
[23:25:57] <drakonis> there's stklos, gauche and guile for something similar to clos
[23:26:19] <drakonis> mostly similar
[23:26:29] <drakonis> not sure if any of the schemes actually have a clcs equivalent
[23:32:23] <defaultxr> the scheme that seems to follow in CL's footsteps the most to me (at least in my relatively small experience pool) is gerbil, but even it doesn't have a condition system on CL's level (yet, anyway)
[23:33:04] <defaultxr> the only language i am familiar with that has something approaching CL's conditions is smalltalk/pharo
[23:33:53] <mariari> defaultxr: would you count this as a condition system https://pomf2.lain.la/f/41w972i8.png . Also you may want to look into factor, it's very CL inspired
[23:34:13] <defaultxr> i actually just started playing around with factor recently :)
[23:34:20] <defaultxr> still very new to it though
[23:34:49] <mariari> ahh enjoy it's quite nice
[23:34:50] <defaultxr> that screenshot looks like a condition system to me
[23:34:56] <defaultxr> thanks :)
[23:35:00] <mariari> yeah that's MIT scheme if you're curious
[23:35:11] <mariari> it's image based, so it has all the power, just no tools built for it yet unlike CL or Factor
[23:36:42] <defaultxr> interesting. i've heard the name a few times but don't actually know much about it
[23:38:10] <defaultxr> may have to give it a look sometime, thanks
[23:38:18] <mariari> MIT-scheme that is?
[23:38:44] <defaultxr> yeah.
[23:39:52] <mariari> with MIT scheme I heard conditions are first class and you can do roll back time and use your environment in a "first class" way
[23:40:03] <mariari> never really messed with it too much, as I find scheme to be a fractured mess
[23:40:34] <drakonis> a fractured mess.
[23:40:39] <drakonis> it depends on which one you're using anyways
[23:40:54] <drakonis> there's a couple that support nearly every srfi and rnrs
[23:40:58] <mariari> the standard of scheme I find to be a mess as well, esp since there is no implciit resolution mecchanism in the standard
[23:41:09] <drakonis> implicit resolution mechanism?
[23:41:30] <drakonis> https://srfi.schemers.org/srfi-0/ this?
[23:41:31] <mariari> like defmethod or interfaces (java), or type classes (haskell)
[23:41:36] <drakonis> oh
[23:41:42] <drakonis> its probably in one of the srfis
[23:41:47] <mariari> nah it's just a word I use for function resolution based on arbitrary ideas
[23:41:59] <mariari> probably, but the standard is still litered with string-map vector-map .... etc etc etc
[23:42:25] <drakonis> i kinda like how trivial scheme makes converting a list to another type
[23:43:26] <mariari> oh?
[23:44:12] <drakonis> scheme has a lot of <datatype>-><another datatype> functions
[23:44:35] <drakonis> its not really a make or break thing but i liked it a lot
[23:45:06] <mariari> yeah, that is nice
[23:45:11] <mariari> ocaml has an idiom for that
[23:45:19] <mariari> Module.to_list and Module.from_list
[23:45:36] <mariari> list is actually interesting, as if you can define the reduce operation in CL, it's listable so to speak
[23:46:19] <mariari> as it's just (reduce #'cons (<but-last sequence) :from-end t :inital-value (<last-item> seuqence)))
[23:46:50] <drakonis> i think coalton also provides a lot of them but not in the same naming convention
[23:47:15] <mariari> yeah it does it took them from haskell
[23:47:21] <mariari> so it would be called "Foldable"
[23:47:27] <mariari> and (reduce ... :from-end t) is just foldr
[23:49:52] <mariari> but yeah, drakonis it would be interesting to have, CLOS could give you something interesting with this
[23:50:13] <mariari> (to 'list <data-strcture>)  where you dispatch on the symbol given and the data structure
[23:50:17] <mariari> to try to build a generic bridge
[23:51:50] <drakonis> i just might, but back to learning
