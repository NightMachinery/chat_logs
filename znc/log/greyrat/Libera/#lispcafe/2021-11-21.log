[00:06:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1) (Quit: Leaving)
[00:08:05] <selwyn> i am impressed by how much time you both spend on regex
[00:09:52] <gilberth> selwyn: Well, I spend a lot of time some years ago, because I wanted to use DFAs instead of NFAs for matching them with submatch addressing and nobody had found a solution for that before me. Half the time I was following a red herring though.
[00:14:26] <gilberth> I consider getting runtime down from O(exp) to O(n) an achievement. /me shrugs.
[00:16:32] <gilberth> n being the length of input. The most important part is, that the size of the RE isn't part of the runtime anymore. To be precise for an RE of size m and an input of size n, I do in O(n), while an NFA does in O(2^m*n).
[00:17:01] <gilberth> Hmm, would quantum computers be able to run NFAs in linear time?
[00:22:31] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[00:24:41] <selwyn> um
[00:25:14] <selwyn> i doubt it
[00:25:26] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Remote host closed the connection)
[00:25:49] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[00:26:06] <selwyn> but i don't know
[00:27:33] <gilberth> There is a helicopter drawing its circles in midair here for more half an hour. I wonder what they are after.
[00:40:15] *** Joins: X-Scale` (~ARM@83.223.249.106)
[00:40:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[00:42:41] *** X-Scale` is now known as X-Scale
[00:54:04] <gilberth> Did I mention that I don't like this law demanding two-factor authorization? Did I mention that I don't like confusing authorization with authentication?
[00:56:37] <sham1> People generally aren't all that aware of the three As of computer security
[00:56:53] <sham1> And at least mix up authorization and authentication. Accounting is a bit harder to mix up
[00:57:01] <gilberth> And in this regard two-factor is problematic in practice. When I have just a password, I could pass that password to someone else and they could do things on my behalf. I then authorized that person to do so. With two-factor, the second factor often being a a physical token like a phone, this is not practical as I would need to pass that token, too.
[01:01:05] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[01:01:27] <gilberth> For finger print sensors to unlock a phone this also has implications. I can't pass my finger---at least not with any hope to get it back in working condition. Say I travel with a friend by car. I drive. A text message comes in. With just a PIN I could ask my friend "Would you be so kind and read that message to me? Please find the phone there and there. My PIN is 123456. Thanks."
[01:05:39] <gilberth> Or recently as power was cut off to replace the meter. My wife was there and fired up the machine again, needing to unlock the encrypted volumes, for which she needed by passphrase. Would that have been coupled to token-based authentication, this wouldn't have worked as I was not physically present.
[01:10:49] <edgar-rft> ...and what if your finger prints wrong data?
[01:12:20] <edgar-rft> please excuse my ignorance, but I haven't printed much with my fingers so far
[01:12:29] <sham1> One cuts the offending finger off
[01:14:48] <gilberth> That is the other concern. When your finger print has value, criminals may have an incentive to get hold of your finger.
[01:16:17] <gilberth> Or abduct me. Or what ever. With a gun pointing at me, I could --- when in doubt --- just share my password in the hope that I would be off the hook then.
[01:18:16] <gilberth> Anyhow, in general I like to delegate. I could practically authorize you to enter my house. All I need to do is to tell you where and how to find a physical key.
[01:18:45] <gilberth> I can do that, no matter where I am. I don't need to pass you a physical token.
[01:22:58] <Alfr> Suppose your appointee possesses a private key, wouldn't you signing his key (with associated data stating the key holder may open your door) satisfy the second factor requirement (in addition to you telling him where your physical key is).
[01:24:20] <Alfr> Bonus, you may revoke that certificate later by telling your door, in case you don't like your appointee any more.
[01:24:50] <Alfr> Just don't count on the door working, if the power's out.
[01:25:03] <selwyn> what law
[01:25:34] <hayley> Eh, fuck it, I'll wait for someone to ask for $ and ^ then.
[01:26:38] <hayley> I still have a bucketlist of other shit, e.g. killing registers on A*, SIMD prefix search, and killing off more branches.
[01:27:48] <gilberth> selwyn: I don't know which exactly. But since two years or so, it is required that you implement a two-factor authorization for everything online which deals with your money. That is: Where transaction lead to a contract, which could be as simple as buying something, which could imply you being obligated to pay.
[01:28:02] <Alfr> hayley, what have the registers and twigs done to you?
[01:28:09] <gilberth> Banks were the first to implement that.
[01:28:37] <gilberth> hayley: You give up that early?
[01:29:54] <gilberth> selwyn: This is why everybody, including Paypal, Amazon, and ebay is begging me for my mobile phone number. I don't like that.
[01:31:03] <gilberth> And in case of Amazon, I actually authorized my wife to order things in my name. [Well, for that she would have an alternate route available, but whatever.]
[01:33:01] <hayley> gilberth: It's not giving up, it's strategic deferral.
[01:33:15] <hayley> Giving up would be the Netfarm suite.
[01:33:28] <gilberth> And then when you try to login and make some transaction, they'd text you some code, you have to enter. This is the second factor. Very inconvenient for me as I don't carry my phone around; it lives under my pillow.
[01:33:57] <gilberth> hayley: Strategic, you say?
[01:34:27] <hayley> Yes.
[01:34:45] <hayley> I'm still short on the not-DFA part of searching.
[01:34:48] <gilberth> Wouldn't that rather be a tactical move?
[01:35:55] <hayley> Idk
[01:37:32] <gilberth> We could tackle those utterly useful Perl semantics instead. But then again, those don't work well for scanners, and therefore are useless to me.
[01:39:04] <gilberth> Or we generalize transaction only being crossed under some condition. I mean, we are bust with a(a|b){,100} --- can we have a counter there to escape O(2^n)?
[01:39:14] <gilberth> * transitions
[01:40:16] <gilberth> I believe there is still room for a much broader class of regular expressions and their automata.
[01:40:26] <hayley> isum would also be useful too.
[01:40:42] <gilberth> You still don't use it?
[01:41:17] <gilberth> Nah, you use the 2d-version every time you use McCLIM.
[01:41:20] <hayley> Correct.
[01:42:24] <gilberth> So, use rectangles of height 1 instead of intervals. :-)
[01:46:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:47:58] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[02:07:31] *** Joins: notzmv (~zmv@user/notzmv)
[02:08:53] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[02:24:54] <hayley> .oO(So, what is this then? re2cl? Hyperscan for broke people? cl-ppcre 2?)
[02:25:03] <hayley> .oO(I guess one-more-re-nightmare suggests the last one.)
[02:26:10] <gilberth> You're not Perl compatible.
[02:27:16] <hayley> So?
[02:27:38] <hayley> The nightmare is about performance, as CL-PPCRE is barely faster than PCRE without JIT these days.
[02:28:05] <sham1> Perl compatible regexes aren't truly regular
[02:28:21] <gilberth> Then cl-p_PCRE_ 2 would be a misnomer. Despite I seriously don't like it when people name their systems cl-xyz because they claim an authority they don't have.
[02:28:45] <hayley> Well, there is only one DHT library in Common Lisp (I think) and it is cl-decentralise2.
[02:29:13] <hayley> Looking up 'common lisp "distributed hash table"' mostly comes up with Netfarm
[02:29:20] <gilberth> It doesn't matter whether there is only one.
[02:29:53] <hayley> Arguably there are two, given the original cl-decentralise.
[02:30:30] <gilberth> I mean, would I call my library "cl-regex" people would get the impression that this is the default and de facto standard regex library for CL.
[02:31:10] <gilberth> Often what you find that cl-foo is not the best option for foo in CL.
[02:31:27] <hayley> Sure. Tell me if you come up with a better name.
[02:31:40] <gilberth> But people see it name cl-foo and might imply otherwise. Especially people new to CL.
[02:31:50] <hayley> one-more-re-nightmare is a bit immature admittedly, but it's not cl-regular-expressions-with-derivatives at leas.
[02:32:05] * hayley feels called out, having cl-decentralise be one of her first CL projects
[02:33:11] <hayley> Maybe I should make a CLiki page.
[02:33:32] <gilberth> hayley: You could call it "Aegri Somnia", but I would ask you to leave that brand to me as it would blend well with my "nocturnal" blend.
[02:34:13] <gilberth> brand, rather. Too many "b.{4}" words.
[02:34:13] <hayley> Most of my recent projects are references to some songs.
[02:34:27] <hayley> Telekon(s): https://en.wikipedia.org/wiki/Telekon
[02:34:38] <hayley> one-more-re-nightmare: https://www.youtube.com/watch?v=ZVKirxPRxkY
[02:34:38] -ixelp- One More Red Nightmare - YouTube
[02:34:47] <gilberth> You want to be Edi 2.0?
[02:34:49] <hayley> 42nd-at-threadmill: https://www.youtube.com/watch?v=c7QdzDssvqY
[02:34:49] -ixelp- King Crimson - Pictures Of A City (Including "42nd At Treadmill") - YouTube
[02:35:08] <hayley> The abandoned Cleavir-to-JVM pass: https://www.youtube.com/watch?v=eS-o0T9v0wY 
[02:35:09] -ixelp- Energy Fools The Magician (2004 Digital Remaster) - YouTube
[02:35:26] <hayley> gilberth: Well, I have _not_ referenced Frank Zappa yet. 
[02:39:06] <hayley> http://www.nureference.co.uk/discography/beggars/BBL%2019%20CD%20pge%202.jpg
[02:40:04] <hayley> "The idea changed dramatically, with the songwriter replacing a fantasised telekinitic [sic] nightmare with his own imploding emotions. Although there was clearly a link between the distorting, egotistic power of fame, 'where I could make things happen just by thinking' and the Scanner-like character he first had in mind, the lyrics on Telekon are overtly personal."
[02:56:32] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0)
[02:58:04] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[03:08:30] * hayley uploaded an image: (54KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/cQrAPfygIAyFAsUElrXETfXJ/tech-support.jpeg >
[03:10:14] <gilberth> Oh dear, my dear. You'll sort it out eventually.
[03:13:35] <gilberth> hayley: Didn't you want to move out anyway?
[03:14:56] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[03:38:13] <hayley> Yes.
[03:39:04] <hayley> Pity that I don't think we have those SIMD-ish instructions with a comparison that gives you a register of all 1s/0s for a match, rather than setting a flag, for general purpose registers.
[03:40:35] <hayley> I want to do a branch-free ISUM test, e.g. checking if we read a[bc]. If each set has cardinality 1, then we can just emit something like (logand (logxor (aref s p) (char-code #\a)) (logxor (aref s (1+ p)) (char-code #\b))) and it'll be zero for a match.
[03:43:03] <hayley> Amusingly RISC-V has SLTIU for this if your characters fit in 12 bits.
[03:54:36] <hayley> Going branch-free doesn't seem to make it that much faster, actually. Only from 4.46GB/s to 5.17GB/s...hey, that's pretty fast already.
[03:55:58] <hayley> But one-more-re-nightmare spits out like 10.34GB/s apparently...oh, I have a 1Mchar buffer but the match is at 111,110, so basically divide everything by 9.
[03:56:11] <hayley> 1.15Gchar/s still pretty good.
[03:58:40] <hayley> easy-ab: 423.84 megabytes/second bit-ab: 570.54 megabytes/second omrn-ab: 1.14 gigabytes/second search: 44.84 megabytes/second
[03:59:14] <gilberth> What is "ab"?
[03:59:51] <hayley> The string to search for, since I don't know how to test for a[bc] in my fucked up negative Boolean logic that arises by using LOGXOR for character comparisons.
[04:00:12] <hayley> The haystack is 1Mchars of #\a except the last is #\b.
[04:00:56] <hayley> CL-PPCRE is slower than SEARCH again, because of course it is.
[04:01:24] <gilberth> CL-PPCRE doesn't compile, does it?
[04:02:25] <hayley> No, just a chain of closures.
[04:02:34] <hayley> The book Let over Lambda erroneously states that CL-PPCRE compiles.
[04:03:52] <hayley> https://letoverlambda.com/index.cl/guest/chap4.html C-f PPCRE
[04:04:08] <hayley> "But in COMMON LISP—the most powerful language—it is essentially no more difficult to take this regular expression, convert it into a lisp program, and pass that lisp program to the optimising, native-code lisp compiler used to build the rest of your lisp system." Yet CL-PPCRE DOESN'T DO THAT!
[04:04:25] <gilberth> Which also is very ironic. The author while writing that book called for interesting macros. I mailed him, but what I did wasn't considered, I guess. I own the book, but never really read it.
[04:05:01] <gilberth> hayley: Indeed. This is sad.
[04:06:47] <hayley> Hm, but then BIT-ABC is slower than EASY-ABC when I search for abc. Pity.
[04:07:27] <gilberth> <http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/code/match/nregex/nregex.cl> does compile.
[04:08:10] * hayley knows that branching is evil for such tight code, but can't figure how to not branch. And she can't expect to just Boyer-Moore/SIMD equivalent everything.
[04:09:20] <gilberth> In my experience branching isn't that bad. It's not that CPUs stall the whole damn^Wfine pipeline anymore.
[04:10:41] <hayley> Sure, but the branches are not easy to predict for a DFA simulation. So you have to speculate both ways.
[04:10:53] * hayley really should shut up and test under perf.
[04:11:41] <gilberth> Didn't you say that your haystack is all the same, but the very end? I am sure the CPU will notice.
[04:12:09] <gilberth> This however may not be a realistic benchmark.
[04:12:09] <hayley> Yeah, this is perhaps the best case if it's all the same.
[04:13:43] <hayley> Looks like it. 9.1 billion branches, only 171 thousand misses.
[04:14:29] <gilberth> That is a pretty good hit rate, isn't it? Curious what do you use to read those numbers?
[04:14:33] <hayley> IPC of 3.64 too, and apparently 0.00 stalled cycles per instruction.
[04:14:41] <hayley> perf stat ./test-program
[04:15:51] <hayley> I guess I can run my telephone number RE on some 1337-speaked text to get more interesting branches.
[04:16:54] <gilberth> How come that I didn't know that tool?
[04:17:10] <hayley> idk
[04:17:36] <hayley> I had run it to compare cache misses of NonBlockingHashMap, Luckless and 42nd-at-threadmill almost a year ago.
[04:17:37] <gilberth> Wouldn't logs of some kind be a more real world test?
[04:17:55] <hayley> I don't know what's in my /var/log!
[04:18:21] <hayley> /var/log/journal is fucking huge at 3.8GB. The rest is uninteresting.
[04:18:46] <gilberth> What's in it?
[04:18:56] <hayley> I think that's systemd binary gunk.
[04:19:24] <hayley> less thinks I shouldn't read it.
[04:19:45] <gilberth> Oh, perhaps this is why I don't have a /var/log/journal. I am systemd free still.
[04:20:00] <hayley> I have a log from the university VPN though. Could look for subnets in that.
[04:20:53] * hayley tests
[04:21:04] <hayley> Now what are you going to match with a /32 subnet? Only one damn IP?
[04:22:08] <hayley> Some 540MB/s for [0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+ (. and / are literals still)
[04:23:05] <hayley> Now it's more interesting. 3.6 billion branches, and 50 million misses (1.36% of all). 2.21 IPC.
[04:26:53] <hayley> The numbers are pretty close if I do ALL-MATCHES rather than FIRST-MATCH (also note that the-cost-of-nothing aims for running for 2 seconds, not for a fixed number of iterations).
[04:26:54] <gilberth> Which still is fair, I'd say.
[04:28:13] <hayley> Yeah, pretty good.
[04:28:37] <hayley> Though it's kinda hard to compare if I don't know the theoretical maximum performance. Seems to hit sometimes.
[04:29:15] <hayley> "Oh, this stuff on the GPU is already like 30x faster, and it won't draw more than 100W regardless of load, so I guess I hit maximum." *fiddles with code* "That was _not_ the maximum."
[04:32:55] <hayley> Do we have SIGNUM without branches?
[04:37:20] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[04:42:44] <hayley> If I want ranges, perhaps I need to handle ternary positive/negative/zero. Hm.
[05:05:46] <hayley> https://stackoverflow.com/questions/50512989/fastest-way-of-checking-if-a-number-is-within-a-range
[05:06:20] <hayley> Nah, https://stackoverflow.com/questions/17095324/fastest-way-to-determine-if-an-integer-is-between-two-integers-inclusive-with was better.
[05:08:05] <gilberth> The is a BOUND instruction. SCNR
[05:12:06] <moon-child> I think the boundschecking instructions are slow
[05:13:13] <moon-child> aside, I kind of wonder whether there are situations where switching from two branches to one would be slow
[05:14:12] <moon-child> like, say the <lower has some predictable period, and the >upper has predictable period, but when you do them both as one check it harmonizes badly and you get a single unpredictable with a period large enough to be unpredictable
[05:14:19] <gilberth> Yep, and it throws an exception, which is no help hfor ayley. Otherwise it's a pity, that it is slow. And: is it really?
[05:14:58] <gilberth> The BOUND instruction, that is.
[05:17:05] <moon-child> hmm.  agner says it's 11 'ops' on zen2, but does not give latency numbers
[05:17:09] <moon-child> uops.info does not know about it
[05:29:45] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:32:59] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[05:45:17] <hayley> I suspect I really do need to compress to a single bit, though I don't know how to do it. Time to check HAKMEM?
[05:47:00] <hayley> Nope, I was thinking of Hacker's Delight for bit twiddling.
[05:48:56] <hayley> https://www.reddit.com/r/lisp/comments/qygqdh/how_to_get_rid_of_my_lisp/
[05:48:56] -ixelp- How to get rid of my lisp : lisp
[05:51:54] <hayley> Yes, Hacker's Delight has some branch-free predicate comparison thingies.
[05:52:16] <moon-child> 'why "thudo apt-get purge sbcl" fails??'
[05:52:20] <moon-child> (with apologies)
[05:53:50] <hayley> Hm, but they want C's ~ or ABS which both require branches AIUI.
[05:54:17] <moon-child> you can kinda do abs without branches
[05:54:23] <moon-child> on fixnums
[05:54:29] <hayley> Sure.
[05:55:54] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 260 seconds)
[05:58:09] <hayley> But I just get my weird 0=true anything else=false logic again without ABS. I can make AND with LOGIOR, but OR and NOT are beyond me.
[06:01:32] <hayley> Ah, only the sign bit actually has the 0/1 value I want. Could work with that.
[06:01:51] <hayley> .oO(But you don't have a sign bit in Common Lisp!)
[06:06:58] <hayley> Well, if I just care for the sign bit, then LOGNOT is NOT, LOGIOR is OR, and LOGAND is AND. Nice!
[06:08:44] <hayley> gilberth: You suppose idiot^Winvestors would be interested in killing off most supply chain attacks on software libraries, by using object capabilities?
[06:13:58] <gilberth> Hmm. sudo rm /usr/bin/sbcl => sudo: command not found # alright then. su -c 'rm /usr/bin/sbcl' => rm: cannot remove '/usr/bin/sbcl': No such file or directory. # Am I cured already?
[06:14:20] <gilberth> hayley: No, I don't believe so.
[06:15:15] <hayley> Oh well, this is why I'm going to go to the startup accelerator thingy I was invited to.
[06:15:55] <hayley> "Do you want to use someone else's left-pad, but without it Bitcoin mining? Then why are you letting it mine Bitcoin, dummy, don't give it those capabilities! That'll be $22,500"
[06:16:45] <hayley> Still, to test the (arbitrary) sign bit in CL I just use MINUSP.
[06:16:56] <gilberth> What's a left-pad?
[06:16:57] <hayley> There isn't a sign bit, but it gets the idea.
[06:17:11] <hayley> You know, the NodeJS library everyone loves to hate.
[06:17:28] <gilberth> No I don't know.
[06:19:00] <gilberth> The LOGxyz operations in CL assume two's complement, so indeed there is no sign bit. I mean (eql -0 0) holds, doesn't it?
[06:19:06] <hayley> Yes.
[06:19:56] <hayley> left-pad just sticks space before a string to make it fit some length. Think ~80@A
[06:20:35] <gilberth> It's a pity that the AMD64 ignores the limit of a segment. On i386 we could otherwise sure play tricks with that for GC or type checking.
[06:21:10] <moon-child> you can still use the base.  And launch yourself into noncanonical zone or w/e
[06:21:25] <gilberth> That famous routine, that caused some trouble, yet everyone used it?
[06:22:08] <gilberth> moon-child: Sure. But that is just an addition.
[06:22:59] <gilberth> However, I still need to figure out how qemu, or virtual box manage to have negative addresses. There must be some way.
[06:23:29] <moon-child> ?
[06:23:38] <gilberth> For just type checking you could still turn alignment checks on.
[06:24:15] <moon-child> you just go below 0 and you get negative addresses.  Or do you mean get the os to map them for you?
[06:24:38] <gilberth> moon-child: Linux's mmap() does not allow me to map addresses with the MSB lit. Yet, when using a VM, I can have them easily. I want that NaNs are valid addresses.
[06:25:10] <gilberth> I am talking about amd64.
[06:25:21] <moon-child> ah, yes, I see.  Traditionally use 'higher half kernel': kernel gets negative addresses, userspace positie ones
[06:25:42] <moon-child> incl. on 32-bit (though there I think people sometimes do 1/3gb split or vice versa, just because space is so tight)
[06:25:52] <hayley> gilberth: It caused trouble _because_ everyone used it.
[06:26:02] <gilberth> Yes, but that is a convention only. And, as I said, those VMs manage to map those addresses for the target.
[06:26:05] <moon-child> 'NaNs are valid addresses'  for nan-tagging?  cute.  I still hate it though :P
[06:26:59] <gilberth> I love that. I proposed the idea the very time AMD64 came out.
[06:27:50] <moon-child> hmm, actually, use a segment for that.  Whose base is such that the nan becomes an address you can map
[06:28:00] <gilberth> JS engines recently had the idea. Even if you can't map those addresses, you still can have unboxed double floating point numbers.
[06:28:42] <moon-child> yeah, js and lua.  But who needs double-precision floats anyway?
[06:28:53] <gilberth> moon-child: How? The base argument of the modify_ldt syscall is 32 bits. Perhaps the other 32 bits hide somewhere else.
[06:29:42] <moon-child> hmm, good point, I don't remember which parts of the 64-bit descriptor tables were extended and which not
[06:29:59] <gilberth> moon-child: I do. All the time as graphics APIs take them these days.
[06:30:05] * hayley plays gmod and someone tries to shoot her just after entering. Fortunately, they cannot aim.
[06:30:37] <moon-child> right.  base is 4 bytes.  I was confusing with int handler address (which is also chopped up)
[06:30:44] <moon-child> gilberth: graphics is 99% single-prec
[06:31:21] <gilberth> moon-child: The Cocoa API wants doubles everywhere. As does Cairo.
[06:31:25] <hayley> Dumb idea: locks stop the processor from going out of order by definition. So could a processor retain out-of-order-ness if it knows it isn't touching memory that other threads would observe OoO on?
[06:32:00] <moon-child> oh, I meant gpu apis.  Don't know anything about cocoa or cairo
[06:32:18] <moon-child> hayley: 'speculative lock elision', I think
[06:32:32] <gilberth> moon-child: Anyhow, since the AMD64 came out, I love this idea. It's however more crucial to JS, as all numbers in JS are doubles --- which isn't a bad move actually.
[06:32:46] <moon-child> >_<
[06:33:05] <hayley> You'd need more coordination from the cache controller logic, I guess. When a cache line is about to be exposed (going Modified -> Shared on MESI?) then, and only then, would it serialize.
[06:33:30] <hayley> moon-child: I'd have to check, but I thought it was more like cheapo transactional memory, than ignoring fences.
[06:33:35] * hayley also hides behind moon-child
[06:34:02] <hayley> http://pages.cs.wisc.edu/~rajwar/papers/micro01.pdf says that it is lock-induced serialization. Thanks!
[06:35:28] <hayley> Wouldn't mind transactional memory, but people seem to fuck that up more than SLE.
[06:37:26] <gilberth> Anyhow, I am surprised that this idea to embed your pointers into the NaN is recently advertised as the best thing since sliced bread. I wonder why it occurred to me immediately and now some 20 years later they discover this trick. What took them so long?
[06:37:57] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[06:38:06] <hayley> IIRC beach's paper on call site optimisation mentioned it was around since the 90s?
[06:38:44] *** Joins: minion (~minion@common-lisp.net)
[06:39:23] <hayley> http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.39.4394&rep=rep1&type=pdf 2.6.2 Using IEEE NaN codes
[06:42:46] <gilberth> Well, would the kernel allow me, the news is that NaNs could be valid pointers as they are.
[06:43:36] <moon-child> what if you NOT the pointer?  Still requires an untagging stage, but less munging involved
[06:44:35] *** Quits: lagash (lagash@lagash.freeirc.org) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:46:50] <gilberth> Sure, that should work. Though I'd rather NOT the float. I will be chasing pointers more often than doing math.
[06:47:05] *** Joins: lagash_ (lagash@lagash.freeirc.org)
[06:47:08] <moon-child> then why do you need nan-boxing?
[06:47:28] <moon-child> (and an aside: if you use nan-boxing, you probably will not have so nice a representation for fixnums)
[06:47:35] <gilberth> Because I do want to be able to pass around double floats without consing.
[06:48:05] <hayley> If you want to JIT everything, you should have no problems making type splitted and unboxed versions of everything.
[06:48:21] <moon-child> consing is not so bad.  And I would rather an efficient int representation, for most purposes
[06:48:36] <gilberth> hayley: Dream on, it won't work.
[06:48:46] <hayley> gilberth: Hey, that's your idea.
[06:49:11] <gilberth> For a different purpose.
[06:49:17] * moon-child steps out
[06:50:43] * hayley wants thread local GC, hardware transactional memory and a pony.
[06:50:48] *** Joins: ln43 (~ln43@user/ln43)
[06:51:15] <ln43> Good morning !
[06:51:45] <gilberth> May I have a hardware with direct support for tagged fixnums, tagged single floats, characters, a handfull of pointer types and doubles in one 64-bit word? This shouldn't cost too many transistors.
[06:52:10] <ln43> yesterday i was looking at an impressive game in assembly...
[06:52:12] * gilberth wants a Porsche and a nice flat in Berlin.
[06:52:14] <moon-child> gilberth: aren't you building that?
[06:52:37] <gilberth> moon-child: Do I?
[06:52:52] <moon-child> weren't you building some cpu out of ttl?
[06:53:31] <gilberth> Yes, I start with a 50s design, though parallel. And only 32 bit.
[06:53:37] <ln43> i would like to partecipate in the cpu building project
[06:54:02] <gilberth> ln43: How good are your SMD soldering skills?
[06:54:24] <ln43> yes general soldering skills are quite good
[06:55:14] <gilberth> General? And SMD? With hot air?
[06:55:27] <gilberth> Though I would probably use an oven.
[06:55:41] <ln43> but anyway, in last days i'm focusing mostly on the gaming sector
[06:56:21] <ln43> simple little games with reduced size and a lot of possibly nontrivial features
[06:56:26] <gilberth> moon-child: Seriously, I would love to extend my design to tag bits. It's word oriented so I can easily go say 40 bit.
[06:57:20] * hayley mentions her wish list in #commonlisp:libera.chat 
[06:57:23] <hayley> "What would you do with a pony?"
[06:57:41] <gilberth> But this will not happen with 50s design.
[06:58:14] <gilberth> hayley: Isn't a pony for riding? As a Porsche but slower?
[06:58:47] <ln43> but the gaming sector is demanding especially for good 3d games with effects like at the cinema...
[06:59:06] <ln43> i mean games for which the people wants to pay something
[06:59:24] <ln43> like a ticket for a film or something more
[06:59:39] <gilberth> ln43: Really? Why does everybody still love Half-Life 2?
[07:00:01] <ln43> let me check for that game, i don't know it
[07:00:15] <gilberth> You're kidding me.
[07:00:37] <ln43> ok, i forgot it
[07:00:49] <ln43> but yes i have alresdy seen the main character
[07:00:55] <moon-child> I played the beginning of half-life 2.  Still need to finish it.  But portal is great
[07:01:23] <gilberth> Portal is just lovely. Both of them Portal and Portal 2.
[07:01:37] <ln43> ok to be a game of the 2004 it was very good for that times
[07:02:01] <ln43> let me find portal
[07:02:17] <moon-child> portal 2 was nice enough, but could not match portal for sheer genius
[07:02:22] <gilberth> ln43: It still is better than most FPS. Cinematic graphics is not everything.
[07:03:04] <ln43> ah ok, now i remember... you already mentioned it time ago 
[07:03:30] <Alfr> hayley, why do you want a pony?
[07:03:49] <hayley> Alfr: Cause I do.
[07:03:58] <Alfr> Hm ... okay.
[07:04:15] <ln43> i was thinking to explre a bit the racing tipology of games
[07:04:15] <gilberth> moon-child: If you love minimalistic games, I could recommend <https://www.osmos-game.com/> Not 3d of any kind, but a nice very simple idea done well.
[07:04:25] <ln43> racing like for car racing
[07:05:20] <gilberth> Alfr: All girls want a pony, though this usually fades with youth.
[07:06:24] <ln43> but a pony is a demanding creature to have in the every day life
[07:06:30] <Alfr> Let me rephrase it then: What do you intend to do with the pony after you have obtained one, hayley?
[07:06:42] <ln43> and for sure require a big garden at least to live well
[07:07:18] <ln43> i like cats personally
[07:07:19] <Alfr> gilberth, I somehow don't believe that merely possessing one is the objective.
[07:08:53] <ln43> in love there is no possession at all... love is a risk mostly if not at 100%
[07:08:56] <ln43> for example
[07:09:05] <gilberth> Alfr: Don't ask me I never got why little girls all want ponies. Perhaps they are considered cute? The ponies, I mean.
[07:09:09] <ln43> love for animals ... yes that was the context
[07:09:39] <ln43> i don't have animals personally but i love them
[07:09:52] <gilberth> I like animals when they are on my plate. Dead. In pieces. And cooked.
[07:10:03] <ln43> xd
[07:11:40] <Alfr> ln43, pity those who you love as at least some of them may end fenced up in your garden. ;)
[07:11:56] <ln43> recently as maybe i told sometime before i'm not eating red meat anymore
[07:12:29] <ln43> but that is a my personal choice to help saving the planet for the future generations
[07:12:39] <ln43> yes, that's all
[07:13:14] <gilberth> My doctor advised me to consume red meat. The redder the better.
[07:13:27] <ln43> Alfr: sadly and unlikely i don't have gardens so beautiful to visit and explore...
[07:14:05] * Alfr scrawls "remember citadel" on a wall.
[07:14:29] <Alfr> ln43, good for prospective ponies then, I guess.
[07:14:52] <ln43> prospective?
[07:15:25] <ln43> ah...ok in the future maybe yes
[07:15:31] <Alfr> ln43, I thought you want one too.
[07:15:34] <ln43> but in another place
[07:15:42] <ln43> maybe a greenland
[07:15:52] <ln43> with sun and wind and fresh water
[07:16:04] <ln43> and grass of course
[07:16:17] <ln43> and hay
[07:16:37] *** Quits: lagash_ (lagash@lagash.freeirc.org) (Quit: ZNC - https://znc.in)
[07:19:28] <ln43> anyway, cheenaging topic i should say that i'm finding interesting exploring other games as a source o learning of new ideas mostly
[07:19:34] <ln43> *changing
[07:20:52] <ln43> now there are really impressive works around... and i was unaware of all 
[07:26:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[07:28:56] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 268 seconds)
[07:38:52] *** Joins: ln43 (~ln43@user/ln43)
[07:39:55] <ln43> but is this build script a bit strange? https://github.com/jaammees/racer/blob/master/build.php
[07:39:55] -ixelp- racer/build.php at master · jaammees/racer · GitHub
[07:41:27] <ln43> i mean starting from line 1 there is only not complete entry tag <?php just to start: why is like that ?
[07:42:49] <ln43> ok anyway looks like it's working but there is a problem with uglifyjs called in that way towards the end
[08:05:12] <hayley> Hm, can I afford CMOV? That's not a branch.
[08:10:10] <ln43> this was the result of my first search for that: http://www.rcollins.org/p6/opcodes/CMOV.html
[08:10:11] -ixelp- CMOV -- Conditional Move
[08:10:38] <ln43> maybe there is a subtle branching logic at the base
[08:11:05] <ln43> as expressed in the Operation: section , or not ?
[08:11:25] <gilberth> Branch to where? Do you see a branch target?
[08:11:46] <ln43> yes the destination register
[08:11:49] <ln43> in that case
[08:11:54] <ln43> at least should be it
[08:12:23] <gilberth> And you jump to the destination register? To do what? Execute it. The 8086 can't execute a register.
[08:14:05] <gilberth> And you want to build a TTL CPU?
[08:15:29] <gilberth> Actually I have seen architectures that could get its next instruction from the accumulator --- or a part of it --- which is kind of clever, if you're single address and have no index registers.
[08:16:02] <gilberth> The CADR is an instance. nvm
[08:16:58] <ln43> cadr: clean air delivery rate ?
[08:17:15] * hayley places pillow between gilberth's head and desk.
[08:17:52] <ln43> ops... i was only trying to find the meaning of that term
[08:19:18] <ln43> ah ok, cadr as intended using CL ... there is no other possibility
[08:19:48] <ln43> wrong?
[08:20:01] <gilberth> hayley: I was down to the kitchen for a moment. Lucky me.
[08:20:39] <gilberth> Anyhow such a facility to somehow get an instruction or a part of one from a register is pure poison for a pipeline.
[08:21:42] <gilberth> ln43: Wrong.
[08:22:09] * hayley now prefers the Rust bindings for PCRE over the C API. Oh no.
[08:22:48] <ln43> and so which CADR are you referring to?
[08:22:53] <ln43> to which
[08:23:09] <gilberth> I was talking about CPU, didn't I.
[08:24:11] <ln43> yes, then i was reading the part: "the CADR is an instance, nvm"
[08:24:20] <gilberth> hayley: Show me a single C API which is not tedious to use. And you actually wrote Rust? You touched it? Are you still sane? Did it hurt?
[08:24:33] <hayley> Yes, yes, I wasn't to start with, deeply so.
[08:24:53] <hayley> It is a pain in the ass. Mostly because the slow but apparently too clever compiler can't help you if you fuck up a regular expression.
[08:25:22] <gilberth> Then don't do that. ;)
[08:25:59] <ln43> yes that is a sad part that is common to many languages unlikely
[08:26:03] <gilberth> ln43: An instance of a CPU. Not a rate.
[08:26:07] <hayley> Well, I still want a comparison for regex performance.
[08:26:23] <hayley> gilberth: Also, the same author implemented Laurikari, and apparently \w{3} takes a second to compile (with Unicode). Thoughts?
[08:26:48] <gilberth> hayley: This is fine, I am just concerned with your mental health. That's all. I'll hope you'll recover soon though.
[08:27:11] <ln43> for example in my case sometimes the error messages by js are a bit cryptic to deciper ...
[08:27:34] <ln43> i mean there is undefined and nothing more to help in the moment of the failure 
[08:27:44] <hayley> I suspect he did not use isums or derivative classes, though obviously he did not use derivatives.
[08:27:51] <gilberth> hayley: What is \w? White space? A second? You didn't miss the milli- prefix, did you?
[08:28:44] <hayley> "Any word-constituent character" according to the Emacs manual.
[08:28:53] <gilberth> Nobody uses derivatives but the two idiots who hang out on this obscure channel.
[08:28:56] <hayley> I did not miss a milli-.
[08:29:08] <hayley> "For example, on my system, compiling \w{3} with byte classes enabled takes just over 1 second and almost 5MB of memory!"
[08:30:00] <gilberth> Puh. And why are you then again concerned about fast Python being slow?
[08:30:25] <hayley> Because the "real" module doesn't use Laurikari.
[08:30:47] <hayley> It uses the "being dumb" approach, which rather off-loads time wasted to matching.
[08:30:53] <gilberth> hayley: What is \w{6} and \w{9}? Is it linear at least?
[08:31:09] <hayley> idk, I don't have it available. Not that I wish to learn it.
[08:32:08] <gilberth> What don't you have available?
[08:32:38] <hayley> The regex-automata library that takes a second to generate a DFA only for \w{3}
[08:33:17] <gilberth> My bad. I got the impression you observed that blazing fast compile time first hand.
[08:33:34] <hayley> I did not.
[08:34:04] <gilberth> Is this what you need a 64-core machine for?
[08:34:27] <hayley> Have you tried to make a DFA with multiple threads? There is literally no reason to, of course.
[08:34:46] <gilberth> Never.
[08:36:16] <gilberth> Rather tell me why yacc(1) is 1000x faster than lalr.cl.
[08:36:42] <ln43> me too... when i was doing dfa using python i was using the single thread by default
[08:37:19] <ln43> larl is a technique
[08:37:23] <ln43> yacc is not
[08:37:42] <gilberth> ln43, get a clue, will you?
[08:38:04] <hayley> 🌞larls🌞
[08:40:04] <ln43> anyway i was surprised by the amount of parsers and hand written compilers found in the game context
[08:40:34] <ln43> yes devted only to solve specific tasks... so special purpose works
[08:40:56] <gilberth> Anyhow this nags me. But the yacc source code is pretty unreadable. It features no comments and uses integers for pointers. Perhaps it was not written in C initially. However both implementations implement the well known LALR(1) algorithm. And 1000x is a lot. I can't imagine it's data structures alone.
[08:42:42] <ln43> try this if you want https://www.dabeaz.com/ply/
[08:42:53] <ln43> i liked the approach he used at that time
[08:43:08] <gilberth> The interesting thing is that RMS stole yacc. You find the very same code verbatim in bison. Still no comments. Untouched. As if this is a black box, which just works, and nobody gets or touches.
[08:43:12] <ln43> and the code is readable, and that is a big point 
[08:44:36] <gilberth> ln43: Why should I read that again?
[08:45:41] <ln43> just to find if it was changed form the last time
[08:46:02] <ln43> any modification, some improvements
[08:47:20] <gilberth> I locked at the lexing part. It's hilarious! A bad joke, really.
[08:47:48] <hayley> gilberth: Some results: https://pastebin.com/z29gDbSt
[08:47:49] -ixelp- [hayley@I-AM-NOT-A-BURNING-BUILDING one-more-re-benchmark]$ perf stat ./log-read - Pastebin.com
[08:47:51] <gilberth> looked, rather.
[08:48:06] <ln43> but ok... i see that the interests discussed in the channels are widespread and that is a good thing
[08:48:06] <hayley> I suspect spotting the [0-9] prefix with SIMD is pretty profitable.
[08:48:33] <hayley> So, if I make the first group [0-9]* to pessimise...
[08:48:48] <ln43> sometimes i find a bit defocusing when i try to understand what people are talking about having no background
[08:49:03] <ln43> and maybe asking every time is not the best option to get help
[08:49:35] <ln43> in try to understand a little bit more, but maybe that is not the main purpose for me
[08:49:48] <gilberth> hayley: Your IPC looks fair, doesn't it?
[08:50:40] <hayley> Yes, 2.5-ish as usual.
[08:52:09] <gilberth> I'd say that's good. And almost no missed branches.
[08:53:17] <ln43> how is it possible miss only few branches?
[08:53:24] <hayley> And with [0-9]* at the start to throw off SIMDification: https://pastebin.com/x4DGsJWP
[08:53:25] -ixelp- [hayley@I-AM-NOT-A-BURNING-BUILDING one-more-re-benchmark]$ perf stat ./log-read - Pastebin.com
[08:54:34] <gilberth> hayley: The "PLY" thing ln43 posted lexes the following way. Read a character at it to the buffer, loop over all rules and try to match the corresponding RE against the buffer. When no match, loop. That sure is fast! This has almost "Build your own Lisp quality." Must be satire too.
[08:54:36] <ln43> ops simd aproach to match  all the digits in a shot?
[08:55:11] <hayley> Yes, you grab some characters in one go, check which are in digit range, then run the DFA only where there are digits.
[08:55:24] <ln43> gilberth: ok, that is only a reading just to start ...
[08:55:55] <ln43> and is not using a bad approach to be honest doing that
[08:56:11] <gilberth> ln43: To start with what?
[08:56:13] <ln43> maybe just a bit not super / extra efficient
[08:56:31] <gilberth> ln43: That approach is a bad joke.
[08:56:45] <hayley> https://www.youtube.com/watch?v=EFmmYg9ck1A
[08:56:45] -ixelp- The Stranglers - Early Demo of Strange Little Girl - CD quality audio - YouTube
[08:57:01] <ln43> bad joke?
[08:57:28] <gilberth> hayley: Is that your actual hostname following the '@'?
[08:57:36] <hayley> Yes.
[08:57:41] <ln43> really nice
[08:58:15] <hayley> https://youtu.be/w6T_X7MXg40?t=235
[08:58:16] -ixelp- Born Under Punches (The Heat Goes On) (2005 Remaster) - YouTube
[08:58:33] <gilberth> hayley: This would be too long for me to type each time I'll ssh in.
[08:59:10] <hayley> I have SSH configured so that I can just "ssh al" to diddle in applied-langua.ge.
[08:59:25] <gilberth> And what is the reference? I mean, who is a building burning or not, anyway?
[08:59:36] <hayley> Right here: https://youtu.be/w6T_X7MXg40?t=235
[08:59:37] -ixelp- Born Under Punches (The Heat Goes On) (2005 Remaster) - YouTube
[08:59:48] <ln43> gilberth: listen that song
[09:01:23] <ln43> i was thinking anyway that the inspiring song was another to be honest
[09:01:47] <ln43> always made by the Talking Heads
[09:02:04] <ln43> anyway it's a good creative choice 
[09:02:08] <gilberth> hayley: I don't get it. But I have trouble actually getting what is sung.
[09:02:28] <hayley> ln43: https://en.wikipedia.org/wiki/The_Name_of_This_Band_Is_Talking_Heads ; no "the" before "Talking Heads"
[09:02:42] <ln43> ah ok
[09:02:49] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[09:03:14] <hayley> gilberth: "I'm not a drowning man! I am not a burning building! I'm a tumbler!"
[09:03:49] <gilberth> Ok. I'll listen again.
[09:04:24] <ln43> if you want of course... it was not a forcing way of saying
[09:04:33] <hayley> Hey, this log-reading test actually has most time spent in the DFA. Nice.
[09:04:58] <gilberth> hayley: Where should it spend its time otherwise?
[09:05:23] <hayley> On smaller tests, it would usually spend time manipulating the result list.
[09:06:04] <gilberth> Really? What is is with that result list?
[09:06:41] <hayley> I'm not sure, just that there were more matches per character on average.
[09:07:23] <hayley> ; 4B75:       43FF24D8         JMP QWORD PTR [R8+R11*8]       ;  74/520 samples
[09:07:36] <hayley> I think SBCL is trying to be nice and made me a lookup table, though I don't want one.
[09:07:51] <gilberth> lol sorry.
[09:10:24] <ln43> but that is the instruction you see when there is a match?
[09:11:28] <gilberth> hayley! PILLOW! Quick!
[09:11:46] <ln43> ops it looks interesting if it was like that. And what does means the part "74/520 samples": is a sampler/counter for the instruction?
[09:12:12] * gilberth 's head plummets onto the desk.
[09:12:19] <ln43> gilberth: ... : ) i was trying to learn something
[09:12:22] <ln43> xd
[09:12:59] <ln43> i was thinking to replace the pillow with an hard brick just to have more fun 
[09:13:22] <ln43> ok, not for you guys... of course  
[09:13:37] <gilberth> Sure, do that. For what it's worth my desk survived.
[09:14:09] <ln43> ok but i have an hard desk...
[09:14:17] <ln43> it should be not a good idea
[09:14:40] <ln43> and then also a glass over the wood...
[09:14:53] <ln43> so not good idea at all
[09:15:06] <gilberth> Hard desk? Are there also floppy desks?
[09:15:44] <ln43> ok but the hardness of the surface is increased by the glass layer
[09:16:06] <ln43> so it depends form the material mostly
[09:16:38] <ln43> i mean a table made in stone for sure is more resistant that another made with wood 
[09:18:40] <gilberth> A lookup table is neither made from stone nor from wood.
[09:19:07] * hayley still has fucking lookup tables after manually isum-ing the output code.
[09:19:18] <ln43> and why is used a lookup table in that case: to store the states of the DFA?
[09:19:47] <gilberth> hayley, there you are. I missed your pillow service. Head hurts, desk ok. Thanks!
[09:19:51] <hayley> Because SBCL thinks it is a good idea to use one for a comparison, when I don't want it.
[09:20:18] <ln43> but sorry: a comparison between what?
[09:20:26] <gilberth> hayley: This is hillarious! I pity you. You could try CMUCL.
[09:20:53] <ln43> CMUCL is really used by someone ?
[09:21:04] <gilberth> Or patch the compiler.
[09:21:13] <gilberth> ln43: http://clim.rocks/
[09:21:14] -ixelp- /
[09:21:25] <ln43> the impression i have is that the big part of CL community is going in the SBCL direction
[09:21:34] <ln43> and maybe there should be some valid reason
[09:21:36] <ln43> for that
[09:22:00] * hayley patches the compiler to disable jump tables
[09:22:34] <hayley> ...and now why are all my branches CMP R9D, 49; JEQ ...; CMP R9D, 50; ... I used CHAR<= for a reason.
[09:22:56] <hayley> Correction: I missed a lot of places to use CHAR<=
[09:23:37] <gilberth> ln43: I am one of the few who don't like SBCL. Never did. Though these days multithreading is working ok.
[09:24:00] <gilberth> hayley: Does it really matter whether you use char<= or <=?
[09:24:13] <hayley> Probably not, but I used CHAR= to start with.
[09:24:59] <gilberth> You said "for a reason".
[09:25:35] <hayley> I used CHAR<= rather than repeated (OR (CHAR= ...) (CHAR= ...)) now.
[09:25:49] <hayley> And now there are no jump tables. Guess I should un-patch SBCL and see if it still behaves.
[09:25:57] <gilberth> Ah. Ok. Got you.
[09:26:01] <hayley> Yep, all good.
[09:26:24] <hayley> ...and it is not noticeably faster than the lookup tables.
[09:26:52] <gilberth> Hmm. Then CPUs have improved in the last 20 years.
[09:27:44] <hayley> Also helps that my test function "linked" with the old code, because I didn't design it to allow someone to diddle the code cache.
[09:27:45] <gilberth> They once didn't predict indirect jumps.
[09:28:44] <hayley> The hottest instruction is the first load which tries to load a digit or . and probably fails most of the time.
[09:29:23] <ln43> hayley: sorry but where is that CHAR<= coming from in your specific case?
[09:29:31] <ln43> or CHAR=
[09:29:36] <hayley> Generated code.
[09:29:49] <ln43> but something written by you?
[09:30:04] <hayley> What part of "generated code" do you not understand?
[09:30:23] <ln43> in which stage is generated that code and by which process
[09:30:39] <hayley> It is generated by the backend of my regular expression compiler.
[09:30:55] <ln43> ok... thank you
[09:32:26] <hayley> Gees, what's the B in JNB stand for?
[09:32:38] <White_Flame> below?
[09:32:42] <hayley> Yes, below.
[09:32:57] <gilberth> Borrow? scnr
[09:33:10] <White_Flame> Jump if not Bentley
[09:33:10] <ln43> and what is doing that CHAR<= expression?
[09:33:17] <hayley> Next question: why did SBCL think to put half of a state at the start of some code, then the other half at the end?
[09:34:12] <gilberth> hayley: Python doesn't like you tonight. Try tomorrow.
[09:34:50] * hayley gets stomped on by a giant foot. A voice from the sky says "And now for something completely different..."
[09:34:54] <ln43> maybe it convert the char to a numerical format and then use <= to check if it's less than something else? 
[09:35:24] <ln43> ok i don't know why that opcode is used for
[09:35:28] <gilberth> hayley! Pillow!
[09:35:37] * hayley places pillow
[09:35:42] <ln43> xd
[09:35:56] <hayley> https://www.youtube.com/watch?v=0hYZaqYCZyQ
[09:35:56] -ixelp- John Cleese - And now for something completely different - YouTube
[09:36:00] * gilberth plummets onto pillow. His head rather.
[09:36:33] * hayley now wonders how everything fares on ARM, but doesn't dare run rustc on a Raspberry Pi.
[09:38:32] <moon-child> 'Rust does not have a GC.  Kernels have been written in Rust.'   What's the relationship?
[09:38:58] <hayley> Therefore Rust sucks?
[09:39:23] <ln43> the relationship depends on the meaning we use for the term kernels 
[09:40:27] <gilberth> moon-child: "Kernels have no GC."? Nah, that's too easy. What's the solution?
[09:40:38] <ln43> used in that context... maybe it was related to not endokernels
[09:40:43] <ln43> maybe exokernels
[09:40:53] <ln43> but it's impossible to be sure
[09:42:21] <hayley> gilberth: Solution: https://dspace.mit.edu/handle/1721.1/122734
[09:43:04] <hayley> "the fraction of kernel CPU time Biscuit spends on HLL features (primarily garbage collection and thread stack expansion checks) ranges up to 13%." idk, thread stack expansion checks sound like a good idea in a kernel.
[09:45:06] <gilberth> But this is about Go not Rust.
[09:45:17] <hayley> That is a kernel with a GC though.
[09:45:43] <hayley> But they had a solution to kernels (as part of operating systems) in 1980.
[09:45:58] <moon-child> C# thing was more interesting than go, if you are going to touch blublanguages
[09:46:22] <hayley> "Operating System: An operating system is a collection of things that don't fit into a language. There shouldn't be one." - Dan Ingalls, Design Principles Behind Smalltalk
[09:46:25] <gilberth> hayley: A pity they didn't use CL though. But that doesn't help me with moon-child's puzzle.
[09:46:56] <moon-child> gilberth: I was being sarcastic.  Clearly my correspondent was implying that kernels can't have gc
[09:47:51] <gilberth> Operating systems have nothing to do with language. The task of an operating system is to coordinate concurrent request for resources like cycles, memory, disks, tapes and printers.
[09:48:37] <gilberth> moon-child: "Can't have" is not the same as "don't have".
[09:49:08] * hayley PARSE-REGULAR-EXPRESSION
[09:49:10] <hayley> #1=#2={ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }[#2#]*#3=.#1##3##1##3##1#/#1#
[09:49:32] <hayley> I left *PRINT-CIRCLE* on. Not complaining.
[09:50:57] <gilberth> Did it improve the code Python generated?
[09:51:02] <hayley> Nope.
[09:51:21] <gilberth> Sure?
[09:51:26] <hayley> Yes.
[09:51:38] <gilberth> What makes you believe that?
[09:51:50] <hayley> Random guess.
[09:51:58] <gilberth> See.
[09:52:20] * hayley uploaded an image: (446KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/skiTfLxJhGbFcktRjzFEMqlW/dfa.png >
[09:52:26] <hayley> That sure is a DFA, I guess.
[09:53:08] <hayley> gilberth: Might be my non-education, but we were taught DFAs just matching one string from start to end, not grepping. So it was more natural to reset the DFA to the next character, rather than making a grep[] machine.
[09:54:04] <gilberth> You're digits are in reverse order. Try flipping them over. Python will then like you again.
[09:54:21] <hayley> Sure.
[09:55:00] <ln43> ok but this exercise is for sure interesting...
[09:55:01] <gilberth> hayley: Well, the DFA still matches a single string. Strictly speaking.
[09:55:14] <hayley> Yes.
[09:55:23] <ln43> mostly it should be like that
[09:55:38] <ln43> now how to match many strings and not only one?
[09:55:52] * hayley takes the pillow back and faceplants
[09:55:56] <gilberth> And we build Mealy automata, not the Moore kind. That makes a difference.
[09:55:57] <ln43> xd
[09:56:35] <hayley> "It's a MeaAAAAAAAAALY machine, it's a mooOOOOOONAD!"
[09:56:58] <gilberth> o_O You're ok?
[09:57:19] <hayley> https://www.youtube.com/watch?v=ed7A7r6DBsM&t=2143s
[09:57:19] -ixelp- The How and Why of Fitting Things Together - Joe Armstrong - YouTube
[09:58:07] <ln43> but is that a minimized DFA or not?
[09:58:37] <ln43> ok it should be convenient in order to reduce the number of states i suppose
[09:59:36] <gilberth> hayley: Is that want of the lectures you attended?
[10:00:09] <ln43> anyway it's funny that today i started from games and now i'm looking at this https://www.amazon.com/Introduction-Automata-Theory-Languages-Computation/dp/0321455363
[10:00:23] <ln43> very good book on that matter and suggested reading
[10:01:28] <hayley> gilberth: No, they don't have Joe Armstrong in lectures.
[10:02:45] <ln43> so bad....
[10:02:49] <ln43> why not?
[10:07:47] * hayley uploaded a video: (1014KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wGzlpHmZGTWXwBSAJojEcavr/it's-a-mooooonad.mp4 >
[10:11:01] <ln43> ah ops, yes i should reread all the theory again
[10:11:39] <ln43> but ok... i like the argument of discussion of this channel 
[10:12:32] <ln43> imho this is one of the most instructive channels that i ever seen
[10:12:53] <ln43> even if sometimes for me is hard follow completely all the discussions
[10:15:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:16:30] <dave0> maw
[10:17:12] <gilberth> Hello dave0!
[10:17:38] <dave0> maw gilberth!
[10:17:50] <dave0> how are you?
[10:18:28] <gilberth> Frankly, I am not doing too well.
[10:18:43] <dave0> oh :-(
[10:18:50] <dave0> i hope you feel better soon
[10:18:59] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 264 seconds)
[10:19:17] <gilberth> I'll do. It'll pass.
[10:20:26] <gilberth> dave0: I found cheap 74F181 SMD parts. They are on their way to me. I bought all 200 available at once!
[10:21:01] <dave0> is that for CADR?
[10:21:36] <gilberth> I am not crazy enough to actually build a CADR. Or perhaps I am.
[10:22:06] <gilberth> Thing is: I don't particular like the design.
[10:22:16] <hayley> Maclisp on a RISC?
[10:22:18] <hayley> MOAR
[10:22:37] <gilberth> It's a MOOOOORAHHH machine!
[10:23:31] <gilberth> hayley: Why not? Memory is cheap these days. And faster.
[10:23:47] <hayley> I'll port SICL to it
[10:26:06] <gilberth> I mean, we could cheat. 512kB 10ns SRAM is like EUR 4.00
[10:27:37] <gilberth> Main memory with the CADR was at 1000ns.
[10:28:29] * hayley writes up another poll
[10:28:34] <gilberth> 74F181 + 74AS882 could add 32-bit numbers in 20ns.
[10:28:53] <hayley> Once people asked "why do you use LibreOffice?" so I said "I'm too broke for Microsoft Office." "But Office is free these days." "Yeah, but still."
[10:29:32] <hayley> So, is this RE engine Hyperscan for poor people, CL-PPCRE 2, re2c but s/C/Common Lisp/, or something else?
[10:29:34] <gilberth> Does it run with Linux?
[10:29:50] <hayley> I used macOS at high school, so a moot point.
[10:30:24] <gilberth> hayley: It's not PCRE. That would be a false label.
[10:30:41] <hayley> It's also not Hyperscan or re2c, but you don't hear gilberth say those.
[10:31:13] <gilberth> You can't actually hear me anyway. :-p
[10:34:34] <hayley> Hm, PCRE's JIT is some 25% faster than mine on the telephone test. But I think I remember my SIMD instructions, so we'll see.
[10:35:05] <hayley> "The JIT compiler uses SIMD for searching characters and character pairs." What, that's only 25% faster? Very funny.
[10:35:56] <hayley> PCRE isn't worth mentioning without the JIT.
[10:36:49] <moon-child> gilberth: yeah but what's the clockspeed of the CADR?
[10:37:58] <gilberth> moon-child: Cycle time is 200ns. Though some cycles are shortened a bit, when I got that right.
[10:38:53] <moon-child> oh, wow, that is worse than I thought (though obviously still much better than modern ones)
[10:49:33] *** Joins: vats (~vats@103.158.91.169)
[10:57:11] <moon-child> hm, cute.  #1='#1# is self-evaluating
[10:57:15] <moon-child> i wonder if there are any others like that
[10:59:15] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[10:59:19] <gilberth> Sure. #1=(progn '#1#) for example.
[11:01:09] <hayley> https://www.youtube.com/watch?v=nPQWHEu_rqQ
[11:01:10] -ixelp- Robert Fripp & The League Of Gentlemen - The League Of Gentlemen (1981) - YouTube
[11:10:48] <gilberth> moon-child: #1=(prog2 '#2=(prog1 '#1#) '#2#)
[11:12:34] <moon-child> ooh, that is cute
[11:14:07] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[11:14:32] <moon-child> too bad there is no progk
[11:15:36] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[11:19:25] <hayley> Oh well, time to measure dicks^Wscanning speed with Hyperscan. WCGW?
[11:24:06] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[11:24:07] *** ChanServ sets mode: +o MichaelRaskin
[11:27:01] <hayley> gilberth: https://intel.github.io/hyperscan/dev-reference/chimera.html PCRE 2
[11:27:02] -ixelp- Chimera — Hyperscan 5.4.0 documentation
[11:33:11] <hayley> Hyperscan seems to produce bla/2, bla/25 and bla/255. Don't ask me what that mask is for IPv4, but it produces "duplicates".
[11:41:47] <hayley> Have I done something wrong, or are all PCRE with JIT, one-more-re-nightmare, and Rust regex faster than Hyperscan?
[12:13:31] *** Joins: pjb (~pjb@user/pjb)
[12:24:21] *** Joins: ln43 (~ln43@user/ln43)
[12:25:39] <ln43> Hi all !
[12:29:43] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 265 seconds)
[12:31:56] *** Quits: vats (~vats@103.158.91.169) (Read error: Connection reset by peer)
[12:33:31] <dave0> hi ln43 
[12:33:46] <ln43> hi dave0, nice to meet you here!
[12:33:54] <dave0> :-)
[12:33:59] <ln43> how are you?
[12:34:11] <ln43> ...fine i suppose, looking at the smile...
[12:34:21] <dave0> i'm having a cup of tea, how's you?
[12:34:40] <dave0> yep just winding down on sunday :-)
[12:35:53] <ln43> i already have done breakfast today... basically cappuccino and coffee
[12:37:18] <dave0> nice
[12:37:39] <dave0> i got some decaf cuppacino satchels for visitors
[12:37:59] <ln43> and nothing, i was looking this code (https://github.com/jaammees/racer/blob/master/js/track.js) and trying to figure out where some awesome js's constat (SPRITES_*) were defined
[12:38:46] <ln43> it's a puzzle... i should guess something hopefully
[12:39:33] <ln43> can you help me in this understanding process?
[12:39:45] <dave0> me?
[12:40:03] <ln43> ok, if it's possible
[12:40:11] <dave0> the only javascript i ever did was show a picture of taylor swift :-p
[12:40:30] <dave0> i only know c
[12:41:41] <ln43> yesterday i was looking at this: https://github.com/phoboslab/q1k3/blob/master/pack_map.c
[12:41:41] -ixelp- q1k3/pack_map.c at master · phoboslab/q1k3 · GitHub
[12:43:01] <ln43> anyway i should try to find something googling possibly
[12:46:01] *** Joins: pjb (~pjb@user/pjb)
[12:50:52] <ln43> and that is strange since those names are not reported into the constants.js files...
[12:50:54] <dave0> that code looks nice and clean
[12:51:06] <ln43> C code?
[12:51:11] <dave0> yep
[12:51:23] <dave0> q1k3 does that mean quake?
[12:51:34] <ln43> yes something like that
[12:58:18] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 260 seconds)
[13:22:37] <sham1> dave0: using Javascript to show a picture of Taylor Swift is better than what most things use it for
[13:27:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[13:28:06] <contrapunctus> > using JavaScript to show a picture
[13:28:13] * contrapunctus looks at sham1 
[13:28:35] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/UdltfSPWsHjJNrWYpOsJLzAE/randall-smith.jpeg >
[13:36:16] <sham1> contrapunctus: still better than a lot of other usages
[13:37:11] <contrapunctus> Images not loading without enabling JS is one of the many, many pains of being a Tor Browser/NoScript user.
[13:37:44] <sham1> Well yes, obviously one shouldn't do it, but that tells more about the state of JS usage than anything else ;)
[14:21:38] <hayley> Well, it helps that my log has timestamps on every line, so trying to look for a digit would give so many false starts.
[14:22:08] <hayley> In other words, the entropy of one digit is shittily low.
[14:27:56] <dave0> cut -c11- file.txt | grep '[0-9]'
[14:28:22] <dave0> oh that's not lisp
[14:31:01] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[14:32:27] <hayley> But Hyperscan is also slower when I have an easy " " around something (looking at resolutions in Xorg logs).
[14:43:26] *** Joins: ln43 (~ln43@user/ln43)
[14:44:15] <ln43> Now i wastrying to figure out if there is any advantage/disadvantage and what they are related the usage of the canvas (2d) api vs webgl
[14:44:24] <ln43> i mean when use one and when use the other
[14:44:51] <ln43> but ok, i should see if close-pixelate is still supported
[14:46:14] <ln43> that only to show the possibilities of course
[14:46:32] <ln43> otherwise processing.js
[14:46:49] <ln43> -discontinued : (
[14:47:15] <dave0> sham1: https://paste.c-net.org/BoundTheater
[14:48:19] <ln43> easeljs ?
[14:48:51] <ln43> ok now i go to lunch, bye!
[14:48:59] <dave0> byes ln43 
[14:53:34] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 260 seconds)
[14:58:17] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:17:03] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[15:17:25] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:25:14] *** Joins: ln43 (~ln43@user/ln43)
[15:26:04] <ln43> omg...what a wonderful game...https://store.steampowered.com/app/516750/My_Summer_Car/
[15:26:05] -ixelp- My Summer Car on Steam
[15:26:22] <ln43> ok but the graphics it's s little bit complex to obtain
[15:27:55] *** Joins: pjb (~pjb@user/pjb)
[15:37:51] <ln43> hot wheels unleashed it's only graphics in comparison or not?
[15:38:18] <ln43> without a story, without pathos
[15:39:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:40:00] *** Joins: notzmv (~zmv@user/notzmv)
[15:40:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[15:55:06] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 260 seconds)
[16:02:38] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:54:48] *** Joins: ln43 (~ln43@user/ln43)
[16:56:15] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:57:24] <ln43> https://www.youtube.com/watch?v=tp1g5NMihhU
[16:57:24] -ixelp- Weekend Jazz ❤️ Smooth Jazz Music for Having an Awesome Weekend! - YouTube
[16:59:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:05:31] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 268 seconds)
[17:23:36] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:36:00] <dave0> nite all
[17:36:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:36:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:38:39] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[17:56:41] <contrapunctus> So someone shared this - https://www.cnx-software.com/2021/11/18/save-the-planet-program-in-c-avoid-python-perl/
[17:56:41] -ixelp- Save the planet! Program in C, avoid Python, Perl - CNX Software
[17:58:21] <contrapunctus> Wondering what Lisp they were talking about, I searched through the original PDF for "lisp"...and there's no mention of it. 🤔️
[17:59:03] <contrapunctus> And they call it "functional", and categorize it as a "VM" implementation rather than "compiled"...what's going on?
[17:59:07] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[18:10:27] <Gnuxie> the paper was dumb but the editorialized article is dumber 
[18:12:12] <Gnuxie> it's also not really useful to use this in the context of climate and so on because this is all probably nothing in comparison to what it takes to produce a CPU
[18:57:17] <shka> https://www.youtube.com/watch?v=GIGlQBx4tys
[18:57:18] -ixelp- The Insane Engineering of the Thunderscreech - YouTube
[18:57:33] <shka> supersonic prop :D
[19:04:36] *** Joins: pjb (~pjb@user/pjb)
[19:21:34] *** Joins: ln43 (~ln43@user/ln43)
[19:45:15] <moon-child> I think the more pertinent point is that bitcoin is written in c++
[19:45:37] <moon-child> 'it's not about what you've got, it's about how you use it'
[19:46:19] <ln43> yes that is fully true
[19:46:53] <ln43> it's like the canvas api i was trying to look at right now ... maybe it was not written in js ...
[19:47:52] <ln43> for example here https://html.spec.whatwg.org/multipage/canvas.html#canvasimagesource
[19:49:26] <ln43> at least i suppose even if i'm not fully sure
[19:51:48] <moon-child> i thought canvas is basically postscript?
[19:52:13] <sham1> Not enough RPN for that, sadly
[19:52:39] <sham1> And no, not really. It's more just your standard graphics context with lines and such
[19:53:02] <sham1> Of course postscript also has that
[19:57:00] <gilberth> Good morning #lispcafe!
[19:58:41] <gilberth> It's PS in the same way as Cocoa is PS or Cairo is PS. PostScript was first to propose this kind of API and all other followed with time.
[20:00:24] <gilberth> Hence it's not that PS follows a standard, but the standard follows PS.
[20:03:49] <ln43> Hi gilberth, good morning to you too
[20:06:16] <ln43> and now i can't load an image too to scan the pixels...
[20:06:19] <ln43> https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
[20:06:20] -ixelp- Allowing cross-origin use of images and canvas - HTML: HyperText Markup Language | MDN
[20:06:29] <ln43> mmh
[20:12:32] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 240 seconds)
[20:24:48] *** Joins: dra (~dra@2a04:4540:6413:d500:cc20:68a7:2f44:5329)
[20:24:52] <dra> Hello!
[20:25:10] <sham1> Hello
[20:37:16] <gilberth> I am at a loss. For one I want an s-expression form of C ASTs, for another I want an reasonable s-expression version of C. I cannot have both. My major concern is that C has this funny inside-out syntax for declarations. An AST which would be as close as possible to C as is, would need to parse "int x, *y, **z = 0, *w[10];" as (var :int x (* y) (= (* (* z))) 0) (:pointer (:array w 10)))
[20:38:34] <gilberth> While for a usable s-expression version of C I'd rather would like to have (var (x :int) (y (* :int)) (z (* (* :int))) (w (:array (* :int)))
[20:38:37] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[20:38:55] <moon-child> I would canonicalize into multiple declarations.  (progn (var x int) (var y (* int)) (var z (* (* int)) :init 0) (var z (array (* int) :length 10)))
[20:40:09] <gilberth> Especially the "int *w[10]" may harm your brain. The AST for C says (* (:array w 10)) to declare an array of pointers. I'd rather have an (* (:array 10)) type. That is: C syntax is inside-out in this regard.
[20:40:38] <sham1> (setf (deref (deref z)) 0) or something like that
[20:40:48] <sham1> Although since that's a variable declaration it'd be
[20:41:05] <moon-child> gilberth: try  int *(*w[10](int)) on for size
[20:41:05] <gilberth> moon-child: My problem is that I want two things at once. An AST for C and a reasonable s-expression version C.
[20:41:15] <sham1> (define (pointer (pointer int)) z :value 0) or something like that
[20:43:08] <contrapunctus> Does this apply to something like SBCL/Common Lisp in general? "when we're talking modifying code at runtime something which deserves the name VM or JIT is involved"
[20:45:03] <moon-child> VM means virtual machine, and a virtual machine requires a virtual architecture.  I don't think sbcl has such a thing
[20:45:12] <gilberth> moon-child: Exactly. That declaration hurts my brain. The thing is in C this declares 'w' so that *(*w[10])(<some-int>) as an expression would yield an int. Or as s-expression (pointer-deref (funcall w (pointer-deref (aref w <someindex>)) <someint>))
[20:45:21] <Alfr> contrapunctus, only if assembly involves a vm as well; you certainly can write self modifying code in it (w/ varying usefulness).
[20:48:04] <gilberth> moon-child: So the AST of that would be (declare :int (* (function (* (array w 10) (:int))))), while a workable syntax would be (declare w (:array (* (function (* :int) (:int)))) or sth like that. Note that I probably didn't get this right.
[20:48:10] <contrapunctus> moon-child, Alfr: I see...so would it be considered a JIT compiler?
[20:48:43] <gilberth> Trouble with C's inside-out also is that this would make writing [lisp-like] macros tedious at best.
[20:48:48] <sham1> declare w as an array 10 of pointer to function that take as an argument an int and return a pointer to int
[20:49:43] <moon-child> gilberth: since 'function' is not a first-class type ('object' type) in c, I would prefer (function-pointer ...) to (* (function ...)), and accept the annoyance of translating at the edges
[20:50:16] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:50:24] <gilberth> moon-child: There is syntax for functions: "extern int foo (void);"
[20:51:21] <moon-child> indeed!  But while you can say 'int (*f)() = ...', you cannot say 'int f() = ...'.  Though you can say 'typedef int f(); f g;' as equivalent to 'int g()'.  
[20:51:59] <moon-child> so I would maybe treat function pointers as pointers to functions on the first-level AST form, but distinguish them later.  Maybe that is the wrong approach, though
[20:52:49] <gilberth> moon-child: You can say "int f() = ...;" It's legal syntax.
[20:53:16] <sham1> You can also do stuff like typedef int foo(int) and now foo *bar is a pointer to a function that takes an argument of int and returns an int
[20:53:25] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 250 seconds)
[20:53:26] <Alfr> contrapunctus, maybe, if someone implements one in it (I personally don't think that this would be a reasonable task tough). But what's the reason for this line of inquiry?
[20:53:26] <moon-child> syntax yes, but it's not semantically correct ever.  Because functions are not objects, so you cannot assign them
[20:54:22] <contrapunctus> Alfr: someone said that, and I wondered how accurate it was. They don't know much about Lisp, and nor do I (at least, not about how it's implemented).
[20:54:35] <sham1> Well not all syntactically valid programs are valid semantically
[20:54:37] <Alfr> moon-child, on any non-ancient x86 you could argue that the microcode does provide a vm.
[20:54:38] <gilberth> For function pointers C is funny. As given "int (*f)(int)" the expression "f(10)" would technically try to invoke a function pointer, which you can't, you invoke functions. So it should be (*f)(10) -- which I usually write. As well as f = &somefun;
[20:55:03] <gilberth> It's only that C compilers are forgiving here and threat function pointers in this context the same as functions.
[20:55:22] <sham1> The standard makes it convenient for you, by automatically converting between functions and pointers to functions as necessary
[20:55:35] <sham1> It's not just a compiler thing, it's very much a standard thing
[20:56:06] <moon-child> sham1: doesn't a compiler have to do what the standard says? :)
[20:56:17] <sham1> Yes
[20:56:25] <sham1> And thus every compiler that claims compliance does this
[20:56:27] <gilberth> sham1: Sure. But note that I talk about syntax. And the type of 'f' is still a pointer to a function.
[20:56:58] <sham1> Syntactically f is just an expression you call
[20:57:09] <sham1> The distinction is done at semantic analysis
[20:57:14] <gilberth> This is a bit like with arrays. You say 'int a[10]', yet the type of 'a' as expression is a pointer to ints.
[20:57:42] <gilberth> sham1: Exactly. This is what I said. It's the compiler allowing you to invoke pointers.
[20:58:12] <shka> breaking up  dependency chains is kinda a bitch
[20:58:22] <sham1> But it's not a compiler-specific behaviour though, that's the point
[20:58:24] <moon-child> gilberth: 'type of "a" as expression is a pointer to ints' depends on context.  E.G. not in sizeof,alignofas etc.
[20:58:55] <sham1> Yeah. int a[10] is very much not a pointer to int
[20:59:07] <gilberth> moon-child: Yes. I should have said: "As an expression to be evaluated." Or as an rvalue.
[20:59:31] <moon-child> c has not rvalues!  Only c++.  Actually c++ has I think 3 or 4 types of rvalues
[20:59:37] <gilberth> It's more like its silently coerced to an int pointer in rvalue context.
[21:00:16] <gilberth> moon-child: C has lvalues.
[21:00:33] <moon-child> yes.  lvalues but no rvalues
[21:00:36] <moon-child> l stands for 'location'
[21:00:46] <gilberth> There is a distinction. (int)x = 10 is not allowed. e.g. (int)x is an rvalue, but not an lvalue.
[21:00:51] <sham1> place
[21:01:04] <gilberth> Yep, what we call a place.
[21:01:26] <gilberth> It doesn't matter if C calls non-lvalues rvalues or not. There is a distinction.
[21:01:27] <random-nick> I thought lvalue and rvalue took their names from the assignment expression
[21:01:42] <sham1> It does
[21:01:43] <moon-child> random-nick: in c++ it's 'left' and 'right'.  In c it's 'location'
[21:01:47] <gilberth> left and right. yes.
[21:03:40] <gilberth> Anyhow. I believe the most sane thing to do for is to have both. An AST which as closely C as possible. And a language you may want to work with that could get got from that AST or transformed to that.
[21:04:01] <gilberth> Perhaps the AST won't be an s-expression at all.
[21:04:34] * gilberth writes garbled sentences again.
[21:04:54] <sham1> What are you trying to do here, out of curiosity
[21:05:54] <gilberth> Multiple things. Source to source transformation of C, my FFI, I have, and writing C code with s-expressions.
[21:06:57] <gilberth> That's all bits and pieces that I would need get into some orderly shape.
[21:07:11] <sham1> Intriguing. Having a "C with s-expressions" sounds like such an oft-done idea but I really have no idea how many implementations there actually are
[21:07:34] <gilberth> idk.
[21:08:39] <gilberth> What there isn't though is a working C parser. One that you could throw real C header files at.
[21:09:26] <sham1> Often one would just use FFI and call libclang
[21:10:14] <gilberth> libclang is garbage. It doesn't give you an AST.
[21:10:39] <gilberth> And it didn't exist in 2000.
[21:11:06] <sham1> I think the former point is incorrect. But the latter, yeah
[21:11:45] <gilberth> There is some crucial information missing from what libclang gives you. It's meant as an xref tool, or etags, if you whish.
[21:12:36] <sham1> It is certainly enough for language servers, but I suppose if you need *everything* then you'd indeed need to lex and parse C yourself
[21:12:52] <gilberth> sham1: I recently looked into libclang pretty closely. And faced show-blockers. Some information is just missing.
[21:13:08] <sham1> Hm, fair enough
[21:13:26] <gilberth> sham1: And a C parser is what I have. Since ages.
[21:14:37] <gilberth> And about those #pragma's people warned me about. There is only one: #pragma packed. And it is well enough specified. No trouble.
[21:14:56] <sham1> So now you'd want to turn it to some kind of a sane AST from what I've gathered
[21:15:05] <sham1> Not even #pragma once?
[21:16:10] <gilberth> There is. But I can safely ignore that.
[21:17:13] <gilberth> I made my parser able to handle duplicate typedef's by backtracking. No harm done.
[21:18:02] <gilberth> sham1: Yes. And I want an s-expression syntax to actually work with. I'd split those two things.
[21:19:42] <gilberth> I am also not concerned about Windows. Someday I may want a Windows backend for my CLIM and would face Windows header files. But: Microsoft's documentation is pretty complete and good; thus I don't expect any surprises. And when in doubt I could always look at gcc sources.
[21:21:06] <gilberth> The major headache is to get at the include path, but I just shell out to 'cc -E' to get at system headers.
[21:21:37] <gilberth> This is worse with Macos, as there is no /usr/include anymore.
[21:25:51] *** Joins: pjb (~pjb@user/pjb)
[21:42:03] <shka> https://www.youtube.com/watch?v=fQNxPxYzblo
[21:42:04] -ixelp- Chromatic Fugue in D Minor - YouTube
[22:08:25] *** Joins: rogersm (~rogersm@90.166.177.48)
[22:13:43] <selwyn> ffi to winapi was actually quite pleasant due to com and the good windows documentation
[22:14:03] <selwyn> which is another reason why i don't mind developing on windows with common lisp
[22:14:46] <selwyn> deployment hell is often much worse on linux than windows, as shinmera will tell you
[22:20:56] <gilberth> OK. I always tried to have C types in the AST. I believe that is an error in thinking.
[22:28:00] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[22:33:40] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:34:13] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[22:36:41] <shka> finally the perfect computer case https://www.youtube.com/watch?v=KJy7Jmpxc4w
[22:36:41] -ixelp- I Built a Computer... but it's different - YouTube
[22:38:18] <shka> form factor? A HOUSE
[22:38:56] <selwyn> gerald the mouse ought to move there
[22:40:51] <shka> selwyn: "kernel panic, not enough cheese"
[22:41:12] <selwyn> https://www.youtube.com/watch?v=FPMXt9Me_Fo
[22:41:13] -ixelp- Pink Floyd - "Bike" - YouTube
[22:44:04] <selwyn> considering making a terrarium
[22:44:33] <selwyn> https://www.youtube.com/watch?v=7Lg4tzkHgVo&t=2s
[22:44:34] -ixelp- Making a Bottle Terrarium + Closed Terrarium Basics - YouTube
[22:49:44] <selwyn> the castle computer video reminded me about terrariums through this https://www.youtube.com/watch?v=usXRjOCKhqA
[22:49:44] -ixelp- Did the Terrarium Computer Desk Survive? (1 Year Update) - YouTube
[22:51:05] <selwyn> terrariums seem like a more interesting less maintenance version of fish tanks
[22:52:06] <selwyn> cause you can have a whole ecosystem in there without having to e.g. change a filter regularly
[23:04:16] <selwyn> https://www.youtube.com/watch?v=8XYviT_l29U
[23:04:16] -ixelp- Meditating with Conan in Conan the Destroyer [ambience] - YouTube
[23:04:21] <selwyn> vocabulary revision soundtrack
[23:12:36] <shka> hmmm
[23:13:32] <shka> breaking dependency chains on my fill-split-vector function does not yield performance improvements 
[23:18:43] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0) (Quit: Leaving)
[23:34:42] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:35:24] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892)
[23:36:20] *** Quits: pjb (~pjb@user/pjb) (Killed (lithium.libera.chat (Nickname regained by services)))
[23:37:01] *** Joins: pjb (~pjb@user/pjb)
[23:54:48] *** Joins: aeth_ (~aeth@user/aeth)
[23:54:59] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[23:56:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[23:59:29] *** aeth_ is now known as aeth
