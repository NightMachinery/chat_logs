[00:00:24] <FUZxxl> what?
[00:00:33] <FUZxxl> I don't understand the question.
[00:00:40] <FUZxxl> You can test whatever function you want.
[00:01:18] <LTCD> Even if I made one called WhatTheDucklings()
[00:01:38] <FUZxxl> I don't understand still.
[00:01:55] <FUZxxl> the testing infrastructure looks for functions named Test...(*testing.T) and wires them up
[00:02:02] <FUZxxl> inside these functions you can test whatever you like
[00:02:07] <FUZxxl> fuzzing works the same way
[00:04:27] <LTCD> Okay. Where is the online go doc?
[00:04:37] <ikke> for packages?
[00:04:41] <ikke> pkg.go.dev
[00:05:03] <FUZxxl> https://pkg.go.dev/std
[00:05:12] <ikke> https://golang.org/doc/
[00:05:15] <FUZxxl> though I really liked the old design more
[00:06:06] <lungaro> LTCD, see "go help test" and search for "writing tests in go" on your favorite search engine
[00:15:05] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 264 seconds)
[00:23:09] *** Joins: CoolerX (~CoolerX@user/coolerx)
[00:25:58] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[00:25:59] *** Quits: gildarts (16abab341f@user/gildarts) (Remote host closed the connection)
[00:26:07] *** Joins: gildarts (16abab341f@user/gildarts)
[00:28:37] <CoolerX> Hi
[00:28:44] <CoolerX> I am having some issue with bufio.Scanner
[00:28:49] <FUZxxl> ok
[00:28:59] <CoolerX> I start a process and scan the stdout
[00:29:11] <CoolerX> it splits on lines
[00:29:22] <CoolerX> for very long lines it just freezes
[00:30:19] <CoolerX> I think it's this issue https://stackoverflow.com/questions/39859222/golang-how-to-overcome-scan-buffer-limit-from-bufio
[00:30:41] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[00:30:43] <CoolerX> there's an internal buffer apparently of size 64k
[00:31:01] <CoolerX> the solution seems to be to increase the buffer size
[00:31:50] <CoolerX> is it really necessary to do that? won't we run into the same issue with even larger lines?
[00:32:17] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[00:32:32] <CoolerX> isn't it better to just have a fixed size buffer and consume the data in the buffer and clear it?
[00:33:00] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:34:46] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[00:35:47] <fizzie> It does suggest mostly that right in the bufio.Scanner docs: "Programs that need more control over error handling or large tokens, or must run sequential scans on a reader, should use bufio.Reader instead."
[00:35:47] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 240 seconds)
[00:35:51] <fizzie> But it's not that easy to process partial lines in all situations. Depends on what they mean.
[00:36:01] *** Joins: mambang[m] (~mambang@user/mambang)
[00:36:10] <CoolerX> hmm
[00:36:25] <CoolerX> for myusecase it could be ok to split large lines
[00:36:31] <CoolerX> I am just printing to console
[00:36:34] <CoolerX> logs
[00:38:15] <b0nn> how big is a line that exceeds 64k?
[00:38:57] <FUZxxl> b0nn: at least 65537 bytes
[00:39:02] <fizzie> (FWIW I wouldn't have expected "just freezing" as a symptom: it's supposed to return bufio.ErrTooLong if a token doesn't fit in the maximum size limit.)
[00:39:17] <FUZxxl> probably poorly written code
[00:39:33] <FUZxxl> CoolerX: can you make a minimal example and post the code?
[00:39:44] <FUZxxl> it's hard to diagnose this issue without being able to reproduce it.
[00:40:43] <CoolerX> b0nn, in my case I fmt.Printf("object %+n", object)
[00:40:50] <CoolerX> it's a large object
[00:40:56] <CoolerX> with arrays and fields
[00:41:07] <CoolerX> b0nn, in my case I fmt.Printf("object %+v", object)
[00:41:17] <FUZxxl> scanner is meant for tokenization
[00:41:25] <FUZxxl> if the tokens can be very long it might not be the right choice
[00:41:29] <CoolerX> sure
[00:41:57] <CoolerX> The actual intention is to print each line of the output as you get it
[00:42:05] <CoolerX> from the other process
[00:42:21] <CoolerX> splitting lines should be ok
[00:42:34] <CoolerX> splitting large lines into small chunks should be ok
[00:42:53] <FUZxxl> is it important to do whole lines at a time?
[00:43:05] <FUZxxl> I mean you could just do io.Copy ...
[00:44:18] <CoolerX> yeah the process using logrus to print so it has a prefix DEBU[0000] foo bar
[00:44:28] <CoolerX> INFO[0000] some info
[00:44:40] <FUZxxl> ok
[00:44:47] <FUZxxl> so you just want to insert this prefix every newline
[00:44:48] <CoolerX> and the parent process scans each line, uses a regex to get the log level
[00:44:55] <FUZxxl> (wtf)
[00:44:56] <CoolerX> and then print it again with the same log level
[00:45:03] <FUZxxl> I mean ... I guess ...
[00:45:14] <CoolerX> so it's mainly for matching the original log level
[00:45:24] <FUZxxl> you could just do a Read(), scan for newlines ('\n') and then write chunks between newlines
[00:45:58] <CoolerX> FUZxxl, I think that's what the bufio.Scanner is doing
[00:46:41] <FUZxxl> CoolerX: kinda, but I think it's better to model your application as a filter as opposed to a tokenizer
[00:46:45] <CoolerX> https://pkg.go.dev/bufio#Scanner.Split
[00:46:59] <CoolerX> FUZxxl, as a what?
[00:47:11] <CoolerX> you mean like tr ?
[00:47:15] <FUZxxl> because tokenizers really don't like long tokens
[00:47:30] <FUZxxl> kinda, except you replace \n with \nINFO[000]
[00:47:35] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:d8ff:b4ab:413e:d5fb) (Quit: Client closed)
[00:48:18] <CoolerX> uh
[00:48:29] <CoolerX> what would that do?
[00:48:44] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[00:48:52] <FUZxxl> solve your program
[00:48:54] <FUZxxl> *problem
[00:49:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[00:49:03] <CoolerX> then you end up with \nINFO[0000]INFO[0000]
[00:49:05] <FUZxxl> you want to insert INFO[0000] at the beginning of each line
[00:49:08] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[00:49:09] <FUZxxl> or so it seems
[00:49:15] <CoolerX> FUZxxl, no
[00:49:58] <FUZxxl> ok
[00:50:05] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Changing host)
[00:50:05] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[00:50:15] <CoolerX> the parent process scans a line from the child process, then it uses a regex to find out the prefix, finds the correct logrus function using the prefix, uses that logrus function to log that line to console
[00:50:31] <FUZxxl> ok
[00:50:42] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[00:50:50] <FUZxxl> well if you must pass it through logrus again
[00:50:55] <FUZxxl> I guess you'll have to tokenize
[00:51:06] <FUZxxl> alternative solution: write a splitter function with a max line length
[00:51:12] <FUZxxl> longer lines get chopped up into shorter ones
[00:51:20] <CoolerX> idk about "must" it's the logging library we are using
[00:51:46] <FUZxxl> the main problem is that if you want to be able to process lines of arbitrary length like this,
[00:51:51] <FUZxxl> you must be able to store them in memory
[00:52:04] <FUZxxl> so potential memory usage is unbounded which doesn't sound like a good thing
[00:52:49] <CoolerX> yeah
[00:53:22] <CoolerX> especially since the objects that get printed out are often user uploaded stuff
[00:54:16] <FUZxxl> either chop the lines into pieces or truncate long lines
[00:54:24] *** Quits: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:54:40] <FUZxxl> or find a way to circumvent having to store the whole line in memory
[00:54:54] <CoolerX> bufio.Reader
[00:55:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:56:23] *** Joins: jespada (~jespada@2803:9800:9842:7a62:4d47:2975:7b31:a447)
[00:59:54] *** Quits: sneak (~sneak@datavi.be) (Quit: ZNC 1.7.5 - https://znc.in)
[01:06:12] *** Joins: k0ta (~k0ta@151.210.174.174)
[01:09:20] *** Joins: sneak (~sneak@datavi.be)
[01:09:41] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 264 seconds)
[04:57:14] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[04:57:40] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[04:57:40] *** neurocyte0136 is now known as neurocyte013
[04:58:00] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:58:21] *** Server sets mode: +Ccnt 
[05:00:28] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[05:03:40] *** Joins: Ergo^ (~ergo@91.238.59.144)
[05:05:43] *** Joins: califax- (~califax@user/califx)
[05:09:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:09:22] *** califax- is now known as califax
[05:11:04] *** Joins: kiril (~kiril@85.91.153.163)
[05:13:45] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[05:15:48] *** Joins: darkapex_ (~darkapex@user/darkapex)
[05:16:44] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 246 seconds)
[05:20:13] *** Quits: nightBulb (~nightBulb@117.242.131.74) (Ping timeout: 252 seconds)
[05:20:50] *** Joins: adlternative (~adl@117.32.216.71)
[05:21:44] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[05:21:49] *** Joins: nightBulb (~nightBulb@117.242.131.74)
[05:21:57] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[05:23:51] *** Joins: c10l6 (~c10l@user/c10l)
[05:25:28] *** Quits: nightBulb (~nightBulb@117.242.131.74) (Client Quit)
[05:25:43] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Client Quit)
[05:27:26] *** Quits: gravelch (~gravelch@36.73.154.142) (Quit: Lost terminal)
[05:27:35] *** c10l6 is now known as c10l
[05:27:37] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[05:36:02] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1001) (Quit: ZNC 1.8.2 - https://znc.in)
[05:38:55] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:41:49] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Remote host closed the connection)
[05:54:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[05:56:28] *** Joins: fikran (~fikran@user/fikran)
[06:06:49] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:07:38] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[06:11:54] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[06:13:06] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:696d:855f:fef9:6632) (Quit: Client closed)
[06:26:02] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[06:51:48] *** Joins: frost (~frost@59.71.243.104)
[06:54:39] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:54:59] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:57:14] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[07:00:17] *** Joins: yoonkn (~user@175.197.208.79)
[07:04:14] <Seirdy> to make a reproducible go binary, it seems that running "go clean -cache" and setting the flags "-trimpath -gcflags=-trimpath=$GOPATH/src -asmflags=-trimpath=$GOPATH/src", disabling CGO, and using the same toolchain installed at /usr/local/go isn't enough; my hashes still differ. Do I have to make sure that my homedir or GOPATH are also identical?
[07:05:09] <Seirdy> oh and i set "-buildid=" in my go ldflags
[07:08:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[07:09:59] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:10:11] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[07:13:55] *** Quits: artifishul (~nate@162.218.217.134) (Quit: Leaving.)
[07:16:35] <A_Dragon> you might need to set buildid to something specific, Im not sure
[07:25:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:25:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:25:20] *** Joins: wroathe (~wroathe@user/wroathe)
[07:27:53] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[07:35:19] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[07:38:03] <Seirdy> full invocation: https://termbin.com/adq7
[07:42:44] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[07:42:47] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[07:56:11] *** jpw_ is now known as jpw
[07:57:59] *** Joins: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca)
[08:04:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[08:05:51] *** Joins: fikran (~fikran@user/fikran)
[08:06:15] <Seirdy> i figured it out; my GOPATH had to be the same. apparently the trimming shown above did *not* do the trick
[08:08:17] <Seirdy> is there a way to get byte-for-byte reproducibility with a different GOPATH?
[08:15:14] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[08:16:27] <Seirdy> wait, are -gcflags=-trimpath and -asmflags=-trimpath even necessary when using plain -trimpath?
[08:17:51] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[08:18:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:18:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:18:42] *** Joins: wroathe (~wroathe@user/wroathe)
[08:18:58] *** Quits: LiftLeft (~LiftLeft@172.98.92.58) (Ping timeout: 252 seconds)
[08:19:21] <Seirdy> i just checked, it doesn't make a difference
[08:20:09] <Seirdy> yup, it's GOPATH.
[08:20:40] <Seirdy> changing gopath still changes the build hash even with the build-id being set to a deterministic value and -trimpath
[08:28:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:30:36] *** Quits: iluxa (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[08:31:16] *** Joins: iliaf (~iliaf@user/iluxa)
[08:32:29] *** Joins: chasmo77 (~chas77@71.63.241.168)
[08:41:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:43:08] *** Joins: LiftLeft (~LiftLeft@172.83.47.119)
[08:43:32] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: Ping timeout (120 seconds))
[08:43:45] *** Joins: pgloor (~petergloo@mix.cubus.space)
[08:43:56] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[08:44:23] *** Quits: Disconsented (~quassel@107.170.227.20) (Ping timeout: 252 seconds)
[08:44:36] *** Joins: Disconsented (~quassel@107.170.227.20)
[08:44:39] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 265 seconds)
[08:44:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:44:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:44:52] *** Joins: wroathe (~wroathe@user/wroathe)
[08:47:41] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Ping timeout: 252 seconds)
[08:47:41] *** Quits: sneak (~sneak@datavi.be) (Ping timeout: 252 seconds)
[08:47:41] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (Ping timeout: 252 seconds)
[08:47:41] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 252 seconds)
[08:47:52] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[08:47:52] *** Joins: Wouter01008 (~Wouter010@entry.nbg.netvos.nl)
[08:47:59] *** Joins: oldgalileo6 (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:48:18] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[08:48:20] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Remote host closed the connection)
[08:48:38] *** Joins: sneak (~sneak@datavi.be)
[08:48:47] *** Quits: svip (~svip@user/svip) (Ping timeout: 252 seconds)
[08:49:19] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[08:49:20] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Ping timeout: 252 seconds)
[08:49:20] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 252 seconds)
[08:49:20] *** Quits: bacce (baccenfutt@user/baccenfutter) (Ping timeout: 252 seconds)
[08:49:20] *** oldgalileo6 is now known as oldgalileo
[08:49:20] *** Wouter01008 is now known as Wouter0100
[08:49:25] *** Joins: svip (~svip@static.227.17.9.176.clients.your-server.de)
[08:49:26] *** Quits: svip (~svip@static.227.17.9.176.clients.your-server.de) (Changing host)
[08:49:26] *** Joins: svip (~svip@user/svip)
[08:49:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[08:49:59] *** Joins: bacce (baccenfutt@user/baccenfutter)
[08:51:08] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[08:51:09] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:54:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:55:00] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:02:59] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:03:16] *** Joins: khrbt (~znc@user/khrbt)
[09:04:25] *** Joins: lompik (~lompik@user/lompik)
[09:05:26] *** Joins: cskr (~cskr@49.207.218.133)
[09:10:15] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[09:11:14] *** Parts: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca) (Good Bye)
[09:16:37] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[09:17:29] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 264 seconds)
[09:19:36] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[09:22:12] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:23:28] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[09:24:36] *** Joins: kcrk (~kcrk@user/kcrk)
[09:25:35] *** Joins: shka (~herr@109.231.62.239)
[09:27:27] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[09:30:06] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[09:31:31] *** Joins: fef (~thedawn@user/thedawn)
[09:32:23] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Quit: WeeChat 3.2)
[09:38:05] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:00:34] *** Joins: califax- (~califax@user/califx)
[10:02:09] *** Joins: independent56 (~independe@51.159.55.86)
[10:03:09] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[10:03:10] *** califax- is now known as califax
[10:04:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[10:05:04] *** Joins: independent_ (~independe@51.159.55.86)
[10:07:26] *** Quits: independent56 (~independe@51.159.55.86) (Ping timeout: 252 seconds)
[10:10:27] *** Quits: independent_ (~independe@51.159.55.86) (Read error: Connection reset by peer)
[10:12:23] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[10:13:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:14:27] *** Joins: menace (~someone@ppp-93-104-170-108.dynamic.mnet-online.de)
[10:14:39] *** Quits: menace (~someone@ppp-93-104-170-108.dynamic.mnet-online.de) (Changing host)
[10:14:39] *** Joins: menace (~someone@user/menace)
[10:14:43] *** menace is now known as Deknos
[10:15:15] *** Joins: fikran (~fikran@user/fikran)
[10:16:27] *** Joins: fef (~thedawn@user/thedawn)
[10:19:50] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:20:59] *** Joins: califax (~califax@user/califx)
[10:23:27] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:25:19] *** Joins: kcrk (~kcrk@user/kcrk)
[10:25:53] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[10:32:44] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[10:34:34] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:34:57] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[10:36:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[10:38:46] *** Quits: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4) (Ping timeout: 260 seconds)
[10:43:46] *** imm__ is now known as imm_
[10:48:23] *** Quits: LoRez (~lorez@user/lorez) (Ping timeout: 265 seconds)
[10:48:45] *** Quits: nekron (~nekron@noordsee.de) (Remote host closed the connection)
[10:50:05] *** Joins: nekron (~nekron@noordsee.de)
[10:53:38] *** Joins: Atque (~Atque@user/atque)
[10:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:55:06] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:55:51] *** Joins: kcrk (~kcrk@user/kcrk)
[10:56:25] *** Joins: hexfive (~eric@50.35.83.177)
[10:59:57] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[11:00:47] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[11:04:39] *** Joins: LoRez (~lorez@user/lorez)
[11:06:32] *** Joins: kcrk (~kcrk@user/kcrk)
[11:09:23] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[11:15:19] *** Joins: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de)
[11:18:54] *** Joins: mrig (~mrig@user/mrig)
[11:25:30] *** Quits: cskr (~cskr@49.207.218.133) (Quit: Leaving)
[11:26:34] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 265 seconds)
[11:28:05] *** Joins: xiongxin8802 (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7)
[11:28:39] *** Quits: xiongxin8802 (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7) (Client Quit)
[11:28:55] *** Joins: dalu (~dalu@78-0-204-235.adsl.net.t-com.hr)
[11:29:31] *** Joins: xiongxin (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7)
[11:35:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[11:40:13] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:43:48] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Quit: unmanbearpig)
[11:50:20] *** Quits: dalu (~dalu@78-0-204-235.adsl.net.t-com.hr) (Quit: Leaving)
[11:51:41] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:52:39] *** Joins: gggp (~textual@221.219.68.62)
[11:55:44] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[12:05:47] *** Joins: shtirlic_ (~shtirlic@178.70.139.14)
[12:06:01] *** Joins: huf_ (huf@user/huf)
[12:06:02] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 260 seconds)
[12:06:04] *** Joins: oldgalileo6 (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:06:16] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[12:06:59] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[12:07:15] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[12:07:15] *** Quits: Shimmy (~Shimmy@user/shimmy) (Quit: Ping timeout (120 seconds))
[12:07:15] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: Ping timeout (120 seconds))
[12:07:15] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[12:07:16] *** Joins: Shimmy6 (~Shimmy@user/shimmy)
[12:07:18] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[12:07:25] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[12:07:38] *** Quits: huf (huf@user/huf) (Quit: Reconnecting)
[12:07:41] *** Joins: califax (~califax@user/califx)
[12:07:44] *** Quits: ruel (~ruel@150.136.4.160) (Quit: 73/72)
[12:07:44] *** huf_ is now known as huf
[12:08:03] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[12:08:04] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[12:08:06] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[12:08:06] *** Joins: ruel (~ruel@150.136.4.160)
[12:08:13] *** Joins: flynn1 (~mcbloch@user/flynn)
[12:08:14] *** Joins: novns (~novns@user/novns)
[12:08:23] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[12:08:42] *** Joins: nitrix (~nitrix@ns569831.ip-51-79-81.net)
[12:08:43] *** Quits: nitrix (~nitrix@ns569831.ip-51-79-81.net) (Changing host)
[12:08:43] *** Joins: nitrix (~nitrix@user/nitrix)
[12:09:06] *** Quits: shtirlic (~shtirlic@178.70.139.14) (Ping timeout: 265 seconds)
[12:09:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Ping timeout: 265 seconds)
[12:09:35] *** oldgalileo6 is now known as oldgalileo
[12:09:57] *** Joins: pedr0 (~pedr0@finc-23-b2-v4wan-163318-cust230.vm7.cable.virginm.net)
[12:10:51] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[12:10:56] *** Joins: embik (~embik@user/embik)
[12:11:20] *** Quits: embik (~embik@user/embik) (Client Quit)
[12:12:54] *** Joins: kcrk (~kcrk@user/kcrk)
[12:13:30] *** Quits: xiongxin (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7) (Ping timeout: 260 seconds)
[12:20:12] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Quit: mikoto-chan)
[12:22:03] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[12:22:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[12:23:10] *** Joins: xiongxin (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7)
[12:24:39] *** Joins: fikran (~fikran@user/fikran)
[12:26:49] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:27:37] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:28:19] *** Quits: pedr0 (~pedr0@finc-23-b2-v4wan-163318-cust230.vm7.cable.virginm.net) (Quit: Leaving)
[12:28:53] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[12:30:51] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 265 seconds)
[12:30:57] *** Quits: adlternative (~adl@117.32.216.71) (Quit: Konversation terminated!)
[12:33:44] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[12:46:41] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:52:59] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[12:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:57:51] *** Quits: darkapex_ (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[12:58:10] *** Joins: darkapex (~darkapex@user/darkapex)
[13:00:41] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.2.1)
[13:00:55] *** Joins: lompik (~lompik@user/lompik)
[13:01:09] *** Joins: bomb (~bomb@user/bomb)
[13:08:38] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:19:26] *** Joins: f8e4 (~user@159.89.21.45)
[13:19:30] <f8e4> hey, import "github.com/ethereum/go-ethereum/crypto"
[13:19:42] <f8e4> how to install the package? https://gist.github.com/arshamalh/9fe035f7fe18cb5387737546ef84bf6c
[13:20:29] <j416> f8e4: go mod tidy
[13:21:15] <j416> f8e4: also, what you sent there is not valid Go code; you need to fix your syntax errors
[13:22:12] <f8e4> how to install the package sir?
[13:22:42] <ikke> do you use go modules?
[13:23:01] <f8e4> i installed via tutorial from mainpage
[13:23:09] <f8e4> in terminal i can do go run foo.go
[13:23:10] <ikke> do you have a go.mod file?
[13:23:24] <f8e4> no
[13:23:34] <f8e4> like python, i just want run snippet
[13:24:00] <ikke> go works different than python does
[13:25:17] <ikke> try `go get github.com/ethereum/go-ethereum/crypto@latest`
[13:30:43] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:37:12] *** Joins: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net)
[13:41:56] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[13:42:55] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:58:10] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca)
[14:04:30] *** Quits: chripell (~chripell@host-79-20-15-48.retail.telecomitalia.it) (Quit: Leaving)
[14:08:32] *** Quits: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:11:34] *** Joins: kcrk (~kcrk@user/kcrk)
[14:16:35] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[14:21:48] *** Joins: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net)
[14:24:10] *** Quits: xiongxin (~quassel@2409:8955:309c:4969:c5a9:3f88:a999:8b7) (Ping timeout: 260 seconds)
[14:24:34] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:24:55] *** Joins: mickey (~user@user/mickey)
[14:27:32] *** Quits: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[14:28:55] *** Joins: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de)
[14:30:12] *** Quits: igneous (~igneous@user/igneous) (Quit: Lost terminal)
[14:31:53] *** Quits: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:32:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:33:20] *** Quits: nitrix (~nitrix@user/nitrix) (Remote host closed the connection)
[14:34:02] *** Joins: fikran (~fikran@user/fikran)
[14:34:14] *** Joins: jespada (~jespada@2803:9800:9842:7a62:4d47:2975:7b31:a447)
[14:35:16] *** Joins: nitrix (~nitrix@ns569831.ip-51-79-81.net)
[14:35:32] *** Quits: nitrix (~nitrix@ns569831.ip-51-79-81.net) (Changing host)
[14:35:32] *** Joins: nitrix (~nitrix@user/nitrix)
[14:37:18] *** Joins: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net)
[14:46:26] *** Joins: kcrk (~kcrk@user/kcrk)
[14:46:58] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[14:50:12] *** Quits: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:50:40] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[14:51:09] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[14:51:43] *** Joins: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net)
[14:52:53] *** Quits: gggp (~textual@221.219.68.62) (Ping timeout: 252 seconds)
[14:53:08] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[14:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:55:12] *** Joins: gggp (~textual@125.33.92.174)
[14:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:56:39] *** Shimmy6 is now known as Shimmy
[15:01:41] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[15:13:39] *** Joins: bomb_ (~bomb@user/bomb)
[15:17:45] *** Quits: bomb (~bomb@user/bomb) (Ping timeout: 276 seconds)
[15:18:33] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:31:18] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:41:48] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:42:53] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:52:18] *** Joins: xiongxin (~quassel@119.123.102.205)
[15:54:42] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 260 seconds)
[15:54:45] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[15:56:13] *** Joins: moldorcoder7 (~moldorcod@77.47.48.24)
[15:57:06] *** Quits: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:01:28] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[16:02:11] *** Quits: moldorcoder7 (~moldorcod@77.47.48.24) (Ping timeout: 252 seconds)
[16:05:37] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:05:57] *** Joins: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net)
[16:09:28] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:18:41] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[16:22:29] *** Joins: quasisyntaxed (~user@2804:1b2:181:e2b8:637d:d7b1:739d:f336)
[16:28:18] *** Quits: Kyros (~kyros@user/kyros) (Quit: WeeChat 3.2.1)
[16:28:36] *** Joins: Kyros (~kyros@user/kyros)
[16:29:44] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[16:31:17] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:37:46] *** Joins: kinduff (~kinduff@user/kinduff)
[16:41:01] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:41:20] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 246 seconds)
[16:41:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[16:43:24] *** Joins: fikran (~fikran@user/fikran)
[16:43:58] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[16:46:18] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[16:49:24] *** Quits: bomb_ (~bomb@user/bomb) (Ping timeout: 276 seconds)
[16:51:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:51:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:51:06] *** Joins: wroathe (~wroathe@user/wroathe)
[16:54:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:55:01] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:55:12] *** Quits: halden (~halden@lden.im) (Remote host closed the connection)
[16:56:28] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[16:56:50] *** Joins: halden (~halden@lden.im)
[16:57:15] *** Joins: kinduff (~kinduff@user/kinduff)
[16:57:56] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[17:02:29] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 264 seconds)
[17:02:52] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:7ba2:5fb7:3b5b:5ca)
[17:03:49] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[17:05:26] *** Quits: holgersson (~quassel@user/holgersson) (Remote host closed the connection)
[17:06:22] *** Quits: leonardo (~leonardo@ipv6two.tilde.club) (Quit: WeeChat 3.2)
[17:06:37] *** Joins: leonardo (~leonardo@user/leonardo)
[17:06:42] *** Joins: holgersson (~quassel@user/holgersson)
[17:09:04] *** Joins: kcrk (~kcrk@user/kcrk)
[17:09:41] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c420:6d94:fde4:9ca) (Ping timeout: 264 seconds)
[17:11:44] *** Joins: kinduff (~kinduff@user/kinduff)
[17:18:23] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[17:20:17] *** Quits: gggp (~textual@125.33.92.174) (Ping timeout: 252 seconds)
[17:20:50] *** Joins: user217_ (~andrii@195.138.71.41)
[17:23:21] *** Joins: gggp (~textual@60.10.194.42)
[17:24:15] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1001)
[17:32:09] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[17:34:06] <user217_> I get this error " error unmarshalling config which passed initial validity checks: string field contains invalid UTF-8"   , but all two configs that I use passed 'iconv' checks
[17:34:30] <user217_> is any updates here ?  https://github.com/golang/protobuf/issues/1228
[17:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[17:35:14] *** Joins: kinduff (~kinduff@user/kinduff)
[17:42:45] *** Joins: Everything (~Everythin@37.115.210.35)
[17:46:57] <user217_> can I understand where exactly I have 'invalid UTF-8'  ?
[17:47:41] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:7ba2:5fb7:3b5b:5ca) (Quit: Client closed)
[17:48:13] <Tv_> user217_: i'd assume the difference to iconv is that iconv is evaluating the file as-is, while the field could contain escape sequences
[17:48:57] <siXy> If the proto works in another language you could dump it as textproto in that language so you can look at it.
[17:49:20] <Tv_> just protoc can do that, for arbitrary pb
[17:49:56] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:50:27] <Tv_> but but but
[17:50:32] <Tv_> i though this was about the text format to begin with
[17:50:46] <Tv_> because otherwise, iconv? on binary protobuf?
[17:51:05] <siXy> ... you make a valid point. Yeah.
[17:51:47] *** Quits: user217_ (~andrii@195.138.71.41) (Ping timeout: 265 seconds)
[17:54:57] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[17:56:02] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 260 seconds)
[17:56:37] *** Joins: arcatech (~arcatech@user/arcatech)
[17:57:08] *** Joins: bomb_ (~bomb@user/bomb)
[18:00:02] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:04:44] *** Joins: jpw_ (~jpw@user/jpw)
[18:06:05] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 264 seconds)
[18:06:18] *** Joins: menace (~someone@ppp-93-104-170-108.dynamic.mnet-online.de)
[18:06:30] *** Quits: menace (~someone@ppp-93-104-170-108.dynamic.mnet-online.de) (Changing host)
[18:06:31] *** Joins: menace (~someone@user/menace)
[18:12:22] *** bomb_ is now known as bomb
[18:14:11] *** Joins: independent56 (~independe@163.172.58.132)
[18:14:18] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[18:15:57] *** Quits: Memory (sid459764@user/memory) ()
[18:17:40] *** Joins: andlabs (~andlabs@2604:ca00:178:3de2:f458:c39e:fba9:e4e3)
[18:23:54] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:e16d:4a48:7ce:7be5)
[18:24:05] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Remote host closed the connection)
[18:24:21] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[18:25:17] *** Joins: user217_ (~andrii@195.138.71.41)
[18:25:17] <LTCD> Hey. I followed this tutorial and got it working, well it was fuzzing and output matched what I expected. I have been told to use this to fuzz a source code I wrote in GO, but I did think someone in this channel told me it does not work for things that are not a part of GO Lang? https://github.com/dvyukov/go-fuzz/blob/master/README.md
[18:25:26] <LTCD> Like it has to be a GO module, like fmt.
[18:26:22] *** Joins: Xjs (~jannis@user/xjs)
[18:27:39] *** Joins: mcerb (~androirc@2601:601:8180:d370:94e0:459f:812:c462)
[18:30:42] *** Quits: mcerb (~androirc@2601:601:8180:d370:94e0:459f:812:c462) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:31:14] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 252 seconds)
[18:34:19] *** Joins: jpw (~jpw@user/jpw)
[18:34:22] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Remote host closed the connection)
[18:35:40] <LTCD> Forget question, got a friend helping me now.
[18:35:43] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:e16d:4a48:7ce:7be5) (Quit: Client closed)
[18:36:50] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 246 seconds)
[18:39:57] *** Joins: gggp (~textual@60.10.194.42)
[18:46:37] *** Quits: user217_ (~andrii@195.138.71.41) (Quit: Konversation terminated!)
[18:48:21] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:7ba2:5fb7:3b5b:5ca)
[18:51:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[18:51:41] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1001) (Ping timeout: 264 seconds)
[18:52:39] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:52:47] *** Joins: fikran (~fikran@user/fikran)
[18:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:55:08] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:55:38] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[18:57:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:00:35] *** Quits: andlabs (~andlabs@2604:ca00:178:3de2:f458:c39e:fba9:e4e3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:01:53] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 264 seconds)
[19:04:47] *** Quits: independent56 (~independe@163.172.58.132) (Ping timeout: 252 seconds)
[19:07:29] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:14:01] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[19:14:43] *** Quits: xiongxin (~quassel@119.123.102.205) (Remote host closed the connection)
[19:15:59] *** Joins: xiongxin (~quassel@119.123.102.205)
[19:17:49] *** Quits: kinduff (~kinduff@user/kinduff) (Ping timeout: 265 seconds)
[19:21:04] *** Joins: kinduff (~kinduff@user/kinduff)
[19:21:23] *** Quits: xiongxin (~quassel@119.123.102.205) (Quit: No Ping reply in 180 seconds.)
[19:22:38] *** Joins: xiongxin (~quassel@119.123.100.167)
[19:26:17] *** Joins: teasea4 (~teasea@user/teasea)
[19:27:03] *** Quits: xiongxin (~quassel@119.123.100.167) (Client Quit)
[19:27:41] *** Quits: teasea (~teasea@user/teasea) (Ping timeout: 264 seconds)
[19:27:41] *** teasea4 is now known as teasea
[19:28:18] *** Joins: xiongxin (~quassel@113.116.33.208)
[19:29:58] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[19:31:27] <bloony> Why isn't the whitespace removed on the last print here? https://play.golang.org/p/3B4AknXP0o5
[19:33:05] <fizzie> Because fmt.Println inserts blanks between its arguments.
[19:33:35] <fizzie> Compare https://play.golang.org/p/tws4ed86kAI
[19:34:14] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 246 seconds)
[19:34:43] *** Quits: xiongxin (~quassel@113.116.33.208) (Quit: No Ping reply in 180 seconds.)
[19:34:48] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b403:e042:edcd:9a1b:e083:505b)
[19:34:53] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[19:34:58] *** Joins: khrbt_ (~znc@user/khrbt)
[19:35:36] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[19:35:56] <Thedarkb-Desktop> Hi, I'm trying to unmarshal an XML response from the Google geocoding API and my structs are just coming back empty.
[19:35:58] *** Joins: xiongxin (~quassel@113.116.33.208)
[19:36:16] <Thedarkb-Desktop> No errors from the xml.Unmarshal
[19:36:52] <bloony> fizzie: oh.. I knew that :p thanks.. Time to go home soon I guess :)
[19:36:59] <sztanpet> my magic crystal ball says you didnt mark your fields as exported Thedarkb-Desktop
[19:37:18] <fizzie> Mine says something about passing a struct rather than a pointer to struct, but that might *be* an error (don't remember).
[19:37:37] <sztanpet> the point is, show some code or were just guessing
[19:37:41] <Thedarkb-Desktop> I passed a pointer.
[19:37:41] <Thedarkb-Desktop> https://dpaste.com/5547RC8H6
[19:37:53] <Thedarkb-Desktop> Sorry, I was cleaning the API keys out of my dPaste.
[19:38:36] *** Quits: xiongxin (~quassel@113.116.33.208) (Client Quit)
[19:39:05] <fizzie> What's the response look like? And in particular, does it look similar or different than using xml.Marshal to *encode* one of your structs into XML?
[19:39:41] <Thedarkb-Desktop> There are fields in the response that aren't in my structs, could that be the issue?
[19:41:06] <Thedarkb-Desktop> https://dpaste.com/689K7TSR5
[19:41:24] <Thedarkb-Desktop> Here's what the response looks like, all I'm after at the moment are the latitude and longitude fields.
[19:41:59] <fizzie> Well, I don't see any mapping of the <result> element, under which all the actual data would seem to be.
[19:42:12] <Thedarkb-Desktop> That'll be it, thank you.
[19:42:15] <Thedarkb-Desktop> :D
[19:46:37] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[19:49:31] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: remote reboot (fingers crossed))
[19:52:15] *** Joins: maroloccio (~marolocci@93-136-18-134.adsl.net.t-com.hr)
[19:54:09] *** Joins: sshow (~sshow@neo.hackeriet.no)
[19:54:53] *** Quits: quasisyntaxed (~user@2804:1b2:181:e2b8:637d:d7b1:739d:f336) (Ping timeout: 246 seconds)
[19:55:19] *** Joins: jpw (~jpw@user/jpw)
[19:56:11] *** Joins: Memory (sid459764@user/memory)
[20:05:18] *** Quits: plasticmae (~plasticma@cpe-172-249-151-214.socal.res.rr.com) (Ping timeout: 260 seconds)
[20:06:49] *** Joins: plasticmae (~plasticma@cpe-172-249-151-214.socal.res.rr.com)
[20:07:37] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: No route to host)
[20:08:01] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:08:36] <opcode> good lord, I have been trying to "go get" a module with a version greater than 1.0 for about an hour and can't figure it out.  Why is Go's packaging such a mess?
[20:09:51] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:10:51] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:10:54] <opcode> the only reason I'm sticking with Go is i've sunk too much time into it and I'd have to rewrite from scratch in a better language
[20:10:57] <opcode> ughhhh
[20:11:23] <bomb> which language would that be, if you had infinite time?
[20:14:29] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 246 seconds)
[20:14:35] <opcode> honestly I'd go back to C#
[20:15:19] <bomb> it became a great choice after .NET Core
[20:15:38] <opcode> It's not perfect but at least it doesn't have an insane feature where the language enforces v0 or v1
[20:15:44] <opcode> but you can't package v2+
[20:16:10] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:18:29] <bomb> what do you mean, you can't package v2?
[20:19:24] <opcode> I mean I've tried I think every single guide/tutorial at this point, but I can't get "go get" to fetch any package that is tagged with a version greater than v1
[20:20:12] <ikke> It's part of the package name
[20:23:16] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[20:23:56] <fizzie> Strictly speaking, the import path. (The "package name" is only the single identifier, the last component of the import path.)
[20:25:42] <ikke> right
[20:33:59] <bomb> when you deploy a Go application, can you somehow stick the external files into the final binary as "resources"?
[20:35:47] <siXy> bomb: https://pkg.go.dev/embed
[20:36:40] <siXy> Though if your files are large, it may be worth deplying in a FROM scratch container instead.
[20:36:47] *** Joins: brooks457 (~bswinnert@containers.neptunenetworks.org)
[20:36:51] <bomb> oh cool
[20:37:05] <bomb> just few templates, and such
[20:37:30] <bomb> if you mean Docker, I don't probably need something like that
[20:37:57] <siXy> for a few templates, go:embed is fine
[20:39:35] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[20:39:52] *** Quits: brooks45 (~bswinnert@containers.neptunenetworks.org) (Ping timeout: 268 seconds)
[20:44:59] * bookworm points at a run of the mill tarball
[20:45:08] <bookworm> no need for a docker container
[20:45:27] <bomb> but then my app becomes a dir!
[20:48:36] <bomb> another question; how do you replace a running app in production?
[20:48:54] *** Joins: SunSparc (~jonathan@136.36.197.44)
[20:49:33] <siXy> bomb: That is a question with a million possible answers, but none will be useful until you know what your constraints are.
[20:49:35] <ikke> simplest way: restart it
[20:49:48] <ikke> agreed
[20:50:24] <bomb> it's not optimal
[20:50:42] <opcode> haha fixed, I just went back and made a new tag under the v1.x branch
[20:50:53] <opcode> i guess i'll just delete all the v3 and v4 tags
[20:51:06] <opcode> easier than wrestling with go get
[20:51:07] <ikke> opcode: maybe you should read this (in case you haven't yet): https://go.dev/blog/v2-go-modules
[20:51:20] <opcode> i've read that and it didn't solve my issue
[20:51:24] <opcode> thanks tho
[20:51:52] <ikke> opcode: at this point you only told its not working, without telling what you did, or what errors you received
[20:52:32] <opcode> i've tried so many different things and received so many different errors
[20:52:32] <ikke> opcode: note that that following that post means that you have to do something in the module as well when you move to v2 and further
[20:52:50] <opcode> yes i tried specifying the /v5 as part of the import path
[20:52:59] <opcode> i still was not able to import it correctly
[20:53:09] <opcode> i'm ready to just give up on Go at this point
[20:53:18] <opcode> i certainly will not choose it for a future project
[20:53:19] <ikke> But do you have either a v5 branch or a v5 directory with all code?
[20:53:39] <opcode> ikke: the docs I read stipulated it was not required, and in fact explicitly optional
[20:53:47] <opcode> to make a v5 branch and a v5 directory
[20:54:15] <opcode> tagging e.g. v3.0.0 on master was indicated as okay
[20:54:24] <ikke> You can do either, but you have to choose one of those approaches
[20:54:43] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:56:33] <siXy> bomb: If you were to specify what constraints you need to meet (e.g. allowed downtime, how inflight reqs need to be handled, what your application actually does, and what qps it needs to serve, if it's stateful or stateless, what hardware you have available, etc, etc) we can suggest some solutions - but there's no one-size-fits all approach.
[20:56:48] <opcode> okqy well those approaches are both absurd so I opted to just keep going with v1.4 and throw semver out the window
[20:57:09] <bomb> siXy: t's a web app that I want to update seamlessly
[20:57:59] <siXy> how do you define "seamlessly"? And how many queries per second are you handling? "seamlessly" means very different things at 1qps to 500k qps.
[20:58:30] <ikke> opcode: go's philosofy is basically that you don't want to publish breaking changes every other day
[20:59:07] <opcode> Go's packaging system is horrible UX
[20:59:45] <bomb> siXy: do I really need to be absurdly specific to get an answer?
[20:59:46] <opcode> Name another language where specifying "latest" fetches ancient commits because they are the most recent ones tagged with a v1.x
[21:00:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[21:00:31] <siXy> bomb: I'm asking the questions because the solution is going to be wildly different depending on the answers.
[21:00:35] *** Joins: cenan (~cenan@24.133.236.61)
[21:02:09] *** Joins: fikran (~fikran@user/fikran)
[21:02:40] <bomb> siXy: okay. I was under the impression that one solution fits all in other ecosystems I worked with before. if it varies in Go, I'll try again
[21:03:02] <siXy> it doesn't vary in go - these questions would be required in any language or environment.
[21:03:13] <bomb> siXy: it's a low-traffic web app, just handles requests and talks to the external services, all stateless, I have a small VM
[21:03:21] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[21:04:13] <bomb> Nginx has that hot reload where I believe it waits for connections to finish while restarting preforked processes one by one
[21:04:20] <j416> bomb: when you say 'seamlessly', do you mean zero downtime or is short downtime acceptable?
[21:04:45] <siXy> well, if it's low enough traffic and the risk of failure is low, you could just restart it - client browsers will retry failed/aborted requests so it'll appear basically seamless to clients enough of the time it probably won't matter. If you want to have a way to make sure the new version works properly, you could stick an haproxy instance in front of it, so you can be sure the new version responds okay to
[21:04:48] <bomb> j416: zero downtime, yeah. I don't want to kill any active connection, or stop responding
[21:04:51] <siXy> health checks before you rotate it in, and then the old one out.
[21:05:33] <j416> bomb: then as siXy suggests, load balancer or such in front
[21:05:34] <siXy> bomb: see the thing is that client browsers will seamlessly retry in the background, so for a low traffic, single homed webapp there's really no need to be particularly precious about individual connections
[21:05:49] <bomb> load balancer, gotcha. something like Haproxy
[21:05:56] <siXy> but if that's what you want, the haproxy answer ^ is the cheapest way
[21:06:48] <j416> bomb: or deploy it to something like DO apps, Heroku, and leave the deployment fuss to someone else
[21:07:01] <bomb> so it's gonna be 4 instances of my Go app, and I will stop-replace-start them one by one. am I right?
[21:07:42] <siXy> that's a valid approach, yes
[21:07:55] <bomb> j416: that would be useful, I'm on tight budget, I'll just get a VM for all the deployment
[21:08:03] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:08:09] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:08:19] <bomb> is there a way to "slow kill" a running Go server, where it waits for connections to finish; so I don't drop any active request?
[21:08:20] *** Joins: mickey (~user@user/mickey)
[21:08:36] <j416> Heroku has a free tier if you can accept it being unavailable during periods of no traffic (it puts it to sleep)
[21:08:48] <j416> DO apps I think is like $10/month or so
[21:08:59] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[21:09:01] <j416> for the cheapest option
[21:09:08] <siXy> Do remember though that putting loads of effort into not dropping small numbers of connections really isn't worth it for this. Large websites drop small percentages of requests all the time, and noone ever notices because their browser just retries the request.
[21:09:20] <bomb> j416: that's a 8GB memory VM on Hetzner :)
[21:09:35] <j416> bomb: I don't know your requirements.
[21:09:47] <j416> bomb: just giving you potentially cheaper/easier options
[21:09:56] <bomb> siXy: okay, that's something I should solve at the client side, got it
[21:10:03] <bomb> j416: thank you anyway
[21:10:23] <siXy> bomb: You don't need to solve it - the browser already solves it.
[21:10:39] <bomb> you're right, my server would be 1005 uptime (which is impossible), and the user might have bad connection
[21:11:07] <bomb> browser repeats the request when I don't answer?
[21:11:17] <siXy> yes
[21:11:29] <bomb> did not know that
[21:12:21] *** Quits: cenan (~cenan@24.133.236.61) (Remote host closed the connection)
[21:12:33] <siXy> A lot of folks don't - and this is why I was trying to get you to specify exactly what you mean by seamless. If it's just "client doesn't notice" then 500ms of downtime won't matter
[21:13:23] <siXy> There are exceptions: notably POST requests that won't get retried for reasons that might be obvious
[21:13:25] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[21:13:38] <siXy> But for most webapps this isn't a big deal
[21:15:20] <bomb> maybe Haproxy will route the request to a working backend before even the browser chime in
[21:15:22] *** Quits: ConstantDesc (~textual@cpc146480-hari23-2-0-cust237.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:15:56] <siXy> yes, haproxy makes it more seamless. but adds complexity. you need to think about if that tradeoff is the right one for you
[21:16:40] <siXy> (it's also worth pointing out that if your website is generally reliable, users will tend to blame their own connection, not your website, for temporary glitches)
[21:17:12] <bomb> it's gonna be a paid SaaS, hopefully
[21:17:16] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:17:21] <bomb> low traffic, but I'd like to increase the reliability
[21:18:11] <siXy> The same applies. If you handle 99.9% of requests sucessfully, people are very unlikely to notice when you don't - and if they do are likely to blame their local connection anyway
[21:19:20] <siXy> If your bank website doesn't load right, what's the first thing you do? You hit refresh. Then it works. And you'll assume that your connection was bad for a second there. It's the same story everywhere.
[21:19:58] <bomb> understood. thank you, it cleared up my mind
[21:20:12] <siXy> If facebook loads a bit slowly you assume that it's your connection being sluggish, you never think "oh maybe a request failed and my browser had to retry it"
[21:20:59] <siXy> no problem :) and sorry to others for straying a little off topic here
[21:23:40] <bomb> ironically, I've been on a terrible connection for a few weeks, I can't even blame any website if 30% of my requests drop :)
[21:26:49] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[21:27:05] *** Joins: bomb (~bomb@user/bomb)
[21:29:25] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:31:50] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:32:06] *** Joins: mickey (~user@user/mickey)
[21:32:25] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[21:34:52] <tristero> so I guess there's an optimal level of intentional request-dropping that big sites should do, to keep user expectations in check :-)  Like how often one should bluff in poker
[21:35:10] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[21:36:15] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:38:39] *** Quits: bomb (~bomb@user/bomb) (Ping timeout: 276 seconds)
[21:39:33] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:41:01] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:43:42] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: No route to host)
[21:46:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:52:18] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:56:20] *** Quits: normen (~normen@p200300d7173dc9001171e37e000af32e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[21:57:20] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:5ce:744d:425a:d73b)
[21:57:42] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:58:16] *** Joins: ugjka (~ugjka@ugjka.net)
[22:05:40] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 252 seconds)
[22:06:35] *** Joins: bomb (~bomb@user/bomb)
[22:08:19] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:13:38] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[22:20:20] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[22:28:24] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[22:28:59] *** Joins: christophergray (~christoph@190.148.52.49)
[22:30:26] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:31:02] *** Quits: X-Scale (~ARM@83.223.240.141) (Ping timeout: 252 seconds)
[22:32:05] *** X-Scale` is now known as X-Scale
[22:33:16] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[22:38:30] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Quit: Leaving)
[22:39:50] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:46:09] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:46:15] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:7ba2:5fb7:3b5b:5ca) (Quit: Client closed)
[22:48:45] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b403:e042:edcd:9a1b:e083:505b) (Remote host closed the connection)
[22:48:51] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b403:e042:edcd:9a1b:e083:505b)
[22:48:51] *** Quits: bomb (~bomb@user/bomb) (Ping timeout: 276 seconds)
[22:54:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:58:14] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.2.1)
[23:05:41] <toretto> In Go does the array indexing works like this way: some_array[START_INDEX:(END_INDEX+1)]? Like, the starting index would be the actual 'index' value but the end index is 'end_index - 1'?
[23:06:07] <fizzie> Yes, the start index is inclusive but the end index is exclusive.
[23:06:14] <toretto> I see.
[23:07:37] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[23:07:38] *** feuerrot_ is now known as feuerrot
[23:10:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:11:59] *** Joins: fikran (~fikran@user/fikran)
[23:15:54] *** Joins: corn266 (~corn266@ec2-18-217-219-218.us-east-2.compute.amazonaws.com)
[23:17:56] *** Joins: normen (~normen@p200300d7173dc900689bc00335bb27ab.dip0.t-ipconnect.de)
[23:25:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:25:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:25:01] *** Joins: wroathe (~wroathe@user/wroathe)
[23:25:56] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 246 seconds)
[23:26:04] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Quit: Izem)
[23:26:13] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[23:27:08] *** Joins: mrig (~mrig@user/mrig)
[23:28:28] *** Quits: christophergray (~christoph@190.148.52.49) (Quit: WeeChat 3.2.1)
[23:29:00] <Tv_> in Go, and on just about any computer thing
[23:29:20] <Tv_> https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
[23:30:07] <greatgatsby> toretto, also called half-open, for one reason so things like foo[bar:bar+10]  works nicely when you increment bar  (probably a bad example)
[23:32:34] <fizzie> Just about, but not quite any. For example, MATLAB(/Octave) indices start at 1, and the slicing operation intervals are inclusive at both ends.
[23:37:58] <Tv_> for funsies, store a multi-dimensional array in a flat array in a language with 1-based indexing
[23:38:51] <Tv_> funsies part 2, store a tree in an array using the conventional children are a pair at 2x the index notation, in a language with 1-based indexing
[23:39:09] <Tv_> 0-based indexing minimizes edge cases
[23:39:16] <fizzie> There was a serious claim in a book that your part 2 is *easier* in a language with 1-based indexing.
[23:39:44] <fizzie> To a degree that their C example code left an unused first element in all arrays, to be able to use 1-based indexing.
[23:39:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:40:16] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:40:37] <Tv_> huh? it's just 2n and 2n+1 in the conventional thing
[23:40:44] <fizzie> It's not.
[23:40:52] <fizzie> If n == 0, 2n == 0 too.
[23:40:56] <Tv_> oh right yes
[23:40:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:40:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:40:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:41:08] <Tv_> i might have accidentally argued against myself
[23:41:38] <huf> easier to have a 1-based array in a 0-based array language than the other way around
[23:41:43] <huf> just pretend index 0 isnt there.
[23:41:49] <Tv_> probably because i was actually thinking of one array+freelist gimmickry, and tried to simplify the challenge
[23:42:05] <Tv_> huf: multidimensional arrays will make that hurt...
[23:42:13] <Tv_> in the flat representation that is
[23:43:26] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-a1fc-240b-f865-f529.ip6.gigabit.dk) (Quit: Leaving)
[23:45:17] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[23:46:32] <lungaro_> is there any frontends that make building firewalls easier? Thinking of writing "Firewall generation" tools, to eventually be connected to an API
[23:46:48] <lungaro_> ideally iptables, but maybe I should look at nftables too
[23:47:20] *** Quits: normen (~normen@p200300d7173dc900689bc00335bb27ab.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[23:47:23] *** Quits: neurocyte013 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:47:30] <Tv_> lungaro_: nftables is pretty good out of the box
[23:47:43] <Tv_> lungaro_: as in, it's an actual language, not a sequence of shell commands
[23:48:29] <lungaro_> haha, yeah, I might have to give it a closer look. I'm looking to build host firewalls, ie, basic policies like "Drop all inbound traffic except for ports A, B, and C"
[23:48:35] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[23:49:58] <ikke> lungaro_: a fairly easy approach would be to generate iptables-save / restore files
[23:50:23] <Tv_> iifname myexternalinterface tcp dport {A,B,C} counter accept
[23:50:23] <Tv_> limit rate 10/minute log prefix "firewall in reject:"
[23:50:23] <Tv_> counter drop
[23:50:35] <lungaro_> that's awesome too
[23:50:40] <Tv_> really don't learn iptables in 2021
[23:50:49] <lungaro_> haha, I already know iptables unfortunately
[23:50:52] *** Joins: independent56 (~independe@195-154-105-157.rev.poneytelecom.eu)
[23:51:25] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[23:51:29] <Tv_> lungaro_: my quite complex firewall rules are 480 lines
[23:51:50] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 246 seconds)
[23:51:59] <lungaro_> i'll spend some time looking at nftables, been meaning to for a while now
[23:52:41] <Tv_> but i have stuff like multiple vlans, traffic balancing over multiple outbound interfaces, etc
[23:53:07] <Tv_> but nftables is about as good as a firewall rules language as i've ever seen
[23:53:16] <Tv_> pre-nftables i used ferm, to make iptables more tolerable
[23:54:39] <Tv_> PSA: if you use any of these on linux, please get with the times: ipchains iptables ifconfig route arp netstat
[23:54:58] <lungaro_> can you still use iptables?
[23:55:00] <Tv_> (though i'll agree that netstat is sometimes easier to wrangle than ss's weird syntax)
[23:55:02] <lungaro_> ipchains*
[23:55:38] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:55:39] <lungaro_> i still use netstat, despite knowing of ss and wanting to use ss, i just spit the commands out too easily
[23:55:46] <lungaro_> ss is like 10x faster too
[23:56:01] <Tv_> especially something like netstat -ntl does flow off my fingers easier than the corresponding ss
[23:56:24] <Tv_> which is stupid because it's just ss -ntl
[23:56:42] <Tv_> but it's more a memorized incantation, i could add that one alias and not call netstat ;)
[23:56:58] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:57:09] <Tv_> but ss's ideas about column alignment hurt my brain every time
[23:59:30] <lungaro_> yeah, i'll have to make a cheatsheet and try to switch to ss. I have no good reason to stay w/ netstat. maybe make an alias to netstat
[23:59:39] <lungaro_> alias netstat='echo stop it'
[23:59:45] <gl> netstat is buggy, also
[23:59:50] <gl> contrary to ss
