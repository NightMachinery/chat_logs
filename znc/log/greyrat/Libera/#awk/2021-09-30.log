[00:25:24] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[00:43:04] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[00:58:39] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:00:34] <mute> printf 'one\ttwo\tthree\n' | awk -Ft '{print $2}' # or maybe just -Ft lol
[01:00:47] <mute> # printf 'one\ttwo\tthree\n' | awk -Ft '{print $2}' # oops
[01:00:49] <shbot> mute: two
[01:14:09] *** Joins: Torr (~Torr@user/torr)
[01:16:31] *** Quits: BSaboia (~bsaboia@45.179.224.249) (Quit: This computer has gone to sleep)
[01:28:45] <nmz> the hell
[01:28:53] <nmz> is that a bug?
[01:29:30] <geirha> no no, a feature
[01:29:55] <geirha> it's so that -F\t will work without pesky quotes getting in the way
[01:30:23] <emanuele6> haha
[01:30:51] <nmz> but what if I want FS=t!?
[01:31:00] <yeti> [t]?
[01:31:24] <emanuele6> -F'[t]' works as expected
[01:31:51] <yeti> I dont like such special rules
[01:31:53] <emanuele6> there is no way this is intended right?
[01:31:54] <nmz> printf 'one\ttwo\tthree\n'| awk -Ft '$0=$2'
[01:31:56] <nmz> # printf 'one\ttwo\tthree\n'| awk -Ft '$0=$2'
[01:31:59] <yeti> but it seems to be classic
[01:31:59] <shbot> nmz: two
[01:32:17] <nmz> ; printf 'one\ttwo\tthree\n'| awk -Ft '$0=$2'
[01:32:19] <nmz> wo
[01:32:21] <nmz> wtf
[01:32:37] <yeti> # awk --version
[01:32:39] <shbot> yeti: awk version 20210215
[01:32:42] <geirha> only the true awk has that "feature" iirc. And I believe it's an accidental feature
[01:32:42] <emanuele6> this only works in nawk
[01:32:48] <emanuele6> not in gawk
[01:33:07] <emanuele6> huh? so it is intended?
[01:33:23] <emanuele6> what does posix say about that?
[01:33:27] <nmz> https://tpaste.us/kx7a
[01:33:37] <nmz> works on oawk
[01:33:53] <geirha> I remember reading about it, someone interviewing one of the authors of original awk
[01:34:00] <emanuele6> nmz: also in nawk
[01:34:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 246 seconds)
[01:34:17] <nmz> forgot about that one
[01:34:18] <geirha> nawk is just a newer version of original awk
[01:34:34] <nmz> I think original is bwk's version
[01:35:01] <yeti> there was a discussion in issues of an awk about this... still looking to find it again
[01:35:04] <yeti> recently
[01:35:19] <nmz> oh my nawk and oawk are the same. stupid debian
[01:35:22] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:35:34] <emanuele6> If FS is <space>, skip leading and trailing <blank> and <newline> characters; fields shall be delimited by sets of one or more <blank> or <newline> characters.
[01:35:40] <emanuele6> Otherwise, if FS is any other character c, fields shall be delimited by each single occurrence of c.
[01:35:57] <emanuele6> this is what POSIX says for "If FS is a single character:"
[01:36:30] <nmz> but that's FS, -F seems to work differently
[01:36:45] <nmz> ; printf 'one\ttwo\tthree\n'| nawk 'BEGIN{FS="t"}$0=$2'
[01:36:47] <nmz> wo
[01:36:56] <nmz> ah, this is a trick for -F. ok I get it
[01:36:58] <nmz> handy
[01:37:20] <yeti> nah
[01:37:24] <emanuele6> # awk -Ft 'BEGIN{print FS}' | od -An -c
[01:37:26] <shbot> emanuele6:   \t  \n
[01:37:29] <yeti> special shourtcuts only hurt
[01:37:46] <earnestly> wat
[01:37:49] <nmz> I agree
[01:37:51] <earnestly> I hate this
[01:38:19] <emanuele6> -F sepstring Define the input field separator. This option shall be equivalent to: -v FS=sepstring
[01:38:24] <emanuele6> posix also says this
[01:38:34] <emanuele6> # awk -vFS=t 'BEGIN{print FS}' | od -An -c
[01:38:34] <yeti> we're far from 8k words pdp7s and unix0
[01:38:36] <shbot> emanuele6:    t  \n
[01:38:43] <earnestly> This is a bug, surely
[01:38:55] <earnestly> I'm going to view it as a bug regardless
[01:39:05] <nmz> why would they add this? can't you do awk -F `{printf '\t'} ?
[01:39:12] <emanuele6> this is at aleast again spec
[01:39:12] <nmz> s/`{}/$()/
[01:39:33] <emanuele6> you can also use '\t'
[01:39:35] <earnestly> nmz: You can use -F 'literally \t here, C-v press tab'
[01:39:37] <emanuele6> -F'\t'
[01:39:39] <earnestly> But with awk
[01:40:06] <earnestly> Yeah you can use C escapes.  The literal is more for sort, cut, etc. until $'' arrives
[01:43:53] <nmz> emanuele6: yes but is this because \t did not exist?
[01:47:06] <emanuele6> oh, wait
[01:47:16] <emanuele6> i just read read the source code for nawk
[01:47:27] <emanuele6> if (argv[1][2] != 0) {  /* arg is -Fsomething */
[01:47:30] <emanuele6>         if (argv[1][2] == 't' && argv[1][3] == 0)       /* wart: t=>\t */
[01:47:32] <emanuele6>                 fs = "\t";
[01:47:34] <emanuele6>         else if (argv[1][2] != 0)
[01:47:36] <emanuele6>                 fs = &argv[1][2];
[01:48:05] <emanuele6> they do this convertion intentionally
[01:48:30] <emanuele6> wacky
[01:49:20] <yeti> :-(
[01:49:22] <yeti> @ echo 'a       b       c' | awk -F'\t' '$0=$2'
[01:49:24] <yeti> echo?
[01:49:46] <yeti> pdp7 unix0
[01:50:07] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[01:50:17] <yeti> hmmm
[01:50:35] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:52:01] <yeti> and I forgot the commands of that permian ed
[01:52:14] <yeti> *sigh*
[01:52:58] <yeti> ok
[01:53:05] <yeti> has no awk too
[01:53:12] <yeti> should have checked that 1st
[01:53:15] <yeti> :-Þ
[01:53:28] <yeti> the joys of undercaffeination
[01:53:34] <yeti> :./
[01:54:14] <yeti> ssh unix50@sdf.org # pw: unix50
[01:54:14] <emanuele6> :-þ
[01:56:13] <yeti> https://sdf.org/?tutorials/unix50th
[01:56:16] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Changing host)
[01:56:16] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[01:56:54] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[02:02:17] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[02:11:49] *** Joins: seninha (~seninha@user/seninha)
[02:11:59] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[02:17:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:47:06] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:6daf:7cb1:25f6:bef8) (Ping timeout: 260 seconds)
[02:51:00] *** Joins: Torr (~Torr@user/torr)
[02:52:29] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029)
[03:06:42] <Strykar> how would I combine "awk 'NR==1{print $4}' | awk -F'-' '{print $1}'"
[03:07:54] <emanuele6> NR == 1 { split $4, a, /,/; print a[1] }
[03:08:01] <emanuele6> oops
[03:08:04] <emanuele6> NR == 1 { split $4, a, /-/; print a[1] }
[03:09:31] <Strykar> emanuele6: that doesn't work if I: ./livepeer -version | awk NR == 1 { split $4, a, /-/; print a[1] }   says awk: fatal: cannot open file `==' for reading: No such file or directory
[03:10:14] <emanuele6> i wonder why...
[03:10:27] <emanuele6> ./livepeer -version | awk 'NR == 1 { split $4, a, /-/; print a[1] }'
[03:10:52] <emanuele6> using awk for this purpose is stupid
[03:11:06] <emanuele6> use the sed command tirnanog posted in #bash
[03:12:24] <emanuele6> sed -n 's/^Livepeer Node Version: \([^-]*\).*$/\1/p'
[03:12:43] <emanuele6> Strykar: the problem with your command is that you didn't quote the awk code
[03:13:47] <Strykar> why is sed better than awk for this
[03:13:56] <emanuele6> sed is not better than awk
[03:14:13] <emanuele6> but that method you are using is stupid 
[03:14:20] <Strykar> that sounds about right
[03:15:04] <emanuele6> oh, there is also another problem: ./livepeer -version | awk 'NR == 1 { split($4, a, /-/); print a[1] }'
[03:15:15] <emanuele6> awk is not perl, you need parenthesis in this case
[03:18:13] <emanuele6> # <<< 'Livepeer Node Version: 0.5.21-6ea2cf41' awk 'NR == 1 { split($4, a, /-/); print a[1] }'
[03:18:15] <shbot> emanuele6: 0.5.21
[03:18:25] <emanuele6> # <<< 'Livepeer Node Version: 0.5.21-6ea2cf41' head -1 | cut -c 24-30
[03:18:26] <shbot> emanuele6: 0.5.21-
[03:18:31] <emanuele6> # <<< 'Livepeer Node Version: 0.5.21-6ea2cf41' head -1 | cut -c 24-29
[03:18:32] <shbot> emanuele6: 0.5.21
[03:18:45] <emanuele6> # <<< 'Livepeer Node Version: 0.5.21-6ea2cf41' sed -n 's/^Livepeer Node Version: \([^-]*\).*$/\1/p'
[03:18:46] <shbot> emanuele6: 0.5.21
[03:19:15] <emanuele6> they all work, but all work, but, out of the three, the sed solution is the best
[03:21:14] <emanuele6> s/, but all work//
[03:27:26] <Strykar> and should sed be used to extract the version from a url too? like "https://github.com/livepeer/go-livepeer/releases/download/v0.5.21/livepeer-linux-amd64.tar.gz"
[03:38:28] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 265 seconds)
[03:42:23] *** Quits: extern (~archer@80.246.140.42) (Quit: WeeChat 3.2.1)
[03:55:05] <Nintendo> They should have made a separate option like -t or --tab instead of a special case for -Ft.
[03:55:12] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[03:55:56] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:57:03] <emanuele6> agreed
[04:11:30] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[04:23:23] *** Quits: wuseman (wuseman@user/wuseman) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[04:25:07] *** Joins: seninha (~seninha@user/seninha)
[04:30:30] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:35:30] *** Joins: vlm (~vlm@user/vlm)
[04:38:24] *** Joins: wuseman (~wuseman@90-227-27-97-no68.tbcn.telia.com)
[04:38:24] *** Quits: wuseman (~wuseman@90-227-27-97-no68.tbcn.telia.com) (Changing host)
[04:38:24] *** Joins: wuseman (~wuseman@user/wuseman)
[05:22:37] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:34:02] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[05:45:58] *** Joins: roarde (~roarde@user/roarde)
[05:53:31] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 252 seconds)
[06:38:18] *** Quits: Torr (~Torr@user/torr) ()
[07:35:06] *** Quits: mknod (~mknod@user/mknod) (Ping timeout: 245 seconds)
[07:49:31] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[08:31:39] *** Joins: Tenoch (~puppy@108-216-74-215.lightspeed.wchtks.sbcglobal.net)
[08:38:21] <Tenoch> are this awk '! /li/' and this awk '$0 !~ /li/ equivalent?
[08:39:29] <e36freak> yes
[08:40:06] <Tenoch> I have problems using this format, $1 != "" || $1 !~ /ID/{print} , i want to ge rid of fields with empy/null values and remove the headers 
[08:40:34] <Tenoch> it seems that i have a problem understanding the OR
[08:41:05] <e36freak> demorgan's law
[08:41:07] <emanuele6> i think you want and
[08:41:08] <Tenoch> *get rid of lines with empty field $1
[08:41:09] <e36freak> you want &&, not ||
[08:41:36] <Tenoch> hmm.
[08:41:49] <Tenoch> yes, then definetly I am not getting it.
[08:42:05] <e36freak> !(a == b || a == c) <==> a != b && a != c
[08:42:14] <emanuele6> take for example: "ID hello"
[08:42:18] <e36freak> that's not awk, just basic logic
[08:42:43] <emanuele6> "ID hello" != ""? true
[08:43:04] <emanuele6> "ID hello" !~ /ID/? false
[08:43:11] <emanuele6> true or false? true
[08:43:28] <Tenoch> wait, wait xD, i have to reason this through
[08:43:28] <Tenoch> xD
[08:45:20] <Tenoch> id hello is not true, that is correct. ID Hello !~ /ID/ yes false
[08:45:59] <e36freak> and || means if either condition is true, the whole thing is true
[08:46:07] <emanuele6> # awk 'BEGIN { if ("ID hello" != "") print "true" else print "false" }'
[08:46:14] <shbot> emanuele6: awk: syntax error at source line 1
[08:46:14] <shbot> emanuele6:  context is
[08:46:14] <shbot> emanuele6: etc... ( http://ix.io/3Anx )
[08:46:28] <e36freak> print "true"; else ...
[08:46:32] <emanuele6> # awk 'BEGIN { if ("ID hello" != "") print "true"; else print "false" }'
[08:46:34] <shbot> emanuele6: true
[08:46:47] <emanuele6> # awk 'BEGIN { if ("ID hello" !~ /ID/) print "true"; else print "false" }'
[08:46:49] <shbot> emanuele6: false
[08:46:56] <emanuele6> # awk 'BEGIN { if (true || false) print "true"; else print "false" }'
[08:46:58] <shbot> emanuele6: false
[08:47:04] <emanuele6> oops
[08:47:11] <emanuele6> # awk 'BEGIN { if (1 || 0) print "true"; else print "false" }'
[08:47:12] <shbot> emanuele6: true
[08:47:23] <e36freak> a != b || a != c is always true
[08:47:59] <Tenoch> so it tests both conditions in the line, and if either of them is correct then it is a match
[08:48:12] <e36freak> right
[08:48:14] <Tenoch> and for the AND?
[08:48:19] <e36freak> both have to be true
[08:48:20] <Tenoch> &&
[08:48:31] <Tenoch> both conditions need to be true to be a match?
[08:48:36] <e36freak> yes
[08:50:45] <emanuele6> by the way, this could be rewritten as $1 !~ /^$|ID/
[08:52:49] <Tenoch> https://pastebin.com/gdBT9WCQ sample data
[08:53:29] <Tenoch> there are multiple empy lines with separator , and there are multiple files
[08:53:39] <Tenoch> so i want to get rid of the headers
[08:55:04] <emanuele6> don't be silly, use 'NR == 1 { next }' if you want to skip the first record, no need to match ID
[08:55:32] <Tenoch> NR wait that is true
[08:55:49] <Tenoch> NR is resets right?
[08:55:50] <e36freak> NR is essentially set to the line number
[08:55:58] <e36freak> so when NR is 1, it's the first line
[08:56:06] <Tenoch> of the current file
[08:56:06] <emanuele6> awk -F, 'NR != 1 && $1 != ""'
[08:56:28] <e36freak> FNR would be the current file if you're passing multiple filenames to awk
[08:56:38] <e36freak> NR is incremented for the whole script and not reset
[08:56:43] <Tenoch> e36freak, Yes, it is multiple files
[08:56:53] <e36freak> then use FNR
[08:56:56] <emanuele6> then: awk -F, 'FNR != 1 && $1 != ""'
[08:57:22] <e36freak> that'll skip the first line of each file and any lines with empty first fields
[08:58:40] <Tenoch> emanuele6, thanks, I still need to understand || and &&, its the fundamentals of awk xD
[08:58:50] <e36freak> of any programming language
[08:58:59] <Tenoch> yep
[08:59:11] <emanuele6> its any programming language and mathematics and electronics and everything fundamentals xD
[08:59:46] <emanuele6> it print any record for which both `FNR != 1' and `$1 != 1' are true
[09:00:13] <Tenoch> so, i was trying to say, if field 1 is not empty or is not null then print it
[09:00:14] <emanuele6> any record that is neither the first record of the current file nor has an empty first record
[09:00:35] <emanuele6> correction: any record that is neither the first record of the current file nor has an empty first field
[09:01:16] <emanuele6> if you had say FNR != 1 && $1 ~ "a"
[09:01:35] <emanuele6> oops, i meant
[09:01:41] <emanuele6> if you had say FNR != 1 || $1 ~ "a"
[09:02:07] <emanuele6> it will not print the first record of the current unless the first filed contains an "a"
[09:03:03] <emanuele6> # echo '1,2,3' > file1; echo 'a1,b2,c3' > file2; awk -F, 'FNR != 1 || $1 ~ "a"' file1 file2
[09:03:05] <shbot> emanuele6: a1,b2,c3
[09:03:49] <emanuele6> # echo '1,2,3' > file1; echo '4,5,6' >> file1; echo 'a1,b2,c3' > file2; echo 'd1,e2,f3' >> file2; awk -F, 'FNR != 1 || $1 ~ "a"' file1 file2
[09:03:50] <shbot> emanuele6: 4,5,6
[09:03:50] <shbot> emanuele6: a1,b2,c3
[09:03:50] <shbot> emanuele6: d1,e2,f3
[09:04:03] <emanuele6> # echo '1,2,3' > file1; echo '4,5,6' >> file1; echo 'A1,b2,c3' > file2; echo 'd1,e2,f3' >> file2; awk -F, 'FNR != 1 || $1 ~ "a"' file1 file2
[09:04:05] <shbot> emanuele6: 4,5,6
[09:04:05] <shbot> emanuele6: d1,e2,f3
[09:05:32] <emanuele6> https://introcs.cs.princeton.edu/java/61data/images/truth-table-and-or-xor.png
[09:05:47] <emanuele6> AND(x,y) is "x && y" and OR(x,y) is "x || y"
[09:05:59] <emanuele6> 0 means false and 1 means true
[09:06:29] <emanuele6> AND(x,y) is only true if both x and y are true
[09:06:47] <emanuele6> OR(x,y) is true if either x or y (or both) is true
[09:08:20] <emanuele6> https://3.bp.blogspot.com/-mnDeONCDxuo/Th63hE_gYsI/AAAAAAAAAEc/nk7-dEtDO-o/s1600/and+or+not+truth+table.gif another truth table that uses awk symbols
[09:08:45] <Tenoch> emanuele6, thanks
[09:11:54] <Tenoch> emanuele6, it clicked
[09:11:57] <Tenoch> finally
[09:12:11] <Tenoch> hopefully I dont forget it
[09:15:39] <Tenoch> ha ha, ok, yes i understand why you suggested to use && instead of || when i had just entered the chat
[09:16:13] <Tenoch> god damn it, xD
[09:16:43] *** Joins: lavaball (felix@31.204.155.215)
[09:16:43] *** Andrew_ is now known as Andrew
[09:26:16] <emanuele6> Tenoch: yes, $1 != "" || $1 !~ /ID/ is always true
[09:26:51] <emanuele6> because if $1 is not empty, $1 != "" is true
[09:27:04] <Tenoch> yeah one of them is always true, so it passes the test
[09:27:18] <emanuele6> and if $1 is empty, it doesn't match /ID/ and the second condition is true
[09:27:24] <Tenoch> yep
[09:27:33] <Tenoch> again, hopefully i dont forget it ha
[09:27:52] <emanuele6> you better not ;)
[09:28:56] <Tenoch> emanuele6, I am trying to follow along a pandas tutorial in youtube, but using only awk or any bash utils
[09:29:32] <emanuele6> have fun
[09:29:46] <Tenoch> most of the stuff so far is ok to me, even though as you can see i am not an advanced user
[09:43:10] *** Quits: Tenoch (~puppy@108-216-74-215.lightspeed.wchtks.sbcglobal.net) (Quit: Leaving)
[10:17:04] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[10:24:59] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[11:26:21] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[11:27:13] *** Joins: lavaball (felix@31.204.155.215)
[11:38:39] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[11:39:41] *** Joins: lavaball (felix@31.204.155.215)
[11:42:57] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[11:43:52] *** Joins: earnestly (~earnest@user/earnestly)
[11:44:00] *** Joins: lavaball (felix@31.204.155.215)
[11:46:08] *** Quits: lavaball (felix@31.204.155.215) (Client Quit)
[12:22:42] *** Joins: lavaball (felix@31.204.155.215)
[12:52:06] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:53:16] *** Joins: lavaball (felix@31.204.155.215)
[12:54:41] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:55:42] *** Joins: lavaball (felix@31.204.155.215)
[13:04:45] *** Quits: lavaball (felix@31.204.155.215) (Quit: Spass und Freude.)
[13:06:07] *** Joins: lavaball (felix@31.204.155.215)
[13:40:38] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (Read error: Connection reset by peer)
[13:42:38] *** Joins: AJ_Z0 (~AJ_Z0@pool-108-45-155-20.washdc.fios.verizon.net)
[13:42:38] *** Quits: AJ_Z0 (~AJ_Z0@pool-108-45-155-20.washdc.fios.verizon.net) (Changing host)
[13:42:38] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[14:29:36] *** Joins: capn (~capn@user/capn)
[14:46:08] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Quit: unmanbearpig)
[14:47:16] *** Joins: seninha (~seninha@user/seninha)
[15:10:28] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[15:31:58] *** Joins: mknod (~mknod@user/mknod)
[15:57:00] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[16:00:33] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[16:11:08] *** Quits: dionys (dionys@user/dionys) (Quit: dionys)
[16:11:35] *** Joins: dionys (dionys@user/dionys)
[16:12:03] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[16:25:37] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[16:26:39] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029) (Quit: WeeChat 3.2.1)
[16:30:21] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029)
[16:30:40] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029) (Client Quit)
[16:31:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029)
[16:34:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029) (Client Quit)
[16:35:09] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029)
[16:35:13] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029) (Client Quit)
[16:36:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029)
[16:52:30] *** Joins: ttmrichter (~ttmrichte@user/ttmrichter)
[16:58:40] *** Quits: mknod (~mknod@user/mknod) (Quit: mknod)
[17:06:21] *** Quits: ttmrichter (~ttmrichte@user/ttmrichter) (Quit: Client closed)
[17:07:52] *** Joins: ttmrichter (~ttmrichte@user/ttmrichter)
[17:48:39] *** Joins: lavaball (felix@31.204.155.215)
[18:40:09] <nmz> It's funny that most awk questions are about the logic, an entire channel dedicated to the if() statement
[18:48:18] <Riviera> mh
[18:48:36] <Riviera> what else could be discussed?
[18:49:09] <Riviera> awk as a tool is mostly if()s, isn't it? :)
[18:52:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2810:3afa:c444:8029) (Ping timeout: 250 seconds)
[18:54:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241)
[18:55:39] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[18:57:24] <earnestly> pattern matching in general is a great time
[19:07:32] <Patsie> isn't that also just 'sort of an if'?
[19:10:35] <yeti> (cond (test action) (test action) ... )
[19:10:49] <yeti> awk just lists the test/acttion pairs
[19:11:28] <yeti> an awklike in lisp could be a nice experiment
[19:14:29] <earnestly> Patsie: More or less, yep
[19:14:46] <earnestly> yeti: If you do that, implement features from states(1) as well
[19:22:30] *** Quits: shbot (~shbot@37.139.2.101) (Read error: Connection reset by peer)
[19:22:36] *** Joins: shbot7 (~shbot@37.139.2.101)
[19:27:03] <Patsie> ah, Operation Tango is on sale on Steam, nice
[19:30:42] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:30:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[19:34:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:35:31] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:51:36] *** Joins: Torr (~Torr@user/torr)
[20:13:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:39:05] *** Joins: dextaa7 (~DV@user/dextaa)
[20:39:11] *** Joins: egrain (felix@31.204.155.215)
[20:40:25] *** Joins: vlm_ (~vlm@user/vlm)
[20:42:20] *** Joins: ccl_ (ccl@shell.xshellz.com)
[20:42:55] *** Joins: rundown (~eb0t@90.199.243.11)
[20:47:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[20:47:36] *** Quits: tirnanog (~tirnanog@user/tirnanog) (*.net *.split)
[20:47:36] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241) (*.net *.split)
[20:47:36] *** Quits: lavaball (felix@31.204.155.215) (*.net *.split)
[20:47:36] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[20:47:37] *** Quits: defjam (~eb0t@90.199.243.11) (*.net *.split)
[20:47:37] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[20:47:37] *** Quits: ccl (ccl@shell.xshellz.com) (*.net *.split)
[20:47:37] *** dextaa7 is now known as dextaa
[20:47:37] *** vlm_ is now known as vlm
[20:52:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:52:08] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[20:52:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241)
[20:52:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Max SendQ exceeded)
[20:55:47] *** rundown is now known as defjam
[20:56:25] *** Joins: seninha (~seninha@user/seninha)
[20:57:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:59:35] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:01:30] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 265 seconds)
[21:01:30] *** X-Scale` is now known as X-Scale
[21:10:50] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[21:10:57] *** Joins: ^wuseman (~wuseman@90-227-27-97-no68.tbcn.telia.com)
[21:11:21] *** ^wuseman is now known as Guest3499
[21:13:32] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[21:13:49] *** Joins: _val__ (~valentin@82-169-14-137.biz.kpn.net)
[21:14:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:14:06] *** Joins: rundown (~eb0t@90.199.243.11)
[21:14:28] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: defjam (~eb0t@90.199.243.11) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: _val_ (~valentin@82-169-14-137.biz.kpn.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: eoli3n (~eoli3n@162.38.105.222) (Remote host closed the connection)
[21:15:15] *** Joins: eoli3n (~eoli3n@162.38.105.222)
[21:25:43] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[21:35:59] *** Quits: egrain (felix@31.204.155.215) (Remote host closed the connection)
[21:49:46] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[21:50:34] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 252 seconds)
[21:51:52] *** Quits: Guest3499 (~wuseman@90-227-27-97-no68.tbcn.telia.com) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[21:51:59] *** X-Scale` is now known as X-Scale
[22:00:41] *** Joins: wuseman (~wuseman@90-227-27-97-no68.tbcn.telia.com)
[22:00:42] *** Quits: wuseman (~wuseman@90-227-27-97-no68.tbcn.telia.com) (Changing host)
[22:00:42] *** Joins: wuseman (~wuseman@user/wuseman)
[22:01:41] *** Quits: rundown (~eb0t@90.199.243.11) (Ping timeout: 252 seconds)
[22:03:21] *** Joins: rundown (~eb0t@90.202.46.160)
[22:06:45] *** Joins: X-Scale` (~ARM@46.50.4.85)
[22:07:06] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[22:09:07] *** X-Scale` is now known as X-Scale
[22:09:53] *** Joins: roarde (~roarde@user/roarde)
[22:18:20] *** Joins: seninha (~seninha@user/seninha)
[22:36:14] *** Quits: ttmrichter (~ttmrichte@user/ttmrichter) (Quit: Client closed)
[23:19:28] *** Joins: lgc (~lgc@user/lgc)
[23:34:02] *** Quits: pwndave (pwndave@2a01:4f8:c17:efa0::4) (Ping timeout: 260 seconds)
[23:35:34] *** Quits: brw (~bas@static.66.39.12.49.clients.your-server.de) (Ping timeout: 268 seconds)
[23:36:20] *** Joins: brw (~bas@static.66.39.12.49.clients.your-server.de)
[23:37:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[23:38:03] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[23:40:57] *** Joins: lavaball (felix@31.204.155.215)
[23:46:26] *** Joins: pwndave (pwndave@2a01:4f8:c17:efa0::4)
[23:56:33] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
