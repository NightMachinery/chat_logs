[00:53:37] *** Joins: Torr (~Torr@user/torr)
[01:12:35] *** Quits: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[01:12:56] *** Joins: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[01:30:26] *** Joins: Atque (~Atque@user/atque)
[02:07:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[02:08:07] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:17:13] *** Quits: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[02:34:30] *** Quits: Davidian1024 (~Davidian1@d14-69-248-209.try.wideopenwest.com) (Quit: Client closed)
[02:49:12] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:56:05] *** Joins: emanuele6 (~emanuele6@net-2-36-148-173.cust.vodafonedsl.it)
[02:56:11] *** Quits: emanuele6 (~emanuele6@net-2-36-148-173.cust.vodafonedsl.it) (Changing host)
[02:56:11] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[03:00:11] *** Joins: gurki (~gurki@user/gurki)
[03:16:44] *** Quits: az (az@user/azz) (Write error: Connection reset by peer)
[03:20:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:30:00] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:30:10] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:39:38] *** Joins: az (az@stable.bnc.by.bnc4you.xyz)
[03:40:02] *** az is now known as Guest7716
[04:11:00] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 265 seconds)
[05:22:03] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[05:47:22] *** Joins: Torr (~Torr@user/torr)
[05:50:52] *** Joins: wuseman (~wuseman@81-236-212-3-no68.tbcn.telia.com)
[05:50:52] *** Quits: wuseman (~wuseman@81-236-212-3-no68.tbcn.telia.com) (Changing host)
[05:50:52] *** Joins: wuseman (~wuseman@user/wuseman)
[05:55:15] *** Joins: ferdna (~ferdna@user/ferdna)
[06:05:35] *** Joins: vlm (~vlm@user/vlm)
[06:42:31] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 256 seconds)
[07:00:59] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:07:18] <hejux> i'd like to hide Recv-Q and Send-Q from ss -nutlp output, how do i do that with sed?
[07:08:27] <e36freak> i have no idea what that output looks like
[07:09:24] <hejux> e36freak:https://paste.rs/ufE
[07:10:19] <hejux> i think the fieds are separated by space and tab 
[07:12:12] <e36freak> sed's a pretty poor tool for dealing with columnar data
[07:13:13] <e36freak> in your paste it's all spaces
[07:14:39] <hejux> well, that is the ss output, there is no option to filter that 2 fields in `ss` 
[07:15:43] <e36freak> it's easy enough to say remove 3rd and 4th field with awk but you're gonna lose field widths unless you get fancy
[07:16:09] <hejux> how to do it with awk?
[07:17:58] <e36freak> ss -nutlp | awk '{for (f=1;f<=NF;f++) if (f!=3&&f!=4) printf("%s\t", $f); print ""}' | column -ts $'\t'
[07:18:01] <e36freak> is an easy way
[07:18:31] <e36freak> doesn't quite handle empty fields right though
[07:18:45] <e36freak> man that's a shitty output format from ss
[07:18:49] <e36freak> you have gawk?
[07:19:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[07:24:42] <hejux> e36freak: yes, i have gawk 
[07:24:53] <hejux> it is installed by default 
[07:25:39] <hejux> /usr/bin/awk -> gawk
[07:25:41] <hejux> lol. 
[07:28:39] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[07:30:28] *** Quits: shbot (~shbot@37.139.2.101) (Remote host closed the connection)
[07:30:37] *** Joins: shbot (~shbot@37.139.2.101)
[07:31:54] <e36freak> you can use FIELDWIDTHS
[07:34:25] <e36freak> ss -nutlp | awk -v FIELDWIDTHS="6 7 7 6 35 5 100" '{for (f=1;f<=NF;f++)if(f!=3&&f!=4)printf("%s", $f); print ""}'
[07:37:24] <emanuele6> e36freak: since the input is space padded, can't you just get the starting and ending index of "Recv-Q ... Send-Q" and remove them from every line?
[07:37:53] <e36freak> you could also do that, yes
[07:38:05] <e36freak> FIELDWIDTHS is the first thing that came to mind
[07:39:18] <emanuele6> oh, i don't know if that would work though
[07:39:26] <e36freak> » ss -nutlp | awk '{printf("%s %s\n", substr($0, 1, 13), substr($0, 27))}'
[07:39:36] <e36freak> should work fine
[07:39:46] <emanuele6> because generally if a program uses space padding, the padding depends on the longest element in the column
[07:40:02] <e36freak> yeah the firsst parts should be pretty fixed though
[07:40:12] <e36freak> i think that one with substr() is the winner
[07:40:33] <emanuele6> awk 'NR==1 { match($0,/Recv-Q +Send-Q +/) } { print substr($0,1,RSTART-1)substr($0,RSTART+RLENGTH) }'
[07:40:39] <emanuele6> this is the one i sent in #awk 
[07:40:47] <e36freak> k
[07:43:40] *** Quits: fcr (~fran@r167-60-9-134.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[07:52:21] *** Joins: fcr (~fran@r186-48-53-94.dialup.adsl.anteldata.net.uy)
[08:05:57] *** Quits: larryv (~larryv@zsh/patchmanager/larryv) (Quit: larryv)
[08:51:36] *** Joins: r3m (~launch@user/r3m)
[09:29:08] *** Atque is now known as hammond
[09:29:17] *** hammond is now known as Atque
[09:32:02] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[09:32:02] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[09:32:03] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[09:32:03] *** Quits: izabera (izabera@user/izabera) (*.net *.split)
[09:32:20] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[09:32:40] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[09:32:43] *** Joins: izabera (izabera@2a01:7e00::f03c:92ff:fe92:6cd9)
[09:33:26] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[09:36:24] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (*.net *.split)
[09:36:25] *** Quits: ccl (ccl@shell.xshellz.com) (*.net *.split)
[09:36:34] *** Joins: ccl (ccl@shell.xshellz.com)
[09:36:46] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[10:06:20] *** Joins: nerozero (~nerozero@87.253.63.54)
[10:46:56] *** Joins: wuseman (~wuseman@81-234-125-157-no68.tbcn.telia.com)
[10:46:57] *** Quits: wuseman (~wuseman@81-234-125-157-no68.tbcn.telia.com) (Changing host)
[10:46:57] *** Joins: wuseman (~wuseman@user/wuseman)
[10:54:08] *** Joins: lgc (~lgc@user/lgc)
[11:22:16] <hejux> precede 'add office ' to every line of a file?
[11:23:45] <hejux> sed 's||add office |g' file
[11:23:50] <emanuele6> ^
[11:23:53] <emanuele6> and no g
[11:24:36] <emanuele6> you want to match the nothing at the start of the line (with /^/) and replace it with "add office"
[11:24:56] <emanuele6> # <<< sed 's|^|add office |'
[11:24:57] <shbot> emanuele6: bash: s|^|add office |: command not found
[11:24:59] <emanuele6> oops
[11:25:08] <emanuele6> # <<< 'some random text' sed 's|^|add office |'
[11:25:09] <shbot> emanuele6: add office some random text
[11:25:35] <hejux> s/^.+$/add office &/ , what about this? 
[11:25:42] <hejux> what does this mean 
[11:25:52] <emanuele6> well, that is invalid in regular sed
[11:25:59] <emanuele6> well, not invalid
[11:26:31] <emanuele6> # <<< 'x+' sed 's/^.+$/add office &/'
[11:26:32] <shbot> emanuele6: add office x+
[11:26:37] <emanuele6> # <<< 'xx' sed 's/^.+$/add office &/'
[11:26:38] <shbot> emanuele6: xx
[11:27:15] <emanuele6> it prepends 'add office ' to each lines that are two characters long and end in +
[11:27:34] <emanuele6> # <<< 'xx+' sed 's/^.+$/add office &/'
[11:27:35] <hejux> sed -r ?
[11:27:36] <shbot> emanuele6: xx+
[11:28:13] *** Joins: TomyWork (~TomyLobo@p200300e80f0f270088f808e325e1c9fc.dip0.t-ipconnect.de)
[11:28:50] <hejux> # <<< 'xx' sed -r 's/^.+$/add office &/'
[11:28:51] <shbot> hejux: add office xx
[11:29:03] <emanuele6> `sed -E' (non-standard) or `sed -r' ("deprecated" equivalent of `sed -E')?
[11:29:22] <emanuele6> in that case ^.+$ matches every line that is at least one character long
[11:29:31] <emanuele6> and prepends "add office " to it
[11:29:47] <emanuele6> # <<< '' sed -E 's/^.+$/add office &/'
[11:29:47] <shbot> emanuele6: no output
[11:29:52] <emanuele6> # <<< 'x' sed -E 's/^.+$/add office &/'
[11:29:53] <shbot> emanuele6: add office x
[11:30:03] <emanuele6> # <<< 'x' sed 's/^/add office /'
[11:30:04] <shbot> emanuele6: add office x
[11:30:07] <hejux> what about that & 
[11:30:08] <emanuele6> # <<< '' sed 's/^/add office /'
[11:30:09] <shbot> emanuele6: add office
[11:30:29] <emanuele6> hejux: that is everything that was matched by the given regex
[11:30:50] <emanuele6> and ^.+$ matches everything (but only in lines that are not empty)
[11:31:25] <emanuele6> by the way, you can write the exact same thing with regular sed..
[11:31:41] <hejux> yes, empty lines should be considered 
[11:31:48] <emanuele6> sed 's|^..*$|add office &|'
[11:31:59] <emanuele6> that is the same as ^.+$ with -E
[11:32:45] <geirha> or sed 's|^.|add office &|'
[11:33:10] <emanuele6> yes, that also works
[11:33:28] <hejux> simpler and portable
[11:33:46] <emanuele6> in that case & is only the first character of the line, and the rest of the line remains because it is not replaced
[11:34:04] <emanuele6> hejux: what do you mean? you said that empty lines should be considered
[11:34:30] <emanuele6> sed 's|^.|add office &|' does not consider empty lines, it is just and equivalent of sed 's|^..*$|add office &|'
[11:34:32] <hejux> should not add the prefix to empty lines 
[11:34:51] <emanuele6> but you just said the opposide :/
[11:34:59] <hejux> sorry my english 
[11:35:00] <emanuele6> s/side/site/
[11:35:19] <geirha> what about non-empty blank lines?
[11:36:17] <hejux> anything with newline, empty space tab lines do not need the prefix 
[11:36:49] <emanuele6> if you want to get rid of those you too, you can use: sed '/^[[:blank:]]*$/d; s/^/add office /'
[11:37:01] <emanuele6> s/you//2
[11:37:41] <hejux> cool!
[11:37:59] <emanuele6> # printf '%s\n' 'x' '   ' '2' | sed '/^[[:blank:]]*$/d; # s/^/add office /'
[11:38:00] <shbot> emanuele6: x
[11:38:00] <shbot> emanuele6: 2
[11:38:27] <hejux> well, #
[11:38:29] <emanuele6> /^[[:blank:]]*$/ runs the following command if the line only contains blank characters or is empty
[11:38:36] <emanuele6> and d deletes those lines
[11:38:47] <emanuele6> that is what /^[[:blank:]]*$/d does by itself
[11:38:57] <emanuele6> # printf '%s\n' 'x' '   ' '2' | sed '/^[[:blank:]]*$/d;s/^/add office /'
[11:38:58] <shbot> emanuele6: add office x
[11:38:58] <shbot> emanuele6: add office 2
[11:39:40] <emanuele6> and then you can apply that s command (without having to use . and &) to prepend "add office " to all the lines that didn't get deleted
[11:42:24] <hejux> emanuele6: if blank lines should remain there but not get the prefix? 
[11:43:11] <emanuele6> should the blank characters on those lines be deleted or should they remain untouched?
[11:43:33] <hejux> untouched 
[11:43:50] <emanuele6> sed 's/^./add office &/'
[11:44:02] <emanuele6> oh, oops
[11:44:09] <emanuele6> i meant
[11:45:02] <emanuele6> # printf '%s\n' 'hi' '  ' '' | sed '/^[[:blank:]]*$/!s/^/add office /' | sed 's,$,$,'
[11:45:03] <shbot> emanuele6: add office hi$
[11:45:03] <shbot> emanuele6:   $
[11:45:03] <shbot> emanuele6: $
[11:45:25] <emanuele6> the final sed is just to show that the line remained untouched
[11:45:37] *** Joins: ^wuseman (~wuseman@81-234-125-157-no68.tbcn.telia.com)
[11:45:37] *** Quits: ^wuseman (~wuseman@81-234-125-157-no68.tbcn.telia.com) (Changing host)
[11:45:37] *** Joins: ^wuseman (~wuseman@user/wuseman/x-1147134)
[11:45:42] <geirha> that's probably the same output sed -n l would produce
[11:46:05] <geirha> # printf '%s\n' 'hi' '  ' '' | sed '/^[[:blank:]]*$/!s/^/add office /' | sed -n l
[11:46:06] <shbot> geirha: add office hi$
[11:46:06] <shbot> geirha:   $
[11:46:06] <shbot> geirha: $
[11:46:10] <hejux> # printf '%s\n' ' hi' '  ' '' | sed 's/^./add office &/'
[11:46:11] <shbot> hejux: add office  hi
[11:46:11] <shbot> hejux: add office
[11:46:18] <emanuele6> i always forget about it
[11:46:28] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 264 seconds)
[11:46:42] <emanuele6> /^[[:blank:]]*$/! (notice the `!') runs the following command only if the line does NOT match the regex
[11:47:04] <hejux> # printf '%s\n' ' hi' '  ' '' | sed 's|^..*$|add office &|'
[11:47:05] <shbot> hejux: add office  hi
[11:47:05] <shbot> hejux: add office
[11:47:15] <emanuele6> so only if the line is not empty and contains at least one non-blank character
[11:47:27] <emanuele6> and then s/^/add office / prepends add office
[11:47:50] <hejux> # printf '%s\n' ' hi' '  ' '' | sed '/^[[:blank:]]*$/d;s/^/add office /'
[11:47:51] <shbot> hejux: add office  hi
[11:47:53] <emanuele6> /[^[:blank:]]/ should work as well work
[11:48:14] <emanuele6> # printf '%s\n' 'hi' '  ' '' | sed '/[^[:blank:]]/s/^/add office /' | sed -n l
[11:48:15] <shbot> emanuele6: add office hi$
[11:48:15] <shbot> emanuele6:   $
[11:48:15] <shbot> emanuele6: $
[11:48:45] <emanuele6> if the line contains at least one non-blank character prepend "add office " to it
[11:49:28] <emanuele6> as opposed to: if the line is not empty and does not only contain blank characters, prepend "add office"
[11:51:15] <hejux> # printf '%s\n' '      hi' '  ' '' | sed '/[^[:blank:]]/s/^/add office /' | sed -n l
[11:51:16] <shbot> hejux: add office       hi$
[11:51:16] <shbot> hejux:   $
[11:51:16] <shbot> hejux: $
[11:51:25] <hejux> # printf '%s\n' '      hi' '  ' '' | sed '/[^[:blank:]]/s/^/add office /'
[11:51:26] <shbot> hejux: add office       hi
[11:52:09] <emanuele6> shbot removes blank lines at the end of the output
[11:52:16] <hejux> locate non-blank line, precede 'add office ' to those lines ?
[11:52:58] <emanuele6> if there is at least one non-blank character in the current line, prepend "add office " to the current line
[11:54:56] <hejux> this is it 
[11:55:23] <hejux> this is gonna work perfectly : '/[^[:blank:]]/s/^/add office /'
[11:58:41] <emanuele6> hejux: it's exactly like    /[^[:blank:]]/ { sub(/^/, "add office ") }     in awk, right?
[11:59:01] <emanuele6> /[^[:blank:]]/ is the condition on which you run the command
[11:59:33] <emanuele6> and s/^/add office / is the exact same as   sub(/^/, "add office ")
[11:59:33] <hejux> why no g?
[11:59:54] <geirha> there can only be one match per line
[11:59:54] <emanuele6> and there is an implicit {print} at the end because that is how sed works
[12:00:19] <emanuele6> hejux: you can match ^ (the start of the line) only once, no?
[12:00:29] <hejux> right, that ^
[12:00:30] <emanuele6> there is only one start of the line per line
[12:00:51] <emanuele6> it will work if you use /g, but there is really no point..
[12:02:54] <emanuele6> s/re/str/ (equivalent to s/re/str/1) replaces the first match of the regex re for str
[12:03:11] <emanuele6> s/re/str/2 replaces the second match of the regex re for str
[12:03:23] <emanuele6> etc
[12:03:41] <emanuele6> s/re/str/g replaces ALL the matches of the regex re with str
[12:04:18] <emanuele6> since ^ will only have one match, there is no difference, but adding g is pointless
[13:04:46] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:07:52] *** Joins: ztx (~ztx@user/ztx)
[13:15:19] *** Joins: earnest (~earnest@user/earnestly)
[13:26:01] *** Quits: shbot (~shbot@37.139.2.101) (Remote host closed the connection)
[13:26:10] *** Joins: shbot (~shbot@37.139.2.101)
[13:32:00] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[13:35:37] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[13:36:23] *** Joins: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[13:55:54] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[14:10:18] *** Quits: izabera (izabera@2a01:7e00::f03c:92ff:fe92:6cd9) (Changing host)
[14:10:18] *** Joins: izabera (izabera@user/izabera)
[14:49:03] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:52:23] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[14:55:02] *** Quits: Penguin666x (~Penguin66@217.138.205.135) (Ping timeout: 240 seconds)
[14:57:00] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[18:17:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:22:33] *** Joins: larryv (~larryv@zsh/patchmanager/larryv)
[19:41:59] *** Quits: nerozero (~nerozero@87.253.63.54) (Ping timeout: 252 seconds)
[19:49:40] *** Quits: fcr (~fran@r186-48-53-94.dialup.adsl.anteldata.net.uy) (Ping timeout: 256 seconds)
[19:55:19] *** Joins: fcr (~fran@r186-48-15-183.dialup.adsl.anteldata.net.uy)
[20:39:05] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:23:14] *** Quits: ^wuseman (~wuseman@user/wuseman/x-1147134) (Read error: Connection reset by peer)
[21:37:10] *** Joins: wuseman (~wuseman@81-236-212-3-no68.tbcn.telia.com)
[21:37:10] *** Quits: wuseman (~wuseman@81-236-212-3-no68.tbcn.telia.com) (Changing host)
[21:37:10] *** Joins: wuseman (~wuseman@user/wuseman)
[23:31:07] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (Remote host closed the connection)
[23:32:12] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[23:32:56] *** Quits: izabera (izabera@user/izabera) (Ping timeout: 265 seconds)
[23:33:53] *** Joins: izabera (izabera@2a01:7e00::f03c:92ff:fe92:6cd9)
