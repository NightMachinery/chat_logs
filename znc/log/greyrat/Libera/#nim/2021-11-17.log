[00:18:11] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[00:18:43] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:26:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[00:49:24] <FromDiscord> <z3nchada> Hello I am looking for the correct channel to post a language specific question. Specifically the best practices for catching exceptions, I am running into an issue where if I try to catch an exception I end up seg-faulting when raising said exception. I want to be sure its not an issue in the way I am writing things before posting an issue. PS I am new to nim but competent in C/Asm and a mixed bag of other languages.
[00:53:42] <FromDiscord> <hotdog> In reply to @z3nchada "Hello I am looking": You can post here
[00:54:18] <FromDiscord> <hotdog> Also have a look at https://nim-lang.org/docs/segfaults.html it may help you
[00:57:20] <FromDiscord> <IsaacPaul> https://nim-lang.org/docs/tut2.html#exceptions↵This should also help ^
[00:58:53] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Fcc
[01:06:09] <FromDiscord> <z3nchada> In reply to @hotdog "You can post here": Thanks. The segfault happens in removeChunkFromMatrix in alloc.nim; no segfault when I don't catch. Here is an example of how I am using the try catch block.
[01:07:18] <tk> let v = collect: for a, b in combinations(s): a * b where s is a seq[HashSet] and combinations is an inline iterator taking an open_array[T] and returning a tuple[a: T, b: T]
[01:07:37] <tk> according to the docs, this should give me a hash-set which is a union of all the individual results collected together
[01:07:40] <FromDiscord> <z3nchada> sent a code paste, see https://play.nim-lang.org/#ix=3Fcd
[01:07:48] <tk> so it's a union of the intersection of all the things which combinations produced
[01:07:56] <FromDiscord> <Stuffe> Does a custom sort function that always returns 1 guarantee an OrderedTable will always be reversed? Any better way I should use to do this?
[01:08:04] <tk> but in practice I'm getting a single-element seq of a HashSet
[01:08:06] <tk> why?
[01:08:20] <FromDiscord> <z3nchada> (edit) "https://play.nim-lang.org/#ix=3Fcd" => "https://play.nim-lang.org/#ix=3Fce"
[01:09:11] <FromDiscord> <konsumlamm> are you sure that `combinations` yields more than one element?
[01:09:40] <FromDiscord> <z3nchada> sent a code paste, see https://play.nim-lang.org/#ix=3Fcf
[01:10:29] <FromDiscord> <konsumlamm> In reply to @Stuffe "Does a custom sort": i assume you mean a compare function? and wdym by a "reversed ORderedTable"?
[01:11:56] <FromDiscord> <konsumlamm> In reply to @z3nchada "Is there something inherently": nothing about this should be unsafe
[01:12:50] <FromDiscord> <konsumlamm> sent a code paste, see https://play.nim-lang.org/#ix=3Fcg
[01:15:03] <FromDiscord> <z3nchada> In reply to @konsumlamm "btw, you don't need": gotch-ya. Thanks I just wanted to be very explicit to be sure its a bug considering it all comes from stdlibs.
[01:15:34] <tk> okay, collect is weird
[01:15:36] <tk> let me clean up this testcase
[01:17:01] <FromDiscord> <konsumlamm> In reply to @z3nchada "gotch-ya. Thanks I just": but note that `Exception`s (which includes `Defect`s) should not be catched, use `CatchableError` for that (or, even better, the name of the exception you wanna catch)
[01:17:33] <tk> http://ix.io/3Fci - this kind of explains the issue
[01:18:10] <tk> in fact, it is the crux of the issue
[01:18:33] <tk> does collect inspect the last thing in the AST to see if it's in brackets?
[01:18:43] <FromDiscord> <konsumlamm> (btw, for future reference, it's more useful to provide code via the playground, so that we can directly run it)
[01:18:58] <FromDiscord> <IsaacPaul> In reply to @Stuffe "Does a custom sort": Unless let it specifically states it somewhere I would assume no. It may work today but may change tomorrow if it's not part of a spec.
[01:19:15] <FromDiscord> <konsumlamm> In reply to @tk "does collect inspect the": it does, yes, and colelcts it into a set then iirc
[01:19:28] <tk> and, moreover, is it possible to have THAT feature without having to put brackets at the end?
[01:19:53] <tk> since I like the implicit union feature but actually can't put brackets there (as then it gives me a set of sets)
[01:21:08] <FromDiscord> <konsumlamm> sent a code paste, see https://play.nim-lang.org/#ix=3Fcl
[01:21:33] <FromDiscord> <z3nchada> In reply to @konsumlamm "but note that `Exception`s": When I use the correct Exception to catch it doesn't segfault. Only with `except Exception as e: ...` If there is not try catch block it just raises the exception, no seg-fault
[01:22:13] <FromDiscord> <Stuffe> In reply to @konsumlamm "i assume you mean": an ordered table has an order to it. I need to reverse that order
[01:22:14] <FromDiscord> <z3nchada> (edit) "seg-fault" => "seg-fault. e.g. `except NamedException: return nil`"
[01:24:57] <FromDiscord> <Stuffe> another crufty way of doing it other than a custom sort function that always returns 1 would be creating an array of the keys, then reverse that and then create a new table
[01:39:29] <FromDiscord> <IsaacPaul> you could use mpairs to build a new table.. though it's weird that you _need_ to reverse the order of the table tho. I would prefer this for piece of mind.. ↵↵It looks like sorting starts at the first item and works its way to the last item. It's probably safe (assuming it works), but I can't tell because the sort code is heavily nested and has a ton of single character variables .-.
[01:39:45] <FromDiscord> <IsaacPaul> (edit) "tho. I would prefer this for piece of mind.. ↵↵It" => "tho.↵↵It"
[02:21:41] *** Joins: audiophile (~audiophil@user/audiophile)
[03:41:22] <FromDiscord> <evoalg> In reply to @tk "http://ix.io/3Fci - this kind": tk sorry I'm just wondering what output are you wanting from that instead?
[03:53:01] <tk> FromDiscord: I would like the behaviour of collect: for x in y: {x} except that instead of what looks like a single-element set of x I want an actual set there
[03:53:08] <tk> so the end result is a union of all sets collected
[03:53:16] <tk> er, evoalg: sorry, muscle memory
[03:58:14] <tk> http://ix.io/3FcO - as an unrelated note - AOC 2019 day 3 in nim. Comments (except for regarding the use of 3 space indent and snake case) welcome
[04:01:42] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[04:02:28] *** Joins: xet7 (~xet7@user/xet7)
[04:05:39] <FromDiscord> <Elegantbeef> Hmmm collect doesnt seem like the right thing here, you're iterating over a collection then wanting to return a single one?
[04:05:54] <tk> well that's kind of what it does in the {x} case
[04:06:09] <tk> it returns a single HashSet
[04:07:07] <FromDiscord> <Elegantbeef> What's the expected output from the collect i guess is what i need to ask
[04:07:16] <FromDiscord> <Elegantbeef> is it `{1, 2, 3}`?
[04:08:13] <tk> so I would like   collect: for i in 1..3: {i}   and   collect: for i in 1..3: let s = {i}; s   to behave the same
[04:08:41] <tk> or some way of doing what the former does with the latter
[04:09:00] *** Joins: Colt (~Colt@user/colt)
[04:10:25] <tk> http://ix.io/3FcN - a slightly improved version of the code before
[04:11:31] <FromDiscord> <Elegantbeef> Hmm i wonder if a new `collect` variant needs to exist so you can do `collectWith(call):`
[04:12:16] <FromDiscord> <Elegantbeef> though i guess that'd result to be the same as `collect(initHashSet, incl): for x in 1..3: let s = {i}; s`
[04:12:33] *** Quits: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Quit: Leaving)
[04:12:43] <FromDiscord> <Elegantbeef> Oddly the collect macro reasons the proc to call by expression's value
[04:13:44] <FromDiscord> <Elegantbeef> I know that really makes collect manually done, but presently i cannot reason anything that makes any sense here
[04:14:31] <FromDiscord> <Elegantbeef> alternatively instead of adding the call to `incl` you  just make the expression value be `incl(s)` or `add(s)`
[04:15:55] <FromDiscord> <Elegantbeef> Ah fuck yea i like this idea more take a type as the first parameter and make it have to have a `init(_: typedesc[T]): T`, then you can just do `collect(HashSet[int]): for i in 1..3: let s = {i} incl(s)`
[04:16:17] <FromDiscord> <Elegantbeef> I'm sure someone will say "that's fucking dumb"
[04:17:44] <FromDiscord> <impbox [ftsf]> that'd be rude and dismissive and not a nice thing to say
[04:18:05] <FromDiscord> <impbox [ftsf]> Instead I'll say, what is `collect` anyway?
[04:18:32] <FromDiscord> <Elegantbeef> It's a macro to short form block statements
[04:19:17] <FromDiscord> <Elegantbeef> Both are the same
[04:19:18] <FromDiscord> <impbox [ftsf]> I'm looking at the examples and I don't get what they're trying to do
[04:19:21] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FcS
[04:20:00] <FromDiscord> <impbox [ftsf]> hmm, so useful when you want to initialise a variable with a complex thingy?
[04:20:10] <FromDiscord> <Elegantbeef> It's like list comprehension in python
[05:07:13] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Fd0
[05:07:48] <FromDiscord> <sharpcdf> I'm reading through the documentation on the `importJs` pragma(`importCpp`), but it isnt really specific, can anyone give an example of the pragma in action?
[05:14:25] <FromDiscord> <Elegantbeef> Here's a shitty binding ontop of some of the MRAPI https://github.com/beef331/mrapi/blob/master/src/mrapi.nim
[05:14:36] <FromDiscord> <Elegantbeef> This shows the JS and the Nim wrapping it all in one file so it's "nice"
[05:22:41] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "Here's a shitty binding": if I may ask, why does it use `{.importC.}` instead of `{.importJs.}`?
[05:22:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Fd3
[05:22:59] <FromDiscord> <Elegantbeef> They do the same thing so only reason is i was using importc
[05:23:07] <FromDiscord> <sharpcdf> oh alright
[05:23:18] <FromDiscord> <sharpcdf> thanks
[05:25:30] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "They do the same": how does the nim compiler find what file contains the given functions? does it just go through all `.js` files in the same directory?
[05:26:06] <FromDiscord> <Elegantbeef> Nope it doesnt know anything about the js files
[05:26:21] <FromDiscord> <Elegantbeef> It just says "yep this is a proc", it's a runtime error
[05:26:40] <FromDiscord> <sharpcdf> then how do you give the js files to it?
[05:26:57] <FromDiscord> <Elegantbeef> You dont need to
[05:27:05] <FromDiscord> <Elegantbeef> As long as you point it to the right name it doesnt matter
[05:27:15] <FromDiscord> <sharpcdf> oh ok
[05:27:20] <FromDiscord> <sharpcdf> nice
[05:27:34] <FromDiscord> <Elegantbeef> It's the same thing with C, the error doesnt happen in Nim's compilation it's in C's compilation
[05:27:47] <FromDiscord> <Elegantbeef> Cause Nim just says "Hey i'm calling X here which resides in C"
[05:27:52] <FromDiscord> <Elegantbeef> Or Js in this case
[05:28:20] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "Cause Nim just says": i think i know what you're saying, but what if I want to import an external javascript/c library, like raylib or react native?
[05:28:39] <FromDiscord> <Elegantbeef> You import it?
[05:29:20] <FromDiscord> <sharpcdf> do you just do `{.importJs: "someFile.js".}`?
[05:29:25] <FromDiscord> <Elegantbeef> When you do `importC`/`importJs` what nim does in the generated code is write  what you told it, so if you do `proc doThing{.importJs: "heh".}` when you do `doThing()` it'll write `heh`
[05:30:01] <FromDiscord> <Elegantbeef> You might be thinking of https://nim-lang.org/docs/jsffi.html#require%2Ccstring ?
[05:30:22] <FromDiscord> <Elegantbeef> But you do not import js files into Nim, you import js function/type names and then nim just emits what it should
[05:30:38] <FromDiscord> <Elegantbeef> So that mrapi example is the same regardless if that js is in the nim file or in another file
[05:30:48] <FromDiscord> <Elegantbeef> All you have to do if it's in another file is ensure it loads before the nim file does
[05:41:31] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Fd6
[05:45:15] <FromDiscord> <ajusa> Anyone know which version of tcc Nim is compatible with? I get segfaults with the version that I seem to have
[05:45:54] <FromDiscord> <Elegantbeef> I've used tcc with devel/1.60 no problem
[05:46:05] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "All you have to": not sure i understand, if you have a function that is defined in javascript(in either a local file or something like react), would you still just copy the function like normal with `{.importJs.}`?
[05:46:13] <FromDiscord> <Elegantbeef> Possibly the `asClosure` does some magic so there might be a chance they're missmatches↵(@evoalg)
[05:46:41] <FromDiscord> <Elegantbeef> You just need to annotate the procedure in nim
[05:47:27] <FromDiscord> <Elegantbeef> Actually yea seems fine evoalg, i actually tested that
[05:47:47] <FromDiscord> <Elegantbeef> The `resetableClosure` cannot be reassigned presently
[05:47:54] <FromDiscord> <Elegantbeef> It creates a anonymous object and uses it
[05:48:25] <FromDiscord> <Elegantbeef> Like for the example i gave previously `a` is a `AnonResetClos`gensym150\`
[05:48:51] <FromDiscord> <Elegantbeef> And no that doesnt mean "i cant write procs that use it", since i have a concept that matches with it
[05:49:28] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Fd9
[05:49:48] <FromDiscord> <Elegantbeef> But that's mostly an implementation detail no one needs to see
[05:55:44] <FromDiscord> <Elegantbeef> evoalg is presently going "Why did i ask anything"
[05:57:04] <FromDiscord> <ajusa> In reply to @Elegantbeef "I've used tcc with": I needed some additional tcc flags for math looks like (there's a github issue in the nim repository about it opened in the last month)
[05:57:19] <FromDiscord> <Elegantbeef> Ah
[05:57:28] <FromDiscord> <Elegantbeef> I know i had to disable simd for pixie with TCC
[05:59:06] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:16:04] <FromDiscord> <evoalg> In reply to @Elegantbeef "Actually yea seems fine": Thank you Elegantbeef - I'm still trying to wrap my head around closures, and when I've studied them a lot more I'll be able to as some sensible questions
[06:19:59] <FromDiscord> <deech> How do I re-export a module I imported?
[06:20:09] <FromDiscord> <Elegantbeef> `export moduleName`
[06:23:10] <FromDiscord> <deech> thanks! Just looked that up in the manual. Can you specify the symbols to re-export? eg. `from A export a,b,c`?
[06:24:00] <FromDiscord> <Elegantbeef> no you just `export a, b, c`
[06:24:52] <FromDiscord> <deech> Ah nice, and I guess if I import the module qualified I can do `export module.a, module.b, module.c`?
[06:25:01] <FromDiscord> <Elegantbeef> Possibly
[06:25:03] <FromDiscord> <Elegantbeef> i do not know
[06:25:04] <FromDiscord> <impbox [ftsf]> or just export a
[06:25:21] <FromDiscord> <impbox [ftsf]> since you imported it it's not in your current module
[06:57:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:22:54] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[07:23:20] *** Joins: Colt (~Colt@user/colt)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:32:36] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[10:07:24] *** Joins: sagax (~sagax_nb@user/sagax)
[10:19:27] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 268 seconds)
[10:22:40] *** Joins: robertmeta (sid514@user/robertmeta)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[11:09:39] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:13:03] *** Joins: PMunch (~PMunch@user/pmunch)
[11:43:49] *** Quits: audiophile (~audiophil@user/audiophile) (Quit: Default Quit Message)
[11:43:50] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[12:02:20] *** Joins: advesperacit (~quassel@h-155-4-32-25.A182.priv.bahnhof.se)
[12:15:39] *** Quits: advesperacit (~quassel@h-155-4-32-25.A182.priv.bahnhof.se) (Ping timeout: 265 seconds)
[12:18:03] *** Joins: advesperacit (~quassel@185.219.140.52)
[12:29:40] <NimEventer> New post on r/nim by SamLovesNotion: How to embed Nim expression inside a string? Like template strings in JS., see https://reddit.com/r/nim/comments/qvv4cs/how_to_embed_nim_expression_inside_a_string_like/
[12:45:10] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[12:45:28] *** Joins: Colt (~Colt@user/colt)
[13:11:11] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 264 seconds)
[13:14:23] *** Joins: robertmeta (sid514@user/robertmeta)
[14:55:34] *** Quits: notchris (sid181145@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[14:58:42] *** Joins: notchris (sid181145@hampstead.irccloud.com)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:24:21] *** Joins: rockcavera (~rc@192.12.113.76)
[16:24:22] *** Quits: rockcavera (~rc@192.12.113.76) (Changing host)
[16:24:22] *** Joins: rockcavera (~rc@user/rockcavera)
[16:42:42] <FromDiscord> <ynfle (ynfle)> How can I use `HashSet` for NimNodes
[16:44:10] <FromDiscord> <licenziato> hi
[16:59:51] <FromDiscord> <hmmm> yea boi I just became a grown up nimmer, I just defined a proc that doesn't end with return but has a big grownup result stuffed in there somewhere
[17:00:10] <FromDiscord> <hmmm> I think disruptek would be proud
[17:00:18] <FromDiscord> <hmmm> where is disruptek btw
[17:00:38] <FromDiscord> <Marisol> Hey everyone, I'm just starting to learn nim, looking for tips/directions to get started... I've read and tried some of the examples in docs, but other than that it's very hard to find tutorials. I'm thinking to make a simple REST JSON API (with CRUD ops) with sqlite database... Is there maybe a repo or example or something that I can study and tinker?
[17:05:08] <PMunch> ynfle_(ynfle), by implementing a `hash` proc for them I believe
[17:05:23] <PMunch> @hmmm, haha nice :P
[17:05:36] <PMunch> And I think disruptek is off in some other channel
[17:07:39] <PMunch> @Marisol, don't know of anything specific for that. You can use https://github.com/dom96/jester for the REST part, the built in `json` module for the JSON part, and the built in `db_sqlite` module for the database.
[17:12:18] <FromDiscord> <Marisol> In reply to @PMunch "<@800992449316126741>, don't know of": Thanks! I'll try it
[17:32:54] <FromDiscord> <enthus1ast> sent a code paste, see https://paste.rs/6A0
[17:49:02] <FromDiscord> <dom96> In reply to @Marisol "Hey everyone, I'm just": Thanks PMunch for suggesting my library 🙂↵In addition I would also suggest using the `norm` package instead of db_sqlite (unless you're comfortable writing all your SQL from scratch), norm will take care of a lot of boilerplate
[17:49:26] <PMunch> Ooh, that's a good suggestion
[17:49:38] <FromDiscord> <dom96> Please feel free to ask if you run into any issues. For what we lack in tutorials we can hopefully make up in real-time help 🙂
[17:49:43] <PMunch> And of course, Jester is still my go to choice when I just need a quick and dirty REST API
[17:52:48] <FromDiscord> <dom96> ❤️
[18:03:43] *** Joins: arkurious (~arkurious@user/arkurious)
[18:03:46] <FromDiscord> <hmmm> In reply to @PMunch "<@800992449316126741>, don't know of": I'm a big fan of jsony library, I think any library that ends in y is bound to be superior to any competition 🧐
[18:11:26] <FromDiscord> <dom96> brb, forking Nim to Nimmy
[18:13:21] <FromDiscord> <hmmm> I wouldnt overstep my buounds like that, araqy should be in charge of the fork
[18:27:19] <FromDiscord> <Mr Axilus> On the topic of Nim favouring structured programming (result over return), it's common to verify arguments with something like `if arg == nil: return nil`, or a more complicated check. Is that stylictically to be avoided? If so, what's the recommended alternative?
[18:27:45] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3FfT
[18:28:21] <FromDiscord> <Zoom> In my book, expressions \> statements
[18:28:22] <FromDiscord> <Mr Axilus> Lol, it did its best
[18:29:14] <FromDiscord> <GalacticColourisation> hey, does nim by default compile down to C and then use a C compiler to compile to machine code?
[18:29:26] <FromDiscord> <dom96> yep
[18:30:00] <FromDiscord> <dom96> In reply to @mraxilus "On the topic of": that's fine, usually `result` is handy when you're building up a result, for example you're returning a string or seq and you want to add items to it
[18:31:18] <FromDiscord> <enthus1ast> [Zoom](https://matrix.to/#/@Zoom:matrix.org)\: yeah, i also avoid auto, but for returning procs and longer stuff i occasionally use it.
[18:32:01] <FromDiscord> <Zoom> Overloading `default` when? \:P Without it `results` aren't as attractive.↵(@dom96)
[18:32:58] <FromDiscord> <Mr Axilus> In reply to @dom96 "that's fine, usually `result`": I thought so, but it doesn't follow the "rule" of one entry and exit point; hence why I asked.
[18:33:42] <FromDiscord> <dom96> In reply to @Zoom "Overloading `default` when? \:P": Sounds to me like a fairly nicely scoped feature, could be fun way to get into compiler coding for someone... although then again I know there are those who are very against any new features being added to Nim 🙂
[18:37:48] <FromDiscord> <Zoom> If I recall correctly, you can define default for a type, but it doesn't get invoked by default or something silly like that. Need to check.↵(@dom96)
[18:42:34] <FromDiscord> <Zoom> https://github.com/nim-lang/RFCs/issues/290↵(@dom96)
[18:42:43] <FromDiscord> <Marisol> In reply to @dom96 "Thanks PMunch for suggesting": Cool, and surprisingly it looks stable, thanks!
[18:43:18] <FromDiscord> <Rika> In reply to @dom96 "Sounds to me like": It’s an RFC right now
[18:43:34] <FromDiscord> <Zoom> And https://github.com/nim-lang/RFCs/issues/252
[18:44:32] <PMunch> @GalacticColourisation, yup
[18:44:36] <FromDiscord> <dom96> A little off-topic but I have some possibly controversial opinions about the RFC repo. It makes writing proposals far too easy and brings no expectation for implementation. IMO we should get rid of all the issues and set up a formal RFC process.
[18:44:45] <FromDiscord> <GalacticColourisation> thank you!
[18:45:13] <PMunch> Well, by default is maybe a stretch
[18:45:16] <FromDiscord> <dom96> So we've got a couple RFCs about the same thing, where are the implementations? are they all waiting on their RFCs to be accepted?
[18:45:25] <PMunch> When you do `nim c <file>` that's what it does
[18:45:35] <FromDiscord> <haxscramper> well, maybe we first need to get a roadmap for the language
[18:46:01] <FromDiscord> <haxscramper> Without that any sort of RFC process is largely meaningless
[18:46:06] <PMunch> If you do `nim cpp <file>` it does the same thing, but with C++ compiler, and `nim js <file>` converts your file to JavaScript to embed on a website (or, with an extra flag, run in Node)
[18:46:11] <FromDiscord> <haxscramper> Ok, I wrote 252 more than a year ago, so what?
[18:46:27] <FromDiscord> <haxscramper> it got accepted, what now?
[18:46:29] <FromDiscord> <dom96> implement it
[18:46:32] <FromDiscord> <GalacticColourisation> ah, i see, is there not an option for direct compilation to machine code?
[18:46:51] <FromDiscord> <haxscramper> when I did 245 I put multiple spec revisions and tried to somehow coordinate my efforts everyone interested, haven't seen it anywhere
[18:47:03] <FromDiscord> <dom96> implementation is far more important than RFCs anyway
[18:47:04] <PMunch> @GalacticColourisation,  nope, why would we do something that your C compiler is already great at?
[18:47:14] <FromDiscord> <GalacticColourisation> true
[18:47:39] <FromDiscord> <haxscramper> this does not work in general case, being able to write good RFC does not equate to being a compiler developer↵(@dom96)
[18:47:46] <FromDiscord> <dom96> @GalacticColourisation if you'd like to reimplement years of GCC/clang lessons then go right ahead 🙂
[18:48:12] <FromDiscord> <dom96> In reply to @haxscramper "this does not work": so what? You expect Araq to implement all the RFCs?
[18:48:19] <FromDiscord> <dom96> That obviously cannot work
[18:48:22] <FromDiscord> <GalacticColourisation> oh, the PR will be accepted? i wrote something similar for my own language a while ago
[18:48:28] <FromDiscord> <dom96> You can learn to be a compiler developer
[18:48:46] <FromDiscord> <haxscramper> And just to remind you, 252 was accepted in form of `field: type = defaultValue`, not for `default()` hook
[18:48:51] <FromDiscord> <haxscramper> `default()/=init`
[18:48:55] <FromDiscord> <haxscramper> so those RFCs are different
[18:49:20] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/910549047683719238): when I did 245 I put multiple spec revisions and tried to somehow coordinate my efforts everyone interested, haven't seen it done anywhere else for any RFC
[18:49:24] <FromDiscord> <dom96> In reply to @GalacticColourisation "oh, the PR will": Doesn't need to be mainlined into Nim, you can easily build a compiler outside the main repo and move faster
[18:49:26] <PMunch> @GalacticColourisation, I'd be impressed if you managed to do it. But it probably wouldn't be merged as that would mean the core devs would have to maintain it
[18:49:38] <FromDiscord> <GalacticColourisation> ah, okay
[18:49:38] <PMunch> And there isn't really much point to having the feature
[18:49:46] <FromDiscord> <GalacticColourisation> yeah i see
[18:49:56] <FromDiscord> <haxscramper> https://github.com/arnetheduck/nlvm↵(@GalacticColourisation)
[18:50:12] <FromDiscord> <GalacticColourisation> oh, nevermind, someone did it already
[18:50:22] <FromDiscord> <Zoom> Not many  like to do hard work if the chance of it being accepted is very low. Prior discussion should lead to correct implementations.↵(@dom96)
[18:50:43] <FromDiscord> <dom96> of course, but even accepted RFCs apparently don't get implementations
[18:51:04] <FromDiscord> <haxscramper> I expect core devs to at least have a roadmap where those efforts are coordinated
[18:51:14] <FromDiscord> <dom96> also rejecting an implementation is much harder than an RFC 😉
[18:51:45] <FromDiscord> <haxscramper> And right now barrier to entry to the compiler development is pretty high
[18:51:56] <FromDiscord> <haxscramper> Yeah,
[18:52:00] <FromDiscord> <haxscramper> nimble PTSD
[18:52:08] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[18:52:35] <arkanoid> hello! Which nim gui library/binding would you consider production ready for a windows desktop app?
[18:52:50] <FromDiscord> <haxscramper> I mean people can work on something provided there is at least an explanation on how to implement things, and you don't feel like you just have to pick a task at random
[18:52:59] <FromDiscord> <dom96> All we can do is push Araq to publish a roadmap more regularly
[18:53:09] <FromDiscord> <dom96> complaining here is preaching to the choir 🙂
[18:53:25] <FromDiscord> <haxscramper> well, complaining to araq is basically meaningless as well
[18:53:40] <FromDiscord> <haxscramper> like, if we need to push community leader to just do something wrt. to managing community
[18:53:54] <FromDiscord> <haxscramper> what is the point if he does not want to do this?
[18:54:02] <FromDiscord> <Zoom> That's kinda bad.↵(@dom96)
[18:54:12] <FromDiscord> <haxscramper> does not understand utility of doing so\
[18:54:24] <FromDiscord> <dom96> In reply to @haxscramper "like, if we need": huh, what do you mean?
[18:54:49] <FromDiscord> <dom96> In reply to @Zoom "That's kinda bad. (<@132595483838251008>)": yeah, but it's a fact of life and pretty universal everywhere
[18:55:06] <FromDiscord> <dom96> but especially in open source
[18:55:21] <FromDiscord> <dom96> we should definitely do more to avoid it though
[18:55:26] <FromDiscord> <haxscramper> In reply to @dom96 "huh, what do you": I mean if we have to constantly remind core development team to talk about their plans, goals, in a way that community can rely on for their expectations,
[18:55:36] <FromDiscord> <haxscramper> remind again and again
[18:55:56] <FromDiscord> <haxscramper> why bother even, not like we can push them to a state when they would be doing so willingly
[18:56:27] <FromDiscord> <dom96> I mean. You sound like you've given up already, so I feel like there isn't much I can say to convince you that reminding it is worth it
[18:56:45] <FromDiscord> <haxscramper> each time someone in chat asks for the roadmap, and all I can do is just say "well, there is no such thing, but last time I've heard we've been working on the XXX and YYY"
[18:57:17] <FromDiscord> <haxscramper> In reply to @dom96 "I mean. You sound": well, it moves us a little closer to having a real roadmap, yes
[18:57:25] <FromDiscord> <haxscramper> maybe it will be written at some point
[18:57:28] <FromDiscord> <haxscramper> then never updated
[18:57:38] <FromDiscord> <haxscramper> or completely forgotted like these "community meetings"
[18:58:00] <FromDiscord> <haxscramper> (edit) "forgotted" => "forgotten"
[18:58:26] <nrds> <06Prestige99> What about something living (like I think godot uses github milestones, a kanban board, or whatever) that people can check out, at will
[18:58:44] <FromDiscord> <treeform> Can orc be used with async code yet?
[18:59:15] <FromDiscord> <dom96> yep, it can be and has been that way for a while afaik
[18:59:26] <FromDiscord> <treeform> oh cool
[18:59:47] <FromDiscord> <haxscramper> In reply to @nrds "<Prestige> What about something": it is not a question of tooling, it is a question of someone willing to maintain this
[18:59:57] <FromDiscord> <Zoom> Just an .md doc with points and links to RFCs/issues in the order of their priority/desirability which Araq could shuffle and tick would be nice.
[18:59:59] <FromDiscord> <dom96> In reply to @haxscramper "it is not a": idneed
[19:00:01] <FromDiscord> <dom96> (edit) "idneed" => "indeed"
[19:00:05] <FromDiscord> <haxscramper> and this can't be done by some random contributors
[19:00:11] <nrds> <06Prestige99> I mean it'd be integrated into the workflow of the maintainers
[19:00:15] <FromDiscord> <dom96> It could be 🙂
[19:00:17] <FromDiscord> <haxscramper> because random contributors can't define a central roadmap
[19:00:41] <FromDiscord> <haxscramper> In reply to @dom96 "It could be 🙂": well, let me throw together a project real quick, and see what araq thinks of my priorities
[19:00:55] <FromDiscord> <dom96> No, you ask Araq what his priorities are and then you put them in a doc
[19:01:00] <FromDiscord> <dom96> Ask him to verify and you're done
[19:01:40] <FromDiscord> <haxscramper> are you serious? we need to attach some special person to ask questions and the copy-paste responses
[19:02:28] <FromDiscord> <haxscramper> (edit) "the" => "then"
[19:02:57] <FromDiscord> <haxscramper> and then as the person who answered the question to verify if their response was understtood/copied correctly?
[19:05:24] <FromDiscord> <Zoom> 🤷 My boss phones me and drops a bunch of stuff to work on me verbally, even though all following communication goes through e-mail. I know he reads from his own damn paper notes, and we're playing in a remote typist... 🤦‍♂️↵(@haxscramper)
[19:05:38] *** Joins: audiophile (~audiophil@user/audiophile)
[19:05:39] *** Joins: audiophile_ (~audiophil@user/audiophile)
[19:07:16] <FromDiscord> <haxscramper> Yeah, except in this case I would need to call the boss, say something like "well, what are our plans", write down the explanation and then everyone else should use it as a reference roadmap
[19:08:09] <arkanoid> I guess it's "no one" then
[19:12:26] <FromDiscord> <Zoom> My post on the forums on the plans for work on documentation attracted so many comments speaking how the docs are fine, even though my point wasn't to criticize per se. In any state of the docs, the work is never done and there's no visible roadmap for it. Instead i got "keep your cs101 out of my docs".
[19:14:15] <FromDiscord> <haxscramper> haven't seen this one - which forum post was it exactly?
[19:15:13] <FromDiscord> <haxscramper> alright, found it  - https://forum.nim-lang.org/t/8091
[19:16:38] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[19:23:06] *** Joins: Vladar (~Vladar@46.162.2.53)
[19:29:55] *** Joins: audiophile__ (~audiophil@user/audiophile)
[19:29:56] *** Joins: audiophile___ (~audiophil@user/audiophile)
[19:30:27] <FromDiscord> <Zoom> sent a long message, see https://paste.rs/Fsv
[19:32:19] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 250 seconds)
[19:32:21] *** audiophile__ is now known as audiophile_
[19:33:11] *** Quits: audiophile (~audiophil@user/audiophile) (Ping timeout: 250 seconds)
[19:34:29] <FromDiscord> <haxscramper> Documentation improvement is an iterative process, and the only thing we can do is to streamline the process of detecting and addressing documentation issues. At this point I already remember most of the stuff I use, and so most of the people participated in the discussion on the forum (like araq/vindaar/stefan etc.)
[19:35:14] <FromDiscord> <haxscramper> So we can fix the docs but can't really see what is wrong, and new people can't fix but at least can see
[19:35:48] <FromDiscord> <haxscramper> `nim doc` result arrangement is not ideal as well, but that is a technical issue mostly
[19:37:47] <FromDiscord> <haxscramper> and in general, all talks I've seen about the documentation missed a very important part - attempt to formulate the definition of the problem, and instead devolved into "I like this, I like this, don't bring your CS here, no I find python docs unreadable, yes, rust docs are good etc. etc."
[19:41:09] <FromDiscord> <dom96> In reply to @haxscramper "are you serious? we": It's just an example of how some "random contributor" could make this happen
[19:42:27] <FromDiscord> <dom96> I don't think it should be expected, but I think in general there isn't anything that a "random contributor" can't do.
[19:43:27] <FromDiscord> <haxscramper> well, actually I think we have an example of sorts
[19:43:40] <FromDiscord> <haxscramper> https://forum.nim-lang.org/t/8627
[19:44:24] <FromDiscord> <haxscramper> From what I've seen, the current roadmap can be aptly summarized as "IC"
[19:44:38] *** Quits: audiophile___ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[19:45:31] <FromDiscord> <haxscramper> so, we have a "random contributor" who also wants to know about nimble, and they get a reply "about Nimble, development has been outsourced, wasn't ready for 1.6.0 and I don't know the plan either"
[19:46:16] <FromDiscord> <dom96> is that a quote? I can't find it
[19:46:42] <FromDiscord> <haxscramper> ctrlf "about Nimble, development has been outsourced, wasn't ready for 1.6.0 and I don't know the plan either" in this chat
[19:46:53] <FromDiscord> <haxscramper> https://discord.com/channels/371759389889003530/371759389889003532/905422111747743805
[19:47:13] <FromDiscord> <haxscramper> after that I closed my RFC btw
[19:47:40] <FromDiscord> <haxscramper> because I didn't want to deal with this
[19:47:51] <FromDiscord> <dom96> oh, in this chat
[19:48:37] <FromDiscord> <haxscramper> you would be really hard pressed to find "random contributor" who had at least the same level of meticulousness when digging up the responses, composing the RFC
[19:49:07] <FromDiscord> <haxscramper> so we had a "random contributor" try this game, it was fun while it lasted, in the end it resulted in "I don't care"
[19:51:33] <FromDiscord> <haxscramper> And just to remind you, araq is not exactly willing to go into great lengths talking about plans and subtasks, especially when it comes to random bystanders, so someone would have to sit through this, ask all the questions understand the responses, compose them into something that regular people can rely on. We're already looking at insanely high prerequisites that could be met by just a handful of people here
[19:52:23] <FromDiscord> <dom96> _sighs_
[19:53:07] <FromDiscord> <haxscramper> I understand that everyone is sick of this circular discussion
[19:53:12] *** Joins: src (~src@user/src)
[19:53:28] <FromDiscord> <haxscramper> well, I probably need to just stop doing this, I'm certainly not making things better
[19:54:12] <FromDiscord> <haxscramper> (edit) "well, I probably" => "Probably "
[19:55:00] <FromDiscord> <dom96> Ugh, I'm not even sure it's worth discussing this further. But: asking Araq in chat or on the forum randomly about his plans is different to literally pinging him and saying "Let's sit down and come up with a roadmap that we can publish"
[19:55:04] <FromDiscord> <dom96> This stuff seriously isn't hard
[19:55:13] <FromDiscord> <dom96> Yes, it can be annoying
[19:55:19] <FromDiscord> <dom96> and yes it would be great if we didn't have to do it
[19:55:34] <FromDiscord> <dom96> but that's what we've got to work with, so let's make the best of it
[19:59:49] *** Joins: weirdweirdhuh (~weirdweir@78.185.241.12)
[19:59:54] <weirdweirdhuh> why is overloadableEnums experimental?
[20:01:35] <nrds> <06Prestige99> Is anyone doing that yet @dom96? Would be great to see a roadmap
[20:02:18] <FromDiscord> <dom96> not as far as I'm aware
[20:02:35] <FromDiscord> <dom96> I'm certainly not, I've got more important things to bug Araq about 😛
[20:02:36] <nrds> <06Prestige99> just not a priority for the nim team I guess?
[20:03:41] <weirdweirdhuh> i guess it should be experimental since it's new, but no bugs will be found because no one will turn it on
[20:03:49] <nrds> <06Prestige99> Without a roadmap, how are the devs deciding what to work on, just anything they feel like? Lol
[20:04:14] <weirdweirdhuh> does it make sense for some {.experimental.} features to be enabled by default
[20:04:48] <FromDiscord> <dom96> weirdweirdhuh: good point, indeed this is a trade off: we can kill it but we have less people actually finding problems with it
[20:05:08] <FromDiscord> <dom96> on the other hand, is it really that difficult to enable it?
[20:05:22] <FromDiscord> <dom96> it's not significantly more difficult after you find out about it and realise you need it 🙂
[20:07:32] <nrds> <06Prestige99> or @dom96 if you're not so much involved in the process anymore, who could we ask about it? I think it would be beneficial to nim's community to see this happening by leadership
[20:07:38] <weirdweirdhuh> it looks like a convenience feature so i don't know if anyone will think they need it
[20:07:55] <FromDiscord> <dom96> Prestige: did you miss what I wrote above? Get in touch with Araq
[20:08:13] <FromDiscord> <haxscramper> no, I mean we paid community manager for example
[20:08:17] <FromDiscord> <haxscramper> or some other core develoeprs
[20:08:23] <nrds> <06Prestige99> To be his notary?
[20:08:32] <weirdweirdhuh> it's not even in the blog post for 1.6
[20:08:42] <arkanoid> where can I read about "orc vs rust borrow checker"?
[20:08:44] <nrds> <06Prestige99> I just want to see a roadmap, I don't want to be involved in the development of the language itself
[20:09:09] <FromDiscord> <dom96> weirdweirdhuh: feel free to make a PR to add it to the 1.6 release notes, or better yet: make a forum thread to raise awareness 🙂
[20:10:56] <FromDiscord> <dom96> @haxscramper fwiw I am not sure that we have a community manager per say anymore, they are working on different things
[20:11:39] <FromDiscord> <dom96> but you know what might be an idea? Maybe ping them too? 😛
[20:11:45] <FromDiscord> <haxscramper> well, I mean if we don't even know what each team member is doing, that is certainly not going anywhere
[20:12:45] <FromDiscord> <haxscramper> In reply to @dom96 "but you know what": yes dom, I know I can ping people, but what I also know is that we won't get anywhere if basic requests like having a concrete set of goals, requires pinging every single person involved
[20:13:11] <FromDiscord> <dom96> we got to 1.0 just fine
[20:13:11] <weirdweirdhuh> what would be a roadmap? a feature list for each version?
[20:13:13] <FromDiscord> <haxscramper> so I need to ping miran to ask them if they are willing to be a araq's notary?
[20:13:58] <FromDiscord> <haxscramper> In reply to @dom96 "we got to 1.0": yes, we also got to the 0.20 "just fine" and to 1.2.0 "just fine' and to 1.4.0 "just fine" and to 1.6.0 "just fine"
[20:14:14] <FromDiscord> <haxscramper> except not a single person understands what "just fine" really means
[20:14:25] <FromDiscord> <haxscramper> so yes, features were added and they work
[20:14:40] <weirdweirdhuh> i thought there were labels like 1.6, 2.0 etc for issues on github
[20:14:48] <FromDiscord> <haxscramper> this is the definition of "just fine"? Well, not a bad one, but it is hard to manage expectations with something like these
[20:15:11] <FromDiscord> <dom96> it's certainly not "we didn't get anywhere"
[20:15:25] <FromDiscord> <haxscramper> I never said that
[20:15:31] <FromDiscord> <dom96> ugh
[20:15:36] <FromDiscord> <dom96> you said we won't get anywhere
[20:15:57] <FromDiscord> <dom96> I meant "well, we got to where we are just fine"
[20:16:01] <FromDiscord> <haxscramper> we were talking about roadmap specifically
[20:16:14] <FromDiscord> <dom96> no, you were talking about pinging people
[20:16:34] <FromDiscord> <haxscramper> if we need to have a person tasked with pinging everyone in order to compose the understanding of where the project is heading
[20:17:45] <FromDiscord> <dom96> there really is no point in discussing the pedantic details of the merits of pinging people or not
[20:18:03] <FromDiscord> <haxscramper> no, it is a fundamental issue in this discussion
[20:18:14] <FromDiscord> <haxscramper> people doing things because they understand this is important
[20:18:15] <FromDiscord> <dom96> Fine. So I have no solution for you
[20:18:17] <FromDiscord> <haxscramper> vs someome forcing them to
[20:33:45] <FromDiscord> <hmmm> we need a roadmap for tutorials too 🧐
[20:34:19] <FromDiscord> <hmmm> 1) Programming 101 2) GUI in nim 3) Godot with nim 4) Webstuff with nim
[20:34:32] <FromDiscord> <hmmm> people will flock to the cause and we will be rich 🧐
[20:35:54] <FromDiscord> <haxscramper> we have a gui in nim at least https://github.com/StefanSalewski/GtkProgrammingBook/blob/master/gtkprogramming.adoc
[20:36:25] <FromDiscord> <haxscramper> and programming 101 http://ssalewski.de/nimprogramming.html
[20:37:22] <FromDiscord> <arnetheduck> In reply to @Marisol "Hey everyone, I'm just": A slightly more advanced example would be the server we're using: https://github.com/status-im/nimbus-eth2/blob/unstable/beacon_chain/rpc/rest_beacon_api.nim and its corresponding client: https://github.com/status-im/nimbus-eth2/blob/unstable/beacon_chain/spec/eth2_apis/rest_beacon_calls.nim - this is part of a larger application that also uses sqlite (https://github.com/status-im/nim-e
[20:45:02] <FromDiscord> <vindaar> this is an important point. In terms of Nim too many things are "just obvious" to me nowadays. It's hard to see the flaws in projects one is very involved in, which is why I appreciate input from outsiders↵(@haxscramper)
[20:47:55] <FromDiscord> <hmmm> Programming 101 is perfect, I would plaster that stuff all over the official site. The GUI one is a bit bookish detailing the library functions, it should be something like, let's build this cool app step by step using nim and library xyz in 30 fokkin minutes, with pictures, github repo and fancy narrative skills. I think wnim is polished enough to get a great result
[20:50:19] <FromDiscord> <hmmm> Godot-nim needs a tutorial just to be able to install the damn thing but I think a series on small game (not too basic) would be killer since godot is the stuff of the dreams
[20:56:36] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:11:22] <weirdweirdhuh> if closure iterators can be implemented as a library, could AST iterators be implemented as a library as well?
[21:15:31] <FromDiscord> <brainproxy> when I run `nimble install` in my project, I end up with multiple versions of `foo` dep in `~/.nimble/pkgs`, e.g. `foo-1.2.3` and `foo-#bar`↵↵is there a way when invoking a nimble task and/or the nim compiler to tell it to "use `foo-#bar`, don't use `foo-123` ?
[21:15:54] <FromDiscord> <brainproxy> (edit) "`foo-123`" => "`foo-1.2.3`"
[21:16:26] <FromDiscord> <brainproxy> locally and in CI I can simply `rm -rf ~/.nimble/pkgs/foo-1.2.3` but that's kind of a pain
[21:25:49] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa)
[21:27:21] <FromDiscord> <haxscramper> In reply to @weirdweirdhuh "if closure iterators can": what is an AST iterator? regular inline iterator?
[21:27:37] <weirdweirdhuh> @haxscramper yes sorry
[21:28:09] <FromDiscord> <haxscramper> inline iterator can theoretically be be implemented as a library, but this would require very nontrivial `typed` macro
[21:28:25] <FromDiscord> <haxscramper> Well, CPS etc. stuff,
[21:28:51] <FromDiscord> <haxscramper> https://github.com/nim-works/cps/tree/master/docs
[21:29:30] <FromDiscord> <haxscramper> In reply to @brainproxy "when I run `nimble": you can pass `--path` to the nim compiler explicitly or by setting `nim.cfg` for your project
[21:30:02] <FromDiscord> <haxscramper> but `nim c` and `nimble install` currently can't communicate dependency information between each other
[21:32:55] <FromDiscord> <haxscramper> regular inline iterator compies to a state machine basically
[21:33:14] <FromDiscord> <haxscramper> if you look at codegen it is a `while(1); goto` kind of thing most of the time
[21:33:46] <FromDiscord> <haxscramper> Because you have `continue/break/labeled-break/finally/yield`, all of these might affect control flow in unstructured way
[21:34:48] <weirdweirdhuh> makes sense thank you
[21:44:03] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 250 seconds)
[21:48:50] *** Quits: weirdweirdhuh (~weirdweir@78.185.241.12) (Quit: Client closed)
[22:07:49] <FromDiscord> <dom96> In reply to @brainproxy "when I run `nimble": Nim compiler will always pick #head
[22:09:14] *** Joins: src_ (~src@user/src)
[22:09:39] <FromDiscord> <brainproxy> In reply to @dom96 "Nim compiler will always": in this case it's picking `foo-1.2.3` (which is a dep of one of my deps), but in my project's `.nimble` I depend on `https://github.com/blah/foo.git#bar`, which is the one I want the compiler to use
[22:12:13] *** Quits: src (~src@user/src) (Ping timeout: 250 seconds)
[22:14:44] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[22:19:40] *** Joins: src (~src@user/src)
[22:22:14] <FromDiscord> <brainproxy> one solution, based on what I inferred from @haxscramper, is that if in my nimble task I pass `--path:/home/user/.nimble/pkgs/foo-#bar` to the compiler, then it takes higher precedence in the search path than `foo-1.2.3`
[22:22:22] <FromDiscord> <brainproxy> not sure if that's the best solution, but works for now
[22:46:31] *** Joins: vsantana (~Miranda@fttx-177136148231.usr.predialnet.com.br)
[22:49:27] *** Quits: vsantana (~Miranda@fttx-177136148231.usr.predialnet.com.br) (Client Quit)
[23:04:50] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[23:12:45] *** Quits: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa) (Remote host closed the connection)
[23:13:15] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa)
[23:22:37] <FromDiscord> <brainproxy> @dom96 just curious, when using choosenim on macOS, why isn't there a prebuilt compiler, etc. like there is when using choosnim on Linux?
[23:23:20] <FromDiscord> <brainproxy> (edit) "choosnim" => "choosenim"
[23:23:44] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[23:23:57] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[23:29:16] <FromDiscord> <dom96> we just don't have CI set up to build macOS nightlies
[23:44:50] *** Joins: PMunch (~PMunch@user/pmunch)
[23:55:38] <FromDiscord> <ynfle (ynfle)> Why are object fields in a `TypeDef` `Ident` not `Sym`
[23:55:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[23:56:58] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
