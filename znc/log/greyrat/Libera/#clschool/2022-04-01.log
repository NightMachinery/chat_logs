[00:04:04] <rotateq> kagevf: ah we had that topic today too with lisp123 :)
[00:17:57] <kagevf> rotateq: right, that's what I was commenting on :)
[00:20:46] <rotateq> yay
[00:22:03] <rotateq> of the four expressions which are allowed to have it in the lambda list i still miss out knowing how define-setf-expander works
[00:22:16] <rotateq> so no pressure on you :)
[00:27:31] <kagevf> yeah ... I think that was brought up in the "setf chapter" of on Lisp ... a little difficult to absorb ... something that's completely different to what I've experienced so far takes me at least a few times to look at before I can get a good handle on it
[00:27:44] *** Quits: tewi (~tewi@apn-31-2-80-43.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[00:35:06] <rotateq> as long as you have now got &KEY, &OPTIONAL, &ALLOW-OTHER-KEYS, &AUX, &REST and &BODY to a good extent now :)
[00:35:48] <rotateq> and when to use (for better semantics) &REST or &BODY in a macro's definition
[00:36:35] <rotateq> for me &ENVIRONMENT is not much touched upto now
[01:17:47] <kagevf> yeah ... I know *of* &environment but not in any detail ... the other ones you mentioned I feel comfortable with except for &allow-other-keys ... will look it up, thank you
[01:22:44] <rotateq> how would you describe what &AUX does?
[01:23:53] <kagevf> rotateq: if I recall correctly, I believe &aux lets you reference previous items in a lambda list ... I think of it as the lambda list version of let*
[01:24:46] <kagevf> I think it's covered in PCL
[01:25:21] <Bike> aux lets you define variables that aren't actually parameters to the function. it's kind of like having a let* in the body of the function.
[01:25:48] <Bike> lambda list entries can reference each other outside of &aux. for example, (a &optional (b a)) is ok.
[01:27:28] <kagevf> hmmm ok then I'll need to re-read that section of PCL (I think that's where I came across it before) - thank you, Bike 
[01:28:29] <kagevf> actually, Bike .... would you say &aux is often used? I thought I saw comments somewhere (maybe here?) where its usage was discouraged ...?
[01:29:32] <Bike> nowadays people usually just put in an actual let* instead.
[01:30:16] <kagevf> I see
[01:39:13] <rotateq> if you ask beach_, he will say it's very useful :) we could try tomorrow
[01:42:28] <kagevf> I'll keep that in mind rotateq 
[02:13:16] *** Quits: Bike (~Glossina@71.69.170.70) (Read error: Connection reset by peer)
[02:13:42] *** Joins: Bike (~Glossina@71.69.170.70)
[02:39:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[02:55:49] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[03:16:50] *** Joins: occ (~occ@user/occ)
[03:22:47] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[03:23:55] *** Joins: hashfunc159a (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[03:53:31] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[03:56:06] *** Joins: epony (epony@user/epony)
[04:21:03] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[04:23:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:31:26] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:36:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[04:38:01] *** Joins: aeth (~aeth@user/aeth)
[05:02:28] *** Joins: occ (~occ@user/occ)
[05:07:01] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:48:16] *** Quits: hashfunc159a (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[07:17:18] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000)
[07:17:27] *** Joins: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000)
[07:17:54] *** Quits: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000) (Remote host closed the connection)
[07:18:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:30:15] <beach> Good morning everyone! 
[08:01:46] *** Joins: Bike (~Bike@71.69.170.70)
[08:07:23] <mns> good morning beach (well at least another 23 minutes till its morning here, its only 23:37 here)
[08:07:47] <beach> minion: Please tell mns about universal greeting time.
[08:07:47] <minion> mns: look at universal greeting time: It is always morning when a person enters a channel, and late night when they leave. You may want to read http://www.total-knowledge.com/~ilya/mips/ugt.html for further information
[08:09:58] <mns> nice.  didn't know about ugt 
[08:10:51] <mns> time to spread the gospel of UGT 
[08:11:07] <beach> mns: The idea is that if each of the hundreds of people in a channel comment on their time zone whenever someone else enters, then those will be the majority of comments in the channel.
[08:11:41] <beach> mns: I take it you are on the east coast of north America, yes?
[08:11:50] <mns> beach: yes
[08:12:14] <mns> beach, yes makes logical sense to keep channel noise down
[08:13:48] <beach> mns: I am not sure i recognize your nick, but I may have forgotten.
[08:15:11] <mns> beach: I'm in the channel, but this is the first time I've said anything in channel
[08:15:23] <beach> That explains it.  
[08:15:35] <mns> yes that would
[08:16:52] <mns> I was going to ask about which CL implementation to get started with,  sbcl, ecl, or ccl.  Also what is the difference between using ASDF or Quicklisp
[08:17:05] <beach> Sure.
[08:17:23] <beach> Most people here and in #commonlisp seem to use SBCL.
[08:17:43] <beach> But ECL is well maintained, and jackdaniel (the maintainer) is very present.
[08:17:54] <beach> And I think those are important considerations. 
[08:18:41] <beach> Quicklisp is mainly a "system manager" where "system" in Common Lisp is used where "package" is used in other languages. 
[08:19:46] <beach> ASDF is similar to Unix `make'.
[08:19:53] <mns> python/perl modules ? 
[08:20:03] <beach> I know neither of those.
[08:20:35] <mns> purely lisp ? 
[08:21:07] <beach> I used Python briefly a long time ago because I designed a course around it.
[08:21:28] <beach> But I haven't had to use it for more than a decade.
[08:21:40] <beach> As it turns out, Quicklisp uses ASDF to compile the systems, so you can use Quicklisp exclusively.  That's part of the confusion. 
[08:22:05] <mns> Yes! That is what was confusing me.  
[08:23:51] <mns> I installed SBCL on FreeBSD and got a message at the end of the install about doing something if I wanted to use quicklisp and that it was setup with asdf.
[08:24:12] <beach> I see.
[08:25:01] <beach> SBCL normally comes with ASDF already installed.  But it is common to start the use of SBCL by following the instructions on the Quicklisp site.
[08:25:34] <beach> You can then use Quicklisp to install things like SLIME.
[08:28:40] <mns> Oh, SLIME through Quicklisp and not Emacs ? 
[08:29:18] <mns> I did have emacs+slime setup for clisp many moons ago,  10+ years ago
[08:29:39] <beach> That should be fine.
[08:30:26] <mns> Curious,  if anyone learns using LispWorks, like their Hobbyist version ? 
[08:31:07] <beach> I wouldn't know.  But its GUI is apparently good.
[08:32:13] <mns> I don't much care for the GUI,  this is all going to be CLI based
[08:32:48] <beach> Then there is not going to be a lot of difference between Common Lisp implementations.  They are all pretty much conforming. 
[08:35:54] <beach> ... except a few like CLISP and GCL.
[08:36:17] <mns> Then I'll stick with SBCL or ECL or CCL
[08:36:44] <mns> what is the difference for CLISP and GCL ? 
[08:37:35] <beach> They are not as well maintained as the others, and they haven't been for some time, so they still have conformance issues.
[08:38:05] <beach> I would be cautious about CCL.  Not because it is a bad implementation, but because we don't seem to see any maintainers around lately.  
[08:38:32] <mns> Well GCL isn't even available on FreeBSD, so that takes care of that.  
[08:39:32] <mns> I was looking at CCL due to its Macintosh heritage. I had used MCL long time back when I had my PowerMac 7100 ages ago.
[08:41:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[08:45:53] <mns> beach: thanks for the chat. I'm looking to start working on finally learning CL.  My LISP exposure is mostly to emacs-lisp
[08:50:51] <beach> Sure.  Good luck. 
[09:37:17] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:44:21] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000) (Remote host closed the connection)
[10:22:07] *** Joins: hashfunc929 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:32:55] *** Quits: hashfunc929 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:50:50] *** Joins: tewi (~tewi@apn-95-41-218-156.dynamic.gprs.plus.pl)
[11:58:09] *** Joins: shka (~herr@109.231.3.55)
[11:59:08] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:31:34] *** Joins: dickbar__ (~dickbaren@dyndsl-031-150-224-141.ewe-ip-backbone.de)
[13:17:01] *** Quits: dickbar__ (~dickbaren@dyndsl-031-150-224-141.ewe-ip-backbone.de) ()
[13:51:03] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[13:54:25] *** Quits: Josh_2 (~user@197.184.168.137) (Ping timeout: 256 seconds)
[14:38:52] *** Joins: lisp123 (~lisp123@143.238.171.43)
[14:43:02] *** Quits: Harag (~user@105.243.9.173) (Remote host closed the connection)
[14:50:53] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:05:50] *** Joins: occ (~occ@user/occ)
[15:24:45] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:49:37] *** Quits: lisp123 (~lisp123@143.238.171.43) (Quit: Leaving...)
[16:11:52] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[16:31:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[17:38:08] *** Quits: Andrew (Andrew@user/AndrewYu) (Quit: Leaving)
[17:39:28] *** Joins: Andrew (~andrew@user/AndrewYu)
[17:53:46] *** Joins: Bike (~Glossina@71.69.170.70)
[18:24:27] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:43:19] *** Joins: thrig (~thrig@207.108.197.156)
[19:00:39] *** Joins: treflip (~user@user/treflip)
[19:26:46] *** Quits: Andrew (~andrew@user/AndrewYu) (Quit: identd is broken)
[19:27:38] *** Joins: Andrew (Andrew@user/AndrewYu)
[19:55:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:30:10] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:38:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:02:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:03:41] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[21:03:59] *** Joins: thrig (~thrig@207.108.197.156)
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:50] *** Joins: epony (epony@user/epony)
[21:26:53] *** Quits: thrig (~thrig@207.108.197.156) (Ping timeout: 252 seconds)
[22:14:11] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[22:16:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[22:30:46] *** Joins: lagash (lagash@lagash.shelltalk.net)
[22:49:08] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[23:28:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
