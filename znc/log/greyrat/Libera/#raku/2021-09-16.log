[00:00:16] <gfldex> still work if you do `42‚ê§.say` but not for `42.‚ê§say`
[00:00:35] <lizmat> grondilu: please provide an example where it doesn't work
[00:00:45] <lizmat> then we can submit a bug report  :-)
[00:04:48] <codesections> A backslash is also required in *any* "method" in the chain is really a sub being called *as* a method.
[00:05:42] <codesections> m: sub add1 {$_ + 1}; 5.5.round.&add1.say; # doesn't work with newlines/spaces without \
[00:05:42] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub add1 at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[00:05:59] <codesections> m: sub add1($_) {$_ + 1}; 5.5.round.&add1.say; # doesn't work with newlines/spaces without \
[00:05:59] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´7‚ê§¬ª
[00:09:36] <immediate> What is the meaning of a twigil-less variable that is declared with `has` in a class?
[00:09:49] <immediate> e.g., `class A { has $val }`
[00:10:27] <immediate> This answer is where I saw it: https://stackoverflow.com/a/62969222
[00:16:08] <xinming> releasable6: status
[00:16:09] <releasable6> xinming, Next release in ‚âà2 days and ‚âà23 hours. There are no known blockers. Changelog for this release was not started yet
[00:16:10] <releasable6> xinming, Details: https://gist.github.com/fdb6dacf285b68e53f6cf1eb0e958666
[00:22:41] <grondilu> https://gist.github.com/grondilu/b35ede989a6bfbe335d43d8c84c99a7b
[00:23:09] <grondilu> I could probably trim it more but oh well
[00:24:33] <gfldex> m: class C { has $a; }; say C.^attributes;
[00:24:34] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(Mu $!a)‚ê§¬ª
[00:24:40] <gfldex> immediate: ^^^
[00:26:34] <codesections> gfldex: I noticed that too, but it left me more confused rather than less.  Are you saying that `has $a` is an exact synonym for `has $!a`?   If so, I've sure been writing a lot of needless !s 
[00:27:36] <gfldex> codesections: I didn't check Roast but the docs don't mention this form, so this might be an artifact.
[00:28:10] <moon-child> roast has it
[00:28:42] <codesections> hmm, so it's just missing from the docs?
[00:28:45] <moon-child> S12-attributes/instance.t, S12-class/attributes.t, S03-binding/attributes.t
[00:29:55] <gfldex> looks like it
[00:30:23] <gfldex> And it's likely not the last ENODOC. Raku is BIG!
[00:31:37] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[00:36:58] <grondilu> m: say <foo bar>.antipairs.hash<foo>;
[00:36:58] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´0‚ê§¬ª
[00:37:25] <grondilu> ^this fails if I put a newline after bar>
[00:37:41] <grondilu> in fact:
[00:37:45] <grondilu> m: say <foo bar> .antipairs.hash<foo>;
[00:37:46] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing required term after infix‚ê§at <tmp>:1‚ê§------> 3say <foo bar> .antipairs.hash<foo>7‚èè5;‚ê§    expecting any of:‚ê§        prefix‚ê§        term‚ê§¬ª
[00:38:06] <grondilu> just a space is enough
[00:39:08] <grondilu> m: say <foo bar> .elems.perl;
[00:39:09] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´2‚ê§¬ª
[00:40:03] <grondilu> m: say (<foo bar> .antipairs.hash)<foo>;
[00:40:04] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´0‚ê§¬ª
[00:40:30] <grondilu> hum I guess using a postcircumfix messes things
[00:43:22] * grondilu vaguely remembers something about this
[00:48:04] <Geth> ¬¶ doc/attribute-alias: 6fd14c79a5 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/objects.pod6
[00:48:04] <Geth> ¬¶ doc/attribute-alias: Document attribute aliases
[00:48:04] <Geth> ¬¶ doc/attribute-alias: 
[00:48:04] <Geth> ¬¶ doc/attribute-alias: Part of the spec in Roast S12-class/attributes.t  
[00:48:04] <Geth> ¬¶ doc/attribute-alias: https://github.com/Raku/roast/blob/master/S12-class/attributes.t#L23-L33
[00:48:04] <Geth> ¬¶ doc/attribute-alias: review: https://github.com/Raku/doc/commit/6fd14c79a5
[00:48:33] <Geth> ¬¶ doc: codesections++ created pull request #3963: Document attribute aliases
[00:48:33] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3963
[00:56:10] <codesections>  grondilu: I agree, that *is* pretty odd
[00:56:21] <codesections> m: say <foo bar> .antipairs.hash<note> 1;
[00:56:21] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Noted‚ê§False‚ê§¬ª
[00:58:01] <immediate> gfldex: thanks what is ENODOC, cant find in the glossary
[00:58:29] <immediate> and should one use $val instead of $!val 
[00:58:35] <codesections> it's jargon/slang for ERROR: Not Documented
[00:59:05] <gfldex> immediate: ENODOC is a not overly serious reference to http://www.virtsync.com/c-error-codes-include-errno
[01:01:53] *** Quits: lichtkind (~lichtkind@p200300d0a7115df0ac072a13f09fa777.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:05:24] <[Coke]> ENOTLA
[01:05:31] <[Coke]> ENOCOFFEE
[01:05:40] <[Coke]> ENOBEER #actually timezone appropriate
[01:16:08] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:25:11] *** Quits: patrickb (~quassel@55d4e49e.access.ecotel.net) (Quit: Quit.)
[01:28:12] *** Quits: immediate (~immediate@5.177.206.26) (Ping timeout: 265 seconds)
[01:29:08] *** Joins: MasterDuke26 (~MasterDuk@207.87.94.98)
[01:33:39] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[01:48:34] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[02:26:18] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[02:38:23] *** Quits: MasterDuke26 (~MasterDuk@207.87.94.98) (Quit: Client closed)
[03:22:07] *** Joins: Polyinsecure (~Polyinsec@180.244.135.66)
[03:45:10] *** Quits: Polyinsecure (~Polyinsec@180.244.135.66) (Quit: Leaving)
[03:45:31] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 268 seconds)
[03:45:31] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 268 seconds)
[04:32:48] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:36:26] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[04:36:55] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:59:29] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[05:00:29] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[06:00:29] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:00:29] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:00:29] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:00:29] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:00:29] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:00:30] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:00:30] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:00:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:01:11] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[06:01:14] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[06:01:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:02:09] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[06:02:24] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:02:39] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[06:03:01] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:35:36] <Geth> ¬¶ problem-solving: coke assigned to codesections Issue Consider renaming default branch from master to main https://github.com/Raku/problem-solving/issues/298
[07:00:45] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:01:35] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:01:52] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:03:18] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:03:22] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:35:41] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[07:45:40] *** Joins: tejr (~tejr@user/tejr)
[08:01:05] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[08:01:15] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:01:26] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:02:21] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[09:02:21] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:02:21] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:02:21] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:02:21] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:02:21] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:02:21] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:02:21] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:02:22] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:22] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:02:28] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:02:38] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:02:51] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:02:54] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:03:04] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[09:04:05] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:04:10] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[09:04:29] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[09:04:51] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:05:15] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:05:29] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[09:56:51] <Geth> ¬¶ doc: b00ffb3476 | (Daniel Sockwell)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/objects.pod6
[09:56:52] <Geth> ¬¶ doc: Document attribute aliases
[09:56:52] <Geth> ¬¶ doc: 
[09:56:52] <Geth> ¬¶ doc: Part of the spec in Roast S12-class/attributes.t  
[09:56:52] <Geth> ¬¶ doc: https://github.com/Raku/roast/blob/master/S12-class/attributes.t#L23-L33
[09:56:52] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/b00ffb3476
[09:56:55] <linkable6> Link: https://docs.raku.org/language/objects
[10:02:35] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:04:12] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:04:39] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[11:04:39] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:04:39] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:04:39] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:04:39] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:04:39] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:04:39] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:39] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:04:39] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:04:49] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:05:27] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[11:05:35] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[11:06:20] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[11:06:53] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[11:07:06] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[11:07:07] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:07:27] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[11:07:34] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[11:11:50] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 260 seconds)
[11:12:13] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:33:54] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[12:02:41] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[12:03:55] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[12:13:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:44:02] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:58:11] *** Joins: lichtkind (~lichtkind@p200300d0a7115d7b5deaf96981cc4bef.dip0.t-ipconnect.de)
[13:01:26] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[13:05:03] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[13:05:34] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[13:07:10] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[13:07:25] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[13:07:25] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:07:33] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[13:43:40] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Ping timeout: 240 seconds)
[13:48:43] *** Joins: frost (~frost@59.71.242.61)
[13:49:17] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[14:12:40] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Ping timeout: 240 seconds)
[14:13:18] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[14:34:14] *** Joins: immedlate (~immedlate@5.176.148.14)
[14:35:32] <grondilu> "fooooooo" ~~ /o+/; # how do I get the number of 'o's from $/  ?
[14:37:12] <grondilu> $/.chars won't work if there was no o
[14:37:54] <grondilu> m: "" ~~ /o+/; say $/.chars
[14:37:54] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Use of Nil.chars coerced to empty string‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[14:38:01] <grondilu> m: "ooooo" ~~ /o+/; say $/.chars
[14:38:01] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´5‚ê§¬ª
[14:41:02] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[14:42:03] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[14:42:40] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[14:43:16] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 265 seconds)
[14:43:30] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[14:49:12] <immedlate> What about `$/.defined ?? $/.chars !! 0`
[14:49:39] <immedlate> m: "" ~~ /o+/;  say $/.defined ?? $/.chars !! 0
[14:49:39] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´0‚ê§¬ª
[14:49:52] <immedlate> "oOo" ~~ /o+/;  say $/.defined ?? $/.chars !! 0
[14:49:53] <evalable6> immedlate, rakudo-moar 10b327292: OUTPUT: ¬´1‚ê§¬ª
[14:50:32] <immedlate> or with `with`: `($/.chars with $/) or 0`
[14:50:53] <immedlate> similarly `with $/ { $/.chars } else { 0 }`
[14:51:08] <immedlate> or `without $/ { 0 } else { $/.chars }`
[14:51:11] <grondilu> that's quite verbose
[14:52:44] <grondilu> it's a bit of a hassle to have to deal with the special case of 0
[14:52:49] <raydiak> could always just change the + to *
[14:53:23] <grondilu> damb
[14:53:32] <grondilu> *damn
[14:53:53] <Altreus> or you could use the fact it didn't match   "foooo" ~~ /o+/ ?? $/.chars !! 0;
[14:54:03] <Altreus> in case your case is more complex
[14:56:40] <grondilu> of course with * it works, I'm dumb, sorry
[14:58:18] <raydiak> don't be too hard on yourself. with so many tools in reach it's easy to overlook one
[15:02:53] <Altreus> We had a similar question the other day when the answer was to change the question :D
[15:02:59] <Altreus> easily overlooked
[15:29:39] <gfldex> m: "" ~~ /o+/; say +$/.?chars
[15:29:39] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Use of Nil.chars coerced to empty string‚ê§0‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[15:30:13] <gfldex> m: "" ~~ /o+/; say +($/.?chars // 0)
[15:30:14] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Use of Nil.chars coerced to empty string‚ê§0‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[15:30:39] <gfldex> m: "" ~~ /o+/; say ($/ // "").chars.Int
[15:30:40] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´0‚ê§¬ª
[15:30:50] <gfldex> m: "ooo" ~~ /o+/; say ($/ // "").chars.Int
[15:30:50] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´3‚ê§¬ª
[15:32:12] <gfldex> There may be a simple way to handle that in the Regex directly.
[15:35:37] <gfldex> m: Nil.^methods.grep(*.name eq 'FALLBACK').say;
[15:35:38] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(FALLBACK)‚ê§¬ª
[15:35:46] <gfldex> ok, .? on Nil is silly
[15:43:30] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:43:30] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:45:36] <grondilu> iteration over a hash is undeterministic or something?
[15:46:12] <gfldex> order of keys are randomised by design
[15:46:46] <grondilu> ok, noted
[15:47:43] <Altreus> kawaii_: by design!
[15:51:33] *** Quits: timo (~timo@shells.aperture-labs.org) (Read error: Connection reset by peer)
[16:11:51] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:12:04] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[16:18:21] <grondilu> I tried to count the number of leading zeros in a list with `+(@a ...^ +*)` but this hangs if @a is full of zeros.  Any suggestion?
[16:18:55] <grondilu> no loop please ;)
[16:20:52] <grondilu> m: +((0, 0) ...^ +*)
[16:21:14] <grondilu> m: say +((0, 0, 1) ...^ +*)
[16:21:14] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(timeout)WARNINGS for <tmp>:‚ê§¬ª
[16:21:14] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´2‚ê§¬ª
[16:25:44] <Altreus> ok I can't parse that. What's going on there :D
[16:26:51] <grondilu> again, I'm just trying to count the number of leading zeros in a list.
[16:27:32] <grondilu> I bet there is a simple, nice way to do it but I don't see it.
[16:27:43] <Altreus> yeah but I don't understand what the magic spell you wrote actually does
[16:28:03] <Altreus> leading zeroes implies strings, no
[16:28:12] <Altreus> oh
[16:28:22] <Altreus> do you mean the number of zeroes in a list before the first nonzero
[16:28:32] <grondilu> yes
[16:28:36] <Altreus> gotcha
[16:29:25] <grondilu> I don't want to write a loop.  That would be lame.
[16:30:12] <Altreus> is it just @a.first({ * != 0 }, :k)
[16:30:23] <Altreus> i.e. the index of the first nonzero value
[16:30:28] <Altreus> ... plus one
[16:30:32] <Altreus> no not plus one :D
[16:31:06] <grondilu> m: say +(0, 0, 1).first: +*
[16:31:07] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´1‚ê§¬ª
[16:31:24] <grondilu> m: say +(0, 0, 0, 1).first: +*
[16:31:25] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´1‚ê§¬ª
[16:31:43] <grondilu> m: say +(0, 0, 0, 1).first: +*, :k
[16:31:44] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´3‚ê§¬ª
[16:32:01] <grondilu> m: say +(0, 0, 0).first: +*, :k
[16:32:01] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Use of Nil in numeric context‚ê§0‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[16:32:06] <Altreus> aha!
[16:32:14] <Altreus> so it's that or the length of the list
[16:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:37:37] <grondilu> couldn't I do that with a grep and a flip flop?
[16:38:23] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[16:38:28] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:41:07] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:42:15] <grondilu> m: say <0 0 0 1 2 0>.grep({ 0 ff none(0)})
[16:42:16] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(0 0 0 1 0)‚ê§¬ª
[16:42:27] <grondilu> m: say <0 0 0 1 2 0>.grep({ 0 fff none(0)})
[16:42:27] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(0 0 0 1 0)‚ê§¬ª
[16:46:59] <grondilu> m: say <0 0 0 1 2 0>.grep({ (state $ = 1) &&= !$_ })
[16:47:00] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´(0 0 0)‚ê§¬ª
[16:48:16] <grondilu> I guess I'll use .first
[16:55:46] <gfldex> grondilu: Do you mind if I qoute you on "I don't want to write a loop.  That would be lame." ? :->
[16:58:56] <grondilu> well not sure I want to be quoted on that tbh ;)
[16:59:18] <grondilu> I do hate writing loops though
[16:59:33] <Altreus> explicit loops are rare in my experience
[16:59:41] <Altreus> they're usually maps in disguise
[17:00:31] <Altreus> raku certainly makes it a lot easier to avoid them
[17:01:04] <Altreus> plus there's new structures like react-whenever, which I'm not sure whether they count as loops or not
[17:02:57] *** Quits: immedlate (~immedlate@5.176.148.14) (Ping timeout: 265 seconds)
[17:13:58] <gfldex> m: multi sub prefix:¬´+\c[COMBINING RING ABOVE]¬ª(\r) { r.defined ?? +r !! 0 }; say +Ãä(0, 0, 0).first: +Ãä*, :k;
[17:13:58] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´0‚ê§¬ª
[17:14:25] <gfldex> And no, my terminal can display that operator correctly either.
[17:15:18] * gfldex Adds an item to the mischief list.
[17:15:34] <gfldex> s/can/can't/
[17:16:37] <grondilu> I'm confused by the ring above the opening parenthesis
[17:17:06] <grondilu> the one above the * I get (I think)
[17:35:31] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[17:40:57] *** Joins: immedlate (~immedlate@5.176.148.14)
[17:41:51] <gfldex> grondilu: not even Firefox is displaying that one correctly
[17:42:48] <gfldex> the circly is above the + but not centered
[17:43:25] <gfldex> so the +Ãä( looks like a ligature
[17:43:48] <gfldex> I don't think I'm gonna do that again‚Ä¶
[17:43:49] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:44:22] <immedlate> what terminal do you use gfldex if you dont mind sharing
[17:44:44] <gfldex> Putty+screen right now
[17:45:12] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[17:45:29] <gfldex> immedlate: here is the complete setup https://gfldex.wordpress.com/2016/08/31/one-line-of-unicode-at-you-fingertips/
[17:46:14] <Altreus> looks fine for me
[17:46:17] <Altreus> :)
[17:46:33] <Altreus> so you did it right, at least :D
[17:46:42] <Altreus> "No, it's the children who are wrong"
[17:47:23] <gfldex> I'm not sure if I want to be right on your screen but not on mine.
[17:48:41] <Altreus> Well I mean at least there's nothing for *you* to fix
[17:56:21] <grondilu> gfldex: do you ssh from windows?
[17:56:27] <gfldex> yes
[17:57:10] <grondilu> do you know that the Windows terminal has a native ssh client now?
[17:59:21] <grondilu> and the Windows terminal is actually good, with full unicode support for instance.
[18:00:29] <grondilu> https://github.com/Microsoft/Terminal  Microsoft has been quite open-source friendly lately.
[18:00:31] <gfldex> grondilu: Does it work well with GNU Screen on the other end?
[18:01:18] <grondilu> gfldex: I don't know about screen but I was using tmux with no issue.
[18:01:51] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:38:29] <discord-raku-bot> <Slaytanical#9737> i found: https://github.com/rakudo/rakudo/blob/master/docs/running.pod and:  https://github.com/ugexe/zef#more-cli are there more sources of environment variables i'd have to make myself aware of to isolate a raku environment to a USB drive?
[18:39:07] <discord-raku-bot> <Slaytanical#9737> or am i better off still compiling from source in something like msys2?
[18:42:58] <Xliff> Hi!
[18:43:10] <Xliff> Will a % parameter accept an Associative $?
[18:43:41] <Xliff> m: sub a (%h) { say 'hash' }; my $a = 1 but Associative; a($a)
[18:43:41] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´hash‚ê§¬ª
[18:43:47] <Xliff> Hah!
[18:56:13] <discord-raku-bot> <Slaytanical#9737> nevermind on the msys2 bit, i forgot it's not an isolated environment really.
[19:00:03] * [Coke] wonders how quickly after a new set of unicode emojis is announced that they are available on win & mac.
[19:00:15] <[Coke]> (some nifty/funny ones in emoji/14)
[19:01:51] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:01:51] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:02:58] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[19:05:51] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[19:08:30] *** Quits: jess (~jess@libera/staff/jess) ()
[19:11:37] *** Quits: cnx (~cnxhaloge@2001:470:69fc:105::61f) (Quit: Reconnecting)
[19:11:53] *** Joins: cnx (~cnx@2001:470:69fc:105::61f)
[19:18:50] <codesections> is there a good way to check the exit status of a command run with qx { }?  I know I could add ; echo "$?" } to the end, but that feels a bit sloppy
[19:19:04] <codesections> (or just use &shell)
[19:26:14] <ugexe> even if there was an e.g. $! for "last ran process exit status" it would be just as sloppy due to its inherit race condition
[19:28:17] <codesections> m: say shell("invalid").exitcode
[19:28:17] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´/bin/sh: invalid: command not found‚ê§127‚ê§¬ª
[19:29:06] <codesections> ugexe: I'm not sure I understand?  I was thinking of something like ^^^ but for qx.  There's no race condition there, right?
[19:30:22] <ugexe> if you want the Proc itself then why would you use qx?
[19:30:55] <ugexe> so yes there is no race condition there
[19:32:25] <codesections> fair enough.  I guess I just like qx -- it feels less like I'm just passing strings around.  But it isn't really, so I should probably just use shell
[19:36:28] <jdv> even in the same thread it couldn't be fetched in a non-racy way?
[19:38:16] <codesections> (it looks like the source for qx is at https://github.com/rakudo/rakudo/blob/master/src/core.c/Proc.pm6#L261-L265  In my ideal world, I think I'd have that return an IntStr that numifies to the exit code, the way Procs do)
[19:40:54] <jdv> that seems like unnecessary magic but it might be easier than trying to get it to work if you fetched it in the next instruction or something like that
[19:40:58] <ugexe> jdv, maybe but even then im not sure since i believe it uses async processes under the hood
[19:41:22] <jdv> yeah, right...
[19:45:31] <jdv> forgot its built on async
[19:45:33] <Xliff> codesections: https://gist.github.com/Xliff/b9d290cc5262dae05c0738111434d7e9
[19:49:25] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:50:26] <codesections> Xliff :)  But that loses the ability to use arbitrary unicode pairs as the delimiter for qx, which is a big part of its appeal vs &shell, imo 
[19:50:33] <ugexe> and i guess even if it was in the same thread you'd then have to have the equiv of `my $!;` to keep processes spawned in other unrelated threads (not just reentrant ones) from setting it
[19:56:33] <gfldex> codesections: do you get a non-0 exit code to indicate failure? If so, there is a module for that.
[20:01:13] <codesections> gfldex oh?
[20:03:08] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[20:03:11] <melezhik> :m sub foo ($a) {}
[20:03:20] <melezhik> m: sub foo ($a) {}
[20:03:20] <camelia> rakudo-moar 10b327292: ( no output )
[20:03:32] <melezhik> m: sub foo ($a) {}; foo(1);
[20:03:32] <camelia> rakudo-moar 10b327292: ( no output )
[20:03:43] <melezhik> m: sub foo ($a) {}; my $a; foo($a);
[20:03:43] <camelia> rakudo-moar 10b327292: ( no output )
[20:04:07] <melezhik> how can deal with this error - `Type check failed in binding to parameter '$user'; expected Any but got Mu (Mu)` ?
[20:04:27] <melezhik> my function declared as `foo ($user) {}`
[20:04:44] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:04:55] <melezhik> however if a $user is not defined and calls `foo($user)` I get this error
[20:05:23] <codesections> the brute-force way is to declare it as `foo(Mu $user) {}`, but you might want to deal with the Mu before the callsite
[20:05:49] *** Quits: frost (~frost@59.71.242.61) (Quit: Connection closed)
[20:06:25] <melezhik> I wonder why my function complains about this at all
[20:06:45] <melezhik> for example it works fine when I do this: `my $user; foo($user)`
[20:07:16] <codesections> well, the default constraint for params is Any.  And the default type for $-sigiled vars is Any
[20:07:22] <codesections> so that works fine
[20:07:36] <melezhik> https://github.com/melezhik/mybutterflies/blob/master/app.raku#L99
[20:08:16] <melezhik> here $user and $token get passed by cro as cookes
[20:08:20] <melezhik> cookies
[20:08:25] *** Joins: timo (~timo@shells.aperture-labs.org)
[20:08:36] <melezhik> and get this `mbf Type check failed in binding to parameter '$user'; expected Any but got Mu (Mu)`
[20:10:02] <melezhik> changed the signature
[20:10:15] <codesections> I suspect you want `get -> 'project', $project, 'edit-review', :$user! is cookie, :$token! is cookie` for that signature
[20:10:46] <Xliff> codesections: Hmmm... good point. Would have to write a module with an included slang to get that working. :/
[20:10:53] <melezhik> https://github.com/melezhik/mybutterflies/commit/82148b815f05964c91baba5053f867d1f23be1a6
[20:10:56] <melezhik> works fine nw
[20:10:58] <melezhik> now
[20:11:02] <melezhik> thanks codesections
[20:12:55] <codesections> but note the difference between `:$user` and `:$user!` for Cro.  The first matches *regardless* of whether the client has a user cookie (which is why it's sometimes Mu).  The second only matches if the have a user cookie 
[20:13:01] <codesections> melezhik ^^^
[20:13:10] <melezhik> yes, I am aware
[20:13:21] <melezhik> cookies might not be set
[20:13:26] <codesections> Ok, just making sure :)
[20:19:21] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[20:42:09] *** Quits: Woodi (~Woodi@n8236h162.sprintdatacenter.net) (Quit: ab -> c)
[20:43:19] <gfldex> codesections: see: https://github.com/gfldex/raku-shell-piping#error-handling
[20:51:44] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[20:52:58] *** Joins: Woodi (~Woodi@n8236h162.sprintdatacenter.net)
[21:12:20] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 260 seconds)
[21:33:05] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[21:35:35] <melezhik> hi Raku people! I've launched a better version of "My Butterflies" - a place where one can rate software they like. I'd appreciate for feedback from community. Eventually I am going to get a DSN and whatnots. But I am very interested to get a feedback before - http://161.35.115.119/mbf/
[21:36:30] <melezhik> if someone wants to bragg about their projects - feel free - let me know and I put them to list. Raku projects are priority ... ))))
[21:38:24] <melezhik> also please be nice, even though you review python stuff , ha-ha :') 
[21:45:43] <daxim> evalable6:  subset List5 of List where .elems == 5;  my @foo = List5.new: <q w e r t>;   # how is this supposed to work?  my List5 @bar = <q w e r t>??
[21:45:44] <evalable6> daxim, rakudo-moar 10b327292: OUTPUT: ¬´(exit code 1) You cannot create an instance of this type (List5)‚ê§  in block <unit> at /tmp/LaV96KsfdJ line 1‚ê§‚ê§¬ª
[21:47:57] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Ping timeout: 245 seconds)
[21:51:50] <japhb> subset List5 of List where .elems == 5;  my @foo is List5 .= new: <q w e r t>
[21:51:54] <japhb> m: subset List5 of List where .elems == 5;  my @foo is List5 .= new: <q w e r t>
[21:51:54] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´You cannot create an instance of this type (List5)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:51:59] <japhb> Oh interesting
[21:52:41] <japhb> m: subset Array5 of Array where .elems == 5;  my @foo := Array5.new: <q w e r t>
[21:52:42] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´You cannot create an instance of this type (Array5)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:53:09] <japhb> hum
[22:02:10] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[22:02:12] <melezhik> weekly: https://www.reddit.com/r/rakulang/comments/pphxmy/my_butterflies_independent_software_reviews/
[22:02:12] <notable6> melezhik, Noted! (weekly)
[22:02:29] <Altreus> melezhik: interesting idea but is there any moderation on what counts as software?
[22:02:46] <Altreus> like, maybe you get raku and then maybe you get modules and then maybe you get ... functions?! I dunno
[22:03:33] <Altreus> deduplication seems like a task as well
[22:08:37] <melezhik> Altreus , that's the very idea of dog fooding, not only check the web site, but also test the idea itself. I am flexible, it could be any software and I have not yet decided on the level of granularity ...
[22:09:35] <melezhik> I just think - it's cool to have a place where engineers write about software, honest, in depth reviews, instead of smarmy marketing stuff ...
[22:10:16] <melezhik> and I like to check it with raku community first, before expand to other languages/communities ... 
[22:16:56] <Geth> ¬¶ doc: 2faaff0c55 | Coke++ | xt/word-variants.t
[22:16:56] <Geth> ¬¶ doc: whitespace
[22:16:56] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/2faaff0c55
[22:32:39] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:34:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:47:47] *** Joins: silug4 (~silug@068-188-018-154.biz.spectrum.com)
[22:47:59] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 268 seconds)
[22:47:59] *** silug4 is now known as silug
[22:52:02] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[22:55:52] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[23:19:26] <grondilu> you know, I wish there was a $*MODULUS environment variable to set up modular arithmetics.  Wouldn't that be neat for crypto stuff?
[23:20:07] <grondilu> Could this be done in user/module space?
[23:20:29] <lizmat> m: PROCESS:<$FOO> := 42; say $*FOO    # yes ?
[23:20:30] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix := instead.‚ê§at <tmp>:1‚ê§------> 3PROCESS:<$FOO> :=7‚èè5 42; say $*FOO    # yes ?‚ê§¬ª
[23:20:37] <lizmat> m: PROCESS::<$FOO> := 42; say $*FOO    # yes ?
[23:20:37] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´42‚ê§¬ª
[23:21:05] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Connection closed)
[23:21:42] <grondilu> I know setting the variable can be done, but could it be made to affect Int arithmetics?
[23:22:13] <lizmat> ah. that?  not without affecting performance of *all* Int arithmetic
[23:22:47] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[23:25:33] <grondilu> what about changing the interpretation of literal integers?  That could be done, right?
[23:26:04] <grondilu> from user code, I mean.
[23:26:19] <grondilu> with macros or something?
[23:26:59] <lizmat> possibly
[23:27:54] <moon-child> grondilu: what are you trying to do?
[23:29:47] <grondilu> use Mod13; say 12 + 1; # 0
[23:31:15] <lizmat> use Mod13 could export a proto infix:<+> with all new candidates
[23:31:26] <lizmat> so you *can* do that in a module
[23:32:11] <grondilu> indeed, not sure why I didn't see it that way.
[23:33:54] <grondilu> hang on
[23:34:12] <lizmat> it will *only* affect that lexical scope, yes
[23:34:27] <grondilu> I can't override core candidates, can I?
[23:34:44] <lizmat> sure you can,  by exporting a proto
[23:35:22] <grondilu> ok but inside that candidate how would I call the core ones?
[23:35:30] <moon-child> lizmat: I thought operator overloads sometimes had dynamic scope, at least conceptually
[23:35:51] <moon-child> there was a pr not long ago to make sort respect overridden &[cmp]
[23:37:50] <lizmat> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { 42 }; say 999 + 42e0
[23:37:51] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling infix:<+>(Int, Num) will never work with any of these multi signatures:‚ê§    (Int \a, Int \b)‚ê§at <tmp>:1‚ê§------> 3nfix:<+>(Int \a,Int \b) { 42 }; say 999 7‚èè5+ 42e0‚ê§¬ª
[23:38:01] <lizmat> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { 42 }; say 999 + 666
[23:38:01] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´42‚ê§¬ª
[23:38:45] <lizmat> moon-child: yeah, but the problem is that &[cmp] is that List.sort *lexically* only sees the &cmp of the core
[23:39:20] <lizmat> and the question is: should it only look lexically for that, or also dynamically
[23:39:25] <lizmat> and that's what the PR is about
[23:40:24] <grondilu> m: dd &COMPUNIT::infix:<+>
[23:40:24] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Any element{'&infix:<+>'} = Any‚ê§¬ª
[23:41:33] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { &COMPUNT::infix<+>(a, b) mod 13; }; say 12 + 1
[23:41:33] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Cannot resolve caller infix:<mod>(List:D, Int:D); none of these signatures match:‚ê§    (Real $a, Real $b)‚ê§  in sub infix:<+> at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:41:55] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { &COMPUNIT::infix<+>(a, b) mod 13; }; say 12 + 1
[23:41:55] <camelia> rakudo-moar 10b327292: OUTPUT: ¬´Cannot resolve caller infix:<mod>(List:D, Int:D); none of these signatures match:‚ê§    (Real $a, Real $b)‚ê§  in sub infix:<+> at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:42:27] <grondilu> see what I mean?
[23:42:49] <moon-child> hmm, there may be an easier way
[23:42:51] <moon-child> one moment
[23:43:56] <grondilu> maybe with the routine form of the operators.  Not sure what it is though
[23:45:53] <moon-child> hmm, no.  I thought you might be able to say:  augment class Int { method new(\x) { self.bless(x mod 13) } }.  But apparently it has to be a multi, and that candidate never gets selected
[23:50:54] <grondilu> I could make a role of course
[23:50:56] *** Quits: vrurg (~vrurg@45.74.95.181) (Remote host closed the connection)
[23:52:20] <grondilu> like, my $n = 7 but Modular(13); or somethinp
[23:52:55] <grondilu> but I think I had tried that before and I still didn't like it.  Too verbose.
[23:53:46] <moon-child> you could just overload == and leave all the other operators the same
[23:54:26] <grondilu> well that would be inefficient.   And that wouldn't work for modular inverse.
[23:55:35] <grondilu> making a role was kind of messy too because of the possibility of having several modulus in an expression.
[23:56:50] <grondilu> like what to do with (5 but Modulo(13)) + (6 but Modulo(7)) 
[23:57:30] <grondilu> thus me thinking of having a single modulus as an environment variable.
