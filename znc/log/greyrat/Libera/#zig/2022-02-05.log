[00:00:12] *** Quits: gwizon (~gwizon@ool-45798eff.dyn.optonline.net) (Quit: Lost terminal)
[00:09:16] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[00:10:37] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[00:11:39] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[00:15:20] *** Quits: rv1sr (~rv1sr@user/rv1sr) (Read error: Connection reset by peer)
[00:15:37] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[00:16:11] *** Quits: rv1sr (~rv1sr@user/rv1sr) (Client Quit)
[00:19:10] *** Joins: jemius (~jemius@p200300d9670774006e9e25a36f3e4533.dip0.t-ipconnect.de)
[00:41:51] <rom1504> what are the next big steps regarding the self hosted compiler ? (to make these tests pass)
[00:41:56] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[00:43:50] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[00:45:55] *** Joins: wavemode (~wavemode@2601:241:0:fc90:e107:b5f8:8bcd:8e3a)
[00:49:06] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Ping timeout: 245 seconds)
[00:51:38] <ifreund> rom1504: it's a pretty wide mix of things really, you can see a rough overview of the tests that aren't passing yet here: https://github.com/ziglang/zig/blob/master/test/behavior.zig
[01:40:00] *** Joins: terminalpusher (~terminalp@2a01:586:9ed:1:6a37:3ad8:8d25:55f4)
[01:43:21] <andrewrk> Live streaming in 15 min, experimenting with upstreaming arocc as a non-LLVM C compiler frontend. https://www.twitch.tv/andrewrok/
[01:43:57] *** Joins: demize (kyrias@archlinux/developer/demize)
[01:44:15] <ifreund> two streams in two days \o/
[01:44:19] <gw1> \o/
[01:44:31] <gw1> this should be very interesting
[01:44:39] <ifreund> I'm fixing river bugs right now but will put you on in the background :D
[01:49:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[01:54:08] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4455:76db:487:e9f8)
[01:58:44] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Quit: WeeChat 3.4)
[01:59:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[02:04:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:14:14] *** Joins: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com)
[02:18:17] *** Quits: terminalpusher (~terminalp@2a01:586:9ed:1:6a37:3ad8:8d25:55f4) (Remote host closed the connection)
[02:20:13] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4455:76db:487:e9f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:43] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:53:46] <demize> Hey, I'm pretty new to Zig and I'm currently playing around with trying to use it for an STM32 project.  It works fine in debug mode, but in release mode it's optimizing out some volatile stores.  Dumping the IR with --verbose-llvm-ir I see that the volatile stores have been turned into volatile @llvm.memcpy's, and there seems to be no significant difference between the modes, so might be an LLVM bug?
[02:54:02] <demize> Not quite sure how to debug this further however.
[03:00:23] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[03:03:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:07:41] *** Quits: jemius (~jemius@p200300d9670774006e9e25a36f3e4533.dip0.t-ipconnect.de) (Quit: Leaving)
[03:14:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[03:14:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:27:24] *** Joins: gwizon (~gwizon@ool-45798eff.dyn.optonline.net)
[03:27:41] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[03:39:37] *** Quits: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com) (Ping timeout: 240 seconds)
[03:45:29] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[03:54:07] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:57:17] *** Quits: gwizon (~gwizon@ool-45798eff.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:13:31] *** Joins: irek (~irek@public-gprs206802.centertel.pl)
[04:20:34] *** Quits: Tekk (~tekk@89.45.224.61) (Remote host closed the connection)
[04:22:32] *** Joins: Tekk (~tekk@206.217.205.105)
[04:28:21] *** Joins: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com)
[04:29:50] *** Quits: MadcapJake (~MadcapJak@047-012-202-057.res.spectrum.com) (Client Quit)
[04:31:28] *** Quits: Tekk (~tekk@206.217.205.105) (Remote host closed the connection)
[04:34:05] *** Joins: Tekk (~tekk@206.217.205.105)
[04:43:08] <jaredmm> Is it expected that `#define S 0xFFFFFFFFFFFFFFFE` would translate-c into a c_int instead of a larger datatype? 
[04:49:20] <ifreund> I think it should probably use comptime_int there tbh
[04:49:38] <ifreund> but there's probably some reason I'm not aware of that it doesn't 
[04:53:00] <ifreund> jaredmm: if you want to open an issue, c_int is definitely wrong if the value doesn't fit in an int
[04:53:02] <ifreund> https://en.cppreference.com/w/c/language/integer_constant
[04:53:16] *** Parts: irek (~irek@public-gprs206802.centertel.pl) (Killed buffer)
[04:53:18] <ifreund> see the "The type of the integer constant" section
[04:56:04] <jaredmm> I'll create an issue for it.
[04:57:27] <jaredmm> I don't believe that will solve the case I was looking at when I noticed it, but having it be more correct might help someone else.
[04:59:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:01:46] <jaredmm> I'm attempting to determine how translate-c should handle `#define S UINT64_C(0x01)` (or any of the variants). It seems like translate-c.zig:transMacroDefine would need to add pattern matching like transMacroFnDefine does, since there's no way to infer size from the value.
[05:08:57] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[05:09:51] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[05:12:11] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[05:18:37] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[05:18:46] *** Quits: koolazer (~koo@user/koolazer) (Remote host closed the connection)
[05:21:51] *** Joins: moog (~moog@107.126.53.132)
[05:29:53] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[05:44:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:44:54] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[05:47:42] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[05:51:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[05:52:46] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[05:55:20] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[05:59:37] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[06:00:49] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[06:12:57] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[06:13:50] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[06:13:57] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[06:16:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:28:34] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrygyp9y6vm9d1q.ipv6.telus.net)
[06:35:37] *** Quits: frmdstryr (~jrm@172.58.203.89) (Ping timeout: 240 seconds)
[06:43:35] *** Joins: frmdstryr (~jrm@172.58.203.89)
[06:50:37] *** Quits: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f) (Ping timeout: 240 seconds)
[06:51:03] *** Joins: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f)
[06:51:25] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 240 seconds)
[06:52:32] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[06:59:21] *** Joins: nektro (~meg@71-34-87-156.ptld.qwest.net)
[07:37:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:46:37] *** Quits: frmdstryr (~jrm@172.58.203.89) (Ping timeout: 240 seconds)
[07:48:57] <cr1901> marler8997_: Have you ever seen  %ERRORLEVEL% -1073741795 for zigup?
[07:49:48] <marler8997_> not that I can recall, how did you get that?
[07:50:25] <cr1901> Happy to open a bug report if necessary, but I don't have any output (and prob the wrong MSVC installed)
[07:50:57] <cr1901> http://gopher.wdj-consulting.com:70/paste/d5e43a01-88fe-4d09-ad33-e0709cc53bfd.tx
[07:50:59] <cr1901> http://gopher.wdj-consulting.com:70/paste/d5e43a01-88fe-4d09-ad33-e0709cc53bfd.txt
[07:51:20] <cr1901> marler8997_: All I had to do :D
[07:51:35] <marler8997_> is zigup downloaded from the releases?
[07:52:08] <cr1901> Yes
[07:52:25] <marler8997_> I'll see if I can reproduce real quick
[07:52:36] <cr1901> Tangent, is it possible to debug MSVC executables from a command prompt?
[07:52:58] <cr1901> I _have_ Visual Studio installed, but would rather not open it b/c it's awful :P
[07:53:24] <marler8997_> lol
[07:53:49] <marler8997_> that's one thing I really like about Zig, let's you compile Zig and C programs without having to install msvc
[07:54:45] <marler8997_> shoot not reproducing on my machine, what version of Windows you on?
[07:55:00] <cr1901> Microsoft Windows [Version 10.0.19044.1466]
[07:56:19] <marler8997_> darn, sounds like it's time to break out VS and debug it
[07:59:14] <marler8997_> I'm always up for helping to debug over a call on discord if you're into that sort of thing
[08:00:10] <cr1901> Discord isn't my thing. I was thinking of getting rid of MSVC, and replace it w/ the command line tools. But I can't find a debugger. Opening VS now
[08:00:54] <marler8997_> windbg has alot of features but it's a bit cryptic.  VS is annoying but it's also super easy to use, tradeoffs
[08:01:08] <marler8997_> are there other cmd-line debuggers in windows?
[08:02:57] <cr1901> gdb, but doesn't support pdb files. Is it possible for you to compile a gnu abi zigup (this will not affect me debugging using VS)?
[08:03:53] <marler8997_> let me see
[08:04:24] <cr1901> "Your evaluation period has ended. Please sign in to unlock the product."
[08:04:25] <cr1901> Oh...
[08:04:31] <cr1901> That's not good...
[08:05:54] <marler8997_> I think that one should already be using gnu, but I'll try to build another locally with x86_64-windows-gnu
[08:06:51] <cr1901> Oh, I think I might've been confused by the .pdb file that came w/ the binary
[08:07:24] <cr1901> No debugging symbols found in zigup.exe according to gdb... okay fine. I'll also compile locally
[08:08:57] <marler8997_> here's what I just built if you wanna try: http://marler.info/zigup.exe and http://marler.info/zigup.pdb
[08:09:49] <marler8997_> ooo I just thought of something.  The CI is building zig natively, rather than for generic x86_64
[08:10:14] <marler8997_> the one I gave you is built generic so if that works that could be the issue
[08:10:45] <cr1901> Windows defender really didn't like that zigup download lmao
[08:10:57] <cr1901> Can't win
[08:11:05] <marler8997_> lol yeah, unsigned executable
[08:12:18] <cr1901> marler8997_: Says your zigup contains a sabsik!ml trojan
[08:12:30] <marler8997_> lol!
[08:12:39] <cr1901> I've duplicated this behavior, so it's your zigup.exe
[08:13:06] <cr1901> and I've also tried compiling on my Linux box- but of course since my zig compiler is slightly off one of the deps won't compi;e
[08:13:22] <cr1901>  error: container 'std.compress.deflate' has no member called 'inflateStream'
[08:13:23] <marler8997_> you've duplicated? sorry what do you mean exactly?
[08:13:51] <cr1901> Ahh sorry, I mean I'm like 99% confident it's the zigup.exe and I'm not just saying that out of frustration :P
[08:14:06] <cr1901> it's your zigup.exe that has the trojan
[08:15:55] <marler8997_> easiest thing might be to build it yourself on your windows machine I think.  Easy, just download the zig zip file, extract it, and run "zig build -Dfetch" in the zigup repo
[08:16:15] <cr1901> Which exact zig version are you using?
[08:16:22] <cr1901> zig 0.9?
[08:16:29] <cr1901> or some master version?
[08:16:36] <marler8997_> just built it with 0.10.0-dev.283+ba0f72363
[08:17:04] <cr1901> 0.10.0-dev.7888... hmmm... a bit few more commits
[08:17:30] <cr1901> Assumming "7888" means "commits since last release"
[08:17:56] <nektro> cr1901: you can add exceptions in defender
[08:17:58] <marler8997_> oh shoot it doesn't build on master, I just tried, let me push a  fix
[08:18:02] <marler8997_> I got the inflateStream error
[08:18:23] <marler8997_> oh zarc is no longer building, might take a few minutes
[08:18:30] <cr1901> awesome, thanks
[08:19:12] <cr1901> I do really like the idea of zigup... reminds me of _another_ tool that ends in "up" :P
[08:20:17] <cr1901> Btw, I'm guessing "7888" is wrong and what actually happened is that whatever generated the version stream doesn't have all the tags)
[08:20:38] <cr1901> version string*
[08:20:40] <marler8997_> yeah 7888 not right, should be at 555
[08:21:46] <nektro> 7888 also doesnt make sense because exit codes are usually truncated to u8
[08:23:23] <cr1901> I hadn't fetch tags since 0.6.0 apparently
[08:23:26] <cr1901> whoops
[08:23:51] <cr1901> That's how those version strings usually work- they look for your most recent tag in your local copy
[08:24:19] <marler8997_> broke by this: https://github.com/ziglang/zig/pull/10552/files#diff-956c13c03748c835d402dccee4b5b0ddb201cf801254dd7142f3a1ed1a3ce403L142
[08:24:32] <nektro> ah that'll do it haha
[08:24:57] <cr1901> Yes, 16375 commits vs 8732 commits
[08:25:12] <cr1901> That's where "7888" commits came from in my zig version... my fault
[08:27:20] <cr1901> Yup, deflate.InflateStream doesn't exist anymore :D
[08:27:36] <cr1901> My zig was last compiled 8 days ago
[08:27:40] <cr1901> that'll do it
[08:31:38] <marler8997_> might have a fix, maybe 10 minutes to test in CI and integrate
[08:32:23] <cr1901> Cool, I can pull anyway in the meantime
[08:36:23] <marler8997_> kinda lame, the old api was removed so this is a breaking change, everyone will need to update zig
[08:36:55] <cr1901> Make a branch for the sake of allowing me to compile :P?
[08:37:04] <cr1901> so I can see if I can dup the problem?
[08:37:16] <cr1901> dup the original issue*
[08:37:39] <cr1901> Or better: send me a patch
[08:38:06] <cr1901> Oh wait... this is a problem in one of the deps
[08:38:10] <motiejus> I am ready to start testing 0.9.x (w.r.t. bazel-zig-cc) ; andrewrk can you confirm there are no short-term plans to recover building of artifacts from the release branches? Before I go build my own.
[08:39:07] <marler8997_> cr1901, ok I pushed a branch named "forcr1901" :)
[08:39:57] <marler8997_> ok fix pushed to zigup, should be buildable on zig master now
[08:42:55] <cr1901> marler8997_: Ahhh thanks, you didn't have to do that :D. I misunderstood anyway. I have a zig that's close enough to master; your changes worked fine.
[08:43:19] <marler8997_> it was faster to run git push than to clarify :)
[08:43:23] <cr1901> haha
[08:44:24] <cr1901> Yea, the zigup I just compiled works. Must be a 32-bit vs 64-bit thing?
[08:45:22] <marler8997_> I think it's a natively compiled vs cross compiled thing
[08:45:41] <marler8997_> by default zig compiles everything native with full optimizations turned on and taking advantage of your cpu info
[08:46:03] <marler8997_> by setting target to x86_64-windows it would be generic and should work on any 64-bit cpu
[08:46:09] <marler8997_> that's my guess as to what's going on anyway
[08:46:33] <cr1901> Is it possible to have a layout similar to .cargo/bin? 1/2
[08:47:10] <cr1901> I.e. zigup and the zig exe in one directory, and the zig exe defers to "where zigup keeps all the compiler data (under e.g. .rustup)"?
[08:48:58] <marler8997_> there is a --install-dir command-line option (mostly used for testing)
[08:49:15] <marler8997_> I was thinking of making that a build option for zigup
[08:49:16] <cr1901> http://gopher.wdj-consulting.com:70/paste/f57697cc-a2ec-43d5-b63e-3b480cdd9e40.txt I swear I'm not making your life hard on purpose :P
[08:50:28] <marler8997_> 0xC0000056
[08:50:28] <marler8997_> STATUS_DELETE_PENDING
[08:51:12] <cr1901> Also a probably related error: AccessDenied
[08:51:55] <marler8997_> damn windows
[08:52:18] <cr1901> Okay will it succeed on the subsequent zigup master
[08:52:28] <marler8997_> yeah I expected that
[08:52:36] <marler8997_> but very lame it fails the first time
[08:52:55] <cr1901> Is that expected behavior, a bug, worth opening an issue, etc?
[08:53:09] <marler8997_> and there is another error in Zig's error handler preventing us from seeing the stacktrace (the subsequent FileNotFound error)
[08:53:16] <marler8997_> yeah definitely
[08:53:58] <cr1901> With that being all said, I now have a working zig and zigup :). Hopefully the CI artifacts work at some point (will test newer ones), but this is okay for now
[08:54:33] <marler8997_> yeah I think I just need to add -Dtarget=x86_64-windows for the windows build
[09:01:04] <cr1901> https://github.com/marler8997/zigup/issues/49
[09:01:24] <cr1901> >extracted archive in 162.98 s
[09:01:26] <cr1901> LOVE defender
[09:02:21] <cr1901> Oh right, this is also a debug build
[09:02:30] <marler8997_> windows is trying really hard to find something in there :)
[09:06:00] <cr1901> extracted archive in 112.72 s for 0.9.0 with a release-fast zigup
[09:06:23] <cr1901> So yea. Defender + 10 year old Sandy Bridge laptop == showing age
[09:07:21] <cr1901> Anyways, tyvm for the help, I'm satisfied :)
[09:13:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:19:19] *** Joins: phaleth (~user@user/phaleth)
[09:23:24] <cr1901> marler8997_: FWIW, the install-dir option may be useful than more as a test option; MSYS2/bash can't tell the difference between the zig/ and zig binary. I have to use zig.exe
[09:23:49] <cr1901> Works fine in command-prompt
[09:24:11] <cr1901> (i.e. I type "zig" and command prompt doesn't trip up on zig/ vs zig.exe)
[09:27:25] <marler8997_> jesus msys2/bash is weird
[09:27:50] <cr1901> paths hard
[09:28:03] <marler8997_> on linux it goes to ~/zig by default
[09:28:59] <marler8997_> definitely willing to make it a build option, adding a config file I'm not sure yet
[09:29:59] <cr1901> Bootstrapping zigup by downloading a zig compiler, and then compiling zigup source w/ the build option to change the install location seems reasonable for now
[09:30:28] <marler8997_> it's what I do :)
[09:33:26] <nektro> on linux exes dont have the extension and you're not allowed to conflict names
[09:35:14] <cr1901> I think it's a conflict b/c "zigup" works just fine w/o the extension
[09:36:10] <marler8997_> on windows it tries adding all the entries in PATHEXT to the program you're calling, not sure what msys2 does though
[09:37:17] <cr1901> I'm not sure I've ever run into this issue in practice where "binary and dir have same name"
[09:37:23] <cr1901> in the same dir*
[09:37:47] <marler8997_> yeah maybe there is a better option for default install dir on windows
[09:38:03] <cr1901> I plan to rename the directory to zig-compilers
[09:46:17] <cr1901> Btw, the build script for zigup hangs from a command prompt or bash prompt with my freshly compiled zigup from Linux :P
[09:50:02] <cr1901> Happens when calling the zig binary directly as well, not just the exelink that's installed next to zigup
[09:50:42] <cr1901> Is it possible to compile the build.exe in debug mode?
[09:53:32] <andrewrk> motiejus, confirmed, no short term plan to publish build artifacts for release branches
[09:59:40] <motiejus> Noted, thanks
[10:00:49] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[10:09:49] *** Joins: notzmv (~zmv@user/notzmv)
[10:23:56] *** Joins: Guest53 (~Guest53@133-149-208-101.east.ap.gmo-isp.jp)
[10:24:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[10:26:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[10:27:48] *** Quits: Guest53 (~Guest53@133-149-208-101.east.ap.gmo-isp.jp) (Client Quit)
[10:28:15] *** Joins: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp)
[10:28:33] *** Quits: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp) (Client Quit)
[10:30:02] *** Joins: random (~random@133-149-208-101.east.ap.gmo-isp.jp)
[10:33:17] *** Quits: random (~random@133-149-208-101.east.ap.gmo-isp.jp) (Client Quit)
[10:33:32] *** Joins: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp)
[10:38:55] *** Quits: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp) (Quit: Client closed)
[10:39:42] *** Joins: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp)
[10:46:36] *** Quits: plumeus (~plumeus@133-149-208-101.east.ap.gmo-isp.jp) (Changing host)
[10:46:36] *** Joins: plumeus (~plumeus@user/plumeus)
[10:50:03] <plumeus> Hello, I wanted to ask if there's a way to make `build.zig` or `zig build-exe` output C compile warnings.
[10:50:21] <plumeus> From what I could tell, the only way is to pass `-Werror`?
[10:55:00] <plumeus> Another thing I was wondering is whether it's intentional that `zig cc` only prints compile warnings the first time around, and is silent the 2nd time (presumably because the compilation is cached).
[10:55:46] <motiejus> Regular cflags are supported, so start with just `-W`? And you are right about caching
[10:56:48] <plumeus> I tried using `ccache` and (assuming I'm using it correctly) it seems to output warnings every time. Any reason why `zig cc` can't do the same?
[10:56:53] <motiejus> You may want to fail compilation with `-Werror`, so you won't get the cache behaviour
[10:57:17] <motiejus> Because zig is smarter :)
[10:57:42] <plumeus> I tried passing `-W` flags in a sample `build.zig` file to build a C project. They all seem to do nothing without `-Werror`.
[10:58:23] <motiejus> Ah, so you won't see warnings at all unless you pass -Werror?
[10:58:24] <plumeus> So I'm thinking that it would make sense if `-Werror` was passed by default, or if some option was added to make the warnings visible (assuming I'm not blind and didn't overlook anything obvious)
[10:58:57] <plumeus> `zig cc` works the first time around. `zig build-exe` and `build.zig` refuses to show warnings whatsoever, even when I delete the cache.
[10:59:22] <plumeus> So yeah, `-W` flags seem useless without `-Werror`.
[10:59:38] <motiejus> Ack. I never used build-exe seriously, only zig cc, so can't comment on that
[11:00:41] <plumeus> I figured I would try writing a proposal to enable `-Werror` by default on `build.zig`, but I thought I should ask here first.
[11:00:47] <plumeus> (My first day on IRC, lol)
[11:03:11] <motiejus> You may want to file a task (or wait for a second opinion) w.r.t. build-exe, zig cc seems to be doing the right thing
[11:03:39] <motiejus> I.e. file a task about not showing the warnings.
[11:04:19] *** Quits: wavemode (~wavemode@2601:241:0:fc90:e107:b5f8:8bcd:8e3a) (Ping timeout: 256 seconds)
[11:04:36] <plumeus> btw, why can't (or why shouldn't) `zig cc` just cache the outputs of the warnings and display it every time? I presume that's what `ccache` is doing.
[11:04:53] <plumeus> Although it could be that I'm using `ccache` wrong, it's my first time trying it.
[11:06:48] <nektro> zig enables some perf and safety flags by default but it leaves the warnings to clangs defaults so that it can be used as a stand in replacement
[11:06:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:09:05] <plumeus> I say it fails to replicate Clang's default behavior if it doesn't ever print the warnings. But I do see how a compile error is more intrusive than a runtime error (like UBSAN for debug/safe)
[11:10:14] <daurn> plumeus: zig build-exe doesn't have any warnings on purpose
[11:10:28] <daurn> `zig cc` follows the traditional C compiler CLI if that's what you want
[11:11:12] <plumeus> I'm actually talking about `build.zig`'s behavior, but `build.zig` seems to call `zig build-exe`?
[11:11:59] <daurn> depends on your build.zig :P
[11:12:36] <plumeus> Fair
[11:13:38] <plumeus> I meant the standard one created with `zig init-exe`, using `exe.addExecutable` and `exe.install`.
[11:14:15] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:14:17] <plumeus> But I'm not aware on any option provided by `std.build.Builder` to make it easier to call `zig cc`
[11:18:18] <plumeus> I know `zig cc` is a drop-in replacement. But is `zig build-exe` also intended to be one? (I mean, I guess it's fair to assume it is unless stated otherwise, but eh)
[11:19:30] <ikskuh> plumeus: "zig build-exe" is the zig style frontend to the compiler
[11:19:44] <ikskuh> it doesn't have all "zig cc" options, but uses the zig style ones
[11:19:57] <ikskuh> it's not a drop-in c compiler, but just a c compiler
[11:20:52] <ikskuh> also, you can enable warnings as well when using build.zig
[11:21:04] <ikskuh> you just only get them once (when the C file is actually compiled)
[11:21:17] <ikskuh> after that, the file content is cached and you won't get any warnings anymore
[11:21:19] <plumeus> I don't think I even get them once.
[11:21:26] <plumeus> lemme triple check
[11:24:59] <plumeus> I did `rm -r zig-cache ~/.cache/zig` and then tried running the relevant `zig build-exe` command, no warning.
[11:25:33] <ikskuh> hm
[11:25:39] <ikskuh> i remember getting warnings at a point
[11:25:42] <plumeus> `zig cc` gives the warning once, and obviously gets cached so it no longer gives an error
[11:25:45] <ikskuh> i think this is definitly a bug
[11:26:16] <plumeus> On version `0.10.0-dev.536+557a09752`
[11:26:39] <plumeus> I feel like I've gotten warnings when there was some unrelated compile errors? Might be recalling incorrectly.
[11:27:20] <plumeus> nope, doesn't seem to be the case
[11:27:44] <plumeus> so adding `-W` flags for `build.zig` seems completely useless without `-Werror` from what I can tell.
[11:28:59] <plumeus> idk, I could try with Zig 0.8.1 to see if it's a regression
[11:34:54] <ikskuh> you're hexandwhy on discord?
[11:44:45] <plumeus> Yes, I am
[11:45:42] <plumeus> Also, checked with 0.8.1, no warning as expected.
[11:57:06] <plumeus> Huh, Zig isn't accepting any proposals right now. Welp. I don't think this qualifies as a bug.
[11:57:43] <plumeus> referring to https://github.com/ziglang/zig/blob/master/.github/ISSUE_TEMPLATE/proposal.yml
[12:00:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[12:02:50] *** Joins: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997)
[12:18:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[12:20:26] *** Joins: bindu (~bindu@user/bindu)
[12:55:04] *** Joins: jemius (~jemius@p200300d967291b005c9bec1c7604d3f9.dip0.t-ipconnect.de)
[13:38:03] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:47:35] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[13:56:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[14:18:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:31:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:33:40] *** Quits: jemius (~jemius@p200300d967291b005c9bec1c7604d3f9.dip0.t-ipconnect.de) (Quit: Leaving)
[14:49:51] *** Quits: nektro (~meg@71-34-87-156.ptld.qwest.net) (Quit: WeeChat 3.1)
[15:01:55] *** Quits: plumeus (~plumeus@user/plumeus) (Quit: Client closed)
[15:03:03] *** Joins: plumeus (~plumeus@user/plumeus)
[15:07:46] *** Quits: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997) (Quit: Reconnecting)
[15:07:53] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrygyp9y6vm9d1q.ipv6.telus.net) ()
[15:08:01] *** Joins: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997)
[15:09:05] *** Joins: plumeus32 (~plumeus@user/plumeus)
[15:09:06] *** Quits: plumeus (~plumeus@user/plumeus) (Quit: Client closed)
[15:10:05] *** Quits: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997) (Client Quit)
[15:10:19] *** Joins: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997)
[15:10:36] *** Quits: plumeus[m] (~plumeusda@2001:470:69fc:105::1:9997) (Client Quit)
[15:10:50] *** Joins: plumeus[m] (~plumeus@2001:470:69fc:105::1:9997)
[15:13:03] *** Quits: plumeus[m] (~plumeus@2001:470:69fc:105::1:9997) (Client Quit)
[15:13:17] *** Joins: plumeus[m] (~plumeus@user/plumeus)
[15:13:43] *** plumeus[m] is now known as plumeus
[15:13:49] <plumeus> test
[15:15:10] *** Quits: plumeus32 (~plumeus@user/plumeus) (Quit: Client closed)
[15:18:07] <ikskuh> akc
[15:18:11] <ikskuh> *ACK
[15:18:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[15:21:00] <plumeus> Anyhow, I just realized that the proposals not being accepted is limited to the language
[15:21:50] *** Joins: Guest46 (~Guest46@133-149-208-101.east.ap.gmo-isp.jp)
[15:31:44] <ikskuh> plumeus: not showing warnings is definitly a bug
[15:32:29] <plumeus> https://github.com/ziglang/zig/issues/10800 for `zig cc`
[15:32:52] <ikskuh> also it's not a *language* proposal but a huge improvement for the toolchain
[15:33:19] <plumeus> I guess I should open a separate bug for `zig build-exe`?
[15:34:35] <ikskuh> i think you can combine these
[15:36:02] <plumeus> Okay, I guess I'll add it as a comment
[15:59:37] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:02:15] *** Joins: jonas_ (~textual@55867b35.cust.multi.fi)
[16:03:31] *** Joins: frmdstryr (~jrm@172.58.203.89)
[16:06:35] *** Quits: jonas_ (~textual@55867b35.cust.multi.fi) (Ping timeout: 256 seconds)
[16:07:45] *** Quits: Guest46 (~Guest46@133-149-208-101.east.ap.gmo-isp.jp) (Quit: Client closed)
[16:15:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:23:14] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:39:29] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[16:42:52] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[17:13:03] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:41:05] *** Joins: gwizon (~gwizon@ool-45798d64.dyn.optonline.net)
[17:41:19] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:58:27] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:59:03] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[18:00:01] *** Quits: gwizon (~gwizon@ool-45798d64.dyn.optonline.net) (Ping timeout: 256 seconds)
[18:00:48] *** Joins: gwizon (~gwizon@ool-45798d64.dyn.optonline.net)
[18:01:37] *** Quits: rv1sr (~rv1sr@user/rv1sr) (Ping timeout: 240 seconds)
[18:04:10] *** Joins: terminalpusher (~terminalp@2a01:586:8792:1:d84e:90f7:6cd7:4a36)
[18:13:38] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[18:15:07] *** Quits: gwizon (~gwizon@ool-45798d64.dyn.optonline.net) (Ping timeout: 250 seconds)
[18:15:49] *** Joins: arkurious (~arkurious@user/arkurious)
[18:19:45] *** Quits: terminalpusher (~terminalp@2a01:586:8792:1:d84e:90f7:6cd7:4a36) (Remote host closed the connection)
[18:32:35] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[18:58:48] <motiejus> I've tested the latest commit in in 0.9.x branch (0.9.0-78-ga418c5954), it passes all tests of bazel-zig-cc
[18:59:02] <motiejus> cc andrewrk ^^
[19:14:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:08:12] <demize> D'oh, just realized that the problem I had is that those registers only allow word-sized stores.  Is there any way to force the compiler to do a volatile whole-word store rather than compiling to an llvm.memcpy that fiddles with the bytes directly, or do I have to use inline assembly to ensure it?
[20:45:03] *** Joins: dmh (~dmh@pclmulqdq.dev)
[20:52:24] *** Joins: wavemode (~wavemode@2601:241:0:fc90:5d33:217d:3934:b62c)
[20:57:40] <demize> Just found an open proposal for supporting exactly that, so inline asm it is.  :)
[21:00:28] <ifreund> demize: are you doing the stores through a word sized pointer already? If not you could try that to avoid inline asm
[21:01:03] <ifreund> um, I mean a pointer to a word sized int, *usize
[21:03:04] <ifreund> mircozig has an abstraction for MMIO you might be interested in: https://github.com/ZigEmbeddedGroup/microzig/blob/master/src/core/mmio.zig
[21:03:19] <ifreund> not really sure if the complexity's worth it though
[21:03:39] <dmh> howdy yall, im stumbling a bit coming back after few years, im trying to make a program written in c (yet to be ported), then run it on my zig build output. ive about got it with add system command, but wondering how to do it with the exe directly since getOutputPath was removed
[21:03:50] <dmh> can see here https://github.com/DexterHaslem/am335x-os/blob/master/zig/build.zig#L41
[21:04:42] <demize> I'm using svd4zig, and it uses `*volatile u32`, usize doesn't make a difference alas.
[21:05:02] <demize> It generates code that does pretty much the same as that abstraction.
[21:05:29] <ifreund> :/
[21:05:33] <demize> In debug mode it ends up doing proper stores, but in release mode LLVM takes more liberties and does multiple read and stores.
[21:06:09] <demize> And like, the inline assembly is a single instruction so it's not a problem, but I'd prefer it if I could just tell zig what access patterns are okay.
[21:06:20] <demize> (<https://github.com/ziglang/zig/issues/5591> is the proposal that I mentioned btw.)
[21:06:38] <ifreund> dmh: you can use LibExeObjStep.run() which will return a std.build.RunStep
[21:07:30] <dmh> hrmph, ok. i was looking at the run change from https://github.com/ziglang/zig/pull/2038 but didnt quite understand how to use run
[21:08:20] <dmh> i think i will port that helper first then try to pass the args to a proper run
[21:08:34] <ifreund> dmh: `zig init-exe` will create an example build.zig with a run step
[21:08:58] <ifreund> https://github.com/ziglang/zig/blob/master/lib/std/special/init-exe/build.zig
[21:09:11] <dmh> ah yea i see
[21:09:27] <dmh> sweet
[21:12:09] <ifreund> > IR-level volatile loads and stores cannot safely be optimized into llvm.memcpy or llvm.memmove intrinsics even when those intrinsics are flagged volatile.
[21:12:26] <ifreund> demize: I think it's an llvm bug, that's from the llvm language reference
[21:12:35] <ifreund> https://llvm.org/docs/LangRef.html#volatile-memory-accesses
[21:16:19] *** Joins: xackus (~xackus@185.15.0.3)
[21:24:06] <demize> Yeah, I saw that, but I wasn't sure whether it was Zig or LLVM that turned it into a llvm.memcpy.
[21:24:41] <ifreund> definitely LLVM
[21:26:47] <demize> I also found an old llvm-dev thread about volatile pointers saying that the semantics over the actual access patterns are essentially unspecified and target-specific, and that the only thing you can rely on is the order and that they will happen.
[21:27:52] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[21:28:43] <demize> (<https://groups.google.com/g/llvm-dev/c/n-yw-w-PwEA/m/pWe7VAO0BQAJ>)
[21:52:10] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[22:17:41] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[22:48:15] *** Joins: jemius (~jemius@p200300d967291b005c9bec1c7604d3f9.dip0.t-ipconnect.de)
[22:52:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:55:26] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[23:06:28] *** Quits: jemius (~jemius@p200300d967291b005c9bec1c7604d3f9.dip0.t-ipconnect.de) (Quit: Leaving)
[23:08:25] <motiejus> is there a recommended big-endian architecture that's supported by both zig and qemu? I would like to test some C and zig code on big-endian to make sure it doesn't slip little-endian assumptions anywhere
[23:09:25] <ifreund> hmm, powerpc64 might be your best bet
[23:09:50] <ifreund> I wouldn't be surprised if you run into some std issues or something though
[23:10:04] <andrewrk> motiejus, thanks for testing! the plan is just 3 more regressions to fix (the issues in the 0.9.1 milestone) and then the tag
[23:10:45] <andrewrk> we have mips-linux-musl in the test matrix. that's 32 bit big endian
[23:19:02] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:26:22] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Remote host closed the connection)
[23:26:42] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[23:32:37] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:32:53] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[23:34:35] *** Joins: outfox (~outfox@213.144.147.16)
[23:34:35] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[23:34:35] *** Joins: outfox (~outfox@user/outfox)
[23:35:33] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[23:36:21] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Remote host closed the connection)
[23:36:41] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[23:49:43] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:56:28] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[23:58:03] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
