[00:01:37] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[00:01:53] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:06:17] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[00:18:50] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[00:19:26] *** Joins: amk (~amk@109.255.169.126)
[00:29:49] <hobo> does anyone know if there is an IRC channel for croatoan somewhere?
[00:31:39] <rotateq> hobo: no sorry not that i would be aware of. maybe you can ask in #clim too
[00:32:01] <hobo> rotateq: i'll try that, thank you
[00:32:32] <rotateq> just a random thought, as croatoan is also for graphical interfaces ^^
[00:52:17] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[01:00:45] * edgar-rft wants a channel with croutons
[01:08:45] *** Joins: jstoddard (~user@2600:8801:a400:5a00::ba77)
[01:11:38] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:11:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:19:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:20:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:20:19] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[01:26:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:26:33] <jstoddard> Last night I finished reading through "Ray Tracing in One Weekend" and implementing it in Common Lisp: https://github.com/jstoddard/rtiow
[01:27:30] <jstoddard> The code is a bit ugly because it's too faithful to the C++ original rather than idiomatic Lisp. It's also terribly inefficient (at the book's settings it will take a couple days to render the random scene on my computer).
[01:27:58] <jstoddard> But I'll worry about those details later. My brain is about to mutiny.
[01:28:20] <jstoddard> I'm just happy it works.
[01:28:52] *** Joins: epony (epony@user/epony)
[01:31:03] <phoe> jstoddard: you should be able to replace your VEC3 implementation for a native vector of three double-floats, and properly adjust your accessors, to get an immediate significant speed boost
[01:31:07] <phoe> other than that, congrats!
[01:32:52] <jstoddard> phoe: Thanks! That will probably be the first thing I try.
[01:38:38] *** Joins: fazz234234372 (~fazz23423@194.sub-174-193-213.myvzw.com)
[01:49:17] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 240 seconds)
[01:49:38] *** Quits: pve (~pve@178-55-147-163.bb.dnainternet.fi) (Quit: leaving)
[01:57:24] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:59:11] *** Quits: dra (~dra@2a04:4540:6407:f800:2d34:8e98:9953:8f90) (Quit: Leaving)
[01:59:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[02:02:16] <rotateq> edgar-rft: :D
[02:05:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[02:06:20] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b9b1:131a:a145:7511)
[02:07:37] *** Quits: fazz234234372 (~fazz23423@194.sub-174-193-213.myvzw.com) (Quit: Connection closed)
[02:07:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:10:01] <aeth> you have to be careful with high-performance double float vec3's, actually
[02:10:13] <aeth> implementations will (probably) box them
[02:10:42] <phoe> only on the function call barrier though, right?
[02:10:47] <aeth> you have to make sure that the doubles themselves don't leave the scope of a function except inside of a vector to let implementations optimize double float operations
[02:10:53] <phoe> if a vector of three floats is passed around then the vector will act as a box
[02:10:58] <phoe> oh yes, right, that
[02:11:11] <aeth> so e.g. (setf (aref a 2) 42d0) is a bad last line, which you normally don't have to worry about for just about any other niche in CL... that implicit return value that's so common
[02:11:53] <aeth> (setf (aref a 2) 42d0) probably won't speed up your code that much if it winds up having to box it to return it (just to discard it later on because you never cared about it in the first place)
[02:12:44] <aeth> it shows up a lot if you just translate C/C++ numerical stuff
[02:14:42] <aeth> it also sets up a situation where you'll want to have 1-length or 0-dimensional vectors to store doubles (a manual box of sorts) when the C/C++ API will just use scalars
[02:14:43] <jstoddard> I shouldn't have a lot of that in my code to worry about. It's not anything near functional, but at least for the vec3's I think I've tended to return new vectors rather than modify elements.
[02:15:01] <aeth> (store doubles that cross the function call boundary, I mean)
[02:15:12] <aeth> (unless you put them in a struct instead, but I think only SBCL optimizes those)
[02:24:46] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[02:26:26] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[02:31:37] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f804:8660:ef2a:464)
[02:35:27] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b9b1:131a:a145:7511) (Ping timeout: 250 seconds)
[02:36:11] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 252 seconds)
[02:38:16] *** Quits: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 245 seconds)
[02:50:30] *** Joins: yewscion_ (~yewscion@2604:ca00:15a:aa60::a60:8776)
[02:59:59] *** Joins: dra (~dra@2a04:4540:6407:f800:8da5:1ae0:26e9:c499)
[03:00:53] *** yewscion_ is now known as yewscion
[03:11:15] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[03:18:46] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 260 seconds)
[03:20:35] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f804:8660:ef2a:464) (Read error: Network is unreachable)
[03:26:03] *** Quits: myrrh (~markus@172.58.196.91) (Ping timeout: 256 seconds)
[03:27:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:43:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:43:40] *** Joins: dra_ (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499)
[03:46:12] *** Quits: dra (~dra@2a04:4540:6407:f800:8da5:1ae0:26e9:c499) (Ping timeout: 240 seconds)
[03:53:12] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[03:54:41] *** Joins: igemnace (~ian@user/igemnace)
[03:59:28] <remexre> is there a standard way to "expand" a derived type specifier?
[04:02:52] <rotateq> remexre: typexpand, but it's not in the standard
[04:07:02] <remexre> rotateq: ah, thanks; I guess it working on SBCL is probably good enough, since it's only needed in one of the tests
[04:07:17] <rotateq> yes it's in the CL-USER package
[04:09:34] <remexre> SB-EXT too, looks like
[04:09:48] <rotateq> ah okay
[04:10:19] <rotateq> i learned recently there's sb-ext:truly-the which SBCL trusts :D
[04:14:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:16:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[04:17:27] <rotateq> remexre: yes then the CL-USER imports it from sb-ext in SBCL
[04:22:43] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[04:28:37] *** Quits: yewscion (~yewscion@2604:ca00:15a:aa60::a60:8776) (Ping timeout: 240 seconds)
[04:37:22] *** Quits: VincentV` (~user@212.97.4.164) (Remote host closed the connection)
[04:39:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:52:59] *** Joins: nij- (~jin@2001:48f8:9021:806::d58e)
[04:59:57] *** Quits: dra_ (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499) (Ping timeout: 240 seconds)
[05:11:57] *** Quits: jstoddard (~user@2600:8801:a400:5a00::ba77) (Ping timeout: 240 seconds)
[05:20:57] *** Quits: nij- (~jin@2001:48f8:9021:806::d58e) (Quit: Using Circe, the loveliest of all IRC clients)
[05:23:55] <rotateq> Sorry but this nij person gets on my nerves discreetly, seems really basic things do not understand, but means already and that yes the others do not. Then there's this abstract-"modern" math gobbledygook.
[05:24:21] <Bike> where did that come from?
[05:24:26] <rotateq> And I never do this or even think it so harsh, but it drives me really crazy! sorry
[05:24:47] <rotateq> it was also some months ago, I can't talk to this person. sad but true
[05:25:01] <rotateq> yes Bike that's the big question
[05:25:14] *** Joins: jstoddard (~user@2600:8801:a400:5a00::3e0d)
[05:26:00] <rotateq> okay I know it sounds rude and impolite now, as not at all
[05:26:17] <Bike> well, this channel is publicly logged, so you can talk about it with them next time they come online, i guess
[05:26:51] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:26:52] <rotateq> i tried, and yes you're right of course. but i can't find the right words, nothing has effect
[05:29:27] <rotateq> Okay I'll do next time, better than not. me feelings broke a bit out with all that *breathing out*
[05:30:13] <rotateq> s/me/my
[05:31:55] <rotateq> And now the last drop to the barrel surely did come from query in the last hour of course.
[05:36:50] <Lycurgus> "abstract modern math gobbeldygook" is that like vs the times tables and the goesintas
[05:36:56] <Lycurgus> ?
[05:37:28] <rotateq> hm no
[05:38:29] <Lycurgus> there is a branch of modern math that openly calls itself abstract nonsense
[05:38:39] <Lycurgus> namely category theory
[05:38:53] <rotateq> haha Lycurgus good one :D
[05:39:26] <Lycurgus> https://en.wikipedia.org/wiki/Abstract_nonsense
[05:39:48] <rotateq> "No PAIP doesn't interest me, we don't need symbolic computing for math."
[05:39:57] <rotateq> or other stuff
[05:40:29] <Lycurgus> nij said that?
[05:41:01] <rotateq> i could give you the newer query log but yes, one of the things
[05:41:18] <rotateq> he wants doing a "modern" CAS
[05:41:38] <Lycurgus> from some perspective that's right as symbolic vs quantitative/math is a going dichotomy
[05:42:11] <rotateq> I just got in touch superficial (by reading) in November 2020, but it gives me slight hexstream feelings.
[05:42:46] <rotateq> yes okay, but it can't be ignored, especially not when doing maths for computer science or physics
[05:43:45] <Lycurgus> it's an AI axis/dimension like neat vs scruffy
[05:46:08] <rotateq> yeah okay
[05:47:53] <rotateq> So whatever, people have meanings. Next time I'll clearly say I don't see a correspondence in any way further.
[05:49:33] *** Joins: asarch (~asarch@189.250.251.32)
[05:53:42] <Lycurgus> agree though doing a 'modern' CAS, assuming that means like in contrast to macsyma or whatever seems less than a contribution
[05:54:22] <Lycurgus> unless there are real advances that would make it better than the plethora of existing one
[05:54:40] <Lycurgus> *ones
[05:55:02] <Lycurgus> i.e. bundled in various products/pkgs such as mathematica
[05:55:11] <Lycurgus> or standalone pkgs
[05:56:52] <Lycurgus> also CAS is all about the symbols
[06:00:14] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[06:04:26] <rotateq> Yes.
[06:05:03] <rotateq> symbols are power :)
[06:06:04] <Lycurgus> well i'd say that was knowledge but algebra is definitely about symbols
[06:12:20] <rotateq> yes that was one of my points, but whatever
[06:14:05] <rotateq> You people here now know me some time (as I'm also lotuseater) and how I really am. I apologize that it has overcome me and hope we can keep on as it's very important to me.
[06:15:39] <Lycurgus> lotuseater? only familiar with that in the sybarite context, does it have a lisp association?
[06:18:10] <rotateq> Lycurgus: no, but a mathematical one and with greek mythology :) the newer one i use now was also for having a lispier nickname in petto
[06:18:23] <Lycurgus> ah
[06:23:24] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[06:24:12] <rotateq> and my love for number theory and concrete(!) mathematics :)
[06:27:26] *** Quits: asarch (~asarch@189.250.251.32) (Quit: leaving)
[06:30:55] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[06:35:06] *** Joins: panji (~panji@120.188.32.184)
[06:41:45] <panji> Hello, is there any system support uuencode and uudecode?
[06:47:15] <rotateq> Maybe you want READ-FILE-INTO-BYTE-VECTOR and WRITE-BYTE-VECTOR-INTO-FILE from alexandria.
[06:47:43] <rotateq> With associating the bytes with their fitting chars of course. :)
[06:52:00] *** Quits: panji (~panji@120.188.32.184) (Ping timeout: 268 seconds)
[06:59:51] *** Joins: Oladon (~olad@98.43.81.226)
[07:03:24] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:04:45] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[07:05:00] *** Joins: karlosz (~karlosz@136.56.98.53)
[07:05:24] *** Joins: panji (~panji@120.188.32.111)
[07:12:58] * panji wonder if disconnection made my reply lost?
[07:13:26] <rotateq> Yes sorry. :/
[07:13:54] <rotateq> If you're on mobile it can be not so stable.
[07:14:58] <panji> rotateq: my connection is bad. :/
[07:16:07] <panji> rotateq: The specs said "Files can be attached to scripts and are stored as plain text. The method used is a form of UUEncoding." I don't want to implement it myself, or should i wait the specs change to BASE64... :)
[07:17:03] <rotateq> Ah don't worry.
[07:17:55] <rotateq> Oh okay, but I think I don't get yet what you want to achive.
[07:20:04] <panji> rotateq: Oh, i am writing this for fun https://github.com/epanji/claraoke/
[07:21:17] <rotateq> Fun is always important in programming and life. :)
[07:23:34] <rotateq> With peeking at some files, looks like you're a very advanced (or more) user already.
[07:25:20] <opalvaults[m]> Hopefuly I'm not interrupting anything. I'm having trouble with the homoiconicity of Lisps and was wondering if anyone had a similar experience, and what helped them finally start to read past the intermingling of data and code?
[07:26:07] <rotateq> No you're not opalvaults[m] I would say, but I should sleep finally.
[07:26:33] <hayley> I haven't found it to be a problem. Usually it is evident when you have data or code.
[07:26:38] <rotateq> opalvaults[m]: That's a very big question. :)
[07:27:18] <hayley> It's useful to use data as code (e.g. pass it to COMPILE or EVAL) but usually you don't, and so you can tell if something is used as data, or used as code.
[07:27:29] <rotateq> hayley: Maybe it's kind of being used to another way of thinking.
[07:27:45] <hayley> ...and it's also to process code as data, but again that's the exception to the norm.
[07:28:38] <hayley> rotateq: I don't think there is really a new way of thinking, and that's just something Paul Graham acolytes say to make Lisp sound cool. Or maybe I internalised it. Who knows.
[07:28:57] <rotateq> hayley: I mean for the person who asked right now.
[07:29:09] *** Quits: panji (~panji@120.188.32.111) (Ping timeout: 256 seconds)
[07:29:40] <rotateq> Oh in 5 minutes some other person will show up by high chance.
[07:29:42] <opalvaults[m]> For background, I work with Python mostly. And having had much use for strong typing so it's usually not a problem of what the data is ie vectors, tuples, etc.
[07:29:55] <opalvaults[m]> let me see if I can find a good example
[07:30:07] <beach> Good morning everyone!
[07:30:14] <rotateq> Yes no problem opalvaults[m].
[07:30:27] <rotateq> beach: Faster than I predicted. Good morning.
[07:30:48] <hayley> I mean, in a typed language you could just have a "code" type (e.g. Scala, F♯), and there would be protocol functions on code objects. But still that's just data until you EVAL or COMPILE.
[07:32:37] <opalvaults[m]> https://paste.debian.net/plain/1224870
[07:33:18] <opalvaults[m]> Here's a particular example I'm trying to refactor a little if possible, to remove :source potentially so that users can mroe easily decide what source they would like to show up first (in this case, it's Global history, URLS, etc. boring stuff.
[07:33:22] <opalvaults[m]> Anyways the point is
[07:33:38] <opalvaults[m]> I get lost in that let expression almost immediately as it nests further and further.
[07:34:26] <hayley> What does it have to do with code and data looking the same?
[07:34:52] <opalvaults[m]> Hm, maybe I'm not explaining myself very well.
[07:36:07] <hayley> You could use LET* instead of LET and break up the value form for ACTIONS.
[07:36:23] <opalvaults[m]> If we only take the let expression from there, and we travel down to:
[07:36:23] <opalvaults[m]> (mapc (lambda (suggestion) (make-buffer :url (url suggestion))) (rest suggestion-values))
[07:36:23] <opalvaults[m]> By this point I've completely lost track of what data is supposed to be in suggestion and suggestion-values.
[07:36:51] <opalvaults[m]> And why it's being mapcar'ed into a lambda expression
[07:37:11] <opalvaults[m]> not that I'm asking anyone to figure it out for me
[07:38:19] <opalvaults[m]> It was more a general question towards other questions about when does the homoiconicity become a bit easier to digest. If think if I showed that to any developer who wasn't familiar they'd feel as if they didn't know what data was coming in and out of this procedure as you get further nested into this let.
[07:38:26] <opalvaults[m]> towards other users**
[07:39:36] <beach> opalvaults[m]: "homoiconicity" means that data and code look the same.  Your problem is unrelated to homoiconicity.
[07:39:57] <opalvaults[m]> I hope that's a bit more clear.
[07:40:29] <opalvaults[m]> is it not to do with the fact that "buffer-load (url (first suggestion-values))))" are all arbitrary syntactic sugar?
[07:40:34] <beach> opalvaults[m]: You can use LET* as hayley suggests, and you can break up the code into functions the way you do with other languages.
[07:40:38] <opalvaults[m]> oops, took a chunk out of the beginning
[07:40:41] <rotateq> Maybe look how MAKE-COMMAND is defined.
[07:41:43] <hayley> You could make such sugar less arbitrary then. e.g. people are very familliar with macros of the form (DEFINE-<something> <name> <arguments> <body>)
[07:42:07] *** Joins: taiju (~taiju@210.160.37.46)
[07:42:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:42:52] <rotateq> opalvaults[m]: And for what beach said, you can see LISP programs/expressions as being their own abstract syntax trees at the same time.
[07:43:19] *** Quits: taiju (~taiju@210.160.37.46) (Read error: Connection reset by peer)
[07:43:27] *** Joins: panji (~panji@120.188.93.109)
[07:43:59] *** Joins: taiju (~taiju@210.160.37.46)
[07:44:37] * panji lost connection again, i should stop and just read logs. :/
[07:46:26] <rotateq> Oh panji, sorry to hear that.
[07:48:28] <panji> rotateq: Don't worry. Anyway, i am not advanced user.
[07:48:44] *** Quits: taiju (~taiju@210.160.37.46) (Ping timeout: 268 seconds)
[07:49:08] <rotateq> Okay, I may believe you.
[07:50:33] <opalvaults[m]> Hmm. okay. Well that's certainly something to think about. I think others have a lot easier time grasping at the syntactic sugar of Lisp than I do. When I see:
[07:50:33] <opalvaults[m]> y = lambda k, v : k + v
[07:50:33] <opalvaults[m]> print(y(5, 6))
[07:50:33] <opalvaults[m]> It becomes immediately obvious to me what is the syntax and what is the data, especially if I've declared it explicitly. I don't get the same sense of obviousness which leads to sprawling blocks of code becoming a bit difficult to grok.
[07:50:47] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:50:55] <opalvaults[m]> in CL thus far*
[07:51:04] <opalvaults[m]> it's getting late and I'm hitting Return to early lol
[07:51:33] <hayley> Also, may I ask, do you have a list of "actions" or a list of "commands"?
[07:52:36] <opalvaults[m]> thankfully it's Nyxt, so the variables and procedures(functions?) are only a describe key-chord away
[07:52:56] <hayley> For the latter I would imitate CLIM <http://clim.rocks/clim-spec/27-1.html#_1380> and have top level DEFINE-COMMAND forms.
[07:53:09] <opalvaults[m]> So to answer more directly, yes. Much in the same way as Elisp, the behavior is defined beforehand (although it's a bit sprawling as you can imagine).
[07:53:42] <opalvaults[m]> Cool, I'll give that a read!
[07:53:44] <hayley> Such a form looks almost identical to DEFUN, and you could imagine that it is like an annotation in Python, e.g. @command def buffer_load(...): ...
[07:53:46] <opalvaults[m]> ty
[07:53:53] *** Parts: panji (~panji@120.188.93.109) ()
[07:54:03] <hayley> ywlcm
[07:55:25] <opalvaults[m]> the note on the bottom is quite interesting.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/906d0f7170985a68cc2c694f608ce24bb5a0029f)
[07:56:53] <opalvaults[m]> Ah, this lispworks article seems a bit easier to understan with examples. http://www.lispworks.com/documentation/lcl50/capiref/capi-refman-35.html
[07:57:56] <opalvaults[m]> But really I'm just trying to have an equivalent to (setq source-for-set-url 'bookmarks) or some such
[07:59:40] <opalvaults[m]> It's obvious I just need more practice. This isn't Python, and I just need to slow down it seems. It's a bit jarring to go from knowing exactly how to express a problem to being in bewilderment. No fault to Common Lisp. Just stuck in a particular mindset.
[07:59:58] <opalvaults[m]> Thanks again! Off to study I suppose
[08:03:28] *** Joins: semz (~none@user/semz)
[08:06:29] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:11:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:15:56] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[08:23:52] *** Quits: jstoddard (~user@2600:8801:a400:5a00::3e0d) (Quit: Goodnight)
[08:31:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:34:39] *** Joins: stacksmith (~stack@ctrl-c.club)
[08:59:50] *** Joins: myrrh (~markus@172.58.196.133)
[09:03:40] *** Joins: alfonsox (~quassel@103.92.42.104)
[09:25:40] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[09:25:40] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[09:25:55] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[09:28:38] *** Joins: miique (~miique@181.46.139.166)
[09:31:34] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[09:32:25] *** Joins: yewscion (~yewscion@2604:ca00:14b:917a::461:4b69)
[09:48:39] *** Quits: yewscion (~yewscion@2604:ca00:14b:917a::461:4b69) (Quit: Quit.)
[09:55:18] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:56:59] *** Joins: notzmv (~zmv@user/notzmv)
[10:07:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[10:28:24] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[10:46:10] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[10:46:37] *** Joins: shka (~herr@109.231.0.226)
[11:09:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:11:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:20:20] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[11:25:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:28:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:31:31] *** Joins: karlosz (~karlosz@136.56.98.53)
[11:35:09] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[11:38:14] <lisp123> Do current compilers do ANY optimisations for generic functions, or would I have to use fast-generic-functions / wait for some of SICL technologies to filter into production?
[11:39:52] <jackdaniel> they do
[11:41:37] <lisp123> jackdaniel: *phew* good to hear. Do you think they do some sort of sealing?
[11:41:38] <jackdaniel> fast generic functions, fast generic function dispatch (and other) are recent improvements over existing technologies, but it is not that existing ones had no optimizations
[11:42:35] <jackdaniel> ecl (for instance) allows sealing; that said if you are sure that functions won't change, then you could use a library trivial-generic-functions
[11:42:40] <jackdaniel> s/trivial/inlined/
[11:43:16] <lisp123> I am most worried about representing lists that I will use very often as their own class, so that instead of (car list) I would do (first my-class) and that way I can replace lists for arrays down the track (similarly I would implement generic functions for iteration)
[11:43:19] <jackdaniel> this library defines a generic function metaclass that allows inlining them and that greatly improves the performance (at cost of some runtime flexibility)
[11:43:41] <lisp123> Great, I will use that
[11:43:45] <lisp123> Thanks
[11:43:51] <jackdaniel> I believe that FIRST is already taken (at least in CL package:)
[11:44:05] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[11:44:08] <lisp123> (shadowing ;))
[11:44:45] <lisp123> (and implementing methods for (defmethod first ((obj sequence))) as well)
[11:45:15] <beach> lisp123: I find that designing good algorithms and data structures is much more important than low-level considerations like that.
[11:45:18] <lisp123> Iteration is quite annoying actually. For example the loop macro is relatively different between lists and arrays
[11:46:44] <beach> lisp123: Use (loop for x = ... then ... do...)
[11:47:36] <lisp123> beach: Yes, I agree. I just have one section of my code where I am doing permutations & combinations on lists, so that's the only place I was a bit hesistant
[11:49:44] <lisp123> beach: Thanks! That will prove very helpful
[11:57:59] *** Joins: rgherdt (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[12:21:57] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[12:22:27] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[12:24:21] *** Joins: random-nick (~random-ni@87.116.180.98)
[12:24:43] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:341e:46e:dd23:7ced)
[12:25:40] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84)
[12:29:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:341e:46e:dd23:7ced) (Ping timeout: 240 seconds)
[12:38:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:53:53] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[12:55:05] *** Joins: pve (~pve@176-93-78-104.bb.dnainternet.fi)
[12:58:56] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:59:56] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[13:03:35] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[13:03:57] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[13:05:17] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[13:22:37] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:26:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84) (Ping timeout: 240 seconds)
[13:33:29] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:34:11] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[13:39:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:41:38] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[13:43:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:47:25] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:47:37] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[13:49:43] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:50:37] *** Joins: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs)
[13:51:26] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84)
[13:53:17] <phoe> I would like to compose a PNG image from pieces. I have a set of PNG image parts that I would like to rotate, translate, and layer on top of one another to produce a flattened final image. I think I can use PNGLOAD for reading PNG files, but what library should I use for actually generating the image?
[13:53:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[13:55:04] *** Lord_of_Life_ is now known as Lord_of_Life
[13:57:19] *** Quits: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[13:58:08] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84) (Ping timeout: 268 seconds)
[13:59:31] *** Joins: VincentVega (~user@212.97.4.33)
[14:00:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:02:00] *** Joins: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs)
[14:06:00] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84)
[14:06:45] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[14:06:49] <alcaeus> Anyone home?
[14:07:02] <hayley> Is there anybody in there?
[14:07:06] <phoe> well, I'm working in home
[14:07:09] <phoe> s/in/from/
[14:07:14] <phoe> so it kinda counts I guess!?
[14:07:31] <madnificent> phoe: I vaguely recall uzing zpng a long time ago for a ray tracer.
[14:09:31] <phoe> madnificent: OK I can write PNG images using ZPNG; then I'm only looking for a library that will allow me to compose them
[14:09:45] <phoe> so, like, pngload → ??? → zpng
[14:09:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[14:10:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:10:27] *** Joins: rito_ (~rito_gh@45.112.243.219)
[14:10:56] <hayley> It'd be a fun hack in Petalisp, except for rotation (unless you constrain yourself to multiples of 90°).
[14:11:11] <madnificent> phoe: I didn't spend too much time on the writing part.  I started from a 2d vector.  Combination of images would be filling the vector at the desired spots with the desired pixel values...
[14:11:41] <hayley> Resizing could also be tricky perhaps.
[14:11:44] <madnificent> phoe: What sort of transformations are you looking for?  Many common transformations are expressed as matrix multiplication.
[14:12:37] <phoe> madnificent: rotations, scaling, layering of RGBA images
[14:12:37] *** Quits: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[14:12:52] *** Joins: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs)
[14:13:02] <phoe> nothing too heavy on maths or logic I think, just assembling larger images from smaller pieces
[14:13:26] <phoe> hayley: hmm, that's an idea
[14:15:56] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[14:17:34] <madnificent> phoe: The sources of the ray tracer are sadly long gone, however I do recall there being much value in first working on a larger color space before converting the image to the effective PNG.  In the case of the raytracer that helped with over- and undersaturation.
[14:18:00] <phoe> sure, that's something I don't care about - my images fit within RGB
[14:18:06] <madnificent> I hadded an extra average depth dimension to each pixel which also helped in adding a background.  Perhaps such a trick could come in handy too.
[14:18:27] <phoe> probably not something I need either - my images are all flat :D
[14:18:37] <madnificent> phoe: yeah.  If you stagger images on top of each other, you may want to either multiply or add, or ...
[14:19:20] <phoe> I think the only thing that comes into play is the alpha channel - 0 alpha is 100% the bottom image, 1 alpha is 100% the top image, whereas 0.5 alpha is an average of the two images
[14:19:24] <madnificent> If you're jotting something together, it may be hande to foresee such extra dimension for use during playing.  Unless you're literally composing and not staggering, which is also fine.
[14:19:40] <phoe> I don't need more advanced image processing modes, thankfully :D
[14:20:40] <hayley> phoe announces GIMP 2
[14:20:55] <madnificent> If you run into undesired artifacts, check out blending modes.  Good shot you don't want raw addition/removal.  But could be!
[14:21:48] <semz> And again it's written in CL first. Curious.
[14:22:07] <madnificent> On a different note: I didn't oversee any well-rounded EBNF parsers, right?
[14:22:17] <madnificent> *overlook
[14:22:17] *** Quits: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[14:22:18] <phoe> hayley: gimp 2.99.8 is something I have on my machine right now to be honest
[14:22:28] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[14:27:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:36:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Remote host closed the connection)
[14:39:26] *** Quits: myrrh (~markus@172.58.196.133) (Ping timeout: 268 seconds)
[14:41:55] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:42:32] *** Joins: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs)
[14:47:06] *** Quits: amb007 (~a_bakic@178-223-62-121.dynamic.isp.telekom.rs) (Ping timeout: 260 seconds)
[14:47:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:48:42] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[14:51:01] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:52:50] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[14:56:05] *** Quits: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (Ping timeout: 268 seconds)
[14:56:57] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[14:57:53] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[15:05:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:18:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[15:20:19] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[15:33:49] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:f131:31cf:b61c:ff84) (Read error: Network is unreachable)
[15:47:47] *** Joins: ldb (~user@user/ldb)
[15:51:05] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 3.3)
[15:52:08] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[15:53:04] *** Quits: xaltsc_ (~xaltsc@user/xaltsc) (Client Quit)
[15:56:36] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[16:11:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:13:59] *** xaltsc_ is now known as xaltsc
[16:22:23] *** Quits: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com) (Quit: leaving)
[16:34:08] *** Quits: ldb (~user@user/ldb) (Ping timeout: 268 seconds)
[16:35:18] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[16:36:55] <Xach> Hmm, can anyone wget https://www.quicklisp.org/ ?
[16:37:32] <_death> 2021-12-27 15:07:23 (522 MB/s) - ‘index.html’ saved [17894/17894]
[16:37:57] <Xach> Hmm
[16:39:17] *** Joins: ldb (~user@user/ldb)
[16:39:42] <Xach> _death: thanks. i can't reach it from my home connection for some reason. but the server is not in distress and you can reach it, so I don't know what's up.
[16:40:03] * Xach will wait and check it later
[16:40:06] <_death> try traceroute
[16:43:39] <Xach> yeah, seems like a routing problem in he.net. I will wait it out I guess.
[16:43:44] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[16:47:26] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[16:49:17] *** Joins: ldb (~user@user/ldb)
[16:51:04] <rotateq> 522 MB/s ?!
[16:53:11] <_death> statistics and lies
[16:53:53] *** Quits: ldb (~user@user/ldb) (Ping timeout: 250 seconds)
[16:54:08] <rotateq> ah right, never trust statistics :D
[16:54:48] <_death> statistics is fine, never trust the statistician ;)
[16:55:31] <rotateq> even more right, mathematics is key to see above our intuition
[16:58:45] *** Joins: ldb (~user@user/ldb)
[17:02:41] <ns12> rotateq: The number tends to be inaccurate for small files.
[17:03:30] <rotateq> ^^
[17:03:32] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[17:04:42] <ns12> rotateq: What's your typical speed?
[17:05:18] <rotateq> ehm I think around .. 5MB/s ?
[17:06:30] *** Joins: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com)
[17:08:49] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Read error: Connection reset by peer)
[17:10:49] *** Joins: Bike (~Bike@71.69.170.70)
[17:10:49] *** ChanServ sets mode: +o Bike
[17:11:11] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[17:13:28] *** Joins: igemnace (~ian@user/igemnace)
[17:21:48] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[17:22:00] <nij-> Is there a printed little schemer but for CL?
[17:22:29] *** Joins: dra_ (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499)
[17:22:29] <nij-> (Or maybe someone should write one?)
[17:26:25] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:26:47] *** Joins: Krystof (~user@81.174.155.115)
[17:27:27] *** Joins: Bike (~Glossina@71.69.170.70)
[17:27:28] *** ChanServ sets mode: +o Bike
[17:28:10] *** Joins: treflip (~user@user/treflip)
[17:28:10] *** Quits: dra_ (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499) (Quit: Leaving)
[17:28:23] *** Joins: dra (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499)
[17:28:48] <edgar-rft> nij-: I've never read the little schemer books (just because it's not CL) so I have no idea about the style of that books, but the standard recommenation for an introuctionary CL book is -> https://gigamonkeys.com/book/
[17:29:37] <edgar-rft> *introductionary
[17:30:33] <ldb> nij-: there was an older version of that book called "little lisper"
[17:31:28] <yitzi> I think it was still LISP-1 in that incarnation.
[17:32:00] <nij-> Yeah. I'm trying to hook some of my friends into CL.
[17:32:09] <nij-> Kinda hard cuz they don't even use emacs.
[17:32:37] <nij-> Not even vim.. or not even the terminal :(
[17:32:40] <ldb> why should they?
[17:32:55] <nij-> But I'm sure they are capable of learning. Just to need some tricks to trick them in.
[17:33:01] <nij-> ldb should they?
[17:33:09] <edgar-rft> you don't necessarily *need* emacs for lisp programming, but it helps a lot :-)
[17:33:54] <nij-> Yeah..
[17:35:02] <ldb> If they want to be cool kids, they should already googled "the best text editor" and installed VSCode (well, when I did that it turns out to be Vim)
[17:35:26] <edgar-rft> I already wrote Lisp code on Windows using notepad.exe but I don't really reommend that for a beginners :-)
[17:35:29] <sm2n> iirc the little schemer has footnotes describing how to run things on CL
[17:35:38] <sm2n> so it shouldn't be much of a hurdle
[17:35:46] <ldb> ^ true
[17:37:09] *** Joins: mjoerg (~user@user/mjoerg)
[17:37:56] <ldb> edgar-rft: it seem many experienced programmers I know don't use highlighting and completion at all.
[17:38:34] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[17:38:52] * ldb except for Java programmers?
[17:39:03] <rotateq> ldb: and is that now good or bad behavior?
[17:41:26] <ldb> rotateq: that depends on the languages of their choice, if it is Java, meh. if it is CL, good. for APL, Supercalifragilisticexpialidocious
[17:42:25] <rotateq> i like APL too :) you can use the april compiler
[17:42:51] *** Quits: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com) (Ping timeout: 256 seconds)
[17:42:55] <semz> How would APL completion even look like?
[17:43:00] <rotateq> and yes, i saw it for people starting with things, those newer IDEs often complete too much and it's not good for learning
[17:43:21] <rotateq> semz: that is a good question :D you don't need it anyway
[17:44:37] <rotateq> or better: it hinders you more falling into such a trap
[17:46:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:49:11] *** Quits: Xach (~xach@user/xach) (Ping timeout: 252 seconds)
[17:49:19] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[17:50:55] *** Parts: mjoerg (~user@user/mjoerg) (ERC 5.4.1 (IRC client for GNU Emacs 27.2))
[17:54:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:54:18] *** Quits: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 268 seconds)
[17:58:32] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 240 seconds)
[17:59:22] *** Joins: nature (~nature@45.32.235.173)
[18:03:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:04:42] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[18:06:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[18:07:09] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:11:27] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[18:13:50] *** Joins: VincentV` (~user@212.97.4.33)
[18:15:53] *** Quits: VincentVega (~user@212.97.4.33) (Ping timeout: 268 seconds)
[18:16:46] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[18:23:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:27:11] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6873:12d8:2760:ebb5)
[18:33:26] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[18:35:31] *** Joins: rogersm (~rogersm@90.166.180.250)
[18:38:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:40:30] <ns12> ldb: "... don't use highlighting and completion" - What text editors do they use? BSD vi? MicroEmacs?
[18:41:29] <lisp123> I don't use highlighting for Lisp with the exception of doc strings, much more enjoyable actually
[18:41:40] <ns12> It's a pain to write lisp using BSD vi (nvi) because it doesn't implement lisp mode ("set lisp").
[18:41:50] <lisp123> All the other "IDE" features are a must though
[18:42:22] <ns12> lisp123: Example? Automatic closing of parentheses?
[18:42:42] <lisp123> Yes, of course, that's essential. Covered by Paredit
[18:42:53] <White_Flame> for me, highlighting for comments is probably the most important highlight
[18:42:59] <lisp123> Then slime has quite a few useful features
[18:43:19] <lisp123> White_Flame: Actually, yes, I need to correct myself. I only have highlighting for doc strings and comments
[18:44:47] <lisp123> I use a slightly modified version of the "monotropic" theme, if anyone wants to try a monochrome setup
[18:45:12] <lisp123> https://github.com/caffo/monotropic-theme
[18:45:50] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6873:12d8:2760:ebb5) (Ping timeout: 252 seconds)
[18:50:41] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[18:50:41] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[18:50:59] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[18:51:14] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:53:49] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[18:56:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:14:27] <edgar-rft> Using Emacs for Lisp programming helps a lot (not only a bit), but for people who have never worked with Lisp before it's a bit hard to learn Common Lisp *and* Emacs simultaneously. But on the other hand I really don't know anything better than Emacs for Lisp.
[19:15:49] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6873:12d8:2760:ebb5)
[19:17:22] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:c167:e35:4dc9:33d3)
[19:18:03] <rotateq> for me it was (and still is) spacemacs a good decision, as i learned vim before
[19:19:17] <rotateq> edgar-rft: yes a bit similar i saw a few times at people from math faculty at university: never used or even know LaTeX, then the bachelor thesis comes up and too much for some
[19:19:23] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 252 seconds)
[19:21:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6873:12d8:2760:ebb5) (Ping timeout: 250 seconds)
[19:23:47] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[19:25:16] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[19:35:12] <VincentV`> mfiano: Hey, I have a mind for using vectors with rational numbers, and I am going to use origin for that. I see there's ehh some code duplication eg diff on dvec2 and vec2 only gives differences on 0.0 vs 0d0 f32 f64 and such, so I am gonna pull out some macrology, but I think adding rationals shouldn't be too big of a problem, right? Plus some structs like circle should have a typed version as well I guess (radius f32 is hardcoded for
[19:35:12] <VincentV`> instance). Conversion utilites between all the stuff is another thing. I am also thinking of a better convention like point2d/f for f32, circle/r (r for rational), d for double. Any tips/gotchas/wishes you could give for my macro gun please?
[19:35:53] *** VincentV` is now known as VincentVega
[19:38:34] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:38:53] *** Joins: Catie (~user@user/catie)
[19:39:50] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:40:43] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[19:56:12] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[20:04:21] *** Joins: xsperry (~xs@user/xsperry)
[20:04:53] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:20:40] <yitzi> ::notify phoe I saw in your trivial-package-local-nicknames test suite that one of the tests locked a package and then verified that adding nicknames would fail while the package was locked. I've added a WITH-LOCKED-PACKAGES macro to trivial-package-locks that may help for that use case.
[20:20:41] <Colleen> yitzi: Got it. I'll let phoe know as soon as possible.
[20:20:49] *** Quits: dra (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499) (Quit: Leaving)
[20:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:22:14] *** Quits: VincentVega (~user@212.97.4.33) (Remote host closed the connection)
[20:25:46] <phoe> yitzi: thanks! I'll make an issue to use that.
[20:25:47] <Colleen> phoe: yitzi said 5 minutes, 6 seconds ago: I saw in your trivial-package-local-nicknames test suite that one of the tests locked a package and then verified that adding nicknames would fail while the package was locked. I've added a WITH-LOCKED-PACKAGES macro to trivial-package-locks that may help for that use case.
[20:26:24] <yitzi> Great!
[20:26:48] *** Joins: VincentVega (~user@212.97.4.33)
[20:28:09] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:34:34] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Read error: Connection reset by peer)
[20:34:57] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e3:b2d2:c167:e35:4dc9:33d3)
[20:35:06] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[20:36:37] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[20:36:37] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:36:48] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[20:38:09] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f8:96e1:c167:e35:4dc9:33d3) (Ping timeout: 250 seconds)
[20:40:10] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[20:46:37] *** Quits: alfonsox (~quassel@103.92.42.104) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:47:25] *** Joins: Alfr (~Alfr@user/alfr)
[20:47:31] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650)
[20:47:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:47:39] *** Quits: rgherdt (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:48:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:51:47] *** Quits: findiggl` (~user@2601:601:9f00:5c60:ea51:63ee:d408:b6e8) (Remote host closed the connection)
[20:58:04] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:01:27] *** Joins: JeromeLon (~jerome@2a00:23c7:99b2:9501:ba0c:aef4:5438:72ec)
[21:03:12] <mfiano> VincentVega: No, but good luck. That project is a beast I have sort of given up on in favor of gfxmath with generics.
[21:19:06] *** Quits: JeromeLon (~jerome@2a00:23c7:99b2:9501:ba0c:aef4:5438:72ec) (Quit: WeeChat 3.0.1)
[21:19:06] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[21:19:39] *** Joins: amb007 (~a_bakic@87.116.175.40)
[21:19:48] <phoe> gasp!
[21:19:50] <phoe> https://github.com/tokenrove/imago#composing-pictures
[21:19:53] <phoe> this is what I have been looking for
[21:19:57] * phoe quickloads
[21:22:58] <madnificent> phoe: I didn't know that!  Can you add it to cliki too?
[21:23:23] <phoe> madnificent: https://www.cliki.net/graphics%20library already has an entry for imago
[21:23:38] <madnificent> Ah, so it wasn't there for PNG which is probably why we missed it.
[21:23:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:23:51] *** Quits: amb007 (~a_bakic@87.116.175.40) (Ping timeout: 256 seconds)
[21:24:05] <madnificent> If the readme is anything to judge on, it looks really nice.
[21:24:18] <phoe> no rotations
[21:24:19] <madnificent> As they say: always judge a book by its cover.
[21:24:25] <phoe> I might need to add those myself
[21:25:29] <madnificent> There are array operations, so that should be little more than constructing a target array and matrix-multiplication.
[21:26:27] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[21:28:15] <phoe> yes
[21:33:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:34:07] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[21:35:39] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:40:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[21:40:39] *** Joins: karlosz (~karlosz@136.56.98.53)
[21:41:51] *** Joins: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca)
[22:00:29] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[22:04:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:08:26] <VincentVega> mfiano: OK, thanks!
[22:12:33] *** Joins: Everything (~Everythin@37.115.210.35)
[22:12:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:13:01] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[22:19:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:20:25] *** Quits: treflip (~user@user/treflip) (Quit: bb)
[22:25:21] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:30:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:34:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e3:b2d2:c167:e35:4dc9:33d3) (Read error: Network is unreachable)
[22:36:01] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[22:41:18] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[22:46:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:52:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[23:11:29] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 252 seconds)
[23:16:12] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:18:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[23:19:17] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Ping timeout: 268 seconds)
[23:20:57] *** Joins: amb007 (~a_bakic@87.116.175.49)
[23:21:43] *** Parts: Inline (~Inline@2a02:908:1252:7a80::4f) ()
[23:21:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[23:23:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:24:28] <VincentVega> mfiano: I like how gfxmath is more approachable/compact, and I am looking to do a generic interface anyway. I think I will just adapt geometry parts I need from origin to gfxmath. Say, what would it take to add rationals to gfxmath? The simple way, I guess, would be to replace everything double to rational (which would be fine for me short term), but how hard would it be to allow using either float or double or rational as COMPONENTS of
[23:24:28] <VincentVega> MATH-OBJECT?
[23:29:57] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[23:37:24] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 240 seconds)
[23:39:54] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[23:58:06] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[23:58:32] *** Joins: Colt (~Colt@user/colt)
