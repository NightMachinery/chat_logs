[02:30:36] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[02:30:36] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Client Quit)
[02:31:38] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[02:33:10] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Client Quit)
[03:10:52] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[04:33:50] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[05:15:49] *** Joins: libertyprime (~libertypr@203.211.73.21)
[06:52:13] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 250 seconds)
[07:34:01] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[09:36:01] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 250 seconds)
[09:37:30] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[12:26:26] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[12:38:20] *** Joins: libertyprime (~libertypr@203.211.73.21)
[12:42:59] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[12:47:40] *** Joins: gdd (~gdd@129.199.146.230)
[15:33:05] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 250 seconds)
[17:01:09] <xplat> you can produce something but it won't be a lens.  or you can produce Lens' a (Maybe (Maybe c)) i think
[18:04:34] <idnar> xplat: in the case where you need to go from Nothing :: Maybe b to Just _ :: Maybe b there is nowhere to get b from afaics
[18:33:56] <xplat> hm, you're right
[20:04:47] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[20:05:29] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 264 seconds)
[20:07:09] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[20:09:31] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 268 seconds)
[20:09:44] *** Quits: xplat (sid136671@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:09:59] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[20:10:03] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:10:04] *** Quits: sclv (sid39734@haskell/developer/sclv) (Read error: Connection reset by peer)
[20:11:45] *** Joins: sclv (sid39734@haskell/developer/sclv)
[20:12:29] *** Joins: xplat (sid136671@hampstead.irccloud.com)
[20:12:42] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[20:13:53] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[20:14:46] *** Joins: jackdk (sid373013@cssa/jackdk)
[20:20:55] *** Joins: carter (sid14827@helmsley.irccloud.com)
[20:29:42] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[20:30:28] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[22:02:52] *** Quits: berberman (~berberman@user/berberman) (Quit: ZNC 1.8.2 - https://znc.in)
[22:03:12] *** Joins: berberman (~berberman@user/berberman)
[22:52:08] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[23:30:48] <jackdk> Makes sense. In the case I'm simplifying down, there is additional structure I can get, but I'd have to do a lot of work to expose it. Thanks.
