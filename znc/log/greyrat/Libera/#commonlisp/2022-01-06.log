[00:09:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:11:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:14:28] <bollu> can I iterate on the slots of an object?
[00:14:40] <bollu> or, well, enumerate all the slots an object's class has?
[00:16:54] <jackdaniel> etimmons: nice post re roswell, I share the sentiment :)
[00:16:59] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:17:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:28:47] <pjb> bollu: you can, using the MOP.
[00:29:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:31:13] <pjb> bollu: https://termbin.com/8anb
[00:31:46] <etimmons> jackdaniel: Thanks!
[00:31:56] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:33:55] *** Quits: attila_lendvai (~alendvai@catv-176-63-14-165.catv.broadband.hu) (Ping timeout: 256 seconds)
[00:38:13] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[00:40:40] *** Quits: varjag (~user@188.95.247.247) (Quit: ERC (IRC client for Emacs 28.0.50))
[00:43:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:45:04] <phoe> aeth: you had this MOP implementation of a class with type checks at runtime, could you link me to it?
[00:45:08] <phoe> I promise I'll remember it this time
[00:45:20] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:47:37] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[00:47:57] <bollu> can I compare class-of using equal?
[00:48:00] <bollu> pjb thank you!
[00:48:55] <phoe> bollu: EQ, even
[00:48:59] <phoe> so EQUAL will also work
[01:01:03] *** Joins: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de)
[01:01:17] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[01:05:16] <bollu> Hmm, I am confused. I don't understand how to use a `standard-effective-slot-definition` to actually read a slot out of an object
[01:05:21] <bollu> I'm reading https://clisp.sourceforge.io/impnotes/mop-sd.html
[01:05:27] <bollu> and can't seem to find the correct function
[01:05:33] <Bike> mop slot-value-using-class
[01:05:33] <specbot> http://metamodular.com/CLOS-MOP/slot-value-using-class.html
[01:06:16] <Bike> that one
[01:06:18] <bollu> I see. That's counter-intuitive to me. Why do I need to supply the class as well? [I suspect the answer will be 'it's complicated...'?]
[01:06:19] <bollu> thank you
[01:06:53] <phoe> bollu: because you are not calling slot-value, but slot-value-using-class
[01:06:59] <Bike> so that you can specialize methods on the class of the class, rather than the class of the slot definition
[01:07:01] <phoe> and the class is there in order to figure out which method to call
[01:07:38] <bollu> phoe wouldn't the object know which class to use for a given slot?
[01:07:57] <phoe> it does
[01:08:03] <phoe> that's why slot-value automatically finds the class object
[01:08:12] <phoe> ...not the class object, sorry
[01:08:44] <Bike> slot-value-using-class is less intended as an interface for programmers to call themselves, and more as one programmers can customize when they're customizing how the object system works.
[01:09:21] * phoe apologizes, too late for him to explain mop at the moment
[01:09:23] <Bike> another possibly simpler way to do it would be to get the slot name from the slot definition, and then just use slot-value
[01:09:51] <bollu> I prefer slot-value-using-class, I think
[01:09:58] <Bike> Ok
[01:10:24] <bollu> It appears I need to know how to load package `clos` (at least, that's what I gather from the Lispworks page: http://www.lispworks.com/documentation/lw51/LWRM/html/lwref-16.htm)
[01:10:44] <Bike> the MOP is not part of the standard, but is rather an extension (implemented by basically every implementation)
[01:11:02] <Bike> you can use the closer-mop library to paper over this
[01:11:05] <Bike> https://github.com/pcostanza/closer-mop
[01:11:45] <rotateq> ah bollu, what brought you to using lispworks in the first place? :)
[01:12:16] <bollu> rotateq I find the UI more predictable than emacs :)
[01:12:47] <rotateq> ok
[01:13:04] <Bike> if you're using lispworks exclusively, you probably don't need to bother with closer-mop or loading or anything
[01:13:10] <Bike> i imagine the clos package is already exposed for you
[01:13:14] <bollu> Bike do you know how I would load clos directly within lispworks? I tried (require "clos"), but it doesn't look like that's it. (require "clos") Error: Unknown module "clos".
[01:13:34] <Bike> what does (find-package "CLOS") give you
[01:14:46] <bollu> #<The CLOS package, 1324/2048 internal, 197/256 external>
[01:14:57] <Bike> okay, so you don't need to load anything. it's there already.
[01:15:01] <Bike> have at it
[01:15:17] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[01:15:44] <bollu> That's the strange part: Error: Undefined operator SLOT-VALUE-USING-CLASS in form (SLOT-VALUE-USING-CLASS 1 2).
[01:16:01] <phoe> (clos:slot-value-using-class ...)?
[01:16:06] <Bike> did you actually qualify it?
[01:16:16] <bollu> no, I didn't qualify it
[01:16:21] <bollu> sorry, didn't know I had to!
[01:16:23] <bollu> let me try that :)
[01:16:26] <Bike> no need to apologize
[01:16:43] <Bike> in lisp, "package" means a namespace, rather than a unit of code you load together (like a "software package")
[01:17:06] *** Joins: miique (~miique@181.46.139.166)
[01:17:07] <bollu> I see
[01:17:14] <bollu> is there an equivalent of `using namespace` in common lisp?
[01:17:23] <bollu> or `from package import *`
[01:17:30] <phoe> :import-from for single symbols, :use for whole packages
[01:17:55] <phoe> but :use is dangerous and :local-nicknames is the equivalent of "import foobarbaz as f"
[01:18:03] *** jm is now known as jmorrison_
[01:18:06] <phoe> after which you can refer to foobarbaz:quux as f:quux
[01:18:12] <bollu> okay
[01:18:14] <bollu> neat, thanks!
[01:18:24] <phoe> use them in your package definitions, like
[01:18:44] <phoe> (defpackage #:foo (#:use cl) (#:local-nicknames (#:c #:clos))) (in-package #:foo)
[01:18:55] <phoe> LW 8.0 should have local nicknames already
[01:19:21] *** Parts: bollu (~bollu@159.65.151.13) (The Lounge - https://thelounge.chat)
[01:19:31] *** Joins: bollu (~bollu@159.65.151.13)
[01:22:36] <bollu> Bike it appears that clos:slot-value-using-class needs the slot *name*, and not the slot itself. I guess I get the slot name with CLOS:SLOT-DEFINITION-NAME?
[01:23:02] <phoe> huh?
[01:23:23] <Bike> that appears to be a peculiarity of lispworks, indeed. yes, that's the function you want.
[01:23:38] <bollu> thanks!
[01:23:41] <Bike> more reason to use slot-value, i guess
[01:24:29] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0) (Ping timeout: 250 seconds)
[01:24:50] <phoe> ...or to use c2mop
[01:25:31] <Alfr> phoe, is (#:use ..) as an defpackage option defined?
[01:25:49] <phoe> oop
[01:26:02] <phoe> s/(#:use cl)/(:use #:cl)/
[01:26:07] <phoe> same for #:local-nicknames
[01:26:21] <phoe> time to go to sleep
[01:26:54] * phoe sleep
[01:29:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[01:33:29] <bollu> how does one define a "default" method for a generic? Does a defmethod with no type annotations do the trick?
[01:34:26] <phoe> yes
[01:34:36] <phoe> s/type annotations/specializers/
[01:34:54] <rotateq> phoe: sleeeeep :D
[01:34:56] <phoe> (defgeneric foo (bar baz)) (defmethod foo (bar baz) ...)
[01:34:59] <phoe> oh okay
[01:35:02] * phoe sleep for real this time
[01:35:09] <White_Flame> is equivalent to ((bar t) (baz t))
[01:35:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:35:22] <bollu> White_Flame neat tidbit
[01:35:23] <rotateq> hehe, we'll need you fit :)
[01:36:11] <rotateq> bollu: when you explicitely define the generic, you can also give options with :method
[01:36:42] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ed95:1e08:605e:cff2)
[01:36:57] <aeth> phoe: https://gitlab.com/zombie-raptor/zr-utils/-/blob/406a9dfbdd67a2287c0babba3febbdd1a18c3b0f/metaobject.lisp
[01:37:17] <aeth> phoe: I never got around to spinning it off or incorporating the suggestions from this channel (or was it the old #lisp one?) last time it came up
[01:37:44] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f7:d273:883d:3126:912a:688)
[01:38:28] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (Quit: Gateway shutdown)
[01:38:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:40:23] <jstoddard> White_Flame: There is a small difference, if I understand the spec correctly. (defmethod foo (bar) nil) will result in a warning about the unused parameter, while (defmethod foo ((bar t)) nil) does not warn.
[01:40:56] <phoe> aeth: thanks, I'll remember to remind you soon™
[01:41:00] * phoe hides
[01:41:17] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ed95:1e08:605e:cff2) (Ping timeout: 252 seconds)
[01:42:40] <bollu> https://gist.github.com/bollu/023dc09a50d06b05e0967091ba2f99c9
[01:42:53] <bollu> please critique my code to check deep equivalence between classes that I know have only ints, symbols, and other classes
[01:43:28] <Bike> "instances of classes" or "objects", you mean, right?
[01:43:29] <pjb> bollu: instead of reduce, you would want to use every
[01:43:42] <bollu> Bike yes, sorry, I mean objects*
[01:43:46] <bollu> pjb nice
[01:44:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[01:44:23] <bollu> is there some way to refactor the `if` as well? the else with the `nil` feels unaesthetic to me
[01:44:40] <Bike> (and (equal ...) (let* ...))
[01:44:51] <pjb> (and (equal (class-of x) …) (every (lambda (slot) (let* … (or (and (not (slot-boundp x name)) (not (slot-boundp y name)))  (deepeq (slot-value x name) (slot-value y name))))) (class-direct-slots (class-of x))))
[01:45:03] <White_Flame> jstoddard: cool
[01:45:16] <pjb> bollu: ie, you want to test for slot-boundp before calling slot-value.
[01:45:20] <White_Flame> I recall that now that you mention
[01:45:26] <bollu> pjb what does that do?
[01:45:35] <pjb> It's the body for deepeq
[01:46:27] <bollu> pjb I meant, why do I need to test for slot-boundp? Doesn't asking for an unbound slot return `nil`?
[01:46:50] <pjb> because slots can be unbound.
[01:47:11] *** Quits: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de) (Remote host closed the connection)
[01:47:24] <pjb> slot-value on an unbound slot signals an unbound-slot condition.
[01:47:29] <bollu> ahh
[01:47:39] <phoe> bollu: don't forget to CALL-NEXT-METHOD or use CLASS-SLOTS, because CLASS-DIRECT-SLOTS won't give you indirect slots.
[01:47:48] <bollu> phoe I don't know what those are yet :D
[01:48:01] <bollu> phoe but sure, I'll switch to class-slots
[01:48:10] <pjb> bollu: my example gave you both class-slots and class-directs-slots…
[01:49:26] <Bike> meaning inherited slots.
[01:49:39] <Bike> direct slots will only be those in the class definition itself.
[01:49:47] <bollu> pjb I don't follow. Doesn't the code |(and (equal (class-of x) …) (every (lambda (slot) (let* … (or (and (not (slot-boundp x name)) (not (slot-boundp y name)))  (deepeq (slot-value x name) (slot-value y name))))) (class-direct-slots (class-of x))))|  call |class-direct-slots|, and not |class-slots|?
[01:49:52] <bollu> Bike ah, I see. okay
[01:50:10] <Bike> get some sleep, phoe
[01:52:33] *** Joins: sloanr (~user@97.127.118.255)
[01:55:42] <pjb> bollu: yes, it does, because I just copied your code, but you will want class-slots instead.
[01:56:39] <pjb> bollu: I was refering this example: https://termbin.com/8anb
[01:57:17] <bollu> pjb ah, I totally missed that  distinction the first time around.
[02:04:46] <bollu> Do I need to think about whether what I am doing is safe under REPL reloads every time I define a thing in CL? It seems to me that defclass is preferred over defstruct because it behaves better with respect to changes in the REPL?
[02:04:46] <Bike> it's not really repl specific, but yeah, defclass has defined redefinition semantics and defstruct does not.
[02:06:12] <bollu> Bike are there other constructs that do not have well defined redefinition semantics?
[02:07:12] <Bike> hmm. off the top of my head, proclamations, probably
[02:07:50] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f7:d273:883d:3126:912a:688) (Quit: Leaving)
[02:08:33] <bollu> Another feeling that I get is that common lisp is "large" as a language. Is this unfounded?
[02:10:06] <Bike> it has a big standard library and stuff, sure.
[02:10:15] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:12:01] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[02:12:06] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:12:14] *** Joins: sloanr (~user@97.127.118.255)
[02:15:20] <pjb> bollu: nothing old is large.  Android was 3500 classes and 350,000 methods a few years ago. Probably much bigger nowadays.
[02:16:21] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:98c5:85f6:eace:a4d7)
[02:16:23] <bollu> Bike do you consider CLOS as part of the stdlib? or as part of the core language
[02:16:36] <Bike> of course.
[02:16:57] <Bike> the metaobject protocol isn't part of the standard, but the object system definitely is
[02:19:01] <bollu> Bike I am unsure if the of course refers to it as stdlib or core language ;)
[02:19:20] <bollu> Now I have another problem as I migrate from raw lists to classes: I need to write my writers!
[02:19:28] <bollu> is there a cheap way to get a decent pretty printer?
[02:20:10] <sm2n> (format t "~a" ...)?
[02:20:11] <Bike> print-unreadable-object is helpful usually.
[02:20:34] <Bike> the standard library is part of the core language. lisp isn't like C or something where there's an alternate "freestanding" version.
[02:22:01] <bollu> sm2n that prints the pointer, yes. But not the actual memory
[02:22:06] <bollu> But not the actual data*
[02:22:48] <bollu> Error: The symbol "PRINT-UNREADABLE-OBJECT" is not external in the CLOS package.
[02:22:50] <bollu> Hmm
[02:23:07] <Bike> print-unreadable-object is part of the standard library, i.e. in the CL package
[02:23:39] <Bike> there is no standard way to dump the actual memory. the lisp system does not define anything about memory
[02:24:09] <sm2n> Right, if you're printing an object what you want to do is (defmethod print-object ((o my-class) s) ...)
[02:24:33] <sm2n> usually you put print-unreadable-object in there
[02:25:06] <sm2n> judging by your previous posts, you are probably familiar with haskell, so that is like implementing Show
[02:30:49] <bollu> yes, I'm familiar with haskell. and thanks, that makes sense
[02:31:03] <bollu> (let ((x (make-instance 'inst-assign :lhs :x :rhs :y))) (print-unreadable-object (x *standard-output* :type t :identity t))) => #<INST-ASSIGN 40200D2CDB>; NIL
[02:31:11] <bollu> that's not what I expected, unfortunately
[02:32:47] <pjb> bollu: cf. https://github.com/informatimago/lisp/blob/2e3a8a2e749f80cbb20dff3e5c1df5df003e6436/common-lisp/cesarum/utility.lisp#L942
[02:35:13] <Bike> what exactly do you expect? automatic printing of all the slots and their values?
[02:35:17] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[02:35:26] *** Joins: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de)
[02:35:43] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[02:35:56] <Bike> if you want to just see what makes up an object, you can use cl:describe. but that's not suitable for anything programmatic, which is what i think you're doing?
[02:35:56] *** Joins: sloanr (~user@97.127.118.255)
[02:36:19] <bollu> Bike yes, I was indeed hoping for automatic printing
[02:36:23] <bollu> pjb thanks!
[02:37:03] <bollu> Bike what does one usually do? write custom printers?
[02:37:19] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:37:24] <Bike> usually. it depends on what you are doing.
[02:38:01] <Bike> for example, most of the time i don't want all slot values printed, since i'm working with complex graph structures. so i define a printer that only prints the name or some other identifier.
[02:38:25] <Bike> if i wanted to actually de/serialize objects with a text format, i'd need to do something else
[02:38:27] <bollu> I see. I'm prototyping a compiler optimization. I just want to debug print the IR. The output of cl:describe is actually quite close to what I want. All I need is for it to print the slots on a single line
[02:38:59] <sm2n> Are you familiar with the inspector?
[02:39:00] <Bike> really? IR is in fact what i usually work with. well, if that's what you want
[02:39:17] <bollu> Bike yeah. I have basic blocks, but small ones, so I don't mind just scanning it by eye.
[02:39:25] <bollu> sm2n I'm not.
[02:39:35] <sm2n> You may want to explore that then
[02:40:09] <_death> defstruct generates a default printer that prints all slots.. sometimes it's useful, but often you don't want to print some of the slots, so have to define your own function/method.. defclass's default printer just displays the class name and the instance's "identity", but you can define a print-object method to print more slots
[02:40:55] *** Joins: luis9 (~luis@lisp/luis)
[02:40:55] *** ChanServ sets mode: +o luis9
[02:41:06] <bollu> sm2n is this it? http://www.lispworks.com/documentation/lcl50/clwug/clw-21.html
[02:41:25] <bollu> _death Is there's a way to get such a default printer for defclass?
[02:42:29] <bollu> sm2n the inspector is a good approximation. It only seems to show me the data structure one level deep. Can I get it to expand fully?
[02:43:10] <sm2n> I don't know, I don't use lispworks
[02:43:16] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 268 seconds)
[02:43:16] *** luis9 is now known as luis
[02:43:42] <sm2n> In emacs/sly, it only goes one level deep, but you can click to go further
[02:44:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:44:33] <_death> bollu: there are many ways, depending on what you mean by "default".. there's also the question of whether you really need such a "default"
[02:44:40] <sm2n> bollu: You could redefine print-object and use the mop to iterate over slots
[02:44:46] <sm2n> if that's really what you want
[02:45:07] <bollu> sm2n doing that right now, writing a debug-show based off of the deepeq slot iteration
[02:45:25] <_death> CL has an extensible pretty printer, which allows you to print any object in a way of your choosing
[02:45:28] <bollu> I really like this introspection stuff
[02:45:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:51:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[02:52:58] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:55:36] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[03:00:13] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:01:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:03:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:03:34] *** Joins: Oladon (~olad@98.43.81.226)
[03:03:38] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:05:22] <bollu> Once again, I request code review for my show instance: https://gist.github.com/bollu/17ed6ccdc1b503909528578a3f551695
[03:06:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:07:04] <sm2n> Shouldn't that print stuff, not return data structures?
[03:07:17] <sm2n> also, you can replace the let* in loop with for = ...
[03:08:12] <sm2n> i.e (loop collect (let* ((a 1) (b 2)) (+ a b)) is functionally equivalent to (loop for a = 1 for b = 2 collect (+ a b))
[03:09:05] <sm2n> additionally, you can use list as a variable name, and it won't collide with the function list, since they are in separate namespaces (rather than xs)
[03:09:59] <bollu> sm2n hm, I feel I mischaracterized what I wanted. I wanted something that was quick and dirty to stare and and feed back into the repl quickly if need be. So I opt for returning a list for more manipulation
[03:10:00] <sm2n> There's also a built-in flatten function, but that works on trees (arbitrary levels of nesting), but should work fine here
[03:10:08] <bollu> sm2n oh, the loop = is neat
[03:10:20] <bollu> sm2n I prefer `xs` as a variable name tbh.
[03:10:37] <sm2n> sure, you do you, it's not really conventional though
[03:11:08] <bollu> sm2n lispworks doesn't seem to know flatten
[03:11:13] <sm2n> I code switch a lot when programming depending on the language, sometimes surprising even myself
[03:11:24] <bollu> sm2n oh? I see. in common lisp convention, I'd write `list`, I take it?
[03:11:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:11:53] <sm2n> oh, whoops, flatten is in the alexandria package
[03:12:01] <sm2n> I use it often enough that I had forgotten
[03:12:08] <sm2n> and yes
[03:14:04] <sm2n> and I guess another thing I would change is to specialize your last method on standard-object
[03:14:47] <bollu> sm2n what are things other than standard-object, number, symbol? I guess.. string?
[03:15:06] <sm2n> yeah
[03:15:15] <sm2n> I would probably make the default case the identity instead
[03:15:29] <sm2n> also, your method will fail on improper lists
[03:16:37] <bollu> sm2n how do I fix it for improper lists
[03:18:42] <sm2n> there are essentially two types of improper lists
[03:19:02] <bollu> I don't know this. I only the ones of the form `(a . b)`
[03:19:17] <sm2n> (chains of) conses that don't terminate with a nil, and circular lists
[03:19:32] <sm2n> you described the first type
[03:19:47] <sm2n> the second looks like #1=(1 2 3 #1#)
[03:20:33] <sm2n> err
[03:20:59] <sm2n> #1=(1 2 3 . #1#)
[03:21:26] <sm2n> this will lead to an infinite loop if you don't do cycle detection
[03:21:36] <bollu> ah
[03:21:37] <bollu> mh
[03:21:47] <sm2n> the printer/reader have logic for this built in toggled by *print-circle*
[03:21:56] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[03:21:58] <bollu> damn I don't want to implement the two pointers algorithm for my dinky throwaway debug code :)
[03:22:05] <bollu> can I invoke them?
[03:22:09] <bollu> the printer?
[03:22:09] <sm2n> yeah I wouldn't bother
[03:22:12] <bollu> right
[03:22:26] <sm2n> well, you can to print
[03:22:32] <sm2n> that's what your repl does
[03:22:43] <sm2n> and format etc
[03:22:57] *** Quits: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:23:18] <sm2n> just throwing that out there
[03:23:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[03:23:45] <sm2n> the other kind of improper list can be handled by looping and checking the type of (rest list)
[03:24:03] <Alfr> bollu, there's DESCRIBE and INSPECT.
[03:24:17] <Alfr> bollu, also *PRINT-CIRCLE* defaults to NIL.
[03:24:42] <Alfr> bollu, so you have to turn it on when you want to rely on printing to show you things.
[03:25:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[03:25:52] *** Joins: aeth (~aeth@user/aeth)
[03:27:46] <bollu> Alfr mh, okay
[03:27:56] <bollu> alright, thanks a lot for all the help! I'm off to bed now
[03:32:26] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[03:35:55] *** Joins: aeth_ (~aeth@user/aeth)
[03:36:01] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[03:36:03] *** aeth_ is now known as aeth
[03:37:36] *** Quits: etiago (~etiago@user/etiago) (Quit: ZNC 1.8.2 - https://znc.in)
[03:37:52] *** Joins: etiago (~etiago@user/etiago)
[03:41:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:42:22] *** Quits: pve (~pve@188-67-201-146.bb.dnainternet.fi) (Quit: leaving)
[03:46:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:46:32] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:49:57] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Ping timeout: 240 seconds)
[03:57:24] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[03:57:37] *** Joins: sloanr (~user@97.127.118.255)
[03:58:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[04:05:47] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[04:09:13] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:18:35] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[04:18:48] *** Joins: sloanr (~user@97.127.118.255)
[04:38:46] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[04:38:59] *** Joins: sloanr (~user@97.127.118.255)
[04:51:59] *** Joins: igemnace (~ian@user/igemnace)
[04:56:27] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[04:56:40] *** Joins: sloanr (~user@97.127.118.255)
[05:03:31] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:05:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:16:04] *** Joins: notzmv (~zmv@user/notzmv)
[05:18:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[05:18:39] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[05:18:39] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[05:18:52] *** Joins: sloanr (~user@97.127.118.255)
[05:22:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:25:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:26:22] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[05:27:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:30:42] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[05:33:07] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[05:33:08] *** X-Scale` is now known as X-Scale
[05:34:55] *** Joins: lagagain (uid214580@id-214580.uxbridge.irccloud.com)
[05:38:50] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[05:39:03] *** Joins: sloanr (~user@97.127.118.255)
[05:41:01] *** Quits: wheelsucker (~user@2600:8801:8c26:7f00::2f04) (Read error: Connection reset by peer)
[05:41:14] *** Joins: wheelsucker (~user@2600:8801:8c26:7f00::2f04)
[05:42:28] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[05:46:21] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:56:31] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[05:56:44] *** Joins: sloanr (~user@97.127.118.255)
[06:03:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:18:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:23:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[06:26:42] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[06:26:55] *** Joins: sloanr (~user@97.127.118.255)
[06:40:15] *** Joins: igemnace (~ian@user/igemnace)
[06:44:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:48:53] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[06:49:06] *** Joins: sloanr (~user@97.127.118.255)
[07:04:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:08:35] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[07:08:48] *** Joins: sloanr (~user@97.127.118.255)
[07:24:44] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[07:25:47] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[07:26:00] *** Joins: sloanr (~user@97.127.118.255)
[07:28:47] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Quit: Quit)
[07:29:56] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[07:30:19] <beach> Good morning everyone!
[07:31:01] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[07:31:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[07:31:52] *** Quits: parjanya- (~esb@2804:14c:1ad:8b70::1000) (Ping timeout: 268 seconds)
[07:32:28] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[07:32:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[07:35:58] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[07:36:11] *** Joins: sloanr (~user@97.127.118.255)
[07:39:25] *** Joins: Oladon (~olad@98.43.81.226)
[07:41:07] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:46:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:54:01] *** Joins: semz (~none@user/semz)
[07:54:53] *** Quits: jealousmonk (~user@179.93.162.246) (Remote host closed the connection)
[07:55:09] *** Quits: sloanr (~user@97.127.118.255) (Remote host closed the connection)
[07:55:22] *** Joins: sloanr (~user@97.127.118.255)
[07:57:22] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[07:58:09] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Quit: Quit)
[07:58:18] <fe[nl]ix> does anybody have an idea about what Marco Antoniotti means regarding Bordeaux-Threads having a bad .asd file ?
[08:00:03] *** Joins: sloanr` (~user@97-127-122-25.mpls.qwest.net)
[08:01:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:02:01] *** Quits: sloanr (~user@97.127.118.255) (Ping timeout: 256 seconds)
[08:02:34] *** Joins: mason (~mason@redhat/mason)
[08:03:24] <etimmons> fe[nl]ix: maybe because the v1 section uses reader conditionals instead of :if-feature?
[08:04:01] <etimmons> Only potential thing I see, at least
[08:04:21] <fe[nl]ix> maybe
[08:04:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[08:04:40] <fe[nl]ix> well, I'm eagerly awaiting for the promissed blog post
[08:04:43] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:05:09] <etimmons> Yeah, hardly seems like something to write a ran... blog post about
[08:05:53] <fe[nl]ix> as well as Fiveam
[08:06:01] <fe[nl]ix> if you have any beef with it, do let me know
[08:06:14] <fe[nl]ix> I can't promise I'll work on it, but I try
[08:06:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[08:07:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:07:15] <fe[nl]ix> the more I look into the code, the more I'd like to tear my (nonexisting) hair
[08:07:25] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[08:07:35] <fe[nl]ix> it's a impenetrable morass of dynamic variables
[08:10:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:11:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:18:20] <bollu> morning!
[08:19:43] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:20:43] <fe[nl]ix> hi bollu
[08:25:26] <beach> bollu: Hello.  It looks like you got enough help from others after I left for dinner, and I have nothing to add to that conversation.
[08:26:24] <bollu> beach yes, thank you
[08:26:41] <bollu> I now have a CLOS'd version of the code from yesterday. Feedback appreciated: https://gist.github.com/bollu/651e643565c9d099c6a5b6d5a7fc16d5#file-hoopl-clos-lisp
[08:27:46] <beach> I am not sure why you insist on abbreviations such as "inst" or "bb".
[08:27:57] <beach> It doesn't make it easier to read the code.
[08:28:16] <beach> ... or "mk".
[08:28:24] <bollu> beach what is the preferred style? Would `instruction` or `basic-block` be better? or do you advocate for `i` and `b`?
[08:28:34] <bollu> beach :) yeah, I can move to `make`, I don't min.
[08:28:36] <bollu> mind*
[08:28:50] <beach> Yes, "instruction", "basic-block", "make" etc.
[08:29:15] <bollu> yup, all right
[08:29:20] <moon-child> bollu: I suggest calling accessors specifically rather than using WITH-SLOTS
[08:29:21] <beach> "make-assignment-instruction" rather than "mk-inst-assign".
[08:29:59] <bollu> moon-child why is that? I like with-slots because it "feels" like pattern matching / destructuring a value.
[08:30:39] <beach> bollu: You carefully create a constructor mk-inst-add, but then you don't always use it.
[08:31:24] <moon-child> slots are implementation details.  An object might decide it would like to materialize an attribute on-demand rather than storing it in a slot, for instance
[08:32:07] <beach> bollu: You still have mysterious blank lines, incorrect indentation for IF, and the wrong number of semicolons in some places.  There should be a single semicolon for a comment after code on the same line.
[08:32:20] <sm2n> note that with-accessors exists
[08:32:51] <moon-child> I am a little confused by the behaviour of const-prop on an assignment instruction.  Presumably an assignment is a mutation, rather than simply creating a binding?
[08:33:01] <beach> bollu: And there is no particular reason to have a newline after LET*.
[08:33:07] <sm2n> though now that I'm looking at it again, " The consequences are undefined if any accessor-name is not the name of an accessor for the instance. "
[08:33:45] <bollu> beach I'm using whatever indentation lispworks appears to offer, so I am unsure what's going on there. I didn't know about the single semicolon rule, let me fix that
[08:33:47] <sm2n> which isn't great if for example you want to make an accessor into a method that generates things dynamically
[08:34:13] <moon-child> (defmacro with-accesses (bindings object &body body) `(let ,(mapcar (lambda (x) `(,(car x) (,(cadr x) ,object)) bindings) ,@body))
[08:34:17] <moon-child> modulo gensym for object
[08:34:42] <beach> bollu: I don't believe that.  I can't see how lines 132 and 134 could be indented differently.
[08:35:22] <beach> clhs 2.4.4.2
[08:35:23] <specbot> Notes about Style for Semicolon: http://www.lispworks.com/reference/HyperSpec/Body/02_ddb.htm
[08:35:27] <beach> bollu: ^
[08:35:56] <bollu> beach ah, you are indeed correct. Mh. I should learn how to enable format-on-save for lispworks
[08:37:12] <moon-child> bollu: you are still using EQUAL rather than EQ to compare symbols
[08:37:28] <moon-child> and, really, I would suggest EQL as a base case for your DEEPEQ
[08:37:32] <sm2n> Does lispworks not have some paredit equivalent?
[08:37:37] <beach> And you still have closing parentheses by themselves on line 60.
[08:39:04] <bollu> moon-child This is something I don't quite follow. is EQUAL wrong, in that it produces incorrect answers, or "too strong" for the use-case at hand? (that is, EQ will suffice for symbol comparison)
[08:39:40] <moon-child> the latter
[08:39:41] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[08:40:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:40:02] <bollu> okay
[08:40:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:41:50] <bollu> It looks like there is https://github.com/g000001/lw-paredit for lispworks. I'll set it up
[08:42:02] <bollu> do most folks here use emacs?
[08:42:15] <sm2n> I think that is a safe assumption
[08:42:17] <moon-child> I expect so
[08:42:54] <bollu> moon-child what is wrong with const-prop for assignment? It overwrites the old assignment with the new value, does it not?
[08:42:57] <bollu> moon-child what is wrong with const-prop for assignment? It overwrites the old assignment with the new value, does it not?
[08:44:34] <moon-child> bollu: I don't know exactly what the semantics of your language are, and I haven't read your code very closely.  But unless an environment is local to a basic block, you will need control-flow analysis to know where to propagate assignments
[08:47:06] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:47:07] <bollu> moon-child ah yes, that is fair. I'll have to change to a lattice-map, which will union values if there are overlapping keys.
[08:51:02] <beach> bollu: About the EQ vs EQUAL: there is a general rule in programming that one should use the most specific construct that will do the trick, so as to help the person reading the code understand it as quickly as possible.
[08:52:34] <bollu> beach understood
[08:54:32] <White_Flame> also, you might get unintentional matches if your equality test is too broad, and unexpected data gets in there
[08:58:47] <bollu> Is there a mergeWith in common lisp to merge two assoc lists, with a handler for values defined in both assoc lists? I need to merge two maps using a semilattice join operator
[08:59:43] <moon-child> union :key #'car?
[09:00:13] <moon-child> 'handler for values defined in both' could use a custom test that mutates a closed-over overlap list
[09:00:51] <moon-child> (or just mutates the tested value directly)
[09:08:31] *** Quits: sloanr` (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[09:08:44] *** Joins: sloanr` (~user@97-127-122-25.mpls.qwest.net)
[09:09:43] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[09:09:59] <jgart> hi, what is the equivalent of os.environ.get("SERVER_NAME") in common lisp?
[09:13:01] <jgart> sm2n, answered in #lisp
[09:13:03] <jgart> thnx!
[09:15:29] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Read error: Connection reset by peer)
[09:15:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:15:42] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[09:21:01] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[09:21:31] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[09:21:38] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[09:34:17] *** Quits: sloanr` (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 240 seconds)
[09:39:55] *** Joins: parjanya (~esb@177.32.12.221)
[09:42:37] <beach> jgart: It is always better to explain what it id supposed to do than to assume that all #commonlisp participants instantly identify and know that language you are using for comparison.
[09:42:59] <beach> s/id/is/
[09:43:33] <jgart> oh c'mon who doesn't know that is python? lol jk
[09:43:52] <jgart> I'll try to explain next time better
[09:43:53] <jgart> thnx
[09:44:12] <beach> ywlcm
[09:45:48] * jgart needs a language server protocol for internet acronyms
[09:45:59] <jgart> in order to keep up
[09:46:22] <sm2n> I hope that was just abbrev failing because I have no clue either
[09:47:00] <beach> It was a statement in favor of using abbrevs rather than abbreviations like that in the text.
[09:48:09] <sm2n> heh
[09:48:10] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[09:49:22] <beach> I am still baffled by how few people use abbrevs.
[09:50:11] <sm2n> Most people don't do irc in emacs, and most operating systems don't come with system-wide abbrev functionality people know how to use out of the box
[09:50:36] <beach> Then I am still baffled by the reason people prefer to use inferior tools.
[09:51:02] <moon-child> beach: I would argue the point, but it is hopeless :)
[09:51:12] <sm2n> time, effort, access to knowledge, and possibly questionable aesthetic choices
[09:51:15] <moon-child> (re abbreviations, that is)
[09:53:04] <sm2n> I am always baffled (and appalled) by how much computation people do under corporate control, but there are reasons for that too
[09:54:44] <beach> Right.  I often hear the equivalent of "I don't have a choice", but that can't possibly be true.  Alternative choices might be difficult, but certainly not impossible.
[09:55:57] <sm2n> Sure, at the end of the day I think it comes down to priorities
[09:55:57] <jgart> what irc client do you use with emacs? circe?
[09:56:31] <beach> I personally use ERC, but I haven't done many comparisons.
[09:57:07] <sm2n> haha, I don't actually use emacs for irc
[09:57:15] <jgart> tbh, I'm using gajim with an irc bridge at the moment
[09:57:20] <jgart> ha
[09:57:22] <beach> I very much like having my same abbrev processor, my same spell checker, etc. for IRC and for other text production.
[09:57:39] <jgart> but I've used circe once
[09:57:56] <jgart> same for erc
[09:58:26] <sm2n> Yeah, I will probably switch eventually. Weechat was just easier to set up with my bouncer
[09:58:35] <sm2n> I do all my other textual work in emacs
[09:58:37] <jgart> might end up using catgirl or ii once I get fed up enough with gajim
[09:58:46] <sm2n> though this is getting pretty off topic now
[09:58:52] <jgart> haha yeah
[10:00:31] <jgart> sm2n, (uiop:run-program (list "firefox" "http:url"))
[10:00:43] <jgart> something like that I guess
[10:00:48] <sm2n> yes?
[10:00:50] <jgart> http://lispcookbook.github.io/cl-cookbook/os.html
[10:01:15] <sm2n> that is a blocking call
[10:02:09] <sm2n> also, you should just try out snippets at the repl
[10:02:55] <jgart> yup, I'ma fire up a repl
[10:03:27] <jgart> I meant launch-program :)
[10:03:59] <sm2n> Wait, were you writing your program without a repl open?
[10:04:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:04:31] <jgart> I haven't started writing it yet
[10:04:38] <sm2n> oh ok
[10:04:39] <jgart> just reading docs at the moment
[10:04:54] <jgart> taking notes on where everything is at
[10:05:33] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[10:05:55] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[10:06:02] <sm2n> other than that, if you like python's format strings, check out cl-interpol
[10:06:12] <sm2n> it's a library that adds similar syntax
[10:11:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:12:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:13:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[10:14:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:38:06] <jgart> sm2n, cool, thnx for sharing
[10:39:04] <jgart> https://paste.sr.ht/~whereiseveryone/618cf8f7dca8ec3fdaf33aa8488215e0d143b0cb
[10:39:30] <jgart> how might I get the full output from ls?
[10:41:05] <sm2n> one approach would be to call read-line in a loop
[10:41:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:42:17] <sm2n> something like (loop for line = (read-line :eof-error-p nil) while line collect line)
[10:43:34] <beach> *sigh*
[10:44:12] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:44:30] <sm2n> but yeah I wouldn't do that, as beach is probably going to say
[10:45:00] <sm2n> just call uiop:directory-files
[10:45:02] <beach> I was just going to remark on "while line", but I'll refrain.
[10:45:54] <sm2n> how would you handle the implicit null here? `until (null line)`?
[10:46:15] <loke[m]> I don't really see that as problematic.
[10:46:41] <loke[m]> I have probably written code exactly like that many times.
[10:49:05] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:54:03] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[10:54:21] <beach> sm2n: Yes, to conform to the rules on page 13 of the LUV slides.  But I wasn't going to argue this again.  I have done it many times already.
[10:55:18] <sm2n> Yeah, I just wanted to know what you were going to point out since I didn't see the issue at first glance
[10:55:37] <beach> I understand.
[10:55:53] <jgart> > uiop:directory-files
[10:56:21] <jgart> sorry, the thing I was more interested in is the way to get stdout/err from any arbitrary command
[10:56:28] <jgart> ls was just one example
[10:56:33] <sm2n> oh
[10:56:44] <jgart> but I see the suggestions above
[10:56:47] <jgart> so thnx :)
[10:57:01] <jgart> nice to know uiop:directory-files exists, though
[10:57:15] <beach> loke[m]: The fact that you (or anybody else, for that that matter) have written code of a particular form is not a good argument for whether it is a good or a bad way of writing it.
[10:58:02] <moon-child> beach: all other things being equal, it is good to write code in a conventional fashion
[10:58:40] <jgart> so
[10:58:45] <jgart> (loop for line = (read-line :eof-error-p nil) while line collect line)
[10:58:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:58:52] <sm2n> lol
[10:58:52] <jgart> is one approach
[10:58:57] <jgart> ha
[10:59:47] <sm2n> I agree with beach that (null x) is clearer code
[10:59:53] <jgart> what are some others for getting stdout/err from *list-files*?
[10:59:55] <beach> moon-child: Absolutely.  Then it "just" boils down to who can be trusted to establish such conventions.
[11:00:35] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:00:46] <sm2n> it's just not something I usually think about because I have experience in languages where such things are idiomatic
[11:00:48] <moon-child> beach: it is not a matter of trust.  Conventions have been established, and it is our task to _identify_ them
[11:01:03] <sm2n> (same thing with (and x (f x) ...))
[11:02:40] <moon-child> more interesting, though (imo) is to identify cases when all else is _not_ equal
[11:02:44] <beach> moon-child: I don't believe that is quite true.  Given the relatively low level of training and very limited experience of apparently most programmers, I am not willing to just look at average behavior as being "conventional".  That's why I trust Norvig and Pitman much more than I trust most people here, including myself.
[11:05:28] <sm2n> jgart: uiop gives you a stream, so you can use any way of reading a stream you have
[11:05:36] <sm2n> I don't have another one off the top of my head
[11:06:16] <beach> moon-child: The argument in the LUV slides is about the reaction of people other then those who wrote the code to certain constructs.  Most people here seem to have very limited experience with working in teams with other people, at least compared to Norvig and Pitman.  That is why I put less trust in arguments such as "but *I* prefer it that way" or "I have done this a lot and had no problems with it" than the arguments of Norvig an
[11:06:17] <beach> Pitman.
[11:06:22] <jgart> ah ok, so thinking of it as a stream is the way to go
[11:06:24] <moon-child> read-sequence?
[11:07:02] * moon-child considers taking a cheap shot at Peter ‘Python is an acceptable Lisp’ Norvig, decides against it
[11:07:17] <sm2n> jgart: look at the optional :stream parameter in read-line
[11:07:27] <sm2n> moon-child: I also thought better of it
[11:07:53] <loke[m]> beach: how would you write it?
[11:07:56] <beach> moon-child: Yes, I have seen counterarguments like that in the past. "Norvig is a traitor so can't be trusted, so we can then safely ignore his experience and advice".
[11:08:32] <beach> loke[m]: until (null line) or while (stringp line)
[11:08:54] <beach> loke[m]: I really don't want to go through this again.  Sorry.
[11:09:30] <beach> loke[m]: And it is not how *I* would write it.  It is about the consequences of the advice by Norvig and Pitman.
[11:09:52] * jackdaniel strategically keeps being quiet
[11:09:54] <jackdaniel> good morning :)
[11:10:05] <beach> Hello jackdaniel.
[11:10:13] <sm2n> morning
[11:10:32] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[11:14:03] <jgart> what is a stream?
[11:14:08] <jgart> > Streams are high-level async/await-ready primitives to work with network connections.
[11:14:26] <phoe> clhs stream
[11:14:26] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm
[11:14:30] <jgart> does that sound like a good definition of a stream in lisp?
[11:14:37] <phoe> > A stream is an object that can be used with an input or output function to identify an appropriate source or sink of characters or bytes for that operation.
[11:14:53] <phoe> that is the standard definition of a stream in Lisp
[11:15:07] <jackdaniel> not only characters and bytes if we account for gray streams
[11:15:12] <phoe> but the question is whether the term is overridden or not
[11:15:14] <sm2n> I think reading js or python documentation is not a good idea when writing cl
[11:15:19] * jgart reads http://www.lispworks.com/documentation/HyperSpec/Body/21_a.htm
[11:15:48] <phoe> jackdaniel: oh? do Gray streams allow for non-byte and non-character streams?
[11:15:51] * phoe re-reads their spec
[11:16:07] <jgart> gray as in gray code?
[11:16:08] <jackdaniel> of course, McCLIM throws there arbitrary objects
[11:16:23] <jackdaniel> i.e pointer events
[11:16:28] <jgart> https://en.wikipedia.org/wiki/Gray_code
[11:16:32] <sm2n> gray as in some guy named gray iirc
[11:16:35] <phoe> jgart: Gray as in David N. Gray
[11:16:45] <phoe> jackdaniel: nice! TIL
[11:17:52] <jgart> phoe, oh ok thnx
[11:18:00] <jackdaniel> gray streams doesn't propose the protocol to read and write arbitrary objects, but this does not mean that you can't define your own operators, i.e stream-read-gesture
[11:18:16] <phoe> jackdaniel: that's the part that I was missing, thanks
[11:19:11] <jackdaniel> you subclass fundamental-{input,output}-stream directly instead of fundamental-{character,binary}-{i,o}-stream
[11:20:05] <jackdaniel> or you subclass the character stream and implement operators so the stream works like bivalent streams
[11:20:08] <jgart> are streams lazy?
[11:20:22] <phoe> jgart: lazy as in?
[11:20:33] <jgart> lazy evaluation
[11:20:42] <phoe> lazy evaluation of what exactly
[11:20:42] <jackdaniel> no, they are not generators
[11:20:45] <moon-child> jgart: it depends on how they are implemented
[11:20:46] <phoe> oh, like that
[11:21:23] <moon-child> jgart: elements read from a stream may be generated lazily, on the fly, or not.  It depends entirely on the implementation
[11:22:03] <jgart> thnx
[11:22:30] <jgart> does common lisp have generators or are they called something else?
[11:23:30] <sm2n> no, but I think you can simulate them with closures
[11:23:31] <jackdaniel> QA Thursday :) there are no builtin generators
[11:23:51] <sm2n> (essentially cps if you need multiple yield points, I think)
[11:24:10] <sm2n> actually it's 3am I'm not sure what I'm talking about
[11:24:41] <jackdaniel> 3am is the best phase of night to be sound asleep
[11:26:00] <phoe> looks like https://github.com/BnMcGn/snakes implements them and there is also https://github.com/cbeo/gtwiwtg
[11:28:22] <sm2n> I spy with my little eye the c-word
[11:28:41] <phoe> yes, it's generally impossible to create generators without continuations :D
[11:29:49] <jackdaniel> isn't it? if we ignore the performance constraints, wouldn't a separate thread that blocks on yield until read fulfill the role?
[11:30:14] <sm2n> jackdaniel: that's equivalent to a continuation I think
[11:30:44] <phoe> jackdaniel: hmmmm
[11:30:46] <jackdaniel> then most common lisp implementations have continuations then, right?
[11:30:53] <phoe> that would work
[11:31:13] <phoe> ;; and be a pretty good argument for green threads too
[11:31:15] <jackdaniel> let's call them 3rd class citizen continuations
[11:31:22] <phoe> :D
[11:31:23] <jackdaniel> yes, green threads are the classic way of doing this
[11:32:21] <jackdaniel> and green threads could be implemented easily with delimited continuations ,)
[11:32:43] <phoe> (and vice versa)
[11:32:50] <jackdaniel> oh? is that right?
[11:32:53] <moon-child> for streams you only need one-shot continuations
[11:34:58] * sm2n wonders if you could build generators using a closed over tag to store progress and tagbody to resume on each call
[11:35:23] <phoe> yes, but you'd need to flatten all of your code into that tagbody
[11:35:25] <jackdaniel> moon-child: one-shot continuation is a delimited continuation, do I miss something?
[11:35:38] <jgart> where can I find a function like this python one in common lisp? tempfile.TemporaryDirectory()
[11:35:43] <sm2n> jackdaniel: no, I don't think that's true
[11:35:43] <jgart> i.e. Generate temporary files and directories
[11:35:52] <phoe> jgart: uiop:with-temporary-directory AFAIR
[11:35:53] <moon-child> jackdaniel: I don't know if that's true or not.  But I did not read scrollback closely
[11:35:57] <jackdaniel> sm2n: as in one-shot-continuation is a subtype of delimited continuation
[11:36:04] <sm2n> one-shot continuations are strictly weaker
[11:36:10] <sm2n> oh, that's what you meant
[11:36:28] <sm2n> yeah, iirc given delimited continuations you can emulate the rest
[11:36:44] <sm2n> you just can't pull real parallelism out of a hat
[11:37:28] <jackdaniel> depends on the hat :)
[11:38:01] <sm2n> Well if your hat's name starts with joe and ends with armstrong...
[11:38:17] <moon-child> haha
[11:38:17] * jackdaniel was thinking about Moomins
[11:39:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:39:51] <jgart> phoe, thnx!
[11:40:12] <jackdaniel> ftr https://moomin.fandom.com/wiki/The_Hobgoblin%27s_Hat (offtopic :)
[11:44:48] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[11:46:58] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[11:58:43] *** Joins: parjanya (~esb@177.32.12.221)
[12:01:24] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[12:05:35] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[12:15:56] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[12:16:53] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:17:11] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[12:21:42] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:22:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:23:52] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:24:15] *** Joins: notzmv (~zmv@user/notzmv)
[12:27:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:28:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:30:56] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[12:43:13] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:43:38] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:46:09] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[12:46:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[12:47:11] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:49:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:51:53] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[12:55:57] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:56:37] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[13:00:18] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[13:00:47] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:02:41] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:09:02] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[13:13:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:15:59] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[13:21:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:23:04] *** Joins: pve (~pve@37-136-83-144.rev.dnainternet.fi)
[13:25:49] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[13:26:11] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:33:33] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:36:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:37:10] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:40:38] *** Joins: kevingal (~quassel@37.228.202.92)
[13:41:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:43:05] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:43:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:49:21] <loke[m]> jackdaniel: I wonder why they call it hobgoblin in the english version.
[13:49:35] <loke[m]> In the Swedish version it's simply the magician.
[13:49:44] <jackdaniel> in Polish version it is also a magician
[13:49:55] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[13:50:03] <loke[m]> I guess the polish version is closer to the original language :-)
[13:50:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[13:50:18] <jackdaniel> (or warlock, depends how you translate it to english :-)
[13:51:23] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[14:00:31] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[14:02:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:02:45] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[14:03:12] <akater[m]> It's magician in Russian too.
[14:03:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:03:33] *** Lord_of_Life_ is now known as Lord_of_Life
[14:09:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:11:27] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:22:05] *** Joins: parjanya (~esb@177.32.12.221)
[14:26:33] * phoe sees a thing in the code
[14:26:34] <phoe> #+nil(error "This file assume that #+NIL is never defined.")
[14:26:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[14:26:46] <phoe> that's one way of solving the problem
[14:26:47] <moon-child> lol
[14:26:56] <moon-child> is 'the code' a cl test suite?
[14:27:00] <moon-child> cuz if not then, ehm
[14:27:38] <phoe> https://github.com/fjolliton/cl-vectors/blob/02b54d6/aa.lisp#L142
[14:28:03] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 256 seconds)
[14:28:24] *** Quits: lagagain (uid214580@id-214580.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[14:28:43] <jackdaniel> it is surprising how hard it is to type #+(or) instead of #+nil - I broke a finger the other day
[14:29:34] <moon-child> my shift key is broken; what shall I do?
[14:30:54] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[14:31:19] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[14:36:57] *** Quits: wheelsucker (~user@2600:8801:8c26:7f00::2f04) (Ping timeout: 240 seconds)
[14:41:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:45:27] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[14:46:18] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:47:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:49:29] <ck_> outsource your needs to an upper-case provider .. in the cloud .. 2.0
[14:58:47] <phoe> moon-child: (let ((ext:*keyboad-layout* :qwerty-pl)) (char-upcase #\3 :force t)) ;=> #\#
[14:59:23] <moon-child> how do I type these characters * : ( ) without my shift key?
[14:59:29] <moon-child> (nb. I copy-pasted them from your message)
[15:00:04] <phoe> moon-child: for parens, `setxkbmap -option parens:swap_brackets` on a linux machine
[15:00:11] <phoe> * is on your numpad
[15:00:20] <phoe> and the colon is left as an exercise to the reader
[15:00:45] <moon-child> KP_star is not the same as star
[15:00:47] <moon-child> COUNTERFEIT!
[15:01:10] <jackdaniel> that's what you have key to character mappings for
[15:02:03] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:04:03] <phoe> hmmm
[15:04:34] <phoe> madnificent: I think I am facing a problem similar to the one you faced
[15:05:12] <phoe> I want to write an equivalence predicate for some value-semantics-only stuff, and I want to handle cycles in it
[15:07:07] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:08:36] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:19:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:21:28] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[15:21:29] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:23:08] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:29:28] *** Joins: igemnace (~ian@user/igemnace)
[15:45:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:47:45] *** Joins: etiago (~etiago@user/etiago)
[15:50:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:51:01] *** Joins: wyrd_ (~wyrd@gateway/tor-sasl/wyrd)
[15:52:09] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[15:54:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[15:58:25] *** Joins: jpl01 (~user@2001:16b8:494f:ef00:989:fe50:bfa6:5b74)
[16:02:53] *** Joins: sdx (~sdx@ip-109-40-242-211.web.vodafone.de)
[16:05:58] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[16:08:54] <rotateq> phoe: I thought using #+(or) instead of #+NIL is better for such forms. :)
[16:10:33] <jackdaniel> if we ignore finger injuries then sure
[16:10:58] <rotateq> öhm .. :D
[16:11:11] <sdx> This might be offtopic but I wanted to hear how lisp developers handle this topic: do you usually audit the libraries that you are planing to use? I usually clone the library and then read through every file that the library consists of but I've been told that this is a waste of time by other developers, so what do you do and why?
[16:12:35] <jackdaniel> ensuring the license compatibility is the first step; the rest depends on how many dependencies you have (and how big they are)
[16:12:37] <phoe> there's a lot of implicit trust both in free software and in a part of the lisp community I am aware of
[16:12:48] <jackdaniel> it wouldn't be feasible to audit a large codebase
[16:13:12] <jackdaniel> (that may be argument for not reusing too much "free" code)
[16:13:39] <jackdaniel> and yeah, trust and ducktape is what's holding the computer world together
[16:13:41] <jackdaniel> and some spit
[16:13:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[16:14:16] <rotateq> phoe: Much implicit trust all around, like when going to the doctor and get medicine, or buying food.
[16:14:24] *** Joins: amb007 (~a_bakic@235.148.22.93.rev.sfr.net)
[16:14:37] <phoe> yes
[16:15:19] <jackdaniel> well, doctors and shops would be held responsible for selling poison while most free software has a "no warranty" label
[16:16:24] <rotateq> yes right, but in the first place a doctor must be a person of trust by themselves for me :)
[16:17:48] <rotateq> and jackdaniel, to fill in the recent responses, in German it's also "Zauberhut" so with magician ^^
[16:18:44] <jackdaniel> I have to say that lispers are well versed in Moomins. coincidence? I don't think so! ;p
[16:19:19] <_death> sdx: I do the same (well, skim not read.. after initial reading it becomes easier since you just need to keep up with changes when you update), especially for the projects I actually use
[16:20:02] <rotateq> phew long time ago for me that i saw it as a child and it's way older than me. and Anime series :D
[16:21:49] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 256 seconds)
[16:22:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:23:06] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[16:23:43] <rotateq> phoe: and to be more ontopic with it, your sentence reminded me of another line, that we show trust (in each other) by using CLOS, whereas in C++ and such everything is public/private and they trust no one
[16:24:25] <_death> sdx: of course it's not complete coverage.. for example, when I update sbcl I disregard many of the changes because I lack the prerequisites.. but with ordinary lisp libraries, which are much smaller, it's better
[16:28:47] <sdx> _death: I just got kind of "paranoid" I guess becuase of all the recent supply chain attacks especially in the web world that I think that there must be some better way and since then I started auditing everything I use in my projects.
[16:29:28] <rotateq> but that was with Java ..
[16:29:53] <jackdaniel> do you think that lisp is not capable of parsing logged strings and querying ldap servers?
[16:29:56] <jackdaniel> probably not :)
[16:29:58] <_death> sdx: well, that's one reason I guess.. for me it's more about understanding and taking note of breaking/unexpected changes
[16:34:51] *** Quits: amb007 (~a_bakic@235.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[16:35:55] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[16:38:40] *** Quits: sdx (~sdx@ip-109-40-242-211.web.vodafone.de) (Quit: Client closed)
[16:39:52] <phoe> rotateq: which one was with java?
[16:40:10] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[16:40:11] <jackdaniel> log4j had a security issue
[16:40:19] <phoe> log4shell wasn't a supply chain attack though, it was a feature that turned out to be exploitable
[16:40:41] <moon-child> rotateq: (progn (defclass c () ((#1=#:slot :initform 0))) (defun frob (x) (incf (slot-value c '#1#))))
[16:40:48] <moon-child> rotateq: ^^ as close as it gets to a private member
[16:41:01] <jackdaniel> someone depended on log4j, for them it was something "supplied" from the outside
[16:41:01] <moon-child> sure, you may be able to divine it anyway.  But you can also memcpy a private member in c++ sooo
[16:47:43] *** Joins: parjanya (~esb@177.32.12.221)
[16:49:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:52:10] <phoe> mop validate-superclass
[16:52:10] <specbot> http://metamodular.com/CLOS-MOP/validate-superclass.html
[16:52:50] <beach> That is a strange function.
[16:52:57] <jackdaniel> why?
[16:53:25] <beach> Why would it not trust you to define a superclass, but then trust you if you add a method on this function?
[16:53:43] <beach> Why not a second one, like validate-validate-superclass-method?
[16:55:05] <_death> it's not about trust, but about lowering the chance of accidental use
[16:55:29] <beach> And you can lower it even more with that second function I suggested.
[16:55:44] <jackdaniel> it is a declaration that you've ensured that both metaclasses are compatible
[16:55:59] <jackdaniel> from the programmer that is
[16:56:09] <beach> I know what it is.  But why did I not do that already when I defined the superclass?
[16:56:15] <beach> er, the subclass.
[16:56:52] *** Joins: jeffrey (~jeffrey@2001:1c00:b1c:4100::80c0)
[16:58:22] <beach> And I wonder what there is in a typical Common Lisp implementation that does not allow the system to check whether the superclass is valid.
[16:58:23] <jackdaniel> I think that if you deal with custom metaclasses it is not very hard to mistakenly define a standard class that subclasses something that has a custom one
[16:58:56] <beach> jackdaniel: And then we magically think that it would be harder to define a method on validate-superclass?
[17:00:15] <jackdaniel> I'm sorry but I fail to grasp what is the concern here. when you make a mistake, validate-superclass called by the implementation will error on you
[17:00:32] <jackdaniel> so you will know that you forgot to ensure that classes are not compatible
[17:00:37] <jackdaniel> s/not//
[17:00:48] <_death> the utility function depends on both the possibility of misuse and the complexity of the prevention and detection mechanisms
[17:00:53] <beach> But why is it easy to make the mistake that you said, but not easy to make the mistake of defining a method on validate-superclass?
[17:00:55] <jackdaniel> and either define a method or resign from subclassing the incompatible superclass
[17:01:22] <jackdaniel> well, validate-superclass is directly concerned with metaclasses while when you create a class then you may be oblivious to that
[17:01:32] <jackdaniel> (to the metaclass of your superclass that is)
[17:02:35] <beach> So why do we think that the programmer will make the mistake to define an invalid superclass, but then not make the mistake of defining a method on validate-superclass?
[17:03:15] <beach> I would guess most programmers would just immediately define such a method without investigating further.
[17:03:23] *** Joins: treflip (~user@user/treflip)
[17:03:33] <jackdaniel> that's very sad assessment of most programmers
[17:03:48] <beach> No worse than using the wrong superclass.
[17:04:02] <jackdaniel> well, I don't share that opinion
[17:04:07] <beach> Of course.
[17:04:35] <jackdaniel> either way now I have better understanding why do you consider this function weird, thanks for elaborating
[17:04:57] <beach> Sure.
[17:08:13] *** Joins: alevykh (~alevykh@92-127-119-178-bbc-dynamic.kuzbass.net)
[17:09:21] <phoe> Xach: thanks for merging my vecto stuff
[17:09:55] <Xach> phoe: thanks for making it
[17:10:13] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:11:28] *** Parts: alevykh (~alevykh@92-127-119-178-bbc-dynamic.kuzbass.net) ()
[17:12:47] <jackdaniel> metaclasses may be provided by a third-party library and the consumer of said library may have insufficient knowledge to decide whether they are compatible
[17:13:08] <jackdaniel> so the burden falls on shoulders of person who defines metaclasses
[17:20:37] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[17:21:41] <nij-> In the SBCL manual, it calls extensible sequence an extension to the ansi standard. http://www.sbcl.org/manual/#Extensions
[17:21:59] <nij-> However, in CLHS it doesn't seem that the standard explicitly prohibits this: http://clhs.lisp.se/Body/t_seq.htm#sequence
[17:22:21] <nij-> Is that part of SBCL an extension of the ANSI standard then?
[17:23:04] <phoe> I don't understand the question
[17:23:22] <phoe> "X is an extension" doesn't imply "X is something prohibited by the standard"
[17:23:34] <random-nick> well, if the spec doesn't describe the extensible sequences protocol then it's an extension either way
[17:24:38] <yitzi> The extensible sequences extension is implemented by several implementations. https://shinmera.github.io/trivial-extensible-sequences/
[17:25:19] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[17:26:04] <random-nick> nij-: see the glossary entry for extension http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_e.htm#extension
[17:27:05] <phoe> if an implementation does something that is explicitly prohibited by the standard, then in theory it's not an extension, it's non-compliance
[17:27:36] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[17:29:27] *** Joins: Bike (~Glossina@71.69.170.70)
[17:29:28] *** ChanServ sets mode: +o Bike
[17:33:49] <madnificent> I'm looking for sensible libraries for a semi-high throughput http system.  Assuming a few thousand http requests coming in from a limited amount of endpoints, and a few thousand http requests going out at the same time (something between 1 and 50 but no hard upper limit).  Outward communication goes to two http endpoints and communication is well-formed json (should that ever matter).  Any suggestions on the http lib
[17:33:49] <madnificent> defaults are hunchentoot and drakma) and/or multi-threading constructions I should investigate?
[17:33:57] <Alfr> nij-, what in the description of sequence makes you think that?
[17:35:13] <Shinmera> madnificent: woo and dexador, probably.
[17:35:13] <madnificent> I'm running on SBCL.  Each of the requests have some processing that needs to happen on them.  I will also have to lift off the pressure from the component I call when it can't follow, that will create some more open connections temporarily.
[17:40:40] <madnificent> Shinmera: Thank you :D  Other suggestions as these are labeled beta and the author isn't always as highly regarded here.  I'm going to try them though, the design targets match mine.
[17:42:35] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:44:13] <Shinmera> there are no real choices other than woo and hunchentoot as far as I'm aware.
[17:47:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:48:15] <madnificent> Any ideas on thread pooling, or is that included with Woo somehow?
[17:48:21] <nij-> Oh I see. I got mixed with "extension" and "non-compliance". Thanks.
[17:49:41] <madnificent> I see a set of workers, but I doubt 10k running threads is SBCL's target.  I should probably split up processing steps and let each step be handled by workers as they come free.
[17:51:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[17:55:18] *** Joins: etiago (~etiago@user/etiago)
[18:05:09] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[18:06:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:06:43] *** Joins: sloanr` (~user@97-127-122-25.mpls.qwest.net)
[18:07:31] *** engblom_ is now known as engblom
[18:07:34] *** Quits: engblom (~foo@86-60-190-113.dynamic.lounea.fi) (Changing host)
[18:07:34] *** Joins: engblom (~foo@user/engblom)
[18:11:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:12:05] <jeffrey> Shinmera, I use caveman2 which supports both
[18:12:48] <jeffrey> or @madnificent I eman
[18:13:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:15:57] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:15:59] <Shinmera> caveman is a web framework, not a web server.
[18:16:34] <jeffrey> Ofcourse, excuse me
[18:23:33] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Quit: Quitting...)
[18:23:49] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[18:26:33] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:29:01] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[18:29:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:33:55] *** Quits: hisacro (~OBSD@my.displ.nl) (Quit: \o|)
[18:33:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:34:43] *** Joins: hisacro (~OBSD@my.displ.nl)
[18:36:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:42:55] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 256 seconds)
[18:49:45] <madnificent> jeffrey: thanks though.  I'm only going to have 4 endpoints on this server which will actually only two types of requests.
[18:51:06] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:52:24] *** Joins: nature (~nature@45.32.235.173)
[18:54:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:55:07] *** Joins: rotateq (~user@185.66.193.48)
[18:56:31] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[18:57:47] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:59:44] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:00:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:10:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:11:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:21:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:25:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:26:57] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[19:27:20] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:35:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:36:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:36:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[19:38:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Quit: Quit)
[19:38:07] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:38:20] <engblom> Is there any ready function that would work like (butlast ...) but for strings?
[19:38:35] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[19:38:59] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Client Quit)
[19:39:37] <engblom> I would want to use a such function for extrating only 334 from (cl-ppcre:scan-to-strings "(\\d)+(/)" "54foof334/asdfasd123/"). Now I would get "334/" as result.
[19:39:50] <jeffrey> (str:substring 0 -1 "text")?
[19:40:04] <Bike> subseq. but for that you should probably just ues capture groups, no?
[19:41:39] <engblom> jeffrey, Bike! I am asking so I do not unnecessary reinvent the wheel.
[19:44:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:44:52] <lisp123> beach: What is your ERC settings? I find when I use it I get flooded with a lot of unnecessary messages
[19:45:37] <beach> What is an "unnecessary message"?
[19:46:00] <lisp123> x has joined / y has left to a large degree
[19:46:20] <beach> I find those extremely useful.  But I think there is a flag to turn them off.
[19:46:29] <_death> there's erc-hide-list
[19:46:58] <lisp123> I see, thanks. _death - oh great, let me play around with that
[19:47:42] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[19:47:56] <Bike> engblom: i.e. (elt (nth-value 1 (ppcre:scan-to-strings "(\\d+)/" "54foof334/asdfasd123/")) 0) => "334"
[19:49:24] <engblom> Bike: Thanks!
[19:49:52] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[19:51:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:56:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[19:56:34] *** Quits: sloanr` (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[19:57:08] *** Joins: amb007 (~a_bakic@235.148.22.93.rev.sfr.net)
[20:00:37] <_death> maybe hack a designated line containing something like "J: [18:05 user1] [17:39 user2] | P: [18:20 user3]" instead
[20:00:45] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[20:02:00] <lisp123> _death: I usually just check if the person is there via tabbing on their name, although I have a custom IRC app which is really cool (but not Emacs obviously)
[20:02:14] <phoe> I'd like to specify an extra argument for a slot definition, :ALWAYS-BOUNDP T, which is meant to ensure that a slot can never be unbound - meaning that attempts to create an instance with neither INITFORM nor INITARG should signal an error, and so should SLOT-MAKUNBOUND. the latter is a matter of defining a new method on SLOT-MAKUNBOUND-USING-CLASS, but how do I easily achieve the former?
[20:02:35] <_death> lisp123: sure, it's just a way to see recent join/parts without spending lots of line on it
[20:02:50] <jgart> lisp123, what's the irc app? do you have a public repo for it?
[20:03:19] *** Joins: kevingal_ (~quassel@80.233.53.208)
[20:03:23] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[20:03:25] <lisp123> _death: Indeed, its a pretty good idea, others may find it useful
[20:03:41] <lisp123> Perhaps a summary for like 5 minutes
[20:04:05] <lisp123> jgart: http://limechat.net/mac/
[20:04:22] <lisp123> Not mine obviously..I can barely join lists today :P
[20:08:22] <lisp123> phoe: I usually would do it a different way, which most likely is not suitable. If you have the slot as a mixin, you could do a check in an after method?
[20:08:44] <phoe> lisp123: which method?
[20:08:50] <phoe> or rather, an after method on which GF?
[20:09:01] <phoe> slot-value-using-class?
[20:09:07] *** Joins: Oladon (~olad@98.43.81.226)
[20:09:09] <lisp123> initialize-instance?
[20:09:12] <_death> phoe: my first thought is initialize-instance
[20:09:24] <jgart> lisp123, oh ok, thnx
[20:09:35] <phoe> hmmm; I'd need to iterate across all slots and ensure that all are bound inside it, right?
[20:09:39] <phoe> or are you thinking of something else?
[20:10:11] <lisp123> it would probably work, but if each slot is a mixin, have them inherit from must-be-initialized-protocol
[20:10:25] <lisp123> then do an after method there, some MOP magic to then check if slots bound
[20:11:04] <phoe> I mean, I need to accept the :ALWAYS-BOUNDP keyword argument anyway, so I need to write a custom slot definition
[20:11:05] <_death> phoe: across the slots marked always-bound
[20:11:14] <phoe> _death: yes
[20:11:54] <_death> phoe: but why not just :initform (error "gimme")
[20:12:15] <phoe> _death: !
[20:12:30] <phoe> mostly to avoid typing it over and over and over again
[20:12:35] <_death> (I often use :default-initargs for that)
[20:12:49] <phoe> if you have tens of slots and/or :default-initargs forms then you have tens of (error "gimme")
[20:12:54] <_death> well, there's required-argument and such
[20:13:07] <phoe> s/(error "gimme")/(a:required-argument :gimme)/
[20:13:25] <mfiano> what happens if you makunbound?
[20:13:30] <_death> in any case you need to specify it somehow.. could be :always-bound t
[20:13:39] <phoe> mfiano: should be an error
[20:13:42] <_death> mfiano: me, I think if you slot-makunbound you deserve it
[20:15:31] <_death> if you have tens of initargs that are required.. maybe you should change your interface
[20:15:57] <phoe> I mean, across dozens of defclasses
[20:16:20] <_death> then (error "FOO is required.") is not so bad
[20:16:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:16:59] <phoe> :initform (error "FOO is required.") repeated fifty times across twenty DEFCLASS forms makes me unhappy though
[20:17:12] <_death> is the purpose of the metaclass specifically always-bound?
[20:17:12] <phoe> that's an average of 2.5 (error "FOO is required.") per DEFCLASS
[20:17:41] <phoe> to be honest, yes - 100% of my use case is going to be "having a class whose slots are always meant to be bound"
[20:17:50] <phoe> s/whose slots/whose instances' slots/
[20:18:40] <_death> well, you can write it an see how you like it.. personally I have :foo (error "FOO is required.") and don't feel it to be an issue
[20:18:49] <_death> *and
[20:19:00] <phoe> _death: I mean, it's currently this way in my code, and it's not really much of an issue either
[20:19:15] <phoe> ...until I forget it once or twice
[20:20:00] <_death> there are many small things that can be tweaked in defclass and other forms.. but it comes down to bang-for-the-buck
[20:20:10] <phoe> yes
[20:20:22] * phoe ponders his MOP
[20:20:25] <lisp123> So there's no way to do :always-bound T and make it work?
[20:20:30] <phoe> lisp123: there is
[20:20:45] <phoe> plenty of ways actually, I'm just figuring out the best one now
[20:20:47] <lisp123> oh, let me read
[20:20:55] <lisp123> re-read*
[20:22:07] <lisp123> phoe: if you find some good way, can you let me know? I am curious since my CLOS vocab is very limited
[20:22:45] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:24:25] <phoe> lisp123: I will
[20:27:34] <lisp123> phoe: Thanks!
[20:30:14] *** Quits: amb007 (~a_bakic@235.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:30:29] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:34:44] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[20:35:28] <phoe> if I understand the instantiation protocol correctly, it's no real use to add methods to SHARED-INITIALIZE of the slot definition itself, because this problem isn't really about slot definitions, but about concrete slots - so it seems that any checking should happen during SHARED-INITIALIZE :AFTER of the instance itself
[20:36:39] <_death> why shared-initialize?
[20:36:57] *** Quits: kevingal_ (~quassel@80.233.53.208) (Ping timeout: 256 seconds)
[20:37:22] <phoe> my current idea is, whenever a new instance of an all-slots-always-bound-metaclass is created, there should be a method added to SHARED-INITIALIZE :AFTER that will fire for instances of this metaclass, perform this checking, and signal an error if appropriate
[20:37:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a965:2f8a:47ef:cba2)
[20:37:57] <phoe> and any old such method might need to be removed in order to avoid leaks
[20:39:07] <_death> if you have an instance where the slots are bound, I don't think you can make reinitialize-instance make them unbound
[20:39:37] <phoe> hmmm
[20:39:45] <_death> (other than playing tricks of course)
[20:39:57] <phoe> that's one of the great four
[20:40:28] <phoe> the remaining three are MAKE-INSTANCE and U-I-F-R-C and U-I-F-D-C
[20:40:32] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[20:40:46] <phoe> these *might* result in unbound slots I think
[20:40:52] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:42:33] <_death> for make-instance, there's initialize-instance.. you need to have methods for the two others anyway
[20:43:31] <phoe> either have different methods for all three or try to have one method in shared-initialize :after - am I thinking wrong?
[20:43:53] <Bike> u-i-f-r-c and u-i-f-d-c can indeed add unbound slots, if the new class doesn't have initforms for them
[20:44:18] <_death> no, you need to handle the case where always-bound value changes, or where an instance is changed to be of a class with different always-bound values
[20:44:44] <phoe> if the always-bound value changes in any way then I don't care, it's still bound after all
[20:44:48] <Bike> why don't you just do the (error ...) thing, except make it the default initform if no initform is provided, so you don't have to write it out
[20:45:10] <phoe> Bike: hmm, I guess that works
[20:45:25] <_death> phoe: if always-bound is false, and an instance exists.. what happens if you redefine the class to have always-bound true
[20:45:39] <_death> (the instance has the slot unbound)
[20:45:56] <phoe> _death: good point
[20:46:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[20:46:26] <phoe> Bike's solution sounds simple
[20:46:50] <phoe> ;; even if I don't know if it solves this particular case
[20:49:03] <Bike> what wouldn't it solve
[20:49:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:50:05] <phoe> always-bound is false, instance exists and has an unbound slot, class is redefined to have always-bound true
[20:50:33] <phoe> but truth be told solving this with some sort of u-i-f-r-c methods sounds complex
[20:52:11] <_death> right, you could have a restart asking for a default or instance-specific value, but sounds like something to think about
[20:52:59] <lisp123> related/unrelated question - does adding handler-case and restart-case cause some minor slowdown in performance?
[20:53:06] <lisp123> (or any conditions construct for that matter)
[20:53:16] <phoe> yes, you need to perform dynamic binding/unbinding
[20:53:21] <Bike> yeah, ok, i guess you'd need a u-i-f-r-c method
[20:53:29] <lisp123> phoe: Thanks
[20:53:50] <phoe> lisp123: but I have no idea if it's a noticeable difference
[20:54:27] <phoe> I mean, certainly noticeable when compared to primitive unwind operators, see https://gist.github.com/nikodemus/b461ab9146a3397dd93e
[20:54:36] <Bike> might also need to allocate the handler closures. shouldn't be anything major though.
[20:55:02] <phoe> but all in all I have no idea what's the real difference in practice in real-world lisp programs
[20:55:23] <lisp123> phoe: Thanks. I guess its a good habit regardless. Perhaps one day I will benchmark and see how much effect it has
[20:55:29] <phoe> that test by nikodemus was actually very heavy on backtracking and it basically benchmarked just the condition system alone
[20:55:46] <phoe> I don't think it's anything that can be a source of any major slowdown
[20:56:09] <Bike> yeah, this also involves repeatedly making and signaling conditions, rather than merely installing handlers
[20:56:36] <phoe> and that in turn repeatedly walks the handler tree
[20:56:57] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[21:02:08] *** Joins: materialfuture (~materialf@149.248.8.187)
[21:04:23] <NotThatRPG> phoe: Isn't a cheesier, but easier solution to shadow defclass with your own macro that handles :always-bound t and inserts the error initform?
[21:04:46] <phoe> NotThatRPG: that's what I am doing at the moment
[21:05:13] <phoe> and it works but is kiiiinda unclean for my 2022 taste
[21:05:19] <NotThatRPG> Arguably ugly, but also conceptually a *lot* simpler (and likely more efficient)
[21:07:07] <_death> it may also be more future-proof.. sometimes (:metaclass foo) is an implementation detail and supplements a define-foo-class operator anyway
[21:07:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[21:13:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:14:21] *** Joins: miique (~miique@181.46.139.166)
[21:25:43] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[21:30:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:33:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:36:25] *** Joins: aeth_ (~aeth@user/aeth)
[21:36:30] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:36:33] *** aeth_ is now known as aeth
[21:38:02] *** Joins: frodef (~frode@46.212.93.4)
[21:40:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:46:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[21:48:56] *** Joins: Oladon (~olad@98.43.81.226)
[21:50:38] *** Joins: epony (epony@user/epony)
[21:51:11] <frodef> Hi all! I just had usocket err on me with a NS-TRY-AGAIN-CONDITION. This surprised me because it is not a SERIOUS-CONDITION, which supposedly is "All conditions serious enough to require interactive intervention". Is this perhaps a fault in usocket?
[21:52:51] <pjb> Well, a try again condition is not really an error, is it?
[21:53:15] <pjb> frodef: why would it require interactivity? Just write a loop to try again.
[21:54:47] <frodef> pjb: Well, I'm not the one saying it requires interactivity, usocket is. It threw me into the debugger.
[21:54:52] <Bike> not a socket expert, but i would think the idea is that you'd have your program try again automatically, without manual intervention
[21:55:40] <Bike> putting you in the debugger doesn't mean manual intervention is required. it means there's no code telling it what to do instead.
[21:57:25] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[21:57:36] <frodef> I suppose the real question is, if I want to run some code "non-interactively", then dealing with SERIOUS-CONDITION, nor ERROR as IGNORE-ERRORS does, will really do the trick.
[21:57:38] *** Joins: alvaro121 (~aa@201.230.126.66)
[21:57:47] <frodef> ...only *DEBUGGER-HOOK* will..?
[21:59:15] <frodef> ..or should I just HANDLER-BIND all conditions?
[22:00:37] <frodef> BTW the full(er) entry for SERIOUS-CONDITION is this: All conditions serious enough to require interactive intervention /if not handled/
[22:01:15] <frodef> seems to me the latter three words indicate that NS-CONDITION should inherit from SERIOUS-CONDITION.
[22:02:23] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[22:02:38] <frodef> Bike: I mean, there are obviously many serious-condition that don't require manual intervention in the sense that dealing with them automatically is impossible.
[22:04:28] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Remote host closed the connection)
[22:05:10] <Bike> i suppose it depends on how usocket signals it. which i'm not sure of, from glancing at the code
[22:06:08] <frodef> Not easy to see, but since I ended up in the debugger, it must have been by way of ERROR somehow.
[22:06:46] <phoe> frodef: the stack frames should give you the position of last ERROR call
[22:06:54] <phoe> if anywhere
[22:07:21] <phoe> but, yes, looks like a proper patch would be to have USOCKET raise the seriousness of NS-TRY-AGAIN-CONDITION
[22:10:56] <frodef> phoe: there's some weird FFI going on. And now I lost the sldb buffer, somehow.
[22:11:35] <frodef> I reported/asked about this in a github issue now.
[22:16:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:16:17] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:16:22] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:17:40] <phoe> does CLHS have a list of all standardized classes somewhere?
[22:17:53] *** Joins: akoana (~ah@user/akoana)
[22:18:04] <phoe> I only see CLHS 4.2.3 which contains a soup of type specifiers and class names
[22:18:07] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:19:33] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[22:21:20] <yitzi> phoe: There is this http://sellout.github.io/media/CL-type-hierarchy.png
[22:21:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:22:57] <phoe> yitzi: I know, I'm looking for a part of CLHS though (if it exists)
[22:23:11] <yitzi> ok.
[22:25:27] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:25:44] <Bike> phoe: figure 4-8 in 4.3.7, maybe
[22:27:30] <phoe> clhs 4.3.7
[22:27:30] <specbot> Integrating Types and Classes: http://www.lispworks.com/reference/HyperSpec/Body/04_cg.htm
[22:27:40] <phoe> Bike: thanks!
[22:27:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:27:48] <phoe> https://plaster.tymoon.eu/view/2831#2831 - this signals an error on CCL but not on SBCL
[22:28:13] <phoe> could someone double-check that for me? (change sb-mop: to ccl: for running on CCL)
[22:29:53] <phoe> it seems that SLOT-UNBOUND-USING-CLASS is not called at all on SBCL in that situation
[22:30:00] <phoe> but it is *very* possible that I am doing this wrong
[22:32:31] <Bike> it looks like sbcl only calls slot-makunbound-using-class when the slot doesn't have a location (i.e. slot-definition-location)
[22:32:57] <Bike> and i guess it always assigns a location if the allocation is :instance or :class
[22:33:08] <Bike> (the standard compute-slots :around method does, i mean)
[22:33:12] <yitzi> It gave expected error in CLASP
[22:33:28] <phoe> hmmm
[22:33:35] <_death> phoe: the class should be the object's class, not the metaclass
[22:33:42] <yitzi> No error in CMUCL or ECL
[22:33:59] <phoe> _death: OK, I see
[22:34:05] <Bike> but maybe this slot cell thing is relevant too
[22:34:08] * phoe fixes and re-tests
[22:35:46] <phoe> _death: I think I fixed it, no difference though
[22:35:57] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:35:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[22:36:08] <phoe> (see the updated paste)
[22:38:05] *** Quits: jmorrison_ (~jm@pool-74-104-177-164.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:39:10] <phoe> oh wait a second
[22:39:15] <phoe> I broke it again
[22:39:30] <phoe> mop slot-makunbound-using-class
[22:39:30] <specbot> http://metamodular.com/CLOS-MOP/slot-makunbound-using-class.html
[22:39:36] <yitzi> The mop says it is the metaclass
[22:40:22] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:40:27] <_death> it's says "class metaobject".. #<class test-class> is a class metaobject
[22:41:44] <yitzi> Doesn't class metaobject mean the actual instance of the meta class? The object is the instance of the class.
[22:42:07] *** Quits: aeth (~aeth@user/aeth) (Quit: Reconnecting)
[22:42:08] <phoe> ...he's right
[22:42:18] *** Joins: aeth (~aeth@user/aeth)
[22:42:38] <yitzi> Who?
[22:42:42] <phoe> _death
[22:42:55] <yitzi> ok
[22:42:56] <phoe> or is he, damn
[22:43:02] <phoe> this is already metametaclass level
[22:43:05] <phoe> when it comes to specializers
[22:43:12] <_death> it also says "It is the class of the object argument."
[22:44:16] <phoe> (defparameter *instance* (make-instance 'test-class :slot 42))
[22:44:45] <phoe> (class-of *instance*) ;=> #<ALWAYS-BOUND-CLASS COMMON-LISP-USER::TEST-CLASS>, so the proper specializer for the OBJECT argument would be ALWAYS-BOUND-CLASS
[22:44:51] <yitzi> Yeah, that is not the way I have used `slot-value-using-class` before
[22:45:13] <phoe> (class-of (class-of *instance*)) ;=> #<STANDARD-CLASS COMMON-LISP-USER::ALWAYS-BOUND-CLASS>, so the proper specializer for the CLASS argument would be STANDARD-CLASS
[22:45:36] <yitzi> See here https://github.com/yitzchak/common-lisp-jupyter/blob/a5315fe04e5e71f0a80964f8ec64f9c3450ff4ac/src/widgets/traits.lisp#L98
[22:45:42] <phoe> hold on a second, am I supposed to define a metametaclass to get this to work or what
[22:47:15] <_death> phoe: oh right, (class always-bound-class) was fine.. the class instance if #<class test-class> and object is an instance of it
[22:47:19] <_death> *is
[22:48:38] <phoe> we are on too many levels of abstraction
[22:48:41] * phoe throws to toplevel
[22:49:22] <_death> often such constraints are in the Description part, not Arguments and Values.. right?
[22:50:26] <phoe> okay, updated https://plaster.tymoon.eu/view/2831#2831 for the final time
[22:51:01] <phoe> optionally the DEFCLASS TEST-CLASS could be hoisted higher and the OBJECT could be specialized to TEST-CLASS for maximum specialization
[22:51:11] <_death> it gives expected result on ECL
[22:51:18] <phoe> as in, the error?
[22:51:27] <_death> yes, after s/sb-//
[22:51:56] <yitzi> I used this https://plaster.tymoon.eu/view/2832#2832 on CLASP and it was fine.
[22:52:27] <phoe> also signals an error on CCL
[22:52:36] <phoe> yitzi: fine, as in, an error?
[22:52:59] <yitzi> Yes, got the expected error. Sorry for not being clear.
[22:53:11] <phoe> OK - thanks, and sorry for double-checking
[22:53:25] <phoe> I prefer to have everything double-checked when I'm working with the MOP
[22:53:26] *** Joins: aeth_ (~aeth@user/aeth)
[22:53:27] <_death> sorry for the confusion on my part ;)
[22:53:33] <phoe> no problem
[22:53:39] <phoe> better to have this debated anyway :D
[22:53:42] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:53:44] * phoe grabs https://plaster.tymoon.eu/view/2831#2831 and off to #sbcl he goes
[22:53:47] *** aeth_ is now known as aeth
[22:54:33] <yitzi> I got no error on CMUCL or ECL.
[22:55:39] <phoe> huh
[22:55:40] <_death> yitzi: what ecl version?
[22:55:43] * phoe checks on ecl
[22:56:00] <_death> 21.2.1 (git:c646799145538997d84ed6d8755be7e7837eb7ef) gives me Broken at CLOS:SLOT-MAKUNBOUND-USING-CLASS. In: #<process TOP-LEVEL 0x7f2bad1c9f80>.
[22:56:53] <yitzi> _death: ecl master which was 21.2.1 ... let me look again. Maybe I did something wrong.
[22:58:13] <yitzi> _death: You are correct. It gives an error. I don't what I did wrong...bump.
[22:59:34] <yitzi> Ok. Scratch my previous...CMUCL gives the expected error. Somebody revoke my paste license.
[22:59:41] <_death> clisp doesn't like it *** - CLOS::EFFECTIVE-SLOT-DEFINITION-CLASS-<EMF-2>-1: illegal keyword/value pair :NAME, SLOT in argument list. The allowed keywords are NIL
[22:59:48] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[22:59:54] *** Joins: notzmv (~zmv@user/notzmv)
[23:00:36] <yitzi> ABCL gives expected error.
[23:00:59] <phoe> _death: :NAME? huh, I can't see that anywhere in this code block
[23:01:03] <_death> ccl gives error as expected
[23:01:14] <yitzi> SBCL 2.1.11 gives me no error.
[23:01:17] <rotateq> as long as ABCL doesn't let the multibear free ^^
[23:01:33] <phoe> yitzi: _death: thanks for verifying
[23:01:37] <_death> phoe: I think it's a clisp issue
[23:01:46] <yitzi> np
[23:01:52] <phoe> _death: yes, I think the same
[23:03:06] <_death> phoe: if I add &allow-other-keys to the e-s-d-c method it gives error as expected
[23:03:34] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[23:04:08] <phoe> _death: oh wait, am I supposed to add &A-O-K in all method lambda lists even if the GF has it?
[23:04:37] <_death> phoe: no.. the problem is that the GF doesn't have it (but neither does SBCL's).. both have (class &rest args)
[23:04:48] <phoe> ooh, I see
[23:05:16] <_death> that's the definition in MOP
[23:05:23] *** Joins: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it)
[23:05:23] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[23:05:26] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[23:05:48] <_death> I don't remember whether it's needed in this case
[23:06:17] <_death> usually it's &rest args &key &allow-other-keys
[23:06:40] <yitzi> I don't think it matters. The key specification is supposed to sit on the generic as I recall. The methods can add keys, but thats it.
[23:07:34] <_death> phoe: so maybe your defmethod should be (defmethod effective-slot-definition-class ((class always-bound-class) &rest args) ...)
[23:08:23] <phoe> _death: sure
[23:08:26] <_death> since the GF doesn't specify &key
[23:10:33] <phoe> ...
[23:10:39] <phoe> can I actually simplify my code a real lot?
[23:10:40] <phoe> https://plaster.tymoon.eu/view/2833#2833
[23:11:11] <phoe> it seems that I can
[23:11:26] <_death> right, since you didn't implement :always-bound yet
[23:11:27] * phoe kicks out the whole slot definition thing
[23:11:43] <phoe> yes, this is just slot-makunbound stuff at the moment
[23:15:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:16:27] *** Parts: mason (~mason@redhat/mason) ()
[23:16:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:17:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:19:52] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:21:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:24:41] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:26:14] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:29:12] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:31:04] *** Joins: theothor` (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[23:35:02] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Ping timeout: 240 seconds)
[23:35:13] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[23:44:06] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[23:44:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:45:08] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[23:47:20] <phoe> _death: I think I found a way to implement a class-wide always-bound mechanic without a custom ESD at all
[23:50:29] <_death> if it pertains to all slots, then yeah I guess
[23:52:12] <phoe> yes, that's my use case
[23:52:24] <_death> but then it becomes kinda limiting, since sometimes you want to initialize a slot in initialize-instance/shared-instance, and it may have a :type specifier that you don't want to extend
[23:52:30] <phoe> but then per-slot toggles can be just :initform (required-argument ...)
[23:52:55] <phoe> although that doesn't prevent unbinding
[23:53:00] <phoe> hmmmm
[23:53:05] <phoe> I'll think of it tomorrow or something
[23:53:20] <_death> right.. but you don't need custom e-s-d for slot-makunbound-using-class
[23:53:26] <phoe> yes
[23:54:45] <_death> without preventing makunbound, I guess instead of always-bound-class you can call it default-initform-class
[23:55:26] *** Joins: Oladon (~olad@98.43.81.226)
[23:56:43] *** Joins: foxfromabyss (~foxfromab@2a01:c22:a58d:fd00:878e:3506:e8d4:b16f)
[23:56:56] <_death> but then you may want per-slot information, say the slot's name
[23:57:17] <_death> to specify in the error
[23:57:29] <foxfromabyss> hello :)  are there any books you could recommend, that would be a good introduction to Common Lisp? I've done the SICP so far as the foundation for Lisp family languages, but would love something more specific for Common Lisp
[23:57:46] <_death> minion: tell foxfromabyss about pcl
[23:57:47] <minion> foxfromabyss: please look at pcl: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[23:58:48] <foxfromabyss> I was actually looking at exactly that one, but wasn't sure :D  thanks a lot!
[23:59:20] <_death> more books at https://cliki.net/Lisp%20books
