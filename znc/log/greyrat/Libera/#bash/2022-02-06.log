[00:01:13] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 256 seconds)
[00:01:15] *** Joins: nyjets (~zz@2001:8003:1612:d500:586:c933:946e:f1fb)
[00:02:22] *** Joins: rando25892 (~homefame@user/rando25892)
[00:05:01] *** Quits: bluedust_ (~bluedust@117.217.146.23) (Remote host closed the connection)
[00:05:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[00:05:36] *** Joins: bluedust (~bluedust@117.217.146.23)
[00:05:44] <wiscii> !factoids
[00:05:44] <greybot> My factoid database, and other things, are available at http://wooledge.org/~greybot/
[00:08:21] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a929:4bcd:7cfe:7254)
[00:08:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:08:31] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[00:10:00] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:10:01] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[00:10:01] *** Joins: kilitary (~kilitary@188.68.215.221)
[00:10:04] <wiscii> i'm confused .. if i have script A call script B, eg: ./B foo, is it possible to set say -x in A and pass that to B ?
[00:12:15] <larryv> options are not inherited by children
[00:12:38] <wiscii> so it cannot be done ?
[00:12:42] <larryv> if you know B is a shell script there are ways to invoke it with -x active
[00:13:05] <wiscii> that's what i'm trying to do :)
[00:13:53] <larryv> hm you're still restricted to POSIX, i assume
[00:13:59] <wiscii> yes
[00:14:01] *** Quits: jmew (~jmew@user/jmew) (Ping timeout: 256 seconds)
[00:14:21] *** Quits: jkwnki (~jkwnki@p4fedb869.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[00:14:31] <larryv> sh -x B foo
[00:14:56] <wiscii> ah, right , so call it in full, that is kind of what i thought ;-)
[00:15:33] <wiscii> tyvm
[00:16:13] *** Quits: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990) (Remote host closed the connection)
[00:20:09] *** Joins: jkwnki (~jkwnki@p4fedb869.dip0.t-ipconnect.de)
[00:20:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[00:24:31] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[00:27:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a929:4bcd:7cfe:7254) (Ping timeout: 256 seconds)
[00:28:37] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[00:29:05] *** Joins: ano (~ano@user/ano)
[00:34:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:38:12] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[00:39:25] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[00:43:09] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[00:45:57] *** Quits: at_work (~at_work@user/at-work/x-5282331) (Ping timeout: 240 seconds)
[00:47:35] *** Quits: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058) (Ping timeout: 252 seconds)
[00:48:37] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:52:03] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[01:01:12] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:01:47] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[01:06:41] <wiscii> is there such code that will reliably trigger -e to exit ?
[01:07:38] <larryv> false?
[01:09:25] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:09:35] <wiscii> this does not do what i thought: [ a -eq 1 ]
[01:10:13] <wiscii> nor: false
[01:10:16] <larryv> are you using it with an if?
[01:10:21] *** Quits: aphorise (aphorise@82-75-255-36.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[01:10:35] <wiscii> no, i am trying to deliberately trigger -e with a broken command
[01:10:47] <larryv> sh# set -e; [ a -eq 1 ]; echo done
[01:10:48] <shbot> larryv: sh: 1: [: Illegal number: a
[01:10:49] <shbot> larryv: (shell exited with 2)
[01:11:18] <Blondie101010> some people never learn
[01:11:31] <wiscii> mine is not doing so, the error is there but the script continues
[01:11:38] *** Joins: aphorise (~aphorise@82-75-255-36.cable.dynamic.v4.ziggo.nl)
[01:11:49] <Blondie101010> well fix it first
[01:11:52] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[01:12:24] <wiscii> this is deliberate
[01:12:30] <wiscii> !0e
[01:12:30] <larryv> what's the context
[01:12:34] <wiscii> !-e
[01:12:34] <greybot> "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
[01:12:36] <Blondie101010> you want bugs?
[01:12:41] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[01:12:50] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[01:13:57] *** Joins: dre (~dre@2001:8003:c932:c301:3356:3f6e:5d90:d014)
[01:13:58] <wiscii> i want to *know* that my script does not require -e, or at least have some measure i can take to test it with -e
[01:14:21] <wiscii> but if -e is not doing what i expect then i can't test for it
[01:14:28] <larryv> your expectation is wrong
[01:14:35] <wiscii> so i need to reliably trigger -e
[01:14:37] <larryv> and it's hard to explain why without seeing some context
[01:14:44] <Blondie101010> don't include bugs to cause it to error out
[01:14:48] <Blondie101010> that is ridiculous
[01:14:56] <Blondie101010> write proper code with the correct conditions
[01:15:11] <wiscii> when you test something, do you only feed it data that you know works .. ?
[01:15:26] <Blondie101010> no, but the code itself MUST be good
[01:15:30] <Blondie101010> come on!
[01:15:48] <wiscii> i'm actually trying to understand -e better and not simply ignore it
[01:15:57] <larryv> i mean
[01:15:59] <larryv> you're not
[01:16:03] <larryv> you're just saying "it doesn't work"
[01:16:05] <wiscii> it is not important code, just something i want to do
[01:16:08] <Blondie101010> no need to write bad code to test -e
[01:16:49] <wiscii> when i say "it doesn't work" (which I did not say) i mean, my results differ to what is expected
[01:17:04] <Blondie101010> show a 4-5 line sample script
[01:17:18] <Blondie101010> then if there are obvious issues with it, be open to fix it
[01:17:22] <wiscii> sure, hold on
[01:19:04] <Blondie101010> # echo before; (set -e true; echo 'still running'; false; echo 'invisible'); echo after
[01:19:05] <shbot> Blondie101010: before
[01:19:06] <shbot> Blondie101010: still running
[01:19:06] <shbot> Blondie101010: after
[01:19:16] <Blondie101010> that's how -e works
[01:19:28] <Blondie101010> but typo
[01:19:45] <Blondie101010> # echo before; (set -e; true; echo 'still running'; false; echo 'invisible'); echo after
[01:19:46] <shbot> Blondie101010: before
[01:19:46] <shbot> Blondie101010: still running
[01:19:46] <shbot> Blondie101010: after
[01:20:11] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[01:21:13] *** Joins: bkhl (~bkhl@user/bkhl)
[01:21:20] <wiscii> https://paste.centos.org/view/aee78612
[01:22:10] <Blondie101010> sure that works
[01:22:42] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[01:23:34] <wiscii> i must be doing something weird then ..
[01:23:54] <Blondie101010> well I see no point in including the error message that cat gives but otherwise it's ok
[01:24:17] *** Quits: jkwnki (~jkwnki@p4fedb869.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:24:32] <Blondie101010> therefore your error message is a tad misleading: cat: this file does not exist: No such file or directory
[01:24:35] <wiscii> thats not an error message, that means that `cat $foo` did not cause the script to exit immediately
[01:24:50] <Blondie101010> it does
[01:24:53] <wiscii> oh sorry, crossed wires
[01:24:59] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9f6:3f45:7ebe:42bd)
[01:25:26] <wiscii> foo= blah .. not not really matter so long as cat fails and triggers -e
[01:25:30] <larryv> wiscii: you're run this script exactly as you pasted it, and it prints "no error"?
[01:25:34] <larryv> *you're running
[01:25:41] <wiscii> let me see..
[01:26:17] <Blondie101010> give your variables meaningful names and use relevant test file names
[01:26:37] *** Joins: totenkoph (~scythe@user/totenkoph)
[01:26:48] <Blondie101010> so that when you think of building the next step or troubleshooting, you know what you're looking at
[01:27:10] <Blondie101010> $foo is rarely useful
[01:27:47] <Blondie101010> and you could pass parameters instead of relying on global variables
[01:28:26] <wiscii> ok, so that test does do what i expect, so i must be doing something else in my real script, which is why i need to test this sort of thing ..
[01:29:00] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:30:27] <Blondie101010> oh but you're redefining `test`!
[01:30:48] <Blondie101010> use better names
[01:31:05] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9f6:3f45:7ebe:42bd) (Ping timeout: 256 seconds)
[01:31:46] <Blondie101010> # (set -e;   show() { cat "$1"; };   file="filename.txt"; show $file;   echo "no error")
[01:31:48] <shbot> Blondie101010: cat: cannot open filename.txt: No such file or directory
[01:31:58] <wiscii> yeah, like `redefining` example
[01:32:00] *** Joins: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net)
[01:34:38] *** Quits: H3dn1ng (~H3dn1ng@185.213.154.238) (Quit: leaving)
[01:34:55] *** Joins: docmax (~docmax@dynamic-077-010-151-238.77.10.pool.telefonica.de)
[01:39:10] *** Quits: curvv (~quetzlcoa@user/curvv) (Read error: Connection reset by peer)
[01:41:27] <wiscii> huh, tip of the day: Never use the word "set" in your comments ..
[01:42:12] <Blondie101010> please demonstrate
[01:47:44] <wiscii> it's ok, i refined my regex ;-)
[01:48:06] *** Joins: skraito (~skraito@user/skraito)
[01:48:17] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[01:50:18] <transhumanist> this might be nice: https://scitechdaily.com/game-changing-carbon-capture-technology-to-remove-99-of-co2-from-air/   , but price is 6x of current methods
[01:50:33] <transhumanist> oops wrong channel
[01:50:45] *** Quits: kilitary (~kilitary@188.68.215.221) (Read error: Connection reset by peer)
[01:51:11] *** Joins: malina (~malina@user/malina)
[01:52:01] *** Joins: kilitary (~kilitary@188.242.105.134)
[01:52:27] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[01:52:52] *** Quits: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net) (Quit: Konversation terminated!)
[01:53:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:54:15] <wiscii> Blondie101010: i have a much better example: https://paste.centos.org/view/8226278c
[01:54:41] <wiscii> that one seems to do something weird
[01:54:56] *** Quits: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de) (Quit: WeeChat 3.4)
[01:55:23] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:55:58] <Blondie101010> what output do you get?
[01:56:46] <e36freak> stop overwriting the test command
[01:57:03] <wiscii> sorry, i'll do that in future
[01:57:30] <wiscii> $ ./debug/test
[01:57:32] <wiscii> cat: moo: No such file or directory
[01:57:34] <wiscii> I'm melting.. Finally caught the error
[01:57:34] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[01:57:49] <Blondie101010> isn't that what you want?
[01:57:54] <e36freak> that looks correct
[01:58:06] <e36freak> set -e only triggers when exit status isn't handled
[01:58:08] <wiscii> oh ..
[01:58:12] *** Joins: unop (~unop@195.91.14.193)
[01:58:25] <wiscii> you see how annoying set -e is !!!!!
[01:58:25] <e36freak> you wouldn't want your script to fail when if ((bool)); then # and bool is false, would you?
[01:58:47] <wiscii> yes, i completely see my misunderstanding :)
[01:58:55] <e36freak> cmd1 || cmd2, the whole thing is one expression
[01:59:07] <e36freak> if both cmd1 and cmd2 return >0, then yes, it'll fail
[01:59:17] <e36freak> but if cmd1 exits > 0 and cmd2 succeeds, the whole expression is true
[01:59:21] <e36freak> therefore set -e won't fail
[01:59:30] <e36freak> or rather won't trigger
[01:59:42] <wiscii> it really is tricky
[01:59:44] <Blondie101010> good point
[02:00:01] <Blondie101010> no, you're overthinking it
[02:00:01] <e36freak> that's the basics of errexit, doesn't even start to get into the buginess and weirdness
[02:00:31] *** Joins: Masklin (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[02:00:46] <Blondie101010> don't like it... only use it in special cases (like flock)
[02:00:52] <e36freak> i don't generally use it at all
[02:01:15] <e36freak> imo the only place it makes sense is when you have a whole bunch of sequential commands with no flow constructs or conditionals and you just want to make sure none of them fail
[02:01:41] <wiscii> i'm not going to use it, that decision is made already.  but i would like to understand it better and that lesson took me a long way! thank you very much
[02:01:47] <e36freak> basically as an alternative to chaining them all with &&
[02:01:53] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[02:01:54] *** Joins: betong (shellowner@shell.xshellz.com)
[02:02:08] *** Joins: unop (~unop@195.91.14.193)
[02:02:51] <wiscii> e36freak: yes, i see what you mean, if it's a list of commands like that
[02:03:18] <e36freak> but that's a pretty rare thing in real life
[02:03:39] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[02:04:00] <wiscii> FTR: I spotted an unexpected and unhandled error in my script, lucky it was not important. but then the rabbit hole opened up before me ... down i go!
[02:04:03] *** Joins: bkhl (~bkhl@user/bkhl)
[02:04:20] <Earnestly> Is there much difference in performance between: cat file and printf '%s\n' "$(< file)"
[02:04:36] <e36freak> benchmark it and see?
[02:04:39] <Earnestly> damnit
[02:04:42] <Blondie101010> "much" NOPE
[02:04:45] <Earnestly> That means I have to do stuff, okay
[02:04:55] <Blondie101010> doesn't deserve a benchmark
[02:06:21] <e36freak> i show about a 20% difference here
[02:06:32] <e36freak> but how much are you really doing that
[02:06:36] <Blondie101010> how do you test it?
[02:06:41] <e36freak> a for loop and time
[02:07:43] <Earnestly> e36freak: https://0x0.st/oXX4.txt
[02:08:23] <Blondie101010> neat
[02:08:25] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:08:28] <Earnestly> I wondered because cat forks, $() subshells.  Perhaps $(< was special, clever somehow
[02:08:34] <e36freak> you gotta do it a lot of times
[02:08:38] <Blondie101010> so cat is slow :|
[02:08:39] <e36freak> once isn't really meaningful
[02:08:48] <Earnestly> I did it 700 times each
[02:08:50] <e36freak> i show the printf about 20% faster than cat for 10k iterations
[02:08:56] <Earnestly> 10k hmm
[02:09:01] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 240 seconds)
[02:09:26] <e36freak> 1k got me the same percentage
[02:09:35] <e36freak> just added a 0 out of curiousity
[02:09:37] *** Quits: betong (shellowner@shell.xshellz.com) (K-Lined)
[02:09:37] *** Quits: ccl (ccl@user/ccl) (K-Lined)
[02:09:42] <Earnestly>  'printf %s\\n "$(< README)' ran
[02:09:44] <Earnestly>     4.31 Â± 9.52 times faster than 'cat README'
[02:09:49] <Earnestly> That's 10k
[02:09:58] <Blondie101010> I bet the larger the file, the smaller the difference would be
[02:10:03] <e36freak> probably
[02:10:14] <e36freak> i was using a 139 line file
[02:10:19] <e36freak> just something i found in my home dir
[02:10:20] *** Joins: betong (shellowner@shell.xshellz.com)
[02:10:25] <Earnestly> Yes, ideally I should have used an empty file to rule it out
[02:10:41] <wiscii> for maximum accuracy you want a single byte "file"
[02:10:42] <e36freak> cat's fork/exec is gonna be the expensive bit
[02:10:55] *** Quits: betong (shellowner@shell.xshellz.com) (K-Lined)
[02:11:07] * Blondie101010 nods
[02:11:08] <e36freak> whereas $(< shouldn't have to fork/exec, just open the file and read it
[02:11:10] <Earnestly> Naturally, wondered about how $(< ) compares as subshell(?)
[02:11:14] <Earnestly> Hm
[02:11:27] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[02:11:36] <e36freak> you've got memory allocation stuff going on, which is probably the slowest part of that
[02:11:39] <e36freak> other than the I/O
[02:11:48] <e36freak> but I/O shouldn't change between the two
[02:11:52] <Earnestly> This is fair point, cat wouldn't do allocation
[02:12:19] <Earnestly> Hmm
[02:12:20] <Blondie101010> the shell and cat are both in user space
[02:12:47] <Blondie101010> they call standard library commands to do their tasks
[02:12:49] <phy1729> A kernel space shell would be terrifying
[02:12:51] <Earnestly> # v=$(< .bashrc); print "${#v}"; wc -c < .bashrc
[02:12:52] <shbot> Earnestly: 633
[02:12:53] <shbot> Earnestly: 634
[02:13:00] <e36freak> phy1729: terrifyingly *awesome*
[02:13:12] <Earnestly> ebpf
[02:13:14] <Earnestly> shell
[02:13:16] <e36freak> Earnestly: stripped trailing newline
[02:13:28] <Earnestly> Yeah I wasn't going to question it
[02:13:38] <Earnestly> Just mucking about because I don't normally have $(<
[02:13:53] <Earnestly> I wish there was a wc -l that bash could do now
[02:14:14] <phy1729> mapfile?
[02:14:27] <Earnestly> This is true point
[02:15:07] <Earnestly> # mapfile -t v < .bashrc; print "${#v[@]}"
[02:15:09] <shbot> Earnestly: 31
[02:15:47] <Earnestly> I am glad print builtin is enabled, I use it often in zsh
[02:17:03] <Blondie101010> well mapfile may not be desirable in case of larger files
[02:18:18] <phy1729> while read -r _; do (( lines++ )); done
[02:18:40] <neshpion> wc -l
[02:18:51] <phy1729> We're going for builtins
[02:19:05] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[02:19:41] *** Joins: Kyuzo68 (~Kyuzo@host-79-51-239-139.retail.telecomitalia.it)
[02:21:34] *** Quits: Alternity (~Alternity@user/alternity) (Read error: Connection reset by peer)
[02:21:38] <wiscii> i just godda say, now that i see that about set -e, i really get the point about why "people using it is broken" because it really is a trick (probably logically brokken) beast
[02:22:13] *** Joins: Alternity (~Alternity@user/alternity)
[02:22:17] <wiscii> if you really know how to use it then sure but it is not a get out of jail card, free or not
[02:22:20] <Blondie101010> you're overthinking it...  it does what it's supposed to
[02:22:26] <Blondie101010> don't expect it to do magic
[02:22:49] <wiscii> yes, that is the point. i fully misunderstood what it actually does
[02:23:01] <wiscii> i expect i still don't get it
[02:23:03] <Earnestly> It is very magical and I will honestly say that I don't even know all the cases where -e needs careful attention so that it doesn't bite me
[02:23:24] <Blondie101010> if a full command returns non 0, the it exits
[02:23:30] <phy1729> I don't think I could get 100% on the FAQ quiz
[02:23:33] <Blondie101010> s/the/then/
[02:23:37] <Earnestly> phy1729: indeed
[02:23:41] <phy1729> Even after having taken it before
[02:23:54] <phy1729> Blondie101010: have you done the FAQ quiz?
[02:24:03] <Blondie101010> link?
[02:24:12] <phy1729> !faq -e
[02:24:12] <greybot> https://mywiki.wooledge.org/BashFAQ/105 -- Why doesn't set -e (or set -o errexit, or trap ERR) do what I expected?
[02:24:17] <Earnestly> I realised the fractal darkness of that feature and just expunged it from my mind
[02:25:58] <wiscii> i'm not keen on expunging my mind .. i'll probably wipe something i like out but i really get the point now, even if i don't get -e
[02:30:06] *** Joins: ChmEarl (~chmearl@user/chmearl)
[02:30:12] <Earnestly> # printf -v prompt '[%d] %s' 42 'The Restaurant at the End of the Universe'; printf '%s\ns\n' "$prompt" "${prompt//?/=}"
[02:30:20] <shbot> Earnestly: [42] The Restaurant at the End of the Universe
[02:30:20] <shbot> Earnestly: s
[02:30:20] <shbot> Earnestly: and so forth... (but now the pastebin is sick of me)
[02:31:03] <Earnestly> Oh, don't need '%s\n%s\n', just loop instead over %s\n
[02:31:22] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[02:33:11] *** Quits: nyjets (~zz@2001:8003:1612:d500:586:c933:946e:f1fb) (Quit: WeeChat 1.1.1)
[02:33:50] <Earnestly> Could add "$(< file)" at the end of that.  \o/
[02:33:56] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[02:39:35] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[02:39:51] *** Quits: emad (~emad@156.214.198.176) (Quit: Leaving)
[02:42:16] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[02:44:10] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[02:44:27] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[02:44:29] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:45:00] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[02:46:10] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[02:46:42] *** Quits: Kyuzo68 (~Kyuzo@host-79-51-239-139.retail.telecomitalia.it) (Quit: Konversation terminated!)
[02:47:26] <wiscii> i would contend that `man sh` for `set -e` is so poor as to be on the verge of "technically innacurate"
[02:48:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[02:48:22] <wiscii> probly have to do pub.foo
[02:49:37] <Blondie101010> no, every edge case comes from what returns non zero, not set -e
[02:49:41] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:49:48] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[02:50:28] <vancz> ok back to scratching my head about redirections again, so
[02:50:45] <vancz> how do i visualize this? i have at least two possibilities
[02:51:09] <Blondie101010> don't know your case, but keep it simple
[02:51:12] <xayto>  /quit
[02:51:20] <vancz> one of them is: the standard streams have two ends, bash has one end, and the process has the other end
[02:51:40] <vancz> so to visualize whats connected to what you can draw 2x3 columns and draw lines between them
[02:51:55] <vancz> is that reasonable?
[02:52:23] <vancz> or does this work a different way
[02:52:26] <wiscii> 3whs
[02:52:32] <wiscii> !3whs
[02:52:32] <Blondie101010> I'd consider it much harder to describe in writing than just thinking it
[02:53:04] <vancz> because i asked for something to test my understanding earlier, and i dont want to spoil the answer, its just clear that i still dont understand something
[02:53:23] <Blondie101010> give a simple demonstration of the problem
[02:53:34] <vancz> one sec, im working on it
[02:54:11] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[02:54:18] <vancz> if you write 1>&2 does that mean put into the stdout slot what is currently in the stderr slot?
[02:54:32] <vancz> s/put/copy
[02:54:46] *** Joins: unop (~unop@195.91.14.193)
[02:54:51] <vancz> is 1 and 2 the name for a slot or the actual thing?
[02:55:02] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[02:55:02] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[02:55:17] <Blondie101010> the fd number
[02:55:28] <Blondie101010> open()'s return value
[02:55:35] <vancz> right, in theory, i have some idea of how fds work but apparently not eough
[02:55:37] <vancz> *enough
[02:55:49] <Blondie101010> they are created sequentially
[02:56:04] <vancz> open gives you a number and then you use libc to read() and write() from them and libc calls the appropriate syscalls or whatever
[02:56:18] <vancz> number/ FILE* object, whatever
[02:56:28] <Blondie101010> bash does all that
[02:56:37] <vancz> there's an FD number somewhere in there that gets passed as the system call argument
[02:56:41] <vancz> right
[02:57:27] <vancz> so i consider the fd number in the child process one end of the pipe
[02:57:45] <vancz> i guess bash gets the other end
[02:57:47] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[02:57:50] <vancz> thats all fine and dandy
[02:57:52] *** Joins: zebrag (~chris@user/zebrag)
[02:57:55] <Blondie101010> # (echo 'message'; echo 'error' >&2)|grep message
[02:57:57] <shbot> Blondie101010: error
[02:57:57] <shbot> Blondie101010: message
[02:58:00] *** Quits: xayto (~xayto@cpc69403-oxfd27-2-0-cust296.4-3.cable.virginm.net) (Quit: ZNC - https://znc.in)
[02:58:19] *** Quits: enoq (~enoq@194-208-178-35.lampert.tv) (Quit: enoq)
[02:58:20] <Blondie101010> note the first line is not going through grep
[02:58:24] <vancz> but presumably that means bash has to then internally set up connections between its fds from the process and its fds to your screen / other internal fds
[02:58:39] <Blondie101010> yes, it does
[02:59:22] <vancz> re: grep, yeah that superficially makes sense
[03:00:12] *** Quits: junebug (~junebug@2600:1700:3db0:2540:4fb9:6e37:792b:8bf0) (Remote host closed the connection)
[03:00:13] <vancz> the difficulty is when you I have more than one interacting redirection
[03:00:17] <vancz> *when I
[03:00:36] *** Joins: junebug (~junebug@2600:1700:3db0:2540:f4ec:8761:4b5a:58b8)
[03:00:58] <Blondie101010> sometimes you might want the opposite: (echo 'error' >&2) 2>&1)|grep message
[03:01:13] <vancz> If I have say, 1>&2 2>&3- , that looks to me like it says duplicate 2 to 1 and then move 2 to 3 and then close 2
[03:01:21] <vancz> which means
[03:01:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:01:37] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[03:01:54] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[03:02:47] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[03:03:36] <vancz> ok I think the problem is I cant figure out given "bash has to then internally set up connections between its fds from the process and its fds to your screen / other internal fds", if the numbers mean the fd in bash coming from the child or going to the screen or what
[03:03:56] <vancz> is it a value or a box damnit xD
[03:03:57] <Blondie101010> I visualize it as simili-pointers or links
[03:04:01] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 256 seconds)
[03:04:36] *** Joins: Adoi (~Adoi@user/adoi)
[03:04:38] <vancz> 1>&2 2>&3- appears to mean duplicate 2 to 1 and move 2 to 3 then close 2
[03:04:42] *** Quits: wurstwasser_2 (~frank.hol@aftr-62-216-210-19.dynamic.mnet-online.de) (Remote host closed the connection)
[03:04:48] <Blondie101010> the first part is wrong
[03:04:55] <vancz> phrasing
[03:04:58] <vancz> its hard to talk about
[03:05:29] <vancz> 1>&2 means duplicate the file descriptor 2 to 1
[03:05:47] <vancz> so the data going to 1 ends up in 2
[03:05:58] <vancz> but note i deliberately didnt call 1 a file descriptor
[03:06:16] <vancz> is 1 a "slot for a file descriptor" or an actual file descriptor?
[03:06:32] <Celmor[m]> how would I access a specific argument by index, something like $3 where 3 would be in $index (not like $$4 is gonna work)?
[03:06:37] <vancz> is 2 an actual file descriptor, or a slot for a file descritor which currently happens to have the value 2?
[03:07:10] <Blondie101010> vancz:  learn C
[03:07:23] <akoana> vancz: this might be helpful: https://wiki.bash-hackers.org/howto/redirection_tutorial
[03:07:31] <Blondie101010> file descriptors are numbers representing the stream
[03:07:46] <Blondie101010> it is mapped in kernel
[03:08:34] <vancz> i know that much
[03:08:43] <vancz> but maybe also thats how much I know
[03:09:57] *** Joins: noarb (~noarb@user/noarb)
[03:11:12] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[03:12:04] <wiscii> # set -e; borked () { return 1; }; borked; printf "Happy days\n"; exit 0
[03:12:06] <shbot> wiscii: (shell exited with 1)
[03:12:24] *** Joins: at_work (~at_work@user/at-work/x-5282331)
[03:12:56] <wiscii> # set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:12:58] <shbot> wiscii: (shell exited with 1)
[03:13:37] *** Quits: john_johnk (~Thunderbi@232.58.140.77.rev.sfr.net) (Ping timeout: 240 seconds)
[03:13:52] <wiscii> is there such code that will reliably trigger -e to exit ?
[03:14:02] *** Joins: Kyuzo68 (~Kyuzo@host-79-51-239-139.retail.telecomitalia.it)
[03:14:02] <wiscii> yes, see above
[03:14:33] *** Joins: xayto (~xayto@cpc69403-oxfd27-2-0-cust296.4-3.cable.virginm.net)
[03:14:46] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:14:49] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:14:50] <wiscii> !learn trigger-e set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:14:51] <greybot> OK, wiscii
[03:15:00] <wiscii> !trigger-e
[03:15:00] <greybot> set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:15:02] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:26] <wiscii> !learn trigger-e # set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:15:27] <greybot> trigger-e is already defined: set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:15:40] <wiscii> !forget trigger-e
[03:15:40] <greybot> OK, wiscii
[03:15:43] <wiscii> !learn trigger-e # set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:15:43] <greybot> OK, wiscii
[03:15:47] <wiscii> !trigger-e
[03:15:47] <greybot> # set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:15:49] <shbot> greybot: (shell exited with 1)
[03:15:56] <wiscii> yay :)
[03:16:09] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:16:23] <wiscii> this is the matrix !
[03:17:23] *** Joins: justanotheruser (~justanoth@gateway/tor-sasl/justanotheruser)
[03:18:20] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:18:41] <justanotheruser> I have a command which outputs a list of numbers. I would like that list of numbers to be put into a queue and piped back into the program recursively until I get the concatenated full output. Is this reasonable in bash, or should I use a different language?
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:11] <wiscii> godda go with .. go wth what yah know
[03:20:24] <Blondie101010> justanotheruser: your description is too focused on your implementation
[03:20:54] <Blondie101010> you have a list of numbers, and you want it output how?  reverse order or how else?
[03:21:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:21:58] <justanotheruser> Blondie101010: I have a command that queries a relational database for nodes IDs which map to the input node ID
[03:22:30] <Blondie101010> all we care about at this point is the output itself
[03:22:46] <justanotheruser> I probably should just try to implement the recursion in sql
[03:23:04] <Blondie101010> what recursion are you talking about?
[03:23:56] <justanotheruser> I am recursively finding children in a tree via a RDB
[03:23:58] <Blondie101010> I suspect you just want basic formatting, but you're not very clear
[03:24:18] <Blondie101010> you said the command output a list of numbers
[03:24:22] <justanotheruser> yes, the node IDs
[03:24:40] <Blondie101010> and you need to do more queries with each of those?
[03:25:16] <justanotheruser> yes, but I think it's best to just do this in sql on second though
[03:25:18] <justanotheruser> t
[03:25:26] <Blondie101010> it obviously is
[03:25:31] <Blondie101010> it's a single SQL statement
[03:26:22] *** Joins: saline_retry_ (auk@gateway/vpn/protonvpn/auk)
[03:26:45] <wiscii> if you think 'outside' The Box!
[03:26:55] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 256 seconds)
[03:27:04] <wiscii> or is that 'inside' ?
[03:27:07] *** Joins: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net)
[03:27:28] <Blondie101010> in this case, it's simply better
[03:27:52] <wiscii> very much so
[03:30:02] *** Quits: waxfire6 (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:17] <justanotheruser> hmm, now I remember why I didn't do it in the first place. My RDBMS doesn't have documented recursion support
[03:30:37] *** Joins: waxfire6 (~waxfire@65.119.2.240)
[03:33:32] <wiscii> i can see why ppl get wrangled at -e
[03:34:25] *** saline_retry_ is now known as auk
[03:34:40] <wiscii> never more
[03:38:13] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[03:38:29] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[03:40:28] <akoana> justanotheruser: what rdbms is that?
[03:43:43] *** Quits: kilitary (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[03:45:02] *** Joins: kilitary (~kilitary@188.242.105.134)
[03:47:33] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[03:51:05] *** Joins: Dotz0cat (~Dotz0cat@h124.175.40.162.dynamic.ip.windstream.net)
[03:53:45] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:54:20] <wiscii> !forget trigger-e
[03:54:20] <greybot> OK, wiscii
[03:55:13] <justanotheruser> akoana: dolt
[03:55:41] <wiscii> !learn trigger-e # #/bin/sh; set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:55:41] <greybot> OK, wiscii
[03:55:49] <wiscii> !trigger-e
[03:55:49] <greybot> # #/bin/sh; set -e; borked () { return 1; }; borked; printf "Happy days\n"
[03:55:51] <shbot> greybot: no output
[03:56:39] <wiscii> sorry for that noise
[03:57:06] <pj> Certainly there are more obscure example of -e making a mess.
[03:57:20] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:57:32] <pj> I would expect borked to stop the script in the above case.
[03:57:43] <wiscii> pj: the example is only intended to trigger -e, not explain it
[03:58:00] * pj nods
[03:58:08] <wiscii> pj borked does stop the script ..
[03:58:40] <wiscii> hense no "Happy days"
[03:59:56] <kurahaupo> # set -e ; unborked() { false ; echo Unborked "$@" ; } ; if unborked A ; then unborked B ; fi
[03:59:57] <shbot> kurahaupo: Unborked A
[03:59:57] <shbot> kurahaupo: (shell exited with 1)
[04:00:18] <kurahaupo> # set -e ; unborked() { false ; echo Unborked "$@" ; } ; if unborked A ; then unborked B ; fi || :
[04:00:19] <shbot> kurahaupo: Unborked A
[04:00:20] <shbot> kurahaupo: Unborked B
[04:00:39] *** Quits: apos (~apos@gateway/tor-sasl/apos) (Ping timeout: 276 seconds)
[04:00:39] <kurahaupo> ^^^ why set -e is insane
[04:01:18] <wiscii> that's the point of pipefail in bash , right ?
[04:01:26] <kurahaupo> nope
[04:01:40] <wiscii> OMGOMG:
[04:01:56] <wiscii> help me, i'm drowning lol
[04:02:21] <kurahaupo> pipefail means that if any component of a pipe returns nonzero, then that's used as the exit status of the pipe, rather than just taking the exit status of the right-most component
[04:02:49] <wiscii> ok
[04:03:12] <wiscii> but your example does use `if` and that is explicitly alloowed
[04:03:13] <Blondie101010> because it's the complete command that matters
[04:04:01] <wiscii> fi || : .. is throwing me a curve-ball though !!
[04:04:15] <Blondie101010> and `echo` returns 0 under normal conditions
[04:04:32] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[04:04:43] <wiscii> i do my best to avoid echo
[04:05:02] <Blondie101010> bahh
[04:05:09] <wiscii> rofl
[04:05:18] <wiscii> whassamatta ?
[04:05:18] <kurahaupo> # shopt -s pipefail ; exit 10 | exit 11 | exit 12 | exit 0 ; echo $?
[04:05:20] <shbot> kurahaupo: bash: shopt: pipefail: invalid shell option name
[04:05:20] <shbot> kurahaupo: 0
[04:05:33] <kurahaupo> # set -o pipefail ; exit 10 | exit 11 | exit 12 | exit 0 ; echo $?
[04:05:34] <shbot> kurahaupo: 12
[04:05:39] <larryv> !forget trigger-e
[04:05:39] <greybot> OK, larryv
[04:05:47] *** Joins: c2a1 (~c2a1@2607:fb90:177a:3e76:d90f:6fd5:4245:c25b)
[04:05:56] <wiscii> dang
[04:06:33] <c2a1> Hi why is ( an unexpected operator when I try using it to encapsulate an -e
[04:06:47] <wiscii> omfg ^
[04:07:12] <c2a1> *-a
[04:07:24] <larryv> c2a1: example?
[04:07:28] <c2a1> In an if statement
[04:07:28] *** Joins: apos (~apos@gateway/tor-sasl/apos)
[04:07:55] <kurahaupo> c2a1: Can you give a complete example?
[04:08:07] <c2a1> if [ ! ( -a $FILE ) ]
[04:08:22] <c2a1> And a then, an echo, and a fi
[04:08:38] <kurahaupo> c2a1: [ is the name of a simple command, and ( is a reserved syntax character. You probably want [[ instead of [
[04:09:16] <c2a1> Huh. Why does tdlp's tutorial not mention this
[04:09:17] <kurahaupo> c2a1: It's not allowed for the same reason that you can't write Â« mycmd ( blah ) Â»
[04:09:24] <kurahaupo> !tldp
[04:09:24] <greybot> The TLDP bash guides are outdated, and in some cases just plain wrong. There's a reason they are not in the topic.
[04:09:29] <c2a1> *tldp
[04:09:37] <c2a1> Huh
[04:09:39] <kurahaupo> c2a1: In short, tldp is crap
[04:10:03] <kurahaupo> "why" is because the author is a control freak who refuses to accept suggestions for improvements
[04:10:03] <c2a1> So whoever wrote that was talking out of their ass
[04:10:46] <c2a1> Ah.
[04:10:51] <malina> makes me think of canadian comedian pretending to be detective on film
[04:10:55] <kurahaupo> c2a1: That said, why would you write Â« mycmd ( stuff ) Â» ?
[04:11:05] *** Quits: Kyuzo68 (~Kyuzo@host-79-51-239-139.retail.telecomitalia.it) (Quit: Konversation terminated!)
[04:11:23] *** Joins: A|an (~Alan@173.218.175.171)
[04:11:34] <c2a1> Kurahaupo, wat
[04:11:42] <c2a1> I'm not
[04:11:51] <kurahaupo> c2a1: You can't use ( ) on the parameters of ANY command, not just [
[04:12:02] *** Quits: Kruppt (~Kruppt@50-111-49-4.drhm.nc.frontiernet.net) (Quit: Leaving)
[04:12:08] <c2a1> I know
[04:12:10] <kurahaupo> So it's understandable that it's not mentioned in the descriptio of [
[04:12:33] <wiscii> malina: i think i know the one DL
[04:12:33] <c2a1> The description on tldp?
[04:12:48] <Blondie101010> not the point
[04:12:49] <kurahaupo> What needs to be hammered home is that "[" is a command, not part of the syntax for "if"
[04:13:03] <malina> wiscii, ye I forgot his name lol. he's popular but apparently a proper arsehole irl. emr pet detective, green face thing
[04:13:17] <malina> anyway, pretty sure he did a scene with 'talking out of his ass'
[04:13:25] <kurahaupo> Once one understands that "[" is an ordinary command, it should be obvious that unquoted brackets are not allowed.
[04:13:34] <wiscii> malina: dennis leary
[04:13:44] <malina> possibly, don't recognise the name htough
[04:13:50] <kurahaupo> c2a1: where did your example code come from?
[04:13:50] <malina> so no. hmm
[04:14:07] <c2a1> https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
[04:14:14] <c2a1> Section 7-2
[04:14:14] <malina> he paints to battle his depression which is basically that he keeps giving women his std's or something but anyay
[04:14:21] <c2a1> I wrote that code
[04:14:22] <wiscii> malina: there are others but for this it is OT :)
[04:14:40] <malina> ya
[04:14:41] <larryv> c2a1: if you were to use parentheses with [ ... ], they'd have to be quoted. like [ \( blah \) ] or [ '(' blah ')' ]
[04:14:54] <c2a1> His guide says it is theoretically possible to do what I did.
[04:15:21] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[04:15:24] <c2a1> Then his guide should mention that.
[04:15:24] <larryv> that said, POSIX considers test parens obsolescent
[04:15:34] <kurahaupo> c2a1: The syntax accepted by the command may need to be modified so that your shell interprets it correctly. That's a general truism
[04:15:44] <c2a1> It literally has it in table 7-2 that it's acceptable syntax.
[04:16:03] <kurahaupo> c2a1: it's acceptable syntax TO THE "[" COMMAND, not to the shell
[04:16:18] <c2a1> Well i'm using the [ command
[04:16:21] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[04:16:32] <c2a1> It still doesn't work. Reread my code.
[04:16:37] <kurahaupo> c2a1: In order to invoke the command [ ( E ) ], you have to write [ '(' E ')' ] in the shell
[04:17:01] <c2a1> So his guide is straight up wrong
[04:17:02] <kurahaupo> c2a1: Just the same as when you use ( ) with the "find" command
[04:17:12] <Helmholtz> how to replace 3rd word of the second line of a file (space separated)
[04:17:29] <kurahaupo> c2a1: That depends; does the page claim to be describing the [ command, or the shell?
[04:17:36] <wiscii> i told you, people see brackets all sorts of different ways
[04:17:40] <c2a1> Read the page
[04:17:41] *** Quits: Alternity (~Alternity@user/alternity) (Ping timeout: 256 seconds)
[04:18:00] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[04:18:15] <c2a1> kurahaupo: I guess I can say both.
[04:18:18] <kurahaupo> c2a1: "Introduction to 'if'" - yes, the pages is just plain wrong
[04:18:39] <c2a1> Or neither. I don't think his page claims to be describing anything.
[04:18:49] <larryv> not sure i'd call it "wrong" but i'd say it's pretty unhelpful
[04:18:52] <kurahaupo> 'if' is a special syntactic element to the shell; it cannot be an ordinary command, therefore the page must be talking about the shell
[04:18:53] <larryv> at least none of the examples have unquoted ( )
[04:19:23] <c2a1> larryv: wat
[04:19:38] <c2a1> There is literally an example in table 7-2
[04:19:56] <larryv> that doesn't look like an example to me.
[04:20:04] <c2a1> Lolol
[04:20:06] *** Joins: docmax_ (~docmax@dynamic-077-010-075-169.77.10.pool.telefonica.de)
[04:20:08] <larryv> it is saying test accepts parens, which is true
[04:20:12] <kurahaupo> cr*p, it even suggests $[ ... ] for arithmetic in Bash. That's was obsolete in Bash version 2.0 which was THIRTY YEARS AGO
[04:20:25] <c2a1> Whatever you say man
[04:20:46] <c2a1> It is in my opinion factually incorrect
[04:21:13] <kurahaupo> c2a1: table 7.2 doesn't show examples, it shows the grammar description
[04:21:23] <larryv> your opinion about that page doesn't matter
[04:21:25] <larryv> neither does mine
[04:21:27] <c2a1> And misleading. And brings people into bash for no reason.
[04:21:34] <c2a1> *#bash
[04:21:46] <larryv> what matters is getting the thing to work in a shell, which involves quoting the parentheses
[04:21:48] <kurahaupo> c2a1: I completely agree however that it's a terrible page
[04:22:10] <c2a1> I never said it was terrible, the author made a mistake though.
[04:22:27] <wiscii> fix bugs with patches
[04:22:29] <c2a1> Like, a very important one.
[04:22:41] *** Quits: docmax (~docmax@dynamic-077-010-151-238.77.10.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:22:48] <c2a1> So I need to use quotes with (? That's strange
[04:22:57] <kurahaupo> Apart from anything else, the examples perpetuate the myth that '[' is a magical part of 'if'; it takes a keen eye to read the syntax description at the top of the page an keep it in mind while reading the whole of the rest of the page.
[04:23:39] <larryv> c2a1: it's not that strange. parentheses have meaning to both test and the shell, so you have to escape them so the shell doesn't try using them for its own purposes
[04:23:46] <kurahaupo> c2a1: '(' and ')' have to be quoted or escaped FOR ANY ORDINARY COMMAND
[04:23:47] <larryv> you have to do the same kind of thing with find(1)
[04:24:04] <kurahaupo> didn't I just say all of this about 10 minutes ago?
[04:24:08] <c2a1> Well that worked. Thank you all
[04:24:17] <kurahaupo> ![[ > c2a1
[04:24:17] <greybot> c2a1: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
[04:24:29] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 256 seconds)
[04:24:55] <kurahaupo> c2a1: and even if you're sticking with [ please avoid the -a and -o operators and the ( ) grouping
[04:25:55] <kurahaupo> c2a1: if you want to know more about the '[' command, it's a synonym for 'test', which is documented as "man test".
[04:27:25] <wiscii> larryv: why don't you like my trigger-e, it does trigger -e ?
[04:27:47] <larryv> not any more reliably than any other failing command
[04:27:54] *** Quits: kilitary (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[04:28:13] <wiscii> fair enough
[04:29:04] <larryv> it's all about context, as i think you discovered (i didn't read the scrollback that closely, lol)
[04:29:32] *** Quits: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk) (Quit: Leaving)
[04:29:58] *** Joins: Lebela (~Lebela@85.187.219.215)
[04:29:59] <wiscii> np, i asked, you answered, your answer was clear and precise, i'm guud :b
[04:30:04] <Lebela> hi
[04:30:16] <wiscii> lo
[04:30:21] <Lebela> my bash script is making fun of me - again - in the most ridiculous way ever
[04:30:24] <Lebela> https://dpaste.org/rmyk
[04:30:34] <kurahaupo> !check
[04:30:34] <checkbot> Lebela: Line 5: bar is referenced but not assigned. Line 5: -ne treats this as a variable. Use != to compare as string (or expand explicitly with $var). See https://shellcheck.net/?id=cb9234
[04:30:56] <Lebela> ha
[04:30:59] <Lebela> :)
[04:31:19] <Lebela> kurahaupo, I love this bot :)
[04:31:26] <kurahaupo> Lebela: unset variables are treated as 0 in numeric contexts, such as both sides of -ne
[04:31:27] <Lebela> thank you
[04:31:37] <Lebela> so, I go with !=
[04:31:59] <Lebela> different question:  Does bash have a syntax similar to Perl or even PHP  with  ? :
[04:32:02] <kurahaupo> Lebela: Use (( x == y )) if you want numeric comparison, or [[ $x = y ]] if you want string comparison. Avoid -eq and -ne
[04:32:22] <Lebela> e.g. in php:   $foo = ($i < 10) ? '1' : $bar;
[04:32:40] <Lebela> means:  if the statement inside () is true,  assign the number 1,  otherwise the variable $bar
[04:32:43] <kurahaupo> Lebela: Perl stole half its syntax from the shell, so that'd be "yes". But you have to guess which half
[04:33:11] <wiscii> ha!
[04:33:18] <Lebela> yeah, the similarities between Perl and Bash are striking
[04:33:27] <Lebela> the differences, however, lead to major slips in my work flow
[04:33:27] <kurahaupo> # bar=7 i=4 ; (( foo = i<10 ? 1 bar )) ; echo $foo
[04:33:29] <shbot> kurahaupo: bash: ((: foo = i<10 ? 1 bar : `:' expected for conditional expression (error token is "bar ")
[04:33:43] <kurahaupo> # bar=7 i=4 ; (( foo = i<10 ? 1 : bar )) ; echo $foo
[04:33:44] <shbot> kurahaupo: 1
[04:33:51] <kurahaupo> # bar=7 i=4 ; (( foo = i<1 ? 1 : bar )) ; echo $foo
[04:33:52] <shbot> kurahaupo: 7
[04:33:59] <kurahaupo> Lebela: like that ^^^ ?
[04:34:08] <Lebela> thank you kurahaupo !
[04:34:45] <kurahaupo> Lebela: in numeric context, any word that's doesn't start with a digit is taken as a variable containing a subexpression
[04:35:22] <Lebela> if [[ $FOO != "bar" ]]
[04:35:27] <Lebela> ^ this works for me.  Is this correct?
[04:35:31] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[04:35:47] <kurahaupo> Lebela: numeric context is enforced inside (( )), inside array[index] (unless the array is associative),
[04:35:58] <kurahaupo> Lebela: it works, but you've put the quotes on the wrong argument
[04:36:10] <vancz> emanuele6: thanks for confirming that several variants are the same thing
[04:36:15] <kurahaupo> Lebela: the quotes should  be around "$FOO" and not around "bar"
[04:36:19] <Lebela> kurahaupo, oh, bash wants the quotes around variables
[04:36:26] <Lebela> that's so weird
[04:36:50] <larryv> lol you must be new here
[04:36:51] <larryv> (shell)
[04:36:54] <kurahaupo> (Actually, in that case, neither side needs quotes, but the habit of putting them around literals and not around variables is a Very Bad Habit (tm)
[04:37:07] <c2a1> greybot: late but thanks
[04:37:14] <Lebela> kurahaupo, now it does not work any more
[04:37:29] <wiscii> larryv: "new" only just cuts it
[04:37:37] <kurahaupo> Lebela: in the shell, quote marks do NOT delimit a "string"
[04:37:38] <c2a1> kurahaupo: thanks
[04:37:49] <Lebela> if [[ "$FOO" != bar ]]
[04:38:00] <Lebela> the comparison fails now... I always go straight into the "else"
[04:38:36] <kurahaupo> # FOO=zot ; if [[ "$FOO" != bar ; then echo FOO is not bar ; else echo FOO is bar ; fi
[04:38:37] <shbot> kurahaupo: bash: syntax error in conditional expression: unexpected token `;'
[04:38:37] <shbot> kurahaupo: bash: syntax error near `;'
[04:38:44] <kurahaupo> # FOO=zot ; if [[ "$FOO" != bar ]] ; then echo FOO is not bar ; else echo FOO is bar ; fi
[04:38:45] <shbot> kurahaupo: FOO is not bar
[04:39:16] <Lebela> let me check with my script
[04:39:18] <larryv> wiscii: sometimes in other languages i catch myself starting to quote variable references. it's bad
[04:39:19] <kurahaupo> Lebela: has the value of FOO changed?
[04:39:44] <Lebela> https://dpaste.org/AfPp
[04:40:02] <Lebela> I run the script like this:    ./test bar
[04:40:08] <Lebela> and   ./test abc
[04:40:27] <kurahaupo> Lebela: is "test" the name of your file?
[04:40:36] <Lebela> yes
[04:41:36] <wiscii> # #/bin/sh; set -e; borked () { printf "Happy days\n"; return 1; }; borked; printf "Mr Wolf\n"
[04:41:37] <shbot> wiscii: no output
[04:41:40] <kurahaupo> Lebela: are you editing in Linux or Windows?
[04:41:44] <Lebela> Linux
[04:42:17] <Lebela> $ ./test bar
[04:42:17] <Lebela> bbbbbbbbbbbbb - - - bar
[04:42:40] <kurahaupo> Lebela: that's the right answer. What about the other test?
[04:43:32] <Lebela> kurahaupo, the bug was between the chair and the keyboard
[04:43:39] <kurahaupo> :-)
[04:43:40] <Lebela> kurahaupo, the script works
[04:43:44] <Lebela> sorry for bugging you
[04:44:00] <Lebela> is there a program on linux that I can use to debug my scripts?
[04:44:13] <kurahaupo> !-x
[04:44:13] <greybot> set -x (or ''bash -x myscript'') makes bash output the exact command that it will run after parsing and expansion. You can put ''set -x'' just before the code you want to debug (turn off with ''set +x''). To add more information, change PS4 first: eg. PS4='+($?) $BASH_SOURCE:$FUNCNAME:$LINENO:'
[04:44:15] <Lebela> my script is working, but I believe I messed up some "" quotes here and there
[04:44:28] <Lebela> kurahaupo, yes, set -x  is set
[04:44:31] <kurahaupo> Lebela: Have a look at the shellcheck report
[04:45:32] <kurahaupo> Incidentally, when I copied from that website, it had some weird unprintable characters on the two 'blank' lines
[04:45:41] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[04:45:49] *** Joins: luckiswithme (~luckiswit@149.167.139.31)
[04:46:07] <kurahaupo> \u200b
[04:47:18] *** Quits: luckiswithme (~luckiswit@149.167.139.31) (Remote host closed the connection)
[04:47:34] <Lebela> that is awesome,  shellcheck is perfect
[04:47:35] <Lebela> thank you
[04:47:58] <Lebela> when I pass arguments into my shell script,  do I need to worry about special chars?
[04:48:11] <Lebela> ./test filter=foo=bar:123
[04:48:13] <Lebela> stuff like this
[04:48:21] *** Joins: luckiswithme (~luckiswit@149.167.139.31)
[04:48:21] <Lebela> in my case: passing in some ffmpeg arguments
[04:48:36] <wiscii> uh-oh
[04:48:54] <wiscii> there is a program called `test`
[04:49:06] <wiscii> it is also known as `[`
[04:49:29] <Lebela> wiscii, isn't this what my script already uses?
[04:49:35] <Lebela> if [[ "$FOO" != bar ]]
[04:49:40] <larryv> Lebela: if you quote properly while calling the program and quote properly inside the program, it should be okay
[04:49:44] <wiscii> Lebela: indeed
[04:50:01] <wiscii> you really want to use your own names
[04:50:10] <wiscii> not like *your* name
[04:50:17] <Lebela> larryv,  ./test "filter=foo=bar:123"
[04:50:23] <wiscii> but not test
[04:50:24] <Lebela> larryv, ^ like this?  (the quotes)
[04:50:45] <Lebela> wiscii, ah, you mean my shell script should not be called "test"
[04:51:08] <kurahaupo> Lebela: just remember that "test" is the name of a standard command, so don't use it for anything you want to keep
[04:51:09] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:51:16] <wiscii> Lebela: also [[ is actually a program which is named `[[`
[04:51:18] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[04:51:29] <kurahaupo> wiscii: oh really?
[04:51:30] <larryv> that is ... not true
[04:51:42] <wiscii> not quite quoted correctly
[04:51:49] * kurahaupo gives wiscii plenty of rope for the noose
[04:52:38] <Lebela> Thank you larryv
[04:52:41] <Lebela> Thank you kurahaupo
[04:52:44] <Lebela> Thank you wiscii
[04:52:44] <larryv> Lebela: that particular argument doesn't need quoting, but double quotes work, sure. single quotes are a little more strict (but don't make a difference here) ./test 'filter=foo=bar:123'
[04:52:57] <wiscii> ahh .. can i have some elastic to go with the rope please ?
[04:52:58] <Lebela> I need to look after my child  (crying)
[04:53:04] <larryv> whelp good luck
[04:53:18] <Lebela> thank you again!
[04:53:23] *** Joins: Alternity (~Alternity@user/alternity)
[04:53:28] <Lebela> you guys change people's lifes,  thank you for this support chat here!
[04:53:32] <Lebela> bye!! :)
[04:53:33] *** Quits: Lebela (~Lebela@85.187.219.215) (Quit: Leaving)
[04:53:42] <larryv> take care
[04:53:51] * kurahaupo ties one end of a 100-metre rope to a tree branch, and gives the other end of the rope to wiscii
[04:54:26] <wiscii> you may need to push me too
[04:54:29] <vancz> and i just realized half my confusion probably came from reading 2>&3- wrong
[04:55:17] <wiscii> [[ is a program ?
[04:55:42] <wiscii> ah, know, this is version dependent
[04:56:04] <wiscii> s/know/no/
[04:56:12] <vancz> something something [[ is a syntactic construct in bash but its also a program
[04:56:19] <vancz> where was i reading about this
[04:56:23] *** Joins: seninha (~seninha@user/seninha)
[04:56:57] <wiscii> mostly '[[' is a built-in to bash, i think
[04:57:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:883e:6820:d7fb:1d3c)
[04:57:50] *** Joins: karabaja4 (~karabaja4@dh207-94-241.xnet.hr)
[04:59:13] <vancz> https://mywiki.wooledge.org/FullBashGuide#TestsAndConditionals ". Since [[ isn't a normal command (like [ is), but a shell keyword, it has special magical powers. "
[04:59:14] * vancz shrugs
[04:59:20] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[05:00:45] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[05:00:55] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[05:01:20] <larryv> # type [[
[05:01:21] <shbot> larryv: [[ is a shell keyword
[05:01:51] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:883e:6820:d7fb:1d3c) (Ping timeout: 250 seconds)
[05:02:23] *** Joins: totenkoph (~scythe@user/totenkoph)
[05:04:05] <wiscii> larryv: does 'keyword' imply some meaning i miss ? if it is a built-in it will not call `[[` .. something like that ?
[05:04:07] <Helmholtz> How to extract 3rd word from second line of a file ? (space seprated)
[05:04:22] <wiscii> awk
[05:04:50] <larryv> !keyword > wiscii
[05:04:51] <greybot> wiscii: Bash keywords (if case [[ time etc.) are part of the syntax. In some ways they act like builtin commands, but they may have completely different parsing rules. E.g. inside [[ ]] there is no word splitting or filename expansion, and > is not a redirection.
[05:05:44] <wiscii> holy shit !
[05:06:03] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[05:06:09] * wiscii checks
[05:07:41] <wiscii> i am not familiar with [[ because posix, this new layer of distraction is not in my comfort-zone
[05:09:12] <Blondie101010> just start replacing your [ with [[
[05:09:25] <akoana> # printf %s\\n "a bb ccc dddd" "1 22 333 4444" "X XX XXX XXXX"  | awk 'NR==2 { print $3}'
[05:09:26] <shbot> akoana: 333
[05:09:33] <akoana> Helmholtz: ^
[05:09:37] <wiscii> nein
[05:10:54] <Helmholtz> akoana, thanks...can we do it with sed?
[05:11:33] <larryv> why would you? it'd be uglier
[05:12:23] <Helmholtz> larryv, thanks
[05:12:38] <Helmholtz> can awk remove the surronding single quotes?
[05:12:46] <Helmholtz> I do it in bash with two replaces now
[05:13:03] <Helmholtz> wp="${wp%\'}"
[05:13:04] <Helmholtz> wp="${wp#\'}"
[05:13:05] <Helmholtz> like this
[05:13:57] <larryv> there are quotes too? what do these lines look like? are there any more surprises?
[05:14:41] <wiscii> yeah, this was supposed to be third word of second line
[05:15:32] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:16:22] <Helmholtz> the bash solution is ok i guess
[05:18:03] *** Joins: vlm (~vlm@user/vlm)
[05:20:55] *** Quits: liveacoustic (~adison@user/liveacoustic) (Ping timeout: 250 seconds)
[05:25:12] <wiscii> Helmholtz: huh ? which one ?
[05:25:34] *** Quits: c2a1 (~c2a1@2607:fb90:177a:3e76:d90f:6fd5:4245:c25b) (Remote host closed the connection)
[05:26:01] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:26:18] *** Quits: knstn (~knstn@ppp-94-66-57-191.home.otenet.gr) (Quit: leaving)
[05:26:58] *** Joins: revolve_ (~u0_a227@82-132-239-63.dab.02.net)
[05:27:53] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: No route to host)
[05:28:24] *** Joins: vlm (~vlm@user/vlm)
[05:28:30] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[05:29:50] <vancz> someone linked me this https://p9f.org/sys/doc/rc.html " 20. Advanced I/O Redirection "
[05:30:04] <kurahaupo> Helmholtz: "surrounding quotes" sounds like there is some specified file format which is being excessively simplified. How does that field represented a value contains a quote or space?
[05:30:04] <vancz> it seems like the plan 9 shell might be a bit more reasonable in terms of redirection :P
[05:30:24] <kurahaupo> s/contains/containing/
[05:30:40] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[05:30:50] *** Quits: revolve_ (~u0_a227@82-132-239-63.dab.02.net) (Read error: Connection reset by peer)
[05:31:54] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[05:32:03] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[05:34:20] *** Joins: vancz (~vancz@user/vancz)
[05:34:25] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[05:35:12] *** Quits: junebug (~junebug@2600:1700:3db0:2540:f4ec:8761:4b5a:58b8) (Quit: Leaving)
[05:37:10] <vancz> whoops, back
[05:37:12] <vancz> so for: { foo 1>&2 2>&3-; } 3>&1
[05:37:14] <vancz> in the outer case: 3>&1 means 3 is stdout
[05:37:17] <vancz> in the inner case: 1>&2 2>&3- means the 1 and 2 use [original resource of 2] and [original resource or 3] respectively
[05:37:19] <vancz> so the stdout of foo goes to stderr, and the stderr of foo goes to stdout?
[05:37:25] *** Joins: cdown (~cdown@188.214.11.14)
[05:37:31] <vancz> oh and since the inner stuff is done after the outer stuff, its fine that 2>&3- closes 3, because its done after all the other manipulations
[05:37:34] *** Joins: rcernin (~rcernin@101.189.141.138)
[05:37:42] <kurahaupo> vancz: the outer redirections are done before the inner ones
[05:37:52] <vancz> yeah, did i mess up?
[05:37:52] <kurahaupo> so yes, that's the net effect
[05:37:55] <vancz> ok cool
[05:37:58] <vancz> e36freak: ^
[05:38:34] *** Joins: kilitary (~kilitary@188.68.215.221)
[05:38:46] <vancz> im not sure why this is different yet but things started making more sense after i stopped thinking of it as "fds are conceptual pipes with two ends or something" and insteas: "fds are labels for a resource"
[05:38:50] <kurahaupo> It's kinda a pain that redirection can go anywhere in a simply command, including at the front, but you can't put them in front of compound statements.
[05:39:03] <vancz> kurahaupo: can it go at the front?
[05:39:17] <kurahaupo> # echo Hi > file ; <file cat
[05:39:18] <shbot> kurahaupo: Hi
[05:39:19] <vancz> because then this needs to be fixed https://guide.bash.academy/commands/
[05:39:36] <kurahaupo> # echo Hi > file ; <file { cat ; }
[05:39:37] <shbot> kurahaupo: bash: syntax error near unexpected token `}'
[05:40:09] <vancz> or its just an approximation, but it doesnt feel like it from what ive read so far
[05:40:11] <vancz> namely:
[05:40:14] <vancz> ` [ var=value ... ] name [ arg ... ] [ redirection ... ]`
[05:40:17] <vancz> from the above
[05:40:44] <kurahaupo> # </dev/null FOO=bar env | grep FOO
[05:40:46] <shbot> kurahaupo: FOO=bar
[05:40:52] <kurahaupo> # FOO=bar </dev/null env | grep FOO
[05:40:54] <shbot> kurahaupo: FOO=bar
[05:41:10] <vancz> # echo what </dev/null the fuck
[05:41:11] <shbot> vancz: what the fuck
[05:42:03] <vancz> ok so thats good to know...
[05:43:12] <vancz> kurahaupo: do resources usually describe that this ispossible? i dont remember it being mentioned
[05:44:07] *** Quits: larryv (~larryv@zsh/patchmanager/larryv) (Quit: larryv)
[05:45:18] <wiscii> !learn trigger-e # #/bin/sh; set -e; borked () { printf "Sunday, Monday\n"; return 1; }; borked; printf "Happy days\n" # For larryv, two b one a, no Fonzerelli, and a partridge in a pear tree
[05:45:18] <greybot> OK, wiscii
[05:45:31] <wiscii> !trigger-e
[05:45:31] <greybot> # #/bin/sh; set -e; borked () { printf "Sunday, Monday\n"; return 1; }; borked; printf "Happy days\n" # For larryv, two b one a, no Fonzerelli, and a partridge in a pear tree
[05:45:33] <shbot> greybot: no output
[05:45:44] *** Joins: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net)
[05:46:05] <kurahaupo> vancz: the behaviour is "obvious" if you start by looking at the parsing phases, where it says that certain things are looked for and removed or replaced in each phase. The phase where redirections are done doesn't say they have to be at the end, therefore they can be anywhere. However definitions of compound commands *do* require their initial keywords to be at the start, which is why redirections and assignments cannot go before them
[05:46:41] <vancz> since oyu mention removed, i imagine it parses out the redirection and then removes it
[05:46:54] <vancz> so that means any later passes dont care about it
[05:48:36] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:50:53] <Celmor[m]> how would I access a specific argument by index, something like $3 where 3 would be in $index (not like $$4 is gonna work)?
[05:51:43] <kurahaupo> Celmor[m]: ${!index}
[05:52:35] <kurahaupo> Celmor[m]: or "${@:index:count}"
[05:53:09] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:53:19] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[05:53:37] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[05:54:00] <Celmor[m]> thanks
[05:55:18] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:55:53] *** Joins: mat001 (~mat001@72.28.108.216)
[05:58:29] *** Joins: mat001_ (~mat001@72.28.108.216)
[05:58:33] *** Quits: mat001 (~mat001@72.28.108.216) (Read error: Connection reset by peer)
[05:59:23] *** Quits: mat001_ (~mat001@72.28.108.216) (Remote host closed the connection)
[05:59:46] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:59:50] *** Joins: mat001 (~mat001@72.28.108.216)
[06:01:21] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:02:10] *** Joins: vlm (~vlm@user/vlm)
[06:03:22] *** Joins: mat001_ (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[06:03:24] *** Quits: mat001_ (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:05:16] *** Joins: ccl (ccl@user/ccl)
[06:07:06] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 250 seconds)
[06:08:03] *** Joins: bluedust (~bluedust@117.217.146.23)
[06:09:15] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[06:12:57] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 256 seconds)
[06:13:51] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[06:15:17] *** Joins: vlm (~vlm@user/vlm)
[06:17:18] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:17:28] *** Joins: timj (~timj@user/timj)
[06:33:59] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:34:22] *** Joins: kilitary_ (~kilitary@188.242.105.134)
[06:37:19] *** Quits: kilitary (~kilitary@188.68.215.221) (Ping timeout: 256 seconds)
[06:38:44] *** Quits: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: dtux)
[06:38:59] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[06:39:31] *** Joins: LiftLeft (~LiftLeft@187.170.244.154)
[06:41:31] *** Joins: sinaowolabi (~SinaOwola@160.152.112.183)
[06:41:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[06:44:39] <kurahaupo> hmm, I just dug a little further into TLDP. It's a wiki, but "recent changes" page shows the most recent change was 29 Jan 2016, to remove spam. And the text captcha challenge to create a new account is broken, because it asks who's at the top of the staff list, but whoever that was has since left or been demoted. So it's not only the Shell pages that are broken, the entire documentation project has atrophied.
[06:45:34] <kurahaupo> And of course the domain registration has a privacy guard enabled, so it's impossible to contact them.
[06:45:36] *** Joins: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[06:45:44] *** Quits: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Changing host)
[06:45:44] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[06:50:07] *** Quits: jos1 (~jos3@host-091-097-190-061.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[06:51:22] *** Joins: cdown_ (~cdown@163.114.131.1)
[06:52:01] *** Quits: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net) (Quit: Konversation terminated!)
[06:54:05] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[06:54:06] *** cdown_ is now known as cdown
[06:55:37] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:56:21] *** Quits: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[06:56:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[06:56:38] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Read error: Connection reset by peer)
[06:59:45] *** Quits: sinaowolabi (~SinaOwola@160.152.112.183) (Ping timeout: 256 seconds)
[07:00:27] <yitz> o.o
[07:01:29] *** Joins: sinaowolabi (~SinaOwola@160.152.112.183)
[07:02:13] <phy1729> Usually privacy guard has a email that forwards to the real email
[07:03:04] *** Joins: jos1 (~jos3@dyndsl-091-096-035-030.ewe-ip-backbone.de)
[07:06:27] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[07:06:57] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[07:07:52] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[07:13:36] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:14:05] *** Quits: DaNeenjah (~jake@adsl-74-230-9-40.hsv.bellsouth.net) (Quit: WeeChat 3.4)
[07:17:40] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[07:19:27] *** Quits: Strom (strom@fedora/strom) ()
[07:20:14] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[07:21:30] *** Quits: justanotheruser (~justanoth@gateway/tor-sasl/justanotheruser) (Ping timeout: 276 seconds)
[07:21:31] *** Joins: Strom (strom@fedora/strom)
[07:32:36] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:34:13] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 256 seconds)
[07:34:24] *** Joins: oarion7 (anonymous@user/oarion7)
[07:37:24] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:39:30] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[07:39:49] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:41:22] *** Quits: demonbane (~demonbane@71.247.72.217) (Remote host closed the connection)
[07:41:28] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:42:40] *** Joins: demonbane (~demonbane@71.247.72.217)
[07:43:43] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[07:46:47] <e36freak> well that's fun
[07:46:52] <wiscii> only snowden gets pure anon
[07:47:04] <wiscii> wtf ?
[07:47:12] <phy1729> Do you know his name? Then not anon.
[07:47:33] <wiscii> here we go ..
[07:47:46] <e36freak> where we goin
[07:48:20] <wiscii> "hi, i don't know who Edward Snowden is, can you please tell me everything" ..
[07:48:57] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:49:22] <phy1729> e36freak: https://www.youtube.com/watch?v=xTnwUUDeQzo
[07:50:12] <e36freak> phy1729: lol
[07:51:00] *** Joins: malina (~malina@user/malina)
[07:51:52] *** Quits: kilitary_ (~kilitary@188.242.105.134) (Remote host closed the connection)
[07:57:11] *** Joins: fef (~thedawn@user/thedawn)
[07:58:53] *** Joins: vancz (~vancz@user/vancz)
[08:00:08] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[08:00:37] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 240 seconds)
[08:05:21] <wiscii> the problem is , the garbage in, not out
[08:11:15] <wiscii> the garbage out has been revised many times
[08:13:09] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[08:14:14] *** Quits: xizhendu_ (~xizhendu@240e:305:7380:8900:395b:be7:2347:dfa7) (Remote host closed the connection)
[08:14:35] *** Joins: xizhendu_ (~xizhendu@240e:305:7380:8900:395b:be7:2347:dfa7)
[08:16:14] <vancz> would it be incompatible with anything to add a feature to bash where heredocs can be indented with spaces, not just tabs?
[08:17:00] *** Parts: Elliot[m] (~elliotal_@2001:470:69fc:105::bb21) ()
[08:18:22] <wiscii> vancz: do what now ?
[08:18:51] <wiscii> space / tab .. huh .. heredocs don't care
[08:18:53] <vancz> theres a bash (apparently 4?) feature where if you use <<- instead of << you can indent a heredoc with tabs
[08:19:16] <wiscii> oh right
[08:19:16] <vancz> normally the delimiter has to be on column 0 (or how do I say this)
[08:19:27] <vancz> e.g. https://stackoverflow.com/questions/33815600/indenting-heredocs-with-spaces
[08:19:28] <wiscii> got it
[08:21:02] <wiscii> indentation flow .. lol
[08:21:50] *** Joins: ChmEarl (~chmearl@user/chmearl)
[08:23:16] *** Joins: vire (~vire@106.212.254.159)
[08:23:37] <wiscii> heredocs should be M$ Word formattted
[08:23:49] <vancz> bash scripts should be written in xml
[08:23:52] <vancz> like msbuild
[08:25:06] <wiscii> can you imagine :b
[08:26:13] <e36freak> vancz: well done. one more exercise, figure out how to write a command substitution to capture stderr but pass stdout through untouched
[08:27:43] * vancz squints
[08:28:17] <wiscii> can you see the code yet ?
[08:28:51] <vancz> e36freak: capture?
[08:29:14] <vancz> hm though I have a guess what you mean
[08:29:14] <e36freak> var=$(cmd)
[08:29:35] <e36freak> but make var contain cmd's stderr, not stdout
[08:29:42] <e36freak> and stdout should still be on stdout when it's done
[08:29:49] <wiscii> literally
[08:30:17] <vancz> uhuh
[08:30:21] <e36freak> a hint, it'll look sorta similar to what i had you read before
[08:30:57] <wiscii> it's a redirect
[08:33:53] <vancz> I know roughly what needs to be done but I don't have it yet
[08:34:33] <e36freak> you wanted a quiz, i'm throwing some trickyish ones at you
[08:34:41] <e36freak> but that's definitely a real world application
[08:35:07] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f0bb:ba39:2c04:e85)
[08:35:37] * wiscii loves quizes
[08:35:50] <e36freak> you're gonna need to use another fd like as a temporary storage thing like i did before
[08:36:05] <e36freak> like 3*
[08:36:07] <vancz> by i havent done it yeat i meant i havent solved it yet
[08:36:12] <e36freak> right
[08:36:18] <e36freak> take your time
[08:36:20] <vancz> this is cool and good<e36freak> you wanted a quiz, i'm throwing some trickyish ones at you
[08:36:27] <vancz> yep<e36freak> you're gonna need to use another fd like as a temporary storage thing like i did before
[08:36:49] <vancz> so... 2>&- is a golfed 2>/dev/null? :P
[08:37:03] <e36freak> no
[08:37:12] <vancz> err true its closing it
[08:37:51] <vancz> interestingly that doesnt actually seem to break things
[08:38:01] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[08:38:11] <Blondie101010> run a command that outputs to stderr
[08:38:12] <vancz> # echo hi > wat; ls wat nope wat 2>&-
[08:38:13] <shbot> vancz: wat  wat
[08:38:15] *** Quits: callq (~callq@92.119.19.230) (Ping timeout: 256 seconds)
[08:38:19] <vancz> # echo hi > wat; ls wat nope wat 1>&-
[08:38:20] <shbot> vancz: /bin/ls: cannot access 'nope': No such file or directory
[08:38:20] <shbot> vancz: /bin/ls: write error: Bad file descriptor
[08:38:30] <vancz> # echo hi > wat; ls wat nope wat
[08:38:32] <shbot> vancz: /bin/ls: cannot access 'nope': No such file or directory
[08:38:32] <shbot> vancz: wat  wat
[08:38:52] <vancz> why doesnt writing to stderr cause the cannot access issue?
[08:38:55] <vancz> bleh
[08:38:59] <vancz> the bad file descriptor issue
[08:39:21] <Blondie101010> you closed stdout
[08:39:38] <e36freak> vancz: it does, you just can't see it
[08:39:41] <e36freak> because stderr is closed
[08:39:47] <vancz> lol doh
[08:39:57] <vancz> sigh
[08:40:03] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f0bb:ba39:2c04:e85) (Ping timeout: 250 seconds)
[08:40:35] <vancz> i swear 90% of the time its as if i didnt know stderr existed
[08:40:51] <Blondie101010> just get used to test it
[08:41:15] <vancz> the other day I was wondering why my errors werent showing up somewhere in some python code and it took me way too long to realize its because i only redirected stdout
[08:42:29] <vancz> would be nice if there was a way to debug redirections
[08:42:35] <vancz> unrelated to the above
[08:43:00] <Blondie101010> # error() { echo "$1" >&2; }; error something|grep somethingelse
[08:43:02] <shbot> Blondie101010: something
[08:44:14] <wiscii> # error() { echo "$1" >&2; }; error something|grep Blondie101010
[08:44:15] <Blondie101010> # error() { echo "$1" >&2; }; error something 2>&1|grep somethingelse
[08:44:16] <shbot> wiscii: something
[08:44:17] <shbot> Blondie101010: no output
[08:45:48] <vancz> # pls=$(ls wat 1>&2) 2>/dev/null
[08:45:49] <shbot> vancz: /bin/ls: cannot access 'wat': No such file or directory
[08:45:57] <vancz> # { pls=$(ls wat 1>&2); } 2>/dev/null
[08:45:59] <shbot> vancz: no output
[08:46:24] <vancz> not a solution to the quiz, just wondering
[08:47:11] <wiscii> explain this
[08:47:15] <wiscii> # error() { echo "$1" >&2; }; error something|grep Blondie101010
[08:47:16] <shbot> wiscii: something
[08:48:10] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:48:23] <vancz> the pipe is just passing stdout through, stderr is going straight to the pty
[08:48:36] *** Quits: apos (~apos@gateway/tor-sasl/apos) (Ping timeout: 276 seconds)
[08:48:42] <Blondie101010> wiscii:  the function error echos to stderr, but that is not piped to grep
[08:49:05] <vancz> why is it called a pt_y_ anyway, its not a pseudoterminaly
[08:49:18] <vancz> oh
[08:49:24] <vancz> maybe its pseudoteletype
[08:49:36] <vancz> (like tty(
[08:49:40] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[08:49:43] <e36freak> bingo
[08:50:04] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:50:07] *** Joins: brw (~bas@haring.bas.sh)
[08:51:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:51:06] <vancz> the only obvious part of this:  pls=$(ls wat 1>&2) 2>/dev/null
[08:51:06] <vancz> is that 2>/dev/null applies to the command part, but i dont know where the variable setting / command substitution falls in the scoping of redirections
[08:51:37] <wiscii> # error() { echo "$1" >/dev/null; }; error something|grep Blondie101010
[08:51:38] <shbot> wiscii: no output
[08:51:39] <vancz> wrapping it in { ; } 2>/dev/null presumably works because that entire context is now wrapped in the redirections
[08:51:55] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:52:00] <Blondie101010> redirections are handled by the shell
[08:52:35] <vancz> ok yes? I dont see your point
[08:53:06] <Blondie101010> mostly not to over think it
[08:53:17] <e36freak> vancz: assignments aren't a simple command that you can apply redirections to
[08:53:22] <e36freak> that's all that's going on there
[08:53:23] <Blondie101010> I gave you a few examples of simple ways to play with your outputs
[08:53:25] *** Joins: kilitary (~kilitary@188.242.105.134)
[08:55:11] <wiscii> i played with them for you ..
[08:56:24] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[08:56:34] *** Joins: masoudd (~masoudd@user/masoudd)
[08:56:37] *** Joins: apos (~apos@gateway/tor-sasl/apos)
[08:57:51] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:58:08] *** Joins: totenkoph (~scythe@user/totenkoph)
[08:59:23] *** Joins: jeson (~user@103.230.106.58)
[09:00:09] <vancz> this really seems way more complicated than it needs to be somehow. maybe its just the syntax
[09:00:17] <vancz> or my slowness :P
[09:00:20] <vancz> anyway almost got it
[09:00:29] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:01:22] <e36freak> vancz: it's one of those things that's difficult to get at first but once you grok it you'll be able to write stuff like this no problem
[09:01:22] <wiscii> Blondie101010: FTR, i always think of you as Clint Eastwood; Good Bad and Ugly
[09:01:37] <vancz> yeah
[09:02:29] <wiscii> e36freak: "no problem" .. and then the next level
[09:02:29] <vancz> e36freak: y/n is it possible to store two streams in two vars?
[09:02:45] <e36freak> no
[09:03:05] <e36freak> well, not without temp files
[09:03:07] <vancz> ah guess i wont keep trying haha, would have been nice for illustrative purposes
[09:03:16] <Blondie101010> well could be done with a fifo
[09:03:25] <vancz> is there some concurrency reason for that?
[09:03:45] <wiscii> illustrate how to crash your shell
[09:04:12] <e36freak> Blondie101010: sure, i kinda considered that a temp file
[09:04:15] <e36freak> just not a regular file
[09:04:27] <vancz> I thought I was crashing my shell.
[09:04:27] <vancz> Then I realized I was just closing the stdio fd
[09:04:28] <vancz> :P
[09:05:17] <wiscii> lol
[09:09:27] <vancz> or stdout? cant remember. the former would make more sense
[09:10:16] <wiscii> redirects are a language unto themself
[09:10:17] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:12:26] <wiscii> i have a really good example .. hold on
[09:13:35] <vancz> # { pls=$(ls wat nope 2>&1 1>&3); } 3>&1; echo a "$pls"
[09:13:36] <shbot> vancz: a /bin/ls: cannot access 'wat': No such file or directory
[09:13:36] <shbot> vancz: /bin/ls: cannot access 'nope': No such file or directory
[09:13:47] <vancz> oh right
[09:13:53] <vancz> # touch wat; { pls=$(ls wat nope 2>&1 1>&3); } 3>&1; echo a "$pls"
[09:13:54] <shbot> vancz: wat
[09:13:54] <shbot> vancz: a /bin/ls: cannot access 'nope': No such file or directory
[09:14:12] <e36freak> vancz: nicely done
[09:14:27] <e36freak> i'd close 3 since you don't need it anymore, >&3-
[09:14:34] <e36freak> but you got it
[09:15:50] *** Quits: luckiswithme (~luckiswit@149.167.139.31) (Quit: Konversation terminated!)
[09:16:56] *** Quits: jeson (~user@103.230.106.58) (Quit: ERC (IRC client for Emacs 27.2))
[09:17:48] <wiscii> the other reason i like this channel, i learn stuff
[09:17:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:18:12] <vancz> e36freak: ah yeah, that got lost in the experimentaiton
[09:18:57] <e36freak> that'll work fine as is
[09:19:29] <vancz> e36freak: the only reason its difficult to grok is because it needs a proper explanation of the underlying mechanism that makes the behavior fall out automatically
[09:19:44] <vancz> i think that might just be another way of saying its not a very good abstraction
[09:19:53] <vancz> well
[09:20:01] <vancz> arguably its not even an abstraction
[09:20:23] <e36freak> maybe, but it's old af and we're stuck with it
[09:20:41] <vancz> im mostly griping/wondering given that i may have to teach this to someone at some point
[09:20:58] <wiscii> heh
[09:21:09] <vancz> and it would sure be nice to reduce hours of messing around to a couple minutes of clear explanation
[09:21:18] <e36freak> well now you have a curriculum :)
[09:21:21] <vancz> or im just slow on the uptake
[09:21:53] <e36freak> the variable comparison is the best i can think of
[09:21:57] <vancz> e36freak: you should get a nice table of "these all mean the same thing" merged in the man page ;p
[09:22:06] <vancz> e36freak: its pretty close to the truth
[09:22:20] <vancz> e36freak: and the rc notation actually does >[1=2] or whatever
[09:23:10] <vancz> if you missed it <vancz> someone linked me this https://p9f.org/sys/doc/rc.html " 20. Advanced I/O Redirection "
[09:23:29] <vancz> i very much only leafed through that
[09:23:48] <e36freak> i don't know rc so
[09:23:53] <vancz> i dont either
[09:24:03] <e36freak> but this syntax has been around since bourne, is in POSIX, and isn't likely to change
[09:24:12] <e36freak> so might as well learn it
[09:25:02] <vancz> exec 5<>/dev/tcp/ifconfig.me/80
[09:25:03] <vancz> neat
[09:25:17] *** Quits: timj (~timj@user/timj) (Ping timeout: 240 seconds)
[09:25:56] <vancz> (continuing https://guide.bash.academy/commands/# )
[09:26:16] <wiscii> the fun with server/client apps
[09:26:21] <vancz> all bash is missing is a seek :P
[09:26:24] <vancz> for block devices
[09:27:02] <vancz> oh heh here it's mentioned "As a final note about redirections, I'd like to point out that for simple commands the redirection operators can appear anywhere in the simple command. "
[09:27:05] <vancz> just have to keep reading
[09:27:50] <wiscii> or coding ..
[09:28:40] <vancz> heh https://lists.gnu.org/archive/html/bug-bash/2011-12/msg00044.html
[09:29:35] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 256 seconds)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:21] *** Quits: vire (~vire@106.212.254.159) (Quit: vire)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:34:09] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:35:31] <cim> # echo "hello world"
[09:35:33] <shbot> cim: hello world
[09:39:18] *** Joins: timj (~timj@user/timj)
[09:40:36] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[09:41:29] *** Quits: sinaowolabi (~SinaOwola@160.152.112.183) (Ping timeout: 256 seconds)
[09:42:28] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:f141:ba0b:da0:3c4d) (Ping timeout: 250 seconds)
[09:47:51] *** Joins: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de)
[09:48:20] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:52:12] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:53:21] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:53:56] *** Joins: mat001 (~mat001@72.28.108.216)
[09:58:08] <vancz> e36freak: might want to add that as some advanced exercises on https://guide.bash.academy/commands/# idk
[09:58:12] <vancz> *those
[09:59:00] <e36freak> *shrug*
[09:59:17] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 256 seconds)
[09:59:33] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:59:34] <vancz> maybe lhunath will finish that book at some point :p
[09:59:57] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0::7a7b)
[10:00:52] *** Joins: mat001 (~mat001@72.28.108.216)
[10:04:16] <vancz> "Write the output of echo Hello; to a log file such that fd3 is proprely closed afterwards"
[10:04:26] <vancz> woo I did it all by myself~
[10:04:36] <vancz> exec 3>&1 >log; echo Hello; exec 1>&3-
[10:04:51] <vancz> the original was actually: "REDIR.7. Fix this command so that the message is properly saved into the log file and such that FD 3 is properly closed afterwards: exec 3>&2 2>log; echo 'Hello!'; exec 2>&3"
[10:05:03] <vancz> Well, that only took all night :p
[10:05:34] <e36freak> echo 'Hello!' > log
[10:05:57] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 240 seconds)
[10:06:31] *** Parts: Everything (~Everythin@37.115.210.35) ()
[10:06:38] <e36freak> fixed it
[10:07:49] *** Quits: Sayona (~Sayona@user/sayona) (Ping timeout: 240 seconds)
[10:08:12] <vancz> i mean yeah but :P
[10:12:16] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[10:12:18] *** Joins: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990)
[10:16:36] *** Quits: A|an (~Alan@173.218.175.171) (Quit: A|an)
[10:19:42] *** Quits: qub411 (~user@118.209.243.10) (Quit: WeeChat 3.0)
[10:21:41] <loganlee[gnu]> hey guys what's wrong here? https://jqplay.org/s/S9lqh56Sq4
[10:22:40] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:23:00] <pj> loganlee[gnu]: nabq, but JSON requires the keys to be quoted.
[10:23:49] <pj> so: {"a":"a", "b":"b"}
[10:24:35] <loganlee[gnu]> pj: how about the shorthand form {a,b} that equals to that?
[10:24:56] <pj> {a,b} is not valid JSON
[10:25:33] <loganlee[gnu]> yep
[10:26:12] <pj> Keep in mind that JSON != Javascript, JSON has a more strict parsing syntax, so Javascript will recognize JSON as a valid JS object, but not the reverse.
[10:26:47] <pj> What you had is valid Javascript but not valid JSON.
[10:27:47] <pj> anyways, all of this is completely off-topic for #bash, I'm only telling you because I happen to know the answer.
[10:28:23] <loganlee[gnu]> thanks a lot pj no one responded in #jq
[10:28:51] <loganlee[gnu]> # jq 'hello'
[10:28:52] <shbot> loganlee[gnu]: jq: error: hello/0 is not defined at <top-level>, line 1:
[10:28:53] <shbot> loganlee[gnu]: hello
[10:28:53] <shbot> loganlee[gnu]: jq: 1 compile error
[10:28:59] <pj> yeah, you probably have to wait quite a while get a response from them.
[10:29:03] <loganlee[gnu]> # jq -n 'hello'
[10:29:05] <shbot> loganlee[gnu]: jq: error: hello/0 is not defined at <top-level>, line 1:
[10:29:05] <shbot> loganlee[gnu]: hello
[10:29:05] <shbot> loganlee[gnu]: jq: 1 compile error
[10:29:10] <loganlee[gnu]> never mind sorry
[10:30:27] <Blondie101010> !jq
[10:30:28] <greybot> jq is a flexible and lightweight JSON processor: http://stedolan.github.com/jq/ . See #jq. Also, query JSON data with jshon: http://kmkeen.com/jshon/
[10:32:11] <loganlee[gnu]> # jq -n '"hello"'
[10:32:13] <shbot> loganlee[gnu]: "hello"
[10:32:17] <loganlee[gnu]> omg
[10:32:36] <loganlee[gnu]> it's so fussy
[10:32:53] <Blondie101010> it's not
[10:33:03] <Blondie101010> the string needs to include quotes
[10:33:10] <loganlee[gnu]> yep
[10:33:16] <Blondie101010> if you just quote the parameter, the shell won't pass it
[10:33:20] <pj> interesting, the jq man page says it can parse bareword keys.
[10:33:36] <pj> but that web page seems to not want to.
[10:35:04] <pj> jq . <<<'{a:"a", b:"b"}'
[10:35:11] <pj> # jq . <<<'{a:"a", b:"b"}'
[10:35:12] <shbot> pj: jq: parse error: Invalid numeric literal at line 1, column 3
[10:35:22] <pj> # jq . <<<'{"a":"a", "b":"b"}'
[10:35:24] <shbot> pj: {"a":"a","b":"b"}
[10:36:05] <pj> man jq | grep -F identifier-like
[10:36:09] <pj> # man jq | grep -F identifier-like
[10:36:11] <shbot> pj: bash: man: command not found
[10:36:14] <pj> bleh
[10:36:30] <pj> If the keys are "identifier-like", then the quotes can be left off, as in {a:42, b:17}.
[10:36:36] <Blondie101010> a) you can run these tests on your own machine; b) you can talk to shbot in private
[10:36:39] <pj> so that would seem to contradict the man page.
[10:36:54] <Blondie101010> what
[10:37:32] <pj> That sentence in the man page indicates the jq parser will accept bareword keys, but when you try it jq errors out unless the keys are quoted.
[10:37:42] *** Joins: joilerv (~joilerv@135.129.250.144)
[10:40:36] <pj> In fact it errors on the exact example given in the man page right after that sentence.
[10:42:37] *** Joins: s1b1 (~s1b1@user/s1b1)
[10:43:10] <Blondie101010> can you quote or link to the documentation that you feel is incorrect?
[10:43:33] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 250 seconds)
[10:45:01] <pj> Blondie101010: jq(1) look under the section "Object Construction: {}"
[10:45:11] <pj> 2nd paragraph
[10:45:32] <pj> note the example there: {a:42, b:17}
[10:45:45] <pj> # jq . <<<'{a:42, b:17}'
[10:45:46] <shbot> pj: jq: parse error: Invalid numeric literal at line 1, column 3
[10:46:00] <pj> but if you quote the keys it works.
[10:46:13] <pj> # jq . <<<'{"a":42, "b":17}'
[10:46:14] <shbot> pj: {"a":42,"b":17}
[10:47:51] <Blondie101010> you seem to be right, so you should file a bug report
[10:48:37] *** Quits: oarion7 (anonymous@user/oarion7) (Quit: Running IRC on a charmed medieval abacus.)
[10:49:48] <Blondie101010> the simplest solution is to remove that line from the man page :)
[10:51:21] <pj> yeah
[10:51:31] <pj> I'm asking in #jq
[10:52:05] <Blondie101010> are you using a recent version?
[10:52:31] <pj> probably not, but the version in shbot seems to ahve the same issue
[10:52:34] <pj> and I
[10:52:47] <pj> and I'm using the same version that corresponds to the man page I'm reading
[10:53:02] <pj> btw, this is what I just asked in #jq right before you joined: https://paste.centos.org/view/25e95da9
[10:53:07] <vancz> that sounds too simple to not be intended
[10:53:17] <vancz> but I wouldnt know
[10:53:38] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[10:54:29] <pj> yeah, well I can understand it erroring out on bareword keys, because after all the JSON spec doesn't allow for them, but then the man page shouldn't explicitly say it can parse them.
[10:55:32] <Blondie101010> indeed... the doc seems wrong
[10:56:21] <Blondie101010> looking at their github is quite disappointing
[10:56:42] <pj> yeah.  Also that said, I could also understand wanting to allow them, because Javascript allows them and so it makes the parser more flexible to allow them as well.  Most JSON parsers that I've seen have a flag or switch that you can set to enable them to parse bareword keys like that.
[10:59:46] <Blondie101010> that opens a bunch of new possible errors
[10:59:55] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 256 seconds)
[10:59:59] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[11:00:15] *** Joins: unop (~unop@195.91.14.193)
[11:00:16] *** Joins: [R] (~rs@genoce.org)
[11:00:39] <Blondie101010> what if the name includes any non-alphanumeric char
[11:01:25] <pj> I honestly don't know, the docs aren't clear in that respect.
[11:01:39] <pj> at a guess underscore would be allowed
[11:02:03] <pj> but other chars that represent operators would not.
[11:02:15] <pj> ...unless quoted, that is.
[11:02:23] <Blondie101010> no release since 2018, and they have loads of open issues
[11:02:49] <pj> heh, I'm thinking this is not likely to be resolved, then.
[11:03:31] *** Joins: n4dir (~user@i5E86C5C3.versanet.de)
[11:03:32] <pj> maybe if I filed a PR it would get some attention.
[11:04:50] <Blondie101010> possible...  they did approve a PR in October
[11:05:39] <pj> yeah, there's 129 pending PRs, though.
[11:05:40] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:08:03] <pj> oh gosh, am I the only person who finds it ironic that the jq man page is formatted in YAML?
[11:08:25] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Max SendQ exceeded)
[11:08:47] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:11:02] <pj> That seems to answer the question.
[11:11:11] <pj> it is confusing
[11:14:22] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[11:15:01] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[11:15:38] *** Joins: unop (~unop@195.91.14.193)
[11:18:10] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[11:22:36] *** Joins: joilerv (~joilerv@135.129.250.144)
[11:26:30] *** Joins: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz)
[11:27:19] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 250 seconds)
[11:27:53] *** Joins: kilitary (~kilitary@188.242.105.134)
[11:29:05] *** Joins: bluedust (~bluedust@117.217.146.23)
[11:30:38] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[11:33:21] *** Quits: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[11:39:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:45:51] *** Joins: Adoi (~Adoi@user/adoi)
[11:48:01] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[11:52:23] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:57:22] <emanuele6> that is the object constructor...
[11:57:50] <emanuele6> it's jq syntax not how jq parses its input
[11:58:24] <emanuele6> # jq -n '[range(5)]'
[11:58:25] <shbot> emanuele6: [0,1,2,3,4]
[11:58:37] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[11:58:57] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[11:59:07] <emanuele6> i doubt you expect jq to treat [range(5)] in it's input as [1,2,3,4,5]
[11:59:36] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[11:59:41] <emanuele6> or [recurse(1)] to cause an infinite loop
[12:00:03] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:00:15] <emanuele6> so why expect jq syntax in the input to be evaluated?
[12:01:00] <emanuele6> # jq -n '{a:"a",b:"b"}'
[12:01:01] <shbot> emanuele6: {"a":"a","b":"b"}
[12:01:12] <emanuele6> the example in the manual page works as expected.
[12:01:57] <emanuele6> it constructs an object with a set to "a" and b set to "b"
[12:02:43] <emanuele6> the object constructor is not just key:value. it can be key, $key, "\(EXPR)":(EXPR), etc
[12:02:47] <emanuele6> it's jq syntax
[12:03:06] <emanuele6> # jq . <<< '{a:"a",b:"b"}'
[12:03:08] <shbot> emanuele6: jq: parse error: Invalid numeric literal at line 1, column 3
[12:03:27] <emanuele6> this is just feeding something that is not json to jq
[12:03:34] <emanuele6> # jq . <<< '[range(5)]'
[12:03:36] <shbot> emanuele6: jq: parse error: Invalid numeric literal at line 1, column 10
[12:05:14] <emanuele6> if you want to run jq code from stdin, use -f /dev/stdin or something like that
[12:06:03] <emanuele6> but jq will only read JSON (or raw text when using -R), and it does not claim to treat {a:2} as valid JSON.
[12:10:36] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Quit: Leaving)
[12:11:27] <emanuele6> # jq -n '"{a:\"a\"}"|fromjson'
[12:11:29] <shbot> emanuele6: jq: error (at <unknown>): Invalid numeric literal at line 1, column 3 (while parsing '{a:"a"}')
[12:11:38] <emanuele6> # jq -n '"{\"a\":\"a\"}"|fromjson'
[12:11:39] <shbot> emanuele6: {"a":"a"}
[12:11:55] <emanuele6> as you can see, {a:"a"} also makes the fromjson function fail.
[12:12:37] <emanuele6> where jq expects JSON, it parses JSON; not jq code, not javascript.
[12:14:18] *** Joins: sokle_68 (~sokle_68@ppp046176054242.access.hol.gr)
[12:14:43] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:14:46] *** Joins: sinaowolabi_ (~SinaOwola@160.152.112.183)
[12:15:16] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[12:15:45] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[12:20:00] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[12:20:04] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[12:23:03] *** Quits: l4yer (~l4yer@2001:ac8:31:8900:1012:1bf5:ba27:3ee) (Remote host closed the connection)
[12:23:33] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:24:15] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:24:31] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:29:11] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[12:30:25] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:30:58] *** Joins: Afroboy (~afroboy@105.107.177.170)
[12:31:50] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:33:25] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[12:37:09] *** Parts: sokle_68 (~sokle_68@ppp046176054242.access.hol.gr) ()
[12:48:09] *** Joins: clime (~clime@37-48-57-231.nat.epc.tmcz.cz)
[12:48:28] *** Joins: lavaball (felix@31.204.155.215)
[12:53:53] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[12:55:39] *** Quits: n4dir (~user@i5E86C5C3.versanet.de) (Remote host closed the connection)
[12:56:14] *** Joins: joilerv (~joilerv@135.129.250.144)
[12:56:15] *** Joins: jiploading (~user@user/vjipac)
[12:59:19] *** Quits: jiploading (~user@user/vjipac) (Remote host closed the connection)
[13:00:25] *** Joins: frostwork (~frostwork@user/frostwork)
[13:01:00] *** Joins: kilitary (~kilitary@188.242.105.134)
[13:01:58] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[13:03:36] *** Joins: physics (~physics@rain.bz)
[13:05:27] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[13:06:58] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Remote host closed the connection)
[13:10:44] *** Quits: physics (~physics@rain.bz) (Quit: Textual IRC Client: www.textualapp.com)
[13:12:17] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[13:13:23] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[13:14:42] *** Joins: l4yer (~l4yer@2001:ac8:31:8900:1011:924a:b1e3:99a5)
[13:15:38] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[13:16:17] *** Joins: jmew_ (~jmew@host-78-147-81-209.as13285.net)
[13:16:17] *** Quits: jmew_ (~jmew@host-78-147-81-209.as13285.net) (Changing host)
[13:16:17] *** Joins: jmew_ (~jmew@user/jmew)
[13:17:57] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0::7a7b) (Ping timeout: 240 seconds)
[13:18:58] *** Joins: curvv (~quetzlcoa@192-143-47-62.ip.airmobile.co.za)
[13:18:58] *** Quits: curvv (~quetzlcoa@192-143-47-62.ip.airmobile.co.za) (Changing host)
[13:18:58] *** Joins: curvv (~quetzlcoa@user/curvv)
[13:19:04] <Helmholtz> is `set -e` also usable in POSIX sh?
[13:26:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8)
[13:26:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8) (Changing host)
[13:26:32] *** Joins: skapata (~Skapata@user/skapata)
[13:28:50] *** Quits: jmew_ (~jmew@user/jmew) (Remote host closed the connection)
[13:29:56] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[13:30:05] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 256 seconds)
[13:30:34] <Helmholtz> Is this best the POSIX sh equivalent of trap EXIT? https://unix.stackexchange.com/questions/520035/exit-trap-with-posix/520041#520041
[13:30:54] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[13:32:27] <geirha> no, it's useless in bash and useless in posix sh
[13:33:13] <geirha> no, that answer mishandles SIGINT; you should never exit from a SIGINT trap
[13:34:23] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[13:35:46] *** Joins: rendar (~rendar@user/rendar)
[13:39:11] *** Quits: mandanguita (~mandangui@139.47.119.61) (Quit: Lost terminal)
[13:40:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:40:30] <Helmholtz> geirha, How can I do this is POSIX sh? my_img=$(mktemp "/tmp/my-tmp-XXX"); trap 'rm -f "$my_img"' EXIT
[13:41:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:42:01] *** Joins: sinaowolabi (~SinaOwola@41.58.227.62)
[13:44:58] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:45:00] <geirha> trap 'rm -f "$my_img"' EXIT ; trap 'rm -f "$my_img" ; trap - INT ; kill -INT "$$"' INT   and for the other signals you can either do the same as the INT trap, or just exit, depending on the result you want
[13:45:13] <geirha> !sigint
[13:45:14] <greybot> How the shell handles ^C (SIGINT) and why: http://www.cons.org/cracauer/sigint.html
[13:45:17] <emanuele6> posix sh has EXIT
[13:45:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:46:32] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[13:50:49] <geirha> yes, but no guarantee it triggers when the shell dies of a signal
[13:51:13] <Earnestly> However it's difficult to rely on EXIT unless you only consider it as something which can run code when your script ends normally (it won't be triggered on abnormal exit or on signals)
[13:51:24] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[13:51:30] <Earnestly> bash is only sensible implementation EXIT
[13:51:32] *** Joins: callq (~callq@2405:201:a000:a015:20e0:8736:cf91:5ba9)
[13:51:57] <emanuele6> i see
[13:52:16] <Helmholtz> sigh...I guess I just use bash (and EXIT) instead of posix sh...it's too much hassle
[13:52:40] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:53:33] <Earnestly> Helmholtz: What I end up using, and I'm not sure it works even then: https://0x0.st/oXPO.txt
[13:54:05] *** Quits: frostwork (~frostwork@user/frostwork) (Quit: Leaving)
[13:54:19] <Earnestly> Where goal is to make EXIT work consistently if sh is bash
[13:54:29] <Helmholtz> Totally unrelated but is there a room for Imagemagick which is as active as this one?
[13:54:30] <Earnestly> I assume zsh's emulate sh also doesn't handle EXIT properly
[13:55:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[13:56:03] <HelloShitty> Hello. I'm making some changes to the script I asked help here yesterday. I need help to "transform" a terminal command into a script command. The terminal command I'm using is:
[13:56:12] <HelloShitty> gpg2 -v --decrypt myContainerKey.gpg 2>/dev/null | sudo cryptsetup -v --key-file=- luksOpen myContainerFile.ctn myContainer
[13:56:21] <HelloShitty> and I think this won't work
[13:56:37] <HelloShitty> if ! gpg2 -v --decrypt "$luksDeviceKey" 2>/dev/null | sudo cryptsetup -v --key-file=- luksOpen "$luksDeviceFile" "$luksDeviceName"; then
[13:56:42] <HelloShitty> inside the script
[13:56:50] <HelloShitty> because of --key-file=-
[13:57:02] <HelloShitty> Or will it work exactly the same way?
[13:57:44] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:59:33] *** Joins: seninha (~seninha@user/seninha)
[14:00:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[14:00:32] *** Joins: seninha (~seninha@user/seninha)
[14:00:52] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[14:01:05] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[14:02:37] *** Quits: sinaowolabi_ (~SinaOwola@160.152.112.183) (Ping timeout: 240 seconds)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:05:18] <HelloShitty> no, it doesn't.
[14:05:54] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 260 seconds)
[14:06:39] <geirha> shouldn't be any difference there
[14:07:19] *** Parts: Everything (~Everythin@37.115.210.35) ()
[14:09:55] *** Joins: seninha (~seninha@user/seninha)
[14:10:38] *** Joins: aod (~a@190-207-91-114.dyn.dsl.cantv.net)
[14:14:47] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[14:15:01] *** Joins: unop (~unop@195.91.14.193)
[14:16:53] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 256 seconds)
[14:17:27] <HelloShitty> I get a
[14:17:29] <HelloShitty> Nothing to read on input.
[14:17:30] <HelloShitty> Command failed with code -1 (wrong or missing parameters).
[14:18:34] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[14:19:49] *** Joins: revolve (~u0_a227@82-132-237-180.dab.02.net)
[14:20:39] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Ping timeout: 250 seconds)
[14:20:42] <HelloShitty> and these are messages not from the script but from the commands themselves
[14:20:43] <geirha> so what you showed is probably not exactly what you ran in the script. I bet there's variables involved in the real code. Use set -x to see what it actually tries to run
[14:20:45] <geirha> !-x
[14:20:45] <greybot> set -x (or ''bash -x myscript'') makes bash output the exact command that it will run after parsing and expansion. You can put ''set -x'' just before the code you want to debug (turn off with ''set +x''). To add more information, change PS4 first: eg. PS4='+($?) $BASH_SOURCE:$FUNCNAME:$LINENO:'
[14:24:01] *** Joins: Jaro2k (~Jaro2k@host-185-78-133-160.jmdi.pl)
[14:24:17] *** Quits: aod (~a@190-207-91-114.dyn.dsl.cantv.net) (Ping timeout: 240 seconds)
[14:25:36] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Read error: Connection reset by peer)
[14:26:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:27:15] <HelloShitty> ok, you were right, ofcourse
[14:27:19] <HelloShitty> thanks
[14:27:29] <HelloShitty> I had a typo in one of the variables
[14:27:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:27:43] *** Lord_of_Life_ is now known as Lord_of_Life
[14:30:08] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[14:31:55] *** Joins: joilerv (~joilerv@135.129.250.144)
[14:34:24] *** Quits: callq (~callq@2405:201:a000:a015:20e0:8736:cf91:5ba9) (Quit: callq)
[14:35:16] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[14:39:00] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[14:39:25] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:43:07] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Read error: Connection reset by peer)
[14:44:44] *** Joins: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk)
[14:46:06] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[14:46:40] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[14:47:56] *** Joins: vishal (~vishal@fedora/vishal)
[14:51:35] *** Joins: netpipe (~netpipe@user/netpipe)
[14:51:58] *** Quits: tsp (~tsp@srv1.xen.prgmr.com) (Quit: ZNC - http://znc.in)
[14:52:07] *** Joins: tsp (~tsp@srv1.xen.prgmr.com)
[14:54:30] *** Joins: bluedust (~bluedust@117.217.146.23)
[14:55:51] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[14:55:59] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 256 seconds)
[14:56:03] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:59:02] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[14:59:40] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[14:59:42] *** Joins: unop (~unop@195.91.14.193)
[15:01:29] <rendar> after a calculation, bash returned "6.55695e+09"
[15:01:34] <rendar> instead i want whole integer
[15:01:37] <rendar> how to force that?
[15:01:55] <Fernando-Basso> Seems that z and kitty are fighting over a semicolon. I would appreciate some help with this. I opened an issue for Kitty, but I'm not sure which program incorrectly adding the semicolon (if even if no program is doing it wrong). https://github.com/kovidgoyal/kitty/issues/4645
[15:02:49] <rendar> actually it was awk, `grep MemTotal /proc/meminfo|awk -v pct="100" '{ print $2 * pct }'`
[15:05:53] *** Joins: cdown (~cdown@163.114.131.1)
[15:06:43] *** Joins: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz)
[15:07:04] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[15:09:18] *** Joins: beencubed (~beencubed@209.131.238.248)
[15:09:20] *** Joins: domicron1 (~domicron@gateway/tor-sasl/domicron)
[15:09:50] *** Joins: wurstwasser (~frank.hol@2001:a61:34a7:b001:b99d:bc7:ff47:693e)
[15:11:17] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:11:27] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Ping timeout: 276 seconds)
[15:11:28] *** domicron1 is now known as domicron
[15:14:22] *** situ_ is now known as situ
[15:15:10] *** Joins: bluedust (~bluedust@117.217.146.23)
[15:19:05] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[15:25:07] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[15:25:30] *** Joins: yustin (~yustin@user/yustin)
[15:29:40] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:33:36] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[15:34:47] *** Joins: michigan (uid507982@id-507982.ilkley.irccloud.com)
[15:39:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:41:42] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[15:42:07] *** Quits: Afroboy (~afroboy@105.107.177.170) (Ping timeout: 256 seconds)
[15:45:17] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 240 seconds)
[15:46:21] *** Joins: oem22 (xyz@151.30.129.165)
[15:47:13] *** Quits: revolve (~u0_a227@82-132-237-180.dab.02.net) (Read error: Connection reset by peer)
[15:50:57] *** Joins: bluedust (~bluedust@117.217.146.23)
[15:51:05] *** Quits: oem22 (xyz@151.30.129.165) (Quit: Going offline, see ya! (www.adiirc.com))
[15:51:11] *** Joins: xx (~xx@user/xx)
[15:54:07] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[15:57:48] *** Joins: john_johnk (~Thunderbi@232.58.140.77.rev.sfr.net)
[15:58:42] *** Joins: oem (Username@151.30.129.165)
[15:59:32] *** Quits: oem (Username@151.30.129.165) (Client Quit)
[16:00:36] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:02:31] *** Joins: Afroboy (~afroboy@105.107.99.226)
[16:03:47] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:07:05] *** Parts: Jaro2k (~Jaro2k@host-185-78-133-160.jmdi.pl) ()
[16:15:23] *** Joins: liveacoustic (~adison@user/liveacoustic)
[16:16:41] *** Quits: Afroboy (~afroboy@105.107.99.226) (Ping timeout: 256 seconds)
[16:17:26] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[16:27:13] *** Quits: john_johnk (~Thunderbi@232.58.140.77.rev.sfr.net) (Ping timeout: 256 seconds)
[16:27:16] *** Joins: ouestbillie (~ced@192-222-138-215.qc.cable.ebox.net)
[16:27:52] <ouestbillie> looking for a way to cleanup some directories that are either empty or only contain files i dont care about (eg .jpg) after a `beets import`
[16:28:40] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:28:52] <ouestbillie> i cant seem to be able to google a way to find directories that /only/ contain some kind of file without hacking a for loop, wish there was a way to craft something with find booleans attached together with -o
[16:29:30] <yustin> just erase all the jpgs 1st and then empty dirs ...
[16:31:45] <ouestbillie> i mean
[16:31:54] <ouestbillie> yes ?
[16:32:12] <ouestbillie> was playing a bit of find/shell golf but i guess ya that s the saner
[16:32:38] <ouestbillie> i wanna get good at find, I never remember how to use it properly
[16:33:36] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Remote host closed the connection)
[16:33:51] *** Quits: Lantizia (~Lantizia@195.62.201.126) (Remote host closed the connection)
[16:34:33] <yustin> find . -regex ".*jpg\|.*png"   ?
[16:36:26] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:39:49] <ouestbillie> nice but, this seems to break when there are white spaces in filenames
[16:40:32] <ouestbillie> `find . -regex ".*jpg\|*.log" doesnt` print the file i can get with `find . -name "*.log"`
[16:41:46] <ouestbillie> woups never mind just saw i missed a dot
[16:43:35] *** Joins: jabster28 (~jabster28@81.111.217.63)
[16:46:21] <welder> Can i sut suffix and prefix at once with # and %?
[16:46:36] <welder> i'd like to generate pdf manpages from openssl man, the command is:
[16:46:55] <welder> dpkg -L openssl | grep '/usr/share/man/' | while read -r MAN; do [[ -f $MAN ]] && man -Tpdf "$MAN" > "${MAN##*/}.pdf"; done
[16:47:33] <welder> is there a way to also cut suffix in the same place? > "${MAN##*/}.pdf"
[16:48:45] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[16:50:14] <emanuele6> ouestbillie: with GNU find, you can just use:  find . \( -name '*.x' -o -name '*.p' -o -type d -empty \) -delete
[16:50:30] <emanuele6> ( it works because -delete implies -depth )
[16:50:32] *** Joins: bluedust (~bluedust@117.217.146.23)
[16:52:10] <emanuele6> ( i guess you want .jpg and .log instead of .x and .p, you can add more extensions by adding a  -o -name '*.other'  before the -type d -empty )
[16:54:06] <emanuele6> welder: no, you have to use a temporary variable to do man_pdf=${man##*/} man_pdf=${man_pdf%%.*}.pdf
[16:57:37] <welder> yeah did that
[16:57:40] <welder> thanks
[16:58:12] <emanuele6> welder: note that that is problematic
[16:58:42] <emanuele6> since it will make open(2) open(3p) open(3perl) open(n) etc overwrite each other
[16:59:01] <emanuele6> i mean if there are man pages with the same name in different section of the manual
[16:59:36] *** Joins: glazed (~glazed@108.5.30.126)
[17:00:23] <welder> that's right
[17:01:11] <emanuele6> you could use: man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf#*.*([!.])}"}.pdf
[17:01:18] <emanuele6> n.b. you have to enable extglob
[17:01:59] <emanuele6> # man=/usr/share/man/open.1.gz.zip; man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf#*.*([!.])}"}.pdf; declare -p man_pdf
[17:02:00] <shbot> emanuele6: declare -- man_pdf="open..pdf"
[17:02:03] <emanuele6> err
[17:02:08] <emanuele6> ah, right
[17:02:35] <emanuele6> # man=/usr/share/man/open.1.gz.zip; man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf##*([!.]).*([!.])}"}.pdf; declare -p man_pdf
[17:02:36] <shbot> emanuele6: declare -- man_pdf="open.1.pdf"
[17:02:46] <emanuele6> # man=/usr/share/man/open.n.gz.bz; man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf##*([!.]).*([!.])}"}.pdf; declare -p man_pdf
[17:02:47] <shbot> emanuele6: declare -- man_pdf="open.n.pdf"
[17:03:02] <emanuele6>   man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf##*([!.]).*([!.])}"}.pdf
[17:03:26] <emanuele6> that will keep everything up to the second .
[17:03:38] <emanuele6> # man=/usr/share/man/open.3p; man_pdf=${man##*/} man_pdf=${man_pdf%"${man_pdf##*([!.]).*([!.])}"}.pdf; declare -p man_pdf
[17:03:40] <shbot> emanuele6: declare -- man_pdf="open.3p.pdf"
[17:04:03] *** Quits: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[17:04:32] *** Joins: ssj (~jsjsj@a213-22-192-47.cpe.netcabo.pt)
[17:04:37] *** Quits: luva (~luva@45.141.152.53) (Ping timeout: 256 seconds)
[17:05:09] <emanuele6> it obviously still breaks for stuff like   /usr/share/man/man5/xorg.conf.5.gz   though
[17:11:54] *** Quits: glazed (~glazed@108.5.30.126) (Quit: Client closed)
[17:13:28] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[17:14:27] *** Joins: luva (~luva@37.120.197.54)
[17:15:37] *** Joins: andreea (~andreea@176.90.169.27)
[17:16:44] *** Joins: Oleg (~Oleg@ool-45745511.dyn.optonline.net)
[17:18:01] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[17:24:51] *** Joins: kilitary (~kilitary@188.242.105.134)
[17:26:32] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[17:26:47] *** Joins: unop (~unop@195.91.14.193)
[17:28:26] *** Quits: andreea (~andreea@176.90.169.27) (Quit: Connection closed)
[17:33:37] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[17:35:02] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[17:36:14] *** Joins: user1 (~user@95.0.240.62)
[17:37:19] *** Joins: callq (~callq@2409:4062:2e9e:2081:b0f0:7317:32c9:9fbd)
[17:42:46] *** Joins: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de)
[17:42:50] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[17:44:31] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[17:44:32] *** Quits: michigan (uid507982@id-507982.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:44:44] *** Quits: Buliarous (~gypsydang@46.232.210.139) (Ping timeout: 268 seconds)
[17:45:05] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[17:47:14] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:47:33] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[17:47:53] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:49:34] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:56:35] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[17:57:17] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[17:57:52] *** Joins: unop (~unop@195.91.14.193)
[17:58:12] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:59:47] *** Joins: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be)
[18:01:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:02:45] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:05:19] *** Joins: joilerv (~joilerv@135.129.250.144)
[18:06:03] *** Quits: kilitary (~kilitary@188.242.105.134) (Ping timeout: 256 seconds)
[18:14:13] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[18:15:00] *** Joins: Kruppt (~Kruppt@50-111-52-16.drhm.nc.frontiernet.net)
[18:19:01] *** Joins: cityape (~mascot@user/cityape)
[18:21:34] *** Joins: kilitary (~kilitary@188.242.105.134)
[18:27:46] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862)
[18:27:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862) (Changing host)
[18:27:46] *** Joins: skapata (~Skapata@user/skapata)
[18:30:21] *** Quits: l4yer (~l4yer@2001:ac8:31:8900:1011:924a:b1e3:99a5) (Ping timeout: 245 seconds)
[18:43:00] *** Joins: omnio (~omnio@user/omnio)
[18:52:51] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[18:53:38] *** Parts: omnio (~omnio@user/omnio) (Konversation terminated!)
[18:56:57] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 240 seconds)
[18:58:26] *** Joins: cdown_ (~cdown@188.214.11.14)
[18:58:27] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:58:44] *** Joins: volgrim (~Volgrim@156-155-224-214.ip.internet.co.za)
[18:59:48] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:00:08] <lilalinux> Hi! I'm trying to migrate a script that I wrote a long time ago to OS X but I'm getting an error "syntax error near unexpected token ">". The script is essentially: mkfifo out; cat out | nc -l 1500 > >(printf ..... > out)
[19:01:21] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[19:01:22] *** cdown_ is now known as cdown
[19:01:54] *** Parts: ssj (~jsjsj@a213-22-192-47.cpe.netcabo.pt) (Leaving)
[19:03:49] *** Quits: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[19:04:12] *** Joins: callq_ (~callq@2409:4062:202:fb53:35cf:a4ba:9e6b:cada)
[19:04:17] *** Quits: callq (~callq@2409:4062:2e9e:2081:b0f0:7317:32c9:9fbd) (Ping timeout: 240 seconds)
[19:04:25] *** Joins: joilerv (~joilerv@135.129.250.144)
[19:05:49] <phogg> if I do read < <(something) is there a way to get the exit code of the (something) shell?
[19:06:27] *** Quits: luva (~luva@37.120.197.54) (Ping timeout: 256 seconds)
[19:07:13] *** Joins: luva (~luva@146.70.62.252)
[19:08:08] *** Quits: volgrim (~Volgrim@156-155-224-214.ip.internet.co.za) (Remote host closed the connection)
[19:09:17] <emanuele6> phogg: wait "$!"; ec=$?
[19:10:05] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[19:10:29] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:10:52] <emanuele6> # read -r out < <(echo hello; exit 30); wait "$!"; ec=$?; declare -p out es
[19:10:54] <shbot> emanuele6: declare -- out="hello"
[19:10:54] <shbot> emanuele6: bash: declare: es: not found
[19:10:58] <emanuele6> oops
[19:11:01] <emanuele6> # read -r out < <(echo hello; exit 30); wait "$!"; es=$?; declare -p out es
[19:11:03] <shbot> emanuele6: declare -- out="hello"
[19:11:03] <shbot> emanuele6: declare -- es="30"
[19:11:48] *** Joins: igemnace (~ian@user/igemnace)
[19:12:22] <emanuele6> or you can use   read -r out < <(echo hello; exit 30); if ! wait "$!"; then ...; fi if you want to just check failure
[19:12:40] <phogg> I need to know the specific code in this case
[19:12:42] <phogg> trying it out now
[19:12:51] <emanuele6> or like  if read -r out < <(echo hello; exit 30) && wait "$!"; then ...; fi if you want to check if both succeeded
[19:14:01] *** Joins: luckiswithme (~luckiswit@149.167.139.151)
[19:14:12] *** Quits: luckiswithme (~luckiswit@149.167.139.151) (Client Quit)
[19:14:18] <emanuele6> phogg: you can always use wait to get the exit status of jobs and child processes:  wait "$procspec"   or  wait "$pid"
[19:14:26] <emanuele6> they can be retrieved at any time
[19:14:45] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[19:15:33] <phogg> $! as you suggested works for me here, thanks
[19:15:48] *** Joins: luckiswithme (~luckiswit@149.167.139.151)
[19:15:50] *** Joins: Jong (~Jong@2620:10d:c090:400::5:d8b2)
[19:16:34] <emanuele6> yes, that uses `wait' to get the exit status of "$!" that is the subshell that runs something, then $? is set to exit status of wait that is the exit status of the subshell that ran something.
[19:17:27] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:c540:4db8:d084:c3a0)
[19:17:29] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[19:17:40] *** Joins: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be)
[19:18:07] *** Quits: polve (~polve@user/polve) (Ping timeout: 256 seconds)
[19:18:30] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:c540:4db8:d084:c3a0) (Client Quit)
[19:18:56] <phogg> I don't know why I hadn't thought of doing that. I've done a few scripts that employ wait like that, I just hadn't considered that $! would have the right pid in it.
[19:19:25] *** Joins: polve (~polve@user/polve)
[19:20:18] *** Quits: karabaja4 (~karabaja4@dh207-94-241.xnet.hr) (Remote host closed the connection)
[19:21:26] <wiscii> !$!
[19:21:26] <greybot> $! expands to the process ID of the most recently executed background (asynchronous) command. In bash 4.4 and later this includes process substitutions.
[19:21:53] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[19:22:30] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[19:27:40] *** Quits: cityape (~mascot@user/cityape) (Quit: Going to sleep. ZZZzzzâ€¦)
[19:29:34] <phogg> emanuele6: that's one step forward: https://termbin.com/i1v7
[19:30:10] <phogg> wiscii: that explains it, I likely hadn't noticed when process substitutions started being included
[19:30:29] *** Joins: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net)
[19:30:44] *** Quits: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net) (Client Quit)
[19:31:28] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[19:33:16] <emanuele6> phogg: [[ ${READLINE_LINE:$token_start:1} =~ [[:space:]] ]] -> [[ ${READLINE_LINE:token_start:1} == [[:space:]] ]]
[19:33:44] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:33:47] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:34:03] *** Quits: Hackerpcs (~user@user/hackerpcs) (Max SendQ exceeded)
[19:34:34] <phogg> true and true
[19:35:10] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:35:39] <emanuele6> could also write it as: [[ ${READLINE_LINE:token_start} == [[:space:]]* ]]
[19:36:49] <phogg> for efficiency?
[19:36:55] <phogg> I don't think it matters that much
[19:37:00] <emanuele6> well, it's shorter
[19:37:16] <emanuele6> and simpler since you don't have to specify length
[19:37:17] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[19:37:21] <phogg> there's the old debate about brevity vs. clarity. Shorter is more clear (until it isn't)
[19:37:38] <emanuele6> i think that is also more clear to be honest
[19:37:49] <phogg> I am not so sure, but I will consider it.
[19:37:54] <emanuele6> :token_start:1} == [[:space:]] feels noisy to me
[19:38:11] <phogg> maybe it's my old C head, but it works for me
[19:39:35] <phogg> now that I have this working I expect bash 5.2 or something will start supporting custom read -e completions natively and I'll just delete it.
[19:43:51] <emanuele6> meh, i don't think thinking of `string:token_start:1} == [[:space:]]'  as   is_space(string[token_start]) makes any sense at all, but if that makes you happy, sure.
[19:45:19] <emanuele6> it is more like doing:  char tmp[2]; tmp[0]=string[token_start]; tmp[1]='\0'; fnmatch("[[:space:]]", tmp, 0);
[19:45:29] <emanuele6> i can't think of it in any other way, to be honest.
[19:45:44] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:45:57] *** Joins: Edu4rdSHL (~Edu4rdSHL@user/edu4rdshl)
[19:46:33] <phogg> emanuele6: since you've looked at it can I bounce another thought off you? Would it be better to rebind C-c inside the subshell instead of trapping SIGINT?
[19:46:49] <phogg> either way creates an approximately identical experience
[19:46:51] <Edu4rdSHL> Hello, how can I convert the `date` output to unix timestamp? For example "Sun Feb  6 11:16:31 AM -05 2022" to Unix timestamp
[19:47:03] <Edu4rdSHL> --date doesn't accept the "Sun Feb  6 11:16:31 AM -05 2022" format
[19:47:17] <emanuele6> +%s
[19:47:37] <phogg> Edu4rdSHL: Depends on your date. E.g. GNU date doesn't allow custom input formats, but FreeBSD date does.
[19:47:41] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Quit: Goodbye! - WeeChat 3.4)
[19:48:22] <Edu4rdSHL> phogg, that's what I have been reading, ummm :/
[19:48:34] <Edu4rdSHL> emanuele6, doesn't work for GNU date
[19:48:37] *** Quits: LiftLeft (~LiftLeft@187.170.244.154) (Ping timeout: 240 seconds)
[19:48:42] <phogg> Edu4rdSHL: looks like it dislikes your TZ notation
[19:50:00] <phogg> if you drop the zone part (-05) then my GNU date accepts it. Also works if you convert to a symbolic zone
[19:50:09] <emanuele6> phogg: i don't think you can rebind \C-c
[19:50:31] <phogg> emanuele6: you sure can: bind -x '"\C-c":"cancel"'
[19:50:46] <emanuele6> doesn't work for me
[19:50:47] <phogg> emanuele6: some other steps are required, too
[19:50:54] <phogg> emanuele6: one sec
[19:51:35] *** Joins: nobody_ (~nobody@host-87-0-178-160.retail.telecomitalia.it)
[19:52:03] *** Joins: cityape (~cityape@user/cityape)
[19:52:19] <phogg> emanuele6: https://termbin.com/1cfh
[19:52:22] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[19:54:05] <emanuele6> Edu4rdSHL: yeah, doesn't seem to work
[19:54:50] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[19:55:32] *** Joins: PeGaSuS (WeeChat@user/pegasus)
[19:56:42] *** Joins: nyex (~Thunderbi@177.84.107.56)
[19:57:33] <phogg> if you use the %z format it rejects it, but accepts the %Z format. Seems like it doesn't take numeric forms even in TZ=
[19:58:26] <tirnanog> # LC_ALL=C date -u -d 'Sun Feb  6 11:16:31 -0500 2022'
[19:58:28] <shbot> tirnanog: Sun Feb  6 16:16:31 UTC 2022
[19:59:35] <phogg> so it's AM+numeric zone that it chokes on?
[19:59:38] <tirnanog> or just -05, even. it's the AM, yes.
[20:00:00] <phogg> either way looks like he has to massage his input string, but at least AM/PM is easy to strip
[20:00:02] <tirnanog> which makes sense.
[20:00:08] <tirnanog> why the hell would it be 16:xx AM.
[20:00:31] <phogg> but it could be 11 AM in the given zone
[20:00:33] *** Quits: PeGaSuS (WeeChat@user/pegasus) (Quit: Goodbye! - WeeChat 3.4)
[20:00:40] *** Joins: bluedust (~bluedust@117.217.146.23)
[20:00:51] *** Joins: PeGaSuS (WeeChat@user/pegasus)
[20:00:52] <tirnanog> I know. but still. I wouldn't tolerate it as an input either.
[20:01:42] <phogg> I would if you didn't say -u.
[20:02:01] <tirnanog> the specification of -u has no impact on the date parsing rules.
[20:02:37] <tirnanog> that was just to ensure that it was normalized to UTC.
[20:03:12] <phogg> but then you object to 16:00 UTC being called AM when the zone was really -05:00
[20:03:34] <tirnanog> it's too early for me to get into an argument. GNU date objects, and that's that.
[20:03:42] <phogg> indeed
[20:05:23] *** Joins: luva5 (~luva@146.70.62.246)
[20:05:43] <tirnanog> or, rather, the relevant portion of gnulib objects.
[20:05:59] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:06:08] *** Quits: nobody_ (~nobody@host-87-0-178-160.retail.telecomitalia.it) (Quit: Leaving)
[20:06:46] <phogg> I should probably take a read through the GNU date parsing logic in any case
[20:06:48] *** Quits: PeGaSuS (WeeChat@user/pegasus) (Remote host closed the connection)
[20:06:59] *** Quits: luva (~luva@146.70.62.252) (Ping timeout: 252 seconds)
[20:07:10] *** Joins: PeGaSuS (WeeChat@user/pegasus)
[20:07:40] *** Joins: joilerv (~joilerv@135.129.250.144)
[20:07:51] *** Joins: magla (~gelignite@55d4c694.access.ecotel.net)
[20:08:50] *** Joins: lavaball (felix@31.204.155.215)
[20:10:09] *** Quits: luva5 (~luva@146.70.62.246) (Ping timeout: 256 seconds)
[20:10:58] *** Joins: arinov (~arinov@77.67.137.202)
[20:11:18] <tirnanog> ok, I see what you were saying now. in my defence, I'm still fighting off the brain fog.
[20:12:32] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:12:36] <tirnanog> # LC_ALL=C date -u -d 'TZ="-0500" Sun Feb  6 11:16:31 AM 2022'
[20:12:37] <shbot> tirnanog: Sun Feb  6 11:16:31 UTC 2022
[20:12:45] <tirnanog> hmm.
[20:15:38] <tirnanog> I see. TZ="zone" works, but -0500 is a nonsense input in that context. it ends up being silently ignored.
[20:16:09] <phogg> huh, I thought I tried that with TZ but got the same response
[20:16:44] <tirnanog> # LC_ALL=C date -u -d 'TZ="EST" Sun Feb  6 11:16:31 AM 2022'
[20:16:45] <shbot> tirnanog: Sun Feb  6 11:16:31 UTC 2022
[20:17:03] <tirnanog> hmm. I'm getting different results.
[20:17:26] <tirnanog> maybe it's because the bot environment is lacking the relevant data.
[20:17:59] <phogg> My local results match the bot, and I am in UTC-5 myself
[20:18:25] <phogg> okay no, they don't always match the bot
[20:18:35] *** Joins: zebrag (~chris@user/zebrag)
[20:19:08] <phogg> this one gives me 16:16 UTC: LC_ALL=C date -u -d 'TZ="EST" Sun Feb  6 11:16:31 AM 2022'
[20:19:16] <tirnanog> right.
[20:19:20] <phogg> when I change EST to -500 I get 11:16
[20:19:23] <tirnanog> right.
[20:19:25] <phogg> er, -0500
[20:19:45] <grawity> remember offsets in TZ= are backwards
[20:20:01] *** Joins: luva5 (~luva@185.168.9.241)
[20:20:32] *** Joins: Lantizia (~Lantizia@195.62.201.126)
[20:20:54] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[20:21:03] <tirnanog> do you have an example of where it works at all then? I can't get anything to work other than the timezone names with this syntax.
[20:21:04] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:21:09] *** Joins: unop (~unop@195.91.14.193)
[20:23:13] <grawity> TZ=FOO-2 defines (not selects) a timezone with abbreviation 'FOO' and offset +2, see tzset(3)
[20:23:17] <tirnanog> oh, that.
[20:24:39] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[20:26:07] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:26:13] *** Joins: luva51 (~luva@146.70.62.252)
[20:26:55] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[20:28:06] *** Joins: tercaL (~tercaL@user/tercal)
[20:28:19] *** Joins: bluedust_ (~bluedust@59.99.182.45)
[20:28:59] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[20:29:54] <tirnanog> so, re-jiggling it so that "-05" becomes TZ="UTC+5" might be the best solution.
[20:29:59] *** Quits: luva5 (~luva@185.168.9.241) (Ping timeout: 256 seconds)
[20:29:59] *** luva51 is now known as luva5
[20:30:23] <tirnanog> or, at least it allows for 12hr timestamps to continue to be used.
[20:31:40] *** Quits: XV8 (~XV8@2601:5cb:c001:50:ac6c:2622:9107:8299) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:31:45] <grawity> all of this could be avoided if the original input wasn't in `date` format to begin with
[20:32:56] <tirnanog> I'd wager that particlar ship has sailed.
[20:33:21] <phogg> one day everyone will learn to date -Is
[20:33:26] <Earnestly> tirnanog: fwiw, I extracted all the date formats from my web feeds (rss, atom, rss:rdf) and these are all of them: https://0x0.st/oXN9.txt (most do follow rfc 822)
[20:33:35] <tirnanog> but yes, it's a silly format.
[20:33:57] *** Quits: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be) (Ping timeout: 240 seconds)
[20:34:00] <tirnanog> Earnestly: thanks. that is informative.
[20:34:40] <Earnestly> tirnanog: xslt if you ever want to replicate: https://0x0.st/oXNf.txt
[20:34:52] <phogg> down with RFC822, ISO8601 forever
[20:35:03] <phogg> Earnestly: sometimes you don't get zero padding on day of month
[20:35:44] <Earnestly> phogg: See if yours have any like that
[20:35:56] <phogg> I've run across them in the past, but it's uncommon
[20:36:28] <Earnestly> Could make a parser for this to generate strftime formats, hm
[20:36:51] <phogg> if you want to be defensive I would also allow for T being a space, because that's actually allowed by ISO8601
[20:37:00] *** Quits: tercaL (~tercaL@user/tercal) (Quit: halt -p)
[20:37:31] <Earnestly> phogg: That's from RFC3339, which is ISO8601 except they allow T to be a space
[20:37:40] <Earnestly> idkw
[20:37:41] *** Quits: lavaball (felix@31.204.155.215) (Ping timeout: 256 seconds)
[20:37:54] <phogg> because functionally people hate the T and like whitespace there
[20:38:10] <Earnestly> I suppose, but then RFC822 is even more humane
[20:38:37] <grawity> fwiw ISO8601 allows the dashes in YYYY-MM-DD being absent, and the colons in HH:MM being absent, and they allow "week dates" like 1985-W15-5
[20:38:47] <phogg> Earnestly: even more wildly inconsistent? Yes
[20:39:15] <phogg> the week date part is not attractive, but the hyphens and colons are pretty much only useful for human eyeballs anyway
[20:39:37] *** Joins: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be)
[20:39:59] <grawity> compared to that, RFC3339 is much more consistent
[20:40:13] <phogg> Earnestly: yes, you are right it is 3339 which allows space (my mistake).
[20:40:29] <grawity> plus you don't have to pay to read it
[20:40:35] <tirnanog> grawity: I started using iso weeks for my log file naming. that reminds me, I need to file a report with syslog-ng (ISOWEEK without the existence of ISOYEAR is a problem).
[20:40:48] <Earnestly> Oh true, I should have mentioned that.  3339 is iso8601's YY-MM-dd... format, but with optional T (I keep forgetting all the other formats 8601 has)
[20:41:34] <Earnestly> Also yes, should avoid ISO
[20:41:57] <Earnestly> Is there a known tool which converts date strings to strftime notation?  I can't find any
[20:42:24] <Earnestly> E.g. tab["Sun"] = "%a"
[20:42:38] <Earnestly> 'Sun, ...' => '%a, ...'
[20:42:51] <phogg> pretty sure I've written one of those at one point, but likely there are others written better
[20:43:07] <phogg> it gets messy when you start supporting multiple locales
[20:43:23] <ormaaj> rfc3339 allows upper and lower case T and Z
[20:43:26] *** luva5 is now known as luva
[20:43:29] <Earnestly> phogg: That sentence is evergreen
[20:43:55] <grawity> we have a service that sends BSD syslog
[20:44:10] <grawity> but the dates in its syslog messages are localized
[20:44:20] *** Joins: XV8 (~XV8@2601:5cb:c001:50:55bf:899a:1885:9527)
[20:44:34] <grawity> so it has to go through a python hack that has a lookup table of localized months => english months
[20:44:37] *** Joins: Alternity7 (~Alternity@user/alternity)
[20:44:39] <grawity> before going into syslog-ng
[20:44:48] *** Quits: Alternity (~Alternity@user/alternity) (Read error: Connection reset by peer)
[20:44:48] *** Alternity7 is now known as Alternity
[20:45:03] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:45:21] *** Joins: jaggz (~jaggz@user/jaggz)
[20:45:40] <jaggz> I need to make a script for this -- wasn't there a way to tell which script created a variable?
[20:45:51] <jaggz> I have some in my env  FOO=whatever, and I can't find what the heck is setting them
[20:45:54] <ormaaj> oh wait you're talking iso8601. I saw you were using XSL and figured you'd be comparing against xsd:datetime or w3cdtf
[20:46:12] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[20:47:01] <Earnestly> jaggz: environment variables are another matter, you can walk up the process tree using PPID until the process' environ doesn't contain FOO.  This might be tricky though as environ file isn't updated if program uses setenv(3) during runtime
[20:47:16] <Earnestly> (on linux anyway)
[20:47:45] <jaggz> hmmm
[20:48:00] <jaggz> just the first level of shell and here I am
[20:48:02] *** Quits: Alternity (~Alternity@user/alternity) (Client Quit)
[20:48:09] <jaggz> maybe I'll put some debug echo; exit's in
[20:48:26] <Earnestly> first level of shell?  So your login shell?
[20:48:37] <Earnestly> SHLVL is a thing, so hope to not confuse
[20:48:53] <jaggz> return || exit?
[20:49:00] <jaggz> well, no.. good point
[20:49:30] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[20:49:36] <jaggz> [[ $_ != $0 ]] && return || exit 1
[20:49:38] <Earnestly> tirnanog: I'm slightly disturbed when looking at w3c resources and virtually every external link is dead
[20:49:46] *** beco is now known as drbeco
[20:49:49] *** Joins: Alternity (~Alternity@user/alternity)
[20:49:54] <Earnestly> tirnanog: E.g. https://validator.w3.org/feed/docs/warning/ProblematicalRFC822Date.html
[20:50:00] <tirnanog> Earnestly: saddening.
[20:50:15] <Earnestly> archiveteam/internetarchive are massive heros
[20:50:30] <tirnanog> yes, absolutely.
[20:50:55] <jaggz> what's $_?
[20:51:06] *** Quits: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[20:51:12] <emanuele6> !$_
[20:51:12] <greybot> "$_" expands to the last argument to the previous command, after expansion (man bash, Special Parameters)
[20:51:16] <jaggz> bash manpage only shows it in MAILFILE information section
[20:51:17] <jaggz> thanks
[20:51:22] <grawity> hmm
[20:51:26] <grawity> does ash have $_ as well
[20:51:41] <emanuele6> i don't know. but it is not POSIX.
[20:52:07] <emanuele6> busybox sh has it so probably ash does aswell
[20:52:13] <Earnestly> tirnanog: Seems like they couldn't capture https://web.archive.org/web/20100701000000*/http://groups.yahoo.com/group/rss-public/message/536
[20:52:16] <Earnestly> Could have been nice
[20:52:24] <tirnanog> jaggz: MANPAGER='less +/^[[:space:]]*_' man bash
[20:52:27] <phogg> Earnestly: they do update them if you point it out (or they have done so in the past)
[20:52:29] <tirnanog> might tell you.
[20:52:56] <Earnestly> phogg: It's not often a case of them being out of date, just that the links have rotted
[20:53:11] *** Joins: A|an (~Alan@173.218.175.171)
[20:53:31] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[20:53:39] <phogg> Earnestly: that's what I mean, fixing dead links to living alternatives
[20:53:45] <Earnestly> No alternative
[20:53:51] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:53:55] <Earnestly> Is just dead, gone.  Not even on IA
[20:54:29] <phogg> still linking to yahoo groups is a bit of a problem these days
[20:54:37] <Earnestly> > the military time zones are specified incorrectly in RFC-822: they count the wrong way from UT (the signs are reversed). As such, they shoud be avoided.
[20:54:55] <tirnanog> Earnestly: https://datahorde.org/how-to-recover-your-yahoo-groups-from-the-internet-archive/ suggests a method to obtain yahoo groups posts from archive.org.
[20:55:03] <Earnestly> Hmm
[20:55:30] <Earnestly> Oh, archiveteam.  Yeah sure I should check them too
[20:57:05] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[21:01:15] <jaggz> yeah, the vars were set from my x11 login
[21:01:16] <jaggz> or whatever
[21:01:33] <jaggz> whatever was before my konsole :)
[21:01:36] <jaggz> thanks :)
[21:03:11] *** Quits: arinov (~arinov@77.67.137.202) (Ping timeout: 256 seconds)
[21:05:32] *** Joins: fef (~thedawn@user/thedawn)
[21:06:41] <Earnestly> tirnanog: extracted https://0x0.st/oXNw.txt from https://archive.org/download/yahoo-groups-2018-01-02T11-40-03Z-20850f
[21:06:55] <tirnanog> ah, splendid.
[21:11:37] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[21:13:47] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[21:14:48] <Celmor[m]> when ctrl-r'ing a few times and failing to find or mis-typing it seems a "pointer" in the history is set to the last entry shown, how do I reset it to the end so I can ctrl-r anew and find last commands and not only ones above this "pointer"?
[21:15:05] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[21:15:50] *** Joins: cliluw (~cliluw@47.147.73.223)
[21:17:24] <tirnanog> C-g will abort the search.
[21:18:25] <Celmor[m]> thanks
[21:20:12] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[21:21:06] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[21:21:34] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:23:16] *** XV8 is now known as XV8_Away
[21:24:08] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:24:27] *** Quits: kilitary (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[21:26:40] *** XV8_Away is now known as XV8
[21:27:03] *** Joins: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:27:09] *** XV8 is now known as XV8_Away
[21:27:28] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[21:27:36] *** Quits: cityape (~cityape@user/cityape) (Quit: Going to sleep. ZZZzzzâ€¦)
[21:27:50] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[21:28:15] *** XV8_Away is now known as XV8
[21:28:25] *** Joins: unop (~unop@195.91.14.193)
[21:29:32] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[21:30:19] <Earnestly> tirnanog: https://0x0.st/oXN0.txt
[21:30:27] *** Joins: zeev (~zeev@147.161.9.150)
[21:30:38] *** Quits: sinaowolabi (~SinaOwola@41.58.227.62) (Ping timeout: 260 seconds)
[21:30:42] *** Joins: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be)
[21:30:56] <Earnestly> Assuming posix locale
[21:30:57] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[21:30:58] <tirnanog> Earnestly: smooth.
[21:31:25] <tirnanog> I can see why you wanted that utiltiy now, heh.
[21:32:28] <Earnestly> No this is manual
[21:32:34] <Earnestly> javascript has such functions though
[21:32:47] <Earnestly> But it doesn't produce formats, it produces mktime
[21:32:51] <tirnanog> granted, but it puts the request into context.
[21:33:11] *** Quits: zeev (~zeev@147.161.9.150) (Client Quit)
[21:33:37] *** Joins: zeev (~zeev@147.161.9.150)
[21:33:54] *** Quits: luckiswithme (~luckiswit@149.167.139.151) (Remote host closed the connection)
[21:36:54] *** Joins: k8yun__ (~k8yun@24.244.29.99)
[21:39:57] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[21:40:29] *** Quits: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 250 seconds)
[21:43:28] *** Joins: lavaball (felix@31.204.155.215)
[21:44:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:45:30] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:3caf:1512:480a:ea92)
[21:46:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:46:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:48:07] *** Joins: arinov (~arinov@213.194.126.155)
[21:48:32] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:51:55] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:52:01] *** Joins: kilitary (~kilitary@188.242.105.134)
[21:54:56] *** Quits: XV8 (~XV8@2601:5cb:c001:50:55bf:899a:1885:9527) (Quit: Textual IRC Client: www.textualapp.com)
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:57:24] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[21:58:43] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[21:59:28] *** Joins: cliluw (~cliluw@47.147.73.223)
[21:59:49] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[21:59:54] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[22:00:10] *** Quits: mannequin (uid453465@id-453465.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:00:11] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:01:15] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:04:05] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[22:04:14] *** Quits: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be) (Ping timeout: 260 seconds)
[22:05:46] *** Joins: larryv (~larryv@zsh/patchmanager/larryv)
[22:09:39] *** Quits: tangy (~tangy@user/tangy) (Remote host closed the connection)
[22:10:04] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[22:12:15] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:14:26] *** Joins: cityape (~cityape@user/cityape)
[22:18:14] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[22:22:08] *** Quits: edlou (uid413273@id-413273.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:22:39] *** Quits: magla (~gelignite@55d4c694.access.ecotel.net) (Read error: Connection reset by peer)
[22:22:57] *** Joins: magla (~gelignite@55d4c694.access.ecotel.net)
[22:24:41] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:25:12] *** Joins: Betal (~Betal@user/betal)
[22:27:06] *** Quits: cityape (~cityape@user/cityape) (Quit: Going to sleep. ZZZzzzâ€¦)
[22:27:13] *** Joins: migul (~mig@user/migul)
[22:34:46] *** Joins: sinaowolabi (~SinaOwola@41.58.49.9)
[22:35:06] *** Joins: arinov_ (~arinov@213.194.126.155)
[22:36:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[22:36:41] <ormaaj> I thought a lot of the yahoo groups moved to groups.io
[22:38:04] <ormaaj> No archives of old content though.
[22:39:52] *** Parts: Edu4rdSHL (~Edu4rdSHL@user/edu4rdshl) (WeeChat 3.4)
[22:41:39] *** Joins: crashrep (~crashrep@user/crashrep)
[22:45:01] *** Quits: migul (~mig@user/migul) (Quit: Leaving)
[22:45:10] *** Joins: l4yer (~l4yer@2001:ac8:31:8900:1011:59fd:b6e1:4ba0)
[22:47:06] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[22:47:41] *** Quits: Kruppt (~Kruppt@50-111-52-16.drhm.nc.frontiernet.net) (Quit: Leaving)
[22:52:27] <Earnestly> tirnanog: scuffed but handles all the dates I have https://0x0.st/oXqv.bin
[22:52:29] <checkbot> Earnestly: I think the problem is on line 4. Remove spaces around = to assign (or use [ ] to compare, or quote '=' if literal). See 68 issues on https://shellcheck.net/?id=cb75349
[22:52:39] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Quit: WeeChat 3.3)
[22:53:08] <Earnestly> koala_man: checkbot might benefit from reading shebang
[22:53:18] <tirnanog> saved. might come in handy one day.
[22:53:50] <Earnestly> tirnanog: I'll also note then: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse
[22:53:54] <Earnestly> I wonder
[22:54:27] <Earnestly> tirnanog: js78 works with Date.parse
[22:55:10] <ormaaj> heh shellcheck looks at shebang but not checkbot :/
[22:55:34] <ormaaj> it must at least look to see that there is a shebang or it would complain about every paste
[22:56:47] <Blondie101010> that would not be a problem either way
[22:56:54] *** Joins: azerty (~qwerty@user/badwolf)
[22:56:54] *** Quits: azerty (~qwerty@user/badwolf) (Client Quit)
[22:57:19] *** Quits: sinaowolabi (~SinaOwola@41.58.49.9) (Ping timeout: 256 seconds)
[22:58:46] <Earnestly> tirnanog: js78 -e 'print(Date(Date.parse(scriptArgs)));' -- '04 Dec 1995 00:12:00 GMT'
[22:58:48] <Earnestly> Sun Feb 06 2022 19:28:38 GMT+0000 (Greenwich Mean Time)
[22:58:56] <Earnestly> lol
[22:58:59] <Earnestly> nevermind
[22:59:07] <Earnestly> TIL javascript has no strftime
[22:59:27] *** Joins: john_johnk (~Thunderbi@232.58.140.77.rev.sfr.net)
[22:59:29] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[22:59:42] *** Quits: unop (~unop@195.91.14.193) (Remote host closed the connection)
[22:59:57] *** Joins: unop (~unop@195.91.14.193)
[23:00:07] <Blondie101010> why do you mix bash, JS, and awk?
[23:00:38] <ormaaj> loony
[23:00:50] <Earnestly> I'm not mixing any of them
[23:00:55] <grawity> at least it has .toISOString() and .toUTCString()
[23:01:32] <grawity> and .getTime() if you want epoch
[23:01:56] <Earnestly> Hm, I found those but am struggling.  I can't use it as mothod from Date.parse(...).toUT...();
[23:01:59] <Earnestly> method*
[23:02:59] <Earnestly> js78 -e 'dt = new Date(Date.parse(scriptArgs)); print(dt.toISOString());' -- '04 Dec 1995 00:12:00 GMT'
[23:03:01] <Earnestly> 1995-12-04T00:12:00.000Z
[23:03:05] <Blondie101010> is that a JS question in #bash ?
[23:03:19] *** Quits: polve (~polve@user/polve) (Ping timeout: 256 seconds)
[23:03:47] <grawity> yes
[23:03:53] *** Quits: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de) (Quit: WeeChat 3.4)
[23:04:11] <grawity> Earnestly: js78 -e 'print(new Date(Date.parse(scriptArgs)).toISOString());' -- '04 Dec 1995 00:12:00 GMT
[23:04:12] <grawity> '
[23:04:26] <Earnestly> Fair point
[23:04:59] *** Quits: ghostboarder (~quassel@user/ghostboarder) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:05:19] <grawity> always found 'new Foo().bar()' weird but it works
[23:06:05] <ormaaj> seems reasonable
[23:06:10] <Earnestly> I was not sure about the 'new' in that
[23:06:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:06:52] <Blondie101010> which is why you should learn each language seperately first
[23:06:58] *** Quits: k8yun__ (~k8yun@24.244.29.99) (Quit: Leaving)
[23:07:13] <ormaaj> js new is weird.
[23:07:27] <Blondie101010> it's "regular" OO
[23:07:43] <grawity> syntax-wise, in JS it's parsed as '(new Foo()).bar()', even though 'new (Foo().bar)()' is what I'd expect
[23:07:56] <Earnestly> grawity: scriptArgs appears to be a list, so [0] or loop might make this a useful tool for parsing dates
[23:08:12] <znf> dumb non-bash related question - how do you tell `sort` to sort by actual numeric value, so 870 comes /before/ 88?
[23:08:24] <znf> -n doesn't seem to be doing it
[23:08:27] <grawity> sort -V, if you have GNU
[23:08:43] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Remote host closed the connection)
[23:08:48] <grawity> I also carry around a natsort.c that I found on the internet
[23:08:54] <znf> ah
[23:08:55] <Blondie101010> sort -n does order those 2 keys properly
[23:09:03] <znf> "natural sorting" is what I was looking for
[23:09:08] *** Joins: polve (~polve@user/polve)
[23:09:19] <Blondie101010> so the example you gave is not good
[23:09:28] <tirnanog> 870 before 88 wouldn't be sorting by numeric value, would it.
[23:09:52] <Earnestly> js78 -e 'for(const d of scriptArgs) print(new Date(Date.parse(d)).toISOString())' -- '04 Dec 1995 00:12:00 GMT' 'Fri, 04 Feb 2022 00:00:00 -0600'
[23:09:56] <znf> oh wait, I'm dumb, I used -k2
[23:10:02] <grawity> there are cases that -n can't handle, like when the numbers aren't in a field by themselves
[23:10:25] <grawity> but e.g. "myfile100" "myfile45" "myfile6"
[23:10:31] <znf> wrong column, my bad
[23:11:11] <Earnestly> Or scriptArgs.forEach(date => print(new Date(Date.parse(date)).toISOString())) # works too
[23:11:30] <Earnestly> tirnanog: ^ fwiw
[23:11:31] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[23:11:33] <grawity> I wish I could offer perl but unfortunately even POSIX::strptime is in CPAN :(
[23:11:42] <tirnanog> Earnestly: ah. is js78 the thing that politiciankit started supporting?
[23:11:44] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[23:11:59] <Earnestly> Date.parse() tries to handle weird dates too, I'm not sure of many tools which do
[23:12:18] <Earnestly> tirnanog: > cjs  couchdb  gjs  plowshare  polkit
[23:12:27] <tirnanog> interesting. I must take a look.
[23:13:00] <Earnestly> tirnanog: It's core of Gnome's javascript engine (spidermonkey)
[23:13:29] <grawity> js78 is usually there for polkit, yes
[23:13:40] <grawity> oh gjs uses the same version too
[23:13:57] <Earnestly> T_T I bet it has request API, XML parsers, etc. as well.  It tempts me!
[23:14:06] <Blondie101010> Earnestly:  most date parsers are designed to support anything they can guess, even if the input is not clearly defined
[23:14:16] <Earnestly> Blondie101010: Can you show me some?
[23:14:25] <Blondie101010> that means that you should always use the most logical and consistent format
[23:14:28] <Earnestly> Ideally a command-line tool
[23:14:32] *** Joins: edlou (uid413273@id-413273.helmsley.irccloud.com)
[23:14:41] <Blondie101010> be explicit in your rules
[23:14:53] *** Quits: zeev (~zeev@147.161.9.150) (Ping timeout: 256 seconds)
[23:15:36] <Earnestly> grawity: jq has a strptime function btw
[23:15:37] <Blondie101010> is "01/02/03" in 2003 or 2001? is the month 1 or 2?  is the day 1, 2, or 3?
[23:15:51] <Blondie101010> just be explicit
[23:17:37] <tirnanog> Earnestly: my mistake. I was thinking of duktape.
[23:20:10] <Earnestly> tirnanog: The mad genius of tcc fame also make qjs
[23:20:50] <Earnestly> made*
[23:20:50] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[23:21:26] <tirnanog> ah, bellard. yes, I can well imagine him knocking it up such a thing over breakfast.
[23:22:03] <ormaaj> qjs is quite nice
[23:23:25] <grawity> I have no idea what tcc is but somehow I knew it had to be the jslinux guy
[23:24:44] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:25:27] *** Joins: ali (~ali@ptr-99ug59141rgbz9y8km3.18120a2.ip6.access.telenet.be)
[23:27:10] *** Joins: ChmEarl (~chmearl@user/chmearl)
[23:28:26] <ormaaj> its os interface features in particular are pretty cool
[23:34:01] *** Quits: totenkoph (~scythe@user/totenkoph) (Remote host closed the connection)
[23:34:52] *** Joins: totenkoph (~scythe@user/totenkoph)
[23:34:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:41:42] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Ping timeout: 276 seconds)
[23:48:38] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[23:50:37] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:50:59] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[23:51:18] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:51:31] <Earnestly> grawity: tinycc, the c compiler by bellard (ffmpeg guy)
[23:52:04] <Earnestly> https://bellard.org/quickjs/
[23:52:23] <ormaaj> prolific dude
[23:52:30] <grawity> aha, so the jslinux guy
[23:52:34] <Earnestly> Yeah
[23:52:43] <ormaaj> yep
[23:53:22] <Earnestly> https://bellard.org/quickjs/quickjs.html#os-module hmm
[23:53:23] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[23:53:30] <ormaaj> also the huge pi calculation guy. I guess that's probably been massacred by now but was impressive at the time
[23:54:08] <Earnestly> Also qjs is fast, naturally
[23:54:09] <ormaaj> Earnestly: yes that :)
[23:54:22] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 260 seconds)
[23:54:57] <e36freak> Earnestly: i would bet small compilers like that don't optimize very well though
[23:55:42] <Earnestly> e36freak: It doesn't beat v8, JIT or not.  JIT is massive though
[23:56:07] <Earnestly> Yeah https://bellard.org/quickjs/bench.html
[23:56:14] <Earnestly> (higher number = betterer)
[23:56:18] <Earnestly> (except size)
[23:57:04] <Earnestly> Apparently though the problem with qjs is the API for using it in embedded environments; either it was too low level or not low enough, can't remember.  But it's apparently the main reason not many use it
[23:57:04] *** Quits: kilitary (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[23:57:30] <ormaaj> optimization is pretty arch-centric or can be. Pretty much anything with a custom backend (i.e. not llvm or other very mature backend) is going to be not the best without a ton of effort
[23:58:20] <Earnestly> Yet in many cases you can get 80-90% of the way there without much difficulty (relatively)
[23:58:48] <ormaaj> yeah. especially if you're not concerned with auto vectorization
