[00:00:11] <FromDiscord> <leorize> alternatively you use a type with `=destroy` defined to store your files (`nim-sys` has one, but it doesn't have filesystem api yet)
[00:00:22] <FromDiscord> <@bracketmaster-5a708063d73408ce4> actually - it appears nim has destroy which may work for my purposes
[00:00:45] <FromDiscord> <haxscramper> Doesn't seem like that. But you can raise in https://nim-lang.org/docs/system.html#setControlCHook%2Cproc%29
[00:00:59] <FromDiscord> <Bung> maybe create global router when call custom pragma then merge that module's router to current router
[00:01:00] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/ImO
[00:05:28] *** Parts: nerthus (~nerthus@85.149.146.5) (Leaving)
[00:06:10] <FromDiscord> <haxscramper> I personally would opt for a more explicit API where user annotates things that participate in routing using either `{.push` or manual pragma
[00:06:38] <FromDiscord> <haxscramper> And it would make the job of collecting routed procs easier
[00:07:39] <FromDiscord> <Bung> I have custom pragma but it only for one proc
[00:07:57] <FromDiscord> <Bung> it used like `r.addRoute(handler)`
[00:10:01] <FromDiscord> <Bung> like you suggested, I'd  implement a macro `routes`: let user put all procs inside it, and create a global router or map, then merge current app router with that global exported variable.
[00:10:56] <FromDiscord> <Bung> think unless tim's pr get merged , no perfect solution.
[00:19:43] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3qtQ
[00:20:11] <FromDiscord> <haxscramper> Seems like you can't `push` custom pragma after all, or at least no in this confguration
[00:20:46] <FromDiscord> <haxscramper> But it creates a local compiletime list of routed procs, allows the user to register it, and then provides a way to finalize implementation.
[00:21:52] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3qtR
[00:22:00] *** Joins: SebastianM (~seba@user/sebastianm)
[00:22:28] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3qtS
[00:22:42] <FromDiscord> <haxscramper> Module only exposes `initForModule` proc that fills in available routing procs
[00:24:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3qtT
[00:24:31] <FromDiscord> <mlokis> yes but i em generating code with macro
[00:24:57] <FromDiscord> <mlokis> i ll show output code
[00:26:04] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3qtV
[00:26:06] <FromDiscord> <mlokis> and the exted mentod:
[00:26:38] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3qtY
[00:27:15] <FromDiscord> <mlokis> i have to try this outside of macro
[00:27:22] <FromDiscord> <Bung> @haxscramper oh, yes, no need extro block.
[00:28:05] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3qu2
[00:28:09] <FromDiscord> <mlokis> yes
[00:28:14] <FromDiscord> <mlokis> wait
[00:28:16] <FromDiscord> <mlokis> no
[00:28:19] <FromDiscord> <mlokis> thenx
[00:28:35] <FromDiscord> <mlokis> i though i don need ref if Content is ref
[00:29:25] <FromDiscord> <haxscramper> I don't remember how it works, but parent being `ref object of`  does not automatically make all derived objects ref as well
[00:29:28] <FromDiscord> <mlokis> it worked
[00:29:56] <FromDiscord> <mlokis> i assumed as always and got fucked again
[00:30:04] <FromDiscord> <mlokis> ty
[00:33:18] <FromDiscord> <dom96> There we go: https://nim-lang.org/blog/2021/06/19/new-community-home.html
[00:33:20] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:33:28] <FromDiscord> <Zachary Carter> Oh, I forgot about this forum post I made, but - https://forum.nim-lang.org/t/7921#51451
[00:34:48] <FromDiscord> <Zachary Carter> Would be really nice to have some kind of calendar where nim related events could be posted
[00:35:07] <federico3> +1 !
[00:35:12] <FromDiscord> <Zachary Carter> Since it now seems that meetups and conferences will at least be an annual thing
[00:35:43] <FromDiscord> <dom96> agree, should be doable with a public G calendar maybe?
[00:35:47] <FromDiscord> <dom96> Wanna create one? 😄
[00:36:08] <federico3> or just put an ical file on the website
[00:36:18] <FromDiscord> <Zachary Carter> yeah that might be the best option
[00:38:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[00:43:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:44:51] <FromDiscord> <Elegant Beef> Is there a matrix community setup yet?
[00:45:15] <FromDiscord> <dom96> yep
[00:45:21] <FromDiscord> <dom96> read my post above lol
[00:45:42] <FromDiscord> <Elegant Beef> It doesnt mention the community
[00:46:43] <FromDiscord> <Elegant Beef> At least on element communities are groupings of channels
[00:47:06] <FromDiscord> <Elegant Beef> I figure it's apart of the protocol though 😛
[00:50:11] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3qu6
[00:51:31] <FromDiscord> <planetis> no word about the talks yet?
[00:51:57] <FromDiscord> <dom96> In reply to @Elegant Beef "It doesnt mention the": There is a link to matrix in there
[01:02:37] *** Joins: max22- (~maxime@2a01cb088335980051b788ecee99962a.ipv6.abo.wanadoo.fr)
[01:05:27] <FromDiscord> <Elegant Beef> Ah so i was on an old version of element which didnt support spaces \:D
[01:06:06] <FromDiscord> <lyiriyah> Yes, Spaces are nightly only I think
[01:11:11] <FromDiscord> <planetis> That link at the end was a good read
[01:12:53] <FromDiscord> <planetis> you need to opt in to spaces beta
[01:13:09] <FromDiscord> <Elegant Beef> Yea i've got it
[01:13:28] <FromDiscord> <Elegant Beef> Old version of element due to updating my distro, caused vast confusion
[01:17:56] <FromDiscord> <dom96> In reply to @planetis "That link at the": Yay. Glad you enjoyed it. It is quite inspirational
[01:28:03] <FromDiscord> <lyiriyah> About the calendar, maybe something like AgenDAV would work
[01:28:30] <FromDiscord> <lyiriyah> https://github.com/agendav/agendav
[01:29:08] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 252 seconds)
[01:33:28] <FromDiscord> <Varriount> @dom96Bot Is it known that Nimble won't work when the Nim compiler is in a path that contains spaces?
[01:36:19] <FromDiscord> <Varriount> Also, why does Nimble check whether a binary is in the path before executing it? Why not just attempt to execute it?
[01:37:45] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3quk
[01:40:57] <FromDiscord> <Bung> sent a code paste, see https://play.nim-lang.org/#ix=3qul
[01:41:19] <FromDiscord> <Bung> when i attach this pragma multiple times `Error: ambiguous call;`
[01:41:58] <FromDiscord> <Bung> if I don't comment when not declared(`mount`), then Error: internal error: expr: var not init
[01:43:27] <FromDiscord> <Bung> router is var `router` {.compileTime.}: seq[NimNode]
[01:45:42] <FromDiscord> <dom96> In reply to @Varriount "<@!132595483838251008> Is it known": I recall seeing similar issues. But this would be a bug in Nim’s stdlib I think
[01:46:34] <FromDiscord> <Kermithos> hi, I tried todo a post request via the httpclient but the response looks like it didnt got decoded or something, in python it works just fine. Any idea how I can fix that? https://media.discordapp.net/attachments/371759389889003532/855919004334161991/unknown.png
[01:48:34] <FromDiscord> <Elegant Beef> What are you trying to post?
[01:49:01] <FromDiscord> <Kermithos> multipart
[01:49:32] <FromDiscord> <Kermithos> sent a code paste, see https://play.nim-lang.org/#ix=
[01:49:47] <FromDiscord> <Bung> do u use gzip ?
[01:49:56] <FromDiscord> <Kermithos> no
[01:51:19] <FromDiscord> <Bung> maybe the server side reponse gzip that you dont aware
[01:51:44] <FromDiscord> <Kermithos> hm, but why does python encode it properly
[01:52:19] <FromDiscord> <Kermithos> 'Content-Encoding': 'gzip'}
[01:52:22] <FromDiscord> <Bung> python lib can handle gzip and respect content encoding
[01:52:23] <FromDiscord> <Kermithos> looks like you are right
[01:52:33] <FromDiscord> <Kermithos> is there a way todo this in nim?
[01:52:33] <FromDiscord> <Bung> well , httpclient dont
[01:53:45] <FromDiscord> <Bung> you can get raw body , use zippy lib decode yourself
[01:54:06] <FromDiscord> <Kermithos> aight, will try that. thanks
[01:54:23] <FromDiscord> <Elegant Beef> You also can use puppy https://github.com/treeform/puppy
[01:54:32] <FromDiscord> <Elegant Beef> It supports gzip directly out of the http request
[02:00:32] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:01:09] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 265 seconds)
[02:02:50] *** Gustavo6046_ is now known as Gustavo6046
[02:07:51] <FromDiscord> <Bung> https://github.com/bung87/scorper/blob/mount/src/scorper/http/routermacros.nim
[02:08:01] <FromDiscord> <Bung> please help me with this
[02:15:10] *** Quits: max22- (~maxime@2a01cb088335980051b788ecee99962a.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:17:15] <FromDiscord> <dom96> In reply to @Kermithos "hm, but why does": Have you tried using the Accept-Encoding header?
[02:18:48] <FromDiscord> <dom96> If it works we should make httpclient send it
[02:29:35] *** Joins: Torr (~Torr@user/torr)
[02:30:25] *** Parts: Torr (~Torr@user/torr) ()
[02:40:15] <FromDiscord> <Varriount> In reply to @dom96 "I recall seeing similar": Nope: https://github.com/nim-lang/nimble/blob/master/src/nimblepkg/tools.nim#L9↵If the path where Nim is located contains a space, then that procedure will cut it off. Quotes can't be used in this case, because the path is normally derived from the PATH environment variable, where quotes are treated as part of the actual path components.
[02:41:19] <FromDiscord> <Varriount> In this case, rather than using single strings to represent the commands to be run, Nimble should really be using string sequences.
[02:46:27] <FromDiscord> <Varriount> Anyone know what happens if an exception is thrown in a `defer` block? Do the other `defer`s run?
[03:00:06] <FromDiscord> <Elegant Beef> Hmm no way to get all types that inherit from a given type is there?
[03:02:45] <FromDiscord> <Bung> only one level inherit right?
[03:03:46] <FromDiscord> <Bung> oh multi level.
[03:04:02] <FromDiscord> <Avahe> Hmm irc bridge not working, again
[03:05:24] <FromDiscord> <dom96> In reply to @Avahe "Hmm irc bridge not": How so?
[03:06:32] <FromDiscord> <Avahe> I don't see any messages in irc since this morning
[03:07:13] <FromDiscord> <dom96> Oh. You’re in freenode?
[03:07:26] <FromDiscord> <dom96> In reply to @dom96 "There we go: https://nim-lang.org/blog/2021/06/19/n": See this
[03:09:32] <FromDiscord> <Avahe> Yeah I'm on freenode. We not bridging there anymore?
[03:12:34] <FromDiscord> <dom96> In reply to @Avahe "Yeah I'm on freenode.": https://nim-lang.org/blog/2021/06/19/new-community-home.html
[03:13:30] <FromDiscord> <Avahe> Saw that, still wondering if we're stopping the bridge to freenode
[03:13:45] <FromDiscord> <Avahe> Or if it's just down again
[03:13:53] <FromDiscord> <dom96> We are.
[03:14:09] <FromDiscord> <dom96> I moved it to Liberia
[03:14:14] <FromDiscord> <dom96> (edit) "Liberia" => "Libera"
[03:14:35] <FromDiscord> <Avahe> Any objection to me making a bridge between the two irc channels?
[03:15:47] <FromDiscord> <dom96> I don’t see why we should bother tbh
[03:16:30] <FromDiscord> <Avahe> I'm going to be on freenode, along with some other folks. And I really dislike using discord
[03:16:42] <FromDiscord> <dom96> Why not move to libera?
[03:17:26] <FromDiscord> <Avahe> Many reasons, but I don't think that matters here. Just trying to maintain communication with to community
[03:17:36] <FromDiscord> <Avahe> (edit) "to" => "the"
[03:20:10] <FromDiscord> <dom96> Well I’d like to know since we’ve moved to Libera. Is there something about Freenode I missed?
[03:21:20] <FromDiscord> <Avahe> People (like myself) will be on freenode and not on Libera. Will you ban a relay bot if I set it up between the two networks?
[03:23:54] <FromDiscord> <dom96> I just don't understand why you're so intent on sticking to Freenode
[03:24:03] <FromDiscord> <Zachary Carter> There are two sides to every story
[03:24:17] <FromDiscord> <Zachary Carter> and maybe some of the communities they are a part of decided to stay put
[03:24:35] <FromDiscord> <dom96> I would be really interested to hear the other side of the story
[03:24:46] <FromDiscord> <Zachary Carter> It's there on the internet
[03:24:46] <FromDiscord> <dom96> We spent a long time waiting to see this develop before taking a decision
[03:25:22] <FromDiscord> <dom96> And have actually moved comparatively late to other communities
[03:25:48] <FromDiscord> <Avahe> My reason for staying on freenode is going to change your answer about a relay bot?
[03:26:35] <FromDiscord> <dom96> No, feel free to set one up
[03:26:40] <FromDiscord> <Avahe> Thanks
[03:26:46] <FromDiscord> <dom96> I still want to know though
[03:27:04] <FromDiscord> <dom96> Again, the reason is because I want to make sure we didn't make a mistake moving to Libera
[03:27:18] <FromDiscord> <dom96> I want to know what I missed
[03:28:03] <FromDiscord> <Zachary Carter> I don't know Avahe's reason, I just have read both sides of the story from both sets of parties involved. If their reasoning has anything to do with it 🙂
[03:28:08] <FromDiscord> <Avahe> I read both sides and don't agree with the decision to create a new network, it just split the freenode community. I didn't see a real reason that warranted the decision
[03:28:10] <FromDiscord> <Zachary Carter> by it I mean the dispute
[03:28:40] <FromDiscord> <davide. φ> https://linux.chat/linux-on-freenode/
[03:29:28] <FromDiscord> <Avahe> Headline is sensationalized, people haven't been reading or paying attention
[03:29:46] <FromDiscord> <dom96> Starting fresh on Freenode's part already was far worse than splitting into a separate network.
[03:30:01] <FromDiscord> <Avahe> I disagree completely
[03:30:05] <FromDiscord> <dom96> And I know it happened afterwards
[03:30:13] <FromDiscord> <dom96> but that is what forced me to take action
[03:30:33] <FromDiscord> <Zachary Carter> My problem with all of this is the lack of logs / screenshots of verifiable interactions
[03:30:33] <FromDiscord> <dom96> since they literally kicked NimBot off
[03:30:57] <FromDiscord> <dom96> @Zachary Carter honestly, all you need to do is read some of the comment exchanges that are public on HN or otherwise
[03:31:03] <FromDiscord> <Zachary Carter> I've read through all of that
[03:31:09] <FromDiscord> <Zachary Carter> there's too much heresay
[03:31:21] <FromDiscord> <Avahe> ^
[03:32:16] <FromDiscord> <Zachary Carter> there's this actor, this chick that sold freenode and supposedly freenode wasn't able to be sold for whatever reason, but because she needed money she did it without telling anyone
[03:32:35] <FromDiscord> <Zachary Carter> then there's the dude that bought it, andrew or whatever, who decided that the thing he paid money for should be run differently
[03:32:50] <FromDiscord> <dom96> Forget all the hearsay, there are two verifiable actions: taking over accounts, starting fresh
[03:33:05] <FromDiscord> <Zachary Carter> I mean, the guy legitimately owns the thing
[03:33:09] <FromDiscord> <Zachary Carter> they can do whatever they want with it
[03:33:31] <FromDiscord> <zidsal> Ofc they can, but it doesn't mean we are obliged to stick around
[03:33:38] <FromDiscord> <Zachary Carter> it seemed most people, instead of trying to figure out what was going on and work with this owner, decided instead to get majorly butt hurt and instantaneously react
[03:33:50] <FromDiscord> <Zachary Carter> I'm not saying andrew acted properly or responsibly either
[03:34:17] <FromDiscord> <Zachary Carter> but generally cooler heads prevail, and no one was cool in this situation and splitting freenode in two wasn't the answer IMO
[03:34:39] <FromDiscord> <tandy> people should just use matrix instead of irc \:-)
[03:35:03] <FromDiscord> <Zachary Carter> without knowing exactly who said and did what, it's pretty difficult to get an accurate account of events
[03:35:24] <FromDiscord> <Zachary Carter> and that accurate, verified, account should have been established before anyone did anything
[03:35:41] <FromDiscord> <Zachary Carter> instead we have a bunch of screenshots of scattered chat logs and staff writing exit letters that could, as far as we know, be entirely full of bullshit
[03:35:43] <FromDiscord> <dom96> Yeah, I don't particularly care what the original drama is about tbh
[03:35:45] <FromDiscord> <Zachary Carter> so could andrew's blog post
[03:35:46] <FromDiscord> <Zachary Carter> who knows
[03:36:09] <FromDiscord> <dom96> What I care is about material things that happened to me and other users
[03:36:12] <FromDiscord> <Zachary Carter> I don't care about the original drama either, but knowing about it helps contextualize what played out
[03:36:34] <FromDiscord> <dom96> And from that perspective I cannot understand how you can give the new Freenode owner the benefit of the doubt
[03:36:43] <FromDiscord> <Zachary Carter> I don't give him the benefit of the doubt
[03:36:49] <FromDiscord> <Zachary Carter> but I don't judge them and their actions based on heresay either
[03:36:56] <FromDiscord> <Zachary Carter> or the ex-staff
[03:37:02] <FromDiscord> <Zachary Carter> I'm impartial
[03:37:06] <FromDiscord> <dom96> I'm not specifically talking about you
[03:37:07] <FromDiscord> <Zachary Carter> I know the answer wasn't libera
[03:37:10] <FromDiscord> <Zachary Carter> sure
[03:37:16] <FromDiscord> <dom96> Staying on Freenode to me is giving the benefit of the doubt
[03:38:12] <FromDiscord> <Zachary Carter> I can see that
[03:38:39] <FromDiscord> <Zachary Carter> again as long as the decision was based on what went down, and not just because all your frenz are still there:)
[03:38:40] <FromDiscord> <Zachary Carter> (edit) "there:)" => "there 🙂"
[03:39:24] <FromDiscord> <dom96> I barely use IRC nowadays so no friend-influence was had
[03:39:53] <FromDiscord> <dom96> Although I did notice a few folks asking for the migration
[03:39:57] <FromDiscord> <Zachary Carter> I'd like to use it more, but discord is much more convenient on mobile
[03:40:18] <FromDiscord> <dom96> But really, I would have kept it as-is for longer if it wasn't for Freenode literally killing NimBot
[03:40:45] <FromDiscord> <Zachary Carter> yeah I don't understand the decision making process with all of that
[03:41:56] <FromDiscord> <Zachary Carter> lolol
[03:42:00] <FromDiscord> <Zachary Carter> I was just looking at freenode's homepage
[03:42:13] <FromDiscord> <Zachary Carter> andrew announced the creation of some jobs page
[03:42:15] <FromDiscord> <Zachary Carter> https://jobs.freenode.net/hire.html
[03:42:19] <FromDiscord> <Zachary Carter> the first job sounds really fun
[03:42:50] <FromDiscord> <Zachary Carter> one of the other three jobs is from andrew and the third one seems to be a test posting
[03:43:00] <FromDiscord> <dom96> lol what
[03:44:01] <FromDiscord> <Zachary Carter> this paragraph is also included
[03:44:06] <FromDiscord> <dom96> @Avahe so do you have any explanation for the takeover of channels and starting the network fresh? Why are you giving them the benefit of the doubt?
[03:44:12] <FromDiscord> <Zachary Carter> sent a code paste, see https://play.nim-lang.org/#ix=3quL
[03:44:16] *** Joins: mrgaturus (~mrgaturus@186.146.233.157)
[03:44:40] <FromDiscord> <Zachary Carter> so freenode is becoming the parler of the FOSS world?
[03:44:45] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3quM
[03:44:46] <FromDiscord> <Zachary Carter> on freenode's homepage
[03:45:04] *** Quits: mrgaturus (~mrgaturus@186.146.233.157) (Client Quit)
[03:45:44] <FromDiscord> <dom96> yeah, that tells me all I need to know
[03:46:27] <FromDiscord> <dom96> Also, interesting: https://github.com/realrasengan/anonbot. idlework is one of the contributors, I recall them being active in Nim community a while back
[03:46:36] <FromDiscord> <Avahe> In reply to @dom96 "<@!778498877464117248> so do you": Channels that were moving to libera were given a time period for the move, then freenode staff would take the channels. It was announced a few weeks in advance
[03:46:52] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[03:47:16] <FromDiscord> <Zachary Carter> idlework is still active I think. I saw them chatting the other day
[03:47:29] <FromDiscord> <Avahe> Yeah he is
[03:47:38] <FromDiscord> <dom96> actually ldlework, the `i` is an `l`
[03:47:46] <FromDiscord> <Zachary Carter> oh heh
[03:48:31] <FromDiscord> <dom96> yep: https://irclogs.nim-lang.org/14-06-2021.html#04:08:47
[03:48:34] <FromDiscord> <Varriount> Your totally free to express your views. Just as other people are free to disagree with you, and judge you based on those views.
[03:49:08] <FromDiscord> <dom96> and now ldlework is a Freenode staffer
[03:49:22] <FromDiscord> <Varriount> (edit) "Your" => "You're"
[03:49:22] <FromDiscord> <Zachary Carter> the plot thickens
[03:49:39] <FromDiscord> <Zachary Carter> https://tenor.com/view/thriller-michael-jackson-eating-popcorn-watching-gif-5577709
[03:49:41] <FromDiscord> <Zachary Carter> oh wtf
[03:49:46] <FromDiscord> <Zachary Carter> 🍿
[03:50:24] <FromDiscord> <Zachary Carter> I think Nim is already one of the edgier communities tbh
[03:50:48] <FromDiscord> <Zachary Carter> a lot of shit has flown here that wouldn't in a lot of communities, and we don't even have a CoC
[03:51:10] <FromDiscord> <Varriount> > Now you can share thoughts and views without fear of being canceled.↵I would love a definition of what "cancelled" means in this context.
[03:51:13] <FromDiscord> <dom96> oh yeah? You think so? Do you have some examples?
[03:52:46] <FromDiscord> <Zachary Carter> In reply to @dom96 "oh yeah? You think": I'm not going to spend time digging through logs for them, but I know that there have been instances of people saying some less than desirable things about cultures / ethnic groups and also some comments about transgender acceptance
[03:53:15] <FromDiscord> <Zachary Carter> In reply to @Varriount "> Now you can": Probably means you can be a racist, misogynistic, homophobic, transphobic  asshole
[03:53:28] <FromDiscord> <Zachary Carter> (edit) 04removed ""
[03:54:07] <FromDiscord> <Zachary Carter> and I guess cancelled would mean being banned from a community or sever for that type of behavior
[03:54:12] <FromDiscord> <Zachary Carter> or doxxed
[03:54:55] <FromDiscord> <Zachary Carter> hell I got doxxed for assuming someone's gender on here, without any ill intent on my part, but I think this person was really just looking for some attention / trying to stir things up
[03:55:18] <FromDiscord> <dom96> In reply to @Zachary Carter "I'm not going to": If you do ever see this again or find past instances do let me know. That is definitely not okay in this community.
[03:56:03] <FromDiscord> <Zachary Carter> I'm a mod so I've taken corrective action when I've seen it. I haven't banned anyone for it but stern warnings have been issued, and I know who the offender(s) are 🙂
[03:56:22] <FromDiscord> <Zachary Carter> If you want to talk about it more in mod chan we can or in PMs
[03:57:44] <FromDiscord> <dom96> In reply to @Zachary Carter "hell I got doxxed": yeah, that was a really horrible situation :/
[03:59:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> `=destroy` and `try/finally` don't really seem to catch ctrl-c
[04:01:49] <FromDiscord> <Elegant Beef> Well that's probably cause it kills the process instantly, override the chook and kill the program gracefully
[04:02:08] <FromDiscord> <@bracketmaster-5a708063d73408ce4> how can you kill gracefully?
[04:02:31] <FromDiscord> <@bracketmaster-5a708063d73408ce4> quit(0) for example isn't graceful
[04:02:42] <FromDiscord> <Elegant Beef> Set a bool that causes the program to exit the flow it's stuck in
[04:03:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what I'm trying to do is get the files that are open properly closed
[04:03:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what does nim call right before a program ends?
[04:03:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Can I call that?
[04:06:34] <FromDiscord> <leorize> note that you don't have to close them if you're just exiting
[04:06:49] <FromDiscord> <leorize> the C library will usually do the runtime cleanup for files
[04:07:00] <FromDiscord> <leorize> and the os will collect any open resources
[04:07:47] <FromDiscord> <Varriount> Hrm. Nim should really better in this respect. As far as I can tell, `setControlCHook` just sets the SIGINT signal handler. I feel that a better approach would be what Python does - raise an exception.
[04:08:10] <FromDiscord> <Varriount> (edit) "Hrm. Nim should really ... better" 03added "do"
[04:08:30] <FromDiscord> <Elegant Beef> Otherwise you probably want to do something like https://play.nim-lang.org/#ix=3quO
[04:08:31] <FromDiscord> <leorize> a random exception in the middle of the body is not the best idea, optimization wise
[04:08:32] <FromDiscord> <Varriount> Or, at the very least, allow registering multiple signal handlers.
[04:08:56] <FromDiscord> <Elegant Beef> enter `exitprocs`!
[04:09:16] <FromDiscord> <Varriount> In reply to @leorize "a random exception in": Hm, fair point. How do other languages (aside from C and C++) go about this?
[04:09:26] <FromDiscord> <dom96> execCmd("yourProc"); #perform cleanup 😉
[04:10:32] <FromDiscord> <leorize> set an exit thingy for global state cleanup (ie. state stored outside of the program)↵(@Varriount)
[04:12:52] <FromDiscord> <leorize> the best practice for cleaning those kinds of state (ie. lock files) up is to not have to
[04:14:27] <FromDiscord> <Zachary Carter> just don't use exceptions 🙂
[04:14:41] <FromDiscord> <leorize> eh, exceptions are cool
[04:14:58] <FromDiscord> <Zachary Carter> I haven't found much of a need for them in my work
[04:15:03] <FromDiscord> <Zachary Carter> work work yes
[04:15:05] <FromDiscord> <Zachary Carter> game dev no
[04:16:01] <FromDiscord> <leorize> it really depends on your domain
[04:16:31] <FromDiscord> <Zachary Carter> true
[04:17:53] <FromDiscord> <Zachary Carter> couldn't you just use destructors and then not worry about any of this?
[04:17:59] <FromDiscord> <Zachary Carter> @bracketmaster
[04:18:28] <FromDiscord> <leorize> btw you wanna join the cps club? \:) we haven't seen you for awhile
[04:19:56] <FromDiscord> <Varriount> In reply to @Zachary Carter "couldn't you just use": Destructors don't run on program exit.
[04:20:34] <FromDiscord> <Zachary Carter> In reply to @leorize "btw you wanna join": me? oh boy um probably will bow out of that one. life is super busy right now and the only spare time I really have I'm dedicating to working on my game project
[04:20:35] <FromDiscord> <Varriount> In reply to @leorize "btw you wanna join": How is CPS going so far? I know mratsim mentioned working on it, but that's all I've heard.
[04:20:48] <FromDiscord> <Zachary Carter> but I'm excited to see how it turns out and understand more how to use it
[04:21:03] <FromDiscord> <Varriount> I'm currently working on an actually usable subprocess library for Nim.
[04:21:06] <FromDiscord> <Zachary Carter> In reply to @Varriount "Destructors don't run on": oh this is an exceptional exit, I see
[04:21:15] <FromDiscord> <leorize> it's near the finish line, features wise
[04:21:17] <FromDiscord> <leorize> https://github.com/disruptek/cps
[04:21:49] <FromDiscord> <Varriount> How about performance wise? How does it compare?
[04:22:17] <FromDiscord> <leorize> there's some advert for that in that readme \:p
[04:23:06] <FromDiscord> <leorize> nice, have you seen the api i planned for nim-sys?↵(@Varriount)
[04:23:11] <FromDiscord> <Varriount> My bet was (and still is) that an actually complete, finished implementation will be slower than an equivalent async implementation (not necessarily the standard library's async though).
[04:23:41] <FromDiscord> <Varriount> "complete" and "finished" being the adjectives that people always seem to skip over.
[04:23:53] <FromDiscord> <leorize> read the readme, really
[04:24:38] <FromDiscord> <dom96> Does anyone have use cases where async was too slow for them?
[04:25:41] <FromDiscord> <leorize> but performance is really a small part of the story
[04:26:01] <FromDiscord> <leorize> the programming model this enables is what makes it attractive
[04:27:22] <FromDiscord> <Varriount> In reply to @dom96 "Does anyone have use": I doubt it. But that's not the point. "performance" is held up as a key attribute, and still tends to attract people, regardless of whether it's a big concern.↵Just look at how the quality of `able to handle "big data"` is/was viewed.
[04:27:39] <FromDiscord> <leorize> but if you worry about performance then yes we do benchmark them, against closure iterators and httpbeast
[04:28:07] <FromDiscord> <Varriount> leorize: The readme doesn't mention performance or benchmarks. I might be missing something though.
[04:28:34] <FromDiscord> <leorize> it mentions being 5-15% faster than closure iterators \:)
[04:28:54] <FromDiscord> <Varriount> > and a mom pointer to any parent continuation↵Aww.
[04:30:04] <FromDiscord> <dom96> If you can beat httpbeast then that would be awesome, please put it into TechEmpower's framework benchmarks
[04:30:11] <FromDiscord> <dom96> so that we can get Nim to the top
[04:30:31] <FromDiscord> <Varriount> In reply to @leorize "it mentions being 5-15%": I guess my skepticism comes from the fact that I don't see any real difference, on a conceptual level, from closure iterators.
[04:31:05] <FromDiscord> <leorize> try reading some of the examples
[04:31:18] <FromDiscord> <dom96> In reply to @Varriount "I guess my skepticism": yeah, I have the same skepticism. But this has been discussed a lot 🙂
[04:31:35] <FromDiscord> <Varriount> (edit) "a conceptual" => "an ~~conceptual~~ implementation"
[04:31:57] <FromDiscord> <Varriount> Sorry, corrected my statement.
[04:32:21] <FromDiscord> <leorize> closure iterators uses a linear execution path, where in cps, that constraint doesn't exist
[04:32:39] <FromDiscord> <leorize> the goto example is one that demonstrates something you can't replicate with closure iterators
[04:33:54] <FromDiscord> <dom96> sent a long message, see http://ix.io/3quW
[04:34:38] <FromDiscord> <leorize> we are not comparing with closure iterators there,
[04:34:50] <FromDiscord> <Zachary Carter> so could you do something similar to fibers with CPS?
[04:35:06] <FromDiscord> <Zachary Carter> from what I've read so far it sounds like it
[04:35:12] <FromDiscord> <Zachary Carter> but maybe I'm missing something
[04:35:19] <FromDiscord> <leorize> yes, there's an example by zevv
[04:35:20] <FromDiscord> <Varriount> looks at Window's Fiber API
[04:35:25] <FromDiscord> <Zachary Carter> ooooo
[04:35:29] <FromDiscord> <Zachary Carter> I just wrote a fiber based job system
[04:35:52] <FromDiscord> <Zachary Carter> using a deboostified version of boost's context  lib
[04:36:01] <FromDiscord> <Zachary Carter> maybe I will need to port it to use CPS
[04:36:15] <FromDiscord> <Zachary Carter> (edit) 04removed ""
[04:36:18] <FromDiscord> <leorize> hopefully by the end of month we have something to show off to y'all
[04:36:29] <FromDiscord> <Zachary Carter> I'm very excited
[04:36:45] <FromDiscord> <leorize> currently we are starting libraries with cps so we can see what doesn't work to patch it up
[04:36:56] <FromDiscord> <Zachary Carter> dogfooding, love it
[04:36:57] <FromDiscord> <dom96> Huh? Pretty sure you could say async/await is a form of fibers
[04:37:31] <FromDiscord> <leorize> if you're very interested and patient, please go over our chat at [#cps\:matrix.org](https://matrix.to/#/#cps:matrix.org) or #cps on libera.chat
[04:37:39] <FromDiscord> <Zachary Carter> I think you can implement async / await using something like fibers
[04:37:57] <FromDiscord> <Zachary Carter> but generally you use async/await in a single threaded context
[04:38:02] <FromDiscord> <Zachary Carter> fibers you can swap out between threads
[04:38:12] <FromDiscord> <Zachary Carter> and thus are better for CPU bound tasks
[04:38:14] <FromDiscord> <dom96> https://en.wikipedia.org/wiki/Fiber_(computer_science)
[04:38:19] <FromDiscord> <Zachary Carter> yeah it's a green thread I know
[04:38:34] <FromDiscord> <dom96> I'm reading this and it seems to fit the definition
[04:38:40] <FromDiscord> <Elegant Beef> @kashaulmodi well as I want to make a more collection of them OOP macros i did start this repo 😛 https://github.com/beef331/oopsie
[04:38:54] <FromDiscord> <dom96> wikipedia doesn't mention anything about the ability to swap out between system threads
[04:39:03] <FromDiscord> <Elegant Beef> I really just should make repo names at this point
[04:39:04] <FromDiscord> <Zachary Carter> you can pass fibers between threads
[04:39:17] <FromDiscord> <Zachary Carter> fibers don't get scheduled by the OS it's all in user land
[04:39:18] <FromDiscord> <dom96> Even says: "A disadvantage is that fibers cannot utilize multiprocessor machines without also using preemptive threads"
[04:39:51] <FromDiscord> <Varriount> Hm, I think it was a mistake to put both red pepper flakes and ground peppercorn on these potatoes... They are quite space.
[04:39:56] <FromDiscord> <Varriount> (edit) "space." => "spicy."
[04:40:00] <FromDiscord> <dom96> I think fibers are strictly single thread/coroutines
[04:40:24] <FromDiscord> <dom96> In reply to @Varriount "Hm, I think it": Time to increase your tolerance, grab some Hot Ones sauces 😄
[04:41:19] <FromDiscord> <Zachary Carter> fibers don't really have anything to do with a thread, they just run in the context of one, they have their own stack and environment
[04:41:38] <FromDiscord> <Varriount> Depending on the implementation.
[04:41:42] <FromDiscord> <Zachary Carter> well yes
[04:42:04] <FromDiscord> <Zachary Carter> I'm speaking specifically to the implementation I'm using
[04:42:09] <FromDiscord> <leorize> @Zachary Carter\: https://github.com/disruptek/cps/blob/master/examples/threadpool.nim this sample shows how cps continuations can be moved between threads
[04:42:22] <FromDiscord> <dom96> I think all these terms are quite fuzzy, but in general I try to go off what Wikipedia says 🙂
[04:42:23] <FromDiscord> <Zachary Carter> thanks!
[04:42:37] <FromDiscord> <Zachary Carter> I mean Wikipedia is fine for explaining what a green thread or fiber is
[04:42:52] <FromDiscord> <Zachary Carter> I still don't see how coroutines or async / await would allow you to achieve something similar
[04:43:33] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 265 seconds)
[04:43:57] <FromDiscord> <leorize> if you're interested, come join us. testers are a high priority rn \:)
[04:44:23] <FromDiscord> <dom96> Green threads/Fibers don't enable multi-threading as far as I can tell
[04:44:30] <FromDiscord> <dom96> It's strictly single thread
[04:44:33] <FromDiscord> <Zachary Carter> no they don't
[04:44:39] <FromDiscord> <Zachary Carter> again they don't have anything to do with threads
[04:44:43] <FromDiscord> <Zachary Carter> they just run on a thread
[04:44:51] <FromDiscord> <Zachary Carter> so you can take a fiber that runs on thread a
[04:44:52] <FromDiscord> <Zachary Carter> stop it
[04:44:55] <FromDiscord> <Zachary Carter> and continue it on thread b
[04:45:09] <FromDiscord> <dom96> Is that a property of fibers?
[04:45:18] <FromDiscord> <dom96> I don't see it described on WP
[04:45:21] <FromDiscord> <Zachary Carter> https://github.com/zacharycarter/frag-experiments/blob/main/src/fragpkg/job.nim
[04:45:25] <FromDiscord> <Zachary Carter> if you want to see how it's implemented
[04:45:34] <FromDiscord> <Zachary Carter> https://github.com/zacharycarter/frag-experiments/blob/main/src/fragpkg/fiber.nim
[04:45:38] <FromDiscord> <Zachary Carter> https://github.com/zacharycarter/frag-experiments/tree/main/src/fragpkg/asm
[04:45:55] <FromDiscord> <Zachary Carter> https://www.boost.org/doc/libs/1_70_0/libs/context/doc/html/context/ff.html
[04:48:04] <FromDiscord> <dom96> Looks like the Fibers in the WinAPI does enable the feature, but there doesn't appear to be any authoritative info to say "Fibers must support this to be considered fibers"
[04:48:28] <FromDiscord> <dom96> But anyway, I don't see why resuming a closure iterator on another thread wouldn't be possible with ORC
[04:48:55] <FromDiscord> <dom96> The only limitation with the default GC is that each thread has its own heap, so you'd need to copy memory between threads which would be shit
[04:49:14] <FromDiscord> <dom96> but with ORC all memory can be shared, so why not just continue the iterator on another thread?
[04:49:28] <FromDiscord> <Zachary Carter> In reply to @dom96 "But anyway, I don't": it probably is possible
[04:49:57] <FromDiscord> <Zachary Carter> ORC wasn't really done when I started figuring out how to implement this type of job system
[04:51:08] <FromDiscord> <Zachary Carter> sounds like I have options now aplenty 🙂
[04:51:34] <FromDiscord> <Zachary Carter> leorize: what matrix client do you use?
[04:51:58] <FromDiscord> <leorize> I use Element↵(@Zachary Carter)
[04:52:20] <FromDiscord> <Zachary Carter> thanks
[04:52:30] <FromDiscord> <Varriount> In reply to @dom96 "but with ORC all": Not quite. While there are no more separate heaps, refcount operations aren't atomic.
[04:53:22] <FromDiscord> <dom96> In reply to @Varriount "Not quite. While there": really? Isn't that just a bug though? Otherwise how can we utilise this memory management solution with multiple threads?
[04:53:25] <FromDiscord> <Varriount> So you either need to use the `Isolated[T]` stuff (which hasn't had a thorough real-world test yet, I think), or use unsafe contructs.
[04:53:47] <FromDiscord> <Zachary Carter> I'm fine with using unsafe code
[04:53:59] <FromDiscord> <leorize> the idea is that you move your refs, or use smartptrs↵(@dom96Bot)
[04:55:44] <FromDiscord> <dom96> Looks like I need to play with ORC and quiz Araq
[04:55:50] <FromDiscord> <Varriount> In reply to @leorize "the idea is that": You quickly run into a situation similar to the separate-heap stuff though: None of the standard library operations that act on `ref SomeBaseObject` will act on `smartptr[SomeBaseObject]`.
[04:56:09] <FromDiscord> <leorize> yea but we do have base non-ref types
[04:56:33] <FromDiscord> <Varriount> So you then get the fun of reimplementing all the procedures that require the ref types though.
[04:56:41] <FromDiscord> <dom96> what if your closure is accessing data that's been allocated somewhere outside the closure?
[04:57:00] <FromDiscord> <dom96> you need to share that memory somehow
[04:57:11] <FromDiscord> <leorize> and you will need a lock anyway if you access the same piece of data over multiple threads
[04:57:14] <FromDiscord> <dom96> but actually, since that memory is shared you'd lock it anyway
[04:57:21] <FromDiscord> <dom96> so non-atomic refcounts wouldn't be a problem
[04:58:01] <FromDiscord> <Varriount> Really, Nim just needs a standard "pointer" concept. Then `proc foo(x: generic_ref Bar)` could accept `var Bar`, `ref Bar`, `smartptr Bar`, etc.
[04:58:48] <FromDiscord> <Zachary Carter> it can accept all of those
[04:58:50] <FromDiscord> <dom96> so I think closure iterators can be resumed on another thread just fine
[04:58:55] <FromDiscord> <Zachary Carter> you just need to cast them to `pointer`
[04:59:00] <FromDiscord> <Zachary Carter> 🙂
[04:59:17] <FromDiscord> <Zachary Carter> and change `generic_ref Bar` to `pointer`
[04:59:21] <FromDiscord> <Zachary Carter> done
[04:59:38] <FromDiscord> <Varriount> Great. Now my code has `cast`'s everywhere.
[05:00:09] <FromDiscord> <Zachary Carter> who cares
[05:00:11] <FromDiscord> <Zachary Carter> write a template 🙂
[05:00:41] <FromDiscord> <Varriount> This is all just punting a design flaw onto the user though.
[05:01:16] <FromDiscord> <Zachary Carter> I don't really see it as that - I guess the only language where you don't have to rely on unsafe constructs to do systems programming is Rust
[05:01:41] <FromDiscord> <Zachary Carter> and instead you have to do a bunch of other laborious things to ensure you're not doing anything unsafe
[05:01:54] <FromDiscord> <Zachary Carter> and then Rust itself has all sorts of design warts
[05:02:15] <FromDiscord> <Zachary Carter> Ultimately systems programming tends to require, to a degree, unsafe access and manipulation of memory
[05:02:30] <FromDiscord> <Zachary Carter> especially if you're interoping with C/C++
[05:02:41] <FromDiscord> <Zachary Carter> and want to do low level things like take advantage of multiple threads, etc...
[05:06:18] <FromDiscord> <Zachary Carter> I mean hopefully one day araq and team can make writing multi threaded applications stupid simple, but until then we have opaque pointers, atomics, concurrency primitives and a shared heap 🙂
[05:06:50] <FromDiscord> <Zachary Carter> and move semantics
[05:06:58] <FromDiscord> <Zachary Carter> which don't solve everything
[05:14:15] *** Quits: AnyAny (~dom@2a01:4b00:876f:d400:386e:e09e:382e:6975) (Quit: Leaving)
[05:14:26] <FromDiscord> <Varriount> Though, in many ways, the best way to share memory between threads is to just... not.
[05:15:05] <FromDiscord> <Varriount> I guess `Isolated[T]` helps in that respect.
[05:15:55] <FromDiscord> <Zachary Carter> yeah but that's not always possible right
[05:16:05] <FromDiscord> <Zachary Carter> sometimes you need some shared mutable state
[05:20:24] <FromDiscord> <dan> has anybody ever thought of making the .c file output of the nim compiler a true feature? i feel very hacky when i'm setting the cache directory to the build directory
[05:21:26] <FromDiscord> <Zachary Carter> what do you mean?
[05:22:14] <FromDiscord> <dan> as far as i can tell, the nim compiler supports 2 different forms of output. that is object and linked binary (shared static exe)
[05:22:48] <FromDiscord> <Zachary Carter> the nim compiler supports C/C++/Objective-C and JS as it's forms of output
[05:23:10] <FromDiscord> <dan> whats the flag to output to a .c file?
[05:23:17] <FromDiscord> <Zachary Carter> you can use whatever compiler toolchain you want to compile the resulting code
[05:23:31] <FromDiscord> <Zachary Carter> you need to look in the nimcache directory for the generated C code
[05:23:37] <FromDiscord> <dan> ah yes thats what i meant
[05:23:45] <FromDiscord> <Zachary Carter> yes all the C the Nim compiler produces is there
[05:23:52] <FromDiscord> <Zachary Carter> (or C++ / Objective-C or JS
[05:23:54] <FromDiscord> <Zachary Carter> (edit) "JS" => "JS)"
[05:24:01] <FromDiscord> <dan> so if i want to output that into my build directory, i need to set the cache directory to the build directory
[05:24:10] <FromDiscord> <dan> thats what i meant by "feels hacky"
[05:24:10] <FromDiscord> <Zachary Carter> well...
[05:24:14] <FromDiscord> <Zachary Carter> I mean it's not
[05:24:24] <FromDiscord> <Zachary Carter> Nim compiles your Nim code to C right, then stores it somewhere
[05:24:27] <FromDiscord> <Zachary Carter> "the nimcache"
[05:24:36] <FromDiscord> <Zachary Carter> then it invokes another compiler to compile the C code
[05:25:00] <FromDiscord> <Elegant Beef> Yea, hell it's what i do for the rpi pico stuff i was working on
[05:25:13] <FromDiscord> <Zachary Carter> you're saying you don't want to compile the C code?
[05:25:23] <FromDiscord> <dan> yes exactly
[05:25:24] <FromDiscord> <Elegant Beef> Through the C into the cmake directory so then i can can compile it using the rpi cmake
[05:25:33] <FromDiscord> <Elegant Beef> There is a `-c` flag for that
[05:25:55] <FromDiscord> <Zachary Carter> `-c, --compileOnly:on|off`
[05:26:16] <FromDiscord> <Zachary Carter> just FYI you can also override what compiler Nim uses
[05:26:28] <FromDiscord> <Zachary Carter> so for instance, on windows I use vcc.exe most of the time instead of mingw
[05:26:33] <FromDiscord> <Zachary Carter> although I need to get on clang
[05:26:38] <FromDiscord> <Zachary Carter> anyway, that's neither here nor there
[05:27:13] <FromDiscord> <dan> thats true. i do think there is an argument to be made though, for nim to support c output as a first class feature
[05:27:36] <FromDiscord> <Zachary Carter> it already does
[05:27:47] <FromDiscord> <Zachary Carter> use that flag `-c, --compileOnly:on|off`
[05:27:50] <FromDiscord> <Elegant Beef> Yea as we've demonstrated it does \:D
[05:27:55] <FromDiscord> <Zachary Carter> 🙂
[05:28:02] <FromDiscord> <dan> i am confused now. you do still have to move around the nimcache directory dont you?
[05:28:11] <FromDiscord> <Zachary Carter> you don't have to move any directory around
[05:28:18] <FromDiscord> <Zachary Carter> you have to tell Nim where to put the resulting C code
[05:28:22] <FromDiscord> <Zachary Carter> that is what the nimcache is
[05:28:32] <FromDiscord> <Zachary Carter> by default it's in the user's home directory
[05:28:37] <FromDiscord> <Zachary Carter> so you just need to override this as a compiler option
[05:29:11] <FromDiscord> <dan> yes that is what i meant
[05:29:15] <FromDiscord> <Zachary Carter> what it sounds like you want is for this to be the default mode of compilation
[05:29:19] <FromDiscord> <Zachary Carter> which is never going to happen
[05:29:32] <FromDiscord> <dan> no of course not
[05:29:44] <FromDiscord> <Elegant Beef> Well then just make some config file to do it for you and live hapily
[05:29:52] <FromDiscord> <Zachary Carter> too much of Nim's tooling and stdlib requires this to be the way it is
[05:30:04] <FromDiscord> <Zachary Carter> yeah, if you need help writing the configuration file I'm happy to help 🙂
[05:30:18] <FromDiscord> <Elegant Beef> Like it's a 3 second thing to setup and you can pretend it was always like that
[05:30:51] <FromDiscord> <Zachary Carter> https://nim-lang.org/docs/nimc.html#compiler-usage-generated-c-code-directory
[05:32:10] <FromDiscord> <Zachary Carter> sent a code paste, see https://play.nim-lang.org/#ix=3qv4
[05:32:12] <FromDiscord> <dan> i think my main concern is, that nim does not generate a monolithic .c file, like you would specify an object file to the compiler
[05:32:48] <FromDiscord> <dan> and just setting the cache directory somewhere else felt like a crutch
[05:33:27] <FromDiscord> <Zachary Carter> well Nim's C output isn't really mean to appease C developers
[05:33:59] <FromDiscord> <Zachary Carter> it sacrifices human readability and is composed for correctness and performance
[05:34:56] <FromDiscord> <dan> i am no c developer myself ... just a guy with project and build system restrictions who tries to work around all the kinks and stuff 😄
[05:34:58] <FromDiscord> <dan> thank you anyways
[05:35:16] <FromDiscord> <Zachary Carter> yeah no problem - I know it can be frustrating to work with external build systems with Nim but folks do it, as @ElegantBeef described
[05:35:50] <FromDiscord> <Zachary Carter> I just don't think it's super high priority, but it probably falls under that area of Nim's tooling needs to improve and we don't have enough people to improve it 🙂
[05:36:22] <FromDiscord> <dan> yeah true ... i would like to help, but no way i am competent enough to work on the compiler
[05:37:34] <FromDiscord> <Zachary Carter> most of us aren't 🙂
[05:37:56] <FromDiscord> <dan> just out of interest: if i do happen to go down the route of using the nimcache directory, is there a crossplatform way to get c compiler and linker flags from the nim compiler in  a cross platform way?
[05:38:27] <FromDiscord> <dan> totally assuming that nim is requiring special flags here
[05:38:31] <FromDiscord> <Zachary Carter> Nim is only ever going to produce C code for your platform
[05:38:47] <FromDiscord> <Zachary Carter> but you can of course use a cross compile toolchain to target another platform
[05:39:22] <FromDiscord> <dan> i think i phrased that badly. if i compile the c code myself, how would i know which flags nim requires to be passed to the c compiler?
[05:39:31] <FromDiscord> <Zachary Carter> if you look in the generated C files, they will have the command and arguments passed to the compiler frontend
[05:39:41] <FromDiscord> <Zachary Carter> for instance I just opened one up
[05:39:44] <FromDiscord> <Zachary Carter> and at the top in comments it says
[05:39:52] <FromDiscord> <Zachary Carter> / Command for C compiler:↵   vccexe.exe /c --platform:amd64  /nologo /Zi /I H:\Projects\frag\thirdparty\getopt\include -DWIN32_LEAN_AND_MEAN /I H:\Projects\frag\thirdparty\stb /Zi /FS /Od   /IH:\Projects\nim-1.4.8\lib /IH:\Projects\frag\src /nologo /FoC:\Users\carte\nimcache\frag_d\@mfrag.nim.c.obj C:\Users\carte\nimcache\frag_d\@mfrag.nim.c /
[05:40:03] *** Joins: Torr (~Torr@user/torr)
[05:40:07] <FromDiscord> <dan> ooooh very nice, i might be able to parse that!
[05:40:41] <FromDiscord> <dan> if i ever get somewhere, i will post about how i did it
[05:40:53] <FromDiscord> <Zachary Carter> it would be a cool blog post for the "this month with nim" series
[05:40:59] *** Parts: Torr (~Torr@user/torr) ()
[05:40:59] <FromDiscord> <leorize> there's a feature to generate json build descriptions for Nim
[05:41:01] <FromDiscord> <Zachary Carter> or just a guest blog post ing eneral
[05:41:05] <FromDiscord> <Zachary Carter> (edit) "ing eneral" => "in general"
[05:41:22] <FromDiscord> <Zachary Carter> In reply to @leorize "there's a feature to": even better
[05:41:28] <FromDiscord> <Zachary Carter> I need to run an errand but I'll be back in a few
[05:42:21] <FromDiscord> <dan> In reply to @leorize "there's a feature to": do you mean jsondoc?
[05:42:26] <FromDiscord> <leorize> so `--compileOnly --nimcache:/where/you/want/your/c/files`
[05:42:42] <FromDiscord> <leorize> then inside the nimcache there's a `.json` file describing how to build
[05:43:25] <FromDiscord> <leorize> it's not advertised but that's what Nim uses internally to bootstrap\: https://github.com/nim-lang/Nim/blob/devel/koch.nim#L320-L326
[05:43:33] <FromDiscord> <dan> im am going to check that out right now
[05:45:01] <FromDiscord> <Zachary Carter> oh yeah I forgot about that
[05:50:26] *** Quits: dbohdan (~dbohdan@user/dbohdan) (Read error: Connection reset by peer)
[05:51:13] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[05:56:28] *** Joins: notzmv (~zmv@user/notzmv)
[05:58:50] <FromDiscord> <clyybber> and `--genScript` to generate a shell/batch script that invokes gcc and the linker as the nim compiler would
[06:00:04] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:07:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[06:35:01] <FromDiscord> <Zachary Carter> oh nice
[07:21:06] <FromDiscord> <exelotl> In reply to @Zachary Carter "what it sounds like": it used to work like that before Nim 0.19 right?
[07:22:45] <FromDiscord> <exelotl> but yeah global nimcache seems to be preferable for most projects, except those where you want access to the C code
[07:36:17] <FromDiscord> <Varriount> Huh, this is interesting. From a book on Windows troubleshooting:↵> Process IDs and thread IDs are generated from the same namespace, so they never overlap.
[07:36:52] <FromDiscord> <Varriount> I wonder why?
[07:41:05] <FromDiscord> <leorize> maybe because they have threads as their atom
[07:41:20] <FromDiscord> <leorize> in haiku it works in the same way as well
[08:34:45] <FromDiscord> <Zachary Carter> In reply to @exelotl "it used to work": well Nimcache used to be stored in the local directory yeah
[08:35:09] <FromDiscord> <Zachary Carter> but I think what dan wanted was for the C files to be outputted and easily consumed by cmake or some other build tool
[09:02:56] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3qvD
[09:03:18] <FromDiscord> <codic> but then if I run the arc version in gdb it works fine, like the default one
[09:05:38] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3qvE
[09:06:10] <FromDiscord> <Zafia Reco> i dont think so...
[09:10:35] *** Joins: fputs (~evan@67.59.83.166)
[09:16:34] <FromDiscord> <Elegant Beef> sent a code paste, see https://paste.rs/45w
[09:18:43] <FromDiscord> <leorize> sent a code paste, see https://play.nim-lang.org/#ix=3qvH
[09:18:47] <FromDiscord> <leorize> the create template is pretty handy
[09:18:58] <FromDiscord> <aleclarson> oo nice. much appreciate \:)
[09:20:31] <FromDiscord> <leorize> [Elegant Beef](https://matrix.to/#/@beef331:matrix.org)\: that might be wrong
[09:20:53] <FromDiscord> <treeform> In reply to @Elegant Beef "You also can use": I think we need to add support for multipart...
[09:21:29] <FromDiscord> <leorize> in here what is allocated is storage space for a proc pointer, so it should be `ptr proc()`
[09:22:08] <FromDiscord> <leorize> (this is why you should always use the create template, it's more correct)
[09:22:18] <FromDiscord> <Elegant Beef> Yea also why you dont try to help when playing a game \:P
[09:23:41] <FromDiscord> <Elegant Beef> Create also is nicer
[09:31:20] <FromDiscord> <aleclarson> @leorize it's unclear how assignment to a `ptr proc` works still
[09:33:02] <FromDiscord> <Elegant Beef> sent a code paste, see https://play.nim-lang.org/#ix=3qvO
[09:33:31] <FromDiscord> <aleclarson> solid, thx Elegant
[09:33:56] <FromDiscord> <Elegant Beef> nimcall is required cause for type's `proc{.closure.}` is the default
[09:35:01] <FromDiscord> <aleclarson> i need a blog to detail this minutiae xD
[09:35:53] <FromDiscord> <Elegant Beef> It's documented here https://nim-lang.org/docs/manual.html#types-procedural-type "A subtle issue..."
[09:40:58] *** Joins: xbello (~xbello@196.80.191.92.dynamic.jazztel.es)
[09:46:37] <FromDiscord> <aleclarson> Oh good, hard to find that in a google search for some reason \:P
[09:47:20] <FromDiscord> <Elegant Beef> Yea the manual's got a lot of information that isnt easily searachable from a search engine
[09:58:00] <FromDiscord> <Varriount> Hm. Anyone feel like this behavior regarding `defer` is... less than  useful?↵> Any statements following the defer in the current block will be considered to be in an implicit try block↵Speaking from experience, Go's `defer` is bit better, as the deferred behavior always occurs at the end of the current routine, not the current block.
[10:00:47] <FromDiscord> <Varriount> sent a code paste, see https://play.nim-lang.org/#ix=3qvS
[10:04:22] <FromDiscord> <leorize> not really↵(@Varriount)
[10:04:51] <FromDiscord> <leorize> you can always call close on an unopened file/socket
[10:05:39] <FromDiscord> <leorize> also I recommend destroy instead if you're building new apis
[10:06:12] <FromDiscord> <Varriount> So `close(FileHandle(-1))` won't return an error (`-1`)?
[10:08:48] <FromDiscord> <Varriount> (leorize ^)
[10:14:23] <FromDiscord> <Avahe> Is there no sort of 2 way dictionary built-in to the stdlib?
[10:14:40] <FromDiscord> <Avahe> dictionary/table
[10:27:34] <FromDiscord> <Varriount> In reply to @Avahe "Is there no sort": Two-way? Not really. You usually just use two tables.
[10:30:19] <FromDiscord> <Avahe> hm alright, thanks
[10:31:09] <FromDiscord> <Varriount> In reply to @Avahe "hm alright, thanks": For what it's worth, using two regular maps/tables/dictionaries is what all the other two-way implementations I've seen do.
[10:32:02] <FromDiscord> <leorize> yea↵(@Varriount)
[10:32:20] <FromDiscord> <leorize> if you just want pipes and some fd my nim-sys has them
[10:32:27] <FromDiscord> <leorize> properly async too if you need
[11:03:26] <FromDiscord> <dankey> those matrix guys talk a lot
[11:03:35] <FromDiscord> <Elegant Beef> Indeed
[11:09:51] <FromDiscord> <Elegant Beef> @treeform\: i assume you will officially announce nimdocs eventually eh? 😛
[11:25:25] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:28:38] <FromDiscord> <haxscramper> In reply to @dan "i think my main": https://zen.su/posts/amalgamating-nim-programs/
[11:45:27] <FromDiscord> <treeform> In reply to @Elegant Beef "<@107140179025735680>\: i assume you": It solved my problem... not sure if I want more.
[11:45:28] <FromDiscord> <WhyDee86> Hey,I need help in nimpy. ↵how can I import from\: for example\:from [censys.search](http://censys.search) import CensysHosts in nimpy↵let censys = pyImport("from [censys.search](http://censys.search) import CensysHosts")?
[11:47:25] *** Joins: max22- (~maxime@2a01cb08833598007716dc2ce898ae00.ipv6.abo.wanadoo.fr)
[11:47:51] <max22-> hi
[11:53:04] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[11:55:06] <FromDiscord> <haxscramper> I don't think nimpy wraps anything besides `import`, so I would assume you need to first import `censys.search` and then get a class from it
[11:55:42] <FromDiscord> <WhyDee86> ok,thx
[12:03:52] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[12:35:19] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 265 seconds)
[12:40:26] <max22-> i have a little question : do local static variables (like in c) exist in nim ? i can't find it in the documentation. i have found the nim static keyword, but it has a different meaning than in c
[12:40:29] <max22-> ?
[12:43:04] <FromDiscord> <热他热的> Yes! It&#x27;s just insane! Maybe these channels should have never been bridged!? 1000 messages in a day, really?
[12:43:27] <FromDiscord> <Elegant Beef> If i understand what i briefly read, a C static variable is just `var a {.global.} = 100` for instance
[12:44:15] <FromDiscord> <Elegant Beef> the global pragma initializes it once, but any modifications persist
[12:44:31] <FromDiscord> <Elegant Beef> https://nim-lang.org/docs/manual.html#pragmas-global-pragma
[12:46:00] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[12:49:45] <max22-> ok ! thank you Elegant Beef !!
[12:50:39] <FromDiscord> <Varriount> Yay, my shell finally works (again). And with my subprocess modifications too.
[12:50:50] <FromDiscord> <Elegant Beef> Nice
[12:51:57] <FromDiscord> <Rika> whats the selling point of your shell 😛 i wanna know
[13:44:23] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[13:52:48] *** Joins: elph (uid286227@id-286227.tooting.irccloud.com)
[14:04:06] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[14:18:41] <FromDiscord> <Varriount> In reply to @Rika "whats the selling point": It's not bash is really the only one.↵It was the project I chose for an independent study course when I was at university.
[14:18:53] <FromDiscord> <Rika> I see
[14:18:55] <FromDiscord> <Varriount> (edit) "It's" => ""It's" | "bash" => "bash""
[14:19:28] <FromDiscord> <Varriount> The idea was, "how far can you go using only command syntax"
[14:20:19] <FromDiscord> <Varriount> So assignments, conditional statements, etc. are all commands.
[14:22:22] *** Quits: Epsilon (~Epsilon@user/epsilon) (*.net *.split)
[14:23:08] *** Joins: Epsilon (~Epsilon@user/epsilon)
[14:26:17] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[14:29:53] <FromDiscord> <Rika> Doesn’t fish basically do that
[14:29:56] <FromDiscord> <Rika> Almost
[14:30:06] <FromDiscord> <Rika> Not completely but it’s close
[14:30:07] *** Quits: Epsilon (~Epsilon@user/epsilon) (Ping timeout: 244 seconds)
[14:30:42] <FromDiscord> <Vindaar> In reply to @Varriount "The idea was, "how": doesn't the existence of lisp prove that you don't need fancy syntax? 😉
[14:40:15] <FromDiscord> <deech> Besides the manual where can I get more info on the `{.cursor.}` pragma?
[14:43:54] *** Joins: Epsilon (~Epsilon@user/epsilon)
[14:51:48] <FromDiscord> <planetis> reading the tests and searching github?
[14:55:16] <FromDiscord> <konsumlamm> In reply to @codic "https://hastebin.com/zojokonuwi.php this code works": if it works as expected on default gc, but gives a segfault on arc, it's definitely a bug
[15:02:36] <FromDiscord> <planetis> @deech here https://github.com/planetis-m/dumpster/blob/master/graphs/bfs.nim
[15:05:15] *** Quits: Epsilon (~Epsilon@user/epsilon) (Ping timeout: 244 seconds)
[15:05:46] *** Joins: Epsilon (~Epsilon@user/epsilon)
[15:13:43] *** Joins: Guest40 (~Guest40@2a01:4b00:f61c:e500:9878:fc76:8968:ea7c)
[15:15:10] *** Parts: Guest40 (~Guest40@2a01:4b00:f61c:e500:9878:fc76:8968:ea7c) ()
[15:22:52] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[15:23:59] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:24:05] *** Quits: Epsilon (~Epsilon@user/epsilon) (Quit: Quit)
[15:24:18] *** Joins: Epsilon (~Epsilon@user/epsilon)
[15:24:55] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 268 seconds)
[15:58:30] *** Joins: arkurious (~arkurious@user/arkurious)
[16:01:12] *** Quits: xbello (~xbello@196.80.191.92.dynamic.jazztel.es) (Ping timeout: 268 seconds)
[16:25:50] *** Quits: max22- (~maxime@2a01cb08833598007716dc2ce898ae00.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:31:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[16:32:58] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:49:26] *** Joins: PMunch (~PMunch@178.74.36.198)
[17:02:38] *** Quits: fputs (~evan@67.59.83.166) (Quit: WeeChat 3.2)
[17:03:47] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[17:04:50] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[17:09:41] *** Joins: SebastianM (~seba@user/sebastianm)
[17:18:02] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[17:21:49] *** Joins: fputs (~evan@67.59.83.166)
[17:27:40] *** Quits: PMunch (~PMunch@178.74.36.198) (Quit: leaving)
[17:43:39] *** Joins: max22- (~maxime@2a01cb08833598002e27d7fffeabcac8.ipv6.abo.wanadoo.fr)
[17:51:51] *** Joins: mikess (~sam@user/mikess)
[17:54:57] <FromDiscord> <dan> In reply to @haxscramper "https://zen.su/posts/amalgamating-nim-programs/": Thats a nice resource. Dragging CIL along as a dependency is hardly practical but I do see the point. Maybe i can do without a monolithic c file as long as i get clear instructions from the nim compiler which flags i need to pass to the c compiler.
[17:57:20] <FromDiscord> <haxscramper> nimcache directory has a `.json` file with all the necessary commands
[18:01:04] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Remote host closed the connection)
[18:13:00] *** Joins: Guest5749 (~Guest57@host-95-247-21-227.retail.telecomitalia.it)
[18:14:50] *** Joins: kots (~kots@li1473-207.members.linode.com)
[18:16:59] *** Quits: kots (~kots@li1473-207.members.linode.com) (Client Quit)
[18:17:16] *** Joins: kots (~kots@li1473-207.members.linode.com)
[18:18:37] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any example of parallel computing with vulkan in Nim?
[18:22:46] *** Joins: al1ranger (~al1ranger@182.57.234.155)
[18:22:52] <FromDiscord> <dan> In reply to @haxscramper "nimcache directory has a": indeed, @leorize pointed me to it. i am working on parsing them right now. unfortunately the json contains only the entire command to pass to the compiler, so im struggling a bit to extract the individual filenames and the flags within the build system
[18:23:33] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3qyA
[18:24:17] <FromDiscord> <mlokis> (edit) "https://play.nim-lang.org/#ix=3qyA" => "https://play.nim-lang.org/#ix=3qyB"
[18:25:58] *** Quits: al1ranger (~al1ranger@182.57.234.155) (Client Quit)
[18:27:38] *** Joins: al1ranger (~al1ranger@182.57.234.155)
[18:28:58] *** Quits: al1ranger (~al1ranger@182.57.234.155) (Client Quit)
[18:29:47] <FromDiscord> <haxscramper> In reply to @dan "indeed, <@!695851404832538684> pointed me": You can split on spaces or use https://nim-lang.org/docs/parseutils.html#parseUntil%2Cstring%2Cstring%2Cset%5Bchar%5D%2Cint to handle quotes in commands as well (if there any)
[18:30:22] <FromDiscord> <haxscramper> Or look for a command-line parsing library that can work with arbitrary strings
[18:30:33] <FromDiscord> <haxscramper> And use it
[18:32:28] <FromDiscord> <dan> i think splitting by spaces and analyzing the flags is the way to go here. just have to check if my build system puts something in there afterwards that shouldnt be and tedious stuff like that
[18:44:34] *** Quits: Guest5749 (~Guest57@host-95-247-21-227.retail.telecomitalia.it) (Ping timeout: 246 seconds)
[18:46:28] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[18:53:53] <FromDiscord> <ITR> trying to use weave with {.noSideEffects}, but getting "invalid pragma: noSideEffects" when I compile it, anybody know how I can get around this?
[18:54:19] <FromDiscord> <ITR> And also {.experimental: "strictFuncs".}
[18:55:41] <FromDiscord> <Rika> version of nim is?
[18:57:17] <FromDiscord> <ITR> Think I messed something up and that it wasn't weave after all
[19:00:05] <FromDiscord> <ITR> ah, I spelled it wrong, I wrote noSideEffects instead of noSideEffect
[19:02:50] <FromDiscord> <ITR> version 1.4.4, I guess "invalid pragma" doesn't really sound like "pragma doesn't exist", maybe a better wording could be in place? A quick search for similar sounding pragmas could be good too, to prevent common misspellings
[19:17:19] <FromDiscord> <konsumlamm> feel free to open an issue: https://github.com/nim-lang/Nim/issues
[19:23:49] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:24:49] <federico3> why I'm not showing up as a Nim backer on bountysource? D-:
[19:25:02] <FromDiscord> <ITR> I'll check if there's a similar one first later, after I finish this project
[19:27:09] <FromDiscord> <ITR> sent a code paste, see https://play.nim-lang.org/#ix=3qyZ
[19:28:50] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:31:29] <FromDiscord> <ITR> also happens when removing the echo, realized I forgot to do so in the one I pasted
[19:38:18] <FromDiscord> <vindaar> the side effect here is just the `echo`, no?
[19:39:31] <FromDiscord> <ITR> nope, also happens when echo is removed
[19:39:44] <FromDiscord> <ITR> still nim 1.4.4
[19:41:41] <FromDiscord> <vindaar> where does `iLoop` come from?
[19:41:59] <FromDiscord> <vindaar> ahh
[19:42:10] <FromDiscord> <vindaar> is that just `weave` syntax to name the loop?
[19:42:20] <FromDiscord> <vindaar> never used those things from `weave`
[19:42:22] <FromDiscord> <ITR> yeah, it's lifted straight from their readme
[19:42:47] <FromDiscord> <ITR> I also tried differently with a regular for loop, but figured it would be better with an example from there
[19:43:10] <FromDiscord> <Vindaar> @mratsim was around earlier
[19:49:38] <FromDiscord> <dom96> In reply to @federico3 "why I'm not showing": federico3: probably best to switch to opencollective by now
[19:49:43] <FromDiscord> <dom96> bountysource is sketchy
[19:49:56] <FromDiscord> <ITR> sent a code paste, see https://play.nim-lang.org/#ix=3qzk
[19:50:13] <federico3> thanks
[19:53:44] <FromDiscord> <ITR> ah, wait, maybe it's because it calls loadBalance on weave
[20:12:54] <FromDiscord> <deech> How does `{.cursor.}` differ from `{.acyclic.}`?
[20:22:08] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[20:29:56] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 258 seconds)
[21:00:50] <FromDiscord> <aleclarson> is there a special pragma for circular calls between two `proc`s?
[21:00:59] <FromDiscord> <aleclarson> eg: `a` calls `b` and `b` calls `a`
[21:03:22] <FromDiscord> <Rika> You forward declare one of them
[21:03:50] <FromDiscord> <ITR> how do I fully flatten a seq[seq[seq[T]]], getting an issue when I try concat with seq[seq[T]] & seq[seq[T]]?
[21:06:15] <FromDiscord> <aleclarson> @Rika Of course, thank you!
[21:08:04] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:09:15] <FromDiscord> <konsumlamm> In reply to @ITR "how do I fully": `concat(concat(s))` should work
[21:14:10] <FromDiscord> <aleclarson> is type narrowing possible with generics?
[21:16:07] <FromDiscord> <Rika> type narrowing?
[21:16:47] <FromDiscord> <Rika> oh you mean type restrictions?
[21:16:53] <FromDiscord> <Rika> yeah if im not misinterpreting
[21:17:16] <FromDiscord> <Rika> `proc someproc[T: int or float](a: T): T = ...`
[21:17:18] <FromDiscord> <ITR> In reply to @konsumlamm "`concat(concat(s))` should work": ty ^^
[21:17:45] <FromDiscord> <ITR> though it seems that my seq[char] get turned into seq[uint8] when I concat
[21:18:03] <FromDiscord> <aleclarson> In reply to @Rika "`proc someproc[T: int or": lovely, thx again \:)
[21:18:45] <FromDiscord> <codic> In reply to @konsumlamm "if it works as": one might already be open i should take a look maybe
[21:48:16] <FromDiscord> <ynfle (ynfle)> @\_discord\_271498588981297157\:t2bot.io https://nim-lang.org/docs/destructors.html#the-dotcursor-annotation
[21:48:21] <FromDiscord> <ynfle (ynfle)> @deech https://nim-lang.org/docs/destructors.html#the-dotcursor-annotation
[21:51:39] *** Joins: mikess (~sam@user/mikess)
[21:51:40] <FromDiscord> <ynfle (ynfle)> `{.cursor.}` means that this `ref` isn't mine (ie. owned). That means that it an already created object and the shouldn't count as a reference to the object.↵`{.acyclic.}` means that cyclic check aren't needed because they won't exist.↵↵This is understanding
[22:06:52] *** Joins: Vladar (~Vladar@46.162.2.53)
[22:09:42] <FromDiscord> <KJ> sent a code paste, see https://play.nim-lang.org/#ix=3qzX
[22:10:03] <FromDiscord> <Rika> import enumerate
[22:10:33] <FromDiscord> <KJ> `Error: cannot open file: enumerate`
[22:10:49] <FromDiscord> <Rika> nim version?
[22:11:16] <FromDiscord> <KJ> sent a code paste, see https://play.nim-lang.org/#ix=3qzY
[22:11:44] <FromDiscord> <Rika> ah, sorry
[22:11:48] <FromDiscord> <Rika> import std/enumerate
[22:12:18] <FromDiscord> <KJ> same error as before
[22:12:25] <FromDiscord> <Rika> update nim
[22:12:33] <FromDiscord> <Rika> your nim is over a year old
[22:12:48] <FromDiscord> <Rika> and is on an unsupported minor version
[22:12:51] <FromDiscord> <KJ> wow
[22:13:00] <FromDiscord> <pointystick> Do you even need enumerate there? https://play.nim-lang.org/#ix=3qzZ
[22:13:22] <FromDiscord> <Rika> not in this case
[22:13:24] <FromDiscord> <Rika> he doesnt
[22:13:35] <FromDiscord> <KJ> In reply to @pointystick "Do you even need": probably not
[22:13:41] <FromDiscord> <Rika> but in other cases (iterable with items() implemented but not pairs()) it would be needed
[22:14:08] <FromDiscord> <Rika> or items() impl'd and pairs() impl'd in a different way (like say an iterable table)
[22:14:09] <FromDiscord> <KJ> that just be coming from python think I need enumerate. Still really new to nim
[22:16:49] *** Joins: SebastianM (~seba@user/sebastianm)
[22:20:33] <FromDiscord> <Varriount> In reply to @KJ "that just be coming": Enumerate is built-in for most types. `for i, item in sequence:` will work.
[22:22:32] <FromDiscord> <KJ> `pairs() can not iterate a JsonNode of kind JArray`, should I be converting this `JArray` to a sequence?
[22:23:55] <FromDiscord> <KJ> sent a code paste, see https://play.nim-lang.org/#ix=3qA3
[22:24:07] <FromDiscord> <KJ> (edit) "https://play.nim-lang.org/#ix=3qA3" => "https://play.nim-lang.org/#ix=3qA4"
[22:24:53] <FromDiscord> <randyr> Try: `data["near_earth_objects"].getElems()`
[22:25:28] <FromDiscord> <KJ> that worked, cheers
[22:26:23] <FromDiscord> <randyr> Are exceptions expensive? I'm looking at `std/critbits` right now and there seems to be now way to get some value by key without knowing it exists. `tree["key"]` will throw an exception (and I need to perform this multiple times). I could use `contains`, e.g `if key in tree: tree[key]` but this requires two lookups
[22:26:30] <FromDiscord> <randyr> (edit) "now" => "no"
[22:26:59] <FromDiscord> <randyr> I kinda wished the `rawGet` function were just public
[22:29:06] *** Joins: PMunch (~PMunch@178.74.36.198)
[22:30:32] <FromDiscord> <treeform> In reply to @Randall "Are exceptions expensive? I'm": I would recommend timing it yourself if you want to know whats expensive and whats not.
[22:30:45] <FromDiscord> <randyr> True.
[22:31:08] <FromDiscord> <treeform> In my mind exceptions  are not... but that could be wrong.
[22:31:10] <FromDiscord> <randyr> It doesn't seem like critbrits can be compiled to a const tho
[22:32:33] <FromDiscord> <randyr> A bit more context: I'm trying to parse HTML entities, which is a map of ~2200 strings to strings. I'm looking for an efficient way to find the longest matching string (not longest prefix, it has to actually match one the entities). I figured critbits would be a decent solution to this, but I'm not sure yet
[22:32:54] *** Parts: mikess (~sam@user/mikess) ()
[22:34:17] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[22:38:53] <PMunch> Ooh neat, the channel has moved over to Libera now?
[22:39:23] <FromDiscord> <planetis> i wonder if catching all is faster than except ValueError
[22:39:44] <FromDiscord> <planetis> oh there is PMunch were have you been?
[22:40:02] <PMunch> Mandatory military training exercise :P
[22:40:14] <PMunch> Since last Monday
[22:42:18] <FromDiscord> <planetis> cool that sounds fun
[22:42:38] <PMunch> Yeah it is pretty fun
[22:42:52] <PMunch> Nice to do something completely different for a couple of days
[22:45:17] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I know you can overload `[]`
[22:45:38] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what if I'm trying to do `foo[4] = barr`
[22:45:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> how can I overload index and assign?
[22:46:03] <FromDiscord> <randyr> `[]=`
[22:46:15] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:46:23] <PMunch> Oh neat, irclogs is updated as well, and with my new colour scheme :)
[22:46:42] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thanks @\_discord\_135818050027913216\:t2bot.io
[22:47:06] <PMunch> And the json output :D
[22:50:59] <FromDiscord> <hamidb80> hey
[22:52:07] <FromDiscord> <hamidb80> i think `hashSet` doesn't work
[22:52:35] <FromDiscord> <hamidb80> and also nim playground 😐
[22:53:01] <FromDiscord> <hamidb80> https://play.nim-lang.org/#ix=3qAf
[22:53:20] <FromDiscord> <hamidb80> shoudn't color of the `Bag` be unique?
[22:53:36] <FromDiscord> <hamidb80> i declared `hash` function for it
[22:55:00] <FromDiscord> <hamidb80> (edit) "shoudn't color of the `Bag` be unique? ... " 03added "and the output be just the first `Bag` ?"
[22:58:11] <FromDiscord> <dom96> In reply to @PMunch "Oh neat, irclogs is": Yeah. It looks awesome 🙂
[22:58:38] <FromDiscord> <dom96> I posted a blog article on Nim’s website as well in case you haven’t seen it about the move
[22:58:48] <PMunch> Thanks :) It's just based on the Dracula colour scheme that is used for the playground and the website for snippets
[22:59:16] <PMunch> Oh the website has been updated as well
[23:01:17] <PMunch> Oh and Telegram is now linked to he main channel?
[23:02:37] <FromDiscord> <hamidb80> In reply to @hamidb80 "shoudn't color of the": ?
[23:05:00] <FromDiscord> <Bung> https://play.nim-lang.org/#ix=3qAg
[23:05:19] <FromDiscord> <Bung> you should add duplicated item to see what happens
[23:06:01] <PMunch> But he implemented a hash function for Bag that should only take into account the colour..
[23:06:32] <FromDiscord> <dom96> In reply to @PMunch "Oh and Telegram is": Yep
[23:06:54] <PMunch> Ah right, you need on `==` proc as well for sets to behave like you expect
[23:07:50] <PMunch> How's that going? The Telegram chat always felt a bit different from the other communities
[23:07:53] <FromDiscord> <Bung> that's werid, dont know the internal , the hash function dont right, but result looks right
[23:09:04] <PMunch> Like this: https://play.nim-lang.org/#ix=3qAi
[23:09:49] <FromDiscord> <hamidb80> In reply to @PMunch "Like this: https://play.nim-lang.org/#ix=3qAi": thanks
[23:10:11] <FromDiscord> <hamidb80> i think the `HashSet` should consider hashed value
[23:10:16] <FromDiscord> <hamidb80> (edit) "i think the `HashSet` should consider hashed value ... " 03add[23:26:04] <FromDiscord> <niv> i am, but it runs in rosetta mode and that is more painful than it needs to be since im linking a bunch of native code
[23:26:12] *** Parts: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (WeeChat 2.7)
[23:26:42] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:26:52] <FromDiscord> <niv> it works, im just impatient ;)
[23:39:01] <FromDiscord> <hamidb80> in order to use "devel" version, do i have to build the compiler manually or the precompiled version exists in somewhere?
[23:39:14] <FromDiscord> <hamidb80> (edit) 04removed "in"
[23:40:02] <FromDiscord> <𝖍𝖆𝖝𝖘𝖈𝖗𝖆𝖒𝖕𝖊𝖗> choosenim devel
[23:40:29] <FromDiscord> <𝖍𝖆𝖝𝖘𝖈𝖗𝖆𝖒𝖕𝖊𝖗> That would download and select devel version of the compiler/toolchain
[23:50:46] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[23:51:51] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:56:30] <FromDiscord> <niv> In reply to @zetashift "https://nim-lang.org/blog/2021/05/25/version-148-re": thanks, figured it out. i was installing it via choosenim, which forced x64. compiling 1.4.8 manually gives me native binaries
[23:56:54] <FromDiscord> <niv> and they're very fast, nice
[23:58:14] <FromDiscord> <@bracketmaster-5a708063d73408ce4> how do you get the max value a type such as int32 can hold in nim?
