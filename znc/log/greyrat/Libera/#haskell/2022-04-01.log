[00:00:24] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Quit: Leaving)
[00:02:24] *** Quits: deadmarshal_ (~deadmarsh@5.115.35.156) (Read error: Connection reset by peer)
[00:07:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:09:08] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[00:11:06] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[00:12:05] *** Joins: cheater (~Username@user/cheater)
[00:12:55] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:14:22] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:19:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:20:22] *** Joins: acidjnk (~acidjnk@p200300d0c7049f56dc923130dc4d7bd3.dip0.t-ipconnect.de)
[00:21:36] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[00:21:46] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[00:23:01] <Boarders_> Is there a straight forward way to life a Parsec parser to a ParserT parser from megaparsec?
[00:23:56] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:25:05] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[00:27:50] *** Joins: jinsun__ (~jinsun@user/jinsun)
[00:28:58] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 260 seconds)
[00:31:54] <geekosaur> Parsec e s is an alias for ParsecT e s Identity. I don't know what your ParserT is but it probably specifies one or both of e and s?
[00:32:00] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:32:13] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:32:25] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:32:42] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:33:33] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:36:21] <Boarders_> sorry, I meant like: ParsecT e s Identity a -> ParsecT e s m a
[00:36:26] <Boarders_> i.e. hoist
[00:36:42] <lyxia> probably not because ParsecT is ContT-like
[00:36:44] <Boarders_> (well with pure)
[00:36:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:37:20] <lyxia> but you should be able to generalize your definitions from Parsec e s a to forall m. ParsecT e s m a
[00:39:55] <Boarders_> ah very good ponit
[00:39:58] <Boarders_> point*
[00:41:23] <geekosaur> yeh, that was what I was trying to point out
[00:42:26] *** Joins: anon61924576 (~anon61924@85.210.203.240)
[00:42:37] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:42:55] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[00:42:58] *** Joins: pavonia (~user@user/siracusa)
[00:44:16] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-96c1-0fad-58de-6f58.res6.spectrum.com)
[00:44:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:45:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:47:01] *** Quits: theproffesor (~theproffe@2601:282:847f:8010::7f59) (Quit: ¯\_(ツ)_/¯)
[00:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:47:38] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[00:48:54] *** Quits: anon61924576 (~anon61924@85.210.203.240) (Ping timeout: 250 seconds)
[00:50:40] *** Quits: nexeq (nexeq@user/nexeq) (Quit: WeeChat 3.4)
[00:51:56] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:52:25] <madjestic> Hey guys, is there a way to embed IO inside arrows?  Here's a very contrived example of what I want to achieve (whether I really do want this is another question): https://www.paste.org/121683
[00:52:50] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:53:26] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:53:55] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[00:54:31] <geekosaur> have you looked at Kleisli?
[00:55:03] *** RMSBach is now known as RSBach
[00:55:57] *** Quits: odnes_ (~odnes@5-203-245-187.pat.nym.cosmote.net) (Remote host closed the connection)
[00:56:08] <madjestic> geekosaur: Kleisli certainly popped up when I was googling it, is that what I need?
[00:56:29] <geekosaur> if you wrap a monad in Kleisli it becomes an arrow
[00:56:51] <geekosaur> that includes IO
[00:57:40] <madjestic> thanks, geekosaur , I will look into Kleisli
[00:57:46] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[00:58:31] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:02:42] *** Joins: anon61924576 (~anon61924@85.210.203.240)
[01:04:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[01:05:23] <energizer> anybody know of a language where you can fold over a type?
[01:07:06] *** Quits: anon61924576 (~anon61924@85.210.203.240) (Ping timeout: 250 seconds)
[01:07:15] <energizer> foldl max Int == 9223372036854775807
[01:07:38] *** Joins: anon61924576 (~anon61924@85.210.203.240)
[01:07:50] <tomsmeding> > maximum [minBound .. maxBound] :: Word8
[01:07:52] <lambdabot>  255
[01:07:57] <tomsmeding> Int would take a while
[01:08:25] <energizer> that's not quite the same is it
[01:09:45] <tomsmeding> > foldl1 max [minBound .. maxBound]
[01:09:47] <lambdabot>  ()
[01:09:48] <tomsmeding> > foldl1 max [minBound .. maxBound] :: Word8
[01:09:50] <lambdabot>  255
[01:09:52] <tomsmeding> better?
[01:10:15] <tomsmeding> [minBound .. maxBound] is precisely the enumeration of values in every type for which that list would be finite
[01:10:40] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:12:52] <tomsmeding> I guess there would need to be another class that gives you all the values of a type even if that list would be infinite; 'enumFrom' doesn't cut it because there might be negative values
[01:14:14] <energizer> > foldl1 max Word8
[01:14:16] <lambdabot>  error:
[01:14:16] <lambdabot>      Data constructor not in scope: Word8 :: t0 a
[01:14:44] <energizer> is it possible to make that work?
[01:15:39] <tomsmeding> not in Haskell, but why would you want it to work?
[01:15:51] <tomsmeding> it's just syntax away from something that _could_ work
[01:15:56] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:17:08] <energizer> types are like sets but for some reason i cant iterate them
[01:17:30] <tomsmeding> what would 'foldr (:) [] Double' do?
[01:17:51] <tomsmeding> or 'foldr (:) [] Rational'
[01:18:04] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:7d90:53ef:dae4:ac6b)
[01:18:12] <tomsmeding> or 'foldr (:) [] (Set Rational)' :p
[01:18:21] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[01:18:24] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:18:35] <energizer> it would return a list of Rationals
[01:18:45] <tomsmeding> hmmm, or 'foldr (:) [] ([Double] -> [Double])'
[01:19:36] <energizer> what would foldr over any infinite stream do
[01:19:40] *** Joins: jakalx (~jakalx@base.jakalx.net)
[01:19:46] <tomsmeding> produce an infinite stream
[01:19:50] <tomsmeding> the infinite-ness is not the issue
[01:20:09] <tomsmeding> the issues are 1. you have to choose an order, and 2. how do you enumerate a function type
[01:20:49] <energizer> i can think of at least one way to enumerate Word8
[01:21:00] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 240 seconds)
[01:21:15] <tomsmeding> me too, but I can think of a number of reasonable ways to enumerate Double, and even more ways to enumerate 'Set Double'
[01:22:05] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 250 seconds)
[01:22:05] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[01:22:13] <energizer> i can fold over a set like {1,2,3} even if its unordered
[01:22:24] <tomsmeding> no you can't, you choose an order
[01:22:39] <tomsmeding> if you're using Data.Set.Set, that order is explicitly sorted order
[01:22:59] <energizer> ok, so Double could have such an order, too
[01:23:06] <tomsmeding> hm, I guess you can fold over an unordered set if the folding function is statically guaranteed to be commutative & associative
[01:23:46] <tomsmeding> I wonder if this does something relevant https://en.wikipedia.org/wiki/SETL
[01:24:36] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:25:25] <energizer> hey that's a list comprehension
[01:25:32] *** Joins: stefan-_ (~cri@42dots.de)
[01:26:47] <energizer> anyway yeah max over doubles is associative and commutative so order is irrelevant
[01:27:23] <tomsmeding> yes, but for that to make sense you'd need a language that can statically reason about commutativity/associativity of functions, which Haskell can't
[01:27:57] <tomsmeding> (or accept that well-definedness of your program is up to the programmer, in which case a dynamically typed language would work as well :D)
[01:28:19] <energizer> what does well definedness mean?
[01:28:26] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:29:03] <tomsmeding> what would the semantics of folding over any type with any, not necessarily commutative or associative, function be?
[01:29:17] <tomsmeding> I guess you could specify an order for all types inductively
[01:29:35] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:29:40] <tomsmeding> energizer: afraid to ask, but do you have an application for this? :p
[01:30:07] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:30:29] <monochrom> Someone or something will pick an order. If not you, then the computer. If not planned, then unplanned.
[01:31:10] <energizer> just kinda working through my understanding of what types are
[01:31:30] <tomsmeding> well, in haskell, definitely not always sets of values
[01:31:34] <monochrom> If not reproducible, then irreproducible.
[01:31:41] <energizer> i dont really get what static typing is about
[01:32:07] <tomsmeding> all types of kind Type (also spelled *) are sets of values, but there are also types that are not of kind Type
[01:32:29] <tomsmeding> but I'm not sure if you're far enough in your haskell journey for that to be a useful thing to think about :p
[01:33:39] <monochrom> People do disagree over the purpose of static typing. But I side with a sentence in the Software Foundation textbook: A middle ground of catching mistakes early and staying within decidability.
[01:34:03] * tomsmeding agrees
[01:34:04] <energizer> presumably if * is Type then *->* is a function from one Type to another, this seems smple
[01:34:13] <tomsmeding> :k Maybe
[01:34:14] <lambdabot> * -> *
[01:34:32] <tomsmeding> ('k' for 'kind')
[01:34:39] <energizer> that sounds like a positive example for my hypothesis there
[01:34:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[01:35:00] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[01:35:03] <tomsmeding> indeed
[01:35:41] <madjestic> energizer: there's more than one answer to it, but on a basic level static typic langs weed out an important class of bugs a compile stage, rather than letting bugs manifest at runtime, if that's the kind of answer you expect.
[01:36:06] <energizer> i dont really know what 'static' or 'compile time' means
[01:36:21] <tomsmeding> what programming language(s) do you already know?
[01:36:30] <monochrom> There is a new one I like but I haven't fleshed it out. Types express your program's structure/architecture/organization/whatever-you-call-it.
[01:37:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:37:37] <energizer> i've written code in bash, lean, and a few languages in the space between those two
[01:37:40] <monochrom> For example modular programming and OOP can be boiled down to suitable type systems.
[01:38:29] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:7d90:53ef:dae4:ac6b) (Quit: Leaving)
[01:40:02] <madjestic> energizer: static types means that the types are defined and checked before your program is executed, and don't change when your software is already running (runtime), in the latter case there is a significant chance that type errors may occur, which can be bad.
[01:41:03] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:41:21] <energizer> seems like more information would be available if i just started the program and checked its properties then
[01:41:44] <tomsmeding> yes, but then it's already in production
[01:41:48] <tomsmeding> (presumably)
[01:41:55] <energizer> no it's still here with me
[01:42:00] <nosewings> it's beter to think of types in ML-style languages as algebras rather than sets
[01:42:20] <monochrom> There is no end to philosophizing this if you want. Doesn't mean it's a productive discussion for the rest of us.
[01:42:48] <monochrom> What is the point of writing code?!
[01:43:02] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[01:43:06] <tomsmeding> energizer: if you check something at runtime, then all you can ever check is the code paths that your program follows in the execution. The point of static/compile-time checks is to get some guarantees that will hold over _all_ executions
[01:43:16] <madjestic> monochrom: suffering
[01:43:22] <monochrom> hehe
[01:43:26] <tomsmeding> you won't be able to get all guarantees, since, as you rightly state, at runtime there will be more info
[01:43:42] <energizer> tomsmeding: that's not true, i can symbolically execute other paths
[01:43:47] <tomsmeding> but you can prove _some_, e.g. that you're never going to call (+) with two arguments of differing types
[01:44:02] <nosewings> you can also do much more with a more advanced type system
[01:44:21] <nosewings> (though the effort required to prove invariants ramps up very quickly)
[01:44:24] <tomsmeding> symbolic execution is not just running your program, it's doing an analysis that a compiler can also do
[01:44:31] <tomsmeding> but yeah, what monochrom says
[01:45:49] <monochrom> Na don't hide behind the façade of dynamic run time. Admit it, the most information is in the programmer's head. The only question is whether the programmer is honest in spelling it out or being smug in not talking.
[01:45:51] <energizer> i suppose one can have too much philosophy in a day
[01:46:40] <monochrom> And whether the programmer is humble in admitting that some machine checking is helpful or snobbish in insisting "I know what I'm doing".
[01:47:04] <maerwald> You don't need types to prove that your program behaves well, I guess. And types don't really prove that your program behaves well. I view them more as a utility for myself to reduce intellectual complexity.
[01:47:28] <monochrom> Alan Kay is smart enough to reasonably work with pure dynamic typing. That doesn't mean the rest of us should.
[01:47:37] <nosewings> you need types to prove that your program behaves "well" (for a certain definition of "well") in all circumstances
[01:47:46] <monochrom> The problem with opinion leaders is that their opinions works for them but not others.
[01:47:51] <maerwald> nosewings: I don't think so
[01:48:00] <nosewings> well, you don't need types---you can do with other kinds of formal verification
[01:48:04] <maerwald> yes
[01:48:07] <nosewings> but types are convenient
[01:49:08] <maerwald> types that are primarily about proofs also look rather different than what you come up with during a design phase of a program
[01:49:24] *** Joins: Pickchea (~private@user/pickchea)
[01:49:25] <maerwald> types are read by humans
[01:49:27] <tomsmeding> types prove _some_ stuff, but far from everything
[01:49:44] <monochrom> And let's face it, if you don't add an int with a function from string to bool, then you already have types in your head. Don't deny it.
[01:50:17] <tomsmeding> (though possibly in a richer type system than Haskell's)
[01:50:18] <energizer> `if (length (xs < 1)) null else (some (first xs))` 
[01:50:46] <tomsmeding> presumably `length xs < 1` instead of `length (xs < 1)`?
[01:50:58] <energizer> yeah
[01:50:59] <maerwald> I'd say we have structure (product types) and classes in our heads. I rarely think about Int32 vs Int64, I think "something numerical, I guess"... 
[01:51:11] <tomsmeding> :t \xs -> if length xs < 1 then Nothing else Just (head xs)
[01:51:12] <lambdabot> [a] -> Maybe a
[01:51:42] <tomsmeding> maerwald: programmers used to dynamic typing often have union types in their head, which Haskell doesn't have
[01:51:47] <energizer> how did it do that?
[01:51:55] <tomsmeding> :t length
[01:51:56] <lambdabot> Foldable t => t a -> Int
[01:51:59] <tomsmeding> meh
[01:52:01] <tomsmeding> :t head
[01:52:02] <lambdabot> [a] -> a
[01:52:22] <tomsmeding> energizer: it saw that I'm using `head` on `xs`, hence `xs` must be a list of stuff
[01:52:36] <energizer> :t last
[01:52:38] <lambdabot> [a] -> a
[01:52:48] <tomsmeding> > last []
[01:52:50] <lambdabot>  *Exception: Prelude.last: empty list
[01:52:57] <energizer> :t \xs -> if length xs < 1 then Nothing else Just (last xs)
[01:52:58] <lambdabot> [a] -> Maybe a
[01:53:48] <energizer> does it know that won't fail at runtime?
[01:53:52] <jackdk> % :t fmap Data.List.NonEmpty.last . nonEmpty
[01:53:52] <tomsmeding> no
[01:53:52] <yahb> jackdk: ; <interactive>:1:32: error:; * Variable not in scope: nonEmpty :: a -> f (GHC.Base.NonEmpty b); * Perhaps you meant one of these: data constructor `Q.NonEmpty' (imported from Test.QuickCheck), data constructor `NonEmptyF' (imported from Data.Functor.Base)
[01:54:06] <jackdk> % :m + Data.List.NonEmpty
[01:54:06] <yahb> jackdk: 
[01:54:09] <tomsmeding> haskell doesn't forbid partial functions, whereas Lean probably does
[01:54:15] <jackdk> % :t fmap Data.List.NonEmpty.last . nonEmpt
[01:54:15] <yahb> jackdk: ; <interactive>:1:32: error:; * Variable not in scope: nonEmpt :: a -> f (NonEmpty b); * Perhaps you meant one of these: `nonEmpty' (imported from Data.List.NonEmpty), data constructor `Q.NonEmpty' (imported from Test.QuickCheck)
[01:54:18] <jackdk> % :t fmap Data.List.NonEmpty.last . nonEmpty
[01:54:18] <yahb> jackdk: [b] -> Maybe b
[01:54:25] <jackdk> % :m - Data.List.NonEmpty
[01:54:25] <yahb> jackdk: 
[01:55:57] *** Joins: alp (~alp@user/alp)
[01:56:38] <nosewings> I have a situation where `f (g x)` typechecks but `let y = g x in f y` doesn't; does anyone know how this could happen?
[01:57:07] <tomsmeding> does `f` take a polymorphic type as argument?
[01:57:23] <tomsmeding> like, a RankNTypes type, with a forall in front
[01:57:30] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[01:57:33] <tomsmeding> if so, then MonomorphismRestriction
[01:58:45] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[01:58:51] <nosewings> no RankNTypes, turning on NoMonomorphismRestriction doesn't help anything
[01:59:20] <tomsmeding> hm, what's the types involved?
[01:59:22] <geekosaur> MonoLocalBinds controls that one
[01:59:39] <geekosaur> MonomorphismRestriction is for top level definitions
[01:59:44] <tomsmeding> ah
[01:59:50] <nosewings> Still no fix there
[02:00:07] <nosewings> This is using generic-data-surgery, which is doing some wizardry with Generic to "edit" types
[02:00:44] <nosewings> So the types involved are too large to type out here
[02:00:49] * tomsmeding suspects the issue is type inference then, i.e. adding the proper type signature to `y` would make it work
[02:01:27] <nosewings> Probably would do, but that's unfortunately not a realistic option
[02:01:28] <nosewings> Ah wel
[02:02:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:02:44] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[02:05:45] *** Joins: stewpot (~stewpot@2a02:c7e:34de:4500:c0b2:5560:8807:6081)
[02:13:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:41] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 245 seconds)
[02:13:57] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[02:13:58] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-25e7-2817-2baa-33e2.res6.spectrum.com) (Remote host closed the connection)
[02:14:08] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:15:44] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:18:22] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:20:57] *** Quits: michalz (~michalz@185.246.204.125) (Remote host closed the connection)
[02:21:57] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[02:25:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:26:23] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:29:36] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:31:22] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:34:02] <jle`> nosewings: yeah, i'm guessing it's because f has a rank n type, its argument is a (forall x. ..) and needs to be polymorphic
[02:34:23] *** Quits: Zemyla (~ec2-user@ec2-54-196-172-247.compute-1.amazonaws.com) (Ping timeout: 246 seconds)
[02:34:52] <jle`> > let f :: (forall a. a -> a) -> Int; f q = q 3 in f id
[02:34:53] <lambdabot>  3
[02:35:05] <jle`> > let f :: (forall a. a -> a) -> Int; f q = q 3; y = id in f y
[02:35:07] <lambdabot>  3
[02:35:13] <jle`> o that should have been an error
[02:36:35] <monochrom> let-polymorphism is enough to result in y being as polymorphic as id.
[02:37:04] <monochrom> MonoLocalBinds is probably not in effect on lambdabot.
[02:37:32] <jle`> > let f :: (forall a. a -> a) -> Int; f q = q 3 in case id of y -> f y
[02:37:34] <lambdabot>  error:
[02:37:34] <lambdabot>      • Couldn't match type ‘a’ with ‘a0’
[02:37:34] <lambdabot>        ‘a’ is a rigid type variable bound by
[02:37:55] <monochrom> Yeah you need case or lambda to monomorphize :)
[02:39:19] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 260 seconds)
[02:39:23] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:39:30] <monochrom> Very subtly and annoyingly this breaks the intuition "(let v = e in b) = (\v -> b) e". (is true after type erasure.)
[02:39:47] <nosewings> jle`: don't think so, none of the functions look I'm using have higher-rank types
[02:40:00] <monochrom> (and after you get past the type checker, of course :) )
[02:40:16] <nosewings> for some reason one of the type variables becomes ambiguous in the let-version
[02:40:16] <monochrom> (stupid type police :) )
[02:41:21] <monochrom> This is why we should be grateful for the monomorphism restriction haha.
[02:41:53] <monochrom> GMR = gracious monomorphism restriction
[02:42:27] <monochrom> err, gracious? graceful?  Damn English.
[02:42:39] <geekosaur> gracious, I think
[02:45:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:46:58] *** Quits: ccntrq (~Thunderbi@2a01:c23:94e3:d700:54f3:f8c1:9ce9:c8ca) (Read error: Connection reset by peer)
[02:47:12] *** Joins: napping (~brandon@65.128.49.110)
[02:47:43] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:50:42] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 260 seconds)
[02:50:52] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[02:51:11] *** Quits: Guest|18 (~Guest|18@116.21.1.31) (Ping timeout: 246 seconds)
[02:51:37] <Hecate> If anyone is interested in giving an hand with Flora, the main stuff that is needed right now is a way to adapt the current package import logic to work on the tarball of cabal files provided by Hackage
[02:51:49] <Hecate> https://dev.flora.pm <- also, basic search works now
[02:51:51] <Hecate> https://dev.flora.pm/packages 
[02:53:24] <napping> Is there a way to get standalone deriving to generate the full signature? I have a higher-kinded type where a "deriving Show" clause on the declaration isn't allowed because it would have a context with stuff like (Show (f Int)), but standalone deriving requires writing out the full context for the instance, explicitly listing all the tricky fields
[02:53:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[02:53:56] *** Quits: MasterK (~MK@86.127.10.135) (Remote host closed the connection)
[02:55:54] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:55:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[02:58:13] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:58:43] <napping> All from generics-sop works for some things, but GHC leaves an unexpanded All in the resulting type
[02:58:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[02:59:58] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 2.9)
[03:00:42] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[03:03:01] <napping> a partial workaround is to define a type synonym like "type MyTypeInst cls = (cls (f Int), cls (f Bool)) => cls (MyType f)
[03:03:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[03:04:06] <janus> Hecate: when i search for 'test' on hackage, i get lots of stuff, but on flora i get nothing
[03:04:46] <janus> even if i search for 'QuickCheck' i get nothing
[03:05:07] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[03:05:12] *** Joins: cheater (~Username@user/cheater)
[03:05:35] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[03:06:07] <napping> Needing to expand the synonym to see the => seems to force unfolding, but the same trick can't be used with a type family for mapping over a type-level list, because a type family can't return a Quantified Constraint
[03:08:50] *** Quits: acidjnk (~acidjnk@p200300d0c7049f56dc923130dc4d7bd3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:12:46] <sm> janus: they said yesterday search is not working yet
[03:13:14] <janus> well they just said 20 min ago that basic search works
[03:13:26] <sm> oh! I'm out of date :)
[03:13:40] <sm> nice to see changes
[03:14:33] <sm> yeah, not working yet
[03:18:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:18:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:20:01] <dons> morning all
[03:20:05] *** Joins: Techcable (~Techcable@user/Techcable)
[03:22:46] <dons> flora looks nice. is that using monaco.js for the web editor?
[03:23:42] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:23:58] <dons> ... i have a dream of running a hie -> glean indexer on each hackage upload, to serve hover/find-refs/jump-to-def on all hackage source files
[03:24:29] <dons> need a bit of work on the hiedb indexing first 
[03:25:16] *** Joins: Techcable (~Techcable@user/Techcable)
[03:29:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[03:30:37] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[03:31:05] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Remote host closed the connection)
[03:31:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[03:31:34] *** hololeap_ is now known as hololeap
[03:31:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:32:01] <Axman6> Hecate: is flora supposed to link to module documentation? I'm not seeing anything?
[03:32:18] <Axman6> the Documentation links link to the same page...
[03:35:36] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[03:36:44] <Axman6> I guess that's not done yet, looking forward to it though!
[03:36:55] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[03:37:42] <Axman6> Hecate: I find it a bit odd that the search field disappears on some pages (it might seem redundant on the packages page but I'd argue that actually somewhere where people are most likely to think "this is too hard, I'll just search for it")
[03:39:14] <geekosaur> janus, re search, it only has 36 packages indexed
[03:41:42] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 3.3)
[03:46:30] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[03:49:56] *** Quits: integral (sid296274@user/integral) (Ping timeout: 245 seconds)
[03:51:21] *** Joins: integral (sid296274@user/integral)
[03:51:58] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[03:52:23] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:53:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:57:40] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[04:00:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:00:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:00:51] *** Joins: wroathe (~wroathe@user/wroathe)
[04:02:58] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Ping timeout: 260 seconds)
[04:19:43] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 246 seconds)
[04:20:42] <sm> well I did install postgres just to try out a random FOSS project.. but failed at installing souffle. Would anyone have a copy of flora's generated cbits/categorise.cpp file ?
[04:22:54] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[04:23:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:26:46] *** Joins: mvk (~mvk@2607:fea8:5ce3:8500::3800)
[04:27:47] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 246 seconds)
[04:31:51] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:32:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[04:37:15] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[04:39:09] *** Quits: Topsi (~Tobias@dyndsl-095-033-092-148.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[04:39:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:44:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[04:47:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[04:50:53] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:50:54] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 3.3)
[04:51:16] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:51:19] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[04:51:27] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 260 seconds)
[04:54:39] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Client Quit)
[04:55:09] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[04:55:35] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[04:56:44] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:01:01] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 246 seconds)
[05:01:20] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 3.3)
[05:01:22] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[05:02:01] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[05:08:28] <zebrag> "λx.K(λk.1 + (if x = 0 then k2 else 3)) + 8", "Name k is bound to the continuation which adds 8". I've never seen anything like that before. I'm wondering how you manage to give it the argument "x". But otherwise, it is awesome. ("Minimal classical logic and control operators")
[05:09:49] <Axman6> I can't parse that
[05:10:12] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:12:00] <abastro[m]> What is K in `\x. K(..)`
[05:12:37] <ProfSimm> Is there a very precise guide to how HAskell parses whitespace
[05:12:38] <Axman6> yeah, and what's k2?
[05:13:17] <zebrag> abastro[m]: apparently it's an operator that will catch the context, so here it would be the adding of 8
[05:13:26] <abastro[m]> Perhaps `k 2`, because `k` is sth you could apply an argument
[05:13:47] <abastro[m]> Oh, operator catching contexr
[05:14:58] <abastro[m]> Idk why it adds 8 tho, like, this looks like delimited continuation on the surface
[05:15:14] <abastro[m]> Where `k 2` replace the K(..) term with 2 when called
[05:15:22] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[05:15:54] <zebrag> well they say it's delimited continuation, but I'm not crystal with delimited continuations, so I couldn't say
[05:16:43] <abastro[m]> Me too, tbh
[05:19:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:21:08] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:21:13] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[05:30:09] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:30:26] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:31:33] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-96c1-0fad-58de-6f58.res6.spectrum.com) (Remote host closed the connection)
[05:39:24] *** Joins: vysn (~vysn@user/vysn)
[05:40:33] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:40:58] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:45:14] *** Quits: anon61924576 (~anon61924@85.210.203.240) (Remote host closed the connection)
[05:45:31] *** Joins: anon61924576 (~anon61924@85.210.203.240)
[05:46:39] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:46:56] *** Joins: Akiva (~Akiva@user/Akiva)
[05:49:24] *** Joins: neurocyte8614 (~neurocyte@IP-094016090045.dynamic.medianet-world.de)
[05:49:24] *** Quits: neurocyte8614 (~neurocyte@IP-094016090045.dynamic.medianet-world.de) (Changing host)
[05:49:24] *** Joins: neurocyte8614 (~neurocyte@user/neurocyte)
[05:51:32] *** Quits: neurocyte861 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:51:33] *** neurocyte8614 is now known as neurocyte861
[05:54:17] <zebrag> I've read a couple of lines of https://en.wikipedia.org/wiki/Delimited_continuation, so I think, I almost know everything there is to know.
[05:54:51] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::6dc6)
[05:56:00] <zebrag> I've read that line to be specific: `(* 2 (reset (+ 1 (shift k (k 5)))))`
[06:01:39] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[06:06:02] *** Quits: anon61924576 (~anon61924@85.210.203.240) (Remote host closed the connection)
[06:06:39] *** Joins: jakalx (~jakalx@base.jakalx.net)
[06:13:14] <zebrag> "Partial continuations are control operators in functional programming such that a function-like object is abstracted from a part of the rest of computation, rather than the whole rest of computation." (https://doi.org/10.1007/3-540-44929-9_34 A Type-Theoretic Study on Partial Continuations)
[06:14:05] *** Joins: abastro (~abab9579@220.75.216.63)
[06:16:44] <abastro[m]> So the behavior differs in interesting way when continuation is called multiple times
[06:16:57] <abastro[m]> Otherwise, effectively just replacing the shifting code with 5
[06:17:27] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:18:12] <dolio> They differ in multiple ways, unless you use pretty specific examples.
[06:19:23] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[06:19:42] <dolio> Doing nothing but calling the continuation once immediately is one such example, though.
[06:21:02] <abastro> I mean by calling continuation at most once, it is equivalent with replacing the code in `shift` with the value supplied
[06:21:07] <janus> can ghc for the m1 automatically compile for x86_64 such that it is backwards compatible?
[06:21:17] <janus> does stack support this?
[06:21:34] <janus> asking because of this comment: https://stackoverflow.com/questions/69143043/how-to-create-native-arm-executables-on-macos-using-ghc-stack/71670541?noredirect=1#comment126696956_71670541
[06:22:27] <dolio> abastro: No, it's not that simple. For instance, you don't need to call the continuation inside the lexical scope of `shift`, and then the behavior is going to be very different.
[06:23:04] <abastro> Wait, no need to call continuation inside `shift`?
[06:24:16] <dolio> Although in the case of the undelimited analogue of shift, it's unclear how that would even happen, because you'd basically just be ending the computation.
[06:26:06] <abastro> Wait, soo
[06:26:44] <abastro> How do you even refer to the continuation out of the lexical scope of shift
[06:26:54] <dolio> You can return it from shift.
[06:27:01] <dolio> (shift k k)
[06:27:16] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:27:29] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:27:38] <dolio> That yields the continuation to whichever reset is enclosing it.
[06:28:57] <abastro> Oh. Tho tbh that is not 'calling' it
[06:29:15] *** Quits: Benzi-Junior (~BenziJuni@88-149-64-179.du.xdsl.is) (Remote host closed the connection)
[06:29:39] <dolio> That doesn't mean it's never called, just that it isn't called inside the lexical scope of shift.
[06:30:34] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[06:30:46] *** Joins: califax (~califax@user/califx)
[06:30:53] <dolio> let k = reset (8 + shift (\k -> k)) in 3 + k 5
[06:31:13] <zebrag> I don't know how the "λx.K(λk.1 + (if x = 0 then k2 else 3)) + 8", can be simulated by shift and reset: the `lambda x.K(...)` is really something.
[06:31:20] <zebrag> hum
[06:31:51] <dolio> That is 16, because `k` is the function that adds 8 in both cases.
[06:31:54] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[06:32:35] <zebrag> okay, I get it
[06:32:41] <abastro> Yep, I should have said like, called at most once inside the lexical scope and never escapes
[06:34:10] <abastro> Uhm isn't `2 + 8 = 10`?
[06:35:32] <zebrag> k is adding 8
[06:35:47] <zebrag> 3 + 8 + 5
[06:35:56] <monochrom> I don't use (or trust) wordy verbal "intuitive" descriptions.  I use algebra-like operational rules.  Here:
[06:36:05] <monochrom> outerstuff reset (innerstuff (shift k body) innerstuff) outerstuff
[06:36:12] <monochrom> -> let k = \x -> reset (innerstuff x innerstuff) in outerstuff body outerstuff
[06:37:01] <abastro> Meh I was looking at `λx.K(λk.1 + (if x = 0 then k2 else 3)) + 8`
[06:37:23] <zebrag> hum, this one
[06:37:45] <abastro> 2 'outerstuff's
[06:37:48] <abastro> I am confused
[06:37:51] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[06:37:59] <monochrom> The word "delimited continuation" refers to "reset (innerstuff [.] interstuff)" which is the scoped continuation (context) of the shift command there.
[06:38:31] <monochrom> What would you like me to call them?  dot dot dot?  Then I would have four "dot dot dot"s.
[06:38:47] <abastro> Btw I thought binding k cannot escape the scope of `body`, while its body could
[06:39:07] <monochrom> Ah OK, my bad for this one.
[06:39:22] <monochrom> outerstuff (let k = \x -> ... in body) outerstuff
[06:40:26] <dolio> The 'replacing the code in shift' is also mistaken, and responsible for this example.
[06:40:47] <dolio> reset (8 + shift (\k -> 1 + k 5)) = 1 + (8 + 5)
[06:41:07] <dolio> k acts like a function.
[06:41:40] <abastro> (reset (i1 (shift k body) i2) = (let_in k (\ x (i1 x i2)) body)
[06:41:45] <dolio> With undelimited continuations, the example acts differently.
[06:42:09] <abastro> Okay I just confused undelimited continuation with delimited continuation. Meh
[06:42:51] <monochrom> shift becomes undelimited if you don't have reset :)
[06:43:10] <monochrom> call/cc becomes delimited if you recall that there is a global RTS reset.
[06:43:32] <zebrag> what about `reset (8 + shift (\k -> 1 + k 5)) = 8 + 5` only?
[06:43:33] <monochrom> At least that's how Racket thinks of it.
[06:45:02] <abastro> I hate continuation now
[06:46:14] <monochrom> My http://www.vex.net/~trebla/haskell/cont.xhtml uses "Cont (\k -> ...)" for "shift k ...", "runCont p id" for "reset p".  This is my favourite way of using the Cont monad now. I no longer care about callCC.
[06:46:58] <monochrom> Indeed a lot of Scheme/Racket people ditch call/cc as well.
[06:47:07] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[06:47:32] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:48:10] <abastro> I did not know that `Cont (\k -> ...) was shift`
[06:48:12] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[06:48:22] <abastro> Now I can somewhat use mtl style continuation then
[06:48:36] <abastro> Uhm wait, ContT tho
[06:48:52] <sm> Hecate: flora: not only postgres, I even installed nix again (on mac). FYI I was stopped by https://discourse.nixos.org/t/derivations-failing-on-macos-due-to-libattr/5703 (of which a 2020 person said "I don’t think the attr library will ever build on mac, so the correct solution would be modifying the package to remove the attr library on mac")
[06:48:53] <monochrom> The observation is that the way people use call/cc is that they store continuations in mutable variables to emulate delimited continuations. When that happens, you know it's the end of an era and the dawn of a new one.
[06:50:18] <zebrag> Is there an equivalent of `reset` with `Cont (\k -> ...)`? or is it undelimited only?
[06:50:35] <dolio> reset is runCont.
[06:50:42] <zebrag> tx
[06:50:57] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::6dc6) (Quit: lainon)
[06:51:01] <dolio> With id.
[06:51:24] <abastro> Continuation is too hard, and so monad is somewhat hard as well :(
[06:52:22] <zebrag> monads are quite straightforward, no?
[06:52:41] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[06:52:46] <zebrag> applicatives are straightforward
[06:52:47] <monochrom> s/continuation/callback/ and suddenly it's easy :)
[06:52:49] <abastro> Well my understanding of monads go through continuation, soo..
[06:53:04] <abastro> I don't find callbacks that easy tho
[06:53:13] <abastro> Like, when it is used like continuation
[06:53:48] <monochrom> getLine >>= \s -> putStrLn ("hello " ++ s) --- That lambda is the continuation^W callback.
[06:54:12] <abastro> Yep, and that makes monad quite hard for many ppl I think
[06:55:05] <monochrom> Callback-based programming has been around for 20 years.
[06:55:11] <zebrag> callbacks can't drop a part of the code; callbacks are always easy to type
[06:55:52] <zebrag> in "λx.K(λk.1 + (if x = 0 then k2 else 3)) + 8", k does not behave like a function
[06:56:00] <monochrom> No one dare to say it's hard. It's best practice in many sectors.
[06:56:12] <abastro> `k` does behave like function, no?
[06:56:18] <zebrag> no
[06:56:21] <zebrag> not there
[06:56:32] <abastro> I thought `k` is just captured continuation there
[06:57:12] <zebrag> because if x=0, the result is supposed to be 10, not 11
[06:57:13] <abastro> Wait now I am confused
[06:57:16] <monochrom> If the framework decides to not call your callback, that's observationally equivalent to dropping code.
[06:57:35] <abastro> Yep, this one is not delimited continuation I guess
[06:57:44] <zebrag> but it would be the other way around here
[06:58:02] <zebrag> if you call the k, then it drops the `+ 1`
[06:58:15] <abastro> Yep, inner code decides what to do
[06:58:50] <abastro> Tho this looks like not-delimited continuation
[06:59:02] <monochrom> That's just known as "goto" to 60yos. :)
[06:59:08] <zebrag> it doesn't return like a function and then obediently add the 1
[07:00:05] <monochrom> or setjmp/longjmp.
[07:01:06] <abastro> & ppl dislike `goto` with passion :$
[07:01:23] <monochrom> Dislike, shame, but not "it's hard".
[07:02:46] <abastro> Because it is hard to follow the control-flow
[07:03:37] <abastro> + look at me, I am extremely confused btwn delimited continuation and normal continuation
[07:04:13] <abastro> Finally I see that the two are extremely different
[07:06:15] *** Quits: zyklotomic (~ethan@res388d-128-61-91-237.res.gatech.edu) (Ping timeout: 260 seconds)
[07:07:48] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:08:14] *** Joins: zyklotomic (~ethan@res380d-128-61-86-82.res.gatech.edu)
[07:09:34] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[07:10:25] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d)
[07:13:23] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:38] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:33] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:18:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:20:50] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[07:22:10] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[07:24:24] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[07:27:12] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:29:14] <zebrag> yes, like: no application should be without its continuation, never `(lambda x.u)v` but always `(lambda k x.u)kv`, and no function call ever return.
[07:30:00] <zebrag> so you need some side effects otherwise you'll be unaware of what is possibly happening, because it never returns
[07:30:16] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[07:30:37] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[07:31:22] <zebrag> `1 + 2` is okay because 1 and 2 are constant and `+` is a function symbol
[07:31:51] <zebrag> for every thing else you would need an additional continuation
[07:32:16] *** Joins: frost (~frost@user/frost)
[07:34:25] <sm> Hecate, FYI got a bit further by commenting out ghcid and iputils in shell.nix, and running make soufflé build -> https://termbin.com/0yuk
[07:35:09] *** Joins: mixfix41 (~homefame@user/mixfix41)
[07:35:56] <sm> (cc is https://termbin.com/92vk)
[07:45:36] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[07:45:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:46:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[07:48:03] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[07:48:58] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[07:51:03] *** Quits: abastro (~abab9579@220.75.216.63) (Ping timeout: 260 seconds)
[07:54:04] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:54:18] *** Joins: mbuf (~Shakthi@122.162.64.255)
[07:56:36] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:01:38] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:04:07] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:21:19] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:28:42] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[08:36:55] <albet70> if I git clone a haskell project which used cabal, how I can use cabal install that and expose its module to ghc?
[08:37:59] <albet70> for example, xlsx project on github, cabal v2-build, cabal v2-install --lib, now only cabal repl can use this module xlsx, ghci still not found
[08:38:24] <abastro[m]> Or just `cabal build` and always use cabal repl
[08:42:21] *** Quits: jinsun__ (~jinsun@user/jinsun) ()
[08:44:29] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:45:48] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[08:53:56] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[08:56:44] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Quit: Leaving)
[08:57:03] *** Joins: wardrunal (~goose@167.179.114.36)
[09:06:49] *** Joins: abastro (~abab9579@220.75.216.63)
[09:07:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:07:49] *** Quits: mvk (~mvk@2607:fea8:5ce3:8500::3800) (Ping timeout: 240 seconds)
[09:11:10] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[09:11:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[09:20:14] *** Joins: bahamas (~lucian@86.121.135.166)
[09:22:05] <sclv> add it to your cabal.project file as an extra package
[09:24:24] *** Joins: jinsun (~jinsun@user/jinsun)
[09:25:08] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:29:02] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:29:15] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[09:29:31] *** Quits: zyklotomic (~ethan@res380d-128-61-86-82.res.gatech.edu) (Ping timeout: 260 seconds)
[09:29:59] *** Quits: bahamas (~lucian@86.121.135.166) (Ping timeout: 260 seconds)
[09:30:17] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:31:34] *** Joins: zyklotomic (~ethan@r4-128-61-95-82.res.gatech.edu)
[09:37:08] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:47:23] <jneira[m]> hmm but `cabal install --lib` should make it available to ghci 🤔
[09:48:42] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:50:46] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[09:50:53] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[09:51:17] *** Quits: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[09:53:16] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:85fa:fa6d:a3c9:394a) (Ping timeout: 245 seconds)
[09:58:36] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:8562:905a:59dc:27e9)
[09:58:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:00:21] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-186.mrsn.at)
[10:22:35] *** Joins: chomwitt (~chomwitt@2a02:587:dc0e:a100:8d19:188:687f:a348)
[10:23:54] *** Joins: jinsun__ (~jinsun@user/jinsun)
[10:25:22] *** Joins: jinsun___ (~jinsun@user/jinsun)
[10:27:24] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[10:28:03] *** jinsun___ is now known as jinsun
[10:28:12] *** Joins: coot (~coot@213.134.190.95)
[10:28:43] *** Quits: jinsun__ (~jinsun@user/jinsun) (Ping timeout: 256 seconds)
[10:33:20] <albet70> "jneira[m] :hmm but `cabal install --lib` should make it available to ghci 🤔", still no
[10:33:50] <Axman6> this kind of global install of packages is generally not how we do things any more as far as I understand it
[10:33:58] <albet70> but I'd like to use runghc
[10:34:22] *** Quits: MasseR46 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[10:34:23] <albet70> load Main.hs in cabal repl to run seems not good...
[10:35:04] *** Joins: MasseR46 (~MasseR@51.15.143.128)
[10:35:38] <Axman6> is https://cabal.readthedocs.io/en/3.6/cabal-commands.html?highlight=run#cabal-v2-run helpful?
[10:40:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:40:36] <abastro> Oh, runghc..
[10:40:40] <albet70> "Axman6 :is https://cabal.readthedocs.io/en/3.6/cabal-commands.html?highlight=run#cabal-v2-run helpful?", but v2-run script.hs which is not a normal a.hs
[10:40:54] <abastro> So you want to use it for script?
[10:41:10] <Axman6> it is, everything that makes it scriptable is in comments
[10:41:19] <albet70> I'd like to run it easy like runghc a.hs
[10:41:20] <Axman6> IIRC including the shebang at the top
[10:41:37] <abastro> Yep, tho I guess it is not as easy with cabal
[10:41:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:42:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:42:33] <albet70> but v2-run script.hs need build-depends?
[10:42:59] <Axman6> isn't that what you'rte trying to do? depend on another library?
[10:43:07] <albet70> why cabal can't not like pip to install package and expose its all module
[10:43:35] <albet70> in python, pip could install package, and you can in python repl to it
[10:43:44] <Axman6> We've literally spent the last 15 years trying to get away from all the problems that doing that introduces
[10:44:19] *** Quits: jinsun (~jinsun@user/jinsun) ()
[10:45:40] *** Joins: jinsun (~jinsun@user/jinsun)
[10:48:41] *** Quits: slim (uid300876@id-300876.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:48:46] <abastro> I mean, for scripting you don't want to have .cabal file
[10:49:17] <abastro> `cabal v1-install` was basically what pip was doing, but it ended up being problematic
[10:49:22] <Axman6> exactly, which is why cabal v2-run specifically lets you embed the necessary parts of one into your .hs file
[10:49:33] <abastro> Oh, so you can embed in .hs?
[10:49:42] <Axman6> yes, that's why I linked to it
[10:49:46] <abastro> Well tell us how
[10:49:48] <abastro> Oh?
[10:49:56] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[10:50:18] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[10:50:20] <Axman6> "is https://cabal.readthedocs.io/en/3.6/cabal-commands.html?highlight=run#cabal-v2-run helpful?" 15 minutes ago
[10:50:41] <abastro> `#!/usr/bin/env cabal
[10:50:43] <abastro> {- cabal:
[10:50:44] <abastro> build-depends: base ^>= 4.11
[10:50:44] <abastro>             , shelly ^>= 1.8.1
[10:50:45] <abastro> -}
[10:50:45] <abastro> main :: IO ()
[10:50:46] <abastro> main = do
[10:50:47] <abastro>     ...`
[10:50:50] <abastro> So that is it
[10:51:21] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[10:53:42] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 260 seconds)
[10:54:04] *** Joins: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net)
[10:54:58] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-186.mrsn.at) (Quit: WeeChat 3.4.1)
[10:55:46] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[10:59:31] <albet70> I found the way, just cabal v2-install --lib xlsx, now ghci can directly use it...
[11:00:42] *** Joins: mattil (~mattil@d5z9ccdfmyl1jmjj16z-4.rev.dnainternet.fi)
[11:00:47] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:02:18] <albet70> cabal v2-install --lib lens, now runghc can use it directly
[11:02:49] *** Joins: michalz (~michalz@185.246.204.61)
[11:03:11] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[11:03:42] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:04:15] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[11:08:16] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:08:33] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94683de86d14f3245b.dip0.t-ipconnect.de)
[11:09:14] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[11:10:16] *** Quits: phma (~phma@host-67-44-208-132.hnremote.net) (Read error: Connection reset by peer)
[11:11:29] *** Joins: phma (phma@2001:5b0:211c:8dc8:4016:a5c0:9e05:5df9)
[11:11:45] <abastro> Wait, that's def strange
[11:11:53] <abastro> Didn't you use `cabal install --lib` before?
[11:15:48] <albet70> "abastro :Didn't you use `cabal install --lib` before?", no, so I can just use cabal install --lib to do the same?
[11:18:22] *** Quits: mattil (~mattil@d5z9ccdfmyl1jmjj16z-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:19:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:20:45] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[11:22:00] <abastro> Yep, it's the same
[11:22:08] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:22:13] <abastro> `v2-install == install` for newest versions of cabal
[11:22:43] <albet70> ok
[11:22:53] <abastro> I heard that `cabal install --lib` is supposed to be only used for experienced ppl though.
[11:23:19] <albet70> cabal v1-install is available?
[11:23:36] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[11:24:45] <tomsmeding> yes, but use is discouraged -- if there is something you really can only do through the v1- commands, you should open an issue on the cabal repo and describe your use case
[11:28:43] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:30:36] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3685:42fa:d9de:143d)
[11:30:54] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:8958:bc94:e84c:ec28)
[11:32:14] *** Joins: cfricke (~cfricke@user/cfricke)
[11:32:19] *** Joins: alp (~alp@user/alp)
[11:33:17] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[11:33:18] <abastro> I recall massively being confused by `v1-build` `v1-install` etc. tbh
[11:34:38] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[11:39:32] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:41:03] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[11:41:26] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[11:42:43] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:45:28] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:45:29] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:45:45] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:45:54] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[11:49:39] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:8562:905a:59dc:27e9) (Quit: Leaving)
[11:58:10] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[11:59:09] *** Joins: mcglk (~mcglk@131.191.49.120)
[12:00:13] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 260 seconds)
[12:01:50] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:01:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[12:04:12] *** Joins: vpan (~0@212.117.1.172)
[12:04:16] *** Joins: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl)
[12:04:33] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[12:04:39] <jackdk> Question: Given a finite type `t` (easy mode: Bounded and Enum instances; hard mode: Finite instance), is there a library which maps it to a representable functor `f` such that `Rep f ~ t`?
[12:09:07] *** Quits: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[12:12:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:12:23] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Read error: Connection reset by peer)
[12:15:11] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94683de86d14f3245b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:15:44] *** Joins: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl)
[12:18:07] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:19:01] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:8958:bc94:e84c:ec28) (Ping timeout: 240 seconds)
[12:24:32] *** Joins: jinsun__ (~jinsun@user/jinsun)
[12:24:33] *** jinsun is now known as Guest3467
[12:24:33] *** jinsun__ is now known as jinsun
[12:24:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:28:29] *** Quits: Guest3467 (~jinsun@user/jinsun) (Ping timeout: 272 seconds)
[12:32:14] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[12:38:58] *** Joins: Digit (~user@user/digit)
[12:39:09] *** Quits: Unhammer (~Unhammer@user/unhammer) (Read error: Connection reset by peer)
[12:44:06] *** Quits: megaTherion (~therion@unix.io) (Ping timeout: 245 seconds)
[12:44:20] *** Joins: ccntrq (~Thunderbi@2a01:c22:88e7:1b00:3fae:5eb6:677d:a5b)
[12:46:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:48:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:49:18] *** Joins: ph88 (~ph88@213.23.78.154)
[12:49:28] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[12:55:37] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[12:55:46] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[12:56:11] *** Joins: Unhammer (~Unhammer@user/unhammer)
[12:57:23] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 260 seconds)
[12:58:46] <tomsmeding> jackdk: are you talking about adjunctions:Data.Functor.Rep.Representable?
[12:59:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:00:50] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:01:30] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[13:02:42] *** Joins: Pickchea (~private@user/pickchea)
[13:06:38] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:07:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:08:48] *** Quits: belphegor666 (~satan@user/belphegor666) (Quit: WeeChat 3.4)
[13:09:08] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[13:10:09] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 250 seconds)
[13:11:32] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 272 seconds)
[13:12:07] *** Quits: abastro (~abab9579@220.75.216.63) (Ping timeout: 260 seconds)
[13:15:14] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:15:40] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[13:15:40] *** Joins: belphegor666 (~satan@user/belphegor666)
[13:20:59] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[13:25:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:26:46] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:27:30] *** Quits: lispy (~lispy@82.212.115.165) (Quit: Client closed)
[13:30:05] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:30:32] *** Quits: Typedfern (~Typedfern@73.red-83-57-140.dynamicip.rima-tde.net) (Ping timeout: 272 seconds)
[13:30:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[13:40:26] *** Joins: coot (~coot@213.134.190.95)
[13:43:32] *** Joins: Typedfern (~Typedfern@13.red-88-16-189.dynamicip.rima-tde.net)
[13:52:45] *** Joins: deadmarshal_ (~deadmarsh@95.38.118.110)
[13:54:30] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:58:41] *** Joins: megaTherion (~therion@unix.io)
[13:58:47] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[14:01:05] *** Quits: deadmarshal_ (~deadmarsh@95.38.118.110) (Ping timeout: 246 seconds)
[14:02:03] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.22)
[14:02:56] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:06:11] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[14:12:33] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 256 seconds)
[14:14:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[14:17:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:19:14] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94699c2b11d21dc0a3.dip0.t-ipconnect.de)
[14:22:13] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:22:19] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:22:45] <tomsmeding> jackdk: apparently you can! https://paste.tomsmeding.com/WQYUUcfP
[14:22:50] <tomsmeding> this was actually pretty fun
[14:25:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[14:27:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:28:50] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Quit: mikoto-c1)
[14:29:02] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:32:14] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[14:36:55] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[14:37:50] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 246 seconds)
[14:39:48] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[14:39:51] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[14:40:09] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:41:28] *** Joins: kuribas (~user@ptr-25vy0i9ukrx95drquaj.18120a2.ip6.access.telenet.be)
[14:42:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:43:00] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[14:45:54] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[14:46:16] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:46:49] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:48:13] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 260 seconds)
[14:53:23] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:58:12] <jackdk> tomsmeding: yeah Representable. Cool trick.  I wish https://hackage.haskell.org/package/universe-1.2.2/docs/Data-Universe.html#t:Finite had a type family so you can get its cardinality at the type level =/
[15:02:22] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[15:04:59] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[15:05:36] <tomsmeding> jackdk: ah, that Finite. Yeah, my code should be easily adaptable to use Finite instead of Enum+Bounded
[15:06:56] <jackdk> Even using representable would be a bit much for my colleagues, let alone that pastebin. But it's very cool that you can do that. 
[15:06:59] <tomsmeding> perhaps Finite doesn't include the cardinality on the type level because that grows super quickly sometimes? I needed to raise type checker reduction limits to get it to typecheck my 256-element type, so what about Set (Set Int) ?
[15:07:12] <tomsmeding> heh
[15:08:13] *** Quits: rembo10 (~rembo10@main.remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[15:08:23] <jackdk> I don't know what back GHC's Nat or whether you could cook something up without needing induction
[15:09:06] *** Joins: rembo10 (~rembo10@main.remulis.com)
[15:09:33] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:11:31] <tomsmeding> jackdk: I can't even write the Distributive (NProduct (n + 1)) instance with GHC Nats because that instance head itself doesn't even typecheck
[15:11:39] <tomsmeding> "Illegal type synonym family application ‘n + 1’ in instance:"
[15:11:44] <jackdk> lame
[15:12:12] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: No route to host)
[15:12:37] <tomsmeding> I really don't understand why the ghc nats are like this, what are you even supposed to do with type-level naturals if you can't do induction on them
[15:12:47] <tomsmeding> everything you do on the type level is based on induction
[15:13:08] <c_wraith> what GHC's type-level nats have is fast computation.  relatively.
[15:13:12] <c_wraith> they lack everything else
[15:13:15] <tomsmeding> right
[15:13:22] <tomsmeding> as in, constant-time computation?
[15:13:41] <c_wraith> I suppose so, as they're fixed size.
[15:13:49] <c_wraith> they're just Int internally
[15:13:58] <tomsmeding> this is fixed size as well https://github.com/AccelerateHS/accelerate/blob/master/src/Data/Array/Accelerate/AST/Idx.hs#L75-L92
[15:14:17] <tomsmeding> though fair, these are not type-level nats
[15:14:26] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Quit: WeeChat 3.4)
[15:14:28] <tomsmeding> but I wonder whether an analogous trick would be possible
[15:14:53] <c_wraith> but it's worth note that there are ghc plugins that connect up an SMT solver to calculations on Nat
[15:15:18] <c_wraith> and that's a thing that makes sense to not be part of mainline GHC
[15:15:38] <tomsmeding> c_wraith: how would I then write this? instance Distributive (NProduct n) => Distributive (NProduct ('S n)) where
[15:15:41] <tomsmeding> right
[15:15:51] <tomsmeding> use (n - 1) in the context?
[15:16:16] <abastro[m]> Create peano number datatype?
[15:16:21] <tomsmeding> abastro[m]: I did lol
[15:16:27] <c_wraith> that use of 'S looks like a peano number already
[15:16:36] <tomsmeding> c_wraith: it is, it is line 101 of https://paste.tomsmeding.com/WQYUUcfP
[15:16:42] <Hecate> < janus> Hecate: when i search for 'test' on hackage, i get lots of stuff, but on flora i get nothing // yes, it's a dev instance, only ~40 packages are imported
[15:16:58] <Hecate> < Axman6> Hecate: is flora supposed to link to module documentation? I'm not seeing anything? // nope, that's one of the UI elements that's not finished yet
[15:16:59] <tomsmeding> point is that I had to write my own peano numbers and couldn't use ghc nats, because one can't do induction over ghc nats
[15:17:07] <Hecate> < Axman6> Hecate: I find it a bit odd that the search field disappears on some page // yes it is
[15:17:53] <tomsmeding> c_wraith: (um, line 96, but you figured that out already)
[15:17:56] <Hecate> < sm> well I did install postgres just to try out a random FOSS project. // I think some paths are hardcoded in the generated cpp, that's why I stopped vendoring it. Which OS do you use?
[15:18:11] <c_wraith> tomsmeding: no I didn't!  I've been awake too many hours in a row. :)
[15:18:19] <tomsmeding> :p
[15:19:28] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:20:22] <c_wraith> yeah, if you had a solver working on it, you'd just say that the instance for (n-1) exists
[15:20:34] <tomsmeding> right
[15:21:16] <tomsmeding> I also do induction over the type-level nats on the value level (using a manual singleton here), e.g. on lines 104--113
[15:21:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:21:41] <c_wraith> yeah.. I didn't read the code, but that's the only reason to define SNat
[15:21:45] <tomsmeding> I find it hard to see how an SMT-based type checker plugin would provide something like that
[15:21:48] <tomsmeding> yeah
[15:21:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:22:00] <tomsmeding> but you can't define SNat usefully with ghc nats!!!!
[15:22:12] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:22:17] <tomsmeding> but maybe I'm missing some of the magic possible with type checker plugins
[15:22:22] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:23:05] <abastro[m]> Well you can convert typelevel Nat to your peano type using typefamily :P
[15:24:04] <tomsmeding> right, and the sensibility of that type family would then be checked by the tc plugin presumably (because you currently can't define such a type family)
[15:24:13] <c_wraith> I think the type plugin can just synthesize a KnownNat instance wherever it can calculate one.
[15:24:29] <c_wraith> So you just do your calculations at the type level then reflect down to the value level
[15:24:44] <c_wraith> it all turns into passing Int values around after compilation
[15:24:46] <tomsmeding> type family Conv (n :: TypeNats.Nat) :: Nat where Conv 0 = 'Z ; Conv n = 'S (Conv (n - 1))
[15:25:24] <tomsmeding> maybe I should try playing with ghc nats again with that plugin
[15:26:22] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[15:27:15] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[15:28:52] *** Joins: __monty__ (~toonn@user/toonn)
[15:32:06] *** Joins: comerijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:33:31] *** Quits: merijn (~merijn@c-001-002-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[15:34:06] <abastro[m]> I thought you could indeed define such type family..
[15:34:29] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-64-179.hive.is)
[15:34:41] <abastro[m]> Requires UndecidableInstances but it worked iirc
[15:36:20] *** Quits: phma (phma@2001:5b0:211c:8dc8:4016:a5c0:9e05:5df9) (Read error: Connection reset by peer)
[15:36:38] *** Quits: comerijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[15:37:12] *** Joins: Guest|68 (~Guest|68@88.223.202.146)
[15:37:29] *** Joins: phma (phma@2001:5b0:211f:57f8:a451:bb44:e55e:abda)
[15:38:06] *** Quits: Guest|68 (~Guest|68@88.223.202.146) (Client Quit)
[15:39:25] <tomsmeding> right, you can define the type family, but you can't use it
[15:39:29] <tomsmeding> or, usefully use it
[15:39:42] <tomsmeding> but perhaps that is indeed solved by some magic KnownNat dicts being generated
[15:44:16] <abastro[m]> You cannot hsefully use it? Hmm
[15:47:42] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[15:48:06] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[15:51:35] <Hecate> 2
[15:51:37] <Hecate> (woops)
[16:05:11] *** Joins: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com)
[16:07:33] *** Quits: dcoutts__ (~duncan@host109-149-1-229.range109-149.btcentralplus.com) (Ping timeout: 260 seconds)
[16:09:14] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[16:10:03] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[16:10:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[16:11:47] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 260 seconds)
[16:12:57] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:16:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:19:39] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:23:32] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:23:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:24:04] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[16:25:07] <tomsmeding> > join (.) (ap (.)) (const id) (+1) 0
[16:25:10] <lambdabot>  2
[16:28:19] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:28:48] <maerwald[m]> tomsmeding: did you calculate that in your head?
[16:29:13] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:29:27] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[16:29:38] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:29:48] *** Joins: alp (~alp@user/alp)
[16:30:06] *** Joins: frost (~frost@user/frost)
[16:32:04] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:32:42] <tomsmeding> no lol, made good use of pointfree.io
[16:32:47] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[16:33:13] <boxscape> @unpl join (.) (ap (.)) (const id)
[16:33:13] <lambdabot> (\ b0 x -> b0 (b0 x)) (\ m2 b0 -> (m2 >>= \ x2 -> return (\ x -> b0 (x2 x))) b0) (\ _ x -> x)
[16:33:14] <tomsmeding> 'const id' is church encoded zero, 'ap (.)' is church encoded one, 'join (.)' applies twice
[16:33:18] <tomsmeding> useful!
[16:33:36] <tomsmeding> :t ap (.)
[16:33:37] <lambdabot> ((b -> c) -> a -> b) -> (b -> c) -> a -> c
[16:34:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[16:34:16] <int-e> W B (S B) (K I) <-- hmm, that doesn't help as much as I thought it would.
[16:34:23] <tomsmeding> @pl \f s z -> s (f s z)
[16:34:23] <lambdabot> ap (.)
[16:34:27] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (Ping timeout: 250 seconds)
[16:34:49] <maerwald[m]> tomsmeding: there should be a "swear jar" for this. Please pay up ;)
[16:35:57] <tomsmeding> what, because fsz sfsz sounds like a slavic swearword?
[16:36:45] <maerwald[m]> tomsmeding: no, for aggressive obfuscation :p
[16:37:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:37:42] <maerwald[m]> My guess is that's why perl died out. People just went broke 
[16:38:08] *** Joins: abastro (~abab9579@220.75.216.63)
[16:38:10] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[16:38:10] <int-e> :t const id
[16:38:11] <lambdabot> b -> a -> a
[16:38:35] <tomsmeding> :t flip const
[16:38:36] <lambdabot> b -> c -> c
[16:38:49] <int-e> :t ap (.) :: ((a -> a) -> a -> a) -> (a -> a) -> a -> a
[16:38:49] <lambdabot> ((a -> a) -> a -> a) -> (a -> a) -> a -> a
[16:38:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:39:31] <int-e> > let zero' = const id; succ' = ap (.) in map (\n -> n succ 0) (iterate succ zero)
[16:39:32] <lambdabot>  error:
[16:39:32] <lambdabot>      • Variable not in scope: zero :: (a0 -> a0) -> t0 -> b
[16:39:32] <lambdabot>      • Perhaps you meant one of these:
[16:39:39] <int-e> > let zero' = const id; succ' = ap (.) in map (\n -> n succ 0) (iterate succ' zero')
[16:39:40] <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
[16:40:04] <maerwald[m]> See what you did...
[16:40:27] <int-e> it's a Church thing
[16:40:55] <geekosaur> did that middle succ want to be succ' ?
[16:41:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:41:27] <tomsmeding> > map (flip uncurry (succ, 0)) (iterate (ap (.)) (const id))
[16:41:28] <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
[16:41:47] <int-e> geekosaur: no, \n -> n succ 0 evaluates a Church numeral to a number
[16:41:49] *** Quits: tabemann (~travisb@2600:1700:7990:24e0:3f89:422:8b05:c533) (Remote host closed the connection)
[16:41:55] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94699c2b11d21dc0a3.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:42:08] *** Joins: tabemann (~travisb@2600:1700:7990:24e0:77bc:a0c0:b3f2:8f7c)
[16:43:15] <int-e> I also went off exploring on myself so I missed tomsmeding's explanation (it's the successor function though, not 1)
[16:43:50] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[16:43:53] <tomsmeding> oh hah yes
[16:43:57] <int-e> *on my own
[16:44:12] <tomsmeding> in my defence, if I didn't know that, I wouldn't have succeeded in writing the obfuscated form
[16:44:33] <int-e> tomsmeding: sure. I'm familiar with errors introduced between brain and keyboard :)
[16:48:37] <tomsmeding> > map (flip uncurry (intersperse 'o', "cl")) (iterate (ap (.)) (const id))
[16:48:39] <lambdabot>  ["cl","col","coool","coooooool","coooooooooooooool","coooooooooooooooooooooo...
[16:51:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:53:25] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:56:03] *** Quits: ph88 (~ph88@213.23.78.154) (Quit: Leaving)
[17:01:07] *** Joins: fef (~thedawn@user/thedawn)
[17:04:31] *** Quits: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com) (Ping timeout: 260 seconds)
[17:09:22] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:13:06] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[17:13:20] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:14:13] *** Quits: ccntrq (~Thunderbi@2a01:c22:88e7:1b00:3fae:5eb6:677d:a5b) (Remote host closed the connection)
[17:14:31] *** Joins: ccntrq (~Thunderbi@2a01:c22:88e7:1b00:3fae:5eb6:677d:a5b)
[17:18:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[17:19:38] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[17:21:15] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:23:00] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:23:10] *** Joins: mncheck (~mncheck@193.224.205.254)
[17:29:23] *** Joins: acidjnk (~acidjnk@p200300d0c7049f9465be138fb2fd31f4.dip0.t-ipconnect.de)
[17:33:23] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[17:36:50] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[17:37:35] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[17:38:08] *** Quits: Andrew (Andrew@user/AndrewYu) (Quit: Leaving)
[17:38:39] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[17:39:28] *** Joins: Andrew (~andrew@user/AndrewYu)
[17:40:28] <albet70> what's Nat?
[17:41:02] <albet70> also Void and Const type
[17:41:40] <geekosaur> Nat is type level natural (that is, non-negative) numbers
[17:41:54] <geekosaur> Void is the empty type (has no values)
[17:41:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:42:27] <geekosaur> Const is const lifted to type level: the type of (Const Foo Bar) is Bar
[17:43:34] *** Joins: xkuru (~xkuru@user/xkuru)
[17:45:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:46:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:47:05] <albet70> no value has Void type, what's its purpose
[17:47:30] <tdammers> the purpose of Void is to indicate that no value of that type can ever exist
[17:47:42] <albet70> Const A B is B, is redundant?
[17:47:58] <tdammers> for example, [Void] implies that it has to be an empty list, because there are no values that you could put into such a list
[17:48:12] <tdammers> well, or a list that remains thunked forever
[17:48:47] <maerwald> that's a tough fate
[17:49:00] <tdammers> poor lits
[17:49:02] <tdammers> list*
[17:49:05] *** Quits: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net) (Remote host closed the connection)
[17:50:03] *** Quits: wardrunal (~goose@167.179.114.36) (Quit: Leaving)
[17:50:50] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 272 seconds)
[17:52:51] <albet70> and Constant type?
[17:54:12] <tdammers> basically "glue" - just like value-level const allows you to ignore an argument, and thus use a function b -> c in a context where a -> b -> c is demanded, Const allows you to ignore a type argument, and use a type of kind * -> * where one of kind * -> * -> * is demanded.
[17:56:40] <abastro> Const is useful for composition and phantom tricks, iirc
[17:57:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[17:59:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:00:19] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Remote host closed the connection)
[18:01:19] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:01:41] *** Quits: odnes (~odnes@5-203-245-187.pat.nym.cosmote.net) (Quit: Leaving)
[18:02:02] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:02:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[18:04:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:07:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[18:09:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:10:03] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:10:17] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:11:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:11:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:11:21] *** Joins: wroathe (~wroathe@user/wroathe)
[18:11:55] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[18:12:22] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[18:13:22] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:17:23] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 250 seconds)
[18:20:32] *** Joins: Pickchea (~private@user/pickchea)
[18:21:21] *** Quits: Hash (~Hash@hey.howstoned.ru) (Quit: ZNC - https://znc.in)
[18:23:28] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 260 seconds)
[18:23:51] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[18:25:10] *** Joins: Hash (~Hash@hey.howstoned.ru)
[18:25:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[18:25:39] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[18:26:11] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[18:26:25] *** Joins: APic (apic@apic.name)
[18:26:42] <napping> If you are using a GADT to define a subset type, like a (Term hasVars) with a constructor Var :: .. -> Term Open and everything else returns a Term hasVars so you know a Term Closed has no Var, is there a way to weaken Term Closed to Term Open without traversing the data, besides unsafeCoerce?
[18:26:53] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:27:40] *** Quits: codedmart (~codedmart@li335-49.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:28:13] *** Quits: acidjnk (~acidjnk@p200300d0c7049f9465be138fb2fd31f4.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:28:31] <merijn> :t absurd
[18:28:32] <lambdabot> Void -> a
[18:28:39] <merijn> Some form of fmap + absurd?
[18:29:28] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[18:30:10] *** Joins: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[18:30:25] <napping> But fmap walks the term, no?
[18:30:28] <int-e> Probably not, because Haskell's type system doesn't track variance of type arguments, so the compiler can't be convinced that coercing is safe.
[18:32:49] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[18:35:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:35:35] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[18:35:49] <int-e> For this GADT you can easily break it by adding an extra constructor (producing a Term Closed), again something that isn't tracked in the type system.
[18:42:54] *** Joins: cosimone` (~user@93-47-230-184.ip115.fastwebnet.it)
[18:44:38] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3685:42fa:d9de:143d) (Quit: WeeChat 2.8)
[18:44:51] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[18:45:28] <napping> I guess I'll just have to check how much it gets in the way of optimizations
[18:47:26] *** Joins: Akiva (~Akiva@user/Akiva)
[18:47:57] *** Quits: Hash (~Hash@hey.howstoned.ru) (Quit: ZNC - https://znc.in)
[18:48:37] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[18:50:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:51:42] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:51:50] *** Joins: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com)
[18:53:19] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:59:58] *** Joins: tiferrei2000 (~tiferrei@user/tiferrei)
[19:00:55] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[19:01:58] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[19:03:42] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:06:26] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:06:27] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[19:06:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[19:13:18] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:13:47] *** Quits: Hash (~Hash@hey.howstoned.ru) (Ping timeout: 260 seconds)
[19:15:03] *** Joins: zebrag (~chris@user/zebrag)
[19:17:35] <kuribas> albet70: Void is used for example by the generics-eot library.  Since it corresponds to zero, it is the identity element of sum types (Either).
[19:17:50] *** Quits: cosimone` (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 246 seconds)
[19:17:59] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:18:48] *** Quits: lyxia (~lyxia@poisson.chat) (Quit: WeeChat 3.3)
[19:19:05] <kuribas> albet70: x + 0 = x   "Either x Void" is isomorphic to x"
[19:19:52] *** Quits: APic (apic@apic.name) (Remote host closed the connection)
[19:21:30] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[19:21:38] *** Quits: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:21:38] <kuribas> likewise, unit () is the identity element of product types, since (x, ()) ~= x
[19:21:49] <kuribas> unit corresponds to 1, 1 * x = x
[19:21:59] *** Joins: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[19:24:59] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[19:26:41] *** Quits: ccntrq (~Thunderbi@2a01:c22:88e7:1b00:3fae:5eb6:677d:a5b) (Remote host closed the connection)
[19:26:46] *** Quits: Andrew (~andrew@user/AndrewYu) (Quit: identd is broken)
[19:27:36] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[19:27:38] *** Joins: Andrew (Andrew@user/AndrewYu)
[19:30:18] *** Joins: acidjnk (~acidjnk@p200300d0c7049f9465be138fb2fd31f4.dip0.t-ipconnect.de)
[19:30:40] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:30:45] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:31:34] *** Joins: cfricke (~cfricke@user/cfricke)
[19:32:53] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[19:33:04] *** Quits: Hash (~Hash@hey.howstoned.ru) (Max SendQ exceeded)
[19:33:40] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[19:34:29] <kuribas> albet70: so you can think of sum types as a (type level) fold over a list of types, using Either and Void.
[19:34:42] <kuribas> albet70: and product types over (,) and ()
[19:34:54] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:35:08] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:35:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[19:35:57] *** Joins: lyxia (~lyxia@poisson.chat)
[19:36:31] <kuribas> albet70: for example, in idris:
[19:36:37] <kuribas> (foldr Either Void (the (List Type) [Int, String])) => Either Int (Either String Void)
[19:37:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:37:06] <kuribas> (foldr (,) () (the (List Type) [Int, String])) => (Int, (String, ()))
[19:37:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:38:33] *** Quits: Hash (~Hash@hey.howstoned.ru) (Max SendQ exceeded)
[19:39:54] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[19:40:18] <abastro> Utilizing haskell to memorize manifold analysis: https://paste.tomsmeding.com/NtB6x6VI
[19:40:38] <abastro> (Wait, does this ping tomsmed)
[19:41:17] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:42:28] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[19:42:35] <geekosaur> his client does regex matching, so I wrote him a custom matching regex that ignores paste urls
[19:42:48] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[19:43:12] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[19:44:22] *** Quits: Hash (~Hash@hey.howstoned.ru) (Max SendQ exceeded)
[19:46:28] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:47:29] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[19:49:09] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:49:26] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:50:34] <abastro> Oh, that's relieving
[19:50:51] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[19:51:03] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[19:52:20] <geekosaur> (and will ignore play when that comes online)
[19:53:12] *** Quits: Hash (~Hash@hey.howstoned.ru) (Max SendQ exceeded)
[19:54:31] *** Joins: Hash (~Hash@hey.howstoned.ru)
[19:54:36] *** Joins: alp (~alp@user/alp)
[19:56:14] *** Quits: abastro (~abab9579@220.75.216.63) (Ping timeout: 272 seconds)
[19:58:38] *** Quits: Hash (~Hash@hey.howstoned.ru) (Remote host closed the connection)
[19:59:04] *** Joins: fizbin_ (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[19:59:42] *** Joins: Hash (~Hash@hey.howstoned.ru)
[20:00:50] *** Joins: APic (apic@apic.name)
[20:01:03] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:01:23] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.22) (Ping timeout: 260 seconds)
[20:02:13] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 240 seconds)
[20:02:38] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 246 seconds)
[20:05:10] *** Quits: Hash (~Hash@hey.howstoned.ru) (Max SendQ exceeded)
[20:05:44] *** Joins: Hash (~Hash@hey.howstoned.ru)
[20:07:38] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[20:07:51] *** Quits: dispater (~dispater@user/brprice) (Quit: ZNC 1.8.2 - https://znc.in)
[20:07:51] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.2 - https://znc.in)
[20:10:59] *** Quits: Hash (~Hash@hey.howstoned.ru) (Ping timeout: 252 seconds)
[20:11:26] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Ping timeout: 272 seconds)
[20:12:32] *** Quits: acidjnk (~acidjnk@p200300d0c7049f9465be138fb2fd31f4.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:12:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:15:14] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 604 seconds)
[20:15:15] *** Joins: Hash (~Hash@hey.howstoned.ru)
[20:18:03] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:19:39] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[20:20:42] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[20:20:42] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[20:20:42] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[20:22:04] *** Joins: dispater (~dispater@user/brprice)
[20:22:36] *** Joins: orcus (~orcus@user/brprice)
[20:24:15] *** Quits: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com) (Ping timeout: 260 seconds)
[20:24:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:26:36] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[20:27:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:27:50] *** Joins: Vajb (~Vajb@85-76-32-79-nat.elisa-mobile.fi)
[20:27:56] <sm> Hecate: mac
[20:28:37] *** Joins: Pickchea (~private@user/pickchea)
[20:28:38] *** Quits: Vajb (~Vajb@85-76-32-79-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[20:28:41] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:32:03] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:32:44] *** Joins: Guest|66 (~Guest|66@199.27.253.178)
[20:32:51] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:34:05] *** Joins: econo (uid147250@user/econo)
[20:34:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:34:52] *** Quits: fizbin_ (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[20:34:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[20:35:39] *** Joins: mniip (mniip@libera/staff/mniip)
[20:35:58] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:36:35] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:37:23] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[20:38:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:39:15] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:40:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:42:54] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[20:43:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:44:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:50:06] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:52:37] *** Joins: dextaa_ (~dextaa@user/dextaa)
[20:53:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[20:54:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:01:46] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[21:02:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:03:50] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:05:48] *** Joins: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105)
[21:06:11] *** Quits: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105) (Client Quit)
[21:07:01] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 245 seconds)
[21:09:31] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[21:11:00] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[21:11:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[21:13:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:13:34] *** Joins: slack1256 (~slack1256@186.11.56.117)
[21:13:34] *** Joins: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105)
[21:13:55] *** Quits: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105) (Remote host closed the connection)
[21:14:32] *** Joins: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105)
[21:15:52] *** Quits: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105) (Remote host closed the connection)
[21:16:27] *** Joins: arjun (~arjun@user/arjun)
[21:17:24] *** Joins: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105)
[21:17:33] <arjun> hi, can someone tell me whats the deal with the 'forall' stuff goin here -> https://pastebin.com/iNiaTqKt
[21:18:00] <arjun> how does that imply that we cannot do anything with it and just pass it around?
[21:20:57] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:21:39] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:22:22] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 272 seconds)
[21:22:34] <geekosaur> because `x` is under an inner forall, all you can do is something that will work for any type. but the only things that work for any type are passing it around and throwing an exception
[21:23:36] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:24:02] *** Joins: deadmarshal_ (~deadmarsh@95.38.119.22)
[21:24:06] *** Quits: lackboardNB (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105) (Ping timeout: 245 seconds)
[21:25:55] <arjun> :ded:
[21:26:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[21:26:35] <arjun> and removing this inner forall would make a difference? since we have implicit foralls, or are those just for "outer" levels?
[21:26:37] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:27:13] *** Joins: bahamas (~lucian@84.232.140.158)
[21:27:17] <geekosaur> just for outer, yes
[21:27:37] <arjun> also, what kind of a signature is f a -> g a ? :x or am i just too used to seeing a -> b
[21:28:05] <arjun> i mean, what would f here even be ?
[21:28:07] <geekosaur> f might be something like Maybe or []
[21:28:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:28:22] <arjun> a * -> * ? since it's a functor?
[21:28:23] *** Quits: deadmarshal_ (~deadmarsh@95.38.119.22) (Ping timeout: 246 seconds)
[21:28:26] <geekosaur> (and [] Int is the same as [Int])
[21:28:34] <geekosaur> yes
[21:28:36] <arjun> i see
[21:28:40] <arjun> that helped
[21:28:42] <arjun> thanks man
[21:29:26] *** Joins: benin (~benin@183.82.204.110)
[21:29:32] *** Quits: benin (~benin@183.82.204.110) (Client Quit)
[21:29:57] <arjun> so, without the implicit forall a function [a] -> [a] would not see the 'a' on LHS is same as the 'a' on RHS ?
[21:30:18] <geekosaur> no, we know they are the same since they're the type variable
[21:30:35] <geekosaur> the question is whether you (i.e. the function) can know what that type is or not
[21:30:38] *** Joins: BlackboardN (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105)
[21:30:49] *** Quits: BlackboardN (~nathan@2601:602:9e00:365:6c3f:7fdf:c12d:a105) (Changing host)
[21:30:49] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[21:30:52] <arjun> should it even care?
[21:31:06] <geekosaur> in this case, no. that's kinda the point
[21:31:32] <arjun> gotch'a
[21:31:48] <geekosaur> if you knew, you could do something illegal (in this case, changing the structure of the Stream)
[21:31:56] *** Joins: kor1 (~kor1@201.17.127.170)
[21:32:11] <arjun> how trusting
[21:33:06] <arjun> but that's an interesting, could you brief it a little more?
[21:33:41] <geekosaur> well, the whole point of having a strong type system is enforcing rather than trusting :)
[21:34:02] *** Quits: kor1 (~kor1@201.17.127.170) (Client Quit)
[21:34:13] *** Joins: kor1 (~kor1@user/kor1)
[21:34:26] <arjun> like, how does me knowing the type, would allow me to change the structure of the stream?
[21:34:35] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:34:54] <arjun> an [Int] -> [Int] would not change it much 
[21:35:12] <arjun> Maybe Int porbably could because of Nothing
[21:35:19] <geekosaur> if you know the type you can use alternative values. (I admit to being puzzled as to how this changes the *structure* as opposed to the *content*, but I don't know anyting about the Stream type beyond your paste)
[21:35:40] <kuribas> arjun: you know haskell is hiding a forall whenever there is a free type variable?
[21:35:52] <kuribas> geekosaur: could be using type families?
[21:36:09] <geekosaur> context: https://pastebin.com/iNiaTqKt
[21:36:15] <arjun> kuribas, i have a vague idea, yes
[21:36:26] <kuribas> arjun: so, "id :: a -> a" is a bit of a lie, it actually means "id :: forall a. a -> a"
[21:36:26] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[21:36:34] <arjun> sure
[21:36:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:36:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:37:19] *** Joins: kor1 (~kor1@user/kor1)
[21:37:23] <kuribas> arjun: if you take curry/howard, then the forall is just another argument.  But one that takes a type.
[21:38:30] <arjun> i am not familiar with curry/howard but please continue, i'll read up on that later today
[21:38:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:38:40] <kuribas> arjun: each time you call the function with a forall, you are passing a type to it.
[21:38:51] <kuribas> arjun: in haskell, it is done implicitly by the type inference engine.
[21:39:26] <kuribas> with RankN, it means you can use the same function with different types.
[21:39:47] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:39:54] <kuribas> like (forall a.a -> a) -> (Int, String) -> (Int, String)
[21:40:10] *** Joins: benin (~benin@183.82.204.110)
[21:40:16] <kuribas> now, the first function can be called on an Int as well as on a String.
[21:40:27] <arjun> sure, thus the type variable
[21:40:42] <arjun> which probably solidifies when we call it
[21:40:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:40:54] <kuribas> arjun: but if you write (a -> a) -> (Int, String) -> (Int, String), the "a" can be only one thing.
[21:41:37] <arjun> i SEE
[21:41:49] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 240 seconds)
[21:42:06] <arjun> not much of a type-variable then is it?
[21:42:06] <kuribas> With RankN, the called function has the choice to use it with another type.
[21:42:16] <geekosaur> and while it might be Int or String, you don't know the type. with the forall, the caller must pass something that will work with any type (as, without the forall, you would have to be ready to deal with any type. both modified by constraints of course)
[21:42:34] *** Joins: kor1 (~kor1@user/kor1)
[21:42:41] <kuribas> yes
[21:43:18] <kuribas> arjun: yes, still a type variable, but the moment when it is "filled" or "passed", is different.
[21:44:16] <arjun> srry, i think i miss-understood, "but if you write (a -> a) -> (Int, String) -> (Int, String), the "a" can be only one thing"
[21:44:30] <arjun> i thought a could only be 1 type
[21:44:36] <kuribas> arjun: it can always only be one thing.
[21:45:03] <arjun> but i think you were saying, since we have a pair, the function can be one, that works on either type
[21:45:17] <kuribas> type variable always have to be applied somewhere.
[21:45:30] <kuribas> hmm gtg.
[21:45:39] <kuribas> I leave it to the other people here :)
[21:45:52] <arjun> alright, thanks for help, i'll read it back again
[21:46:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:46:52] <geekosaur> so the `a` always has to be one type, the question is who knows that type
[21:47:05] <geekosaur> (I admit I'm starting to skate on thin ice here)
[21:47:18] *** Joins: kor1 (~kor1@user/kor1)
[21:47:20] *** Quits: kuribas (~user@ptr-25vy0i9ukrx95drquaj.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:47:54] <geekosaur> actually I think I'll withdraw too, I'm confusing myself :(
[21:48:05] <arjun> i think i did too : P
[21:48:21] <arjun> thanks for engaging : )
[21:48:23] <geekosaur> I know in practice what's going on, describing it sanely is another question…
[21:48:43] *** Quits: slack1256 (~slack1256@186.11.56.117) (Ping timeout: 256 seconds)
[21:50:30] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:53:16] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 245 seconds)
[21:53:57] *** Quits: mbuf (~Shakthi@122.162.64.255) (Quit: Leaving)
[21:54:20] *** Joins: kor1 (~kor1@user/kor1)
[21:56:07] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:58:13] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:58:21] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[21:58:50] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 246 seconds)
[22:00:07] *** Quits: stewpot (~stewpot@2a02:c7e:34de:4500:c0b2:5560:8807:6081) (Remote host closed the connection)
[22:01:14] *** Quits: Guest|66 (~Guest|66@199.27.253.178) (Quit: Connection closed)
[22:01:57] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:04:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 240 seconds)
[22:11:35] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[22:11:45] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) Eat, drink and be merry...for tomorrow we die)
[22:14:11] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[22:16:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[22:17:04] <maerwald> arjun: hey
[22:17:42] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:18:38] *** Joins: cheater (~Username@user/cheater)
[22:18:54] <arjun> hey maerwald 
[22:19:02] <maerwald> we need someone with css knowledge
[22:19:20] <arjun> *maerwald has 2 wishes left*
[22:19:36] <maerwald> arjun: http://play-haskell.tomsmeding.com:8123/play
[22:19:50] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:19:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:20:12] *** Joins: coot (~coot@213.134.190.95)
[22:20:22] <arjun> that doesn't look too bad
[22:20:49] <arjun> whattya need done with it?
[22:21:50] <maerwald> https://github.com/tomsmeding/pastebin-haskell/blob/play/play.mustache
[22:21:54] <maerwald> I dunno, make it better :D
[22:22:08] <sm> my suggestion was add a ui kit such as tailwindcss
[22:22:28] <maerwald> arjun: can't even resize the sections
[22:22:43] <maerwald> like here https://play.rust-lang.org/
[22:23:30] <arjun> sm depends what you want to do with it tbh
[22:23:50] <sm> maerwald just said, he wants to "make it pretty"
[22:23:51] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 606 seconds)
[22:24:01] <sm> pretty/consistent/more usable
[22:24:17] *** Joins: mniip (mniip@libera/staff/mniip)
[22:24:18] <arjun> maerwald, i'll look into it. i don't suppose we'd have a design or anything at hand?
[22:24:32] <arjun> you don't need it urgent right?
[22:24:40] <maerwald> no, just people who design html pages as if it was the 80s
[22:26:07] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[22:26:36] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[22:30:46] *** Joins: lagash (lagash@lagash.shelltalk.net)
[22:35:54] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:36:01] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:36:58] *** Joins: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:4091:e9b1:bc9f:dc79)
[22:39:12] <segfaultfizzbuzz> so this might be a lame question: in consideration of laziness versus strictness and performance, laziness presents an advantage when the computation begins thinking that computing something is necessary and then later discovers that it is not. isn't this fairly equivalent to the underlying algorithm simply being bad?
[22:39:16] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:39:40] <geekosaur> just being different
[22:39:42] <segfaultfizzbuzz> if more than say 50% of computations or more than 90% or some other sensible threshold are cancelled
[22:40:15] <geekosaur> often the most natural description of a computation is wasteful if taken strictly
[22:40:19] *** Joins: califax (~califax@user/califx)
[22:40:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[22:40:41] <segfaultfizzbuzz> geekosaur: is there a good specific example of this?
[22:41:04] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:41:54] <geekosaur> mm, mostof the ones I know off the topof my head are frippery like fibonacci
[22:42:27] <maerwald> segfaultfizzbuzz: if you're just looking at one record of a product types and the others you don't look at are expensive to compute
[22:42:51] <geekosaur> but even little things like using zip (or zipWith) against [0..] are doing something that makes sense in a lazy environment and are obviously suicide in a strict one
[22:42:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[22:43:13] <geekosaur> such as labeling a list with its indices `zip xs [0..]`
[22:43:20] <maerwald> but I don't think that's a particularly useful property
[22:43:25] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 240 seconds)
[22:43:31] <maerwald> I'd argue if you rely on that, you already have bad architecture
[22:43:35] <segfaultfizzbuzz> fibonacci is a computation for kids who don't know math. you can directly compute the nth fibonacci term
[22:43:52] <segfaultfizzbuzz> in O(1) or whatever if you don't care about the arbitrary precision arithmetic part of the computation
[22:43:53] <geekosaur> thzat's what I meant by frippery
[22:44:05] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:44:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:45:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:45:13] <segfaultfizzbuzz> zip isn't really an algorithm or computation worth mentioning
[22:45:23] <maerwald> laziness is more interesting for optimization tricks of the compiler than for the end user
[22:45:33] <geekosaur> notealso that marewald has decided that laziness is evil so he's the wrong one to ask about laziness
[22:46:08] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[22:46:10] <monochrom> Haha but I have decided that eagerness is evil, so... :)
[22:46:15] <monochrom> I mean >:)
[22:47:36] <monochrom> In an eager language I hand-optimize my algorithm under eagerness. In a lazy language I hand-optimize my algorithm under laziness. The two algorithms will have very different structure. And oh I don't code up unnecessary computations either way.
[22:48:11] <monochrom> But what happens is I like the structure of the designed-for-laziness version.
[22:48:40] <monochrom> It tends to be higher level, for example.
[22:49:18] <segfaultfizzbuzz> monochrom: and a computer will outsmart you eventually at both of your hand optimizations
[22:49:48] <segfaultfizzbuzz> ok. i should probably just shut up and write some code lol
[22:49:54] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[22:50:49] <geekosaur> a computer already has outsmarted monochrom :)
[22:51:02] <monochrom> And looking at how Python for example goes out of its way to invent yield-generator as a builtin, I don't regret joining the lazy list bandwagon on which the extra invention is unnecessary and the whole thing is user-definable.
[22:51:10] <maerwald> eagerness by default is just more chore at times, laziness is more debugging and "wth is going on" moments
[22:51:20] <geekosaur> [30 23:48:31] <monochrom> hpc: I once compiled in C "int i = 1; while (i > 0) i *= 2;" with gcc -O2.  The generated code was "label: jmp label". That is a perfect realization of your preference. >:)
[22:51:38] <monochrom> :)
[22:52:07] <monochrom> My "hand-optimze" means I don't write a quadratic-time algorithm when there is a linear-time algorithm.
[22:52:23] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 260 seconds)
[22:52:59] <monochrom> I'm talking about the big-Theta not "twice as fast because I replace (`mod` 3) by (* magic_number)".
[22:53:20] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[22:53:29] <Franciman> this manichean separation between laziness and eagerness is so old!
[22:53:37] <Franciman> polarisation gentle people
[22:53:42] <Franciman> polarisation and continuations
[22:53:46] <Franciman> duality
[22:53:59] <Franciman> if your language is too weak to express duality, you end up in manichean distinctions
[22:54:24] <maerwald> in that case, probably only Idris can express duality
[22:54:39] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[22:54:41] <maerwald> in Haskell it's annotations and hoping it actually is lazy or strict
[22:54:51] <segfaultfizzbuzz> hoping haha
[22:55:08] <monochrom> Then computing is stuck in manichean distinctions by definition. Recall that constructive logics have to lose de Morgan duality.
[22:56:09] <Franciman> ehm
[22:56:13] <Franciman> yes
[22:56:21] <Franciman> but why restrict to constructive logics, when you have continuations?
[22:56:34] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[22:56:37] <monochrom> Continuations don't exceed computability.
[22:56:49] <monochrom> Continuations don't solve the halting problem.
[22:56:59] <Franciman> yet allow you to have de morgan duality
[22:57:05] <monochrom> The halting problem itself is also a loss of duality right there.
[22:57:15] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 240 seconds)
[22:57:19] <monochrom> Emulation doesn't count.
[22:57:29] <Franciman> moving target i reckon
[22:57:30] <Franciman> ok
[22:58:16] <segfaultfizzbuzz> whoa that sounds deep, halting problem is loss of duality
[22:58:26] <Franciman> also, what about having a total language with coinductive types?
[22:58:47] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[22:58:48] <Franciman> is it more amenable?
[23:00:05] *** Joins: glguy (x@libera/staff/glguy)
[23:00:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:00:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:00:07] *** Joins: wroathe (~wroathe@user/wroathe)
[23:00:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:00:51] <segfaultfizzbuzz> manichean distinction, coinductive types, lol this went way above my head quickly ;-)
[23:01:10] <Franciman> manichean distinction simply means: it's either black or white
[23:01:13] <Franciman> you're either bad or good
[23:01:26] <Franciman> an all time favourite of the new world
[23:01:40] <Franciman> and of the whole history of humanity really
[23:02:03] <segfaultfizzbuzz> makes reasoning simple, right? ;-)
[23:02:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:02:58] <Franciman> yes sure
[23:03:25] <Franciman> and thinking you can't mix good and evil because python can't
[23:03:30] <Franciman> in a sensible way
[23:07:28] <maerwald> Franciman: I reject that as a principle. Choice implies expressivity. Expressivity is never for free and can introduce complexity. It depends.
[23:07:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:08:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:09:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[23:15:11] *** Quits: chomwitt (~chomwitt@2a02:587:dc0e:a100:8d19:188:687f:a348) (Ping timeout: 256 seconds)
[23:16:18] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[23:16:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[23:20:27] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:21:27] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[23:25:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[23:26:20] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[23:27:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:28:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:32:52] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[23:33:16] *** Joins: alp (~alp@user/alp)
[23:35:00] *** Quits: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:4091:e9b1:bc9f:dc79) (Ping timeout: 240 seconds)
[23:37:01] <monochrom> System F is a total language. Wadler outlines adding existential types to System F, gaining coinductive types. That is still a total language.  https://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt
[23:38:28] *** Joins: vicfred (~vicfred@user/vicfred)
[23:38:38] <monochrom> Technically, I was lying, System F already allows you to encode exists by higher-rank forall. You don't have to add exists, except for convenience (important too).
[23:39:43] <monochrom> Anyway System F is a total language and you can do both inductive and coinductive types in it.
[23:40:39] *** Joins: chomwitt (~chomwitt@ppp-94-67-69-112.home.otenet.gr)
[23:43:09] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[23:46:59] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[23:47:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:c06:c5f:5435:411f) (Ping timeout: 250 seconds)
[23:48:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:48:45] *** Joins: sayola (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de)
[23:50:59] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:f81b:729b:7ef0:993)
[23:52:09] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:52:31] <maerwald> is there a way in generics to deep-match `Rec0 type`, so you can match a specific sub-AST, instead of passing onto the next instance resolution?
[23:53:09] *** Joins: califax (~califax@user/califx)
[23:53:23] *** Joins: kenran (~kenran@200116b82bd9b000bb30ac8fe29496f8.dip.versatel-1u1.de)
[23:54:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:56:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:59:02] <monochrom> I think no, you can only ask for the next instance resolution on `type`.
[23:59:36] <maerwald> so that means I need a dirty utility function in my class to keep track of the context
[23:59:47] *** Joins: Guest19 (~Guest19@ip-86-49-182-248.zrnko.net)
