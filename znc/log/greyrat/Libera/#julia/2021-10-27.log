[00:04:16] <Guest23> Hello, how do i use lists in julia like in python? I'm using DataStrucutres.jl and iterate through the list with 'for i = 1:length(list)', is there a better way?
[00:20:47] <furrymcgee> foreach
[00:21:04] <furrymcgee> map
[00:22:16] <furrymcgee> filter
[00:25:14] <furrymcgee> these functions are better because they convey the intent of the loop
[00:43:36] <mikko> also "for i in eachindex(list)" if you really do want the indices for some reason
[01:04:26] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[01:21:17] <Guest23> mikko that was my first try, but it didnt work with the Mutable Linked List from the DataStructures package
[01:21:59] <mikko> i don't think linked lists usually have indices
[01:25:13] <mikko> yeah you're almost certainly using the wrong datastructure if you're indexing into a linked list, see the implementation: https://github.com/JuliaCollections/DataStructures.jl/blob/master/src/mutable_list.jl#L118
[01:25:24] <Guest23> Yea, i think i should better use the filter function in my case
[02:31:26] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[02:35:30] *** Quits: Guest23 (~Guest23@a89-182-99-154.net-htp.de) (Quit: Client closed)
[02:47:12] *** Joins: phao (~phao@2804:d45:8e7a:de00:747d:158d:3c76:9f7c)
[02:52:10] *** Quits: phao (~phao@2804:d45:8e7a:de00:747d:158d:3c76:9f7c) (Quit: Leaving)
[05:48:05] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[12:57:13] *** Quits: kmh (~kmh@2a00:6020:5004:6800:74ab:af57:2aa5:a7aa) (Quit: Leaving)
[13:15:10] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[13:36:57] <jonaskabrink> Hello, I want to get the binary representation of a matrix, so convert a matrix with dims(3,3) to matrix with dims(3,3,8). But I am struggling with converting a Matrix{Vector{Bool}} to a Matrix{Bool} with another dimension for the vector. See this: https://bpa.st/FVIA
[13:48:25] <mikko> jonaskabrink: you could do reshape(collect(Iterators.flatten(mat)), (3,3,8))
[13:49:11] <mikko> there's probably a more efficient way to do it but as long as your matrices are not huge this should be fine
[13:51:57] <jonaskabrink> Ok, thanks.
[14:00:08] <jonaskabrink> mikko, yeah, the matrices are not that large. Btw. does it return a copy? Because converting Matrix{UInt8}(3,3) to Matrix{Bool}(3,3,8) can have the same underlying memory layout, right?
[14:03:13] <mikko> i'm not sure, i think it allocates a new array
[14:03:46] <mikko> note that julia's Matrix{T} is alias for Array{T, 2} (matrices are always 2-dimensional)
[14:10:20] <jonaskabrink> mikko Yeah I forgot that bools are 8-bit so there has to be copying. Good to know, cheers
[14:12:18] <mikko> there's BitArray for efficiently storing booleans if that's what you're after
[14:18:10] <jonaskabrink> All good, I just recently installed Julia and try out things. Very interesting language.
[14:24:57] <jonaskabrink> Uh, although picking a 1-based indexing method seems odd (no pun intended). From a MATLAB replacement point of view understandable.
[14:26:21] <mikko> i like 1-based indexing, i find myself making way fewer off-by-one errors in languages that have it
[14:29:27] <mikko> and, if you really want to, there's OffsetArrays.jl that allows you to specify what range(s) to use for indices
[14:30:33] <mikko> the way julia is designed you should be able to use them (or any other special array type) as a drop-in replacement anywhere that uses AbstractArrays
[14:31:31] <jonaskabrink> I guess it's just being used to zero indexing and seeing it everywhere. Because to be honest, I feel like zero-based indexing is a relict from old "pointer-times".
[14:32:03] <jonaskabrink> Yeah I found OffsetArrays aswell, pretty nifty.
[14:41:21] <mikko> i went back to your original example, this is probably how i would do it https://bpa.st/3ZCA
[14:42:18] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (*.net *.split)
[14:42:18] *** Quits: lamneth (~IceChat9@modemcable124.7-59-74.mc.videotron.ca) (*.net *.split)
[14:42:19] *** Quits: ermo (~ermo@user/ermo) (*.net *.split)
[14:45:30] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[14:45:30] *** Joins: lamneth (~IceChat9@modemcable124.7-59-74.mc.videotron.ca)
[14:45:30] *** Joins: ermo (~ermo@user/ermo)
[15:14:29] *** Joins: kir0ul4 (~kir0ul@89.234.141.147)
[15:18:24] *** Joins: eco_ (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[15:22:27] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: kir0ul (~kir0ul@89.234.141.147) (*.net *.split)
[15:22:28] *** kir0ul4 is now known as kir0ul
[16:00:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:33:14] *** Parts: lamneth (~IceChat9@modemcable124.7-59-74.mc.videotron.ca) ()
[19:33:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:47:13] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:28:19] *** Joins: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05)
[22:33:05] *** Quits: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05) (Client Quit)
[22:46:42] *** Joins: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05)
[23:12:16] *** Joins: jarbus (~jarbus@68.235.43.93)
[23:13:08] *** Quits: jarbus (~jarbus@68.235.43.93) (Client Quit)
[23:52:09] *** Quits: kmh (~kmh@2a00:6020:5004:6800:94b4:4b15:429c:7c05) (Remote host closed the connection)
