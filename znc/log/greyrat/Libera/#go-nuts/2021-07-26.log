[00:02:07] *** Quits: andlabs (~andlabs@2607:fb90:2ed1:d208:c8f6:fb83:df91:6344) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:03:23] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[00:04:06] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[00:04:22] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[00:04:33] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Client Quit)
[00:11:00] *** Quits: hikhvar79607380 (~thelounge@dynamic-046-114-001-243.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[00:11:30] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[00:16:34] *** Quits: mrus (~mrus@149.28.61.155) (Ping timeout: 240 seconds)
[00:18:07] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[00:21:31] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:27:01] *** Joins: andlabs (~andlabs@2607:fb90:2ed9:b6e6:51d4:3196:5d12:95bd)
[00:32:41] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[00:37:04] *** Quits: revolve (~u0_a227@82-132-214-66.dab.02.net) (Ping timeout: 258 seconds)
[00:37:11] *** Joins: revolve (~u0_a227@82-132-214-66.dab.02.net)
[00:43:06] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[00:44:08] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[00:44:32] *** Quits: eagleflo (~aku@eagleflow.fi) (Remote host closed the connection)
[00:46:25] *** Quits: andlabs (~andlabs@2607:fb90:2ed9:b6e6:51d4:3196:5d12:95bd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:50:00] *** Joins: Kyros (~kyros@user/kyros)
[00:50:24] <foobaz> can anyone recommend a local nosql database that is in between bolt and sqlite in terms of feature set?
[00:51:27] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[00:51:42] *** Joins: independent56 (~independe@2.25.26.77)
[00:54:35] <b0nn> isn't sqlite a SQL db
[00:55:03] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[00:56:10] <independent56> SQLite is a relational database management system contained in a C library. In contrast to many other database management systems, SQLite is not a client–server database engine. Rather, it is embedded into the end program. SQLite generally follows PostgreSQL syntax.
[00:56:20] <independent56> (from a quick ddg search)
[00:56:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[00:57:13] <independent56> https://www.geeksforgeeks.org/differences-between-sql-and-sqlite/
[00:58:16] <b0nn> yeah... so the thing is when people say "NoSQL" they are generally referring to datastores that aren't "relational"
[00:58:43] <b0nn> Whereas Postgres, MySQL, MSSQL, etc are SQL/relational DBs
[00:59:23] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[01:01:02] <independent56> https://www.javatpoint.com/json-example How would i parse example 1? it has repetitive data, and i dont knwo hwo to parse it using my current implementation --> https://gitlab.com/56independent/allcode/-/blob/master/languages/go/New/Playground/JSON/json.go
[01:01:44] <foobaz> yes, sqlite is a relational sql db, which is why i am interested in something less featureful
[01:02:19] <b0nn> foobaz: so the reason I am confused is that sql and no sql are very different beasts with different usecases
[01:02:54] <ikke> so they need to be a bit more specific in what they need
[01:03:16] <b0nn> Wikipedia classifies nosql into 4 categories, Wide-column, Document, Key-value, and Graph
[01:03:23] <b0nn> ikke: yeah
[01:03:42] <foobaz> it is common to use sqlite for non-relational data, or as a key-value store, because it handles those use cases fine
[01:03:49] <ikke> indeed
[01:04:11] <foobaz> is there something i can use as a non-relational key-value store that has more features than bolt, but fewer features than sqlite?
[01:04:28] <b0nn> foobaz: what are you trying to do
[01:04:51] <b0nn> you can use SQL for NoSQL tasks and vice versa, but you're hobbling yourself
[01:06:01] <ikke> bolt is just key/value
[01:06:15] <b0nn> B Trees (SQL DBs) have better search features than hash maps (Key value NoSQL DBs)
[01:06:38] <ikke> https://blog.gopheracademy.com/advent-2018/disk-datastores/
[01:06:51] <foobaz> how about a key value store where a table can have multiple indexes? i.e. a value can have multiple keys, where each key is in a different index
[01:07:11] <b0nn> hrm my search features statement needs a hang of a lot of qualifications and caveats :\
[01:08:19] <b0nn> an index is a key value store, it's another table
[01:08:47] <ikke> https://github.com/gostor/awesome-go-storage
[01:08:55] <foobaz> yes, and sqlite abstracts that away from you, whereas bolt does not
[01:09:12] <b0nn> foobaz: No.
[01:09:32] <b0nn> It's B Tree vs Hash map
[01:10:47] <foobaz> are there on-disk hash maps? i thought it was only an in-memory structure
[01:11:11] <ikke> a key/value store is like a hashmap
[01:11:12] <foobaz> surely sql indexes are not solely in memory
[01:11:22] <foobaz> isn't bolt a b tree though?
[01:11:35] <b0nn> No.
[01:13:05] <ikke> did you check that awesome-go-storage listA
[01:13:13] <ikke> It seems to have quite some alternatives
[01:13:19] <foobaz> "Bolt was originally a port of LMDB so it is architecturally similar. Both use a B+tree"
[01:13:31] <b0nn>  /ignore
[01:13:37] <b0nn> I've had enough of that
[01:13:42] <foobaz> https://github.com/boltdb/bolt
[01:14:20] <ikke> I think b-trees are optimal for disk storage
[01:14:34] *** Quits: muirrum (muirrum@sourcehut/user/muirrum) (Remote host closed the connection)
[01:15:02] <b0nn> it's the arrangement of the nodes, such that instead of one value per node there are a page worth
[01:15:17] <ikke> right
[01:15:19] <b0nn> that way a single disk retrieval pulls several nodes instead of one
[01:15:28] <b0nn> er several values
[01:15:37] <b0nn> you can do the same thing in B Heaps
[01:15:46] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[01:15:56] <foobaz> ikke: yea i'm reading awesome-go-storage, thank you
[01:16:43] <b0nn> When you pull a page worth of nodes off the disk, instead of a tree search you do a binary search of that.. array.. which has the same big O cost
[01:17:04] <b0nn> er values not nodes - it's always a mess describing what's in each node
[01:17:12] <ikke> :)
[01:18:00] <b0nn> The other cool feature of a B Tree/heap is your depth isn't log2 n, it's (in the case of postgres) log100 n
[01:18:12] <b0nn> or log50 n
[01:18:36] <ikke> so wide, not deep?
[01:18:47] <b0nn> Yeah
[01:19:29] <ikke> I guess that might also help with cpu caching?
[01:19:56] *** Joins: andlabs (~andlabs@2607:fb90:f80d:701e:89d2:482f:db6d:e68)
[01:20:20] <b0nn> I don't know, I /think/ that a CPU cache isn't a page wide (but it might be)
[01:20:42] <ikke> L1 is most likely not large enough for a page
[01:20:51] <b0nn> well, I gues you break the page up when you present it to the cpu, so there is that cache advantage
[01:22:29] <foobaz> surely not, consider the existence of huge pages
[01:22:56] *** Joins: muirrum (muirrum@2600:3c03::f03c:92ff:fe64:125)
[01:22:57] *** Quits: muirrum (muirrum@2600:3c03::f03c:92ff:fe64:125) (Changing host)
[01:22:57] *** Joins: muirrum (muirrum@sourcehut/user/muirrum)
[01:23:18] <ikke> You basically want consequtive items, not randomly walking through memory
[01:23:28] <b0nn> I learnt about Erasure Code in the weekend too https://en.wikipedia.org/wiki/Erasure_code
[01:23:38] *** Joins: tofran (~tofran@37.189.158.134)
[01:23:59] <b0nn> Which is what RAID is - but the clouds use it to ensure distributed caches data is safe
[01:25:43] <ikke> raid, losing a raid members is basically losing n amount of bits
[01:25:52] <ikke> s/raid,/right,/
[01:26:11] <b0nn> yeah, but they can be recovered - via math
[01:26:29] <ikke> nod
[01:26:39] <ikke> otherwise it would not make a lot of sense to use raid
[01:26:47] <b0nn> :)
[01:26:55] <b0nn> raid 0 :)
[01:26:59] <ikke> yup
[01:29:13] <b0nn> I'm trying to learn formal methods at the moment, I watched a YT video last night that was boring as hell (it was on Boolean logic though which most people have a clear view of in their heads)
[01:29:30] <b0nn> But I'm wondering if anyone here has a good grip on Formal methods
[01:29:39] *** Quits: meinside_ (uid24933@id-24933.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[01:29:43] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[01:29:48] <ikke> nope
[01:30:06] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:36:27] *** Quits: independent56 (~independe@2.25.26.77) (Ping timeout: 265 seconds)
[01:43:26] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[01:46:32] *** Quits: Kane_ (~Kane@2a01:e34:ee89:5d90:cdea:5b81:f953:8f32) (Quit: Leaving)
[01:48:07] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:49:14] *** Quits: andlabs (~andlabs@2607:fb90:f80d:701e:89d2:482f:db6d:e68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:50:00] <oliv3> i'm trying to update a slice in parallel, but i must be missing something: https://paste.debian.net/1205582/
[01:51:07] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 250 seconds)
[01:51:10] <oliv3> (or do i have to do updates using a mutex ?)
[01:51:58] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[01:52:04] <ikke> yes
[01:52:40] <oliv3> hmmm
[01:52:44] <fizzie> You would need to do the same thing to c as you do to i, notwithstanding that question.
[01:53:13] <lemmi> yes, it's always the same c
[01:53:37] <oliv3> sure
[01:53:39] <lemmi> and no, no mutex needed in to update slices in parallel
[01:53:47] <lemmi> as long as the ranges don't overlap
[01:53:54] <oliv3> i was wondering because i populate the slice the same way: https://paste.debian.net/1205583/
[01:53:54] <ikke> oliv3: imagine if one thread reads the value, another one reads it, and updates, and then the first thread updates it
[01:54:19] <oliv3> well only one goroutine is supposed to update a particular index
[01:54:25] <foobaz> oliv3: your code looks good to me, but if you want to be sure, use go's "race detector", a tool for finding these kinds of bugs
[01:54:42] <oliv3> oh yeah, forgot to run with -race
[01:54:58] <fizzie> oliv3: It's not the "same way": you're only using the index, which you pass in as an argument to the goroutine.
[01:55:27] <oliv3> indeed i have a data race warning
[01:56:16] <b0nn> the fun thing is .. you'll be locking the slice struct not the slice data
[01:57:02] <oliv3> fizzie: i pass the index as argument in both cases ?
[01:57:04] <b0nn> that is, if you have another slice point to the same backing array - then the mutex on slice A will not prevent access via slice b
[01:57:29] <b0nn> not that mutexes are anything but optional for your users :\
[01:57:40] <foobaz> what about the variable "c" in evaluate()? that gets captured and passed to the anonymous goroutine
[01:58:03] <foobaz> i don't think it's a bug, but it might be faster to look it up by idx in the goroutine
[01:58:13] <fizzie> oliv3: Yes, but you also use `c` directly in the other one.
[01:58:41] <oliv3> i tried passing both i and c once, didn't work better, let me try again
[01:59:08] <fizzie> You can also omit `c` completely and access it via the index.
[01:59:17] <foobaz> can you paste the race warning?
[02:02:36] <oliv3> HA
[02:02:40] <oliv3> now it's working
[02:04:05] <oliv3> https://paste.debian.net/1205584/
[02:04:08] <foobaz> \o/
[02:04:15] <oliv3> and without race warning
[02:04:19] <oliv3> thx guys
[02:04:36] <foobaz> i don't understand why that fixed it but great
[02:06:01] <fizzie> The same value ending up in each array index was pretty conclusive evidence for that being the problem.
[02:06:26] <foobaz> but c was copied by value into the goroutine, what was racy?
[02:07:05] <fizzie> It's not copied by value.
[02:07:28] <fizzie> "Function literals are closures: they may refer to variables defined in a surrounding function. Those variables are then shared between the surrounding function and the function literal, and they survive as long as they are accessible."
[02:07:51] *** Joins: independent56 (~independe@2.25.26.77)
[02:07:51] <foobaz> aha fascinating
[02:08:16] <fizzie> Declaring a new variable in the loop body would also have been an option.
[02:08:28] <fizzie> (As is the argument-passing trick being done for `i`.)
[02:08:57] * b0nn prefers the explicit arg pass instead of a i := i line
[02:09:52] <fizzie> I maybe kind of do as well, but it does have the drawback of having the name of the variable pretty far away from the value it gets, at least if the function literal gets longer. (But maybe it just shouldn't get longer.)
[02:10:19] <b0nn> shadowing and closures are my bugbears at the moment
[02:10:26] <foobaz> could always use a full function instead of a lambda
[02:10:52] <b0nn> I mean i := i is horrible, but i_inner := i is also be more explicit to the reader
[02:11:34] <b0nn> s/be//
[02:11:44] <b0nn> s/_i/I
[02:16:27] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:17:06] <independent56> https://www.javatpoint.com/json-example How would i parse example 1? it has repetitive data, and i dont knwo hwo to parse it using my current implementation --> https://gitlab.com/56independent/allcode/-/blob/master/languages/go/New/Playground/JSON/json.go
[02:19:33] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[02:20:33] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[02:20:51] *** Joins: independent56 (~independe@2.25.26.77)
[02:22:20] <b0nn> independent56: repetitive data is a slice
[02:22:23] <fizzie> A JSON array can most naturally be unmarshalled into a Go slice. So the example 1 would have a top-level struct that has a `Employees []Person` field.
[02:22:44] <foobaz> independent56: are you having trouble with the lowercase field names like "name" and "email" not working like your uppercase "Name" and "Address" fields?
[02:22:46] <fizzie> Wasn't there some web thing where you can paste in JSON and it spits out the Go type to unmarshal it to?
[02:23:03] <b0nn> ah, mholt has one on his github
[02:23:30] <b0nn> https://mholt.github.io/json-to-go/
[02:23:44] *** Joins: burningserenity_ (~burningse@143.244.34.6)
[02:24:04] <b0nn> also independent56 use play https://play.golang.org/p/6p_FSwEplHa
[02:24:08] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Ping timeout: 252 seconds)
[02:24:10] <fizzie> Yeah, when I copy-pasted though it kept complaining about the whitespace being "unexpected tokens".
[02:25:44] <fizzie> Guess it just doesn't like whitespace. I was thinking that website was using something weird in the example, like non-breaking spaces, which would have been just weird. Sorry for doubting you, sketchy tutorial site.
[02:28:30] <b0nn> I've pasted it to the bottom of this play https://play.golang.org/p/0E3WQQsi9rZ
[02:28:58] <b0nn> It was just hating on whitespace between commas and keys
[02:29:45] <foobaz> independent56: here's a working example https://play.golang.org/p/GWs4ZuhJyZd
[02:31:20] <independent56> foobaz, No trouble with lowercase,thanks for the example.
[02:31:47] <oliv3> i wished i knew https://mholt.github.io/json-to-go/ when i was playing with gofiber and mongodb :) thanks for the link
[02:32:26] <fizzie> The tags are "optional" if you're just unmarshalling, because of a case-insensitive fallback in encoding/json.
[02:32:34] <oliv3> (it lacks the bson info in the tag, or mongodb would lowercase the field name)
[02:32:39] <fizzie> If you wanted to also marshal the data back into JSON with lowercase keys, you'd need them.
[02:33:15] <oliv3> (and i wanted the fields to have the original casing)
[02:34:03] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[02:34:15] <oliv3> anyway, just wanted to say that coming from a C/Erlang background, Go is definitely cool :)
[02:34:25] <independent56> Next question: what does an ampersand do in a function argument? is it a return value?
[02:34:38] <b0nn> it depends
[02:34:57] <b0nn> it could be an 'and' a bitwise operation or an address of a value
[02:35:18] <independent56> hmm
[02:35:27] <foobaz> independent56: passes the variable's address (a pointer) instead of its value
[02:35:29] <b0nn> er, there should be a comma between 'and' and abit wise op
[02:35:46] <foobaz> that allows the called function to modify the caller's copy of the variable
[02:36:24] <foobaz> without the ampersand, the called function would be operating on its own copy, which would no longer exist after the function returns
[02:36:42] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 256 seconds)
[02:37:04] <foobaz> also, it's common to pass pointers even when it's not strictly necessary, when the function doesn't need to modify the caller's value
[02:37:27] <foobaz> this is because most other languages always pass objects as pointers so people like to stick to the behavior they're comfortable with
[02:37:27] <independent56> If i did `function(&variable)`, i would omit the need of `variable := function`? i am confused by fmt.Scanln(&line)
[02:37:55] <foobaz> yes
[02:38:14] <foobaz> you want fmt.Scanln to modify your line variable
[02:38:21] <b0nn> independent56: you wouldn't you would do function (*variable)
[02:38:37] <foobaz> if you pass a pointer, it can, if you pass line itself, Scanln would put the data in its own line variable, not yours
[02:38:41] <independent56> Ah, thanks.
[02:38:45] <b0nn> oh hrm that's a call not a definition
[02:39:30] <foobaz> the & on the caller's side is matched with a * on the function definition side
[02:39:56] <foobaz> if you pass &myString the function must take a variable with type *string (not string)
[02:40:32] <foobaz> http://wiki.c2.com/?ThreeStarProgrammer
[02:42:15] *** Joins: marlinc (~marlinc@user/marlinc)
[02:42:16] <foobaz> ikke: my favorite data store from your gostor link is nutsdb, it's similar to bolt but with some extra features
[02:44:30] *** Joins: nyah (~nyah@90.221.186.180)
[02:51:42] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:fdfa:672b:b3f9:3b7e)
[02:51:57] *** Joins: independent_ (~independe@2.25.26.77)
[02:52:05] *** Quits: independent56 (~independe@2.25.26.77) (Read error: Connection reset by peer)
[02:52:53] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[02:53:18] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[02:53:37] *** Joins: independent_ (~independe@2.25.26.77)
[03:05:56] *** Quits: Vigdis (~danj@ns4.chown.me) (Quit: WeeChat 3.2)
[03:11:01] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:12:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:12:40] *** Quits: burningserenity_ (~burningse@143.244.34.6) (Ping timeout: 272 seconds)
[03:18:01] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[03:21:20] *** Quits: rbn (~rbn@sferic.eu) (Read error: Connection reset by peer)
[03:22:28] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[03:31:26] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:47] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:24] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 258 seconds)
[03:34:46] *** Joins: Vigdis (~danj@ns4.chown.me)
[03:37:01] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[03:38:35] *** Joins: marlinc (~marlinc@user/marlinc)
[03:42:48] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[03:42:56] *** Joins: Snyp (~rksht@49.207.209.92)
[03:43:08] *** Joins: independent_ (~independe@2.25.26.77)
[03:43:56] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[03:43:56] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[03:44:53] *** Quits: menace (~someone@2001:a61:35bf:bb01:d0a0:1adf:3e65:e150) (Ping timeout: 255 seconds)
[03:46:43] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[03:49:18] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[03:49:36] *** Joins: independent_ (~independe@2.25.26.77)
[03:50:42] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 240 seconds)
[03:50:44] *** Joins: kdsch (~kdsch@86.106.121.200)
[03:56:26] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[03:59:50] *** Quits: kdsch (~kdsch@86.106.121.200) (Quit: WeeChat 2.8)
[04:01:55] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Remote host closed the connection)
[04:03:31] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[04:04:54] *** Quits: Snyp (~rksht@49.207.209.92) (Quit: WeeChat 3.2)
[04:06:11] *** Joins: eltonpinto (~eltonpint@169.109.136.34.bc.googleusercontent.com)
[04:13:11] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[04:14:41] *** Quits: independent_ (~independe@2.25.26.77) (Ping timeout: 252 seconds)
[04:18:47] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[04:26:08] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:71e6:9c88:bfa0:1a35)
[04:29:17] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:411e:3e08:6bf4:25e5) (Ping timeout: 250 seconds)
[04:37:54] *** Joins: CoolerX (~CoolerX@user/coolerx)
[04:45:09] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[04:45:53] *** Quits: brooks (~bswinnert@containers.neptunenetworks.org) (Remote host closed the connection)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:01] *** Joins: brooks (~bswinnert@containers.neptunenetworks.org)
[04:47:28] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:35:33] *** Joins: taterbase (~user@136.36.122.106)
[05:47:35] *** Joins: n3tgh0st (~n3t@209-112-185-154-radius.dynamic.acsalaska.net)
[05:50:29] *** Quits: revolve (~u0_a227@82-132-214-66.dab.02.net) (Read error: Connection reset by peer)
[05:52:23] *** Joins: revolve (~u0_a227@82-132-247-94.dab.02.net)
[05:53:04] *** Joins: califax- (~califax@user/califx)
[05:54:14] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:54:15] *** califax- is now known as califax
[06:01:23] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:02:51] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[06:10:01] *** Quits: taterbase (~user@136.36.122.106) (Ping timeout: 265 seconds)
[06:16:21] *** Quits: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[06:21:21] *** Joins: darkapex_ (~darkapex@user/darkapex)
[06:22:17] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[06:25:36] *** Joins: darkapex (~darkapex@user/darkapex)
[06:26:19] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 268 seconds)
[06:28:23] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[06:36:08] *** Joins: frost (~frost@59.71.241.179)
[06:38:35] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:47:04] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[06:50:10] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:71e6:9c88:bfa0:1a35) (Ping timeout: 240 seconds)
[06:57:52] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[06:58:43] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Quit: ZNC 1.8.2 - https://znc.in)
[07:00:08] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[07:03:12] *** Joins: gggp (~gggp@60.10.194.43)
[07:07:12] *** Quits: ska (~ska@user/ska) (Ping timeout: 255 seconds)
[07:08:42] *** Joins: gggp_ (~gggp@111.63.14.119)
[07:11:24] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:19:34] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[07:19:51] *** Joins: ska (~ska@user/ska)
[07:20:02] *** Joins: JPT (~jpt@classified.name)
[07:34:50] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 255 seconds)
[07:36:12] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:46:34] *** Joins: gggp__ (~gggp@60.10.194.43)
[07:49:41] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 255 seconds)
[08:02:21] *** Joins: fef (~thedawn@user/thedawn)
[08:08:04] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[08:08:37] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:14:17] *** Quits: gbmor (ben@gbmor.dev) (Quit: WeeChat 3.1)
[08:16:25] *** Joins: gbmor (ben@gbmor.dev)
[08:20:28] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:22:16] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[08:30:40] <xav> anyone know a way to run a process using sudo, or something similar, without just wrapping the whole command in "/usr/bin/sh sudo mycommand"?
[08:32:18] <rewt> maybe the suid bit
[08:33:45] <xav> that'd work, but in this particular case, I want to have some control over who can run what - so, for this one, one user needs to be able to run the command but with some restricted switches.  Sudo is ideal because it gives me that control, if I suid it then the user can also run some write switches which could be a miserable experience for the sysadmin
[08:34:28] <xav> the challenge I've got is that I want to send a signal to the child process that's kicked off by the `sh`, but then I need to sudo that as well.
[08:34:42] <rewt> combine it with who's got +x access via groups
[08:35:57] <rewt> and if you want really fine-grained control, the process should still be able to see who's actually running it, so you can add logic around that
[08:37:23] *** Joins: Ashen (~Ashen@2601:405:4901:3050::d84e)
[08:37:29] <rewt> or you can break up the functionality into multiple commands for the different functionalities, with different accesses
[08:37:47] <xav> yeah, I see where you're coming from.  I might take that to our security folks and see if they puke on it less than they did with sudo :)
[08:37:53] *** Quits: Ashen (~Ashen@2601:405:4901:3050::d84e) (Client Quit)
[08:38:14] <xav> what I could do is shove a shell script or some such on the system, that calls the command I need to run as root, and suid that along with removing write from all but root
[08:39:15] <rewt> shell script doesn't help anything though; the actual command would need the suid bit, and it would be able to be run without the shell script too
[08:39:23] <xav> that still wouldn't fix my finding the child process pid and sending a signal to it problem either
[08:48:33] *** Joins: gggp_ (~gggp@60.10.194.43)
[08:51:53] *** Quits: gggp__ (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[08:51:56] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:53:17] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[08:54:11] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:57:37] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Client Quit)
[08:59:19] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[09:00:03] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Client Quit)
[09:01:22] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[09:13:34] *** Joins: gggp__ (~gggp@60.10.194.43)
[09:16:42] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[09:17:22] *** Joins: cnf3 (~cnf@d5152daf0.static.telenet.be)
[09:18:05] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Ping timeout: 268 seconds)
[09:18:31] *** cnf3 is now known as cnf
[09:26:29] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:27:35] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[09:31:54] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[09:32:13] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[09:40:25] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[09:40:25] *** Quits: thiccdaddy (~OwO@thiccdaddy.sexy) (*.net *.split)
[09:40:25] *** Quits: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (*.net *.split)
[09:40:25] *** Quits: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net) (*.net *.split)
[09:40:25] *** Quits: tristero (~nobody@user/tristero) (*.net *.split)
[09:40:25] *** Quits: flommi_ (~flommi@puck942.startdedicated.de) (*.net *.split)
[09:40:25] *** Quits: dg (~dgl@dg.wtf) (*.net *.split)
[09:40:25] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (*.net *.split)
[09:40:25] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (*.net *.split)
[09:40:25] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:40:25] *** Quits: fmac (~fmac@luna.fmac.xyz) (*.net *.split)
[09:40:25] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (*.net *.split)
[09:40:25] *** Quits: nameless (~nameless@user/nameless) (*.net *.split)
[09:40:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:40:26] *** Quits: jinn (~jinn@d.jinn.army) (*.net *.split)
[09:40:26] *** Quits: lew (~lew@89.234.183.156) (*.net *.split)
[09:40:26] *** Quits: soxhlet (~soxhlet@81.171.29.137) (*.net *.split)
[09:40:26] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[09:40:26] *** Quits: zanshin (~zanshin@user/zanshin) (*.net *.split)
[09:40:26] *** Quits: Gnuman (~gnuman@user/gnuman) (*.net *.split)
[09:40:26] *** Quits: Dieterbe_ (~Dieterbe@user/dieterbe) (*.net *.split)
[09:40:26] *** Quits: ds (~dshoreman@user/ds) (*.net *.split)
[09:40:26] *** Quits: buz (~buz@damn.serious.im) (*.net *.split)
[09:40:26] *** Quits: Shimmy (~Shimmy@user/shimmy) (*.net *.split)
[09:40:26] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[09:40:26] *** Quits: sayoun (~sayoun@kwiky.fr) (*.net *.split)
[09:40:26] *** Quits: aram (~aram@9front.army) (*.net *.split)
[09:40:26] *** Quits: jimeh (~jimeh@51.15.210.236) (*.net *.split)
[09:40:26] *** Quits: hugotty (~user@51.159.70.14) (*.net *.split)
[09:40:26] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:40:26] *** Quits: huf (~huf@user/huf) (*.net *.split)
[09:40:26] *** Quits: vhost- (~vhost@65.102.48.134) (*.net *.split)
[09:40:28] *** Joins: sayoun_ (~sayoun@kwiky.fr)
[09:40:28] *** Joins: jinn_ (~jinn@d.jinn.army)
[09:40:28] *** Joins: hugotty` (~user@51.159.70.14)
[09:40:30] *** Joins: dgl (~dgl@dg.wtf)
[09:40:30] *** Joins: aram_ (~aram@9front.army)
[09:40:32] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[09:40:33] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[09:40:33] *** Joins: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net)
[09:40:33] *** Joins: Dieterbe (~Dieterbe@user/dieterbe)
[09:40:34] *** Joins: deniska_ (~denis@user/deniska)
[09:40:36] *** Joins: Shimmy0 (~Shimmy@user/shimmy)
[09:40:36] *** Joins: lew (~lew@89.234.183.156)
[09:40:37] *** Joins: vhost- (~vhost@65.102.48.134)
[09:40:37] *** Joins: soxhlet (~soxhlet@81.171.29.137)
[09:40:38] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[09:40:39] *** ChanServ sets mode: +v aram_
[09:40:40] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[09:40:43] *** Joins: Gnuman (~gnuman@c-76-104-144-218.hsd1.wa.comcast.net)
[09:40:44] *** Joins: Jigsy (~Jigsy@88-111-2-172.dynamic.dsl.as9105.com)
[09:40:45] *** Joins: huf (~huf@user/huf)
[09:40:48] *** Quits: Gnuman (~gnuman@c-76-104-144-218.hsd1.wa.comcast.net) (Changing host)
[09:40:48] *** Joins: Gnuman (~gnuman@user/gnuman)
[09:40:50] *** Quits: Jigsy (~Jigsy@88-111-2-172.dynamic.dsl.as9105.com) (Changing host)
[09:40:50] *** Joins: Jigsy (~Jigsy@user/jigsy)
[09:40:53] *** Joins: ds (~dshoreman@user/ds)
[09:40:53] *** Joins: zanshin (~zanshin@ip24-255-217-102.ks.ks.cox.net)
[09:40:53] *** Joins: buz (~buz@damn.serious.im)
[09:40:57] *** Joins: tristero (~nobody@pool-71-112-165-78.pitbpa.fios.verizon.net)
[09:40:57] *** Joins: nameless (~nameless@69.197.131.198)
[09:40:58] *** Quits: zanshin (~zanshin@ip24-255-217-102.ks.ks.cox.net) (Changing host)
[09:40:58] *** Joins: zanshin (~zanshin@user/zanshin)
[09:41:03] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[09:41:05] *** Quits: tristero (~nobody@pool-71-112-165-78.pitbpa.fios.verizon.net) (Signing in (tristero))
[09:41:05] *** Joins: tristero (~nobody@user/tristero)
[09:41:05] *** Quits: nameless (~nameless@69.197.131.198) (Signing in (nameless))
[09:41:05] *** Joins: nameless (~nameless@user/nameless)
[09:41:08] *** Joins: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[09:41:08] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[09:41:09] *** Joins: jimeh (~jimeh@51.15.210.236)
[09:41:10] *** Joins: thiccdaddy (~OwO@thiccdaddy.sexy)
[09:41:29] *** Joins: fmac (~fmac@luna.fmac.xyz)
[09:41:46] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:43:36] *** Joins: gggp_ (~gggp@111.63.14.119)
[09:43:36] *** Quits: sagax (~sagax@213.138.71.146) (*.net *.split)
[09:43:37] *** Quits: keiser0091075852 (~keiser@83.25.202.39.ipv4.supernova.orange.pl) (*.net *.split)
[09:43:37] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (*.net *.split)
[09:43:37] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (*.net *.split)
[09:43:37] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (*.net *.split)
[09:43:37] *** Quits: popey (~popey@ubuntu/member/popey) (*.net *.split)
[09:43:37] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:43:37] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[09:43:37] *** Quits: schaeffer (~schaeffer@user/schaeffer) (*.net *.split)
[09:43:37] *** Quits: j00n (~mario@user/j00n) (*.net *.split)
[09:43:46] *** Joins: keiser0091075852 (~keiser@83.25.202.39.ipv4.supernova.orange.pl)
[09:43:46] *** Joins: Ekho (~Ekho@user/ekho)
[09:43:51] *** Joins: schaeffer (~schaeffer@user/schaeffer)
[09:43:52] *** Joins: haliucinas (~haliucina@5.20.153.21)
[09:43:54] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[09:43:54] *** Joins: popey (~popey@ubuntu/member/popey)
[09:43:57] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[09:44:00] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[09:45:18] *** Quits: gggp_ (~gggp@111.63.14.119) (Remote host closed the connection)
[09:45:45] *** Joins: gggp_ (~gggp@111.63.14.119)
[09:45:57] *** Joins: sagax (~sagax@213.138.71.146)
[09:46:42] *** Quits: LiftLeft (~LiftLeft@191.96.150.157) (Ping timeout: 240 seconds)
[09:47:02] *** Quits: gggp__ (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[09:49:04] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[10:01:33] *** Quits: gggp_ (~gggp@111.63.14.119) (Read error: Connection reset by peer)
[10:01:50] *** Joins: taterbase (~user@136.36.122.106)
[10:01:59] *** Joins: oxum (~oxum@2401:4900:271d:c354:6580:7ee1:1677:a372)
[10:03:32] *** Joins: oxum_ (~oxum@2401:4900:271d:c354:6c5e:4ffc:7543:b1d8)
[10:05:22] *** Joins: gggp (~gggp@111.63.14.119)
[10:05:46] *** deniska_ is now known as deniska
[10:06:28] *** Joins: gggp_ (~gggp@111.63.14.119)
[10:06:34] *** Quits: oxum (~oxum@2401:4900:271d:c354:6580:7ee1:1677:a372) (Ping timeout: 240 seconds)
[10:06:34] *** Quits: taterbase (~user@136.36.122.106) (Ping timeout: 240 seconds)
[10:07:04] *** Quits: oxum_ (~oxum@2401:4900:271d:c354:6c5e:4ffc:7543:b1d8) (Remote host closed the connection)
[10:08:51] <gggp_> Those created runtime symbols by linker  can be recognized by gdb?
[10:10:09] *** Quits: gggp (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[10:11:05] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 252 seconds)
[10:15:45] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:25] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[10:16:44] *** Joins: LiftLeft (~LiftLeft@138.199.10.19)
[10:23:48] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:24:02] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 255 seconds)
[10:24:19] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[10:25:18] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Client Quit)
[10:25:24] *** Joins: taterbase (~user@136.36.122.106)
[10:29:39] *** Quits: aerona (~aerona@2600:6c54:4600:f300:2418:37e9:50f:bf32) (Read error: Connection reset by peer)
[10:36:16] *** Joins: gggp (~gggp@60.10.194.43)
[10:38:19] *** Joins: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[10:38:50] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[10:41:16] *** Quits: d4ve (~d4ve@user/d4ve) (Remote host closed the connection)
[10:42:54] *** Joins: d4ve (~d4ve@user/d4ve)
[10:44:40] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[10:45:11] *** Joins: fef (~thedawn@user/thedawn)
[10:47:55] *** Joins: xsteadfastx (~marv@94.31.101.21)
[10:49:01] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[10:55:05] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Ping timeout: 255 seconds)
[11:00:01] *** Joins: haliucinas (~haliucina@5.20.153.21)
[11:01:47] *** Joins: chripell (~chripell@109.255.230.3)
[11:03:52] *** Quits: LiftLeft (~LiftLeft@138.199.10.19) (Ping timeout: 245 seconds)
[11:04:16] *** Quits: gregf (~gregf@user/gregf) (Remote host closed the connection)
[11:06:30] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 258 seconds)
[11:07:13] *** Joins: j00n (~mario@user/j00n)
[11:08:46] *** Joins: haliucinas (~haliucina@5.20.153.21)
[11:12:49] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[11:14:54] *** Joins: algiss (~algiss@m90-131-47-105.cust.tele2.lt)
[11:15:21] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 276 seconds)
[11:15:39] *** Joins: gregf (~gregf@user/gregf)
[11:18:08] *** aram_ is now known as aram
[11:21:11] *** Quits: algiss (~algiss@m90-131-47-105.cust.tele2.lt) (Quit: algiss)
[11:24:09] *** Joins: shka (~herr@109.231.62.239)
[11:24:14] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:25:17] *** Joins: algiss (~algiss@91.234.200.247)
[11:25:32] *** Quits: taterbase (~user@136.36.122.106) (Ping timeout: 245 seconds)
[11:26:39] *** Quits: algiss (~algiss@91.234.200.247) (Client Quit)
[11:26:54] *** Joins: algiss (~algiss@91.234.200.247)
[11:29:23] *** Joins: mrig (~mrig@user/mrig)
[11:34:23] <blaisebool> hello, dumb question. in a function signature like "func Fprint(w io.Writer, a ...interface{}) (n int, err error)" what means "a ...interface{}" , the a and the 3 dots ...
[11:34:43] <ikke> It's a variadic argument
[11:34:55] <ikke> It takes any number of arguments, and it will be usable as a list in the function
[11:35:42] <ikke> So you can do Fprint(w, 1, 2, 3), and 'a' will be []interface{}{1, 2, 3}
[11:37:35] <blaisebool> oh I got it , ikke !
[11:37:38] <blaisebool> thanks a lot
[11:38:54] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[11:41:57] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:cdea:5b81:f953:8f32)
[11:42:50] *** Joins: gggp_ (~gggp@60.10.23.160)
[11:44:00] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:46:02] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[11:46:25] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[11:47:26] *** Joins: Giedrius (~giedrius@5.133.65.65)
[11:49:48] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[11:50:55] *** Parts: dgl (~dgl@dg.wtf) ()
[11:51:27] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:51:50] *** Joins: gggp__ (~gggp@111.63.14.119)
[11:55:09] *** Quits: gggp_ (~gggp@60.10.23.160) (Ping timeout: 252 seconds)
[11:56:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 256 seconds)
[11:56:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[11:57:03] *** Shimmy0 is now known as Shimmy
[11:59:22] <ikke> Anyone experience with client side API libraries where new versions of the API might have differences?
[12:00:04] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[12:00:31] <ikke> Specifically with how to structure your library around it
[12:01:54] *** Joins: gggp_ (~gggp@111.63.14.119)
[12:03:33] *** Quits: gggp_ (~gggp@111.63.14.119) (Remote host closed the connection)
[12:03:56] *** Joins: gggp_ (~gggp@221.219.75.196)
[12:04:48] <ikke> The upstream API itself is not versioned (apart from an API call that returns the version)
[12:05:09] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[12:08:05] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:10:09] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[12:12:55] <b0nn> I would configure all the clients to send (constant) bug reports :)
[12:13:19] <b0nn> Dear <API Provider> Lern2SemVer plskthx
[12:16:43] <ikke> Sadly that fails all acceptance tests :P
[12:17:08] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:cdea:5b81:f953:8f32) (Quit: Leaving)
[12:17:32] <b0nn> It's putting the onus on the client to check the version before issuing calls
[12:18:26] <b0nn> So I'd have a Get version call that sets something global, that then determines which set of calls may be valid
[12:18:50] <ikke> Right, though in practice we only deal with one version at the time (aport from any transition)
[12:19:36] <b0nn> How is the client distributed?
[12:19:53] <b0nn> Cos you could do a .. check version if old get new client update?
[12:19:57] <ikke> But separate from that, if we would support multiple versions, would you just copy all structs for the new versions but then with the adjustments?
[12:20:29] *** Quits: revolve (~u0_a227@82-132-247-94.dab.02.net) (Read error: Connection reset by peer)
[12:21:02] <b0nn> Hmm I've never given it any thought TBH
[12:22:24] *** Joins: revolve (~u0_a227@82-132-244-24.dab.02.net)
[12:24:25] <ikke> My background is more dynamically typed languages
[12:25:40] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[12:26:06] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:29:26] <b0nn> https://www.reddit.com/r/golang/comments/3g08nu/organizing_packages_for_different_versions_of_a/ maybe?
[12:30:49] <b0nn> hrm, there's not actually much there :\
[12:32:45] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 258 seconds)
[12:33:18] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[12:33:54] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[12:36:55] *** Joins: independent_ (~independe@2.25.26.77)
[12:38:06] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[12:38:25] *** Joins: independent_ (~independe@2.25.26.77)
[12:57:49] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[12:58:53] *** Joins: jinie (~jimmy@188.114.173.37)
[12:58:58] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 240 seconds)
[13:05:35] *** Quits: ddevault (znc@sourcehut/staff/ddevault) (Quit: Why do I even put this quit message in if I never quit)
[13:06:38] *** Quits: gggp_ (~gggp@221.219.75.196) (Read error: Connection reset by peer)
[13:07:10] *** Joins: ddevault (znc@sourcehut/staff/ddevault)
[13:08:05] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[13:08:45] <gggpkm> is there database like mysql written with go
[13:16:32] <sztanpet> https://github.com/genjidb/genji maybe?
[13:17:31] <Cork> gggpkm: you could have a look at cockroachdb
[13:18:02] <Cork> https://github.com/cockroachdb/cockroach
[13:18:32] <Cork> it aims to be driver compatible with postgres not mysql though
[13:23:05] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[13:23:52] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:24:37] *** Joins: meinside_ (uid24933@id-24933.brockwell.irccloud.com)
[13:25:45] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[13:34:48] *** Joins: Atque (~Atque@user/atque)
[13:38:30] *** Joins: sysh (~sysh@212.237.182.120)
[13:40:28] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:cdea:5b81:f953:8f32)
[13:48:16] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[13:48:43] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[13:49:27] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:50:34] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 240 seconds)
[13:56:10] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 240 seconds)
[14:28:24] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 276 seconds)
[14:29:06] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[14:31:37] *** Joins: src (~src@user/src)
[14:31:47] *** Quits: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[14:33:00] *** Joins: fm (~fm@user/fm)
[14:38:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[14:39:53] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[14:43:16] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:48:54] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[14:49:14] *** Joins: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[14:53:51] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[15:11:23] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[15:11:51] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:13:09] *** Quits: revolve (~u0_a227@82-132-244-24.dab.02.net) (Ping timeout: 252 seconds)
[15:14:08] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:14:27] *** Joins: mickey (~user@user/mickey)
[15:17:29] *** Joins: revolve (~u0_a227@82-132-244-24.dab.02.net)
[15:24:34] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[15:24:55] *** Joins: independent_ (~independe@2.25.26.77)
[15:26:29] *** Joins: gggp (~gggp@123.113.184.30)
[15:31:04] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[15:33:06] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[15:33:25] *** Joins: independent_ (~independe@2.25.26.77)
[15:33:51] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[15:40:32] *** Joins: gggp_ (~gggp@60.10.194.43)
[15:41:06] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[15:41:19] *** Joins: gggp__ (~gggp@221.219.75.196)
[15:41:26] *** Joins: independent_ (~independe@2.25.26.77)
[15:44:27] *** Quits: gggp (~gggp@123.113.184.30) (Ping timeout: 276 seconds)
[15:44:36] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[15:44:51] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[15:44:55] *** Joins: independent_ (~independe@2.25.26.77)
[15:54:24] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[15:55:10] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:00:36] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[16:02:32] *** Joins: gggp_ (~gggp@60.10.194.43)
[16:02:55] *** Joins: independent56 (~independe@2.25.26.77)
[16:04:21] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[16:05:48] *** Joins: independent_ (~independe@2.25.26.77)
[16:05:59] *** Quits: gggp__ (~gggp@221.219.75.196) (Ping timeout: 268 seconds)
[16:06:06] *** Quits: independent56 (~independe@2.25.26.77) (Read error: Connection reset by peer)
[16:06:58] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:07:06] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[16:07:25] *** Joins: independent_ (~independe@2.25.26.77)
[16:10:23] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[16:12:03] *** Joins: independent56 (~independe@2.25.26.77)
[16:15:41] *** Joins: yoonkn (~user@175.197.208.79)
[16:16:20] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:18:53] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[16:24:34] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:27:48] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:29:13] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[16:36:25] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[16:37:10] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:41:01] *** Quits: independent56 (~independe@2.25.26.77) (Read error: Connection reset by peer)
[16:41:26] *** Joins: independent56 (~independe@2.25.26.77)
[16:42:58] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[16:43:12] *** gggp_ is now known as gggp
[16:43:16] <gggp> return &DB{lvl: db, quit: make(chan struct{})}, nil
[16:43:28] <gggp> Does this allo memory on heap
[16:44:42] *** Joins: independent56 (~independe@2.25.26.77)
[16:47:53] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 255 seconds)
[16:49:57] *** Joins: jespada (~jespada@90.254.247.46)
[16:50:29] *** Joins: nikos[work] (~ntsipinak@tsipinakis.cern.ch)
[16:50:55] <A_Dragon> as its in a return I THINK that goes on the stack. Im not sure though
[16:51:04] <nikos[work]> Hi, is there an interface to exec a command without forking/replace current program? i.e. classic exec behaviour
[16:51:18] <A_Dragon> syscall.Exec
[16:51:24] <A_Dragon> only on linux
[16:51:31] <A_Dragon> (or UNIX derivatives)
[16:51:57] <A_Dragon> ohwait you want to execute another program without replacing the current one?
[16:52:35] <nikos[work]> A_Dragon: No, that's what I was looking for thanks! :) Didn't find the syscall reference with some googling
[16:52:38] <nikos[work]> Testing now
[16:52:46] <A_Dragon> it does the direct exec syscall
[16:53:06] <A_Dragon> I'd suggest wrapping it in a panic() as if it fails you probably want to take the world with you anyway
[16:53:10] <ikke> Doesn't exec replace the current program?
[16:53:18] <A_Dragon> it does
[16:53:32] <ikke> or is that what nikos[work] needs?
[16:53:39] <A_Dragon> exec is essentially (this is simplified) "take this binary, dump it into my memory, JMP to its entrypoint"
[16:53:43] <ikke> yeah
[16:54:02] <ikke> so spawning new processes in Linux / Unix is fork + exec
[16:54:08] <A_Dragon> usually yeah
[16:54:22] <gggp> A_Dragon, on stack ,which will be dropped
[16:54:40] <gggp> compiler will move it on heap
[16:54:47] <gggp> wrong?
[16:55:33] <A_Dragon> no idea, Ive never dug that deeply but go does both stack and register stuff for calling so returns might go somewhere weird
[16:56:18] <A_Dragon> I use `panic(syscall.Exec(executable, os.Args, []string{})) // This should never fail and if it does we should explode violently` to do a restart of some code ikke, nikos[work]
[16:56:56] <ikke> right, makes sense
[16:57:03] <ikke> if exec returns, something's horribly wrong
[16:57:23] <A_Dragon> its like malloc or fork failing, its possible but you probably have no recourse if it does
[16:57:24] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:57:47] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:58:03] <A_Dragon> also note, nikos[work], that thats instant and wont run defers and such
[16:58:07] <A_Dragon> caveat emptor
[16:59:51] <A_Dragon> oh actually
[17:00:12] <A_Dragon> the code calls runtime_BeforeExec and runtime_AfterExec, whatever those do, investigating
[17:01:55] <A_Dragon> nope no magic in runtime for that, so yes, no defers for you, make sure anything you want to be POSITIVE is cleaned up before you run it
[17:02:07] <A_Dragon> exec can also do things like inherit file descriptors, also be wary for that
[17:03:02] <fizzie> Re `return &Foo{...}`, the value that's being returned is a pointer, so presumably whatever specific conventions govern function return values apply to that, and not to whatever the pointer points at.
[17:04:25] <fizzie> I imagine where the `Foo` itself would get allocated would depend on the usual escape analysis and whatnot, which I'm not familiar in the details of.
[17:05:52] <fizzie> (I mean, it obviously escapes the function in terms of the code, but maybe inlining can change that.)
[17:09:28] *** Joins: arthem (~rehmat@user/arthem)
[17:13:05] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[17:13:23] *** Joins: independent56 (~independe@2.25.26.77)
[17:15:25] *** Quits: arthem (~rehmat@user/arthem) (Quit: Konversation terminated!)
[17:19:39] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[17:20:14] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:24:18] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[17:26:24] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[17:31:50] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:32:22] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (Quit: WeeChat 2.3)
[17:33:35] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[17:33:44] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Remote host closed the connection)
[17:34:23] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:34:31] *** Joins: LiftLeft (~LiftLeft@138.199.13.135)
[17:35:22] <gggp> escape analysis
[17:35:32] <gggp> fizzie, go tool can check that
[17:35:35] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[17:35:47] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[17:35:54] *** Joins: independent56 (~independe@2.25.26.77)
[17:36:07] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[17:38:05] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[17:38:23] *** Joins: independent56 (~independe@2.25.26.77)
[17:40:17] *** Joins: noteness (noteness@user/noteness)
[17:47:09] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 252 seconds)
[17:51:03] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Quit: Leaving)
[17:55:07] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[17:59:05] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[17:59:17] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 245 seconds)
[18:00:03] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:04:08] <A_Dragon> and gopls can show that as a lens if you enable it (at least for vscode)
[18:04:32] *** Joins: gggp_ (~gggp@60.10.194.43)
[18:04:58] *** Joins: chripell_ (~chripell@2620:0:10cb:7:101::1033)
[18:06:23] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[18:07:12] *** Quits: chripell (~chripell@109.255.230.3) (Ping timeout: 245 seconds)
[18:07:37] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 245 seconds)
[18:09:29] *** Joins: chripell__ (~chripell@109.255.230.3)
[18:12:02] *** Quits: chripell_ (~chripell@2620:0:10cb:7:101::1033) (Ping timeout: 255 seconds)
[18:13:37] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:16:18] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[18:16:28] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[18:23:47] *** Joins: andlabs (~andlabs@2607:fb90:f804:588c:5d7:dda7:3e35:5407)
[18:28:01] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[18:28:40] *** Quits: independent56 (~independe@2.25.26.77) (Read error: Connection reset by peer)
[18:30:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 272 seconds)
[18:30:42] *** Quits: andlabs (~andlabs@2607:fb90:f804:588c:5d7:dda7:3e35:5407) (Ping timeout: 240 seconds)
[18:31:09] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[18:31:27] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:31:51] *** Joins: independent56 (~independe@2.25.26.77)
[18:33:24] *** Joins: andlabs (~andlabs@2607:fb90:f804:588c:d995:180f:59a3:ec06)
[18:40:28] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[18:40:48] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[18:47:01] *** Joins: gggp__ (~gggp@111.63.14.119)
[18:47:27] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[18:50:07] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 245 seconds)
[18:50:46] *** Quits: revolve (~u0_a227@82-132-244-24.dab.02.net) (Read error: Connection reset by peer)
[18:51:00] <Tv_> exec returning is a perfectly ordinary error
[18:51:12] <Tv_> e.g. the thing you're trying to run is missing
[18:51:23] <A_Dragon> this is true
[18:51:51] <A_Dragon> though in "my" case above if Im instructed to restart and you killed the binary I'd rather jump off a cliff than continue to run
[18:52:07] <A_Dragon> though dumping a stack at the user is far worse UX than just printing an error and exiting
[18:52:26] <Tv_> yup
[18:53:32] <A_Dragon> but also you delete the binary to the software and tell it to restart and you get to keep the pieces
[18:55:51] *** Joins: arcatech (~arcatech@user/arcatech)
[18:59:31] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:00:29] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:01:31] *** Joins: revolve (~u0_a227@82-132-244-232.dab.02.net)
[19:01:37] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[19:09:52] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:23:19] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 268 seconds)
[19:23:31] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Remote host closed the connection)
[19:23:47] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:24:26] *** Quits: andlabs (~andlabs@2607:fb90:f804:588c:d995:180f:59a3:ec06) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:31:51] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:3551:9550:4c4a:a7b)
[19:32:05] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[19:32:54] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[19:33:29] *** Quits: theoceaniscool (~theoceani@119.12.241.167) (Ping timeout: 255 seconds)
[19:35:36] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 272 seconds)
[19:39:32] *** Joins: taterbase (~user@136.36.122.106)
[19:50:00] *** Joins: gggp_ (~gggp@60.10.23.160)
[19:50:32] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 245 seconds)
[19:52:38] *** gggp_ is now known as gggp
[19:53:12] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[20:03:26] *** Quits: justache (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[20:04:54] *** Joins: justache (~justache@user/justache)
[20:06:09] *** Quits: nikos[work] (~ntsipinak@tsipinakis.cern.ch) (Quit: WeeChat 2.9)
[20:08:06] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:11:17] *** Quits: boingolov (~nastynate@c-71-236-46-219.hsd1.tn.comcast.net) (Ping timeout: 255 seconds)
[20:13:14] *** Quits: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net) (Quit: jld)
[20:14:22] *** Joins: hposca (~hposca@node-1w7jr9phoke2uuevlzoqmsdks.ipv6.telus.net)
[20:14:25] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:16:09] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 276 seconds)
[20:16:47] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:18:43] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[20:18:54] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[20:19:01] *** Joins: independent56 (~independe@2.25.26.77)
[20:19:47] *** Quits: algiss (~algiss@91.234.200.247) (Quit: algiss)
[20:20:43] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[20:21:01] *** Joins: independent56 (~independe@2.25.26.77)
[20:23:21] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[20:32:44] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[20:35:58] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 252 seconds)
[20:45:32] *** Joins: gggp_ (~gggp@60.10.194.43)
[20:48:40] *** Quits: gggp (~gggp@60.10.23.160) (Ping timeout: 256 seconds)
[20:51:28] *** Quits: darkmuggle (darkmuggle@here.for-the.chat) (Changing host)
[20:51:28] *** Joins: darkmuggle (darkmuggle@redhat/darkmuggle)
[20:53:53] *** Joins: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4)
[20:58:09] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Ping timeout: 250 seconds)
[21:01:22] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[21:02:24] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:3551:9550:4c4a:a7b) (Read error: Connection reset by peer)
[21:02:38] *** Joins: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4)
[21:04:23] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:3cd2:344c:f4e0:2efc)
[21:07:32] *** Quits: lightstalker (~BT@user/lightstalker) (Ping timeout: 255 seconds)
[21:07:34] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 258 seconds)
[21:10:25] *** Quits: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[21:11:06] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[21:15:03] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 250 seconds)
[21:16:55] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[21:18:53] <zsnes> hmm sha512 hash is throwing a panic that just says "d.nx != 0" why would this be a panic and not an error that can be handled by the caller then? This is in crypto/sha512
[21:20:20] *** Joins: marlinc (~marlinc@user/marlinc)
[21:21:32] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Ping timeout: 256 seconds)
[21:23:29] <zsnes> https://golang.org/src/crypto/sha512/sha512.go line 313 here is what I'm referring to
[21:23:54] <eric_hill> zsnes: can you reproduce it on https://play.golang.org?
[21:24:00] *** Quits: Thinkofname1 (~thinkthin@37.205.12.211) (Ping timeout: 265 seconds)
[21:24:05] <zsnes> I'm assuming this is some sort of error that is indicative of a system level issue?
[21:24:24] <zsnes> I can't just yet because I haven't seen the input that caused the panic..trying to get that info
[21:24:49] *** Quits: pvalenta (~petr@mail.open-system.cz) (Ping timeout: 258 seconds)
[21:26:01] <eric_hill> just guessing from the code, but maybe someone is calling Reset() then trying to get a sum?
[21:26:03] *** Joins: pvalenta (~petr@mail.open-system.cz)
[21:27:28] *** Joins: Thinkofname1 (~thinkthin@37.205.12.211)
[21:27:30] <zsnes> not calling Reset anywhere, just calling hmac.New(sha512.New, salt) then calling hashfunc.Sum("somebytes")
[21:28:11] <zsnes> could this happen if "somebytes" is empty?
[21:29:33] <Tv_> zsnes: slap that on play.golang.org, it's highly likely your problem is somewhere else and that's a consequence
[21:30:25] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[21:31:18] <Tv_> zsnes: current guess: race
[21:31:50] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:32:34] <zsnes> yeah that makes sense
[21:33:05] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[21:40:43] *** Joins: menace (~someone@2001:a61:34cd:7d01:d5c6:76dc:69dd:af27)
[21:40:45] *** Quits: menace (~someone@2001:a61:34cd:7d01:d5c6:76dc:69dd:af27) (Remote host closed the connection)
[21:41:18] *** Joins: aerona (~aerona@2600:6c54:4600:f300:5d:533e:d781:9302)
[21:42:50] *** Quits: taterbase (~user@136.36.122.106) (Ping timeout: 258 seconds)
[21:43:13] *** Quits: pvalenta (~petr@mail.open-system.cz) (Quit: ZNC - https://znc.in)
[21:43:45] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Remote host closed the connection)
[21:44:32] *** Joins: pvalenta (~petr@mail.open-system.cz)
[21:46:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:46:43] <zsnes> so the hash.Hash is being initialied and then passed to a function via closure, which then runs that function in a separate go routine https://play.golang.org/p/GX8FI2FanZu
[21:47:27] <zsnes> so im thinking yeah thats where the race is happening
[21:47:46] <zsnes> the issue of passing things via closures like in a for loop..i guess
[21:49:38] *** Joins: dalan69 (~dalan@59-102-56-163.tpgi.com.au)
[21:49:42] *** Joins: taterbase (~user@136.36.122.106)
[21:49:57] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[21:49:57] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[21:50:08] *** Quits: sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[21:51:02] <gueorgui> Hi folks, I'm working through the wiki tutorial ongolang.org, and I would like to modify my template rendering to reformat the wiki links into a custom bit of HTML. I made a helper function that returns HTML, but it gets rendered escaped into the template, rather than being interpreted as HTML. This is the code: https://gist.github.com/gueorgui/53f0332be8bd91838d5c99370b719435#file-gowiki-go-L26 I would appreciate any advice :)
[21:51:11] *** Quits: dalan6 (~dalan@61-68-95-57.static.tpgi.com.au) (Ping timeout: 255 seconds)
[21:51:12] *** dalan69 is now known as dalan6
[21:55:51] *** Joins: Torr (~Torr@user/torr)
[21:57:05] *** Quits: taterbase (~user@136.36.122.106) (Ping timeout: 250 seconds)
[21:58:33] *** Joins: taterbase (~user@136.36.122.106)
[21:59:36] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 252 seconds)
[22:00:26] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:03:51] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Quit: awwww)
[22:04:10] *** Joins: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4)
[22:05:27] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Client Quit)
[22:05:43] *** Joins: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4)
[22:09:15] *** Joins: dza (~dza@user/dza)
[22:09:31] <Tv_> zsnes: you're using the same hash.Hash from many goroutines without anything saying that's ok
[22:10:03] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[22:10:54] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:11:23] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:12:08] <Tv_> gueorgui: the template language escapes things, yes, on purpose
[22:12:30] <Tv_> gueorgui: the way you've written it, that would not be safe to allow it; there's no way to differentiate between user input and html
[22:14:00] <gueorgui> Tv_: That makes sense! Ideally I'd like to do something similar to partial templates in, for example, ruby on rails. Pass some variables to a template, and render that template as part of my main template.
[22:14:51] <Tv_> gueorgui: i think the original thing intended the string substitution kludge to happen after the template rendering
[22:14:57] <Tv_> it's an ugly kludge
[22:18:27] <gueorgui> Tv_: Makes sense. Is there some better way I can look at to make partial templates happen, like a library or something? I'm super new to Go so not very sure where in the ecosystem to look for things and so on.
[22:18:56] <Tv_> gueorgui: pretend nobody here has ever heard the words "partial templates" used together
[22:19:06] <Tv_> gueorgui: now, what are you looking for?
[22:19:36] <Tv_> (that is, don't just ask how to program Go as if it was RoR)
[22:19:58] <Tv_> go templates have variables, functions, etc already
[22:23:36] <gueorgui> Tv_: ^^; Ok, makes sense! I have my HTML template, right? For example tmpl/view.html, which renders a Page struct as defined in the gist I posted above -- https://gist.github.com/gueorgui/bd387f342d8d462a48c32db5e530f969. So, on like 13 of that, where I printf the .Body bit of the Page struct, I would like to do two things: 1) Parse the .Body for a specific syntax that defines a link URL/title (for example: "[Go
[22:23:36] <gueorgui> website|https://www.golang.org]") and 2) replace  that syntax with the actual HTML for a link ("<a href...")
[22:24:40] <Tv_> gueorgui: that's not really any different than handing the template different input as .Body; same problem, not knowing whether the html came from your code or the user input
[22:25:16] <Tv_> gueorgui: if you want to allow html in the wiki format, you can do that, and then cram it through a library that attempts to make html safe, and tell the template that the result *is* html
[22:25:36] <Tv_> gueorgui: or, as i expect the tutorial attempted to suggest, do the conversion after the template
[22:25:42] *** Joins: xsteadfastx (~marv@94.31.101.21)
[22:25:58] <Tv_> gueorgui: personally, i'd shove the input through a markdown parser or something
[22:26:06] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[22:26:26] <Tv_> (with its raw html support turned off or made safe)
[22:27:03] <gueorgui> Ahh ok, so: 1) validate user input, 2) save as markdown/whatever, 3) filter through a markdown parser on render
[22:27:14] <Tv_> to really do "wiki input", the answer is going to be more along the lines of parsing the input and having separate "user intput" and "safe html" nodes, that the template sees
[22:27:37] <Tv_> i don't think that wiki example is great for learning this aspect
[22:30:04] <gueorgui> Tv_: Ok, that sounds reasonable to me. Thank you for your help!
[22:39:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[22:47:06] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 256 seconds)
[22:47:33] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[22:48:02] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:50:21] *** Joins: darkapex (~darkapex@user/darkapex)
[22:51:29] *** Joins: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net)
[22:53:48] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:54:08] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[22:54:51] <Tv_> gueorgui: and once you have those "user input" vs "safe html" nodes fed to the template, the answer there is to just make the safe html nodes be of type https://pkg.go.dev/html/template#HTML
[22:54:53] *** Parts: hubble (~hubble@pool-71-120-25-37.washdc.fios.verizon.net) ()
[22:55:30] <Tv_> gueorgui: but don't just shove the original text substitution kludge into that, that'll let your users write arbitrary html
[22:55:34] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Quit: WeeChat 2.8)
[22:56:07] *** Joins: c10l (~c10l@89.34.167.207)
[22:57:01] <Tv_> gueorgui: probably even better to just do the <a href part in the template
[22:57:14] <Tv_> gueorgui: when it's something as simple as wiki format
[22:58:56] <gueorgui> Tv_: Perfect, I was missing this HTML type. Thanks a lot!
[22:59:21] <Tv_> gueorgui: protip: the first several times you use it, you will probably be making an xss vulnerability
[22:59:28] <Tv_> as i said, better to do the <a href in the template
[23:00:16] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 258 seconds)
[23:02:29] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[23:02:36] *** Joins: chasmo77 (~chas77@71.63.241.168)
[23:07:53] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[23:12:42] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:13:45] *** Joins: fef (~thedawn@user/thedawn)
[23:14:06] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:14:41] *** Quits: independent56 (~independe@2.25.26.77) (Ping timeout: 265 seconds)
[23:26:40] *** Joins: independent56 (~independe@2.25.26.77)
[23:32:31] *** Quits: pvalenta (~petr@mail.open-system.cz) (Quit: ZNC - https://znc.in)
[23:33:16] *** Joins: pvalenta (~petr@mail.open-system.cz)
[23:33:21] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[23:33:39] *** Joins: independent56 (~independe@2.25.26.77)
[23:39:29] *** Joins: m33k (dexter@user/m33k)
