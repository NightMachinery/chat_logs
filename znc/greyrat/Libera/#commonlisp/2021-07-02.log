[00:06:10] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[00:09:18] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:09:38] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[00:09:53] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[00:10:44] *** Joins: tfb (~tfb@88.98.95.237)
[00:12:43] *** Joins: etiago (~etiago@user/etiago)
[00:19:42] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[00:20:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[00:25:09] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[00:25:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[00:26:31] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:40:36] *** Joins: Alfr (~Alfr@user/alfr)
[00:55:09] <Posterdati> hi
[01:01:20] <Posterdati> is there anyone using  antik?
[01:05:15] *** Quits: IAmRasputin (~ryan.gann@50-207-73-195-static.hfc.comcastbusiness.net) (Ping timeout: 258 seconds)
[01:05:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:13:25] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:18:23] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[01:24:39] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 256 seconds)
[01:27:01] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:28:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:36:40] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 265 seconds)
[01:41:25] *** Quits: lotuseater (~user@p200300e7870b0900249b68ce60a870ab.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:41:51] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[01:44:29] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 256 seconds)
[01:47:12] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[01:52:38] *** Joins: selwyn (~selwyn@user/selwyn)
[01:53:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:55:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:00:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[02:06:26] *** Quits: pve (~pve@188-67-246-37.bb.dnainternet.fi) (Quit: leaving)
[02:19:32] *** Joins: notzmv (~zmv@user/notzmv)
[02:27:12] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[02:30:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:34:22] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Remote host closed the connection)
[02:34:35] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[02:39:23] *** Joins: cuz (~user@2601:182:cc02:8b0:480:5e00:5c91:f4b2)
[02:42:08] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[02:54:08] *** Quits: frgo (~frgo@p200300deef27d7009ccb6508d64ac6ab.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:54:37] *** Joins: frgo (~frgo@p200300deef27d7009ccb6508d64ac6ab.dip0.t-ipconnect.de)
[02:58:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:59:12] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[03:01:08] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:03:28] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[03:32:58] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:44:22] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:45:11] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[03:49:03] *** Joins: pjb (~pjb@user/pjb)
[03:51:09] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:57:50] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[03:58:29] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:01:37] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:05:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[04:05:56] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[04:07:33] *** Alfr is now known as Guest2130
[04:07:33] *** Quits: Guest2130 (~Alfr@user/alfr) (Killed (cadmium.libera.chat (Nickname regained by services)))
[04:07:38] *** Joins: Alfr (~Alfr@user/alfr)
[04:12:20] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[04:14:05] *** Quits: cuz (~user@2601:182:cc02:8b0:480:5e00:5c91:f4b2) (Ping timeout: 256 seconds)
[04:25:24] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:26:05] *** Joins: igemnace (~ian@user/igemnace)
[04:26:48] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[04:28:24] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[04:28:44] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[04:31:24] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[04:31:39] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[04:36:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:40:09] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:56:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 256 seconds)
[05:05:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[05:11:45] *** Quits: seok (~Seok@49.2.163.56) (Ping timeout: 265 seconds)
[05:19:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:22:05] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[05:23:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:29:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[05:38:22] *** Joins: cuz (~user@2601:182:cc02:8b0:bcb0:835d:1ce3:e86e)
[05:43:37] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[05:44:22] *** Joins: rt (~robin@user/terpri)
[05:44:55] *** rt is now known as robin
[05:46:51] *** ChanServ sets mode: +o Xach
[05:47:10] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (Changing host)
[05:47:10] *** Joins: Xach (~xach@user/xach)
[05:47:10] *** cadmium.libera.chat sets mode: +o Xach
[05:47:54] *** Joins: seok (~Seok@49.2.163.56)
[05:56:39] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[06:02:40] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[06:06:04] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[06:11:14] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[06:14:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:21:04] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[06:26:50] *** Joins: notzmv (~zmv@user/notzmv)
[06:27:42] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[06:31:54] *** Quits: cuz (~user@2601:182:cc02:8b0:bcb0:835d:1ce3:e86e) (Ping timeout: 240 seconds)
[06:40:17] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:46:04] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[06:52:04] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[06:58:13] *** Joins: pjb (~pjb@user/pjb)
[06:58:59] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[07:34:56] <beach> Good morning everyone!
[07:35:17] <Josh_2> Good morning beach
[07:40:51] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Remote host closed the connection)
[07:40:53] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[07:40:53] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Read error: Connection reset by peer)
[07:40:53] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Read error: Connection reset by peer)
[07:40:54] *** Quits: akanouras (~akanouras@user/akanouras) (Remote host closed the connection)
[07:40:54] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Write error: Connection reset by peer)
[07:40:55] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Read error: Connection reset by peer)
[07:41:04] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Remote host closed the connection)
[07:41:30] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 240 seconds)
[07:41:42] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[07:42:16] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[07:43:37] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Ping timeout: 246 seconds)
[07:43:38] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[07:43:38] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[07:43:38] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[07:43:38] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[07:43:39] *** Joins: akanouras (~akanouras@user/akanouras)
[07:43:39] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[07:43:50] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[07:44:12] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 250 seconds)
[07:50:28] *** Joins: Oddity (Oddity@user/oddity)
[08:02:55] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: node-irc says goodbye)
[08:03:10] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: node-irc says goodbye)
[08:03:33] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: node-irc says goodbye)
[08:03:56] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: node-irc says goodbye)
[08:04:03] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: node-irc says goodbye)
[08:04:03] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: node-irc says goodbye)
[08:04:06] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: node-irc says goodbye)
[08:07:41] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[08:08:32] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: node-irc says goodbye)
[08:16:18] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 240 seconds)
[08:24:18] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 272 seconds)
[08:30:36] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:34:23] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:37:39] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[08:46:45] *** Joins: karlosz (~karlosz@router.cloyne.org)
[08:57:53] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[08:58:12] *** Joins: karlosz (~karlosz@router.cloyne.org)
[09:04:16] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[09:04:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 272 seconds)
[09:06:54] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:10:31] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[09:21:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:24:21] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 258 seconds)
[09:25:45] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[09:25:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[09:28:56] *** Joins: derelict (~derelict@user/derelict)
[09:31:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:33:42] *** Joins: [deleted] (~livoreno@user/notzmv)
[09:36:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[09:37:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[09:50:57] *** Joins: pve (~pve@188-67-174-242.bb.dnainternet.fi)
[09:54:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[10:15:02] *** Joins: shka (~herr@109.231.62.239)
[10:18:53] <susam> Good morning, everyone!
[10:20:34] *** Joins: treflip (~user@95.79.32.99)
[10:26:23] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[10:34:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[10:40:44] *** Joins: livoreno (~livoreno@user/notzmv)
[10:43:48] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 265 seconds)
[10:51:17] <energizer> I heard some lisps let you define a struct, instantiate it, and then change the layout of the type, and that the layout change will propagate into the instances. Does cl have something like that?
[10:51:31] <energizer> s/layout/memory layout/
[10:54:34] <_death> yes, you can do that with DEFCLASS
[10:55:24] <_death> clhs update-instances-for-redefined-class
[10:55:25] <specbot> Couldn't find anything for update-instances-for-redefined-class.
[10:55:37] <_death> clhs update-instance-for-redefined-class
[10:55:37] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_upda_1.htm
[10:56:38] <_death> there is a link there to section 4.3.6
[10:57:16] <moon-child> something fun I realised: a trivial definition of list* is   (defun list* (&rest xs) (reduce #'cons xs :from-end t))
[10:58:54] <mfiano> Clojure wants its xs back
[10:59:15] <moon-child> heh, I don't know clojure; got that from haskell
[10:59:20] <moon-child> (granted, I don't know haskell either, but)
[11:00:00] <phadthai> some implementations may allow similar functionality with defstruct objects but it is non-standard and allows implementations to compile more efficiently (a modified structure then usually requires all dependent code to be rebuilt)
[11:00:43] <phadthai> but yes, clos was designed with live modifications in mind
[11:08:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[11:14:31] *** Joins: dsk (~dsk@user/dsk)
[11:31:24] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[11:31:44] *** Joins: livoreno (~livoreno@user/notzmv)
[11:32:55] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:36:04] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:37:56] <energizer> thanks
[11:41:50] <beach> For the record, SICL struct instances are also standard objects, so they allow redefinition just like instances of standard classes.
[11:42:51] <beach> But then, SICL doesn't exist (yet), so such information is not very useful at the moment.
[11:43:42] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:49:05] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[11:55:12] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[11:56:56] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:56:56] *** Joins: akanouras (~akanouras@user/akanouras)
[11:56:56] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[11:56:56] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[11:56:56] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[11:56:56] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[11:57:08] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[12:06:12] *** Joins: Alfr (~Alfr@user/alfr)
[12:15:32] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[12:16:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:16:13] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Client limit exceeded: 20000)
[12:16:39] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[12:16:49] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[12:17:11] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: Client limit exceeded: 20000)
[12:17:11] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[12:17:13] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[12:17:29] *** Joins: Krystof (~user@81.174.155.115)
[12:23:59] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[12:29:44] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[12:31:36] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[12:31:36] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[12:31:36] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[12:31:36] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[12:31:36] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[12:31:36] *** Joins: akanouras (~akanouras@user/akanouras)
[12:31:48] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[12:34:06] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 258 seconds)
[12:35:40] *** Joins: Krystof (~user@81.174.155.115)
[12:36:39] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:43:39] <pve> Hi, when querying a system for information, would you rather have a simple approach like (mycompany.customer:search-by-email "bob@foo.com") where pre-defined queries are just mapped to functions, or a more elaborate approach like (execute-query (make-instance 'customer-query :email "bob@foo.com")), where they are mapped to classes instead?
[12:44:49] <pve> (I mean like a database, not an ASDF system)
[12:48:16] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:49:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[12:49:31] *** Lord_of_Life_ is now known as Lord_of_Life
[12:50:04] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[12:50:53] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[12:51:10] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[12:51:21] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[12:51:23] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: Client limit exceeded: 20000)
[12:51:28] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[12:56:18] *** Joins: lotuseater (~user@p200300e7870b0900249b68ce60a870ab.dip0.t-ipconnect.de)
[12:58:53] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[13:02:04] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Remote host closed the connection)
[13:03:02] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[13:05:01] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:05:01] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[13:05:01] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:05:01] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[13:05:01] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[13:05:02] *** Joins: akanouras (~akanouras@user/akanouras)
[13:05:13] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[13:06:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:06:35] <mfiano> Not sure you'll be getting meaninful results with such an open-ended question, but I'd prefer the former, as to not allocate memory, and the ability to do partial application more easily on an as-needed basis.
[13:06:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:09:24] <pve> mfiano: thank you, good points
[13:10:24] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Remote host closed the connection)
[13:10:24] *** Quits: akanouras (~akanouras@user/akanouras) (Remote host closed the connection)
[13:10:25] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Remote host closed the connection)
[13:10:25] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Remote host closed the connection)
[13:10:26] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Remote host closed the connection)
[13:10:26] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Read error: Connection reset by peer)
[13:10:26] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Write error: Connection reset by peer)
[13:10:27] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Read error: Connection reset by peer)
[13:11:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[13:13:59] <mfiano> From an API perspective, composition is very important with queries. You might want to limit the number of results, filter them in some way, sort by some criteria, join two queries in some way, etc, which is part of the query. I think a DSL would be better than calling an evaluator on a function or a class, and that's an implementation detail anyway.
[13:14:02] <dsk> pve: IANAE, but I would generally prefer the latter, more flexible option,  maybe with an interface that allows things like (query :email "bob@foo.com") and (query :forename "Bob" :age 42). If consing is actually a problem, you can always memoize the function that creates the query objects.
[13:14:31] <mfiano> I ttherefor think a DSL would be best, see for example the :sxql system.
[13:14:54] <pve> mfiano: and yes, perhaps too open-ended, I was just wondering if someone had dealt with sql databases and hade to make the same choice.
[13:15:25] <mfiano> Whenever I am working with SQL databases I have far too many queries for either approach
[13:15:37] <mfiano> I prefer sxql or hard-coded strings
[13:16:23] <pve> mfiano: do you end up with sql all over the code base?
[13:16:43] *** Joins: mayuresh (~mayuresh@182.58.193.226)
[13:16:49] <mayuresh> hello. :)
[13:16:49] <minion> mayuresh, memo from flip214: # setxkbmap -option caps:ctrl_modifier ....
[13:16:50] <pve> dsk: that seems like a good idea
[13:17:09] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[13:17:31] *** Joins: Alfr (~Alfr@user/alfr)
[13:17:55] <pve> ideally I would like to contain the sql queries as much as possible
[13:18:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:18:56] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:43] <mayuresh> pve: if you're using postgres, look at https://theartofpostgresql.com/
[13:19:48] <mfiano> How much they are contained depends on how extensible you want them, and probably a bit of how much you want to repeat yourself, without some sophisicated macrology.
[13:21:02] <pve> mfiano: yes.. so I guess it's safe to say there's no simple answer
[13:21:22] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[13:21:37] <pve> mayuresh: I am using postgresql
[13:21:58] <mayuresh> pve: do check out that book, it even has examples in "common lisp".
[13:22:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[13:22:19] <pve> wow really?
[13:22:25] <mayuresh> yeah
[13:22:54] <mayuresh> pve: the book basically teaches you how to optimise your code and sql together.
[13:22:59] <pve> oh is it dims book?
[13:23:07] <mayuresh> what's a dims book?
[13:23:29] <pve> no I mean the irc nickname "dim"
[13:23:45] <mfiano> Yes
[13:23:49] <pve> I meant "dim's"
[13:23:52] <pve> cool!
[13:24:06] <mayuresh> ah, you mean dimitri! yes, it is.
[13:24:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:25:03] <pve> at first I was skeptical, but this looks pretty interesting actually
[13:25:28] <mayuresh> i was totally blown away by what's been presented in that book.
[13:25:28] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 246 seconds)
[13:25:50] <mayuresh> it is an expert's distilled wisdom.
[13:26:23] <mfiano> It better be for the price :)
[13:26:33] <mayuresh> :D
[13:26:41] <pve> I consider myself decent at SQL, but I suck at connecting/interfacing my application to the DB.. will this book help me with that?
[13:27:05] <mayuresh> yes, also it will teach you when to write what in sql and what in code
[13:27:33] <mfiano> $130 for a medium-length paperback book...whew
[13:27:58] <mayuresh> mfiano: i think he also sells a digital edition.
[13:29:27] <mfiano> Sure, but I limit my digital reading to academic papers...and mindlessly traversing wikipedia
[13:29:41] <mayuresh> :D
[13:29:55] <mayuresh> mindlessly traversing wikipedia, yeah, true that. :D
[13:30:13] <mayuresh> the kind of crap that's loaded up there is crazy.
[13:30:33] <mayuresh> you should specifically read-up all the articles about hinduism and india.
[13:31:08] <mayuresh> i get a kick out of noticing the amount of bullshit and the rapidity with which corrections are reverted back to older bullshit.
[13:34:35] <pve> have to step away now, thank you all for the advice and book recommendation :)
[13:35:43] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[13:36:15] <mayuresh> bye.
[13:36:18] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:36:18] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[13:36:18] *** Joins: akanouras (~akanouras@user/akanouras)
[13:36:18] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:36:30] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[13:36:30] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[13:36:31] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[13:38:01] <Posterdati> hi
[13:41:00] <beach> Hello Posterdati.
[13:41:26] <mayuresh> hello Posterdati
[13:41:29] <mayuresh> :)
[13:42:54] <mfiano> Anyone know what happened to H4ns? (randomly noticed I hadn't seen them around for years)
[13:43:53] <mayuresh> i dunno, i joined just around 10 days back.
[13:45:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:47:35] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[13:55:11] *** Joins: rt (~robin@user/terpri)
[13:55:23] *** rt is now known as robin
[13:59:12] <mayuresh> just like there's an 'irc' channel for commonlisp,
[13:59:24] <mayuresh> and a mailing list for "lispworks",
[13:59:36] <mayuresh> is there a general mailing list for commonlisp related discussions?
[14:00:07] <mayuresh> i would also be happy to know about any topic specialist mailing lists form commonlisp.
[14:00:31] <mfiano> Not in any state of activity
[14:01:12] <mfiano> The "pro" list is the only one that comes to mind, and it receives only a handful of messages per year, if that.
[14:01:30] <mfiano> Most mailing lists are project specific, and their numbers seem to be dwindling
[14:02:46] <mayuresh> mfiano: any link to the "pro" list?
[14:03:05] <mfiano> https://mailman.common-lisp.net/listinfo/pro
[14:04:13] <mfiano> For threaded messaging, if you can deal with the spam, use usenet. If you can deal with the web, use reddit.
[14:04:24] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[14:08:49] *** Joins: selwyn (~selwyn@user/selwyn)
[14:11:20] <mayuresh> somehow, the books/material using scheme go a lot more deeper into computer science than books using "common lisp".
[14:12:22] <mayuresh> i stumbled upon a book called "concrete abstractions" which is an intermediary step between "simply scheme" and 'sicp'.
[14:12:26] <beach> Common Lisp has always been more pragmatic and industrial.
[14:13:06] <beach> For example, from the start, they were concerned with performance.  Not so much with Scheme.
[14:13:14] <mayuresh> i think i am on the right track while working with scheme to learn deep computer science material before moving over to "common lisp" as my final destination.
[14:13:33] <mayuresh> or rather my final language.
[14:14:08] <mfiano> Scheme is a very simple language, being only about 100 pages specified. It is a good teaching aid, mostly, and to be near feature-parity with CL, many extensions (SRFI's) would be needed.
[14:14:22] <beach> I learned (and used) Scheme before I learned Common Lisp, but now I consider it like learning Latin just to learn Spanish one day.
[14:15:37] <mfiano> I am with beach. Scheme is not very...practical, and doesn't carry over much to CL.
[14:16:04] <mayuresh> beach, because you learned latin before, your spanish is really good now.
[14:16:58] <beach> It is a matter of total time spent to get to the final objective.
[14:17:11] <beach> You will do even better if you study Sanskrit before latin.
[14:17:45] *** Joins: rogersm (~rogersm@92.59.121.109)
[14:21:06] <beach> But you are probably right that the books that use Scheme tend to be written by more theoretically inclined people, so they are more "CS-y" than the books on Common Lisp.  In case that's what you want.
[14:21:58] <ecraven> one of the benefits of Scheme is that it is much easier to understand R7RS fully than to understand CLHS fully. and many things transfer from Scheme to CL well (but many things need to be learned too ;)
[14:22:12] <beach> But I don't think that's related to the languages, other than that Scheme attracts theoreticians more.
[14:22:31] <ecraven> mayuresh: if you want to reach CL, there's not much use in learning Scheme first, as you want to go to CL anyway
[14:22:55] <ecraven> one of these days I'd love to create a proper benchmark between SBCL and Chez Scheme
[14:23:13] <ecraven> Chez really generates very fast code (as long as you don't use floats :P)
[14:28:05] <mfiano> I would say the best way to learn Common Lisp is to take your time, writing actual code, after a brief introduction to the language. I started Common Lisp 16 or so years ago when PCL was released, with no real prior programming experience, only having read about half of the book before it had me experimenting on my own, and the rest is history.
[14:28:58] <mfiano> But most definitely, skip the Scheme step. There is some overlap, but not much, or at least less than the chance of confusing concepts when working in one or the other.
[14:29:00] <mayuresh> cool.
[14:29:01] <ecraven> I agree, I've read many books on CL, but am not actually a good CL programmer, as I've never used it very much
[14:30:03] <mayuresh> i think it would do me good to work through theoretical computer science using scheme (since it's a lisp) and then move to practical software development/engineering using commonlisp.
[14:31:09] <mfiano> We are saying that path is probably not a good one, if you value your time, and can accept the extra difficulty that you will face in learning CL without Scheme exposure.
[14:31:26] <mfiano> compared to learning CL without Scheme exposure*
[14:32:30] <ecraven> you can also do both, imho the languages are different enough that you don't mix things up, and if you do, you'll better understand them ;) but to learn Scheme and expect it to *help* you with learning CL might be a bit of a misconception
[14:32:46] <ecraven> it will certainly help you understand some of the decisions that went into CL better, as you will see alternative paths not taken ;)
[14:32:55] <mayuresh> i calculated that i'll be spending between 3 to 3.5 years more on the scheme with computer science path, which is a minor thing while compared to the great exposure i'll receive while working with commonlisp the rest of my life here on.
[14:33:41] <mayuresh> i'm 44 at the moment, single, and unaffiliated with industry.
[14:34:12] <mayuresh> i am planning to work with commonlisp because i think i'll enjoy it, but i wish to be well educated and informed about the internals too.
[14:34:24] <mfiano> Personally I would replace the Scheme part with a solid understanding of key data structures and algorithms.
[14:35:18] <beach> I agree with mfiano.
[14:35:42] <ecraven> even I agree, and I'm a Scheme fan ;)
[14:35:57] <ecraven> if your goal is CL, then go for the goal (and learn whatever you *think* Scheme would teach you directly)
[14:36:24] <beach> And even something like compiler design.  I find a lot of programmers who don't know what compilers are capable of, tend to write dumb code as a result of their incorrect mental model of what the compiler does.
[14:37:12] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[14:38:38] <beach> Some of my students would avoid defining lexical variables inside a loop, because "then the variable has to be created in every iteration", so they defined their variables with way too large a scope.
[14:39:11] *** Quits: mayuresh (~mayuresh@182.58.193.226) (Ping timeout: 268 seconds)
[14:39:40] <mfiano> Some basic compiler theory will help a lot, yes.
[14:39:42] <beach> I guess the advice was not appreciated.  Oh well.
[14:40:06] <mfiano> Not appreciated?
[14:40:17] <beach> mayuresh left.
[14:40:32] <mfiano> His reason for leaving was a ping timeout, likely a server netsplit or network error on their end.
[14:41:02] <beach> I was half joking.
[14:41:08] <mfiano> Oh ha
[14:48:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:49:25] *** Joins: [deleted] (~livoreno@user/notzmv)
[14:49:35] *** Joins: mayuresh (~mayuresh@182.58.212.182)
[14:50:04] <mayuresh> i particularly like the fact about commonlisp that it has remained stable for
[14:50:06] <mayuresh> +such a long time.
[14:50:39] <mayuresh> even scheme has had multiple revisions come out.
[14:51:03] <mayuresh> i think commonlisp was done just right when it was standardised.
[14:51:14] <ecraven> well, CL is an entire language + libraries.. Scheme is not, you have to use implementation-specific code for everything practical
[14:51:20] <mayuresh> and it's the macros that make it that much more magical.
[14:51:24] <mfiano> It took a lot of time, money, and effort by a lot of smart individuals.
[14:51:54] <ecraven> Scheme (implementations) have exactly the same sort of macros that CL does, that's no different.. but CL has extensive *standardised* libraries across implementations
[14:52:15] <mayuresh> i read the introduction to "on lisp" and it was very inspiring.
[14:52:16] <ecraven> also, CL has pervasive CLOS
[14:52:24] <mayuresh> true.
[14:52:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 258 seconds)
[14:52:48] <ecraven> maybe read "ansi common lisp" by the same author, do all the exercises, then read "on lisp", do all the exercises..
[14:53:02] <mayuresh> okay.
[14:53:02] <ecraven> many people seem to like Practical Common Lisp
[14:53:08] *** Quits: frgo (~frgo@p200300deef27d7009ccb6508d64ac6ab.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:53:18] <mayuresh> seibel is bringing out 2e.
[14:53:26] <mfiano> He actually stated he will not
[14:53:31] <mayuresh> ah.
[14:53:43] <mayuresh> i read it on his twitter timeline that he's soliciting suggestions.
[14:53:52] <mfiano> However, I think phoe is working with Edi Weitz on CLR 2e
[14:54:03] *** Joins: frgo_ (~frgo@p200300deef27d700157d8e26e1ee229d.dip0.t-ipconnect.de)
[14:54:05] <mayuresh> what is clr?
[14:54:11] <mayuresh> commonlisp recipes?
[14:54:17] <mfiano> Yes that was a while ago, but he mentioned he will not be about a week ago.
[14:54:19] <mfiano> Yes
[14:54:45] <mayuresh> any reasons stated why he'll not be bringing out 2e?
[14:54:48] <ecraven> ah, the number of times I've missed displaced arrays in Scheme ... :-/ CL really is a complete language+library
[14:54:50] <mayuresh> time constraints?
[14:55:10] <mfiano> Unspecified.
[14:56:42] <mayuresh> okay, i really gotta go, stomach growling big time, gotta have something.
[14:56:45] *** Quits: rogersm (~rogersm@92.59.121.109) (Ping timeout: 268 seconds)
[14:56:47] <mayuresh> ttyl
[14:56:57] *** Quits: mayuresh (~mayuresh@182.58.212.182) (Quit: Leaving)
[14:58:52] <mfiano> ecraven: Isn't there provisions for changing the shape of an array and how it is indexed etc?
[14:59:17] <mfiano> I think I remember reading that in the Guile manual some time ago, though that might not be an extension I suppose.
[14:59:37] <ecraven> it is all extensions, there's not even a standard way of getting an aliased subset of a byte array
[14:59:50] <ecraven> Scheme really only has the bare minimum (and often less ;)
[15:00:02] <ecraven> r7rs-large is about to change much of that, but it's been in the works for years, and will take years more
[15:00:29] <mfiano> Ah yes, as I mentioned, would need a bunch of extensions (some non-existent) to be close to CL
[15:02:08] <mfiano> That's the most disappointing thing to me about Scheme (not that I use it to be disappointed)
[15:02:21] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[15:02:35] <mfiano> It's all a bunch of extensions, spread out among hundreds of implementations or a handful of specifications.
[15:03:00] <mfiano> I was sad to learn that when I read up on it some time ago (and I thought CL was fragmented)
[15:03:19] <mfiano> s/or/of/
[15:04:34] <ecraven> mfiano: one of my main gripes is that it is very strongly monomorphic.. so there's string-length, vector-length, bytevector-length, (list-)length, and about 15 other ...-lengths in the various srfis..
[15:04:43] <ecraven> I understand the reasoning, but that is just insane to actually *use*
[15:05:02] <ecraven> and this applies to *every* polymorphic procedure... especially for sequences, this is really hard to use
[15:05:17] <ecraven> but adding polymorphism to the base language is a very controversial topic, so
[15:05:22] <ecraven> I don't think that will ever happen
[15:06:12] <mfiano> I see
[15:07:31] <ecraven> I used to be a very strong supporter of lisp-1, wishing there were a lisp-1 CL, but I've since grown older and less strict in that view :D
[15:07:51] <ecraven> in the end, both are nice languages, but CL is definitely the one to use when your main goal is to actually get something to run
[15:08:32] <ecraven> also, the debuggability of CL is - in my limited experience - just unmatched in *any* other language (by far))
[15:08:47] <ecraven> meaning the way you can introspect and mutate a running program
[15:09:43] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[15:09:46] <mfiano> Most definitely agreed.
[15:10:02] *** Joins: livoreno (~livoreno@user/notzmv)
[15:10:32] <mfiano> Languages that boast interactivity/hot code reloading are more like a bad joke in comparison, like Julia or Nim.
[15:10:36] <ecraven> that's why I've been working on r7rs-swank, but it's just a pale shadow of an actual full SWANK ;)
[15:10:51] <ecraven> I've never used those two for actual work
[15:11:09] <ecraven> I should get tracing working in r7rs-swank, I'm still using a lot of format-debugging
[15:12:28] <mfiano> I'm mostly a game developer/generative graphics tinkerer, so I appreciate the interactivity of CL more than most anything else
[15:13:43] <mfiano> Being able to iteratively recompile bits of my code at will and visually see those changes saves a lot of time, especially since such minor changes are tweaking colors and such. The downtime of the stop/recompile/restart process would not help with such minutia
[15:15:19] <ecraven> that's another example, there is no unified multi-threading support in Scheme implementations, so I haven't found a good way to run the REPL in a separate thread from the code....
[15:15:37] <mfiano> That's unfortunate
[15:20:52] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:32:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:34:34] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[15:34:58] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 272 seconds)
[15:37:49] *** Joins: random-nick (~random-ni@87.116.179.41)
[15:38:20] <Posterdati> ecraven: common lisp is also used in contexts for which you cannot physically access the computer, like space probes/rovers
[15:38:53] *** Joins: xsperry (~as@user/xsperry)
[15:42:41] <Posterdati> ecraven: you can use guile
[15:42:58] <Posterdati> ecraven: https://www.gnu.org/software/guile/manual/html_node/Threads.html
[15:46:43] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:46:59] <lisp123> mfiano: I agree, best way to learn CL is to write CL
[15:56:32] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:57:20] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:58:27] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[15:59:14] <Posterdati> is anyone using antik?
[15:59:41] <Posterdati> I experienced a problem with Hz <-> rad/s. Hz is not rad/s!!!!
[16:00:10] <Posterdati> [ Hz ] = 1 / s
[16:07:01] <Posterdati> w = 2 pi f
[16:10:22] <mfiano> Son't you mean omega, not w, if you're talking about angular frequency/velocity?
[16:10:25] <mfiano> Don't*
[16:12:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[16:15:43] <Posterdati> ...
[16:16:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[16:17:49] <Posterdati> https://en.wikipedia.org/wiki/Hertz
[16:18:37] <mfiano> I know what Hertz is
[16:18:52] <Posterdati> ok which is 1/s
[16:19:19] <Posterdati> now (antik:make-pq 1.0 'antik:hertz)
[16:19:27] <mfiano> I'm not sure what answer you get and what you expect. I was just noting that (char= #\w #\ω) => NIL
[16:22:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 256 seconds)
[16:27:06] <mfiano> I don't believe this is a bug, but a dimensional analysis lesson.
[16:28:30] *** Joins: McParen (~McParen@user/mcparen)
[16:28:40] <McParen> Hello, does anybody know how to contact the people running common-lisp.net? I wrote to their contact mail, I wrote to the admin mailing list, but I never got a reply.
[16:29:14] <mfiano> McParen: gendl may know.
[16:29:42] <Xach> there is a #common-lisp.net channel
[16:30:09] <mfiano> Posterdati: Infact, that link you posted mentions: "Thus a disc rotating at 60 revolutions per minute (rpm) is said to be rotating at either 2π rad/s or 1 Hz, where the former measures the angular velocity and the latter reflects the number of complete revolutions per second."
[16:30:43] <Posterdati> which is not exact either
[16:31:00] <Posterdati> frequency is not angular speed
[16:34:19] <Posterdati> "complete revolution per seconds" is one of definition
[16:34:35] <Posterdati> the complete revolution IS NOT radian
[16:34:56] <Posterdati> you can use rev / s
[16:34:59] <mfiano> It should be 2pi radians
[16:35:08] <mfiano> Which is infact what I get as a result
[16:35:09] <beach> Posterdati: "radian" is considered dimensionless in physics.
[16:35:23] <mfiano> Eactly, hence "dimensional analysis"
[16:35:23] <Posterdati> yes
[16:35:29] <mfiano> A useful term to google if unaware
[16:35:46] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 272 seconds)
[16:36:17] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[16:37:02] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 272 seconds)
[16:37:05] <Posterdati> try (antik:* (antik:make-pq (* 2 pi) 'antik:radian) (make-pq 50.0 'antik:hertz))
[16:37:53] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:38:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[16:39:59] <Posterdati> should be ~314 rad/s
[16:40:52] <Posterdati> mfiano: I know what "dimensional analysis
[16:40:55] <Posterdati> " is
[16:42:11] <beach> Privately, I often use units that are considered dimensionless in physics, in some kind of extended dimension analysis, like byte, page, cache line, sector, pixel, etc.
[16:45:15] <Posterdati> beach: lucky you! :) eheheh
[16:45:32] <mfiano> So what do you expect with the above?
[16:47:04] <beach> I am not sure what a library is supposed to do if I multiply a frequency by 2π.  It can't really guess that the unit should change.  Perhaps, 2π just happens to be an arbitrary coefficient.
[16:47:29] <ecraven> Posterdati: I know, most Schemes *implementations* have some specific way to access threads, but nothing that is standardised, so it's not as useful as CL (even though threads are not part of the CL standard)
[16:47:30] <Posterdati> mfiano: ~314 rad/s
[16:47:39] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[16:48:06] <mfiano> I'm also not sure
[16:48:08] <mfiano> But google will give you ~1973 as well
[16:48:28] <Posterdati> ecraven: the problem is that threads rely on OS libraries
[16:49:01] <Posterdati> mfiano: lol, 2pi rad * 50 Hz = 314 rad/s
[16:49:21] <mfiano> File a bug against antik and google's converter :)
[16:49:46] <ecraven> Posterdati: which is irrelevant to the problem of specifying a common *interface* to them
[16:50:09] <Posterdati> now try to use those numbers in electrical calculations, lol
[16:51:32] <mfiano> antik is wrong for sure.
[16:51:55] <mfiano> I wonder if this is antik or its GSL foreign code dependency
[16:52:19] <mfiano> I don't use it to dig any deeper. Prob worth an issue on its tracker
[16:52:21] <Posterdati> mfiano: I changed frequency definition in antik
[16:52:48] <Posterdati> mfiano: originally it was angle / time
[16:53:08] <mfiano> Nice. Now write a patch so everyone can benefit
[16:53:11] <Posterdati> mfiano: but should be 1 / time
[16:53:46] <Posterdati> mfiano: https://it.wikipedia.org/wiki/Frequenza
[16:54:24] <Posterdati> f = 1 / T, T = period of the phenomenon, could be ANY periodic phenomena
[16:55:17] <mfiano> Yeah converting 2pi hz to rad/s is funny
[16:55:54] <mfiano> err 50(2pi)hz to rad/s
[17:01:55] <pve> mfiano: You mentioned generative graphics, do you use it when making games?
[17:04:24] <mfiano> Sure
[17:07:09] <gendl> McParen: what email did you try for common-lisp.net? And yes, there is #common-lisp.net
[17:07:19] <mfiano> I wasn't aware. Thanks gendl
[17:08:40] <pve> mfiano: That's fascinating. Do you happen to know if it is possible to create natural objects like trees, bushes, grass, etc. I mean things you might have in a typical 2D game scene.
[17:08:49] <pve> I've always assumed it's too hard to do.
[17:09:16] <mfiano> For trees look into L-systems; it's rather simple. For more natural stuff, you may get far with noise-based or cellular automaton
[17:09:47] <mfiano> Here is a noise-based library I wrote recently (scroll to bottom for one posible output image) https://git.mfiano.net/mfiano/cricket
[17:11:16] <pve> mfiano: ooh, that's pretty cool
[17:21:20] *** Joins: selwyn (~selwyn@user/selwyn)
[17:27:05] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:27:29] *** Joins: selwyn (~selwyn@user/selwyn)
[17:27:58] *** Joins: selwyn_ (~selwyn@user/selwyn)
[17:28:18] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[17:39:43] <McParen> gendl: I tried admin (at) common-lisp (dot) net and clo-devel (at) common-lisp (dot) net
[17:40:41] <mfiano> pve: Thanks!
[17:40:44] <mfiano> night
[17:42:17] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[17:45:17] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[17:51:45] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:58:15] *** Joins: Bike (~Glossina@71.69.170.70)
[17:58:15] *** ChanServ sets mode: +o Bike
[17:59:54] *** Joins: Guest96 (~Guest96@metroexp121142.htc.net)
[17:59:58] *** Joins: kami_ (~user@user/kami/x-1692339)
[18:00:09] <kami_> Hello #commonlisp
[18:01:03] <Guest96> very confused
[18:01:06] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:01:12] <Guest96> how to find topics
[18:01:24] <beach> Hello kami_.
[18:01:42] <beach> Guest96: What kind of "topics"?
[18:01:59] <Guest96> e.g commonlisp
[18:02:25] <beach> Where are you looking?  Libera.chat?  Internet?  Reddit?
[18:02:33] <McParen> type /topic
[18:02:35] <Guest96> libera.chat
[18:03:02] <mfiano> You just joined the #commonlisp topic
[18:03:37] <McParen> a list of lisp-related channels can be found here: https://www.cliki.net/irc
[18:03:58] <mfiano> Note that many channels (topics) won't allow you to join without registering your account, which I see you have not. This channel is not one of them, though.
[18:04:06] <Guest96> thanks, McParen -- will try clicking on that
[18:05:47] <Guest96> I seem to have missed any "getting started" instructions --- it's all just empty space to see, and a list of users
[18:06:24] <mfiano> IRC is a real time chat platform. If you see empty space, it means no one is currently chatting.
[18:06:43] <Guest96> thanks, mfiano
[18:07:39] <jackdaniel> Guest96: if you want to see the past log, then you may navigate this web application: https://irclog.tymoon.eu/libera/%23commonlisp
[18:08:22] <Guest96> ok, +jackdaniel, will check out the log
[18:08:42] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[18:10:29] *** Parts: Guest96 (~Guest96@metroexp121142.htc.net) ()
[18:14:34] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[18:24:18] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Remote host closed the connection)
[18:24:38] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[18:47:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[18:48:58] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[18:54:13] *** Joins: shka (~herr@109.231.62.239)
[18:54:14] *** Joins: cuz (~user@38.140.58.234)
[19:00:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[19:00:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[19:14:21] <phoe> jackdaniel: (let 'x (setf quote 2 x 3) #.`(* ,@''x))
[19:14:37] <phoe> you mentioned writing perl in Lisp a few days ago
[19:14:41] <phoe> and I thought you'd enjoy it
[19:16:12] <shka> phoe: this code gave me a headache
[19:16:41] <phoe> shka: lucky you, to me it caused an urgent need to stand up and take a walk
[19:16:48] <beach> phoe: Can't you do (setf . '(2 x 3)) instead?
[19:16:58] <beach> I guess that won't work.  Oh well.
[19:17:22] <phoe> yes, I need (quote 2 x 3) and not (quote (2 x 3))
[19:17:40] <phoe> but you could (setf x 3 . '2) I guess!
[19:17:49] <beach> Yes, something like that!!!!
[19:18:07] <beach> Much improved.
[19:18:13] <phoe> perfection
[19:18:58] <phoe> next year it will be the time to start IOCLCC
[19:19:31] <beach> minion: What does IOCLCC stand for?
[19:19:31] <minion> Isopolite Overflood Courb Labba Contusion Carucated
[19:19:36] <phoe> International Obfuscated CL Code Contest
[19:19:42] <beach> Ah.
[19:19:44] <beach> Right.
[19:19:52] <phoe> the C people already have it
[19:20:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:20:04] <phoe> (let #1='my-variable (setf #.(cadr '#1#) 3 . '2) #.`(* ,@'#1#))
[19:20:22] <phoe> zulu.inuoe has truly achieved masterhood with this one
[19:20:37] <shka> oh god
[19:20:41] <shka> please no
[19:20:57] <beach> Heh.
[19:20:59] <beach> Great1
[19:21:03] *** Joins: derelict (~derelict@user/derelict)
[19:22:46] * shka cries in the corner
[19:23:09] * OlCe cries but laughs as well...
[19:23:53] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[19:24:56] <OlCe> But doing an obfuscated code contest in CL is cheating if you don't forbid messing with readtables...
[19:28:02] <phoe> if you can fit something meaningful in your readtable in 2048 bytes or so, along with your payload, then I think it's worth being seen
[19:28:37] <OlCe> Ha ha
[19:29:00] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:31:59] <tyson2> sorry, I don't think that Lisp needs an obfuscated code contest
[19:32:15] <OlCe> Never thought about it but I'm now already pretty sure that CL can beat C hands on for code obfuscation.
[19:32:16] <jackdaniel> `',foo is a rather popular idiom (i.e not meant for obfuscation)
[19:34:00] <jackdaniel> I sometimes see bugs in macros like `(something-something '(,@args)) where the desired form is `(something-something (list ,@args)) ; since it is not a singular case I think that there is some kind of programmer-blindness rooted in such construct
[19:34:17] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Quit: Client closed)
[19:36:48] <phoe> you mean so that the resulting list is fresh instead of literal?
[19:37:01] <phoe> like, guaranteed to be fresh?
[19:37:14] <jackdaniel> hah, you've fallen to this too
[19:37:23] <jackdaniel> no, to guarantee that args are evaluated
[19:37:30] <phoe> :(
[19:37:41] <phoe> oooh
[19:37:44] <phoe> yes, I see it now
[19:37:54] <jackdaniel> programmer blindness /me nods to himself
[19:38:34] <OlCe> jackdaniel: Second form could be replaced by `(something-something ,args) as well, if preserving list structure is not important, or conversely something-something does not touch it.
[19:39:16] <jackdaniel> it can't
[19:40:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:40:49] <OlCe> jackdaniel: Why couldn't it?
[19:41:03] <pve> I still don't see it, can someone please explain like I'm 5? :(
[19:41:08] <phoe> OlCe: if args is e.g. (1 2 3) then you do not want to expand into (something-something (1 2 3))
[19:41:26] <phoe> you rather want (something-something (list 1 2 3))
[19:41:44] <phoe> or (something-something 1 2 3) which has slightly different semantics
[19:41:49] <jackdaniel> say args are (foo bar), then `(ss '(,@args)) -> (ss '(foo bar))    ; `(ss ,args)  -> (ss (foo bar))   ; `(ss (list ,@args))  -> (ss (list foo bar))
[19:41:50] <OlCe> Sure, forgot the '
[19:41:53] <phoe> or (something-something '(1 2 3)) which has the trap that jackdaniel mentioned
[19:42:02] <jackdaniel> these are three very different things
[19:42:07] <phoe> oh, so you meant (s-s ',args)
[19:42:09] <OlCe> `(something-something ',args)
[19:42:11] <OlCe> Yes
[19:42:12] <jackdaniel> your example implies that foo is a function
[19:42:25] <jackdaniel> the example with quote implies that foo and bar as treated as symbols
[19:42:35] <jackdaniel> the example with (list ,@args) implies that foo and bar are evaluated
[19:43:19] <jackdaniel> converserly dependoing on what ss does they may be further quoted or treated differently, but that's beside the point
[19:43:24] <OlCe> So it's seems I've fallen to it as well... ;-)
[19:45:20] <OlCe> Although I have been using the second form regularly in macros.
[19:45:39] <phoe> this would make a nice blogpost I think
[20:00:42] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Remote host closed the connection)
[20:02:40] <dieggsy> I've got something rather odd happening where i do a (mapcan #'some-fn some-list) in the repl and it works fine the first time but hangs if i try the exact same thing again
[20:02:53] <dieggsy> not really sure where to start investigating that
[20:03:07] <dieggsy> ...i think it even happened when i copy-seq'ed the list
[20:03:09] <beach> I am guessing you have a literal list.
[20:03:17] <beach> Hmm.
[20:03:30] <dieggsy> it's not a literal list
[20:03:36] <beach> Maybe you are creating a circular list then.
[20:03:53] <dieggsy> huh. maybe so
[20:04:12] <dieggsy> I'd have to look at the specifics of my functions. i didn't write them lol
[20:04:30] <Bike> does some-fn not return fresh lists? that would do it
[20:04:34] <beach> I guess if the same list is processes twice, there is that risk.
[20:04:55] <dieggsy> Bike: oh, i don't think it does actually
[20:05:06] <Bike> mapcan nconcs the results together, see
[20:05:21] <dieggsy> ah, that's. destructive huh
[20:05:23] <phoe> dieggsy: use (mapcar #'copy-seq some-lists)
[20:05:37] <phoe> or alexandria:mappend instead of mapcan
[20:06:32] <dieggsy> neat, thanks guys. i hate destructive functions with a passion jaja
[20:06:44] <phoe> then you're gonna be good friends with mappend
[20:06:47] <Bike> yeah, the lack of mappend in the standard kinda blows, but at least alexandria has it
[20:09:26] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[20:13:02] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:13:48] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[20:15:41] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.7.5 - https://znc.in)
[20:26:29] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[20:27:23] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[20:33:03] *** Joins: Doraemon (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[20:35:55] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Ping timeout: 268 seconds)
[20:36:05] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[20:37:39] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[20:41:20] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[20:41:48] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[20:50:20] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[21:03:03] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[21:08:22] *** Joins: dlowe (~dlowe@user/dlowe)
[21:14:58] <jcowan> Posterdati: Not all thread libraries are OS threads, especially in Scheme where you can do yoour own green threads (with obvious limitations)
[21:24:29] *** Joins: lad (~lad@user/lad)
[21:28:46] *** Quits: Doraemon (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Remote host closed the connection)
[21:33:17] *** Joins: Oladon (~olad@98.43.81.226)
[21:39:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[21:42:26] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[21:43:32] *** Quits: frgo_ (~frgo@p200300deef27d700157d8e26e1ee229d.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:44:01] *** Joins: frgo (~frgo@p200300deef27d7005869095a62b4ed9b.dip0.t-ipconnect.de)
[21:52:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[21:52:59] *** Joins: amb007 (~a_bakic@137.198.204.77.rev.sfr.net)
[21:59:59] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[22:01:51] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[22:10:45] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[22:21:24] *** Quits: Xach (~xach@user/xach) (Ping timeout: 252 seconds)
[22:22:16] *** Joins: kathe (~mayuresh@182.58.242.118)
[22:22:22] <kathe> hi. :)
[22:23:00] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[22:23:13] <kathe> would someone be able to tell me where i could buy a paperback of "on lisp"?
[22:23:37] <kathe> hi xach! how are you mr. beane. :)
[22:24:44] <kathe> "on lisp" on amazon has become unavailable for delivery to my location.
[22:25:15] <kathe> btw, i do have a pdf of "on lisp" but need a paperback to read while on the go.
[22:25:43] <kathe> i don't much like the kindle or for that matter any tablet computer.
[22:25:54] <kathe> and i don't own a smartphone.
[22:27:11] <pranavats> kathe: lulu.com prints it I guess.
[22:27:11] <pranavats> https://www.lulu.com/shop/paul-graham/shop/paul-graham/on-lisp/paperback/product-1r8zm7kj.html
[22:27:30] <kathe> cool. thanks pranavats. :)
[22:28:59] <kathe> i think xach (mr. beane) is the most powerful force in promoting commonlisp.
[22:29:13] <kathe> one should just follow his twitter timeline.
[22:29:30] <kathe> and then there's mr. rainer joswig too.
[22:30:00] <kathe> mr. joswig is totally a commonlisp jedi master. :)
[22:32:36] <kathe> anyone here working with commonlisp under ubuntu?
[22:32:45] <jackdaniel> many
[22:33:00] <kathe> i tried to get the hyperspec via "apt" the ftp url failed.
[22:33:30] <kathe> wrote to martin simmons, he asked me to download it over http.
[22:33:31] <kathe> that worked.
[22:34:02] <jackdaniel> good for you ,)
[22:34:07] <kathe> :)
[22:34:39] <kathe> it's quite impressive the way it was marked up via a lisp program.
[22:34:54] <kathe> the original was a set of text files from xerox.
[22:35:04] <kathe> again the original is unavailable.
[22:35:05] *** Joins: karlosz (~karlosz@router.cloyne.org)
[22:35:59] <kathe> are any of the french around at the moment? say beach!
[22:36:14] <kathe> i mean the person named "beach".
[22:37:03] <jackdaniel> yes, he is on this channel (although currently away from keyboard, will be in early morning tomorrow probably)
[22:37:05] <Bike> beach is out for the day
[22:37:25] *** Joins: Alfr (~Alfr@user/alfr)
[22:37:42] <kathe> yeah, beach usually is on around mid-day my time.
[22:37:52] <kathe> we chat a bunch.
[22:38:07] <kathe> he's crazy mad about "practical common lisp".
[22:38:47] <kathe> is browsed through 'pcl' on the gigamonkeys website.
[22:39:06] <kathe> it seems working through 'pcl' is like going through community college.
[22:39:15] <kathe> kind of exposure to trade craft.
[22:39:24] <kathe> but not in depth knowledge about the foundations
[22:39:35] <kathe> like what paul graham delivers.
[22:39:38] <jackdaniel> kathe: while expressing ones attitude to books and various lispers (i.e by praising them) is certainly fun for these people - this isn't very much on topic on this channel
[22:40:15] <kathe> jackdaniel: didn't know about these restrictions. sorry, will not happen again.
[22:40:21] <kathe> just joined 10 days back.
[22:40:26] <kathe> wasn't aware.
[22:40:51] <jackdaniel> no worries. this channel is known for strict on-topicness (well, not always very strict, but still)
[22:41:14] <jackdaniel> there is #lispcafe for offtopic (but there are less people than here)
[22:41:19] <kathe> i like on-topicness. :)
[22:41:25] <jackdaniel> great!
[22:41:43] <kathe> i tried hanging out on clschool
[22:41:51] <kathe> not much activity there.
[22:42:21] <kathe> though found out about cliki from there. :)
[22:43:15] <kathe> i am using a console 'irc' client called "ircii", how do i check who's online?
[22:43:23] <kathe> sorry about the off-topic line.
[22:43:50] <kathe> would appreciate receiving links to tutorials on the web.
[22:44:06] <kathe> there was a book called "irc hacks" which has gone out of print.
[22:44:19] <Bike> most irc clients have it under /names or something
[22:44:27] <kathe> thanks bike
[22:46:13] <kathe> okay didn't find anything relevant on google, now searching for a 'gui' 'irc' client for ubuntu.
[22:47:21] <kathe> is mr. rainer joswing in/on this channel? right now!
[22:47:48] <McParen> has for the type of trolling performed by c.l.l. "gavino" ever been coined a name?
[22:48:12] <kathe> there are trolls here too?
[22:48:16] <kathe> that's sad.
[22:48:27] <Bike> c.l.l is usenet, not here
[22:48:38] <kathe> okay.
[22:49:06] <McParen> something similar to "sealioning" but for the type of people who ask an endless series of trivial questions, one more nonsensical than the other, trying to wear down people trying to answer them?
[22:49:33] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[22:50:03] <kathe> McParen, that gavino person does all that "on purpose" or is it just naivete?
[22:50:35] <Lycurgus> on purpose
[22:50:36] <McParen> "The term sealioning, coined by David Malki in his webcomic Wondermark, describes someone who pretends to be clueless about an issue in order to waste your time."
[22:51:34] <kathe> man, where do such people find the time and motivation to do it?
[22:52:03] <Lycurgus> gavino is a celebrity level troll
[22:52:41] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[22:53:25] <kathe> gavino must be quite a mean person by nature.
[22:53:39] <phoe> or with a distorted personality
[22:54:01] <kathe> phoe, do you intend to mean deranged? ;)
[22:54:05] <phoe> it takes real distortion to keep on doing abusive things like that year after year after year
[22:54:10] <phoe> kathe: that too
[22:55:04] <kathe> i faced such a guy on the forth channel, he was russian.
[22:55:13] <kathe> forth on freenode.
[22:56:37] <kathe> i've forgotten his name and handle, but he used to work on gforth.
[22:57:01] <kathe> he contributed to gforth heavily, yet kept abusing forth on a forth channel.
[22:57:22] <kathe> never mind.
[22:57:24] * phoe hmmms, gently opens the #lispface door
[22:57:49] <kathe> about commonlisp, has anyone attempted using sublimetext for commonlisp development?
[22:58:07] <phoe> kathe: yes, see slymlime as a slynk client
[22:58:15] <phoe> slyblime*
[23:01:50] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[23:02:08] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[23:02:09] *** Joins: selwyn (~selwyn@user/selwyn)
[23:04:23] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[23:04:43] <kathe> thanks phoe.
[23:05:05] <kathe> phoe, i heard that you are working with weitz on clr2?
[23:05:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:06:46] <kathe> okay, i gotta go now.
[23:07:00] <kathe> phoe, if you are working on clr2, loads of good luck.
[23:07:02] <kathe> bye
[23:07:06] <kathe> ttyl.
[23:07:08] *** Quits: kathe (~mayuresh@182.58.242.118) (Quit: Leaving)
[23:08:19] *** Joins: frgo_ (~frgo@p200300deef27d70044b337b3766a7055.dip0.t-ipconnect.de)
[23:11:23] *** Quits: frgo (~frgo@p200300deef27d7005869095a62b4ed9b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:16:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[23:16:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[23:16:51] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:28:19] *** Joins: prxq (~quassel@x4db92bd9.dyn.telefonica.de)
[23:33:22] <phoe> minion: memo for kathe: yes, I am working on clr2; thank you!
[23:33:22] <minion> Remembered. I'll tell kathe when he/she/it next speaks.
[23:40:00] <McParen> If I have a class person and slot age, is it more common to name the accessor person-age or just age? And if I have a subclass child, is it common to define an accessor for the inherited slot child-age, or should person-age be used also for child?
[23:40:39] <McParen> Are there drawbacks to naming the accessors the same way as the slots?
[23:40:48] <Bike> usually just age, and you can use the same accessor for both
[23:41:12] <Xach> McParen: i find it helps to think of the functions first, then design the classes to support the functions, not the other way around
[23:41:33] <Xach> McParen: i don't always use that style all the way through, but i do find it helps when thinking about things.
[23:41:52] <McParen> Xach: in this case, the functions are not supposed to do more than just access the slots.
[23:42:54] <Xach> McParen: the fact that it accesses a slot is an implementation detail - if i want a function that returns the age of an object, I call it AGE. And if that is a matter of accessing a slot, that makes the choice in :reader or :accessor easy - but it could just as well be computing from some other slot and some other info.
[23:43:17] <Xach> Or not using a standard object instance at all
[23:43:44] <Xach> Again, I don't always end up designing this way, but it helps me think about it more clearly
[23:47:33] <McParen> I want to access a property named "position", but that is unfortunately already named in the standard cl package, and since I do not want to break :use, I opted to add the class name to position, widget-position. So I wondered whether it is "intuitive" to add the same accessor for child classes, so that if you want to access "button-position" for example, you do not have to find out its parent class.
[23:48:01] <Bike> you don't need to add accessors. an accessor that works on a parent class works on the child as well
[23:48:54] <McParen> Bike: I know, but my question was whether this is customary in CL APIs or not, or do APIs commonly just provide the accessor for the parent.
[23:49:40] <Xach> McParen: I don't think there's any single common pattern, i have seen a lot of different styles. my preference is not to have classes be part of names like that (to the degree possible - the symbol clash is a good example of when a workaround is needed somehow)
[23:49:48] <Bike> it's not so much "customary" as "required". you are talking about defclass, right? you can't make an accessor that works on a parent and doesn't work on the child without going really out of your way
[23:50:27] <Xach> They're called "generic" functions for a reason
[23:51:36] <McParen> That I know. ;)
[23:52:16] <Bike> if you mean, do CL APIs usually expose several differently named functions that access the same slot, the answer is no
[23:52:26] <Bike> it might happen occasionally, i guess
[23:53:08] <Xach> different functions that access the same slot is really handy!
[23:53:27] <Xach> i just don't think it's done in a way just to incorporate the class hierarchy into the accessor
[23:53:34] <Bike> right
[23:53:56] <Bike> that doesn't do anything but make it more of a pain to figure out which function to use
[23:56:45] <McParen> Bike: that was essentially my question, yes. so thanks.
