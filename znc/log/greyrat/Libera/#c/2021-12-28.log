[00:03:48] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-93.cspire.com) (Read error: Connection reset by peer)
[00:04:24] <SamuelMarks> NRK[m] - There's nothing to `make install` though
[00:06:10] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:08:04] *** Joins: esselfe (~steph@user/esselfe)
[00:08:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:10:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:12:11] *** Joins: Torr (~Torr@user/torr)
[00:14:33] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[00:14:57] *** Joins: morte_ (~user@190.56.51.27)
[00:16:04] *** Quits: magla (~gelignite@55d4dfc1.access.ecotel.net) (Quit: Stay safe!)
[00:16:18] *** Joins: imp_ (~imp@192-141-191-231.alternativaip.net.br)
[00:20:05] *** Quits: imp (~imp@138.255.144.170) (Ping timeout: 256 seconds)
[00:20:07] *** imp_ is now known as imp
[00:20:09] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:20:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:20:28] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:21:12] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:24:20] *** Joins: brad_mssw|mbp (~bhouse@2601:344:4100:b490:a189:b1fe:8294:2ebe)
[00:25:44] *** Joins: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net)
[00:26:53] *** Quits: brad_mssw|mac (~bhouse@99-101-56-67.lightspeed.jcvlfl.sbcglobal.net) (Ping timeout: 256 seconds)
[00:27:19] <eoli3n__> Hi, i'm trying to build a package for void linux, the project uses meson -> https://github.com/39aldo39/Evolution-DecSync/blob/master/meson.build
[00:28:13] <eoli3n__> i'm not a c dev, so i'm trying to understand. My issue is that when i build the package, .so files produced do have absolute link for the lib file that I packaged too
[00:28:49] <eoli3n__> it seems problematic for the packager tool -> https://x0.at/7knk.txt
[00:29:18] <eoli3n__> is that related to something in the meson.build file ?
[00:29:59] <twkm> sounds like a question for a void linux channel, though perhaps ##workingset has ideas re the tools used.
[00:30:14] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:30:18] <eoli3n__> i asked in the void linux channel, without success
[00:30:50] <eoli3n__> i'm trying to get if that an issue specific to the way I build for void, or the way the project is built by the dev
[00:31:02] <eoli3n__> lets check ##workingset, thanks
[00:31:39] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[00:31:50] <dan_pena> hello, what's a good C project structure?
[00:34:50] *** Joins: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044)
[00:36:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[00:37:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:39:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[00:40:52] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[00:42:44] *** Quits: rito_ (~rito_gh@45.112.243.219) (Quit: Leaving)
[00:43:36] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[00:44:47] *** Quits: zer0bitz (~zer0bitz@185.112.82.230) (Read error: Connection reset by peer)
[00:46:21] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[00:46:25] <cousteau> dan_pena: I usually have 1 main.c file with main() and some aux functions, and then each "functional module" (bunch of related functions) on a separate .c file with a corresponding .h file
[00:46:49] <cousteau> with all functions (except main()) either static or exported to the .h
[00:47:16] <cousteau> same for file-scope variables (in that case with `extern` in the .h file)
[00:47:50] <cousteau> and then a Makefile and a README (or README.md or README.txt) with instructions.  Very important; otherwise you don't know what you're looking at.
[00:48:12] <cousteau> that's OK for small-ish projects that don't need a huge folder structure.
[00:48:55] <cousteau> bigger projects usually have a src/ data/ build/ doc/ directories (build/ is empty and only for build products)
[00:50:47] *** Joins: peaktop__ (~PEAKTOP@2a02:2168:a12:370c::1)
[00:51:11] *** Quits: PEAKTOP (~PEAKTOP@user/peaktop) (Ping timeout: 245 seconds)
[00:52:22] *** Joins: noarb (~noarb@user/noarb)
[00:54:36] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-93.cspire.com)
[00:56:31] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[00:57:27] *** Quits: Torr (~Torr@user/torr) ()
[01:04:38] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[01:10:04] <dan_pena> do you need a .h for all your .c ?
[01:10:19] <dan_pena> is it cleaner to put signatures in a .h everytime even if you don't use the .h ?
[01:10:39] <dan_pena> cousteau: ty !
[01:13:21] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:13:42] <twkm> if you make a header you should use it.
[01:16:42] <twkm> making foo.h from foo.c isn't safe by itself -- e.g., what the generator failed to run.  if foo.c #includes "foo.h" then you can be sure the things that foo.h declares or defines aren't in conflict with foo.c.  alas not perfect, just better than not using the header.
[01:17:34] *** Quits: zwr (~zwr@2804:d45:b966:fb00:393a:ffee:2e04:d088) (Ping timeout: 260 seconds)
[01:18:03] <dan_pena> twkm: also I have 2 C program, both use 5 global variables. Can I factorize that in a .h and then include it in both? I don't know if I'm clear sorry
[01:18:22] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9a15:fa56:81f7:4afc)
[01:18:34] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[01:18:36] <Dotz0cat> I have got my self into a corner. I have intoduced a way to pass infomation into a program via command line. All but one of the options is presiesnt on config reload.
[01:20:45] <Dotz0cat> I can make it presetant but I dont want to make any complicated logic.
[01:21:21] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[01:21:27] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:21:55] <Kit> wow i caused valgrind to segfault
[01:22:20] <dan_pena> x)
[01:25:07] <twkm> dan_pena: you can declare them in one or more header files, but you can only define them in a single source file each.
[01:26:23] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[01:26:36] <Dotz0cat> I found a way using else if.
[01:28:54] <dan_pena> I have functions for error management, should I put them in a utils.c and utils.h file ?
[01:28:56] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:29:17] <dan_pena> or do we use a specific name for that in general in a C project?
[01:30:41] <Kit> you can do something like errutils
[01:31:21] *** Quits: peaktop__ (~PEAKTOP@2a02:2168:a12:370c::1) (Remote host closed the connection)
[01:32:22] <dan_pena> Kit: ty
[01:32:30] *** Quits: mahmutov (~mahmutov@37.155.4.147) (Ping timeout: 260 seconds)
[01:32:52] <Kit> no
[01:32:54] <Kit> np*
[01:33:06] <Kit> dammit i cant type lol
[01:33:50] *** Quits: trampel (~trampel@2601:602:9c00:921:7115:782b:d2ca:2f9f) (Quit: Leaving)
[01:34:06] <dan_pena> XD
[01:35:06] <dan_pena> I have a node struct that I will use in multiple .c, I want to create a .h with it but I don't know how to call a file with just a simple struct
[01:37:32] <twkm> project.h, structs.h, nodeutils.h, node.h, ...
[01:37:53] *** Joins: Macuser (~Macuser@2600:1003:b441:3a96:81c4:f905:3cd5:db19)
[01:38:30] <dan_pena> twkm: so in structs.h I put all the structs ?
[01:40:12] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[01:40:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:41:34] <Dotz0cat> I always put my structs in the .h file that corasponds to the .c file I use them in. Or atleast the closest one.
[01:43:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:43:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:43:28] <Dotz0cat> For example a struct that gets used in config.c gets put in config.h if I need it in another file say in loop.c I include "config.h" in loop.h
[01:44:06] <Dotz0cat> I of course (over)use include guards
[01:44:56] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 252 seconds)
[01:45:12] *** Quits: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:46:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[02:00:05] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:00:43] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:04:57] *** Quits: Macuser (~Macuser@2600:1003:b441:3a96:81c4:f905:3cd5:db19) (Ping timeout: 240 seconds)
[02:06:37] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[02:08:54] *** Joins: Macuser (~Macuser@2600:1003:b44f:86ad:f9ed:75cc:5e1c:61d2)
[02:09:06] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Ping timeout: 245 seconds)
[02:10:47] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:15:35] <dan_pena> I'm watching linus torvalds github, and he uses 8 spaces indentation
[02:15:45] <dan_pena> I never see indentation that big xD
[02:15:50] <dan_pena> seen*
[02:17:08] <trenka> he uses tab
[02:19:18] <dan_pena> trenka: ik but my tab is only 4 spaces
[02:19:46] <dan_pena> oh I was wrong it's 8 spaces too
[02:20:18] <trenka> it's up to your setup. In the source code it's one \t
[02:20:37] <twkm> you might define all your struct's in struct.h, sure.  or you might have some struct's that relate to only one set of files, so define it only in a header for that set.
[02:21:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:24:25] <dan_pena> #include <linux/init.h> I see that on github C code, how can I do the same with my .h in my /include?
[02:24:50] <twkm> it wouldn't follow that crud.
[02:25:29] <dan_pena> twkm: so I can only do a relative path "../include/xxx.h" ?
[02:25:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[02:26:04] <twkm> you can do as you like.
[02:26:34] <dan_pena> twkm: I mean do I have another alternative to a relative path like that?
[02:26:58] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:27:49] <twkm> yes.
[02:28:24] <twkm> put them in the same directory, then no path part is needed, just #include "xxx.h"
[02:29:54] <nitrix> Relative to the current file works. It can also be relative to one of the include directories specified to your compiler.
[02:30:01] *** Quits: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net) (Ping timeout: 250 seconds)
[02:30:03] <twkm> you want headers in a different directory you might learn how your compiler can be told to look there, e.g., if they are in ./includes/ then perhaps c99 -Iincludes/ ...
[02:30:28] <nitrix> The #include preprocessor directive works in an implementation-defined manner, so you'll have to read your compiler to learn about all the variations that it supports.
[02:30:35] *** Quits: brad_mssw|mbp (~bhouse@2601:344:4100:b490:a189:b1fe:8294:2ebe) (Quit: Leaving)
[02:31:24] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[02:33:22] <dan_pena> twkm: ty !
[02:33:44] <dan_pena> twkm: could you tell me what you think about this architecture ? https://pastebin.com/XuKG82Uc
[02:33:49] *** Quits: pizdets (~pizdets@183.182.114.249) (Ping timeout: 256 seconds)
[02:34:02] *** Joins: pizdets_ (~pizdets@183.182.111.38)
[02:34:22] <nitrix> Very common.
[02:34:37] <dan_pena> nitrix: so it's not bad and wrong right ?
[02:35:09] <nitrix> I do the same. Lots of people do the same. It's fine.
[02:35:16] <dan_pena> nitrix: okey ty !
[02:36:00] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 268 seconds)
[02:36:15] <dan_pena> I'm asking because all the people that I see at university only put c file and header in the same folder and don't care about the project structure
[02:36:19] <nitrix> Abolish the good/bad classifications in your head, there's almost never such dichotomy in C.S.
[02:36:21] <dan_pena> Maybe it's not important
[02:36:56] <nitrix> As an example, my current project has client/ common/ server/ at the root, splitting the client-side, the server-side and what they share in-between them.
[02:36:58] <dan_pena> nitrix: All good projects that I found on github were well structured
[02:37:21] <dan_pena> for someone else it's complicated if everything is mixed in folders
[02:37:36] <dan_pena> to understand the structure of the code
[02:37:41] <twkm> structuring varies -- not everyone thinks the same.
[02:38:17] <dan_pena> twkm: yes I know but there is a common way I think
[02:38:32] <twkm> *shrug*
[02:38:42] <nitrix> In my case, the repository produces 2 binaries, so they're additional structure at the top level to have what you did (src/, include/) organized per executable.
[02:40:28] *** Joins: ferdna (~ferdna@user/ferdna)
[02:40:44] <nitrix> dan_pena, Here: https://ideone.com/HY0AOs
[02:43:38] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:43:56] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:45:21] <dan_pena> https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst I think that's the style that I should use in my C code ?
[02:46:25] <tdg> dan_pena: it doesn't really matter what style you pick, what matters is that you're consistent with it and ideally have tooling to apply it such as clang-format or uncrustify
[02:46:42] <nitrix> Just showcasing that you can't just have a cookie-cutter solution. Keep in mind C has no namespaces, so unless you prefix all your symbols with client_ or server_ in my case, you end up with conflicting names for concepts, things like entity, network, etc, are vastly different on the client and server.
[02:47:45] *** Quits: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:48:33] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[02:48:44] <nitrix> I imagine that a project with loadable modules with their own build targets would also take a similar approach to avoid them stepping on each others.
[02:50:48] <dan_pena> I just discover attribute reading the torvalds's doc
[02:50:50] <dan_pena> :o
[02:51:03] <dan_pena> is it really usefull ?
[02:52:03] *** Joins: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net)
[02:52:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[02:54:00] <nitrix> It's useful to some people in some scenarios, otherwise they would not have bothered implementing it, documenting it and using it.
[02:55:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:55:21] *** Quits: Akuli (~Akuli@87-94-109-79.bb.dnainternet.fi) (Quit: Akuli)
[02:56:29] <nitrix> __attribute__ isn't portable and provided only by some compilers, as is everything beginning with two underscores and a lowercase letter.
[02:56:44] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[02:59:30] <nitrix> Except perhaps __func__ that recently made it into the standard.
[02:59:53] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[03:00:42] <dan_pena> nitrix: I'm reading some doc maybe it can be interesting for me to learn more about it and use them in my project
[03:01:02] *** Joins: AmR| (~AmREiSa@156.199.202.96)
[03:01:57] <nitrix> I think you'll discover __attribute__((constructor)) or __attribute__((cleanup)) and it'll hinder your learning.
[03:02:32] *** Quits: AmR (~AmREiSa@156.207.248.243) (Ping timeout: 268 seconds)
[03:03:07] <dan_pena> XD
[03:03:35] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:04:46] <nitrix> There's a couple ones that are useful for optimization like __builtin_expect or __builtin_unreachable, but then you need to check if the compiler supports it with __has_builtin, which itself might not exists, so you need #ifndef __has_builtin \n #define __has_builtin(x) 0 \n #endif, so on.
[03:05:37] *** AmR| is now known as AmR
[03:05:46] *** Quits: AmR (~AmREiSa@156.199.202.96) (Client Quit)
[03:06:10] *** rcf is now known as NetSysEarth
[03:07:07] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[03:07:57] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[03:08:16] <twkm> quick, learn non-portable stuff!
[03:08:21] *** NetSysEarth is now known as rcf
[03:08:29] <dan_pena> int32_t should I use that or int ?
[03:08:53] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:a476:2e:c0d:5443)
[03:09:05] <dan_pena> dumb question
[03:09:06] <dan_pena> sry
[03:09:21] <nitrix> You use it when you want a signed integer to have exactly 32 bits. How often do you have such requirement?
[03:09:26] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[03:09:29] <dave0> sometimes!
[03:09:51] <caze> Use int.
[03:10:24] <dan_pena> nitrix: Yeah I have some case where I need to use int32_t I just understood it
[03:10:34] <nitrix> I'm pretty sure you don't.
[03:11:07] <nitrix> Use long if you need larger signed integers.
[03:11:07] <dan_pena> nitrix: I need
[03:11:58] <nitrix> I'm willing to bet that you don't. It's either long or uint32_t, almost never int32_t.
[03:12:01] <dan_pena> I use an int as a buffer of byte and I suppose that I have 4 byte
[03:12:18] <nitrix> int doesn't have to be 4 bytes.
[03:12:22] <dan_pena> yes uint32_t mb
[03:12:33] <nitrix> uint32_t isn't the same as int32_t.
[03:12:37] <dan_pena> yes
[03:12:41] <dan_pena> I know
[03:13:00] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:211d:e242:8bb6:e66b) (Ping timeout: 268 seconds)
[03:13:04] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:13:33] *** Quits: Munnu (~timo@81-197-121-241.elisa-laajakaista.fi) (Ping timeout: 250 seconds)
[03:14:07] <twkm> i'd use long and unsigned long for 32 bit-ish integers.
[03:14:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:15:15] <nitrix> Even for serialization, you end up doing bitwise operations to decompose the individual bytes anyway since you can't rely on the endianness of uint32_t.
[03:15:40] <dan_pena> twkm: yes but using an unsigned long assure you to have 32 bits ?
[03:16:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:16:23] <dave0> i buffered a character in an int once
[03:16:38] <nitrix> The minimum magnitude for ULONG_MAX is 4294967295, which requires 32 bits.
[03:16:49] <DarkUranium> But long is *VERY* commonly 64-bit.
[03:16:52] <DarkUranium> Why not uint_least32_t?
[03:17:03] <DarkUranium> (other than its name being a mouthful)
[03:17:08] <dan_pena> XDDDD
[03:17:11] <DarkUranium> Or, honestly: in 2021, uint32_t
[03:17:30] <twkm> but do you actually need exactly 32 bits.
[03:17:43] <DarkUranium> uint_fast32_t then.
[03:18:00] <dan_pena> twkm: yes my algorithm works with a 32 bits
[03:18:08] <dan_pena> but maybe I should change my algo
[03:18:26] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 252 seconds)
[03:18:33] <twkm> fast is annoying as there's no clear set of things it is fast at.
[03:19:54] <nitrix> I'm assuming uint_fastN_t just picks size_t for most compilers.
[03:20:05] <dave0> it's slower than typing int
[03:20:17] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[03:20:47] <caze> The only reason you might want exactly 32 bits and no more is if you have a lot of them. Like, gigabytes of them.
[03:21:42] <cousteau> This is how productive I've been this evening: https://bpa.st/NKSA
[03:21:59] <dan_pena> caze: like I said I'm using a 32 bits int as a buffer when I put 0 and 1. I need to know that I have 32 bits to know when it's full and that it's time to flush
[03:22:01] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:22:07] <nitrix> cousteau, Looks great.
[03:22:23] <dan_pena> cousteau: KEK
[03:22:27] <caze> dan_pena: How does that tell you when it's full?
[03:22:32] <nitrix> cousteau, Can you put that into a generator script?
[03:22:37] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:22:58] <twkm> sounds like you need to know only that at least 32 bits are available, not exactly 32.
[03:22:58] <dan_pena> caze: I have n iterations, at 32 I know that it's full and I can reset and continue
[03:23:18] <caze> dan_pena: But what if it was 33 bits?
[03:23:22] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:23:29] <cousteau> ┌─┐┌─┐╭─────╮╭─────╮╭─────╮╭─────╮╭─╮ ╭─╮╭────╮╭─────╮╭───╮╭─╮╭─╮╭─────╮┌─┐┌─┐
[03:23:29] <cousteau> │ ││ ││ ╶─╴ ││ ╶─╴ ││ ╭─╮ │╰┐ ┌╮ ││ │ │ ││ ╭──╯╰─┐ ┌─╯╰┐ ┌╯│ ││ ││ ╶───┤│ ││ │
[03:23:29] <cousteau> ╰─╯╰─╯│ ┌───╯│ ┌┐ ╶┤│ ╰─╯ │╭┘ └╯ ││ ╰─╯ ││ ╰──╮  │ │  ╭┘ └╮╰╮╰╯╭╯│ ╶───┤╰─╯╰─╯
[03:23:29] <cousteau>       ╰─╯    ╰─╯╰──╯╰─────╯╰─────╯╰─────╯╰────╯  ╰─╯  ╰───╯ ╰──╯ ╰─────╯
[03:23:43] <dan_pena> caze: wrong result then
[03:24:04] <cousteau> nitrix: I guess I should be able to do so
[03:24:14] <caze> dan_pena: No, you still stop at n = 32, and mask out everything but the bottom 32 bits.
[03:24:19] <nitrix> If I knew candide's plang or perl I'd add it to the bot.
[03:24:31] <dan_pena> caze: oh yes true
[03:24:34] <caze> dan_pena: It doesn't matter if it's more than 32 bits.
[03:24:44] <dan_pena> but I still need 32 minimum
[03:25:02] <caze> dan_pena: And it's often beneficial to allow it to be, if that's what the compiler would choose if you allowed it.
[03:25:30] <caze> dan_pena: unsigned long int is _required_ to be at least 32 bits.
[03:25:45] <dan_pena> caze: okey
[03:25:51] <cousteau> also, I thought this was the offtopic channel, oops
[03:26:05] <dan_pena> caze: thank you my friend
[03:26:12] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:26:24] <caze> dan_pena: I was only repeating what many others had already said.
[03:26:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[03:27:09] <cousteau> nitrix: I think fastN_t tends to be int
[03:27:53] <cousteau> ,cc printf("%zu", CHAR_BIT * sizeof (uint_fast8_t))
[03:27:56] <candide> cousteau: 8
[03:28:02] <cousteau> oh
[03:28:21] <cousteau> well now that was unexpected
[03:28:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:28:26] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[03:28:31] <dave0> that's quite fast
[03:28:47] <cousteau> ,cc printf("%zu", CHAR_BIT * sizeof (uint_fast16_t))
[03:28:50] <candide> cousteau: 64
[03:28:58] <cousteau> uh
[03:29:10] <cousteau> ,cc printf("%zu", CHAR_BIT * sizeof (uint_fast32_t))
[03:29:13] <candide> cousteau: 64
[03:29:23] <cousteau> guess nitrix was right
[03:29:46] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:30:08] <cousteau> except that for char-sized it just gets a byte because it's even faster to address, more compact, and about as fast to extract (no masking needed)
[03:30:30] <cousteau> (it's faster to address a byte array than an int array)
[03:32:02] *** Quits: concrete-houses (~g@209.6.150.53) (Ping timeout: 240 seconds)
[03:32:18] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:32:51] *** Quits: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net) (Ping timeout: 250 seconds)
[03:33:13] <dave0> ,8ball is it faster to address a byte array than an int array?
[03:33:16] <twkm> tested one compiler ... "most".
[03:33:22] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[03:33:26] <candide> d​ave0, Not likely!
[03:33:35] <dave0> the robot has spoken
[03:34:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:37:31] <cousteau> well, maybe ask your robot how does it manage to multiply and add in a single instruction...
[03:37:46] <cousteau> RISC-V only introduced special instructions for that very recently
[03:38:42] <twkm> that sounds reduced.
[03:39:27] <pragma-> ,factshow is
[03:39:27] <candide> [global] is: /call 8ball
[03:39:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4) (Quit: Quit)
[03:39:38] *** Joins: ketiv (~ketiv@92.40.199.121.threembb.co.uk)
[03:39:43] * cousteau looks up the CISC-V instruction set
[03:39:48] <pragma-> dave0: you can just directly ask the bot questions. is, how, what, why, etc, are all aliased to `8ball` :)
[03:40:00] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[03:40:01] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:40:12] <cousteau> candide: is what pragma- said true?
[03:40:24] <candide> c​ousteau, I'm not sure, let me check.
[03:40:31] <cousteau> ok take your time
[03:40:54] <dave0> candide: should i invest in bitcoin?
[03:41:09] <candide> dave0: My advice is to do it.
[03:41:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:41:14] <dave0> nice :-)
[03:41:47] <apotheon> candide: Is it faster to address a byte array than an int array?
[03:41:52] <apotheon> hmm
[03:41:55] <candide> a​potheon, Most assuredly.
[03:41:56] * cousteau is still embarrassed that he pasted the stupid Unicode Art message here thinking this was the offtopic channel  m(
[03:41:58] <apotheon> there we go
[03:42:55] <cousteau> but yeah it kinda makes sense that the fastest type is bytes, because addressing, and then words, because no masking needed
[03:43:22] <cousteau> they probably designed the ABI this way without even looking too much into the ISA
[03:43:22] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-93.cspire.com) (Read error: Connection reset by peer)
[03:43:45] <apotheon> "no masking needed"
[03:43:49] <apotheon> triggering words
[03:43:59] <pragma-> bloody anti-maskers
[03:44:04] <cousteau> god
[03:44:08] <cousteau> that was awful
[03:44:19] <cousteau> I mean it was brilliant, but it was also awful
[03:44:25] <apotheon> thank you
[03:46:27] <apotheon> The best thing about it is that I didn't express an intelligible opinion.
[03:47:07] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[03:48:03] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[03:50:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:50:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:50:25] *** Joins: wroathe (~wroathe@user/wroathe)
[03:50:25] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[03:51:30] *** Joins: morte_ (~user@190.56.51.27)
[03:52:04] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[03:55:25] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[03:59:54] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-93.cspire.com)
[04:00:34] *** Joins: shivesh (~shivesh@user/shivesh)
[04:00:37] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[04:02:58] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[04:03:21] *** Quits: ketiv (~ketiv@92.40.199.121.threembb.co.uk) (Ping timeout: 256 seconds)
[04:03:22] *** Joins: morte_ (~user@190.56.51.27)
[04:06:03] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:06:04] *** Quits: Macuser (~Macuser@2600:1003:b44f:86ad:f9ed:75cc:5e1c:61d2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:09:49] *** Joins: ketiv (~ketiv@92.40.195.115.threembb.co.uk)
[04:12:07] *** Joins: ffguest (~ff@23.106.39.150)
[04:12:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4)
[04:14:04] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 268 seconds)
[04:18:21] *** Quits: ffguest (~ff@23.106.39.150) (Quit: Igloo IRC: https://iglooirc.com)
[04:18:41] *** Joins: Macuser (~Macuser@202.sub-174-206-65.myvzw.com)
[04:22:26] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[04:26:01] *** Joins: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net)
[04:26:03] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[04:26:26] *** Joins: morte_ (~user@190.56.51.27)
[04:26:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[04:28:46] *** Joins: graywolf (~wolf@user/graywolf)
[04:30:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:32:53] *** Joins: Wulf (~Wulf@user/wulf)
[04:34:09] <tk> ,kick nf test
[04:34:09] *** ChanServ sets mode: +o candide
[04:34:10] *** nf was kicked by candide (test)
[04:34:12] <tk> thanks nf
[04:34:14] *** Joins: nf (~n@monade.li)
[04:34:16] <nf> OI
[04:34:22] <tk> thanks nf
[04:34:25] <nf> np
[04:34:29] <tk> it works
[04:39:04] *** Quits: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001) (Quit: WeeChat 3.2)
[04:39:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:39:40] *** Joins: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001)
[04:40:18] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:45:24] <apotheon> ,kick tk test
[04:45:27] <apotheon> hmph
[04:45:33] <pnbeast> ,insult apotheon
[04:45:34] <candide> apotheon: You're so stupid, you think a quarterback is a refund.
[04:45:54] <apotheon> pnbeast: You're so stupid you think Nickelback is a band.
[04:46:12] <pnbeast> There is no band after N'Sync.
[04:47:01] <apotheon> This is where I just back away slowly, with no sudden moves.
[04:47:27] * pnbeast sits contentedly in the middle of the field, smiling blankly.
[04:48:43] <pony> haha Nickelback
[04:48:46] <pony> that shit is so terrible
[04:49:12] *** Joins: useretailz (~useretail@31.41.69.140)
[04:49:51] <useretailz> whats the logic behind it: const char *path = NULL; path = (argc > 0)? *argv : "/dev/stdin";
[04:51:04] <dave0> useretailz: looks like if the user supplied a path, use it (*argv), otherwise use /dev/stdin
[04:51:13] <apotheon> yep
[04:51:17] <apotheon> looks that way to me, too
[04:51:29] <dave0> *argv == argv[0]
[04:51:35] <apotheon> Whether it works depends on what other code provides its context.
[04:52:36] *** Joins: frost (~frost@user/frost)
[04:52:59] <nitrix> const char *path = argc ? argv[0] : "/dev/stdin";
[04:54:12] <useretailz> but the value of argv[0] is name of executable
[04:54:55] <useretailz> am i right?
[04:56:51] <nitrix> Removed the NULL initialization, the gt zero check on argc (it's always non-negative), the unnecessary parens and using argv like an array.
[04:56:59] <dave0> useretailz: yes, but there's nothing stopping you from changing argv ... it's just another variable
[04:57:24] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[04:57:31] <useretailz> the code above somehow gets the last argument
[04:57:49] <fizzie> Then likely they've incremented `argv` (and decremented `argc`) before that line.
[04:58:49] <dave0> especially if it uses getopt, look for    argv += optind; argc -= optind;    which skips command line options.. then argv[0 ... argc-1] are the rest of the arguments
[04:58:49] <useretailz> fizzie, correct
[04:58:50] <caze> main(argc - 1, argv + 1);
[04:59:39] *** Joins: malloy (~jimery@116.30.221.255)
[04:59:57] <nitrix> For the example of manually changing argv, you can launch processes yourself: char *args[] = { "foobar", NULL }; execv("./a.out", args);
[05:00:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:00:49] <useretailz> how can i extend that to add another argument? like this: ./a.out [options] [path] [newarg]
[05:01:23] <fizzie> `const char *newarg = argc > 1 ? argv[1] : "default";` (for example)
[05:02:02] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[05:02:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[05:03:25] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:05:18] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[05:07:04] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[05:08:59] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 252 seconds)
[05:09:43] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:13:18] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[05:13:33] *** Joins: morte_ (~user@190.56.51.27)
[05:15:29] <nitrix> Without parsing flags, that approach gives you always lenghtening combinations for the arguments. No path, `[path]` alone, `[path] [newarg]` together and so on.
[05:16:38] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:16:40] *** Joins: frost (~frost@user/frost)
[05:17:06] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:21:01] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[05:21:56] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:23:24] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:24:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[05:32:37] *** Joins: dead1 (~dead1@user/dead1)
[05:34:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[05:36:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[05:37:45] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[05:39:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:42:57] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[05:42:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:43:39] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[05:44:19] *** Joins: fe23 (~fe23@2409:8a34:468:10c0:6cce:ecd3:748e:6c5c)
[05:45:36] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:46:11] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 245 seconds)
[05:52:50] *** Joins: et09 (~et09@user/et09)
[05:53:38] *** Quits: Macuser (~Macuser@202.sub-174-206-65.myvzw.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:53:55] <et09> if im targetting linux only, and i want to basically read a json file into memory as char[], i basically want to feed st_size from fstat into malloc, no?
[05:55:15] <et09> trying to really sus out why there's a convention towards reading line by line
[05:57:29] *** Joins: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net)
[05:57:42] <et09> i mention json because all i want to do is pass it to cjson
[05:58:17] <wroathe> et09: It depends on the context, and what you're parsing. It's perfectly reasonable to want to read an entire JSON file into memory first before moving on to parsing.
[05:58:32] <et09> max 2, 3kb
[05:58:44] <et09> a config file for the program
[05:59:21] <wroathe> In the past memory was at a premium, and so it was important to write languages that could be parsed line by line
[05:59:43] <danielcamiel> you can grow the array using realloc, so you don't have to know the size in advance, you just keep reading then growing until you reach the end of the file
[05:59:51] <danielcamiel> or an error occurs
[06:00:05] <et09> yeah, that just seems complicated versus just grabbing the size and allocating it
[06:00:20] <wroathe> Yup, I'm giving you permission to do that :)
[06:01:49] <wroathe> et09: That said, if you know what the upper bound is going to be, you could just automatically allocate your array
[06:01:59] <et09> so here's the weird thing
[06:02:06] <et09> and yeah im a slight c noob here
[06:02:24] <et09> when i do char configStr[st.st_size] (via stat(cfg_path, &st); )
[06:02:32] <et09> versus just char configStr[10000]
[06:02:52] <et09> when i render the text out via sdl/SDL_ttf, i get that "char not found" box at the beginning
[06:03:05] <et09> []{"hello": 25} versus just {"hello": 25}
[06:04:17] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:04:29] <et09> (and yeah the end goal isn't to render the config, but it tells me i'm doing something fishy)
[06:05:00] <et09> https://gist.github.com/djvs/31e96c7afc0ac1b9db90009d9372df9c
[06:08:18] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:12:50] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[06:18:47] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[06:21:38] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[06:21:38] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-93.cspire.com) (Read error: Connection reset by peer)
[06:21:51] *** Joins: morte_ (~user@190.56.51.27)
[06:23:19] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d)
[06:29:52] *** Quits: morte_ (~user@190.56.51.27) (Remote host closed the connection)
[06:30:16] *** Joins: morte_ (~user@190.56.51.27)
[06:30:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[06:32:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:33:04] <fizzie> It's not initialized, so the initial contents are unspecified. You can't just start strcat'ing onto it.
[06:33:36] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:34:15] *** candide sets mode: -o candide
[06:34:17] <fizzie> (st_size will also not include space for the extra byte for the '\0' a string needs at the end to be a string.)
[06:34:47] *** Joins: Crescendo (~Crescendo@user/crescendo)
[06:35:56] <fizzie> If you're planning to allocate space for the entire file at once, chances are you'll also want to read it with `fread` rather than line by line.
[06:36:56] <fizzie> (After all, no need to have an arbitrary 100-character line length limit when you don't have to.)
[06:37:07] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 268 seconds)
[06:38:28] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[06:40:38] <et09> gotcha
[06:41:03] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:43:56] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Remote host closed the connection)
[06:45:19] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[06:45:29] <Kit> does anybody know if its possible to have a process share data with another process if the two processes arent parent/child, and if so, how?
[06:48:01] <Kit> i want to have a database using sqlite loaded and everything so that when a new process wants to access said db it doesnt have to re-load it and everything (speed is extremely crucial in this context as its running on an over 20 year old pc multiple times a second)
[06:48:47] <et09> fizzie: like this? https://gist.github.com/djvs/6fb59e6cf9396de90d2eaad5bd59c9bf
[06:48:48] <candide> Title of et09's link: whatever.c · GitHub
[06:49:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:49:52] <Kit> also i dont want to use files because that defeats the whole point doesnt it
[06:50:53] *** Joins: bdax_ (~tom@05432be4.skybroadband.com)
[06:52:00] *** Quits: bdax_ (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[06:52:27] *** Joins: bdax_ (~tom@05432be4.skybroadband.com)
[06:52:47] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:35] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:00:58] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[07:02:11] *** Joins: morte_ (~user@190.56.51.27)
[07:06:11] *** Quits: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com) (Quit: leaving)
[07:07:19] <Xgc> Kit: Try looking at shared memory usage.  man shmget
[07:10:28] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:12:52] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[07:12:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:13:11] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[07:13:15] *** Joins: morte_ (~user@190.56.51.27)
[07:16:34] *** Joins: Crescendo (~Crescendo@user/crescendo)
[07:17:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:18:28] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:18:30] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:19:25] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 256 seconds)
[07:22:05] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:22:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:26:47] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:27:34] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:28:00] *** Quits: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:31:09] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[07:31:33] *** Joins: morte_ (~user@190.56.51.27)
[07:31:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:32:27] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:33:42] *** Joins: oxfuxxx (~oxfuxxx@195.200.221.149)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:11] *** Quits: moog (~moog@107.126.53.93) (Remote host closed the connection)
[07:37:28] *** Joins: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net)
[07:37:57] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 240 seconds)
[07:40:30] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[07:41:17] *** Quits: Jong (~Jong@2620:10d:c090:400::5:da53) (Ping timeout: 240 seconds)
[07:42:37] *** Quits: ckdCreations (~ckdCreati@2607:fb90:b27f:ff2:dc32:a7c3:ccb:5ae6) (Ping timeout: 240 seconds)
[07:44:22] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[07:44:46] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:47:37] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:49:27] *** Quits: bdax_ (~tom@05432be4.skybroadband.com) (Ping timeout: 256 seconds)
[07:49:32] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[07:50:27] *** Joins: concrete-houses (~g@209.6.150.53)
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:51:20] <concrete-houses> I wonder if given same monthy budget could c programmers outdo all the devops java .net goombahz and use flat files like baker said
[07:51:32] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[07:51:44] <omegatron> what?
[07:52:10] <omegatron> "flat files" ?
[07:55:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:58:06] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:58:38] *** Joins: srwm^ (~srwm@207.5.54.6)
[07:58:45] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[08:00:12] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[08:00:43] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:04:07] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au)
[08:06:28] <|smlckz|> ,cc int a = 5; printf("%d", a++ * a++);
[08:06:30] <candide> |smlckz|: [warning: operation on 'a' may be undefined [-Wsequence-point]] 30
[08:07:01] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:07:03] <|smlckz|> hmn
[08:07:30] <dave0> i'm surprised it printed anything instead of crashing
[08:07:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[08:09:39] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[08:09:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:f129:8ed3:b1ff:82ed) (Ping timeout: 240 seconds)
[08:10:02] *** Joins: morte_ (~user@190.56.51.27)
[08:12:50] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:14:27] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d) (Quit: Konversation terminated!)
[08:17:42] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[08:18:01] *** Joins: morte_ (~user@190.56.51.27)
[08:22:20] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[08:22:30] *** Joins: imp_ (~imp@192-141-191-236.alternativaip.net.br)
[08:22:44] *** Joins: morte_ (~user@190.56.51.27)
[08:23:49] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Ping timeout: 240 seconds)
[08:23:49] *** imp_ is now known as imp
[08:23:59] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[08:33:22] *** Joins: mkv (~znc@ubuntu/member/m4v)
[08:33:37] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[08:33:37] *** mkv is now known as m4v
[08:35:04] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:39:15] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[08:39:30] *** Joins: morte_ (~user@190.56.51.27)
[08:42:20] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Read error: Connection reset by peer)
[08:42:30] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[08:43:27] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Remote host closed the connection)
[08:44:51] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[08:44:51] *** Joins: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[08:45:12] <NRK[m]> i dont think that'd crash, you'll get different results depending on the compiler ofc
[08:45:21] <NRK[m]> ,clang int a = 5; printf("%d", a++ * a++);
[08:45:24] <candide> NRK[m]: [warning: multiple unsequenced modifications to 'a' [-Wunsequenced]] 30
[08:46:18] <NRK[m]> oh, wait those are both postfix
[08:46:32] <NRK[m]> ,clang int a = 5; printf("%d", a++ * ++a);
[08:46:35] <candide> NRK[m]: [warning: multiple unsequenced modifications to 'a' [-Wunsequenced]] 35
[08:46:55] <NRK[m]> ,gcc int a = 5; printf("%d", a++ * ++a);
[08:46:58] <candide> NRK[m]: [warning: operation on 'a' may be undefined [-Wsequence-point]] 35
[08:47:15] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-27-213.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[08:47:39] <NRK[m]> hmm, i remember gcc and clang used to give different results on this type of stuff.
[08:47:46] <NRK[m]> well whatever, UB anyways
[08:48:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:50:44] *** Quits: morte_ (~user@190.56.51.27) (Read error: Connection reset by peer)
[08:51:09] *** Quits: anton (anton@user/anton) (Quit: anton)
[08:54:52] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[08:56:49] *** Joins: malloy (~jimery@116.30.221.255)
[08:59:59] *** Quits: critr (~critr@user/critr) (Quit: .)
[09:04:51] *** Quits: soapsudsxx (~soapsudsx@209.221.40.139) (Remote host closed the connection)
[09:05:54] *** Joins: wroathe (~wroathe@user/wroathe)
[09:07:03] <caze> It doesn't matter if they're both postfix.
[09:07:17] <caze> ,cc int a = 0; a = a++;
[09:07:20] <candide> caze: [warning: operation on 'a' may be undefined [-Wsequence-point]] no output: a = 0
[09:07:29] <caze> There's just a single postfix.
[09:10:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 252 seconds)
[09:10:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:13:21] *** Joins: kdc (~kdc@196.211.197.159)
[09:14:31] <concrete-houses> https://pastebin.com/E2pMnKVG
[09:15:09] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:15:58] <|smlckz|> ''Unspecified behavior --- behavior, for a correct program construct and correct data, for which the Standard imposes no requirements.'' so, what is the difference of this with undefined behaviour?
[09:17:01] <|smlckz|> i mean, in case of unspecified behaviour, how wrong things can go? what is the limit?
[09:17:48] <pony> end of the world
[09:18:02] *** Quits: ketiv (~ketiv@92.40.195.115.threembb.co.uk) (Ping timeout: 240 seconds)
[09:18:16] <pony> (depending on where your code is running)
[09:19:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:19:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Client Quit)
[09:20:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:20:59] <|smlckz|> hmm?
[09:21:32] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:21:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:22:42] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:24:35] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:24:57] *** Joins: bindu (~bindu@user/bindu)
[09:30:05] *** Joins: kapil (~kapil@okweb.co.in)
[09:35:47] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:36:45] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:37:57] *** Quits: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[09:41:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[09:42:26] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:42:39] *** Joins: badsektor (~badsektor@user/badsektor)
[09:43:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:47:59] <ldlework> How can I create a macro like DEFINE_BITMASK_FAMILY(SOME_PREFIX, FOO, BAR, BAZ) and get a series of defines like #define SOME_PREFIX_FOO 1, #define SOME_PREFIX_BAR 2, #define SOME_PREFIX_BAZ 4 and so on
[09:49:06] *** Joins: gco (~gco@2601:647:4c80:2424:1fa:653f:e73:1ffa)
[09:50:18] <ldlework> maybe not easily possible I guess
[09:52:02] <nitrix> Not at all possible. You cannot have your #define expansion based on your previous function-like #define macro.
[09:52:35] <nitrix> However, you can have an enum created by the preprocessor if you creative. See X-macros.
[09:54:28] <NRK[m]> caze: im aware. I was referring to gcc and clang producing same result
[09:55:08] <NRK[m]> when i remember they used to produce different results on something similar.
[09:55:34] <NRK[m]> but, as i said, it's UB anyways. so doesn't matter.
[09:55:36] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d)
[09:57:29] *** Joins: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[09:58:01] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[09:58:50] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[09:59:17] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[10:00:32] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:01:35] *** Quits: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net) (Remote host closed the connection)
[10:01:35] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Read error: Connection reset by peer)
[10:02:58] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[10:05:23] *** Quits: oxfuxxx (~oxfuxxx@195.200.221.149) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[10:06:15] *** Joins: mikess (~sam@user/mikess)
[10:08:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:12:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[10:16:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[10:18:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:21:54] <caze> |smlckz|: Where did you find that definition for unspecified behavior?
[10:22:03] *** Quits: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[10:22:55] <caze> |smlckz|: It is not correct.
[10:22:59] *** Joins: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[10:23:27] *** Parts: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Parted!)
[10:24:14] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[10:25:02] <|smlckz|> ,c99 3.4.4
[10:25:03] <candide> http://www.iso-9899.info/n1256.html#3.4.4 [Terms, definitions, and symbols] 1 unspecified behavior use of an unspecified value, or other behavior where this International Standard provides two or more possibilities and imposes no further requirements on which is chosen in any instance 2 EXAMPLE An example of unspecified behavior is the order in which the arguments to a function are evaluated.
[10:26:00] <|smlckz|> ,c89 1.6
[10:26:00] <candide> C89/C90 draft: http://port70.net/~nsz/c/c89/c89-draft.html or http://flash-gordon.me.uk/ansi.c.txt or http://web.archive.org/web/20050207005628/http://dev.unicals.com/papers/c89-draft.html - C Overview: http://en.wikipedia.org/wiki/C_programming
[10:26:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:27:43] <|smlckz|> caze: i found that definition in the port70.net link..
[10:30:48] <caze> |smlckz|: The definition has been updated since.
[10:31:21] <rcf> |smlckz|: Make note of the “provides two or more possibilities”
[10:31:31] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[10:33:07] <rcf> |smlckz|: the implementation will pick an option and behave consistently otherwise. UB is when not only are no possibilities provided, but every other guarantee of every other part of the standard for every part of the program ceases to apply.
[10:33:51] <|smlckz|> hmm
[10:34:47] <caze> |smlckz|: https://ideone.com/MJMVzj it's unspecified it the program outputs "fg" or "gf", but it must be one or the other. It can't be anything else.
[10:34:59] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[10:35:35] <|smlckz|> by the way, can a compiler refuse to compile a program containing undefined behaviour?
[10:36:08] <caze> Yes.
[10:39:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[10:39:29] <rcf> |smlckz|: the key feature of undefined behavior is that the compiler may continue to produce a program which it knows to be meaningless, rather than enforce constraints.
[10:40:28] <rcf> Those of us less enthused with the idea would argue that it should be required to refuse to continue.
[10:43:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:48:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[10:52:03] *** Joins: ztx (~ztx@user/ztx)
[10:53:20] <dave0> exit(0); is too much of a burden
[10:56:53] *** Joins: mark_infinite (~skynet@ppp-94-66-136-135.home.otenet.gr)
[11:00:12] *** Joins: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr)
[11:01:06] *** Joins: johnjaye (~pi@154.6.152.74)
[11:01:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:01:31] <johnjaye> the wiki has list of great books for C. But what are good books for C _libraries_ and such?
[11:01:47] <johnjaye> like pthreads or sockets or regexp or....
[11:02:36] <pnbeast> johnjaye, libraries like those?  Probably a book for your OS.  Those aren't C libraries, as such, they're libraries in C for doing useful things.
[11:02:49] <johnjaye> yes precisely
[11:04:06] <supakeen> I've enjoyed The Linux Programming Interface by Michael Kerrisk.
[11:04:21] <supakeen> Depending on which libraries or interface you're interested in it's a good book.
[11:05:04] <johnjaye> Length: 1553 pages
[11:05:14] <johnjaye> it must be good if you're praising such a long book
[11:05:15] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Quit: Leaving)
[11:05:59] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[11:06:05] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[11:06:14] <pingpongball> when compiling from source, is there any way to see only warning ,
[11:06:19] <supakeen> It's well maintained (rare for a book), good insights into the kernel and assorted things going on there.
[11:06:34] <supakeen> The author still keeps a page with all the diffs between the kernel it was written for and the current kernels :)
[11:06:55] <johnjaye> i see
[11:07:14] <johnjaye> yeah that is a big challenge of writing a programming related book. they go back so quickly
[11:07:36] <pnbeast> That's probably the standard reference for Linux, per se, while the Stevens books are a little more general, APUE and his networking books are good for *nix and some network programming.
[11:07:56] <johnjaye> er go bad
[11:08:30] <johnjaye> ironically a dead language like pascal or something is the best to use for teaching in that sense
[11:08:45] <johnjaye> or at least some kind of simplified subset of a general purpose language
[11:08:59] <tsujp> Is it possible to have a C source file which uses a header that is written in CPP and then compile such that the CPP header + CPP source that implements that header is compiled, and then linked against _my_ C source file?
[11:09:18] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f0a6)
[11:12:25] <rcf> tsujp: if you only use the common subset of C++ and C in a common header file, and declare everything as extern "C" for the C++ implementation, you can do this.
[11:12:44] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:12:50] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:12:55] <rcf> But it's really a C++ matter as for how you'd go about making that work.
[11:13:33] <markand> johnjaye, first I advise to keep that bookmark forever: https://pubs.opengroup.org/onlinepubs/9699919799/
[11:13:35] <candide> Title of markand's link: The Open Group Base Specifications Issue 7, 2018 edition
[11:14:03] <markand> and about external libraries, you can also check this: https://github.com/oz123/awesome-c
[11:14:05] <candide> Title of markand's link: GitHub - oz123/awesome-c: A curated list of awesome C frameworks, libraries, resources and other shiny things. Inspired by all the other awesome-... projects out there.
[11:14:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[11:16:06] <tsujp> So I should ask in the c++ channel how to do this or you know how to do this (via CMake)?
[11:16:09] <tsujp> rcf
[11:16:17] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[11:16:41] <johnjaye> ah nice markand thanks
[11:17:06] <pingpongball> c
[11:17:08] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[11:17:09] <markand> tsujp, you can mix C++ and C in an application
[11:17:09] <johnjaye> i vaguely had an inkling a lot of practical stuff like networking is not part of the C standard
[11:17:35] <markand> you can call C++ functions as long as they are exported through extern "C" blocks (in fact, zeromq is written in C++ but has a public C API)
[11:17:36] <johnjaye> i assume a lot of it is berkeley/bsd or specified by poseeks
[11:17:38] <sham1> Well how much portability would you get for C3x (so in the future) networking
[11:18:12] <sham1> I mean, we saw what happened with threads that no one wanted to implement them. Now imagine that situation but with networking
[11:18:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:18:15] <rcf> tsujp: the build system would be mostly immaterial. The key is to make sure that your C++ code is exposing extern "C" APIs for your C code's consumption.
[11:18:44] <sham1> Although it might mean that one could get neat stuff like asynchronous IO in the C standard which would be neat. Do a select/poll/whatever-platform-specific on FILE handles
[11:18:45] <markand> and threads are still not widely implemented, macOS own libc has thread_local and atomics but still no C11 thread API
[11:19:18] *** Joins: mrig (~mrig@user/mrig)
[11:19:24] <johnjaye> clang doesn't support all of C11? i thought apple was the main backer of clang
[11:19:45] <rcf> johnjaye: clang supports it just fine, it's the macOS libc that doesn't
[11:20:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[11:20:13] <johnjaye> that's very paradoxical. lol. wouldn't it be easier for the libc than for the complier to support it?
[11:20:14] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[11:20:20] <rcf> I mean in theory, maybe.
[11:20:28] <johnjaye> also compiler
[11:20:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:20:34] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Remote host closed the connection)
[11:20:44] <rcf> But the problem is that pthreads are so widespread and entrenched in existing code that there's little incentive to put in the work
[11:20:52] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[11:21:03] <markand> the compiler has not that much things to support, some new keywords and anonymous structs/union, all other stuff is mostly purely libc
[11:21:19] <johnjaye> ah yes. the first to market effect
[11:21:22] <markand> and macOS libc is implemented by apple developers, while C syntax is implemented by LLVM developers
[11:21:35] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Remote host closed the connection)
[11:21:41] <tsujp> rcf time to start digging through the microsoft windows sdk headers and seeing which one's are or aren't.. at this point I wonder if it'd be easier to just use C++... but I don't want to because it's gross
[11:21:43] <markand> and folks at Apple spends more time bloating the OS rather than fullfilling POSIX/C11 requirements
[11:21:49] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[11:21:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:22:00] <markand> even the struct stat is incomplete
[11:22:33] <johnjaye> i will gladly thank apple for letting me rebind the Fn and ctrl keys under the Keybords menu in the control panel
[11:22:36] <sham1> Well apple wants you to use Obj-C or Switft
[11:22:48] <markand> s/Obj-C or /
[11:22:49] <sham1> Of course they wouldn't care about C
[11:22:53] <sham1> Well fair
[11:23:10] <markand> they are definitely killing obj-c right now (some new frameworks are swift only)
[11:23:28] <markand> the most useless language ever made TBH
[11:24:20] <johnjaye> was it better organized than c++ at least
[11:24:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:24:32] <johnjaye> or the same and thus worse since it was apple only
[11:24:33] <rcf> Yes, but that's not really saying much
[11:24:50] *** Joins: smoke (~smoke@user/smoke)
[11:26:34] *** Quits: et09 (~et09@user/et09) (Ping timeout: 260 seconds)
[11:27:57] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.39)
[11:31:07] *** Quits: gco (~gco@2601:647:4c80:2424:1fa:653f:e73:1ffa) (Quit: ZZZzzz…)
[11:31:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:31:37] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[11:31:50] <johnjaye> idk why but it seems like all languages are trying to be c++
[11:32:01] <johnjaye> at least the big ones. like take C but add objects and "stuff" to it
[11:32:28] <johnjaye> go seems to be the best in that it's closer to C and doesn't have objects
[11:32:29] *** Joins: oxfuxxx (~oxfuxxx@178.238.11.181)
[11:33:43] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:35:19] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[11:36:49] *** Quits: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[11:37:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:37:57] *** Joins: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net)
[11:38:36] <Jong> Hi.  In a comment in source code, there's a link of where to download a dataset. The link has changed and so I'm updating the comment.  Would you commit this directly to master? Or would you make a branch, make a pr, and request review? A PR + review for this is absurd to me.  But I don't know what the majority culture is these days in the software community
[11:39:16] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:39:45] <nitrix> Maybe someone knows of a better resource to link to. A more normative document. A standard somewhere. Maybe there's an internal mirror for these things that prevents them being lost to time.
[11:39:52] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:40:02] <nitrix> Maybe they'll want the document in the repository. Either way, it opens up the conversation.
[11:40:28] <nitrix> If you can commit directly to master without any peer review, your company has serious issues.
[11:40:35] <nitrix> That's not engineering, that's malpractice.
[11:40:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4) (Quit: Quit)
[11:41:08] <Jong> sheesh, I'm glad I asked my question, because your response caught me off guard
[11:41:18] <Jong> nitrix  well the link in the comment is broken
[11:41:35] <Jong> nitrix  so discussion or not, might as well update it to a link that actually works
[11:41:51] <johnjaye> sometimes links are saved in archive.org and you can use that instead
[11:44:02] <Jong> I wish I could get a vote. I'm curious what % of coders are on nitrix's side and feel as he does
[11:44:48] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:45:08] <johnjaye> i would say if you're going to link to something it should be more general which hopefully persists longer
[11:45:22] <johnjaye> but linkrot is real
[11:45:57] <johnjaye> i wonder if there's a way to request archive.org to save a link for you
[11:46:01] <johnjaye> or like prioritize archiving it
[11:47:11] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[11:47:35] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8352:571e:4c5b:4bff:5de3:55a6)
[11:48:37] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:48:56] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:49:26] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[11:50:54] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[11:51:41] <Inline> ls
[11:51:44] <Inline> uups
[11:51:47] <Inline> sorry
[11:51:50] <tsujp> rcf so this header is quite big (1k lines) and has a lot of C++ only stuff like templates and what not. None of it is `extern "C"` is there a simple way to make it so beyond copy pasting that in everwhere?
[11:51:57] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Ping timeout: 240 seconds)
[11:52:07] <tsujp> or is there LIBFFI but instead of calling C, calling C++ from C?
[11:52:07] <rcf> In that case you are out of luck.
[11:52:29] *** Joins: agonhajdari (~textual@user/agonhajdari)
[11:52:38] <johnjaye> it's due to name mangling right?
[11:52:48] <johnjaye> every time you compile and link the functions get new names in C++
[11:54:09] <rcf> If the interface is entirely designed around C++ features, it's a lost cause -- you'll need to write a wrapper library or use some FFI library maybe, but you will not be able to make use of that header.
[11:54:34] <tsujp> argh I hate this, windows sucks
[11:54:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:55:51] *** Joins: dan_pena (~dan_pena@125-239.80-90.static-ip.oleane.fr)
[11:56:12] <dan_pena> if I have string in my C program should I write them hardly in the C code?
[11:56:32] <dan_pena> Or should I use gettext?
[11:56:59] <dan_pena> (strings for errors and so on)
[12:01:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:01:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:01:03] *** Joins: wroathe (~wroathe@user/wroathe)
[12:01:17] *** Quits: fe23 (~fe23@2409:8a34:468:10c0:6cce:ecd3:748e:6c5c) (Ping timeout: 240 seconds)
[12:02:46] *** Joins: Akiva (~Akiva@user/Akiva)
[12:02:57] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[12:02:58] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 260 seconds)
[12:05:10] *** Quits: oxfuxxx (~oxfuxxx@178.238.11.181) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[12:05:28] *** Joins: oxfuxxx (~oxfuxxx@178.238.11.181)
[12:05:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[12:08:10] *** Quits: oxfuxxx (~oxfuxxx@178.238.11.181) (Remote host closed the connection)
[12:08:57] *** Joins: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net)
[12:08:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:10:25] <caze> How would you have string in your C program but hardly in the C code?
[12:11:35] <supakeen> They probably mean hard coded vs localized but like, that requirement is up to yourself :)
[12:11:48] <supakeen> I prefer errors to not be translated to my native language.
[12:11:59] *** Joins: oxfuxxx (~oxfuxxx@178.238.11.181)
[12:11:59] <supakeen> (as I'll get bug reports and have to look at the translations)
[12:12:55] <dan_pena> supakeen: yes that's what I meant
[12:13:42] *** Quits: oxfuxxx (~oxfuxxx@178.238.11.181) (Remote host closed the connection)
[12:15:00] <supakeen> Error path should be as reliable as possible with as few steps as possible lest you introduce external dependencies into it.
[12:15:05] <supakeen> But perhaps that's a bit of a strong opinion.
[12:18:30] *** Joins: ketiv (~ketiv@92.40.194.226.threembb.co.uk)
[12:18:49] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[12:19:25] <kurahaupo_> It's worth creating a table of error codes, that preface each error text regardless of any translations. Then you can just look up the error code without needing to translate the text
[12:19:45] *** Joins: oxfuxxx (~oxfuxxx@178.238.11.181)
[12:21:14] <dan_pena> kurahaupo_: table of error codes?
[12:21:25] <dan_pena> you mean in another file, or I create an array in a .h?
[12:21:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:22:27] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.39) (Ping timeout: 268 seconds)
[12:23:13] <kurahaupo_> dan_pena: Not in the code, in your documentation
[12:23:49] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[12:23:58] <kurahaupo_> So you would see an error message like "E01234 Can't open configuration file"
[12:24:26] *** Quits: oxfuxxx (~oxfuxxx@178.238.11.181) (Client Quit)
[12:25:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:27:00] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:28:00] *** Joins: _LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[12:28:04] <supakeen> Makes sense as well :)
[12:28:38] *** Joins: oxfuxxx (~oxfuxxx@178.238.11.181)
[12:30:37] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[12:30:57] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Ping timeout: 240 seconds)
[12:31:31] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[12:32:22] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.89)
[12:32:33] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Quit: Leaving)
[12:34:00] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[12:34:45] *** Joins: zmt01 (~zmt00@user/zmt00)
[12:35:23] *** Quits: imp (~imp@192-141-191-236.alternativaip.net.br) (Quit: imp)
[12:35:31] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:36:28] *** Joins: Guest1698 (~Guest16@ip1.ip-51-81-42.us)
[12:36:34] *** Quits: Guest1698 (~Guest16@ip1.ip-51-81-42.us) (Client Quit)
[12:36:36] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[12:36:46] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.26)
[12:37:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.89) (Ping timeout: 240 seconds)
[12:38:52] <dave0> E069 Error 69
[12:39:23] <dave0> Abort, Retry, Fail?
[12:39:39] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:40:37] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[12:40:59] *** Quits: oxfuxxx (~oxfuxxx@178.238.11.181) (Remote host closed the connection)
[12:41:41] <kurahaupo_> dave0: Abort, Rescind, Fail, Ignore, Panic?
[12:42:06] <dave0> P
[12:42:52] <kurahaupo_> The Universe is being shut down; reboot in 1E99 seconds
[12:43:23] <dave0> it takes a while to boot up
[12:43:47] <Wulf> kurahaupo_: is that a float or similar? If you subtract 1, will it actually get smaller?
[12:44:07] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:44:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:44:47] <Wulf> maybe the broken reboot routine is what gave us time to evolve. We're the result of a bug.
[12:45:12] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:45:28] <dave0> oh that makes me think of the new matrix movie
[12:45:41] <dave0> is it any good?
[12:46:23] <supakeen> It's "OK".
[12:47:38] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[12:47:45] *** Joins: synbiose (~synbiose@user/synbiose)
[12:48:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:48:47] *** Joins: useretailz (~useretail@31.41.69.140)
[12:48:47] *** Joins: stonkey (~stonkey@user/stonkey)
[12:48:48] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:50:02] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.26) (Ping timeout: 240 seconds)
[12:50:12] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[12:51:08] *** Joins: useretailz (~useretail@31.41.69.140)
[12:51:18] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[13:00:59] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[13:01:02] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:45] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Quit: Lost terminal)
[13:03:47] *** Joins: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c)
[13:04:08] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[13:04:22] *** Joins: mrig (~mrig@user/mrig)
[13:09:10] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[13:11:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:11:58] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:14:00] *** Joins: fe23 (~fe23@2409:8a34:468:10c0:7962:85f6:f4ad:ee4)
[13:15:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:15:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:24] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:16:49] *** Joins: wroathe (~wroathe@user/wroathe)
[13:20:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[13:21:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:29:01] *** Joins: aradesh (~aradesh@user/aradesh)
[13:31:12] *** Joins: lightningwright (~lightning@user/lightningwright)
[13:31:38] *** Quits: inomoz (~inomoz@85.26.165.50) (Ping timeout: 260 seconds)
[13:32:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:33:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:37:01] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:43:12] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:43:31] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:44:23] *** Joins: agonhajdari (~textual@user/agonhajdari)
[13:45:43] *** Joins: inomoz (~inomoz@85.26.165.50)
[13:47:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[13:47:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[13:47:36] *** Joins: wroathe (~wroathe@user/wroathe)
[13:49:03] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:49:17] *** Quits: dan_pena (~dan_pena@125-239.80-90.static-ip.oleane.fr) (Ping timeout: 256 seconds)
[13:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:53:54] *** Joins: anton (anton@user/anton)
[13:53:56] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[13:54:16] *** Joins: anton (anton@user/anton)
[13:54:19] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[13:54:38] *** Joins: anton (anton@user/anton)
[13:54:40] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[13:54:48] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:00] *** Joins: anton (anton@user/anton)
[13:55:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:56:07] *** Lord_of_Life_ is now known as Lord_of_Life
[13:59:05] *** Joins: vysn (~vysn@user/vysn)
[14:00:43] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:5a::a07d) (Quit: Konversation terminated!)
[14:02:30] *** Joins: AmR (~AmREiSa@156.199.202.96)
[14:02:53] *** Joins: azed (~azed@197.22.1.180)
[14:12:11] *** Joins: earnestly (~earnest@user/earnestly)
[14:18:23] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:18:23] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:18:23] *** Joins: wroathe (~wroathe@user/wroathe)
[14:18:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:19:18] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:19:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:20:51] *** Quits: anton (anton@user/anton) (Ping timeout: 268 seconds)
[14:22:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:23:59] *** Joins: mokulus (~mokulus@user/mokulus)
[14:24:46] *** Joins: gproto23_ (~gproto23@user/gproto23)
[14:25:00] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[14:25:19] *** Joins: gproto23_ (~gproto23@user/gproto23)
[14:25:29] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[14:25:57] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:19] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[14:30:41] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[14:30:54] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (Remote host closed the connection)
[14:30:57] *** Joins: csrf (~csrf@user/csrf)
[14:31:14] *** Joins: _4p3 (~ape@kanonenjagd.panzer.ninja)
[14:32:55] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[14:33:25] *** Joins: anton (anton@user/anton)
[14:33:27] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[14:33:47] *** Joins: anton (anton@user/anton)
[14:33:49] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[14:33:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:34:03] *** Joins: seninha (~seninha@user/seninha)
[14:34:10] *** Joins: anton (anton@user/anton)
[14:34:12] *** Quits: anton (anton@user/anton) (Max SendQ exceeded)
[14:34:32] *** Joins: anton (anton@user/anton)
[14:34:34] *** Quits: anton (anton@user/anton) (Excess Flood)
[14:39:25] *** Joins: bdax_ (~tom@05432be4.skybroadband.com)
[14:41:40] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[14:43:35] *** Joins: ko (~i.am@user/marlboro)
[14:44:33] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:44:45] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[14:44:49] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:46:36] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[14:48:38] *** pony is now known as nimi-ala
[14:49:11] *** nimi-ala is now known as pony
[14:49:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:49:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:49:11] *** Joins: wroathe (~wroathe@user/wroathe)
[14:49:39] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:49:54] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Quit: ZNC - http://znc.in)
[14:51:01] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[14:53:16] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:54:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[15:05:38] *** Joins: rito_ (~rito_gh@45.112.243.151)
[15:07:12] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[15:11:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:12:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[15:13:26] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[15:13:34] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:15:20] *** Joins: Rounin (~david@84.212.130.215)
[15:16:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:19:15] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Quit: ZNC - http://znc.in)
[15:19:41] *** Joins: WAR10CK (~WAR10CK@14.223.182.108)
[15:20:02] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[15:20:58] *** Quits: vysn (~vysn@user/vysn) (Read error: Connection reset by peer)
[15:24:22] *** Quits: WAR10CK (~WAR10CK@14.223.182.108) (Ping timeout: 268 seconds)
[15:33:51] <pragma-> https://queue.acm.org/detail.cfm?id=3212479 was an amusing read
[15:34:13] *** Joins: badsektor (~badsektor@user/badsektor)
[15:35:53] *** Joins: meator (~meator@user/meator)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:38:15] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[15:38:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Client Quit)
[15:40:16] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[15:40:49] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:40:56] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[15:45:36] <sham1> It's a good read
[15:46:47] <dave0> pdp-11 sounds like the bees knees
[15:47:10] <supakeen> We actually recently received a PDP-11 board with a SEM.
[15:47:14] <supakeen> It was the old controller for some part.
[15:47:23] <supakeen> I believe someone booted a very old (tm) BSD on it.
[15:47:30] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:48:47] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[15:50:46] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[15:50:57] *** Quits: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net) (Ping timeout: 240 seconds)
[15:52:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:56:46] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:57:36] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[15:59:09] *** Quits: azed (~azed@197.22.1.180) (Quit: WeeChat 3.4)
[16:00:35] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:01:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:01:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:01:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:01:27] *** Joins: wroathe (~wroathe@user/wroathe)
[16:01:33] <nomagno> https://termbin.com/l67k7
[16:01:49] <nomagno> Any other suggestions for safest C99 behaviour in GCC/Clang?
[16:02:09] <nomagno> Well, most pedantic C99 strict adherance checking*
[16:02:14] <NRK[m]> pragma- some of the stuff there is very questionable
[16:02:53] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:03:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:03:15] <NRK[m]> https://www.yodaiken.com/2021/05/21/your-computer-is-a-fast-pdp-11-and-more-on-c-the-c-standard-and-computer-architecture
[16:03:46] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:04:59] <NRK[m]> nomagno: i posted a bunch of warning flags yesterday. it was for gcc, but should work on clang too.
[16:05:22] <nomagno> ... Well if you could find them I'd appreciate it
[16:05:23] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[16:05:24] <NRK[m]> but no, they don't guarantee anything.
[16:05:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:05:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:06:07] *** Joins: useretailz (~useretail@31.41.69.140)
[16:06:23] <NRK[m]> static analyzers and additional warnings can be useful, but it doesn't guarantee that your code is correct/UB-free
[16:06:38] <NRK[m]> nomagno: https://dpaste.com/6DW9F63KD
[16:06:44] <nomagno> I know that
[16:07:01] <nomagno> I take a lot of extra steps to get rid of UB anyways
[16:07:31] <nomagno> Oh those warning flags seem useful
[16:07:37] <nomagno> aren't they included in -Wall though?+
[16:08:01] <NRK[m]> i don't think so, i only added those which are not enabled at wextra and wall on gcc v11
[16:08:31] <NRK[m]> note that what's included in -Wall and -Wextra differ between compiler version. so adding some "redundant" flags is fine.
[16:08:33] *** Joins: pulse (~pulse@user/pulse)
[16:08:36] <nomagno> what does -Wformat=2 do?
[16:08:53] <NRK[m]> slightly strict-er format checking
[16:09:02] <NRK[m]> or atleast that's the impression i got from gcc manpage
[16:09:56] <nomagno> I only really care about it warning me when it finds misleading indentation in if/else
[16:10:17] <nomagno> so out with that
[16:11:21] <NRK[m]> no, i mean printf format checking
[16:11:31] <NRK[m]> not code-style
[16:15:05] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[16:17:10] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Quit: Leaving)
[16:17:46] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[16:20:38] <nomagno> Reached a balance of warnings I'm quite happy with
[16:26:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:26:27] <bdax_> does anyone have a link to a free (draft?) version of the c95 standard (or earlier)? I've checked the link in the topic and it links to paid sources (and a lot of 404s)
[16:27:19] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[16:29:07] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[16:32:01] <dave0> ,c89
[16:32:01] <candide> C89/C90 draft: http://port70.net/~nsz/c/c89/c89-draft.html or http://flash-gordon.me.uk/ansi.c.txt or http://web.archive.org/web/20050207005628/http://dev.unicals.com/papers/c89-draft.html - C Overview: http://en.wikipedia.org/wiki/C_programming
[16:32:55] <dave0> someone said port70
[16:32:59] <dave0> i clicked, it seemed to work
[16:34:00] <bdax_> ah brilliant, looks good, thank you dave0!
[16:34:06] <dave0> no worries
[16:40:08] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[16:41:00] <wenxin> hi,there. what does this mean printf(" %.8g")
[16:41:09] <wenxin> .8g?
[16:41:49] <supakeen> print a double up to 8 places remove trailing zeroes
[16:42:25] <wenxin> supakeen: thx
[16:42:40] <supakeen> do verify what i said because it was from the top of my head :)
[16:42:56] <omegatron> or look it up with  "man 3 printf"
[16:45:57] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[16:46:51] *** Joins: johnjaye (~pi@154.6.152.74)
[16:54:00] *** kurahaupo_ is now known as kurahaupo
[16:54:36] *** Joins: terminalpusher (~terminalp@2a01:586:911a:1:a859:fe95:d7d4:d437)
[16:55:37] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:56:10] *** Quits: llh (~llh@user/llh) (Read error: Connection reset by peer)
[16:57:36] *** Joins: llh (~llh@user/llh)
[16:58:39] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-217.cspire.com)
[17:00:14] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[17:00:21] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:01:11] *** Quits: hinata (~hinata@2409:4042:d94:5be6:ac0c:53b3:b37e:ad4c) (Quit: Leaving)
[17:02:34] *** Joins: semeion (~semeion@user/semeion)
[17:02:44] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[17:03:05] *** semeion is now known as mnemonic
[17:10:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:11:54] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:12:36] *** Joins: john99 (~john99@170.246.103.34.bc.googleusercontent.com)
[17:13:27] *** Quits: bdax_ (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[17:13:48] *** Joins: bdax_ (~tom@05432be4.skybroadband.com)
[17:15:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a892:5f2f:3801:1e1e)
[17:15:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a892:5f2f:3801:1e1e) (Changing host)
[17:15:33] *** Joins: skapata (~Skapata@user/skapata)
[17:21:41] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:21:43] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[17:24:38] <hans> why do people write stuff like `STARTUPINFO StartupInfo;memset(&StartupInfo, 0, sizeof(StartupInfo));` instead of just `STARTUPINFO StartupInfo={};`  ?
[17:24:39] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[17:25:25] *** Joins: badsektor (~badsektor@user/badsektor)
[17:26:17] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[17:27:38] <earnestly> hans: You mean = {0};?  Because they don't know, because they can't use C99
[17:28:39] <hans> yeah {0} (which my compiler doesn't require, but i guess that's just a bug/extension)
[17:29:15] <earnestly> It does require it.  Not including 0 is an extension
[17:29:27] <earnestly> (But I consider all extensions to be bugs)
[17:29:54] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:30:23] <hans> so supporting __builtin_expect() is a bug?
[17:30:58] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:31:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:32:45] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2)
[17:33:13] <Learath2> Hehe, gotcha
[17:35:47] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:36:47] <badsektor> i got a book to learn C++ but i found out that it is not a programming language but baseball, they got things like try and throw and catch and other weird stuff i dont understand
[17:37:20] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:38:34] *** Joins: j-james (~apropos@24.48.222.83)
[17:39:27] <constxd> based
[17:39:39] <cehteh> try harder eventually you catch the idea, or just throw it away
[17:40:19] <hans> at least C++ has utf8-compatible strings
[17:40:46] <NRK[m]> {0} is C99?
[17:41:02] *** Quits: soapsudsxx (~soapsudsx@209.221.40.139) (Remote host closed the connection)
[17:41:26] <NRK[m]> i thought C89 also defines remaining elements to be implictly zero initialized
[17:41:32] <Learath2> Compile all your C++ code with -fno-exceptions to have a better version of C++
[17:41:43] <Learath2> {0} is fine in c89 aswell afaik
[17:41:58] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[17:42:27] <NRK[m]> yes, it is. just looked it up.
[17:42:38] <Learath2> empty initializer is a gnu extension though, so that part was correct
[17:42:54] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Client Quit)
[17:43:19] *** Quits: Guest1145 (~somewhere@202-63-76-134.ip4.superloop.com) (Ping timeout: 256 seconds)
[17:43:55] *** Joins: etolier (~somewhere@125-63-6-35.ip4.superloop.com)
[17:44:27] <Learath2> hans: the correct answer is most people don't know/learn proper C, they learn by absorbing other peoples code and habits
[17:47:21] <tdg> Learath2: and even those that learn proper C inevitably end up casting a pointer to an integer and back, and expect everything to work
[17:47:31] <tdg> among other things
[17:47:53] <NRK[m]> how is that "proper C"
[17:48:02] <tdg> NRK[m]: it's not, but they still do it :)
[17:48:13] <NRK[m]> who and where?
[17:48:27] <tdg> have you ever looked at code of any kernel ever to exist?
[17:48:43] <NRK[m]> no :)
[17:48:47] <tdg> it's all over the place in all of them
[17:48:50] <Learath2> Hm, linux kernel is fairly consistent in using uintptr_t iirc
[17:49:02] <tdg> Learath2: i wish it was
[17:49:04] <tdg> it's absolutely not
[17:49:05] <NRK[m]> sounds scary, what's the reason for this?
[17:49:19] <tdg> neither is freebsd, openbsd, netbsd, and neither are niche things such as seL4
[17:49:21] <Learath2> Atleast I can't really remember any in the parts I was digging around, I certainly did not explore all 100000000 lines of code in there :D
[17:49:23] <tdg> all of them have this
[17:50:20] <NRK[m]> but why
[17:50:20] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[17:51:04] <earnestly> Hm, it's nice that {0} is C89.  I remember reading that it required std=c99 but obviously not the case
[17:51:10] *** Joins: useretailz (~useretail@31.41.69.140)
[17:51:13] <tdg> NRK[m]: many reasons, none which are terribly valid or couldn't be written in different ways
[17:51:17] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:51:18] *** Joins: strajder (~strajder@user/strajder)
[17:51:52] <kurahaupo> earnestly: struct foo bar = {0} predates C89
[17:51:58] <tdg> it's usually a case of code being grown over time, hell even i'd done it because the codebase already does it and i'd need to spend a month refactoring the whole thing to fix it, which i didn't have time for
[17:52:09] <earnestly> kurahaupo: Yeah, so clearly it was adopted into the standard
[17:52:17] <tdg> but i don't do it code i've written from scratch
[17:52:31] *** Joins: Klinda (~superleag@user/klinda)
[17:53:08] <earnestly> tdg: Is this something their coccinelle project could help detect?
[17:53:48] <tdg> earnestly: this is easy to detect, it's just extra work to fix :P
[17:53:49] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[17:53:49] <kurahaupo> If we look back far enough, memset was faster than an explicit initialiser, because the latter involved copying from a hidden static object
[17:53:57] *** Quits: j-james (~apropos@24.48.222.83) (Quit: leaving)
[17:54:13] <earnestly> tdg: coccinelle might be able to help since it's supposed to do necessary transformations, generate patches, etc.
[17:54:46] <tdg> earnestly: in FreeBSD this got a lot better because of CHERI, and i'd imagine that over time as linux gets support for CHERI things it'll get fixed up
[17:55:39] <Klinda> how can I compile with address sanitizer? if I have to do  CC=/path/to/afl-gcc CXX=/path/to/afl-g++ ./configure --disable-shared    make clean all
[17:55:41] <tdg> but this is just one of many examples where people write technically implementation-defined or worse yet, undefined behavior that just happens to work and piles on in a codebase
[17:56:33] <earnestly> tdg: https://coccinelle.gitlabpages.inria.fr/website/rules/array.cocci
[17:56:37] <Learath2> kurahaupo: ah that is a decent explanation for the memsets following declarations in older code
[17:57:30] <earnestly> tdg: Or even just reporting: https://coccinelle.gitlabpages.inria.fr/website/rules/find_unsigned.cocci
[17:58:15] <tdg> earnestly: yeah, people run static analyzers on all kinds of codebases, but they tend to ignore warnings at times :P
[17:58:17] <earnestly> I haven't used this tool though, been meaning to try
[17:58:38] <tdg> coccinelle isn't really all that advanced, i believe that linux, much like various other operating systems, have access to coverity
[17:58:38] <earnestly> tdg: This isn't static analysis per-se
[17:58:50] <tdg> i believe coverity can report all of these issues
[17:58:54] <tdg> it's just that... they don't always get fixed :(
[17:58:58] <earnestly> It's not analysis
[17:59:04] <earnestly> It's code transformation
[17:59:52] <tdg> sure, but it still requires that people look at the patch and apply it
[17:59:56] <tdg> which sadly doesn't seem to happen
[18:00:06] <tdg> + in the really important places, i doubt it'll be able to generate a meaningful patch
[18:00:16] <tdg> e.g. in code that deals with DMA, paging and the likes
[18:00:19] <earnestly> Linux already uses this thing
[18:00:26] <tdg> yeah, and yet they still have a bunch of these issues
[18:00:32] <tdg> so obviously it's not all that useful
[18:01:51] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:69cc:cb7c:3d5c:a5cc)
[18:02:46] * tdg -> bbl
[18:03:02] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:05:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:05:37] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:07:17] <john99> Klinda: in gcc -fsanitize=XXX multiple options available
[18:07:43] <john99> i usually put that flag in all parts, but i dont know if its only necesary at the link fase or ever
[18:08:29] <Klinda> CC=afl-clang-fast CXX=afl-clang-fast++ ASAN_OPTIONS=symbolize=0 AFL_USE_MSAN=1 I have seen also this
[18:08:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[18:08:42] *** Joins: nyah (~nyah@94.6.71.219)
[18:08:55] <Klinda> what's the correct way?
[18:10:02] <john99> i think that you are mixing the compiler flgas with the environment options
[18:10:22] <john99> wich compiler are you using?
[18:10:48] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[18:10:58] <Klinda> -fsanitize=address -fno-omit-frame-pointer I should use
[18:11:04] <Klinda> well it's a fuzzer compiler
[18:11:25] <Klinda> afl
[18:11:41] <pingpongball> Klinda  What font you perfer for coding?
[18:11:55] <Klinda> what do you mean?
[18:12:06] <pingpongball> font for coding
[18:12:12] <Klinda> xD
[18:12:15] <john99> first notice that fuzzer compiler eist
[18:12:24] <john99> exist
[18:12:26] <pingpongball> tell me
[18:12:36] <strajder> comic sans ms
[18:12:44] <john99> -fsanitize=address -fno-omit-frame-pointer basically yes
[18:12:45] <Klinda> I usually have visual studio code
[18:12:50] <pingpongball> not emacs
[18:12:58] <Klinda> I use windows mostly
[18:13:34] <pingpongball> :/
[18:13:43] <pingpongball> windows what!!
[18:13:47] <Klinda> I can play videogames
[18:14:04] <Klinda> that's the only reason
[18:14:08] <john99> ummmmmmmmmm
[18:14:22] <john99> okay, i am not going to help you more (joke XD)
[18:14:31] <Klinda> ahahaha
[18:14:40] <pingpongball> i would rather go outside and play
[18:14:49] <pingpongball> but windows
[18:14:59] <Klinda> if you are nerd you don't go out
[18:15:15] <Klinda> how can you know how to comiple well if you go out?
[18:17:37] *** Joins: WAR10CK (~WAR10CK@14.223.182.108)
[18:18:41] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:21:19] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[18:21:38] <john99> that remain the question
[18:21:45] <Klinda> ahahah
[18:21:58] <john99> the someone know if the flags sanitice are encesary ever or only in the link phase?
[18:22:17] <Klinda> john99: you know more than me
[18:22:28] <wenxin> hi,there. why the end of string constant is '\000' instead of '\0'. Please check it out https://pastebin.com/EH2nx133
[18:22:34] <john99> i have to test it, all examples i saw are very simple
[18:22:41] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[18:22:42] <Klinda> I don't really know about compilires etc
[18:22:54] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[18:22:54] <john99> wenxin, \0 and \000 are equivalent
[18:23:09] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:23:25] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2) (Ping timeout: 240 seconds)
[18:23:26] <wenxin> john99: but why i didn't the \0?
[18:23:27] <strajder> also 0 (outside of string/char literal)
[18:23:31] <Klinda> john99: You need the ASAN_OPTIONS=symbolize=1 to turn on resolving addresses in object code to source code line numbers and filenames. This option is implicit for Clang but it won't do any harm.
[18:23:39] <Klinda> what does it mean?
[18:23:42] *** Joins: malina (~malina@user/malina)
[18:24:32] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[18:24:38] <john99> https://github.com/google/sanitizers/wiki/SanitizerCommonFlags
[18:25:11] <strajder> wenxin: where do you see \000 at all?
[18:25:20] <wenxin> strajder: gdb
[18:25:45] <Klinda> john99: If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
[18:26:23] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:26:23] <john99> the saniticer replace you malloc/calloc/etc with taht you get the original adress of the error
[18:26:26] <strajder> it is the same as \0, as said; in this case the representation chosen by gdb
[18:26:31] <john99> rowughtly mean that
[18:26:35] <john99> roughtly*
[18:27:07] <john99> if not you will get something like _ubasan_verey deep nest call / memory leak
[18:27:28] <john99> i recomend simply compile and check with GDB, that example is easy to see
[18:27:41] <john99> or in compiler explorer
[18:28:02] <Klinda> why so that guy doesn't use -fsanitize=address -fno-omit-frame-pointer ?
[18:28:24] <john99> wich guy?
[18:28:30] <john99> which*
[18:28:46] <Klinda> well I have seen a phd pdf
[18:29:00] <Klinda> and use only that flag with AFL_USE_MSAN=1
[18:29:10] <Klinda> not -fsanitize=address -fno-omit-frame-pointer
[18:29:42] <john99> i send you the link to dthe common sanitice flags
[18:29:44] <Klinda> also it uses clang too
[18:30:15] <Klinda> btw I think I use only -fsanitize=address -fno-omit-frame-pointer
[18:30:16] <Klinda> let's see
[18:30:25] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:30:26] <john99> https://afl-1.readthedocs.io/en/latest/notes_for_asan.html
[18:30:27] <candide> Title of john99's link: Using ASAN with AFL — AFL 2.53b documentation
[18:30:43] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[18:30:46] <john99> searching in goole seem like a fuzzy compiler is something special that require especial flags
[18:31:04] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:31:12] <john99> its outside of my knoledge (i discoverred today waht is a fuzzy compiler XD)
[18:32:37] <Klinda> he afl-gcc / afl-clang wrappers will pick that up and add the appropriate flags
[18:33:05] <Klinda> so maybe it will add -fsanitize=address -fno-omit-frame-pointer?
[18:33:43] <wenxin> strajder: can you help me with the snippet i just posted? why this statement failure? while(*s++ = *t++)
[18:34:26] <john99> wenxin, that code is undefined
[18:34:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[18:34:48] <john99> while(*s++ = *t++)
[18:34:51] <strajder> you are attempting to write to memory referenced by a string literal
[18:35:03] <strajder> (past it)
[18:35:31] <Klinda> what's the differece between clang and gcc?
[18:35:39] <strajder> you need either to declare a char array of fixed size or dynamically allocate memory
[18:35:41] <john99> XD  nice question
[18:36:01] *** Joins: Macuser (~Macuser@2600:1003:b45f:85f8:ddd8:6ee8:fe69:91ea)
[18:36:05] <wenxin> strajder: john99 thank both of you, I get it now
[18:36:22] <john99> Klinda, are 2 diferenc compilers
[18:36:22] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[18:36:44] <john99> mostly is the same, but sometimes no
[18:37:00] <john99> use compiler explorer for check diferences
[18:37:08] <john99> https://godbolt.org/
[18:37:46] <Klinda> and why there is also a faster version?
[18:37:57] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[18:38:27] <Klinda> yes I see they do different machine calls
[18:41:47] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:42:17] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:42:18] <Klinda> john99: CC=/home/klinda/Downloads/afl-2.52b/afl-clang-fast CXX=/home/klinda/Downloads/afl-2.52b/afl-clang-fast++ ASAN_OPTIONS=symbolize=0 AFL_USE_MSAN=1
[18:42:22] <Klinda> I will try this?
[18:42:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:42:33] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[18:43:02] *** Joins: soul-d (~uknown@user/soul-d)
[18:43:21] <john99> i dont know, with taht you are only defining the environment variables for a Makefile or a CMake
[18:43:34] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 268 seconds)
[18:43:41] <john99> if work with that for you okay, but you are missing the excutable part
[18:45:07] <Klinda> CC=/home/klinda/Downloads/afl-2.52b/afl-clang-fast CXX=/home/klinda/Downloads/afl-2.52b/afl-clang-fast++ ASAN_OPTIONS=symbolize=0 AFL_USE_MSAN=1 ./configure --disable-shared
[18:45:14] <Klinda> also configure disable shared
[18:45:27] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 250 seconds)
[18:45:38] <Klinda> then this make clean all
[18:45:59] <Klinda> let's see
[18:46:49] *** Joins: remote (~self@user/hackers)
[18:47:02] *** Parts: remote (~self@user/hackers) ()
[18:47:02] <Klinda> configure: error: in `/home/klinda/Downloads/ImageMagick-7.0.1-10':
[18:47:04] <Klinda> configure: error: C compiler cannot create executables
[18:47:05] <Klinda> :/
[18:47:17] *** Quits: larry87 (~quassel@c-73-136-246-231.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[18:47:18] <john99>  but you are missing the excutable part
[18:47:26] <john99> XD
[18:47:30] <Klinda> what?
[18:47:32] <Klinda> xD
[18:47:56] <john99> sorry, you have a problem with your tooling setup
[18:48:22] <john99> "tooling is hard" but C IRC its not for ask the next questions that you have XD
[18:49:50] <john99> anyway probably you have misconfigured you installation of the fuzzy compiler or the c compiler
[18:50:51] <Klinda> or maybe clang doesn't support
[18:50:54] <Klinda> that program
[18:51:30] <john99> may be
[18:54:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68)
[18:58:07] *** Quits: ketiv (~ketiv@92.40.194.226.threembb.co.uk) (Ping timeout: 256 seconds)
[18:58:30] *** Joins: ketiv (~ketiv@92.40.194.226.threembb.co.uk)
[18:59:13] *** Joins: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net)
[19:01:08] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[19:01:18] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[19:01:54] <Klinda> john99: in the end doing that options doesn't work
[19:02:35] <Klinda> maybe I try with -fsanitize=address -fno-omit-frame-pointer
[19:02:41] <john99> to be honest seem like something from your configuration
[19:02:53] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[19:02:54] <john99> but i dont know
[19:02:55] <sysRPL> hi there
[19:03:07] <john99> hi
[19:03:13] <sysRPL> i am having a problem compiling the quickjs c project with gcc as a shared library. perhaps someone could give me a few some suggestions?
[19:03:21] <Klinda> john99: without  ASAN_OPTIONS=symbolize=0 AFL_USE_MSAN=1  it comile it
[19:03:27] <sysRPL> the make it uses to build works, but only outputs a static lib i.e. libquickjs.a
[19:03:34] <sysRPL> gcc -shared -o libquickjs.so c-sources -lc -lm ... doesn't do it
[19:03:40] <sysRPL> https://github.com/bellard/quickjs
[19:03:41] <candide> Title of sysRPL's link: GitHub - bellard/quickjs: Public repository of the QuickJS Javascript Engine. Pull requests are not accepted. Use the mailing list to submit patches.
[19:03:47] *** Quits: ketiv (~ketiv@92.40.194.226.threembb.co.uk) (Ping timeout: 256 seconds)
[19:04:11] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:04:17] <Klinda> how can I add these flags john99 -fsanitize=address -fno-omit-frame-pointer ?
[19:04:43] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:05:08] <john99> sysRPL in the makefile "# example of static JS compilation with modules"
[19:05:39] *** Joins: moog (~moog@107.126.53.61)
[19:05:42] <sysRPL> john99: thank you. let me refer to that coment
[19:06:18] <john99> Klinda, i dont know about MSVC i suppose that it should have a fancy box where you can put your options
[19:06:39] <john99> (pretty inconvenient in comparation with the command line if you ask me)
[19:07:19] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[19:07:28] <sysRPL> john99: i believe those are examples of static building ... i need to build a shared library or `.so` file on linux
[19:07:28] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[19:07:35] *** Joins: monkey_ (~user@190.104.116.153)
[19:07:48] <sysRPL> hence the example `gcc -shared -o` i mentioned
[19:08:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:08:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:08:36] *** Joins: wroathe (~wroathe@user/wroathe)
[19:10:01] <Klinda> now I retry with AFL_USE_ASAN=1 and all worked o.o
[19:10:02] *** Joins: mahmutov (~mahmutov@37.155.75.89)
[19:10:34] <john99> PROGS+=libquickjs.a
[19:10:45] <john99> in the makefile specify a static ibrary
[19:11:18] <john99> clone the repo and edit the makefile
[19:13:11] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[19:15:41] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[19:15:59] <nurupo> >int main(int argc, const char * const argv[])
[19:16:05] <nurupo> when you const all the things
[19:16:41] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[19:18:22] <johnjaye> there's a video on yt. squid games for programmers. check it out lol
[19:20:16] *** Joins: Viewday111 (~Viewday@user/viewday)
[19:20:16] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[19:20:56] <Klinda> john99: now it's all working, I am doing make clean all
[19:21:09] *** Joins: useretailz (~useretail@31.41.69.140)
[19:21:10] <john99> felicitations
[19:21:24] <Klinda> ahaha
[19:21:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:21:55] *** Viewday111 is now known as Viewday11
[19:21:59] <john99> send me a link about fuzzy compilers information
[19:22:08] *** Joins: meator (~meator@user/meator)
[19:22:10] <john99> i want check
[19:22:30] *** Joins: shivesh (~shivesh@user/shivesh)
[19:23:32] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[19:23:39] <Klinda> if you install afl
[19:23:54] <Klinda> you click on quickstart.txt
[19:24:11] <Klinda> and they say to compile with it
[19:24:28] <john99> its not waht i was asking
[19:24:38] <john99> but anyway, its enought with the name
[19:24:41] <Klinda> I don't know other things
[19:24:52] *** Joins: et09 (~et09@user/et09)
[19:25:15] <john99> ummmm
[19:25:16] <Klinda> https://github.com/google/AFL
[19:25:17] <candide> Title of Klinda's link: GitHub - google/AFL: american fuzzy lop - a security-oriented fuzzer
[19:25:24] <john99> do you know waht is a static analicer?
[19:25:37] <Klinda> yes
[19:26:21] <john99> in clang is pretty easy to enable, (if you didnt know) and seem similar task
[19:27:37] <Klinda> I don't know
[19:27:44] <Klinda> I should use ASan xD
[19:27:55] <john99> its not the same
[19:28:26] <john99> anyway, if working is okay
[19:28:58] *** Quits: fe23 (~fe23@2409:8a34:468:10c0:7962:85f6:f4ad:ee4) (Quit: fe23)
[19:29:04] <Klinda> let's see
[19:31:12] <johnjaye> static analyzer is code for "c has a lot of footguns, let's see if we can guess where they are"
[19:32:54] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:33:20] <Klinda> static tool are only useful for quick review and not compiled programs
[19:33:32] <Klinda> compilable*
[19:33:33] <Klinda> xD
[19:35:05] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:35:32] <johnjaye> think of it as antivirus for your code
[19:35:39] <johnjaye> probably isn't going to do anything but hey... at least we feel safer
[19:35:41] *** Joins: mrig (~mrig@user/mrig)
[19:35:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:36:36] <john99> i think that help, we are humans are make mistakes, a bunch of then are avoidable with that tools
[19:36:37] *** Quits: Macuser (~Macuser@2600:1003:b45f:85f8:ddd8:6ee8:fe69:91ea) (Ping timeout: 240 seconds)
[19:36:54] <john99> its not a replacement
[19:37:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[19:37:46] <Klinda> maybe a tool that know the context is not better?
[19:38:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:39:03] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:41:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:42:59] <john99> its better, but how johnjaye said, C is prone to footguns, i sually enble all that i can and cross my finger not do mistakes too dificult to see
[19:45:17] *** Quits: srwm^ (~srwm@207.5.54.6) (Remote host closed the connection)
[19:46:16] <Klinda> true
[19:46:38] <Klinda> but I am not a C programmer luckly xD
[19:47:27] <johnjaye> also c++ is much _much_ worse. so there's that
[19:47:48] <johnjaye> i read a blog by a guy who stopped c++ programming for a year. came back and he'd forgotten all the intricate rules and stuff to understand programs
[19:48:44] <john99> you dont understand C++ you simply pile lines until the compiler compile
[19:52:03] *** Quits: esselfe (~steph@user/esselfe) (Quit: brb)
[19:52:33] *** Joins: esselfe (~steph@user/esselfe)
[19:54:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:54:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:54:24] *** Joins: wroathe (~wroathe@user/wroathe)
[19:55:02] <Klinda> I wanna learn c-sharp
[19:57:20] <john99> you love too much windows
[19:58:06] <johnjaye> apparently csharp is used a lot with mods for Unity games like terraria
[19:58:09] <Klinda> well I am in drug with videogames
[19:58:11] <johnjaye> idk why. a dll is a dll no
[19:58:35] <Klinda> I have a virtual machine now running with ubuntu
[19:58:37] <john99> i should prefer unreal , but i already know c++ and not c#
[19:59:34] *** Joins: mikess (~sam@user/mikess)
[20:01:06] *** Joins: Macuser (~Macuser@2600:1003:b450:1683:10c0:eb04:3ea0:7733)
[20:01:11] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[20:02:11] *** Joins: useretailz (~useretail@31.41.69.140)
[20:02:36] <Klinda> in my university they started with python and not c xD
[20:04:48] <Klinda> I am learning C with a security course now, buffer overflow, format string vulnerability and things like that
[20:04:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:05:06] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:05:24] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[20:06:09] *** Joins: useretailz (~useretail@31.41.69.140)
[20:06:26] *** Joins: critr (~critr@user/critr)
[20:07:15] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[20:07:42] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:08:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:08:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[20:08:55] <john99> welll, most of that is... bad practices or overlooked for thinhs like __attribute__((cleanup))
[20:09:33] <tdg> john99: i have a love/hate relationship with __attribute__((cleanup))
[20:09:46] <john99> but yes, you can write pretty unsafe code in C, no like in python, where fro proces a fiew gigas of CSV i OOM my computer of 64 GB the ram
[20:10:13] <john99> or in rust where you never need unsafe and that word is not in use
[20:10:23] <john99> or etc...
[20:10:32] <john99> i saw shit code in all languages
[20:11:18] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:12:28] <john99> tdg, anyway its the future, C need some more easy way to handle the memory
[20:13:13] <tdg> john99: yeah but the way cleanup works is really annoying :P
[20:13:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68) (Quit: Quit)
[20:13:23] <strajder> no
[20:13:34] <tdg> e.g. if you want to pass it a pointer, you have to take a double pointer and then you need to dereference it in the cleanup routine
[20:13:38] <tdg> not the most fun thing
[20:13:43] <strajder> l2c
[20:14:06] <john99> pass a pointer and dereference in the same caller seem a bit strange
[20:14:12] <john99> same function
[20:14:19] <tdg> but i do use __attribute__((cleanup)) + aborting on every out of memory failure in things that are otherwise extremely fragile and hard to clean up
[20:14:35] *** Joins: jayaura (e2d69d141a@2604:bf00:561:2000::2b0)
[20:14:36] <john99> yes, and for mutex and locks
[20:14:50] <john99> and for close descriptors
[20:14:57] <john99> and for a bunch of cases
[20:15:10] <tdg> clean up != only freeing
[20:15:12] <tdg> :P
[20:15:31] <tdg> it's also extremely useful for implementing garbage collectors and reference counting
[20:15:47] <tdg> you only really have to acquire and you can automatically release it in the consumer without worrying about all the early returns
[20:15:53] <john99> okay, i understand now why you hate that XD
[20:16:38] <tdg> john99: don't get me wrong, the code would be infinitely worse without it, i just wish it was a bit of a different interface is all
[20:17:00] <john99> in the end the implementation proposed will be the defer of GO
[20:20:22] <tdg> john99: defer is alright yeah, though i'm not sure how it'll play out in some sensitive contexts in the kernel which might influence some decision making in the end
[20:20:22] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[20:20:24] <tdg> we'll have to see
[20:20:29] <tdg> but it would certainly be nice to have a standard way to do this
[20:20:48] <john99> yup
[20:21:09] *** Joins: useretailz (~useretail@31.41.69.140)
[20:23:02] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[20:24:07] <johnjaye> isn't there some academic paper arguing that all c programs eventually collapse under the complexity of memory management?
[20:24:13] <johnjaye> i vaguely recall that
[20:24:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:24:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:24:36] *** Joins: wroathe (~wroathe@user/wroathe)
[20:25:19] <tdg> johnjaye: academic papers argue many things, not all of which are realistic nor examine specific areas...
[20:25:28] <tdg> and often offer no useful solutions
[20:25:57] <johnjaye> oh solutions are offered. just not formally or written down
[20:26:18] <tdg> pretend-solutions, obviously, given that none of them have been deemed useful enough to actually apply anywhere
[20:26:22] <johnjaye> and when a big company imposes those solutions you don't have much recourse
[20:27:16] <john99> i worked in big pieces of code and... well, usualy its only matter of good practices programming
[20:27:31] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:27:44] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[20:27:46] *** Quits: bdax_ (~tom@05432be4.skybroadband.com) (Ping timeout: 268 seconds)
[20:28:32] *** Quits: agonhajdari (~textual@user/agonhajdari) (Client Quit)
[20:28:46] <john99> in fact the most error prone softwar i met was a python ERP
[20:29:10] <john99> hand made for a acompany, i saw glass more resilent
[20:29:16] <johnjaye> what is ERP
[20:29:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:29:32] <john99> program for company control
[20:29:45] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:30:11] *** Joins: gdd (~gdd@129.199.146.230)
[20:37:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com)
[20:41:39] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[20:41:46] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Remote host closed the connection)
[20:43:32] *** Quits: critr (~critr@user/critr) (Remote host closed the connection)
[20:44:45] <concrete-houses> https://pastebin.com/E2pMnKVG should be ban java and .net and make web use c or forth?
[20:46:11] *** Joins: Betal (~Betal@user/betal)
[20:47:45] <strajder> oop is a thing of the past
[20:49:15] *** Joins: Akiva (~Akiva@user/Akiva)
[20:50:27] <koollman> concrete-houses: that paste is amusing. It might even have been true at some point
[20:50:41] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[20:51:48] *** Joins: cousteau (~cousteau@user/cousteau)
[20:52:33] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[20:54:23] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:54:45] *** Joins: critr (~critr@user/critr)
[20:55:07] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[20:56:14] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-217.cspire.com) (Read error: Connection reset by peer)
[20:56:37] <earnestly> flat files > *
[20:56:50] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[20:57:27] <koollman> earnestly: not quite :)
[20:58:07] <koollman> index files are nice. and files with a format simplifying the parsing are kind of nice, too
[20:59:01] <earnestly> So long as I can use awk
[20:59:14] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 268 seconds)
[20:59:34] <earnestly> (And luts)
[20:59:46] <koollman> csv gets awful quickly if you use awk. at the first quoted record :)
[21:00:00] <strajder> tsv best db
[21:00:11] <koollman> tsv is decent, when you don't have anything better
[21:00:14] <earnestly> Yeah csv is non-trival
[21:01:58] *** Joins: Akuli (~Akuli@82-203-163-72.bb.dnainternet.fi)
[21:02:37] <earnestly> koollman: I used jq once with a database consisting of line separated json objects full of arrays.  lookup performance is linear (memory usage was constant).  https://0x0.st/-iGY.png
[21:02:41] <strajder> for most applications which are not complex relational databases with millions of records it is far simpler to use tsv than things like <something>sql or <whatever>db
[21:02:43] <cassepipe> Hi ! Not sure if this is the right place to ask but I genrally get extensive knowledge from here so... I am trying to implement a pipe program in C as an exercise. It works like ```./pipes cmd_1 cmd2 ... cmd_n``` to imitate cmd1 | cmd2 | cmd3 ...
[21:02:43] <cassepipe> Implementations I have found generally fork-exec the first command, wait() for it then launch the second one but it seems wrong to me because if the pipe is full and the main process waits on the first execs, the second command will not be execed, the pipe will not be read and you have a deadlock, IIUC. It seems more reasonable to exec 1 and 2, wait for 1, exec 3, wait for 2, exec 4 ... But even then I wonder if there can be
[21:02:43] <cassepipe> deadlocks. Am I being clear enough ?
[21:02:44] <koollman> for example, arrow has some nice properties ... like, you can use it reasonably well in C (or other languages), it is an actual spec, and the parsing time is minimal
[21:03:02] <earnestly> (y is objects, y is time)
[21:03:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:04:07] <earnestly> koollman: I do try to follow DJB's ideal which is essentially "Don't Parse", also avoiding weird machines
[21:04:11] <caze> cassepipe: 4 3 2 1
[21:04:32] <koollman> earnestly: well, "don't parse" is definitely false with csv and json :)
[21:04:38] <earnestly> Yes
[21:05:09] <koollman> earnestly: arrow is pretty close. you can mmap the on-disk format and use it
[21:05:11] <earnestly> koollman: Used jq as a better DSL than sql, the json was only consequential
[21:05:40] <john99> well, in favor the relational databases,inner coherence of datais pretty inportant in alot of cases
[21:05:52] <earnestly> koollman: Hm, columnular.  Reminds me of kdb and such
[21:06:03] <koollman> earnestly: not quite the same
[21:06:12] <earnestly> No, but reminds me
[21:06:28] <earnestly> Probably not as good
[21:06:39] <cousteau> cassepipe: I'd imagine you create 4 pipes, then fork 4 times, and in each fork you exec the process using the previous pipe as input and the next pipe as output
[21:06:40] <koollman> another format I end up using often enough is "bunch of entries plus index file". I'm not sure it has an official name, though. (but basically, write C-strings or length-prefixed string in a file, and have another file recording the offset of each entries)
[21:06:49] <earnestly> But nothing really comes close to the performance of kdb and its decendents
[21:06:54] <cousteau> and then the original (non-forked) proc just waits for the 4 forks
[21:07:24] <koollman> earnestly: I don't know kdb enough to comment. all I can say is theree are some very, very efficient options currently
[21:07:30] <earnestly> koollman: Assuming accurate: https://shakti.com/ (benchmarks, javascript nonsense can't link exact)
[21:07:42] <cousteau> that way you don't have one of the commands waiting for the previous ones to finish; it just gets the output as it gets it.  You don't need to cache the whole output somewhere.
[21:07:56] <cousteau> Caching the whole output might be a bad idea if it's very big.
[21:08:03] <earnestly> koollman: > nyse taq: 1trillion rows (50million trades 1billion quotes per day)
[21:08:38] *** Joins: rgrinberg (~textual@2806:101e:7:b2b:a996:6e46:afb:f82e)
[21:08:55] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[21:09:01] <koollman> earnestly: well, that's compared to pretty 'slow' sql db. I do wonder how it compare against fast things
[21:09:15] *** Joins: Klinda (~superleag@user/klinda)
[21:09:27] <earnestly> Should be possible to experiment
[21:09:44] <cousteau> cassepipe: I don't remember how you're supposed to create pipes (I think it's pipe2() in Linux and friends) nor how to set exec to use those as stdin and stdout, but once you figure that out there's nothing else you need to do
[21:10:19] <cassepipe> cousteau: So you're saying launch fork-exec all commands one after the other (after a little redirection ofc) and then remember all the pids and wait for them one after another ?
[21:10:29] <earnestly> koollman: But it's likely maybe due to use of columns which comes with natural deduplication
[21:10:45] <cousteau> cassepipe: well, wait for all of them; in any order I guess
[21:11:04] <cassepipe> cousteau: That part is  figured out. The pb is more what the general architecture should be.
[21:11:08] <cousteau> but yes I guess you need to remember the pids.  I don't remember how fork() was used tbh
[21:11:32] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 240 seconds)
[21:11:39] <earnestly> koollman: (Arthur is quite particular about cache coherence and tries to keep everything there iirc (about k anyway).  Columns are good for this)
[21:11:51] <caze> cassepipe: Do you know what blocking is?
[21:12:05] <cassepipe> caze: Mmm not sure
[21:12:09] <cousteau> cassepipe: anyway my advice is not to wait for a process to finish before you launch the next; instead, have all processes launch simultaneously and have data flow through them
[21:12:36] <cousteau> maybe I'm biased because I'm an electronic engineer and I like to think in terms of dataflow, but that's how I'd do it.
[21:12:39] <cassepipe> caze: Is that when a pipe is full and blocks writing to itself and waiting for some data to be read ?
[21:12:51] <koollman> cassepipe: you can't wait the for cmd1 and cmd2 to finish if cmd3 isn't running. pipes aren't storage system. imagine each command read one small thing, then write one small thing
[21:13:08] <koollman> so all programs must be running in parallel for the pipeline to work
[21:13:17] <caze> cassepipe: No. It's when a process is waiting on data, and there isn't any available to be read.
[21:13:19] <koollman> and they will block at appropriate time
[21:13:57] <cassepipe> cousteau: I don't why it first seemed unreasonnable to exec everything then wait everything, seems reasonable now.
[21:14:11] <caze> cassepipe: If you start the consumer first, it will block until the producer has something.
[21:14:17] <koollman> earnestly: I'm sure kdb is pretty good (although it's the first time I hear about it). But there are other pretty good engines out there. including columnar, or optimized for fast/parallel processing
[21:14:29] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[21:14:37] *** Quits: john99 (~john99@170.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:14:51] <cassepipe> caze: So it's fine then, I can launch everything, the consumers will just wait right ?
[21:14:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[21:15:05] <cassepipe> koollman: Right
[21:15:19] <caze> cassepipe: Yes.
[21:15:30] <koollman> caze: which is fine, really. I know I've written implemenation starting with the end of the pipeline, and I'm pretty sure some shell have them too
[21:16:02] <cassepipe> koollman: Interesting thanks
[21:16:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[21:17:15] <cassepipe> Btw do I really have to wait()  ?
[21:17:52] <cassepipe> The only reason to is to return an error code in case of an issue right ?
[21:18:20] <caze> Aren't you just using stdin/stdout?
[21:18:22] <cassepipe> But which one should I return when there are so commands being executed ?
[21:18:38] <koollman> cassepipe: that's for you (or some specification) to decide
[21:19:07] <caze> cassepipe: https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Pipeline.svg/280px-Pipeline.svg.png
[21:19:08] <cousteau> cassepipe: because you weren't thinking in terms of multiple pipes, maybe
[21:19:32] <cousteau> but that's pretty much what `cmd1 | cmd2 | cmd3 | cmd4` does
[21:19:33] <cassepipe> caze: I am using stding -> pipe1[WRITE_END] -> pipe2[READ_END] -> pipe2[WRITE_END] -> ... -> stdout
[21:19:45] <koollman> if you want to look like a posix shell, return the status of the last process in the pipeline
[21:20:12] <koollman> if you want to give useful information, either combine the status (like, send a failure if anything fail) or provide an array of return status
[21:20:20] <cassepipe> koollman: zsh and bash seem to be returning the error code of the last command to fail
[21:20:20] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[21:20:41] <koollman> cassepipe: that's the posix shell behavior. bash also provides the two other options
[21:20:52] <cassepipe> koollman: Oh I did not know, thanks
[21:20:56] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:21:02] <cousteau> should be   cmd1(input=stdin, output=pipe1[write_end]);  cmd2(input=pipe1[read_end], output=pipe2[write_end]);  ...
[21:21:11] *** Joins: useretailz (~useretail@31.41.69.140)
[21:21:18] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[21:21:21] <koollman> cassepipe: with bash, set -o pipefail, changes the behavior so it returns a failure if anything in the pipeline fail
[21:21:25] <cassepipe> cousteau: That's what it is indeed
[21:21:37] <cassepipe> koollman: good to know thanks
[21:21:41] <cousteau> yeah, the arrows you wrote were confusing
[21:21:43] <koollman> cassepipe: and, still with bash, you get a special variable PIPESTATUS, which is an array of status
[21:22:05] <koollman> (with zsh, it is named pipestatus)
[21:22:21] <cassepipe> koollman: I thought Bash did not have arrays
[21:22:43] <cassepipe> Oh maybe it only does not have string arrays
[21:22:46] <koollman> you were wrong
[21:22:56] <cassepipe> koollman: Again
[21:23:05] <koollman> don't mix what a posix shell can do, and what bash or other shells can do
[21:24:37] <cousteau> bash has arrays, but well, they're not POSIX because POSIX shell has no arrays... I think
[21:24:37] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Ping timeout: 240 seconds)
[21:24:46] <koollman> correct
[21:25:41] <cousteau> ,sh a=(4 8 15 16 23 42); echo "${a[5]}"
[21:25:42] <candide> cousteau: 42
[21:25:59] <cousteau> (it seems that ,sh is bash)
[21:26:14] <koollman> might be an option for a stricter shell in there
[21:26:26] <koollman> cassepipe: https://bpa.st/EDSA
[21:26:43] <cousteau> #bash has `sh#`
[21:26:59] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[21:27:09] <koollman> I mean for candide syntax :)
[21:27:22] <cousteau> yeah I was just wondering
[21:27:43] <cousteau> I could have sworn candide also does stuff in #bash under a pseudonym
[21:27:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68)
[21:28:21] <cousteau> ,sh dash -c 'a=(4 8 15 16 23 42); echo "${a[5]}"'
[21:28:22] <candide> cousteau: prog.sh: line 1: dash: command not found
[21:28:30] <cousteau> ouch.
[21:28:32] <cassepipe> Thanks fot your help all
[21:28:49] <fizzie> ,sh bash --posix -c 'a=(4 8 15 16 23 42); echo "${a[5]}"' # interestingly, bash --posix is fine with that as well
[21:28:50] <candide> fizzie: 42
[21:29:08] <fizzie> Guessing because it's not a conflicting extension as such.
[21:29:10] <cousteau> fizzie: --posix only disables conflicting extensions
[21:29:11] *** Quits: Fr1nge (~Fr1nge@68.183.3.27) (Quit: WeeChat 3.4)
[21:29:15] <cousteau> yep
[21:29:45] <fizzie> ,sh ls /usr/bin/*sh
[21:29:46] <candide> fizzie: /usr/bin/bash /usr/bin/chsh /usr/bin/gettext.sh /usr/bin/gvmap.sh /usr/bin/hash /usr/bin/hg-ssh /usr/bin/instmodsh /usr/bin/ksh /usr/bin/lchsh /usr/bin/lesspipe.sh /usr/bin/python-argcomplete-tcsh /usr/bin/rksh /usr/bin/setup-nsssysinit.sh /usr/bin/sh /usr/bin/source-highlight-esc.sh /usr/bin/src-hilite-lesspipe.sh /usr/bin/ssh /usr/bin/stapsh /usr/bin/tclsh /usr/bin/wish /usr/bin/xrefresh /usr/bin/zsh
[21:29:47] <koollman> would need to call dash or another 'fewer extensions' shell to compare
[21:31:27] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[21:32:13] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[21:32:44] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[21:33:01] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[21:36:04] *** Joins: magla (~gelignite@55d4d2a6.access.ecotel.net)
[21:36:46] *** Joins: MrFantastik (~f@2607:f598:bbda:f0:d632:e505:b2a4:110f)
[21:37:14] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[21:37:32] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[21:37:36] *** Quits: _LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[21:37:37] *** Joins: dan_pena (~dan_pena@109.190.253.16)
[21:37:40] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:39:56] *** Quits: Macuser (~Macuser@2600:1003:b450:1683:10c0:eb04:3ea0:7733) (Ping timeout: 245 seconds)
[21:41:26] *** Quits: AmR (~AmREiSa@156.199.202.96) (Quit: Konversation terminated!)
[21:41:33] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[21:42:16] *** Joins: Viewday115 (~Viewday@user/viewday)
[21:43:33] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[21:43:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 260 seconds)
[21:43:59] *** Viewday115 is now known as Viewday11
[21:44:01] <cousteau> ,sh ls /bin/*sh
[21:44:02] <candide> cousteau: /bin/bash /bin/chsh /bin/gettext.sh /bin/gvmap.sh /bin/hash /bin/hg-ssh /bin/instmodsh /bin/ksh /bin/lchsh /bin/lesspipe.sh /bin/python-argcomplete-tcsh /bin/rksh /bin/setup-nsssysinit.sh /bin/sh /bin/source-highlight-esc.sh /bin/src-hilite-lesspipe.sh /bin/ssh /bin/stapsh /bin/tclsh /bin/wish /bin/xrefresh /bin/zsh
[21:44:23] <cousteau> well that wasn't too useful
[21:44:49] <cousteau> ,sh ls /bin/*sh | wc -l; ls /usr/bin/*sh | wc -l
[21:44:50] <candide> cousteau: 22 22
[21:44:50] <bdax> in c89 you can check if a double has overflowed with `fabs(n) >= HUGE_VAL` (or `n < -DBL_MAX || n > DBL_MAX`, is one better than the other?), anyway, is there a way to check if a double has underflowed?
[21:44:58] * cousteau suspects the two dirs are linked
[21:45:17] *** Quits: dan_pena (~dan_pena@109.190.253.16) (Ping timeout: 256 seconds)
[21:45:55] *** Joins: dan_pena (~dan_pena@109.190.253.16)
[21:46:05] <cousteau> bdax: pretty sure there's a DBL_MIN, which is the lower limit before you start with the subnormal numbers (the ones where precision gets reduced until you get to 0)
[21:46:46] <cousteau> DBL_MIN = minimum normalized positive floating point number
[21:47:19] <cousteau> DBL_MIN/2 is still >0, but it's in the region where precision starts being too small, so you may consider it as "underflowed"
[21:47:54] <cousteau> otherwise, you can check whether the number == 0.0, for a totally underflowed number
[21:49:28] <cousteau> as for the difference between HUGE_VAL and DBL_MAX... honestly I have no idea
[21:49:44] <bdax> ah okay, floating point math isn't something I know much about, but I assume 0.0 can occur normally, but I can check if `n < DBL_MIN` and that would reliably indicate an underflow?
[21:49:48] <cousteau> DBL_MAX is a well-defined limit, whereas HUGE_VAL doesn't seem to have many requirements
[21:50:07] <fizzie> HUGE_VAL may or may not be infinite; DBL_MAX never is.
[21:50:14] <cousteau> ah, OK
[21:50:19] *** Quits: MrFantastik (~f@2607:f598:bbda:f0:d632:e505:b2a4:110f) (Remote host closed the connection)
[21:50:20] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[21:50:37] *** Joins: MrFantastik (~f@2607:f598:bbda:f0:6414:baad:84e2:9312)
[21:50:43] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[21:51:03] <cousteau> fizzie: does the standard say anything about what HUGE_VAL is?  From what I can tell, it could just be +0.0
[21:51:09] *** Joins: useretailz (~useretail@31.41.69.140)
[21:51:44] <fizzie> Only if zero is signed, since it has to be positive. ;)
[21:51:49] <cousteau> ah nvm, HUGE_VAL is what a floating overflow returns, so HUGE_VAL has some significance
[21:52:06] <bdax> I just realised my previous sentence was a silly one (0.0 would be < DBL_MIN)
[21:52:15] *** Quits: WAR10CK (~WAR10CK@14.223.182.108) (Remote host closed the connection)
[21:52:27] <cousteau> fizzie: yeah, hence why I wrote +0.0 and not just 0.0... as in "yeah I totally mean a POSITIVE 0.0, in case it wasn't clear"
[21:52:35] *** Joins: treble (~treble@user/treble)
[21:52:52] <cousteau> (not like writing `+0.0` in C ensures that the result will be a signed positive 0)
[21:53:27] <cousteau> bdax: overall, you can't tell whether something is 0 because of rounding errors or because it is 0
[21:53:39] <cousteau> because, as you said, 0 is a perfectly normal result
[21:53:53] <fizzie> cousteau: Well, specifically, it's the value used to indicate overflow for <math.h> functions, I don't think it's required to be the result of all floating-point overflow in general. So I guess it _could_ be +0.0, it'd just not be a great choice.
[21:54:13] <bdax> ah okay, well I guess I just found out why underflow error reporting is implementation-defined in c89
[21:54:23] *** Quits: dan_pena (~dan_pena@109.190.253.16) (Ping timeout: 252 seconds)
[21:54:31] <cousteau> also, if you have a=4.2 and b=4.2, but they're not exactly 4.2 (just were calculated in such a way that the result is approx 4.2), then a-b might be way above DBL_MIN
[21:54:57] *** Joins: AmR (~AmREiSa@156.199.202.96)
[21:55:07] <cousteau> fizzie: yeah, I realized that's what HUGE_VAL means later
[21:55:19] <cousteau> it's just taht the definition itself was very little meaningful
[21:55:28] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:55:30] <cousteau> it didn't even say that it was meant to be a huge number
[21:55:43] <bdax> right, thanks cousteau, out of interest, where do people learn these details? is there a recommended book?
[21:56:31] <cousteau> not sure; I've learned them mostly by looking at the standard, practice in general (which made me look at the right parts of the standard), and hanging around in here
[21:56:47] <fizzie> Here's the rationale for some background of HUGE_VAL: https://0x0.st/orGt.txt
[21:56:55] <cousteau> the two books I've heard recommended most often are K&R2 and K.N.King's
[21:58:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:03:46] <cassepipe> Hi it's me again. Here is one of the multiple pipes implementation I could find that seemed wrong. Do we agree that it's wonrg or am I missing somehting ?
[22:04:31] <cassepipe> Or this for example : https://gitlab.com/mboivin/pipex/-/blob/main/src/executor/execute.c
[22:04:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[22:04:45] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[22:04:55] <earnestly> koollman: (kdb apparently segfaults all the time lol)
[22:05:12] <cassepipe> https://stackoverflow.com/questions/12981199/multiple-pipe-implementation-using-system-call-fork-execvp-wait-pipe-i
[22:05:29] <koollman> earnestly: but maybe it segfaults fast!! ;)
[22:05:36] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:08:10] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[22:08:18] <earnestly> koollman: I only like it, (k, j, etc.) because they shatter the framing in my thinking
[22:08:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[22:08:38] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[22:08:44] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:08:50] <johnjaye> i think i ordered Modern C. i guess i'll figure out if it's good once i get it
[22:09:11] *** Joins: stonkey (~stonkey@user/stonkey)
[22:09:15] <koollman> earnestly: it's always interesting to look at. I do recommand you look at arrow files, then, too. (and maybe at some engines using it)
[22:09:47] *** Joins: n3rdy1 (~n3rdy1@c-73-14-53-56.hsd1.co.comcast.net)
[22:10:32] <johnjaye> perhaps i ordered the wrong one if the king book is better.
[22:10:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:12:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:14:36] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[22:16:23] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[22:18:03] *** Quits: rgrinberg (~textual@2806:101e:7:b2b:a996:6e46:afb:f82e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:18:08] <cassepipe> Well I guess no one is in the mood to read some bad C code
[22:19:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:19:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:19:32] *** Joins: wroathe (~wroathe@user/wroathe)
[22:19:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[22:19:39] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[22:20:03] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[22:20:43] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[22:21:46] <pragma-> sh is totally not bash
[22:21:57] <pragma-> it shouldn't be
[22:22:08] <johnjaye> i learned that the hard way
[22:22:18] <pragma-> ,sh echo $SHELL
[22:22:19] <candide> pragma-: /bin/bash
[22:22:22] <pragma-> wtffffff
[22:22:25] <johnjaye> on freebsd there is no tab completion in sh. so yeah
[22:22:39] <johnjaye> at least i have vi though...
[22:23:07] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[22:24:07] <pragma-> Weird. `sh` used to invoke /bin/sh but now it's invoking /bin/bash
[22:24:33] <pragma-> Every time I do a distribution upgrade, there's some new option or environment variable or flag that I need to add or remove or adjust.
[22:24:35] <pragma-> Fucking hell
[22:25:40] <pragma-> ,zsh echo $SHELL
[22:25:41] <candide> pragma-: /bin/bash
[22:25:44] <pragma-> what. the. fuck.
[22:25:58] <pragma-> all the shells are pointing at bash now
[22:26:57] <pragma-> ,zsh /bin/zsh -c 'echo $SHELL'
[22:26:57] <candide> pragma-: /bin/bash
[22:27:01] * pragma- squints.
[22:27:07] <pragma-> cousteau: pls fix
[22:27:47] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[22:28:02] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[22:28:07] <cousteau> pragma-: I'm afraid `echo $SHELL` is actually useless
[22:28:08] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[22:29:11] <pragma-> ,zsh /bin/zsh -c 'echo $0'
[22:29:12] <candide> pragma-: /bin/zsh
[22:29:15] <pragma-> oh ok
[22:30:05] <pragma-> Well, sh is totally supposed to be invoking /bin/sh not /bin/bash
[22:30:29] <pragma-> there's ,bash for bash
[22:31:09] <pragma-> Oh, right, $SHELL tells the system what the default shell is, not what shell you're using.
[22:32:56] <pragma-> cousteau: it's totally sh, not bash.
[22:33:03] <pragma-> ,sh ps -p $$
[22:33:04] <candide> pragma-:     PID TTY          TIME CMD   68145 tty1     00:00:00 sh
[22:33:08] <pragma-> That says sh!
[22:33:13] <pragma-> ,bash ps -p $$
[22:33:13] <candide> pragma-:     PID TTY          TIME CMD   68153 tty1     00:00:00 bash
[22:33:18] <pragma-> ,zsh ps -p $$
[22:33:19] <candide> pragma-:     PID TTY          TIME CMD   68161 tty1     00:00:00 zsh
[22:33:27] * pragma- relaxes again.
[22:34:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:35:10] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[22:35:23] <cousteau> ah so that's it
[22:35:23] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[22:35:39] *** Joins: epony (epony@user/epony)
[22:35:44] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[22:36:03] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[22:36:09] *** Joins: useretailz (~useretail@31.41.69.140)
[22:36:15] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:38:04] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[22:38:49] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[22:38:57] *** Quits: MrFantastik (~f@2607:f598:bbda:f0:6414:baad:84e2:9312) (Ping timeout: 240 seconds)
[22:41:11] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 245 seconds)
[22:41:29] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[22:42:33] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[22:43:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[22:43:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:44:05] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.4)
[22:44:45] *** Joins: dan_pena (~dan_pena@109.190.253.16)
[22:45:06] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:46:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com)
[22:47:03] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[22:47:10] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:50:02] *** Quits: dan_pena (~dan_pena@109.190.253.16) (Ping timeout: 240 seconds)
[22:51:00] *** Joins: dan_pena (~dan_pena@109.190.253.16)
[22:51:12] *** Joins: s0k1t (~s0k1t@66.115.189.132)
[22:52:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:52:53] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Read error: Connection reset by peer)
[22:53:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:53:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9411-5ab1-d842-d165.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[22:54:39] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[22:55:46] *** Quits: dan_pena (~dan_pena@109.190.253.16) (Ping timeout: 268 seconds)
[22:56:17] <cousteau> ,sh ls -l /bin/sh
[22:56:18] <candide> cousteau: lrwxrwxrwx. 1 root root 4 Jul 21 11:34 /bin/sh -> bash
[22:56:39] <pragma-> wtffff
[22:56:39] *** Joins: dan_pena (~dan_pena@109.190.253.16)
[22:56:57] <cousteau> sh is bash anyway, so it'll support bash extensions as long as they're posix-compatible
[22:57:32] <pragma-> I used to be an expert at it. Then they changed what "it" is.
[22:57:35] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:00:11] *** Quits: terminalpusher (~terminalp@2a01:586:911a:1:a859:fe95:d7d4:d437) (Remote host closed the connection)
[23:01:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:01:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:01:20] *** Joins: wroathe (~wroathe@user/wroathe)
[23:01:59] <meator> What should I do when I need advanced data structures (trees, hashtables)?
[23:02:02] *** Quits: dan_pena (~dan_pena@109.190.253.16) (Ping timeout: 252 seconds)
[23:02:16] *** Quits: s0k1t (~s0k1t@66.115.189.132) (Quit: Leaving)
[23:02:20] <cousteau> get a library that implements those
[23:02:35] *** Joins: s0k1t (~s0k1t@66.115.189.132)
[23:02:46] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[23:02:49] <meator> What library implements those?
[23:02:54] <koollman> many
[23:03:00] <koollman> maybe too many :)
[23:03:59] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[23:04:28] <cousteau> I think that's the kind of thing gobject implements... to quote one
[23:05:14] *** Quits: s0k1t (~s0k1t@66.115.189.132) (Client Quit)
[23:05:38] <cousteau> you could also try to implement it yourself, but I don't recommend it (other than as practice) -- it'll be a waste of time and you're more likely to make mistakes or implement it less efficiently
[23:07:00] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[23:07:28] *** Joins: agonhajdari (~textual@user/agonhajdari)
[23:08:16] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Client Quit)
[23:08:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[23:09:03] *** Joins: DrNick42_ (~DrNick42@bastion.spikeyfishtech.uk)
[23:09:13] <meator> I have seen GNU libavl. But I think it's more intended as a learning resource.
[23:09:49] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (Ping timeout: 240 seconds)
[23:10:45] <koollman> meator: https://pkgverify.com/cpp/machine-learning/inputsh-awesome-c#table_of_contents_14 some available choices
[23:10:47] <candide> Title of koollman's link: A curated list of C good stuff. This list contains only free software for code, and sellers who aren't evil for physical resources.
[23:11:23] <koollman> my current preference might be qlibc ... but I won't even try arguing for one vs another :)
[23:13:29] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[23:14:17] <meator> Thanks! I'll look at the things you sent me.
[23:14:42] *** Joins: malina (~malina@user/malina)
[23:17:25] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:23:51] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[23:28:32] *** Joins: s0k1t (~s0k1t@66.115.189.132)
[23:31:48] *** Joins: JarbonFeh (~JarbonFeh@197.15.105.66)
[23:31:59] *** Joins: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[23:32:51] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[23:33:02] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:34:57] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[23:37:04] *** Joins: MrFantastik (~f@2607:f598:bbda:f0:997e:52bf:c319:57b5)
[23:40:39] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[23:41:11] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:41:33] *** Joins: s0k1t_ (~s0k1t@68.235.43.30)
[23:41:51] *** Joins: tejr (~tejr@user/tejr)
[23:43:43] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[23:44:33] *** Quits: JarbonFeh (~JarbonFeh@197.15.105.66) (Quit: Quit)
[23:45:00] *** Quits: s0k1t (~s0k1t@66.115.189.132) (Ping timeout: 240 seconds)
[23:47:33] *** Joins: masterbuilder (~user@user/masterbuilder)
[23:49:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:51:08] *** Joins: s0k1tisgay (~s0k1t@193.27.13.184)
[23:55:03] *** Quits: s0k1t_ (~s0k1t@68.235.43.30) (Ping timeout: 256 seconds)
[23:57:28] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Quit: The Lounge - https://thelounge.chat)
[23:57:45] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[23:57:58] *** Quits: jda (~jadra@chai.0xbad.coffee) (Quit: ZNC - https://znc.in)
[23:58:09] *** Joins: jda (~jadra@chai.0xbad.coffee)
[23:59:02] *** Joins: Akiva (~Akiva@user/Akiva)
[23:59:31] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 245 seconds)
[23:59:52] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:59:56] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 245 seconds)
