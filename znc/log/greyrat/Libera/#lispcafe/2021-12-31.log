[00:12:49] <hayley> gilberth: https://sourceforge.net/p/sbcl/mailman/message/37409213/
[00:12:50] -ixelp- Steel Bank Common Lisp / Re: [Sbcl-devel] CBLOCK positioning
[00:15:50] <gilberth> Good morning, hayley!
[00:16:38] <hayley> Morning.
[00:17:30] <gilberth> Sounds good.
[00:19:24] <gilberth> Must me some quite olde bitrot then. CMUCL 20a also doesn't properly layout loops.
[00:20:13] <hayley> Do you think Charles wants me to fix that the SBCL compiler has two loop detection techniques, or just write the comment.
[00:21:01] <gilberth> I believe he just wants a proper comment on what you do and what the rationale is.
[00:22:05] <hayley> Right.
[00:23:46] <gilberth> I left here a little thinking of mine for you to pick up.
[00:26:13] <hayley> Perhaps you might want to test with that patch, but if you've already managed to coerce SBCL into working, it might not matter.
[00:27:23] <gilberth> I'd love to test with your patch. Do you have a patch file for me?
[00:27:59] <hayley> https://sourceforge.net/p/sbcl/mailman/attachment/00c388c5-b70b-e372-b30c-22244792150f%40applied-langua.ge/1/
[00:28:10] <hayley> I don't know how git made the patch, admittedly.
[00:28:30] <gilberth> What I do is hunt and peck.
[00:29:20] <gilberth> hayley: You may just send me the modified DEFUNs. I could then load them into an existing SBCL.
[00:29:30] <gilberth> The Lisp way :-)
[00:29:42] <hayley> Read off https://github.com/no-defun-allowed/swcl/commit/bcff5c765092ff13a64323dec375708c431b81bd then.
[00:29:42] -ixelp- Sort blocks so that we fall into blocks that are in the same loop. ¬∑ no-defun-allowed/swcl@bcff5c7 ¬∑ GitHub
[00:31:03] <hayley> It can't be that terrible if I can make two RE libraries consistently faster with it (one-more-re-nightmare and regular-type-expressions).
[00:31:37] <gilberth> That should do. Thanks.
[00:34:18] <hayley> https://www.youtube.com/watch?v=-iztsqviqko
[00:34:19] -ixelp- The Joy Circuit (Live 81) - YouTube
[00:34:31] <gilberth> PGO, when?
[00:34:48] <hayley> Sea of nodes when?
[00:35:33] <gilberth> Well, SBCL is doing other silly things. I believe we could need a modern compiler.
[00:35:53] * hayley points in the general direction of the SICL compiler
[00:36:16] * gilberth is not holding his breath.
[00:40:17] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 250 seconds)
[00:40:57] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[00:51:04] * hayley still wonders if she should continue the HN comment thread.
[00:51:56] <hayley> "If you use a regional collector, such as the Train, you don't have to scan the whole heap to reclaim garbage, and thus have better cache usage." "Yeah, but you eventually have to scan the whole heap." But the Train literally doesn't, that's the point. (It also takes its damn time with circular garbage theoretically, but it still doesn't scan the whole heap.)
[00:54:46] <hayley> But I guess I am cheating with my statement about making two RE libraries faster, when I gleaned the sort of code to generate from regular-type-expressions.
[00:59:25] <gilberth> And? Have you read what Charles wrote?
[01:00:08] <hayley> It's generally a good move? Sure.
[01:01:05] <gilberth> For CPUs within the vicinity of our central star, yes.
[01:01:47] <gilberth> Anyhow, bbl.
[01:02:48] <hayley> https://www.youtube.com/watch?v=OtuIaHSMM2w
[01:02:49] -ixelp- Sparks - National Crime Awareness Week - YouTube
[01:03:20] <gilberth> [With C the bar now is at 3GB/s.]
[01:04:18] <hayley> Not making it awfully easy.
[01:04:35] <hayley> But as I take a normal Lisp vector I can't really get away with a sentinel at the end.
[01:04:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:05:14] <gilberth> As I said, this is an API issue. I don't have this problem :-)
[01:05:52] <gilberth> And there other options still.
[01:06:07] <gilberth> Didn't I say that I am not here?
[01:08:16] <edgar-rft> we can't hear you if you speak somewhere else
[01:13:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:14:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058)
[01:17:53] <hayley> https://www.youtube.com/watch?v=WA1iUqxIzQg
[01:17:54] -ixelp- I Nearly Married a Human - YouTube
[01:42:27] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 250 seconds)
[01:44:11] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[01:55:03] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 268 seconds)
[01:58:21] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[02:05:09] *** Joins: notzmv (~zmv@user/notzmv)
[02:07:56] <amazigh> üñ•Ô∏è  üï¶ ‚òï ... what can possibly go wrong...
[02:21:36] <epony> on a grand scale, nothing
[02:22:59] <amazigh> ^^'
[02:25:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[02:26:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:29:04] <amazigh> le grand walloo!
[02:30:59] <hayley> https://github.com/joekoolade/JOE
[02:31:00] -ixelp- GitHub - joekoolade/JOE: JOE can run a Java program without an operating system by virtualizing the virtual machine
[02:38:20] *** Joins: phantomics (~phantomic@97-118-174-39.hlrn.qwest.net)
[02:39:29] <notzmv> sounds scary
[03:05:07] <hayley> https://sourceforge.net/p/sbcl/sbcl/ci/2e6c6fac3b8caf618c0e4263244f7c3bed7f85ce/ first commit!!!111!!one
[03:05:10] -ixelp- Steel Bank Common Lisp / sbcl / Commit [2e6c6f]
[03:07:31] <Catie> Hell yeah!!!
[03:38:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:45:55] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[03:48:15] <sm2n> congrats!
[03:48:17] <sm2n> I didn't realize postgresql basically has eval
[03:48:19] <sm2n> ...but on text strings
[04:13:02] <hayley> https://www.youtube.com/watch?v=53lX3v4Kfk4
[04:13:03] -ixelp- Sparks - The Calm Before The Storm - YouTube
[04:27:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:27:48] <dave0> maw
[04:30:33] <hayley> maw
[04:30:43] <dave0> maw hayley 
[04:31:12] <dave0> hayley: it's new years eve!
[04:31:18] <dave0> i might sleep :-)
[04:34:52] <gilberth> dave0: Is your plan to sleep til next year?
[04:35:16] <dave0> aha!
[04:35:30] <dave0> gilberth: it sounds better when you say it like that :-p
[04:35:53] <dave0> my friend is supposed to email me if there's a party
[04:36:06] <dave0> nothing yet
[04:36:41] <gilberth> A party would be fun for a change.
[04:37:06] <dave0> yeah i haven't had a drink all year
[04:38:27] <gilberth> Well, my last party was IIRC two years ago. And I haven't had a drink whole year. Won't have one tomorrow either.
[04:39:20] <dave0> two years sounds right... right when covid struck
[04:40:15] <gilberth> For me Covid makes no difference in that regard.
[04:40:49] <dave0> gilberth: you could be the one who throws the party
[04:41:09] <gilberth> Very funny.
[04:42:37] <dave0> just don't announce it on facebook :-)
[04:43:00] <dave0> a couple of years ago some kid threw a party and put it on facebook and 500 people turned up lol
[04:43:02] <gilberth> Where should I announce it then?
[04:43:41] <dave0> ring a couple people and say "party at my place"
[04:44:00] <gilberth> Sure, what's your phone number?
[04:44:15] <dave0> i don't have a phone :-p but you can tell me on irc!
[04:45:42] <gilberth> I could dial random numbers, I guess. Though I doubt I would be taken serious.
[04:48:00] <gilberth> Let's see, it seems the minimum distance between me and the dozen or so FB contacts of mine is about 350km. Announcing there would be safe.
[04:48:19] <dave0> call your cousin, tell him to bring some mates!
[04:50:28] <gilberth> All two of them? Nah, he prefers watching TV^WNetflix.
[04:55:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[05:00:04] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[05:03:01] *** Joins: Alfr (~Alfr@user/alfr)
[05:04:52] *** Joins: mrmr1 (~mrmr@user/mrmr)
[05:06:37] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[05:06:37] *** mrmr1 is now known as mrmr
[05:12:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:16:15] <moon-child> dave0: I ran out of wine the other day, and it is snowy so I do not want to go to the liquor store
[05:16:46] <dave0> moon-child: bummer :-(
[05:16:50] <dave0> do you have delivery?
[05:17:05] <dave0> gilberth: they could watch TV at your place
[05:17:11] <moon-child> hmm, maybe.  But then I would be forcing somebody else to go out in the snow
[05:18:08] <dave0> gilberth: bbq counts as a party.. cook some sausages and gather round the tv
[05:18:23] <gilberth> dave0: Terrific. Watching TV! How exciting. Not. I hate that.
[05:18:58] <dave0> i think you hate parties!
[05:19:22] <moon-child> tv doesn't seem very party-ish
[05:19:32] <moon-child> no one celebrates while watching tv
[05:19:35] <gilberth> Sitting around a TV watching some trash and not talk to each other is not my idea of a party.
[05:20:20] <dave0> i think i have low standards for parties
[05:21:20] <gilberth> Well, I am half a woman, I like talking to people and have an unlimited supply of words, as you might have noticed. ;)
[05:21:22] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:22:36] <hayley> .oO(It is almost 2022 and I had to subscribe to a mailing list.)
[05:22:42] <gilberth> That's what I need all that space for. To stash more words and punctuation I find here and there.
[05:22:42] <hayley> gilberth: But I got my change merged into SBCL.
[05:23:06] <moon-child> hayley: I am subscribed to three mailing lists
[05:23:08] <moon-child> I think
[05:23:12] <moon-child> yeah
[05:23:35] <moon-child> wait, no.  5.  But only 2 of them are active
[05:23:41] <gilberth> hayley: Yes, milady, Congrats! I saw that. I wonder if that disturbs my underflow handling. Next year.
[05:23:46] <dave0> a few people, somethng to eat, a few beers, turn the tv down and chat
[05:24:02] <dave0> turn up the tv when it's the fireworks
[05:24:17] <gilberth> dave0: What do you need the TV for?
[05:24:19] <dave0> it's more of a party than sleeping lol
[05:24:44] <dave0> gilberth: to watch the celebrations oh you're not in america... i was thinking of the big ball thing that counts down
[05:24:58] <dave0> we have fireworks
[05:25:03] <dave0> and the countdown
[05:25:12] <moon-child> I live in the us, and I have never actually seen that
[05:25:23] <moon-child> and, fireworks are nice, but I do not see the point of watching a video of them
[05:26:20] <gilberth> Oh and lots of ads, I suppose. And blah blah and celebrities that I don't know. And why watch the gala? Because your own real-life party is too boring? Sorry, I am in bad mood.
[05:27:17] <moon-child> oh, yeah, I forgot tv has ads
[05:27:30] <moon-child> I never watch it.  Except when I visit my grandparents
[05:28:19] <gilberth> moon-child: Yes, I have vague memories about that. And: Same here. I don't own a TV since about 1995.
[05:29:09] <dave0> when dad comes over, i turn on the news channel and mute it and put on subtitles ... then i let him talk
[05:29:48] <dave0> if there's a lull in the conversation there's the tv
[05:29:59] <gilberth> Exactly.
[05:30:09] <hayley> https://www.youtube.com/watch?v=AqA5RBl_3NY
[05:30:09] -ixelp- Beat the Clock (Live in Concert) - YouTube
[05:30:37] <hayley> Why does everyone want me to work on Netfarm or the VM or something in the past few days? I'm done with it.
[05:31:09] <sm2n> everyone?
[05:31:30] <sm2n> I grew to dislike fireworks, due to overexposure
[05:31:41] <hayley> Not everyone. But I've had someone PM me every day for the past few days.
[05:31:54] <gilberth> dave0: Ok, granted, your dad might be special. But that was exactly my point. I prefer a real conversation and don't want to be distracted by a TV. And I don't need a TV as a backup just in case the situation would turn out lull.
[05:32:12] <hayley> I strongly suspect I upset someone by taking a pot shot at the Matrix developers who claimed they were close to Smalltalk-ing.
[05:32:17] <sm2n> sounds like spam
[05:32:23] <dave0> gilberth: oh my dad is "special" lol
[05:32:29] <moon-child> hayley: netfarm wen
[05:32:31] <moon-child> hayley: netfarm pls
[05:32:43] <moon-child> hayley: my nets are dying do you know where I can grow some new ones
[05:32:44] <hayley> moon-child: When I'm not in pain developing it.
[05:33:33] * gilberth would rather like to see hayley hacking on a compiler.
[05:33:47] <hayley> "Sure, I'll make this subtle object synchronisation mechanism that uses LRU caching on a damn SQL database, and no one will use it. Wait, no, that's a terrible idea."
[05:33:49] <moon-child> netfarm has a compiler
[05:34:30] <gilberth> moon-child: Ok. Next time I try to be more precise. *sigh*
[05:34:42] <hayley> Eh, the Slacker compiler isn't part of the Netfarm suite technically.
[05:35:23] <hayley> I don't want to standardise an actual programming language, since I don't know what a good one for writing Netfarm programs...er, "dapps" I think they're called, is.
[05:35:43] <sm2n> why is everything an app
[05:35:59] <moon-child> it's still an associated component.  And: would you not eventually compile the netfarm bytecode to something else?
[05:36:11] <epony> sm2n, blame plan9
[05:36:43] <hayley> The VM is designed to avoid things going wrong in unforseeable ways. e.g. if you crash, any side effects are discarded, and integer overflow crashes. (Arguably I could have used bignums to not crash, but we had this discussion already.)
[05:37:07] <hayley> I thought of JITing, but that's an implementation detail and not something I'd put mainline until I know what I'm doing.
[05:37:33] <hayley> ...like the one-more-re-nightmare compiler can take its damn time, and I don't want to do that with untrusted code.
[05:49:17] *** Quits: kotshie (~kotshie@68.72.208.140) (Ping timeout: 240 seconds)
[06:08:58] <hayley> moon-child: Last I checked, the disk was the bottleneck rather than the VM, so naive interpretation works fine enough. (And it's "only" half the speed of CPython, give or take, which is pretty okay for a total hack with full bounds checking on even your environment frames.)
[06:14:17] <hayley> https://www.youtube.com/watch?v=_kTi7-bFWEA
[06:14:17] -ixelp- Sparks - The Calm Before The Storm + The Angels (Silvester Party 2000) - YouTube
[07:03:30] <hayley> https://www.tfeb.org/fragments/2021/12/30/vector-supercomputers/ In which Symbolics 2 turned out to be AVX512 all along or something
[07:03:31] -ixelp- Vector supercomputers
[07:04:29] * hayley reading Hacker News
[07:05:09] <hayley> >If you haven't been writing Rust for a long time, you've probably heard "Rust compile times are long" and so it might be hard for you to gauge whether "over one minute" is excessive for a hot build, luckily I'm here to tell you: of
[07:05:09] <hayley> course it's excessive. Anything over "a few seconds" is excessive.
[07:05:14] <hayley> We haven't learnt anything longer than reaction speed is excessive?
[07:10:29] <drakonis> apple m1 is actually not good? ooops
[07:11:03] <hayley> I think moon-child would have more experience than I do with a M1 machine.
[07:11:33] <hayley> But it's interesting to think that vector units are to deep learning as Lisp machines to symbolic AI.
[07:19:36] <moon-child> drakonis: I have not actually played with it extensively yet (I wrote hello world; and looked, gaga, at completely homogenous sbcl disassembly, but that was it).  Nothing real can ever live up to apple's marketing claims.  That said I expect the design is not _bad_ for pointer-chasing, in part due to the huge cache
[07:21:11] <hayley> You can do that on a Pi 2, if you don't mind not having threads.
[07:21:43] <hayley> FYI https://www.reddit.com/r/LispMemes/comments/qm4e4d/buy_more_arm32_chips/
[07:21:44] -ixelp- buy more arm32 chips : LispMemes
[07:24:08] <hayley> But I guess the author of that is not too butt-hurt because they have the types in the IDE to avoid rebuilding -- oh wait, the slowness was due to typechecking? Ouch.
[07:26:45] <drakonis> lol
[07:28:18] <hayley> (Okay, it was due to monomorphization and having "big" types, but that also does not bode well for live type-checking.)
[07:28:36] <hayley> What no Self does to a mf
[07:28:40] <drakonis> so apple's reality distortion field strikes again?
[07:29:56] <hayley> (And, while the article mentioned time complexity, such as log, linear and quadratic, it conveniently missed that ML type checking is O(2^n). Fun fact!)
[07:30:08] <drakonis> fun!
[07:30:13] <drakonis> that's expensive
[07:30:20] <moon-child> that's global type inference, though, right?
[07:30:39] <hayley> True, n doesn't end up very large in practise.
[07:31:38] <hayley> But it's there, and better, region types apparently are worse in practise than your usual ML types, per implementors of regions in ML.
[07:34:41] <hayley> Eh, but then Rust also uses local type inference and guesses "lifetime elision" rules.
[07:34:54] <hayley> https://www.youtube.com/watch?v=ngGtRRqJlOs
[07:34:54] -ixelp- [YTP] MattKC Exposes His Japanese Wii-ner - YouTube
[07:35:04] <moon-child> I think they still use an smt solver for something
[07:35:35] <moon-child> good thing ixelp tells me when to avoid clicking on links
[07:36:08] <hayley> IIRC the borrow checker is supposed to get ported to an internal Prolog.
[07:36:42] <drakonis> hmmm
[07:36:46] <drakonis> a borrow checker you say?
[07:36:55] <moon-child> indeed
[07:36:58] <moon-child> stinking capitalists
[07:37:08] <moon-child> imagine believing in ownership?
[07:37:15] <drakonis> hah
[07:37:21] <hayley> https://github.com/rust-lang/polonius
[07:37:22] -ixelp- GitHub - rust-lang/polonius: Defines the Rust borrow checker.
[07:37:41] <hayley> Some crabs made the reverse joke, about having indefinite lifetime.
[07:38:05] <drakonis> oh they're finally making a library for that
[07:38:08] <drakonis> interesting
[07:38:14] <hayley> As with most things, the name is lifted from Baker <https://plover.com/~mjd/misc/hbaker-archive/LinearLisp.html>
[07:38:15] -ixelp- ACM Sigplan Notices 27, 8 (Aug. 1992), 89-98.
[07:39:09] <pl> isn't linear lisp pretty much the original borrowchecker language, except it didn't suck by not having any other notion of lifetime management?
[07:39:58] <hayley> Baker also did borrowing...
[07:40:23] <hayley> https://plover.com/~mjd/misc/hbaker-archive/LRefCounts.html "anchored pointers"
[07:40:24] -ixelp- ACM Sigplan Notices 29, 9 (September 1994), 38-43.
[07:41:51] <moon-child> meh borrowing is syntactic sugar
[07:41:53] <moon-child> don't need it
[07:42:11] <hayley> Showing with-a-p to be safe requires dynamic checks(?) or a borrow checker. Linear logic is much simpler.
[07:42:32] <hayley> ...though W-A-P allows you to avoid copying or bumping refcounts.
[07:46:32] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[07:51:47] <hayley> pl: One thing though, is that linearity just tells you when to call free(), which can be useful for modelling some things, but is no good if you are going to complain about the performance of a GC. Hence needing an idea of stacks too, which complicates things more.
[07:58:55] *** Joins: semz (~none@user/semz)
[07:59:59] <hayley> But C stacks do not work for recursive data structures, so you now need to introduce a stack/heap distinction, and this is where (apparently) good intentions pave the way to hell. Now one needs to "move" to avoid copying objects in the heap, where you copy a handle which has a pointer to the actual data that stays in place.
[08:02:39] <hayley> So, two sorts of efficiency chasing which are probably well justified, if you're allergic to a GC for non-linear objects, but make life hard.
[08:08:50] <hayley> If I dial the number on the page, will Henry Baker be on the line??
[08:32:36] <dave0> i got pizza and beer :-)
[08:36:09] <kakuhen> Delicious
[08:37:47] <dave0> it's a treat for new years eve :-)
[08:38:06] <kakuhen> I am debating on translating one of Drew DeVault's copyright blogposts to Japanese because it's a really enlightening read, but the English is nearly imprenetrable for many of my Japanese friends
[08:38:21] <kakuhen> Even ones that have studied English for over six years
[08:42:13] <kakuhen> Can't do it now because I am rushing to finish some things before New Year, and I also found some roswell that is Japanese-only and I told myself to provide an English translation since nobody else is
[08:42:18] <kakuhen> roswell documentation*
[08:42:51] <kakuhen> thankfully, unlike essays on copyright law, computer manuals in japanese are easy to read and translate
[08:43:37] <hayley> Hm, by the terminology of <https://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html> is any IDE that requires information on modules, types, etc, and gleans it from source code, an interpreter for a shadow language?
[08:43:38] -ixelp- Room 101: A DOMain of Shadows
[08:43:53] <epony> "russian to finnish" sounds like a fun translation project ;-)
[08:44:40] <hayley> Some type systems are fancy enough that you can play Prolog in the types and relations between types, so the IDE is basically a Prolog interpreter.
[08:44:45] <dave0> kakuhen: is it this blog? https://drewdevault.com/2021/12/23/Sustainable-creativity-post-copyright.html
[08:44:47] -ixelp- Sustainable creativity in a world without copyright
[08:47:55] <kakuhen> It's the public domain one
[08:48:13] <kakuhen> https://drewdevault.com/2020/08/24/Alice-in-Wonderland.html
[08:48:14] -ixelp- Alice in Wonderland and the theft of the public domain
[08:49:44] <kakuhen> I have a general idea of what to write for the translation. The only issue is actually writing it down, and making sure the nuance of what I write matches Drew's intentions. Lastly, ensure that my sentences aren't too long, so my translation doesn't read like a passage of a literature test.
[08:51:28] <kakuhen> you can get really creative with word choice in Japanese, in ways that you can't express with English
[08:52:07] <epony> you can always use fold and fmt and trim sentences in half and passages by 4 sentences
[08:52:21] <kakuhen> it's hard to explain, but a math analogy works well here: imagine a projection, where many points can map onto a single one
[08:52:22] <epony> that's what editors do, fixing up texts
[08:52:43] <epony> anaglyphs
[08:52:53] <kakuhen> many words in japanese will map to one word in english, but you lose information on nuance; and going reverse can be non-trivial
[08:53:17] <dave0> kakuhen: ah yes there's a link to alice in wonderland page from the one i pasted
[08:54:11] <epony> so, you'd have the opposite problem, translating poetry from JP to EN
[08:54:42] <kakuhen> yeah -- my problem instead is making sure I choose the right words in Japanese so that I don't distort Drew's intent or nuance
[08:54:49] <epony> https://en.wikipedia.org/wiki/Rakugo
[08:55:10] <epony> distort drewings ;-)
[08:57:38] <kakuhen> that article reminds me, there are ways of apologizing in Japanese that confuse learners of the language, because of differences in culture
[08:58:00] <kakuhen> e.g. „Åì„ÅÆÈÄö„Çä„Åß„Åô being translated as "I (sincerely) apologize!"
[08:58:13] <kakuhen> the gestures/way you apologize in Japan are often different from that of English-speaking countries
[08:58:27] <kakuhen> but if you understand the differences, then it's clear why this phrase is translated as it is
[08:58:38] <kakuhen> otherwise, it's confusing
[09:46:46] * hayley already blew the swear word budget in #sicl - she's not re-typing the actual quote in question.
[09:47:21] <gilberth> You used the s-word again?
[09:48:08] <hayley> No, I referenced a Gilad Bracha talk where he says "I think the reason it hasn't been done is that all these languages are statically typed, and it's a bitch to type this thing!"
[09:48:16] <moon-child> $ egrep -i 'shit|bitch|fuck' *log/#sicl/*|wc -l
[09:48:18] <moon-child> 22
[09:49:01] <gilberth> Is that considered a round figure?
[09:49:13] <hayley> IIRC #sicl has existed for 4 years by now (I recall making #netfarm around the same time), so that's a low sweary rate.
[09:49:22] <moon-child> I have not been around it for 4 years though
[09:49:52] <moon-child> 369 days of logs
[09:49:56] <drakonis> it's the bee wors
[09:50:00] <drakonis> bee word
[09:50:29] <hayley> "It doesn't run on .NET, I'm here by accident!" - Gilad Bracha
[09:50:30] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[09:52:23] <drakonis> oh so its the dot word
[09:55:58] * gilberth now realizes why hayley needs a fast grep.
[09:56:34] <hayley> Eh, there would be too many matches for SIMD to pay off if I looked at #lispcafe logs :)
[09:57:08] <drakonis> abusing cl-simd for fun and profit
[09:57:46] <hayley> I hand wrote the primitives as cl-simd got olde, and sb-simd isn't yet part of SBCL.
[09:58:53] <hayley> ...and sb-simd does a lot of broadcasting magic which makes sub-optimal code and takes a while to compile.
[09:58:57] * moon-child greps and sorts
[09:59:01] <moon-child> 344 hayley
[09:59:06] <moon-child> 140 shka
[09:59:08] <moon-child> 74 selwyn
[09:59:27] <moon-child> 45 pl; 31 kakuhen; 22 moon-child; 19 gilberth; 18 Gnuxie
[09:59:40] <hayley> I swear the most? Checks out.
[09:59:57] <kakuhen> hi
[10:00:01] <kakuhen> i told myself to focus on work but instead I translated part of drew's blog post lole
[10:00:06] <kakuhen> this notification scared me
[10:00:43] <moon-child> kakuhen: would you like to swear, as an expression of your worry and frustration?
[10:00:48] <moon-child> if you do enough, you may catch up to pl
[10:01:05] <kakuhen> im gonna break your precious little grep
[10:01:07] <kakuhen> ÁïúÁîü
[10:01:11] <drakonis> ya got moxie with all that swearin'
[10:01:18] <moon-child> hayley: that is actually a slight underestimate, because I did not count ACTIONs
[10:01:33] <drakonis> ya curse like a sailor
[10:01:36] <hayley> Well, nobody is beating my record anytime soon.
[10:01:50] <hayley> Hey, I curse like an Australian. In comparison, Cliff Click curses like a sailor.
[10:02:02] <moon-child> if I add 'damn' and 'crap', you jump to 535
[10:02:11] <kakuhen> holy fuck
[10:02:18] <kakuhen> I hate the Japanese IME on Mac OS so much
[10:02:20] <drakonis> wild
[10:02:27] <kakuhen> I was typing some BBS slang and it thinks I want a fucking kissing emoji
[10:02:37] <kakuhen> Why am I getting emoji suggestions in the first place
[10:02:52] <moon-child> hayley: also uses human pronouns to refer to inanimate objects.  Which is a bit strange as I think he is a native english speaker
[10:03:07] <kakuhen> I typed „Å°„ÇÖ„ÅÜ and didn't get the kanji I want, so common sense told me, "toggle through the suggestions" and it decided "hey let me suggest 30+ kissing emojis you obviously don't want."
[10:03:16] <kakuhen> Only Apple does this shit
[10:03:18] <kakuhen> I swear to god
[10:03:35] <kakuhen> I never had this problem with Microsoft's IME on Windows, neither with Google's IME, neither with fucking ibus+anthy or whatever the hell I used when I used Linux in 2014
[10:04:03] <kakuhen> what was gonna be a funny joke about me talking about regexes for japanese text became a short rant on Apple oops
[10:05:30] <hayley> moon-child: Such as? I can't think of doing that.
[10:05:50] <hayley> And indeed English is my first language, but I am shit at it.
[10:06:01] <moon-child> cliff click, not you
[10:06:18] <hayley> Ah, right.
[10:06:37] <moon-child> (hence 'he')
[10:07:12] <kakuhen> anyway, moderating strong language in Japanese is pretty tough, because people get really creative with text substitutions
[10:07:30] <kakuhen> slur got filtered? no problem, just find a character with the same reading; bonus points if it adds to the insult
[10:09:08] <kakuhen> e.g. if you filter the word „Ç∏„É£„ÉÉ„Éó ("jap") in a forum, people will just start saying Áóî„É£„ÉÉ„Éó
[10:09:45] <kakuhen> this specific example is good because the meaning of Áóî adds more insult to the slur
[10:10:07] <kakuhen> i could go on and on about derogatory slang, but I don't want to spam this IRC with it
[10:10:26] <moon-child> kakuhen: much more fun if you actually insult people here
[10:10:38] <kakuhen> and good luck finding a regex that can filter these all -- I don't think regular expression are powerful enough for this
[10:11:02] <kakuhen> you can probably pass the text through a script that guesses the reading of words, but then you have to take into account a million edge cases or else your filter has too many false positives
[10:11:07] <drakonis> regex for unicode?
[10:12:28] <drakonis> how do you even deal with unicode's complexity anyways
[10:12:44] <moon-child> very carefully
[10:12:47] <hayley> Carefully.
[10:13:00] <drakonis> gah
[10:13:09] <drakonis> i walked into it
[10:13:49] <drakonis> lol i'm imagining regex for emojis
[10:15:03] <drakonis> https://m.youtube.com/watch?v=vi_uVTd25LI
[10:15:03] -ixelp- RubyConf 2021 - Vertical Assignment in Ruby by Kevin Kuchta - YouTube
[10:15:17] <drakonis> this is not april fools
[10:16:03] <drakonis> this is a very creative abuse of algol syntax
[10:16:36] <moon-child> somebody did a 2-d scheme
[10:16:45] <moon-child> and there is also https://esolangs.org/wiki/Pyramid_Scheme
[10:16:46] -ixelp- Pyramid Scheme - Esolang
[10:17:35] <drakonis> okay, pyramid scheme takes the crown
[10:18:35] <kakuhen> i hate emojis (consequently, unicode) so much I intentionally use Shift-JIS in #1=(nth-value 5 (get-decoded-time))
[10:18:52] <kakuhen> thankfully nobody has to visit my websites
[10:19:11] <kakuhen> oh also djula doesn't like templates encoded in shift-jis, because flexistreams doesn't like shift-jis
[10:19:36] <moon-child> why--why--why shift-jis ???
[10:19:43] <kakuhen> it just works
[10:19:44] <moon-child> ._.
[10:20:03] <kakuhen> half the japanese sites i visit still use shift-jis it's kinda funny
[10:20:06] <kakuhen> oh and HTML 4.01 Frameset
[10:20:49] <drakonis> i'll stab u
[10:21:09] <kakuhen> i was considering using framesets for my site too until i realized id have to use javascript if i want the navigation frame to control the other frame
[10:21:33] <kakuhen> I decided on something equally insane instead -- all interactivity is handled through an ad-hoc lisp program im making inside of caveman2
[10:21:40] <drakonis> aight this is an episode of website nightmares
[10:22:06] <drakonis> kitchen nightmares but with webshit
[10:22:08] <kakuhen> what if i told you when i work on my website i use the HTML 4.01 and CSS 2.1 specs as a sort of CLHS when writing the website
[10:22:25] <kakuhen> why not html 5? let me know when a browser has fully implemented it, then I'll consider ;-)
[10:22:43] <drakonis> use htmx
[10:22:43] <kakuhen> last time I checked, not even the latest Chromium nightly implemented everything 
[10:23:01] <moon-child> html5 is a 'live specification'.  It can not be implemented
[10:23:18] <gilberth> One problem with framesets is that browsers, but Closure, are not smart enough to let you bookmark it properly. Otherwise the general idea is good. But support is shit. (The last word for our statistic).
[10:23:26] <kakuhen> ah yes, "living specification"
[10:23:40] <kakuhen> I hope it lives a short life
[10:23:59] <kakuhen> But it appears I will be wrong on its longevity
[10:23:59] <drakonis> closure works?
[10:24:28] <gilberth> It worked some -- let me think -- 20 or so years ago.
[10:24:36] <moon-child> what is a frameset?
[10:24:47] <drakonis> that's ancient by web years
[10:25:19] <kakuhen> moon-child: html401 16.2.1
[10:25:19] * moon-child reads w3c spec, notices they do not close their LI tags
[10:25:20] <gilberth> First browser ever to pass the CSS1 Acid Test, still. :-p
[10:25:35] <kakuhen> is the clhs reference bot here?
[10:25:50] <gilberth> moon-child: You're too young to remember framesets.
[10:26:14] <kakuhen> clhs 12.2.1
[10:26:19] <gilberth> moon-child: Think multiple panes in one browser window.
[10:26:30] <drakonis> :clhs 12.2.1
[10:26:39] <drakonis> is that the syntax?
[10:26:43] * hayley remembers frames
[10:26:57] <moon-child> gilberth: oh, hmm, I see.  That seems not too different from regular frames
[10:27:00] <kakuhen> For me, it's IFRAME. It's like FRAME, but without the need for a special-snowflake DTD.
[10:27:07] <moon-child> hayley: remember visitor counters?
[10:27:13] <hayley> Yes.
[10:27:16] <kakuhen> Then to simulate FRAMESET you can just use about 1,000 lines of CSS and JavaScript
[10:27:19] <moon-child> And 'compliant html' buttons
[10:27:52] <kakuhen> ooooh some websites I use still proudly display their XHTML 1.1 compliance buttons
[10:28:42] <kakuhen> The compliance verification tool still exists, if I recall correctly
[10:28:53] <kakuhen> Also some websites displayed the button yet weren't actually compliant
[10:28:59] <moon-child> indeed
[10:29:01] <moon-child> http://validator.w3.org/
[10:29:02] -ixelp- The W3C Markup Validation Service
[10:29:22] <gilberth> moon-child: Framesets were used for sth. like some ToC-like thing at the left and some main pane. Whether panes could be resized by the user can be specified in the frameset. Also think CLIM:VERTICALLY and CLIM:HORIZONTALLY.
[10:29:22] <moon-child> and, as I recall, the html5 version was experimental, and called 'nu'
[10:29:49] <moon-child> like https://www.jsoftware.com/papers/tot.htm
[10:29:49] -ixelp- Notation as a Tool of Thought
[10:30:14] <kakuhen> Looks like clhs is not compliant with any HTML specification
[10:30:29] <kakuhen> For starters, it's missing the DOCTYPE declaration and does not provide the "Content-Type" http-equiv
[10:30:45] <moon-child> kakuhen: there is no bytesequence which is not a valid html5 document
[10:30:48] <kakuhen> correction: does not provide the "Content-Type" http-equiv within the first 1024 bytes of the file
[10:31:29] <kakuhen> moon-child: is html5 the web version of mp3 then?
[10:31:52] <kakuhen> if i recall correctly, any random stream of bytes can represent a valid mp3 frame
[10:32:52] <kakuhen> so if I want to pwn some windows users with QuickTime  installed, I can send them virus.mov, embed a virus as an mp3 stream, and use that moov atom RCE bug to run the virus
[10:33:10] <kakuhen> I wonder if anyone's tried this out
[10:33:58] <gilberth> Why would the Content-Type http-equiv be mandatory?
[10:34:17] <kakuhen> because the server may not send the encoding to you
[10:34:29] <gilberth> And if it does?
[10:34:30] <kakuhen> or the encoding of the document differs from what the server usually serves
[10:34:44] <kakuhen> if it does then it's not a problem; it becomes a problem when the server doesn't; or worse, if the server lie to you
[10:34:58] <gilberth> The HTTP message header overrides any META tag.
[10:35:07] <kakuhen> I know
[10:35:11] <kakuhen> I learned this a week ago
[10:35:26] <kakuhen> Trying to get shift-jis pages to work on caveman2 was a headache because clasp by default would constantly send "charset=utf-8" in that field
[10:36:28] <kakuhen> I eventually gave up and used utf-8 for my site because djula didn't play nice with shift-jis either
[10:36:48] <gilberth> Well, when I generate HTML I stick to US-ASCII for a reason. It's the safest bet.
[10:37:04] <kakuhen> is that equivalent top windows-1252
[10:37:07] <kakuhen> s/top/to
[10:37:47] <kakuhen> if not, then you may need to patch your HTML for IE6 ;) 
[10:38:37] <gilberth> Technically ISO-8859-1 is the default for HTTP, if no message header says otherwise. HTTP overrides META. But: HTML5 says that this should be interpreted as CP-1252, which differs in #x80..#x9F from ISO-8559-1.
[10:38:58] <gilberth> kakuhen: I meant 7-bit US-ASCII.
[10:39:08] <kakuhen> Ah, all good then
[10:39:47] <dave0> i like base-32 except a non-standard version [2-7A-Z]
[10:39:48] <gilberth> Doesn't hurt as #x80..#x9F are control characters in ISO-8859-1.
[10:42:11] <gilberth> It's hilarious though, that even 2021 it's a challenge at times to use Unicode.
[10:42:45] <gilberth> And I doubt it'll change in 2022 to come.
[10:43:33] <kakuhen> I am just trying to figure out how decoding tables work in flexi-streams
[10:44:00] <kakuhen> If I can add Shift-JIS support to flexi-streams, then I will be able to use Djula without UTF-8
[11:01:16] <ck_> hello last day of the year #lispcafe
[11:04:57] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[11:05:01] *** Joins: Alfr (~Alfr@user/alfr)
[11:13:51] *** Joins: pjb (~pjb@user/pjb)
[12:53:05] <hayley> #sbcl asks why SWCL is SWCL
[13:11:53] <ck_> tell me if the world is still fucked next year, australia
[13:22:57] * hayley uploaded an image: (131KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qALWNkjTEpNyrfcgnYTviOnB/the-no-album.jpg >
[14:25:18] <kakuhen> I'll be the first to ask about a new CL spec in #commonlisp next year
[14:31:13] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/kho2mn/damn_im_jealous_here_in_australia_searching_rust/ggo1g43/ ‚Üê the origins of SWCL
[14:31:14] -ixelp- Damn, I'm jealous... Here in Australia searching 'rust developer' / 'rust software engineer' in LinkedIn the only jobs t [...]
[14:39:57] <phoe> kakuhen: https://github.com/Euophrys/mahjong-discord-bot/blob/9b32df31d4a6ad0781f48587a18c977445dc3393/utils/shanten.js
[14:39:58] -ixelp- mahjong-discord-bot/shanten.js at 9b32df31d4a6ad0781f48587a18c977445dc3393 ¬∑ Euophrys/mahjong-discord-bot ¬∑ GitHub
[14:40:05] <phoe> that's a shanten calculator from Natsuki
[14:40:18] <kakuhen> i know the dev behind natsuki
[14:40:29] <kakuhen> i shoudl ask them sometime
[14:40:44] <phoe> the main issue is that Natsuki is GPL
[14:40:55] <kakuhen> my utility is gpl-3 so no worries :)
[14:41:07] <phoe> well, mine is MIT :D I should GPLize it someday too
[14:41:40] <moon-child> natsuki?
[14:41:49] <phoe> yes, a Discord mahjong bot
[14:41:51] <kakuhen> discord bot for mahjong stuff
[14:42:19] <moon-child> oh cool
[14:42:29] <moon-child> I used to play mahjong, completely forgotten how now though
[14:42:38] <phoe> which variant?
[14:42:47] <kakuhen> anyway regarding licensing: i just chose GPL because then I wont have to worry if I have/want to take  in other GPL code
[14:42:55] <moon-child> dunno
[14:43:52] <kakuhen> 14 or 16 tiles? flowers present? red fives present?
[14:44:01] <kakuhen> this should give us a good guess at which variant
[14:44:21] <kakuhen> 16 tiles instantly implies taiwan variant
[14:44:21] <kakuhen> flowers implies MCR or Hong Kong
[14:44:21] <kakuhen> red five implies riichi
[14:45:18] <moon-child> flowers, I think 14 tiles
[14:45:29] <kakuhen> then definitely a chinese variant
[14:46:23] <kakuhen> in my experience, most house rules in japan will do things like red 3 pin and that one stupid yakuman rule whose name i forgot
[14:46:34] <kakuhen> but flower tiles are unheard of, for me at least
[14:46:49] <phoe> which yakuman?
[14:46:51] * moon-child nods
[14:47:17] <kakuhen> phoe: i forget the name but it places the debt on the person who allowed a yakuman tsumo to happen
[14:47:32] <kakuhen> so say you have 2 of haku, hatsu, and chun
[14:47:32] <phoe> oh, sekinin barai / pao
[14:47:38] <kakuhen> Yeah pao
[14:47:44] <phoe> yes, that's a standard rule in Europe (EMA rules)
[14:47:54] <phoe> when it comes to big dragons/big winds
[14:48:01] <kakuhen> many mahjong parlors adopt that rule too
[14:48:16] <phoe> good
[14:48:54] <phoe> dealing the third dragon while a person has two of the other dragons open should be appropriately punished - either with a yakuman ron or with pao :D
[14:49:04] <kakuhen> were you working with someone else while writing this riichi software in CL?
[14:49:21] <phoe> yes, this is a fork of https://github.com/kekimmo/mah-eval
[14:49:22] -ixelp- GitHub - kekimmo/mah-eval: Evaluates a mahjong hand.
[14:49:30] <kakuhen> i think itd be beneficial if we could group people who are interested and work together
[14:49:34] <phoe> except I was improving on it and rebuilding lots of stuff from it
[14:49:39] <phoe> sure, that works
[14:49:57] <phoe> my code has some structure that I consider readable, and unit tests for everything I wrote
[14:50:25] <kakuhen> oh nice; i never wrote unit tests for mine
[14:50:36] <kakuhen> its a single lisp file; gonna find a site to paste the entire thing in rn
[14:50:45] <phoe> https://plaster.tymoon.eu/edit
[14:50:53] <phoe> I do not trust myself when I wrote code, this is why I always do tests :D
[14:51:46] *** Joins: treflip (~user@user/treflip)
[14:52:43] <kakuhen> https://plaster.tymoon.eu/view/2814#2814
[14:52:53] <kakuhen> Even if you trust yourself, it's a good habit
[14:53:18] <kakuhen> I've personally used parachute for unit tests and its great
[14:53:23] <kakuhen> Makes setting them up easy
[14:53:36] <phoe> me too
[14:54:11] <kakuhen> anyway for some context of this code
[14:54:24] <kakuhen> its what i wrote in about two hours during a bored day at uni
[14:54:35] <phoe> yep, I can see it
[14:54:42] <kakuhen> i was in a coffee shop and i recall asking gilberth for a clever way to define a type w
[14:55:04] <kakuhen> yeah if you search the logs here you will find me talking about using trivia to pattern match lists
[14:57:16] <kakuhen> most of my time went into the reader macro and its largely taken from someone's JSON parser tutorial
[14:57:30] <phoe> ah yes, the famous reader macro tutorial :D
[14:57:41] <kakuhen> yeah i should probably credit the author somewhere
[14:57:59] <kakuhen> its why the reader macro exists at all
[15:01:24] <edgar-rft> I don't think this hannel is logged so you have to say all that shit again :-)
[15:01:33] <phoe> all what shit again
[15:01:50] <edgar-rft> all of it
[15:02:08] <phoe> https://plaster.tymoon.eu/view/2815#2815
[15:02:33] <edgar-rft> oh noes
[15:03:17] <edgar-rft> all the shit I said now will stay forever :-)
[15:07:10] <kakuhen> ppl told me as a kid everything on the internet stays forever, but geocities is gone and naver matome is as well
[15:07:34] <kakuhen> so many personal blogs and websites i took for granted even as late as 2018 are just gone
[15:07:38] <kakuhen> :(
[15:07:48] <moon-child> indeed
[15:07:51] <ck_> indeed
[15:07:56] <kakuhen> oh yeah yahoo answers is gone too
[15:08:01] <ck_> the hoarders were always right
[15:08:05] <kakuhen> i wish Gen Z luck with their physics homework
[15:08:10] <ck_> :-)
[15:08:21] * moon-child eyes a pair of 10tb hard drives
[15:08:30] <ck_> yeah exactly
[15:08:38] <edgar-rft> I hope that's because finally someone invented a garbage colletor for the internet
[15:08:39] <kakuhen> yahoo answers probably stored a decades worth of students asking all sorts of intro physics questions and getting fully worked solutions w
[15:09:04] <ck_> cue "tears in rain" speech
[15:09:06] <hayley> edgar-rft: https://en.wikipedia.org/wiki/Distributed_garbage_collection
[15:09:24] <moon-child> I have a 4tb mirrored thingy set up currently using a bit over half of it
[15:09:54] <edgar-rft> hayley: true, I'm more like a garbage distributor person :-)
[15:10:08] <kakuhen> blockchain garbage collector
[15:10:24] <hayley> rm -rf ~/.ethereum/
[15:10:34] <kakuhen> if ppl can fuse mount their google drive storage as swap
[15:10:43] <kakuhen> we can put memory on blockchain
[15:10:50] <phoe> hayley: deleting ~/.ethereum is a blockchain transaction and requires confirmation and gas fees
[15:11:02] <hayley> phoe: shit, can't afford that
[15:12:03] <kakuhen> reminds me, my sister does photography and asked me about NFTs
[15:12:16] <kakuhen> i learned that NFTs can cost up to $300 to just create
[15:12:38] <kakuhen> so much for 1s and 0s that are only a Print-Screen away from being taken
[15:12:42] <edgar-rft> you first must accept cookies before you can eat them, too
[15:12:54] <phoe> edgar-rft: bake them yourself
[15:14:41] <edgar-rft> dear webmaster, thank you for offering me cookies but I already have made my own
[15:15:05] <ck_> probably not even vegan
[15:15:17] <kakuhen> i stole so much cookies the webmaster blacklisted my IP
[15:15:27] <edgar-rft> ck_: the webmaster or the cookies?
[15:15:41] <ck_> edgar-rft: the three, altogether
[15:15:56] <ck_> I wouldn't download a cookie tbh, don't know where it's been
[15:16:15] <MichaelRaskin> Hmmm, maybe I should consider an utility function that takes a drakma cookie jar and replaces cookie values with ¬´delicious¬ª
[15:16:21] <dave0> i can't believe he blacklisted your intellectual property!
[15:17:13] <edgar-rft> dear webmaster, please proove first that your cookies had been vaccinated
[15:17:19] <MichaelRaskin> Maybe webmaster works at Google and the intellectual property in question is under AHPL3?
[15:17:31] <ck_> by the way, is hunchentoot still the cl webserver of choice? I'd like to get a mock server for api requests up
[15:17:48] <ck_> AHPL, what is this now
[15:17:55] <moon-child> woo is a thing
[15:17:56] <moon-child> and clack
[15:17:58] <moon-child> and caveman
[15:18:01] <moon-child> I honestly have no idea what people are using
[15:18:39] <ck_> thank you!
[15:20:16] <sm2n> ck_: I like https://github.com/joaotavora/snooze
[15:20:16] -ixelp- GitHub - joaotavora/snooze: Common Lisp RESTful web development
[15:20:34] <ck_> that name is good marketing
[15:20:49] <sm2n> is it?
[15:21:26] <ck_> I knew immediately after sending that it could also be the opposite, but my immediate association was "the thing that lets you escape a responsibility temporarily"
[15:21:52] <ck_> also, is cliki.net gone? what happened
[15:22:41] <sm2n> well it pings fine
[15:22:47] *** Alfr is now known as Guest1333
[15:22:47] *** Quits: Guest1333 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[15:22:52] *** Joins: Alfr (~Alfr@user/alfr)
[15:22:55] <sm2n> probably some server-side bug
[15:29:30] <kakuhen> hunchentoot signalled an error
[15:29:36] <kakuhen> it happens to the best of us
[15:30:09] <sm2n> I thought cliki used some other webserver
[15:30:17] <kakuhen> Anyway, for "live testing" a web app hunchentoot is good, but Fukamachi recommends another server for "production use"
[15:30:18] <ck_> the redirect from port 80 is served by apache
[15:30:34] <kakuhen> i really like his caveman2 framework
[15:30:50] <kakuhen> less thinking on my behalf, and more writing html and lisp
[15:31:40] <kakuhen> but if you want just a webserver then hunchentoot and woo seem to be the popular choices
[15:31:56] <sm2n> oh nope it does use hunchentoot 
[15:32:02] <sm2n> https://gitlab.common-lisp.net/vsedach/cliki2/-/blob/master/cliki2.asd
[15:32:03] -ixelp- cliki2.asd ¬∑ master ¬∑ Vladimir Sedach / CLiki2 ¬∑ GitLab
[15:32:22] <kakuhen> based on how ive interacted it with caveman, clack seems to be mostly a convenient way to interface with the various web servers and http clients
[15:33:06] <kakuhen> esp for making webapps
[15:33:08] <sm2n> Yeah, you can use snooze on top of clack too. It just supplies an API router
[15:33:18] <kakuhen> it lets you simply just start, stop, and reload servers
[15:48:35] <hayley> https://boingboing.net/2021/12/30/reporter-likely-to-be-charged-for-using-view-source-feature-on-web-browser.html
[15:48:35] -ixelp- Reporter likely to be charged for using "view source" feature on web browser | Boing Boing
[16:23:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:26:09] <dave0> hayley: haha awesome.. i've been following that missouri thing
[16:26:25] <dave0> only 5 minutes to new years!
[16:32:51] <contrapunctus> Only 5 hours and 28 minutes to new year! üòè
[16:34:38] <ck_> "and a half" ? I thought only australia and india had those half an hour offsets
[16:35:21] <hayley> Happy new year! (¬± 5 minutes, I say it in #sicl first)
[16:35:34] <contrapunctus> ck_: makes sense, because I'm in India üôÉ
[16:35:46] <ck_> aha! thanks for clearing that up :)
[16:35:49] <hayley> https://www.youtube.com/watch?v=KQORryj3Li0
[16:35:49] -ixelp- Oh! 2025 - YouTube
[16:36:06] <hayley> 3 years to go!
[16:38:09] <ck_> gilberth: have you seen this, or something similar? https://github.com/Granitosaurus/macos-compose
[16:38:10] <dave0> hayley: happy new year!
[16:38:10] -ixelp- GitHub - Granitosaurus/macos-compose: compose key for macos
[16:38:41] <dave0> last year i had 1 six-pack of beer
[16:38:59] <dave0> all year
[16:40:30] <ck_> so, what will you have next year? e^2 six packs? e^-1 ?
[16:40:37] <dave0> same again!
[16:40:58] <ck_> what beer was it
[16:41:48] <dave0> non alcoholic
[16:41:53] * dave0 hangs his head in shame
[16:42:03] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[16:42:18] <dave0> called "carlton zero" the same company that makes fosters
[16:43:45] <ck_> never heard of that one, but I know fosters, at least by name
[16:43:49] <rotateq> hey dave0 
[16:43:57] <ck_> and when you say six-pack do you mean bottles or cans?
[16:44:15] <dave0> 6 pack of 330ml bottles
[16:44:22] <dave0> maw rotateq 
[16:44:23] <hayley> gilberth: https://pkolaczk.github.io/server-slower-than-a-laptop/ (Spoiler: reference counting)
[16:44:23] -ixelp- How a Single Line of Code Made a 24-core Server Slower Than a Laptop | Piotr Ko≈Çaczkowski
[16:44:53] <rotateq> dave0: already new year at your place?
[16:45:14] <dave0> yep for 10 minutes!
[16:45:18] <dave0> yay \o/
[16:45:35] <ck_> have you fixed the pandemic thing yet?
[16:45:51] <dave0> we have implemented a head-in-the-sand policy
[16:45:58] <ck_> that's probably a yes, then
[16:46:01] <dave0> if we don't think about it might go away
[16:46:07] <rotateq> hayley: yes, i realized this fact for myself a long time ago (metaphorically). one can have as many resources as they want, the scheduling is it
[16:46:47] <hayley> "in fact, atomic operations require some locking to happen at the hardware level" Nope - the mutual exclusion problem has been solved <http://lamport.azurewebsites.net/pubs/lamport-mutual-solved.pdf>
[16:47:45] <rotateq> even before we were born :)
[16:48:18] <dave0> you could unix it and disable interrupts :-p
[16:48:49] <rotateq> *lalala* i can't hear you :D
[16:49:29] <rotateq> even good and sane parallel programming is hard
[16:50:19] <hayley> Also funny that they use an interpreter in some code that sounds like it should run fast. But having a JIT would have unpredictable performance...
[16:50:30] <hayley> This is hilarious.
[16:52:52] <rotateq> hayley: so enjoy it :D
[16:56:25] <rotateq> hm i still think on good names for my two (metaphorical) parentheses swords. [a left and a right one of course] should i just name them CAR and CDR?
[17:04:56] <ck_> you should name the pair a NIL
[17:06:38] <rotateq> hm right, or the left NI and the right IL
[17:07:03] *** Joins: random-nick (~random-ni@87.116.180.98)
[17:07:16] <ck_> I thought you weren't no longer the knights who say NI ?
[17:08:11] <rotateq> i think more of samurai :) always two swords
[17:08:22] <dave0> \o> <o/
[17:08:32] <rotateq> fight!
[17:09:13] <rotateq> and they're forged in the mountain of lambda, where only there they can be destroyed :P
[17:09:19] <dave0> oh man i'm having 90's arcade game flashbacks
[17:09:28] <rotateq> haha, which one?
[17:09:41] <rotateq> cause of the "fight!"?
[17:09:44] <dave0> streetfighter :-)
[17:09:46] <dave0> yep
[17:09:53] <dave0> round 1! fight!
[17:09:57] <rotateq> ahh, never was my type of games
[17:10:18] <dave0> i spent all my money on it lol
[17:10:45] <rotateq> as Sun-Tzu suggests, a wise warrior wins a war without fighting :) or when totally needed
[17:11:15] <dave0> "don't use cannon to kill mosquito"
[17:11:18] <rotateq> dave0: but long ago now. i don't want to know the amount of money I wasted on games upto now in my life
[17:11:44] <dave0> same
[17:11:45] <rotateq> right, samurai sword is way more precise to cut the mosquito in half
[17:11:49] <selwyn> 10https://www.youtube.com/watch?v=xSGW7CwD5GM
[17:11:49] -ixelp- Streetfighter III Tournament - Daigo's Comeback - YouTube
[17:11:55] <dave0> and then they invented M.A.M.E
[17:12:02] <dave0> oooh
[17:12:19] <selwyn> watch with sound
[17:12:23] <rotateq> and now games just seem to be much more expensive but relatively seen they got very cheap
[17:12:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:13:24] <rotateq> do you know this newer analogue pocket boy fpga device? but not buyable atm
[17:13:35] <rotateq> https://www.analogue.co/pocket
[17:13:36] -ixelp- Pocket - Analogue
[17:14:15] <dave0> selwyn: the daigo parry
[17:14:45] <selwyn> i don't know enough about street fighter to properly appreciate it
[17:14:50] <rotateq> i would like it more in gameboy advance case
[17:15:26] <rotateq> dave0: so i think you're some years older than me
[17:16:02] <dave0> i'm 45 this year
[17:16:13] <rotateq> okay still young of course :)
[17:16:33] <rotateq> i got just 27 in the beginning of this month
[17:16:47] <dave0> oh that's young
[17:17:02] <dave0> i don't remember a lot of my 20's :-p
[17:17:16] <rotateq> i often felt as everything is too late for me
[17:17:23] <rotateq> haha
[17:18:09] <rotateq> was gilberth_ here some hours ago? in write presence i mean
[17:19:06] <hayley> Quite likely.
[17:19:12] <rotateq> ^^
[17:20:25] <rotateq> hayley: how is the 2022 future?
[17:20:35] <hayley> Boring, mostly.
[17:20:51] <rotateq> i see, but there could be hope
[17:21:27] <hayley> Considering correcting that author on the mutual exclusion problem, but I need a disqus account - which I probably have, but is a pdin.
[17:21:32] <hayley> *pain
[17:22:36] <rotateq> paaaain
[17:33:16] <hayley> https://i.redd.it/97wkd0quah461.png
[17:35:09] <rotateq> wonderful meme video
[17:43:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:56:31] <rotateq> hm my brain does interesting things again, in a german channel we also use "wb" for "welcome back" and i said "with some fantasy we could also use 'w‚â•' as 'willkommen zur√ºck' and see the '‚â•' as 'z'"
[17:56:56] <rotateq> then instantly it reminded me of the newer WZ-method by Wilf and Zeilberger from experimental mathematics
[18:15:07] <MichaelRaskin> Hmm, sounds weird to try stretching Rc as GC when people are playing with actual library gradual GC for Rust‚Ä¶
[18:18:29] <pl> MichaelRaskin: well, RC is by definition a GC, just a very shitty one 
[18:27:09] <ck_> so is rebooting
[18:42:15] <drakonis> say, is there a way to check how the cl ecosystem has changed in 2021?
[18:42:29] <drakonis> vindariel has a post but it only touches on 2020
[18:42:45] <drakonis> vindarel
[18:44:38] <ck_> a way to check.. huh
[18:45:10] <ck_> difficult question, maybe looking at how aggregators have done over the year, like quicklisp, could be an indicator?
[18:56:15] <ck_> at least I'm not aware of any debunking going on recently, and no "common lisp mafia" either. looks good so far
[18:57:05] <sm2n> coalton was released properly this year
[18:57:15] <sm2n> I'd say that counts as a big thing‚Ñ¢
[18:58:23] <edgar-rft> drakonis: Common Lisp has a rather huge "standard library" already defined by the CL standard, you don't need so much external libraries than in other programming languages. But I myself would also be interested if there's something new that I have missed or overlooked :-)
[19:00:09] <sm2n> Also I think clpm gained a lot of users this year
[19:04:26] <rotateq> I'm fighting with syncthing. again.
[19:05:03] <sm2n> Why? I've never really had issues with it in recent memory
[19:05:14] <sm2n> It used to be pretty bad a few years ago though
[19:11:07] <rotateq> i set it up (for android and my newer laptop) and it doesn't sync this folder now and i don't know
[19:11:36] <rotateq> but anyway, raining outside so no earphones better
[19:16:09] <drakonis> edgar-rft: its mainly for the modern use cases
[19:16:48] <ck_> "raining outside so no earphones better" sounds like you're using tts and stt to talk on irc. is that the case? because I'd be very amazed to see that
[19:16:48] <drakonis> the ones that did not exist when the standard was first written
[19:17:02] * rotateq does "#include edgar-rft.h"
[19:17:33] <rotateq> √∂hm what's tts and stt in this case? :D
[19:17:45] <drakonis> speech to text and text to speech?
[19:17:46] <ck_> text-to-speech, speech-to-text
[19:18:35] <rotateq> drakonis: one of the biggest lies is java legacy
[19:18:52] <drakonis> java legacy?
[19:19:02] <rotateq> drakonis: nono, just stumbled a bit on that sentence ^^ but as we are inference engines ..
[19:19:11] <rotateq> yes, there is no such thing
[19:19:22] <drakonis> https://lisp-journey.gitlab.io/blog/state-of-the-common-lisp-ecosystem-2020/
[19:19:24] -ixelp- State of the Common Lisp ecosystem, 2020 üéâ - Lisp journey
[19:19:24] <rotateq> instead they US myths about ourselves
[19:20:13] <rotateq> and with sometimes (minor) modifications you can also run CL code from over 30 years ago easily
[19:22:32] <rotateq> and drakonis, if i would someday, of course programmed text to speech in CL :P
[19:23:36] <rotateq> around 10 years ago i was at a skin doctor and he used such a software, so might be still a big niche need for professional software of that kind
[19:24:25] <rotateq> like with sane DSLs in many fields
[19:26:24] <rotateq> edgar-rft: I'm still happy this AutoLISP job didn't work out in summer. Would have been a mess.
[19:26:43] <drakonis> hah
[19:26:49] <rotateq> hoh
[19:28:56] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:29:36] <rotateq> drakonis: AutoLISP has no macros. (or I still don't see it)
[19:30:04] <ck_> what kind of work would this have been?
[19:32:06] <rotateq> phew that was very very strange, just saw the post by accident
[19:34:42] <rotateq> That was just a job ad from a placement company, who are looking for someone for an industrial company in Bremen, who "can" LISP (yes so generically described) and then it said, C# knowledge is still good (which I don't want to have anyway). So it was the other way around and not as usual. Have then angemailed, but as that is just sometimes so, was not understood anyway and really better so.
[19:35:05] <Catie> AutoLISP is the worst of the Lisps far and away
[19:35:23] <rotateq> drakonis: but with stt and irc, i think emacs with erc could also act as a good bridge
[19:35:31] <rotateq> Catie: oh yes I realized it :D
[19:35:43] <Catie> I'm so, so glad
[19:36:08] <drakonis> i feel like i should implement a quake clone in common lisp
[19:36:25] <rotateq> So it should be maintained by the company some legacy system for I think piece count recording and things like that, further.
[19:37:15] <rotateq> oh yes drakonis, do it, you will learn also much about data structures one needs for that
[19:37:49] <ck_> "piece count recording", inventory management?
[19:37:50] <selwyn> whats wrong with autolisp
[19:37:59] <ck_> selwyn: we like manual over here
[19:38:03] <rotateq> drakonis: In summer I finally achieved writing a version of the fast inverse square root in CL :D you could start with that
[19:38:12] <Catie> selwyn: The best way I can put it is that it's like writing C code with more parens
[19:38:13] <rotateq> selwyn: it has no macros afaik
[19:38:44] <rotateq> okay I have to go for 1h, see you :)
[19:39:45] <Catie> The only way to introduce a lexical binding is with a LAMBDA form. Apart from that everything is globally scoped
[19:40:30] <rotateq> nice. not.
[19:41:45] <Catie> And it's true, there's no macros. You can simulate it with EVAL and quoted lists -- which I have done -- but it's unwieldy and incredibly limited. For example, I've yet to figure out a general-purpose method for executing code in a new lexical environment
[19:42:17] *** Joins: mrmr5 (~mrmr@user/mrmr)
[19:42:30] <Catie> Closures do not exist, you get dynamically-scoped variables across the board
[19:44:17] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[19:44:17] *** mrmr5 is now known as mrmr
[19:48:41] <ck_> Catie: did you use it by choice or was it forced by circumstances?
[19:52:12] <Catie> That's actually kind of a difficult question to answer simply. AutoLISP was the start of my Lisp journey, I've historically been a drafter by trade. I gave in one day and decided to learn the extension language for the tool I used, but I couldn't practice at home so I also started learning Common Lisp, assuming that a lot of it would transfer over. And that's how I saw the light
[19:52:41] <Catie> I still write some AutoLISP, but I avoid it as much as possible
[19:58:12] <ck_> I understand, thank you for the story
[19:59:11] <Catie> Hey, any time!
[19:59:35] <ck_> it's interesting to see parallels in different trades, I worked for a civil engineer once and talked to the people drafting there
[19:59:52] <ck_> I've forgotten the software name, but its input logic was remarkably close to vi
[20:02:46] <SAL9000> convergent eVIlution? :-)
[20:03:20] <SAL9000> it's like convergent evolution but rather than leading to crabs, it leads to :q!
[20:11:23] <gilberth> Good morning #lispcafe!
[20:11:26] <drakonis> morn
[20:11:32] <Alfr> Good morning, gilberth!
[20:18:35] <gilberth> hayley: Heh, that article about how blazing fast Arc<T> is would be almost funny for it not actually be rather sad. I mean, this is a no-brainer, isn't it? When bored I could write an article about how fast my toy Lisp implementation is with that brilliant "GC" strategy.
[20:18:37] <dave0> nite all
[20:19:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:22:54] <gilberth> ck_: Thanks for sharing the compose key thing. This looks pretty promising, I should give it a shot. Next year.
[20:24:51] <drakonis> ah rust...
[20:24:59] <drakonis> it sure is something
[20:25:08] <gilberth> ck_: Though, but IRC, all by typing is to some Emacs buffer.
[20:25:55] <gilberth> drakonis: Yes, 300 times slower than C.
[20:26:27] <drakonis> its impressive how hype alters perception
[20:27:09] <gilberth> It's surprising how that April's Fools Day prank is taken serious, indeed.
[20:27:26] <drakonis> all about that safety
[20:28:41] <gilberth> I won't call covering integer overflows under the carpet safe.
[20:28:47] <drakonis> of course not.
[20:28:55] <drakonis> but the hype dictates that safe languages are the future
[20:29:17] <gilberth> I won't hold my breath.
[20:31:57] <drakonis> to the hype, the accuracy of the claims do not matter
[20:32:03] <gilberth> Perhaps safety is finally taken serious, but I don't expect the irrational fears of proper arithmetic, runtime error checking, dynamic typing, or garbage collection would go away anytime.
[20:33:13] <gilberth> drakonis: Right, the hype is surprising.
[20:33:30] <drakonis> i do like rust's documentation
[20:34:10] <gilberth> You do? For its poorness? And all the lies in the Rust book?
[20:34:41] <drakonis> compared to other languages, it is very much an improvement
[20:35:28] <gilberth> Well, what I miss is something which could be called a spec.
[20:36:16] <drakonis> ah yes
[20:36:22] <drakonis> its impossible
[20:36:48] <drakonis> with the way langs work these days, its highly unlikely
[20:37:02] <drakonis> since they need to be perpetually in hype cycles to exist
[20:37:09] <gilberth> For instance: Try to figure out how a macro could expand to something with "$" in it.
[20:39:14] <gilberth> My reading skill may be impaired, idk. But I didn't find any information about how exactly macros are expanded. I mean, simple things like "when are arguments expanded" and how to quote things.
[20:40:06] <gilberth> But perhaps I was too bold to attempt to write macros that define macros.
[20:40:13] <drakonis> i'm inclined to respond with something like "rust is magic, believe in the magic"
[20:40:18] <drakonis> which is patently useless to say
[20:40:56] <gilberth> Indeed, "magic" is the word. It's our saviour, isn't it?
[20:41:08] <Alfr> drakonis, did you forget to prepend the T in that response?
[20:41:25] <drakonis> the magic borrow checker
[20:41:42] <gilberth> Anyhow, as shka pointed out: You would need to judge it from the perspective of a C++ hacker, not from the perspective of a CL hacker.
[20:42:15] <drakonis> that is correct, yes.
[20:42:31] <drakonis> to a c++ hacker, rust is incredibly liberating
[20:43:10] <gilberth> However, as a replacement Go is far better approach. It has a garbage collector to begin with.
[20:43:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:44:01] <drakonis> nah
[20:44:05] <drakonis> go is a poor replacement
[20:44:35] <gilberth> And my toy Lisp in Go had a pretty good performance and after getting into Go, it was actually kind of fun. Not so with Rust. Seriously, 300x slower than C, in "Release Rust"?
[20:44:41] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:45:12] <drakonis> the philosophy is at fault here
[20:45:59] <gilberth> drakonis: View it from the perspective of a C++. I made fun of Go initially, but it isn't really that bad.
[20:46:10] <gilberth> * hacker
[20:49:33] <drakonis> https://pkolaczk.github.io/server-slower-than-a-laptop/ wtf
[20:49:34] -ixelp- How a Single Line of Code Made a 24-core Server Slower Than a Laptop | Piotr Ko≈Çaczkowski
[20:49:51] <drakonis> oof.
[20:49:57] <gilberth> Ok, a Lisp interpreter maybe the worst case for Rust. It was no fun, slow, painful. And I needed ages. Actually this is the only toy Lisp implementation that I didn't finish. But I am happy, I did that. I can't talk about a language before I actually would have used it. I had no idea about how primitive it is.
[20:54:19] <drakonis> wow rust has shitty macro support
[20:58:34] <gilberth> The whole philosophy is odd. It goes like this: "Automatic memory management is bad, let the programmer do manual memory management. He could do unsafe things? Ok, let's implement a compiler which tells the programmer when he missed something, like incrementing an refcount." Seriously, when the compiler could tell me when I missed incrementing a refcount, why can't the damn compiler insert that increment for me? It's a bad joke.
[20:59:57] <drakonis> because the industry is bad
[21:01:11] <gilberth> And this leads to favoring copying. Which leads to objects being larger than a word, which leads to word-tearing on sharing, which leads to needing a mutex around any access, which leads to memory bloat and incredible poor performance.
[21:02:49] <gilberth> I read a presentation of Mozilla hackers and a few slides were about how a single border-style value would occupy like four words (IIRC), where would it have been Lisp, a single word would do.
[21:03:36] <gilberth> Perhaps even zero words, if nothing was set for that attribute.
[21:06:59] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[21:07:35] *** Joins: aeth (~aeth@user/aeth)
[21:14:47] <rotateq> lel they still didn't found someone, as I expected: https://www.afa.de/stellen.php?job=00494531
[21:14:48] -ixelp- Stellen - AfA Agentur f√ºr Arbeitsvermittlung
[21:19:00] <rotateq> or again, as someone who just knows C# stuff got it and quit
[21:22:03] <gilberth> Also, the whole implementation of dynamic typing already mandates locking. We have tag bits and header words and pass a single word around. They have an "enumeration data type" which was called a variant in last century. It is a two word pass-by-value structure of a type identifier and the actual data. Being two words, and thus writing not being atomic, leads to the need to have a mutex. Apart from passing things in two registers, where 
[21:22:23] <gilberth> Oh, I forgot, they don't even use registers for passing data around.
[21:22:58] <rotateq> yes drakonis :D
[21:23:06] <rotateq> and they've seen hell
[21:24:35] <gilberth> And it gets worse: As there is no exception handling you wrap another "enum" around, for an additional word. So three words minimum to return a value. Brilliant idea.
[21:25:04] <gilberth> bbl
[21:30:50] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:203e:45d6:8d1a:1058) (Ping timeout: 260 seconds)
[21:32:40] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608)
[21:35:23] <kakuhen> <hayley> "https://boingboing.net/2021/12/3..." <- This remind me of some guy who claimed source code "is one of the most illegal things to own."
[22:01:11] <sm2n> Who claimed that?
[22:58:30] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[23:02:42] <phoe> kakuhen: what's the full link?
[23:06:19] <MichaelRaskin> phoe: https://boingboing.net/2021/12/30/reporter-likely-to-be-charged-for-using-view-source-feature-on-web-browser.html
[23:06:20] -ixelp- Reporter likely to be charged for using "view source" feature on web browser | Boing Boing
[23:20:03] <rotateq> madness grows exponentially
[23:23:07] <phoe> welp
[23:29:25] *** Joins: VincentVega (~user@212.97.4.16)
[23:36:48] <amazigh> #_#'
[23:38:39] <semz> The lesson is "Don't report vulnerabilities to the authorities", I guess.
[23:39:25] <semz> I'm sure this won't backfire
[23:52:16] *** Parts: VincentVega (~user@212.97.4.16) (ERC (IRC client for Emacs 27.2))
[23:52:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
