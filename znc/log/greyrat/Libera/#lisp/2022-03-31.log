[00:04:07] <edgar-rft> doing with as little as possible is waiting until the money *comes* to you
[00:04:13] *** Quits: Brucio-61 (~Brucio-59@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[00:06:35] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 260 seconds)
[00:10:10] <ProfSimm> wasamasa: amazigh: I recall now in C#, the LINQ framework allows you to read the expression tree of a lambda, while the lambda is also compiled normally on the side.
[00:10:32] <ProfSimm> wasamasa: amazigh maybe macros can be like that. Compile normally, but also leave the expression tree, and receiver can pick either
[00:11:21] <wasamasa> lambda, macro, lambda, macro
[00:11:21] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[00:11:42] <ProfSimm> wasamasa: what about it
[00:11:43] <wasamasa> they're two different things, no
[00:11:56] <ProfSimm> wasamasa: C# has no macros. But you can read the expr tree of a lamdba
[00:12:03] <wasamasa> you'd have a lot less issues sticking to lambdas
[00:13:47] <ProfSimm> wasamasa: there are things we can't do with lamdbas
[00:13:57] *** Joins: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr)
[00:14:47] <wasamasa> go on
[00:18:15] <ProfSimm> wasamasa: I want people to pass some expression I turn to SQL 
[00:18:40] <ProfSimm> wasamasa: for example
[00:18:52] <wasamasa> feel free to actually write down some code
[00:19:04] <wasamasa> and put it into a pastebin
[00:19:20] <wasamasa> that way others can annotate it into something actually working
[00:19:58] <ProfSimm> wasamasa: well imagine you have this (select (a b c (d as e)) from (whatever) where (and (> x 10) (< y 4))
[00:20:26] <ProfSimm> wasamasa: you dont' wanna run the expressions, but read the, and recreate as sql
[00:21:15] <wasamasa> go on, show why a single quote cannot fix that
[00:21:19] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:22:49] <amazigh> speaking of little that pop in my feed: https://github.com/jrincayc/r7rs-pico-spec
[00:23:20] <amazigh> ProfSimm: what is your goal? exploration of ideas? an existing PL that does what you want? in that case: what do you want?
[00:23:46] <amazigh> are you familiar with constant folding, dead code elimiation?
[00:23:50] <wasamasa> an apostrophe diet I guess
[00:24:02] <ProfSimm> amazigh: yes
[00:24:09] <amazigh> kernel does not have apostrophe
[00:24:14] <amazigh> ProfSimm: yes?
[00:24:21] *** Quits: wacki (~wacki@87.123.136.47) (Quit: Leaving.)
[00:24:25] <ProfSimm> amazigh: I'm familiar
[00:24:58] <ProfSimm> full disclosure, I'm writing a toy language based on Lisp. Sorry, I'm one of those. It doesn't allow operators as names tho, so I can have infix operators (that compile to the standard s-expr)
[00:25:17] <ProfSimm> I.e. 5 + 5 compiles to (add 5 5 )
[00:25:29] <amazigh> how does it related to f-expr?
[00:26:02] <amazigh> aka runtime macros ?
[00:26:13] <ProfSimm> amazigh: it's related yes, it has a lazy execution
[00:26:19] <amazigh> no!
[00:26:21] <ProfSimm> amazigh: Haskellish
[00:26:23] <ProfSimm> no?
[00:26:34] <ProfSimm> you no likey?
[00:26:48] <amazigh> I mean yes, it is lazy at compile time, in theory, it can compile half a combiner, and keep the rest runtime behavior
[00:26:59] <amazigh> no not like haskell
[00:27:24] <ProfSimm> Why didn't Lisp go the lazy way
[00:27:32] <amazigh> dunno :)
[00:27:33] <ProfSimm> speed?
[00:27:54] <wasamasa> lazy evaluation sucks
[00:27:56] <amazigh> ask Zipheir on Scheme (or jcowan)
[00:28:00] <wasamasa> might as well skip on macros
[00:28:04] <amazigh> #scheme
[00:28:09] <ProfSimm> I don't know. It has benefits
[00:28:18] <amazigh> what is the benefit?
[00:28:19] <wasamasa> have you looked at clojure?
[00:28:39] <ProfSimm> amazigh: you can implement control structures and so on directly as functions, say if then/else
[00:28:43] <wasamasa> it uses a lazy data type for lots of things and that alone creates enough headaches
[00:28:55] <wasamasa> yeah, as I said, skip on macros then, lol
[00:29:21] <amazigh> control strucutres? what else than if/then/else?
[00:29:33] <amazigh> what advantage it has to be a function?
[00:29:47] <ProfSimm> amazigh: that's it, I just changed the entire language so I can write if then else as a function
[00:30:08] <amazigh> then Kernel AFAIK can do that too
[00:31:23] <amazigh> say, (define if3 (vau (test a b c)) if3 can be a dispatch on whether a is -1, 0, 1
[00:31:44] <amazigh> or even call it if if you want
[00:31:55] <amazigh> there is no macro in in the sense of scheme or cl
[00:32:28] <amazigh> say you write a program in kernel, you can request to evaluation using another definition of `eval`
[00:32:53] <amazigh> Chez can do that too, but it is if not limited, less elegant
[00:33:40] <amazigh> that definition new definition eval MAY be something like instead of returning an object, return me all the possible values it may return (afaiu again)
[00:34:09] <amazigh> but to replace `eval` with and `eval` that is lazy all-the-way down will require a different program i guess
[00:34:43] <amazigh> that is mosly rambling, it is my interpretation of the R-1RK spec
[00:35:28] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[00:35:54] <amazigh> similarly, you can say this other part of the program, that do not use the scheme-live evaluation model, but us the haskell eval model, but the code passed to `eval` must be according to its new spec
[00:36:19] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:b7bf:f2e4:8adb:82c9) (Quit: Client closed)
[00:36:26] <amazigh> anyway, just rambling since I have no evidence of that
[00:36:51] <ProfSimm> Have you thought, Excel is actually a functional language
[00:37:01] <amazigh> I mean, you can replace `eval` with another `eval` and get meaningful results from the same program is 99% certain
[00:37:29] <amazigh> when both eval makes sense
[00:37:53] <amazigh> ProfSimm: what is you goal already? I like to chat (a lot) but I'd prefer to have a goal :)
[00:38:23] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:38:42] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:39:40] <amazigh> (there is an agreement that even if kernel has some warts, bizarre thing, that makes difficult to comprehend how big code base can remain readable, I think it is mainstream among #proglangdesign that if an implementation compile kernel, it may be possible to have similar performance to a regular scheme... eta 30 years :))
[00:40:32] <amazigh> ProfSimm: I am not confortable with 'functional' language wording
[00:41:02] <amazigh> OCaml is functional, Haskell too, but one is lazy and the other eager?
[00:41:17] <amazigh> or is that ML that is eager?
[00:41:28] <amazigh> I am not sure what people call functional
[00:41:38] * amazigh dare to say he doesn't know
[00:42:24] <amazigh> similar performance, and a shorter user manual.
[00:42:50] <amazigh> at this time scheme, syntax-case require one semester to grasp lol
[00:43:04] <amazigh> half kidding
[00:43:19] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:39] <amazigh> ProfSimm: I am trying to give ideas so that you ask a question that is relevant to what I think. 
[00:43:55] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:44:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:29] *** Quits: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.2))
[00:47:02] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:47:36] *** Joins: user` (~user@20.red-88-5-198.dynamicip.rima-tde.net)
[00:51:32] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 250 seconds)
[00:53:26] *** Joins: kevingal (~quassel@37.228.201.223)
[00:54:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[00:55:21] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:56:34] <amazigh> ProfSimm: the goal of kernel is to eliminate the dichotomy between macros and lambdas, and put the effort to thinkg of what can be done at compile time, and what can only be done at runtime in the hand of the compiler
[00:57:19] *** Joins: lisp123 (~lisp123@143.238.171.43)
[00:57:42] <amazigh> spoiler: I do not know picolisp and newlisp
[01:02:09] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 256 seconds)
[01:04:57] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:10:03] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:14:10] <ProfSimm> amazigh: it's complicated, thanks for covering some ground for me
[01:14:51] <ProfSimm> amazigh: I'm trying to make a language that's very short and clear, has no noise in terms of syntax or semantics. It should be about intent, what, not how.
[01:15:05] <ProfSimm> amazigh: also i have no reserved words. 
[01:15:16] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:15:19] <ProfSimm> amazigh: should be suitable for DSLs hence the meta features and lazy exec possibly
[01:19:42] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[01:24:43] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[01:25:14] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:25:40] <johnjaye> wasamasa: i didn't know that you discussed lispy things in here
[01:25:50] <johnjaye> i thought elisp was the beginning middle and end of all practial lisps
[01:27:18] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:29:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:31:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:32:46] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[01:39:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[01:40:01] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[01:40:43] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:42:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:43:23] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[01:43:52] *** Joins: eddof13 (~textual@189.178.17.205)
[01:45:09] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:f96:57c8:3ffe:163)
[01:46:32] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:48:39] *** Quits: msk (~Thunderbi@89.205.124.39) (Read error: Connection reset by peer)
[02:07:12] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:11:11] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:28] *** Quits: mathrick (~mathrick@67.148.61.4) (Ping timeout: 246 seconds)
[02:14:06] *** Joins: msk (~Thunderbi@89.205.124.39)
[02:15:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:17:03] *** Quits: msk (~Thunderbi@89.205.124.39) (Client Quit)
[02:27:33] *** Joins: mathrick (~mathrick@67.148.61.4)
[02:41:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:45:12] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:45:39] *** Joins: lisp123 (~lisp123@143.238.171.43)
[02:50:23] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[02:52:31] *** Joins: pillton (~user@110-175-40-138.static.tpgi.com.au)
[03:02:22] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:02:58] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[03:08:07] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[03:11:03] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[03:26:50] *** Joins: occ (~occ@user/occ)
[03:30:07] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[03:36:32] *** Joins: dre (~dre@2001:8003:c932:c301:ddea:d36a:75bb:2e08)
[03:37:56] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:f96:57c8:3ffe:163) (Ping timeout: 250 seconds)
[03:41:59] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:45:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[03:50:11] *** Joins: xiews (~xiews@101.88.37.70)
[03:54:38] *** Quits: xiews (~xiews@101.88.37.70) (Ping timeout: 260 seconds)
[04:08:22] *** Joins: xiews (~xiews@117.136.8.184)
[04:12:33] *** Quits: xiews (~xiews@117.136.8.184) (Ping timeout: 256 seconds)
[04:13:18] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 260 seconds)
[04:14:50] *** Joins: johnjaye (~pi@173.209.64.74)
[04:22:42] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[04:25:32] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[04:27:10] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[04:28:39] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[04:29:31] *** Quits: Lumine (lumi@user/luminousnine) (Quit: zzz)
[04:33:16] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[04:33:53] *** Joins: lisp123 (~lisp123@143.238.171.43)
[04:36:53] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 250 seconds)
[04:38:13] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 240 seconds)
[04:47:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:48:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:51:06] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[04:52:23] *** Joins: xiews (~xiews@101.88.37.70)
[04:53:35] *** Quits: madage (~madage@user/madage) (Ping timeout: 240 seconds)
[04:54:14] *** Joins: madage (~madage@user/madage)
[05:01:25] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[05:02:42] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:14:02] *** Quits: mathrick (~mathrick@67.148.61.4) (Ping timeout: 252 seconds)
[05:15:17] *** Joins: mathrick (~mathrick@67.148.61.4)
[05:26:13] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[05:27:02] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[05:27:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[05:45:30] *** Joins: Madsy (~madsy@223.239.164.82.customer.cdi.no)
[05:57:37] *** Joins: xiongxin (~Thunderbi@117.136.39.213)
[06:01:15] *** Joins: livoreno (~livoreno@user/notzmv)
[06:05:18] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:07:25] *** Quits: phantomics (~phantomic@71-218-229-123.hlrn.qwest.net) (Ping timeout: 240 seconds)
[06:09:22] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[06:10:20] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61)
[06:11:02] *** Quits: user` (~user@20.red-88-5-198.dynamicip.rima-tde.net) (Read error: No route to host)
[06:11:31] *** Joins: user`` (~user@20.red-88-5-198.dynamicip.rima-tde.net)
[06:13:15] *** Quits: xiongxin (~Thunderbi@117.136.39.213) (Ping timeout: 256 seconds)
[06:13:24] *** Parts: user`` (~user@20.red-88-5-198.dynamicip.rima-tde.net) ()
[06:13:35] *** Quits: xiews (~xiews@101.88.37.70) (Ping timeout: 256 seconds)
[06:14:19] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[06:14:36] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61) (Ping timeout: 240 seconds)
[06:15:39] *** Joins: xiews (~xiews@101.88.37.70)
[06:21:52] *** Joins: lisp123 (~lisp123@143.238.171.43)
[06:22:20] *** Joins: Inline (~Inline@p200300cd470e1300a84f1effc05ae732.dip0.t-ipconnect.de)
[06:25:03] *** Quits: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:26:51] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 256 seconds)
[06:27:23] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[06:28:28] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[06:32:05] *** Joins: xiongxin (~Thunderbi@117.136.40.174)
[06:33:34] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[06:33:43] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[06:35:33] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[06:39:45] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[06:42:41] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Quit: Quit)
[06:53:05] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[06:57:40] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:23:56] *** Joins: occ (~occ@user/occ)
[07:33:21] *** Quits: kevingal (~quassel@37.228.201.223) (Remote host closed the connection)
[07:39:15] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401)
[07:41:15] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[07:42:00] *** Quits: xiongxin (~Thunderbi@117.136.40.174) (Ping timeout: 272 seconds)
[07:42:01] *** xiongxin1 is now known as xiongxin
[07:44:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[07:45:36] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[07:49:43] *** Quits: xiews (~xiews@101.88.37.70) (Ping timeout: 260 seconds)
[07:50:29] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 256 seconds)
[07:52:19] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401) (Ping timeout: 260 seconds)
[07:58:50] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:03:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[08:06:11] *** Joins: lunarkitty (uid501895@user/pyra)
[08:10:14] *** Joins: lisp123 (~lisp123@143.238.171.43)
[08:14:04] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:14:43] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[08:16:39] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:30:45] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:34:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:34:55] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:35:36] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[08:39:19] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[08:41:43] *** Quits: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:42:20] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:47:13] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[09:09:13] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[09:09:26] *** Joins: tarod16 (~tarod16@user/tarod16)
[09:10:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:14:31] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[09:22:02] *** Quits: tarod16 (~tarod16@user/tarod16) (Remote host closed the connection)
[09:23:48] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[09:25:58] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:26:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:30:49] <Andrew> How many eyes does the mascot have again?
[09:46:46] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:51:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:55:35] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[09:58:33] *** Joins: lisp123 (~lisp123@143.238.171.43)
[10:02:49] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[10:13:06] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[10:15:13] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[10:23:16] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:28:22] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:34:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[10:35:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:39:11] *** Joins: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[10:40:43] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[10:41:35] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:46:31] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: Lost terminal)
[10:50:36] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:50:53] *** Joins: pjb (~pjb@user/pjb)
[10:51:13] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:52:04] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:56:12] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:02:25] *** Joins: treflip (~user@user/treflip)
[11:03:23] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[11:06:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[11:14:43] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[11:27:41] *** Joins: xiongxin (~Thunderbi@117.136.39.222)
[11:40:58] *** Joins: Lumine (lumi@user/luminousnine)
[11:46:50] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:49:02] *** Joins: shka (~herr@109.231.3.55)
[11:51:19] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[12:09:17] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 252 seconds)
[12:12:15] *** Joins: johnjaye (~pi@173.209.64.74)
[12:12:44] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4)
[12:14:35] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 260 seconds)
[12:14:58] *** Quits: xiongxin (~Thunderbi@117.136.39.222) (Ping timeout: 272 seconds)
[12:14:59] *** xiongxin1 is now known as xiongxin
[12:17:51] *** Quits: occ (~occ@user/occ) (Remote host closed the connection)
[12:21:11] *** Joins: occ (~occ@user/occ)
[12:22:59] *** Joins: lisp123 (~lisp123@143.238.171.43)
[12:26:19] *** Joins: Oddity (~Oddity@user/oddity)
[12:36:28] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[12:38:57] *** Andrew is now known as fadsfdsafdsa
[12:39:34] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[12:39:41] *** fadsfdsafdsa is now known as Andrew
[12:43:03] *** Quits: dre (~dre@2001:8003:c932:c301:ddea:d36a:75bb:2e08) (Ping timeout: 260 seconds)
[12:45:30] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:51:36] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[12:51:52] *** Joins: shka (~herr@109.231.3.55)
[12:54:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:07:10] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:08:23] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 256 seconds)
[13:11:52] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:13:31] *** Joins: trocado (~uiop9@183.49.54.77.rev.vodafone.pt)
[13:15:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:15:26] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:17:05] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:17:24] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4) (Ping timeout: 240 seconds)
[13:28:26] *** Quits: X-Scale (~ARM@231.197.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[13:36:08] *** Joins: xiongxin (~Thunderbi@117.136.39.211)
[13:37:01] *** Quits: suss (~user@user/suss) (Ping timeout: 246 seconds)
[13:37:06] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[13:39:34] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca)
[13:41:55] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 246 seconds)
[13:42:12] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:c43:c097:cf3e:e138) (Ping timeout: 240 seconds)
[13:43:13] *** Quits: xiongxin (~Thunderbi@117.136.39.211) (Ping timeout: 260 seconds)
[13:43:13] *** xiongxin1 is now known as xiongxin
[13:44:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[13:51:40] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[13:51:49] *** Joins: treflip (~user@user/treflip)
[13:56:59] <dTal> I am curious how common it is to be able to optimize (let ((g (lambda (y) (lambda (x) (+ x )))) (f (lambda (x y) ((g y) x)))) f) into (lambda (x y) (+ x y))
[13:57:21] <dTal> (for a compiler, that is)
[13:57:55] <dTal> So far I've ascertained that Chez Scheme doesn't, and Julia does
[13:58:23] *** Quits: trocado (~uiop9@183.49.54.77.rev.vodafone.pt) (Ping timeout: 260 seconds)
[13:58:27] <dTal> I've tried to evaluate a number of other languages but alas I am a bear of very little brain
[13:59:37] <moon-child> I would say fairly common
[13:59:45] <moon-child> consider that that optimization is necessary to generate efficient code for let*
[14:00:15] <moon-child> (assuming the classic implementation of let*)
[14:00:47] <moon-child> e.g. sbcl http://ix.io/3TUx
[14:01:20] <moon-child> (well, ok, let* is different in that the arguments are available and can be folded away.  Still.)
[14:04:23] <dTal> Nice! I tried to test SBCL but it seems I know less Common Lisp than I thought :D
[14:04:43] * dTal is more of a Scheme chap
[14:05:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:05:33] <moon-child> scheme is converging on cl :)
[14:05:50] <moon-child> r7rs-large will match it in size, and include conditions and generic functions
[14:05:55] <dTal> that "funcall" syntax though, ugh. I shall never get used to it
[14:06:34] <moon-child> yes, funcall is not so nice
[14:06:49] <moon-child> but multiple namespaces are very well suited to cl
[14:07:39] <dTal> I am uncomfortable with the r7rs, as a Scheme user rather than a Scheme implementer r6rs was the direction I wanted the language to take
[14:07:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:07:55] <dTal> I shall probably end up using racket in the end
[14:08:19] <sham1> Well R7-large will also be similar to R6, although there will be divergence
[14:08:34] <moon-child> when I scheme, I prefer s7 over all the standardised dialects
[14:08:42] <moon-child> too many nice features
[14:08:53] <moon-child> https://ccrma.stanford.edu/software/snd/snd/s7.html
[14:09:32] *** Joins: msk (~Thunderbi@89.205.124.83)
[14:09:56] <dTal> Anyway, to return to the original question - actually I may have oversimplified too much with the lets and lambdas, because I'm interested in what happens when you construct the function out of higher order functions in the global namespace, rather than inside let-expressions
[14:10:38] <moon-child> you want to know if (compose auto-uncurry auto-curry) is the identity?
[14:11:06] <moon-child> 'global namespace'  likely the primary determining factor is whether your implementation inlines
[14:11:17] <dTal> my karate belt is not sufficiently dark to understand that expression
[14:12:16] <dTal> not familiar with auto-curry/uncurry
[14:12:21] <moon-child> (auto-curry (lambda (x y z...) ...) is (lambda (x) (lambda (y) (lambda (z...) ...)))
[14:12:39] <moon-child> (auto-uncurry (lambda (x) (lambda (y) (lambda (z...) ...)))) is (lambda (x y z...) ...)
[14:12:46] <dTal> I see
[14:12:55] <moon-child> these are fictional.  I don't think you can write them in most standard lisps.  Especially uncurry
[14:13:07] <moon-child> but they are intended to be representative of your 'higher order functions in the global namespace'
[14:15:22] <dTal> right so if I do (define (g y) (lambda (x) (+ x y))) followed by (define (f x y) ((g y) x)), instead of putting it all in (let), how optimized is that
[14:16:06] <moon-child> depends on the language's semantics
[14:16:20] <moon-child> cl permits inlining of named function calls
[14:16:22] <sham1> The problem with that is that at least with R7-small and I suppose also R7-large whenever that becomes a thing, if g and f are in the same library, you can't necessarily inline them
[14:16:29] <sham1> Because your define might change
[14:16:41] <moon-child> afaik scheme does not; I saw something in the chez docs that suggested it was not allowed
[14:16:54] <moon-child> the issue being, as sham1 says, that g could be redefined
[14:17:17] <sham1> While if g and f are in different libraries, you're not allowed to set! them and they can then be inlined
[14:17:29] <sham1> Since you're not allowed to set! imported things
[14:17:31] <moon-child> however, if you say (define f (let () (define g ...) (lambda ...))) then g is not globally accessible, so it can be inlined
[14:17:37] <dTal> Ahhhhh
[14:17:42] <moon-child> err, (define (g ..) ..)
[14:17:47] <sham1> Yeah
[14:17:59] <sham1> Or (begin (define (g ...) ...) (define (f ...) ...))
[14:18:06] <dTal> so the reason that Julia manages to optimize the global case is because it explicitly doesn't permit redefining functions
[14:18:12] <sham1> Well, depends on where the begin in
[14:18:12] <moon-child> oh yea begin is a thing
[14:18:14] <sham1> is*
[14:18:21] <sham1> Because on toplevel it also acts as toplevel
[14:19:52] <sham1> But for example (lambda () (define (g ...) ...) (define (f ...) ...)) the defines act like you'd have a letrec* and they can be inlined, although you need escape analysis to know for sure
[14:20:23] <moon-child> escape analysis...?
[14:20:33] <moon-child> why do you care if the lambdas escape?  That doesn't let them be mutated
[14:20:40] <dTal> and there is no way to guarantee that a function won't be redefined? If I write a library with a bunch of higher-order functions, it's doomed to be slow?
[14:20:40] <sham1> True
[14:21:09] <sham1> There is a guarantee if your higher-level functions are within separate libraries
[14:22:29] <moon-child> dTal: you could try something like this:  (defmacro define-with-hof (np . body) `(define ,(car np) (letrec* (all your hof definitions go here) (lambda ,(cdr np) ,@body)))) and then use (define-with-hof (f ...) ...)
[14:22:34] <moon-child> bet that kills compile times though
[14:22:51] <moon-child> probably there is a smarter way using the scheme library semantics
[14:22:58] <moon-child> s/library/module/
[14:23:05] <sham1> And apropos with syntax-case
[14:23:34] <moon-child> yeah, yeah ... idk hygienic macros
[14:23:37] <moon-child> s7 doesn't have 'em :)
[14:23:46] * dTal isn't a fan of them either
[14:24:03] <dTal> but then we've established I don't know very much
[14:25:05] <moon-child> my impression is that they add a great deal of complexity, and comparatively little value.  But the problems they solve _are_ real
[14:25:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[14:26:20] <dTal> Yeah okay so Chez does do the optimization if it doesn't need to do the global lookup, this is a good lesson
[14:26:56] <sham1> I think one could also get Guile to do it as well, but I'd have to look more into how to get Guile to do the optimisation
[14:27:01] <dTal> no wait, no
[14:27:32] <dTal> it still doesn't! this function allocates: (define t1 (let ((g (lambda (y) (lambda (x) (+ x )))) (f (lambda (x y) ((g y) x)))) f))
[14:27:38] *** Joins: amk (~amk@109.255.169.126)
[14:27:42] <dTal> this function doesn't http://ix.io/3TUx
[14:27:50] <dTal> oops pastefail
[14:27:54] <dTal> (define t2 (lambda (x y) (+ x y)))
[14:28:54] *** Joins: amk_ (~amk@109.255.169.126)
[14:31:17] <dTal> oh no, that's because I used (let) and not (let*) and I still had a function g left over in my repl.
[14:31:51] <dTal> D'hoy. Clean repl with --optimize-level 3 and (let*) and it works a charm
[14:34:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:37:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:39:22] <sham1> Ah okay, Guile does indeed optimize it if you compile it
[14:39:44] <sham1> But I suppose that for more HoFs it might be a bit trickier
[14:40:56] <moon-child> afaik guile does not do very sophisticated optimization
[14:41:43] <sham1> Well it did inline the t1 presented above
[14:41:59] <sham1> Into the equivalent of (lambda (x y) (+ x y))
[14:42:18] <sham1> Maybe not the most sophisticated thing in the world, but it works. At least when loaded from a script
[14:44:15] *** Quits: OlCe`` (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[14:46:48] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca) (Ping timeout: 260 seconds)
[14:47:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[14:51:22] *** Joins: occ (~occ@user/occ)
[14:57:56] *** Joins: OlCe (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr)
[15:00:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:06:57] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:07:31] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[15:09:43] *** Quits: lisp123 (~lisp123@143.238.171.43) (Quit: Leaving...)
[15:23:17] *** Quits: livoreno (~livoreno@user/notzmv) (Remote host closed the connection)
[15:24:58] *** Joins: Gromboli3 (~Gromboli@user/gromboli)
[15:26:52] *** Quits: Gromboli (~Gromboli@user/gromboli) (Ping timeout: 272 seconds)
[15:26:53] *** Gromboli3 is now known as Gromboli
[15:27:45] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:30:17] *** Joins: livoreno (~livoreno@user/notzmv)
[15:32:16] *** Joins: xiews (~xiews@2409:891e:1126:1e9:c71e:7b9c:970b:3a79)
[15:33:32] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[15:35:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:36:36] *** Quits: xiews (~xiews@2409:891e:1126:1e9:c71e:7b9c:970b:3a79) (Ping timeout: 240 seconds)
[15:37:41] *** Joins: wacki (~wacki@87.123.129.87)
[15:41:56] *** Joins: hajovonta (~user@BC9C81E6.catv.pool.telekom.hu)
[15:41:59] <hajovonta> hello
[15:41:59] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:35f1:5197:30da:36a6)
[15:45:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:50:22] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:50:34] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:51:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[15:51:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:00:02] *** Joins: razetime (~quassel@117.193.2.164)
[16:00:13] <amazigh> ProfSimm: look into #proglangdesign 
[16:02:47] <amazigh> join
[16:06:36] *** Quits: pillton (~user@110-175-40-138.static.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[16:15:26] *** Joins: kevingal (~quassel@149.157.108.66)
[16:21:27] *** Quits: kevingal (~quassel@149.157.108.66) (Ping timeout: 260 seconds)
[16:21:29] *** Joins: kevingal_ (~quassel@2001:770:c0:401:796b:1764:27f3:4411)
[16:25:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[16:27:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:27:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:27:51] *** Quits: joev (~joev@user/joev) (Ping timeout: 245 seconds)
[16:29:17] *** Joins: joev (~joev@user/joev)
[16:33:35] *** Quits: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[16:37:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[16:38:52] *** Joins: aeth (~aeth@user/aeth)
[16:50:32] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:50:58] *** Joins: phantomics (~phantomic@71-218-248-44.hlrn.qwest.net)
[16:57:32] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:57:38] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[16:58:08] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:59:08] *** Quits: kevingal_ (~quassel@2001:770:c0:401:796b:1764:27f3:4411) (Ping timeout: 252 seconds)
[16:59:50] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Remote host closed the connection)
[17:02:49] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[17:05:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[17:12:11] *** Quits: wacki (~wacki@87.123.129.87) (Quit: Leaving.)
[17:15:17] *** Joins: wacki (~wacki@87.123.129.87)
[17:23:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[17:30:28] *** Quits: joev (~joev@user/joev) (Ping timeout: 246 seconds)
[17:31:36] *** Joins: joev (~joev@user/joev)
[17:32:27] *** Joins: prxq (~quassel@dynamic-077-179-153-065.77.179.pool.telefonica.de)
[17:37:58] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[17:40:14] *** Quits: hajovonta (~user@BC9C81E6.catv.pool.telekom.hu) (Remote host closed the connection)
[17:48:06] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 252 seconds)
[17:54:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:57:46] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:37d8:17fb:6a:a772)
[17:59:09] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:59:45] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[18:05:12] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[18:10:58] *** Quits: Necktwi (~necktwi@124.123.127.132) (Ping timeout: 260 seconds)
[18:22:10] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:39:30] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[18:42:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:48:14] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[18:52:43] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:52:43] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[19:00:13] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:01:03] *** Quits: letto (~letto@188.27.114.171) (Ping timeout: 260 seconds)
[19:02:40] *** Joins: Necktwi (~necktwi@124.123.127.132)
[19:03:22] *** Joins: letto (~letto@188.27.114.171)
[19:13:42] *** Quits: letto (~letto@188.27.114.171) (Remote host closed the connection)
[19:16:09] *** Joins: letto (~letto@188.27.114.171)
[19:22:32] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:36:20] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:37:49] *** Joins: morte_ (~user@190.104.116.153)
[19:40:48] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:40:59] *** Quits: Lumine (lumi@user/luminousnine) (Quit: bbl)
[19:41:47] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:42:17] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:42:46] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:45:36] *** Joins: rawley (~rawley@142.99.241.242)
[19:46:37] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[19:47:48] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:51:43] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[19:56:11] *** Joins: gareppa (~gareppa@user/gareppa)
[19:56:44] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:59:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:03:32] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[20:12:59] <prokhor> does anybody know some library for Neural Networks/ Machine Learning in Lisp?
[20:16:07] *** Joins: Oddity (~Oddity@user/oddity)
[20:18:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[20:20:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:22:07] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:24:03] <wasamasa> well
[20:24:26] <wasamasa> you could take an ancient lisp book on symbolic AI and do minimal adjustments to have a tiny neural network do handwriting recognition
[20:24:51] *** Joins: thermo (~thermo@192.241.228.231)
[20:25:18] <wasamasa> that's the stuff that made people believe lisp is the AI language
[20:27:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:28:14] <wasamasa> https://github.com/CodyReichert/awesome-cl#machine-learning
[20:34:06] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:38:04] *** Joins: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de)
[20:42:55] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Remote host closed the connection)
[20:45:01] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[20:45:59] *** Joins: suss (~user@user/suss)
[20:51:15] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:52:52] *** Joins: strajder (~strajder@user/strajder)
[21:12:56] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[21:13:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[21:13:25] *** Quits: razetime (~quassel@117.193.2.164) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:17:51] *** Joins: karlosz_ (~karlosz@47.151.152.149)
[21:18:23] *** Quits: karlosz_ (~karlosz@47.151.152.149) (Remote host closed the connection)
[21:20:12] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[21:21:29] *** Quits: phantomics (~phantomic@71-218-248-44.hlrn.qwest.net) (Read error: Connection reset by peer)
[21:25:39] *** Joins: eddof13_ (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[21:29:20] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:31:28] <edgar-rft> with Lisp you'll rather become a learning machine
[21:35:13] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:41:46] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 246 seconds)
[21:43:48] *** Quits: eddof13_ (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:45:48] *** Joins: Lumine (~Lumine@user/luminousnine)
[21:46:07] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[21:46:13] <jackdaniel> > so, did you learn something?
[21:46:17] <jackdaniel> < BLEEP BLOOP
[21:56:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[21:58:07] <amazigh> prokhor: look into opencog
[21:58:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:02:31] *** Joins: phantomics (~phantomic@71-33-133-243.hlrn.qwest.net)
[22:02:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[22:04:09] *** Joins: rawley (~rawley@142.99.241.242)
[22:26:17] *** Joins: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com)
[22:30:09] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:50:36] *** Joins: casaca (~casaca@user/casaca)
[22:53:04] *** Quits: laman1 (~laman@rego.ai) (Quit: WeeChat 3.3)
[22:53:36] *** Quits: heisig (~heisig@p579c8d35.dip0.t-ipconnect.de) (Quit: Leaving)
[23:12:22] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:21:48] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 250 seconds)
[23:22:31] *** Quits: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com) (Remote host closed the connection)
[23:24:37] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[23:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170)
[23:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170) (Changing host)
[23:34:53] *** Joins: skapata (~Skapata@user/skapata)
[23:53:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[23:55:40] *** Joins: eddof13_ (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[23:56:05] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
