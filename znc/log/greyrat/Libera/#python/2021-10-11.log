[00:00:31] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5cda:aa80:a7cc:c20)
[00:01:15] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Ping timeout: 265 seconds)
[00:02:49] *** Quits: kristine86 (~kristine8@2603-7080-af03-588a-389f-21c4-9070-d18d.res6.spectrum.com) (Ping timeout: 256 seconds)
[00:03:07] <paul424> nedbat, it works but not as expected :D
[00:03:35] *** Joins: punkgeek (~punkgeek@151.245.141.112)
[00:03:40] <nedbat> elias117: everyone is afraid they won't make the cut
[00:03:58] <punkgeek> How  can I print only UUID from this code? https://paste.ofcode.org/fVJfXp7CF758xdt7JTUTiL
[00:03:58] <nedbat> paul424: show us
[00:04:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:04:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:05:47] <paul424> https://bpa.st/MBAA nedbat
[00:06:29] <nedbat> paul424: right, because you only have one iterator that you are using for both loops. You simulated the buggy list
[00:06:49] *** Gustavo6046_ is now known as Gustavo6046
[00:08:31] *** Joins: Reoming (~Guest34@host86-152-89-185.range86-152.btcentralplus.com)
[00:08:49] <Reoming> hi
[00:09:29] *** Joins: grooverman (~grooverma@177.189.89.171)
[00:09:49] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:10:45] <paul424> How would you convince 10-13 year old to learn python  and not scratch ?
[00:11:08] <paul424> from scratch one would grow up, from python one don't :)
[00:11:16] *** Quits: magla (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[00:11:32] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[00:13:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[00:13:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:13:26] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[00:14:09] <paul424> and here's nightmarish Heapsort from the beginnings of my coding in Python : you can laugh as well give some tips ;) https://bpa.st/XNDA
[00:14:48] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[00:15:03] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[00:15:11] *** Joins: emf (~emf@2620:10d:c090:400::5:c927)
[00:15:15] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Remote host closed the connection)
[00:15:23] <bjs> paul424: the 10-13 years old have to grow up anyway,  so why does it matter if they choose Python or Scratch now :)
[00:15:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:15:39] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[00:15:43] <nedbat> punkgeek: do you have any code to parse this yet?
[00:15:47] <nedbat> Reoming: hey, what's up?
[00:16:27] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[00:17:33] *** Joins: DPA (~DPA@2a05:41c0:4:604::a3c:10d)
[00:18:27] <Reoming> Hello :)
[00:18:49] *** Joins: zeden (~zeden@user/zeden)
[00:19:19] <punkgeek> nedbat: No i couldn't find anything related
[00:19:58] <nedbat> punkgeek: you should be able to find some examples of parsing XML with Python
[00:20:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:20:39] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:21:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:21:39] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:22:07] *** Joins: Macuser (~Macuser@216.30.159.201)
[00:23:09] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[00:23:36] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[00:23:58] <ali1234> you can program python and scratch at the same time
[00:24:12] <nedbat> punkgeek: idk if this one is good: https://www.edureka.co/blog/python-xml-parser-tutorial/
[00:25:04] <ali1234> paul424: https://staging.edublocks.org/editor
[00:25:53] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[00:26:22] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[00:26:39] <axisys> I am learning to write class and I got this error. I added a {self} to experiment and I get this error https://dpaste.org/922g
[00:26:57] <axisys> can one explain why I got this error?
[00:27:21] *** Joins: abiss27 (~auser@user/abiss)
[00:27:32] <axisys> my working code only has {self.first} and {self.last} and no {self} in that return
[00:27:53] <ali1234> {self} calls repr
[00:28:05] <ali1234> repr calls {self} -> infinite loop
[00:28:09] <nedbat> axisys: {self} is asking to print self into the string. which calls self.__repr__, which recurses infinitely
[00:28:17] *** Joins: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch)
[00:28:50] *** Parts: abiss27 (~auser@user/abiss) ()
[00:29:02] *** Quits: DPA (~DPA@2a05:41c0:4:604::a3c:10d) (Ping timeout: 260 seconds)
[00:29:23] <axisys> gotcha.. thank you! I am glad I experimented that.
[00:29:49] <ali1234> maybe you want something like f"{type(self)}"
[00:30:22] <axisys> ali1234: yeah let me try that
[00:30:25] <paul424> ali1234++
[00:30:30] <paul424> thanks
[00:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[00:32:27] <ali1234> or perhaps type(self).__name__
[00:32:32] <axisys> ali1234: that works.. is there a way to identify the name of the object? like `emp1` in this case?
[00:32:38] *** Joins: eem (~eem@user/eem)
[00:32:50] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:32:51] <axisys> ali1234: haha.. let me try that.. you are reading my mind my friend :-)
[00:32:51] <ali1234> no, the name an instance is bound to is impossible to retrieve
[00:33:13] <ali1234> it could be bound to many names
[00:33:34] <ali1234> consider emp2 = emp1
[00:33:50] <ali1234> now what does repr(emp2) return?
[00:34:38] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 260 seconds)
[00:34:43] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[00:35:37] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:35:41] <axisys> right it gives you the name of the class since they all instances of the same class
[00:36:43] *** Quits: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 252 seconds)
[00:37:17] *** Quits: paul424 (~tom@ip-37-248-155-217.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:37:27] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[00:37:55] *** Parts: Reoming (~Guest34@host86-152-89-185.range86-152.btcentralplus.com) ()
[00:37:56] *** Joins: DPA (~DPA@2a05:41c0:4:604::a3c:10d)
[00:38:13] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[00:38:58] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:40:43] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[00:41:31] *** Quits: daoudr__ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Remote host closed the connection)
[00:41:37] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:42:45] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:68a8:7f6b:10c0:1405) (Quit: Leaving)
[00:43:04] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Ping timeout: 256 seconds)
[00:44:12] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[00:45:03] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:45:06] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 245 seconds)
[00:46:18] *** Joins: mart1 (~vimart@148.252.128.220)
[00:46:42] *** mart1 is now known as vimart
[00:47:05] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[00:47:43] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[00:48:25] *** Joins: sirquack (~sirquack@c-76-102-156-110.hsd1.ca.comcast.net)
[00:48:33] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[00:48:45] <vimart> Hello World
[00:48:53] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:5d4e:3a51:f089:4e52)
[00:49:01] <sirquack> how to deal with GET and POST requests with flask?
[00:49:44] *** Parts: punkgeek (~punkgeek@151.245.141.112) (Konversation terminated!)
[00:49:46] <deniska> sirquack: what do you mean by "deal"?
[00:50:28] *** Quits: wils (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[00:50:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:50:31] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:50:36] <deniska> sirquack: the whole thing flask does is allowing you to receive various http requests
[00:50:50] <deniska> sirquack: or do you want to send your requests to elsewhere?
[00:50:52] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[00:52:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:52:19] <sirquack> deniska: the code that can recieve them, i.e. a function that is executed if a certain post request is recieved
[00:52:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:53:42] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[00:53:49] <deniska> sirquack: https://flask.palletsprojects.com/en/2.0.x/quickstart/#http-methods
[00:54:15] <deniska> (I thought it was just @app.get() or @app.post() but I guess I was thinking about some other framework)
[00:54:40] *** Quits: Akuli (~Akuli@82-203-164-212.bb.dnainternet.fi) (Quit: Leaving)
[00:54:42] <sirquack> deniska: thanks!
[00:55:27] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[00:55:28] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[00:56:31] *** Quits: Dotz0cat (~Dotz0cat@h63.70.29.71.dynamic.ip.windstream.net) (Ping timeout: 252 seconds)
[00:57:58] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[00:58:41] *** Joins: Dotz0cat (~Dotz0cat@h254.88.187.173.dynamic.ip.windstream.net)
[00:59:15] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:00:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:01:28] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:01:38] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:03:21] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:05:19] *** Quits: hudo_ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[01:07:34] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[01:08:25] *** Joins: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[01:10:22] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[01:11:00] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:11:21] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:5d4e:3a51:f089:4e52) (Ping timeout: 245 seconds)
[01:12:05] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[01:12:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[01:14:32] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Read error: Connection reset by peer)
[01:14:54] *** Joins: fikran (~fikran@user/fikran)
[01:15:31] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:415d:f0c:109d:2177) (Ping timeout: 245 seconds)
[01:15:53] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[01:17:36] *** Quits: emf (~emf@2620:10d:c090:400::5:c927) (Ping timeout: 245 seconds)
[01:22:01] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:22:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:22:32] *** Quits: sarab (~sarab@103.210.200.98) (Quit: Leaving)
[01:24:59] *** Gustavo6046_ is now known as Gustavo6046
[01:26:19] *** Joins: cjb (~cjb@user/cjb)
[01:28:46] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2.1)
[01:30:40] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[01:30:58] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:30:59] *** Joins: Milos (~Milos@user/milos)
[01:31:11] *** Quits: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint_)
[01:34:51] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[01:36:07] *** Quits: sirquack (~sirquack@c-76-102-156-110.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[01:38:30] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[01:39:25] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[01:42:52] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[01:43:15] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[01:44:01] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net)
[01:46:02] *** Joins: DXR (~lyrical@77.49.107.151.dsl.dyn.forthnet.gr)
[01:47:41] <jmiehe> pydantic fans here? How do I get this to produce Models instead of Dicts? https://bpa.st/ZDAQ
[01:48:32] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-dc27-4892-0c33-30f4.res6.spectrum.com) (Read error: Connection reset by peer)
[01:48:49] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[01:49:32] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[01:49:51] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[01:50:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:50:46] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:51:02] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[01:51:04] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:d47:48bf:97c5:2de9)
[01:51:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:53:42] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[01:54:11] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:54:29] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[01:57:15] *** Quits: upsala (~zcb@185.213.155.232) (Ping timeout: 265 seconds)
[01:57:34] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 252 seconds)
[01:57:54] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:58:17] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:58:39] *** Joins: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3)
[01:58:40] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[01:59:09] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 250 seconds)
[01:59:21] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[01:59:32] *** Joins: vicfred (~vicfred@user/vicfred)
[02:00:41] *** Joins: r3m (~launch@user/r3m)
[02:01:08] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:01:36] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:02:17] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:06:10] *** Joins: the4oo4 (~the4oo4@shenzhou.whatbox.ca)
[02:07:06] *** Parts: velix (~velix@user/velix) (Leaving)
[02:08:39] *** Quits: Narrat (~omnius@p200300df5f0d8e5306ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:09:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[02:11:32] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[02:11:54] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[02:13:13] *** Quits: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:21:22] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[02:21:44] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:22:29] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[02:24:32] *** Quits: MikZyth (~MikZyth@188.65.242.140) (Quit: WeeChat 3.3)
[02:25:38] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Quit: The Lounge - https://thelounge.chat)
[02:26:50] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[02:30:18] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[02:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:21] *** Quits: oriba (~oriba@dynamic-089-012-110-065.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:31:36] *** Joins: junktext (~junktext@109.201.152.172)
[02:31:45] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c) (Remote host closed the connection)
[02:32:17] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[02:32:25] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c)
[02:33:00] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[02:33:29] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Quit: Leaving)
[02:34:45] *** Joins: semeion (~semeion@user/semeion)
[02:34:51] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c) (Remote host closed the connection)
[02:35:06] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c)
[02:37:03] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[02:38:57] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:39:19] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[02:39:36] *** Quits: vimart (~vimart@148.252.128.220) (Quit: WeeChat 2.8)
[02:40:59] *** Joins: lethu (~lethu@user/lethu)
[02:42:03] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[02:43:08] *** Joins: emerent_ (~quassel@p200300cd5748557bba27ebfffed28a59.dip0.t-ipconnect.de)
[02:43:08] *** emerent is now known as Guest6958
[02:43:08] *** emerent_ is now known as emerent
[02:43:17] *** Joins: Wulf (~Wulf@user/wulf)
[02:43:26] *** Quits: Guest6958 (~quassel@p200300cd57485520ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:46:48] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:47:04] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 252 seconds)
[02:49:52] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 252 seconds)
[02:50:02] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:50:31] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[02:51:09] *** Quits: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3) (Quit: Leaving)
[02:51:15] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[02:51:52] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[02:52:28] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:51] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:59:13] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[02:59:24] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[03:01:00] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[03:01:28] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c) (Remote host closed the connection)
[03:03:15] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[03:04:09] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[03:04:34] *** Joins: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3)
[03:04:40] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[03:05:13] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Ping timeout: 252 seconds)
[03:05:42] *** Joins: newpy (~newpy@206.168.231.90)
[03:05:56] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[03:06:29] *** Joins: jazzy (~jaziz@user/jaziz)
[03:06:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[03:07:01] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[03:10:01] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[03:10:51] *** Joins: WarpedAI (~Warped@user/warped)
[03:12:19] *** Quits: WarpedAI (~Warped@user/warped) (Read error: Connection reset by peer)
[03:12:36] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[03:12:44] *** Joins: HaMsTeRs (~Thunderbi@121.202.44.109)
[03:12:45] *** Joins: WarpedAI (~Warped@user/warped)
[03:13:01] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 245 seconds)
[03:13:11] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[03:16:02] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 265 seconds)
[03:18:52] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[03:19:34] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 252 seconds)
[03:20:51] *** Joins: Julian (~tos9@python/site-packages/Julian)
[03:22:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[03:22:42] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[03:24:13] *** Joins: fikran (~fikran@user/fikran)
[03:24:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:25:30] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[03:25:51] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[03:27:41] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[03:28:49] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:30:09] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[03:30:33] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:36] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:32:26] *** Joins: brabrax (~brabrax@user/brabrax)
[03:32:59] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Remote host closed the connection)
[03:33:49] *** Quits: gitly (~gitly@85.255.234.80) (Ping timeout: 252 seconds)
[03:34:58] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[03:37:21] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[03:38:10] *** Quits: grooverman (~grooverma@177.189.89.171) (Quit: bye)
[03:39:01] *** Joins: grooverman (~grooverma@177.102.119.40)
[03:42:37] *** Quits: junktext (~junktext@109.201.152.172) (Ping timeout: 252 seconds)
[03:42:40] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[03:43:56] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[03:48:39] *** Quits: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3) (Remote host closed the connection)
[03:51:59] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[03:52:31] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[03:52:34] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:54:41] *** Quits: kaos02_ (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 264 seconds)
[03:55:48] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:55:52] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[03:56:17] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[03:56:58] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:57:17] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:00:13] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[04:03:15] <grym> jmiehe: Things.parse_obj(data)
[04:05:56] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-226.citykom.de) (Ping timeout: 245 seconds)
[04:06:49] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[04:07:05] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[04:08:00] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-231.citykom.de)
[04:08:05] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[04:10:27] *** Joins: Skyfire (~pyon@user/pyon)
[04:12:06] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[04:13:28] *** Quits: HaMsTeRs (~Thunderbi@121.202.44.109) (Ping timeout: 252 seconds)
[04:13:33] *** Joins: HaMmY1 (~Thunderbi@182.153.61.73)
[04:14:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[04:15:51] *** HaMmY1 is now known as HaMsTeRs
[04:18:24] *** Joins: jazzy2 (~jaziz@user/jaziz)
[04:18:26] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[04:18:52] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[04:20:56] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:68fe:1a6b:92ae:1b)
[04:21:39] *** Joins: HaMmY1 (~Thunderbi@121.202.55.127)
[04:22:11] *** Quits: HaMsTeRs (~Thunderbi@182.153.61.73) (Ping timeout: 245 seconds)
[04:22:11] *** HaMmY1 is now known as HaMsTeRs
[04:22:34] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[04:23:14] *** jazzy2 is now known as jazzy
[04:25:04] <transhumanist> HI! So I have 10 gasses  for instance inquirer.List( choices =['CO2,[O2, N2, He, H....] I want to have someone use inquirer to select one then I want to pass the selected choice to a function  called gas_mass(pascal(1), volume, Temperature(5), str(<<<gas selected would go here>>)&"Mass")      ... what would I call this. I want to pass the CO2Mass for instance to the function by giving it the name of the variable
[04:25:07] <transhumanist> makes sense?
[04:25:43] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:25:52] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[04:25:54] <transhumanist> by generating the name of the variable I mean
[04:26:15] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:26:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:28:47] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:28:48] <sveinse> I'm porting a package to async and I'm trying to hunt down every blocking IO. There is a lot of getters and setters in this package. Any tips on how I might hunt and find blocking IO, even if ever so fast?
[04:28:56] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[04:29:22] <jmiehe> grym: turns out, things break if you name your validator "validate" … that was the main problem
[04:30:28] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:09] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[04:31:39] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:32:33] <deltab> transhumanist: use a dict
[04:33:54] <deltab> {'CO2': ..., 'O2': ..., 'N2': ..., ...]
[04:34:00] <deltab> er }
[04:34:50] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[04:35:47] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:36:21] *** Quits: aknot (~aknot@2603:900a:1503:17bb:21f4:4d26:c979:3092) (Ping timeout: 245 seconds)
[04:37:38] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:39:38] *** Joins: gitly (~gitly@148.252.129.189)
[04:43:47] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:44:00] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[04:44:46] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 260 seconds)
[04:44:46] *** brabrax_ is now known as brabrax
[04:45:36] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net) (Ping timeout: 256 seconds)
[04:45:59] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[04:47:34] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[04:48:26] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 245 seconds)
[04:50:17] *** Joins: arfy (~arfy@1.126.110.217)
[04:51:31] *** Joins: tg (~tg@rockylinux/infra/tg)
[04:51:46] *** Quits: jtanner (sid194399@id-194399.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[04:51:51] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[04:51:58] *** Quits: cmagina (sid286142@user/cmagina) (Ping timeout: 252 seconds)
[04:52:06] *** Joins: Fiji (~Fiji@user/fiji)
[04:52:11] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) (Ping timeout: 245 seconds)
[04:52:21] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[04:52:31] *** Quits: Venhal (sid515085@id-515085.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[04:53:01] *** Quits: WhyNotHugo (sid269118@id-269118.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:53:01] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 245 seconds)
[04:53:04] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Ping timeout: 252 seconds)
[04:53:04] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 252 seconds)
[04:53:10] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[04:53:33] *** Joins: jtanner (sid194399@helmsley.irccloud.com)
[04:53:34] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[04:53:36] *** Joins: TingPing (sid2800@helmsley.irccloud.com)
[04:53:36] *** Joins: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3)
[04:53:37] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Ping timeout: 252 seconds)
[04:53:39] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[04:55:22] *** Joins: cmagina (sid286142@user/cmagina)
[04:55:44] *** Joins: hnOsmium0001 (uid453710@hampstead.irccloud.com)
[04:56:02] *** Joins: Venhal (sid515085@uxbridge.irccloud.com)
[04:56:05] <arfy> hi. do we have any I18N experts here? particularly, Japanese. I want to be able to rename Japanese filenames to romaji-based names using a python script in windows. however, some filenames are throwing syntax errors in the windows rename function. My assumption was that I'd need to switch the process codepage to 932. is this possible within a python script? and, is it the right aproach?
[04:56:27] *** Joins: WhyNotHugo (sid269118@hampstead.irccloud.com)
[04:56:37] *** Joins: tuskkk____ (uid18470@tinside.irccloud.com)
[04:56:42] *** Joins: yuesbeez (uid458354@tinside.irccloud.com)
[04:56:50] *** Joins: nicksloan (sid195124@user/nicksloan)
[04:59:06] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[04:59:53] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[05:00:26] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Ping timeout: 265 seconds)
[05:01:00] <kevr> Are there any built-in versions of all() which takes in a function as the comparator?
[05:01:18] <kevr> all(iterable, lambda e: e.SomeThing is not None) or so?
[05:01:30] <nedbat> kevr: no, but you do it yourself:  all(f(x) for x in things)
[05:01:41] <kevr> oh, true!
[05:02:33] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[05:02:53] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[05:02:55] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[05:03:40] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[05:05:53] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-0c1e-9eda-4f87-19b3.res6.spectrum.com)
[05:06:56] *** Joins: Warped (~Warped@user/warped)
[05:07:12] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 265 seconds)
[05:07:20] *** Quits: eichin (sid27120@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:20] *** Quits: tuskkk____ (uid18470@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:20] *** Quits: JacobFrost (sid494713@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:22] *** Quits: holbrode (sid339826@tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:07:22] *** Quits: drmessano (drmessano@user/drmessano) (Ping timeout: 252 seconds)
[05:07:22] *** Quits: ziky (sid27087@user/ziky) (Ping timeout: 252 seconds)
[05:07:24] *** Quits: EWDurbin (sid38710@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:26] *** Quits: yuesbeez (uid458354@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:34] *** Quits: sa (sid1055@tinside.irccloud.com) (Write error: Connection reset by peer)
[05:07:35] *** Quits: graingert (sid128301@5.254.36.57) (Read error: Connection reset by peer)
[05:07:36] *** Quits: Evolver (sid32215@user/evolver) (Read error: Connection reset by peer)
[05:08:05] *** Joins: vlm (~vlm@user/vlm)
[05:08:57] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Ping timeout: 250 seconds)
[05:09:37] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 265 seconds)
[05:10:58] <OMGOMG_> arfy: don't know 932, but you might want something like this
[05:11:00] <OMGOMG_> >>> '北海道'.encode('932')
[05:11:00] <OMGOMG_> b'\x96k\x8aC\x93\xb9'
[05:12:57] *** Joins: junktext (~junktext@109.201.152.177)
[05:13:04] <transhumanist> sorry to ask again I have tried several methods, https://bpa.st/FJMA , the generated variable name wont  pass to the function , thanks in advance
[05:13:22] *** Joins: frost (~frost@59.71.244.36)
[05:14:05] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:14:06] <Jonno_FTW> transhumanist: what are you trying to do with vars() ?
[05:14:25] *** Joins: Evolver (sid32215@user/evolver)
[05:14:29] *** Joins: mossman93 (~quassel@user/mossman93)
[05:14:36] <Jonno_FTW> what does the variable look like that you are trying to pass to gas_mass?
[05:14:45] *** Joins: JacobFrost (sid494713@tinside.irccloud.com)
[05:14:54] <transhumanist> yes I am trying to select a varible from an input list
[05:15:07] <Jonno_FTW> what does the variable selectedgas contain?
[05:15:09] *** Joins: nicksloan (sid195124@user/nicksloan)
[05:15:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:15:26] <transhumanist> variables are : MassN2 or MassO2 ...
[05:15:35] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[05:15:39] <Jonno_FTW> those are strings not variables
[05:15:41] *** Joins: ziky (sid27087@user/ziky)
[05:15:49] <nedbat> transhumanist: it's better to avoid variable variables.  Use one dict instead
[05:15:54] *** Joins: yuesbeez (uid458354@tinside.irccloud.com)
[05:16:13] <transhumanist> can you point me to an example?
[05:16:13] <Jonno_FTW> so selectedgas could be 'MassCO2'?
[05:16:16] *** Joins: sa (sid1055@tinside.irccloud.com)
[05:16:24] <transhumanist> Jonno_FTW: yes
[05:16:28] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:16:38] <Jonno_FTW> and what do you want to pass to gas_mass?
[05:16:45] *** Joins: drmessano (drmessano@user/drmessano)
[05:16:48] <Jonno_FTW> oh you have variables called MassCO2 as well do you?
[05:17:09] <transhumanist> yes I do have that variable in another python script
[05:17:20] <transhumanist> and its loaded by a main script
[05:17:26] <Jonno_FTW> make a dict calls gasMass = {'MassCO2': 0.123', 'MassO2':  0.456}
[05:18:00] <transhumanist> ok I was just hoping not to declare it in more than one place, but ok thanks
[05:18:02] <Jonno_FTW> then replace vars()[selectedgas(1)] with gasMass[selectedgas(1)]
[05:18:09] <Jonno_FTW> you can reuse the dict and then import it
[05:18:20] <transhumanist> ok thanks
[05:18:37] <Jonno_FTW> best bet would be to make json file or a yaml file to store the masses
[05:18:47] *** Joins: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net)
[05:18:57] <Jonno_FTW> and have a file load that up into a dict, which you can then import elsewhere
[05:19:12] <transhumanist> ok thanks
[05:19:33] <Jonno_FTW> you have the right idea not storing the same information twice
[05:19:49] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[05:19:55] <transhumanist> well I wanted the user to select the gas they wished to use
[05:20:00] <sveinse> When porting a module to async that has IO deep in a calling stack, is it best to to do async and await for each function downwards, even if the functions are mere proxies? Or can I let on the inner function be async and then let the middle intermediates be passing the coro along as regular functions? Does this smell?
[05:20:05] <Jonno_FTW> transhumanist: you can still do that
[05:20:39] <transhumanist> ok thanks
[05:21:56] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[05:22:07] *** Joins: eichin (sid27120@id-27120.tinside.irccloud.com)
[05:22:08] <deltab> transhumanist: they can choose from gasMass.keys() as the choices list
[05:22:18] <transhumanist> ah ok
[05:22:34] *** Quits: HaMsTeRs (~Thunderbi@121.202.55.127) (Ping timeout: 260 seconds)
[05:22:43] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[05:23:19] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[05:25:37] *** abc_ is now known as zwindl
[05:28:09] *** Joins: lastshell (~lastshell@user/lastshell)
[05:28:17] *** Quits: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Leaving)
[05:29:02] *** Joins: HaMsTeRs (~Thunderbi@121.202.1.149)
[05:30:00] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Quit: upekkha)
[05:30:02] *** Quits: DerpGusta (~quassel@user/derpgusta) (Read error: Connection reset by peer)
[05:30:08] *** Joins: HaMmY1 (~Thunderbi@14-0-226-036.static.pccw-hkt.com)
[05:30:21] *** Joins: DerpGusta (~quassel@user/derpgusta)
[05:30:36] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[05:31:01] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[05:31:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[05:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[05:32:28] *** Joins: hudo_ (~hudo@62.68.20.210)
[05:33:26] *** Quits: HaMsTeRs (~Thunderbi@121.202.1.149) (Ping timeout: 245 seconds)
[05:33:26] *** HaMmY1 is now known as HaMsTeRs
[05:33:33] *** Joins: fikran (~fikran@user/fikran)
[05:34:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:36:11] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[05:36:16] *** Joins: brickfat (~brickfat@user/brickfat)
[05:37:04] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[05:38:07] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483)
[05:38:59] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:39:34] *** Joins: hexenbane (~hexenbane@2806:2f0:91a1:73a8:5b3c:991f:3417:ef24)
[05:42:01] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[05:43:01] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:44:52] *** Joins: aknot (~aknot@2603:900a:1503:17bb:b1b6:4453:1494:b5dd)
[05:45:27] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:45:31] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Remote host closed the connection)
[05:45:49] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[05:46:22] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[05:46:23] *** Joins: stackdroid18 (~tutorial@user/stackdroid)
[05:50:17] *** Parts: stackdroid18 (~tutorial@user/stackdroid) ()
[05:52:25] *** Quits: el1 (~el@240e:390:662d:c990:99cf:ed65:8ec2:77fd) (Quit: WeeChat 3.3)
[05:52:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[05:53:30] *** Quits: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com) (Read error: Connection reset by peer)
[05:53:52] *** Joins: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com)
[05:54:03] *** Joins: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net)
[05:54:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:55:35] *** Joins: Kharon (uid511277@user/cypris)
[05:56:05] *** Joins: akaWolf (~akaWolf@akawolf.org)
[05:56:48] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[05:59:37] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[06:00:50] *** Quits: aknot (~aknot@2603:900a:1503:17bb:b1b6:4453:1494:b5dd) (Ping timeout: 260 seconds)
[06:05:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:05:22] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[06:06:03] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Remote host closed the connection)
[06:06:10] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[06:06:19] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:06:20] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[06:06:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:06:46] *** Quits: ska (~ska@user/ska) (Ping timeout: 245 seconds)
[06:07:14] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[06:07:45] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[06:07:46] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[06:07:47] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[06:08:47] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[06:09:17] *** Joins: whatsupdoc (~whatsupdo@148.64.18.1)
[06:10:07] <whatsupdoc> Is there any difference between accessing class variables using MyClass.somevariable vs self.somevariable?
[06:11:10] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[06:12:06] <yitz> No
[06:12:36] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:d47:48bf:97c5:2de9) (Ping timeout: 245 seconds)
[06:12:50] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[06:13:10] <whatsupdoc> Ok, thank you
[06:13:13] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:9502:f9d3:d146:db2c) (Quit: Client closed)
[06:13:31] <madprops> isn't MyClass.x a static class variable vs an instance variable?
[06:14:14] <Jonno_FTW> could it have been modified in the instance?
[06:15:37] <Jonno_FTW> whatsupdoc: always access class variables from the class, not instances
[06:16:05] <whatsupdoc> So there is a difference?
[06:16:13] <Jonno_FTW> suppose I did class A: x=5; a = A(); a.x = 10
[06:16:39] <Jonno_FTW> the instance now has 10 in its x property, but the class still has 5
[06:16:57] <Jonno_FTW> also it just makes it more obvious when you are coding what is happening
[06:18:11] <whatsupdoc> So updating self won't update the class variable?
[06:18:40] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[06:19:45] *** Joins: ska (~ska@user/ska)
[06:19:46] <whatsupdoc> Ok, I understand, thanks Jonno_FTW
[06:20:08] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:1955:e187:7003:d43e)
[06:21:41] *** Quits: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com) (Ping timeout: 246 seconds)
[06:22:07] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[06:23:04] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[06:23:05] *** Joins: djapo (~archangel@user/djapo)
[06:23:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[06:24:49] *** Joins: brickfat (~brickfat@user/brickfat)
[06:25:21] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:26:21] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 245 seconds)
[06:26:45] *** Joins: WarpedAI (~Warped@user/warped)
[06:29:06] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[06:29:19] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[06:29:21] *** Joins: newbie|2 (~Warped@user/warped)
[06:30:00] *** Quits: ldm (~ldm@hacksoc/member) (Quit: o/ 3w 6d 23h 59m 14s)
[06:31:06] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:31:36] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:32:30] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-0c1e-9eda-4f87-19b3.res6.spectrum.com) (Quit: jarthur)
[06:32:49] *** Joins: Luke (~ldm@hacksoc/member)
[06:33:02] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 260 seconds)
[06:35:49] *** Quits: yuesbeez (uid458354@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:37:14] *** Quits: junktext (~junktext@109.201.152.177) (Ping timeout: 260 seconds)
[06:37:38] <Jonno_FTW> whatsupdoc: if you're ever not sure, just play around in the REPL
[06:39:07] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[06:42:00] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Read error: No route to host)
[06:42:34] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:42:36] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 245 seconds)
[06:42:36] *** jmiehe1 is now known as jmiehe
[06:43:27] *** Quits: whatsupdoc (~whatsupdo@148.64.18.1) (Ping timeout: 256 seconds)
[06:43:33] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[06:44:06] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[06:44:14] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Read error: Connection reset by peer)
[06:44:35] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[06:45:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[06:46:35] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[06:47:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:51:24] *** Joins: ominionx (~ominionx@2.sub-174-250-14.myvzw.com)
[06:51:36] *** Quits: ominionx (~ominionx@2.sub-174-250-14.myvzw.com) (Remote host closed the connection)
[06:51:50] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[06:54:44] <zumba_addict> Good evening folks. Someone told me yesterday to make the python as installable. It's the first time I heard. Can someone please show me an article that shows how installable python applications are built? Thank you.
[06:55:43] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[06:57:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:57:09] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Quit: Leaving...)
[06:57:12] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:06:41] *** Quits: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com) (Quit: HaMsTeRs)
[07:07:01] *** Joins: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com)
[07:07:12] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[07:08:35] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Client Quit)
[07:10:23] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:12:09] *** Joins: sirquack (~sirquack@2601:643:8680:526:305d:9704:6471:4813)
[07:12:53] <sirquack> how can i make flask return a string after receiving a get request? my program is just receiving html code
[07:13:08] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:14:52] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:5cda:aa80:a7cc:c20) (Quit: Textual IRC Client: www.textualapp.com)
[07:15:01] *** Joins: el1 (~el@240e:390:662d:c990:99cf:ed65:8ec2:77fd)
[07:17:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[07:18:13] *** Quits: el1 (~el@240e:390:662d:c990:99cf:ed65:8ec2:77fd) (Quit: WeeChat 3.3)
[07:19:36] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[07:19:58] *** Joins: relight (~relight@user/relight)
[07:21:10] *** Joins: saroy (~Sandipan@45.249.73.218)
[07:22:19] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:22:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[07:22:58] *** Quits: sirquack (~sirquack@2601:643:8680:526:305d:9704:6471:4813) (Ping timeout: 260 seconds)
[07:23:21] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:25:37] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[07:26:18] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[07:27:02] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:27:41] *** Joins: Wulf (~Wulf@user/wulf)
[07:28:40] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:30:59] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[07:31:34] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:32:29] *** jazzy is now known as jazz-o-lantern
[07:33:01] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 245 seconds)
[07:34:28] *** Quits: vd898 (~vd898@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:41:59] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:9ce7:54d4:819e:ca23)
[07:42:53] *** Joins: fikran (~fikran@user/fikran)
[07:45:44] *** Quits: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3) (Remote host closed the connection)
[07:48:26] *** Quits: osxtra (~root@136.49.108.80) (Ping timeout: 245 seconds)
[07:51:28] *** Joins: whatsupdoc (~whatsupdo@148.64.18.31)
[07:51:55] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[07:56:22] *** Quits: brachamh (~brachamh@user/brachamh) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:57:57] *** Joins: shark (~lemonade@user/sh4rk)
[08:01:00] *** Joins: brachamh (~brachamh@user/brachamh)
[08:02:40] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[08:03:30] <cluelessperson> sirn, "program" ?
[08:03:37] <cluelessperson> uh, tab fail
[08:04:06] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[08:04:07] *** Quits: whatsupdoc (~whatsupdo@148.64.18.31) (Quit: Client closed)
[08:04:32] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[08:09:01] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:10:07] <ComputerTech> Trying to create a simple IRC bot from scratch,  https://dpaste.com/7R6N9LT58
[08:10:23] <ComputerTech> Not quite sure what i'm doing wrong, all help appreciated :)
[08:11:04] <cluelessperson> huh, I don't have dns for dpaste
[08:11:18] <ComputerTech> Hum, what other pastebin would you like me to use?
[08:11:27] <cluelessperson> well that one usually works for me
[08:11:34] <ComputerTech> hmm
[08:11:50] <cluelessperson> dpaste.org ?
[08:11:59] <jinsun> https://bpa.st/+python
[08:12:04] <jinsun> is the one in the topic
[08:12:44] <ComputerTech> okay thanks
[08:12:47] <jinsun> I could open it though, and the error already tells you what you are doing wrong
[08:13:00] <ComputerTech> https://bpa.st/ATGQ
[08:13:04] <jinsun> why do you have spaces before while 1:
[08:13:42] <ComputerTech> Hum, well to be quite honest, i'm a scripter, so i'm a noob towards Python, so i'm still learning :/
[08:13:53] <jinsun> in python whitespace matters
[08:14:00] <ComputerTech> Okay, gotcha
[08:14:15] <ComputerTech> I thought it only mattered in "if" things
[08:14:23] <jinsun> you cannot put spaces anywhere like other lanugages with braces
[08:15:00] <jinsun> no it matters everywhere
[08:15:28] <ComputerTech> okay cool
[08:15:39] <ComputerTech> https://bpa.st/OOCQ  << I hope that is better
[08:15:42] <ComputerTech> I'll go test
[08:15:56] <jinsun> the number of spaces in the beginning of your line should change only when a new block starts
[08:16:13] <ComputerTech> gotcha!
[08:18:23] <ComputerTech> https://bpa.st/7KFA
[08:18:32] <ComputerTech> this error with the last pastebins code
[08:18:59] <ComputerTech> isn't sockChan =   defining it?
[08:19:33] *** Quits: hexenbane (~hexenbane@2806:2f0:91a1:73a8:5b3c:991f:3417:ef24) (Remote host closed the connection)
[08:20:06] *** Quits: hudo_ (~hudo@62.68.20.210) (Ping timeout: 245 seconds)
[08:20:07] <ComputerTech> oh! i see it
[08:22:47] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[08:24:44] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[08:27:22] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 260 seconds)
[08:32:43] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[08:33:36] *** Quits: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com) (Quit: HaMsTeRs)
[08:33:45] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Remote host closed the connection)
[08:33:47] <ComputerTech> https://bpa.st/EEDQ  << I'm unsure about this one
[08:33:51] *** Joins: philipp64|work_ (~philipp64@174.27.28.163)
[08:34:04] *** Joins: stranac (~stranac@195.29.239.126)
[08:34:23] *** Joins: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net)
[08:38:00] *** Joins: SlaveGeek334269 (~root@li2114-242.members.linode.com)
[08:40:56] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[08:41:17] *** Joins: jazzy (~jaziz@user/jaziz)
[08:41:49] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[08:42:18] *** Joins: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com)
[08:43:39] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[08:45:06] *** Quits: LiftLeft (~LiftLeft@191.96.185.96) (Ping timeout: 260 seconds)
[08:49:55] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[08:50:42] *** Joins: Vonter (~Vonter@user/vonter)
[08:51:06] *** Joins: chamgry (~chamgry@user/chamgry)
[08:54:44] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:55:25] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[08:58:10] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[08:59:41] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 265 seconds)
[09:02:27] *** Joins: dvx (~dvx@185.63.97.64)
[09:05:34] <Repiphany> str + int
[09:05:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:05:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[09:06:27] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[09:07:41] *** Joins: jazzy (~jaziz@user/jaziz)
[09:08:31] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:09:10] *** Quits: WizardGed (~WizardGed@user/wizardged) (Quit: Quit)
[09:09:48] *** Quits: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com) (Quit: HaMsTeRs)
[09:11:46] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[09:11:56] *** Joins: manti7 (~manti7@176.10.104.94)
[09:13:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 252 seconds)
[09:16:21] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:17:38] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483) (Remote host closed the connection)
[09:19:03] *** Quits: redgloboli_ (~redglobol@user/redgloboli) (Quit: ...enter the matrix...)
[09:20:06] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:1955:e187:7003:d43e) (Ping timeout: 260 seconds)
[09:22:51] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[09:23:12] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:23:39] *** Joins: Klinda (~superleag@user/klinda)
[09:24:04] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Client Quit)
[09:25:14] *** Joins: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com)
[09:26:00] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[09:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:32:25] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:f888:9db3:94a7:f52d)
[09:38:11] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:40:16] *** Joins: beterraba (~beterraba@185.183.107.218)
[09:41:59] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:44:06] <madduck> How do I make dict(8='foo') work?
[09:44:31] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[09:44:41] <madduck> dct=dict();dct[8] = 'foo' works, but why wouldn't the kwargs constructor style? I mean I understand that 8 is not a valid variable name, but I am not making a variable
[09:44:59] <energizer> {8: 3}
[09:45:13] <madduck> yeah, I guess
[09:47:12] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:32] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[09:47:36] *** Joins: lucidreamachine (~brian@2600:1700:1c60:16c0:c815:4a12:6593:9cbb)
[09:48:00] *** Parts: SlaveGeek334269 (~root@li2114-242.members.linode.com) ()
[09:48:00] *** Joins: seednode (~seednode@user/seednode)
[09:48:54] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:50:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[09:50:31] *** Quits: beterraba (~beterraba@185.183.107.218) (Ping timeout: 245 seconds)
[09:51:30] <summonner> the constructor looks upon them as keywords, which cannot start with a number/the variable naming rules
[09:52:14] *** Joins: fikran (~fikran@user/fikran)
[09:52:32] *** Quits: HaMsTeRs (~Thunderbi@14-0-226-036.static.pccw-hkt.com) (Quit: HaMsTeRs)
[09:52:42] *** Joins: beterraba (~beterraba@185.183.107.218)
[09:54:56] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[09:55:53] *** Quits: rundown (~eb0t@90.202.46.160) (Ping timeout: 265 seconds)
[09:56:02] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 260 seconds)
[09:56:18] *** Joins: shangxiao (~davids@124.187.230.212)
[09:57:45] *** Joins: rundown (~eb0t@90.208.41.2)
[09:58:43] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[09:59:01] *** Joins: rendar (~rendar@user/rendar)
[09:59:49] <cluelessperson> Using pyenv, I cannot seem to set the global python version
[09:59:55] <cluelessperson> or any version at all.
[10:00:06] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:00:19] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[10:00:45] <lucidreamachine> I'm attempting to bulk insert CSV data using sqlite3. It throws sqlite3.OperationalError: table price has 8 columns but 7 values were supplied. I'm convinced it has something to do with the types in the tuple. Here's a look at the code. Any help is appreciated. https://bpa.st/6IDQ
[10:00:58] *** Joins: saribro (~swinnenb@user/swinnenb)
[10:02:06] <cluelessperson> pyenv global 3.9.7
[10:02:10] *** Quits: cursey (~cursey@user/cursey) (Ping timeout: 265 seconds)
[10:02:15] <lucidreamachine> The schema is as follows https://bpa.st/L3RA. I do not believe I need an entry for ID in the tuple.
[10:02:19] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (Quit: bye)
[10:02:20] <cluelessperson> then,  python,  results in the previously installed 3.7 running?
[10:02:38] *** Joins: the4oo4 (~the4oo4@shenzhou.whatbox.ca)
[10:02:39] <energizer> lucidreamachine: specify the columns youre insering into
[10:03:02] *** Joins: cursey (~cursey@user/cursey)
[10:03:04] <Repiphany> Check you're initializing pyenv according to the docs on github and reload your shell
[10:03:26] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 245 seconds)
[10:04:21] <lucidreamachine> energizer: I posted the schema. If I add an ID field to the tuple, it throws the same error with the numbers incremented by one.
[10:04:57] *** Joins: upsala (~zcb@185.213.155.232)
[10:05:14] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:05:26] <cluelessperson> Repiphany, I manually ran the commands to initialize, and theyre in my bashrc
[10:05:31] <cluelessperson> it's just working.
[10:05:52] <energizer> lucidreamachine: i'm not saying specify the columns to me, i'm saying specify the columns in line 24
[10:06:17] <energizer> at least pg works that way, maybe sqlite's different
[10:06:32] <energizer> insert into price(foo,bar,baz) values (?,?,?)
[10:06:57] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[10:07:11] *** Joins: Vonter (~Vonter@user/vonter)
[10:08:16] <lucidreamachine> energizer: After pasting the columns, https://bpa.st/VIAA, I get Error binding parameter 0 - probably unsupported type
[10:08:51] <energizer> idk what that means
[10:09:02] <energizer> time to look at docs
[10:09:12] <lucidreamachine> energizer: Which leads me to believe there's something wrong with the types in the schema or the tuple
[10:09:49] <lucidreamachine> energizer: I did. I followed the example from the documentation. It's linked here - https://docs.python.org/3/library/sqlite3.html
[10:10:51] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[10:12:16] <Jimmy2027> hi, I was always running my jupyter notebook from with my conda env activated and I could import all packages from that env in my notebook. But somehow that is not working anymore, my modules are not found. Does someone know what I could do to debug this?
[10:12:35] *** Joins: gusto (~Augustus@17.168.90.49)
[10:12:42] <Jimmy2027> also when I run os.system('which python') from within that notebook I get the path to my conda env
[10:13:21] <Jimmy2027> and my modules are definitely correctly installed since I can import them within a python session
[10:14:25] <jinsun> check your sys.executable
[10:15:10] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Read error: Connection reset by peer)
[10:15:16] <Jimmy2027> ah right okay thats not the python from my env
[10:15:18] *** Joins: kosh (~kosh@user/kosh)
[10:15:32] *** Joins: Tas-sos (~Tas-sos@ppp046177160247.access.hol.gr)
[10:15:35] *** Joins: solrize (~solrize@user/solrize)
[10:15:37] <Jimmy2027> any idea how I can run the notebook from my conda env?
[10:16:24] <jinsun> do you have jupyter installed in the env you want
[10:16:57] <jinsun> try `python -m jupyter notebook` instead of just `jupyter notebook`
[10:17:39] <jinsun> and do which python before running it to be sure that your env is activated
[10:18:39] <Jimmy2027> ah yeah could be that I dont have jupyter installed anymore
[10:18:41] <solrize> chttps://bpa.st/M4IA  is there a simpler way to do this?  it's surprising that it's not built into itertools.  i guess something like it can be done with groupby.  using takewhile doesn't work because that silently loses the first element of the rest of the sequence
[10:18:46] <daniel2> So I have an input that I can either be utf-8 or latin-1.  Right now its written to decode the input to utf-8, but fails if the input is latin-1 with: builtins.UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe8 in position 65: invalid continuation byte
[10:18:47] <Jimmy2027> that could be the issue :)
[10:18:52] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:19:00] *** Falcon|1 is now known as Falcon|
[10:19:05] <daniel2> So how can I prevent that error?  Maybe converting it to utf-8 I guess first?
[10:19:32] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[10:19:35] <energizer> solrize: https://nedbatchelder.com/blog/201306/filter_a_list_into_two_parts.html
[10:19:39] *** Joins: szymon (~ugh@staticline-31-183-189-254.toya.net.pl)
[10:19:45] <solrize> energizer, thanks
[10:20:24] <solrize> argggu that is awful ;)
[10:20:51] <solrize> and that is like partition rather than span, but ok
[10:21:37] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[10:22:04] *** Joins: mickey8 (~user@user/mickey)
[10:23:44] *** Joins: Skyfire (~pyon@user/pyon)
[10:24:09] <Jimmy2027> jinsun: yup that was the issue, thanks for your help!
[10:24:32] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[10:24:33] <Jimmy2027> an error from jupyter would have been more helpful actually than just running on another env
[10:26:05] <jinsun> `python -m jupyter` would have given an error, simply running jupyter runs in whichever env jupyter is installed in
[10:26:09] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:26:20] <bookworm> (assuming it's in the path)
[10:27:03] *** Joins: resmo (~resmo@2a00:d420:9:8a00:e399:6e20:b80f:9745)
[10:28:50] *** Joins: palasso (~palasso@user/palasso)
[10:29:21] <jinsun> daniel2: just catch the UnicodeDecodeError and decode with latin1?
[10:29:49] <daniel2> jinsun: I had considered that, just didn't feel if it was a good way to do it.
[10:30:01] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[10:30:04] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:30:21] *** Joins: cursey (~cursey@user/cursey)
[10:30:23] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[10:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:30:50] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Read error: Connection reset by peer)
[10:31:00] <cluelessperson> pyenv simply doesn't seem to be working for me.
[10:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:33] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:31:42] *** Joins: vladoski (~vladoski@2001:b07:add:d406:4be5:f09:cac6:81f5)
[10:31:51] <jinsun> daniel2: if you don't know which files are latin1 beforehand then this try except will be required, either in your main script or in a separate script that does the latin1 to utf8 conversion
[10:32:10] <deniska> jinsun: if you only have 2 possible encodings, it's not the worst solution
[10:32:26] <deniska> oops, meant to tag daniel2
[10:32:42] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Remote host closed the connection)
[10:33:00] <deniska> ideally you should know the encoding beforehand, but what can we do :)
[10:34:06] <daniel2> deniska: There isn't a way to tell, its an irc bot that indexes networks.  Networks tend to use different encodings, so basically when it was scanning channels it caused an exception when it hit a channel with a name that had non utf-8 characters in it.
[10:34:18] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 260 seconds)
[10:34:34] <daniel2> Libera Chat being the one that caused the exception, so I'm guessing they don't use utf-8.
[10:35:05] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:35:05] *** Joins: control (~v1@user/control)
[10:35:07] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[10:35:10] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[10:35:26] <daniel2> which is ISO-8859-1 I guess.
[10:35:43] *** Quits: bambams (~bambams@user/bambams) (Remote host closed the connection)
[10:35:46] <deniska> daniel2: irc predates non-english languages being invented, so it doesn't really deal with encodings too well
[10:35:55] <bookworm> libera wants to be as inclusive as possible, they simply relay whatever garbage the client sent
[10:35:55] <daniel2> I see that
[10:36:00] <control> hello. how can i make itertools permutations go from left side to right side?
[10:36:03] <solrize> https://bugs.python.org/issue44571   ha just found this, suggestion to add a new itertools func that gives the extra element after the takewhile, not so good
[10:36:30] <daniel2> Can you do multiple exceptions?  So if it fails to decide utf-8, fallback to ISO-8859-1 and if it fails that, then just skip the line instead of crashing the script.
[10:36:48] <daniel2> Would you just keep adding except Something: ?
[10:37:17] <daniel2> s/decide/decode
[10:37:57] <energizer> is it possible to fail ISO-8859-1
[10:38:06] <deniska> daniel2: haha, latin-1 can't fail iirc :)
[10:38:21] <daniel2> Good to know :D
[10:38:37] <bookworm> do note that not failing doesn't mean you have sensible text
[10:38:49] <bookworm> it'll decode to garbage
[10:39:03] <daniel2> bookworm: the API it submits to can handle that way better.
[10:39:04] <jinsun> solrize: take a look at more-itertools, it might have what you want https://more-itertools.readthedocs.io/
[10:39:18] <jinsun> solrize: maybe https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_when
[10:39:19] <deniska> at least it's… lossless garbage, in theory you can reencode it later
[10:39:52] <daniel2> I'm pretty sure that DRF will just reject the submission but that won't cause the entire script to fail.
[10:40:55] <solrize> jinsun thanks
[10:41:04] <daniel2> thanks everyone :)
[10:41:14] <deniska> daniel2: https://i.imgur.com/fNHE99X.jpg
[10:41:42] <daniel2> Looks dotmatrix
[10:41:59] <daniel2> The script ran successful this time
[10:42:42] <deniska> Hard to tell, but looks handwritten, and the person doing the writing decided that it's not their job to raise any questions
[10:42:49] <kolcon> speaking of which, what is the best way to determine count of Asian characters in a text?
[10:43:01] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 245 seconds)
[10:43:09] <deniska> kolcon: opencv might have an utility or two
[10:43:43] <deniska> (sorry, that was a joke, and not even too good one)
[10:44:00] <kolcon> ummm, i mean .txt file, not scanning a picture :)
[10:44:16] <kolcon> maybe get the ord() of the char
[10:44:23] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[10:44:34] <kolcon> and then check if it is in a range?
[10:44:45] <jinsun> what does asian characters mean? anything non-ascii?
[10:45:19] <kolcon> jinsun: chinese, japanese, korean mainly; non-ascii is not not enough, i don't want to count russian (cyrillic) for example
[10:45:24] <energizer> https://en.wikipedia.org/wiki/CJK_characters
[10:45:51] <deniska> you can count unicode code points in specific ranges, but I doubt what you'll count will map exactly 1:1 to what people consider "characters"
[10:46:31] <energizer> or "asian"
[10:46:46] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[10:46:58] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[10:47:21] <kolcon> deniska: could be ok, I just want to know if there are more than - say - 100 characters, to declare the text "asian"
[10:47:28] <kolcon> now to find our the unicode ranges...
[10:47:37] *** Joins: Urchin[emacs] (~user@user/urchin)
[10:47:48] <energizer> kolcon: look at my link
[10:48:29] <kolcon> energizer: thanks, going through it
[10:49:07] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (*.net *.split)
[10:49:07] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (*.net *.split)
[10:49:07] *** Quits: beterraba (~beterraba@185.183.107.218) (*.net *.split)
[10:49:07] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[10:49:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (*.net *.split)
[10:49:07] *** Quits: jazzy (~jaziz@user/jaziz) (*.net *.split)
[10:49:07] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[10:49:07] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (*.net *.split)
[10:49:07] *** Quits: saroy (~Sandipan@45.249.73.218) (*.net *.split)
[10:49:07] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[10:49:07] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (*.net *.split)
[10:49:07] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[10:49:07] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[10:49:07] *** Quits: hnOsmium0001 (uid453710@hampstead.irccloud.com) (*.net *.split)
[10:49:07] *** Quits: gitly (~gitly@148.252.129.189) (*.net *.split)
[10:49:07] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-231.citykom.de) (*.net *.split)
[10:49:07] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[10:49:07] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[10:49:07] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[10:49:07] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (*.net *.split)
[10:49:07] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (*.net *.split)
[10:49:07] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[10:49:07] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (*.net *.split)
[10:49:07] *** Quits: roxfan2 (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (*.net *.split)
[10:49:07] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[10:49:07] *** Quits: l4yer (~l4yer@159.48.55.8) (*.net *.split)
[10:49:07] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (*.net *.split)
[10:49:07] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (*.net *.split)
[10:49:07] *** Quits: dgdg (~dg_dg@191.101.31.44) (*.net *.split)
[10:49:07] *** Quits: pankid (~quassel@pankid.club) (*.net *.split)
[10:49:07] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[10:49:08] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (*.net *.split)
[10:49:08] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[10:49:08] *** Quits: FurCoatStarlette (FurCoatSta@159.196.89.115) (*.net *.split)
[10:49:08] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (*.net *.split)
[10:49:08] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (*.net *.split)
[10:49:08] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (*.net *.split)
[10:49:08] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[10:49:08] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[10:49:08] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (*.net *.split)
[10:49:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (*.net *.split)
[10:49:08] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (*.net *.split)
[10:49:08] *** Quits: renrelkha (~renrelkha@user/renrelkha) (*.net *.split)
[10:49:08] *** Quits: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu) (*.net *.split)
[10:49:08] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[10:49:08] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[10:49:08] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[10:49:08] *** Quits: bfortifi- (~bfortifie@user/bfortified) (*.net *.split)
[10:49:08] *** Quits: Bitflux (~byte@byteflux.net) (*.net *.split)
[10:49:08] *** Quits: kenoba (~kenoba@user/kenoba) (*.net *.split)
[10:49:08] *** Quits: poorboy (~poorboy@159.89.189.144) (*.net *.split)
[10:49:08] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[10:49:08] *** Quits: moose` (~moose@user/moose) (*.net *.split)
[10:49:08] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[10:49:08] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (*.net *.split)
[10:49:08] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[10:49:08] *** Quits: Memory (sid459764@user/memory) (*.net *.split)
[10:49:08] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[10:49:08] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[10:49:08] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[10:49:08] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[10:49:08] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[10:49:08] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[10:49:08] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[10:49:08] *** Quits: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu) (*.net *.split)
[10:49:08] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (*.net *.split)
[10:49:08] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (*.net *.split)
[10:49:08] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[10:49:08] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[10:49:08] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[10:49:08] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[10:49:08] *** Quits: n000g (~NRG@user/nrg) (*.net *.split)
[10:49:08] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[10:49:08] *** Quits: oldguy (~oldguy@user/oldguy) (*.net *.split)
[10:49:08] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[10:49:08] *** Quits: strungout (znc@mutant.penguin.fyi) (*.net *.split)
[10:49:08] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[10:49:08] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[10:49:08] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[10:49:08] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[10:49:08] *** Quits: lack (~lack@user/lack) (*.net *.split)
[10:49:08] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[10:49:08] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[10:49:08] *** Quits: ikwyl6 (~ikwyl6@2.58.44.226) (*.net *.split)
[10:49:08] *** Quits: ulif (~nick@user/ulif) (*.net *.split)
[10:49:08] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[10:49:08] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[10:49:08] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[10:49:08] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[10:49:08] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[10:49:08] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[10:49:08] *** Quits: rud01f (rud0lf@user/rud0lf) (*.net *.split)
[10:49:08] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[10:49:08] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[10:49:08] *** Quits: streety_ (~streety@li761-24.members.linode.com) (*.net *.split)
[10:49:08] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[10:49:08] *** Quits: randall (~randall@user/randall) (*.net *.split)
[10:49:08] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[10:49:08] *** Quits: _0az3 (~az0@user/az0) (*.net *.split)
[10:49:08] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[10:49:08] *** Quits: sunyibo_ (~dorsch@5.2.75.229) (*.net *.split)
[10:49:08] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[10:49:08] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[10:49:08] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[10:49:08] *** Quits: d1b (~db@user/d1b) (*.net *.split)
[10:49:08] *** Quits: jug (~jug@user/jug) (*.net *.split)
[10:49:08] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[10:49:08] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[10:49:08] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[10:49:08] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[10:49:08] *** Quits: jamwil (~jamwil@user/jamwil) (*.net *.split)
[10:49:08] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[10:49:08] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[10:49:08] *** Quits: AM (~techman@82-203-161-159.bb.dnainternet.fi) (*.net *.split)
[10:49:08] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[10:49:08] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[10:49:08] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[10:49:43] <cluelessperson> yee, netsplits!
[10:50:34] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[10:50:46] <cluelessperson> I'm stuck.  pyenv doesn't seem to be working for me on this rpi.   path is showing up correctly and I've installed python 3.9.7 and run  pyenv global 3.9.7
[10:52:06] <jinsun> after running pyenv global I have to kill my terminal and relogin usually, just `exec $SHELL` never works for me
[10:52:18] <jinsun> so you can try that
[10:52:31] <cluelessperson> not owrking
[10:52:38] <cluelessperson> and when I relog it starts a new shell anyway
[10:54:11] <jinsun> check if your bashrc is correct, it should define $PYENV_ROOT and add that to $PATH, then it should have `eval "$(pyenv init --path)"`
[10:54:29] <daniel2> Maybe my bot caused the netsplit >:D
[10:54:37] <jinsun> and then `eval "$(pyenv init -)"` too if you want completions
[10:55:08] *** Joins: fstd (~fstd@xdsl-78-35-82-134.nc.de)
[10:55:56] <cluelessperson> jinsun, the bashrc just introduces some commands to run at start of the shell.   Even if I run them manually it doens't work.
[10:56:30] *** Joins: millido (~millido@84.210.150.128)
[10:57:10] <jinsun> hmm no ideas then, it "just works" (msotly) for me, you need some #bash experts maybe
[10:57:37] *** Quits: apteryx (~maxim@dsl-10-136-160.b2b2c.ca) (Ping timeout: 265 seconds)
[10:58:12] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[11:00:18] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[11:00:52] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[11:00:52] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[11:00:52] *** Joins: beterraba (~beterraba@185.183.107.218)
[11:00:52] *** Joins: seednode (~seednode@user/seednode)
[11:00:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:00:52] *** Joins: jazzy (~jaziz@user/jaziz)
[11:00:52] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[11:00:52] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[11:00:52] *** Joins: saroy (~Sandipan@45.249.73.218)
[11:00:52] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[11:00:52] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:00:52] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:00:52] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[11:00:52] *** Joins: hnOsmium0001 (uid453710@hampstead.irccloud.com)
[11:00:52] *** Joins: gitly (~gitly@148.252.129.189)
[11:00:52] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-231.citykom.de)
[11:00:52] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[11:00:52] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[11:00:52] *** Joins: Milos (~Milos@user/milos)
[11:00:52] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[11:00:52] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[11:00:52] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[11:00:52] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[11:00:52] *** Joins: roxfan2 (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[11:00:52] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[11:00:52] *** Joins: l4yer (~l4yer@159.48.55.8)
[11:00:52] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[11:00:52] *** Joins: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com)
[11:00:52] *** Joins: dgdg (~dg_dg@191.101.31.44)
[11:00:52] *** Joins: pankid (~quassel@pankid.club)
[11:00:52] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[11:00:52] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[11:00:52] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[11:00:52] *** Joins: FurCoatStarlette (FurCoatSta@159.196.89.115)
[11:00:52] *** Joins: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net)
[11:00:52] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[11:00:52] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[11:00:52] *** Joins: KombuchaKip (~kip@192.252.230.5)
[11:00:52] *** Joins: s1b1 (~s1b1@user/s1b1)
[11:00:52] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[11:00:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:00:52] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[11:00:52] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[11:00:52] *** Joins: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu)
[11:00:52] *** Joins: bjb (~bjb@sourcerer.ca)
[11:00:52] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[11:00:52] *** Joins: BigShip (~BigShip@user/bigship)
[11:00:52] *** Joins: bfortifi- (~bfortifie@user/bfortified)
[11:00:52] *** Joins: Bitflux (~byte@byteflux.net)
[11:00:52] *** Joins: kenoba (~kenoba@user/kenoba)
[11:00:52] *** Joins: poorboy (~poorboy@159.89.189.144)
[11:00:52] *** Joins: yitz (~yitz@exercism/yitz)
[11:00:52] *** Joins: moose` (~moose@user/moose)
[11:00:52] *** Joins: \mSg (mSg@user/msg/x-0285936)
[11:00:52] *** Joins: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net)
[11:00:52] *** Joins: Trashlord (~trash@user/trashlord)
[11:00:52] *** Joins: Memory (sid459764@user/memory)
[11:00:52] *** Joins: nisstyre (~wes@user/nisstyre)
[11:00:52] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[11:00:52] *** Joins: hodapp (~mawson@user/hodapp)
[11:00:52] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[11:00:52] *** Joins: duoi (~duoi@user/duoi)
[11:00:52] *** Joins: shodan45 (~quassel@107.161.22.155)
[11:00:52] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:00:52] *** Joins: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu)
[11:00:52] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[11:00:52] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[11:00:52] *** Joins: Dan39 (~dan@user/dan39)
[11:00:52] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[11:00:52] *** Joins: AndrewYu (~andrew@user/andrewyu)
[11:00:52] *** Joins: Duckle (~Duckle@user/duckle)
[11:00:52] *** Joins: n000g (~NRG@user/nrg)
[11:00:52] *** Joins: infobob (~infobob@python/bot/infobob)
[11:00:52] *** Joins: oldguy (~oldguy@user/oldguy)
[11:00:52] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[11:00:52] *** Joins: strungout (znc@mutant.penguin.fyi)
[11:00:52] *** Joins: ulif (~nick@user/ulif)
[11:00:52] *** Joins: tkazi (~tkazi@user/tkazi)
[11:00:52] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[11:00:52] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[11:00:52] *** Joins: streety_ (~streety@li761-24.members.linode.com)
[11:00:52] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[11:00:52] *** Joins: hendry (~hendry@210.23.22.2)
[11:00:52] *** Joins: zoid (~zoid@user/taxationistheft)
[11:00:52] *** Joins: lack (~lack@user/lack)
[11:00:52] *** Joins: sabet (~sabet@user/sabet)
[11:00:52] *** Joins: ikwyl6 (~ikwyl6@2.58.44.226)
[11:00:52] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[11:00:52] *** Joins: Cyp (~cyp@213.237.87.7)
[11:00:52] *** Joins: themill (~stuart@debian/stuart)
[11:00:52] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[11:00:52] *** Joins: dxrt (~dxrt@user/dxrt)
[11:00:52] *** Joins: rud01f (rud0lf@user/rud0lf)
[11:00:52] *** Joins: fluter (~fluter@user/fluter)
[11:00:52] *** Joins: mdw (~root@159.65.86.163)
[11:00:52] *** Joins: operational (~operation@imgonnaf.art)
[11:00:52] *** Joins: randall (~randall@user/randall)
[11:00:52] *** Joins: Koffa (jkohvakk@user/koffa)
[11:00:52] *** Joins: _0az3 (~az0@user/az0)
[11:00:52] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[11:00:52] *** Joins: sunyibo_ (~dorsch@5.2.75.229)
[11:00:52] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[11:00:52] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[11:00:52] *** Joins: d1b (~db@user/d1b)
[11:00:52] *** Joins: jug (~jug@user/jug)
[11:00:52] *** Joins: nvz (~user@nvz.farted.online)
[11:00:52] *** Joins: rb (~augh@theguntretort.com)
[11:00:52] *** Joins: grnman_ (~grnman@159.89.27.73)
[11:00:52] *** Joins: dgw (dgw@sopel/admin/dgw)
[11:00:52] *** Joins: jamwil (~jamwil@user/jamwil)
[11:00:52] *** Joins: shan (shan@cyblog/maintainer/shan)
[11:00:52] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[11:00:52] *** Joins: AM (~techman@82-203-161-159.bb.dnainternet.fi)
[11:00:52] *** Joins: mabi (~m42e@pb42.de)
[11:00:52] *** Joins: d3x (michal@bielaw.ski)
[11:00:52] *** Joins: easter_egg (~jeffry@user/easter-egg/x-4406379)
[11:01:50] *** Quits: l4yer (~l4yer@159.48.55.8) (Max SendQ exceeded)
[11:01:51] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Max SendQ exceeded)
[11:01:51] *** Quits: Bitflux (~byte@byteflux.net) (Max SendQ exceeded)
[11:01:51] *** Quits: s1b1 (~s1b1@user/s1b1) (Max SendQ exceeded)
[11:01:51] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[11:02:02] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Max SendQ exceeded)
[11:02:16] *** Joins: Byteflux (~byte@byteflux.net)
[11:02:19] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:02:25] *** Joins: l4yer (~l4yer@159.48.55.8)
[11:02:38] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[11:03:43] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[11:04:03] *** Quits: chamgry (~chamgry@user/chamgry) (Quit: WeeChat 2.8)
[11:04:57] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:06:30] *** Joins: AndrewYu (~andrew@user/andrewyu)
[11:08:37] *** Joins: chele (~chele@user/chele)
[11:10:09] *** Joins: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de)
[11:11:14] *** Joins: apteryx (~maxim@207.35.95.251)
[11:16:06] *** Quits: cjb (~cjb@user/cjb) ()
[11:16:12] *** Quits: gusto (~Augustus@17.168.90.49) (Quit: Textual IRC Client: www.textualapp.com)
[11:16:46] *** Quits: vladoski (~vladoski@2001:b07:add:d406:4be5:f09:cac6:81f5) (Ping timeout: 245 seconds)
[11:17:38] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[11:18:09] *** Joins: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net)
[11:19:01] *** Joins: oneforall2 (~guru@S0106ec086bc3574f.mh.shawcable.net)
[11:19:31] <oneforall2> what is it that python2 reads to find the lib dir ?
[11:20:08] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Quit: WeeChat 3.3)
[11:20:08] *** Joins: Tireos (~Tireos@91.223.118.131)
[11:20:43] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Client Quit)
[11:21:37] <oneforall2> same build script with 3.9 and it insated to /usr/lib64  now with 3.10 it wants to install to /usr/lib   html5lib same version too
[11:21:45] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[11:21:48] *** dcaro_away is now known as dcaro
[11:22:28] *** Quits: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net) (Ping timeout: 252 seconds)
[11:24:14] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 260 seconds)
[11:24:16] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[11:24:57] <oneforall2> 2.7 build of it is still doinf good installing to /usr/lib64
[11:26:13] *** snalty_ is now known as snalty
[11:27:02] *** Quits: resmo (~resmo@2a00:d420:9:8a00:e399:6e20:b80f:9745) (Ping timeout: 260 seconds)
[11:27:33] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[11:27:47] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[11:28:13] *** Joins: s1b1 (~s1b1@user/s1b1)
[11:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:32:04] *** Quits: hnOsmium0001 (uid453710@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:32:19] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[11:34:12] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:34:58] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 260 seconds)
[11:35:23] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:18] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Read error: Connection reset by peer)
[11:39:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:26] *** Joins: grooverman (~grooverma@177.95.12.14)
[11:39:28] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se)
[11:39:33] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[11:40:37] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[11:40:51] *** Joins: gusto (~Augustus@109.255.100.54)
[11:41:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:41:52] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:41:58] *** Joins: shad (~shad@user/shad)
[11:46:34] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Quit: Leaving)
[11:46:36] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:46:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[11:46:45] *** Quits: relight (~relight@user/relight) (Ping timeout: 250 seconds)
[11:47:55] <Ninpo> cluelessperson: what commands are you running to set up and init pyenv? What needed to be run to set it all up changed recently
[11:48:47] <Ninpo> https://bpa.st/EVOA my .bashrc lines
[11:48:55] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[11:49:10] *** Joins: Hypothesis (~Hypothesi@216.163.31.107)
[11:50:00] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[11:50:21] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[11:50:28] *** Quits: beterraba (~beterraba@185.183.107.218) (Ping timeout: 252 seconds)
[11:50:44] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[11:50:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[11:50:56] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:51:13] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:52:10] *** Joins: beterraba (~beterraba@86.107.21.205)
[11:52:39] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:53:39] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se)
[11:55:00] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[11:55:43] <cluelessperson> Ninpo, ah, I'm not doing eval "$(pyenv init --path)"
[11:55:46] <cluelessperson> sigh
[11:56:01] <Ninpo> it changed at some point
[11:56:07] <Ninpo> broke all my older pyenvs hehe
[11:56:31] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 252 seconds)
[11:56:38] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:56:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:56:43] *** Joins: semeion (~semeion@user/semeion)
[11:57:49] <cluelessperson> Ninpo, that's probably what happened here then, thanks.
[11:57:57] <cluelessperson> I just copied my old bashrc over
[11:57:57] <Ninpo> Glad I could help
[11:59:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:59:14] *** Joins: mickey8 (~user@user/mickey)
[11:59:48] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[11:59:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[12:00:57] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:00:58] *** Quits: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:01:33] *** Joins: fikran (~fikran@user/fikran)
[12:02:12] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[12:03:40] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[12:03:52] <jinsun> oh I thought you were doing the --path thing, I had mentioned that too before
[12:04:19] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[12:04:50] *** Quits: strk (~strk@user/strk) (Ping timeout: 260 seconds)
[12:06:19] *** Joins: plastico (~plastico@neomutt/plastico)
[12:06:54] *** Joins: arinov (~arinov@213.194.126.155)
[12:07:07] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:08:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:10:01] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:10:07] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[12:10:23] *** Quits: snalty (~Shhh@user/snalty) (Quit: ZNC 1.8.2 - https://znc.in)
[12:10:40] *** Joins: snalty (~Shhh@user/snalty)
[12:13:27] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[12:15:39] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:19:12] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Read error: Connection reset by peer)
[12:19:48] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:21:16] *** Joins: Jak_o_Shadows (~quassel@user/jak-o-shadows/x-5091859)
[12:22:28] <rendar> what is the most proper way to read stdin with asyncio?
[12:24:08] <Ninpo> rendar: I believe it's StreamReader
[12:24:43] <Ninpo> or there's aioconsole https://github.com/vxgmichel/aioconsole
[12:25:22] *** Joins: Naan (~Naan@user/naan)
[12:25:43] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:27:20] <rendar> thanks
[12:28:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:28:48] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[12:29:34] *** Quits: Hypothesis (~Hypothesi@216.163.31.107) (Ping timeout: 252 seconds)
[12:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[12:30:44] <oneforall2>  --install-lib=$(python3 -c "import site; print(site.getsitepackages()[0])")   only way it works now
[12:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:31:41] *** Joins: thiras (~thiras@user/thiras)
[12:31:54] *** Quits: raph_ael (~raphael@user/raph-ael/x-7806685) (Quit: WeeChat 3.1)
[12:32:01] *** Joins: raph_ael (~raphael@user/raph-ael/x-7806685)
[12:35:47] *** Quits: BlackBishop (dexter@user/blackbishop) (Quit: WeeChat 3.1)
[12:36:02] *** Joins: BlackBishop (dexter@user/blackbishop)
[12:36:07] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:37:35] *** Joins: mat001 (~mat001@213.143.69.121)
[12:39:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[12:44:26] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[12:46:24] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[12:49:20] *** Joins: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de)
[12:52:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[12:53:02] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:f888:9db3:94a7:f52d) (Quit: WeeChat 2.8)
[12:54:22] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[12:56:21] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Remote host closed the connection)
[12:57:15] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:58:44] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[12:59:22] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[13:00:39] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:f888:9db3:94a7:f52d)
[13:00:52] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:02:45] *** Joins: adde9708 (uid139358@id-139358.tinside.irccloud.com)
[13:03:40] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:05:06] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:09:06] <rakoon> Can someone pls tell me why creating tasks (2nd way in the code) is slower? https://paste.ee/p/520Yp
[13:09:39] *** saribro is now known as swinnenb
[13:09:43] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[13:09:55] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[13:10:18] <raxor2k> graingert: are you here
[13:10:18] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:10:21] *** Joins: mrwick (~mrwick@user/mrwick)
[13:11:14] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:13:24] *** Joins: iflema (~ian@user/iflema)
[13:14:03] <raxor2k> I want to send a list with huge data(or a single dict/unparsed json) to a restapi, but nothing happens when it is sent. Am i doing something wrong here? :  https://bpa.st/H3WQ
[13:14:47] *** Joins: alzgh (~alzgh@user/alzgh)
[13:16:09] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[13:16:48] <deniska> raxor2k: the ideomatical way would be to define a pydantic model on the server side of thing, and then add it as a parameter to the handler function
[13:17:36] <deniska> raxor2k: def process_latest_list_data(data_in: DataIn), DataIn being a pydantic model class
[13:18:16] <raxor2k> deniska: it shouldnt be necessary..
[13:18:27] <raxor2k> with a pydantic model, i was also thinking about it
[13:18:51] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[13:19:06] <deniska> raxor2k: there's a way to do it without a model, you can probably do something like `def process_latest_list_data(data_in: Dict)`, but you'll have to check the fastapi docs on that
[13:19:32] <deniska> maybe you'll need (data_in: Dict = Body(...)) or something along these lines
[13:20:07] <raxor2k> deniska: what about list of dicts?
[13:20:33] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:21:04] <deniska> List[Dict] maybe?
[13:21:05] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:22:51] <deniska> raxor2k: integration with pydantic is the whole fastapi shtick, so consider doing that instead
[13:23:31] <raxor2k> deniska: ok i do that
[13:23:39] <rakoon> I ask again just in case. Why in my case asyncio.create_task is slower than awaiting? https://paste.ee/p/520Yp
[13:24:30] <deniska> rakoon: how much slower?
[13:24:54] <rakoon> daniska: like 3 times! i have no idea why
[13:25:27] <deniska> rakoon: I really don't like lines 11-12, not sure if they might be a problem
[13:25:35] <rakoon> i thought the way i coded is the best (by creating tasks) and i just tried to await them by accident and goes a lot faster
[13:25:46] *** Joins: legola (~legola@46.235.101.220)
[13:25:51] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:26:09] <deniska> rakoon: lines 11-12 seem like a bad way of writing `await one`
[13:27:03] <rakoon> deniska: ok but how can i wait for one first cause three wants one's id, but the two can be fired anyway, thats why i did what i did
[13:27:40] <deniska> rakoon: id = (await one).id
[13:28:26] <rakoon> ok let me try to run it that way and bentchmark again
[13:29:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[13:30:39] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[13:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:55] <deniska> rakoon: what probably happens is a scheduler bouncing between these while loops (with as_completed you have a lot of them running at the same time), starving actual work from happening
[13:32:27] <deniska> rakoon: also you probably don't have to use create_task that often, many asyncio functions will create a task for you when passed a coroutine object
[13:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[13:32:57] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se)
[13:33:51] <deniska> rakoon: both gather and as_completed do that I think
[13:34:33] <rakoon> deniska: it reduced it significantly, from 9 seconds now it 3.8 and the faster "version" on 3.1 seconds
[13:35:08] <rakoon> from now on i will avoid sleeping for sure!
[13:35:30] <rakoon> btw i realized how stupid it was to sleep instead of just using what you suggested xD
[13:35:39] <deniska> rakoon: it happens
[13:35:49] *** Joins: diamondbond (~diamondbo@175.157.246.29)
[13:36:18] <rakoon> yeah i use the create task when i want to immediately fire it
[13:36:27] *** Quits: diamondbond (~diamondbo@175.157.246.29) (Read error: Connection reset by peer)
[13:37:37] <deniska> rakoon: whatever you schedule to run via create_task won't have a chance to run until the next `await`, so there's no point to use create_task if you are going to pass it to `gather` in pretty much the next line without awaits inbetween
[13:38:05] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Ping timeout: 265 seconds)
[13:38:39] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:39:33] <graingert[m]> I'm always here raxor2k
[13:39:34] <rakoon> deniska: so i guess first gather(one, two) and then await(three(one.id))
[13:41:11] <rakoon> deniska: or await one and then gather(two(), three(one.id))
[13:41:45] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:42:27] <deniska> rakoon: you can create_task two, it doesn't seem to depend on anything, then await one, await three, await two
[13:43:18] <deniska> rakoon: also check what's inside func_one etc, they may have that kind of `while thing.done()` loop as well
[13:43:24] *** Joins: jpic (~jpic@109.190.253.11)
[13:43:55] *** resmo_ is now known as resmo
[13:44:11] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:45:25] <rakoon> deniska: all these funcs are just requests
[13:45:43] *** Joins: cursey (~cursey@user/cursey)
[13:45:52] <deniska> rakoon: hopefully httpx/aiohttp/etc and not something blocking? :)
[13:46:07] <rakoon> deniska: i tried await one then gather(two, three) and the slow version from 3.8 dropped to 3.4 but the faster dropped to 2.6! :D its crazy
[13:46:27] <rakoon> deniska: yeah httpx
[13:46:47] *** Joins: omegatron (~some@p5b056a70.dip0.t-ipconnect.de)
[13:46:53] <deniska> rakoon: hm, maybe a server throttles concurrent requests?
[13:47:16] <rakoon> im bentchmarking 100 users with 2 connections it is super fast i dont mind that, im interested understanding how asyncio works :D
[13:47:26] <supakeen> if you're speaking to the outside world there's a lot of variance in networks and 'the other side'
[13:47:35] <rakoon> deniska: im not sure i use wiremock to test locally
[13:48:43] *** Quits: jpic (~jpic@109.190.253.11) (Ping timeout: 252 seconds)
[13:49:47] *** Joins: jpic (~jpic@109.190.253.11)
[13:55:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[13:55:31] <rakoon> deniska: so all 3 ways produce same results around 3.6. Either await one -> gather(two, three) OR gather(one, two) -> await three OR create_task(two) -> await one -> await three -> await task
[13:55:55] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 252 seconds)
[13:56:42] <rakoon> deniska: but the 1st version of my paste is < 3 seconds
[13:57:18] <rakoon> ill try one more of awaiting all 3 funcs
[13:58:01] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[13:58:26] *** Quits: jpic (~jpic@109.190.253.11) (Ping timeout: 245 seconds)
[13:59:46] <rakoon> deniska: seems that doesnt matter what i do in nested functions, if i await from outside comparing to creating tasks, awaiting is faster always, took 2.5 seconds!
[14:00:45] <rakoon> deniska: probably creating so many tasks as you said the scheduler bounces, probably im abusing it
[14:01:10] <rakoon> deniska: thanks a lot for helping me
[14:01:49] <deniska> rakoon: I mean, it's ok to create thousands of tasks, if they all behave well
[14:02:04] <deniska> so the amount of tasks alone shouldn't be an issue
[14:02:54] *** Quits: Bardon_ (~Bardon@user/Bardon) (Ping timeout: 260 seconds)
[14:04:38] *** Joins: death916 (~death916@user/death916)
[14:04:47] <rakoon> deniska: hmm ok, is it becuse i have only 2 connections on httpx.client?
[14:05:15] <deniska> rakoon: still should be faster than doing things in order
[14:05:18] <rakoon> and i sort of force scheduler to bounce all the time cause cant fire the request and always checking if it can fire?
[14:05:38] <rakoon> deniska: you mean it should be faster with create_task?
[14:05:43] <deniska> rakoon: no, if a task is awaiting on an IO operation, a scheduler won't wake it up until IO has a result
[14:06:02] <rakoon> deniska: oh ok
[14:06:25] <deniska> rakoon: I mean it should be faster if you await for multiple things at once (that's what gather and as_completed are for), then awaiting for each in sequence
[14:06:27] <rakoon> oh i also use the debug=true on asyncio
[14:06:42] <deniska> rakoon: unless somehow doing them at once results in substantially more work
[14:06:45] <rakoon> deniska: right that is what i though as well :/
[14:08:19] <rakoon> deniska: in all these functions i do ONLY a request and i load the response to a pydantic model
[14:08:52] *** Joins: darksun (~darksun@user/darksun)
[14:08:56] <rakoon> deniska: let me try with more connections just to see if it makes a difference between the 2 versions
[14:08:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:10:01] *** Joins: Bardon (~Bardon@user/Bardon)
[14:10:54] *** Joins: fikran (~fikran@user/fikran)
[14:11:08] <rakoon> nah it didnt make a difference
[14:11:48] <deniska> rakoon: can you repaste the new code?
[14:12:52] *** dcaro is now known as dcaro_lunch
[14:15:36] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[14:17:53] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[14:18:37] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:20:27] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[14:20:45] *** Joins: baakeydow (~baake@2001:bc8:65c:2601::1)
[14:22:48] <rakoon> deniska: https://paste.ee/p/O1eBo
[14:23:33] <rakoon> deniska: the big difference is always in the main() no matter what i change in the get_user_data
[14:23:55] *** Quits: baakeydow (~baake@2001:bc8:65c:2601::1) (Quit: baakeydow)
[14:24:14] *** Joins: baakeydow (~baake@2001:bc8:65c:2601::1)
[14:24:57] <rakoon> deniska: i also tried just awaiting all 3 in the get_user_data but forgot to add it in the past
[14:25:00] <rakoon> *paste
[14:25:40] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[14:25:40] <deniska> rakoon: Not really familiar with httpx, are you supposed to share the same client between concurrent tasks?
[14:25:49] <rakoon> deniska: yes
[14:26:40] <rakoon> deniska: for the reason of being faster as httpx docs say
[14:27:06] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:28:37] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:30:07] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[14:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:17] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:35:26] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[14:35:39] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:36:29] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[14:37:30] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:41:01] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Quit: Leaving)
[14:41:46] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 245 seconds)
[14:42:20] *** Joins: Amnesia (~Amnesia@user/amnesia)
[14:42:21] <Amnesia> question, is there anyone over here who also stumbled upon https://jira.mongodb.org/browse/PYTHON-2936 ?
[14:44:00] *** Joins: lethu (~lethu@user/lethu)
[14:44:42] <solrize> maybe an expiration or something?  no i'm not affected
[14:46:36] <hexnewbie> The first thing that InvalidValue would make me look at is indeed expiration dates values that are in the past, particularly since 28-29 last month
[14:48:30] <supakeen> Particularly: https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/
[14:48:38] *** Joins: brickfat (~brickfat@user/brickfat)
[14:49:14] *** Joins: [2ge] (~2ge]@84.245.121.119)
[14:49:28] <supakeen> (put the ISRG Root in your keychain on macOS and see if it resolves the issue)
[14:49:30] *** Joins: Nspace (~Nspace@user/nspace)
[14:50:20] <[2ge]> hi guys, I am total begginer in python, I would like to set up UWSGI with https://github.com/guessit-io/guessit-rest - it should be super easy, but I am getting errors. Is here somebody to help please ?
[14:51:24] *** Joins: georgios (~georgios@user/georgios)
[14:51:45] *** Joins: VaniaPy (~VaniaPy@adsl-205.176.58.193.tellas.gr)
[14:51:53] <Amnesia> Apparently rust_asn is somewhat more stringent on passed certs :D
[14:52:00] <sveinse> How pythonic is it to put a lot of logic in getters and setters? I wouldn't expect `some.thing` potentially being a heavy function that can take a long time, e.g. a network access.
[14:52:34] <deniska> sveinse: if you know beforehand that it's going to have a lot of logic, make a normal method
[14:52:49] <VaniaPy> Hi,i need to iterate over a list and each time get the next element of the list. I tried this,but it seems that i'm a running an infinite loop https://bpa.st/OLQA
[14:52:54] <deniska> sveinse: if it's an attribute you refactored into property, then you just do what you're gonna do :)
[14:53:08] *** Quits: JanC (~janc@user/janc) (Ping timeout: 265 seconds)
[14:53:22] <deniska> sveinse: I believe writing the code with @property in the first place is a bit of an antipattern
[14:53:33] *** Joins: JanC (~janc@user/janc)
[14:54:14] <hexnewbie> VaniaPy: cycle() creates an infinite loop, on purpose, cycling over and over the same *single* element (cycle(3) would produce 3,3,3,3,3,3,3,3,3.....), in this case the element is the whole list
[14:55:11] <sveinse> deniska: I'm porting a package to asyncio, and the author has used getters and setters a lot to hide backend communication and it cought me by surpise and I was wondering if it is an antipattern. In addition that the async function chain cannot follow via a @property decorator.
[14:55:15] <sveinse> deniska: thanks
[14:55:40] <VaniaPy> hexnewbie ok,got it
[14:56:57] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:56:58] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:00:58] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[15:01:01] *** Joins: sarab (~sarab@103.210.200.98)
[15:02:11] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 265 seconds)
[15:06:20] *** Joins: brabrax (~brabrax@user/brabrax)
[15:07:18] *** Quits: newbie|2 (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[15:07:45] *** Joins: Nspace (~Nspace@user/nspace)
[15:08:17] <sveinse> deniska: Do you know if property decorators being an antipattern is documented anywhere, or is it an opinionated topic?
[15:10:27] *** Quits: sarab (~sarab@103.210.200.98) (Quit: Leaving)
[15:11:20] *** Quits: adde9708 (uid139358@id-139358.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:11:22] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 265 seconds)
[15:13:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:14:40] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[15:14:43] <sveinse> It is evidently a showstopper for async methods hidden inside the properties
[15:14:57] *** Joins: brabrax (~brabrax@user/brabrax)
[15:17:46] *** Joins: shad (~shad@user/shad)
[15:18:28] *** Joins: node1 (~node1@user/node1)
[15:18:39] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[15:18:50] <sveinse> Unless you return a coro: E.g. if one have a regular propery `some.value` returning 42, a `some.avalue` property could return a coro which would be awaited on and will ultimately return 42. I'm not sure I think this is clean.
[15:21:16] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[15:23:19] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:24:01] *** Parts: Amnesia (~Amnesia@user/amnesia) ()
[15:24:44] *** Joins: Warped (~Warped@user/warped)
[15:25:01] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:25:02] *** Joins: theprophet (~theprophe@85.114.228.184)
[15:25:47] *** Joins: WarpedAI (~Warped@user/warped)
[15:26:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[15:27:06] *** Joins: shad (~shad@user/shad)
[15:27:20] <summonner> if you are using both a setter and a getter but you don't do anything meaningful during the setter process, just leave the self.var as is
[15:27:53] <summonner> people coming from C#, Java, etc have real trouble letting go of private/public vars
[15:28:05] *** Joins: brelod (~me@90.244.150.142)
[15:28:17] *** Quits: control (~v1@user/control) (Quit: leaving)
[15:29:16] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 245 seconds)
[15:29:22] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Ping timeout: 252 seconds)
[15:31:09] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:14] *** Joins: vlm (~vlm@user/vlm)
[15:31:38] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:32:05] <sveinse> summonner: yes, I've seen that too. That and doing lots of type checking to get overloading into py.
[15:32:06] *** Quits: WarpedAI (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[15:32:54] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[15:33:49] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:35:14] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:35:30] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:7cb0:af3c:ccac:69bd)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:07] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[15:37:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:40:07] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:40:28] *** Joins: mantiX (~manti7@176.10.104.94)
[15:40:37] *** Quits: VaniaPy (~VaniaPy@adsl-205.176.58.193.tellas.gr) (Quit: Connection closed)
[15:40:43] *** Joins: Warped (~Warped@user/warped)
[15:40:48] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:41:21] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 245 seconds)
[15:41:25] *** Joins: kenoba (~kenoba@user/kenoba)
[15:41:29] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:43:42] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:7cb0:af3c:ccac:69bd) (Ping timeout: 260 seconds)
[15:44:54] <Swayze> https://sadh.life/post/builtins/
[15:44:55] <Swayze> nice readings
[15:47:42] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:48:31] <Swayze> "Understanding all of Python, through its builtins"
[15:49:17] <Dev0n> How does connection pooling work with sqlalch+postgress? If all connections from the DB are used up, does the queries using the pool wait until they are available again?
[15:50:20] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:51:09] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[15:51:59] <deniska> sveinse: it's more of an opinion, but I feel like it's more common than not
[15:52:12] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[15:53:27] *** Joins: cdown (~cdown@89.32.122.5)
[15:55:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[15:56:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:59:43] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:01:48] *** Joins: rsrx (~rsrx@114.125.102.110)
[16:02:53] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:05:10] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:08:19] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:09:27] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:10:13] *** Joins: ihristov (~ihristov@85.187.46.226)
[16:10:47] *** Quits: BlueShark (sid10311@user/blueshark) (Quit: Connection closed for inactivity)
[16:11:57] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 250 seconds)
[16:12:02] *** cdown_ is now known as cdown
[16:12:22] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:13:22] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[16:13:51] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:13:55] *** Quits: node1 (~node1@user/node1) (Ping timeout: 252 seconds)
[16:15:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:16:41] *** dcaro_lunch is now known as dcaro
[16:17:04] <sveinse> In async functions, is it a best pratice that every function should be async even if they are transparent proxies? E.g. val = await proxy(), def proxy(): return inner(), async def inner(): ...
[16:17:42] <sveinse> In this example, should proxy() be an async function or not
[16:18:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:18:14] *** Joins: Sushi (~romuald@user/sushi)
[16:18:24] <jinsun> how would you await proxy() if proxy is not async?
[16:18:49] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[16:18:55] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 252 seconds)
[16:19:01] <sveinse> jinsun: because it returns a coroutine
[16:20:15] *** Joins: fikran (~fikran@user/fikran)
[16:20:29] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[16:20:51] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[16:21:44] *** Parts: Sushi (~romuald@user/sushi) (WeeChat 2.3)
[16:25:27] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 268 seconds)
[16:26:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[16:26:02] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Remote host closed the connection)
[16:26:45] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[16:26:47] <sveinse> Point is that I'm traversing a rather deep calling chain where most intermediate levels doesn't really do anything with the data. Adding "await something()" and "async def" on each and every function downwards is tedious and it gives a long await chain that doesn't really wait on anything.
[16:27:21] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[16:27:27] *** Joins: just-me (~just-me@5.47.172.159)
[16:28:29] <jinsun> ah, yes that works, for some reason I was remembering it must be async def to await it
[16:28:33] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[16:29:23] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[16:29:32] <sveinse> However, I'd like to to this proper, and if doing so is an antipattern, I will implement the async/await chain all the way down
[16:30:12] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[16:30:19] <just-me> Hello people, this is a dice rolling program I wrote a while ago and finished up recently. Critique me. https://bpa.st/CHGQ
[16:30:23] <jinsun> then I don't think you need to make the proxy async def and await, it is doing the same thing either way
[16:30:30] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[16:31:34] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[16:32:01] <summonner> sveinse maybe you should map out your process with a sequence diagram?
[16:32:13] *** Joins: cheater (~Username@user/cheater)
[16:32:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:33:28] *** Quits: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[16:34:39] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:35:21] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:35:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:37:10] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 268 seconds)
[16:38:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[16:38:40] *** Joins: cheater (~Username@user/cheater)
[16:41:00] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[16:41:29] <raxor2k> what on earth is this "TypeError" : cannot pickle 'module' object ?
[16:41:36] <raxor2k> full traceback: https://bpa.st/W4KQ
[16:42:26] <just-me> I don't even know what that is, it never popped up on my testing.
[16:42:33] <just-me> Did you do anthing special to get it?
[16:42:47] <raxor2k> nvm, solved it
[16:42:59] <just-me> So, what was the issue?
[16:44:38] <raxor2k> 2sec, i show paste
[16:45:28] <NoImNotNineVolt> whoever mentioned scapy the other day, thanks again. awesome tool, seriously.
[16:45:49] <raxor2k> line 2 caused the error: https://bpa.st/C5RQ
[16:46:02] <raxor2k> https://bpa.st/62ZQ
[16:46:10] *** Joins: pycurious (~Adium@user/pycurious)
[16:46:18] <pycurious> When a logger module is forked - how does it continue to work on the new files - even if multiple loggers are writing to the log files simultaneously?
[16:47:58] *** Joins: Elodin (~weechat@user/elodin)
[16:48:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[16:49:16] *** Joins: LiftLeft (~LiftLeft@191.96.185.13)
[16:49:25] *** Joins: redrum88 (~redrum88@user/redrum88)
[16:51:35] *** Joins: han-solo (~hanish@user/han-solo)
[16:51:47] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[16:51:50] *** Joins: node1 (~node1@user/node1)
[16:52:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:52:17] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[16:54:54] *** Joins: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3)
[16:59:02] <rubin55> good day all, I want to combine a bunch of things using a list comprehension. I have this:  alt_names = [name + domain for name in names[t]]
[16:59:42] <rubin55> This works, but I would also like to do it for multiple values of "domain" (i.e, that domain is a list also and do it for each element of domain)
[17:00:03] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:00:30] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[17:01:13] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 252 seconds)
[17:01:19] <The-Compiler> rubin55: What kind of result are you looking for? A list of all combinations of names and domains?
[17:01:29] <rubin55> yes, exactly
[17:01:43] <jinsun> so add another for [name + domain  for name in ... for domain in ...]
[17:02:09] <The-Compiler> rubin55: either what jinsun said (though IMHO that's hard to understand), or itertools.product
[17:02:58] <The-Compiler> rubin55: https://docs.python.org/3/library/itertools.html#itertools.product
[17:03:36] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[17:04:51] *** Joins: Hackerpcs (~user@user/hackerpcs)
[17:04:58] <rubin55> wow, that's so much nicer
[17:05:23] <rubin55> I always get confused when list comprehensions get a bit obese
[17:05:29] <rubin55> Thanks!
[17:08:55] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[17:10:07] *** Joins: legola (~legola@46.235.101.220)
[17:11:05] <deltab> just-me: Hi! that's not bad. There's no need to copy argv though, especially when you're just getting its length, and the loop could be done with for and range
[17:13:14] <just-me> Thank you deltab :)
[17:14:43] *** Joins: xiongxin (~quassel@119.123.101.136)
[17:15:41] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[17:15:41] <deltab> rubin55: you can rewrite those list comprehensions using generator functions, which may be easier to follow
[17:16:41] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[17:18:38] <deltab> def generate_alt_names(): for name in names[t]: for domain in domains: yield name + domain
[17:18:50] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[17:18:53] *** Joins: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net)
[17:19:30] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 268 seconds)
[17:24:47] *** Joins: puzzled_ (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[17:25:33] *** Joins: amoe (~amoe@visarend.solasistim.net)
[17:26:09] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[17:26:13] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[17:26:21] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[17:26:28] *** Joins: benjwadams (~benjwadam@96.238.4.28)
[17:28:31] *** Quits: caveman_ (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[17:28:31] *** Joins: han-solo (~hanish@user/han-solo)
[17:28:50] <amoe> Using flask, I've got a structure where 'app/__init__.py' defines the Flask 'app' object.  'app/__init__.py' also does 'from app import views' to load 'app/views.py'.  But 'app/views.py' also wants to do 'from app import app'.  Is that a circular import?
[17:29:31] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[17:29:58] <han-solo> that does seems like it
[17:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:31] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:31:54] *** Joins: besnn (~besnn@user/besnn)
[17:33:59] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483)
[17:35:50] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3015-1685-7ac7-6698.res6.spectrum.com)
[17:36:35] *** Joins: magla (~gelignite@55d44679.access.ecotel.net)
[17:38:49] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:39:37] *** Joins: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[17:40:19] *** Joins: miceiken (uid478870@id-478870.lymington.irccloud.com)
[17:40:28] *** Quits: Barones (~Barones@2804:214:8198:45a5:9942:fb04:3fe5:f9c3) (Ping timeout: 268 seconds)
[17:40:31] *** Joins: hudo_ (~hudo@62.68.20.210)
[17:45:36] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[17:46:49] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[17:48:53] *** Joins: ub (~Thunderbi@178.115.41.191.wireless.dyn.drei.com)
[17:49:11] *** Joins: Macuser (~Macuser@2607:b400:26:0:1067:edd:95dd:f4df)
[17:50:19] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[17:50:38] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 260 seconds)
[17:51:13] *** Joins: Soni (~quassel@autistic.space)
[17:53:43] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[17:54:30] *** Joins: pycurious (~Adium@user/pycurious)
[17:55:19] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[17:55:31] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[17:56:15] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[17:56:34] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[17:57:50] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:59:11] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[17:59:34] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 265 seconds)
[17:59:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[17:59:40] *** Joins: Nspace (~Nspace@user/nspace)
[17:59:45] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[18:00:13] *** Quits: Macuser (~Macuser@2607:b400:26:0:1067:edd:95dd:f4df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:01:02] <Yhg1s> amoe: yes.
[18:01:45] *** Joins: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de)
[18:02:03] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[18:03:04] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[18:03:24] *** Joins: dez (uid92154@user/dez)
[18:03:56] *** Joins: akk (~akk@75.161.146.115)
[18:04:02] *** Quits: benjwadams (~benjwadam@96.238.4.28) (Ping timeout: 256 seconds)
[18:04:17] *** Quits: just-me (~just-me@5.47.172.159) (Quit: Leaving)
[18:04:23] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[18:05:20] *** Joins: Nspace (~Nspace@user/nspace)
[18:05:38] *** Joins: stdout (~stdout@216.163.21.11)
[18:06:20] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 265 seconds)
[18:07:23] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483) (Remote host closed the connection)
[18:12:08] *** Quits: xiongxin (~quassel@119.123.101.136) (Quit: No Ping reply in 180 seconds.)
[18:13:23] *** Joins: xiongxin (~quassel@113.116.34.120)
[18:16:11] *** Joins: kujemiola (~kujemiola@2a01:114f:95e:c800:d97f:d01:bd57:4dc6)
[18:16:21] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:17:04] <kujemiola> hello
[18:17:33] <kujemiola> I am a master Python programmer, I can code everything
[18:17:39] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:17:44] <Jackal-o-lantern> owo
[18:18:05] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[18:18:52] <kujemiola> no wait, I did not finish, I am still 1/8th of the way in the book for Python but I will be good I have this feeling
[18:18:55] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[18:19:03] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:19:21] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483)
[18:19:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:20:03] <graingert[m]> <amoe> "Using flask, I've got a structur..." <- you should use the `create_app(` pattern
[18:20:13] <graingert[m]> and then use `flask.current_app` whenever you need the app
[18:20:17] <kujemiola> I agree amoe
[18:20:55] <kujemiola> good code block choice
[18:21:30] *** Joins: QuaternionsRock (~Quaternio@76.191.39.82)
[18:21:34] *** Joins: zeden (~zeden@user/zeden)
[18:21:39] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483) (Remote host closed the connection)
[18:21:40] <InPhase> kujemiola: Finish the book and your skills will probably reach Turing Completeness.  Then you spend decades slowly decreasing the rate of people complaining about your code.  ;)
[18:22:03] <sveinse> Is it a common pattern to let regular function return a coroutine rather than declaring that function as an async function? Or is the oposite: discouraged? I suppose having "async def" gives better visibility to both being a coroutine and is able to declare what it really returns
[18:22:10] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483)
[18:22:16] <QuaternionsRock> I'm having trouble understanding why functools.cached_property interferes with key-sharing dictionaries. Is anyone here knowledgeable enough to explain?
[18:23:06] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[18:23:49] <SnoopJ> sveinse, I think the decision hangs on whether or not you intend to await the function (or do other async-specific things with it). To my knowledge it's not verboten to return a coroutine from a regular function
[18:25:11] <summonner> sveinse, adding to what SnoopJ says, you have to get into the mind-set of "throwing the function up in the air" and leaving it for the computer to decide when to do the processing (if that makes sense?)
[18:25:24] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[18:25:30] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[18:25:30] <summonner> async event processing is crazy fast
[18:26:19] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[18:26:20] <summonner> I had a program that would take 11 seconds to run; after converting that to async it finished in 0.4s
[18:26:30] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[18:26:47] *** Joins: vlm (~vlm@user/vlm)
[18:27:06] <summonner> Or, how I learned to stop worrying and Love the Async
[18:27:15] *** Quits: shark (~lemonade@user/sh4rk) (Quit: ZNC 1.8.2 - https://znc.in)
[18:27:15] *** Joins: zeden (~zeden@user/zeden)
[18:27:28] *** Quits: vlm (~vlm@user/vlm) (Remote host closed the connection)
[18:27:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[18:29:10] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[18:29:36] *** Joins: fikran (~fikran@user/fikran)
[18:29:42] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[18:29:46] *** Quits: Tireos (~Tireos@91.223.118.131) (Read error: Connection reset by peer)
[18:30:00] *** Joins: djapo (~archangel@user/djapo)
[18:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:31:29] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[18:31:36] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[18:33:18] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[18:33:44] <SnoopJ> QuaternionsRock, I think it has something to do with the implementation of cached_property as a descriptor. At a guess, it sounds like the attribute name may be a distinct str instance for each instance of the class (but it *is* a guess)
[18:33:46] <sveinse> Yeah, thanks. The context is that I'm working on porting an existing package to asyncio and it has an elaborate calling chain for some variables via some class properties that in the deep end up doing an IO request. Making the inner deep IO async is easy. Its the long path up to the top that requires a lot of change to cater for async functions. One way to avoid the large change would be to change the
[18:33:52] <sveinse> inner and the outer to async, but let the middle layers just pass the coro as it would with data. But I'm feeling that it has a slight smell to it.
[18:34:56] <SnoopJ> sveinse, coros are "just" function objects so it's not smelly to me to do stuff to/with them from synchronous code, with the caveat that this code can't take advantage of stuff reserved for asynchrony
[18:34:57] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:35:07] *** Joins: vlm (~vlm@user/vlm)
[18:35:14] <QuaternionsRock> Hmmm. That's frustrating
[18:35:19] *** Quits: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:35:32] <QuaternionsRock> There isn't really a convenient way to add cached computed properties to dataclasses
[18:35:46] <SnoopJ> QuaternionsRock, cached across all instances?
[18:35:54] *** Quits: l4yer (~l4yer@159.48.55.8) (Ping timeout: 260 seconds)
[18:35:55] <QuaternionsRock> no, each individual instance
[18:36:01] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[18:36:16] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:37:12] <QuaternionsRock> I mean to say there's no *universal* way: it's certainly possible, but the implementation varies significantly depending on if frozen is True, slots is True, etc.
[18:38:22] *** Joins: Nspace (~Nspace@user/nspace)
[18:38:42] <SnoopJ> Something makes me uneasy about the idea of a lazy computation for a frozen instance, I guess because the class it mutating itself, but I want to think of it as frozen == immutable, but I see your point. Might be the makings of a good python-ideas posting
[18:38:53] <QuaternionsRock> In fact, if you want to use slots in combination with cached computed properties, you kind of can't use the dataclass anymore
[18:39:05] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[18:39:24] <QuaternionsRock> Well I suppose you can, but not through the built-in route
[18:39:50] *** Joins: Soni (~quassel@autistic.space)
[18:40:07] <QuaternionsRock> you'd have to use slots=False for the dataclass argument then define it yourself, which is a lot of legwork that shouldn't really need to be done
[18:41:26] <SnoopJ> Yea, it sounds like it might be a missing stair in `dataclass`
[18:41:46] *** Joins: cdown_ (~cdown@89.32.122.5)
[18:42:13] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:42:17] <QuaternionsRock> Tbh I don't understand why dataclass is a decorator instead of an ABC like typing.NamedTuple but that's a topic for another day
[18:43:07] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:44:19] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[18:44:40] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[18:44:50] *** Joins: lastshell (~lastshell@user/lastshell)
[18:44:51] *** cdown_ is now known as cdown
[18:45:04] <SnoopJ> The practical answer is "because dataclass is attrs-lite" and that's how attrs does it. But as a design decision, I think an ABC is a little more restrictive on the end-user's hierarchy
[18:45:23] <QuaternionsRock> I suppose that makes sense
[18:45:25] <SnoopJ> a lot more metaprogramming involved to dynamically create such a class, for instance
[18:46:02] <QuaternionsRock> I feel like the more general problem might be that dataclasses.field's default_factory isn't passed a self argument
[18:46:48] *** Quits: xiongxin (~quassel@113.116.34.120) (Quit: No Ping reply in 180 seconds.)
[18:46:57] <QuaternionsRock> I feel like it would make sense if defaults could depend on other fields
[18:47:03] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[18:47:06] <SnoopJ> they can, but the conventional spelling is to do this in __post_init__()
[18:47:53] <QuaternionsRock> TIL about __post_init__! Thank you!
[18:48:04] *** Joins: xiongxin (~quassel@113.116.33.170)
[18:48:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:48:11] <QuaternionsRock> It might be cool if dataclasses.field also functioned as a decorator
[18:48:27] <SnoopJ> the rough idea is I think that a Field doesn't even necessarily exist in the context of an instance
[18:49:01] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[18:49:13] <SnoopJ> or uh, the value it would produce when the factory is called. Field itself *definitely* has this property :)
[18:49:59] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:50:28] <SnoopJ> QuaternionsRock, if you find yourself chafing against the limitations of dataclass, I strongly recommend you at least have a look at attrs (if you haven't already), there's a lot there that wasn't folded into the stdlib
[18:50:37] <[2ge]> Guys, is here somebody who can give me help, I am willing to pay a bit for consultation (BTC is ok), please DM me. (in short I want to run on my server guessit-rest)
[18:52:48] *** Joins: cdown_ (~cdown@163.114.131.1)
[18:54:14] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483) (Remote host closed the connection)
[18:54:25] <QuaternionsRock> @SnoopJ https://gist.github.com/QuaternionsRock/7d649eebeb03e0693d4d6a0c04e1cb39
[18:54:29] <QuaternionsRock> What do you think about this concept?
[18:55:31] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 245 seconds)
[18:55:39] *** cdown_ is now known as cdown
[18:56:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:56:50] *** Joins: VaniaPy (~VaniaPy@adsl-205.176.58.193.tellas.gr)
[18:57:01] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[18:57:10] *** Quits: rsrx (~rsrx@114.125.102.110) (Quit: Leaving)
[18:58:36] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[18:58:48] <SnoopJ> QuaternionsRock, it seems like it goes against the idea of Field because of the coupling to an instance (where dataclass/attrs avoid this pretty deliberately)
[18:59:26] <SnoopJ> it would be kind of nice to have a version of Field that lets you do this, though. I don't know the inner workings of either library well enough to understand the implications
[18:59:32] <QuaternionsRock> SnoopJ how is it any different than __post_init__'s coupling?
[18:59:38] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[18:59:50] <grandrew> when is PyCon '22 call for papers?
[19:00:02] <SnoopJ> QuaternionsRock, the main one is that __post_init__ is *after* init, i.e. all `Field`s have been initialized
[19:00:39] <QuaternionsRock> Well, we could theoretically ensure that those factories are called in __post_init__
[19:00:40] <SnoopJ> QuaternionsRock, suppose that self.foo and self.bar are *also* Field instances, for instance. Your sample now has this problem of field initialization order
[19:00:40] <p-i-> Is there some simply way to print an object? e.g. suppose I have `class Foo: def __init__(self): self.x = {'a':1}; self.y = [1,2,3]` ... I would like it to print the values of x and y.
[19:00:54] <SnoopJ> QuaternionsRock, yes, but you do have to worry about which ones depend on which other ones, etc.
[19:00:59] <QuaternionsRock> Although I suppose order must then be preserved and ti could get pretty weird
[19:01:00] <QuaternionsRock> yeah
[19:01:05] <QuaternionsRock> fair enough
[19:01:25] <SnoopJ> I don't see any reason you *couldn't* work out the dependency graph, but it might get pretty gory to cover all the possible usages
[19:01:51] <SnoopJ> philosophically it seems tidier to just force the user to look the thing in the face and acknowledge the dragons :)
[19:02:32] <SnoopJ> but like I said, your ideas seem like they might make for good discussion on the python-ideas mailing list (or perhaps it's been raised there before)
[19:02:48] <SnoopJ> I would be surprised if it hasn't come up in attrs-land before, so their issues would be worth a look too
[19:03:00] <p-i-> print(a.__dict__)  # gottit
[19:03:06] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483)
[19:03:26] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 245 seconds)
[19:04:37] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[19:05:13] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[19:05:13] *** Joins: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[19:05:26] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[19:08:01] <Wooble> p-i-: almost always better (and more reliable) to add a __repr__ or __str__ method
[19:08:03] <Dev0n> hey, with psycopg2, if you specify multiple hosts in the connection string, is that sort of like failover where if the first host fails then the second one is tried?
[19:08:35] <SnoopJ> p-i-, note that not all objects have __dict__. As Wooble suggests, this task is the exact reason why there are dedicated "turn this into a string" dunders.
[19:08:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[19:09:28] <SnoopJ> (also, even when __dict__ does exist, it may not be all of the state of the object)
[19:10:40] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[19:11:15] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:12:07] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[19:12:45] *** neil is now known as honk
[19:12:51] *** Joins: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[19:12:52] *** honk is now known as neil
[19:13:04] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[19:13:21] *** neil is now known as shrug
[19:13:26] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[19:13:53] *** shrug is now known as shrug[a]
[19:14:21] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[19:14:35] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[19:14:40] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[19:15:20] *** Joins: pycurious (~Adium@user/pycurious)
[19:16:07] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 250 seconds)
[19:16:29] *** Quits: n000g (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[19:17:52] *** Joins: ArchDave2 (~ArchDave@024-217-066-196.res.spectrum.com)
[19:18:02] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:18:39] *** Joins: comet23 (~comet23@user/comet23)
[19:19:01] <comet23> could i pass in a string value and then use it as a function in an init?
[19:19:21] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[19:19:33] <comet23> like init(self, 'value') and then in the init i can do 'value'() and it'll call that method name
[19:19:35] *** Joins: nrg (~NRG@user/nrg)
[19:20:04] <Wooble> comet23: you can look up the method with getattr
[19:20:11] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:20:19] *** Joins: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de)
[19:20:27] <comet23> basically what i'm trying to ask if there's a way to turn a string into a method
[19:20:52] <comet23> into a method call rather
[19:22:31] <SnoopJ> `the_attribute = getattr(the_object, the_attribute_name)`
[19:22:57] <hexnewbie> comet23: getattr(self, 'method1') returns the method or attribute named method1, if it *is* callable (method, etc.) you could call it with getattr(self, 'method1')() or after assigning it to a variable at your own discretion.
[19:22:58] <SnoopJ> `getattr(foo, 'bar')` is a synonym for `foo.bar`
[19:23:10] <SnoopJ> (but the former lets you use a runtime string)
[19:23:34] <QuaternionsRock> Does anyone know if there's a difference between dtype(x) and x.astype(dtype) for numpy?
[19:23:47] <QuaternionsRock> as in np.uint32(x) vs x.astype(np.uint32)
[19:24:26] <SnoopJ> QuaternionsRock, astype() is an instance method on ndarrays, dtype() constructs a dtype object
[19:24:42] <comet23> thank you so much :D
[19:24:58] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:25:19] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[19:25:21] <QuaternionsRock> SnoopJ np.uint64(np.arange(10)) seems to have the same behavior as np.arange(10).astype(np.uint64)
[19:25:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:25:47] <SnoopJ> oh, you mean calling a dtype object, not np.dtype() itself
[19:25:53] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[19:25:55] <QuaternionsRock> (obviously this is a terrible example because you should do np.arange(10, dtype=np.uint64) but I'm dealing with a function argument in reality)
[19:25:59] <QuaternionsRock> Yeah correct
[19:30:05] *** Quits: szymon (~ugh@staticline-31-183-189-254.toya.net.pl) (Quit: szymon)
[19:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:51] *** Quits: runelind (~runelind@user/runelind) (Quit: ZNC 1.8.2 - https://znc.in)
[19:31:52] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:32:39] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:a5c1:f01b:b0a8:483) (Remote host closed the connection)
[19:33:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[19:33:18] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:33:19] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:33:52] *** Quits: xiongxin (~quassel@113.116.33.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:34:08] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:34:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:37:09] <SnoopJ> QuaternionsRock, interesting question, I'm not entirely sure and the answer isn't evident in the basic docs on dtypes. I have no idea what the semantics of calling the dtype are. I can't imagine why I'd want to do this instead of `np.array(..., dtype=my_dtype)` though
[19:37:20] <SnoopJ> or astype() given an existing array
[19:37:33] <QuaternionsRock> I'm actually trying to convert a dtype scalar to a different dtype
[19:38:12] *** Joins: Fiji (~Fiji@user/fiji)
[19:38:14] <SnoopJ> if you tell us more about that question we might be able to help, but as-is we can only address the question broached
[19:38:21] <QuaternionsRock> as in, x=np.arange(10, dtype=np.uint32) or something similar is passed into my function
[19:38:34] <QuaternionsRock> x is liable to be any array though
[19:38:47] <SnoopJ> it could be that there's some texture here between scalar and non-scalar dtypes, for instance
[19:38:50] <QuaternionsRock> and I need to get x[-1].astype(np.uint64) so I can do multiplication without overload
[19:39:07] <QuaternionsRock> (or potentially np.uint64(x[-1]))
[19:39:19] <QuaternionsRock> And I'm not sure which syntax is preferred
[19:39:31] <SnoopJ> I'm a little lost in the details here, what is the task?
[19:39:52] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[19:40:22] <SnoopJ> Another option, though: x[-1:].astype(np.uint64) (the slice preserves the ndarray-ness)
[19:40:50] <SnoopJ> or perhaps `x.flat[-1:]` if you're worried about shape details, etc.
[19:41:09] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[19:41:09] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[19:41:18] <raxor2k> sqlalchemy.exc.ArgumentError: Mapper mapped class OriginalAIdata->sensor_data_for_AI could not assemble any primary key columns for mapped table 'sensor_data_for_AI'
[19:41:39] <raxor2k> yes i know what this is telling me, no "primary key" defined. But i dont want to have it, and neither do i have it inside mysql table
[19:41:42] <raxor2k> what can i do here?
[19:41:44] <QuaternionsRock> SnoopJ no I definitely want a scalar
[19:42:03] <QuaternionsRock> The last element of the array is guaranteed to be the size of another array, to keep it simple
[19:42:16] <QuaternionsRock> but if I want to be able to multiply that number safely I must convert from 32 bit to 64 bit
[19:42:35] <QuaternionsRock> But because it's a scalar, astype feels a bit... strange
[19:42:54] <SnoopJ> well, it's not a valid operation on not-an-ndarray
[19:43:00] <QuaternionsRock> It is
[19:43:20] <SnoopJ> oops, fair enough, it *is* valid on dtypes I guess
[19:43:21] <QuaternionsRock> np.arange(10)[0].astype(np.uint64) is valid
[19:43:46] <QuaternionsRock> I know it's super strange, kind of blurs the lines between a 0D array and scalar a bit but whatever
[19:43:57] <SnoopJ> I don't know what that line would be :)
[19:44:05] <SnoopJ> but I think I see what you mean here
[19:44:23] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[19:44:24] * SnoopJ always forgets that the output thingies that look like native types are numpy types with identical reprs
[19:45:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:46:51] <ChrisWarrick> raxor2k: why do you not want a primary key?
[19:46:56] <SnoopJ> QuaternionsRock, I wouldn't be surprised if there's an esoteric corner of the numpy docs that lays out the difference (if any) between these spellings, but I would prefer the astype() one for sure because calling a dtype seems like wading pretty deep into the weeds
[19:47:20] <QuaternionsRock> Dang I was thinking the opposite
[19:47:32] <QuaternionsRock> because it would allow me to handle the case where the passed-in array is actually a list of python ints
[19:47:59] <SnoopJ> can you clarify if you mean "the passed-in object is a list" or "the passed-in array is an array of a list..."
[19:48:11] <SnoopJ> (or perhaps an array with dtype 'object')
[19:51:35] <SnoopJ> it might be as straightforward as: `if isinstance(x.dtype, np.generic): x[-1].astype(...); elif isinstance(x.dtype, object): python_obj_case(x)` if I understand the wrinkle you're worried about
[19:52:16] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[19:52:28] *** Quits: grooverman (~grooverma@177.95.12.14) (Quit: bye)
[19:53:16] *** Joins: grooverman (~grooverma@177.189.89.171)
[19:53:38] <ChrisWarrick> raxor2k: tables without a primary key are very inconvenient to work with in general. (Tables with a multi-column PK aren’t really convenient either.) ORMs typically require a PK column so that they know whether to INSERT or to UPDATE, and to know which DB record should be UPDATE'd
[19:55:15] <gamah> definitely put a pkey in
[19:55:29] <gamah> a good thing is you don't care to have/use the pkey for anything (this is good practice)
[19:55:38] <gamah> but it needs to be on the table so the RDBMS can do it's magic
[19:55:42] *** Quits: VaniaPy (~VaniaPy@adsl-205.176.58.193.tellas.gr) (Quit: Connection closed)
[19:56:24] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[19:56:38] *** Joins: sirquack (~sirquack@2601:643:8680:526:18b0:3cfd:26d7:f50)
[19:59:25] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:59:28] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:59:41] *** Joins: sudomann (~sudomann@73.183.118.9)
[19:59:49] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:59:50] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[19:59:58] <sudomann> This has been running for the last hour: `Building wheel for numpy (setup.py): still running... `
[20:00:29] *** Joins: l4yer (~l4yer@159.48.55.9)
[20:01:39] <jinsun> what OS?
[20:02:04] * SnoopJ suspects raspbian
[20:02:13] <jinsun> usually you just get the prebuilt wheels for numpy, compiling is not required
[20:02:45] <SnoopJ> jinsun, with the caveat that PyPI does not wheels for some platforms, namely anything ARM (piwheels.org is great though)
[20:03:19] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[20:03:19] <jinsun> ah yeah if raspbian then wheels are not there on pypi and it is expected tat compiling will take a lot of time
[20:03:25] <sirquack> is there a way to store JSON data with sqlite3? imo JSON is much easier to work with.
[20:04:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[20:04:28] <grawity> sure, just store it as a string
[20:04:54] <MacGyver> Aren't you using the wrong tool for the job then?
[20:05:11] <grawity> you're not going to get fancy indexing like in json-capable databases though
[20:05:17] <grawity> it'll just be a string
[20:05:25] <MacGyver> Isn't the whole nosql thing supposedly for this exact usecase?
[20:05:36] <LambdaComplex> doesn't sqlite have some functions that operate on json?
[20:05:47] <LambdaComplex> also, postgres has decent json support too
[20:05:48] <jinsun> there is a json1 extension https://www.sqlite.org/json1.html, not sure if it works with the python module
[20:05:48] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[20:05:58] <LambdaComplex> ^probably what i was thinking of
[20:06:45] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[20:06:56] <sudomann> jinsun: MacOS M1 chip
[20:07:02] *** Joins: mat001 (~mat001@213.143.69.121)
[20:07:03] <sudomann> I am installing in docker
[20:07:17] <sirquack> MacGyver: I just need a way to store data permanently, and if there was a json alternative, i would use that.
[20:07:22] <sudomann> with an x86_64 image, emulated by docker
[20:08:15] <jinsun> oh there are macos arm64 wheels on pypi, which I assume are for m1 chips?
[20:08:47] <MacGyver> sirquack: And by "permanently" you mean "it needs to be a file on disk, not a database server"?
[20:09:06] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:09:16] <jinsun> but then now you added docker and x86_64, so no idea what should happen
[20:09:52] <sirquack> MacGyver: i suppose, just something that isnt lost when the program stops
[20:10:23] *** dcaro is now known as dcaro_awya
[20:10:25] <MacGyver> I think we're not in the same mental model here.
[20:10:26] *** dcaro_awya is now known as dcaro_away
[20:10:36] <MacGyver> sirquack: Is there any particular reason you want to store this in sqlite3?
[20:10:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:10:53] <MacGyver> And not, say, literally a text file of json on disk?
[20:11:23] <MacGyver> Because when you start storing literal json as a string in an SQL database, the SQL database gives you nothing of value.
[20:11:33] <sirquack> MacGyver: i dont even want to use sqlite3, i just needed a way to store data and people recommended it
[20:12:21] <jinsun> dunno why they recommend that before just simple .json files
[20:12:47] <MacGyver> sirquack: Just dump json into files on disk then.
[20:12:51] <jinsun> adding sqlitte is unnessary complexity if you just want to save the json to disk
[20:12:52] *** Joins: salparadise (~salparadi@129.146.17.140)
[20:13:10] *** Quits: puzzled_ (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[20:13:42] *** Joins: han-solo (~hanish@user/han-solo)
[20:14:01] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[20:14:09] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:14:16] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[20:14:33] *** Joins: jazzy (~jaziz@user/jaziz)
[20:15:38] <sirquack> alright
[20:16:01] <sudomann> jinsun: I chose to use use an x86_64 image that would get emulated because one of my sub dependencies is dm-tree, which does not have an arm64 whl. So during install it tries to compiles fro source
[20:16:22] <sudomann> and requires other heavy dependencies that i really dont want to deal with :(
[20:19:51] *** Joins: whatsupdoc (~whatsupdo@148.64.18.84)
[20:20:33] <whatsupdoc> This may be a dumb question but why does this not work https://dpaste.org/kyOO
[20:20:41] <whatsupdoc> You can't read global variables inside functions?
[20:21:22] <petaflot> Hello! does anyone happen to know how to set the v-position of pylatex.Foot()? I added a line to it and now the end is beyond the page...
[20:21:32] <dav1d> whatsupdoc, you can read it, but you cant reassign it
[20:22:54] <gitesh> library / package / module names are interchangeable
[20:22:56] <gitesh> ?
[20:23:10] <Julian> gitesh: interchangeable in what sense
[20:23:15] <whatsupdoc> Interesting, ok thanks
[20:23:32] <whatsupdoc> I never saw this before in other programming languages unless I don't remember
[20:23:35] *** Quits: cmagina (sid286142@user/cmagina) ()
[20:23:36] <dav1d> whatsupdoc, you can use the `global` keyword, but that's usually a sign for a bad design
[20:23:42] *** Quits: d3sync (~d3sync@130.43.59.21.dsl.dyn.forthnet.gr) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[20:23:59] <dav1d> global state generally is bad practice
[20:24:19] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:24:40] <whatsupdoc> Ok, yeah, I'm just messing around with Python, trying to learn more nuances. Thanks!
[20:24:43] <gitesh> Julian: PIL is module/library/package ?
[20:24:50] <petaflot> whatsupdoc: if you _really_ need globals, I believe you can add a mutable
[20:25:07] <Julian> gitesh: it's all 3, but the words mean slightly different nuances of what it is
[20:25:19] <whatsupdoc> I probably won't ever need them. You can usually avoid them altogether
[20:25:30] <petaflot> also, since your variable test is global, is makes little sense to return it
[20:25:51] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:26:13] *** Joins: ericzolf (~ericzolf@hsi-kbw-46-223-149-105.hsi.kabel-badenwuerttemberg.de)
[20:26:16] <whatsupdoc> Good point lol
[20:26:39] <dav1d> yeah usually you dont need globals and if you do, they are mostly supposed to be immutable anyways
[20:27:17] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 246 seconds)
[20:28:28] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:28:34] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:29:30] <SnoopJ> sudomann, there isn't a wheel for M1 yet as far as I know
[20:30:03] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[20:30:13] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[20:30:53] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:02] <gitesh> Julian: "Help on module PIL.Image in PIL:"  when it's a class isn't it?
[20:31:10] <gitesh> Julian: is it right or wrong?
[20:31:22] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[20:31:24] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:32:23] <SnoopJ> PIL.Image is the name of a module, PIL.Image.Image is a class within that module. It's a very bad naming system, but we're stuck with it, mostly.
[20:32:23] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[20:32:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:33:04] <gitesh> what is 'Data descriptors'?
[20:33:15] *** Joins: redrum88_ (~redrum88@user/redrum88)
[20:33:23] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:34:43] <QuaternionsRock> gitesh how in-depth of an explanation do you need?
[20:34:52] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:35:20] *** Quits: redrum88 (~redrum88@user/redrum88) (Ping timeout: 265 seconds)
[20:35:21] *** redrum88_ is now known as redrum88
[20:35:22] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[20:35:36] <gitesh> QuaternionsRock: a little bit
[20:36:15] <QuaternionsRock> gitesh In that case I'd say they're best described as a generalization of the concept of properties
[20:36:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:36:53] *** Joins: Akuli (~Akuli@82-203-161-142.bb.dnainternet.fi)
[20:37:22] <QuaternionsRock> A data descriptor is an object (typically an attribute of a class) that has a __get__ method that is automatically called by getattr, a __set__ method that is automatically called by setattr, and a __del__ method that is automatically called by del
[20:37:31] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:37:58] <QuaternionsRock> Although it's worth noting that descriptors don't necessarily need all three of those methods
[20:38:08] <QuaternionsRock> Using it you can create read-only, write-only, etc.-only attributes
[20:38:28] <QuaternionsRock> There is a much more in-depth explanation in the python docs but that's the gist
[20:38:45] <gitesh> Thanks
[20:38:57] *** Joins: fikran (~fikran@user/fikran)
[20:39:34] *** Quits: emerent (~quassel@p200300cd5748557bba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:39:46] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[20:39:47] *** Joins: emerent (~quassel@p200300cd57485550ba27ebfffed28a59.dip0.t-ipconnect.de)
[20:40:02] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[20:40:19] <whatsupdoc> Is python pass by value by default or pass by reference? Or does it depend on the data type?
[20:40:33] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[20:42:09] <SnoopJ> whatsupdoc, it's neither: https://jamesgerity.com/backup/call-by-object.htm
[20:42:19] <SnoopJ> it's closer to by-reference, though
[20:42:42] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[20:42:42] <whatsupdoc> I wanted to read that website, but I can't access it, blocked at work :/
[20:42:44] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[20:43:22] <QuaternionsRock> whatsupdoc theoretically speaking it is pass-by-reference
[20:43:34] <SnoopJ> If your work does not block archive.org, the original is available on the wayback machine: https://web.archive.org/web/*/https://effbot.org/zone/call-by-object.htm
[20:43:50] <SnoopJ> QuaternionsRock, that write-up's description "call by object reference" is I think the most accurate
[20:43:59] <SnoopJ> because names are what is handed around
[20:44:23] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 265 seconds)
[20:44:31] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[20:44:44] <SnoopJ> well, syntactically. the actual machinery in CPython is "push stuff onto the stack, then CALL_FUNCTION"
[20:45:02] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[20:46:04] <whatsupdoc> Ok thanks I will read it :)
[20:46:59] <QuaternionsRock> SnoopJ the article you linked says "it is not call by reference because access is not given
[20:46:59] <QuaternionsRock>  to the variables of the caller, but merely to certain objects."
[20:47:03] <QuaternionsRock> what exactly does this mean?
[20:48:07] <nedbat> QuaternionsRock: it means there is no way to write f so that this happens: x = 1; f(x); assert x == 2
[20:48:25] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 252 seconds)
[20:48:56] <QuaternionsRock> Well that would essentially be pass-by-pointer
[20:49:08] <SnoopJ> unless it's doing `global x; x = 2` in there, which would have nothing to do with the passed-in thingy
[20:49:10] <nedbat> QuaternionsRock: it's what C++ calls pass-by-reference
[20:49:12] <dav1d> you don't get a reference to the variable of the caller, you share the object
[20:49:41] <SnoopJ> right, the object itself is pushed onto the stack (in CPython), and when the function begins, it will pop the object and bind it to a name
[20:49:45] <QuaternionsRock> If that is the only distinction then I would argue pass-by-reference is the correct description. Java is also pass-by-reference except for primitives and that is equally impossible
[20:49:59] *** Quits: roxfan2 (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[20:50:04] <Wooble> SnoopJ: doesn't work in the general case where the call it made in another function, either. Inspecting the call stack and doing horrifying things, OTOH... :)
[20:50:06] <SnoopJ> You can make the argument, but it does seem rather like one that requires you to play semantic games that risk confusion with the meaning of this term in other languages
[20:50:10] <QuaternionsRock> C++ also describes it as pass-by-reference as SnoopJ points out
[20:50:14] <nedbat> QuaternionsRock: right, different languages use the same words for different things sometimes, or not, and so it can be confusing.
[20:50:23] <gitesh> how to define readonly property?
[20:50:28] <SnoopJ> QuaternionsRock, except that what C++ does with references is *totally different*
[20:50:29] <gitesh> * how is
[20:50:33] <dav1d> QuaternionsRock, well java also isnt pass by reference technically, it's the same concept of pass-by-shared-object
[20:50:55] <ali1234> def f(x): ctypes.memmove(id(x), id(2), 24)
[20:51:20] <nedbat> QuaternionsRock: if we call C++ and Python both "pass by reference" then we don't have a word to capture that C++ can implement f but Python can't.
[20:51:27] <dav1d> gitesh, you don't, but you can not document it or put a warning, you can also just define a getter (or @property without a setter)
[20:51:33] <SnoopJ> ali1234, it is possible to write not-Python when you write not-Python in Python, yes
[20:51:46] <SnoopJ> (also, you should probably not just assume you know the size)
[20:51:47] <QuaternionsRock> ...How can one implement that in C++ with pass-by-reference?
[20:51:54] <gitesh> dav1d: thanks
[20:51:58] <ali1234> i should probably never ever do this
[20:52:06] <QuaternionsRock> Wow do I just not actually understand how C++ works lol
[20:52:15] <SnoopJ> the _committee_ doesn't, honestly
[20:52:32] <QuaternionsRock> I've been programming in it for years and I thought that was the sole real distinction between the capabilities of pass-by-reference and pass-by-pointer
[20:52:47] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[20:52:51] <nedbat> QuaternionsRock: fwiw, i've not heard "pass-by-pointer"
[20:53:00] <nedbat> QuaternionsRock: c++:   void MyIncr (float& x) { ++x; }
[20:53:09] <SnoopJ> well, C++ brings an extra level of crazy to it because "reference" has even more layers of meaning. In the context of this discussion, a pointer is a reference.
[20:53:25] <QuaternionsRock> Hmmm
[20:53:31] <Wooble> yeah, the opposite is usually "pass by value"; pass-by-reference involves pointers, and changing the value at a specific memory location.
[20:53:37] <nedbat> QuaternionsRock: then you can do:  float x = 1.0;  MyIncr(x); assert x == 2.0;
[20:53:53] <QuaternionsRock> my understanding was that you can mutate but not overwrite a reference, whereas you can do both with a pointer
[20:53:55] <SnoopJ> C++'s reference syntax exists in part because trying to divide the world up into these two camps is pretty awful when you actually start to write code
[20:53:56] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[20:53:57] <whatsupdoc> Python seems like pass by reference
[20:54:16] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[20:54:18] <nedbat> whatsupdoc: the big question that everyone skips over: "reference to what?"
[20:54:29] <whatsupdoc> An object
[20:54:29] <Wooble> "reference to a PyObject"? :)
[20:54:36] <SnoopJ> what's a PyObject? ;)
[20:54:36] <whatsupdoc> Idk
[20:54:47] <nedbat> whatsupdoc: other languages say "pass by reference" and mean "reference to a variable"
[20:54:56] <QuaternionsRock> Also nedbat I had no idea that worked lol
[20:55:01] <SnoopJ> whatsupdoc, it suffices to say that if you conclude that it's pass by reference, you will be very confused when you talk to people from other languages for whom this phrase means something entirely different.
[20:55:06] <whatsupdoc> But everything is an object in python
[20:55:15] <QuaternionsRock> Although to be fair i'm not sure how the increment operator is implemented
[20:55:19] <SnoopJ> It's a lot simpler to acknowledge that Python's calling model is pretty idiosyncratic (that article does review some of its antecedents, though)
[20:55:25] <Wooble> I mean in *python* terms what you're passing is a reference to an object, but "pass by reference" as a term of art is older than python and stealing it is confusing.
[20:55:42] <SnoopJ> Wooble, is it really fair to say pushing the object on the stack is passing a reference, though?
[20:56:21] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 245 seconds)
[20:56:21] <SnoopJ> I mean yes in CPython we're often handing around PyObject* but it's not impossible to imagine a (worse?) version of the runtime that doesn't do it that way
[20:56:23] <whatsupdoc> The more I learn about Python, the more I like it
[20:56:34] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 268 seconds)
[20:56:37] <SnoopJ> but this is why I like "by object reference"
[20:56:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:56:43] <QuaternionsRock> I think people have vastly differing views of what a reference vs. value is
[20:56:56] <SnoopJ> QuaternionsRock, yes, and introducing Python's quirks into the conversation distorts and already confusing landscape
[20:57:01] <QuaternionsRock> Yeah totally
[20:57:02] <dav1d> whatsupdoc, that's usually how it goes :D
[20:57:20] <dav1d> reference is already confusing in C
[20:57:28] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[20:57:30] <dav1d> *C/C++ just by terminology
[20:57:31] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[20:57:33] <nedbat> if people always said what it was a reference *to*, we wouldn't have this problem.
[20:57:46] <nedbat> c++ has "pass by reference to variable" and Python has "pass by reference to value"
[20:57:57] <QuaternionsRock> You can create a class that is a completely transparent container for an int
[20:58:07] *** Joins: emf (~emf@2620:10d:c090:400::5:61e3)
[20:58:12] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:58:23] <dav1d> nedbat, more like "pass reference to memory holding value"
[20:58:24] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:58:28] <SnoopJ> or not-memory
[20:58:34] <Wooble> ...and you don't have to because int already is that :)
[20:58:36] <QuaternionsRock> if you pass said container to a function, it's still ~kind of~ pass by value because the container itself is a value that is copied
[20:58:39] <QuaternionsRock> but the field is not
[20:58:47] <SnoopJ> it really can't be overstated how complicated the idea of "reference" is in C++
[20:58:48] <ali1234> the reason you can't write f in python is not because of some difference in the calling convention. it is because = works differently in python than it does in C
[20:59:10] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:22ca:3921:7462:247b)
[20:59:10] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[20:59:11] <dav1d> SnoopJ, reference or pointer?
[20:59:15] <SnoopJ> dav1d, reference
[20:59:17] <dav1d> yeah
[20:59:25] <dav1d> pointer is still "simple", reference is the mess
[20:59:43] <SnoopJ> lvalue, rvalue, prvalue, xvalue...
[21:00:01] <SnoopJ> you very quickly lose the false sense of security this dichotomy suggests
[21:00:01] <Wooble> ali1234: and this is why bit.ly/pynames1 is the definitive answer to this question, and it's all about assignment and only mentions the pass-by-reference question as the motivation at the very end.
[21:00:01] <dav1d> that's why I love Rust
[21:00:18] <QuaternionsRock> Okay yeah wow I'm doing some testing and refernces work nothing like I thought they did in C++
[21:00:29] <QuaternionsRock> I thought they were proper references, not just disguised pointers lmao
[21:00:41] <nedbat> QuaternionsRock: what does "proper reference" mean?
[21:00:48] <SnoopJ> QuaternionsRock, it's still misleading to think of them as "disguised pointers" because an implementation does not *have* to do it this way.
[21:01:01] *** Quits: ericzolf (~ericzolf@hsi-kbw-46-223-149-105.hsi.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[21:01:16] <SnoopJ> pynames1 is also good reading that is related to this subject; Python doesn't have the same notion of 'variables' that many other languages (particularly in C's family tree) do
[21:01:57] <QuaternionsRock> In my mind, the definition of a "reference" is midway between a "value" and a "pointer". With a value, you cannot mutate the original object; with a reference, you can mutate the original object *but not replace it*; with a pointer, you can both mutate *and* replace it
[21:02:19] *** jazzy is now known as jazz-o-lantern
[21:02:57] <bjs> QuaternionsRock: the biggest difference is in Python when you call a function or assign a name,  no values get copied.
[21:03:30] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[21:03:49] <sveinse> Are there any (elegant) ways to await something in a class __init__ ?
[21:03:53] <bjs> sveinse: no
[21:04:03] <sveinse> hah, that came quickly. Thanks.
[21:04:16] <bjs> sveinse: I would typically make a @classmethod and pass all the resources into __init__ after awaiting
[21:04:36] <hexnewbie> bjs: Well, that *is* elegant. 😛
[21:04:40] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[21:04:47] <bjs> sveinse: like `@classmethod async def from_async_thing(cls): ... do foo = await thing; return cls(foo)`  then you can go `await Cls.from_async_thing()`
[21:05:12] <SnoopJ> QuaternionsRock, to put it very simply, Python has neither of these concepts, except inasmuch as names refer to objects. Calling them "references" is going to cause headaches when this terminology runs into pretty much any other language, because of the details in https://bit.ly/pynames1
[21:05:16] <sveinse> bjs: jup, I got it. And yes, this sounds elegant enough
[21:05:35] <SnoopJ> sorry: names *might* refer to objects*
[21:05:56] <QuaternionsRock> or you could lazy async
[21:06:01] <SnoopJ> (but might not, very much unlike how references work in these other languages!)
[21:06:01] *** Joins: sudomann (~sudomann@73.183.118.9)
[21:06:08] <bjs> QuaternionsRock: who are you replying to?
[21:07:45] <QuaternionsRock> sveinse
[21:08:06] <bjs> QuaternionsRock: what is "lazy async"?
[21:08:10] *** Joins: kristine86 (~kristine8@2603-7080-af03-588a-4726-49dc-6df2-85da.res6.spectrum.com)
[21:08:27] <sveinse> QuaternionsRock: not entirely sure what you mean by lazy async thou? Return a coroutine?
[21:08:53] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Quit: Leaving)
[21:08:55] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[21:08:55] <hexnewbie> One potentially inelegant way to do it would be to make the object *itself* awaitable
[21:09:37] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[21:09:55] <hexnewbie> Potentially, because there's probably like 3% of cases where that actually makes sense
[21:10:07] <kristine86> How do you do pytest for a class that uses arg param and invokes several other modules to do the job? I was thinking maybe I can just check in test if the class raises error otherwise it passed the test. Suggestions?
[21:10:44] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[21:11:03] <sveinse> QuaternionsRock: Well, the naïve way I had in mind were `a = A(); await a.init();`, but bjs method of doing a classmethod by `a = await A.factory()` is more elegant
[21:11:05] <SnoopJ> kristine86, that's a pretty broad question, can you tell us a little bit more about the specific class you're interested in testing?
[21:11:35] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 268 seconds)
[21:11:45] <meejah> sveinse: yeah, an async factory method is a common init pattern for async things that need work to set up
[21:11:58] *** Joins: arinov (~arinov@213.194.126.155)
[21:12:35] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Quit: This computer has gone to sleep)
[21:15:38] <jinsun> sveinse: maybe QuaternionsRock meant this https://github.com/jqqqqqqqqqq/python-lazy-async
[21:16:11] <ali1234> is there a way to introspect all the names the current interpreter instance knows about?
[21:16:21] <graingert[m]> <kristine86> "How do you do pytest for a class..." <- What do you mean by uses arg param?
[21:17:14] <Julian> ali1234: what will you use it for? or what's making you want to do so?
[21:17:21] <Julian> ali1234: keep in mind the answer may be infinite
[21:17:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:17:43] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[21:18:01] <kristine86> SnoopJ lets say the class A's init method takes args(contains path to data files) from the main file. Then sends path to another python file. They then process and display the output.
[21:18:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:18:06] <ali1234> just for fun
[21:19:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:19:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:19:59] <ali1234> i am imagining something like iterate the current call stack and call locals() on each level
[21:20:03] <graingert[m]> ali1234: You can dig it out of the gc
[21:20:09] <graingert[m]> Eg pyobjgraph
[21:20:19] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[21:21:04] <ali1234> was just thinking about an object that knows all of its names again
[21:22:20] *** Joins: bambams (~bambams@user/bambams)
[21:22:27] <ali1234> ie an object that can do this: x = IGBMN(); y = x; x.names() -> ['x', 'y']
[21:22:40] <KirkMcDonald> ali1234: One place to start is gc.get_referrers()
[21:22:46] *** Parts: bambams (~bambams@user/bambams) ()
[21:23:05] <ali1234> that would be logical, yes
[21:23:08] *** Quits: EGH (~EGH@185.25.195.104) (Quit: ZNC - https://znc.in)
[21:23:24] *** Joins: bambams (~bambams@user/bambams)
[21:24:18] <KirkMcDonald> ali1234: But, you can get a locals() dict off of a frame object.
[21:24:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[21:25:11] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[21:25:46] *** Quits: bfortifi- (~bfortifie@user/bfortified) (Ping timeout: 252 seconds)
[21:25:55] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:26:37] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:26:43] *** Joins: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[21:26:53] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:27:00] *** Quits: ub (~Thunderbi@178.115.41.191.wireless.dyn.drei.com) (Remote host closed the connection)
[21:28:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:28:42] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[21:28:45] *** Joins: EGH (~EGH@185.25.195.104)
[21:29:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:29:30] *** Quits: emf (~emf@2620:10d:c090:400::5:61e3) (Ping timeout: 260 seconds)
[21:29:42] <nedbat> ali1234: you want to find names that aren't in your current scope?
[21:29:59] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:30:28] *** Joins: brianward (~brianward@174-21-4-6.tukw.qwest.net)
[21:32:06] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Client Quit)
[21:33:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[21:34:09] <SnoopJ> kristine86, sorry, that doesn't really clarify the task for me.
[21:35:19] *** Joins: Fiji_ (~Fiji@user/fiji)
[21:36:13] *** Quits: saroy (~Sandipan@45.249.73.218) (Ping timeout: 252 seconds)
[21:36:25] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[21:37:10] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[21:37:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[21:37:27] *** Quits: byte4byte (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[21:37:55] *** Quits: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:38:07] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[21:38:57] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:39:00] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 265 seconds)
[21:39:47] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 240 seconds)
[21:39:53] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[21:39:54] *** Joins: arinov (~arinov@188.58.4.195)
[21:39:56] *** Gustavo6046_ is now known as Gustavo6046
[21:40:24] <shodan45> I'm using zeep to interface with a poorly made SOAP service - it's missing some data types - is there a way to sort of monkey patch them in?
[21:40:37] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[21:41:05] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Quit: Leaving)
[21:41:38] *** Quits: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Ping timeout: 260 seconds)
[21:42:36] *** Joins: bfortified (~bfortifie@user/bfortified)
[21:42:40] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:42:49] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[21:43:18] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[21:43:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:43:56] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:44:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[21:44:51] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[21:44:53] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:45:02] *** Joins: emf (~emf@2620:10d:c090:400::5:8ff4)
[21:46:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:46:56] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:47:42] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 260 seconds)
[21:48:55] <graingert[m]> <shodan45> "I'm using zeep to interface with..." <- You can just write your own SOAP schema right?
[21:50:58] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[21:52:01] *** Awoobis is now known as `Awoobis`
[21:52:05] *** Joins: node1 (~node1@user/node1)
[21:52:17] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 268 seconds)
[21:52:17] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Ping timeout: 268 seconds)
[21:52:32] <shodan45> graingert[m]: hm I suppose so?
[21:52:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:52:36] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[21:53:04] <graingert[m]> Just copy paste the official one and patch it
[21:53:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:53:55] *** Joins: Auron (~Auron956@user/auron)
[21:54:13] <pr3d4t0r> Greetings.  Is there a way to request to override a package name on PyPI?  We have a short name for a package we want to upload, there's a conflict with a package name from a user who abandoned it in 2016, and dropped their pypi.org account.
[21:54:34] <pr3d4t0r> Thanks in advance.
[21:54:40] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[21:55:10] *** Joins: ub (~Thunderbi@178.115.41.191.wireless.dyn.drei.com)
[21:55:51] *** Joins: paul424 (~tom@ip-5-172-236-26.multi.internet.cyfrowypolsat.pl)
[21:57:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[22:00:56] <SnoopJ> pr3d4t0r, https://pypi.org/help/#project-name-claim
[22:01:29] * Roey structurally pattern matches all the peons in teh channel..
[22:01:36] *** Joins: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de)
[22:01:39] <pr3d4t0r> SnoopJ: Thanks.
[22:01:41] * SnoopJ is matched, as a peon
[22:02:20] <pr3d4t0r> SnoopJ: I found the author on GitHub after some sleuthing, I'll also try a friendly "may I reclaim this project name?" first.
[22:02:55] <SnoopJ> pr3d4t0r, sounds good
[22:02:59] *** Quits: kristine86 (~kristine8@2603-7080-af03-588a-4726-49dc-6df2-85da.res6.spectrum.com) (Quit: Client closed)
[22:03:04] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[22:03:44] *** Quits: whatsupdoc (~whatsupdo@148.64.18.84) (Ping timeout: 256 seconds)
[22:05:59] *** Quits: ub (~Thunderbi@178.115.41.191.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[22:06:10] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:07:27] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:09:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:09:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:10:26] *** `Awoobis` is now known as Awoobis
[22:10:38] *** Joins: andyewen (~andyewen@31.124.173.135)
[22:12:04] *** Joins: Nspace (~Nspace@user/nspace)
[22:13:54] *** Quits: ArchDave2 (~ArchDave@024-217-066-196.res.spectrum.com) (Quit: Leaving)
[22:15:10] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[22:15:29] <rakoon> deniska: i found out why asyncio.as_completed was faster than awaiting... Cause of the httpx limits I was putting. Without limits as_completed and creating tasks is faster!
[22:16:54] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:16:55] *** Joins: sudomann (~sudomann@73.183.118.9)
[22:17:35] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[22:18:49] <rakoon> Im not sure how many keep alive connections to put :/ I have read that i should use 1 per host. Httpx defaults to 20, in order to respect the server shall i limit it to 1?
[22:20:44] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Quit: RabidToaster)
[22:20:49] *** Quits: sirquack (~sirquack@2601:643:8680:526:18b0:3cfd:26d7:f50) (Remote host closed the connection)
[22:21:04] <ali1234> where is class 'frame' defined? where can i import it from?
[22:21:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[22:21:29] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Client Quit)
[22:21:50] <KirkMcDonald> ali1234: There isn't really a reason to refer to the frame type directly.
[22:22:01] <ali1234> i see. i want inspect.isframe()
[22:22:11] <KirkMcDonald> ali1234: But there is types.FrameType
[22:22:39] <KirkMcDonald> In what context is it unclear whether you have a frame object?
[22:22:50] <ali1234> gc.get_referrers()
[22:22:56] <KirkMcDonald> Ah, true.
[22:23:53] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[22:23:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:24:29] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:24:32] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:24:45] *** Joins: puzzled_ (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[22:24:45] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 268 seconds)
[22:24:49] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[22:25:05] *** Joins: whatsupdoc (~whatsupdo@148.64.18.9)
[22:25:25] *** Joins: Nspace (~Nspace@user/nspace)
[22:25:30] *** Joins: ArchDave2 (~ArchDave@024-217-066-196.res.spectrum.com)
[22:25:43] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (Ping timeout: 252 seconds)
[22:27:19] <ali1234> https://bpa.st/WPPQ
[22:27:34] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[22:27:59] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:28:55] *** Joins: tg_ (~tg@rockylinux/infra/tg)
[22:29:35] <jmiehe> still pydantic. I would like to create Models from a str. Is that possible? https://bpa.st/Y6NQ
[22:30:35] <jmiehe> btw, ignore the method name "check_for_frogs", it doesn't actually check for frogs. I just needed anything that's not "validate".
[22:31:00] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:31:31] <ali1234> nedbat: i was trying to make the class that knows what names it is bound to. like this: https://bpa.st/WPPQ
[22:31:41] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 265 seconds)
[22:31:41] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[22:32:30] <jinsun> jmiehe: https://pydantic-docs.helpmanual.io/usage/models/#dynamic-model-creation ?
[22:33:12] <nedbat> ali1234: what does IGBMN stand for?
[22:33:15] *** Quits: whatsupdoc (~whatsupdo@148.64.18.9) (Quit: Client closed)
[22:33:19] <ali1234> "I Go By Many Names"
[22:33:48] <nedbat> ali1234: I see.  what happens with:  a_list = [IGBMN()] ?
[22:34:09] <ali1234> nothing cos it isn't bound to a name
[22:34:14] <ali1234> hopefully anyway
[22:34:47] *** Quits: ArchDave2 (~ArchDave@024-217-066-196.res.spectrum.com) (Quit: Leaving)
[22:35:05] <nedbat> ali1234: i didn't know if you wanted to find those "names" also
[22:35:27] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[22:35:31] <jmiehe> jinsun: No no, I want to create a static model from a string instead of a dict
[22:35:33] <ali1234> no, only when you have direct assignment
[22:35:40] <ali1234> this is just a bit of fun anyway
[22:35:52] <jmiehe> jinsun: or rather "initialize", not "create"
[22:36:41] <jinsun> jmiehe: oh so you want to generate py files with models using json input?
[22:37:22] <jinsun> jmiehe: https://github.com/koxudaxi/datamodel-code-generator
[22:37:48] <jmiehe> jinsun: No, i want this code: https://bpa.st/Y6NQ to create three instances of "Thing" instead of erroring out on the third one because that's a str.
[22:38:54] *** Joins: ArchDave2 (~ArchDave2@024-217-066-196.res.spectrum.com)
[22:39:30] <jinsun> ok some very specific thing, your descriptions were too general so I was not even reading the code :D
[22:39:41] *** Joins: cth (~Cthulchu@193.194.107.250)
[22:40:37] *** Joins: kurfen (~kurfen@195.216.219.90)
[22:40:37] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[22:40:37] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:41:29] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:31] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[22:41:56] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:41:56] <jmiehe> jinsun: I accidentally named the method "validate" before, overriding the BaseModel.validate, which somehow suppressed the error, but it did not create `Thing` instances then
[22:42:05] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[22:42:48] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[22:43:16] <jmiehe> jinsun: So I suspect overriding the validate method could work, but I doubt that's the way to go
[22:43:17] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[22:44:06] *** Joins: CoolerY (~CoolerX@user/coolerx)
[22:44:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[22:44:50] <jinsun> BaseModel's init takes keyword arguments only, so you must have dicts, you can write your own init for Thing that calls super().__init__ for dicts
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:06] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 245 seconds)
[22:45:31] *** Gustavo6046_ is now known as Gustavo6046
[22:45:55] <sudomann> I was having trouble earlier with pip install hanging
[22:45:59] <sudomann> pip install -r requirements.txt --no-cache-dir
[22:45:59] *** Joins: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com)
[22:46:05] *** Quits: paul424 (~tom@ip-5-172-236-26.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[22:46:13] <sudomann> I removed the --no-cache-dir and it installed successfully
[22:46:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[22:46:29] <sudomann> Any theories on why it works without? Low memory?
[22:46:32] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[22:46:41] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[22:47:29] <SnoopJ> sudomann, what was it doing when it hung?
[22:47:34] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[22:47:54] *** Joins: sedeki (~textual@user/sedeki)
[22:48:07] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 265 seconds)
[22:48:18] *** Joins: fikran (~fikran@user/fikran)
[22:49:02] <jinsun> jmiehe: hmm no overriding init won't do, validtate will still throw, maybe overriding validate is the way
[22:49:41] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[22:49:49] <jinsun> or just give up and use dicts only
[22:50:08] <sudomann> SnoopJ: `Building wheel for numpy (setup.py): still running...   `
[22:50:42] <jmiehe> jinsun: at that point, I'll root for using dicts only ;)
[22:50:49] <braxas> can I somehow check jinja templates with mypy?
[22:51:01] <SnoopJ> sudomann, did you change your pip configuration in some way? Maybe it saw something it needed to build in the cache, but without the cache dir, it was able to take advantage of some new source that provides a wheel?
[22:51:57] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[22:52:38] <sudomann> Nope, SnoopJ these are the commands that were run: https://bpa.st/Z7NA - I dont know if its possible for any of those to make such a change
[22:52:53] <jmiehe> jinsun: I'm using this to parse a config file, so I'll just forbid plain strings at that point. A little less syntax sugar never hurt anyone.
[22:52:54] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[22:53:02] *** Quits: QuaternionsRock (~Quaternio@76.191.39.82) (Ping timeout: 256 seconds)
[22:53:46] *** Quits: gitly (~gitly@148.252.129.189) (Ping timeout: 252 seconds)
[22:53:51] <SnoopJ> sudomann, a pip install can change the pip configuration, but I've only seen that one time and it was a package dedicated just to doing that
[22:54:51] <sudomann> oh man, I guess I'll just deal with the fatter image rather than dive into this
[22:55:02] <sudomann> Already lost so much time before I found this workaround
[22:55:21] <SnoopJ> you can just delete the cache when you're done
[22:55:27] *** Joins: cth (~Cthulchu@193.194.107.250)
[22:55:28] *** Joins: gitly (~gitly@185.69.144.227)
[22:55:34] <sudomann> whats the command?
[22:55:42] *** Parts: Urchin[emacs] (~user@user/urchin) (ERC (IRC client for Emacs 26.1))
[22:56:10] <sudomann> from the answers on SO it appears it varies...
[22:56:19] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[22:56:22] *** Quits: matrixise (~weechat@python/psf/matrixise) (Quit: WeeChat 3.1)
[22:56:38] *** Joins: aphysically (~aphysical@user/aphysically)
[22:56:57] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[22:57:18] *** Joins: matrixise (~weechat@python/psf/matrixise)
[22:57:26] <SnoopJ> `pip cache purge` or just `rm -fr path/to/pip/cache`
[22:57:27] *** Joins: jazzy (~jaziz@user/jaziz)
[22:57:39] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[22:58:09] <sudomann> thanks I'll rebuild with that and see!
[22:58:42] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[22:58:45] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[22:58:50] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[22:58:54] *** Joins: devios (~devios@71-218-129-148.hlrn.qwest.net)
[22:59:10] <SnoopJ> you can also just tell pip where its cache lives for any invocation, which is sometimes useful
[23:01:01] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[23:01:12] <devios> Would someone please explain to me what this line means/does?: https://bpa.st/FWCA
[23:01:18] *** Quits: baloona (~baloona@mail.baloona.de) (Quit: WeeChat 2.3)
[23:01:54] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[23:02:05] <SnoopJ> devios, it performs two assignments to the names `factors` and `n` by "unpacking" the right hand side (which is a tuple of two objects, the empty list and the integer 2)
[23:02:17] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Remote host closed the connection)
[23:02:40] *** Joins: CoolerY (~CoolerX@user/coolerx)
[23:02:52] *** Joins: p-i- (~Ohmu@223.206.71.4)
[23:02:55] *** Joins: baloona (~baloona@mail.baloona.de)
[23:03:46] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 260 seconds)
[23:05:51] *** Joins: potatosal (~salad@user/potatosal)
[23:06:13] <devios> SnoopJ, so same as two lines that would be factors = [] and n = 2?
[23:06:13] *** Joins: cth (~Cthulchu@193.194.107.250)
[23:07:15] *** ArchDave2 is now known as ArchDave2_
[23:07:19] <SnoopJ> devios, yep, except that it gets it done on one line, which is sometimes useful when a name appeares on both sides (example: `a = 42; b = -1; print(a); a, b = b, a; print(a)` will print 42 and -1 because it swaps the names)
[23:07:20] *** Joins: p-i-_ (~Ohmu@223.206.71.4)
[23:07:25] <dav1d> devios, it's equal to: `x = ([], 2); factors, n = x`
[23:07:31] *** Quits: p-i- (~Ohmu@223.206.71.4) (Ping timeout: 252 seconds)
[23:07:44] <dav1d> maybe less confusing
[23:08:37] *** ArchDave2_ is now known as ArchDave2__
[23:08:42] <SnoopJ> hrm, I don't think the official tutorial mentions unpacking assignment anywhere. That seems like an oversight.
[23:09:10] <devios> SnoopJ, dav1d: ouch. my brain hurts now. I think I got it but will do some playing around to make sure.  thanks for the help!
[23:09:13] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[23:09:19] *** ArchDave2__ is now known as ArchDave2
[23:09:20] <potatosal> how can I use two regexs in order to match one or the other? in re.search() ie. They are "\.Ep(\d+)\." and ".*E(\d+).*"
[23:09:46] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Ping timeout: 252 seconds)
[23:09:48] <SnoopJ> devios, there's really two things going on there as dav1d points out: a tuple being created, and then 'unpacking' that tuple.
[23:10:12] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:e17a:bb13:3621:8c56)
[23:10:30] <dav1d>  potatosal: regex = f"({re1})|({re2})" could work, you can combine multiple regexes with an or
[23:10:36] <SnoopJ> devios, the tutorial very briefly discuss both of these ideas here, but we can help with questions if it doesn't make sense after some play-around: https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
[23:10:37] <Wooble> SnoopJ: oddly, it's mentioned in the section on match/case
[23:10:49] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[23:11:02] <potatosal> dav1d: great, thanks
[23:11:05] <SnoopJ> Wooble, yea, the only docs places that language is used heh
[23:11:05] *** Quits: CoolerY (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[23:11:09] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[23:11:15] <dav1d> Rust has a RegexSet for that :(
[23:11:41] <Wooble> "you can use it like this thing we didn't tell you about"
[23:11:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[23:11:46] *** Quits: kurfen (~kurfen@195.216.219.90) (Ping timeout: 245 seconds)
[23:11:48] <SnoopJ> the `Scanner` class in this blog post is also a clever (but quite advanced) trick: http://lucumr.pocoo.org/2015/11/18/pythons-hidden-re-gems/
[23:12:02] *** Joins: CoolerY (~CoolerX@user/coolerx)
[23:14:25] <SnoopJ> Wooble, hopefully the documentation workgroup takes a good pass through the whole tutorial
[23:14:46] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[23:15:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:15:58] <Wooble> I could have sworn there was something in the tutorial where they pointed out how much more elegant x, y = y, x than languages where you need a temp variable to swap things
[23:16:02] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[23:16:29] <SnoopJ> I know one of Raymond Hettinger's talks covers this usage in the context of updating a simple iterative solver or somesuch
[23:18:00] <SnoopJ> oh, and the introduction briefly shows it off too (cc devios): https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming
[23:18:08] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[23:18:41] <devios> SnoopJ, thanks!
[23:18:44] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[23:18:52] *** Joins: emf_ (~emf@2620:10d:c090:400::5:fe52)
[23:19:13] <SnoopJ> sure thing :)
[23:19:24] <Wooble> ah, "multiple assignment". I knew it was there, but I guess the poking at other langauges was elsewhere :)
[23:19:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:20:06] *** Quits: LuKaRo_ (~LuKaRo@p4fc32cd3.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[23:20:56] *** Quits: emf (~emf@2620:10d:c090:400::5:8ff4) (Ping timeout: 245 seconds)
[23:20:58] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[23:21:09] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:21:20] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:22:15] *** Joins: LuKaRo (~LuKaRo@p4fc3226e.dip0.t-ipconnect.de)
[23:22:56] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:23:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[23:24:09] *** Quits: NOTevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:09] *** Quits: beanzilla (beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:44] *** Joins: beanzilla (beanzilla@user/beanzilla)
[23:24:46] *** Quits: beanzilla (beanzilla@user/beanzilla) (Remote host closed the connection)
[23:25:22] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[23:25:24] *** Joins: notevil (~notevil@user/notevil)
[23:25:50] *** Gustavo6046_ is now known as Gustavo6046
[23:25:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 245 seconds)
[23:27:09] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[23:27:26] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[23:27:34] *** Joins: Subsentient (~WhiteRat@universe2.us)
[23:28:10] <Subsentient> Okay how in the hell do I get Python to load a C extension on macOS Big Sur? I come from Linux and I'm trying to port over to macOS, and I've turned off Gatekeeper so it shouldn't care about signatures.
[23:28:31] <Subsentient> And what's the exact name schema to expect? If the module is durr, is it durr.dylib?
[23:33:03] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[23:33:46] <nedbat> Subsentient: isn't it .so on Mac?
[23:35:00] *** Quits: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 265 seconds)
[23:35:15] *** Joins: jaykelly450 (~vagrant@c-73-82-49-38.hsd1.ga.comcast.net)
[23:35:21] <CrtxReavr> You know, the more I use python, the sillier I think it is that sys and os are separate modules.
[23:35:28] <SnoopJ> CrtxReavr, why?
[23:36:00] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[23:36:03] *** Joins: newpy (~newpy@2601:280:4381:1390:3c15:3b7a:27c7:466)
[23:36:25] *** Quits: [2ge] (~2ge]@84.245.121.119) (Quit: Client closed)
[23:37:21] <newpy> I have two pandas dataframes, trying to do df1[df2.Date], getting a KeyError: "None of [Index([...*dates*...])]"
[23:37:54] *** Quits: devios (~devios@71-218-129-148.hlrn.qwest.net) (Quit: Leaving)
[23:38:18] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:38:55] <SnoopJ> newpy, is df1 indexed in a way that is compatible with the dtype of df2.Date?
[23:39:06] <SnoopJ> (seeing the code and/or complete error report would probably help)
[23:40:20] *** Joins: zebrag (~chris@user/zebrag)
[23:40:47] <SnoopJ> Subsentient, I think it should just be .so on Mac as nedbat says, the only .dylib stuff I'm aware of is when loading a library with ctypes
[23:41:03] *** Joins: jazzy2 (~jaziz@user/jaziz)
[23:41:05] <newpy> SnoopJ, when I print head() of df1 I see a column with dates (and no integer row #'s)
[23:41:12] *** Parts: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net) (Leaving)
[23:41:37] <SnoopJ> newpy, what are `df1.index` and `df2.Date.dtype` ?
[23:42:03] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[23:42:15] *** Quits: puzzled_ (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[23:42:23] <newpy> SnoopJ, ah df1.index is DatetimeIndex but df2.Date.dtype is Object
[23:42:37] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:43:24] * SnoopJ almost wishes pandas had a way to forbid using the object dtype entirely
[23:43:49] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[23:45:31] *** Quits: arinov (~arinov@188.58.4.195) (Ping timeout: 245 seconds)
[23:45:38] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[23:46:28] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[23:46:52] <newpy> SnoopJ, I just used pd.read_csv(), didn't think to check
[23:50:10] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[23:50:22] *** Joins: whatsupdoc (~whatsupdo@148.64.20.39)
[23:50:37] *** Joins: moto (~moto@user/moto)
[23:52:07] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 252 seconds)
[23:52:15] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[23:54:10] *** Quits: andyewen (~andyewen@31.124.173.135) (Quit: Leaving)
[23:55:19] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:55:31] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[23:55:31] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[23:55:54] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:56:06] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[23:57:27] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[23:57:28] *** Joins: notevil (~notevil@user/notevil)
[23:58:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[23:58:10] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Quit: WeeChat 3.3)
[23:58:41] *** Joins: Nspace (~Nspace@user/nspace)
[23:59:16] <transhumanist> what do you call this gasMass = {'MassCO2': 0.123', 'MassO2':  0.456} where you select gasMass.keys() so I can find a case where its implemented, so I can learn by example. Ideally a case where they are using it in conjunction with terminal input from a selections list
[23:59:24] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:e17a:bb13:3621:8c56) (Quit: Client closed)
[23:59:33] <transhumanist> thanks in advance!
