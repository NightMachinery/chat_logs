[00:12:13] <Aurora_v_kosmose> Interim Lisp is somewhat interesting.
[00:12:20] <Aurora_v_kosmose> semz: MichaelRaskin: wtf yeah that's pretty awful.
[00:12:42] <Aurora_v_kosmose> And yeah, I've seen organizations motivate the sale of vulns instead of reporting in the past.
[00:12:56] <Aurora_v_kosmose> If you're going to cause me more trouble for reporting it than for selling it, what do you think I'll do?
[00:18:40] <Aurora_v_kosmose> >  You phone that neighbor, and tell them their door is open and their purse and keys are easily visible from the street. Would Parson consider this breaking and entering? | Pretty much
[00:18:57] *** Quits: phantomics (~phantomic@97-118-174-39.hlrn.qwest.net) (Ping timeout: 240 seconds)
[00:37:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:38:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:40:20] <rotateq> Aurora_v_kosmose: i heard an interesting interview with Rainer Joswig from 2011 again where he claims that Interlisp is in some manners even more interesting than CL :)
[00:53:04] <moon-child> well
[00:53:10] <moon-child> interlisp is an environment
[00:53:15] <moon-child> cl is a language
[00:53:15] <Aurora_v_kosmose> I'm not really familiar with Interlisp. Interim was a proof of concept for a compile-time GC-less memory-safety model.
[00:53:35] <Aurora_v_kosmose> Basically a "Rust's way isn't the only nor necessarily best option" statement.
[00:54:13] <moon-child> (notably interlisp actually contains a cl implementation, albeit an old one; cltl1, I believe)
[00:54:39] <rotateq> ah okay
[00:54:49] <moon-child> Aurora_v_kosmose: have a link?
[00:55:02] <Aurora_v_kosmose> moon-child: https://github.com/eudoxia0/interim
[00:55:03] -ixelp- GitHub - eudoxia0/interim: Low-level Lisp with compile-time memory management
[00:55:12] <Aurora_v_kosmose> I found it while browsing through Cliki
[00:56:07] <moon-child> I see
[00:58:03] <moon-child> doesn't seem particularly lispy to me.  And: they claim to use regions, but the 'record' example seems to require space for a record, but does not specify how it is allocated
[00:59:02] <Aurora_v_kosmose> That's why I say it's a proof of concept and nothing else.
[00:59:15] <Aurora_v_kosmose> But the concept itself is interesting because it is simpler that Rust's model.
[00:59:41] <Aurora_v_kosmose> I still lament that C was used instead of Ada where low-level code was required.
[00:59:42] <rotateq> that's good :)
[01:00:22] <Aurora_v_kosmose> Of course Ada decided it was a good idea to shoot itself in the foot by having no free compiler or tooling for over two decades.
[01:00:43] <Aurora_v_kosmose> (What kind of mad man thought that was a smart idea?)
[01:00:57] <drakonis> fosdem's schedule is slowly going up now
[01:01:51] <drakonis> https://fosdem.org/2022/schedule/events/
[01:01:52] -ixelp- FOSDEM 2022 - Events
[01:03:37] <rotateq> better shooting in the foot than rip of the whole leg
[01:04:01] <rotateq> thx drakonis 
[01:04:53] <Aurora_v_kosmose> Yeah, but can you imagine how it'd be to have a Linux kernel written in a language that isn't synonymous with insecurity?
[01:05:17] <moon-child> why do we have to have a linux kernel at all?
[01:05:22] <pl> Aurora_v_kosmose: pretty sure GNAT was funded within decade of first Ada version 
[01:05:54] <pl> Also, hard to drumroll support when you had all the memes against you 
[01:05:58] <Aurora_v_kosmose> pl: Ah, that may be. Still kind of awful not to provide a free reference implementation to start with.
[01:06:26] <pl> Ay the time nobody was doing that 
[01:07:21] <pl> C managed to get by on the last of "software can't be sold" wave by being in company forbidden from doing so by special case 
[01:07:26] <Aurora_v_kosmose> moon-child: Not reason in particular. Personally I'd prefer some Lisp-based secure OS ala seL4 
[01:07:39] <drakonis> the linux kernel has uhh *checks notes* rust support now
[01:07:56] <drakonis> there's a severe lack of cl in fosdem
[01:08:09] <drakonis> sufficient lisp representation though
[01:08:12] <Aurora_v_kosmose> That's great. Except for the part where Rust's tooling has seriously questionable practices & stability.
[01:08:30] <rotateq> yes drakonis i also heard that, crabs everywhere :)
[01:09:12] <Aurora_v_kosmose> It took the NPM-like disaster of an ecosystem line, hook & sinker.
[01:09:32] <drakonis> 70k crates lol
[01:09:36] <drakonis> zero curation in this
[01:09:45] <rotateq> :D
[01:10:31] <sm2n> Aurora_v_kosmose: I mean, if you have a single address space, what use is a seperation kernel?
[01:11:44] <rotateq> drakonis: but it's so safe and performant and near to the hardware and all!!1elf!
[01:11:53] <Aurora_v_kosmose> sm2n: The means by which appropriate isolation of components occur is an implementation detail. My point is that isolation is necessary.
[01:12:15] <Aurora_v_kosmose> Single address-space with capability addressing is perfectly legit.
[01:12:26] <sm2n> fair enough
[01:13:05] <moon-child> Aurora_v_kosmose: I actually don't buy that
[01:13:20] <Aurora_v_kosmose> moon-child: hm?
[01:13:22] <moon-child> untrusted code on trusted hardware doesn't work
[01:13:44] <moon-child> I don't think intra-machine security measures are a bad thing, necessarily
[01:13:53] <moon-child> but they're not all they're cracked up to be
[01:14:35] <sm2n> Nothing stands up to rowhammer
[01:14:38] <Aurora_v_kosmose> That's one of the parts where the microkernel/split model actually ends-up having an advantage yes. You can perfectly well dedicate disposable or stateless machines as processor & storage nodes for specific processes.
[01:15:00] <Aurora_v_kosmose> So a Plan9/Qubes Air like way could have interesting results in this scenario.
[01:15:30] <moon-child> vms are not particularly interesting
[01:15:39] <Aurora_v_kosmose> So that way you can have one (or many) master nodes interacting seemingly seamlessly with a fleet of disposable machines.
[01:15:43] <Aurora_v_kosmose> moon-child: I didn't mean VMs.
[01:15:53] <moon-child> computation over net is cool, but not something you need intra-machine isolation measures for
[01:16:04] <Aurora_v_kosmose> moon-child: No, it's a bonus on top.
[01:16:16] <Aurora_v_kosmose> Or rather, the two are orthogonal.
[01:16:34] <moon-child> I know somebody who has a clustre of cheap arm boards.  Every time he opens up a browser window, it boots up one of them with a fresh os and streams video from it
[01:17:15] <Aurora_v_kosmose> But local isolation is desirable because it gets prohibitively expensive past a point to add more physical machines. That being determined more by one's means & budget than anything else.
[01:17:33] <sm2n> it's also logistically annoying
[01:17:34] <moon-child> 'bonus on top'  so we agree
[01:17:48] <sm2n> in fact I would say that's the main constraint
[01:17:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608) (Ping timeout: 250 seconds)
[01:19:43] <Aurora_v_kosmose> If however your system is built in from the ground up to support abstraction of component communication, adding network-based communication becomes much easier than when you have to retrofit it onto an already mostly fossilized base.
[01:20:29] <moon-child> sure
[01:20:45] <moon-child> I want cheap context-switching
[01:21:05] <moon-child> or, let us say, thread-switching
[01:21:24] <moon-child> that becomes harder the more context you have to associate with a given thread
[01:21:47] <Aurora_v_kosmose> So long as it doesn't call out to other components, it doesn't suffer from inordinate delays.
[01:22:14] <moon-child> and I don't see as you can't design a system from the ground up to be network-modular but integrated within a single machine
[01:23:25] <Aurora_v_kosmose> For example, Qubes communicates with different components using vchans, but what backs to channels can differ.
[01:23:29] <sm2n> moon-child: but you need proxies for introspection/debugging etc
[01:23:43] <Aurora_v_kosmose> Currently those channels are backed by local Xen shared memory communication channels.
[01:24:02] <Aurora_v_kosmose> But there's no reason why you can't instead have the channel talk to another machine over LAN.
[01:24:45] <moon-child> performance characteristics of shared memory are wildly different from network messages.  There's a decent chance you care which one you're using
[01:25:06] <Aurora_v_kosmose> moon-child: Indeed, and that would determine on which nodes you decide to tag & assign what tasks.
[01:25:13] <Aurora_v_kosmose> *which tasks
[01:25:31] <Aurora_v_kosmose> If response-time is critical, you might prefer fiber-channel or similar instead of plain LAN
[01:27:07] <Aurora_v_kosmose> It's much the same as ensuring the current fad orchestrators schedule IO-heavy applications near the storage locations.
[01:27:13] <hayley> https://www.youtube.com/watch?v=MduQlWUoyhI
[01:27:14] -ixelp- The Nile Song - YouTube
[01:30:12] <pl> moon-child: os/400 seems to work pretty well with capability model
[01:30:35] <pl> Don't remember of Midori used one too, think Singularity did
[01:30:37] <Aurora_v_kosmose> It gives you a tradeoff balance between cost, responsiveness & security. Local memory => lower cost, lower security, higher responsiveness. Fiber => high cost, mid responsiveness, higher security. Network => low cost, low responsiveness, higher security.
[01:30:46] <sm2n> I think capabilities are useful even if your system is trusted
[01:30:47] <Aurora_v_kosmose> By security I mean isolation.
[01:31:16] <sm2n> being able to decompose your system lowers complexity and helps with understanding
[01:31:29] <sm2n> and no one has a complete mental model of their computer system
[01:32:08] <sm2n> having better invariants like capabilities provides guiderails for UX
[01:32:18] <pl> Aurora_v_kosmose: os/400 iirc pretty much had every bit of memory authenticated and with permission system (ok, outside of the closed VM for posix stuff) 
[01:32:44] <Aurora_v_kosmose> pl: Neat
[01:33:15] <Aurora_v_kosmose> But how did it deal with locally-feasible attacks on hardware flaws?
[01:33:27] <moon-child> presumably it didn't
[01:33:33] <hayley> I think my hypothesis that JMC will be rolling in his grave at the "Declarative and Minimalistic Computing devroom" will hold.
[01:33:37] <moon-child> and predated the time when people were thinking about that
[01:34:35] <Aurora_v_kosmose> hayley: ?
[01:35:53] <hayley> https://fosdem.org/2022/schedule/room/dminimalistic/
[01:35:53] -ixelp- FOSDEM 2022 - D.minimalistic
[01:36:22] <hayley> The mailing list said the track is in memory of JMC...yeah no.
[01:37:47] <sm2n> oh hey william byrd is presenting
[01:38:05] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:108c:11f3:83c2:8127)
[01:38:19] <sm2n> and hisham muhammad!
[01:38:20] * hayley wonders why he writes it as LISP
[01:39:01] <sm2n> I never understood why people did that
[01:39:22] <Aurora_v_kosmose> Weird anachronism?
[01:39:54] <hayley> It'd fit in the olde days, but these aren't the olde days.
[01:40:51] <kakuhen> as joke we should name rust RUST
[01:41:05] <pl> Aurora_v_kosmose: it doesn't allow one to program the hw directly 
[01:41:10] <hayley> My old university would sometimes write it JAVA
[01:41:22] <kakuhen> RUSTC: Usually Sucks To Compile
[01:41:23] <kakuhen> it works
[01:42:35] <Aurora_v_kosmose> pl: I mean, things like Spectre & Rowhammer don't rely on ability to do that.
[01:42:54] <Aurora_v_kosmose> Admitedly rowhammer on ECC & authenticated memory platforms is magnitudes harder to pull of
[01:42:57] <Aurora_v_kosmose> *off
[01:43:44] <hayley> "Attachments: - *NOT FOR PUBLIC DISTRIBUTION - YET*"
[01:45:31] <hayley> Everyone's favourite languages though: jmercouris trying to write CL, Futhark, terminal boredom, and Scheme with less parens (because clearly that's the only reason that Lisp isn't widely used - 
[01:45:44] <hayley> people are ideal units that always choose the right thing.)
[01:46:03] <Aurora_v_kosmose> I honestly have no idea why CL is not more popular.
[01:46:35] <hayley> I'll be honest, I don't care too much.
[01:46:41] <sm2n> terminal boredom?
[01:46:52] <Aurora_v_kosmose> hayley: Eh, it'd be nice to be able to find jobs in CL more easily.
[01:47:24] <hayley> sm2n: Minimalist network protocols for the sake of minimalism, c.f. https://applied-langua.ge/posts/terminal-boredom.html
[01:47:25] -ixelp- Terminal boredom, or how to go on with life when less is indeed less
[01:47:58] <sm2n> right, I've read your post a long while back, but what does that apply to here
[01:48:13] <hayley> One sec...
[01:48:14] <Aurora_v_kosmose> Nothing in particular I surmise.
[01:48:30] <hayley> https://fosdem.org/2022/schedule/event/minimalsyntaxes/
[01:48:31] -ixelp- FOSDEM 2022 - Knowledge Management Through Minimal Syntaxes
[01:48:57] <sm2n> oh, I didn't even see that
[01:48:59] <sm2n> lol
[01:49:14] <sm2n> I see parsing I skip
[01:49:21] * hayley steals the file that apparently has something to do with the file, and the markup is complete gibberish.
[01:50:19] <sm2n> oh, spritely got ported to guile
[01:50:36] <sm2n> just have to port it to CL and netfarm will have competition
[01:50:42] <hayley> Don't get me started on that.
[01:51:13] <sm2n> Did something happen?
[01:51:21] <sm2n> or do you mean just in general
[01:51:36] <hayley> In general.
[01:52:13] <sm2n> I'm not sure what the deal with akkartik's talk is
[01:52:50] <hayley> It doesn't provide any fault tolerance, in the end. And recently CLW shared someone's "digital cash" system where they boasted about not having a blockchain...cause they handle the payments on one server.
[01:52:50] <sm2n> His newest project is writing something equivalent to seccomp-bpf for the lua vm?
[01:53:00] <pl> Aurora_v_kosmose: os/400 does weird things to memory behaviour on POWER chips (undocumented extras on the cpu, even) 
[01:53:02] <hayley> He is an idiot, yes.
[01:53:26] <sm2n> I've had good discussions with him before, but this one is just weird
[01:53:48] <sm2n> and huh
[01:54:00] <Aurora_v_kosmose> pl: huh
[01:54:08] <pl> I wonder if no-proof, web of trust like "blockchain" could work for a payment system 
[01:54:24] <pl> A bit like the Islamic world's money exchangers 
[01:54:48] <hayley> Somehow "web of trust" doesn't sound like it should fit, given the subjective nature of having a trust chain or not.
[01:54:51] * hayley shrugs
[01:54:57] <Aurora_v_kosmose> Considering how bad people are at applying WoT I wouldn't expect that to work too weel
[01:54:59] <Aurora_v_kosmose> *well
[01:55:05] <sm2n> I think it could work
[01:55:23] <Aurora_v_kosmose> It could, it's more the likelihood I'm questioning.
[01:55:30] <pl> Well, Hawala is essentially operating on Web of trust, so does SWIFT 
[01:55:32] <hayley> He's putting policies on syscalls?
[01:55:53] <sm2n> I think the current WoT systems have bad primitives
[01:56:15] <sm2n> There needs to be something like the grammar of graphics for trust chains
[01:56:27] <sm2n> a composable model that people can actually understand
[01:56:38] <sm2n> that you can build good ux on
[01:56:47] <sm2n> hayley: hence seccomp-bpf
[01:56:59] <hayley> That is going to lead to some nasty UX, given how a fair few syscalls are pretty much the same, and a few aren't fine-grained enough (e.g. io_uring does both file IO and networks, as an extreme case)
[01:58:41] <sm2n> I think he made up his own syscalls
[01:58:47] <sm2n> loosely modeled on real ones
[01:58:59] <hayley> And then e.g. it's reasonable to me to want to disallow all but some servers, or disallow all but some files...I guess the policy can check those still. Object capabilities when
[02:00:07] <sm2n> https://github.com/akkartik/teliva/tree/main/sandboxing
[02:00:07] -ixelp- teliva/sandboxing at main · akkartik/teliva · GitHub
[02:00:11] <hayley> I wonder how those will fare relative to the last "make computers easy to hack by no abstractions - that's the hard part clearly" machine
[02:00:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c)
[02:00:42] <sm2n> This is what unix does to you
[02:01:11] * hayley can't run out of rude things to say about the cast of FOSDEM apparently.
[02:02:26] <sm2n> You know, if Ada can get a room, why can't CL
[02:02:33] *** Joins: notzmv (~zmv@user/notzmv)
[02:03:05] <hayley> Don't need it, we don't have https://plover.com/~mjd/misc/hbaker-archive/sigplannotices/gigo-1997-04.html
[02:03:06] -ixelp- Sigplan Not. Apr 1997: I Have a Feeling We're Not in Emerald City Anymore
[02:03:51] <hayley> ...and also the DEMSOF (no-Defun-allowed's Egoist Maximalist SOFtware meeting) which has no relation to the other more boring conference.
[02:05:23] <sm2n> lmao
[02:05:27] <hayley> s/and/but we do have/
[02:07:53] <sm2n> Man, baker is a madman
[02:08:26] <sm2n> reminds me of <http://harmful.cat-v.org/software/c++/I_did_it_for_you_all>
[02:08:28] -ixelp- Bjarne Stroustrup: "I Did It For You All..."
[02:09:05] <sm2n> I don't know who wrote this one
[02:09:27] <hayley> "You talk too much, show me the code." - Baker to Stroustrup, 1997
[02:09:38] <semz> Aurora_v_kosmose: It's crazy isn't it. Beach's "People go to extreme lengths to avoid learning CL" is so on point it's painful, but I have no idea why.
[02:10:09] <Aurora_v_kosmose> semz: Indeed.
[02:10:15] <semz> Instead you have people reinventing parts of CL over and over. Or "getting inspired" by CL, adding these 10% of the language, but not explaining why they didn't add the other 90%.
[02:10:35] <Aurora_v_kosmose> Yup.
[02:22:15] <treflip> Hey, happy New Year, lispers!
[02:22:29] <hayley> Happy new year!
[02:23:11] <Aurora_v_kosmose> Happy New Year
[02:23:17] <hayley> sm2n: "I'm sure that your productivity is high compared with most other C++ programmers, but that still probably leaves you in the 'pathetic' category compared with other languages/systems." - Henry Baker
[02:23:32] <Aurora_v_kosmose> Still 1hr away from when I'd say it.
[02:24:34] <kakuhen> <semz> "Instead you have people reinvent..." <- basically, GC bad and parentheses scare me
[02:25:29] <rotateq> you still see parentheses?
[02:26:06] <pl> Similarly Ada scared people, but honestly I like it more and more 
[02:26:29] <kakuhen> Look, f(g(h(x))) is better than (f (g (h x))) because, it just is, okay?
[02:26:45] <kakuhen> Also, I NEED semicolons to terminate my expressions
[02:27:20] <kakuhen> As for GC, i think GC bad because my Intel Celeron cant run Minecraft at 60 fps
[02:27:41] <kakuhen> If Minecraft were written in C++ imagine how much faster it'd run on old hardware :^)
[02:28:05] <moon-child> there is a c++ minecraft and it is faster
[02:29:06] <kakuhen> i assume its still unplayable on a low end celeron box with no graphics card
[02:29:57] <kakuhen> so language choice of java vs c++ ultimately didnt matter for those who pretended c++ would make mc magically better on low end hardware
[02:30:02] <rotateq> kakuhen: maybe for the API of a CAS
[02:30:32] <kakuhen> rotateq: what if i told you GAP uses inverted notation for function composition
[02:30:46] <rotateq> nothing
[02:30:52] <Aurora_v_kosmose> Current CL compilers managed to get within a magnitude of C++ (and sometimes surpass it) with proper hinting too.
[02:30:58] <rotateq> what if i told you that the parentheses aren't really there?
[02:31:14] <kakuhen> no i mean GAP uses reverse order for function composition
[02:31:21] <kakuhen> so they interpret fg as "apply f then g"
[02:31:22] <Aurora_v_kosmose> Now, GC pauses could be argued as an issue, but that just means that a real-time GC has to be used.
[02:31:30] <kakuhen> which is actually done in some  group theory papers
[02:31:31] <Aurora_v_kosmose> ABCL might be usable with Java's recent realtime gc.
[02:31:38] <kakuhen> but nobody else in math does this as far as i can tell
[02:31:45] <moon-child> abcl is super slow though
[02:31:58] <hayley> SICL when
[02:32:01] * hayley forgot to ask beach
[02:32:12] <rotateq> moon-child: is this really due to ABCL?
[02:32:20] <Aurora_v_kosmose> I think zgc was the one
[02:32:23] <hayley> "Is an image one year away, like it was last year, and the year before?"
[02:32:26] <semz> I've seen some category theorists use it
[02:32:33] <moon-child> rotateq: does it matter?
[02:32:40] <semz> Some people also really like right modules
[02:32:40] <kakuhen> the ones doing bad category theory do it yeah
[02:32:44] <Aurora_v_kosmose> moon-child: Actually yes.
[02:32:56] <kakuhen> i know a guy doing some weird logic stuff who uses comp like that
[02:32:58] <Aurora_v_kosmose> And pauses are more noticeable than play slowness.
[02:33:13] <kakuhen> meanwhile everyone in homotopy uses the "usual" order
[02:33:19] <Aurora_v_kosmose> At least when gaming I see a major difference between plain 30fps max & 60fps but you drop to 5fps sometimes randomly.
[02:33:25] <rotateq> yes
[02:33:36] <Aurora_v_kosmose> The latter is far more disruptive.
[02:33:46] * hayley uses ZGC on Minecraft and never feels a pause.
[02:34:15] <kakuhen> semz: all left modules are right modules to my eyes, because i refuse to believe in non-commutative rings
[02:35:11] <semz> poor GL_n :(
[02:35:23] <kakuhen> what do you mean? n=1 is doing just fine
[02:36:44] <kakuhen> that reminds me a friend  described S_n as "a trivially compact lie group," I couldn't be any more impressed and disappointed 
[02:37:28] <kakuhen> really wish i responded to him "yes, and abelian groups are group objects in Grp"
[02:37:39] <kakuhen> but i only come up with clever comebacks after it's too late to use them
[02:38:18] *** Quits: Alfr (~Alfr@user/alfr) (Killed (calcium.libera.chat (Nickname regained by services)))
[02:38:22] *** Joins: Alfr (~Alfr@user/alfr)
[02:38:24] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[02:39:04] *** Joins: luis7 (~luis@lisp/luis)
[02:39:41] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[02:40:13] <rotateq> such stuff again, so I'm out for now
[02:40:20] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[02:42:48] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[02:47:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[02:47:28] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[02:47:28] *** Quits: treflip (~user@user/treflip) (*.net *.split)
[02:47:28] *** Quits: clintm (~user@h118.153.91.75.dynamic.ip.windstream.net) (*.net *.split)
[02:47:28] *** Quits: Catie (~user@user/catie) (*.net *.split)
[02:47:28] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[02:47:28] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (*.net *.split)
[02:47:28] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[02:47:28] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[02:47:28] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[02:47:28] *** Quits: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[02:47:29] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[02:47:29] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[02:47:29] *** luis7 is now known as luis
[02:50:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:50:25] *** Joins: clintm (~user@h118.153.91.75.dynamic.ip.windstream.net)
[02:50:25] *** Joins: Catie (~user@user/catie)
[02:50:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:50:25] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[02:58:17] *** Joins: treflip (~user@user/treflip)
[03:06:42] *** ryanbw1 is now known as ryanbw
[03:12:17] *** Inline__ is now known as Inline
[03:20:14] <Aurora_v_kosmose> hayley: Does it pause much otherwise? I don't play it so I have no idea.
[03:20:34] <hayley> Hm, infrequently.
[03:20:58] <hayley> If you use one of those optimisation mods, it conses a lot less and thus pauses less. So either approach works.
[03:30:10] *** Quits: treflip (~user@user/treflip) (Quit: good night and happy new year!)
[03:36:21] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[04:16:21] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:108c:11f3:83c2:8127) (Remote host closed the connection)
[04:28:55] * hayley got a new mouse, but it doesn't seem to track at all on her desk.
[04:29:49] <hayley> It does, however, track pretty well on this letter from my old university about some academic society that wants my money.
[04:31:13] <Aurora_v_kosmose> Optical mouses tend not to track great on uniform surfaces. Grainy paper does fairly well.
[04:31:27] <kakuhen> given tuition at my uni, i think im already donating generous amounts
[04:32:12] <hayley> The last optical mouse I had was half decent though.
[04:38:16] <hayley> Is this letter then the most expensive mouse pad ever?
[04:38:51] <hayley> At least $9000 in tuition fees (give or take), the actual time spent in class, and the brain damage induced by class.
[04:38:52] <Aurora_v_kosmose> Probably
[04:56:23] * hayley uploaded an image: (198KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gcXgtenjBOetzwccMvMsCFxq/calling-henry-baker-at-3am.png >
[04:56:37] <hayley> There's a number on Baker's papers that are published online. Who's gonna call it?
[04:57:08] <Aurora_v_kosmose> inb4 it's some secretary desk number
[04:57:39] * hayley wonders if Hangouts still lets you make free US calls.
[04:58:01] <hayley> A: no
[04:58:18] <Aurora_v_kosmose> Not particularly surprising
[04:59:13] * hayley wonders if her phone plan allows for inexpensive international calls.
[05:00:11] <hayley> 35 cents/minute?
[05:08:54] * hayley tried some free VOIP website and it went nowhere.
[05:13:47] * hayley uploaded an audio file: (557KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lvVLnNCeKiEzLUBeEwRtsGBP/phone.wav >
[05:13:51] <hayley> Anyone know what the tone at the end means?
[05:14:24] <hayley> Maybe I should have waited, as there was no hang-up tone.
[05:20:07] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:20:08] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 252 seconds)
[05:20:30] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:32:46] * hayley next dials Baker Capital and there is an option for each member, but no Henry. ):
[05:40:29] <hayley> Too late, anyway. 9pm there.
[06:15:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:45:51] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:58:47] *** Joins: semz (~none@user/semz)
[08:02:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:06:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:37:46] <hayley> Terrible idea: linear logic language, but the implementation uses a bump allocator and compacting. Instead of marking in mark-compact, you set the "mark" bit on allocation, and clear on free().
[08:52:42] <hayley> https://www.youtube.com/watch?v=YbsWB1bKa5E
[09:26:16] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[09:26:16] *** ChanServ sets mode: +o gilberth
[09:27:04] <gilberth> What have I missed?
[09:33:50] <hayley> I failed to call Henry Baker using the phone number on the papers.
[09:35:39] <gilberth> You called on New Year's Eve?
[09:35:56] <hayley> Also, I got a new mouse and I am using a invitation letter to some academic society as a mouse-pad.
[09:36:17] <hayley> Yeah, well, the line seemed dead and it was late in the US when I called. So I'll call tomorrow.
[09:37:02] * hayley uploaded an image: (74KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/JFGipqUgKTonytWLChthktVr/mouse-pad.jpg >
[09:37:02] <gilberth> On New Year? Sure, that should work. Not.
[09:37:47] <hayley> Fine, I'll give it some time. /me needs to prepare a list of questions anyway.
[09:38:40] <gilberth> What is P4 doing?
[09:39:09] <hayley> 1. Are stack allocation and generational GC similar enough that one makes the other redundant? 2. You wrote about linear logic, which handles freeing objects, but how would you go about allocating? 3. Do we actually need hardware support for much? 4. How do you use something that isn't C in embedded when everyone expects C for made up reasons?
[09:39:21] <hayley> gilberth: Those are buttons to change the lights. I only press them when I'm not being careful.
[09:40:13] <gilberth> I see.
[09:40:40] <hayley> As long as I don't call at 03:00 then <https://i.redd.it/3juka01faz881.png> won't happen.
[09:42:20] <gilberth> Hmm. (1) A stack will still have a performance advantage. (3) Would be nice but is not feasible (4) Why would it matter what others expect.
[09:43:14] <hayley> 1. If your nursery is roughly cache-sized, will it still? 4. You want to sell development tools.
[09:45:07] <hayley> For 4, I guess there's some resistance. You can run C++ and Rust on micros (lol), or something like MicroPython if you want to waste money. More recent is <https://docs.toit.io/language> but why make a new language? I mean, I want a new compiler and I work on a new language, but it's not made for the sole purpose of running microcontrollers.
[09:51:09] <hayley> And it still runs bytecode, so you're still making a 100MHz ARM run like a 16MHz AVR/PIC/you get the joke.
[09:53:22] <gilberth> hayley: GC time still is O(n), n being the retained objects.
[09:55:42] <hayley> I guess, yes.
[09:55:58] <gilberth> Performance is only really relevant when either the MCU to be as fast as you need it is more expensive, or you are on a tight power budget. Not all applications are like that. And do we talk about languages or implementations?
[09:56:13] <hayley> But if you do optimistic stack allocation, you can still cons enough to blow the stack and thus need to GC.
[09:56:15] <gilberth> * needs to be
[09:56:37] <hayley> gilberth: People don't want to save money on chips? And languages and implementation are roughly the same for Rust, Toit, MicroPython, etc.
[09:56:49] <gilberth> hayley: When you do optimistic stack allocation than this is no different from a nursery.
[09:57:33] <gilberth> hayley: You bring forward the argument that language = implementation?
[09:57:38] <hayley> Is it, though? On one hand, you can point from older to newer "stack frames" if you had generational GC, since it doesn't care about stack frames. On the other, you get O(1) free.
[09:58:04] <hayley> gilberth: Not exactly. I argue that the languages I listed follow the degenerate case of language = implementation.
[09:58:29] <gilberth> hayley: The price difference between a 8MIPS and a say 32MIPS isn't that huge. Memory footprint, though, is way more expensive.
[09:59:24] <gilberth> And: There are always the 1% that spend 99% of the time. In my embedded application, I only needed the juice for the DSP part essentially.
[10:00:38] <hayley> And IMO it's a productivity killer if you had to FFI to C or assembler to do that, since you're stuck with the workflow for those. Granted, I could just cram any old code into the code cache, which allows for assembler (like DEFINE-VOP).
[10:01:50] <gilberth> I went the 32-bit route because of a flat address space and good C support. The previous generation used an 8-bit CPU at 3MHz clock, but had the DSP part is specialized HW. It was a very old design initially done in the late 80s. I didn't need the speed for the application logic.
[10:02:13] <gilberth> I would have went with Lisp, if memory would have been cheap.
[10:03:27] <gilberth> hayley: In my application it would not have been. Not at all. You write those simple DSP routines once and operate them more or less like other peripherals.
[10:04:30] <gilberth> Part of which I coded in assembler even. And we were on a very tight power limit even.
[10:05:41] <gilberth> With DSP off, the load average was about 0.1%. The thing was sleeping most of the time.
[10:06:11] <hayley> I guess, as long as you find the register to downclock, sleeping is cheap independent of implementation.
[10:06:32] <gilberth> So a 60kHz MCU would have been fine but the DSP part.
[10:07:59] <gilberth> hayley: You usually don't need to lower the clock rate. MCU go into real deep sleep drawing around 1uA or less when waiting for an interrupt. And at times, like with our application you needed to react to interrupts real fast and hard real time.
[10:08:52] <hayley> Another thing, though, is that "embedded" isn't so tiny when it comes to e.g. "internet of things" devices. /me is enrolled for the elective, which uses Python on some model of Pi.
[10:09:26] <gilberth> Embedded is a very broad spectrum, yes.
[10:10:46] <gilberth> It could be a controller for your electric (non IoT) tooth brush or sth on WiFi with a whole Unix-like kernel.
[10:10:49] <hayley> And w.r.t memory, well, some people get away with full mark-sweep for a GC for machine with hundreds of kB of memory. If MIPS are cheap but not memory, I would bet that limited reference counting wouldn't be incredibly stupid as it usually is.
[10:11:29] <hayley> ...assuming that memory bandwidth and cache coherence aren't problems, too, which they probably aren't, cause you have SRAM and no cache.
[10:12:58] <gilberth> Yep. Also consider the HW developing costs and board costs. Using on-chip SRAM is cheaper to design as needing to interface a DRAM.
[10:13:56] <gilberth> So when you could do with say 128kB, and another guy would not fly with say 16MB. The former wins costwise, hands down.
[10:15:57] <hayley> We have ample flash though, and tree shakers (assuming anyone using MicroPython or similar is serious and actually would go into production).
[10:16:12] <gilberth> hayley: But this all depends. There is no single answer. Volume also plays a role. It's a huge difference in selling 1M devices a year versus say 1000.
[10:17:08] <gilberth> hayley: Yes, flash got cheap. And I considered that, I was talking about the dynamic heap and stacks.
[10:18:17] <hayley> Neither has to be much larger AFAICT.
[10:19:27] <gilberth> hayley: There are many different markets. One could do with a device, which is only available for a short term. Others need some long-term promise/history of devices being available for 10 years or more. All depends.
[10:19:46] <hayley> I consider the initial funding and continued existence of µPython to indicate that it's bearable, or that people are stupid. Granted you'll probably agree more with the latter.
[10:20:03] <hayley> But I basically want to steal that market with a compiler.
[10:20:50] <gilberth> What tells you that uPython isn't a very, very tiny niche?
[10:21:21] <hayley> That it's one of the "supported" implementations for programming a Raspberry Pi Pico, among other hobbyist microcontroller boards?
[10:21:41] <gilberth> Hobbyist. Exactly.
[10:22:18] <hayley> As for production, how the fuck do I know - I'm not going around with a programmer dumping images and looking for signs of C or whatever.
[10:22:59] * hayley continues inflating #lispcafe swear count
[10:23:31] <gilberth> Have you spotted a swear police?
[10:23:58] <hayley> Here's a video suggesting someone wants to--put it in "critical embedded systems"? Shit.
[10:23:58] <hayley> https://www.youtube.com/watch?v=WgpMWEdKuyY
[10:25:12] <hayley> It is actually used in production. Well.
[10:25:49] <gilberth> What's the application?
[10:27:12] <hayley> Control circuits for wave power, NDA, and traffic monitoring systems.
[10:27:28] * hayley takes notes
[10:27:50] <hayley> Apparently they can't handle memory fragmentation, but idk how much your object sizes would change in embedded.
[10:28:49] <hayley> ...and apparently this has to do with dynamic typing? Eh?
[10:28:52] * hayley grabs pillow
[10:29:01] * hayley muffled screams into pillow
[10:29:03] <gilberth> She talks about data acquisition, perhaps the data sets are not all of the same size?
[10:30:18] <hayley> I can't imagine how that happens.
[10:31:41] <hayley> But apparently using more resources is a problem, as mentioned near the end.
[10:34:51] <gilberth> What I have seen so far are no hard real time problems. Sounds like glue logic to me. Only the traffic monitoring company looks like selling a product and not some one or perhaps few dozen custom solution. Perhaps I miss sth.
[10:35:31] <hayley> Sure.
[10:35:32] <gilberth> All pretty low volume. So development costs will perhaps dominate.
[10:36:50] <gilberth> For custom solutions you could charge quite a bit. It's very profitable.
[10:36:58] <hayley> But the idea came to me when I watched this before, and there was the slide "'But Python is slow compared to C!' Python is fast - in development time" - what a shit comeback. /me wonders if she just has to be faster and/or more memory efficient than the next guy, if development time is significant.
[10:37:30] <gilberth> She doesn't.
[10:38:03] <gilberth> For those markets it doesn't matter if you save $10 on the MCU.
[10:39:05] <hayley> Well then.
[10:40:55] <gilberth> What is payed for is the developing costs essentially. And the expertise that you have.
[10:57:52] <gilberth> hayley: Yep, that's gluing. Those sensors are autonomous and connected over RS-422 perhaps. And I won't call that exactly low-power.
[11:00:09] <gilberth> So what do they use? A non-campacting mark-and-sweep collector? Hilarious.
[11:05:40] <hayley> Yes, and it stops the world too. Hence why I say we could afford to do better.
[11:13:17] <gilberth> Indeed.
[11:14:07] <gilberth> So it's the most silly GC implementation possible. Oh dear.
[11:14:20] <hayley> Hey, it could be reference counting.
[11:14:59] <gilberth> Well, at least that would not stop the world. ;)
[11:15:36] <gilberth> And, no: RC is no garbage collection. It's not a solution.
[11:16:10] <ck_> when people say that, it always reminds me of that quote that's also printed in the unix hater's handbook
[11:16:33] <hayley> Damn definitions. Reference counting has three chapters in the GC Handbook.
[11:17:11] <hayley> Er, two.
[11:17:23] <hayley> But note that neither is the chapter on real-time collection :)
[11:18:16] <gilberth> Is that biased?
[11:18:21] <gilberth> that talk
[11:18:55] <gilberth> I mean, she used the term "real time", didn't she?
[11:19:15] <gilberth> Yet, I see no real time in that application of her.
[11:19:48] <hayley> I forgot. Funny things are only weakly referenced.
[11:20:53] <gilberth> That's sad. No fun in your life?
[11:21:48] <hayley> Well, if sleeping is GC, it explains why I never have happy dreams.
[11:22:26] <hayley> Hm, no one has responded to my counter-proposal to use real-time copying rather than not-real-time Rust for brains.
[11:22:31] <hayley> https://github.com/god/man/issues/64
[11:22:52] <gilberth> Well, I have recurring dreams of all the same things, only the scenery changes. My GC must be defective then.
[11:23:36] <moon-child> 'A brain written in Rust would form only tree-like interconnections, not arbitrary graphs, and would quickly be outcompeted by other organisms relying on GC.'  hahha
[11:23:58] <gilberth> lol
[11:28:17] <hayley> gilberth: You just have that scene stashed in some olde object?
[11:29:24] <gilberth> You mean, I have to die first for a final global GC been run?
[11:31:33] <hayley> A sufficient and gruesome way to make sure it's not reachable, but not necessary.
[11:32:41] <gilberth> Too late, I already wrote about that dream.
[11:33:45] <gilberth> And no finalizer is installed.
[11:37:13] <hayley> https://www.youtube.com/watch?v=P6I6yr7WDeg
[11:38:47] <gilberth> Oh, ixelp didn't make it into 2022.
[11:40:37] *** Joins: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de)
[11:40:37] *** ChanServ sets mode: +o ixelp
[11:44:49] <hayley> https://www.reddit.com/r/transprogrammer/comments/rtexmj/well_spooked_my_prototypes/
[11:44:50] -ixelp- well spooked my prototypes : transprogrammer
[11:48:02] <hayley> .oO(So, a deferred RC does refcounting in the heap, and effectively "traces" roots->heap references. Could you move the boundary for RC/tracing to get different performance? There are schemes where you copy a nursery and RC tenured space already.)
[11:48:13] <gilberth> hayley: Heh, the MicroPhython girl didn't get the question about RT OSs. *facepalm*
[11:48:29] <hayley> gilberth: Seems like a good idea that I let you rip at it then.
[11:48:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:49:26] <hayley> .oO(If someone complains I am putting down Rust programmers, then I can always point to the "no GC" post. I mean, I literally have my name in the GC Handbook now :)
[11:50:02] <gilberth> Brilliant move to have your name in there.
[11:50:28] <hayley> Hey, it was only an accident. But I guess having my name in a handbook usually helps.
[11:52:50] <gilberth> Anyhow, she didn't answer the question whether MicroPython would be fit for hard real time.
[11:52:59] <hayley> Easy enough. No!
[11:53:22] <hayley> When in doubt, the answer is "No!"
[11:54:08] <gilberth> Have you watched the Q&A part? <https://youtu.be/WgpMWEdKuyY?t=1428>
[11:54:08] -ixelp- MicroPython Used in Industrial Applications - YouTube
[11:54:44] <hayley> Not yet.
[11:54:59] <gilberth> What that time index, it's fun.
[11:55:05] <gilberth> Watch.
[11:55:52] <hayley> I could have an incremental GC, but that still might not have tight enough bounds.
[11:56:29] <gilberth> Well, hard real time doesn't mean you need to be fast. It only means that you make the dead line.
[11:56:51] <hayley> Sure. Recall that an incremental GC has less throughput, as the mutator has to maintain invariants for the collector.
[11:57:08] <hayley> But e.g. scanning the call stack would take time proportional to the length of the stack.
[11:58:12] <hayley> Were those the only questions, or did you skip part of the Q&A?
[11:58:26] <gilberth> hayley, when you think about it. You only need to be fast enough to keep up with the frequency of events. Response guarantees could be lower.
[11:58:39] <hayley> Sure.
[11:58:48] <hayley> And there are other questions. Are the others funny at all?
[11:59:03] <gilberth> There were other questions before, but nothing of interest. I still watch.
[12:00:10] <hayley> "For someone who's been dabbling with Arduino (software for AVRs) and needs something a little bit more beefy..." How ironic.
[12:01:13] <hayley> I'd love to make an ad that says "The MicroPython disaster: how to make a 133 MHz ARM perform like a 8 MHz AVR" but I'd get in trouble for it. Not to say I haven't got in trouble with such ads before.
[12:02:25] <gilberth> Yep, that's a lie, we have seen how to make Python toggle a line fast.
[12:02:58] <hayley> And I'm also waiting to see reception on my pretty rude "Average trans rustacean vs Average trans Self enjoyer" meme.
[12:04:00] <gilberth> That would imply that people seeing it have heard of Self.
[12:04:03] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[12:04:22] <hayley> I thought they would have, as JavaScript is just Self in C syntax. Not.
[12:04:23] <dave0> maw
[12:04:27] <hayley> maw
[12:05:05] <dave0> maw hayley 
[12:05:06] <hayley> gilberth: But, at least with latency, I am still sticking to the "faster than the slowest guy being chased by a bear" technique, so that I can retain the good stuff of using a "scripting" language on a micro.
[12:06:27] <gilberth> dave0: How was your party?
[12:06:41] <dave0> ah so that's why they bring me on picnics ... cos i'm the slowest
[12:07:04] <gilberth> hayley: I won't bother with hard real time.
[12:07:08] <dave0> gilberth: alright! i had 6 non-alcoholic beers and still woke up with a headache!
[12:07:32] <dave0> bear bait
[12:07:45] <gilberth> dave0: A headache for nothing? A pity.
[12:08:04] <dave0> gilberth: it really rounded out the alcoholic experience
[12:08:18] <dave0> :-)
[12:08:25] <ck_> is that why you emphasized your one-sixpack year?
[12:09:12] <dave0> yes i like to drink but it fucks me up
[12:09:54] <ck_> well, congratulations in that case! hope you'll keep it up
[12:10:04] <dave0> haha thanks :-p
[12:10:24] <ck_> I'm having a glass of water right now, join me
[12:10:40] * dave0 tea
[12:10:50] <dave0> ck_: cheers
[12:11:57] <ck_> cheers.
[12:25:31] <moon-child> dave0: nice
[12:25:33] <moon-child> what kinda tea?
[12:26:04] <dave0> just normal liptons black tea, extra strong
[12:26:29] <ck_> do you extend your little finger while holding the cup and say ".. but that's none of my business" ?
[12:26:30] <dave0> i also have twinings earl grey if you want :-)
[12:26:55] <dave0> lol you think i'm fancy :-p
[12:27:07] <ck_> https://i.ebayimg.com/images/g/bdgAAOSw8w1X-s7j/s-l640.jpg
[12:27:20] <dave0> nice!
[12:27:24] <dave0> wakka wakka
[12:27:39] <White_Flame> it's not easy being green tea
[12:27:45] <ck_> :)
[12:32:57] <moon-child> hayley: https://news.ycombinator.com/item?id=29754556
[12:32:57] -ixelp- If I understand this correctly, the problem is strictly contention on the cache ... | Hacker News
[12:33:38] <hayley> Sheesh.
[12:33:47] <moon-child> yo dawg
[12:33:52] <moon-child> I heard you like reference counting
[12:34:02] <moon-child> so we put reference counts in your reference counts so you can reference count while you reference count
[12:34:24] <hayley> gilberth would need Rc<Arc<RefCell<LispObject>>> then
[12:36:34] <gilberth> hayley: You misspelled "Mutex".
[12:36:54] <hayley> Well, if you need a Mutex then you're FUBAR.
[12:37:26] <gilberth> No rplaca and rplacd for me?
[12:37:55] <hayley> I meant that if you need to write, then avoiding writing refcounts using that hack isn't going to help.
[12:37:56] <moon-child> no threadsafe rplaca and rplacd; can you not push the race conditions into user case?
[12:38:00] <moon-child> unsafe something something?
[12:39:06] <hayley> AIUI you are completely UB, and the Rust compiler will tell LLVM you never alias, so prepare for explosions.
[12:39:45] *** Joins: ln43 (~ln43@user/ln43)
[12:39:49] <gilberth> Nice.
[12:39:52] <moon-child> ._.
[12:40:01] <moon-child> can you do a relaxed atomic store?
[12:40:29] <ln43> Happy new year https://youtu.be/X_lj1zIvsnY
[12:40:30] -ixelp- Benny Andersson – Happy New Year - YouTube
[12:41:09] <gilberth> moon-child: A relaxed atomic bomb?
[12:42:18] <hayley> Not unless you make your own reclamation scheme.
[12:43:15] <moon-child> er, yea.  atomic xchg
[12:43:35] <moon-child> so you can decrement refcount on the old pointee
[12:43:38] <moon-child> should work, no?
[12:44:24] <hayley> Yeah, but you'd be writing your own Arc.
[12:47:14] <gilberth> Has it occurred to you that a circle is an arc, too? What a misnomer.
[12:50:52] <hayley> Funny that I was briefly defending the article, cause someone said "You wouldn't have this in C, cause you'd know you're refcounting!" "But it literally says Arc<blah>." "But it _has_ Arc, so thus everyone is going to use it."
[12:51:03] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/iOkPswwjBOhjcdeZaAFNQNBT/bruhcha.jpg >
[12:51:56] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[12:52:04] <hayley> Personally I find that argument about as convincing as "everyone should have bludgeoned each other to death by now." Just cause you can, doesn't mean anyone's convinced it's a good idea.
[12:57:12] <dave0> OMG star trek just because you can do a thing, it doesn't follow that you must do a thing
[13:00:19] <ck_> often you must not do the thing if the context in which you do that thing would be drastically altered by doing it
[13:09:09] <hayley> https://robert.ocallahan.org/2021/12/do-we-really-need-link-step.html
[13:09:09] -ixelp- Eyes Above The Waves: Do We Really Need A Link Step?
[13:09:15] <hayley> idk I think we might need a link step
[13:09:35] <hayley> "Here's an option for function symbols: when A is used for the first time, write a stub for A to the final binary and call that. When a definition for A is seen, patch the stub to jump to the definition"
[13:12:41] <hayley> Literally SICL
[13:16:56] <moon-child> heh, I said basically the same thing on lobsters.  'prefer image-based developments with thunks for redefinition and JIT to make up the performance difference'.  Completely ignored
[13:17:56] <hayley> "It's not JIT!! It's not JIT", I continue to insist as I slowly shrink and transform into a Cliff Click
[13:17:59] <hayley> — Robert Strandh
[13:19:22] <moon-child> :D
[13:21:54] <kakuhen> speaking of linking, LLGPL confuses me
[13:22:13] <aeth> it confuses everyone
[13:22:16] * hayley uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/umWtUvadpsvvvOerEHqfIELN/Screenshot_2022-01-01_21-01-02.png >
[13:22:27] <aeth> LLGPL doesn't even need to exist
[13:22:32] <kakuhen> is it compatible with AGPL? and it's not obvious to me whether the generated code from caveman2 counts as library code in the LLGPL
[13:22:45] <aeth> based on this article, you don't need the LLGPL at all... https://www.gnu.org/licenses/lgpl-java.html
[13:22:45] -ixelp- The LGPL and Java - GNU Project - Free Software Foundation
[13:22:58] <aeth> "FSF's position has remained constant throughout: the LGPL works as intended with all known programming languages, including Java."
[13:22:58] <kakuhen> i am working on a toy webapp that i intend to release under some GPL variant but its confusing
[13:23:01] * hayley thinks the crabs found her meme now
[13:23:36] <aeth> GNU has 3+ Schemes, 2 Common Lisps, and Emacs Lisp so... I don't think the LGPL is intended to be an obstacle, which kind of makes LLGPL an odd, custom license
[13:23:50] <aeth> since it's hard to argue that the FSF wouldn't be aware of CL
[13:24:14] <kakuhen> yeah im only having to think abt it since fukamachi decides to release most of his web frameworks under llgpl
[13:24:29] <kakuhen> and i may end up asking him directly what i should be doing for licensing
[13:25:09] <kakuhen> the simplest solution here i guess is "release all code under agpl and wait for someone to complain"
[13:25:37] * hayley notes the word "Femboy?" in the discord bio of the owner of the gmod server where she is told to off herself.
[13:25:46] <hayley> Ain't that ironic.
[13:26:16] <kakuhen> does rhat mean the owner is asking if the reader is a femboy or is the owner asking themself
[13:26:26] <hayley> The latter I think.
[13:27:07] <hayley> Could be confirmation bias with my gay-dar or whatever the other "not exactly cis-presenting" radar is supposed to be called.
[13:27:34] <kakuhen> back in my high school days, we called it intuition
[13:27:48] <hayley> That's what they called it at high school.
[13:28:14] <kakuhen> in uni we now jokingly say "intuit from first principles"
[13:28:19] <hayley> lol
[13:28:46] <hayley> Based on my overuse of the phrase in #commonlisp, I would have to say "to a zeroth approximation, you are <identity name>"
[13:29:13] <kakuhen> ignoring the assumptions that make X false, X is true
[13:29:49] <ck_> one one also "on themselves" ?
[13:29:53] <ck_> can one*
[13:29:58] <kakuhen> now im getting flashbacks to my metalogic class
[13:30:02] <hayley> https://www.youtube.com/watch?v=4esybKKOYYo
[13:30:02] -ixelp- Never Turn Your Back On Mother Earth - YouTube
[13:30:16] <hayley> ck_: Can you revive yourself?
[13:30:19] <ck_> just on yourself dude
[13:30:46] * hayley checks controversial r/transprogrammer
[13:31:37] <hayley> Someone is pissed about people names being stored in git, which is fair, but believes git is a blockchain (lmao). And then someone else defending RMS when that was a thing. And then me. Yay.
[13:32:31] <dave0> llgpl is not a typo..
[13:32:45] <hayley> Nope.
[13:32:46] <ck_> soon we'll arrive at the fixed point
[13:32:57] <ck_> l^{\infty}gpl
[13:32:58] <hayley> Rather, indeed it is not a typo.
[13:33:23] <hayley> \lim_{t \rightarrow \infty} l^t gpl
[13:33:46] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:33:52] <hayley> You could simplify to l^{t+1}gp of course.
[13:34:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:34:56] <moon-child> you have rearranged terms of infinite sequence
[13:34:58] <moon-child> prepare to lose subscriber
[13:35:34] <ck_> you didn't specify sequence wasn't totally convergent
[13:35:45] <ck_> defend yourself!
[13:35:54] <hayley> \sum_{n \in \mathbb{N}} l^n gpl = -\frac{1}{12}
[13:47:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:04:16] <kakuhen> ok but under what topology
[14:04:28] <kakuhen> Disliked, unsubscribed, and reported
[14:05:18] <hayley> Mathologer topology
[14:08:53] * hayley uploaded an image: (103KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/PmVngRdTLLzAzfpTnDZIYqkq/ron-mael.jpeg >
[14:11:52] <moon-child> I'm really disappointed that there's a /r/cpudesign and probably 1/10 of the posts are actually to do with cpu design
[14:11:58] <moon-child> comp.arch is still cool though
[14:15:18] <ck_> what are the other 90%?
[14:15:53] <ck_> personally I like the heat sink of the cyrix 486 dx/2, 66. A very moody green with bendy fins
[14:15:59] <moon-child> 'what i7 should I get'
[14:18:54] <ck_> https://ancientelectronics.wordpress.com/tag/cyrix-dx2-66/#jp-carousel-3013
[14:18:55] -ixelp- cyrix dx2-66 | ancientelectronics
[14:19:12] <ck_> see? very green
[14:19:45] <ck_> moon-child: amazing that people with that kind of question would post it in a forum with that kind of name
[14:38:15] * hayley goes to ask who is doing 864 cores in 2022
[14:48:18] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[15:58:52] *** Joins: random-nick (~random-ni@87.116.180.98)
[18:03:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:14:45] *** Joins: kevingal (~quassel@37.228.202.92)
[19:13:02] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[19:22:20] *** Joins: shka (~herr@109.231.0.226)
[19:25:42] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:34:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:35:58] *** Joins: aeth (~aeth@user/aeth)
[19:40:49] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[19:45:31] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 268 seconds)
[19:46:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:59:58] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[19:59:58] *** ChanServ sets mode: +o MichaelRaskin
[20:05:48] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[20:09:43] *** Joins: treflip (~user@user/treflip)
[20:18:18] <White_Flame> hayley: that's probably going to be available within a 10 year timeframe
[20:20:17] <pl> White_Flame: depends on available for whom and how
[20:20:18] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:20:31] <White_Flame> consumer desktop
[20:20:48] <White_Flame> high end of it, but still :)
[20:20:54] <pl> White_Flame: doubtful then
[20:21:04] <pl> unless you're going to count GPUs in, then you already have that
[20:21:52] <pl> the moment you venture outside of desktops, things get crazier
[20:22:04] <pl> there were deskide machines that weren't too far from that
[20:22:21] <White_Flame> is it too much to ask to have a 19" rackmountable single chip?
[20:22:37] <pl> well, yes
[20:22:49] <pl> even desktop CPUs are no longer single chip
[20:22:50] <White_Flame> I'd even settle for chiplet/mcm ;)
[20:23:37] <pl> AMD apparently produces few variants of chiplets, sorts them by testing into bins, then assembles those into various Zen cpus
[20:24:01] <White_Flame> and I do like their notion of having the same silicon for both low power and high performance
[20:24:10] <White_Flame> although they're going to be going big.little as well in about 2 gens
[20:24:19] <White_Flame> using zen4 as the "little" ;)
[20:24:25] <pl> hopefully better than Alder Lake :P
[20:24:31] <pl> which is soon going to lose AVX512
[20:24:41] <White_Flame> yeah, everything's really a mess right now
[20:24:59] <White_Flame> I'm kind of in the market for a new system, but as things currently are, I can wait
[20:25:42] <White_Flame> my desktop is the oldest at a 6700k, and that's still more than sufficient for the vast majority of things
[20:25:53] <White_Flame> at 6 gens old
[20:35:28] <shka> hi all
[20:35:55] <shka> pl: also, don't forget about epyc and consoles
[20:36:12] <shka> consoles can get worst performing chiplets, no problem
[20:36:23] <shka> that's partly why AMD is currently winning 
[20:36:38] <shka> it is simply a production advantage over Interl
[20:36:41] <shka> *intel
[20:36:43] <pl> also, if we're allowing SMT as cores, then POWER clearly leads the pack in terms of available count
[20:37:15] <ck_> White_Flame: in what year did yu get that system?
[20:37:23] <White_Flame> when it was new
[20:37:54] <pl> shka: also, while nVidia always had better idea on how to sell to game devs and support them, ATi/AMD apparently is much better partner to negotiate with for custom hw
[20:37:55] <White_Flame> so 2015?
[20:38:01] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[20:38:08] <pl> btw, TALOS2 I think tops at 160 cores if you count SMT
[20:38:34] <shka> pl: yeah, but there is also another reason why AMD is not strong in the GPU market
[20:38:47] <shka> namely, GPUs are not very profitable when compared to the CPUs
[20:39:02] <shka> and AMD, well needs cash 
[20:40:33] <White_Flame> hence chiplet GPUs
[20:40:35] <ck_> my computer is also roughly that old, from 2014, and I was thinking of getting a new one as well
[20:40:50] <ck_> I'll follow your quest with great interest
[20:40:57] <White_Flame> ck_: but I got it with a m.2 boot drive, 64GB RAM, etc, it's still fine
[20:41:04] <pl> shka: well, there are certain areas that bring a lot of dough, but nvidia has benefit there
[20:41:50] <White_Flame> ck_: I've been pondering a new machine for probably about a year+ already, will probably be another one before I get anythin g;)
[20:41:54] <shka> yup, but not in the gaming market
[20:42:38] <shka> you can make a lot more money in the servers  
[20:42:41] <shka> generally
[20:43:27] <ck_> White_Flame: yeah I can relate to that.. the first time I thought about an upgrade was probably when I read this article https://fabiensanglard.net/tb3/index.html
[20:43:28] -ixelp- The beautiful Silent ThunderBolt-3 PC
[20:43:54] <White_Flame> heh, I've been running silent PCs since before this one
[20:44:30] <White_Flame> the biggest change IMO is getting a fanless power supply.  PSU fan failures were generally the first failure in any of my systems
[20:44:41] <White_Flame> the silent part was just an added bonus that I then really went for
[20:48:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4)
[20:50:30] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[21:02:58] <ck_> as long as I don't do much, my system is silent as well
[21:04:17] <ck_> it's a weird memory thinking of what pcs sounded like in the 1990s 
[21:04:50] * shka just added random forest leaf refinement to the statistical learning
[21:05:44] <ck_> https://www.youtube.com/watch?v=oMCsR_2JXxo
[21:05:45] -ixelp- 486 computer booting to Windows 95 (full sequence) - YouTube
[21:08:36] * phoe is firing PRs to graphics and array libraries all around
[21:08:54] <shka> lol, welcome to the club
[21:09:06] <shka> for me it is https://github.com/gwkkwg/cl-mathstats/pull/4
[21:09:07] -ixelp- Export SVD and svd-matrix-inverse functions. by sirherrbatka · Pull Request #4 · gwkkwg/cl-mathstats · GitHub
[21:10:06] <phoe> for me it's a couple to imago, vecto, and array-operations
[21:10:33] <shka> yeah, numeric CL sucks
[21:10:34] <shka> sadly 
[21:12:10] <phoe> well, I am not doing lots of numeric stuff
[21:12:26] <phoe> just relatively simple things like rotations and scaling and bicubic interpolation
[21:12:32] <shka> even that https://github.com/gwkkwg/metatilities/issues/3
[21:12:33] -ixelp- copy-array does not respect array-element-type · Issue #3 · gwkkwg/metatilities · GitHub
[21:12:40] <phoe> ouch
[21:13:13] <phoe> ...wait, why that call to linearize-array
[21:13:59] <shka> they trick is to use displaced-arrays only and construct new displacements as results of reshape
[21:14:27] <shka> linearize-array simply pulls out the underlying vector from displaced array IIRC
[21:15:08] <shka> anyway, it is not stupid honestly, though displaced arrays poses a problem for sbcl GC
[21:18:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:28:39] <phoe> oooh
[21:28:46] <phoe> I understand it now
[21:33:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[21:33:02] <shka> yeah, not stupid, but ignoring array element type is a problem
[21:35:03] *** Joins: aeth (~aeth@user/aeth)
[21:45:55] <shka> https://www.dailymail.co.uk/news/article-10360471/Melbourne-man-sets-fire-screaming-Dan-Andrews-Covid-vaccine-mandates.html
[21:45:55] -ixelp- Melbourne man sets himself on fire while screaming about Dan Andrews' Covid vaccine mandates | Daily Mail Online
[21:45:58] <shka> WTF
[21:46:10] <shka> why people are so worked up about this?
[21:46:40] <ck_> "it's in australia"
[21:47:15] <shka> hayley is apparently from Australia and so far no self-immolation 
[21:57:06] <gilberth> Good morning #lispcafe!
[22:01:11] <shka> gilberth: hi
[22:01:38] <shka> btw, i was on small vacations this week, and i had machine learning model idea
[22:02:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:21:44] <White_Flame> is australia man trying to compete with florida man?
[22:23:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:29:54] * Alfr wonders what that Florida man did.
[22:31:11] <White_Flame> everything
[22:32:40] <ck_> he sure gets around
[22:33:03] <shka> ok, that outemu clicky contactless switch again
[22:33:07] <shka> https://www.youtube.com/watch?v=g4QFnW9pUO8
[22:33:07] -ixelp- Truly Ergonomic Keyboard review (Outemu PG816 snap spring optoelectric) - YouTube
[22:33:42] <shka> snap spring 
[22:34:10] <shka> i am really happy to say that we are no longer limited to mx style of jacket for a clicker
[22:52:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:19:56] <Aurora_v_kosmose> shka: lol @ australia bit
[23:21:08] * hayley is up early, time to make the phone call
[23:23:43] <edgar-rft> whom do you call a phone?
[23:27:17] * hayley left a message for John Baker, wonders if she will get a response
[23:28:15] <hayley> But looks like I caused https://old.reddit.com/r/transprogrammer/comments/rtmb65/monthlong_moratorium_on_the_average_rust/
[23:28:16] -ixelp- Month-long Moratorium on "The average Rust programmer" memes and derivatives : transprogrammer
[23:35:41] <Aurora_v_kosmose> Do they? *shrugs very not much of a redditor(
[23:36:19] <Aurora_v_kosmose> hayley: https://old.reddit.com/r/transprogrammer/comments/rmf7yu/just_say_no_to_garbage_collectors_and_other_gcs/ shots fire, do us proud
[23:36:20] -ixelp- Just Say No to Garbage Collectors (and other GC's) : transprogrammer
[23:36:40] <hayley> Aurora_v_kosmose: https://old.reddit.com/r/transprogrammer/comments/rtexmj/well_spooked_my_prototypes/
[23:36:41] -ixelp- well spooked my prototypes : transprogrammer
[23:37:56] * hayley notes the answering machine wanted her to press # but she didn't press it. What kind of machine is that?
[23:38:45] <Aurora_v_kosmose> Might be intended to reduce automated spam
[23:38:58] <hayley> Sure.
[23:39:22] <hayley> Should probably call on a different day, too, as gilberth said. 
[23:39:57] <Aurora_v_kosmose> I get threatened by robo calls fairly often, so I usually don't bother answering unknown numbers unless I'm explicitly waiting on some call.
[23:41:35] <Aurora_v_kosmose> Regarding the GC shitpost though, it ignores real-time GCs entirely, and the lack of constaints on the programmer that things like Rust require.
[23:41:59] <hayley> What did you expect?
[23:42:01] <Aurora_v_kosmose> Rust is absurdly unwieldy compared to even just Golang.
[23:42:25] <hayley> And "easily tangled in circular logic" should be the other way around due to tracing reclaiming circular references.
[23:42:28] <Aurora_v_kosmose> (And Golang did few things right other than popularizing CSP)
[23:45:16] <shka> yeah, Rust feels like using C++
[23:45:22] <shka> until you actually try to use C++
[23:45:29] <hayley> Aurora_v_kosmose: Also https://i.redd.it/dsdi5k282d781.png
[23:45:37] <shka> then you actually start to appreciate Rust
[23:45:48] <Aurora_v_kosmose> hayley: ~yup~
[23:45:50] <shka> because it may be unwieldy, but not C++ unwieldy 
[23:45:54] <White_Flame> aint no such thing as pauseless, technically
[23:46:08] <White_Flame> well, unless you go really heavyweight I guess
[23:46:31] <White_Flame> how many "real" GCs perform no thread-stopping root scan?
[23:46:50] <hayley> ZGC et al scan the stack incrementally.
[23:47:06] <White_Flame> what does incrementally mean here, no thread-pausing at all?
[23:47:32] <White_Flame> it's just a technicality I'm bringing up, but still ;)
[23:47:35] <Aurora_v_kosmose> ZGC has sub-milisec pauses
[23:47:40] <White_Flame> right
[23:47:44] <Aurora_v_kosmose> It doesn't claim to be pauseless in its descriptions
[23:47:53] <hayley> I think there is a pause to cause a state change for every thread, but it's technically not necessary. "incrementally" means that it does a bit of the stack, and patches the return address to make the mutator scan some more.
[23:48:09] <Aurora_v_kosmose> It does however claim to have reliable real-time guarantees regarding the duration of its pauses.
[23:48:24] <hayley> Doligez-Leroy-Gonthier has each thread scan its own stack, without making any wait for any others.
[23:48:43] <hayley> Apparently you leave a callback after pressing the # key so I better call again.
[23:48:44] <White_Flame> hayley: that's still technically a mutator pause
[23:48:54] <White_Flame> it's an interesting thing to think about a pure pauseless collector
[23:49:06] <hayley> Well Shit(tm) but I guess it doesn't stop the world, which is better.
[23:49:15] <hayley> Let me tell you about write barriers too...
[23:49:18] <White_Flame> maybe something that's heap-only instead of stack at all
[23:49:22] <epony> the CPU is pauseless technically
[23:49:41] <epony> it clocks consecutively
[23:49:55] <epony> clocked without pauses
[23:50:51] <White_Flame> did the JVM ever have fully heap-allocated "stack frames" without any actual stack?
[23:51:20] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[23:51:33] <Aurora_v_kosmose> Seems like pauseless might sacrifice throughput.
[23:51:34] <hayley> Early Smalltalk implementations did.
[23:51:41] <hayley> Not JVM AFAICT.
[23:51:46] <Aurora_v_kosmose> If some unsauced commets on stackoverflow are to be believed.
[23:51:49] <Aurora_v_kosmose> *comments
[23:53:12] <Aurora_v_kosmose> >. Patents in the US last 20 years from first filing, and Sun/Oracle spent a huge amount of effort on various garbage collectors in the meantime. It's pretty clear that this was a patent issue.| And here we have patents slowing down innovation again.
[23:53:12] * hayley sends another message. l0l
[23:53:35] <epony> garbage collection is such a drama ;-)
[23:53:45] <Aurora_v_kosmose> > BuT mUh PatEnTs PrOTeCt InnoVAtOrS
[23:54:27] <hayley> .oO(Pauseless is just the Baker GC but only copying part of the heap at a time. Prior work!!)
[23:55:49] <epony> "we want to fix our VM from the userland in the VM, while our host laughs and thinks the VM is the application"  --subprocess debacles
[23:56:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:56:56] <epony> (am dunb, why go to school.. the CPU betrayed my beliefs)
[23:58:35] *** Joins: aeth (~aeth@user/aeth)
[23:59:45] <Aurora_v_kosmose> But yeah, massively complicating language semantics in exchange for memory safety seems like an awkward choice.
