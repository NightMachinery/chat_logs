[00:05:20] *** Quits: gravicappa (~gravicapp@145.255.9.217) (Ping timeout: 272 seconds)
[00:43:51] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[00:53:32] *** Joins: mro (~mro@2002:5cc3:803e:0:31fb:ff1:a179:4021)
[00:57:18] <d_bot_> <mseri> @sabas3dgh I would try ti keep it simpler and use the updated language server. Something like
[00:57:19] <d_bot_> <mseri> ```
[00:57:20] <d_bot_> <mseri>
[00:57:22] <d_bot_> <mseri> {
[00:57:23] <d_bot_> <mseri>     "clients": {
[00:57:24] <d_bot_> <mseri>         "ocaml": {
[00:57:26] <d_bot_> <mseri>             "enabled": true,
[00:57:27] <d_bot_> <mseri>             "command": ["PATH/TO/ocamllsp"], // Update the PATH
[00:57:28] <d_bot_> <mseri>             "selector": "source.ocaml"
[00:57:30] <d_bot_> <mseri>         }
[00:57:31] <d_bot_> <mseri>     }
[00:57:32] <d_bot_> <mseri> }
[00:57:33] <d_bot_> <mseri> ```
[00:57:35] <d_bot_> <mseri> Where `ocamllsp` can be installed, for example, with `opam install ocaml-lsp-server`
[01:03:44] *** Quits: mro (~mro@2002:5cc3:803e:0:31fb:ff1:a179:4021) (Ping timeout: 250 seconds)
[02:06:44] *** Joins: vijon (~vijon@8.47.15.5)
[02:10:04] *** Quits: vijon (~vijon@8.47.15.5) (Client Quit)
[02:14:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:25:48] *** Quits: bartholin (~bartholin@158.110.70.71) (Quit: Leaving)
[02:46:08] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[03:48:28] *** Quits: olle (~olle@i5E866D9C.versanet.de) (Ping timeout: 256 seconds)
[03:51:52] *** Quits: bobo (~bobo@37.170.9.254) (Ping timeout: 250 seconds)
[03:51:56] *** Joins: spip (~bobo@37.172.192.140)
[04:09:17] *** Quits: sparogy (~sparogy@2604:a880:cad:d0::648:8001) (Ping timeout: 240 seconds)
[04:09:52] *** Joins: sparogy (~sparogy@afontaine.dev)
[04:18:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:31:11] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:51:50] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[05:41:14] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[05:45:10] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[06:16:27] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:29:09] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[07:12:50] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:53] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:31:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:04:42] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[08:06:26] <random-jellyfish> is there a difference in speed between LL and LR parsers?
[08:30:49] <d_bot_> <sabas3dgh> @mseri hi. Thanks. Is this a sublime config? Could you elaborate a bit! Thanksüëç
[08:58:59] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[09:00:30] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 272 seconds)
[09:01:53] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9)
[09:15:16] <d_bot_> <Snakers> is anyone really good with ocaml trees i will pay for help, dm me
[09:21:38] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[09:44:34] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[10:12:42] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[10:38:53] *** Joins: mbuf (~Shakthi@223.178.126.157)
[11:17:51] *** Joins: aitap (~aitap@95.165.173.36)
[11:23:34] <aitap> Hi! I'm trying to compile Unison-2.48.3 on OCaml 4.11.1, and I'm getting errors about mixing strings and bytes. Is it possible to fix those?
[11:25:33] <aitap> E.g. http://paste.debian.net/1231582/
[11:33:14] <d_bot_> <sabas3dgh> Thanks. It shows some difference. Is there any other more advanced stuff that I can do/tweak to make it even more powerful.
[11:33:14] <d_bot_> <sabas3dgh> ‚ùî
[11:34:43] <d_bot_> <sabas3dgh> Guys?! How should I create my project structure with *dune* to give me *‚Ä¢marlin* file.???
[11:43:12] <d_bot_> <sabas3dgh> another Q?
[11:43:12] <d_bot_> <sabas3dgh> Is the nature of ocaml compile the same as C/C++ or it is more like JIT?
[11:44:11] <aitap> https://stackoverflow.com/q/65609284 says I should either patch the types or use an older compiler. Never mind, I installed a pre-built older Unison until I can upgrade everything.
[11:55:09] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:57:04] *** Quits: aitap (~aitap@95.165.173.36) (Quit: Leaving)
[12:03:12] <d_bot_> <sarna> hey, does OOP's "program to interface, not implementation" have any equivalent in OCaml? do you use functors where you'd normally use interfaces? or do you just code to implementation and it's not a problem in practice?
[12:03:31] <d_bot_> <sarna> (excuse my ignorance, I'm really weak at modeling stuff in statically typed languages)
[12:04:38] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:10:05] <d_bot_> <orbitz> @sarna  I would say in Ocaml that you often program against the explicit thing.  But often you do it with minimizing the amount of knowledge you need to know so you can flip it out if you want.  Functors are often used in explicit situations where you want to abstract over the implementation
[12:10:55] <d_bot_> <sarna> so like, "it's doable, but program against the implementation by default"?
[12:11:12] <d_bot_> <orbitz> IME, yes
[12:11:26] <d_bot_> <sarna> my main concern here is swapping implementation for some other when I don't control the calling code - how would you do that?
[12:12:29] <d_bot_> <orbitz> I think I'd have to see an explicit example.  IME, the way a lot of OOP langauges does it where any call can go anywhere often does not match to how most code works.  Most code is against a specific implementation.
[12:12:58] <d_bot_> <orbitz> But like you run into issues with this in Ocaml.  Every 6 months or so there is a question in the mailing list "how do I make a file object out of a string"  well,,, you can't
[12:13:46] <d_bot_> <sarna> hm, silly example but what if some function took a stdlib List and I needed it to take BespokeList because I need better performance?
[12:13:55] <d_bot_> <orbitz> List is not a function
[12:14:14] <d_bot_> <sarna> it's a type of the argument that this function takes
[12:14:24] <d_bot_> <sarna> and this function is in SomeLibrary
[12:14:26] <d_bot_> <orbitz> @sarna YOu're going to use a new function in that case, so you'll be rewriting your code
[12:14:44] <d_bot_> <sarna> well, other people's code :(
[12:14:50] <d_bot_> <orbitz> Yep
[12:15:03] <d_bot_> <sarna> I see, thanks for explaining
[12:15:08] <d_bot_> <orbitz> np
[12:15:25] <d_bot_> <orbitz> And I know that sounds crappy, but the "Program the interface" solution has issues too, so it's a give and take
[12:15:41] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[12:16:11] <d_bot_> <sarna> yeah, but it's very nice when you consume libraries that were written in this manner
[12:16:18] <d_bot_> <orbitz> For example, in Java you can hav ea List value that is backed by an array or linked list and some code uses the `.get` method and for some reason the code sometimes really slow: it's because that interface doesn't really make sense for a linked list and it's really hard to see that this code is going to hav ea huge performance hit in those scenarios.  So, give and take.
[12:17:11] <d_bot_> <sarna> aye, true
[12:17:34] <d_bot_> <orbitz> @sarna IME, this is not so much of an issue in Ocaml.  Ocaml is, in general, quite fast so if you hit a performance bottleneck, it'll be a small piece of code that you want to control
[12:17:40] <d_bot_> <orbitz> but depends on your domain, of course
[12:19:43] <d_bot_> <orbitz> @sarna Also, IME, it's very rare to see code functorized over a data-type definition, and usually you functorize over a higher level concept, and maybe you change the data structure that higher level concept is implemented in.
[12:22:10] <d_bot_> <sarna> this performance example was just an example, another that comes to mind would be swapping a database driver
[12:22:38] <d_bot_> <sarna> but I think that would be functorized..
[12:23:49] <d_bot_> <orbitz> Possibly.  In my code bases I create my own storage type that has the interface I want for storage, and then I put behidn it whatever I want, and everything in the app uses that explicit type, which means I can change it whenever I want, but only one storage class exists in the whole application at a time.
[12:24:54] <d_bot_> <sarna> yeah, that's what I meant
[12:25:08] <d_bot_> <sarna> so I guess it's a non-issue :)
[12:26:09] <d_bot_> <orbitz> Depends on how you look at software.  I think if you're accustomed  to being able to flip out implementations in a low-effort away, it might be an issue üôÇ
[12:27:09] <d_bot_> <sarna> well IMO being able to swap stuff like this is very helpful, but it's not something that you do everyday
[12:27:29] <d_bot_> <orbitz> But again, it's a trade off.  For example I work with Django quite a bit and it's incredibly flexible, but I struggle to determine what code is being called in production because of that flexibility.  My ocaml projects are much less flexible but you know exactly what is running in production so goign from a production symptom to the bug in the code is, IME, more straight forward
[12:29:06] <d_bot_> <sarna> yeah haha, it's not fun when you know the interface but not sure what exactly gets called :D
[12:30:42] <d_bot_> <orbitz> @sarna Also, one way you can look at functors vs OOP-style dispatch tables is a functor lets you build an application out of components, so it's top-down in that sense.  Whereas OOP lets you change implementation at the leaves, so it's bottom-op.  So for something like the storage you wan to use, a functor might make sense.
[12:32:15] <d_bot_> <orbitz> You can also use first-class modules, which are basically objects
[12:32:35] <d_bot_> <orbitz> Or the actual objects that Ocaml has (although they tend to not be used)
[12:34:18] <d_bot_> <sarna> thanks for providing this perspective, I'm still like a little baby with OCaml modules and functors :))
[12:35:55] <d_bot_> <sabas3dgh> Could I write back end microservices that respond with JSON in OCaml?
[12:36:14] <d_bot_> <orbitz> sure
[12:37:51] <d_bot_> <sabas3dgh> Hi; I am even a step behind you. Whatare your reading materials? Please shareüëç
[12:39:59] <d_bot_> <sabas3dgh> What would be the tooling. Any libraries or frameworks for this task? Or Is it from scratch kinda deal‚ùî
[12:40:27] <d_bot_> <orbitz> There are lots of frameworks.  Dream is a popular one right now if you're making a webservice
[12:40:57] <d_bot_> <sabas3dgh> @mmatalka what else?
[12:41:03] <d_bot_> <orbitz> Eliom
[12:41:17] <d_bot_> <orbitz> you can make an HTTP server with Cohttp easily
[12:41:18] <d_bot_> <orbitz> or httpaf
[12:41:52] <d_bot_> <orbitz> Mirage probably has some things you can use here?  But that's probably heavy for normal usage
[12:43:16] <d_bot_> <sabas3dgh> I was looking for ocaml and all of them are from 2012~2016.Are they worth anything in terms of actually teaching updated stuff in 2022?
[12:43:29] <d_bot_> <orbitz> what do you mean?  Dream is quite new
[12:43:37] <d_bot_> <orbitz> ELiom is still updated. as is Cohttp
[12:43:56] <d_bot_> <orbitz> oh.  I don't know about any books
[12:43:59] <d_bot_> <sabas3dgh> üìó
[12:44:01] <d_bot_> <orbitz> I just read the language spec ha
[12:44:10] <d_bot_> <orbitz> that is a weakness for Ocaml.
[12:44:55] <d_bot_> <sabas3dgh> Well. I guess I have to start from somewhere.
[12:45:10] <d_bot_> <orbitz> there is a thread in the discourse about some ocaml book free on pdf?
[12:45:34] <d_bot_> <orbitz> https://discuss.ocaml.org/t/ocaml-from-the-very-beginning-now-free-in-pdf-and-html-formats/9361
[12:47:30] <d_bot_> <sabas3dgh> @mmatalka waw!!! Very good news in dead. Thank You üíØ
[12:49:00] <d_bot_> <Butanium (@me on answer)> https://cs3110.github.io/textbook @sabas3dgh
[12:50:49] <d_bot_> <sarna> @sabas3dgh I've been using mostly real world ocaml https://dev.realworldocaml.org/
[12:57:54] <d_bot_> <sabas3dgh> Thank U
[13:02:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[13:03:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:03:25] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[13:13:10] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[13:20:45] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[13:20:55] <d_bot_> <sabas3dgh> I am a bit üòï
[13:22:22] <d_bot_> <sabas3dgh> If I want to write my code in **myproject** directory. I should make **src** and then put my could inside?
[13:22:49] <d_bot_> <sabas3dgh> If so where would ‚Ä¢merlin file be located?
[13:22:57] <d_bot_> <darrenldl> thats often the preference
[13:23:24] <d_bot_> <darrenldl> .merlin file should be generated by dune(?) in _build directory
[13:24:30] <d_bot_> <sabas3dgh> Is there a command to make the accepted/universal directory structure from the get go?
[13:24:40] <d_bot_> <undu> you could put the code that forms a library in `/lib`, the code that build into a binary in `/bin`. Having a single directory for all the source code is not that useful, I've found
[13:25:20] <d_bot_> <undu> See https://github.com/lindig/hello for an example
[13:25:30] <d_bot_> <sabas3dgh> Where would be the *src* dir then?
[13:25:54] <d_bot_> <undu> the is no `src` dir
[13:26:48] <d_bot_> <darrenldl> largely depends on how many packages you want to house in your repo and how messy you want the github repo link to look
[13:26:52] <d_bot_> <Alex01379> hi
[13:26:53] <d_bot_> <Alex01379> How could I log the first letter each time?
[13:26:54] <d_bot_> <Alex01379> Like
[13:26:55] <d_bot_> <Alex01379> ["K√§fer", "ampel", "tisch", "zelt", "error"];
[13:26:57] <d_bot_> <Alex01379> would log "Katze"
[13:27:40] <d_bot_> <darrenldl> #beginners would be better suited for posting code snippets
[13:28:14] <d_bot_> <sabas3dgh> So I just my project in lib dir?
[13:28:43] <d_bot_> <darrenldl> depends on whether you are making a library or binary
[13:29:13] <d_bot_> <sabas3dgh> Binary I guess. It is a web service
[13:29:28] <d_bot_> <darrenldl> then usually src or bin
[13:29:39] <d_bot_> <Alex01379> ok sorry
[13:37:10] *** Joins: bartholin (~bartholin@109.53.6.234)
[13:47:18] <d_bot_> <sabas3dgh> üëç
[13:48:23] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[14:17:28] *** Quits: bartholin (~bartholin@109.53.6.234) (Ping timeout: 256 seconds)
[14:32:03] *** Joins: bartholin (~bartholin@109.53.0.196)
[14:50:06] *** Quits: bartholin (~bartholin@109.53.0.196) (Ping timeout: 272 seconds)
[15:03:40] *** Joins: bartholin (~bartholin@5.171.46.216)
[15:16:26] <d_bot_> <mseri> @aitap 2.48.3 requires ocaml 4.02. If you want to use a more recent ocaml version use 2.51.4 or 2.51.5. They are released in opam, you can install them with `opam install unison`
[15:28:12] *** Joins: olle (~olle@i5E866D8D.versanet.de)
[15:52:23] *** Quits: spip (~bobo@37.172.192.140) (Ping timeout: 256 seconds)
[15:52:23] *** Joins: bobo (~bobo@37.165.94.21)
[17:02:39] *** Quits: bartholin (~bartholin@5.171.46.216) (Ping timeout: 256 seconds)
[17:14:31] *** Joins: bartholin (~bartholin@109.53.5.39)
[17:25:20] <d_bot_> <morpheus> I‚Äôm trying to set up Merlin with ycm in vim. Is there anyway to make merlin‚Äôs error checking automatic? I try to set up g:ycm_language_server using the merlinserver binary, but I‚Äôm definitely doing something wrong ‚Ä¶
[17:25:41] *** Joins: gravicappa (~gravicapp@145.255.9.217)
[17:48:46] <d_bot_> <mseri> I do ‚Äòt think merlon supports lsp, I think you need ocamllsp (ocaml-lsp-server https://github.com/ocaml/ocaml-lsp)
[17:49:56] <d_bot_> <VPhantom> I don't know YCM, but with ALE I have interactivity with Merlin: warnings highlight the right areas of the editor, there's flags in the left gutter, etc.
[17:52:49] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[17:55:37] <d_bot_> <morpheus> Did you have to do configuration with ALE?
[17:55:38] <d_bot_> <morpheus> YCM seems to integrate merlin's auto complete pretty well, however the error needs to be checked manually, also :MerlinConstruct bugs out :ablobdizzy:
[17:56:15] *** Joins: gwizon (~gwizon@ool-45798b07.dyn.optonline.net)
[17:57:34] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Ping timeout: 272 seconds)
[17:59:09] *** Joins: hegz (~hegz@41.236.160.131)
[18:08:50] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:27:33] *** Joins: zebrag (~chris@user/zebrag)
[18:42:49] <d_bot_> <VPhantom> Yes I have a couple lines of OCaml-specific configuration for ALE. Let's see‚Ä¶
[18:44:44] <d_bot_> <VPhantom> I have an explicit specification of `ocamlformat` in the `ocaml` key of `g:ale_fixers` because I like to format on buffer save (and on demand). I also have `let g:ale_ocaml_ocamlformat_options = '--enable-outside-detected-project'` which I guess I needed somewhere. I have nothing about Merlin per se; I guess it was detected automatically.
[18:46:22] <d_bot_> <VPhantom> Note that if you `let g:ale_linters_explicit = 1` then you'll have to have an entry in `g:ale_linters` for OCaml.
[18:47:50] <d_bot_> <VPhantom> For tab completion I use `ervandew/supertab` which works 80-90% of the time.
[18:48:48] <d_bot_> <VPhantom> (I would dread having something pop-up without my explicitly asking for it, personally, so YCM is not an option for me.)
[18:58:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:59:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:02:30] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[19:02:36] *** Quits: bartholin (~bartholin@109.53.5.39) (Ping timeout: 240 seconds)
[19:08:36] <d_bot_> <morpheus> thx. I will check it out. I am gonna trying to switch from ycm to either ALE or coc, not just ocaml it was having so many problem with tsserver also
[19:12:24] *** Joins: oriba (~oriba@dynamic-077-191-072-113.77.191.pool.telefonica.de)
[19:13:31] <d_bot_> <VPhantom> There's several neat options in ALE. A couple nice things like `g:ale_sign_error` and `g:ale_sign_warning`, `g:ale_fix_on_save`. I also have custom `highlight` for `ALEErrorSign`, `ALEWarningSign`, `SpellBad` and `SpellCap` which were fun to figure out. üòâ
[19:22:13] *** Joins: bartholin (~bartholin@109.53.6.138)
[19:29:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:29:32] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[19:41:08] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[19:43:46] *** Quits: mbuf (~Shakthi@223.178.126.157) (Quit: Leaving)
[19:45:49] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Client Quit)
[19:47:40] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[19:52:42] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:57:55] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[19:59:10] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[20:18:48] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[20:19:37] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
[20:29:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[20:37:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[20:38:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[20:41:00] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[20:52:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:54:15] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[20:55:58] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:03:12] *** Quits: bartholin (~bartholin@109.53.6.138) (Ping timeout: 256 seconds)
[21:15:17] *** Joins: bartholin (~bartholin@109.53.2.160)
[21:15:27] *** Quits: mro (~mro@port-92-195-222-76.dynamic.as20676.net) (Remote host closed the connection)
[21:15:32] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb)
[21:42:25] *** Quits: gwizon (~gwizon@ool-45798b07.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:52:36] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 240 seconds)
[21:53:48] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[22:12:36] *** Quits: hegz (~hegz@41.236.160.131) (Ping timeout: 240 seconds)
[22:13:27] *** Joins: hegz (~hegz@41.236.160.131)
[22:16:59] *** Quits: hegz (~hegz@41.236.160.131) (Read error: Connection reset by peer)
[22:17:11] *** Joins: hegz (~hegz@196.154.130.143)
[22:17:42] *** Quits: hegz (~hegz@196.154.130.143) (Read error: Connection reset by peer)
[22:17:50] *** Joins: hegz (~hegz@41.236.160.131)
[22:18:07] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[22:18:20] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:31:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:32:14] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb) (Ping timeout: 260 seconds)
[22:32:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:32:34] *** Joins: epony (epony@user/epony)
[22:32:42] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:33:24] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[22:36:31] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[22:57:48] *** Joins: jlrnick (~josephler@2a01cb040a159400f9c44804ef6666b2.ipv6.abo.wanadoo.fr)
[23:02:36] *** Quits: bartholin (~bartholin@109.53.2.160) (Ping timeout: 240 seconds)
[23:16:48] *** Joins: bartholin (~bartholin@109.53.3.224)
[23:29:12] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:30:43] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[23:36:29] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[23:37:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:50:02] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Ping timeout: 250 seconds)
[23:51:55] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[23:54:08] *** Joins: mro (~mro@port-92-195-222-76.dynamic.as20676.net)
