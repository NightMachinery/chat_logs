[00:06:23] *** Joins: horribleprogram (~user@user/horribleprogram)
[00:06:48] <horribleprogram> how do namespaces work ffs
[00:07:05] <horribleprogram> so this header file has a class... it's in namespace net
[00:07:25] <traxex> I have a feeling you'll ask about ADT
[00:07:30] <horribleprogram> the .cc that includes it uses namespace net { namespace {
[00:07:35] <traxex> ADL*
[00:07:39] <horribleprogram> traxex: nope
[00:07:46] <horribleprogram> more from a "translation unit" perspective
[00:07:49] <traxex> okay, go on
[00:07:50] <horribleprogram> Ik what unnamed namespaces are
[00:08:02] <horribleprogram> basically they aren't "unnamed" compilers just make them unique
[00:08:04] <traxex> it's basically C++ version of adding "static" to every function
[00:08:07] <horribleprogram> yeah
[00:08:13] <horribleprogram> well every global
[00:08:19] <traxex> yes
[00:08:21] <traxex> true
[00:08:47] <CarloWood> What is the problem then?
[00:08:47] <horribleprogram> now this unnamed namespace is a nested namespace
[00:08:48] <traxex> so everything inside that namespace { ... } is only visible inside that .cc file
[00:08:54] <horribleprogram> yeah
[00:09:01] <horribleprogram> makes sense.. ik why they do that too
[00:09:14] <traxex> if those things want to access net::foo, it's maybe more convenient to have it inside namespace net
[00:09:23] <traxex> so that you can just access 'foo'
[00:09:35] <horribleprogram> okay let's talk about this particular concept
[00:09:39] <traxex> okay
[00:09:53] <horribleprogram> if I wrap code inside a namespace foo { ... }
[00:10:01] <horribleprogram> all the code in there has access to the foo:: stuff
[00:10:05] <horribleprogram> ?
[00:10:21] <CarloWood> no
[00:10:27] <horribleprogram> sort of like a class body can refer to its members without qualifying
[00:10:32] <traxex> similar
[00:10:32] <horribleprogram> hmm
[00:10:40] <CarloWood> You said 'has to'.
[00:10:53] <traxex> no, "has access to"
[00:10:55] <CarloWood> That is unrelated to your next sentence.
[00:11:13] <CarloWood> I can't read.
[00:11:17] <horribleprogram> :P no worries
[00:11:21] <traxex> if you have "class A" and "class B" inside foo, they can refer to each other as simply "A" and "B"
[00:11:24] <traxex> no need for "foo::A"
[00:11:27] <horribleprogram> I see
[00:11:42] <horribleprogram> NOW
[00:11:46] <traxex> the exact name lookup rules in C++ are very complicated and I don't know them
[00:11:49] <traxex> but let's go on
[00:12:12] <horribleprogram> the .h file has namespace Foo { class A{}; class B{}; } and the .cc includes it... but has namespace Foo { namespace {
[00:12:33] <horribleprogram> wait yeah now I understand
[00:12:45] <horribleprogram> nested namespaces have access to the outer namespaces
[00:12:55] <CarloWood> It's only about how stuff it looked up. If you have namespace X { namespace Y { auto n = foo; .. then foo is first searched for in X::Y then in X and finally in ::. The first foo it finds that way is used.
[00:12:59] <horribleprogram> i'm guessing unnamed namespaces will shadow names by the same name as the outer?
[00:13:09] <horribleprogram> AHH
[00:13:12] <horribleprogram> kk perfect
[00:13:14] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[00:13:40] <horribleprogram> where is namespaces in cppreference.com
[00:14:05] <horribleprogram> https://en.cppreference.com/w/cpp/language/namespace
[00:14:08] <horribleprogram> got it nvm
[00:14:11] <traxex> also https://en.cppreference.com/w/cpp/language/lookup
[00:14:18] <horribleprogram> yeah i need this too'
[00:14:27] <CarloWood> It's slightly more complex though: if foo is a function then overloading doesn't matter.  Say, you have: namespace X { void f(int); namespace Y { void f(); auto n = f(42); // won't compile.
[00:14:45] <traxex> back when http://www.cppgm.org/ was a thing, I read the current standard on these things
[00:14:50] <CarloWood> Because f is found in X::Y::f and there is not X::Y::f(int)
[00:14:58] <CarloWood> s/not/no/
[00:15:00] <horribleprogram> this makes sense tho
[00:15:13] <horribleprogram> ur not shadowing it
[00:15:17] <horribleprogram> WAIT
[00:15:19] <horribleprogram> it won't compile?
[00:15:23] <traxex> if C++ makes sense, you might be missing something
[00:15:41] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[00:15:42] <horribleprogram> how the hell doesn't that compile
[00:15:53] <horribleprogram> traxex: yeah it only made sense cuz I read it wrong
[00:15:55] <horribleprogram> lolol
[00:16:13] <horribleprogram> uk why C++ sucks?
[00:16:26] <horribleprogram> cuz u never know what implicit linkages, what decorations things have
[00:16:26] <CarloWood> { X::Y::test(); } namespace X { void f(int) {} namespace Y { void f(); /* hides X::f */  void test() { f(42); } } }
[00:16:26] <geordi> error: too many arguments to function 'void X::Y::f()'
[00:16:36] <CarloWood> Doesn't compile
[00:16:36] <traxex> yes this is a good point
[00:17:01] <traxex> probably unlikely to happen in most code
[00:17:03] <horribleprogram> CarloWood: this is due to what exactly
[00:17:17] <horribleprogram> lookup rule in specific
[00:17:28] <horribleprogram> f(42) is unqualified
[00:17:38] <CarloWood> What I said: it looks in X::Y first - finds X::Y::f and that's it. There is no X::Y::f(int) so no compile.
[00:17:40] <horribleprogram> it stops at namespace Y?
[00:17:43] <horribleprogram> AHHH
[00:17:54] <CarloWood> yes
[00:17:56] <traxex> you can't overload a function from an outer scope like this
[00:18:08] <traxex> I think compiler people are happy about this
[00:18:10] <CarloWood> Now add ADL and you know all about namespaces.
[00:18:20] <traxex> all?
[00:18:23] <horribleprogram> lol...
[00:18:24] <traxex> what about inline namespaces
[00:18:36] <horribleprogram> okay is this cuz of how lookup works?
[00:18:54] <horribleprogram> or because foo() is a function, it's implicitly static or some shit
[00:19:33] <horribleprogram> like does name resolution of f(42) stop at namespace Y in ur example because of some implicit linkage of a function?
[00:19:52] <CarloWood> ADL = Argument Dependent Lookup.  If you your argument lives in namespace A, then the function (f) is also looked for in namespace A. That is on top of Y (or X etc).
[00:20:09] <CarloWood> If it finds it in both - then it won't compile because it is ambiguous.
[00:20:47] <horribleprogram> 42 doesn't "live" anywhere tho
[00:20:59] <CarloWood> { X::Y::test(); } namespace X { struct S {}; void f(S) {} namespace Y { void f(); /* hides X::f */  void test() { S s; f(s); } } }
[00:21:00] <geordi>  
[00:21:07] <CarloWood> That DID compile.
[00:21:21] <CarloWood> Because now it looks in X ontop of Y. Because S is in X.
[00:21:40] <horribleprogram> okay give me 4 hours cuz that made no sense to me
[00:21:45] <horribleprogram> i gotta read the cppreference stuff
[00:22:40] <horribleprogram> okay then
[00:22:50] <traxex> that was a fast 4 hours?
[00:23:12] <CarloWood> It's not that hard... It looks for 'f' in X::Y, if no f is found at all, then in X etc.  It ALSO looks in the namespace of all arguments. If it finds f in any of those namespaces then those are used for overload resolution too.
[00:23:21] <horribleprogram> { using namespace std; auto endl = 10; cout << 100 << endl; }
[00:23:22] <geordi> 10010
[00:23:32] <horribleprogram> what the fuck?
[00:23:46] <traxex> this is why friends don't let friends using namespace
[00:24:05] <horribleprogram> ADL shoulda "bypassed" the endl
[00:24:26] <traxex> not sure how
[00:24:36] <horribleprogram> carlos just said
[00:24:48] <horribleprogram> cout.operator<<(100).operator<<(endl)
[00:24:55] <CarloWood> You defined endl as int in ::.  It first looks for endl in the current namespace and finds it. Doesn't matter that std::endl exists. It wouldn't even find that without your int.
[00:25:05] <traxex> yes
[00:25:16] <horribleprogram> so ADL doesn't exist?
[00:25:21] <traxex> it does
[00:25:23] <CarloWood> There is no adl here.
[00:25:59] <CarloWood> If you use std::endl then there is adl: then it finds the operator<< that is defined in std.
[00:26:00] <horribleprogram> kk brb for another 4 hours
[00:26:05] <horribleprogram> OH
[00:26:12] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe)
[00:26:24] <CarloWood> s/hours/seconds/
[00:26:27] <horribleprogram> { auto endl = 10; std::cout << 100 << endl; }
[00:26:28] <geordi> 10010
[00:26:41] <horribleprogram> { auto endl = 10; std::cout << endl; }
[00:26:41] <geordi> 10
[00:26:45] <horribleprogram> fuck u
[00:26:46] <CarloWood> Maybe you mean:
[00:26:56] <horribleprogram> I never said ::endl;
[00:27:02] <CarloWood> { auto endl = 10; std::cout << endl; } using endl = std::endl;
[00:27:02] <geordi> error: 'endl' in namespace 'std' does not name a type
[00:27:05] <CarloWood> hmm
[00:27:18] <horribleprogram> wtf is the point of ::x then
[00:27:23] <horribleprogram> if it does it automatically
[00:27:45] <CarloWood> you said 'endl'.  That is not std::endl
[00:28:45] <CarloWood> { auto endl = 10; std::cout << endl; } using std::endl;
[00:28:46] <geordi> 10
[00:29:10] <horribleprogram> { template<typename T> T max(T a, T b) { std::cout << "non std max" << '\n'; return a < b ? b : a; std::cout << max(10, 20)} #include <algorithm>
[00:29:10] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[00:29:20] <CarloWood> The 'auto endl' hides the ::endl here.
[00:29:30] <CarloWood> because it's a local variable I think.
[00:29:39] <horribleprogram> I didn't explicitly use std::cout << ::endl;
[00:29:43] <CarloWood> Or just cause it is defined after...
[00:29:48] <horribleprogram> jesus
[00:29:54] <horribleprogram> yeah +
[00:29:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:29:59] <horribleprogram> we have an added abstraction
[00:30:02] <CarloWood> { using std::endl; auto endl = 10; std::cout << endl; }
[00:30:02] <geordi> error: 'auto endl' conflicts with a previous declaration
[00:30:15] <CarloWood> Now finally it has a problem.
[00:30:19] <horribleprogram> which is the geordi thing... so I'm moving to real C++
[00:30:37] <horribleprogram> CarloWood: yeah that makes sense with a using declaration tho
[00:31:05] <CarloWood> Without the 'using' your '<< endl' will NEVER see std::endl. How would it?!
[00:31:10] <horribleprogram> ADL
[00:31:12] <CarloWood> no
[00:31:17] <CarloWood> That is no what ADL is
[00:31:29] <horribleprogram> okay brb 4 hours
[00:31:36] <CarloWood> you don't find the arguments - you find the functions that you pass the argument to.
[00:31:42] <horribleprogram> AHHH
[00:31:45] <horribleprogram> it's the reverse then
[00:31:49] <horribleprogram> cout << std::endl;
[00:31:54] <horribleprogram> would bypass a auto cout = 10;
[00:31:55] <horribleprogram> ?
[00:31:57] <CarloWood> that find operator<<
[00:32:04] <horribleprogram> { auto cout = 10; cout << std::endl; }
[00:32:04] <geordi> error: invalid operands of types 'int' and '<unresolved overloaded function type>' to binary 'operator<<'
[00:32:12] <CarloWood> no, the only function here is operator<<
[00:32:20] <horribleprogram> oh
[00:32:23] <CarloWood> std::endl nor std::cout are functions.
[00:32:38] <horribleprogram> wait
[00:32:40] <horribleprogram> what
[00:32:57] <horribleprogram> fuck u C++
[00:33:05] <CarloWood> ADL finds functions, based on the namespace of their arguments.
[00:33:19] <horribleprogram> only functions tho
[00:33:31] <horribleprogram> so ADL doesn't apply to finding classes?
[00:33:38] <CarloWood> no
[00:33:43] <traxex> there is no argument
[00:33:55] <traxex> when you write "class_name"
[00:34:04] <horribleprogram> std::cout << class_name
[00:34:06] <CarloWood> Maybe if you use a constructor, that is a function.
[00:34:07] <horribleprogram> that's an argument
[00:34:19] <horribleprogram> operator<<(std::cout, class_name);
[00:34:20] <traxex> does that compile?
[00:34:25] <traxex> std::cout << int; ?
[00:34:26] <horribleprogram> I think so
[00:34:34] <traxex> you need to pass an instance
[00:34:37] <traxex> not the class name
[00:34:47] <horribleprogram> i thought class_name was an object of class
[00:34:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:34:51] <horribleprogram> sorry sorry
[00:35:03] <horribleprogram> yeah we're getting confused here
[00:35:07] <horribleprogram> ty tho
[00:35:13] <horribleprogram> I get why the unnamed namespace thing works
[00:35:18] <horribleprogram> but the rest of it just made no sense to me
[00:35:35] <CarloWood> { N::S s; A a(s); /* does this find A? I doubt it */ }   namespace N { struct S {}; struct A { A(S){} }; }
[00:35:35] <geordi> error: 'A' was not declared in this scope; did you mean 'N::A'? (fix known)
[00:36:20] <horribleprogram> yeah
[00:36:26] <CarloWood> So no.  It would find N::A::A(N::S) because N::S is in N, but you start with saying 'A' (in A a(S)) and that is just a type - it has no idea where A is.
[00:37:02] <horribleprogram> how do u go about trying this stuff?
[00:37:10] <horribleprogram> do u check how names are mangled?
[00:37:15] <horribleprogram> to see why?
[00:37:18] <CarloWood> trying?
[00:37:20] <horribleprogram> yes
[00:37:28] <CarloWood> What do you mean?
[00:37:29] <horribleprogram> nvm
[00:37:38] <horribleprogram> it's all good I got the info
[00:37:45] <horribleprogram> ;) tc guys happy new years
[00:37:50] <CarloWood> You too.
[00:37:52] <horribleprogram> better 2022
[00:38:01] <horribleprogram> { 2021++; }
[00:38:01] <geordi> error: lvalue required as increment operand
[00:38:03] <horribleprogram> :P
[00:38:09] <horribleprogram> obviously
[00:38:25] <horribleprogram> geordi: u ever think about killing yourself?
[00:38:25] <geordi> error: 'u' does not name a type
[00:38:32] <horribleprogram> :P
[00:38:33] <CarloWood> Interesting fact: I never do this (help people exclusively). One of the reason being that they react too slow and I get bored. You were never slow :).
[00:38:43] <horribleprogram> lol
[00:38:45] <horribleprogram> tysm <3
[00:38:56] <horribleprogram> one of the best spoon feeders is Surial
[00:39:06] <CarloWood> But also, because I am always busy doing something... this time I just decided to make chatting here my priority. It was a pleasure.
[00:39:07] <horribleprogram> he's a mod in ##java, he'll walk you through everything
[00:39:10] <horribleprogram> LOL
[00:39:13] <horribleprogram> yeah I feel you
[00:39:19] <horribleprogram> it's slow today in this chat too
[00:39:23] <horribleprogram> so it's a good day to get spoonfed
[00:39:25] <horribleprogram> <3
[00:39:31] *** Parts: horribleprogram (~user@user/horribleprogram) (ERC (IRC client for Emacs 27.2))
[00:39:41] <CarloWood> Oh - another reason: normally when I answer someone here - someone ELSE also answers and then the one asking the question starts to address them with a prefix.
[00:39:53] <CarloWood> Then I immediately go start doing something else lol.
[00:40:08] <CarloWood> But it it is New Year and I had to channel to my own it seems :)
[00:40:15] <CarloWood> But now*
[00:40:26] <CarloWood> Exactly
[00:42:29] <CarloWood> I am normally extremely impatient anyway.  If someone asks a question and doesn't give enough information; and/or I want them to think about it more. Then I start with a very vague "answer". Something that really only points out how stupid their question is (so they have to rethink it and correct themselves).
[00:42:43] <CarloWood> So if anyone else starts helping too, then they surely turn to those :p
[00:47:49] <CarloWood> horribleprogram: homework: as the X::Y example showed, it 'descents' the namespaces, first X::Y and then X and then ::.  Find out if it also does that for ADL.  Aka, if you pass an argument in A::B::C and it doesn't find the function in A::B::C does it look for the function in A::B and then in A?
[00:49:57] <kalven> they left
[00:51:18] <LordKalma> !rq
[00:51:18] <nolyc> LordKalma: <great_taste> C++ feels like a prank at times
[00:52:53] <LordKalma> indeed
[00:59:36] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:00:11] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[01:02:07] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 250 seconds)
[01:04:20] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:04:31] <Alipha> CarloWood: I think you need `return std::move(sink).str();` to get a move there, re: https://wandbox.org/permlink/uL6vaEtXdiIGjnC5
[01:05:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:06:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:09:50] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:fa8d:3847:277d:f878)
[01:09:50] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:fa8d:3847:277d:f878) (Changing host)
[01:09:50] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:12:57] <xkoncek> would you say that C++ language rules are more complex than any other mainstream language?
[01:17:14] <xkoncek> !rq
[01:17:14] <nolyc> xkoncek: <rpav> let's all switch to perforce
[01:17:26] <xkoncek> what is that?
[01:18:34] <kalven> a source control system
[01:18:47] <ville> xkoncek: it's a unique mix at least. rust is certainly trying to challenge on complexity
[01:21:31] <ville> admittedly i've not followed rust development for couple years. but when i did it didn't look like that their trajectory was towards a simple language
[01:24:56] <xkoncek> even if they simply "cleanly re-do" most of c++ features, it will bring a lot of complexity
[01:26:57] <Alipha> xkoncek: you have ADL backwards. The function to be called is determined by the namespace of the arguments, not funding the arguments is determined by the namespace of the function
[01:27:08] <Alipha> --no-using-std { int x, y;  swap(x, y); }
[01:27:22] <Alipha> geordi: --no-using-std { int x, y;  swap(x, y); }
[01:27:22] <geordi> error: 'swap' was not declared in this scope
[01:27:29] <Alipha> geordi: --no-using-std { std::string x, y;  swap(x, y); }
[01:27:30] <geordi>  
[01:27:54] <xkoncek> did you mean to ping me?
[01:27:58] <Alipha> *finding
[01:28:24] <xkoncek> CarloWood or horribleprogram
[01:28:36] <Alipha> Oops, no. You're the same color as horribleprogram on my client :-)
[01:28:57] <Alipha> Well, horribleprogram left, so... CarloWood ^
[01:32:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe) (Quit: Quit)
[01:33:21] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[01:38:29] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[01:40:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:26] *** ChanServ sets mode: +v npaperbot
[01:54:05] *** Joins: Burgundy (~yomon@79.115.213.171)
[01:55:32] *** Quits: yomon (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[01:56:12] <very_sneaky> Alipha: yeah command line arguments are identical as on github actions
[02:08:02] <Alipha> very_sneaky: then I guess it must be a custom compiler. I know github has a security-related static analysis product for enterprise customers
[02:12:25] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:12:45] <RandomReader> there have been gcc bugs in the past where that comes up due to inlining, with the report in the wrong location, so if you don't have an identical environment it would not be unusual that it isn't reproduced
[02:14:57] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[02:16:48] <RandomReader> xkoncek - C++ *language* rules? probably more complex .. complexity in the space of practical programming? definitely not
[02:20:02] <RandomReader> one example is that several of the dynamic languages tend to surface more "action at a distance" styles of complexity in common practice
[02:20:42] <LordKalma> I bet Bjarne smoked a loot of weed during his PhD, and that's how we got C with classes bases on SCALA or whatever the inspiring language was called
[02:20:45] <RandomReader> I mean you can write spaghetti code in any language, but in this case I mean in more forms than what C++ supports, so the usage pressures are different
[02:21:56] <LordKalma> He's right though in saying that there are only languages that people complain about and languages that people don't use.
[02:22:04] <RandomReader> you think C++ was inspired by a Java-influenced language that came along 20 years later? :P
[02:22:32] <LordKalma> I'm likely misremembering the name
[02:23:07] <LordKalma> Simula, not Scala
[02:23:14] <LordKalma> Anyway
[02:24:29] <RandomReader> also apparently Modula-2, Ada, Smalltalk, Mesa, Clu, Algol68, BCPL
[02:24:38] <LordKalma> My biggest beef with c++ isn't the weird language rules. All languages have weird language rules. It's just how unergonomic it is and how difficult it becomes to do application programming with it without reinventing the wheel
[02:24:52] <RandomReader> and Pascal
[02:25:14] <LordKalma> Haha I also went to Wikipedia to check my memory, but I remember Bjanre talking about algol and simula in particular
[02:25:47] <RandomReader> I think those two have the most direct representations in the language
[02:26:09] <RandomReader> the others being more "what if" conceptual kinds of things
[02:26:18] <LordKalma> That would be consistent with his talks
[02:26:28] <LordKalma> But I don't know their paradigms to comment
[02:27:00] <RandomReader> me neither
[02:27:34] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:29:28] <LordKalma> C++ is like the language I want to use but keeps showing me its hard to haha
[02:30:52] <ville> i've been saying this for some years: there must exist a reasonable language somewhere between c and c++
[02:31:20] <kalven> like zig?
[02:31:24] <ville> and throw in a 3rd language in the mix to get some features
[02:32:01] <ville> zig doesn't appear entirely terrible, but then again i've not used it for 5 years to be able to evaluate it
[02:32:25] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[02:32:58] <ville> i guess from up-and-coming languages it seems most reasonable. let's see how it ends up when they release a 1.0
[02:33:20] <ville> there's plenty of time for it to go off the rails
[02:34:37] <very_sneaky> LordKalma: i think that's more a cultural issue than a language issue
[02:35:18] <very_sneaky> (the reinventing the wheel observation)
[02:35:37] <LordKalma> It's an ecosystem issue. All languages have 500 libraries that reinvent the wheel
[02:35:49] <LordKalma> In c++ you have to forge your own hammer first
[02:36:13] <LordKalma> In C you have to build the foundry, but that's another conversation
[02:36:18] <ville> LordKalma: no idea what that means? you're saing there aren't libraries then?
[02:36:22] <very_sneaky> right, but the ecosystem has been that way because of the C++ community culture - I've been surprised at how much moral opposition there is to package management
[02:36:22] <ville> saying
[02:36:38] <Hello71> npm install left-hammer
[02:37:24] <LordKalma> There are. But I feel the libraries tend to be very in line with core c++: zero overhead abstractions, very loosely coupled and basic building blocks
[02:37:33] <LordKalma> Which is great, for some stuff
[02:37:39] <LordKalma> For others not so much
[02:38:02] <LordKalma> Hello71: it unironically does help...
[02:38:07] *** Joins: geli (~gelignite@55d465a4.access.ecotel.net)
[02:38:08] *** Joins: Leo_V (~Leo@157.52.18.77)
[02:38:24] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[02:39:39] <RandomReader> there have been others, they just didn't go anywhere commercially
[02:39:58] <RandomReader> Borland/Embarcadero VCL for example
[02:40:03] *** Joins: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch)
[02:40:10] *** Joins: cursey_ (~cursey@user/cursey)
[02:40:54] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:41:04] *** Joins: wyre_ (~wyre@user/wyre)
[02:41:24] *** Joins: m_tadeu_ (~quassel@bl11-135-102.dsl.telepac.pt)
[02:42:36] *** Joins: phoenix1 (phoenix@user/phoenix)
[02:42:42] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[02:42:51] *** Joins: ville_ (~ville@82-181-178-111.bb.dnainternet.fi)
[02:43:11] *** Joins: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[02:43:16] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[02:45:48] *** Joins: traxex_ (traxex@sdf.org)
[02:47:05] *** Quits: traxex_ (traxex@sdf.org) (Changing host)
[02:47:05] *** Joins: traxex_ (traxex@user/traxex)
[02:47:09] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Killed (calcium.libera.chat (Nickname regained by services)))
[02:47:09] *** ville_ is now known as ville
[02:47:27] *** Quits: Burgundy (~yomon@79.115.213.171) (*.net *.split)
[02:47:27] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (*.net *.split)
[02:47:27] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (*.net *.split)
[02:47:28] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[02:47:28] *** Quits: AmR (~AmREiSa@156.199.20.227) (*.net *.split)
[02:47:28] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[02:47:28] *** Quits: Leone (~Leo@157.52.18.77) (*.net *.split)
[02:47:28] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[02:47:28] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[02:47:28] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[02:47:28] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[02:47:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[02:47:28] *** Quits: spartacus (~root@172-105-20-45.ip.linodeusercontent.com) (*.net *.split)
[02:47:28] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[02:47:28] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[02:47:28] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[02:47:28] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[02:47:28] *** Quits: kapil (~kapil@okweb.co.in) (*.net *.split)
[02:47:28] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[02:47:28] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (*.net *.split)
[02:47:28] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[02:47:28] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[02:47:28] *** Quits: tabakhase (~tabakhase@user/tabakhase) (*.net *.split)
[02:47:28] *** Quits: traxex (~traxex@user/traxex) (*.net *.split)
[02:47:28] *** Quits: phoenix (~phoenix@user/phoenix) (*.net *.split)
[02:47:28] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[02:47:28] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[02:47:28] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[02:47:28] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[02:47:28] *** Quits: xcm (~xcm@user/xcm) (*.net *.split)
[02:47:29] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[02:47:29] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[02:47:29] *** Quits: DrMax_ (~DrMax@132.215.96.36) (*.net *.split)
[02:47:29] *** Quits: BrandonArnold (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[02:47:29] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[02:47:29] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[02:47:29] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[02:47:29] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (*.net *.split)
[02:47:29] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[02:47:56] *** Joins: tabakhase (tabakhase@user/tabakhase)
[02:48:14] *** very_sneaky_ is now known as very_sneaky
[02:48:36] <ville> LordKalma: if you want an all encompassing framework then qt?
[02:49:00] <RandomReader> I don't personally see package management as any kind of solution though, it's not like the libraries you get from them are integrated in practice
[02:49:45] <RandomReader> a lot of the effort just seems to go into tying them together, which isn't any less in the long run, just differently focused
[02:50:25] *** Joins: zoraj (~zoraj@209.126.81.159)
[02:50:25] *** Joins: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[02:50:25] *** Joins: Burgundy (~yomon@79.115.213.171)
[02:50:25] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[02:50:25] *** Joins: AmR (~AmREiSa@156.199.20.227)
[02:50:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:50:25] *** Joins: spartacus (~root@172-105-20-45.ip.linodeusercontent.com)
[02:50:25] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[02:50:25] *** Joins: Trollmann (~Trollmann@user/trollmann)
[02:50:25] *** Joins: BluesBoy (~bboy@user/bluesboy)
[02:50:25] *** Joins: kapil (~kapil@okweb.co.in)
[02:50:25] *** Joins: noarb (~noarb@user/noarb)
[02:50:25] *** Joins: jkl (~jkl@user/jkl)
[02:50:25] *** Joins: dextaa (~DV@user/dextaa)
[02:50:25] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[02:50:25] *** Joins: undeclared (nullx@user/undeclared)
[02:50:26] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[02:50:26] *** Joins: xcm (~xcm@user/xcm)
[02:50:26] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[02:50:26] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[02:50:26] *** Joins: Oxyd (~oxyd@user/oxyd)
[02:50:26] *** Joins: xisop (~xisop@bnull.net)
[02:50:26] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[02:51:05] <RandomReader> (plus increased effort in stability management and debugging, for those environments that lean toward always-latest-version style dependencies)
[02:51:32] <ville> that's what programming is apparently these days. picking 3rd party libraries, plumbing them together and then redoing everything 12 months down the road
[02:51:56] <ville> when whatever framework you picked is no longer considered clean or modern
[02:52:26] <kalven> I haven't really seen that at work
[02:53:45] <ville> i was discussing the situation with some very new developers doing web things. the companies the worked at were startup-ish, with very low average age. "senior" programmers were... 25
[02:53:50] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[02:54:08] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[02:58:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:01:37] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Ping timeout: 240 seconds)
[03:02:19] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[03:02:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[03:02:51] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[03:03:33] <Plazma> LordKalma: and they become part of every other library..and then it gets removed from npm breaking upstream everywhere
[03:03:46] <Plazma> IsFalse()
[03:04:44] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:06:46] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[03:10:52] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[03:12:17] *** Inline__ is now known as Inline
[03:19:08] *** Quits: immibis (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[03:19:14] <xkoncek> {time_t t; time(&t); cout << asctime(localtime(&t));}
[03:19:15] <geordi> Fri Dec 31 23:49:15 2021
[03:21:35] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[03:32:00] *** Quits: fentanyl (~chroot@user/sapi01) (Quit: leaving)
[03:32:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[03:37:22] <xkoncek> {time_t t; time(&t); cout << asctime(localtime(&t));}
[03:37:23] <geordi> Sat Jan  1 00:07:23 2022
[03:40:25] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[03:41:12] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe)
[03:42:10] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[03:42:28] <Alipha> PJBoy isn't here to see the wallop
[03:42:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:43:56] *** Joins: fentanyl (~chroot@user/sapi01)
[03:44:10] *** Quits: fentanyl (~chroot@user/sapi01) (Client Quit)
[03:44:31] <very_sneaky> well, balls. trying to replicate my github actions environment in docker didn't repro the null dereference issue either
[03:46:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:51:55] *** Joins: Leone (~Leo@157.52.18.77)
[03:52:44] *** Joins: ADHD (~xxx@bison.sh3ll.ru)
[03:52:57] *** Quits: Leo_V (~Leo@157.52.18.77) (Ping timeout: 240 seconds)
[03:58:49] *** traxex_ is now known as traxex
[03:59:05] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[03:59:09] <spartacus> ha yeah, that wallop is something else given who's sending it
[03:59:47] <mike18> hi is there a way to pass  vector<int>{1, 2} to a function in form of void foo(vector<int>{1, 2}) ?
[04:00:20] <spartacus> so, im new to sockets in general.  trying to make a basic HTTP/2 implementation.  Finally got the threading model worked out, but, I'm back to sockets again as for some reason it wants to repeatedly send the request response to the client :/ https://zerobin.net/?ea63b3397e8930c5#4JOOY7r9i69DMQ1DpTrN9RBi0NQ6l2UwVEaGbNkJRxo=
[04:00:30] <xkoncek> are you definig the funtion or invoking it?
[04:01:33] <mike18> xkoncek: you refer to me?
[04:01:41] <xkoncek> yes
[04:01:52] <CarloWood> mike18: You mean,...
[04:02:37] <CarloWood> { f({1, 2}); }   void f(std::vector<int> v) { cout << "Called f with " << v; }
[04:02:38] <geordi> Called f with {1, 2}
[04:02:52] <mike18> oh
[04:03:05] <mike18> that makes sense
[04:03:27] <mike18> i currently get: no matching function for call to ‘... <brace-enclosed initializer list>
[04:03:45] <CarloWood> with what code?
[04:06:04] <CarloWood> Alipha: I didn't get it wrong. I also corrected horribleprogram
[04:08:02] <CarloWood> { stringstream ss; ss << "Hello"; std::string s("junk"); s = std::move(ss).str(); cout << s; }
[04:08:03] <geordi> Hello
[04:08:05] <spartacus> should I be closing the socket after sending back the response or should I let the client d/c gracefully?
[04:08:30] <CarloWood> Would that move "Hello" to s, or do I need something else?
[04:09:24] <Alipha> !give mike18 testcase
[04:09:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[04:09:25] <nolyc> mike18: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[04:09:52] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:11:37] <Alipha> mike18: I would guess you'd get that error either because the function expects a reference to a non-const vector, or that the function is templated
[04:14:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[04:15:02] <spartacus> hrm, yeah, i'd expect that while loop on read() to complete at 0 and then disconnect :/
[04:15:10] <CarloWood> spartacus: the server can decide to be done with a client and close the socket. But that means you might miss additional data that was sent by the client of course. Same the other way around. So it depends on the protocol.
[04:15:38] <CarloWood> It only returns 0 when the socket was closed at the other end.
[04:16:01] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:16:45] <spartacus> CarloWood: thanks.  This will eventually be an HTTP/2 implementation
[04:17:32] <spartacus> i have it set up with a generic "it works!" http2 response
[04:17:36] <CarloWood> Why are you writing this? Seems like reinventing the wheel all over for the 100th time. Plus, if you want to do it Right(tm), it will take you 10 years (I know, I did that).
[04:18:08] <Hello71> and it will still be wrong
[04:18:14] <spartacus> because it will make me better and i'll make friends with smart people along the way :)
[04:18:29] <CarloWood> haha *checks for any smart friends*
[04:18:57] <Hello71> doesn't http/2 have mandatory keepalive or something
[04:19:03] <CarloWood> Lemme find the point in my code where this 'read()' is done and scare you with it...
[04:19:40] <spartacus> it's a fun project so far i just also wish the code knew what my brain wanted
[04:19:52] <Hello71> but even with http/0.9, you need to call shutdown. you can't do nothing because then the client doesn't know when the response is complete, and you can't close the socket because then the client will receive RST and return an error
[04:20:04] <spartacus> yes
[04:20:32] <CarloWood> spartacus: https://github.com/CarloWood/evio/blob/master/InputDevice.cxx#L140
[04:20:47] *** Quits: geli (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[04:21:01] <mike18> Alipha: https://ideone.com/UC0ZH4
[04:21:17] <spartacus> jeez CarloWood
[04:21:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:21:57] <Alipha> mike18: {&k}
[04:22:11] <Alipha> mike18: {k} would be a vector<node>
[04:22:16] <CarloWood> spartacus: really you should start reading at line 96 I guess.
[04:22:18] <mike18> Alipha: the error is so confusing!
[04:22:39] <Alipha> mike18: unfortunately, c++ isn't great with errors
[04:22:49] <spartacus> im sure it's well formed, but i feel obligated to complain about code readability
[04:24:37] <spartacus> i think...what im failing to do is send a Content-Length header
[04:25:13] <Alipha> mike18: make sure that the pointers in the vector remain valid (ie, the objects they point to don't go out of scope)
[04:25:24] <mike18> yeah
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:35] <mike18> i create objects with new
[04:26:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[04:29:20] <spartacus> it was the Content-Length header :D
[04:30:26] <spartacus> awesome so it looks like ill be learning http2 while learning c++, sentencing me to forever be asking questions in the wrong channels lol
[04:31:17] <CarloWood> spartacus: you complaint about code readability just means that you read it and don't understand it. This is normal. It is just so complex what is going on that you can't understand it without studying the whole library for a months :p.  It doesn't mean the code is bad, or rather, could be improved to be more readable. No amount of rewrite would make the underlaying stuff less complex.
[04:31:43] <spartacus> CarloWood: generally agreed, I'm not a native c++ person; just out of curiosity what is "Right"?
[04:32:28] <spartacus> in most high level language shops we take bullets for using one-true-way language but i'd imagine alot of socket stuff is pretty much carved into stone in 2022
[04:32:44] <yates_home> ville: i'm adapting your clang/opt command to ggenerate dependence graphs. it is partically working, but i only get graphs two levels deep
[04:37:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:37:56] <CarloWood> spartacus: In my case "Right" means maximum speed.  No copying of data, no allocations that could be avoided, no blocking (putting threads to sleep just because you are lazy), etc.  This library is able to read and write sockets at the same time (I don't know of any other library that can do that; even though sockets are capable of that), and uses a complex buffer algorithm that is even aware of the protocol (average
[04:37:56] <CarloWood> message lengths etc) in order to minimize the need to copy data in order to create contiguous messages.
[04:39:58] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:40:53] <CarloWood> spartacus: data is read into a buffer that exists of memory blocks, but it should hardly ever happen that a message is read over the end of a block into a new block (which would require to copy that message elsewhere in order to make it contiguous). In coming messages are scanned with protocol dependent "end of message" functions (in place in the buffer) to find decodable messages. And then those are passed as a
[04:40:53] <CarloWood> buffer(block) "view" to the decoder - so they are decoded in-place right where they were read into memory from the socket.
[04:42:29] <CarloWood> spartacus: I have several protocols that I current support - which are object oriented. This code can switch halfway from protocol decoder (ie, the html header decoder detects the content-type and then switches to the decoder for that content)
[04:42:30] <spartacus> so highly optimized
[04:42:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[04:42:54] <CarloWood> Yup - designed for maximum speed
[04:43:49] <kalven> max speed is overrated :)
[04:43:53] <CarloWood> If you don't care about using a thread per socket, and blocking - and/or copying data two three times while decoding it - and alternating reading and writing of a socket... then everything becomes a lot more "readable" and can get done in way under 10 years I am sure :P
[04:44:32] <spartacus> well my intention was to do that and then spend ten years cleaning it up as suggestions become understandable
[04:45:00] * spartacus copies a buffer to an unused char array just to hear the squirms
[04:46:48] <CarloWood> I still don't know if this actually MOVES the string (aka, NO COPYING ;)...
[04:47:17] <spartacus> so currently i have the skeleton in place for a generic no-protocol-implemented tcp server w/ threading/etc so i better upload this before doing either the mq project or the http project :)
[04:47:21] <CarloWood> { stringstream ss; ss << "Hello"; std::string s("junk"); s = std::move(ss).str(); cout << s; }
[04:47:22] <geordi> Hello
[04:47:38] <Plazma> oh geordi is the bot who talks hello
[04:47:42] <Plazma> .theo
[04:48:09] <CarloWood> I suppose it is moved when "junk" is really gone?
[04:48:28] <CarloWood> { stringstream ss; ss << "Hello"; std::string s("junk"); s = std::move(ss).str(); cout << ss.str(); }
[04:48:28] <geordi>  
[04:48:35] <CarloWood> I am not convinced though...
[04:51:21] <CarloWood> { stringstream ss; ss << "Hello"; std::string s("junk"); Q q; q = std::move(ss).str(); } struct Q { void operator=(std::string const&) {} };
[04:51:21] <geordi>  
[04:51:55] <CarloWood> See.. it has no problems passing that to a normal assignment operator :(
[04:52:12] <CarloWood> { stringstream ss; ss << "Hello"; std::string s("junk"); Q q; q = std::move(std::move(ss).str()); } struct Q { void operator=(std::string const&) {} };
[04:52:12] <geordi>  
[04:52:15] <CarloWood> what
[04:53:10] <CarloWood> Why does that compile? :/
[04:55:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:56:26] <spartacus> hrm.  questionable code implementation, doesn't do much but wants to, eats alot of resources....naming this server after my dog
[04:59:51] *** Joins: supernova (~quassel@2405:9800:ba11:6207:9b84:7f77:7e16:9bc9)
[05:06:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[05:07:21] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6ebd:9831:1706:e3de:b0b8)
[05:08:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:09:24] *** Quits: supernova (~quassel@2405:9800:ba11:6207:9b84:7f77:7e16:9bc9) (Ping timeout: 240 seconds)
[05:09:34] *** Quits: p-i- (~Ohmu@mx-ll-180.183.72-213.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[05:09:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[05:12:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 268 seconds)
[05:15:00] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[05:15:29] *** Quits: spartacus (~root@172-105-20-45.ip.linodeusercontent.com) (Quit: Lost terminal)
[05:19:01] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:21:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[05:24:04] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a03b:7e8b:865d:f453)
[05:24:35] <kalven> CarloWood: a const lvalue ref can bind to an rvalue
[05:25:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[05:32:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[05:36:10] *** Joins: immibis (~hexchat@62.156.144.218)
[05:38:13] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:39:33] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[05:40:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:29] *** ChanServ sets mode: +v npaperbot
[05:44:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[05:58:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:02:00] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:02:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[06:12:32] *** Quits: jsbach (~jsbach@2a01:c23:5cca:6000:4f07:ad77:c11c:4695) (Quit: Leaving)
[06:17:06] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:17:24] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:18:11] <RandomReader> I like this page for a short summary of the reference binding rules: https://codesynthesis.com/~boris/blog/2012/07/24/const-rvalue-references/
[06:25:42] *** Joins: spartacus (~root@172-105-20-45.ip.linodeusercontent.com)
[06:26:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:27:56] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:27:57] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:29:31] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:31:04] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a03b:7e8b:865d:f453) (Quit: Textual IRC Client: www.textualapp.com)
[06:32:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:32:58] <spartacus> so this is rather frustrating: https://zerobin.net/?82d32197323ec8f0#XXLD6+SZEssLPr+dsfWiWnDSI1/j0wu7l1Gu0t8PkmE= | apparently ofstream doesn't like to be a class member?
[06:34:42] <spartacus> looking at L32 and L56 that appears to be correct but the compile calls it ill-formed
[06:37:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[06:41:19] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a03b:7e8b:865d:f453)
[06:43:08] <RandomReader> ofstream is a polymorphic base, and is not copyable .. it's not a handle type
[06:43:32] <RandomReader> you'd use a pointer or reference to one, it's not something you'd store directly
[06:44:01] <RandomReader> oh, sorry, I misread what you were asking
[06:44:07] <RandomReader> the relevant part in this case is just that it's not copyable
[06:45:18] <RandomReader> you also seem to be using an older C++ revision, would recommend specifying C++17 if possible
[06:45:26] <spartacus> so if i can't make it a class member then how would i ensure it stays in scope when i use a pointer to it
[06:46:09] <RandomReader> the C++17 part will probably solve this, if I guess the missing code correctly
[06:46:39] <spartacus> c++ (GCC) 11.2.1 20210728 (Red Hat 11.2.1-1)
[06:46:57] <RandomReader> it's something you'd need to specify
[06:47:19] <RandomReader> typical flags for gcc would be along the lines of  -std=c++17 -Wall -Wextra -pedantic-errors
[06:47:33] *** Joins: ferdna (~ferdna@user/ferdna)
[06:47:45] <RandomReader> also -O2 where practical, besides optimization it also enables some additional static analysis for gcc (which translates to useful warnings)
[06:48:05] <spartacus> oh i see, looks like im using 14 in CMakelists.txt
[06:48:35] <spartacus> yeah thanks for that, the warnings are getting kind of silly (deleted your function pal, and cant use your function)
[06:48:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:49:01] <RandomReader> anyway, if my guess is correct, it's about older behavior in initialization, where copying was required to be possible even if it wouldn't be done .. C++17 cleaned up some rules there
[06:49:32] <spartacus> i see that it did in fact fix the problem, tyvm
[06:49:45] <spartacus> i was starting to wonder if i was crazy
[06:50:02] <RandomReader> the chain of errors is saying that it can't copy Logger, and since you didn't specify any copy constructors it would use the compiler-generated default, which is deleted because a member is not copyable
[06:51:45] <RandomReader> following rule of 5 will sometimes help by making these messages a bit more specific, but in this case it's the copy itself that was never intended, and that's just older language issues
[06:52:14] <RandomReader> re: socket stuff from earlier, you might want to browse through this guide: http://beej.us/guide/bgnet/
[06:52:43] <RandomReader> there's quite a bit you don't seem to be handling yet, which will be important in production
[06:52:59] <RandomReader> along with the pile of http/2 protocol stuff lol
[06:53:16] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[06:53:21] <spartacus> lol yeah im in for a ride i can already tell
[06:53:35] <spartacus> thanks for your patience, ill read beej's guide (and even understand some of it in the process)
[06:54:10] <RandomReader> I'd say more important than the details for first pass is getting the gist of how it fits together
[06:54:40] <RandomReader> sockets are abstract things with types, streams don't have message markers, individual calls return some N bytes but that may not be everything you want, a write may not send everything in one go, etc
[06:54:45] <RandomReader> and then go back for the details as needed
[06:55:26] <RandomReader> just because it makes more sense when you have a general idea of it being abstract
[06:55:58] <RandomReader> doesn't make the interface any less lousy, but everyone seems to have decided BSD sockets are The Thing, so...
[06:57:15] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Excess Flood)
[06:57:19] <spartacus> RandomReader: I have the code up in a public repo now too so I can track progress over time
[06:57:24] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[06:59:08] <RandomReader> ah cool, that'll make for some fun looks back
[07:02:24] <spartacus> RandomReader: this is how it all fits together: https://source.silogroup.org/SILO-GROUP/Luigi/src/branch/master/src/Sulfi.h
[07:02:45] <spartacus> there are definitely still issues, like, it can only handle about 2k connections before it falls over
[07:03:05] <spartacus> 2k concurrent* i mean
[07:05:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[07:10:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[07:11:56] <spartacus> one thing im looking at that seems to be Bad(TM) at the moment is when i do a log it's writing to stdout and the file in the same thread as whatever is calling the logger, seems like i'd want the calling function to just write the message to a queue and and have a worker thread do the print to stdout and file writing so it doesn't create a bottleneck
[07:14:53] *** Joins: adeliktas8 (~adeliktas@i59F5FD21.versanet.de)
[07:15:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:16:57] *** Quits: adeliktas (~adeliktas@i59F522E2.versanet.de) (Ping timeout: 240 seconds)
[07:16:57] *** adeliktas8 is now known as adeliktas
[07:19:39] *** Quits: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[07:22:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:23:24] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[07:37:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[07:39:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:40:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:42:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:42:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[07:49:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:54:09] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a03b:7e8b:865d:f453) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:55:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[08:00:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[08:05:48] *** Joins: supernova (~quassel@2405:9800:ba11:6207:dc70:a676:8f2d:caa1)
[08:10:23] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:11:20] *** Parts: spartacus (~root@172-105-20-45.ip.linodeusercontent.com) ()
[08:12:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[08:17:56] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[08:26:41] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[08:34:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[08:38:57] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[08:41:37] <mike18> hi
[08:42:31] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:57:01] <p-i-_> Is there anyone around with experience using libwebsockets?
[08:57:25] <p-i-_> I have code that establishes a socket connection, and receives packets. But I'm trying to figure out how to SEND a packet.
[08:58:14] <p-i-_> My code is taken from https://github.com/binance-exchange/binacpp/blob/master/src/binacpp_websocket.cpp
[08:59:02] <p-i-_> But that code doesn't have any mechanism for SENDING a json packet, since the server allows passing of data thru the connection querystring.
[09:03:26] <p-i-_> I can't quite see what I need to do. I'm looking at https://libwebsockets.org/git/libwebsockets/tree/minimal-examples/client/ws-echo which seems to use `lwsl_user("LWS SS ws-echo example [-d<verb>]\n");` but that function isn't documented.
[09:09:38] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[09:24:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[09:24:53] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Quit: Leaving)
[09:25:09] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:25:14] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:25:23] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Client Quit)
[09:25:23] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Client Quit)
[09:25:38] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:29:13] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:39:55] *** Quits: ADHD (~xxx@bison.sh3ll.ru) (Quit: leaving)
[09:40:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:27] *** ChanServ sets mode: +v npaperbot
[09:46:00] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[09:47:40] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:16:11] *** Joins: zvijezda (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net)
[10:23:15] *** Joins: NiD27 (~nid27@49.205.151.59)
[10:30:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[10:30:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[10:39:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[10:44:46] <johnny> p-i-_, what about the test code. maybe that'd show you how
[10:45:21] <johnny> and then of course after that, look at the libwebsockets code itself
[10:47:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[10:56:03] *** Quits: AmR (~AmREiSa@156.199.20.227) (Ping timeout: 256 seconds)
[11:13:30] *** Joins: sonic (~sonic@user/sonic)
[11:46:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:51:49] *** Quits: NiD27 (~nid27@49.205.151.59) (Read error: Connection reset by peer)
[11:56:10] <Alipha> { std::string buf; buf.reserve(2000); stringstream ss(std::move(buf)); ss << "Hello"; std::string s; s = std::move(ss).str(); cout << s, s.capacity(); }
[11:56:11] <geordi> Hello, 2000
[11:56:21] <Alipha> { std::string buf; buf.reserve(2000); stringstream ss(std::move(buf)); ss << "Hello"; std::string s; s = ss.str(); cout << s, s.capacity(); }
[11:56:21] <geordi> Hello, 15
[11:57:14] <Alipha> CarloWood: the first moves buf -> ss -> s, which you can tell because the capacity is retained. The second doesn't
[12:05:02] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:07:11] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:11:31] <ville> Alipha:  no one can tell since you encrypted your code on single line
[12:15:11] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:797a:f64e:6fb0:a9ad)
[12:18:40] <Alipha> << rot13("unccl arj lrnef, ivyyr!"); string rot13(string x) { for(char &c : x) if(c >= 'a' && c <= 'm') c += 13; else if(c >= 'n' && c <= 'z') c -= 13; return x; }
[12:18:40] <geordi> happy new years, ville!
[12:19:21] *** Quits: supernova (~quassel@2405:9800:ba11:6207:dc70:a676:8f2d:caa1) (Quit: No Ping reply in 180 seconds.)
[12:20:29] *** Joins: supernova (~quassel@2405:9800:ba11:6207:6582:7ba3:3c1a:31dc)
[12:20:57] *** Joins: callq (~callq@2409:4062:2d92:448:55bd:c2f7:ccc9:cb1f)
[12:21:33] <p-i-_> I'm feeling doubtful of my dev's decision to go with libwebsockets. Just looking at https://github.com/AnserInnovation/libwsclient which looks 100x lighter-weight
[12:22:37] <p-i-_> Alas the test.c and test-websocket.c both fail to build
[12:22:45] <LordKalma> !rq
[12:22:45] <nolyc> LordKalma: <anyone> a testcase with a trainer but with no pokemon ain't no good testcase :>
[12:23:00] <LordKalma> p-i-_, there's uWebSockets, also nice
[12:24:22] <ville> p-i-_: the clue is in the name. it contains the word "web". that's guarantee it's crap
[12:24:45] <LordKalma> hahahaha
[12:24:52] <johnny> p-i-_, is there a reason you're using websockets in the first place? do you really do bidirectional communication in equal amounts?
[12:24:58] <p-i-_> it seems overkill for what I want. I just want to connect to a websocket stream and dump the payloads.
[12:25:03] <johnny> ah
[12:25:12] <p-i-_> I've really lost confidence in my dev :(
[12:25:13] <LordKalma> https://github.com/uNetworking/uWebSockets // I was told "the library is nice but the dev is an ass"
[12:25:17] <johnny> well if you alreayd have a target, then i guess what i said doesn't matter
[12:25:42] <johnny> a lot of folks reach for websockets when they could be using server sent events
[12:25:43] <LordKalma> p-i-_, well, you can't judge them for going with the most obvious thing
[12:25:49] <p-i-_> It's about 10 lines of Python to accomplish the task
[12:25:57] <LordKalma> yes
[12:26:06] <LordKalma> Websockets in JS is one line also hahah
[12:26:22] <LordKalma> there's a talk by Vinnie Falco doing a websockets chat application in C++
[12:26:28] <p-i-_> I had no idea it was such a rabbithole in C++
[12:26:29] <johnny> p-i-_, shouldn't you be choosing the lib based on which one has better tests?
[12:26:30] <LordKalma> 1 hour for the c++ backend, 2 minutes for the JS frontend
[12:26:47] <LordKalma> p-i-_, welcome to c++
[12:27:04] <p-i-_> I think my dev has billed 30h already
[12:27:16] <LordKalma> unless you require c++ for any reason (performance, making a library with a CFFI, etc), don't use c++ :)
[12:27:23] <callq> lol
[12:27:26] <LordKalma> we're just all masochists here
[12:27:34] <p-i-_> I need performance in this case
[12:27:36] *** Joins: robod34 (Username@79.113.195.239)
[12:27:37] <johnny> or somebody else chose C++ to do a thing that's not done anywhere else
[12:27:45] <johnny> that's why i ended up doing C++
[12:28:06] <p-i-_> yeah I've battled with C++ before... it requires a particularly high pain tolerance
[12:28:17] <p-i-_> second only to BASH in my experience
[12:28:34] <johnny> depends on which part you find painful i suppose
[12:28:54] <johnny> it's less painful than plain C, which is hte case in a lot of embedded stuff
[12:29:17] <p-i-_> At least C has a minimal language surface
[12:29:21] <p-i-_> < 32 keywords IIRC
[12:29:25] <johnny> that's the reason i don't like it
[12:29:28] <LordKalma> but C sucks ass
[12:29:36] <LordKalma> and has a useless stdlib
[12:29:50] <johnny> things like std::unique_ptr and the containers are pretty important to me
[12:30:03] <LordKalma> C# also could probably do websockets in a couple lines and be pretty fast, I guess
[12:30:10] <LordKalma> but yeah, look at uWebSockets, if you want C++
[12:30:19] <ville> p-i-_: you say performance is needed, but you're dumping stuff presumably over a network socket to non-local host? surely one of the scripting languages would be able to feed that at max rate?
[12:30:20] <leduyquang753> C was never designed to make big things in 10 lines of code.
[12:30:37] <johnny> indeed ville indeed
[12:31:03] <johnny> hmm.. calling C designed at all .. well
[12:31:18] <johnny> it's more like somebody through something together and it got codified
[12:31:23] <johnny> threw*
[12:31:37] <p-i-_> yeah if I pick the packet up in Python and send it to my C++ code (which executes an HTTP POST with libcurl, which I've got working) that may be decent performance.
[12:32:05] <p-i-_> I wanted to do everything in C++ and avoid the interop, but it's proving awkward.
[12:32:31] <johnny> well it just depends on how much that interop is worth in actual money!
[12:32:42] <ville> p-i-_: usually you would reach for c++'s performance characteristics/guarantees when you're doing lot of in-memory things... once you involve the network you're already talking about several orders of magnitude in different scale
[12:33:17] <p-i-_> I'm building out a nano-trading bot, so performance is critical just for this small component.
[12:33:46] <ville> p-i-_: who is it competing against? real world?
[12:34:04] <ville> p-i-_: or some closed monopoly money competition?
[12:34:36] <p-i-_> Yes, real-world
[12:34:56] <p-i-_> so it's a competitive arena
[12:35:15] <ville> ok, not sure if you can really compete in speed there. all the big boys have server racks sitting at the exhanges
[12:35:19] <ville> exchanges
[12:35:37] <p-i-_> I can get top-10 entry with clean Python code
[12:39:03] <ville> and the entries above you are whom? what is their platform? are those the guys who have the direct lines?
[12:39:23] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 268 seconds)
[12:41:49] <p-i-_> I can get a VM on the same AWS subnet as the exchange. If I run my C++ code I'll see if anyone's on a privileged connection. But I doubt it.
[12:43:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:6582:7ba3:3c1a:31dc) (Ping timeout: 240 seconds)
[12:44:34] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Ping timeout: 260 seconds)
[13:01:36] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:797a:f64e:6fb0:a9ad) (Ping timeout: 268 seconds)
[13:05:03] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[13:05:45] <ville> p-i-_: perhaps as a completely pointless "future proofing" you may wish to pick your library by making sure that either it does no allocations, does only so on startup, or that you can control the allocations and thus able to get to "only does so at startup" level
[13:06:09] <p-i-_> test-websocket.c:5:10: fatal error: json-c/json.h: No such file or directory
[13:06:17] <p-i-_> Can anyone think what this source file might be?
[13:06:29] <p-i-_> It isn't included in the project and I can find no reference
[13:06:44] <p-i-_> unable to google it
[13:07:02] <ville> but that kind of performance differ sounds like it would be drowned by the noise in the network latency
[13:07:24] <p-i-_> yes, I think any C++ impl will win the game
[13:07:31] <p-i-_> I just need to find one I can manage
[13:09:25] <ville> how about python implementation, then write the "analytics" part as a c++ implementation?
[13:10:51] <ville> a module python calls them?
[13:10:55] <p-i-_> Probably I'll do that
[13:11:19] <p-i-_> I guess the Python websockets impl is a light wrapper around some performant c/c++ lib
[13:12:04] <ville> it'll at least get you moving. if you do a reasonable job on the module implementation it could be reusable if you decide to drop the python part and replace it with something else later on
[13:14:10] <p-i-_> I designed the component that executes the HTTP POST to create a TCP server; I figured I could connect components via TCP initially and schedule python<->C++ interop for later.
[13:16:13] <ville> why would you have any kind of server on your own end? if that's a competetive design then other costs must be so massive that choosing c++ must not matter
[13:19:15] <p-i-_> I think I lose < 0.1ms by routing the signal from Python to C++ via TCP
[13:19:20] <p-i-_> Definitely < 1ms
[13:19:42] <p-i-_> and I make it up with the libcurl POST
[13:19:50] <p-i-_> good enough for PoC / v1 I hope
[13:20:12] <p-i-_> but yeah swapping to python/C++ interop is at the top of the TODO list
[13:22:53] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[13:24:15] <ville> i must not understand something about the numbers and orders of magnitudes involved in this area, so nevermind me
[13:25:14] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe) (Ping timeout: 252 seconds)
[13:25:45] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[13:27:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:27:27] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[13:28:19] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:30:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:c18c:3f2c:be:639c)
[13:31:07] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:c18c:3f2c:be:639c) (Client Quit)
[13:31:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:c18c:3f2c:be:639c)
[13:36:32] <LordKalma> the docker-for-windows performance on WSL2 engine between volume-mounts and host-mounts is abysmal, ffs
[13:40:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:28] *** ChanServ sets mode: +v npaperbot
[13:40:45] <ville> you need to throw more buzzwords at it. it'll synergize better then
[13:43:16] <ville> if you want abysmal performance i once made a bash script that "copies" things to vbox one character at a time executing: vboxmanage controlvm "${vm_name}" keyboardputscancode ${output} in loop
[13:53:11] <johnny> LordKalma, i wonder if it's worse than if one were to hae the windows equivalent of sshfs
[13:54:20] <johnny> probably not though
[13:54:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:58:42] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:59:42] *** Joins: Guest864545 (~Guest8645@77-85-136-37.ip.btc-net.bg)
[14:00:02] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[14:03:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:07:54] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Quit: Leaving)
[14:08:32] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:08:55] <RandomReader> LordKalma - if I understand what you mean, that's expected: https://docs.microsoft.com/en-us/windows/wsl/compare-versions
[14:09:12] <LordKalma> yes, it is
[14:10:10] <johnny> wsl 1 was such a neater concept
[14:10:34] *** Quits: chozorho (~chozorho@2601:146:300:c30::b5c2) (Quit: WeeChat 3.0)
[14:10:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:10:58] <johnny> well abysmal is subjective. how much worse is it than say copying a file over smb to another computer on the same local network?
[14:11:17] <johnny> i hope it's not worse than that.. because it shouldn't be
[14:11:54] <LordKalma> abysmal in "your node project takes 5 seconds to run save operations (prettier) on vscode to "instantaneous"
[14:12:11] <LordKalma> I had node_modules in my local mount, and for fucks sake, it took ageeeeeeesssssssssss to do anything
[14:12:40] <LordKalma> anyway, what's the the equivalent to the PHP operator ^=?
[14:12:42] <johnny> the perils of usin g windows
[14:12:43] <LordKalma> etrying to translate an algorithm
[14:13:23] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:13:24] <leduyquang753> Still `^=`.
[14:13:31] <johnny> i've never seen that used in php
[14:13:32] <LordKalma> XOR= apparently
[14:14:05] <LordKalma> https://github.com/magicbug/PHP-APRS-Passcode/blob/master/aprs_func.php
[14:14:11] <LordKalma> it's a hashing algo I'm copying
[14:14:35] <LordKalma> it has a specific use, and I bet it's documented on a manual I actually have for the APRS-IS system
[14:14:38] <LordKalma> but bah, whatever
[14:22:17] <RandomReader> ooh, APRS? what are you working on?
[14:22:58] <LordKalma> a website for ham radio (written in portuguese, I'm afraid). Basic blogging stuff, repeaters database, APRS-IS passcode generator, and whatever else I feel like to
[14:23:21] <RandomReader> ah cool
[14:23:59] <RandomReader> I've been inactive for several years, been considering getting back in recently
[14:27:30] *** Quits: Guest864545 (~Guest8645@77-85-136-37.ip.btc-net.bg) (Quit: Client closed)
[14:36:49] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[14:44:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[14:44:55] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:45:26] *** Joins: Simplar (~Simplar@188.163.93.76)
[14:54:07] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:56:41] <p-i-_> My compiler is rejecting this `Json my_json = Json::object { { "key1", "value1" }, {...}, ... }` initializer syntax, even tho' I'm doing `set(CMAKE_CXX_STANDARD 11)` in CMakeLists.txt
[14:57:06] <p-i-_> I copied the initializer syntax from https://github.com/dropbox/json11 (first code chunk)
[15:05:09] <TinoDidriksen> Maybe don't use a deprecated library? Just use https://github.com/nlohmann/json instead.
[15:06:04] *** Quits: Brewster (~Brewster@user/brewster) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[15:06:44] *** Joins: Brewster (~Brewster@104.145.226.5)
[15:06:53] *** Joins: seninha (~seninha@user/seninha)
[15:10:13] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:c18c:3f2c:be:639c) (Quit: Quit)
[15:10:26] *** Quits: Leone (~Leo@157.52.18.77) ()
[15:11:29] <p-i-_> gottit, was my error not json11
[15:12:22] *** Joins: Leone (~Leo@157.52.18.77)
[15:17:49] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: The Lounge - https://thelounge.chat)
[15:18:07] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[15:28:26] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[15:32:06] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[15:34:40] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[15:41:20] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:45:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[15:50:21] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[15:50:43] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[15:51:10] <p-i-_> Supose I wish to persist a string by vec.push_back(s) ... is that going to move or copy?  I want to be able to continue using `s` after that line, and guarantee it won't be destroyed. I'm passing s.c_str() into libcurl, and I think it's getting deallocated before libcurl can use it...
[15:52:33] <leduyquang753> It can either copy or move depending on the passed value.
[15:54:11] <TinoDidriksen> If it's a vector<string> then it will copy.
[15:54:19] <ville> p-i-_: that will copy. also moving does not destroy objects. you can think of them to be in a "moved from" state, and what that is exactly varies for each type
[15:54:39] <p-i-_> Is there some concise way of persisting the object?
[15:56:01] <leduyquang753> Well as long as you keep `s` alive until libcurl is done with it, should be fine.
[15:56:05] <p-i-_> If I `v.push_back(s);` I now would need something like: `s = v[v.size()-1]` which is awkward
[15:56:10] <p-i-_> Problem is I'm in a loop
[15:58:03] <p-i-_> Actually I think I'd need `auto& s2 = v[index]`
[15:59:09] <xkoncek> remember not to push into vector while you are holding references to its elements
[15:59:39] <xkoncek> i mean, do not use the references afterwards
[16:00:21] <p-i-_> I'm gona change pattern; fill up the vec in an initial loop and then loop again, doing `auto& s2 = v[index]`
[16:04:49] *** Joins: Leo_V (~Leo@157.52.18.77)
[16:06:35] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 256 seconds)
[16:09:04] *** Joins: Leone (~Leo@157.52.18.77)
[16:09:25] *** Quits: Leo_V (~Leo@157.52.18.77) (Ping timeout: 256 seconds)
[16:10:05] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[16:11:30] *** Joins: Leone (~Leo@157.52.18.77)
[16:18:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[16:20:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[16:25:52] <TinoDidriksen> geordi --version
[16:25:53] <geordi> GCC 12.0.0 20211226 (experimental)
[16:26:35] <TinoDidriksen> geordi --version
[16:26:36] <geordi> GCC 12.0.0 20220101 (experimental)
[16:28:14] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:29:12] *** Joins: Leo_V (~Leo@157.52.18.77)
[16:30:36] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 240 seconds)
[16:32:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[16:33:14] <johnny> very fresh
[16:37:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[16:39:14] <xkoncek> do you compile them yourself? or where do you grab them from?
[16:47:12] <TinoDidriksen> I build the image myself, and push it to https://hub.docker.com/u/tinodidriksen for others to pull.
[16:52:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:04:58] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:05:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[17:09:33] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[17:10:15] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[17:14:41] *** Joins: plastico (~plastico@neomutt/plastico)
[17:31:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[17:38:22] *** Quits: Leo_V (~Leo@157.52.18.77) ()
[17:40:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:30] *** ChanServ sets mode: +v npaperbot
[17:49:24] *** Joins: pulse (~pulse@user/pulse)
[17:56:53] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:25f8:1663:ec74:9f0f)
[18:00:13] *** Joins: n3rdy1 (~n3rdy1@2601:646:c300:f20:d852:3bde:2197:ddf9)
[18:04:00] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:12:28] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[18:12:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:44:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[18:49:56] *** Joins: Leone (~Leo@157.52.18.77)
[18:53:25] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[18:55:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:57:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:00:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 260 seconds)
[19:08:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:09:47] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:10:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:13:55] *** Quits: Leone (~Leo@157.52.18.77) ()
[19:17:14] *** Joins: Leone (~Leo@157.52.18.77)
[19:20:10] *** Quits: adeliktas (~adeliktas@i59F5FD21.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[19:20:20] *** Joins: adeliktas (~adeliktas@i59F5FD21.versanet.de)
[19:20:47] *** Joins: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[19:21:29] *** Joins: AmR (~AmREiSa@156.199.20.227)
[19:22:00] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Client Quit)
[19:22:55] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[19:23:17] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:25:30] *** Joins: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[19:26:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:29:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[19:32:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:34:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[19:41:44] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:43:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:43:20] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe)
[19:43:20] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe) (Changing host)
[19:43:20] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:44:55] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:46:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[19:51:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[19:51:36] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[19:55:31] *** Joins: pulse (~pulse@user/pulse)
[19:56:50] *** Joins: Crassus (~Crassus@user/crassus)
[19:59:06] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[20:00:39] <tsujp> im trying to include the header file iddcx.h which has this at the top https://pastebin.com/raw/wbgJZftq
[20:01:04] <tsujp> in this header file there is `enum IDDCX_TRANSMISSION_TYPE : UINT` .. shouldn't the `extern "C" {` prevent errors?
[20:01:55] <ville> prevent what errors? extern "C" doesn't change language rules
[20:03:29] <tsujp> i see
[20:17:57] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:e3a0:3f1e:9a4:ed7a)
[20:20:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:25:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[20:27:49] *** Joins: aniketgm (~Aniket@49.36.109.109)
[20:29:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:34:12] <Hello71> if would be convenient if extern "C" could magically turn C++ into C though
[20:34:16] <Hello71> s/if/it/
[20:43:25] *** Joins: jehelset (~jeh@130.51-175-95.customer.lyse.net)
[20:43:37] *** Quits: n3rdy1 (~n3rdy1@2601:646:c300:f20:d852:3bde:2197:ddf9) (Ping timeout: 240 seconds)
[20:44:21] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:44:42] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe)
[20:44:42] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe) (Changing host)
[20:44:42] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:47:22] <PJBoy> the point of extern "C" is to do the exact opposite though
[20:50:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3403:156c:961e:b2fe)
[20:50:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3403:156c:961e:b2fe) (Changing host)
[20:50:12] *** Joins: skapata (~Skapata@user/skapata)
[20:56:01] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:57:03] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:e3a0:3f1e:9a4:ed7a) (Ping timeout: 250 seconds)
[20:58:24] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:58ea:38e8:35e1:5bd3)
[20:59:46] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Read error: Connection reset by peer)
[20:59:51] *** Joins: ville_ (~ville@82-181-178-111.bb.dnainternet.fi)
[21:00:08] *** ville_ is now known as ville
[21:03:28] *** Joins: andreasbuhr (~quassel@p5dcf9de2.dip0.t-ipconnect.de)
[21:03:46] *** Quits: andreasbuhr (~quassel@p5dcf9de2.dip0.t-ipconnect.de) (Client Quit)
[21:04:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 260 seconds)
[21:10:23] *** Parts: aniketgm (~Aniket@49.36.109.109) ()
[21:16:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:20:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[21:27:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:32:41] <AmR> Any one work with database have .phy ext ?
[21:33:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:37:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[21:40:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:31] *** ChanServ sets mode: +v npaperbot
[21:44:38] *** Joins: jsbach (~jsbach@2a01:c23:6522:d500:37a9:9618:f7ed:34e9)
[21:49:07] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:51:01] *** Quits: AmR (~AmREiSa@156.199.20.227) (Quit: Konversation terminated!)
[21:53:43] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[21:53:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[21:53:59] *** Quits: jehelset (~jeh@130.51-175-95.customer.lyse.net) (Remote host closed the connection)
[21:54:04] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe)
[21:54:04] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:39dc:e531:3609:2dbe) (Changing host)
[21:54:04] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:57:08] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:03:01] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[22:07:01] *** Joins: jehelset (~jeh@130.51-175-95.customer.lyse.net)
[22:09:19] *** Quits: callq (~callq@2409:4062:2d92:448:55bd:c2f7:ccc9:cb1f) (Quit: callq)
[22:12:36] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:25:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[22:42:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:44:56] *** Joins: ferdna (~ferdna@user/ferdna)
[22:52:31] *** Joins: magla (~gelignite@55d47ed7.access.ecotel.net)
[23:23:05] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:29:04] <yates_home> i cannot find a definition of the -std-link-opts option to "opt". can someone tell me what it means?
[23:29:19] <ville> possibly something close to simplest-ish coroutine you can do, but the compiler still isn't able to elide the allocation: https://godbolt.org/z/v3vq1j9dM anyone had better luck?
[23:30:31] <yates_home> i've looked here https://llvm.org/docs/CommandGuide/opt.html and the manpage for opt on my system
[23:30:49] <yates_home> my system is using clang/opt version 10
[23:31:29] <yates_home> correction: my system is using clang/opt version 11
[23:31:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[23:31:51] <ville> thought the stackless choice was sold with the idea that compilers would be able to elide
[23:32:38] <yates_home> ville: do you remember pointing to this solution a few days ago?
[23:33:54] <ville> sure
[23:34:25] <yates_home> it works to some extent, but only gives the first level of dependency calls. there are many more.
[23:35:04] <yates_home> i readily admit i have no clue what i am doing..
[23:38:15] <yates_home> here is the .mak file i created to run the commands: http://paste.debian.net/1225497/
[23:40:01] <yates_home> there are multiple components in the build at various build paths.
[23:40:47] <ville> it's a command i grabbed from a file where i store useful one offs, can't remember the reasons for any of it
[23:41:31] <yates_home> i run the make file in the top level directory, hoping clang/dot will search all components there and below, not just the filename appsrc/boot/bootmain.c
[23:42:06] <yates_home> ville: fair enough. it is tantalizing that it works a little bit!
[23:45:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:47:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:48:11] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:50:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:53:59] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Remote host closed the connection)
[23:57:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
