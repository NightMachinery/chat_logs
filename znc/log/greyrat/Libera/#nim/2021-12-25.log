[00:08:05] <FromDiscord> <evoalg> In reply to @IsaacPaul "ah I'm dumb I": Just curious ... what's the advantage of writing your own zip iterator instead of using the std zip?
[00:08:37] <FromDiscord> <retkid> pintocpu segfaults due to an old cpu, however its fine because linux is smart enough to kinda do it automatically
[00:09:21] *** Joins: arkurious (~arkurious@user/arkurious)
[00:09:40] <FromDiscord> <Yardanico> In reply to @evoalg "Just curious ... what's": stdlib doesn't have an iterator version of zip actually
[00:09:56] <FromDiscord> <evoalg> ahhh
[00:10:03] <FromDiscord> <retkid> zip iterator?
[00:10:08] <FromDiscord> <IsaacPaul> In reply to @evoalg "Just curious ... what's": I only had that to test some random things with nim.‚ÜµThe current zip and most things from sequtils create a ton of seqs while iterators are lazy and pass values individually.
[00:10:25] <FromDiscord> <IsaacPaul> (edit) 04removed "a ton of"
[00:11:05] <FromDiscord> <evoalg> ahhh ok ... so the stdlib may be rewritten one day?
[00:11:28] <FromDiscord> <Yardanico> i don't think there will ever be a full "rewrite"
[00:11:33] <FromDiscord> <retkid> holy shit i didnt know what zip iterators work
[00:11:37] <FromDiscord> <retkid> (edit) "work" => "where"
[00:11:43] <FromDiscord> <Yardanico> but afaik nim 2.0 will allow for more significant changes to the stdlib
[00:11:45] <FromDiscord> <retkid> those seem useful
[00:11:50] <FromDiscord> <IsaacPaul> zip iterators aren't a thing
[00:11:50] <FromDiscord> <Yardanico> In reply to @retkid "holy shit i didnt": it's not "zip iterators"
[00:11:52] <FromDiscord> <Yardanico> zip is just a name
[00:11:57] <FromDiscord> <retkid> :|
[00:12:20] <FromDiscord> <retkid> ah so its just called zip
[00:12:33] <FromDiscord> <retkid> well ive been scooled
[00:12:37] <FromDiscord> <retkid> (edit) "scooled" => "scgooled"
[00:12:45] <FromDiscord> <retkid> (edit) "scgooled" => "schooled"
[00:12:58] <FromDiscord> <retkid> i think this chromebook has the worst keyboard ive ever used
[00:12:59] <FromDiscord> <evoalg> In reply to @retkid "ah so its just": zip in python is an iterator / generator by default, and in nim it's a proc or something
[00:13:42] <FromDiscord> <evoalg> iterators are nice as it wont copy large sequences and so it saves on memory and speed
[00:13:59] <FromDiscord> <retkid> lol i know what an tierator is
[00:14:07] <FromDiscord> <retkid> (edit) "tierator" => "iterator"
[00:14:10] <FromDiscord> <evoalg> sorry!
[00:14:11] <FromDiscord> <retkid> ive learned what Collect is tho
[00:14:20] <FromDiscord> <retkid> and collect is beautiful
[00:14:32] <FromDiscord> <evoalg> I do love collect (mostly)
[00:14:41] <FromDiscord> <retkid> (mostly)
[00:14:51] <FromDiscord> <evoalg> it breaks sometimes
[00:15:13] <FromDiscord> <retkid> hm
[00:16:34] <FromDiscord> <retkid> never broke for me unless i used break
[00:18:17] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jn8
[00:40:52] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jnc
[00:41:11] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3Jnc" => "https://play.nim-lang.org/#ix=3Jnd"
[00:42:23] <FromDiscord> <Yardanico> because you can't have an openArray of openArray
[00:44:23] <FromDiscord> <TryAngle> ü•∫
[00:52:10] <FromDiscord> <kaddkaka> Noob here, 2nd day of Nim. Why is `var tiles = seq[array[5, int]]` an Error? `Error: invalid type: 'typedesc[seq[array[0..4, int]]]' for var`
[00:52:22] <FromDiscord> <Yardanico> In reply to @kaddkaka "Noob here, 2nd day": because you're trying to assign a type to a variable
[00:52:29] <FromDiscord> <kaddkaka> oops
[00:52:30] <FromDiscord> <Yardanico> if you want to declare a variable of that type you should use `:` instead
[00:52:32] <FromDiscord> <kaddkaka> right
[00:52:33] <FromDiscord> <Yardanico> `var tiles: seq[array[5, int]]`
[00:52:37] <FromDiscord> <kaddkaka> yup
[00:52:38] <FromDiscord> <kaddkaka> thanks
[00:54:38] <FromDiscord> <evoalg> In reply to @retkid "never broke for me": This breaks for me: https://play.nim-lang.org/#ix=3Jnf
[00:55:07] <FromDiscord> <Yardanico> did you report it?
[00:55:46] <FromDiscord> <Yardanico> fixing variables leaking out of scope should actually be an easy fix
[00:56:08] <FromDiscord> <evoalg> How do I report it?
[00:56:13] <FromDiscord> <Yardanico> open an issue on github
[00:56:27] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/issues/new/choose there's a template for a bug report
[00:56:37] <FromDiscord> <evoalg> are you saying I'll have to create a github account?
[00:56:40] <FromDiscord> <Yardanico> yes?
[00:57:23] <FromDiscord> <sOkam!> Is there a way to call a variable of an object from inside its constructor? https://media.discordapp.net/attachments/371759389889003532/924050652416606279/unknown.png
[00:57:42] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (Ping timeout: 276 seconds)
[00:57:43] <FromDiscord> <Yardanico> In reply to @sOkam! "Is there a way": nope
[00:57:54] <FromDiscord> <Yardanico> you should probably make a constructor proc instead if you want that
[00:58:05] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[00:59:25] <FromDiscord> <evoalg> In reply to @Yardanico "fixing variables leaking out": There's another bug in that snippet ... with the if/else's in the last collect ... should that also be reported?
[00:59:37] <FromDiscord> <sOkam!> In reply to @Yardanico "you should probably make": what should I look for in the manual to find how they are created?
[00:59:48] <FromDiscord> <Yardanico> In reply to @sOkam! "what should I look": nim doesn't have any special syntax for init procedures
[00:59:53] <FromDiscord> <Yardanico> there's only a convention for naming them
[00:59:59] <FromDiscord> <Yardanico> initType for stack-allocated (like your Canvas)
[01:00:03] <FromDiscord> <Yardanico> and newType for heap-allocated
[01:00:27] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jnj
[01:00:31] <FromDiscord> <Yardanico> and then use it
[01:00:35] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3Jnj" => "https://play.nim-lang.org/#ix=3Jnk"
[01:00:39] <FromDiscord> <sOkam!> thx!
[01:03:27] <FromDiscord> <sOkam!> In reply to @Yardanico "and then use it": for using it for constructing, should I just replace `Canvas( ... )` with `initCanvas( ... )`?
[01:03:33] <FromDiscord> <Yardanico> yes
[01:03:41] <FromDiscord> <Yardanico> then nim will just call your proc at compile time
[01:03:46] <FromDiscord> <Yardanico> to initialize your `const`
[01:03:53] <FromDiscord> <sOkam!> kk, easy enough
[01:04:38] <FromDiscord> <sOkam!> how do I assign the values, though? is there a self or this keyword?
[01:05:15] <FromDiscord> <sOkam!> (edit) "values," => "values inside the init proc,"
[01:06:02] <FromDiscord> <sOkam!> or should I just use `result.w` etc
[01:07:15] <FromDiscord> <Solitude> In reply to @Yardanico "initType for stack-allocated (like": i believe in init(typedesc) supremacy üôè
[01:07:15] <FromDiscord> <Yardanico> yes, just that
[01:07:21] <FromDiscord> <Yardanico> @sOkam!
[01:07:44] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jnl
[01:07:58] <FromDiscord> <Yardanico> so you can set r and w directly like in your example before, and then set `h` separely
[01:08:02] <FromDiscord> <Yardanico> (edit) "separely" => "separately"
[01:08:24] <FromDiscord> <sOkam!> In reply to @Solitude "i believe in init(typedesc)": how would that syntax look like?
[01:08:49] <FromDiscord> <Yardanico> In reply to @sOkam! "how would that syntax": init(Canvas)
[01:08:51] <FromDiscord> <Yardanico> or Canvas.init()
[01:09:02] <FromDiscord> <Yardanico> or `init Canvas`
[01:09:06] <FromDiscord> <Solitude> hot
[01:09:07] <FromDiscord> <Yardanico> or `Canvas.init`
[01:09:24] <FromDiscord> <Yardanico> or `C_A_N_V_A_S.i_N_I_T()`
[01:09:30] <FromDiscord> <sOkam!> LUL
[01:09:31] <FromDiscord> <sOkam!> üòÑ
[01:09:43] <FromDiscord> <sOkam!> can you give a simple example of that init(Canvas) in context?
[01:09:59] <FromDiscord> <Solitude> example of what
[01:10:04] <FromDiscord> <sOkam!> Total first-timer, so all of this is really new
[01:10:34] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jnn
[01:10:39] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3Jnn" => "https://play.nim-lang.org/#ix=3Jno"
[01:10:55] <FromDiscord> <Yardanico> basically you create a proc with `Canvas` type as its single argument
[01:11:02] <FromDiscord> <Yardanico> there's no runtime overhead for that as all types are resolved at compile time
[01:11:17] <FromDiscord> <Solitude> not necessarily single argument, jsut first
[01:11:24] <FromDiscord> <sOkam!> thats handy, love it
[01:11:27] <FromDiscord> <Yardanico> In reply to @Solitude "not necessarily single argument,": yeah right
[01:12:17] <FromDiscord> <sOkam!> how does it know that Canvas has a .init procedure? ü§î
[01:12:51] <FromDiscord> <Solitude> mhmmmmmmmmmmmmmmmmmmmmm
[01:12:56] <FromDiscord> <Yardanico> In reply to @sOkam! "how does it know": ?
[01:12:56] <FromDiscord> <Yardanico> it doesn'
[01:13:02] <FromDiscord> <Yardanico> (edit) "doesn'" => "doesn't know that Canvas "has" an init procedure"
[01:13:08] <FromDiscord> <Yardanico> you try to call `init` on a `Canvas` type
[01:13:13] <FromDiscord> <Yardanico> so it finds a proc that has `Canvas` as its argument
[01:13:16] <FromDiscord> <Yardanico> and that matches
[01:13:22] <FromDiscord> <Yardanico> Canvas as the type itself, not as a value
[01:13:26] <FromDiscord> <sOkam!> ahhhh got it
[01:13:43] <FromDiscord> <sOkam!> small detail that I didn't know. thats super handy
[01:17:15] <FromDiscord> <sOkam!> So, if I want to use that Canvas.init() syntax, but keep my `r, w, h` as arguments at construction... do I need a separate constructor for that?
[01:17:18] <FromDiscord> <Yardanico> no
[01:17:27] <FromDiscord> <Yardanico> you just add other arguments to your `init` proc as Solitude said
[01:17:40] <FromDiscord> <Yardanico> and then you can do Canvas.init(1, 2, 3) etc
[01:17:56] <FromDiscord> <Yardanico> of course you can also use `initCanvas` syntax, in fact that's the more "conventional" way
[01:18:07] <FromDiscord> <Yardanico> but Nim is all about freedom so you can use `init` style too if you find it nicer
[01:18:07] <FromDiscord> <Solitude> challenge conventions
[01:18:27] <FromDiscord> <sOkam!> In reply to @Solitude "challenge conventions": I will, just not as a noob üôà
[01:18:50] <FromDiscord> <Yardanico> In reply to @sOkam! "I will, just not": we have a similar document to PEP-8 with some conventions https://nim-lang.org/docs/nep1.html
[01:23:50] <FromDiscord> <sOkam!> Still can't get it to work. I think I'm missing something üòî https://media.discordapp.net/attachments/371759389889003532/924057306252054648/unknown.png
[01:24:23] <FromDiscord> <Yardanico> did you see my code example?
[01:24:37] <FromDiscord> <Yardanico> ah nvm, you have a different problem here
[01:24:45] <FromDiscord> <Yardanico> @sOkam! the `:` syntax is only for constructors
[01:24:49] <FromDiscord> <Yardanico> for procedures just pass arguments normally
[01:25:39] <FromDiscord> <sOkam!> In reply to @Yardanico "for procedures just pass": tried it, but it didnt know what `w` and `r` were, so added them
[01:27:33] <FromDiscord> <Elegantbeef> you just do `initCanvas(16/9, 640, int(round(640/(16/9))))`
[01:27:47] <FromDiscord> <sOkam!> In reply to @Elegantbeef "you just do `initCanvas(16/9,": thats precisely what im trying to avoid
[01:27:59] <FromDiscord> <Yardanico> In reply to @sOkam! "thats precisely what im": then you should calculate that in the proc itself
[01:28:33] <FromDiscord> <sOkam!> i just want a way to make new canvas presets without having to type the math
[01:28:37] <FromDiscord> <Yardanico> yes
[01:29:04] <FromDiscord> <Elegantbeef> Exactly what yardanico said
[01:29:11] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jnu
[01:29:13] <FromDiscord> <Yardanico> one possible example
[01:29:41] <FromDiscord> <sOkam!> In reply to @Yardanico "then you should calculate": i guess there is proc overload, and there could be another constructor that takes an int for height... that doesnt do the ratio calc ü§∑‚Äç‚ôÇÔ∏è
[01:29:46] <FromDiscord> <Yardanico> yes
[01:29:54] <FromDiscord> <Yardanico> or you can have a default value that calculates the height by itself
[01:29:59] <FromDiscord> <Yardanico> although a bit chunky
[01:29:59] <NimEventer> New post on r/nim by Ether-naut: Using a distinct type as a table key, see https://reddit.com/r/nim/comments/rnvt83/using_a_distinct_type_as_a_table_key/
[01:30:50] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jnw
[01:30:55] <FromDiscord> <Yardanico> maybe you prefer the overload instead though as it's simpler
[01:32:04] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3Jnw" => "https://play.nim-lang.org/#ix=3Jnx"
[01:32:07] <FromDiscord> <sOkam!> also, is there a way to write the full type syntax in one line, including all its components?
[01:32:10] <FromDiscord> <Yardanico> yes
[01:32:19] <FromDiscord> <Yardanico> I just prefer writing it in multiple lines
[01:32:37] <FromDiscord> <Yardanico> `  result = Canvas(r: ratio, w: width, h: height)` works as well
[01:32:50] <FromDiscord> <Yardanico> ah, if you mean the `object` type definition, then no
[01:32:58] <FromDiscord> <sOkam!> üòî
[01:33:04] <FromDiscord> <sOkam!> kk
[01:33:30] <FromDiscord> <Elegantbeef> I mean there is but it's dumb
[01:33:42] <FromDiscord> <Yardanico> with tuples?
[01:33:50] <FromDiscord> <Elegantbeef> `type Canvas = distinct tuple[r: float, w,h: int]` dont ever do it
[01:33:54] <FromDiscord> <Yardanico> knew it
[01:34:03] <FromDiscord> <Elegantbeef> I will find where you live and hurt you if you do it
[01:34:05] <FromDiscord> <Yardanico> yeah, @sOkam! better to just stick to `object` :)
[01:34:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jny
[01:35:51] <FromDiscord> <Elegantbeef> Also sokam i see you took my comments and added them to your github issue on godot-nim, they were based 100% in my feelings and i dont see why you included them üòÄ
[01:37:07] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[01:37:38] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Also sokam i see": I know know who said them, I just remembered someone talking about it
[01:37:53] <FromDiscord> <sOkam!> (edit) "know" => "dont"
[01:38:12] *** Joins: xet7 (~xet7@user/xet7)
[01:38:13] <FromDiscord> <sOkam!> I was just worried about it, so I asked if they are alive or not
[01:38:23] <FromDiscord> <Elegantbeef> Well they are very much alive
[01:38:45] <FromDiscord> <Elegantbeef> Your 5th point was not them afaik, it was stuffe or whoever in the job posting iirc
[01:39:32] <FromDiscord> <Elegantbeef> It's very much tooling made for the authors by the authors and they opened them up for others to use, so  dont expect too much
[01:42:23] <FromDiscord> <sOkam!> I expected pure silence if I had just asked "hey, is this gonna be ported to gdextension"... so tried to give it some more weight. Plus I was genuinely worried about the comments I saw and the issues open unanswered, etc
[01:42:40] <FromDiscord> <Elegantbeef> I mean i dont get why you're so worried
[01:42:52] <FromDiscord> <sOkam!> Bc if they don't port to gdextension, who will?
[01:42:55] <FromDiscord> <Elegantbeef> When godot 4 is here someone(possibly me) will handle it
[01:43:06] <FromDiscord> <sOkam!> I wish I knew how. But its waaay over my league
[01:43:58] <FromDiscord> <Elegantbeef> Well that's why you start on it then get a numpty to solve issues
[01:44:09] <FromDiscord> <sOkam!> In reply to @Elegantbeef "When godot 4 is": #waitingforgodot4, I guess üòî
[01:44:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:44:54] <FromDiscord> <Elegantbeef> Hey you can get started on  it
[01:45:02] <FromDiscord> <sOkam!> The physics changes are just too good for what I'm making, so I guess that skews my impatience a lot
[01:45:27] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Hey you can get": good jk. tried to give it a serious try... not even start I could
[01:45:29] <FromDiscord> <Elegantbeef> The first step of "knowing how" is "not knowing"
[01:46:02] <FromDiscord> <sOkam!> Writing a parser, when you don't really get the language... its not very endearing
[01:47:08] <FromDiscord> <Elegantbeef> You dont need to write a parser
[01:47:18] <FromDiscord> <Elegantbeef> There is a json parser in the stdlib
[01:47:51] <FromDiscord> <sOkam!> how do you tell the app what to do with the json then?
[01:48:08] <FromDiscord> <sOkam!> it just goes over my head, completely
[01:48:22] <FromDiscord> <Elegantbeef> You use a macro
[01:48:58] <FromDiscord> <evoalg> In reply to @sOkam! "Writing a parser, when": it's actually a compliment to you, as they can you are an intelligent noob with lots of experience ... they never tell me to create anything üòâ
[01:50:04] <FromDiscord> <evoalg> (edit) "In reply to @sOkam! "Writing a parser, when": it's actually a compliment to you, as they can ... you" 03added "tell"
[01:50:45] <FromDiscord> <sOkam!> In reply to @evoalg "it's actually a compliment": Well, if you feel skilled enough to do it, I'm eagerly waiting for gdextension-nim üòî‚ÜµI honestly have absolutely no clue how to even get started
[01:51:35] <FromDiscord> <sOkam!> I couldn't even understand how to start... so if you know how, you are already ahead
[01:51:44] <FromDiscord> <Solitude> In reply to @evoalg "it's actually a compliment": fix nim bugs
[01:51:55] <FromDiscord> <Solitude> you're smart, i believe in you
[01:52:09] <FromDiscord> <evoalg> oooo finally something has faith in me!
[01:52:19] <FromDiscord> <Elegantbeef> @evoalg\: make something
[01:52:47] <FromDiscord> <Elegantbeef> It's more just people here are willing to help when you run into issues, you need to take a macro over that json file and emit nim files
[01:53:22] <FromDiscord> <Elegantbeef> Everything in that json file and the headerfile is all you need to get gd4.0 bindings, might seem very complicated but if you start writing macros you'll quickly understand how/what to do
[01:57:09] <FromDiscord> <evoalg> In reply to @sOkam! "Well, if you feel": ... I find these folk in here are really helpful (much more so than other places I've been in)
[01:57:32] <FromDiscord> <Elegantbeef> Evo just says that cause he really wants me to continue helping him üòõ
[01:58:01] <FromDiscord> <evoalg> saw right through me
[01:58:49] <FromDiscord> <Elegantbeef> You have reminded me i didnt throw `zip` into slicerator
[01:58:59] <FromDiscord> <Elegantbeef> I suppose there are other variants that make sense aswell there
[01:59:57] <FromDiscord> <evoalg> ooooo that would be awesome
[02:04:06] <FromDiscord> <Yardanico> @evoalg made the PR to fix scope leakage and also replied in the issue about the last example
[02:05:21] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Everything in that json": If this would be the start point for that, this tut is a great example of why it goes over my head‚Üµhttps://nim-lang.org/docs/tut3.html
[02:05:46] <FromDiscord> <sOkam!> Step by step, I still understand 0.0000001% of it üòî
[02:06:09] <FromDiscord> <sOkam!> (edit) "Step by step, ... I" 03added "and"
[02:07:31] <FromDiscord> <evoalg> In reply to @Yardanico "<@!900872397224280125> made the PR": Thank you!
[02:07:33] <FromDiscord> <Elegantbeef> https://dev.to/beef331/demystification-of-macros-in-nim-13n8 is better for a intro
[02:08:16] <FromDiscord> <sOkam!> In reply to @Elegantbeef "https://dev.to/beef331/demystification-of-macros-in": Ah I read that one, yeah. How is that used for handling the json?
[02:08:40] <FromDiscord> <Elegantbeef> I mean you need to get comfortable with macros before you can run with them
[02:09:07] <FromDiscord> <Elegantbeef> Understanding the AST and how it needs to be is the first step to making the bindings
[02:09:18] <FromDiscord> <Elegantbeef> You can jump straight into the json but it'll confuse your rapidly
[02:10:30] <FromDiscord> <sOkam!> Which is why I said its waay over my league
[02:11:02] <FromDiscord> <Elegantbeef> I mean you just need to play with macros run into troubles then get yourself out
[02:11:10] <FromDiscord> <Elegantbeef> You'll quickly learn how to handle this stuff
[02:11:30] <FromDiscord> <Elegantbeef> "yourself out" does also mean ask in here
[02:11:49] <FromDiscord> <sOkam!> I could learn how to make macros and still not understand what to do with the json
[02:12:52] <FromDiscord> <Elegantbeef> I feel like you're missing the point where a person is offering assistance when you get stuck
[02:14:10] <FromDiscord> <sOkam!> That's where I'm currently stuck, that understanding may seem obvious... but its not so much for me, personally üòî
[02:14:47] <FromDiscord> <Elegantbeef> Want a challenge?
[02:15:07] <FromDiscord> <Elegantbeef> Using a macro take a newline seperate file and emit a enum from it
[02:15:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JnG
[02:17:01] <FromDiscord> <sOkam!> I think the answer to that challenge is the answer to "what to do with the json"... when I don't really know what to do with it
[02:17:31] <FromDiscord> <Yardanico> @ElegantBeef do you know if nnkBlockExpr is actually used anywhere?
[02:17:34] <FromDiscord> <Elegantbeef> You need to emit Nim objects and procedure calls that interact with godot
[02:17:43] <FromDiscord> <Yardanico> I don't understand if I should just use nnkBlockStmt or nnkBlockExpr for https://github.com/nim-lang/Nim/pull/19288
[02:17:51] <FromDiscord> <Elegantbeef> I was just about to answer in the github issue
[02:17:54] <FromDiscord> <Yardanico> oh okay
[02:18:00] <FromDiscord> <Elegantbeef> The compiler replaces it from a stmt
[02:18:00] <FromDiscord> <Elegantbeef> So you're fine
[02:18:08] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/QRI
[02:18:37] <FromDiscord> <Elegantbeef> `Slice[T]` -\> `HSlice[T, T]`
[02:19:14] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JnI
[02:19:23] <FromDiscord> <Yardanico> ah nvm, I see your error already I think
[02:19:27] <FromDiscord> <Elegantbeef> That works for instance yard
[02:19:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JnJ
[02:19:36] <FromDiscord> <sOkam!> In reply to @Elegantbeef "You need to emit": that's exactly the part that i dont understand, dude. I see your point, that if I solve that challenge I answer the question... but not knowing how to solve that is exactly the issue... so a challenge related to that helps very little because the answer to both is the same üòî
[02:19:37] <FromDiscord> <Yardanico> @TryAngle you have your matrixes as `let`
[02:19:46] <FromDiscord> <Yardanico> but since you're modifying them  you need to declare them as `var`
[02:19:52] <FromDiscord> <TryAngle> In reply to @Yardanico "can you show the": its just further implementations that were found and is "[]="
[02:19:55] <FromDiscord> <Yardanico> your proc accepts `m: var Matrix[T]`
[02:20:04] <FromDiscord> <Yardanico> so you should have a matrix declared as `var mat1 = ...`
[02:20:40] <FromDiscord> <Yardanico> In reply to @Elegantbeef "That works for instance": yeah, I noticed that it always gets parsed to BlockStmt, so yeah, I'll keep it that way
[02:23:44] <FromDiscord> <TryAngle> @Yardanico thanks, lol those mistakes....
[02:24:20] <FromDiscord> <Elegantbeef> Sokam here is the answer to the enum https://play.nim-lang.org/#ix=3JnL
[02:25:47] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 268 seconds)
[02:32:35] <FromDiscord> <Elegantbeef> Oh also yard https://github.com/nim-lang/Nim/pull/19262 should have a different name
[02:32:47] <FromDiscord> <Elegantbeef> The PR title should explain what the PR does
[02:33:00] <FromDiscord> <Solitude> it fixes issue 19261
[02:34:04] <FromDiscord> <Yardanico> @ElegantBeef ok
[02:34:34] <FromDiscord> <Elegantbeef> That doesnt explain what it does without looking at the issue on github, PR names are now supposed to say in plain english what they do
[02:36:14] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/oNI
[02:36:19] <FromDiscord> <TryAngle> because I'm not a fan of quadratic loops
[02:36:47] <FromDiscord> <Yardanico> @ElegantBeef can you also review the PR then? :D
[02:37:03] <FromDiscord> <Yardanico> i don't know if my changes are really safe or not, and also don't know if and how I should test them
[02:37:13] <FromDiscord> <Yardanico> that http header code wasn't touched since it was first written 8 years ago
[02:38:28] <FromDiscord> <Yardanico> also funny thing about parseUntil from parseutils - docs says it returns 0 in case of an error but it actually never does that afaik
[02:38:29] <FromDiscord> <Elegantbeef> `memCopy` does exist
[02:38:39] <FromDiscord> <Elegantbeef> Nope i dont no web stuff
[02:38:43] <FromDiscord> <Elegantbeef> know
[02:40:53] <FromDiscord> <Elegantbeef> I dont know what it considers an error
[02:46:07] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Sokam here is the": thank you ‚úçÔ∏è
[03:00:04] <FromDiscord> <sOkam!> @ElegantBeef Does this line mean that each line in the txt file will be interpreted as a type NimNode when added to the sequence? https://media.discordapp.net/attachments/371759389889003532/924081522544353280/unknown.png
[03:00:43] <FromDiscord> <Elegantbeef> Yes `ident(x)` in the for loop converts makes a new `nnkIdent(strVal: x)`
[03:00:52] <FromDiscord> <Elegantbeef> So now it's full of `nnkIdent`s
[03:03:35] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Yes `ident(x)` in the": how did you know that you need to call ident? is it documented in the manual, or did you make it for this example?
[03:03:43] <FromDiscord> <sOkam!> (edit) "ident?" => "ident()?"
[03:04:36] <FromDiscord> <Elegantbeef> `ident`s are non semantically checked symbols
[03:04:43] <FromDiscord> <Elegantbeef> Anywhere you see a written word it's an idient
[03:05:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JnT
[03:05:22] <FromDiscord> <Elegantbeef> You can see that using `dumpTree`
[03:05:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JnU
[03:06:11] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#newEnum%2CNimNode%2CopenArray%5BNimNode%5D%2Cbool%2Cbool in this case it states what it needs
[03:18:44] <FromDiscord> <Elegantbeef> @evoalg\: here's you're weekly slicerator update\: now have `all` `zip` and `map`
[03:19:10] <FromDiscord> <Elegantbeef> All are `for` loop based for minimal amount of overhead
[03:19:16] <FromDiscord> <sOkam!> @ElegantBeef is this a typo, or is having no () after add an alternative syntax? https://media.discordapp.net/attachments/371759389889003532/924086353233322014/unknown.png
[03:19:43] <FromDiscord> <Elegantbeef> Nim has `command syntax` which means you can drop `()` in many situations
[03:19:50] <FromDiscord> <Elegantbeef> I find it easier to read when adding and things of that nature
[03:20:04] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#procedures-command-invocation-syntax
[03:20:16] <FromDiscord> <sOkam!> it is, yeah. true, didn't remember reading about it
[03:27:17] <FromDiscord> <sOkam!> I don't think I understand that for loop üòî ‚ÜµHow is x taking the value of it's corresponding line? ü§î
[03:27:37] <FromDiscord> <Elegantbeef> It's just a string
[03:27:56] <FromDiscord> <sOkam!> Common sense from other languages tells me that X would be just a number, increasing in each iteration
[03:28:00] <FromDiscord> <Elegantbeef> `file` in that case is the entire file loaded into memory `for x in file.splitLines` is each line without `\n`
[03:28:24] <FromDiscord> <Elegantbeef> `splitLines` is an iterator that yields `string`
[03:28:49] <FromDiscord> <sOkam!> and its output is assigned to x on each iteration?
[03:29:02] <FromDiscord> <Elegantbeef> Yes
[03:29:07] <FromDiscord> <sOkam!> I mean, it must... but... is that not different to other languages?
[03:29:53] <FromDiscord> <sOkam!> I'd assume that x would be just the int counter of the for loop, so the sentry value for the loop in int form... instead of being assigned the output of anything
[03:29:59] <FromDiscord> <Elegantbeef> No
[03:30:07] <FromDiscord> <sOkam!> Obv wrong... but common sense makes me think that
[03:30:14] <FromDiscord> <Elegantbeef> Nim's for loops work on iterators they dont only handle ints
[03:30:52] <FromDiscord> <Elegantbeef> you can do `for(string i = "hello"; i.Length < 100; i + "a")` in C#
[03:31:10] <FromDiscord> <Elegantbeef> In nim you define `iterator`s which `yield` a value
[03:33:05] <FromDiscord> <sOkam!> i see, makes sense
[03:33:17] <FromDiscord> <sOkam!> I like nim's way a lot more (unsurprisingly)
[03:33:26] <FromDiscord> <sOkam!> (edit) "I like nim's way a lot more (unsurprisingly) ... " 03added "üôÇ"
[03:38:08] <FromDiscord> <sOkam!> Oh, I just noticed this inside godot-cpp...‚Üµhttps://github.com/godotengine/godot-cpp/blob/master/binding_generator.py
[03:38:33] <FromDiscord> <sOkam!> Could it be worth it to modify that for nim, or not at all?
[03:39:07] <FromDiscord> <Elegantbeef> I mean we have the NimVM which can generate code, so there isnt much reason to use python
[03:39:36] <FromDiscord> <Elegantbeef> You're going to be doing the same thing but instead of using python using Nim's macros preferablly
[03:42:03] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I mean we have": modifying that file could be a reason
[03:42:35] <FromDiscord> <sOkam!> its massive, though
[03:49:11] <FromDiscord> <qb> How can I avoid that some matches won't be grouped on `scanf`? I don't want to use a json library there because that json string is really long. https://play.nim-lang.org/#ix=3Jo1
[03:53:07] <FromDiscord> <Elegantbeef> You might have to use your own matchers
[03:53:09] <FromDiscord> <qb> Like this works but I wan't to skip that `t`  variables https://play.nim-lang.org/#ix=3Jo2
[03:55:28] <FromDiscord> <Elegantbeef> Alternatively use `scanp`
[04:52:41] <FromDiscord> <qb> sent a code paste, see https://play.nim-lang.org/#ix=3Jod
[04:52:46] <FromDiscord> <qb> Umm?
[05:00:34] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jof
[05:00:42] <FromDiscord> <Yardanico> idk really
[05:00:51] <FromDiscord> <qb> just deleted it and let nimble make a new one. Same
[05:00:57] <FromDiscord> <Yardanico> are you sure your github api token has write access to that repo?
[05:00:59] <FromDiscord> <Yardanico> (edit) "that" => "your packages"
[05:01:05] <FromDiscord> <Yardanico> (edit) "are you sure your github api token ... has" 03added "that you're using for nimble publish"
[05:01:38] <FromDiscord> <qb> Guess thats fine huh https://media.discordapp.net/attachments/371759389889003532/924112116099711036/Bildschirmfoto_von_2021-12-25_02-31-09.png
[05:23:23] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 268 seconds)
[05:26:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:27:04] *** Joins: Colt (~Colt@user/colt)
[05:28:17] <FromDiscord> <TryAngle> is there a good way to compare floating point numbers in unit tests?
[05:36:35] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:38:11] <FromDiscord> <Yardanico> https://nim-lang.org/docs/math.html#almostEqual%2CT%2CT%2CNatural
[05:54:18] <FromDiscord> <TryAngle> In reply to @Yardanico "https://nim-lang.org/docs/math.html#almostEqual%2CT": thx
[06:09:16] <FromDiscord> <retkid> feels like nothing works today
[06:09:20] <FromDiscord> <retkid> hate threading in nim
[06:09:34] <FromDiscord> <retkid> passed a channel created on shared and it segfaults
[06:09:47] <FromDiscord> <retkid> is this expected?
[06:09:49] <nrds> <06Prestige99> Can you share an example?
[06:09:58] <FromDiscord> <retkid> not easily, no
[06:10:08] <FromDiscord> <retkid> uh
[06:10:13] <FromDiscord> <retkid> gimme a minute
[06:13:51] <FromDiscord> <Yardanico> if you use a channel you don't need to use shared types
[06:14:00] <FromDiscord> <Yardanico> you send/receive normal types through the channel
[06:14:05] <FromDiscord> <Yardanico> and they're just always deep copied
[06:15:17] <FromDiscord> <retkid> or something like that
[06:15:18] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Joo
[06:15:47] <FromDiscord> <retkid> ah ill try that, so i dont share the pointer?
[06:17:59] <FromDiscord> <Rika> I think you don‚Äôt need to use shared memory on the channel itself
[06:18:33] <FromDiscord> <Yardanico> as @Rika said
[06:18:47] <FromDiscord> <Yardanico> also you don't need to send the channel itself to the thread
[06:18:52] <FromDiscord> <Yardanico> ah maybe you do, I forgot
[06:19:04] <FromDiscord> <Rika> Ah wait you do I think
[06:19:06] <FromDiscord> <Rika> https://nim-lang.org/docs/channels_builtin.html
[06:19:09] <FromDiscord> <Rika> Yeah here it says you do
[06:19:30] <FromDiscord> <Rika> In which case I do not know the reason for the segfault
[06:19:55] <FromDiscord> <retkid> yea ive used them quite a bit
[06:20:04] <FromDiscord> <retkid> i think its just the god spitting me
[06:20:07] <FromDiscord> <Rika> Do you get a trace after the fault?
[06:20:10] <FromDiscord> <retkid> (edit) "god" => "gods"
[06:20:13] <FromDiscord> <retkid> uhh
[06:20:20] <FromDiscord> <Rika> If you do it would be nice if you sent it as well
[06:20:26] <FromDiscord> <retkid> read from nil
[06:20:28] <FromDiscord> <Rika> A stack trace
[06:20:41] <FromDiscord> <Rika> Stuff like function names and stuff show on it
[06:20:46] <FromDiscord> <Rika> Line numbers too
[06:20:57] <FromDiscord> <Rika> Only shows if you have them on, so not on release
[06:21:58] <FromDiscord> <Yardanico> ah right @retkid
[06:22:00] <FromDiscord> <Yardanico> or not right
[06:22:13] <FromDiscord> <Yardanico> hmmmmm
[06:22:14] <FromDiscord> <retkid> ah left?
[06:22:44] <FromDiscord> <Rika> Lol
[06:22:46] <FromDiscord> <Yardanico> ah right you forgot to open the damn channel
[06:22:50] <FromDiscord> <retkid> the stack strace comes from storeAux
[06:22:54] <FromDiscord> <retkid> :P:
[06:22:55] <FromDiscord> <retkid> pesogjfgjg
[06:22:57] <FromDiscord> <retkid> LOL
[06:23:01] <FromDiscord> <Rika> Lol
[06:23:13] <FromDiscord> <Yardanico> no need for your `ptr` stuff
[06:23:14] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Jop
[06:23:17] <FromDiscord> <Yardanico> this works just fine and it's just like in the docs
[06:23:17] <FromDiscord> <Rika> Why do you need to open channels
[06:23:24] <FromDiscord> <Yardanico> to initialize them
[06:23:42] <FromDiscord> <retkid> or well
[06:23:42] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Joq
[06:23:43] <FromDiscord> <retkid> example
[06:36:13] *** Joins: vicfred (~vicfred@user/vicfred)
[06:36:16] <FromDiscord> <retkid> so uh you were wrong
[06:36:23] <FromDiscord> <retkid> you do need the pointers
[06:36:30] <FromDiscord> <retkid> at least for some reason whatever im doing
[06:39:12] <FromDiscord> <Yardanico> show the code?
[06:56:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:59:03] <NimEventer> New thread by Niminem: Using the Compiler lib without needing the devel version of Nim, see https://forum.nim-lang.org/t/8739
[07:30:40] *** Joins: vicfred (~vicfred@user/vicfred)
[07:49:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:01:48] *** Joins: brocc (6e4dfe96fc@user/brocc)
[08:04:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:05:02] *** Joins: vicfred (~vicfred@user/vicfred)
[08:18:49] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JoI
[08:20:24] <FromDiscord> <Rika> [0]
[08:20:28] <FromDiscord> <Yardanico> result[0]
[08:20:30] <FromDiscord> <Rika> Like an array
[08:20:37] <FromDiscord> <Yardanico> it's no different from normal tuple index access
[08:20:48] <FromDiscord> <TryAngle> lol
[08:21:04] <FromDiscord> <TryAngle> I thought I did that and it didn't work
[08:21:06] <FromDiscord> <Rika> We all have these moments
[08:21:12] <FromDiscord> <TryAngle> in my head
[08:21:15] <FromDiscord> <TryAngle> o_O
[08:21:26] <FromDiscord> <Yardanico> `result` doesn't have some special syntax, it's the same as with normal variables
[08:22:05] <FromDiscord> <TryAngle> In reply to @Yardanico "`result` doesn't have some": yes but I don't know how to index normal tuples either üòÖ ‚Üµthis was just the example where I needed it
[08:22:12] <FromDiscord> <TryAngle> (edit) "needed" => ""needed""
[08:27:23] *** tinytim is now known as tinystoat
[09:04:47] <FromDiscord> <Elegantbeef> oh and @TryAngle if you get tired of repeating yourself https://github.com/beef331/constructor#constructor-1
[09:05:27] <FromDiscord> <TryAngle> In reply to @Elegantbeef "oh and <@147447489316913152> if": I already reexport your constructure library in my "utility" lirbary XD
[09:05:35] <FromDiscord> <TryAngle> (edit) "constructure" => "constructor"
[09:05:37] <FromDiscord> <Elegantbeef> Oh
[09:05:53] <FromDiscord> <Elegantbeef> I just updated/removed a bunch of shit so have fun getting brokey stuff
[09:06:24] <FromDiscord> <TryAngle> üëç
[09:13:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:23:27] <FromDiscord> <codic> so I'm refactoring my wm from one >1k loc file to lots of separate files, and I've run into a issue with recursive dependencies
[09:23:57] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3JoV
[09:24:16] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3JoW
[09:24:16] <FromDiscord> <codic> the compiler does not like this pattern
[09:24:28] <FromDiscord> <codic> ``
[09:24:35] <FromDiscord> <codic> how do I fix it?
[09:24:37] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3JoX
[09:27:07] <FromDiscord> <Elegantbeef> Hard to say without seeing where the recursion comes from
[09:28:54] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Hard to say without": looks like Wm is defined in wm.nim‚Üµand he imports wm.nim in configurerequest.nim‚Üµbut also imports configurerequest.nim in wm.nim
[09:29:13] <FromDiscord> <TryAngle> same with XConfigureRequestEvent maybe?
[09:29:20] <FromDiscord> <TryAngle> (edit) "maybe?" => "maybe but other way around with the modules?"
[09:29:39] <FromDiscord> <Elegantbeef> Well it's hard to fix the import order without the entire file to reason where it's at
[09:29:54] <FromDiscord> <Elegantbeef> Depending on what's going on this just needs a delayed import
[09:30:07] <FromDiscord> <Elegantbeef> Otherwise the structure needs reorganized
[09:33:22] <FromDiscord> <Elegantbeef> So codic in typical fashion push a branch is the easier thing for me
[09:46:00] <FromDiscord> <TryAngle> can I add a ‚Üµ`T.doSomething()`‚Üµfor one type only somehow?
[09:46:24] <FromDiscord> <impbox [ftsf]> `proc doSomething(a: TheType) =`
[09:46:35] <FromDiscord> <TryAngle> üò≥
[09:46:55] <FromDiscord> <Elegantbeef> you mean `proc doSomething(_: typedesc[TheType])`
[09:47:07] <FromDiscord> <impbox [ftsf]> is T a type or a variable of the type?
[09:47:22] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jp4
[09:47:47] <FromDiscord> <Elegantbeef> Yea my example
[09:47:49] <FromDiscord> <impbox [ftsf]> yeah, what beef said
[09:47:53] <FromDiscord> <TryAngle> ok ty guys
[09:48:13] <arkanoid> Do you thing is worth converting a python project into a nim one while keeping all the python libs and so make it a project completely based on nimpy?
[09:48:30] <FromDiscord> <codic> In reply to @TryAngle "same with XConfigureRequestEvent maybe": no XConfigureRequestEvent is defined in the x11 package
[09:48:33] <FromDiscord> <Rika> What is the "worth" you're seekibg
[09:48:37] <FromDiscord> <codic> In reply to @Elegantbeef "So codic in typical": what do you mean?
[09:48:38] <FromDiscord> <Elegantbeef> Given my disdain towards python i'm not qualified to answer this
[09:48:41] <FromDiscord> <Rika> (edit) "seekibg" => "seeking"
[09:48:45] <FromDiscord> <impbox [ftsf]> or you are
[09:48:52] <FromDiscord> <codic> do replies work through matrix?
[09:48:54] <FromDiscord> <impbox [ftsf]> leave python in the wind
[09:48:57] <FromDiscord> <Elegantbeef> Yes
[09:49:05] <FromDiscord> <codic> so wdym by push a branch?
[09:49:17] <FromDiscord> <Rika> Make a branch on your repo so we can see the whole thing
[09:49:20] <FromDiscord> <Elegantbeef> Push the current non compiling code to a branch i can checkout
[09:49:58] <FromDiscord> <codic> oh
[09:49:59] <FromDiscord> <codic> sure
[09:50:10] <arkanoid> "Worth" to me is putting static typing wherever possibile, also adding distinct PyObjects types 
[09:50:14] <FromDiscord> <codic> it doesn't do anything useful right now, and will not compile anyways, but I just want to fix this recursion error for now
[09:50:24] <FromDiscord> <TryAngle> In reply to @arkanoid "Do you thing is": I've rewrittine 2 rust projects of mine in nim already lmao‚Üµand with python I can imagine that copy pasting 90% works
[09:50:26] <FromDiscord> <codic> (not compile because none of event handlers are implemented)
[09:50:37] <FromDiscord> <codic> > and with python I can imagine that copy pasting 90% works‚Üµlmao no
[09:50:53] <FromDiscord> <impbox [ftsf]> maybe if python had types
[09:51:03] <FromDiscord> <codic> still probably no, but would bring it closer
[09:51:11] <FromDiscord> <impbox [ftsf]> the hardest bit about porting python code is trying to figure out what types things should be
[09:51:16] <FromDiscord> <Elegantbeef> Maybeeif python was nim
[09:51:20] <FromDiscord> <TryAngle> really? with rust for example I could copy paste almost all non-library specific code
[09:51:39] <FromDiscord> <TryAngle> like ofc. I had to change some things but it was really not much
[09:51:55] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Given my disdain towards": Why do you dislike python?
[09:52:04] <arkanoid> I'm perfectly fine with converting my own python code to nim. I already favor nim whenever possibile. The struggle is when I heavily depend on python libs
[09:52:18] <FromDiscord> <impbox [ftsf]> sounds like a topic for #languagewars
[09:52:22] <FromDiscord> <Elegantbeef> Do i really need to make a list üòÄ
[09:52:44] <FromDiscord> <TryAngle> In reply to @arkanoid "I'm perfectly fine with": I feel that‚Üµthat's why I'm putting an almost numpy copy on Neo right now XD
[09:53:08] <FromDiscord> <Elegantbeef> Suffice to say lack of portable programs and unenforced static typing drive me up the wall
[09:53:13] <FromDiscord> <Rika> Dynamic typing makes everything hairy and you don't realise how heavily it is used in Python until you try to convert it into Nim
[09:54:16] <FromDiscord> <codic> In reply to @codic "it doesn't do anything": with this in mind
[09:54:18] <FromDiscord> <codic> https://github.com/codic12/worm/tree/refactor
[09:54:32] <FromDiscord> <Elegantbeef> Yea i want to fix the recursion error üòõ
[09:54:59] <arkanoid> Numpy copy? Are you aware the shitload of complex problems already solved in numpy code? You think you can replace it easily?
[09:55:03] <FromDiscord> <codic> In C++ I could do this just fine by using a header but not sure how to do it in nim
[09:55:09] <arkanoid> Also pandas and many scientific stacks
[09:57:23] <FromDiscord> <Elegantbeef> First `WM` isnt exported
[09:57:32] <FromDiscord> <Elegantbeef> Secondly you have a bunch of forward declarations but no implementations
[09:57:47] <FromDiscord> <Elegantbeef> Thirdly is there any real reason WM needs to `import configurerequest`?
[09:58:10] <FromDiscord> <Just Jasmine, Please> Hey! I was wondering what would be good resources for learning how to make a website in nim? I know some gdscript so learning about variables is kind of grating, and usually looking at nim code my only issue is when to use self. Thank you for any resources!
[09:58:33] <FromDiscord> <Elegantbeef> "when to use self" inotherwords never üòú
[09:59:00] <FromDiscord> <Elegantbeef> https://github.com/karaxnim/karax is a good place to look
[09:59:03] <arkanoid> Elegantbeef lucky you that successfully get rid of python. My anger with python is driven by the same problems you've been listing. The problem is that if you need to work on tabular data, strings, graphs,  scientific representations, guis and dashboard, nim is not helping at all
[09:59:13] <FromDiscord> <Elegantbeef> Also https://github.com/karaxnim/awesome-karax
[09:59:20] <FromDiscord> <Elegantbeef> I never relied on python
[09:59:50] <FromDiscord> <Elegantbeef> Nim works well with strings
[10:00:02] <FromDiscord> <Just Jasmine, Please> You're awesome! thank you!
[10:00:13] <FromDiscord> <Elegantbeef> Dont say that i might develop an ego
[10:00:31] <FromDiscord> <Elegantbeef> I'm already an asshole, an asshole with an ego is just worse
[10:00:35] <FromDiscord> <Rika> "Might develop an ego" says the one with a massive ego
[10:00:44] <arkanoid> Eleganfbeef, try working with large string tables with array/datamancer
[10:01:09] <FromDiscord> <Just Jasmine, Please> I'm getting an ego as I learn to love myself, lol
[10:01:11] <FromDiscord> <codic> In reply to @Elegantbeef "First `WM` isnt exported": Ok, just realized that, but exporting it doesn't change anything
[10:01:13] <FromDiscord> <Elegantbeef> arkanoid you're challenging me, but havent given me any data
[10:01:22] <FromDiscord> <Elegantbeef> Like i said
[10:01:28] <FromDiscord> <codic> In reply to @Elegantbeef "Secondly you have a": Yeah like I said I'll copy-paste them after I fix this recursion error for the first implementation (configurerequest)
[10:01:30] <FromDiscord> <Elegantbeef> You dont need to import configure request in WM afaict currently
[10:01:38] <FromDiscord> <codic> oh?
[10:01:55] <FromDiscord> <Elegantbeef> Like when you have a reason to import it comeback
[10:02:38] <FromDiscord> <codic> ok first of all I just switched to my other monitor and now my editor is 4x bigger, wtf
[10:02:50] <FromDiscord> <codic> but anyways, let me try that
[10:02:52] <FromDiscord> <Elegantbeef> worm.diff https://media.discordapp.net/attachments/371759389889003532/924187924034117682/worm.diff
[10:02:56] <FromDiscord> <Elegantbeef> Here's my diff
[10:03:03] <FromDiscord> <Elegantbeef> Save you a few seconds
[10:03:10] <arkanoid> Just generate your own random/constant strings and build large tables. Then you can try to do string operations on them and/or move/serialize it and check memory usage.
[10:03:47] <FromDiscord> <Elegantbeef> I mean if i'm making a bunch of large strings and concerned of memory i'm doing `ref string`
[10:03:52] <FromDiscord> <Rika> I assume this is the mutable/immutable string difference
[10:03:54] <FromDiscord> <codic> In reply to @Elegantbeef "worm.diff": thanks
[10:04:03] <FromDiscord> <TryAngle> when using `std/random.gauss` do I need to call randomize() everytime I use it or just once?
[10:04:04] <FromDiscord> <Elegantbeef> Indeed rika
[10:04:17] <FromDiscord> <Elegantbeef> You just need to initialized the global random state
[10:04:32] <FromDiscord> <Elegantbeef> Do edits from matrix -\> discord still duplicate?
[10:04:55] <FromDiscord> <TryAngle> edit something
[10:05:00] <FromDiscord> <Elegantbeef> Oh nevermind they just dont even propagate
[10:05:02] <FromDiscord> <Just Jasmine, Please> These resources are amazing so far, thank you
[10:05:12] *** Quits: elph (uid286227@id-286227.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:05:14] <FromDiscord> <codic> In reply to @Elegantbeef "worm.diff": wait why did you remove all the event handlers
[10:05:17] <FromDiscord> <codic> i was going to implement them
[10:05:17] <FromDiscord> <Elegantbeef> You get thanked multiple times just for linking something
[10:05:31] <FromDiscord> <Elegantbeef> Cause they're all forward declares without implementations meaning i couldnt compile
[10:05:41] <FromDiscord> <TryAngle> In reply to @Elegantbeef "You just need to": so I just need to call it once the program starts?
[10:05:48] <FromDiscord> <Elegantbeef> Yep
[10:05:53] <FromDiscord> <codic> In your diff you did import events/configurerequest
[10:06:02] <FromDiscord> <Elegantbeef> Yep
[10:06:05] <FromDiscord> <codic> Oh I don't actually need the forward declarations there
[10:06:09] <FromDiscord> <codic> Cool
[10:06:12] <FromDiscord> <codic> One benefit to using multiple files
[10:06:23] <FromDiscord> <codic> Thanks
[10:06:37] <FromDiscord> <Elegantbeef> Without using the configure request i cannot be certain the delayed import will work for you
[10:06:45] <FromDiscord> <Elegantbeef> But that's basically the pattern you'll want to follow iirc
[10:06:50] <arkanoid> There's nothing like good string data manipulation in nim scientific stack. Real stacks handles strings like a database does, kinda, so the memory layout of them is handled accordingly. Nim ref strings are not ok to move string data
[10:07:15] <FromDiscord> <Elegantbeef> Yea i dont do scientific computing, i do game dev mostly
[10:07:25] <FromDiscord> <Elegantbeef> So my idea of what needs to be done is nowhere near yours
[10:07:59] <FromDiscord> <Elegantbeef> I need an actual problem proposed/solution in front of me to actually understand the issues
[10:08:04] <arkanoid> Apache arrow project is the good representation on what has to be done in nim
[10:08:08] *** Joins: vicfred (~vicfred@user/vicfred)
[10:08:35] <arkanoid> In particular the memory layout for strings
[10:08:38] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jp5
[10:09:16] <FromDiscord> <Elegantbeef> Reread try
[10:09:26] <FromDiscord> <Elegantbeef> "first usage of the procs from this module"
[10:09:40] <arkanoid> I mean this https://arrow.apache.org/
[10:10:17] <FromDiscord> <Elegantbeef> Yea i found it
[10:10:27] <FromDiscord> <Elegantbeef> I've got a basis of what it is
[10:10:39] <arkanoid> If nim data stacks would use this memory layout, it would be ready to be views as numpy data or R data or whatever data and use FFI accordingly 
[10:11:05] <FromDiscord> <TryAngle> In reply to @Elegantbeef ""first usage of the": I'm stupid >.<,‚Üµso `this` is the rand module?
[10:11:12] <FromDiscord> <Elegantbeef> Yes
[10:11:15] <FromDiscord> <evoalg> In reply to @Elegantbeef "<@900872397224280125>\: here's you're weekly": Thank you for my xmas present!
[10:11:16] <FromDiscord> <TryAngle> ok ty
[10:11:42] <FromDiscord> <Elegantbeef> I removed some of the mess mentioned before, any more things i should add evo?
[10:12:13] <FromDiscord> <evoalg> gosh I dunno!
[10:14:08] <FromDiscord> <Elegantbeef> I looked at sequtils and didnt see anything else that made sense
[10:14:24] <FromDiscord> <Elegantbeef> I still wish i could have `zip` work as an iterator
[10:14:48] <arkanoid> Elegantbeer, here you can find some experiments made by me to share data between nim and numpy via arrow, but making this work for strings requires much more work https://github.com/SciNim/scinim/issues/8#issuecomment-991844883
[10:14:54] <FromDiscord> <Elegantbeef> There's just no way without making closures of the iterator
[10:15:47] <FromDiscord> <Elegantbeef> arkanoid we have metaprogramming so imagine we can do a 0 cost abstraction ontop of the arrow buffer to a sequence
[10:15:54] <FromDiscord> <evoalg> a good thing about python is that it has loads of iterators / generators ... it has to because it's already slow and it doesn't want to be any slower ... and when I use nim and it's really fast, it leaves a bad taste in my mouth if it's doing wasteful copies (which is bad for both memory and speed) ... so I really appreciate slicerator, thank you @ElegantBeef üòÑ üòÑ
[10:15:58] <FromDiscord> <Elegantbeef> I'll have to look at the code to see if i can reason it
[10:16:51] <FromDiscord> <evoalg> In reply to @Elegantbeef "I still wish i": but slicerator zip ... is it still less overhead?
[10:17:07] <FromDiscord> <Elegantbeef> It emits a sequence so nope
[10:17:37] <FromDiscord> <Elegantbeef> It's capable of zipping N number of iterators though
[10:18:33] <FromDiscord> <evoalg> indeed it's impressive ... it even takes as arguments the results of zip'ed up lists
[10:20:05] <FromDiscord> <Elegantbeef> God damn it arkanoid, you dont mention stuff like this to me, this sounds like a fun thing to write code for
[10:20:36] <FromDiscord> <evoalg> arrays, lists, strings ... anything iterable ... and any amount of them ... I was missing that in python as pythons zip can take any number of args, but you've provided that so thank you! ... one of the benefits of nim being a small community is I can talk people who can actually change nim
[10:21:52] <FromDiscord> <evoalg> ... and Yards is fixing sugar's collect scope ... impressive that things get looked at so fast and it's not all bogged down
[10:22:20] <arkanoid> I know, but I very far from your capacity in writing nim code with low overhead and macros. I've been thinking about doing it on my own but not sure as writing scientific stack requires some low level knowledge of the source data buffers
[10:23:14] <FromDiscord> <Elegantbeef> Yea i'm just looking at https://arrow.apache.org/docs/format/Columnar.html and my mind is going "hmm `ArrowBuffer[T]`  can be done, just requires codifing this spec"
[10:25:01] <arkanoid> Elegantbeef, please have a look at the C abi too https://arrow.apache.org/docs/format/CDataInterface.html
[10:25:03] <FromDiscord> <Elegantbeef> I mean if you tak a whirl at it i dont mind helping
[10:25:10] <FromDiscord> <Elegantbeef> I'm nothing if not helpful
[10:27:05] <arkanoid> Thanks, I'll consider it. If I will ever find time to develop this
[10:30:02] <FromDiscord> <Elegantbeef> It's an interesting spec
[10:30:38] <FromDiscord> <Elegantbeef> And we can do some fun things like making it so we can interact with it like actual objects for instance `myArrBuffer[index].field = 300` can be 100% valid üòÄ
[10:31:14] <FromDiscord> <Elegantbeef> The C ABI seems simpler
[10:34:09] <FromDiscord> <Elegantbeef> Wait until you run into a simple compiler bug that i can fix üòõ‚Üµ(@evoalg)
[10:35:16] <FromDiscord> <evoalg> yea I want play with slicerator with some tests now that aoc is over (nearly)
[10:36:07] <FromDiscord> <Elegantbeef> Still keeping with AOC, nice
[10:36:17] <arkanoid> Elegantbeef, and the best part is that this would make a bridge with a lot of stuff https://arrow.apache.org/img/shared.png
[10:38:31] <FromDiscord> <Elegantbeef> Isnt that with all the API support not just the minimal CABI
[10:38:37] <FromDiscord> <Elegantbeef> I might misunderstand how this is structured
[10:38:39] <arkanoid> The problem is it is not sufficient to be capable of reading or writing buffer in this format, it would be required to implement this straight into arraymancer and its logic
[10:38:45] <FromDiscord> <evoalg> In reply to @Elegantbeef "Still keeping with AOC,": there are large gaps where I just give up ... sometimes not even being about to do part 1 üòâ
[10:39:29] <FromDiscord> <Elegantbeef> Yea pretty much me, havent done any since like the 7th
[10:40:27] <FromDiscord> <Elegantbeef> I just dont have much interest some problems, plus i was generally unmotivated to code anything for a bit
[10:41:46] <arkanoid> A starting point could be just to copy the approach of others https://arrow.apache.org/powered_by/
[10:42:57] <arkanoid> I'm not a rust programmer, but I'd look into rust's datamancer https://github.com/pola-rs/polars
[10:43:35] <FromDiscord> <Elegantbeef> I mean afaict this would give you a 0 cost communication to languages, so just being able to use it would allow you to then use python and stuff and petition arraymancer to support it üòÄ
[10:44:40] <arkanoid> And bonus it seems actually to be the fastest approach, too https://h2oai.github.io/db-benchmark/
[10:45:00] <FromDiscord> <Elegantbeef> Atleast that's how i understand it i could be wrong
[10:45:09] <FromDiscord> <Elegantbeef> Like i said i'm not anywhere near data science
[10:45:10] <arkanoid> Not sure how datamancer would display in that benchmark
[10:51:04] <arkanoid> I've also already tested automatic wrapping of arrow c-api (via gobject) using futhark and it worked out nicely
[10:51:27] <arkanoid> Problem is strings, again
[10:52:13] <arkanoid> Let's say that reading and writing arrow from/to memory is not a big deal. Manipulating it in memory with algos made in nim is another story
[10:53:06] <arkanoid> But I'd be happy to have a zero copy datamancer to pandas with strings
[10:53:59] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3Jpe
[10:54:29] <FromDiscord> <Elegantbeef> `obj()` means size is `0`
[10:54:30] <FromDiscord> <Rika> Other thing is a copy of thing
[10:54:42] <FromDiscord> <that_dude> Yeah I do get both of those
[10:54:48] <FromDiscord> <Rika> Because you stored a deference of location
[10:55:04] <FromDiscord> <Rika> Hence thing does not become 1 when you make other thing 1
[10:55:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jpg
[10:55:42] <FromDiscord> <Elegantbeef> `[]` dereferences a pointer so as rika said `var otherThing = location[]` is storing a copy
[10:55:49] <FromDiscord> <that_dude> shouldn't a dereference embody the original object as well? I guess that's where I got hung up
[10:55:56] <FromDiscord> <Elegantbeef> It doesnt point back
[10:55:58] <FromDiscord> <Elegantbeef> it copies
[10:56:01] <FromDiscord> <Rika> If you directly do it like what beef does yes
[10:56:06] <FromDiscord> <Rika> If you store it further it copies
[10:56:12] <FromDiscord> <Elegantbeef> `location[]` is an l-value which is asignable
[10:56:37] <FromDiscord> <Elegantbeef> but if you do `var a = location[]` it's an l-value being assigned which is a copy since l-values cannot safely outlive where they're created
[10:56:44] <FromDiscord> <that_dude> Is there a  way to store it in a new variable without the additional copy, or would I need to use a template thing
[10:56:48] <FromDiscord> <Rika> No
[10:56:50] <FromDiscord> <Rika> Just use the pointer
[10:56:58] <FromDiscord> <Rika> Keep the pointer and do what beef does
[10:57:01] <FromDiscord> <Elegantbeef> or a `ref`
[10:57:08] <FromDiscord> <Rika> Either works
[10:57:26] <FromDiscord> <that_dude> I could never get refs to work lol and pointers are easier for me to understand.
[10:57:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jph
[10:57:44] <FromDiscord> <Elegantbeef> References are pointers
[10:57:52] <FromDiscord> <Elegantbeef> If you understand one you understand the other
[10:58:00] <FromDiscord> <Elegantbeef> The only difference is they're garbage collected
[10:58:16] <FromDiscord> <Rika> References are easier than pointers
[10:58:19] <FromDiscord> <that_dude> Wait I think I understand what wasn't working
[10:58:22] <FromDiscord> <Elegantbeef> A pointer is just an address in memory, a reference is the same
[10:58:32] <FromDiscord> <Rika> You only think they‚Äôre harder because you think you know how pointers work
[10:58:37] <FromDiscord> <that_dude> true
[10:58:50] <FromDiscord> <Rika> Now do you actually know how pointers work is the question
[10:58:58] <FromDiscord> <that_dude> I guess the thing is that I can get the pointer after initializing the object, but how would I get the ref?
[10:59:10] <FromDiscord> <Elegantbeef> You cant get a reference to a stack allocated object
[10:59:21] <FromDiscord> <that_dude> That's prob what messes with me
[10:59:40] <FromDiscord> <Rika> You need to make a new reference and store the initialised object in it
[10:59:45] <FromDiscord> <Rika> Then stop using the regular object
[10:59:49] <FromDiscord> <Rika> And just use the red
[10:59:51] <FromDiscord> <Rika> Ref
[10:59:56] <FromDiscord> <Elegantbeef> `pointer` is unsafe due to this behaviour
[11:00:16] <FromDiscord> <Elegantbeef> You an take a pointer to  a stack object, which means you can have a pointer to memory that isnt in use
[11:00:16] <FromDiscord> <Rika> No you‚Äôre unsafe because of your behaviour smh
[11:00:26] <FromDiscord> <Rika> Hello segfault
[11:00:30] <FromDiscord> <that_dude> Lol
[11:00:30] <FromDiscord> <Elegantbeef> You cannot take a reference to a stack object so they cannot be dangling
[11:00:38] <FromDiscord> <that_dude> haven't gotten that once yet tho
[11:00:47] <FromDiscord> <Elegantbeef> Nah dangling pointers dont tend to segfault afaik
[11:00:48] <FromDiscord> <Rika> You would have if you continued using a pointer
[11:01:14] <FromDiscord> <Rika> ~~not that you can‚Äôt if you use a reference~~
[11:03:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jpj
[11:04:00] <FromDiscord> <that_dude> I guess I never understood what makes refs so special that I would want to default to them over normal objects
[11:04:26] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jpk
[11:04:28] <FromDiscord> <Elegantbeef> You want their semantics
[11:05:08] <FromDiscord> <Elegantbeef> So you want the abillity to have multiple variables point at them, you want to not copy the object on assignment,
[11:05:24] <FromDiscord> <Elegantbeef> My forum post i spam whenever this comes up https://forum.nim-lang.org/t/8426#54529
[11:05:57] <FromDiscord> <Rika> In reply to @that_dude "I guess I never": You can‚Äôt put an object in itself
[11:06:35] <FromDiscord> <that_dude> Yeah I bet this concept has been beaten to death lol. It just that I come from python and a lot of the points don't mean anything to me.
[11:06:42] <FromDiscord> <Rika> If you want to make a graph (naively) then you default to pointer or ref semantics
[11:07:15] <FromDiscord> <Elegantbeef> Ref vs. non ref is all about what do you want the object to act like
[11:07:56] <FromDiscord> <Elegantbeef> Do you want it to behave like a value(primitives) or a reference(class in most languages)
[11:08:02] <FromDiscord> <that_dude> From my point of view, probably because I don't know enough, but I don't really care about heap/stack, and I haven't planned far enough ahead to understand which type I need until I'm ~500 lines into my code
[11:08:42] <FromDiscord> <that_dude> Like I try to plan things, but concept vs Implementation hits me hard
[11:08:43] <FromDiscord> <Elegantbeef> That's not really the question, what does the design require, does it require many views into a single object, does it require possible cyclical structures
[11:09:19] <FromDiscord> <Elegantbeef> Some people view refs as "I dont need `var` in procedures", so there are many views about when to use ref
[11:09:26] <FromDiscord> <Elegantbeef> There is sadly no emprical answer üòÄ
[11:09:44] <FromDiscord> <Rika> There are things you literally cannot do with a regular object but can with a ref so
[11:10:10] <FromDiscord> <that_dude> I guess I'll reformat stuff to try to make sure ref works with the stuff instead
[11:10:12] <FromDiscord> <impbox [ftsf]> in python pretty much everything behaves like a ref
[11:10:28] <FromDiscord> <Elegantbeef> What are you working on dude?
[11:10:30] <FromDiscord> <impbox [ftsf]> (probably a simplication)
[11:10:33] <FromDiscord> <that_dude> well
[11:10:51] <FromDiscord> <Elegantbeef> If you describe the project or share the use case it might make it easier to suggest
[11:10:58] <FromDiscord> <Elegantbeef> I generally default to object
[11:11:03] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3Jpl
[11:11:09] <FromDiscord> <Rika> In reply to @impbox "in python pretty much": Super oversimplification
[11:11:32] <FromDiscord> <Rika> Pythonistas use ‚Äúlabel semantics‚Äù to describe it afaik
[11:11:53] <FromDiscord> <that_dude> Let me upload my main project to github real quick
[11:12:49] <FromDiscord> <impbox [ftsf]> like refs in that they're allocated on the heap and are garbage collected and such and can't dangle
[11:12:58] <FromDiscord> <Elegantbeef> Quick everyone belittle them for a minor thing so they never come back! üòÄ
[11:13:23] <FromDiscord> <Elegantbeef> Being on the heap prevents dangling üòõ‚Üµ(@impbox [ftsf])
[11:13:34] <FromDiscord> <that_dude> https://github.com/XDEmer0r-L0rd-360-G0d-SlayerXD/Hydris Is the main project, where board is a lib for sim which is a lib for game and finesse trainer. I am using raylib, but excluded the files
[11:13:36] <FromDiscord> <impbox [ftsf]> does it?
[11:13:47] <FromDiscord> <Rika> What is that username‚Ä¶
[11:13:48] <FromDiscord> <impbox [ftsf]> if you delete something on the heap you can have dangling pointers to it
[11:13:58] <FromDiscord> <impbox [ftsf]> (but not in python)
[11:13:59] <FromDiscord> <that_dude> https://github.com/XDEmer0r-L0rd-360-G0d-SlayerXD/simple_inject Is the most recent thing I was working on and as to why I'm asking all these questions
[11:14:08] <FromDiscord> <Elegantbeef> I might be wrong with the semantics of dangling, though it was only to the stack üòõ
[11:14:16] <FromDiscord> <Rika> I‚Äôd immediately die if I had that username ngl
[11:14:21] <FromDiscord> <that_dude> Back in highschool a teacher said to make a professional name and I thought It would be funny to make the xboxy name I could think uf
[11:14:23] <FromDiscord> <that_dude> of
[11:14:31] <FromDiscord> <Rika> I see
[11:14:36] <FromDiscord> <Rika> So it‚Äôs ironic
[11:14:39] <FromDiscord> <that_dude> Yeah
[11:14:57] <FromDiscord> <that_dude> I made sure to get as close to the name length cap as I could lol
[11:15:38] <FromDiscord> <Elegantbeef> `is cast[ptr A] and cast[ref A] the same` no
[11:16:06] <FromDiscord> <that_dude> Right I was trying to keep a log of things I wanted to look up or remember when I'm done with this
[11:16:07] <FromDiscord> <Rika> Don‚Äôt do the second one lol
[11:16:23] <FromDiscord> <that_dude> In a test I did I think both worked the same
[11:16:28] <FromDiscord> <Rika> They don‚Äôt
[11:16:31] <FromDiscord> <Rika> Don‚Äôt do the second one
[11:16:37] <FromDiscord> <that_dude> That's why I was wondering about that
[11:16:42] <FromDiscord> <TryAngle> In reply to @Elegantbeef "`is cast[ptr A] and": because of pointers, I've been sitting since 02:00 at the same issue.... It's almost 09:00 for me now..............‚Üµbut I finally just got it, in the exact moment u posted that
[11:16:57] <FromDiscord> <Elegantbeef> I mean it'll work, and it'll behave the same but you arent getting a reference
[11:17:07] <FromDiscord> <Elegantbeef> You're getting a fake reference the GC doesnt care about
[11:17:49] <FromDiscord> <Rika> I‚Äôd just say ‚ÄúUB‚Äù
[11:17:53] <FromDiscord> <Elegantbeef> Congrats what was the issue?‚Üµ(@TryAngle)
[11:17:57] <FromDiscord> <Rika> No fuckin clue what that would do
[11:18:02] <FromDiscord> <Rika> So just don‚Äôt do it
[11:18:08] <FromDiscord> <that_dude> Lol
[11:18:09] <FromDiscord> <Elegantbeef> Indeed
[11:19:39] <FromDiscord> <that_dude> Btw simple_inject was my solution to https://forum.nim-lang.org/t/8652#56305. I wanted a wanted a way to inject code from an outside module without impacting the way the main module runs
[11:20:04] <FromDiscord> <that_dude> I just probably explained the my constrains very poorly
[11:20:18] <FromDiscord> <Elegantbeef> I mean we understand but it's just a whacky desire
[11:20:39] <FromDiscord> <that_dude> Yes, but it was needed for they way I have hydris structured
[11:23:00] <FromDiscord> <that_dude> Because I want to be able to repurpose the different layers of module for different projects. I had the highest level for game implementation, sim was for creating a general game loop and different function I care about for any version of the game I wanted to make, and board was to be the lowest level to let me build the sim file, and use it for computation purposes such as creating bots or creating solvers
[11:23:25] <FromDiscord> <Elegantbeef> I mean that's why you make the code modular
[11:24:31] <FromDiscord> <that_dude> I tried to make board to be context free with procs you can plop in anywhere, while sim has an actual game loop with context in it that you need to work with.
[11:24:45] <FromDiscord> <Elegantbeef> you have 4 different game loops procedures declare
[11:24:51] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Congrats what was the": it's bit long, sorry for the bloat u'll see now XD
[11:24:58] <FromDiscord> <Rika> Context free sounds like ‚Äúglobals‚Äù to me
[11:25:42] <FromDiscord> <that_dude> I've been trying to avoid globals because that limits the amount of instances I can have afaik
[11:25:59] <FromDiscord> <impbox [ftsf]> context free sounds like pure functions to me
[11:26:07] <FromDiscord> <Elegantbeef> What do the game loops do differently, they're so large it's hard to see
[11:26:29] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jpq
[11:26:57] <FromDiscord> <TryAngle> because prior to that, I was just taking the data of the vector
[11:28:03] <FromDiscord> <Elegantbeef> That's a fun issue
[11:28:18] <FromDiscord> <that_dude> It's different tetris game modes. One is to clear as many lines as quickly as possible, another is timed where you want want the highest score in a set amount of time, another is to survive as long as you can, and the last one is to clean up your board as fast as possible
[11:28:34] <FromDiscord> <Elegantbeef> And they require 4 functions why?
[11:29:29] <FromDiscord> <that_dude> Because I thought it would lighten the mental load if I keep the seperate. I could just collapse the procs. All of them use different systems in different orders
[11:29:58] <FromDiscord> <TryAngle> In reply to @Elegantbeef "That's a fun issue": and I never checked the follow up code because I thought the whole time that the randomSpiral() code was wrong, when I was just using the row() proc in the code after that wrong ....
[11:30:05] <FromDiscord> <that_dude> That way I wouldn't have to worry about accidentally introducing a bug in one mode without a decent way to test it
[11:32:40] <FromDiscord> <Elegantbeef> I guess i'll just shush
[11:33:33] <FromDiscord> <that_dude> Lol you're fine
[11:34:11] <FromDiscord> <impbox [ftsf]> just don't introduce bugs and you'll be fine
[11:34:31] <FromDiscord> <that_dude> That's the dream
[11:34:56] <FromDiscord> <Elegantbeef> having 4 separate procedures with repeated logic makes it harder to reason about and introduce more errors
[11:36:30] <FromDiscord> <Elegantbeef> Like you have this 4 times https://github.com/XDEmer0r-L0rd-360-G0d-SlayerXD/Hydris/blob/master/Game0_2.nim#L130-L148 and the only difference is `cheeseMode` so adding a `sim.gameMode` seems like it'd make your life simpler
[11:36:49] <FromDiscord> <Elegantbeef> `if sim.gameMode == cheeseMode: doCheeseLogic()`
[11:37:30] <FromDiscord> <that_dude> Well I have a few defenses, mainly that once it works I don't have to worry about it again, but also that these were the first implementations I made more as a test to make sure the underlying modules work properly. I will note that down tho
[11:38:12] <FromDiscord> <Elegantbeef> And for the larger states i'd suggest making a procedure for them, to reduce the code in this procedure
[11:38:50] <FromDiscord> <Elegantbeef> The same applies to all that logic imo, really `sim.gameMode` could be `set[GameOptions]` then you could selectively toggle these for customization üòÄ
[11:39:39] <FromDiscord> <that_dude> I do think I was slowly moving to sets and a way from enums for some of my settings
[11:40:03] <FromDiscord> <that_dude> At least for my history settings in sim
[11:40:57] <FromDiscord> <that_dude> The funny thing is that I think this is my 3rd rewrite of this code because I was unhappy with the shape and how messy the previous versions were
[11:41:28] <FromDiscord> <that_dude> I do appreciate you taking a look at my stuff though. :)
[11:41:53] <FromDiscord> <impbox [ftsf]> remember, messy code that works is better than clean code that doesn't work
[11:42:14] <FromDiscord> <that_dude> Exactly. The only condition is that the messy code works too
[11:42:39] <FromDiscord> <impbox [ftsf]> once you get it working, you can clean it up... or you could leave it and do something more productive
[11:42:48] <FromDiscord> <Elegantbeef> Messy code that is hard to maintain is bad for my sanity üòõ
[11:43:03] <FromDiscord> <impbox [ftsf]> fortunately, most code doesn't need to be maintained
[11:43:07] <FromDiscord> <that_dude> I really do want to clean this up, but I want it to be done first
[11:43:18] <FromDiscord> <Elegantbeef> Extending code is maintained imo üòõ
[11:43:47] <FromDiscord> <impbox [ftsf]> well most code gets thrown out, at least in gamedev
[11:44:31] <FromDiscord> <impbox [ftsf]> as long as it works, if it's really important to clean it up, you can do it when you need to
[11:45:02] <FromDiscord> <Rika> I would argue it is always important to clean it up unless you want a one hit wonder or to spend a lot of time refactoring
[11:45:02] <FromDiscord> <Elegantbeef> Yea i let my personal idea that i hate writing code get in the way of things üòÄ
[11:45:21] <FromDiscord> <impbox [ftsf]> or you move on to the next project because that one sucked
[11:45:33] <FromDiscord> <impbox [ftsf]> you can write it cleaner on the next project
[11:45:35] <FromDiscord> <Rika> Like okay duh of course make a working shitty version but leaving it shitty is an awful idea
[11:46:17] <FromDiscord> <Rika> In reply to @impbox "or you move on": Yeah
[11:46:21] <FromDiscord> <Rika> That‚Äôs fine too
[11:46:28] <FromDiscord> <impbox [ftsf]> (i leave my code shitty, it still works)
[11:46:56] <FromDiscord> <that_dude> I think I have pretty big plans for this project so I really do need to clean it.
[11:47:11] <FromDiscord> <Elegantbeef> my view is generally if you're repeating yourself you're writing bad code
[11:47:23] <FromDiscord> <Elegantbeef> I said my view is if you're repeating yourself it's bad
[11:47:36] <FromDiscord> <that_dude> I say that when you hit a 3rd time, you've done something wrong
[11:47:52] <FromDiscord> <Elegantbeef> I dont even like the second time
[11:48:00] <FromDiscord> <Elegantbeef> It just shows to me there is a reason to write a procedure
[11:48:19] <FromDiscord> <Elegantbeef> or  template/macro/iteraotr
[11:48:21] <FromDiscord> <Elegantbeef> iterator even
[11:48:28] <FromDiscord> <that_dude> Well I think it's not worth spending the brainpower to properly make that abstraction
[11:48:46] <FromDiscord> <that_dude> Unless the two sections have to really be searched for
[11:48:50] <FromDiscord> <Elegantbeef> I think it generally is as it makes the code easier to read
[11:52:36] <FromDiscord> <TryAngle> hmmm the values between `std/random/gauss` and  `np.random.randn` seem to be a lot different?‚Üµmainly gauss seems to be a lot more linear?
[11:52:40] <FromDiscord> <Elegantbeef> But i'm also the odd guy that does `type Reset = distinct void`
[11:52:57] <FromDiscord> <TryAngle> (edit) "linear?" => "linear?‚Üµwould there be a better approximation for nim for np.random.randn?"
[11:55:03] <FromDiscord> <Elegantbeef> If the stdlib doesnt tickle your fancy maybe one of these will? https://nimble.directory/search?query=random
[11:55:24] <FromDiscord> <satoro.tadziri> sent a long message, see http://ix.io/3JpE
[11:56:15] <FromDiscord> <satoro.tadziri> (edit) "http://ix.io/3JpE" => "http://ix.io/3JpG"
[11:56:37] <FromDiscord> <Elegantbeef> Man we're using Nim and people still make their own reesult variables
[11:58:11] <FromDiscord> <Elegantbeef> Seems the issue is with the old runtime
[11:58:22] <FromDiscord> <Elegantbeef> try `--gc:arc`
[11:58:43] <FromDiscord> <Elegantbeef> Even with `--newRuntime` `let` works properly
[11:59:09] <FromDiscord> <Elegantbeef> So yea seems it's a case of the compiler thinking it's smart
[11:59:17] <FromDiscord> <Elegantbeef> But infact it was being dumb
[11:59:43] <FromDiscord> <Solitude> thats cringe
[11:59:56] <FromDiscord> <Elegantbeef> Solitude as usual being fucking weird
[12:00:21] <FromDiscord> <satoro.tadziri> In reply to @Elegantbeef "Man we're using Nim": I actually used `result` but after pulling my hair for a few minutes I decided to split the func to find the problem. What you see is just copying it back into single place üôÇ
[12:02:17] <FromDiscord> <Elegantbeef> Yea i was just joking üòõ
[12:02:50] <FromDiscord> <Elegantbeef> I wonder if i can duplicate this
[12:03:36] <FromDiscord> <satoro.tadziri> In reply to @Elegantbeef "Even with `--newRuntime` `let`": It seems to solve the problem but it is very unexpected for me.‚Üµ‚ÜµWhen can I read about `--newRuntime` and what it actually does behind the scenes?
[12:03:58] <FromDiscord> <Elegantbeef> You arent supposed to use it alone, i just thought i'd test it
[12:04:06] <FromDiscord> <Elegantbeef> You should use `arc/orc` instead
[12:04:38] <FromDiscord> <Elegantbeef> I'm going to see if i can repro it and use that to reason why it happens
[12:06:20] <FromDiscord> <Ricky Spanish> would it be difficult to make a portable version of nim? iv compiled from scratch but the install script seems to require nimble and a few other things to be in specific locations on the host os, is there a simple way to modify/overwrite those locations in terms of where nim will look for them
[12:08:01] <FromDiscord> <Solitude> nim doesnt require nimble. what install script?
[12:08:33] <FromDiscord> <Rika> You can install Nim anywhere just as long as you change your path variable as well
[12:08:52] <FromDiscord> <Ricky Spanish> sent a code paste, see https://play.nim-lang.org/#ix=3JpJ
[12:09:41] <FromDiscord> <Ricky Spanish> ah so all i need is to add the nim folder to my path and should be fine?
[12:09:48] <FromDiscord> <Solitude> yes
[12:09:55] <FromDiscord> <Ricky Spanish> ah ok great thanks
[12:16:43] <FromDiscord> <Elegantbeef> I get a min reproduce of this bug sadly
[12:16:46] <FromDiscord> <Elegantbeef> i cannot\
[12:28:35] *** Joins: xet7 (~xet7@user/xet7)
[15:04:26] <FromDiscord> <tbrekalo> is there something as `std::ref` in nim? And object which takes a reference to a non reference type
[15:04:47] <FromDiscord> <tbrekalo> (edit) "type" => "type;‚Üµ‚Üµbtw. happy Christmas everyone"
[15:04:50] <FromDiscord> <tbrekalo> (edit) "is there something as `std::ref` in nim? And object which takes a reference to a non reference type;‚Üµ‚Üµbtw. happy Christmas everyone ... " 03added "üôÇ"
[15:35:38] *** Joins: sidro (~sidro@86.121.200.249)
[15:36:06] *** Parts: sidro (~sidro@86.121.200.249) ()
[15:45:18] <FromDiscord> <Rika> what is the difference of that and Nim "ref"?
[15:54:15] <FromDiscord> <pmunch> You should be able to simply do \`ref MyNonRefObject\` and then create the object with \`new\` to allocate it on the heap and get a reference to it
[16:10:14] <FromDiscord> <tbrekalo> that's the issue; I have to create a new reference object
[16:10:32] <FromDiscord> <tbrekalo> I want to make a reference to an existing object that isn't of type `ref object`
[16:17:32] <FromDiscord> <Rika> Pointer; you cannot safely reference stack memory
[16:17:48] <FromDiscord> <Rika> Or do you mean you want to make a reference of a type that isn't
[16:18:08] <FromDiscord> <Rika> Just put "ref TheType", you don't need to make a new one
[16:18:14] <FromDiscord> <Rika> A new type I mean
[16:21:22] *** Joins: neceve (~quassel@2.26.93.228)
[16:39:59] <FromDiscord> <alfa> is there a way to get more verbose compiler output? rn it it just says SIGSEGV
[16:44:59] <FromDiscord> <Zajt> sent a code paste, see https://play.nim-lang.org/#ix=3Jqw
[16:45:42] <FromDiscord> <Zajt> (edit) "https://play.nim-lang.org/#ix=3Jqw" => "https://play.nim-lang.org/#ix=3Jqx"
[16:46:10] <FromDiscord> <Zajt> Because I guess I can't do like that, or should I change `when isMainModule` to like `proc main():` and then call main() inside DLL_PROCESS_ATTACH?
[16:46:39] <FromDiscord> <Zajt> (edit) "https://play.nim-lang.org/#ix=3Jqx" => "https://play.nim-lang.org/#ix=3Jqy"
[16:50:06] <FromDiscord> <sOkam!> Any clue what's the mistake here? ü§î https://media.discordapp.net/attachments/371759389889003532/924290406391357460/unknown.png
[16:52:56] <FromDiscord> <Solitude> you didnt export your fields
[16:53:10] <FromDiscord> <Rosen> In reply to @sOkam! "Any clue what's the": Don't you have to export the members of the object that you want to use outside of the module with ?
[16:53:56] <FromDiscord> <sOkam!> hmm where do I export them? in the functions?
[16:54:04] <FromDiscord> <Solitude> in the type declaration
[16:55:18] <FromDiscord> <sOkam!> That fixed it, yep. tyty! üôÇ https://media.discordapp.net/attachments/371759389889003532/924291718172532746/unknown.png
[17:18:54] *** Joins: neurocyte0132889 (~neurocyte@94.16.90.231)
[17:18:54] *** Quits: neurocyte0132889 (~neurocyte@94.16.90.231) (Changing host)
[17:18:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:24:01] <FromDiscord> <qb> In reply to @Zajt "Hey, I have one": Are you coding an injectable library?
[17:28:41] <FromDiscord> <Zajt> In reply to @qb "Are you coding an": How do you mean?
[17:29:38] <FromDiscord> <qb> Nevermind. Why do you create a custom dllmain at all? The nim compiler already handles that. just use `when isMainModule: launch()`  aswell
[17:30:16] <FromDiscord> <Zajt> How would I compile it to a dll?
[17:30:23] <FromDiscord> <qb> `--app:lib`
[17:30:31] <FromDiscord> <Zajt> and then what is the export function?
[17:32:48] <FromDiscord> <Zajt> because if you add code like the above, I specify the export function to call myself
[18:12:30] *** Joins: arkurious (~arkurious@user/arkurious)
[18:24:24] <NimEventer> New post on r/nim by TheDarkMode: Best training read though for Nim, see https://reddit.com/r/nim/comments/rob4cr/best_training_read_though_for_nim/
[18:43:05] <FromDiscord> <tbrekalo> In reply to @Rika "Or do you mean": I wanted to have non-gc reference to a field of a sequence. I ended up creating a new type which holds an index of an element I wanna access and made a closure for quick access. ‚Üµ‚ÜµWanted some syntax sugar instead of writing `someSeq[idx]`
[20:57:01] <NimEventer> New thread by Mantielero: Solvespace.nim - WiP, see https://forum.nim-lang.org/t/8740
[21:12:55] <FromDiscord> <Professor Actual Factual> Perhaps a naive question but why not just use `var` for all parameters in procs? I get that immutability has its place in certain applications and side effects can be a problem, but surely passing pointers rather than copies of values is faster? Or is the line of thought here, that yes immutability is slower, but we are willing to incure a small allocation penalty to avoid possible unintended side effects down the road.
[21:30:30] *** Quits: xiamx[m]1 (~xiamxmatr@2001:470:69fc:105::1:5692) (Quit: Reconnecting)
[21:30:42] <FromDiscord> <demotomohiro> Passing arguments to a proc without var is not slower because Nim automatically generates the  code pass pointer if sizeof argument is large enough.
[21:30:43] *** Joins: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692)
[21:31:59] *** Quits: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692) (Client Quit)
[21:32:12] *** Joins: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692)
[21:34:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:38:04] *** xiamx[m]1 is now known as xiamx
[21:52:55] <FromDiscord> <Professor Actual Factual> In reply to @demotomohiro "Passing arguments to a": Wow i never knew this. Is there somewhere in the docs that states this or has more about it?
[22:05:09] <FromDiscord> <Solitude> In reply to @Professor Actual Factual "Wow i never knew": https://nim-lang.org/docs/manual.html#procedures-var-parameters end of this paragraph
[22:29:23] <FromDiscord> <Fish-Face> sent a code paste, see https://play.nim-lang.org/#ix=3JuD
[22:31:59] <FromDiscord> <Fish-Face> I suppose `enumval.ord+1` and then convert the integer index you get back (from `.pairs`) with `.EnumType`?
[22:51:50] <FromDiscord> <Solitude> In reply to @Fish-Face "Often you need to": you `succ` instead of `.ord + 1`
[22:51:54] <FromDiscord> <Solitude> you can
[22:56:36] *** Joins: vicfred (~vicfred@user/vicfred)
[23:16:51] <FromDiscord> <Forest> Does anyone know if Nimpy has a way to make an exported function asynchronous?
[23:28:51] <FromDiscord> <Fish-Face> In reply to @Solitude "you `succ` instead of": ah thank you!
[23:49:51] <FromDiscord> <deech> Using `owner` I can work back to the module. Is there a way to use the module node to traverse procs and types owned by the module?
