[00:00:28] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[00:02:46] *** Joins: Oxyd (~oxyd@user/oxyd)
[00:03:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:05:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:09:03] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:11] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 245 seconds)
[00:11:14] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[00:11:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed88:aae9:3bf6:fcb5) (Ping timeout: 240 seconds)
[00:12:37] *** Quits: highrate (~presonic@user/highrate) (Ping timeout: 240 seconds)
[00:12:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7863:b6d6:f0d1:5a66)
[00:13:11] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:26] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[00:13:29] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[00:15:14] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[00:15:14] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Client Quit)
[00:15:38] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[00:15:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:18:00] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:18:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:19:23] <senoraraton> So I have this function, and I'm trying to stall it to view its output to diagnose a bug.  However, the cin call never gets made here, any attempt(I have tried usleep, SDL_Delay, and cin) seems to get over written, and the function just keeps making the next calls.  What is going on here?  https://bpa.st/5NVQ
[00:19:44] *** Joins: ori (~atdt@user/ori)
[00:20:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:20:16] <senoraraton> The function gets called, I get my debug output, so its calling the function recursively and doing what its "supposed" to be doing.
[00:20:27] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Quit: Leaving)
[00:21:16] <TinoDidriksen> #sdl may know how to pause an SDL app.
[00:21:27] <TinoDidriksen> GUI apps may not have an stdin to read from.
[00:21:45] <senoraraton> Then you would think the builtin SDL_Delay() would work.
[00:21:52] <TinoDidriksen> But if you're trying to debug it, just set a breakpoint.
[00:22:11] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:23:19] <senoraraton> Time to figure out how to do that...
[00:23:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:24:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:26:57] *** Quits: Moosadee (~Moosadee@198.248.96.42) (Ping timeout: 240 seconds)
[00:26:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:27:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:28:06] *** Joins: proller (~p@2a02:6b8:b081:10::1:1b)
[00:31:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:34:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:36:03] *** Quits: bobb_ (~bobb_@dslb-092-075-158-175.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[00:38:14] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[00:38:20] *** Quits: foul_owl (~kerry@94.140.8.51) (Read error: Connection reset by peer)
[00:41:47] *** Joins: Moosadee (~Moosadee@198.248.96.43)
[00:53:12] *** Joins: rtrs (~arturs@m77-219-5-227.cust.tele2.lv)
[00:53:21] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:53:57] *** Joins: foul_owl (~kerry@23.82.194.73)
[00:55:19] *** Quits: Guest46 (~Guest46@92-100-252-58.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[00:55:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:56:56] *** Quits: nelubit (~nelubit@user/nelubit) (Read error: Connection reset by peer)
[00:59:37] *** Joins: highrate (~presonic@user/highrate)
[01:02:08] *** Joins: Guest46 (~Guest46@92-100-252-58.dynamic.avangarddsl.ru)
[01:04:25] *** Quits: magla (~gelignite@d5367123.access.ecotel.net) (Quit: Stay safe!)
[01:04:37] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Ping timeout: 256 seconds)
[01:12:11] *** Quits: rtrs (~arturs@m77-219-5-227.cust.tele2.lv) (Read error: Connection reset by peer)
[01:16:25] <cbreak> senoraraton: you're not using a debugger?
[01:17:17] *** Quits: jsbach (~jsbach@2a01:c23:6414:9300:13bf:8b00:4a82:98ca) (Ping timeout: 250 seconds)
[01:20:10] *** Joins: hiroshi_ (~freedom@151.47.239.181)
[01:22:29] *** Joins: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022)
[01:25:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:28:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:29:58] *** Joins: jsbach (~jsbach@2a01:c22:a526:3500:801e:4047:2c44:71c4)
[01:30:11] *** Quits: Guest46 (~Guest46@92-100-252-58.dynamic.avangarddsl.ru) (Quit: Client closed)
[01:30:25] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:30:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:31:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:33:07] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:34:42] *** Quits: sbrothy (~sbrothy@192038128044.mbb.telenor.dk) (Read error: No route to host)
[01:34:53] *** Joins: hiroshi__ (~freedom@151.37.113.75)
[01:35:12] *** Quits: hiroshi_ (~freedom@151.47.239.181) (Read error: Connection reset by peer)
[01:36:17] *** Joins: abf (~abf@user/abf)
[01:39:21] *** Quits: hiroshi__ (~freedom@151.37.113.75) (Client Quit)
[01:40:15] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:40:21] *** Joins: BurumaSerafuku (~sjw@69.206.49.150)
[01:42:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:20] *** ChanServ sets mode: +v npaperbot
[01:44:18] *** Joins: rgrinberg (~textual@187.223.115.137)
[01:44:31] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[01:46:50] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[01:48:01] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[01:48:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:49:47] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:51:45] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:53:38] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 260 seconds)
[01:53:41] *** Quits: Moosadee (~Moosadee@198.248.96.43) (Ping timeout: 256 seconds)
[01:55:03] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:55:08] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:55:12] *** Joins: badone (~badone@209.132.189.152)
[01:56:11] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:56:31] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[01:57:01] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[01:57:01] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:57:46] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:58:29] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:58:56] *** Joins: Rynn (~rynn@216.30.158.198)
[02:02:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:02:45] *** Quits: Guest9534 (~Guest@181.91.159.32) (Remote host closed the connection)
[02:02:55] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:06:50] *** Joins: moose (~moose@user/moose)
[02:06:51] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[02:12:52] <senoraraton> I sometimes use GDB, but I don't really know how to. I'm configuring a debugger, well I was, and then I got distracted and am 4 levels deep into my system configs now
[02:14:19] *** Quits: foul_owl (~kerry@23.82.194.73) (Ping timeout: 256 seconds)
[02:16:33] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[02:18:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:19:21] <anyone> well stop configuring everythin
[02:19:55] <senoraraton> Eh, I split my time 50/50 from coding, and configuring my system.  Well organized tools make coding so much easier.
[02:21:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:28:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:29:37] *** Quits: proller (~p@2a02:6b8:b081:10::1:1b) (Ping timeout: 240 seconds)
[02:30:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[02:30:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:30:58] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:32:35] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[02:32:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:32:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7863:b6d6:f0d1:5a66) (Ping timeout: 250 seconds)
[02:33:20] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:52] *** Joins: pizdets_ (~pizdets@183.182.110.14)
[02:34:25] *** Quits: pizdets (~pizdets@183.182.114.157) (Ping timeout: 250 seconds)
[02:34:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c103:4132:3411:10c1)
[02:34:52] *** Joins: foul_owl (~kerry@23.82.194.73)
[02:35:32] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:35:45] <Oxyd> So far it's taken you over two hours to set a single breakpoint, a task which normally takes less than a second.
[02:36:28] <zen_coder> how can I print all environment variables that a program is starting with?
[02:36:38] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:36:47] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:48] <BtbN> iterate over the envp and print them one by one
[02:39:05] <BurumaSerafuku> Oxyd: I've had coworkers way slower than that ;)
[02:39:58] <zen_coder> how do I loop correctly over envp, when I do not have the size?
[02:40:11] <zen_coder> `char *envp[]`
[02:42:39] <gjvc> increment the pointer and stop when it's null
[02:44:06] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Ping timeout: 245 seconds)
[02:48:10] <cbreak> zen_coder: std::vector<std::string> arguments(argv, argv + argc);
[02:48:16] <cbreak> after that it's much easier
[02:48:39] <zen_coder> while(*envp) printf("%s\n",*envp++);
[02:48:39] *** Joins: Cyp_ (~cyp@213.237.87.142)
[02:48:46] <zen_coder> like this?
[02:48:58] <zen_coder> cbreak: I am using envp, there is not size argument
[02:49:03] <cbreak> hmm :(
[02:49:11] <cbreak> shitty API...
[02:50:10] <anyone> if the original envp is sufficient (i.e. before any modifications have been made with setenv(3)), then
[02:50:22] <anyone> perl -lpe 's{\x00}{\n}gs' /proc/N/environ   on a certain OS is possible
[02:51:22] <cbreak> zen_coder: for (auto e = envp; *e != nullptr; ++e) use(*e);
[02:51:29] *** Quits: Cyp (~cyp@213.237.88.120) (Ping timeout: 256 seconds)
[02:51:51] *** Joins: constxd (~brad@142.134.79.191)
[02:52:04] <cbreak> that avoids the problem of messing up envp itself, and is much less cryptic to read than your printf example due to not conflagrating increment and dereferencing
[02:53:22] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[02:54:26] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[03:00:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:00:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:04:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:05:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:06:11] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:07:39] *** Joins: hashfuncd0d (~user@162.254.115.155)
[03:08:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:08:53] *** Quits: hashfuncd0d (~user@162.254.115.155) (Client Quit)
[03:09:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:10:04] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80) (Remote host closed the connection)
[03:11:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:11:17] *** Joins: hashfuncd0d (~user@162.254.115.155)
[03:11:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:11:30] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 250 seconds)
[03:12:02] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[03:14:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:15:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:15:25] <ville> wouldn't that be e != nullptr rather than *e != nullptr?
[03:15:51] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:16:07] <Shell> nope.
[03:16:47] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Client Quit)
[03:17:13] *** Quits: foul_owl (~kerry@23.82.194.73) (Ping timeout: 256 seconds)
[03:19:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:19:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:20:50] <ville> ...if you're given an "empty" envp, it contains 1 element which is a nullptr, you can't deref that and compate the dereffed value to nullptr
[03:21:00] <ville> err compare
[03:22:56] <ville> https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html "The argument envp is an array of character pointers to null-terminated strings. These strings shall constitute the environment for the new process image. The envp array is terminated by a null pointer"
[03:23:20] <ville> "The envp array is terminated by a null pointer"
[03:25:29] *** Joins: Moosadee (~Moosadee@198.248.96.43)
[03:25:44] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Quit: ERR_NOWITTYQUITMESSAGE)
[03:28:12] <ville> don't confuse the sentinel nullptr of th envp array to the sentinel '\0' values which terminates the strings
[03:29:13] <anyone> sentinels everywhere
[03:29:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:31:07] *** Joins: foul_owl (~kerry@217.114.38.61)
[03:32:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:32:50] <Shell> ville: https://wandbox.org/permlink/SqVseKmcOQpU03qn ???
[03:36:15] *** Joins: els12 (~els12@130.76.24.11)
[03:38:59] <Hello71> ville: you're thinking of **e
[03:39:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[03:39:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:43:03] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:44:08] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[03:47:50] <ville> Hello71: nop
[03:50:14] <ville> Shell: yes you're right
[03:52:30] *** Parts: jplejacq (~jplejacq@68.71.169.160) (Leaving.)
[03:56:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:56:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:58:32] *** Quits: f0xb4t (~mac@jebsie.pl) (Quit: leaving)
[03:58:58] *** Joins: Guest46 (~Guest46@92-100-252-58.dynamic.avangarddsl.ru)
[03:59:07] *** Quits: Guest46 (~Guest46@92-100-252-58.dynamic.avangarddsl.ru) (Client Quit)
[04:00:00] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:00:17] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 240 seconds)
[04:04:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:04:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:05:19] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[04:05:40] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:06:01] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[04:06:19] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:08:45] *** Joins: Cyp (~cyp@213.237.87.142)
[04:08:47] *** Quits: Cyp_ (~cyp@213.237.87.142) (Ping timeout: 256 seconds)
[04:10:56] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[04:12:37] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:14:46] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[04:19:33] *** Quits: hashfuncd0d (~user@162.254.115.155) (Ping timeout: 256 seconds)
[04:24:25] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:28:30] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:29:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:31:13] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[04:31:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[04:33:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:36:36] *** Joins: ferdna (~ferdna@user/ferdna)
[04:44:03] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:44:35] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5)
[04:53:02] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:53:23] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[04:53:41] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:55:43] *** Parts: ori (~atdt@user/ori) (WeeChat 3.4)
[04:56:23] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[05:00:46] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:1975:85fc:6d44:5df5) (Ping timeout: 260 seconds)
[05:02:38] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[05:03:18] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:04:39] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[05:05:57] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 240 seconds)
[05:07:06] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[05:08:55] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:10:10] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[05:12:00] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:13:16] *** Quits: Moosadee (~Moosadee@198.248.96.43) (Quit: Leaving)
[05:17:55] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[05:26:14] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Remote host closed the connection)
[05:26:45] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:29:30] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[05:30:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:30:37] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:30:37] *** Quits: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022) (Remote host closed the connection)
[05:31:04] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[05:31:08] *** Joins: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022)
[05:31:25] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[05:31:26] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[05:31:57] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Client Quit)
[05:32:07] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:34:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:34:14] *** Joins: frost (~frost@user/frost)
[05:35:35] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 268 seconds)
[05:37:29] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[05:40:58] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[05:42:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:22] *** ChanServ sets mode: +v npaperbot
[05:51:59] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:01:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c103:4132:3411:10c1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:03:09] *** anyone is now known as zz
[06:04:27] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: reboot)
[06:09:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:09:27] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[06:13:26] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[06:13:33] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[06:14:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:20:18] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:26:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:29:25] *** Joins: grafikrobot (~grafikrob@208.59.79.14)
[06:30:42] *** Joins: Rynn (~rynn@216.30.158.198)
[06:30:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:31:14] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[06:31:30] *** Joins: teepee (~teepee@openscad/teepee)
[06:33:40] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[06:34:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:35:42] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:39:47] *** Joins: katsuragi (katsuragi@tilde.institute)
[06:46:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[06:55:08] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:57:07] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[07:00:25] *** Joins: hashfuncd0d (~user@162.254.115.155)
[07:05:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:05:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[07:07:06] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:18] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:07:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:08:36] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[07:10:27] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:15:45] *** Quits: igater (~root@h178-129-134-39.dyn.bashtel.ru) (Quit: Leaving)
[07:15:58] *** Joins: igater (~root@h178-129-134-39.dyn.bashtel.ru)
[07:19:29] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[07:28:38] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:31:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:31:33] *** Quits: froggy_ (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[07:33:38] *** Joins: froggyc (~froggy@2.235.241.212)
[07:35:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:35:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[07:39:21] *** Quits: AmR (~AmREiSa@156.199.10.76) (Quit: Konversation terminated!)
[07:39:40] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:40:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:42:46] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[07:44:09] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[07:48:34] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[07:52:10] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:7847:a737:7738:3a49)
[07:54:50] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:55:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:56:27] *** Parts: cmburn (~Charlie_B@2601:441:4c00:67d:7847:a737:7738:3a49) ()
[07:56:32] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[07:56:33] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:7d22:da7e:d4e8:23b6)
[07:58:23] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:d183:e62d:4a26:8624)
[07:58:27] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[08:00:58] *** Quits: jsbach (~jsbach@2a01:c22:a526:3500:801e:4047:2c44:71c4) (Ping timeout: 250 seconds)
[08:03:43] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[08:10:55] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[08:11:26] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:12:51] *** Quits: N4buc0- (~N4buc0@177.16.170.138) (Ping timeout: 250 seconds)
[08:14:27] *** Joins: jsbach (~jsbach@2a01:c22:34a5:b300:e53a:917a:f160:58dc)
[08:15:07] *** Parts: cmburn (~Charlie_B@2601:441:4c00:67d:d183:e62d:4a26:8624) ()
[08:18:49] *** Joins: ironman (~ironman@49.36.55.235)
[08:27:31] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[08:31:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:32:03] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:34:02] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[08:35:06] *** Joins: the_lanetly_052_ (~the_lanet@185.30.91.158)
[08:35:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[08:39:48] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[08:43:12] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:53:31] *** Joins: savolla (~quassel@84.44.28.28)
[09:07:10] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[09:11:14] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[09:21:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:21:34] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[09:22:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:28:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[09:29:52] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:30:02] <lru> is there a github or something where future experimental library code is kept?
[09:30:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:32:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:35:10] *** Parts: hashfuncd0d (~user@162.254.115.155) (ERC (IRC client for Emacs 25.2.2))
[09:36:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:36:59] *** Joins: emerent_ (~quassel@p200300cd570443fbba27ebfffed28a59.dip0.t-ipconnect.de)
[09:36:59] *** Quits: emerent (~quassel@p200300cd570443a1ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (mercury.libera.chat (Nickname regained by services)))
[09:36:59] *** emerent_ is now known as emerent
[09:42:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:21] *** ChanServ sets mode: +v npaperbot
[09:42:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:44:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:46:01] *** Joins: frost (~frost@user/frost)
[09:46:24] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:03:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c24:b4c4:1785:5632)
[10:07:39] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[10:08:19] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:08:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c24:b4c4:1785:5632) (Ping timeout: 250 seconds)
[10:09:53] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[10:09:57] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:11:02] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[10:11:40] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[10:11:57] *** Joins: spithash (~spithash@user/spithash)
[10:12:23] *** Joins: letto (~letto@86.120.81.105)
[10:14:00] *** Quits: igater (~root@h178-129-134-39.dyn.bashtel.ru) (Ping timeout: 250 seconds)
[10:16:36] *** Quits: nshire_ (~nshire@47.146.41.156) (Quit: Leaving)
[10:16:55] *** Joins: nshire (~nshire@user/nshire)
[10:17:30] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:18:22] *** Joins: callq (~callq@2409:4062:2d8d:345f:4836:a5d4:7aa7:5f2b)
[10:18:35] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 256 seconds)
[10:18:56] *** Joins: savolla (~quassel@84.44.28.28)
[10:20:36] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:21:24] <AliceMeows> How could I check with concepts if there is a specialization provided?
[10:22:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:23:30] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:24:14] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:25:49] *** gentooclimax is now known as climax
[10:26:24] <kalven> but why
[10:26:46] <AliceMeows> I'm trying to implement 'traits'
[10:29:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[10:29:14] *** Quits: savolla (~quassel@84.44.28.28) (Quit: No Ping reply in 180 seconds.)
[10:30:36] *** Joins: savolla (~quassel@84.44.28.28)
[10:32:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:33:11] *** climax is now known as gentooclimax
[10:35:01] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[10:35:35] *** Joins: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net)
[10:36:43] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:37:09] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:46:52] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:46:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[10:51:08] *** Quits: rahl (~rahl@otaku.sdf.org) (Ping timeout: 256 seconds)
[10:51:16] *** Quits: phoenix (phoenix@user/phoenix) (Ping timeout: 250 seconds)
[10:51:27] *** Quits: traxex (traxex@user/traxex) (Ping timeout: 256 seconds)
[10:51:32] <AliceMeows> https://godbolt.org/z/e67P6szs9 there has to be a better way to do it
[10:51:58] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:52:18] *** gentooclimax is now known as climax
[10:52:59] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[10:53:24] *** climax is now known as gentooclimax
[10:53:49] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:56:42] *** Joins: cosimone (~user@93-34-133-254.ip49.fastwebnet.it)
[10:58:19] *** Joins: jinsl (~jinsl@180.88.96.9)
[10:59:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:01:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:02:41] <AliceMeows> https://godbolt.org/z/nd8KxvvMs is this even legal?
[11:02:58] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:03:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:116f:8251:b1b1:3325)
[11:03:29] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:07:16] *** Joins: oakyy (~oaky@2001:6b0:1:1041:d69e:4a0b:e453:f2e7)
[11:07:26] <AliceMeows> Seems like  msvc, gcc and clang accept it so I guess it is legal
[11:07:39] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[11:09:49] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:10:03] *** Joins: jinsl56 (~jinsl@180.88.96.9)
[11:11:51] *** Quits: jinsl (~jinsl@180.88.96.9) (Ping timeout: 256 seconds)
[11:12:34] *** Joins: pingpongball (~pingpongb@43.228.192.109)
[11:12:57] *** Quits: jinsl56 (~jinsl@180.88.96.9) (Client Quit)
[11:13:00] *** Joins: jinsl (~jinsl@180.88.96.9)
[11:14:28] <pingpongball> Except your love / affection to c++
[11:14:39] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:14:49] <pingpongball> why do you think of RUST (a new game in town)?
[11:14:58] <AliceMeows> I don't like rust
[11:15:07] <pingpongball> why
[11:15:19] <AliceMeows> Because its restricts your ability to do things in a sane way
[11:16:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-035.client.tudelft.eduvpn.nl)
[11:17:08] <pingpongball> i'm falling into programming langauges hell
[11:18:17] <AliceMeows> And frankly its just tyrannical language so I prefer C++ over it
[11:19:42] <pingpongball> when going go, oh learn go than c,
[11:19:42] <pingpongball>  when in rust, oh its better than c++, you can do same thing in rust, with same performance ,except you are not throwing axe into your legs
[11:19:43] <pingpongball> when in c++, oh Because its restricts your ability to do things in a sane way
[11:19:44] <pingpongball> when in lisp, oh learn lisp, lisp langauges/ dialects are far far far far more better, you have 2x time more productivity than you learn c , c++ or python
[11:19:50] <pingpongball> so someone tell, oh man "do try it yourself , check it yourself, to fit your needs" :|
[11:20:03] <pingpongball> :)
[11:20:21] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:20:34] <pingpongball> oh this should be in #programming
[11:21:26] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[11:21:39] *** Quits: oakyy (~oaky@2001:6b0:1:1041:d69e:4a0b:e453:f2e7) (Remote host closed the connection)
[11:21:52] *** Joins: oakyy (~oaky@2001:6b0:1:1041:41ce:9ec:5058:1266)
[11:23:38] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:25:11] <pingpongball> tyrannical: "exercising power in a cruel or arbitrary way." :/
[11:25:46] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:27:17] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[11:28:02] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:28:39] <AliceMeows> https://godbolt.org/z/8EdG3aqPE these are the two possible ways I could come up with and I don't like the way has_trait2 works
[11:29:00] <ville> pingpongball: wrong channel
[11:29:07] *** Joins: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de)
[11:29:56] <pingpongball> yes it is wrong chanell, but i felt that right one
[11:30:18] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:30:47] <AliceMeows> I'm open for suggestions on how to improve this with perhaps less dirty solutions
[11:31:19] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[11:31:30] *** Joins: msk (~Thunderbi@89.205.124.19)
[11:33:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:34:31] <ville> AliceMeows: by dropping this direction of writing c++ code
[11:36:29] <AliceMeows> I simply need a way to force specialization so there wont be any nasty surprises during runtime
[11:36:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[11:38:32] *** Quits: jaakkos (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[11:39:07] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 250 seconds)
[11:40:08] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:41:24] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:41:45] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:42:15] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:42:49] *** Quits: pingpongball (~pingpongb@43.228.192.109) (Quit: pingpongball)
[11:43:53] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:44:11] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:44:39] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:45:40] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:46:03] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[11:49:04] *** Quits: jsbach (~jsbach@2a01:c22:34a5:b300:e53a:917a:f160:58dc) (Remote host closed the connection)
[11:49:15] *** Joins: limubs (~limubs@cgn-89-0-5-65.nc.de)
[11:52:17] *** Joins: jsbach (~jsbach@2a01:c22:34a5:b300:4809:4522:8fe1:70b0)
[11:52:29] *** Joins: andreasbuhr (~quassel@p549dbbae.dip0.t-ipconnect.de)
[11:53:05] <AliceMeows> https://godbolt.org/z/qbY4TT5r5 why doesn't line 11 fail?
[11:53:20] *** gentooclimax is now known as climax
[11:54:29] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[11:55:03] *** climax is now known as gentooclimax
[11:57:44] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:57:48] *** Joins: rahl (rahl@otaku.sdf.org)
[12:03:25] *** Quits: foul_owl (~kerry@217.114.38.61) (Ping timeout: 256 seconds)
[12:03:55] *** Joins: phoenix (phoenix@user/phoenix)
[12:05:39] *** Joins: rendar (~rendar@user/rendar)
[12:09:16] *** Joins: traxex (traxex@sdf.org)
[12:09:42] *** Quits: traxex (traxex@sdf.org) (Changing host)
[12:09:42] *** Joins: traxex (traxex@user/traxex)
[12:15:26] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:15:42] *** Quits: jinsl (~jinsl@180.88.96.9) (Quit: Client closed)
[12:16:20] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:18:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[12:19:07] *** Joins: ivii (~ivan@user/ivii)
[12:19:29] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:23:29] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:24:03] *** Quits: ironman (~ironman@49.36.55.235) (Ping timeout: 256 seconds)
[12:24:37] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 250 seconds)
[12:28:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:31:41] *** Joins: dtminus (~dtminus@ip5f5acaf0.dynamic.kabel-deutschland.de)
[12:33:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:36:03] *** Joins: clime (~clime@37-48-57-231.nat.epc.tmcz.cz)
[12:36:34] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:37:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:37:42] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:fd90:3f9a:65c3:e850)
[12:39:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[12:42:21] *** Joins: teepee (~teepee@openscad/teepee)
[12:43:46] *** Quits: dtminus (~dtminus@ip5f5acaf0.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.4)
[12:43:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:49:02] *** Quits: CalamityToo (~CalamityB@2603-8000-d907-cec8-4040-1a78-e1d5-b3df.res6.spectrum.com) (Read error: Connection reset by peer)
[12:51:19] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[12:52:57] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[12:55:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:2df2:1ec5:8dd3:29f0)
[12:58:57] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Ping timeout: 256 seconds)
[13:00:33] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:7d22:da7e:d4e8:23b6) (Quit: Leaving)
[13:03:27] *** Joins: neure (~tksuoran@dzpy2f9tyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[13:07:26] *** Quits: manx (xuew@p200300e18f0e0800022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[13:09:29] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Restarting for Windows updates.)
[13:09:51] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:11:04] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[13:11:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:12:30] <AliceMeows> https://godbolt.org/z/1h66M3ErG is that a bug in libstdc++?
[13:13:30] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[13:14:04] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[13:16:58] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:20:44] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:21:12] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:21:37] *** Joins: manx (xuew@p200300e18f1c3400022215fffe03cf97.dip0.t-ipconnect.de)
[13:22:04] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:23:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Max SendQ exceeded)
[13:23:28] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:23:54] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[13:28:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[13:31:07] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:34:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:36:50] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[13:37:43] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:38:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:40:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:41:24] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[13:41:59] *** Quits: mgaunard (~mgaunard@host-92-7-151-63.as13285.net) (Ping timeout: 250 seconds)
[13:42:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:22] *** ChanServ sets mode: +v npaperbot
[13:45:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:46:53] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:47:42] *** Joins: mgaunard (~mgaunard@80-42-109-100.dynamic.dsl.as9105.com)
[13:48:15] *** Quits: els12 (~els12@130.76.24.11) (Ping timeout: 256 seconds)
[13:49:04] *** Joins: bindu (~bindu@user/bindu)
[13:52:24] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[13:55:44] <smallville7123> in https://gist.github.com/mgood7123/cdc84358bcac6560fe2fab6b10a37573 how do we know if we are still expanding, and when the expansion should be stopped?
[13:58:54] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[13:59:02] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:59:37] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[13:59:52] *** Joins: seninha (~seninha@user/seninha)
[14:03:16] *** Quits: pizdets_ (~pizdets@183.182.110.14) (Ping timeout: 250 seconds)
[14:03:19] *** Joins: pizdets (~pizdets@183.182.114.142)
[14:05:23] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:7d22:da7e:d4e8:23b6)
[14:05:28] *** Joins: Markow (~Markow@176.122.215.103)
[14:06:05] *** Joins: xkuru (~xkuru@user/xkuru)
[14:07:20] *** Joins: ko (~i.am@user/marlboro)
[14:17:25] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:19:43] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc2-git-9f7fb8d-Pogorze-Karpackie-CUSTOM-KERNEL)
[14:19:59] <pa> so i have a struct null_value {}, that somehow got part of a variant type. I want to make it hashable so that i can use that variant in an unordered_map. would it make sense to make the hash function return 0 ?
[14:20:31] <AliceMeows> Sound like you're asking for trouble
[14:20:43] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:fd90:3f9a:65c3:e850) (Remote host closed the connection)
[14:21:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[14:23:36] <pa> AliceMeows: what trouble would i face if i had a hash function returning always 0?
[14:23:44] <pa> (for such a null type)
[14:24:10] <TinoDidriksen> I would have it return the max, or 1.
[14:24:21] *** Joins: sigma_ (~sigma@164.215.217.26)
[14:25:10] <smallville7123> pa: why do you need it to return 0
[14:25:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[14:26:01] <smallville7123> are values used for hashing as well?
[14:26:20] <smallville7123> eg does it hasv both the key and the value, or only the key
[14:26:24] <smallville7123> hash*
[14:27:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:27:37] *** Quits: callq (~callq@2409:4062:2d8d:345f:4836:a5d4:7aa7:5f2b) (Ping timeout: 240 seconds)
[14:30:45] *** Joins: stefanos82 (~stefanos8@128-228-117.netrun.cytanet.com.cy)
[14:31:33] <barometz> in a hashmap? No, hashing is used to organize keys for fast lookup, the values are not involved there
[14:31:35] <pa> ah 1 could also work
[14:33:12] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:7800:f54c:e520:dd6f)
[14:33:35] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[14:33:42] <smallville7123> then why does the null_value need to return 0 or 1 for its hash?
[14:33:49] *** Joins: walterwhip (~www@user/walterwhip)
[14:34:00] <hans> how do i add destructors to class{public: int i;} foo;  ?
[14:34:10] <AliceMeows> It already has one
[14:34:15] <hans> i want to do something when foo goes out of scope
[14:34:24] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[14:34:25] <AliceMeows> Eh
[14:34:48] <AliceMeows> class foo { public: int i; ~foo() { /*do something here*/ } };
[14:34:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:34:58] <smallville7123> also the entire point of a hash is to attempt to make the key unique, if two keys have the same hash then a hash collision occurs and the two keys are ambiguous
[14:35:04] <smallville7123> pa:
[14:35:46] <hans> AliceMeows: no i mean an anonymous class/instance
[14:35:58] <pa> smallville7123: yes, that's correct, indeed
[14:36:09] <smallville7123> eg what if someone also make such a variable that returns 1 for its hash, they CANNOT use with with your variable as both return the same hash and both collide with eachother when hashed
[14:36:15] <pa> maybe max is then better than 1
[14:36:20] <hans> like in PHP you'd do $o = new class{function __destruct(){echo "o is going out of scope!";}};
[14:36:21] <AliceMeows> hans: I'm not sure if that could actually be done
[14:36:42] <pa> smallville7123: they ofc can, but the collision will pessimize performance a bit
[14:37:00] <smallville7123> pa: yes but they key lookup will become ambiguous
[14:37:20] <pa> yes but there's no guarantee hashes cannot collide in the general case anyway
[14:37:34] <smallville7123> eg if a user wants their key whats to stop the map from returning YOUR key instead of THEIRS
[14:37:47] <smallville7123> pa: yes but it is very unlikely that such will happen
[14:37:48] <leduyquang753> If two keys have the same hash it downgrades to a linear search with normal comparison.
[14:38:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:38:23] <smallville7123> intentionally ruining the hash is just bad
[14:38:37] <pa> the other question is if there's a way to make the hash a member function of the class
[14:38:41] <smallville7123> also defeates the purpose of hashing it
[14:39:00] <leduyquang753> So say 15 and 3780535 have the same hash, a map implementation will put both into the bucket and when say 15 is requested it iterates through the bucket and compares 15 to each element.
[14:39:32] <smallville7123> if ALL keys return the EXACT SAME HASH then you mays as well just not hash anything and compare normally at that point
[14:39:35] <leduyquang753> That's why the worst case of an `std::unordered_map` is O(n).
[14:40:17] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[14:40:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:41:27] <smallville7123> in which case the hash map simply becomes either a set, or a map, or a vector of pairs
[14:42:07] <PlasmaHH> set/map are trees
[14:42:10] <smallville7123> assuming std::map does not hash anything
[14:42:18] <smallville7123> assuming std::map and std::set does not hash anything *
[14:45:07] <PlasmaHH> hard to do when you only have an ordering compare
[14:45:23] *** Joins: bindu (~bindu@user/bindu)
[14:45:56] <leduyquang753> Not hard at all: if A does not come before B and B does not come before A then A and B are equal.
[14:49:05] <smallville7123> rip no one knows
[14:49:41] <smallville7123> about macro preprocessing
[14:50:03] <PlasmaHH> leduyquang753: thats not hashing though
[14:51:05] *** Joins: foul_owl (~kerry@23.82.193.78)
[14:51:06] *** Quits: oakyy (~oaky@2001:6b0:1:1041:41ce:9ec:5058:1266) (Ping timeout: 260 seconds)
[14:53:11] *** Joins: Dave_R_ (~Dave_R@home.amunra.co.uk)
[14:54:13] *** Quits: Guest8100 (~tinloaf@virt-no01.mrvm.net) (Ping timeout: 240 seconds)
[14:54:53] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:7800:f54c:e520:dd6f) ()
[14:56:11] *** Quits: stefanos82 (~stefanos8@128-228-117.netrun.cytanet.com.cy) (Quit: Leaving)
[14:56:51] *** Quits: walterwhip (~www@user/walterwhip) (Read error: Connection reset by peer)
[14:57:15] *** Joins: proller (~p@2a02:6b8:0:40c:e854:6579:4f06:5db0)
[14:57:41] <ville> hans: you can't define destructor for such thing. simplest is to just name it something at least
[14:58:27] <ville> hans: if for some reason that is not possible, then whatever the scope of that object is you should add a defer/scope guard there
[14:58:31] *** Quits: the_lanetly_052_ (~the_lanet@185.30.91.158) (Ping timeout: 256 seconds)
[14:59:00] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:01:57] <ville> hans: a defer/scope guard is often implemened as a macro which creates a "hidden" object some "hidden" type constructed from a lambda. that object runs the lambda in its destructor
[15:03:21] <ville> hans: so you end up with something like: struct {} x; DEFER { f(x); }; or so looking syntax
[15:03:27] <hans> hmm ok, thanks. close enough was class Foo{public: ~Foo(){std::cout << "Foo is going out of scope" << std::endl;};} foo;
[15:04:38] <leduyquang753> PlasmaHH I don't see what you are talking about then.
[15:04:45] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Ping timeout: 256 seconds)
[15:05:00] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:05:12] <PlasmaHH> leduyquang753: the assumption that std::map/set does not hash. its hard for them to do hashing with just an ordering comparison
[15:06:27] *** Quits: foul_owl (~kerry@23.82.193.78) (Ping timeout: 256 seconds)
[15:06:27] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[15:07:38] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:16:29] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[15:16:49] *** Joins: kevr (~kevr@user/kevr)
[15:23:44] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:26:37] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[15:26:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:28:24] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[15:29:36] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:32:12] <AliceMeows> Do concepts short-circuit in the body?
[15:35:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:36:23] *** ko is now known as \o\
[15:37:27] *** Joins: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[15:39:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:44:11] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:51:44] *** Joins: oakyy (~oaky@2001:6b0:1:1041:e701:161f:cbb9:691f)
[15:59:18] *** Joins: Leone (~Leo@108.175.224.215)
[16:02:01] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b004:f50:2de1:c5af)
[16:02:01] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b004:f50:2de1:c5af) (Changing host)
[16:02:01] *** Joins: skapata (~Skapata@user/skapata)
[16:05:18] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:07:00] *** Joins: pulse (~pulse@user/pulse)
[16:12:03] *** Quits: Linux77 (~LinuMage@186.233.179.225) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[16:12:55] *** Joins: bindu (~bindu@user/bindu)
[16:19:55] *** Quits: limubs (~limubs@cgn-89-0-5-65.nc.de) (Ping timeout: 250 seconds)
[16:23:58] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:27:49] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:32:10] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:32:51] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:34:30] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:35:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:36:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:36:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:39:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:41:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:45:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:45:39] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[16:49:26] <marshmallow> I'm not sure, what exactly does this code? https://the.al/share/_/pE59W9IBgs93v.txt
[16:49:53] <marshmallow> one thread sleeps for 1 second, the other one simply waits?
[16:49:58] <AliceMeows> It creates 2 threads and waits for them to finish
[16:50:22] <AliceMeows> The 2nd thread is waiting on the first thread to finish
[16:51:26] <marshmallow> isn't there any UB in the code?
[16:51:43] *** Quits: NovaXrine (~NovaXrine@void.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[16:51:45] <AliceMeows> Apparently there is
[16:52:03] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[16:52:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[16:52:19] <AliceMeows> If t2.join() was executed before t1.join() then there would be no ub
[16:53:08] <AliceMeows> mashmallow: https://en.cppreference.com/w/cpp/thread/thread/join
[16:53:11] <fluter> hi, is std::variant only for fundamental and pod types?
[16:53:38] <fluter> can i use std::variant of containers?> like std::varaint<std::vector<std::string>, int, double> ? is this ok?
[16:53:57] <marshmallow> AliceMeows: why if t2.join() was executed before t1.join() then no UB would occur?
[16:54:33] <AliceMeows> Because j1.join() wont have the chance to be called from a different thread
[16:55:00] <marshmallow> AliceMeows: i.e. t1.join() would be called only by the main thread?
[16:55:16] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Client Quit)
[16:56:45] <AliceMeows> Its called by both the main thread and t2's thread which is why waiting on t2 to return will eliminate the potential problem of t1.join() being called before t2's call to on j1.join() returns
[16:57:22] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[16:57:41] <AliceMeows> fluter: https://en.cppreference.com/w/cpp/utility/variant it states this ' All types must meet the Destructible requirements (in particular, array types and non-object types are not allowed)'
[16:58:33] <fluter> AliceMeows: it means containers are ok, containers are destructible right?
[16:59:00] <marshmallow> AliceMeows: but what is the UB here sorry?
[16:59:26] <AliceMeows> fluter: yes
[17:00:18] <AliceMeows> marshmallow: the reason its ub is stated here https://en.cppreference.com/w/cpp/thread/thread/join the join function does not synchronize so by calling join from multiple threads you're creating UB
[17:04:07] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Ping timeout: 250 seconds)
[17:04:55] <marshmallow> AliceMeows: thanks!
[17:06:04] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[17:07:21] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:11:22] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:12:05] *** Quits: martiert1work (~martiert@173.38.220.52) (Remote host closed the connection)
[17:14:47] <AliceMeows> np
[17:15:40] *** Joins: martiert_work (~martiert@173.38.220.52)
[17:16:17] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[17:17:03] *** Joins: Perry (~perry@coffee-break.at)
[17:18:06] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:19:32] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:21:36] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[17:22:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:23:11] *** Quits: oakyy (~oaky@2001:6b0:1:1041:e701:161f:cbb9:691f) (Ping timeout: 250 seconds)
[17:24:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:24:22] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:26:48] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:27:05] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:28:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:30:08] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:7d22:da7e:d4e8:23b6) (Quit: Leaving)
[17:30:22] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:30:34] *** Quits: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de) (Quit: Client closed)
[17:31:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:31:44] *** Joins: A963-Guest (~A963-Gues@cpe-24-211-225-57.nc.res.rr.com)
[17:31:49] <A963-Guest> I found this North Carolina Supreme Court oral argument. A prosecutor appears to be taking cases off the calendar until a defendant pleads guilty, forcing a guilty plea cause the defendant cant get drivers license until he pleads guilty. https://www.youtube.com/watch?v=4TQOltG7zJc
[17:32:31] <AliceMeows> A963-Guest: Wrong channel
[17:32:50] <A963-Guest> wats right channel then
[17:33:04] <AliceMeows> !topic
[17:33:05] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[17:33:10] *** Quits: neure (~tksuoran@dzpy2f9tyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[17:33:11] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:33:12] <A963-Guest> ill leave
[17:33:13] <A963-Guest> sorry
[17:33:30] *** Quits: A963-Guest (~A963-Gues@cpe-24-211-225-57.nc.res.rr.com) (Quit: Connection closed)
[17:36:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:37:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:39:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:40:54] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:42:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:42:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:22] *** ChanServ sets mode: +v npaperbot
[17:42:33] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:47:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:14] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:49:05] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:49:49] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[17:51:14] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:2df2:1ec5:8dd3:29f0) (Ping timeout: 260 seconds)
[17:59:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:04:00] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[18:06:45] *** Emet-Selch is now known as Azem
[18:06:45] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[18:07:51] *** Joins: quartz (~user_name@user/quartz)
[18:09:48] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:2121:9758:86ec:f96b:18af)
[18:11:13] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:2121:9758:86ec:f96b:18af) (Remote host closed the connection)
[18:11:32] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:2121:87f:618e:a3ba:535b)
[18:14:52] <Alipha> pa: use std::monostate instead of null_value. No reason to create a new type when std::monostate serves that purpose
[18:16:09] *** Joins: Linux77 (~LinuMage@186.233.179.225)
[18:20:32] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[18:23:35] *** Quits: savolla (~quassel@84.44.28.28) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:28] *** Quits: ville (~ville@user/ville) (Quit: systmed)
[18:24:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:26:29] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[18:31:59] <Alipha> fluter: you can put pretty much anything in a std::variant
[18:33:30] <fluter> Alipha: ok, i was asking because a vector will allocate memory, so wanna check if std::varaint requires self contained types
[18:34:30] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[18:34:50] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 252 seconds)
[18:35:05] <Alipha> fluter: std::variant will call the destructor of the contained object, so the std::vector's allocated memory will get cleaned up
[18:35:09] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[18:35:29] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[18:35:37] <fluter> Alipha: got it, thanks!
[18:35:48] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[18:36:59] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:37:43] *** Quits: \o\ (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:38:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[18:40:32] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-28af-d421-0a51-ca91.res6.spectrum.com)
[18:40:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[18:42:44] <AliceMeows> How can you check with a concept if a function accepts T by reference?
[18:43:55] <AliceMeows> lvalue reference*
[18:45:15] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[18:45:17] <Eelis> that's a misguided requirement. a sane requiremnt would be "the function must accept lvalue" or "the function must accept rvalues"
[18:45:43] <AliceMeows> I don't wish to limit it to lvalue reference but simple to allow it
[18:46:24] <Eelis> i don't know what "it" refers to in your sentence
[18:47:25] <AliceMeows> If I do something like { t.func(T{}); } and the function happen to be declared as void func(T&); the concept will not be fulfilled
[18:48:16] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:49:23] <Eelis> so instead of T{}, use a parameter
[18:49:24] <Eelis> << C<int>; template<typename T> concept C = requires(T x){ x.func(); };
[18:49:25] <geordi> false
[18:49:45] <Eelis> << C<int>; template<typename T> concept C = requires(T x){ x.func(x); };
[18:49:46] <geordi> false
[18:49:54] <AliceMeows> Yeah I just figured it moments ago, thanks anyway though :)
[18:50:43] <AliceMeows> The other option is reinterpret_cast from nullptr but its pretty terrible
[18:52:37] <Eelis> no, the other option is declval
[18:52:44] <Eelis> << C<int>; template<typename T> concept C = requires(T x){ x.func(declval<T&>()); };
[18:52:44] <geordi> false
[18:53:28] <AliceMeows> That's brilliant, I've attempted add_lvalue_reference_t<T> which obviously could not work T&{} is not legal
[18:55:27] <Alipha> But one of the benefits of concepts is that you don't have to do ugly std::declval
[18:55:43] <AliceMeows> Indeed
[18:59:41] *** Joins: ville (~ville@user/ville)
[19:02:39] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Quit: Leaving)
[19:04:22] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[19:05:18] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5)
[19:05:32] *** Joins: jokoon (~eio@2a01:e0a:542:e160:d0b4:19d2:35ef:8632)
[19:05:47] *** Joins: ferdna (~ferdna@user/ferdna)
[19:06:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[19:10:20] *** Joins: pingpongball (~pingpongb@43.228.192.100)
[19:11:49] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:15:15] *** Parts: pingpongball (~pingpongb@43.228.192.100) ()
[19:15:28] <quartz> If anyone here could go back in time in the 80's and assist in the design of C++, what would you say?
[19:16:35] <TinoDidriksen> I'd say stick to your guns wrt. "auto".
[19:16:57] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[19:18:30] <quartz> TinoDidriksen: What do you mean?
[19:18:56] <TinoDidriksen> Bjarne wanted to add "auto" as we now know it from the start, but people said it wasn't doable.
[19:19:34] <AliceMeows> reflection!
[19:20:38] <quartz> But what could he have done differently in the design of C++?
[19:20:45] *** Joins: DanteD (~DanteD@89-166-38-210.bb.dnainternet.fi)
[19:21:30] <quartz> Given the technical limitations of the 80's
[19:21:31] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:21:41] <quartz> Because I'm honestly not quite sure.
[19:21:50] <AliceMeows> Probably make sure it didn't have anything to do with C
[19:23:23] <quartz> lol
[19:23:49] <zz> If C++ had had less to do with C, it would have been another island language, like Java. Nobody needed that.
[19:25:24] *** Quits: DanteD (~DanteD@89-166-38-210.bb.dnainternet.fi) (Client Quit)
[19:25:26] <quartz> I'm talking stricting from a langauge design perspective.
[19:26:55] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:32:22] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[19:34:44] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[19:34:47] *** Joins: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de)
[19:36:48] *** Joins: lxsameer (lxsameer@user/lxsameer)
[19:37:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:38:46] <Eelis> quartz: i would give those 80s guy the latest WG21 mailing from 2022. that should keep them busy for a while
[19:38:50] <Eelis> *guys
[19:40:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:42:15] <quartz> Eelis: Hahaha
[19:43:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:44:05] <Eelis> more seriously, i would tell them about unicode, and i would tell them not to bother with "wide" chars/streams
[19:44:19] <Eelis> since that effort failed spectacularly
[19:46:04] *** Joins: crankslider (~slidercra@user/slidercrank)
[19:46:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:47:29] *** Quits: quartz (~user_name@user/quartz) (Ping timeout: 250 seconds)
[19:47:37] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:47:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[19:47:57] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 240 seconds)
[19:50:42] <evangeline> https://godbolt.org/z/je1Tr41hG : The ProcessData() is called by 2 threads and only 1 of them needs to do some initialization (whoever gets there first), the other needs to wait. How can I do this safely without doing the init twice ... I added the compare_exchange_strong in the comments, but that doesn't work, because one thread doesn't wait. Is it possible to solve it with lock-free programming?
[19:51:41] <AliceMeows> call_once?
[19:53:55] <evangeline> AliceMeows, I need SuperSlowGetData to be called only once yes
[19:54:03] *** Quits: reset (~reset@user/reset) (Quit: reset)
[19:54:30] <AliceMeows> evangeline: https://en.cppreference.com/w/cpp/thread/call_once
[19:56:14] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:56:47] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:57:02] <evangeline> AliceMeows, does it require the function to return void or can I return some struct?
[19:58:00] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Read error: Connection reset by peer)
[19:58:02] <AliceMeows> call_once wont return what your function returns
[19:58:17] <Eelis> evangeline: is this happening thousands of times per second? otherwise the "lock free" requirement makes no sense.
[19:58:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:59:09] <evangeline> This happens only once at the begining of loading a library, but sometimes there's 2 calls and I would like to prevent that ... it very rarely happens.
[19:59:20] <Eelis> then your requirements make no sense.
[19:59:29] <evangeline> Eelis, so you're saying that it's better to just use a mutex?
[19:59:45] <AliceMeows> Just initialize it outside those threads
[19:59:54] <Eelis> yes, any extra effort spent on lockless solutions are a waste of developer time if there is no performance imperative
[20:00:13] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:2121:87f:618e:a3ba:535b) (Remote host closed the connection)
[20:00:16] *** Joins: luizfrds (~Luiz@152.250.243.147)
[20:00:22] <evangeline> AliceMeows, I can't do that, one of those threads needs to initalize it
[20:00:31] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:2121:2e45:e323:fc31:aa4d)
[20:00:56] <evangeline> Eelis, okay I guess that's the solution. But just for learnign purposes, how would a lock-free solution look like?
[20:01:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[20:03:15] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[20:03:26] *** Joins: quartz (~user_name@user/quartz)
[20:03:46] <bobb_> evangeline do you know https://en.cppreference.com/w/cpp/atomic/atomic/is_lock_free ?
[20:03:52] <Eelis> evangeline: there is no efficient lock-free solution, because you said "the other needs to wait". waiting means waiting for something. that something might as well be the acquisition of a lock
[20:04:47] *** Joins: reset (~reset@user/reset)
[20:04:49] <evangeline> bobb_, I only know that it checks if a structure in memory is lock free: as proper alignment, is trivially copyable ...
[20:05:07] <evangeline> Eelis, makes sense
[20:05:24] <evangeline> I see that call_once is using a mutex
[20:06:07] <bobb_> https://en.cppreference.com/w/cpp/atomic/atomic_flag e.g. is guaranteed to be lock-free
[20:07:25] <Eelis> it's lock-free, but std::atomic_flag::wait is going to spend a ton of resources
[20:07:31] <Eelis> so i wouldn't call it efficient
[20:08:16] <Eelis> actually, does the spec even guarantee that std::atomic_flag::wait is lock-free?
[20:09:38] <evangeline> AliceMeows, https://godbolt.org/z/cf3h8joe1 this will work correctly right and uses a mutex under the hood?
[20:09:46] <Eelis> the spec says "Atomic waiting operations and atomic notifying operations provide a mechanism to wait for the value of an atomic object to change more efficiently than can be achieved with polling." but i don't know if that's actually true for real implementations
[20:10:04] <bobb_> okay interesting
[20:10:28] <bobb_> evangeline https://www.realworldtech.com/forum/?threadid=189711&curpostid=189723 is also a good read thats related to your topic
[20:11:31] <AliceMeows> evangeline: looks fine to me
[20:11:55] <quartz> What is the problem with the std::vector<bool> specialization?
[20:12:31] <Eelis> quartz: for all other vector<T> specializations, v[n] gives you a T&. that's not true for bool, and as a result, tons of code chokes on it
[20:12:33] <AliceMeows> Its a can of worms
[20:13:48] <Eelis> << TYPE(vector<bool>(3)[1])
[20:13:49] <geordi> prvalue _Bit_reference
[20:14:44] <Eelis> geordi, replace bool with int
[20:14:45] <geordi> lvalue int
[20:16:24] <quartz> Wow, it's still that way now? That's so weird.
[20:16:32] <Eelis> in fact, it's a property of /containers/ that you can get a T& where T is the element type. so vector<bool> is not even a /container/ (which is absurd)
[20:16:45] <quartz> I guess this is not news to someone who is experienced in C++
[20:16:53] <Eelis> correct
[20:17:02] <quartz> Why don't they fix it?
[20:17:26] <Eelis> because the current specification allows bit-optimizing things so that a vector<bool> of size 32 only occupies 1 machine-word.
[20:17:37] <Eelis> removing that optimization would break programs that depend on it.
[20:18:30] <Eelis> and the C++ committee is reluctant to break valid programs
[20:18:39] <AliceMeows> There could always be 'stl2' to fix stuff like that but its unlikely to happen
[20:18:55] <bobb_> AliceMeows you mean like python2 and python3?
[20:19:05] <kalven> that worked out well
[20:19:15] <Eelis> the python2/3 catastrophe is a good lesson to learn from
[20:19:15] <quartz> Eelis: What do you mean by "bit-optimizing" and size 32 only occupying 1 machine word
[20:19:44] <Eelis> quartz: the current specification of vector<bool> makes it possible for a vector<bool> of size 32 to store all those 32 "bools" in a single uint32_t
[20:19:52] <Eelis> which is a considerable space optimization
[20:20:11] <Eelis> this space optimization would no longer be valid if it was required that vector<bool>(n)[i] returned a bool&
[20:20:36] <Eelis> because sizeof(bool)=1, so storing 32 bools takes 32 bytes
[20:20:43] <Eelis> which is way more than sizeof(uint32_t)
[20:20:45] <bobb_> quartz prefer std::bitset over std::vector<bool> and thats it
[20:20:58] <bobb_> ok the first has fixed sized
[20:21:28] <AliceMeows> I see nothing wrong with having additional namespace with fixed types
[20:21:44] <quartz> Eelis: Ahh OK thanks
[20:22:05] <quartz> So they did it for space optimization
[20:22:09] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[20:22:21] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:22:42] *** Joins: gproto23_ (~gproto23@user/gproto23)
[20:23:33] <Eelis> yep, and that space optimization is entirely legit. they just didn't realize (because it was so long ago) that tons of people would be writing code for vector<T> without caring what T was, and in those situations, you kinda expect to be able to get a T&
[20:23:47] <Eelis> and bool breaks that, which causes a lot of headaches
[20:24:29] <Eelis> so the problem isn't that they came up with a bad implementation, the problem is that they gave it the name "std::vector<bool>", because that name understandably makes people think it's like other vectors
[20:24:33] <Eelis> which it isn't
[20:25:15] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:25:23] <Eelis> but there are absolutely cases where you really do want the space optimization, and don't want to waste 8x memory on unused bits
[20:25:41] <Eelis> hence std::bitset
[20:26:26] <Eelis> (and boost::dynamic_bitset)
[20:27:45] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:27:50] <quartz> std::bitset fixes the issue than?
[20:28:04] <Eelis> no, because std::bitset requires a compile-time known size
[20:28:10] <Eelis> which vector<bool> does not
[20:28:23] <Eelis> (and boost::dynamic_bitset does not either)
[20:29:17] <quartz> Ahhh
[20:29:51] *** Joins: hashfuncd0d (~user@162.254.115.155)
[20:29:56] <Eelis> and the issue can't be "fixed", because no matter what additional stuff the stdlib provides, std::vector<bool> will have to remain an anomaly for backward compatibility's sake
[20:30:36] *** Joins: biberu (~biberu@user/biberu)
[20:30:36] <quartz> So what use does std::vector<bool> have?
[20:30:40] <Alipha> AliceMeows: do you actually need to test if the trait is specialized? or simply error if it isn't? the typical pattern for traits is to simply static_assert in the generic case: https://godbolt.org/z/dqvTMjrKj
[20:31:03] <Eelis> quartz: it's useful whenever you want to store a bunch of bools and the space optimization is useful (which is often because do you really want to waste 8x memory?)
[20:31:52] <quartz> So, how do you reference say, v[1], it's not possible? It should return a single bit, like 1 or 0, but how do you access that bit?
[20:31:59] <quartz> Because you can't reference a single bit in C++
[20:32:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:32:16] <AliceMeows> Alipha: the reason I use concepts instead of static_assert is to avoid errors coming from the library I currently develop
[20:32:23] <Eelis> for that reason, vector<bool>::operator[] returns a special class type that has overloaded operators, to *pretend* that it's the real bit
[20:32:33] <Eelis> << TYPE(vector<bool>(3)[1])
[20:32:34] <geordi> prvalue _Bit_reference
[20:32:51] <Eelis> and in a lot of code, that pretense works out just fine
[20:33:01] <Eelis> but in generic code that really wants a T&, it does not
[20:33:22] <quartz> I see
[20:33:56] <quartz> Eelis: Thanks for the great explaination, you've been really helpful.
[20:33:59] <Eelis> np
[20:36:55] *** Joins: myusername (~myusernam@user/myusername)
[20:37:59] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:38:54] *** Joins: callq (~callq@2409:4062:2296:71d:edc0:24f8:78e1:290e)
[20:41:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:42:44] <evangeline> AliceMeows, Eelis bobb_ one more thing for practice only https://godbolt.org/z/WosaWaszM : Let's say that I'm fine with running SuperSlowGetData multiple threads, but I want no threads to wait, even at a cost of running SuperSlowGetData multiple times. What I care about is that threads don't wait and that I cache it correctly (so either thread can assign m_data), but I want to ensure that the whole m_data is assigned by a single thread (so it doesn't
[20:42:44] <evangeline> come to the scenario, where first half of structure is assigned by T1, while second half is assigned by T2). Is the code I posted correct?
[20:43:16] *** Joins: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com)
[20:43:46] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[20:44:15] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-035.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[20:45:41] <evangeline> I think it's not, because Data is not trivially copyable, so what would it take to change it to make it work ...
[20:45:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Quit: Konversation terminated!)
[20:45:52] <evangeline> should I only keep a Data* pointer instead of actual whole structure
[20:46:05] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:47:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[20:48:07] *** Joins: jokoon2 (~eio@88.125.11.133)
[20:51:20] *** Quits: jokoon (~eio@2a01:e0a:542:e160:d0b4:19d2:35ef:8632) (Ping timeout: 268 seconds)
[20:53:42] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[20:54:07] *** Quits: myusername (~myusernam@user/myusername) (Remote host closed the connection)
[20:55:06] <quartz> Eelis: Can you tell me what is meant by a pointer-to-member operators .* and ->* having lower precedence than the function call operator.
[20:55:06] <Alipha> evangeline: if you don't care about SuperSlowGetData fetching the data twice, then: https://godbolt.org/z/r6n8WGx93
[20:56:01] <quartz> I guess i'm not sure what a->*p (b) does vs a->f(b)
[20:57:05] <bolovanos> hithere - I have firmware to my home alarm system (*.bin) I would like to look inside. What channel would you recommend for such task?
[20:57:32] <bolovanos> ... I am going throught this, but I am noob... https://www.pentestpartners.com/security-blog/how-to-do-firmware-analysis-tools-tips-and-tricks/
[20:57:33] <Alipha> bolovanos: maybe #asm
[20:58:00] <evangeline> Alipha, thank you. I come up with this: https://godbolt.org/z/Ef1ea5hxo ; is this also correct or has some flaws?
[21:01:21] <bolovanos> Alipha, hi - thank you :)
[21:03:15] <Alipha> evangeline: the while loop will potentially get skipped by the second thread prior to m_data getting initialized
[21:03:24] <Alipha> s/initialized/assigned to/
[21:03:57] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:04:01] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[21:04:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:04:45] <Alipha> evangeline: m_Initialized needs to get set to true after m_data is assigned, not before. but then you potentially have m_data getting assigned to at the same time by multiple threads, which std::unique_ptr isn't guaranteed to handle properly
[21:05:12] <Alipha> i'm not sure how to write this with std::unique_ptr
[21:07:01] <evangeline> Alipha, ok so there is no way to use m_initialized flag together with the data ...
[21:07:31] <evangeline> In your example: I need to add a destructor that frees m_data right?
[21:08:03] <Alipha> evangeline: i'm sure there's a way... i just haven't worked enough with threading
[21:08:34] <Alipha> evangeline: yes, and define or delete copy and move constructors and copy and move operator=
[21:08:38] <Alipha> !ruleof3
[21:08:39] <nolyc> If you have one of 1) non-empty destructor 2) copy constructor 3) copy assignment operator then you almost certainly need _all_ three. In C++11, this is optionally extended to the Rule Of Five (by including the move constructor and move assignment operator).
[21:09:02] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[21:09:16] <Alipha> quartz: is there more context to your question that i missed?: Can you tell me what is meant by a pointer-to-member operators .* and ->* having lower precedence than the function call operator.
[21:12:08] *** Quits: proller (~p@2a02:6b8:0:40c:e854:6579:4f06:5db0) (Ping timeout: 252 seconds)
[21:14:00] <quartz> Alipha: I'm just wondering from a language design perspective how this is not a good thing.
[21:14:20] <evangeline> Alipha, I guess this is it: https://godbolt.org/z/qnb6cYEd5 ?
[21:15:30] <evangeline> Alipha,  is it possible to do std::unique_ptr<Data*> instead of std::unique_ptr<Data> ?
[21:15:32] <quartz> I guess I'm not sure what (a->*p)(b) does
[21:15:55] <evangeline> Alipha, thank you, I'll try to play with the std::unique_ptr a little bit more
[21:16:02] <AliceMeows> evangeline: why?
[21:16:05] <quartz> a is a struct and ->*p is referencing a pointer/memeber of that struct, but what does the (b) do
[21:16:31] <evangeline> AliceMeows, I'm trying to make std::unique_ptr example work
[21:16:47] <AliceMeows> Internally T turns into T*
[21:17:03] <AliceMeows> So T* turns into T** which you probably don't want
[21:18:31] <CarloWood> quartz: 'a' is the struct, 'p' is a member function pointer, and (b) is passed to the member function as argument.
[21:19:40] <quartz> CarloWood: You can have functions inside of structs?
[21:19:54] <AliceMeows> Yes you can
[21:19:56] <CarloWood> struct and class are the same thing
[21:20:09] <CarloWood> just different default public: / private:'s
[21:21:26] <quartz> I was just trying to understand this comment: "The pointer-to-member operators .* and ->* having lower precedence than the function call operator. Because of this decision, we are forced to use parentheses in (a->*p)(b) even though we can write a->f(b)."
[21:21:56] <quartz> I don't understand how this is a problem with C++, when a->f(b) is valid?
[21:22:56] <CarloWood> a->f(b) is the same as (a->f)(b), but a.*p(b) is the same as a.*(p(b))
[21:23:35] <CarloWood> geordi: --precedence a.*p(b)
[21:23:36] <geordi> a.*(p(b))
[21:23:36] <quartz> OK. I just don't get how this is bad.
[21:23:56] <CarloWood> It is not what was intended - you want (a.*p)(b)
[21:24:47] <quartz> Weird. Why did they design it this way?
[21:25:08] <CarloWood> I assume so that functions can return member function pointers.
[21:25:58] <CarloWood> If p is returned by g() you can now write: (a.*g())(b);
[21:26:10] <CarloWood> geordi: --precedence a.*g()(b)
[21:26:10] <geordi> a.*((g())(b))
[21:26:39] <CarloWood> Anyway, it's random - you can always fix it with parens
[21:30:05] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:32:06] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[21:32:54] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[21:34:00] <quartz> CarloWood: Ok thanks.
[21:34:26] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[21:35:16] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[21:37:27] *** Quits: bobb_ (~bobb_@ipservice-092-211-155-129.092.211.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:38:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:39:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:41:49] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[21:42:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:42:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:22] *** ChanServ sets mode: +v npaperbot
[21:43:53] *** Joins: ed (~ed@2404:160:181:8e4d:450:7e92:651b:f90a)
[21:47:16] *** Joins: karakedi (~eAC53C340@user/karakedi)
[21:51:23] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:a85e:5217:60c2:bcc7) (Ping timeout: 256 seconds)
[21:54:03] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[21:54:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:54:22] *** Joins: magla (~gelignite@55d46452.access.ecotel.net)
[21:54:33] *** Joins: N4buc0 (~N4buc0@177.16.170.138)
[21:55:25] <acidtonic> Is there a map-like datastructure that allows behind-the-scenes updates to contiguous vectors from other threads without any worry of reindex/shuffle? (assuming proper locking for access/updates on the map)
[21:55:33] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:2121:2e45:e323:fc31:aa4d) (Remote host closed the connection)
[21:56:37] <acidtonic> works with various vectors in global scope, but if I put them inside a map eventually hits issues. Closest workaround is to keep the vectors in global scope and put their pointer in the map to find the right one, but that's still ugly
[21:58:48] <Eelis> i don't know why you would even worry about reindexing/shuffling when all you're doing is changing the value in a map.
[21:58:53] <acidtonic> Datatype now is std::map< int, std::vector< std::unique_ptr<T> > >;  I hand that vectors backing storage to a thread in C I don't control that reads/writes them often in place. Open to ideas.
[21:58:58] <Eelis> it's only when you want to change keys that things get complicated.
[21:59:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[21:59:19] <InPhase> acidtonic: This is generally a (tm) Very Bad Idea.  Across-thread shared mutables are to be minimized at all costs.  There should be thread-ownership of mutability, and then immutable data shared, as much as can be done.
[21:59:38] <acidtonic> Eelis, exactly, a script language is crafting the map, I need to hand it's backing memory to another lib in C
[22:00:13] <acidtonic> right now I just force the script language to stop changing the map once it starts, I just dislike the whole thing very uglyu
[22:00:27] *** Quits: hashfuncd0d (~user@162.254.115.155) (Ping timeout: 256 seconds)
[22:00:37] <Eelis> interacting with script languages is bound to be extremely slow
[22:00:39] <Eelis> good luck with that.
[22:01:02] <acidtonic> It's angelscript used in lots of big games, performance is fine
[22:01:10] <Eelis> if you say so
[22:01:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Quit: Leaving)
[22:01:30] <acidtonic> I just glue here so I can't control either side thus my predicament
[22:02:06] <acidtonic> Thanks for the help, glad others agree it's bad maybe I'll get momentum to fix it :)
[22:02:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:02:22] <Eelis> (note that even in games that use scripts, they typically only use the script language in the parts of the game where performance is unimportant)
[22:03:29] <acidtonic> map of weak_ptrs to shared_ptr vectors in global scope is what I'm thinking but I still dislike the global aspect
[22:05:47] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:19fe:5684:c662:9574)
[22:05:47] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:19fe:5684:c662:9574) (Changing host)
[22:05:47] *** Joins: skapata (~Skapata@user/skapata)
[22:06:14] <InPhase> acidtonic: A pattern I use to update shared data is to have a const copy that can be accessed in a shared_ptr manner, and then have a single thread in charge of updates to the content, where it generates a new copy for updates and then swaps out the primary copy that is grabbed.  There is a lag where other threads can still be using the shared_ptr for the old version until they loop around and get a fresh
[22:06:19] *** Joins: proller (~p@2a02:6b8:b081:17::1:38)
[22:06:20] <InPhase> copy, but this is somewhat intrinsic that sharing any mutable data will result in threads running with outdated data at some point.
[22:07:21] <Alipha> acidtonic: you're handing a std::vector of unique_ptrs to C code? presumably you're using .data() to get a std::unique_ptr<T>*... but what is the C code supposed to do with the unique_ptrs?
[22:08:06] <InPhase> acidtonic: So what's ultimately important is making sure that there is a clear architecture built around that intrinsic property, with centrally managed well-defined updates.  The advantage of keeping reads not subject to exclusivity often outweighs the overhead of making new data copies.
[22:09:07] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Read error: Connection reset by peer)
[22:09:35] <InPhase> acidtonic: With this model, your reading threads can basically hold onto the shared_ptr for as long as said C routine is running, and then the data and its storage remains valid, even if it has changed for the rest of the program.
[22:09:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[22:11:05] *** Joins: c4017w (~c4017@209.52.68.8)
[22:11:17] <acidtonic> I like that ^^^
[22:12:28] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:38] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:19:11] *** Quits: evangeline (~Eleanor@178.79.105.181) (Remote host closed the connection)
[22:19:14] *** Joins: |` (~|`@178.159.129.50)
[22:19:48] *** Joins: evangeline (~Eleanor@178.79.105.181)
[22:20:01] *** Joins: Betal (~Betal@user/betal)
[22:22:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[22:23:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:25:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:25:41] *** Quits: cosimone (~user@93-34-133-254.ip49.fastwebnet.it) (Remote host closed the connection)
[22:26:02] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:07] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:28:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:30:11] *** Joins: hashfuncd0d (~user@162.254.115.155)
[22:30:13] *** Joins: quartz (~user_name@user/quartz)
[22:33:13] *** Joins: Atque (~Atque@user/atque)
[22:33:16] *** Quits: ed (~ed@2404:160:181:8e4d:450:7e92:651b:f90a) (Remote host closed the connection)
[22:33:39] *** Joins: ed (~ed@2404:160:181:8fa4:bea2:187f:879a:b950)
[22:46:25] *** Joins: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com)
[22:46:46] *** Quits: |` (~|`@178.159.129.50) (Remote host closed the connection)
[22:47:03] *** Joins: |` (~|`@178.159.129.50)
[22:47:15] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:47:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:47:55] <yates> is there a slick way, given a vector of std::strings, to apply a function returning T to each element and creating a std::vector<T>?
[22:49:45] <yates> i could just iterate, but that's so C-ish...
[22:49:52] <kalven> not exactly slick, but you can put it together with std::transform
[22:50:40] <yates> kalven: ok let me check that out
[22:50:59] <yates> is std::transform c++11?
[22:51:08] <kalven> yes
[22:51:21] <kalven> well, c++98
[22:51:29] <yates> +1
[22:53:38] <CarloWood> yates:
[22:53:42] <CarloWood>  { std::vector<std::string> v = { "Hello", "World" }; std::vector<char> out; std::transform(v.begin(), v.end(), std::back_inserter(out), [](std::string const& s) { return f(s); }); SHOW(out); } char f(std::string const& s) { return s[1]; }
[22:53:43] <geordi> out = {'e', 'o'}
[22:54:36] <CarloWood> Or if f() doesn't have to be or is a global function you can just put it in that lambda.
[22:54:49] <CarloWood> Actually - if it .. you can do:
[22:55:08] <CarloWood> { std::vector<std::string> v = { "Hello", "World" }; std::vector<char> out; std::transform(v.begin(), v.end(), std::back_inserter(out), &f); SHOW(out); } char f(std::string const& s) { return s[1]; }
[22:55:09] <geordi> out = {'e', 'o'}
[22:55:51] *** Joins: Atque (~Atque@user/atque)
[23:03:00] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:04:12] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[23:10:18] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:10:26] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::49)
[23:11:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:11:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[23:11:57] <yates> thanks CarloWood
[23:12:23] <yates> i'm tempted to just do the iteration - this is a bit too hard to read for my taste.
[23:12:57] <CarloWood> You mean the
[23:13:06] <CarloWood> std::transform(v.begin(), v.end(), std::back_inserter(out), &my_function);
[23:13:07] <CarloWood> ?
[23:13:11] <CarloWood> Very hard to read.
[23:13:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[23:14:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[23:14:57] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:15:02] <CarloWood> It is matter of getting used to use std::transform etc. When I see that line I see "For all elements of v, append my_function(element) to out.
[23:15:44] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:16:21] *** Joins: cosimone (~user@93-34-133-254.ip49.fastwebnet.it)
[23:18:01] <Alipha> personally, i'd still go with `for(auto &&x : v) out.push_back(my_function(x));` :-)
[23:18:48] <CarloWood> Eew 'auto &&'; use 'auto&& x'  :p
[23:19:21] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:19:53] <Alipha> `auto and x`
[23:20:01] *** Quits: sigma_ (~sigma@164.215.217.26) (Ping timeout: 256 seconds)
[23:20:01] <CarloWood> lol
[23:20:14] <Alipha> `auto bitand x`
[23:20:48] <Shell> cursed
[23:26:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:27:25] *** Joins: quartz (~user_name@user/quartz)
[23:27:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:28:59] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:30:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:31:28] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:31:32] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[23:35:47] *** Joins: voltron (~junaid@ip4d158509.dynamic.kabel-deutschland.de)
[23:38:26] *** Quits: geeknix (~pi@2001:e68:5432:46d8:39f7:e80b:25f7:e9cb) (Ping timeout: 252 seconds)
[23:38:35] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:38:41] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[23:40:59] <quartz> Why is "this" a pointer rather than a reference in C++?
[23:41:21] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:41:36] <constxd> who cares?
[23:42:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 260 seconds)
[23:42:45] <quartz> I'm just wondering
[23:43:07] <Alipha> `this` was probably added to c++ prior to references getting added
[23:43:12] <evangeline> Is call_once in C++ an exact alternative to InitOnceExecuteOnce: https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-initonceexecuteonce : I'm trying to determine possible ways to implement InitOnceExecuteOnce in C++ only without Win32 APIs.
[23:43:36] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:43:43] <constxd> reference vs. pointer would be inconsequential
[23:44:19] <constxd> instead of writing this and *this you would write &this and this
[23:44:25] *** Quits: clime (~clime@37-48-57-231.nat.epc.tmcz.cz) (Quit: WeeChat 3.3)
[23:46:54] *** Joins: plastico (~plastico@neomutt/plastico)
[23:48:04] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[23:48:58] <quartz> Fair enough
[23:49:34] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:50:17] <jokoon2> How do I iterate the key of a object in nolhman json?
[23:50:34] <jokoon2> when I iterate, it just gives me values, not keys
[23:51:21] *** Joins: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877)
[23:52:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:53:54] <Alipha> !give jokoon2 general
[23:53:55] <nolyc> jokoon2: #C++-general for algorithms, libraries, practices, projects, tools etc.
[23:54:02] <jokoon2> oh sorry
[23:55:12] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[23:55:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:58:22] *** Parts: voltron (~junaid@ip4d158509.dynamic.kabel-deutschland.de) ()
