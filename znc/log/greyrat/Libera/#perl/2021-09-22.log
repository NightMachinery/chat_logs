[00:00:14] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[00:04:35] *** Joins: khosruw (~khosruw@vps-6df5f188.vps.ovh.net)
[00:04:56] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[00:06:05] *** Quits: x28girl (~x28girl@user/x28girl) (Ping timeout: 264 seconds)
[00:06:55] *** Joins: kensanata (~user@user/kensanata)
[00:09:28] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[00:09:46] <El_Che> only FreeBSD users outpromote Arch Linux users
[00:13:12] <khosruw> hey everybody, I'm using split(/[}{]/, ...) and it throws error when I have no value for my hash, more info: https://l.perl.bot/p/nq19lh. I would really appreciate it if you help me :)
[00:13:13] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:13:31] *** Joins: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com)
[00:14:35] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[00:14:55] *** Joins: semeion (~semeion@user/semeion)
[00:14:57] <phryk> mst: Oh, I was talking more about infrastructure that exposes info on the web.
[00:15:00] <mst> khosruw: p3rl.org/Parser::MGC might be easier to write something more intelligent with
[00:15:06] <mst> phryk: ohhh, right
[00:15:08] <phryk> like the cpantesters stuff.
[00:15:13] <mst> phryk: metacpan links to the cpantesters data
[00:15:45] <mst> phryk: there's a 'testers' link on every module page
[00:16:12] <phryk> oh, didn't even see that.^^;
[00:16:26] <khosruw> mst: yeah, Parser::MGC is great and I've used it, but I couldn't design what exactly I wanted :(
[00:16:46] <mst> well, my first thought wrt your current code is "augh"
[00:17:33] <mst> basically "any 'parser' written like this is going to be a nightmare and I don't wanna debug this get it away from me" :D
[00:21:23] * GumbyPAN CPAN Upload: FFI-ExtractSymbols-0.06 by PLICEASE https://metacpan.org/release/PLICEASE/FFI-ExtractSymbols-0.06
[00:21:27] <mst> khosruw: btw, if you look inside Web::Simple it has a raw-perl mgc style parser, that might give you some ideas
[00:21:39] <mst> I found Parser::MGC was easier to work with once I'd already written a couple by hand
[00:22:28] <khosruw> mst: LOL, my problem with Parser::MGC is "committed_scope_of", because it makes my base syntax like json, for example: { Module1:{ foo: "", bar: "" }, Module2:{ } }, but I wanna have a syntax like this one: Module1 { foo = ""; bar = ""; } Module2 {} ... I know that Parser::MGC can do this easily, but I don't know how to write it
[00:22:56] <khosruw> https://metacpan.org/release/PEVANS/Parser-MGC-0.19/source/examples/parse-jsonlike.pl
[00:22:56] <Paperbot> Link title(s): [ examples/parse-jsonlike.pl - metacpan.org ]
[00:23:22] <khosruw> it's the source that helped me write some random thing!
[00:23:36] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:24:16] <mst> khosruw: uh, the thing you put in the middle of commited_scope_of would handle that
[00:24:38] <zacts> LeoNerd: what languages do you like other than Perl for daily use?
[00:24:42] *** Quits: daex (~daex@user/daex) (Quit: /me 's znc kicks the bucket)
[00:24:56] <mst> the problem is that you used list_of inside that, I bet, whereas what you wanted was your own while loop or whatever
[00:25:07] <mst> however. pubtime :D
[00:25:48] <zacts> I kind of like how much of raku is implemented in raku
[00:25:50] <khosruw> mst: could you give me an example please?
[00:25:58] <zacts> I wonder if this could ever happen for Perl5
[00:26:28] <zacts> but it seems that perl *is* defined by the implementation of the perl interpreter
[00:27:55] <zacts> it might be interesting to see a perl7 of something that is a reimplementation of perl5 on a different vm
[00:29:33] *** Joins: Trigon (~reuben@144.39.114.115)
[00:29:35] *** Joins: daex (~daex@user/daex)
[00:31:44] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[00:32:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:50:42] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[00:50:44] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 246 seconds)
[00:52:05] *** Quits: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com) (Remote host closed the connection)
[00:52:30] <Grinnz> zacts: that was basically what they tried to do with perl 6 20 years ago, it did not work out
[00:53:00] <Grinnz> one that did work out though is perlito
[00:54:05] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 264 seconds)
[00:56:27] * GumbyPAN CPAN Upload: Number-Phone-3.8001 by DCANTRELL https://metacpan.org/release/DCANTRELL/Number-Phone-3.8001
[00:57:00] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:59:15] <zacts> oh perlito looks kind of cool
[00:59:16] <zacts> thanks
[01:08:45] *** Joins: whynot (~whynot@88.155.45.247)
[04:57:14] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[04:57:33] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:58:13] *** Quits: willthechill (~willthech@172.58.99.242) (Ping timeout: 252 seconds)
[04:59:02] *** Server sets mode: +nt 
[05:00:48] *** Quits: eramirez (~eramirez@49.144.39.35) (Quit: Leaving)
[05:05:07] *** Quits: aspic (~shifty~~~@ppp121-44-111-225.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[05:05:33] *** Joins: aspic (~shifty~~~@ppp121-44-117-67.syd-gls-har-bras39.tpg.internode.on.net)
[05:06:00] *** Joins: x28girl (~x28girl@user/x28girl)
[05:13:45] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[05:14:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[05:16:34] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:16:47] *** Quits: subie (~subie@2601:4c0:4080:bc0:3cfb:c129:4044:2b94) (Quit: Leaving)
[05:24:04] <unixcat64> Is there a way to like bootstrap the installation of Perl modules when running a Perl script? Particularly on Unix/Linux
[05:26:23] *** Quits: Su-Shee (~Susanne@p50894549.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:27:32] <mst> unixcat64: bootstrap how so?
[05:27:47] <mst> unixcat64: sorry, I know lots about this but http://trout.me.uk/data.jpg
[05:27:49] *** Joins: Su-Shee (~Susanne@p508947d1.dip0.t-ipconnect.de)
[05:29:58] <unixcat64> my bad, mst. here's what I mean: when I run a Perl script with "perl myscript.pl", if I don't have the modules that used in the script, it will exit with an error saying X module cannot be find, etc. So is there a way to avoid that and have the required modules install automatically before the body of the script is run?
[05:31:04] <unixcat64> it's not a big deal, but just to avoid having to install the modules manually
[05:33:15] <mst> unixcat64: I mean, there are multiple answers depending on the situation
[05:33:26] <mst> unixcat64: first question: are they pure perl modules?
[05:33:57] <mst> unixcat64: second question: can I assume a working local::lib and cpanminus installation?
[05:34:25] <mst> unixcat64: third question: where are you getting 'myscript.pl'
[05:34:30] <mst> unixcat64: third question: where are you getting 'myscript.pl' from?
[05:35:04] <mst> (sorry, I've probably written or helped write most of the solutions to this, but I need to know exactly which type of problem ;)
[05:36:18] <unixcat64> I think they are pure perl modules in that they are written in perl. Yes you can assume cpanminus is installed. 'myscript.pl' is on my local filesystem, it's a script I've written.
[05:36:47] <mst> unixcat64: ok, then you know how cpanminus is a single file?
[05:36:50] <zgu> that would be kind of cool to do an automated local install of any needed modules
[05:37:03] <mst> zgu: lib::xi already does that
[05:37:29] <unixcat64> as far as local::lib, I just run "sudo cpanm module" usually
[05:37:42] <mst> unixcat64: it's a single file because it bundles all its (pure perl) dependencies with App::FatPacker
[05:37:53] <mst> unixcat64: ok, well, then you're missing out :D
[05:38:07] <zgu> why not cpanm --sudo module?
[05:38:21] <mst> unixcat64: fatpack will take a pure perl script and basically bolt all of its dependencies on the front for you
[05:38:28] <mst> unixcat64: designed for exactly this problem
[05:38:30] <unixcat64> mst: I'd be happy to use local::lib if that is better :)
[05:38:35] <mst> unixcat64: hence why cpanm uses it
[05:39:03] <unixcat64> mst: awesome, I'll check that out
[05:39:27] <mst> unixcat64: if you have C based dependencies, then you probably want to auto-create a local::lib per script, with lib::xi plus my App::plx make easy
[05:39:41] <unixcat64> ah okay
[05:39:41] <mst> unixcat64: yeah, I totally wrote most of this specifically to solve these problems :D
[05:39:46] <unixcat64> nice!
[05:41:02] <mst> unixcat64: local::lib handles "install into your home directory"
[05:41:16] <unixcat64> yes
[05:41:33] <mst> unixcat64: App::FatPacker handles "turn a script with pure perl dependencies into a single fat-ass script with those dependencies bundled"
[05:41:37] <mst> unixcat64: cpanm uses both
[05:42:52] <unixcat64> I kind of resent the implied fat-shaming, but that seems like a nifty tool
[05:43:10] <mst> oh gods it really isn't shaming anything
[05:43:59] <unixcat64> it's alright lol
[05:45:47] <mst> being a dick to somebody who's fat is ... being a dick
[05:45:49] <mst> and no
[05:46:05] <mst> I am totally a dick to people sometimes but it's cos they were being an asshole themselves
[05:46:10] <mst> or at least that's the plan
[05:46:25] <mst> their body type is fucking irrelevant to me being a bastard ;)
[05:46:26] <mst> anyway
[05:47:57] <unixcat64> sorry mst I didn't mean to accuse you. I'm sure you are not intending to fat-shame, it's just sometimes the word "fat" in anything is like a microaggression.
[05:48:27] <mst> I am massively anti those people but also aware that fat-shaming is a pile of bullshit as well
[05:48:31] <mst> so I get verbose :D
[05:48:41] <unixcat64> mst: thank you for your help!
[05:49:00] <mst> unixcat64: oh, also, if your script -does- depend on C stuff
[05:49:24] <mst> then it's entirely possible to build a local::lib next to it with the compiled stuff and have it automatically pick that up
[05:49:33] <unixcat64> ah okay
[05:49:47] <mst> note, I also invented local::lib
[05:50:13] <mst> local::lib and App::FatPacker both happened because of the freenode version of this channel and people wanting to avoid cpan and me wanting them to stop wanting to do that
[05:51:24] <unixcat64> Lol I see
[05:51:34] <unixcat64> necessity is the mother of invention I guess lol
[05:51:56] <mst> unixcat64: "I'm sick of helping newbies with things that should be simple but aren't" in this case
[05:52:24] <unixcat64> Ah
[05:52:30] <mst> unixcat64: then cpanm is all miyagawa but as soon as he saw App::FatPacker he switched to using it because he'd rather leave the batshit parts to me
[05:53:04] <unixcat64> Lol
[05:54:37] <mst> unixcat64: oh, also, if you're needing to run a one-shot piece of logic on 200 systems
[05:54:49] <mst> unixcat64: Object::Remote does on demand fatpacking over an ssh connection
[05:54:57] <mst> so you install the modules on one machine
[05:55:08] <mst> and let Object::Remote make it run across your entire fleet
[05:55:38] <unixcat64> ah awesome. I just recently started using Perl/Raku and I'm liking it
[05:56:06] <unixcat64> Idk why, it just "feels" good to use it I guess
[05:56:23] <mst> unixcat64: so, imagine you have a project where you already got your own MyProject::Foo written
[05:56:54] <unixcat64> yes...
[05:57:04] <mst> unixcat64: 'use Object::Remote; my $remote = MyProject::Foo->new::on(...); $remote->call_thing;'
[05:57:20] <mst> unixcat64: new::on takes a hostname or user@host to call ssh with
[05:57:42] <mst> unixcat64: and then on the fly makes all perl modules you have locally available on the other side of the sshd connection
[05:57:49] <mst> unixcat64: and you can call methods on that object
[06:00:33] <unixcat64> nice! I'm thinking of making a server setup script with Perl, and that seems like something I could use for that. I want something that works well  with freshly provisioned Linux/Unix servers that I can just run out of the box. I've been using Ansible to automate various tasks but I feel like with a Perl script I'd have more granular control per
[06:00:33] <unixcat64> task.
[06:01:47] <mst> unixcat64: yes, and yes pleaser
[06:01:53] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 264 seconds)
[06:01:58] <mst> I'm ops enough this is part of why I've written all this stuff
[06:02:30] *** Joins: subie (~subie@2601:4c0:4080:bc0:61fe:845d:d42b:712a)
[06:03:36] <unixcat64> awesome
[06:03:51] <mst> unixcat64: but yes, a fatpacked script for server setup via cloud-init etc. is something I've done and it worked
[06:04:26] <mst> unixcat64: Object::Remote lets me run finishing touches while only expecting 'a perl' on the other side of ssh
[06:05:02] <mst> unixcat64: also, you should look at rexify.org - they're nothing to do with me but pretty cool
[06:05:10] <unixcat64> yeah, and most systems have perl installed by default. on the other hand I have to install ansible manually
[06:05:42] <unixcat64> thanks!
[06:05:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:06:08] <mst> right, Object::Remote came from "I quite like fabfile but it only handles bash on the far end, what if I assumed perl on the far end -and- did dynamic shipping of parts of a local::lib over the wire"
[06:07:54] <mst> unixcat64: oh, also, I've figured out how to pack shared objects into a fatpack style file for linux and freebsd but I've not found a good use for it yet - if you have one talk to me cos that'll motivate me to make the rest of it work
[06:09:37] <mst> like, it's a shared object, so it's gonna be OS/perl specific
[06:09:59] <unixcat64> okay I'll keep that in mind!
[06:10:04] <mst> but I can build a single file perl script for a specific target OS+perl that has e.g. sqlite included
[06:10:18] <mst> I just have any good uses for it yet
[06:12:08] <mst> don't have even
[06:12:35] <mst> shit actually cloud-init data might be one lol
[06:14:29] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:14:36] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[06:15:03] <pj> unfortunately you can no longer rely on unix systems to have perl installed by default
[06:15:18] <mst> pj: can't always no
[06:15:24] <mst> pj: but a lot of times you can
[06:15:31] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:15:42] <mst> pj: I plan to make static binaries easy soon for the times when you can't
[06:15:53] <mst> pj: but meanwhile ...
[06:16:01] <pj> it used to be the case back when a lot of system utilities were written in perl, but nowadays python is the choice for those, and minimal installs of an increasing number of linux distros do not include perl.
[06:16:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:16:46] <mst> pj: yeah, look, you know how I wasted six months from people trying to make TPF throw me out of the perl community?
[06:17:29] <pj> no idea mst, heh, I must not have been paying attention ;-)
[06:17:32] <mst> pj: that was because I disagreed with sawyer's original perl7 plan of "perl as released my the perl5-porters will never be /usr/bin/perl anywhere again'
[06:17:46] <mst> pj: I might have disagreed quite strongly with that idea :
[06:17:48] <mst> :D
[06:18:10] <pj> yeah, well, I'm just stating the way things are now, I would love to be able to rely on perl always being there.
[06:18:36] <mst> pj: I don't disagree. that's why I'm working on the statically compiled stuff
[06:18:42] * pj nods
[06:19:21] <mst> pj: except for FreeBSD where they removed perl from core in order to enable an -amazingly- good perl-in-ports thing that's actually so nice I'm glad they did it
[06:19:38] <mst> but like debian and ubuntu are vastly dependent on perl
[06:19:54] <pj> well, afaik all distros still have perl available at least as an optional package, as well as a large number of the most commonly needed modules, so I find that if I just package my programs properly for those systems then the package manager will pull in perl and any module deps at install time anyways.
[06:20:34] <mst> pj: I tend to just require 'dnf install perl' plus a fatpacked script on any RHish distro
[06:20:41] <mst> pj: on the debianish it just works
[06:21:01] <mst> pj: on the BSDs it just works, and FreeBSD requires 'pkg install perl' first
[06:21:12] <mst> acceptable to me, so far
[06:21:25] <mst> but I still want to get the statically compiled stuff working
[06:21:45] <pj> yeah, I am not a fan of fatpack, tbh, but that's just personal preference.
[06:22:11] <mst> pj: that's fine, it's a whole set of trade-offs
[06:22:12] <pj> and I'm quite familiar with rpm/yum/dnf packaging, so I don't find it to be a problem.
[06:22:40] <mst> pj: but I leaned into those trade-offs and it works well within that set of decisions
[06:22:45] <pj> I can package it with deps that say stuff like: Require perl(JSON)
[06:22:58] <unixcat64> for a Perl command line, I use reply. Is there a better alternative?
[06:23:20] <mst> pj: if it doesn't say 'Require perl(JSON::MaybeXS)' you're intentionally fucking over your users
[06:23:37] <pj> hrmmmmm, true, I should be doing that.
[06:24:24] <mst> pj: note, I invented JSON::MaybeXS to work in a way that would help people taking your side of the trade-off - if it doesn't, please bitch at me
[06:25:11] <mst> unixcat64: I'm not a 'normal' repl user but reply is basically version 2 of my Devel::REPL system and seems to be the best thing out there
[06:26:20] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:26:59] <mst> unixcat64: oh, yeah, a bunch of this low level stuff I wrote cos I was annoyed - please don't take me mentioning this as any level of "look at me I'm awesome", my ego is healthy enough anyway, just I often helped inspire current versions of things ;)
[06:29:15] <mst> unixcat64: like I wrote Devel::REPL but Reply is -way- better etc.
[06:31:19] *** Joins: semeion (~semeion@user/semeion)
[06:52:05] * GumbyPAN CPAN Upload: XML-MyXML-1.07 by KARJALA https://metacpan.org/release/KARJALA/XML-MyXML-1.07
[06:58:21] <pj> mst: just out of curiosity, why does JSON::MaybeXS prefer Cpanel::JSON::XS over JSON::XS?
[06:59:48] <mst> pj: shitloads of bugfixes
[07:00:08] <pj> makes sense.
[07:00:51] <mst> pj: also when the author of JSON::XS told one of the authors of a C/C++ standard he understood the standard better than the author I kinda gave up
[07:01:18] <mst> pj: doesn't mean if your reading's better, mate, if the author and the implementors all disagree, well
[07:02:20] <pj> mst: I just use the modules, so just wondering.
[07:02:50] <mst> pj: sure, but I think that's a good example of why
[07:03:27] <pj> yep, makes sense.
[07:03:47] <mst> pj: like "even *I* got bored of arguing"
[07:09:59] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:10:11] *** Joins: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net)
[07:19:56] *** Quits: Martchus (~martchus@dynamic-095-118-141-015.95.118.pool.telefonica.de) (Ping timeout: 246 seconds)
[07:20:05] *** Joins: Martchus_ (~martchus@2a01:c23:b893:9100:d250:99ff:fe49:3cce)
[07:44:12] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Remote host closed the connection)
[07:45:12] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:47:42] <unixcat64> mst: fair enough!
[07:47:51] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[07:48:27] <unixcat64> the only thing I don't like about reply is that it doesn't have much of a line editor, like you can't get command history or anything like Python's does
[07:48:36] *** Joins: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net)
[07:49:55] <mst> unixcat64: hang on
[07:50:35] <mst> unixcat64: install libreadline then Term::ReadLine::Gnu
[07:50:42] <unixcat64> Ahh okay, thanks
[07:50:50] <mst> unixcat64: bet that'll help
[07:51:30] <mst> unixcat64: sorry, I ... haven't done that
[07:53:48] <unixcat64> yeah that still doesn't help. when I press the up arrow for example it just prints out the keystroke
[07:54:52] *** Joins: sleetdrop (~sleetdrop@61.135.152.229)
[07:55:55] <ether> there was also that poison pill buried in AnyEvent
[07:59:55] <mst> broken yes
[07:59:59] <mst> more than one
[08:07:42] <pj> unixcat64: you actually have to use readline to fetch the line.
[08:08:08] *** Joins: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com)
[08:08:52] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[08:09:02] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:3d53:7013:6e81:3d2c)
[08:13:28] *** Joins: zamanf (~moo@2a02:587:de16:8a00:7dea:ca94:9c44:7cb4)
[08:17:51] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[08:19:19] <unixcat64> pj: I see. how do I do that?
[08:20:06] <pj> unixcat64: https://metacpan.org/pod/Term::ReadLine::Gnu
[08:20:08] <Paperbot> Link title(s): [ Term::ReadLine::Gnu - Perl extension for the GNU Readline/History Library - metacpan.org ]
[08:20:25] <pj> look at the synopsis (and the rest of the man page)
[08:22:04] <unixcat64> ohhh use as in "use Term::ReadLine::Gnu"
[08:22:12] <unixcat64> I thought you meant something else lol
[08:24:05] *** Quits: sleetdrop (~sleetdrop@61.135.152.229) (Ping timeout: 264 seconds)
[08:24:19] *** Quits: k-man (~jason@user/k-man) (Remote host closed the connection)
[08:24:25] <unixcat64> err, use Term::ReadLine
[08:25:10] *** Joins: k-man (~jason@user/k-man)
[08:27:15] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 265 seconds)
[08:31:32] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[08:31:55] *** Joins: mattil (~mattil@helsinki.portalify.com)
[08:44:19] *** Joins: Nahra`` (~user@static.161.95.99.88.clients.your-server.de)
[08:44:23] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[08:45:27] <pj> unixcat64: what I meant was to use the readline command as shown on that page (which includes "use Term::Readline")
[08:46:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[08:46:49] *** Joins: mattil (~mattil@helsinki.portalify.com)
[08:47:41] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 252 seconds)
[08:51:08] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[08:59:42] *** Quits: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[09:00:04] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:7e0:a401:6:d1df)
[09:00:08] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:00:20] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:04:46] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:05:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:06:11] *** Joins: mattil (~mattil@airio.portalify.com)
[09:08:08] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:7e0:a401:6:d1df) (Remote host closed the connection)
[09:08:31] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:7a90:5056:f5f4:9c48)
[09:10:04] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:7a90:5056:f5f4:9c48) (Client Quit)
[09:10:23] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:d805:9938:30c0:9d93)
[09:18:28] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:d805:9938:30c0:9d93) (Remote host closed the connection)
[09:18:51] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:1044:87cf:5858:acd8)
[09:20:20] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:1044:87cf:5858:acd8) (Client Quit)
[09:20:30] *** Joins: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net)
[09:21:20] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[09:21:21] * GumbyPAN CPAN Upload: WWW-ELISA-0.07 by VPEIL https://metacpan.org/release/VPEIL/WWW-ELISA-0.07
[09:25:27] *** Quits: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[09:25:38] *** Joins: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net)
[09:30:28] *** Quits: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:31:53] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:3d53:7013:6e81:3d2c) (Ping timeout: 264 seconds)
[09:33:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[09:33:38] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 246 seconds)
[09:35:14] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[09:36:14] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:36:22] * GumbyPAN CPAN Upload: Grizzly-0.103 by NOBUNAGA https://metacpan.org/release/NOBUNAGA/Grizzly-0.103
[09:38:14] *** Joins: R2robot (~R2robot@user/r2robot)
[09:38:32] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 246 seconds)
[09:41:42] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:42:14] *** Joins: mattil (~mattil@airio.portalify.com)
[09:45:28] *** Joins: gamo1 (~Thunderbi@cm-93-156-61-102.telecable.es)
[09:45:59] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Ping timeout: 252 seconds)
[09:46:00] *** gamo1 is now known as gamo
[09:50:15] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[09:53:24] *** Joins: ufobat (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de)
[09:58:07] *** Joins: tobybl (~tobybl@210.242.200.146.dyn.plus.net)
[10:16:53] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 264 seconds)
[10:17:44] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[10:17:53] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[10:25:10] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[10:25:22] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Client Quit)
[10:25:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[10:26:27] * GumbyPAN CPAN Upload: Config-Tiny-2.27 by RSAVAGE https://metacpan.org/release/RSAVAGE/Config-Tiny-2.27
[10:45:48] *** Joins: art1 (~romeyke@p200300ccdf074000b9e07a3a38af5cef.dip0.t-ipconnect.de)
[11:04:10] *** Joins: choroba (~E.Choroba@88.146.255.106)
[11:04:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[11:05:39] *** Joins: brtastic (~Thunderbi@185.24.91.138)
[11:09:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:10:18] *** Joins: tejr (~tejr@user/tejr)
[11:22:42] *** Quits: Nahra`` (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[11:26:34] * GumbyPAN CPAN Upload: Monoceros-0.28 by KAZEBURO https://metacpan.org/release/KAZEBURO/Monoceros-0.28
[11:28:33] *** Quits: x28girl (~x28girl@user/x28girl) (Read error: Connection reset by peer)
[11:29:46] *** Joins: x28girl (~x28girl@user/x28girl)
[11:29:49] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 252 seconds)
[11:29:49] *** Quits: perldoc (~perldoc@71.76.76.1) (Ping timeout: 252 seconds)
[11:30:29] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 252 seconds)
[11:30:33] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Read error: Connection reset by peer)
[11:30:38] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Read error: Connection reset by peer)
[11:30:48] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[11:31:46] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:33:41] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 246 seconds)
[11:34:01] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:35:43] *** Joins: Pali (~pali@user/pali)
[11:37:30] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:37:32] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 246 seconds)
[11:37:42] *** Joins: tejr (~tejr@user/tejr)
[11:38:37] *** Quits: tobybl (~tobybl@210.242.200.146.dyn.plus.net) (Ping timeout: 252 seconds)
[11:39:28] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[11:39:33] *** Joins: tobybl (~tobybl@31.111.35.255)
[11:39:59] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[11:40:29] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[11:40:29] *** ChanServ sets mode: +v perlbot
[11:40:34] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[11:41:30] *** Joins: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com)
[11:42:30] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[11:55:44] *** Quits: gggpkm (~gggpkm@111-251-149-92.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[11:57:17] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:57:50] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:57:52] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 252 seconds)
[12:06:01] *** Joins: huf_ (huf@user/huf)
[12:06:33] *** Joins: riceandb1ans (~zach@dev07.raasta.org)
[12:06:36] *** Joins: ufobat_ (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de)
[12:06:51] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[12:07:00] *** Joins: __Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:07:15] *** Quits: riceandbeans (~zach@user/riceandbeans) (Read error: Connection reset by peer)
[12:07:15] *** Joins: tbcr_ (~tbcr@75.183.195.9)
[12:07:15] *** Quits: unixcat64 (hyperreal@fedora/hyperreal) (Quit: Ping timeout (120 seconds))
[12:07:16] *** Quits: SysPete (~SysPete@fin.sysnix.com) (Quit: ZNC - http://znc.in)
[12:07:25] *** Joins: unixcat647 (hyperreal@envs.net)
[12:07:38] *** Quits: huf (huf@user/huf) (Quit: Reconnecting)
[12:07:44] *** huf_ is now known as huf
[12:08:00] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Read error: Connection reset by peer)
[12:08:06] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[12:08:08] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[12:08:23] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[12:08:24] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:09:06] *** Quits: tbcr (~tbcr@user/tbcr) (Ping timeout: 265 seconds)
[12:09:08] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[12:09:35] *** Quits: ufobat (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de) (Ping timeout: 265 seconds)
[12:16:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:29:42] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9/20210823155652])
[12:33:07] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[12:43:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:43:17] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:51:23] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 246 seconds)
[13:01:17] *** Joins: eseyman (~manu@lfbn-idf1-1-2271-214.w92-151.abo.wanadoo.fr)
[13:03:26] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 260 seconds)
[13:18:28] <The_Blode> Good morning all.
[13:18:45] <The_Blode> Quick question. I have been using "exit;" to exit out of my scripts. Is this perfectly valid?
[13:19:02] <The_Blode> A colleague told me that "Rule of thumb, Perl exits are usually "exit 1;"
[13:20:09] <haj> exit 1 only happens in case of an error.  Usually you don't write exit unless you explicitly want to set a return value for the shell
[13:21:22] <The_Blode> Thank you haj 
[13:21:34] <The_Blode> Is the advice incorrectly? Is it really a rule of thumb?
[13:21:50] <The_Blode> exit 1 indicates an error. What about exit 0.
[13:22:07] <The_Blode> And what if I choose not to have an error code returned as I'm executing the script in a non terminal context
[13:22:31] <haj> exit 0 is the "normal" case
[13:22:38] <The_Blode> Got it. Thank you.
[13:22:48] <The_Blode> Is "exit;" acceptable too?
[13:23:00] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:23:05] <The_Blode> My script will just gracefully exit and error codes are not required.
[13:23:09] <haj> exit; is equivalent to exit 0;
[13:23:20] <The_Blode> Awesome. You've been a great help to me.
[13:23:24] <The_Blode> Thank you so much
[13:23:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:24:21] <haj> 'perldoc -f exit' has  some fine print with regard to END blocks
[13:24:37] <The_Blode> Thank you again let me check
[13:25:23] <The_Blode> It's very clear in the doc.
[13:25:39] <The_Blode> That the EXPR is optional and will default to 0.
[13:25:48] <The_Blode> Thank you.
[13:25:59] <The_Blode> So the "rule of thumb that exit 1" is wrong
[13:26:06] <The_Blode> Not every exit is an error code.
[13:26:30] <The_Blode> But every exit with an absence of a exit code is 0
[13:28:03] <haj> Yes, that rule of thumb is nonsense.  And you don't need an explicit call to exit.  If your script ends normally, it's equivalent to "exit 0", if your script ends due to an uncaught exception (e.g. "die 'bad things happened'") then you get the equivalent of "exit 1".
[13:29:36] <The_Blode> I'm working with someone who has been using Perl for over a decade and he's reviewing my code and telling me things like that.
[13:30:07] <The_Blode> My code actually uses die in error cases not exit
[13:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:30:18] <The_Blode> So I think I'm using the exits fine. Thank you haj
[13:30:33] <The_Blode> Thanks for that helpful info. At least if he challenges me, I can point him to perldoc
[13:31:02] *** Joins: csrf (~csrf@user/csrf)
[13:32:36] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:34:18] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:38:14] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:38:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:40:31] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:41:06] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:43:05] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[13:47:51] *** Joins: ritsch_m` (~user@178.115.67.164.wireless.dyn.drei.com)
[13:49:53] *** Quits: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[13:51:18] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:51:30] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:53:01] *** Joins: holyghost (~holyghost@109.136.39.83)
[13:56:50] * GumbyPAN CPAN Upload: App-Greple-subst-2.29 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-subst-2.29
[14:01:43] *** Quits: ritsch_m` (~user@178.115.67.164.wireless.dyn.drei.com) (Remote host closed the connection)
[14:01:57] *** Joins: ritsch_m` (~user@178.115.67.164.wireless.dyn.drei.com)
[14:02:56] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:05:00] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[14:25:30] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:26:11] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:31:54] * GumbyPAN CPAN Upload: Bitcoin-Crypto-1.002 by BRTASTIC https://metacpan.org/release/BRTASTIC/Bitcoin-Crypto-1.002
[14:45:15] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:45:27] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:04:17] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[15:07:13] *** Joins: hudo (~hhudo_@37.24.178.194)
[15:08:15] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[15:08:52] *** Joins: x28girl (~x28girl@user/x28girl)
[15:12:13] *** Quits: surrounder (~surrounde@tanaka.surrounder.nl) (Quit: surrounder)
[15:12:32] *** Joins: surrounder (~surrounde@tanaka.surrounder.nl)
[15:16:12] *** Joins: proller (~p@2a02:6b8:0:40c:fd6a:4b23:fbdf:b896)
[15:16:43] *** Joins: pj (~pj@ghettoforge/pj)
[15:17:35] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:22:53] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[15:26:04] *** Joins: anthk_ (~anthk_@92.176.105.30)
[15:29:48] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:30:21] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:34:33] *** Joins: pj (~pj@ghettoforge/pj)
[15:39:22] *** Quits: brtastic (~Thunderbi@185.24.91.138) (Remote host closed the connection)
[15:41:14] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:41:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:41:48] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:42:53] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:47:02] * GumbyPAN CPAN Upload: Math-GMPq-0.47 by SISYPHUS https://metacpan.org/release/SISYPHUS/Math-GMPq-0.47
[15:49:53] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 264 seconds)
[15:54:14] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[16:00:13] *** Guest1413 is now known as PonyBlocks
[16:05:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:22:09] *** Joins: R2robot (~R2robot@user/r2robot)
[16:31:54] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:40:52] *** Joins: bmeneg (~bmeneg@131.100.62.247)
[16:42:00] *** Joins: mattil (~mattil@d17t6wpr6wlh4yh1-mk-4.rev.dnainternet.fi)
[16:42:03] *** Quits: mattil (~mattil@d17t6wpr6wlh4yh1-mk-4.rev.dnainternet.fi) (Remote host closed the connection)
[16:42:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:42:58] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:46:18] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[16:47:33] *** michelle_ is now known as Michelle
[16:49:23] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 246 seconds)
[16:57:32] *** Joins: diskin (~diskin@176.106.23.15)
[17:02:33] *** Joins: pj (~pj@ghettoforge/pj)
[17:06:28] *** Quits: zeus (~user@user/kamyl) (Ping timeout: 252 seconds)
[17:07:19] *** Joins: zeus (~user@user/kamyl)
[17:19:49] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[17:20:10] *** Joins: x28girl (~x28girl@user/x28girl)
[17:21:08] *** Joins: anthk_ (~anthk_@92.176.105.30)
[17:21:41] *** Quits: GEttR (~GEttR@user/gettr) (Ping timeout: 264 seconds)
[17:22:12] * GumbyPAN CPAN Upload: TestRail-API-0.049 by TEODESIAN https://metacpan.org/release/TEODESIAN/TestRail-API-0.049
[17:23:21] *** Joins: GEttR (~GEttR@user/gettr)
[17:24:42] <daxim> https://old.reddit.com/r/perl/comments/pt7i14/decoding_perlcareers/
[17:24:42] <Paperbot> Link title(s): [ decoding perl.careers : perl ]
[17:25:24] *** Quits: aspic (~shifty~~~@ppp121-44-117-67.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:26:14] *** Joins: aspic (~shifty~~~@ppp121-44-124-106.syd-gls-har-bras39.tpg.internode.on.net)
[17:31:41] *** Parts: art1 (~romeyke@p200300ccdf074000b9e07a3a38af5cef.dip0.t-ipconnect.de) ()
[17:33:34] *** Joins: tobybl_ (~tobybl@31.111.35.255)
[17:36:14] *** Quits: tobybl (~tobybl@31.111.35.255) (Ping timeout: 252 seconds)
[17:38:00] *** Quits: hudo (~hhudo_@37.24.178.194) (Quit: Leaving)
[17:38:14] <phryk> Assuming the OS does proper entropy setup – is rand() cryptographically random? Currently working on adding jitter against timing side-channel attacks…
[17:39:25] <haarg> no
[17:41:32] *** Joins: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net)
[17:42:53] <phryk> Okay, guess I'll use Math::Random::Secure then. :)
[17:46:59] <daxim> don't, it uses Math::Random::ISAAC which is in userland, read http://redd.it/d5h66j#f0lurrt first
[17:47:03] <Paperbot> Link title(s): [ How do you generate a string of cryptographically adequate random octets? I usually use the Crypt... <https://www.reddit.com/comments/d5h66j> ]
[17:47:29] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 246 seconds)
[17:47:59] *** Joins: pj (~pj@ghettoforge/pj)
[17:48:12] *** Quits: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net) (Quit: ERC (IRC client for Emacs 27.2))
[17:51:29] <phryk> daxim: oh cool, i was wondering about whether Math::Random::Secure would use the proper entropy sources from the OS. :3
[17:52:08] <daxim> I looked at the source code
[17:52:45] *** Joins: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net)
[17:54:45] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[18:02:28] <phryk> daxim: So, how do I properly go from bytes to a clamped unsigned/positive-or-zero int?
[18:02:50] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[18:07:22] *** Quits: aspic (~shifty~~~@ppp121-44-124-106.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[18:10:38] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:12:12] *** Joins: gast0n (~g4570n@user/gast0n)
[18:12:59] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[18:18:47] *** Joins: YaoNai (~YaoNai@user/yaonai)
[18:20:50] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[18:21:49] <daxim> https://stackoverflow.com/questions/57573343/how-to-generate-a-good-seed/57574051#comment101614250_57574051
[18:21:49] <Paperbot> Link title(s): [ perl - How to generate a good seed - Stack Overflow ]
[18:24:01] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[18:26:19] * GumbyPAN CPAN Upload: Locale-Utils-Autotranslator-1.015 by STEFFENW https://metacpan.org/release/STEFFENW/Locale-Utils-Autotranslator-1.015
[18:27:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:29:24] *** Joins: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[18:29:29] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Ping timeout: 264 seconds)
[18:37:21] *** Joins: thrig (~thrig@65.113.153.50)
[18:39:18] <phryk> daxim: I read that, but that just "stretches" the randomness and as 0-65k is totally usable for me (previously had 0-50k) I thought just interpreting 2 bytes as uint16 would be simpler and doesn't do any stretching. just wrote a little benchmark and it seems pretty stable without apparent biases (at least the average is always pretty close to 65535/2)
[18:40:06] <phryk> this way, i don't have any… transcoding artefacts, for lack of a better term.^^
[18:41:37] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[18:44:29] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 252 seconds)
[18:46:12] *** Joins: WinterStar (~IceLight@user/icelight)
[18:47:35] *** gordonfish- is now known as gordonfish
[18:51:49] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[18:52:17] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Ping timeout: 264 seconds)
[18:52:18] *** Joins: anthk_ (~anthk_@92.176.105.30)
[18:55:01] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:58:34] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9/20210823155652])
[19:04:10] *** Joins: Trigon (~reuben@144.39.114.115)
[19:06:23] * GumbyPAN CPAN Upload: Const-Exporter-v1.2.1 by RRWO https://metacpan.org/release/RRWO/Const-Exporter-v1.2.1
[19:07:22] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:13:33] <The_Blode> I had a Perl question guys.
[19:13:46] <The_Blode> Did Larry Wall popularise the use of Regular expression in programming?
[19:14:33] <holyghost> C++, re libs for example
[19:15:07] <Grinnz> Math::Random::Secure uses urandom as a seed, so i'm not sure what the problem is
[19:18:52] *** Quits: ritsch_m` (~user@178.115.67.164.wireless.dyn.drei.com) (Remote host closed the connection)
[19:20:03] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Read error: Connection reset by peer)
[19:22:12] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:23:25] <rindolf> The_Blode: he may have; also see https://dwheeler.com/innovation/innovation.html
[19:23:25] <Paperbot> Link title(s): [ The Most Important Software Innovations ]
[19:34:52] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:35:10] *** Joins: tejr (~tejr@user/tejr)
[19:42:04] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 252 seconds)
[19:50:32] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:52:15] *** Joins: maroloccio (~marolocci@93-136-18-134.adsl.net.t-com.hr)
[19:52:16] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[19:54:34] *** Quits: rindolf (~shlomif@87.68.240.100.adsl.012.net.il) (Ping timeout: 260 seconds)
[19:54:46] *** Joins: anthk_ (~anthk_@92.176.105.30)
[19:56:55] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:57:25] <phryk> When trying to unpack random bytes with unpack('A'…), I frequently get stuff like \311 what is that? I mean from reading I'd assume it's "char with a numeric value of 311" – but that's both far outside of the ASCII range *and* outside of the binary range of a single byte…
[19:59:46] <revhippie> eval: [ 0311 ]
[19:59:47] <perlbot> revhippie: [201]
[20:00:06] <revhippie> (It's octal.)
[20:00:31] <thrig> looks like a valid byte to me
[20:01:24] <phryk> Aaah.
[20:02:14] *** Quits: ens__ (~ens@yoke.ch0wn.org) (Quit: leaving)
[20:02:23] <phryk> So if the value passed into the is >127, unpack will just unquestioningly return something outside the ASCII range?
[20:02:39] <phryk> s/into the/into it/
[20:04:37] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 252 seconds)
[20:06:35] <Altreus> is unpack supposed to be aware of ASCII?
[20:07:24] <revhippie> Well, the docs _do_ say that 'A' is "A text (ASCII) string, will be space padded."  I can see where that could be misleading.
[20:09:19] <Altreus> not very helpful if it doesn't say what happens to bytes >127
[20:09:43] <mst> pack/unpack are very much "you get whatever the fuck the data is"
[20:10:07] <mst> though admittedly I'm terrible at using them and usually end up crying in here any time I try
[20:11:31] *** __Manderson is now known as Manderson
[20:13:56] <choroba> People often use ASCII for the 8-bit extension of the original 7-bit ASCII
[20:14:22] <thrig> which extension?
[20:14:30] <Grinnz> unpacking non-ascii is perfectly reasonable and common
[20:15:04] <Grinnz> unpacking non-single-byte means you did something wrongly
[20:15:28] <ether> or at least very very weird and you should rethink your life choices
[20:16:04] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:16:08] <choroba> thrig: any :)
[20:16:33] *** Quits: tobybl_ (~tobybl@31.111.35.255) (Remote host closed the connection)
[20:18:38] <mst> ether: I keep doing that ... and then I make the same choices again because they were fun
[20:20:18] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:22:00] <Grinnz> weird or not, it would still be wrongly because unpack on a non-byte is nonsense
[20:25:02] *** Joins: troller (~p@2a02:6b8:0:40c:219c:dfe8:6962:f714)
[20:26:32] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000085 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000085
[20:27:41] *** Quits: proller (~p@2a02:6b8:0:40c:fd6a:4b23:fbdf:b896) (Ping timeout: 264 seconds)
[20:29:50] <phryk> Grinnz: unpacking non-single-byte is totally a thing tho with types that are over a byte long, 16-bit numbers and up for example…
[20:30:10] <Grinnz> those are still single bytes, just multiple of them
[20:30:23] <Grinnz> that is not the same as a single character which is too large to be a byte
[20:30:30] *** Quits: troller (~p@2a02:6b8:0:40c:219c:dfe8:6962:f714) (Ping timeout: 260 seconds)
[20:30:42] <phryk> you mean like unicode glyphs?
[20:30:56] <Grinnz> i mean like, characters which are too large to be bytes
[20:31:30] <Grinnz> perl strings are abstract ordinals, unpack interprets them as byte ordinals
[20:31:31] <phryk> okay, no idea what you're talking about then.
[20:33:25] <Grinnz> you can just have "\x{FFFF}" in a string, it doesn't mean anything until you try to use it as something
[20:33:43] *** Joins: mixfix41 (~homefame@user/mixfix41)
[20:36:11] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 246 seconds)
[20:43:30] *** Joins: troller (~p@2a02:6b8:0:40c:d591:ad1c:199a:7d6)
[20:46:01] <zgu> if i do eval $(perl -Mlocal::lib) in bash will cpanm autodetect that or do i still have to do something like cpanm -l ~/perl5/lib?
[20:47:26] <zgu> hmm it says "You don't need to set this if you already configure the shell environment variables using local::lib"
[20:47:46] <tirnanog> yes, it should.
[20:48:56] <zgu> yeah looks like it doesn't need anything else
[20:49:24] <zgu> didn't realize it was all that automated
[20:49:26] <tirnanog> also, you should double quote the $(substitution), strictly speaking. even though there's no apparent ill effect of not doing so in most cases, the intent is for the output of perl to be conveyed verbatim to eval, and the quoting will assure it.
[20:50:26] *** Joins: pj (~pj@ghettoforge/pj)
[20:50:31] <thrig> ye olde crazy posix shell autosplit+autoglob
[20:50:40] <zgu> i actually have LL_VARS=$(perl -Mlocal::lib); eval $LL_VARS
[20:50:53] <tirnanog> so, eval "$LL_VARS" (the rest is fine).
[20:51:03] <zgu> yeah that's what i figured
[20:51:43] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[20:51:53] <zgu> and the whole thing is bracketed with if [ -d ~/perl5 ] so it won't try to do weird stuff on machines that don't have it set up already
[21:05:21] *** Joins: magla (~gelignite@55d49223.access.ecotel.net)
[21:10:49] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:3d53:7013:6e81:3d2c)
[21:16:37] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000086 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000086
[21:27:47] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 252 seconds)
[21:28:18] <mst> zgu: nothing *has* to autodetect local::lib
[21:28:24] <mst> zgu: the env vars it sets just work
[21:28:29] <mst> zgu: that was the entire point of how I designed it
[21:28:57] <mst> zgu: plain 'perl Makefile.PL' in a repository or an unpacked tarball also just works - again, the entire point :D
[21:29:29] <mst> in fact the old bootstrap code (pre-cpanm-existing) deletes all cpan config entries related to this stuff, since, again, even cpan doesn't need to know - because it just works :D
[21:29:35] <zgu> yeah it seemed like that was the point of PERL_MM_OPT and PERL_MB_OPT
[21:30:03] <mst> zgu: yes. in fact, I arranged for PERL_MB_OPT to be *invented* to make local::lib work better :P
[21:30:24] <zgu> oh heh it couldn't do that before?
[21:30:36] <mst> you used to have to write a file and set MODULEBUILDRC
[21:31:21] <mst> which was actually the one thing that made a local::lib non-relocatable and this made me sad so I made them fix it for me
[21:32:08] <zgu> back in the day i would just use CPAN.pm and either try to set up some local directories by hand or resort to sudoing the install step so everything would end up in /usr/local
[21:32:46] <mst> zgu: so, I -used- to configure cpan to pass arguments to Makefile.PL and Build.PL to make this stuff work
[21:33:01] <mst> but back on freenode #perl trying to teach a newbie how to set that up was basically an exercise in horror
[21:34:07] <thrig> CPAN.pm used to install a new version of perl if you tried to update commonly installed modules
[21:34:15] <mst> so eventually I lost my temper, spent a weekend reading toolchain sources and understanding the entire thing
[21:34:20] <mst> and wrote local::lib
[21:34:38] <mst> zgu: this btw is why it's built so "once you have the eval $() in scope, everything Just Works"
[21:34:59] <mst> zgu: the goal was "be able to get a newbie set up over IRC in 20 minutes and it work first time and not confuse them later"
[21:36:07] *** Quits: diskin (~diskin@176.106.23.15) (Killed (copper.libera.chat (Nickname regained by services)))
[21:36:09] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[21:36:13] *** Joins: EGD (~egd@user/egd)
[21:36:52] <zgu> yeah i was hoping it was in fact that idiot proof
[21:38:00] <mst> note that cpanm does actually check the PERL_LOCAL_LIB_ROOT so it can be more clever - but it didn't strictly *need* to ;)
[21:38:20] <mst> cpanm is probably my favourite downstream use of local::lib and App::FatPacker
[21:38:33] <mst> (which also exists because I got angry about people on IRC claiming they couldn't use cpan ;)
[21:38:47] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[21:39:08] <thrig> corporate security departments making inane demands to "install no modules" exist
[21:40:24] <mst> thrig: right, and sometimes FatPacker or Object::Remote will let you work around that, and sometimes they won't - but I've still significantly reduced the number of cases
[21:42:04] <thrig> ... but installing "a script" that contains all the modules is A OK! yay security theatre!
[21:42:25] <mst> indeed
[21:42:48] <zgu> works around the letter, but not the spirit
[21:43:09] <mst> but if the spirit is thicker than a whale omelette, that's fine by me
[21:44:30] <mst> phryk: oh, btw, if you ever need to ship a pure perl app to another machine and don't want to need to install dependencies, FreeBSD is the only OS I'm aware of whose packages keep .packlist files installed - which means App::FatPacker can still work on things installed from ports - because the FreeBSD perl maintainer is awesome and I asked nicely
[21:46:40] * GumbyPAN CPAN Upload: Math-BigInt-FastCalc-0.5011 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-BigInt-FastCalc-0.5011
[21:46:41] <zgu> gentoo seems to leave .packlists
[21:47:07] <mst> zgu: oh, right, of course it does, because their perl stuff was maintained by our kentnl before he died
[21:47:20] * mst raises glass
[21:47:35] <El_Che> oh
[21:47:36] <zgu> oh yeah
[21:48:35] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:53:52] <The_Blode> rindolf that's interesting thank you!
[21:57:42] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:58:16] *** Joins: ugjka (~ugjka@ugjka.net)
[22:01:52] *** Joins: Moonligh1 (~Moonlight@64.253.17.178)
[22:04:03] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:04:22] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[22:05:40] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 252 seconds)
[22:05:44] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 252 seconds)
[22:08:42] *** Joins: horsepatat (~horsepata@212.3.196.127)
[22:09:31] *** Joins: anthk_ (~anthk_@92.176.105.30)
[22:14:13] *** Quits: horsepatat (~horsepata@212.3.196.127) (Ping timeout: 268 seconds)
[22:14:37] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:17:50] *** Quits: ufobat_ (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[22:24:53] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[22:30:57] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:31:02] *** Quits: X-Scale (~ARM@83.223.240.141) (Ping timeout: 252 seconds)
[22:32:05] *** X-Scale` is now known as X-Scale
[22:32:14] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[22:34:16] *** Joins: ritsch_master (~user@178.115.67.164.wireless.dyn.drei.com)
[22:43:56] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:51:00] *** Joins: Harzilein (harzi@user/harzilein)
[22:51:02] <Harzilein> hi
[22:51:41] <Harzilein> currently unable to figure out why the additional newline is here:
[22:51:42] <Harzilein> printf 'foo\n\nbar\n' | perl -Mnew=JSON -E 'say $O->encode([do { my @blah = split(/^$/m,do {local $/ = undef ; <>}); chomp(@blah); @blah }])'
[22:51:43] <Harzilein> ["foo","\nbar"]
[22:51:59] <huf> whyyyyy do distros delete .packlists?
[22:52:10] <huf> we've got enormous dicks^Wdisks now
[22:52:13] <huf> it's so weird
[22:52:49] <LeoNerd> eval: [ split m/^$/, "foo\nbar\n\nsplot" ]
[22:52:50] <perlbot> LeoNerd: ["foo\nbar\n\nsplot"]
[22:52:54] *** Quits: Moonligh1 (~Moonlight@64.253.17.178) (Ping timeout: 265 seconds)
[22:52:58] <LeoNerd> eval: [ split m/^$/m, "foo\nbar\n\nsplot" ]
[22:53:00] <perlbot> LeoNerd: ["foo\nbar\n","\nsplot"]
[22:53:08] <LeoNerd> ^-- because that. Did oy
[22:53:12] *** Joins: semeion (~semeion@user/semeion)
[22:53:14] <LeoNerd> *Did you perhaps want to split on \n ?
[22:53:35] <Harzilein> no, i wanted to split on an empty line
[22:53:45] <huf> \n\n then?
[22:53:55] <Harzilein> i.e. "paragraph split" (or a poor person's version of it)
[22:54:29] <Harzilein> ooh
[22:54:42] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (Ping timeout: 268 seconds)
[22:54:51] <Harzilein> yeah, i should indeed _additionally_ split on newlines
[22:54:56] <mst> Harzilein: oh *my* that's not a use of new.pm I'd ever considered :D
[22:55:18] <Harzilein> mst :)
[22:55:41] <mst> Harzilein: I mean, *neat*, except you meant to do new=JSON::MaybeXS
[22:55:47] <Harzilein> heh
[22:55:51] *** Quits: pizdets (~pizdets@183.182.115.255) (Quit: pizdets)
[22:55:55] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[22:56:01] <huf> I dont understand where you want to split
[22:56:15] <huf> what do you want "foo\n\nbar\n" to become?
[22:57:29] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:57:49] <Harzilein> i want "foo\nbaz\n\nbar\nquux\n" to become ["foo\nbaz","bar\nquux"]
[22:58:12] <mst> split /\n\n/, $thing
[22:58:16] <mst> would surely handle that?
[22:58:31] <Grinnz> huf: because they are binary packages with an rpmdb and excluding them from things tthat look at packlists like cpanm --uninstall is a feature
[22:58:32] *** Joins: pizdets (~pizdets@183.182.115.255)
[22:59:01] <Harzilein> not sure why i insist on using /^$/m
[22:59:02] <Harzilein> :/
[22:59:23] <Grinnz> split /^/
[22:59:35] <mst> eval: [ split /\n\n/, "foo\nbaz\n\nbar\nquux\n" ]
[22:59:36] <perlbot> mst: ["foo\nbaz","bar\nquux\n"]
[22:59:36] <Grinnz> oh, paragraph splitting?
[22:59:40] *** Quits: bmeneg (~bmeneg@131.100.62.247) (Ping timeout: 265 seconds)
[22:59:41] <LeoNerd> If you split on zerowidth assertions, you won't delete characters from the string
[22:59:43] <mst> seems to work?
[22:59:49] <LeoNerd> I.e.  join "", @result  will give you your original value
[22:59:56] <LeoNerd> Whereas, if you split on \n you will lose them
[23:00:25] <Grinnz> /\n\n/ is the least confusing option yes
[23:00:57] <Grinnz> otherwise unlike line splitting you have to decide whether you want one or zero \n left intact
[23:05:47] <Harzilein> hm
[23:05:52] <Grinnz> and what to do if there's a single trailing newline, and whether to consider a single leading newline a paragraph, and
[23:06:34] <Grinnz> anyway i've just done split /\n\n/ and figured it out from there usually
[23:07:15] *** Quits: troller (~p@2a02:6b8:0:40c:d591:ad1c:199a:7d6) (Ping timeout: 268 seconds)
[23:08:44] <jaytee80> eval: [ split /\|/, "foo\nbaz\n\nbar\nquux\n" =~ s/\n\n/\n\|/r ]
[23:08:46] <perlbot> jaytee80: ["foo\nbaz\n","bar\nquux\n"]
[23:09:30] <jaytee80> preserves the newline at the end of the first "paragraph"
[23:09:41] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 264 seconds)
[23:09:53] <jaytee80> unless the paragraphs contain that |, then it broke things.
[23:12:49] *** Joins: rorx_ (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[23:13:24] <jaytee80> eval: [ split /YOUWOULDNEVERACTUALLYWRITETHISWOULDYOU/, "foo\nbaz\n\nbar\nquux\n" =~ s/\n\n/\nYOUWOULDNEVERACTUALLYWRITETHISWOULDYOU/r ]
[23:13:25] <perlbot> jaytee80: ["foo\nbaz\n","bar\nquux\n"]
[23:13:38] <jaytee80> That seems less likely to break things, lol.
[23:13:50] <huf> surely a lookbehind assertion instead
[23:14:02] <huf> eval: [ split /(?<=\n)\n/, "foo\nbaz\n\nbar\nquux\n" ]
[23:14:03] <perlbot> huf: ["foo\nbaz\n","bar\nquux\n"]
[23:15:12] <mst> oh, *nice*
[23:16:18] * Harzilein will note that down indeed :)
[23:16:54] <Grinnz> yeah, that was one of the options i was referring to
[23:17:29] <mst> Harzilein: note I mostly use new.pm for quick tests of classes I'm half-way through implementing before I turn the results into a t/ file
[23:17:42] <mst> Harzilein: but your use is creative and mstcat approves of this :D
[23:17:57] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:20:20] *** rorx_ is now known as rorx
[23:20:36] <jaytee80> I didn't expect to learn that today. I like it.
[23:25:50] <mst> Harzilein: oh, also: you could write '-Mnew=JSON::MaybeXS,\$J' and have a $J instead of a $O
[23:25:54] *** Quits: ritsch_master (~user@178.115.67.164.wireless.dyn.drei.com) (Remote host closed the connection)
[23:26:11] <Harzilein> mst: yeah, forgot the syntax but it'd be indeed more sensible
[23:26:41] <mst> Harzilein: eh, it's a one-liner, just using $O is totally fine
[23:26:48] *** Joins: ritsch_master (~user@178.115.67.164.wireless.dyn.drei.com)
[23:26:49] <mst> Harzilein: just wanted to mention that new.pm feature exists
[23:27:07] <Harzilein> yeah, i knew that the name can be changed
[23:28:07] <Harzilein> ah, headed into the docs and a non-command-line example exists
[23:28:09] <mst> Harzilein: fair enough. I was really pleased with that feature so wanted to make sure :D
[23:28:30] <Harzilein> that's great, next time i'll be able to figure it out from that knowledge
[23:28:42] * mst grins
[23:28:55] <mst> I love my tiny single-purpose modules
[23:29:12] <mst> Safe::Isa, Object::Tap, Async::Methods, new, ...
[23:29:20] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[23:30:19] *** Joins: travaldo (~travaldo@159.203.88.148)
[23:30:23] <Harzilein> that Devel::Wherefore thing you decided to bang out after i asked for it...
[23:30:56] <mst> oh hah yes that's handy sometimes too :D
[23:31:16] <mst> "where the fuck did these imports come from" is nice to have as a solved problem :D
[23:32:26] *** Joins: semeion (~semeion@user/semeion)
[23:35:09] *** Quits: pizdets (~pizdets@183.182.115.255) (Quit: pizdets)
[23:35:48] *** Joins: pizdets (~pizdets@183.182.115.255)
[23:37:29] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:37:55] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:41:11] *** Joins: bmeneg (~bmeneg@131.100.62.238)
[23:43:51] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[23:47:27] *** Quits: ritsch_master (~user@178.115.67.164.wireless.dyn.drei.com) (Remote host closed the connection)
[23:56:35] *** Joins: proller (~p@80.240.216.69)
[23:56:54] * GumbyPAN CPAN Upload: GraphQL-Plugin-Convert-OpenAPI-0.22 by ETJ https://metacpan.org/release/ETJ/GraphQL-Plugin-Convert-OpenAPI-0.22
