[00:00:00] <Raziel> {} struct S {const static map<int, int> muhMap = { {1, 2} }; };
[00:00:00] <geordi> error: in-class initialization of static data member 'const map<int, int> S::muhMap' of non-literal type
[00:00:05] <rpav> ville: because there aren't literals for such apparently
[00:00:09] <Raziel> {} struct S {inline const static map<int, int> muhMap = { {1, 2} }; };
[00:00:10] <geordi>  
[00:00:20] <rpav> or whatever that error plays out to refer to
[00:00:39] <ville> whether you can stick an initializer on the declaration is a different matter
[00:00:56] <rpav> no, sticking an initializer on there is the point of the discussion
[00:01:33] <rpav> like obviously you can _have_ a data member as such, but you can't use it instead of static-inline, so it's not a possible workaround for whatever the code bloat issue is
[00:01:55] <Raziel> wnbeser, are you "using namespace std"? surely not
[00:01:59] <Raziel> >_>
[00:02:18] <wnbeser> No. I know that would blow everything up.
[00:02:27] <Raziel> {} struct S {constexpr static map<int, int> muhMap = { {1, 2} }; };
[00:02:27] <geordi> error: the type 'const map<int, int>' of 'constexpr' variable 'S::muhMap' is not literal
[00:02:32] <Raziel> :(
[00:02:42] <rpav> map isn't constexpr anyway is it .. at least til like, 20? 23?
[00:02:52] <ville> rpav: you specifically asked something else however
[00:02:55] <Raziel> it's not, no
[00:02:58] <rpav> ville: context :p
[00:03:04] <Raziel> maybe in 23? dun think it is in 20
[00:03:22] <rpav> dunno .. i think in 23 one of the things is more compile-time allocation? but i'm not sure
[00:03:41] <ville> http://coliru.stacked-crooked.com/a/779ecb49021be8cc
[00:04:15] <Raziel> ville, but the whole point is to not have to do that
[00:04:46] <ville> well you "have" to define non-inline statics anyways
[00:05:07] <Raziel> ...oooor you can make them inline? :p
[00:05:11] <ville> struct aa { static int const x = 0; }; is not a definition
[00:05:17] <ville> Raziel: which makes it a definition
[00:05:26] <Raziel> ...yes
[00:05:53] <wnbeser> I guess the standard just allows the implementation to trample over my names even from its own #include dependencies, while completely ignoring the namespace feature. C++ has all this complexity and the features it promises don't even work. Whatever.
[00:06:01] <rpav> how is that not a definition
[00:06:33] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:06:59] <Raziel> wnbeser, I also have a different lerp somewhere and I've not had that issue
[00:07:04] <rpav> wnbeser: you mean "i don't understand how these things work, and i got some errors;" the proper question is "why and how do i avoid them?"
[00:07:09] <ville> rpav: it's a declaration with an initializer
[00:07:36] *** Joins: proller (~p@2a02:6b8:b081:12::1:3a)
[00:07:46] <Raziel> so :thonk:
[00:08:00] <rpav> wnbeser: do you have a test case?
[00:08:11] *** Joins: vin (~vin@user/crash)
[00:08:34] <ville> http://coliru.stacked-crooked.com/a/cfa375fc4e55e963
[00:08:51] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[00:09:09] <ville> http://coliru.stacked-crooked.com/a/7cea9fc4e32216cc that's better paste
[00:09:51] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[00:10:12] <rpav> this does in fact appear to be the case
[00:10:35] <Raziel> wnbeser, I'd do a find all for "using namespace"
[00:10:41] *** Joins: johnny (~johnny@user/johnny)
[00:10:56] <Raziel> because the hidden using is the deadliest
[00:11:09] <wnbeser> rpav: I
[00:11:11] <rpav> i'm not sure i've ever used static-const-initializer forms like that
[00:11:26] <rpav> these days it's all constexpr or static inline
[00:11:41] <wnbeser> I'm trying to find the bug it is probably related to one C library #including C-version of math.h which has using std::lerp
[00:11:55] <rpav> since when is there even std::lerp
[00:12:01] <wnbeser> c++20
[00:12:01] <Raziel> since C++20
[00:12:03] *** Quits: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de) ()
[00:12:17] <rpav> also why would you be using namespace std
[00:12:28] <wnbeser> I don't ever do that. That's dumb
[00:12:34] <Raziel> I dun believe there should be a lerp in cmath
[00:12:43] <rpav> well math.h afaik has no lerp()
[00:13:10] <Raziel> wnbeser, you still wanna do a search everywhere for using namespace, because maybe something you didn't write has it and is polluting your shit
[00:13:30] <rpav> std is about 30 years late to the party
[00:13:56] <rpav> wnbeser: well if you can come up with a test case, you can either demonstrate or isolate the problem
[00:14:00] <rpav> don't guess around
[00:14:08] <ville> wnbeser: math.h wouldn't have a namespace of any sort. it's a c header
[00:14:34] <Raziel> that too
[00:14:37] <Raziel> C stuff is not std::
[00:14:59] *** Joins: artok (~azo@mobile-access-bceea1-211.dhcp.inet.fi)
[00:15:04] <Raziel> it's all global namespace stuff
[00:15:10] <rpav> the global namespace is still a namesapce
[00:15:14] <Raziel> or, no namespace, depending on your point of view :p
[00:15:41] <Raziel> rpav, does "no namespace" actually exist in C++?
[00:15:45] <Raziel> or is it just global namespace
[00:16:15] <rpav> i don't think so but i think there are some weird things surrounding global
[00:16:39] <LordKalma> do you know who does namespaces the best?
[00:16:41] <LordKalma> matlab
[00:16:45] <LordKalma> get a new buttload of functions?
[00:16:51] <LordKalma> JUST DUMP THEM
[00:16:54] <LordKalma> fuck matlab
[00:16:59] <Raziel> lol
[00:17:56] <rpav> dunno i like the JS approach where you're not hardcoded into anything
[00:18:27] <johnny> like what? beyond the anemic std lib?
[00:18:28] <rpav> `const mod = import('SomeLongModule')`
[00:18:32] <johnny> ah yes imports
[00:18:37] <johnny> so tha'd aply to python as well then
[00:18:40] <LordKalma> import numpy as np
[00:18:53] <johnny> i wish C++ modules had that
[00:18:55] <rpav> python's is terrible, because python does everything the worst possible way
[00:18:57] <Raziel> C++ should just extend using to do that too
[00:19:03] <rpav> like you sortof get that .. except it's all fs-based
[00:19:05] <johnny> hmm?
[00:19:15] <johnny> you can rewrite the module loader tho if you wanted to
[00:19:18] <johnny> it's not hard
[00:19:19] <LordKalma> yes
[00:19:30] <Raziel> rpav, finally, someone that can back me up when I say python sucks
[00:19:30] <rpav> yes let's _rewrite teh module loader_ because the default is shit ;)
[00:19:31] <Raziel> :p
[00:19:37] <johnny> i prefer js to python myself, but i the feature is the same
[00:19:37] <LordKalma> IO usually jusdt write import <cfrap> in the __init__.py to change the namespacing
[00:19:40] <rpav> Raziel: it's not the worst, but it is shit
[00:19:55] <johnny> well typescript really
[00:19:57] <Raziel> oh, no, definitely not the worst.
[00:20:12] <LordKalma> for example let's think a python module named foo with a folder like foo/__init__.py and foo/foo.py
[00:20:13] <johnny> python is still better than C++ tho
[00:20:18] <rpav> that said my standards are pretty low and i will write python with mostly mild grumbling
[00:20:24] <LordKalma> it would be really dumb to need to import foo.foo
[00:20:26] <wnbeser> rpav: I figured out the problem. libstdc++ has this habbit of declaring many (all ?) of the names in its C-headers with using std::<func_name>. Even though I'm using the c++ standard headers (like <cmath>) one library I use #includes <math.h> in its own header. I bashed c++ wrong.
[00:20:33] <Raziel> johnny, aw shiet now you've done it
[00:20:37] <Raziel> lemme go get popcorn
[00:20:37] <LordKalma> so you can edit the usually empty __init__.py to say "from .foo import *"
[00:20:41] <rpav> johnny: ðŸ¤£ ðŸ‡³ðŸ‡´
[00:20:43] <LordKalma> and you remove the double namespacing
[00:21:08] <ville> wnbeser: yes cmath is a different-ish thing from math.h
[00:21:19] <johnny> Raziel, i'm of course referring to ergonomics though. clearly one can't use python whne you really need what C++ does
[00:21:31] <rpav> wnbeser: "its C headers" .. you're not supposed to #include <math.h> ;) .. what ville said
[00:21:33] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[00:21:45] <rpav> C headers are not C++ headers though many of them are sortof compatible
[00:21:46] <johnny> wnbeser, that's not a habit, that's the way it's supposed to be :)
[00:22:15] <johnny> if you want ceil use <math.h> if you want std:ceil use <cmath.h>
[00:22:16] <rpav> also Houdini has what's probably the nicest python API ever
[00:22:17] <Raziel> wnbeser, have you considered not using libstdc++?
[00:22:23] <Raziel> :p
[00:22:23] <LordKalma> if your stdlib imports have a .h you're doing somthing wrong
[00:22:30] <LordKalma> rpav, what's that?
[00:22:33] <johnny> err i meant <cmath>
[00:22:45] <rpav> LordKalma: well if your cmath imports math.h, it's not wrong, it's just set up to work that way i think
[00:23:05] <johnny> ah ok.. if that's what it menat,i missed then.. then ecuse me
[00:23:05] <rpav> like `namespace std { #include <math.h> }` might be legit, but that doesn't make it generally legit
[00:23:17] <ville> wnbeser: ...but out of hysterical reasons the cmath, and other csomething headers, will spill their identifiers to the global namespace as well
[00:23:21] <LordKalma> I meant at the top level
[00:23:30] <johnny> ok..  i'm trying again to ask about silly encoding stuff again
[00:23:31] <LordKalma> compiler develops let them do whatever
[00:23:34] <rpav> LordKalma: houdini is https://www.sidefx.com/
[00:23:56] <rpav> f'n amazing nondestructive/procedural modeling with a lot of cool physics and simulation stuff
[00:24:17] <johnny> i simply want to encode and decode shift-jis to utf-8.  i'd prefer not to require icu just for that
[00:24:52] <johnny> i've found a tbl based solution although it only works for one way, when i need 2 way, and i don't trust myself to implement the other side
[00:25:17] <ville> https://developers.redhat.com/blog/2016/02/29/why-cstdlib-is-more-complicated-than-you-might-think here's an article that may explain how we got here
[00:25:20] <rpav> that kind of thing is probably when you ought to go all-out with icu
[00:25:42] <rpav> like you can hack it, but probably not something you want to half-ass if you really need it, and it's complicated stuff ;(
[00:25:54] <johnny> icu is too huge though
[00:26:04] <rpav> icu is also probably installed on your OS because more or less everything else already uses it, and there are decent wrappers
[00:26:07] <Raziel> tfw cuda sdk added support for windoze 11 but not vs2022
[00:26:17] <Raziel> my disappointment is immeasurable and my day ruined
[00:26:18] <johnny> icu is installed in windows?
[00:26:22] <rpav> (even windows, i think we found)
[00:26:33] <johnny> qt seems to still optionally bundle it??
[00:26:37] <rpav> but i mean at the point of windows, a few extra MB is not going to break the bank :p
[00:26:55] <rpav> https://docs.microsoft.com/en-us/windows/win32/intl/international-components-for-unicode--icu-
[00:26:55] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:27:02] <johnny> i think iconv would b smaller, if i could build it
[00:27:07] <rpav> "In Windows 10 Creators Update, ICU was integrated into Windows, making the C APIs and data publicly accessible"
[00:27:15] <johnny> oh wow.. i had no idea
[00:27:29] <johnny> although that doesnt't help the last case of emscripten that i wanna play with
[00:27:49] <rpav> if you're doing browser-based shit, isn't that already sortof builtin
[00:27:57] <johnny> only if you're writing the whole thing in js
[00:28:06] <johnny> i think anyways
[00:28:07] <rpav> right but emscripten stuff can _call_ JS
[00:28:32] <johnny> well let me do some research, but telling me that icu is in windows is a big help
[00:28:41] <johnny> another alternative is iconv tho iirc
[00:28:45] <rpav> good luck!
[00:28:55] <rpav> iconv maybe but i'm not sure how portable/easy/etc that is, and/or it's GPL
[00:28:57] <johnny> i coudln't even imagine that being the case
[00:29:06] <johnny> GPL doesn't matter here. but it isn't iirc
[00:29:22] <johnny> some folks have done builds on windows, so i know it can be portable
[00:29:23] <rpav> ah libiconv is LGPL
[00:29:39] <johnny> no worseof a situation than needing Qt (unless you pay)
[00:29:44] <rpav> yeah
[00:29:56] <rpav> though i mean if qt can just use icu itself then
[00:29:59] <johnny> sure
[00:30:07] <rpav> you're already using a billion GB of qt, what's a few more ;)
[00:30:33] <johnny> i read the qt faq about bundling icu, and it said you could for more features basically. it did not say because windows already bundles it
[00:30:40] <johnny> the creators update was uhmm.. when? it's been awhile
[00:30:47] <rpav> qt is from eons ago, they probably rely on their own version
[00:31:03] <johnny> nah, you can build qt wit ha separate icu. i know that for sure
[00:31:10] <rpav> if you're not fully qt, you could maybe use the platform one, otherwise i mean, are you actually bundling qt or just depending on it?
[00:31:11] <johnny> distros wouldnt hang with the inability not to
[00:31:53] <johnny> sorry, i was ambiguous. i'm in the process of removing Qt, so what i really meant was it's no worse than the situation i was already in license wise
[00:31:59] <rpav> ah
[00:32:47] <johnny> the only qt that was being used in the codebase was the text conversion, qstring, qbytearray, and qsettings really
[00:32:51] <johnny> so it wasn't worth keeping qt just for those
[00:33:34] <johnny> and even if i was using qt,i'd prefer it not infect the library with qtisms and rather keep it to the edges of the application
[00:33:48] <rpav> definitely
[00:34:00] <rpav> std::gui when
[00:34:01] * rpav runs
[00:34:05] <johnny> lol
[00:34:22] <lumberluch0> remind me, you wanted to do utf8â†’sjis conversion or sjisâ†’utf8 conversion?
[00:34:26] <LordKalma> did anybody say Qt?
[00:34:27] <johnny> both
[00:34:40] <johnny> LordKalma, you heard NOTHING
[00:35:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:40:59] <lumberluch0> how about ztd? I think their primer even uses SJIS as an example
[00:43:21] *** Joins: markong (~kvirc@213.146.188.203)
[00:46:35] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[00:46:47] <cart_man> Is there some way to clear the Terminal using std::cout << ?
[00:46:56] <cart_man> I mean using "std::cout"  ?
[00:47:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:47:25] <johnny> lumberluch0, ztd.text. i was definitely considering that. i wish it was built in more, but that was on top of my list
[00:47:26] *** Quits: artok (~azo@mobile-access-bceea1-211.dhcp.inet.fi) (Quit: aaa)
[00:47:36] <johnny> outside of libraries that already exist i mean
[00:49:16] <lumberluch0> define "clear the terminal"
[00:49:39] <lumberluch0> I don't know of any practical way via cout only that is not just printing like, 44 newlines in a row
[00:49:59] <lumberluch0> (which I *think* is exactly what GUI terminals in Linux do?)
[00:51:19] <kalven> no, they'd send the vt sequence for clearing the screen
[00:53:42] <rpav> a terminal clears itself however it does; how _you_ clear it is by sending the appropriate control code
[00:55:28] <RandomReader> (because ultimately, posix-like command interfaces are based on conventions from the 1930s)
[00:55:49] <RandomReader> (congratulations, your terminal is almost 100 years old)
[01:00:04] <Raziel> let's make our own terminal, with blackjack, and full hardware acceleration, and DMA
[01:01:17] <johnny> man some dude did this really cool experiment , but too bad it died
[01:01:19] <kalven> what about the hookers?
[01:01:51] <johnny> https://github.com/withoutboats/notty
[01:02:34] *** Quits: wnbeser (~wnbeser@91-154-216-7.elisa-laajakaista.fi) (Quit: Leaving)
[01:03:33] <LordKalma> cart_man, https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
[01:03:38] <LordKalma> somewhere in that list
[01:03:44] <LordKalma> ESC[J 	clears the screen
[01:03:54] <LordKalma> ESC[2J 	clears entire screen
[01:03:58] <LordKalma> not sure the difference
[01:08:01] <johnny> there's a difference between reset and clear commands
[01:08:47] <johnny> i dun know the control codes, but if i type clear it leaves the leaves the scrollbars in my gui terminal, but reset clears that too as if it was a totally fresh terminal
[01:08:54] <johnny> i wonder ifthat's the difference?
[01:09:23] <johnny> i almost always use reset over clear
[01:14:16] <LordKalma> idk
[01:14:18] <LordKalma> I use windows
[01:18:36] <kalven> clear (at least here) just sends the code to put the cursor at 0,0 and then clears the screen. reset resets a bunch of flags back to their default states - useful if your terminal has gotten into a weird state
[01:21:45] <johnny> i've used reset for 2 purposes.. after accidentally catting a binary, or when i want the scrollbars gone :)
[01:27:02] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[01:36:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:36:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:36:58] *** ChanServ sets mode: +v npaperbot
[01:39:27] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[01:40:42] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[01:40:42] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[01:46:20] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[01:46:39] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[01:49:50] *** Quits: proller (~p@2a02:6b8:b081:12::1:3a) (Ping timeout: 260 seconds)
[01:50:55] *** Quits: urdh (~urdh@user/urdh) (Quit: Boom!)
[01:53:52] <johnny> i was looking to see what the status of contains() for strings in compilers and saw this
[01:54:13] *** Joins: urdh (~urdh@user/urdh)
[01:54:19] <johnny> in response to a suggestion to use a specific algorithm in a user implemented function: "The signs of the times. In the old days someone would have offered a function bool contains(const std::string& haystack, const std::string& needle). Nowadays, they offer a set of puzzle pieces named after some obscure authors of obscure papers to make it look more like computer science..."
[01:54:54] <johnny> i laughed a little
[01:57:49] <kalven> what are they refering to?
[01:58:15] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:59:40] <cbreak> what's haystack and needle got to do with contains?
[02:00:08] <ville> "looking for a needle in a haystack"
[02:00:10] <johnny> haystick is the string, needle is what you're searching for?
[02:00:33] <johnny> kalven, it was referring to td::boyer_moore_searcher() in an implementation of contains
[02:00:54] <johnny> std:: not td::
[02:01:20] <cbreak> string.find(xxx) != std::string::npos
[02:01:38] <johnny> it says "If the size of strings is relatively big (hundreds of bytes or more) and c++17 is available, you might want to use Boyer-Moore-Horspool searcher (example from cppreference.com):"
[02:02:14] <johnny> yeah i know you can just use .find() and it'll work
[02:03:20] <johnny> i could not judge the performance characteristics of that algorithm myself. i just thought it was funny and true
[02:03:40] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:04:10] <johnny> give me a name that implies good_for_longer_data, good_for_shorter_data or whatever.. not  boyer_moore
[02:04:45] <cbreak> isn't it descriptive enough?
[02:04:47] <lumberluch0> haystack.append(needle); return true;
[02:05:11] <cbreak> just burn the haystack and use a magnet on the ashes.
[02:05:16] <kalven> but why.. it's an obscure part of the library meant for niche uses. using the name of the algorithm seems more appropriate
[02:05:53] <johnny> well i'd hope that the standard find would try to choose the appropriate algo for the size really i guess (where feasible)
[02:06:16] <cart_man> LordKalma: Thansk for the link
[02:07:44] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[02:08:39] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[02:11:45] <RandomReader> those algorithms set up state for multiple searches with the same needle
[02:12:16] <RandomReader> they're not ones you can reasonably choose dynamically, since you'd need to know all the search targets simultaneously and that's not the interface
[02:12:35] <RandomReader> all the haystacks*
[02:13:14] <RandomReader> (it *is* funny, but not really a direct comparison)
[02:15:39] *** Joins: Skyfire (~pyon@user/pyon)
[02:16:11] <RandomReader> I actually find the C++ interface kind neat, last time I was doing anything like this it meant implementing the algorithm myself in C, and it was less elegant
[02:16:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:16:19] <RandomReader> I mean I'd still wrap it 'cause iterators, but even then
[02:18:42] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[02:18:48] <alex88> Hi everyone, I was trying to debug why in the WriteSummary function props->filename is empty, so I've tried to output its contents right before the only place where we call this function and right inside the function, and it seems that the value is cleared somehow.. it's the only place we call the function so I don't think anything is happening in between, how can I debug this?
[02:18:49] <alex88> https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567
[02:19:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[02:20:37] <RandomReader> a few options .. you could step through with a debugger to view the flow in realtime .. confirm that everything is in fact being (re)built correctly, part of it isn't stale or using the wrong definition of proportions
[02:20:51] <lumberluch0> what type is proportions::filename?
[02:21:14] <RandomReader> build with sanitizers, e.g. asan, to see if there's a lifetime issue (possibly not even directly related to this, just showing up here)
[02:21:20] <lumberluch0> if it's class type maybe there's a hidden operator call at work that's clearing it
[02:22:29] <alex88> I'll try gdb, one sec... lumberluch0 it's char filename[256];
[02:23:21] *** Joins: proller (~p@80.240.216.69)
[02:25:14] <alex88> added gdb output https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567#file-gdbout
[02:26:47] <RandomReader> is this project C or C++?
[02:26:49] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:26:58] <RandomReader> (this is important if they're being mixed, since the languages have different rules)
[02:27:10] <alex88> RandomReader, it's mixed :/
[02:27:25] *** Quits: emerent (~quassel@p200300cd57485500ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:27:32] *** Joins: emerent_ (~quassel@p200300cd5748559aba27ebfffed28a59.dip0.t-ipconnect.de)
[02:27:32] *** emerent_ is now known as emerent
[02:27:37] *** Joins: pull (~tcz@91.150.165.88)
[02:28:13] <alex88> I see both c and cpp, but I think it's using g++ to compile it, I just made a few changes to have it compile on linux
[02:28:48] <alex88> so that's might be why, I'll look into adding asan, maybe that will help finding out why?
[02:29:50] <RandomReader> depends on what kinds of changes you had to make and what it was designed for originally
[02:30:05] <RandomReader> typically C and C++ need to be compiled separately with specific interface boundaries between the two, and just linked together afterward
[02:30:35] <RandomReader> if that isn't done, then there's a whole pile of assumptions made about the original environment, and unless someone documented them they'll be mostly invisible
[02:30:38] <alex88> create autoconf/configure files, change some compile errors that came up (like out of bound array access which I have no idea how it compiled on windows)
[02:31:00] <alex88> RandomReader, got it, that makes the whole thing much less stable then
[02:31:21] <RandomReader> if it was on Windows it may have been the C++-ish form of msvc, so not standard C to begin with
[02:31:40] *** Joins: gggpkm (~gggpkm@60.10.23.170)
[02:31:42] <alex88> it was a vs project
[02:31:48] <alex88> (visual studio)
[02:32:26] <alex88> gues this is now the last of my problems then :)
[02:32:44] <RandomReader> anyway, back to the output you've got .. that's quite a change in gdb, I'd wonder if either the definition of proportions is somehow different between the two files, or if it's past lifetime and getting overwritten during the call
[02:34:18] <RandomReader> asan should trigger on the latter, but the former would be more of a build-related problem and I'm not actually sure if it would show anything useful
[02:34:29] <RandomReader> still might get something out of it that does lead in a direction though
[02:35:07] <alex88> I'll give it a try with asan enabled, I remember adding it to help with a panic issue I had
[02:36:59] <RandomReader> having gdb print *props on both sides might show something too
[02:37:19] <alex88> in the main file props is freed just a few lines after the call
[02:37:19] <RandomReader> either more fields changing, or the entire layout changing (which would be the definition issue)
[02:37:24] <alex88> oh ok
[02:37:27] <alex88> let me try that first
[02:37:39] *** Quits: great_taste (~great_tas@190.32.235.20) (Ping timeout: 256 seconds)
[02:38:07] <Alipha> -fsanitize=undefined,address for ubsan and asan
[02:38:47] <Alipha> Also compile with -W -Wall -pedantic if you're not, and see if any interesting warnings pop up
[02:39:58] <lumberluch0> wait, isn't -pedantic for when you specifically want the code to *not* compile?
[02:41:11] <Raziel> lumberluch0, I've made shitty old C-style code compile with -pedantic, and it only took a few years
[02:41:14] <lumberluch0> like, it complains about every little munitiÃ¦. I'm unironically surprised it doesn't complain about eg.: mixing tabs and spaces as indentation.
[02:42:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:6c57:a9e9:4b11:2ace)
[02:44:34] <Alipha> lumberluch0: the code I write produces no warnings with -W -Wall -pedantic
[02:46:55] <alex88> btw RandomReader https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567#file-changes these are the changes, dirIn and Filename are both "char filename[256]" and customernumber is an int
[02:47:23] <alex88> I'll try with the compile flags/asan suggestion, thank you
[02:48:14] <RandomReader> lumberluch0 - -pedantic is the only way to get warnings about use of gcc extensions, -pedantic-errors is my preferred one since it will actually block them .. otherwise, it's not really in "standards mode" when you compile
[02:49:15] <RandomReader> (I think C and C++ compilers refusing to disable extensions when you tell them -std=xxx is stupid and ridiculous, but they all do it...)
[02:49:48] <Raziel> and permissive-, for ms
[02:51:06] <RandomReader> alex88 - the "repeats N times" being so different makes me think the definitions may be, since IIRC gcc will print the entire array size in that form
[02:51:12] *** Quits: pull (~tcz@91.150.165.88) (Read error: Connection reset by peer)
[02:51:32] <RandomReader> wait, are they actually arrays in the struct, or are they pointers?
[02:53:01] <alex88> RandomReader, RandomReader https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567#file-types-h this is how they're defined, and PATH_MAX is 256 (there are other 150 fields in the struct)
[02:53:47] <RandomReader> hm
[02:53:54] <Raziel> error: indentation mismatch detected :^)
[02:54:20] <lumberluch0> ayyyy
[02:54:42] <alex88> Raziel, sorry :/ fixed
[02:54:56] <alex88> RandomReader, look at plat.c/h, could this be the issue?
[02:54:59] <Raziel> alex88, lol, I was just memeing
[02:55:02] <Alipha> Checking formatting is the responsibility of a linter, not a compiler :-p
[02:55:02] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:55:19] <alex88> Raziel, bothers me too :)
[02:55:23] <lumberluch0> RandomReader, I thought compilers did disable extensions when using -std=...? I mean, in GCC you have -std=cxxnumber and -std=gnuxxnumber (I think) as separate options
[02:56:17] <Alipha> 3 and 4 line snippets aren't really enough to do any debugging on, heh
[02:56:17] <lumberluch0> or are they like, separate sets of extensions? (might make sense, like how's there separate sets of warning where even the sum of all of them doesn't match -Wall)
[02:56:18] <Raziel> alex88, I would seriously considering refactoring some of that rather than just making it compile, because it's a bit oof
[02:56:40] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:57:15] <RandomReader> lumberluch0 - nope: https://godbolt.org/z/z17Kfrjcc
[02:57:29] <RandomReader> add -pedantic-errors and you'll see what's non-standard
[02:57:47] <RandomReader> gcc does that for most of its extensions .. I think there might be one that isn't even warned about, but I can't remember which
[02:58:03] <alex88> Raziel, definitely, atm I was setting up some tests to ensure results don't change between windows and linux and this is the issue I've found
[02:58:15] <Raziel> fair enuff
[02:58:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[02:59:48] <RandomReader> alex88 - having that choice made in two places is concerning, would depend on when types.h is included and what code interacts with it
[03:00:37] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 258 seconds)
[03:00:49] <RandomReader> if the order is sound then it wouldn't be the problem, but definitely warrants a close look
[03:00:54] <alex88> RandomReader, I've tried to set both to 1024, didn't help, I'm checking with gdb if the vars still have a different "repeated x times" now
[03:01:25] <RandomReader> but yeah, that was just something that caught my eye .. I would rebuilt with the sanitizers like Alipha mentioned a bit earlier, and do your same test run, see what shakes out
[03:02:35] <RandomReader> it's also been a while since I spent time with gdb, so I may be misremembering it
[03:03:17] <alex88> still different "repeats x times", I'll try to get asan working and start from there
[03:03:23] <alex88> thank you very much for helping
[03:03:42] <RandomReader> welcome
[03:03:43] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[03:08:31] <alex88> lol enough warnings/errors to fill scrollback buffer
[03:08:38] <alex88> better get a coffee first
[03:08:44] <lumberluch0> ouch
[03:08:46] <lumberluch0> enjoy!
[03:17:07] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:18:00] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[03:18:18] <alex88> asan doesn't break the compile, however I get an error that's caused by that variable being empty (another part of the code accesses an array with [filenamelength - 8] which results into a negative number because of the empty variable, and because filenamelength is now 0
[03:18:25] <alex88> I'll check all the warnings then :)
[03:19:45] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:20:04] <Raziel> asan shouldn't ever break the compile, it breaks your shit on runtime :p
[03:20:12] *** Joins: rajkosto (~rajkosto@93-86-134-26.dynamic.isp.telekom.rs)
[03:20:38] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[03:21:03] <alex88> too bad it breaks it after the issue, with a nice error message tho :)
[03:21:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a58e:ea94:dbd:df07) (Ping timeout: 245 seconds)
[03:21:38] <rajkosto> can anyone tell me what kind of mixing algo does this ? https://pastebin.com/zKZcegxC its mostly just a shift right by 1 but it also flips some MSBs of the 2 halfwords sometimes
[03:24:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:26:28] <alex88> found it!
[03:27:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c5d9:cb87:1b42:a441)
[03:27:14] <alex88> https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567#file-warning-log linux already has a PATH_MAX and because of the order it was redefined
[03:27:50] <alex88> output is still wrong, but at least props->filename is correct now
[03:36:00] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:36:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c5d9:cb87:1b42:a441) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:37:00] <RandomReader> oh cool, my reaction to gdb was at least in the right area then
[03:37:03] *** Joins: proller (~p@2a02:6b8:b081:8023::1:16)
[03:37:26] <RandomReader> 4096/1024 was what I was thinking, but I couldn't quite make the math work, so wasn't sure anway
[03:37:26] <alex88> https://gist.github.com/alex88/57168be4c71dbe6b834926888295e567#file-strcpyfail-c fails on strcpy tho
[03:38:11] <alex88> at first I thought that it was because sfile1 was "char sfile1[100]" and strcpy says "To avoid overflows, the size of the array pointed by destination shall be long enough to contain the same C string as source"
[03:38:41] <alex88> but now sizeof(props->filename) and sizeof(sfile1) matches
[03:38:52] <alex88> (4096)
[03:40:19] <RandomReader> is this is compile warning or something asan is failing on when it gets there?
[03:42:17] <RandomReader> or what's failing here? the gdb output looks fine
[03:43:22] <alex88> well shouldn't sfile1 be the same as props->filename after copy?
[03:43:44] <alex88> btw I get an asan error but somewhere else now, after this whole part
[03:45:11] <alex88> I'm just not sure why right after strcpy the two values, with same size, are not the same, sfile should just have \000 instead of \000\227\335....
[03:49:19] <Raziel> alex88, because anything past \0 doesn't matter
[03:49:26] <Raziel> so it remains as whatever random-ass values it had in memory
[03:49:51] <Raziel> well, actually, they're not random, probably because they're asan'd
[03:49:51] <alex88> oh ok, so strlen should return 13?
[03:50:23] <Raziel> {strlen("FirstTree.ssr");}
[03:50:24] <geordi>  
[03:50:32] <Raziel> {cout << strlen("FirstTree.ssr");}
[03:50:33] <geordi> 13
[03:50:42] <Raziel> yep
[03:51:25] <Raziel> {cout << strlen("FirstTree.ssr\0asdf");}
[03:51:25] <geordi> 13
[03:51:29] <Raziel> yep
[03:54:25] <Raziel> if you wanted, you could initialize/memset sfile1 to all zeroes before the copy, and then it'd be the same
[03:54:32] <Raziel> but it doesn't really matter
[03:55:02] <alex88> got it, thanks
[03:55:57] <c4017w> Is there a way to prevent re-assignment of a string, but allow modification with .clear() and +=? I used .reserve() to allocate some memory for the string, and I never want it to allocate and more (or less) memory
[03:58:22] <Raziel> c4017w, not that I know of
[03:59:19] <c4017w> I guess I could subclass it and delete copy constructors?
[04:01:24] <Raziel> or you can use this https://github.com/unterumarmung/fixed_string
[04:01:27] <Raziel> seems like it'd do the job
[04:01:56] <Raziel> although, I guess not, if you want non-const?
[04:01:57] <Raziel> hm
[04:02:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[04:04:42] <Raziel> https://github.com/boostorg/static_string
[04:04:52] <Raziel> this one then. lol
[04:05:24] <Raziel> it can be used standalone without the rest of boost, so
[04:05:31] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 245 seconds)
[04:05:38] <c4017w> Raziel, nice
[04:06:03] *** Joins: Praise (~Fat@user/praise)
[04:07:47] <c4017w> Although looks like just subclassing std::string works too. I'm not sure why, but operator= automatically stopped working, but +=, .reserve, and .clear still work https://wandbox.org/permlink/aCUxegEwZep0zqd8
[04:08:55] <Raziel> it most definitely does not
[04:08:56] <Raziel> https://wandbox.org/permlink/PDcCxtxBzaqjx1Zl
[04:09:30] <c4017w> yeah..
[04:09:46] <c4017w> I'm not too worried about exceeding the capacity, morso just making sure it's not reassigned
[04:10:50] <Raziel> well, I don't know if there's any good ways of guaranteeing that just like that
[04:20:08] <Raziel> ughhh I still see "exception thrown" out of a loaded dll even if I disable exceptions on the thing that uses the dll
[04:20:33] *** Joins: fdeer (~fdeer@178.49.152.151)
[04:23:53] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[04:24:50] <c4017w> I wonder how does C++ know that a char array can be implicitly converted to std::string, but not any other random class with a matching ctor? Is it a feature of the language?
[04:25:37] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Ping timeout: 252 seconds)
[04:27:15] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[04:27:23] <johnny> is that actually true?
[04:27:45] <RandomReader> the destination type comes first in most cases, e.g.   void func(std::string param)   is going to attempt to convert an expression to std::string when you call it
[04:28:03] <RandomReader> so there's no ambiguity about other possible types, it's going to start with std::string's constructors
[04:28:17] <c4017w> ah right
[04:28:26] *** Quits: The_Jag_ (~The_Jag@host-87-21-77-193.retail.telecomitalia.it) (Read error: Connection reset by peer)
[04:29:29] *** Joins: The_Jag (~The_Jag@host-87-21-77-193.retail.telecomitalia.it)
[04:30:03] <RandomReader> { f("abc"); }    void f(string) {}   void f(string_view) {}  // if there are multiple destination types and it can't figure it out, it will complain
[04:30:03] <geordi> error: call of overloaded 'f(const char [4])' is ambiguous
[04:30:49] <CarloWood> { char const* str = "Works for me."; f1(str); f2(str); } void f1(std::string) {} struct Foo { char const* m_s; Foo(char const* s) : m_s(s) {} void p() { cout << m_s << '\n'; } }; void f2(Foo foo) { foo.p(); }
[04:30:49] <geordi> Works for me.
[04:31:06] <CarloWood> Oh, nm = a char array
[04:31:08] *** Quits: The_Jag (~The_Jag@host-87-21-77-193.retail.telecomitalia.it) (Read error: Connection reset by peer)
[04:31:23] *** Joins: The_Jag (~The_Jag@host-87-21-77-193.retail.telecomitalia.it)
[04:32:02] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:32:16] <CarloWood> { char str[14] = "Works for me."; f1(str); f2(str); } void f1(std::string) {} struct Foo { char const* m_s; Foo(char const* s) : m_s(s) {} void p() { cout << m_s << '\n'; } }; void f2(Foo foo) { foo.p(); }
[04:32:16] <geordi> Works for me.
[04:32:21] <CarloWood> Like that then :P
[04:33:22] <hnOsmium0001> f1 and f2 are different names?
[04:33:56] <CarloWood> yes, f1 takes a std::string, and f2 takes "any other random class with a matching ctor" (Foo).
[04:34:01] <RandomReader> he's illustrating implicit conversion to Foo, so a user type getting the same ability std::string has
[04:34:53] <CarloWood> Why is it suddenly 3 AM?
[04:35:11] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:35:18] <RandomReader> you exist too far in the future, recommend moving west :D
[04:36:59] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 264 seconds)
[04:37:36] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:38:27] <johnny> what's the worst things that can happen if you depend on c++-latest/ or whatever names for gcc or clang for an executable and your environments are new enough (libc wise) and you can fix your code if they change something
[04:38:42] <johnny> does anything ever break beyond a failed compile here or there?
[04:38:48] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[04:39:06] <johnny> anything ever silently break in a bad way?
[04:39:18] <hnOsmium0001[m]> great, irccloud decides to die
[04:39:33] <Raziel> johnny, unlikely unless you use experimental
[04:39:51] <Raziel> and even then things should only break in experimental :p
[04:39:59] <hnOsmium0001[m]> CarloWood: I misunderstood you as trying to demostrate that there is no ambiguity when overloaded with std::string and Foo, sorry
[04:42:18] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[04:42:59] <fdeer> so did that lazarus guy get the answer?
[04:44:08] <Raziel> johnny, generally the worst things that can happen if you depend on newer stds or latest is that you use some fancy new feature then find it's not (yet) available somewhere else where you wanna compile
[04:44:44] <johnny> yeah that's the only thing i'm thinking about
[04:46:07] <johnny> thanks. i guess i can give it a go depending on my results of ubuntu 20's glibc..
[04:46:44] <johnny> need to find out which version of glibc is in ubuntu 20 after updates*
[04:47:09] *** Joins: ferdna (~ferdna@user/ferdna)
[04:50:42] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[04:57:41] <computerquip> There's usually some fill-in library that has much earlier compatibility. Some of the std classes from boost for example, and a lot of the boost classes have C++11 or earlier support.
[05:03:11] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:03:11] <johnny> yeah i saw boost has the contains i'm looking for, but i don't wanna bundle it, nor did i wanna figure out any dependency issues
[05:03:42] <johnny> i could write my own of course as mentioned earlier
[05:03:44] <computerquip> You wouldn't bundle it, you would statically link it... or it's likely header-based anyways.
[05:03:58] <johnny> that's assuming it's installed alredy
[05:04:26] <computerquip> If it's header-based, it's extracting a file and pointing to the include folder.
[05:04:38] <johnny> that's what i mean by bundling
[05:04:50] * computerquip sighs. 
[05:04:58] <johnny> would you prefer vendoring?
[05:06:16] <Raziel> sounds to me like one of you is talking about distributing buildable source while the other is talking about binaries
[05:06:48] <computerquip> Just use the package manager! Oh wait...
[05:07:12] <johnny> yeah it's a lot to ask t depend on boost for just a few things
[05:07:17] <johnny> and also for windows folks of course
[05:07:33] <computerquip> You could use something like bcp to extract specifically what you need to include directly in your tree.
[05:07:35] *** Quits: DSpider (~DSpider@79.115.58.23) (Quit: Leaving)
[05:07:48] <johnny> Raziel, indeed. my fault because i'm used to writing python and other similar languags where it's the same ting
[05:07:50] <computerquip> But honestly, if you're against dependencies or libraries in general, you're stuck making your own regardless.
[05:08:01] <johnny> i'm not against dependencies
[05:08:15] <johnny> i'm against unnecessary dependencies
[05:08:20] <Raziel> johnny, 's what you get for using python. booo. :p
[05:08:50] <computerquip> Define unnecessary. '
[05:08:53] <johnny> if i just need one or two functions then boost is an unecessary dependency
[05:09:06] <johnny> if i used a lot of boost, then it's a necessary one
[05:09:17] <lumberluch0> computerquip, one doesn't just extract a file from boost
[05:09:32] <Raziel> technically, one can just extract one file from boost
[05:09:35] <Raziel> depending on the specific file.
[05:09:38] <lumberluch0> last I heard, trying to extract even the simplest feature ends up in a ~40 MB "extract"
[05:09:38] <johnny> i assume that's the purpose of bcp?
[05:09:39] * computerquip sighs even harder. 
[05:11:16] <lumberluch0> depending on what stuff you need from std, it's actually cheaper to just copy an example from cppreference and adapt as needed
[05:11:24] * Raziel adds some more static deps
[05:12:08] <lumberluch0> (but be sure to copy from the article histories, not from the article themselves; the article "example implementations" tend to assume you have C++ from the Future, which defeats the point of why would you want to implement the thing in the first place)
[05:12:41] <johnny> no example would give me .contains() on std::string tho
[05:13:05] <johnny> i'd need to write the appropriate template for char types
[05:13:08] <computerquip> That specifically is enough to emulate with find.
[05:13:24] <johnny> and ten it'd be like contains(T needle, T haystick) or whatever
[05:13:44] <computerquip> It's literally `return str.find(search_str) != std::string::npos`
[05:13:52] <johnny> yes it is
[05:13:53] *** Joins: euouae (~euouae@user/euouae)
[05:13:56] <lumberluch0> johnny, honestly what I did with cxxomfort is, since you can not extend classes in C++ and basic_string is quite broken (~180 methods), I just wrote nonmember adapters, kinda like what <iterator> did
[05:14:21] <lumberluch0> that way I can be sure my versions always work, no matter what C++ standard is used
[05:14:24] <johnny> hmm?
[05:15:11] <Raziel> johnny, just use C++20 anyway. I'm using it, and look, I'm happily shitposting here all day long! 10/10
[05:15:12] <johnny> well i don't care so much about old stuff , since the primary users will almost always have windows 10 or above
[05:15:54] <lumberluch0> well, if your users are not compiling, then that's no issue yeah
[05:15:55] <johnny> and windows auto updates, so they will also always have the appropriate libraries and compilers in whichi can use c++-latest with impunity
[05:16:04] <Raziel> pretty sure you're only ruling out XP and older anyway
[05:16:14] <Raziel> and if anyone's still on XP they need their computer license revoked
[05:16:20] <lumberluch0> I think that's Vista and earlier, but who ever uses Vista
[05:16:26] *** Joins: frost (~frost@59.71.244.189)
[05:16:40] <computerquip> Does C++ version matter in regard to Windows version?
[05:16:56] <lumberluch0> Raziel, actually I've found much more use for XP than I did back in its time. It's p good for virtual machines when I'm forced to use Windows stuff for work.
[05:16:58] <johnny> that's not true lumberluch0 . because if i wanna compile with gcc11 on ubuntu for features i want from gcc11, then it won't work out of the box on ubuntu 20!
[05:17:16] <euouae> lumberluch0 XP is obsolete, shouldn't be used anywhere
[05:17:23] * computerquip sighs so hard his lungs are running out of oxygen. 
[05:17:53] <johnny> you must also install gcc11 to get the appropriate GLIBCXX-3.4.29
[05:18:36] <johnny> lumberluch0, they removed gcc11 from the github actions for that reason, since binaries compiled there wouldn't run out of the box on ubuntu 20
[05:18:45] <Raziel> computerquip, well, it matters in that the latest vc toolset that still has xp support doesn't have C++20
[05:18:47] <lumberluch0> Huh, didn't know that
[05:19:11] <computerquip> Raziel, you know, I didn't consider XP support if I'm honest.
[05:19:19] <johnny> computerquip, what are you sighing about now?
[05:19:49] <computerquip> The fact that someone still relies on XP to do anything.
[05:19:57] <lumberluch0> I seem to remember last time such a bork had happened (back for Ubuntu Precise) and I was looking, it was as simple to fix as adding a specific compile flag to make built binaries work on both sides of the divide
[05:19:59] <johnny> computerquip, i assume C++ version would matter if the underlying c++ lib wasn't available
[05:20:36] <johnny> lumberluch0, maybe that's possible here, but nobody brought it up, and if such a flag isn't default it'd have to be removed from the defualt anyways just for those who didn't add the flag
[05:20:46] <johnny> which would probably be most people
[05:21:00] <lumberluch0> True johnny . It becomes kind of a catch-22 at that point
[05:21:14] <johnny> well it always solves itself over time
[05:21:22] <lumberluch0> so I guess the better question is: do you *really* need C++20 features?
[05:21:29] <computerquip> What C++ library? As far as I know, MinGW relies on msvcrt which basically allows any version probably even XP, and VS2019 still has Windows 7 SP1 support.
[05:21:38] <johnny> well yeah.. 100%.. i was asking abou C++ 20+ earlier
[05:21:58] <johnny> computerquip, there you go.. windows 7 is the earliest you can support :)
[05:22:08] <computerquip> No.
[05:22:20] <computerquip> So help me god, this conversation is killing me physically and mentally.
[05:22:42] <johnny> well i hope you're enjoying it since you're keeping your frustration all to yourself
[05:22:54] <johnny> and just being passive aggressive about it
[05:23:08] <computerquip> There's nothing passive about it.
[05:23:20] <johnny> the passive part is not expressing what you consider is wrong
[05:23:33] <computerquip> Supporting operating systems that aren't given security updates.
[05:23:39] <computerquip> Like XP.
[05:23:47] <computerquip> or Windows 7, especially SP1.
[05:23:48] <johnny> im not concerned about doing that. and i don't think anybody else really is either
[05:24:12] <johnny> i think it was all just.. "what about that" as more of a curiosity, not an intention
[05:26:39] *** Joins: The_Jag_ (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[05:27:12] <euouae> computerquip: I'm with you :)
[05:27:21] <johnny> aobut what?
[05:27:53] <euouae> I'm sympathizing with the intolerance of XP use. Not a quip at anyone in particular though
[05:27:53] <johnny> pretty sure most people here either don't support applications on platforms without security updates unless they have no other choice
[05:28:06] <euouae> Yes... *here* :)
[05:28:17] <Raziel> computerquip, we've had issues with the comms protocol lib that we develop, because some clients use gcc 4, and others use xp, so we eventually decided to just move it forward
[05:28:28] <lumberluch0> Yeah. Also there's a difference between using XP and supporting XP.
[05:28:55] <lumberluch0> like, honestly if the stuff I needed to use ran in Wine I'd be using that instead. But it doesn't. And I can't hack Wine.
[05:29:10] <Raziel> was too painful to not be able to use the nice new features :p nevermind the issues of providing any sort of actual customer/technical support to ancient systems like that
[05:29:45] *** Quits: The_Jag (~The_Jag@host-87-21-77-193.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:29:56] <computerquip> Raziel, yeah, I've also had issues with the CentOS 6 deprecation and some of the customers aren't the first iteration of that. Some of them moved to the oracle port that had extended support.
[05:30:21] <computerquip> That compiler was like GCC4 unless you used some extra packages which were often refused.
[05:30:39] <computerquip> Or maybe even gcc3, I don't remember.
[05:30:47] <lumberluch0> I can't believe it's 2021 and "we'll move our clientbase to Oracle" is a valid solution strategy. What a times are we living.
[05:31:07] <computerquip> customers on the first iteration of that*
[05:31:29] <computerquip> (Meaning they reached EOL way before CentOS 6 itself went out of date)
[05:31:37] <Raziel> oof
[05:31:45] <lumberluch0> ...wow
[05:32:17] <computerquip> So like... I understand that sometimes you have to do dumb shit but if I don't to be or encourage people who do that dumb shit.
[05:32:43] <computerquip> I don't want to be that guy * <- auto-correct getting turned off, this is ridiculous
[05:32:50] <euouae> computerquip :)  always love it when someone sends me a zoom invite with a 12345 password
[05:33:05] <euouae> computerquip people don't understand what this signals...
[05:33:26] <euouae> so yeah being in a corp environment where XP is used is also not a good sign
[05:36:41] <johnny> it's the sign that their vendor stopped being a going concern or charges too much money
[05:36:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:36:52] <johnny> because it's usually something like medical imaging equipment
[05:36:54] <johnny> or atms or something
[05:37:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:00] *** ChanServ sets mode: +v npaperbot
[05:37:19] <johnny> i got the data i needed from ubuntu to justify bringing in gcc 11 again
[05:37:26] <lumberluch0> yeah industrial machinery general. If it's running on XP you're lucky and can sing your gratitudes that it's not running on MS-DOS
[05:37:42] <johnny> as long as it's not connected to the global internet it's "probably" fine
[05:40:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[05:40:08] <computerquip> That CentOS 6 deprecation was harsh... the exact day it EOLd, RedHat yanked all the repositories so everything that used CentOS 6 just broke lol. It was both funny to see everyone procrastinating and sad that people had years to fix their problem and chose not to despite it having moral implications.
[05:40:31] <johnny> indeed
[05:42:37] <Raziel> I have personally poked around on servers that were running XP, hosting all the location-specific customer and transaction data, while being connected to the internet. and based on the audits I did on them, they could definitely have afforded an actually decent newer server that wouldn't have to run xp.
[05:42:38] <Raziel> >_>
[05:44:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:44:42] <Raziel> but I guess a newer server and better security wouldn't make any extra money, it'd just reduce the risk of losing a shitload of money. so, eh, who cares.
[05:45:30] <euouae> yeah it makes sense to buy a lambo without insurance
[05:45:40] <euouae> this is effectively corporate strategy for security
[05:47:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:48:03] <lumberluch0> my annoyance is that corp did their diligence and moved to W8.1 (back at the time), it was their provider's supplier's manufacturer who didn't so we were stuck with three (3) (tres) XPs for manipulating the required hardware
[05:48:34] <Raziel> oof
[05:48:34] <lumberluch0> and there's not much you can do because your direct line is to your client - the corp, not the corp's provider's supplier's manufacturer
[05:48:44] <euouae> lumberluch0 should had been part of the contract and that's when you play hardball
[05:48:59] <euouae> blame corp lawyers or whoever hired those
[05:49:02] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 260 seconds)
[05:49:32] <lumberluch0> not our call because it's different departments. We do software for managing the company; other entities do the hardware, not to mention the people (employees are also issues sometimes)
[05:49:49] <euouae> Oh yeah I'm not blaming anyone in particular, it's endemic
[05:50:09] *** Joins: paule32_ (~paule32@user/paule32)
[05:50:23] <lumberluch0> we can't really put in a client's contract "you are not allowed to contract with companies that might go broke or be acquired", that is simply not enforceable
[05:51:39] *** Joins: paule32__ (~paule32@user/paule32)
[05:51:52] <lumberluch0> the silver lining is that client learned to compartimentalize, so we only have those three XPs in a network layout of ~480 machines, and so far the only confirmed ransomware case was confirmed to have originated via email.
[05:51:53] <euouae> OK I may have misunderstood lumberluch0, but rest assured, you can shield yourself from negligence of others via legalese
[05:52:56] <lumberluch0> euouae, shielding myself is not the problem. The problem is that I can't really tell a client that provides services in the X industry "you have to upgrade your hardware and software to *not* be able to provide services in the X industry"
[05:53:30] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 258 seconds)
[05:53:35] <lumberluch0> might as well put in our company description "we make our clients close shop", see how well that sells us
[05:54:32] <lumberluch0> sometimes, the world runs on technology from the 70s and the responsible thing to do is to keep it running until someone wisens up and upgrades the entire chain (on their dime) to the 2020s.
[05:55:06] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 260 seconds)
[05:55:13] <Raziel> except that only happens if a) upgrading would somehow make more money than it costs or b) everything crashed and burned already
[05:55:35] <lumberluch0> that's why whoever makes everyone else upgrade, has to make them on his/her own dime
[05:55:37] <euouae> or c) whole-of-gov approach
[05:55:39] *** Joins: paule32 (~paule32@user/paule32)
[05:57:54] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 260 seconds)
[06:05:16] *** Quits: shad0w (~shad0w@user/xshadow) (Remote host closed the connection)
[06:05:42] <johnny> it'd be nice if it was easier to browse cxxomfort docs to figure out what's for >C++20 or in C++20 but not implemented in the clang,gcc, or msvc
[06:05:54] <johnny> one or all of those
[06:06:10] <johnny> and the utilities that are useful generally
[06:08:50] *** Quits: proller (~p@2a02:6b8:b081:8023::1:16) (Ping timeout: 260 seconds)
[06:09:02] <lumberluch0> yeah I have to improve the documentation because as it turns out lots of it was obscured from doxygen by the various checks on eg.: __cplusplus macro
[06:10:00] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:10:34] <lumberluch0> But in general the only two things ATM that are >C++20 are invoke_r and ssiz_t; everything else is wrappers (such as the nonmember contains() )
[06:22:09] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:22:53] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:19c4:12e7:c3a:930)
[06:23:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6c57:a9e9:4b11:2ace) (Ping timeout: 260 seconds)
[06:25:15] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[06:26:59] <johnny> sure, but what other wrappers are there
[06:27:24] <johnny> and which are the things that are generally useful like the nominmax thing that don't apply to specific versions
[06:29:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:29:13] *** Parts: euouae (~euouae@user/euouae) ()
[06:35:57] <lumberluch0> difficult to say what is generally useful, I mean I assume all this stuff was put in C++ std in the first place for a reason
[06:36:59] <lumberluch0> but of what the library can backport it's mostly stuff like the <functional> transparent functors, or the missing <algorithm> overloads, or array_ref (the predecessor to <span>) or the nonmember stuff in <iterator> that's useful.
[06:37:14] <lumberluch0> Or at least, those are the stuff I've received support requests about.
[06:39:05] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:40:00] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Remote host closed the connection)
[06:40:18] <lumberluch0> (as I expected, no one ever cared about <random>, oh well)
[06:40:35] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[06:43:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:45:41] <johnny> hmm.. weird "fatal error: 'experimental/source_location' file not found"  where i have #include <experimental/source_location>  in clang-13 on macos
[06:45:58] <johnny> it works here with clang
[06:46:34] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:46:43] <johnny> i wonder what lib it ended up using
[06:47:22] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Read error: Connection reset by peer)
[06:47:53] <lumberluch0> did you set -stdlib=libc++? (or however that's done)
[06:51:12] <johnny> yeah.. i figured that's what it was as soon as i typed it. i'll have to see the args
[06:53:57] *** Quits: fdeer (~fdeer@178.49.152.151) (Quit: Client closed)
[06:56:14] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[06:56:40] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:57:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:00:43] *** Quits: rajkosto (~rajkosto@93-86-134-26.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:13:59] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:24:40] *** Quits: lumberluch0 (~lumbermb@191.114.121.99) (Ping timeout: 260 seconds)
[07:28:30] *** Joins: Fairy (~Fairy@2001:464a:4992:0:9c0f:e957:8bda:88f)
[07:31:34] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:8c0c:f151:d680:fa86) (Ping timeout: 252 seconds)
[07:31:57] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[07:36:36] *** Joins: great_taste (~great_tas@190.32.235.20)
[07:45:45] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[07:49:42] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[07:50:20] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[07:51:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:52:00] <smallville7123> why do i get this when using relative coordinates?    https://gist.github.com/mgood7123/5d95e7cbaa721dc49e45100f8e58cfa5
[07:55:00] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[07:57:11] <smallville7123> nvm i was adding the parent's absolute coordinates to the child's absolute coordinates
[08:03:08] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[08:07:40] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 258 seconds)
[08:26:15] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[08:30:58] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[08:36:29] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[08:37:34] *** Joins: manic_laughter (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f)
[08:42:23] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 264 seconds)
[08:45:49] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[08:46:22] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 252 seconds)
[08:48:02] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[08:48:48] *** Joins: teepee (~teepee@openscad/teepee)
[08:49:05] *** Joins: meicceli (meicceli@kapsi.fi)
[08:50:04] *** Joins: malloy (~jimery@116.30.223.211)
[08:50:11] *** Quits: manic_laughter (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f) (Ping timeout: 264 seconds)
[08:55:00] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[08:57:08] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:00:53] *** Joins: manic_laughter (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f)
[09:04:51] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[09:07:13] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[09:10:55] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[09:11:47] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:15:31] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 245 seconds)
[09:19:05] *** Joins: andreasbuhr (~quassel@p548ddff3.dip0.t-ipconnect.de)
[09:30:13] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[09:30:28] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[09:33:36] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:35:08] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[09:35:13] *** Joins: manic_laughter70 (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f)
[09:35:20] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[09:36:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:36:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:36:59] *** ChanServ sets mode: +v npaperbot
[09:36:59] *** Joins: blackbeard420_ (~blackbear@45.33.85.133)
[09:37:36] *** Quits: manic_laughter (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f) (Ping timeout: 245 seconds)
[09:37:36] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 245 seconds)
[09:37:36] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 245 seconds)
[09:37:36] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 245 seconds)
[09:37:36] *** Quits: blackbeard420 (~blackbear@2600:3c03:e000:297:af:af:af:42) (Ping timeout: 245 seconds)
[09:39:20] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[09:40:32] *** Joins: taiyu (~taiyu@user/taiyu)
[09:45:05] *** Quits: BluesBoy (~bboy@stotz2.com) (Quit: leaving)
[09:51:17] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[09:55:54] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[09:57:19] *** Joins: BluesBoy (~bboy@stotz2.com)
[10:01:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:01:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:22:30] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[10:26:05] *** Quits: gggpkm (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[10:26:11] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[10:26:31] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[10:29:53] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[10:30:45] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[10:32:09] <Raziel> I wonder, is there any lib for quick invocation & interaction of/with native file selection dialogs? yknow, just so you can "save as" and "open" files
[10:32:21] <Raziel> if anyone says qt I'll be very upset.
[10:32:54] <johnny> that wasn't enough, i'd also need to use point to the libc++ via homebrew i guess. i'll punt on that for now
[10:34:18] <RandomReader> I'd be a bit surprised if there were such a lib, since the models between systems are so different
[10:34:25] <RandomReader> it makes sense as part of a framework, not so much as standalone
[10:34:32] <Raziel> well shiet.
[10:35:55] <Raziel> but there's at least a couple for imgui. so, guess that's what's gonna happen
[10:36:06] *** Joins: ravan (~ravan@user/ravan)
[10:37:39] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[10:41:23] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 258 seconds)
[10:41:24] <ville> you should write an application that does it!
[10:42:34] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[10:42:56] <ville> and i am only half-kidding. sort of how you can launch an editor with ctrl-x ctrl-e from bash to edit a command line
[10:43:57] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[10:44:14] <ville> this appplications sole purpose would be do display a filedialog and communicate the selections back to the launching process
[10:44:33] <Raziel> ville, but why would it be an actual application vs a lib? v:
[10:44:35] <LordKalma> Raziel, I've seen a couple of those... for python
[10:44:39] <LordKalma> like basic file dialogs
[10:45:22] <LordKalma> I'm both a fan of a heavy critic of Qt as yall know.. but imgui.. just no. I look at it and.. no.
[10:45:40] <Raziel> imgui isn't really meant for user-facing UIs
[10:45:50] <LordKalma> unfortunately people do them
[10:45:56] <Raziel> and this is an internal tool, so, :p
[10:46:27] <ville> Raziel: then it's usable from any* language. well ones that can launch external processes
[10:47:01] <Raziel> ville, right, but if it's a lib, then you add a layer on top to do that as well, and you have an application version :p
[10:47:08] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[10:47:49] <LordKalma> The c++ way is to have a file-handler delegate pattern
[10:47:59] <LordKalma> that either is hardcoded, gui popup, cmd prompt
[10:48:02] <LordKalma> :D
[10:48:20] <ville> that may be the enterprise way
[10:48:37] <Raziel> LordKalma, tbh I'd take the spartan look if it means it runs well, over something that looks decent but runs like ass and uses more memory than vs2022 with resharper and the whole cuda examples solution loaded
[10:48:45] <LordKalma> what? you don't like dependency injection? :D
[10:49:26] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[10:49:33] <ville> dependency injection is too broad of a term to dismiss out of hand
[10:49:54] <LordKalma> in C# is pops up often as a services pattern
[10:50:12] <LordKalma> register your service and whatever needs that service (like opening a file)
[10:50:16] <LordKalma> just uses the registered service
[10:51:41] <ville> that is sort of what an external application serving a filedialog is anyways. it's just at different point
[10:51:45] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[10:52:59] <ville> launch it using an environment variable, similar to $EDITOR, and now you've given the user the choice of what kind of filedialog they want to use
[10:55:25] <ville> funnily enough this is something i was thinking about the other day for similar situations. giving user a nice filedialog either drags in a dependency or ~1000(?) LOC. then repeat this on every little thing that might need one
[10:55:56] <LordKalma> well
[10:56:07] <LordKalma> if you only want to support a single platform, it might be a couple lines
[10:59:46] <cbreak> a nice file dialog should be part of the OS
[10:59:52] <cbreak> at least if you have a GUI OS
[11:00:08] <LordKalma> I'm sure the windows API has direct access to dialogs
[11:01:52] *** Joins: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de)
[11:02:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d573:53b:f618:a5a1)
[11:02:50] <Haohmaru> SelectFileDialog() or some such iirc
[11:02:52] <cbreak> Qt wraps the native dialogs from MacOS
[11:03:00] <cbreak> I'm quite sure it also wraps native windows dialogs
[11:03:03] <Haohmaru> mIRC also allows me to use it
[11:03:14] <cbreak> and what ever you have on linux
[11:03:33] <Haohmaru> allegro iirc has (had?) a custom file-select dialog
[11:03:48] <LordKalma> "By default, a platform-native file dialog will be used if the platform has one. In that case, the widgets which would otherwise be used to construct the dialog will not be instantiated, so related accessors such as layout() and itemDelegate() will return null. You can set the DontUseNativeDialog option to ensure that the widget-based implementation will be used instead of the native dialog."
[11:03:51] <LordKalma> https://doc.qt.io/qt-5/qfiledialog.html
[11:05:02] <cbreak> yeah, that's what I remembered from qt4, seems it didn't change
[11:05:58] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[11:06:27] <Haohmaru> lparam, wparam, lpczstr, DWORD
[11:06:49] <Haohmaru> i don't want to see any of these ever again
[11:07:01] <LordKalma> lparam
[11:07:02] * LordKalma runs
[11:09:15] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[11:13:44] *** Joins: X-Scale` (~ARM@46.50.7.99)
[11:14:06] <johnny> oh man because it's fossil i can't download the code, and there's also no freakin search
[11:14:19] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[11:14:32] <Haohmaru> ctrl+F
[11:15:12] *** X-Scale` is now known as X-Scale
[11:16:30] <markand> johnny, what's prevent you from running fossil clone?
[11:16:49] <johnny> downloading fossil for no other reason than this one repo
[11:17:15] <markand> in contrast to git it does not have any dependency
[11:17:28] <markand> which repo btw?
[11:17:30] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:17:53] <johnny> well one could built git that way couldn't one?
[11:17:58] <johnny> idunno, never tried
[11:18:24] <johnny> i suppose one would have to pull a busybox to make the separate commands work
[11:18:29] <johnny> cxxomfort
[11:18:59] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:19:22] <johnny> everybody says just use find to see if a string contains a substring, but that wouldn't handle the different string types
[11:19:45] <johnny> i was looking for a complete implementation of std::string::contains
[11:19:47] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:20:32] <Haohmaru> different string types?
[11:20:49] <johnny> sure, string views, wsstring, whatever acts as CharT
[11:21:33] <Haohmaru> no idea about string_view, but afaik std::string doesn't have anything particular to deal with unicode
[11:21:39] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[11:22:04] <johnny> so?
[11:22:11] <Haohmaru> just saying
[11:22:29] <johnny> i don't see how it's relevant for simple string contains checks
[11:22:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:22:57] <Haohmaru> does string_view not have .find() ?
[11:23:37] <Haohmaru> {} void func() { string_view sv; sv.find(); }
[11:23:37] <geordi> error: no matching function for call to 'basic_string_view<char>::find()'
[11:23:43] <markand> https://en.cppreference.com/w/cpp/string/basic_string_view
[11:24:28] <kalven> if you don't particularly care about performance, there's std::search which works on anything with iterators
[11:24:30] <johnny> it does have find. i didn't realize that wstring was a basicstring
[11:24:47] <Haohmaru> je suis basic_string
[11:25:13] <johnny> but i'd also like to accept a string_view as well
[11:25:48] <johnny> or i could just use C++23..
[11:26:07] <Haohmaru> <delorean.jpg>
[11:28:45] <johnny> i can always go back to normal later if other folks really really want to build for older software
[11:28:51] <johnny> err for older compilers
[11:30:33] <markand> I personally don't care about old systems
[11:31:03] <markand> people sometimes complains "gaah, I can't compile your application because I have gcc 4 and cmake 3.9 on my debian"
[11:31:13] <markand> yeah sure I'll regress my code for your deprecated system
[11:31:28] <LordKalma> cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
[11:31:28] <LordKalma> done
[11:31:57] <markand> that does not stop people from complaining :P
[11:32:07] <Haohmaru> LordKalma halp, your program gives me "FATAL_ERROR"
[11:32:23] <RandomReader> you realize   haystack.contains()   is basically   haystack.find() != haystack.npos   right?
[11:32:30] <RandomReader> this is not difficult to template...
[11:32:40] <markand> "I get an error: string_view no such file or directory, your code sucks!!!11"
[11:33:29] <johnny> RandomReader, i sure, but what does it look like to work for all string types.
[11:33:42] <Haohmaru> a template
[11:34:49] <Haohmaru> template<typename T> auto bluh(const T& x) { return (x.find() != x.npos); } or something like that, i guess
[11:34:50] <johnny> i wonder if i can can just use CharT..
[11:34:57] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[11:35:08] <johnny> Haohmaru, that seems a bit broad doesn't it?
[11:35:33] <Haohmaru> yeah, it'll accept anything ;P~
[11:36:04] <Haohmaru> so don't stick your **** in it
[11:36:33] <johnny> i know how to write that :)
[11:38:25] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[11:39:31] <johnny> uggh google.. i search strings and templates for examples and everybody won't stfu about string literals
[11:39:50] <RandomReader> this is so trivial, why does it matter what it accepts?
[11:40:12] <RandomReader> it's a one-liner, so you'd spend more effort constraining it than you would ever spend reading a plain error message
[11:40:58] <RandomReader> hell even the template is more effort than you'd spend on one-liners for the string variants you actually use :P
[11:41:22] <johnny> because i thinks i'ts valuable to know what it'd look like
[11:41:31] <johnny> i doubt this is the last time i'll be doing it
[11:42:55] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:43:10] *** Quits: frost (~frost@59.71.244.189) (Changing host)
[11:43:10] *** Joins: frost (~frost@user/frost)
[11:43:49] <RandomReader> then it'd look like a mirror of the signatures here: https://en.cppreference.com/w/cpp/string/basic_string/contains
[11:44:36] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:44:52] *** Joins: frost (~frost@user/frost)
[11:46:31] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:46:43] <RandomReader> template <typename CharT, Traits, Allocator> bool my_contains(const std::basic_string<CharT, Traits, Allocator>& haystack, std::basic_string_view<CharT, Traits> sv) { return haystack.find(sv.data(), 0, sv.size()) != haystack.npos; }
[11:46:43] <johnny> yeah i had a misunderstanding about string_view earlier, until i saw this article that referred to as the duct tape of string types
[11:46:58] <RandomReader> repeat for the other two
[11:47:00] <johnny> so really, i should just accept a string view
[11:47:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:47:30] <johnny> i thought i was gonna need to do different things for the different string types
[11:48:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:48:19] <Haohmaru> !rq
[11:48:19] <nolyc> Haohmaru: <Raziel> he thicc boyeeee
[11:48:34] *** Joins: shad0w (~shad0w@user/xshadow)
[11:53:58] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[11:54:36] *** Joins: pah (~pah@user/pah)
[11:59:37] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[12:01:23] <RandomReader> oh I forgot about the templated finds, so even my explicit one is more than necessary .. just .find(sv)
[12:02:04] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:02:21] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:05:10] <johnny> just accepting the plain string view works for me except the usages with the escape codes that were used as char literals
[12:05:28] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 252 seconds)
[12:05:31] *** Quits: headline_ (sid102736@tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:05:39] *** Joins: buhman (sid411355@user/buhman)
[12:05:47] *** Joins: plastico (~plastico@neomutt/plastico)
[12:06:01] <johnny> i'll just let them be string views
[12:07:40] <ville> png is such a wonderful format. and encoders for it are top quality. top. quality. i've an uncompressed 2x2 rgba image so you'd think the pixel data would be just that, right? wrong! instead this particular encoder decided that for the second row you have to go look up 3 other pixels to calculate the rgba components of a pixel.
[12:08:57] *** Joins: headline_ (sid102736@id-102736.tinside.irccloud.com)
[12:09:38] <Haohmaru> is it a palletted png?
[12:09:46] <ville> no, straight up rgba
[12:09:48] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[12:10:09] <Haohmaru> hm
[12:10:55] <johnny> and now i can finally go back to the whole utf8 to shift-jis thing..
[12:11:25] <johnny> wow icu is huge
[12:11:54] <TinoDidriksen> ICU does a lot of things.
[12:11:55] <Haohmaru> did someone tell you "just use ICU" ? ;P~
[12:12:23] <TinoDidriksen> Good advice. When in doubt, just use ICU.
[12:12:24] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:12:44] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[12:12:59] <johnny> i wonder hwo much that would bloat an emscripten binary
[12:13:15] <johnny> yesterday i just learned that windows ships icu , so that's helpful
[12:13:29] <johnny> but it doesn't help the emscripten target i think
[12:13:34] *** Joins: gggpkm__ (~gggpkm@114.245.104.31)
[12:13:58] <TinoDidriksen> Depends on what you use from it. Few people need the layout engine or CLDR, so it is possible to severely reduce the size of ICU.
[12:15:23] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 264 seconds)
[12:15:37] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[12:15:42] <johnny> a character conversion table, and only one
[12:16:08] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d)
[12:16:32] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:16:34] <TinoDidriksen> Oh, that's not really worth the whole library. If you do any Unicode string manipulation, then it's relevant.
[12:16:49] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 265 seconds)
[12:17:08] <johnny> well i don't knwo the future, but atm conversion from utf-8 <-> shift-jis is the only thing used in the application
[12:17:24] <rond_> is it possible to deconstruct std::pair when specyfing function arguments? i.e. void foo([int a, int b] myPair);
[12:17:28] <rond_> something like this?
[12:17:33] <johnny> via QTextCodec> or whatever. and that's my last qt dep that's not the excel writer
[12:17:45] <TinoDidriksen> I can't imagine why you'd ever want to convert to Shift-JIS. From, but not to.
[12:17:49] <rond_> to name components of pair during declaration?
[12:20:00] <johnny> TinoDidriksen, iome number of proprietary binary format files use strings that are encoded that way. I want to make it so that the program can round trip back to the original format and end up with files that are equivalent
[12:20:20] <johnny> i think that's a good way to make sure the program works properly
[12:20:23] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[12:21:52] <johnny> TinoDidriksen, does that seem unreasonable?
[12:21:59] <cart_man> Why can you not use iterators for a say a "const std::map"  ?
[12:22:08] <cart_man> My iterator for obv reasons can not be const
[12:22:26] <TinoDidriksen> Format compat is a fine reason to convert back to a bad encoding.
[12:22:32] <cart_man> soo ... is there actually different types .. does const actually define a new type?
[12:22:48] <ville> rond_: no
[12:23:02] <Haohmaru> cart_man what are you gonna do with those iterators then?
[12:23:16] <johnny> i've seen plenty of example code out there that just converts FROM via a huge array you'd include wiht your program
[12:23:21] <TinoDidriksen> cart_man, there are const_iterators - just use auto.
[12:23:24] <rond_> ville it's a shame, that's nice in programming languages
[12:23:28] <rond_> in functional* programming languages
[12:23:47] <johnny> but i certainly don't trust myself to write the conversion to
[12:23:57] <TinoDidriksen> And importantly, "const iterator" is not the same as const_iterator
[12:24:14] <johnny> i was thinking about maybe trying out ztd.text for this maybe. it effectively does the same thing
[12:24:18] <LordKalma> C++ library code is magic
[12:24:24] <ville> rond_: in general don't use pairs or tuples for regular programming. they just suck. leave them to the tmp people
[12:25:11] <LordKalma> yeah
[12:25:23] <LordKalma> use structs with meaningful member names
[12:25:28] <cart_man> TinoDidriksen: Haohmaru I passed a const std::map into a function and inside I couldnt use const std::map::iterator : / ... ok
[12:25:32] <cart_man> Will try auto
[12:25:46] <TinoDidriksen> You can use std::map::const_iterator
[12:25:54] <TinoDidriksen> But really just use auto for all those things.
[12:25:59] <rond_> Well, I use 3rd party library that uses a pair that
[12:26:03] <rond_> I need. anyway, thanks!
[12:26:23] <ville> rond_: but because this is c++ with boilerplate you can convert between tuples and parameter packs. which can give you the appearance of something somewhat what you wished
[12:26:26] <Haohmaru> tbh, i'm not the best guy to ask about iterators ;P~
[12:26:26] <LordKalma> I don't think I've ever seen an iterator being called by type explicitly
[12:26:29] <LordKalma> you just auto that shit
[12:26:37] <cart_man> TinoDidriksen:  Haohmaru Ok but that begs the quetsion.. how is a const iterator of any kind suppose to work since you are literally mutating it to use its core functionailty ?
[12:26:51] <TinoDidriksen> It's not a const iterator. It's a const_iterator
[12:26:51] <ville> rond_: look up std::apply
[12:27:06] <rond_> ville I'm not talking about auto[a, b, c] = myTuple inside the code; I tried to unpack them in function declaration
[12:27:21] <Haohmaru> cart_man from what TinoDidriksen says, it's not a "const" version of "iterator", it's a separate type "const_iterator"
[12:27:25] <ville> rond_: err...
[12:27:38] <ville> rond_: that makes no sense. are you sure you mean function declaration?
[12:28:08] <LordKalma> "A const_iterator is an iterator that points to const value (like a const T* pointer); dereferencing it returns a reference to a constant value (const T&) and prevents modification of the referenced value: it enforces const-correctness.
[12:28:08] <LordKalma> When you have a const reference to the container, you can only get a const_iterator."
[12:28:13] <LordKalma> https://stackoverflow.com/a/5346927
[12:28:41] <rond_> ville something like pattern matching in fucntional programming. Anyway, I think C++ doesn't allow it (just yet)
[12:29:02] <Haohmaru> a const_iterator itself can also be marked "const" but this is just a side note ;P~
[12:29:22] <LordKalma> well const iterators seem to be kinda dumb
[12:29:30] <LordKalma> like the whole point of an iterator is to have a mutable state
[12:29:38] <LordKalma> aka the iterator position
[12:30:10] <LordKalma> a const const_iterator would be like
[12:30:14] <Haohmaru> but the language doesn't care that it might not make sense, and allows you to mark it "const" if you want to
[12:30:19] <LordKalma> "you can sit here and watch"
[12:30:24] <LordKalma> yes of course
[12:30:28] <LordKalma> it's just dumb semantics
[12:30:49] <LordKalma> can't move, can't modify...
[12:31:03] <Haohmaru> you can always do anything in ASM if you are bothered by the compiler ;P~
[12:32:39] <Haohmaru> !fact
[12:32:40] <nolyc> Haohmaru: For a set&lt;Key> both the key_type and value_type are Key.
[12:33:20] <LordKalma> for a fucking what?
[12:33:28] <ville> Haohmaru: and then screwed over by the optimizer anyway
[12:33:29] <Haohmaru> set<Key> probably
[12:34:08] <LordKalma> "as if" rule? :D
[12:35:13] <rond_> is it desired to overload std::min() for my custom type or should I avoid it and use my own name?  (good practices question)
[12:35:50] <cart_man> LordKalma: Ohh so if its const it just stops the dereferenced value to be edited... Is this so for only iterators though?
[12:36:03] <cart_man> LordKalma: Exactly my thoughts on it
[12:36:11] <ville> rond_: probably not allowed to overload it. possibly allowed to specialize it. haven't checked if the later is true. just stick the function in your own namespace
[12:36:43] *** Joins: rdz1789 (~rdz1789@139.47.40.241)
[12:36:50] <RandomReader> cart_man - no, it's a separate *type* of iterator that only allows read access to the value
[12:37:00] <RandomReader> const isn't added here
[12:37:23] <Haohmaru> cart_man "const" is a cv-qualifier
[12:37:39] <RandomReader> the name is just prefixed with "const_" so you know what it represents
[12:37:59] <ville> they stuck the const on the wrong side
[12:38:01] <Haohmaru> the "const" in "const_iterator" is not a cv-qualifier, it's just part of the name of the class/struct/whatever_it_is
[12:38:05] <cart_man> RandomReader: I am trying to conform to using const everywhere which is why I ran into this problem. CV as in curriculum Vitae?
[12:38:14] <LordKalma> yes
[12:38:26] <LordKalma> (const/volatile)
[12:38:32] <Haohmaru> cv = const/volatile
[12:38:41] <RandomReader> if the container is not const, then  container.begin()    returns a type described as "iterator"
[12:38:51] <fiesh> const and volatile should be renamed to curriculum and vitae
[12:38:56] <RandomReader> if the container is const, then   container.begin()   returns a type described as "const_iterator"
[12:38:59] <LordKalma> !grab fiesh
[12:39:00] <nolyc> LordKalma: The operation succeeded.
[12:39:05] <RandomReader> they're just type names, but they're *different* types
[12:39:08] <LordKalma> RandomReader, wrong
[12:39:08] <ville> it helps to spread the confusion similar to casually saying "const pointer" when meaning pointer-to-const
[12:39:11] <LordKalma> it's cbegin()
[12:39:18] <smallville7123> !grab flesh
[12:39:18] <nolyc> smallville7123: Error: I couldn't find a proper message to grab.
[12:39:20] <LordKalma> begin() would fail
[12:39:24] <TinoDidriksen> No
[12:39:26] <smallville7123> rip
[12:39:31] <TinoDidriksen> .begin() would return const_iterator
[12:39:33] <rond_> ville https://paste.mozilla.org/JUuySmgZ  seems to be fine...?
[12:39:37] <LordKalma> really?!
[12:39:37] <smallville7123> !grab fiesh
[12:39:37] <nolyc> smallville7123: The operation succeeded.
[12:39:41] <RandomReader> LordKalma - see https://eel.is/c++draft/container.requirements
[12:39:42] <smallville7123> !throw fiesh
[12:39:43] <nolyc> smallville7123: Error: "throw" is not a valid command.
[12:39:47] <smallville7123> qwq
[12:39:54] <LordKalma> I though you needed to to use cbegin()
[12:39:59] <TinoDidriksen> .cbegin() is for when you want a const_iterator of a non-const container.
[12:40:00] <smallville7123> !release fiesh
[12:40:01] <nolyc> smallville7123: Error: "release" is not a valid command.
[12:40:07] <ville> rond_: ub is ub is ub. that's how these things are specified
[12:40:27] <LordKalma> TinoDidriksen, what if my container doesn't have a const_iter type?
[12:40:43] <rond_> ville wdym?
[12:40:45] <ville> rond_: what i mean is that it's ub to stick something in namespace std. might work. might not
[12:40:53] <TinoDidriksen> Then you don't have .cbegin(). I can't recall if I've ever used .cbegin() ...
[12:40:58] <LordKalma> might bring nuclear fallout
[12:40:58] <rond_> ohhh, so as a rule of thumb I should NEVER extend std::?
[12:41:05] <ville> rond_: or that came out wrong..
[12:41:28] <ville> rond_: yes that's the no-thinking-required default. some stuff you are allowed to stick in there. and sort of have to
[12:41:30] <LordKalma> TinoDidriksen, so, does the language magically call cbegin() instead of begin() in const objects?
[12:41:31] <smallville7123> !quote fiesh
[12:41:31] <nolyc> smallville7123: <fiesh> const and volatile should be renamed to curriculum and vitae
[12:41:45] <rond_> ville I got inspiration from here: https://stackoverflow.com/questions/2282349/specialization-of-templateclass-tp-struct-stdless-in-different-namespace
[12:42:00] <RandomReader> rond_ - there's more details here: https://en.cppreference.com/w/cpp/language/extending_std
[12:42:06] <TinoDidriksen> const containers' .begin() returns const_iterator. Whether that overload just forwards to .cbegin() is up to the implementation.
[12:42:11] *** pah is now known as pa
[12:42:36] <ville> rond_: those are from 2010, they've changed the rules since
[12:42:44] <LordKalma> TinoDidriksen, I'm just curious, because I wrote a begin() before, and I just returned Iterator(this, ...)...
[12:42:56] <ville> rond_: namely they've made it more restricted what you're allowed to do
[12:42:59] <LordKalma> like I didn't have any considerations about constness
[12:43:04] <TinoDidriksen> Sure, but you should also provide a const version of it.
[12:43:11] <rond_> So, since node and edgeWeight are just uint and float, then I shouldn't do it
[12:43:12] <rond_> okay
[12:43:16] <LordKalma> TinoDidriksen, with cbegin()?
[12:43:23] <LordKalma> since you can't overload on return type
[12:43:24] <TinoDidriksen> No, a const .begin()
[12:43:36] <ville> LordKalma: void f() const;
[12:43:37] <TinoDidriksen> You can overload on whether *this is const.
[12:43:45] <LordKalma> ahhhhhhhhhhhhhhhhhh
[12:43:47] <LordKalma> cool, thanks
[12:43:48] <LordKalma> TIL
[12:44:09] *** Parts: rdz1789 (~rdz1789@139.47.40.241) ()
[12:44:10] <Haohmaru> east const, west const, after-the-fact const
[12:44:10] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:44:31] <LordKalma> learned something today
[12:44:39] <LordKalma> tomorrow I'll be writing boost grade library code
[12:44:41] <Haohmaru> ++achievements;
[12:44:51] <Haohmaru> hold your horses, LordKalma
[12:44:54] <LordKalma> now I only need to learn TMP wizardery
[12:44:56] <ville> LordKalma: not sure if that's a good thing
[12:44:59] <LordKalma> "only"
[12:45:00] <Haohmaru> the world does not need another boost
[12:45:46] <cart_man> How do yo make std::cin take only one character and then react? As in you press up down arrows and it continues and not an entire sentenace and then enter?
[12:45:53] <TinoDidriksen> You don't.
[12:45:57] <Haohmaru> LordKalma instead, use your senpai abilities and add some nice things into the C++ language and gcc maybe
[12:46:12] <TinoDidriksen> Such precise terminal control is not possible with only Standard C++
[12:46:21] <Haohmaru> cart_man are you trying to make a TUI ?
[12:46:21] <LordKalma> Haohmaru, I might write a c++ version of liquid-dsp
[12:46:25] <TinoDidriksen> Use libreadline of similar.
[12:46:28] <LordKalma> I love that library but it has so much fuckery
[12:46:34] <markand> readline is GPL though
[12:46:55] <Haohmaru> LordKalma haven't even heard of it
[12:47:00] <cart_man> Haohmaru: Super basic up and down keys only yea
[12:47:06] <LordKalma> Haohmaru, https://github.com/jgaeddert/liquid-dsp
[12:47:18] <LordKalma> open /src, it's full of stuff
[12:47:23] <Haohmaru> cart_man nah, iostream isn't really capable of that kind of stuff
[12:47:51] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[12:47:53] <Haohmaru> for TUI folks usually use "curses", i didn't like curses so i faked it all using allegro
[12:48:00] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d) (Quit: Client closed)
[12:48:13] <cart_man> is allegro another lib?
[12:48:20] <LordKalma> https://github.com/OneLoneCoder/olcPixelGameEngine
[12:48:26] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d)
[12:48:28] <TinoDidriksen> Allegro is a whole game engine.
[12:48:28] <Haohmaru> it's a library mainly for making cross-platform games
[12:48:29] <LordKalma> this has soem kind of keyboard handling on a loop
[12:48:57] <Haohmaru> thus my fake TUI is actually a GUI app that just looks like text-mode (but isn't)
[12:49:16] <Haohmaru> TinoDidriksen i wouldn't call it an engine
[12:49:53] <Haohmaru> but what do i know, i've not actually tried making a game with it
[12:50:41] <Haohmaru> is SDL an engine too?
[12:50:53] <LordKalma>  it's a "framework"
[12:51:01] <Haohmaru> allegro has more things than SDL iirc
[12:51:19] <cart_man> Aww man...
[12:52:02] <Haohmaru> cart_man maybe someone has written a nicer, C++ lib specifically for making TUIs
[12:52:27] <Haohmaru> if not, look at "curses" (ncurses, pdcurses, ..)
[12:52:30] <cart_man> I am writing a simple test app for an interview that is suppose to just show some basic logic. Dont think its a good idea to add a  lib with that. Its like a 4 function piece of code ...
[12:52:41] <Haohmaru> hm
[12:52:47] <Haohmaru> do you need the arrows?
[12:53:01] <cart_man> Haohmaru: Well it would have been nice to scroll through the selection of items
[12:53:06] <Haohmaru> or cross-platformness
[12:53:21] <cart_man> But perhaps I am overthinking it. I am 100% overthinking this entire test of course... it just seems to silly and easy
[12:53:23] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:53:24] <cart_man> something must be up
[12:53:51] <Haohmaru> yeah external libs are probably overkill for this
[12:54:27] <RandomReader> this is a take-home exercise?
[13:00:55] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 258 seconds)
[13:01:20] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:04:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:04:49] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:05:45] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[13:09:06] <cart_man> RandomReader: Yes ... its very annoying.. Especially if you have 5 interviews in one week and all of them want some prep and test and project etc ...
[13:09:16] <cart_man> Oh right you dont have a 9 to 5 job right?
[13:13:48] <RandomReader> I have odd hours at the moment, but will be on that kind of schedule soon
[13:14:41] <RandomReader> was just going to say the typically the problems are meant to not take much time to solve, but they're looking for solid code that works correctly .. and then during the review stage may ask why you made particular choices, or how would you extend the code to handle new case X
[13:17:08] <RandomReader> so like if it accepts a set of commands, map and dispatch vs if/else blocks would be the kind of thing looked at / discussed
[13:20:13] <rond_> using mytype = const sometype;    will the `const` perservere?
[13:20:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:20:22] <RandomReader> yes
[13:20:26] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:26:02] <RandomReader> so yeah don't overthink it since they should expect that it can't take up much of your time, but try to keep possible future changes in mind
[13:29:09] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:29:09] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[13:30:41] <cart_man> RandomReader: Sorry I meant the 9 to 5 sarcastically. My bad for the format though. BUT I totally get what you are saying. I eventually came to the conclusion that the "New Cases" was what they are looking for because the tests at first glance looks super simple.
[13:31:28] <cart_man> But paralysis by analysis is my game unfortunately
[13:32:19] <cart_man> Hench why I did some research on push_back( [](){} )  the other night. Cause a different function needs to be run on the same list of things
[13:32:44] <cart_man> So then you can have a for loop over the array of [](){} on the same list. I know thats terrible
[13:32:58] <cart_man> But I don't really see another way
[13:33:40] <cart_man> I dont know if some Patterns would perhaps be better but will a test like this really start involving patterns etc? For this simple test have 5 header program written at the end?
[13:36:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:00] *** ChanServ sets mode: +v npaperbot
[13:39:32] <onizu> hi
[13:45:41] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d) (Quit: Client closed)
[13:47:17] *** Joins: DSpider (~DSpider@79.115.58.9)
[13:48:31] <cart_man> If I use a "for (const auto& [key, value] : products)" like this C++17 style on a MAP.  Is there a way I can have the index aswell?
[13:48:44] *** Joins: markong (~kvirc@213.146.188.203)
[13:48:45] <cart_man> This is so Javascript style stuff whow
[13:52:23] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:52:40] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[14:02:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[14:03:04] <PJBoy> what you're asking is enumerate
[14:03:20] <PJBoy> nothing in stdlib for it
[14:03:29] <PJBoy> I'd just maintain a separate counter honestly
[14:03:57] <cart_man> PJBoy: But isnt it then just better to use a good oll FOR Loop ?
[14:04:02] <cart_man> With that counter built right in
[14:04:13] <LordKalma> Alipha has an enumerate wrapper
[14:04:15] <PJBoy> maybe for your case
[14:04:18] <PJBoy> it depends
[14:04:40] <PJBoy> because the index is unrelated to the key in a map, I'd lean towards keeping the counter separate and iterating over the map with the for loop
[14:04:47] <cart_man> Feels like I am buying a ferarri and then have to modify it for Offroad tires : /
[14:04:49] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:04:50] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 260 seconds)
[14:05:10] <cart_man> Very specific and good but not for the application is what I meant
[14:05:13] <cart_man> PJBoy: Ok I get that
[14:06:09] <PJBoy> in C++23 you'll be able to make a zip_view of a views::counted of your map and your map itself
[14:06:21] <PJBoy> which would be a poverty enumerate
[14:06:36] <PJBoy> hopefully enumerate_view actually gets into C++23 too
[14:07:05] <PJBoy> s/views::counted/iota_view/
[14:08:23] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Ping timeout: 258 seconds)
[14:08:37] *** Joins: X-Scale` (~ARM@46.50.2.19)
[14:09:16] <LordKalma> we need zip and enumerate ffs
[14:09:21] <LordKalma> it's so basic iterator crap
[14:09:42] <LordKalma> but then again, we have co_routines so unergonomic they are basically useless without supporting libraries
[14:11:25] *** Quits: X-Scale (~ARM@46.50.7.99) (Ping timeout: 252 seconds)
[14:11:26] *** X-Scale` is now known as X-Scale
[14:14:30] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Remote host closed the connection)
[14:14:38] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[14:15:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[14:18:05] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[14:18:52] <johnny> TinoDidriksen, i can't yet figure out a reasonable way to do both sides without icu or iconv
[14:19:23] <johnny> and it doesn't seem super easy to expect iconv on windows
[14:20:07] <johnny> LordKalma, zip and enumerate are both part of range-v3 and C++23 at least
[14:22:02] <johnny> i'll just make it conditional in my build and with icu for nw
[14:27:41] <PJBoy> zip isn't that basic
[14:27:48] <PJBoy> enumerate's not part of C++23 though
[14:27:59] *** vinleod is now known as vdamewood
[14:29:35] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[14:30:51] <PJBoy> > zip isn't that basic
[14:30:57] <PJBoy> case in point, this quote from the zip proposal
[14:31:02] <PJBoy> "Once tuples of references are made const-assignable, the default std::swap can be called for const tuples of references. However, that triple-move swap does the wrong thing"
[14:31:41] <PJBoy> all three statements of that quote are like flashing red lights and alarm bells to me
[14:34:20] <PJBoy> handling zips of differently length ranges is tricky
[14:34:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:34:32] <johnny> yeah you're right.. it's likely to be part, but isn't yet
[14:34:38] <PJBoy> making your zip object random access if the source ranges are random access
[14:34:44] <PJBoy> resp. bidirectional / forward etc.
[14:35:00] <PJBoy> > we cannot simply construct the end iterator out of the end iterators of the views: if the views are different in size, iterating backwards from the end will give us elements that are not in the view at all
[14:36:41] <PJBoy> apparently the proposed zip view doesn't accept (non-forward) input ranges
[14:37:04] <PJBoy> oh only for the adjacent zip
[14:37:06] <PJBoy> nvm
[14:38:12] <PJBoy> oh hey, this zip paper adds even more tuple ctors
[14:39:04] <PJBoy> ...and adds an assignment operator to vector<bool>
[14:39:28] <PJBoy> ::reference
[14:39:56] <PJBoy> { vector<bool> v(3); const auto bit_ref = v[2]; bit_ref = true; }
[14:39:56] <geordi> error: passing 'const _Bit_reference' as 'this' argument discards qualifiers
[14:40:01] <PJBoy> that would allow that code to compile
[14:43:34] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:46:16] <johnny> oh great.. no C++ api for icu in windows
[14:49:48] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[14:50:12] <roxlu> Hi! Regurlarly I think about using lock-free solutions but every time I look into it I can't really see a use-case that fits in my apps. I think this is probably because I don't enough about how to use it  (...)
[14:52:23] <roxlu> For example, when I want to have a producer/consumer it wouldn't make sense to use a lock-free solution as the consumer runs in it's own thread and it would "spin" and waste cpu as long there is no work to consume. Am I right, or do I misunderstand the way lock-free algos work?
[14:55:33] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[14:58:52] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[15:00:56] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[15:01:05] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:02:25] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[15:04:37] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[15:07:40] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[15:07:48] *** Quits: mIGu (~mig21@user/naur) (Ping timeout: 258 seconds)
[15:09:36] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:10:03] *** Joins: luizfrds (~Luiz@152.250.243.147)
[15:17:45] *** Quits: BluesBoy (~bboy@stotz2.com) (Ping timeout: 260 seconds)
[15:19:30] *** Joins: BluesBoy (~bboy@stotz2.com)
[15:20:47] *** Quits: blackbeard420_ (~blackbear@45.33.85.133) (Quit: ZNC 1.8.2 - https://znc.in)
[15:20:59] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[15:21:27] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 265 seconds)
[15:25:10] *** Joins: ravan (~ravan@user/ravan)
[15:29:49] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:29:49] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:30:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:30:35] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[15:30:47] *** Joins: pah (~pah@user/pah)
[15:35:31] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[15:36:31] *** Joins: paule32 (~paule32@user/paule32)
[15:38:40] <cart_man> Is there a function build into STD that can tell you if a string is all numerical?
[15:38:40] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:38:54] *** Quits: gggpkm__ (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[15:39:14] <PJBoy> std::all + std::isdigit
[15:39:27] <Haohmaru> does that mean whether it could be a valid number, or what?
[15:40:29] <mort> std::all_of* right?
[15:40:31] <PJBoy> << ranges::all_of(s, ::isdigit); string s("012345678901234567890123456789");
[15:40:32] <geordi> true
[15:40:33] <PJBoy> yeah
[15:40:35] <cart_man> Haohmaru: Yes so that stoi() doesn't lose its shit when trying to proc non numerical string
[15:40:51] <PJBoy> ah
[15:40:53] <Haohmaru> why not use std:: things instead?
[15:40:59] <PJBoy> stoi probably still loses its shit there
[15:41:00] <LordKalma>  ::isdigit what syntax is this?
[15:41:04] <Haohmaru> wasn't there .from_str() or so
[15:41:07] <PJBoy> isdigit from the global namespace
[15:41:19] <PJBoy> aka the C one that only has one overload
[15:41:29] <cart_man> PJBoy: ->  <cctype>
[15:41:40] <PJBoy> << ranges::all_of(s, std::isdigit); string s("012345678901234567890123456789x");
[15:41:40] <geordi> error: no match for call to '(const ranges::__all_of_fn) (string&, <unresolved overloaded function type>)'
[15:41:56] <PJBoy> std::isdigit has multiple overloads
[15:41:57] <mort> yay template errors
[15:42:03] <PJBoy> no templates there
[15:42:17] <mort> yay C++ errors in general then
[15:42:23] <PJBoy> isdigit has that overload from clocale
[15:42:50] <very_sneaky> these ranges aren't incoming until c++23, right? or are they available in c++20
[15:42:50] <PJBoy> which is technically a template
[15:42:52] <PJBoy> fine
[15:42:55] <PJBoy> ranges are C++20
[15:43:05] <PJBoy> the non-ranges version would work too of course
[15:43:09] <mort> but wait, shouldn't the overload be resolved? std::all_of(something whose iterators return char, some function which has an overload which takes char)
[15:43:17] <mort> why doesn't all_of call the char version
[15:43:19] <very_sneaky> huh. i'll have to find an excuse to explore them
[15:43:38] <PJBoy> the compiler doesn't know how all_of is going to call this overloaded function
[15:43:44] <mort> why not
[15:43:54] <mort> all_of is a template, the compiler knows the implementation perfectly
[15:44:04] <PJBoy> all_of's implementation might do `if constexpr (unary_function(functor)) { ... } else { ... }`
[15:44:26] <PJBoy> also the compiler doesn't know what all_of overload to call without knowing the type of the functor
[15:44:36] <mort> maybe it's best to just stick with normal for loops
[15:44:54] <PJBoy> if you gave all_of a generic lambda or whatever, that would work
[15:44:54] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:45:11] <PJBoy> you'd defer the point in time at which the overload of isdigit needs to be resolved
[15:45:12] <mort> you could always do `std::all_of(s, [](char ch) => std::isdigit(ch))`
[15:45:17] <mort> but that'd need a reasonable lambda syntax
[15:45:28] <PJBoy> yeah
[15:45:35] <PJBoy> which is just a verbose way of doing what I did
[15:46:03] <PJBoy> << ranges::all_of(s, [](char c) { return isdigit(c); }); string s("012345678901234567890123456789");
[15:46:03] <geordi> true
[15:46:11] <mort> well, you get to use std::isdigit rather than ::isdigit -- I know those are the same function but it's a general solution
[15:46:18] <mort> I wish we had nice lambdas
[15:46:27] <mort> <algorithm> depends on nice lambdas
[15:46:28] <PJBoy> C++ lambdas are beautiful just the way they are
[15:46:32] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[15:46:33] <mort> they really aren't
[15:46:42] <PJBoy> I know you disagree
[15:46:44] <mort> mhm
[15:46:51] <PJBoy> but I really like them
[15:46:52] <ville> don't tell me there are too many characters you have to type?
[15:47:42] <mort> I really couldn't care less about how many characters I have to type, I care about how readable the resulting code is and how visually cluttered it is and how long lines are
[15:48:02] <mort> but I know you like your overly verbose syntax and at the end of the day it's subjective
[15:48:34] <PJBoy> yeah
[15:48:35] <LordKalma> lambda x: x**2 # the best lambdas
[15:48:52] <mort> it's a pretty good syntax yea
[15:48:52] <PJBoy> if things got too unreadable, I'd just move the lambda out into a const variable
[15:48:57] *** Joins: gggpkm (~gggpkm@114.245.104.31)
[15:49:03] <mort> javascript's x => x**2 is also pretty nice
[15:49:05] <PJBoy> problem with python lambdas is they can't do side effects
[15:49:16] <PJBoy> which is fine in python, because you can just write a local function
[15:49:16] <mort> (pretending javascript has a ** operator because we're comparing lambdas not their math operators)
[15:49:24] <PJBoy> but in C++ it's not so great
[15:49:45] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Remote host closed the connection)
[15:49:49] <LordKalma> for i in range(10): def foo(x): return x**2
[15:49:52] <mort> to be clear, I love C++'s current lambdas, I wouldn't want to remove the current lambda syntax; the long-form lambda syntax is a great way to declare a local function
[15:50:07] *** Joins: gggpkm (~gggpkm@114.245.104.31)
[15:50:10] <mort> it would just be nice if there was *also* a terse lambda syntax for cases where you're writing the lambda inline
[15:50:11] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[15:50:23] <LordKalma> boost::lambda my friend
[15:50:51] <LordKalma> *lambda2
[15:51:02] <LordKalma>  _1 % 2 == 0
[15:51:07] <LordKalma> where _1 is the first argument
[15:51:14] <PJBoy> I don't respect it
[15:51:22] <LordKalma> https://www.boost.org/doc/libs/1_77_0/libs/lambda2/doc/html/lambda2.html
[15:51:39] <PJBoy> you already have to know too much to gain a benefit over using std lambdas
[15:51:42] <mort> it's sad that the language is clearly moving in a direction where we want to write inline predicates, but also has a lambda syntax which is largely incompatible with writing inline predicates in a way which doesn't look horrible
[15:51:47] <PJBoy> just to save minimal boilerplate
[15:51:49] <ville> mort: so which is it? first you say it isn't about how any characters you have to type and then go to say you want a terse syntax
[15:51:53] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[15:52:01] <mort> ville: I want a terse syntax because it's more readable
[15:52:41] <ville> you're talking about few characters here. completely meaningless
[15:52:55] <mort> I respect your right to have your own opinion on the matter
[15:53:01] <ville> it's a fact
[15:53:13] <PJBoy> I see where mort's coming from readability-wise
[15:53:15] <mort> it's literally subjective, we're talking about the design of language syntax
[15:53:38] <ville> we shouldn't have even gotten the terse syntax we have now
[15:53:48] <mort> I respect your right to have your own opinion on the matter
[15:53:53] <PJBoy> if a lambda really is just a single expression, I see the value in having a specific form for that
[15:54:06] <ville> absolutely no value
[15:54:12] <PJBoy> but I also see the value in a unified syntax
[15:54:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:54:19] <PJBoy> and I lean towards it more
[15:54:51] <mort> I should add a terse lambda syntax to my own language just to annoy you
[15:54:56] <ville> optionality contaminates everything with complexity
[15:55:20] <mort> current lambdas are like |x| { return x * x }
[15:55:30] <mort> I could totally make `|x| x * 2` equivalent to that
[15:55:48] <ville> just wow
[15:56:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[15:57:54] <mort> actually, no, lambdas are currently |x| {x * 2} because the last expression is returned
[15:58:00] <mort> I don't even remember my own syntax heh
[15:58:18] <ville> also that should have never been a thing
[15:58:19] <mort> so the terse version would be |x| x*2 to save literally only the braces
[15:59:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:01:02] <PJBoy> taking inspiration from rust
[16:01:07] <mort> yea
[16:01:10] <ville> yes, a marked improvement, with out clear understanding what the hidden cost is. how much future syntax changes would be hindered by the addition
[16:01:18] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:01:19] <PJBoy> direct inspiration in fact
[16:01:32] <rpav> ah the problems with textual languages
[16:01:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:01:37] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:34f3:14af:c14:a33d)
[16:01:37] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:34f3:14af:c14:a33d) (Changing host)
[16:01:37] *** Joins: skapata (~Skapata@user/skapata)
[16:01:47] <mort> I already had lambda syntax like {10 + 20}, but needed a way to let you specify parameters for when you need that
[16:01:51] <PJBoy> rust lambdas can look hilariously dumb
[16:01:59] <rpav> JS lambdas are ok though
[16:02:05] <PJBoy> such as this example from the docs `let one = || 1;`
[16:02:08] <mort> I could do something like (x){10 + x} but that's slightly hard to parse
[16:02:09] <rpav> => isn't currently a parseable thing so if you wanted to use that
[16:02:20] <rpav> x => x+1;
[16:02:26] <rpav> (x,...) => { ... }
[16:03:13] <mort> probably looks less stupid with 'one := ||{1}'
[16:03:15] <mort> slightly
[16:03:16] <mort> not really
[16:03:40] <PJBoy> it's the empty parameter list that gets me
[16:03:43] <mort> yeah
[16:03:47] <PJBoy> it doesn't look like a lambda at first glance
[16:03:55] <mort> really I'd do 'one := {1}' in my language
[16:04:00] <rpav> oh is that what that is? yeah that's kinda crap
[16:04:01] <mort> don't need a parameter list when it's empty
[16:04:12] <PJBoy> so braces would indicate lambda?
[16:04:15] <PJBoy> ehhhhhhhh
[16:04:18] <mort> in my language it does
[16:04:37] <mort> 'if' is a higher order function, 'if 10 < 20 { print "10 is less than 20" }' is a function call
[16:04:42] <mort> with two arguments
[16:04:52] <PJBoy> ehhhhhh
[16:05:08] <PJBoy> it spooks me a bit
[16:05:14] <mort> it is spooky
[16:05:19] <mort> I think it's neat
[16:05:36] <mort> it means conditionally returning from a function can't just be 'if (bleh) { return; }
[16:05:37] <mort> '
[16:07:55] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[16:07:57] *** Joins: mIGu (~mig21@user/naur)
[16:10:28] *** Joins: manjaro-user (~manjaro-u@199-7-159-97.eng.wind.ca)
[16:11:07] <manjaro-user> Which do you prefer? `throw nullptr;` or `return nullptr` ?
[16:11:31] <mort> return nullptr, you should throw an exception not null
[16:12:43] <rpav> i prefer to throw a lambda that returns nullptr, so both are covered for good measure
[16:12:45] <manjaro-user> mort: Okay. what do you prefer then; `throw exception;` vs `return nullptr;`?
[16:12:58] <rpav> (why are we doing either)
[16:13:26] <manjaro-user> rpav: a function getter that is unable to get anything.
[16:13:33] <mort> I usually handle errors with something like returning a Result type, or returning a std::variant<whatever, Error>
[16:13:43] <mort> in the second case I would return Error{"something went wrong"}
[16:13:58] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:14:09] <rpav> manjaro-user: is it fatal to your application? it makes no sense to continue running normally unless the function was found? then throw an error; otherwise return nullptr and/or nullptr plus some error condition
[16:14:40] <rpav> unfortunately c++ lacks efficient "minor error" exceptions, both syntactically and computationally
[16:14:50] <mort> I want std::expected
[16:15:59] <manjaro-user> rpav: mmm its for a card game where the instructions are written in c++. I want to keep the instructions as simple as possible.
[16:16:40] <manjaro-user> does code after "throw exception; doCode();" execute?
[16:16:46] <mort> no
[16:17:15] *** Quits: mIGu (~mig21@user/naur) (Ping timeout: 260 seconds)
[16:17:15] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:18:21] <manjaro-user> should I define my own errors to throw? like just an enum or whatever?
[16:18:41] <mort> you can throw std::runtime_error from <stdexcept> if you just need something to throw
[16:18:51] <manjaro-user> I don't use std libraries.
[16:18:57] <mort> oh
[16:19:09] <ville> manjaro-user: you take code as user input and then compile it or?
[16:19:41] <mort> create your own class, give it a 'what()' function which returns a string, feel a little bad that anyone who tries to catch anything which inherits from std::exception won't catch your exception
[16:19:57] <manjaro-user> ville: Its pre-compiled. When a card is played, its bit of code is executed.
[16:21:29] <manjaro-user> how do nested try catch statements work? Do they work?
[16:22:47] <manjaro-user> mort: Well I'm using Qt. I wonder if Qt has an exception framework. I'd just use that.
[16:24:27] <manjaro-user> ah yes they do. Neat
[16:25:37] <manjaro-user> I almost never ever program with exceptions. I have so little experience with it, and don't really know what principles to abide by when writing it.
[16:26:15] <manjaro-user> I am kind of apprehensive because I imagine you could write spaghetti code doing it.
[16:26:18] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:26:44] <rpav> you can write spaghetti code with anything; don't avoid a mechanic because it could be used poorly
[16:26:51] <rpav> otherwise you wouldn't use anything in any language, especially C++
[16:28:33] <manjaro-user> rpav: true, although some things are inherintly spaghetti code. Like hooks in react.
[16:28:55] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 252 seconds)
[16:29:06] <LordKalma> why the hell don't you use std:: stuff?
[16:29:11] <rpav> the only thing that's _actually_ spaghetti code is programming non-procedurally, exclusively by goto ;)
[16:29:26] <rpav> other things are possibly other forms of pasta-code
[16:29:29] <manjaro-user> LordKalma: because the std library sucks in comparison to Qt's framework.
[16:29:37] <rpav> ðŸ¤£
[16:29:50] <LordKalma> I've probably the most Qt commentator around here
[16:29:57] <LordKalma> and I find that statement
[16:30:00] <LordKalma> ... questionable
[16:30:14] <manjaro-user> rpav: Thats wrong. Goto is not inherently spaghetti code. It helps clean up spaghetti code when used to deduplicate return statements.
[16:30:30] <rpav> (i use qt daily and it's definitely wrong)
[16:30:40] <LordKalma> goto is a great away to fuck with the type system and RAII stuff
[16:30:53] <PJBoy> goto respects RAII
[16:30:57] <rpav> manjaro-user: please reread carefully; spaghetti code is *non-procedural* code written using goto
[16:31:10] <manjaro-user> LordKalma: I remember running a thread in 4chan for writing some algorythms, and to everyone's surprise, Qt's algorythms were consistently faster than Std's.
[16:31:26] <rpav> i.e., there is no branch-and-return, or even continuation-passing, just "branch"
[16:31:48] <rpav> well, if some randomly-written code on _4chan_ says so, it's definitive ;)
[16:31:50] <PJBoy> { goto x; tracked::B b; x: ; }
[16:31:50] <geordi> error: jump to label 'x'
[16:31:52] <PJBoy> see
[16:32:00] <manjaro-user> rpav: we benched it you mong.
[16:32:14] <LordKalma> typical 4chan temperament
[16:32:25] <manjaro-user> thanks.
[16:32:25] <rpav> manjaro-user: that's an easy claim to make, but benchmarking is hard and most people are terrible at it
[16:32:28] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[16:32:48] <manjaro-user> calm down.
[16:32:49] <PJBoy> that's very true
[16:32:52] <rpav> i have a relatively decent setup for benchmarking and qt stuff is consistently ~4x slower
[16:33:06] <rpav> i'm _not_ sure why, i haven't looked at their code, but
[16:33:17] <manjaro-user> imagine getting upset over std's algorythms being slower that Qt's
[16:33:18] <LordKalma> qt::core stuff is usually pretty good
[16:33:23] <LordKalma> surprisingly good
[16:33:34] <LordKalma> but yeah, I prefer the std lib whenever possible
[16:33:40] <rpav> it's decent, but it doesn't seem particularly great wrt modern libstdc++
[16:33:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[16:34:15] <rpav> but i mean you have the people who wrote the compiler writing a standard library that fits their compiler, and takes advantage of their optimizations, it's probably not hard to imagine it being pretty good
[16:34:28] <manjaro-user> People just have this idea that just because something is "std" that it must be faster all the time. Definitely not true.
[16:35:18] <rpav> nothing _must_ be faster; but it's been measurably faster in the cases i've tested for whatever reason
[16:35:43] <AmR> Can I use externalproject_add with local path in cmake ?
[16:35:49] <LordKalma> AmR, yes
[16:35:51] <rpav> ^
[16:35:54] <PJBoy> !youvsgcc
[16:35:56] <nolyc> Compilers undergo many many many years of development utilizing the combined knowledge of dozens to hundreds to thousands of different developers which could equate to a combined several hundred thousand years worth of programming experience, versus you.
[16:36:06] <AmR> LordKalma: How ?
[16:36:27] <manjaro-user> Anyways. I'd like to find or form a principle as to when I should be throwing an exception over returning a nullptr, which implies an error took place.
[16:37:09] <LordKalma> AmR, https://cmake.org/cmake/help/latest/module/ExternalProject.html
[16:37:11] <LordKalma> under "Directory Options:"
[16:37:41] <rpav> "A download method can be omitted if the SOURCE_DIR option is used to point to an existing non-empty directory."
[16:38:16] <LordKalma> yes, that
[16:39:13] <rpav> hrm .. i can't tell if file(DOWNLOAD) supports file:// .. they say "any method supported by file(DOWNLOAD)" and then its documentation doesn't say what it supports
[16:39:29] <rpav> but if it does, that would be another alternative, and possibly useful if you need to pull from a local read-only souce
[16:39:38] <LordKalma> that would be for like a zip file
[16:40:27] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[16:40:27] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:40:35] <rpav> oh yeah
[16:41:25] <LordKalma> a shame there isn't more sistematic knowledge behind superbuilds
[16:45:19] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[16:45:20] <AmR> I need to upload my cmake files to asking for help, about fixing it, where upload it ?
[16:45:31] <Haohmaru> !paste
[16:45:32] <nolyc> Paste your test case to https://wandbox.org/ or https://rextester.com/ or http://coliru.stacked-crooked.com/ or another pastebin that can compile code. Do _not_ paste to the channel. See the testcase checklist at http://eel.is/c++/testcase
[16:45:37] <AmR> rpav: file:// work
[16:45:44] <LordKalma> that's for c++ code
[16:45:45] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:45:51] <LordKalma> for cmake code, idk, bpaste is fine, whatever
[16:46:03] <LordKalma> but it's hard to opinionate about cmake code
[16:46:20] <AmR> It's very small code
[16:46:20] <rpav> AmR: cool
[16:46:38] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:47:01] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[16:47:30] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[16:49:06] <AmR> My code https://pastebin.com/edSybVPN
[16:49:22] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:49:33] <AmR> I try set soci sub dir as git dir
[16:49:58] <AmR> the project url for test case at code.
[16:50:52] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 265 seconds)
[16:53:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:53:29] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[16:55:00] <manjaro-user> How is this for a principle: "Exceptions should only be used for bugs, and never for intended behaviour.?
[16:55:00] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:56:50] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[16:58:20] <rpav> that is basically the rule of thumb
[16:58:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[16:58:33] <rpav> it sucks a bit but that's life
[16:59:24] <cart_man> Anybody ever wanted to Flush the stdio buffer so that CIN stop at the first space and not take the stuff after space as additional entries?
[16:59:44] <rpav> manjaro-user: http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#e2-throw-an-exception-to-signal-that-a-function-cant-perform-its-assigned-task
[16:59:57] <rpav> but that's tldr
[17:00:00] *** Joins: mIGu (~mig21@user/naur)
[17:03:15] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Remote host closed the connection)
[17:03:25] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:03:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[17:07:41] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[17:09:44] <pakcjo> hi!
[17:09:56] *** Joins: sonOfRa_ (sonOfRa@user/sonofra)
[17:10:50] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Ping timeout: 260 seconds)
[17:10:55] *** Quits: manjaro-user (~manjaro-u@199-7-159-97.eng.wind.ca) (Ping timeout: 260 seconds)
[17:13:02] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[17:16:13] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 252 seconds)
[17:17:31] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[17:18:44] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:103e:68b2:a64e:1f90)
[17:18:44] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:103e:68b2:a64e:1f90) (Changing host)
[17:18:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[17:18:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[17:25:06] *** Quits: manic_laughter70 (~manic_lau@2409:4072:515:92f1:37b8:5710:9004:1b9f) (Quit: Leaving)
[17:29:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:30:28] <Alipha> cart_man: for your menu, just number the choices 1 to 4 and have the user enter a number for their selection.
[17:30:51] <cart_man> Alipha:  yea ended up doing that :/
[17:30:55] <Alipha> PJBoy: yeah, I discovered writing a zip_iterator is a bitch
[17:32:19] *** Joins: magla (~gelignite@55d47f25.access.ecotel.net)
[17:34:24] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:35:37] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:36:00] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 260 seconds)
[17:36:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:00] *** ChanServ sets mode: +v npaperbot
[17:38:18] *** Joins: lumbermb (~lumbermb@190.13.136.234)
[17:38:28] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:38:43] <LordKalma> Alipha, PJBoy that's why it should be stdlib
[17:39:36] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:40:39] <PJBoy> exactly
[17:41:20] <LordKalma> I meant basic in that sense, not in the writing
[17:41:34] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[17:41:38] <LordKalma> basic as in, it's flat head screwdriver level of tooling
[17:41:51] <PJBoy> I don't agree with that
[17:41:59] <Alipha> https://github.com/alipha/cpp/tree/master/zip_iterator
[17:43:06] <PJBoy> like even when zip_view gets implemented, I don't plan on using it much at all
[17:43:14] <PJBoy> here and there, sure
[17:43:21] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[17:43:33] <LordKalma> well, in  python I end up using enumerate and zip all the time
[17:43:33] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:43:36] <LordKalma> perhaps it's a domain thing
[17:43:38] <rpav> zip is super useful
[17:43:59] <PJBoy> that's because python has awkward for loops IMO
[17:44:01] <rpav> for(auto&& [i,v] : zip(from(0), cont)) { ... }
[17:44:09] <PJBoy> you can't increment two iterators in python
[17:44:11] <rpav> c++ has pretty awkward loops too heh
[17:44:22] <PJBoy> nah C++ has great for loops
[17:44:33] <rpav> if you think that you have definitely not seem great loops ;)
[17:44:42] <lumbermb> I find it  easier to iterate by hand in C++ than to use weird zips and enumeratesand stuff, let alone trying to iterate anything in Python
[17:44:48] <PJBoy> the only thing I would change would be to allow declaring variables of more than one type
[17:45:10] <rpav> but like `size_t i = 0; for(auto&& v : vec) { ... ++i; }` sucks
[17:45:17] <rpav> adding {} around that to really scope it sucks more
[17:45:44] <rpav> non-composable iterators like `for(auto&& [i, v] : indexed(vec)) { .. }` work but suck when you want anything more complex
[17:45:49] <PJBoy> yeah but that doesn't come up too often
[17:46:01] <PJBoy> it comes up in python because python has awkward reference semantics
[17:46:17] <ville> png specification is pretty good too. they've a filter that references pixels to the "left", "up left" and "up" of the current pixel, but makes no mention what is supposed to be done for pixels that don't have those neighbors
[17:46:24] <PJBoy> so python you'd read `v` and write to `vec[i]`
[17:46:26] <rpav> it comes up quite a bit, maybe not in your code, but if you do a lot of vector iteration
[17:46:33] <PJBoy> in C++ you'd just read and write to v
[17:46:45] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint)
[17:46:51] <LordKalma> yeah, that requires enumerate indeed
[17:46:51] <rpav> you're eitehr old-style for (which sucks) or one of the other options (which suck about as much)
[17:47:04] <PJBoy> that said
[17:47:18] <rpav> like if you write a fair bit of data processing stuff this is all over
[17:47:19] <PJBoy> zip_view's most useful application is probably enumerate_view's
[17:47:55] <PJBoy> I think the old style is fine
[17:48:03] <rpav> also things like "hey i want to generate some uniform mesh" or something `for(auto&& [i,v] : zip(from(0), from_by(0.0f, 0.1f)) { ... }`
[17:48:10] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[17:48:16] <rpav> i think i need one more ) there but :p
[17:48:48] *** Joins: ravan (~ravan@user/ravan)
[17:48:59] <PJBoy> I'd write a function called `generateUniformMesh`
[17:48:59] <rpav> "hey let's enumerate map keys" or "hey let's produce a map from two vectors" or really tons of things
[17:49:03] <PJBoy> and not care what's inside
[17:49:12] <LordKalma> np.meshgrid?
[17:49:24] <rpav> yeah just handwave the problem ;)
[17:49:39] <PJBoy> I do that a lot
[17:50:27] <PJBoy> there's a point at which it becomes too easy to write complex expressions
[17:50:47] <PJBoy> where you would otherwise write a function for your task
[17:51:01] <PJBoy> and I've been finding that in python waaaaay too much recently
[17:51:12] <PJBoy> list comprehensions are write-only code
[17:51:13] <rpav> it's not really complex expressions so much as simple expressions that are complex because C++
[17:51:28] <LordKalma> hahaha list comprehensions are hilarious
[17:51:54] <LordKalma> did you know that any code that doesn't throw can be written inside a single comprehension?
[17:52:02] <PJBoy> yeah
[17:52:04] <rpav> list comprehensions are a bit too magical imo .. it's been awhile so i may not recall correctly, but they're not really nice extensible/composable things but pure magical syntax sugar
[17:52:11] <PJBoy> I've written some stupid list comprehensions before
[17:52:30] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:52:34] <PJBoy> I actually did a whole bunch of hackerrank problems using only a list comprehension
[17:52:55] <PJBoy> and print(separator.join(...))
[17:53:02] <LordKalma> when I had my basic programming course in uni my fun passtime was solving every homework with a single line
[17:53:11] <PJBoy> exactly
[17:53:28] <PJBoy> list comprehensions are great
[17:53:36] <LordKalma> which led a lot of time to uneficient iterating of the same crap 30 times
[17:53:36] <PJBoy> but with great power comes great responsibility
[17:57:19] <PJBoy> think the worst offender in this last script I wrote is
[17:57:23] <PJBoy> `p_nextTrackSet = min(p_trackSet for p_trackSet in self.trackSetPointers | {data.p_aram + len(data.data)} if p_trackSet > data.p_aram)`
[17:57:40] <PJBoy> which by itself breaks the 100 character limit some people have
[17:57:41] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:58:10] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[17:58:12] <LordKalma> just let it have multiple lines
[17:58:14] <PJBoy> actually that's not too bad
[17:59:44] <PJBoy> actually none of them are that bad anymore
[17:59:59] <PJBoy> I think I got fed up with all the truly terrible ones
[18:01:38] <PJBoy> `previousTrackPointers = [pointer for [_, trackPointers] in trackSets for pointer in trackPointers if pointer]`
[18:02:03] <PJBoy> it does take me some time to remember in what order those `for`s are interpreted
[18:02:27] <PJBoy> it's backwards compared to my intuition
[18:02:44] <LordKalma> you write code inside first with comprehension
[18:03:01] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[18:03:05] <PJBoy> that bit I remember
[18:03:10] <LordKalma> it runs as you read it out loud
[18:03:24] <PJBoy> it's the `[x for y in z for x in y]` bit that gets me
[18:03:46] <LordKalma> for x in y: for y in z: x
[18:04:06] <PJBoy> that reads incorrectly to me
[18:04:31] <PJBoy> "for y in z, for x in y, x` reads correctly to me
[18:04:45] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:19c4:12e7:c3a:930) (Quit: Quit)
[18:04:50] <rpav> zip(z | each, y | each) | collect<vector>
[18:04:53] <PJBoy> but I would never read something like that
[18:05:32] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d)
[18:05:33] <PJBoy> anyways I've learnt to interpret it as a double nested for loop
[18:05:43] <rpav> wait it _is_ a double-nested loop?
[18:05:47] <PJBoy> `for y in z: for x in y: x` is correct and accurate
[18:06:09] <PJBoy> `[x for y in z for x in y]` generates a list of all elements of all lists of z
[18:06:23] <LordKalma> `[x for y in z for x in y]` is `for x in y: for y in z: x`
[18:06:30] <rpav> oh i see .. kinda ew but i mean python right
[18:06:32] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:06:52] <LordKalma> oh no, you're right
[18:06:53] <PJBoy> equivalent to `res = []; for y in z: for x in y: res += [x]`
[18:06:59] <LordKalma> yeah, that inverted for
[18:07:01] <LordKalma> yeah
[18:07:07] <LordKalma> comprehension footguns
[18:07:23] <PJBoy> once you know how to interpret it, it's fine
[18:07:24] <rpav> list uncomprehensibles
[18:07:30] <PJBoy> it's just unintuitive to me
[18:07:30] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[18:07:39] <LordKalma> damn, I read Alipha's zip iterator file and omg
[18:07:42] <LordKalma> I can't meta program :(
[18:07:50] <LordKalma> also, a sneaky namespace std at the bottom :p
[18:07:55] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[18:08:05] <PJBoy> for std::get specialisations?
[18:08:06] <rpav> i think i might `z | each | each | collect<vector>` but i'm not sure
[18:08:08] <PJBoy> or tuple_element?
[18:08:12] <PJBoy> 'cause those are all fine
[18:08:34] <LordKalma> tuple_size and tuple_lement
[18:08:37] <PJBoy> yeah
[18:08:45] <PJBoy> you gotta do that for structured bindings
[18:08:58] <PJBoy> and tuple-like interfaces in general
[18:09:24] <LordKalma> I wish I could code like this
[18:09:30] <rond_> https://paste.mozilla.org/8wHqzmQZ  is this a valid approach to memory management and using unique_ptr?
[18:09:33] <PJBoy> link me?
[18:09:38] <LordKalma> https://github.com/alipha/cpp/blob/master/zip_iterator/zip_iterator.hpp
[18:09:42] <rond_> (and will it avoid unnecessary copies etc)
[18:09:42] <rond_> ?
[18:09:47] <LordKalma> Alipha pasted it a while ago
[18:10:06] <PJBoy> yeah and I've seen it before
[18:10:57] <PJBoy> rond_, doesn't look particularly wrong in any way
[18:11:27] <rond_> PJBoy there will be only one `A` around at all time, right?
[18:11:41] <rond_> and foo() will use move semantics, right?
[18:11:52] <PJBoy> well you make two As
[18:11:52] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:11:57] *** Joins: markong (~kvirc@dynamic-adsl-78-12-31-140.clienti.tiscali.it)
[18:11:59] <rond_> well, in foo() there will be 2 As
[18:12:06] <rond_> but outside of foo, in a while loop
[18:12:14] <PJBoy> yeah
[18:12:25] <LordKalma> I don't see how foo and smart pointers and move semantics are related
[18:12:29] <PJBoy> the return value of foo will replace the pointer to main's A
[18:12:30] <LordKalma> lots of stuff mixed in here
[18:12:39] <rond_> wdym?
[18:12:48] <PJBoy> causing the original `A`'s destruction
[18:12:48] <LordKalma> while this seems fine, it's now like anything where it's this particular combination of things that make it good
[18:13:34] <rond_> oh, no move semantics because std::make_unique allocates on heap anyway, right?
[18:13:43] <rond_> and we just return "a handle"?
[18:13:54] <LordKalma> you seem to be mixing up concepts
[18:14:35] <rond_> hmm?
[18:15:21] *** Joins: paulmcquad (~gamer@78.17.229.141)
[18:15:22] <rond_> well, there is no std::move involved here  anywhere, am I right?
[18:15:25] <PJBoy> what's you goal here?
[18:15:39] <paulmcquad> I stuck on this bit of code -> https://ideone.com/rh14pI
[18:16:05] <PJBoy> the returning of `newA` does involve "moving" the `newA`
[18:16:17] <PJBoy> so there are some minimal move semantics being demonstrated there
[18:16:19] <rond_> I want `foo()` to construct new `A` based on the old one. after this, I'm only interested in the new one
[18:16:33] <rond_> PJBoy oh, std::move of a unique_ptr, but not the content itself
[18:16:38] <PJBoy> yeah
[18:16:42] <rond_> okay, thanks!
[18:16:46] <PJBoy> unique_ptr can point to immovable objects
[18:16:54] <PJBoy> and in fact is often used for that job
[18:17:10] <rond_> my worry was that it will be a dangling pointer
[18:17:21] <rond_> but that's not the case since std::make_unique allocates on heap, right
[18:17:23] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[18:17:34] <PJBoy> it does, yeah
[18:17:38] <rond_>  it will be a dangling pointer ... after returning from foo
[18:17:47] <PJBoy> what would be dangling?
[18:17:48] <rond_> okay, great, thank you! I appreciate yhis
[18:17:56] <PJBoy> the parameter of foo?
[18:18:10] <rond_> `A` created inside foo() after the return
[18:18:24] <PJBoy> that pointer doesn't dangle
[18:18:38] <rond_> okay, thank you!
[18:18:39] <PJBoy> oh, well
[18:18:47] <PJBoy> that `newA` does get "moved from"
[18:19:07] <PJBoy> and hence gets set to nullptr for the few CPU cycles it's alive during the returning from that function
[18:19:25] <rond_> em..m I'm lost
[18:19:36] <PJBoy> yeah I dunno if I should have said that
[18:19:59] <rond_> perhaps in some time I'll be able to keep up!
[18:20:02] <rond_> in the meantime - thank you!
[18:20:03] <rond_>  :)
[18:20:35] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:20:42] <PJBoy> so you have `a` in main, the `a` parameter of `foo`, and `newA`
[18:20:57] <ezzieyguywuf> what do I define if I want my class to be iterable e.g. range-based for loop
[18:21:00] <PJBoy> that I'll refer to as a_main, a_foo and newA
[18:21:14] <LordKalma> ezzieyguywuf, https://internalpointers.com/post/writing-custom-iterators-modern-cpp
[18:21:15] <LordKalma> that
[18:21:20] <rond_> Okay, I'm listetning
[18:21:46] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 252 seconds)
[18:21:49] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:21:58] <PJBoy> at the point that newA is created, main_a and newA are both unique_ptrs to A objects that exist on the heap
[18:22:04] <paulmcquad> Update Solved it - > https://wandbox.org/permlink/YcaVyLNhwZJgBC2j
[18:22:06] <ezzieyguywuf> LordKalma: thanks.
[18:22:10] <LordKalma> np
[18:22:43] <PJBoy> at the point that newA is returned, the A pointed to by main_a is destroyed, and main_a is replaced by newA's pointer
[18:23:07] <PJBoy> and newA's pointer is set to nullptr, so that when it gets destroyed, nothing happens
[18:23:56] *** Quits: paulmcquad (~gamer@78.17.229.141) (Quit: Konversation terminated!)
[18:23:57] <PJBoy> (and it gets destroyed immediately afterwards)
[18:24:12] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[18:24:18] *** Joins: paulmcquad (~gamer@78.17.229.141)
[18:25:00] *** Joins: segnior (segnior@user/segnior)
[18:25:12] <PJBoy> that's all I had to say
[18:26:12] <LordKalma> leftime shenannigans
[18:26:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:26:14] <rond_> Okay, I understand and agree with all the steps. Thank you!
[18:26:40] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[18:26:46] <PJBoy> nice
[18:27:02] <PJBoy> well I think I did a poor job of describing that
[18:27:10] <PJBoy> so feel free to hit me up if you have questions
[18:27:22] <LordKalma> I think I finally might have in my head an architecture for qt quick plugins the way I wanna do them
[18:27:54] <rond_> PJBoy it went along with my line of thinking, so I think we're good for now :)
[18:28:03] <PJBoy> paulmcquad, you don't *necessarily* need custom iterators if there are existing iterators that would do
[18:28:26] <PJBoy> but the point under "prepare the container" is required
[18:31:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:32:02] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[18:32:30] <rond_> PJBoy btw, I managed to put std::reduce in my code (we talked about it yesterday) :)  code looks way better now, thank you :)
[18:32:46] <PJBoy> excellent
[18:32:57] <PJBoy> I've yet to use it in any of my code
[18:34:18] <PJBoy> { array a{"1"s, "2"s, "3"s, "4"s, "5"s, "6"s}; cout << reduce(RANGE(a)); }
[18:34:18] <geordi> 123456
[18:34:39] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:34:48] <PJBoy> that's non-deterministic output
[18:37:35] <rond_> I used it to get "the smallest" from the vector of objects with custom definition of "the smallest" :)
[18:37:52] <rond_> order doesn't matter for such an operation
[18:38:05] <PJBoy> yeah that's all good
[18:38:16] <rond_> min is commutative, so it's good
[18:38:23] <PJBoy> I'd probably use min_element though
[18:38:46] <rpav> reduce being unspecified-order facepalm
[18:38:57] <rond_> rpav ?
[18:39:11] <PJBoy> yeah reduce is unspecified order
[18:39:11] <rpav> reduce applies binary_op in an unspecified order
[18:39:13] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[18:39:16] <PJBoy> and accumulate is left-to-right
[18:39:22] <rond_> PJBoy wasn't aware of its existence...
[18:39:49] <PJBoy> there are many algorithms :) https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm&oldid=121505
[18:39:49] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:40:17] <rpav> really it should have been the other way around, although why they even both exist seems dubious
[18:40:29] <PJBoy> and to this day I don't know why some of them are placed in <numeric>
[18:40:47] <PJBoy> well accumulate came first
[18:40:49] <PJBoy> reduce is C++17
[18:40:55] <rond_> rpav reduce allows for parallelism and other optimizations
[18:40:59] <rpav> algorithms are placed in unspecified headers
[18:41:05] <PJBoy> when it was discovered that out of order folds are useful
[18:41:08] <LordKalma> when you guarantee order you can't simd
[18:41:13] <PJBoy> algorithms are in <algorithm>
[18:41:28] <LordKalma> (or numeric hahaha)
[18:41:43] <rpav> rond_: which would make more sense for accumulate, rather than reduce/fold :P
[18:41:51] <PJBoy> I agree
[18:42:09] <rond_> I think MapReduce follows the same non-deterministic pattern, perhaps hence the name?
[18:42:11] <PJBoy> even better would be if reduce took an argument that let you specify the fold order
[18:42:11] <rpav> actually you only _get_ the function if you #include <algorithm>, i'm pretty sure it's not guaranteed to be defined there
[18:42:28] <PJBoy> the standard provides synopses of every header
[18:42:29] <rpav> which is an annoying and uselessly pedantic argument, so i thought it suitable for C++
[18:42:42] <PJBoy> but yeah I mean
[18:42:51] <PJBoy> in practice some of those algorithms are written in xalgorithm
[18:42:53] <PJBoy> or whatever
[18:42:56] <rpav> right
[18:42:56] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[18:43:30] <rpav> if you #include <algorithm> you get them .. and #include <numeric> is definitely annoying for like some random portion
[18:43:42] <PJBoy> yeah it's weird
[18:43:52] <PJBoy> I kinda get that they're named in a numerically inclined way
[18:43:59] <rond_> PJBoy `std::min_element` reads better in my case, BUT I think that std::reduce could be potentially faster...?
[18:44:13] <rond_> is the order guaranteed in min_element? (it wouldn't make sense though)
[18:44:17] <rpav> and none of them in <functional>, which they sortof are too!
[18:44:35] <PJBoy> nah reduce surely would never be faster
[18:44:41] <rond_> why?
[18:45:26] <PJBoy> compiler should have a better idea of how to optimise the operation of getting the minimum of a sequence via min_element
[18:45:52] <rpav> i don't think you're excluded from some optimization of min because you can't reorder
[18:45:57] <PJBoy> it should be able to exploit the fact that the operation you provide is a Compare function
[18:46:12] <LordKalma> SIMD always depends on unspecified order
[18:46:16] <LordKalma> and things like that
[18:46:17] <PJBoy> meaning it returns some bool that guarantees the partial ordering semantic requirement
[18:46:37] <PJBoy> i.e. if a < b and b < c, then it doesn't need to check if a < c
[18:46:46] <PJBoy> whereas reduce could never exploit that knowledge
[18:46:55] <rond_> so std::min_element is definitely preffered in my  case. Okay, noted
[18:47:15] <PJBoy> reduce might be *as fast*
[18:47:27] <PJBoy> but I don't think it would be faster
[18:47:34] <rond_> PJBoy To be fair, both need to run the operation N-1 time (+1 with reduce having the init element)
[18:48:11] <PJBoy> also min_element doesn't need to do anything with temporaries
[18:48:22] <PJBoy> it ends up giving you an iterator to the minimum element
[18:48:23] <rpav> LordKalma: right but whereas if you say op(a,b) and the compiler knows that op(b,a) is _not_ necessarily the same, it can't reorder; but for ones it know, it ought
[18:48:32] <PJBoy> reduce has to pass the result of the fold function around
[18:48:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:48:54] <rpav> i'm not sure there's a simd min but it seems reasonable
[18:49:12] <LordKalma> you can probably simd a min with substract and flag
[18:49:13] <PJBoy> min can be parallelised pretty well
[18:49:24] <paulmcquad> PJBoy: Thanks 4 da advice.
[18:49:26] <LordKalma> but again, if you're messing with floats, they are not associative
[18:49:34] <rpav> you're _not_ messing with floats
[18:49:50] <rond_> okay, I need to run for now. Thank you all!
[18:50:00] <rpav> min(a,b) will never return a different result from min(b,a), regardless of how you implement it
[18:50:09] <rpav> i mean, or you implmented it wrong :p
[18:50:14] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[18:50:17] <rond_> perhaps one day I'll try to benchmark std::reduce vs std::min_element   - sounds like a good excercise
[18:50:18] <PJBoy> I mean
[18:50:25] <PJBoy> if a = b
[18:50:32] <LordKalma> if you have min(x,y) implemented as x-y>0 or something
[18:50:36] <LordKalma> you could have problems
[18:50:49] <rpav> likewise some min(vec<..>, vec<..>) => vec<minfloats> still has to copy the original floats, regardless of how it picks a/b
[18:51:03] <rpav> no you couldn't
[18:51:28] <PJBoy> you could if x-y overflows
[18:51:28] <rpav> the value of x-y>0 or y-x>0 is not the min value, just the test
[18:52:00] <LordKalma> ah fair
[18:52:02] <rpav> that would be a bug
[18:52:24] <PJBoy> or in the case of floats, becomes inf
[18:52:47] <rpav> actually i'm not sure that would be a problem
[18:52:54] <rpav> if it becomes -inf, it's still not >0
[18:52:55] <PJBoy> inf compares false to everything
[18:53:40] <PJBoy> or
[18:53:40] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:53:41] <rpav> << -INFINITY < 0
[18:53:41] <geordi> error: no match for 'operator<' in 'cout.ostream::operator<<((- __builtin_inff())) < 0' (operand types are 'ostream::__ostream_type' {aka 'ostream'} and 'int')
[18:53:43] <PJBoy> I thought it did
[18:53:53] <rpav> << (-INFINITY < 0)
[18:53:53] <geordi> true
[18:54:05] <PJBoy> oh fuck
[18:54:09] <PJBoy> I was thinking of NaN
[18:54:11] <PJBoy> what an idiot
[18:54:15] <rpav> nah
[18:54:32] <rpav> i can actually never remember if nan compares true or false to everythng, it just compares the same to everything
[18:54:36] * cq-work was thinking of naan... mmmmm...
[18:54:40] <rpav> and it _is_ false
[18:55:35] <PJBoy> << (NAN < 0), (NAN > 0), (NAN <= 0), (NAN >= 0), (NAN == 0), (NAN != 0)
[18:55:36] <geordi> false, false, false, false, false, true
[18:55:36] <rpav> insert rant about NaN here (also about naan, mmm)
[18:55:47] <rpav> and the best of all
[18:55:56] <rpav> << (NAN == NAN), (NAN != NAN)
[18:55:56] <geordi> false, true
[18:56:10] <PJBoy> yeah so NAN compares unequal to everything
[18:56:30] <PJBoy> and every other operation is false :/
[18:56:52] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[18:56:52] <rpav> whoa what ..
[18:56:55] <rpav> << (1.0/0.0)
[18:56:55] <geordi> inf
[18:56:56] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[18:58:27] <cq-work> And this is why floating point scares me.
[18:58:33] <PJBoy> woah what, what?
[18:58:33] <cq-work> It's *hard*. :(
[18:58:40] <PJBoy> that 1/0 is infinity?
[18:58:58] <PJBoy> my favourite thing about NaN is std::set et al
[18:59:08] <rpav> i could have sworn last i was working on this division by zero was the easiest way to silently introduce NaNs
[18:59:16] <rpav> also it _should_ be NaN
[18:59:35] <PJBoy> { set<double> s; s.insert(NAN); s.insert(1); s.insert(2); SHOW(s); }
[18:59:36] <zagura> PJBoy: Is it possible to put infinitive NANs into set?
[18:59:36] <geordi> s = {nan}
[18:59:58] <PJBoy> NaN being in a set stops any other number from being placed into that set
[19:00:06] <rpav> yeah nans will kill all the things and make your program blow up in seemingly impossible ways
[19:00:14] <lumbermb> can nan  be *removed* from such a set?
[19:00:24] <rpav> probably not
[19:00:27] <rpav> i mean without clear()
[19:00:45] <lumbermb> silly, now I know how to trick coworkers in their tests, thanks!
[19:00:51] <rpav> though tbh inserting floats into a set or as map keys is probably a bad idea, but
[19:01:14] <zagura> { set<double s; s.insert(NAN); cout << s.contains(NAN);}
[19:01:14] <geordi> error: template argument 1 is invalid
[19:01:23] <zagura> { set<double> s; s.insert(NAN); cout << s.contains(NAN);}
[19:01:23] * LordKalma enables -ffast-math and runs away
[19:01:23] <geordi> true
[19:01:23] <PJBoy> { set<double> s; s.insert(NAN); s.erase(NAN); SHOW(s); }
[19:01:24] <geordi> s = {}
[19:01:43] <LordKalma> geordi, -ffast-math
[19:01:43] <geordi> error: No such option: -f
[19:01:44] <PJBoy> yeah you can remove the nan
[19:01:54] <LordKalma> geordi, use -ffast-math
[19:01:54] <geordi> Same error.
[19:01:59] <LordKalma> oh fuck you geordi hahah
[19:02:03] <PJBoy> it's not GCC
[19:02:21] <lumbermb> geordi, play Despacito
[19:02:21] <geordi> error: 'play' does not name a type
[19:02:41] <PJBoy> { set<double> s{1, 2, 3, 4}; s.erase(NAN); SHOW(s); s.erase(NAN); SHOW(s); }
[19:02:41] <geordi> s = {2, 3, 4} s = {3, 4}
[19:02:45] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:02:51] <PJBoy> sets really do not like NaN
[19:03:01] <lumbermb> nifty
[19:03:35] <PJBoy> { multiset<double> s{1, 2, 3, 4}; SHOW(s); s.erase(NAN); SHOW(s); }
[19:03:36] <geordi> s = {1, 2, 3, 4} s = {}
[19:04:05] <zagura> Kinda mindblowing
[19:04:30] <LordKalma> everything matches NAN?
[19:04:33] <LordKalma> but they are all numbers
[19:04:37] <LordKalma> how can they match NAN?
[19:04:40] <rpav> really i just want the program to crash if /0 happens or NaN is encountered
[19:04:41] <LordKalma> I'm outta here
[19:04:49] <cq-work> << (NAN < NAN), (NAN > NAN)
[19:04:50] <geordi> false, false
[19:04:50] <PJBoy> NaN compares less than everything
[19:04:56] <PJBoy> *NaN compares less than nothing
[19:05:03] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[19:05:10] <cq-work> << (NAN < 1.0), (NAN > 1.0)
[19:05:11] <geordi> false, false
[19:05:59] <PJBoy> so internally when the set's doing `if (*it < key || key < *it)`
[19:06:03] <PJBoy> that always ends up being false
[19:06:20] <PJBoy> so any element "matches" NaN
[19:06:21] <rpav> it compares less than neither! and both!
[19:06:21] <cq-work> Yep.
[19:06:28] <cq-work> So it thinks its equal.
[19:06:54] <rpav> NAN < 0.0 (less than nothign, false!) NAN < numeric_limits<float>::min() (less than everything, false!)
[19:07:06] <PJBoy> or in a more standardese way, NaN breaks the Compare requirements, leading to UB
[19:08:03] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:08:44] <cq-work> { set<double> s{1, 2, 3, NAN}; SHOW(s); }
[19:08:45] <geordi> s = {1, 2, 3}
[19:09:03] <PJBoy> I dunno if NaN comparing false for all ordered comparisons makes any sense
[19:10:13] <PJBoy> ah that's cool
[19:10:18] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[19:10:20] <PJBoy> NaN can only be inserted if the set is empty
[19:10:29] <PJBoy> and in that case, nothing else can ever be inserted into the set
[19:10:44] <PJBoy> so if you ever stumble across this NaN behaviour, it should be obvious
[19:11:00] <PJBoy> well
[19:11:09] <PJBoy> unless you depend on those NaN insertions succeeding
[19:11:39] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[19:11:42] <PJBoy> but you can check for that so
[19:12:11] <cart_man> What is an easy way to get the Key from a std::map<std::string, int> x;   When you know the index of the Key you want to access?
[19:12:23] <rpav> "index of the key"?
[19:12:25] <PJBoy> what's an index
[19:12:43] <cart_man> rpav: PJBoy  ,,, as in I know the lement I want to access is on 3
[19:12:48] <cart_man> so ... x.at(3)
[19:12:49] <PJBoy> what does that mean?
[19:13:04] <PJBoy> like the fourth smallest element?
[19:13:18] <cart_man> PJBoy: No the third element in the map
[19:13:22] <rpav> it definitely isn't "on 3" unless you mean the pair<string,int>::second's value is 3
[19:13:26] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[19:13:27] <PJBoy> what's the third element of a map?
[19:14:01] <rpav> maps are not totally ordered or whatever
[19:14:09] <PJBoy> that'd be `*std::next(std::begin(the_map))` if you wanted what I said
[19:14:19] <PJBoy> *that'd be `*std::next(std::begin(the_map), 3)` if you wanted what I said
[19:14:24] <cart_man> rpav:  PJBoy lol  ... ok so if I add 3 elements via std::map::insert into the same map.   now I want an easy way to access the third element that I pushed knowing in which order it was inserted
[19:14:52] <PJBoy> you want the third chronologically inserted element?
[19:15:03] <cart_man> PJBoy: If that is possible
[19:15:09] <PJBoy> std::map has no concept of insertion order
[19:15:09] <rpav> cart_man: you want a vector, not a map; if you insert 3 things, it may not be the 3rd thing iterated in any particular way
[19:15:16] <cart_man> I mean ... How does map::begin() know which one is first etc
[19:15:24] <PJBoy> it picks the smallest element
[19:15:26] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[19:15:30] <rpav> cart_man: https://en.wikipedia.org/wiki/Binary_tree
[19:15:39] <PJBoy> (the element with the smallest key)
[19:15:43] <rpav> cart_man: (although to be accurate, it's usually a red-black binary tree)
[19:15:44] <cart_man> rpav: Yea I though so but I though they might have a way to do it
[19:15:48] <rpav> they don't
[19:16:11] <rpav> if you want an ordered thing like that, perhaps also keep a vector of pointers to map pairs or values
[19:16:32] <rpav> note the performance of this sucks on some scales, but if you're using map probably it's not an issue ;)
[19:16:50] <PJBoy> std::set iterators satisfy the property `*it < *next(it)`
[19:16:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:16:57] *** Joins: pah (~pah@user/pah)
[19:16:58] <rpav> (i.e. map is already at least as slow, your'e not losing anything)
[19:17:51] <rpav> PJBoy: true although that's only because you define an additional ordering or whatever, like "iterated depth first"
[19:18:18] <rpav> er
[19:18:27] <rpav> wait values, that's different
[19:19:47] <rpav> and thinking slightly about it, i'm not sure you could efficiently implement a comparison of iterators, though certianly you could define it relative to such
[19:21:02] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[19:21:44] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:21:53] <cart_man> Its actually quite silly why you are unable to access a map via .at() really ... I mean if you iterate over it the order will always stay the same if it wasn't modified. Perhaps its just a logistical issue with the pointers pointing to the next pair
[19:22:33] <PJBoy> you seem to be confusing chronological order with numerical order
[19:23:02] <PJBoy> also std::map does have .at()
[19:23:26] <PJBoy> it takes a key and promises not to modify your map, unlike operator[]
[19:23:41] <cart_man> PJBoy: Ok so its an error on my part
[19:23:45] <cart_man> PJBoy: Yea that part I get
[19:23:52] *** Quits: magla (~gelignite@55d47f25.access.ecotel.net) (Quit: Stay safe!)
[19:24:47] <cart_man> PJBoy: But if you say auto x = list.at(0)  where list is std::map<std::string, int >  then what can you do it in terms of getting the key or value?
[19:24:55] <cart_man> stored in x
[19:25:32] <PJBoy> did you mean like
[19:25:39] <PJBoy> list.at("string")?
[19:26:17] <cart_man> PJBoy: Yea lets say
[19:26:21] <cart_man> so now you have x
[19:27:14] <PJBoy> well x is just an int
[19:27:20] <PJBoy> so there's nothing more you can do
[19:27:50] <PJBoy> { auto x = List.at("a"); cout << x; } map<string, int> List{{"a"s, 22}};
[19:27:51] <geordi> 22
[19:27:56] <rpav> well, you do get a reference, so you could set it or something
[19:28:05] <PJBoy> x isn't a reference there
[19:28:12] <rpav> well right in your example
[19:28:29] <PJBoy> the reference you get from .at() is immutable anyway
[19:28:38] <PJBoy> oh wait, no
[19:28:42] <PJBoy> because it's a reference to the value
[19:28:45] <rpav> yea it's not the pair
[19:29:35] <cart_man> Whow this leaves me with some bad design choices to overt this
[19:29:54] <PJBoy> if you're just looking for the smallest element, then you have .begin and stuff
[19:30:00] <cart_man> I am not a big fan of maps
[19:30:45] <cart_man> PJBoy: Yea but now I need to iterate and add a counter to the iterator to simply check iterate_counter == Known_index ... Get key there... whow
[19:30:51] <PJBoy> { auto x = *List.begin(); cout << x.first, x.second; } map<string, int> List{{"a"s, 22}, {"b"s, 44}, {"c"s, 88}};
[19:30:51] <geordi> a, 22
[19:30:53] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:31:01] <PJBoy> well that's what next is for
[19:31:12] <PJBoy> { auto x = *next(List.begin(), 2); cout << x.first, x.second; } map<string, int> List{{"a"s, 22}, {"b"s, 44}, {"c"s, 88}};
[19:31:13] <geordi> c, 88
[19:31:18] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 260 seconds)
[19:31:34] <cart_man> PJBoy: so I just next know_index amount of times?
[19:31:42] <cart_man> hmmm ... ok ok fair.. its atleast better id say
[19:31:50] <PJBoy> yeah
[19:31:56] <PJBoy> as long as we're clear that it's element order
[19:32:01] <PJBoy> not chronological order of insertion
[19:32:12] <PJBoy> { auto x = *next(List.begin(), 2); cout << x.first, x.second; } map<string, int> List{{"c"s, 88}, {"a"s, 22}, {"b"s, 44}};
[19:32:13] <geordi> c, 88
[19:32:13] <rpav> also don't iterate it by index, or it's n^2
[19:32:36] <PJBoy> (notice how c,88 is the first element)
[19:33:06] <rpav> (iterate and keeping track of what element, obviously, if you need that)
[19:33:25] <rpav> keep, sheesh i can't grammar this morning
[19:33:39] <PJBoy> also there's like flat_map and stuff
[19:34:00] <rpav> also there's vector
[19:34:42] <rpav> if you don't need to modify a lot, and you do need to iterate a lot, and you want to get the nth element a lot, and you also want reasonably efficient by-key lookup a lot, vector!
[19:34:54] <rpav> maybe flat_map is basically a wrapped vector?
[19:34:59] <cart_man> rpav: I would rather take two vecors than one map I swear!
[19:35:04] <PJBoy> boost::flat_map provides your map interface, but also provides .nth() for indexed access
[19:35:11] <rpav> cart_man: nah map's fine for simple stuff
[19:35:15] <PJBoy> and is implemented over a vector
[19:35:24] <rpav> PJBoy: yeah std really really ought to have that
[19:35:33] <rpav> and open()/close() for insertion
[19:36:05] <PJBoy> you know what would be mildly cool
[19:36:05] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:36:29] <PJBoy> some kind of optional const wrapper
[19:36:44] <PJBoy> like how with optional you can either have an object or an empty state
[19:36:58] <PJBoy> the const wrapper you'd either have a mutable object or a const object
[19:37:20] <PJBoy> but I guess that'd be impossible
[19:37:22] <rpav> weird .. how would you use it / what does this address
[19:37:34] <PJBoy> although idk
[19:37:49] <PJBoy> anyways it'd be cool to make an object const for some period of time
[19:38:09] <PJBoy> or un-const an object for a period of time
[19:38:48] <PJBoy> like if you could make const_optional<std::map>, and insert all the elements, and set it to const afterwards
[19:38:58] <PJBoy> so that operator[] doesn't cause insertions or whatever
[19:39:06] <rpav> well "time" in code is "as statements/expressions progress", so you can `const auto& cobj = obj;`
[19:39:21] <PJBoy> yeah
[19:39:28] <rpav> i think with mutating variable types you could sortof get what you want
[19:39:43] <PJBoy> but I've already lost interest so
[19:39:47] <PJBoy> not *that* cool
[19:40:10] <rpav> i.e. `now x = foo(x)` would make `x` basically shadow `x` from that point in the code
[19:40:18] <rpav> useful for a number of things actuallly
[19:40:36] <rpav> you could `now x = hide(x); // return const T&` and later `now x = unhide(x);`
[19:40:39] <rpav> or whatever
[19:41:45] <rpav> basically like any other declaration, you can't skip over it, it's just shadowing the prior declaration in the same scope .. i think it was the mechanic that would allow "you must call foo() prior to dtor, or it's a static error" to work
[19:44:56] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:45:18] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[19:45:58] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:b7bd:762f:aaf3:9c93)
[19:45:58] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:b7bd:762f:aaf3:9c93) (Changing host)
[19:45:58] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:49:33] <PJBoy> sounds kinda nasty
[19:49:58] <PJBoy> any operation that could throw an exception would require you to call foo() first
[19:49:58] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:50:54] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[19:51:00] <rpav> not if you try/catch
[19:51:18] <rpav> i forget in what context this was useful/necessary
[19:58:59] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:01:09] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:05:44] *** sonOfRa_ is now known as sonOfRa
[20:05:46] *** Joins: magla (~gelignite@55d47f25.access.ecotel.net)
[20:05:50] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:08:34] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[20:10:20] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[20:10:25] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:14:15] *** Joins: Leone (~Leo@216.154.21.17)
[20:17:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:26:33] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:30:25] *** Quits: markong (~kvirc@dynamic-adsl-78-12-31-140.clienti.tiscali.it) (Ping timeout: 260 seconds)
[20:32:40] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:44:45] *** Quits: Christ0pher (~anunnaki@c-174-54-139-228.hsd1.pa.comcast.net) (Quit: leaving)
[20:59:01] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:59:22] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:b7bd:762f:aaf3:9c93)
[20:59:22] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:b7bd:762f:aaf3:9c93) (Changing host)
[20:59:22] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:03:40] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 260 seconds)
[21:11:59] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[21:13:51] *** Quits: r-g (~r-g@51.158.144.32) (Quit: r-g)
[21:13:52] <rond_> I have a header file with a constructor that gets a default argument. Then I have a .cpp file that implements this construtor. should I not provide the default value for this mentioned default argument?
[21:14:14] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 268 seconds)
[21:14:47] <rond_> header:  A(bool flag=false);     .cpp file: A(bool flag){...}   that's how it should be done?
[21:16:24] <kalven> yes
[21:17:10] <ville> default arguments go to the {,first} declaration. the calling site needs to be able to see the default arguments so you can omit the arguments
[21:17:44] <rond_> I'm not sure I understand what you say
[21:17:46] <ville> there's some shenanigans with regards to different declarations having default arguments. possibly different ones. don't bother with that
[21:18:03] <ville> trying to explain to you why they go to the declaration
[21:18:35] <ville> in the general case you call a function you only have the declaration visible. you for example included a header with the declaration.
[21:19:19] <rond_> okay, thanks!
[21:19:30] <ville> for the compiler to know that an N-ary function may be called N-K arguments it needs to see a declaration with the default arguments at the location where it is parsing the call
[21:19:31] *** Quits: leviathan (~dr_leviat@2600:1700:dad0:9870:6108:12de:7f0:6df8) (Remote host closed the connection)
[21:20:10] <ville> void f(int); f(); void f(int x = 0);
[21:20:24] <ville> the second declaration is too late with the default argument
[21:25:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[21:26:59] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:28:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:36:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:36:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:37:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:02] *** ChanServ sets mode: +v npaperbot
[21:37:08] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:42:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[21:42:25] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:51:12] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:56:11] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:05:15] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:17:02] *** Joins: Raziel (~Raziel@user/raziel)
[22:17:30] *** Quits: Raziel (~Raziel@user/raziel) (Client Quit)
[22:17:51] *** Joins: Raziel (~Raziel@user/raziel)
[22:19:06] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[22:21:22] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:24:10] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[22:26:13] <cart_man> PJBoy:Alipha Ok soo ... if I have a map<std::string, int> x;    What will be the best way of getting the lowest three numbers in list x.second?
[22:27:02] <PJBoy> lowest three numbers as in the lowest three ints?
[22:27:11] <PJBoy> and just the ints, or the corresponding strings?
[22:27:14] <cart_man> PJBoy: Yes the lowest three ints
[22:27:22] <rond_> you need to traverse the whole data structure
[22:27:40] <cart_man> PJBoy: Well I will extract the string for later use determined on third lowest to lowest
[22:27:55] <PJBoy> so you want the key-value pairs of the lowest three ints
[22:28:01] <cart_man> PJBoy: Yes
[22:28:14] <Alipha> cart_man: why don't you have a map<int, string>?
[22:28:16] <PJBoy> first thought that comes to mind is partial_sort_copy
[22:28:40] <cart_man> Alipha: Cause the ID is a hash
[22:28:41] <PJBoy> with a comparison functor that compares the `.second`s
[22:28:57] <rond_> you don't need to sort the whole list when only top3 is neeede
[22:28:59] *** Joins: reumeth (~reumeth@user/reumeth)
[22:29:10] <PJBoy> hence partial_sort
[22:29:46] <rond_> woah
[22:29:52] <rond_> I need to learn more std
[22:29:55] <Alipha> cart_man: so?
[22:30:39] <LordKalma> no no,, today we learned the stdlib is bad
[22:30:39] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:30:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:31:00] <cart_man> LordKalma: We did?
[22:31:13] <cart_man> Alipha: I find editing products on the hash as key is easier
[22:31:15] <LordKalma> some arrogant ass
[22:31:30] <cart_man> and it wasn't me?
[22:32:04] <PJBoy> oh never mind
[22:32:13] <rond_> LordKalma what
[22:32:25] <PJBoy> actually nvm that nvm
[22:32:25] <cart_man> LordKalma: lol no it wasnt me
[22:32:51] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[22:32:52] <LordKalma> no, it was "manjaro-user"
[22:34:57] <Alipha> cart_man: so, if needing the lowest 3 ints is a one time or infrequent action, then looping over the whole map to find them would probably be the best solution (perhaps with partial_sort_copy). If finding the 3 lowest ints is a frequent thing, then you may want to have both a map<string, int> and map<int, string> and keep them in sync
[22:35:23] <rond_> actually
[22:35:26] <rond_> map is ordered, isn't it?
[22:35:36] <rond_> oh, by strings
[22:35:37] <rond_> nvm
[22:36:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[22:37:43] <PJBoy> here's the partial_sort_copy solution https://wandbox.org/permlink/SUwL3RgiLoSTZOJc
[22:38:50] <rond_> nota that it's C++20
[22:38:53] <rond_> note*
[22:39:00] <Alipha> rond_: that's why I suggested also having a map<int, string>, so that map would be ordered by the ints
[22:39:12] <PJBoy> it's C++20 if you use the ranges version
[22:39:28] <PJBoy> can be made C++11 if you're willing to type out begin and end four times
[22:40:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:40:39] <cart_man> PJBoy: Lol well the rest of my app runs in C++17 soo .... I am hoping there isn't some punishment for using c++17 though
[22:41:01] <PJBoy> nah I just went for brevity
[22:41:10] <cart_man> PJBoy: Btw that is a really good solution ... what are the pitfalls of it though?
[22:41:15] <cart_man> What shouls I look out for?
[22:41:40] <PJBoy> if your map has less than 3 elements?
[22:41:49] <PJBoy> that's the only possible mistake I can think of
[22:42:37] <PJBoy> also my compare lambda takes its elements by value
[22:42:47] <PJBoy> so if your strings are larger than 16 characters or whatever
[22:42:54] <PJBoy> then consider switching that to const auto&
[22:43:29] <cart_man> PJBoy: Should I use this -> array<element_t, 3>   or can I use std::map ?
[22:43:34] <PJBoy> also it is n log(n)
[22:44:26] <PJBoy> I assume you can put the results into another map
[22:44:30] <PJBoy> actually no
[22:44:44] <PJBoy> the destination range must be random accessable
[22:45:31] <PJBoy> due to the magic of heap sort
[22:47:46] <AmR> Any one working with soci project ?
[22:47:50] <PJBoy> but also because the number of elements to copy is specified by distance(it_out_begin, it_out_end)
[22:50:50] <cart_man> PJBoy: Thanks man
[22:51:06] <cart_man> Is it possbile to return a std::pair<> from a std::map<> ?
[22:51:33] <cart_man> std::pair<string , int> func (){}
[22:51:47] <cart_man> std::pair<string , int> func ( std::map<string, int> x){}
[22:51:54] <PJBoy> depends
[22:52:07] <PJBoy> map deals in pair<const Key, Value>
[22:52:28] <PJBoy> so if you do any of the methods that give you an iterator, deferencing that iterator will give you that ^
[22:52:46] <PJBoy> if you need a mutable string in your pair, then you'll have to make the pair yourself
[22:53:17] <cart_man> PJBoy:  Hmmm ... so I can potentially return (*it)  ... I dont need a muteable one at least.
[22:53:25] <PJBoy> yeah
[22:53:36] <cart_man> Ok cool
[22:53:59] <PJBoy> { auto el = *begin(List); cout << el; } map<string, int> List{{"a"s, 22}, {"b"s, 44}, {"c"s, 88}};
[22:54:00] <geordi> {"a", 22}
[22:54:20] *** Joins: pulse (~pulse@user/pulse)
[22:59:08] *** Quits: paulmcquad (~gamer@78.17.229.141) (Quit: Konversation terminated!)
[23:01:03] <cart_man> PJBoy:  lol this worked -> https://wandbox.org/permlink/UI7PdyaiSxygm9Ee
[23:02:28] <AmR> Any one working with soci project ?
[23:07:30] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[23:15:59] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[23:18:40] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:22:27] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d) (Quit: Client closed)
[23:24:03] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:27:26] *** Quits: lumbermb (~lumbermb@190.13.136.234) (Ping timeout: 260 seconds)
[23:38:43] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[23:39:00] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d)
[23:40:00] <rond_> https://github.com/TheLartians/ModernCppStarter    <- is this considered good? is it advised to follow it?
[23:49:04] <urdh> rond_: not very impressed by some of that cmake
[23:49:12] <urdh> might be some good bits in there though, I dunno
[23:50:01] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[23:50:07] <rond_> urdh would you advise another starting point?
[23:50:52] <urdh> I would probably go for something meson-based
[23:51:13] <urdh> but it really depends on quite a lot of specifics/context of whatever you're doing
[23:51:54] <urdh> target environment, familiarity, blah blah blah
[23:52:12] <rond_> i'd rather stick with CMake as it's well integrated with my IDE
[23:52:22] <urdh> I don't think there's any "silver bullet" project template for C++ to be honest, the ecosystem is much to diverse
[23:52:24] <ashafq> rond_: https://github.com/cpp-best-practices/cpp_starter_project
[23:53:10] <ashafq> urdh: how is meson for integrating with conan?
[23:53:33] <rond_> urdh that's really a shame if you ask me
[23:53:53] <rond_> ashafq have you ever used it? do you think it's better than the one I suggested?
[23:54:07] <ashafq> rond_: I took parts of that
[23:56:02] <urdh> ashafq: meson prefers their own `wrap` thing IIRC
[23:56:19] <urdh> haven't dealt much with Conan though, there might be something
