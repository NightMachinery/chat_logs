[00:03:10] <FromDiscord> <Varriount> In reply to @haxscramper "The safest way would": You can use one of the unsafe copying mechanisms, but that will only work for types that aren't or don't contain references.
[00:03:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[00:03:50] *** Joins: supakeen (~user@python/site-packages/supakeen)
[00:05:13] <FromDiscord> <Varriount> @Zevv Zevv: Also, it seems that when I enable `npegTrace`, my program just crashes somewhere in the parsing code (this was in an attempt to debug a "backtrace depth exceeded" error).
[00:14:00] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3yp8
[00:14:12] <FromDiscord> <aleclarson> (edit) "https://play.nim-lang.org/#ix=3yp8" => "https://play.nim-lang.org/#ix=3yp9"
[00:16:07] <FromDiscord> <haxscramper> this is not an error, it is a warning
[00:16:59] <FromDiscord> <haxscramper> also, please, don't raise `Defect` of all things
[00:17:32] <FromDiscord> <aleclarson> does it matter that i raise Defect? \:P
[00:18:25] <FromDiscord> <haxscramper> with `--panics:on` defects can't be caught, raising defect is probably second worst thing, with first one being `Exception` root - it does not provide any meaning whatsoever
[00:18:34] <FromDiscord> <haxscramper> There are things like `KeyError`, or `ValueError`
[00:19:01] <FromDiscord> <haxscramper> And `Cannot prove that 'result' is initialized.` is probably prover being stupid
[00:19:07] <FromDiscord> <haxscramper> this has been a warning for as long as I can remember
[00:19:18] <FromDiscord> <haxscramper> And I can bet it will never be turned into an error
[00:19:36] <FromDiscord> <aleclarson> good to know thx!
[00:19:58] <FromDiscord> <haxscramper> But back to `Defect` - I personally recommend never, ever touching it in any form
[00:20:03] <FromDiscord> <haxscramper> Especially raising it in your code
[00:25:45] <FromDiscord> <haxscramper> In reply to @aleclarson "good to know thx!": https://forum.nim-lang.org/t/7983#52131
[00:26:52] <FromDiscord> <haxscramper> If you need more thorough reasoning about `Defect`
[00:54:42] <FromDiscord> <ant1fact> In general, which approach is faster: strscans, parseutils or regex?
[01:47:15] <FromDiscord> <treeform> I think it always depends, you can just measure things with https://github.com/treeform/benchy
[01:47:17] <nrds> <12R2D299> 4GitHub: 7"Benchmarking."
[01:48:36] <FromDiscord> <treeform> my gut feeling that writing your own little parser would always be faster... that just walks the characters and populates the fields.
[02:21:33] <arkanoid> is there a shortcut for float countup for loops? like "for i in countup(0.0, 1.0, 0.2)"
[02:22:42] <arkanoid> system.countup likes ordinal only
[02:24:41] <NimEventer> New post on r/nim by G_Lasso: Drawim: a simple drawing library in Nim, inspired by p5js, see https://reddit.com/r/nim/comments/pl7k4b/drawim_a_simple_drawing_library_in_nim_inspired/
[02:25:28] <FromDiscord> <Elegantbeef> Seems liike there is not arkanoid so time to make your own 😀
[02:25:44] <arkanoid> sure, it's trivial
[02:25:56] <arkanoid> but quite surprised about the lack of it in system
[02:27:50] <FromDiscord> <Elegantbeef> Well it's relatively specialized as i dont think i've ever used that 😀
[02:37:43] <arkanoid> well counting from 0.0 to 1.0 it quite important in many calculations. Geometry for example
[03:06:24] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[03:11:36] <FromDiscord> <Varriount> arkanoid: There's no float countup because it's not accurate.
[03:14:49] <FromDiscord> <Varriount> arkanoid: For example, as I understand it, `var x = 0.0; for _ in 0..100: x += 20.0` will be different from `var x = 0.0; for _ in 0..20: x += 100.0`
[03:21:50] <FromDiscord> <RattleyCooper> In reply to @arkanoid "well counting from 0.0": Yeah, but counting up from 0.0 to 1.0 takes forever
[03:22:15] *** Joins: audiophile_ (~audiophil@user/audiophile)
[03:22:45] <arkanoid> Varriount sure, just like any other float operation
[03:23:44] <FromDiscord> <jos> is it expected that the destructor won't be called unless using the new operator? i don't understand why a ref type and new are being treated different
[03:23:46] <FromDiscord> <jos> using refcounting gc btw
[03:23:50] <arkanoid> interpolation, lerping, and animations in general really like 0.0 to 1.0 stuff
[03:24:06] <FromDiscord> <Varriount> @RattleyCooper Reminds me of the Mathmagician's staircase to infinity in The Phantom Tollbooth
[03:24:10] <arkanoid> RattleyCooper, that's why I added a third argument
[03:29:04] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:29:47] <FromDiscord> <RattleyCooper> In reply to @arkanoid "<@408056314342932491>, that's why I": Yeah I'm just making a bad joke 😛
[03:34:34] <FromDiscord> <jos> is there a way to have `type Test = ref object` have a destructor?
[03:34:55] <FromDiscord> <jos> when using one of the refcounting gcs
[03:35:24] <FromDiscord> <Elegantbeef> The destructor should work but it requires the GC to kick in afaik
[03:35:52] <FromDiscord> <jos> i can't even declare one because i get this error
[03:35:53] <FromDiscord> <jos> prog.nim(19, 1) Error: signature for '=destroy' must be proc[T: object](x: var T)
[03:35:55] <FromDiscord> <Elegantbeef> So it doesnt behave predictably
[03:36:04] <FromDiscord> <jos> type Test = ref object↵↵proc `=destroy`(test: var Test) = ↵  echo "destroy called"
[03:36:23] <FromDiscord> <jos> if there are no circular refs i would expect it to be predictable from what i read about ORC
[03:36:28] <FromDiscord> <jos> but i can't even declare it :S
[03:36:54] <FromDiscord> <jos> if i do `type Test = ref object` -> `type Test = object`, then that error goes away
[03:37:03] <FromDiscord> <jos> but then i have to manually heap allocate all my Test's with new()
[03:37:13] <FromDiscord> <jos> and i have to use `ref` whenever i pass em around
[03:37:19] <FromDiscord> <jos> i may be misunderstanding something tho
[03:39:04] <FromDiscord> <Elegantbeef> I havent used destructors so i could be wrong that they work with `ref`
[03:39:36] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:41:13] <FromDiscord> <Elegantbeef> It does work with distincts
[03:42:39] <arkanoid> how can I wait keyboard arrow press in terminal?
[03:42:45] <arkanoid> without waiting for following enter
[03:46:44] <FromDiscord> <jos> @ElegantBeef is a distinct like a unique ptr in other langs?
[03:47:18] <FromDiscord> <Elegantbeef> Nah distinct in nim is a type system unique type
[03:47:42] <FromDiscord> <Elegantbeef> `type NotInt = distinct int` `assert NotInt isnot int`
[03:52:35] <FromDiscord> <jos> i don't really understand, does this help me address the same use case as a ref somehow?
[03:52:48] <FromDiscord> <jos> from what i'm reading it's just a typedef that can't be coerced but idk
[03:54:09] *** Quits: max22- (~maxime@2a01cb08833598004190beef1e8cf3bf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:54:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ypQ
[03:54:16] <FromDiscord> <Elegantbeef> But i dont know the proper way about this
[03:54:23] <FromDiscord> <Elegantbeef> So probably disregard me
[03:56:38] <FromDiscord> <jos> oh interesting
[03:56:40] <FromDiscord> <jos> that could work
[03:56:41] <FromDiscord> <jos> thanks
[03:56:43] <FromDiscord> <jos> (edit) "thanks" => "thanks!"
[03:57:25] <FromDiscord> <Elegantbeef> You will have to make your own properties to access the fields which kinda sucks, but like i said i dont know if there is a better way \:D
[03:57:34] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[03:58:54] <FromDiscord> <leorize> `{.borrow: `.`.}` to borrow all the fields
[03:59:14] *** Joins: audiophile_ (~audiophil@user/audiophile)
[03:59:29] <FromDiscord> <Elegantbeef> Ah yea that makes sense
[04:05:09] <FromDiscord> <jos> how do i construct the distinct type?
[04:06:26] <FromDiscord> <jos> is there a way to use the nice Type(field, field, field) syntax but still construct a type as a ref?
[04:06:43] <FromDiscord> <jos> i see new(Type) works with my distinct type
[04:06:53] <FromDiscord> <jos> but the other syntax doesn't work
[04:07:18] <FromDiscord> <leorize> you construct the original type then convert it to the distinct one
[04:07:26] <FromDiscord> <Elegantbeef> you can do `Inner(Test(a: 100))`
[04:07:29] <FromDiscord> <jos> oh nice!
[04:07:31] <FromDiscord> <jos> i like that 🙂
[04:07:37] <FromDiscord> <jos> nim is so cool
[04:07:43] <FromDiscord> <jos> i can't wait until it supports incremental compilation :^)
[04:07:58] <FromDiscord> <Elegantbeef> I'd expect most people would find what we had to do more annoying than cool P
[04:08:51] <FromDiscord> <jos> true but in a lot of other languages you're just screwed :^)
[04:34:34] <FromDiscord> <RattleyCooper> Hey beef, you think you'd ever create a repo for the `NettyStream` type from nettyrpc?
[04:35:31] <FromDiscord> <Elegantbeef> Nah cause i'll be removing it for frosty when 1.6 is stable
[04:36:08] <FromDiscord> <RattleyCooper> ok
[04:36:44] <FromDiscord> <Elegantbeef> Both frosty and flatty offer better serialization
[04:49:17] <FromDiscord> <cabboose> haxscramper is making a c header parser or something right
[04:49:44] <FromDiscord> <cabboose> we should band together and make one before he does; except it’s filled with raise Defects
[04:50:04] <FromDiscord> <cabboose> no exceptions allowed except Defect and Exception
[04:50:27] <FromDiscord> <cabboose> And the module has a exitproc that raises Defect too
[04:50:35] <FromDiscord> <cabboose> in fact; why not just raise Defect when you import the module
[04:50:40] <FromDiscord> <cabboose> beautiful
[04:52:27] <FromDiscord> <Elegantbeef> Sounds lovely, now where does this idea come from?
[04:53:48] <FromDiscord> <cabboose> Such passion
[04:53:56] <FromDiscord> <cabboose>  https://media.discordapp.net/attachments/371759389889003532/885681959957839892/image0.png
[04:55:07] <FromDiscord> <Elegantbeef> I mean anyone with a brain will say what hax said
[04:55:13] <FromDiscord> <cabboose> Of course
[04:55:31] <FromDiscord> <cabboose> But doesn’t it just make you itch to sprinkle some defects into his life
[04:55:50] <FromDiscord> <Elegantbeef> Not really cause i also have similar views to him with regards to defects
[04:55:50] <FromDiscord> <Varriount> In reply to @cabboose "haxscramper is making a": Doesn't Nimteropt already do that?
[04:56:26] <FromDiscord> <cabboose> I can’t remember exactly what he’s making but it’s beyond the current design as far as i remember
[04:56:33] <FromDiscord> <cabboose> something super hacky
[04:57:32] <FromDiscord> <Elegantbeef> https://github.com/haxscramper/hcparse
[04:57:34] <nrds> <12R2D299> 4GitHub: 7"High-level nim bindings for parsing C/C++ code"
[04:58:07] <FromDiscord> <cabboose> There you go
[05:03:35] <FromDiscord> <leorize> bummer, I raise Defect a lot, didn't know it was so evil
[05:03:37] <FromDiscord> <leorize> time to raise more of them
[05:04:01] <FromDiscord> <Elegantbeef> I mean it's only evil if people dont understand what they mean and what they do
[05:04:35] <FromDiscord> <Elegantbeef> You know what they do so i trust you! 😛
[05:06:10] <FromDiscord> <cabboose> A man after my own heart :’)
[05:40:27] *** Joins: neurocyte6 (~neurocyte@user/neurocyte)
[05:42:30] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:42:30] *** neurocyte6 is now known as neurocyte
[05:58:49] <FromDiscord> <auxym> so... this has nothing to do with nim, but I'll try anyways since you guys are cool: say I have the following C macro defined: `#define MTB_BASE 0x41006000UL`. And a struct defines a field of the same name `typedef struct {... uint32_t MTB_BASE ...} MTB_Type`. Any way to access that struct field like  `mtb->MTB_BASE` by preventing macro expansion somehow?
[05:59:46] <FromDiscord> <leorize> wdym prevent macro expansion?
[06:00:09] <FromDiscord> <auxym> prevent `MTB_BASE` from being replaced by `0x...`
[06:00:31] <FromDiscord> <leorize> you rename the C macro \:)
[06:00:31] <FromDiscord> <Elegantbeef> Welcome to preprocessor hell
[06:00:45] <FromDiscord> <auxym> ps. this is from code being generated by ARM's SVDConv tool, for which they don't provide code, and produces question results, like this
[06:00:51] <FromDiscord> <auxym> yay
[06:00:53] <FromDiscord> <leorize> yea, the preprocessor doesn't understand C, it only knows how to copy-paste
[06:01:11] <FromDiscord> <auxym> yeh, I'll fix that crap manually I guess
[06:01:37] <FromDiscord> <auxym> thanks
[06:01:39] <FromDiscord> <leorize> if you have a tool that can parse C, just use it to alter the faulty macro automatically
[06:02:22] <FromDiscord> <leorize> or you can something that automagically lowercase all field names \:p
[06:07:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:10:07] <FromDiscord> <Varriount> In reply to @auxym "so... this has nothing": Would defining another macro (`#define MTB_BASE_FIELD_NAME MTB_BASE`) before the original C macro, then using that new macro as the field name work?
[06:11:04] <FromDiscord> <auxym> Yeah, could work. Just trying to get a quick hack working so I'll patch it manually for now (with lowercase). Thanks though
[06:11:13] <FromDiscord> <Varriount> Or, I think you could use token concatenation (if I recall, it would be something like `#define MTB_PREFIX(x) MTB##x`)
[06:21:07] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[06:46:22] *** Joins: audiophile_ (~audiophil@user/audiophile)
[06:48:03] *** Joins: audiophile (~audiophil@user/audiophile)
[06:51:47] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 252 seconds)
[06:51:55] *** audiophile is now known as audiophile_
[06:59:10] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=3yqh
[06:59:52] <FromDiscord> <impbox [ftsf]> @Alea where did beginDrawing come from?
[07:00:14] <FromDiscord> <impbox [ftsf]> it'll be either a macro or template
[07:00:21] <FromDiscord> <Alea> ah found this
[07:00:23] <FromDiscord> <Alea>  https://media.discordapp.net/attachments/371759389889003532/885713781479571486/unknown.png
[07:00:44] <FromDiscord> <impbox [ftsf]> looks like raylib, yup, they're templates
[07:01:03] <FromDiscord> <impbox [ftsf]> you can pass a block of code to a template via the : indent syntax
[07:01:50] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yqi
[07:02:18] <FromDiscord> <impbox [ftsf]> body is whatever you put indented after the colon
[07:04:07] <FromDiscord> <Alea> also has anyone run into nimble just getting stuck while installing a package off github?
[07:04:19] <FromDiscord> <Alea> oh wait
[07:04:24] <FromDiscord> <Alea> forgot that this package is huge
[07:10:19] <FromDiscord> <aleclarson> sent a code paste, see https://paste.rs/kYi
[07:11:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yqk
[07:11:43] <FromDiscord> <Elegantbeef> Probably the ugliest solution and probably want a function
[07:12:09] <FromDiscord> <Elegantbeef> Or make your own `isEnum[T: enum](s: string): bool`
[07:22:30] <FromDiscord> <aleclarson> thx beef
[07:25:35] *** Joins: Terry[m] (~h4n1virus@2001:470:69fc:105::f391)
[07:32:49] <FromDiscord> <Alea> so stupid idea, but is there anyway to make a macro for curly braces?
[07:32:56] <FromDiscord> <Alea> like c-style
[07:33:11] <FromDiscord> <Alea> presumably just making it so that {} = ()
[07:33:49] <FromDiscord> <leorize> you might have better luck making an editor plugin that renders `{}` at indent regions
[07:39:07] <FromDiscord> <impbox [ftsf]> i do miss being able to jump from start to end of blocks in my editor
[07:39:10] <FromDiscord> <impbox [ftsf]> probably a plugin for that
[07:59:57] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[08:04:38] *** Joins: mdbauman__ (~mdbauman@2600:1700:7e60:f7c0:588:7c66:49fc:718a)
[08:08:06] *** Quits: mdbauman_ (~mdbauman@2600:1700:7e60:f7c0:690a:3d8b:bfbe:84d7) (Ping timeout: 260 seconds)
[08:23:20] <FromDiscord> <leorize> if you use neovim, then `]]` or `[]` should work
[08:28:49] <FromDiscord> <impbox [ftsf]> i use good ol vim
[08:29:20] <FromDiscord> <impbox [ftsf]> i've tried neovim a few times but run into issues, maybe i'll give it another go
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:44:01] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:00:32] <NimEventer> New Nimble package! genny - Generate a shared library and bindings for many languages., see https://github.com/treeform/genny
[09:00:35] <nrds> <12R2D299> 4GitHub: 7"Generate a shared library and bindings for many languages."
[09:03:11] *** Joins: Guest77 (~Guest77@115.84.71.178)
[09:11:17] <FromDiscord> <impbox [ftsf]> Nice!
[09:24:26] *** Quits: Guest77 (~Guest77@115.84.71.178) (Quit: Client closed)
[09:34:53] <nrds> <06Prestige99> is "sound" the go-to cross platform sound lib? Looks decent but I don't see a release - just sitting at version 0.1.0
[09:39:02] *** Joins: arfy (~arfy@1.126.104.139)
[09:46:53] <FromDiscord> <impbox [ftsf]> doing what with sound?
[09:48:26] <nrds> <06Prestige99> playing music and sounds in a game
[09:48:39] <FromDiscord> <impbox [ftsf]> Use SDL!
[09:49:03] <FromDiscord> <Elegantbeef> openal(slappy) is good aswell
[09:49:10] <nrds> <06Prestige99> just for sound?
[09:49:52] <FromDiscord> <Elegantbeef> You can
[09:50:16] <FromDiscord> <Elegantbeef> https://wiki.libsdl.org/SDL_Init you can init specific systems
[09:50:40] <FromDiscord> <impbox [ftsf]> Prestige, what are you using for the rest of your game?
[09:50:54] <FromDiscord> <impbox [ftsf]> but yeah, can use SDL just for audio if you like
[09:50:57] <nrds> <06Prestige99> Experimenting with using pixie for rendering
[09:51:05] <FromDiscord> <impbox [ftsf]> and input?
[09:51:13] <nrds> <06Prestige99> glfw
[09:51:52] <FromDiscord> <impbox [ftsf]> ahh k, i'd just use SDL for all of the above =p
[09:52:11] *** Joins: Doraemon (~NeoCron@p200300c4cf1c7e009d03f50373ebe753.dip0.t-ipconnect.de)
[09:52:40] <FromDiscord> <impbox [ftsf]> can pixie draw to any surface?
[09:52:52] <FromDiscord> <impbox [ftsf]> looks like it can work with SDL as well
[09:52:58] <FromDiscord> <Elegantbeef> It just renders to an internal texture
[09:53:20] <FromDiscord> <Elegantbeef> You can in theory use any window context manager aslong as you can copy to it
[09:54:30] *** Quits: NeoCron (~NeoCron@p200300c4cf1c95007f0aa1e4d57a6222.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:55:17] <nrds> <06Prestige99> I have it rendering with glfw to the screen, should also allow for shaders
[09:55:26] <nrds> <06Prestige99> maybe more complicated than it needs to be :P
[09:58:28] <FromDiscord> <impbox [ftsf]> probably easy to swap out for SDL2_nim and can do shaders with that as well as input + audio
[10:02:35] <nrds> <06Prestige99> Hm I'll look into that, thanks
[10:02:52] <FromDiscord> <impbox [ftsf]> there's a pixie SDL example
[10:03:46] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[10:05:57] *** Joins: xet7 (~xet7@user/xet7)
[10:20:01] <FromDiscord> <Varriount> Zevv: I posted a link to the failing grammar in the GitHub issue. (https://github.com/Varriount/squint)
[10:22:33] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:35:39] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3yqM
[10:36:11] <FromDiscord> <Elegantbeef> Cause that's super dangerous to do?
[10:36:16] <FromDiscord> <Elegantbeef> plus we have bitsets
[10:37:15] <FromDiscord> <Rika> Because enums are not sets?
[10:41:58] *** Joins: max22- (~maxime@2a01cb088335980070c545bb3ed78a74.ipv6.abo.wanadoo.fr)
[10:49:33] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:49:51] <FromDiscord> <codic> I don't want a set, I want an enum
[10:50:06] <FromDiscord> <codic> i guess it's dangerous because it can go out of bounds, fair
[10:50:17] <FromDiscord> <codic> just makes working with old C apis inconvinent
[10:50:32] <FromDiscord> <codic> too lazy to wrap it all 😛
[10:50:55] <FromDiscord> <Elegantbeef> But just use a bitset
[10:51:27] <FromDiscord> <Elegantbeef> I dont know the API so dont know why you cannot just use a bitset
[10:52:58] <FromDiscord> <impbox [ftsf]> aww playground down
[10:54:07] <FromDiscord> <codic> bc the C api wants an enum, eg `xcb_grab_mode_t`
[10:54:51] <FromDiscord> <codic> and it's not very common to need bitwise ops anyways
[10:54:56] <FromDiscord> <codic> so I think using enums is a reasonable deicsion
[10:55:08] <FromDiscord> <impbox [ftsf]> can't you map a nim set to a c enum?
[10:55:10] <FromDiscord> <codic> they could also have used constants
[10:55:13] <FromDiscord> <codic> how do you do that?
[10:55:55] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#set-type-bit-fields example here
[10:56:01] <PMunch> @imp, rebooting the playground now
[10:56:57] <FromDiscord> <codic> hmm, yeah I could do that...
[10:57:01] <FromDiscord> <codic> don't really have a use case
[10:57:17] <FromDiscord> <impbox [ftsf]> well if you want those operators you showed above, that's what bitsets are for
[10:57:24] <FromDiscord> <Elegantbeef> Also i dont get the point for your use case `xcb_grab_mode_t`
[10:57:34] <FromDiscord> <Elegantbeef> It has either sync or async
[11:07:47] <PMunch> @imp, playground is back now
[11:08:29] <FromDiscord> <impbox [ftsf]> \o/ thanks <3
[11:20:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[11:25:34] <FromDiscord> <Varriount>  https://media.discordapp.net/attachments/371759389889003532/885780522016575498/unknown.png
[11:26:09] <FromDiscord> <Varriount> I'm attempting to compile my NPeg grammar with `-d:release`
[11:26:20] *** Quits: max22- (~maxime@2a01cb088335980070c545bb3ed78a74.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[11:30:13] <FromDiscord> <Rika> In reply to @codic "bc the C api": Just because the C api wants an enum doesn’t mean it maps to an enum in Nim
[11:42:51] *** Joins: max22- (~maxime@2a01cb088335980093c01212af90dc30.ipv6.abo.wanadoo.fr)
[11:46:14] <FromDiscord> <Yardanico> hacktoberfest this year will count GitLab PRs too
[11:46:15] <FromDiscord> <Yardanico> "You can now have PRs submitted via Gitlab count towards your Hacktoberfest goal!"
[11:50:11] <NimEventer> New thread by Filip: Why is backward index operator [^1] not zero based [^0]?, see https://forum.nim-lang.org/t/8408
[12:00:48] <FromDiscord> <cabboose> Because stepping back in the index would be the last in the sequence
[12:00:52] <FromDiscord> <cabboose> 🤨
[12:01:10] <FromDiscord> <cabboose> Carrot 0 would just be 0 lol
[12:01:48] <FromDiscord> <Rika> it's just like that because of opinion though
[12:03:01] <FromDiscord> <impbox [ftsf]> i found it confusing at first too
[12:03:01] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[12:03:03] <FromDiscord> <impbox [ftsf]> used to it now
[12:03:13] <FromDiscord> <cabboose> I think the semantics are more intuitive that carrot index would be that many before 0
[12:03:21] <FromDiscord> <impbox [ftsf]> ^0 for last would have made more sense to me, not sure if there's any good reason for it one way or the other
[12:04:13] <NimEventer> New thread by Marks: What is the status of Nim IUP?, see https://forum.nim-lang.org/t/8409
[12:04:45] <FromDiscord> <cabboose> I guess it depends whether you consider the carrot index to be looking at the sequence reversed or whether it is you iterating backwards from 0 in the same index
[12:05:04] <FromDiscord> <cabboose> Wait that might have been confusing
[12:05:11] <FromDiscord> <cabboose> Either way I get what you mean
[12:05:20] <FromDiscord> <Rika> In reply to @impbox "^0 for last would": probably because of people used to using -1 for last index
[12:05:28] <FromDiscord> <Elegantbeef> I'm in party it takes 3 seconds to realize you've fucked up and adapt! 😀
[12:05:36] <FromDiscord> <cabboose> Ah yeah good point
[12:05:37] <FromDiscord> <impbox [ftsf]> @Rika yeah that could be it
[12:05:58] <FromDiscord> <impbox [ftsf]> yeah, it wasn't a hard thing to get used to, though i can imagine some bugs could be caused by it
[12:07:06] <FromDiscord> <cabboose> Pretty easy to implement some kind of sugar for that though right
[12:07:08] <FromDiscord> <haxscramper> I also tried to figure out what pythong is doing after answering the question, just to have something to compare to
[12:07:11] <FromDiscord> <haxscramper> and IMO it makes no sense
[12:07:14] <FromDiscord> <impbox [ftsf]> `Builtin roof operator that can be used for convenient array access. a[^x] is a shortcut for a[a.len-x].`
[12:07:18] <FromDiscord> <impbox [ftsf]> at least the docs explain it
[12:07:41] <FromDiscord> <haxscramper> `[1,3,4][-1]` is `4`, but `[1, 3,4][0:-1]` is `[1,3]`
[12:07:57] <FromDiscord> <haxscramper> like what
[12:08:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yr2
[12:08:09] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:08:14] <FromDiscord> <impbox [ftsf]> err
[12:08:24] <FromDiscord> <cabboose> raise Defect
[12:08:34] <FromDiscord> <haxscramper> `anger`
[12:08:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:09:00] <FromDiscord> <haxscramper> Well, next thing woild be `raise Defect(nil)`
[12:09:06] <FromDiscord> <Rika> `[:]` is akin to `[..<]`
[12:09:25] <FromDiscord> <haxscramper> yes, but `[1,3,4][0:-0]` is `[]`
[12:09:33] <FromDiscord> <Rika> -0 isnt valid lol
[12:09:45] <FromDiscord> <Rika> python just being 20000 iq
[12:09:45] <FromDiscord> <haxscramper> ah
[12:09:54] <FromDiscord> <haxscramper> so I literally can't do slice until the end?
[12:09:57] <FromDiscord> <Rika> you can
[12:09:59] <FromDiscord> <Rika> omit the numbner
[12:10:01] <FromDiscord> <Rika> (edit) "numbner" => "number"
[12:10:04] <FromDiscord> <Rika> `[0:]`
[12:10:07] <FromDiscord> <Rika> yes
[12:10:09] <FromDiscord> <Rika> very intuitive
[12:10:19] <FromDiscord> <Rika> extremely human thought friendly
[12:10:20] <FromDiscord> <cabboose> Sometimes Python is just the superior language guys
[12:10:29] <FromDiscord> <Rika> lmfao
[12:10:34] <FromDiscord> <impbox [ftsf]> [:]
[12:10:45] <FromDiscord> <Rika> that returns a shallow copy of the whole array
[12:10:59] <FromDiscord> <haxscramper> `[::-1]`
[12:11:05] <FromDiscord> <cabboose> Hahahahaha
[12:11:06] <FromDiscord> <Rika> reversed array
[12:11:09] <FromDiscord> <impbox [ftsf]> my head
[12:11:12] <FromDiscord> <Rika> yes
[12:11:33] <FromDiscord> <impbox [ftsf]> glad i don't touch python any more
[12:11:36] <FromDiscord> <Rika> same
[12:11:41] <FromDiscord> <haxscramper> It physically pains me to read that SO answer about slicing
[12:11:41] <FromDiscord> <cabboose> Ditto
[12:11:56] <FromDiscord> <impbox [ftsf]> i remember thinking python was the most amazing thing ever...
[12:12:02] <FromDiscord> <impbox [ftsf]> when i discovered it after using PHP
[12:12:27] <FromDiscord> <Rika> i dont remember ever thinking that python was great, even as a beginner, only "its neat"
[12:12:39] <FromDiscord> <impbox [ftsf]> it was pretty amazing after PHP tbh
[12:13:02] <FromDiscord> <Rika> youre comparing a rock to a computer though
[12:13:31] <FromDiscord> <cabboose> Rock to a snake
[12:13:33] <FromDiscord> <enthus1ast> PHP is strange, but currently it is not that bad, it has good class support etc
[12:13:43] <FromDiscord> <enthus1ast> (omg i have good words for PHP)
[12:14:00] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[12:14:04] <FromDiscord> <Rika> who's banning him
[12:14:07] <FromDiscord> <Rika> he cant be trusted
[12:14:12] <FromDiscord> <cabboose> I’m just quitting the discord
[12:14:16] <FromDiscord> <cabboose> I’m quitting nim
[12:14:26] <FromDiscord> <Elegantbeef> Good riddance! 😛
[12:14:36] <FromDiscord> <Rika> nah it would have been better if you left, beef
[12:17:20] <FromDiscord> <Yardanico> no i like beef
[12:17:23] <FromDiscord> <Elegantbeef> You cant get rid of me that easily
[12:17:31] <FromDiscord> <Rika> what the fuck
[12:17:38] <FromDiscord> <Rika> someone likes beef?
[12:17:44] <FromDiscord> <Yardanico> yes
[12:17:45] <FromDiscord> <Yardanico> it's tasty
[12:17:47] <FromDiscord> <Rika> oh did you mean the food
[12:17:48] <FromDiscord> <Rika> yeah
[12:17:52] <FromDiscord> <Yardanico> no i mean beef the person too
[12:17:56] <FromDiscord> <Rika> no way
[12:17:56] <FromDiscord> <Elegantbeef> I'm like crabs but for your brain, so sphyillis
[12:18:02] <FromDiscord> <impbox [ftsf]> who else will respond to me at any time of the day?
[12:18:02] <FromDiscord> <Yardanico> also we should probably move to #offtopic :P
[12:18:06] <FromDiscord> <Rika> syphilis you mean
[12:18:33] <FromDiscord> <Elegantbeef> Yea i cannot spell
[12:18:34] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:18:47] <FromDiscord> <impbox [ftsf]> you heard the yard!
[12:18:49] <FromDiscord> <Elegantbeef> We've established this time and time again
[12:19:07] <FromDiscord> <Rika> yard is dum
[12:19:13] <FromDiscord> <Rika> imperial in general is dum
[12:19:35] <FromDiscord> <Yardanico> hey, i didn't make my nickname because of some weird random measurement systems
[12:19:41] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[12:20:18] <FromDiscord> <Elegantbeef> Should've you'd be a lot cooler
[12:20:30] <FromDiscord> <Elegantbeef> Take my word for it, i'm talking 3 three people that despise me
[12:21:34] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:21:35] <FromDiscord> <Rika> beef's english systems are destabilising
[12:21:58] <FromDiscord> <Hamid Bluri> that's not a big deal
[12:22:11] <FromDiscord> <Rika> i mean beef isnt a big deal in general
[12:22:43] <FromDiscord> <Yardanico> :FeelsOkayMan: 👉  #offtopic
[12:23:10] <FromDiscord> <Elegantbeef> Any nim stuff we can talk about, like bug fixes?!
[12:23:24] <FromDiscord> <Rika> you're a bug
[12:23:30] <FromDiscord> <Yardanico> In reply to @Rika "you're a bug": rika
[12:25:25] <FromDiscord> <impbox [ftsf]> @ElegantBeef we could implement all of python's horrible slice stuff in nim
[12:25:58] <FromDiscord> <Elegantbeef> I could also strip down to nothing and live in the forest
[12:26:19] <FromDiscord> <Rika> please dont implement python slices in nim
[12:26:30] <FromDiscord> <Elegantbeef> I dont see the value in making shitty software.... on second thought i've looked at my code all i write is shit
[12:27:10] <FromDiscord> <Elegantbeef> This guy has PRs in the nim compiler, get scared 😛
[12:27:27] <FromDiscord> <Hamid Bluri> question
[12:28:01] <FromDiscord> <Hamid Bluri> how do you test nim compiler when you edit the parser?
[12:28:08] <FromDiscord> <Yardanico> you run tests
[12:28:09] <FromDiscord> <Hamid Bluri> does it take a long time to test?
[12:28:12] <FromDiscord> <Elegantbeef> I dont edit the parser
[12:28:31] <FromDiscord> <Yardanico> In reply to @hamidb80 "does it take a": for testing everything we have CI, you can only test parts that you think might be affected by your change
[12:28:38] <FromDiscord> <Yardanico> (locally)
[12:28:39] <FromDiscord> <haxscramper> `tests/tastspec.nim`
[12:28:49] <FromDiscord> <Elegantbeef> I generally have a test file i run and then run the test suite for the specific area i was testing then push to a repo and get the first have of the CI
[12:28:50] <FromDiscord> <haxscramper> For parser AST add things ther
[12:29:03] <FromDiscord> <Elegantbeef> first half\
[12:29:16] <FromDiscord> <haxscramper> In reply to @haxscramper "`tests/tastspec.nim`": https://github.com/nim-lang/Nim/pull/18798/files
[12:29:52] <FromDiscord> <Hamid Bluri> and why does sometimes CI fail without a specefic reason?
[12:30:14] <FromDiscord> <Elegantbeef> Sometimes it just doesnt live happily
[12:30:37] <FromDiscord> <Elegantbeef> Locally atleast it should be more stable
[12:39:55] <FromDiscord> <Elegantbeef> Also @Hamid Bluri what are you working on?
[12:41:15] <FromDiscord> <Hamid Bluri> what do you mean
[12:41:32] <FromDiscord> <Elegantbeef> With the parser
[12:41:57] <FromDiscord> <Hamid Bluri> just curious how did you touch it 😄
[12:42:17] <FromDiscord> <Hamid Bluri> `timeocoder` asked me to improve nimpretty
[12:42:30] <FromDiscord> <Hamid Bluri> but i couldn't find anything related to nimpretty in nim repo
[12:42:31] <FromDiscord> <Elegantbeef> Ah, i've never touched the parser so good luck
[12:42:48] <FromDiscord> <Elegantbeef> Semantics are fun!
[12:42:58] <FromDiscord> <Hamid Bluri> In reply to @Elegantbeef "Ah, i've never touched": i remember you did a pr
[12:43:08] <FromDiscord> <Yardanico> In reply to @hamidb80 "but i couldn't find": nimpretty is in https://github.com/nim-lang/Nim/tree/devel/nimpretty
[12:43:10] <FromDiscord> <Elegantbeef> "a" \:D
[12:43:17] <FromDiscord> <Yardanico> also search for when defined(nimpretty) in the compiler source
[12:43:28] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/885800121621684254/unknown.png
[12:52:39] <FromDiscord> <cabboose> Nup now I’m staying to spite beef
[12:57:20] <FromDiscord> <Elegantbeef> Damn spite beef
[13:48:47] <FromDiscord> <cabboose> Ok what do i need for cps
[13:48:56] <FromDiscord> <cabboose> devel check
[13:49:16] <FromDiscord> <cabboose> keeps whinging about the proc mismatch
[13:49:30] <arfy> hi there. I just wanted to say I've been checking out nim for a day or two and really enjoying it so far. It's what would happen if you could comple python straight to native code! :) 
[13:49:40] <arfy> compile python*
[13:51:22] <FromDiscord> <cabboose> hmm im actually getting an error using choosenim trying to update my devel toolchain
[13:56:24] <NimEventer> New thread by Ingo: Keep a http connection alive and hand it off to another proc, see https://forum.nim-lang.org/t/8410
[13:56:33] <FromDiscord> <Rika> In reply to @cabboose "hmm im actually getting": What errors
[13:58:20] <FromDiscord> <cabboose> Ah nothing; I thought I closed VS Code but there was something still running in the background which kept nimsuggest running
[13:58:36] <FromDiscord> <cabboose> so that just prevented overwrites
[14:49:44] <FromDiscord> <Kiloneie> Huh, switching from the current GC to GC ORC, changes the output of "echo repr b" b being a pointer to "a", so that it outputs ptr 10 instead of the memory address.↵↵How can i see the memory address now ?
[14:51:48] *** Joins: xet7 (~xet7@user/xet7)
[15:04:42] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:18:43] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[15:42:43] <NimEventer> New post on r/nim by zemja_: Is Nim in Action outdated?, see https://reddit.com/r/nim/comments/plixt9/is_nim_in_action_outdated/
[15:56:15] <FromDiscord> <ant1fact> In reply to @treeform "I think it always": thanks for that link!
[16:04:10] <FromDiscord> <ant1fact> Is it possible to batch export all types and their members in a .nim file without marking everything with its own  ?
[16:05:28] <FromDiscord> <enthus1ast> the new version has a import ...  {.all.} pragma, but i'm not sure if this is ugly for normal code yet (useful for test, though
[16:05:58] <FromDiscord> <ant1fact> will try that, thanks
[16:06:57] <FromDiscord> <enthus1ast> personally i would avoid it for normal code
[16:07:27] <FromDiscord> <enthus1ast> maybe in cases like c++ "friends" class
[16:08:15] <FromDiscord> <haxscramper> `import {.all.}` is for cases where you want to extend library implementation but have to acces internal details
[16:08:19] <FromDiscord> <Rika> I would refrain from doing the import all
[16:08:21] <FromDiscord> <haxscramper> for example `getOpt` from talbe
[16:08:24] <FromDiscord> <haxscramper> (edit) "talbe" => "table"
[16:08:37] <FromDiscord> <haxscramper> Or I needed to add getLowestValue for `fusion/btreetabs`
[16:08:57] <FromDiscord> <haxscramper> Also compiler has tons of procs that are not exported, but I just have to access them
[16:09:15] <FromDiscord> <haxscramper> Otherwise I would have to reimplement thousands of lines of code
[16:09:26] <FromDiscord> <haxscramper> reimplement/copy and maintain in my library
[16:13:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[16:25:00] *** Quits: max22- (~maxime@2a01cb088335980093c01212af90dc30.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:30:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:46:26] *** Joins: arkurious (~arkurious@user/arkurious)
[16:49:56] <FromDiscord> <ant1fact> how can I do the following?↵↵case char↵of 0..9: do_something()
[16:50:17] <FromDiscord> <ant1fact> should I just write out each integer as a char like '0', '1', '2', ... '9'
[16:50:20] <FromDiscord> <ant1fact> or is there a better way
[16:51:59] <FromDiscord> <konsumlamm> `0` is different from `'0'`
[16:52:03] <FromDiscord> <Rika> yes
[16:54:41] <FromDiscord> <srozb> hey, does anybody know how to call an arbitrary address in memory in Nim (suppose I already know the function address and parameters). As an example let sleepFuncAddr = 0xdeadb33f, how to make it proc sleepFunc(msec: int) and finally call sleepFunc(1234) ? I know it's exactly what one should't do from security perspective but still want to do such thing
[16:55:29] <FromDiscord> <Rika> do yyou know the exact parameters, return type, and pragmas the proc has?
[16:55:35] <FromDiscord> <srozb> yes
[16:56:02] <FromDiscord> <Rika> `let sleepFunc = cast[proc(...): ... {. ... .}](0xdeadbeef)`
[16:56:09] <FromDiscord> <srozb> oh cool
[16:56:10] <FromDiscord> <Rika> actually no
[16:56:16] <FromDiscord> <Rika> well no yeah thats right
[16:56:25] <FromDiscord> <Rika> i think...
[17:05:17] <FromDiscord> <srozb> suppose procAddr is valid function address in process memory (actually kernel32.dll Sleep function, that only takes one DWORD argument), following code: let sleepFun = cast[proc(msec: DWORD)](procAddr) gives me Error: expression cannot be cast to proc (msec: DWORD){.closure.}
[17:06:36] <PMunch> Try: `let sleepFun = cast[proc(msec: DWORD) {.cdecl.}](procAddr)`
[17:06:43] <PMunch> Or whatever calling convention it uses
[17:06:57] <PMunch> It definitely doesn't use the closure calling convention :P
[17:07:26] <FromDiscord> <srozb> and its working!
[17:07:38] <FromDiscord> <srozb> thanks! how cool is that anyway!
[17:10:55] <PMunch> No problem :)
[17:26:17] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:29:39] *** Joins: Guest2 (~Guest2@fttx-177136148155.usr.predialnet.com.br)
[17:45:12] <FromDiscord> <impbox [ftsf]> I guess windows doesn't do ASLR then
[17:54:19] *** Quits: Guest2 (~Guest2@fttx-177136148155.usr.predialnet.com.br) (Quit: Client closed)
[18:07:16] *** Joins: max22- (~maxime@2a01cb088335980003a066e559758211.ipv6.abo.wanadoo.fr)
[18:19:54] <PMunch> Hmm, is there a way to collapse recurring characters in a string in Nim?
[18:20:10] <PMunch> Say I have "haaaarp" and I want "harp"
[18:22:37] <nrds> <06Prestige99> Don't think so
[18:23:17] <nrds> <06Prestige99> wouldn't be too hard to write though I guess
[18:32:30] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:57:32] *** Joins: rockcavera (~rc@192.12.112.227)
[18:57:32] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[18:57:32] *** Joins: rockcavera (~rc@user/rockcavera)
[19:02:39] <FromDiscord> <aleclarson> PMunch you must have a good name, cuz i mentioned you in my dream for some reason \:P
[19:03:56] <FromDiscord> <Gumber aka Zachary Carter> that's pretttttty creepy
[19:04:00] <FromDiscord> <Gumber aka Zachary Carter> did you use his real name or PMunch?
[19:04:13] <FromDiscord> <Gumber aka Zachary Carter> if it was the former, that's even creepier
[19:06:51] <FromDiscord> <aleclarson> lol the latter
[19:07:10] <FromDiscord> <aleclarson> it was smth like "oh you know PMunch? yeah i see him in the nim discord all the time"
[19:07:16] <FromDiscord> <aleclarson> wtf brain
[19:08:37] <FromDiscord> <Gumber aka Zachary Carter> yeah that's weird
[19:08:45] <FromDiscord> <Gumber aka Zachary Carter> known PMunch for at least 3 years I think
[19:08:51] <FromDiscord> <Gumber aka Zachary Carter> never once dreamed about him
[19:09:16] *** Joins: ykaelig (~ykaelig@89-64-57-222.dynamic.chello.pl)
[19:09:20] <FromDiscord> <Gumber aka Zachary Carter> def had dreams about people I barely know / just met though
[19:09:43] <FromDiscord> <Gumber aka Zachary Carter> always a trippy experience
[19:15:22] <NimEventer> New thread by Skaruts: I'm having a Nim+Lua+Libtcod callback wrapping problem, see https://forum.nim-lang.org/t/8411
[19:16:48] <FromDiscord> <aleclarson> yeah, the brain is frickin random when it comes to dreams.↵sometimes i wonder if the randomizer in my brain is cryptographically sound
[19:18:54] <FromDiscord> <Rika> Depends on what you mean by randomiser
[19:19:05] <FromDiscord> <cabboose> sent a code paste, see https://paste.rs/Mfe
[19:19:07] <FromDiscord> <Rika> Like “you saying a random number”? No because of biased
[19:19:34] <FromDiscord> <aleclarson> like unconscious rng in dream state
[19:19:53] <FromDiscord> <cabboose> however `proc test() {.cps:Continuation.} = echo “hello world”` would function as prescribed
[19:21:19] <FromDiscord> <cabboose> type mismatch being along the lines of ‘got proc () C {.gcsafe, locks:0.} but expected proc() Continuation {.nimcall.}’ etc
[19:21:46] <FromDiscord> <Rika> In reply to @cabboose "So I didn’t have": I’m assuming it needs to be exported? Just a guess
[19:21:52] <FromDiscord> <Rika> Almost literal shot in the dark
[19:22:04] <FromDiscord> <cabboose> Tried exporting the C
[19:22:30] <FromDiscord> <cabboose> I dont know if I did with the test but I could try that tomorrow; seems like an odd requirement :’)
[19:22:31] <FromDiscord> <Rika> Maybe conflicting with some name
[19:22:45] <FromDiscord> <Rika> Since it’s a single letter
[19:22:51] <FromDiscord> <cabboose> I did try other proc names and continuation names
[19:22:55] <FromDiscord> <cabboose> like TestC
[19:22:58] <FromDiscord> <cabboose> for the continuation
[19:23:00] <FromDiscord> <cabboose> still no luck
[19:23:16] <FromDiscord> <Rika> Maybe it is the export then
[19:23:19] <FromDiscord> <cabboose> I’ll message their IRC tomorrow if I keep hitting a wall
[19:23:23] <FromDiscord> <cabboose> aiight ill give it a shot
[19:23:26] <FromDiscord> <cabboose> thanks
[19:23:28] <FromDiscord> <cabboose> goodnight cobba
[19:23:36] <FromDiscord> <Rika> Who?
[19:23:50] <FromDiscord> <Rika> Either I am too young or too old to understand the reference
[19:27:53] <FromDiscord> <aleclarson> he must be australian
[19:37:34] <FromDiscord> <aleclarson> can a proc parameter have a default value?
[19:38:15] <FromDiscord> <Rika> Yes
[19:43:51] <FromDiscord> <Gumber aka Zachary Carter> must be the last parameter(s) defined in the proc signature
[19:45:24] <FromDiscord> <aleclarson> 😌 👍
[19:47:22] <FromDiscord> <Gumber aka Zachary Carter> Are there any cheaper linux notebooks that compare to a macbook pro in terms of hardware capabilites that folks are aware of?
[19:47:47] <FromDiscord> <Gumber aka Zachary Carter> I want a laptop for game development, but I don't want to buy a gaming laptop and I don't really want to spend the money on a macbook pro if I don't have to...
[19:48:16] <FromDiscord> <Gumber aka Zachary Carter> I do want to run linux or mac on whatever I get though... I already have a desktop windows PC
[19:48:38] <FromDiscord> <Gumber aka Zachary Carter> I guess it's also a shitty time to be laptop shopping because of the chip shortage, but that's supposed to drag on for years potentially so....
[19:51:04] <FromDiscord> <Rika> In reply to @Gumber "Are there any cheaper": Are you still on good terms with Lenovo?
[20:14:15] <FromDiscord> <aleclarson> is there a `.cast` pragma for "prove not nil"?
[20:14:39] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ytr
[20:14:40] <FromDiscord> <Rika> you can just disable the warning
[20:15:56] <FromDiscord> <aleclarson> on a one-line basis?
[20:15:58] <FromDiscord> <enthus1ast> @Gumber aka Zachary Carter\: tuxedo maybe
[20:16:05] <FromDiscord> <aleclarson> (edit) "on a one-line basis?" => "for just one line?"
[20:17:16] <FromDiscord> <Gumber aka Zachary Carter> @Rika kind of forgot about them, will check out their current line up
[20:17:47] <FromDiscord> <aleclarson> In reply to @aleclarson "for just one line?": oh i guess casting works \:P↵`cast[Foo not nil](foo)`
[20:17:56] <FromDiscord> <Rika> i believe lenovo makes really linux friendly laptops (and actually also sells some with linux preloaded)
[20:18:03] <FromDiscord> <Rika> anyway idk why you asked here, i just realised
[20:30:18] *** Joins: xet7 (~xet7@user/xet7)
[20:31:34] *** Quits: ykaelig (~ykaelig@89-64-57-222.dynamic.chello.pl) (Quit: Client closed)
[20:36:40] <FromDiscord> <leorize> @cabboose\: Nim devel got a fix that broke CPS and we are fixing it
[20:36:41] <FromDiscord> <leorize> you can join cps discussion rooms for more details on the progress
[20:47:10] <FromDiscord> <Gumber aka Zachary Carter> In reply to @Rika "anyway idk why you": because I do what I want!
[20:47:23] <FromDiscord> <Rika> yards comin for ya
[20:47:27] <FromDiscord> <Gumber aka Zachary Carter> psh I'm a mod
[20:47:37] <FromDiscord> <Gumber aka Zachary Carter> he might be the admin / owner
[20:47:39] <FromDiscord> <Rika> hes a modder mod
[20:47:46] <FromDiscord> <Gumber aka Zachary Carter> but he's also the one that made me the mod for whatever reason
[20:47:52] <FromDiscord> <Gumber aka Zachary Carter> he must see something in me
[20:48:01] <FromDiscord> <Gumber aka Zachary Carter> believes in me
[20:48:03] <FromDiscord> <Rika> lol
[21:02:47] *** Joins: vicfred (~vicfred@user/vicfred)
[21:21:38] <FromDiscord> <reilly> In light of Rust's recent 1.55 update, in which they improved their float-parsing algorithm, what algorithm does Nim's float parser user?
[21:21:42] <FromDiscord> <reilly> (edit) "user?" => "use?"
[21:22:11] <FromDiscord> <haxscramper> nim 1.6. ships with dragonbox
[21:23:58] <FromDiscord> <Rika> what does rust use now?
[21:24:17] <FromDiscord> <pedroos (Pedro Sobota)> Hello there. I wanted to ask\: where is the definition of the tuple type in the NIm source code?
[21:24:41] <FromDiscord> <haxscramper> https://github.com/rust-lang/rust/pull/86761
[21:25:21] <FromDiscord> <haxscramper> In reply to @pedroos (Pedro Sobota) "Hello there. I wanted": `tuple` does not have a definition in nim stdlib
[21:25:28] <FromDiscord> <haxscramper> Or you want to know where in compiler it is defiend?
[21:25:37] <FromDiscord> <pedroos (Pedro Sobota)> Yes, in compiler
[21:28:21] <FromDiscord> <haxscramper> tuple type is represented via `tyTuple` kind and it does not have a concrete definition from what I can tell. Instead it is separated into multiple locations in `ccgexprs/cgen` etc,
[21:29:16] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ytK
[21:29:42] <FromDiscord> <pedroos (Pedro Sobota)> Great, so it's a compiler-only type
[21:30:05] <FromDiscord> <haxscramper> `ccgtype.mapType` shows how it is implemented
[21:30:17] <FromDiscord> <haxscramper> `/` how type is generated
[21:31:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[21:31:17] <FromDiscord> <haxscramper> `/` how type is mapped, and discard what I said, that's a wrong explanation
[21:31:18] <FromDiscord> <Rika> pedroos: i mean its similar to how object is implemented i would say
[21:31:43] <NimEventer> New thread by Konradmb: Call parent `$` from overwritten converter?, see https://forum.nim-lang.org/t/8412
[21:31:43] <FromDiscord> <pedroos (Pedro Sobota)> Ok, sorry I'm C# developer so I'm used to "everything is an object"
[21:35:08] <FromDiscord> <haxscramper> In reply to @pedroos (Pedro Sobota) "Great, so it's a": well, it is "magic" type, yes
[21:36:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:37:20] <FromDiscord> <pedroos (Pedro Sobota)> Yes, so I found this in mapType\:
[21:37:34] <FromDiscord> <pedroos (Pedro Sobota)> Where is ctStruct defined? I can't find it
[21:38:45] <FromDiscord> <pedroos (Pedro Sobota)> Oh! Nevermind, I found it at TCTypeKind.
[21:44:14] <FromDiscord> <pedroos (Pedro Sobota)> Is there a lot of the base library is implemented in compiler types vs. actual types?
[21:45:32] <FromDiscord> <haxscramper> tuple/string/set/seq
[21:45:32] <FromDiscord> <haxscramper> array
[21:46:11] <FromDiscord> <haxscramper> well, primitive types require special compiler support, because they are codegened into js/C/C++/VM code
[21:47:30] <FromDiscord> <pedroos (Pedro Sobota)> Oh, I see
[21:47:48] *** Joins: tiorock (~rc@192.12.112.227)
[21:47:49] *** Quits: tiorock (~rc@192.12.112.227) (Changing host)
[21:47:49] *** Joins: tiorock (~rc@user/rockcavera)
[21:47:49] *** rockcavera is now known as Guest8197
[21:47:49] *** tiorock is now known as rockcavera
[21:48:17] *** Joins: audiophile_ (~audiophil@user/audiophile)
[21:49:02] <FromDiscord> <haxscramper> also `NimNode`
[21:49:33] <FromDiscord> <haxscramper> But that one is an absolute dark magic
[21:51:37] *** Quits: Guest8197 (~rc@user/rockcavera) (Ping timeout: 252 seconds)
[21:52:43] <FromDiscord> <pedroos (Pedro Sobota)> It's fun, well in c# as you may know, there is primitives basically as ints, floats and value types, but they have mirror structs in the base library
[21:53:01] <FromDiscord> <pedroos (Pedro Sobota)> So this is where it gets me so I don't find these definitions while searching Nim
[21:55:21] <FromDiscord> <haxscramper> You can look at the generated C code, if would be easier than searching in the compier
[21:55:22] <FromDiscord> <haxscramper> And more illustrative I guess
[21:55:40] <FromDiscord> <pedroos (Pedro Sobota)> Oh! Great one
[21:55:49] <FromDiscord> <haxscramper> `--linetrace:off --stacktrace:off -d:danger` to cleanup generated code from any extra checks etc.
[21:56:15] <FromDiscord> <haxscramper> `--nimcache:yourDir` and them see for a file named `@m<your-orginal-filename>.c`
[22:02:26] <FromDiscord> <haxscramper> Just definining type won't make it occur in the generated code due to dead code elimination, you need to use it somehow
[22:02:26] <FromDiscord> <haxscramper> Like `echo (123, 4)`
[22:02:29] <FromDiscord> <pedroos (Pedro Sobota)> A discard is enough in this case?
[22:02:33] <FromDiscord> <pedroos (Pedro Sobota)> I may get in the habit of seeing the generated C side by side...
[22:08:02] <FromDiscord> <haxscramper> I don't know about discard, it all depends on how smart dead code delimination is
[22:08:03] <FromDiscord> <pedroos (Pedro Sobota)> Yup...
[22:08:46] <FromDiscord> <Rika> I don’t think it’s that smart because a discarded proc call can still have effects
[22:09:50] <FromDiscord> <pedroos (Pedro Sobota)> Uhum, just trying to think about avoiding the prints (echos) but it's harmless
[22:10:15] <FromDiscord> <pedroos (Pedro Sobota)> Thank you guys
[22:15:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:19:40] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 250 seconds)
[22:20:48] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[22:21:02] *** Parts: Zevv (~Zevvvvv@185.238.131.12) ()
[22:21:56] *** Joins: robertmeta (sid514@user/robertmeta)
[22:24:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[22:30:57] *** Joins: SebastianM (~seba@user/sebastianm)
[22:32:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:35:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[22:57:04] <Terry[m]> Last night, I had a dream, a dream where Araq and Dominik were beating me with a book. They told me that if I don't write everything in macros then they will dig up my greatgrandmother and map her.
[22:57:13] <Terry[m]> I am not sure what that dream meant.
[22:57:37] <FromDiscord> <haxscramper> ...
[22:58:01] <FromDiscord> <haxscramper> I have only one response really, and it is `raise Defect(nil)`
[23:00:46] <FromDiscord> <Rika> hax you're gonna make me go insane with that statement
[23:05:45] *** Quits: max22- (~maxime@2a01cb088335980003a066e559758211.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[23:14:33] <FromDiscord> <ant1fact> how does one reset a variable to its defaulty empty state?
[23:14:36] <FromDiscord> <ant1fact> (edit) "defaulty" => "default"
[23:16:46] <FromDiscord> <ant1fact> for a seq[float] would I just set the variable to = @[] ?
[23:18:39] <FromDiscord> <Rika> you could
[23:19:06] <FromDiscord> <haxscramper> `var a: T; a = default typeof(a)`
[23:22:40] <FromDiscord> <Beans.> How do I pass a reference of a proc to another proc as a parameter, and then call that referenced proc in the proc it was passed to? I don't know how the original proc is going to be defined, or where, or what it's identifier would be.
[23:22:48] <FromDiscord> <Beans.> Here's some pseudocode of what I'm trying to do
[23:23:05] <FromDiscord> <Beans.> sent a code paste, see https://play.nim-lang.org/#ix=3yuu
[23:23:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:25:04] <FromDiscord> <Beans.> Sorry If I messed up my explanation, I'm new to nim
[23:26:20] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yux
[23:26:25] <FromDiscord> <haxscramper> No need for extra `ref`, just use procedure name
[23:27:08] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[23:27:19] <FromDiscord> <Beans.> Thanks!
[23:31:43] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[23:32:39] *** Joins: xet7 (~xet7@user/xet7)
[23:33:55] *** Joins: max22- (~maxime@2a01cb08833598002b7e84d0aaf65199.ipv6.abo.wanadoo.fr)
[23:40:25] <FromDiscord> <pedroos (Pedro Sobota)> Hi guys, I have one more question related to tuples. I am in INim and I'm typing 'tuple'. I am getting 'tuple' here, but what am I getting? Is this a type or not?
[23:42:34] <FromDiscord> <haxscramper> `tuple` as a type, without any further specification is a typeclass that means "any tuple"
[23:42:46] <FromDiscord> <haxscramper> Like `(1, 23) is tuple and (1, 3) is (int, int)`
[23:43:07] <FromDiscord> <haxscramper> `tuple/object/enum/proc/ref/ptr` etc. are special typeclasses
[23:43:29] <FromDiscord> <haxscramper> There are more
[23:45:28] <FromDiscord> <pedroos (Pedro Sobota)> Great... are typeclasses then a formal type in themselves...? or is there a way to inquire into wether an expression returns a typeclass, as distinct from a type?
[23:46:38] <FromDiscord> <haxscramper> no, typeclasses cannot be returned by an expression, you only can have a type literal
[23:47:03] <FromDiscord> <haxscramper> So `typeof(SomeInteger)` is `SomeInteger`, but you can't create variable of `SomeInteger` in any way
[23:47:09] <FromDiscord> <haxscramper> But `int is SomeInteger`
[23:47:34] *** Joins: vicfred (~vicfred@user/vicfred)
[23:47:35] <FromDiscord> <haxscramper> So typeclass is basically `SomeInteger = int or int8 or int16 or int32 ...`
[23:48:14] <FromDiscord> <haxscramper> And you can defined one yourself, but for `tuple` it requires some magic, since there is an infinite number of tuples, so you can't just `or` them together
[23:48:58] <FromDiscord> <haxscramper> I.e. not a "format type in themselves" but rather a shorthand for `or`ing things together
[23:52:10] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yuE
[23:52:14] <FromDiscord> <Elegantbeef> Type classes are generic constraints
[23:53:33] <FromDiscord> <pedroos (Pedro Sobota)> Ok so both SomeInteger and int are type literals and SomeInteger is the one of the 'integers' typeclass... is this typeclass then like a union type?
[23:53:47] <FromDiscord> <Elegantbeef> It's not a union it's just to limit generics to specific types
[23:54:08] <FromDiscord> <haxscramper> it is a union of types
[23:54:19] <FromDiscord> <haxscramper> I.e. does not exist at runtime as TS union type
[23:54:20] <FromDiscord> <Elegantbeef> `proc someThing[T: int or float](a: T) = echo a` can only take `int` or `float` it doesnt take `int` and `float`
[23:54:41] <FromDiscord> <haxscramper> Strictly a compile-time thing
[23:57:09] <FromDiscord> <pedroos (Pedro Sobota)> By union I meant 'either' type, sorry... so is it like an 'either type' of these types int, int8... ? But informally so only the compiler knows about it...? Correct?
[23:57:19] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yuF
[23:57:38] <FromDiscord> <Elegantbeef> You should be able to with a macro recruit
[23:58:04] <FromDiscord> <Elegantbeef> Yea pedroos sounds like you've got it
[23:58:28] <FromDiscord> <Elegantbeef> It's not a sumtype or union where at runtime it can store all the values, it's a compile time "When generating this procedure it only accepts X"
[23:59:19] <FromDiscord> <pedroos (Pedro Sobota)> Yeah
