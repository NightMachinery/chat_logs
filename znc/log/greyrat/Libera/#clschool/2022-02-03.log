[00:12:12] <neominimum> jealousmonk: I believe `(car x)` is what's known as a 'generalised reference' rather than returning a pointer to A it is more acurrate to say that it returns the value of the generalised reference when it is evaluated. A being the value here. I was browsing the spec yesterday here is the relevant section: http://www.lispworks.com/documentation/HyperSpec/Body/05_aa.htm
[00:16:14] <Bike> that's a bit different
[00:16:40] <Bike> if you call the car function, you just get the value in the car of the cons. given only that value, you have no way of going back and affecting or otherwise accessing the cons
[00:19:02] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[00:21:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[00:21:43] <neominimum> yes that is why it returns the value of the generalised ref. one needs to use setf if mutating the list is necessary. setf will see it as a 'place'
[00:22:50] *** Joins: aeth (~aeth@user/aeth)
[00:23:21] <neominimum> you're correct though if you store the value in a lexical variable then attempt to change it
[00:23:24] <Bike> no, it does not return a generalized reference. what happens with setf is that the setf macro sees (car x) and expands into a form that sets the cons.
[00:23:40] <bremner> phew
[00:23:41] <neominimum> you'll only change the value of the lexical variable
[00:23:56] <neominimum> as it is a new place after being bound
[00:24:30] <neominimum> no i said (car x) is the generalised ref
[00:25:01] <neominimum> the ref evaluates to a value
[00:26:08] <neominimum> no generalised reference gets returned, I didn't claim that
[00:28:18] <Bike> my bad.
[00:29:19] <Bike> but generalized reference isn't really relevant to understanding what the car function returns.
[00:41:32] *** Quits: santiagopim (~user@84.78.243.45) (*.net *.split)
[00:41:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (*.net *.split)
[00:41:32] *** Quits: Bike (~Glossina@71.69.170.70) (*.net *.split)
[00:41:33] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[00:41:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[00:41:34] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (*.net *.split)
[00:41:34] *** Quits: tewi (~tewi@apn-95-41-105-74.dynamic.gprs.plus.pl) (*.net *.split)
[00:41:35] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[00:41:35] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[00:41:35] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (*.net *.split)
[00:41:35] *** Quits: gko` (~user@user/gko) (*.net *.split)
[00:41:35] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (*.net *.split)
[00:41:36] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[00:41:36] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[00:41:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[00:41:36] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[00:41:36] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[00:41:36] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[00:41:36] *** Quits: ogamita`` (~t@hubble.informatimago.com) (*.net *.split)
[00:41:36] *** Quits: malaclyps (~mala@user/malaclyps) (*.net *.split)
[00:41:37] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (*.net *.split)
[00:41:37] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[00:41:37] *** Quits: nexeq (nexeq@user/nexeq) (*.net *.split)
[00:41:37] *** Quits: plexi (~orcabot@digital.sanctuary.org) (*.net *.split)
[00:41:37] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[00:41:37] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[00:41:37] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[00:41:37] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[00:41:38] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[00:41:38] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[00:41:38] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[00:41:38] *** Quits: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[00:41:39] *** Quits: jealousmonk (~user@user/jealousmonk) (*.net *.split)
[00:41:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (*.net *.split)
[00:41:39] *** Quits: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de) (*.net *.split)
[00:41:39] *** Quits: il (~il@user/f/x-7830992) (*.net *.split)
[00:41:39] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[00:41:40] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[00:41:40] *** Quits: neominimum (sid537410@user/neominimum) (*.net *.split)
[00:41:40] *** Quits: random-nick (~random-ni@87.116.167.125) (*.net *.split)
[00:41:40] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[00:41:40] *** Quits: micro (~micro@user/micro) (*.net *.split)
[00:41:40] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[00:41:40] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[00:41:40] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[00:41:41] *** Quits: beach (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89) (*.net *.split)
[00:41:41] *** Quits: bremner (~bremner@notmuch/developer/bremner) (*.net *.split)
[00:41:41] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (*.net *.split)
[00:41:41] *** Quits: opfez (~opfez@ti0013a400-0727.bb.online.no) (*.net *.split)
[00:41:41] *** Quits: Partmedia (~kevinz@2600:6c40:6400:2f:221:ccff:fe66:4105) (*.net *.split)
[00:41:42] *** Quits: bandali (~bandali@gnu/bandali) (*.net *.split)
[00:41:42] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[00:41:42] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[00:41:42] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[00:41:42] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[00:41:42] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[00:41:43] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[00:41:43] *** Quits: jfh (~jfh@ip68-108-33-76.lv.lv.cox.net) (*.net *.split)
[00:41:43] *** Quits: chealjo (~nimiux@freeshell.de) (*.net *.split)
[00:41:43] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[00:41:43] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[00:41:44] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[00:41:44] *** Quits: cyberbanjo (mksybr@tilde.team) (*.net *.split)
[00:41:44] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[00:41:44] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[00:41:44] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[00:41:45] *** Quits: antoni (~antoni@rozalia.antoszka.pl) (*.net *.split)
[00:41:45] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[00:44:10] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[00:44:10] *** Joins: Bike (~Glossina@71.69.170.70)
[00:44:10] *** Joins: santiagopim (~user@84.78.243.45)
[00:44:10] *** Joins: lonjil (~quassel@user/lonjil)
[00:44:10] *** Joins: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com)
[00:44:10] *** Joins: copec (~copec@schrodbox.unaen.org)
[00:44:10] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[00:44:10] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[00:44:10] *** Joins: pjb (~pjb@user/pjb)
[00:44:10] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[00:44:10] *** Joins: derelict (~derelict@user/derelict)
[00:44:10] *** Joins: antoni (~antoni@rozalia.antoszka.pl)
[00:44:10] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[00:44:10] *** Joins: Partmedia (~kevinz@2600:6c40:6400:2f:221:ccff:fe66:4105)
[00:44:10] *** Joins: opfez (~opfez@ti0013a400-0727.bb.online.no)
[00:44:10] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[00:44:10] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[00:44:10] *** Joins: beach (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)
[00:44:10] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[00:44:10] *** Joins: ns12 (~ns12@user/ns12)
[00:44:10] *** Joins: nexeq (nexeq@user/nexeq)
[00:44:10] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[00:44:10] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:44:10] *** Joins: jfb4 (~jfb4@178.62.2.68)
[00:44:10] *** Joins: phoe (~phoe@user/phoe)
[00:44:10] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[00:44:10] *** Joins: cyberbanjo (mksybr@tilde.team)
[00:44:10] *** Joins: Riviera (Riviera@user/riviera)
[00:44:10] *** Joins: Kabriel (~Kabriel@user/kabriel)
[00:44:10] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:44:10] *** Joins: zagura (~zagura@user/zagura)
[00:44:10] *** Joins: bandali (~bandali@gnu/bandali)
[00:44:10] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:44:10] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[00:44:10] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[00:44:10] *** Joins: micro (~micro@user/micro)
[00:44:10] *** Joins: shka (~herr@109.231.0.226)
[00:44:10] *** Joins: random-nick (~random-ni@87.116.167.125)
[00:44:10] *** Joins: neominimum (sid537410@user/neominimum)
[00:44:10] *** Joins: aeth (~aeth@user/aeth)
[00:44:14] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[00:44:33] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[00:44:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:44:33] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[00:44:33] *** Joins: tewi (~tewi@apn-95-41-105-74.dynamic.gprs.plus.pl)
[00:44:33] *** Joins: Josh_2 (~user@37.25.47.130)
[00:44:33] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[00:44:33] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[00:44:33] *** Joins: gko` (~user@user/gko)
[00:44:33] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[00:44:33] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:44:33] *** Joins: opcode (~opcode@user/opcode)
[00:44:33] *** Joins: lagash (lagash@lagash.shelltalk.net)
[00:44:33] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[00:44:33] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[00:44:33] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[00:44:33] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[00:44:33] *** Joins: malaclyps (~mala@user/malaclyps)
[00:44:49] *** Joins: jealousmonk (~user@user/jealousmonk)
[00:44:49] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[00:44:49] *** Joins: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de)
[00:44:49] *** Joins: il (~il@user/f/x-7830992)
[00:44:49] *** Joins: selwyn (~selwyn@user/selwyn)
[00:44:49] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[00:45:01] *** Joins: bldr (~bull@185.117.72.168)
[00:45:01] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[00:45:02] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 240 seconds)
[00:45:08] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[00:45:13] *** Joins: epony (epony@lz2.eu)
[00:45:17] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[00:45:17] *** Joins: mzan (~quassel@mail.asterisell.com)
[00:45:17] *** Joins: jfh (~jfh@ip68-108-33-76.lv.lv.cox.net)
[00:45:17] *** Joins: chealjo (~nimiux@freeshell.de)
[00:45:17] *** Joins: minion (~minion@common-lisp.net)
[00:45:17] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[00:45:38] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 260 seconds)
[00:45:41] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Ping timeout: 252 seconds)
[00:46:06] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[00:50:02] <neominimum> One thing I am unsure of though is if all `(car x)` are generalised references, or if they are only within the context of setf.
[00:51:59] <Bike> What do you mean? Like, what would being versus not being a generalized reference look like.
[00:57:01] <neominimum> simply by name, like generalise references are forms but not all forms are generalised references. are there contexts within which generalis-Gah... GRs are said to only exist. or is every (car x) a GR.
[00:58:31] <Bike> the spec says that generalized reference is "the use of" a form, rather than the form itself, as if it was a variable that could be read and written
[00:59:14] <Bike> "(car x)" can appear like just "x" can if it's being evaluated, so i guess you could say every use of (car x) in an evaluation is like reading a variable
[01:01:31] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:01:31] *** erbium.libera.chat sets mode: +o ChanServ
[01:01:49] *** epony is now known as Guest3959
[01:01:51] <Bike> all the concepts of generalized reference are basically in service of explaining setf. outside of that context, it's not so important
[01:02:03] *** Joins: sepanko (~sepanko@user/sepanko)
[01:06:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:06:38] <neominimum> I see, well that makes sense. You know what they say about a little bit of knowledge... I may have just made a mess of things. apologies, but thanks for straightening that out for me.
[01:06:57] <Bike> it is not a problem
[01:09:02] *** Joins: speskk (~speskk@user/speskk)
[01:17:43] <jealousmonk> Yes, it is not a problem for me either. Not that I'm going to delve into this right now, but I think it's good to know of the existence of these related concepts. Thanks neominimum
[01:20:19] *** Joins: makomo (~makomo@user/makomo)
[01:21:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:23:48] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[01:32:02] *** Quits: tewi (~tewi@apn-95-41-105-74.dynamic.gprs.plus.pl) (Ping timeout: 250 seconds)
[01:45:32] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:48:48] *** Joins: Oladon (~olad@98.43.81.226)
[01:56:24] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[02:21:29] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:33:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:37:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[02:45:51] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:55:31] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[04:06:35] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:34:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:39:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:54:29] <speskk> I've been doing the lisp-koans link above and it's bending my mind a bit
[04:55:32] <speskk> This was weirding me out quite a bit: `(let ((z 4)) (list z (let ((z 2)) z)))
[04:55:58] <speskk> Ignore the `, typo. I think I understand what's happening, I'm not sure I understand where this kind of pattern would be useful.
[04:56:15] <speskk> For brevity I suppose? Maybe I better just keep reading and it'll become clear.
[04:57:15] <bremner> speskk: I think it's just a demo of how nested scopes work
[04:57:23] <bremner> or "shadowing", if you like
[04:58:56] <speskk> Exactly, I think I'm just stretching to imagine the practical application. Just being able to push atoms around in a tight scope, without having to have a ton of boiler plate? I'm sure more will become clear as I keep reading. I feel like I'm not nearly smart enough to be a lisp hacker, but I'm doing my best :D
[04:59:10] <speskk> And enjoying it!
[04:59:57] <[w]> if you're looking at it as if its some magical sauce you dont get yet, its not really. its just showing lexical scope.
[05:00:08] <[w]> the scope of a variable
[05:00:36] <[w]> where nested lets would be useful? probably something but its kinda gross
[05:01:52] <bremner> more popular for people trying to avoid mutation
[05:02:39] <bremner> more or less idiomatic in scheme
[05:04:16] <[w]> let is good but why nested lets? you can have several variable binding forms with a single let
[05:04:20] <[w]> and there is let*
[05:05:06] <bremner> oh well typically there would be more code in between
[05:07:39] <Bike> today i wrote code to the effect of (let ((low ...)) (cond ((listp low) (let ((l (car low))) ...)) ...)). obviously i could not move the inner let out, since i don't know that the thing is a cons yet.
[05:09:21] <bremner> yeah, I always like pattern matching for situations like that. Is there some popular pattern matching macros in common-lisp (like match in racket if you happen to know that)
[05:09:56] <Bike> https://github.com/guicho271828/trivia
[05:10:26] <Bike> which is based on https://github.com/m2ym/optima, a repo with more examples and syntax
[05:10:59] <bremner> thanks.
[05:11:21] <speskk> Great info, thanks folks.
[05:12:47] <Bike> and of course a pattern matching library is going to be doing lets under the hood.
[05:15:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:15:36] <Bike> in fact i just tried (trivia:match x ((cons z _) z)), and it macroexpands into more or less what i wrote up there, plus a whole lot of other code.
[05:21:36] <Bike> a lot of lisp code is computer generated, by macros or otherwise. sometimes patterns that would be stylistically dubious are nonetheless important to have available to code generators and analyzers.
[05:22:04] <Bike> another example is TAGBODY, which lets you do goto. and as you know, goto has been considered bad style for over fifty years.
[05:23:00] <bremner> let* is another example sometimes expanded into nested lets. I'm not sure if that's the case in common lisp.
[05:23:35] <Bike> not as usual as it is in scheme, because the syntax of declarations makes it a little trickier. but sometimes.
[05:23:41] <bremner> yeah, that makes sense
[05:28:32] *** Joins: random-nick (~random-ni@87.116.181.150)
[05:31:58] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:34:29] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:59:05] *** Quits: Guest3959 (epony@lz2.eu) (Quit: QUIT)
[06:04:24] *** Joins: epony (epony@user/epony)
[06:27:24] *** Joins: Bike (~Bike@71.69.170.70)
[06:28:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:32:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[06:56:04] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (Remote host closed the connection)
[07:02:50] *** Joins: dre (~dre@2001:8003:c932:c301:a9ae:c59a:a85f:47a7)
[07:10:21] *** Quits: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:12:17] *** Joins: silasfox (~sbv@p200300cec71e0500336c21a235a152ea.dip0.t-ipconnect.de)
[07:30:38] <beach> Good morning everyone! 
[07:41:58] *** Joins: occ (~occ@user/occ)
[07:50:46] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[08:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:11:19] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:17:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:22:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:52:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:56:13] *** Joins: domovod (~domovod@176.196.122.197)
[08:59:23] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:17:17] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[09:17:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[09:55:22] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Quit: Lost terminal)
[09:56:42] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[10:18:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:23:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[10:31:21] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181)
[10:55:52] *** Quits: santiagopim (~user@84.78.243.45) (*.net *.split)
[10:55:52] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: speskk (~speskk@user/speskk) (*.net *.split)
[10:58:01] *** Joins: speskk (~speskk@user/speskk)
[10:58:01] *** Joins: santiagopim (~user@84.78.243.45)
[10:58:01] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[11:07:37] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[11:07:58] *** Joins: tewi (~tewi@apn-31-0-3-0.dynamic.gprs.plus.pl)
[11:52:58] *** Joins: shka (~herr@109.231.0.226)
[11:56:38] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[11:57:02] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[12:19:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:23:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[12:28:23] <tewi> when slime REPL is hanging because of a command, what can I do to abort it and regain control?
[12:41:26] <santiagopim> tewi: C-c C-b is the usual way.
[12:44:40] <santiagopim> https://slime.common-lisp.dev/doc/html/Recovery.html
[13:09:00] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:12:49] <tewi> santiagopim: thanks
[13:16:49] <tewi> is there something stronger? in a situation where slime-interrupt doesn't work?
[13:26:36] <White_Flame> C-c C-c
[13:26:52] <White_Flame> is my usual go-to
[13:29:52] <White_Flame> (not sure if/how it differs from C-c C-b, though)
[13:34:01] <tewi> i think it's bound to the same thing. for me at least, C-c C-c is slime-interrupt
[13:34:47] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:35:35] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5)
[14:20:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:25:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:25:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:32:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:34:43] *** Joins: domovod (~domovod@176.196.122.197)
[15:44:05] *** Joins: Bike (~Bike@71.69.170.70)
[16:12:33] *** Quits: silasfox (~sbv@p200300cec71e0500336c21a235a152ea.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:13:16] *** Joins: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de)
[16:21:31] *** Quits: speskk (~speskk@user/speskk) (Ping timeout: 256 seconds)
[16:22:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:25:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[16:26:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:27:12] *** Joins: aeth (~aeth@user/aeth)
[16:29:40] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:07:00] *** Joins: Bike (~Glossina@71.69.170.70)
[17:23:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:26:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[17:27:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:28:28] *** Joins: aeth (~aeth@user/aeth)
[17:33:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:35:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:24:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:26:57] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[18:27:23] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[18:35:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:37:51] *** Joins: aeth (~aeth@user/aeth)
[18:40:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:40:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:44:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:57:27] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[18:59:07] *** Joins: domovod (~domovod@176.196.122.197)
[19:13:19] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 256 seconds)
[19:30:10] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: You have been kicked for being idle)
[19:33:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:34:17] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:37:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:51:06] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[20:32:05] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:37:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:43:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:46:56] *** Joins: Oladon (~olad@98.43.81.226)
[21:03:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:15:41] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:54] *** Joins: ns12 (~ns12@user/ns12)
[21:44:51] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[21:49:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[22:10:41] *** Quits: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:12:22] *** Joins: silasfox (~sbv@p4fe8d839.dip0.t-ipconnect.de)
[22:35:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:39:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:44:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:25:57] *** Quits: silasfox (~sbv@p4fe8d839.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:41:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:56:48] *** Joins: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net)
[23:56:48] *** Quits: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net) (Changing host)
[23:56:48] *** Joins: speskk (~speskk@user/speskk)
