[00:00:00] *** Joins: Enitin (~Enitin@82.102.22.85)
[00:00:20] *** Joins: s0k1t_ (~s0k1t@86.106.121.31)
[00:04:09] *** Quits: s0k1tisgay (~s0k1t@193.27.13.184) (Ping timeout: 250 seconds)
[00:06:42] *** Joins: coodre` (~user@160.177.41.231)
[00:07:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[00:09:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:10:13] *** Quits: mahmutov (~mahmutov@37.155.75.89) (Ping timeout: 250 seconds)
[00:10:34] *** Joins: Narrat (~omnius@p200300df5f4d4b8706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:11:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:11:57] *** Quits: coodre` (~user@160.177.41.231) (Ping timeout: 240 seconds)
[00:12:11] *** Joins: coodre``` (~user@160.177.41.231)
[00:13:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:13:14] *** Joins: greenbagels (~gb@user/greenbagels)
[00:13:28] <coodre```> why are the optimization flags messing up my functions
[00:14:14] <twkm> your code is likely flawed.
[00:15:03] <nitrix> The compiler makes assumptions about certain things based on rules in the Standard that your program was supposed to adhere to.
[00:15:33] <coodre```> when i call a function, it ends up calling another one
[00:16:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[00:17:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:18:23] *** Joins: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it)
[00:18:24] *** Joins: u0_a391 (~u0_a391@2600:380:a467:457d:dbb:15ee:c09c:a824)
[00:18:26] <twkm> sometimes optimization surprises you -- as long as the outcome was per the rules the compiler did the right thing.
[00:18:33] <jackk> excuse me sirs
[00:18:41] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[00:18:50] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[00:19:17] <jackk> a char pointer string in a function, stays in memory after the function quit ?
[00:20:10] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:20:16] *** Quits: coodre``` (~user@160.177.41.231) (Ping timeout: 268 seconds)
[00:20:46] <nitrix> jackk, char *s = "Hello World!"; // How many objects are involved here?
[00:21:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:22:13] <ioxzev1z> jackk, naw, the variable does not exist after the function ends
[00:22:23] <ioxzev1z> You can make the string stay in memory if you malloc it
[00:22:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:22:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:22:46] *** Joins: wroathe (~wroathe@user/wroathe)
[00:22:51] <ioxzev1z> But void foo(void) { char *s = "Hello world"; } s does not exist after foo ends
[00:23:20] *** Quits: u0_a391 (~u0_a391@2600:380:a467:457d:dbb:15ee:c09c:a824) (Ping timeout: 268 seconds)
[00:24:26] <nitrix> The variable might still be valid depending on its scope. And there are other ways to keep a string "in memory" than using malloc.
[00:25:25] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[00:25:27] <nitrix> I would've preferred opening the discussion about storage durations, scopes and lifetimes. We don't have to rush things.
[00:27:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[00:28:30] <jackk> look like it stays
[00:28:37] <jackk> why ?
[00:28:48] <ioxzev1z> nitrix, have fun
[00:29:40] <jackk> i did this function:
[00:29:42] <jackk> static char* forg() { char *p = "hello"; return p; }
[00:29:55] <ioxzev1z> Yeah that's wrong
[00:30:01] <jackk> and in main:
[00:30:03] <jackk> char *g = forg(); sleep(3);
[00:30:03] <jackk> printf("STRgg:%s:\n", g);
[00:30:09] <ioxzev1z> Lets see
[00:30:13] <nitrix> There's nothing wrong with it. Stop confusing him.
[00:30:18] <ioxzev1z> ,cc static char* forg() { char *p = "hello"; return p; }
[00:30:22] <candide> ioxzev1z: Success (no output).
[00:30:27] <ioxzev1z> ,cc static char* forg() { char *p = "hello"; return p; } forg();
[00:30:30] <candide> ioxzev1z: no output: forg() = 0x40302c "hello"
[00:30:43] <ioxzev1z> Ah, the string exists
[00:30:51] <jackk> wtf
[00:30:55] <nitrix> Of course it does.
[00:31:08] <nitrix> jackk, Are you going to start answering my questions?
[00:31:23] <jackk> yeah what?
[00:31:30] <nitrix> > <nitrix> jackk, char *s = "Hello World!"; // How many objects are involved here?
[00:31:36] <jackk> 2
[00:31:51] <jackk> the pointer and the string
[00:32:43] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:32:57] *** Quits: n3rdy1 (~n3rdy1@c-73-14-53-56.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[00:32:58] <jackk> but guy you didnt know this, you sayd no  at my first question, like i'd say
[00:33:03] <nitrix> Good. One of them is the string literal, which has the type `char[13]` with a static storage duration, the other object is `s` which has the type `char *` and has automatic storage (at least in your function example).
[00:34:44] <pragma-> while iox is correct that `s` no longer exists after `void foo(void) { char *s = "Hello world"; }`, the `"Hello world"` string literal exists for the entire duration of the program and a pointer to it can be safely returned.
[00:35:27] *** Joins: dan_pena (~dan_pena@83.118.209.131)
[00:35:32] <jackk> wow
[00:35:32] <nitrix> jackk, C has 4 storage durations. Static, allocated, automatic and thread. They are directly related to lifetimes. Static means the object lives for the entire execution of the program, allocated is manually managed by the user with functions like malloc/realloc/free, automatic objects until they go out of scope and thread I wont get into.
[00:35:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:36:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[00:36:15] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:36:21] <nitrix> jackk, So the string literal with static storage exist for the entire execution of the program, while the `s` object with automatic storage goes away at the end of the function block.
[00:36:44] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8352:571e:4c5b:4bff:5de3:55a6) (Read error: Connection reset by peer)
[00:36:46] <jackk> ojk
[00:37:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:37:34] <jackk> So everytime i make a char pointer string in a function i have to free it ? i had no idea of this
[00:38:00] <sham1> What do you mean by "make a char pointer string"
[00:38:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:38:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:38:07] *** Joins: wroathe (~wroathe@user/wroathe)
[00:38:13] <pragma-> You only free things that were acquired with malloc/realloc/strdup
[00:38:18] <nitrix> No you don't. You only free objects that have allocated storage, obtained with malloc.
[00:38:22] <strajder> for every malloc/calloc you need free
[00:39:04] <strajder> add what pragma- wrote to the list ofc
[00:40:19] <pragma-> I'm just going to say "allocation functions" from now on.
[00:40:29] <strajder> in general, whenever some function's description says "it returns newly allocated memory" you need to free that
[00:40:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[00:41:00] <omegatron> and only ONCE
[00:41:23] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[00:41:27] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Read error: Connection reset by peer)
[00:41:31] <pragma-> free() ought to set the pointer to null for you.
[00:41:35] <pragma-> that should be standardized.
[00:41:59] <strajder> there are some seemingly unrelated functions from the stdlib which allocate memory, for example scandir allocates namelist
[00:42:22] <nitrix> scandir isn't in the standard library.
[00:42:37] <strajder> ok, my bad.
[00:42:54] <strajder> s/from the stdlib//
[00:43:00] <DarkUranium> pragma-: that wouldn't be of much use.
[00:43:07] <pragma-> strdup is going to be standard in c23, i hear. thats why i included it in my list. but i forgot calloc >:(
[00:43:27] <DarkUranium> Most cases of use-after-free are in more complex things. And more complex things will hide the free() in *another* function.
[00:43:56] *** Joins: john99 (~john99@171.246.103.34.bc.googleusercontent.com)
[00:44:02] <DarkUranium> In other words `void foo_dealloc(Foo* foo) { <...> free(foo); }`, the NULL assignment there would be of no help whatsoever.
[00:44:13] <pragma-> but most functions will have an if (p) or if (!p) check at least somewhere that would catch a null pointer. free() makes the pointer invalid, so it ought to set it to null automatically.
[00:44:15] <DarkUranium> It only helps if you do a use-after-free in the same function, which is very rare.
[00:44:35] <DarkUranium> (and only when calling `free` directly, not indirectly like `foo_dealloc`)
[00:44:38] <DarkUranium> Well, see above. It wouldn't.
[00:45:10] <nitrix> pragma-, My functions actually don't do p/!p checks over the arguments. I take the same stance the standard library does; the user ought to provide valid pointers.
[00:45:38] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[00:45:44] <pragma-> yeah, i guess i'm falling into the trap of believing that c ought to be a safer language
[00:45:45] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[00:45:57] <pragma-> c's purpose is to be portable and general, not safe.
[00:46:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[00:46:10] <DarkUranium> pragma-: More like the trap of believeing that most use-after-free cases are trivial `free(p); do_stuff(p);`.
[00:46:21] <DarkUranium> It must be in the same function *and* directly calling `free` (and not via some other fn)
[00:46:28] <DarkUranium> nitrix: I do assert() the arguments sometimes. When I can be bothered.
[00:46:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:47:04] <DarkUranium> Exception: As a rule of thumb, I tend to allow any "deallocators" to silently ignore nulls.
[00:47:35] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[00:48:20] <pragma-> apparently it's a huge pain in the ass for modern cpu designers to support C's abstract machine. they lament that modern cpus could be used so much more powerfully and efficiently if c wasn't in the way. then again the itanium failed.
[00:48:25] <nitrix> I used to have that policy too. I made initialization functions simpler. If anything went wrong, they'd just call the cleanup and in the case where you were midway in the initialization, it would only clean what was necessary.
[00:48:29] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[00:48:40] <nitrix> Assuming you took care of zero-ing everything before hand.
[00:49:05] *** Joins: monkey_ (~user@190.104.116.153)
[00:49:17] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[00:49:25] <nitrix> But I didn't like that sort of implied policy, too tricky to enforce and maintain.
[00:50:02] <nitrix> So now, cleanup functions assumes the object was completely initialized properly. Initialization functions that have errors have to figure out how to undo what they've screwed up themselves.
[00:50:07] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:50:18] <nitrix> Much nicer imo.
[00:50:18] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[00:50:35] *** Quits: _nuxil_ (~nuxil@141.195.51.213) (Remote host closed the connection)
[00:50:46] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[00:51:12] *** Joins: useretailz (~useretail@31.41.69.140)
[00:52:20] *** Quits: _nuxil_ (~nuxil@141.195.51.213) (Remote host closed the connection)
[00:53:01] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[00:53:17] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[00:53:23] <pragma-> I used to distrust implementations, so I'd put error statements at unreachable code points in case they ever somehow got reached.
[00:53:32] *** Joins: nuxil (~nuxil@141.195.51.213)
[00:53:47] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:53:55] <omegatron> and .. did they ever ?
[00:54:05] <pragma-> No.
[00:54:32] <sham1> Never have I ever gone down an unreachable codepath
[00:54:40] <nitrix> They do with too many chefs in the kitchen.
[00:54:42] * sham1 lies
[00:54:53] <pragma-> Well, actually, yes.
[00:55:12] <nitrix> Takes one person to overthink the logic and get it wrong.
[00:55:32] *** Quits: magla (~gelignite@55d4d2a6.access.ecotel.net) (Quit: Stay safe!)
[00:55:36] <nitrix> But in general, yeah, I'm against defensive programming.
[00:56:00] <pragma-> Thankfully more and more compilers are warning about non-exhaustive switch on enums when there's a case missing.
[00:56:30] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[00:56:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[00:56:46] <pragma-> Still annoying that enums are still ints and can be assigned between enum families. But at least there's warnings about this nowadays too!
[00:56:59] * pragma- remembers the old days.
[00:57:05] *** Joins: smoke (~smoke@user/smoke)
[00:57:15] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:57:40] <pragma-> that is, if they remember to enable warnings
[00:57:45] <pragma-> I still don't get why warnings are opt-in
[00:57:50] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:57:57] <sham1> Calling them enums is misleading. They're just integer constants in C
[00:58:09] <nitrix> The warnings are so important in C. It kills me when I see projects with hundreds of warnings and the reasoning is "they're only warnings".
[00:58:13] <pragma-> sham1: aside from the warnings we get now!
[00:58:24] <sham1> Well sure, warnings
[00:58:32] <sham1> Warnings which, again as you said, aren't on by default
[00:58:37] *** Quits: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it) (Remote host closed the connection)
[00:58:39] <sham1> Geh
[00:58:41] <DarkUranium> <nitrix> So now, cleanup functions assumes the object was completely initialized properly. Initialization functions that have errors have to figure out how to undo what they've screwed up themselves.
[00:58:44] <DarkUranium> nitrix: I mean, same.
[00:59:03] <DarkUranium> But I tend to pass those objects by pointer, and those can be NULL.
[00:59:08] <DarkUranium> Not the contents, just the pointer. Basically a:
[00:59:14] <sham1> I personally like to unify cleanup in the case of failed initialization and rest of cleanup
[00:59:16] <DarkUranium> `if(!ptr) return;` at the start, and that's it.
[00:59:17] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[00:59:23] <sham1> So there's only one code path for cleaning stuff up
[00:59:34] <pragma-> ah-ha!
[00:59:36] <DarkUranium> sham1: makes sense, but there are sometimes practical concerns.
[00:59:37] * pragma- points.
[00:59:41] <sham1> Yes
[00:59:44] *** Joins: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it)
[00:59:48] * pragma- points at the wild if (!p)
[00:59:49] <sham1> Also
[00:59:52] <sham1> ptr != NULL
[00:59:58] <sham1> Please
[00:59:59] <DarkUranium> pragma-: you've missed all of what I said before.
[01:00:03] <pragma-> I was jesting.
[01:00:04] <sham1> Or in this case, ptr == NULL
[01:00:11] <DarkUranium> sham1: you're not my supervisor
[01:00:42] <sham1> Most probably not
[01:00:48] <jackk> sorry, had a crash, I missed the messagges after my last messagge
[01:01:09] <nitrix> DarkUranium, bool foo_init(struct foo *foo) { foo->a = 1; foo->b = strdup("b"); foo->c = strdup("c"); return true } // A simplified scenario like that, the initialization would have to check for errors in the strdup and if it's the second one that failed, free the first. It would also return false instead of true.
[01:01:27] <pragma-> jackk: /msg candide recall me -c #c -A 100
[01:01:32] <sham1> But I am a man of good taste and I feel that explicitly comparing against a value when your value isn't a boolean is good style
[01:01:33] <nitrix> DarkUranium, Only initializations that actually returned true marks the object as valid and you can then use foo_fini() on it.
[01:01:48] <pragma-> jackk: the candide bot will /msg you the 100 messages after your last message
[01:02:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:02:55] *** cousteau is now known as cousteau_
[01:03:57] <pragma-> nitrix: so you use out parameters on your initializers? I just return null on failure and a valid pointer on success
[01:04:30] *** cousteau_ is now known as cousteau
[01:04:45] <pragma-> initalizers/constructors
[01:05:01] <nitrix> Yes, the caller chooses the storage durations. I don't want to have the initializers all do allocated storage.
[01:05:29] <jackk> so the string is using memory, why shouldnt I free it ? or could be overwritten ?
[01:05:44] <pragma-> nitrix: makes sense
[01:05:51] <useretailz> is there some grep-like function in standard libraries?
[01:05:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:06:14] <pragma-> useretailz: strstr?
[01:06:35] <nitrix> pragma-, It's a bit more flexible. You can have arena, data structures, temporary variables, you do your objects as you please and just bother initializing/finalizing them once they're created however you like.
[01:06:35] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:06:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[01:07:10] <sham1> I just love it when people leave
[01:07:16] <sham1> Such a fun chatting experience
[01:07:16] <nitrix> I used your way before for smaller programs. Not very variable when you're making games.
[01:07:29] <nitrix> *viable
[01:07:39] *** Joins: useretailz (~useretail@31.41.69.140)
[01:07:56] <sham1> pragma-'s way is sometimes convenient, but having out-parameters gives you more flexibility
[01:07:56] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:08:10] <sham1> Of course one could also do it the other way. Having the possible error be an out-parameter
[01:08:40] *** Joins: useretailz (~useretail@31.41.69.140)
[01:08:55] <nitrix> I've sacrificed the error codes for now.
[01:09:16] <nitrix> I think they would return `int` instead of `bool`, that's about it.
[01:09:27] <cousteau> sham1: I've seen `if (!p)` used often.  It's true that `if (p == NULL)` is more descriptive, but pointers have this whole "address-boolean duality" vibe that sorta makes sense to use them directly as the object of `if` and `!`
[01:09:54] <cousteau> it's like they can be pointers or "No."
[01:10:03] <cousteau> "if the pointer isn't, then..."
[01:10:23] <DarkUranium> There is also something to be said about syntactic noise, and avoidance of it where it makes sense.
[01:10:40] <cousteau> but I also tend to explicitly compare to 0 or NULL or whatever makes sense unless I'm dealing with something that is semantically a boolean value.
[01:11:05] <cousteau> (not necessarily a _Bool; an int can also be a boolean value, as long as it can only store the values 0 or 1)
[01:11:11] <pragma-> There's also something to be said about coding defensively in case some moron co-worker twiddles the wrong frobble.
[01:11:30] <cousteau> yeah, I tend to be explicit
[01:11:45] <pragma-> or the user configures the wrong options
[01:11:49] <nitrix> I will compare to 0 sometimes too. Just because some libraries prefer the error code style (0 = success) instead of the boolean style (1 = success, 0 = failure).
[01:11:55] <cousteau> most of the time, my code is inherited by a complete moron who has no idea what I was thinking on when I wrote the code, and starts randomly messing with it and breaking it
[01:12:02] *** Joins: monkey_ (~user@190.104.116.153)
[01:12:06] <cousteau> most of those times, that moron... is me!
[01:12:08] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:12:12] <pragma-> I was gonna say it!
[01:12:14] <pragma-> wasn't
[01:12:27] <nitrix> That actually never happens to me :/
[01:12:38] <sham1> I do disagree with the point about syntactic noise. I feel that the clarity outweights the advantages of the expression being shorter
[01:12:56] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:12:56] <nitrix> I write code more slowly than most people, so when I start doubting the code, I know it's probably there for a reason and take extreme care.
[01:13:35] <sham1> Also I do actually like the style of 0 == success. It means that you don't need to branch on your happy path. Of course you can always invert it or whatever, but I do like it more than the boolean style stuff, unless of course the operation is a predicate
[01:13:35] <nitrix> Like, I'll validate all my assumptions before I ever dare changing it.
[01:14:04] <cousteau> it's clearer, that's for sure.  The discussion is whether or not doing (!ptr) is an obvious enough idiom, which I guess depends on the coding style.  I don't know how often coding styles suggest the explicit comparison.
[01:14:19] <nitrix> !ptr is fine by me.
[01:14:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:14:32] <sham1> Well it's obvious enough, especially when the identifier is obvious like that one is
[01:14:36] *** Joins: Viewday118 (~Viewday@user/viewday)
[01:14:39] <sham1> And/or when you know the type
[01:14:39] <nitrix> It smells weakly typed, but meh, it's C.
[01:15:28] <cousteau> sham1: if the compiler is smart enough, then "this will branch or that won't branch" is pointless.  AFAIK most processors have both "branch if zero" and "branch if nonzero" instructions.
[01:15:37] <jackk> here is the code: https://bpa.st/GABA
[01:15:41] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 252 seconds)
[01:15:52] <cousteau> GABA GABA HEY
[01:15:52] <jackk> should I free s ?
[01:15:59] <nitrix> Go does ptr != nil, to check that pointers are VALID, and ptr == nil to check when they aren't and it confuses the heck out of me.
[01:16:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:16:06] *** Viewday118 is now known as Viewday11
[01:16:17] <sham1> cousteau: it's not just about the processor. The compiler of course figures it out. But it's also about the human
[01:16:20] <nitrix> Because it's not always obvious that the identifier represents something that ought to be a result or an error.
[01:16:39] <cousteau> I think the real point of 0=success, !=0=error is that it allows you only one possible success code, but many different error codes you can later use to know which kind of error you had
[01:16:46] <cousteau> you typically only have one kind of success
[01:17:00] <cousteau> things usually have only one way to go right, and plenty of ways to go wrong
[01:17:10] <nitrix> In my mind, `result/ok` would be non-zero/non-null to be successful, while `error` needs to be zero/null to be successful.
[01:17:12] <sham1> Me, when I read code like this, like to skip things like branches
[01:17:14] <nitrix> Naming becomes important.
[01:17:23] <sham1> So having the happy path being not in the branch is nice
[01:17:57] <nitrix> For sure. Early returns as much as possible to keep the indentation levels low.
[01:17:59] <cousteau> jackk: you're not allocating s, to begin with
[01:18:10] <sham1> Same with handling exceptions or destructuring sum types in languages that have those
[01:18:17] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[01:18:23] <sham1> nitrix: early returns or gotos to cleanup
[01:18:23] *** Joins: Bova (~Bova@185.24.53.163)
[01:18:28] *** Joins: Viewday116 (~Viewday@user/viewday)
[01:18:46] <cousteau> which is bad, because you create s pointing to somewhere, but once you leave the function, that somewhere may not exist.  I don't know if that applies to string literals but I think it does.
[01:18:58] <nitrix> sham1, How do you do your cleanups? Everyone gotos to a single cleanup label? Multiple cleanup labels stacked?
[01:19:08] <nitrix> sham1, Or do you repeat code in each failure scenario?
[01:19:14] <sham1> Depends
[01:19:21] <sham1> Usually stack labels
[01:19:24] *** Joins: m4v (~znc@ubuntu/member/m4v)
[01:19:41] <sham1> Although when I have a dedicated cleanup function I tend to just have a singular "err" label
[01:19:50] * pragma- pats defer
[01:20:07] <sham1> Because as I said, I like to clean up on initialization error the same way as cleanup on success
[01:20:10] <pragma-> this bad boy can fit so many error handlers
[01:20:14] <nitrix> defer requires the blocks extension and __attribute__((cleanup)) though.
[01:20:18] <sham1> Is defer actually a thing yet
[01:20:18] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:20:21] <nitrix> Until it gets added to the standard :/
[01:20:26] <cousteau> nitrix: right.  Having a ! in the good result and a happy == in the horrible result is kinda misleading
[01:20:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:20:37] *** Viewday116 is now known as Viewday11
[01:20:38] <pragma-> cousteau: strcmp
[01:20:51] <nitrix> strcmp != 0, true.
[01:20:55] <nitrix> I hate that one for that too.
[01:21:08] <cousteau> pragma-: strcmp can fuck the right off
[01:21:09] *** Joins: useretailz (~useretail@31.41.69.140)
[01:21:10] <sham1> I always explicitly compare strcmp to zero
[01:21:19] <cousteau> should be strdiff or something
[01:21:25] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-161.cspire.com)
[01:21:30] <sham1> Well it fits alongside memcmp
[01:21:34] <nitrix> To strcmp's defense, at least when I use it, I'm counting the differences, the number makes a bit more sense
[01:21:41] <nitrix> It's not like a traditional error code.
[01:21:55] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[01:21:56] <sham1> Well the differences reported are for qsort and such sillyness
[01:22:05] <cousteau> "strdiff" and "memdiff" might have been clearer names though
[01:22:10] <sham1> Too long
[01:22:14] <pragma-> honestly, C should have a strequal function that returns _Bool now.
[01:22:14] <fizzie> It's also at least called `...cmp` and not `...eq`.
[01:22:28] <pragma-> and leave strcmp for qsort and such
[01:22:29] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[01:22:29] <cousteau> if (!strdiff(a, b)) - if strings a and b are not different
[01:22:42] <sham1> > streq > returns the lexical ordering
[01:22:52] <cousteau> `strneq` would've been ok-ish
[01:22:53] *** Quits: concrete-houses (~g@209.6.150.53) (Ping timeout: 256 seconds)
[01:22:54] <sham1> That'd be neat naming by the standards people
[01:22:59] <cousteau> and then `strnneq`... eww
[01:23:25] <pragma-> 99% of strcmp's usage is equality checking, not lexical comparision!
[01:23:38] <nitrix> fizzie probably knows the status of the defer proposal.
[01:23:42] <pragma-> there should be a simpler strequal in addition to strcmp by now
[01:23:52] <sham1> static inline _Bool streq(const char *a, const char *b) { return strcmp(a, b) == 0; }
[01:23:59] <cousteau> but the result needs to make no sense semantically for that remaining 1% to be possible at all!
[01:24:00] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[01:24:05] <sham1> Just stick to some utility header at the beginning of the project and forget about it
[01:24:13] <pragma-> fuggedaboudit
[01:24:27] <nitrix> sham1, You fell for the trap! str-prefixed functions are reserved!
[01:24:39] <sham1> static inline _Bool Streq(const char *a, const char *b) { return strcmp(a, b) == 0; }
[01:24:40] <cousteau> anyway, anyone want to check jackk's code?  I think it has multiple issues; specifically I'm not sure you're supposed to return string (literals) like that
[01:24:41] <sham1> There
[01:24:44] <cousteau> brb
[01:24:47] *** Joins: concrete-houses (~g@209.6.150.53)
[01:24:53] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[01:25:00] <pragma-> case-sensitivity is a mistake
[01:25:14] <nitrix> cousteau, It's fine.
[01:25:52] <jackk> tnx cousteau , it return the pointer to the string
[01:26:18] <nitrix> cousteau, The literal has static storage duration (program lifetime). The pointer returned to the caller remains valid.
[01:26:25] <superstar64> `int* x` and `int (*x)[]` are isomorphic right? where `x[n]` can be translated to `(*x)[n].
[01:27:04] <jackk> but that memory is used ? or its garbage and could be overwritten ?
[01:27:05] <nitrix> Well, `int (*x)[]` isn't a valid type.
[01:27:34] <superstar64> nitrix, gcc accepts this: `int f(int (*x)[]){ return (*x)[0]; }`
[01:27:37] *** Joins: monkey_ (~user@190.104.116.153)
[01:27:46] *** Quits: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it) (Remote host closed the connection)
[01:27:47] <fizzie> nitrix: I don't, and I got curious enough to skim the last few meeting minutes, and there was no discussion about it, not even in the list of papers deferred to future meetings (which notably does have the type implementation and lambda papers mentioned), so maybe it's not really going anywhere.
[01:28:12] <nitrix> superstar64, In a prototype only, yeah. But no, they aren't isomorphic. A pointer to a single int isn't the same as a pointer to an array of ints.
[01:28:22] *** Joins: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it)
[01:28:41] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[01:28:43] <fizzie> `int (*x)[]` is a perfectly valid type, it's just a pointer into an array of unspecified size (which is an incomplete type, but you can have pointers to incomplete structs as well).
[01:28:52] <fizzie> Not a really _useful_ one, since you can't do x[1] or anything.
[01:29:02] <nitrix> It's an incomplete type.
[01:29:06] <superstar64> weirdly enough. given a variable of type `int (*x)[]`, `(*x)[n]` is valid but `x[0][n]` isn't.
[01:29:06] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[01:29:53] <fizzie> ,cc int arr[10] = {[9] = 123}; int (*p)[] = &arr; int (*q)[20] = p; printf("%d", (*q)[9]); // good for defeating type safety, maybe
[01:29:56] <candide> fizzie: 123
[01:30:23] <fizzie> (It's not an incomplete type itself, it's just a pointer to an incomplete type.)
[01:30:38] <nitrix> For fucks sake fizzie.
[01:30:55] <superstar64> So wait, you can deference incomoplete types normally?
[01:31:16] <superstar64> *pointers to
[01:31:32] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[01:31:52] <superstar64> This doesn't seem to work `struct g; void f(struct g* x) { *x; }`
[01:32:00] <fizzie> You can "dereference" that one because you aren't really. Since it's an array type, the result just gets converted back to a pointer.
[01:37:46] <fizzie> Relevant standards bit is probably how C11 6.3.2.1p2 (lvalue conversion of non-array types) excludes arrays -- "if the lvalue has an incomplete type and does not have array type, the behavior is undefined" -- and the p3 rule on converting expressions of array type back to pointers does not have any requirement for the type to be complete.
[01:38:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:39:30] <fizzie> The reason why `x[0][n]` isn't valid is presumably because it is equivalent to `(*(x+0))[n]`, and 6.5.6p2 says (for the pointer-and-integer case) "one operand shall be a pointer to a *complete* object type and the other shall have integer type", emphasis added.
[01:39:57] <superstar64> Is it safe to convert from `int*` to `int(*)[]`? `int (*from(int *x))[] { return (int(*)[])x; }`
[01:40:08] <superstar64> *defined behavior
[01:40:41] <superstar64> The inverse is obviously true.
[01:42:11] <fizzie> I guess it _should_, unless it's possible for an array of `int`s to have a stricter alignment requirement than `int`, which sounds unlikely.
[01:42:19] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[01:43:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[01:47:09] *** Parts: eoli3n__ (~eoli3n@82-64-112-150.subs.proxad.net) ()
[01:47:21] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:47:35] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[01:48:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:50:09] <fizzie> It has to be said though that if you've got an array of ints you're not so sure about the size of, an `int *` pointing at its first element is a lot more reasonable choice than an `int (*)[]`.
[01:50:21] <nomagno> What does brackets mean?
[01:50:21] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:50:33] *** Quits: concrete-houses (~g@209.6.150.53) (Read error: Connection reset by peer)
[01:51:09] *** Joins: useretailz (~useretail@31.41.69.140)
[01:51:09] *** Quits: useretailz (~useretail@31.41.69.140) (Read error: Connection reset by peer)
[01:51:43] <pragma-> nomagno: [], <>, etc.
[01:51:46] <nomagno> int(*)[]... Oh it's a an array of irrelevant/unknown size in a function argument list
[01:52:06] <pragma-> though I maintain () are parentheses and {} are braces and [] are square brackets and <> are angle brackets. but some people just call everything brackets.
[01:52:07] <nomagno> pragma-: what?
[01:52:13] <pragma-> nomagno: what?
[01:52:37] *** Joins: seninha (~seninha@user/seninha)
[01:52:54] <nomagno> int (*from(int *x))[] { ... }
[01:53:08] <fizzie> ,english int (*from(int *x))[] { return 0; }
[01:53:09] <candide> fizzie: error: ISO C forbids nested functions
[01:53:21] <nomagno> See?
[01:53:23] <pragma-> yeah candide's probably misparsing that.
[01:53:46] <nomagno> I don't understand what those brackets there mean
[01:53:49] <fizzie> Do you get your autogenerated `main` wrapper for it?
[01:54:07] *** Quits: aighearach_ (~paris@c-71-63-160-210.hsd1.or.comcast.net) (Quit: Leaving)
[01:54:08] <fizzie> nomagno: It's an array declarator. It declares `from` as a function that accepts one `int *` and returns one `int (*)[]`.
[01:54:13] *** Joins: aighearach (~paris@user/aighearach)
[01:54:47] <nomagno> OHHHH, I have ALWAYS wondered how to return arrays
[01:54:57] <fizzie> It doesn't return an array, it returns a pointer to an array.
[01:55:27] <fizzie> If it was legal to return arrays, it would look like `int (from(...))[10]` though. But it's not.
[01:55:40] <nomagno> C could really use some updating in this respect
[01:55:43] <pragma-> `english` uses the exact same main wrapping as `cc`
[01:55:49] <pragma-> I really need to rewrite that.
[01:56:06] <fizzie> Just like `int (*from(int x))(char) { ... }` declares `from` as a function that accepts an `int` and returns a `int (*)(char)`. The syntax for returning a pointer to an array or a pointer to a function isn't really very pleasant.
[01:56:53] <nomagno> While it would obviously break code, I'd much prefer arrays to be first class citizens, with no decay and assignment capacities, and be able to cast them to pointers.
[01:58:02] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 240 seconds)
[01:58:04] <nomagno> Or, just point to the first element like a normal person, if you want a pointer to the first element :)
[01:58:17] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[01:59:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:59:35] <superstar64> nomagno, I would much rather have structs be first class. `struct { int x; int y;} id(struct {int x; int y} p)` should be a thing.
[02:00:13] <nomagno> superstar64: You can use a simple typedef for this though
[02:00:20] <nomagno> Structs are first class as long as you declare them
[02:00:24] <nomagno> Don't even need a typedef
[02:00:38] <superstar64> I know, but it would be so much nicer if you could have nameless structs.
[02:00:56] <fizzie> I don't know if I'd call that "first-class"ness though. It'd be more about tweaking the type compatibility rules.
[02:00:59] <nomagno> Anonymous structs are a thing, just inside structs for whatever twisted reason
[02:01:06] <nomagno> ^
[02:01:11] <superstar64> If they existed you could probably get close to prenix parametric polymorphism with macros.
[02:01:25] <nomagno> Structs are definitely first class, they're types that require declaration
[02:01:38] <fizzie> Anyway, that _is_ already a thing, it's just that the parameter `struct { int x; int y; }` is unrelated to the return value `struct { int x; int y; }` type.
[02:02:04] <superstar64> I just want structs in C to have structural typing.
[02:02:10] <nomagno> You know what would be useful in C? Operator overloading
[02:02:20] * pragma- considers kicking nomagno.
[02:02:21] <nomagno> It's not very procedural, of course
[02:02:50] *** Joins: Macuser (~Macuser@2600:1003:b461:a026:dcab:89c7:d4a3:7b5a)
[02:02:55] <sham1> nomagno: no
[02:03:31] <fizzie> ,cc -w struct { int a; int b; } foo(void) { __typeof__(foo()) ret = {123, 456}; return ret; } __typeof__(foo()) x = foo(); printf("%d, %d", x.a, x.b); // just for funsies
[02:03:33] <candide> fizzie: 123, 456
[02:03:57] <nomagno> I mean, there is no real reason C makes the distinction between primitives/scalars and structs so strictly marked outside being shorted to implement
[02:04:14] <sham1> I'd hope that would also work with C23 typeof
[02:04:32] <nomagno> Is C23 seriously including typeof?
[02:04:49] *** Quits: Akuli (~Akuli@82-203-163-72.bb.dnainternet.fi) (Quit: Akuli)
[02:04:53] <fizzie> It's at least seriously considering it.
[02:04:56] <superstar64> nomagno, I don't think it's easier to implement the way it currently is.
[02:04:57] <sham1> Well, it's still a proposal so maybe not
[02:05:07] <sham1> I'll remain hopeful tho
[02:05:19] <apotheon> I'm perfectly fine with giving some operator-like operation a function-like form instead of overloading the plus sign.
[02:05:23] <nomagno> What even would it be used for though?
[02:05:42] <nomagno> You can't not handle a type at compile time can you?
[02:05:46] <nomagno> void * still requires casting to be useful
[02:05:57] <fizzie> Preprocessor abuse is one obvious use case.
[02:06:16] <fizzie> Well, maybe not so big one without statement expressions though.
[02:06:29] <sham1> If combined with something like statement expressions, one could just port the Linux kernel container_of. One trick pony yes, but it'd be nice
[02:06:42] <nomagno> Oh, being able to get the type of parameters in preprocessor
[02:06:45] <superstar64> How possible would it be to retrofit structural equality for structs?
[02:06:48] <nomagno> That sounds legitimate
[02:06:59] <sham1> What would structural equality mean in this case
[02:07:11] <fizzie> There's a perfectly reasonable `container_of` that doesn't require statement expressions or `typeof`.
[02:07:12] <superstar64> Could making type equality more permissive break anything?
[02:07:33] *** Quits: cousteau (~cousteau@user/cousteau) (Ping timeout: 268 seconds)
[02:07:44] <pragma-> apotheon: I'm considering, for my own personal toy language, allowing functions that take 2 arguments to be in infix notation. `fn add(a, b) a + b; y = a add b;` Then certain expressions could be written more intuitively.
[02:07:45] <sham1> fizzie: true, although I'd say that having both would make other macros also nicer
[02:08:03] <sham1> (add a b) :P
[02:08:17] <apotheon> pragma-: That's awful.
[02:08:24] *** Joins: vicfred (~vicfred@user/vicfred)
[02:08:27] <pragma-> :D
[02:08:35] <sham1> pragma-: what would be the associativity and precedence
[02:08:59] <pragma-> sham1: I guess I'll end up copying Haskell's syntax for declaring associativity and precedence.
[02:09:03] <apotheon> make everything prefix
[02:09:08] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:09:12] <pragma-> defining
[02:09:19] <apotheon> I kinda like a lot of how UCBLogo does things.
[02:09:30] <apotheon> I should reimplement it for fun some day.
[02:09:37] <apotheon> also for better licensing
[02:09:46] <sham1> Make everything prefix? So you just reinvent lisp
[02:10:01] <superstar64> pragma-, I haven't read it yet, but this paper may help you with that https://www.cse.chalmers.se/~nad/publications/danielsson-norell-mixfix.pdf
[02:10:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:10:08] <superstar64> I hear agda uses it for it operators.
[02:10:18] <fizzie> That same "papers deferred to future meetings" list I mentioned earlier from the last meeting minutes does include the `typeof` proposal, and it's up to revision 3 already, so I imagine it's still in for a chance. I absolutely hate the ridiculous "most “existing practice”-iest feature to be proposed to the C Standard, possibly in the entire history of the C standard" hyperbole in the proposal
[02:10:20] <fizzie> though.
[02:10:27] <apotheon> superstar64: . . . uses what?
[02:10:28] <nomagno> sham1: parenthesized prefixed notation is ONE of a ton of lisp characteristics
[02:10:30] *** Joins: constxd_ (~brad@142.134.38.68)
[02:10:45] <superstar64> mixfix operators.
[02:10:46] <sham1> True. You may or may not also have the lisp semantics
[02:11:07] <superstar64> It lets you define new binary, prefix, and postfix operators.
[02:11:15] <apotheon> Original LISP was intended to have a more algol-like syntax.
[02:11:21] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:69cc:cb7c:3d5c:a5cc) (Quit: Leaving)
[02:11:26] <apotheon> Nobody bothered implementing that layer, though.
[02:12:45] <sham1> Looking at m-expressions nowadays just seems weird, although that's probably because I'm used to the sexp
[02:12:57] <pragma-> superstar64: cool. I use a Pratt parser and I'm going to try to figure out how to adapt it to support user-defined mixfix functions on my own first if I can :)
[02:13:24] <apotheon> Lisp is very sexpy.
[02:13:28] <pragma-> functions, not operators. I'm not a fan of random punctuation. I prefer words.
[02:13:43] <apotheon> s/py/p-y/
[02:13:50] <apotheon> Let's not confuse it with some Python BS.
[02:14:20] <fizzie> It also keeps calling `typeof` an operator, even though it's (of course) a declaration specifier.
[02:15:29] <fizzie> Or a kind of a type specifier, I guess. But not an operator anyway.
[02:15:48] <sham1> Probably just uses the same convention as sizeof and such, even if not applicable
[02:15:54] <pragma-> Well, I guess operators could be words, e.g. sizeof.
[02:16:21] <fizzie> It's fine for _operators_ to be words (`sizeof`, `_Alignof`), but this isn't an operator.
[02:16:28] *** Quits: kuoi (~kuoi@109.175.166.60) (Read error: Connection reset by peer)
[02:16:34] <pragma-> Yeah, I was more rambling about my own mixfix functions idea.
[02:16:42] <fizzie> Oh, I see.
[02:16:51] *** u0_a3911 is now known as Kit
[02:17:28] <sham1> Using dyadic functions as operators might be cool, although parsing could be an issue, because again, you might not know the precedence at parse time necessarily
[02:17:35] <fizzie> Also, the proposal consistently uses parentheses with the `sizeof <expression>` form in its examples.
[02:17:42] <fizzie> (The standard's existing examples do not.)
[02:17:47] <pragma-> sham1: yeah, I'm probably going to have to make multiple passes
[02:18:39] <fizzie> Actually, one of the newer notes (7.17.7.4p3) does seem to. Sad. :/
[02:19:16] <pragma-> one pass to gather all the mixfix functions and their assoc/prec definitions and then another pass to parse everything with that knowledge.
[02:21:43] <sham1> Might be enough just to skip all the tokens within a procedure unless you plan on having expressions outside of procedures or blocks without defined boundaries
[02:22:58] <pragma-> what is a block without a defined boundary?
[02:23:00] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[02:23:03] <sham1> Python
[02:23:11] <pragma-> the boundary is the indentation tho
[02:23:22] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:24:16] <pragma-> oh this isn't
[02:24:18] <pragma-> #c-offtopic
[02:24:30] <sham1> That's true.
[02:24:46] *** Quits: Bova (~Bova@185.24.53.163) (Quit: WeeChat 3.3)
[02:30:01] *** Quits: john99 (~john99@171.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[02:31:03] <jackk> can we talk about my question now ? https://bpa.st/GABA
[02:31:23] <jackk> I tryed and i cant even free the string !
[02:31:44] <jackk> so what is this ? a memory leaks by design ???
[02:31:48] *** Joins: rgrinberg (~textual@2806:265:5401:9431:1190:319b:cdf4:fd53)
[02:31:52] <jackk> in the basics
[02:32:03] <jackk> *leak
[02:32:57] <jackk> (the original questios was: why is the string kept in memory?)
[02:33:04] *** Quits: pizdets_ (~pizdets@183.182.111.38) (Ping timeout: 250 seconds)
[02:33:19] <BtbN> it's not strdup'ed or anything, so there's nothing to free.
[02:33:24] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[02:33:27] <BtbN> And it should be a const char*,
[02:33:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 240 seconds)
[02:33:50] *** Joins: pizdets (~pizdets@183.182.111.240)
[02:34:08] <BtbN> That's also probably the worst code style I have ever seen, if it's supposed to be one.
[02:34:54] <sham1> That looks like someone taking the lisp style of stacking closing parentheses at the end of the line and just applying it
[02:35:50] <jackk> please
[02:36:33] <trenka> jackk: you were explained already
[02:37:02] <jackk> I mean, its a c bug
[02:37:13] <BtbN> What is?
[02:37:38] <jackk> the string shouldnt stay in memory
[02:37:44] <trenka> why?
[02:37:55] <BtbN> It's a compile time constant string.
[02:38:01] <jackk> cos it was created in the function!
[02:38:06] <BtbN> no it wasn't.
[02:38:09] <trenka> it was not
[02:38:21] <jackk> yes
[02:38:24] <trenka> no
[02:38:27] <jackk> yes
[02:38:29] <trenka> no
[02:38:29] <BtbN> This is C, not Java.
[02:38:47] <BtbN> Literally nothing is created in that function. It just returns a pointer to that string.
[02:39:02] *** Joins: Jck_true3 (~jcktrue@user/jck-true/x-0200799)
[02:39:24] <jackk> so basicly that string will be in memory forever ? if i reuse the function 10000000 times it will fill my ram ?
[02:39:36] <BtbN> Why would it fill your ram?
[02:39:39] <sham1> It will return the same string
[02:39:50] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 252 seconds)
[02:39:50] <sham1> The string is only allocated once by the compiler
[02:39:54] <sham1> It's a constant
[02:39:57] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Ping timeout: 240 seconds)
[02:39:57] *** Jck_true3 is now known as Jck_true
[02:40:13] <sham1> It will be reused
[02:40:23] <trenka> jackk: you were told about 4 types of storage, I remember
[02:40:29] <BtbN> And also really should be const, since modifying it is bad news
[02:40:32] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:40:53] <jackk> if the string changes every time ?
[02:41:02] <mcf> string literals have static storage duration, which means their lifetime is the entire execution of the program
[02:41:04] <jackk> yes tre but why?
[02:41:23] <BtbN> If the string changes every time, it obviously isn't and can't be a compile time constant...
[02:41:57] <sham1> A string literal like that cannot change
[02:42:37] <sham1> It's both in the spec, and it's implemented like that, by putting the string data within a read-only spot in the program memory
[02:44:07] <jackk> its a bug
[02:44:24] <sham1> How is it a bug
[02:44:58] *** Quits: dan_pena (~dan_pena@83.118.209.131) (Ping timeout: 260 seconds)
[02:45:09] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[02:45:34] <BtbN> You're just lacking fundamental understanding on how things work. Nothing about this is a bug or leaking a single byte of memory.
[02:45:48] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[02:46:24] <sham1> jackk: what is the behaviour *you* would expect for this? That it allocate the string again every time you call the function
[02:46:57] *** Quits: zensei (~zensei@user/zensei) (Ping timeout: 240 seconds)
[02:47:17] <jackk> yes of course
[02:47:22] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:47:43] <fizzie> Even if you returned an allocated copy (`return strdup("hello");`) just so you can free it, there would *still* need to be a single static copy of the string that's never free'd to make that new copy *from*.
[02:47:52] <sham1> And what should it do if it cannot allocate anymore? Remember, C has no exceptions
[02:48:08] *** s0k1t_ is now known as s0k1t
[02:48:35] *** Joins: zensei (~zensei@user/zensei)
[02:49:06] <sham1> I'd get uneasy if the compiler were to generate things like calls to malloc behind my back
[02:49:06] <superstar64> Why is `int f(int x[][]){ return (*x)[0]; }` disallowed? I thought that top level arrays decayed to pointers and that pointers to incomplete arrays where okay.
[02:50:44] <trenka> superstar64: to index it you need all dimentions except last
[02:51:56] <nomagno> Say I need a multi-dimensional array of an arbitary struct type, that can be worked on similarly to a string
[02:52:15] <nomagno> so, char * and you have to 'null-terminate' the array
[02:52:23] <superstar64> trenka, I'm continuing off the earlier conversation about pointers to arrays. if `int f(int (*x)[]);` is legal then why isn't `int f(int x[][]);`?
[02:52:24] <nomagno> How do I go about picking a null-terminator value?
[02:53:09] <jackk> Ok so its a bad practice to use char pointers.
[02:53:10] <mcf> superstar64: C11 6.7.6.2p1 describes the requirements of array declarators: "The element type shall not be an incomplete or function type". so you can't form the type int[][] since int[] has incomplete type
[02:53:21] <trenka> jackk: no
[02:53:24] <fizzie> superstar64: I imagine it's just a case of the constraint about the element type of an array having to be a complete type is "applied earlier" than the conversion of arrays to pointers in function parameter lists.
[02:53:25] <jackk> yes
[02:53:38] <trenka> ok, I got your attitude :)
[02:53:43] <trenka> enjoy
[02:53:47] <superstar64> So arrays in a parameter aren't exactly the same as a pointer?
[02:54:03] <fizzie> They are, but the constraints on the declaration still apply (apparently).
[02:54:11] <nomagno> https://termbin.com/s2tb
[02:54:22] <superstar64> How many dark corners does C have?
[02:54:25] <nomagno> How do I... operate on this data structure?
[02:54:39] <nomagno> It's nested strings, basically, I just don't know if there's a better way to go about it
[02:54:59] <trenka> superstar64: I always discover something new :)
[02:55:17] *** Joins: cousteau (~cousteau@user/cousteau)
[02:55:31] <nomagno> The objective is basically the tokenization of a `hwdoc`
[02:56:25] <mcf> i think it's because although function parameters with array type are adjusted to pointer, you can't form the array type to begin with since the element type is incomplete
[02:56:43] <fizzie> Are you _sure_ you want string-style arrays of implicit size with a terminator, rather than just tracking sizes explicitly?
[02:57:52] <nomagno> I'm not sure how to track sizes explicitly when this data structure is meant to contain a data format that is basically just separators for a string
[02:58:17] <fizzie> You just add a `size_t` field that contains the size of the array, that's all.
[02:58:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[02:59:08] <nomagno> If I do that, is it still a good idea to keep this layout?
[02:59:12] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[03:00:28] <fizzie> The other "obvious" alternative is to have arrays of pointers (`section **sections;`) rather than arrays of structs (`section *sections;`), so that you can use a null pointer as a terminator.
[03:01:05] <wenxin> hi,there. I just confused about string array and array pointer . here is the thing: https://pastebin.com/J6tLW49C
[03:01:08] *** Joins: ferdna (~ferdna@user/ferdna)
[03:02:23] <nomagno> fizzie: OH! I used a very specific JSON tokenizer once, that simply marked the start and end of each token
[03:02:23] <nomagno> https://github.com/zserge/jsmn/
[03:02:35] <fizzie> wenxin: Re question one, there isn't a '\0' at the end of array `a` no matter whether you do or don't declare `b`, it's just that whatever _happens_ to be in memory after `a` can change.
[03:02:40] <cousteau> wenxin: well, `a` is not a string, because it's not \0-terminated
[03:02:54] <nomagno> This sounds like a better suited way to go about it
[03:03:24] <nomagno> you give the function an input, the and maximum number of tokens you expect to handle, then it returns a data sctructure that explicitly marks the start and end of each token
[03:03:26] <cousteau> so "reading all characters of `a` until encountering a \0" will be a problem because `a` doesn't have any \0
[03:03:42] <fizzie> And re question two, there's absolutely no requirement for `a` and `b` to be adjacent in memory. Where local variables are placed is entirely up to the implementation.
[03:04:12] <cousteau> so you'll go past the end of `a`... and start reading garbage, or whatever happens to be in memory after `a` (as fizzie said), or maybe do something disastrous because doing that is undefined behavior
[03:04:29] <cousteau> undefined behavior means that the compiler may choose to do some crazy thing that only works if you don't do that
[03:04:31] <fizzie> The given loop of course wouldn't continue to `b` in the question two example in any case, because there `a` _does_ have a '\0', ending the loop.
[03:05:12] <fizzie> But if you mean you inspected it in a debugger and didn't find `b` beginning right after `a` -- well, it doesn't have to. If you're in a debugger, you can check where `b` is.
[03:05:47] <fizzie> (It wouldn't even be too unlikely for `b` to be right _before_ `a`.)
[03:06:34] <cousteau> ,cc char a[5] = "abcd"; char b[4] = "efg"; printf("a=%p b=%p", a, b)
[03:06:36] <candide> cousteau: a=0x7fffffffe29b b=0x7fffffffe297
[03:06:49] <cousteau> notice how b is actualy *before* a, as fizzie just predicted
[03:07:04] <cousteau> (which makes sense, because that's how stacks are usually implemented... not sure why)
[03:07:12] <wenxin> thanks, I get it now. and one more question: Does these  declaration mean the same things: a[4]="abc"; a[]="abc"; a[]={'a','b','c'};
[03:07:21] <trenka> well, stack grows down :)
[03:07:23] <fizzie> The last one is different from the first two.
[03:07:31] <cousteau> trenka: it could grow up too
[03:07:34] <jackk> I made a new app, willl this fill my ram ? https://bpa.st/3GDA
[03:07:49] <trenka> cousteau: could
[03:08:00] <wenxin> fizzie:  what's difference
[03:08:04] <fizzie> wenxin: The last one is the same as `char a[3] = "abc";`.
[03:08:25] <fizzie> There's no implicit '\0' when you're initializing an array by listing characters explicitly.
[03:08:32] <cousteau> trenka: guess it's up to the ABI
[03:08:34] <fizzie> Just like there's no extra 0 in `int arr[] = {1, 2, 3}`.
[03:09:31] <trenka> jackk: no, it returns static buffer
[03:09:51] <nomagno> Yup, a tokenizer sounds like a much better idea
[03:10:17] <fizzie> cousteau: Back when memory layouts were simpler, it was convenient to have the stack start at "the end" and grow down, and the program at "the beginning", and that way you've sort of got an automatically scaling amount of available stack space depending on how large your program is.
[03:10:49] <cousteau> https://bpa.st/KICA -- this is jackk's paste but using syntax highlighting and proper indentation
[03:10:51] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:10:54] <wenxin> There's no implicit '\0' when you're initializing an array by listing characters explicitly.           So does a[]="abc"?
[03:10:56] <cousteau> (sorry, it was getting on my nerves)
[03:11:04] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[03:11:11] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 252 seconds)
[03:11:17] <fizzie> wenxin: No, that's initializing an array using a string literal, that one _does_ have a '\0' at the end.
[03:11:34] <nomagno> https://termbin.com/y94b
[03:11:36] <fizzie> (As long as you don't explicitly make the array too small for it.)
[03:11:44] <cousteau> wenxin: if you initialize an array with no specified width using a string literal, it'll be implicitly sized to accomodate the whole literal including the \0
[03:11:44] <nomagno> New reworked, effectively same functionality
[03:11:48] <nomagno> At least for my purposes
[03:11:54] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[03:12:58] <cousteau> if you explicitly state the width, it has to be bigger than the length of the string (remaining elements (chars) will be set to zero), or exactly the length of the string, in which case it won't include the trailing \0
[03:12:58] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 260 seconds)
[03:13:16] <fizzie> nomagno: That's kind of like the difference between a low-level vs. high-level XML parser; one delivers you a stream of tokens, the other builds the entire document tree into an in-memory data structure and gives you that. Which one's better depends very much on what you intend to _do_ with the data.
[03:13:37] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[03:14:12] <cousteau> so `char a[] = "abc";` is the same as `char a[4] = "abc";` and `char a[3] = "abc";` is also valid but `char a[2] = "abc";` is not
[03:14:39] <cousteau> char a]
[03:14:43] <cousteau> dammit
[03:15:21] <nomagno> char a[3] = "abc" is like char a[3] = {'a', 'b', 'c', '\0'}
[03:15:23] <nomagno> ,cc char a[3] = {'a', 'b', 'c', '\0'}
[03:15:25] <candide> nomagno: warning: excess elements in array initializer  note: (near initialization for 'a')  error: expected ',' or ';' before 'return'
[03:15:40] <nomagno> char a[3] = {'a', 'b', 'c', '\0'};
[03:15:46] <nomagno> ,cc char a[3] = {'a', 'b', 'c', '\0'};
[03:15:49] <candide> nomagno: [warning: excess elements in array initializer  note: (near initialization for 'a')] no output: a = "abc"
[03:15:56] <cousteau> `char a[] = {'a', 'b', 'c'};`, just like `char a[] = {97, 98, 99};` or `int A[] = {1, 2, 3};`, implicitly declares the variable to be 3 elements in size
[03:16:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:16:29] <nomagno> cousteau: A string literal implicitly appends a '\0' though
[03:16:46] <cousteau> nomagno: the implicit null character in string literals is exceptionally allowed to be removed though
[03:16:54] <fizzie> Only if there's room, or if the array is of unspecified size.
[03:16:55] <cousteau> this is explicitly stated in the standard somewhere
[03:17:07] <fizzie> Here's the full set of valid ones: `char a[] = "abc";`, `char a[4] = "abc";`, `char a[] = {'a', 'b', 'c', 0};` and `char a[4] = {'a', 'b', 'c', 0};` are all the same and create a 4-element array; and distinct from that, `char a[3] = "abc";`, `char a[] = {'a', 'b', 'c'}` and `char a[3] = {'a', 'b', 'c'}` make a 3-element array.
[03:17:07] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-161.cspire.com) (Read error: Connection reset by peer)
[03:18:08] <fizzie> It's in C11 6.7.9p14: "An array of character type may be initialized by a character string literal -- Successive bytes of the string literal (including the terminating null character if there is room or if the array is of unknown size) initialize the elements of the array."
[03:19:44] <fizzie> While `char a[2] = "abc";` on the other hand I suspect is made invalid by the (very vaguely worded) 6.7.9p2: "No initializer shall attempt to provide a value for an object not contained within the entity being initialized."
[03:20:08] <cousteau> fizzie: how do you always manage to find the paragraph of the standard faster than me?
[03:21:31] <fizzie> Not only that, all my pastes are artisan handcrafted typed-it-in jobs, because I'm so afraid pasting from the PDF would lead to terrible formatting issues.
[03:22:36] <cousteau> I paste from the plain text thingy candide uses
[03:22:58] <wenxin> char a [] ={'a','b','c'}    when i iterate a via GDB, it dose print '\000' after c.  I know that it happened to print '\000' ,but it made me confused.
[03:23:09] <cousteau> btw I need a plugin for my IRC client that will replace all newlines with spaces when pasting
[03:23:09] <fizzie> Ah, well, I guess it maybe doesn't have as navigable a table of contents?
[03:23:45] <cousteau> more like, I don't know where to look for stuff so I just ctrl-f the thing
[03:23:54] <jackk> I found a similar question here: https://www.dreamincode.net/forums/topic/176507-free-char-pointer-in-c/ however he uses malloc so he can free, may be this is the solution ? however im disappointed
[03:23:55] <fizzie> ,cc char a[] = {'a', 'b', 'c'}; printf("a has a size of %zu", sizeof a); // just to confirm
[03:23:57] <cousteau> wenxin: maybe there simply happens to be a \000 after it
[03:23:57] <candide> fizzie: a has a size of 3
[03:24:15] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[03:24:15] *** Quits: Enitin (~Enitin@82.102.22.84) (Read error: Connection reset by peer)
[03:24:21] <fizzie> I'm guessing 0 is probably the most common byte. :)
[03:24:24] <cousteau> jackk: one free for each malloc
[03:24:31] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[03:24:33] *** Joins: greenbagels (~gb@user/greenbagels)
[03:24:34] <cousteau> if you didn't use malloc, don't use free
[03:24:45] <cousteau> (or, if you didn't use a function that has the same effect as malloc)
[03:24:55] <cousteau> similarly, one malloc for each free
[03:25:09] <fizzie> Dang it, I had already almost written something about not having to free anything because I always use calloc.
[03:25:17] <nomagno> So, one thing I don't understand: Why can double free lead to UB?
[03:25:20] <fizzie> Maybe that joke's best forgotten though.
[03:25:21] <nomagno> Practically speaking
[03:25:35] <cousteau> (also, this is the reason why I avoid having functions that call malloc and not free, unless their name makes it very clear that they're doing malloc and you need to call free afterwards)
[03:25:57] <nomagno> As in, what is the risk with freeing a pointer that has already been freed? Don't you still not get to use the memory?
[03:26:25] <nomagno> It shouldn't result in any adverse behaviour for your program. Maybe for others
[03:26:27] *** Quits: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:26:28] <fizzie> nomagno: Here's one very practical scenario: some _other_ allocation might have been given that memory, and now you're accidentally freeing it.
[03:26:54] <fizzie> `free` has absolutely no effect outside your program (on reasonable operating systems, anyway).
[03:27:30] <jackk> I didnt know that is better to use malloc than char *s =...
[03:27:50] <cousteau> jackk: that's entirely dependent on the situation
[03:28:04] <fizzie> The other reason is, part of what `free` does is update the allocator's internal bookkeeping, and the code to do that has been written with the assumption that the pointer given to it was something currently allocated. It can go completely wrong if it's not.
[03:28:27] <fizzie> For example, it may expect to find some pointers "before" the start of the allocated block that are no longer there if you've already called `free` on it once.
[03:28:42] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:9005:8349:e7c7:a7ad)
[03:28:46] <fizzie> Or a field that tells how large the allocation was.
[03:28:53] <cousteau> yeah, I was going to point that out but I couldn't think of a proper way to put it in words... (mostly because I don't quite know how malloc usually works)
[03:29:13] * cousteau implemented a malloc once, but doubts that's how real malloc works in practice
[03:29:18] *** Joins: chenqisu1 (~bhca7d@183.217.200.22)
[03:29:44] <fizzie> I implemented a `malloc` that's a += and a `free` that's just `return;`, if that counts? :)
[03:30:00] <cousteau> putting stuff before the address seems to be a popular way to implement malloc
[03:30:03] *** Quits: johnjaye (~pi@154.6.152.74) (Read error: No route to host)
[03:30:16] <cousteau> fizzie: it totally doesn't count :/
[03:30:20] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:30:32] <cousteau> pretty sure I've seen such implementations before though
[03:30:34] *** Joins: Enitin (~Enitin@82.102.22.85)
[03:30:49] <jackk> I found another similar question : https://www.quora.com/Why-is-a-char-pointer-not-leaking-memory-How-comes-a-char-pointer-can-store-all-of-those-characters-without-new
[03:30:50] <cousteau> (I like to call it "the second simplest implementation of malloc")
[03:30:51] <fizzie> Using `mmap` directly for "sufficiently large" allocations, and something else for small blocks, is pretty popular too.
[03:31:35] <cousteau> ugh, quora
[03:31:36] <fizzie> Which I guess is another practical consequence from a double-free: a failing system call.
[03:32:11] <cousteau> to all of you complaining about stackoverflow: please be aware that people are asking and answering C questions in Quora
[03:32:23] <pragma-> fizzie: the port70 html versions do have a table of contents and are quite copyable
[03:33:10] <cousteau> I'm using the one with the broken formulas because that's the one candide taught me and the one my browser remembers
[03:33:45] <pragma-> ay yi
[03:33:48] <jackk> i know that quora is not the best for c :) but there is a similar question, and a good answer
[03:33:50] *** Joins: constxd_ (~brad@142.134.38.68)
[03:33:57] <pragma-> It's missing the superscript for powers, isn't it
[03:33:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:35:02] *** Joins: johnjaye (~pi@154.6.152.74)
[03:35:29] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:36:07] <cousteau> pragma-: in general, formulas involving superscripts go nuts fast
[03:36:28] * cousteau wonders if he could fix it himself... must be a few formulas only
[03:36:41] <cousteau> jackk: quora is not the best for anything
[03:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1)
[03:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1) (Changing host)
[03:36:58] *** Joins: skapata (~Skapata@user/skapata)
[03:37:30] <cousteau> it's usually one person asking a stupid question, then another one answering "yeah I'm a super expert in the field of expertness, and the answer is exactly this (and anyone saying otherwise is stupid):" and then giving the wrongest possible answer
[03:38:18] <cousteau> it just somehow happened to make its place among the top google results, just like experts-exchange used to
[03:38:31] <cousteau> or pinterest results in google image search
[03:39:00] <pragma-> cousteau: way back when I made the candide's version of the html standard for the ,c99/,c11 commands, I used the pdf2html program in my linux distribution's repository (or whatever it was called). It did a mediocre job and I couldn't find a better tool. I wonder if the pdf conversion tools are better nowadays.
[03:39:01] <wenxin> what's size for store a pointer in C? I mean that char *s = "abc";  this would ask memory to allocate 4 bytes to store '\a','\b','\c','\0'.what about the storage for pointer s?
[03:39:23] <pragma-> no, pdf2text
[03:39:26] *** Quits: rito_ (~rito_gh@45.112.243.151) (Ping timeout: 268 seconds)
[03:39:46] <cousteau> pragma-: I was thinking more along the lines of manual conversion of the few formulas that went wrong
[03:39:55] <jackk> of course also for the pointer
[03:40:54] <cousteau> pdf2text is pretty cool.  But I dislike those FF characters it inserts randomly.  Could be parameterized to use custom page separation chars/strings.  I'd like "bunch of underscores and 2 newlines".
[03:41:52] <wenxin> jackk: allocate 4 bytes for pointer? because pointer store the address of the array? it has to be 32-bit(a word) long to store an address in memory ?
[03:42:01] <cousteau> wenxin: when you do `char *s = "abc";`, the {'a','b','c',\0} sequence will be stored somewhere in memory, and the `s` pointer itself will be stored in automatic storage
[03:42:44] <jackk> idk
[03:43:03] <jackk> hes asking the size of the pointer
[03:43:09] <cousteau> it'll typically be 64 bits (8 bytes) nowadays though... or whatever `sizeof (char *)` is
[03:43:14] <nomagno> Malloc is actually trivially easy to implement if you can be sure both you have your entire memory for yourself, and the stack operates on a different part of the memory
[03:43:23] <nomagno> AKA embedded platforms
[03:43:59] <cousteau> wenxin: the size of a pointer to char is exactly `sizeof (char *)` bytes; trying to use any hand-written constant is a bad idea
[03:44:22] <cousteau> ,cc char *s = "abc"; printf("%zu", sizeof s)
[03:44:24] <candide> cousteau: 8
[03:44:43] <cousteau> ,cc -m32 char *s = "abc"; printf("%zu", sizeof s) // and this is for a 32-bit architecture
[03:44:46] <candide> cousteau: 4
[03:45:03] <nomagno> Does sizeof work in the preprocessor?
[03:45:32] <nomagno> It is very easy to determine when a sizeof is compile-time, but it is not always, so I have to wonder
[03:45:37] <fizzie> It does not.
[03:45:53] <wenxin> cousteau: thank you, I get it now. one more question: Does automatic storage mean some where in stack?
[03:46:19] *** Quits: malina (~malina@user/malina) (Quit: malina)
[03:48:05] <cousteau> nomagno: no, it does not work in the preprocessor
[03:48:11] <fizzie> For the preprocessor, `sizeof` (unless replaced by macro replacement) is just the same as `0`.
[03:48:54] <cousteau> in fact, the preprocessor doesn't know anything about types or sizes, or keywords in general (other than `defined`), so `sizeof` is just another identifier
[03:49:03] <fizzie> C11 6.10.1p4: "After all replacements due to macro expansion and the `defined` unary operator have been performed, all remaining identifiers (including those lexically identical to keywords) are replaced with the pp-number 0 --"
[03:49:46] * cousteau kinda dislikes that there is one and only one preprocessor keyword, and would prefer the C designers to have chosen something more operator-looking, like &
[03:49:55] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[03:50:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68) (Quit: Quit)
[03:50:30] <fizzie> You can sometimes see "redundant" `+`s in macro definitions that contain casts to make them usable both in preprocessor #if conditionals and in code.
[03:50:35] <cousteau> wenxin: "the stack" is an implementation detail, but yeah that's what is usually used for automatic storage
[03:51:07] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[03:51:11] <cousteau> "automatic storage" is the correct way to refer to "the stack" if you're talking about C, and not about a specific C implementation
[03:51:12] <fizzie> (`#define MAGIC ((uint32_t)+123)` for example. The + is required for `#if MAGIC == 123` to work.)
[03:51:56] <cousteau> oh wow that's evil
[03:52:05] <cousteau> well, it's ...chaotic good
[03:53:17] <fizzie> I think I saw it first in a (non-conforming) libc implementation's `#define true ((bool)+1)` -- of course the constants `true` and `false` are supposed to have type `int`, not `bool`.
[03:53:43] <cousteau> wenxin: the important thing about automatic storage is that, for all practical effects, it ceases to exist once you leave the block where it was defined
[03:53:49] <cousteau> (or the function)
[03:54:54] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:55:07] <cousteau> e.g.:  int *ptr_to_1(void) { int x = 1; return &x; }   will create an automatic variable x, initialize it to 1, and return a pointer to it.  But once you leave the function the returned value is a pointer to a variable that no longer exists, because it ceased existing when you left the function.
[03:55:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:55:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:55:35] *** Joins: wroathe (~wroathe@user/wroathe)
[03:56:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:57:37] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[03:58:01] <cousteau> oh damn, he left without reading the message
[03:58:09] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[03:58:23] <cousteau> now he won't know the important thing
[03:59:23] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[04:02:52] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[04:03:01] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:03:22] *** Quits: Macuser (~Macuser@2600:1003:b461:a026:dcab:89c7:d4a3:7b5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:04:32] *** Quits: kzootech (~awalm@kzoo.tech) (Quit: WeeChat 2.9)
[04:06:05] *** Quits: jackk (~jackiii@93-44-188-132.ip98.fastwebnet.it) (Remote host closed the connection)
[04:12:15] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:12:36] *** Joins: jackk (~jackiii@93-44-189-246.ip98.fastwebnet.it)
[04:14:02] *** Joins: kzootech (~awalm@kzoo.tech)
[04:16:20] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (Quit: Djoobstil)
[04:16:32] *** Joins: Djoobstil (~djoobstil@djoobstil.online)
[04:16:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[04:18:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[04:19:19] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[04:19:28] *** Quits: kzootech (~awalm@kzoo.tech) (Quit: WeeChat 3.1)
[04:20:11] *** Joins: cpuid (~cpuid@co5.at)
[04:20:11] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[04:20:11] *** Joins: cpuid (~cpuid@user/cpuid)
[04:22:12] *** Joins: morte_ (~user@190.104.116.153)
[04:28:31] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.3)
[04:28:59] *** Joins: digilink (~digilink@user/digilink)
[04:29:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:29:57] *** Joins: LaptopZombie (~LaptopZom@2001:1970:4884:2700::ce7d)
[04:30:28] *** Joins: kzootech (~contact@kzoo.tech)
[04:31:38] *** Joins: Wulf (~Wulf@user/wulf)
[04:31:50] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[04:34:59] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[04:37:24] *** Joins: humky (~humky@user/humky)
[04:41:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[04:46:13] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[04:46:26] *** Quits: kzootech (~contact@kzoo.tech) (Quit: WeeChat 3.2.1)
[04:47:00] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-184.cspire.com)
[04:48:38] *** Joins: kzootech (~contact@kzoo.tech)
[04:49:43] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:50:32] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-184.cspire.com) (Read error: Connection reset by peer)
[04:51:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[04:51:45] *** Joins: constxd_ (~brad@142.134.38.68)
[04:51:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[04:52:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Remote host closed the connection)
[04:52:32] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[04:56:29] *** Quits: Narrat (~omnius@p200300df5f4d4b8706ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[04:57:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:01:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:22:53] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:22:55] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:25:12] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:29:02] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[05:30:36] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[05:32:11] *** Quits: eht (~eht@user/eht) (Remote host closed the connection)
[05:32:20] *** Quits: rgrinberg (~textual@2806:265:5401:9431:1190:319b:cdf4:fd53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:33:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:35:28] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:38:37] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:42:27] *** Joins: haniaF (~haniaF@79.191.100.173.ipv4.supernova.orange.pl)
[05:42:59] *** Quits: haniaF_ (~haniaF@83.24.190.184.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[05:48:17] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[05:50:14] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 260 seconds)
[05:51:58] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-154.cspire.com)
[05:52:17] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-154.cspire.com) (Read error: Connection reset by peer)
[05:52:17] *** Quits: AmR (~AmREiSa@156.199.202.96) (Ping timeout: 240 seconds)
[05:57:26] *** Joins: pucara (~i@host173.181-10-32.telecom.net.ar)
[05:57:46] *** Joins: Macuser (~Macuser@2600:1003:b46d:716d:74c6:2c42:c8f0:41ff)
[05:58:36] *** Joins: frost (~frost@user/frost)
[05:58:43] *** Joins: fe23 (~fe23@2409:8a34:468:10c0:456e:e1ce:24c9:1433)
[05:59:34] *** Joins: rgrinberg (~textual@2806:265:5401:9431:1190:319b:cdf4:fd53)
[06:00:07] *** Quits: jackk (~jackiii@93-44-189-246.ip98.fastwebnet.it) (Quit: Leaving)
[06:01:56] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:04:55] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:07:49] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:07:59] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[06:08:03] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:08:34] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68)
[06:08:39] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[06:08:47] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[06:09:05] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:09:55] *** Joins: haniaF_ (~haniaF@79.191.105.142.ipv4.supernova.orange.pl)
[06:10:17] *** Quits: haniaF (~haniaF@79.191.100.173.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[06:26:22] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:34:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:35:35] *** Joins: morte_ (~user@190.104.116.153)
[06:39:56] *** Joins: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357)
[06:40:41] *** Quits: Macuser (~Macuser@2600:1003:b46d:716d:74c6:2c42:c8f0:41ff) (Quit: Textual IRC Client: www.textualapp.com)
[06:46:07] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[06:46:41] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:46:50] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:49:37] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[06:50:00] *** Joins: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[06:50:59] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[06:52:33] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:52:33] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:26] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:00:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:01:38] <Dotz0cat> I forgot some of my c lingo. If I want to get a pointer, I use &variable. If I want a pointer to a item in a struct. Should I use &struct->variable or &(struct->variable)?
[07:01:58] <Dotz0cat> I used to know the name of the syscall that & made
[07:02:05] <danielcamiel> either 1
[07:02:08] <fizzie> Either, they're the same thing. (But there's no "syscall" involved.)
[07:02:48] <fizzie> Well, assuming `struct` is a pointer to a struct (or a union) type.
[07:03:46] <Dotz0cat> Thanks!
[07:04:19] <Dotz0cat> I thought it was a syscall. That just shows how rusty I am
[07:04:39] *** Joins: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[07:05:17] *** Quits: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Read error: Connection reset by peer)
[07:05:57] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:05:58] <fizzie> Let's maybe give the bot some work as well, get it to earn its salary.
[07:06:01] <fizzie> ,parens &a->b
[07:06:02] <candide> fizzie: &(a->b)
[07:06:57] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[07:08:25] *** Quits: MrFantastik (~f@2607:f598:bbda:f0:997e:52bf:c319:57b5) (Quit: Leaving)
[07:08:38] <danielcamiel> ,parens &a->b[1] - &a->b[0]
[07:08:38] <candide> danielcamiel: (&((a->b)[1])) - (&((a->b)[0]))
[07:16:15] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:17:06] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:18:37] *** Joins: thysermip (~thysermip@191.17.235.140)
[07:18:50] *** Quits: thysermip (~thysermip@191.17.235.140) (Client Quit)
[07:20:57] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[07:24:23] *** Joins: concrete-houses (~g@209.6.150.53)
[07:24:44] <concrete-houses> anyone here work at a organization using c for web?
[07:24:54] <concrete-houses> and no database except c stuff
[07:25:24] <concrete-houses> https://github.com/sysprog21/cserv
[07:25:26] <candide> Title of concrete-houses's link: GitHub - sysprog21/cserv: An event-driven and non-blocking web server
[07:25:56] <concrete-houses> https://pastebin.com/E2pMnKVG
[07:26:16] <wroathe> fizzie: We stopped paying the bot. Times is tough during COVID. Sacrifices must be made.
[07:26:31] <concrete-houses> lol
[07:26:48] <concrete-houses> maybe bot will work for the love of the language
[07:27:42] *** Joins: BUSY (~BUSY@user/busy)
[07:29:14] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:29:50] <nitrix> It's only staying for the "sense of pride and accomplishment".
[07:29:57] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[07:30:32] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[07:31:50] <concrete-houses> https://github.com/riolet/WAFer look at this!! I wish work would do C and drop aws
[07:31:51] <candide> Title of concrete-houses's link: GitHub - riolet/WAFer: WAFer is a C language-based software platform for scalable server-side and networking applications. Think node.js for C programmers.
[07:31:59] <concrete-houses> archlinux or freebsd and c no database
[07:32:03] <concrete-houses> that be awesome
[07:32:06] <concrete-houses> and more fun
[07:32:18] <concrete-houses> using aws aurora and asp.net is hell
[07:32:28] <concrete-houses> I hate devops and agile too!
[07:32:55] <concrete-houses> so is C too hard for dumb guys like me to learn?
[07:33:04] <concrete-houses> or is it still wiating for me to get with it!
[07:33:08] <concrete-houses> after all these years
[07:34:05] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com) (Ping timeout: 252 seconds)
[07:35:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:35:29] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[07:35:29] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.225)
[07:35:51] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:08] <floatcomplex> ,cc sizeof(cc_t)
[07:36:10] <candide> floatcomplex: error: 'cc_t' undeclared
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:34] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:36:41] <floatcomplex> ,cc #include <termios.h>; sizeof(cc_t)
[07:36:46] <candide> floatcomplex: Success (no output).
[07:36:55] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Remote host closed the connection)
[07:37:09] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[07:37:12] <floatcomplex> ,cc #include <termios.h>; printf("%zu\n", sizeof(cc_t));
[07:37:13] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[07:37:14] <candide> floatcomplex: 1
[07:37:28] *** Joins: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:39:29] <Dotz0cat> Why do something today when I can do it tomorrow? A episode of toradora! is calling my name
[07:39:45] <floatcomplex> wtf so you can't set vmin to > 255
[07:39:49] <floatcomplex> grrr
[07:42:53] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[07:48:20] *** Joins: nvrhome (~Bop@user/nvrhome)
[07:53:19] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 256 seconds)
[07:55:33] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:55:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:57:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[07:57:47] *** Joins: bindu_ (~bindu@user/bindu)
[07:58:11] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:58:33] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:59:34] *** bindu_ is now known as bindu
[08:00:17] *** Joins: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca)
[08:02:11] *** Joins: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[08:04:48] *** Joins: smoke (~smoke@user/smoke)
[08:06:10] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:08:11] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.225) (Ping timeout: 250 seconds)
[08:08:55] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[08:09:06] *** Quits: pucara (~i@host173.181-10-32.telecom.net.ar) (Quit: Lost terminal)
[08:09:40] *** Quits: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357) (Quit: ZZZzzz…)
[08:13:07] *** trinity is now known as tr1nity
[08:13:26] *** tr1nity is now known as trinity
[08:20:56] *** Quits: soapsudsxx (~soapsudsx@209.221.40.139) (Remote host closed the connection)
[08:21:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:22:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:22:41] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[08:27:00] *** Joins: manjaroi3 (~manjaro-i@14.138.218.201)
[08:27:30] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[08:29:35] *** Quits: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[08:31:14] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[08:33:06] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[08:34:58] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:38:20] *** Quits: LaptopZombie (~LaptopZom@2001:1970:4884:2700::ce7d) (Quit: Konversation terminated!)
[08:43:14] *** Joins: pucara (~i@host173.181-10-32.telecom.net.ar)
[08:50:00] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[08:51:32] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Remote host closed the connection)
[08:55:23] *** Joins: aerysh_ (~aerysh@2a0a:b640:1:58::a05d)
[08:59:04] *** Joins: Viewday11 (~Viewday@user/viewday)
[08:59:37] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:02:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:9005:8349:e7c7:a7ad) (Ping timeout: 240 seconds)
[09:03:14] *** Joins: Viewday111 (~Viewday@user/viewday)
[09:04:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:04:43] *** Viewday111 is now known as Viewday11
[09:05:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[09:07:29] *** Joins: Lazenca (~lazenca@user/lazenca)
[09:08:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[09:08:49] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[09:09:10] *** Quits: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Read error: Connection reset by peer)
[09:09:24] *** Joins: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[09:15:53] *** Joins: larry87 (~quassel@c-73-232-34-169.hsd1.tx.comcast.net)
[09:17:37] *** Quits: s0k1t (~s0k1t@86.106.121.31) (Ping timeout: 240 seconds)
[09:18:14] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[09:18:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:20:39] *** Joins: treble (~treble@user/treble)
[09:24:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:24:16] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[09:25:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:25:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:25:24] *** Joins: wroathe (~wroathe@user/wroathe)
[09:26:14] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:26:49] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:27:17] *** Quits: larry87 (~quassel@c-73-232-34-169.hsd1.tx.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:32:06] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[09:34:19] *** Joins: malloy (~jimery@116.30.221.255)
[09:36:36] *** Joins: dan_pena (~dan_pena@101.248.23.93.rev.sfr.net)
[09:40:07] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:42:07] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:42:39] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:43:41] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[09:46:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[09:47:18] *** Quits: dan_pena (~dan_pena@101.248.23.93.rev.sfr.net) (Ping timeout: 260 seconds)
[09:48:37] *** Quits: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca) (Ping timeout: 240 seconds)
[09:48:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[09:49:32] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[09:51:09] *** lukedashjr is now known as luke-jr
[09:55:17] *** Joins: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca)
[09:56:54] *** Joins: seninha (~seninha@user/seninha)
[09:59:45] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:04:47] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[10:19:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:20:17] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[10:20:36] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[10:25:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:25:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[10:27:48] *** Quits: et09 (~et09@user/et09) (Ping timeout: 240 seconds)
[10:30:20] *** Quits: aerysh_ (~aerysh@2a0a:b640:1:58::a05d) (Quit: Konversation terminated!)
[10:30:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[10:31:32] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[10:34:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:34:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[10:34:30] *** lukedashjr is now known as luke-jr
[10:37:43] *** Joins: kurahaupo (~martin@115.69.27.211)
[10:39:26] *** Joins: freep (~freepppp@62.1.172.246.dsl.dyn.forthnet.gr)
[10:41:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:49:47] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:52:02] *** Quits: dead1 (~dead1@user/dead1) (Quit: dead1)
[10:57:22] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[10:58:10] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[10:58:59] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[11:00:49] *** Joins: oxfuxxx (~oxfuxxx@138.199.47.185)
[11:02:26] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 260 seconds)
[11:04:45] *** Quits: kurahaupo (~martin@115.69.27.211) (Excess Flood)
[11:06:26] *** Joins: mrig (~mrig@user/mrig)
[11:07:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[11:13:47] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:16:54] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[11:18:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:22:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[11:32:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68) (Quit: Quit)
[11:32:41] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:33:21] *** Quits: deflected (~deflected@user/deflected) (Quit: r!)
[11:36:55] *** Joins: Klinda (~superleag@user/klinda)
[11:37:29] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[11:39:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[11:40:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:40:22] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[11:43:17] *** Quits: chenqisu1 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[11:43:50] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.26)
[11:44:48] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[11:48:04] *** Joins: handsome_kid (~chroot@bison.sh3ll.ru)
[11:49:37] *** Quits: nvrhome (~Bop@user/nvrhome) (Ping timeout: 256 seconds)
[11:51:38] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:52:45] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[11:52:49] *** Quits: handsome_kid (~chroot@bison.sh3ll.ru) (Quit: leaving)
[11:52:49] *** Joins: malloy (~jimery@116.30.221.255)
[11:57:05] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:58:01] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[12:02:52] *** Quits: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca) (Quit: Leaving)
[12:06:22] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[12:08:12] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:08:25] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[12:09:57] *** Quits: oxfuxxx (~oxfuxxx@138.199.47.185) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[12:10:11] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[12:11:16] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:12:51] *** Quits: haniaF_ (~haniaF@79.191.105.142.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[12:13:12] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[12:14:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Remote host closed the connection)
[12:14:27] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:21] *** Joins: epony (epony@user/epony)
[12:18:46] *** Joins: haniaF (~haniaF@83.24.188.64.ipv4.supernova.orange.pl)
[12:19:54] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[12:21:23] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[12:24:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[12:25:37] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:25:52] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:26:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:26:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:26:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:26:29] *** Joins: wroathe (~wroathe@user/wroathe)
[12:26:50] *** Quits: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Quit: Leaving)
[12:28:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:29:43] *** Joins: bebyx (~Thunderbi@user/bebyx)
[12:31:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:31:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[12:34:29] *** Quits: manjaroi3 (~manjaro-i@14.138.218.201) (Ping timeout: 250 seconds)
[12:35:58] *** Joins: dan_pena (~dan_pena@64.170.185.81.rev.sfr.net)
[12:37:48] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:38:27] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[12:38:46] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.255)
[12:38:46] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8352:571e:7d74:3f4f:88b1:32fb)
[12:40:37] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.26) (Ping timeout: 256 seconds)
[12:46:55] *** Quits: critr (~critr@user/critr) (Quit: .)
[12:51:54] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[12:56:25] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[12:56:44] <Jong> how does writing and reading type double values to text file work when a number can repeat forever infintisimally small
[12:56:49] <Jong> like 3.(3)
[12:56:57] <Jong> i.e. 1/3
[12:57:20] <rindolf> Jong: hi
[12:57:27] <Jong> hi
[12:57:58] <rindolf> Jong: "double" has limited precision
[12:58:06] <Jong> oh good point
[12:58:29] <Jong> it's basically type int but with a mantesa section
[12:58:43] <Jong> the mantesa section shifts the dot
[12:58:59] <Jong> 1.28;  12.8;  128.0
[12:59:02] <Jong> like that right?
[12:59:11] <rindolf> Jong: https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#i-am-facing-a-number-of-problems-while-using-floating-point-data-types-eg-float-or-double-is-there-a-explanation-for-this
[13:00:39] <Jong> rindolf  which would you prefer? using sqlite blobs to store arrays of doubles? Or a text file? test file has less 3rd party dependencies if you consider sqlite 3rd party
[13:00:40] *** Quits: SoF (~skius@user/skius) (Remote host closed the connection)
[13:00:49] *** Joins: strajder (~strajder@user/strajder)
[13:00:58] <Jong> s/test/text
[13:01:16] *** Joins: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca)
[13:01:34] <rindolf> Jong: you can use base64/etc
[13:01:59] *** Joins: aradesh (~aradesh@user/aradesh)
[13:02:30] <Jong> do you mean make a binary file to store double values? fwrite('b' something like that
[13:02:38] <Jong> if so, the issue there is that I can't see the numbers
[13:03:23] <rindolf> Jong: https://en.wikipedia.org/wiki/Base64
[13:03:55] <Jong> i was just reading that. It basically reminds me of what happens if I try to open a binary file in a text editor
[13:04:20] <Jong> I see garbage. The only difference is this time the garbage contains more ordinary characters
[13:05:18] <rindolf> Jong: you'll also see 'garbage' with sqlite
[13:05:46] <Jong> true, unless turn the blob into a table, and insert each double value as a separate record
[13:06:38] <Jong> I apologize for using the word garbage. I didn't mean it in a negative way
[13:07:27] <rindolf> Jong: you can do something similar with a flat file too by writing a filter
[13:08:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:09:05] <dave0> Jong: if storing your doubles as text is okay, there are some advantages
[13:09:10] <Jong> filter? Let me look that up
[13:09:20] *** Joins: meator (~meator@user/meator)
[13:09:30] <dave0> Jong: like you already hinted, if it's in text, a human can read it
[13:09:57] <dave0> Jong: and they are very portable, if you one day need to read them on a different computer
[13:10:25] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:10:40] <rindolf> Jong: https://duckduckgo.com/?t=ffab&q=unix+pipe&atb=v140-1&ia=web
[13:11:11] <dave0> Jong: also you don't need any special libraries to use fprintf and fscanf to read/write doubles
[13:12:20] <dave0> text will go through different computers and even different languages
[13:12:44] <rindolf> dave0: this may lose precision though
[13:13:09] <dave0> rindolf: yes :-(
[13:14:03] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:14:04] <dave0> if he can live with loss of precision, i would say text is best (that rhymes)
[13:14:52] <Jong> Thanks for the conversation guys
[13:15:43] <dave0> but also you can choose your precision
[13:16:13] <dave0> but they cant be represented exactly
[13:16:19] *** Joins: oxfuxxx (~oxfuxxx@138.199.47.185)
[13:18:21] <rindolf> Jong: you're welcome
[13:21:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:22:01] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[13:23:56] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[13:28:13] *** Joins: terminalpusher (~terminalp@2a01:586:911a:1:e659:76ec:75f2:c6d9)
[13:32:58] *** Joins: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:fc08:a64d:5de5:35eb)
[13:40:41] *** Quits: dan_pena (~dan_pena@64.170.185.81.rev.sfr.net) (Ping timeout: 256 seconds)
[13:41:21] *** Joins: agonhajdari (~textual@user/agonhajdari)
[13:41:41] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[13:42:11] *** Joins: dan_pena (~dan_pena@83.118.209.131)
[13:47:09] *** Quits: rgrinberg (~textual@2806:265:5401:9431:1190:319b:cdf4:fd53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:47:14] *** Quits: sicelo (~sicelo@user/sicelo) (Quit: Bye!)
[13:48:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:49:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:53:21] *** Quits: oxfuxxx (~oxfuxxx@138.199.47.185) (Remote host closed the connection)
[13:55:32] *** Quits: pucara (~i@host173.181-10-32.telecom.net.ar) (Quit: Lost terminal)
[13:55:39] *** Joins: sicelo (~sicelo@ip170.ip-141-95-83.eu)
[13:55:39] *** Quits: sicelo (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[13:55:39] *** Joins: sicelo (~sicelo@user/sicelo)
[13:55:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:56:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:56:33] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[13:57:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:26] *** Joins: mixfix41 (~homefame@user/mixfix41)
[14:01:48] *** Quits: sicelo (~sicelo@user/sicelo) (Quit: Bye!)
[14:03:01] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[14:03:31] *** Joins: sicelo (~sicelo@ip170.ip-141-95-83.eu)
[14:03:31] *** Quits: sicelo (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[14:03:31] *** Joins: sicelo (~sicelo@user/sicelo)
[14:06:02] *** Quits: sicelo (~sicelo@user/sicelo) (Client Quit)
[14:06:16] *** Joins: cruncher (~cruncher@90.68.118.49)
[14:06:48] *** Quits: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca) (Remote host closed the connection)
[14:07:10] *** Joins: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca)
[14:08:23] *** Joins: sicelo (~sicelo@ip170.ip-141-95-83.eu)
[14:08:23] *** Quits: sicelo (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[14:08:23] *** Joins: sicelo (~sicelo@user/sicelo)
[14:09:49] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[14:10:24] *** Joins: ko (~i.am@user/marlboro)
[14:11:19] *** Joins: g2anj (~v@58.228.230.4)
[14:12:03] *** Joins: mixfix41 (~homefame@user/mixfix41)
[14:12:57] *** Quits: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:fc08:a64d:5de5:35eb) (Ping timeout: 240 seconds)
[14:13:46] *** Joins: rito_ (~rito_gh@45.112.243.151)
[14:13:52] *** Joins: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:fc08:a64d:5de5:35eb)
[14:13:57] *** Quits: dan_pena (~dan_pena@83.118.209.131) (Ping timeout: 240 seconds)
[14:14:11] *** Quits: sicelo (~sicelo@user/sicelo) (Quit: Bye!)
[14:15:39] *** Joins: sicelo (~sicelo@user/sicelo)
[14:16:19] *** Joins: john99 (~john99@213.246.103.34.bc.googleusercontent.com)
[14:17:39] *** Quits: sicelo (~sicelo@user/sicelo) (Client Quit)
[14:18:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:19:17] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[14:21:01] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[14:21:25] *** Joins: jancoow (~jancoow@user/jancoow)
[14:21:46] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[14:24:05] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[14:27:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:27:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:27:16] *** Joins: wroathe (~wroathe@user/wroathe)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:59] *** Joins: csrf (~csrf@user/csrf)
[14:31:32] *** Quits: foul_owl (~kerry@212.102.47.57) (Ping timeout: 252 seconds)
[14:32:03] *** Quits: john99 (~john99@213.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[14:32:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:36:52] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[14:39:41] *** Joins: SoF (~skius@user/skius)
[14:40:12] *** Joins: dan_pena (~dan_pena@72.168.185.81.rev.sfr.net)
[14:46:09] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[14:47:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[14:49:27] *** Quits: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:fc08:a64d:5de5:35eb) (Quit: Leaving)
[14:50:23] *** Quits: dan_pena (~dan_pena@72.168.185.81.rev.sfr.net) (Ping timeout: 256 seconds)
[14:50:30] *** Joins: dan_pena (~dan_pena@109.190.253.14)
[14:50:57] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (Ping timeout: 240 seconds)
[14:51:33] *** Joins: AmR (~AmREiSa@156.199.202.96)
[14:52:37] <nomagno> Dotz0cat: Watching 'Toradora!' is something you could have done a decade ago.
[14:52:56] <nomagno> In any case fizzie: Why is the cast to unsigned integer required?
[14:53:00] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[14:53:09] <nomagno> Isn't (123 == 123) valid C?
[14:53:24] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[14:56:03] *** Quits: dan_pena (~dan_pena@109.190.253.14) (Ping timeout: 256 seconds)
[14:58:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:58:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:58:04] *** Joins: wroathe (~wroathe@user/wroathe)
[14:59:58] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[15:02:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:04:26] *** Joins: foul_owl (~kerry@212.102.47.57)
[15:05:16] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Remote host closed the connection)
[15:06:15] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:06:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:06:49] <rindolf> nomagno: context?
[15:07:41] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:09:08] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[15:11:57] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[15:14:19] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Max SendQ exceeded)
[15:14:38] *** Joins: Rounin (~david@84.212.130.215)
[15:28:38] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:28:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:28:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:28:52] *** Joins: wroathe (~wroathe@user/wroathe)
[15:30:17] *** Quits: nicode (~nic@2607:f2c0:95f4:cc00:f012:6618:6643:90a4) (Ping timeout: 240 seconds)
[15:32:20] *** Joins: nicode (~nic@2607:f2c0:9447:d00:cc88:6b2c:abb0:8ab7)
[15:33:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:24] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[15:38:59] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:46:21] *** Joins: shivesh (~shivesh@user/shivesh)
[15:49:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:51:07] *** Joins: dan_pena (~dan_pena@109.190.253.14)
[15:51:25] <dan_pena> hello I'm looking for a good and clean hashmap implementation, if any of you have a github to link ^^
[15:55:10] <nomagno> rindolf: Message from a few hours ago: <(`#define MAGIC ((uint32_t)+123)` for example. The + is required for `#if MAGIC == 123` to work.)>
[15:56:49] <rindolf> dan_pena: apr-hash is decent FME
[15:57:46] *** Joins: sebag (~guest@91.245.82.2)
[15:58:08] <rindolf> nomagno: preprocessor...
[15:58:16] <sham1> Hash tables are both easy and not easy to use
[15:58:17] <dave0> nomagno: that looks like a cast.. does that work in the preprocessor?
[15:58:29] <sham1> Well, make
[15:59:14] <nomagno> dave0: I was asking about it, fizzie said its few hours ago. I don't know how anything about this statement makes sense
[15:59:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:59:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:59:39] *** Joins: wroathe (~wroathe@user/wroathe)
[15:59:47] <dave0> ok
[16:00:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[16:00:21] <dave0> dan_pena: there is glib ... if you are using gtk you already have glib ... glib has a hashtable
[16:00:47] *** Joins: john99 (~john99@213.246.103.34.bc.googleusercontent.com)
[16:00:58] *** Quits: john99 (~john99@213.246.103.34.bc.googleusercontent.com) (Client Quit)
[16:01:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:02:02] *** Joins: pulse (~pulse@user/pulse)
[16:02:21] <rindolf> dan_pena: i'm reminded of https://web.archive.org/web/20090608071824/https://blog.reverberate.org/2009/03/01/the-art-of-hashing/
[16:02:34] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[16:02:58] *** Quits: dan_pena (~dan_pena@109.190.253.14) (Ping timeout: 260 seconds)
[16:03:36] *** Joins: dan_pena (~dan_pena@109.190.253.14)
[16:04:10] * rindolf also wrote https://www.shlomifish.org/open-source/portability-libs/#data_structures
[16:04:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[16:04:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[16:04:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:04:59] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[16:07:06] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:09:35] *** Quits: dan_pena (~dan_pena@109.190.253.14) (Remote host closed the connection)
[16:09:49] *** Joins: dan_pena (~dan_pena@109.190.253.14)
[16:10:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[16:11:35] *** Quits: dan_pena (~dan_pena@109.190.253.14) (Client Quit)
[16:12:10] <sham1> Bookmark'd
[16:17:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[16:17:44] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[16:18:02] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[16:19:08] *** Quits: constxd (~brad@142.134.38.68) (Quit: WeeChat 2.8)
[16:19:08] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[16:20:14] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[16:20:33] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[16:23:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:28:07] *** Joins: cousteau (~cousteau@user/cousteau)
[16:30:33] <fizzie> dave0: nomagno: Identifiers (other than the special `defined` operator and those replaced by macro replacement) are treated in #if conditionals as if they were the pp-number 0, so `((uint32_t)+123` is interpreted as `((0)+123)`, or 0+123, or 123. That's why the + is needed: `((0)123)` would be an error.
[16:31:35] <dave0> fizzie: ohhh haaaa
[16:31:41] <nomagno> fizzie: ah so if you don't want to include a cast in a preprocessor statement, you don't need that
[16:32:06] <dave0> it never was a cast, it was a not-defined macro
[16:32:07] <sham1> That's so stupid honestly
[16:32:13] <sham1> Just why
[16:32:48] <fizzie> ,cc #define MAGIC ((uint32_t)+123) \n #if MAGIC == 123 \n #error "it's 123" \n #endif \n
[16:32:49] <candide> fizzie:  error: #error "it's 123"
[16:32:53] <fizzie> ,cc #define MAGIC ((uint32_t)123) \n #if MAGIC == 123 \n #error "it's 123" \n #endif \n
[16:32:54] <candide> fizzie:  error: missing binary operator before token "123"  note: in expansion of macro 'MAGIC'
[16:33:52] <fizzie> Yes, you only need it if you want an expression that contains a cast (that you need for when the macro is expanded in regular compiled code) to also be usable in #if conditions too.
[16:34:26] <nomagno> Fair
[16:36:17] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[16:41:57] *** Quits: shivesh (~shivesh@user/shivesh) (Ping timeout: 240 seconds)
[16:42:01] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[16:44:03] *** Joins: shivesh (~shivesh@user/shivesh)
[16:46:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:46:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:46:31] *** Joins: wroathe (~wroathe@user/wroathe)
[16:48:09] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[16:50:21] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[16:51:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[16:55:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:01:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:02:00] <zwr> today I learned you can have a pointer to a VLA and allocate storage for it with malloc
[17:02:25] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:03:05] <zwr> and it's easy to get it wrong due to operator precedence
[17:03:07] <sham1> One of the only legit uses of VLAs IMO, if not the only one
[17:03:08] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-248.cspire.com)
[17:03:21] <kristian84> zwr: VLA?
[17:03:27] <zwr> variable length array
[17:03:59] <high_ground> like int len=2; vla[len];
[17:06:24] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:06:55] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[17:07:11] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 252 seconds)
[17:07:31] <zwr> https://paste.opensuse.org/4841622
[17:07:49] *** Quits: hinata (~hinata@2409:4042:d94:5be6:7542:57c:679a:48ca) (Quit: Leaving)
[17:08:38] *** Joins: seninha (~seninha@user/seninha)
[17:10:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[17:10:51] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:5ced:88a3:f841:39fe)
[17:10:59] *** Joins: monkey_ (~user@190.104.116.153)
[17:11:17] <zwr> I'll be the coolest kid in the block if I use this in a project
[17:11:40] <fizzie> I dislike the `(*p)[y][x]` syntax sufficiently much, I'd still make that `int (*p)[columns] = malloc(rows * sizeof *p);` to be able to say `p[y][x]`.
[17:12:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2)
[17:12:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2) (Changing host)
[17:12:46] *** Joins: skapata (~Skapata@user/skapata)
[17:14:32] *** Joins: shivesh (~shivesh@user/shivesh)
[17:18:12] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Remote host closed the connection)
[17:18:32] *** Joins: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238)
[17:19:25] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-248.cspire.com) (Ping timeout: 256 seconds)
[17:21:13] *** Joins: Crassus (~Crassus@user/crassus)
[17:24:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:25:33] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[17:26:58] <chiselfuse> https://termbin.com/rlyv
[17:27:24] <chiselfuse> this segfaults when i run it
[17:27:35] <chiselfuse> without initializing that buffer it runs fine
[17:28:10] *** Joins: Macuser (~Macuser@2600:1003:b461:a17d:8420:b81c:5f21:533c)
[17:28:11] <chiselfuse> i suspect that it's something with libcurl, anyone has any idea?
[17:28:17] <rindolf> chiselfuse: curl_handle is uninitialised
[17:29:16] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:29:51] <chiselfuse> rindolf: i don't think it matters, this is just reduced code from a bigger one where curl_handle was initialized, still segfaults when i add that buffer
[17:30:28] <chiselfuse> i just didn't want to clutter with unnecessary code
[17:30:56] <rindolf> chiselfuse: try valgrind/ASAN/etc
[17:31:29] *** Joins: monkey_ (~user@190.104.116.153)
[17:31:37] <chiselfuse> rindolf: i tried gdb, it segfaults at curl_global_init
[17:31:42] <chiselfuse> sorry, i forgot to mention that
[17:32:03] <chiselfuse> and it's caused by that buff
[17:32:52] <chiselfuse> can gdb go deeper in the stack trace?
[17:33:06] <chiselfuse> but at that point it's libcurl's fault isnt it
[17:33:37] *** test_ is now known as _flood
[17:34:02] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[17:34:12] <rindolf> chiselfuse: try valgrind/ASAN/etc; gdb is different
[17:34:28] <trenka> chiselfuse: your testcase segfaults on cleanup due to uninitialized curl_handle for me
[17:34:36] <trenka> as rindolf said
[17:35:01] <chiselfuse> odd, it doesn't for me
[17:35:13] <chiselfuse> one moment
[17:35:43] <supakeen> things can be reordered to the compilers will, it's more than likely that you accidentally had some bytes that were fine at a place and otherwise you don't
[17:35:57] <supakeen> but one can't tell since, unitialized, could be anything there
[17:36:01] <rindolf> trenka: https://www.youtube.com/watch?v=PgYnIwfA2GY ;)
[17:36:02] <candide> Title of rindolf's link: You're right ! - YouTube
[17:36:52] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9a15:fa56:81f7:4afc) (Ping timeout: 268 seconds)
[17:37:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c657:4fa8:ebc0:a8bd)
[17:37:09] <trenka> rindolf: ;)
[17:37:36] <chiselfuse> https://termbin.com/dg2h
[17:37:47] <chiselfuse> trenka: could you try this code on your machine please?
[17:38:48] <chiselfuse> supakeen: could you say that about bytes again, i can't understand what you mean
[17:39:30] <supakeen> chiselfuse: In your new example you never check if curl_handle_init actually succeeded, it might've failed (for whatever reason) and you're calling all these things on a null pointer afterwards.
[17:40:10] <supakeen> chiselfuse: And what I mean is that unitialized memory contains undetermined things, if you then call functions on it it *might* be a valid memory address, it might not be. You just can't know.
[17:40:15] <rindolf> chiselfuse: also headerbuff's contents are not init
[17:40:15] <chiselfuse> eh, in the example from the libcurl docs they didn't check either :P
[17:41:05] *** Quits: cassepipe (~cassepipe@2a01:cb14:8540:3600:c179:484a:37d7:9238) (Quit: Leaving)
[17:41:11] <chiselfuse> but i'm writing to both these buffers, so i don't care what they have initially
[17:41:44] <fizzie> Chances are 2 * 8*1024*1024 is just too much bytes to put on automatically allocated storage.
[17:42:14] <fizzie> It works fine for me if I make those two arrays `static`.
[17:42:22] <trenka> chiselfuse: you are running out of stack
[17:42:37] <trenka> ah, fizzie said it already
[17:42:54] *** Joins: s0k1t (~s0k1t@86.106.121.100)
[17:43:20] <chiselfuse> how do i make stack bigger
[17:43:24] <chiselfuse> i'm kidding
[17:43:33] <chiselfuse> should i use files then?
[17:43:42] <fizzie> No, you should use one of the other storage durations.
[17:43:46] <fizzie> Allocated or static, most likely.
[17:43:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:44:00] <chiselfuse> allocated is the heap?
[17:44:13] <fizzie> Allocated is... allocated.
[17:44:26] <fizzie> But sure, "the heap" colloquially.
[17:44:28] <chiselfuse> where is it in the memory model?
[17:44:30] <chiselfuse> the allocated
[17:45:37] <fizzie> It's whatever you get from `malloc`, `calloc`, `aligned_alloc` and `realloc` functions. C just calls it "allocated".
[17:46:16] <fizzie> (C11 6.2.4p1: "There are four storage durations: static, thread, automatic, and allocated.")
[17:46:29] <chiselfuse> aha, so it doesn't have to be in the heap, it depends from machine to machine?
[17:47:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:48:19] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 256 seconds)
[17:48:47] <fizzie> Not to say a file wouldn't _necessarily_ make sense too. I mean, if you're planning to write it the response to a file eventually, it'd be perfectly reasonable to write it to file as it comes in instead of buffering the entire response in memory. But if you're just planning to process it, and aren't expecting too much data, you probably don't want to start dealing with temporary files.
[17:48:59] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 252 seconds)
[17:49:12] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:a476:2e:c0d:5443) (Ping timeout: 268 seconds)
[17:51:43] <fizzie> Also, let's amend that "works fine" to "works somewhat", there's a few other problems too. For example, there's no guarantee from curl that the `write_data` callback would be called just once -- it generally needs to act as if it was writing to some sort of a stream, but yours just writes to the beginning of the buffer every time.
[17:54:17] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 240 seconds)
[17:58:18] <chiselfuse> nah won't do files, i just forgot i could use memory in other segments than the stack
[17:58:53] <chiselfuse> fizzie: i'll check that in a sec, i think i got the buffer from an example from some manual of theirs
[18:00:27] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[18:00:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 240 seconds)
[18:01:00] *** Joins: bindu (~bindu@user/bindu)
[18:01:48] <chiselfuse> fizzie: no, you're right, it wasn't just a buffer at all
[18:01:57] *** Quits: Dotz0cat (~Dotz0cat@h118.166.187.173.ip.windstream.net) (Ping timeout: 240 seconds)
[18:02:27] *** Joins: Dotz0cat (~Dotz0cat@h8.47.90.75.dynamic.ip.windstream.net)
[18:02:31] <fizzie> They do have a buffer example ("getinmemory") as well, it just involves a little more: https://curl.se/libcurl/c/getinmemory.html
[18:02:44] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:04:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[18:04:36] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[18:05:04] *** Joins: cart_man (~rynot@host-78-144-122-20.as13285.net)
[18:06:40] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[18:06:48] * pragma- invokes gettinmoney() and dabbingonyourgrave()
[18:06:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:07:00] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:07:38] <fizzie> (There's a few not-so-great things about that example too, like there's no real need for that `malloc(1)`, and a linear buffer growth strategy isn't the greatest, but at least it's not quite wrong. Also adds a '\0' terminator, which is a nice touch.)
[18:13:05] *** Joins: u0_a391 (~u0_a391@2600:380:a469:f561:6e19:6b71:470b:bb18)
[18:14:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:14:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:14:25] *** Joins: wroathe (~wroathe@user/wroathe)
[18:16:22] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[18:16:57] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 268 seconds)
[18:17:26] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[18:18:10] *** u0_a391 is now known as Kit
[18:18:55] *** Quits: oj (oj@user/oj) (Quit: Eyy)
[18:19:15] *** Joins: oj (oj@user/oj)
[18:20:22] *** Quits: cart_man (~rynot@host-78-144-122-20.as13285.net) (Quit: Konversation terminated!)
[18:23:51] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[18:24:50] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:24:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[18:25:36] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:28:47] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[18:29:20] *** vdamewood is now known as Guest9136
[18:29:20] *** Quits: Guest9136 (~vdamewood@fedora/vdamewood) (Killed (iridium.libera.chat (Nickname regained by services)))
[18:29:20] *** vinleod is now known as vdamewood
[18:29:26] *** Joins: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad)
[18:33:37] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 240 seconds)
[18:36:00] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:36:04] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[18:42:23] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 250 seconds)
[18:44:56] *** Joins: cart_man (~rynot@host-78-144-122-20.as13285.net)
[18:49:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[18:51:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[18:52:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:57:29] *** Joins: karakedi (~eAC53C340@user/karakedi)
[19:00:12] *** Joins: Thedarkb2 (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad)
[19:00:17] *** Quits: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad) (Read error: Connection reset by peer)
[19:00:24] *** Quits: Thedarkb2 (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad) (Read error: Connection reset by peer)
[19:05:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:06:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:07:12] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:19] <kurahaupo_> chiselfuse: The first problem with asking whether something is in the heap is the word "the", betraying an assumption that there's only one heap. Virtual memory for a process general is fragmentary, and parts of it may or may not be backed by persistent storage.
[19:08:00] <kurahaupo_> It's entirely possible to have multiple heaps
[19:10:31] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[19:11:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:12:05] <cousteau> fizzie: so the horrible alternative to that weird + hack would be to define MAGIC_VALUE and MAGIC separately, as #define MAGIC_VALUE 123 \n #define MAGIC ((uint32_t)MAGIC_VALUE)
[19:16:27] *** Joins: et09 (~et09@user/et09)
[19:17:38] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:18:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:19:54] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[19:21:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:21:49] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[19:24:22] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[19:26:46] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-248.cspire.com)
[19:27:57] *** Quits: Kit (~u0_a391@2600:380:a469:f561:6e19:6b71:470b:bb18) (Ping timeout: 240 seconds)
[19:28:38] *** Joins: WAR10CK (~WAR10CK@14.223.182.108)
[19:32:50] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:33:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[19:34:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[19:36:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:36:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:36:04] *** Joins: wroathe (~wroathe@user/wroathe)
[19:36:06] *** Joins: mrig (~mrig@user/mrig)
[19:37:21] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:37:23] <kurahaupo_> I'm wondering why one would bother casting an integer constant. A suffix U can be used when it needs to be unsigned, and otherwise the standard promotion rules will do the right thing.
[19:38:36] <kurahaupo_> Even #define NULL ((void*)0) is slowly being replaced by #define NULL __nullptr
[19:39:00] *** Joins: seninha (~seninha@user/seninha)
[19:40:10] <ioxzev1z> kurahaupo_, so 123U means unsigned int ?
[19:41:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:41:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:41:44] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:41:44] *** Joins: wroathe (~wroathe@user/wroathe)
[19:41:48] *** Joins: critr (~critr@user/critr)
[19:42:19] *** Quits: cart_man (~rynot@host-78-144-122-20.as13285.net) (Quit: Konversation terminated!)
[19:42:28] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[19:42:42] *** Joins: eroux (~eroux@102-65-85-177.ftth.web.africa)
[19:46:54] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:47:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:50:40] *** Joins: gdd (~gdd@129.199.146.230)
[19:51:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[19:51:56] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:52:35] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:52:36] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:53:32] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:54:17] *** Quits: Macuser (~Macuser@2600:1003:b461:a17d:8420:b81c:5f21:533c) (Ping timeout: 240 seconds)
[19:54:23] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[19:54:39] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:55:35] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[19:57:00] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[19:58:36] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[20:02:01] <fizzie> Sometimes you want a constant to have a specific type. For example, it'd be weird if UINT32_MAX wasn't an `uint32_t`. But there isn't necessarily a suitable suffix for it.
[20:03:40] <fizzie> Well, I guess strictly speaking those limits must have the "same type as would an expression that is an object of the corresponding type converted according to the integer promotions" (C11 7.20.2p2), so the integer constant suffixes would be sufficient for that. But still.
[20:08:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:11:29] *** Joins: rsjw (~quassel@user/rsjw)
[20:11:34] *** Quits: fe23 (~fe23@2409:8a34:468:10c0:456e:e1ce:24c9:1433) (Quit: fe23)
[20:12:54] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[20:13:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[20:13:57] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.255) (Ping timeout: 240 seconds)
[20:14:23] *** Quits: terminalpusher (~terminalp@2a01:586:911a:1:e659:76ec:75f2:c6d9) (Remote host closed the connection)
[20:14:50] *** Joins: terminalpusher (~terminalp@2a01:586:911a:1:e659:76ec:75f2:c6d9)
[20:16:09] <fizzie> 123U does mean `unsigned int` because UINT_MAX is guaranteed to be >= 65535, but in general an integer constant with the `U` suffix is the first of `unsigned int`, `unsigned long int` or `unsigned long long int` that can represent the value.
[20:18:31] <beastie> fizzie: couldn't it be unsigned short?
[20:19:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:20:04] *** Joins: Akuli (~Akuli@87-94-111-213.bb.dnainternet.fi)
[20:21:37] <beastie> hola Akuli
[20:21:39] <fizzie> No, it's always at least an `unsigned int`.
[20:21:48] <beastie> ups... sorry...
[20:21:55] <beastie> thanks.
[20:22:06] <Akuli> hi :D
[20:22:07] <fizzie> There's a big table for it; it depends on the suffix but also decimal constants have different rules than octal/hexadecimal ones.
[20:22:16] <fizzie> ,c11 6.4.4.1p5
[20:22:18] <candide> http://www.iso-9899.info/n1570.html#6.4.4.1p5 [Integer constants] The type of an integer constant is the first of the corresponding list in which its value can be represented. Octal or Hexadecimal Suffix Decimal Constant Constant none i​nt i​nt long i​nt unsigned i​nt long long i​nt long i​nt unsigned long i​nt long long i​nt unsigned long long i​nt u or U unsigned i​nt unsigned i​nt... <truncated; https://0x0.st/osrQ.txt>
[20:22:42] <kurahaupo_> short and char are only storage types; they don't occur in expressions (because they're immediately promoted to int)
[20:23:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80) (Ping timeout: 250 seconds)
[20:24:17] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:27:16] *** Joins: euandreh (~euandreh@191.181.59.160)
[20:27:30] <fizzie> ,c11 footnote.58
[20:27:30] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.58 The integer promotions are applied only: as part of the usual arithmetic conversions, to certain argument expressions, to the operands of the unary +, -, and ~ operators, and to both operands of the shift operators, as specified by their respective subclauses.
[20:27:33] <fizzie> (Except for expressions that aren't mentioned there.)
[20:28:43] *** Joins: mahmutov (~mahmutov@5.176.27.245)
[20:31:09] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[20:31:26] *** Joins: mokulus (~mokulus@user/mokulus)
[20:31:31] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[20:32:00] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:34:05] *** Joins: mokulus (~mat@user/mokulus)
[20:34:18] *** Parts: mokulus (~mat@user/mokulus) ()
[20:34:32] *** Quits: concrete-houses (~g@209.6.150.53) (Ping timeout: 252 seconds)
[20:36:07] *** Joins: concrete-houses (~g@209.6.150.53)
[20:36:25] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[20:36:32] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:b401:2b66:8ab6:9e53)
[20:39:05] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[20:40:02] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Remote host closed the connection)
[20:40:21] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.255)
[20:40:28] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[20:44:34] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:46:09] *** Joins: Akiva (~Akiva@user/Akiva)
[20:47:57] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[20:48:15] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:48:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[20:48:57] *** Quits: xse (~xse@user/xse) (Ping timeout: 240 seconds)
[20:49:11] *** Joins: xse (~xse@user/xse)
[20:49:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:51:34] *** Joins: veemo (~veemo@2600:1000:b011:629d:885b:d809:3dd5:57c4)
[20:51:34] *** Joins: Berrie (~Berrie@75.170.224.55)
[20:51:35] *** Joins: rouxls (~rouxls@2607:fea8:91a1:e400:9c8a:7a93:1e12:db41)
[20:51:40] *** Parts: rouxls (~rouxls@2607:fea8:91a1:e400:9c8a:7a93:1e12:db41) ()
[20:51:40] *** Parts: veemo (~veemo@2600:1000:b011:629d:885b:d809:3dd5:57c4) ()
[20:51:43] *** Parts: Berrie (~Berrie@75.170.224.55) ()
[20:54:06] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[20:55:22] <dan_pena> Hello, I have an algorithm question related to my project that I want to improve : https://pastebin.com/Tbw42hLi If some of you have an idea
[20:57:54] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[20:57:59] <sysRPL> hello
[20:58:07] <clarity> pollo
[20:59:31] <twkm> dan_pena: you might want #algorithms.
[21:00:16] <dan_pena> twkm: okey
[21:00:33] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:00:50] <twkm> as an aside, 256 might not be correct though it often would be.
[21:01:04] *** Joins: Betal (~Betal@user/betal)
[21:01:32] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:03:21] <HisShadow> why even optimize several passes over a 256-sized array?
[21:08:13] *** Joins: bbju (~bbju@103.144.149.218)
[21:08:23] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[21:13:01] *** Joins: duuude (~user@user/duuude)
[21:15:00] *** Joins: s0k1t_ (~s0k1t@206.217.205.17)
[21:15:12] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[21:15:12] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:16:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[21:17:37] <pragma-> smh. "why even optimize over a 256 sized array?"  This is why computers have gotten multiple times faster over the last decade but programs have gotten slower.
[21:18:17] <pragma-> "Oh, computers are fast enough now, no need to optimize this!" Bloody hell, if you did optimize that, it would run so much faster and efficiently. The computer would be more responsive!
[21:18:41] *** Quits: s0k1t (~s0k1t@86.106.121.100) (Ping timeout: 245 seconds)
[21:18:56] <pragma-> "Oh, there'll only be one instance of this running at any time."
[21:19:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:19:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:19:20] *** Joins: wroathe (~wroathe@user/wroathe)
[21:20:26] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[21:22:03] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[21:24:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:26:55] *** Joins: coruja (~coruja@user/coruja)
[21:26:58] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:27:14] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:28:56] *** Joins: sysctl (~sysctl@88.215.77.255)
[21:29:01] *** Quits: sysctl (~sysctl@88.215.77.255) (Client Quit)
[21:29:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:32:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:32:12] *** Joins: Bova (~Bova@185.24.53.163)
[21:37:37] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 240 seconds)
[21:40:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:40:37] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[21:41:52] <omegatron> hypothesis: if computers would not run so fast today (and in the past 20 years), we all would have today very efficient and maybe still fast software (and no bloat) ..
[21:42:47] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:43:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[21:43:29] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3411:d9a6:758d:8ad8)
[21:44:18] <critr> and if storage nad ram weren't so cheap and plentiful.
[21:44:44] <ioxzev1z> IMO optimization needs to come from the bottom up, no point optimizing something if the layer below is a bottleneck
[21:46:14] *** Quits: ra4king (~ra4king@roiatalla.com) (Ping timeout: 265 seconds)
[21:46:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:47:27] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[21:51:32] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:7059:f90b:c049:c6ca)
[21:52:32] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:53:46] *** Joins: ra4king (~ra4king@roiatalla.com)
[21:53:52] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[21:54:02] *** critr is now known as fang
[21:54:02] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Ping timeout: 240 seconds)
[21:55:21] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:57:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[22:00:12] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Ping timeout: 268 seconds)
[22:03:28] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:03:49] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[22:05:57] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[22:07:01] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 245 seconds)
[22:08:45] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:10:01] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[22:10:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:12:59] *** Joins: agonhajdari (~textual@user/agonhajdari)
[22:17:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[22:17:45] *** Joins: mixfix41 (~homefame@user/mixfix41)
[22:18:30] *** Quits: bbju (~bbju@103.144.149.218) (Quit: Client closed)
[22:19:36] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[22:21:09] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[22:21:21] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[22:22:24] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[22:24:17] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[22:24:36] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:26:04] *** Quits: fang (~critr@user/critr) (Remote host closed the connection)
[22:27:45] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3411:d9a6:758d:8ad8) (Quit: Quit)
[22:29:26] <Dotz0cat> So far my migration to libevent looks fine.
[22:29:47] <Dotz0cat> I just need to poke it some more and stuff
[22:29:50] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:30:02] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Quit: ZNC - https://znc.in)
[22:31:45] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[22:33:46] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:7059:f90b:c049:c6ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:33:56] *** Joins: meator (~meator@user/meator)
[22:34:32] *** Joins: Akiva (~Akiva@user/Akiva)
[22:34:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[22:36:19] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:36:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b1d4-3f07-bb3f-aa7e.res6.spectrum.com)
[22:36:37] *** Joins: critr (~critr@user/critr)
[22:37:51] *** Joins: rgrinberg (~textual@187.223.75.25)
[22:39:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[22:42:37] <rindolf> omegatron: pragma- : https://tonsky.me/blog/disenchantment/ - we're in good company
[22:44:12] <sham1> The dark mode toggle on that website is annoying
[22:45:06] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:12] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 268 seconds)
[22:46:41] * rindolf does recall an app that his friend wrote which was slow, back in the 1990s
[22:46:44] *** Joins: mixfix41 (~homefame@user/mixfix41)
[22:47:24] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:42] *** Quits: s0k1t_ (~s0k1t@206.217.205.17) (Quit: dueces douches)
[22:49:49] <sham1> Well nowadays it'd be fast, so what's the problem? Just throw more hardware at it obvs
[22:50:13] <ioxzev1z> tbh better hardware is easier to get than better code
[22:51:21] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Quit: ZNC - https://znc.in)
[22:52:23] * pragma- squints at "A barebones install of a modern Android system takes up 6 GB! Windows 95 only took up 30 MB!"
[22:52:30] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[22:52:40] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:53:03] *** Joins: w41 (~w41@45.76.32.7)
[22:53:33] <pragma-> "Google’s keyboard app routinely eats 150 MB. Is an app that draws 30 keys on a screen really five times more complex than the whole Windows 95?"
[22:54:09] <Wulf> pragma-: it's all about screen resolution. Do the math!
[22:54:19] <rsjw> I'm actually kind of impressed that they managed to find a way to use that much memory
[22:55:01] <Bova> Hi there, could I ask question about make files here?
[22:55:05] <apotheon> ioxzev1z: That's mostly because almost nobody cares about good code, in practice.
[22:55:11] <ioxzev1z> pragma-, I think some of it has to do with simply using Java/etc
[22:55:12] <sham1> I don't know, could you?
[22:55:12] <apotheon> recursive problem
[22:55:15] <pragma-> Bova: ##workingset is more suitable
[22:55:21] <Bova> thank you
[22:55:26] <sham1> ioxzev1z: why would Java matter for install size
[22:55:27] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 256 seconds)
[22:55:34] <ioxzev1z> apotheon, people care, but you can't cheaply have someone going through 250k SLOC to find a small optimization possibility
[22:56:01] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[22:56:08] <apotheon> 1. define "small"; 2. if they don't do anything aobut it, they don't care in practice
[22:56:14] <apotheon> only in theory
[22:56:26] <ioxzev1z> #2 makes no sense
[22:56:26] * pragma- points at profilers.
[22:56:56] <ioxzev1z> I care if a car I drive could use less gas but I'm not going to do anything about the engine
[22:57:11] <ioxzev1z> Too big a job
[22:57:18] <rindolf> goodnight, everypony
[22:57:59] <apotheon> ioxzev1z: Do you understand the difference between theory and practice?
[22:58:04] <sham1> Also one needs to think about the fact that the engineer might care, but the middle management or such mightn't
[22:58:50] <apotheon> sham1: Yes, that's a key factor in the difference between theory and practice.
[22:58:59] <rsjw> a car's design is already set. programs stored in modifiable memory, on the other hand, not so much
[22:59:13] <apotheon> In my experience, when trying to write good code, it's usually management that says "no, ignore that".
[22:59:23] <ioxzev1z> rsjw, by that logic you can just dive into a large codebase and get to work
[22:59:27] *** Joins: orion (~orion@user/orion)
[22:59:28] <ioxzev1z> What about closed source software?
[22:59:39] <apotheon> . . . then what would have taken an unacceptable extra hour to do right ends up costing the company a hundred hours every six months.
[23:00:02] <sham1> apotheon: well then you can't say that the programmers don't care
[23:00:04] <rsjw> ioxzev1z: okay yes, I had open source programs in mind
[23:00:21] <orion> Hello. Is there a straightforward way to discover which header file is the cause of a #define'd value being in scope?
[23:00:25] *** Joins: cousteau (~cousteau@user/cousteau)
[23:00:30] <ioxzev1z> rsjw, even with FOSS, many projects are so large that even a small change can take a long time
[23:00:34] <apotheon> sham1: in practice
[23:00:39] <apotheon> as in "put into practice"
[23:00:54] <pragma-> orion: compilers tend to have optional flags to print such things. what compiler are you using?
[23:00:56] <sham1> No, not even in practice
[23:01:00] <rsjw> ioxzev1z: yes, but I didn't say it would be super simple, I just said it wasn't fixed
[23:01:02] <orion> pragma-: clang-13
[23:01:14] <sham1> That's just BS
[23:01:34] <pragma-> orion: clang -dM -E
[23:02:01] <apotheon> sham1: You're looking for reasons to disagree, I think.
[23:02:09] <apotheon> I'm not talking about programmers' feelings.
[23:02:10] <sham1> f course I am. I'm argumentative
[23:02:28] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 268 seconds)
[23:02:37] <heiner_> orion: there is a trick: just define the macro to a different value in your own source file. Most compilers conveniently report that both defines are different, and show both locations
[23:03:03] <apotheon> sham1: I should just direct comments to you with which I disagree, then, so you can point out why they're wrong and I can say "Okay, you win."
[23:03:43] <apotheon> . . . instead of saying things with which I agree and having you argue that I meant something different than I actually meant.
[23:03:48] <orion> pragma- / heiner_: Thank you both!
[23:04:49] <sham1> apotheon: then what did you mean
[23:05:05] <apotheon> 12:30 < apotheon> as in "put into practice"
[23:05:18] <sham1> Put into practice by whom and for what reason
[23:05:29] <apotheon> The point is that it's mostly *not* put into practice.
[23:05:38] *** Joins: jinie (~jimmy@188.114.173.37)
[23:05:50] <apotheon> . . . thus "almost nobody cares about good code, in practice."
[23:05:58] <ioxzev1z> ...
[23:06:17] <pragma-> …
[23:06:20] <ioxzev1z> apotheon, people care but in the vast marjority of cases there is nothing they can do, even if they wanted to
[23:06:22] <ioxzev1z> bruh
[23:06:39] <apotheon> "I wish my boss would let me write good code for this, but he wants to save twenty minutes of my time this week so he has more opportunity to harangue me about not being done yet."
[23:06:44] <sham1> Just because I care and would put it into practice, I can't because that's not what I'm paid to do
[23:06:50] <apotheon> ioxzev1z: 12:32 < apotheon> I'm not talking about programmers' feelings.
[23:07:12] <apotheon> sham1: yes
[23:07:16] *** Quits: jinie (~jimmy@188.114.173.37) (Client Quit)
[23:07:26] <apotheon> would is not the same as do
[23:07:34] <sham1> But it's not my fault
[23:07:37] <ioxzev1z> This is the olympics of mental gymnastics
[23:07:42] <apotheon> sham1: I didn't say it was.
[23:08:01] <apotheon> It takes some gymnastic skill to keep failing to see my point, I agree.
[23:08:28] <Dotz0cat> I now just have to find a small memory leak and remove a ton of commented code.
[23:08:37] <sham1> Valgrind
[23:08:40] <sham1> Or ASan
[23:10:29] <Dotz0cat> asan was what told me about the leak
[23:10:37] *** Joins: semeion (~semeion@user/semeion)
[23:10:53] <sham1> It should also tell you some places where the leak might have originated from
[23:11:03] <sham1> Unless you don't have debug symbols I suppose
[23:13:40] <Dotz0cat> It did enough. Just forgot to call free on a few structs.
[23:14:36] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Quit: bdax)
[23:15:19] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:15:20] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.4)
[23:15:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[23:18:09] *** Joins: somlis (~somlis@user/somlis)
[23:18:23] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[23:18:24] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[23:21:16] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[23:23:01] *** Joins: u0_a3911 (~u0_a391@2600:380:a469:f561:b41b:9e23:5684:1845)
[23:24:35] <Matt|home> ... has anyone ever gone back and looked at something they wrote a few days ago and gotten confused
[23:24:45] <omegatron> no
[23:25:13] <omegatron> but I document my stuff ; you might want to try it
[23:25:33] <Matt|home> ...
[23:25:59] *** Quits: u0_a391 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com) (Ping timeout: 250 seconds)
[23:26:05] <heiner_> mostly with Perl
[23:26:26] <apotheon> My old Perl never confused me.
[23:26:52] <Matt|home> i had working code from an earlier commit.. then i tried implementing command line arguments and now im just confused as to what i was doing..
[23:27:11] <apotheon> hmm
[23:28:15] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:28:24] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:28:50] <omegatron> ... either you need more or less alcohol ..
[23:29:34] *** Joins: magla (~gelignite@55d4b9f8.access.ecotel.net)
[23:30:12] <heiner_> alcohol makes you a genius programmer. You'll find exciting ways to rewrite  existing code -- and delete everything when sober again....
[23:30:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:33:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:34:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[23:35:52] <Matt|home> alright.. so what should i do in this case. the new file im working on is relatively small but i legit have no idea what im trying to accomplish with it. do i spend time figuring it out, or work from scratch on a new file
[23:36:02] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Quit: WeeChat 3.3)
[23:36:18] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[23:36:27] <omegatron> let me check my palantir ...
[23:37:22] <omegatron> the eye from the east says: currently busy, searching for two hobbits doing nasty stuff with my thing ..
[23:38:45] <Matt|home> ... do u even read books bro
[23:39:09] <omegatron> I read books, before your parents were born ..
[23:39:24] <omegatron> ... 'bro'
[23:39:59] <APic> IRC > Books
[23:40:01] <APic> srsly
[23:40:05] <Matt|home> that would be highly impressive considering both my parents are 80
[23:40:05] <sham1> Book of IRC ?s
[23:40:12] * APic snickers magically.
[23:40:36] <sham1> That's quite magical
[23:41:06] <APic> sham1: https://www.amazon.com/Lange-Leitung/dp/3442428459 actually has some IRC Content
[23:41:08] <candide> Title of APic's link: Lange Leitung: 9783442428458: Amazon.com: Books
[23:41:18] <APic> Unfortunately it is German and i do not know wheter it has been translated yet.
[23:42:43] <APic> s/ter/ther/
[23:43:36] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:46:49] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:47:14] *** Quits: WAR10CK (~WAR10CK@14.223.182.108) (Remote host closed the connection)
[23:50:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:51:51] <Dotz0cat> I got version 1.2 of my project (walld) published
[23:51:59] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[23:52:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:59:06] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
