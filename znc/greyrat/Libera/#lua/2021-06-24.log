[00:17:03] <RhodiumToad> I'd be very surprised if it were deterministic
[00:17:49] <RhodiumToad> since json specifies that order of keys is not relevant and lua tables don't iterate in a predictable order
[00:18:10] <RhodiumToad> making it deterministic would require an explicit sort step
[00:18:35] <RhodiumToad> but that's all just guesswork, look at the code or docs for an actual answer
[00:29:04] <Tricycle> From experience I'd say it's not.
[00:53:01] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:6c60:cc17:23fd:bf78) (Quit: Leaving)
[00:55:05] *** Joins: JanC_ (~janc@user/janc)
[00:55:51] *** Quits: JanC (~janc@user/janc) (Killed (NickServ (GHOST command used by JanC_)))
[00:56:07] *** JanC_ is now known as JanC
[00:56:25] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[01:28:34] *** Quits: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be) (Ping timeout: 252 seconds)
[01:50:34] *** Quits: Elw3 (~Elw3@dynamic-046-114-158-161.46.114.pool.telefonica.de) (Quit: Leaving)
[01:50:49] *** Joins: Elw3 (~Elw3@dynamic-046-114-158-161.46.114.pool.telefonica.de)
[02:35:00] *** Quits: fcr (~fran@r167-60-83-165.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[02:39:33] *** Joins: fcr (~fran@r167-60-75-89.dialup.adsl.anteldata.net.uy)
[02:42:29] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:43:00] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:43:23] *** Joins: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[02:44:48] *** Gustavo6046_ is now known as Gustavo6046
[02:45:11] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 252 seconds)
[02:54:16] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Quit: client exit)
[02:54:54] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[02:56:37] *** Quits: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 246 seconds)
[03:00:02] *** Joins: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[03:00:42] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 258 seconds)
[03:00:48] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[03:04:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[03:07:30] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[03:34:57] *** Quits: Armen (~Armen@armen138.com) (Quit: Ping timeout (120 seconds))
[03:35:21] *** Joins: Armen (~Armen@armen138.com)
[03:36:02] *** Quits: magla (~gelignite@55d434ed.access.ecotel.net) (Quit: Stay safe!)
[03:37:49] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:43:44] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:00:04] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[04:01:09] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Client Quit)
[04:02:18] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[04:37:26] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[04:46:48] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:51:55] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82s3g7l9r42569r41f4.18120a2.ip6.access.telenet.be)
[04:54:23] *** Quits: ratchet_freak (~ratchetfr@ptr-82s3g7l9r42569r41f4.18120a2.ip6.access.telenet.be) (Ping timeout: 244 seconds)
[04:55:49] *** Joins: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be)
[04:57:22] *** Quits: ratchetfreak_ (~ratchetfr@ptr-82s3g7l9r42569r41f4.18120a2.ip6.access.telenet.be) (Ping timeout: 246 seconds)
[05:20:11] *** Quits: ArRay_ (~ArRay_@user/array/x-1947090) (Ping timeout: 244 seconds)
[05:21:44] *** Quits: aiyion (~aiyion@wireguard/tunneler/aiyion) (Ping timeout: 244 seconds)
[05:23:56] *** Joins: aiyion (~aiyion@wireguard/tunneler/aiyion)
[05:29:44] *** Quits: Rena (~rena@dhcp-108-168-18-202.cable.user.start.ca) (Read error: Connection reset by peer)
[05:31:13] *** Joins: Rena (~rena@dhcp-108-168-18-202.cable.user.start.ca)
[05:32:53] *** Joins: gr33n7001 (~gr33n7007@user/gr33n7007h)
[05:34:20] *** Joins: ArRay_ (~ArRay_@user/array/x-1947090)
[05:34:58] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[05:41:18] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Quit: Leaving)
[05:46:47] *** Quits: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be) (Read error: Connection reset by peer)
[05:53:34] *** Quits: StephenLynx (~StephenLy@2804:1054:301f:1470::e93) (Quit: Leaving)
[05:55:56] *** Joins: monkey_ (~user@190.104.116.134)
[05:58:14] *** Joins: aquijoule__ (~richbridg@213-225-12-210.nat.highway.a1.net)
[06:00:48] *** Quits: aquijoule_ (~richbridg@089144205017.atnat0014.highway.webapn.at) (Ping timeout: 265 seconds)
[06:12:16] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 246 seconds)
[06:18:56] *** Joins: monkey_ (~user@190.104.116.134)
[06:21:44] *** Joins: orthoplex64 (~crm@70.120.0.94)
[06:24:42] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[06:26:27] *** Joins: monkey_ (~user@190.104.116.134)
[06:37:18] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 252 seconds)
[07:01:40] *** Quits: monkey_ (~user@190.104.116.134) (Read error: Connection reset by peer)
[07:13:58] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[07:22:53] <jaawerth> it *could* be deterministic in the order it sorts the keys, since that would also be the order it's parsing the JSON in, but since lua k/v table order isn't deterministic, that doesn't exactly help you
[07:24:12] <jaawerth> er, in the order it INSERTS the keys, not the order it sorts them
[07:24:14] <jaawerth> lol
[07:44:02] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[07:45:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:35:10] *** Joins: sagax (~sagax@213.138.71.146)
[08:53:28] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:44a1:5b0c:408d:dc6a)
[09:36:41] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:42:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:01:47] *** Joins: dvx (~dvx@185.63.97.64)
[10:12:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:56:01] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6c58-e4ed-b530-9372.res6.spectrum.com)
[11:22:41] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[11:33:59] *** Quits: gr33n7001 (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:47:37] *** Quits: tbcr (~tbcr@user/tbcr) (Read error: Connection reset by peer)
[11:47:52] *** Joins: tbcr (~tbcr@75.183.195.9)
[11:53:05] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6c58-e4ed-b530-9372.res6.spectrum.com) (Read error: Connection reset by peer)
[11:54:09] *** Quits: tbcr (~tbcr@75.183.195.9) (Read error: Connection reset by peer)
[11:56:16] *** Joins: tbcr (~tbcr@75.183.195.9)
[12:04:57] *** Joins: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be)
[12:09:55] *** Joins: skapata (~Skapata@user/skapata)
[12:26:14] *** Quits: charukiewicz (~quassel@irouteince04.i.subnet.rcn.com) (Remote host closed the connection)
[12:27:24] *** Joins: charukiewicz (~quassel@irouteince04.i.subnet.rcn.com)
[12:54:09] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[13:35:09] *** Quits: ArRay_ (~ArRay_@user/array/x-1947090) (Ping timeout: 244 seconds)
[13:39:26] *** Joins: entuland (~entuland@user/entuland)
[13:40:16] *** Joins: ArRay_ (~ArRay_@user/array/x-1947090)
[13:58:43] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[13:59:07] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[14:27:33] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:37:25] *** Quits: fcr (~fran@r167-60-75-89.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[14:38:22] *** Joins: fcr (~fran@r167-56-81-235.dialup.adsl.anteldata.net.uy)
[14:48:38] *** Joins: re101-fly-32 (~re101-fly@90.250.182.14)
[15:16:09] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[15:41:28] *** Quits: re101-fly-32 (~re101-fly@90.250.182.14) (Ping timeout: 246 seconds)
[15:58:43] *** Joins: brunoos (~brunoos@177.149.152.189)
[16:01:47] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[16:37:41] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 15000)
[16:39:53] *** Quits: brunoos (~brunoos@177.149.152.189) (Ping timeout: 258 seconds)
[17:03:07] *** Joins: brunoos (~brunoos@179.55.69.125)
[17:06:38] *** Joins: StephenLynx (~StephenLy@2804:1054:301f:1470::e93)
[17:08:29] *** Quits: Elw3 (~Elw3@dynamic-046-114-158-161.46.114.pool.telefonica.de) (Quit: Leaving)
[17:53:03] *** Joins: mbalmer_ (~mbalmer@2001:67c:1090:5073:7589:22d7:ae61:cac8)
[17:54:20] *** Quits: mbalmer (~mbalmer@2001:67c:1090:5073:4435:fe3c:6184:271f) (Ping timeout: 252 seconds)
[17:59:12] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 15000)
[18:10:37] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:14:32] *** Joins: netlynx (~me@94-226-69-15.access.telenet.be)
[18:28:02] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[19:02:48] *** Joins: netlynx_ (~me@94-226-69-15.access.telenet.be)
[19:06:42] *** Quits: netlynx (~me@94-226-69-15.access.telenet.be) (Ping timeout: 258 seconds)
[19:06:52] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[19:10:19] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[19:14:30] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:28:27] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-19fa-19fb-303f-0075.res6.spectrum.com)
[19:41:28] *** Joins: entuland (~entuland@user/entuland)
[19:44:38] *** Joins: tertu (~tertu@67-220-7-211.fttp.usinternet.com)
[19:56:53] *** Parts: chronon (~chronon@user/chronon) ()
[19:59:53] *** Joins: R2robot_ (~R2robot@user/r2robot)
[20:00:51] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[20:04:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[20:05:28] *** Quits: r3m (~launch@user/r3m) (*.net *.split)
[20:05:28] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[20:05:28] *** Quits: drc (~drc@user/drc) (*.net *.split)
[20:05:28] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[20:05:29] *** Quits: desolator (~desolator@163.172.139.202) (*.net *.split)
[20:05:29] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[20:05:29] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[20:05:38] *** Joins: desolator (~desolator@163.172.139.202)
[20:06:00] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[20:06:07] *** Joins: r3m (~launch@2600:3c04::f03c:92ff:fe5e:173)
[20:06:19] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[20:06:20] *** Joins: vancz (~vancz@user/vancz)
[20:07:12] *** r3m is now known as Guest4025
[20:07:32] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[20:07:51] *** Joins: drc (~drc@user/drc)
[20:08:38] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:09:42] *** Joins: svm_invictvs (~svm_invic@ip72-220-162-92.sd.sd.cox.net)
[20:10:08] <svm_invictvs> If I were developing my own lua compiler would there be a set of lua sources that I could test it againt?
[20:10:09] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[20:10:09] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[20:10:32] <svm_invictvs> Does the Lua project provide something like that somewhere? A set of sources that more or less make a good solid integration test?
[20:10:44] <MattJ> There is a suite of tests, yes
[20:11:08] <MattJ> https://www.lua.org/tests/
[20:11:25] <MattJ> ...good luck :)
[20:11:46] <TsT> let's test the tests :P
[20:14:01] <SquidDev> Worth noting that a some of the tests poke the implementation details of Lua, so you may need to comment bits out. 
[20:21:58] <svm_invictvs> Yeah
[20:22:09] <svm_invictvs> I've always wanted to build a language parser/complier for funzies
[20:24:19] <sworley> what is the "goto" way most projects package lua with their project? do most just add it the lua target version source to their project tree?
[20:25:27] <sworley> The project I work on is adding a lua scripting system targeting lua 5.3 and we need an easy way to ship it so our users don't have to compile 5.3 from source themselves. And not every distro has exactly 5.3 available in their repos. Some are older/newer
[20:25:42] <furq> yeah that's pretty normal to do
[20:29:16] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 252 seconds)
[20:30:28] *** Quits: tbcr (~tbcr@75.183.195.9) (Ping timeout: 246 seconds)
[20:34:06] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 258 seconds)
[20:51:16] *** Joins: mikess (~sam@user/mikess)
[21:08:38] *** Quits: brunoos (~brunoos@179.55.69.125) (Read error: Connection reset by peer)
[21:13:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 268 seconds)
[21:14:08] *** Joins: Lone_Wolf (~Lone_Wolf@user/lone-wolf/x-8969871)
[21:14:34] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[21:16:22] *** R2robot_ is now known as R2robot
[21:17:30] *** Quits: Lone_Wolf (~Lone_Wolf@user/lone-wolf/x-8969871) (Client Quit)
[21:19:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[21:24:31] <RhodiumToad> some of the tests on lua.org are also OS-dependent
[21:24:47] *** Joins: brunoos (~brunoos@179.55.69.125)
[21:30:09] *** Joins: magla (~gelignite@55d4555d.access.ecotel.net)
[21:38:47] *** Joins: tbcr (~tbcr@75.183.195.9)
[21:39:47] *** Quits: tbcr (~tbcr@75.183.195.9) (Changing host)
[21:39:47] *** Joins: tbcr (~tbcr@user/tbcr)
[21:47:17] *** Joins: Volund (~IceChat95@184-089-055-145.res.spectrum.com)
[21:48:53] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 256 seconds)
[21:53:36] <Volund> hmmm
[21:55:27] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[21:58:30] <Volund> the main inelegance stems from - a metatable's __index property will allow me to intercept all accesses, so I can make sure that I always return the Python method (among other protected variables I want to make sure are always available). User code could then create new globals with the same name
[21:58:31] <Volund> but it doesn't matter because any attempt to -access
[21:58:31] <Volund> - them would still retrieve the original value. That WORKS, but it feels... how do I put this... inconsistent?
[22:01:05] *** Joins: ratchet_freak (~ratchetfr@ptr-82s3g7l9r42569r41f4.18120a2.ip6.access.telenet.be)
[22:01:41] <technomancy> Volund: I don't have any context to know what you're talking about but yeah using metatables on _G is easy to mess up
[22:04:31] <Volund> define 'mess up'
[22:05:14] <technomancy> it's easy to get into a situation that leads to unpredictable results
[22:05:19] <Volund> ah
[22:06:39] <technomancy> for instance, you want pairs(_G) to let you iterate thru all globals, but that's impossible on stock luajit if you use metatables
[22:07:15] <Volund> yeah.
[22:07:22] <technomancy> even on 5.2+ where it's possible, you have to set a __pairs metamethod that iterates thru both the contents of the table itself and whatever __index is pulling from, and to omit results from __index when they appear in the table
[22:07:34] <Volund> I'm not too terribly concerned about people doing stuff like pairs(_G) because that serves no purpose in the context of the code I want people writing
[22:07:46] <technomancy> that feels like a red flag
[22:08:03] <Volund> exactly, which is why I'm a little bit chinscratchy here
[22:08:08] <Volund> So to explain a bit more:
[22:08:10] <technomancy> I mean, people should be able to use your code in ways you don't anticipate
[22:11:19] <Volund> the goal here is that the multiplayer game server manages a bunch of 'GameObjects'. each 'GameObject' is something like a player character, item, NPC, or even an entire map-region. Each 'GameObject' launches Script-Tasks, and each Script-Task is a separate Lua Runtime. In the Python code, each
[22:11:19] <Volund> 'Script-Task' is an actual Asyncio Task - meaning that 
[22:11:19] <Volund> Python's single thread will rapidly switch between each Task and change focus when it hits an 'await'. Since Lua has no concept of async/await, some shenanigans with debug.sethook() are used to force it to call Python code that awaits... and this code also checks to make sure that the Lua hasn't
[22:11:19] <Volund> been running too long (by checking total instruction 
[22:11:19] <Volund> count) because if it is, it will terminate it by raising a Python exception that will discard the task and the entire LuaRuntime object with it.
[22:11:51] <Volund> A single folder will be full of code contributed by semi-privileged users. require() can only pull code from that folder/subfolders or other places I allow.
[22:12:45] <Volund> a script task should start up a runtime, evaluate the lua code, and eventually die. it interacts with the game logic by calling an API object.
[22:13:23] <technomancy> seems like a natural fit for coroutines
[22:13:44] <Volund> except getting Lua coroutines and Python coroutines to coexist, I'm not sure how that'd work
[22:13:54] <technomancy> yeah I don't know anything about python
[22:14:07] <Volund> Lua coroutines seem to be more like Python's generators
[22:14:25] <technomancy> but debug.sethook has the advantage that if you forget to yield the coroutine it won't hang forever
[22:14:27] <technomancy> so that's good
[22:14:51] <Volund> From what I am seeing, a Lua coroutine is a function which is paused but you can basically call it multiple times and possibly retrieve multiple values from it.
[22:15:11] <RhodiumToad> it's a coroutine.
[22:15:11] <Volund> which pauses itself here and there*
[22:16:17] <Volund> right. but the Python equivalent is called a generator - a function which can pause its execution by 'yielding' a value, and, if called again as an iterator can yield more values until it eventually (maybe?) returns. a generator could continuously yield values indefinitely, too.
[22:16:47] <RhodiumToad> coroutines existed long before python ever did
[22:16:51] <Volund> yes I know
[22:17:05] <technomancy> so does the generator start again from the top every time it's called?
[22:17:11] <Volund> no
[22:17:45] <technomancy> well from what you've described it sounds the same but I could be missing something
[22:17:51] <Volund> I have read up on Lua coroutines and they seem to be roughly equivalent to Python's generators is what I'm saying. you depend on code inside the coroutine to decide when it's going to yield, and it yields a value. you can then resume the coroutine at a later time if you wish and maybe it will yield
[22:17:51] <Volund> again.
[22:18:24] <Volund> but if it -doesn't- yield, god help you if you want that code to do something else.
[22:18:42] <technomancy> sure; that's true of any cooperative multitasking system
[22:21:23] <Volund> when coroutines were first added to Python, they behaved like Lua ones. eventually though, that implementation has become known as generators instead. a Python coroutine is now a function that features the 'async' keyword in its definition. you call such a function by 'await'ing it. awaitables have
[22:21:23] <Volund> to register themselves to an async executor/runtim
[22:21:23] <Volund> e and the executor decides when to wake up a coroutine and continue its execution/return values. It's a bunch of syntactic sugar wrapped up around a much more complex event loop. Mostly useful for networking.
[22:21:53] <RhodiumToad> those are not coroutines in any meaningful sense
[22:22:34] <technomancy> lua lets/makes you make your own scheduler
[22:23:39] <Volund> well either way. I'm using asyncio's async/await to give each LuaRuntime x instructions per Task-timeslice. thank heavens for debug.sethook(). :)
[22:26:01] <Volund> I hope that actually WORKS... have no idea how the call stack is pulling that off under the hood.
[22:26:10] <Volund> haven't tested this with multiple Tasks running yet
[22:26:45] <Volund> but the big question is still: how to elegantly protect the Globals?
[22:27:04] <Volund> it's easy to REMOVE globals that I don't want people messing with, like debug.
[22:27:19] <Volund> but introducing new globals that user code can't replace/overwrite seems to be much more complex.
[22:28:11] <technomancy> Volund: you can throw in __newindex
[22:28:17] <technomancy> s/throw/error/ geez
[22:28:52] <Volund> right technomancy. but __newindex only applies if adding a new value to a table that doesn't currently exist, right?
[22:29:36] <technomancy> Volund: yeah, and if your protected values come from __index then they won't exist in the main _G table
[22:29:45] <Volund> yup
[22:30:05] <technomancy> so if you want to prevent a global from being set, it should work fine?
[22:30:09] <Volund> the problem here is preventing an existing value from being replaced. if I set a value to the globals - an exposed Python method... let's call it __debug_check. if user-code decides to do __debug_check = function() end
[22:30:21] <Volund> true, good point
[22:30:35] <technomancy> right so __debug_check needs to come from __index if you want it to be protected
[22:30:39] <technomancy> it can't be in _G directly
[22:38:50] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:39:32] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Remote host closed the connection)
[22:41:07] <RhodiumToad> % bar = 321  setmetatable(_G, { __index = { foo = 123 }, __newindex = function() error("leave the globals alone") end })  print(foo,bar)  bar=111  print(foo,bar)  foo=333
[22:41:07] <yalb> RhodiumToad: 123 321; 123 111; sandbox:1: leave the globals alone; stack traceback:; [C]: in function 'error'; sandbox:1: in metamethod '__newindex'; sandbox:1: in main chunk
[22:41:44] <RhodiumToad> that shows how bar is still modifiable but foo isn't
[22:42:10] <RhodiumToad> add a __metatable value to the metatable and client code can't get at __index, either
[22:46:44] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 258 seconds)
[22:52:06] * Volund thumbs-up
[22:52:49] <RhodiumToad> does the value really need to be exposed as a global though? what is the user code going to do with it?
[22:53:56] <RhodiumToad> (also what lua version is this?)
[22:59:28] *** Quits: netlynx_ (~me@94-226-69-15.access.telenet.be) (Quit: Ex-Chat)
[23:00:04] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:02:32] *** Quits: emanuele6 (~emanuele6@93-35-160-28.ip55.fastwebnet.it) (Changing host)
[23:02:32] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[23:05:32] <Volund> 5.3 I think?
[23:05:53] <Volund> so...
[23:06:53] <Volund> I need to expose an 'api object' which will be used to call game functions like sending text to players or changing stats and so on. that needs to be protected. the other thing I need to protect is the Python method which must ultimately be called by debug.sethook().
[23:07:02] <Volund> I can stick the latter on the former though
[23:07:19] <Volund> see
[23:07:57] <Volund> debug.sethook() will not allow me to set a callable userdata as its callable function. so I need to instead do something like... create a Lua function which calls said python method instead.
[23:09:21] <Volund> that's easy with just... func = runtime.eval("function() __debug_check() end"), then debug.sethook(func, 'l", 50)
[23:09:48] <Volund> if I prevent access to debug then users can't change the debug hook. but __debug_check() must be protected.
[23:10:19] <Volund> anyways, think I got that covered now
[23:11:29] <RhodiumToad> there's no reason to ever expose your hook function to the user at all
[23:11:57] <RhodiumToad> (you absolutely have to remove the debug library from the user sandbox)
[23:16:57] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[23:17:36] <Volund> the problem is that debug.sethook()'s first argument -must- receive a lua function. I can't stick my Python function in there directly. it errors saying it won't accept a POBJECT
[23:18:25] <Volund> so the - ... wait a moment
[23:18:29] <Volund> I just had an idea.
[23:19:06] <Volund> could possibly create a function and set the upvalue of that function...?
[23:19:34] <RhodiumToad> where is the python function coming from?
[23:20:19] <RhodiumToad> and are you doing all this from python, no C involved anywhere?
[23:20:50] <Volund> yes. No C. I'm using https://github.com/scoder/lupa
[23:24:54] * RhodiumToad doesn't do python
[23:26:41] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:29:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[23:32:20] <RhodiumToad> that code doesn't seem to be doing any sandboxing?
[23:33:08] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[23:46:18] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[23:47:19] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:49:54] *** Quits: milosz (~milosz@user/milosz) (Quit: Leaving)
