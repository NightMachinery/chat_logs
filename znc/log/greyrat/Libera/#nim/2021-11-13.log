[00:14:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:18:31] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:23:28] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:24:09] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:24:09] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:24:10] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:36:29] <FromDiscord> <hmmm> lol I just accidentally created an exe monstrosity that is unkillable, and doesn't even show in taskmanager list
[00:36:40] <FromDiscord> <hmmm> I guess I'll need to reboot
[00:37:47] <FromDiscord> <Elegantbeef> Nice you made malware!
[00:37:51] <FromDiscord> <hmmm> lol
[00:38:00] <FromDiscord> <hmmm> I guess I should sell my creation
[00:38:27] <FromDiscord> <hmmm> too bad it doesn't do anything except living forever on your screen ðŸ˜…
[00:38:50] <FromDiscord> <hmmm> brb reboot
[01:10:10] <FromDiscord> <retkid> whatever happened to channels ?
[01:10:29] <FromDiscord> <retkid> In reply to @hmmm "lol I just accidentally": care to tell me how you've done it
[01:10:34] <FromDiscord> <retkid> (edit) "it" => "it, jkjk unless"
[01:10:48] <FromDiscord> <retkid> anyway
[01:10:52] <FromDiscord> <Elegantbeef> Channels stil exist
[01:11:22] <FromDiscord> <retkid> https://nim-lang.org/docs/channels.html
[01:12:23] <FromDiscord> <retkid> no page for it anymore
[01:13:36] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/channels_builtin.html
[01:13:38] <FromDiscord> <willyboar> maybe this https://nim-lang.org/docs/channels_builtin.html
[01:13:46] <FromDiscord> <Elegantbeef> Too slow little willy
[01:13:58] <FromDiscord> <Elegantbeef> I mean too slow willy ðŸ˜€
[01:14:36] <FromDiscord> <willyboar> I use index for my searches @retkid https://nim-lang.org/docs/theindex.html
[01:25:19] *** Quits: PSEP1 (~kaliyuga@2601:601:200:5b30::de00) (Quit: Leaving)
[01:26:49] <FromDiscord> <retkid> GC is
[01:26:52] <FromDiscord> <retkid> annoying lol
[01:29:55] <FromDiscord> <retkid> https://tenor.com/view/head-spongebob-gif-20612177
[01:29:58] <FromDiscord> <retkid> SIGSEGV: Illegal storage access. (Attempt to read from nil?)
[01:44:41] <FromDiscord> <Zoom> Maybe keep prepended elements in their own structure, possible just in a seq, reversed. You can then define a struct to abstract the two partsâ†µ(@hmmm)
[01:45:17] <FromDiscord> <Elegantbeef> Oh hey zoom
[01:45:34] <FromDiscord> <Elegantbeef> Didja have any more ideas for iterators? ðŸ˜€
[01:46:31] <FromDiscord> <Zoom> Other than sprinke `lent`s and `.inline.`s, nope.
[01:47:03] <FromDiscord> <Zoom> Haven't had a chance to use them for anything yet.
[01:47:17] <FromDiscord> <Elegantbeef> I mean iterators are already inlined ðŸ˜€
[01:48:06] <FromDiscord> <Zoom> They are marked with this in std nonetheless ðŸ¤·
[01:49:22] <FromDiscord> <Elegantbeef> Hmm does the stdlib have a iterator -\> closure
[02:27:59] <FromDiscord> <dom96> don't think so, but sounds like an easy macro
[02:29:39] <FromDiscord> <retkid> is the anyway to get more context with Illegal storage access.
[02:30:54] <FromDiscord> <retkid> because im not quite sure why its not cooperating
[02:31:13] <FromDiscord> <retkid> i mean, i always have my theories
[02:34:49] <FromDiscord> <dom96> stack trace?
[02:35:50] <FromDiscord> <retkid> straces usually doesn't help here
[02:35:53] <FromDiscord> <retkid> i can try tho
[02:43:06] <FromDiscord> <konsumlamm> ~~printf~~ echo debugging
[02:45:54] <FromDiscord> <dom96> depends if it's just a null access or a corruption
[02:46:08] <FromDiscord> <retkid> its a corruption
[02:46:12] <FromDiscord> <retkid> print isn't gonna do anything
[02:46:16] <FromDiscord> <retkid> you cant track it
[02:46:16] <FromDiscord> <dom96> then you should try valgrind
[02:50:28] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/908858817536753704/unknown.png
[02:50:31] <FromDiscord> <retkid> cries
[02:51:44] <FromDiscord> <dom96> running in release mode ain't gonna help
[02:52:46] <FromDiscord> <retkid> the errors i get without it are usually completely irrelevant
[02:53:18] <FromDiscord> <retkid> time to maybe investigate channels because locks aren't saving me from gcc here
[03:21:33] <FromDiscord> <codic> I just switched to Debian Sid, so I now have Nim 1.6.0
[03:21:47] <FromDiscord> <codic> I'm suddenly getting these new warnings compiling my project, how do I fix them?
[03:21:55] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3EPg
[03:26:17] <FromDiscord> <codic> I mean, addr numdesk isn't a non-const location, so what?
[03:31:55] <FromDiscord> <Elegantbeef> How is it not a nonconst location?
[03:35:15] <FromDiscord> <codic> I have no idea, that's what the compiler says
[03:35:31] <FromDiscord> <codic> Or is it saying that the whole expression (post-cast) is invalid
[03:35:46] <FromDiscord> <Elegantbeef> it's saying that `addr numdesk` isnt a constant or string literal
[03:35:57] <FromDiscord> <Elegantbeef> So it's unsafe to be casting it to a cstring
[03:36:01] <FromDiscord> <codic> why is it unsafe
[03:36:26] <FromDiscord> <codic> also, it says so even for string literals, so that's wrong
[03:36:31] <FromDiscord> <Elegantbeef> Cause strings are Nim managed and depending what the C is doing they may attempt to access the data after free
[03:36:32] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3EPk
[03:37:02] <FromDiscord> <codic> I know for a fact that it won't, so how can I work around the errors?
[03:37:44] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3EPl
[03:38:03] <FromDiscord> <Elegantbeef> Explictly conver using `cstring(string)`
[03:38:16] <FromDiscord> <codic> cast[ptr char](cstring x)?
[03:38:23] <FromDiscord> <codic> btw this is not nessecarily a nim string
[03:38:25] <FromDiscord> <codic> it is a pointer to data
[03:38:42] <FromDiscord> <codic> (edit) "it is a pointer to ... datawhich" 03added "untyped" | "untypeddata ... " 03added "which is expressed as ptr char"
[03:38:43] <FromDiscord> <Elegantbeef> So then `cstring(cast[ptr char](yourAddr)`
[03:38:45] <FromDiscord> <codic> (this is before C had void)
[03:38:46] <FromDiscord> <Elegantbeef> I assume atleast
[03:39:09] <FromDiscord> <codic> yeah works thanks
[03:40:22] <FromDiscord> <codic> amazing https://media.discordapp.net/attachments/371759389889003532/908871375563923527/unknown.png
[03:40:48] <FromDiscord> <Elegantbeef> I do like that dom said "It'll be easy to make the macro" but meanwhile i'm fighting making it a non lazy macro ðŸ˜€
[03:44:35] <FromDiscord> <dom96> In reply to @Elegantbeef "So then `cstring(cast[ptr char](yourAddr)`": Would `cast[cstring](yourAddr)` also work?
[03:44:52] <FromDiscord> <Elegantbeef> Probably
[03:50:06] <FromDiscord> <retkid> how useful is ptr, why has nobody told me about it, and when should i use it?
[03:57:26] <FromDiscord> <Elegantbeef> It's a pointer so you use it when you need a pointer that you control
[04:02:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3EPs
[04:04:08] <FromDiscord> <dom96> nice
[04:22:12] <FromDiscord> <codic> In reply to @dom96 "Would `cast[cstring](yourAddr)` also work?": Yeah it does work
[04:22:23] <FromDiscord> <codic> Simpler indeed, thanks
[05:11:32] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[05:16:52] <Pyautogui> Question: Is there a print version of http://ssalewski.de/nimprogramming.html? I am finding the meta-programming bit very useful, and prefer reading dead-tree books.
[05:21:01] <FromDiscord> <retkid> so
[05:21:09] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3EPG
[05:21:12] <FromDiscord> <retkid> I kinda just wanna understand how this wo0rks
[05:21:35] <FromDiscord> <retkid> why do we need to do put the var in a specific place in order for it to be gcc safe?
[05:21:44] <FromDiscord> <retkid> why do we cast it?
[05:21:45] <FromDiscord> <willyboar> In reply to @Pyautogui "Question: Is there a": From what I know there isn't
[05:21:52] <Pyautogui> Thanks
[05:21:59] <FromDiscord> <retkid> the ptr part i get, its constantly changing
[05:22:21] <FromDiscord> <Elegantbeef> You keep saying `gcc` safe ðŸ˜€
[05:22:30] <FromDiscord> <willyboar> But it's not difficult to convert adoc to pdf and print any part you like
[05:22:40] <NimEventer> New thread by Ggibson: Byaddr tuple unpacking?, see https://forum.nim-lang.org/t/8616
[05:22:42] <FromDiscord> <retkid> In reply to @Elegantbeef "You keep saying `gcc`": because it exists outside of gcc?
[05:22:51] <FromDiscord> <Elegantbeef> no cause `gcc` is a compiler
[05:22:56] <FromDiscord> <retkid> fidopfgjdf
[05:22:56] <FromDiscord> <Elegantbeef> `gc` is garbage collection
[05:22:58] <FromDiscord> <retkid> im tired
[05:23:10] <FromDiscord> <retkid> i dunno how i didn't catch that
[05:23:15] <FromDiscord> <retkid> i meant garbage collection, yes
[05:23:18] <FromDiscord> <Elegantbeef> Ok so `allocShared0` allocates on the thread shared heap and 0's the memory
[05:23:29] <FromDiscord> <retkid> AAAAAAAAAAAAAAAAAAAA
[05:23:30] <FromDiscord> <Elegantbeef> You're manually allocating it so you have control over it
[05:23:42] <FromDiscord> <retkid> So it puts it where all the threads can see it
[05:23:58] <FromDiscord> <Elegantbeef> Yes with `refc` threads have independent heaps
[05:24:11] <FromDiscord> <Elegantbeef> with `orc`/`arc` the heap is shared so it's not required afaik
[05:24:17] <FromDiscord> <retkid> what does 0's the memory mean?
[05:24:48] <FromDiscord> <Elegantbeef> When you request memory from the OS it's got random memory in it so a bunch of invalid values, zeroing writes `0` in it so it's a default "good" value
[05:24:58] <FromDiscord> <Elegantbeef> Depending on the type that 0-ing isnt "good"
[05:24:59] <FromDiscord> <retkid> AH
[05:25:28] <FromDiscord> <retkid> so no segfaults
[05:25:46] <FromDiscord> <retkid> is there any reason you'd use allocShared1
[05:25:57] <FromDiscord> <retkid> to do the opposite and just assign it to be a mistake
[05:26:19] <FromDiscord> <Elegantbeef> allocShared1?
[05:26:33] <FromDiscord> <retkid> idk why it came up nvm
[05:26:44] <FromDiscord> <retkid> im super tired i dont wanna pollute this channel anymore
[05:26:46] <FromDiscord> <retkid> thank you ,3
[05:26:48] <FromDiscord> <retkid> (edit) ",3" => "<3"
[05:26:56] <FromDiscord> <Elegantbeef> You'd use `allocShared` for when you dont want zeroed memory since you're writing to it anyway
[05:27:05] <FromDiscord> <Elegantbeef> It's slightly more performance centric
[05:31:06] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 260 seconds)
[05:31:27] <nrds> <06Prestige99> I've been using parsetoml to read toml files, but is there a way to save? Or maybe I should switch to json...
[05:33:12] <FromDiscord> <Elegantbeef> parsetoml is that status'?
[05:33:34] <nrds> <06Prestige99> https://github.com/NimParsers/parsetoml this
[05:33:51] <FromDiscord> <Elegantbeef> Ah yea i'd just use statu's toml if you want it
[05:33:55] <FromDiscord> <Elegantbeef> Though it doesnt have hooks
[05:34:02] <FromDiscord> <Elegantbeef> So it's pretty unfun
[05:34:09] <nrds> <06Prestige99> hm
[05:34:42] <FromDiscord> <Elegantbeef> For my WM i have a whole bunch of config types since there are no hooks
[05:35:07] <FromDiscord> <Elegantbeef> Personally i'd suggest using a library with hooks, it makes life easier ðŸ˜€
[05:41:39] <FromDiscord> <evoalg> I can make a table var via `var t: Table[string, int]` or `var t = Table[string, int]()` or `var t = initTable[string, int]()` and they seem to do exactly the same thing ... is it just a matter of personal preference which one I use?
[05:42:01] <FromDiscord> <Elegantbeef> Yes they're all initialized by default to good values
[05:42:09] <FromDiscord> <evoalg> nice
[05:42:48] <FromDiscord> <evoalg> When would I use `let a = {'a': 5, 'b': 9}.newTable` vs `let a = {'a': 5, 'b': 9}.toTable` ? I'm tring to understand the difference between newTable and toTable
[05:43:17] <FromDiscord> <evoalg> (and I dunno if it matter that I used let instead of var with them here)
[05:43:25] <FromDiscord> <Elegantbeef> `newTable` is a reference table which means `var b = yourRefTable` isnt a copy of the values but now `b` and `yourRefTable` point at the same value
[05:43:52] <FromDiscord> <Elegantbeef> You use references for that many to one relation, you want to reference the same table from many places
[05:43:53] <FromDiscord> <evoalg> oh!
[05:44:05] <FromDiscord> <evoalg> thank you!
[05:44:11] <FromDiscord> <Elegantbeef> `new` implies either `ref` or heap allocations
[05:44:41] <FromDiscord> <evoalg> Thank you as alwasy Elegantbeef
[05:44:53] <FromDiscord> <evoalg> always
[05:44:54] <FromDiscord> <Varriount> Is it intentional that `let n = -1; echo uint32(n)` succeeds, even with range checks turned on?
[05:45:29] <FromDiscord> <Elegantbeef> That should very much error
[05:45:56] <FromDiscord> <Varriount> https://play.nim-lang.org/#ix=3EPP
[05:46:02] <FromDiscord> <evoalg> I thought uint's cycle?
[05:46:17] <FromDiscord> <Elegantbeef> They do but `int` -\> `uint` should error if it's out of range
[05:46:37] <FromDiscord> <Elegantbeef> Seems it works for all of them oddly
[05:46:50] <FromDiscord> <Elegantbeef> !eval let n = -127i8; echo uint8(n)
[05:46:55] <NimBot> 129
[05:47:43] <FromDiscord> <Elegantbeef> Very much should error since those should be checked conversions, you should need to cast for this behaviour
[05:50:45] <FromDiscord> <evoalg> The Nim Tutorial (Part I) on the docs page says "Other programming languages may suggest the use of unsigned integers for natural numbers. This is often unwise: you don't want unsigned arithmetic (which wraps around) just because the numbers cannot be negative."  <-- is it suggesting to avoid using uint's and that we should use ranged types instead?
[05:51:31] <FromDiscord> <Elegantbeef> Yea it suggests using signed integers as underflow is less likely
[05:53:47] <FromDiscord> <Elegantbeef> Should add the caveat that ranges are checked and nim's unsigneds are not
[05:55:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3EPS
[05:56:18] <FromDiscord> <Elegantbeef> And if it's not clear from that PLEASE DONT EVER DO THAT
[05:56:38] <FromDiscord> <exelotl> yeah only use uints if you explicitly _want_ the wrapping behaviour
[05:57:05] <FromDiscord> <Elegantbeef> using try except one defects is how you piss me off ðŸ˜›
[05:57:08] <FromDiscord> <Elegantbeef> on defects\
[05:57:33] <FromDiscord> <Elegantbeef> Defects indicate flaws in code and should not use exception handling to get around
[05:57:59] <FromDiscord> <evoalg> Makes sense!
[06:05:25] <FromDiscord> <evoalg> If I really wanted to, I could make a type just for positive ints: `type PositiveInts = 0..int.high` right?
[06:05:57] <FromDiscord> <Elegantbeef> Yep but Nim defines that as `Natural`
[06:06:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[06:25:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[06:31:30] <FromDiscord> <evoalg> I thought I read someone not to use Natural for var's but only use it for in proc parameters or some such?
[06:32:46] <FromDiscord> <evoalg> (I tried to look but couldn't find where I read it sry)
[06:33:52] <FromDiscord> <exelotl> nah, there's no reason to only use Natural for params, afaik
[06:33:58] <FromDiscord> <Elegantbeef> Natural is just a range value so can be used anywhere they can be
[06:34:30] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#Natural
[06:34:49] <FromDiscord> <Elegantbeef> It's exactly declared as you said ðŸ˜€
[06:34:49] <FromDiscord> <evoalg> Thank you both of you
[06:34:59] <FromDiscord> <evoalg> oh nice!
[06:36:07] <FromDiscord> <Elegantbeef> if you keep thanking people you'll wear out your keyboard and never be able to write tom hanks a message
[06:36:57] <FromDiscord> <evoalg> hehe ok I'll limit them so they're more special ðŸ˜‰
[06:38:32] <FromDiscord> <demotomohiro> !eval echo typepof(1.Natural + 2.Natural)
[06:38:36] <NimBot> Compile failed: /usercode/in.nim(1, 6) Error: undeclared identifier: 'typepof'
[06:39:17] <FromDiscord> <demotomohiro> !eval echo typeof(1.Natural + 2.Natural)
[06:39:20] <NimBot> int
[06:39:27] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:41:48] <FromDiscord> <demotomohiro> So if you use Natural anywhere, you might needs to overload operators for Natural
[06:42:37] <FromDiscord> <Elegantbeef> Not really
[06:43:01] <FromDiscord> <Elegantbeef> !eval var a\: Natural = Natural(1) + Natural(2); echo a
[06:43:04] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: ':' or '=' expected, but got 'Natural'
[06:43:34] <FromDiscord> <Elegantbeef> It's subrange type it implictly converts to the value and back but it's a checked conversion
[06:44:47] <FromDiscord> <evoalg> so ranges are like assertions but everywhere?
[06:47:02] <FromDiscord> <Elegantbeef> They're checked unless you disable it
[06:47:18] <FromDiscord> <Elegantbeef> Both runtime/compile time checked
[06:47:22] <FromDiscord> <Elegantbeef> Though the compile time is quite dull
[06:48:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3EPZ
[06:48:35] <FromDiscord> <evoalg> ahh that's explains it well
[06:48:37] <FromDiscord> <Elegantbeef> It'd be nice if the compiler could go "Hey this is a constant that isnt touched so i know it's `-1` and apply that, but alas
[06:49:53] <FromDiscord> <evoalg> I'm glad, otherwise it'd confuse the hell out of me
[06:50:18] <FromDiscord> <Elegantbeef> Well `a = b` in the above would ideally be a compile time error imo, but yea
[06:50:40] *** Quits: krux02 (~krux02@p54932086.dip0.t-ipconnect.de) (Quit: Leaving)
[06:50:49] <FromDiscord> <evoalg> ohhhhh I see what you mean
[06:51:17] <FromDiscord> <evoalg> and I agree
[06:51:24] <FromDiscord> <Elegantbeef> Whenever you have something that's `val = literal | constant` or a comparison to a `literal | constant` it'd be nice for the compiler to say "Hey until this is mutated it's X"
[07:18:13] <FromDiscord> <leorize> we do have the tech for it in the compiler, just that no one wired it up for that \:p
[07:23:48] <FromDiscord> <Alea> is there anything important I'm missing by not updating nim 1.4.8?
[07:23:55] <FromDiscord> <Alea> (edit) "is there anything important I'm missing by not updating ... nim" 03added "from"
[07:24:29] <FromDiscord> <Elegantbeef> `[]` iterators, explicit + implicit generic dispatch, some distinct fixes
[07:24:45] <FromDiscord> <Elegantbeef> Though there arent any `[]` iterators implemented in stdlib
[07:26:48] <FromDiscord> <Alea> are people running into any particular issues while updating at this point, or is it safe?
[07:28:02] <FromDiscord> <Elegantbeef> No clue i've been using devel for a while at this point
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:59] <FromDiscord> <evoalg> there might be a list of regressions (or whatever they're called) somewhere though?
[07:44:01] <FromDiscord> <Elegantbeef> The change log does have a list of changes yes
[07:56:43] <FromDiscord> <evoalg> I too am wishing there was `[1..]` ... https://play.nim-lang.org/#ix=3EQ9
[07:58:45] <nrds> <06Prestige99> hm that would be nice
[07:58:46] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3EQa ðŸ˜›
[07:59:19] <FromDiscord> <evoalg> Elegantbeef to the rescue!
[08:03:05] <FromDiscord> <evoalg> I would have thought that `for i, line` would work without enumerate, but it doesn't
[08:03:28] <FromDiscord> <Elegantbeef> Nope `for x, y in z` calls `z.pairs` if it exists
[08:03:55] <FromDiscord> <Elegantbeef> You have given me an idea to add to slicerator though
[08:04:58] <FromDiscord> <evoalg> oh but ... but I can do `pairs(mystr.splitlines)` and it works!
[08:05:18] <FromDiscord> <Elegantbeef> That's using `mystr.splitlines` the proc not the iterator
[08:06:37] <FromDiscord> <evoalg> okay
[08:10:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3EQg
[08:37:01] <FromDiscord> <evoalg> is a nimble refresh the correct thing for me to do to when you add something new like that?
[08:41:15] <FromDiscord> <Elegantbeef> I think the proper thing is to reinstall it since i'm not properly versioning it
[08:41:37] <FromDiscord> <evoalg> (as there's not "update") ... ahhh ok yea I ended up installing it again, over-writing the previous
[08:41:45] <FromDiscord> <Elegantbeef> Not overly ergonomic, but i'm also not vendoring it properly
[08:42:16] <FromDiscord> <evoalg> I understand
[08:46:01] <FromDiscord> <evoalg> I'm still confused .. the `.splitLines` returns a seq, so why doesn't `for i, line in mystr.splitLines:` work? It works if I do `let myseq = mystr.splitLines; for i, line in myseq:` right?
[08:46:43] <FromDiscord> <Elegantbeef> there is a `splitlines` that is a procedure and one that is an iterator, given the context it chooses the iterator and goes "nope this isnt right"
[08:47:25] <FromDiscord> <Elegantbeef> when you do `pairs(myStr.splitLines)` it's not looking for an iterator so it matches with the proc and then pairs is called on the `seq[string]`
[08:49:09] <FromDiscord> <evoalg> oh right, now I understand ðŸ™‚
[08:49:24] <FromDiscord> <Elegantbeef> And here i was going to quickly make an example
[08:49:43] <FromDiscord> <evoalg> maybe if you do I'd understand better
[08:51:34] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3EQp
[08:55:27] <FromDiscord> <evoalg> whereas enumerate is an iterator right?
[08:55:58] <FromDiscord> <Elegantbeef> enumerate is a for loop macro so it doesnt expect anything in that slot
[08:57:31] <FromDiscord> <Elegantbeef> You can compile with `--expandMacro:enumerate` to see how it expands your code if you want to understand mroe
[08:59:17] <FromDiscord> <codic> In reply to @nrds "<Prestige> I've been using": For config btw nim's std/parsecfg is pretty epic format too
[09:02:03] <FromDiscord> <evoalg> now I know everything! ðŸ˜‰
[09:38:07] <FromDiscord> <PatAPizza> heyy
[09:38:12] <FromDiscord> <PatAPizza> is nim production ready?
[09:39:37] <FromDiscord> <Elegantbeef> Some use it as such
[10:05:12] <FromDiscord> <codic> If it's not production ready it never will be!
[10:21:40] <FromDiscord> <Yardanico> (codic's answer is a joke btw)
[10:24:44] <FromDiscord> <reilly> IMO, the Nim language in and of itself is more than production ready. Whether or not Nim's tooling and ecosystem is production ready is debatable.
[11:53:04] <FromDiscord> <arnetheduck> In reply to @nrds "<Prestige> I've been using": https://github.com/status-im/nim-toml-serialization is what we use mostly
[12:20:27] <NimEventer> New thread by Puruneko: Generic type in generic type, see https://forum.nim-lang.org/t/8617
[12:53:47] *** Quits: notchris (sid181145@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:57:23] *** Joins: notchris (sid181145@hampstead.irccloud.com)
[13:40:32] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[14:08:17] <FromDiscord> <enthus1ast> @arnetheduck\: i was looking into https://github.com/enthus1ast/nimSocks/issues/8 and i'm wondering how to make it proper (any suggestions here btw?). What do you mean with "some dialects of Nim" ?
[14:09:51] <FromDiscord> <enthus1ast> i would solve it now, by looping through the enum and check the value.
[14:10:08] <FromDiscord> <enthus1ast> but recent nim version seem to handle this fine
[14:14:52] <FromDiscord> <hogspeed> https://thegreatwhitebrotherhood.org/welcome/important-message-from-the-gwb/
[14:16:26] <FromDiscord> <faix> Hello,  I would like to communicate over an anonymous unix domain socket.â†µThere is a call connectUnix(path), but the connection doesn't work.â†µI guess the root of the problem is the path. The path string doesn't start with "\\0". How to construct such a string?
[14:17:02] <FromDiscord> <haxscramper> `--panics:on` vs `--panics:off` creates two dialects of a language where `Defect` has different meaning
[14:17:28] <FromDiscord> <enthus1ast> ah i see thanks [haxscramper](https://matrix.to/#/@haxscramper:matrix.org)
[14:21:01] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[14:25:19] <FromDiscord> <enthus1ast> [faix](https://matrix.to/#/@faix:matrix.org)\: `echo "foo\0baa"`
[15:05:50] <FromDiscord> <faix> sock.connectUnix("\\0/var/run/jet.socket") but strace tell me\:â†µsetsockopt(3, SOL\_SOCKET, SO\_REUSEADDR, [1], 4) = 0â†µconnect(3, {sa\_family=AF\_UNIX, sun\_path=@"/var/run/jet.socket"}, 22) = -1 EAFNOSUPPORT (Address family not supported by protocol)â†µepoll\_ctl(4, EPOLL\_CTL\_ADD, 3, {events=EPOLLIN\|EPOLLRDHUP, data={u32=3, u64=3}}) = 0
[15:09:26] <FromDiscord> <faix> sent a long message, see http://ix.io/3ERJ
[15:10:18] <FromDiscord> <enthus1ast> you can use tripple \`   for code formatting
[15:11:17] <NimEventer> New thread by Mantielero: Help needed - issue with a wrapped library, see https://forum.nim-lang.org/t/8618
[15:12:46] <FromDiscord> <enthus1ast> have you created the socket correctly? `newSocket`
[15:21:17] <FromDiscord> <faix> var sock = newAsyncSocket()â†µsock.setSockOpt(OptReuseAddr, true)â†µsock.connectUnix("\\0/var/run/jet.socket")
[15:23:45] <FromDiscord> <enthus1ast> the domain must be AF\_UNIX
[15:25:21] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3ERM
[15:25:56] <FromDiscord> <faix> strace tell me It's AF\_UNIXâ†µconnect(3, {sa\_family=AF\_UNIX, sun\_path=@"/var/run/jet.socket"}, 22) = -1
[15:26:11] <FromDiscord> <Rika> Try it nonetheless
[15:27:34] <FromDiscord> <enthus1ast> yeah could be, but `EAFNOSUPPORT` suggest that there is a invalid combination, or, that you os really does not support it. Maybe wsl?
[15:33:10] <FromDiscord> <faix> sent a long message, see http://ix.io/3ERR
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:13] <FromDiscord> <faix> ok, thanks for the support guys, i keep digging
[15:43:39] <FromDiscord> <Benjamin> This post on the forum might be spam meant to create backlinks (see the two periods ". .")\: https://forum.nim-lang.org/t/7731#55773
[15:44:07] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[15:44:14] <FromDiscord> <zetashift> oh good one, looks like it!
[15:44:25] <FromDiscord> <enthus1ast> sneaky
[15:45:36] <FromDiscord> <Rika> What are back links
[15:45:55] <FromDiscord> <enthus1ast> links to a site to raise its value
[15:46:12] <FromDiscord> <enthus1ast> to raise its "page rank"
[15:47:27] <FromDiscord> <Benjamin> Could be the opposite for all I know, lowering a competitor's pagerank. SEO is weird.
[15:49:31] <FromDiscord> <qb> dlopen: `If file is a null pointer, dlopen() shall return a global symbol table handle for the currently running process image.` How could I realize that in Nim? nim's posix dlopen expects a mode flag
[15:54:38] <FromDiscord> <enthus1ast> does `dlopen(nil, theCint)` not work?
[15:57:39] <FromDiscord> <qb> I'm a bit confused. `echo repr(dlopen(nil, 1))` returns `0x7f2be318c220`  but `pmap pid` returns `000055d7e2c28000      4K r---- testbin`
[15:57:50] <FromDiscord> <qb> I've expected that dlopen returns `000055d7e2c28000`  aswell
[16:09:48] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[16:19:59] <FromDiscord> <enthus1ast> i can not really help, but is the 0x7f2be318c220 the pointer or the address the pointer points to?
[16:30:13] *** Joins: terminalpusher (~terminalp@2a01:586:9939:1:4737:6a0e:c20e:4e13)
[16:38:16] <FromDiscord> <qb> oh yea could be that it is the pointer. How would I dereference it? `[]`  doesnt seems to work
[16:49:45] <FromDiscord> <Rika> you cant dereference `pointer`s, you need to make it a typed one (`ptr Type`)
[16:49:59] <FromDiscord> <Rika> `cast[ptr TheType](theRawPtr)`
[16:50:04] <FromDiscord> <Rika> then you can [] it
[16:59:47] <FromDiscord> <qb> Thanks `echo repr(cast[ptr pointer](dlopen(nil, 1))[])` works as expected
[17:00:25] <FromDiscord> <Rika> `ptr pointer` :galaxybrain:
[17:01:56] <FromDiscord> <qb> or `cast[ptr ByteAddress](dlopen(nil, 1))[].toHex()` ðŸ˜›
[17:05:41] <FromDiscord> <Kermithos> is it possible to get a string returned from a threaded proc and wait until all threads are finished? Something like this https://play.nim-lang.org/#ix=3ESg
[17:16:48] <FromDiscord> <enthus1ast> @Kermithos\: what i've done is to `inc` a var for each thread i spawned, then i `dec` the var for each channel message i got https://github.com/enthus1ast/countFasta/blob/8127028eee4c721fbc11308deac3c414ca16af31/fastalib.nim#L88
[17:17:07] <FromDiscord> <enthus1ast> but i bet there are better options, but works good in this case
[17:56:46] *** Quits: terminalpusher (~terminalp@2a01:586:9939:1:4737:6a0e:c20e:4e13) (Remote host closed the connection)
[18:23:12] <NimEventer> New Nimble package! exprgrad - An experimental deep learning framework, see https://github.com/can-lehmann/exprgrad
[18:24:58] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3ESE
[18:28:51] <FromDiscord> <Rika> `nimble install bigints` is the wrong way to install it just an fyi
[18:30:41] <FromDiscord> <Hamid Bluri> whaaaat
[18:31:23] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=Ccf
[18:31:31] <FromDiscord> <exelotl> In reply to @Rika "`nimble install bigints` is": wait, what's the right way?
[18:31:40] <FromDiscord> <Rika> `nimble install https://github.com/nim-lang/bigints`
[18:31:47] <FromDiscord> <Rika> afaik since bigints is def-'s
[18:31:52] <FromDiscord> <exelotl> ohh
[18:31:55] <FromDiscord> <Rika> and this is a fork of def-'s
[18:32:15] <FromDiscord> <Rika> initBigInt is a generic, no idea if map works well with generics
[18:32:21] <FromDiscord> <konsumlamm> In reply to @Rika "`nimble install https://github.com/nim-lang/bigints": the link has already been updated
[18:32:29] <FromDiscord> <Rika> really? if so then okay
[18:32:34] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3ESR
[18:32:39] <FromDiscord> <Hamid Bluri> In reply to @Rika "initBigInt is a generic,": that's not good ðŸ˜•
[18:32:43] <FromDiscord> <Hamid Bluri> (edit) "https://paste.rs/bRi" => "https://play.nim-lang.org/#ix=3ESQ"
[18:38:12] <FromDiscord> <whisperdev> Heya.I am trying to downloadFile over http. I have included the bearssl lib but it looks like it's still looking for the other libssl libs
[18:41:50] <FromDiscord> <enthus1ast> do we support other ssl libs than openssl yet?
[18:41:54] <FromDiscord> <enthus1ast> i don't think so
[18:54:21] <FromDiscord> <arnetheduck> sent a long message, see http://ix.io/3ET3
[18:55:48] <FromDiscord> <arnetheduck> In reply to @enthus1ast "do we support other": in `chronos` we use `bearrssl` - this is nice because it's compiled together with the rest of the nim code, meaning no pesky dependencies (https://github.com/status-im/nim-bearssl)
[18:56:31] <FromDiscord> <enthus1ast> thank you @arnetheduck
[18:56:45] <FromDiscord> <enthus1ast> i've done it like this for now\: https://github.com/enthus1ast/nimSocks/blob/77f95b52083a448119c3c96d4fe7818363fdcaff/nimSocks/types.nim#L115
[18:57:10] <FromDiscord> <enthus1ast> i've also found the "nim-style-guide"
[18:57:11] <FromDiscord> <arnetheduck> In reply to @whisperdev "Heya.I am trying to": https://forum.nim-lang.org/t/7964#52137 is how we do it
[18:57:14] <FromDiscord> <enthus1ast> interesting read
[18:59:45] <FromDiscord> <whisperdev> Thanks
[19:29:26] <FromDiscord> <Ricky Spanish> sent a code paste, see https://play.nim-lang.org/#ix=3ET7
[19:31:38] <FromDiscord> <Ricky Spanish> never mind my mistake it seems i can just directly use - between now and interval
[19:36:52] <FromDiscord> <Zoom> Considering writing a basic message broker (http\<json\>ws). What would you recommend to use? Have almost no experience with web stuff. Performance is low priority.
[19:37:58] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3ET9
[19:54:29] <FromDiscord> <Rika> Then I have no idea why it doesnâ€™t work
[19:54:55] <FromDiscord> <Rika> Zoom prolly just use standard library stuff
[19:56:43] <FromDiscord> <Zoom> I'm considering it, but I'm also interested in exploring chronos and its ecosystem a bitâ†µ(@Rika)
[20:17:35] *** Quits: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com) (Quit: The Lounge - https://thelounge.chat)
[20:49:06] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:53:57] <FromDiscord> <Bung> hey , do we have grpc implementation in nim ?
[20:55:28] <FromDiscord> <faix> [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz) It works now for me\:â†µsock = newAsyncSocket(domain = AF\_UNIX, sockType = SOCK\_STREAM, protocol=IPPROTO\_IP)â†µsock.connectUnix( "\\0/var/run/jet.socket")
[20:55:42] <FromDiscord> <Recruit_main707> @Bung  i dont think so, but maybe
[20:56:42] <FromDiscord> <Bung> I"ve searched , not found
[20:57:10] <FromDiscord> <Recruit_main707> i keep getting to protobuffers, but thats not what you are looking for is it?
[20:58:40] <FromDiscord> <dom96> @Zoom what's a "basic message broker"? ðŸ™‚
[20:58:51] <FromDiscord> <Bung> In reply to @Zoom "Considering writing a basic": I think they are different , protobuffer is construct data , grpc has server and client.
[21:11:37] *** Joins: Guest9 (~Guest9@2a01:e0a:3f4:9630:57c6:4196:d9f:6edd)
[21:11:57] * Guest9 Gintru
[21:12:08] <Guest9> . o Oâ€¯HIâ€¯/â€¯IN
[21:12:28] <Guest9> nim seems very promising
[21:12:49] <Guest9> I am the one who gave billion in bitcoin
[21:13:13] <Guest9> I am the Musk step brother you know
[21:13:46] <Guest9> but I wonder myself, what are other VIM plugins
[21:14:00] <Guest9> apart the "Zah" one
[21:14:30] <Guest9> [R] are you a language ? a bot ?
[21:14:43] <Guest9> arkanoid and you a game ?
[21:15:24] <Guest9> dom96 / you here it is a honor
[21:15:35] *** Guest9 is now known as Gintru
[21:16:56] <Gintru> Okay I am not in a hurry, I can wait
[21:19:36] <Gintru> Anyone available for VIM plugin/addon
[21:21:50] <nrds> <06Prestige99> Gintru what are you looking for?
[21:22:16] <nrds> <06Prestige99> oh you changed your name
[21:22:20] <nrds> <06Prestige99> There is also https://github.com/alaviss/nim.nvim
[21:22:49] <nrds> <06Prestige99> and if you have LSP set up with vim, there is https://github.com/PMunch/nimlsp
[21:24:17] <Gintru> o !
[21:24:36] <Gintru> Prestige gone ?
[21:24:40] <FromDiscord> <logo> https://github.com/zah/nim.vim
[21:24:48] <FromDiscord> <logo> I use this one
[21:24:51] <nrds> <06Prestige99> gone?
[21:25:23] <Gintru> nothing (I used Tab to -not- get your nick)
[21:25:30] <Gintru> Nice to meet you
[21:25:40] <nrds> <06Prestige99> You too - I'm relayed over IRC
[21:25:45] <Gintru> Thanks much for the answer
[21:26:02] * Gintru laughting
[21:26:18] <Gintru> nrds / true, I see it si nrds
[21:27:07] <Gintru> nrds Gintru is Turing anagram, funny it is close to Gintro
[21:28:21] <Gintru> nrds / Prestige / anyway to get a pragma like {disable all identation mandatory}
[21:29:14] <Gintru> logo / thank you, I already tried this one, syntax is so much better
[21:30:06] <Gintru> FromDiscord / logo / thank you, I already tried this one, syntax is so much better
[21:30:12] <nrds> <06Prestige99> The indentation in mandatory to the languge, so I think that'd be hard to pull off
[21:30:21] <nrds> <06Prestige99> is mandatory*
[21:31:14] <Gintru> nrds / Prestige I read the doc and saw in Nim Forum, and tried funny thing :
[21:32:04] <Gintru> nrds / Prestige / it is possible to use parenthesis and semicolon ( cmd ; other line )
[21:33:01] <Gintru> nrds / Prestige / I tried Â«( all_my_code )Â» unsuccessfully
[21:33:08] <nrds> <06Prestige99> Hm yes but it's probably a lot more trouble than it's worth
[21:33:28] <Gintru> nrds / Prestige / but I can do a lot more
[21:34:13] <Gintru> nrds / Prestige / "more trouble", yes, that's why I look for a pragma
[21:35:01] * Gintru thinking into himself, it can't be impossible
[21:35:36] <nrds> <06Prestige99> I doubt it's impossible but it probably doesn't exist (yet), and would be a big pain to make
[21:36:07] <Gintru> nrds / Prestige / I won't bother you further, fanx a lot
[21:36:21] <nrds> <06Prestige99> any time
[21:36:55] <Gintru> nrds / Prestige I will ask Musk to keep a moon ticket for you
[21:37:15] <Gintru> [or si it Bezos or Virgin
[21:37:44] <Gintru> Bye / OuTâ€¯O o .
[21:39:57] * Gintru slaps /me around a bit with a large trout
[21:40:15] <Gintru> [I yeees I love that
[21:40:39] *** Quits: Gintru (~Guest9@2a01:e0a:3f4:9630:57c6:4196:d9f:6edd) (Quit: Gintru)
[21:52:28] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[21:57:59] <FromDiscord> <Rika> In reply to @Zoom "I'm considering it, but": Zoom chronos is a drop in for async dispatch so there isnâ€™t much of a difference
[22:07:55] <FromDiscord> <enthus1ast> [faix](https://matrix.to/#/@faix:matrix.org)\: ðŸ‘Œ
[23:06:32] <NimEventer> New thread by JohnAD: (2021 November) Most common or active 2D game framework?, see https://forum.nim-lang.org/t/8619
[23:18:26] *** Joins: Guest22 (~Guest22@p200300c37f336200808f4e87d16b0b54.dip0.t-ipconnect.de)
[23:19:31] *** Quits: Guest22 (~Guest22@p200300c37f336200808f4e87d16b0b54.dip0.t-ipconnect.de) (Client Quit)
