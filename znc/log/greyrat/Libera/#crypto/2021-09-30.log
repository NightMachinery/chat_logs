[00:02:26] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[00:13:50] *** Quits: BadKarma (~BadKarma@user/badkarma) (Quit: SIGTERM)
[00:16:48] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[00:18:01] *** Quits: mei (~mei@user/mei) (Quit: mei)
[00:22:16] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:25:37] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 265 seconds)
[00:26:29] *** Joins: linear_cannon (~linear@50.35.78.163)
[00:43:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:44:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[00:45:07] *** Lord_of_Life_ is now known as Lord_of_Life
[00:47:51] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 265 seconds)
[00:49:56] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[00:55:27] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Quit: JollyRoger)
[00:58:52] *** Quits: shariashaman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[01:01:07] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[01:03:06] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[01:14:09] *** Joins: Torr (~Torr@user/torr)
[01:28:20] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[01:30:23] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[01:31:00] *** Joins: SomeWeirdAnon (~shwn@2a02:8109:abf:ffb4:d9ce:ad1c:71e6:9e55)
[01:32:02] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:33:07] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[01:33:42] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[01:35:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:35:18] *** Joins: monopuff5 (~Mr@102.129.153.187)
[01:37:46] *** Quits: monopuff (~Mr@143.244.34.17) (Ping timeout: 252 seconds)
[01:37:46] *** monopuff5 is now known as monopuff
[01:44:46] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[01:46:08] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[01:47:30] *** Joins: somlis (~somlis@user/somlis)
[01:48:16] *** Quits: zro (~zro@user/zro) (Ping timeout: 265 seconds)
[01:56:16] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Changing host)
[01:56:16] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[01:56:42] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[01:58:16] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[02:03:47] *** Joins: igemnace (~ian@user/igemnace)
[02:11:59] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[02:16:29] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:23:00] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:31:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:39:03] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[02:40:33] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:41:53] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[02:43:42] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[02:44:41] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[02:46:08] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 246 seconds)
[02:48:05] *** Joins: Wulf (~Wulf@user/wulf)
[02:48:28] *** Joins: igemnace (~ian@user/igemnace)
[02:51:00] *** Joins: Torr (~Torr@user/torr)
[02:56:46] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[02:59:25] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[02:59:47] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[03:08:04] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[03:24:58] *** Joins: bugweiser (~tc@user/denofre)
[03:28:59] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[03:31:47] *** Joins: shariashaman (~Rheanna@101.91.197.175)
[03:32:11] *** Quits: imi (~imi@catv-80-98-11-3.catv.broadband.hu) (Ping timeout: 265 seconds)
[03:32:35] <bugweiser> hi all, i forgot... suppose an encryption (for argument sake xoring data with output of an rgn) wants/needs some mechanics to detect it decrypted correctly (or almost the same, that the message is the message that was intended to be sent), what were the rules of adding that?
[03:33:16] <bugweiser> suppose one would use some hash of the message, would it hash the cleartext input or the encrypted input ?
[03:33:53] <Alipha> bugweiser: you do a keyed hash of the ciphertext
[03:34:44] <sarnold> it's best to use an authenticated mode of encryption, like aes-gcm or chacha20+poly1305 etc  
[03:34:44] <Alipha> (ciphertext = "encrypted input")
[03:34:48] <bugweiser> i'll google keyed heash, that we feed it the ciphertext was what I was suspecting not to leak to much data.
[03:35:54] <rk4> re one way transformation for correlation, hmac has pretty good software support but is perhaps too cheap, argon2 has a key parameter so could i believe be a better keyed hash function in my case, but annoyingly most implementations don't seem to present key as a parameter. though i think i might be able to append len(key) and key to the salt and get something that matches the standard...maybe
[03:36:18] <Alipha> bugweiser: And indeed, use an authenticated encryption algorithm as sarnold suggested because it's very easy to mess these things up when composing together encryption primitives yourself.
[03:38:04] <bugweiser> well, to be honest, at the moment I just want something temporary and *very* simple (but not tooo simple). Incidentally I didn't even start out wanting encryption, it just kinda came as a side effect of me pondering if I couldn't use the message i'd want to send as an additional source of entropy/randomness.
[03:38:28] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 265 seconds)
[03:38:35] <Alipha> rk4: use argon2 in "key derivation mode" instead of "password storage mode" and have the salt be the key. (and don't store the salt with the result).
[03:38:51] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Quit: Leaving)
[03:38:52] <bugweiser> I'd be happy to outline what i'm curently doing, but it's mostly a smaller scale of some stuff that already exist (and I forgot some of the remaining 'rules')
[03:39:03] <Alipha> rk4: and you don't want any part of the salt to be random because then you won't be able to correlate
[03:39:18] * rk4 nods
[03:39:56] <Alipha> bugweiser: simplest way would be to just use a crypto library such as libsodium
[03:40:15] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[03:40:45] <rk4> there's no real difference between the salt or the key in argon2 is there? since they're all concatenated together anyway and passed to blake2
[03:40:50] <Alipha> bugweiser: first example on this page: https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox
[03:41:10] <bugweiser> yes, that one was already recommended. but I wanna be stupid for now and upgrade later :)
[03:42:03] <Alipha> bugweiser: you mean, you want to be hackable for now and then never upgrade? heh
[03:42:25] <Alipha> "I'll do it later" means never, heh
[03:42:52] <bugweiser> so before I make a complete ninconpoop of myself... :)  the schemes that roughly work as described, take the hash of cyphertext, I then append that hash and encrypt these same bytes under the running rng xor output?
[03:42:52] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[03:43:59] <Alipha> Also, if you already have a hash function, doesn't that mean you already have a crypto library?
[03:44:02] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[03:44:03] <bugweiser> well, who knows, perhaps my silly thing is enough :)  Or I bump it somewhat. Or just spend big time on it and get it right. 
[03:44:44] <bugweiser> Alipha, actually anything that signals succesfull decoding is sufficient! But then i'd need to clarify my usage and simple scheme
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:44:48] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[03:45:01] <bugweiser> (I will if you want, even would like to).
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:46:03] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[03:46:26] <Alipha> bugweiser: And no, "encrypting the hash" isn't what a "keyed hash" is, and what you described is not secure
[03:46:34] *** Joins: bbbbbb (~peppbel@191.96.106.198)
[03:47:54] <bugweiser> Alipha, sorry, I didn't mean to imply/confuse keyed hash with encrypting the hash. At the moment I assume a keyed hash is a hashing method that at some point gives me an n-bit output.
[03:48:45] <bugweiser> I was referring to if I should append that output to the data raw or under the 'running' encryption (being rougly equivalent to xoring input with output of rng)
[03:48:51] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 245 seconds)
[03:49:03] <Alipha> And if you're not going to do it right, then you might as well not do it at all, since the only thing using a homebrewed encryption scheme does is give you a false sense of security.
[03:49:14] <bugweiser> I just recall there were 2 rules, one of which you helped me remember :)
[03:49:36] <Alipha> The hash output does not need to be encrypted, and really shouldn't, actually
[03:50:07] <Alipha> Because then you will probably run into the "cryptographic doom principle"
[03:50:22] <bugweiser> wouldn't that allow tinkering with the hash value appended to the encrypted stream?
[03:52:36] <Alipha> bugweiser: no, encrypting, especially with a stream cipher (xoring with an rng, as you described), does nothing to prevent tinkering
[03:53:48] <Alipha> bugweiser: what does prevent tinkering of the hash value is to use a keyed hash. A keyed hash is a hash where a key is used as part of the hashing process. Without knowing the key, it's impossible to change the hash value in any meaningful way
[03:54:09] <Alipha> Because you need the key in order to compute the hash value
[03:54:21] <bugweiser> ok, clear !
[03:54:52] <bugweiser> thanks for the answer to my question!
[03:55:15] <Alipha> If you want a simple keyed hash, you can use an HMAC. It's trivial to write, assuming you already have a hash function
[03:55:57] <bugweiser> I guess I should now explain what i was trying to do and how that got accidentally turned into an weak 'encryption'..
[03:56:45] <bugweiser> I'm working on an irc bot and out of the possible ways to control it, i wanted to use simple messaging over irc. 
[03:57:00] <bugweiser> there are potentially 'men in the middle' being the irc ops
[03:57:39] <bugweiser> initially I figured to just query the bot, have it send some number, me doing a computation on it, send answer back + command (optional acknowledgement of bot).
[03:57:53] <bugweiser> skipping long story short, that turned out into:
[03:58:03] <bugweiser> me request 'challenge' from bot
[03:58:25] <bugweiser> bot sending challenge, being a random 32 bit number (in whatever stringification radix).
[03:58:44] <bugweiser> the bot would also have the password 'stretched' to 32 bit.
[03:59:22] <bugweiser> we take the 'challenge' (c) and use it to permutate the password (p) giving 'pc' (a 32 bit number).
[04:00:20] <Alipha> So you're just looking for something "your grandma couldn't break"
[04:00:40] <bugweiser> this pc is then the seed for a simple LCG (the one from numerical recipies, which fits in a double float). Additionally, 
[04:01:17] <bugweiser> we permute the challenge according to the pc (seed), and make darn sure we add 1 to make it odd if needed.
[04:01:27] <bugweiser> this will become the increment in the lcg
[04:01:40] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[04:02:39] <bugweiser> then instead of xor, i'm using modular addition. I take the top 14 bits of the lcg output, MULTIPLY that by 95 and use flooring divide (instead of just mod95).
[04:03:08] <bugweiser> these become the printable output characters of the cypher stream.
[04:03:37] <bugweiser> basically thats it. It can only accept printable ascii, and returns printable ascii. 
[04:04:14] <bugweiser> the idea here is somewhat that we never use it to 'encrypt' large amounts of text/data. 
[04:04:52] <bugweiser> It doesn't seem I'd really need a very long period in the rng.
[04:05:20] <bugweiser> additional 'security' would come from severe rate-limiting by the bot.
[04:07:28] <Alipha> I think the people in this channel would have fun trying to break this ;-)
[04:07:31] <bugweiser> I choose to use the 14 most significant bits as that appears to give me the lowest bias when doing the multiply+floored division into 95 buckets.
[04:07:58] <bugweiser> thats fine, obviously ive been thinking about that myself :)
[04:08:23] <Alipha> I mean, a LCG is pretty easy to break
[04:09:04] <bugweiser> yes, but you just get a small sample of its output, you wouldn't know the seed (it appears) nor its addant (commonly called 'c' I think)
[04:09:28] <bugweiser> and for the next challenge, even if I encode the same command you would have a completely different output.
[04:09:41] <bugweiser> I did kinda think about it :)
[04:10:11] <bugweiser> and the 'attack' vector is basically just the irc ops
[04:11:02] <bugweiser> and as I noted, no problem to seriously upgrade some control mechanics in the future. now its just in the way so to say.
[04:11:30] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[04:11:36] <bugweiser> Also, good libraries is one thing, using them correctly is another :)
[04:12:17] <bugweiser> I'm open to different methods, if they are simple to code *for the time being*
[04:12:25] <ms7821> augghhh
[04:12:30] <Alipha> RC4 is just slightly more code and would be much more secure. Not sure what to do about a simple hash function though
[04:12:44] <ms7821> I'm gonna pretend I read none of this
[04:12:48] <Alipha> Lol
[04:12:51] <bugweiser> lol
[04:13:24] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[04:14:15] *** Joins: kish` (~aqua@user/aqua)
[04:14:28] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[04:14:47] *** Joins: kish` (~aqua@user/aqua)
[04:15:43] <bugweiser> a hash might not be needed. anything that can detect succesful decoding without leaking to much info is good enough. 
[04:18:52] <sarnold> bugweiser: so, what prevents someone from copy-pasting your control messages?
[04:18:58] *** Quits: shariashaman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[04:19:56] <Alipha> Well, if we're going with "non-military grade crypto", might as well use CRC64 or something
[04:19:56] <bugweiser> and do what exactly ? the few men in the middle would see me requesting a challenge, receiving a number and me responding with a seemingly random ascii string.
[04:20:11] <bugweiser> sarnold ^
[04:20:25] <Alipha> bugweiser: And what if that repeat that same message you sent later?
[04:21:03] <bugweiser> no problem, got that covered, the server knows the password and the last challenge it sent (and when)
[04:21:11] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[04:22:03] <bugweiser> so, the attacker would have to wait until the bot sent out a challenge identical to one previously sent. And only then could replay the message (containing the command) i sent in response back then.
[04:22:25] <Alipha> What if there's a netsplit or something and your "last challenge" and the bot's "last challenge" got out of sync?
[04:23:08] <bugweiser> I can request a new challenge after a certain time-out, the bot stored challenge + time for the nick requesting
[04:23:53] *** Quits: SomeWeirdAnon (~shwn@2a02:8109:abf:ffb4:d9ce:ad1c:71e6:9e55) ()
[04:23:59] <bugweiser> and there are limited slots and a backlog of people who sent incorrect messages upon challenges, their penalty time increases. As I said severe rate limiting :)
[04:25:34] <ericonr> you can use slightly better crypto and avoid keeping so much state :P
[04:26:42] <bugweiser> :) at least I *did* have these cases covered, not like I just had to come up with an answer :)
[04:27:16] <bugweiser> there wouldn't be much state to cover :)
[04:27:36] <bugweiser> but, please do outline what you have in mind!
[04:29:50] <Alipha> crypto_secretbox_easy with an incrementing nonce ;-)
[04:31:40] <bugweiser> I guess I google that :)
[04:32:12] <ericonr> speaking of nonces and what not
[04:32:49] <ericonr> do I need to read the chacha20poly1305 paper to understand why poly1305 needs to be a big num impl instead of a hash and whatever?
[04:33:24] <ericonr> worded differently, why aren't MACs just H(key||data) where H is whatever cryptographic hash :P
[04:35:28] <rk4> read the HMAC wikipedia page for some reasons
[04:41:55] <bugweiser> can i ask, is one of my basic assumptions here correct: since we never sample more than 100 values of the full period LCG (mod 2^32) seeded with unknown seed and unknown odd increment value that we don't really need a long period out of our rng ?
[04:47:03] <bugweiser> (actually 100 would be a lot for some commands..)
[04:48:35] <ericonr> rk4: thx. Do you know the part about poly1305?
[04:49:07] <ericonr> And apparently SHA3 can be used as a HMAC directly, though it doesn't seem to have been standardized, at least
[04:49:11] <rk4> poly1305 is a bit after my time, i do not know anything about it.
[04:49:30] <rk4> iirc there's KMAC at least
[04:51:34] <ericonr> Aaah, poly1305 *isn't* an HMAC
[04:51:53] <ericonr> It's a one time authenticator, which is a different brand of thing
[04:59:12] <ms7821> it's like hmac but with multiplication instead of concatenation/hashing
[04:59:52] <ms7821> I'm not massively sure off the top of my head but I don't think in practice it's different to an hmac, though maybe in theory
[05:01:46] *** Quits: imi (~imi@catv-80-98-11-3.catv.broadband.hu) (Ping timeout: 245 seconds)
[05:08:52] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[05:11:25] <bugweiser> did I phrase my question to poorly ?
[05:11:33] *** Joins: shariashaman (~Rheanna@101.91.197.175)
[05:14:00] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-49f9-d8e9-21a2-a096.res6.spectrum.com) (Quit: jarthur)
[05:14:50] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[05:21:51] <rk4> bugweiser: i read it, thought it looked fine, but didn't comment because i wasn't aware of the use case for the prng which dictates whether it's fine or not (you might have mentioned it, i haven't been following the convo)
[05:23:52] <bugweiser> usecase is authenticating (and accidentally in the process 'encrypting') short commands to an irc bot over irc.
[05:25:51] <rk4> ok, this sounds suspect then.
[05:26:14] * rk4 reads up in history
[05:26:30] <bugweiser> what do you mean by that ?
[05:28:08] <rk4> if you're coding all this anyway, i'm not sure why you're going down the likely to be trivially broken route
[05:28:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[05:28:48] <Alipha> Because installing libsodium is too difficult ;-)
[05:30:43] <bugweiser> couse I currently kinda don't want to improt a big jumbojet transpiled (likely using emscripten) to javascript (and learn to use it) right now. It's not intended to be a final solution anyway (unless *perhaps* it's sufficiently good for it's usecase).
[05:30:59] <bugweiser> s/improt/import/
[05:31:21] <rk4> i see, what primitives do you have easily available? sha2?
[05:32:00] <bugweiser> and when upgrading the solution i'd still need some method and then apply it correctly using preferably only the building blocks i need for that solution (instead of importing the entire thing into node).
[05:33:19] <bugweiser> rk4, none. bare javascript (and assuming no builtin crypto support) for this *intermediate* dirty solution which surely is better then pretending base64 is any kind of security at all.
[05:33:56] * rk4 wonders if this is a chance to use the questionable speck cipher :D
[05:34:01] *** Quits: imi (~imi@catv-80-98-11-3.catv.broadband.hu) (Quit: Leaving)
[05:34:37] <bugweiser> speck cipher, I will google that!
[05:35:09] <sarnold> mmm bacon
[05:37:08] <rk4> i think answering your LCG question requires people to comment on a dubious construction, which while you intend it to make your life easier makes it more work to answer, than say, doing something mainstream
[05:39:47] <bugweiser> well, in a way isn't there some additional security (initially) due to that? Requiring more work and insight into figuring out how to crack it ? how dubious is it really?
[05:40:34] <Alipha> rk4: I almost used "triple speck" at my job because I wanted a 32-bit permutation
[05:40:35] <rk4> yeah, sure, but this is #crypto, not #obscure_encoding
[05:40:45] <bugweiser> strike that, specifically dubious, couse obviously its dubious :) how much to simple to crack/attack is it?
[05:42:09] * rk4 departs for lunch
[05:42:38] <bugweiser> enjoy your meal thanks for helping!
[05:43:21] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[05:44:47] <ms7821> hmm, you're talking about a pure JS environment without even crypto. How are you creating random numbers then?
[05:45:12] <ms7821> is uuid available?
[05:45:43] <ms7821> Math?
[05:45:48] <Alipha> I believe you can just download nacl.js here and you're good to go with strong crypto: https://github.com/dchest/tweetnacl-js
[05:45:52] <bugweiser> the server/bot will sample /dev/random or just use built in Math.random() on startup.
[05:46:17] <ms7821> oh you have FS access?
[05:46:27] <bugweiser> all next challenges will be done by Math.random()*2**32^startup_random
[05:46:39] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[05:46:40] <ms7821> Math.random is emphatically not secure
[05:46:48] <bugweiser> this is to theoretically twart sampling sequential Math.random() outputs.
[05:47:30] <ms7821> if you have FS access, why not use that as an IPC to talk to an auth app
[05:47:36] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[05:47:38] <bugweiser> I know, hence the additional xor. Not super, but will twart initial sampling off of Math.random (and cheap to do couse I needed to floor it anyway, so xor is free here)
[05:48:16] <bugweiser> that would be one of the methods. I currently just wanted to explore messaging the bot over irc.
[05:48:50] <ms7821> and you've got no hash functions?
[05:49:31] <bugweiser> I could use some common 'finalizers' 3 stage multiply xor or shif xor.
[05:50:18] <ms7821> maybe https://en.wikipedia.org/wiki/Hash_chain could help then
[05:50:23] <bugweiser> I could code up whatever I wanted, just want to keep it 'simple' and small. 
[05:50:35] <ms7821> or a pure JS TOTP implementation
[05:50:51] <ms7821> well your constraints are far from simple
[05:52:26] <bugweiser> that's where I'm in doubt :)
[05:53:34] <bugweiser> a somewhat good method which is 'to small' and being its main pitfall for general use of properly securing large amounts of data, might in this case be sufficient as it never ever is supposed to secure much data.
[05:54:31] <ms7821> I dunno maybe you should just stop worrying and learn to love require()
[05:54:36] <bugweiser> ie, a sufficient method that only fails due to having a to small period for general use would in this case perhaps just suffice.
[05:55:09] <bugweiser> lol :) already gotta require to get access to sockets etc. not that much problem :)
[05:56:36] *** Quits: rtypo (~alex@user/rtypo) (Quit: WeeChat 3.2.1)
[05:57:12] <bugweiser> anywho, that's the basic premise of this theoretical question: do we really need a much bigger (then 32 bits) full period rng (other than that statistically sufficiently good) if we only use very small runs of samples from it ? 
[05:57:54] <ms7821> depends on your rng but you should assume you leak a bit of internal state with each bit of output
[05:58:03] <bugweiser> if it matters, i currently use the 14 most significant bits * 95 floored_division by 2**14
[05:58:40] <ms7821> if your rng has only 32 bits internal state it's gonna leak pretty much immediately
[05:59:06] <ms7821> (sat solvers are good)
[05:59:06] *** Quits: shariashaman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[05:59:37] *** Joins: rtypo (~alex@user/rtypo)
[05:59:38] <bugweiser> yes, I did assume that, hence the multiply / floor div instead of just mod95. and just the topmost 14 bits.
[06:00:16] <bugweiser> yeah, in the pas I was able to synch to the ancient java rng after knowing 2 sequential full samples.
[06:00:29] <bugweiser> s/pas/past/
[06:00:44] <bugweiser> that was the same rng that firefox *used* to use.
[06:02:01] <ms7821> that might mean an attacker requires 3 samples, or it might mean they don't need to know the full state to predict the next few values
[06:02:26] <ms7821> or it might mean they need a few more than 3 (but likely not many)
[06:02:28] <bugweiser> but i'd find that more challenging to do if I only had the 14 most significant bits sorted into 95 buckets (by multiply floor_div instead of just mod 95)
[06:02:49] <ms7821> why are you focusing on this so much?
[06:02:59] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:03:41] <ms7821> the precise implementation of a weak rng isn't going to save it
[06:03:44] <bugweiser> healthy curiosity i guess :)
[06:03:49] <ms7821> ahh fair
[06:05:27] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[06:05:36] <ms7821> I do remember when these were trade-offs we had to make, but these days I'd definitely bootstrap something easy to reason about
[06:06:02] <ms7821> code always hangs around longer than expected
[06:06:44] <as2334> what do you guys think of this?
[06:06:45] <as2334> https://newatlas.com/quantum-computing/quantum-computing-desktop-room-temperature/
[06:06:46] <bugweiser> :)
[06:10:38] <Alipha> If there's only 32 bits of internal state, then an attacker just tries all possible 2^32 states until they hit a decrypted message that makes sense
[06:11:13] <Alipha> Probably takes just a couple minutes
[06:12:59] <bugweiser> absolutely true, I did kinda have that in the back of my mind that a 'succesfull decoded' thing would simplify attacking it.
[06:13:49] <Alipha> You can still easily tell if you hit the right key even without an authentication code
[06:14:37] <bugweiser> I guess couse it would score high on a linguistic n-gram probability test?
[06:14:55] <Alipha> Indeed
[06:15:17] * Alipha has an idea of how to make a MAC out of any symmetric cipher. Perhaps he'll implement it tomorrow
[06:19:13] <bugweiser> wouldn't there be a lot of possible solutions that would score equally high?
[06:23:17] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[06:25:55] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.2.1)
[06:26:25] <Alipha> No. Assuming your message is longer than like 10 characters. The trial plaintexts will look like random garbage except for when the correct key is used. Now, if the message is short enough, you may get several candidates which "score high". In which case, I'd just print out all the high-scoring possibilities and manually determine which one looks correct
[06:27:30] *** Joins: jtgd (~jtgd@user/jtgd)
[06:27:39] <Alipha> Of course, if your message is 3 characters, then there's more possible keys than messages, and so every possible message is a candidate, so, indeed, that's not decryptable (ie, you effectively have a "one time pad")
[06:27:54] <bugweiser> indeed :( and if there's multipele matching potential 'password' numbers, just filter through them upon getting the next challenge + response 
[06:34:37] * bugweiser brain crunching.. how did they arrive at 3 char
[06:38:18] *** Quits: Torr (~Torr@user/torr) ()
[06:38:27] *** Joins: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[06:39:42] <Alipha> 32-bit state would be 4+ characters worth of state
[06:40:00] <Alipha> (at 8 bits a character)
[06:40:24] <bugweiser> ok, got it. the remaining reasonable options would still have way to many possible 'pass' numbers. 
[06:41:34] <bugweiser> yep. i've been previously thinking about that. That idially in this line of thought we'd need a lot of potential candidates in a pool of even much more non-candidates.
[06:42:43] <bugweiser> and then only the first brute force round would be the heaviest, subsequent rounds on new matches just narrow down the initial list. Correct?
[06:45:13] <bugweiser> and additionally, the potential attacker can use whatever computing power and speed they want, they have the challenge number and the resulting response. Nothing is limiting it's speed there.
[06:45:47] <bugweiser> so, this is where i'm supposed to go 'crap this is hard' and you all laugh. :)
[06:47:25] *** Quits: terminaldweller (~devi@ip137.ip-145-239-165.eu) (Ping timeout: 252 seconds)
[06:47:49] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Quit: JollyRoger)
[06:48:54] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[06:49:17] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[06:49:31] <rk4> from your own speck implementation...you could make a hash function or a MAC function, as well as a much better (than LCGs) PRNG
[06:50:56] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[06:55:47] *** Quits: terminaldweller (~devi@ip137.ip-145-239-165.eu) (Ping timeout: 252 seconds)
[06:57:38] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[07:01:39] <bugweiser> Alipha, to twarth that particular attack, wouldn't one then need an internal state so big that even just flagging potential starting-states (from the intended collisions) would require more ram and diskspace that would commonly affordable?
[07:02:43] <bugweiser> rk4, i'm listening (after all, it's back to the proverbial drawing board), what would roughly be the basic steps which that would require?
[07:06:53] <Alipha> bugweiser: since apparently you love LCGs, you just need one that has a 128-bit internal state.
[07:10:49] <bugweiser> well, if the idea boils down to having a very low chance of guessing the correct 'password' while the remaning number of potentially correct 'password' (number/state) is still dauntingly high, wouldn't one then need a far more bigger state?
[07:15:45] <bugweiser> well, i just know some lcg properties. anything else not to hard/complicated and big would also suffice. 
[07:18:00] <bugweiser> I had been looking at acorn last night. but fortran is'nt that easy for me to parse, and some js and c implementations on github were amazingly big
[07:21:32] <Hash> Hola
[07:21:43] <Hash> The class began then, ECES cert after
[07:21:49] <Hash> Introduction to Cryptography
[07:22:54] <bugweiser> hi, sorry for probably unintentionally pinging you this often ;)
[07:25:34] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[07:26:55] *** Joins: norskalm (~norskalm@101.175.64.73)
[07:29:02] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com)
[07:29:17] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 246 seconds)
[07:30:45] <rk4> bugweiser: https://en.wikipedia.org/wiki/Cryptographically-secure_pseudorandom_number_generator#Designs_based_on_cryptographic_primitives / https://en.wikipedia.org/wiki/One-key_MAC - there's no doubt more, maybe do a bit of a survey of the techniques available
[07:33:53] <Alipha> bugweiser: it's exponential growth. A 128-bit state means 2^128 possible states. Trying every one of the 2^128 states would take billions of years
[07:33:57] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Remote host closed the connection)
[07:34:10] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[07:35:50] <ms7821> brute forcing isn't the only way to get internal state from output though
[07:38:56] <bugweiser> for non important stuff I often use the numerical recipies lcg, reason is that it is still a full period 32 bit lcg, but its entire computation fits in 53 bits, hence I don't need to rip it apart and do a partial long-tail multiplication. That makes it for such usage a nice candidate, and i know it's running on 2 planes or 'circular tracks'. And it allows one to safely change the addant constant as long as it is odd (hence coprime to the modulus
[07:38:57] <bugweiser> ). So me knowing it and being fast and trivial in double float is the only reason I just grabbed for that rng on my first attempt :)
[07:38:57] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[07:41:06] <bugweiser> Alipha, ist 2^128 still out of reach for multiple bitcoin miners running a cuda implementation of the scheme, starting at different offsets in the state-range ?
[07:41:59] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[07:42:32] <bugweiser> ms7821, wouldn't that depend on how much you can learn about every sequential state in the output?
[08:03:11] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[08:04:24] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[08:05:59] <ericonr> bugweiser: yes
[08:06:10] <ericonr> Re. 128 bits being safe
[08:06:51] <bugweiser> ok. clear.
[08:07:31] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[08:08:03] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[08:08:12] <bugweiser> thanks all for making me understand where I went wrong, not being the short period perse but more the size of the state to bute-force over.
[08:12:24] <bugweiser> what about something in the order of 104 to 106 bits ? (cheaper to compute) otherwise i'll be automatically around the 155 bits , that is, if the rng is easy to tailor. 
[08:13:59] <bugweiser> any recomendations for rngs that are good enough versus how hard they are to code without libraries? Not needing prime number generators and big number prime checkers etc ?
[08:16:35] *** Quits: sol (~toor@oops.root.sx) (Ping timeout: 260 seconds)
[08:17:56] *** Joins: sol (~toor@oops.root.sx)
[08:28:07] <ericonr> chacha20?
[08:28:11] <ericonr> or well
[08:28:17] <ericonr> a JS library? :P
[08:28:39] <ericonr> that's the best bet imo
[08:29:14] <ericonr> https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues there we go
[08:29:15] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[08:31:52] *** Joins: shariashaman (~Rheanna@101.91.197.175)
[08:46:46] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 245 seconds)
[08:56:11] <maroon> if the challenge includes a time value that the other party inspects, you limit the window for someone to do a reply attack, except when time repeats
[09:04:29] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[09:08:39] <bugweiser> maroon, in my simple scheme I intentionally didn't use a time-value (as that has given me much headaches in the past).
[09:09:29] <maroon> shouldnt be a problem, you can allow for both clocks to be off by half an hour, and today's challenge won't help them tomorrow
[09:09:52] <bugweiser> I don't want to use web api crypto (for now)
[09:10:25] <maroon> nothing crypto about using CTIME number, should be close together for everyone, regardless of timezone or if on daylight time
[09:11:09] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:11:31] <bugweiser> I don't quite see how commands couldn't be replayed within that half hour.
[09:11:52] <maroon> they can - i said limit the window
[09:12:31] <maroon> or the challenger can keep track of an integer, and not accept something <= LAST_USED
[09:12:43] <maroon> a counter++
[09:13:43] <bugweiser> I figured to just send a random value and incorporate that in the response_command 
[09:14:22] <bugweiser> unless i'd want to be able to send commands out of the blue without requesting some challenge first.
[09:14:39] <maroon> how do you plan to keep mallory from repeating yesterday's handshake?
[09:15:19] <maroon> or waiting until the random dice rolls the same number again
[09:16:00] <bugweiser> the latter would be the only option, they could only repeat a known response (containing an unknown command) once the same challenge re-appears.
[09:16:43] *** Andrew_ is now known as Andrew
[09:16:45] <bugweiser> that could take a long time, and that (unlike the brute force and filter attack) I *can* limit in rate, relatively cheaply
[09:16:50] <maroon> or if this is over irc you say, include both party's addresses in the string being hashed
[09:17:38] <maroon> that way 2 people can use the same random number would need different answers
[09:19:48] <maroon> though depends if irc bot needs to defend against an admin who could theoretically fake their nick/address
[09:20:13] <bugweiser> yes it does, that was covered in my silly attempt
[09:22:10] <bugweiser> actually that is the entire attack vector, a malicious operator or someone sufficiently having backdored the server
[09:22:36] <bugweiser> other users might figure out how to query for a challenge, but they'd never see responses
[09:23:13] <bugweiser> technically, non tls connection could also leak. 
[09:24:20] <bugweiser> but lets assume tls, then rougue op or compromized server appears the only thing i'm trying to make more difficult 
[09:24:47] <bugweiser> so no login logout function (and just accept commands in the mean time).
[09:25:49] <bugweiser> and it's nice if they can't simply read the commands, but that wasn't the prime goal. 
[09:26:30] <maroon> you'd also need to share some kind of password or certificate out-of-band
[09:26:38] <bugweiser> originally I wanted to just have the command add to the enthropy.
[09:28:11] <bugweiser> the bot would need to know some number that serves as password. Multi-user would be possible, they'd share the same password.  The initial goal was something simple while devving and if need be upgrade later.
[09:28:16] <maroon> without a crypto api, do you have access to any kind of encryption?
[09:28:51] *** Joins: qbt (~edun@user/edun)
[09:29:05] <bugweiser> yes, if I code it or find a suitable small simple thing (though it would help if I could sufficiently understand it).
[09:29:09] <maroon> or hash like HMAC?
[09:29:19] <bugweiser> not if i code it.
[09:29:25] <bugweiser> sorry if I don't code it
[09:29:47] <maroon> do you have access to a normal hash function like sha1 sha256 etc?
[09:30:09] <maroon> even md5 isnt a complete fail if it's used inside hmac
[09:30:57] <bugweiser> and the hash *might* not be needed, any method that perhaps takes final state into account and performs some operation on it that can be verified to signal succesfull decoding (which seems it implies also correctness of message) seems to suffice
[09:31:25] <bugweiser> again, not if I don't code it. :)
[09:31:33] <maroon> crc32 would do that, but it doesnt defend against malicious - that's why you want a keyed hash like hmac
[09:32:04] <maroon> which language, i'm sure there are plenty of simple codes for sha256 lying around
[09:32:10] <bugweiser> what about no hash? as I tried to describe above ?
[09:32:52] <maroon> you need a reliable way of using a key to authenticate that the message received is the same as the message sent
[09:33:13] <maroon> so you need some authentication that could have only been done by someone who knows a shared key of some kind
[09:33:30] <bugweiser> language js, so plenty of existing stuff (how good they are and do their very best to be as light to the engine as possible regardless of how much dev time that costs would be searching quite long)
[09:33:41] <bugweiser> maroon, yes
[09:34:25] <bugweiser> the 'encryption' just sneeked in there as it appeared I'd get it almost for free if I just took the actual message into account in doing the challence response math.
[09:34:41] <bugweiser> the thing that gave me auth for the commands.
[09:35:20] <maroon> googling for that, i see hits using cryptojs instead of rolling their own
[09:37:01] <maroon> here's someone coding sha1 in javascript, shouldnt be much different to do sha256 instead https://coursesweb.net/javascript/sha1-encrypt-data_cs
[09:38:17] <maroon> sha256 and sha512 are very similar, with the major difference being the use of 32 or 64 bit variables
[09:38:57] <bugweiser> what would I (conceptually) do with it?
[09:39:01] <maroon> once you have sha256, hmac is easy to wrap around that
[09:39:14] <bugweiser> hmac was on my reading list
[09:39:36] <maroon> then you can do hmac( data=request from bot , key=secret)
[09:39:40] <yawkat> ~~~ dont roll your own crypto ~~~
[09:40:09] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (Quit: Good day old chaps)
[09:41:01] <bugweiser> yawkat, lol, I know (though this is'nt protecting war-heads :) at all :) )   clearly i'm also prospecting for method/approach
[09:41:03] <maroon> well he doesnt want to use any crypto libraries
[09:41:20] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 252 seconds)
[09:42:13] <bugweiser> if the method/approach is good enough, I can always upgrade it's building blocks.
[09:42:29] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[09:42:40] <bugweiser> or know exaxtly what lib to search for that ONLY implements what I need
[09:43:16] <snappy> `i have no idea what you're asking for, but if you're doing crypto in js - then tweetnacl-js is what you want
[09:44:48] *** Joins: lord| (~lordpipe@user/lordpipe)
[09:49:27] <bugweiser> crypto is a broad term :) I'm trying to do something in particular, so with building blocks and no method there is no result :)
[09:51:03] <bugweiser> how is it better than libsodium by the way? Was it handwritten instead of (likely) generated/transpiled from c into js using emscripten etc. ? Is it indeed smaller faster and overall more light-weight to use over libsodium ?
[09:56:43] <snappy> tweetnacl(-js) probably has less features, but it's a small amount of code, so it's very auditible -- and i believe tweetnacl-js has been audited
[09:57:12] <snappy> also it implements the nacl api which has a few minor warts but eliminates virtually all crypto footguns
[09:59:10] <bugweiser> ok thanks for that extra info!    ...and it just occured to me that *just* doing something with the final state alone (and append that result to the message) isn't good enough, the purpose was not to gobble up random input. So turns out I do need some message integrity verification :)
[09:59:49] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Ping timeout: 265 seconds)
[10:00:15] <maroon> trust, but verify
[10:03:11] <bugweiser> <maroon> crc32 would do that  << what if I take crc32 (or perhaps adler32) from 'encrypted' output-stream, when done processing append that crc32 to the clear-text message and process 'encrypt' continuing the rng stream ?
[10:03:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[10:04:53] <maroon> those are for detecting transmission bit errors, they're no defense against malicious tampering
[10:06:50] <bugweiser> tampering with knowledge or tampering as in adding/removing/changing random bytes ?
[10:07:06] <yawkat> either
[10:07:42] <maroon> it's trivial to change a file's crc32 to anything you want, if you can either append 4 bytes or have 4 internal bytes you can change to anything: /ctcp maroon crc 12345678 deadbeef
[10:08:24] <yawkat> crcs are good at detecting very specific errors that tend to happen on physical connections. for cryptographic purposes, both their length and their construction are insufficient
[10:08:33] <bugweiser> what's the simplest we can do to defend somewhat againt the latter ?
[10:08:59] *** Quits: shariashaman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[10:09:34] <maroon> hmac, and if that's too long you can always shorten the hash, the 1st 32 bits of hmac-sha256 is much better than crc32
[10:10:49] <maroon> there's also HOTP with a 6 digit number, but that's truncating the SHA* hash down to like 20 bits
[10:10:53] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[10:12:08] <bugweiser> in both cases I'd still need to implement sha256
[10:13:28] <maroon> yes, im pretty sure i saw that coded in nacl.js
[10:13:41] <maroon> they have a 'fast' version that's not a direct port from c
[10:16:10] <bugweiser> ohh thats good to know! thats 'just' nacl.js (not tweetnacl.js)
[10:21:52] <maroon> looks like it's sha512 named as function crypto_hashblocks
[10:23:05] <rk4> "one day later, #crypto had convinced bugweiser to use...crypto..." :P
[10:23:51] <maroon> and now he's undocumentedfeatureweiser
[10:27:38] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[10:30:51] <bugweiser> lol
[10:31:41] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[10:32:30] <bugweiser> I'm still hoping to get around sha though.. 
[10:33:50] <bugweiser> and some crypto in the broad sense I already started with. Just that it was obviously to weak, weaker than I initially bargained for (and thanks again for helping me understand where my reasoning was off).
[10:35:10] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 252 seconds)
[10:36:36] *** Joins: lord| (~lordpipe@user/lordpipe)
[10:38:29] <rk4> this random version of keccak in js is one file, 600 lines, and MIT licensed, 
[10:38:36] <bugweiser> I'm currently thinking if I couldn't mix the hashing element and the rng element. The obvious first thought would be to add(sum) the current (encrypted) char to the state and then do something with the final state at the end.
[10:39:29] <rk4> odds are you're just making up obfuscation constructs, which is fine, but you don't need us for that
[10:40:01] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (Quit: Good day old chaps)
[10:40:59] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[10:43:08] * rk4 wonders what the simplest to implement crypto hash function is
[10:43:19] <bugweiser> clear. I really don't want to wear out your kind help !! 
[10:43:23] <wasamasa> md5 clearly, lol
[10:46:39] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[10:48:23] <bugweiser> some years ago I spent a month or so trying every approach I could think of to do md5 in js. After at least 140 versions (all working correctly) I still wasn't satisfied and gave up. They were still to big and doing to much work to my liking. Life continued. In that same era i also did a bunch of sha and chacha and keccak and a bunch of others I could find on wikipedia. They all were very big and not very elegant to translate to js. Even though 
[10:48:23] <bugweiser> a number of my versions could compete with other libraries I still found them to slow and to big. I just gave up and moved on to other things. That left a severe bad taste/memory
[10:49:20] <bugweiser> and they were far far far to complicated especially when starting to optimize, to just recreate from memory when in a pinch.
[10:51:24] *** Joins: BadKarma (~BadKarma@user/badkarma)
[10:51:48] <bugweiser> I was hoping to side step all that and come up with something simple and just good enough for the task and small attack vector at hand, something I could type up from scratch on a strange computer the client-side command encoder (or most importantly something to auth, no replay and ideally just hide command).
[10:53:02] <maroon> for crypto, one of the biggest hurdles is the problem where many of these ciphers and hashes are designed for big-endian byte order cpu's while intel is little-endian
[10:54:01] *** Joins: andreasbuhr (~quassel@p5dcf9230.dip0.t-ipconnect.de)
[10:54:01] *** Quits: andreasbuhr (~quassel@p5dcf9230.dip0.t-ipconnect.de) (Client Quit)
[10:59:40] *** Quits: shariashaman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[10:59:46] <bugweiser> js would have double precision as its one and only number format, exposing it as bigendian
[11:00:30] *** Quits: as2334 (~as2334@host193.181-1-131.telecom.net.ar) (Ping timeout: 260 seconds)
[11:01:26] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[11:01:51] <maroon> im not sure that applies, crypto is taking 2/4/8 bytes of data and casting it as int16/int32/int64
[11:03:20] <yawkat> double precision, double security!
[11:03:49] <bugweiser> lol yawkat
[11:04:41] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 245 seconds)
[11:06:10] <bugweiser> maroon, if I would write it myself (which was the idea) and chose some existing implementation or spec to mimic, i'd just have to do what needs to be done. 
[11:08:09] <maroon> i was just observing the most common hiccup in rolling your own, it can be tedious to byte-swap when reading, doing the math, then byteswap again to write the ciphertext back to disk
[11:11:07] <bugweiser> well, in rolling my own (or 're-inventing' some simle scheme), i'd be having an uint16 array as input, of which only 95 possible values will ever be possible (in other words, i get an ucs2 string and will never get non-printable non-ascii chars, not even an CR LF), that's where the mod95 came from
[11:11:59] <bugweiser> and to not need to do even a simple base64 encoder, i was planning to also just output mod95 +32  (so starting at space ending at del).
[11:12:40] <bugweiser> Hence I didn't xor but used modular additon for 'encrypting'  (to be reversed by modular subtraction)
[11:13:52] <bugweiser> (and I do have some mean fast and minute base64 libs of my own hand :)  but this current design would'nt need it. less waste of ram and cycles)
[11:15:35] <bugweiser> So I was intending on applying principles, not on bytes (mod 256) but printable ascii char (essentially just mod 95)
[11:16:27] <maroon> if you're going to try to encode as text, you might consider base94 encoding, because some people interacting with the bot won't know how to handle strings with leading/trailing/consecutive spaces...
[11:17:37] <maroon> if you want to avoid big-integer math for the encoding, there are several options better than mime/base64
[11:17:49] <maroon> base85 lets you encode 4 binary as 5 text
[11:18:25] <bugweiser> fair warning. The main user is me, the main attacker is server op.
[11:19:06] <bugweiser> I have some other encoders as well for data, base85 is one of them. Thanks for the idea never the less!
[11:20:21] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[11:20:50] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[11:21:13] <maroon> base94 lets you encode 2 binary as 13 bits, or 8 binary bytes as 11 text
[11:23:48] <bugweiser> yeah, that appears to fit 
[11:23:54] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[11:24:34] <maroon> ive got an mirc script to do base94 as 9 binary into 11 text, with 94^11 being 107% of 256^9
[11:24:58] <maroon> 8 binary was typo should be 9, i was misreading 72 bits
[11:24:59] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[11:25:25] <bugweiser> lol, I get the idea (and radixes :) )
[11:25:43] <maroon> the math for base85 is a bit faster, so it depends on how tight you need the ciphertext, and what characters can go into the output
[11:26:32] <maroon> base85 is nice, because the 4-to-5 means you don't need to go across cipher 'blocks' when encoding it, you can encode a 128-bit block as 20 text and move on
[11:28:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:28:29] <bugweiser> ahh, I see what your are getting at. That's a good hind should I choose a 128bit blockcypher
[11:30:48] *** Joins: gde33 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[11:31:03] <maroon> no, i mean all block ciphers have a size that's a 2^n size, but yes a block cipher having 128bit size (not key size) is better than a 64bit block cipher because of the sweet32 birthday collisions
[11:31:33] *** Quits: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Quit: gde35)
[11:31:38] <maroon> if you were encoding as mime, with 3-binary-to-4-text, you either have encodng chunks that cross blocks, or need to encode 3 blocks at a time
[11:32:04] *** Quits: gde33 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Client Quit)
[11:32:20] *** Joins: gde33 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[11:33:29] <maroon> whereas a 128-bit block means a cipher has a sweet64 collision
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:31] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 245 seconds)
[11:36:13] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[11:37:47] *** Joins: lord| (~lordpipe@user/lordpipe)
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:51] *** Joins: gggpkm (~gggpkm@91.206.92.114)
[11:40:34] <bugweiser> I had to google the birthday collisions. Ok, clear.
[11:44:14] <bugweiser> thanks again for everyone's kind help and time, really very much appreciated! I don't want to wear it out, since I don't have much to offer currently in return (other than perhaps giving you some laughs)... 
[11:45:14] *** Quits: neocow (~neocow@185.38.14.210) (Quit: The Lounge - https://thelounge.chat)
[11:45:38] *** Joins: neocow (~neocow@185.38.14.210)
[11:46:13] *** Joins: andreasbuhr (~quassel@p5dcf9230.dip0.t-ipconnect.de)
[11:48:17] *** Joins: tkob (tkob@2607:5300:60:21b::1)
[11:48:51] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[11:48:56] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 252 seconds)
[11:50:01] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[11:51:01] *** Joins: lord| (~lordpipe@user/lordpipe)
[12:01:35] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[12:03:23] *** Joins: vernaz (~vernaz@148.63.127.167)
[12:04:36] *** Joins: linear_cannon (~linear@50.35.78.163)
[12:06:58] *** Quits: tkob (tkob@2607:5300:60:21b::1) (Remote host closed the connection)
[12:15:55] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[12:19:01] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 265 seconds)
[12:19:06] *** Guyver2_ is now known as Guyver2
[12:28:31] *** Joins: vernaz_ (~vernaz@148.63.127.167)
[12:29:35] *** Joins: vernaz__ (~vernaz@148.63.127.167)
[12:31:38] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 250 seconds)
[12:33:01] *** Quits: vernaz_ (~vernaz@148.63.127.167) (Ping timeout: 245 seconds)
[12:38:01] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 245 seconds)
[12:38:51] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[12:39:23] *** Joins: lord| (~lordpipe@user/lordpipe)
[12:41:50] *** Joins: shariashaman (~Rheanna@101.91.197.175)
[12:46:01] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[12:47:47] *** Quits: bbbbbb (~peppbel@191.96.106.198) (Ping timeout: 252 seconds)
[13:02:01] *** Quits: cryogreg (~cryogreg@mab.sdf.org) (Ping timeout: 252 seconds)
[13:02:46] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[13:03:06] *** Joins: cryogreg (~cryogreg@mab.sdf.org)
[13:05:27] *** Quits: maroon (tinycrypt@user/maroon) (Quit: Nothing interferes with my concentration. You could put on an orgy in my office and I wouldn't look up. Well, maybe once. --Isaac Asimov)
[13:05:36] *** Joins: maroon (tinycrypt@user/maroon)
[13:15:55] *** Joins: BOKALDO_ (~BOKALDO@46.109.203.51)
[13:18:49] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Read error: Connection reset by peer)
[13:33:26] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 245 seconds)
[13:42:40] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[13:42:45] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c0a7:bc34:d6a8:8f74)
[13:49:41] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 245 seconds)
[13:58:01] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[14:00:45] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:07:24] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[14:11:26] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[14:13:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[14:21:16] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:29:04] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:33:26] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 245 seconds)
[14:38:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:43:30] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[14:46:08] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Quit: unmanbearpig)
[14:46:21] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 245 seconds)
[14:46:31] *** Guyver2_ is now known as Guyver2
[14:50:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[14:51:18] *** Quits: vernaz__ (~vernaz@148.63.127.167) (Remote host closed the connection)
[14:54:09] *** Joins: Guyver2_ (~Guyver@2001:985:f3f:1:9897:b926:f3e9:ee7a)
[14:55:56] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 245 seconds)
[14:56:00] *** Guyver2_ is now known as Guyver2
[14:58:02] *** Parts: azonenberg (~azonenber@2603:3023:241:40f8:216:3eff:fe6c:95a2) ()
[15:03:51] *** Quits: yggdrasil (~yggdrasil@67-0-66-157.albq.qwest.net) (Ping timeout: 245 seconds)
[15:04:31] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Remote host closed the connection)
[15:05:56] *** Joins: yggdrasil (~yggdrasil@67-0-30-65.albq.qwest.net)
[15:09:27] *** Quits: shariashaman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[15:11:12] *** Joins: shariashaman (~Rheanna@101.91.197.175)
[15:17:27] *** Joins: mei (~mei@user/mei)
[15:21:58] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:26:44] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Ping timeout: 252 seconds)
[15:27:31] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:32:00] *** Quits: qbt (~edun@user/edun) (Remote host closed the connection)
[15:32:23] *** Joins: qbt (~edun@user/edun)
[15:39:35] *** Joins: AllMyNames_2 (~AllMyName@2.57.169.239)
[15:43:28] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Ping timeout: 265 seconds)
[15:44:22] *** Quits: qbt (~edun@user/edun) (Remote host closed the connection)
[15:47:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[15:47:54] *** Quits: AllMyNames_2 (~AllMyName@2.57.169.239) (Quit: Leaving)
[15:48:12] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[15:48:28] *** Quits: AllMyNames (~AllMyName@user/allmynames) (Remote host closed the connection)
[15:48:53] *** Quits: maroon (tinycrypt@user/maroon) (Quit: If a man empties his purse into his head, no one can take it from him. --Benjamin Franklin)
[15:57:10] *** Joins: user_76584 (~user@176.59.196.43)
[15:58:52] *** Quits: shariashaman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[16:00:58] *** Joins: shariashaman (~Rheanna@218.78.88.163)
[16:07:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:08:36] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[16:12:33] *** Joins: maroon (tinycrypt@user/maroon)
[16:16:44] *** Joins: szarkaorg (~szarka@2001-48F8-9004-E05-20CC-D9AB-C54C-4B67-dynamic.midco.net)
[16:17:13] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:19:27] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[16:20:01] *** Quits: szarkanet (~szarka@2001-48F8-9004-E05-180C-FFB8-1B1D-6DB0-dynamic.midco.net) (Ping timeout: 252 seconds)
[16:20:56] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[16:23:47] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 240 seconds)
[16:29:40] *** Quits: shariashaman (~Rheanna@218.78.88.163) (Remote host closed the connection)
[16:30:36] *** Joins: shariashaman (~Rheanna@218.78.88.163)
[16:33:58] *** Quits: shariashaman (~Rheanna@218.78.88.163) (Remote host closed the connection)
[16:34:47] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:35:04] *** Joins: shariashaman (~Rheanna@218.78.88.163)
[16:49:01] *** Quits: shariashaman (~Rheanna@218.78.88.163) (Remote host closed the connection)
[16:51:21] *** Quits: gggpkm (~gggpkm@91.206.92.114) (Ping timeout: 245 seconds)
[16:53:30] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[16:54:05] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Ping timeout: 264 seconds)
[17:00:11] *** Quits: Brnocrist (~spartak@user/brnocrist) (Read error: Connection reset by peer)
[17:04:55] *** Joins: mouseghost (~draco@user/mouseghost)
[17:05:20] *** Joins: gggpkm (~gggpkm@91.206.92.114)
[17:07:31] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:10:27] *** Parts: nanook (~nanook@137.184.134.238) (The Lounge - https://thelounge.chat)
[17:15:51] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[17:21:13] *** Joins: eck (~root@user/eck)
[17:32:39] *** Joins: notouchpad (~notouchpa@wifi-eduroam-84-030.paris.inria.fr)
[17:33:26] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c0a7:bc34:d6a8:8f74) (Ping timeout: 245 seconds)
[17:33:51] *** Quits: user_76584 (~user@176.59.196.43) (Ping timeout: 245 seconds)
[17:42:01] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[17:47:32] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:49:51] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Client Quit)
[17:51:00] *** Joins: dez (uid92154@user/dez)
[17:56:04] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:20:33] *** Joins: Brnocrist (~spartak@user/brnocrist)
[18:23:50] *** Quits: gggpkm (~gggpkm@91.206.92.114) (Remote host closed the connection)
[18:28:48] *** Quits: andreasbuhr (~quassel@p5dcf9230.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:28:53] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[18:46:58] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[18:47:47] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[18:48:01] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:59:00] *** Quits: notouchpad (~notouchpa@wifi-eduroam-84-030.paris.inria.fr) (Quit: Leaving)
[19:00:48] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[19:04:43] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Quit: JollyRoger)
[19:07:56] *** Joins: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net)
[19:10:48] *** Quits: jan_Elon (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 268 seconds)
[19:20:34] *** Joins: vernaz (~vernaz@148.63.127.167)
[19:26:06] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[19:27:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[19:42:17] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:43:42] *** Joins: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net)
[19:46:13] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[19:47:03] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[19:47:23] *** Joins: Narrat (~omnius@p200300df5f13e73906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[19:47:32] *** Joins: eck (~root@user/eck)
[19:50:11] *** Quits: eck (~root@user/eck) (Client Quit)
[19:50:29] *** Joins: eck (~root@user/eck)
[19:51:36] *** Joins: Torr (~Torr@user/torr)
[20:00:37] *** Quits: terminaldweller (~devi@ip137.ip-145-239-165.eu) (Read error: Connection reset by peer)
[20:04:49] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[20:05:04] *** Joins: eck (~root@user/eck)
[20:05:17] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[20:05:40] *** Quits: BadKarma (~BadKarma@user/badkarma) (Quit: Lost terminal)
[20:06:06] *** Joins: BadKarma (~BadKarma@user/badkarma)
[20:06:59] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[20:15:30] *** Joins: zro (~zro@user/zro)
[20:24:24] *** Quits: eck (~root@user/eck) (Remote host closed the connection)
[20:24:40] *** Joins: eck (~root@user/eck)
[20:27:24] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:36:40] *** Joins: vernaz_ (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450)
[20:37:55] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 252 seconds)
[20:39:31] *** Joins: eck_ (~root@user/eck)
[20:39:50] *** Quits: eck (~root@user/eck) (Killed (NickServ (GHOST command used by eck_)))
[20:39:51] *** Joins: neocow8 (~neocow@185.38.14.210)
[20:39:54] *** eck_ is now known as eck
[20:40:10] *** Joins: mrkajetanp_ (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[20:40:46] *** Joins: instantp10neer_ (~instantp1@user/instantp10neer)
[20:40:53] *** Joins: cg2 (~cryogreg@mab.sdf.org)
[20:40:55] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 260 seconds)
[20:41:35] *** Quits: eck (~root@user/eck) (Client Quit)
[20:41:50] *** Joins: eck (~root@user/eck)
[20:41:57] *** Joins: WishBoy (~WishBoy@user/wishboy)
[20:42:02] *** Joins: akaWolf1 (~akaWolf@akawolf.org)
[20:42:05] *** Joins: e2- (e2@sponsored.by.bnc4you.xyz)
[20:42:13] *** Joins: sol_ (~toor@oops.root.sx)
[20:42:39] *** Joins: poopster_ (poopster@shell.xshellz.com)
[20:42:55] *** Joins: rundown (~eb0t@90.199.243.11)
[20:42:58] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[20:44:26] *** Joins: danie1dg (~me@user/danieldg)
[20:47:22] *** Joins: aleck (~aleck@user/aleck)
[20:47:35] *** Quits: vernaz_ (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450) (*.net *.split)
[20:47:36] *** Quits: szarkaorg (~szarka@2001-48F8-9004-E05-20CC-D9AB-C54C-4B67-dynamic.midco.net) (*.net *.split)
[20:47:36] *** Quits: maroon (tinycrypt@user/maroon) (*.net *.split)
[20:47:36] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (*.net *.split)
[20:47:36] *** Quits: cryogreg (~cryogreg@mab.sdf.org) (*.net *.split)
[20:47:36] *** Quits: neocow (~neocow@185.38.14.210) (*.net *.split)
[20:47:36] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[20:47:36] *** Quits: sol (~toor@oops.root.sx) (*.net *.split)
[20:47:36] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com) (*.net *.split)
[20:47:36] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[20:47:36] *** Quits: rxcomm (~rxcomm@user/rxcomm) (*.net *.split)
[20:47:37] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[20:47:37] *** Quits: defjam (~eb0t@90.199.243.11) (*.net *.split)
[20:47:37] *** Quits: riv (river@tilde.team/user/river) (*.net *.split)
[20:47:37] *** Quits: trebuh (~trebuh@2001:41d0:a:15c7::1) (*.net *.split)
[20:47:37] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[20:47:37] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[20:47:37] *** Quits: danieldg (~me@user/danieldg) (*.net *.split)
[20:47:37] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[20:47:37] *** Quits: cryptolightning (~cryptolig@user/cryptolightning) (*.net *.split)
[20:47:37] *** Quits: son0p (~ff@181.136.122.143) (*.net *.split)
[20:47:37] *** Quits: cwebber (~user@user/cwebber) (*.net *.split)
[20:47:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[20:47:37] *** Quits: poopster (poopster@user/poopster) (*.net *.split)
[20:47:37] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (*.net *.split)
[20:47:37] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (*.net *.split)
[20:47:44] *** akaWolf1 is now known as akaWolf
[20:48:11] *** Joins: cryptolightning (~cryptolig@70-131-42-184.lightspeed.rlghnc.sbcglobal.net)
[20:48:12] *** Quits: cryptolightning (~cryptolig@70-131-42-184.lightspeed.rlghnc.sbcglobal.net) (Changing host)
[20:48:12] *** Joins: cryptolightning (~cryptolig@user/cryptolightning)
[20:48:55] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 252 seconds)
[20:51:31] *** Quits: EmmyNoether (~EmmyNoeth@yoke.ch0wn.org) (Remote host closed the connection)
[20:51:51] *** Joins: EmmyNoether (~EmmyNoeth@yoke.ch0wn.org)
[20:52:08] *** Joins: maroon (tinycrypt@136.32.225.142)
[20:52:08] *** Joins: vernaz_ (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450)
[20:52:08] *** Joins: szarkaorg (~szarka@2001-48F8-9004-E05-20CC-D9AB-C54C-4B67-dynamic.midco.net)
[20:52:08] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[20:52:08] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com)
[20:52:08] *** Joins: riv (river@tilde.team/user/river)
[20:52:08] *** Joins: trebuh (~trebuh@2001:41d0:a:15c7::1)
[20:52:08] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[20:52:08] *** Joins: cwebber (~user@user/cwebber)
[20:52:11] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Max SendQ exceeded)
[20:52:13] *** Quits: maroon (tinycrypt@136.32.225.142) (Changing host)
[20:52:13] *** Joins: maroon (tinycrypt@user/maroon)
[20:53:59] *** Joins: s1b1 (~s1b1@user/s1b1)
[20:54:14] *** Joins: edk (edk@libera/staff/edk)
[20:54:33] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:54:36] *** Joins: rxcomm (~rxcomm@user/rxcomm)
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:55:47] *** rundown is now known as defjam
[20:56:25] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com) (Quit: jarthur)
[20:56:51] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-5422-0cb4-aeaf-4572.res6.spectrum.com)
[20:58:27] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[20:59:00] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[20:59:01] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:59:33] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[20:59:39] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Remote host closed the connection)
[20:59:44] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:01:30] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 265 seconds)
[21:01:30] *** X-Scale` is now known as X-Scale
[21:01:49] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Quit: Leaving)
[21:02:07] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:02:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:08:45] *** Joins: jan_Elon (~elon@user/elon-satoshi/x-4242282)
[21:09:41] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:10:12] *** Joins: Anu1 (anunay@user/anunay)
[21:10:21] *** Joins: Brownout_ (~brown@user/brown)
[21:11:47] *** Joins: yggdrasi1 (~yggdrasil@67-0-30-65.albq.qwest.net)
[21:12:25] *** Joins: Brnocris1 (~spartak@user/brnocrist)
[21:12:45] *** Joins: poopster (poopster@shell.xshellz.com)
[21:13:17] *** Joins: Wulf4 (~Wulf@user/wulf)
[21:13:29] *** Joins: Arachnophine3 (~KeterClas@vm0.max-p.me)
[21:13:33] *** Joins: halbeinfach (~semisimpl@188.193.171.16)
[21:13:41] *** Joins: Crypto_Club (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[21:13:50] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:13:53] *** Joins: iokill_ (~dave@static.16.105.130.94.clients.your-server.de)
[21:14:06] *** Joins: rundown (~eb0t@90.199.243.11)
[21:14:17] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[21:14:18] *** Joins: __nick__ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:14:28] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: yggdrasil (~yggdrasil@67-0-30-65.albq.qwest.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: e2- (e2@sponsored.by.bnc4you.xyz) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Brnocrist (~spartak@user/brnocrist) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: defjam (~eb0t@90.199.243.11) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: poopster_ (poopster@shell.xshellz.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: echoreply (~echoreply@45.32.163.16) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Brownout (~brown@user/brown) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Anu (anunay@user/anunay) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: iokill (~dave@static.16.105.130.94.clients.your-server.de) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: lord| (~lordpipe@user/lordpipe) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: semisimple (~semisimpl@ipbcc1ab10.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Gravis (~gravis@user/gravis) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 265 seconds)
[21:14:30] *** Wulf4 is now known as Wulf
[21:14:30] *** Joins: human_g33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[21:14:30] *** Anu1 is now known as Anu
[21:14:31] *** Quits: Arachnophine (~KeterClas@vm0.max-p.me) (Read error: Connection reset by peer)
[21:14:31] *** Arachnophine3 is now known as Arachnophine
[21:14:33] *** Quits: mteo (francis@user/francis) (Ping timeout: 265 seconds)
[21:14:39] *** Quits: jtdowney (~jtdowney@user/jtdowney) (Read error: Connection reset by peer)
[21:14:50] *** Joins: betelgeuse0 (~betelgeus@94-225-47-8.access.telenet.be)
[21:14:55] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:14:55] *** betelgeuse0 is now known as betelgeuse
[21:14:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[21:14:57] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[21:14:58] *** Quits: Disconsented (~quassel@107.170.227.20) (Remote host closed the connection)
[21:15:02] *** Quits: sol_ (~toor@oops.root.sx) (Ping timeout: 265 seconds)
[21:15:06] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[21:15:09] *** Joins: mteo (francis@user/francis)
[21:15:11] *** Joins: lord| (~lordpipe@user/lordpipe)
[21:15:31] *** Quits: aczid (~aczid@tuig.nikhef.nl) (Ping timeout: 265 seconds)
[21:15:31] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[21:15:34] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[21:15:37] *** Joins: aczid (~aczid@tuig.nikhef.nl)
[21:15:59] *** Joins: Gravis (~gravis@user/gravis)
[21:16:07] *** Joins: Disconsented (~quassel@107.170.227.20)
[21:16:23] *** Joins: sol (~toor@oops.root.sx)
[21:16:29] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[21:18:43] *** Joins: rtypo (~alex@user/rtypo)
[21:21:08] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:25:22] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:27:21] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Ping timeout: 250 seconds)
[21:27:23] *** Joins: somlis (~somlis@user/somlis)
[21:30:08] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[21:30:14] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[21:30:42] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[21:33:25] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 260 seconds)
[21:34:53] *** Quits: vernaz_ (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450) (Remote host closed the connection)
[21:39:17] *** Joins: lampilelo (~user@user/lampilelo)
[21:48:04] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[21:50:15] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[21:50:34] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 252 seconds)
[21:51:15] *** Joins: vernaz (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450)
[21:51:59] *** X-Scale` is now known as X-Scale
[21:55:10] *** Quits: vernaz (~vernaz@2001:818:d8da:9b00:11f3:f44d:8d78:4450) (Remote host closed the connection)
[21:56:53] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[21:57:09] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[21:57:19] *** Joins: tkob (tkob@2607:5300:60:21b::1)
[22:01:41] *** Quits: rundown (~eb0t@90.199.243.11) (Ping timeout: 252 seconds)
[22:03:21] *** Joins: rundown (~eb0t@90.202.46.160)
[22:07:06] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[22:07:31] *** Joins: X-Scale` (~ARM@46.50.4.85)
[22:09:07] *** X-Scale` is now known as X-Scale
[22:10:32] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:10:53] *** Joins: moose` (~moose@user/moose)
[22:12:40] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[22:13:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[22:20:20] *** Quits: zro (~zro@user/zro) (Ping timeout: 252 seconds)
[22:22:12] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:33:04] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[22:34:07] *** Joins: kish` (~aqua@user/aqua)
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:41:40] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[22:44:44] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[22:46:21] *** Quits: BOKALDO_ (~BOKALDO@46.109.203.51) (Quit: Leaving)
[22:48:48] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[22:55:13] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:56:06] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[22:59:39] *** Joins: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net)
[22:59:58] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[23:08:37] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[23:13:33] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[23:13:44] *** Quits: halbeinfach (~semisimpl@188.193.171.16) (Ping timeout: 252 seconds)
[23:15:29] *** Joins: kish` (~aqua@user/aqua)
[23:15:43] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:15:51] *** Joins: halbeinfach (~semisimpl@188.193.171.16)
[23:16:03] *** Joins: kish` (~aqua@user/aqua)
[23:19:40] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Ping timeout: 252 seconds)
[23:20:44] *** Quits: instantp10neer_ (~instantp1@user/instantp10neer) (Read error: Connection reset by peer)
[23:21:04] *** Joins: instantp10neer_ (~instantp1@user/instantp10neer)
[23:22:49] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:23:23] *** Joins: msfninja (~root@user/msfninja)
[23:26:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Remote host closed the connection)
[23:26:44] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:26:49] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[23:34:38] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 252 seconds)
[23:34:38] *** Quits: cehteh (~ct@git.pipapo.org) (Ping timeout: 250 seconds)
[23:34:45] *** Quits: dusk (~quassel@2a01:4f8:231:3ac7:2702::1) (Ping timeout: 260 seconds)
[23:34:47] *** Quits: MacGyver (~macgyver@user/macgyver) (Ping timeout: 240 seconds)
[23:34:48] *** Joins: Elzington (~Elzington@94.198.42.142)
[23:34:53] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Ping timeout: 264 seconds)
[23:35:21] *** Quits: kept (~kept@user/kept) (Ping timeout: 268 seconds)
[23:35:29] *** Quits: int-e (~noone@int-e.eu) (Ping timeout: 264 seconds)
[23:36:48] *** Joins: wolfshappen (~waff@irc.furworks.de)
[23:37:03] *** Joins: int-e (~noone@int-e.eu)
[23:37:23] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[23:37:28] *** Joins: dusk (~quassel@2a01:4f8:231:3ac7:2702::1)
[23:37:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[23:37:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Write error: Connection reset by peer)
[23:37:42] *** Quits: madage (~madage@user/madage) (Write error: Connection reset by peer)
[23:37:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Write error: Connection reset by peer)
[23:37:42] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Write error: Connection reset by peer)
[23:37:42] *** Quits: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752) (Write error: Connection reset by peer)
[23:37:42] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Write error: Connection reset by peer)
[23:37:42] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Read error: Connection reset by peer)
[23:37:42] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[23:37:42] *** Quits: kish` (~aqua@user/aqua) (Read error: Connection reset by peer)
[23:37:42] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Read error: Connection reset by peer)
[23:37:48] *** Joins: MacGyver (~macgyver@user/macgyver)
[23:37:55] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[23:37:55] *** Joins: sec^nd (~sec^nd@gateway/tor-sasl/secnd/x-45171752)
[23:37:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:37:56] *** Joins: kish` (~aqua@user/aqua)
[23:37:59] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:38:00] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[23:38:25] *** Quits: norskalm (~norskalm@101.175.64.73) (Ping timeout: 256 seconds)
[23:38:34] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[23:41:06] *** Joins: cehteh (~ct@git.pipapo.org)
[23:41:07] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:42:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:43:53] *** Joins: kept (~kept@user/kept)
[23:45:14] *** Joins: madage (~madage@user/madage)
[23:48:03] *** Quits: poopster (poopster@shell.xshellz.com) (Changing host)
[23:48:03] *** Joins: poopster (poopster@user/poopster)
[23:48:08] *** Joins: shawn_ (~tent405@104.244.210.140)
[23:48:16] *** Quits: shawn_ (~tent405@104.244.210.140) (Read error: Connection reset by peer)
[23:49:26] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Ping timeout: 252 seconds)
[23:53:20] *** Quits: jan_Elon (~elon@user/elon-satoshi/x-4242282) (Ping timeout: 252 seconds)
[23:56:48] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
