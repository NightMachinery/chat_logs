[00:03:10] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 260 seconds)
[00:03:38] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 260 seconds)
[00:04:00] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:04:40] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:05:23] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:08:57] *** Quits: ym (~ym@95.106.11.254) (Ping timeout: 265 seconds)
[00:12:19] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[00:13:16] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 258 seconds)
[00:17:47] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 264 seconds)
[00:17:50] *** Joins: Ilyu_ (~quassel@gateway/vpn/pia/ilyu)
[00:20:26] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:24:59] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[00:26:24] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Quit: WeeChat 3.3)
[00:26:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:26:32] *** Joins: dto (sid344636@user/dto)
[00:27:01] <dto> couldn't resist sharing this here :) https://usercontent.irccloud-cdn.com/file/GRPuTCFO/dancebots-2.ogv
[00:27:19] <dto> working on a new lisp game for dance pads / gamepads and rhythm based
[00:27:44] <dto> https://usercontent.irccloud-cdn.com/file/w3W4zNTT/dancebots-3.ogv
[00:27:46] <dto> :) 
[00:27:53] *** Quits: dra (~dra@2a04:4540:6413:be00:61eb:d823:a9de:d0ed) (Quit: Leaving)
[00:27:56] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[00:28:05] <dto> of course actual gameplay needs to come next.
[00:29:05] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:29:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:31:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[00:33:37] <jeko> dto: Nice. Where is the music from?
[00:33:48] <dto> i made it!
[00:34:03] <dto> hi jeko
[00:34:14] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[00:34:48] <jeko> very nice
[00:36:10] *** Quits: Ilyu_ (~quassel@gateway/vpn/pia/ilyu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:36:41] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:37:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:38:29] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Quit: ZNC 1.8.2 - https://znc.in)
[00:38:41] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[00:48:03] *** Joins: monkey_ (~user@190.104.116.134)
[00:50:04] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[00:57:23] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[00:58:07] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 258 seconds)
[00:59:52] *** Joins: shicz (~shicz@123.103.9.7)
[01:00:43] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[01:03:13] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:31:55] *** Quits: jeko (~user@ool-18e4d9ae.dyn.optonline.net) (Remote host closed the connection)
[01:32:42] *** Joins: jeko (~user@ool-18e4d9ae.dyn.optonline.net)
[01:34:09] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 258 seconds)
[01:35:53] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:36:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:36:23] *** Joins: srhm (~srhm@user/srhm)
[01:46:52] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 244 seconds)
[01:50:37] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:51:31] *** Joins: srhm (~srhm@user/srhm)
[01:53:05] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 244 seconds)
[01:53:25] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: quit)
[01:53:57] *** Joins: X-Scale (~ARM@31.22.163.11)
[01:54:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:55:36] *** Joins: johnjay (~pi@192.142.100.50)
[01:55:39] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 244 seconds)
[01:58:48] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[01:59:00] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[01:59:00] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[02:02:01] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[02:07:15] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Quit: Leaving)
[02:08:20] *** Quits: zenptr (~zenptr@user/zenptr) (Ping timeout: 265 seconds)
[02:08:36] *** Joins: zenptr (~zenptr@user/zenptr)
[02:10:39] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[02:11:30] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[02:11:52] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[02:29:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[02:30:50] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 260 seconds)
[02:34:27] *** Joins: livoreno (~livoreno@user/notzmv)
[02:45:33] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:45:33] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 265 seconds)
[02:47:45] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:75fc:61ae:7f76:1143) (Ping timeout: 260 seconds)
[02:48:31] *** Joins: shicz (~shicz@123.103.9.7)
[02:51:00] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:51:29] *** Joins: srhm (~srhm@user/srhm)
[02:53:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:54:03] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 244 seconds)
[03:02:33] *** Joins: evocatus (~evocatus@84.51.113.13)
[03:06:01] *** Joins: ASau` (~user@194.31.92.26)
[03:10:18] *** Quits: ASau (~user@lmpc.drb.insel.de) (Ping timeout: 260 seconds)
[03:16:21] *** Quits: drdo (~drdo@overlord0.drdo.eu) (Quit: ...)
[03:24:23] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 264 seconds)
[03:31:11] *** Quits: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[03:37:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:38:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:42:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:43:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:44:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:44:33] *** Joins: xiews (~wxie@101.93.21.97)
[03:45:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 244 seconds)
[03:46:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:47:42] *** Quits: christophergray (~christoph@190.148.52.44) (Quit: WeeChat 3.3)
[03:49:02] *** Quits: xiews (~wxie@101.93.21.97) (Ping timeout: 260 seconds)
[03:49:45] *** Joins: xiews (~wxie@2409:891e:1100:1dc:286b:807a:3e85:7b33)
[03:51:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:51:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:51:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:53:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:54:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:54:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:04:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:21:59] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[04:26:58] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[04:29:25] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[04:29:33] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[04:30:02] <Spawns_Carpeting> Hello. Quick question, how useful or common are improper lists in lisp, and can you create a lisp without supporting them?
[04:36:38] <mdhughes> They're useful for building data structures, and it's slightly less wasteful to use a pair (1 cons) instead of a list (2 cons).
[04:40:33] <moon-child> Spawns_Carpeting: http://xahlee.info/comp/i/ICFPAugust2009Steele.pdf  good use of improper lists
[04:40:35] *** Quits: xiews (~wxie@2409:891e:1100:1dc:286b:807a:3e85:7b33) (Ping timeout: 264 seconds)
[04:41:00] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 244 seconds)
[04:41:14] *** Joins: xiews (~wxie@124.79.217.228)
[04:41:29] <mdhughes> Related, last night I had the first reason to use set-cdr! in production code, and not for a new data structure. Other options were available, but it was the most logically consistent.
[04:42:50] <moon-child> no (set! (cdr))?
[04:45:52] *** Joins: nature (~nature@45.32.235.173)
[04:46:06] <Spawns_Carpeting> i am just implemented a sexpr/list type of thing for a lisp compiler in rust and depending on how I do it I would have to take into account calling methods like length() on lists, which could be an error if they are improper in certain cases afaik
[04:46:24] <Spawns_Carpeting> so i'm thinking it might be easier to just not allow them at all in the first place for this use case
[04:46:37] <Spawns_Carpeting> its mainly only for representing the source code
[04:47:45] <Spawns_Carpeting> i first did this in python and just threw runtime errors 
[04:48:01] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[04:48:23] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 264 seconds)
[04:49:54] *** Joins: shicz (~shicz@123.103.9.7)
[04:50:26] <Spawns_Carpeting> i on accident deleted all of my python programs so I figured I would redo it in something very different from python so it wasn't boring
[04:51:41] <moon-child> Spawns_Carpeting: not to put too fine a point on it, but I think you may be better served by spending some time writing code _in_ lisp before attempting to write an implementation of it
[04:53:58] <Spawns_Carpeting> well my goal was to write a little toy programming language, I just choose lisp because it was the easiest to parse and I think it's neat
[04:54:09] <Spawns_Carpeting> i do write emacs lisp a bit and tinker with common lisp
[04:54:23] <copec> Go through SICP, you do both
[04:54:25] <Spawns_Carpeting> do you think it would be better to go with a more conventional programming language
[04:54:40] <Spawns_Carpeting> well doing both is certainly an option too lol
[04:55:44] <Spawns_Carpeting> technically I don't really need it to be a "lisp", just something lispy
[04:56:10] <Spawns_Carpeting> even if it's *the worst* lisp ever, that's better than nothing
[04:56:43] <moon-child> the fact that you are asking these questions indicates to me that there are gaps in your knowledge such that you would learn more by writing code in lisp than by writing any lisp implementation
[04:57:14] <copec> In SICP, it has you write in lisp and then implement a lisp implementation in lisp
[04:57:24] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[04:57:26] <copec> It is such a great book
[04:57:47] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:57:56] <copec> although, it was difficult for me when I went through it like 20 years ago
[04:59:21] <Spawns_Carpeting> yeah I am still very new to lisp for sure
[04:59:43] <Spawns_Carpeting> i will check that ouy copec 
[05:00:02] <Spawns_Carpeting> i considered writing the lisp in lisp to learn both at once , so sicp sounds pretty neat
[05:00:42] <copec> http://sarabander.github.io/sicp/
[05:00:43] *** Joins: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9)
[05:01:22] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 265 seconds)
[05:01:49] <copec> https://web.mit.edu/alexmv/6.037/sicp.pdf
[05:03:22] <copec> I enjoy taking the approach just diving in too Spawns_Carpeting. I would probably suggest you think of your lisp as a toy language rendered as s-exp post parsing, rather than a lisp
[05:03:48] <Spawns_Carpeting> that is my goal for sure copec 
[05:04:22] <Spawns_Carpeting> and I agree about the diving in part. probably the best way to learn
[05:06:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[05:20:07] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:29:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:32:26] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[05:34:30] *** Quits: xiews (~wxie@124.79.217.228) (Ping timeout: 260 seconds)
[05:35:47] *** Joins: xiews (~wxie@124.79.217.228)
[05:37:46] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[05:45:59] *** Quits: jao (~jao@45.152.183.53) (Ping timeout: 264 seconds)
[05:47:46] *** Joins: jao (~jao@45.152.183.61)
[05:51:45] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be) (Ping timeout: 258 seconds)
[05:52:49] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[05:58:30] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 260 seconds)
[06:00:20] *** Joins: shicz (~shicz@123.103.9.7)
[06:03:16] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 252 seconds)
[06:09:59] *** Quits: jao (~jao@45.152.183.61) (Remote host closed the connection)
[06:30:28] *** Joins: keutoi (~keutoi@157.48.197.233)
[06:39:03] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[06:40:53] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:53:19] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 252 seconds)
[06:59:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[07:07:12] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 244 seconds)
[07:12:35] *** Quits: jeko (~user@ool-18e4d9ae.dyn.optonline.net) (Ping timeout: 260 seconds)
[07:14:24] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[07:25:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:26:52] *** Quits: vats (~vats@103.158.91.248) (Ping timeout: 252 seconds)
[07:28:16] *** Joins: vats (~vats@42.111.12.141)
[07:55:47] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 244 seconds)
[07:58:52] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 244 seconds)
[08:02:38] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[08:03:11] *** Joins: shicz (~shicz@123.103.9.7)
[08:04:25] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[08:05:47] *** Quits: keutoi (~keutoi@157.48.197.233) (Ping timeout: 264 seconds)
[08:06:02] *** Joins: keutoi (~keutoi@157.48.197.233)
[08:10:50] *** Quits: xiews (~wxie@124.79.217.228) (Ping timeout: 265 seconds)
[08:10:57] <White_Flame> Spawns_Carpeting: a cons cell is just a generic 2-tuple.  A list is only one usage policy of cons cells (although the main one)
[08:10:58] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:2cb7:d32:2ed4:d2a7)
[08:11:03] *** Joins: xiews (~wxie@2409:891e:6840:254:852f:5f42:54fb:3edb)
[08:13:35] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 264 seconds)
[08:14:11] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[08:14:51] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[08:15:33] *** Joins: shicz (~shicz@123.103.9.7)
[08:20:52] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:21:09] <Spawns_Carpeting> yeah but implementing a generic 2 tuple that can act as a list and everything else in rust is well.... extremely complex
[08:21:17] <Spawns_Carpeting> White_Flame: 
[08:21:28] <Spawns_Carpeting> its difficult enough to get it to act like a list
[08:22:37] <Spawns_Carpeting> it might sound absurd that it's difficult to implement since it's such a simple idea, but it fights you constantly 
[08:22:41] <moon-child> isn't it, like, enum LispObj { Cons(Box<LispObj>, Box<LispObj>) } or something
[08:23:12] <Spawns_Carpeting> in theory sure, not implement an nth method that returns &mut LispObj
[08:24:06] <moon-child> Box<Rc<RefCell>> or w/e
[08:24:27] <Spawns_Carpeting> I would like to avoid refcell for a few reasons but I might just use that or unsafe
[08:24:48] <moon-child> ...k
[08:24:52] <moon-child> then don't implement lisp
[08:25:02] <moon-child> lisp is a sea of pointers.  If you would like to implement a sea of pointers in rust, that is how you do it
[08:25:34] <Spawns_Carpeting> using Rc turns it Rc<Refcell<LispObj>>, and that makes pattern matching and other stuff a pain
[08:25:46] <Spawns_Carpeting> there are some other ways to do it with newtypes
[08:25:51] <Spawns_Carpeting> and IntoIter
[08:26:04] <Spawns_Carpeting> since its singly linked anyways
[08:27:00] <Spawns_Carpeting> even w/ refcell it's a bit trickier than it looks anyways :p
[08:31:23] <amazigh> there is existing lisp / scheme implementation for rust
[08:31:29] <amazigh> did you look at them?
[08:31:33] <Spawns_Carpeting> also I am no l33t master programmer like some here may be so forgive me for not knowing everything. The point of the project is to learn and have fun
[08:31:46] <amazigh> it will help learn more lisp and more rust
[08:31:48] <Spawns_Carpeting> not a whole lot amazigh but that's a great idea if I get super stuck
[08:32:16] <amazigh> just saying since I consider that a little known protip
[08:32:34] <Spawns_Carpeting> yeah that's a great idea actually
[08:32:36] <Spawns_Carpeting> thanks
[08:32:45] <amazigh> and learned that reading other people code is very helpful and benefical in the long run
[08:36:16] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:2cb7:d32:2ed4:d2a7) (Remote host closed the connection)
[08:37:01] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:2cb7:d32:2ed4:d2a7)
[08:41:10] <Qwnavery> here's something a little cursed and counterintuitive to the skills developed in SICP and lisp philosophy. https://wizardforcel.gitbooks.io/sicp-in-python/content/
[08:41:52] <Qwnavery> >:D
[08:43:01] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[08:43:49] <Qwnavery> there's also a s-exp parser for python
[08:51:21] *** Quits: xiews (~wxie@2409:891e:6840:254:852f:5f42:54fb:3edb) (Ping timeout: 245 seconds)
[08:53:15] *** Joins: xiews (~wxie@124.79.217.228)
[08:54:58] <amazigh> lisp makes some noise :)
[08:57:25] *** Joins: LoopMacro_ (~textual@c-24-22-157-127.hsd1.wa.comcast.net)
[08:57:40] *** Quits: xiews (~wxie@124.79.217.228) (Ping timeout: 258 seconds)
[08:59:08] <amazigh> (again)
[08:59:13] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:00:14] *** Joins: xiews (~wxie@2409:891e:6840:254:1dd5:5659:7543:84f4)
[09:09:02] *** Joins: Alfr (~Alfr@user/alfr)
[09:17:26] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:17:54] *** Joins: Alfr (~Alfr@user/alfr)
[09:21:21] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:21:49] *** Joins: Alfr (~Alfr@user/alfr)
[09:22:51] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:27:46] *** Joins: wilfred (uid159@id-159.uxbridge.irccloud.com)
[09:28:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:33:56] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 244 seconds)
[09:36:59] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:2cb7:d32:2ed4:d2a7) (Remote host closed the connection)
[09:43:49] *** Quits: MiningMarsh (~MiningMar@user/miningmarsh) (Quit: ZNC 1.8.2 - https://znc.in)
[09:59:23] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[09:59:30] *** Joins: MiningMarsh (~MiningMar@user/miningmarsh)
[09:59:52] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[10:02:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[10:10:23] *** Joins: josemanuel (~josemanue@user/josemanuel)
[10:23:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 244 seconds)
[10:23:26] *** Quits: xiews (~wxie@2409:891e:6840:254:1dd5:5659:7543:84f4) (Ping timeout: 245 seconds)
[10:24:39] *** Joins: xiews (~wxie@101.93.21.97)
[10:30:39] <White_Flame> Spawns_Carpeting: the fundamental cons cell doesn't need to "act" like anything else; it's purely external library-style usage to build lists from them
[10:31:58] <White_Flame> all it needs is car, cdr, and some way to distinguish NIL
[10:33:40] <moon-child> very difficult to get away from the reader
[10:34:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[10:43:42] *** Quits: xiews (~wxie@101.93.21.97) (Read error: Connection reset by peer)
[10:44:02] *** Joins: xiews (~wxie@101.93.21.97)
[10:48:24] *** Quits: xiews (~wxie@101.93.21.97) (Ping timeout: 265 seconds)
[10:49:57] *** Joins: xiews (~wxie@223.104.212.25)
[10:50:11] <White_Flame> oh, and I guess setf cdr and setf car
[10:50:39] <White_Flame> moon-child: what do you mean by reader here?
[10:52:56] <moon-child> White_Flame: that the reader reads "(x y)" as a 'list' and that the evaluator interprets (x y) as a call to function x with argument y indicates to me that listness is not _just_ an arbitrary projection onto conses
[10:53:37] <White_Flame> I think it is arbitrary.  The conses don't care.  But most of lisp like this doesn't deal with conses, it deals with lists
[10:54:34] <White_Flame> (obviously as a semantic difference; in the concrete they are all cons cells)
[10:55:19] <White_Flame> but most practically for this, the cons cell interface/implementation still needs nothing but car/cdr/setters/nil, and the list interface can build all the listiness it needs from that
[10:55:29] <moon-child> the conses do not care, yes.  But if you are in the realm of 'conses do not care', then nobody else cares about the conses either.  If they are conses in a lisp system--the evaluator is an essential part of the lisp system, and it cares about lists
[10:56:05] <moon-child> 'the list interface can build all the listiness it needs from that'  build using evaluated lisp code, which is made of lists
[10:56:34] <White_Flame> sure, but that doesn't change the simplicity of the cons interface.  It doesn't need NTH or whatever else mentioned above
[10:56:47] <White_Flame> that's part of the list stuff, which doesn't modify the cons notions at all
[10:56:58] <moon-child> sure
[10:57:24] <moon-child> here's another way of putting it, maybe: the whole is more than the sum of its parts, and conses will not be meaningful unless they are part of a whole which contains lists
[10:57:25] <White_Flame> probably restated differently, the cons cell implementation does not need to worry at all about how lists happen to use them
[10:57:59] <White_Flame> but as I don't know rust, there might be particulars I missed, but things like NTH don't go on the cons cell interface
[10:58:34] <White_Flame> (in an OO sense)
[10:58:48] *** Quits: xiews (~wxie@223.104.212.25) (Ping timeout: 258 seconds)
[10:58:51] <White_Flame> (and yes, I know NTH is in the Conses dictionary in CLHS ;) )
[10:59:45] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:01:40] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:19:54] *** Joins: ym (~ym@95.106.11.254)
[11:27:59] *** Quits: vats (~vats@42.111.12.141) (Ping timeout: 264 seconds)
[11:28:21] *** Joins: vats (~vats@42.111.13.197)
[11:35:46] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[11:38:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:31] *** Joins: aeth (~aeth@user/aeth)
[11:42:53] <amazigh> Does CL dynamic scoping works like JavaScript scoping without `let` and `var`?
[11:44:04] *** Joins: xiews (~wxie@101.93.21.97)
[11:48:29] <pjb> amazigh: you'd have to ask in #javascript ; I don't know javascript that well…
[11:50:21] <moon-child> I expect that in #javascript they may not know lisp very well; but since js is much more popular than lisp, it is more likely that a randomly chosen cl person knows js than it is that a randomly chosen js person knows cl
[11:51:06] *** Quits: xiews (~wxie@101.93.21.97) (Ping timeout: 260 seconds)
[11:51:08] <wasamasa> JS scoping is just broken
[11:52:18] <pjb> I don't even know if JS has dynamic binding.
[11:52:45] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[11:54:54] <wasamasa> if you declare a variable without let/const/var, then it essentially gives you a global variable
[11:55:38] <amazigh> yes that is the default historical behavior of variables with javascript
[11:55:44] <wasamasa> however this is not to be relied upon due to the existence of strict mode and hoisting
[11:57:03] *** Quits: ym (~ym@95.106.11.254) (Ping timeout: 244 seconds)
[11:57:24] <amazigh> (unrelated tl;dr: microsoft built a REPL-like ui/ux feature called hot-reload for the OSS .NET SDK then turned it into feature only available in non-oss visual studio https://dusted.codes/can-we-trust-microsoft-with-open-source)
[11:57:27] <amazigh> wasamasa: ty
[11:57:29] <wasamasa> I doubt dynamic binding is a thing in JS
[11:58:24] <wasamasa> you'd have to look at how stuff like testing libraries work, that would be a natural usecase for dynamic binding
[11:58:28] <amazigh> no it is not
[12:00:16] <amazigh> but I was thinking about my initial rationale for going with Scheme in the first place, it was because of lexical scoping that looks more like the scoping in JS or Python, and eventually tried to understand better what is dynamic scoping, how would you explain dynamic scoping to a python or javascript or ruby dev? Dynamically scoped variables are globals?
[12:00:43] <wasamasa> JS used to not have lexical scoping, but instead function-level scoping, lol
[12:00:53] <wasamasa> let/const made it a bit saner
[12:01:18] <amazigh> AFAIU, according to kernel, dynamic environment is the static environment of the caller.
[12:01:48] <wasamasa> dynamic scoping is about a runtime-oriented strategy of looking up a binding
[12:02:23] <wasamasa> you walk up the stack of currently active bindings instead of erroring out early because the variable wasn't in the lexical scope
[12:02:44] <moon-child> that's a slow way of implementing dynamic scoping
[12:02:48] <amazigh> how is that different from every variable is global?
[12:02:58] <moon-child> amazigh: cuz you can shadow
[12:03:11] <wasamasa> right, you can temporarily override the binding
[12:03:32] <amazigh> shadow / override the bindings only for the callees?
[12:03:49] <amazigh> s/bindings/binding/
[12:03:58] <wasamasa> it can be thought of something like (progn (setq foo 1) ... (setq foo original-value))
[12:04:25] <wasamasa> but it's written as (let ((foo 1)) ...)
[12:04:48] <wasamasa> and the interesting thing is that it affects foo beyond the surface level, even if it's defined in some other function called inside the body
[12:04:56] <amazigh> so CL's `let` it somewhat like scheme's `parametrize`
[12:05:13] <wasamasa> I'm speaking from the elisp perspective, but yeah
[12:05:27] <amazigh> ok ty
[12:05:28] <wasamasa> the surface level thing is one way to describe lexical scope
[12:05:44] <amazigh> what is the main advantage of dynamic scoping?
[12:05:54] <wasamasa> it makes emacs work, lol
[12:05:56] <amazigh> and the main drawback
[12:06:10] <wasamasa> you can override pretty much anything you want
[12:06:37] <wasamasa> however people eventually realized that it's a bad idea to have it as the default behavior for everything
[12:06:43] <amazigh> (yes re emacs, I figured that while working on toy editor, I used a global hash-table instead)
[12:06:55] <wasamasa> and that lexical binding can be implemented more efficiently and gives you closures
[12:07:01] <amazigh> hmm..
[12:07:16] <amazigh> performance wise, isn't dynamic scope better?
[12:07:22] <amazigh> cpu or memory wise?
[12:07:27] <moon-child> nope
[12:07:32] <wasamasa> no, it precludes several optimizations
[12:09:23] <amazigh> ty a lot.
[12:17:30] *** Quits: wilfred (uid159@id-159.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:24:05] *** Quits: vats (~vats@42.111.13.197) (Ping timeout: 260 seconds)
[12:24:22] *** Joins: vats (~vats@103.158.91.248)
[12:27:55] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[12:29:35] *** Joins: xiews (~wxie@101.93.21.97)
[12:41:54] *** Joins: ym (~ym@95.106.11.254)
[12:46:21] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[12:47:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[12:57:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[13:00:36] *** Quits: xiews (~wxie@101.93.21.97) (Read error: Connection reset by peer)
[13:00:56] *** Joins: xiews (~wxie@101.93.21.97)
[13:03:32] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5909:3922:5614:aa04)
[13:06:31] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:06:31] *** Quits: xiews (~wxie@101.93.21.97) (Read error: Connection reset by peer)
[13:09:56] *** Joins: Necktwi_ (~necktwi@49.206.203.103)
[13:09:57] *** Joins: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru)
[13:17:19] *** Joins: xiews (~wxie@101.93.21.97)
[13:18:23] *** Quits: xiews (~wxie@101.93.21.97) (Read error: Connection reset by peer)
[13:38:50] *** Joins: xiews (~wxie@101.93.21.97)
[14:02:42] *** Quits: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru) (Quit: Client closed)
[14:02:51] *** Joins: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru)
[14:19:43] *** Joins: casionaut (~casionaut@user/casionaut)
[14:19:57] *** Parts: casionaut (~casionaut@user/casionaut) ()
[14:29:23] *** Joins: random-nick (~random-ni@87.116.183.63)
[14:32:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[14:33:18] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[14:34:43] *** Quits: xiews (~wxie@101.93.21.97) (Read error: Connection reset by peer)
[14:36:46] *** Joins: xiews (~wxie@223.104.212.25)
[14:52:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 244 seconds)
[14:53:45] *** Quits: xiews (~wxie@223.104.212.25) (Ping timeout: 244 seconds)
[14:55:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:05:18] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[15:26:12] *** Joins: notzmv (~zmv@user/notzmv)
[15:33:26] *** Joins: dra (~dra@2a04:4540:6420:a100:5d83:e105:f7e0:ca98)
[15:34:48] *** Joins: xiews (~wxie@101.93.21.97)
[15:35:20] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[15:40:42] *** Quits: vats (~vats@103.158.91.248) (Ping timeout: 260 seconds)
[15:47:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:52:32] *** Joins: tfeb (~tfb@88.98.95.237)
[15:53:43] *** Joins: vats (~vats@103.158.91.228)
[15:54:27] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:54:57] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[15:58:06] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[15:58:38] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[16:00:09] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 265 seconds)
[16:01:44] *** Joins: shicz (~shicz@123.103.9.7)
[16:03:42] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[16:04:29] *** Quits: retropikzel (~retropikz@83-245-255-135-nat-p.elisa-mobile.fi) (Quit: Leaving)
[16:06:14] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 258 seconds)
[16:06:36] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 244 seconds)
[16:08:03] *** Joins: shicz (~shicz@123.103.9.7)
[16:10:27] *** Quits: vats (~vats@103.158.91.228) (Ping timeout: 258 seconds)
[16:10:53] *** Joins: vats (~vats@42.111.12.66)
[16:17:20] *** Joins: tfb (~tfb@88.98.95.237)
[16:18:35] *** Quits: dra (~dra@2a04:4540:6420:a100:5d83:e105:f7e0:ca98) (Ping timeout: 260 seconds)
[16:42:44] *** Joins: GNUHacker (~gnu@mta763.solicitae.com)
[16:42:45] *** Quits: GNUHacker (~gnu@mta763.solicitae.com) (Changing host)
[16:42:45] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[16:48:10] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:50:01] *** Quits: X-Scale (~ARM@31.22.163.11) (Ping timeout: 244 seconds)
[16:50:01] *** X-Scale` is now known as X-Scale
[17:00:05] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-103E-static.midco.net)
[17:03:16] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1038-static.midco.net) (Ping timeout: 252 seconds)
[17:07:06] *** Joins: jeko (~user@ool-18e4d9ae.dyn.optonline.net)
[17:08:07] *** Joins: X-Scale` (~ARM@92.250.96.217)
[17:08:54] *** Quits: vats (~vats@42.111.12.66) (Ping timeout: 260 seconds)
[17:09:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[17:09:34] *** Joins: vats (~vats@42.111.20.236)
[17:09:50] *** X-Scale` is now known as X-Scale
[17:11:02] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: quit)
[17:11:33] *** Joins: strajder (~strajder@user/strajder)
[17:19:19] *** Joins: nature (~nature@45.32.235.173)
[17:25:05] *** Joins: GNUHacker (~gnu@mta763.solicitae.com)
[17:25:06] *** Quits: GNUHacker (~gnu@mta763.solicitae.com) (Changing host)
[17:25:06] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[17:30:21] *** Joins: makomo (~makomo@user/makomo)
[17:36:16] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 252 seconds)
[17:47:06] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-103E-static.midco.net)
[17:48:31] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[17:49:44] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-103E-static.midco.net) (Ping timeout: 258 seconds)
[17:59:15] *** Quits: vats (~vats@42.111.20.236) (Ping timeout: 244 seconds)
[18:05:50] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 258 seconds)
[18:08:52] *** Joins: vats (~vats@42.111.20.236)
[18:12:02] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:d84a:f743:4337:7a10)
[18:23:56] *** Joins: retropikzel (~retropikz@83-245-255-135-nat-p.elisa-mobile.fi)
[18:24:06] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:24:31] *** Joins: srhm (~srhm@user/srhm)
[18:30:39] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596)
[18:30:39] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596) (Changing host)
[18:30:39] *** Joins: skapata (~Skapata@user/skapata)
[18:39:33] *** Quits: vats (~vats@42.111.20.236) (Ping timeout: 244 seconds)
[18:40:16] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[18:40:18] *** Joins: vats (~vats@103.158.91.228)
[18:47:23] *** Quits: vats (~vats@103.158.91.228) (Ping timeout: 265 seconds)
[18:49:21] *** Joins: vats (~vats@42.111.21.111)
[18:53:32] *** Quits: xiews (~wxie@101.93.21.97) (Remote host closed the connection)
[18:57:41] *** Quits: retropikzel (~retropikz@83-245-255-135-nat-p.elisa-mobile.fi) (Read error: Connection reset by peer)
[18:59:06] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[19:01:35] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 264 seconds)
[19:04:41] *** Joins: shicz (~shicz@123.103.9.7)
[19:06:14] *** Quits: vats (~vats@42.111.21.111) (Ping timeout: 265 seconds)
[19:06:48] *** Joins: vats (~vats@103.158.91.228)
[19:20:54] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:d84a:f743:4337:7a10) (Remote host closed the connection)
[19:27:24] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:d84a:f743:4337:7a10)
[19:27:44] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[19:28:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[19:28:09] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[19:29:49] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:30:18] *** Joins: srhm (~srhm@user/srhm)
[19:32:02] *** Quits: keutoi (~keutoi@157.48.197.233) (Quit: leaving)
[19:34:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:39:23] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[19:40:50] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:d84a:f743:4337:7a10) (Remote host closed the connection)
[19:59:18] *** Joins: aportnoy1 (~aportnoy@2607:f720:1901:1060::100)
[20:00:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:01:42] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Ping timeout: 244 seconds)
[20:03:09] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[20:05:47] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 264 seconds)
[20:09:46] *** Quits: aportnoy1 (~aportnoy@2607:f720:1901:1060::100) (Read error: Connection reset by peer)
[20:11:25] *** Joins: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[20:14:37] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[20:19:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:23:15] *** Quits: josemanuel (~josemanue@user/josemanuel) (Quit: leaving)
[20:25:10] *** Quits: jeko (~user@ool-18e4d9ae.dyn.optonline.net) (Remote host closed the connection)
[20:25:40] *** Joins: jeko (~user@ool-18e4d9ae.dyn.optonline.net)
[20:27:04] *** Quits: jeko (~user@ool-18e4d9ae.dyn.optonline.net) (Changing host)
[20:27:04] *** Joins: jeko (~user@user/jeko)
[20:28:27] *** Joins: jao (~jao@194.99.104.13)
[20:41:27] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[20:42:33] *** Joins: dra (~dra@2a04:4540:6420:a100:5d83:e105:f7e0:ca98)
[20:56:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[20:58:00] *** Quits: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 244 seconds)
[20:59:22] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[21:03:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[21:05:05] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[21:05:14] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:06:17] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 244 seconds)
[21:07:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:14:02] *** Quits: ym (~ym@95.106.11.254) (Ping timeout: 244 seconds)
[21:17:06] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[21:19:46] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[21:31:20] *** Quits: vats (~vats@103.158.91.228) (Quit: Quit)
[21:31:38] *** Joins: vats (~vats@103.158.91.228)
[21:38:47] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 264 seconds)
[21:41:54] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 260 seconds)
[21:51:42] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:34a3:358d:19c6:6d9)
[21:52:11] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: quit)
[21:59:04] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:34a3:358d:19c6:6d9) (Remote host closed the connection)
[22:01:58] *** Quits: shicz (~shicz@123.103.9.7) (Ping timeout: 260 seconds)
[22:06:59] *** Joins: shicz (~shicz@123.103.9.7)
[22:14:00] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[22:17:50] *** Quits: vats (~vats@103.158.91.228) (Ping timeout: 260 seconds)
[22:18:34] *** Quits: sake (~sake@130.255.78.161) (Remote host closed the connection)
[22:18:36] *** Joins: vats (~vats@42.111.20.90)
[22:26:44] *** Joins: tyson2 (~user@24.114.68.51)
[22:27:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:28:19] *** Quits: vats (~vats@42.111.20.90) (Ping timeout: 252 seconds)
[22:29:25] *** Joins: vats (~vats@103.158.91.228)
[22:30:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:32:02] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:32:29] *** Joins: srhm (~srhm@user/srhm)
[22:33:53] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:34a3:358d:19c6:6d9)
[22:36:37] *** Joins: humasect (~humasect@2001:1970:57e0:4100::141e)
[22:38:10] *** Quits: zascrash (~zascrash@2804:7f3:4c88:7fb0:34a3:358d:19c6:6d9) (Remote host closed the connection)
[22:44:11] *** Joins: nature (~nature@45.32.235.173)
[22:48:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:50:03] *** Joins: zascrash (~zascrash@2804:7f3:4c88:7fb0:34a3:358d:19c6:6d9)
[23:01:16] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:01:29] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 244 seconds)
[23:06:46] *** Quits: humasect (~humasect@2001:1970:57e0:4100::141e) (Quit: Leaving...)
[23:07:30] *** Quits: tyson2 (~user@24.114.68.51) (Ping timeout: 260 seconds)
[23:07:49] *** Joins: tyson2`` (~user@24.114.68.51)
[23:08:59] *** Quits: tyson2`` (~user@24.114.68.51) (Remote host closed the connection)
[23:09:22] *** Joins: notzmv (~zmv@user/notzmv)
[23:09:48] *** Joins: tyson2 (~user@24.114.68.51)
[23:13:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:14:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:17:05] *** Quits: tyson2 (~user@24.114.68.51) (Ping timeout: 265 seconds)
[23:17:25] *** Joins: tyson2`` (~user@24.114.68.51)
[23:25:30] *** Quits: tyson2`` (~user@24.114.68.51) (Ping timeout: 260 seconds)
[23:33:57] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:34:49] *** Joins: srhm (~srhm@user/srhm)
[23:37:26] *** Joins: pjb (~pjb@user/pjb)
[23:54:17] *** Quits: dra (~dra@2a04:4540:6420:a100:5d83:e105:f7e0:ca98) (Remote host closed the connection)
[23:56:21] *** Joins: omr (~omr@user/omr)
