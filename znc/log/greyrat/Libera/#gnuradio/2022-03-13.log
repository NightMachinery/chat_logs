[00:11:16] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[00:13:00] *** Joins: filename (~kilitary@188.68.215.221)
[00:20:11] *** Joins: debuggerx1[m]1 (~debuggerx@2001:470:69fc:105::1:d93c)
[00:33:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:34:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:38:07] *** Joins: _filename (~kilitary@188.242.105.134)
[00:40:30] *** Quits: filename (~kilitary@188.68.215.221) (Ping timeout: 250 seconds)
[00:40:33] *** _filename is now known as filename
[01:10:36] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[01:31:11] *** Joins: axelrod (~axelrod@user/axelrod)
[01:31:31] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[01:32:53] *** Joins: hololeap (~hololeap@user/hololeap)
[01:37:01] *** Quits: pcero (~pcero@187.135.224.43) (Ping timeout: 245 seconds)
[01:42:40] *** Joins: sammp (~sammp@pool-108-45-131-92.washdc.fios.verizon.net)
[02:03:45] *** Quits: sammp (~sammp@pool-108-45-131-92.washdc.fios.verizon.net) (Quit: Leaving)
[02:48:53] *** Joins: harish_ (~harish@27.125.135.173)
[02:51:41] *** Quits: harish__ (~harish@158.140.144.42) (Ping timeout: 256 seconds)
[02:56:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:08:35] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[03:26:22] *** Joins: harish__ (~harish@27.125.135.173)
[03:26:25] <muaddib[m]> Anyone know if the master branch of gr-osmosdr supports GNURadio 3.10? drmpeg 
[03:26:26] <muaddib[m]> s//?/
[03:28:11] *** Quits: harish_ (~harish@27.125.135.173) (Read error: Connection reset by peer)
[03:39:18] <muaddib[m]> nvm, good old ```.gnuradio``` directory was pointing to the wrong place
[03:42:18] *** Quits: axelrod (~axelrod@user/axelrod) (Ping timeout: 252 seconds)
[04:12:43] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 256 seconds)
[04:13:31] *** Joins: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net)
[04:54:21] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 252 seconds)
[04:56:27] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:85bb:eb01:2201:ab92)
[05:27:48] *** Quits: filename (~kilitary@188.242.105.134) (Ping timeout: 250 seconds)
[05:30:08] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:85bb:eb01:2201:ab92) (Read error: Connection reset by peer)
[05:37:06] *** Joins: filename (~kilitary@188.242.105.134)
[06:26:42] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[06:36:10] *** Joins: locutox (~locu512@14-200-133-66.tpgi.com.au)
[06:47:46] <schneider> i've got a strange problem here on a raspberry pi 4:
[06:47:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:48:34] <schneider> it's running ubuntu 20.04 with gnuradio 3.10.1 from the PPA
[06:49:00] <muaddib[m]> whats up?
[06:49:22] <schneider> i've got a flow graph and inside that are two blocks which do some heavy lifting, mainly FFTs
[06:49:45] <schneider> what i observe is that their threads always sum up to 100% CPU
[06:50:49] <schneider> even if i pin them to two different cores, they always end up summing to 100% (so one might use 40% and the other might go to 60%). that slows down my flowgraph
[06:51:06] <schneider> it's almost like they have some kind of shared resource between them
[06:51:37] <schneider> but i'm not aware of any, they are pure DSP blocks using VOLK and gr::fft
[06:52:05] <drmpeg> Maybe FFTW?
[06:52:35] <schneider> the two blocks are directly connected to each other
[06:52:41] <schneider> drmpeg: i was wondering
[06:53:01] <schneider> either FFTW or the scheduler does something strange
[06:53:28] <schneider> but why would FFTW act like a shared resource?
[06:54:29] <drmpeg> Not sure. Just guessing.
[06:55:41] <drmpeg> Your not using the "threads" parameter in the FFT block, are you? That's known to be sort of broken.
[06:58:58] <schneider> it's set to 1
[06:59:22] <drmpeg> That's good.
[07:34:55] <schneider> using set_min_output_buffer() on the first block seems to help _a lot_
[07:35:26] <muaddib[m]> nice
[07:38:40] <schneider> i used an arbitrary number of 1000000 and troughput goes from 8 MSPS to 15 MSPS
[07:39:34] <muaddib[m]> that's awesome. I just built a pi4 with 3.10 on it. i'm gonna try this. 
[07:39:43] <schneider> essentially one of the blocks goes to 100% CPU now and the other is limited by the back pressure
[07:40:19] <muaddib[m]> if you play with the buffers that can have dramatic performance implications (both ways)
[07:41:16] <muaddib[m]> i've done some benchmarking (on x86) and i usually set the min/max to the same, so it's fixed.
[07:41:29] <muaddib[m]> have you read bastibl 's blog about this?
[07:41:52] <schneider> muaddib[m]: nope
[07:42:08] <schneider> this was just a wild guess...
[07:42:22] <muaddib[m]> https://www.bastibl.net/gnuradio-performance-1/
[07:42:35] <muaddib[m]> https://www.bastibl.net/gnuradio-performance-2/
[07:43:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:44:42] <schneider> muaddib[m]: i understand they are about general benchmarking?
[07:45:00] <schneider> anyways, I'm super happy about solving this right now :)
[07:45:08] <muaddib[m]> good stuff
[07:45:29] <schneider> but the gnuradio heuristic seems to have generated a way to small buffer
[07:46:07] <schneider> this also speeds up the flowgraph on my x86 machine
[07:46:12] <muaddib[m]> when you do the min/max buffers, optimization (in my experience) has to do with setting the sizes within the L1 cache size 
[07:46:15] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[07:46:16] <muaddib[m]> yes
[07:46:47] <muaddib[m]> you can install hwloc to see the cache sizes
[07:48:03] <muaddib[m]> then you can run ```lstopo``` to see the architecture and more importantly the cache sizes. you'll get something like this
[07:48:30] * muaddib[m] uploaded an image: (54KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/d548789b438b4e587632e96057de600a6bf10422/image.png >
[07:51:34] <schneider> experimentally with a buffer of >= 32k elements makes the difference. that is 256 kB
[07:51:39] <schneider> muaddib[m]: thanks!
[07:52:11] <muaddib[m]> no problem
[08:07:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[08:09:02] <drmpeg> Today I learned about CPU sets.
[08:09:08] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:10:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:19:13] <muaddib[m]> would they be supported on RISCV?
[08:35:59] *** Quits: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net) (Quit: Konversation terminated!)
[08:57:41] *** Joins: _filename (~kilitary@188.242.105.134)
[08:59:27] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 256 seconds)
[08:59:27] *** _filename is now known as filename
[09:25:22] *** Joins: harish_ (~harish@158.140.144.42)
[09:27:52] *** Quits: harish__ (~harish@27.125.135.173) (Ping timeout: 250 seconds)
[09:40:01] *** Quits: cuoops (~cuoops@user/cuoops) (Remote host closed the connection)
[09:42:54] *** Joins: cuoops (~cuoops@user/cuoops)
[09:49:48] *** Quits: Thorn (~Thorn@user/thorn) (Ping timeout: 240 seconds)
[10:34:39] *** Quits: balrog (znc@user/balrog) (Ping timeout: 256 seconds)
[10:43:19] *** Joins: balrog (znc@user/balrog)
[11:09:15] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[11:09:51] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[11:17:08] <drmpeg[m]> Looks like yes.
[11:17:27] * drmpeg[m] uploaded an image: (43KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/f1dd351d00c52d229c2027fe2fb4cd78100ef7be/lstopo.png >
[11:17:54] <muaddib[m]> nice!
[11:19:24] *** Quits: cuoops (~cuoops@user/cuoops) (Ping timeout: 240 seconds)
[11:22:14] <drmpeg> My "white whale" is really on x86 though. I've been trying to run a high-rate DVB-S2 transmit flow without an occasional underrun for years now.
[11:23:16] <muaddib[m]> so now your name is Ishmael? I thought it was Malakas?
[11:25:22] *** Joins: cuoops (~cuoops@user/cuoops)
[11:26:26] *** Joins: spithash (~spithash@user/spithash)
[11:35:45] <drmpeg> If it was a name, it would be more like Malakimenos.
[11:40:19] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:40:43] *** Joins: toulene (~toulene@user/toulene)
[11:42:51] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:43:48] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:8361:56cc:4786:217c)
[11:45:05] *** Joins: toulene (~toulene@user/toulene)
[11:50:35] <drmpeg> That's what we used to call this guy at the dive bar I used to hang out at. He was an actual 40 year old virgin.
[11:58:39] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[12:10:51] *** Quits: filename (~kilitary@188.242.105.134) (Quit: joined libera)
[12:30:11] *** Quits: HkonVgsether[m] (~haakovgnu@2001:470:69fc:105::e14e) (Quit: You have been kicked for being idle)
[12:37:58] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[12:57:10] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:8361:56cc:4786:217c) (Ping timeout: 250 seconds)
[12:59:39] <l4rrybr3nt[m]> could someone please verify this idea: adding a module to my .grc. the module opens a socket connection to my hostapplication and reports signallevel and also tunes the receiver if it receives a tune command from the hostapplication. so: can I put the socket handler into a module and start there as a thread, accessing the tune and signallevel variables? 
[13:09:04] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[13:09:17] *** Joins: spithash (~spithash@user/spithash)
[13:12:11] <Myon> l4rrybr3nt[m]: I've been playing with blocking operations in flowgraphs, running in new threads, afaict the way to communicate with the rest of the flowgraph is using messages
[13:12:33] <Myon> (here: opening a serial connection, opening a midi connection)
[13:17:46] <l4rrybr3nt[m]> <Myon> "l4rrybr3nt: I've been playing..." <- thx @Myon just tried with a thread but initially wanted to use ZMQ but I don't see how this all works together. Maybe I do a quick dirty thread and work with messages later on.
[13:18:49] <l4rrybr3nt[m]> need the receiver to communicate with my host application to control it some way
[13:21:24] <Myon> same here, I'm hooking a MIDI "DJ console" into the flowgraph that way
[13:26:08] <l4rrybr3nt[m]> Myon: ahh cool. like having a big vfo tune knob :D
[13:26:21] <Myon> exactly!
[14:03:13] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:13:04] <l4rrybr3nt[m]> > <@muaddib:gnuradio.org> I figure I owe you a real answer. This was mostly just a way to show you how to access values. Not a final solution. Using a custom python block like myon suggested it certainly another way to do it.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7be2857376499687505c02d0b2adb42dbfa9b883)
[14:14:35] <Myon> ah, I have that problem as well
[14:15:12] <l4rrybr3nt[m]> haha great!! I really need to be better at python coding I guess
[14:15:34] <Myon> l4rrybr3nt[m]: add a "Python Snippet" running "after init" with the code "self.your_python_module_name.tb = self"
[14:15:57] <Myon> then in your python module, self.tb is the top block
[14:16:10] <l4rrybr3nt[m]> 😍
[14:16:14] <Myon> and self.tb.whatever is all the other blocks
[14:16:20] <l4rrybr3nt[m]> let me check
[14:16:40] <Myon> https://www.df7cb.de/s/2022-03-13.114634.NKvcxu.png
[14:20:15] <l4rrybr3nt[m]> great! I will give it a try after filling up coffee.. Is that your site btw?
[14:20:30] <Myon> I have no idea why this isn't available by default, and I couldn't find anything on the web. But it wasn't too hard to figure out after reading the generated .py
[14:20:40] <Myon> yes
[14:22:32] <Myon> what stuff are you working on?
[14:22:41] <Myon> this is a QO100 base station
[14:25:14] <l4rrybr3nt[m]> thats for measuring transmitted signals in a lab, logging signal power and frequency offset over time
[14:25:24] <Myon> nod
[14:33:04] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:43:03] *** Joins: vekay (~vekay@user/vekay)
[15:06:53] *** Quits: locutox (~locu512@14-200-133-66.tpgi.com.au) (Quit: Leaving)
[15:18:53] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:a078:128:fe5d:8941)
[15:21:42] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:5cee:baec:1885:3c6a) (Read error: Connection reset by peer)
[15:22:03] <l4rrybr3nt[m]> arrrg this doesn't seem to work for me. Im sure it's my lousy coding. object has no attribute 'app_handler' :/  my module is imported though
[15:24:24] <Myon> is that the correct name? At the top of the generated .py there should be some import
[15:24:29] <Myon> import qo100_control as control  # embedded python block
[15:25:15] <Myon> https://github.com/df7cb/df7cb-shack/blob/master/gnuradio/qo100.py#L42-L47
[15:30:20] <l4rrybr3nt[m]> import app_handler  # embedded python module
[15:31:54] <l4rrybr3nt[m]> <Myon> "https://github.com/df7cb/df7cb-..." <- thats some advanced project! :D
[15:32:08] <Myon> ah the interesting like is actually self.control = control.blk()
[15:35:23] <l4rrybr3nt[m]> hm i see
[15:51:42] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[16:19:33] *** Quits: vekay (~vekay@user/vekay) (Quit: Leaving)
[16:46:36] <funkylab[m]> <l4rrybr3nt[m]> "> <@muaddib:gnuradio.org> I..." <- That *really* sounds like you should **not** be using probes, and that's exactly why something like that isn't available :)
[16:46:36] <funkylab[m]> You just want to decimate your data to the rate you want, and send it using one of the network sinks, or write a sink of your own. the signal probes are not really meant for observing anything remotely – their purpose is pretty much local display of things.
[16:47:08] <funkylab[m]> and, good news, if you know how to write python snippets, writing a python block that sends data somewhere isn't much harder :)
[16:50:55] <funkylab[m]> to explain why probes are *never* the solution: you assume there's a "main loop" somewhere. There simply isn't. Every block runs in its own thread, asynchronously, not caring how far the others have gotten. Every block in itself computes as fast as possible, with the data that's currently available and the output space (into the next block in the flowgraph) available. So probing signals in two places in the flow graph can easily be
[16:50:55] <funkylab[m]> thousands of samples "apart in logical time", have nothing to do with each other. Even worse, GNU Radio works with samples in blocks of very variable size, so that samples come– often in chunks of several thousand. If such a chunk contains, say 99999 values "12" and the last value is "-12", then all the probe will see if it queries after the chunk and before the next chunk, is -12. but that's a terrible, terrible representative of your
[16:50:55] <funkylab[m]> signal.
[16:52:26] <funkylab[m]> So, unless you really just need randomly sampled samples displayed for a human from a very high rate stream, i.e. where chunks always come buy faster than the display update rate, you do not use a probe
[16:53:31] <funkylab[m]> For more background on how the scheduler works (the variable sized work chunks, the separate threads, the backpressure mechanism controlling execution…): https://www.youtube.com/watch?v=cTGxhsSvZ9c 
[16:54:27] <funkylab[m]> Thinking about it, it would really sound like what you want is that the "normal" sample flow connections in your flow graph just ended in network, and there's already blocks for that :)
[17:02:41] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[17:14:24] <l4rrybr3nt[m]> funkylab: ok, I fully understand that. I am just looking for a fast solution, misusing the probed values (since they look accurate enough for a first try now). So the state of the art solution would be to delete the probes, write my own blocks that replace the probes and output my wanted value. Then multiplex these both values somehow and put them in a network sink. Right? This would be much cooler than what I do now but imagine from
[17:14:24] <l4rrybr3nt[m]> the point of a guy who isn't even able to read the function probes from within his own function. I want to dig deeper into this but I could really use some (unaccurate) result to play with for now.  
[17:15:43] <funkylab[m]> would quite possibly not even entail writing your own block: a low pass filter block feeding into a network sink directly, or into an interleaver block (or streams to vector)
[17:17:12] * l4rrybr3nt[m] uploaded an image: (375KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/89648725a8e5748ca2edab028b7b7fc0f8f0c305/image.png >
[17:18:16] <l4rrybr3nt[m]> thats how it looks like and what I want to use in the remote application is the value in both top right labels
[17:18:58] <l4rrybr3nt[m]> just signal power and pll offset .. doesn't even need to be fast
[17:54:49] <l4rrybr3nt[m]> ahh ok, got it working now. will dig into the more professional network sink approach later on! thanks funkylab Myon 
[18:57:37] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[18:57:39] *** Joins: toulene8 (~toulene@user/toulene)
[19:23:31] *** Joins: toulene (~toulene@user/toulene)
[19:23:43] *** Quits: toulene8 (~toulene@user/toulene) (Read error: Connection reset by peer)
[19:33:53] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[20:09:46] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:a078:128:fe5d:8941) (Quit: uros)
[20:16:52] *** Joins: mbs[m] (~bandobras@2001:470:69fc:105::1:d9ee)
[20:30:12] *** Joins: antani (~antani@user/antani)
[20:30:18] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[20:42:34] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[20:45:59] *** Quits: antani (~antani@user/antani) (Remote host closed the connection)
[20:47:24] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[20:49:38] <Myon> fwiw, could someone approve running the workflow checks on my PR? https://github.com/gnuradio/gnuradio/pull/5643
[21:02:05] <funkylab[m]> Myon:  gladly!
[21:02:50] <Myon> thanks!
[21:11:04] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:a504:9f33:de3b:e675)
[21:13:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:14:12] *** Quits: randyn (fbed2865@m434.ata.ams-1.nl.appbox.co) (Ping timeout: 250 seconds)
[21:15:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:15:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:17:07] *** Joins: randyn (7ba4c16b@m434.ata.ams-1.nl.appbox.co)
[21:17:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:56:43] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:fa0b:a5ed:4e55:3692)
[22:59:49] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Read error: Connection reset by peer)
[23:00:01] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[23:11:09] <muaddib[m]> l4rrybr3nt: you might check out these projects i've done. they are for remote stations that operate over low-data rate. You can have remote visualization and control. it uses all in-tree blocks and is very portable/deployable. My applications focus on sending a periodic stream of FFT vectors from a headless remote machine to a local machine. you could easily add a pll offset or whatever. There's instructions in the readme. It's also shown
[23:11:09] <muaddib[m]> in the XMLRPC tutorials. 
[23:11:09] <muaddib[m]> https://github.com/muaddib1984/arrakis
[23:11:09] <muaddib[m]> https://github.com/muaddib1984/stillsuit
[23:12:37] *** Joins: ve7it (~LawrenceG@s0106f0f249afdb93.pk.shawcable.net)
[23:15:13] <muaddib[m]> <funkylab[m]> "For more background on how the..." <- I prefer your grcon2017 lightning talk where you go through the entire scheduler in 5 minutes while running a _braindead_ in fastforward
[23:28:47] <funkylab[m]> Oh that was silly :)
[23:30:43] <muaddib[m]> silly AND informative
[23:34:24] *** Joins: pcero (~pcero@187.135.224.43)
[23:34:38] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:fa0b:a5ed:4e55:3692) (Quit: uros)
[23:35:38] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[23:35:52] <funkylab[m]> ... about the advantages of lawn mowers!
[23:36:38] <muaddib[m]> haha
[23:36:46] <muaddib[m]> and not using throttle blocks
[23:39:24] <patchvonbraun[m]> Loved my lawn tractor back in the day.  I could get on it with a drink and some nice thoughts in my head, and spend a couple or three hours on it mowing the immediate "yard" around our farm house.   No nagging spouse, no screaming kids.  Many bits of code for my early radio astronomy apps were created while riding that lawn tractor :) :)
[23:39:52] *** Joins: axelrod (~axelrod@user/axelrod)
[23:48:54] <atluxity> people dont do enough of that these days... just think for themeself. always some podcast, or audiobook on the ear or something
[23:59:00] *** Quits: axelrod (~axelrod@user/axelrod) (Ping timeout: 240 seconds)
