[00:03:10] *** Joins: kensanata (~user@user/kensanata)
[00:04:04] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:04:18] *** Joins: on^ (~on@12.203.127.82)
[00:06:13] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[00:06:41] *** Quits: EGD (~egd@user/egd) ()
[00:07:58] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[00:10:35] *** tg_ is now known as tg
[00:13:59] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[00:19:45] *** Quits: ritsch_master (~user@91.141.77.186.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[00:21:17] *** Joins: ritsch_master (~user@91.141.77.186.wireless.dyn.drei.com)
[00:21:26] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[00:21:42] * GumbyPAN CPAN Upload: perl-5.35.4 by WOLFSAGE https://metacpan.org/release/WOLFSAGE/perl-5.35.4
[00:22:08] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:24:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[00:27:11] *** Joins: semeion (~semeion@user/semeion)
[00:28:35] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:31:43] * GumbyPAN CPAN Upload: CPAN-Perl-Releases-5.20210920 by BINGOS https://metacpan.org/release/BINGOS/CPAN-Perl-Releases-5.20210920
[00:31:43] * GumbyPAN CPAN Upload: Module-CoreList-5.20210920 by BINGOS https://metacpan.org/release/BINGOS/Module-CoreList-5.20210920
[00:35:16] *** Quits: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net) (Quit: Leaving)
[00:49:56] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:50:46] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[00:51:41] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:5bca:5533:a654:c13a)
[00:56:40] *** Joins: proller (~p@80.240.216.69)
[00:59:03] *** Quits: ritsch_master (~user@91.141.77.186.wireless.dyn.drei.com) (Remote host closed the connection)
[01:01:29] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[01:01:47] * GumbyPAN CPAN Upload: libwww-perl-6.57 by OALDERS https://metacpan.org/release/OALDERS/libwww-perl-6.57
[01:01:51] *** Joins: proller (~p@2a02:6b8:b081:3::1:1)
[01:02:07] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:10:27] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:19:41] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[01:30:17] *** Joins: sasho (~sasho@80.72.92.226.coresnet.bg)
[01:31:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 246 seconds)
[01:33:23] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[01:35:05] *** Quits: magla (~gelignite@55d4b2c3.access.ecotel.net) (Quit: Stay safe!)
[01:38:16] <EvanCarroll> aquanight: `use constant HAS_DATAVALIDATE_IP => eval { require Data::Validate::IP }; "Data::Validate::IP"->require() if HAS_DATAVALIDATE_IP()`
[01:42:53] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[01:43:26] *** Quits: on^ (~on@12.203.127.82) (Remote host closed the connection)
[01:43:32] <sasho> is there anything like undefine in regex - so like I can delete a named match - I know I can do it with (*F) and an or to continue the pattern but it requires one level deep parentheses - I also know there is (DEFINE)
[01:43:54] <sasho> thanks in advance
[01:44:26] *** Joins: diskin (~diskin@87.117.63.122)
[01:46:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:47:20] *** Joins: whynot (~whynot@37.73.61.216)
[01:47:41] *** Quits: proller (~p@2a02:6b8:b081:3::1:1) (Ping timeout: 246 seconds)
[01:49:33] <haarg> EvanCarroll: ->require ?
[01:51:02] *** Quits: n0xff (~0xff@gateway/tor-sasl/n0xff) (Remote host closed the connection)
[01:54:22] <RoyK> aquanight: I ended up with something like this http://paste.debian.net/1212593/ - does it look ok?
[01:54:23] <Paperbot> Link title(s): [ debian Pastezone ]
[01:58:08] <ether> RoyK: there's no need for the 'import' call
[01:58:35] <RoyK> ether: oh
[01:59:00] <RoyK> I just read some random internet stuff that said it was
[01:59:10] <ether> 1. you don't want to be modifying your local symbol table at runtime, therefore 2. you should only call import in an eval if there's a particular side effect that you need. [is there? no there isn't; that module doesn't implement the import method so it doesn't do anything special]
[02:00:08] <RoyK> thanks
[02:00:32] *** Joins: proller (~p@2a02:6b8:b081:7201::1:2f)
[02:26:36] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[02:44:20] *** Quits: sasho (~sasho@80.72.92.226.coresnet.bg) (Quit: Leaving)
[02:44:30] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 264 seconds)
[03:02:09] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:05:10] <EvanCarroll> erg, haarg  ->import()
[03:05:12] <EvanCarroll> doh
[03:05:23] <EvanCarroll> aquanight: `use constant HAS_DATAVALIDATE_IP => eval { require Data::Validate::IP }; "Data::Validate::IP"->import() if HAS_DATAVALIDATE_IP()`
[03:05:35] <haarg> conditional or runtime import is usually a terrible idea
[03:06:19] <EvanCarroll> I'll up you, import is usually a terrible idea.
[03:06:52] <EvanCarroll> but whatever you can force it to compile time with BEGIN {} if you want
[03:07:48] <haarg> that doesn't really many it any better
[03:08:06] <haarg> probably makes it worse
[03:08:44] <ether> conditional namespace imports is useless because you can't depend on the sub being present. so you'll have to use the fully-qualified name anyway
[03:09:11] <ether> and using the fully qualified name is clearer as well
[03:09:48] <haarg> foo() still compiles fine even if the sub is missing
[03:10:02] <haarg> so a conditional import can still "work"
[03:10:22] <haarg> just hope there's no prototype
[03:12:00] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-17-76-68-65-112.dsl.bell.ca) (Quit: Konversation terminated!)
[03:25:36] *** Joins: aspic (~shifty~~~@ppp121-44-112-181.syd-gls-har-bras39.tpg.internode.on.net)
[03:29:12] <EvanCarroll> and import doesn't just import. it can do all kinds of shit.
[03:31:37] *** Quits: aspic (~shifty~~~@ppp121-44-112-181.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:33:48] *** Quits: pizdets_ (~pizdets@183.182.111.213) (Ping timeout: 268 seconds)
[03:33:51] *** Joins: pizdets (~pizdets@183.182.110.57)
[03:36:23] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:38:27] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[03:43:21] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:54:05] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:01:23] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[04:17:55] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[04:23:38] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[04:38:37] *** Quits: zamanf (~moo@2a02:587:de16:8a00:e595:2383:724a:5de) (Ping timeout: 252 seconds)
[04:39:25] *** Quits: whynot (~whynot@37.73.61.216) (Quit: Lost terminal)
[04:56:20] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 246 seconds)
[04:57:36] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:59:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[05:01:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:02:59] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 246 seconds)
[05:04:52] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:07:18] *** Joins: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr)
[05:15:07] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:17:29] *** Quits: proller (~p@2a02:6b8:b081:7201::1:2f) (Ping timeout: 264 seconds)
[05:20:30] *** Quits: Pali (~pali@user/pali) (Ping timeout: 264 seconds)
[05:34:57] *** Joins: aspic (~shifty~~~@ppp121-44-112-181.syd-gls-har-bras39.tpg.internode.on.net)
[05:42:41] *** Joins: proller (~p@2a02:6b8:b081:8021::1:11)
[05:49:21] *** Joins: brtastic (~Thunderbi@185.24.91.138)
[05:59:57] *** Joins: hodbogi (~hodbogi@user/fatalnix)
[06:17:30] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:25:22] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:26:40] *** Quits: Su-Shee (~Susanne@p50894984.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:28:07] *** Joins: Su-Shee (~Susanne@p50894549.dip0.t-ipconnect.de)
[06:36:14] *** Joins: eramirez (~eramirez@49.144.39.35)
[06:38:51] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:39:31] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[06:39:31] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[06:43:48] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[07:01:53] *** Quits: proller (~p@2a02:6b8:b081:8021::1:11) (Ping timeout: 264 seconds)
[07:02:13] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 268 seconds)
[07:05:32] *** Quits: brtastic (~Thunderbi@185.24.91.138) (Ping timeout: 246 seconds)
[07:12:31] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[07:14:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[07:16:29] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:16:41] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:16:54] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:21:25] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:5bca:5533:a654:c13a) (Quit: Konversation terminated!)
[07:21:41] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:8c4a:e14d:a17e:f85a)
[07:24:23] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:25:06] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:26:29] *** Quits: amnesiac (~amnesiac@2601:646:4104:29b0:8c4a:e14d:a17e:f85a) (Ping timeout: 264 seconds)
[07:27:25] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[07:35:35] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:36:30] * GumbyPAN CPAN Upload: BioX-Seq-0.008002 by VOLKENING https://metacpan.org/release/VOLKENING/BioX-Seq-0.008002
[07:47:03] *** Joins: gast0n (~g4570n@user/gast0n)
[07:47:12] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[07:49:05] *** Quits: llh (~llh@user/llh) (Ping timeout: 268 seconds)
[07:50:00] *** Joins: llh (~llh@198.48.244.21)
[07:50:17] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 246 seconds)
[08:01:26] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[08:11:39] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:12:00] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[08:15:00] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[08:16:34] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 260 seconds)
[08:16:35] * GumbyPAN CPAN Upload: Chess-Plisco-0.2 by GUIDO https://metacpan.org/release/GUIDO/Chess-Plisco-0.2
[08:18:49] *** Quits: ignarps (~iggy@user/ignarps) (Quit: ZNC - https://znc.in)
[08:21:05] *** Quits: Martchus (~martchus@2a01:c22:7208:f800:d250:99ff:fe49:3cce) (Ping timeout: 264 seconds)
[08:21:13] *** Joins: Martchus_ (~martchus@dynamic-095-118-141-015.95.118.pool.telefonica.de)
[08:23:45] *** Joins: ignarps (~iggy@user/ignarps)
[08:31:36] * GumbyPAN CPAN Upload: JSON-Schema-Modern-0.519 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.519
[08:47:41] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 246 seconds)
[08:49:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:49:53] *** Quits: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr) (Ping timeout: 264 seconds)
[08:51:50] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[08:52:14] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:00:10] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 264 seconds)
[09:01:44] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:09:28] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 268 seconds)
[09:12:12] *** Joins: zamanf (~moo@2a02:587:de16:8a00:55f5:af43:eca3:2d19)
[09:20:36] *** Joins: mattil (~mattil@d4jsrctyr6-8gtkhj2f-4.rev.dnainternet.fi)
[09:23:48] *** Quits: mattil (~mattil@d4jsrctyr6-8gtkhj2f-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:26:42] * GumbyPAN CPAN Upload: SPVM-0.9014 by KIMOTO https://metacpan.org/release/KIMOTO/SPVM-0.9014
[09:34:40] *** Joins: mattil (~mattil@d4jsrctyr6-8gtkhj2f-4.rev.dnainternet.fi)
[09:35:22] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[09:38:47] *** Quits: mattil (~mattil@d4jsrctyr6-8gtkhj2f-4.rev.dnainternet.fi) (Ping timeout: 246 seconds)
[09:43:55] *** Joins: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net)
[09:45:52] <xq> perlbot: docker
[09:45:52] <perlbot> xq: VMs for people too lazy to set up VMs
[09:46:42] <xq> is there a document somewhere describing deployment of perl applications as docker containers?
[09:47:09] <xq> perlbot: podman
[09:47:09] <perlbot> xq: No factoid found. Did you mean one of these: [python] [padawan] [patogen] [pattern] [pod2html] [pod] [patience] [.porn] [porn] [potc]
[09:47:27] <xq> perlbot: padawan
[09:47:30] <perlbot> xq: Apprentice Jedi
[09:56:03] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[10:00:00] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:04:10] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Ping timeout: 252 seconds)
[10:04:10] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 252 seconds)
[10:04:17] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 264 seconds)
[10:05:15] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[10:05:18] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[10:05:48] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[10:05:48] *** ChanServ sets mode: +v perlbot
[10:06:08] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:07:08] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:c833:17dc:ee27:efe1) (Ping timeout: 246 seconds)
[10:12:56] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[10:18:36] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:26:17] *** Quits: amnesiac (~amnesiac@c-73-189-251-48.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[10:31:22] *** Joins: krismatrix (~krismatri@38.80.149.51)
[10:31:32] *** Quits: krismatrix (~krismatri@38.80.149.51) (Client Quit)
[10:43:36] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:54:53] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[11:02:14] *** Joins: tejr (~tejr@user/tejr)
[11:08:34] *** Joins: tobybl (~tobybl@210.242.200.146.dyn.plus.net)
[11:11:24] *** Joins: ircuser (~ircuser@89.111.36.243)
[11:16:38] *** Joins: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be)
[11:16:48] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Ping timeout: 240 seconds)
[11:16:51] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Ping timeout: 250 seconds)
[11:19:01] *** Quits: v` (~v@user/ctrl) (Ping timeout: 252 seconds)
[11:30:25] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[11:30:25] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[11:30:25] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[11:30:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:30:43] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[11:30:43] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[11:30:43] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[11:33:22] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[11:46:54] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:47:26] *** Joins: mattil (~mattil@airio.portalify.com)
[11:54:32] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com)
[11:56:41] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:57:14] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Ping timeout: 265 seconds)
[11:58:02] *** Joins: choroba (~E.Choroba@88.146.255.106)
[11:59:11] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[11:59:11] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Read error: Connection reset by peer)
[11:59:29] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 246 seconds)
[11:59:31] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[11:59:31] *** ChanServ sets mode: +v perlbot
[12:00:21] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[12:01:17] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[12:04:21] *** jplesnik_ is now known as jplesnik
[12:10:06] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:10:48] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:24:58] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[12:24:58] *** diskin is now known as Guest2705
[12:24:58] *** diskin_ is now known as diskin
[12:26:40] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[12:27:20] *** Quits: Guest2705 (~diskin@87.117.63.122) (Ping timeout: 252 seconds)
[12:28:51] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[12:31:39] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:34:08] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 246 seconds)
[12:36:46] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:38:19] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 252 seconds)
[12:38:53] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[12:40:31] *** Joins: jplesnik_ (jplesnik@nat-pool-brq-t.redhat.com)
[12:40:43] *** Quits: jplesnik_ (jplesnik@nat-pool-brq-t.redhat.com) (Client Quit)
[12:41:00] *** Joins: jplesnik_ (jplesnik@nat-pool-brq-t.redhat.com)
[12:41:08] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[12:43:14] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:43:14] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 252 seconds)
[12:43:32] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[12:44:43] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:57:34] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[12:58:40] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[13:02:15] *** jplesnik_ is now known as jplesnik
[13:03:33] *** Joins: brtastic (~Thunderbi@185.24.91.138)
[13:10:06] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[13:23:12] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[13:24:13] *** Joins: pj (~pj@ghettoforge/pj)
[13:29:08] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:29:32] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:42:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:48:41] <andrzejku> hi
[13:49:02] <andrzejku> do you know how can I test local module
[13:51:39] <LeoNerd> Vague question is vague
[13:52:14] <vague> I do not identify as a vague question
[14:00:04] <andrzejku> LeoNerd, I mean I got a dependency on which I rely
[14:00:10] <andrzejku> that's a perl module
[14:00:17] <andrzejku> but it has something missing what I want to add
[14:00:32] <andrzejku> so now I want to test my own module with module with my modification
[14:00:36] <andrzejku> and I just think how to do that
[14:02:31] <choroba> what kind of modification is it?
[14:05:04] <andrzejku> I am trying to add new FFI function
[14:05:10] <andrzejku> in pm module
[14:12:34] <Altreus> use PERL5LIB or perl -I to point to the development lib directory
[14:12:54] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (Quit: WeeChat 3.2)
[14:13:06] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[14:15:11] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:16:19] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[14:17:14] * GumbyPAN CPAN Upload: App-ansicolumn-1.13 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.13
[14:20:11] <andrzejku> Altreus, I added to -I the directory to modified module but after printing %INC I still see the core path
[14:21:20] <andrzejku> maybe it has to be module/lib
[14:22:13] <andrzejku> ahh solved
[14:23:56] <Altreus> yeah you have to point to the right base dir :)
[14:30:09] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:34] *** Joins: randir (~randir@93.159.239.42)
[14:30:41] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:30:53] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:30:56] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:33:54] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:34:09] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:38:37] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:44:41] *** Joins: Pali (~pali@user/pali)
[14:51:18] * GumbyPAN CPAN Upload: Alien-libvterm-0.01_002 by PEVANS https://metacpan.org/release/PEVANS/Alien-libvterm-0.01_002
[14:59:21] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:01:25] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:08:26] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (Quit: WeeChat 3.3)
[15:08:42] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[15:10:14] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:11:13] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:13:56] *** Quits: aspic (~shifty~~~@ppp121-44-112-181.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[15:14:04] *** Joins: aspic (~shifty~~~@ppp121-44-117-12.syd-gls-har-bras39.tpg.internode.on.net)
[15:19:02] *** Quits: Guest1413 (ponyblocks@2605:6400:c847:1478::8741) (Changing host)
[15:19:02] *** Joins: Guest1413 (ponyblocks@user/ponyblocks)
[15:19:22] *** Joins: SKYDAD (~NwApSlLeH@user/skydad)
[15:20:26] <SKYDAD> is it possible to make a perl bot, connect to multiple irc servers @ once??
[15:26:52] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Reboot…)
[15:27:01] <rindolf> SKYDAD: hi, it is
[15:27:17] <rindolf> perlbot: irc
[15:27:17] <perlbot> rindolf: Don't parse IRC with regex! See Bot::BasicBot (and Bot::BotBasic::Pluggable), POE::Component::IRC, Net::Async::IRC, Mojo::IRC, or Parse::IRC. Avoid Net::IRC. | http://xkcd.com/1782/ | If you must use TCP directly, take a look at POE::Filter::IRC or Parse::IRC for parsing.
[15:27:36] <SKYDAD> hmm
[15:32:42] *** Joins: solitario (~adrian@www3.kiess.onl)
[15:39:18] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[15:41:37] <SKYDAD> so like if a guy wanted to make a bot like this connect to multiple servers .. would it be a huge rewrite.. or just a cpl lines https://github-dotcom.gateway.web.tr/falsovsky/idlerpg/blob/master/bot.pl
[15:41:39] <Paperbot> Link title(s): [ New AI Technology DDoS Protection System ]
[15:42:28] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:44:41] <rindolf> SKYDAD: seems like it's not using an IRC module
[15:45:15] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:45:39] <SKYDAD> so not easy to do then?
[15:46:03] <ology> SKYDAD: I would read up on https://metacpan.org/pod/Mojo::IRC to see if you can make it dowhat you want.
[15:46:03] <Paperbot> Link title(s): [ Mojo::IRC - IRC Client for the Mojo IOLoop - metacpan.org ]
[15:46:51] <SKYDAD> ok 
[15:46:53] <SKYDAD> ty
[15:49:56] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:50:32] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:51:24] * GumbyPAN CPAN Upload: Media-Convert-1.0.0 by WOUTER https://metacpan.org/release/WOUTER/Media-Convert-1.0.0
[15:53:47] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[15:54:50] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[15:56:03] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:56:15] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:08:12] <Altreus> anyone got any idea why my digitalocean VM is refusing to use swap space? I've fiddled with the swappiness value and it's just not using it under any circumstances
[16:08:43] <Altreus> it just crashes my process - a process of which I have no control or understanding because it's some fancy-pants modern node system someone else made
[16:10:00] <Altreus> quite why it needs 800M of memory I don't know
[16:12:25] <Altreus> never mind - it was killing itself
[16:12:28] <Altreus> ffs
[16:13:24] <Altreus> imagine targetting an audience that doesn't know how to ulimit!
[16:18:09] *** Joins: proller (~p@2a02:6b8:0:40c:440a:1759:c691:83ba)
[16:31:04] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[16:32:13] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[16:40:52] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:51:07] <daemon> Altreus, it wants to be freebsd and its telling you by refusing to swap
[16:53:18] <simcop2387> Altreus: node has been kinda terrible about dealing with ulimit and cgroups in my experience too.  it's part of why i don't really support it nicely in the sandbox
[16:53:54] <ircuser> I have seen my linux also not using swapspace after I enable it for weeks, then at some magic point it starts using it.
[16:54:12] <daemon> all my linux boxs seem to startu sing it pretty quickly
[16:54:31] <daemon> then again
[16:54:32] <daemon> MiB Mem :  11976.0 total,   1764.1 free,    267.8 used,   9944.1 buff/cache
[16:54:32] <daemon> MiB Swap:   8192.0 total,   8188.5 free,      3.5 used.  11554.6 avail Mem
[16:54:40] <daemon> I think you need memory pressure to get it to use it
[16:54:46] <simcop2387> lol
[16:54:53] *** Quits: zamanf (~moo@2a02:587:de16:8a00:55f5:af43:eca3:2d19) (Ping timeout: 246 seconds)
[16:55:22] <daemon> ah wait wrong box - was there thinking ... was sure it was using more than that
[16:55:59] <daemon> yeah it msut be a memory pressure thing
[16:56:17] <daemon> if there is memory free that can be reused from conventional ram, do not page to swap
[16:56:19] <daemon> which makes sense
[17:01:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:02:02] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:02:11] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:02:58] <ircuser> yea, I remember some month ago I also had 64G of swap and then I overdid with some task and ran out of RAM, box froze and came back in ~30 seconds, with half the swap filled
[17:03:20] <ircuser> those were very nerve wretching 30 seconds
[17:07:30] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:07:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:07:43] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:11:41] *** Martchus_ is now known as Martchus
[17:18:20] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:22:22] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:22:58] <daemon> :)
[17:30:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:33:32] <Altreus> it used swap when I manually override the node memory limit per some random github comment
[17:38:43] <phryk> Why does passing a hash into a function make everything explode all the time?
[17:39:11] <LeoNerd> ?
[17:40:58] <phryk> I pass a hash into a function, that function takes the hash as $user, but as soon as I try doing $user{'somekey'} the thing completely shits its pants, saying I need %user in the local scope or whatever… but using % instead of $ in any of the places involving $user doesn't fix anything – just leads to a different error.
[17:41:10] <phryk> no idea what's going on with that
[17:42:44] <phryk> specifically, the error message is "Global symbol "%user" requires explicit package name (did you forget to declare "my %user"?)"
[17:42:48] <Altreus> $user isn't a hash
[17:43:05] <phryk> which is kind of pointless because that's the error message i get for every single kind of problem i encounter…
[17:43:07] <Altreus> the function takes the hash as %user
[17:43:23] <phryk> Altreus: I tried that, just exploded in a different way.
[17:43:25] <vague> (it's a hashref, probably)
[17:43:46] <vague> perldoc, perlreftut
[17:43:46] <perlbot> vague: Your documentation is available at: https://perldoc.perl.org/perlreftut
[17:43:58] <Altreus> <mst> have you considered learning perl? </mst>
[17:44:11] <Altreus> with that out of my system, you're doing it wrong
[17:44:19] <Altreus> if it's a hashref you have to use $user->{somekey}
[17:44:25] <Altreus> if it's a hash you have to put it in %user
[17:44:29] <Altreus> you've mixed both worlds
[17:44:51] <phryk> wait, so hashes are used in a different fashion based solely on whether they're passed as value or reference?
[17:45:08] <Altreus> that's a disingenuous way of putting it
[17:45:12] <Altreus> References have to be dereferenced
[17:45:23] <Altreus> Everything is used differently if you pass it as a reference
[17:45:34] <Altreus> otherwise no, they are used in the same fashion
[17:45:36] <LeoNerd> That'll be you not really following what is going on
[17:45:36] <LeoNerd> Are you perhaps wanting to pass a _reference to_ a hash?
[17:45:36] <LeoNerd> If so, values within it are  $href->{keyname}
[17:45:58] <corwin> the "sigel" tells perl/us what data type we are dealing with as it is being used here and now, not the kind of var underling the storage.
[17:46:01] <Altreus> LeoNerd: looks like you got interrupted by the lag beast
[17:46:16] <phryk> I didn't even know Perl differentiated. I've done like one year of perl a decade back, since then mostly python.
[17:46:55] <phryk> python just passes everything as reference, so no difference.
[17:46:58] <Altreus> It differentiates because they're different :)
[17:47:10] <Altreus> yes, python doesn't have context
[17:47:23] <LeoNerd> Altreus: local wifi
[17:47:35] <Altreus> eval: local wifi
[17:47:39] <perlbot> Altreus: ERROR: Can't modify constant item in local at (IRC) line 1, at EOF 
[17:47:40] <corwin> contexts are one of the things py seems to feel are too difficult for developers to use properly.
[17:48:01] <LeoNerd> It's a safety-scissors language
[17:48:15] <corwin> nice take tbh
[17:48:48] <phryk> That's one of the reasons I like python so much. :P
[17:49:10] <phryk> So, what's the difference between context and scope`
[17:49:26] <LeoNerd> Safety-scissors are fine if you're a newbie and don't want to hurt yourself, but sometimes you want the full power of an industrial milling machine
[17:49:47] <LeoNerd> Such a machine can easily take your fingers off if you're not careful, but if you know how to use it you can do lots of powerful things with it
[17:50:03] <corwin> scope has to do with variable storage.  each "scope" has it's own table of symbols.  context is about picking correctly from the given symbol table (and other fancyness)
[17:50:18] <LeoNerd> { here is a scope { here is a smaller inner scope inside of it } and here we're back outside again }
[17:50:26] <LeoNerd> ^-- variables can't leak outside of a {...} scope
[17:50:38] <phryk> Yes, that I grok.
[17:50:52] <LeoNerd> my @arr = I_expect_to_yield_a_list;   my $scalar = Whereas_I_return_a_single_scalar;
[17:51:12] <corwin> Context the differences between hearing FIRE and running or hearing FIRE and shooting.
[17:51:16] <LeoNerd> ^-- "list" and "scalar" are types of context
[17:52:00] <Altreus> context is the difference between fruit flies like a banana and fruit flies like a banana
[17:52:14] <phryk> I just read https://perldoc.perl.org/perlglossary#context and it's not even logically coherent with void context being both it's own top-class context type and a subtype of the scalar context…
[17:52:14] <Paperbot> Link title(s): [ perlglossary - Perl Glossary - Perldoc Browser ]
[17:52:28] <vague> Altreus++ # :)
[17:52:53] <phryk> Great, that all doesn't tell me anything. :P
[17:52:55] <Altreus> phryk: that's a confusing equivocation on the term context
[17:53:03] <Altreus> there's list, scalar, and void
[17:53:09] <revhippie> Altreus: join ' ', ('buffalo') x 7;
[17:53:37] <LeoNerd> Uh, yeah that doc isn't worded very well. I'm not sure why it's talking about that subdivision stuff. That isn't context at all
[17:53:44] <LeoNerd> There's void, scalar, list. That is it
[17:53:52] <LeoNerd> That's all there is to it
[17:54:32] <phryk> so, i repeat my question: what actually is a context?
[17:54:37] <Altreus> phryk: if the context expects a list, a list is provided; if it expects a scalar value, a scalar is provided.
[17:54:50] <LeoNerd> "context" is what the caller says they want from you
[17:55:00] <LeoNerd> Do they want a list of stuff, a single thing (scalar). or nothing at all (void)
[17:55:01] <genio> phryk: my $scalar = some_foo();    <-- caller wants a scalar.  scalar context
[17:55:04] <LeoNerd> context comes from outside
[17:55:16] <genio> my @list = some_foo();   <-- caller wants a list. list context
[17:55:34] <genio> some_foo();   <-- void context
[17:55:45] <Altreus> eval: my %user = ( name => 'phryk', preferred_language => 'python' ); my $user = %user; $user
[17:55:46] <perlbot> Altreus: 2
[17:55:54] <Altreus> phryk: this
[17:56:34] <Altreus> A hash in scalar context is not a reference to the hash, it's the number of keys apparently
[17:56:37] <Altreus> when did that change
[17:56:37] <revhippie> @foo = ('a', 'b', 'c');  @bar = @foo; $nuts = @foo; # @bar is a copy of @foo, $nuts is the length of @foo
[17:56:47] <phryk> Altreus: can you walk me through this? first statement defines a hash, second one binds it to a reference, i guess? third does??
[17:56:56] <Altreus> eval: my %user = ( name => 'phryk', preferred_language => 'python' ); my $user = \%user; $user
[17:56:57] <perlbot> Altreus: {name => "phryk",preferred_language => "python"}
[17:57:08] <Altreus> phryk: this is putting a reference, which is a scalar, into a scalar
[17:57:12] <LeoNerd> Altreus: 5.twenty-something... It was decided that the whole "2/4" notation thing was silly
[17:57:48] *** Joins: YaoNai (~YaoNai@user/yaonai)
[17:57:49] <Altreus> does lists and things cover this?
[17:57:51] <Altreus> perlbot: lists and things
[17:57:51] <perlbot> Altreus: http://altreus.blogspot.com/2011/08/lists-and-things-made-of-lists.html
[17:57:56] <Altreus> maybe
[17:58:15] <_73> phryk: something I commonly do in my for the return statement of my subroutines is `return wantarray ? @arr : \@arr`. The wantarray function gives true if the caller is in list context, and so I pass back an array of values. Otherwise the caller is in scalar context so I return a reference to the array.
[17:58:19] <Altreus> perlbot: anatomy of types
[17:58:19] <perlbot> Altreus: http://altreus.blogspot.com/2011/06/anatomy-of-types.html
[17:58:22] <phryk> Wait there's backslashes, too? o_O
[17:58:28] <LeoNerd> _73: yeah but that's _terrrrrrrible_. Don't do that
[17:58:32] <Altreus> phryk: yes because we need references
[17:58:50] <Altreus> phryk: because if you try to put a data structure into a scalar you get the structure in scalar context
[17:59:00] <phryk> so \$foo returns a pointer to $foo?
[17:59:03] <LeoNerd> phryk: It's a way to talk about a box, separately from the current contents *of* the box
[17:59:07] <Altreus> phryk: broadly
[17:59:16] <LeoNerd> Variables are boxes. We can put things in those boxes
[17:59:23] <_73> LeoNerd: how come?
[17:59:24] <Altreus> Don't use "pointer" because you will think it behaves like a pointer
[17:59:26] <LeoNerd> Sometimes we want to talk about the box itself, sometimes about the contents of the box
[17:59:34] <Altreus> _73: wantarray considered harmful
[17:59:53] <Altreus> you're doing something we experimented with for about 5 years and decided was a terrible idea
[17:59:55] <LeoNerd> perlbot: wantarray
[17:59:55] <perlbot> LeoNerd: http://www.perlmonks.org/?node_id=729965
[18:00:09] <Altreus> The sum total of that experience does not fit in an answer to "how come?"
[18:00:13] <phryk> Altreus: reference or whatever then.
[18:00:23] <_73> What would you do instead?
[18:00:26] <LeoNerd> "reference" is the perl word
[18:00:35] <Altreus> phryk: yes that is correct
[18:00:39] <LeoNerd> _73: I would decide whether the function ought to return a list of stuff, or just one thing. and stick to it
[18:00:41] <LeoNerd> And document it
[18:00:42] <LeoNerd> and test it
[18:00:51] <LeoNerd> And be really really 100% clear in all the uses of it, which one it is
[18:01:00] <Altreus> eval: my @array = qw(foo bar baz); my $count = @array; my $ref = \@array; [ $count, $ref ]
[18:01:01] <perlbot> Altreus: [3,["foo","bar","baz"]]
[18:01:13] <Altreus> phryk: context determines how the data structure is handled
[18:01:25] <Altreus> it also determines what the comma operator does!
[18:01:38] * GumbyPAN CPAN Upload: WWW-ELISA-0.06 by VPEIL https://metacpan.org/release/VPEIL/WWW-ELISA-0.06
[18:01:42] <Altreus> eval: my $item = ('a', 'b', 'c'); $item
[18:01:44] <perlbot> Altreus: c
[18:01:47] <phryk> And the context is set by the char preceding a variable name? i.e. $,@,%?
[18:02:01] <LeoNerd> The context is dermined by the caller, generally...
[18:02:01] <Altreus> yes in the case of =
[18:02:15] <LeoNerd> E.g. in the case of assignment, what you're assigning into decides what the context is
[18:02:17] <Altreus> which is probably the most common case I guess
[18:02:33] <LeoNerd> Assigning into something listy, it's in list context. Assigning into something scalary, it's in scalar context
[18:02:48] <Altreus> Other places context happens are if(), while(), for()
[18:02:51] <LeoNerd> my @arr = LIST;  my %hash = LIST;  my ($x, $y, $z) = LIST; ...  all of these are listy
[18:03:12] <LeoNerd> my $scalar = SCALAR; $hash{akey} = SCALAR; ...   all of these are scalary
[18:03:34] <LeoNerd> Altreus: huh? context happens _everywhere_
[18:03:43] <Altreus> LeoNerd: yes but often it's not relevant
[18:03:45] <LeoNerd> Imean, sure it happens in those places, but it happens everywhere else too
[18:03:52] <Altreus> well
[18:03:58] <_73> hmm ok Ill consider this from now on. I have a mountain of code using wantarray.
[18:04:01] <Altreus> I guess I more sort of mean a lot of the time you're just dealing with scalars
[18:04:10] <phryk> wait, in $hash{key} the $ determines that the returned value is a scalar, not $hash itself?
[18:04:14] <Altreus> phryk: yes
[18:04:18] <Altreus> see anatomy of types
[18:04:22] <Altreus> perlbot: anatomy of types
[18:04:23] <perlbot> Altreus: http://altreus.blogspot.com/2011/06/anatomy-of-types.html
[18:04:25] <phryk> okay, that is one major misunderstanding out of the way already.
[18:04:30] <LeoNerd> Yes.. because individual elements of a hash are individual "one thing"
[18:04:34] <LeoNerd> An individual "one thing" is a scalar
[18:04:56] <Altreus> phryk: it has allowed us to be expressive, because you can get one, many, or pairs of things from a hash
[18:05:20] <Altreus> $hash{one}, @hash{qw(one two three many)}, %hash{qw(one two three many lots)}
[18:05:53] <Altreus> whereas if you didn't do that, how would Perl know whether %hash{one} should be a scalar, a list, or a pair of things?
[18:06:06] <Altreus> Raku does it that way but it has different rules
[18:06:31] <Altreus> rules which are arguably more complex in order to define the edge cases that Perl5 solves by not doing that
[18:09:49] *** Quits: bmeneg (~bmeneg@131.100.62.244) (Ping timeout: 252 seconds)
[18:11:08] <phryk> mh, what i get when just executing "perl" is *not* a repl?
[18:11:18] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:6057:bf6d:332d:42da) (Quit: Leaving)
[18:11:31] <phryk> trying to evaluate some things but can't even get the thing to print anything…
[18:11:39] <LeoNerd> perlbot: repl
[18:11:40] <perlbot> LeoNerd: Read-Eval-Print-Loop - see reply from Reply, re.pl from Devel::REPL, tinyrepl from Eval::WithLexicals, or perlsh from App::perlsh | an anagram of perl!
[18:11:53] <LeoNerd> Any of those are nice. I like App::perlsh but I'm biased since I wrote it ;)
[18:12:03] <phryk> oh right, i even got re.pl installed
[18:12:54] <LeoNerd> Hrm.. "stringy" vs "numbery"... except the latter sounds annoying as a word. I prefer "numeric" but then what's the string-like variant of that word?
[18:13:23] <Altreus> lexic?
[18:13:35] <Altreus> lexographic probably
[18:13:38] <Altreus> but that's loooooooooong
[18:13:44] <LeoNerd> Hrm.. "lexical" is sortof right, but... that's a word we already use for other stuff
[18:13:44] *** Joins: krismatrix (~krismatri@38.80.149.51)
[18:13:53] <phryk> textual?
[18:13:56] <shaldannon> textual ?
[18:14:11] <phryk> stringesque? :P
[18:14:11] <Altreus> stringic
[18:14:13] <Altreus> :P
[18:14:21] <shaldannon> non-numeric
[18:14:40] <phryk> non-numeric logically includes void/null tho
[18:14:52] <shaldannon> true ... textual's better
[18:14:56] <Altreus> string can be numeric
[18:15:03] <Altreus> :)
[18:15:36] <phryk> can i just force perl to be strongly typed? ^^;
[18:15:44] <shaldannon> oh heck no
[18:16:06] <LeoNerd> What do you mean "strongly typed"?
[18:16:14] <LeoNerd> Those words don't have any fixed meaning in computer science
[18:16:26] <ilmari> typed on a model m keyboard, or similar
[18:16:38] <LeoNerd> Usually the most consistent definition of them is "a type system the author likes", vs people describing weakly-typed as being "a type system the author does not like"
[18:16:51] <LeoNerd> ilmari: I think that's more "loudly typed" ;)
[18:17:10] <shaldannon> strongly typing would totally break this gem:  s//1\n/;for$i(1..5){print;s!(\d)\1*!$&=~y///c.$1!ge}
[18:17:21] <LeoNerd> shaldannon: See above
[18:17:21] <phryk> names in scopes being bound to a type. so if you want to cast it to a different type, you have to use a different name – something like that roughly.
[18:17:32] <LeoNerd> What's a "type"?
[18:17:46] <phryk> …
[18:17:47] <ilmari> phryk: they already are. $foo is a scalar, @foo is an array, %foo is a hash
[18:18:02] <ilmari> those are (almost) the only types perl has
[18:18:07] <phryk> but the name is the same, the @$% are like implicit casts.
[18:18:21] <Altreus> yeah!
[18:18:23] <ilmari> no, they are separate variables
[18:18:37] <LeoNerd> They're separate. Though it was a kindof-terrible decision for perl to allow all of them
[18:18:44] <Altreus> oh right, cast if assigned is what I was thinking of
[18:18:50] <LeoNerd> There's no reason you need to use it. I'd suggest avoiding it
[18:19:28] <phryk> okay, now reading Altreus' post
[18:19:44] *** Joins: bmeneg (~bmeneg@131.100.62.244)
[18:20:12] <Altreus> LeoNerd: what would the error message be? :D
[18:20:28] <LeoNerd> Dunno
[18:20:33] <Altreus> Refusing to create slot $user because %user exists
[18:20:38] <Altreus> not slot
[18:20:43] <Altreus> what's the pad got?
[18:20:43] <LeoNerd> I was sortof thinking maybe some new category of linter-type stuff
[18:20:54] <ilmari> the pad has slots
[18:21:24] <ilmari> https://github.com/Perl/perl5/search?q=%22pad+slot%22
[18:21:25] <Paperbot> Link title(s): [ Search · "pad slot" · GitHub ]
[18:21:43] *** Joins: TieUpYourCamel (~david@2600:1702:26a0:2000:ed4e:2f70:8818:9d10)
[18:23:01] <Altreus> oh it is slot
[18:23:50] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:32:21] <phryk> Altreus: in your article, section "Key-Value/Index-Value Slices" is the value of %part a hash like {'relevant' => value1, 'parts' => value2, 'only' => value3}? Also, what does the second one look like? a hash with the original array indexes cast to string as key and the original value for that index in the array as value?
[18:32:55] * Altreus checks
[18:33:10] <Altreus> that post's more than a decade old :O
[18:33:41] <phryk> Don't know if you still write like this, but defining a data structure with unique values everywhere and giving the return values for statements so people can evaluate whether they actually understood what you wrote would be super helpful. :)
[18:33:51] <Altreus> phryk: mostly right actually
[18:34:02] <phryk> Okay, where am I off?
[18:34:02] <Altreus> phryk: it's the assignment to a hash that forces the array indices to be strings
[18:34:20] <Altreus> eval: my @array = 1..10; [ %array[0,3,5] ];
[18:34:23] <perlbot> Altreus: [0,1,3,4,5,6]
[18:34:36] <Altreus> eval: my @array = 1..10; { %array[0,3,5] };
[18:34:38] <perlbot> Altreus: 6
[18:34:45] <Altreus> ... what
[18:34:47] <Altreus> oh!
[18:34:52] <phryk> Sorry, I can't follow that.^^
[18:34:52] <Altreus> eval: my @array = 1..10; +{ %array[0,3,5] }
[18:34:54] <perlbot> Altreus: {5 => 6,0 => 1,3 => 4}
[18:35:07] <Altreus> yes eval bot is a bit too brief I'm afraid
[18:35:51] <Altreus> you can think of %array[0,3,5] as ( 0 => 1, 3 => 4, 5 => 6 ) ... but there's a "but actually" there too
[18:36:26] <phryk> so I would access values of the result of that as $index_value{'3'} with the key explicitly being a string, right?
[18:36:27] <Altreus> and yes I probably should have put the resulting structure
[18:36:44] <Altreus> phryk: keys can only be strings so it doesn't matter whether you quote it
[18:36:52] <phryk> oh, interesting.
[18:37:04] <Altreus> phryk: the only time it matters is if Perl thinks it should evaluate it: $hash{ key() } or $hash{ $key }, for example
[18:37:31] <phryk> so, no $myhash{somecomplexobject} = "fnord"?
[18:37:36] <Altreus> so yes you are correct, $index_value{3} and $index_value{'3'} are equivalent
[18:37:55] <Altreus> correct- that is a string
[18:38:06] <Altreus> eval:  $myhash{somecomplexobject} = "fnord"; \%myhash
[18:38:08] *** Quits: brtastic (~Thunderbi@185.24.91.138) (Ping timeout: 246 seconds)
[18:38:08] <perlbot> Altreus: {somecomplexobject => "fnord"}
[18:38:26] <Altreus> if you gave it $somecomplexobject it would just stringify that
[18:38:32] <phryk> heh, perl syntax seems to hide a lot^^
[18:38:39] <phryk> ah
[18:38:45] <Altreus> eval: my $somecomplexobject = {}; $myhash{$somecomplexobject} = "fnord"; \%myhash
[18:38:47] <perlbot> Altreus: {"HASH(0x557694868710)" => "fnord"}
[18:38:56] <Altreus> this is a common cause of mistakes
[18:38:59] <phryk> and $index_value[0] would just return the first key, $index_value[1] the first value, etc?
[18:39:05] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:39:06] <Altreus> no, because it's a hash
[18:39:15] <Altreus> sweval: my %index_value; $index_value[0]
[18:39:18] <perlbot> Altreus: ERROR: Global symbol "@index_value" requires explicit package name (did you forget to declare "my @index_value"?) at (IRC) line 1. 
[18:39:22] <Altreus> And now we're where you came in
[18:39:33] <Altreus> Perl knows to look for @index_value because you used []
[18:39:43] <Altreus> even though it started with a $
[18:40:08] <Altreus> so assigning a hash to $user and then using $user{data}, perl looks for %user, which you don't have
[18:40:26] <Altreus> You now also realise you probably did $user = %somehash, so $user just contains a number now
[18:41:09] *** Quits: TitanOfOld (~titan@gentoo/developer/TitanOfOld) (Remote host closed the connection)
[18:41:29] *** Joins: TitanOfOld (~titan@gentoo/developer/TitanOfOld)
[18:41:32] *** Joins: Nahra` (~user@static.161.95.99.88.clients.your-server.de)
[18:41:56] <phryk> huh, so if I want to pass a hash into another function I should pass it as %user in the function call?
[18:42:27] <Altreus> or pass a reference
[18:42:34] <Altreus> hence \
[18:42:45] <Altreus> it's how you *accept* it that matters
[18:42:49] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (Ping timeout: 252 seconds)
[18:42:49] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[18:43:02] <Altreus> because there's an implicit assignment if you're using signatures, and an explicit one if you're not
[18:43:08] <Altreus> that's where lists and things comes in!
[18:43:11] <Altreus> perlbot: lists and things
[18:43:11] <perlbot> Altreus: http://altreus.blogspot.com/2011/08/lists-and-things-made-of-lists.html
[18:43:22] *** Quits: Kobaz (~libera@its.kobaz.net) (Ping timeout: 252 seconds)
[18:43:33] <Altreus> @_ is just a list of everything that's passed to the sub, and %hash is just a list of things
[18:43:38] <Altreus> (when passed to the sub)
[18:43:59] <Altreus> eval: my %hash = ( a => 1 ); my @list = %hash; \@list
[18:44:01] <perlbot> Altreus: ["a",1]
[18:44:04] <LeoNerd> Hrm... Opinions, thoughts on an `in`-like operator. How greedy should it eat the RHS?
[18:44:04] <LeoNerd> func 3 in (1,2,3,4,5), 6, 7, 8;   <== how much of that list of numbers should go to the `in` operator, and how much is passed to func ?
[18:44:04] <LeoNerd> I.e. does it parse like   func +(3 in (1,2,3,4,5)), 6, 7, 8;   or like   func +(3 in (1,2,3,4,5,6,7,8));  ?
[18:44:04] <phryk> how do I assign the passed in reference to be a hash again? my \%user = shift;?
[18:44:33] <Altreus> phryk: you assign the reference to a scalar (because it is), and construct it with \
[18:44:45] <Altreus> phryk: so the function call is fn(\%hash), and the assignment is my $user = shift
[18:44:58] <Altreus> or sub fn ($user) {}
[18:45:26] <phryk> so, myfunction(\%user) -> sub myfunction($user){ my %user = \$user; }?
[18:45:36] <Altreus> LeoNerd: there's a warning whereby Perl tells you to use more parens
[18:45:43] <Altreus> LeoNerd: Can you make it do that instead :D
[18:46:01] <Altreus> phryk: no cos \ *makes* a reference
[18:46:06] <Altreus> so now you have a reference to a reference!
[18:46:08] <revhippie> Perltoss: "Build more Parens!"
[18:46:24] <Altreus> phryk: you *de*reference by asking for the thing you expect: %$user
[18:46:33] <ilmari> sweval: use experimental 'declared_refs'; my $user = { foo => 4 }; my \%user = $user; $user->{bar} = 37; \%user
[18:46:35] <Altreus> phryk: or you can use the reference directly with $user->{key}
[18:46:35] <perlbot> ilmari: {foo => 4,bar => 37}
[18:46:53] <ilmari> ??refalias
[18:46:56] <ilmari> perlbot: refalias?
[18:46:56] <perlbot> ilmari: No factoid found. Did you mean one of these: [reflex] [refquick] [repl] [rofl] [evalspam] [iflakoa] [ribasushi] [root also] [mkalias] [ref]
[18:47:03] <Altreus> or you can ignore ilmari cos I didn't entirely follow that one
[18:47:06] <Altreus> :)
[18:47:47] <ilmari> Altreus: https://perldoc.perl.org/perlref#Assigning-to-References
[18:47:47] <Paperbot> Link title(s): [ perlref - Perl references and nested data structures - Perldoc Browser ]
[18:48:00] *** Joins: Kobaz (~libera@its.kobaz.net)
[18:48:47] <ilmari> phryk: you can do my \%user = $user_ref, but note that that will _alias_ the %user hash to the one referenced by $user, so any modifications will affect the caller's value, which is considered rude
[18:49:12] <ilmari> while my %user = %$user; will create a (shallow) copy
[18:50:33] <LeoNerd> Ohboy lets not get into refaliases for the newbie yet :)
[18:51:25] <LeoNerd> Altreus: I'm not sure if I can.. let me check
[18:51:43] * GumbyPAN CPAN Upload: App-GhostWork-0.02 by INA https://metacpan.org/release/INA/App-GhostWork-0.02
[18:51:50] <phryk> Mhh, I can't have anything passed into a function parsed as hash – is that only a limitation of signatures?
[18:52:26] <LeoNerd> Hrm?
[18:52:40] <LeoNerd> "parsed as a hash" ... ?
[18:52:53] <phryk> sub myfunc($foo, %bar, $bleh){…}
[18:53:11] <LeoNerd> The contents spill out if you do that
[18:53:17] <ilmari> you can do that, but %bar would be flattened to a list of key/value pairs
[18:53:18] <phryk> If I don't want to pass a reference.
[18:53:26] <LeoNerd> No. That's the *point* of references
[18:53:32] <LeoNerd> If you don't, then the contents of the box spill out
[18:53:41] <LeoNerd> So you have to refer to the box _itself_ and not its current list of contents
[18:53:44] <LeoNerd> Hence, the reference
[18:54:20] <phryk> spill out? are parameters coerced into a shallow list so you can't have proper containers as singular things to pass?
[18:54:52] <LeoNerd> They are flattned into lists, yes
[18:54:58] <ilmari> yes, and you do that by passing a reference to th econtainer
[18:55:08] <huf> lists fall apart. the container cannot hold.
[18:55:18] <phryk> so I *have* to pass hashes as references and every time i pass a hash i have to have the extra my %foo = %$foo in my function definition?
[18:55:19] *** Joins: dotandimet (~dotandime@evomr2.evogene.com)
[18:55:31] <LeoNerd> But alternatively, you don't have to "add" them if you want to pass multiple lists as one
[18:55:39] <LeoNerd> func(@things, @morethings);  <== all one flattened list
[18:56:06] <ilmari> phryk: or you can just access it directly via the reference, e.g. $foo->{bar}
[18:56:23] <LeoNerd> Yah; copying it out into a new hash would be rare.. normally you wouldn't bother with that
[18:56:23] *** Joins: WinterStar (~IceLight@user/icelight)
[18:56:43] * GumbyPAN CPAN Upload: WWW-Mechanize-2.05 by OALDERS https://metacpan.org/release/OALDERS/WWW-Mechanize-2.05
[18:56:44] <ilmari> only if you plan on modifying it without affecting the caller's copy
[18:56:49] <phryk> ilmari: I can't. then it looks for %user, which isn't defined, just $user is…
[18:56:57] <ilmari> phryk: no. note the ->
[18:57:10] <ilmari> sweval: my $user = { foo => 42 }; $user->{foo}
[18:57:11] <perlbot> ilmari: 42
[18:57:14] <phryk> wait, it *calls* the reference?
[18:57:16] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[18:57:21] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[18:57:21] <ilmari> no, it _dereferences_ it
[18:57:21] <LeoNerd> That isn't a call at all
[18:57:25] <LeoNerd> It's an access
[18:57:32] <ilmari> perlbot: tell phryk about ref
[18:57:33] <perlbot> phryk: 
[18:57:34] <LeoNerd> ->( args here )  is a function call. Note the round parens
[18:57:41] <ilmari> perlbot: tell phryk about refs
[18:57:41] <perlbot> phryk: 
[18:57:42] <LeoNerd> Other kinds of arrows do different things
[18:57:43] <ilmari> wat
[18:57:45] <ilmari> perlbot: refs?
[18:57:45] <perlbot> ilmari: For information about references in perl, see the built-in perldocs: http://p3rl.org/REF , or if that fails: http://perl-begin.org/topics/references/ . | http://mvp.kablamo.org/basics/references/
[18:57:58] <LeoNerd> $hashref->{key}   # fetch a key from a referenced hash
[18:58:08] <phryk> but if i just access a function like that, it'll be called without parameters… i tried that yesterday. O_o
[18:58:09] <LeoNerd> $arrayref->[index]  # fetch an element from a referenced array
[18:58:35] <ilmari> phryk: $coderef->() dereferences a code ref and calls it
[18:58:40] <ilmari> the () make it a call, not the ->
[18:58:46] <phryk> like, $foo->bar() is the same as $foo->bar
[18:59:01] <ilmari> that's a method call, that's different
[18:59:17] <ilmari> the right-hand side of the -> is what determines what's done after the reference has been dereferenced
[18:59:40] <ilmari> -> is just accessing the thing behind the reference
[18:59:48] <Altreus> LeoNerd: ->() is also deref :)
[19:00:01] <phryk> man, perl *really* hides a lot…^^
[19:00:10] *** Quits: ueberall (ueberall_l@user/ueberall) (Remote host closed the connection)
[19:00:10] <Altreus> only what you don't need to see
[19:00:17] <ilmari> Altreus: -> is deref, () is call the referenced thing
[19:00:21] <LeoNerd> There isn't a "->" operator. The hyphen and the greaterthan sign are parts of the spelling of a whole set of operators
[19:00:25] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[19:00:33] *** Joins: ueberall (ueberall_l@user/ueberall)
[19:00:48] <ilmari> LeoNerd: you could argue it's an infix metaoperator ;)
[19:00:49] <LeoNerd> ->(...)  ->[...]  ->{...}  ->$*  ->@*  ->@[...]  ->%[...]
[19:00:57] <Altreus> ->identifier(...)
[19:01:07] <ilmari> in all of those cases it starts with dereferencing the reference on the left
[19:01:10] <LeoNerd> About the only thing you can say is that on the LHS of one of those arrowy-like things is definitely a reference
[19:01:20] <LeoNerd> ... except those times when it isn't, like  Some::Package->method
[19:01:26] <LeoNerd> So yahknow.. :)
[19:01:29] <ilmari> it's a symbolic reference :)
[19:01:37] <ilmari> (tha's excempt from strict)
[19:01:54] <Altreus> is that like interpretative dance?
[19:02:17] <LeoNerd> interpretive dance. It's like JIT-compiled dance, only slower
[19:02:23] <ilmari> see also $subname->()
[19:02:32] <ilmari> LeoNerd: but starts sooner
[19:02:39] <phryk> ilmari: that's for function references?
[19:02:52] <phryk> i was wondering whether i can pass functions around.
[19:02:58] <LeoNerd> Yes;  \&somefunc
[19:03:05] <LeoNerd> talks -about- the function, but does not call it
[19:03:12] <LeoNerd> It's much like arrays and hashes, in fact
[19:03:15] <DrHyde> WTF is ->%[...] ?
[19:03:20] <ilmari> or $foo = sub { ... } for anonymous functions
[19:03:21] <LeoNerd> If you want to talk _about_ something, you need to \thingy it
[19:03:38] <ilmari> DrHyde: postfix array key-value slice dereference
[19:03:43] <LeoNerd> If you don't put the \ on, then it "activates" it... whatever that might mean. Functions get called, container variables give a list of their current contents
[19:03:49] <Altreus> interpretive
[19:04:00] <DrHyde> ilmari: sounds like witchcraft to me
[19:04:01] <Altreus> wtf google
[19:04:15] <Altreus> I asked it if interpretive was spelled right and it corrected it to interpretative
[19:04:20] <ilmari> sweval: my $foo = [qw(foo bar baz)] [ $foo->%[2,0] ]
[19:04:21] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "] [" Global symbol "$foo" requires explicit package name (did you forget to declare "my $foo"?) at (IRC) line 1. 
[19:04:22] <phryk> is there some nice syntax sugar for decorating functions? so I don't have to do $func = somedecorator(sub foo{…})?
[19:04:27] <ilmari> sweval: my $foo = [qw(foo bar baz)]; [ $foo->%[2,0] ]
[19:04:27] <Altreus> Then says it means intepretive
[19:04:28] <perlbot> ilmari: [2,"baz",0,"foo"]
[19:05:01] <Altreus> phryk: not really sure what that does in the first place!
[19:05:07] <rindolf> Today I dreamt in YAML, and surprisingly it was pleasant
[19:05:18] <ilmari> rindolf: pervert
[19:05:24] <LeoNerd> phryk: there -kindof- is but it's best you don't look into it yet... it's one of those milling-machine powertool things you can easily damage stuff with
[19:05:24] <phryk> Altreus: the $ might have been wrong – my &foo = …?^^
[19:05:37] <Altreus> can't my an &
[19:05:42] <rindolf> ilmari: heh
[19:05:47] <Altreus> in fact & should only be seen after \
[19:06:10] <phryk> LeoNerd: So how do I easily wrap auth around a bunch of functions? in python i'd just do @myauth\ndef something_authed(…):…
[19:06:33] <LeoNerd> I'd do it the way you're doing it for now
[19:06:43] <phryk> manual decoration?
[19:07:01] <Altreus> I'd use a framework!
[19:07:06] <phryk> I am.
[19:07:12] <LeoNerd> You -can- make decorator-type things (they're called "attributes") but given an hour ago you were only just getting the hang of basic reference syntax, I'd suggest not going that far yet
[19:07:29] <Altreus> A framework that provides auth :)
[19:07:36] <phryk> no dice :P
[19:07:51] <ilmari> *authed_foo = with_auth(sub { ... });
[19:08:07] <LeoNerd> Yeah that's probably a reasonable first step compromise
[19:08:12] <Altreus> Smells like curry in here
[19:08:27] <phryk> sub {} is an anonymous function?
[19:08:29] <ilmari> or just call check_auth() inside the method
[19:08:31] <ilmari> yes
[19:08:38] <zacts> LeoNerd: have you tried raku? (just curious)
[19:09:06] <phryk> does that work with signatures like "sub ($foo){}"?
[19:09:10] <LeoNerd> zacts: I've looked at a few bits and pieces and I'm not ooooverly impressed
[19:09:15] <LeoNerd> Yup, sigs work fine on those
[19:09:18] <phryk> great.
[19:09:28] <phryk> I think now I can continue on my quest for auth. :P
[19:09:33] <LeoNerd> (though good luck making syntax highlight happy with it)
[19:09:40] <zacts> LeoNerd: is it the internal implementation details that your not overly impressed with, or is it the syntax and language itself?
[19:09:48] <LeoNerd> zacts: Oh all of it really
[19:09:48] <zacts> you're*
[19:10:09] <LeoNerd> I haven't really looked at the innards of impl, so I couldn't really comment on that
[19:11:18] <phryk> LeoNerd: my syntax highlighting already highlights signatures as errors^^
[19:11:35] <LeoNerd> Yah.. :/
[19:12:00] <Altreus> there's been a vim fix for that for some time, but as for anything else, no idea!
[19:12:11] <LeoNerd> A vim fix? Where? I haven't found any that work
[19:12:38] <Altreus> no idea, I installed something ages ago and have to re-google every time I have a new system :)
[19:12:38] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 252 seconds)
[19:13:09] <Altreus> apparently not on my laptop
[19:13:29] <Altreus> er which bloody system has it? :D
[19:13:43] <Altreus> well I found it somewhere anyway cos my mojo app was showing fine
[19:13:48] <Altreus> must be my other laptop
[19:15:13] <LeoNerd> Imean,... my vim syntax setup has lots of extra stuff to handle try/catch, match/case, class/method/has/... and so on
[19:15:15] <LeoNerd> Oh and async sub
[19:15:25] <LeoNerd> Oh and async method
[19:15:46] <LeoNerd> Trying to make async method + signatures actually highlight correctly... *almost* impossible. I haven't got it working yet
[19:17:30] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:18:14] *** Quits: llh (~llh@198.48.244.21) (Changing host)
[19:18:14] *** Joins: llh (~llh@user/llh)
[19:18:21] <ilmari> LeoNerd: once you get it working, you could publish it as leoperl.vim
[19:18:36] <LeoNerd> Once I get it working I hope to upstream it to primary source
[19:18:41] <LeoNerd> Or just get them to fix it properly
[19:18:44] <ilmari> even better
[19:19:16] <Altreus> one of the appeals of raku was that it's actually parseable :P
[19:20:09] <ilmari> I guess the custom operator stuff is declarative enough that you don't actually need to evaluate them
[19:20:22] <LeoNerd> Altreus: if I wanted a new parseable language there's already plenty of them to choose from
[19:20:29] <ilmari> sub infix<☃️>($a, $b) { ... }
[19:20:47] <ilmari> you aonly need to parse the declaration to be able to parse invocations of it
[19:21:13] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[19:26:00] <Altreus> LeoNerd: they're probably also terrible :)
[19:28:43] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:29:30] *** Joins: zamanf (~moo@2a02:587:de16:8a00:e069:8cfb:5849:1199)
[19:31:01] *** Joins: anthk_ (~anthk_@92.176.105.30)
[19:32:17] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[19:32:46] *** Joins: Trigon (~reuben@144.39.114.115)
[19:32:59] *** Joins: tobybl_ (~tobybl@210.242.200.146.dyn.plus.net)
[19:34:50] *** Quits: tobybl (~tobybl@210.242.200.146.dyn.plus.net) (Ping timeout: 246 seconds)
[19:35:16] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[19:36:38] *** Joins: thrig (~thrig@65.113.153.50)
[19:37:15] *** Joins: x28girl (~x28girl@user/x28girl)
[19:38:46] *** Joins: daxim (~daxim@2a02:b18:c13b:28:42b0:76ff:fe7b:7663)
[19:41:47] * GumbyPAN CPAN Upload: Math-BigInt-1.999824 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-BigInt-1.999824
[19:41:48] * GumbyPAN CPAN Upload: Locale-Utils-Autotranslator-1.014 by STEFFENW https://metacpan.org/release/STEFFENW/Locale-Utils-Autotranslator-1.014
[19:45:17] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[19:49:12] <gordonfish> ilmari: Is that a snowman...?
[19:49:32] <choroba> the snowman operator
[19:49:47] <gordonfish> But it's only september
[19:50:01] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:50:06] <Altreus> it's no man
[19:50:16] <thrig> it's been september since the 90s
[19:51:38] *** Joins: Shells (~michelle@2407:8800:bc20:200a:9cb:6f7e:db75:b105)
[19:52:30] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 260 seconds)
[19:52:37] *** Joins: Guest79 (~Guest79@2603-6000-8600-0096-2927-b6a6-f125-1a1b.res6.spectrum.com)
[19:55:30] *** Joins: gast0n (~g4570n@user/gast0n)
[19:58:27] *** Quits: aspic (~shifty~~~@ppp121-44-117-12.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[19:59:21] *** Joins: aspic (~shifty~~~@ppp121-44-116-104.syd-gls-har-bras39.tpg.internode.on.net)
[20:01:12] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[20:02:21] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:c833:17dc:ee27:efe1)
[20:02:42] *** Quits: Guest79 (~Guest79@2603-6000-8600-0096-2927-b6a6-f125-1a1b.res6.spectrum.com) (Ping timeout: 256 seconds)
[20:03:59] *** Joins: ztx (~ztx@user/ztx)
[20:11:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:11:51] * GumbyPAN CPAN Upload: Redis-OpenTracing-v0.1.1 by VANHOESEL https://metacpan.org/release/VANHOESEL/Redis-OpenTracing-v0.1.1
[20:12:03] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[20:12:47] *** Joins: x28girl (~x28girl@user/x28girl)
[20:13:33] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[20:15:27] *** Joins: chronon (~chronon@user/chronon)
[20:22:52] <mjgardner> New blog post on perlcritic: https://phoenixtrap.com/2021/09/21/everyones-a-perl-critic/
[20:22:54] <Paperbot> Link title(s): [ Everyone’s a (Perl) critic, and you can be too! - The Phoenix Trap ]
[20:24:36] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Quit: Leaving)
[20:25:38] <phryk> Altreus, ilmari: "my %foo = %$foo;" doesn't seem to create a shallow copy, but rather another hash that has a stringified hashref as first key, with an undef value associated…
[20:26:48] <LeoNerd> That sounds like perhaps your original value was wrong
[20:27:00] <ilmari> sweval: my $href = { foo => 42 }; my %hash = %$href; \%hash
[20:27:02] <perlbot> ilmari: {foo => 42}
[20:27:13] <ilmari> phryk: WFM. please show actual code and how you diagnosed it
[20:27:27] *** Joins: emanuele6 (~emanuele6@37.163.6.7)
[20:27:28] *** Quits: emanuele6 (~emanuele6@37.163.6.7) (Changing host)
[20:27:28] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:27:37] <ilmari> phryk: did you do `my %foo = $foo;` instead?
[20:27:44] <ilmari> sweval: my $href = { foo => 42 }; my %hash = $href; \%hash
[20:27:46] <perlbot> ilmari: Reference found where even-sized list expected at (IRC) line 1. {"HASH(0x55b1744de710)" => undef}
[20:27:54] <ilmari> also, do you have strict and warnings on?
[20:31:09] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[20:31:22] <phryk> my %h = {a => 23, b => 42}; my $href = \%h; my %hcopy = %$href;
[20:31:42] <alh> my %h = { } is wrong
[20:31:46] <alh> my %h = (a => 23, b => 42);
[20:32:20] <corwin> perlbot: sveval %h = {oops => 'my bad'}; \%h
[20:32:21] <perlbot> corwin: No factoid found. Did you mean one of these: [sec.pl] [simple] [supybot] [scribblej] [give blood] [republican] [[sno]: eval] [sql::builder] [scrable this] [seen f00li5h]
[20:32:34] <corwin> perlbot: sweval %h = {oops => 'my bad'}; \%h
[20:32:36] <perlbot> corwin: ERROR: Global symbol "%h" requires explicit package name (did you forget to declare "my %h"?) at (IRC) line 1. Global symbol "%h" requires explicit package name (did you forget to declare "my %h"?) at (IRC) line 1. 
[20:32:39] <ilmari> sweval: my %h = { };
[20:32:42] <perlbot> ilmari: Reference found where even-sized list expected at (IRC) line 1. 1
[20:32:53] <corwin> there we go
[20:33:01] <thrig> sounds like someone needs strict and warnings on
[20:33:09] <ilmari> phryk: use warnings; use strict; # always
[20:33:32] * thrig goes back to fiddling with code where 'use strict' doesn't help
[20:33:39] <phryk> will that even persist in a repl?
[20:34:14] <corwin> I know I sound like a broken record when I say this but... I like the DMTOWTDI rather more than "there's a right way to skin a cat".  Maybe why I've not formed affection for py
[20:34:32] <ilmari> depends on the repl
[20:34:43] <corwin> that said, I'd never have learned perl if not for use strict; use warnings; 
[20:34:46] <ilmari> in reply it does
[20:34:54] <phryk> i get re.pl
[20:35:14] <phryk> think im mixed this up with lua anyways, there every line of the repl is its own scope.
[20:36:09] <ilmari> phryk: https://l.perl.bot/p/gy5dsj
[20:36:10] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[20:36:34] <ilmari> perlbot: repl?
[20:36:35] <perlbot> ilmari: Read-Eval-Print-Loop - see reply from Reply, re.pl from Devel::REPL, tinyrepl from Eval::WithLexicals, or perlsh from App::perlsh | an anagram of perl!
[20:36:49] * ilmari used to use re.pl, but prefers reply these days
[20:36:54] <ilmari> don't remmeber why I switched...
[20:37:06] <phryk> so, my $foo = {foo => 23, bar => 42} creates a hash and binds the *reference* to that to $foo?
[20:37:23] <ilmari> yes, { } is a hashref constructor
[20:37:33] <ilmari> and [ ] is an arrayref constructor
[20:37:54] <LeoNerd> I don't know where the word "bind" came from there. I'd have said "assign"
[20:38:16] <Altreus> we don't really bind things in perl5
[20:38:27] <ilmari> but ( ) is _not_ a list constructor, it's just a precedence overrider. , in list context is a list constructor
[20:38:29] <phryk> potayto potahto :P
[20:38:38] <aquanight> Altreus: https://perldoc.pl/functions/bind
[20:38:38] <Altreus> not really, because raku has binding and assignment
[20:38:38] <Paperbot> Link title(s): [ bind - Perldoc Browser ]
[20:38:39] <thrig> One Ring to bring them all and in the darkness assign them...
[20:38:44] <alh> ilmari: that part always hurts my head
[20:38:54] <Altreus> you should use the term the language uses
[20:39:11] <Altreus> aquanight: oh yeah, that function that everyone's using everywhere :P
[20:39:31] <phryk> Altreus: yeah, but then I need to read the whole specification before i can even begin asking questions. :P
[20:39:51] <corwin> it's the *nix way.
[20:39:54] <Altreus> it is fine to simply accept corrections
[20:40:02] <phryk> s/\*nix/neckbeard/ :P
[20:40:45] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[20:41:02] <phryk> speaking of which, i should shave.
[20:41:02] *** Joins: semeion (~semeion@user/semeion)
[20:42:11] <phryk> but thanks for all the help. you already cleared up some major confusions i had about perl. :)
[20:43:09] <Altreus> must be a missing blog post then cos most people just need the two
[20:43:19] <Altreus> :d
[20:43:21] <Altreus> :D
[20:52:00] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[20:53:25] *** Joins: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-17-76-68-65-112.dsl.bell.ca)
[20:58:48] *** Quits: aspic (~shifty~~~@ppp121-44-116-104.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[21:06:56] * GumbyPAN CPAN Upload: Test2-Plugin-Cover-0.000025 by EXODIST https://metacpan.org/release/EXODIST/Test2-Plugin-Cover-0.000025
[21:12:25] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Ping timeout: 252 seconds)
[21:13:27] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:14:56] *** Joins: sasho (~sasho@80.72.92.226.coresnet.bg)
[21:23:42] *** Joins: diskin_ (~diskin@87.117.63.122)
[21:23:42] *** diskin is now known as Guest3191
[21:23:42] *** Quits: Guest3191 (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Killed (cadmium.libera.chat (Nickname regained by services)))
[21:23:43] *** diskin_ is now known as diskin
[21:24:27] *** Joins: michelle_ (~michelle@203.206.128.220)
[21:24:44] *** Quits: Shells (~michelle@2407:8800:bc20:200a:9cb:6f7e:db75:b105) (Ping timeout: 246 seconds)
[21:27:27] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[21:27:27] *** diskin is now known as Guest5328
[21:27:27] *** diskin_ is now known as diskin
[21:27:41] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[21:30:01] *** Quits: Guest5328 (~diskin@87.117.63.122) (Ping timeout: 252 seconds)
[21:35:23] *** Quits: tobybl_ (~tobybl@210.242.200.146.dyn.plus.net) (Remote host closed the connection)
[21:38:25] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[21:41:19] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[21:45:44] *** Joins: krismatrix (~krismatri@38.80.149.51)
[21:59:51] *** Joins: horsepatat (~horsepata@80.89.77.104)
[22:03:27] *** Joins: magla (~gelignite@55d4b17a.access.ecotel.net)
[22:05:46] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Ping timeout: 252 seconds)
[22:08:05] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[22:08:25] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[22:09:16] *** Quits: horsepatat (~horsepata@80.89.77.104) (Read error: Connection reset by peer)
[22:12:04] * GumbyPAN CPAN Upload: WebService-GoShippo-0.0002 by COLINK https://metacpan.org/release/COLINK/WebService-GoShippo-0.0002
[22:19:18] *** Joins: Markow (~Markow@176.122.215.103)
[22:22:51] *** Joins: dsrt^ (~dsrt@12.203.127.82)
[22:27:35] *** Joins: anthk_ (~anthk_@92.176.105.30)
[22:33:10] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:35:35] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 252 seconds)
[22:51:32] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Read error: Connection reset by peer)
[22:57:09] * GumbyPAN CPAN Upload: PGPLOT-Device-0.12 by DJERIUS https://metacpan.org/release/DJERIUS/PGPLOT-Device-0.12
[22:59:24] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[23:01:04] <genio> I finally turned my desk today to face out the window so I can see outside while working. I'm in a happier mood!
[23:01:11] *** Joins: ztx (~ztx@user/ztx)
[23:03:44] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[23:06:10] *** Joins: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com)
[23:16:37] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[23:22:11] * GumbyPAN CPAN Upload: Test2-Harness-1.000073 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000073
[23:28:19] *** Joins: semeion (~semeion@user/semeion)
[23:30:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 246 seconds)
[23:32:12] *** Joins: X-Scale` (~ARM@83.223.240.141)
[23:33:13] *** X-Scale` is now known as X-Scale
[23:34:15] *** Joins: krismatrix (~krismatri@38.80.149.51)
[23:34:48] <phryk> does cpan still have no color output? :<
[23:36:34] <mst> phryk: App::cpm definitely does, I've never tried to configure App::cpanminus to?
[23:37:30] * mst usually bootstraps one or both of those rather than using the old 'cpan' script
[23:40:05] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: Connection reset by peer)
[23:41:02] *** Quits: proller (~p@2a02:6b8:0:40c:440a:1759:c691:83ba) (Ping timeout: 260 seconds)
[23:44:10] <phryk> meh, cpan also configures itself for a directory local to the user dir (good) but then proceeds to try and install stuff into /usr…
[23:44:41] <phryk> good for me that this module exists as a freebsd port, i guess…
[23:45:59] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[23:46:14] <mst> phryk: that's ... not what normally happens
[23:46:27] <mst> phryk: also *please* bootstrap one of the better tools instead
[23:46:37] <phryk> mst: i assume because there's some compiled component or dependency and it calls make install…
[23:46:45] <mst> that still shouldn't happen!
[23:47:03] <mst> I WROTE THE FUCKING INSTALL INTO USER DIR CODE STOP GUESSING WHEN YOU HAVE THE AUTHOR RIGHT HERE TRYING TO HELP aaaaaaaaaaaaaaaaaaaaaaa *sob*
[23:47:10] <phryk> cpan App::cpanminus? will output there be more descriptive or what's the actual advantage?
[23:47:28] <mst> you are really making it 10x harder to help you by ignoring what I'm saying
[23:47:39] <mst> http://trout.me.uk/bunny.jpg
[23:47:59] <phryk> what did i even ignore?
[23:48:14] <mst> I said "boostrap something else first" for a start.
[23:48:39] <mst> also you started assuming rather than letting me help you diagnose problems
[23:48:44] <mst> it's ... frustrating
[23:49:01] <phryk> same here^^;
[23:49:32] <mst> firstly, we should figure out what caused that /usr install because that problem may not even be in cpan
[23:49:47] <mst> perlbot: cpanm
[23:49:48] <perlbot> mst: miyagawa's application of JFDI and minimalism to CPAN module installers. It does the 80% that 99% of users need. Get it at https://cpanmin.us | http://p3rl.org/cpanm
[23:49:54] <mst> perlbot: cpanm bootstrap
[23:49:54] <perlbot> mst: wget -qO cpanm.pl https://cpanmin.us; perl cpanm.pl App::cpanminus | If already using perlbrew or plenv: perlbrew install-cpanm || plenv install-cpanm
[23:49:58] <mst> there we go
[23:50:15] <mst> that will put App::cpanminus into your ~/perl5
[23:50:28] <mst> then you can use the p3rl.org/local::lib docs to setup your .bashrc or whatever shell
[23:50:32] <mst> then everything should Just Work
[23:50:40] <mst> you could probably also get those two modules from ports
[23:52:21] <mst> though I'm not sure you said -which- BSD so I can't check yet :D
[23:53:16] <aquanight> this is probably a stupid question (I've only ever used stock 'cpan' as it is)... do those handle multiple perl install type situations? (E.g. having a system perl and a local blead build or something like that)
[23:53:31] <phryk> setup my… .bashrc? wat.
[23:53:43] <mst> phryk: you want to use modules from ~/perl5 no?
[23:53:50] <phryk> also I'm on FreeBSD and btw here's the cpan output that failed: https://paste.xinu.at/LDp/
[23:53:52] <Paperbot> Link title(s): [ stdin ]
[23:53:53] <phryk> mst: yes.
[23:54:07] <mst> phryk: so you want to set environment variables so perl knows to look there
[23:54:09] <aquanight> phryk: presumably talking about setting up assorted PERL5INC= vars and shit so you can install cpan in your ~
[23:54:27] <mst> phryk: did you read the p3rl.org/local::lib docs ?
[23:54:32] <phryk> no
[23:55:28] <mst> well please do that
[23:55:49] <mst> the cpan integration is a bit wonky, the maintainers of cpan added that without ever talking to me and I'm not convinced whatever it did is working right given those errors
[23:55:57] <mst> I'd rather you set local::lib up how it's documented to work
[23:56:02] <mst> would give us one less thing to debug
[23:56:29] <mst> aquanight: perlbrew and plenv will basically have their own copies of cpanm, my App::plx manages things a slightly more elegant way
[23:56:29] <phryk> okay, so the situation is that the official installer (cpan) is kinda broken?
[23:57:04] <xenu> cpan kinda sucks but the real problem is that perl load libraries from the home dir OOTB
[23:57:04] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[23:57:08] <mst> phryk: the situation is the *bundled* *boostrap* installer is not the easiest thing to configure right.
[23:57:09] <xenu> perl doesn't load*
[23:57:31] <mst> phryk: like if you want to post your cpan config I can try and figure out what happened, but I don't see much point
[23:57:55] <aquanight> mst: I don't imagine I'd want to try to share the cpan build, if only because that's just foot-bullets once XS gets involved. But something like not having to have multiple copies of the same tool or such.
[23:57:56] <phryk> aye, I'd rather use something that doesn't have automatism to shoot me in the foot.^^
[23:57:57] <mst> phryk: do you want to learn how to configure the oldest cpan client in existence, or do you want a working system sooner rather than later? that's basically the choice here and I was optimising for the latter :D
[23:58:48] <mst> phryk: but basically *I* don't like the way cpan sets up local::lib and so I'd rather debug the way I designed local::lib to work if you don't mind? :)
[23:01:27] <phryk> mst: Sure. But I already had cpan do the automated setup – do I have to delete anything before I do the right bootstrapping procedure?
[23:01:33] *** Joins: Trigon (~reuben@144.39.114.115)
[23:01:52] <mst> phryk: honestly what I would do, for simplicity's sake, is:
[23:02:04] *** Joins: anthk_ (~anthk_@92.176.105.30)
[23:02:26] <mst> phryk: rm -rf .cpan perl5; curl -L cpanmin.us | perl - -l$HOME/perl5 -n App::cpanminus App::cpm local::lib
[23:02:43] <mst> phryk: then add 'eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)' to the shell config
[23:03:15] <mst> that or if you want to go all in on "just use mst's defaults'
[23:03:29] <mst> rm -rf .cpan perl5; curl -L https://raw.githubusercontent.com/shadowcat-mst/plx/master/bin/plx-packed | perl - --userstrap
[23:04:17] <mst> (plx is a tool for maintaining per-project dependencies so you can be working with different versions of cpan modules in different checkouts at the same time, which as I'm sure you can imagine is something I end up wanting a fair bit)
[23:04:38] <phryk> Mhh, I don't have ~/.cpan, but ~/.local/share/cpan – I assume that's what you meant?
[23:05:06] <phryk> contains stuff from the failed build, too.
[23:05:09] <mst> oh, right, it's bootstrapped itself in XDG_HOME style
[23:05:18] <mst> yeah, your config and your build space and caches are in there
[23:05:25] <mst> hence easiest to just dropkick the lot into the void
[23:05:32] <phryk> wonder why it put the perl stuff itself into ~/perl5 instead of ~/.local/perl5 or something tho…
[23:05:44] <mst> phryk: because that's where local::lib defaults to
[23:06:15] <mst> if you want it somewhere else, you pass that as an argument when you get it to set env vars
[23:06:27] <mst> as explained by the local::lib docs which you still apparently need to read :D :P
[23:09:10] <phryk> also that i have no idea what in the curl –L … line corresponds to calling makefile.PL and make – i assume that line lets cpanminus do that stuff?
[23:09:34] <mst> phryk: which one are we talking about?
[23:09:51] <phryk>  curl -L cpanmin.us | perl - -l$HOME/perl5 -n App::cpanminus App::cpm local::lib 
[23:10:12] <mst> that's basically pulling down a single file cpanm and then having it install itself
[23:10:46] <mst> it's a bit like a 'curl | sh' thing except that I know every single person who has control over what gets downloaded and run on your machine so I'm not as worried about suggesting it as I might be otherwise ;)
[23:11:08] <phryk> that installs App::cpanminus, App:cpm and local::lib modules – that correct?
[23:11:18] <mst> (the plx-packed version is basically the same except it uses plx's code to set up the local::lib and bash config and an embedded cpanm to install the rest of what it needs)
[23:11:21] <phryk> s/modules/packages/ maybe
[23:11:22] <mst> phryk: yes
[23:12:21] <phryk> so will that also automatically do the setup for local::lib or do I have to find the right directory and do the perl makefile.PL and make stuff myself afterwards?
[23:12:54] <mst> phryk: the cpanm version will have *installed* local::lib but you'd still need to add the 'eval' yourself; the plx version will fix the shell config for you as well.
[23:13:20] <mst> basically the 'plx --userstrap' command is 'what I do to get a new user on a machine set up ready for me to hack perl, except turned into a one-liner'
[23:13:22] <phryk> oh, so this automates the makefile.PL && make stuff from the bootstrapping process?
[23:13:51] <mst> yes, the local::lib 'bootstrap' system is a workaround designed for people with an existing cpan config that it needs to hit with a hammer in the process
[23:14:22] <mst> local::lib's 'p;erl Makefile.PL --bootstrap' was 'make it as likely as possible that a freenode #perl user 10 years ago would get a working configuration on the first try without me wanting to stab myself'
[23:15:06] *** Joins: x28girl (~x28girl@user/x28girl)
[23:15:57] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:16:17] *** Joins: jdbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net)
[23:16:23] <mst> also btw I don't think you actually managed to save the local::lib related config for your cpan install
[23:16:23] *** Joins: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net)
[23:16:23] <phryk> I'm not finding any user documentation for cpanminus – can I pass in the location it'll set up local::lib?
[23:16:50] <mst> phryk: didn't I tell you to use '-l' for that?
[23:17:00] <mst> ... yep, I did.
[23:17:02] *** Quits: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net) (Client Quit)
[23:17:05] <mst> see metacpan.org/pod/cpanm for the man page
[23:17:24] <phryk> Oh, I thought that applied to the manual bootstrapping technique
[23:17:30] <mst> ... what
[23:17:48] <mst> < phryk>  curl -L cpanmin.us | perl - -l$HOME/perl5 -n App::cpanminus App::cpm local::lib' is not manual?
[23:19:32] <mst> yeah, looking at https://paste.xinu.at/LDp/ you definitely never actually configured cpan to use local::lib
[23:19:36] <Paperbot> Link title(s): [ stdin ]
[23:19:40] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 240 seconds)
[23:19:40] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 260 seconds)
[23:19:41] <mst> possibly you let it set everything up then didn't save the config
[23:19:43] <mst> not sure
[23:20:04] *** Quits: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com) (Ping timeout: 268 seconds)
[23:20:04] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[23:20:35] *** Joins: perldoc (~perldoc@71.76.76.1)
[23:21:14] <phryk> mst: dunno, it quit and iirc didn't show any errors, so I assumed it was set up. also weird then that stuff ended up in ~/perl5 and ~/.local/share/.cpan – shouldn't it have tried to put all that stuff somewhere into /usr?
[23:21:34] <mst> phryk: I have no idea what you did.
[23:21:35] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[23:21:51] <phryk> i just followed cpan's instructions^^
[23:22:09] <phryk> basically i just pressed enter a couple times to use the recommended defaults.
[23:22:32] *** Quits: ritsch_master (~user@91.141.40.248.wireless.dyn.drei.com) (Remote host closed the connection)
[23:22:38] <mst> and then 'o conf commit' then 'exit'  to get back to the shell prompt before you ran 'cpan That::Module' ?
[23:24:03] <phryk> no… i think it just started the installation procedure after that.
[23:24:33] <mst> ok, then you didn't save the config and I'm not surprised it didn't work
[23:25:13] <mst> also 'it just started the installation' makes no sense, the thing you showed me to debug started with -you- running 'cpan Authen::Passphrase'
[23:25:42] <phryk> but i am surprised that it didn't try doing everything in /usr if it apparently didn't set up local::lib…
[23:25:43] <mst> anyway. using the stuff I've recommended is going to be much easier than me trying to guess what you did wrong before you got as far as running that command.
[23:26:13] <Adura> perlbrew is pretty nice.
[23:26:31] <mst> phryk: I'm not. what happened, I think, is it -created- the ~/perl5 for you to use with the config you then threw away.
[23:26:49] <mst> phryk: you probably also want to check if any of your shell rc files already have /^PERL/ environment variables in them
[23:27:12] <mst> Adura: phryk's on FreeBSD, perlbrew is a workaround for OSes that don't have a ports system of FreeBSD's quality.
[23:27:45] <Adura> I just use it to not screw with system perl.
[23:27:56] <mst> Adura: FreeBSD doesn't -have- a sytem perl
[23:28:08] <Adura> Huh, how odd.
[23:28:14] <mst> Adura: the perl port can be built in any version you like, with multiple versions in parallel
[23:28:14] <phryk> mst: nope, but i use a non-standard shell (fish) – but no perl-specific stuff in .cshrc or .shrc either.
[23:28:57] <mst> phryk: oh, well, local::lib supports fish fine too, but you can ignore the plx-packaged idea in that case since I don't think I taught --userstrap about fish yet
[23:29:32] <mst> phryk: anyway, let's just start fresh with the cpanmin.us bootstrap and you adding a local::lib 'eval' line to your fish rc file and then everything should work fine
[23:29:41] <phryk> mst: btw, the curl cpanmin.us stuff ran through – now I retry building/installing the module with "cpm Whatever::Package" to determine whether this was a cpan problem?
[23:29:41] <huf> fish has to be the freebsd of shells
[23:29:57] <mst> phryk: did you configure local::lib in your .fishrc yet?
[23:30:03] <phryk> oh no, right.
[23:30:21] <mst> once you have a shell with that set up
[23:31:30] <mst> you should find that (a) 'which cpanm' and 'which cpm' work (b) there's a $PERL_LOCAL_LIB_ROOT environment variable
[23:32:13] <mst> then you should be able to use either 'cpanm Module::Name' or 'cpm -g Module::Name' to install it into ~/perl5
[23:32:21] <mst> gah
[23:32:21] <phryk> Mhh, that call returns wrong values for me.
[23:32:27] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:32:34] <mst> phryk: what does the environment variable show?
[23:32:39] <mst> let's worry about just this first
[23:32:49] <phryk> https://paste.xinu.at/GD1/
[23:32:50] <Paperbot> Link title(s): [ stdin ]
[23:33:12] <mst> what do you mean wrong values?
[23:33:17] <phryk> I did "perl - -l$HOME/.local/lib/perl5 …"
[23:33:25] <mst> yeah, and that'll find local::lib
[23:33:28] <phryk> and it wants to set stuff for ~/perl5
[23:33:31] <mst> then, as per the documentation
[23:33:38] <mst> -Mlocal::lib sets up ~/perl5
[23:33:51] <mst> and if you want somewhere else you do -Mlocal::lib=$HOME/.local
[23:34:26] *** Quits: magla (~gelignite@55d4b17a.access.ecotel.net) (Quit: Stay safe!)
[23:34:32] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-17-76-68-65-112.dsl.bell.ca) (Quit: Konversation terminated!)
[23:36:02] <mst> phryk: what happens if you actually provide the path? :D
[23:36:09] <phryk> the right thing
[23:36:28] <mst> so, *that* should be addable to your .fishrc wrapped in an eval
[23:36:47] <mst> (please don't copy-paste the env vars into your rc file instead, that's just horrible)
[23:36:50] <phryk> okay, finds cpm/cpanm now.
[23:37:24] <mst> ok, please show me the lines in your rc file and make sure you've got a shell using that?
[23:37:55] <phryk> eval (perl -I$HOME/.local/lib/perl5/lib/perl5 -Mlocal::lib=$HOME/.local/lib/perl5)
[23:38:06] <mst> what
[23:38:12] <mst> why did you do that?
[23:38:19] <mst> why have two layers of lib/perl5 ?
[23:38:30] *** Joins: llh (~llh@user/llh)
[23:38:42] <phryk> because i misunderstood what goes in there, if i'd known before I'd just done ~/.local/perl5 instead :P
[23:39:18] <mst> right, well, use 'mv' then
[23:39:21] <phryk> boils down to "that's what I'm used to from python"
[23:39:41] <mst> right, virtualenv is like local::lib but designed to be easy for developers rather than sane for sysadmins
[23:39:45] <phryk> ah, there's no state in there that has the location hardcodedß
[23:39:45] <mst> significantly different aesthetic
[23:40:03] <mst> phryk: like I say, 'sane for sysadmins'
[23:40:12] <mst> a local::lib can go in /etc/skel if you want it to ;)
[23:40:25] <phryk> i find it sane and I'm running a bunch of infrastructure. :P
[23:40:34] <mst> that's one of the reasons I always use $HOME in the examples
[23:40:35] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[23:40:45] <mst> means relocation of the .bashrc survives too
[23:41:05] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:c833:17dc:ee27:efe1) (Ping timeout: 246 seconds)
[23:41:06] <mst> anyway, apply 'mv', and fixup your rc file
[23:41:12] <phryk> aye
[23:41:16] <mst> and then (before you try anything more clever)
[23:41:30] <mst> go with 'cpanm Authen::Passphrase'
[23:41:34] <phryk> aye
[23:41:48] <phryk> running
[23:42:01] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[23:42:09] * mst thinks 'sets half a dozen env vars, after which everything, including the entire toolchain, Just Works' isn't a bad achievement
[23:42:18] <mst> note that if you ever need to install a patched version of something or whatever
[23:42:38] <mst> running 'perl Makefile.PL; make test; make install' in an unpacked tarball or a git clone -also- works fine because of the env vars
[23:42:58] <phryk> oh, those will be honored?
[23:43:10] <mst> yep
[23:43:18] <phryk> getting messages of dependencies being successfully installed
[23:43:41] <mst> right, cos cpanm was designed -after- I wrote local::lib so was built to work correctly with it from the ground up
[23:43:54] <mst> in fact cpanm uses a bundled local::lib to get itself installed to the right place to begin with :D
[23:44:00] <phryk> is cpm just another frontend for cpanm?
[23:44:14] <mst> cpm shares a bunch of code but it's not quite 'just a frontend'
[23:44:35] <phryk> but it *does* come with nicely colored output? :P
[23:45:00] <mst> I definitely remember having to figure out how to turn the angry fruit salad off.
[23:45:17] <phryk> 19 distributions installed, exit code 0. :)
[23:45:59] <mst> the thing to bear in mind is that 'cpm' also defaults to installing into local/ in your project directory rather than into your main local::lib - which works nicely if you're using carton or plx, but if you just want to be able to run 'perl myscript' you need to remember to say 'cpm install -g Thing'
[23:46:49] <Adura> cpm doing that was confusing as a Strawberry and perlbrew user.
[23:47:23] <mst> Adura: yeah, I basically only use cpm inside App::plx setups
[23:47:30] <phryk> okay, I'm gonna try loading Authen::Passphrase into the project (that mostly uses globally installed perl modules from pkg)
[23:48:19] <mst> phryk: provided you have the local::lib env vars around that layering is supposed to work fine
[23:48:53] <phryk> mst: yes and yes. got a message about it not finding the module, opened a new shell and from there it worked. :)
[23:49:17] <phryk> does cpanm by default run all those tests, too tho?
[23:49:30] <mst> it does, you can pass '-n' to disable tests on installation
[23:49:38] <phryk> nice.
[23:49:51] <mst> cpm and carton default to skipping tests
[23:50:02] <mst> personally when I'm installing a module for the first time on a new system I like running everything
[23:52:37] <phryk> aye. especially running a POSIX OS that *isn't* Linux-based I'd like to make sure things don't randomly explode on me. :)
[23:52:55] <phryk> thanks for helping again mst :)
[23:53:13] <mst> admittedly, the BSDs all have very solid perl support
[23:53:14] <mst> but yeah
[23:53:49] <phryk> ye, more worried about binary components. :P
[23:54:06] <mst> right, 'actually running the tests for modules that are part C' is generally not a bad idea
[23:54:12] <mst> though cpan is ... surprisingly not bad
[23:54:20] <mst> and you can always check the cpantesters.org results for your OS
[23:54:56] <phryk> i feel like the perl ecosystem has a lot of infrastructure, but not a lot of integration between it… is that warranted?^^
[23:55:44] <mst> depends on what you mean by integration
[23:56:12] <mst> like local::lib, cpanm, cpm, carton, and plx all talk to each other fine
[23:56:20] * GumbyPAN CPAN Upload: XS-Parse-Keyword-0.16 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.16
[23:56:26] *** Joins: proller (~p@80.240.216.69)
[23:56:40] <mst> but there's a fair bit of "you snap together tools" rather than there being a single pre-pack thing that does everything
[23:57:13] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:57:16] <mst> perl programmers have a tendency to have their individual opininateds that mean that pre-pack opinionateds often don't take off ;)
[23:57:39] <mst> same reason I like FreeBSD over linux for when I actually want control of things
