[00:00:29] <copec> Like http://osv.io/ but all CL - that would be insanely cool
[00:00:30] -ixelp- OSv - the operating system designed for the cloud
[00:00:33] <copec> at least to me
[00:13:06] <gilberth> What's an unikernel?
[00:17:41] <sm2n> the idea is that your application should run on bare metal, and timesharing can be managed by a hypervisor
[00:18:19] <sm2n> because operating systems have failed to provide secure and simple interfaces for sandboxing and deployment
[00:18:25] <sm2n> instead you emulate the whole machine
[00:19:13] <gilberth> Oh, so we abandon the idea of an operating system and pretend that applications run on bare metal and the "OS" just virtualizes some metal?
[00:19:32] <gilberth> Terrific idea. Back to where we came from.
[00:23:29] <Catie> Could you not compile SBCL in with i.e. MirageOS to make a unikernel?
[00:23:44] <sm2n> gilberth, exactly
[00:24:01] <sm2n> Catie, mirageOS is ocaml only
[00:24:33] <Catie> Shucks okay, that's no good then
[00:28:53] <selwyn> shka: are you enjoying sc2
[00:32:45] <copec> The thing is, I would otherwise argue it's a bad idea, unless it is an OS like beach's purposed OS
[00:33:36] <sm2n> I don't follow
[00:34:04] <sm2n> hypothetically, CLOSOS is a full general purpose operating system
[00:34:54] <copec> yeah, but it kinda fits into the definition of a unikernel too
[00:34:58] <copec> only a unikernel++
[00:34:59] <copec> heh
[00:35:58] <copec> I'm a math major that has always done systems admin.
[00:36:11] <sm2n> I don't really think so? Unless you count any kernel as a unikernel
[00:36:21] <sm2n> cool
[00:36:45] <copec> What I'm saying, is that as real CS people, I might be shot down easily
[00:36:57] <sm2n> well I'm a math major too :)
[00:37:27] <copec> probably a CS major too though
[00:37:31] <sm2n> nope
[00:37:36] <copec> well, right on!
[00:39:39] <copec> I've used sunos/illumos zones forever now, so I use zones as much as I can, and agree with this in general: https://www.joyent.com/blog/unikernels-are-unfit-for-production
[00:39:41] -ixelp- Unikernels are unfit for production | Joyent
[00:39:48] <Catie> What would be the end goal, just getting a REPL running without a full-blown operating system in the way?
[00:40:30] <copec> and to have everything thought from the OS up in a lisp way
[00:41:02] <copec> It seems like a natural interface between doing things a lisp way and running in a cloud
[00:41:07] <gilberth> The point is that with CL you don't need separate address spaces like with C.
[00:41:31] <copec> exactly what I'm failing to say
[00:41:55] <gilberth> The virtual address spaces are only there to isolate applications from each other.
[00:42:31] <gilberth> [Provided that the compiler does not cheat type and range checking away.]
[00:43:16] <copec> If the standard cloud block is the VM interface, why not have it a full OS that does have the benefits of a 'unikernel
[00:43:43] <gilberth> The only challange is how to make the global environment first class, so that one application could not trip on another by modifying global (then system wide) defintions.
[00:44:41] <sm2n> yeah but that's a lisp OS, you can run multiple programs on it just fine
[00:44:46] <Catie> Unless I'm missing something, the solution to that is the virtual address space that a unikernel does away with
[00:44:54] <gilberth> Once you have that you don't need the MMU for address space separation anymore, but only for virtual memory.
[00:45:39] <sm2n> Catie, virtual memory is isolation at the level of the C memory model
[00:45:41] <gilberth> A unikernel is some application with a arbibtrary metal API as OS calls.
[00:45:57] <sm2n> but you can instead have isolation at the level of (for example) the lisp memory model
[00:46:03] <sm2n> language-enforced safety
[00:46:10] <gilberth> Indeed.
[00:46:30] <gilberth> As long has I won't pass you a pointer to my object, you can't modify it.
[00:46:39] <sm2n> it's not a new idea: https://en.wikipedia.org/wiki/Single_address_space_operating_system
[00:47:18] <copec> I mean, it is re-inventing the wheel, but the advantage is that it is all in lisp like ways
[00:47:42] <gilberth> Interesting however would be: "Can I pass you some object for you to just look at?"
[00:48:10] <copec> It would probably gain a lot more traction then a CL based desktop OS
[00:48:43] <gilberth> And that get's very tricky. I have the whole issue some thought but didn't came up with sth reasonable.
[00:48:45] <Catie> So either a real or virtual hardware platform designed around the Lisp memory model rather than the text-data-stack model you find in C programs and, consequently, the x86 architecture?
[00:49:34] <gilberth> E.g. I may want to pass you some stream to write to with WRITE-xyz, but you shouldn't be able to peek at my slots.
[00:49:40] <sm2n> essentially you virtualize variables, packages, objects, etc, instead of raw memory accesses
[00:50:25] <gilberth> Yes, that's the easy part.
[00:50:45] <sm2n> gilberth, that's hard in CL, but easy in other (statically typed, unfortunately) languages
[00:51:18] <gilberth> Yes, public versus private.
[00:52:25] <gilberth> I more envision that the rôle changes when you invoke certain methods. A context switch essentially. Like a syscall in UNIX. Or a bit like a monitor.
[00:52:46] <Catie> How would this compare to Genera and the Lisp Machine?
[00:53:06] <gilberth> Genera has none of these things.
[00:53:18] <sm2n> I don't think genera had isolation
[00:53:26] <sm2n> but I'm not really familiar with it
[00:53:45] <gilberth> Genera is just like running a vanilla CL on bare metal.
[00:54:12] <Catie> Not the datatype protection no, but it was -- if I'm not mistaken -- a single-address-space operating system running on bare metal that was designed to accommodate Lisp code
[00:54:18] <sm2n> yes that is true
[00:54:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[00:55:00] <sm2n> because back then isolation was about "a bug in this program shouldn't corrupt the whole system", not "this program is potentially actively malicious and will attack the rest of the system"
[00:55:15] <Catie> Admittedly, it's completely unusable today since the only surviving implementation runs on the SPARC architecture, but it seems to be the closest thing that was actually widely used
[00:55:23] <sm2n> and you don't necessarily need fancy sandboxing for the former
[00:55:35] <sm2n> a safe runtime is sufficient
[00:55:50] * gilberth nods.
[00:56:19] <Catie> Yeah, I can't remember if the MIT Lisp machine supported concurrency or not, it may only have been able to run one application at a time
[00:56:25] <Catie> I'll break out the manual
[00:56:47] <gilberth> Catie: Cooperative multithreading it was.
[00:57:15] <Catie> Sure enough, yeah
[00:57:48] *** Joins: makomo_ (~makomo@user/makomo)
[00:58:32] <gilberth> Could work quite well. http://clim.rocks/ is on CMUCL 18e, using cooperative multithreading and is rock solid, it never crashes or hangs.
[00:58:32] -ixelp- /
[00:59:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:04:28] <sm2n> anyway copec, there is nothing stopping you from deploying CLOSOS to a server other than the fact that it does not exist
[01:04:49] <sm2n> but it doesn't make sense to deploy each program separately in that case
[01:05:24] <sm2n> it's just a waste of resources, and nested preemption is suboptimal
[01:07:38] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:12:30] <Catie> Oh my god thank you for sharing that link! It's got the original distribution of XLISP, which I've been looking for!!
[01:18:41] <copec> sm2n Yeah that's what I was thinking, threads of only a singular application
[01:19:27] <copec> something sitting on a minimal linux ie aws lambda is probably only a fractional slower tho
[01:19:51] <Catie> It would be more an academic exercise than a practical one for sure
[01:26:30] <gilberth> Catie: From my website?
[01:26:46] <Catie> Oh I see, that's yours?
[01:26:57] <gilberth> Sure, there is my name on it.
[01:27:12] <Catie> Well hey, thank you!
[01:27:31] <gilberth> The also is an ISO C99 version of XLISP, which is my clean up.
[01:28:05] <Catie> Historical information on XLISP is pretty sparse, but it's a significant language due to its adaptation to AutoLISP
[01:28:23] <Catie> I'll have to have a look at the C99 version too!
[01:28:42] <gilberth> Well, before CLISP I used it quite a lot, but I extended it by a byte code compiler.
[01:29:28] <gilberth> The xlisp-sane-1.6.tar.gz is just the original xlisp-1.6 in modern C.
[01:30:14] <gilberth> AutoLISP is based on XLisp 1.4 IIRC
[01:30:42] <Catie> I can guess the answer, but do you know offhand if XLISP 1.4 supported DEFMACRO?
[01:31:02] <gilberth> I don't know, I never used it.
[01:31:16] <Catie> Yeah no worries on that one
[01:32:07] <gilberth> But XLISP expands macros all the time while interpreting, which is sth. one really wants to fix with a custom DEFUN which expands all macros once.
[01:34:09] <sm2n> copec, does aws lambda use virtual machines? I assumed it was containerized
[01:35:29] <sm2n> I've never used it personally though
[01:38:39] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[01:47:12] <copec> It is a VM
[01:48:25] <copec> I think they all use their 'firecracker' VMs though https://aws.amazon.com/blogs/aws/firecracker-lightweight-virtualization-for-serverless-computing/
[01:48:25] -ixelp- Firecracker – Lightweight Virtualization for Serverless Computing | AWS News Blog
[01:49:42] <copec> https://firecracker-microvm.github.io/
[01:49:42] -ixelp- Firecracker
[01:52:08] <copec> It is a minimal virtual machine monitor that can bootstrap into linux in ms
[01:56:40] *** Joins: lotuseater (~user@p200300e7871b3f009816696f16ea572e.dip0.t-ipconnect.de)
[02:06:31] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:07:11] <dave0> maw
[02:19:48] <sm2n> copec, interesting
[02:20:10] <sm2n> wonder how they got boot times that low
[02:27:47] <copec> A lot of state that can be assumed or pre-determined that can be hard coded into the kernel I think.
[02:32:10] <sm2n> yeah that would make sense
[02:32:39] *** Joins: christophergray (~christoph@190.148.53.129)
[02:35:25] <lotuseater> hi there
[03:11:30] <sm2n> hi
[03:11:53] * lotuseater gets his Club Mate bottle
[03:50:03] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 258 seconds)
[03:51:45] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:53:06] *** Quits: random-nick (~random-ni@87.116.181.197) (Ping timeout: 240 seconds)
[04:19:52] <hayley> "E.g. I may want to pass you some stream to write to with WRITE-xyz, but you shouldn't be able to peek at my slots." Just hack your MOP to use mirrors internally, and have the mirror refuse to give information.
[04:20:03] <hayley> http://bracha.org/mirrors.pdf
[04:21:15] <hayley> Or disallow SLOT-VALUE even. Then you have straight object capabilities.
[04:21:55] <gilberth> hayley: Won't change a thing.
[04:22:57] <hayley> Can't peek your slots. I don't see how it doesn't change that.
[04:23:06] <gilberth> There is no significant difference between an acessor and a use of slot-value. Point is: I want that you just invoke my methods on the object, yet those methods must fuss with the objects internal state.
[04:23:32] <Catie> So closer to pure object-oriented programming, like you might find in Smalltalk?
[04:23:33] <gilberth> hayley: Sure.
[04:24:23] <gilberth> Still, I don't want some protocol of primitive data on some sort of mailbox/fifo/whatever but direct invokation of the methods. It's a bid like syscalls.
[04:24:31] <hayley> gilberth: Not really. The difference is that if I call SLOT-VALUE, it is done in my world/environment/account/etc and is thus different to an accessor compiled in another environment.
[04:25:06] <sm2n> this is actually more powerful than syscalls, since you get ipc for free
[04:25:08] <hayley> Then we also have the problem that you don't want to be able to prod at internal accessors, which is handled by first-class global environments well enough.
[04:25:38] <gilberth> hayley: Ok. So you want to solve that by your #'foo being not my #'foo?
[04:25:43] <sm2n> "injecting" methods from a different environment
[04:26:50] <hayley> gilberth: You can share functions, but the context in which they are compiled in now matters.
[04:29:15] <gilberth> Point is: At some place you'd need sth like a context switch.
[04:29:24] <gilberth> point, perhaps.
[04:30:00] <hayley> You would change global environments, but that's it.
[04:30:02] <gilberth> Begins with, that I don't want to call your #'+, say, in my method.
[04:30:50] <gilberth> hayley: Indeed. So a generic function could perhaps act as a kind of gate. As a syscall in UNIX works.
[04:35:09] <hayley> IMO you don't want to use the type system for encapsulation, unless you know it to be sound (at least w.r.t access control). And then any reflective facilities require something like mirrors in the end.
[04:37:07] <hayley> https://www.youtube.com/watch?v=M3SvAhjhbpA
[04:37:07] -ixelp- Gary Numan (TV, Live and Rarities) [06]. I Die: You Die (Kenny Everett) - YouTube
[04:37:36] <gilberth> hayley: Agreed. I'd like to consider the type system as not a device for enforcing anything, but sorta orthogonal.
[04:40:49] * hayley wonders if there is something slightly faster than SLOT-VALUE-USING-CLASS. I guess we could say that most objects won't be transported, and those which are have some metaclass.
[04:41:29] <gilberth> hayley: You're the inline-happy.
[04:42:20] <hayley> gilberth: I suppose, given that we can't transfer ownership between environments in this model, we could eliminate all but one test.
[04:43:09] <gilberth> Which model? The CLOSOS model?
[04:43:46] <hayley> I don't think CLOSOS has such a model. I mean that we say an object "belongs" to one environment, and SLOT-VALUE[-USING-CLASS] will only work in that environment.
[04:44:28] <hayley> Though beach also suggested putting 'capability' bits on pointers, which could also be used to forbid low-level access.
[04:44:58] <gilberth> I don't think that objects should belong to some environment. That is too Smalltalkish. GFs should. Generic functions, even.
[04:45:18] <gilberth> Think monitors.
[04:45:45] <hayley> But SLOT-VALUE is necessarily object-centric rather than operation-centric.
[04:47:17] <gilberth> Milady, I am not concerned about SLOT-VALUE. Just make the object a mere pointer/handler, I may not peek at. OK, that connects objects with environments, granted.
[04:47:26] <hayley> Another option would be to have CLASS-EFFECTIVE-SLOTS fail from other environments. Thus no effective slot metaobjects and thus no peeking.
[04:48:11] <hayley> Then we say that the pair (class, effective slot) is the capability to peek at a slot. Not that there is a use for that, but you could do it.
[04:48:25] <gilberth> *think*
[04:49:43] <gilberth> Could work. How would I open up an object? That is specifically grant full access to it?
[04:50:25] <hayley> Generally, you wouldn't. But you could also provide a phony effective slot object which only lets you read for debugging.
[04:51:11] <hayley> https://i.redd.it/pkremx1byjf71.jpg lol
[04:51:57] <gilberth> Heh. Yes, good one.
[04:55:56] *** Quits: Catie (~user@c-24-17-253-63.hsd1.wa.comcast.net) (Quit: rcirc on GNU Emacs 27.2)
[05:02:45] <hayley> https://www.youtube.com/watch?v=UokIoawK9wQ
[05:02:46] -ixelp- By This River (2004 Digital Remaster) - YouTube
[05:14:00] *** Quits: christophergray (~christoph@190.148.53.129) (Quit: WeeChat 3.2)
[05:23:47] * hayley continues to self-harm by looking at r/programming
[05:23:53] <hayley> https://www.reddit.com/r/programming/comments/oycjq4/ms_edge_team_experiments_with_disabling_jit_super/h7srgui/
[05:23:54] -ixelp- MS Edge Team experiments with disabling JIT (Super Duper Secure Mode) : programming
[05:24:18] <hayley> Shit, man, if JIT only works well with static typing, how did they do it in Self?
[05:24:36] <hayley> In a way a JIT is a compiler which manages to pull type declarations out of thin air, and tends to win most of the time.
[05:26:27] <hayley> Must suck to have not read Craig Chamber's thesis <http://www.wolczko.com/tmp/ChambersThesis.pdf>
[05:50:48] <hayley> It's funny in the same way that people saying dynamic language have poor refactoring tools is funny. Guess Interlisp and Smalltalk never happened too.
[05:57:32] <gilberth> hayley: People always claim that "X is not possible with dynamic languages" for any X you could imagine, most often because they fear dynamic languages in general and fight them.
[06:02:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:706d:6457:86cf:4f78) (Remote host closed the connection)
[06:02:56] <hayley> gilberth: Indeed.
[06:09:38] <hayley> Still, someone should have told Craig so he wouldn't have to waste time to only get 1/2 the speed of C with pure message passing and no type declarations.
[06:15:51] <hayley> "What are you up to?" "Work." "What are you up to?" "Work." "What are you up to?" "Register allocation." *silence*
[06:29:31] *** Cathrinus is now known as Lulu
[06:37:01] *** Quits: lotuseater (~user@p200300e7871b3f009816696f16ea572e.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:59:54] <hayley> "Show me what you're working on." "I made these boxes on the control flow diagram into NOPs." "...right."
[07:21:41] <gilberth> Wouldn't an eraser do?
[07:24:58] <hayley> Not exactly.
[07:27:36] <gilberth> Granted, after you erased the boxes you also need a pencil to close the gap in the connection.
[07:28:48] * hayley is (CONSTANTLY 'WRONG) when it comes to making theorems about clobbering registers and argument parsing.
[07:29:31] <gilberth> This would indicate that you miss something.
[07:30:55] <gilberth> Perhaps one of those pencils with an eraser at the end of the shaft?
[07:31:05] <hayley> Consider that (&optional (foo nil foo-p)) creates 2 variables. So we can still mistakenly clobber. *sigh*
[07:32:17] <gilberth> See. :)
[07:33:31] <gilberth> And, are there really two? Doesn't the body just receive an unbound marker, if 'foo' is not present? Or: In which realm is the default evaluated?
[07:34:33] <hayley> There are two in HIR.
[07:34:56] <gilberth> What ever the "H" is.
[07:35:18] <hayley> High-level intermediate representation (contrast, MIR middle, LIR low)
[07:35:29] <hayley> Do you know how to trash the last 4 commits in git?
[07:36:05] <gilberth> Me? You're kidding. I know exactly this much about git:
[08:01:36] <hayley> https://www.youtube.com/watch?v=WXhv61SIpS0
[08:01:36] -ixelp- Smash It Up, Pt. 1 & 2 (Live) - YouTube
[08:04:52] * hayley had everything nearly work, only to fail while loading Alexandria (which is the second-last thing it does).
[08:15:43] <hayley> So, as I use normal locations to represent argument registers, the compiler decided to spill the arguments.
[08:16:28] <hayley> Thus I decided that we can just replace argument loads with normal assignments.
[08:29:38] <hayley> Also, note that this means that we don't have that old constraint where you can only execute argument-related instructions once, because the compiler will note the old location is still live and won't clobber it.
[08:53:55] *** Joins: nihaal (~nihaal@106.201.177.18)
[09:16:30] *** Quits: ^[ (~user@user//x-8473491) (Ping timeout: 272 seconds)
[09:18:15] *** Joins: ^[ (~user@user//x-8473491)
[09:22:32] *** Quits: krl (~rixard@h-158-174-122-239.A357.priv.bahnhof.se) (Read error: Connection reset by peer)
[09:58:54] *** Joins: shka (~herr@109.231.62.239)
[10:13:39] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[10:58:35] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[11:01:59] * hayley corrected someone on some arbitrary language implementation detail, 12 people have read it, and there's no response. Kinda awkward.
[11:02:54] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 268 seconds)
[12:11:09] *** Joins: noa (~noa@81.170.98.107)
[12:17:34] *** Quits: noa (~noa@81.170.98.107) (Ping timeout: 256 seconds)
[13:00:03] *** Joins: vats (~vats@103.70.83.249)
[13:21:14] *** Quits: nihaal (~nihaal@106.201.177.18) (Quit: nihaal)
[13:49:31] *** Quits: cond (~example@user/aeth/bot/cond) (Ping timeout: 258 seconds)
[14:07:48] *** Joins: selwyn (~selwyn@user/selwyn)
[14:08:04] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:08:28] *** Joins: selwyn (~selwyn@user/selwyn)
[14:09:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[14:16:49] *** Joins: random-nick (~random-ni@87.116.181.197)
[14:18:23] <selwyn> i am going to build a discord bot with java/abcl over the weekend
[14:21:06] <kakuhen> out of curiosity, why abcl over clojure?
[14:21:41] <selwyn> wondering whether to bother with using a java ide that uses maven
[14:22:13] <selwyn> kakuhen: i have never really used clojure but i have a reasonable amount of common lisp experience
[14:22:37] <kakuhen> ah, well i guess that answered my upcoming question of whether you considered kawa scheme too
[14:22:57] <selwyn> i have also wanted to use abcl for some time but never had a project that would need it (until now)
[14:23:48] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[14:23:58] <selwyn> i would usually prefer common lisp, and i think that the jvm is as good a place as any to have a common lisp implementation
[14:25:07] <kakuhen> i see; ive been curious on learning clojure but i cant get myself to learning it
[14:25:48] <selwyn> otoh i like gambit scheme on the web page http://feeley.github.io/gambit-in-the-browser/
[14:25:48] -ixelp- Gambit in the browser v0.3
[14:26:31] <selwyn> i did learn clojure for a very brief period of time before switching to common lisp
[14:27:11] <selwyn> although the situation may well have changed, i got the impression that the tooling was not as mature as common lisp
[14:28:30] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[14:28:34] <nij-> Heeey :)
[14:28:53] <nij-> What will be your goal in that reading seminar?
[14:29:38] <kakuhen> well this spring there was somehow a dedicated course on category theory, they were using riehl's text, and i learned bits and pieces of category theory on the side as I learned algebra & topology
[14:29:44] <nij-> I always wonder why one would study the general theory of monads .
[14:29:47] <kakuhen> also did a great deal of category theory in the first 3 weeks of my graduate alg course
[14:30:02] <kakuhen> and i loved the end of the ct course when we learned about monads & kan extensions 
[14:30:13] <kakuhen> asked the prof for some recommendation on further reading and that text was one such recommendation
[14:30:29] <nij-> Does the prof say anything? What will you gain?
[14:30:34] <kakuhen> also considered riehl's homotopical algebra to go straight into higher cats but decided against it
[14:30:49] <kakuhen> nij-: I gain the 4 extra credits needed for me to be considered a part time student LOL
[14:30:55] <kakuhen> for me to not be considered*
[14:30:57] <nij-> no lol
[14:31:01] <kakuhen> i find the topic interesting too
[14:31:03] <nij-> I mean the true knowledge.
[14:31:11] <nij-> Why would you want to understand the theory of monads?
[14:31:17] <nij-> I mean, for groups, there are many reasons.
[14:31:23] <kakuhen> well, monadicity appears in a lot of places in math
[14:31:28] <kakuhen> have you heard of faithfully flat descent before?
[14:31:33] <nij-> Quantum chemistry, gauge theory, combinatorics, representations.. etc.
[14:31:36] <kakuhen> there's a monadic structure behind that
[14:31:48] <nij-> I haven't head of that
[14:31:52] <nij-> would you explain briefly?
[14:31:55] <kakuhen> OK but you mentioned groups. Do you know a ring or field is?
[14:31:59] <nij-> Yes
[14:32:14] <nij-> I have some basic knowledge in AG
[14:32:16] <kakuhen> Alright so suppose you are tackling some problem with rings, right
[14:32:18] <nij-> also in homotopy thoeyr too
[14:32:24] <nij-> i know cohomology
[14:32:25] <kakuhen> and you really wish some x could be invertible
[14:32:47] <kakuhen> well one way to make your life easier would be to take this ring to its localization at x, assuming that x isn't nilpotent (otherwise this is kinda pointless right?)
[14:32:55] <kakuhen> and then do what you need there that requires on x being invertible
[14:33:00] <nij-> yes
[14:33:02] <kakuhen> but now how do you carry this back to the original ring?
[14:33:19] <kakuhen> and this is the basic motivation behind techniques in faithfully flat descent
[14:33:25] <nij-> extension?
[14:33:33] <kakuhen> the opposite of extension, so to speak
[14:33:41] <kakuhen> so you want to define a functor that can take you from this localization to your general ring
[14:34:02] <nij-> Cool! Where in the book can I read about that?
[14:34:18] <nij-> I remember seeing this in THE HANDBOOK too
[14:34:24] <nij-> but i wasn't paying much attention on that
[14:34:32] <kakuhen> you obviously don't want this functor sending anything to a zero object otherwise you lose all information, and so on; following this kind of thought leads you to concluding that you'd want your functor to be faithful
[14:34:49] <kakuhen> unfortunately it's 3 am here so im half awake and trying to think about math topics i havent touched in months heh
[14:34:56] <nij-> np
[14:35:02] <kakuhen> but anyway there's a really nice example that involves AG
[14:35:10] <kakuhen> let me find the reference real quick
[14:35:16] <nij-> appreciated!
[14:35:36] <nij-> Another thing I want to understand about (co)monad is to understand (co)homology.
[14:35:38] <kakuhen> oh and it motivates a pretty non-trivial example of an idempotent monad
[14:35:40] <kakuhen> ;)
[14:35:44] <nij-> But I don't know how to attack on that way.
[14:35:46] <selwyn> you are studying some really nice things
[14:35:52] <kakuhen> (we define monad as idempotent if the unit is a natural iso)
[14:35:57] <kakuhen> counit* my bad
[14:35:58] <nij-> selwyn: ;) ;)
[14:36:19] <nij-> sure
[14:36:22] <kakuhen> identity monad is trivially idempotent, and any monad over a poset category is idempotent too, but these arent interesting examples
[14:36:25] <nij-> TT ~=~> T
[14:36:26] <kakuhen> anyway still finding the reference
[14:36:36] <selwyn> it is possible that i will use categorical quantum mechanics in the near future and i am considering learning ´the real category theory´
[14:37:39] <nij-> selwyn: sounds great
[14:37:44] <nij-> bu what is cat'l QM?
[14:38:39] <selwyn> you can reformulate quantum mechanics in the language of category theory
[14:38:52] <nij-> How? ?!
[14:39:05] <kakuhen> nij-: Check out Chapter 2 Section 5 of "An Extension of the Galois Theory of Grothendieck"
[14:39:17] <selwyn> well, i am not that sure how, because i am ignorant of category theory
[14:39:21] <kakuhen> this covers a really nice concrete example of faithfully flat descent of modules
[14:39:32] <nij-> TOPOSES, TRIPLES AND THEORIES?
[14:39:36] <selwyn> however, you can ask the question, why would we even do that
[14:40:01] <nij-> selwyn: Do you mean QM or QFT?
[14:40:02] <selwyn> and the answer to that i think is that it gives rise to a diagrammatic calculus i.e. you can express things like quantum teleportation in terms of diagrams
[14:40:15] <nij-> Sounds more like QFT
[14:40:18] <selwyn> nij: i mean quantum information, basically operations on two-level or n-level systems
[14:40:25] <nij-> kakuhen: do you mean TOPOSES, TRIPLES AND THEORIES?
[14:40:29] <kakuhen> no I gave the book title
[14:40:32] <nij-> Or another book? There's no that chapter
[14:40:38] <nij-> hmm lemme see
[14:40:48] <selwyn> and this diagrammatic calculus is quite appealing to physicists and straightforward to use afaict
[14:40:51] <kakuhen> nij-: i can paraphrase the discussion roughly as you find it
[14:41:02] <nij-> Ah I see i thought that's the section's name
[14:41:20] <kakuhen> so let's say we have a morphism f:A->B of commutative rings and its associated extension of scalars functor (i.e. B (X)_A -)
[14:41:25] <nij-> selwyn: There's a huge hype launched by J. Baez on this.
[14:41:34] <nij-> But I haven't seen any practical result.
[14:41:39] <kakuhen> the idea behind descent is we want to recover information about A-modules M from their image B (X)_A M as a B-module, and similarly for homomorphisms
[14:41:41] <nij-> By practical I mean any insightful stuff
[14:41:54] <nij-> I asked him once, and he admits that it's still experimental.
[14:42:06] <nij-> The goal is to capture nontrivial results from any kind of network like stuff.
[14:42:33] <kakuhen> so one obvious observation about "descent" is that, if the A-algebra B "loses" information, then we cant recover such an M from their images in B-mod. So that's why the functor, in my way earlier example, should be *at least* faithful
[14:43:02] <selwyn> my take on it is that it´s all very well and good to reformulate things but you should prove some interesting new results otherwise it isn´t that worthwhile
[14:43:12] <selwyn> however, there do seem to be some advances in the 
[14:43:41] <selwyn> ´zx-calculus´ which is to say that some of these diagrams can be seen as intermediate representation for a quantum circuit
[14:43:45] <nij-> Wait, kakuhen
[14:43:47] <kakuhen> nij-: Then if you assume the ring hom is flat, you get lots of nice properties, like the image of the functor B (X)_A - getting killed only when M = 0
[14:43:49] <kakuhen> yeah sorry lol
[14:43:50] <nij-> if you have a ring homo A->B
[14:44:07] <nij-> then a B mod has a natural A mod structure
[14:44:09] <nij-> not the other way around
[14:44:28] <kakuhen> you're thinking of restriction of scalars
[14:44:38] <nij-> selwyn: Yeah, so far I can see lots of terminologies.. but no insights.
[14:44:39] <kakuhen> I said earlier to consider the associated extension of scalars functor
[14:44:51] <nij-> J Baez has some students who do research on this, gave talks
[14:45:10] <nij-> and at the end the croud ask for insight.. turn out.. hmm i don't want to say too directly
[14:45:24] <nij-> So so far I think it's still a bunch of jargons.
[14:45:42] <nij-> They fit the problem into a large framework which is still under development.
[14:45:56] <nij-> Hmm ok I see
[14:46:04] <nij-> kakuhen: I might need to look into that book
[14:46:08] <kakuhen> nij-: anyway... the whole point is that you can quickly find an "elementary" form of faithfully flat descent, and it involves some equalizer diagram in A-Mod with tensor products and lots of other fun stuff
[14:46:10] <nij-> But the picture is clear - 
[14:46:16] <kakuhen> and this has a really nice monadicity by Beck yada yada yada
[14:46:27] <kakuhen> and you can get quite deep down the rabbit hole
[14:46:36] <nij-> Nice, I will read it!
[14:46:59] <kakuhen> but yeah, this is one example where you'd benefit from having studied monads
[14:47:17] <selwyn> https://en.wikipedia.org/wiki/ZX-calculus this thing can be used to optimise quantum circuits as i say
[14:47:36] <kakuhen> nij-: In MacLane, in fact, you should be able to find some general form of faithfully flat descent, described as some equivalence of cats
[14:47:38] <selwyn> which is an exciting application imo
[14:47:53] <kakuhen> I don't remember exactly where in ML but I can try finding it for you
[14:48:06] <kakuhen> but it goes really deep into monad stuff
[14:48:16] <nij-> nope it's fine thanks
[14:48:28] <nij-> i need a motivation to start learning monads
[14:49:20] <kakuhen> to think this discussion all started from a question on lisp books heh
[14:49:40] <nij-> Heh!
[14:49:44] <kakuhen> i just cant get myself to read programming texts even though i want to get better at programming orz
[14:49:58] <nij-> Doesn't that come from implementing stuff?
[14:50:25] <kakuhen> probably? idk; i've been learning common lisp by writing common lisp and learning as i go
[14:50:53] <kakuhen> but sometimes i think to myself "wow if only i could do X in Lisp" only to found out it's possible but i didnt know since i never read on it
[14:51:00] <nij-> selwyn: I'm trying to understand that page..
[14:51:04] <selwyn> i also find it hard to read programming books
[14:51:12] <nij-> Is the meat that you can argue by drawing pictures?
[14:51:33] <selwyn> i find them more dry than maths textbooks, but that is probably a niche personal opinion
[14:51:36] <nij-> kakuhen: Then just dive into the source code?
[14:51:46] <selwyn> you can certainly learn lots from programming books though
[14:51:46] <kakuhen> recently i decided to implement xoshiro256+ in lisp and if a friend didn't tell me about using a vector for storing bytes etc. i would've gotten stuck on porting the code from C to Lisp
[14:51:53] <nij-> To me, the source code is exactly like math book.
[14:51:58] <kakuhen> little things like that always gets me
[14:52:04] <nij-> Functions = Theorems
[14:52:08] <selwyn> nij-: yes
[14:52:09] <nij-> Function implementation = proofs
[14:52:18] <kakuhen> or sometimes there's some graph problem i can easily solve mathematically, but then writing it in code feels like an entirely different problem
[14:52:39] <nij-> selwyn: cool
[14:53:40] <nij-> kakuhen: I think what you want to read is the source code xD
[14:53:54] <nij-> Pick some library that amazes you and find out how it's implemented.
[14:54:51] <kakuhen> the problem is that the only things that amaze me so far are stupidly hard topics
[14:54:51] *** Joins: derelict (~derelict@user/derelict)
[14:55:05] <kakuhen> like how would a garbage collector actually work? 
[14:55:18] <kakuhen> well apparently they're stupidly hard to write and the hardest part of a CL implementation
[14:55:33] <kakuhen> java's concurrent gc was the result of some multimillion dollar investment, etc.
[14:56:01] <selwyn> afaik writing a gc that is 1) fast 2) concurrent 3) realtime and 4) any number of nice other things
[14:56:05] <selwyn> is not easy
[14:56:23] <kakuhen> sure i can probably just open up the source code of SBCL or whatever and see how they implement their gc, but im lacking in a lot of "prerequisite knowledge," i think
[14:56:35] <kakuhen> i barely started any actual programming back in uhh november 2020
[14:56:51] <kakuhen> before that the most i knew was latex, if that counts xd
[14:57:36] <selwyn> i think sbcl´s gc is written in c
[14:58:17] <nij-> kakuhen: +1 for being led into the prog world by latex XD
[14:58:32] <kakuhen> oh you'd be surprised where I actually started.
[14:58:37] <nij-> luke smith?
[14:58:39] <kakuhen> fuckign objective-c 
[14:58:43] <nij-> ok lol
[14:59:03] <kakuhen> i got a macbook around late october and as a kid i always wanted to try out objective-c and writing an iphone app or whatever
[14:59:14] <kakuhen> so i decided "ok i can finally do what i wanted to do as a kid (except i wasnt interested in iphone apps anymore)"
[14:59:14] <nij-> sigh
[14:59:25] <kakuhen> and i still like obj-c fyi
[14:59:31] <kakuhen> but eventually i got led around to lisp
[14:59:35] <kakuhen> for better or worse
[14:59:45] <nij-> which one do you liike better
[15:00:29] <kakuhen> tough call; part of why I like common lisp so much is CLOS and the condition system, and part of why I like CLOS so much is because of how familiar some parts of it feel to Objective-C (and its runtime)
[15:01:02] <nij-> interesting
[15:01:05] <kakuhen> objective-c is able to create and inspect objects at runtime; ditto for clos
[15:01:14] <kakuhen> but obj-c's case is even more interesting because you dont have access to the compiler
[15:01:18] <kakuhen> whereas in common lisp you do
[15:01:44] <kakuhen> and the style of OO in objective-c just feels way different than C++ imo
[15:01:49] <nij-> access to the ocmpiler?
[15:02:09] <kakuhen> well you can compile and load some region of lisp code as your program is running, right
[15:02:12] <kakuhen> you can't do that in objc
[15:02:12] <pjb> kakuhen: well, in objc (just like in C), you can have access to the compiler, compile a shared library, and load it dynamically.
[15:02:46] <pjb> kakuhen: in objc, you can easily define categories and do just that. A few versions of Xcode allowed it and made it easy.
[15:03:01] <kakuhen> categories to do what exactly?
[15:03:11] <kakuhen> i've always seen categories as a neat "approximation" of mixins
[15:03:22] <kakuhen> because of how they can extend classes despite having no access to their implementation
[15:03:27] <pjb> categories allows you to define set of methods to be added to existing classes.
[15:03:37] <pjb> Of course, you can also define new classes this way.
[15:04:01] <kakuhen> right, i've used categories before to do some nasty workarounds for e.g. the fact objc has no "private" methods
[15:04:13] <kakuhen> but ive never considered using them to do what youre describing
[15:04:44] <hayley> selwyn: To a zeroth degree approximation, you either pick hard realtime or performance.
[15:04:44] <pjb> This is also a recognition that some mechanisms have to be implemented with several methods in possibly different classes.
[15:05:08] <selwyn> hayley: ok
[15:05:35] <hayley> But AFAICT that is true of a lot of things and not just GC. Though any incremental GC should be okayish at soft realtime.
[15:05:56] <kakuhen> nij-: anyway -- if you're brave, you can use obj_setClass() and class_setSuperclass() to do emulate nice common lisp libraries like dynamic-mixins
[15:06:25] <kakuhen> and little similarities like that are partly why I like CLOS
[15:06:52] <kakuhen> so i cant give a definitive answer as to whether i prefer objc or lisp -- i'd take "both" as an option if offered.
[15:07:38] <kakuhen> (the latter function I mentioned is considered "deprecated" by Apple but they use it themselves when defining SwiftObject, so I wouldn't trust their terse, poorly-maintained documentation)
[15:08:21] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:95c2:35af:5386:9a00)
[15:09:02] <nij-> Waht kind of app did you want to build?
[15:09:32] <kakuhen> just wanted to write nice convenience apps for myself -- like a pomodoro timer lol
[15:10:09] <kakuhen> the pomodoro timer is very bloated in the sense that i added stuff like a list of todo tasks, an optional playlist that lasts the duration of the pom, and an experimental "multiplayer" feature
[15:10:52] <kakuhen> i learned the hard way that you shouldn't use plain-text over UDP for running a chat and synchronizing timers
[15:11:15] <kakuhen> i spent many nights last december wondering why i kept getting garbage in some buffers used for receiving messages
[15:11:17] <random-nick> well clos and objc both took inspiration from smalltalk afaik
[15:11:30] <random-nick> makes sense that they would be alike
[15:11:54] <pjb> kakuhen: you can, if your text packets are smaller than the MTU and you deal with drops and duplicates and out of order.
[15:12:16] <nij-> gotcha
[15:12:51] <kakuhen> pjb: I see. This is information I did not have at the time
[15:15:01] <nij-> kakuhen: the book is very interesting
[15:15:09] * nij- keeps reading
[15:16:12] <kakuhen> yeah; i cant wait to return to uni this fall and study some nice math
[15:16:23] <kakuhen> but then that means I have zero time for lisp until next june :(
[15:16:25] <nij-> where do you study?
[15:19:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:21:34] *** Joins: selwyn (~selwyn@user/selwyn)
[15:21:54] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:23:33] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[15:24:04] <lotuseater> good morning :)
[15:24:11] <nij-> gm :D
[15:27:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:28:45] <lotuseater> hello nij- 
[15:34:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:36:42] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 240 seconds)
[15:44:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Remote host closed the connection)
[15:57:36] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[16:00:14] *** Joins: selwyn (~selwyn@user/selwyn)
[16:03:01] <hayley> https://www.youtube.com/watch?v=qqk9HlevSCE
[16:03:01] -ixelp- Gary Numan We Take Mystery To Bed - YouTube
[16:03:09] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[16:03:57] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[16:07:32] <hayley> https://twitter.com/swmckay/status/1423596769791946754 Shit's bad when Scott McKay agrees something is idiotic.
[16:10:01] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:10:10] <nij-> .
[16:17:54] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[16:30:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:31:16] <hayley> Is there a description of how loop unrolling is usually implemented?
[16:32:02] *** Joins: selwyn (~selwyn@user/selwyn)
[16:34:46] <lotuseater> I would have said there's a chapter about how to implement parts of the LOOP macro, but I think you mean something else more ALU binded. ^^
[16:36:01] <hayley> It is a general compiler optimisation, but all the descriptions look like "Here is a for loop. Here is a for loop after unrolling." They probably don't actually diddle the for loop to do unrolling.
[16:36:27] <lotuseater> too bad :/
[16:36:35] <gilberth> Good morning #lispcafe!
[16:36:52] <lotuseater> There's even a German article in Wikipedia about the topic.
[16:36:58] <lotuseater> heyho gilberth 
[16:37:00] <hayley> Good morning gilberth!
[16:37:02] <selwyn> hi gilberth
[16:37:08] <gilberth> hayley: Does the Dragon book say anything?
[16:37:18] <hayley> Though I could imagine the compiler is really looking for the pattern to rewrite.
[16:37:23] <hayley> gilberth: I have not read the Dragon book.
[16:37:40] <gilberth> Milady, you're kidding me.
[16:37:53] <hayley> I am not kidding you.
[16:38:16] <gilberth> Get a copy, quick. Read it.
[16:39:28] <lotuseater> I'm also interested in building (functional) compilers, but I think the Dragon Book would be too high.
[16:40:33] <gilberth> It's a must read IMHO. Unfortunately my copy is not here, otherwise I would have a look.
[16:40:35] <lotuseater> gilberth: look at that good ol' stuff http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-5-pdf/k-5-u2456-Rechenplanfortigung-german.pdf
[16:40:54] <lotuseater> I could look into the PDF now.
[16:42:11] * hayley C-f for "unroll" and the first hit has the same "here is your for loop" stuff.
[16:43:13] <gilberth> So you have trouble with identifying loops? Or those worth unrolling?
[16:44:06] <hayley> I'd like some idea of how to identify a suitable loop in some control/data flow graph, rather than an AST.
[16:44:29] <hayley> Given that we have DOTIMES, LOOP, and you can invent your own loop by TAGBODY, at least.
[16:45:41] <gilberth> I see. Indeed, most descriptions I saw work on the AST, also for loop invariants.
[16:46:38] <lotuseater> or also use intrinsics for wider optimization on special architectures
[16:46:56] * gilberth needs coffee.
[16:47:46] <lotuseater> I don't have coffee, sorry.
[16:48:07] <hayley> lotuseater: Well, then you might identify the repeated scalar operations and have another pass clean them up into vector operations.
[16:48:26] <lotuseater> isn't that what LLVM does?
[16:48:27] <hayley> Though /me is sitting on implementing the latter pass for a university project.
[16:49:05] <hayley> I don't know. Don't tell me just yet :)
[16:49:09] <lotuseater> yes here at the university there's also a group for building functional programming compilers
[16:49:55] <lotuseater> I was just guessing.
[16:50:47] <lotuseater> so you build a compiler framework and then you PROVE that is works correctly
[16:53:47] * hayley can't even prove basic facts about generated code most of the time.
[16:54:40] <lotuseater> I once found a PhD thesis about compiling with dependent types that are still there when the final code is about to be generated.
[16:54:58] <lotuseater> hayley: don't worry :)
[16:55:17] <lotuseater> but this CompCert C compiler is proven with Coq afaik
[16:55:43] <lotuseater> https://compcert.org/
[16:55:44] -ixelp- CompCert - Main page
[16:56:11] <hayley> https://www.youtube.com/watch?v=2AEln96mLU8
[16:56:11] -ixelp- Joan Of Arc (Maid Of Orleans) - YouTube
[17:00:27] <hayley> https://www.youtube.com/watch?v=afcT34E_zco
[17:00:27] -ixelp- 66 And Fading (2008 Digital Remaster) - YouTube
[17:00:37] <lotuseater> https://www.youtube.com/watch?v=fKSJ_yqtGOw
[17:00:37] -ixelp- Night Lovell Ft. $UICIDEBOY$ - Joan Of Arc (Rick And Morty Music Video) - YouTube
[17:12:27] <lotuseater> I should read today the rest of "Notation as a Tool of Thought"
[17:18:32] *** Joins: noa (~noa@81.170.98.107)
[17:21:57] <hayley> https://www.youtube.com/watch?v=6P4ELM0nB9M
[17:21:58] -ixelp- Messages (Remastered) - YouTube
[17:35:45] *** noa is now known as noa```
[17:53:37] * gilberth forgot that "root" isn't "root" from the perspective of an NFS server.
[17:59:06] <hayley> OTOH it is easier and strategically better for me to not correct random crap about dynamic languages on the internet. "Pretend inferiority and encourage [their] arrogance" and all.
[18:00:09] <gilberth> hayley: Wasted effort.
[18:01:19] <hayley> gilberth: Worse, as they realise that there is a bar to clear.
[18:01:57] <gilberth> A "bar to clear"? What does that mean?
[18:03:45] <gilberth> Anyhow, a new person, who will be in utter fear of dynamic languages, is born every day. Lost cause.
[18:04:40] <gilberth> Though it's getting better. Some day there will be a language du jour like CL. Just be patient.
[18:05:38] <hayley> You know, that the quality of one's environment isn't measured in a vacuum. That so and so was already done however many decades ago, that some technique is a shit substitute for another, etc.
[18:06:26] <hayley> "Look how nice my IDE is, I can replace all the callers of one function" "Welcome to Smalltalk-80!"
[18:07:13] <gilberth> Yes. You could call that ignorance.
[18:09:07] <gilberth> Or the false belief that what they use would be state of the art. In their tiny little bubble.
[18:09:11] <hayley> If they don't know that, they have no measure of quality, aside from mere principles. And those principles tend to be very fucked up to me.
[18:10:29] <gilberth> As I said: Ignorance about what was there already.
[18:10:47] <hayley> That is what they have rather. So there is also little motive to improve.
[18:11:53] <hayley> The big three principles in Self are directness, uniformity and liveliness. I don't know what they are in CL though I recall CLtL gave a list.
[18:12:28] <gilberth> You see that with the destruction of the principles of the X11 protocol, too. Ironically also fostered by people like Keith Packard, who should know better. Kids wanna blitter over the network. Terrific.
[18:12:57] <selwyn> i believe i have sorted out my numerical issues after some months
[18:14:32] <hayley> I guess the usual CL tools are...kinda direct. To be fair, the improvement in Self is that you can have multiple inspectors, inspectors have arrows between them, and the inspectors are just called objects. So directness is nearly a naming convention.
[18:15:06] <gilberth> selwyn: That is great news. Staff! Champagne for everyone!
[18:15:49] <hayley> Some people complain about it not being uniform, but I don't care. e.g. it is fine to me that you look up a list by index, alist by key, array by index, and hash table by key, because they have different time complexity and domains.
[18:16:41] <hayley> That list is the product of O(1) and O(n) and numeric and arbitrary keys, come to think of it.
[18:16:56] <gilberth> You forgot my beloved plists.
[18:17:37] <hayley> Fine, s/alist/plist
[18:18:08] <selwyn> gilberth: thanks very much. but i cannot celebrate before the paper is finished/published
[18:18:11] <selwyn> it would be bad luck
[18:18:57] <gilberth> Well, alists have a different properity too, which hash tables don't. You could just stick another mapping in front without caring for the key being there already. Great for implementing any sort of environment.
[18:19:37] <gilberth> selwyn: Oh, you're right. Don't praise the day before th evening, as we say. Sorry.
[18:19:46] <selwyn> that´s fine lol
[18:19:50] <selwyn> enjoy the champagne
[18:20:29] <gilberth> Well, I may not have any alcohol anymore. :(
[18:20:37] *** Joins: noa (~noa@81.170.98.107)
[18:23:40] * gilberth , meanwhile, tries to evacuate like 200GB via a poor DSL link.
[18:24:23] <selwyn> gilberth does big data
[18:24:26] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 258 seconds)
[18:24:49] <gilberth> Where is a file system, which would let me have a single home directory and would be kinda generational and evacutate data on its own to a machine with larger disks even over the internet?
[18:25:33] <gilberth> Can't we write one in CL?
[18:25:56] <hayley> A cache file system?
[18:26:39] <gilberth> hayley: Kind of. Perhaps with ideas from AFS. See. It was all there already.
[18:27:15] <selwyn> hayley: did you use a java ide when you were hacking minecraft?
[18:27:27] <gilberth> Redundancy and snapshots on top of regular file systems on a bunch of disks, arrays, machines.
[18:27:30] *** Joins: nihaal (~nihaal@106.201.177.18)
[18:27:34] <hayley> selwyn: Does plain Emacs count?
[18:27:48] <selwyn> i suppose
[18:27:55] <selwyn> guess i´ll use that
[18:28:34] <hayley> Since 2017 I wrote all my Java code from Emacs. Got me into trouble once, but if it ain't broke...
[18:28:40] <gilberth> I once had an interview at which the would be empolyee was shocked, that we use Emacs.
[18:29:02] <gilberth> I didn't employ him.
[18:29:58] <hayley> According to https://www.quora.com/profile/Cliff-Click-2 Cliff Click used/uses Emacs for Java.
[18:29:59] -ixelp- Cliff Click - Quora
[18:32:34] <selwyn> i should have guessed that emacs has a gradle-mode
[18:34:34] <hayley> Emacs users: guy that invented C2 (cool) vi users: guy that invented Unix (cringe)
[18:36:46] *** Joins: makomo_ (~makomo@user/makomo)
[18:37:25] <contrapunctus> C2?
[18:38:06] <hayley> The Java HotSpot compiler you probably use.
[18:40:50] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[18:44:58] *** Parts: noa``` (~noa@81.170.98.107) (Leaving)
[18:48:14] *** Joins: pjb (~pjb@user/pjb)
[18:56:04] <selwyn> more material for the vim fan vs emacs enjoyer memes
[18:56:57] <hayley> The Cliff Click giveth, the Cliff Click giveth even more.
[18:57:44] <gilberth> Is Cliff Click your deity?
[19:00:29] <hayley> Hey, I have not sacrificed anyone to Him yet.
[19:01:16] <hayley> Suggestions would be appreciated. I figure it would be a good use of the next person to say something bogus on language implementation.
[19:01:38] <hayley> And unlike any other deity (and Alan Kay) He checks his damn emails.
[19:05:08] *** Quits: noa (~noa@81.170.98.107) (Ping timeout: 268 seconds)
[19:07:32] <hayley> selwyn: do you want to join my cult
[19:09:17] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:17:25] <dave0> nite all
[19:17:58] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:30:25] <selwyn> depends
[19:31:00] <selwyn> as someone pointed out on twitter: imagine joining a cult and then finding out that sex cults exist
[19:36:25] *** Joins: santiagopim (~user@90.166.59.133)
[19:45:07] <ck_> wat
[19:46:43] *** Joins: notzmv (~zmv@user/notzmv)
[19:51:01] <edgar-rft> you didn't know that sex exists? have your parents won you in a lottery or bought you at walmart?
[20:03:11] <lotuseater> i think the important word is "cults"
[20:40:25] *** Joins: shka (~herr@109.231.62.239)
[20:41:56] <selwyn> hayley: what have you two corresponded about
[21:08:47] *** Joins: Catie (~user@c-24-17-253-63.hsd1.wa.comcast.net)
[21:10:26] *** Joins: vats (~vats@103.70.83.249)
[21:17:36] <selwyn> is it bad that discord´s rest api doesn´t use http codes for error responses
[21:18:01] <ck_> sounds on brand
[21:18:14] <selwyn> it is certainly on brand
[21:19:26] <selwyn> so a discord guild is actually a discord server, which is not a real server
[21:20:52] <ck_> what's your interest in post-modern chat solutions
[21:22:18] <selwyn> i want to write a joke discord bot
[21:23:59] <ck_> in dedicated assembler?
[21:36:06] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 258 seconds)
[21:38:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:41:28] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[21:44:46] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:47:12] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[22:05:07] <pjb> selwyn: yes, that's an idea.  The linux kernel contains bpf which is a VM able to execute any code. So you could write it inside the kernel, as a bpf program! 
[22:05:13] <pjb> Nothing more dedicated than that!
[22:05:37] <pjb> Who will write a CL targetting the BPF?
[22:05:59] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:06:11] * selwyn shifts uncomfortably
[22:06:26] <selwyn> perhaps gilberth can do it after he fixes all of tex
[22:12:50] <selwyn> bastard oracle wants me to make an account in order to download the jdk
[22:14:46] <selwyn> do i want an openjdk?
[22:17:17] <Catie> I mean yeah, I'd think so
[22:35:28] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[22:36:14] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:95c2:35af:5386:9a00) (Remote host closed the connection)
[22:36:36] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[22:37:01] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[22:48:22] *** Quits: nihaal (~nihaal@106.201.177.18) (Ping timeout: 268 seconds)
[22:50:16] *** Joins: mariari (~mariari@user/mariari)
[22:50:16] *** Joins: nihaal (~nihaal@106.201.177.18)
[22:59:19] *** Quits: nihaal (~nihaal@106.201.177.18) (Quit: nihaal)
[23:07:50] *** Quits: OlCe (~user@amontpellier-658-1-232-244.w109-210.abo.wanadoo.fr) (Remote host closed the connection)
[23:34:37] *** Joins: vats (~vats@103.70.83.249)
[23:53:34] <selwyn> abcl is quite fun to use
[23:56:13] <selwyn> the least verbose java i´ve ever written
[23:56:34] <Catie> Low bar
[23:57:12] <lotuseater> selwyn: great to hear that :)
