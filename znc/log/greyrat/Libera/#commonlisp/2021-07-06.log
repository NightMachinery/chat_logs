[00:00:04] *** Joins: amb007 (~a_bakic@30.145.204.77.rev.sfr.net)
[00:05:12] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:07:38] *** Quits: amb007 (~a_bakic@30.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:08:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:19:40] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:28:32] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:28:50] *** Joins: amb007 (~a_bakic@30.145.204.77.rev.sfr.net)
[00:35:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:35:23] *** Quits: amb007 (~a_bakic@30.145.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:36:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:53:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[00:57:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:00:27] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:03:35] *** Joins: dsk (~dsk@user/dsk)
[01:12:07] *** Joins: learning-cl (~learning-@2a00:23c8:5a01:7101:2439:333e:d38d:a3b1)
[01:16:56] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[01:17:18] *** Quits: learning-cl (~learning-@2a00:23c8:5a01:7101:2439:333e:d38d:a3b1) (Quit: Client closed)
[01:21:00] *** Joins: didi (~user@user/didi)
[01:21:35] <didi> Has anyone tried connecting to a remote swank over wireguard?
[01:23:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:25:44] *** Quits: didi (~user@user/didi) (Remote host closed the connection)
[01:29:31] *** Joins: selwyn (~selwyn@user/selwyn)
[01:29:49] *** Joins: didi (~user@user/didi)
[01:41:33] *** Quits: casual_friday_ (~casual_fr@216.71.110.168) (Ping timeout: 268 seconds)
[01:41:51] *** Joins: casual_friday (~casual_fr@216.71.110.168)
[01:53:20] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:57:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:04:01] *** Quits: pve (~pve@87-93-200-214.bb.dnainternet.fi) (Quit: leaving)
[02:17:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:19:27] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:20:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:37:09] *** Quits: varjagg (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:42:25] *** Joins: gioyik_ (~gioyik@gateway/tor-sasl/gioyik)
[02:42:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[02:45:01] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 272 seconds)
[02:47:07] *** Quits: frgo (~frgo@p200300deef27d700e01d1212a3eec27e.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:47:36] *** Joins: frgo (~frgo@p200300deef27d7001c9101156ac708c5.dip0.t-ipconnect.de)
[02:50:25] *** Joins: akoana (~ah@user/akoana)
[02:53:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:55:50] *** Quits: attila_lendvai (~alendvai@217.65.126.101) (Ping timeout: 252 seconds)
[02:57:54] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[03:13:54] *** Joins: bldr (~bull@185.117.72.168)
[03:21:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:26:54] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[03:27:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:31:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 246 seconds)
[03:34:50] *** Joins: cjb (~cjb@user/cjb)
[03:54:10] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 240 seconds)
[04:00:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:03:42] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:03:44] *** Joins: srhm (~ascii@user/srhm)
[04:17:46] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:25:16] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[04:27:41] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (Excess Flood)
[04:27:50] *** Joins: jcowan (sid325434@id-325434.charlton.irccloud.com)
[04:31:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[04:46:53] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[04:49:11] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:01:47] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 252 seconds)
[05:06:11] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 252 seconds)
[05:51:09] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[05:51:11] *** Joins: cammie (~cammie@pa49-180-26-29.pa.nsw.optusnet.com.au)
[05:52:39] *** Quits: gioyik_ (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 244 seconds)
[05:53:29] *** Joins: gioyik_ (~gioyik@gateway/tor-sasl/gioyik)
[06:00:27] *** Quits: cammie (~cammie@pa49-180-26-29.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[06:00:49] *** Parts: akoana (~ah@user/akoana) (Leaving)
[06:31:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:38:21] *** Joins: prxq_ (~quassel@x4db641f3.dyn.telefonica.de)
[06:42:30] *** Quits: prxq (~quassel@dynamic-077-012-055-154.77.12.pool.telefonica.de) (Ping timeout: 265 seconds)
[07:00:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[07:01:06] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:02:31] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[07:19:41] *** gioyik_ is now known as gioyik
[07:22:16] *** Joins: Devon7 (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[07:29:49] *** Devon7 is now known as Devon
[07:33:21] <beach> Good morning everyone!
[07:37:26] <Josh_2> Good mornin'
[07:38:11] <Devon> Good evening
[07:38:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[07:45:47] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[07:45:55] *** Joins: Josh_2 (~user@143.244.54.141)
[07:45:56] *** Quits: Josh_2 (~user@143.244.54.141) (Remote host closed the connection)
[07:47:53] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[08:09:11] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:18:41] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 252 seconds)
[08:32:27] *** Quits: srhm (~ascii@user/srhm) (Remote host closed the connection)
[08:53:01] *** Joins: karlosz (~karlosz@router.cloyne.org)
[08:58:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:15:34] *** Quits: etiago- (~etiago@2001:8b0:a633:44b1::cafe:babe) (Quit: ZNC 1.8.2 - https://znc.in)
[09:15:50] *** Joins: etiago (~etiago@user/etiago)
[09:27:36] *** Joins: dsk (~dsk@user/dsk)
[09:28:09] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[09:30:35] *** Joins: shka (~herr@109.231.62.239)
[09:46:51] *** Joins: pjb (~pjb@user/pjb)
[09:48:31] <^[> didi: No reason it shouldn't work, as far as I can tell.
[10:15:27] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[10:33:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:37:17] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:37:33] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:45:51] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:48:58] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[10:49:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:50:14] *** Joins: amb007 (~a_bakic@30.145.204.77.rev.sfr.net)
[11:01:08] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:02:00] *** Joins: pve (~pve@87-93-190-71.bb.dnainternet.fi)
[11:04:30] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[11:05:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[11:19:05] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 252 seconds)
[11:24:01] *** Joins: derelict (~derelict@user/derelict)
[11:31:15] *** Joins: bldr (~bull@185.117.72.168)
[11:31:44] *** Quits: amb007 (~a_bakic@30.145.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[11:32:16] *** Joins: amb007 (~a_bakic@250.196.204.77.rev.sfr.net)
[11:39:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[11:39:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[11:43:46] *** Quits: amb007 (~a_bakic@250.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:44:03] *** Joins: amb007 (~a_bakic@250.196.204.77.rev.sfr.net)
[11:44:03] *** Quits: amb007 (~a_bakic@250.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:44:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:52:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[11:52:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[11:54:00] *** Joins: treflip (~user@95.79.32.99)
[12:06:08] *** Joins: makomo (~makomo@user/makomo)
[12:12:58] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 246 seconds)
[12:13:00] <beach> Here is a project for a relative newbie who wants to learn more about Common Lisp:  Create a site that contains definitions of standard Common Lisp macros that are truly portable, i.e. where there is no implementation-specific machinery required, neither for the expander nor in the expansion.
[12:13:32] <beach> I am thinking DEFSETF, PROG1, PROG2, etc.
[12:14:25] <beach> The license should be very general so that these macros can be used in most Common Lisp implementations.
[12:16:32] <beach> The macros should have good comments and good documentation, including documentation strings.
[12:16:53] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:16:55] <beach> And the code should be easy to read.
[12:17:50] <beach> The best way to establish these macros would be to look at the most common free Common Lisp implementations and then choose a general technique accordingly, while taking care not to violate any copyright.
[12:19:50] <beach> There should be a test suite too of course.
[12:24:30] <beach> Not that anybody usually decides to work on any of the things I suggest (other than myself), but I think this is an easy one that could cut the collective maintenance burden of maintainers of Common Lisp implementations.
[12:29:21] <pjb> beach: that's about most of https://gitlab.com/bocl/bocl/-/blob/master/sources/lisp/macros.lisp#L310
[12:29:57] <pjb> beach: that said some important macros have to deal with environments, and cannot be completely independent from the implementation.
[12:30:16] <pjb> Defering to functions with thunks wouldn't be fair.
[12:30:43] <pjb> (and a b c) --> (and* (lambda () a) (lambda () b) (lambda () c)) ; !
[12:31:15] <pjb> but this is what we have to do for portability for defmacro, defun, defvar, etc.
[12:31:49] <beach> Right.  I specifically wanted to distinguish those macros that do not require any particular machinery.
[12:32:09] <pjb> Then they're there. They could be extracted.
[12:32:13] <beach> Maybe there are not enough of them though.
[12:32:20] <pjb> (and some from sicl too).
[12:32:26] <beach> Heh, OK.
[12:32:54] <pjb> I've not implemented the most complex ones yet, (setf, defsetf, typecase, etc).
[12:33:03] <pjb> and none about clos either.
[12:33:22] <beach> There are obviously several implementation of these macros in different Common Lisp implementations, but I wanted a separate repository for them, and documentation and such.
[12:34:20] <beach> And I was thinking that a relative newbie looking for a project could figure out what macros are truly portable, centralize them, write documentation strings and comments, etc.
[12:35:11] *** Joins: silasfox (~sbv@xdsl-78-35-72-41.nc.de)
[12:36:06] <beach> But I realize it is not going to happen, of course.
[12:36:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:44] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[12:38:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:39:47] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:25] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:41:46] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[12:46:48] <splittist> beach: [not volunteering] So essentially nothing from Chapters 1-4 of the Spec; some from Chapter 5 (?); all of Chapter 6; some (?) of Chapter 7; Chapter 8 (defstruct); phoe's done Chapter 9 (conditions); nothing in Chapter 10; some of Chapter 11 (?); the handful of macros in Chapters 12-21; Chapter 22 (reader) is mainly the pretty printer (?); Chapter 23 (reader - with-standard-io-syntax) ; then Chapters 24 and 25 are pretty
[12:46:48] <splittist> system dependent, I would imagine.
[12:47:27] <beach> Looking now...
[12:49:03] <beach> Looks about right.
[12:49:11] <beach> That's already quite a few.
[12:50:16] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 246 seconds)
[12:50:45] <splittist> Are things like SETF expansions treated specially by source tracking?
[12:51:45] <beach> I think in SICL/Cleavir we just use the usual technique for preserving source information in macro expansions.
[12:51:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:52:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[12:52:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:54:26] *** Lord_of_Life_ is now known as Lord_of_Life
[12:55:59] *** Joins: selwyn (~selwyn@user/selwyn)
[13:01:51] *** Joins: attila_lendvai (~alendvai@1F2E5F85.unconfigured.pool.telekom.hu)
[13:02:08] *** prxq_ is now known as prxq
[13:03:13] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 246 seconds)
[13:03:15] <lisp123> Ok to write a few paragraphs within a doc string?
[13:03:38] <lisp123> Or should we keep them short. Issue with comments is that they may not be discoverable outside of the file
[13:05:21] <beach> lisp123: The target audience for the two is not the same.
[13:06:10] <beach> lisp123: The documentation string is meant for clients and are mainly useful on protocol functions and classes.  Comments are meant for the same people who read the code.
[13:06:32] <beach> lisp123: And the problem with documentation strings is that they are largely noise to the person reading the code.
[13:06:39] <lisp123> beach: Ah, so doc strings, I should explain INPUT & OUTPUT and comments I can do whatever is helpful?
[13:07:14] <beach> Input, output, preconditions, side effects, etc.
[13:07:16] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:07:25] <lisp123> thanks, that's a good rule of thumb to follow
[13:07:39] <beach> lisp123: So, ideally the documentation strings should be long-ish, but the problem with that is precisely the noise aspect.
[13:08:18] <lisp123> beach: i know what you mean, for lisp coders, one can read the code and understand exactly what its doing, doc strings are just repeating oneself in another (inexact) form for that purpose
[13:08:20] <beach> So I tend to use (SETF DOCUMENTATION) in a separate file so as to avoid the noise.  But then there is the problem of keeping them synchronized instead.
[13:08:53] <lisp123> oh so that is possible? not a bad idea, to keep it all in a seperate file.
[13:09:09] <lisp123> or at the bottom of the current file
[13:09:30] <beach> Yes, DOCUMENTATION is an "accessor" generic function, so it works with SETF.
[13:09:36] <splittist> Or have tooling to get them out of the way if they offend you.
[13:09:44] <beach> That works too.
[13:09:59] <lisp123> beach: thanks, that's going to be very helpful. Time to seperate out docstrings and only do them for exported functions :)
[13:10:41] <beach> lisp123: I tend to use #.(format nil "...") for documentation strings, so that I can use ~<newline> with the @ modifier, so that subsequent lines can be indented without changing the output of DOCUMENTATION.
[13:12:01] <lisp123> I will do that as well, it will help make it easier to write multi-line doc strings
[13:12:09] <beach> Exactly.
[13:12:29] <lisp123> thanks beach
[13:12:33] <beach> Pleasure.
[13:13:29] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Ping timeout: 252 seconds)
[13:13:54] <beach> splittist: That would be an excellent feature for Second Climacs.
[13:15:33] <beach> I guess one could either hide the documentation string in the definition, or provide a way to access the (separate) place where the documentation string is located, in a separate buffer.
[13:19:34] <splittist> In CLOSOS, will forms only be incarnated in 'files' to e.g. feed to compile-file?
[13:20:39] <splittist> (actually, that question doesn't seem to make sense - why deal with files at all?)
[13:20:40] <beach> The idea is to have source code in the form of strings ("files"), yes.
[13:30:42] <moon-child> why strings?
[13:30:55] <beach> What would you suggest instead?
[13:31:32] <moon-child> ah that's right, I forgot you don't like images
[13:31:45] <moon-child> beach: syntax trees
[13:31:45] <beach> ?
[13:32:32] <beach> Well, we still tend to like to edit code as text.
[13:33:18] <beach> And the incremental reader we designed makes it efficient to do so.
[13:34:27] <moon-child> 'we' are not universally representative, apparently :)
[13:34:34] <moon-child> why do you prefer text?
[13:34:40] <beach> Me and my favorite coauthor, I mean.
[13:35:12] <beach> moon-child: That's just my default choice.  If you can convince me otherwise, I am all ears.
[13:35:44] <jackdaniel> it's simple. you have an ascii table printed on your desk an you edit the file with a hexeditor
[13:35:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:36:20] <moon-child> no convincing needed, was just curious if there was a particular reason
[13:36:58] <beach> None other than that editing source code in the form of text still seems to be the most common way.
[13:37:01] *** Joins: derelict (~derelict@user/derelict)
[13:37:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:40:42] <beach> I did attempt to design a "structure editor" at some point.  The idea was to have a bunch of keystrokes valid in different contexts, so that the editing experience would resemble that of a text editor, but with fewer possibilities of making mistakes.  It turned out to be too complicated though.  Probably because I didn't find the right data structures for it.
[13:40:50] <splittist> The most interesting times in the life of a form is when it is invalid.
[13:40:59] <splittist> s/is/are/
[13:47:34] *** Joins: pjb (~pjb@user/pjb)
[14:01:45] <shka> paredit is a pseudo-structural editing of lisp code in emacs
[14:02:16] <shka> the best part of it is that you can back off to the text editing if need be
[14:02:46] <jackdaniel> and the worst is that it doesn't "get" block comments correctly
[14:06:48] <lisp123> jackdaniel: amen to that, my only issue with paredit
[14:08:39] <shka> jackdaniel: that's why backing off to the text editing is a nice feature to have :D
[14:12:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[14:17:02] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[14:43:23] <pjb> block comments: #| -*- mode:org -*- ** some document  in org mode |#  ;-)
[14:43:49] <pjb> And mumamo mmm or page mode.
[14:46:02] *** Quits: frgo (~frgo@p200300deef27d7001c9101156ac708c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:46:29] *** Joins: frgo (~frgo@p200300deef27d7001c9101156ac708c5.dip0.t-ipconnect.de)
[14:47:31] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[14:47:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:50:50] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:51:13] *** Joins: amb007 (~a_bakic@218.196.204.77.rev.sfr.net)
[14:51:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:56:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[15:03:59] *** Quits: amb007 (~a_bakic@218.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:05:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:06:38] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (Changing host)
[15:06:38] *** Joins: Xach (~xach@user/xach)
[15:06:38] *** ChanServ sets mode: +o Xach
[15:08:03] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:18:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:26:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:27:04] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 246 seconds)
[15:32:40] *** Joins: Seok__ (~Seok@49.2.56.251)
[15:35:57] *** Quits: seok- (~Seok@49.2.56.251) (Ping timeout: 256 seconds)
[15:35:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[15:36:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:36:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:40:49] *** Joins: selwyn (~selwyn@user/selwyn)
[15:59:35] *** Joins: dsk (~dsk@user/dsk)
[16:03:07] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 246 seconds)
[16:03:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:04:38] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:08:27] <splittist> More on macros: https://plaster.tymoon.eu/view/2540/raw?password
[16:10:41] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:11:12] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:13:16] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:14:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:21:00] *** Joins: scymtym (~user@ip-129-70-148-188.WLAN.Dyn.CIT-EC.NET)
[16:24:34] <splittist> (DEFSTRUCT should obviously be in brackets)
[16:25:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:25:07] *** Joins: amb007 (~a_bakic@218.196.204.77.rev.sfr.net)
[16:25:07] *** Quits: amb007 (~a_bakic@218.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:25:29] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:25:31] <beach> Brackets mean "implementation specific"?
[16:26:05] <splittist> beach: I think so - or "implementation support/internals required". As a first approximation.
[16:26:18] <beach> Right.
[16:29:37] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[16:35:10] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[16:50:25] *** Quits: aeth (~aeth@user/aeth) (Read error: Connection reset by peer)
[16:51:08] *** Joins: aeth (~aeth@user/aeth)
[16:56:38] *** Joins: Bike (~Glossina@71.69.170.70)
[16:56:38] *** ChanServ sets mode: +o Bike
[16:59:03] <jcowan> beach: if you are interested in a simple yet capable structure editor, I recommend taking a good look at Medley Interlisp's S-EDIT
[16:59:46] <jcowan> it is thoroughly documented (UI and API) in pp. 247-262 of https://interlisp.org/docs/IRM.pdf, the Interlisp Reference Manual
[17:03:46] <beach> Thanks.
[17:10:32] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[17:11:38] *** Joins: derelict (~derelict@user/derelict)
[17:20:00] *** Joins: IAmRasputin (~ryan.gann@50-207-73-195-static.hfc.comcastbusiness.net)
[17:24:40] *** Quits: scymtym (~user@ip-129-70-148-188.WLAN.Dyn.CIT-EC.NET) (Ping timeout: 246 seconds)
[17:25:22] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[17:26:50] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[17:32:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:34:59] *** Quits: whosit (~username@user/whosit) (Ping timeout: 258 seconds)
[17:38:18] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:41:20] *** Joins: selwyn (~selwyn@user/selwyn)
[17:46:19] <lisp123> My friend of 20 years wanted to learn programming. Naturally I recommend Common Lisp, he's going to use Kotlin instead "lisp doesn't sound practical"
[17:46:22] <lisp123> such is life
[17:48:23] <beach> It is very hard to change people with a closed mindset.  Carol Dweck has done research in the area.
[17:49:39] <splittist> You'll never convince me of that.
[17:49:41] <lisp123> He's new to programming, so i thought it wouldn't be hard
[17:50:12] <beach> splittist: :)
[17:50:31] <lisp123> Not sure how he got his preconception to begin with
[17:50:49] <splittist> to be fair, Kotlin has an object oriented 'Hello world' and co-routines on its homepage. Oh - and a homepage.
[17:51:09] <beach> Then Kotlin has to be a better choice.
[17:51:11] <_death> Naggum said that Common Lisp is the language you graduate into... most people first need to experience the misery of other languages
[17:55:45] <_death> then again, the reasons people want to learn programming nowadays may be more.. varied.. than they used to be
[17:58:56] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[18:04:06] <lisp123> _death: honestly I never felt _too_ bad in other languages. lisp was a natural move for me after getting used to generics & protocols in Swift
[18:04:21] <lisp123> jave is probably the only language I really hated
[18:05:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:07:30] *** Joins: phantomics (~phantomic@71-218-246-207.hlrn.qwest.net)
[18:09:34] <beach> "jave"?
[18:09:55] <beach> [who knows what languages were invented last week]
[18:11:40] <splittist> you missed the whole javb, javc and javd evolution
[18:12:12] <beach> Should I be worried about that?
[18:13:12] <splittist> No - they're sort of the Delta-variants of enterprise software engineering.
[18:13:26] <beach> Whew!
[18:17:58] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:20:29] <IAmRasputin> At least Kotlin is less likely to put him off programming forever than Jav*, imho
[18:21:31] <dim> imagine you're new to programming in 2021, what kind of basic UI would you expect? I think web site or mobile app, I don't think terminal based keyboard driven...
[18:21:50] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[18:22:05] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[18:24:24] <splittist> for the junior splittists, programming (or, at least, the motivating type of programming) is about making game-like things happen on a tablet or phone. (Having said which, as the least junior ages, things happening on PCs with keyboards become interesting, too.)
[18:24:54] *** Quits: silasfox (~sbv@xdsl-78-35-72-41.nc.de) (Ping timeout: 252 seconds)
[18:26:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:29:31] <_death> tic80?
[18:31:04] <splittist> Having started with Scratch, it's now more Construct and Unity. /I/ enjoyed TIC-80 (:
[18:31:53] <_death> I thought Unity at first, but then considered that it may be way too complicated
[18:32:48] <splittist> _death: I'm sure it's insanely complicated, but if one is motivated, and no-one tells you it's complicated...
[18:34:06] <_death> I see ;)
[18:37:37] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[18:38:52] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[18:45:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:45:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:50:25] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[19:13:33] *** Quits: raeda (~raeda@24.18.16.139) (Remote host closed the connection)
[19:13:52] *** Joins: raeda (~raeda@24.18.16.139)
[19:16:41] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[19:27:52] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 246 seconds)
[19:28:19] *** Joins: derelict (~derelict@user/derelict)
[19:33:48] <jcowan> God help me if I have to do professional programming on a mobile device (unless it has a proper keyboard and screen, which to me removes it from the category "mobile device")
[19:37:23] *** Quits: raeda (~raeda@24.18.16.139) (Ping timeout: 252 seconds)
[19:40:26] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[19:48:14] <dim> it's not about using the mobile as a dev environment as much as producing an app that fits the mobile, I suppose
[19:48:43] <dim> though I would like that it would be possible to code an app from the mobile device itself, it would make the mobile device into an actual computer
[19:49:00] <dim> (apparently next iOS/iPadOS versions are going in that direction)
[19:49:25] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[19:50:16] *** Joins: srhm (~ascii@user/srhm)
[19:50:26] <pve> Hi, does anyone know if there exists an extension to ASDF that would let me compile/load all lisp files in a directory in no particular order? Perhaps as a subclass of "asdf:module"..  This is something I might use when doing prototyping or other less serious things (not that anything I do is very serious :)
[19:51:10] <Bike> if you don't specify :serial t or dependencies for a component, asdf will just do some arbitrary order
[19:51:28] <Bike> do you want it to generate a component from a directory for you rather than having to write it out?
[19:51:48] <pve> Bike: I understand, I meant I'm too lazy to go and edit the asd file every time I want to add a file :)
[19:52:16] <pve> obviously for personal stuff only
[19:54:27] <pve> I don't think it would be *too* difficult to write this extension myself though
[19:54:34] <pjb> pve: something like:    :components #.(mapcar (lambda (path) `(:file (pathname-name path))) (directory #P"./*.lisp"))
[19:55:04] <pjb> I wonder if *load-pathname* applies while loading the asd file… (with asdf).
[19:55:52] <pve> pjb: hmm well if that works, then I'm fine with it
[19:56:46] <pve> never occurred to me to do #.( ...  ) in an asd file
[19:57:38] <pjb> you may have to tune the path in DIRECTORY.
[19:58:14] <pve> pjb: thank you, I will experiment.. worst case I make my own subclass of "asdf:module"
[19:58:15] <pjb> check whether *load-pathname* is bound when you do asdf:oos 'asdf:load-op or asdf:compile-op  (or the new API asdf-load).
[19:58:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[19:58:38] <pve> will do
[19:58:58] <pjb> pve: there's also the option of writting a little lisp script to generate a plain asd file.
[19:59:27] <pve> also a good idea
[20:04:59] <dim> I though one of the advantages of ASDF would be to avoid the Makefile/autoconf/automake/... situation ;-)
[20:05:21] <dim> having lisp all the way down including the build system is a very nice property, I believe
[20:06:18] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[20:18:13] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:394a:1349:1bf0:ba2f)
[20:42:26] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 258 seconds)
[20:43:15] *** Joins: amb007 (~a_bakic@250.196.204.77.rev.sfr.net)
[20:43:40] *** Joins: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net)
[20:46:34] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[20:47:24] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[20:47:30] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Client Quit)
[20:47:45] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[20:51:46] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:394a:1349:1bf0:ba2f) (Remote host closed the connection)
[21:02:52] *** Joins: notzmv (~zmv@user/notzmv)
[21:05:22] *** Quits: amb007 (~a_bakic@250.196.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[21:05:50] *** Joins: amb007 (~a_bakic@172.196.204.77.rev.sfr.net)
[21:10:26] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 252 seconds)
[21:30:10] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[21:31:08] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[21:41:25] *** Quits: amb007 (~a_bakic@172.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:41:27] *** Joins: cuz (~user@38.140.58.234)
[21:42:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:57:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[21:57:58] *** Joins: raeda (~raeda@24.18.16.139)
[21:58:40] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:59:30] <lisp123> #lisp seems dead
[21:59:35] <lisp123> can we take it over again?
[21:59:56] <Lycurgus> #lisp is ##lisp from freenode
[22:00:10] <Lycurgus> and it's more lively here than it was there
[22:00:24] <lisp123> Lycurgus: Ah cool, thats good
[22:00:45] *** Joins: notzmv (~zmv@user/notzmv)
[22:03:12] <pjb> we're home here!
[22:03:53] <lisp123> Indeed :)
[22:04:30] <Lycurgus> yeah no telling people all the time this is about cl
[22:07:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:08:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[22:11:46] *** Joins: derelict (~derelict@user/derelict)
[22:12:20] <pve> pjb: the #. trick you suggested (in the asd file) works
[22:12:43] *** Joins: tyson2 (~user@70.54.112.49)
[22:14:00] <pve> one minor issue is that it wont detect newly added files in the directory when I reload the system, because it doesn't think that the system has changed
[22:33:29] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:34:08] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[22:34:39] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:38:41] *** Joins: srhm (~ascii@user/srhm)
[22:40:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:43:09] *** Joins: selwyn (~selwyn@user/selwyn)
[22:50:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:54:43] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:58:40] *** jackdaniel is now known as polygon-op
[23:05:17] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[23:12:43] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[23:16:18] *** Joins: cuz (~user@38.140.58.234)
[23:20:07] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:24:48] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[23:25:38] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[23:41:56] *** Joins: terrorjack4 (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[23:43:16] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[23:43:30] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[23:43:30] *** terrorjack4 is now known as terrorjack
[23:43:32] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[23:47:28] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[23:49:40] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[23:53:52] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[23:55:27] *** Joins: notzmv (~zmv@user/notzmv)
[23:58:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
