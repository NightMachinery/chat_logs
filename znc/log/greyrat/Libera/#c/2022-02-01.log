[00:00:01] *** Joins: Akiva (~Akiva@user/Akiva)
[00:00:36] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b)
[00:02:38] <sham1> Well the pointer probably won't change
[00:02:41] <sham1> So the latter
[00:02:54] *** Joins: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com)
[00:02:59] <sham1> Although trying to map hardware things into structs is not a good time
[00:03:21] <orc> ghenry: get involved with projects you find intersting
[00:03:30] <orc> or work on projects and ask others for help
[00:03:35] <orc> that's the best way to learn
[00:04:22] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:07:04] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:07:30] <ghenry> Thanks orc
[00:07:33] <ghenry> doing the later
[00:07:36] <ghenry> latter
[00:07:45] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[00:07:55] <ghenry> Just someone to ask a few design questions, look over things, maybe some basic things that sonarcloud/codacy/static/dynamic analysers don't do so I can learn and grow around the SentryPeer project. Nothing demanding at all. I'm doing a done of self study and I read a lot of code.
[00:07:59] <ghenry> I'll ask in here :-)
[00:09:07] <ghenry> This is my project I'm working on https://github.com/SentryPeer/SentryPeer
[00:09:08] <candide> Title of ghenry's link: GitHub - SentryPeer/SentryPeer: A distributed peer to peer list of bad actor IP addresses and phone numbers collected via a SIP Honeypot.
[00:09:24] <ghenry> I'm trying to debug something and could use some fresh eyes
[00:09:35] <ghenry> Uninitialised value was created by a stack allocation
[00:09:48] <ghenry> I'll nopaste
[00:10:19] <nightstrike> sham1: it's all I know how to do :)  Usually with bitfields, too
[00:10:56] <ghenry> https://bpa.st/JF6Q
[00:11:39] <ghenry> I've rebuilt with -g3 and -O0 and valgrind isn't helping me.
[00:12:12] <ghenry> If I remove this fprintf, no warnings https://github.com/SentryPeer/SentryPeer/blob/main/src/sip_parser.c#L94
[00:12:43] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:13:02] <ghenry> before this "if", I've even put in a breakpoint, checked all variables. I've put in asserts on all the "bad_actor_event->" strings before line 94
[00:13:05] <ghenry> nothing fails
[00:13:17] <ghenry> it's annoying me :-)
[00:13:27] <ghenry> I'll come back to it. Taking a break.
[00:17:14] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[00:17:33] *** Joins: meator (~meator@user/meator)
[00:17:34] *** Joins: inlight (~thomas@user/inlight)
[00:18:37] *** Joins: crankslider (~slidercra@user/slidercrank)
[00:24:56] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 250 seconds)
[00:25:46] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: Ping timeout (120 seconds))
[00:25:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:25:54] *** Joins: joev1 (~joev@user/joev)
[00:26:05] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[00:26:07] *** Joins: jkotra (~jkotra@223.230.91.108)
[00:26:37] *** Joins: Byzantine (~Byzantine@2a02:1388:95:5547:ec01:f46:b8f3:d495)
[00:26:37] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[00:27:13] *** Quits: Byzantine_ (~Byzantine@2a02:1388:95:5547:4469:8e61:2176:7eae) (Ping timeout: 256 seconds)
[00:27:36] *** Joins: Betal (~Betal@user/betal)
[00:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:31:10] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[00:32:54] *** Joins: bixo (~bixo@190.200.253.127)
[00:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:54] *** Joins: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b)
[00:35:47] <pflanze> Neui[m], ah, cool, thanks for that info (_Pragma)!
[00:36:09] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:7dac:e485:8fe6:c0ae)
[00:36:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[00:36:51] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:37:59] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[00:38:13] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[00:38:33] *** Quits: MrC (Ben@mrbenc.net) (Ping timeout: 250 seconds)
[00:39:41] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:ec01:f46:b8f3:d495) (Ping timeout: 256 seconds)
[00:41:47] <pflanze> tk, yes, further down the wall I mention that moving to just selecting function pointers is how it has to be done; in fact, if it's not a pointer type that mismatches (as in your example when doing the calling in-line) it will not just warn but plainly refuse to compile.
[00:45:42] *** Quits: magla (~gelignite@55d4be51.access.ecotel.net) (Quit: Stay safe!)
[00:46:01] *** Parts: bixo (~bixo@190.200.253.127) (Leaving)
[00:47:19] <pflanze> (That was meant to say "not a pointer type, but non-pointer type mismatch".)
[00:47:45] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-5005-59d0-5f83-b080.fixed6.kpn.net)
[00:48:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:48:31] *** Joins: X-Scale` (~ARM@46.50.6.87)
[00:51:01] *** Quits: X-Scale (~ARM@83.223.248.131) (Ping timeout: 256 seconds)
[00:51:02] *** X-Scale` is now known as X-Scale
[00:52:52] *** Quits: ekathva (~ekathva@2001:999:51:be01:2799:25be:c992:870) (Remote host closed the connection)
[00:53:12] *** Quits: mahmutov_ (~mahmutov@37.155.94.193) (Ping timeout: 268 seconds)
[00:54:14] *** Joins: ekathva (~ekathva@2001:999:51:be01:4809:6feb:a1f2:4aa3)
[00:58:57] *** Quits: Byzantine__ (~Byzantine@2a02:1388:95:5547:7dac:e485:8fe6:c0ae) (Ping timeout: 256 seconds)
[00:59:31] *** Quits: ominionx (~ominionx@172.58.136.5) (Ping timeout: 256 seconds)
[01:01:49] *** Quits: ekathva (~ekathva@2001:999:51:be01:4809:6feb:a1f2:4aa3) (Remote host closed the connection)
[01:02:05] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87)
[01:02:05] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87) (Changing host)
[01:02:05] *** Joins: skapata (~Skapata@user/skapata)
[01:03:00] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:b13c:177e:3bb:51d1)
[01:04:50] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:06:09] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-5005-59d0-5f83-b080.fixed6.kpn.net) (Ping timeout: 268 seconds)
[01:06:14] *** Joins: ominionx (~ominionx@172.58.136.5)
[01:06:19] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:09:00] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:b9c5:6e52:e6cb:d4cf) (Quit: This computer has gone to sleep)
[01:09:04] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:12:41] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[01:14:35] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Quit: バイバイ)
[01:16:15] *** Quits: Byzantine__ (~Byzantine@2a02:1388:95:5547:b13c:177e:3bb:51d1) (Remote host closed the connection)
[01:16:32] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:b13c:177e:3bb:51d1)
[01:16:35] *** Joins: inlight__ (~thomas@157.35.46.189)
[01:16:53] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[01:17:11] *** Quits: inlight__ (~thomas@157.35.46.189) (Client Quit)
[01:18:19] *** Joins: MrC (~Ben@mrbenc.net)
[01:19:53] *** Joins: inlight__ (~thomas@157.35.46.189)
[01:20:08] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[01:20:38] *** Quits: inlight__ (~thomas@157.35.46.189) (Client Quit)
[01:21:12] *** Quits: alch (~alch@151.82.211.158) (Read error: Connection reset by peer)
[01:22:14] *** Quits: byte4byte (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[01:22:14] *** Quits: Jong (~Jong@2620:10d:c090:400::5:97ac) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:22:53] *** Quits: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b) (Remote host closed the connection)
[01:23:12] *** Joins: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b)
[01:24:29] *** Joins: inlight (~thomas@user/inlight)
[01:25:40] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[01:25:46] *** Joins: alch (~alch@151.82.25.253)
[01:25:49] *** Joins: ctk (~calimero@ctkarch.org)
[01:25:58] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Read error: Connection reset by peer)
[01:26:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[01:28:32] *** Quits: ctk (~calimero@ctkarch.org) (Changing host)
[01:28:32] *** Joins: ctk (~calimero@user/calimeroteknik)
[01:28:39] *** ctk is now known as CalimeroTeknik
[01:32:23] *** Quits: ominionx (~ominionx@172.58.136.5) (Ping timeout: 256 seconds)
[01:34:42] *** Quits: HisShadow_ (~HisShadow@user/hisshadow) (Ping timeout: 250 seconds)
[01:35:25] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:35:27] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[01:36:55] *** Quits: jkotra (~jkotra@223.230.91.108) (Ping timeout: 256 seconds)
[01:37:07] *** Joins: jkotra (~jkotra@223.230.91.108)
[01:41:42] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:42:48] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:43:24] *** Joins: kilobyte2 (~kbch@213.55.224.216)
[01:43:40] *** Quits: dansan (~daniel@75.81.148.51) (Remote host closed the connection)
[01:44:51] *** Quits: kilobyte_ch (~kbch@77.109.171.167) (Ping timeout: 250 seconds)
[01:45:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:46:15] *** Joins: ominionx (~ominionx@172.58.136.5)
[01:46:31] *** Joins: dansan (~daniel@75.81.148.51)
[01:48:36] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:19] *** Quits: kilobyte2 (~kbch@213.55.224.216) (Ping timeout: 268 seconds)
[01:49:36] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[01:49:50] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:51:21] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[01:53:14] <ghenry> found it. All good :-)
[01:57:53] *** Quits: MatthiasG2 (~matthias@i6DFA01BB.versanet.de) (Ping timeout: 256 seconds)
[02:00:08] *** Joins: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41)
[02:00:23] *** Joins: crashrep (~crashrep@user/crashrep)
[02:01:45] *** Joins: kilobyte2 (~kbch@77.109.171.85)
[02:02:48] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:04:47] *** Quits: Akuli (~Akuli@82-203-163-15.bb.dnainternet.fi) (Quit: Akuli)
[02:05:21] *** Quits: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41) (Ping timeout: 268 seconds)
[02:07:35] <kurahaupo> sham1: Of course there's a need to distinguish type names and object names during syntactic analysis; without it the compiler couldn't tell whether “a*b” is multiplication or declaring a pointer. The point is that it's not necessary to distinguish them during lexical analysis, by adding contextual tests that along the lines of “if (is_type(identifier)) parse_decl(); else parse_expr();”
[02:07:54] <orc> ghenry: nice. what was the solution
[02:07:56] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[02:10:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:13:22] *** Quits: cherrry9 (~jan@agkq88.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[02:15:55] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:21:23] *** Quits: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b) (Ping timeout: 268 seconds)
[02:21:57] *** Joins: fwg (~fwg@user/fwg)
[02:22:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:26:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:27:34] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[02:27:59] *** Joins: joomla5_ (uid527699@id-527699.uxbridge.irccloud.com)
[02:28:13] *** Joins: joev1 (~joev@user/joev)
[02:28:41] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:29:02] *** Joins: nicode (~nic@45.72.195.35)
[02:29:51] <joomla5_> ```int call(int i){return i;} int a = call(a);``` This is undefined behaviour right? it's the same doing `int i = i`.
[02:30:13] <joomla5_> same as *
[02:30:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[02:33:39] *** Joins: masterbuilder (~user@user/masterbuilder)
[02:34:00] *** Joins: pizdets_ (~pizdets@183.182.111.155)
[02:34:13] *** Joins: crashrep (~crashrep@user/crashrep)
[02:34:32] *** Quits: pizdets (~pizdets@183.182.111.130) (Ping timeout: 250 seconds)
[02:38:32] *** Joins: ferdna (~ferdna@user/ferdna)
[02:39:21] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[02:40:30] <uskerine> I never understood if I shall do:       struct myrecord* p         or   struct myrecord *p
[02:40:49] <nightstrike> I put a space on both sides of the *
[02:40:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[02:40:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[02:41:07] <fizzie> Just to annoy everyone, go with `struct myrecord*p` instead.
[02:41:09] <uskerine> Never saw that one
[02:41:25] <uskerine> I am not very consistent with this so I annoy myself all time
[02:41:28] <nightstrike> I think people usually do *p because of how multiple things on one line work...   T *a, *b, *c;
[02:41:44] *** Joins: Oddity (~Oddity@user/oddity)
[02:42:22] <nightstrike> but I never do multiple things on one line.  I also annoy people with T const instead of const T to avoid ambiguity with T const * const vs const T const *
[02:42:28] <neshpion> i do T* a; because i think of the pointer as being part of the variable's type. is it?
[02:42:38] <fizzie> Syntactically, it's not.
[02:42:43] <neshpion> :O
[02:42:48] <fizzie> The `*` is part of the declarator, not the type specifier.
[02:43:18] <fizzie> Which becomes pretty unavoidable when it's something more complicated, like `T *(*a)[10];` or something.
[02:43:34] *** Lord_of_Life_ is now known as Lord_of_Life
[02:44:05] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[02:44:47] *** Joins: kuber (~kuber@75-172-24-205.tukw.qwest.net)
[02:45:26] *** Joins: System_Error (~SystemErr@user/systemerror)
[02:45:55] <pragma-> ,declareuse
[02:45:55] <candide> In C, declaration follows use. That means you do not write `char* p` but instead `char *p` because it doesn't mean `p is a pointer to char` but rather `*p is a char`. https://www.quora.com/Why-doesnt-C-use-better-notation-for-pointers/answer/Brian-Bi and https://old.reddit.com/r/c_language/comments/i6iqp4/returning_function_pointer_with_and_without/
[02:46:58] <fizzie> I used to think the only pointer-to-pointer declarations in actual use would be `int **p`, `int** p` and `int ** p` (possibly in descending order of popularity), until I saw one on this channel written as `int* *p` instead. Was just... boggling.
[02:47:11] *** Quits: Byzantine__ (~Byzantine@2a02:1388:95:5547:b13c:177e:3bb:51d1) (Ping timeout: 256 seconds)
[02:47:28] <pragma-> I've seen a lot of publications refer to declaration-follows-use as a mistake. C++ abandons it.
[02:47:36] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:50:08] *** Joins: crashrep (~crashrep@user/crashrep)
[02:52:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[02:52:46] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[02:52:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:53:14] *** Quits: Fairy (~Fairy@2a02:2121:620:c8cb:bdca:3834:e3a2:8cd8) (Ping timeout: 260 seconds)
[02:54:46] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[02:55:51] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:56:36] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[02:57:40] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[02:57:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:58:31] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:58:34] <SamuelMarks> hi
[02:58:43] <Inline>  because it doesn't mean `p is a pointer to char` but rather `*p is a char` s/but rather `dereferencing p will give you a char`/
[02:58:54] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[02:59:13] <Inline> https://news.ycombinator.com/item?id=13439094
[02:59:14] <candide> Title of Inline's link: No, the trick is to remember that *declaration follows use*. Declare a symbol us... | Hacker News
[03:00:13] <Inline> and dereferencing p IS *p
[03:00:20] *** Quits: teddykr (~teddy@136.34.164.122) (Quit: Konversation terminated!)
[03:01:28] *** Quits: joomla5_ (uid527699@id-527699.uxbridge.irccloud.com) ()
[03:01:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:03:13] <SamuelMarks> How do I check if `#include <bsd/string.h>` will work? - Or do I do an `#ifdef LIBBSD_H` and hope they already attempted to include earlier?
[03:03:35] <Inline> so char *p, p is a pointer to char, or dereferencing p (i.e. *p) will give you a char, char *p is a declaration, the use is later on either as p or *p, in context either as an address or as the value stored in that address
[03:05:18] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:850f:38e8:96a:f5aa)
[03:05:30] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[03:07:22] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b)
[03:07:46] *** Joins: joomla5_ (uid527699@id-527699.uxbridge.irccloud.com)
[03:08:07] *** Quits: joomla5_ (uid527699@id-527699.uxbridge.irccloud.com) (Client Quit)
[03:08:27] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[03:13:54] *** Quits: kuber (~kuber@75-172-24-205.tukw.qwest.net) (Quit: leaving)
[03:14:23] *** Quits: Byzantine__ (~Byzantine@2a02:1388:95:5547:850f:38e8:96a:f5aa) (Ping timeout: 256 seconds)
[03:19:00] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:19:39] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[03:20:06] *** Joins: zekralyx (~zekralyx@191.113.188.207)
[03:20:32] <nightstrike> SamuelMarks: define "will work"
[03:20:53] <nightstrike> if you just want to know if it's includable, I usually use autoconf for tht
[03:20:55] <neshpion> aren't include guards supposed to be in the header?
[03:20:55] <nightstrike> that*
[03:21:50] <Inline> no
[03:22:03] <Inline> there's the header which defines stuff
[03:22:20] *** Joins: X-Scale` (~ARM@31.22.166.79)
[03:22:34] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:22:59] <neshpion> i mean i always see headers where the first line is #ifndef HEADER_NAME and the last line is #endif
[03:23:03] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[03:23:06] <Inline> and there's the user which includes stuff via a guard i.e. ifdef blah include blah endif etc.. which can be used to either check that something does not get included more than once or for conditional including
[03:23:43] <nightstrike> inline, you're being pedantic :P   you know what he's asking... include guards go in the header, yes
[03:23:43] <Inline> ifdef platform include <platform.h> etc
[03:23:45] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[03:24:48] *** Quits: X-Scale (~ARM@46.50.6.87) (Ping timeout: 256 seconds)
[03:24:54] <Inline> ah yes sorry
[03:25:03] <nightstrike> an "include guard" is almost universally understood to be referring to the thing you stick in headers to prevent multiple inclusion, instead of #pragma once
[03:25:09] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:25:30] *** Joins: X-Scale (~ARM@83.223.224.94)
[03:25:45] <SamuelMarks> yeah
[03:26:02] <SamuelMarks> But I don't know if they have this header available, and I can't run autoconf or cmake because this is header only
[03:26:18] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:26:30] <nightstrike> SamuelMarks: to your question, without knowing anything about your specific case, my default would be to add an AC_CHECK_HEADER to configure.ac, which defines HAVE_BSD_STRING_H in config.h tha t you can test against
[03:27:31] <nightstrike> you're making a header that depends on a bsd file and giving it to someone else?
[03:27:51] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:46] *** Quits: X-Scale` (~ARM@31.22.166.79) (Ping timeout: 256 seconds)
[03:30:10] *** Quits: neunon (~neunon@user/neunon) (Quit: ZNC 1.8.2 - https://znc.in)
[03:30:42] *** Joins: neunon (~neunon@user/neunon)
[03:36:06] *** Joins: Jong (~Jong@163.114.132.5)
[03:36:56] <SamuelMarks> nightstrike - Yeah https://github.com/offscale/c89stringutils - still a WiP but it's starting to take shape. It was part of a different library I was working on then I decided to extract it into its own thing
[03:36:58] <candide> Title of SamuelMarks's link: GitHub - offscale/c89stringutils: string functions from newer standards / common non-standards for C89
[03:37:50] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[03:37:55] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[03:39:23] *** Parts: zekralyx (~zekralyx@191.113.188.207) (Leaving)
[03:39:52] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:40:30] *** Joins: pert (~pert@fsf/member/pert)
[03:44:25] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[03:44:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:44:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:44:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:46:01] *** Joins: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de)
[03:48:18] *** Quits: inlight (~thomas@user/inlight) (Quit: leaving)
[03:48:39] *** Quits: manjaroi3 (~manjaro-i@218.233.99.3) (Remote host closed the connection)
[03:53:19] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:54:04] <pflanze> There's no way to have an expression that defines its own local variables, right?
[03:54:37] <pragma-> you could introduce a block with braces
[03:54:40] <SamuelMarks> pflanze braces
[03:54:56] <pflanze> Expression as in returning a value
[03:55:15] <SamuelMarks> macro
[03:55:18] <SamuelMarks> comma expressions
[03:55:21] <SamuelMarks> bunch of ways
[03:55:43] <pflanze> I'm asking in the context of defining a macro, yes.
[03:55:56] <pflanze> int x = FOO(bar);
[03:56:13] <SamuelMarks> What is the full macro?
[03:56:15] <pflanze> now FOO needs to have a local variable to calculate its result.
[03:57:07] <SamuelMarks> `#define FOO foo \n int foo(int j) { int i = j +1; return i/2; }` :P
[03:57:51] <pflanze> Sure, but the point is to avoid the need to pre-define such a function.
[03:58:10] <SamuelMarks> Or even `#define FOO(a) ({ int j; j=a; j--; return j+5; })` I think
[03:58:49] <pflanze> It would be lovely if this worked, but I don't think it does, does it?
[03:59:18] <pflanze> I mean I think it would wreck lots of C syntax?
[03:59:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[03:59:29] <SamuelMarks> Let me run it and see
[04:00:40] <pflanze> (In C++ you could do `#define FOO(a) ([&]() { ... return ..; })()`, but that's out of scope.)
[04:01:12] <SamuelMarks> `int main() {FOO(5);}` works
[04:01:30] <SamuelMarks> pflanze - and gcc [and clang I think] have their own syntax for defining lambdas
[04:02:06] <SamuelMarks> https://en.wikipedia.org/wiki/Anonymous_function#C_(non-standard_extension)
[04:02:12] <pert> howdy. gcc and some other compilers support VLAs in structures as an extension, but offsetof() and sizeof() give some unexpected results. this demonstration program (https://paste.debian.net/1229129/) prints "1, 1" with gcc, so although changes to the size of the VLA don't appear to affect sizeof() on the structure I can at least understand where the one comes from. with tcc and chibicc however it gives "8 8". does anyone know, perhaps from th
[04:02:14] <pert> e perspective of a compiler implementation, why this might be?
[04:02:19] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-5005-59d0-5f83-b080.fixed6.kpn.net)
[04:02:26] <pragma-> if you don't mind using gnu-c https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html
[04:03:50] *** Joins: nuxil (~nuxil@141.195.51.213)
[04:06:06] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:07:17] <pflanze> I wasn't aware of that GCC extension, intersting; so SamuelMarks' code actually almost was correct code with that extension.
[04:07:27] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-5005-59d0-5f83-b080.fixed6.kpn.net) (Ping timeout: 268 seconds)
[04:07:43] <SamuelMarks> pert - What does __alignof__ say?
[04:08:00] <pflanze> It's funny how C decides to be so closed down, and then the compiler implementors open it all up anyway.
[04:08:35] <neshpion> what
[04:08:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:08:59] <SamuelMarks> pert - Also you might want to see https://stackoverflow.com/a/21182688 - pretty concise
[04:09:12] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[04:09:17] <SamuelMarks> pflanze - Pfft, come join me on C89
[04:10:00] <nightstrike> pflanze: statement expressions do what you want
[04:10:09] <pflanze> Hmm? You're the one who suggested straying away from C89 as far as gcc?
[04:10:14] *** Joins: bebyx (~Thunderbi@user/bebyx)
[04:10:17] <pflanze> ^ SamuelMarks
[04:10:25] *** Joins: Wulf (~Wulf@user/wulf)
[04:10:38] <pflanze> nightstrike, yes, as mentioned
[04:10:48] <nightstrike> yeah, I didn't read that far yet :)
[04:10:56] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:11:06] <pflanze> nightstrike, but, what about portability? How far does that go?
[04:11:30] <pert> SamuelMarks: good thinking. gcc aligns the struct at one-byte boundaries always, but tcc and chibicc seem to do eight byte boundaries. in other words, sizeof(struct s) == alignof(struct s) invariably with respect to k in all compilers
[04:12:09] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:12:13] <nightstrike> pflanze: every compiler that matters copied gcc's design
[04:12:37] <pflanze> How long back? I never heard of them.
[04:13:04] <twkm> blah.
[04:13:20] <nightstrike> they go back in gcc a long time..  intel, probably 11. clang, since always.  msvc, since never.
[04:14:04] <nightstrike> anyway, if you don't want those, you can make an inline function and hope the optimizer handles it
[04:14:36] <pflanze> I'd have to generate those automatically in advance, which I can, was just hoping to avoid it.
[04:14:39] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl - moving to 'caveman' nick.)
[04:15:00] <nightstrike> how's that different than an expression?
[04:15:28] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 268 seconds)
[04:15:31] <pflanze> I mean, with inline function you mean a separate top-level function defined outside the macro, declared "inline"?
[04:15:46] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[04:16:01] <pflanze> (As opposed to say a lambda.)
[04:16:13] <nightstrike> pert: you're talking about https://en.wikipedia.org/wiki/Flexible_array_member
[04:16:32] <nightstrike> that isn't the same as a VLA in a struct, which implies something different
[04:16:50] <pert> nightstrike: I'm familiar with FAMs, but look at the example code, I really do mean VLA in a struct :)
[04:16:57] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[04:17:15] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[04:17:58] <nightstrike> pflanze: your requirement was "an expression with local variables"... to me, that's just a function, isn't it?  maybe give an example?
[04:18:11] <nightstrike> pert: pretty sure "VLA in a struct" isn't a thing
[04:18:17] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[04:18:30] <pert> nightstrike: it's a GCC extension and tcc and chibicc support it as well, just try it
[04:18:30] <pflanze> nightstrike, ... that is also an expression (returning a value) to the surrounding context of the macro
[04:18:46] <pflanze> int x = FOO(bar);
[04:18:56] <pflanze> My example is this:
[04:19:00] <nightstrike> pert: https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html  << which one of those is it?
[04:19:33] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[04:19:46] <pflanze> #define equal_consuming(a, b) ({ __typeof__(a) va = (a); ___typeof__(b) vb = (b); equal(&a, &b) })
[04:20:06] <pert> nightstrike: in the section on VLAs at https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html "As an extension, GCC accepts variable-length arrays as a member of a structure or a union."
[04:20:57] <pflanze> I.e. I have a generic `equal` that takes values by pointer, now I want a generic `equal_consuming` that becomes owner of the values instead.
[04:21:40] <pflanze> The statement expression above (not tested yet) should solve it, as I now know.
[04:21:50] <pflanze> Except possibly for portability.
[04:22:06] <nightstrike> pert: interesting........   I wonder how it works under the hood.  The docs don't explain well enough.
[04:22:19] <pflanze> Now yes, I could define equal_consuming as a separate _Generic, but that would mean generating more code.
[04:22:42] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:22:59] <nightstrike> pert: You're basically changing k and expecting the struct to change, but sizeof says it didn't, so.......   I dunno.  seems sketchy.  What does -fsanitize=undefined say?
[04:23:40] <nightstrike> pflanze: use c++ templates :P
[04:23:48] <pert> nightstrike: I don't have a link to the video handy and I haven't seen it, but there was a whole Linux Plumbers talk on VLAs in structures
[04:23:51] <pflanze> Nah :)
[04:24:04] <nightstrike> do you care about msvc?
[04:24:14] <pflanze> I don't think so.
[04:24:49] <pflanze> I guess I'll go with the statement expressions and fall back to code gen if needed.
[04:25:08] <pflanze> s/if/when/
[04:25:21] <nightstrike> or tell msvc people to use mingw-w64.sf.net :)
[04:25:28] <nightstrike> I might be biased in that suggestion........
[04:25:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[04:25:59] <pert> nightstrike: UBSan doesn't complain, but -Wpedantic does
[04:26:33] <nightstrike> pert: Perhaps try asking in #gcc or emailing gcc-help?  It seems like a shadowy corner of an extension that was forgotten
[04:26:49] <pflanze> OH: I want the code to be compilable as C++, too. Might be an issue, going to test.
[04:26:56] <nightstrike> so my guess is that it works for the most basic case as the example, but redefining k doesn't work right
[04:27:13] <nightstrike> not that "right" is defined
[04:27:54] <pert> nightstrike: perhaps you've got to the root of the problem: I'm changing k and expecting variables with the type of the structure to change, but perhaps (like when a VLA is normally declared) the size is determined and fixed when the type of the struct is declared. that'd explain it
[04:28:36] <pert> after all, the type of the structure itself is *not* able to be declared statically at file scope, so I think that's indeed the case
[04:28:40] <pert> thanks for talking me through it
[04:29:17] *** Joins: crashrep (~crashrep@user/crashrep)
[04:34:52] <nightstrike> np
[04:34:59] <nightstrike> and I learned a new feature :)
[04:35:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:36:45] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[04:37:20] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[04:38:53] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[04:38:53] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[04:41:10] *** Joins: seninha (~seninha@user/seninha)
[04:42:02] *** Joins: euouae (~euouae@user/euouae)
[04:42:11] <euouae> Hello
[04:42:54] <euouae> I am interested in learning the basics of linking, also want to understand more about foreign function interfaces. What would you recommend?
[04:44:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:44:46] <klys> euouae, learn some asm, read the manuals for your linkers, and then proceed to custom linker scripts.
[04:45:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:45:29] <euouae> OK for x86_64 on linux in particular?
[04:46:03] *** Quits: gonogo_ (~gonogo@167.88.62.87) (Remote host closed the connection)
[04:46:03] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[04:46:06] *** Joins: symb0l8 (~symb0l@user/symb0l)
[04:46:09] <euouae> if I go with gcc it's ld right?
[04:46:14] *** Joins: gonogo_ (~gonogo@167.88.62.87)
[04:46:16] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[04:46:21] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:46:33] *** Quits: symb0l (~symb0l@user/symb0l) (Read error: Connection reset by peer)
[04:46:33] *** symb0l8 is now known as symb0l
[04:46:35] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[04:46:39] <euouae> the ld man page is quite daunting, do you really think it's the best approach?
[04:46:42] <klys> euouae, nasm via nasmdoc online, info ld, info llvm, and then the osdev wiki on linker scripts
[04:47:08] *** Quits: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com) (Read error: Connection reset by peer)
[04:47:30] <euouae> Ah, the info document is nicer
[04:47:46] *** Quits: towel_ (~towel@user/towel) (Quit: ZNC - https://znc.in)
[04:47:46] *** Quits: luca0N_ (~luca0N@nautilus.luca0n.com) (Quit: Leaving)
[04:47:54] *** Joins: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com)
[04:47:55] *** Quits: Byteflux (~byte@byteflux.net) (Remote host closed the connection)
[04:47:57] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[04:48:00] *** Joins: towel (~towel@user/towel)
[04:48:08] *** Quits: Celelibi (celelibi@user/celelibi) (Remote host closed the connection)
[04:48:14] *** Joins: Byteflux (~byte@byteflux.net)
[04:48:21] *** luca0N is now known as Guest7572
[04:49:23] *** Quits: ravndal (~weechat@user/ravndal) (Ping timeout: 268 seconds)
[04:49:42] *** Joins: zacts (~zacts@user/zacts)
[04:50:00] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 268 seconds)
[04:50:00] *** Quits: chiptuner (~bobby@user/chiptuner) (Ping timeout: 268 seconds)
[04:50:04] *** Quits: moose (~moose@user/moose) (Quit: System has requested shutdown due to maintenance.)
[04:50:20] *** Joins: ravndal (~weechat@user/ravndal)
[04:50:37] *** Quits: cp--- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 268 seconds)
[04:50:45] *** Quits: pert (~pert@fsf/member/pert) (Read error: Connection reset by peer)
[04:50:46] *** Joins: chiptuner (~bobby@user/chiptuner)
[04:51:01] *** Joins: ferdna (~ferdna@user/ferdna)
[04:51:11] *** Joins: cp--- (~cp-@b157153.ppp.asahi-net.or.jp)
[04:51:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:53:30] *** Joins: Celelibi (celelibi@user/celelibi)
[04:53:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:53:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:53:37] *** Joins: wroathe (~wroathe@user/wroathe)
[04:54:56] *** Joins: ickk (~ickk@user/ickk)
[04:56:57] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:57:01] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[04:58:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:03:35] <tusko> help
[05:04:31] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:05:22] *** Joins: epony (epony@user/epony)
[05:05:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:07:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:08:16] *** Joins: Torr (~Torr@user/torr)
[05:09:30] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[05:10:10] *** Joins: fengdaolong (~fengdaolo@58.48.84.75)
[05:10:55] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:14:47] *** Joins: vysn (~vysn@user/vysn)
[05:15:24] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[05:15:39] *** Joins: System_Error (~SystemErr@user/systemerror)
[05:17:23] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:18:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:18:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[05:19:57] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: rebooting...)
[05:21:12] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[05:21:20] *** Quits: alch (~alch@151.82.25.253) (Read error: Connection reset by peer)
[05:21:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[05:21:58] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:22:32] *** Joins: crashrep (~crashrep@user/crashrep)
[05:22:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b) (Quit: Quit)
[05:23:54] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[05:26:04] *** Joins: alch (~alch@151.82.64.6)
[05:26:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:29:12] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:30:57] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[05:32:55] <uskerine> how do I print an __uint128_t?
[05:33:26] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[05:35:08] <twkm> didn't the docs that told you that non-standard type exists also describe the things you can use to work with it?
[05:37:22] <uskerine> I know that printf can't handle them, I am asking if someone knows where can I find a routine to display them
[05:37:34] <uskerine> either hex or a large number
[05:37:48] <uskerine> I found one in the past, but I can not find it anymore
[05:38:27] <koollman> print them as two 64bits unsigned int ?
[05:39:40] *** Quits: fengdaolong (~fengdaolo@58.48.84.75) (Ping timeout: 256 seconds)
[05:40:32] *** Quits: bramhaag (~bramhaag@134.195.121.39) (Quit: Ping timeout (120 seconds))
[05:40:44] *** Joins: bramhaag (~bramhaag@134.195.121.39)
[05:41:31] *** Joins: fengdaolong (~fengdaolo@58.48.84.75)
[05:41:33] <koollman> uskerine: something like(untested): __uint128_t x; printf("x: %016" PRIx64 "%016" PRIx64 "\n",(uint64_t)(x>>64),(uint64_t)x);
[05:42:38] *** Quits: V (~v@anomalous.eu) (Remote host closed the connection)
[05:43:56] *** Joins: frostygoth (~frostygot@li1566-163.members.linode.com)
[05:44:27] <SamuelMarks> uskerine K&R has a tutorial for how to implement printf
[05:46:29] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-683f-bbb8-7126-a771.fixed6.kpn.net)
[05:51:40] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-683f-bbb8-7126-a771.fixed6.kpn.net) (Ping timeout: 268 seconds)
[05:52:37] <koollman> but, well, you don't need to implement it if it's there :)
[05:52:43] *** _nuxil_ is now known as nuxil
[05:53:47] <Learath2> ,cc puts(PRIu128);
[05:53:48] <candide> Learath2: error: 'PRIu128' undeclared; did you mean 'PRIu8'?
[05:54:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:54:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:54:23] <koollman> https://bpa.st/LB2Q
[05:54:33] <pragma-> hm, i should add stddef.h
[05:54:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:55:05] <koollman> these are in inttypes.h (and not stdint :/ )
[05:55:56] <pragma-> all that's already included. just no PRIu128.
[05:56:40] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[05:57:48] *** Quits: fengdaolong (~fengdaolo@58.48.84.75) (Ping timeout: 256 seconds)
[05:57:50] <koollman> PRIu128 isn't declared on my system
[05:58:43] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[05:58:50] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:00:11] *** Joins: fengdaolong (~fengdaolo@58.48.84.75)
[06:00:25] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[06:01:16] <fizzie> The GCC/glibc combo's support for 128-bit integers is pretty lacking. It's not even a "real" conforming extended integer type, since (u)intmax_t isn't that big, but that type's required to be able to represent "any value of any (un)signed integer type".
[06:01:30] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[06:02:11] <oldlaptop> close enough for GNU C Explorer
[06:02:18] * oldlaptop runs away
[06:04:59] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:06:01] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[06:07:09] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:07:38] *** Quits: csjp (~csjp@user/csjp) (Quit: leaving)
[06:11:34] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:15:43] *** Quits: nicode (~nic@45.72.195.35) (Ping timeout: 256 seconds)
[06:15:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:15:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:15:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:22:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[06:22:18] <nuxil> whats the best way to average a continius datastream.? les says i get some datapoints every 30m and i need to pass on data every 100ms.
[06:22:24] <nuxil> the data is a bit noisy so i like to average it up to have it more clean.
[06:22:29] <nuxil> i was thinking about using a ringbuffer or am i way off here?.
[06:25:02] *** Joins: malina (~malina@user/malina)
[06:25:52] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[06:26:18] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:26:53] <fizzie> A circular buffer + on each step subtracting the "outgoing" value and adding the "incoming" one is the standard way of doing a moving-window sum or average, yes.
[06:28:18] <nuxil> thanks :)
[06:28:25] <wroathe> circular buffers are such a cool (and in my opinion underused) data structure
[06:29:58] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[06:30:03] *** Joins: V (~v@anomalous.eu)
[06:33:17] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:33:38] *** Joins: malina (~malina@user/malina)
[06:39:00] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:39:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:42:12] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[06:42:15] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:43:00] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[06:43:27] <fizzie> DSPs (at least the one I know a little) have ring buffer addressing modes, where you set a base and a size, and then you can have an operation do basically a post-increment on an address register except with wraparound. Because it's such a natural implementation of delays and FIR filters.
[06:43:30] <fizzie> Wouldn't it be nice if C would let you say something ridiculous like `data[i+%len]` for that too?
[06:44:03] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[06:48:14] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:48:20] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:51:53] *** Joins: pingpongball (~pingpongb@43.228.192.122)
[06:51:57] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:51:59] <pingpongball> How true is this?
[06:52:01] <pingpongball> Clang is mainly used to provide performance superior to that of GCC.
[06:52:12] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[06:52:24] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:38] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (Remote host closed the connection)
[06:53:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[06:54:32] *** Joins: tbcr (~tbcr@107.13.189.161)
[06:58:40] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[07:00:11] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:01:27] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:01:38] *** Joins: raym (~raym@user/raym)
[07:06:42] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:07:01] <rcf> Not true at all; the opposite has historically been the case.
[07:07:06] <pingpongball> How much time does it needs to compile libgccjit from source?
[07:07:34] <rcf> Unless you're talking build times, in which case it can be faster, yes.
[07:09:33] <rcf> The actual reason it gained adoption was licensing, and a codebase that wasn't intentionally difficult to work with as a means of furthering licensing goals.
[07:11:04] *** Quits: twinkiecream (~tux1@user/twinkiecream) (Remote host closed the connection)
[07:12:31] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:13:53] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:15:05] <oldlaptop> It turns out people can use a generalizable compiler backend with its own stable pseudo-asm for interesting things - and they tend to release the code anyway
[07:16:28] <fizzie> People can also use the *frontend* for interesting C things (like the clangd language server for editor smarts), something GCC was particularly against.
[07:17:10] <oldlaptop> good things happen when you make your frontend into a reusable library, who knew?
[07:17:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[07:19:11] *** Quits: pingpongball (~pingpongb@43.228.192.122) (Quit: "I'll come in a minute , to ask installing libgccjit ")
[07:22:38] <caze> All you need to do is to get rid of RMS.
[07:22:48] *** Joins: fe23 (~fe23@2409:8a34:477:2010:b087:870c:5eab:60a6)
[07:24:34] <ChoHag> It's that kind of simplistic thinking that caused gnu in the first place.
[07:32:12] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Quit: Leaving.)
[07:33:48] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[07:34:37] *** Joins: duds- (~duds-@146.70.31.116)
[07:35:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[07:35:41] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:09] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:59] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:38:05] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:38:59] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:40:58] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:41:00] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[07:42:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:43:30] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:47:18] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:47:42] *** Joins: pingpongball (~pingpongb@43.228.192.122)
[07:48:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:49:10] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:51:09] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:52:51] *** Quits: malina (~malina@user/malina) (Quit: malina)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:56:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:56:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:56:26] *** Joins: wroathe (~wroathe@user/wroathe)
[07:57:11] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[07:58:30] *** Quits: uskerine (~uskerine@186.189.78.188.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[07:59:24] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[07:59:41] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[07:59:49] *** Joins: hinata (~hinata@2409:4042:2e90:d98d:912c:488b:cbda:a114)
[08:01:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:01:20] *** Quits: fengdaolong (~fengdaolo@58.48.84.75) (Ping timeout: 256 seconds)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:06:12] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:06:47] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:09:17] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.72)
[08:12:11] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[08:12:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:16:31] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[08:18:07] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.72) (Ping timeout: 256 seconds)
[08:20:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:21:05] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:21:54] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[08:34:58] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[08:35:39] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[08:38:52] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:39:57] *** Quits: hinata (~hinata@2409:4042:2e90:d98d:912c:488b:cbda:a114) (Ping timeout: 240 seconds)
[08:43:27] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:44:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[08:46:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:47:41] *** Quits: moog (~moog@107.126.53.88) (Read error: Connection reset by peer)
[08:52:25] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:56:35] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[08:56:37] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[09:04:40] *** Joins: Satin (uid193953@user/Seten)
[09:06:27] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:13:14] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[09:15:59] <pingpongball> I've had compiled  emacs with unknown location
[09:16:08] <pingpongball> and trying to make install , it throws error
[09:16:18] <pingpongball> is it possible to change location
[09:16:37] <Satin> So my current assignment is something like this. https://i.imgur.com/1X44UFd.png Would y'all divide this into two sub-arrays? any tips on how the new sub-arrays would work like w/ binary search?
[09:17:10] <dave0> pingpongball: sometimes packages support DESTDIR    ...    make DESTDIR=/usr/local/ install
[09:17:23] <pingpongball> oh thanks
[09:17:45] <dave0> pingpongball: try it first in your homedir..   make DESTDIR=/home/pingpongball/test/ install
[09:17:59] <pingpongball> right thank you :)
[09:18:00] <dave0> be wary if it tries to install files outside that directory
[09:18:28] <dave0> (it shouldnt)
[09:18:39] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:18:51] <pingpongball> done installing:)  though i miss libgccjit
[09:19:15] *** Joins: ekathva (~ekathva@2001:999:51:be01:cc59:a999:376f:a526)
[09:20:26] *** Joins: ickk (~ickk@user/ickk)
[09:20:31] <ChoHag> Satin: I don't know if this is the right way to solve that rather bizarre problem but first I'd be searching with an eye to locating the pivot point then continuing/restarting the search with the new "middle". While keeping an eye out for the result.
[09:20:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[09:20:43] *** Joins: zacts (~zacts@user/zacts)
[09:20:56] *** Quits: alch (~alch@151.82.64.6) (Read error: Connection reset by peer)
[09:21:11] <Satin> and searching for a "pivot" point wouldn't count as "sorting the array rather than using binary search" ya think?
[09:21:32] <ChoHag> There's no need to create new arrays. If you know the index of the smallest entry you can add that to the index and look that up modulo the list length.
[09:22:11] <ChoHag> No just split in halves while searching but in the first round be aware that any section you scan may in fact have the true zero-offset in it.
[09:22:51] <Satin> Oh right. I could use index variables to manipulate that rather than new arrays.
[09:22:55] <Satin> into halves*
[09:23:33] <ChoHag> While offset == 0 consider that x[low] > x[high] may be true indicating that offset is really somewhere between low and high.
[09:23:49] <ChoHag> Eventually you'll narrow the search down either to your answer or the true pivot point.
[09:23:59] <Satin> Hmm... I see.
[09:25:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:25:22] *** Joins: alch (~alch@151.82.93.180)
[09:28:00] <dave0> google said this: https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/
[09:28:05] <dave0> it has c code
[09:28:27] <dave0> oh it has lots of code
[09:30:03] <caze> Satin: Easy binary search problem.
[09:30:18] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[09:30:47] <Satin> Well the binary search itself isn't the hard part, it's the rotated aspect! And from what I can tell, binary search does require an array to be sorted first
[09:33:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:33:58] <ChoHag> Satin: Given the array x = [ a b c d e ]; x[0] == a, x[1] == b, etc. Given instead x = [ c d e a b ]; x[(3 + 0) % 5] == a, x[(3 + 1) % 5] == b, etc.
[09:34:41] <caze> Satin: What's Problem 1?
[09:34:50] *** Quits: mkv (~znc@186.57.159.40) (Ping timeout: 256 seconds)
[09:35:28] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:35:33] <dave0> that website said the pivot point is the only case where array[pivot-1] > array[pivot]
[09:35:39] <Satin> caze: https://i.imgur.com/rTPMmMS.png
[09:35:51] <Satin> already did 1
[09:35:57] <ChoHag> So the simple solution at the top of that page linked will find the pivot point then perform a normal binary search but with every index [(i + o) % l] instead of [i].
[09:36:37] <ChoHag> But you can actually merge the searches together by considering for every sub-range whether or not it contains the pivot point as well as whether it contains the answer.
[09:38:35] <ChoHag> Satin: Why is size 6? a has 7 elements in it.
[09:38:53] <ChoHag> int size = sizeof (a) would be better.
[09:38:55] <Satin> *oops*
[09:39:04] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[09:39:15] <Satin> thanks for catching that
[09:39:30] <Satin> also that was the wrong file
[09:40:11] *** Joins: hinata (~hinata@2409:4042:2e90:d98d:912c:488b:cbda:a114)
[09:40:24] <Satin> Like. I completed Problem #1. The example has 6 elements as can be seen in the screenshot, so I had it working there. Then I cp'd it to a new file so I could start working on #2 with a template, taht's when i edited the array to be unsorted and have 7 elements instead... and took a screenshot of oops.
[09:40:36] <caze> Screenshots of code.
[09:40:43] <Satin> caze: LOL
[09:40:51] * Satin deja vu
[09:41:03] <ChoHag> Also while I'm being critical of the wrong thing, I suggest getting in the habit of always using braces especially on if statements.
[09:41:09] *** Joins: fengdaolong (~fengdaolo@58.48.84.75)
[09:41:31] <Satin> Strongly going to consider that :P I have the opposite habit if it's one-liners, but you're right that's probably better.
[09:41:58] <ChoHag> It's one of those rules that's there so you think before you break it. The trick is to get into the habit so that you do the thinking every time.
[09:42:02] <caze> Satin: Do you know how to find the pivot point?
[09:42:15] <Satin> Mmm no. Figuring that out now I think.
[09:42:37] <caze> Don't think in terms of a point. Think in terms of a pair of points.
[09:43:01] <Satin> 11:12 PM. Deadline at 11:59. I suppose I can do this.
[09:43:11] <caze> deja vu
[09:43:14] <Satin> Given it's just about """simple"""" logic
[09:43:21] <Satin> caze: lol
[09:43:27] <ChoHag> Oh another thing: Don't use numbers in your array.
[09:43:34] <Satin> ChoHag: why not?
[09:43:35] <ChoHag> Or if you do make them bigger than 10.
[09:43:50] <ChoHag> So you don't get mixed up with the index vs. the value that's at an index.
[09:44:01] <Satin> caze: at least this isn't something like the game of life or whatever!
[09:44:21] <ChoHag> a[4]==0 and a[0]==4.
[09:45:02] <Satin> ChoHag: usually i make my test printf statements in weird "TEST: THE vALUE IS %d AT %d" to avoid getting mixed up
[09:45:17] <Satin> interesting idea
[09:45:21] <ChoHag> You could have a[4]=='A' and a[0]=='D', or A[4]==100 and a[0]==140.
[09:45:53] * Satin can't remember - can you put a char inside of an int array without it spitting out ascii values?
[09:46:06] <ChoHag> You'll thank me when your next task has you storing indexes into an array in another array.
[09:46:20] <Satin> oh dear, that sounds nasty indeed
[09:47:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:47:21] <ChoHag> A char is 8 bits, int >= 32 so it will fit. How it's printed is up to printf.
[09:47:36] <Satin> Right.
[09:48:20] <Satin> so printf can print out an int array with all 'A', 'B' 'C' etc if you just specify %c instead?
[09:48:32] <ChoHag> Yes.
[09:48:40] <Satin> fascinating
[09:48:58] <ChoHag> Consider that x = 'A' and x = 65 are identical.
[09:48:59] <Satin> Also just glanced at that geeksofgeekspage without looking too far down - "pivot element is the only element for which next element to it is smaller than it" okay.
[09:49:00] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[09:49:22] <Satin> So should I just run a search for a pivot element first? that wouldn't count as "sorting" the array I suppose
[09:50:28] <ChoHag> There's no need to sort it you just need to find where the true 0-index (ie. pivot point) is.
[09:51:28] <ChoHag> With that knowledge the array is indistinguishable from one which is properly sorted with the lowest value at index 0.
[09:51:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:51:44] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 250 seconds)
[09:52:02] <caze> Satin: Think in terms of a pair of elements - at the midway point between these two elements if your potentiol pivot candidate.
[09:52:15] <caze> s/if/is/
[09:52:35] <dave0> Satin: that's what the geek page does.. it has a binary search for the pivot, then a binary search for each half of the array split by pivot
[09:52:42] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:53:01] <ChoHag> The first implementation. Lower down it combines both searches but recursively for some reason.
[09:53:30] *** Joins: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:54:14] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[09:54:57] <ChoHag> I'd call that an optimisation though. Conceptually the algorithm has two parts: find the true centre and then binary search for the answer.
[09:55:01] *** Quits: Jong (~Jong@163.114.132.5) (Ping timeout: 256 seconds)
[09:55:11] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 250 seconds)
[09:55:52] *** Quits: Ekho (~Ekho@user/ekho) (Quit: CORE ERROR, SYSTEM HALTED.)
[09:56:07] *** Joins: mven9 (~mven@ip68-104-39-54.lv.lv.cox.net)
[09:56:43] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 256 seconds)
[09:56:43] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[09:56:43] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[09:56:43] *** mven9 is now known as mven
[09:57:08] <dave0> maybe Satin will get extra credit if they do it in one go
[09:57:17] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 256 seconds)
[09:57:41] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[09:58:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:58:56] <caze> She only has 32 minutes left.
[09:59:08] *** Quits: fengdaolong (~fengdaolo@58.48.84.75) (Quit: WeeChat 2.8)
[10:00:32] <NRK[m]> o_O
[10:00:39] *** Joins: Ekho (~Ekho@user/ekho)
[10:01:01] <NRK[m]> i see conspiracy against my boi RMS.. very cringe and uncool.
[10:01:36] <caze> RMS is a creeper fascist.
[10:01:40] *** Joins: pingpongball2 (~pingpongb@43.228.192.122)
[10:02:17] <NRK[m]> just a bit autistic and misunderstood
[10:02:20] <sham1> Creeper is arguable, but a fascist?
[10:02:34] <sham1> Man, fascism has gotten a lot of inflation over time
[10:03:38] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.39)
[10:04:08] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.39) (Max SendQ exceeded)
[10:04:36] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.39)
[10:05:18] *** Joins: Oddity (~Oddity@user/oddity)
[10:05:20] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b)
[10:05:47] *** Quits: pingpongball (~pingpongb@43.228.192.122) (Ping timeout: 256 seconds)
[10:07:00] <Satin> got this far so far https://i.imgur.com/szaGMlH.png
[10:08:03] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[10:09:11] <Satin> *declaring the variables*
[10:09:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:09:34] <NRK[m]> bro... use some paste service. i recomm dpaste.com
[10:11:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[10:13:12] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:14:50] <ChoHag> for (i = 0; i < sizeof (a) - 1; i++) { if (a[i] > a[i + 1]) { break; } } pivot = i + 1;
[10:15:00] <ChoHag> I think. Stops you walking off the end at least.
[10:17:13] <dave0> the trick seems to be every element below the pivot is greater than every element above the pivot.. so if you have low,mid,high ... if array[low] < array[mid] then { pivot is in mid...high } else if array[mid] < array[high] then { pivot is in low...mid }
[10:17:13] <ChoHag> In any case make sure your code gets it right: printf("Pivot found at offset %d.\n", pivot);
[10:17:50] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[10:18:54] <ChoHag> At that point you proceed as if you have an array of size elements starting at index pivot and ending at index pivot + size.
[10:20:28] *** Joins: meator (~meator@user/meator)
[10:21:14] <ChoHag> Except of course you don't so you must shift it back to being between 0..size-1.
[10:23:01] <NRK[m]> `return puts("-1");`
[10:23:35] <ChoHag> Does anyone have a non-intel (virtual) cpu to hand?
[10:23:57] <ChoHag> It seems godbolt.org is happy to compile for any architecture but only executes code on x86.
[10:24:38] <NRK[m]> what do u need it for?
[10:25:06] <ChoHag> Curious how other architectures deal with type-punning a union of flag bits.
[10:25:27] <ChoHag> I could install something in qemu but that would take hours and I'm not *that* curious.
[10:25:36] <NRK[m]> i got a zen2 cpu
[10:25:53] <ChoHag> Trying to figure out how to get some code out of this POS...
[10:26:02] <NRK[m]> arm, my phone i guess.
[10:27:31] <ChoHag> https://bpa.st/34AA
[10:28:24] <ChoHag> Couldn't be bothered to figure out the correct combination of c type and printf arcanery.
[10:28:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:29:48] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:30:05] <NRK[m]> https://dpaste.com/ENNZ6A5Q4
[10:30:31] <ChoHag> That's on arm?
[10:30:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Client Quit)
[10:30:48] <NRK[m]> no, on zen2.
[10:30:53] <caze> Satin: Time's up. https://ideone.com/slgDms
[10:31:12] <NRK[m]> i don't think i have a C enviornment on my phn
[10:31:12] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:31:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:31:34] <NRK[m]> .oO(last i tried to compile hello world on it with tcc on termux it didn't work)
[10:32:11] <nomagno> Use clang on Termux, tcc is broken
[10:32:17] <nomagno> In fortunately
[10:32:23] <nomagno> Unfortunately*
[10:32:31] <caze> tbh, I spent most of the time getting the formatting right.
[10:33:04] <ChoHag> Hmm well luckily the crossover between the union and the mask is in one small space so if it turns out to be broken on other architectures it's not hard to fix.
[10:33:31] <Satin> pfft
[10:33:49] <caze> Oh I did a silly thing.
[10:34:01] <Satin> caze: nice nice. I'm still working on getting mine to work. I'll lose points for late work but oh well. Better than nothing.
[10:34:29] <NRK[m]> nomagno: i'd assume that's bcus termux is packaging the "stable" tcc version. which is like 2/3 years old.
[10:35:01] <caze> Satin: You're going to kick yourself when you look at my solution.
[10:35:15] *** Quits: pingpongball2 (~pingpongb@43.228.192.122) (Ping timeout: 256 seconds)
[10:41:45] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:47:45] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[10:47:58] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:50:30] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[10:50:56] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:54:43] *** Joins: pingpongball (~pingpongb@43.228.192.117)
[10:55:28] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[10:55:43] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:57:58] <caze> Satin: Do you know what `return printf("..."); does?
[11:00:16] <caze> <NRK[m]> `return puts("-1");`
[11:02:37] <Satin> caze: yeah I just put that down there if everything else didn't work
[11:02:48] <caze> Satin: What does it do?
[11:02:59] *** Quits: ekathva (~ekathva@2001:999:51:be01:cc59:a999:376f:a526) (Remote host closed the connection)
[11:03:16] <Satin> puts or printf? the statement at the bottom should just spit out -1 if the while loop isn't going to return anything.
[11:03:41] <caze> Satin: What does the return do?
[11:04:08] <caze> Satin: You didn't write `puts("-1");` You wrote `return puts("-1");`
[11:04:15] <Satin> return a value to the OS?
[11:04:19] <Satin> oh
[11:04:19] <caze> Same for the printfs.
[11:04:29] <caze> What value gets returned?
[11:04:45] <Satin> the print statements? i mean it's working correctly in my other program
[11:04:57] <caze> I'm asking about the return.
[11:05:28] <Satin> returns a value to the caller
[11:05:36] <caze> Yes, what value gets returned?
[11:05:44] <Satin> hmmmmmmmmmmmmmm
[11:05:50] *** Joins: ekathva (~ekathva@2001:999:51:be01:f430:4edc:7521:6563)
[11:06:29] *** Joins: Rounin (~david@84.212.130.215)
[11:06:30] <Satin> ok you got me there, I'm not sure what's that returning to the terminal
[11:06:51] <caze> This is actually the important part, because your assignment says, "if you found return its index". It doesn't say _print_ its index.
[11:07:24] * Satin would be surprised if the professor was that strict of a stickler.... but true, I'll fix that
[11:07:33] <caze> "... otherwise return -1"
[11:07:49] <caze> But wouldn't it suck if you printed the correct value, but returned the wrong value?
[11:08:17] <Satin> I'd assume he'd use common sense and read the printed value and treat it as a return value!
[11:09:00] <Satin> But ah well. Easy to fix. I'd hope that's not his main focus with grading though versus actually doing the code here.
[11:09:13] <caze> Are you going to look at my solution?
[11:09:27] <Satin> I did, it seems very different from the one I'm trying to go for
[11:09:28] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[11:09:41] <caze> Why do you think that is?
[11:09:48] <caze> I mean, different how?
[11:10:13] <caze> Do you mean the solution itself appears differnt, or the output of the program is unexpected?
[11:10:24] <Satin> former
[11:10:34] *** Joins: joev1 (~joev@user/joev)
[11:10:41] <Satin> Perhaps I'm a bit too invested in making my current line of effort work.
[11:11:05] <caze> What is your current line of effort?
[11:11:10] *** Joins: kaph_ (~kaph@151.57.50.182)
[11:11:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:11:25] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:11:55] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[11:12:03] <caze> The last thing I saw had stuff like o = [i];
[11:12:08] <Satin> Well. It's to find the pivot, which I already can now. And then somehow manipulate the indices to match the code I posted previously which handled a sorted array just fine.
[11:12:45] <caze> Satin: Are you still doint linear search?
[11:12:56] <dave0> Satin: if you have the pivot, just run two binary searches... one on    0...pivot   and the other on    pivot...size of array
[11:13:02] <caze> Satin: I don't think you will get full gredit for finding the pivot point using linear search.
[11:13:23] <Satin> caze: I'm fine with that risk.
[11:13:27] <caze> Satin: The assignment seemed to emphsize _binary_ search.
[11:13:56] <Satin> dave0: ooh.
[11:14:03] <caze> Satin: Okay, but you're already doing binary search anyway, later on. In fact, if you compare my solution for finding the pivot point, and your solution to finding the target value, they are incredibly similar.
[11:15:42] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[11:16:59] <caze> Satin: Here is a side-by-side comparison of our codes. https://i.imgur.com/uiL3mYC.png
[11:18:26] <caze> Satin: You have: while ((start + 1) < end){
[11:18:38] <caze> Satin: I have: while (start + 1 != end) {
[11:19:02] <caze> Satin: You have: mid = start + (end - start) / 2;
[11:19:12] <caze> Satin: I have: size_t mid = (start + end) / 2;
[11:20:00] <caze> Satin: You have: else if(a[mid] < target){
[11:20:12] <caze> Satin: I have: if (array[mid] >= array[end]) {
[11:20:25] <caze> Satin: You have: start = mid;
[11:20:33] <caze> Satin: I have: start = mid;
[11:20:44] <caze> Satin: You have: end = mid;
[11:20:53] <caze> Satin: I have: end = mid;
[11:24:51] <NRK[m]> i mean, `return puts(..)` is a valid construct.
[11:25:05] <NRK[m]> weird, but valid. but it's just not doing what he thinks it's doing.
[11:25:18] *** Joins: node1 (~hex@user/node1)
[11:25:19] <caze> She doesn't know enough about programming to even think to look up what it does.
[11:25:43] *** Joins: leib (~leib@2405:201:900a:f021:45f3:f8ff:c6d0:94fa)
[11:26:36] <node1> When we declare let say `int i = <some number>`  What is the default modifier it's being associated with it?
[11:26:50] <caze> What kind of modifier?
[11:27:49] <node1> caze, kinds of modifier means what?
[11:27:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:27:59] <node1> Could you please give an example?
[11:28:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[11:28:12] <caze> node1: What do you mean by modifier?
[11:28:20] *** Quits: kaph_ (~kaph@151.57.50.182) (Remote host closed the connection)
[11:28:32] <NRK[m]> i suspect he's coming from some other language which does something weird
[11:29:08] <node1> caze, I don't know please you tell me
[11:29:11] <caze> node1: Also, which part of int i = <some number> are you asking about?
[11:29:34] <caze> node1: There are length modifiers, which dont' apply here.
[11:30:39] <node1> I'm talking about `int i` when we write this it must have some range for the integer which i would likes to explore.
[11:30:56] <node1> interger data type.*
[11:31:15] <caze> The range is required to be at the minimum between -327676
[11:31:29] <caze> -327676 and 32767
[11:31:40] <caze> -32767 and 32767
[11:31:57] <caze> The range may be larger, depending on the implementation.
[11:32:05] <node1> Exactly, but i have found i can initialize value more then 32767 using int i = 32769
[11:32:13] <NRK[m]> it's typically 32bits on most system
[11:32:52] <caze> You can see what the range is on your implementation by including limits.s and printing INT_MIN and INT_MAX.
[11:32:59] <caze> limits.h
[11:33:12] <node1> int main(){      int  i = 32769;    printf("%d\n",i);}
[11:33:26] <node1> it works, their are no restriction.
[11:33:27] <NRK[m]> you can use `long` if u want a 32bit guarantee
[11:33:49] <NRK[m]> ,cc printf("%d\n", INT_MAX);
[11:33:50] <caze> ,cc printf("int values are between %d and %d\n", INT_MIN, INT_MAX);
[11:33:51] <candide> NRK[m]: 2147483647
[11:33:53] <candide> caze: int values are between -2147483648 and 2147483647
[11:34:26] *** Joins: kaph (~kaph@151.57.50.182)
[11:34:31] <NRK[m]> node1: you get 16bit minimum, it's not exact.
[11:34:51] <NRK[m]> you can use <stdint> for exact width types
[11:35:00] *** Quits: kaph (~kaph@151.57.50.182) (Remote host closed the connection)
[11:35:04] <node1> Kindly answer this question why i'm able to print the interger 32769 when the data type is int and has limit of -32767 and 32767
[11:35:17] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[11:35:26] <NRK[m]> ,recall nrk minimum
[11:35:26] <candide> I don't know anybody named nrk.
[11:35:34] <caze> node1: It does not have a limit of -32767
[11:35:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:35:40] <beastie> I think Satin has been chatting to much and has lost his/her opportunity of giving a good answer.
[11:35:49] <fluter> node1: How do you know int has limit of -32767 and 32767??
[11:35:58] *** Joins: Senicar8 (~Senicar@gateway/tor-sasl/senicar)
[11:36:07] <fluter> node1: Show the code?
[11:36:26] * Satin meanwhile trying to figure out how to select all copy to clipboard in vim
[11:36:46] <NRK[m]> ggyG
[11:36:49] <caze> Just keep posting screenshots of your code.
[11:36:54] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 276 seconds)
[11:36:55] *** Senicar8 is now known as Senicar
[11:37:03] <Satin> caze: No. :P
[11:37:06] <fluter> Satin: vim or gvim?
[11:37:14] <NRK[m]> if your clipboard is synced to system clipbord. otherwise you need to do something with registers.
[11:37:15] <Satin> NRK[m]: so ggYG selects all, but ggyG copies?
[11:37:20] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:37:22] <node1> fluter, I came to know from the wikipedia. They says interger has the limit of −32,767, +32,767  https://en.wikipedia.org/wiki/C_data_types
[11:37:26] <Satin> fluter: vim
[11:37:31] *** Joins: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[11:37:54] <caze> node1: Do you know what "minimum" means?
[11:37:55] <node1> fluter, Please find the code int main(){      int  i = 32769;    printf("%d\n",i);}
[11:38:25] <node1> yes minimum means initial or starting value a kind
[11:38:55] <caze> node1: Wikipedia says: Capable of containing at least the [−32,767, +32,767] range.
[11:39:08] <caze> node1: Do you know what "at least" means?
[11:39:25] <node1> at least means minimum
[11:39:45] <fluter> node1: change the code and run this:   int  i = 32769;    printf("%d %d %d\n", i, INT_MIN, INT_MAX);
[11:39:54] *** Joins: kaph (~kaph@151.57.50.182)
[11:40:09] <NRK[m]> node1: so where is the confusion?
[11:40:24] *** Quits: leib (~leib@2405:201:900a:f021:45f3:f8ff:c6d0:94fa) (Quit: Leaving)
[11:40:48] <caze> node1: So that means that the smallest range is [−32,767, +32,767]. The range may be bigger than that. It could be [-32,768, +32,767].
[11:41:05] <NRK[m]> `int` will be _ATLEAST_ 16bits, but it can be bigger (typically it's 32bits)
[11:41:19] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 268 seconds)
[11:42:08] <NRK[m]> Satin: put this on your vimrc and it should yank to your system clipboard `set clipboard=unnamedplus`
[11:42:27] <node1> fluter, The output is 32769 -2147483648 2147483647
[11:42:45] <Satin> NRK[m]: okay i will try that, thank you
[11:42:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:42:54] <fluter> node1: see, int  i = 32769; is totally within the range of int on your system
[11:42:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[11:43:03] <fluter> node1: so nothing to surprise, ok?
[11:43:56] <node1> fluter, Yes it's clear now thank you very much fluter . But how do i see and understand this statement `Short signed integer type. Capable of containing at least the [−32,767, +32,767] range`
[11:44:26] <caze> node1: It's the same as int.
[11:44:32] <NRK[m]> focus on the word "at least"
[11:44:35] <fluter> node1: You're welcome.
[11:44:41] <node1> fluter, :)
[11:44:41] <fluter> Yes, the key is "at least".
[11:44:49] <fluter> It can be bigger but no less.
[11:46:11] <node1> okay
[11:47:39] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:15] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:49:57] <node1> I see and  there is no place for counting numbers in C world. Only using Arithmetic types we associate our computations.
[11:51:07] <fluter> What do you mean counting numbers? Surely you can count numbers in C.
[11:51:21] <dave0> it would be a strange computer without numbers
[11:51:54] <node1> yes using Arithmetic way
[11:51:57] <NRK[m]> numbers aren't real, it's all just bytes in memory ;o
[11:53:01] <node1> fluter, NRK[m] agree.
[11:53:07] <caze> node1: You can think of each int variable as a single digit in a 2^n bit number base.
[11:53:31] <caze> node1: When your single digit runs out of room, you add a second digit.
[11:53:33] <node1> ok.
[11:53:47] *** Joins: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21)
[11:55:39] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.29)
[11:55:58] *** Joins: meator (~meator@user/meator)
[11:57:25] *** Quits: kaph (~kaph@151.57.50.182) (Ping timeout: 256 seconds)
[11:57:44] <Satin> caze dave0: thanks, i got this working https://ideone.com/uNfBRI (finally got a way to copy in vim lol)
[11:58:06] <Satin> NRK[m]: the config line you sent doesn't work because apparently I'm discovering I have vim-minimal.
[11:58:12] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.39) (Ping timeout: 256 seconds)
[11:58:53] <caze> Satin: Do you know how modulo arithmetic works?
[11:59:16] <dave0> Satin: cool
[11:59:47] <Satin> caze: I know how to use it for something like the fizzbuzz sort of thing, if you want to ask me how it *actually* works... oh boy.
[11:59:58] <Satin> No.
[12:00:17] <NRK[m]> =w=
[12:00:21] <NRK[m]> it's ez
[12:00:32] <Satin> Last time I tried to look it up, I remember clocks and stuff, I don't want to think about it at 1:30 AM tbh.
[12:00:53] <Satin> NRK[m]: well yeah the basic idea is easy of it just being about remainders right?
[12:01:25] <caze> Satin: Is you start the search from the pivot point, and just go up size elements beyond it, when you reach the end of the array, you can use modulo to circle back around to the beginning of the array.
[12:01:53] <Satin> Mmm.
[12:01:56] <dave0> Satin: i think the trick with finding the pivot with binary search is that the low,mid,high are treated as 2 sub-blocks, and you decide which sub-block contains the pivot
[12:02:21] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:02:31] <caze> There is no trick.
[12:03:32] <NRK[m]> ,cc for(int i = 5, n = 0; n < 10; ++n) { printf("%d, ", i); ++i; i %= 10; }
[12:03:34] <candide> NRK[m]: 5, 6, 7, 8, 9, 0, 1, 2, 3, 4,
[12:03:44] <dave0> Satin: so you start with your rotated array, and have a subblock array[low...mid] and other subblock array[mid...high] and you need to decide which subblock contains the pivot
[12:03:48] *** Parts: meator (~meator@user/meator) (Leaving)
[12:04:10] <caze> The "trick" is to perform a binary search, which is what dave0 is describing.
[12:04:13] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[12:04:31] <Satin> dave0: makes sense.
[12:04:42] <NRK[m]> does it?
[12:04:53] *** Joins: joev1 (~joev@user/joev)
[12:05:09] <dave0> well you have to use your knowledge that the subblocks are sorted to decide which subblock to keep
[12:05:50] <dave0> if array[low] < array[mid] you know that this subblock does not contain the pivot
[12:07:38] <caze> Satin: https://ideone.com/slgDms Had to add some special cases.
[12:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:10:41] *** Joins: mikeross (~mikeross@165.225.196.93)
[12:10:53] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:11:12] <caze> Satin: https://ideone.com/AeolCq
[12:11:19] <dave0> Satin: if array[low] > array[mid] you know that this subblock low...mid must contain the pivot because the subblock is not correctly sorted, which can only happen from a rotation (if there was no rotation in the block, it would have been correctly sorted, which would mean lower numbered elements in the array was less than higher numbered)
[12:12:00] <dave0> Satin: so you recurse on this subblock low...high
[12:12:02] <Satin> caze: lol
[12:12:05] <caze> It's almost as if dave0 is writing the comments explaining my code.
[12:12:08] <dave0> viola! binary search
[12:12:32] <caze> dave0: https://ideone.com/slgDms
[12:12:49] <Satin> I see
[12:12:51] <dave0> yes caze already wrote it :-) but i think Satin doesn't want to copy someones code, instead to write her own
[12:12:59] <Satin> I'll save this code and make sure to take a look at it at a later date. Takes time to properly internalize some of this.
[12:13:11] <Satin> Yeah, I'm submitting the one I posted above
[12:13:26] <dave0> too ethical
[12:13:29] <caze> The relevant function is only 20 lines.
[12:13:47] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[12:13:55] <caze> The rest is generating the test arrays.
[12:13:57] <dave0> just do what every other student does and copy & paste caze's code :-)
[12:14:35] <dave0> i think the only way the teacher would catch you is if they hung out here ;-)
[12:14:45] <dave0> i think that happened once lol
[12:15:26] <caze> Extra Credit if you can explain how I get the arrow to point to the right spot.
[12:17:14] *** Quits: hinata (~hinata@2409:4042:2e90:d98d:912c:488b:cbda:a114) (Quit: Leaving)
[12:18:08] <Satin> Lol I'm too tired to do your challenge caze, but maybe next time.
[12:18:13] <Satin> 1:48 AM here :P
[12:18:21] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[12:18:40] <caze> Satin: Did you see how I modified your code? https://ideone.com/AeolCq
[12:18:47] <caze> You don't need two loops.
[12:19:16] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:19:23] *** Joins: cebor (~cebor@user/cebor)
[12:19:37] <Satin> I did see it yes, and it's pretty amazing you reduced it that far. I realize the gist of it is happening w/ the modulo thing and will look at it later.
[12:20:09] <caze> Satin: Literally all I did was add `% size` to a few places of your second loop.
[12:20:32] <Satin> Amazing.
[12:20:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[12:21:01] <caze> Satin: Your loop body is identical for both loops, correct?
[12:21:12] <dave0> hi candide
[12:21:16] <caze> Satin: This should never happen.
[12:21:19] <candide> Hola d﻿ave0
[12:22:03] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:22:07] <caze> Satin: Did you literally copy and paste the loop body?
[12:22:11] <Satin> yes
[12:22:17] <Satin> only the start and end are different
[12:22:21] <Satin> 0 to pivot, pivot to end
[12:22:30] <Satin> it is inelegant code and I fully own up to that.
[12:22:36] <dave0> just use a function
[12:22:53] <Satin> i was doing that then realized I wouldn't get my nice quick returns
[12:23:21] <Satin> (i'd have to write another switch case or something to sort the function's returns)
[12:23:32] <caze> A function is not really advised here.
[12:24:57] <caze> In essence, what you have is: for (int i = 0; i < 5; i++) { ... } for (int i = 5; i < 9; i++) { /* identical loop body */ }
[12:25:43] <NRK[m]> hello candide
[12:25:53] <candide> Hello N﻿RK[m]
[12:27:34] <caze> So the solution isn't really to put the loop body into a function - the solution is to have one loop - for (int i = 0; i < 9; i++) { ... }
[12:28:29] <Satin> caze: that makes sense.
[12:29:04] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[12:29:21] <caze> Satin: All I did was: start = pivot; end = pivot + size - 1;
[12:29:32] <caze> Satin: But now the loop will run past the end of the array.
[12:30:13] <caze> Satin: So everytime you access the loop, instead of doing a[i], you do a[i % size], and that makes it wrap around back to the beginning of the array.
[12:30:17] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[12:30:21] *** Joins: Zjeuna (~Zjeuna@223.237.18.235)
[12:30:24] <caze> Err. s/loop/array/
[12:31:22] <Satin> I see. Interesting.
[12:31:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:31:40] *** Joins: arinov (~arinov@213.194.126.155)
[12:31:42] *** Joins: m4v (~znc@ubuntu/member/m4v)
[12:31:54] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[12:32:21] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:33:13] <Satin> caze: What's the best approach towards becoming a better programmer in your opinion? Is there any systematic fashion or just doing "hard" challenges as much as possible?
[12:33:40] <Satin> (of course I realize the answer is practice, but I'm curious if there's any ideas of systematically going about the process)
[12:33:52] <caze> Satin: Look back at your old code and see if you can improve it.
[12:33:59] <Satin> i see
[12:34:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:34:27] <caze> Satin: You should develop a sense of when things can be improved.
[12:34:40] <caze> Satin: Like, you should never be copy pasting a loop body.
[12:35:10] <Satin> caze: I know enough to realize that was a nasty approach, but I was in a hurry :P
[12:35:15] <caze> Satin: You should have the mindset of a toolmaker.
[12:35:21] <Satin> i see
[12:35:35] <caze> Satin: Why does this tool I make suck? Is it actually useful?
[12:35:40] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[12:36:07] <caze> Satin: How hard will it be for someone who has never seen this tool before learn to use it?
[12:36:23] *** Joins: vysn (~vysn@user/vysn)
[12:36:47] <Satin> (anti obfuscating code)
[12:36:49] <caze> Satin: And when you find yourself doing something repetitive and tedious, a lightbulb should go off in your head, "I should make a tool for this!"
[12:37:13] <caze> Or more likely, as a beginner, "There is probably a tool for this!"
[12:38:00] *** Joins: Furai (~Furai@furai.pl)
[12:38:15] *** Quits: Zjeuna (~Zjeuna@223.237.18.235) (Remote host closed the connection)
[12:38:19] <Satin> caze: what do you think about developing your own tools (solutions) as a beginner from scratch versus looking up what's out there
[12:38:27] <caze> Also, "I'm probably misusing this tool."
[12:38:30] <Satin> which one's more better for progress
[12:38:41] <caze> Satin: A little of both.
[12:38:52] <Satin> fair enough
[12:40:49] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[12:41:02] *** Quits: boreas (~heiner@94.31.81.196) (Remote host closed the connection)
[12:41:14] <caze> If all you know about is while loops, but you know about functions, then you might one day end up writing a function that performs the function of a for loop, but using a while loop.
[12:42:04] <hsv> Is there any difference here? - memcmp(s1, "app", 3); strncmp(s1, "app", 3);
[12:42:23] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[12:43:08] *** Joins: Sadale (~Sadale@user/sadale)
[12:43:52] *** Quits: Satin (uid193953@user/Seten) (Quit: sleep is calling!)
[12:44:46] <caze> hsv: s1 for memcmp is not required to point to a string.
[12:44:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:45:33] <hsv> ah true. thanks.
[12:45:37] <caze> hsv: s1 is strncmp is required to point to a string, even if the thir argument prevents the null terminator from ever being reached.
[12:46:02] <caze> third argument
[12:46:19] <hsv> s1 is const char *, so i'll use strncmp().
[12:46:35] *** Joins: longbow (~longbow@m83-187-166-84.cust.tele2.se)
[12:46:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:47:06] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[12:49:51] <caze> That doesn't mean s1 is a string, but I don't see how strncmp can hurt.
[12:50:12] *** Joins: Sadale (~Sadale@user/sadale)
[12:50:18] <hsv> actually strcmp() does the same thing here too, anyway?
[12:51:56] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:52:32] <caze> No.
[12:52:54] <caze> ,cc strncmp("apple", "app", 3);
[12:52:58] <candide> caze: No output.
[12:53:17] <caze> ,cc printf("%d", strncmp("apple", "app", 3));
[12:53:19] <candide> caze: 0
[12:53:29] <caze> ,cc printf("%d", strcmp("apple", "app");
[12:53:30] <candide> caze: error: expected ')' before ';' token
[12:53:42] <caze> ,cc printf("%d", strcmp("apple", "app"));
[12:53:44] <candide> caze: 1
[12:54:04] <hsv> ah, yep. sorry
[12:54:32] <caze> hsv: Two strings that have different lengths cannot be equal, even if they share an initial sequence that happens to be the entirety of one of the strings.
[12:54:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:55:04] *** Quits: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[12:55:22] *** Quits: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:55:37] *** Joins: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:56:19] <hsv> sure
[12:57:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[12:57:31] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[12:58:14] *** Joins: Jong (~Jong@163.114.132.5)
[13:02:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[13:03:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[13:05:16] <amosbird> Hmm, does C provide an api to lock a fd? So that operations over two fds pointing to the same file (hard linked) will be sequenced
[13:07:55] <dave0> amosbird: you would have to use mutex's at a higher level
[13:08:20] <dave0> amosbird: do you make the threads that you want to sequence?
[13:08:53] <dave0> is it your program that you can modify, or is it some program not under your control?
[13:09:03] <amosbird> dave0: Yes, I make those threads
[13:09:17] <dave0> yeah just chuck in a mutex around your writes
[13:09:38] <amosbird> Indeed, thanks!
[13:09:50] <dave0> no worries
[13:10:07] <dave0> you said fd's so i assumed posix
[13:10:20] <dave0> c has a similar thing for stdio ... flockfile()
[13:11:10] <dave0> https://pubs.opengroup.org/onlinepubs/9699919799/functions/flockfile.html
[13:11:42] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[13:13:41] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[13:13:50] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:14:57] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:58] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[13:15:04] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:16:32] *** Joins: Khoyo (~khoyo@user/khoyo)
[13:16:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:17:00] *** Joins: hinata (~hinata@2409:4042:2e90:d98d:b902:8225:403a:3177)
[13:19:28] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:21:50] *** Quits: alch (~alch@151.82.93.180) (Read error: Connection reset by peer)
[13:21:59] *** Joins: shivesh (~shivesh@user/shivesh)
[13:22:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.29) (Read error: Connection reset by peer)
[13:23:08] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.29)
[13:23:41] *** Quits: vboykox (~user@25-20-134-95.pool.ukrtel.net) (Ping timeout: 268 seconds)
[13:25:18] *** Joins: vboykox (~user@25-49-134-95.pool.ukrtel.net)
[13:25:19] <amosbird> yeah, it seems using flock will be the same amount of work or more compared to using mutex
[13:25:40] *** Joins: alch (~alch@to-18-72-101.service.infuturo.it)
[13:25:55] *** Parts: longbow (~longbow@m83-187-166-84.cust.tele2.se) ()
[13:33:40] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[13:33:56] *** Joins: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es)
[13:36:23] *** Joins: xa0s (~xa0s@mab.sdf.org)
[13:37:08] *** Quits: node1 (~hex@user/node1) (Remote host closed the connection)
[13:38:48] *** Joins: Sadale (~Sadale@user/sadale)
[13:39:56] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[13:39:59] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.29) (Ping timeout: 256 seconds)
[13:40:17] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:40:19] *** Joins: saribro (~swinnenb@user/swinnenb)
[13:40:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: trvv (555a816688@user/trvv) (Ping timeout: 240 seconds)
[13:41:06] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[13:41:10] *** Joins: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c)
[13:41:11] *** Joins: trvv (555a816688@user/trvv)
[13:41:17] *** Quits: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (Ping timeout: 240 seconds)
[13:41:30] *** Quits: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es) (Remote host closed the connection)
[13:41:34] *** Joins: joolma_ (uid527699@id-527699.uxbridge.irccloud.com)
[13:41:35] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[13:41:37] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:41:46] *** Joins: sokan_ (~sokan@85.73.227.251)
[13:41:47] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[13:41:49] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[13:41:57] *** Quits: sokan (~sokan@2a02:587:9e0a:f500:227:eff:fe16:865d) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: skipper (~whatsupbo@user/scobydoo) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (Ping timeout: 240 seconds)
[13:42:04] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[13:42:05] *** Joins: blackbeard420_ (~blackbear@45.33.85.133)
[13:42:11] *** sokan_ is now known as sokan
[13:42:13] *** Joins: Telvana (~capo@user/telvana)
[13:42:17] *** Quits: fe23 (~fe23@2409:8a34:477:2010:b087:870c:5eab:60a6) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: fmlatghor (~lcoogan@2601:5cd:8100:2890::6) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: mrlemke (~quassel@2604:a880:4:1d0::394:0) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: beneth (~beneth@2001:41d0:c:a71:1000:25::) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 240 seconds)
[13:42:36] *** Joins: dogbert_22 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[13:42:37] *** Quits: hinata (~hinata@2409:4042:2e90:d98d:b902:8225:403a:3177) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: Fl0pFl1p (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: tobiasu (~tobiasu@user/tobiasu) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[13:42:37] *** joolma_ is now known as joolma
[13:42:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:42:52] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[13:43:02] *** Joins: fe23 (~fe23@2409:8a34:477:2010:b087:870c:5eab:60a6)
[13:43:07] *** Joins: hinata (~hinata@2409:4042:2e90:d98d:b902:8225:403a:3177)
[13:43:09] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[13:43:16] *** Joins: remexre (~remexre@user/remexre)
[13:43:58] *** Joins: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8)
[13:44:05] *** Joins: johnnyreb (~tth@user/johnnyreb)
[13:44:12] *** Joins: aradesh (~aradesh@user/aradesh)
[13:44:16] *** Joins: soapsudsxx_ (~soapsudsx@209.221.40.152)
[13:44:29] *** Joins: skipper (~whatsupbo@user/scobydoo)
[13:44:31] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:44:38] *** Joins: fmlatghor (~lcoogan@2601:5cd:8100:2890::6)
[13:44:45] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[13:44:55] *** Joins: mkv (~znc@ubuntu/member/m4v)
[13:45:05] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: pizdets_ (~pizdets@183.182.111.155) (Ping timeout: 256 seconds)
[13:45:14] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[13:45:19] *** Joins: pizdets (~pizdets@183.182.111.155)
[13:45:39] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (Ping timeout: 256 seconds)
[13:45:39] *** mkv is now known as m4v
[13:46:13] *** Quits: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 256 seconds)
[13:47:04] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[13:47:12] *** Joins: joev1 (~joev@user/joev)
[13:48:02] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[13:49:27] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[13:50:11] *** Joins: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59)
[13:52:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[13:54:19] *** Joins: Oddity (~Oddity@user/oddity)
[13:55:01] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[13:56:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[13:56:09] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[13:57:12] *** Joins: beneth (~beneth@ip208.ip-54-36-198.eu)
[13:58:44] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 250 seconds)
[13:59:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:00:06] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:01:01] <sham1> ,cc printf("%zu", alignof(max_align_t)); // curiosity
[14:01:03] <candide> sham1: 16
[14:01:25] <sham1> Aight, makes sense
[14:02:02] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[14:02:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:03:09] *** Joins: marlboro (~i.am@user/marlboro)
[14:04:57] *** Joins: Klinda (~superleag@user/klinda)
[14:05:28] *** Quits: Isthmusi (~Isthmus@user/isveni) (Quit: leaving)
[14:07:28] <fizzie> ,cc printf("%zu", sizeof (max_align_t)); // morbid curiosity
[14:07:30] <candide> fizzie: 32
[14:08:02] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[14:08:21] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[14:10:15] <sham1> 32 bytes. I would have guessed 16 because that'd be an SSE vector register type
[14:10:23] <sham1> Maybe AVX?
[14:11:34] <NRK[m]> yes, avx is 32bytes iirc
[14:11:53] <NRK[m]> excluding avx512 :)
[14:11:53] <fizzie> The problem with that is, aligned loads of the 32-bit AVX registers must also be 32-bit aligned, but as we just saw, the *alignment* of max_align_t was only 16.
[14:12:14] <fizzie> I don't think the size of max_align_t has any particular meaning; that's why the // morbid curiosity comment.
[14:12:53] <fizzie> ,cc max_align_t x; ptype(x); // more of it
[14:12:55] <candide> fizzie:  x = struct { long long __max_align_ll; long double __max_align_ld; }
[14:13:12] <sham1> Interesting
[14:13:14] <fizzie> Just a consequence of the way it's been implemented, I'd say.
[14:13:22] <fizzie> (Kind of wondering why it's not a union type though.)
[14:13:22] <sham1> I suppose
[14:15:37] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:15:37] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[14:15:54] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:16:03] *** Joins: kl1n3 (~freedom0@libera/staff/kline)
[14:16:04] *** Joins: subvisor_ (sid502026@id-502026.helmsley.irccloud.com)
[14:16:14] *** Joins: Mars (~None@2a01:4f8:192:23d0::1be4:a)
[14:16:17] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[14:16:28] *** Joins: cosimone` (~user@93-47-231-100.ip115.fastwebnet.it)
[14:16:29] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: subvisor (sid502026@2a03:5180:f:1::7:a90a) (Ping timeout: 250 seconds)
[14:16:29] *** subvisor_ is now known as subvisor
[14:16:30] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[14:16:34] *** Joins: wangledorf_ (sid505185@ilkley.irccloud.com)
[14:16:44] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[14:16:52] *** Joins: lowin_ (~lowin@user/lowin)
[14:16:55] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Riviera (Riviera@user/riviera) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: danieln (~danieln@erebor.danieln.de) (Ping timeout: 250 seconds)
[14:16:59] *** Mars is now known as Twix
[14:17:21] *** Quits: sdk_ (~x@shell.codevoid.de) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: vt (~vt@osa.vbc.su) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Akawama[m] (~akawama@user/akawama) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: baloona (~baloona@mail.baloona.de) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: lowin (~lowin@user/lowin) (Ping timeout: 250 seconds)
[14:17:28] *** Joins: SoniEx2 (~quassel@autistic.space)
[14:17:30] *** Joins: vassili (~vt@osa.vbc.su)
[14:17:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[14:18:30] *** Joins: baloona (~baloona@mail.baloona.de)
[14:18:40] *** Joins: de-facto_ (~de-facto@user/de-facto)
[14:18:41] *** Joins: sdk_ (~x@shell.codevoid.de)
[14:18:58] *** Joins: danieln (~danieln@erebor.danieln.de)
[14:19:24] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[14:19:39] *** Quits: beneth (~beneth@ip208.ip-54-36-198.eu) (Ping timeout: 256 seconds)
[14:19:45] *** Joins: seninha (~seninha@user/seninha)
[14:20:09] *** Parts: pingpongball (~pingpongb@43.228.192.117) ()
[14:20:46] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:20:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[14:21:21] *** Quits: marlboro (~i.am@user/marlboro) (Ping timeout: 256 seconds)
[14:21:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:21:45] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[14:21:51] *** Joins: marlboro (~i.am@177.96.143.233)
[14:21:51] *** Quits: marlboro (~i.am@177.96.143.233) (Changing host)
[14:21:51] *** Joins: marlboro (~i.am@user/marlboro)
[14:22:00] *** de-facto_ is now known as de-facto
[14:22:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:22:59] *** Quits: kline (~freedom0@libera/staff/kline) (Ping timeout: 612 seconds)
[14:23:18] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[14:23:20] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:dc45:b0f2:dcaf:861e)
[14:23:40] *** Byzantine__ is now known as Byzantine
[14:24:11] *** Joins: beneth (~beneth@2001:41d0:c:a71:1000:25::)
[14:24:38] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[14:24:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:25:42] *** Joins: Guest73 (~Guest73@nat.poli.hu)
[14:25:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Client Quit)
[14:26:49] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:26:52] *** Joins: lispy (~lispy@user/lispy)
[14:29:03] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 268 seconds)
[14:29:16] *** Joins: Riviera (Riviera@user/riviera)
[14:29:29] *** Joins: joev1 (~joev@user/joev)
[14:30:04] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[14:30:25] *** Quits: Guest73 (~Guest73@nat.poli.hu) (Quit: Client closed)
[14:30:38] *** Quits: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:31:54] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:32:13] *** Joins: Akawama[m] (~akawama@user/akawama)
[14:32:18] *** Joins: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu)
[14:32:28] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[14:33:46] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[14:34:02] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:12] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[14:34:35] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:41] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 250 seconds)
[14:35:48] *** Joins: joev1 (~joev@user/joev)
[14:38:26] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[14:40:38] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[14:43:40] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[14:45:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:50:28] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:57:37] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:dc45:b0f2:dcaf:861e) (Remote host closed the connection)
[14:58:33] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[14:58:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[14:58:55] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[15:00:01] *** Quits: myth (~myth@173.233.125.203) (Read error: No route to host)
[15:01:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[15:01:07] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 250 seconds)
[15:01:53] *** Joins: joev1 (~joev@user/joev)
[15:03:35] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: james[m]1 (~jamesjame@2001:470:69fc:105::1:5aa1) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: hussam (~hussam@user/hussam) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Akawama[m] (~akawama@user/akawama) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Quit: Bridge terminating on SIGTERM)
[15:03:43] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Bridge terminating on SIGTERM)
[15:07:02] *** Joins: zhiayang_ (~zhiayang@user/zhiayang)
[15:07:15] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[15:07:49] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 256 seconds)
[15:07:49] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:07:49] *** zhiayang_ is now known as zhiayang
[15:08:15] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:09:12] *** Joins: joev1 (~joev@user/joev)
[15:10:59] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 268 seconds)
[15:11:31] *** Joins: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21)
[15:13:24] *** ironman_ is now known as ironman
[15:13:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[15:14:40] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:15:41] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:16:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:85ab:562:f728:2658)
[15:17:42] *** Quits: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21) (Read error: Connection reset by peer)
[15:17:49] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:21:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:22:46] *** Joins: defiant (~defiant@user/defiant)
[15:30:00] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:08] *** Joins: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21)
[15:32:43] *** Quits: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21) (Remote host closed the connection)
[15:34:25] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 268 seconds)
[15:34:39] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[15:35:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:35:40] *** Joins: kish` (~aqua@user/aqua)
[15:35:59] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:25] *** Joins: kish` (~aqua@user/aqua)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:32] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:37:24] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[15:38:36] *** Joins: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21)
[15:39:17] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[15:39:28] *** Joins: manjaroi3 (~manjaro-i@218.233.99.3)
[15:39:43] *** Joins: System_Error (~SystemErr@user/systemerror)
[15:39:44] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[15:39:57] *** Joins: |7| (~seachdamh@user/seachdamh)
[15:40:31] *** Quits: lispy (~lispy@user/lispy) (Remote host closed the connection)
[15:41:49] *** Quits: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net) (Ping timeout: 256 seconds)
[15:41:59] *** Joins: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net)
[15:47:54] *** Joins: kts (~kts@103.73.237.89)
[15:48:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:54:15] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[15:57:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:58:21] *** Joins: random-nick (~random-ni@87.116.181.150)
[16:00:13] *** Quits: p0g0 (~p0g0@23.252.182.13) (Quit: p0g0)
[16:02:11] *** Joins: p0g0 (~p0g0@23.252.182.13)
[16:02:24] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:03:34] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[16:03:42] *** Quits: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21) (Quit: Client limit exceeded: 20000)
[16:05:21] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[16:06:08] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:07:00] *** Quits: martial_cc (~martial_c@45.77.152.43) (Quit: WeeChat 3.2.1)
[16:08:27] *** Quits: imm__ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[16:08:53] *** Joins: Byzantine__ (~Byzantine@2a02:1388:95:5547:dc45:b0f2:dcaf:861e)
[16:08:55] *** Joins: System_Error (~SystemErr@user/systemerror)
[16:08:57] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 268 seconds)
[16:09:57] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[16:10:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[16:10:46] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:10:48] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[16:10:48] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[16:10:49] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[16:10:49] *** Joins: hussam (~hussam@user/hussam)
[16:10:49] *** Joins: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1)
[16:10:49] *** Joins: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718)
[16:10:49] *** Joins: psydroid (~psydroid@user/psydroid)
[16:10:49] *** Joins: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1)
[16:10:49] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[16:10:49] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[16:10:49] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:10:49] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[16:10:49] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[16:10:49] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[16:10:49] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[16:10:49] *** Joins: jinsun_ (~jinsun@user/jinsun)
[16:10:49] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[16:10:49] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[16:10:49] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[16:10:49] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[16:10:49] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[16:10:49] *** Joins: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e)
[16:10:49] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[16:10:49] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[16:10:49] *** Joins: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530)
[16:10:49] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[16:10:50] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[16:10:50] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[16:10:50] *** Joins: Akawama[m] (~akawama@user/akawama)
[16:10:50] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[16:10:50] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[16:10:50] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[16:10:50] *** Joins: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e)
[16:10:50] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[16:11:01] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[16:11:01] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[16:11:01] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[16:11:01] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[16:11:01] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[16:11:01] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[16:11:01] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[16:11:01] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[16:11:09] <FH_thecat> what is the simplest way in c to check whether file has immutable attribute set ?
[16:11:10] *** Joins: ElliotAlderson[m (~elliotal_@2001:470:69fc:105::bb21)
[16:11:14] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Client limit exceeded: 20000)
[16:11:36] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[16:11:41] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Client limit exceeded: 20000)
[16:12:00] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:12:10] <sham1> FH_thecat: stat, probably
[16:12:13] <sham1> Well, fstat
[16:12:27] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[16:12:27] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[16:12:28] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[16:13:42] <sham1> Or look at what chattr does
[16:14:34] *** Quits: blackbeard420_ (~blackbear@45.33.85.133) (Remote host closed the connection)
[16:14:45] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[16:14:59] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Client limit exceeded: 20000)
[16:15:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:15:12] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:16:56] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Quit: Client limit exceeded: 20000)
[16:16:59] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Quit: Client limit exceeded: 20000)
[16:17:10] *** Joins: osp (~osp@84.19.72.107)
[16:17:28] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Quit: Client limit exceeded: 20000)
[16:17:34] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[16:21:23] <FH_thecat> sham1: stat does not seem to list extended attributes
[16:21:26] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[16:21:26] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[16:21:26] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[16:21:26] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[16:21:26] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[16:21:28] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (Quit: Client limit exceeded: 20000)
[16:23:08] *** Joins: bohdan-tymkiv (~bohdan-ty@178.136.237.111)
[16:23:28] *** Quits: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530) (Quit: Client limit exceeded: 20000)
[16:23:45] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 268 seconds)
[16:24:31] <clarity> statx
[16:24:47] *** Joins: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1)
[16:24:58] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (Quit: Client limit exceeded: 20000)
[16:24:59] *** Joins: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530)
[16:25:11] *** Joins: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e)
[16:25:15] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:25:28] *** Joins: joev1 (~joev@user/joev)
[16:26:28] <baltazar> hi! do you know if there's some linux api that allows me to accurately measure when the individual bytes arrive over a serial terminal?
[16:27:35] <clarity> I don't believe so
[16:27:43] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[16:28:45] <clarity> I think the best you can do without kernel hacking is to dedicate a high priority process to reading from the tty
[16:28:57] <clarity> With kernel hacking you may be able to add timestamps
[16:29:09] <clarity> Still doesn't fix any imprecision due to fifo buffering
[16:29:59] *** Quits: wangledorf_ (sid505185@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[16:29:59] <clarity> For anything truly precise you need realtime access to the uart
[16:30:21] <baltazar> real shame
[16:30:26] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.120)
[16:31:50] *** Joins: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com)
[16:32:36] *** Joins: badsektor (~badsektor@user/badsektor)
[16:33:24] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:33:36] *** Joins: inlight (~inlight@157.35.83.140)
[16:33:36] *** Quits: inlight (~inlight@157.35.83.140) (Changing host)
[16:33:36] *** Joins: inlight (~inlight@user/inlight)
[16:34:32] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[16:36:31] *** Quits: Byzantine__ (~Byzantine@2a02:1388:95:5547:dc45:b0f2:dcaf:861e) (Remote host closed the connection)
[16:36:59] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[16:40:04] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.120) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[16:42:51] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Client limit exceeded: 20000)
[16:42:53] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[16:44:04] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[16:44:30] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:44:36] *** Joins: pulse (~pulse@user/pulse)
[16:45:25] *** Joins: kaph (~kaph@151.37.72.8)
[16:46:00] *** Joins: jjido (~Denis@94.4.149.217)
[16:46:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:50:34] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[16:50:57] *** Quits: ekathva (~ekathva@2001:999:51:be01:f430:4edc:7521:6563) (Remote host closed the connection)
[16:50:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:51:10] *** Joins: ekathva (~ekathva@2001:999:51:be01:fca5:59f2:6173:4a62)
[16:51:41] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[16:53:42] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea)
[16:54:11] *** dogbert_22 is now known as dogbert2
[16:55:40] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[16:56:10] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:59:11] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 250 seconds)
[17:00:47] *** Quits: hinata (~hinata@2409:4042:2e90:d98d:b902:8225:403a:3177) (Quit: Leaving)
[17:01:25] *** Joins: kaph_ (~kaph@151.35.35.178)
[17:01:38] *** Quits: kts (~kts@103.73.237.89) (Quit: Konversation terminated!)
[17:01:39] *** Quits: kaph (~kaph@151.37.72.8) (Read error: Connection reset by peer)
[17:02:02] *** Joins: somlis (~somlis@user/somlis)
[17:02:36] *** Quits: vboykox (~user@25-49-134-95.pool.ukrtel.net) (Ping timeout: 268 seconds)
[17:02:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:03:16] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[17:03:43] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:03:44] *** Joins: seninha (~seninha@user/seninha)
[17:03:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[17:03:58] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea) (Ping timeout: 260 seconds)
[17:04:27] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[17:05:20] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[17:05:35] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea)
[17:07:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:07:39] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[17:09:49] *** Quits: kaph_ (~kaph@151.35.35.178) (Remote host closed the connection)
[17:09:59] *** joev1 is now known as joev
[17:10:05] *** Joins: kaph (~kaph@151.35.35.178)
[17:12:06] *** Joins: Isthmusi (~Isthmus@user/isveni)
[17:12:08] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:12:46] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Quit: Leaving)
[17:13:20] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:14:00] *** Joins: vboykox (~user@95.134.49.25)
[17:15:46] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:15:57] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.29)
[17:16:02] *** Quits: kaph (~kaph@151.35.35.178) (Read error: Connection reset by peer)
[17:16:36] *** BSaboia_ is now known as BSaboia
[17:18:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:18:17] *** Quits: cosimone` (~user@93-47-231-100.ip115.fastwebnet.it) (Ping timeout: 240 seconds)
[17:19:59] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea) (Ping timeout: 250 seconds)
[17:20:38] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[17:20:40] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[17:21:30] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4)
[17:21:47] *** Quits: alch (~alch@to-18-72-101.service.infuturo.it) (Read error: Connection reset by peer)
[17:21:54] *** Joins: Darkcoal (~user@167.86.178.227)
[17:24:51] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:25:11] *** Quits: ekathva (~ekathva@2001:999:51:be01:fca5:59f2:6173:4a62) (Ping timeout: 250 seconds)
[17:26:03] *** Joins: alch (~alch@to-18-93-50.service.infuturo.it)
[17:26:44] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[17:27:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[17:28:20] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[17:29:40] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:33:52] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:35:47] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.125)
[17:35:51] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Quit: oof.)
[17:36:42] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[17:36:43] *** Joins: immibis (~hexchat@62.156.144.218)
[17:37:01] *** Quits: mikeross (~mikeross@165.225.196.93) (Quit: Client closed)
[17:37:25] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.29) (Ping timeout: 256 seconds)
[17:38:03] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:38:59] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[17:39:36] *** Joins: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63)
[17:39:41] *** Quits: vboykox (~user@95.134.49.25) (Ping timeout: 256 seconds)
[17:40:29] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[17:40:56] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[17:41:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:41:42] *** Joins: ekathva (~ekathva@2001:999:51:be01:35a5:6efe:4821:a5c8)
[17:42:10] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:42:29] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[17:47:54] *** A_Dragon is now known as NotAFurry
[17:48:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:24] *** Quits: bohdan-tymkiv (~bohdan-ty@178.136.237.111) (Ping timeout: 256 seconds)
[17:49:07] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:49:29] *** Quits: Trashlord (~trash@user/trashlord) (Remote host closed the connection)
[17:49:37] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 240 seconds)
[17:50:03] *** Joins: EtherNet (~ethernet@user/ethernet)
[17:51:00] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 250 seconds)
[17:51:12] *** Quits: nathanael (~nathanael@user/nathanael) (Quit: connection reset by purr)
[17:52:01] *** Joins: nathanael (~nathanael@user/nathanael)
[17:52:07] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:53:10] *** Quits: soapsudsxx_ (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[17:53:14] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[17:53:47] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.125) (Ping timeout: 250 seconds)
[17:54:08] *** Joins: fwg (~fwg@user/fwg)
[17:54:16] *** Joins: bohdan-tymkiv (~bohdan-ty@178.136.237.111)
[17:54:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:54:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:54:28] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:53] *** NotAFurry is now known as A_Dragon
[17:55:12] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[17:55:33] *** Joins: krzych (krzych@nroot.pl)
[17:59:00] *** Quits: symb0l (~symb0l@user/symb0l) (Read error: Connection reset by peer)
[18:01:02] *** Joins: symb0l (~symb0l@user/symb0l)
[18:01:41] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[18:04:11] *** Joins: bron (~bonsairoo@84.238.78.83.dynamic.wline.res.cust.swisscom.ch)
[18:09:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:09:52] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[18:10:10] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[18:15:14] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[18:19:14] *** kl1n3 is now known as kline
[18:21:58] <teroshan> eBPF may be useful for that kind of measuring, but you still need to look into the low-level functions that are used
[18:24:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:27:34] *** Joins: APic (~apic@apic.name)
[18:31:08] *** Joins: mahmutov_ (~mahmutov@37.155.94.193)
[18:31:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[18:32:06] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:32:27] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:32:44] <bron> I have a variable number of arrays of varying types and want to execute a function on n elements of each of those arrays at a certain point. Is there a way to somehow keep track of their addresses so that I can loop over them and execute my function on a subset of their elements (I also need to know the type)? I thought about defining a struct X which keeps track of the array type and has a void pointer to the data. I would
[18:32:44] <bron> then create a X *collection to keep track of my arrays. Does that sound reasonable?
[18:33:33] *** Joins: jkotra9 (~jkotra@223.230.91.108)
[18:33:38] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[18:33:38] *** jkotra9 is now known as jkotra
[18:34:56] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 245 seconds)
[18:36:18] <pragma-> NRK[m]: reminder that your name is "NRK[m]" and not "nrk" (regarding the ,recall command)
[18:37:14] <pragma-> Uppercase vs lowercase doesn't matter, but the "[m]" bit does matter.
[18:40:22] *** Joins: hlauk (~hlauk@176.33.108.116)
[18:40:55] <pragma-> caze: hmm
[18:40:59] <pragma-> (gdb) print strncmp("apple", "app", 3)
[18:41:00] <pragma-> /build/gdb-uLkn2n/gdb-11.1/gdb/elfread.c:1016: internal-error: void elf_gnu_ifunc_resolver_return_stop(breakpoint*): Assertion `b->loc->next == NULL' failed.
[18:41:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[18:41:04] * pragma- shrugs.
[18:41:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:42:18] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Remote host closed the connection)
[18:42:27] *** Joins: nvmd (~weechat@user/nvmd)
[18:44:11] <pragma-> Almost without fail, every time I upgrade candide's virtual machine, there is something that breaks.
[18:44:53] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:45:04] <pragma-> But this isn't even in candide's virtual machine. I tested this on my local machine.
[18:45:08] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[18:46:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:47:37] *** Joins: frostygoth_ (~frostygot@104-186-97-153.lightspeed.wchtks.sbcglobal.net)
[18:49:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:49:09] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:49:45] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[18:50:31] *** Quits: frostygoth (~frostygot@li1566-163.members.linode.com) (Ping timeout: 256 seconds)
[18:51:50] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[18:52:04] *** Joins: JanC (~janc@user/janc)
[18:52:06] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[18:53:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[18:54:52] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:59:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:59:39] *** Quits: mahmutov_ (~mahmutov@37.155.94.193) (Ping timeout: 250 seconds)
[19:01:14] *** Joins: Torr (~Torr@user/torr)
[19:02:36] *** Quits: hlauk (~hlauk@176.33.108.116) (Quit: Leaving)
[19:02:41] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[19:04:11] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:12:43] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[19:15:30] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 250 seconds)
[19:19:41] <fizzie> Good old GNU_IFUNC.
[19:19:42] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[19:23:02] <MrMobius> trying to understand setjmp/longjmp and it isn't working like I expect. it does steps 1 through 8 over and over then seg faults rather than steps 1 through 10 and exiting. any ideas? https://paste-bin.xyz/35922
[19:24:14] *** Joins: mahmutov_ (~mahmutov@37.155.27.205)
[19:25:16] <fizzie> Without actually walking through that; it's not defined to `longjmp` using a jmp_buf where the function containing its corresponding `setjmp` has already returned. Going from step 6 to step 7 is an invalid operation.
[19:25:17] <ChoHag> You can't jump up the stack, only down.
[19:25:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:25:19] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:26:03] <ChoHag> After 8 foo's bytecode will tell the cpu to return but the stack frame telling it where to return to has been lost.
[19:26:05] <fizzie> Heh, I'd have the "up" and "down" directions the exact opposite.
[19:26:49] <ChoHag> The setjmp after 6 works but it shouldn't.
[19:27:09] <MrMobius> ya maybe it's the returning to the child function that's messing things up though the wikipedia page says that most implementations allow it
[19:27:10] <ChoHag> It's like the hokey kokey.
[19:27:17] <ChoHag> In, out, in, out, shake it all about.
[19:27:28] <ChoHag> Either way it all falls down.
[19:27:49] *** Joins: zwr (~zwr@2804:d45:b966:fb00:62a1:9ee5:c9ff:a3df)
[19:28:29] <ChoHag> Evidently not.
[19:28:35] *** Joins: Fairy (~Fairy@2001:464a:4992:0:a98e:f0a9:78ea:918e)
[19:29:07] *** Joins: Akiva (~Akiva@user/Akiva)
[19:29:12] *** Joins: pyook (~pyook@user/puke)
[19:29:47] <MrMobius> ChoHag, how do you mean the stack frame telling where to return is lost after step 8? ignoring the issue of re-entering foo, i thought the stack would look like it did on 10 where it's in foo and nothing with longjmp has happened
[19:30:13] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:30:15] <ChoHag> The frame is lost long before then, after step 8 is when the cpu tries to access it.
[19:30:17] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[19:30:23] *** Quits: bron (~bonsairoo@84.238.78.83.dynamic.wline.res.cust.swisscom.ch) (Quit: Leaving)
[19:30:25] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[19:30:31] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[19:30:37] *** Joins: bindu (~bindu@user/bindu)
[19:30:41] <fizzie> The Wikipedia example is pretty careful not to actually *return* from `child`, which probably has an impact on it "working".
[19:30:42] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[19:31:17] <ChoHag> Hmm yes you could probably jump into a more recent function provided you didn't use any stack variables and jumped back out again.
[19:32:53] <MrMobius> ya practically i could longjmp out instead of letting it exit naturally. is it lost because the setjmp on line 41 uses the stack?
[19:32:57] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[19:33:36] <ChoHag> It's lost as soon as main does anything really.
[19:33:37] *** Quits: remedan (~remedan@octo.cafe) (Ping timeout: 240 seconds)
[19:33:48] *** Joins: kts (~kts@103.73.237.82)
[19:33:50] <fizzie> The `printf` functions from main (between steps 4..7) sound pretty likely to also scribble over at least the return address you'd need to ever reach 9.
[19:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:35:58] <MrMobius> ahh. thanks
[19:36:53] *** Joins: remedan (~remedan@octo.cafe)
[19:40:02] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[19:40:46] *** Quits: zwr (~zwr@2804:d45:b966:fb00:62a1:9ee5:c9ff:a3df) (Ping timeout: 245 seconds)
[19:41:09] <NRK[m]> pragma-: i think i need to figure out how to get rid of the "[m]" bit off my naem
[19:41:10] <NRK[m]> don't want to appear as an array
[19:41:11] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:41:34] <NRK[m]> ,recall NRK[m] avx
[19:41:35] <candide> [5h30m ago] <N﻿RK[m]> excluding avx512 :)
[19:41:42] *** Joins: zwr (~zwr@2804:d45:b966:fb00:35ea:d66c:6406:325c)
[19:43:24] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[19:44:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4)
[19:44:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4) (Changing host)
[19:44:00] *** Joins: skapata (~Skapata@user/skapata)
[19:45:12] *** Joins: Satin (uid193953@user/Seten)
[19:45:48] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:47:35] <nomagno> If you can see this message, please answer. I'm going insane thinking there's some breakage with my connection
[19:49:28] <sham1> nomagno: foo
[19:49:51] <sham1> NRK[m]: you could also use the Matrix-to-IRC bridge to get rid of it
[19:53:08] *** Joins: Guest48 (~Guest48@196.196.216.208)
[19:53:36] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:54:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[19:56:27] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:56:43] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:57:13] <pflanze> Does anyone have a preferred name for a helper macro (for writing macros) that makes an identifier unique, or "hygienic"?
[19:57:18] *** Quits: Guest48 (~Guest48@196.196.216.208) (Quit: Client closed)
[19:57:36] <pflanze> (by way of appending __LINE__ or something)
[19:58:10] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:58:45] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[19:58:51] *** Joins: kuber (~kuber@75-172-24-205.tukw.qwest.net)
[19:59:52] <pflanze> I.e. to be used like in: #define FOO(expr) { int UNIQUE(v) = (expr); ... }
[20:00:08] *** Joins: eddybilley (~freddieti@217.119.232.174)
[20:02:10] *** Quits: fe23 (~fe23@2409:8a34:477:2010:b087:870c:5eab:60a6) (Quit: fe23)
[20:02:15] <pflanze> (Or more to the point something like (now expr2 is exposed to the variable v): #define FOO(expr1, expr2) { int UNIQUE(v) = (expr1); expr2; cleanup(v); } )
[20:03:32] *** Joins: silkworks (~silkworks@ctrl-c.club)
[20:04:17] *** Joins: kts_ (~kts@103.73.237.158)
[20:04:45] *** Quits: kts (~kts@103.73.237.82) (Ping timeout: 256 seconds)
[20:04:56] *** Quits: bohdan-tymkiv (~bohdan-ty@178.136.237.111) (Ping timeout: 245 seconds)
[20:05:47] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[20:06:06] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[20:12:42] *** Quits: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63) (Ping timeout: 250 seconds)
[20:12:50] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[20:16:11] <fizzie> `GENSYM()` is a traditional name, mostly in the Lisp context but who's to say it couldn't be used more broadly too.
[20:16:39] *** Quits: Satin (uid193953@user/Seten) (Quit: afk)
[20:17:26] <NRK[m]> sham1: pretty sure that's what im using?
[20:17:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:26] <pflanze> fizzie, that was my first impulse, but in Lisp you have to keep that symbol around, if you use GENSYM multiple times in the same macro it will not be accessing the same symbol.
[20:19:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[20:19:42] <pflanze> Whereas in CPP there are no meta variables, or more to the point, it is pure, so there's no "generate".
[20:20:29] <sham1> NRK[m]: well if you do, you haven't configured it. You'd look at @appservice:libera.chat to set the nick on the IRC side
[20:20:52] <pflanze> Also people usually(?) don't know lisp. But maybe that's actually a plus; one can probably still guess from GENSYM what it does?
[20:21:32] <sham1> Well you can have the GENSYM give you the same symbol. Of course, they're uninterned so why would you
[20:21:33] <pflanze> (Anyway, I wanted to know what other code bases use.)
[20:22:19] <pflanze> sham1, yes, so GENSYM may make more sense for a non-lisper. For a lisper it just looks wrong.
[20:23:06] <pflanze> If you see a macro in Lisp like `(let (,(gensym 'v) ,e) ... ,(gensym 'v)) you know it's wrong.
[20:23:07] <CodeAgain> What could be possible reasons for a code to declare extern variables on the same codebase rather than including them in a header?
[20:24:18] <pflanze> CodeAgain, you can only define a global variable once, so it must put into a .c file, but if you want to access it from other modules, you have to declare it in the header file, as extern.
[20:25:19] <CodeAgain> Ohhh, I see, they are global indeed, thanks pflanze
[20:26:09] <pflanze> np
[20:28:39] <CodeAgain> Ohhh, just another question occurred to me... Why I mostly see variables used as parsed cmdline options as static? (those are the same variables of the other question, by the way)
[20:29:17] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:32:13] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[20:34:06] *** Joins: zacts (~zacts@user/zacts)
[20:34:43] *** Joins: meator (~meator@user/meator)
[20:36:43] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 250 seconds)
[20:39:49] *** Joins: carlavilla (~carlavill@188.26.219.45)
[20:40:03] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.75)
[20:40:45] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:41:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:42:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:42:45] <pflanze> CodeAgain, static means, it doesn't get a symbol table entry. Thus, multiple .c files can define a global variable with the same name, as long as declared static, they won't conflict at link time·
[20:43:34] <pflanze> But those you can't put into a header as 'extern'. The linker would complain about missing them.
[20:45:47] <pflanze> For a description of static and extern (as well as auto and register), see https://en.cppreference.com/w/c/language/storage_duration
[20:45:48] <candide> Title of pflanze's link: Storage-class specifiers - cppreference.com
[20:46:33] *** Joins: meator (~meator@user/meator)
[20:46:50] *** Joins: strajder (~strajder@user/strajder)
[20:48:41] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.75) (Ping timeout: 245 seconds)
[20:48:55] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[20:49:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[20:49:34] *** Joins: jancoow (~jancoow@user/jancoow)
[20:50:30] *** Quits: kuber (~kuber@75-172-24-205.tukw.qwest.net) (Quit: leaving)
[20:50:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:51:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:51:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:51:44] *** Joins: wroathe (~wroathe@user/wroathe)
[20:53:17] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:53:20] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:55:12] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[20:55:29] *** Joins: crashrep (~crashrep@user/crashrep)
[20:56:39] <libh> I learned that global variables are allocated when the program starts and is fixed. And also that global variables are stored in a separate area of memory. Does this mean using global variables can be a waste of memory?
[20:56:53] *** Quits: TommyC (~TommyC@user/tommyc) (Ping timeout: 256 seconds)
[20:57:00] <CodeAgain> thanks a lot again, pflanze
[20:57:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:57:08] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:57:18] <CodeAgain> And great link
[20:57:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:57:59] *** Joins: Akuli (~Akuli@82-203-166-135.bb.dnainternet.fi)
[20:59:01] <Thedarkb-Desktop> I mean, yeah, the space for them doesn't appear out of thin air.
[20:59:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:59:04] <nitrix> libh, There is no such thing as completely global variables. File-scope is the largest scope and you have to use extern storage class to have variables different translation units coincide with each others.
[20:59:45] *** Joins: inlight (~inlight@157.35.19.27)
[20:59:45] *** Quits: inlight (~inlight@157.35.19.27) (Changing host)
[20:59:45] *** Joins: inlight (~inlight@user/inlight)
[21:00:22] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[21:00:32] <fizzie> pflanze: There's (nonstandard) __COUNTER__, which when used with GENSYM() works pretty much exactly in the "expected" way.
[21:00:49] <nitrix> libh, Also, there are 4 storage durations, static, automatic, allocated and thread. So sentences like saying that a static variable is "allocated" is instantly erroneous.
[21:01:09] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:01:28] *** Joins: bingulo (~carlos@2804:431:e7c8:b11e:ec5a:2fe7:d48c:fd63)
[21:01:42] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:01:50] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[21:02:11] <libh> Is it really a bad idea to have global variables at all? I've seen opinions range from be careful to global variables are worse than hitler, so what's the truth?
[21:02:38] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:02:43] <fizzie> ,cc #define CAT(x,y) CAT_(x,y) \n #define CAT_(x,y) x##y \n #define GENSYM() CAT(gen__,__COUNTER__) \n #define SILLY_MACRO(x) SILLY_MACRO_(x, GENSYM()) \n #define SILLY_MACRO_(x, var) do { int var = (x); printf("%d", var); } while (0) \n SILLY_MACRO(123);
[21:02:47] <candide> fizzie: 123
[21:02:57] <fizzie> ,expand #define CAT(x,y) CAT_(x,y) \n #define CAT_(x,y) x##y \n #define GENSYM() CAT(gen__,__COUNTER__) \n #define SILLY_MACRO(x) SILLY_MACRO_(x, GENSYM()) \n #define SILLY_MACRO_(x, var) do { int var = (x); printf("%d", var); } while (0) \n SILLY_MACRO(123);
[21:02:57] <candide> fizzie:  do { int gen__0 = (123); printf("%d" , gen__0); } while (0);
[21:03:07] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:04:40] <nitrix> libh, The Standard doesn't mention hitler.
[21:04:55] <nitrix> libh, That's the truth.
[21:05:00] *** Joins: Sadale (~Sadale@user/sadale)
[21:05:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:05:57] <pflanze> libh, "global variable" means it's always available for the duration for the program, hence, space needs to remain allocated; thus no, if you *do* need a global variable, their space allocation is not waste.
[21:06:31] <pflanze> Of course if you don't need it for the whole duration of a program, then it might be waste, but then you shouldn't use a global variable for it.
[21:06:36] <zwr> libh: indiscriminate use of them is bad
[21:06:42] <zwr> but don't shun them if they make life easier
[21:06:44] <nitrix> Objects with static storage duration lives for the duration of the program. There are no global variables.
[21:07:20] <nitrix> Static storage isn't allocated, allocated storage is its own storage duration.
[21:07:24] *** Joins: bick (~kotaman@94.46.203.147)
[21:08:04] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[21:08:36] <zwr> there are lots of BSD utilities out there that stick all their option flags into file scope identifiers, often with external linkage, and it works okay
[21:09:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:10:17] <NRK[m]> libh: i always prefer function argument over globals. but that doesn't always work and there's no point in forcing it.
[21:10:23] <pflanze> libh, mutation leads to spaghetti data flow, individual variables passed around the whole program leads to spaghetti access, combine the two and you've got something that you better eat than understand.
[21:10:24] *** Joins: magla (~gelignite@55d4daf5.access.ecotel.net)
[21:10:35] <NRK[m]> sham1: i'll look into that, thanks.
[21:11:11] *** Joins: Sadale (~Sadale@user/sadale)
[21:11:15] *** NRK[m] is now known as NRK
[21:11:22] <pflanze> (*try to understand)
[21:11:44] <libh> I'll remember two things: 1. Do not use global variables if such a need is not necessary. And 2. Make sure to make a global variable as const so it can't be changed by the program.
[21:11:52] *** Joins: nevdudd (~nevdudd@156.34.172.113)
[21:12:20] <NRK> const globals are OK
[21:13:28] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[21:13:43] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[21:13:55] <nitrix> C doesn't have global variables.
[21:13:58] <NRK> also, if you have something where only one function is doing the writing then you can also just export a const pointer instead.
[21:14:07] <NRK> which i think is also Ok
[21:14:25] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[21:14:34] <pflanze> nitrix, I'm not exactly sure what your point is
[21:14:44] <NRK> yes, pedantically it's "file scope".
[21:14:48] <libh> Let me ask you, if I outside of a function make a structure, is that also "global" (Putting quotes because I'm getting told C doesn't have global data)?
[21:14:59] <nitrix> pflanze, You're all arguing about something that C doesn't have.
[21:15:03] <NRK> but people just usually all them global. /shrug
[21:15:19] <NRK> s/all/call
[21:16:20] <nevdudd> hello, i am attempting to code something that outputs a stream of characters to stdout, but at the same time accepts input from the user (stdin) - i have it working, but when a lot of lines of characters are streaming by you cannot keep track (visually) of what you typed - i want there to be a static line at the bottom of the console that doesn't
[21:16:20] <nevdudd> change so i can see what im inputting into the program
[21:16:29] <nevdudd> can anyone point me in the right direction perhaps?
[21:16:51] <pflanze> nitrix, if you've got a variable, that you can access from the whole program wherever you include the corresponding extern declaration, how is that not a globally accessible variable?
[21:17:35] <pflanze> nitrix, or where (or for what reason) do you draw a distinction from other languages?
[21:17:37] *** Joins: Sadale (~Sadale@user/sadale)
[21:17:50] <pflanze> nitrix, other than in the implementation details
[21:18:02] <NRK> libh: what exactly do you mean by "make a structure" ?
[21:18:04] <nitrix> pflanze, The variable is defined for a single translation unit, variables cannot have globally available definitions. The reason you're able to work with them from other translation units is precisely because you provide an extern declaration. That highlights that C doesn't have global variables.
[21:18:08] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:18:34] <pflanze> nitrix, so, what if I call that an implementation detail?
[21:18:59] <nitrix> pflanze, The translations phases are not an implementation detail.
[21:19:00] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 250 seconds)
[21:19:13] <nitrix> So I'd say you're wrong if you were to call it that.
[21:19:15] <libh> NRK, I mean what I said, If I made a struct outside of a function, is that "global"?
[21:20:12] <pflanze> nitrix, why do you think it's important to point that out? To the point of wanting people to not speak of "global variables"?
[21:20:19] *** Joins: chomwitt (~chomwitt@athedsl-02411.home.otenet.gr)
[21:20:31] <nitrix> The scope of variables and the visibility of symbols are also not implementation details.
[21:20:54] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net)
[21:20:59] <pflanze> "A detail of how C does it." Not, how the C compiler is implemented.
[21:21:50] <NRK> `struct template { int x; };` is this "making a structure" ? libh
[21:22:03] <nitrix> Here, "implementation" refers to the Standard's definition of an implementation.
[21:22:29] *** Joins: mingodad (~mingo@212.225.225.80)
[21:22:53] <nitrix> ,c11 3.12p1
[21:22:53] <candide> http://www.iso-9899.info/n1570.html#3.12p1 [Terms, definitions, and symbols] implementation particular set of software, running in a particular translation environment under particular control options, that performs translation of programs for, and supports execution of functions in, a particular execution environment
[21:23:06] <libh> https://paste.debian.net/hidden/924e9fe8/ This is what I mean by structure, NRK.
[21:23:18] <nitrix> All of those terms have proper definitions as well if you're wondering.
[21:23:24] <pflanze> nitrix, yes, so I used "implementation" in another way than the Standard. So I corrected it to "A detail of how C does it". Fine. Now back to the original question, why do you think it's important to not talk of such 'global variables' as "global variables"?
[21:23:44] *** Quits: alch (~alch@to-18-93-50.service.infuturo.it) (Ping timeout: 256 seconds)
[21:24:16] <pflanze> It's the first time I've come across someone with this approach; not saying yet it's wrong, either.
[21:24:45] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[21:24:55] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[21:24:59] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[21:25:03] <nitrix> It's just what we do on this channel. The topic is about C so people discuss C.
[21:25:09] <pflanze> Are there programming languages that *do* have global variables in your opinion?
[21:25:10] <nitrix> Global variables aren't C.
[21:25:21] *** Joins: alch (~alch@to-18-73-159.service.infuturo.it)
[21:26:04] <NRK> libh: you're not "making a structure", that's merely a "template"
[21:26:16] <NRK> there's no storage set aside for it
[21:26:39] <mingodad> I'm looking for someone to give feedback to my fixes to cyclone at https://github.com/mingodad/cyclone
[21:27:24] <nitrix> With a surface understanding of the language, you may be mislead to think that they look like global variables and be tempted to name them that, but with a more intimate understanding of scoping, storage durations, lifetime, symbol visibility and translation unit/phases, it becomes obvious that you cannot claim them that they are global in any sense of the word.
[21:27:54] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b)
[21:28:03] <nitrix> Variable identifiers aren't globally available in the common namespace, and the symbol isn't global available to other translation units either.
[21:28:53] <pflanze> But most languages have namespaces for functions and their "global variables", and yet they still talk of them as "global variables".
[21:29:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:29:30] <nitrix> If we were to just discuss namespaces, you'd be fairly surprised to know what they are in C.
[21:29:40] <pflanze> Maybe it's a misnomer, but at least that's the case globally in programming (pun not unintended).
[21:30:24] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[21:30:50] <pflanze> Surprised how? Confused.
[21:31:01] <nitrix> What do you think the name spaces are?
[21:31:34] <pflanze> I was talking about namespaces in other languages.
[21:32:03] *** Joins: TommyC (~TommyC@user/tommyc)
[21:32:38] <pflanze> If you export your symbol in C, it's not in a name space; unless you call "symbol table at link time in an object file", versus "symbol table at compile time in a compilation unit" as name spaces.
[21:32:58] <pflanze> So, I'm still confused about what you mean.
[21:33:00] <nitrix> Name spaces have nothing to do with symbols, for one.
[21:33:36] <pflanze> ?
[21:34:26] <pflanze> Maybe that's another case of how the standard defines terms, or what do you mean?
[21:34:49] <nitrix> I have a thing. I'll be back to you in 30 minutes.
[21:35:49] *** Joins: inlight_ (~thomas@157.35.19.27)
[21:35:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[21:36:09] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[21:38:09] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:38:20] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[21:38:24] *** Quits: inlight_ (~thomas@157.35.19.27) (Client Quit)
[21:39:43] *** Joins: Telvana (~capo@user/telvana)
[21:41:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:42:33] *** Joins: inlight (~thomas@157.35.19.27)
[21:42:33] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[21:42:33] *** Joins: inlight (~thomas@user/inlight)
[21:42:34] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[21:42:50] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:42:54] *** Joins: inlight (~thomas@157.35.19.27)
[21:42:54] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[21:42:54] *** Joins: inlight (~thomas@user/inlight)
[21:43:50] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[21:44:08] *** Joins: inlight (~thomas@157.35.19.27)
[21:44:08] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[21:44:08] *** Joins: inlight (~thomas@user/inlight)
[21:45:52] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[21:51:26] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[21:51:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:51:59] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 252 seconds)
[21:54:03] *** Joins: fwg (~fwg@user/fwg)
[21:58:04] *** Joins: shivesh (~shivesh@user/shivesh)
[22:02:01] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Remote host closed the connection)
[22:02:43] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[22:03:22] <nitrix> I'm back. So, one thing to know is that the same identifier can appear multiple time in a given translation unit and still refer to different entities.
[22:04:06] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[22:04:13] <nitrix> That's because the identifiers are name spaced. Label names, tag of structs/enums/unions, members of structs/unions and then everything else the "ordinary identifiers".
[22:04:53] *** Quits: houze (~houze@user/houze) (Quit: WeeChat 3.0.1)
[22:06:14] <nitrix> So that's one thing. Then you also have scoping: file, function, block and prototype. Notice that the greatest available scope here is file.
[22:08:00] <nitrix> Then you have the concept of linkage: external or internal, where symbols defined in a translation unit can be made publicly available to other translation units during linkage.
[22:08:43] <nitrix> That's achieved with a declaration (not the same as definition) to tell the other translation unit, and it's the very last translation phase that accomplishes this.
[22:09:00] *** Joins: inlight (~thomas@user/inlight)
[22:09:13] <nitrix> Semantically, the variable is defined is a single translation unit and not global by any stretch of the word.
[22:09:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:10:56] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:b45f:204a:668d:262b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:11:26] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[22:12:10] <nitrix> There's not anywhere in all this where the definition is "global", not in terms of scoping, or name spacing, or linkage.
[22:12:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b193:a8bc:ecae:fe3)
[22:14:47] *** Joins: inlight (~thomas@user/inlight)
[22:15:09] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:17:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:18:44] *** Joins: rgrinberg (~textual@187.223.115.137)
[22:22:51] <nitrix> pflanze, Of course, I'm not going to pretend I don't understand what you meant. I know that you can put the extern declaration in a header file and include that everywhere you need your "global variable"; what I'm disputing, though, is that what made it global is because you went through the trouble of including the header in all the translation units yourself. The variable was never global.
[22:29:48] *** Quits: nevdudd (~nevdudd@156.34.172.113) (Quit: Client closed)
[22:30:09] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[22:30:24] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[22:30:29] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[22:30:46] *** Joins: inlight (~thomas@157.35.19.27)
[22:30:46] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[22:30:46] *** Joins: inlight (~thomas@user/inlight)
[22:31:10] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[22:31:28] *** Joins: inlight (~thomas@157.35.19.27)
[22:31:28] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[22:31:28] *** Joins: inlight (~thomas@user/inlight)
[22:32:55] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-170-9be0cae1 - https://znc.in)
[22:38:29] *** Joins: inlight_ (~thomas@157.35.19.27)
[22:38:56] *** Quits: inlight_ (~thomas@157.35.19.27) (Client Quit)
[22:40:34] *** Joins: Nutte35 (~Nutte@202.153.81.130)
[22:40:42] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:41:35] <caze> pflanze: "Global" means visible everywhere. If you make the argument that you can make it available everywhere by including the declaration, then I can always add new code to your program where it isn't visible.
[22:41:56] <caze> pflanze: And then you can add the declaration to that.
[22:43:10] *** Joins: System_Error (~SystemErr@user/systemerror)
[22:43:20] <caze> pflanze: So it quickly becomes the game of, "The biggest number is 1,000,000 because that's all I ever need."
[22:43:31] *** Joins: Telvana (~capo@user/telvana)
[22:43:39] <caze> Until you add 1 to the biggest number.
[22:44:07] <caze> Which is always possible, just like adding new code where the "global variable" isn't in scope is always possible.
[22:45:07] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:17] <caze> A file scope variable can be useful as a "private variable" shared between two functions. So long as you don't care about threads.
[22:47:23] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:47:46] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[22:52:49] <nitrix> Just to highlight how the language can break you brain: the identifier with a file-scope can have a thread_local storage, causing it to have multiple variable instances, with their lifetimes tied to individual threads execution.
[22:52:52] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:59:30] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[23:00:11] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 252 seconds)
[23:00:28] *** Quits: rgrinberg (~textual@187.223.115.137) (Read error: Connection reset by peer)
[23:00:56] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[23:01:14] *** Joins: inlight (~thomas@157.35.19.27)
[23:01:14] *** Quits: inlight (~thomas@157.35.19.27) (Changing host)
[23:01:14] *** Joins: inlight (~thomas@user/inlight)
[23:01:32] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[23:01:36] *** Joins: vboykox (~user@95.134.49.25)
[23:02:19] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7019-992d-5c33-127.fixed6.kpn.net) (Ping timeout: 250 seconds)
[23:02:28] *** Joins: vicfred (~vicfred@user/vicfred)
[23:03:58] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:09:25] *** Joins: fwg (~fwg@user/fwg)
[23:10:41] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[23:11:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:12:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:13:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:14:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:15:16] *** Quits: Torr (~Torr@user/torr) ()
[23:17:02] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:17:44] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[23:18:10] *** Parts: g0z (gauze@entropy.tmok.com) ()
[23:19:03] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[23:22:21] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-98-113.mobile.abo.orange.fr)
[23:26:35] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-98-113.mobile.abo.orange.fr) (Ping timeout: 250 seconds)
[23:28:38] *** Parts: mingodad (~mingo@212.225.225.80) ()
[23:32:58] *** Joins: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41)
[23:34:38] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:43:13] *** Joins: bick (~kotaman@94.46.203.147)
[23:44:40] *** Joins: strajder (~strajder@user/strajder)
[23:44:47] *** Joins: krzych (krzych@nroot.pl)
[23:46:26] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[23:46:27] *** Quits: strajder (~strajder@user/strajder) (Client Quit)
[23:46:32] *** Joins: moog (~moog@107.126.53.56)
[23:46:48] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[23:47:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[23:47:35] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:47:36] <theseb> At the risk of stating the obvious i had an epiphany yesterday that "variable" = "key value pair" !!! if you think about it a variable actually represents TWO things....its name (the key) and what it is = to (the value) !!! they are the same thing! surprising?
[23:48:29] *** Joins: krzych (krzych@nroot.pl)
[23:49:43] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:49:56] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[23:53:56] *** Joins: bixo (~bixo@190.200.253.127)
[23:58:26] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
