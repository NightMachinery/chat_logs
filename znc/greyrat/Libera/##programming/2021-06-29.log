[00:00:04] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:01:53] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[00:02:21] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:19c1:bcfb:6169:5fdf)
[00:03:14] <pyzozord> interestingally log(n+m) != log(n) + log(m), so maybe that is telling something about the solution
[00:03:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:06:14] *** Joins: justinf210 (~justinf21@212.sub-174-204-10.myvzw.com)
[00:06:49] *** Joins: Pickchea (~private@user/pickchea)
[00:08:11] <pulse> isn't O(log(n + m)) literally the same as O(log(n))
[00:08:36] <pyzozord> pulse: no you can't drop m because it has no relation to n
[00:08:40] <kzootech> if m=0
[00:08:48] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:08:55] <pulse> but it's upper asymptotic boundary
[00:09:09] <pulse> and n is already upper boundary
[00:09:18] <pulse> log(n) *
[00:09:30] <pulse> idk maybe i'm wrong
[00:09:48] <pyzozord> well ok in academia yes, in the industry the big O notation has meaning closer to big θ
[00:10:28] *** Quits: Guest9 (~Guest9@103.250.145.230) (Quit: Connection closed)
[00:10:32] *** Quits: password2 (~password@user/password2) (Ping timeout: 268 seconds)
[00:10:39] <pyzozord> although maybe leetcode is using the academical nomenclature... that would make sense
[00:10:52] <kzootech> is n always greater than m?
[00:11:14] <pyzozord> but I never saw them use anything else than the big O, so that makes me think that they actually use the industry nomenclature
[00:11:27] *** Quits: cslr (cslr@gateway/vpn/protonvpn/cslr) (Ping timeout: 268 seconds)
[00:11:32] <pulse> maybe they mean amortized time
[00:11:43] *** Joins: Guest43 (~Guest43@156.195.63.59)
[00:12:01] *** Joins: cslr (~cslr@85-76-39-4-nat.elisa-mobile.fi)
[00:12:09] <bjs> pulse: no n=length of a1, and m=length of a2
[00:12:47] <kzootech> O(log(n+m)) == O(log(max(n,m)) ? is that true?
[00:12:48] <pulse> bjs, the point is that for upper bound O(n+m) is equivalent to O(n) and O(log(n+m)) should be equivalent to O(log(n))
[00:13:00] <pulse> it's _upper_ bound so it doesn't matter
[00:13:00] <bjs> pulse: O(n+m) is not just O(n) no
[00:13:06] <pulse> it could be n*m
[00:13:22] <bjs> O(n+m) is only O(n) if you fix m
[00:13:28] <bjs> if you allow both n and m to vary you cannot simplify this down anymore
[00:14:37] <bjs> like here, where the lengths of both arrays are variable you cannot make one of the terms disappear (unless you assume something about the lists and their lengths that is not mentioned).
[00:14:44] *** Joins: immibis (~immibis@62.156.144.218)
[00:15:00] <pulse> but it's upper boundary
[00:15:03] <pulse> n already represents the limit
[00:15:10] * pulse is confus
[00:15:10] <bjs> pulse: no n is the length of the first array
[00:15:14] <bjs> and m is the length of the second
[00:15:18] <pulse> not in the O notation it's not
[00:15:22] <bjs> Uh yes it is
[00:15:52] <Guest43> Is it the ideal order to be a network programming:
[00:15:53] <Guest43> linux -> ccna -> bash networking -> c -> c networking?
[00:16:00] <pyzozord> I think bjs is correct in this case, although I'm not an expert
[00:16:03] <bjs> When we say O(n) in just general parlance we're being incredibly informal and not even defining what "n" is.  Usually we just take "n" to be "the total size of the input"
[00:16:18] <pulse> that's because O is upper bound
[00:16:21] <pulse> so n is literally convention
[00:16:38] <pulse> both O(n) and O(n+m) are linear time, and that's all we're expressing with either
[00:16:40] <pulse> i think
[00:16:46] <pulse> been a while since i looked at theory
[00:16:48] <bjs> pulse: n is the usual convention, because "n" is the traditional name for an integer variable. But _here_ we have both n and m and they mean different things
[00:16:59] <pulse> yes, but they're saying the same thing
[00:17:07] <bjs> pulse: no they are not
[00:17:08] <pulse> they're both saying "this is linear complexity"
[00:17:29] <bjs> pulse: if n=length of a1 and m=length of a2 then saying the function has O(n) complexity you're saying the time *does not depend on the length of a2*
[00:17:33] <vdamewood> Guest43: "bash networking"?
[00:18:20] <pulse> bjs, no, you're saying that the function has linear complexity, regardless of inputs
[00:18:24] <bjs> pulse: O(n+m) is the correct way to say what you mean here, that "the time is linear in the total input size" (aka the length of the two lists)
[00:18:35] <bjs> pulse: no you are just wrong here. n and m are well-defined variables, n is the length of a1 and m is the length of a2
[00:18:40] <pulse> but n+m doesn't carry any meaningful information
[00:18:42] <bjs> so O(n) is saying the time does not depend on the length of a2
[00:18:59] <pulse> hmm
[00:19:02] <pulse> could be bjs
[00:19:02] <pulse> idk
[00:19:03] <Guest43> vdamewood: yes i dont want to use with python
[00:19:06] <bjs> pulse: it is
[00:19:24] <pulse> pretty sure i was taught they are equivalent but idk my memory isn't that good
[00:19:26] <vdamewood> Guest43: Well, how would you do it with Bash?
[00:19:31] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[00:19:41] <bjs> pulse: you were taught that lower-order terms can be eliminated. Which is correct.
[00:19:42] <mercenary> It has O(n) complexity where n is defined as the total number of all inputs. If the inputs are two arrays of size n1 and n2, it is O(n) for n=n1+n2
[00:19:53] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[00:19:56] <Guest43> vdamewood: i am asking
[00:19:56] <bjs> pulse: but you cannot do that when you have multiple independent variables.
[00:19:58] <bjs> mercenary: yeah
[00:20:05] <pulse> i see
[00:20:10] <vdamewood> Guest43: Oh, in that case there's no such thing as 'bash networking'.
[00:20:21] <GeDaMo> netcat! :P
[00:20:42] <bjs> mercenary: this is what pulse means when they say "O(n)" but it's not the same n as in pyzozord's question. and pyzozord is correct to note that there's a difference between log(n)+log(m) and log(n+m)
[00:20:46] <bjs> they imply different solutions :)
[00:20:52] <vdamewood> GeDaMo: Even that is very limited.
[00:21:16] <Guest43> vdamewood: linux networking?
[00:21:32] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:22:26] <Guest43> vdamewood: just i want to be near os.
[00:22:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:22:35] <pyzozord> I think log(n+m) implies "the solution has at last binary-search somewhere, and other things it might do have lower complexity"
[00:22:43] <vdamewood> Guest43: There isn't really much to 'Linux Networking' that isn't just 'Networking'.
[00:23:17] <pyzozord> I also looked up related terms to that problem and it says "arrays, binary search, divide and conquer", that divide and conquer is another clue
[00:23:24] <vdamewood> I mean, sure Linux has its own firewall system, and network administration tools. But once you know networking, it becomes a matter of "What command doex X concept."
[00:23:25] *** Quits: magla (~gelignite@55d471c8.access.ecotel.net) (Quit: Stay safe!)
[00:23:48] <vdamewood> Guest43: Also, CCNA is 20% useless for programming.
[00:23:55] <vdamewood> err 80% useless, I mean.
[00:24:16] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:25:07] <pulse> bjs, yeah you're right
[00:25:12] <Guest43> vdamewood: so what do you advice me?
[00:25:17] <ollierees> vdamewood, I'm pretty sure that's true for most high level programming languages.
[00:25:22] <pulse> O(10+n) would be O(n) but O(n+m) isn't
[00:25:28] <pulse> also O(2n) etc
[00:25:37] <vdamewood> ollierees: What what's true?
[00:25:39] <ollierees> Like same deal with using ML libraries for python - which class uses which model. Just as an example.
[00:25:43] <vdamewood> s/What what/That what/
[00:26:25] <ollierees> vdamewood, you're philosophy on just choosing the right command for the right concept.
[00:26:29] <ollierees> *your
[00:27:12] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:27:18] <vdamewood> ollierees: Huh?
[00:27:50] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[00:27:57] <mercenary> "what is the syntax of foreach in <whatever I'm programming in rn> again?"
[00:28:32] <ollierees> "Once you know networking, it becomes a matter of "What command does X concept"" is true for everything, as long as we're dealing with high level langauges and not Assembly or even C.
[00:28:35] <vdamewood> Guest43: Skip CCNA, learn Networking in general. And don't worry so much about order, since it doesn't quite matter.
[00:28:37] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[00:28:59] <vdamewood> ollierees: That comment wasn't about programming, or programming languages.
[00:29:28] <Guest43> vdamewood: ok, chosing python or linux for network programming?
[00:29:40] <Guest43> to start learning
[00:29:48] <vdamewood> Guest43: The two are not mutually exclusive.
[00:30:02] <ollierees> vdamewood, oh right, I thought it was. I kind of butted into the middle of the conversation. Sorry about that.
[00:30:21] <immibis> as long as what you want to do fits one of those concepts, which it often does, but often the concepts aren't quite what you want to do and that's where you end up with hacky half-solutions
[00:31:11] <Guest43> vdamewood: what about start with java
[00:31:14] <Guest43> ?
[00:31:23] <Guest43> i sudied java
[00:31:29] <Guest43> studied
[00:31:31] <vdamewood> It's just another programming language.
[00:31:56] <vdamewood> Python, Java, it doesn't really make a difference.
[00:32:03] <ollierees> Linux is used for sys admin networking, i.e. physical networking and server maintenance.
[00:32:07] *** Joins: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:33:59] <vdamewood> Guest43: Really, it doesn't matter which language you use as long as it's not something really exotic like Haskel.
[00:34:16] <ollierees> It does depend on what you want to do with networking, Guest43. I'm no expert on Networking, but each of those languages has its advantages and disadvantages.
[00:34:42] <oldlaptop> You'll see different languages emphasize different styles, even the mainstream-ish ones.
[00:34:44] <ollierees> Have you tried any network programming in Haskell, vdaemwood? It's a pain.
[00:34:49] <vdamewood> when it comes to network programming, the language doesn't really make a difference, since nearly every language just wraps the C sockets API.
[00:34:57] <mrig> go is pretty good for learning networking
[00:35:07] <oldlaptop> Network programming will look a little different in idiomatic python than in idiomatic java, or idiomatic C, or idiomatic go, or idiomatic js
[00:35:17] <vdamewood> mrig: I didn't even need an httpd daemon to write a web app in Go.
[00:35:30] <mrig> the net package and http package are great once you get used to them.
[00:35:50] *** Joins: lunarkitty (uid501895@user/pyra)
[00:35:53] <mrig> sure no, the primitives are pretty well thought out.
[00:36:14] <vdamewood> I still need an http daemon for my Python-based web apps.
[00:36:15] <oldlaptop> It's probably smart to expose yourself to some different styles, but in general you probably want to learn fundamentals before adding network I/O to your list of headaches.
[00:36:26] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 268 seconds)
[00:36:30] <Guest43> Sorry for the length and inconvenience, but I will summarize what I want, which is to specialize in c network programming,
[00:36:31] <Guest43>  (linux, c, networking, network programming in c), making network library to help other programer,
[00:36:31] <Guest43>  will that bring me jobs? or else?
[00:36:47] <vdamewood> Oh, but don't start out with Sockets programming in C++ It's a PITA.
[00:36:49] <AlexDelarge> what
[00:37:03] <oldlaptop> vdamewood: https://core.tcl-lang.org/tcllib/doc/trunk/embedded/md/tcllib/files/modules/httpd/httpd.md
[00:37:05] <mrig> vdamewood: That's the benefit of having the inbuilt scheduler I suppose.
[00:37:25] * vdamewood tcl's oldlaptop
[00:38:16] <vdamewood> AlexDelarge: I shall huh? your what
[00:38:25] <AlexDelarge> clever
[00:39:36] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 265 seconds)
[00:40:16] <oldlaptop> https://www.tcl-lang.org/software/tclhttpd/ is the more established version
[00:40:35] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[00:40:42] <oldlaptop> supposedly still what serves tcl-lang.org itself (though actually nowadays your bits come from cloudflare)
[00:41:02] *** Quits: Hanii_ (~textual@2a00:23c5:c587:6d00:2d39:ea75:4d3:29de) (Quit: Textual IRC Client: www.textualapp.com)
[00:42:30] *** Quits: inky_ (~inky@46.162.230.101) (Ping timeout: 265 seconds)
[00:43:19] <Guest43> Sorry for the length and inconvenience, but I will summarize what I want, which is to specialize in c network programming,
[00:43:19] <Guest43>  (linux, c, networking, network programming in c), making network library to help other programer,
[00:43:20] <Guest43>  will that bring me jobs? or else?
[00:43:30] <AlexDelarge> so you keep saying
[00:43:48] *** Joins: inky_ (~inky@141.136.76.78)
[00:45:08] *** Quits: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:45:13] <pulse> kinda easier to get a job with JS
[00:45:19] <pulse> i'm just saying
[00:45:24] <AlexDelarge> or find a guidance counsellor
[00:45:33] <AlexDelarge> in real life
[00:46:57] <Guest43> ok i will complete the match
[00:46:57] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:47:06] <Guest43> https://www.tvm.com.mt/mt/tvmi/live-tvm2/
[00:47:11] <Guest43> bye
[00:47:20] <AlexDelarge> lol
[00:47:23] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:47:45] *** Quits: SGautam (~SGautam@117.195.244.186) (Quit: Leaving)
[00:48:14] *** Quits: Guest43 (~Guest43@156.195.63.59) (Quit: Client closed)
[00:49:03] <vdamewood> I think I need a new GPG key.
[00:49:06] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Quit: Leaving.)
[00:50:45] *** Quits: federico_it (~textual@151.51.89.77) (Quit: Textual IRC Client: www.textualapp.com)
[00:51:18] <luiserebii> how soon after a technical interview does someone usually get the rejection/approval to move onto the next stage?
[00:51:31] <vdamewood> Well, fuck. I made an offer on ebay and now I don't have enough money in the bank to cover it.
[00:51:34] <luiserebii> i've been waiting since thursday to hear back
[00:51:48] <pyzozord> I give up, I looked up the solution I still dont understand it
[00:51:59] *** Joins: Chewt (~hayden@2600:6c54:7a00:c6c0:0:8d9e:504b:7793)
[00:51:59] <vdamewood> pyzozord: Salt water is a solution.
[00:53:15] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[00:53:28] <pyzozord> vdamewood: as in "apply salt to the burnet area"? (my ego is the burnt area)
[00:53:31] <pyzozord> :D
[00:53:59] <pyzozord> oh you are speaking chemically
[00:54:11] <mrig> Well it will float better in a saline solution.
[00:54:27] *** Joins: aigoo (~aigoo@user/aigoo)
[00:55:44] <vdamewood> pyzozord: Yeah, just a stupid pun. I don't know what's going on with you.
[00:56:42] <pyzozord> vdamewood: what's going on is that I AM the stupid pun. I can't leetcode
[00:56:56] <vdamewood> pyzozord: Oh, that sucks.
[00:57:21] <pyzozord> yeah, one could say... it burns ;)
[00:57:23] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: WeeChat 2.8)
[00:58:23] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[00:58:38] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[01:00:14] *** Joins: depp (~depp@prd01.moria.us)
[01:00:15] *** Joins: nekobyte (~nekobyte@user/nekobit)
[01:00:22] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 272 seconds)
[01:00:34] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 252 seconds)
[01:01:03] *** Quits: nekobyte (~nekobyte@user/nekobit) (Client Quit)
[01:01:58] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[01:02:20] *** Parts: aigoo (~aigoo@user/aigoo) ()
[01:03:35] *** Joins: Auron (Auron956@user/auron)
[01:04:10] *** Quits: justinf210 (~justinf21@212.sub-174-204-10.myvzw.com) (Ping timeout: 272 seconds)
[01:04:46] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[01:07:10] *** Joins: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com)
[01:07:38] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Read error: Connection reset by peer)
[01:07:58] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[01:08:27] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[01:09:03] *** Joins: Guest92 (~Guest92@160.238.75.62)
[01:09:20] <vdamewood> It's so hot my cat is baking.
[01:09:53] <pyzozord> oh no! don't bake your cat vdamewood! You don't want to have catcakes
[01:10:26] <Guest92> how much time  does it take to process csv files with thousands of rows
[01:10:51] <Guest92> in any programming language
[01:11:18] <mrig> Guest92: about as much time as a piece of string is long :)
[01:11:48] *** Joins: gilesc (~textual@2603-8001-3600-dad7-d5b5-d70d-c468-4e32.res6.spectrum.com)
[01:11:51] *** Joins: jaysicks (~jaysicks@bc9c36d1.unconfigured.pool.telekom.hu)
[01:12:22] <mrig> Guest92: you might like to consider that you can start to treat the data before the file has finished parsing, which means that you can read very large files easily.
[01:12:40] <vdamewood> Guest92: The language has little to do with the time, unless thelanguage itself is particularly slow like Python.
[01:12:40] <mrig> So, very quickly.
[01:13:26] *** Quits: gilesc (~textual@2603-8001-3600-dad7-d5b5-d70d-c468-4e32.res6.spectrum.com) (Client Quit)
[01:13:39] *** Quits: Guest92 (~Guest92@160.238.75.62) (Client Quit)
[01:14:18] *** Quits: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com) (Ping timeout: 272 seconds)
[01:14:39] *** Joins: Auron (Auron956@user/auron)
[01:15:03] <pyzozord> ugh that leetcode stuff makes me want to give up programming all together
[01:15:31] <koo7> have you tried turning it off and on again?
[01:15:40] *** Joins: nekobyte (~nekobyte@user/nekobit)
[01:16:09] *** Quits: ollierees (~ollierees@109.249.185.71) (Quit: WeeChat 2.9)
[01:16:19] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[01:17:48] <ornxka> how do i subscribe to a web push thingie from python
[01:17:53] <ornxka> i cant find anything about it online
[01:18:06] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[01:18:18] <ornxka> surely there must be like, libwebpush or something where it just works
[01:18:30] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 272 seconds)
[01:18:36] <koo7> libwebpushthingie
[01:18:56] <ornxka> oh cool thx
[01:19:39] *** Quits: [Kalisto] (~Nico@user/kalisto/x-8968079) (Quit: The Lounge - https://thelounge.chat)
[01:20:07] *** Joins: Guest53 (~textual@170.250.221.149)
[01:20:21] <ornxka> https://stackoverflow.com/questions/54867469/how-to-subscribe-to-receive-web-push-notification-programmatically-e-g-pytho this guy got no answers either
[01:20:26] <ornxka> am i asking the wrong question?
[01:22:44] *** Joins: alguien (~alguien@user/alguien)
[01:23:01] *** Joins: scabby (~scabby@user/scabootssca)
[01:23:58] <ornxka> what the hell even are push notifications
[01:24:11] <koo7> yeah
[01:25:07] <Valware> notifications that are sent to you rather than your device polling for new notifications
[01:25:16] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[01:25:44] <ornxka> im thinking specifically of webpush https://w3c.github.io/push-api/
[01:25:48] *** Joins: nelaPK (~nelaPK@156.195.105.194)
[01:26:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:26:22] <vdamewood> ornxka: You generally don't receive push notifications programatically. The user gets them from their OS.
[01:26:36] <Valware> push notifications are where you are walking down the street and someone pushes you over. the local mailman pops round the corner with a letter, entitled "Notification of Push"
[01:26:55] <ornxka> "from their os" could you elaborate on the meaning of this
[01:27:12] <vdamewood> ornxka: Also, that push-api is for SENDing not subscribing/receiving.
[01:27:26] <vdamewood> ornxka: When I receive a push notification, my phone's OS displays a message for me.
[01:27:45] <vdamewood> Or my computer's OS could do that too, but I don't subscribe to push notifications on my computer.
[01:27:56] <ornxka> there are web sites that can send you push notifications though
[01:28:11] <vdamewood> Yep. And in that case, my web browser is part of my OS.
[01:28:14] *** Quits: craftxbox (craftxbox@natsuko.ninja) (Ping timeout: 272 seconds)
[01:28:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[01:28:35] <vdamewood> So, when I get a push notification, I ultimately receive it through my OS's notification center.
[01:29:00] <ornxka> so the means by which web pages subscribe to push notifications that can activate when the browser is not active is something that happens completely outside of the browser?
[01:29:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:30:12] *** Quits: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[01:30:18] <koo7> https://developer.mozilla.org/en-US/docs/Web/API/Push_API
[01:30:32] <koo7> For an app to receive push messages, it has to have an active service worker...
[01:31:09] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[01:32:12] <mrig> I presume that is a JS API, it does not say on those docs?
[01:32:31] <koo7> apparently you call PushManager.subscribe() and it returns a (google) url that the server can use to push those notifications
[01:32:32] *** Quits: lazar (~lazar@user/lazar) (Quit: lazar)
[01:32:45] <koo7> yea it's a browser thing
[01:33:03] *** Quits: jaysicks (~jaysicks@bc9c36d1.unconfigured.pool.telekom.hu) (Remote host closed the connection)
[01:33:04] *** Joins: craftxbox (craftxbox@2001:bc8:634:1b35::1)
[01:33:18] <immibis> well that's one step better than mandating a google url, at least
[01:33:30] <mrig> I'm studying http usage in some depth at the moment, gather that you can push with http2 but not got to studying http2 just yet.
[01:33:36] *** Joins: jaysicks (~jaysicks@BC9C36D1.mobile.pool.telekom.hu)
[01:33:44] <ornxka> lol what the fuck
[01:33:51] <mrig> would be nice if it did not require JS
[01:34:03] <ornxka> they wrote an entire spec that revolves around using google
[01:34:29] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[01:34:31] <koo7> mrig, that's probably a whole different push thing
[01:35:00] *** Quits: CSG (~CSG@p200300d05f017e00c8ab101d65fe115a.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[01:35:01] <mrig> I doubt that it requires a google API
[01:35:12] <mrig> koo7: you need http2 for client push.
[01:35:22] *** Quits: dylan_ (~dylan_@210.213.254.120) (Ping timeout: 258 seconds)
[01:35:22] <vdamewood> ornxka: Where does it specify Google?
[01:35:38] <mrig> http2 came from google though.
[01:35:46] *** Quits: TheRedRipper (~TheRedRip@user/theredripper) (Quit: WeeChat 3.0)
[01:36:01] <koo7> vdamewood, it doesn't , it's just my interpretation ... ofc it will be apple servers on ios ..
[01:36:30] * vdamewood hugs his Apple server.
[01:36:39] *** Joins: dylan_ (~dylan_@2405:8d40:b30:186:e4ac:770f:f292:a896)
[01:37:00] <ornxka> >Each browser manages push notifications through their own system, called a "push service". When the user grants permission for Push on your site, you can then subscribe the app to the browser's push service. This creates a special subscription object that contains the "endpoint URL" of the push service, which is different for each browser, and a public key (see the example below). You send
[01:37:01] <ornxka> your push messages to this URL, encrypted with the public key, and the push service sends it to the right client.
[01:37:25] <vdamewood> Hmm... interesting point. I guess you'll have to look into how they do it.
[01:37:29] <immibis> vdamewood: all push notifications on android go through google
[01:37:31] <vdamewood> ... and I won't be any help.
[01:37:36] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[01:37:45] <ornxka> this url is a google url, at least for chrome/chromium - the whole thing apparently requires some third party intermediary which is chosen by the browser, not the push sender
[01:37:46] <immibis> at least in the android system (which is really google slash android, or as i like to call it, google plus android)
[01:38:03] <vdamewood> immibis: And it makes sense that all push notifications for a device goes through either the device's or the OS's manufacturer.
[01:38:21] <oldlaptop> ornxka: It's things like this we need U+1F631 for.
[01:38:22] <vdamewood> As opposed to GNU plus Linux?
[01:38:23] *** Quits: nelaPK (~nelaPK@156.195.105.194) (Quit: Client closed)
[01:38:30] <mrig> actualy server push would be pretty useful at the moment for the code that I'm investigating.
[01:38:40] <ornxka> oldlaptop: lol
[01:38:46] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[01:39:01] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[01:39:05] <vdamewood> I love that painting. It's my life.
[01:40:01] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Quit: Leaving)
[01:44:29] <ornxka> well this explains why its apparently impossible to do it in python at least
[01:44:47] *** Joins: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net)
[01:45:26] *** Quits: kilitary (~kilitary@kilitary.ru) (Remote host closed the connection)
[01:45:35] <mrig> so you need a worker javascript file to make that work.
[01:45:43] <mrig> shame.
[01:45:58] <pulse> a worker to make things work, imagine that
[01:46:26] <mrig> I guess that it is using some http2 voodoo though to make it work.
[01:46:39] <mrig> pulse: most people call them threads :P
[01:47:12] <mrig> I'm guessing that it is a JS webworker that is being fired up in there.
[01:47:43] <mrig> Bah, going to have to learn a little more JS at some point :)
[01:47:51] <mrig> Bah humbug.
[01:48:56] <mrig> Pretty sure you could do the same if you write your own client code too though.
[01:49:22] <mrig> using the http2 perhaps, not sure on that though.
[01:49:42] *** Quits: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:50:38] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:51:34] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Ping timeout: 250 seconds)
[01:51:49] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[01:52:45] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[01:54:14] <koo7> https://pypi.org/project/push-receiver/
[01:55:05] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Remote host closed the connection)
[01:57:15] <koo7> nvm...
[01:58:00] *** Joins: chronon (~chronon@user/chronon)
[02:01:23] *** Quits: chronon (~chronon@user/chronon) (Client Quit)
[02:01:54] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:ac06:25a4:7233:bcc6) (Remote host closed the connection)
[02:02:50] *** Joins: chronon (~chronon@user/chronon)
[02:02:52] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:04:32] * vdamewood farts in assembly
[02:04:42] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[02:08:11] *** Joins: audio (~audio@2603-8081-1800-eb5b-f4a2-2347-4507-53d6.res6.spectrum.com)
[02:09:01] <mrig> You know that if there are assemble able globs in that, that you have already gone to far!
[02:09:19] * mrig hides with self disgust.
[02:09:31] * koo7 longjmps
[02:10:23] *** Joins: nekobyte (~nekobyte@user/nekobit)
[02:10:23] *** Quits: nekobyte (~nekobyte@user/nekobit) (Client Quit)
[02:10:29] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:10:51] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[02:12:59] <mrig> oh this is tantalising, I need to be able to adjust my surface output display settings now too :)
[02:13:38] <mrig> looking at plot(sin(x*r/2)*sin(y*r/2))/20 I think it might be a map of mordor!
[02:15:22] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Read error: Connection reset by peer)
[02:15:44] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[02:18:08] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Quit: Leaving)
[02:18:33] *** Quits: dylan_ (~dylan_@2405:8d40:b30:186:e4ac:770f:f292:a896) (Read error: Connection reset by peer)
[02:20:48] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 272 seconds)
[02:22:51] *** Quits: Arahael (~arahael@120.88.166.123) (Ping timeout: 268 seconds)
[02:25:23] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:25:30] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:26:08] *** Quits: Akuli (~Akuli@87-94-110-84.bb.dnainternet.fi) (Quit: Leaving)
[02:27:26] *** Quits: Inari (~Pinkishu@p508ef347.dip0.t-ipconnect.de) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[02:28:18] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:29:19] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:30:54] <leonardus> What is a simple audio codec to implement that also compresses well?
[02:31:05] <dodo> what kind of audio
[02:31:13] <audio> leonardus, YOU DARE PING ME HEATHEN?
[02:31:14] <leonardus> Music
[02:31:31] *** audio is now known as audiocat
[02:31:59] <leonardus> audiocat: https://usercontent.irccloud-cdn.com/file/LxtxTdah/b4a.gif
[02:32:09] <leonardus> :^)
[02:32:24] *** Quits: Danishman (~Allan@62-243-156-218-static.dk.customer.tdc.net) (Quit: Leaving)
[02:32:42] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[02:32:48] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[02:32:50] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 272 seconds)
[02:32:52] <audiocat> leonardus, https://reactiongifs.me/wp-content/uploads/2014/04/crying-money-woody-harrelson-zombieland.gif
[02:33:20] *** DasBrain_ is now known as DasBrain
[02:33:48] *** Quits: Bric (~Bric@65.183.3.30) (Quit: Client closed)
[02:34:22] *** Joins: JavaBean (~JavaBean@user/javabean)
[02:34:35] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:34:55] *** Quits: Leone (~Leo@65-110-221-121.cpe.pppoe.ca) (Read error: Connection reset by peer)
[02:42:45] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:ea6f:38ff:fed4:3289) (Quit: WeeChat 2.8)
[02:45:58] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[02:48:50] *** Quits: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c) (Remote host closed the connection)
[02:49:03] *** Joins: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c)
[02:50:23] *** Joins: dylan_ (~dylan_@2405:8d40:b30:186:e4ac:770f:f292:a896)
[02:50:39] *** Joins: Bric (~Bric@65.183.3.30)
[02:53:38] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[02:54:35] *** Quits: dan01 (~dan01@2a02:2f09:3f1a:dd00:7457:2ab4:1c:4171) (Read error: Connection reset by peer)
[02:55:29] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:55:54] *** Quits: Nact (~l@host-85-27-126-227.dynamic.voo.be) (Quit: Konversation terminated!)
[02:56:37] *** Joins: gggp (~textual@60.10.194.47)
[03:01:12] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:01:13] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[03:01:42] *** Quits: jaysicks (~jaysicks@BC9C36D1.mobile.pool.telekom.hu) (Remote host closed the connection)
[03:04:37] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[03:09:31] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[03:09:39] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:10:07] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:12:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:acc9:cc3e:a2d:31e2) (Read error: Connection reset by peer)
[03:12:44] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 272 seconds)
[03:14:39] *** Joins: superboot (~agentgasm@user/superboot)
[03:15:18] *** Joins: tcsilver (~tcsilver@pool-96-255-128-204.washdc.fios.verizon.net)
[03:15:38] <superboot> Hi all. I'm looking for a new Javascript web framework. Can anyone recommend one that is not backed by google/facebook? Something that is community built?
[03:16:47] *** Quits: dhil (~dhil@195.213.192.47) (Ping timeout: 268 seconds)
[03:23:30] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[03:24:10] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[03:25:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[03:26:01] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[03:26:01] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 268 seconds)
[03:26:25] *** Quits: W (~w@user/w) (Remote host closed the connection)
[03:26:37] *** Joins: W (~w@user/w)
[03:34:08] *** Quits: dylan_ (~dylan_@2405:8d40:b30:186:e4ac:770f:f292:a896) (Quit: Quit)
[03:35:34] <vdamewood> superboot: Nope.
[03:36:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:37:57] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[03:39:11] *** Quits: motherr (~motherr@user/motherr) (Ping timeout: 258 seconds)
[03:41:12] *** Joins: soapsudsxx (~soapsudsx@141.193.188.137)
[03:44:05] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[03:45:20] *** Joins: motherr (~motherr@user/motherr)
[03:46:35] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[03:47:52] *** Joins: Arahael (~Arahael@2001:8004:2020:1bb0:c506:f876:7e69:9078)
[03:48:02] <superboot> Really? There are only frameworks made by google and facebook? That's hard to believe.
[03:48:33] *** Quits: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c) (Quit: leaving)
[03:48:54] <Arahael> I have no internet today, except for maybe one bar on my mobile phone when I hang it outside. :(
[03:48:57] <Arahael> And it's COLD!
[03:49:11] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[03:49:44] <superboot> It's cold? What part of the world are you in? I'm in the south of USA and it's like 85F outside.
[03:50:03] <Arahael> I'm in Australia, in the winter.
[03:50:32] <superboot> Arahael: Cool. I guess it's the morning too.
[03:51:00] <vdamewood> Arahael: It's 44 degrees here.
[03:51:10] *** Quits: Bric (~Bric@65.183.3.30) (Ping timeout: 246 seconds)
[03:51:18] <vdamewood> Arahael: Can I come visit you?
[03:51:22] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[03:52:37] <Arahael> vdamewood: Sure, after you quarantine at your own cost!  It's about $3-4k AUD, just to quarantine. :)
[03:52:56] <vdamewood> quarantine? But I already got shot.
[03:53:17] <superboot> Arahael: Is it enforced by the government?
[03:53:20] <Arahael> Doesn't matter, still applies.
[03:53:32] <Arahael> superboot: Yes it is.
[03:53:53] <superboot> Arahael: Dang.
[03:54:38] <rindolf> superboot: hi
[03:54:58] <rindolf> superboot: i still use jQuery
[03:55:57] <rindolf> superboot: https://www.youtube.com/watch?v=Wm2h0cbvsw8
[03:56:10] <superboot> rindolf: Oh really? I'm really new to the web side of things. Do you need to use jQuery with other tools, or is it just JS, jQuery, HTML, and CSS?
[03:56:12] <rindolf> moar bots!
[03:56:26] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[03:57:28] <rindolf> superboot: you dont need other tools, but i suggest using typescript
[03:57:52] <superboot> rindolf: Hahaha! You really got me with that one. Thanks for the laugh.
[03:58:38] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[03:58:46] <rindolf> superboot: you're welcome
[04:01:05] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[04:01:31] *** Joins: cronos (~cronos@user/cronos)
[04:02:49] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:05:27] *** Joins: kinduff0 (~kinduff@user/kinduff)
[04:06:33] *** Quits: kinduff (~kinduff@user/kinduff) (Read error: Connection reset by peer)
[04:06:33] *** kinduff0 is now known as kinduff
[04:07:15] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[04:07:16] *** Joins: ham (~ham4@user/ham)
[04:07:57] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 268 seconds)
[04:08:25] <Arahael> superboot: typescript really does make javascript better, once you've gotten a handle on javascript, I strongly suggest checking it out.
[04:09:48] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 268 seconds)
[04:11:57] <Arahael> superboot: Javascript people love to say "javascript has no types", but they're really keeping the types in their heads, and types are exactly the detail that compilers are really good at managing, so it just eventually gets much easier to let the compiler deal with it.
[04:12:05] *** Joins: ham2 (~ham4@d8D8627D5.access.telenet.be)
[04:12:11] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:12:45] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[04:12:54] <Izem> yeah, js just handles it at runtime
[04:13:21] <Izem> which is fine, considering it's intended purpose
[04:13:43] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[04:14:07] *** Joins: cronos (~cronos@user/cronos)
[04:15:26] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 272 seconds)
[04:15:40] <superboot> Arahael: Ah, ok. I'll check it out when I get there. :) Thanks.
[04:16:05] <superboot> Don't miss the framework song guy's other gem: https://www.youtube.com/watch?v=jxi0ETwDvws
[04:16:15] *** Joins: nekobyte (~nekobyte@user/nekobit)
[04:16:42] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[04:16:59] *** Joins: justinf210 (~justinf21@4.sub-97-44-1.myvzw.com)
[04:19:18] *** Quits: biberu (~biberu@user/biberu) (Quit: ZNC - https://znc.in)
[04:19:29] *** Quits: Arahael (~Arahael@2001:8004:2020:1bb0:c506:f876:7e69:9078) (Quit: Client closed)
[04:20:47] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[04:21:01] *** Joins: gggp (~textual@60.10.194.47)
[04:21:38] *** Joins: biberu (~biberu@user/biberu)
[04:21:52] *** Joins: slavfox (~slavfox@93.158.232.111)
[04:22:27] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[04:25:48] *** Joins: Geronimo7 (~Geronimo@user/geronimo)
[04:25:54] *** Joins: ellie2 (~ellie@user/ellie)
[04:25:57] *** Joins: scjosh4 (~scjosh@206.189.79.69)
[04:26:06] *** Joins: buffet0 (~buffet@buffet.sh)
[04:26:12] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[04:26:14] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: bebna (~bebna@box2.bebna.de) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: NChief (~nchief@user/nchief) (Ping timeout: 244 seconds)
[04:27:22] *** Quits: buffet (~buffet@buffet.sh) (Read error: Connection reset by peer)
[04:27:22] *** buffet0 is now known as buffet
[04:27:47] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: scjosh (~scjosh@206.189.79.69) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: ellie (~ellie@user/ellie) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Geronimo (~Geronimo@user/geronimo) (Ping timeout: 244 seconds)
[04:27:47] *** scjosh4 is now known as scjosh
[04:27:47] *** Geronimo7 is now known as Geronimo
[04:27:47] *** ellie2 is now known as ellie
[04:27:56] *** Joins: Guest53 (~textual@170.250.221.149)
[04:28:00] *** Joins: NChief (~nchief@irc.nortv.net)
[04:28:39] *** Joins: bebna (~bebna@bebna.de)
[04:28:47] *** Joins: s1b1 (~s1b1@user/s1b1)
[04:29:03] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[04:29:22] *** Quits: justinf210 (~justinf21@4.sub-97-44-1.myvzw.com) (Ping timeout: 272 seconds)
[04:30:08] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:30:15] *** Joins: ctk (~calimero@185.13.36.50)
[04:30:38] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 265 seconds)
[04:30:39] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:31:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:31:25] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[04:34:38] *** Quits: ctk (~calimero@185.13.36.50) (Changing host)
[04:34:38] *** Joins: ctk (~calimero@user/calimeroteknik)
[04:34:54] *** ctk is now known as CalimeroTeknik
[04:35:04] *** Quits: Asmodean (~Asmoedean@178.115.128.129.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[04:35:46] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:36:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:36:27] *** Joins: Asmodean (~Asmoedean@77.119.201.202.wireless.dyn.drei.com)
[04:38:02] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[04:38:31] *** Quits: Tazmainian (~Tazmainia@102.39.160.82) (Quit: Leaving)
[04:39:11] *** Joins: cronos (~cronos@user/cronos)
[04:40:10] *** Joins: paravida (~paravida@user/paravida)
[04:40:51] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:44:40] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[04:44:58] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 272 seconds)
[04:46:35] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 265 seconds)
[04:46:41] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Remote host closed the connection)
[04:47:17] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[04:48:31] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 265 seconds)
[04:48:33] *** Joins: mr_ballon (uid294865@id-294865.brockwell.irccloud.com)
[04:49:34] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[04:50:57] *** pizzaiolo is now known as pizza
[04:51:40] *** Joins: qaph (~weechat@user/qaph)
[04:52:10] *** Quits: peteyboy1 (~peteyboy1@95.169.229.12) (Ping timeout: 272 seconds)
[04:54:30] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 268 seconds)
[04:54:32] *** qaph is now known as kron
[04:57:34] *** Joins: rifl (~user@user/rifl)
[05:01:51] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[05:05:30] *** Quits: johan (~johan@user/johan) (Ping timeout: 240 seconds)
[05:05:47] *** Quits: motherr (~motherr@user/motherr) (Quit: zzz)
[05:05:48] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[05:06:08] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Ping timeout: 250 seconds)
[05:06:30] *** Joins: johan (~johan@user/johan)
[05:07:22] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:07:42] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[05:08:04] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[05:08:16] *** Joins: gggp (~textual@36.112.128.143)
[05:08:35] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[05:11:16] *** ChanServ sets mode: +o InPhase
[05:11:31] *** InPhase changes topic to 'Programming/Computer Science Discussion & Community Chat | https://libera-programming.github.io | Channel rules: Be respectful and friendly, and promote constructive discourse. Put pastes in a pastebin, e.g. https://bpaste.net https://ideone.com'
[05:11:34] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:11:36] *** InPhase sets mode: -o InPhase
[05:13:12] *** Quits: gggp (~textual@36.112.128.143) (Ping timeout: 252 seconds)
[05:15:51] <Izem> is it me or is infix easier than postfix/prefix? in the later you get long chains and it's hard to keep track of the stack
[05:16:23] <Izem> but I guess you could say the same for infix for large enough expressions
[05:17:45] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[05:20:48] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:25:08] <PlanckWalk> For infix you can end up with hundreds of begin-end parenthesis pairs
[05:25:08] *** Joins: Pixi_ (~Pixi@user/pixi)
[05:25:29] <PlanckWalk> Try reading any Lisp code without formatting :)
[05:25:43] <Izem> true
[05:28:02] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 272 seconds)
[05:28:29] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[05:30:20] *** Quits: q-q (uid501539@user/q-q) (Quit: Connection closed for inactivity)
[05:30:35] *** Quits: wwilly (~wwilly@217.140.99.251) (Ping timeout: 268 seconds)
[05:31:08] *** Joins: gggp (~textual@60.10.194.47)
[05:31:17] *** Joins: fuzzykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[05:31:29] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[05:32:26] *** Quits: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Ping timeout: 268 seconds)
[05:34:22] *** Joins: justinf210 (~justinf21@150.sub-97-43-192.myvzw.com)
[05:34:48] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Connection closed)
[05:35:22] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[05:37:01] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[05:39:13] *** Quits: justinf210 (~justinf21@150.sub-97-43-192.myvzw.com) (Ping timeout: 268 seconds)
[05:39:51] *** Quits: lucf117 (~lucf117@user/lucf117) (Read error: Connection reset by peer)
[05:40:21] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Client Quit)
[05:43:28] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 272 seconds)
[05:43:51] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:47:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[05:48:27] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[05:48:52] *** Joins: motherr (~motherr@user/motherr)
[05:50:34] *** Joins: gggpkm_ (~gggpkm@36.112.134.194)
[05:50:50] *** Quits: xff0x (~xff0x@2001:1a81:537a:a200:e696:8622:74d:d095) (Ping timeout: 272 seconds)
[05:52:11] *** Joins: xff0x (~xff0x@2001:1a81:53b8:a100:fc31:6f5c:5a37:95a)
[05:52:12] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[05:52:13] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[05:52:20] *** Quits: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net) (Ping timeout: 272 seconds)
[05:53:57] *** Joins: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net)
[05:54:37] *** Joins: gggpkm (~gggpkm@106.37.74.209)
[05:55:04] *** fuzzykef is now known as furrykef
[05:55:52] *** Quits: gggpkm_ (~gggpkm@36.112.134.194) (Ping timeout: 268 seconds)
[05:56:48] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:57:37] *** Joins: pete443 (~pete@user/pete443)
[05:59:35] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 268 seconds)
[06:00:38] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 258 seconds)
[06:03:10] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[06:05:03] *** Joins: wei2912 (~wei2912@112.199.250.21)
[06:05:41] *** Joins: gggpkm_ (~gggpkm@124.126.15.211)
[06:05:51] *** Quits: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net) (Ping timeout: 265 seconds)
[06:07:03] *** Joins: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net)
[06:08:49] *** Quits: gggpkm (~gggpkm@106.37.74.209) (Ping timeout: 268 seconds)
[06:09:18] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 252 seconds)
[06:09:43] *** Quits: rifl (~user@user/rifl) (Ping timeout: 265 seconds)
[06:10:23] *** Joins: rifl (~user@user/rifl)
[06:11:25] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:12:08] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:14:03] *** Joins: justinf210 (~justinf21@28.sub-97-43-193.myvzw.com)
[06:17:22] *** Quits: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[06:18:12] *** Joins: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net)
[06:18:25] *** Quits: justinf210 (~justinf21@28.sub-97-43-193.myvzw.com) (Ping timeout: 265 seconds)
[06:18:47] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:21:34] *** Joins: HaMsTeRs (~mx@14-0-169-108.static.pccw-hkt.com)
[06:24:42] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 265 seconds)
[06:26:26] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:26:37] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:28:10] *** Quits: HaMsTeRs (~mx@14-0-169-108.static.pccw-hkt.com) (Quit: Konversation terminated!)
[06:28:34] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[06:28:44] *** Quits: bpmedley (~bpmedley@69-174-155-1.bltnilaa.metronetinc.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:29:08] *** Joins: bpmedley (~bpmedley@69-174-155-1.bltnilaa.metronetinc.net)
[06:31:33] *** Joins: rifl` (~user@user/rifl)
[06:32:52] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[06:33:30] *** Quits: rifl (~user@user/rifl) (Ping timeout: 272 seconds)
[06:33:34] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[06:35:55] *** Joins: rifl`` (~user@user/rifl)
[06:36:43] *** rifl`` is now known as rifl
[06:37:25] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[06:37:45] *** Quits: rifl` (~user@user/rifl) (Ping timeout: 265 seconds)
[06:38:00] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:38:29] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net)
[06:43:16] *** Quits: Chewt (~hayden@2600:6c54:7a00:c6c0:0:8d9e:504b:7793) (Quit: WeeChat 3.1)
[06:43:55] *** gggpkm_ is now known as gggpkm
[06:44:43] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 258 seconds)
[06:46:10] *** Joins: justinf210 (~justinf21@89.sub-97-43-193.myvzw.com)
[06:46:47] *** Quits: justinf210 (~justinf21@89.sub-97-43-193.myvzw.com) (Remote host closed the connection)
[06:47:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:50:54] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[06:51:06] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[06:54:51] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[06:58:09] *** Quits: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net) (Ping timeout: 268 seconds)
[06:59:02] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Client Quit)
[06:59:16] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:59:36] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[06:59:39] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[07:01:04] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[07:01:04] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[07:01:26] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:03:09] *** Joins: cyndaquil (~job@user/job)
[07:05:41] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[07:07:38] *** Joins: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net)
[07:08:34] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net) (Ping timeout: 246 seconds)
[07:08:46] *** Quits: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[07:10:25] *** Quits: paravida (~paravida@user/paravida) (Remote host closed the connection)
[07:11:33] *** Joins: nekobyte (~nekobyte@user/nekobit)
[07:12:28] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[07:17:16] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[07:17:27] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:19:16] *** Quits: alystair (~alystair@user/alystair) (Remote host closed the connection)
[07:26:28] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[07:31:42] *** Joins: spacecraft (~spacecraf@c-73-169-93-26.hsd1.co.comcast.net)
[07:33:31] <KillerWasp> hello random stalker guys
[07:36:31] <ronald_mcdonald> KillerWasp
[07:37:20] <KillerWasp> ?
[07:38:44] <ronald_mcdonald> KillerWasp, "hi"
[07:39:14] <KillerWasp> ひ
[07:39:55] *** Joins: password2 (~password@user/password2)
[07:40:38] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 272 seconds)
[07:40:41] *** Joins: gggpkm (~gggpkm@124.126.15.211)
[07:41:14] *** Joins: Crescendo (~Crescendo@user/crescendo)
[07:42:12] *** Quits: Crescendo (~Crescendo@user/crescendo) (Client Quit)
[07:42:22] <rindolf> KillerWasp: hi, sup?
[07:42:26] *** Joins: Crescendo (~Crescendo@user/crescendo)
[07:42:32] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[07:42:48] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 252 seconds)
[07:43:33] <KillerWasp> rindolf# nothing really, except that I have woken up with tremendous glitches in the machine which I had to fix until now, the kernel and various programs jumping sparks and leaking all over the place.
[07:44:23] *** Joins: gggp (~textual@60.10.194.47)
[07:44:36] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:44:48] <rindolf> KillerWasp: ah, which OS?
[07:45:16] <KillerWasp> rindolf# archlinux
[07:45:42] *** Joins: Guest53 (~textual@170.250.221.149)
[07:45:52] <rindolf> KillerWasp: ah
[07:45:57] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Connection closed)
[07:46:03] <KillerWasp> I think that all the problem is caused by openssl, you read a lot of encryption and everything is wrong.
[07:46:12] <KillerWasp> like TLS
[07:46:13] <neshpion> what about libressl
[07:46:24] <novns> libressl is dead
[07:46:29] <neshpion> F
[07:46:40] <rindolf> KillerWasp: is it a server?
[07:46:41] <KillerWasp> neshpion# I have gnutls, but almost all programs refuse to use it.
[07:46:56] <KillerWasp> rindolf# no, a normal machine
[07:47:28] <novns> libressl was an attempt to replace openssl but they have made incompatible changes to API
[07:47:34] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[07:47:44] <neshpion> i thought part of that was because the openssl API was shit
[07:47:50] <KillerWasp> Errors appear everywhere when I transfer large files or large shipments either from the web, remote ssh terminal, torrents, wget, etc.
[07:48:08] <novns> so you cannot replace without patching every user program in the world
[07:48:16] <novns> and it's dead
[07:48:17] <KillerWasp> You can get stuck even reading the directory system.
[07:48:37] <novns> KillerWasp, what errors exactly?
[07:49:56] <novns> openssl hasn't updated recently, and nothing has changed
[07:51:01] <KillerWasp> novns# It keeps trying to read the directory system with no response, some programs occupy 500% of memory, consuming a lot of swap, all other connections related to TLS hang without response, the audio cuts out for a long time or farts for a long time ( unpleasant sound).
[07:51:21] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[07:51:37] <novns> KillerWasp, I suspect hardware error.  failed PCI bus or memory
[07:51:54] *** Parts: craftxbox (craftxbox@2001:bc8:634:1b35::1) (Leaving)
[07:52:24] <KillerWasp> and many other problems, all caused mainly by over-processing and the directory system being unresponsive, or reading swap too much. The kernel cannot use swap without presenting serious bugs as well.
[07:52:55] <novns> or your drive has failed
[07:53:10] <KillerWasp> novns# what drive?
[07:53:20] <novns> hard drive or SSD drive
[07:53:50] <novns> check SMART status of your drives
[07:53:52] <KillerWasp> novns# The same thing happened with the previous storage device (SSD). Now I use HDD.
[07:54:15] <KillerWasp> And the change was a few months ago.
[07:54:38] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[07:55:09] <novns> KillerWasp, you need to analyze logs, starting with dmesg
[07:55:17] *** Joins: gggpkm_ (~gggpkm@36.112.134.194)
[07:55:41] <KillerWasp> novns# Now if I want everything to work well, I avoid the use of swap, and remote connections. The log never reports anything.
[07:55:58] <novns> how did you create your swap?
[07:56:12] <novns> is it a swap file on regular FS?
[07:56:26] <KillerWasp> a regular FS
[07:56:35] <KillerWasp> in a partition of hdd for swap
[07:56:58] <novns> it's one or another, decide please
[07:57:07] <novns> it cannot be both
[07:57:30] <KillerWasp> sorry, it's from partition
[07:57:39] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[07:57:46] <KillerWasp> i read bad
[07:57:50] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[07:58:05] <novns> enable swap, wait for errors in dmesg, and read them
[07:58:06] *** Joins: nekobyte (~nekobyte@user/nekobit)
[07:58:20] *** Joins: craftxbox (craftxbox@2001:bc8:634:1b35::1)
[07:58:31] <novns> maybe your HDD is dying
[07:58:55] <novns> and check SMART data of that drive
[07:58:57] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: Textual IRC Client: www.textualapp.com)
[07:59:18] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[07:59:19] <KillerWasp> that no, hdd is very new
[07:59:30] <KillerWasp> it's problem of the kernel
[07:59:45] <novns> you don;t know until you check for errors
[08:00:19] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Quit: WeeChat 3.1)
[08:00:20] <novns> maybe they dropped your HDD in a warehouse
[08:01:15] <novns> KillerWasp, and if that would be a problem with kernel - there would be many similar complains from Arch users
[08:01:26] <novns> and there are none
[08:02:49] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:03:35] <novns> KillerWasp, or if there are some bus errors then your motherboard have to visit a doctor
[08:04:00] <novns> *has
[08:06:19] <rustyshackleford> are there standard design patterns for financial transactions?
[08:06:29] <rustyshackleford> something like a register
[08:06:40] <rustyshackleford> or a ledger
[08:06:56] <KillerWasp> novns# If the problem is my machine or my hardware, then I have to use it until it dies. Because there is no way to fix it. :/
[08:07:17] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[08:07:49] *** Joins: nekobyte (~nekobyte@user/nekobit)
[08:10:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:11:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:11:50] *** Lord_of_Life_ is now known as Lord_of_Life
[08:12:45] <novns> rustyshackleford, a general ledger usually, you have to keep it by law if you are an incorporated organization
[08:13:14] <rustyshackleford> novns: maybe I need to take an accounting class
[08:13:18] <novns> or if you are just a human - you can invent anything
[08:13:32] <rustyshackleford> trying to not re-invent the wheel
[08:13:52] <rustyshackleford> which, in that case, I should just learn to use hledger
[08:14:35] *** Joins: gggp (~textual@60.10.194.47)
[08:15:29] <novns> rustyshackleford, https://en.wikipedia.org/wiki/Summa_de_arithmetica
[08:15:59] <novns> you can read this book, there are links to full text
[08:16:33] <rustyshackleford> do I have to know latin?
[08:16:36] <novns> no
[08:16:41] <rustyshackleford> sheesh is there a tldr?
[08:16:56] <rustyshackleford> guess I gotta rtfm
[08:16:59] <KillerWasp> rustyshackleford# If it weren't for reinventing the wheel, there would only be openssl and no gnutls.
[08:17:06] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[08:17:22] <KillerWasp> or only 1 distro in all the world
[08:17:25] <novns> rustyshackleford, he describes his invention - system of accounting that we all use today
[08:18:17] *** Quits: mr_ballon (uid294865@id-294865.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[08:18:18] <rustyshackleford> novns: I guess I could apply the same principles in a spreadsheet or something
[08:18:42] <rustyshackleford> a lot of the budget software out there sucks
[08:18:48] <novns> yes, you can
[08:19:25] *** Joins: guy_frm_yogaland (~gourab@2409:4062:4e1b:c6f7:c36:4446:8ec:592e)
[08:19:41] <novns> it's just double-entry bookkeeping and set of accounts
[08:20:22] <rustyshackleford> novns: securities are tricky
[08:20:53] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[08:21:07] <guy_frm_yogaland> hello guys. can you please help me with nodejs with docker in a linux os?
[08:21:08] <rustyshackleford> are they a special case in this system?
[08:21:40] <novns> rustyshackleford, there are lot of open-source tools
[08:21:43] <novns> https://github.com/frappe/books
[08:21:49] <novns> for example
[08:22:24] <rustyshackleford> novns: haven't seen that one
[08:22:31] <novns> https://github.com/topics/double-entry-accounting
[08:22:34] <rustyshackleford> I've seen gnu money
[08:22:41] <novns> here all of them
[08:25:39] <novns> guy_frm_yogaland, no one answer this kind of questions, just ask about your problem
[08:26:36] <novns> don't start with "can you help me"
[08:27:08] <rindolf> guy_frm_yogaland: alpine?
[08:28:17] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[08:29:05] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[08:30:24] *** Quits: Zweihander (~Zweihande@znc.ext.zweihander.me) (Quit: ZNC - https://znc.in)
[08:31:17] *** Joins: Zweihander (~Zweihande@znc.ext.zweihander.me)
[08:40:31] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:41:50] *** Joins: gggp (~textual@60.10.194.47)
[08:45:15] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 272 seconds)
[08:46:20] <guy_frm_yogaland> @rindolf: yes
[08:47:28] <rindolf> guy_frm_yogaland: then no idea. you may opt to drop the commission
[08:48:08] <guy_frm_yogaland> ok, no problem, actually you advise me to ask someone else, that's why I asked
[08:48:29] <novns> guy_frm_yogaland, what's the problem exactly?
[08:48:47] <rindolf> guy_frm_yogaland: you asked us yesterday
[08:48:49] *** Quits: c705 (c705@alpine/contributor/c705) (Quit: Hello! And... good-bye!)
[08:49:01] <novns> "can you please help me" is not enough for an answer
[08:49:02] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[08:49:23] <novns> help with what?
[08:49:34] <guy_frm_yogaland> yes, and only @rindolf tried to solve my error, but today i am asking to someone else
[08:49:50] <novns> what error?
[08:49:56] *** Quits: bjwyman_ (~bjwyman@199-48-94-117.rochmnaa.metronetinc.net) (Read error: Connection reset by peer)
[08:50:02] <guy_frm_yogaland> I am having dockerfile which looks like this, but I get error like permission error : npm WARN checkPermissions Missing write access to /app
[08:50:20] <guy_frm_yogaland> when I build the image then it is showing error
[08:51:30] <novns> it looks like /app is created by root, and npm runs from an user account
[08:51:55] <guy_frm_yogaland> here is my dockerfile: https://dpaste.org/6CdX
[08:52:53] <novns> guy_frm_yogaland, add  RUN chown app:app /app
[08:53:28] <novns> so your user app will have write access to /app
[08:54:13] <guy_frm_yogaland> somebody said to me that Move the WORKDIR before USERand then try to build, is that correct?
[08:54:35] <novns> not sure
[08:54:44] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 272 seconds)
[08:54:51] <novns> you can try it too
[08:55:02] <guy_frm_yogaland> ok, let me try this quick fix as advised by you @novns
[08:55:04] *** Joins: cliluw (~cliluw@47.147.80.149)
[08:55:36] <novns> but it's just /app is owned by root, and user "app" has no permissions to it
[08:56:07] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[08:56:09] <guy_frm_yogaland> oh ok, got it now, I did not know about that, I am just a beginner in linux
[08:56:39] <guy_frm_yogaland> and why does the error statement say this :  The command '/bin/sh -c npm install' returned a non-zero code: 243  at last?
[08:57:37] <PlanckWalk> In Unix, returning a non-zero code usually means "an error happened".  Some programs have different codes for different errors.
[08:57:44] <rindolf> guy_frm_yogaland: -c "npm install"
[08:57:52] <PlanckWalk> So in this case, look up what that means for npm
[08:58:10] <PlanckWalk> (Probably "permission failure" or something)
[08:59:07] <PlanckWalk> Oh, I didn't even notice that.
[08:59:14] *** Quits: cyndaquil (~job@user/job) (Remote host closed the connection)
[09:01:18] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 265 seconds)
[09:01:40] *** Joins: dunkeln (~dunkeln@94.129.65.28)
[09:01:52] *** Quits: guy_frm_yogaland (~gourab@2409:4062:4e1b:c6f7:c36:4446:8ec:592e) (Ping timeout: 250 seconds)
[09:02:47] *** Joins: guy_frm_yogaland (~gourab@117.228.54.62)
[09:03:35] *** Joins: Chewt (~hayden@2600:6c54:7a00:c6c0:0:8d9e:504b:7793)
[09:09:12] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[09:09:22] *** Joins: c705 (c705@alpine/contributor/c705)
[09:09:42] *** Joins: cyndaquil (~job@user/job)
[09:19:22] <guy_frm_yogaland> @novns: I get a different error this time: chown: /app: Operation not permitted, The command '/bin/sh -c chown app:app /app' returned a non-zero code: 1
[09:20:03] <guy_frm_yogaland> here is the dockerfile (updated) :  https://dpaste.org/nJC6
[09:20:04] *** Quits: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 272 seconds)
[09:22:04] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[09:27:11] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:28:11] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[09:28:45] <Quietwalker> Before I go off and write it for myself, is there an app out there that lets you, say, take a picture of a closet/bookshelf/etc, draw a bounding box, and say "This thing is here" ?  For those of us who have stack crap like 6 layers deep, have a lot of crap, and want to find the ... whatever, without ripping everything apart?
[09:29:33] <Quietwalker> like, "Oh, yeah, I have a spare dvi to hdmi converter ... uh ... in one of these 5 boxes, I think inside a box in one of them?  I think it's red?"
[09:29:44] <lavadonut> https://www.amazon.com/Life-Changing-Magic-Tidying-Decluttering-Organizing/dp/1607747308
[09:29:58] <Quietwalker> Yeah, she's full of crap
[09:30:03] *** Joins: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5)
[09:30:04] <lavadonut> you're full of crap
[09:30:08] <Quietwalker> It's like the van life folks.
[09:30:24] <Quietwalker> it's really expensive to live with only very little, because you have to buy everything you need all the time.
[09:30:40] <lavadonut> you obviously have no idea what it's about
[09:30:42] <Quietwalker> however, I have lots of books, lots of computer bits and bobs, etc.
[09:31:06] <Quietwalker> and I like them, and want to keep them, I just would like a simple way to manage my home inventory with explicit placement/location
[09:32:20] *** Joins: gggp (~textual@60.10.194.47)
[09:32:33] <Quietwalker> This is nice, in a way;  https://play.google.com/store/apps/details?id=net.twisterrob.inventory&hl=en_US&gl=US
[09:32:49] <Quietwalker> but it doesn't have a mechanism to show me where on the stack of shelves a thing is
[09:34:47] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 268 seconds)
[09:37:04] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[09:37:33] *** Quits: dunkeln (~dunkeln@94.129.65.28) (Ping timeout: 265 seconds)
[09:37:50] <novns> guy_frm_yogaland, run chown before USER
[09:38:16] <guy_frm_yogaland> @novns: ok, let me try that
[09:38:16] <novns> guy_frm_yogaland, so it will run as root
[09:38:20] <ronald_mcdonald> Does anyone know how android maps permissions and app isolation to the linux permissions below?
[09:38:42] *** Joins: indus (~nick@59.88.24.196)
[09:39:21] <guy_frm_yogaland> @novns: still I get this error: chown: /app: No such file or directory
[09:39:33] <guy_frm_yogaland> The command '/bin/sh -c chown app:app /app' returned a non-zero code: 1
[09:41:03] *** Joins: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193)
[09:43:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:45:47] <guy_frm_yogaland> @novns: error even after doing what you have advised me
[09:46:02] <guy_frm_yogaland> same error: chown: /app: No such file or directory
[09:46:25] <novns> guy_frm_yogaland, provide your package*.json files please
[09:47:10] <guy_frm_yogaland> ok
[09:48:03] <guy_frm_yogaland> here it is @novns:   https://dpaste.org/mcDT
[09:48:21] *** Quits: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[09:51:01] *** Joins: Burkuf (~AnCELASTR@216.243.47.158)
[09:51:02] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[09:52:36] *** Quits: gggpkm_ (~gggpkm@36.112.134.194) (Ping timeout: 252 seconds)
[09:52:48] <novns> guy_frm_yogaland, https://dpaste.org/2nVj
[09:52:51] <novns> it works
[09:54:15] *** Quits: Krufu (~AnCELASTR@216.243.47.158) (Ping timeout: 268 seconds)
[09:54:54] <novns> guy_frm_yogaland, first you create WORKDIR, then you RUN chown as root, and only then you change current USER
[09:55:32] <novns> if you put RUN chown after USER - it have no permissions to /app anymore
[09:55:46] <novns> *it has
[09:59:37] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[09:59:43] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:01:26] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[10:01:43] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[10:02:30] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:02:44] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[10:03:02] *** Joins: novns (~novns@user/novns)
[10:03:33] <guy_frm_yogaland> @novns: thanks friend, your solution really worked now
[10:03:50] *** Joins: gggp (~textual@60.10.194.47)
[10:06:25] *** Joins: dunkeln (~dunkeln@94.129.65.28)
[10:06:50] <rindolf> nova: thanks for your help
[10:08:05] <guy_frm_yogaland> @rindolf: thanks for your help too
[10:08:24] *** Joins: anovick (~anovick@IGLD-83-130-156-7.inter.net.il)
[10:08:29] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:08:41] <rindolf> guy_frm_yogaland: you're welcome
[10:09:06] <novns> guy_frm_yogaland, but npm complains about old unmaintained versions full of vulnerabilities
[10:09:21] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[10:09:34] <guy_frm_yogaland> yes @novns: i am looking at those
[10:09:47] <novns> it looks like those packages are from 19 century
[10:09:51] <guy_frm_yogaland> but my initial issue of permissions was fixed
[10:10:14] <guy_frm_yogaland> @novns: it was from 2019 an old demo project
[10:11:22] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 272 seconds)
[10:14:43] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:15:13] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[10:15:17] *** Quits: guy_frm_yogaland (~gourab@117.228.54.62) (Read error: Connection reset by peer)
[10:15:27] *** Joins: wwilly (~wwilly@cpc92794-cmbg19-2-0-cust589.5-4.cable.virginm.net)
[10:19:35] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[10:19:48] *** Quits: craftxbox (craftxbox@2001:bc8:634:1b35::1) (Ping timeout: 268 seconds)
[10:19:53] *** Joins: soulisson (~soulisson@user/soulisson)
[10:20:02] *** Joins: gggp (~textual@60.10.194.47)
[10:20:15] <soulisson> Hello
[10:21:03] *** Quits: wwilly (~wwilly@cpc92794-cmbg19-2-0-cust589.5-4.cable.virginm.net) (Ping timeout: 265 seconds)
[10:22:22] *** Joins: alguien (~alguien@user/alguien)
[10:22:39] *** Joins: craftxbox (craftxbox@2001:bc8:634:1b35::1)
[10:22:55] <soulisson> I have a stupid question. For something to be considered a string (characters or bytes), do the elements have to be stored contiguously (for instance in memory)?
[10:24:55] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:25:07] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[10:26:59] <rindolf> soulisson: hi, no
[10:27:49] <soulisson> rindolf, ok, thanks a lot. Apologies for the question
[10:28:11] <rindolf> soulisson: in haskell strings are linked lists
[10:28:32] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[10:29:16] <soulisson> rindolf, ah nice. I didn't know that. I want to learn haskell. I don't know functional programming and I figured haskell would be nice.
[10:30:23] <rindolf> soulisson: https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#what-does-functional-programming--fp--mean
[10:31:28] *** Quits: dunkeln (~dunkeln@94.129.65.28) (Ping timeout: 252 seconds)
[10:33:18] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[10:33:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[10:34:14] <novns> in LISP lists are linked strings
[10:35:50] *** Joins: gggp (~textual@60.10.194.47)
[10:35:57] <novns> in APL an array (you) creates an array (program) that do various arrays (things) to arrays
[10:37:25] <novns> in BASIC strings are sequences to play with your PC speaker
[10:37:39] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[10:37:49] <rindolf> novns: no
[10:38:40] <|smlckz|> novns, do you mean linked lists?
[10:38:44] <novns> in PASCAL strings are not used until you graduate
[10:38:56] *** Quits: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193) (Ping timeout: 250 seconds)
[10:38:57] <|smlckz|> true
[10:39:02] <novns> |smlckz|, I'm not mean!
[10:39:24] <xcombelle> meta-kmeta-k
[10:40:25] <|smlckz|> cadadaaar!
[10:40:27] <xcombelle> hi rindolf just remeber that I contributed to your code https://github.com/shlomif/Freenode-programming-channel-FAQ/commits/master/topic.py?author=xcombelle
[10:40:30] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[10:41:03] <novns> in C strings are null-terminated firearm magazines full of bullets to shoot in your leg
[10:41:40] <rindolf> xcombelle: i remember
[10:43:48] <xcombelle> by the way rindolf you should s/freenode/libera/ in your faq
[10:43:57] <rindolf> xcombelle: no
[10:44:12] <|smlckz|> soulisson: you can call any element of any free monoid a string ;p
[10:45:26] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:46:40] *** Joins: node1 (~node1@user/node1)
[10:47:53] <soulisson> Unfortunately, there are not many courses on haskell on the usual learning platforms I use
[10:47:54] <soulisson> :(
[10:50:21] <|smlckz|> soulisson: why learn haskell?
[10:53:03] <soulisson> |smlckz|, I want to. I have toyed a little bit with FP but I don't have a good grasp of the concepts to be honest.
[10:54:32] <|smlckz|> which other functional languages you've tried so far?
[10:55:12] <novns> soulisson, it's a form when you do not tell a compiler your list of instructions that change variables
[10:55:24] *** Joins: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193)
[10:55:25] <novns> it's math formulas instead
[10:56:18] <novns> and there is no state in time, no mutable variables, just formulas
[10:56:20] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 272 seconds)
[10:56:30] <soulisson> |smlckz|, at one point, I used Elixir but due to some events I wasn't able to continue the learning. I played with some of the FP features of python
[10:57:04] *** gggpkm_ is now known as gggpkm
[10:57:05] <|smlckz|> hmm
[10:58:06] <novns> and it gives you no side effects, and lazy evaluations
[10:58:13] <|smlckz|> maybe try out lisps before driving straight into hardcore fp?
[10:58:19] <soulisson> novns, what I understand is why the name functional was chosen? Don't imperative languages have functions already?
[10:58:21] <novns> nothing is calculated until required to
[10:58:53] <deniska> novns: that's lazy, not functional
[10:58:58] <novns> soulisson, imperative paradigm is when your program is a set of instructions - do this, then do that
[10:59:04] <deniska> functional languages is when you program using functions
[10:59:14] <novns> deniska, wrong
[10:59:18] *** Joins: wei2912 (~wei2912@112.199.250.21)
[10:59:20] *** Quits: LiftLeft (~LiftLeft@154.21.114.200) (Ping timeout: 252 seconds)
[10:59:36] <novns> imperative functions with side-effects are not functional
[10:59:51] <deniska> Why? They are still functions
[11:00:03] <deniska> And you need side effects to do anything useful anyway
[11:00:05] <novns> deniska, because they still change state of things
[11:00:16] <|smlckz|> > <deniska> functional languages is when you program using functions || then C is also a functional language
[11:00:57] <deniska> |smlckz|: now it's also useful to have functions as things which can be passed and returned to and from functions, but yeah, C is a bad functional language :D
[11:01:26] <|smlckz|> heh
[11:01:29] <novns> deniska, functional languages are declarative math functions like  f(x) = sin(Pi * x), and no variables
[11:01:44] *** Quits: soapsudsxx (~soapsudsx@141.193.188.137) (Remote host closed the connection)
[11:02:08] <deniska> gatekeeping functional programming, I see
[11:02:09] <novns> you cannot modify any state, there are no states
[11:02:09] <indus> Are there any programmers who were in the programming industry 1980s here? I was wondering if someone could tell me if there would have been something like the Free Software Movement had Richard Stallman not lived? I'm just curious if the legend that he is single-handedly responsible for the popularisation of the concept of free and open source software is actually true.
[11:02:20] <novns> deniska, and they are very powerful
[11:02:45] <|smlckz|> mathematics and [ imperative ] programming has different meanings of variables
[11:03:21] <novns> deniska, because you can formally prove your program
[11:03:25] <ronald_mcdonald> deniska, is ocaml a good language to start learning fp
[11:03:43] <ronald_mcdonald> novns, formally prove sub(x,y) => (x+y)
[11:03:43] <|smlckz|> ronald_mcdonald: partly agree
[11:03:44] <novns> ronald_mcdonald, deniska has no clue about functional languages
[11:03:50] <indus> deniska: Haskell.
[11:04:07] <|smlckz|> ronald_mcdonald: sub?
[11:04:19] <ronald_mcdonald> the function is named subtract but the programmer used + by mistake
[11:04:19] <deniska> indus: I helloworlded in it briefly, made game of life in it :)
[11:04:24] <deniska> in haskell
[11:04:48] <indus> deniska: It's the best. No need to learn OCaml if you program in Haskell.
[11:05:09] <deniska> functions with side effects have to declare so via a type system which is useful
[11:05:27] <deniska> but that's not what makes this style of programming functional
[11:05:51] <|smlckz|> indus, can you achieve the performance of OCaml without black magic in haskell?
[11:05:52] <ronald_mcdonald> |smlckz|, what formal proof software is going to detect this error?
[11:05:57] <novns> ronald_mcdonald, just do it like with any math formulas
[11:06:21] <ronald_mcdonald> novns, show me how your formal prover will detect the error in subtract(x,y) => x+y
[11:06:36] <indus> |smlckz|: Performance difference between OCaml and Haskell are not as big as you claim.
[11:07:34] *** Joins: gggp (~textual@60.10.194.47)
[11:07:58] <deniska> many people confuse "functional programming" with "a mess of reduce-map-fold function calls becase loops aren't allowed" and/or "a type system which puts monads in your face" :)
[11:08:04] <novns> ronald_mcdonald, http://mizar.org/trybulec65/14.pdf
[11:08:10] <novns> you can try yourself
[11:08:18] <|smlckz|> ronald_mcdonald: how's that a proof? that's a declaration
[11:08:37] <ronald_mcdonald> |smlckz|, I am asking to show how your "formal verifier" will catch this bug
[11:08:39] *** Quits: indus (~nick@59.88.24.196) (Quit: leaving)
[11:08:45] *** Joins: guy_frm_yogaland (~gourab@117.228.45.142)
[11:09:53] <deniska> formal verification is an issue completely orthogonal to programming paradigm
[11:10:27] <novns> ronald_mcdonald, in your case it's simply - just check if sub(1,1) returns 0
[11:10:29] <ronald_mcdonald> No "automatic formal verifier" will detect the bug in subtract(x,y) => x+y
[11:10:42] <ronald_mcdonald> novns, but thats just normal testing, its not a proof that all inputs work
[11:11:18] <ronald_mcdonald> I am just trying to say that formal verification doesn't mean much, it is just something one must use along with other testing and debugging tools
[11:11:33] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:11:38] <soulisson> What platforms do you use when you want to learn about programming. For instance, for my case FP and any language purely functional?
[11:11:45] <novns> ronald_mcdonald, the thing is you can do analysis of your code just like any math analysis.  you can calculate limits, etc
[11:11:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[11:11:57] <guy_frm_yogaland> friends, did I miss something?
[11:12:04] <ronald_mcdonald> novns, and none of that will be able to detect the bug in my example
[11:12:18] <|smlckz|> soulisson: what do you mean by platform?
[11:12:53] <soulisson> |smlckz|, for instance I often use Udemy
[11:13:13] <|smlckz|> hmm
[11:13:30] <deniska> books are an interesting idea
[11:13:34] *** Joins: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453)
[11:13:40] <deniska> they are like blog posts, but long, and more structured
[11:13:43] <ronald_mcdonald> Yeah books are nice
[11:13:44] *** Quits: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453) (Changing host)
[11:13:44] *** Joins: menace (~someone@user/menace)
[11:13:46] *** menace is now known as Deknos
[11:13:50] <novns> ronald_mcdonald, in your case you can check if sub(any value, same value) always returns 0, for any value
[11:14:06] <ronald_mcdonald> Videos are annoying, our pace is almost always out of synch with the videos
[11:14:12] <ronald_mcdonald> novns, but thats just normal testing
[11:14:15] <ronald_mcdonald> Its not formal verification
[11:14:15] <novns> without specifying the value
[11:14:21] <novns> ronald_mcdonald, without specifying the value
[11:14:27] <ronald_mcdonald> And verifying one or two cases is just a verification not a proof
[11:14:28] <novns> any value
[11:14:34] <novns> no casesd
[11:14:39] <novns> no cases, just any value
[11:14:41] <ronald_mcdonald> novns, correct. To test subtract we have to know it was a subtract.
[11:15:00] <novns> ronald_mcdonald, you don't have to chech for some cases
[11:15:15] <novns> you just use "any value" like a definition, not a value
[11:15:22] <novns> *check
[11:15:30] <ronald_mcdonald> novns, but at that point I already know the bug
[11:15:35] *** Joins: Fairy (~Fairy@2001:464a:4992:0:d9a:d5e9:381c:bc47)
[11:15:43] <ronald_mcdonald> If my "test" has to be the same as my "program"
[11:15:44] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[11:15:57] <novns> ronald_mcdonald, because your example is too simple
[11:15:59] <ronald_mcdonald> novns, I just wanted to show that "automatic formal verification" doesn't mean much, its just one tool one must use along with other testing and debugging tools
[11:16:00] <soulisson> ronald_mcdonald, deniska I understand that most people learn better by reading, in my cas I prefer videos, lol :)
[11:16:03] <ronald_mcdonald> novns, obviously
[11:16:24] <ronald_mcdonald> "Formal verification" should not be relied on by itself
[11:16:36] <novns> ronald_mcdonald, the thing is you can transform your functional code like math formulas, simplify it, analyze it, etc
[11:16:52] <|smlckz|> ronald_mcdonald: subtract(x, x) = 0; subtract(a, b) = c iff add(b,c) = a; for all x, a, b, c
[11:17:03] <novns> because it's math formulas, and not instructions
[11:17:15] <ronald_mcdonald> |smlckz|, yes but in this case the "test" is the same as a full implementation of the function
[11:17:39] <ronald_mcdonald> Alright for a trivial example like this but...
[11:17:55] <novns> ronald_mcdonald, this is what functional programming does - you write math formulas, and you use them for calculations then
[11:18:02] <|smlckz|> "same"?
[11:18:10] <novns> no state, no instructions, no mutable things
[11:18:20] <novns> just declarative formulas
[11:18:33] <ronald_mcdonald> |smlckz|, it appears in this case writing the test is equivalent to writing out the full function...just stated in a different way
[11:18:48] <ronald_mcdonald> The "essential complexity" of both are the same
[11:18:53] *** Quits: biberu (~biberu@user/biberu) (Quit: ZNC - https://znc.in)
[11:18:59] *** Joins: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it)
[11:19:05] *** Joins: Citillara (~userid@user/citillara)
[11:19:10] <novns> so you can prove that your program will never calculate things out of bounds, for example
[11:19:11] <|smlckz|> did you expect otherwise?
[11:19:28] <novns> like overflows
[11:19:44] <ronald_mcdonald> |smlckz|, then testing just becomes rewriting your application differently
[11:19:58] <paulo_> i'm a mess
[11:20:03] <ronald_mcdonald> novns, I love boundedness proofs
[11:20:21] <ronald_mcdonald> I like when I can use some mathematical arguments to prove something strictly stays within some limits for any input etc
[11:20:51] <novns> yes, and functional paradigm allows you to do this formally
[11:20:57] <|smlckz|> ronald_mcdonald: see property testing
[11:21:16] <novns> ronald_mcdonald, without executing your code, just formally
[11:21:45] <ronald_mcdonald> novns, and I do the same when writing C. The same effort is needed in both cases. I need to develop the mathematical algorithm in either case.
[11:22:01] <beaky> woah postgres was initially implemented in lisp https://dsf.berkeley.edu/papers/ERL-M90-34.pdf
[11:22:08] *** Joins: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be)
[11:22:09] <novns> ronald_mcdonald, for testing your C program you have to execute tests
[11:22:29] <novns> for testing a functional program you can use paper
[11:22:30] <ronald_mcdonald> The mathematical proof comes first
[11:22:45] <ronald_mcdonald> The algorithm is proved first, the program is written later
[11:22:53] <|smlckz|> beaky: :O
[11:23:15] <beaky> 'Our feeling is that the use of LISP has been a terrible mistake for several reasons'
[11:23:21] <novns> ronald_mcdonald, when your code have side-effects, you cannot prove anything
[11:23:39] <|smlckz|> beaky: whuhu...
[11:23:51] <ronald_mcdonald> novns, sorting is a side effect. Yet sorting algorithms are mathematically proven.
[11:23:58] <beaky> so they rewrote it all in c
[11:24:00] <ronald_mcdonald> Sorting is a massive massive fucking side effect in fact
[11:24:25] <|smlckz|> novns: how does haskell i/o is proven?
[11:24:31] *** Joins: biberu (~biberu@user/biberu)
[11:25:05] <|smlckz|> s/does //
[11:25:18] <ronald_mcdonald> "Stateless" is bullshit
[11:25:38] <ronald_mcdonald> x=expression; can easily be reformulated as the "stateless" x=f(current_state,x)
[11:25:59] <ronald_mcdonald> How do you know you are avoiding state in your fp code and not slipping in such kinds of code unknowingly
[11:26:48] *** Joins: gggp (~textual@60.10.194.47)
[11:27:05] *** Joins: solenopsis (~nick@59.88.24.196)
[11:27:07] <novns> |smlckz|, you use special abstractions for I/O, they call it monads,  it allows you to represent calculations as a pipeline
[11:27:27] <novns> and you can do math things to it then
[11:28:00] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 272 seconds)
[11:28:23] <deniska> IO monad more or less just tricks syntacical sugar into producing expressions in which each line depends on the previous one, so the order of execution corresponds to the order of lines
[11:28:40] *** Quits: solenopsis (~nick@59.88.24.196) (Client Quit)
[11:28:43] <novns> ronald_mcdonald, if you sort things yourself - it's not a side-effect, it's a transformation, and you know it formally
[11:29:03] <ronald_mcdonald> And any and all mathematical algorithms I prove myself are accurate in any language I write in
[11:29:14] <ronald_mcdonald> When the algorithm and proof comes first, the language is irrelevant to exactness
[11:29:18] <deniska> nothing prohibits haskell to have nothingness to string function for reading from standard input, but without ensured order of evaluation it'd be quite useless
[11:29:20] <novns> ronald_mcdonald, side-effects is when 3rd party library sort things for you and don't know how and when
[11:30:17] <novns> ronald_mcdonald, side-effect is when outside locale settings affect your sort results
[11:30:34] <novns> and you cannot predict it anymore
[11:30:51] <ronald_mcdonald> Then thats a moot point. Because when I have developed the algorithm I already know it is correct.
[11:31:02] <|smlckz|> beaky: "Hence, we would encourage the implementors of other programming languages to study the LISP environ-
[11:31:04] <|smlckz|> ment carefully and implement the  better ideas." hmm
[11:31:14] <novns> ronald_mcdonald, then your sort have no side-effects
[11:31:29] <beaky> yes the future of programming should be more like lisp imo
[11:31:39] <beaky> where everything is nice and interactive
[11:32:15] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[11:36:46] <novns> beaky, and recursive
[11:36:51] <xcombelle> beaky: lisp is too much elitist I would bet the future is more like python (for example go)
[11:37:09] <|smlckz|> elitist?
[11:37:11] <beaky> why is lisp elitist
[11:37:43] <novns> xcombelle, people learn lisp at schools, scheme or something
[11:37:46] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Read error: No route to host)
[11:37:51] <ronald_mcdonald> The future is C
[11:37:55] <novns> it's not that hard at all
[11:38:08] <|smlckz|> ronald_mcdonald: no, Rust!
[11:38:24] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[11:38:29] <beaky> in rust i trust
[11:38:56] <soulisson> I didn't like GoLang
[11:39:01] <xcombelle> novns: because of macro between otherthings
[11:39:04] <novns> the future is some newer C dialect, with objects but without any bullshit templates
[11:39:44] <novns> and with newer proper macro preprocessor
[11:41:10] <|smlckz|> novns: templates are typed macros; C++ implemented it badly doesn't mean templating inherently is something bad
[11:42:34] <novns> |smlckz|, and you don't need any types, macros have to be just preprocessing of text
[11:43:22] <novns> and no generics please
[11:43:29] <|smlckz|> lol
[11:43:52] <soulisson> Few weeks I found some nice security tool written in Go. I wanted to implement some of the techniques implemented in the tool as a plugin for another tool I use. It took me days :)
[11:44:12] <soulisson> The other tool is written in python
[11:44:40] <novns> Go is easy to learn and start doing things, until you need something more
[11:44:44] <novns> and then it's hard
[11:45:36] <novns> like working with a serial port, all available libraries are messy and buggy
[11:47:44] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:47:54] <novns> and a lot of headache with IO locks, so you have to invent three-level go-routines with a lot of channels
[11:48:32] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Quit: Konversation terminated!)
[11:49:31] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Ping timeout: 268 seconds)
[11:50:08] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[11:52:28] *** Quits: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5) (Ping timeout: 272 seconds)
[11:54:19] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[11:55:07] <deniska> Go is an optical illusion, it looks like a programming language :)
[11:55:23] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 268 seconds)
[11:55:45] *** Joins: alexxxxxey (~Alexey@user/alexxey)
[11:56:41] <|smlckz|> deniska: what is it then? XD
[11:58:06] <deniska> |smlckz|: DSL for programming tcp proxies
[11:58:21] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:ea6f:38ff:fed4:3289)
[11:58:43] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:931c:87ae:1f48:5683)
[11:59:06] <|smlckz|> oh yes go statement considered harmful heh
[12:01:01] <soulisson> When we say that a dll gets loaded when a program is executed. By loaded do we mean physically loaded in memory or more like mapped in the process virtual memory?
[12:01:21] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 258 seconds)
[12:02:11] *** Joins: frankfurt (~nick@59.88.24.196)
[12:04:02] *** Joins: wwilly (~wwilly@cpc92794-cmbg19-2-0-cust589.5-4.cable.virginm.net)
[12:04:36] *** Joins: jaysicks (~jaysicks@bc9c36d1.mobile.pool.telekom.hu)
[12:05:01] *** Joins: wwilly_ (~wwilly@217.140.99.251)
[12:05:08] <|smlckz|> hmm? how would you execute code in the dll?
[12:06:16] <novns> btw about Rust
[12:06:41] <novns> Rust is very hard to learn and start doing things, until you need something more
[12:06:51] <novns> and then it's harder and harder
[12:08:07] <|smlckz|> that's the price you have to pay for such safety and guarantees. who gives it for free?
[12:08:13] <novns> one of the main contributors to Redox OS has committed suicide :(
[12:08:24] <novns> https://www.redox-os.org/news/open-source-mental-health/
[12:08:25] <xcombelle> :(
[12:08:33] <|smlckz|> rip
[12:08:38] *** Quits: wwilly (~wwilly@cpc92794-cmbg19-2-0-cust589.5-4.cable.virginm.net) (Ping timeout: 252 seconds)
[12:08:42] <novns> that what Rust does to you
[12:08:58] *** Joins: mkopriva (~mkopriva@ip-94-113-146-145.net.upcbroadband.cz)
[12:09:02] * ronald_mcdonald puts some tobacco inside novns pipe and lights it for him
[12:09:11] <novns> thanks
[12:09:30] <novns> ronald_mcdonald, I have a pipe actually, and I love to smoke tobacco
[12:09:32] <soulisson> |smlckz|, this is more a terminology question. I understand that the dll is always loaded in memory but since the library is always shared between processes, I was wondering if by sentence I gave they were more referring to the mapping rather than the copying in physical memory.
[12:09:44] <ronald_mcdonald> novns, beautiful golden leaves
[12:10:43] <novns> pipes are safer than cigarettes, because you don't breathe that smoke
[12:11:19] <frankfurt> novns: What do you breathe in a pipe?
[12:11:40] <|smlckz|> :I what else do you breathe in?
[12:12:20] <novns> frankfurt, nothing, you do it with your mouth only
[12:12:27] <novns> and never inhale
[12:12:42] <ronald_mcdonald> The smoke just comes out of its own?
[12:13:20] <novns> that smoke is too heavy to inhale, you cannot do it
[12:13:42] <guy_frm_yogaland> do you think programming on windows is easier than on a linux machine?
[12:13:53] <novns> but it's all over the place, so everyone coughs around
[12:14:17] <novns> guy_frm_yogaland, it depends
[12:14:40] <novns> if you do GUI programming - it's easier to use some Delphi
[12:14:42] <ronald_mcdonald> Windows used to be very stable and backward compatible
[12:14:52] <ronald_mcdonald> Don't know how much that holds true today though
[12:15:02] <ronald_mcdonald> which I think should be a positive for programming
[12:15:30] <|smlckz|> soulisson: it is loaded if it isn't already, if it is loaded, it gets mapped to the address space of the processes asking for it iiuic
[12:15:30] <RedNifre> When was that? I remember Win98 being extremely unstable.
[12:15:43] <novns> ronald_mcdonald, it's still true, you never have problems with old programs on newer systems
[12:15:46] <ronald_mcdonald> RedNifre, I meant as in less drastic updates
[12:15:49] <ronald_mcdonald> Not as in "uptime"
[12:15:54] *** Joins: D1nger (~Booster2o@host-109-88-247-43.dynamic.voo.be)
[12:15:56] <RedNifre> ah
[12:16:00] <deniska> Microsoft cares about developers developers developers :D
[12:16:23] <deniska> MS programming tooling is quite nice*
[12:16:24] <ronald_mcdonald> RedNifre, yes it was a bad choice of word
[12:16:31] <deniska> * — as far as you program for MS platforms
[12:16:37] <novns> btw, Microsoft are huge contributors to Haskell
[12:17:16] <RedNifre> Speaking of Windows, how's the Unix situation over there, with WSL, Ubuntu etc.? Can I tell a Windows user "Clone this repo and run make, but make sure you have rsync and c4group installed and if you don't have it, try 'sudo apt install openclonk' or something"?
[12:17:22] <soulisson> |smlckz|, yes, that's my understanding as well. I guess the author was not very accurate in his description...
[12:17:26] <|smlckz|> novns: to linux kernel as well
[12:17:41] *** Joins: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5)
[12:18:25] <novns> RedNifre, yes, it works that way, but an user have to set up WSL first
[12:18:29] <|smlckz|> soulisson: i hope it isn't official msdn docs ;)
[12:18:31] <ronald_mcdonald> I think the solution for that is cygwin
[12:18:36] *** Quits: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be) (Ping timeout: 258 seconds)
[12:18:51] <novns> RedNifre, and a lot of people still use Windows 7, and XP
[12:18:59] <novns> and there's no WSL there
[12:19:03] <ronald_mcdonald> Windows 7 was the best windows
[12:19:15] <deniska> It was all downhill since Windows 2000
[12:19:26] *** Joins: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be)
[12:19:34] <RedNifre> novns thanks
[12:21:20] <soulisson> |smlckz|, I don't remember. I guess this is just me focusing too much on terminology.
[12:21:49] <|smlckz|> hmm
[12:22:56] *** Quits: D1nger (~Booster2o@host-109-88-247-43.dynamic.voo.be) (Ping timeout: 252 seconds)
[12:25:22] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:25:40] <biberu> RedNifre: don't know your context, but give them e.g. a dockerfile?
[12:27:06] <soulisson> |smlckz|, I guess my question is how does the operating system handle the case where an instanceA of a program modify some of the data and an instanceB gets started. Does the OS keeps a copy of the original data somewhere, does it load from disks only the modified section?
[12:27:31] <ronald_mcdonald> The data has changed if it has been flushed
[12:29:15] <soulisson> ronald_mcdonald, let's say that an exe changes the global data section. What happens exaclty? Are the original data kept in memory?
[12:29:26] *** Quits: audiocat (~audio@2603-8081-1800-eb5b-f4a2-2347-4507-53d6.res6.spectrum.com) (Ping timeout: 250 seconds)
[12:30:18] <ronald_mcdonald> Each process has its own memory
[12:30:24] <ronald_mcdonald> It has nothing to do with the disk image
[12:30:31] <ronald_mcdonald> "memory" means ram
[12:30:33] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:31:06] <soulisson> ronald_mcdonald, yes, I'm talking about memory as well, not the disk image
[12:31:23] <ronald_mcdonald> Each process has its own separate memory
[12:31:37] <ronald_mcdonald> (COW applies when forking but it should be transparent in theory)
[12:34:04] <mspe> if it's not transparent, the OS really fucked up!
[12:34:53] *** Quits: wwilly_ (~wwilly@217.140.99.251) (Quit: Leaving)
[12:34:53] *** Quits: Chewt (~hayden@2600:6c54:7a00:c6c0:0:8d9e:504b:7793) (Quit: WeeChat 3.1)
[12:35:16] *** Joins: wwilly (~wwilly@217.140.99.251)
[12:35:20] <soulisson> My question is what happens when the writing occurs before the start of the second process? Does a COW occurs? If so, does the OS keep the original data waiting for the new process?
[12:35:59] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[12:36:10] <ronald_mcdonald> Doesn't matter
[12:36:18] <ronald_mcdonald> Both processes have different memory locations
[12:36:24] <ronald_mcdonald> Each has its own heap
[12:36:28] <ronald_mcdonald> and own stack
[12:36:57] <ronald_mcdonald> mspe, COW is subtle
[12:37:32] <soulisson> yes, for the stacks and the heaps, what about the global variables for instance?
[12:37:42] <ronald_mcdonald> soulisson, every process has its own memory
[12:39:01] *** Quits: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193) (Quit: Leaving)
[12:39:15] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: lwe[m] (~dendrumat@2001:470:69fc:105::2f9b) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: Kamui (~kamui-ren@2001:470:69fc:105::f74) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: crysisanon[m] (~crysisano@2001:470:69fc:105::1687) (Quit: Bridge terminating on SIGTERM)
[12:39:17] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Quit: Bridge terminating on SIGTERM)
[12:39:19] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: Bridge terminating on SIGTERM)
[12:40:21] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:ea6f:38ff:fed4:3289) (Quit: WeeChat 2.8)
[12:43:13] <soulisson> ronald_mcdonald, I'm not sure to understand. My understanding is that when I start program.exe twice. Some parts of the first and the second process virtual memory will be mapped to the same physical memory pages.
[12:44:38] <ronald_mcdonald> If it does, its merely an optimization
[12:44:42] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:cf3c:697d:723b:8aac)
[12:44:46] *** Joins: mrig (~mrig@user/mrig)
[12:44:47] <ronald_mcdonald> And the processes should behave as if they are independent
[12:48:42] <soulisson> yes, I understand that those are optimizations. This is precisely the purpose of my question, to understand how the OS handles modified data in those cases? I haven't found documentation
[12:49:05] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[12:49:05] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[12:49:05] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[12:49:08] <ronald_mcdonald> Data is always separate unless specially declaring shared data
[12:49:12] <audgirka> soulisson, I think only the text region would be shared amongst the processes as those are the instructions that would need to be executed, data and stack would be independent
[12:50:15] <ronald_mcdonald> This has to be explicitly declared https://en.wikipedia.org/wiki/Shared_memory
[12:50:16] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[12:50:19] <ronald_mcdonald> The default is separate data
[12:50:53] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:51:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:51:22] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (Ping timeout: 272 seconds)
[12:52:10] *** Joins: Arahael (~arahael@60-240-135-223.tpgi.com.au)
[12:54:34] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:54:44] <soulisson> audgirka, ok. So let's say I start program.exe, the program modifies the data section. Is there a copy on write occurring (there are no other program.exe process) at that point
[12:55:07] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:55:16] <ronald_mcdonald> COW happens on forking
[12:55:24] <ronald_mcdonald> There wasn't any fork in your situation
[12:55:34] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:55:47] <Arahael> soulisson: On windows?  Windows doesn't implement fork().
[12:56:07] <ronald_mcdonald> Oh, I don't know much about the model in Windows
[12:56:09] *** Joins: gggp (~textual@124.126.15.211)
[12:56:20] <Arahael> ronald_mcdonald: I assume it's windows because it's the only OS that uses .exe's.
[12:56:58] <soulisson> Arahael, yes, it's windows.
[12:57:08] <soulisson> Windows has COW.
[12:59:12] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[12:59:51] *** Joins: teut (~teut@182.68.62.72)
[12:59:54] <teut> Uploaded file: https://uploads.kiwiirc.com/files/a11779790476b91f766aed486840f7cf/image.png
[13:00:09] <teut> the book says 8000h should be negative
[13:00:27] <Arahael> soulisson: I think I've missed too much of the discussion to comment further.
[13:00:38] <teut> but in python shell it's positive
[13:00:42] *** Quits: gggp (~textual@124.126.15.211) (Ping timeout: 252 seconds)
[13:00:56] <teut> python uses unsigned?
[13:01:00] <GeDaMo> teut: it depends on the size of the word
[13:01:04] *** Joins: Tazmainian (~Tazmainia@102.39.160.82)
[13:01:13] <Arahael> teut: 8000h is an unsigned number, if you want it to be negative, it should explicitly be so.
[13:01:21] <Arahael> teut: Python has arbitrary-sized integers.
[13:01:35] <GeDaMo> Which book are you reading?
[13:01:42] <GeDaMo> Is it based on a 16 bit CPU?
[13:01:44] <teut> Art Of Intel x86 Assembly
[13:01:48] <Arahael> teut: So you can't play games where you make your integers just so large that the high bit just happens to collide with the sign bit. :)
[13:02:05] <GeDaMo> The text says "For 16-bit numbers"
[13:02:11] <teut> wgat do you mean by arbitrary sized?
[13:02:30] <deniska> teut: python doesn't limit numbers by any specific number of bits
[13:02:31] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[13:02:33] <teut> are you saying python uses malloc?
[13:02:42] <deniska> teut: they may grow as large as you have RAM
[13:02:50] <Arahael> teut: Eg, if you compute 16**76 (16 to the power of 76), python will do so for you, correctly, and use a suitably-sized number for it.
[13:03:12] <teut> can you tell how to do such a thing in c ?
[13:03:17] <teut> whatever python is doing
[13:03:20] <ronald_mcdonald> teut, schoolbook multiplication
[13:03:25] <ronald_mcdonald> Multiply digit by digit
[13:03:26] <rindolf> teut: gmp
[13:03:30] <GeDaMo> In C, you can use a int16_t type
[13:03:31] <deniska> in C you'd need to use some sort of library for big integers (or invent your own)
[13:03:34] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:03:37] <teut> but in c  int has a range of int
[13:03:40] <GeDaMo> Oh, sorry
[13:03:42] <Arahael> teut: Link in libgmp, perhaps.  But that's GPL.
[13:03:45] <teut> int has a range*
[13:03:47] <ronald_mcdonald> Except using a larger base than 10
[13:03:48] <soulisson> Arahael, ok, my question was related to what happens when sections in memory like ".data" ".bss" gets modified by a process. I know that if those memory pages are mapped in virtual of several process, a copy will occur, ... My question is what happens if the dll is used by only one process for instance. Does the operating system cache the original data somewhere in memory or something else happens?
[13:03:55] <ronald_mcdonald> 10^9 is a good choice for 32 bit
[13:04:03] <rindolf> Arahael: it is LGPLed
[13:04:07] <ronald_mcdonald> remember to store the intermediate multiplication results as 64 bit ints
[13:04:24] <Arahael> soulisson: In windows, I believe each .dll has it's *own* process space, but I'm way over my head here.
[13:04:28] <Arahael> rindolf: Ah, neat.
[13:05:12] <soulisson> Arahael, ronald_mcdonald, ok, thank you.
[13:05:29] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[13:05:53] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[13:06:10] <Arahael> teut: In short, yes, python will allocate memory (eg, with malloc).
[13:06:57] <teut> ok, thats what I needed, thanks
[13:08:24] *** Quits: x00 (~x00@ool-44c1b49b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:08:28] <teut> 8000h is negative because the H.O. bit is one.      ,  do they mean  if I convert this from hex to bin then I can see a one in the high bit?
[13:09:02] <GeDaMo> Yes
[13:09:10] <Arahael> teut: In python `bin(0x8000)` results in '0b1000000000000000', so you can see how many bits there are.
[13:09:18] <GeDaMo> Each hex digit is 4 binary digits
[13:09:34] <teut> yes understood, they should tell me to convert the number to bin
[13:09:45] <Arahael> What?
[13:10:11] <GeDaMo> 0x8 is 0b1000
[13:10:13] <teut> I was thinking for so long that they just understand number is negative just by seeing the hex
[13:10:51] <Arahael> teut: That very much assumes a particular integer size and whether it's signed or not.
[13:11:31] <teut> the section is on signed numbers in the book so thats signed
[13:12:08] <Arahael> teut: Of a particular size.
[13:12:33] *** Joins: VoidFox (~voidfox@www.voidfox.de)
[13:13:05] <Arahael> teut: Eg, you put that 0x8000 number into a 32-bit signed integer, and it'll be a positive value.  However, 0x80000000 will result in a negative value there, because that's where the sign bit is for 32-bit signed integers.
[13:14:19] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[13:14:57] <GeDaMo> 0xFFFF8000 in a 32-bit value would be the same value as 0x8000 in a 16-bit value
[13:15:28] <GeDaMo> That sentence had too many values :|
[13:15:30] <Arahael> teut: As a excercise, can you explain why -1 is sometimes used to mean "true" in some languages?
[13:15:41] <teut> yes , I m thinking 1 more min plz
[13:16:22] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:931c:87ae:1f48:5683) (Quit: Leaving)
[13:16:36] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:931c:87ae:1f48:5683)
[13:16:45] *** Joins: gareppa (~gareppa@user/gareppa)
[13:16:51] *** Joins: aradesh (~aradesh@user/aradesh)
[13:16:52] <teut> 0x8000     in this  for fitting in 32 bit space, we pad left?
[13:17:36] <GeDaMo> You fill the higher bits with 1 if you want it to be negative
[13:18:01] <GeDaMo> That's called sign extending
[13:18:06] <Arahael> teut: The "the same value as ... in a 16-bit value" is extremely significant.
[13:18:16] <ronald_mcdonald> GeDaMo, I read "higher" as "nether"
[13:18:41] <teut> oh , thats why it says "HO" , I thought  just the first  bit 1 will be sufficient to make it -
[13:18:45] <Arahael> ronald_mcdonald: I read "nether" as "lower". :)
[13:18:54] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[13:18:55] *** Quits: guy_frm_yogaland (~gourab@117.228.45.142) (Ping timeout: 265 seconds)
[13:19:03] <GeDaMo> Well, if you like :P
[13:19:33] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238c:82bd:2153:c3cc:c84d:ccc0)
[13:19:59] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[13:20:17] <teut> thanks for the help
[13:21:14] <piou> Hey, I'm training a colleague for code review. I'm looking for java projects. I have some examples of my own of course, but I'd like to expand my horizon so if you think of well written open source java projects I would love to hear about those :)
[13:21:45] *** Joins: cadmio (~gidna@151.25.147.48)
[13:21:50] <cadmio> Hello
[13:21:52] <GeDaMo> x86 has some sign extending instructions e.g. CWD which copies the most significant bit of AX to fill DX
[13:21:59] <cadmio> is there a way to draw this arrow https://imgur.com/FdWWqQrl.png in HTML/Css ?
[13:22:03] *** Quits: frankfurt (~nick@59.88.24.196) (Quit: leaving)
[13:22:04] <rindolf> piou: hi
[13:22:31] <piou> o/
[13:22:51] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[13:23:04] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 252 seconds)
[13:23:21] <rindolf> piou: there is https://github.com/TheAlgorithms/Java
[13:23:42] <piou> Nice, thanks :)
[13:24:09] <rindolf> piou: you're welcome
[13:25:11] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[13:25:26] *** Joins: Crassus (~Crassus@user/crassus)
[13:25:56] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[13:26:56] *** Joins: soulisson_ (~soulisson@160.176.44.243)
[13:27:02] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:931c:87ae:1f48:5683) (Remote host closed the connection)
[13:27:21] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[13:27:22] *** Quits: soulisson_ (~soulisson@160.176.44.243) (Changing host)
[13:27:22] *** Joins: soulisson_ (~soulisson@user/soulisson)
[13:27:22] *** Quits: soulisson (~soulisson@user/soulisson) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[13:27:22] *** soulisson_ is now known as soulisson
[13:27:59] *** Parts: cadmio (~gidna@151.25.147.48) (WeeChat 2.3)
[13:28:15] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[13:31:45] *** Joins: raisingang (~paulo_@user/paulo/x-9032687)
[13:32:49] *** Joins: gggp (~textual@60.10.23.171)
[13:33:24] <rindolf> piou: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition j/k
[13:33:37] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[13:33:41] <ronald_mcdonald> rindolf, universe is big
[13:34:33] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238c:82bd:2153:c3cc:c84d:ccc0) (Read error: Connection reset by peer)
[13:36:13] <piou> That one's actually great ^_^
[13:36:32] *** Quits: SolderFlux (~Test@ool-2f105398.dyn.optonline.net) (Read error: Connection reset by peer)
[13:36:46] <rindolf> ronald_mcdonald: what?
[13:36:47] *** Joins: SolderFlux (~Test@ool-2f105398.dyn.optonline.net)
[13:37:33] <ronald_mcdonald> rindolf, our universe
[13:37:47] <ronald_mcdonald> I don't know about others. You'll have to ask those who live in them.
[13:38:02] *** Joins: Lyn (~Lyn@user/law)
[13:39:05] <rindolf> ronald_mcdonald: what does 'universe is big' has to do w anyting?
[13:39:19] *** Joins: SGautam (~SGautam@59.99.22.46)
[13:39:36] *** Quits: SGautam (~SGautam@59.99.22.46) (Remote host closed the connection)
[13:39:44] *** Joins: SGautam_ (~SGautam@59.99.22.46)
[13:40:01] <ronald_mcdonald> rindolf, there is a lot of room un the universe for bloated code
[13:40:26] <rindolf> ronald_mcdonald: ok...
[13:40:51] <deniska> if code wasn't bloated, we'd never have such huge advances in semiconductor industry :P
[13:41:06] <ronald_mcdonald> deniska, software is a gas that expands to fill all available hardware
[13:41:16] <ronald_mcdonald> and exerts pressure on the walls to expand more
[13:41:37] *** Joins: dhil (~dhil@195.213.192.47)
[13:42:09] <ronald_mcdonald> Hardware giveth, software taketh
[13:42:11] <deniska> imagine a world in which chrome would never be invented. We still would all be sitting on 1gb of RAM :D
[13:42:18] <ronald_mcdonald> Yes
[13:42:25] <ronald_mcdonald> deniska, also, video games
[13:42:41] <ronald_mcdonald> But today web pages have become heavier than video games and are the forefront for bloat
[13:42:55] <deniska> nowadays it's "yeah, sure, let's put the whole 200gb database in a ram disk"
[13:42:59] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[13:43:20] <rindolf> ronald_mcdonald: it is a scourge when it comes to sites: https://www.shlomifish.org/meta/FAQ/site_loads_quickly.xhtml
[13:43:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[13:43:35] <ronald_mcdonald> deniska, its worse for the frontend
[13:43:42] *** Quits: magla (~gelignite@55d43d25.access.ecotel.net) (Quit: Stay safe!)
[13:43:46] <ronald_mcdonald> people can be spendthrifts on servers
[13:43:57] <ronald_mcdonald> But not everyone can afford 64gb ram laptops
[13:43:59] <deniska> ronald_mcdonald: with a video game you have stricter realtime requirements than with a webpage
[13:44:07] <ronald_mcdonald> deniska, that too
[13:44:28] <deniska> a game has a frame budget, webpage doesn't, and the user's patience is another axis it can play around with :)
[13:44:47] <beeza> is there some generalization of this: https://en.wikipedia.org/wiki/Project_management_triangle
[13:45:32] <ronald_mcdonald> Yes, project maangement simplex
[13:45:37] <ronald_mcdonald> (j/k)
[13:46:04] <beeza> To me this is just a general concept of tradeoffs, if you have a finite budget, you can only spend it on some things
[13:46:26] <beeza> And if you spend it one one thing, that precludes you from spending it elsewhere
[13:46:33] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[13:47:22] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[13:48:26] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:48:58] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[13:49:05] <rindolf> deniska: sup?
[13:49:12] <deniska> nothing much
[13:50:47] <rindolf> https://www.wired.com/2016/04/average-webpage-now-size-original-doom/
[13:50:52] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[13:50:55] *** Quits: SGautam_ (~SGautam@59.99.22.46) (Read error: Connection reset by peer)
[13:51:05] <rindolf> deniska: ah :(
[13:53:30] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 240 seconds)
[13:57:04] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[13:57:29] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 256 seconds)
[13:59:42] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[14:01:19] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Quit: Konversation terminated!)
[14:01:34] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[14:02:06] *** Joins: entuland (~entuland@user/entuland)
[14:02:43] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Client Quit)
[14:02:58] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[14:04:52] *** Joins: peteyboy1 (~peteyboy1@95.169.229.12)
[14:06:01] *** Quits: SolderFlux (~Test@ool-2f105398.dyn.optonline.net) (Ping timeout: 246 seconds)
[14:09:54] *** Quits: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5) (Ping timeout: 272 seconds)
[14:11:47] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[14:14:33] *** Joins: inky (~inky@5.77.180.158)
[14:17:06] *** Quits: inky_ (~inky@141.136.76.78) (Ping timeout: 272 seconds)
[14:17:53] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[14:18:42] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[14:19:01] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[14:19:17] *** Joins: jinsun (~quassel@user/jinsun)
[14:22:53] *** Joins: gggp (~textual@60.10.23.171)
[14:25:15] *** Joins: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5)
[14:25:34] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[14:27:13] *** gggpkm_ is now known as gggpkm
[14:29:40] *** Joins: node1_ (~node1@103.206.8.74)
[14:29:52] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[14:30:07] <Arahael> That makes me tempted to disable javascript, again.
[14:30:25] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:8416:dd10:a8cd:d930) (Ping timeout: 272 seconds)
[14:36:09] *** Joins: node1 (~node1@user/node1)
[14:36:57] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 268 seconds)
[14:37:10] *** Quits: node1_ (~node1@103.206.8.74) (Read error: Connection reset by peer)
[14:37:45] *** Quits: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it) (Ping timeout: 258 seconds)
[14:39:47] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[14:40:17] *** Joins: gggp (~textual@60.10.194.47)
[14:42:15] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[14:45:05] <raisingang> hey :)
[14:45:57] <GeDaMo> Hi raisingang :)
[14:47:56] <raisingang> wtf
[14:48:03] <raisingang> I don'y remember sending that
[14:48:10] <raisingang> did I just have stroke
[14:48:54] <GeDaMo> :|
[14:50:26] *** Joins: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8)
[14:51:01] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[14:51:34] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:54:01] <rindolf> Arahael: yes.
[14:54:26] <rindolf> GeDaMo: sup?
[14:54:35] <GeDaMo> Not much
[14:54:46] *** Quits: raisingang (~paulo_@user/paulo/x-9032687) (Remote host closed the connection)
[14:54:59] <rindolf> GeDaMo: ah
[14:55:05] *** Joins: alexxxey (~Alexey@user/alexxey)
[14:55:54] <thomas_25> what happened to freenode?
[14:56:07] <GeDaMo> Freenode? Never heard of it :P
[14:56:10] *** gggpkm_ is now known as gggpkm
[14:56:17] <thomas_25> my nickserv registration went missing
[14:56:28] <Arahael> Sounds like a node went free.
[14:56:42] <thomas_25> some software channels are migrating to other networks due to some freenode politics drama?
[14:56:45] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[14:56:59] <rindolf> thomas_25: likely a mirage of my fears
[14:57:03] <Arahael> thomas_25: Well, that, and the new owners decided to just delete all the channels and accounts.
[14:57:13] <Arahael> thomas_25: ##freenode is probably a better place to discuss all this.
[14:57:17] <thomas_25> new owners?
[14:57:20] <thomas_25> Arahael true..
[14:57:31] <ronald_mcdonald> thomas_25, a lot of nickserv data is gone due to some servers being killed
[14:57:38] *** Quits: alexxxxxey (~Alexey@user/alexxey) (Ping timeout: 272 seconds)
[14:58:04] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:58:29] <Arahael> ronald_mcdonald: More than that.
[14:58:34] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:58:41] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 256 seconds)
[14:58:44] <teut> Uploaded file: https://uploads.kiwiirc.com/files/75fb444d86f2164cd515df1b0adaf4c4/image.png
[14:58:53] <Arahael> THey completely changed the network - now the only thing in common is the dns name.  They even changed the services and the ircd implementations themselves.
[14:59:00] *** Joins: Mangy_Dog (Mange@82-69-39-176.dsl.in-addr.zen.co.uk)
[14:59:00] *** Quits: Mangy_Dog (Mange@82-69-39-176.dsl.in-addr.zen.co.uk) (Changing host)
[14:59:00] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[14:59:29] <ronald_mcdonald> Arahael, yeah its a ghost town now
[14:59:33] <teut> here -2 to -1 how did they do it?  7th bit had a 1  so copying it to 6th bit  will make  11.... 1
[14:59:36] *** Joins: alexxxxxey (~Alexey@user/alexxey)
[14:59:57] <teut> according to this arithmetic shift
[15:00:17] <GeDaMo> -2 is 1111_1110
[15:00:26] <GeDaMo> -1 is 1111_1111
[15:00:32] *** Joins: rtypo (~alex@user/rtypo)
[15:01:09] <GeDaMo> An arithmetic right shift moves all the bits down one but copies the most significant bit
[15:01:26] <teut> ah right, I have some prior misconceptions which are causing the trouble
[15:01:26] <bjs> teut: exactly and all 1's is -1 :)
[15:01:28] <teut> thanks
[15:01:35] <teut> yes bjs
[15:01:57] <teut> its clear now, the rule to get negative is  not(x) + 1
[15:02:04] *** Quits: alexxxey (~Alexey@user/alexxey) (Ping timeout: 272 seconds)
[15:03:57] *** Joins: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0)
[15:05:39] *** Quits: jaysicks (~jaysicks@bc9c36d1.mobile.pool.telekom.hu) (Remote host closed the connection)
[15:05:45] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Read error: Connection reset by peer)
[15:06:24] *** Joins: jaysicks (~jaysicks@BC9C36D1.mobile.pool.telekom.hu)
[15:06:35] *** Joins: alexxxey (~Alexey@user/alexxey)
[15:06:55] <rindolf> teut: bitwise inverse?
[15:07:16] <teut> yes
[15:08:05] *** Quits: bklo (~bklo@c-67-164-91-68.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[15:08:37] *** Joins: rcoote (~rcoote@ip-109-40-131-71.web.vodafone.de)
[15:08:55] *** Joins: bklo (~bklo@c-67-164-91-68.hsd1.ca.comcast.net)
[15:09:02] *** Quits: alexxxxxey (~Alexey@user/alexxey) (Ping timeout: 272 seconds)
[15:09:11] *** Quits: freakazoid333 (~freakazoi@72.168.176.203) (Read error: Connection reset by peer)
[15:09:32] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
[15:10:12] <rindolf> teut: ok
[15:10:25] *** Joins: freakazoid333 (~freakazoi@72.168.176.141)
[15:13:49] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:13:57] *** Joins: node1 (~node1@user/node1)
[15:18:25] <Arahael> rindolf: I wonder what inverse bitwise would be? :)
[15:25:45] *** Quits: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8) (Read error: No route to host)
[15:26:07] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[15:26:22] *** Joins: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it)
[15:27:35] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[15:28:09] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[15:30:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[15:31:09] *** Joins: pulse (~pulse@user/pulse)
[15:31:38] *** Joins: xsperry (~as@user/xsperry)
[15:31:45] *** Quits: jaysicks (~jaysicks@BC9C36D1.mobile.pool.telekom.hu) (Remote host closed the connection)
[15:32:30] *** Joins: jaysicks (~jaysicks@BC9C36D1.unconfigured.pool.telekom.hu)
[15:32:33] *** Joins: jinsun__ (~quassel@user/jinsun)
[15:33:49] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[15:34:08] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[15:34:33] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[15:34:37] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[15:35:05] *** Joins: gggp (~textual@60.10.23.171)
[15:36:19] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[15:37:02] *** Joins: lalbornoz (~lalbornoz@185.213.155.163)
[15:37:03] *** Joins: lalbornoz_ (~lalbornoz@185.213.155.163)
[15:37:04] <lalbornoz> YOUR CHATS MAKE ME SO MAD I PUNCH HOLES IN MY WALL! THATS WHY I ONLY HANG OUT AT IRC.LIBERA.CHAT #MIDIPIX
[15:37:05] <lalbornoz_> YOUR CHATS MAKE ME SO MAD I PUNCH HOLES IN MY WALL! THATS WHY I ONLY HANG OUT AT IRC.LIBERA.CHAT #MIDIPIX
[15:37:25] *** Quits: lalbornoz (~lalbornoz@185.213.155.163) (Read error: Connection reset by peer)
[15:37:35] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:37:36] *** Quits: lalbornoz_ (~lalbornoz@185.213.155.163) (Remote host closed the connection)
[15:38:14] <mrig> Wrong lunar phase clearly :D
[15:38:27] <mrig> Hello
[15:39:26] *** Joins: jkl (~jkl@user/jkl)
[15:39:31] *** Quits: rcoote (~rcoote@ip-109-40-131-71.web.vodafone.de) (Quit: Konversation terminated!)
[15:40:19] *** pac-man is now known as blackop
[15:41:18] <pulse> must be american, you can't punch holes in the walls in most european homes
[15:41:57] <pulse> brick tends to punch back harder
[15:42:02] <p0g0> no drywall?
[15:42:37] <GeDaMo> There might be plasterboard but it's usually backed with brick or stone
[15:42:42] <mrig> Arahael: could be a bit unwise I suppose :)
[15:44:33] <mrig> bitwise is the electronic equivalent of being streetwise, but don't quote me on that.
[15:44:44] <mrig> GeDaMo: is a bitwise engineer :P
[15:45:28] <GeDaMo> 'Engineer' might be overselling it a bit :P
[15:46:13] <mrig> I finally put my URL unescape in the right place, back to html templates again. :)
[15:46:21] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Remote host closed the connection)
[15:46:39] <mrig> A bitwise programmer doesn't sound quite so flashy though!
[15:46:57] <mrig> Oh, I don' know, think that ok actually.
[15:47:07] <GeDaMo> Bit wrangler :P
[15:47:11] <mrig> heh
[15:47:27] <mrig> yay!;bit wrangler is awesome!
[15:48:04] <mrig> bit fiddler definitely smacks of a comic book villain.
[15:49:52] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:49:57] *** Joins: scabby (~scabby@user/scabootssca)
[15:50:43] *** Joins: jkl (~jkl@user/jkl)
[15:51:06] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 240 seconds)
[15:51:10] <pulse> how do i formalize a data structure like this; a thing can have 1, 2, or 3 rings, and each ring can have arbitrary number of components
[15:51:27] <ronald_mcdonald> What is a "ring"?
[15:51:32] <ronald_mcdonald> Ring as in algebra
[15:51:34] <ronald_mcdonald> or something else
[15:51:35] <pulse> a circular thing
[15:51:39] <pulse> just a visual ring
[15:51:42] <pulse> think orbital
[15:52:00] <ronald_mcdonald> ok? so just a list of lists
[15:52:15] <pulse> yeah but i don't want it to be a list of lists, i need some kind of compact representation
[15:52:25] <ronald_mcdonald> array/list is the most compact structure
[15:52:33] <pulse> actually i guess i could just do n_ring1 n_ring2 n_ring3
[15:52:34] <ronald_mcdonald> pulse, are you trying to replicate like a combination lock
[15:52:47] <pulse> ronald_mcdonald, no, it's for an effect for a game i'm working on
[15:52:53] *** Joins: archie (~archie@host-87-16-210-47.retail.telecomitalia.it)
[15:52:53] <pulse> actually i think i got it
[15:52:55] <pulse> nvm lol
[15:53:02] <ronald_mcdonald> Will the rings remain in the same relative configuration?
[15:53:07] <ronald_mcdonald> No, a circular buffer is not needed
[15:53:10] <pulse> no, they vary
[15:53:11] <ronald_mcdonald> if that was your realization
[15:53:20] <ronald_mcdonald> pulse, yeah just a list with a "start index" then
[15:53:31] <ronald_mcdonald> per ring
[15:53:57] *** Joins: [Kalisto] (~Nico@user/kalisto/x-8968079)
[15:54:01] <pulse> really all i need is the number of components per ring, how many rings there are, and how spaced out they are
[15:54:11] <mrig> I was just thinking about ring buffers.
[15:54:44] <ronald_mcdonald> are the component lists static
[15:54:54] <pulse> yep
[15:54:56] <ronald_mcdonald> ie will a ring always have the same components?
[15:55:00] <mrig> is there a particular name for a ring buffer that, if it contains an item, it removes from where it is in the list and floats it up to the top?
[15:55:08] <pulse> yes, and all i need is number of components
[15:55:10] <mrig> When reused.
[15:55:11] <pulse> i don't care what they actually are
[15:55:16] <pulse> it's just for a visual fx
[15:55:27] <pulse> nvm i got it
[15:55:28] <ronald_mcdonald> ok, so the "components" are just some circles or some other uniform thing?
[15:55:34] <pulse> yes
[15:55:57] <mrig> well I well just write one and worry about what it is called afterwards :)
[15:56:36] *** Joins: rcoote (~rcoote@ip-109-40-131-71.web.vodafone.de)
[15:56:43] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 258 seconds)
[16:00:08] *** Quits: archie (~archie@host-87-16-210-47.retail.telecomitalia.it) (Quit: Client closed)
[16:01:06] *** Quits: rcoote (~rcoote@ip-109-40-131-71.web.vodafone.de) (Read error: Connection reset by peer)
[16:01:20] *** Quits: jazzy (~jaziz@2600:380:8753:52bc:19c1:bcfb:6169:5fdf) (Ping timeout: 250 seconds)
[16:04:00] *** Parts: astroanax (~astroanax@2001:19f0:7402:f82:5400:1ff:fec4:f7d7) (WeeChat 3.1)
[16:04:35] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[16:05:24] *** Joins: alguien (~alguien@user/alguien)
[16:05:38] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:05:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:06:47] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[16:09:17] *** Joins: gry (~quassel@botters/gry)
[16:11:13] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 256 seconds)
[16:13:38] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 272 seconds)
[16:14:41] *** Joins: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net)
[16:17:26] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[16:17:57] *** Joins: mobidrop (~mobidrop@217-62-121-57.cable.dynamic.v4.ziggo.nl)
[16:19:34] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:20:11] *** Joins: Twipply (~Twipply@user/twipply)
[16:21:47] *** Quits: xff0x (~xff0x@2001:1a81:53b8:a100:fc31:6f5c:5a37:95a) (Ping timeout: 268 seconds)
[16:22:27] *** Joins: xff0x (~xff0x@2001:1a81:53b8:a100:f8a8:d5fd:e910:e3c0)
[16:26:12] *** Joins: brickfat (~brickfat@user/brickfat)
[16:26:20] *** Joins: Leone (~Leo@65-110-221-121.cpe.pppoe.ca)
[16:29:33] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[16:29:59] <Donitz> what are these mythical "minimum requirements" for online meetings which so much meeting softare is plagued by
[16:30:05] <Donitz> it must be something absolutely dumb
[16:30:12] <Donitz> for using backgrounds
[16:30:29] <Arahael> Donitz: That, plus they're often using a web browser and all that overhead as well.
[16:30:44] <Arahael> Donitz: The average website is now the same size as the original DOOM.
[16:30:47] <Donitz> Both zoom and webex do not allow my modern gaming PC to use virtual backgrounds
[16:30:54] <Donitz> it's so f*cking bullshirt
[16:30:57] <Donitz> bullshit*
[16:32:13] <mrig> no excuse for that on modern multi threaded machines, having a clean background should really reduce the bandwidth requirements.
[16:32:55] <mrig> and I would imagine that the upload bandwidth is the bottle neck on those systems.
[16:33:19] *** Quits: Asmodean (~Asmoedean@77.119.201.202.wireless.dyn.drei.com) (Quit: leaving)
[16:34:56] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[16:36:20] <ronald_mcdonald> Joanna, physics is harder than mathematics
[16:36:31] *** Quits: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5) (Ping timeout: 246 seconds)
[16:36:31] <ronald_mcdonald> Likewise writing software is harder than doing computer science
[16:36:51] <amigojapan> Donitz: fenderbassist. Green screen it :)
[16:38:45] *** Parts: printf (~printf@user/printf) (The Lounge - https://thelounge.chat)
[16:41:46] <amigojapan> How much of original basic from Dartmouth did bill gates just steal? Wasn't it open source? Or did he write a cover?
[16:41:47] <teut> Uploaded file: https://uploads.kiwiirc.com/files/245edba0c7af7059ba4357644520ac82/image.png
[16:41:58] <teut> arent there only 2  rectangles?
[16:42:27] <teut> the dark border one has side of length 1
[16:42:32] <teut> width*
[16:42:57] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[16:43:08] <ronald_mcdonald> teut, there are three
[16:43:12] <ronald_mcdonald> Two 2x2 rects and a 1x2
[16:43:15] <ronald_mcdonald> Two 2x2 rects and a 1x4
[16:43:21] <teut> why 1x2 rectangle?
[16:43:30] <ronald_mcdonald> 1x4
[16:43:31] <ronald_mcdonald> typo
[16:43:35] <teut> oh 2**0
[16:43:43] <teut> it gave me the feel of multiples of 2
[16:43:45] <teut> sorry
[16:47:30] * Arahael feels triggered: "No, those are squares".
[16:47:56] <teut> a rectangle is a superclass of square
[16:48:13] <teut> not in OOP ,  just geometrically
[16:48:24] <ronald_mcdonald> Arahael, hi
[16:48:42] <Arahael> ronald_mcdonald: Heh, yet another nick? :)
[16:48:57] <ronald_mcdonald> I am still a mcdonald
[16:49:09] <Arahael> Yes, but are you *old* mcdonald?
[16:49:12] *** Joins: scabby (~scabby@user/scabootssca)
[16:49:48] <ronald_mcdonald> Arahael, Ronald is quite old now
[16:50:16] <Arahael> Did you have a farm? :)
[16:50:53] <ronald_mcdonald> Yes, very successful business
[16:51:27] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 256 seconds)
[16:51:31] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[16:52:25] *** Joins: q-q (uid501539@user/q-q)
[16:52:25] *** Quits: jaysicks (~jaysicks@BC9C36D1.unconfigured.pool.telekom.hu) (Remote host closed the connection)
[16:52:56] *** Joins: jaysicks (~jaysicks@BC9C36D1.unconfigured.pool.telekom.hu)
[16:53:03] <Arahael> Pleased to hear of it.
[16:53:43] *** Quits: inky (~inky@5.77.180.158) (Ping timeout: 256 seconds)
[16:55:00] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[16:55:28] *** craftxbox is now known as snep
[16:56:18] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Ping timeout: 240 seconds)
[16:56:45] <password2> ah production software where you split the same string the same way for each item the string is split into
[16:57:15] <password2> ie: mYitem = mystring.split('char').at(i)
[16:57:22] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[16:58:02] *** Joins: Pickchea (~private@user/pickchea)
[16:58:16] <password2> for each value of i , XD
[16:58:18] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[16:58:40] *** Joins: cliluw (~cliluw@47.147.80.149)
[16:58:44] <gggpkm> what is the popular memory key value database nowdays
[16:58:53] <ronald_mcdonald> std::map
[16:58:59] <ronald_mcdonald> (j/k)
[17:02:24] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86)
[17:03:34] *** Joins: jinsun (~quassel@user/jinsun)
[17:04:41] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[17:05:03] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[17:05:09] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[17:07:53] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 256 seconds)
[17:11:38] *** Joins: Asmodean (~quassel@165.22.94.154)
[17:12:25] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Ping timeout: 256 seconds)
[17:12:44] *** Quits: Guest33 (~textual@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:13:30] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86) (Ping timeout: 240 seconds)
[17:13:44] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86)
[17:20:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:21:58] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:24:06] <rindolf> merijn: hi
[17:24:56] <merijn> Just noticed my autojoin from freenode was bouncing due to channel name change :p
[17:25:37] *** Quits: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0) (Ping timeout: 246 seconds)
[17:27:43] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[17:29:25] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:32:13] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:32:39] <password2> but but , this is not freenood
[17:32:52] <password2> did you copy autojoins?
[17:33:25] <merijn> I copied the entire config directly, yes :p
[17:33:31] <merijn> This is the only channel that changed names
[17:33:36] <password2> thats smart than i am
[17:33:37] <password2> :D
[17:33:57] *** Joins: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5)
[17:34:16] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie)))
[17:34:40] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[17:35:05] *** Quits: Tazmainian (~Tazmainia@102.39.160.82) (Ping timeout: 256 seconds)
[17:36:21] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[17:36:29] <Arahael> merijn: This channel didn't change names, but we did have #programming here for a bit as well, maybe you had configured it for that one until we merged?
[17:36:49] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[17:38:12] * Arahael heads to bed!
[17:39:46] *** Joins: Guest53 (~textual@170.250.221.149)
[17:39:48] <pyzozord> Anyone has any experience with ocaml?
[17:40:08] <pyzozord> I don't know anything about it but the creator of onivim seems to like it thttps://www.youtube.com/watch?v=Pi8qRg_gseQ
[17:40:19] <pyzozord> and I liked onivim1 even when it was based on electorn
[17:41:33] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[17:41:41] *** Joins: inky (~inky@5.77.180.158)
[17:43:32] *** Joins: xavie (~xavie@176-139-252-198.abo.bbox.fr)
[17:43:53] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[17:45:01] *** Joins: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193)
[17:45:07] *** Joins: brickfat (~brickfat@user/brickfat)
[17:45:52] *** Quits: tonsofpc1 (~tonsofpcs@cpe-67-251-117-244.stny.res.rr.com) (Ping timeout: 272 seconds)
[17:46:54] *** Joins: tonsofpcs (~tonsofpcs@cpe-67-251-117-244.stny.res.rr.com)
[17:47:34] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 246 seconds)
[17:48:36] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[17:48:50] <Arahael> pyzozord: it's on my list to learn, i have used several ocaml-like lnaguages (to vaying degrees) and they have all been good.
[17:49:46] <Arahael> pyzozord: but i feel haskell is somehow more popular.
[17:50:13] *** Quits: dhil (~dhil@195.213.192.47) (Remote host closed the connection)
[17:51:30] <merijn> Arahael: Learning ocaml if you know haskell is pretty easy
[17:51:41] <merijn> Arahael: It's like learning Ruby of you know python
[17:52:15] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie)))
[17:52:17] *** xavie is now known as xcombelle
[17:52:19] <merijn> pyzozord: I helped teach Functional Programming using ocaml for a few years. It's pretty nice, but I prefer Haskell :p
[17:52:40] *** Joins: xavie (~xavie@176-139-252-198.abo.bbox.fr)
[17:53:58] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:54:11] <Thedarkb-Desktop> I can't turn my ideas into functional programming.
[17:54:35] <pyzozord> Is the statement "ocaml is often regarded as the c of functional languages because how fast it is" accurate?
[17:54:36] <Thedarkb-Desktop> QBASIC, x86 assembly, and worst of all C have damaged me past the point of no return...
[17:54:36] <password2> Thedarkb-Desktop, make mistakes :D
[17:54:54] <pyzozord> I don't know anything about ocaml, how do you guys categorize it and what do you think about it?
[17:55:08] <password2> i just kinda kicked myself for writing shitty code
[17:55:23] *** Quits: peteyboy1 (~peteyboy1@95.169.229.12) (Quit: Leaving)
[17:55:38] *** Joins: peteyboy1 (~peteyboy1@95.169.229.12)
[17:55:43] <Arahael> merijn: yes, i have that impression. :)
[17:56:20] <merijn> pyzozord: I don't think ocaml is inherently faster than Haskell
[17:56:24] <pulse> i find C much more enlightened than any functional language
[17:56:34] <merijn> pyzozord: It's slightly easier to reason about ocaml performance, due to ocaml being strict
[17:56:37] <pulse> idk why everyone wants to mathematize programming
[17:56:57] <pulse> seems almost like a weird obsession
[17:56:58] <Arahael> Thedarkb-Desktop: i started with qbasic, c++, then python.  and i'm doing ok!
[17:57:13] <merijn> pyzozord: But not much more
[17:57:39] <merijn> pyzozord: In general the compiled functional language have pretty decent performance, especially compared to their abstraction power
[17:58:10] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[17:58:37] <merijn> Of course, talking about "performance of a language" is kinda meaningless anyway, since it's more about the *implementation* of a language AND the code you write in it
[17:58:53] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 256 seconds)
[17:59:06] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[17:59:17] <pyzozord> merijn: thanks!
[17:59:20] <merijn> pyzozord: But (in completely meaningless hand-wavy terms) Haskell/Ocaml tend to sit somewhere in between C and Java in terms of performance.
[17:59:35] <Arahael> eg, javascript.  by all, rights it should be a "slow" language.
[17:59:53] <rindolf> Thedarkb-Desktop: “The best time to plant a tree was 20 years ago. The second best time to plant a tree is now.”
[18:00:26] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[18:00:36] <merijn> pyzozord: I'd probably pick Haskell over Ocaml for a few reasons: 1) learning pure FP is more educational than impure FP like ocaml, 2) more active community and libraries, 3) nice syntax/tools, imo
[18:00:52] <merijn> pyzozord: And going from Haskell to ocaml or SML is generally pretty trivial
[18:00:57] <gry> rindolf: have you used openbsd before
[18:01:06] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 240 seconds)
[18:01:06] <merijn> pyzozord: Like I said, similar to going from Python to Ruby or from Java to C#
[18:01:32] <merijn> pyzozord: Oh, duh, I forgot to mention non-strictness as bullet point. Non-strictness is great
[18:03:21] <pyzozord> merijn: so Haskell is less strict than ocaml? In my mind Haskell was this most pure and strict fp language out there
[18:03:35] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[18:03:54] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:04:09] <merijn> pyzozord: "non-strict" refers to evaluation strategy
[18:04:11] <Arahael> pyzozord: "strict" doesnt mean what most people think it means.
[18:04:34] <merijn> pyzozord: People will usually call it laziness, but that's...not technically correct
[18:05:04] <pyzozord> ah I see so this is not about type sctrictness this is about evaluation time strictness?
[18:05:10] <merijn> pyzozord: Yes
[18:05:33] <merijn> pyzozord: Which means you can have "on-demand" evaluation of data structures, which is convenient for many programming problems
[18:05:57] <Arahael> infinite lists!
[18:06:12] <Arahael> infinite recursion!
[18:06:46] <merijn> Arahael: tbh, I quite like the knot-tying time-travel tricks
[18:06:58] <Arahael> but more seriously, it lets you define your own control structures trivially (like "if")
[18:07:00] <merijn> But those are fairly rare in practice
[18:07:18] <merijn> Arahael: Have you seen the Tardis monad before?
[18:07:32] <beaky> what is the tardis monad
[18:07:37] <Arahael> merijn: heh. it only bites me when i'm testing and i forget it's lazy!  i have not heard of the Tardis monad.  huge on the inside?
[18:07:46] <merijn> beaky: State, but going forwards *and* backwards
[18:07:54] <merijn> Arahael: No, time travel :p
[18:08:11] <merijn> Arahael: It's State, but you sent state forwards *and* backwards
[18:08:20] <merijn> It's...very confusing
[18:08:34] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Ping timeout: 246 seconds)
[18:08:48] <Arahael> merijn: i'm very familiar with the time and relative distance in space.
[18:08:50] <merijn> Arahael: https://hackage.haskell.org/package/tardis
[18:08:53] <Arahael> thanks!
[18:08:57] <merijn> *dimension
[18:09:02] <merijn> Not distance!
[18:09:20] <beaky> nice if only i can rewind time on my teas
[18:09:35] <rindolf> gry: hi, not directly; also: https://github.com/shlomif/why-my-projects-cannot-support-netbsd-yet
[18:10:00] <beaky> i like openbsd it feels like a whole system
[18:10:22] <gry> rindolf: ok thanks
[18:10:56] <rindolf> gry: you're welcome
[18:11:04] <Arahael> merijn: oh, yes. indeed.  midnight here i am afraid!
[18:11:44] <Arahael> merijn: the example provided in the tardis monad is not illuminating! but it's midnight so will just keep the browser tab open :)
[18:12:49] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[18:15:15] <paulo_> https://pastebin.com/wLp2aChx
[18:15:27] <paulo_> I'm surprised this worked on the first run
[18:15:33] <password2> keeping a compilaiton warning in my code because i can just double click it to get back to the function i am working on
[18:15:35] <paulo_> guess I'm ready for that DSA interview
[18:16:49] <merijn> Arahael: Tardis is like ContT
[18:17:02] <merijn> Arahael: If you feel like you understand, you probably didn't xD
[18:17:43] <KillerWasp> who did not use BASIC, did not have a childhood.
[18:18:11] *** Joins: CoderGuy (~CoderGuy@2601:644:101:4f20:b017:f264:38f1:7c87)
[18:19:20] <password2> who did not use BASIC did have a childhood
[18:20:19] <rindolf> paulo_: nice
[18:21:06] <pyzozord> merijn: btw why do you think lazy evaluation is a bad term (in this context (?))?
[18:21:17] <merijn> pyzozord: I don't think it
[18:21:18] <gry> is there a kids friendly BASIC textbook
[18:21:27] <merijn> it's a *bad* term, I think it's a *wrong* term :p
[18:21:44] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[18:21:46] <pyzozord> merijn: oh I see, why so?
[18:21:56] <merijn> pyzozord: The two terms mean *slightly* different thing
[18:22:00] <rindolf> paulo_: line 44 can just be 'while (fast != null){' imho
[18:22:08] <Arahael> merijn: i definitely dont feel i understand :)
[18:22:31] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[18:22:36] <CoderGuy> I have a question about encryption and 12 word phrases
[18:22:41] <merijn> "lazy" = things are only evaluated once they're needed. "non-strict" = things that only work if things are evaluated on demand should work
[18:22:55] <CoderGuy> how is it possible that a 12 word phrase can be decoded into a password and private key?
[18:23:09] <merijn> pyzozord: These two things superficially sound the same, but if the language was *required* to be lazy, it means lots of optimisation become wrong
[18:23:21] <Arahael> pyzozord: with non-strict evaluation, the runtime is allowed to evaluate it multiple times for no reason.
[18:23:42] <merijn> pyzozord: Non-strict means the compiler is allowed to make things strict *if* it can statically guarantee the strict version *always* has the same result as the lazy one
[18:23:44] <KillerWasp> password2# naah, I had a childhood, I thank my parents for buying me a machine with built-in programming languages instead of toys. :3
[18:24:04] <pyzozord> merijn: ah i see so a more accurate term would be "maybe-lazy evaluation"? :D
[18:24:13] <merijn> pyzozord: Roughly, yes
[18:24:26] <CoderGuy> ohhh is the 12 word phrase a combination of the password in the first 6 words and then the key in the next 6?
[18:24:27] <pyzozord> merijn: got it, thanks for explaining :)
[18:24:51] <merijn> pyzozord: For example, if you have tight numeric loops, GHC will just put the value in a register and increment that and skip all the overhead of laziness if it can prove your code never relies on laziness
[18:25:04] <Arahael> pyzozord: it means you have to define your functions so that you never have side effects.  if there are no side effects, it's all good.
[18:25:05] <merijn> pyzozord: That would technically be a bug if the language *required* laziness
[18:25:30] <merijn> pyzozord: But the language only requires that "code that would work lazily, has to work"
[18:25:58] <merijn> A valid (but stupid) implementation could default to computing everything strict and use a timeout to fall back to lazy evaluation if it takes too long
[18:26:05] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 256 seconds)
[18:26:25] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[18:26:37] <merijn> In practice GHC default to laziness except where static analysis shows that strict code is always equivalent (i.e. no infinite loops)
[18:27:12] <paulo_> rindolf: thanks
[18:27:15] *** Joins: feldman (~brian.fel@ool-457194f5.dyn.optonline.net)
[18:27:42] <Arahael> i actually find purescript difficult to use.  it's a strict language, but is otherwise almost identical to haskell.  keeps tripping me up.
[18:27:48] <rindolf> paulo_: you're welcome
[18:28:00] <Arahael> i remember listing a directory, and bam! stackoverflow.
[18:28:23] *** Joins: arcatech (~arcatech@user/arcatech)
[18:29:08] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[18:29:17] <password2> KillerWasp, your reality is warped man  :D
[18:29:30] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 240 seconds)
[18:29:58] <Arahael> password2: that's a given.  due to the qbasic. :)
[18:30:18] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[18:30:29] <Arahael> (and yes.  mine is pretty warped too, for similar reasons)
[18:30:50] <KillerWasp> Arahael# lol
[18:31:01] <ronald_mcdonald> Is ocaml a good language for learning fp?
[18:31:06] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[18:31:11] <merijn> ronald_mcdonald: Good enough
[18:31:36] *** Quits: feldman (~brian.fel@ool-457194f5.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:31:53] <merijn> ronald_mcdonald: I'd personally recommend Haskell higher, but Ocaml is decent enough. Might want to consider F# too, which is basically just "Microsoft Ocaml"
[18:31:56] *** Joins: feldman (~feldman@ool-457194f5.dyn.optonline.net)
[18:31:56] <ronald_mcdonald> I have a probably irrational distaste for haskell, which I why I was mulling over ocaml
[18:32:05] <KillerWasp> having a warped reality is much better than the virtual reality of modern games. I definitely recommend QBasic to experience it.
[18:32:14] <merijn> (which might be useful if you do a lot of .NET/C#/microsoft stuff)
[18:32:24] <Arahael> KillerWasp: i never play modern games.
[18:32:35] <KillerWasp> It is like traveling in another dimension.
[18:32:37] <Arahael> F# is pretty decent.
[18:32:45] <ronald_mcdonald> Basically I would prefer something that doesn't get fanatical about purity and anti-imperativeness etc
[18:32:52] <ronald_mcdonald> Some escape hatches and flexibility is nice
[18:33:00] <merijn> ronald_mcdonald: Haskell isn't fanatical about non-imperativeness
[18:33:04] <merijn> ronald_mcdonald: lol
[18:33:10] <KillerWasp> Arahael# I have not played it either, but I have seen videos on youtube.
[18:33:15] <ronald_mcdonald> Its syntax still feels very alien and annoying to me
[18:33:18] <merijn> ronald_mcdonald: Haskell has like 12 different escape hatches that like you break basically everything :p
[18:33:28] <Arahael> ronald_mcdonald: haskell does have escape hatches, but you almost never actually need them.
[18:33:31] <ronald_mcdonald> I remember reading some short ocaml snippets as part of some other text I think
[18:33:32] <merijn> ronald_mcdonald: But somehow the internet Haskell memes like to pretend they don't exist
[18:33:40] <ronald_mcdonald> And what I remember of it, it felt quite pleasant
[18:33:53] <ronald_mcdonald> merijn, oh and yes
[18:34:04] <ronald_mcdonald> Those "monad" and "functor" memes have increased my distaste further
[18:34:15] <merijn> ronald_mcdonald: I mean, if you really want it there's "unsafeCoerce" which is basically about as safe and principled as reinterpret_cast is :p
[18:34:43] <ronald_mcdonald> Also, ocaml people actually have done some real work with it
[18:34:48] <ronald_mcdonald> Haskell is still in the hipster stage
[18:34:52] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:35:23] <merijn> I'd say there's more "real" work in haskell than ocaml, tbh
[18:35:33] <merijn> I think at this point Ocaml is just Jane Street?
[18:35:39] <Arahael> ocaml seems rare.
[18:35:43] <merijn> Is anyone else using it in production at scale?
[18:36:28] <merijn> I know Standard Chartered Bank, Facebook, one other big UK bank (I forgot the name of), Target and a bunch of others have non-trivial Haskell deployments
[18:36:46] <piou> I know my PDF reader is written in some caml (I think it's ocaml), so there are some real projects out there that are maintained and useful at least
[18:36:58] <merijn> I'm not super up-to-date on ocaml, but I don't have the impression it sees more industry use
[18:37:19] <ronald_mcdonald> I didn't know finance people loved haskell
[18:37:30] <merijn> piou: Oh sure, I'm not saying there's nothing in ocaml. But I'm skeptical that ocaml is bigger than Haskell
[18:37:40] <Arahael> ronald_mcdonald: haskell does need better docks written by people who can explain it to new users, though.   monad and functor is pretty easy once you know it, but it takes a long time to figure out the cryptic doco-jargon people use. (and no, saying it's "like a burrito" doesn't help either!)
[18:37:57] <Arahael> *docs
[18:38:06] <pulse> functional people are out of their collective minds
[18:38:07] <merijn> Arahael: #haskell-docs and help Hecate ;)
[18:38:16] <pulse> if you can't do it in C it's not worth doing :p
[18:38:37] <ronald_mcdonald> Yeah I actually have to force myself and fight against my inner voice a lot
[18:38:40] <Arahael> merijn: hmm, i'll join :)
[18:38:56] <ronald_mcdonald> I don't like when its unclear how something executes in hardware
[18:39:05] <merijn> ronald_mcdonald: Do I have the paper for you!
[18:39:10] <ronald_mcdonald> paper?
[18:39:14] <Arahael> ronald_mcdonald: best avoid c then!
[18:39:46] <ronald_mcdonald> Arahael, I didn't say I need to know everything. Even asm sits 2-3 levels above reality these days. But it gives a sufficient enough idea of whats happening when you write some code.
[18:39:47] <merijn> ronald_mcdonald: There's a very nice write up on how to compile lazy FP. Doesn't require much more than knowing function aplication/lambda/case-of
[18:40:00] <merijn> ronald_mcdonald: Some basic C/asm knowledge would help
[18:40:19] <ronald_mcdonald> That would be a very useful paper to at least assuage myself a bit
[18:40:45] <merijn> ronald_mcdonald: http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.53.3729
[18:40:49] *** Parts: Asmodean (~quassel@165.22.94.154) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:41:06] <merijn> Don't let the title intimidate you, it's a fairly accessible read (although a bit long)
[18:41:33] <pulse> https://i.imgur.com/lf9uCao.jpg
[18:41:35] <KillerWasp> I remember that the books and magazines of the 80s / 90s, taught you a lot about programming, and had many challenges and codes to analyze.
[18:41:45] <merijn> ronald_mcdonald: The details are a bit dated, but the high level ideas are a good starting point
[18:41:59] <ronald_mcdonald> Good good, thats good news
[18:42:01] * Arahael gets to bed! finally!  g'night!
[18:42:07] <ronald_mcdonald> Sleep well bro
[18:42:08] <merijn> pulse: 'putStrLn "Hello World!"'
[18:42:08] <KillerWasp> Arahael# gn
[18:42:23] <merijn> pulse: That's simpler than C/C++ :p
[18:42:27] *** Joins: Guest35 (~Guest35@2a01:5ec0:1800:2804:94f7:a6f:22a8:6c0e)
[18:42:39] <KillerWasp> merijn# PRINT "Hello World!"
[18:42:40] <ronald_mcdonald> Oh, it emits C not asm
[18:42:44] <KillerWasp> this's more simple
[18:42:46] <ronald_mcdonald> Still a useful first ste
[18:42:47] <ronald_mcdonald> Still a useful first step
[18:42:58] <merijn> Granted, if you wanted a compiling program it becomes the slightly more complicated: 'main = putStrLn "Hello World!"'
[18:43:14] <KillerWasp> PRINT == print
[18:43:23] <Guest35> Why don't phones use normal usb?
[18:43:23] <KillerWasp> putStrLn == print#%&$$%^&#$
[18:43:26] <merijn> ronald_mcdonald: GHC doesn't use C any more (hasn't for more than 2 decades, tbh) but one of the earliest versions generated C, yes
[18:43:54] <ronald_mcdonald> merijn, I meant that paper
[18:44:12] <pulse> nothing is simpler than C
[18:44:13] <pulse> NOTHING
[18:44:19] <merijn> ronald_mcdonald: Yeah, it takes a super minimal functional language and talks mostly about relating it to C/asm constructs
[18:44:19] * pulse sticks fingers in ears
[18:44:25] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[18:44:26] <KillerWasp> pulse# except ASM
[18:44:32] <pulse> lalala i can't hear you
[18:44:36] <KillerWasp> each instruction is very simple
[18:44:38] <ronald_mcdonald> That should work for me as a high level overview of the process yes
[18:44:44] <KillerWasp> xD
[18:44:52] * pulse trips over a void pointer
[18:45:06] <rindolf> asm is simple... hah
[18:45:06] <KillerWasp> avoid*pulse;
[18:45:43] <Guest35> Why don't phones use normal usb?
[18:46:04] <pulse> why don't iphones use normal usb like every other phone
[18:46:14] <ronald_mcdonald> Apple are hipsters
[18:46:14] <merijn> ronald_mcdonald: In reality it can't *quite* use C, because the calling convention is wrong (we don't wanna use CALL for Haskell, we just want to JMP), but that's a fairly minor detail
[18:46:36] <Guest35> No i mean the normal rectangular ones
[18:46:40] <ronald_mcdonald> Does haskell have its own standards for passing args?
[18:46:41] *** Quits: feldman (~feldman@ool-457194f5.dyn.optonline.net) (Quit: feldman)
[18:46:41] <xcombelle> nothing is simpler than C except making a program which has zero undefined behavior
[18:46:45] <merijn> ronald_mcdonald: But I think it explains the ugly hack for post-processing C to fix that in the paper too
[18:46:49] <Guest35> Usb without prefix
[18:47:13] <merijn> xcombelle: Making a program with zero undefined behaviour in C is easy!
[18:47:27] <merijn> xcombelle: "int main(int argc, char** argv) { return 0; }" !
[18:47:37] <xcombelle> lol
[18:47:42] <merijn> xcombelle: Now, if you want it to actually do anything, then it becomes tricky... :p
[18:47:45] <pulse> merijn solved both the UB and the halting problem in one go
[18:48:06] <Guest35> xcombelle: empty file is easier
[18:48:50] <xcombelle> empty file is not an executable program
[18:48:52] * Guest35 is super clever c wizard
[18:49:07] <merijn> The halting problem is easy to solve, you just gotta abandon Turing completeness
[18:49:14] <merijn> But Turing completeness is overrated anyway
[18:49:15] <Guest35> xcombelle: compile andd run
[18:49:53] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 256 seconds)
[18:49:59] <xcombelle> if someone want to know the in and the out of undefined behavior this post should help https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
[18:50:12] <Guest35> It is the simplest self-printing c program
[18:50:59] *** Quits: cyndaquil (~job@user/job) (Remote host closed the connection)
[18:51:29] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[18:51:39] <Guest35> Btw, why no phone uses normal rectangular usb as found in pcs?
[18:52:13] <AlexDelarge> because Iran
[18:52:38] <DPA> I don't see why the halting problem is actually a problem. As long as you don't feed the halting checker program to itself, everything is perfectly fine and deterministic. Just define this special state as "indeterminable", and call it a day.
[18:52:44] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[18:53:17] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 256 seconds)
[18:53:34] <Guest35> AlexDelarge: why Iran out of everywhere? I am connecting over vpn!
[18:54:36] *** Joins: mohawk (~a0ee4ab3@ircip2.mibbit.com)
[18:55:05] <xcombelle> Guest35: just tested it fails at link stage
[18:55:14] <merijn> DPA: That's not the only case, that's just the prove to show you can reason about the general case of all (Turing complete) programs
[18:55:30] <mohawk> hi I have some 1000+ lines output in vscode terminal how can I copy all of that as I am unable to scroll up. I made a mistake to not save it in a file
[18:55:34] <merijn> DPA: It's perfectly possible to have programming languages that don't suffer from the Halting problem
[18:55:41] *** Joins: snake (~snake@user/snake)
[18:56:09] <Guest35> xcombelle: worked with gcc last time
[18:56:13] <DPA> I don't believe that there are other cases.
[18:56:35] <Guest35> that was an ioccc entry as well
[18:56:36] <xcombelle> fail with clang on cygwin
[18:56:37] <merijn> because in reality most real programs don't actually need/use general recursion and unbounded loops. (Well, server request loops are one exception, but there's tricks for those)
[18:56:57] <xcombelle> Guest35: IOCCC has also make file
[18:57:23] <Guest35> No it was C
[18:58:27] <[o> merijn: wrong
[18:58:52] <Guest35> Really,why no phone uses normal rectangular usb as found in pcs?
[18:58:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:58:58] <[o> that's exactly what differentiates a programing language from markdowns and such
[18:59:09] *** Joins: varaindemian (~varaindem@86.124.78.162)
[18:59:19] <[o> turing completeness : - )
[18:59:51] <merijn> [o: eh...no
[19:00:07] <merijn> [o: Have a look at something like Agda and Idris and tell me it's not a programming language
[19:00:33] <merijn> Or for a simpler example: The Strongly Typed Lambda Calculus, which is strongly terminating
[19:00:35] <Guest35> Postscript is turing complete and still useless for programming
[19:00:55] <merijn> So many programmers ascribing magical properties to Turing completeness
[19:01:03] <[o> Guest35: still a programming language. it sucks, though
[19:01:13] <[o> there's nothing magical
[19:01:17] <[o> it just happens
[19:01:40] <[o> lambda calculus is not a programming language
[19:01:51] *** Joins: gggp (~textual@60.10.23.171)
[19:01:52] <Guest35> That is why they put JS in PDF, and i know js sucks and ps isnt pdf
[19:01:57] <merijn> [o: You're confused because it's so easy to accidentally make something Turing-complete, therefore *most* programming languages are Turing complete. That doesn't mean Turing completeness is required
[19:01:57] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[19:02:15] *** Joins: Akuli (~Akuli@82-203-163-66.bb.dnainternet.fi)
[19:02:19] <bjs> [o: why is lambda calculus not a programming language?
[19:02:23] <bjs> i don't follow your definition
[19:02:52] <[o> it's a formal system
[19:03:00] <merijn> [o: The Idris compiler is implemented in Idris and is very much a several 100k line program, despite Idris not being Turing-complete
[19:03:04] <merijn> How do you explain that?
[19:03:40] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[19:03:54] <xeno> of course lambda calculus is a programming language
[19:03:55] *** Joins: [-0-] (~Kevin@user/alexdelarge)
[19:04:09] <[o> so it's turing complete
[19:04:11] <bjs> [o: well it's a formal language, it has a syntax and rules for evaluating terms just like any other language
[19:04:15] <bjs> [o: yes
[19:04:19] <xeno> [o: yes, it's turing complete
[19:04:21] <[o> and it has recursion and shit
[19:04:28] <bjs> [o: yes do you even know what lambda calculus is?
[19:04:30] <bjs> :P
[19:04:30] <[o> so I take that back
[19:04:37] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 256 seconds)
[19:04:39] <[o> merijn said it wasn't turing complete
[19:04:46] <merijn> Idris isn't Turing complete
[19:04:51] <bjs> [o: you should read merijn's comments much much much more carefully if you think merijn said that
[19:04:56] *** Joins: alguien (~alguien@user/alguien)
[19:04:58] <merijn> *Strongly Typed* lambda calculus isn't Turing complete
[19:05:01] <bjs> ^
[19:05:06] <[o> [10:30] <merijn> Or for a simpler example: The Strongly Typed Lambda Calculus, which is strongly terminating
[19:05:10] <merijn> Untyped lambda calculus is Turing complete
[19:05:24] <merijn> I wasn't talking about the untyped one, though
[19:05:44] <[o> hmmmmm
[19:05:59] <merijn> [o: Look at this compiler source and tell me Idris isn't a programming language: https://github.com/idris-lang/Idris2/tree/master/src
[19:06:05] <bjs> merijn: is there where we say no real computer programming language is turing complete at all
[19:06:10] <bjs> because linear bounded
[19:06:27] <merijn> bjs: AH, see, that's not true!
[19:06:33] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[19:06:38] <merijn> bjs: No *implementation* of a programming language can be Turing complete
[19:06:44] <merijn> bjs: The language itself can be
[19:06:59] <bjs> merijn: the language that the implementations actually implement cannot be
[19:07:00] <bjs> :)
[19:07:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:07:33] <merijn> bjs: For the language to be Turing complete it just needs to allow for unbounded storage, the fact that you can't get the in reality is moot
[19:07:44] <bjs> merijn: it's not entirely moot
[19:07:44] <merijn> (but, does mean that C isn't even theoretically Turing complete!)
[19:07:52] <bjs> for it supports your assertion that you don't need actual TC to be useful
[19:08:06] <merijn> Because C *requires* a finite bound on storage
[19:08:10] <[o> ...
[19:08:46] <merijn> Every addressable object in C must have a valid corresponding pointer and pointers are, as required by the C spec, of finite size
[19:08:52] <xcombelle> terapbyte of memory is quite close to infinite memory for the purpose of the demonstration
[19:08:57] <DPA> Implementing an X compiler in an X turing-incomplete language is easy. The just add a "x-compiler" statement to the X language.
[19:08:57] *** Joins: Pickchea (~private@user/pickchea)
[19:09:02] <merijn> Which means there's a finite number of objects possible in any implementation of C
[19:09:20] <xeno> merijn: can you evaluate C as turing complete or not without including the underlying hardware?
[19:09:38] <bjs> Yes, the real "C" language doesn't talk about hardware at all
[19:10:04] <xeno> bjs: but does it dictate what the memory addresses are?
[19:10:12] <merijn> xeno: Yes, because the spec doesn't talk about hardware. But it does talk about pointers having a fixed and finite size and that all memory objects are pointer addressable
[19:10:21] *** Quits: [-0-] (~Kevin@user/alexdelarge) (Quit: -a- cheese bun)
[19:10:26] <xeno> bjs: iirc, C doesn't say that what is inside a memory cell can only be changed by the same C program
[19:10:32] <merijn> xeno: It doesn't dictate what they are, but since they must be finite *and* fixed, it's by definition bounded
[19:10:35] <bjs> xeno: it does not dictate what the addresses are, but it does put bounds on types. It says something along the lines of "you can take the address of any object" and the addresses have a fixed bound and so you cannot allocate forever
[19:10:39] <xeno> merijn: nope
[19:10:42] <bjs> or the argument goes roughly like so
[19:10:49] <merijn> xeno: Nope what?
[19:11:11] <xeno> merijn: you can have hardware where a value being put into one memory cell causes a block of memory cells to be swapped out
[19:11:25] <xeno> merijn: and then the storage will be infinite, while the addressing is finite
[19:11:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:11:37] <xeno> or wait a sec
[19:11:38] <xeno> no
[19:11:39] *** Quits: rifl (~user@user/rifl) (Quit: ERC (IRC client for Emacs 27.2))
[19:11:43] <bjs> xeno: the idea being that, if you believe the spec,  eventually you'll have so many C objects that you cannot have any more C objects since if you took the address it wouldn't be distinct  from all the other addresses and there's no more space. So there's a theoretical limit
[19:11:51] <merijn> xeno: That vioates the C abstract machine semantics :)
[19:11:53] <bjs> it's all very theoretical and a bit silly
[19:12:01] <merijn> xeno: So that's not C by definition ;)
[19:12:15] <merijn> bjs: Of course!
[19:12:18] <xeno> merijn: but then I guess quite a lot of C implementations are not C
[19:12:23] <DPA> Harvard architectures. You can have as many independently addressable memories as you want.
[19:12:33] *** Joins: rifl (~user@user/rifl)
[19:12:44] <bjs> xeno: in reality no implementation is really ever going to be exactly the same language as the spec it tries to implement
[19:12:54] <bjs> just an approximation and a best-effort attempt
[19:13:12] <[o> merijn: that doesn't violate anything. mapped memory is a real thing
[19:13:12] <bjs> I mean "actual" hardware is just a big FSM
[19:13:13] *** Joins: gggp (~textual@60.10.23.171)
[19:13:47] *** Joins: x00 (~x00@ool-44c1b49b.dyn.optonline.net)
[19:14:07] <Guest35> Btw, why no phone uses normal rectangular usb as found in pcs?
[19:14:16] <bjs> Guest35: have you seen how big they are?
[19:14:18] <merijn> [o: Lots of compiler do things that violate specs...
[19:14:33] <merijn> Just because it happens doesn't mean its correct
[19:16:36] <bjs> ... and I'd argue just because it violates the spec doesn't mean it's "wrong" either :P
[19:16:59] <merijn> bjs: I mean, at the theoretical level of discussion it is :p
[19:17:18] <merijn> bjs: The discussion wasn't "is this practical?" it was "is this Turing complete?"
[19:17:20] <bjs> specs exist in a land of hopeful idealism,  but in reality they often just physically are not implementable
[19:17:49] <xeno> merijn: then the question becomes; are there actually any real well defined turing complete languages?
[19:17:52] <bjs> merijn: okay but the point I'm making is "language spec is Turing complete" => "you cannot actually implement it" => "implementation doesn't match spec, but that's okay" => "Turing completeness isn't actually so important"
[19:17:56] <bjs> (for practical purposes)
[19:17:56] <xeno> merijn: and if so, which ones?
[19:17:58] <merijn> xeno: Sure
[19:18:08] <bjs> xeno: untyped lambda calculus :)
[19:18:09] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[19:18:09] <xeno> hm... I guess scheme would be one
[19:18:18] <merijn> xeno: Scheme, Haskell, Python, Ruby, probably Java?
[19:18:36] <bjs> depends how "real well" you want things to be defined.
[19:18:37] <xeno> well, hava have fixed reference sizes
[19:18:42] <xeno> *java
[19:18:43] <merijn> xeno: Does it?
[19:19:00] <merijn> xeno: I mean, current implementations do, but the Java spec afaik makes zero promises or requirements
[19:19:03] <xeno> come to think of it, no
[19:19:08] <merijn> xeno: It just says "references exist"
[19:19:10] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:15] <xeno> otherwise 32 bit vs 64 bit java would not be a thing :)
[19:19:19] *** Joins: Guest63 (~Guest63@195.59.68.214)
[19:19:22] <merijn> And leaves the details to the implementation :)
[19:19:58] *** Guest63 is now known as __that__
[19:20:09] <merijn> xeno: Which means you can make an implementation with variable size references, which can scale up to any size, allowing for unbounded references.
[19:20:30] <xcombelle> A 748-state binary Turing machine has been constructed that halts iff ZFC is inconsistent.[15] A 744-state Turing machine has been constructed that halts iff the Riemann hypothesis is false.[6][15] A 43-state Turing machine has been constructed that halts iff Goldbach's conjecture is false, and a 27-state machine for that conjecture has been proposed but not yet verified.[6][15]
[19:20:31] <merijn> Sure, your performance would be down the drain, but the abstract language spec doesn't care about performance and neither does Turing completeness :p
[19:21:04] <Guest35> bjs:just that? I would probably pay for a thick phone that works with usb. more battery or maybe sliding keyboard can fit in, as a bou
[19:21:16] <Guest35> N
[19:21:21] <Guest35> nus
[19:21:48] <bjs> Guest35: well you should ask phone manufacturers, they like thin phones.  They almost all *do* use USB, just a different connector
[19:21:50] <Guest35> damn touchscreens
[19:22:09] <bjs> you can buy (or make) little adapters that go from one type to another.
[19:22:32] <merijn> On an entirely unrelated note
[19:22:57] <xeno> merijn: I checked the spec, and yeah, Java does not have any requirements to the size of references
[19:23:04] <merijn> I don't suppose any of you have a GitHub action setup where gfortran gets cached via ccache? >.>
[19:23:43] <xeno> merijn: I sorta mixed up a bit because of thinking how the class file format and such is well defined,  but of course there's no references there
[19:24:08] <merijn> xeno: I wasn't 100% about Java anyway
[19:24:31] *** Quits: inky (~inky@5.77.180.158) (Ping timeout: 246 seconds)
[19:25:28] *** Joins: inky (~inky@141.136.79.203)
[19:27:19] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Ping timeout: 246 seconds)
[19:28:17] <DPA> Wait a minute, if I feed a compilers source to itself, I don't neccessarely get the same compiler out, I may get a different binary.
[19:28:17] <DPA> Why is this different with the halting problem? If I don't halt when the halting program says I should, but do if it says I shouldn't, then what is fed to the halting program can not be the whole program, it must have been the "previous iteration", if you will, with the initial state being both or none of the states.
[19:28:17] <DPA> Feed the whole thing to the halting program, and it should say correctly if it halts. Apply the inverter again, and it should be "wrong" again, but that is the program having been changed, been broken.
[19:28:17] <DPA> It isn't possible to feed a program to itself, that must always generate a new overall program.
[19:28:22] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[19:30:04] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.110)
[19:30:12] <bjs> DPA: I didn't really follow,  why does the halting problem imply you cannot have a program that does that?
[19:30:42] <W> DPA, the program in question is not a compiler
[19:32:48] *** Quits: mobidrop (~mobidrop@217-62-121-57.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[19:33:46] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 272 seconds)
[19:34:13] <W> (also, the program in question is never a real program, it's a mathematical hypothetical as part of a proof by contradiction)
[19:34:42] *** Joins: rifl` (~user@user/rifl)
[19:35:06] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 240 seconds)
[19:35:09] *** Joins: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com)
[19:35:32] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[19:36:25] *** Quits: rifl (~user@user/rifl) (Ping timeout: 246 seconds)
[19:36:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:36:56] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86) (Read error: Connection reset by peer)
[19:37:19] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86)
[19:37:27] *** Quits: dan01 (~dan01@2a02:2f0f:3017:4e00:1d5e:9ca9:6764:aff5) (Read error: Connection reset by peer)
[19:37:34] <DPA> Sure, but think about it, the whole reason the halting program can't work if it is to determine the result of a program that does what is the opposite of what it says it should, is because it is part of the program, it forms a new combined program.
[19:37:34] <DPA> That new program, should be feedable to the halting algorithm again, as outside the original overall program, thus being able to give the correct result. It just has to be defined what the result of the combined program or the halting algorithm is (they must be the opposite of each other), and there is nothing indeterminable anymore.
[19:38:15] <CoderGuy> DPA this is a complete misunderstanding of logic
[19:38:16] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[19:38:26] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[19:38:28] <bjs> DPA: well, this isn't a general thing it just happens to not work for the halting problem. There's no reason why you get a contradiction for _all_ programs
[19:39:01] <CoderGuy> DPA don't you understand that the halting problem is much like division by zero, it's not a magic trick, it's just a flaw in how logic works
[19:39:12] <bjs> DPA: e.g. the program that given a program returns a different program  <- you can feed the program to itself and nothing bad happens.
[19:39:25] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[19:39:41] *** Joins: tradar (~tradar@user/tradar)
[19:39:42] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[19:40:06] *** Quits: rifl` (~user@user/rifl) (Ping timeout: 272 seconds)
[19:41:13] <CoderGuy> "For any program f that might determine if programs halt, a "pathological" program g, called with some input, can pass its own source and its input to f and then specifically do the opposite of what f predicts g will do. No f can exist that handles this case."
[19:41:40] *** Joins: vicfred (~vicfred@user/vicfred)
[19:42:01] *** Quits: Guest35 (~Guest35@2a01:5ec0:1800:2804:94f7:a6f:22a8:6c0e) (Quit: Client closed)
[19:42:04] <W> the halting problem is not a flaw in how logic works. It is merely a proof that there is no program, on any Turing machine (or any lower model of computing that a Turing machine can emulate) that can evaluate programs for that same machine as to whether they halt or not and always get it right (for all possible programs)
[19:42:09] <CoderGuy> it simply states that because program g can have the opposite of the intended effects of function f, there is no function that can predict what g will do
[19:42:28] <CoderGuy> W yeah you said it better than me
[19:42:39] <CoderGuy> if you limit the amount of programs it's fine though
[19:43:11] <W> nor is halting special in any way here, this is a fundamental aspect of the flexibility of programming; any thing you can evaluate for a program, and can write programs that either match the evaluation or not, will have the same problem
[19:43:14] <CoderGuy> obviously if programs don't follow the rules chaos can happen, but you can totally follow the rules and determine if something halts right?
[19:43:29] <W> halting is simply taken as the default operation to check
[19:43:30] <bjs> CoderGuy: what rules?
[19:43:39] <CoderGuy> I mean the rules for what F is checking
[19:44:06] <CoderGuy> if F is designed to check a program in a specific way, clearly as long as G follows said rules, we can determine from F if g will halt no?
[19:44:10] <bjs> CoderGuy: i mean "f" in your example just checks if the program halts (on a given input)
[19:44:27] <W> CoderGuy, if you limit the amount of programs, it is not a Turing machine, it is a finite-state machine
[19:44:30] <CoderGuy> sure but said given input if it follows the rules for F checking it, then it can determine it right?
[19:44:43] <CoderGuy> okay then so for finite-state machines we can determine if they halt?
[19:44:55] <bjs> CoderGuy: well yes if "f" first checks if the program is a finite state automata or something, then you can say it can check for those programs only
[19:45:07] <CoderGuy> alright well that's cool
[19:45:09] <bjs> but there is no generic f that works for all programs.
[19:45:10] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Quit: WeeChat 3.1)
[19:45:24] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[19:45:29] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Quit: Leaving)
[19:45:31] <CoderGuy> yeah of course not, but as a coder I follow rules already so like, a function that can just evaluate what I coded given I followed the rules that'd be nice
[19:46:07] *** Quits: xavie (~xavie@176-139-252-198.abo.bbox.fr) (Remote host closed the connection)
[19:46:21] <bjs> CoderGuy: well "of course not" is well,  not at all obvious when you first learn it or why
[19:46:54] <CoderGuy> sure i'm just saying a function that can attempt to solve the BIG O of a function I coded, that'd be nice but that's hard because of the whole P != NP thing
[19:47:17] <bjs> CoderGuy: well that's not what you were saying and PvNP is not the halting problem
[19:47:22] <bjs> all problems in NP halt :)
[19:47:33] <merijn> CoderGuy: An example case is the strongly typed lambda calculus, which is strongly terminating (i.e. *all* evaluations halt eventually), so the Halting problem is trivial for STLC
[19:47:39] *** Parts: Beyondo (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) ()
[19:47:42] <merijn> CoderGuy: You can simply write a program the returns true :p
[19:47:47] <mohawk> hi how can I run same program parall 6 times
[19:47:48] *** Joins: Tazmainian (~Tazmainia@102.39.160.82)
[19:47:50] <CoderGuy> yeah i'm just saying by identifying that something can't be solved, to me a better question is "well what can be" and of things i'd like to see solved, idk telling me the BIG O would be nice
[19:47:57] <merijn> CoderGuy: However, STLC isn't Turing complete
[19:48:00] <W> fundamentally, however, these are mathematical topics, and approaching them from a programming angle will mislead you something fierce; you need a bit more rigour than that (which is why Turing formalized a "Turing machine" instead of just idly intuiting about what a bunch of relays or vacuum tubes could do if wired large enough)
[19:48:01] *** Joins: Beyondo (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[19:48:38] <GeDaMo> mohawk: which OS are you on? What sort of program?
[19:48:45] <merijn> CoderGuy: The real challenge is basically "how much computational power can you add to a language *without* accidentally making it Turing complete (and losing the ability to reason about termination)
[19:48:57] <CoderGuy> hmmm
[19:49:00] <bjs> well Turing invented those machines because he wanted to learn more about mathematics and numbers :)
[19:49:04] <mohawk> GeDaMo: I am on linux and I have a python program
[19:49:07] <merijn> CoderGuy: There's quite some research into this and the conclusion is "you can add quite a lot, but you gotta be careful"
[19:49:15] <CoderGuy> hahahha
[19:49:20] <CoderGuy> sure merijn that's a goood one
[19:49:36] <CoderGuy> ooo i'm glad some people are doing it
[19:49:44] <merijn> CoderGuy: Some examples would be: Agda, Coq, and Idris (the former are more theorem provers than programming language, but Idris is certainly intended to be a general purpose program)
[19:49:56] <merijn> *general purpose programming language
[19:49:58] <CoderGuy> ooo nice
[19:50:06] <GeDaMo> mohawk: you can run a program in the background with prog &
[19:50:25] <mohawk> GeDaMo: Thanks, I will read about it
[19:51:00] <CoderGuy> I feel like because the original coders didn't have access to hardware, they were able to think outside the box more because they weren't busy building software
[19:52:18] <CoderGuy> the halting problem is such an interesting question, but it doesn't really do anything other then say "hey look you won't know if this thing halts or not"
[19:52:39] <bjs> Hmm, that's not quite true,  there's something very fundamental going on
[19:52:45] <CoderGuy> oh?
[19:52:48] <bjs> something very much related to traditional incompleteness
[19:53:01] <CoderGuy> what can I learn from the halting problem?
[19:53:38] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[19:54:31] <bjs> CoderGuy: something very deep about computation and logic. Something about the complexity of computer programs and solving problems in general.
[19:55:04] <CoderGuy> maybe, but how can I utilize it?
[19:55:06] <bjs> analogous to the insights you get when you think about Goedel-style incompleteness of mathematics
[19:55:35] <CoderGuy> like I see the halting problem and I just think, "well whoever coded this infinite loop needs to fix their code" XD
[19:55:41] <bjs> CoderGuy: well that's up to you,  it's a deep fundamental insight into the field you have chosen.
[19:56:14] <AlexDelarge> CoderGuy just writes programs.  That's it.
[19:56:16] *** Joins: pulse (~pulse@user/pulse)
[19:56:25] <CoderGuy> I mean that's definately true, I just other then recognizing the fact you can't code a function that checks other programs if they halt or not cuz you can trick said function I mean okay
[19:56:30] <pulse> i am the best and greatest developer in the world
[19:56:37] <CoderGuy> ohhh
[19:56:39] <CoderGuy> ya know what
[19:56:40] <InPhase> CoderGuy: I consider the halting problem to be a somewhat fundamental insight extremely similar to the incompleteness theorem in nature.  But it has very little impact on day-to-day programming.
[19:56:50] <CoderGuy> the halting problem is probably more of a lesson for hackers
[19:57:22] <InPhase> CoderGuy: It is only important when you have a particular process that you want to guarantee completes, at which point you need to restrict the flexibility or put a timeout (less elegant).
[19:57:24] <bjs> CoderGuy: but think about the implications the halting problem has.  It's not really just about halting, but really about _any_ non-trivial property of programs
[19:57:41] <CoderGuy> ohhh true InPhase :D
[19:57:53] <CoderGuy> yeah I guess that's true bjs
[19:58:08] <CoderGuy> it's more of like an overarching philosophical lesson that is proven in mathamatics
[19:58:16] <InPhase> It's basically the first declaration of things that are not in general computable.
[19:58:23] <CoderGuy> I see
[19:58:27] <CoderGuy> yeah that does make sense
[19:58:29] <bjs> CoderGuy: e.g. is there a program that tells you if your program has bugs?
[19:58:30] <InPhase> Although as with such statements, almost everything is in specific computable.
[19:58:36] <pulse> incompleteness theorem, hello
[19:58:40] *** Joins: dolor_avis (~dolor_avi@user-5-173-12-123.play-internet.pl)
[19:58:47] <InPhase> Or rather, almost everything useful.  :)
[19:58:56] <bjs> CoderGuy: maybe this one seems more obviously interesting to you, but it's obviously the same as the halting problem :)
[19:59:22] <CoderGuy> Right bjs and then when I was taught we learned there are compiler errors and user errors, and it's the coders job to determine both but the compiler get give you insight, user error is up to the developer understanding it
[19:59:33] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[19:59:44] <bjs> CoderGuy: okay but the insight here is that there *cant* be a program that does all the work for you
[19:59:54] <CoderGuy> hmm
[19:59:59] <CoderGuy> on some level yes
[20:00:04] <bjs> no not "on some level" but just no
[20:00:23] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[20:00:41] <CoderGuy> surely some program can do a lot of the work though
[20:00:46] <bjs> CoderGuy: do a lot yes, but not all
[20:00:48] <CoderGuy> like an AI that creates other programs
[20:00:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[20:01:12] <CoderGuy> wait
[20:01:20] <CoderGuy> maybe that's what the halting problem is truly for
[20:01:30] <CoderGuy> when AI take over, humans must use it to make them explode lol
[20:02:32] <bjs> CoderGuy: but like,  some programs will have bugs,  some won't and therefore there cannot be a program that does all the work and tells you if your program has bugs or not. There are always going to be cases that require humans to help it out
[20:02:46] <bjs> and here you can really pick any property you want, and you can generalise quite far...
[20:03:20] <CoderGuy> yeah i'm assuming a future where AI is basically a human at that point but I see your point
[20:03:30] <bjs> CoderGuy: no AI cannot do it either
[20:04:17] <CoderGuy> I agree that AI will face the same problem given a program that doesn't follow the ruleset for if something halts or not, but I imagine that AI can spitout some really fancy cool programs and not face this problem by just avoiding it cuz well it was coded with the halting problem in mind
[20:04:18] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 240 seconds)
[20:04:29] *** Joins: humky (~humky@user/humky)
[20:04:38] <bjs> CoderGuy: okay but the AI cannot do that
[20:04:40] <GeDaMo> We can do that too by using non-Turing complete languages
[20:04:41] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 256 seconds)
[20:05:16] <CoderGuy> I mean eventually AI should be able to do anything humans can do, and humans code with the halting problem in mind no?
[20:05:23] <bjs> CoderGuy: for the problems we like to solve every day we need languages which are Turing complete (at least for now,  we still don't really know what lies in the grey area before Turing completeness)
[20:05:28] <bjs> CoderGuy: not really
[20:05:35] <bjs> I think you haven't really internalised it yet :)
[20:05:56] <CoderGuy> oh, I mean code anything humans code
[20:07:02] <bjs> CoderGuy: the undecidability of the halting problem is very fundamental, you cannot "code around it" or anything like that.  We have problems we solve daily that just require a powerful programming language and once you're there you cannot escape this
[20:07:51] <bjs> you can add special cases and you can try code around it, but there's always cases that the computer/ai/human/etc cannot solve with a fixed set of rules
[20:07:54] <CoderGuy> okay but like, i'm sure there is some type of a structure or ruleset you can follow to avoid it, much like humans follow rules to avoid things
[20:07:57] <bjs> no
[20:08:13] <bjs> CoderGuy: there are some programs that follow those rules, and some which do not, therefore you cannot tell if a program follows the rules or not
[20:08:29] <CoderGuy> umm
[20:08:34] <CoderGuy> you can kinda check though right?
[20:08:47] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:09:00] <bjs> CoderGuy: depends what the rule is :)
[20:09:07] <CoderGuy> that's what I mean though
[20:09:17] <CoderGuy> so for example instead of running the program maybe you read the source code first
[20:09:35] <CoderGuy> surely by reading you could work out if something is a violation or not right?
[20:09:52] *** Quits: tcsilver (~tcsilver@pool-96-255-128-204.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[20:09:55] <bjs> CoderGuy: only for really simple rules
[20:09:57] <bjs> that's the point
[20:10:37] <CoderGuy> I see, well I imagine this is very hard to keep track of, but my point is if the AI is good at what they do, they will probably generate really great programs that do work, with humans being the things that check if hte program works or not, not some function
[20:10:46] <bjs> there is a point where the language (i.e. all the programs that follow the rules) are powerful enough to solve interesting problems,  but once you're there you cannot even check the rules anymore
[20:10:49] <CoderGuy> ohhh maybe that's the true meaning behind the halting problem
[20:11:01] <CoderGuy> that somehow humans are better at checking if something works then programs are
[20:11:17] <bjs> CoderGuy: the truth is much sadder
[20:11:20] <bjs> humans are not better.
[20:11:24] <CoderGuy> lolol
[20:11:42] <CoderGuy> so nothing exist that can check if something has a problem or not and humans do a worse job than a function would?
[20:12:02] <bjs> CoderGuy: well that question is outside the scope of the halting problem :)
[20:12:20] <CoderGuy> hahaha okay I learned something this was a good lesson of the day :D
[20:12:27] <bjs> CoderGuy: see: Rice's theorem
[20:12:32] <CoderGuy> hmm
[20:12:42] *** Quits: alexxxey (~Alexey@user/alexxey) (Quit: Leaving)
[20:14:04] <bjs> CoderGuy: you can see it multiple ways,  but one nice way is that the undecidability of the halting problem is "the" fundamental thing (akin to incompleteness of arithmetic) and Rice's theorem is just generalising the result to see what that implies
[20:14:06] <InPhase> CoderGuy: Humans can guarantee that specific programs will halt.  Algorithms can be written which can ALSO guarantee that specific programs will halt.  You just have to accept that it is not possible to write an algorithm that can provide this result for all possible programs.
[20:14:07] <bjs> and it turns out, it implies a lot :)
[20:14:08] <mrig> CoderGuy: perhaps it is a flaw in the expectation of the logic itself thus the logic, moreso than in how the logic works?
[20:15:08] <CoderGuy> umm
[20:15:30] <CoderGuy> maybe when I say flaw in logic i'm mistaken, this is how logic works it's not a flaw
[20:16:01] <CoderGuy> yeah so we would like for problems to be solveable, unsolveable problems are annoying when the solution is "it's unsolveable" it's a paradox
[20:16:33] <CoderGuy> so like, the halting problem just shows logically via I guess a paradox but it's not even a paradox it's just how things work, that you can't solve this that way
[20:17:19] <CoderGuy> so I guess logical tools are not helpful in solving the halting problem, and nothing is helpful cuz it's unsolveable, HOWEVER a human could look over the code and go "well clearly this is why that thing won't halt" so that's the part i'm confused about
[20:18:03] <CoderGuy> IE could a function + a coder looking over what happened, determine if a program will halt or not?
[20:18:14] *** Joins: moctezuma (~moctezuma@59.88.28.22)
[20:18:15] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:18:59] <DPA> I think f for g(f) simply simply isn't possibly, or rather, that that would always actually be a check for g'(f). f isn't wrong about the output of g', it just didn't check g, because g(f) is a combination of g and f,
[20:18:59] <DPA> it is a new program different from g. So f(f for g(f)) is actually f(g'(f)), which is the "real" f(g(f)), but that's an invalid notion, it would actually be f'(g(f)). I think here is an equality used, where really only assignments are possible.
[20:19:37] <bjs> DPA: I'm really not following what you're trying to say.  What are f and g?
[20:19:53] <CoderGuy> bjs f is the function that checks programs, g is the program
[20:19:57] <entuland> the theorem is about automating the check on any given program in general, not about specific instances (even less about having a human check the code)
[20:20:05] <DPA> g halts if f doesn't and vice versa.
[20:20:10] <W> CoderGuy, self-referentiality (and by extension any programming flexible enough to use programming as input or output) fundamentally alters what you can say about things. "The lowest natural number not described by any English sentence" is an English sentence.
[20:20:12] <DPA> f says if a program halts
[20:20:21] <bjs> DPA: this isn't normally what we call the halting problem
[20:20:26] <bjs> the halting problem has 2 inputs
[20:20:36] <CoderGuy> hmm
[20:20:48] <entuland> the theorem that proves the halting problem has 2 inputs
[20:21:07] <bjs> DPA: but sure,  your rendition also works.
[20:21:07] <mrig> There are some wonderful analogise to be made with nature, two trees competing for sunlight, neither of them know if their program will reach a solution or conclusion or not. Is the conclusion to plant a seed that grows; What reasonable logic would have it that there be any set answer for any program that is engaged in solving the find sunlight problem?
[20:21:13] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 246 seconds)
[20:21:39] <CoderGuy> W but like, the goal of the function to determine if something halts, has the flaw of "hey we can trick this" but somehow a human can look over the code and go "hey this is why you're tricking it" so my quesiton is, if a human is involved in checking over the program, ,could they determine what went wrong?
[20:21:57] <mrig> Logic does not have to be Newtonian by default to be rational.
[20:22:07] <W> CoderGuy, humans are not special here
[20:22:23] <CoderGuy> So even the human could be fooled?
[20:22:24] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[20:22:34] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[20:22:44] <W> humans are generally acknowledged to be fallible, yes
[20:23:25] <CoderGuy> okay given a human who has enough insight to determine what should happen, and enough time and resources to cause the outcome required, could they determine alongside a nice function F, if G should halt or not?
[20:23:26] *** Joins: LiftLeft (~LiftLeft@154.21.114.30)
[20:23:27] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[20:23:45] <entuland> the point of the theorem is proving that such a "perfect" program able to check and catch all possible "tricks" is impossible to create (it is a proof by contradiction)
[20:23:47] <InPhase> W: But here's the question to bake your mental noodle.  Do you imagine that there exist specific programs and specific inputs that you can give to a human where the skilled human cannot determine a halting status for?
[20:23:57] <W> given I can wish unicorns into existence, this planet is now Equestria
[20:24:03] <bjs> DPA: but I'm still not following what your logic is trying to say :)
[20:24:13] <CoderGuy> W you're ignoring something very important about the halting problem here
[20:24:17] <CoderGuy> which I overlooked as well
[20:24:57] <CoderGuy> we trust so much that the code will run, but surely a human could at the very least if it's legible, take turings example himself of why F would fail, a human can instantly go "oh well Turning cheated right here"
[20:25:17] <W> what cheating is involved?
[20:25:27] <CoderGuy> coding the program to halt when the program checks if it halts
[20:25:35] <CoderGuy> and vice versa
[20:25:42] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[20:25:47] <W> again, remember, the programs described in the halting problem are not real programs. In fact, they cannot possibly exist
[20:25:51] <CoderGuy> doing things so far out of the norm that this problem occurs
[20:26:07] <bjs> W: in the proof of the undecidability of the halting problem*, and yes they exist they just don't halt
[20:26:15] <W> how is this out of the norm?
[20:26:22] <InPhase> W: The halting problem is really a statement about Turing completeness.  But when humans apply arbitrary reasoning to evaluate a program and an input, it is likely (I think) that we are actually using a more flexible computational process than Turing computability.  i.e., we may be in a different computational class than the Turing machines, and thus the halting problem might not actually apply to
[20:26:26] <CoderGuy> well the norm is your program runs..
[20:26:28] <InPhase> the skilled programmer mind when labeled as a program.
[20:26:28] <W> it's just a generalization of "program outputs 'yes' or 'no'"
[20:26:35] <CoderGuy> and then outputs and is done with itself
[20:26:49] <CoderGuy> yeah but okay so
[20:26:52] <W> InPhase, whatever we are applying it is also self-referential
[20:27:09] <bjs> CoderGuy: the halting problem is not specific to that particular function which feeds itself back into itself, that's just the classic example of such a program that gives a contradiction
[20:27:31] <pulse> theorists spend decades figuring out the intricacies of the halting problem. meanwhile the janitor pulls out the power to the PC and solves it practically
[20:27:41] <InPhase> W: But because we can inspect for those self-referential properties, we can basically sniff out the very sorts of contradictions that trip up an arbitrary "algorithm" of a normal sort.
[20:28:10] <CoderGuy> bjs sure but given that contradiction + a human being looking at it, could the human factor eliminate some areas of the halting problem IE "oh well this one, will clearly not give the right result"
[20:28:36] <bjs> CoderGuy: okay but there can't be a set of rules that you can use to just look at the code to tell
[20:28:38] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[20:28:45] <bjs> because if there was, you could just add that to your program
[20:28:54] <entuland> CoderGuy, the problem is not in specific instances of programs that may halt or try to trick the checker, the problem is that the "perfect checking program" is proven impossible
[20:29:01] <CoderGuy> bjs yes but i'm just asking, given a human being or a group of coders etc, could they flush out why a program will or won't halt etc
[20:29:02] <W> InPhase, we can always invent new mathematics to analyze the old mathematics in a way it could not be applied to itself, sure
[20:29:11] <bjs> CoderGuy: but can they, really?
[20:29:16] <CoderGuy> idk that's the question
[20:29:21] <bjs> CoderGuy: the answer is obviously "no" :)
[20:29:31] <CoderGuy> okay how bout this one
[20:29:33] <InPhase> W: Which says we are in a different computational class, right?
[20:29:56] <CoderGuy> Could Humans who have access to the function F, give a more thorough answer as to why G doesn't halt?
[20:29:58] <W> InPhase, I would say that "computational class" is always only a thing within a specific mathematics we have already made
[20:30:06] <pyzozord> Can someone help nudge me in the right direction without giving away the answer? https://ideone.com/P5t4wY
[20:30:25] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[20:30:26] <pyzozord> There is also a hint "Binary search for the answer. How can you check how many pairs have distance <= X?"
[20:30:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:30:40] <bjs> CoderGuy: if F says "doesn't halt" then sure they can look at the function to see what caused it to say that
[20:30:47] <CoderGuy> bingo
[20:30:48] <CoderGuy> okay cool
[20:30:57] <CoderGuy> i'm satisfied with this
[20:31:11] <InPhase> W: Now the real question is, what property does a computer, a language, or a program need in order to transition from Turing-complete to whatever humans do when they go and invent new math to solve a problem like that.
[20:31:16] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:31:21] *** Quits: __that__ (~Guest63@195.59.68.214) (Quit: Client closed)
[20:31:22] <CoderGuy> and I have a sub note, when AI gets to the point where the AI can give a better answer than any coder can as to why something won't Halt, that's when the matrix will have happened XD
[20:31:23] <bjs> CoderGuy: but remember that F does not exist  (or rather the version that actually halts doesn't exist)
[20:31:48] <W> anyway, there's little practical in terms of programming to be learned from the halting problem. Maybe "don't write programs to analyze what the result of your programs will be, just run them". All these problems are about mathematical fancies very far removed from what we actually do or even what computers actually do
[20:31:48] <CoderGuy> sure sure bjs but I think you get the point
[20:31:55] <InPhase> W: We can go ahead and throw words like "strong-AI" at it, but this doesn't really have a definition comparable to the nice Turing-complete one.
[20:31:59] *** Joins: dan01 (~dan@2a02:2f0f:3017:4e00:55d2:d00f:8b2b:1ff3)
[20:32:02] <CoderGuy> Humans have some insight, but functions also have insight, it's kinda like how chess is right now
[20:32:32] <bjs> CoderGuy: no I think your logic is flawed. Your logic is "if I had a function that cannot exist which tells me why it halted can I tell why it halted?" then yes
[20:32:33] <bjs> of course
[20:32:39] <bjs> but such a function cannot exist, so no you cannot
[20:32:40] <CoderGuy> A computer chess program can destroy any human in chess, atleast the really good ones, but no chess program can tell you who will win between magnus and hikaru, it can only attempt to predict
[20:32:54] <bjs> CoderGuy: you're trying to "get around" it again, but you cannot.
[20:32:55] *** Joins: mnd999_ (~mark@2001:8b0:da3:76a2:b30d:a07c:7290:5ed6)
[20:33:31] <CoderGuy> bjs nono i'm just saying, humans have some insights that code doesn't, and together this symbiotic relationship is what makes good software
[20:33:33] <W> InPhase, unanswerable at a fundamental level, I would say. I cannot imagine a formalism that wouldn't immediately break under its own load
[20:33:42] <InPhase> bjs: Were you following the discussion W and I just had?
[20:33:48] <bjs> CoderGuy: sure but it doesn't change anything halting-problem-wise
[20:33:53] <CoderGuy> yes it does
[20:33:57] <bjs> CoderGuy: no it doesn't
[20:33:58] <InPhase> bjs: It seems we're discussing the same thing in parallel but the two of you came to a different conclusion.  :)
[20:34:01] <CoderGuy> it says "F won't know why G doesn't halt, but a human might"
[20:34:11] <pulse> it really doesn't CoderGuy, halting problem is a solved problem
[20:34:17] <pulse> and it's trivial to prove
[20:34:21] <bjs> CoderGuy: for a particular program yes
[20:34:27] <CoderGuy> yeah exactly
[20:34:31] <CoderGuy> and that's more than the function itself
[20:34:42] <bjs> no
[20:34:47] <bjs> the function can also tell for any particular program
[20:34:49] <CoderGuy> good luck trying to code a function that has the same insight as the human who understands why the program didn't halt
[20:34:56] <W> CoderGuy, you realize "coders" are already AIs, in the sense that we are computer-assisted humans? I do not imagine that computer-assisted humans will ever be outcompeted by computers
[20:35:09] <bjs> CoderGuy: I mean we do have programs that can say whether some particular programs halt or not, that's not hard
[20:35:19] <entuland> pyzozord, start investigating how you can do a binary search, if that's a hint you've been given, understanding how the binary search my lead you to the solution of that task
[20:35:23] <bjs> CoderGuy: what's hard is to be able to say for *all* programs.
[20:35:28] <DPA> bjs: I think with real programs, you need f to check g, and you need g to check f. So in reality, it'd always come down to f g f g f g f g f g..., they can only ever determine the result of the previous iteration.
[20:35:28] <DPA> There is no first nor final result, but pick a starting point, and you can get the next iteration. So I think the halting problem simply doesn't apply to real machines.
[20:35:32] <InPhase> W: Well it's likely to reach the point where human-assisted computers are not better off than just the computer itself.
[20:35:40] <CoderGuy> hmmm okay bjs but the theoretical programs that trick the function F these ones, require humans to identify and I guess upgrade F XD
[20:35:48] <bjs> CoderGuy: no it just doesn't work
[20:35:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:35:54] <bjs> I think you misunderstand what the halting problem actually says
[20:36:03] <CoderGuy> no I understand completely
[20:36:13] <CoderGuy> in fact it says so much about security it's crazy
[20:36:22] <W> InPhase, and if you tried to formalize what you meant by "likely" and show your calculations, it'd be all nonsense
[20:36:35] <CoderGuy> "okay we fixed this" "and opened up a new backdoor" and we fixed it "and opened up a new backdoor" XD
[20:36:40] <entuland> pyzozord, you may as well find yourself thinking "binary search applies to data structure A, but I have data structure B" - the solution could pass through converting B into A or building A out of B or the alike
[20:36:44] <bjs> CoderGuy: backdoors aren't really anything to do with halting either
[20:36:50] <bjs> backdoors can exist in automata
[20:37:03] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[20:37:04] <bjs> (in which setting F is trivial)
[20:37:19] <pulse> you know all programs eventually halt due to entropy anyway
[20:37:22] <InPhase> W: I mean specifically if technology continues to advance and we do not wipe ourselves out from existence before getting to this point, then we will reach a point where human-assisted computers are not meaningfully different from just a computer itself.
[20:37:22] <pulse> funny thing
[20:37:31] <CoderGuy> bjs no i'm saying that like, F fails because G was coded anticipating F scanning it, and that's how you get around security, you learn how the security works and you break it
[20:37:49] <InPhase> W: In other words, the computational advantage of the human brain is going to become negligible at some point in the future.
[20:37:56] <bjs> CoderGuy: okay but "coded anticipating F scanning it" is just an example from a proof class, it's not like, "the" thing
[20:38:20] <bjs> CoderGuy: the halting problem is not "we can tell for any program, oh except for a few weird ones that try to pass themselves into it"
[20:38:26] <W> I can /imagine/ a future where computer-assisted humans are /indistinguishable/ from computers, in the sense that the only real difference is that the computer-assisted humans have a lineage of consciousness that goes back to a purely evolved organic being
[20:38:31] <entuland> CoderGuy, you are focusing on specific instances that you can check and possibly find out whether it would halt or not, the theorem is that you can't have a perfect algo to be applied to _all possible cases_ and get the right answer _in all possible cases_
[20:38:43] <InPhase> W: And I think this is probably the single most important issue and problem facing the future of humanity.  And that it's a problem and scenario that we are woefully unprepared for.
[20:39:00] <pulse> nah, won't happen
[20:39:06] <CoderGuy> entuland, yeah and what i'm saying is, if you have the function + some coders, is it better than just the function and if so that says so much about human coders and innovation
[20:39:10] <pulse> humans are too dumb and AI is too primitive
[20:39:25] *** Joins: Auron (Auron956@user/auron)
[20:39:25] <pulse> we'll get robots they just won't be smart
[20:39:41] <InPhase> pulse: Until they are.
[20:39:41] <W> But also, this is fantasy, it does not bear any resemblance to actual science, and we cannot pretend it is inevitable, likely, or even in any real sense technically possible. We do not have a model of minds.
[20:39:56] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.110) (Quit: Textual IRC Client: www.textualapp.com)
[20:39:59] <pulse> i don't buy it
[20:40:07] <W> InPhase, I suggest we have more urgent concerns
[20:40:07] <InPhase> pulse: Why not?
[20:40:26] <CoderGuy> W and we're back to my original point, that there is no point XD okay imma go back to coding :D
[20:40:51] *** Quits: Maker (~maker@70.18.215.45) ()
[20:41:00] <pulse> InPhase, LSD and the implications of various schools of existential metaphysics
[20:41:23] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.150)
[20:41:34] <pulse> once you can get a robot to trip on LSD then you might have something going :D
[20:41:53] <InPhase> W: "What am I going to eat for dinner" and such are pretty important.  But I think we're in the range where this is pretty much inevitable within 100 years.  Meaning it's extremely likely there are people alive now who will live long enough to see us become an obsolete species if we do not transition into becoming augmented intelligences.
[20:42:12] <InPhase> W: My money is on closer to 50 years than 100.
[20:42:17] <pulse> basically we have no idea what the mind is, our best scientific guesses fall so short it's almost comical, we're in the dark with our heads far up our butts
[20:42:21] <DPA> Maybe I should just write a program that can tell for any program if it's going to halt...
[20:42:24] <W> InPhase, but your money is backed by faith, not science
[20:42:24] <AlexDelarge> no, eating is important.  the what am/what if is not
[20:42:27] <pulse> so good luck developing a general AI from that vantage point
[20:42:38] <pulse> first we need to uncover our own stupidity
[20:42:58] <InPhase> W: My money is backed by an extrapolation of technological progress and an estimation of the computational complexity of human cognition.  There are not THAT many moving parts in the human brain.
[20:43:26] <mrig> InPhase: I think that advances in the way that we understand logic, and our understanding of it, by way of the application of more advanced higher order logic, as you have mentioned, will completely alter the way that we perceive reality and eventually the questions currently asked.
[20:44:08] <W> InPhase, you cannot even quantify technological progress
[20:44:08] <mrig> The collective ego is gonna take a big hit, but that this well essentially be beneficial.
[20:44:34] *** Joins: Bric (~Bric@65.183.3.30)
[20:44:48] <InPhase> W, pulse: Here's a simple question.  How much computing power does it take to simulate the electrical signals and stored chemical state of the human brain?
[20:44:53] <W> singularianism and its various lesser offshoot are merely millenarianism for people who "like science", an escape from understanding the world as it is
[20:45:02] <mrig> the notion of 'know thy self' is not a new one, from time to time a better mirror comes along.
[20:45:08] <W> InPhase, I believe we've already covered this elsewhere; we do not know
[20:45:23] <pulse> InPhase, i don't subscribe to the naive notion that our minds are in our brains, so that's a nonsensical question from my point of view
[20:45:25] *** Joins: b0rf (~shaun@121-44-16-32.tpgi.com.au)
[20:45:40] <pulse> it's a bit like thinking there's tiny people in your TV
[20:45:46] <GeDaMo> https://www.sciencealert.com/a-never-before-seen-type-of-signal-has-been-detected-in-the-human-brain
[20:45:46] *** Joins: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx)
[20:45:49] <mrig> Interesting times :)
[20:45:50] <AlexDelarge> < W> InPhase, you cannot even quantify technological progress  <-- moore's law
[20:46:07] <InPhase> W: We have some pretty good estimates though.  We know what frequencies these signals work on, so we know the information density.  And the stored chemical state has some ambiguities, but we can get a close estimate of the range of those as well.
[20:46:53] <InPhase> W: So we can get within orders of magnitude pretty easily.  And orders of magnitude mixed with exponential computational complexity growth give some fairly constrained timeline estimates.
[20:47:03] <W> AlexDelarge, where on moore's law do you place the invention of vacuum tubes?
[20:47:11] *** Quits: dolor_avis (~dolor_avi@user-5-173-12-123.play-internet.pl) (Quit: dolor_avis)
[20:47:17] <pulse> the problem with naive physicalism is it assumes it already has the full picture. what if the mind is intangible?
[20:47:20] <pulse> and how would you even know
[20:47:28] <W> InPhase, no we can't
[20:47:43] <pulse> funny stuff
[20:47:55] <InPhase> pulse: I generally agree with you that there is probably more to us than just our brains.  But I also think our reasoning and cognition is pretty much a brain thing, and thus, able to be thrust into a computer.
[20:48:28] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[20:48:37] <W> InPhase, does the timing of signals in the brain matter? Do we even have a lower bound on the time resolution?
[20:48:49] <pulse> InPhase, perhaps
[20:48:49] *** Parts: Bric (~Bric@65.183.3.30) ()
[20:48:58] <pulse> i mean no one's ever found anything in the brain
[20:49:14] <pulse> not a single memory, not a single algorithm to a problem
[20:49:19] <pulse> all we see is various centers light up
[20:49:23] <pulse> at various times
[20:49:36] <lavadonut> https://en.wikipedia.org/wiki/OpenWorm
[20:49:49] <InPhase> W: The timing does matter (I'm doing research in this area actually), but it caps out at about 1ms, below which there is not really any room for more timing granularity in the brain.
[20:49:51] <W> and, again, we don't have a theory of mind. Not a one. We can /postulate/ that the material observations we can make of the brain must necessarily have a complete explanation in it, but it is not anything we have guaranteed
[20:50:01] <pulse> searching for consciousness inside a brain is a bit like searching for the controller of the computer without stepping out of the computer
[20:50:28] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[20:50:36] <W> InPhase, no room for more timing granularity? How on earth would you have shown this? Eliminated race conditions?
[20:51:00] <InPhase> W: https://www.moleculardevices.com/sites/default/files/images/page/what-is-action-potential.jpg
[20:51:12] <W> I am aware of what action potential is
[20:51:16] <InPhase> W: Basic bandwidth reasoning on the signal size.
[20:51:36] <W> bandwidth reasoning does not apply to timing
[20:51:46] <InPhase> W: It does.
[20:52:01] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 246 seconds)
[20:52:54] <mrig> InPhase: I found your work on the phase differences particularly interesting, as a means to measure minute changes.
[20:52:58] *** Quits: mkopriva (~mkopriva@ip-94-113-146-145.net.upcbroadband.cz) (Quit: Leaving...)
[20:53:07] <InPhase> W: And most of the timing in the brain is actually much slower than this, happening in the 3Hz-8Hz regime for some synchronization signals, some up in the 10Hz to 20Hz region, and some faster timing going on up to the 200Hz regime.
[20:53:17] <mrig> As I guitarist, this is dammed handy for tuning up :)
[20:54:17] <W> InPhase, but it doesn't matter, if there are race conditions; somewhere there is a boundary where a signal from one direction or the other determines what happens
[20:54:26] <InPhase> W: Note that the 200Hz regime is basically the limit of that full action potential process.  It's essentially one wavelength of that.  But the threshold timing is then capped out at around that 1ms scale.
[20:54:49] <W> (you can pretend there is nothing discrete in the brain of course - and thereby prove that we cannot do mathematics)
[20:55:45] <mrig> It limits are discrete.
[20:55:49] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Quit: leaving)
[20:56:06] <mrig> s/It/Its/
[20:56:49] *** Quits: mnd999_ (~mark@2001:8b0:da3:76a2:b30d:a07c:7290:5ed6) (Ping timeout: 256 seconds)
[20:59:11] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[20:59:15] <mrig> We can hammer away it the harmonic series, but it will never quite fit into a tempered scale; There is some very pretty higher order logic right there :)
[20:59:16] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 272 seconds)
[20:59:33] *** Joins: scabby (~scabby@user/scabootssca)
[21:00:39] <mrig> Pretty sure that there must be some interesting logical questions to be raised on the way that concurrent code resolves upon a particular branch in a possible future.
[21:01:32] <pulse> you know a hammer with the right rhythm can bring down a bridge
[21:01:40] <mrig> upon any one particular branch, with harmonics being divergent.
[21:01:50] <pulse> harmonics are scary shit
[21:01:55] <mrig> sure yes, harmonics and limits are fundamental.
[21:01:56] *** Joins: eXistenZ (~biskit@bzq-79-178-144-43.red.bezeqint.net)
[21:02:08] <pulse> pinch harmonics sound nice though
[21:02:21] <mrig> harmonics is really beautiful and I'm pretty certain utterly fundamental.
[21:02:21] <pulse> kinda hard to do right
[21:02:44] <mrig> what are pinch harmonics?
[21:03:01] <pulse> i leaned that if i pick on the string at an angle while letting my nail hit the string a fraction of a second later, then it makes the pinch harmonic
[21:03:10] <mrig> oh false harmonics?
[21:03:12] <pulse> but it's kinda hard, 9/10 it will sound off
[21:03:21] <pulse> but on occasion i will hit it just right
[21:03:24] <pulse> mrig, yeah
[21:03:52] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86) (Remote host closed the connection)
[21:03:59] <mrig> the balance between the guitar and the amp play a large role in the ability to sound them.
[21:04:00] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86)
[21:04:16] <pulse> idk if it's the amp, you can do it on an acoustic guitar too
[21:04:21] <pulse> it just doesnt' sound good
[21:04:26] <pulse> and it's very quiet
[21:04:34] <DPA> bjs: Ok, I've now another perspective to put my thought in. Given a program, and all inputs it ever gets, it will do something defined, and that may or may not include to halt. The input is part of the program, so different input, different program.
[21:04:34] <DPA> For a program to not halt if the program checking if it halts says it would and vice versa, it needs to know the result of said program, that is an input, first. But for that, that program would have to determine the result first. The same applies for the halt checker program, it needs the other program, and it's input for that is part of the program.
[21:04:34] <DPA> This is where I see the real logic flaw of the halting problem. In math, you have equality, variables, fixed programs, and prove a state / thing can't exist. But in reality, you can't have these 2 inputs at the same time and
[21:04:34] <DPA> such a contradicting input doesn't exist, precisely because the whole state with those inputs doesn't exist.
[21:04:56] <mrig> sure yes, just touching the string when it is vibrating can push it to having a different pattern of vibration.
[21:05:02] <AlexDelarge> this seems to have been done to death
[21:05:29] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[21:06:07] <pulse> nice example of pinch harmonics https://www.youtube.com/watch?v=RVMvART9kb8&t=12s&ab_channel=Pantera
[21:06:23] *** Joins: kmh_ (~kmh@p200300df5f2c2900489e1812d3a742a3.dip0.t-ipconnect.de)
[21:06:51] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[21:07:20] *** Quits: kmh (~kmh@p200300df5f3e6100dd8abf4c678f29f0.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[21:07:30] <mrig> got a randy rhodes vibe going on there :)
[21:07:31] <pulse> what's interesting is that doing natural harmonics you're only limited to the octaves and their halves
[21:07:36] <pulse> but you can do pinch harmonics on any tone
[21:07:43] <pulse> i never understood that
[21:07:59] <pulse> i guess that's why they're called artificial harmonics
[21:08:40] <pulse> i think someone once said that if you understood the physics of the guitar you would understand the whole world
[21:08:42] <pulse> or something along those lines
[21:08:58] <InPhase> pulse: All competently made bridges cannot be brought down by a hammer.  :)
[21:09:00] <mrig> pulse: well you have your finger on a note that is changing the length of the string.
[21:09:13] <dan01> Are OS-es not to old
[21:09:15] <dan01> ?
[21:09:23] <InPhase> pulse: Resonance is limited by the dampening factor for each oscillation.
[21:09:37] <pulse> InPhase, idk this bridge seems pretty competent https://www.youtube.com/watch?v=eAXVa__XWZ8
[21:09:38] <pulse> :p
[21:09:50] <dan01> What I want to say: If someone would invest tons of money to build an OS from sratch that would have no need to deal with backwards compatibility issues
[21:10:02] <dan01> Would that OS beat the crap out of Windows/Linux/MacOS?
[21:10:11] *** Joins: b1101 (~b1101@ool-44c01641.dyn.optonline.net)
[21:10:16] <pulse> mrig, yeah that actually makes sense. you're artificially shortening the string
[21:10:27] <pulse> with natural harmonics you let the entire string ring
[21:10:44] <pulse> dan01, https://xkcd.com/927/
[21:11:38] *** Quits: rindolf (~rindolf@87.68.240.240.adsl.012.net.il) (Ping timeout: 268 seconds)
[21:11:49] <pulse> actually this video is far scarier https://www.youtube.com/watch?v=XggxeuFDaDU
[21:11:51] <pulse> like wtf
[21:11:52] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[21:11:56] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[21:12:07] <pulse> looks like rubber
[21:12:50] <InPhase> pulse: So much so that these are all textbook examples in bridge design books about how to not design bridges.  ;)
[21:12:57] <pulse> yeah i'm sure
[21:13:38] <neshpion> rip bridge doggo, F
[21:13:53] <InPhase> pulse: Modern methods use resonance analyses to make sure all resonances modes are adequately damped.
[21:14:37] <pulse> i would imagine
[21:14:59] <pulse> isn't it also possible to destroy a house by matching the resonance frequency of the concrete?
[21:15:12] <pulse> kinda like with glass but for concrete
[21:15:12] *** Quits: ine (~ine@user/ine) (Remote host closed the connection)
[21:15:17] <neshpion> nikola tesla made a thing that would vibrate a building to death, didn't he?
[21:16:02] <pulse> i think it's harder due to steel/concrete mix
[21:16:09] <pulse> which btw is a technological marvel in itself
[21:16:16] <InPhase> neshpion: Only buildings that were built before these modern resonance analyses.
[21:17:15] <pulse> (part of) my building was built 150+ years ago
[21:17:23] <pulse> it has really thick walls in the first floor
[21:17:25] <pulse> made of rock
[21:17:28] *** Joins: ine (~ine@wolowolo.com)
[21:17:29] *** Quits: ine (~ine@wolowolo.com) (Changing host)
[21:17:29] *** Joins: ine (~ine@user/ine)
[21:17:35] <pulse> pretty sure you couldn't bring that down with a bomb lol
[21:17:53] <mrig> But sympathetic resonance is amazing such a beautiful facet of harmonic theory and resonance; It's just not something that you want to attract in your architecture.
[21:18:18] <GeDaMo> https://en.wikipedia.org/wiki/Caliche
[21:18:24] *** Joins: nekobyte (~nekobyte@user/nekobit)
[21:18:30] <mrig> Those bridges are likely being sympathetic to the wind :|
[21:18:46] *** Quits: mohawk (~a0ee4ab3@ircip2.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[21:18:53] *** Joins: feldman (~feldman@ool-457194f5.dyn.optonline.net)
[21:19:19] <mrig> Well not in bridges in that way anyhow.
[21:20:48] <pulse> https://en.wikipedia.org/wiki/Structures_built_by_animals#/media/File:Ant_bridge.jpg
[21:23:15] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[21:23:55] <scaleww> How do you not suck on naming your objects, variables, functions, interfaces, db tables, etc.? I always end up with terrible long names and i HATE it.
[21:24:01] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[21:24:26] <mrig> https://www.youtube.com/watch?v=Aaxw4zbULMs
[21:24:45] <mrig> ^ sympathetic metronomes.
[21:25:26] <neshpion> scaleww: maybe if a name gets too long, it is doing too much or represents too much and should be broken into more things
[21:25:30] <mrig> scaleww: I find that if I'm struggling to settle on a name that I've likely still got some refactoring to do.
[21:25:54] <mrig> if you 'thing' is doing to many things, then it will have long name.
[21:25:54] <W> AlexDelarge, the answer, by the way, according to Wikipedia according to the "fifth paradigm" of Moore's law, is at around 1 calculation per second per $1000. Multiplied or divided by an order of magnitude or two. Which just goes to show exactly what goes into such "quantification"; entirely ad hoc adjustments and modifications to make something like the original catchy phrase match up
[21:26:20] <scaleww> neshpion, thnx that's actually a good tip!
[21:26:29] *** Joins: egoist (~egoist@186.235.82.105)
[21:26:59] *** Quits: b1101 (~b1101@ool-44c01641.dyn.optonline.net) (Quit: b1101)
[21:27:01] <scaleww> mrig, yeah I noticed that too this past week, been refactoring my code and came across some really long and obscure names
[21:27:40] <W> it's very hard to see you are wrong when you do not make narrow measurable predictions and feel real consequences for always being wrong at them.
[21:27:48] <pulse> scaleww, naming is a hard problem and at some point you just give up
[21:27:56] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:27:58] *** Quits: moctezuma (~moctezuma@59.88.28.22) (Quit: leaving)
[21:28:12] <pulse> my limit is at about 4 words though, if it's any more it's usually an indication of something else
[21:28:23] *** Joins: pavonia (~user@user/siracusa)
[21:28:41] <pulse> usually better to make it hierarchical
[21:28:56] <pulse> i.e thing.that.doesThis() instead of thingThatDoesThis()
[21:29:00] <scaleww> pulse yeah been banging my head on how to name things...it *really* can be hard
[21:29:21] <pulse> you know there's only 2 hard problems in programming right
[21:29:25] <pulse> naming things and cache invalidation
[21:29:27] <W> (heh the accompanying image is straight from Ray Kurzweil, apparently, amusingly)
[21:30:28] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[21:31:39] *** Joins: moctezuma (~moctezuma@59.88.28.22)
[21:31:54] <|smlckz|> suggestions for improvements?    https://ttm.sh/FmZ.s
[21:32:48] <W> what's an .s file?
[21:32:56] *** Quits: Citillara (~userid@user/citillara) (Ping timeout: 252 seconds)
[21:33:46] <mercenary> assembly source?
[21:34:19] <W> that's what Wikipedia says, yeah. Would have preferred a text/plain content type though
[21:34:47] *** Quits: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net) (Ping timeout: 256 seconds)
[21:35:24] <|smlckz|> hmm?
[21:35:45] <W> |smlckz|, when your link is opened in a typical browser, it prompts us to download the file
[21:36:11] <|smlckz|> oh
[21:37:25] <|smlckz|> http://ix.io/3ruH
[21:37:50] <mercenary> lol. apparently nginx default settings are .s => text/x-asm
[21:38:09] <ronald_mcdonald> mercenary, whats wrong with that
[21:38:22] <ronald_mcdonald> gcc uses a .s output by default for asm I think
[21:38:24] <ronald_mcdonald> so its reasonable
[21:38:25] <moctezuma> Here is a screenshot of my system.
[21:38:26] <moctezuma> https://i.ibb.co/6tB5n2G/hello.png
[21:38:42] <moctezuma> Is the font-size too large?
[21:38:58] <ronald_mcdonald> Font size is for your eyes not our eyes
[21:39:02] <ronald_mcdonald> So what you feel best is best
[21:39:23] <ronald_mcdonald> Font size is not bad if its a large monitor placed some distance away
[21:39:32] <moctezuma> ronald_mcdonald: I'm just asking.
[21:39:37] <mercenary> ronald_mcdonald: that a site that generates random filenames shouldn't have default content mapping enabled
[21:39:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:40:37] <|smlckz|> it got the extension of the uploaded file, that it kept
[21:40:37] <neshpion> moctezuma: i have no idea about whether that's a good size or not because i don't know the dimensions or location of the screen this font size is being displayed on
[21:40:50] <neshpion> if you can read it easily and you don't feel cramped, it's a good font size
[21:41:16] <ronald_mcdonald> neshpion, and more importantly a font size should be for the satisfaction of the particular person
[21:41:23] <moctezuma> This is literally what I have on a 19" screen.
[21:41:39] <ronald_mcdonald> 19 inch and a bit far away is probably fine with tht size
[21:42:20] *** Joins: odnes (~odnes@109-178-242-34.pat.ren.cosmote.net)
[21:42:26] *** Quits: feldman (~feldman@ool-457194f5.dyn.optonline.net) (Quit: feldman)
[21:42:36] <moctezuma> ronald_mcdonald: Alright.
[21:43:38] <deniska> moctezuma: for a while, until I discovered splitting the screen vertically, I had my text editor configured like that: https://i.imgur.com/qbTmI7d.png
[21:44:10] <moctezuma> ronald_mcdonald: I was worried if only these many rows of text in a terminal window occupying a full screen is too low.
[21:44:21] <ronald_mcdonald> The eyes are most important
[21:44:27] <ronald_mcdonald> If your eyes agree with ith its fine
[21:44:48] <neshpion> without eyes, how am i gonna look at tiddies
[21:44:49] <deniska> moctezuma: if it fits 80 columns or more, should be fine for most tasks
[21:44:59] <moctezuma> deniska: Exactly. Did you find any problem with the code navigation while programming? That's what I'm concerned about.
[21:45:17] *** Quits: absc (~absc@dynamic-adsl-94-34-168-145.clienti.tiscali.it) (Quit: Leaving.)
[21:45:27] <deniska> moctezuma: no, although since then I did switch my setup
[21:45:37] <deniska> it's all subjective anyway
[21:45:59] * neshpion just changes his font size dynamically
[21:46:58] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 246 seconds)
[21:47:29] <moctezuma> deniska: I mostly program in the terminal in full screen anyway. So I don't lose the space at the top of the screen. Right now, my text-editor has 24 rows in one full screen. How many do you have?
[21:47:40] <deniska> nowadays I typically prefer seeing two different files at once like that: https://i.imgur.com/sM8T4Ro.png
[21:47:49] *** Joins: SGautam (uid286066@id-286066.charlton.irccloud.com)
[21:47:53] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[21:48:02] *** Joins: dogood (~roger_dog@174.127.241.77)
[21:48:44] <deniska> my terminal is 140×36 currently
[21:48:45] <moctezuma> deniska: You have around 40 rows in full screen.
[21:48:58] <moctezuma> deniska: That's plenty more than me.
[21:49:43] <moctezuma> I don't see properly in small sizes. I guess my myopia is getting worse rapidly. I don't know what's happening.
[21:50:04] <deniska> try to see (no pun intended) a doctor
[21:50:25] <deniska> but yeah, set up whatever font size is comfortable
[21:51:38] <moctezuma> I worry he will increase the power of my spectables and make me worry more about it. This way, I can pretend the power is -2.5 D at most.
[21:51:48] <SGautam> Anyone else just absolutely stuck on what to develop for their next project?
[21:52:06] <SGautam> I’m out of ideas, really.
[21:52:12] <beeza> SGautam: rdflib needs help
[21:52:33] *** Joins: jphaynes66 (~TerraFirm@75-166-102-68.hlrn.qwest.net)
[21:52:35] <moctezuma> SGautam: What language do you program in?
[21:53:01] *** Joins: __bluebell__ (~le@194.110.115.45)
[21:53:07] <|smlckz|> re: http://ix.io/3ruH
[21:53:37] <moctezuma> deniska: Which colorscheme is that?
[21:55:33] *** Joins: pavonia (~user@user/siracusa)
[21:59:02] *** Quits: dan01 (~dan@2a02:2f0f:3017:4e00:55d2:d00f:8b2b:1ff3) (Remote host closed the connection)
[22:01:59] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86) (Ping timeout: 256 seconds)
[22:02:04] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[22:02:09] *** Joins: hjf (~hjf@user/hjf)
[22:02:19] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:5494:61f9:38d5:fa86)
[22:02:58] <pyzozord> so turns out that problem I linked earlier was a "hard" problem. The solution involves binary search, prefix sum and sliding window. The frustrating part is that I am familiar with all three of these concepts yet a failed miserably to solve that problem.
[22:03:15] *** Joins: alguien (~alguien@user/alguien)
[22:03:32] *** Joins: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[22:03:55] <moctezuma> pyzozord: What was the problem?
[22:04:13] <hjf> so i started my new job 2 weeks ago and i have honestly no idea what i'm doing and i'm terrified of it
[22:04:25] <hjf> i just can't make absolutely any sense of the code
[22:04:38] <pyzozord> moctezuma: https://ideone.com/P5t4wY
[22:04:58] <hjf> i know what the code is "kind of" supposed to do but man it's like the overengineered the shit out of it
[22:05:09] <moctezuma> hjf: That's literally all the industry.
[22:05:11] <neshpion> hjf: don't worry too much, chances are few developers can make sense of the code except the bits they work on :P
[22:05:16] <hjf> it's one of those programs that you can't really read
[22:05:17] <moctezuma> hjf: You've got to wing it.
[22:05:27] <neshpion> everyone wings it, all the time
[22:05:35] <moctezuma> hjf: Ask you superiors and colleagues.
[22:05:36] <hjf> yeah i winged my way up here
[22:05:53] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[22:06:02] <hjf> it's layer after layer of abstractions and interfaces and factories
[22:06:10] <neshpion> winging is fine, just don't wing too high, icarus :P
[22:06:22] <neshpion> hjf: yay enterprise software!
[22:06:29] <hjf> so you can't really read the program
[22:06:43] <hjf> this variable = factory.get("bullshit")
[22:07:14] <moctezuma> hjf: If you are programming in OOP, this is just natural. As Paul Graham said, "OOP provides a structured way to write spaghetti code."
[22:07:17] <neshpion> using tests and debuggers are infinitely more productive than reading the code
[22:07:24] <moctezuma> All the OOP lovers, please don't hit me.
[22:07:36] <neshpion> moctezuma: don't worry, i am an OOP lover, so naturally I am an OOP hater
[22:07:44] <hjf> neshpion: yes but this is js
[22:07:44] <ronald_mcdonald> bullshit
[22:07:47] <ronald_mcdonald> OOP has much value
[22:07:56] <|smlckz|> hjf aww
[22:07:58] <ronald_mcdonald> Its most probably bigotry from the fp people
[22:07:58] <hjf> it's all events, baby
[22:07:59] *** Quits: nekobyte (~nekobyte@user/nekobit) (Quit: nekosleep)
[22:08:10] <moctezuma> ronald_mcdonald: I'm not looking to debate. You can't convert me.
[22:08:18] <ronald_mcdonald> fp fanatics like to see themselves as the most superior beings on earth
[22:08:22] <neshpion> hjf: i don't really work in js too much, but are you telling me there's no real way to set breakpoints and look at a backtrace?
[22:08:27] <moctezuma> ronald_mcdonald: Stop it.
[22:08:35] <ronald_mcdonald> You stop it
[22:08:37] <ronald_mcdonald> You started it bro
[22:08:59] <moctezuma> ronald_mcdonald: I only gave him advice. I specifically asked not to start a debate.
[22:09:09] <hjf> neshpion: in nodejs "kind of" but since this  all event based, where the hell do you set your breakpoints?
[22:09:28] <ronald_mcdonald> Nobody can prevent a debate in a public chat
[22:09:37] <|smlckz|> console.log debugging!
[22:09:39] <moctezuma> ronald_mcdonald: That's right.
[22:09:47] <moctezuma> hjf: Use printing.
[22:09:51] <moctezuma> hjf: It's very useful.
[22:09:54] <neshpion> hjf: i don't see why being event-based would make that decision any more difficult.  you just put it where you want to see whether the code is being reached or not
[22:10:07] <moctezuma> hjf: In most breakpoint debugging, you can't see past. If you print, you can.
[22:10:31] <neshpion> moctezuma: my debugging is 99% print statements, but printing doesn't give me a backtrace which is one thing that i seldom need, but when i need it i *really* need it and it makes solving the problem a ton easier
[22:11:03] <hjf> neshpion: i don't even know where the code starts, lol
[22:11:07] *** Quits: dunkeln (~dunkeln@188.71.193.140) (Ping timeout: 246 seconds)
[22:11:17] *** Quits: cliluw (~cliluw@47.147.80.149) (Read error: Connection reset by peer)
[22:11:20] *** Quits: jphaynes66 (~TerraFirm@75-166-102-68.hlrn.qwest.net) (Quit: Bye y'all.)
[22:11:21] <moctezuma> hjf: What company is it?
[22:11:35] <neshpion> hjf: that's why you need to see a backtrace x)
[22:11:46] <hjf> cant give details but it's german so i'm not surprised it's overengineered
[22:12:22] <hjf> say you have an express app in js. you define your app, add some endpoints which are callbacks called from URL endpoints, easypeasy
[22:12:30] <hjf> this thing does
[22:12:37] <moctezuma> hjf: That's certainly not true. Germans have a stereotype of doing precise engineering, not of being baroque.
[22:13:06] *** Quits: soulisson (~soulisson@user/soulisson) (Quit: Leaving)
[22:13:08] <hjf> moctezuma: audi with a timing chain at the rear end of the engine would beg to disagree
[22:13:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:13:34] <|smlckz|> what is the difference between programming and software engineering?
[22:13:53] <hjf> anyway call a factory that gets the object that is the  main thread w/e
[22:13:55] <hjf> because
[22:14:04] <hjf> why instantiate a singleton if you can call a factory right?
[22:14:07] <moctezuma> hjf: I thought Bauhaus Style which came out of Germany emphasised minimalism.
[22:14:33] <neshpion> |smlckz|: programming is writing code that appropriately accomplishes its task; the term "software engineering" is an almost meaningless embellishment for "programming" :P
[22:14:33] <ronald_mcdonald> Bauhaus style?
[22:14:43] <moctezuma> ronald_mcdonald: It's architecture.
[22:14:54] <hjf> ok it calls it, then calls the factoriedshit.start()
[22:15:07] <ronald_mcdonald> moctezuma, I see
[22:15:08] <hjf> the factoriedshit.start() has about 30 different lines of
[22:15:31] <hjf> initializethis, initializelogger, initializemodule ,initialize etc until it finally...
[22:15:38] <hjf> calls the factories for the routes themselves
[22:16:28] <b0rf> @neshpion well said
[22:16:50] <hjf> there seems to be about 10 files for each api endpoint
[22:17:19] <|smlckz|> more code, more time/effort to change and maintain, ''job security''
[22:17:30] <hjf> they don't just import a module and slap it into a route
[22:17:58] <hjf> the scary part is that they're writing OOP-heavy JS
[22:18:00] <hjf> and
[22:18:02] <hjf> dude
[22:18:07] <|smlckz|> add `more inefficiency` to the middle of my list
[22:18:13] <hjf> why the fuck are you using JS in the first place if you wanted OO
[22:18:22] <neshpion> JS is OO...
[22:18:36] <hjf> js HAS OO
[22:18:42] <hjf> js isn't OO
[22:18:59] <moctezuma> hjf: Just ask some of the experienced programmers. Someone would probably have some notes or diagrams.
[22:19:01] <|smlckz|> can you show us some sample code so that we can rofl?
[22:19:04] <neshpion> how can you say JS "isn't" OO when everything in JS is an object
[22:19:23] <hjf> dude
[22:19:27] <hjf> js is prototype based
[22:19:29] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Quit: leaving)
[22:19:31] <neshpion> ok and?
[22:19:35] <hjf> i can add anything to any object
[22:19:35] <neshpion> that's one implementation of OO
[22:19:37] <hjf> and js will let me
[22:19:39] <|smlckz|> neshpion: undefined isn't an object
[22:19:42] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[22:19:47] <neshpion> |smlckz|: :(
[22:19:50] <ronald_mcdonald> hjf, not a good idea to modify stdlib objects
[22:19:55] <hjf> js will let me shoot myself in the foot
[22:20:05] <ronald_mcdonald> or framework objects for that matter
[22:20:15] <hjf> more "OO" OO languages, like Java or .NET will not let me do stupid shit JS allows
[22:20:18] <moctezuma> hjf: Yeah! Post some sample code.
[22:20:20] <|smlckz|> but null is an object *weep*
[22:20:51] <ronald_mcdonald> The problem with js is that anything is valid
[22:21:19] <|smlckz|> JS has as much footguns, if not more, as C
[22:21:27] <hjf> more
[22:21:32] <neshpion> ok but that doesn't make it not OO
[22:21:36] <hjf> first class functions
[22:21:52] <hjf> introduce first class functions and you've doubled, hell, squared your footguns
[22:21:55] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[22:22:05] *** Joins: NEYi (~NEYi@109.251.216.38)
[22:22:41] <hjf> anyways they actually use TS, not just JS
[22:22:51] <hjf> and this is where i kind of like to stop
[22:22:52] <hjf> and think
[22:23:00] <neshpion> i hear TS is nicer than JS but i don't know it
[22:23:03] <hjf> if you're using TS, IoC, factories,
[22:23:27] <hjf> and heavy use of OOP with modularity, dependency injection,
[22:23:33] <hjf> why use JS in the first place?
[22:23:34] *** Quits: freakazoid333 (~freakazoi@72.168.176.141) (Read error: Connection reset by peer)
[22:23:40] <|smlckz|> js had first class functions from the very beginning; why do you think first class functions as a footgun? i find it a boon
[22:23:44] <moctezuma> hjf: It's popular.
[22:23:47] <hjf> .net core is what you really wanted
[22:24:08] <hjf> |smlckz|: because i'm very guilty of abusing first class functions
[22:24:12] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Read error: Connection reset by peer)
[22:24:36] <dogood> hjf: What's the use case? Are we talking cloud functions where cold starts are an issue? dotnet core isn't up to task just yet in that department.
[22:24:48] <|smlckz|> hjf: please show us some examples
[22:25:00] <ronald_mcdonald> Its bs to claim js makes life easier because frontend people will be able to use their skills there too
[22:25:15] <ronald_mcdonald> the server is a different environment and a completely different kind of programming
[22:25:18] <neshpion> |smlckz|: it's company code so may be under NDA
[22:25:48] <hjf> i probably am under nda
[22:25:54] <hjf> but basically they use Koa
[22:26:02] <hjf> which seems to be a funkier version of express
[22:26:11] <hjf> and they call it like this:
[22:26:24] <moctezuma> hjf: So basically, you are here to just vent.
[22:26:36] <|smlckz|> *sigh*
[22:26:47] <moctezuma> hjf: We are not amused.
[22:26:55] *** Quits: Retropikzel (~Retropikz@2001:999:202:2f09:1d63:5023:8364:6193) (Ping timeout: 256 seconds)
[22:26:58] <hjf> const app: Koa = source.get<interfaces.Factory<Koa>>(TYPES.App)() as Koa
[22:27:30] *** Quits: inky (~inky@141.136.79.203) (Ping timeout: 256 seconds)
[22:27:41] <moctezuma> hjf: We are reaching abstraction levels that shouldn't even be possible.
[22:27:42] <hjf>   server = app.listen(80, () => console.log(`Listening on 80`))
[22:27:57] <hjf> now would you look at that
[22:28:01] <hjf> the init code has 2 lines
[22:28:03] <hjf> those two
[22:28:19] <moctezuma> hjf: I have one advice which you wouldn't like.
[22:28:37] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 246 seconds)
[22:28:40] <hjf> did... did they really need to declare a type ? just to make TS happy?
[22:28:56] <hjf> const app=require('express')
[22:29:01] <hjf> app.listen (80)
[22:29:04] <hjf> dassit
[22:29:10] <hjf> you dont need more dan dat bruh
[22:29:16] <moctezuma> hjf: No. When you declare types, you go all the way.
[22:29:25] <moctezuma> hjf: It's for your own good.
[22:29:36] <hjf> be assimilated
[22:29:37] <moctezuma> Dynamic typing lovers, please don't hit me.
[22:29:54] <ronald_mcdonald> C has a good balance of typing
[22:30:12] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[22:30:23] <moctezuma> hjf: Types help you get a sense of the program. But if there are too many levels of abstraction, types would only be a problem.
[22:30:33] <moctezuma> hjf: This is evident in Java.
[22:31:10] <moctezuma> Can I search YouTube from here?
[22:31:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:35] <hjf> i mean i'm used to typing
[22:31:37] *** Joins: freakazoid333 (~freakazoi@72.168.176.199)
[22:31:41] <hjf> programmed .net for 15 years
[22:31:43] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[22:32:16] <moctezuma> hjf: Rob Pike delivered a talk called "Public Static Void" in OSCON 2010. That capture the essence of it.
[22:32:42] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[22:33:01] <moctezuma> ronald_mcdonald: Have you checked Ada out?
[22:33:27] <ronald_mcdonald> Not yet
[22:33:38] <|smlckz|> hjf, adding more to your grief, sadness, anger: https://wtfjs.com/
[22:33:44] <deniska> moctezuma: dark one? https://github.com/sjl/badwolf
[22:33:51] <moctezuma> ronald_mcdonald: I keep hearing it's good.
[22:34:02] <moctezuma> deniska: I like it.
[22:34:07] *** Joins: Pickchea (~private@user/pickchea)
[22:34:08] <ronald_mcdonald> I think it was used for defence coding or something
[22:34:13] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[22:34:20] <moctezuma> ronald_mcdonald: It's more general that that.
[22:34:27] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[22:34:38] <|smlckz|> new Boolean(false) is truey!!
[22:34:44] <moctezuma> ronald_mcdonald: Some systems programmers swear by it. I have yet to try it.
[22:35:10] <neshpion> i keep hearing OCaml is good but hard to get into
[22:35:35] <neshpion> and then i ran into some language, i think Reason, that makes OCaml look like javascript...?
[22:35:48] <GeDaMo> OSCON 2010:  Rob Pike, "Public Static Void" https://www.youtube.com/watch?v=5kj5ApnhPAE
[22:35:59] *** Quits: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 256 seconds)
[22:36:00] <moctezuma> GeDaMo++
[22:36:04] *** Quits: freakazoid333 (~freakazoi@72.168.176.199) (Read error: Connection reset by peer)
[22:36:13] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[22:36:22] * ronald_mcdonald plays an ice cream bell for moctezuma 
[22:36:35] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[22:36:39] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Read error: Connection reset by peer)
[22:36:40] <moctezuma> ronald_mcdonald: What?
[22:36:48] <ronald_mcdonald> Yes
[22:36:56] <ronald_mcdonald> ice cream truck jingle
[22:36:59] <moctezuma> ronald_mcdonald: I don't get it.
[22:37:05] <ronald_mcdonald> Theres nothing to get
[22:37:15] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:37:15] *** Joins: inky (~inky@141.136.79.203)
[22:37:17] <moctezuma> ronald_mcdonald: You're mocking?
[22:37:23] <ronald_mcdonald> moctezuma, no
[22:37:26] <GeDaMo> I'll have a 99 :P
[22:37:44] <GeDaMo> https://en.wikipedia.org/wiki/99_Flake
[22:38:15] * ronald_mcdonald hands GeDaMo a 99 flake
[22:39:15] *** Joins: Guest44 (~Guest44@160.238.74.80)
[22:39:17] <moctezuma> ronald_mcdonald: I'll have a rib-eye Porterhouse steak, medium rare.
[22:39:37] * ronald_mcdonald hands moctezuma his steak
[22:40:29] *** Parts: dogood (~roger_dog@174.127.241.77) ()
[22:41:54] *** Quits: SGautam (uid286066@id-286066.charlton.irccloud.com) (Ping timeout: 240 seconds)
[22:42:51] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[22:43:09] *** Joins: SGautam (uid286066@id-286066.charlton.irccloud.com)
[22:46:22] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[22:46:56] *** Joins: freakazoid333 (~freakazoi@72.168.176.57)
[22:49:21] <neshpion> this whole rob pike video was just a Go advertisement; i want my money back
[22:49:50] <deniska> neshpion: do you have a receipt?
[22:50:43] <neshpion> does the vein in my forehead count?
[22:50:55] <deniska> Listening to Rob Pike and complaining about him endorsing Go is like going to Metallica and asking them to turn the volume down
[22:52:42] <neshpion> well i thought he had something interesting to say about how to simplify programming in the languages we already have, not proffer his language as the solution to a problem endemic to enterprise programmers
[22:53:44] *** Quits: Guest44 (~Guest44@160.238.74.80) (Quit: Client closed)
[22:54:12] <moctezuma> neshpion: It was a Go advertisement, lol.
[22:55:13] *** Quits: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 268 seconds)
[22:56:50] *** Joins: dunkeln (~dunkeln@188.71.193.140)
[22:57:04] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[22:57:06] *** password2 is now known as password4
[22:57:58] <moctezuma> Does Go really solve the problem he described?
[23:00:01] <mrig> deniska: lol
[23:00:12] *** password4 is now known as password8
[23:00:13] <neshpion> i read a series of comics bashing the way Go programmers have developed their ecosystem, it was from a SML programmer.  i'll try to find it to see if it's relevant here
[23:00:38] <moctezuma> neshpion: He really does sell Go in the end as a silver bullet, right?
[23:00:58] <moctezuma> I'm sorry I didn't remember that part when I suggested the video.
[23:01:02] <neshpion> moctezuma: it wouldn't have been so bad if he had bothered to show code examples to contrast with, but he didn't
[23:01:34] <neshpion> although even if he had, one could argue it was the *programmers* behind each snippet and not the language
[23:03:46] *** Joins: node1 (~node1@user/node1)
[23:04:40] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[23:05:05] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[23:05:07] *** Joins: mrig (~mrig@user/mrig)
[23:06:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:06:39] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[23:11:05] *** Joins: wovixo (~wovixo@128.104.205.49)
[23:12:12] *** Soni is now known as queeries
[23:12:58] <moctezuma> neshpion: I think in Go things are simpler than that.
[23:13:06] <moctezuma> neshpion: I don't use Go, though.
[23:13:11] <moctezuma> neshpion: Ask `mrig`.
[23:14:48] *** Quits: inky (~inky@141.136.79.203) (Ping timeout: 272 seconds)
[23:15:54] <mrig> go keeps things simple, but that does not mean that it is easy to write really good code.
[23:16:05] <mrig> it is just harder to write utter rubbish.
[23:17:05] <mrig> easy to obfuscate rubbish with complexity.
[23:18:53] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:5137:4898:53f7:15de)
[23:19:54] <mrig> and writing good go code is far from simple.
[23:21:05] *** Joins: CJ (~C0NDR@2607:fb90:5d84:5202:803:edc:9d10:73b7)
[23:22:58] *** Joins: Inari (~Pinkishu@p508ef25e.dip0.t-ipconnect.de)
[23:23:02] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Ping timeout: 272 seconds)
[23:24:24] *** Joins: pragmatic (~pragmaitc@24.102.245.53.res-cmts.lcp.ptd.net)
[23:24:27] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[23:25:50] *** Quits: pragmatic (~pragmaitc@24.102.245.53.res-cmts.lcp.ptd.net) (Quit: Konversation terminated!)
[23:26:47] <mrig> no selling as a silver bullet though, just observations; Continually states that java and C++ are fine for seasoned programmers.
[23:28:22] <mrig> I personally think that it makes a great learners language or engineers language, could someday become as popular as say python for astronomers or what ever it is biologists use.
[23:28:44] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 272 seconds)
[23:29:04] <GeDaMo> I suspect that biologists use Python
[23:29:20] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[23:29:22] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Quit: "Squawk 7600")
[23:29:54] <|smlckz|> and they might move to julia or rust ...
[23:30:00] <neshpion> julia will overtake python in the science community
[23:30:21] <mrig> could be yes, a lot of java in the genetics area perhaps to I think.
[23:30:27] <neshpion> nerds will flock to it because it looks like math
[23:30:31] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[23:31:34] <mrig> does it have lots of matrices then?
[23:31:40] <|smlckz|> well, ms excel might be harder to replace
[23:31:41] <mrig> should do if it looks like math.
[23:31:54] *** Joins: aradesh (~aradesh@user/aradesh)
[23:32:01] <neshpion> yes it seeks to dethrone Python, Matlab and R all in one fell swoop
[23:32:22] <mrig> |smlckz|: the quantity of mistakes in excel documents will do that all by itself.
[23:32:49] <mrig> copy past errors, table selection mistake and the likes.
[23:33:10] *** Quits: password8 (~password@user/password2) (Ping timeout: 272 seconds)
[23:33:54] *** Joins: Nact (~l@host-85-27-122-59.dynamic.voo.be)
[23:34:21] *** Quits: CJ (~C0NDR@2607:fb90:5d84:5202:803:edc:9d10:73b7) (Ping timeout: 256 seconds)
[23:34:25] <|smlckz|> if that data were to be stored in the very well designed sqlite format...
[23:35:28] *** Quits: Leone (~Leo@65-110-221-121.cpe.pppoe.ca) (Read error: Connection reset by peer)
[23:35:34] *** Joins: snayni (~a0ee4a50@ircip2.mibbit.com)
[23:35:42] *** Quits: anovick (~anovick@IGLD-83-130-156-7.inter.net.il) (Ping timeout: 272 seconds)
[23:36:06] <neshpion> there's a sqlite package
[23:36:27] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[23:36:42] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:37:26] <mrig> well you can just use files too.
[23:37:40] <mrig> does not have to be relational.
[23:38:23] <mrig> if you are programming the logic you can do whatever you want.
[23:38:43] <mrig> scientist are supposed to be able to think :)
[23:38:44] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:39:36] <neshpion> sometimes just bean-counting is enough
[23:39:55] <neshpion> if you can count beans really good, you can partake in that 30+ year ecoli experiment thing
[23:40:53] <mrig> sure rigorous bean counting is a thing :)
[23:41:22] <neshpion> i'm surprised it hasn't been relegated to CV already.  counting little spots on a dish is something that probably should be automated
[23:41:27] *** Quits: paulo_ (~paul0@user/paulo/x-9032687) (Ping timeout: 265 seconds)
[23:41:35] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Quit: "Squawk 7600")
[23:42:02] *** Quits: moctezuma (~moctezuma@59.88.28.22) (Ping timeout: 272 seconds)
[23:42:11] *** Joins: jamea (~jamea77@10.189-202-213.bestelclientes.com.mx)
[23:42:20] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[23:43:26] *** Joins: dan01 (~dan01@2a02:2f09:3f1a:dd00:806d:44b9:2f67:6e0a)
[23:46:34] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[23:47:53] <mrig> if you automate counting spots on a dish, how can you prove that the software that was doing the counting is correct?
[23:48:32] <mrig> probably not any more complicated than proving that the author of a paper is not fibbing mind you.
[23:48:39] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Quit: "Squawk 7600")
[23:48:44] <GeDaMo> Haven't they already done that with cancer testing?
[23:49:32] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[23:50:17] <mrig> I think so, for screening scans?
[23:50:23] *** Quits: elnavigator (~elnavigat@105.196.115.142) (Client Quit)
[23:50:49] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:50:52] <GeDaMo> Yeah, I think I saw something about identifying anomalous cells
[23:51:11] *** Joins: elnavigator (~elnavigat@105.196.115.142)
[23:51:24] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[23:51:53] <snayni> can one gain algorithmic thinking in one month?
[23:51:57] <mrig> Likely pretty darned good at it too, well the cardiogram is a really nice example of medical screening being done by a computer too.
[23:52:07] <GeDaMo> What is "algorithmic thinking"?
[23:52:13] <mrig> spotting the onset of fibrillation.
[23:52:36] <snayni> GeDaMo:  problem solving
[23:52:45] <snayni> with better solution
[23:53:25] <mrig> I think one month of Sundays should be enough, if there is a blue moon on the same month :P
[23:53:52] <snayni> mrig: ha what?
[23:54:04] <mrig> snayni: I am working on my basic math to help with my thinking :)
[23:54:27] <mrig> snayni: oh, sorry those are some quite colloquial english terms.
[23:54:55] <snayni> you 4 days are sufficient?
[23:55:03] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:55:28] <mrig> snayni: I'm sorry snayni, I did not understand your question.
[23:55:35] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[23:55:58] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[23:56:06] <snayni> mrig ->  think one month of Sundays should be enough, if there is a blue moon on the same month  so 4 sundays in one month
[23:56:18] <mrig> The spotting of fibrillation is awesome, would like to find and read that code some day.
[23:57:19] <mrig> snayni: oh I see! well a month of Sundays is really an expression of a date format that will never exist.
[23:57:56] <mrig> and a blue moon, is a month in which the full moon happens twice, which are themselves quite rare.
[23:58:48] <mrig> snayni: but I was being facetious, you can improve your algorithmic problem solving skills with practice, but how long it takes is likely very different for every individual.
