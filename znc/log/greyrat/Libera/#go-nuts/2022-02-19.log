[00:00:12] *** Joins: goldfish (~goldfish@user/goldfish)
[00:03:13] <seebs> well, they're gonna have a bunch of people try fuzzing and see if any of them produce results, then adaptively migrate the team towards those people
[00:04:14] <ikke> fuzzing the fuzzers?
[00:04:57] <b0nn> lol
[00:05:16] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[00:05:45] <b0nn> Maybe Jay Conrod takes over?
[00:06:05] <b0nn> She (Katie) is certainly a big loss
[00:15:13] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:19:02] *** Quits: tnez (~el@user/tnez) (Ping timeout: 240 seconds)
[00:23:32] *** Joins: tnez (~el@user/tnez)
[00:23:44] *** smlavine is now known as smlaVine
[00:25:35] *** smlaVine is now known as smlavine
[00:27:23] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 256 seconds)
[00:28:34] *** Quits: tnez (~el@user/tnez) (Ping timeout: 272 seconds)
[00:33:24] *** Joins: tnez (~el@user/tnez)
[00:34:47] *** Joins: FunnyLookinHat (~FunnyLook@64.184.145.40)
[00:40:16] *** Joins: mnlwldr (~mnlwldr@dynamic-077-190-030-020.77.190.pool.telefonica.de)
[00:42:32] *** Quits: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722) (Ping timeout: 250 seconds)
[00:42:36] *** Quits: tnez (~el@user/tnez) (Ping timeout: 240 seconds)
[00:44:32] *** Quits: mnlwldr (~mnlwldr@dynamic-077-190-030-020.77.190.pool.telefonica.de) (Client Quit)
[00:45:39] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[00:46:05] *** Joins: tnez (~el@user/tnez)
[00:49:05] *** Quits: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[00:50:28] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[00:51:22] *** Quits: tnez (~el@user/tnez) (Ping timeout: 272 seconds)
[00:51:45] *** Joins: noarb- (~noarb@user/noarb)
[00:52:19] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[00:53:47] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[00:56:01] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[00:59:29] *** Joins: noarb (~noarb@user/noarb)
[01:00:52] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 272 seconds)
[01:06:29] *** Quits: moog (~moog@107.126.48.23) (Ping timeout: 256 seconds)
[01:10:17] <blinux> Anyone using vim-go and can share their nvim init.vim file? I'm having trouble getting all syntax highliting to work. I'm using dracula theme.
[01:15:33] <mickey8> in a benchmark, when i get Benchmark_Sanitize-12    	       1	1890586700 ns/op	  459456 B/op	    3724 allocs/op, this means b.N was run 1 time, and it took it 1890586700 nanoseconds to complete, right?
[01:17:25] <blinux> I'm really not familiar with that kind of data. But, it looks like it is saying nano-seconds per operation, Byes per operation and allocations (memory?) per operation.
[01:17:37] *** Joins: tnez (~el@user/tnez)
[01:17:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:18:12] <mickey8> the thing is, when the coder is simpler (i removed something that i believe was "expensive"), the number went up almost 2x
[01:18:17] <mickey8> code*
[01:19:02] *** Joins: moog (~moog@107.126.48.23)
[01:19:07] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:22:20] <blinux> I'm not sure why that would be. I haven't studied doing benchmarks on Go. Could it be some architectural benefit from the compiler which is a fluke in a sense? What if you add even more code? It it linear?
[01:25:14] <fizzie> Yes, the first numeric column is the number of repeats it did to get the rest of the numbers (the final b.N value).
[01:26:10] <mickey8> fizzie what about the ns/op?
[01:26:53] *** Quits: tnez (~el@user/tnez) (Ping timeout: 256 seconds)
[01:27:39] *** Joins: nitrix (~nitrix@user/nitrix)
[01:29:21] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[01:30:41] <fizzie> The total time taken by the benchmark method divided by N. In the case of b.N == 1, that's of course just the total time.
[01:31:15] <mickey8> right, so the lower the better. im not sure why it went up when i removed stuff :/
[01:32:51] *** Joins: tnez (~el@user/tnez)
[01:33:34] <mickey8> and when i added some simple regex, but still, it's a regex, it went down 13%
[01:36:33] <bpalmer> mickey8: for most tasks, running it just once (b.N = 1) is incredibly noisy.
[01:37:05] <mickey8> bpalmer it chooses how many times to run on its own
[01:38:24] <bpalmer> mickey8: go test takes a -count command line flag.
[01:39:03] <mickey8> i didnt specify it. sometimes it does b.N = 1, sometimes hundreds or even thousands
[01:39:49] <fizzie> You can do -benchtime=60s to tell it to run for "about a minute".
[01:40:08] <fizzie> Then it'll generally speaking do more repeats. The default is just one second per benchmark.
[01:41:47] <fizzie> (So if you've got something that takes 1890586700ns, or 1.9s, to run just once, that's what it does.)
[01:47:39] <pyzozord> that stuff is not implementede yet right? https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md
[01:47:47] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:49:33] *** Quits: tnez (~el@user/tnez) (Ping timeout: 256 seconds)
[01:49:45] <ikke> pyzozord: that will come with 1.18
[01:49:50] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:252f:1c34:e1bf:7de2) (Ping timeout: 260 seconds)
[01:50:06] <bpalmer> pyzozord: go 1.18 release candidate 1 was released yesterday; it includes an implementation of that proposal. See https://tip.golang.org/doc/go1.18
[01:50:56] <bpalmer> at least, I think it was released.
[01:51:35] <bpalmer> Yep; see https://twitter.com/golang/status/1494357537004654597
[01:52:28] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[01:55:01] *** Joins: tnez (~el@user/tnez)
[01:55:03] <pyzozord> what's a tldr for the generics, are they necessary? We already have interfaces
[01:56:22] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[01:56:40] <ikke> pyzozord: for generic functions over containers
[01:57:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:57:34] *** Joins: ugjka (~ugjka@ugjka.net)
[01:57:44] <bpalmer> tldr; compile-time type safety instead of run-time type safety.
[01:57:51] <ikke> and also for generic functions over interfaces
[01:58:38] <bpalmer> as for necessary: no. Entire programming languages are popular without anything like a compile-time type system.
[02:01:45] *** Quits: tnez (~el@user/tnez) (Ping timeout: 256 seconds)
[02:02:51] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:03:13] *** Joins: tnez (~el@user/tnez)
[02:04:37] <nitrix> Hopefully it cleans up some of the library functions and types, like sort.Sort and company.
[02:05:24] <nitrix> It'll be interesting to see what they choose. The Go 1.0 promise of compatibility or keeping the language consistent and sane.
[02:05:57] <seebs> i suspect both. the new generic things will be in /x/ for now and will eventually get packages that don't break the existing packages.
[02:07:03] <nitrix> That's what I fear. Then you end up with an old obsolete way of doing things that people recommend against, and a newer way, with endless debates.
[02:07:38] <nitrix> I personally hope they bite the bullet. The go.mod file has a Go version in it, that should be enough.
[02:08:37] <nitrix> And you could have `go fix` upgrade between versions, like they claimed it would.
[02:09:35] <nitrix> Even though, a more generic sort.Sort should remain for the most part compatible with the more concrete usages present in code bases; minus where it's passed into a high-order function.
[02:09:57] *** Quits: tnez (~el@user/tnez) (Ping timeout: 256 seconds)
[02:10:34] <bpalmer> eh. A simple sort.SortT()  wouldn't be the worst thing.
[02:11:19] <bpalmer> Go has managed with a bunch of similar function names with a suffixing convention (see all the regex functions)
[02:11:35] <seebs> i'm pretty okay with leaving the old one there and there might even be cases where it's preferable
[02:11:44] <seebs> i certainly use sort on things which are comparable but where i don't want to use < to compare them
[02:13:37] <bpalmer> 90% of the time, I want SortSlice or SortSliceStable, not Sort
[02:18:54] *** Quits: sdemingo (~sdemingo@texto-plano.xyz) (Quit: leaving)
[02:21:14] *** Joins: ejjfunky (~ejjfunky@125.164.19.4)
[02:21:20] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:b43b:ba1d:a4b3:8c7b)
[02:23:48] *** Joins: tnez (~el@user/tnez)
[02:24:36] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[02:25:12] *** Quits: FunnyLookinHat (~FunnyLook@64.184.145.40) (Remote host closed the connection)
[02:33:20] <blinux> Does anyone have an nvim init.vim file that works with vim-go and coc with syntax highlithing working on all syntax they could share?
[02:33:43] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[02:34:31] <b0nn> blinux: as much as it pains me to say this
[02:34:54] <b0nn> I think that you might have better luck on golang's slack, there's a vim or vim-go channel
[02:35:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1d0c-49f9-d027-bee6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:35:42] <b0nn> Also, you need to describe your issue in slightly more detail, you say some things highlight and others don't - you need to spell out what is and isn't being highlighted
[02:36:12] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 240 seconds)
[02:36:41] <b0nn> I mean - I use vim-go with vim, and some things highlight and some don't, but, I have no idea whether that's a bug or not, and it's never mattered to me'
[02:37:08] *** Quits: moog (~moog@107.126.48.23) (Ping timeout: 272 seconds)
[02:37:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:37:54] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[02:39:25] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[02:43:32] *** Joins: moog (~moog@107.126.48.23)
[02:45:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[02:51:03] *** Quits: moog (~moog@107.126.48.23) (Ping timeout: 256 seconds)
[02:51:03] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[02:54:22] *** Joins: moog (~moog@107.126.48.23)
[02:55:31] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:01:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[03:07:11] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 256 seconds)
[03:10:15] *** Quits: wikro_ (~foo@hjkl.se) (Quit: brb)
[03:16:49] *** Quits: NOTevil (~notevil@user/notevil) (Ping timeout: 256 seconds)
[03:19:03] *** Joins: SuperLag (~akulbe@user/superlag)
[03:30:53] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.4)
[03:32:24] *** Quits: beholders_eye (~weechat@2804:1b3:70c0:f19a:e69d:23ca:8c2e:1285) (Ping timeout: 250 seconds)
[03:32:34] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[03:32:46] *** Joins: notevil (~notevil@user/notevil)
[03:32:52] *** Joins: beanzilla (beanzilla@user/beanzilla)
[03:38:53] *** Joins: mohan43u (~mohan@user/mohan43u)
[03:45:31] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:b43b:ba1d:a4b3:8c7b) (Quit: Leaving)
[03:49:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:56:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[03:57:43] *** Joins: Thedarkb2-Work (~Thedarkb@62.232.253.82)
[03:58:02] *** Quits: Thedarkb1-Work (~Thedarkb@62.232.253.82) (Remote host closed the connection)
[04:02:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[04:02:12] *** Quits: normen (~normen@p200300d717235c00b9ba1e41bb21f2bb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:04:11] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:05:08] *** Joins: koo5_ (~quassel@51.140.155.227)
[04:10:34] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[04:15:17] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[04:22:16] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[04:26:41] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:26:41] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[04:31:03] *** Joins: vptr (~vptr@user/vptr)
[04:32:32] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:6dd8:7cde:f63:8efb) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:39:44] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[04:41:24] *** Quits: adip_ (~adip@dia24.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[04:41:24] *** Quits: adip (~adip@dia24.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[04:43:41] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: quick everyone outta the universe)
[04:45:04] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:45:29] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:56:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[05:24:12] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[05:40:13] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6)
[05:43:48] *** Quits: ttpp (~tttppp@37.115.45.192) (Ping timeout: 240 seconds)
[05:50:38] *** Joins: noarb- (~noarb@user/noarb)
[05:50:57] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 272 seconds)
[06:04:32] *** Quits: justGhost (~justache@user/justache) (Read error: Connection reset by peer)
[06:06:04] *** Joins: justGhost (~justache@user/justache)
[06:07:02] *** Joins: orthoplex64 (~crm@70.120.0.94)
[06:12:21] *** evanextreme is now known as evanextreme[away
[06:22:42] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:23:17] *** Quits: moog (~moog@107.126.48.23) (Remote host closed the connection)
[06:25:12] *** Joins: moog (~moog@107.126.48.23)
[06:31:28] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[06:45:51] *** Quits: ramrunner (~dsp@78.141.218.152) (Ping timeout: 250 seconds)
[06:46:17] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:46:24] *** Joins: normen (~normen@pd9eec481.dip0.t-ipconnect.de)
[06:46:53] *** Joins: ramrunner (~dsp@78.141.218.152)
[06:47:43] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[06:49:00] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Remote host closed the connection)
[06:49:20] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[06:51:01] *** Quits: normen (~normen@pd9eec481.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:52:43] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:913b:c4e3:4b44:3850) (Quit: My laptop has gone to sleep. Bye!)
[07:17:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:17:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:20:58] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Remote host closed the connection)
[07:21:20] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[07:21:32] <dostoyevsky2> in this cancellable webrequest via channels example the race detector is complai
[07:21:35] <dostoyevsky2> ning that context.WithCancel.func1() is reading the error while `if errors.As(err, &context.Canceled)' is writing it...  But I am not sure how to avoid that rac
[07:22:14] <dostoyevsky2> in this cancellable webrequest via channels example the race detector is complaining that context.WithCancel.func1() is reading the error while `if errors.As(err, &context.Canceled)' is writing it...  But I am not sure how to avoid that race condition...
[07:23:25] <dostoyevsky2> I do need to detect the Canceled error, so I know that my client.Do(req) was cancelled...
[07:25:01] <seebs> i don't think "errors.As" should ever be writing to anything
[07:25:24] <seebs> can you make a tiny self-contained example that works on go playground or something and shows the issue run with go test -race or something?
[07:26:06] <dostoyevsky2> > Write at 0x000000a734a0 by goroutine 11:   // reflect.typedmemmove() // /t/go-release-branch.go1.16/src/runtime/mbarrier.go:177 +0x0 // internal/reflectlite.typedmemmove() // /t/go-release-branch.go1.16/src/runtime/mbarrier.go:191 +0x3e // errors.As()
[07:28:19] <dostoyevsky2> seebs: so errors.As does reflect.typedmemove which conflicts with context.WithCancel.func1() reading the error...
[07:28:56] <dostoyevsky2> Is there a better way to check if my error is the context.Canceled?
[07:28:58] <seebs> like i said, a self-contained example would help a lot
[07:29:00] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Remote host closed the connection)
[07:29:05] <seebs> you should not check if your error is context.Canceled
[07:29:20] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[07:29:31] <seebs> ohhh, i was wrong about errors.As, apparently, and... don't use that
[07:30:13] <seebs> so the problem is, errors.As is trying to match something to a type, and then it's trying to *write a value into the object you give it*
[07:30:30] <seebs> "context.Canceled" is the one true global universal Canceled error object
[07:30:36] <seebs> you should ABSOLUTELY NOT be overwriting it
[07:30:38] <dostoyevsky2> hmmm...
[07:30:38] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:30:42] <seebs> but errors.As isn't the right tool here!
[07:30:50] <seebs> errors.As is for cases where an error might have a *more specific type*
[07:31:02] *** Joins: greypw254 (~greypw2@grey.pw)
[07:31:03] <seebs> 		var pathError *fs.PathError
[07:31:04] <seebs> 		if errors.As(err, &pathError) {
[07:31:21] <seebs> in this case, we're trying to find out whether err is of the specific concrete type `fs.PathError`
[07:31:39] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:31:54] <seebs> What you probably want here is "errors.Is(err, context.Canceled)", but you may actually still not want that.
[07:32:02] *** Joins: greypw254 (~greypw2@grey.pw)
[07:32:28] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:32:51] *** Joins: greypw254 (~greypw2@grey.pw)
[07:33:06] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:33:17] <dostoyevsky2> Ah, now I changed it to `if errors.Is(err, context.Canceled)' and -race stopped complaining
[07:33:29] *** Joins: greypw254 (~greypw2@grey.pw)
[07:33:44] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:34:30] <dostoyevsky2> I do `response, err := client.Do(req)' and if I cancel the request, the err will be set but cancel is not an error in my code... because I implement a first-duplicate-reply-cancels-all-other-requests pattern
[07:36:51] <seebs> i was under the impression that the returned errors from client.Do were always of type *url.Error
[07:38:18] <seebs> so, i guess errors.Is is probably reasonable there. Anyway, I don't know. I guess I'd start with trying this to see whether it appears to actually produce the expected behavior -- a cancel causing you to get that test succeeding. If so, then ?probably? it works that way? I'm not actually sure whether to expect that. You could also check the context itself, as an alternative.
[07:44:05] <dostoyevsky2> https://go.dev/play/p/e2OGdubZLlE <- I tried to make it as small as possible but it's still 83 LoC
[07:45:34] <seebs> hmm
[07:45:57] <seebs> this feels messy but i'm having a hard time articulating why. you have this extra done channel you made, but you already have a context you can cancel.
[07:46:21] <seebs> and presumably, the right course would be to have a *shared* cancelable context which *all* the requests use, so if any of them comes back with a response, you cancel the request and all the others clean up.
[07:46:35] <seebs> because you already got your response and the cancelled context won't take it away from you.
[07:49:21] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:52:16] <dostoyevsky2> seebs: I don't think I can call the cancelFunc from outside a go routine... I need the done channel to trigger that inside the respective go routine... I tried calling the cancelFuncs directly in main() from the main go routine, storing all the cancels in a sync.Map -- but the race detector just had pages of complaints
[07:53:22] <dostoyevsky2> This is now the first version where the race detector doesn't complain anymore
[07:58:35] <blinux> Anyone have the vim-go syntax highlithing working where it matches vscode/codium? Some of the colors are different and some are not working at all. I'm using the Dracula theme. I thought I got it working fully once using the vim-go vimrc settings, but it doesn't seem like enough.
[08:05:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[08:06:43] *** Joins: alyx (~alyx@atheme/alyx)
[08:07:20] <seebs> there is no such thing as "outside a go routine".
[08:07:31] <seebs> everything is always goroutines. and you can call a cancel func from anywhere.
[08:07:38] <alyx> hi, I have a pointer to a struct (*foo) and I need a uh.. the words are escaping me, but not a pointer version (so just foo), is there a way to beat go into doing this?
[08:07:52] <seebs> so, you send off a request, which is using a context which has a cancel, and if you get a response, you call cancel, so any other requests using that context are canceled.
[08:08:00] <seebs> you don't need multiple cancels!
[08:08:17] <seebs> as soon as *any* of them returns, you can cancel the whole "sending out lots of requests", so they can all have the *same* context and cancel func.
[08:08:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:08:35] <seebs> alyx: if you have a *foo, and you want a foo: plain = *ptr
[08:08:50] <alyx> oh neat
[08:09:48] <seebs> this sort of reflects the old C idiom, although it's not as overwhelming and confusing as it was then, but the old statement was "declaration reflects use", so in C, "int *i" just meant that the expression "*i" was of type int, therefore, i was of type (int *).
[08:10:08] <seebs> go spells it as type "*int", but the basic notion is the same; "var ip *int; var i int; ip = &i; i = *ip"
[08:22:53] <alyx> that makes a lot of sense, thank you
[08:27:46] *** Quits: alyx (~alyx@atheme/alyx) (Quit: leaving)
[08:35:07] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:36:24] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:56:11] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[08:56:14] *** Joins: rcernin (~rcernin@124.190.132.36)
[08:56:30] *** Joins: mickey8 (~user@user/mickey)
[09:04:06] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[09:04:54] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[09:05:20] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:27:00] *** Quits: cim (~cim@205.185.117.110) (Ping timeout: 240 seconds)
[09:27:13] *** Joins: cim (~cim@205.185.117.110)
[09:36:46] *** Joins: k8yun (~k8yun@user/k8yun)
[09:48:29] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[09:50:34] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:58:05] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[09:59:37] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[10:00:59] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:01:03] *** Joins: adip (~adip@dia24.neoplus.adsl.tpnet.pl)
[10:01:06] *** Joins: adip_ (~adip@dia24.neoplus.adsl.tpnet.pl)
[10:01:10] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:03:10] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[10:03:23] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:03:48] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[10:06:20] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:08:02] *** Joins: eroux (~eroux@102-65-81-186.ftth.web.africa)
[10:15:02] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[10:15:23] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Quit: Leaving)
[10:15:39] *** Joins: rcernin (~rcernin@124.190.132.36)
[10:22:51] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:23:14] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[10:24:18] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:33:56] *** Joins: Atque (~Atque@user/atque)
[10:34:06] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[10:39:26] *** Joins: normen (~normen@p200300d717235c00b9ba1e41bb21f2bb.dip0.t-ipconnect.de)
[10:49:48] *** Quits: normen (~normen@p200300d717235c00b9ba1e41bb21f2bb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:54:41] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Ping timeout: 256 seconds)
[11:03:25] *** Joins: mrig (~mrig@user/mrig)
[11:06:58] *** Quits: eroux (~eroux@102-65-81-186.ftth.web.africa) (Ping timeout: 272 seconds)
[11:08:24] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:08:33] *** Quits: SuperLag (~akulbe@user/superlag) (Quit: leaving)
[11:09:47] *** Joins: SuperLag (~akulbe@user/superlag)
[11:14:35] *** Quits: rairden (~rairden@2603:9000:de04:9613::1a20) (Remote host closed the connection)
[11:19:12] *** Joins: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722)
[11:19:38] *** Joins: shka (~herr@109.231.3.55)
[11:20:35] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[11:36:00] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[11:57:42] *** Joins: sabas3dgh (~textual@85.9.98.2)
[12:03:44] *** Joins: yoonkn (~user@175.197.208.79)
[12:13:00] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:18:34] *** Joins: rcernin (~rcernin@124.190.132.36)
[12:25:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[12:27:48] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[12:30:10] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:31:30] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[12:31:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[12:31:53] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[12:40:37] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 240 seconds)
[12:41:18] *** Joins: nightrider (~nightride@31.187.110.131)
[12:44:49] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:45:22] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:45:56] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[12:47:34] *** Joins: rcernin (~rcernin@124.190.132.36)
[12:55:58] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[12:56:11] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[12:56:37] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Ping timeout: 240 seconds)
[12:57:51] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[12:58:11] *** Joins: teasea (~teasea@user/teasea)
[13:04:37] *** Joins: rendar (~rendar@user/rendar)
[13:05:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:08:24] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[13:09:07] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[13:17:23] *** Quits: Xizor_ (~Xizor@151.ip-51-68-121.eu) (Quit: ZNC 1.7.5 - https://znc.in)
[13:19:32] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[13:22:02] *** Joins: Xizor (~Xizor@151.ip-51-68-121.eu)
[13:26:57] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[13:30:03] *** Quits: couchllama (~llama@2604:a880:400:d0::1f90:1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[13:30:40] *** Joins: couchllama (~llama@2604:a880:400:d0::1f90:1)
[13:32:07] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:32:27] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[13:36:10] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Client Quit)
[13:37:07] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:39:46] *** Joins: bluedust (~bluedust@103.161.144.138)
[13:41:39] *** Joins: zim (~zim@user/zim)
[13:42:18] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:46:54] *** Joins: normen (~normen@p200300d717235c00b9ba1e41bb21f2bb.dip0.t-ipconnect.de)
[13:49:21] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[13:53:32] *** Quits: ShotokanZH (~ShotokanZ@aitch.me) (Ping timeout: 272 seconds)
[14:04:08] *** Joins: ShotokanZH (~ShotokanZ@aitch.me)
[14:11:37] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[14:13:35] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[14:24:17] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[14:24:24] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[14:32:49] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[14:33:17] *** Quits: jackneill (~jackneill@2001:4c4e:180d:1c00:c65d:bf4a:1f87:ffe6) (Remote host closed the connection)
[14:33:20] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[14:33:38] *** Joins: jackneill (~jackneill@2001:4c4e:180d:1c00:2ab:598e:90df:7117)
[14:40:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:49:44] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[14:50:51] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[15:16:26] *** Joins: bluedust (~bluedust@103.161.144.138)
[15:18:33] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[15:18:37] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[15:19:23] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[15:20:22] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[15:20:24] *** Joins: ttpp (~tttppp@37.115.45.192)
[15:21:05] *** Joins: normen_ (~normen@pd9eec481.dip0.t-ipconnect.de)
[15:22:39] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[15:22:45] *** Joins: andlabs_ (~andlabs@70.107.171.168)
[15:23:04] *** Quits: normen (~normen@p200300d717235c00b9ba1e41bb21f2bb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:24:52] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:25:05] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:25:50] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (Read error: Connection reset by peer)
[15:26:21] *** Joins: nightBulb (~nightBulb@59.98.186.198)
[15:26:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:26:50] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[15:32:15] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[15:42:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[15:44:19] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[15:44:44] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[15:47:19] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[15:47:46] *** Joins: Atque (~Atque@user/atque)
[15:49:09] *** Joins: advimirl (~advimirl@139-177-180-176.ip.linodeusercontent.com)
[15:58:43] *** Joins: bluedust_ (~bluedust@103.165.167.221)
[15:59:51] *** Quits: bluedust (~bluedust@103.161.144.138) (Ping timeout: 256 seconds)
[16:09:08] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[16:11:26] *** Quits: bluedust_ (~bluedust@103.165.167.221) (Remote host closed the connection)
[16:12:52] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[16:15:13] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:15:26] *** Quits: adip_ (~adip@dia24.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[16:16:34] *** Quits: adip (~adip@dia24.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[16:18:25] *** Quits: ttpp (~tttppp@37.115.45.192) (Quit: Leaving)
[16:22:02] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 250 seconds)
[16:23:05] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[16:30:36] *** Quits: zim (~zim@user/zim) (Ping timeout: 272 seconds)
[16:30:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:34e0:8b74:dd2c:1d62)
[16:42:08] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:45:57] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[16:48:37] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[16:55:35] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:57:25] *** Joins: rvalue (~rvalue@user/rvalue)
[17:08:15] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 240 seconds)
[17:09:29] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[17:09:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[17:11:37] *** Joins: cskr (~cskr@49.207.213.182)
[17:13:36] *** Joins: Midjak (~Midjak@82.66.147.146)
[17:18:05] <misuto> Hello! I recently tested go 1.18beta2 and managed to get a segfault when running. The problem is not present when compiling with 1.16.13 and go 1.17.7. Is this a known problem or something that i should report on the issue tracker?
[17:18:29] *** Quits: sabas3dgh (~textual@85.9.98.2) (Read error: Connection reset by peer)
[17:25:43] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:28:47] *** Joins: bluedust (~bluedust@103.165.167.221)
[17:30:07] <mikoto-chan> misuto: what did u try 1.18 for?
[17:32:24] <misuto> mikoto-chan: Was going to start rewriting some of the functions to a generic version but i didn't get that far. A library that works with the older versions cause segfault when compiling with any of the betas for 1.18
[17:32:56] <misuto> unexpected fault address 0x1178ee0
[17:32:56] <misuto> fatal error: fault
[17:32:56] <misuto> [signal SIGSEGV: segmentation violation code=0x2 addr=0x1178ee0 pc=0x4180c3]
[17:33:43] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:34:01] <mikoto-chan> just report it on github
[17:34:18] <misuto> mikoto-chan: Allright
[17:34:43] <mikoto-chan> https://dpaste.com/8MUT8CUR3
[17:34:57] *** fling is now known as swing
[17:35:01] <mikoto-chan> why is my memoization not working?
[17:35:27] <mikoto-chan> I know I never initialize m[n] but that's because idk where it goes in the code
[17:35:54] <ikke> What is not working?
[17:37:42] <ikke> mikoto-chan: Your map is created inside the function
[17:37:52] <mikoto-chan> ikke: yeah I did something about that
[17:38:23] <mikoto-chan> let me try to save the return value in the main function
[17:39:30] <mikoto-chan> okay, I fixed it, thanks for your help anyway ikke
[17:40:33] *** Joins: arkurious (~arkurious@user/arkurious)
[17:48:26] *** Joins: Guest4 (~textual@85.9.104.121)
[17:49:04] *** Guest4 is now known as sabas3dgh
[17:49:13] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[17:50:03] *** Joins: orthoplex64 (~crm@70.120.0.94)
[17:50:17] <sabas3dgh> anyone here use sblime for go development?
[17:50:40] * sabas3dgh loves how go gets bold evertime. :D
[17:56:12] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[17:58:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[17:59:14] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[17:59:23] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[18:04:07] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[18:13:01] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[18:13:35] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:24:18] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[18:25:47] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:27:27] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[18:30:27] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Client Quit)
[18:31:55] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:32:08] *** Joins: zim (~zim@user/zim)
[18:33:24] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[18:33:31] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Client Quit)
[18:34:56] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:37:40] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:39:59] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[18:42:13] *** Quits: averell (~averell@user/averell) (Remote host closed the connection)
[18:43:25] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[18:47:15] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Remote host closed the connection)
[18:48:06] *** Joins: masoudd (~masoudd@user/masoudd)
[18:48:40] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:50:18] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (Client Quit)
[18:51:46] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[18:53:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[18:56:06] *** Quits: kn1007 (~kn100@wireguard/tunneler/kn100) (Read error: Connection reset by peer)
[18:56:08] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[18:56:41] *** Joins: kn10072 (~kn100@wireguard/tunneler/kn100)
[19:00:45] *** Joins: ovelny (~ovelny@user/ovelny)
[19:02:21] *** Joins: neurocyte0917090 (~neurocyte@IP-045014189135.dynamic.medianet-world.de)
[19:02:21] *** Quits: neurocyte0917090 (~neurocyte@IP-045014189135.dynamic.medianet-world.de) (Changing host)
[19:02:21] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:14:24] *** Quits: iryith (~iryith3@user/iryith) (Read error: Connection reset by peer)
[19:14:50] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[19:14:50] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[19:14:50] *** Joins: iryith (~iryith3@user/iryith)
[19:18:55] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[19:19:22] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:21:53] *** Joins: cync_ (~blah@192.180.187.81.in-addr.arpa)
[19:22:32] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[19:22:37] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 240 seconds)
[19:27:43] *** Joins: neurocyte0917090 (~neurocyte@ip-045014189135.dynamic.medianet-world.de)
[19:27:43] *** Quits: neurocyte0917090 (~neurocyte@ip-045014189135.dynamic.medianet-world.de) (Changing host)
[19:27:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:30:07] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (Quit: You have been kicked for being idle)
[19:31:00] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[19:35:19] *** Joins: henry40408 (~henry4040@175.181.177.116)
[19:36:42] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[19:36:43] *** Joins: mattfoxxx (~mattfoxxx@200116b822bce800e99fd6ce5d2e87dc.dip.versatel-1u1.de)
[19:39:57] *** justGhost is now known as justAstache
[19:42:23] *** Joins: tane (~tane@user/tane)
[20:02:56] *** Quits: andlabs_ (~andlabs@70.107.171.168) (Quit: Textual IRC Client: www.textualapp.com)
[20:03:14] *** Joins: andlabs (~andlabs@70.107.171.168)
[20:07:46] *** Joins: Guest4 (~textual@85.9.104.121)
[20:08:14] *** Quits: sabas3dgh (~textual@85.9.104.121) (Read error: Connection reset by peer)
[20:08:19] *** Quits: markkuit_ (~markkuit@81.56.16.6) (Quit: marqquit)
[20:08:27] *** Guest4 is now known as sabas3dgh
[20:10:59] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:11:02] *** Quits: cskr (~cskr@49.207.213.182) (Quit: Leaving)
[20:11:33] *** Joins: markkuit (~markkuit@81.56.16.6)
[20:12:13] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[20:16:19] *** swing is now known as fling
[20:17:27] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:20:43] *** Joins: llorllale (~llorllale@198.98.119.85)
[20:24:03] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[20:24:29] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[20:30:15] *** Joins: alyx (~alyx@atheme/alyx)
[20:32:24] *** Joins: adip (~adip@user-188-33-226-1.play-internet.pl)
[20:32:45] <alyx> Hi! I have a struct, vaguely along the lines of https://p.aws.vg/cqk9 -- is there any way to abuse json/marshal (or, really, whatever else.. but right now I'd convert the whole thing into JSON w/ json/marshal) so that it would marshal the Tags item into a []string composed of the Tag.Value items from the Tags array?
[20:33:15] *** Joins: adip_ (~adip@user-188-33-226-1.play-internet.pl)
[20:37:15] <fizzie> Not really. I mean, you can have a `type TagList []Tag` and then a `func (tl TagList) MarshalJSON() ([]byte, error) { ... }` that has a loop that builds that []string and marshals it, and then using `Tags TagList` instead of `Tags []Tag` in the struct will cause it to behave like that when marshaling the struct with encoding/json.
[20:39:38] <alyx> Huh that.. could work. Thanks!
[20:40:39] <fizzie> Here's an example: https://go.dev/play/p/-6loGLQa9a5
[20:41:59] *** Joins: Jad (~Nashmi@user/jad)
[20:46:10] *** Quits: sabas3dgh (~textual@85.9.104.121) (Read error: Connection reset by peer)
[20:50:58] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[20:52:57] *** Quits: ejjfunky (~ejjfunky@125.164.19.4) (Ping timeout: 240 seconds)
[20:53:35] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[21:06:58] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from freeÂ­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[21:09:16] *** Quits: ovelny (~ovelny@user/ovelny) (Ping timeout: 272 seconds)
[21:12:24] *** Quits: nightBulb (~nightBulb@59.98.186.198) (Quit: Leaving)
[21:12:25] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[21:12:26] *** Quits: alyx (~alyx@atheme/alyx) (Ping timeout: 272 seconds)
[21:14:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[21:16:57] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Ping timeout: 240 seconds)
[21:26:15] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[21:28:25] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:29:49] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[21:31:38] *** Joins: bluedust (~bluedust@103.165.167.221)
[21:34:53] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[21:35:39] *** Joins: grumb29 (~grumb@rint.osaka)
[21:36:27] *** Quits: bluedust (~bluedust@103.165.167.221) (Ping timeout: 256 seconds)
[21:36:39] *** Joins: Torr (~Torr@user/torr)
[21:40:29] *** Joins: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net)
[21:47:05] *** Joins: Guest4 (~textual@2a01:5ec0:901a:286b:3135:1bcb:7e02:5da4)
[21:48:05] *** Quits: solifugus (~solifugus@2603-7080-7a07-ac2a-935e-7e5b-d405-b6d9.res6.spectrum.com) (Quit: Konversation terminated!)
[21:59:07] *** Joins: alyx (~alyx@173.30.132.213)
[21:59:24] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[22:02:01] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[22:03:19] *** Joins: Atque (~Atque@user/atque)
[22:03:39] *** Quits: alyx (~alyx@173.30.132.213) (Ping timeout: 256 seconds)
[22:03:57] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[22:04:08] *** Joins: fef (~thedawn@user/thedawn)
[22:06:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:09:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:22:55] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[22:24:17] *** Quits: adip (~adip@user-188-33-226-1.play-internet.pl) (Ping timeout: 240 seconds)
[22:24:38] *** Quits: adip_ (~adip@user-188-33-226-1.play-internet.pl) (Ping timeout: 272 seconds)
[22:26:14] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[22:26:18] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[22:28:35] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:34:48] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[22:38:18] *** Joins: avemestr (~avemestr@2a01:4f8:121:228f::2)
[22:43:03] *** Quits: nightrider (~nightride@31.187.110.131) (Quit: nightrider)
[22:45:17] *** Joins: crashrep (~crashrep@user/crashrep)
[22:47:37] *** Joins: jpw (~jpw@user/jpw)
[22:48:01] *** Joins: noarb (~noarb@user/noarb)
[22:52:47] *** Joins: noarb- (~noarb@user/noarb)
[22:53:00] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 240 seconds)
[22:54:59] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (Ping timeout: 256 seconds)
[22:55:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:56:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:58:17] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[23:10:52] *** Quits: kolexar (~kolexar@user/kolexar) (Remote host closed the connection)
[23:10:57] *** Quits: Guest4 (~textual@2a01:5ec0:901a:286b:3135:1bcb:7e02:5da4) (Ping timeout: 240 seconds)
[23:15:27] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 252 seconds)
[23:19:10] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[23:29:06] *** Joins: SanNick (~Thunderbi@24-121-26-78.bhcycmtk01.com.dyn.suddenlink.net)
[23:29:23] *** Joins: crashrep (~crashrep@user/crashrep)
[23:33:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:33:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:35:29] *** Quits: SuperLag (~akulbe@user/superlag) (Read error: Connection reset by peer)
[23:36:11] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[23:37:38] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[23:40:33] *** Quits: beanzilla (beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[23:40:33] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[23:40:53] *** Joins: SuperLag (~akulbe@user/superlag)
[23:41:55] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[23:41:58] *** Joins: notevil (~notevil@user/notevil)
[23:44:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:44:56] *** Joins: greypw254 (~greypw2@grey.pw)
[23:52:15] <vt> Is it ok to copy a sync.Mutex in that case: https://go.dev/play/p/MHeCXEc7Fvi ?
[23:52:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[23:52:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:53:28] <vt> i.e. copying at initialisation only, before use, the old one not referenced further (and so discarded by GC, if it ever escape).
[23:53:35] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[23:53:45] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Remote host closed the connection)
[23:53:52] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:1d79:7c54:c545:7cd5)
[23:53:53] <seebs> i guess? it's pointless but it won't break anything, i guess.
[23:54:11] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[23:54:24] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[23:54:45] <KirkMcDonald> The docs say: "A Mutex must not be copied after first use."
[23:54:51] <vt> seebs: the idea being having a separate function to initialise the structure, just to tidy the code. I could really embed GetItem in the loop, but I want the code to be clearer to read
[23:54:57] <KirkMcDonald> From which I infer that copying a zero value around is fine.
[23:55:15] <seebs> yeah.
[23:56:13] *** Quits: SanNick (~Thunderbi@24-121-26-78.bhcycmtk01.com.dyn.suddenlink.net) (Quit: SanNick)
[23:56:40] <vt> Thank you, I missed the 'after use' part. (so I can use GetItem as a "macro", hoping Golang will inline it in the loop, that is not performance-critical anyway as the number of element is quite small and it's run only one time)
[23:59:59] <b0nn> um, sorry, why would you /copy/ it, and not pass a pointer to it?
