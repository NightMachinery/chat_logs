[00:04:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:07:56] <rpav> probably any c++ codebase of size is full of terrible things
[00:10:11] <cq-work> Stop it, you're scaring him!
[00:10:15] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[00:13:22] *** Joins: Raziel (~Raziel@user/raziel)
[00:15:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:16:01] *** Quits: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[00:16:01] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[00:29:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7429:3422:7c3f:d976) (Ping timeout: 268 seconds)
[00:30:00] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:30:02] <Alipha> rpav: and then you can have "catch" blocks which would register and deregister global error handlers, eg: on_error<Foo> f([](Foo &error) {...});
[00:30:18] <Alipha> Where on_error is an RAII object like scoped_lock
[00:32:21] <rpav> Alipha: yeah, the only unfortunate thing is you need to make them TLS stack-like things .. basically, dynamically-scoped variables, though C++ lacks the concept of such a thing and thus they're sortof slow
[00:33:20] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:34:14] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:28:6123:c7b4:6ca1)
[00:34:14] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:28:6123:c7b4:6ca1) (Changing host)
[00:34:14] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:35:07] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[00:35:22] *** Quits: proller (~p@2a02:6b8:b081:8808::1:9) (Ping timeout: 268 seconds)
[00:42:00] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:b881:9d5b:e0e2:111b)
[00:43:28] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:44:07] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:45:13] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:48:25] *** Quits: Tokamak (~Tokamak@172.58.188.91) (Ping timeout: 256 seconds)
[00:50:07] *** Joins: Tokamak (~Tokamak@172.58.188.45)
[00:54:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 272 seconds)
[00:55:46] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:56:11] *** Quits: paul424 (~tom@ip-5-172-236-148.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:59:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:59:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:01:03] *** Joins: badone (~badone@209.132.189.152)
[01:01:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:01:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:02:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:03:34] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:14:30] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:15:04] <AmR> What bad in this code " if ( interface.type() != QNetworkInterface::Virtual && interface.type() != QNetworkInterface::Unknown && !interface.humanReadableName().contains("VM") ) " I try remove Virtual Network cards But I got them as will, This mean code not work :(, How I can fix it ?
[01:16:11] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:20:26] <Alipha> AmR: what's the type and human readable name of the cards that sneak through?
[01:25:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:25:26] <c4017w__> Is it possible to change the pointer type of a member in a subclass? For example I want my base class to have a `void * something` but in a subclass I want to use it as a `some_struct *` I tried doing `using PTR_TYPE = void*` in the base and `using PTR_TYPE = some_struct*` in the subclass and then defining the member as `PTR_TYPE something` but it doesnt work
[01:25:37] <AmR> Alipha: It's same as name()
[01:26:06] <AmR> And I got Pair("vmnet1","00:50:56:C0:00:01"), QPair("wlp0s29u1u3","6A:8F:90:D2:86:B3"), QPair("vmnet8","00:50:56:C0:00:08"))
[01:26:35] <PJBoy> c4017w__, you can't change anything about a base class in a derived class
[01:27:06] <PJBoy> objects of a derived class literally embed subobjects of the base class
[01:27:16] <Alipha> AmR: looks like you also want `&& !interface.humanReadableName().contains("vm")` then
[01:27:41] *** Joins: RandomReader (~RandomRea@user/randomreader)
[01:28:18] <Alipha> c4017w__: what about not defining something in the base class and only defining it in the subclasses?
[01:29:40] <c4017w__> hmm but I want the base constructor to assign `something`
[01:30:17] <Alipha> c4017w__: when the base class doesn't even know what it's a pointer to?
[01:31:05] <c4017w__> yeah, I just don't like the idea of each subclass having a unique constructor. Would rather the base class have a 'generic' constructor which takes void*
[01:32:01] <c4017w__> or maybe that's just dumb
[01:32:16] <c4017w__> I want to avoid the mistake of mismatched subclass signatures
[01:33:03] *** Quits: jsbach (~jsbach@2a01:c22:b1ed:e700:9ffd:5647:de50:159b) (Ping timeout: 250 seconds)
[01:33:04] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:35:50] <c4017w__> uh. I just redefined something in the subclass as `some_struct *something` and it compiled?
[01:36:54] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:a63b:3668:88ed:562f)
[01:36:54] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:a63b:3668:88ed:562f) (Changing host)
[01:36:54] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:40:04] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:40:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:40:47] *** Joins: proller (~p@2a02:6b8:b081:8002::1:4)
[01:41:27] *** Quits: proller (~p@2a02:6b8:b081:8002::1:4) (Client Quit)
[01:41:45] *** Joins: proller (~p@2a02:6b8:b081:8002::1:4)
[01:42:40] <PJBoy> it is possible to name a member in a derived class the same as a member already declared in a base class
[01:42:44] <Alipha> c4017w__: you created another member with the same name. You can now access either myvar.SubClass::something or myvar.BaseClass::something and they're different variables
[01:42:45] <PJBoy> but they're two distinct members
[01:42:57] <PJBoy> { D d; SHOW(d.x), SHOW(d.B::x); } struct B { int x = 0; }; struct D : B { int x = 1; };
[01:42:58] <geordi> d.x = 1, d.B::x = 0
[01:43:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:20] *** ChanServ sets mode: +v npaperbot
[01:43:31] <c4017w__> wow I had no idea
[01:44:10] <Alipha> c4017w__: you could define `some_struct *get_something() { return static_cast<some_struct*>(something); }` in your subclass
[01:44:29] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:44:38] <c4017w__> yeah I guess
[01:44:41] <Alipha> i'm still not thinking that this is a good direction to go though.
[01:45:29] <c4017w__> You think I should just not have `something` in the base and instead use unique construcotrs for each subclass?
[01:45:30] <Alipha> your base class could be templated on the the type. so, `template<typename T> struct BaseClass { T* something; };` and then you create `BaseClass<some_struct> myvar;`
[01:45:41] <c4017w__> oh true
[01:45:45] <Alipha> c4017w__: yes
[01:46:28] <c4017w__> Ok I think I like the template solution the most
[01:46:47] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bdc4:aa3c:e7e5:fc71) (Ping timeout: 252 seconds)
[01:47:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c113:da95:a89b:a1d9)
[01:48:43] <Alipha> c4017w__: are you doing polymorphism? (do you have virtual functions?)
[01:48:53] <c4017w__> yes
[01:50:15] <Alipha> c4017w__: note that BaseClass<some_struct> and BaseClass<foo> are different types, and generally you want a common base
[01:50:44] <Alipha> of course, you could give your BaseClass template its own base
[01:50:57] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:51:11] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:53:26] <c4017w__> Hmm, I see
[01:56:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:00:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:02:49] *** Quits: Guest3867 (~Guest@host129.190-139-78.telecom.net.ar) (Remote host closed the connection)
[02:05:18] *** Quits: Leone (~Leo@216.154.12.122) (Read error: Connection reset by peer)
[02:06:25] *** Joins: markong (~kvirc@213.146.188.203)
[02:07:56] *** Joins: benthumb2000 (~paul@2400:4052:10a1:f200:9e17:dd43:3aaf:590b)
[02:16:32] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[02:18:43] *** Joins: flynn8 (~mcbloch@user/flynn)
[02:18:45] *** Joins: dextaa7 (~DV@user/dextaa)
[02:19:05] *** Quits: kurfen_ (~kurfen@213.152.188.7) (Ping timeout: 256 seconds)
[02:19:16] *** Joins: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[02:19:34] *** Joins: kurfen (~kurfen@213.152.188.7)
[02:20:05] *** Joins: Maximus (~sevalecan@user/sevalecan)
[02:20:13] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 256 seconds)
[02:20:30] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[02:20:45] *** Joins: kevr (~kevr@user/kevr)
[02:20:47] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[02:20:47] *** dextaa7 is now known as dextaa
[02:20:47] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[02:20:47] *** Maximus is now known as Sevalecan
[02:20:51] *** flynn8 is now known as flynn
[02:20:56] *** Joins: Praise- (~Fat@user/praise)
[02:21:43] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[02:22:56] *** Joins: Soliton (soliton@wesnoth/developer/soliton)
[02:22:57] *** Joins: whup_dup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:23:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:23:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:23:36] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[02:23:54] *** Joins: kevr (~kevr@user/kevr)
[02:26:02] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 272 seconds)
[02:26:05] *** whup_dup is now known as whupdup
[02:27:23] *** Joins: bobb_ (~bobb_@dslb-088-066-147-140.088.066.pools.vodafone-ip.de)
[02:33:05] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:34:09] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[02:34:20] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[02:35:42] *** Quits: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[02:35:53] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[02:35:59] <OnlineCop> Within a function, `printf "%s='%s'\n" "$MY_VAR" "${!MY_VAR}"` appears to work fine, but when I use this on the command line or in a script, it complains about a bad substitution (I think with the '!'). How do I need to rewrite this?
[02:37:19] <OnlineCop> Derp. Wrong channel, sorry.
[02:37:50] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[02:38:11] <OnlineCop> You change the theme of your IRC client one time, and totally mess up which channel you're sitting in. </apologize>
[02:40:50] <cq-work> Why does clang compile with this: https://godbolt.org/z/Y356M3qvo but not with https://godbolt.org/z/ccWscMsvx
[02:42:40] <cq-work> And why does GCC not care?
[02:44:41] <c4017w_> k this has been bugging me for months. Two different ways to implement a hardware abstraction layer, and I'm not sure which one is better. Any reason to use one over the other? https://wandbox.org/permlink/5imQtsqGmGFLEMcn
[02:46:15] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:47:12] <cq-work> Looks like subclasses is just CRTP with extra steps
[02:47:24] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:48:05] <c4017w_> agree. So then the question is CRTP vs multiple base classes?
[02:48:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:48:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[02:49:04] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[02:49:08] <CarloWood> Is it me or did github somewhere along the line remove the 'commits' overview? I can only find a link to the last commit :/.
[02:49:33] <CarloWood> Does anyone know where I can find just a whole list of all commits?
[02:49:34] *** Joins: k8yun (~k8yun@user/k8yun)
[02:49:58] <CarloWood> Argh nm - I found it
[02:51:06] <PJBoy> it always takes me a while to find the link to the commit history in github
[02:53:55] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[02:56:01] <hnOsmium0001[m]> I think you just click on the "X commits" text in the same row as the last commit
[02:56:18] <CarloWood> yes that was it.
[02:56:38] <hnOsmium0001[m]> not very intuitive, but the again it's not like the UI was that good either
[02:56:43] <CarloWood> Just now I only found it because I accidently hovered it and it changed color :)
[02:57:15] <hnOsmium0001[m]> I personally don't have a problem with the new UI, solely due to them getting rid of the annoying More... in the tab bar
[03:00:22] *** Joins: ferdna (~ferdna@user/ferdna)
[03:01:48] *** Quits: benthumb2000 (~paul@2400:4052:10a1:f200:9e17:dd43:3aaf:590b) (Quit: WeeChat 3.3)
[03:02:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:04:17] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[03:04:36] *** Joins: cursey (~cursey@user/cursey)
[03:05:53] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:b881:9d5b:e0e2:111b) (Quit: Client closed)
[03:06:49] *** Quits: bobb_ (~bobb_@dslb-088-066-147-140.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[03:11:32] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:14:48] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[03:19:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:19:11] *** Joins: Terminus (~null@user/terminus)
[03:23:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:26:18] *** Joins: ferdna (~ferdna@user/ferdna)
[03:26:23] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:27:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:32:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[03:32:27] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:32:54] *** Joins: ravan (~ravan@user/ravan)
[03:34:18] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:35:15] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[03:37:25] *** Quits: AmR (~AmREiSa@156.199.192.24) (Ping timeout: 250 seconds)
[03:37:40] *** Quits: adeliktas (~adeliktas@i59F5FA10.versanet.de) (Quit: Ping timeout (120 seconds))
[03:39:31] *** Joins: Guest8452 (~Guest@host129.190-139-78.telecom.net.ar)
[03:40:03] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:40:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:41:11] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:42:02] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:42:24] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:49:12] *** Quits: Friithian (gunqqer@friithian.dev) (Quit: Lost terminal)
[03:50:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:56:18] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:57:18] *** Joins: Friithian (gunqqer@friithian.dev)
[03:58:00] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c113:da95:a89b:a1d9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:58:49] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[03:59:53] *** Quits: proller (~p@2a02:6b8:b081:8002::1:4) (Ping timeout: 252 seconds)
[04:04:21] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:05:20] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[04:10:05] *** Joins: xiongxin (~Thunderbi@117.136.39.218)
[04:10:49] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:11:55] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:16] *** Joins: adeliktas (~adeliktas@i59F5F955.versanet.de)
[04:24:13] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:25:17] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:27:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[04:29:45] <c4017w_> How do I get this to throw an error instead of segfaulting? https://wandbox.org/permlink/uxDZCWcHtGpLd0PI
[04:29:53] <c4017w_> compilation error
[04:31:26] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[04:36:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[04:37:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:37:22] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[04:38:08] *** Joins: x_kuru (~xkuru@user/xkuru)
[04:39:10] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:39:57] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[04:43:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:46:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:49:05] <kalven> https://wandbox.org/permlink/SS7sQ1CykmIUlxnn
[04:49:07] <kalven> kek
[04:52:27] <c4017w_> but the whole idea is to remove virtual
[04:54:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Quit: Leaving)
[05:02:04] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[05:02:27] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:03:48] *** Quits: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de) ()
[05:12:37] *** Quits: tobs (~tobs@taboege.de) (Ping timeout: 240 seconds)
[05:12:46] *** Joins: tobs (~tobs@taboege.de)
[05:13:53] *** Quits: xiongxin (~Thunderbi@117.136.39.218) (Ping timeout: 256 seconds)
[05:18:56] *** Quits: Guest8452 (~Guest@host129.190-139-78.telecom.net.ar) (Remote host closed the connection)
[05:22:23] <Alipha> c4017w_: https://wandbox.org/permlink/q0KW4Wzyi99OByST
[05:25:00] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:25:25] <Alipha> Inverting the condition is probably better: https://wandbox.org/permlink/vSRxuEbITvF44UQC
[05:28:15] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:28:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:28:48] *** Joins: xiongxin (~Thunderbi@117.136.39.218)
[05:31:07] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[05:31:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:43:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:20] *** ChanServ sets mode: +v npaperbot
[05:50:16] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:00:18] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[06:00:46] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[06:08:32] *** Joins: callq (~callq@157.41.71.70)
[06:17:01] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:19:20] *** Joins: Inline__ (~Inline@p200300cd470a8800e4003c5147c7d559.dip0.t-ipconnect.de)
[06:21:54] *** Quits: Inline (~Inline@p200300cd470d31009f2917ead5869a68.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:23:59] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[06:25:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:26:55] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[06:28:01] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[06:28:38] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:28:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[06:32:54] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[06:35:36] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[06:37:50] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:41:43] *** Quits: letto2 (~letto@86.122.65.239) (Ping timeout: 256 seconds)
[06:42:42] *** Joins: adeliktas0 (~adeliktas@i59F4D9E7.versanet.de)
[06:44:33] *** Quits: adeliktas (~adeliktas@i59F5F955.versanet.de) (Ping timeout: 256 seconds)
[06:44:33] *** adeliktas0 is now known as adeliktas
[06:45:03] *** Quits: xiongxin (~Thunderbi@117.136.39.218) (Quit: xiongxin)
[06:46:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:07:23] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:32] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:20:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:24:56] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[07:25:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:27:48] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[07:28:53] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 252 seconds)
[07:30:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:32:53] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[07:34:17] *** Joins: Inline (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de)
[07:36:00] *** Quits: Inline__ (~Inline@p200300cd470a8800e4003c5147c7d559.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:37:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:51:50] *** Joins: k8yun (~k8yun@user/k8yun)
[07:52:14] *** Joins: Soni (~quassel@autistic.space)
[07:52:22] <Soni> how do you get boost to work? https://bpa.st/GUPQ
[08:21:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:26:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:29:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[08:35:11] *** Joins: dasrael (~rabbit@ec2-35-182-81-107.ca-central-1.compute.amazonaws.com)
[08:38:17] *** Quits: dasrael (~rabbit@ec2-35-182-81-107.ca-central-1.compute.amazonaws.com) (Changing host)
[08:38:17] *** Joins: dasrael (~rabbit@user/dasrael)
[08:41:57] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:55:13] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:13:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:27:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:30:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:31:26] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 260 seconds)
[09:41:08] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 272 seconds)
[09:43:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:21] *** ChanServ sets mode: +v npaperbot
[10:02:01] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[10:04:37] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:07:07] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[10:07:10] *** Joins: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[10:12:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:13:31] *** Joins: jackblasted (~quassel@173.239.197.100)
[10:14:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[10:15:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:24:08] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:25:56] *** Joins: jsbach (~jsbach@2a01:c22:b149:ff00:8bcb:cec6:c4f4:d654)
[10:27:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:31:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:31:11] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:37:53] *** Joins: p-i- (~Ohmu@183.89.25.222)
[10:38:36] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:45:06] *** Quits: jackblasted (~quassel@173.239.197.100) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:56:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:cc2b:fb51:4740:6209)
[11:02:23] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[11:02:30] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[11:13:39] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:17:32] *** Joins: gentooclimax (~gentoocli@2a02-8440-3141-d377-3f58-eeba-d6e3-256c.rev.sfr.net)
[11:20:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[11:20:32] *** Joins: bobb_ (~bobb_@dslb-088-066-136-075.088.066.pools.vodafone-ip.de)
[11:25:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:28:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:30:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:31:20] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 272 seconds)
[11:32:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[11:32:18] *** Quits: jsbach (~jsbach@2a01:c22:b149:ff00:8bcb:cec6:c4f4:d654) (Ping timeout: 260 seconds)
[11:35:04] *** Joins: paul424 (~tom@ip-5-172-232-47.multi.internet.cyfrowypolsat.pl)
[11:36:21] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:69dd:6e2b:de9f:e831)
[11:48:54] *** Joins: johnny (~johnny@user/johnny)
[11:49:09] *** Joins: ivii (~ivan@user/ivii)
[11:49:14] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[11:52:15] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 256 seconds)
[11:54:31] *** Joins: |7| (~seachdamh@user/seachdamh)
[11:56:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[12:00:51] *** Joins: proller (~p@80.240.216.69)
[12:01:17] *** Quits: Tokamak (~Tokamak@172.58.188.45) (Ping timeout: 240 seconds)
[12:03:33] *** Joins: Tokamak (~Tokamak@172.58.188.62)
[12:07:33] *** Joins: andreasbuhr (~quassel@p549db106.dip0.t-ipconnect.de)
[12:08:51] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 252 seconds)
[12:11:52] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:12:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[12:12:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:13:07] *** gentooclimax is now known as climax
[12:14:36] *** climax is now known as gentooclimax
[12:17:04] *** Joins: Raziel (~Raziel@user/raziel)
[12:18:17] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:18:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[12:19:20] *** Joins: proller (~p@2a02:6b8:b081:b40a::1:34)
[12:22:29] *** Quits: DrMax (~DrMax@node-1w7jra94757g2cotmdc1n4k8b.ipv6.telus.net) (Read error: Connection reset by peer)
[12:23:27] *** Joins: DrMax (~DrMax@node-1w7jra94757fzx6dr52v5tek2.ipv6.telus.net)
[12:28:04] *** Quits: Tokamak (~Tokamak@172.58.188.62) (Ping timeout: 250 seconds)
[12:28:46] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:30:08] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: You have been kicked for being idle)
[12:30:53] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[12:32:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[12:33:54] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[12:34:32] *** Joins: robod34 (Username@79.113.243.73)
[12:43:17] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:59:27] *** gentooclimax is now known as climax
[13:00:31] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[13:04:41] *** climax is now known as gentooclimax
[13:11:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:11:37] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[13:14:12] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[13:20:02] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:22:04] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[13:23:52] *** Joins: teepee (~teepee@openscad/teepee)
[13:25:15] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:26:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:29:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:30:22] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:33:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[13:35:30] *** Joins: angelacrust (~angelacru@182.64.88.197)
[13:35:52] *** Joins: pulse (~pulse@user/pulse)
[13:38:42] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[13:41:12] *** Joins: Furai (~Furai@furai.pl)
[13:43:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:22] *** ChanServ sets mode: +v npaperbot
[13:44:26] *** Quits: callq (~callq@157.41.71.70) (Quit: callq)
[13:46:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:46:54] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[13:49:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:03:46] *** Joins: gargus (~user@27-32-195-30.static.tpgi.com.au)
[14:07:35] *** Quits: gentooclimax (~gentoocli@2a02-8440-3141-d377-3f58-eeba-d6e3-256c.rev.sfr.net) (Quit: Konversation terminated!)
[14:09:27] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (Ping timeout: 250 seconds)
[14:09:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:13:12] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:29:23] *** Joins: Burgundy (~NA@86.121.143.206)
[14:29:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:33:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[14:59:28] <lmat> https://sqlite.org/threadsafe.html  It looks like "Single-thread" and "Multi-thread" are the same.
[14:59:42] <lmat> Both state: "Don't use sqlite
[14:59:49] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:59:57] <lmat> oh, nevermind...one says don't use sqlite in more than one thread, the other says don't use a particular sqlite connection in more than one thread.
[15:00:07] <lmat> I got them mixed up because I only have one connection; silly me.
[15:01:09] *** Joins: markong (~kvirc@213.146.188.203)
[15:03:31] <LordKalma> other option is "don't use sqlite" no condition :p
[15:03:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[15:03:44] <Shell> sqlite is lovely
[15:03:50] <LordKalma> I'm just messing
[15:03:57] <LordKalma> it's the best csv file
[15:03:59] * LordKalma runs
[15:04:02] <Shell> true
[15:05:46] *** Quits: paul424 (~tom@ip-5-172-232-47.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:08:54] <ville> it's just that everytime you use it for something that doesn't strictly need a relational database you end up writing quite a lot of marshaling code that you start to wonder if a custom fileformat and writing parser for it would have been less effort
[15:10:14] *** Quits: bobb_ (~bobb_@dslb-088-066-136-075.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[15:13:23] <lmat> ville: xD  I don't know about the others, but it sounds like you've been there :-D
[15:13:55] *** Joins: jokoon (~eio@2a01:e0a:542:e160:3d3b:806d:bac4:e875)
[15:14:23] <ville> sure plenty of times
[15:14:54] *** Quits: proller (~p@2a02:6b8:b081:b40a::1:34) (Ping timeout: 250 seconds)
[15:17:14] <ville> sqlite3 is still great, it just means using sqlite3 hasn't possibly been the right decission
[15:20:13] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:29:32] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:30:40] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:31:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[15:31:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:33:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:53:48] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:58:11] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:58:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:59:24] *** Quits: angelacrust (~angelacru@182.64.88.197) (Quit: Client closed)
[16:01:25] *** Joins: Leone (~Leo@216.154.12.122)
[16:23:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[16:25:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:25:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:26:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:26:53] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:26:54] *** test_ is now known as _flood
[16:29:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:30:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:33:11] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a)
[16:34:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[16:36:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86) (Ping timeout: 268 seconds)
[16:38:14] *** Joins: proller (~p@2a02:6b8:0:40c:5cdd:f4d3:b034:b8cb)
[16:44:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[16:47:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8)
[16:50:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:53:50] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[16:54:28] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:58:12] <cq-work> Has there ever been major differences between the latest draft and the active standard?
[17:00:39] <ville> sure
[17:00:52] <cq-work> Can I get an example?
[17:01:13] <cq-work> Or where could I find an example.
[17:01:27] <ville> the draft is a living document. features get included one-by-one
[17:02:54] <cq-work> Okay, I'm referring to a particular iteration of it then. For example, the final working draft of N4140 vs the one that you buy from ANSI
[17:02:55] <ville> you probably meant to ask something different though
[17:03:34] <ville> you wanted to ask if there has been a differences between the final standard and the draft it was based on
[17:03:59] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[17:04:27] <cq-work> Sure.
[17:04:47] <ville> those should be limited to things like typos and whatnot. nothing bigger than that comes to mind right away anyways
[17:05:00] <Haohmaru> !fact
[17:05:01] <nolyc> Haohmaru: A template instance is never a usual deallocation function, regardless of its signature.
[17:05:50] <ville> features are known maybe ~1 year ahead of the the time iso puts out the standard
[17:06:27] <Haohmaru> implementing them in the compiler/lib takes time
[17:08:16] *** Joins: pulse (~pulse@user/pulse)
[17:08:50] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:09:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:12:01] <rpav> wow, you can't write out-of-line function definitions for friend functions which take private structs
[17:16:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:54dd:1262:7c05:5499)
[17:16:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:54dd:1262:7c05:5499) (Changing host)
[17:16:06] *** Joins: skapata (~Skapata@user/skapata)
[17:18:09] *** Quits: gargus (~user@27-32-195-30.static.tpgi.com.au) (Quit: Leaving)
[17:25:34] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[17:26:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:27:28] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[17:27:52] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:29:26] <PJBoy> { f(C(), {}); } class C { struct S {}; friend void f(C&&, S); }; void f(C&&, C::S) { BARK; }
[17:29:27] <geordi> f(C&&, C::S)
[17:31:01] <PJBoy> I was actually surprised you could call f there
[17:31:14] <PJBoy> given that you can't name C::S outside the class
[17:31:39] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:35:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:37:31] *** Joins: bobb_ (~bobb_@dslb-088-066-136-075.088.066.pools.vodafone-ip.de)
[17:38:01] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:42:48] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[17:43:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:23] *** ChanServ sets mode: +v npaperbot
[17:43:32] *** Joins: p-i- (~Ohmu@183.89.25.222)
[17:48:35] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[17:48:40] <rpav> 🤔
[17:49:32] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:50:53] <rpav> ooh.
[17:51:00] <rpav> not the same thing duh hah
[17:51:49] <rpav> {} class C { struct S { friend void f(const S&); }; }; void f(const S&) {}
[17:51:50] <geordi> error: 'S' does not name a type
[17:51:52] <rpav> err
[17:51:57] <rpav> {} class C { struct S { friend void f(const S&); }; }; void f(const C::S&) {}
[17:51:57] <geordi> error: 'struct C::S' is private within this context
[17:54:56] <PJBoy> hrm
[17:55:09] <PJBoy> so it has to be a friend function in a private nested class
[17:55:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:55:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:56:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:56:23] <rpav> i feel like there's something with ADL or something here such that the f() definition given is actually not the friend function declared
[17:56:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:56:58] <rpav> because clearly in your example you _can_ specify a private-type parameter, if it's a declared friend (presumably not, if not)
[17:57:08] <whupdup> I'm running into a pretty weird issue right now, I have a std::vector<std::function<void()>> that I populate with lambdas, single threaded, and I'm encountering this weird case where one instance of populating these lambdas results in their captured data to be null. Kinda hard to give example code for cuz I don't really know how to isolate it. Anyone have any ideas of what could be doing it?
[17:57:56] <rpav> whupdup: test case
[17:58:22] <whupdup> ?
[17:58:51] <rpav> whupdup: post a link to a minimal example reproducing your problem on godbolt or something that compiles/runs code
[17:59:08] <PJBoy> I know that nested classes have limitations, so it probably ties into that somehow
[17:59:08] <rpav> this is the sortof thing where the problem is in some specific thing you're doing, not a generality
[17:59:19] <rpav> PJBoy: very annoying limitations ;(
[17:59:33] <PJBoy> yeah I don't understand them at all
[17:59:41] <rpav> like try defining a template-C-template-D function out of line
[17:59:45] <PJBoy> probably they're half baked
[17:59:49] <rpav> probably
[17:59:58] <rpav> this is why i've taken to mostly not nesting classes at all i think
[18:00:12] <PJBoy> mostly same
[18:00:24] <PJBoy> I keep iterator classes as nested where possible
[18:01:41] <rpav> there was a case i had like `<T> struct A { <S> struct B { .. X f(); }; };` where f had a circular dependency with something and you literally could not write the code for it
[18:01:57] <rpav> pretty sure i moved that out to make it work
[18:02:38] <rpav> defining templated-templated functions at all externally is a huge pain
[18:07:14] <PJBoy> it's not so bad doing the template-C-template-D function out of line
[18:10:18] <PJBoy> https://coliru.stacked-crooked.com/a/43a4eb6571427652 for example
[18:10:34] <whupdup> Here is some example code https://godbolt.org/z/z5Y4v1oWK while I try to figure out what is even relevant to copy about my code. There's a big issue that I can't simulate multiple files and I think that's part of it. The only difference I can spot in code that works and code that doesn't is that the code that doesn't is in a different source file
[18:11:02] <whupdup> The only thing I can conceive of causing this is using template functions to generate a std::function<void()> across multiple files into the same vector
[18:11:09] <whupdup> but that also shouldn't be a problem right?
[18:11:12] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[18:16:24] <whupdup> I've looked through it in gdb, nothing is null or runs out of lifetime except the captured data in the lambda itself, so it's not like the Context is deleted prematurely or something
[18:17:33] <rpav> this is part of the point of reproducing your case .. find what the differences actually are, if the code otherwise works
[18:17:47] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:17:57] <PJBoy> you can simulate multiple files with wandbox
[18:18:03] <rpav> it's hard to say without seeing exactly how/where things are declared
[18:18:15] <rpav> you can on godbolt too but it's a bit of a pita
[18:18:38] <rpav> https://godbolt.org/z/rKnzWbq5s <- simple setup for multi-file project
[18:19:41] <PJBoy> huh, that's not how I remember the setup looking
[18:20:13] <rpav> i made/customized something
[18:20:19] <PJBoy> where's the codegen?
[18:21:37] <rpav> i'm not sure how it does codegen for multi-file, probably you should disassemble the output rather than per-file or something dunno
[18:22:55] <rpav> apparently don't filter library functions and you get some asm
[18:23:20] <PJBoy> ah indeed
[18:23:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:24:20] <rpav> probaby the IDE mode is still a bit beta
[18:25:15] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:25:21] *** Quits: proller (~p@2a02:6b8:0:40c:5cdd:f4d3:b034:b8cb) (Ping timeout: 245 seconds)
[18:26:43] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:26:47] <PJBoy> I can't find the multifile godbolt I set up before :(
[18:28:40] <PJBoy> or I can
[18:28:41] <PJBoy> https://godbolt.org/z/9hdG7rhYv
[18:29:07] <PJBoy> and I do filter library functions there
[18:31:07] <PJBoy> anyways the whole system is trash
[18:31:14] <PJBoy> viva la wandbox
[18:31:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:32:04] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:32:49] <rpav> well if you don't care about asm at all, not really an issue with godbolt ;)
[18:33:17] <rpav> wandbox is mostly easier to set up, but doesn't seem to offer much advantage beyond that
[18:33:36] <PJBoy> that's a huge advantage
[18:33:41] <PJBoy> also it's much cleaner
[18:33:48] <PJBoy> and if you don't need ASM, less cluttered
[18:34:15] <rpav> well you can rearrange how godbolt looks .. i'm not sure i'd consider wandbox cleaner although the slight redesign makes it less clunk than it was
[18:34:39] <PJBoy> no godbolt arrangement is good
[18:34:59] <PJBoy> and I think the reason for that is that you can never scroll down the page
[18:35:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[18:35:44] <PJBoy> wandbox has gotten worse, so the layout advantages aren't as prevalent as before
[18:36:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:36:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[18:36:25] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:36:39] <PJBoy> also the wandbox text editor is much better
[18:36:54] <PJBoy> godbolt does stupid shit when I type a bracket, and its copy+paste is weird
[18:37:29] *** Joins: AmR (~AmREiSa@197.42.112.70)
[18:37:38] <rpav> i avoid working in either one really .. i have a local "scratch project" setup with multiple things i work in then transfer
[18:38:31] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:39:17] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[18:41:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:42:02] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[18:44:17] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:45:44] *** Joins: jsbach (~jsbach@2a01:c22:b149:ff00:8bcb:cec6:c4f4:d654)
[18:45:53] <Alipha> whupdup: line 55 is accessing this->context, which *this has been destroyed, so accessing context is invalid
[18:46:26] <whupdup> https://godbolt.org/z/h1rfPhjxd
[18:46:31] <whupdup> seem to have gotten it to replicate
[18:46:57] <whupdup> Alipha but I am using a lambda that captures by value, I thought it would've captured the `Context* context` alone by value
[18:47:54] *** Joins: proller (~p@2a02:6b8:0:40c:d670:d4d4:112e:82b6)
[18:49:54] <Alipha> whupdup: `context` is just shorthand for `this->context`. So, `this` (the pointer) is copied by value, not context
[18:50:34] <whupdup> if I put a Context* localContext = context; and capture that by value, will it last as intended?
[18:50:49] <Alipha> whupdup: yes
[18:54:47] <whupdup> Okay perfect that seems to have fixed everything. The lesson learned for the day is that [=] capture does not capture members piecemeal, and always implicitly captures `this`
[18:59:03] <Alipha> whupdup: I advise to always explicitly specify each capture
[18:59:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:59:25] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:02:44] <Alipha> whupdup: note that `value` is also `this->value`
[19:02:56] <Alipha> context->get_current_frame().deletionQueue.push_back([context=this->context, value=this->value] {
[19:03:27] <whupdup> oh cool didn't know you could specify it in the capture itself
[19:03:46] <Alipha> since c++17, i believe
[19:18:16] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 245 seconds)
[19:30:59] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:69dd:6e2b:de9f:e831) (Quit: Konversation terminated!)
[19:32:40] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:36:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:40:07] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:40:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:41:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:41:22] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:42:57] *** Joins: kaph (~kaph@rm-19-62-210.service.infuturo.it)
[19:48:49] *** Quits: jokoon (~eio@2a01:e0a:542:e160:3d3b:806d:bac4:e875) (Quit: Leaving)
[19:55:08] *** udet_ is now known as udet
[19:56:21] <udet> hi all, short question. if I compile something linking a shared library it does not use, in opposite to gcc default cmake setting clang is not optimizing dependency away. is there a linkerflag for clang to acheive this behaviour?
[20:06:59] *** Quits: andreasbuhr (~quassel@p549db106.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:08:47] <OnlineCop> I had trouble understanding the question. Were you saying that gcc's linker defaults to stripping out the unused library, and you want to know whether there was a flag for clang to also strip out the library if it is unused?
[20:09:23] <TinoDidriksen> GCC does that? Not in my experience. There's even linter checks that complain that unused shared libraries are linked, built using various versions of GCC.
[20:10:23] <LordKalma> how can a linter check that?
[20:10:45] <TinoDidriksen> Debian's lintian checks both sources and binaries.
[20:11:15] <LordKalma> oh cool
[20:22:49] *** Joins: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[20:22:53] <veverak> hi folks
[20:23:11] <veverak> I am writing simple testing framework (not general purpose, but for niche thing)
[20:23:23] <veverak> what would be favourable machine output?
[20:23:42] <veverak> my guess is that JUnit XML is the most used thing, which makes it prime goal, but I am not sure about that
[20:24:12] <LordKalma> depends on what you want
[20:24:39] <veverak> compability with CI tools that may want to process that data
[20:25:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:26:54] <lmat> I'm doing   if object.property < the_value { ...  object.property is a Rc (I think Rc<RefCell<u64>>?) and the_value is a u64. The error I get is: "expected struct `Rc`, found `u64`"  mismatched types. I tried   if *object.property < the_value {...   then I get "error[E0308]: mismatched types...expected struct `RefCell`, found `u64`"
[20:29:32] <lmat> How do I fix it? Any hints would be appreciated like: How do I get a good idea of the type of object.property?
[20:30:20] <lmat> I'm thinking object.property is actually     Rc<RefCell<&'a mut u64>>
[20:30:37] *** Quits: kaph (~kaph@rm-19-62-210.service.infuturo.it) (Ping timeout: 240 seconds)
[20:30:44] <rpav> wrong channel?
[20:31:04] *** Quits: Emet-Selch (~haise01@user/haise01) (Read error: Connection reset by peer)
[20:31:16] <lmat> oh wow. Thank you, rpav
[20:31:25] <lmat> and my apologies!
[20:32:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:36:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:36:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:39:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[20:39:24] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[20:39:43] *** Joins: cursey (~cursey@user/cursey)
[20:41:33] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:42:36] *** Joins: ravan (~ravan@42.201.198.151)
[20:42:36] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[20:42:36] *** Joins: ravan (~ravan@user/ravan)
[20:46:18] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:47:42] *** Joins: paul424 (~tom@ip-5-172-234-113.multi.internet.cyfrowypolsat.pl)
[20:53:56] *** Joins: kaph (~kaph@151.47.2.1)
[20:57:31] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:48] *** Quits: kaph (~kaph@151.47.2.1) (Ping timeout: 272 seconds)
[21:02:24] <Alipha> it's rust propaganda!
[21:03:12] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:03:37] <vdamewood> Rust is propoganda.
[21:03:50] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:07:25] *** Quits: kurfen (~kurfen@213.152.188.7) (Quit: ZNC 1.8.2 - https://znc.in)
[21:08:46] *** Joins: kurfen (~kurfen@213.152.188.7)
[21:17:04] <xkoncek> see? c++ is just like rust
[21:17:09] <Friithian> !rust
[21:17:11] <nolyc> Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[21:17:52] <pulse> c++ is like rust except more fun
[21:18:20] <Friithian> as long as you say ``more fun'' and not ``fun'' yes
[21:18:21] *** Quits: bobb_ (~bobb_@dslb-088-066-136-075.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:29:52] *** Quits: kevr (~kevr@user/kevr) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:30:11] *** Joins: kevr (~kevr@user/kevr)
[21:30:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:30:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:30:32] <LordKalma> honestly, thjat message was so in the level of template errors that it's everything but rust propaganda
[21:33:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:34:33] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[21:35:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:35:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:37:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:38:04] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[21:43:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:23] *** ChanServ sets mode: +v npaperbot
[21:45:33] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[21:46:47] *** Joins: oscurochu (~oscurochu@2603:9000:c202:1034:b91b:aea:2691:8fb6)
[21:46:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:46:55] <oscurochu> im trying to make sense of this lecture https://www.youtube.com/watch?v=GIXxByw6jYo&list=PL6KMWPQP_DM97Hh0PYNgJord-sANFTI3i&index=17
[21:47:10] <oscurochu> im not even sure which chapter or section  from the text that applies to this lecture
[21:47:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:47:35] <oscurochu> i've watched all the lectures before this one, and i've watched a few lectures after this one.. but this one, i just feel kind of lost
[21:51:05] *** Joins: k8yun (~k8yun@user/k8yun)
[21:51:36] <oscurochu> like, whats first+() mean? and first+(Bi)nfirst+(Bj) mean?
[21:52:15] <CarloWood> It's not C++ for sure.
[21:52:33] <CarloWood> Are you even talking on the right channel?
[21:55:29] <rpav> typecast + parenthesized value
[21:56:06] <Friithian> ooh, that makes sense. That's unreadable
[21:57:11] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[21:57:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:58:02] <rpav> { cout << a+(b)am+(c)ats; } using b=int; using c=int; int a, am, ats;
[21:58:03] <geordi> 0
[21:58:30] <Shell> cursed
[21:58:36] <kalven> blursed
[21:58:45] <Friithian> no, it's just cursed
[21:58:56] <Friithian> there is nothing even remotely blessed
[21:58:57] <rpav> seems pretty ame
[21:59:00] <rpav> +t
[21:59:06] <rpav> or maybe +l
[21:59:09] <CarloWood> It looks like rust
[21:59:13] <PJBoy> unrelated to the video though
[21:59:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:59:39] <PJBoy> in the video First^+(S) is some set of tokens
[21:59:56] <Shell> anyway, this is definitely not C++ related
[21:59:58] <rpav> oh you can do that too
[22:00:10] <CarloWood> The video is part III about LL(1) parsers.  Regular expression maybe.
[22:00:27] <rpav> x^y where y is unary-+ v
[22:00:38] <oscurochu> its c++ related in the sense that i can apply this logic to any language that you can write a compiler in
[22:00:49] <rpav> there's unary + right, i rarely touch those
[22:00:53] <Soni> how do you get boost to work? https://bpa.st/GUPQ
[22:01:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:02:19] <CarloWood> It just works out of the box.
[22:02:42] <rpav> Soni: did you use the right button? https://live.staticflickr.com/3702/33676994416_e39ee7007c_b.jpg
[22:03:19] *** Joins: magla (~gelignite@55d4a4ec.access.ecotel.net)
[22:03:21] <kalven> Soni: if you're building you're going to have to make sure it all gets built with emscripten. Not using a system installed version of boost.
[22:03:24] <Soni> how do you get boost to produce useful error messages that don't make the user feel completely incompetent with no idea what they could even do next?
[22:03:35] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[22:03:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:04:21] <LordKalma> HAHAHAHAHAHA
[22:04:21] <rpav> oh b2 is _boost_ .. i thought it was that weird thing used by that one graphics library
[22:04:35] <PJBoy> woah there LordKalma
[22:04:51] <LordKalma> what? someone wanted good error messages... on c++?
[22:04:55] <LordKalma> hilarious stuff
[22:04:56] <Soni> why's boost the only incompetent build system
[22:05:04] <rpav> because no one uses it
[22:05:08] <LordKalma> boost's b2 is shit, yeah
[22:05:12] <PJBoy> boost::build_system
[22:05:18] <Friithian> boost has a build system?
[22:05:28] <LordKalma> to build boost itself, yeah
[22:05:32] <Friithian> huh
[22:05:53] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:06:05] <rpav> wow why can i not remember the name of that library
[22:06:12] <LordKalma> I once build boost from source on windows
[22:06:18] <LordKalma> basically they have some scripts to bootstrap b2
[22:06:22] <LordKalma> and then build boost with said b2
[22:06:43] <rpav> bgfx! although i only see a makefile now
[22:07:06] <Soni> well, time to try and patch libtorrent's cmake scripts for use with emscripten...
[22:07:32] <Soni> uh does emscripten even support C++17...
[22:07:54] <LordKalma> emscripten wraps around llvm iirc
[22:08:19] <Soni> apparently it should, but we're getting all these errors...
[22:08:58] <Soni> we guess we should try clearing cache?
[22:09:08] <LordKalma> did you request the right c++ version from your build system?
[22:09:15] <Soni> yes
[22:09:26] <Soni> also how do you make cmake not override -Oz with -O3
[22:09:41] <kalven> emscripten tracks clang/llvm fairly closely
[22:10:00] <ashafq> I am reading this slides and had a question from slide #68 https://github.com/CppCon/CppCon2015/tree/master/Presentations/C%2B%2B%20In%20the%20Audio%20Industry
[22:10:53] <ashafq> Is that the most efficient way of communicating with real-time thread? Or should there be a message queue?
[22:11:45] <LordKalma> real time systems usually(*) work in the basis of callbacks to either deliever or request data. be quick during those.
[22:11:50] <LordKalma> that's what his whole talk is about
[22:12:12] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:13:32] <CarloWood> slide #68 ... really? They aren't even numbered.  You expect us to go count from the top?
[22:13:54] <LordKalma> ever heard of PDF viwers?
[22:13:57] <ashafq> CarloWood: Just open the slide in raw and then type 68
[22:14:53] <ashafq> LordKalma: I didn't have to explicitly use std::atomic<> for embedded systems since I would "assume" ints and floats are atomic anyway
[22:15:19] <ashafq> But now I want to be correct while communicating with threads 😊
[22:15:41] <LordKalma> hahaha bold of you to assume atomicness
[22:16:15] *** Joins: ville (~ville@user/ville)
[22:16:50] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8)
[22:17:03] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[22:17:14] <CarloWood> std::atomic<> does more than make sure the type can be read/written atomically. It also communicates to the compiler that it is atomic.
[22:18:12] <ashafq> LordKalma: Also, most of it is single threaded code with interrupts. So, it's a good assumption to have.
[22:18:43] <LordKalma> a CPU can have a single thread and still not have atomic guarantees
[22:19:01] <LordKalma> your CPU can send something for the FPU to do while it does something else and create havoc
[22:19:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[22:19:39] *** scoobydoob is now known as scoobydoo
[22:19:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8) (Ping timeout: 240 seconds)
[22:19:56] <ashafq> True
[22:19:57] <kalven> what CarloWood said is pertinent.
[22:22:52] <CarloWood> Officially it simply is UB when two threads access the same memory address at the same time and at least one is writing, when that address doesn't belong to a std::atomic<> variable.
[22:23:24] <Soni> maybe this emscripten is just broken
[22:33:30] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:34:31] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:36:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:37:20] *** Joins: ville (~ville@user/ville)
[22:38:00] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[22:38:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:38:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:38:44] <c4017w_> Thanks Alipha, that works. Is there some magic to avoid/automate creating this wrapper function in the base class? f1() in the example: https://wandbox.org/permlink/vSRxuEbITvF44UQC
[22:38:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:40:38] <Alipha> c4017w_: just remove f1 from Base entirely?
[22:40:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:41:06] <Alipha> Oh
[22:41:36] <Alipha> Then you'd need static_cast<T&>(*this).T::f1()
[22:41:50] <Alipha> in f2, which I assume you're trying to avoid
[22:42:19] <c4017w_> yes, and also I would lose the check to make sure it's implemented in the subclass
[22:43:09] <Alipha> Well, writing static_cast<T&>(*this).f1() will error if f1 doesn't exist in Base
[22:44:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:44:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:44:38] <Alipha> (and also doesn't exist in T)
[22:45:14] *** Joins: xkuru (~xkuru@user/xkuru)
[22:45:21] <Alipha> You could have in Base `T& self() { return static_cast<T&>(*this); }` and write self().f1() in f2
[22:45:44] <c4017w_> interesting
[22:46:35] *** Joins: p-i-_ (~Ohmu@183.89.25.222)
[22:47:38] <c4017w_> Maybe I should just remove f1 from Base. If I forget to implement it in Sub I'll get an error. And for the few cases where I call f1 from Base, I'll do suck it up and do the static cast, or use the `self` helper function
[22:48:02] <Alipha> I like the self helper, personally
[22:49:11] <Alipha> Depending upon how you feel about wasting a little bit of memory, you could make it a member reference variable: T &self = static_cast<T&>(*this);
[22:50:09] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 256 seconds)
[22:58:48] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:59:35] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:02:36] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[23:04:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:08:47] <kalven> "Java Swing still lets you make native-looking-and-feeling apps" - Shit HN says
[23:09:10] <rpav> when was java swing ever native-looking
[23:09:55] <Friithian> does java swing support qt themes?
[23:10:16] <rpav> swing is its own thing afaik .. i think AWT was native-backed where possible? not sure
[23:10:17] <kalven> it has a bunch of themes that try to emulate the "look and feel" of other toolkits, but it's of course just skin deep
[23:10:37] <rpav> i just remember the "metal" theme being the default, but maybe i never used it on windows/mac
[23:13:37] *** Joins: plastico (~plastico@neomutt/plastico)
[23:28:37] <cq-work> Can someone explain how... well, any of this compiles: https://godbolt.org/z/87fzhc1bM
[23:29:18] <cq-work> I'm pretty unfamiliar with how `template<> constexpr auto HelperToEnum<class HowDoesThisWork> = HelperType::HELPER_FIRST;` works
[23:29:45] <rpav> it's a template variable
[23:30:45] <cq-work> Yeah, that's the term, haven't seen that before. How does that work with UnknownProgramHelperEnum there?
[23:31:20] <rpav> actually that's a template variable _specialization_ which i'm not sure i realized you could do, but i'm not sure
[23:31:56] <rpav> the first declares the template variable as being `<T> T::SomeType Var;`
[23:32:08] <rpav> that's the UnknownProgrblahblah bit
[23:32:42] <rpav> then it specializes it for `class HowDoesThisWork` which is an inline forward declaration i guess, and sets it to the specific value
[23:33:28] <CarloWood> cq-work: HelperToEnum is a template. You specialize it for HowDoesThisWork and then you use that specialization, so the non-specialized case that uses `Unknown*` is never used.
[23:34:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:34:29] <rpav> you can sortof think of it like `<T> struct S { constexpr auto val = ...; };` except if you're doing all that just for `val`, you can get rid of the struct S{} bits and just make a template variable directly, which is pretty nice
[23:35:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:35:30] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:35:31] <rpav> and you can use it for nice syntax hacks, it's how i get `auto v = from_to(1,5) | collect<std::vector>;` or whatever
[23:37:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:39:15] <cq-work> That's interesting. I haven't seen that a single time until now.
[23:39:52] <rpav> you sortof want it at some point if you do some template metaprogramming, then you realize you can and it's like "nice!!"
[23:44:38] *** Joins: Guest7398 (~Guest@host28.190-137-37.telecom.net.ar)
[23:45:06] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:45:24] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:51:16] <leonardus> why can't the sizeof() operator be overloaded?
[23:51:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[23:52:20] <rpav> because it's guaranteed to always give the thing it gives
[23:52:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:52:33] <rpav> you can always make some overloaded my_sizeof(const T&)
[23:55:00] *** Quits: jsbach (~jsbach@2a01:c22:b149:ff00:8bcb:cec6:c4f4:d654) (Ping timeout: 240 seconds)
[23:56:07] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:1017:d709:d279:19d6)
[23:56:07] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:1017:d709:d279:19d6) (Changing host)
[23:56:07] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:56:18] <RandomReader> sizeof is relative to the language guarantees, which is not something that can be changed, so overloading it doesn't make sense
[23:57:19] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[23:58:04] <RandomReader> the overloads tend to focus on functional operations instead, e.g. how to copy or what does a value mean for this type
