[00:00:47] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:02:02] <monochrom> I think GMP doesn't have state. It's reentrant and MT-safe and all that.
[00:02:09] <EvanR> ah
[00:02:33] <monochrom> Whereas a graphics card is a singleton piece of resource that needs a mutex guard.
[00:02:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:03:22] <monochrom> The CPU is too, but you no longer think of it because the OS has already time-sliced for you (a brute kind of mutex).
[00:03:27] <EvanR> I was going to say
[00:04:03] <monochrom> Logically you could write/add an OS to time-slice GPU too. I don't know whether people do it.
[00:04:17] <EvanR> the 16 CPUs I have is indeed 1 piece of resource
[00:04:39] <monochrom> Oh 16 is in O(1).
[00:05:00] <EvanR> the window system and compositor is the GPU time-slicer I guess
[00:05:07] <monochrom> The point is if you have n threads, n -> infinity, you are still mutexing.
[00:05:11] <EvanR> or kvm system
[00:05:34] <EvanR> er, kms
[00:07:11] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:07:46] <EvanR> how long before the cpu is eliminated and moved into the gpu in a bizarre form of reverse evolution
[00:08:05] <[exa]> "thread switch" on GPU is pretty heavy (the equivalent of a "register file" is like half a megabyte) so I'm not really expecting anything better than now
[00:08:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:08:36] <tomsmeding> you can definitely access a gpu from multiple processes
[00:08:38] <monochrom> Yeah, x86 context switching is merely a few registers, and people are already complaining that it's too slow.
[00:09:29] <tomsmeding> the driver probably muxes that all to a single stream of information that goes over the PCIe connection, but I'm not doing anything interesting and there are 7 processes having an allocation on my gpu right now
[00:09:35] <monochrom> So "slow" that people make ring-0 device drivers when the whole point of the x86 4 ring design is to put device drivers at ring 1 precisely because we don't want them to cause blue screens.
[00:10:03] * geekosaur misses os/2 dammit :(
[00:10:06] <tomsmeding> (Xorg and some other programs that are based on a web browser, because web browsers think they are cool and have custom rendering code)
[00:10:12] <[exa]> monochrom: +1
[00:10:41] <monochrom> Oh I think even in the days of OS/2 Warp, they're already doing ring-0 device drivers.
[00:10:55] <geekosaur> video drivers at least were ring 1
[00:11:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:11:22] <[exa]> tomsmeding: you can actually quite reliably cause rendering pauses on most OSes I've seen by just submitting a sufficiently long-running item to GPU queue from vulkan
[00:12:01] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[00:12:03] <tomsmeding> [exa]: no one said that all those streams were actually running in parallel on the device :)
[00:12:22] <[exa]> yeah that's literally rare.
[00:13:05] <EvanR> what's wrong with this computronium, it is massively parallel but can only do 1 thing at a time?
[00:13:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:13:24] <tomsmeding> only one client can tell it what 1e6 things to run in parallel
[00:13:29] <monochrom> Each "1 thing" demands all of the massive parallelism.
[00:13:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2055:673d:3155:da63) (Ping timeout: 250 seconds)
[00:13:56] <tomsmeding> also a gpu is mostly a SIMD (single-instruction multiple-data) device, just very M
[00:14:05] <monochrom> Programmers are control freaks, performance freaks, monopoly freaks.
[00:14:06] <EvanR> I question that situation
[00:14:09] <[exa]> unreal voice: M-M-M-Muuultiple!
[00:14:21] <EvanR> do all the 1 things really need all the massive parallelism
[00:14:33] <tomsmeding> modern gpus have a couple of processors in them (nvidia calls them SM's I think), something like 10, that can actually work sort of independently, but inside those "processors", it's one thing lots of times
[00:14:34] <EvanR> as if each of the 300 processes I'm running use 100% cpu
[00:14:54] <EvanR> rather than avg of 0
[00:15:05] *** Quits: kuribas (~user@ptr-25vy0i9v7xwr83cod1i.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[00:15:07] <tomsmeding> EvanR: the things that the vocal minority cares about do (i.e. games)
[00:15:26] <monochrom> games and crypto mining.
[00:15:28] <[exa]> EvanR: that's the point, GPU is a giant heap of CPUs that share control (!) aka run in lockstep, with a really thick cabling into the memory. Something for painting the pixels en masse.
[00:15:29] <tomsmeding> right
[00:15:37] <EvanR> I guess... you gotta have a youtube channel where you run 9 call of duties at once
[00:15:52] <monochrom> There is no end in the pursuit of more FPS or faster mining.
[00:16:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:16:15] <monochrom> If 100 FPS needs only 50% of your graphic card, people will then want 200 FPS.
[00:16:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:16:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:16:31] *** Joins: wroathe (~wroathe@user/wroathe)
[00:16:47] <EvanR> most applications, even some real time games, don't even animate most of the time
[00:17:17] <davean> ts not even that. A *lot* of algs work well in VERY wide SIMD
[00:17:24] <ephemient> may the day come when there are no more bits to be mined
[00:17:27] <monochrom> (Me, I conscious set 30 FPS in my RTS games. I don't even need 60. I do have a bit of need for vsync though.)
[00:17:29] <[exa]> EvanR: imagine you need to paint 4K screen 120times per second on a CPU pixel-by-pixel, even without any other computation-- most CPUs just wouldn't make it
[00:17:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[00:17:59] <EvanR> yeah I've been through that math
[00:18:07] <davean> [exa]: Uh, I can barely think of any that could
[00:18:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:18:47] <monochrom> [exa]: No no no, imagine 5 years down the road we will be talking about 8K and 1200 FPS >:)
[00:18:48] <[exa]> technically it could be done with a few GHz, but you don't wanna burn all your cpu power for painting same-colored pixels
[00:19:09] <[exa]> and yeah, it needs to get scalable
[00:19:38] <EvanR> increasing FPS sounds like there will need to be a re-think
[00:19:47] <tomsmeding> another nice thought experiment now that we're talking about 4K at 120Hz: think about the amount of data that needs to go over the video cable from your gpu to your monitor
[00:19:49] <davean> EvanR: why do you say that?
[00:19:51] <[exa]> the other spoiler: efficient parallelism is grossly impure
[00:20:08] <tomsmeding> and then you realise why they're thick and why 4k at 120Hz won't work with an old hdmi cable
[00:20:13] <EvanR> instead of dumping more entire frames, you display the deltas, which could come much faster, and be compressed as hermite polynomials or something
[00:20:30] <EvanR> instead of going from 1200 to 2400 or whatever
[00:20:47] <[exa]> EvanR: yeah that was literally what the first GPUs did
[00:20:48] <davean> EvanR: Uh, I hate to break it to you, but we've been there
[00:20:51] <davean> we've done delta rendering
[00:20:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:20:59] <monochrom> I think someone should think of some DCT on video transmission from graphics card to display...
[00:20:59] <davean> We still do a little
[00:21:14] <EvanR> and instead of discrete deltas, they are derivatives
[00:21:23] <EvanR> hence the polynomials
[00:21:29] <monochrom> Ah OK, people are smarter than me. :)
[00:21:38] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[00:21:50] <EvanR> then the limit is information density and not number of frames per second
[00:22:00] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[00:22:21] <[exa]> you need circuit density and lots of power to decode information density into screenable info
[00:22:27] <monochrom> I need to learn Hermite polynomials some day.
[00:23:07] <EvanR> yeah may you need a piece of silicon that just does an integral in some fancy way instead of computations
[00:23:30] <davean> EvanR: integrals *are* computation
[00:23:40] <davean> infact ... if we go back to the origional point of computers ...
[00:23:41] <monochrom> Yeah it's easy for me to propose DCTing and deltaing and DCTing the delta and delating the DCT of delta and ... but then it means needing more GPU :)
[00:23:59] <davean> EvanR: I think your thinking is twisted up here
[00:24:07] <EvanR> the point of computers to make my solitaire cards jump out at me when I win
[00:24:10] <[exa]> EvanR: we're there, GPUs are literally programmable things for doing these "simple computations" en masse
[00:24:25] <EvanR> right, I think you misunderstood what I meant
[00:24:33] <[exa]> yeah let's focus on that
[00:24:35] <davean> Thats *WHY* THey're SIMT
[00:24:35] <EvanR> a simpler component, not 9000 transistors
[00:24:41] <EvanR> for 1 thing
[00:24:43] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:24:45] <davean> EvanR: it can't be simpler really
[00:24:52] <davean> EvanR: your approach ends up more complicated
[00:24:52] <EvanR> not with that attitude
[00:24:53] <monochrom> integral = multiple-and-add = what GPUs and signal processing chips already do
[00:25:00] <davean> EvanR: People *have done this*
[00:25:02] <monochrom> err, multiply-and-add
[00:25:13] <davean> we know what it looks like
[00:25:16] <EvanR> I understand what you're saying
[00:25:30] <EvanR> try to imagine that I do xD
[00:25:35] <[exa]> EvanR: anyway, what was your original concern? you wanted to generate images more quickly?
[00:25:42] <EvanR> nevermind that
[00:25:48] <monochrom> more purely
[00:26:04] <EvanR> all I'm going to get out of you guys is a "don't use OpenGL" meme
[00:26:41] <[exa]> because I might really have misunderstood the task you are facing
[00:27:20] <[exa]> nothing can really get more pure for generating images than say juicypixels' (x,y)->fn->Picture approach
[00:27:29] <EvanR> yeah I've done that
[00:27:31] <monochrom> I don't think there is a task. I think there is an intellectual inquiry. Can graphics be expressed in pure FP terms.
[00:27:42] <[exa]> so I'm myself wondering how come we're hating opengl now for that purpose :D
[00:27:57] <davean> OpenGL is a pretty bad API
[00:28:01] <EvanR> ^
[00:28:10] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:28:27] <davean> Its designed for a fixed function pipeline, it is completely disconnected from the compute, and its approach to matrix stacks, etc is very stareful and issue ridden
[00:28:32] <[exa]> davean: c'mon it's so nice for the C peoples out there, you can glEnable(GL_SMOOTH), then glBegin(GL_TRIANGES) and then WOW
[00:28:37] <[exa]> <3
[00:28:45] <davean> [exa]: no it isn't
[00:28:50] <EvanR> sigh
[00:28:53] <[exa]> ;_;
[00:28:59] <davean> [exa]: Look, I ended up in this channel *because* I did graphics
[00:29:05] <davean> opengl isn't nice :-p
[00:29:15] <davean> it was the first workable thing
[00:29:15] *** Quits: Guest65 (~Guest65@2a02:8109:a380:b58:917e:d1c3:3da5:dce7) (Quit: Client closed)
[00:29:21] <[exa]> I wasn't realistic but it had its place back then
[00:29:30] <ski> @remember monochrom Programmers are control freaks, performance freaks, monopoly freaks.
[00:29:30] <lambdabot> I will never forget.
[00:29:35] <davean> Yes, first workable thing
[00:29:40] <monochrom> :)
[00:29:41] <[exa]> better than [tada.wav]  directX1
[00:29:42] <davean> well, IrisGL was
[00:29:59] <davean> [exa]: DirectX, such a latecomer
[00:30:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:30:30] <davean> [exa]: I mean DirectX was a half decade later, and OpenGL wasn't even what people started on
[00:30:53] <[exa]> yeah
[00:31:01] <[exa]> what was that thing from voodoo cards called
[00:31:14] <EvanR> glide or something
[00:31:24] <[exa]> old magicks.
[00:33:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[00:34:29] <Rembane> GL?
[00:35:25] <geekosaur> I'm not sure it was evenn the first workable thing. Just the first one made generally available (SGI GL)
[00:36:09] <geekosaur> SGI opened their specs so other people could implement it, and OpenGL was born
[00:36:58] <davean> geekosaur: I cited IrixGL!
[00:37:14] <davean> er, IrisGL
[00:37:47] <davean> 20:59:42 davean well, IrisGL was
[00:38:19] <EvanR> and since the turn of the millenium, people have been trying to get people to not use parts of OpenGL ever since. I should skip ahead and tell people not to use vulkan, if that's not already a thing xD
[00:38:25] <geekosaur> right, but you cited it as "first workable thing", I'm saying "workable" took back seat to "open"
[00:38:29] <[exa]> SGI was so underrated
[00:40:35] <[exa]> then there was the second company that essentially invented tiling as used today everywhere, later bought by nVidia
[00:41:48] *** Joins: pavonia (~user@user/siracusa)
[00:42:25] <davean> [exa]: are you thinking PowerVR?
[00:42:25] <carbolymer> I've added -ddump-simpl in the compilation options, and I ended up with a few screens of output for a fairly simple code
[00:42:38] <carbolymer> can I add some markers in my code which would be visible there
[00:42:49] <carbolymer> It's hard to find anything there
[00:43:02] <davean> carbolymer: names make it through
[00:43:33] <carbolymer> davean: well... they didn't in my case
[00:43:45] <carbolymer> davean: or GHC aggressively inlined my functions
[00:44:37] *** Joins: Pickchea (~private@user/pickchea)
[00:45:11] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[00:45:17] <[exa]> davean: yeah thanks, with the kyro GPUs
[00:46:21] <davean> [exa]: as I said, I ended up in t his channel because I did graphics ... all you have to do is poke the scars
[00:48:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:49:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[00:49:36] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:49:49] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[00:53:31] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[00:54:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:56:14] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[00:58:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:59:17] <EvanR> :k '[(Int,Char), (Bool,())]
[00:59:18] <lambdabot> [*]
[00:59:22] <EvanR> :k ['(Int,Char), '(Bool,())]
[00:59:23] <lambdabot> [(*, *)]
[00:59:26] <EvanR> :k '['(Int,Char), '(Bool,())]
[00:59:27] <lambdabot> error: parse error on input ‘'’
[01:00:51] <EvanR> :k '(Int,Char) ': '(Bool,()) ': '[] -- :'(
[01:00:52] <lambdabot> [(*, *)]
[01:01:08] <geekosaur> :k '[ '(Int,Char), '(Bool,())]
[01:01:09] <lambdabot> [(*, *)]
[01:01:21] <geekosaur> '[' looks too much like a lifted Char
[01:01:30] <EvanR> so that's what it's talking about
[01:01:41] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:01:47] <EvanR> thanks
[01:03:09] *** Quits: slack1256 (~slack1256@191.126.227.197) (Ping timeout: 256 seconds)
[01:03:46] *** Joins: jushur (~human@user/jushur)
[01:08:03] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 256 seconds)
[01:08:13] *** Joins: c_wraith (~c_wraith@adjoint.us)
[01:13:11] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:15:31] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:6816:2795:9c3:9492)
[01:17:52] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[01:19:25] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[01:23:32] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 240 seconds)
[01:28:06] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[01:28:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:30:01] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:31:37] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[01:33:47] <EvanR> https://paste.tomsmeding.com/kdAstKkN https://i.imgur.com/KqgmKh7.png 
[01:35:27] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:36:27] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:37:47] <tomsmeding> the venerable triangle
[01:38:07] <tomsmeding> I really need to stop being pinged by paste links
[01:38:28] <geekosaur> heh
[01:38:29] <monochrom> Oh heh.
[01:38:32] <EvanR> there's some extraneous data there but it lets you upload whatever geometry, images
[01:38:49] <EvanR> shows the result, doesn't yet give you the PNG back
[01:38:55] <monochrom> Would you like to change the website name, or would you rather change your IRC nick? :)
[01:39:26] <tomsmeding> monochrom: I would rather make weechat not ping me if it has 'paste.' before and '.com' after
[01:39:36] <tomsmeding> but it seems it might not support regexen?
[01:39:38] <tomsmeding> hmm
[01:39:58] <monochrom> EvanR: If I want to draw a circle/disc, will it be one single "circle" command, or will it be a hundred triangles?
[01:40:04] <tomsmeding> or do you guys have amazing suggestions for a domain name
[01:40:04] <ephemient> EvanR, trying to make something like https://github.com/sleexyz/hylogen ?
[01:40:42] <EvanR> a disc is just 1 triangle isn't it
[01:41:00] <EvanR> but no this is raw gl only
[01:41:03] <monochrom> If I say https://pastetomsmeding.com/kdAstKkN , will it ping you?
[01:41:13] <EvanR> sorry, I can use a different paste site
[01:41:17] <tomsmeding> monochrom: no
[01:41:25] <tomsmeding> EvanR: no lol I need to fix this not you
[01:41:31] <monochrom> Then perhaps that's a good domain name :)
[01:41:38] <tomsmeding> I though it was amusing for a while
[01:42:51] <EvanR> ephemient, yeah those are great
[01:42:51] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[01:42:54] *** Joins: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:43:25] <monochrom> Ugh all the tomato.{com,org,net} are taken. I would think that paste.tomato.??? would be cute :)
[01:43:35] <tomsmeding> :p
[01:43:48] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[01:44:09] <monochrom> Ugh even toma.to is taken.
[01:44:18] <tomsmeding> of course it is
[01:45:11] <SrPx> Is `Data.List` 's sort fast? Should it be used where performance matters, or is there a well known faster (pure) version among the 3rd party libs?
[01:45:29] <EvanR> also I am pleasantly surprised the type inference is working here
[01:46:24] <monochrom> Data.List.sort is probably as fast as sorting [] goes. Someone really redesign and benchmarked the algorithm.
[01:46:50] <monochrom> I don't think anyone has beaten it since then.
[01:47:09] <EvanR> it's an unfortunate data structure for sorting
[01:47:27] <monochrom> Yeah if you want faster you have to first give up the []ness.
[01:48:41] <SrPx> well I guess I just have beaten it by 2x :pp 
[01:48:51] <SrPx> by just fixing something silly with it?
[01:48:52] <EvanR> nice
[01:48:54] <SrPx> or am I insane
[01:49:11] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[01:49:16] <maerwald> likely
[01:49:21] <ephemient> xn--fi8h is the IDN encoding of 🍅, if you can find some registry to register that at…
[01:49:23] <maerwald> but so are we
[01:49:27] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:49:51] <geekosaur> tomsmeding, https://weechat.org/scripts/tag/highlight/ last plugin on the page looks interesting
[01:50:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:51:41] <tomsmeding> geekosaur: indeed, but not _quite_: if someone says 'tomsmeding: https://paste.tomsmeding.com/...', then I want a highlight
[01:52:20] <geekosaur> it's a python script, you could probably edit it to do that
[01:52:42] <tomsmeding> apparently weechat natively supports highlighting via a regex, but a posix ERE, which doesn't support negative lookahead -.-
[01:52:45] <tomsmeding> geekosaur: fair
[01:53:34] <geekosaur> or there are ugly ways to simulate negative lookahead
[01:54:45] <geekosaur> /foo([^.]|.[^c]|.c[^o]|.co[^m])/i
[01:54:47] <monochrom> Perhaps unhighlight paste\.tomsmeding\.com/[^ ] 
[01:55:36] * monochrom refrains from citing the unhelpful theorem about regular languages being closed under complement >:)
[01:55:43] <geekosaur> maybe add $ as the first element of that (|||)
[01:55:53] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:56:18] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[01:56:19] <tomsmeding> monochrom: see my objection above, someone may have a highlight _and_ a paste link in the same message, then unhighlight would let me miss the message
[01:56:40] <SrPx> can you guys help me see if I'm doing something wrong here?
[01:56:40] <monochrom> Oh! Darn.
[01:56:53] <SrPx> I'll post the gist
[01:57:17] <tomsmeding> geekosaur: that's not too bad actually
[01:57:18] <SrPx> https://gist.github.com/VictorTaelin/2a1cf354ea710f1eae1b6d15281813ca
[01:57:32] <SrPx> it seems to be ~70% faster than Data.List's sort
[01:57:43] <SrPx> I just took the code and changed a small thing though
[01:58:37] <tomsmeding> SrPx: to get a decent benchmark result, use criterion and actually use random lists instead of a LCG :p
[01:59:00] <SrPx> oh, fair enough. is it hard to use?
[01:59:00] <tomsmeding> but 🦆 naming is already a good aspect
[01:59:06] <SrPx> let me see
[01:59:26] <SrPx> tomsmeding: I wanted to mix merge and quick in a single word but I failed (mick? querge?) so I went with quack
[01:59:28] <tomsmeding> there's probably decent tutorials around :p
[01:59:55] <SrPx> eh
[02:00:10] <maerwald> bottom-up mergesort is nice
[02:00:13] <SrPx> perhaps another day
[02:00:41] <monochrom> "quack sort" is not a very encouraging name >:)
[02:00:48] <maerwald> functional sort algorithms are usually slow
[02:00:58] <SrPx> monochrom: why not
[02:01:16] <maerwald> I think I wrote a bottom up mergesort in Go
[02:01:31] *** Quits: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[02:01:32] <monochrom> "quack doctor" has the connotation of imposter
[02:02:05] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:02:06] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[02:02:11] <SrPx> looks appropriate 
[02:02:23] <SrPx> maerwald: what that means?
[02:03:39] <maerwald> SrPx: it's an iterative version
[02:04:01] <SrPx> I mean, being bottom-up
[02:04:19] <maerwald> SrPx: https://gogs.hasufell.de/hasufell/go-challenge/src/branch/master/src/numbers/sort/sort.go#L76
[02:05:31] <maerwald> http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/7-Sort/merge-sort5.html
[02:06:05] <maerwald> I think mine was also significantly faster for the given  input than the Go stdlib one
[02:06:12] <SrPx> I see
[02:06:34] *** Quits: max22- (~maxime@2a01cb08833598002ff4585ddd5d42b3.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:06:34] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:06:56] <maerwald> but for loops with index tricks are a plague
[02:10:25] <maerwald> today we have AI to sort lists for you
[02:10:26] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Read error: Connection reset by peer)
[02:10:59] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[02:11:08] <monochrom> Do we also have AI to make lists that need sorting?
[02:11:21] <monochrom> That would complete the cicle :)
[02:12:02] <maerwald> no, that's a student assignment
[02:13:31] <monochrom> heh
[02:16:23] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[02:16:26] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b072:e210:a25e:85eb) (Remote host closed the connection)
[02:16:27] *** Quits: Brandon_IX (~brandon@178-79-138-117.ip.linodeusercontent.com) (Quit: Lost terminal)
[02:16:28] <hpc> that part's easy, just take the students' sorting algorithms and run them over a sorted list
[02:16:31] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[02:16:48] <hpc> guaranteed shuffle
[02:18:16] <monochrom> haha
[02:20:32] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 240 seconds)
[02:20:53] <tomsmeding> SrPx: tried to run your code on larger lists, fills up my memory
[02:21:01] <tomsmeding> I have 32 GB so it's not that I have too little
[02:21:13] <SrPx> tomsmeding: does that not happen with `sort`?
[02:21:25] <tomsmeding> no
[02:21:32] <SrPx> anyway this is not to be taken too seriously. will probably be slower than bubblesort for reversely-sorted lists
[02:21:44] <tomsmeding> oh something is going wrong
[02:22:06] <SrPx> going wrong?
[02:22:27] <tomsmeding> I messed up copying your code
[02:22:37] <tomsmeding> can you please write code that makes -Wall scream less
[02:22:45] <SrPx> that said, I think quacksort would actually be quite fast if we had a way to pick a pivot that is close to the median of a list
[02:23:13] <tomsmeding> https://tomsmeding.com/ss/get/tomsmeding/3Yga30
[02:23:15] <tomsmeding> on random lists
[02:24:00] <SrPx> why is Wall so upset about shadowing?
[02:24:19] <tomsmeding> it's error-prone, and I kind of agree
[02:24:21] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[02:24:26] <tomsmeding> though here it's kind of a false positive
[02:24:31] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:88e2:d81e:ca89:4a84)
[02:24:58] <SrPx> hmm, so it is slightly faster?
[02:25:43] <tomsmeding> seems so, on random lists
[02:25:54] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[02:26:58] <SrPx> is there any really fast way to guess the median of a list without reading all elements? perhaps reading logN elements? (:
[02:27:04] <SrPx> if so then this algorithm could be practical
[02:27:27] <geekosaur> doubt it
[02:27:53] <EvanR> guess the median of an unsorted list
[02:27:53] <geekosaur> if the list is truly unsorted then there's no way to know if the list is end-heavy
[02:28:04] <EvanR> that's like compressing 2 random bits into 1 or something
[02:28:47] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:28:53] <tomsmeding> SrPx: there's a standard way of guessing a sort-of median of a list https://stackoverflow.com/questions/12545795/explanation-of-the-median-of-medians-algorithm#12545866
[02:28:53] <SrPx> geekosaur: but after the first recursive pass you in theory have read all elements at least once, so there might be some way to carry an updateable median as a single int or something
[02:29:17] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 268 seconds)
[02:29:50] <SrPx> tomsmeding: oh interesting, I envy your googling skills
[02:29:54] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[02:30:13] <tomsmeding> I knew this existed in some form, just forgot the name ;)
[02:30:17] <SrPx> anyway, I realized mergesort is terrible for already sorted lists
[02:30:28] <SrPx> so I have no idea why quacksort is faster than sort for truly random lists
[02:30:54] <SrPx> the whole point was to make it faster by making it more likely for deep calls to be already sorted
[02:31:10] <SrPx> so yea idk what is going on and i need to go :pp
[02:31:12] <SrPx> thanks though, was fun
[02:37:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[02:38:13] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[02:38:15] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:39:08] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[02:40:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:42:24] *** Quits: rtsn (~nstr@user/rtsn) (Quit: Lost terminal)
[02:45:25] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:46:42] *** Joins: alp (~alp@user/alp)
[02:47:15] <tomsmeding> SrPx: quacksort infinite loops if the first element of the list is maximal
[02:47:26] <tomsmeding> because then everything ends up in the first bucket ;)
[02:47:43] <tomsmeding> yay quickcheck
[02:49:19] <SrPx> lol! 
[02:49:23] <SrPx> good catch
[02:49:47] <SrPx> the algorithm only would really make sense if `p` is a reasonable pivot
[02:50:02] <SrPx> now, the question is, would it still be faster on random lists if that's the case?
[02:50:18] <SrPx> i have no idea, but I posted it here just in case anyone wants to play with the algo: https://stackoverflow.com/questions/70856865/why-quacksort-is-2x-faster-than-data-lists-sort-for-random-lists
[02:52:43] <monochrom> If you pick your pivot uniformly randomly, or equivalently the list is a random shuffle so if you pick your pivot by deterministic position-in-list it's as good as random, then there are two theorems that apply:
[02:53:05] <monochrom> 1. The expected time is Θ(n lg n)
[02:53:30] <monochrom> 2. With high probability the worst-case time is Θ(n lg n).
[02:54:53] <monochrom> More precise statement for #2: If you accept a larger constant multiplier K for the worst-case time K * n lg n, then the probability of making it is also higher.
[02:55:22] <monochrom> (I forgot the most precise statement i.e. how high the probability is in terms of K.)
[02:57:07] <monochrom> If it is any consolation, in this the 21st century where every troll and blackhat is out to try to DoS you, the best and only known defense is randomization.
[02:58:49] <SrPx> isn't that the case for mergesort in general?
[02:59:18] <monochrom> Heh OK but people complain about mergesort's constant multiplier being large.
[02:59:34] <monochrom> @quote monochrom performance.freak
[02:59:34] <lambdabot> monochrom says: Programmers are control freaks, performance freaks, monopoly freaks.
[02:59:41] <monochrom> Fresh out of the oven today!
[03:00:22] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[03:01:43] <dsal> OO programmers are super freaks
[03:01:45] *** Joins: AlexNoo_ (~AlexNoo@178.34.162.240)
[03:01:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[03:01:53] <monochrom> haha
[03:02:11] <Axman6> this
[03:03:51] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[03:04:57] *** Quits: AlexNoo (~AlexNoo@178.34.150.81) (Ping timeout: 240 seconds)
[03:04:57] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[03:04:59] *** Quits: AlexZenon (~alzenon@178.34.150.81) (Ping timeout: 256 seconds)
[03:04:59] *** Quits: Alex_test (~al_test@178.34.150.81) (Ping timeout: 256 seconds)
[03:05:31] <EvanR> is superfreak a superclass of freak or a subclass
[03:06:28] <geekosaur> "yes"
[03:07:03] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[03:07:10] <monochrom> What does the Dilbert Substitutability Principle say? >:)
[03:07:28] <tomsmeding> maerwald: isn't your go code wrong for lists of length 3? it does one pass with m=1 and i=0, i doesn't become 2 because 2 !< 3-2, then m doesn't become 2 because 2 !< 3-2, so it... exits, and never looked at the third element of the list?
[03:08:01] <Axman6> tomsmeding: you could have stopped after the fifth word
[03:08:49] *** Joins: Alex_test (~al_test@178.34.162.240)
[03:08:50] <tomsmeding> Axman6: hm?
[03:08:56] <tomsmeding> it's late here, have mercy
[03:08:56] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:08:59] *** Joins: AlexZenon (~alzenon@178.34.162.240)
[03:09:04] <monochrom> "isn't your go code wrong" :)
[03:09:07] <Axman6> "isn't your go code wrong" is usually true :P
[03:09:34] <tomsmeding> I mean, I'm not a fan of go, but people occasionally write correct code in it :p
[03:10:00] <monochrom> "isn't your code wrong" for language agnosticity :)
[03:10:08] <janus> even "isn't _your_ go code" would usually be true :P
[03:10:32] <tomsmeding> janus: now _that_ one is indeed accurate
[03:10:54] <monochrom> Is this like a new version of "what does it mean to be a good person?" :)
[03:10:59] <geekosaur> mine certainly would be (I don't know go, so…)
[03:11:17] <Axman6> you can defer learning
[03:13:11] <geekosaur> I'm in no hurry. if anything I want to poke at rust
[03:16:31] <monochrom> Ugh so today's lesson is "don't mess with sorting algorithms"?  Both attempts today prove to be incorrect...
[03:16:52] <geekosaur> bobblesort :þ
[03:18:29] <tomsmeding> SrPx: with a really cheap fix for the inconvenient-pivot issue (can certainly be done more efficiently), quacksort is now a little bit slower than Data.List.sort
[03:18:47] <tomsmeding> but good news, my STArray based bottom-up mergesort is about twice as fast! (but not lazy)
[03:19:08] <SrPx> ah STArray should really destroy any pure algo
[03:19:12] <SrPx> how did you fix the pivot?
[03:19:33] <tomsmeding> https://paste.tomsmeding.com/RVS64Lfd
[03:19:38] <Axman6> would be interesting to compare to the discromination package's sorting stuff too
[03:19:51] <tomsmeding> in a really ugly and inefficient way, feel free to improve :p
[03:20:00] <tomsmeding> Axman6: feel free to incorporate, should be easy
[03:20:04] <tomsmeding> I'm going to bed :p
[03:20:32] <Axman6> %! cabal install discrimination
[03:20:32] <yahb> Axman6: [Segmentation fault]
[03:20:36] <Axman6> =)
[03:20:42] <tomsmeding> lolwat
[03:20:52] * tomsmeding is afk
[03:20:54] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[03:23:07] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[03:23:18] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[03:24:47] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[03:25:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:25:50] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[03:27:22] *** Joins: jespada (~jespada@87.74.36.188)
[03:27:57] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[03:29:54] <SrPx> tomsmeding: idk I think if we go the ST route we are kinda giving up on the essence of haskell
[03:29:56] <SrPx> i like purity
[03:30:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:32:29] <dsal> ST is awesome.
[03:33:25] <hpc> purity is just a convenient side-effect of first-class IO :P
[03:33:59] <SrPx> not sure I agree, I'd rather maintain a mutable mergesort in Rust than how it looks like in Haskell, for example
[03:34:13] <SrPx> but for pure algorithms, Haskell is just lightyears ahead
[03:34:17] <SrPx> but I guess it is a matter of taste
[03:34:32] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:88e2:d81e:ca89:4a84) (Remote host closed the connection)
[03:34:44] <hpc> SrPx: that was mostly a joke
[03:35:06] <hpc> but i quite like being able to throw IO actions around without having to do goofy () -> whatever functions
[03:35:16] <SrPx> I meant that I don't agree ST is so awesome
[03:35:22] <hpc> oh, yeah
[03:35:26] <EvanR> SrPx, ST is a pure computation
[03:35:28] <SrPx> interestingly I do agree with what you said
[03:35:34] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:e0d9:54a6:eecc:ef77)
[03:35:40] <hpc> hah
[03:35:49] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:35:55] <SrPx> EvanR: it is a pure computation wrapped in 7 layers of obtuse abstractions
[03:35:59] <hpc> SrPx: try this one on for size, haskell is my favorite imperative language and perl is my favorite functional language
[03:36:07] <SrPx> to represent an impure computation
[03:36:11] <EvanR> don't look at how many layers everything else has
[03:36:27] <EvanR> we want our layers to be air tight, which ST is
[03:36:34] <EvanR> like everything else pure here
[03:37:00] <SrPx> I look at the code. The code is just ugly. The kind of thing I'd rather touch than work with in my career 
[03:37:16] <SrPx> perhaps my experience is affected by when I *had* to mess with ST a lot, a few years ago
[03:37:21] <SrPx> things might be way better by now
[03:37:52] <EvanR> giving someone, or yourself in the future, a pure function that you can just use and works, even if it uses impurity behind the scenes, is good
[03:38:10] <EvanR> otoh if someone or yourself in the future has to work on the insides for whatever reason, not so good
[03:38:19] <EvanR> but that's another story
[03:38:58] <EvanR> putting lego bricks together to make stuff is fun, messing with molten thermoplastic that lego bricks come from, not so great
[03:39:03] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:40:22] <dsal> It's still a container that has specific rules you know things about.
[03:40:25] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[03:42:40] <SrPx> hmmmm
[03:43:21] <EvanR> an ST value is a container? 🤔
[03:43:33] <geekosaur> tomsmeding, I just realized that what I gave you will malfunction at the end of a line, although you may not care. /foo($|[^.]|\.($|[^c]|c($|[^o]|o($|[^m]))))/i *now* it's ugly :)
[03:43:53] <geekosaur> an ST computation is a container
[03:43:53] <hololeap> something else to note is that ST is a monad and you can run pure code in it just like you can with IO or anything else
[03:44:27] <geekosaur> within which you can use impurity as long as you don't let it leak out, and the container prevents you from making such leaks
[03:44:44] <EvanR> interesting take on the containing
[03:44:53] <dolio> ST is a way of calculating a pure result with an impure method, with a mechanism for ensuring that the impurity is localized. It's not just a pure representation of an impure method like IO.
[03:44:56] <EvanR> it doesn't contain a result, it contains the state thread
[03:45:07] <geekosaur> that's more or less what "state thread" means
[03:45:31] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[03:45:38] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[03:45:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:46:03] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[03:46:36] <geekosaur> once upon a time I had a script to work those regexes for me since it's pretty mechanical… then came pcre
[03:46:37] <EvanR> containing in the sense of imprisoning something
[03:47:26] <EvanR> where as containers package is about eventually letting the things out
[03:47:48] <geekosaur> well, you are letting something out. just not the impurity with it
[03:47:52] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[03:53:32] <geekosaur> (ironically it was a perl script. perl was around for a while before pcre appeared)
[03:54:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:55:56] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[03:57:28] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[03:58:20] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[03:58:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[03:58:57] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:00:00] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[04:00:40] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[04:02:00] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[04:02:09] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[04:02:18] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[04:02:47] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[04:03:39] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:07:52] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:08:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:08:28] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[04:08:42] *** Joins: dsrt^ (~dsrt@96-86-240-178-static.hfc.comcastbusiness.net)
[04:11:04] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[04:11:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[04:11:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[04:12:13] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[04:13:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:14:22] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 250 seconds)
[04:15:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[04:16:15] *** Joins: joo-_ (~joo-_@80-62-116-31-mobile.dk.customer.tdc.net)
[04:16:15] *** Quits: joo-_ (~joo-_@80-62-116-31-mobile.dk.customer.tdc.net) (Changing host)
[04:16:15] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[04:18:18] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:18:29] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[04:18:57] <romesrf> hey everyone
[04:18:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:19:59] <geekosaur> o/
[04:21:00] *** Joins: Guest44 (~Guest44@44.190.189.46.rev.vodafone.pt)
[04:22:11] <monochrom> ST is like a space telescope that shields noisy infrared from desired infrared signals... >:)
[04:22:33] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[04:22:52] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:23:05] <geekosaur> are st tutorials the new monad tutorials?
[04:23:11] <romesrf> AHA
[04:23:41] <romesrf> it'd be good because i haven't gotten into the ST yet, though i do have simon's paper waiting on my bedside table
[04:23:53] <monochrom> You also have to unfold it like you unwrap a burrito!
[04:25:25] <romesrf> it's funny i really like burritos but i can't like that <<<<<<analogy>>>>>>
[04:25:44] <monochrom> It's OK, I'm joking :)
[04:26:12] <romesrf> i know ;)
[04:26:19] <geekosaur> late nite on #haskell þ
[04:26:49] <geekosaur> (well, early night but it feels late to me because I got up several hours earlier than I ought've)
[04:31:20] *** Joins: cyphase (~cyphase@user/cyphase)
[04:32:40] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[04:34:19] *** Quits: Guest44 (~Guest44@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[04:34:44] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 250 seconds)
[04:38:18] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[04:39:30] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:40:26] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:41:15] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[04:41:42] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:44:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:45:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:45:48] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:46:37] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[04:47:48] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:51:09] <dsal> EvanR: Yeah, I didn't even think of container as "bucket" as much as "containment."  Words are weird.
[04:53:00] *** Joins: xsperry (~xs@user/xsperry)
[04:55:04] *** Joins: cynomys (~cynomys@user/cynomys)
[04:57:01] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:57:08] <int-e> The burrito analogy is still brilliant... because it kind of works and I suspect there's pretty unanimous agreement that it fails to capture the essence of monads :P
[04:58:38] <int-e> (burritos are just leaky containers :-P)
[04:59:27] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[05:02:33] *** Joins: vysn (~vysn@user/vysn)
[05:03:04] *** Joins: lispy (~lispy4@84.69.59.93)
[05:03:17] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[05:05:37] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[05:06:29] <remexre> is there something for reformatting deriving-Show'd values to have "friendlier" whitespace?
[05:09:03] <ephemient> @hackage pretty-simple
[05:09:03] <lambdabot> https://hackage.haskell.org/package/pretty-simple
[05:09:49] <remexre> thanks!
[05:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:11:21] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[05:13:29] *** Joins: xsperry (~xs@user/xsperry)
[05:14:10] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[05:15:06] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[05:15:10] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:17:38] <sm> or
[05:17:38] <sm> @hackage pretty-show
[05:17:38] <lambdabot> https://hackage.haskell.org/package/pretty-show
[05:17:42] *** Joins: FroskyArr (~froskyarr@120.239.9.244)
[05:19:20] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:20:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:20:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:20:58] *** Joins: wroathe (~wroathe@user/wroathe)
[05:24:22] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:25:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[05:28:32] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[05:30:44] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:31:41] *** Quits: mmhat (~mmh@55d40230.access.ecotel.net) (Quit: WeeChat 3.4)
[05:31:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:39:49] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[05:42:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:44:13] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 256 seconds)
[05:44:35] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:50:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:50:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:51:37] *** Quits: xff0x (~xff0x@2001:1a81:53ac:af00:ba25:4d71:4d47:a3a5) (Ping timeout: 240 seconds)
[05:51:54] <pfurla-matrix> Does anybody recalls what is the Java/JVM equivalent of MVar? 
[05:52:53] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Read error: Connection reset by peer)
[05:53:05] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[05:53:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:53:27] <monochrom> The "synchronized" reserved word.
[05:53:52] *** Joins: xff0x (~xff0x@2001:1a81:53ec:e00:db2b:9281:840d:9e3c)
[05:54:06] <monochrom> OK, there may be something in the library that's closer, but I bet they are based upon "synchronized".
[05:54:23] *** Joins: xsperry (~xs@user/xsperry)
[05:54:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:55:13] <monochrom> Well, "synchronized" and the "wait()" method.
[05:55:46] *** Joins: Guest|redshift1 (~Guest|red@165.16.48.46)
[05:56:13] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Quit: Client limit exceeded: 20000)
[05:57:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:59:53] <pfurla-matrix> yeah, I could do that, but I was hoping something would take care of the synchronized for me already
[06:00:57] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:02:52] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[06:07:58] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:6816:2795:9c3:9492) (Read error: Connection reset by peer)
[06:11:07] <int-e> pfurla-matrix: http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/Slot.html rather suggests that there's nothing doing that directly in the standard library
[06:11:20] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[06:13:07] <int-e> and yeah, having language blessed re-entrant monitors built in goes a long way towards explaining that.
[06:13:32] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:19:36] <sm> \o/! Someone other than me recommended HTAC.
[06:19:36] <sm> https://www.reddit.com/r/haskell/comments/sc41tj/learn_haskell_by_doing/hu5x46p
[06:24:51] *** Joins: califax- (~califax@user/califx)
[06:27:22] *** Quits: Guest|redshift1 (~Guest|red@165.16.48.46) (Quit: Connection closed)
[06:28:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:28:21] *** califax- is now known as califax
[06:30:07] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:38:05] <ephemient> pfurla-matrix: BlockingQueue of size 1?
[06:38:42] <pfurla-matrix> ephemient: yeah, that's a good one, I might end up doing exactly that
[06:38:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:44:16] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[06:44:17] *** Quits: td_ (~td@muedsl-82-207-238-208.citykom.de) (Ping timeout: 256 seconds)
[06:45:55] *** Joins: td_ (~td@94.134.91.245)
[06:48:53] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[07:05:09] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[07:09:17] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 240 seconds)
[07:09:31] *** Quits: Adran (~adran@botters/adran) (Quit: Este é o fim.)
[07:10:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:11:08] *** Joins: zebrag (~chris@user/zebrag)
[07:11:29] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[07:11:33] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[07:12:01] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:05] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[07:12:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:13:14] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:39] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[07:16:17] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 240 seconds)
[07:16:54] *** Joins: Adran (adran@botters/adran)
[07:21:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[07:23:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:31:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:31:07] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[07:34:08] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[07:35:17] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:38:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:38:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:38:24] *** Joins: wroathe (~wroathe@user/wroathe)
[07:40:35] <justsomeguy> So, I was asking myself "How do you measure the complexity of an expression in the pure lambda calculus?", and came across some versions of the lambda calculus that have explicit rules about how to perform reductions, using rewrite rules, and also sometimes using annotations for when to share results of sub-expressions. Has anyone else recently looked into this stuff -- what do you think?
[07:41:31] <justsomeguy> (I don't really understand the subject, as you can tell, but I think the question is interesting, and it's neat to see so many approaches to coming up with and answer.)
[07:43:43] <justsomeguy> I mean, maybe I doesn't even make sense to ask how to measure a lambda expression unless I'm talking about a particular implementation of the lambda calculus.
[07:44:11] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[07:44:35] * justsomeguy brushes aside his half-baked theory questions and goes back to debugging his crummy hangman game.
[07:45:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:46:17] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[07:48:32] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[07:48:57] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[07:50:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[07:51:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:51:28] <c_wraith> there is some sort of notion of "steps required to reduce"
[07:51:41] <c_wraith> There's even theory on minimizing that - optimal evaluation.
[07:52:11] <c_wraith> (it turns out optimal evaluation isn't really optimal for computers most of the time - it's too expensive to figure out what the optimal approach is)
[07:55:54] <davean> Just doing it can be better than doing it well
[07:55:58] *** Joins: dolio (~dolio@130.44.130.54)
[07:55:58] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:56:16] *** Joins: img (~img@user/img)
[07:57:23] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Ping timeout: 256 seconds)
[07:59:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:59:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:59:29] *** Joins: wroathe (~wroathe@user/wroathe)
[08:00:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:b574:732d:3b12:8f10)
[08:02:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[08:02:42] <justsomeguy> I came across two cool resources... Someone linked to Barry Jay's Closure Calculus. There is also https://researchportal.bath.ac.uk/en/projects/typed-lambda-calculi-with-sharing-and-unsharing. I tried to summarize them, but realized I don't understand them well enought to do that.
[08:04:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:04:29] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:e0d9:54a6:eecc:ef77) (Remote host closed the connection)
[08:05:31] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:dc0a:b5a8:5147:7a4f)
[08:09:48] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[08:12:46] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[08:13:09] *** Joins: dut (~dut@user/dut)
[08:16:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[08:18:28] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[08:19:35] *** Parts: PigDude (~PigDude@159.203.16.199) ()
[08:20:41] <dsal> Trying out copilot.  It wrote this function for me:  `sortStringsByNumber = sortBy (compare `on` (read . head . words))`
[08:22:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[08:23:32] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 250 seconds)
[08:26:41] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:27:43] <dsal> I typed `doesThisHalt` and it just spat out a solution to the halting problem:  https://www.irccloud.com/pastebin/CnZCMWic/halting.hs
[08:27:56] <ephemient> sortOn f is supposedly better than sortBy (comparing f), isn't it? at least the docs say it has better performance
[08:29:09] <int-e> ephemient: it depends on whether f is cheap or expensive and a bit on how big the results of f are
[08:29:32] <int-e> (since sortOn will store those results while the list is being sorted)
[08:30:47] *** Quits: p3n (~p3n@217.198.124.246) (Quit: ZNC 1.8.2 - https://znc.in)
[08:31:03] *** Joins: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1)
[08:34:10] <g> sortBy (comparing snd) would be better than sortOn snd
[08:34:21] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[08:34:26] <g> Or any other record selector, for example
[08:39:01] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:39:34] *** Quits: vglfr (~vglfr@46.96.147.122) (Ping timeout: 250 seconds)
[08:41:08] <ephemient> sure. I expect sortOn is defined as something like map fst . sortBy (comparing snd) . map (id &&& f) so if sortOn snd were better than sortBy (comparing snd), it would be better to replace that, and again, and again… which would be absurd
[08:41:37] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[08:42:11] <ephemient> but in the case of f = read . head . words that copilot learned from somewhere, which would that be?
[08:42:23] <ephemient> although I guess that might require benchmarking to determine
[08:43:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:43:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:43:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:43:40] <ephemient> that `doesThisHalt` is… curious. what kind of code did copilot learn that from
[08:47:03] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[08:47:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:48:37] <dsal> It's interesting because it like, does something, I just don't know where `halt` comes from.  My first attempt to solve the halting problem, I let it create the signature which it decided should be `:: [Int] -> Bool` and then the implementation was `doesThisHalt xs = (length xs) == (length $ filter (==0) xs)`
[08:55:24] <int-e> does extended exposure to copilot lead to brain damage?
[08:55:54] <int-e> (these examples are pretty painful)
[08:57:15] <dsal> Haha.  Yeah.  The examples so far have been pretty terrible.
[08:58:05] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:00:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[09:03:59] <monochrom> Wait, does copilot guess from your meaningful function names?
[09:04:25] <monochrom> Is it like a marriage of GPT3 and genetic algorithms? >:)
[09:05:07] <monochrom> Does it understand "awesomeHaskellCompiler"? >:)
[09:05:09] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[09:10:40] <dsal> monochrom: I don't think it thinks that's supposed to do something:  `awesomeHaskellCompiler :: Compiler`
[09:11:11] <int-e> gruesomeHaskellCompiler (short... ah let's just leave it at the long version)
[09:11:41] <dsal> I changed it to a verb:  https://www.irccloud.com/pastebin/oFaoUzPE/compile.hs
[09:12:24] <EvanR> it is pitch black
[09:12:34] <monochrom> Haha wait am I seeing it outsourcing the job to ghc?
[09:12:34] <EvanR> you've been eaten by a gruesome haskell compiler
[09:12:55] <dsal> monochrom: Yeah, kind of cheating.
[09:12:59] <monochrom> This is smarter than most students :)
[09:13:02] <dsal> That's not the kind of cheating I'm trying to do.
[09:14:05] <monochrom> Sad to say it understands ExceptT and System.Process better than most querents in this channel!
[09:14:06] <int-e> dsal: what do you want? `compileHaskellCode _ = let _ = "todo" in fix error`
[09:14:55] <dsal> I wanted it to write hugs.
[09:16:00] <int-e> hugs are incompatible with current social distancing rules
[09:16:28] <monochrom> haha
[09:16:33] <dsal> I asked it to write me a function called "fixedPointOfFunction" and it came up with `fixedPointOfFunction :: (a -> a) -> a -> a; fixedPointOfFunction f x = let x' = f x in if x' == x then x' else fixedPointOfFunction f x'`
[09:17:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:23:58] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:24:07] <monochrom> That's not bad in the sense of fixed points in real analysis.
[09:24:50] <int-e> I have written that code, sans the overly polymorphic signature
[09:24:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[09:26:43] <int-e> and possibly cosmetic differences, including relying on ghc's opportunistic CSE: stabilize f x | x == f x = x | otherwise = stabilize f (f x)
[09:28:06] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:dc0a:b5a8:5147:7a4f) (Remote host closed the connection)
[09:29:45] *** Quits: ishutin (~ishutin@84-236-1-73.pool.digikabel.hu) (Ping timeout: 256 seconds)
[09:31:20] *** Joins: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu)
[09:31:55] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[09:32:26] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[09:34:17] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[09:34:53] <xerox> :t let g f x = maybe x (g f) (f x) in g -- reminds me of this
[09:34:54] <lambdabot> (a -> Maybe a) -> a -> a
[09:35:14] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[09:35:20] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:35:48] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[09:36:05] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[09:36:34] *** Joins: bliminse_ (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[09:36:45] <ephemient> > let fix f x = y where ys = iterate f x; (y, _):_ = dropWhile (uncurry (/=)) $ zip ys (tail ys) in fix cos 0 -- I vaguely remember something like this happening the other day but don't remember context
[09:36:46] <lambdabot>  0.7390851332151607
[09:36:55] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Ping timeout: 256 seconds)
[09:39:17] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[09:41:38] <dsal> GHCI doesn't bring symbols from :{ into scope.  Is this normal or am I doing something wrong (other than trying to use :{) ?
[09:42:32] <monochrom> Works for me.
[09:42:37] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[09:42:57] <monochrom> I entered "f x = x + 1" and "g x = f x + 1" between :{ and :}
[09:43:12] <monochrom> Outside, f 4 and g 4 give expected answers.
[09:43:48] <dsal> This ghci is kind of mangled for various reasons.  Oh, I have more than one computer.  This is the one that has the broken readline thing as well.
[09:44:28] <monochrom> That's one more moving parts thrown into the wrench or some mixed up metaphor, yeah. :)
[09:46:08] <dsal> The ghci from ghcup works.
[09:46:37] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[09:47:06] *** Joins: cheater (~Username@user/cheater)
[09:54:49] <dsal> I'm confused by this data-fix hylomorphism.  How does one use this?  `:: Functor f => (f b -> b) -> (a -> f a) -> a -> b`
[09:55:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[09:56:18] <dsal> It's supposed to be "anamorphism followed by catamorphism" so I guess the first function is the catamorphism and the second is the anamorphism.  But it looks like a ~ b.
[09:57:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:58:26] *** Joins: emf (~emf@2620:10d:c090:400::5:fe1a)
[09:59:25] <dsal> That's the same signature recursion-schemes uses.
[10:02:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:03:09] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[10:07:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:09:46] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[10:10:43] <dsal> I was thinking about going to be early a couple hours ago.  Maybe I'll do that instead.
[10:12:18] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[10:13:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[10:15:07] <c_wraith> dsal: works just fine when a is not the same type as b.  Though...  Uh...  It's a bit of a funny one.
[10:20:03] <prasad> :q
[10:20:14] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:21:04] *** Joins: _ht (~quassel@2a02:a468:b619:1:8a98:8031:2935:e3fc)
[10:24:40] <dsal> c_wraith: I'm going to try to understand it in The Future.  My `fold . unfoldr f` thing was easy to write, but I want to do sightly better
[10:29:56] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:30:32] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[10:31:03] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[10:34:21] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[10:35:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[10:35:55] *** Joins: alp (~alp@user/alp)
[10:37:00] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 250 seconds)
[10:40:45] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[10:44:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:44:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:44:08] *** Joins: wroathe (~wroathe@user/wroathe)
[10:44:22] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[10:44:49] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[10:44:59] *** Quits: cynomys (~cynomys@user/cynomys) (Remote host closed the connection)
[10:46:22] *** Joins: cfricke (~cfricke@user/cfricke)
[10:49:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[10:49:46] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:49:47] *** Joins: mbuf (~Shakthi@122.173.242.184)
[10:53:12] *** Joins: michalz (~michalz@185.246.204.37)
[10:53:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:55:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:57:32] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:00:21] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:3990:b270:fa9e:e455)
[11:02:14] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:02:37] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:71ea:518b:f248:7591)
[11:05:15] *** Joins: xsperry (~xs@user/xsperry)
[11:08:37] *** Quits: emf (~emf@2620:10d:c090:400::5:fe1a) (Ping timeout: 240 seconds)
[11:09:25] *** Joins: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr)
[11:09:25] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:45a2:92d3:66c6:d0a1)
[11:11:01] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[11:14:23] *** Joins: xsperry (~xs@user/xsperry)
[11:17:26] *** Joins: Chewt (~hayden@2601:1c0:8101:7310::144a)
[11:21:40] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[11:21:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[11:23:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:24:00] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:24:45] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[11:26:17] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[11:26:21] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[11:26:55] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:28:06] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:29:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:29:50] *** Joins: cosimone (~user@93-44-185-255.ip98.fastwebnet.it)
[11:31:10] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[11:34:26] *** Joins: xsperry (~xs@user/xsperry)
[11:36:05] *** Joins: vysn (~vysn@user/vysn)
[11:36:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:36:29] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:38:35] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:40:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:71ea:518b:f248:7591) (Ping timeout: 250 seconds)
[11:41:47] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:23a9:7efc:99f6:4072)
[11:42:49] *** Joins: chele (~chele@user/chele)
[11:44:57] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:46:20] *** Quits: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1) (Ping timeout: 250 seconds)
[11:46:49] *** Joins: p3n (~p3n@217.198.124.246)
[11:51:39] *** AlexNoo_ is now known as AlexNoo
[11:58:35] *** Joins: fef (~thedawn@user/thedawn)
[11:58:59] *** Joins: fendor (~fendor@77.119.167.8.wireless.dyn.drei.com)
[12:00:19] <dminuoso_> megaparsec question. Let's say I want to parse "foo" are separated by dots with a trailing dot. Naively I tried: thingBetween `sepBy1` chunk ".", but that cant parse `"foo.foo.", as megaparsec will rightfully expect a trailing "foo"
[12:00:56] <dminuoso_> I can of course parse this as: many (thingBetween <* chunk ".")
[12:01:19] <dminuoso_> Ah hold on.
[12:01:32] <dminuoso_> As I was writing the second part of it, I realized I simply need two completely separate parsers.
[12:01:41] <dminuoso_> Thanks for being a rubber duck.
[12:02:13] <tomsmeding> dminuoso_: many (thingBetween <* chunk ".") ?
[12:02:18] <tomsmeding> or some, perhaps
[12:02:38] <dminuoso_> tomsmeding: No my problem was I wanted to find a way to do both with a leading dot and without.
[12:02:58] <dminuoso_> But it means I must in one place use `many (thingBetween <* chunk ".")` and `thingBetween `sepBy1` chunk "."` for the other
[12:03:15] <dminuoso_> In attoparsec I merely used the latter, and it worked out just fine due to backtracking
[12:03:26] <tomsmeding> "separated by dots with a trailing dot" to me means a dot after each foo
[12:03:37] <dminuoso_> Sure
[12:04:50] <tomsmeding> but if you solved your own problem already don't listen to me :)
[12:05:13] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[12:05:26] <dminuoso_> Next up I should rewrite this parser with alex/happy.
[12:05:53] *** Joins: ubert1 (~Thunderbi@p200300ecdf09940ed781da24ea780c96.dip0.t-ipconnect.de)
[12:06:04] <dminuoso_> What's the minimal dependency footprint I can bring? Surely I can preexecute alex/happy and just ship the generated lexer/parser files right?
[12:06:52] <dminuoso_> https://github.com/glguy/config-value looks like it
[12:07:04] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[12:07:32] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[12:08:00] *** Quits: xff0x (~xff0x@2001:1a81:53ec:e00:db2b:9281:840d:9e3c) (Ping timeout: 250 seconds)
[12:08:20] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 268 seconds)
[12:09:04] *** Joins: xff0x (~xff0x@2001:1a81:53ec:e00:81a4:7fd8:2f5d:f55d)
[12:14:37] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:a803:7e6c:9fe5:13b9)
[12:15:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[12:16:24] *** Quits: gentauro (~gentauro@user/gentauro) (Quit: leaving)
[12:18:11] *** Joins: kuribas (~user@ptr-25vy0i9nxqs797laykw.18120a2.ip6.access.telenet.be)
[12:20:21] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:8844:e45a:1aab:92c2)
[12:23:13] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:45a2:92d3:66c6:d0a1) (Remote host closed the connection)
[12:24:18] *** Joins: gentauro (~gentauro@user/gentauro)
[12:25:36] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:5d8f:20db:5ddd:bcf4) (Ping timeout: 268 seconds)
[12:27:02] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Quit: Client limit exceeded: 20000)
[12:28:13] <tomsmeding> Axman6: I tried Data.Discrimination.Sorting.sort because I was curious, and it seems it's at roughly the same performance in my test as Data.List.sort
[12:28:21] <tomsmeding> though the quickcheck tests are MUCH slower for some reasons
[12:28:24] <tomsmeding> s/.$//
[12:28:27] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[12:28:35] <tomsmeding> like, taking 10x as long
[12:28:57] <tomsmeding> perhaps it has a higher constant factor for short lists? quickcheck only tests lists with lengths [0..99]
[12:29:16] <tomsmeding> Axman6: actually, not Data.List.sort, but quacksort lol
[12:31:22] *** Joins: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl)
[12:35:05] *** dminuoso_ is now known as dminuoso
[12:35:14] <c_wraith> quacksort?  Is that like a single pass of bubble sort?  "most lists are nearly sorted already, this will be fine!"
[12:35:31] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:35:59] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:36:07] *** Joins: xkuru (~xkuru@user/xkuru)
[12:36:42] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[12:37:49] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:39:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[12:39:35] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[12:39:48] <tomsmeding> c_wraith: something written by SrPx last night, bit of a simplistic mix of mergesort and quicksort
[12:40:16] <tomsmeding> and is slightly slower (~30%) than Data.List.sort in my tests, but I fixed a bug in their code in a really inefficient way
[12:40:34] <tomsmeding> c_wraith: https://paste.tomsmeding.com/RVS64Lfd
[12:41:07] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[12:42:47] <c_wraith> that's the fixed code?  That seems to have weird inefficiencies all over
[12:43:02] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[12:43:23] <tomsmeding> yeah that's the fixed code
[12:43:59] <tomsmeding> c_wraith: this was their original code https://gist.github.com/VictorTaelin/2a1cf354ea710f1eae1b6d15281813ca
[12:44:38] <tomsmeding> (the bug was that if the first element is maximal, all elements fall into one bucket and it loops infinitely)
[12:45:03] <c_wraith> why are you passing information into quack and place that is always derived exactly the same way from other parameters?
[12:45:15] <tomsmeding> yeah I dunno
[12:45:24] <tomsmeding> but I would expect ghc to optimise that one particular thing out
[12:45:39] *** Quits: dminuoso (~dminuoso@static.88-198-218-68.clients.your-server.de) (Changing host)
[12:45:39] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[12:45:57] <c_wraith> I care less about that and more about how it makes the code harder to read
[12:47:32] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:32] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:35] *** allbery_b is now known as geekosaur
[12:50:15] <tomsmeding> c_wraith: is quacksort2 here more readable? https://paste.tomsmeding.com/hyJfdqVt
[12:52:24] <c_wraith> a lot
[12:53:58] *** caro is now known as akhesacaro
[12:59:11] <c_wraith> also, that looks like it goes O(n^2) on inputs like [9,7,5,3,1,2,4,6,8,10]
[13:00:16] <tomsmeding> c_wraith: yeah, the naive pivot selection doesn't ensure n log n
[13:00:36] <tomsmeding> also the benchmark is on random lists, which is quite relevant to interpreting the results
[13:00:56] <c_wraith> Data.List.sort is O(n) on inputs like that.
[13:02:15] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[13:02:28] *** Quits: cosimone (~user@93-44-185-255.ip98.fastwebnet.it) (Remote host closed the connection)
[13:06:39] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:08:51] *** Joins: flipchan (~filip@user/flipchan)
[13:13:28] <tomsmeding> c_wraith: benchmarked against inputs like that ([1], [1,2], [3,1,2], [3,1,2,4], etc.), you get the desc-asc ones here: https://tomsmeding.com/f/sorting-comparison-criterion-1.html
[13:13:40] <tomsmeding> i.e. confirms your observation :p
[13:13:50] <tomsmeding> hint: click the x-axis on the overview chart to switch to log scale
[13:14:25] <c_wraith> that's a cool UI
[13:14:34] <tomsmeding> yeah, criterion is cool
[13:14:43] <c_wraith> I've never used its HTML output
[13:15:21] <tomsmeding> if you use criterion's defaultMain, just pass '-o out.html' to the executable
[13:15:29] <merijn> c_wraith: to be fair, O(n^2) worst case is accurate for quicksort :p
[13:15:42] <tomsmeding> merijn: not if you have a well-chosen pivot (which this one doesn't)
[13:15:53] <merijn> *insert my usual rant that the only thing quicksort has going for it is the marketing from it's name*
[13:17:03] <c_wraith> Oh.  Here's what I don't get about that algorithm.  The merge should always be doing (++)
[13:17:10] <tomsmeding> SrPx: https://tomsmeding.com/f/sorting-comparison-criterion-1.html -- also posting this to you in case you're interested
[13:17:32] <c_wraith> it's a quicksort with a slower string concatenation named "merge"
[13:18:24] <tomsmeding> that is correct lol
[13:18:49] <tomsmeding> doesn't do much to its benchmark time though
[13:18:56] <c_wraith> no, it's not much slower
[13:19:16] <c_wraith> chasing the pointers costs much more time than the comparisons
[13:20:01] <tomsmeding> much more, I'm only seeing a 1% improvement or something
[13:20:15] <tomsmeding> well, maybe 4%
[13:20:46] <c_wraith> did you actually verify the results are still sorted?
[13:20:59] <c_wraith> I might have analyzed it incorrectly!
[13:21:04] *** Joins: vglfr (~vglfr@88.155.70.5)
[13:21:30] <tomsmeding> quickcheck is okay with it
[13:21:48] <tomsmeding> which isn't a proof, but gives me pretty good confidence
[13:22:01] <c_wraith> yeah, sounds pretty good
[13:22:19] <tomsmeding> in case you're interested, combined chart: https://tomsmeding.com/f/sorting-comparison-criterion-2.html
[13:22:57] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[13:25:29] *** Quits: OscarH_ (~OscarH@90.201.86.195) (Ping timeout: 252 seconds)
[13:28:35] *** Quits: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5) (Quit: Konversation terminated!)
[13:28:40] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:b574:732d:3b12:8f10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:29:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:30:58] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[13:31:31] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:32:00] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:32:46] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:33:16] *** Joins: OscarH (~OscarH@2a02:c7f:a0da:ae00:ba27:ebff:fe84:d2f4)
[13:38:57] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:3990:b270:fa9e:e455) (Ping timeout: 240 seconds)
[13:39:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[13:40:40] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:41:06] *** Quits: michalz (~michalz@185.246.204.37) (Read error: No route to host)
[13:41:40] *** Joins: amk (~amk@109.255.169.126)
[13:42:17] *** Joins: michalz (~michalz@185.246.204.37)
[13:44:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Ping timeout: 240 seconds)
[13:44:17] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:491:83dc:6241:13db)
[13:46:22] *** Joins: cosimone (~user@93-44-185-255.ip98.fastwebnet.it)
[13:49:39] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[13:53:17] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[13:54:30] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[13:56:15] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:a803:7e6c:9fe5:13b9) (Ping timeout: 268 seconds)
[13:56:28] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[13:56:28] *** Quits: aeka (~aeka@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[13:56:40] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[13:57:57] *** Joins: aeka (~aeka@2606:6080:1001:18:8d41:9604:d435:36b6)
[13:58:37] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:00:59] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[14:01:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:01:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:01:56] *** Joins: wroathe (~wroathe@user/wroathe)
[14:04:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:05:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:06:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:07:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:16:17] *** Quits: davros (~davros@host86-184-180-214.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[14:17:37] *** Quits: vglfr (~vglfr@88.155.70.5) (Ping timeout: 256 seconds)
[14:19:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:19:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:21:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[14:21:29] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[14:24:47] <kuribas> If haskell is great because of its expressive typesystem, wouldn't idris be better, since the type level is just the language?
[14:25:17] <kuribas> types are just values, so expressing something in a type is as simple as expressing it in a value.
[14:25:32] <[exa]> it might be the delicate separation of the concerns that makes it great.
[14:26:11] <kuribas> haskell?
[14:26:18] <[exa]> yes
[14:26:29] <dminuoso> Mmm, is there any alex-mode for emacs?
[14:26:42] <kuribas> I am not even sure haskell is "great".
[14:27:15] <dminuoso> kuribas: Counter argument, haskell is great for simple things like highly reusable ADTs such as Maybe.
[14:27:39] <dminuoso> Simple and elegant ways to define and discriminate on ADTs is what I love most. :)
[14:27:41] <kuribas> dminuoso: you can have that with dependently typed languages?
[14:27:45] <dminuoso> Sure you can.
[14:27:51] <dminuoso> But I dont care for dependently typed things.
[14:27:53] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:27:57] <dminuoso> In fact, I dont leverage the type system much in Haskell
[14:28:26] <kuribas> dminuoso: how do you make a specification then?
[14:28:37] <kuribas> it's strictly separate from the code?
[14:28:47] <dminuoso> Mostly in tests 
[14:28:57] <dminuoso> Or completely separate, yes.
[14:28:58] *** Joins: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com)
[14:29:32] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[14:29:56] <dminuoso> I'd rather have our team able to work on my code, than be the sole maintainer with grand delusions about my code being bug-free.
[14:30:12] <dminuoso> It's just more productive this way :)
[14:30:18] <kuribas> bug-free or "correctness" is an illusion.
[14:30:26] <dminuoso> Indeed
[14:30:59] <kuribas> Most of that time you get a vague spec, which can be interpreted in many ways.
[14:32:20] <kuribas> more interesting is "consistent with itself and the rest of the system".
[14:32:44] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 250 seconds)
[14:33:11] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:34:13] <kuribas> IMO one of the primary benefits of DT can be to express the API spec in the code, and show it's consistent with the implementation.
[14:34:32] <kuribas> Like servant, but the spec can be just a value.
[14:35:01] <kuribas> you could even calculate the spec from another spec :)
[14:36:37] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[14:37:16] *** Joins: vglfr (~vglfr@88.155.70.5)
[14:37:16] <kuribas> Or for exampe to prove that your API matches the database schema.
[14:37:29] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[14:37:31] <kuribas> True you can do this in tests as well.
[14:37:41] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[14:39:58] *** Joins: ekai-zendo[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[14:44:34] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:45:35] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 268 seconds)
[14:47:16] *** Quits: dsrt^ (~dsrt@96-86-240-178-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[14:51:32] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[14:56:28] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:00:02] *** ekai-zendo[m] is now known as ekai[m]
[15:00:07] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[15:01:28] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[15:04:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:05:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:11:07] *** Joins: timmot (~timmot@207.148.85.201)
[15:12:03] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:12:48] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[15:13:14] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[15:18:19] <dminuoso> Servant stretches it quite far, honestly. Perhaps OpenAPI with a static code generator is ultimately the most pragmatic thing.
[15:18:38] <dminuoso> Especially if it could generate client/server stub code, similar to say CORBA IDL compilers
[15:19:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:19:50] <dminuoso> Fighting for servant to keep everything inside the type system makes it difficult to extend it. To implement custom combinators you need to have advanced type-level skills and work with large portions of mostly undocumented code.
[15:20:17] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:20:20] <dminuoso> And the diagnostics are quite poor as well - even generic servant suffers from various poor ergonomics.
[15:20:23] <dminuoso> Not to mention the performance impact.
[15:20:37] <dminuoso> We have a relatively small servant library, but compiling the servant glue code alone takes over 2 minutes here.
[15:21:42] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[15:22:17] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:25:03] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[15:28:37] *** Joins: vysn (~vysn@user/vysn)
[15:29:49] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:32:20] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[15:32:32] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:33:04] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[15:33:49] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[15:36:37] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[15:36:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:38:50] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:42:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:45:42] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[15:46:47] *** Joins: on^ (~on@96-86-240-178-static.hfc.comcastbusiness.net)
[15:49:20] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[15:56:05] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[15:56:30] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:01:32] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:02:44] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[16:04:39] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:09:49] *** Quits: HotblackDesiato_ (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[16:10:32] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:10:43] <dminuoso> tomsmeding: Hah I recall why I wanted it this way. So this is a domain label parser (which roughly just produces [String] for each label). I wanted to use: `(label `sepBy` chunk ".") <* chunk "."` as to neatly allow "." to be parsed.
[16:11:33] <dminuoso> The elegant form would be to rather to pretend that absolute domains are relative domains too, with the final label being empty
[16:11:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:12:03] <dminuoso> Which incidentally is the original intent in DNS
[16:12:10] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[16:12:21] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[16:13:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:14:24] *** Joins: __monty__ (~toonn@user/toonn)
[16:16:37] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:21:30] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[16:24:23] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[16:24:42] *** Joins: alp (~alp@user/alp)
[16:26:09] <tomsmeding> dminuoso: heh nice hack
[16:26:17] <tomsmeding> which, as you say, is not actually really a hack
[16:30:11] <dminuoso> Well it doesnt work with megaparsec anymore
[16:30:42] <dminuoso> Im kind of curious how to parse an absolute domain name representation into labels, turning "." into the empty list of labels
[16:31:10] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[16:33:00] <dminuoso> Of course I can special case this with the monadic power, where I first try and parse for `chunk "." *> eof`, and if that fails I fallback to the other logic
[16:33:21] <dminuoso> But I dislike having to waste those CPU cycles for an edge case nobody will ever use..
[16:34:33] <tomsmeding> dminuoso: many alphaNum `sepBy1` char '.', then filter on empties?
[16:34:42] <dminuoso> tomsmeding: That will fail.
[16:34:47] <tomsmeding> (parsec language, not megaparsec)
[16:34:53] <tomsmeding> counterexample?
[16:35:08] <dminuoso> Oh.
[16:35:10] <dminuoso> Mmm
[16:35:17] <dminuoso> tomsmeding: Yeah, so here comes the problem
[16:35:46] <dminuoso> tomsmeding: The label parser cannot be bootstrapped from `many`eable in my acse
[16:36:01] <dminuoso> Well, strictly speaking I could I guess.
[16:36:13] <tomsmeding> dminuoso: as long as it will never parse a dot, it's fine, right?
[16:36:20] <tomsmeding> can wrap it in 'optional' maybe
[16:37:28] <dminuoso> tomsmeding: So yeah, the ugly truth is domain name representations are not well defined, so strictly speaking I can admit whatever I want.
[16:37:36] <dminuoso> even a dot in principle is admissable
[16:37:43] <tomsmeding> that makes no sense
[16:37:43] <dminuoso> the wire protocol allows for dots inside a domain label
[16:38:09] <dminuoso> tomsmeding: what you read as `foo.bar.` is just a representation, and that representation is not standardized. equivalently, there's no such standardized input format.
[16:38:10] <tomsmeding> how is someone going to provide a domain name component containing a dot?
[16:38:17] <tomsmeding> right
[16:38:21] <dminuoso> that's for you to decide. maybe escape characters?
[16:38:25] <tomsmeding> :p
[16:38:37] <tomsmeding> or punycode
[16:38:45] <dminuoso> sure
[16:39:08] <dminuoso> I really want to do this with alex/happy, but they dont work on arbitrary bytestrings.
[16:39:10] <dminuoso> :(
[16:39:35] <dminuoso> Perhaps I should just use them, and simply forbid bytesequences outside the ASCII planes.
[16:39:44] <dminuoso> And then have the alex output turn the labels back into bytestrings
[16:39:48] <dminuoso> Or *happy rather
[16:40:41] <dminuoso> tomsmeding: So the problem with your `many` is that I cant allow arbitrary characters (for irrelevant reasons) unless I allow for escape cahracters
[16:40:42] <tomsmeding> dminuoso: I'm still not sure how exactly your envisioned grammar is different from "label `endBy` char '.'"
[16:41:00] <dminuoso> Uh hold on
[16:41:06] <dminuoso> Never seen endBy
[16:41:10] *** Joins: fendor_ (~fendor@77.119.174.56.wireless.dyn.drei.com)
[16:41:23] <tomsmeding> just one of the convenience combinators
[16:41:37] <tomsmeding> in parsec: endBy p sep = many (do{ x <- p; _ <- sep; return x })
[16:43:27] <dminuoso> tomsmeding: Oh hah I was thinking about it all wrong.
[16:43:36] *** Quits: fendor (~fendor@77.119.167.8.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[16:43:38] <dminuoso> absDomainLabelsP = DomainLabels <$> label `endBy` M.chunk "."
[16:43:39] <dminuoso> relDomainLabelsP = DomainLabels <$> label `sepBy` M.chunk "."
[16:43:41] <dminuoso> So simple..
[16:44:09] <dminuoso> Guess I should use `char` rather than `chunk` as well
[16:45:23] <tomsmeding> relOrAbsDomainLabelsP = DomainLabels <$> label `sepBy` M.char '.' <* optional (char '.')
[16:45:48] <tomsmeding> can even case on the optional result to know which one it is :)
[16:46:12] *** Quits: xff0x (~xff0x@2001:1a81:53ec:e00:81a4:7fd8:2f5d:f55d) (Ping timeout: 250 seconds)
[16:46:14] <dminuoso> For our use case we only ever care about absolute domains anyway
[16:46:22] <dminuoso> The other one is just added for completeness. :)
[16:47:17] *** Joins: xff0x (~xff0x@2001:1a81:53ec:e00:324f:b25a:5d11:7fc0)
[16:48:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[16:49:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:54:07] *** Joins: gaff (~gaff@49.207.213.209)
[16:54:28] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 268 seconds)
[16:54:28] *** Quits: Clint (~Clint@user/clint) (Ping timeout: 268 seconds)
[16:54:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:54:42] <dminuoso> tomsmeding: Mmm, the absDomainLabelsP still doesnt parse "."
[16:54:53] <dminuoso> But I understand why
[16:55:15] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:55:42] <gaff> does `read "0b11111111" :: Int` work if you set the "BinaryLiterals" extension?  when i tried, it throws an exception in GHCi.
[16:56:31] <tomsmeding> gaff: I think the BinaryLiterals extension just modifies the syntax that ghc accepts, it doesn't modify the semantics of any library functios
[16:57:13] <tomsmeding> imagine, if one file in your project has the extension on, and another file has not, would 'read' return two different things in both files? What if you call a function from the other file in one file, which in turn calls read? Madness!
[16:57:34] <dminuoso> tomsmeding: I have an evil cunning plan.
[16:57:43] <dminuoso> I will simply prepend a null byte to the original string, and then fixup the grammar
[16:57:56] <dminuoso> (well put it at the end I mean)
[16:57:58] <tomsmeding> dminuoso: how does your 'label' parser even look if you're considering this
[16:58:05] <gaff> tomsmeding: well, `read "0xFF00" :: Int` works ... so why not?
[16:58:17] <dminuoso> tomsmeding: absDomainLabelsP = DomainLabels <$> label `endBy` M.char (c2w '.') <* M.char 0
[16:58:20] <tomsmeding> dminuoso: also if you're putting it at the end anyway, what about replacing your detection of that null byte with 'eof'
[16:58:32] <dminuoso> Sorry hold on
[16:58:33] <tomsmeding> dminuoso: I meant 'label'
[16:58:34] <dminuoso> No I meant:
[16:58:43] <tomsmeding> gaff: because that has always worked :p
[16:58:55] <dminuoso> tomsmeding: I dont want to use the monadic power
[16:59:06] <tomsmeding> ah
[16:59:06] <dminuoso> my honor forbids it
[16:59:18] <tomsmeding> is there an actual practical reason you don't want to use it?
[16:59:23] <dminuoso> Not at all
[16:59:26] <tomsmeding> cool
[16:59:56] <tomsmeding> still, if you allow choice, then you probably had that null-byte recogniser in an alternative there; just replace that with 'eof'?
[16:59:57] <geekosaur> "Reading integers
[16:59:57] <geekosaur> GHC’s implementation of the Read class for integral types accepts hexadecimal and octal literals (the code in the Haskell 98 report doesn’t)."
[17:00:04] <dminuoso> If I had some formal education in grammar, I would probably just specify a grammar and then match the megaparsec to follow this
[17:00:08] <geekosaur> nothing about binary literals
[17:00:50] <gaff> geekosaur: i see ... so why have binary literals?
[17:00:59] <merijn> gaff: Why not?
[17:00:59] <tomsmeding> gaff: another way to look at this: 'read' doesn't parse haskell, it parses something that looks like a subset of haskell. By extension that means that if you add a language extensions that modifies ghc's understanding of "haskell", 'read' doesn't change.
[17:01:01] <dminuoso> geekosaur: Arguably, if GHC modifies what GHC accepts syntactically, the generated Read instances should be altered as well. :p
[17:01:03] <gaff> what's the extension for?
[17:01:03] <geekosaur> dunno, I didn't propose them
[17:01:09] <dminuoso> Of course that's completely unreasonable given the open-world assumption
[17:01:14] <merijn> gaff: For writing binary numbers as literals?
[17:01:14] <tomsmeding> % :set -XBinaryLiterals
[17:01:14] <yahb> tomsmeding: 
[17:01:16] <tomsmeding> % 0b1010
[17:01:17] <yahb> tomsmeding: 10
[17:01:17] *** Quits: xff0x (~xff0x@2001:1a81:53ec:e00:324f:b25a:5d11:7fc0) (Ping timeout: 240 seconds)
[17:01:39] <geekosaur> anyone can propose an extension to ghc
[17:01:52] <tomsmeding> dminuoso: see my argument about two modules having differing extension sets :p
[17:01:58] <merijn> I mean, wanting to write specific bit patterns is pretty common in programming. Especially when interfacing with binary file formats, network protocols, etc. the ability to directly write bit patterns is kinda convenient
[17:02:05] <geekosaur> it's more likely to be accepted if it includes an implementation
[17:02:06] <gaff> dminuoso: i agree with you what you said ... i don't understand the other side of the argument
[17:02:16] <dminuoso> tomsmeding: I think this is one of those cases where the extension isn't well suited for Haskell. There's clearly a strange and surprising interaction.
[17:02:29] *** Joins: xff0x (~xff0x@2001:1a81:53ec:e00:6733:4fa5:6e13:2687)
[17:02:30] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[17:02:58] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[17:03:07] <gaff> tomsmeding: by the way, your argument about extensions would all extensions
[17:03:10] <tomsmeding> evidently it is indeed surprising to some, which makes it surprising overall. Though I personally don't find it surprising that a language syntax modification doesn't change the behaviour of a library function :)
[17:03:13] <merijn> tbh, I think it's easier to just kill off Read
[17:03:21] <dminuoso> Read and Show both should be gone.
[17:03:26] <merijn> Read is just bad, besides moderate convenience benefit while writing
[17:03:29] <merijn> Show is fine I think
[17:03:34] <dminuoso> Show should use Text.
[17:03:41] <merijn> Most bad show instances are a result of people wanting to use Read :p
[17:03:46] <dminuoso> The amount of showT I use in my code base is absurd.
[17:03:59] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[17:04:02] <dminuoso> I use Show as poor mans pretty.
[17:06:13] <gaff> merijn: so writing bit pattersn is important, but reading them is not?
[17:06:44] <merijn> gaff: Dynamically modifying class instances (like Show) is an absolute nightmare idea. Ideally Haskell Prime (ahaha! Funny, I make it sound like that will ever happen) to include a bunch of the benign numeric literal extension into the report, making them standard, then updating Read to accept them
[17:07:06] <merijn> gaff: It is. But if you're using Read you're already messing up, so I don't particularly care about Read supporting them.
[17:07:25] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[17:07:26] <geekosaur> harder these days as modifying Read is libraries committee, not ghc committee, and libraries is much more conservative
[17:07:30] <merijn> I would actually argue Read not supporing them is "Good (TM)", since it'll hopefull deter people from thinking Read is a remotely sane choice
[17:07:46] *** Joins: frosky_ (~froskyarr@120.239.9.244)
[17:07:57] <kuribas> dminuoso: exactly, servant is painful because you have a different language at type level.
[17:08:10] <gaff> merijn: so instead of `Read`, what do you use?
[17:08:10] <kuribas> dminuoso: with DT, you could just do all this at value level.
[17:08:23] <merijn> gaff: (mega)parsec and attoparsec
[17:08:28] <gaff> ah
[17:08:34] <gaff> gee
[17:08:38] <dminuoso> kuribas: I think this is an equally bad here for this use case.
[17:08:47] <merijn> gaff: For "one of" numbers there's also the Numeric module in base
[17:08:52] <dminuoso> This type of problem is better suited to a domain specific language and code generation tools.
[17:08:54] <geekosaur> read uses a half-assed, slow, ambiguous (but then it tries to hide it) parser
[17:09:05] <kuribas> dminuoso: well, DT is kind of code generation.
[17:09:22] <tomsmeding> gaff: suppose I have one module A, that calls 'read "0b10". I have another module B that sets BinaryLiterals and also calls 'read "0b10"'. Furthermore, A defines a function 'foo' that itself calls 'read "0b10"', and B has a function 'bar' that calls A.foo . Should 'bar' succeed?
[17:09:33] <merijn> gaff: Which has readers for bin, oct, decimal, hex, and even custom versions
[17:09:39] <dminuoso> merijn: Im slowly thinking we should use less megaparsec and more alex/happy
[17:09:53] <dminuoso> Im slowly experiencing the wonders of these ancient and almost forgotten tools.
[17:10:00] <merijn> dminuoso: I don't think it's worth it for most human readable formats
[17:10:12] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-af23-4557-ff2b-bd76.res6.spectrum.com) (Remote host closed the connection)
[17:10:12] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (Read error: Connection reset by peer)
[17:10:15] <merijn> dminuoso: alex/happy are *great* if you have a grammar that's set in stone
[17:10:15] <dminuoso> Predictably high performance and acceptable diagnostics? Yes please.
[17:10:17] *** Quits: FroskyArr (~froskyarr@120.239.9.244) (Ping timeout: 240 seconds)
[17:10:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:10:33] <dminuoso> merijn: Maybe that's the problem, people not formally specifying grammars for what they want.
[17:10:34] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-2151-3d00-3640-3cd8.res6.spectrum.com)
[17:10:35] <merijn> Most time I write a parser in megaparsec, my grammar is *not* set in stone and kinda half-assed
[17:10:40] <gaff> merijn: yeah, i know.  but don't you think haskell should have a `Read`, a better one even if the current stuff has many things amiss?
[17:11:11] <dminuoso> merijn: Like, have you tried parsing markdown? What is the original markdown syntax even? Who knows, even the reference implementation is bugged with respect to their own examples.
[17:11:12] <merijn> gaff: The API of Read is just kinda bad for doing anything efficient. Read is *horribly* slow
[17:11:18] <kuribas> dminuoso: code generation is messy.
[17:11:20] <merijn> dminuoso: Markdown is just it's own hell
[17:11:27] <gaff> ok
[17:11:39] <merijn> dminuoso: I'm thinking more of "parsing output from my own programs"
[17:11:47] <dminuoso> gaff: Not to mention that Read has absolutely no diagnostics for when it doesnt parse.
[17:12:19] <gaff> dminuoso: i agree, but i am arguing for a "better" read.   
[17:12:19] <dminuoso> merijn: I tend to define interchange formats (say via JSON). So at least you have a kind of schema inside that.
[17:12:36] <merijn> dminuoso: Half of the time I'm using megaparsec to parse some ad hoc format my own code outputs somewhere else. Usually simple enough that a "proper grammar" is more work than necessary, but *not* using parser combinators would make the input really annoying to deal with
[17:13:55] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca)
[17:14:49] <gaff> thanks everyone
[17:14:56] *** Quits: gaff (~gaff@49.207.213.209) ()
[17:15:59] <merijn> In general I think the Numeric module is one of those base modules that is more obscure than it should be
[17:16:05] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[17:16:32] <geekosaur> yes
[17:16:39] <geekosaur> in several senses
[17:18:20] <dminuoso> Python definitely has an advantage with respect to easing beginners into solving immediate problems by giving them simple tools to parse and and process data.
[17:19:03] <dminuoso> Not that I prefer it, but from a beginners perspective I can see how Haskell might seem unwieldy when it's not even obvious and simple how to "take a file and process it" given just base.
[17:20:09] <merijn> Sure.
[17:20:30] <merijn> It's just one of those things where "what's easy for beginners" and "what is good long term" are not remotely the same
[17:24:41] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[17:25:04] *** Joins: deadmarshal (~deadmarsh@95.38.112.231)
[17:26:07] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[17:26:59] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:27:37] <maerwald> dminuoso: even as a non-beginner, it's confusing
[17:29:33] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[17:31:40] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[17:31:59] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:32:49] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[17:34:33] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[17:35:57] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[17:37:32] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca) (Ping timeout: 240 seconds)
[17:38:01] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:38:11] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[17:38:48] *** Quits: tubogram4 (~tubogram@user/tubogram) (Client Quit)
[17:42:48] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:43:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[17:43:29] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:45:31] *** Quits: tubogram4 (~tubogram@user/tubogram) (Client Quit)
[17:45:51] *** Joins: max22- (~maxime@2a01cb0883359800c869e03b4284e26a.ipv6.abo.wanadoo.fr)
[17:46:15] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:46:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:47:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Ping timeout: 240 seconds)
[17:47:18] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[17:48:49] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca)
[17:48:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[17:49:04] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:52:05] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.86)
[17:52:23] *** Quits: deadmarshal (~deadmarsh@95.38.112.231) (Ping timeout: 256 seconds)
[17:55:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:57:17] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[17:58:21] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:00:58] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[18:02:24] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:02:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:02:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:02:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:23] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[18:08:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:08:50] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[18:11:57] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[18:13:18] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[18:13:21] *** Quits: on^ (~on@96-86-240-178-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:15:37] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[18:16:24] <dminuoso> tomsmeding: https://gitlab.com/wobcom/haskell/dns-patterns/-/blob/master/lib/Network/DNS/Pattern.hs#L165-169
[18:16:29] <dminuoso> I decided to special case it after all.
[18:16:39] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[18:16:45] <dminuoso> I feel like this is still cheating, Im looking for something grammatically pleasing
[18:19:13] <tomsmeding> dminuoso: you can't get around branching on whether you have the root domain somehow, because you have to act differently depending on whether the input starts with a dot (root domain, nothing can come after) or not (non-root domain, must have a label then dot then etc.)
[18:19:34] <tomsmeding> the branch doesn't need lookahead though, so it's all good :)
[18:20:12] <dminuoso> tomsmeding: I can get around it if I employ my "append a nul byte" trick though.
[18:20:30] <tomsmeding> can you?
[18:21:07] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Read error: Connection reset by peer)
[18:22:13] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:22:19] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:24:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[18:25:15] *** Joins: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net)
[18:27:53] <dminuoso> tomsmeding: Yes, given that now my labels permit nul bytes
[18:28:05] <dminuoso> Or..
[18:28:07] <dminuoso> mmm.
[18:28:20] <tomsmeding> you'd need to _prepend_ a nul byte, right?
[18:28:32] <tomsmeding> that would work
[18:28:43] <tomsmeding> but I find that uglier than fixing the grammar, which is what you've done now
[18:28:46] <tomsmeding> but subjective
[18:28:46] <dminuoso> No it would not
[18:28:51] <dminuoso> Because I have to get that nul byte out again
[18:28:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:29:03] <tomsmeding> though you could do that with an fmap
[18:29:15] <dminuoso> an fmap1 really
[18:29:24] <tomsmeding> fmap1?
[18:29:30] <dminuoso> Sure, consider this input:
[18:29:40] * tomsmeding has a meeting now but will be back later and see your stuff
[18:29:43] <dminuoso> "\NUL."
[18:30:05] <dminuoso> If I prepend a \NUL, this ends up producing DomainLabels ["\NUL\NUL"]
[18:30:08] <dminuoso> And similarly:
[18:30:22] <dminuoso> "\NUL.\NUL. would produce DomainLabels ["\NUL\NUL", "\NUL"]
[18:30:36] <dminuoso> I cant just fmap over the result
[18:30:48] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:30:51] <dminuoso> I must only drop the first character on the first element
[18:31:10] <dminuoso> hence `fmap1` (which just maps over the first element)
[18:33:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:35:02] <sshine> oh, like 'fmap f (First xs)'? https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Monoid.html#t:First
[18:36:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:36:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:39:20] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:40:05] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:41:06] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[18:42:17] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[18:42:59] *** bliminse_ is now known as bliminse
[18:44:17] *** Quits: frosky_ (~froskyarr@120.239.9.244) (Ping timeout: 240 seconds)
[18:44:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:44:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:44:49] *** Joins: wroathe (~wroathe@user/wroathe)
[18:45:27] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:45:59] <kuribas> merijn: there should be a language which is easy for beginners, but also with clear semantics.
[18:46:14] <dminuoso> kuribas: golang is that.
[18:46:20] <dminuoso> It's probably part of its success story.
[18:46:44] <dminuoso> If only it had tools to write scalable software..
[18:47:20] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[18:49:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:49:26] *** Quits: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr) (Quit: leaving)
[18:49:48] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:52:04] <merijn> kuribas: I'm not sure that's possible, tbh
[19:00:24] *** Joins: gaff (~gaff@49.207.213.209)
[19:01:27] <gaff> someone suggested a few minutes back that `Numeric` module has function to read binary literals, but i don't see it there.
[19:02:26] <gaff> `readBin` not there in `Numeric`
[19:02:33] *** Joins: Clint (~Clint@user/clint)
[19:02:59] <merijn> https://hackage.haskell.org/package/base-4.16.0.0/docs/Numeric.html#v:readBin
[19:03:06] <merijn> Are you looking at the right version?
[19:04:27] <gaff> but it is not showing up on GHCi.  i am using 8.10.4
[19:04:47] <merijn> Ah, looks like it's fairly new
[19:05:03] <merijn> You can use readInt to make your own easily enough, though
[19:05:31] <gaff> merijn: it is fairly new
[19:05:53] <gaff> my base is 4.14, the link you have posted, the base version is 4.16
[19:05:56] <gaff> no wonder
[19:06:13] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[19:07:07] <gaff> merijn: thanks a bunch, anyway.  nice to know it exists in the future :)
[19:09:53] <geekosaur> why are you on 8.10.4 instead of 8.10.7? (although 8.10.7 still doesn't have readBin, it does have a number of bugfixes and Apple M1 support)
[19:10:26] <merijn> geekosaur: Inertia? :p
[19:10:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:10:48] <gaff> geekosaur: i am using an old macbook air laptop, so i am risking a newer version because of my OS.  
[19:11:13] <gaff> sorry, i am not risking a newer version because of my OS
[19:11:43] <gaff> thanks for the information anyway.
[19:11:45] <merijn> I mean, how old are we talking?
[19:12:06] <gaff> gee, 9 years old
[19:12:19] <gaff> nearly 10 years
[19:12:26] <merijn> oof, ok, that's more extreme than me :p
[19:12:39] <gaff> yeah, but it is going well
[19:12:53] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (Quit: Client limit exceeded: 20000)
[19:12:57] * geekosaur remembers his old macbook air
[19:13:08] <gaff> 8.10.4 GHC installation was a rollercoster .... so
[19:13:11] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[19:13:12] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:13:31] <geekosaur> battery eventually went kaput, held onto it for a while and then decided I was never going to use it again and ditched it
[19:14:07] <gaff> geekosaur: my battery holding well, though.  did change one 5 years back.
[19:16:53] <gaff> thnaks
[19:16:58] *** Quits: gaff (~gaff@49.207.213.209) ()
[19:18:15] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (Quit: Client limit exceeded: 20000)
[19:18:46] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Client limit exceeded: 20000)
[19:20:05] *** Joins: slack1256 (~slack1256@191.125.227.221)
[19:26:25] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[19:26:58] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[19:27:35] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[19:30:06] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Remote host closed the connection)
[19:30:30] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[19:39:24] *** Joins: Guest|81 (~Guest|81@49.37.170.120)
[19:39:43] *** Quits: Guest|81 (~Guest|81@49.37.170.120) (Client Quit)
[19:42:43] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.3)
[19:43:00] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[19:46:16] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:48:38] *** Quits: slack1256 (~slack1256@191.125.227.221) (Remote host closed the connection)
[19:50:29] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[19:54:24] *** Quits: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net) (Remote host closed the connection)
[19:54:53] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[19:55:22] *** Joins: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net)
[19:56:02] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[19:58:14] <tomsmeding> dminuoso: well you have to fmap (in the parser monad) fmap1 (on the list)
[19:58:15] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[19:58:27] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[19:58:45] <tomsmeding> I don't see how _appending_ \NUL would help with making this parse with less choice
[19:59:00] <tomsmeding> though maybe at this point I'm beating a dead horse :p
[19:59:12] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:23a9:7efc:99f6:4072) (Quit: WeeChat 2.8)
[19:59:28] *** Quits: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net) (Ping timeout: 250 seconds)
[19:59:52] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:00:30] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[20:01:34] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[20:02:01] *** Joins: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net)
[20:04:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:08:25] *** Joins: ShalokShalom (~ShalokSha@194-118-168-233.hdsl.highway.telekom.at)
[20:08:31] <ShalokShalom> hi there
[20:08:55] <ShalokShalom> I read about a new version of Haskell, that has a selection of extensions build in
[20:09:04] <ShalokShalom> What version is this?
[20:09:57] *** Joins: econo (uid147250@user/econo)
[20:10:31] <geekosaur> 9.2.1 has -XGHC2021 which turns on a selection of extensions. this extension is enabled by default
[20:11:01] <ShalokShalom> thanks a lot
[20:11:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[20:12:34] *** Quits: ShalokShalom (~ShalokSha@194-118-168-233.hdsl.highway.telekom.at) (Client Quit)
[20:13:28] *** Quits: mbuf (~Shakthi@122.173.242.184) (Quit: Leaving)
[20:15:02] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[20:17:36] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[20:18:08] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:18:18] *** Joins: Akiva (~Akiva@user/Akiva)
[20:19:49] *** Quits: o (~niko@libera/staff/niko) (Ping timeout: 633 seconds)
[20:19:50] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[20:21:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:22:00] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[20:24:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:27:23] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:29:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[20:31:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[20:32:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[20:34:29] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[20:35:06] <janus> is 9.0.2 more reliable than 9.2.1?
[20:35:19] <maerwald> probably
[20:37:05] <geekosaur> certainly more reliable on apple m1, because of late severe bugs found in the native codegen
[20:37:17] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 240 seconds)
[20:37:39] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Remote host closed the connection)
[20:37:55] *** Joins: zebrag (~chris@user/zebrag)
[20:38:04] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[20:41:46] <c_wraith> It probably still has a lot of the 9.0 new-feature bugs (as opposed to regressions) that 9.2 fixed, though.
[20:42:14] <ephemient> would ghc-9.2.1 with -fllvm be better than 9.0.2 then? (I don't have an M1, just curious)
[20:42:16] <c_wraith> If you're not looking for bleeding edge stuff, it's definitely the right choice.
[20:43:01] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:43:30] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:44:38] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[20:44:45] <geekosaur> -fllvm is not generally recommended for any platform but apple m1s. the codegen bugs in 9.2.1 only affect m1s
[20:47:43] <janus> c_wraith: which is definitely the right choice? you seem affirmative but that is inconsistent with ephemient's question
[20:49:34] <EvanR> to quickly reload a haskell "file", module, that has changed and say use the new version of some top level data value there, would mueval work?
[20:49:41] <EvanR> some kind of eval solution
[20:49:50] <geekosaur> 9.0.2 is most recently released and fixes the bugs in 9.0.1. 9.2.1 has several bugs but all of them are in new features in the 9.2 series, so unloess you need those features I'd stick with 9.0.2 or even 8.10.7
[20:50:18] <geekosaur> (lots of people have not upgraded from 8.10.7 yet)
[20:51:33] <sclv> with m1 its sort of a bad story all round in my experience. i couldn't get the llvm stuff working right, but also afaik its the only option.
[20:51:34] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[20:52:27] <sclv> that said, i'm using an m1 and 9.2.1 without llvm because i'm developing and not deploying, so i can live with buggy codegen for a smooth dev experience at the moment :-P
[20:52:56] *** Quits: imalsogreg (~imalsogre@c-73-133-206-117.hsd1.md.comcast.net) (Remote host closed the connection)
[20:53:03] <c_wraith> janus: I meant 9.0.2 is right unless you need bleeding-edge features that work better (or only exist) in 9.2
[20:53:59] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[20:54:31] <janus> sclv: do you expect these issues to be resolved by 9.2.2?
[20:54:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:55:20] *** Joins: emf (~emf@2601:602:9400:8f0:435:b386:5ad4:6eb2)
[20:55:33] <geekosaur> that's the plan. although they intended to release 9.2.2 by the end of the month, and that's fast approaching :(
[20:56:21] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[20:57:07] <c_wraith> hackage has finally mostly caught up with 9.2
[20:57:19] <janus> Olkiluoto 3 is also supposed to be grid-connected at the end of this month :O bad omen o_O
[20:57:27] <geekosaur> stackage hasn't though
[20:57:40] <geekosaur> lts is still 8.10.7, nightly 9.0.2
[20:58:14] <janus> gonna be exciting to see when the first ghc9 lts will come, i don't really understand the decision process
[20:58:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[20:58:46] <c_wraith> It's almost certain there won't be a 9.x LTS until at least 9.2.2
[20:59:16] <janus> oh, why? nightly has 3k packages, seems all right
[21:00:09] <c_wraith> wanting to wait for features to stabilize more than in 9.0, and codegen to stabilize more than in 9.2.1
[21:01:04] <janus> seems super subjetive, i don't understand how this is even measured
[21:01:30] <janus> i must be blessed since i am not having problems on 9.0
[21:01:39] <geekosaur> is there even an objective measure relevant to stackage?
[21:02:32] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Quit: Leaving)
[21:02:35] <EvanR> ah mueval seems to be totally sandboxed... is there no way to get at the value that the string represents for the host's purposes
[21:02:43] <geekosaur> also one relevant issue for 9.x is there is no hls support for either 9.0.2 or 9.2.1 yet, and they're having trouble with that support if I understood discussion in #ghc yesterday correctly
[21:02:49] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[21:03:24] <geekosaur> EvanR, even ghc-api is boxed for that purpose
[21:03:51] <geekosaur> there are ways to force reloading but they're not easy. most of the easy mechanisms create a completely independent "session"
[21:03:54] <janus> when lts-18 was released, amazing m1 support and hls support was not a requirement. i don't think it is totally logical that it now would be
[21:04:22] <leibniz> how do i uninstall haskell
[21:04:23] <leibniz> ?
[21:04:44] <janus> aaargh is it you, fog?
[21:04:56] <geekosaur> if you installed it via your package manager, use your package manager. if you installed via ghcup, use ghcup
[21:05:04] <EvanR> ghc-api...
[21:05:27] <maerwald> leibniz: windows?
[21:05:47] <leibniz> maerwald: yup
[21:05:54] <maerwald> leibniz: I have a video for you lol
[21:06:08] <maerwald> https://www.youtube.com/watch?v=bB4fmQiUYPw&t=152s
[21:06:41] <leibniz> its titled "install" but i want "unistall" it has this also?
[21:06:45] <maerwald> yes
[21:06:53] <leibniz> ok thanks
[21:07:23] <leibniz> janus: is it important?
[21:07:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[21:07:56] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[21:08:25] <janus> yes, because a lot of people have already lost confidence in fog, and they deserve to know that they are now spending their time with the same person (with a new name)
[21:09:13] <leibniz> ah, right, it *is* important
[21:09:29] <leibniz> so its a lifetime deplatforming?
[21:09:35] <leibniz> and an associated dox
[21:09:37] <leibniz> !?
[21:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:09:48] <leibniz> and this is community ethos!?
[21:10:53] <EvanR> so ghc API is how mueval, plugins library, all these hot code live code thingies work?
[21:11:08] <leibniz> are you trying to encourage a form of communication, whereby even if i *associate* with my past code, that other comunity members will start a "pile on" (actually now an *illigal* form of cyberbullying)
[21:11:23] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:4001:9094:16f1:84ab)
[21:11:50] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[21:11:53] <c_wraith> janus: well, I've got a sample bit of code that works really nicely on ghc 9.2 but gives "sorry, we didn't implement that yet" errors on GHC 9.0.2 :P
[21:12:11] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:12:19] <leibniz> because if your trying to make that part of the haskell communities standard response to *people*, i would strongly discourage that
[21:13:04] <leibniz> there have been numerous instances of people accusing each other of being bots, etc.
[21:13:11] <leibniz> haskell has no place for this behaviour
[21:13:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:13:19] <maerwald> leibniz: did you manage to uninstall?
[21:13:53] <leibniz> i was slightly perturbed, will try to watch the video again. apologies
[21:16:10] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:16:25] <leibniz> maerwald: its not clear that if the previous install was not via ghcup, that this install script would work. do you know if thats the case?
[21:16:57] <maerwald> leibniz: do you have the uninstall script?
[21:17:40] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:18:59] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:19:38] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.3)
[21:20:25] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[21:20:37] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:21:34] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-2151-3d00-3640-3cd8.res6.spectrum.com) (Remote host closed the connection)
[21:21:58] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-b30f-c0b6-681c-4c69.res6.spectrum.com)
[21:24:48] <EvanR> System.Eval.Haskell> xy <- eval @((),Char,Bool) "((), 'c', True)" []
[21:24:59] <EvanR> <command line>: cannot satisfy -package plugins
[21:25:01] <EvanR> so close xD
[21:25:10] *** Quits: thevishy (~Nishant@2405:201:f005:c007:39ad:8b3b:de67:f2a2) (Quit: Leaving)
[21:26:29] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[21:27:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:28:32] *** Joins: zebrag (~chris@user/zebrag)
[21:28:39] <leibniz> maerwald: its busy installing some ancient version of ghc and complaining about not being on the path
[21:28:54] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:28:56] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:29:58] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:491:83dc:6241:13db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:31:26] <[exa]> how much ancient btw?
[21:31:34] <leibniz> 8.10
[21:31:46] <leibniz> i had 9.2 before
[21:31:48] <[exa]> that's not that bad
[21:32:02] <EvanR> https://i.imgur.com/urwQYaR.png
[21:32:07] <leibniz> i think there is a breaking change though, i was using the new records dot syntax
[21:32:20] <EvanR> I'm on 8.10.7
[21:32:25] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:32:35] <EvanR> I don't hate it
[21:32:36] <leibniz> speaking of new features, has anyone had a chance to experiment with linear types much yet?
[21:32:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[21:33:46] <maerwald> leibniz: I don't understand. I thought you want to uninstall
[21:33:48] <leibniz> hmm, the uninstall script didnt unistall the old version
[21:33:49] <[exa]> hm the OverloadedRecordDot might be there since 9.2, yes
[21:33:50] <maerwald> now you're installing?
[21:34:16] <leibniz> thats how you get the uninstall script according to the video
[21:34:21] <maerwald> lol
[21:34:30] <leibniz> i ran the script, and it just removed the ghcup version
[21:34:32] <leibniz> not much good
[21:34:39] <maerwald> xD
[21:34:45] <[exa]> I'd delete it manually tbh
[21:34:53] <leibniz> seems that way
[21:35:10] <[exa]> on windows that's the safest way anyway
[21:35:12] <leibniz> im just not sure how it points to the appdata local repo or wherever it puts all the packages
[21:35:18] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:35:22] <EvanR> I see plugins is old enough that it doesn't understand how cabal works anymore
[21:35:32] <leibniz> like which cabal and which ghc it uses has always been a total mystery
[21:36:09] <leibniz> wasnt there some kind of sandbox thing?
[21:36:25] <leibniz> i dont want to have to resort to stack for everything
[21:36:43] <EvanR> I still don't have stack
[21:36:47] <EvanR> for anything
[21:36:57] <leibniz> but cabal keeps breaking
[21:37:00] <EvanR> ?
[21:37:05] <EvanR> not for me
[21:37:29] <leibniz> probably you dont accidently do terrible things like unregistering base
[21:37:38] <sclv> don't worry about uninstalling.
[21:37:44] <sclv> just install a new fresh clean version, full stop
[21:37:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:37:53] <sclv> and make sure your path points to it, done
[21:39:39] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[21:39:43] <leibniz> ahh, ok, now i see some environemtal variables like CABAL_DIR and appdata\cabal\roaming\bin on path
[21:40:11] <leibniz> i guess i could just go to each of these locations and delete everything
[21:40:29] <EvanR> I don't need to unregister base since I only use things in cabal isolation
[21:40:30] <leibniz> i wouldnt want anything it could end up somehow splicing into a newer build
[21:40:57] <leibniz> EvanR even v2 commands nolonger work, everything is totally broken. idk how
[21:41:12] <c_wraith> probably because of a belief in uninstalling things
[21:41:28] <leibniz> this is what i was thinking. that i would have to reinstall windows
[21:41:32] <EvanR> actually, haskell was the only thing I really had working on windows before I got on this linux lifeboat a few months back
[21:41:44] <EvanR> uninstall windows xD
[21:42:02] <leibniz> EvanR: same. haskell forces me to reinstall windows so regularly that no other programs survive
[21:42:04] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[21:42:23] <leibniz> good language!
[21:42:38] <EvanR> why would haskell force you to reinstall windows, I dare ask
[21:42:49] <leibniz> c_wraith 18:11:13
[21:42:49] <leibniz> probably because of a belief in uninstalling things
[21:42:54] <leibniz> this kind of logic^
[21:43:01] <monochrom> For the record, other windows users don't feel forced to reinstall windows for haskell.
[21:43:13] <leibniz> i cant safely ensure i dodnt delete everything that could cause something to go wrong
[21:43:30] <leibniz> so its like, one wrong cabal command from total OS disruption
[21:43:36] <EvanR> um
[21:43:49] <leibniz> monochrom: probably they dont refuse to use v2 because they are unable to read
[21:44:16] <leibniz> if there was a "clean reinstall" thing... but i guess thats what stack is for
[21:44:25] <leibniz> but whenever i mention stack people are like "pah"
[21:45:12] <leibniz> basically, i think probably if i really carfully see anything haskell related on path, and delete it.. but by that time its easier just to reinstall windows
[21:47:03] <leibniz> i guess the problem is the ghc team do things like ghcup so they can ensure the install can be reversed. but the chocolatey toolchain is advised via the haskell platform - it should be uninstallable
[21:47:04] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (K-Lined)
[21:47:17] <leibniz> like, its not as if it were obtained in a totally untoward way
[21:47:23] <maerwald> leibniz: chocolatey has a uninstall method
[21:47:27] <sclv> https://docs.chocolatey.org/en-us/choco/commands/uninstall
[21:47:28] <leibniz> aha!!
[21:47:30] <leibniz> nice
[21:47:39] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:48:20] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:49:42] <maerwald> it's a little annoying, because there's a uninstall order to follow
[21:50:26] <leibniz> hmm, google nolonger sends me to the choco install section when i search for haskell platform
[21:50:31] <leibniz> now i find ghcup
[21:50:40] <sm> I don't say pah leibniz . stack has always been great at windows support
[21:50:54] <leibniz> +1
[21:51:25] <leibniz> well, if they are going to advise users go via ghcup from now on, then i shouldnt be using chocolatey anymore i guess
[21:51:46] <leibniz> so if i just reinstall windows and use ghcup from now on at least if i break anything i can reinstall everything easily
[21:51:47] <maerwald> not sure stack has a uninstaller though on windows?
[21:51:52] <leibniz> stupid v1 conflicts
[21:52:14] <leibniz> i cant find how to unsintall via chocolatey
[21:52:32] <leibniz> neither choco unisntall haskell, or choco unisntall haskell-platform work
[21:52:47] <maerwald> try 'choco uninstall cabal' first
[21:53:06] <leibniz> yeah that works
[21:53:15] <leibniz> and then ghc?
[21:53:19] <maerwald> yeah
[21:53:24] <maerwald> that's what I said with uninstall order
[21:53:31] <leibniz> actually, maybe i dont need to uninstall ghc
[21:53:50] <maerwald> well, good luck having multiple tools install ghc
[21:53:58] <leibniz> Unable to uninstall 'cabal 3.6.2.0' because 'ghc 9.2.1, haskell-dev 0.0.1' depend on it
[21:54:06] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[21:54:08] <maerwald> yeah, uninstall ghc first
[21:54:10] <maerwald> :D
[21:54:38] <maerwald> chocolatey is really not great at usability
[21:54:46] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:54:58] <leibniz> haskell-dev first, then ghc, then cabal, seems to work
[21:55:08] <leibniz> (uninstall order)
[21:55:41] <EvanR> once I used ghcup on windows, everything worked much better. Now I'm using ghcup on ubuntu
[21:55:57] <EvanR> I also use it on osx
[21:56:01] <EvanR> full house
[21:56:04] <leibniz> so now that i have managed to unistall via chocolatey, should i reinstall there too?
[21:56:15] <leibniz> seems to get the more up to dat ghc version
[21:57:22] <leibniz> EvanR: ok fine, if thats the way to go ill just do that
[21:57:30] <leibniz> how to make it get the 9.2.2 though?
[21:57:42] <EvanR> the UI lets you select ghc version
[21:57:44] <maerwald> 9.2.2?
[21:58:02] <leibniz> erp, 9.2.1
[21:58:07] <maerwald> EvanR: there's no TUI in windows :(
[21:58:24] <EvanR> ah, however it lets you select
[21:58:29] <maerwald> leibniz: after installation, open a powershell user session and type 'ghcup install ghc latest'
[21:59:30] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (Quit: ZNC - http://znc.in)
[21:59:36] <leibniz> the installation get a ghc though, and it takes ages
[21:59:43] <leibniz> cant i get ghcup without?
[21:59:45] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:00:00] <maerwald> yeah
[22:00:01] <leibniz> https://www.haskell.org/ghcup/
[22:00:08] <maerwald> you can
[22:00:08] <leibniz> im pasting that into powershell
[22:00:49] <leibniz> hmm, but i ran the unistaller and it unistalled everything
[22:01:03] <leibniz> now i dont have ghcup andymore, and that command installed a ghc last time i ran it
[22:01:10] <leibniz> so how can i?
[22:01:10] <maerwald> wait a second
[22:01:30] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[22:01:47] *** Joins: Ram-Z (Ram-Z@2a01:7e01::f03c:91ff:fe57:d2df)
[22:02:03] <maerwald> Set-ExecutionPolicy Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;Invoke-Command -ScriptBlock ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1 -UseBasicParsing))) -ArgumentList $true, $true
[22:02:05] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[22:02:18] <maerwald> note the additional ", $true" at the end
[22:02:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[22:02:40] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:02:56] <leibniz> what does that do?
[22:03:14] <maerwald> that will make it just install ghcup and nothing else
[22:03:20] <maerwald> so you decide after installation what to install
[22:03:30] <maerwald> see https://www.haskell.org/ghcup/guide/#basic-usage
[22:03:50] <leibniz> this is some dark art
[22:03:56] <leibniz> this extra true flag
[22:04:03] <leibniz> totally obscure
[22:04:05] <maerwald> windows powershell makes it extra hard
[22:04:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:04:18] <maerwald> there's no other sane way to do this in a single command
[22:04:27] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (Quit: Client limit exceeded: 20000)
[22:04:32] <leibniz> choco install ghcup would be good!
[22:04:47] *** Joins: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489)
[22:04:54] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:04:58] <geekosaur> seems a bit weird to me, using an installer to install an installer
[22:05:44] <leibniz> ah yeah i guess, to get chocolatey its;
[22:05:46] <leibniz> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
[22:05:50] <EvanR> if you start with neither, if you could conceptually run them on each other to form a yinyang of hypothetical GHCs
[22:05:54] <leibniz> same gibberish
[22:05:59] <maerwald> yeah
[22:06:17] <leibniz> to get python i type pythin in the microsoft store
[22:06:23] <leibniz> python*
[22:06:35] <leibniz> its gets pip and everything which you used to have to do seperately in windows
[22:06:44] <leibniz> they seem to have used the store to their advantage
[22:07:00] <maerwald> well, how do you get stuff into the windows store?
[22:07:02] <EvanR> you didn't want to get ghcup and ghc at the same time, you wanted to do it separately
[22:07:28] <leibniz> maerwald: idk, cross compile it to android, put it on the play store and then migrate it!?!?
[22:07:39] <leibniz> might be an easier way...
[22:07:44] <geekosaur> I'm glad I'm not the only one who makes that typo ("pythin")
[22:07:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[22:08:13] <maerwald> android?
[22:08:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:08:22] <maerwald> ok, I'll pass
[22:08:34] <leibniz> EvanR: i guess whatever .msi installer the store runs behind the scenes could basically just get ghcup and then use it to get ghc and cabal and stack
[22:08:42] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[22:08:50] <EvanR> pythin, son of python, son of pythong, son of cnut
[22:08:52] <leibniz> maerwald: i mean, it would be cool to know how to do that
[22:08:53] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[22:09:19] <leibniz> for the monitization
[22:09:41] <leibniz> probably if i had been able to publish to the play store i would have long ago escaped this compiler hell
[22:09:44] <polyphem> maybe reinstall of windows store helps ...
[22:09:49] <leibniz> lol
[22:10:19] <EvanR> I don't lose sleep over ghc not having a .msi install experience
[22:10:29] *** Joins: neceve (~quassel@2.26.93.228)
[22:10:48] *** Joins: Ocelot (~ocelot@50-78-208-189-static.hfc.comcastbusiness.net)
[22:10:50] <maerwald> to publish on windows store you first need to obtain a developer certificate and pay for it
[22:10:50] <leibniz> it used to though, the regression seems ominous, as if they are actually *losing* personel
[22:11:17] <leibniz> maerwald: probably they have a python foundation or something
[22:11:25] <maerwald> and then you pay for a developer account at MS store too
[22:11:28] <EvanR> I guess I'm lucky not having most of my time occupied with installing and uninstalling things
[22:11:46] <leibniz> wierd how MS research cant even afford a MS publishers account...
[22:11:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[22:12:01] <leibniz> youd think they would fund themselves or something
[22:12:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[22:12:42] <leibniz> EvanR: yes, that
[22:13:23] <leibniz> i can remember spending hours with msys, mingw and cygwin, trying to build unix things before they finally made wsl
[22:13:34] <EvanR> on the uninstall front, I've had success just deleting a directory and if I had added env vars at some point, undoing that
[22:13:54] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[22:14:18] <maerwald> given that HF is so excited about windows... maybe they should start creating a dev accounts on MS store and obtain signing certificates
[22:14:31] *** Joins: nvmd (~nvmd@user/nvmd)
[22:14:50] <maerwald> and talk to python foundation on how they managed to do that
[22:14:54] <EvanR> in before visual studio includes haskell as one of the new project options? xD
[22:15:23] <EvanR> haskellution
[22:15:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:15:26] <polyphem> leibnitz: you said your windows is "clean" apart from ghc , and you have lots of experience with unix-tools , why dont install linux and use ghcup in there, would make abetter dev experience ?
[22:15:33] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:15:58] <leibniz> i have an install on wsl too
[22:16:04] <leibniz> there is slight latency
[22:16:10] <leibniz> i prefer to use the native version
[22:16:16] <leibniz> also it has issues with the path
[22:16:26] <leibniz> backslashes in particular
[22:16:53] <polyphem> switch to a real linux ... i mean
[22:17:02] <leibniz> i had a script that pplaced things onto the /mnt/c/usr/home directory, so it could use a nix install which required wsl
[22:17:11] <leibniz> but it would be way better if nix just worked on windows
[22:17:26] <leibniz> polyphem: i think your missing the point
[22:17:44] <leibniz> it needs to work for users, so they dont have to abandon their chosen OS!
[22:17:46] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:17:46] <polyphem> leibniz: i think you are missing the point 
[22:17:56] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:18:07] <leibniz> sure
[22:18:33] <polyphem> seems like your chosen Os gives you headache ...
[22:18:38] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[22:19:18] <leibniz> listen, at the point where the community of a language starts accusing the worlds most common opperating system of being the problem in their toolchain, i think that is the point where that language begins to seem stupid to the rest of the world. this is not ok.
[22:19:30] <yushyin> polyphem: but don't force linux on anyone ...
[22:19:38] *** Quits: ubert1 (~Thunderbi@p200300ecdf09940ed781da24ea780c96.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:19:49] <leibniz> haskell on windows has never been bad
[22:19:58] <sm> leibniz, you're right. It does seem like a thing the HF could and probably will invest in
[22:20:01] <leibniz> unix libs on windows are another issue entierly!
[22:20:13] <geekosaur> polyphem, to be fair ghc's windows story is kinda atrocious. mingw is a hack to try to pretend windows is a unixlike
[22:20:28] *** Joins: matijja (~matijja@193.77.181.201)
[22:20:35] <leibniz> but now i can just use wsl for things like cblas, so its fine
[22:20:42] <leibniz> windows, again, to the rescue
[22:20:59] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[22:21:01] <geekosaur> (iirc the haskell foundation wants to hire someone to improve things there)
[22:21:02] <leibniz> "oh just use bare metal linux" - really though, why?
[22:21:23] *** Quits: quintasan (~quassel@quintasan.pl) (Quit: quintasan)
[22:21:36] <leibniz> wsl is fine, only sligt latency, and just for things like nix pushes to amazon servers, where the slight latency is no issue
[22:21:40] <yushyin> wsl(2) is a misnomer, it's not a subsystem anymore
[22:21:43] <geekosaur> I use bare metal linux because I've been using unixes since 1981. it's still a lousy experience for most people though
[22:21:53] <polyphem> i heard that leibniz's interest involve haskell and unix-tools and i think he had less headache if he would use a real linux , especially since he stated that his current windos is "clean2 ...
[22:22:02] <leibniz> maybe for blas opperations its not so great though, i dont want to have to train nets through an OS latency
[22:22:14] <leibniz> hmm, maybe a bare metal linux wouldnt actually be a bad idea
[22:23:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:23:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:23:07] *** Joins: wroathe (~wroathe@user/wroathe)
[22:23:42] <leibniz> polyphem: well, since the choco tools are actually capable of an unistall, and now i have ghcup, maybe i wont need to keep reinstalling windows, and can actually have other apps!
[22:23:56] <geekosaur> I man, I ran Mac for years so I could get the power of unix with a UX that didn't make me want to kill myself
[22:24:12] <geekosaur> *I mean
[22:24:13] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:24:46] <sm> I really don't think you ever need to be reinstalling windows for haskell. Just learn a little more about where things are
[22:25:02] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:25:05] <leibniz> its wierd, the girl upstairs started laughing just as you mentioned suicidal ideations resulting from being an essential dev in fundamentally important technology
[22:25:20] <leibniz> now she is banging at the floor angrily, id better go
[22:25:51] <Ocelot> Godspeed.
[22:26:57] *** Quits: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[22:27:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:27:58] <EvanR> alright, so ghc API is a rabbit hole but potentially powerful
[22:28:18] <EvanR> I guess that's potentially redundant
[22:29:22] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[22:29:29] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[22:29:52] *** Joins: nunggu (~q@user/nunggu)
[22:29:55] <monochrom> No, there are many powerless rabbit holes :)
[22:30:13] <monochrom> And many powerful non-holes.
[22:30:46] <monochrom> A powerful drill is a powerful co-hole, for example >:)
[22:31:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:31:55] *** Joins: lispy (~lispy4@84.69.59.93)
[22:31:58] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:32:27] <EvanR> >There is a similar problem for plugins. If a module uses a plugin then depending on the ABI of a plugin is usually not enough. Modules defining plugins expose one identifier plugin :: Plugin and so the ABI does not often change.
[22:32:59] <maerwald[m]> nix on windows? Like... the worst of both worlds?
[22:33:01] <EvanR> is this talking about dynamically loaded modules, or compiler plugins
[22:33:16] <geekosaur> that sounds like compiler plugin abi
[22:33:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:33:44] <EvanR> oof
[22:33:47] *** Joins: quintasan (~quassel@quintasan.pl)
[22:33:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[22:34:03] *** Joins: mixfix41 (~homefame@user/mixfix41)
[22:34:22] <EvanR> come on haskell pretend to be a dynamic language
[22:34:43] <monochrom> @quote monochrom hugs
[22:34:43] <lambdabot> No quotes match. My mind is going. I can feel it.
[22:34:48] <monochrom> ugh
[22:34:49] <geekosaur> if you want module plugins you probably want https://hackage.haskell.org/package/plugins
[22:35:01] <EvanR> I've been messing with that for the last few hours
[22:35:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:35:07] <geekosaur> oh
[22:35:12] <lispy> html is the world's most popular dynamic programming language, consider learning it
[22:35:12] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[22:35:36] <EvanR> currently fails to mediate with ghc behind the scenes with a command line error like "unable to satisfy -package plugins"
[22:36:00] <EvanR> on github, the maintainer says "I don't know how this library works, I just accept pull requests and update hackage"
[22:36:06] <geekosaur> mm, are you using stack or cabal v2? I think that package expects to be globally installed
[22:36:12] <monochrom> @quote monochrom runghc
[22:36:12] <lambdabot> monochrom says: just add #! /usr/bin/runghc to your haskell file. then type errors occur at runtime only.
[22:36:14] <EvanR> really
[22:36:17] <monochrom> That. :)
[22:36:42] <EvanR> globally installed... alright
[22:36:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:36:50] * EvanR tightens belt
[22:36:58] <geekosaur> cabal install --lib
[22:37:06] <monochrom> Yeah plugin was in the era of v1. v2 didn't exist.
[22:37:16] <monochrom> plugins
[22:37:33] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:37:57] *** Quits: max22- (~maxime@2a01cb0883359800c869e03b4284e26a.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:39:10] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:39:35] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:39:54] <monochrom> Ironically v2 solves "depending on the ABI of a plugin is usually not enough". v2 says you depend on complete build context.
[22:39:57] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[22:40:52] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (Quit: WeeChat 3.1)
[22:40:55] <EvanR> so... remove plugins from the project build-depends
[22:40:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:41:04] <monochrom> Then again v2 redefines "ABI" to mean complete build context :)
[22:41:08] <EvanR> install --lib plugins globally
[22:41:12] *** Joins: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[22:42:02] <EvanR> now the program depends on a combination of sandboxed packages and global packages
[22:42:04] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[22:42:31] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.86) (Ping timeout: 256 seconds)
[22:42:32] <geekosaur> yes. I don't think there's a good fix or workaround for that
[22:42:34] <EvanR> also, leaving the dir and doing cabal install --lib plugins doesn't seem to do anything
[22:42:49] <EvanR> I guess it's already installed
[22:43:41] <EvanR> did I already say this, if plugins is unmaintained, how does it even still work with newer ghc
[22:44:08] <EvanR> confirm... it worked
[22:44:15] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[22:44:17] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:44:34] <geekosaur> someone submitted a pull request for it
[22:44:37] <monochrom> In this case, since there is no need to rebuild, "cabal install --lib" does not have to waste time, it just has to update your environment file. (You can see it is changed.)
[22:45:19] <monochrom> I guess the GHC API has not changed that much.
[22:46:16] <geekosaur> I would not be surprised to find it doesn't work with 9.0.2 or 9.2.1, but 8.10.7 is proibably fine. (ghc-api has been changing a lot especially in 9.2.1, actually)
[22:46:25] <monochrom> Or rather, plugins just needs to ask GHC API to load things. That part doesn't change a lot.
[22:46:26] <EvanR> well that eval succeeds is serendipitous
[22:46:31] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:46:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:46:55] <EvanR> ah yeah I'm on mildly ancient ghc
[22:47:00] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[22:48:17] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[22:49:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:49:42] <EvanR> the eval action takes about 2 seconds of latency
[22:49:58] <EvanR> to turn "True" into Just True xD
[22:50:12] <EvanR> > True
[22:50:14] <lambdabot>  True
[22:50:18] <EvanR> lambdabot is faster
[22:50:55] *** Joins: Akiva (~Akiva@user/Akiva)
[22:51:16] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[22:51:18] <monochrom> Does it still take 2 seconds the 2nd time?
[22:51:45] <monochrom> I think that there is a lot of dynamic lazy loading that was forced the 1st time.
[22:53:41] <EvanR> 2 seconds for the first eval, then 0.2 seconds for each subsequent eval
[22:53:42] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[22:53:52] <EvanR> pretty good
[22:54:13] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:54:42] <EvanR> 0.2 might be too slow turn around for linux torvalds though
[22:54:50] <EvanR> linus*
[22:55:25] <EvanR> eval takes a list of module names, but it says on stderr it can't find any
[22:55:43] <geekosaur> you're probably still building a new runtime environment for each expression. if you rearrange things to keep one around instead of naïvelyy calling eval each time, does it get any faster?
[22:55:46] <EvanR> I guess I need to use the more elaborate call that allows flags to be specified
[22:56:17] <EvanR> good point
[22:56:20] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[22:56:22] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:56:28] <geekosaur> might have to dig into the source of eval to see how to do that though
[22:56:33] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[22:56:48] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:56:57] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:57:17] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:57:38] <geekosaur> or better yet the source to ghci, which is almost standalone by design
[22:57:43] <EvanR> it calls out to ghc
[22:57:59] <EvanR> using a command line
[22:58:06] <geekosaur> ghc -e? that'd do it
[22:58:19] <geekosaur> go poke at ghci sources to see how to do it properly
[22:58:44] <EvanR> to be clear, we're talking about not using plugins right xD
[22:59:10] <geekosaur> yes
[22:59:26] <geekosaur> with the price that this uses a separate runtime environment from your main program
[22:59:35] <geekosaur> so you can't readily share data
[23:00:36] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[23:01:04] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[23:01:11] <EvanR> I want to change the definition of a value or a function, then yield the updated value or function to the main program
[23:01:16] <EvanR> which somehow eval is doing
[23:01:28] <EvanR> using Typeable to check if it's remotely valid
[23:01:37] <monochrom> I think data is sharable.
[23:02:23] <monochrom> The real price is that the separate runtime environment comes from the very same compiler you used to compile your main program.
[23:02:39] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:02:41] <monochrom> "same" is down to which directory you installed GHC in.
[23:03:31] <EvanR> meaning don't expect to ship this exe easily? xD
[23:03:36] <monochrom> If you ship your exe to another computer, you have to also ship your GHC installation verbatim, yes.
[23:03:39] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Quit: Leaving)
[23:03:48] <monochrom> Either that, or reproduce the same installation effect.
[23:04:00] <geekosaur> yes
[23:04:01] <EvanR> I guess that's why people write new programming languages
[23:04:05] <EvanR> within haskell
[23:04:08] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[23:04:41] <EvanR> looking at this now https://github.com/ghc/ghc/tree/master/ghc/GHCi
[23:04:42] <monochrom> This is why back in the days of whatever was before HLS, it was so fragile.
[23:04:47] <geekosaur> in particular it needs the settings file and the package database from your ghc installation, plus anything pointed to by the settings file
[23:05:10] <monochrom> Also it was cabal-v1, to add more hell.
[23:05:25] <EvanR> is hugs or something like that an option?
[23:05:31] <EvanR> as a library
[23:06:43] <polyphem> isn't android the worlds most common operating system ?
[23:07:07] <monochrom> Hugs is much smaller. You wouldn't feel guilty shipping it. But I don't know that Hugs has a library API.
[23:07:23] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[23:07:53] <EvanR> and hugs may not have some advance stuff
[23:08:05] <monochrom> Linux kernel version 2.4 is the world's most common OS because home routers. :)
[23:08:31] <EvanR> whatever OS runs on all the microcontrollers in your car
[23:08:36] <geekosaur> EvanR, but has its own (Trex is iirc better than anything ghc has come up with in terms of a record system)
[23:08:42] <monochrom> Hugs has TREX. More advanced than GHC. Today.
[23:08:55] <polyphem> hmm, i guess a household has a router and maybe some cell phones ...
[23:09:00] <EvanR> orly
[23:09:02] <monochrom> TREX also solve all your record problems :)
[23:09:26] <monochrom> OK I was kidding, phones are more abundant than home routers.
[23:09:48] <monochrom> Or rather, I don't have data either way.
[23:10:15] <polyphem> yes , but android is technically linux based 
[23:10:20] <geekosaur> I, uh, spent some time in a homeless shelter. No home routers, but *everyone* had a smartphone
[23:10:44] <geekosaur> not to mention that it seems like every kid these days has their own smartphone
[23:11:02] <geekosaur> I would absolutely not be surprised if phone OSes vastly outnumber desktops and laptops
[23:11:39] <monochrom> But I already blamed everything on Windows long before I heard of Haskell.
[23:11:52] <monochrom> As a C and C++ user I blamed Windows too.
[23:12:17] <monochrom> And did not suddenly make C or C++ unappealing to newcomers.
[23:12:23] <EvanR> now that I'm using Haskell i can blame C and C++
[23:12:38] <EvanR> one day I'll be on language blub 9000, and blame Haskell
[23:13:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[23:13:11] <monochrom> I bet every programming language community thinks of Windows lowly.
[23:13:25] <EvanR> dot net?
[23:13:42] <monochrom> If anything, it's OCaml, not Haskell, that really gives the finger to Windows.
[23:14:03] <polyphem> when i was 14 , on win95 i heard about this strange os that had 9 virtual terminals, i went to the local bookstore and bought a book on linex, and was flashed, when i realized thet it had a cdrom with redhat linux for free ... :)
[23:14:41] <EvanR> you saw a book on linux, and was flashed. By men in black from microsoft
[23:14:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba)
[23:15:14] <EvanR> open source is a cancer!
[23:15:24] <EvanR> get the facts
[23:16:00] *** Quits: fendor_ (~fendor@77.119.174.56.wireless.dyn.drei.com) (Remote host closed the connection)
[23:16:00] <monochrom> The world is like a CDROM. It's flat.
[23:16:34] <polyphem> ... i imideatly formated my 1024 MB drive win95 install and installed redhat
[23:17:00] <geekosaur> oh, I also have to wonder how linux installs compare to windows installs due to WSL(2). obviously can't be greater, but approaching parity would be interesting
[23:17:28] <EvanR> you can't have multiple linux installs?
[23:17:39] <geekosaur> also I am a bit surprised ot hear that there is some latency in WSL2, it should be very close to bare metal because of how they designed it
[23:17:58] <geekosaur> sure you can, and swithc between them and windows via grub
[23:18:18] <EvanR> I mean within the WSL framework
[23:18:31] <geekosaur> afaik no
[23:18:50] <EvanR> so it's a linux shaped hole that is empty or filled
[23:18:52] <geekosaur> might not take much work to enable it but it'd have to be done by Microsoft
[23:18:55] <EvanR> MVar Linux
[23:19:01] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[23:19:10] <geekosaur> that's not exactly right either
[23:19:31] <polyphem> windows used to overwrite your linux install if you wanted to do multiboot in those days , you had to first install windows and then linux
[23:19:42] <geekosaur> remember windows is a microkernel architecture since winnt. WSL2 is just linux as a microkernel client
[23:20:16] <geekosaur> wsl1 was more of an emulation, I think
[23:20:18] *** Joins: max22- (~maxime@2a01cb0883359800ca42cd4ecfb21dbb.ipv6.abo.wanadoo.fr)
[23:20:44] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:20:58] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[23:21:18] <EvanR> embrace extend extinguish, microsoft is at it again!
[23:21:21] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[23:21:45] <geekosaur> well, actually, no, it seems like they actually mean it
[23:22:00] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[23:22:09] <geekosaur> they were getting their asses eaten in the cloud because windows is such a lousy cloud OS
[23:22:15] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:22:34] <geekosaur> it *really* wants a physical console
[23:22:58] <geekosaur> and things like remote desktop and even powershell just weren't enough
[23:23:06] <polyphem> ms had xenix, right
[23:23:10] <geekosaur> yes
[23:23:15] <geekosaur> then they sold it off to SCO
[23:23:24] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[23:23:32] <geekosaur> then SCO sold itself out and became a shell for lawyers
[23:24:14] <EvanR> I worked at a place with SCO unix
[23:24:18] <geekosaur> but it was amusing, I once had the developer manual or ms-dos 2.11 and it talked about a future migration path that had dos and xenix merging sometime around dos 6.0
[23:24:25] <EvanR> not as ergonomic as linux
[23:24:27] <kuribas> My uncle was CEO of SCO benelux.
[23:24:33] <geekosaur> *for ms-dos
[23:24:34] <maerwald> well, windows at least has proper hardware support for laptops. Linux is a nightmare (suspend to ram, cpu throttling... all trash)
[23:24:44] <kuribas> before they went rogue.
[23:24:44] <maerwald> but I still can't force myself to switch
[23:25:06] <EvanR> macbook air my dude
[23:25:14] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[23:25:15] <monochrom> Oh, so that's why DOS went from the file-control-block model to the file-handle (so file descriptor) model...
[23:26:26] <geekosaur> the file controlo block model was left over from dos 1.0 being a poor ripoff of cp/m
[23:26:36] <monochrom> Yeah
[23:26:37] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[23:27:26] <polyphem> dos 1.0 was int21h + command.com + gwbasic 
[23:27:35] <polyphem> + autoexec.bat
[23:27:58] <geekosaur> actuslly I don't recall if dos .0 had int21h
[23:28:01] <geekosaur> 1.0
[23:28:10] <EvanR> back when your computer came with nothing but a programming environment
[23:28:28] <geekosaur> it still had jumping to address 0005 to make syscalls, which is part of the cp/m "emulation"
[23:28:39] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:29:14] *** Joins: trillp (~trillp@2600:1700:28e2:14d0::3a)
[23:29:26] <intersect> Hello guys, how can i find how to use lambdabot? 
[23:30:08] <monochrom> I lurked here and watched other people use it.
[23:30:32] <polyphem> wasn't the story of ms success being they tookover a deal to use cp/m as os for ibm-compatible pcs ,and instead bought the int21h handler from some students added their gwbasig and a shell command.com and made the deal with ibm
[23:30:37] <dminuoso> Yeah, it's best to just use the channel history, and dig through 10 years of chatlogs. We dont have any other documentation for it.
[23:30:41] <monochrom> But the most frequently used thing is this:
[23:30:44] <monochrom> > 1+1
[23:30:46] <lambdabot>  2
[23:31:08] <EvanR> @botsnack
[23:31:08] <lambdabot> :)
[23:31:17] <monochrom> It has some kind of @help command, but you will find it not very helpful.
[23:31:47] <intersect> hum, i was trying to figure out how to use it to make a pointwise function in to pointfree 
[23:31:48] <dminuoso> I personally just use yahb at the end, for it is just an IRC bot bolted onto GHCi.
[23:31:59] <dminuoso> Which makes it simple to use
[23:32:06] <EvanR> @pl \x -> x + 1
[23:32:06] <lambdabot> (1 +)
[23:32:14] <EvanR> wait
[23:32:15] <monochrom> Yeah yahb is a real ghci, much more complete than lambdabot's >
[23:32:26] <EvanR> @pl \x -> x - 1
[23:32:26] <lambdabot> subtract 1
[23:32:26] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:32:31] <EvanR> @pl \x -> x / 1
[23:32:31] <lambdabot> (/ 1)
[23:32:43] <EvanR> /1, 1+
[23:32:52] <monochrom> Oh interesting.
[23:32:53] <EvanR> it is assuming commutativitiy or
[23:33:22] <EvanR> I guess have laws for Num now
[23:33:31] <dminuoso> See, this is one of those things.
[23:33:39] <intersect> f(g(h(i))(x,y)
[23:33:59] <monochrom> Some human wrote @pl and perhaps their opinion went into it too.
[23:34:09] <monochrom> Right? I thought it was obvious.
[23:34:25] <monochrom> Every program exists because, only because, it's some programmer's opinion.
[23:34:39] <EvanR> that's a very constructive take
[23:34:49] <EvanR> brouwer would be proud
[23:35:45] <EvanR> let's see if their opinion extended to matrix multiplication
[23:35:52] <EvanR> @pl \x -> x * 1
[23:35:52] <lambdabot> id
[23:35:55] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:36:03] <EvanR> the world may never know
[23:36:07] <monochrom> Matrix multiplication is a social construct.
[23:36:22] <monochrom> I mean, >:)
[23:37:23] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:39] <EvanR> @pl \i x y -> f (g (h i)) (x,y)
[23:37:39] <lambdabot> (. (,)) . (.) . f . g . h
[23:37:54] <EvanR> @pl \i x y -> f (g (h i)) x y
[23:37:54] <lambdabot> f . g . h
[23:38:14] <monochrom> Ho hum that turns out surprisingly neat.
[23:39:24] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[23:39:24] *** Joins: ub (~Thunderbi@141.98.252.232)
[23:40:28] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[23:40:53] *** Quits: ubert (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:40:54] *** ub is now known as ubert
[23:40:55] <geekosaur> I still need to flesh out my commands list so it's usable :(
[23:41:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:41:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:41:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:42:34] *** Joins: cynomys (~cynomys@user/cynomys)
[23:44:01] *** Joins: Pickchea (~private@user/pickchea)
[23:45:29] *** Quits: kuribas (~user@ptr-25vy0i9nxqs797laykw.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:45:32] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 240 seconds)
[23:45:41] *** Joins: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[23:47:26] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[23:48:02] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[23:49:05] *** Quits: trillp (~trillp@2600:1700:28e2:14d0::3a) (Quit: trillp)
[23:49:33] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[23:52:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:52:51] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[23:53:55] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[23:54:11] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:55:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:57:29] *** Joins: ultsllt (~ultsllt@50.231.5.242)
