[00:00:19] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[00:02:47] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:03:06] *** Quits: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net) (Ping timeout: 258 seconds)
[00:05:03] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[00:05:35] *** Joins: oxum (~oxum@106.203.207.2)
[00:06:23] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[00:06:35] *** Joins: oxum (~oxum@106.203.207.2)
[00:07:55] <fikran> I know that I have a "fatal error: concurrent map read and map write" error
[00:07:58] <fikran> I just do not know where it is...
[00:08:35] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[00:12:49] *** Joins: oxum (~oxum@106.203.207.2)
[00:17:40] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 258 seconds)
[00:17:57] <fizzie> You can usually manage to redirect the goroutine stack dump into a file, and read through it at your leisure. May still take a long time to find the goroutine(s) accessing the map though. (Unless one of them is always dumped first?)
[00:18:51] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[00:20:38] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:21:53] <foobaz> fikran: add lots of print statements to your code, observe which one is the last one printed, then you know the error occurs between the last one printed and the next one which would be printed
[00:26:33] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[00:28:35] *** Joins: jinie (~jimmy@188.114.173.37)
[00:30:18] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[00:32:26] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[00:32:35] *** Joins: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net)
[00:32:44] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[00:34:11] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:34:24] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[00:35:27] *** Quits: henriquev_ (~henvic@user/henriquev) (Quit: ZNC 1.8.2 - https://znc.in)
[00:54:45] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:54] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:56:39] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[00:58:07] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[01:07:57] *** Quits: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:08:20] *** Joins: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net)
[01:08:48] *** Joins: prophet60091____ (~prophet60@185.230.127.84)
[01:12:52] *** Quits: prophet60091__ (~prophet60@87.122.100.181) (Ping timeout: 258 seconds)
[01:14:09] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[01:15:33] *** Joins: jkl (~jkl@user/jkl)
[01:17:12] *** Quits: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net) (Ping timeout: 245 seconds)
[01:17:42] *** Joins: oxum (~oxum@106.203.207.2)
[01:21:19] *** Joins: jkl1337 (~jkl@user/jkl)
[01:22:12] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 245 seconds)
[01:23:26] *** Quits: jkl (~jkl@user/jkl) (Ping timeout: 256 seconds)
[01:23:55] *** Joins: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net)
[01:25:43] *** Joins: CoolerX (~CoolerX@user/coolerx)
[01:35:08] *** Joins: dr0n (~mnxaw@94.11.23.235)
[01:36:09] *** Joins: Teekin (~Teekin@45.133.192.68)
[01:36:53] *** Joins: prophet60091__ (~prophet60@87.122.100.181)
[01:38:02] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 245 seconds)
[01:38:18] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:38:59] <j416> sounds like a terminal issue
[01:39:08] <j416> figure out how to scroll up?
[01:39:11] <j416> :)
[01:40:15] *** Joins: mrig (~mrig@user/mrig)
[01:40:21] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2d9b:b55f:a535:512a) (Remote host closed the connection)
[01:41:00] *** Quits: prophet60091____ (~prophet60@185.230.127.84) (Ping timeout: 256 seconds)
[01:41:56] *** Joins: cmj (~cmj@68.207.254.124)
[01:42:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[01:44:45] *** Joins: fikran (~fikran@user/fikran)
[01:45:43] *** Joins: arcatech (~arcatech@user/arcatech)
[01:47:46] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 240 seconds)
[01:49:20] <rawtaz> :>
[01:49:23] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[01:50:01] *** Joins: ansimita (~ansimita@user/ansimita)
[01:52:01] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) ()
[01:55:57] *** Joins: Jigsy (~Jigsy@user/jigsy)
[01:56:54] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:59:41] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[02:02:59] *** Quits: Teekin (~Teekin@45.133.192.68) (Quit: Client closed)
[02:04:33] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:14:58] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[02:15:10] *** Joins: arcatech (~arcatech@user/arcatech)
[02:17:04] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[02:19:06] *** Quits: sweb (~sweb@static.187.181.76.144.clients.your-server.de) (Ping timeout: 240 seconds)
[02:20:23] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[02:24:07] *** Quits: revolve (~u0_a227@82-132-247-23.dab.02.net) (Read error: Connection reset by peer)
[02:25:08] *** Joins: cmj (~cmj@68.207.254.124)
[02:25:18] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 272 seconds)
[02:26:21] *** Joins: sweb (~sweb@static.187.181.76.144.clients.your-server.de)
[02:26:22] *** Parts: sweb (~sweb@static.187.181.76.144.clients.your-server.de) ()
[02:26:29] *** Joins: revolve (~u0_a227@82-132-247-102.dab.02.net)
[02:26:29] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[02:26:42] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.2)
[02:28:11] *** Joins: jinie (~jimmy@188.114.173.37)
[02:31:17] *** Joins: Torr (~Torr@user/torr)
[02:35:06] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[02:37:55] *** Quits: independent_ (~independe@156.red-193-153-27.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[02:37:58] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 272 seconds)
[02:38:07] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[02:39:41] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[02:41:08] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:42:11] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[02:52:01] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[02:53:04] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: Leaving)
[02:54:23] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:54:51] *** Quits: muhblockchain (~muhblockc@user/muhblockchain) (Ping timeout: 276 seconds)
[02:58:52] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.0)
[03:04:03] *** Joins: tristero (~nobody@user/tristero)
[03:06:22] *** Joins: arcatech (~arcatech@user/arcatech)
[03:12:04] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:13:39] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: dalan6)
[03:14:10] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[03:17:54] *** Quits: theoceaniscool (~theoceani@93.177.120.45) (Ping timeout: 256 seconds)
[03:20:53] *** Joins: oxum (~oxum@106.203.207.2)
[03:25:53] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 258 seconds)
[03:32:16] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:41] *** Joins: jsrnop (~mark@user/jsrnop)
[03:36:03] *** Joins: arcatech (~arcatech@user/arcatech)
[03:39:50] *** Joins: src (~src@user/src)
[03:41:42] *** Joins: mickey8 (~user@user/mickey)
[03:42:23] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:42:23] *** mickey8 is now known as mickey
[03:44:31] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:51:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:54:04] *** Joins: fikran (~fikran@user/fikran)
[03:57:06] *** Joins: arcatech (~arcatech@user/arcatech)
[03:58:53] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[04:00:30] *** Joins: darkapex (~darkapex@user/darkapex)
[04:02:48] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:09:58] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[04:09:58] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:20] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[04:22:01] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[04:23:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:23:26] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[04:24:23] *** Joins: flynn (~mcbloch@user/flynn)
[04:25:46] *** Joins: src (~src@user/src)
[04:26:29] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[04:28:13] *** Joins: jinie (~jimmy@188.114.173.37)
[04:31:24] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:32:40] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:51:52] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[04:56:08] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[05:10:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.0.1)
[05:17:30] *** Joins: yoonkn (~user@175.197.208.79)
[05:24:29] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:27:40] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[05:38:37] *** Quits: dr0n (~mnxaw@94.11.23.235) (Ping timeout: 250 seconds)
[05:40:08] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:45:32] *** Quits: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[05:47:01] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:49:46] *** Quits: ente_ (~ente@p200300dc5f34ec005771f8e422bb0c79.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:50:02] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[05:51:22] *** Joins: ente_ (~ente@p200300dc5f4358007418074540032b42.dip0.t-ipconnect.de)
[05:52:05] *** Joins: neurocyte3 (~neurocyte@45.93.110.202)
[05:52:05] *** Quits: neurocyte3 (~neurocyte@45.93.110.202) (Changing host)
[05:52:05] *** Joins: neurocyte3 (~neurocyte@user/neurocyte)
[05:55:46] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 258 seconds)
[05:55:46] *** neurocyte3 is now known as neurocyte
[05:57:00] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[05:58:03] <b0nn> In the ELF format, there's memory that each function owns called a stack, and memory that all use called a heap; the stack is a true stack, where a function pushes and pops from a LIFO structure - is the HEAP a tree structure like heaps (like a priority queue) or is the naming just a coincidence
[06:00:21] *** Joins: c10l (~c10l@89.34.167.207)
[06:01:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:02:17] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[06:02:38] <b0nn> I mean, I understand that the ELF format is for the OS, and how the memory is used by the application is 100% language dependant
[06:02:43] <fizzie> It's not exactly a Go-specific question, and I don't know the exact etymology (maybe there's some commonality somewhere?), but there's no direct relationship between heap-the-data-structure and heap-the-region-of-memory-for-dynamic-allocations.
[06:02:52] <snappy> it's not a naming coincidence and it doesn't mean the tree data structure. A heap just means a "messy pile".
[06:03:23] *** Joins: fikran (~fikran@user/fikran)
[06:03:26] *** Quits: prophet60091__ (~prophet60@87.122.100.181) (Ping timeout: 258 seconds)
[06:03:34] *** Joins: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl)
[06:04:06] *** Joins: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[06:04:39] <b0nn> I think you're both right, and I'm pleased because I was worried about the overhead a tree like heap brings with insertions and deletions
[06:05:07] <b0nn> I /thought/ that most languages (Go included) treated the heap as more of a has
[06:05:13] <snappy> well ususally dynamic allocation has its own algorithms like first fit, best fit, etc.
[06:05:14] <b0nn> hash*
[06:05:37] <b0nn> oh, right, yeah, searching for memory to use
[06:06:20] <b0nn> hmm, /that/ might be the heap that's being referred to?
[06:06:22] *** Quits: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Client Quit)
[06:06:42] <b0nn> the tree that knows what data has been used, and what's available
[06:07:09] * b0nn should really hurry up and finish the interpreter/compiler books
[06:09:06] *** Joins: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[06:09:34] *** Quits: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Client Quit)
[06:09:51] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[06:15:26] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[06:20:03] <rawtaz> you mean finish reading?
[06:20:42] <b0nn> Heh, it's a bit of reading, and play your own adventure
[06:21:32] <b0nn> I mean, I learn by writing the code, I stop when I find myself copying/pasting blindly, and I supplement by comparing how things are done in the Go compiler
[06:21:43] <rawtaz> i see
[06:23:40] <b0nn> So, mheap, mcache, and mcentral seem to be the main players in storing stats on what's in use, and what's available on the heap
[06:23:51] <b0nn> https://github.com/golang/go/blob/master/src/runtime/malloc.go#L49
[06:26:04] <b0nn> Sorry, heapArena
[06:26:48] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[06:26:49] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:27:42] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:9826:c2f7:659c:9f58)
[06:28:20] *** Joins: jinie (~jimmy@188.114.173.37)
[06:29:25] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:29:59] <b0nn> hmm, it seems that the allocator looks at the collection of mspans that contains spans that are large enough for the request to be statisfied
[06:30:19] <b0nn> the mpsans themselves seem to be arbitrarly located
[06:30:33] <b0nn> arbitrarily*
[06:39:14] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[06:41:35] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[06:44:50] *** Joins: kodah (~kodah@user/kodah)
[06:46:39] *** Joins: src (~src@user/src)
[06:52:49] <b0nn> hrm this makes the heap usage (in Go) seem almost exactly like a hashmap
[06:55:35] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:57:57] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:40fc:232a:7dbe:1555)
[06:58:01] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[07:14:41] <rawtaz> how do you find time for this stuff in the first place? :O
[07:15:22] <b0nn> hrm, pandemic lockdown :)
[07:15:30] <b0nn> += winter
[07:15:34] <rawtaz> hm
[07:15:39] <b0nn> += this is what I find super interesting
[07:29:30] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:30:00] *** Quits: revolve (~u0_a227@82-132-247-102.dab.02.net) (Read error: Connection reset by peer)
[07:30:04] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Ping timeout: 258 seconds)
[07:30:28] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:31:22] *** Joins: burningserenity (~burningse@143.244.34.189)
[07:31:47] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:36:06] <rawtaz> glad to hear that :)
[07:37:00] *** Joins: revolve (~u0_a227@82-132-247-102.dab.02.net)
[07:39:15] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:40:36] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:44:11] <seebs> well now i'm really curious about the etymology of "heap" as in "stack and heap", because i don't think it's ever been much like a heap-the-data-structure.
[07:47:02] <seebs> i will ask around in case i know anyone who knows
[07:50:31] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[07:52:43] <foobaz> i used a heap for the first time recently
[07:53:37] <foobaz> i had a list of times when i need to do something, and i wanted to get the first time in the list so i know how long to sleep
[07:54:04] <foobaz> at first i considered using a sorted list but then i realized a heap would be ideal, and indeed it works well
[08:09:26] <f8l12> i'm working on code exactly like that but my times are in a database
[08:10:29] <f8l12> i'm struggling to figure out a way to parallelize it. thinking of assigning an "go routine id" to each entry and then only allowing one go routine per id to work on it
[08:10:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:11:27] <f8l12> but then i have the issue that one go routine could be doing most of the work because the times can range from 1 minute to an hour. if one gets all the hour jobs then one go routine will have all the minute jobs :(
[08:12:42] *** Joins: fikran (~fikran@user/fikran)
[08:24:58] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[08:26:27] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[08:28:23] *** Joins: jinie (~jimmy@188.114.173.37)
[08:34:59] *** jkl1337 is now known as jkl
[08:43:26] *** Joins: arcatech (~arcatech@user/arcatech)
[08:54:00] *** Quits: revolve (~u0_a227@82-132-247-102.dab.02.net) (Ping timeout: 252 seconds)
[08:58:16] *** Joins: revolve (~u0_a227@82-132-247-150.dab.02.net)
[09:08:11] *** Joins: iateadonut (~dan@121.177.17.154)
[09:09:58] <iateadonut> here: https://github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/blob/master/chapter4/context/collect.go - on line 25, there is a function that modifies a context, but does not return anything.  i'm wondering why it works?
[09:10:15] <iateadonut> the function is defined at line 31
[09:14:16] *** Joins: Damage_666 (~Damage_66@27-32-6-195.static.tpgi.com.au)
[09:14:20] *** Parts: Damage_666 (~Damage_66@27-32-6-195.static.tpgi.com.au) ()
[09:16:36] <f8l12> that code doesn't look like it would work
[09:17:34] <f8l12> oh yeah it would
[09:18:08] <f8l12> it's because of this: https://github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/blob/4231dae41a8d9e967aa149b42c88d7fbcaa22933/chapter4/context/log.go#L42 and this: https://github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/blob/4231dae41a8d9e967aa149b42c88d7fbcaa22933/chapter4/context/log.go#L15
[09:18:19] <f8l12> i don't think that's good code though
[09:20:08] <f8l12> the ctx = part of the line you're wondering about doesn't do anything. it's WithFields that mutates one of the objects within the context
[09:27:11] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[09:30:16] *** Quits: burningserenity (~burningse@143.244.34.189) (Ping timeout: 272 seconds)
[09:38:24] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:39:55] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[09:43:14] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Ping timeout: 256 seconds)
[09:44:15] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[09:53:37] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:59:57] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[10:00:30] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:14:49] *** Joins: Guest63 (~Guest63@cpe-24-166-63-150.neo.res.rr.com)
[10:19:26] *** Quits: Guest63 (~Guest63@cpe-24-166-63-150.neo.res.rr.com) (Quit: Client closed)
[10:19:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:22:01] *** Joins: fikran (~fikran@user/fikran)
[10:26:38] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[10:28:28] *** Joins: jinie (~jimmy@188.114.173.37)
[10:31:34] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[10:33:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 245 seconds)
[10:37:04] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[10:54:46] *** Joins: go_newbie86 (~go_newbie@cpe-24-166-63-150.neo.res.rr.com)
[10:56:34] <iateadonut> f8l12, thanks.  i think it might have something to do with using background.Context() as well.
[10:57:09] <iateadonut> why do you think it's not good code?
[10:59:26] *** Parts: go_newbie86 (~go_newbie@cpe-24-166-63-150.neo.res.rr.com) ()
[11:02:34] *** Joins: SlickNick (~SlickNick@cpe-24-166-63-150.neo.res.rr.com)
[11:13:29] <iateadonut> thanks.  see you.
[11:13:33] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[11:15:24] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[11:15:52] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[11:21:20] <bookworm> packt as a publisher isn't exactly good... I've seen so many books from them that had invalid code examples that didn't even compile or things that any editor should have seen and corrected that it ain't even funny.
[11:21:52] <bookworm> I would very warmly suggest to never ever read a book from them. Stick to other sources, there are plenty good ones
[11:26:08] <b0nn> Yeah, they have a lack of editorial control
[11:26:20] <b0nn> You might as well call it "dead tree blogfs"
[11:27:19] <bookworm> indeed
[11:30:32] *** Quits: LiftLeft (~LiftLeft@191.96.150.118) (Ping timeout: 245 seconds)
[11:42:05] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[11:43:31] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[11:44:50] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[11:45:06] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Remote host closed the connection)
[11:45:30] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[11:49:58] *** Joins: alyx (alyx@atheme/alyx)
[11:51:59] *** Joins: oxum (~oxum@106.203.207.2)
[11:55:00] *** Joins: dr0n (~dr0n@94.11.23.235)
[11:57:00] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[12:01:06] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:04:54] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[12:06:41] *** Joins: oxum (~oxum@106.203.207.2)
[12:08:18] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[12:10:26] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[12:14:44] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[12:18:32] *** Joins: oxum (~oxum@106.203.207.2)
[12:19:47] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[12:26:38] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[12:26:44] *** Parts: SlickNick (~SlickNick@cpe-24-166-63-150.neo.res.rr.com) ()
[12:28:32] *** Joins: jinie (~jimmy@188.114.173.37)
[12:29:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:29:30] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:31:20] *** Joins: fikran (~fikran@user/fikran)
[12:33:54] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[12:35:27] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[12:35:51] *** Joins: oxum (~oxum@106.203.207.2)
[12:39:23] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:40fc:232a:7dbe:1555) (Quit: quit)
[12:40:02] *** Quits: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[12:42:18] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:42:26] *** Joins: mrig (~mrig@user/mrig)
[12:43:32] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:43:39] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[12:44:33] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[12:46:39] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:46:55] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[12:48:54] *** Joins: oxum (~oxum@106.203.207.2)
[12:50:54] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[12:51:07] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:53:30] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[12:56:50] <j416> bookworm: packt themselves just do the layout and stuff around the publishing, as I understand it the content is sourced from plebs
[12:58:40] *** Joins: oxum (~oxum@106.203.207.2)
[12:58:44] <bookworm> sure, but it's their job to pick "plebs" that know what they are doing and proofread the output
[12:59:03] <j416> yeah that's why I used the word; they seem to just pick randoms
[12:59:03] <bookworm> that's what a publisher is for after all
[12:59:25] <bookworm> see o'reilly, which actually has quality content
[12:59:31] <j416> nod
[12:59:39] <bookworm> (yes I know that packt is under the safari umbrella)
[13:00:00] <j416> I don't know what that means
[13:00:34] <j416> does Safari own both O'Reilly and Packt?
[13:00:41] <bookworm> packt is owned by the same publisher as o'reilly
[13:00:46] <j416> huh. til.
[13:01:15] <j416> the idea is nice I suppose, but I wish they'd do more background check
[13:06:13] *** Joins: Guest77 (~Guest77@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de)
[13:07:13] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[13:07:19] <j416> they contacted me a few years back when I had very little experience with Go asking me if I'd do a video course on practical Go programming. :D
[13:07:38] *** Joins: oxum (~oxum@106.203.207.2)
[13:09:38] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[13:12:32] *** Joins: theoceaniscool (~theoceani@93.177.120.45)
[13:13:10] *** Joins: oxum (~oxum@106.203.207.2)
[13:16:23] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[13:18:08] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 258 seconds)
[13:31:47] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Ping timeout: 245 seconds)
[13:32:12] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[13:32:34] *** Joins: xn0px90 (~mac@38.70.11.40)
[13:33:13] *** Joins: zwr (~zwr@2804:d45:b966:fb00:6582:f5e7:70df:5179)
[13:34:28] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[13:37:02] *** Joins: menace (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28)
[13:37:59] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[13:38:39] *** Joins: arthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[13:39:41] *** Joins: darkapex (~darkapex@user/darkapex)
[13:40:08] *** Quits: xn0px90 (~mac@38.70.11.40) (Quit: Lost terminal)
[13:40:16] *** Quits: menace (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28) (Changing host)
[13:40:16] *** Joins: menace (~someone@user/menace)
[13:40:20] *** menace is now known as Deknos
[13:42:09] *** Quits: arthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Read error: Connection reset by peer)
[13:46:48] *** Joins: frost (~frost@59.71.241.179)
[13:51:22] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[13:53:49] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Remote host closed the connection)
[13:54:13] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[14:00:18] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Ping timeout: 258 seconds)
[14:02:30] *** Joins: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de)
[14:05:54] *** Quits: zwr (~zwr@2804:d45:b966:fb00:6582:f5e7:70df:5179) (Ping timeout: 240 seconds)
[14:13:47] *** Joins: f8l122 (~f8l12@191.96.227.79)
[14:14:14] *** Quits: f8l12 (~f8l12@191.96.227.79) (Read error: Connection reset by peer)
[14:14:17] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[14:15:33] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Ping timeout: 245 seconds)
[14:15:38] *** Joins: links (~links@114.23.160.104)
[14:15:57] *** Quits: finnb (~finnb@51.15.63.237) (Ping timeout: 245 seconds)
[14:16:06] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[14:16:11] *** Quits: dozn_ (uid249292@user/dozn) (Ping timeout: 252 seconds)
[14:16:22] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 245 seconds)
[14:16:26] *** Quits: keiser0091075852 (~keiser@83.25.199.188.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[14:16:27] *** Quits: stigz (sid371747@tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:16:28] *** Quits: kwilczynski (sid379192@user/kwilczynski) (Ping timeout: 272 seconds)
[14:16:28] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 272 seconds)
[14:16:28] *** Quits: jsvcycling (sid369784@id-369784.highgate.irccloud.com) (Ping timeout: 272 seconds)
[14:16:36] *** Quits: links (~links@114.23.160.104) (Client Quit)
[14:16:41] *** Joins: finnb (~finnb@51.15.63.237)
[14:16:44] *** Quits: jinn (~jinn@d.jinn.army) (Ping timeout: 252 seconds)
[14:16:53] *** Quits: Pent (sid313808@id-313808.tooting.irccloud.com) (Ping timeout: 250 seconds)
[14:16:56] *** Quits: derfj (sid19429@tinside.irccloud.com) (Ping timeout: 256 seconds)
[14:16:56] *** Quits: seds (sid492514@user/seds) (Ping timeout: 256 seconds)
[14:17:00] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[14:17:12] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[14:17:13] *** Quits: bneil (~bneil@63.227.18.157) (Ping timeout: 245 seconds)
[14:17:17] *** Quits: vds (sid12483@id-12483.brockwell.irccloud.com) (Ping timeout: 252 seconds)
[14:17:17] *** Quits: jimeh1 (~jimeh@51.15.210.236) (Ping timeout: 252 seconds)
[14:17:17] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 252 seconds)
[14:17:17] *** Quits: lebster (sid17131@id-17131.stonehaven.irccloud.com) (Ping timeout: 252 seconds)
[14:17:30] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 256 seconds)
[14:17:30] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[14:17:30] *** Joins: jimeh1 (~jimeh@51.15.210.236)
[14:17:32] *** Joins: bneil (~bneil@63.227.18.157)
[14:17:50] *** Joins: dozn_ (uid249292@brockwell.irccloud.com)
[14:17:50] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 252 seconds)
[14:17:57] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[14:17:57] *** Joins: jsvcycling (sid369784@id-369784.highgate.irccloud.com)
[14:18:02] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 245 seconds)
[14:18:04] *** Quits: monke (~monke@user/monke) (Ping timeout: 256 seconds)
[14:18:04] *** Quits: penguwin (~penguwin@fribbledom.com) (Ping timeout: 256 seconds)
[14:18:04] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[14:18:10] *** Joins: seebs (~seebs@24.196.59.174)
[14:18:11] *** Quits: eric_hill (sid323132@tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:18:14] *** Joins: monke (~monke@user/monke)
[14:18:17] *** Joins: Pent (sid313808@id-313808.tooting.irccloud.com)
[14:18:19] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[14:18:22] *** Quits: trollixx (sid289131@id-289131.highgate.irccloud.com) (Ping timeout: 272 seconds)
[14:18:23] *** Quits: monchi (sid347418@id-347418.charlton.irccloud.com) (Ping timeout: 252 seconds)
[14:18:24] *** Joins: jinn (~jinn@d.jinn.army)
[14:18:38] *** Quits: st3fan (sid43079@id-43079.tooting.irccloud.com) (Ping timeout: 256 seconds)
[14:18:40] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[14:18:44] *** Joins: r0bby (r0bby@user/r0bby)
[14:18:52] *** Joins: penguwin (~penguwin@fribbledom.com)
[14:18:56] *** Quits: cmagina (sid286142@user/cmagina) (Ping timeout: 252 seconds)
[14:18:59] *** Joins: lebster (sid17131@id-17131.stonehaven.irccloud.com)
[14:19:03] *** Quits: jzelinskie (sid17772@user/jzelinskie) (Ping timeout: 250 seconds)
[14:19:10] *** Joins: stigz (sid371747@id-371747.tinside.irccloud.com)
[14:19:23] *** Joins: vds (sid12483@id-12483.brockwell.irccloud.com)
[14:19:24] *** Joins: kwilczynski (sid379192@user/kwilczynski)
[14:19:26] *** Joins: monchi (sid347418@id-347418.charlton.irccloud.com)
[14:19:29] *** Quits: itok (sid418430@id-418430.charlton.irccloud.com) (Ping timeout: 252 seconds)
[14:19:29] *** Quits: sam1 (~sam1@molly.millions.slask.me) (Ping timeout: 252 seconds)
[14:19:29] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[14:19:31] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[14:19:38] *** Quits: erri (~meow@52.8.199.178) (Ping timeout: 272 seconds)
[14:20:09] *** Joins: st3fan (sid43079@id-43079.tooting.irccloud.com)
[14:20:20] *** Quits: znpy (~znpy@user/znpy) (Ping timeout: 256 seconds)
[14:20:31] <b0nn> seebs: after asking #c, we discovered that heap sort was first described in 1964, and ELF's heap, and heap (data structure) are unrelated, but there's still no real understanding of how the ELF heap came to be named (other than a reference by Knuth in 1970s that people had been calling the memory area that, presumably because of the reference to the IRL heap)
[14:20:32] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:20:35] *** Quits: argonel (argonel@KDE/argonel) (Ping timeout: 252 seconds)
[14:20:44] *** Joins: cmagina (sid286142@user/cmagina)
[14:20:54] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 272 seconds)
[14:20:58] *** Quits: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr) (Ping timeout: 245 seconds)
[14:21:01] <b0nn> the term 'heap' seems to be quite overloaded
[14:21:08] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Ping timeout: 252 seconds)
[14:21:32] *** Quits: michele (~eraser@user/michele) (Ping timeout: 272 seconds)
[14:21:46] <b0nn> but I would have expected Knuth to have been well acquainted with heap sort/data structures, so should have avoided adding to the confusion
[14:22:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[14:22:13] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[14:22:14] *** Quits: Dieterbe_ (~Dieterbe@user/dieterbe) (Ping timeout: 252 seconds)
[14:22:19] <b0nn> investigation status [ongoing]
[14:22:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 256 seconds)
[14:22:38] *** Quits: lvlinux (~ruel@falcon.ruhnet.net) (Ping timeout: 245 seconds)
[14:23:10] *** Joins: zwr (~zwr@2804:d45:b966:fb00:6d22:e98c:feed:45dd)
[14:23:20] *** Quits: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[14:23:44] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Read error: Connection reset by peer)
[14:24:42] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 245 seconds)
[14:25:26] *** Quits: iivvoo (~l@m3r.nl) (Ping timeout: 256 seconds)
[14:25:32] *** Quits: cfebs (~cfebs@user/cfebs) (Ping timeout: 252 seconds)
[14:25:59] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Ping timeout: 250 seconds)
[14:26:30] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[14:26:34] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 256 seconds)
[14:26:34] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[14:26:42] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[14:26:47] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Ping timeout: 245 seconds)
[14:27:12] *** Quits: lightstalker (~BT@user/lightstalker) (Ping timeout: 245 seconds)
[14:27:42] *** Quits: fmac (~fmac@hel1-1.fmac.xyz) (Ping timeout: 256 seconds)
[14:28:06] *** Joins: jinie (~jimmy@188.114.173.37)
[14:28:16] *** Quits: nekron (~nekron@noordsee.de) (Ping timeout: 256 seconds)
[14:28:20] <b0nn> 90
[14:28:21] <b0nn> Donald Knuth says (The Art of Computer Programming, Third Ed., Vol. 1, p. 435):
[14:28:21] <b0nn>     Several authors began about 1975 to call the pool of available memory a "heap."
[14:28:50] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 252 seconds)
[14:30:45] *** Quits: liberius (~liberius@user/liberius) (Ping timeout: 250 seconds)
[14:31:05] *** Joins: obviyus (sid415299@user/obviyus)
[14:31:05] *** Joins: kodah (~kodah@user/kodah)
[14:31:24] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:31:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[14:31:55] <b0nn> https://stackoverflow.com/questions/1699057/why-are-two-different-concepts-both-called-heap
[14:32:12] *** Quits: jinie (~jimmy@188.114.173.37) (Ping timeout: 245 seconds)
[14:32:13] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 245 seconds)
[14:32:21] *** Joins: nekron (~nekron@noordsee.de)
[14:32:37] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 245 seconds)
[14:32:41] *** Joins: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr)
[14:32:44] *** Joins: jzelinskie (sid17772@user/jzelinskie)
[14:33:03] *** Quits: fputs (~fputs@137.220.33.212) (Ping timeout: 245 seconds)
[14:33:14] *** Joins: trollixx (sid289131@id-289131.highgate.irccloud.com)
[14:33:14] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 252 seconds)
[14:33:27] *** Quits: Wessie- (~Wessie@static.226.41.47.78.clients.your-server.de) (Ping timeout: 245 seconds)
[14:33:28] <b0nn> Hrm, Knuth's quote was abridged, he saw the confusion and, indeed, saught to avoid it https://stackoverflow.com/questions/660855/what-is-the-origin-of-the-term-heap-for-the-free-store
[14:33:38] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[14:33:41] *** Joins: eric_hill (sid323132@id-323132.tinside.irccloud.com)
[14:33:52] *** Joins: seds (sid492514@user/seds)
[14:33:54] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[14:33:58] *** Joins: tofran (~tofran@37.189.158.134)
[14:33:59] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[14:34:17] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (Ping timeout: 245 seconds)
[14:34:22] *** Joins: michele (~eraser@user/michele)
[14:34:38] *** Joins: ruel (~ruel@falcon.ruhnet.net)
[14:34:42] *** Joins: itok (sid418430@id-418430.charlton.irccloud.com)
[14:34:42] *** Quits: cation (cation@user/cation) (Ping timeout: 245 seconds)
[14:34:44] *** Joins: lightstalker (~BT@user/lightstalker)
[14:35:00] *** Joins: jinie (~jimmy@188.114.173.37)
[14:35:06] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[14:35:33] *** Quits: g4wjs (~quassel@mail.classdesign.com) (Ping timeout: 245 seconds)
[14:35:34] *** Joins: cation (cation@user/cation)
[14:35:37] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:35:38] *** Quits: bougyman (~bougyman@user/bougyman) (Ping timeout: 256 seconds)
[14:35:53] *** Joins: liberius (~liberius@user/liberius)
[14:36:19] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (Excess Flood)
[14:36:30] *** Joins: bougyman (~bougyman@user/bougyman)
[14:36:44] *** Joins: sebito91 (~sborza@45.55.74.66)
[14:36:48] *** Joins: erri (~meow@52.8.199.178)
[14:36:59] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[14:37:05] *** Quits: soxhlet (~soxhlet@81.171.29.137) (Ping timeout: 252 seconds)
[14:37:15] *** Joins: g4wjs (~quassel@mail.classdesign.com)
[14:37:20] *** Quits: Thinkofname1 (~thinkthin@37.205.12.211) (Ping timeout: 256 seconds)
[14:37:42] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:38:13] *** Joins: Thinkofname1 (~thinkthin@2a01:430:17:1::ffff:1980)
[14:38:14] *** Joins: cfebs (~cfebs@user/cfebs)
[14:38:27] *** Quits: KnKay- (~kay@vmanager6813.v.reverse-ip.de) (Ping timeout: 245 seconds)
[14:39:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[14:39:53] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[14:40:13] <A_Dragon> huh weird. jargon file has no definition for heap
[14:40:32] *** Quits: j00n (~mario@user/j00n) (Ping timeout: 245 seconds)
[14:40:33] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[14:40:55] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[14:40:58] <b0nn> Lisp introduced the concept of automatic garbage collection, in which the system walks the heap looking for unused memory.
[14:41:13] <b0nn> Still no clue on the etymology
[14:41:38] *** Quits: Guest77 (~Guest77@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de) (Quit: Client closed)
[14:41:40] *** Joins: KnKay (~kay@vmanager6813.v.reverse-ip.de)
[14:41:48] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[14:41:52] *** Quits: moto (~moto@user/moto) (Ping timeout: 256 seconds)
[14:42:02] *** Joins: moto (~moto@user/moto)
[14:42:45] *** Joins: fikran (~fikran@user/fikran)
[14:42:51] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[14:43:20] *** Joins: argonel (argonel@KDE/argonel)
[14:44:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:6d22:e98c:feed:45dd) (Ping timeout: 245 seconds)
[14:44:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:6d22:e98c:feed:45dd)
[14:44:31] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[14:45:04] *** Joins: fmac (~fmac@hel1-1.fmac.xyz)
[14:46:11] <albertito> b0nn: one of the answers in those posts mentions a possibility: it's in opposition to stack. It even has pictures of donuts. No idea if that's the actual truth but it sounds very plausible
[14:46:26] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 252 seconds)
[14:46:30] *** Joins: toretto (~0xe3b7@user/toretto)
[14:46:33] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:47:28] <toretto> is `make()` golang's version of `malloc()` glibc call? (and that memory would be taken care by the golang's GC). And is there any other way to allocate memory in golang other than `make()` call?
[14:49:36] *** Joins: src_ (~src@user/src)
[14:50:39] *** Quits: Deknos (~someone@user/menace) (Read error: Connection reset by peer)
[14:51:00] *** Joins: Deknos (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28)
[14:51:47] <toretto> i think `new()` call is allocating space for a single value and i guess that's it.
[14:51:55] <toretto> right?
[14:51:59] *** Quits: Deknos (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28) (Read error: Connection reset by peer)
[14:52:01] <A_Dragon> similar but not the same exactly
[14:52:07] <b0nn> Fortran (1956) used the keyword "Equivalence"
[14:52:10] <A_Dragon> its more akin to a java `new`
[14:52:14] *** Joins: Deknos (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28)
[14:52:24] <A_Dragon> toretto: its exactly equiv to `&SomeStruct{}`
[14:52:29] <toretto> A_Dragon: yeah, except the memory is managed by the GC
[14:52:29] <b0nn> https://archive.computerhistory.org/resources/text/Fortran/102649787.05.01.acc.pdf page 36
[14:52:37] *** Quits: src (~src@user/src) (Ping timeout: 245 seconds)
[14:52:50] *** Joins: Dieterbe (~Dieterbe@user/dieterbe)
[14:53:02] *** Quits: Freman (~Freman@flatus.fremnet.net) (Ping timeout: 245 seconds)
[14:53:08] <A_Dragon> to be clear you can malloc memory if you really want to, that will be left along by the GC, you can do it with cgo or with unsafe IIRC
[14:53:13] <b0nn> toretto: https://dave.cheney.net/2014/08/17/go-has-both-make-and-new-functions-what-gives
[14:53:14] *** Joins: Fremean (~Freman@flatus.fremnet.net)
[14:53:38] *** Fremean is now known as Freman
[14:54:06] <b0nn> If you are wanting to mess with the garbage collector, you can with jemalloc as per https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
[14:54:13] <toretto> A_Dragon: oh, i can still malloc memory? interesting!!!
[14:54:24] <b0nn> But, honestly, if you are getting to that point, Go isn't the language for you
[14:54:34] <A_Dragon> toretto: if you really want to, yes, but you may as well use a []byte. same idea, but also yes
[14:54:41] <toretto> yeah, but i was just testing out things.
[14:54:44] *** Joins: mei (~mei@user/mei)
[14:54:45] <toretto> i'm just messing around
[14:54:52] *** Joins: mweckbecker (~matthias@weckbecker.name)
[14:54:55] <toretto> to learn and get use to the language
[14:54:59] <A_Dragon> go has powerful reflection tools that let you do all sorts of unsafe things
[14:55:03] <A_Dragon> you SHOULDNT, but you can
[14:55:16] <toretto> i want to do for learning
[14:55:26] <toretto> i'm from a strong C background
[14:55:36] <A_Dragon> I dont see the point, its not something that you will ever want to do in go
[14:55:59] <A_Dragon> its like knowing how to access private members. Its possible but you really need to think very hard about why you want to do this
[14:56:37] <A_Dragon> if you just want to muck with C in go you can `import "C"` and go nuts
[14:56:40] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[14:57:26] *** Joins: j00n (~mario@user/j00n)
[14:57:48] <A_Dragon> but again, if you're new to go, start with go
[14:57:55] <A_Dragon> dont start with making Cs mistakes in go
[14:58:46] <albertito> toretto: there are other ways of allocating memory. `a := [32]byte{}` also allocates, for example. append() calls might also allocate. The idea is that you don't have to worry too much about it (you should keep an eye on consumption, of course, but not about manual allocation and freeing)
[14:59:34] <A_Dragon> as a caveat to the aforementioned dont worry about it, if you _know_ the size of a slice, or an approximate size, its a good idea to use make() to provide the cap you need
[14:59:36] <toretto> i guess, this is stack allocation, right albertito ?
[14:59:37] <A_Dragon> it'll be faster
[14:59:42] <A_Dragon> toretto: it depends
[14:59:48] <toretto> hm
[15:00:04] <A_Dragon> if its passed around it'll be alloced on the stack, otherwise heap, IIRC
[15:00:15] <toretto> i was talking about this example, `a := [32]byte{}`
[15:00:17] <A_Dragon> but dont quote me on that Im not sure
[15:00:26] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[15:00:31] <A_Dragon> but also it falls under "it doesnt matter"
[15:00:39] <ikke> A_Dragon: wouldn't that be the other way around?
[15:00:40] <nevivurn> The compiler (tries to) figure out whether the value "escapes" and thus needs to be allocated on the heap and such.
[15:00:48] <albertito> toretto: as A_Dragon says, the compiler will do escape analysis and allocate on the heap if the data will exist beyond the function
[15:00:56] <A_Dragon> ikke: yes sorry
[15:00:57] <b0nn> heap allocation happens if the object is shared, or too big for the stack
[15:01:01] *** Joins: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net)
[15:01:03] <nevivurn> You may need to know that if you're really sensitive about performance, but usually it falls under "it doesn't matter" as others have said
[15:01:18] <A_Dragon> there are ways to force the compiler to stack allocate things
[15:01:26] <A_Dragon> but... again, dont do this unless you KNOW what you're doing
[15:01:46] <ikke> And I suppose the size of the data also matters?
[15:01:46] <A_Dragon> go has a few knobs that arent shared widely because they can be badly abused and are almost never needed
[15:01:55] <A_Dragon> noescape is one of them, linkname is another
[15:02:32] <toretto> i learn a language by messing around, trying to do all the bad things and checking out things. it's something freedom to learn the language to flex it.
[15:02:54] <toretto> i'm trying to relate it to my main language, C so that it's easy to get me going with go
[15:03:17] <albertito> toretto: that's ok, you do you :)  people are letting you know what's "normal" and what isn't so you're aware of where the expected edges are
[15:04:01] <toretto> that's also the reason why i'm asking on doing all the bad things.
[15:04:26] <A_Dragon> welp Ive given you a bunch of keywords to ddg, go nuts
[15:04:51] <A_Dragon> read docs carefully
[15:05:02] <A_Dragon> and remember that when it breaks you get to keep the pieces :D
[15:06:00] <ikke> :D
[15:09:35] <b0nn> If you're really bored, the "Compiler directives" are called Pragma in the Go source code https://github.com/golang/go/blob/ef57834360cf69f2e8b52b32c7a05d96bf6bbba7/src/cmd/compile/internal/noder/lex.go#L25
[15:09:38] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[15:10:12] <A_Dragon> hmm are some of those new or have I just never touched quite that many
[15:12:02] <b0nn> Pragmas are not part of the language. They might be implemented the gc compiler, but you will not find them in the spec. At a higher level, the idea of adding pragmas to the language caused considerable debate, especially after the first few established a precedent.
[15:12:05] *** Joins: iivvoo (~l@m3r.nl)
[15:12:18] <A_Dragon> yeah
[15:12:25] <b0nn> Rob Pike's opinon on one in particular https://github.com/golang/go/issues/12312#issuecomment-137192328
[15:12:30] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:12:40] <A_Dragon> they're knobs to mess with gc that dont include any promises for compat
[15:12:42] <b0nn> The info is from Dave Cheney's blog
[15:12:56] <b0nn> https://dave.cheney.net/2018/01/08/gos-hidden-pragmas
[15:13:13] <A_Dragon> yeah Ive read that, though apparently I need to reread it
[15:13:19] <toretto> i'm running this tiny program: https://termbin.com/1pp2 i'm not sure why when i see the process resource utilization, it langues 4 or 5 processes concurrently
[15:13:35] <A_Dragon> I almost never use compiler directives
[15:13:38] <A_Dragon> Ive never had the need
[15:13:40] <toretto> *launches\
[15:14:02] <A_Dragon> define launches?
[15:14:05] *** Joins: mickey8 (~user@user/mickey)
[15:14:11] <A_Dragon> it might run multiple threads for background goroutines
[15:14:20] <A_Dragon> not sure any will be running there but it might
[15:14:36] <b0nn> toretto: https://pkg.go.dev/cmd/objdump
[15:15:23] <A_Dragon> or throw it at godbolt
[15:15:34] *** Joins: Snyp (~rksht@49.207.202.63)
[15:15:52] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[15:16:05] <toretto> oops, sorry, i mean threads
[15:16:08] <toretto> multiple threads
[15:16:12] <toretto> sorry about that
[15:18:41] <b0nn> toretto: Go has Ms (Machine threads), Ps (virtual processors), and Gs (goroutines)
[15:19:06] <b0nn> It's only supposed to use $GOMAXPROCS (Machine) threads
[15:19:25] <b0nn> but it will launch more if one blocks on IO
[15:19:36] <nevivurn> b0nn: isn't GOMAXPROCS == P, not M?
[15:19:38] <b0nn> none of these things should be happening in the code you presented :)
[15:20:41] <nevivurn> Since stuff like blocking syscalls can and will create more than P Ms, but GOMAXPROCS=P so only GOMAXPROCS threads can be executing Go code simultaneously.
[15:20:44] <toretto> interesting.
[15:20:57] <toretto> but i've seen multiple threads on the `ps` output though
[15:21:10] <A_Dragon> it might have started them for the prints
[15:21:15] <b0nn> Go will spin up > GOMAXPROCS when a thread blocks
[15:21:19] <A_Dragon> ^
[15:21:37] <toretto> i see, makes sense.
[15:21:41] <nevivurn> Plus the Go runtime has a bunch of "system" goroutines for stuff like GC
[15:21:53] <toretto> that's nice. looks like i don't have to mess with pthreads and such.
[15:22:21] <toretto> well, nevermind.
[15:24:08] *** Quits: revolve (~u0_a227@82-132-247-150.dab.02.net) (Read error: Connection reset by peer)
[15:24:24] *** Joins: hamess (~hamess@user/hamess)
[15:24:58] <A_Dragon> hmm?
[15:26:05] *** Joins: revolve (~u0_a227@82-132-244-122.dab.02.net)
[15:27:30] *** Joins: prophet60091__ (~prophet60@87.122.100.181)
[15:29:53] *** Quits: src_ (~src@user/src) (Ping timeout: 252 seconds)
[15:32:16] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[15:32:31] *** Joins: mickey8 (~user@user/mickey)
[15:34:43] <toretto> ah, there is no pointer to array decay in golang like we do in C
[15:35:27] <A_Dragon> there can be some weird edge cases with slices of slices
[15:37:24] *** Quits: hendry (~hendry@210.23.22.2) (Quit: brb)
[15:39:42] *** Joins: hendry (~hendry@210.23.22.2)
[15:47:37] *** Quits: independent56 (~independe@211.red-193-153-30.dynamicip.rima-tde.net) (Ping timeout: 245 seconds)
[16:04:40] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:07:29] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:17:19] *** Quits: Snyp (~rksht@49.207.202.63) (Quit: WeeChat 3.2)
[16:26:56] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[16:28:11] *** Joins: jinie (~jimmy@188.114.173.37)
[16:31:53] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[16:39:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:40:40] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[16:44:49] *** Joins: oxum (~oxum@106.203.207.2)
[16:46:04] *** Joins: Guest82 (~Guest82@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de)
[16:49:26] *** Joins: bkircher (~bkircher@2001:a61:2519:db01:176e:925b:7477:589e)
[16:49:57] *** Quits: Deknos (~someone@2001:a61:34ed:d601:3969:a1d4:9377:6c28) (Changing host)
[16:49:57] *** Joins: Deknos (~someone@user/menace)
[16:49:59] *** Joins: g2anj_ (~v@58.227.244.56)
[16:50:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[16:52:03] *** Joins: fikran (~fikran@user/fikran)
[16:53:19] *** Quits: g2anj (~v@221.142.186.101) (Ping timeout: 265 seconds)
[16:57:22] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[17:01:51] *** Joins: jinie (~jimmy@188.114.173.37)
[17:04:19] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:11:24] *** Quits: Guest82 (~Guest82@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de) (Quit: Client closed)
[17:13:35] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[17:13:47] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[17:14:19] *** Joins: jinie (~jimmy@188.114.173.37)
[17:14:38] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[17:17:29] *** Joins: oxum (~oxum@106.203.207.2)
[17:18:29] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:18:43] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Quit: mikoto-chan)
[17:29:04] *** Quits: normen (~normen@p200300d7173dc9007177f5265d9006c8.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[17:30:22] *** Quits: oxum (~oxum@106.203.207.2) (Remote host closed the connection)
[17:34:39] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[17:41:52] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 258 seconds)
[17:42:22] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[17:47:27] *** Joins: Atque (~Atque@user/atque)
[17:55:40] *** Quits: prophet60091__ (~prophet60@87.122.100.181) (Read error: Connection reset by peer)
[18:03:04] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:03:45] *** Joins: Guest85 (~Guest85@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de)
[18:10:05] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:10:34] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[18:10:59] *** Joins: oxum (~oxum@106.203.207.2)
[18:11:04] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Client Quit)
[18:11:36] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[18:12:41] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[18:13:09] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:14:31] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[18:15:46] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 240 seconds)
[18:15:54] *** Quits: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:16:33] *** Joins: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com)
[18:25:52] *** Parts: hamess (~hamess@user/hamess) (gone)
[18:27:28] *** Joins: jinie (~jimmy@188.114.173.37)
[18:29:01] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[18:30:56] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-23.prtc.net)
[18:32:08] *** Joins: jinie (~jimmy@188.114.173.37)
[18:44:26] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95)
[18:45:51] *** Joins: ewintr (~ewintr@89.205.137.199)
[18:46:08] *** Joins: goldfish (~goldfish@user/goldfish)
[18:52:07] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:53:06] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[18:54:27] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:55:52] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[18:59:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:01:09] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 258 seconds)
[19:01:21] *** Joins: fikran (~fikran@user/fikran)
[19:04:24] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[19:05:34] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-23.prtc.net) (Ping timeout: 246 seconds)
[19:05:51] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d872:f90:6e12:f95) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[19:10:38] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:12:00] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:12:43] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a)
[19:13:34] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:14:46] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[19:15:30] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[19:18:50] *** Joins: mrig (~mrig@user/mrig)
[19:26:18] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[19:31:08] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[19:31:27] *** Joins: goldfish (~goldfish@user/goldfish)
[19:32:20] *** Joins: LiftLeft (~LiftLeft@191.96.227.30)
[19:34:58] *** Quits: Guest85 (~Guest85@p200300c8cf22760017ceb0ec51323e51.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:35:08] *** Quits: ewintr (~ewintr@89.205.137.199) (Quit: IRC for Sailfish 0.9)
[19:36:25] *** Joins: ewintr (uid512156@id-512156.stonehaven.irccloud.com)
[19:38:33] *** Quits: ewintr (uid512156@id-512156.stonehaven.irccloud.com) (Client Quit)
[19:43:46] *** Joins: oxum (~oxum@106.203.207.2)
[19:48:10] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 240 seconds)
[19:49:58] *** Joins: Guest85 (~Guest85@p200300c8cf22760048c263663174e9c2.dip0.t-ipconnect.de)
[19:53:29] *** Joins: ewintr (sid512156@id-512156.stonehaven.irccloud.com)
[20:07:09] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[20:07:23] <lauraaah> Hi
[20:07:26] <rawtaz> lo
[20:07:33] <rawtaz> one more nut to the pile of nuts
[20:07:37] <rawtaz> welcome
[20:07:49] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:09:29] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[20:11:22] *** Quits: f8l122 (~f8l12@191.96.227.79) (Ping timeout: 258 seconds)
[20:12:39] <lauraaah> Thanks:|
[20:13:31] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[20:13:32] <rawtaz> :3
[20:14:35] <lauraaah> 🤨
[20:32:02] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[20:33:09] <lauraaah> So quiet in here
[20:33:43] *** Joins: jinie (~jimmy@188.114.173.37)
[20:35:38] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[20:41:10] *** Joins: codebam (~codebam@user/codebam)
[20:48:23] <rawtaz> yep
[20:48:30] <rawtaz> sunday morning in the US i guess
[20:50:35] <lauraaah> Is that where u are from?
[20:50:45] <lauraaah> Ur name sounds German or dutch
[20:51:10] *** Quits: nebiros (~nebiros@user/nebiros) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:51:59] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[20:53:08] *** Joins: nebiros (~nebiros@li1848-13.members.linode.com)
[20:53:08] *** Quits: nebiros (~nebiros@li1848-13.members.linode.com) (Changing host)
[20:53:08] *** Joins: nebiros (~nebiros@user/nebiros)
[20:55:17] <rawtaz> nope im in sweden
[20:58:20] *** Joins: me-sudoer-dentne (~Kundargi@45.112.144.181)
[21:08:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[21:09:28] *** Quits: me-sudoer-dentne (~Kundargi@45.112.144.181) (Quit: Leaving)
[21:09:43] *** Joins: me-sudoer-dentne (~dentine@45.112.144.181)
[21:10:52] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:11:20] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a)
[21:13:09] *** Joins: fikran (~fikran@user/fikran)
[21:15:18] <iivvoo> jordgrubar
[21:15:26] <iivvoo> fear my swedish speaking skills
[21:15:46] <fikran> there aren't a lot of TestMain examples out there....at least not on Minio, OpenFaaS and Hugo
[21:16:01] <rawtaz> ha :D
[21:16:16] <rawtaz> you nailed it, jordgubbar is the best :3
[21:16:29] <fikran> I'm coming from the Python world, trying to setup test figures
[21:16:32] <iivvoo> damn, misspelled it.
[21:17:02] <rawtaz> thats fine
[21:17:21] <rawtaz> hm is TestMain a special thing compared to otehr tests?
[21:18:19] *** Quits: Logiar (~logiar@nerdsluts.net) (Quit: Off I went.)
[21:18:47] <fikran> its likethe main function that is run before all tests
[21:19:05] <fikran> I rebuild this map pretty consistently when I run tests
[21:19:11] <fikran> and I would prefer to just abstract that code out somewhere...
[21:19:36] <rawtaz> oh ok so its a function that runs before the tests
[21:19:47] <fikran> yeah, the documentation on it is pretty light but that's what it says
[21:20:34] <iivvoo> hmm, wasn't aware TestMain is a thing. Never really needed it
[21:21:40] <iivvoo> fikran could t.Run() be an option for you? Be aware that the fixture won't be reset between tests invocations, though.
[21:21:57] <iivvoo> lauraaah are you dutch / german?
[21:26:36] <iivvoo> I don't get the impression TestMain is generally needed/used for regular test setups
[21:27:04] <lauraaah> iivvoo: no I'm from Northern Ireland
[21:27:45] *** Joins: dr0n (~dr0n@94.11.23.235)
[21:28:25] *** Joins: Logiar (~logiar@nerdsluts.net)
[21:28:38] <iivvoo> ah cool
[21:28:52] *** Quits: me-sudoer-dentne (~dentine@45.112.144.181) (Quit: Leaving)
[21:29:16] <lauraaah> Where r u from?
[21:29:41] <iivvoo> netherlands. Don't see many dutchies here, hence why I was wondering
[21:29:51] <iivvoo> (or I just don't know they're Dutch)
[21:30:42] <lauraaah> Ohh
[21:30:49] <lauraaah> I was there long time ago
[21:33:20] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:34:29] *** Joins: yelnah (~felix@2001:44b8:308c:9a:6f0:21ff:fe3c:d4d7)
[21:34:48] *** Quits: ofh (~felix@2001:44b8:309b:14b:6f0:21ff:fe3c:d4d7) (Ping timeout: 276 seconds)
[21:36:39] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[21:38:31] <toretto> Is this the only way to deference structure members in go? like `(*foo).member` assuming `foo` is a pointer to a structure.
[21:39:10] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[21:39:11] <toretto> Is there go's version of `->` operator?
[21:39:16] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[21:39:16] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[21:39:32] <iivvoo> toretto: no, it's '.' for both pointers and instances
[21:39:49] <iivvoo> and yeah, that's how you dereference (if you have to)
[21:43:02] <toretto> i see
[21:43:38] <seebs> there's no `->` operator because it's automatic; if you try to refer to a member of a struct, but you have a pointer of a struct, the compiler does what you meant.
[21:43:52] <seebs> in retrospect, i think this would have been a perfectly reasonable choice for C, too, and i wish they'd done it.
[21:44:39] <iivvoo> yeah I had to look up if '->' did anything special in C/C++ but it's only when accessing on a pointer vs struct, right?
[21:44:54] <iivvoo> been too long since I did C/C++
[21:45:45] <foobaz> that's correct, x->y is the same as (*x).y
[21:46:43] <foobaz> and also the same as x[0].y
[21:47:40] *** Joins: independent56 (~independe@46.red-88-26-105.staticip.rima-tde.net)
[21:47:46] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[21:48:03] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[21:49:31] <seebs> yeah. and there's no circumstance where it's ambiguous, or where you have a thing which could be accessed with either but do different things, so... it'd have been simpler to just say that . is how you reference members of structs, whether or not what you have is actually a pointer to a struct.
[21:51:06] <toretto> it's syntactic sugar
[21:51:13] <toretto> that's it
[21:51:15] <toretto> in C
[21:53:10] <toretto> It's interesting to see few bad C practices are being made automagically good in Golang
[21:53:47] <toretto> But, I'd have loved array to pointer decay :P
[21:54:42] *** Quits: revolve (~u0_a227@82-132-244-122.dab.02.net) (Ping timeout: 245 seconds)
[21:54:49] <foobaz> the thing i miss most from C is implicit cast to bool, i want to do "if err" instead of "if err != nil"
[21:55:36] <foobaz> it's also common to compare integers to zero, e.g. "if len()"
[21:56:05] *** Joins: revolve (~u0_a227@82-132-246-47.dab.02.net)
[21:57:25] <toretto> ah, yeah. i miss that one too.
[21:59:53] <nitrix> "Implicit cast" is tautological. A cast is an explicit conversion. Also, arrays don't "decay", the array stays the exactly the same, it's expressions with an array type that gets converted (and not all the time).
[22:00:40] *** Joins: toretto_ (~0xe3b7@45.15.16.60)
[22:02:42] *** Quits: toretto (~0xe3b7@user/toretto) (Ping timeout: 252 seconds)
[22:03:51] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[22:05:39] *** Joins: toretto (~0xe3b7@user/toretto)
[22:07:40] <nitrix> The [] subscript operator has a lexical equivalent, where E1[E2] is identical to (*((E1)+(E2)), see C11 6.5.2.1p2, but the -> operator doesn't have such lexical equivalence. The best we have is Footnode 96 involving the & operator, but footnotes aren't normative.
[22:08:41] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[22:08:58] *** Quits: toretto_ (~0xe3b7@45.15.16.60) (Ping timeout: 256 seconds)
[22:10:15] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[22:10:33] <toretto> ah, i see nitrix
[22:12:49] <nitrix> Go is indeed much simpler :P
[22:18:42] *** Joins: cmj (~cmj@68.207.254.124)
[22:20:21] <oliv3> hmm i have GC issues :/
[22:21:12] <oliv3> in my genetic algorithm, i have a population of 25k chromosomes (that are slices) in a big slice
[22:21:45] <oliv3> i create a new population, evoluate it, then basically replace the old one by the computed one in an infinite loop
[22:22:21] <oliv3> so i'd have expected the "old" population would have been somewhat freed / replaced by the new one
[22:22:27] <oliv3> looks like it's not
[22:23:04] <oliv3> memory usage grows up like mad, until the process is terminated by the OOM killer
[22:23:07] <oliv3> but
[22:23:30] <oliv3> if i manually run runtime.GC() at the end of each iteration, memory is stable
[22:24:09] <oliv3> so i'm wondering why the GC is not figuring out that there's indeed memory that can be freed by itself
[22:25:24] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[22:26:52] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a)
[22:26:57] *** Quits: crazymax- (~crazymax@195-154-253-234.rev.poneytelecom.eu) (Quit: Bye!)
[22:30:12] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Read error: Connection reset by peer)
[22:30:23] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[22:31:59] *** Joins: mrig (~mrig@user/mrig)
[22:31:59] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[22:33:09] *** Joins: crazymax (~crazymax@195-154-253-234.rev.poneytelecom.eu)
[22:33:11] *** Quits: crazymax (~crazymax@195-154-253-234.rev.poneytelecom.eu) (Changing host)
[22:33:11] *** Joins: crazymax (~crazymax@user/crazymax)
[22:33:48] *** Joins: jinie (~jimmy@188.114.173.37)
[22:38:36] <CommunistWolf> oliv3: the GC only runs sometimes. from memory, one of the times it *doesn't* run is if you're in a tight loop like the one you describe
[22:39:17] <oliv3> oh
[22:39:51] <CommunistWolf> https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html
[22:39:51] <oliv3> is this documented somewhere ?
[22:40:10] <oliv3> thanks !
[22:40:22] <CommunistWolf> I only know it as tribal knowledge ^^
[22:42:32] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[22:42:44] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 252 seconds)
[22:43:15] *** Joins: arcatech (~arcatech@user/arcatech)
[22:44:46] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[22:48:38] <foobaz> i think it's far more likely that the GC is working fine and oliv3's program is holding onto old values somewhere
[22:48:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 272 seconds)
[22:49:49] <oliv3> here's the main loop https://gitlab.com/oliv3/gapic/-/blob/master/gapic.go
[22:49:51] <foobaz> GC will only collect memory if it can verify it is not in use, so if some variable is still holding a value, it will not collect it, even if your program will never use that value again
[22:50:30] <oliv3> esp. L68
[22:51:21] <oliv3> foobaz: well all i can say is that the GC is correctly working, but that i have to call it by hand
[22:51:39] <oliv3> *working correctly
[22:52:34] <foobaz> that's a good point, that does indicate you're not holding onto old values
[22:52:49] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[22:53:16] <lazyreader> The GC might be waiting for a quiescent period to run?
[22:53:28] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:54:01] <foobaz> it would be strange for it to assume there will be a quiescent period when so many programs do not have them
[22:57:25] <seebs> GC does not wait for quiescent periods to run.
[22:57:38] <lazyreader> I wonder why isn’t not triggering here then
[22:57:47] <seebs> what version of go?
[22:57:53] <seebs> there's been changes to GC behavior over time.
[22:58:38] <seebs> i mean, i'd probably suggest that the obvious solution would be to explicitly use a pool for the slices, at this point, but also worth checking whether newer go handles this better.
[22:58:48] <seebs> In theory, though, anything that can allocate should be able to cause garbage collection to progress.
[22:59:43] <seebs> and two topics back: i think that it's true that arrays-themselves don't "decay", but the usage of "decay" to refer to the process by which the name of an array is interpreted just as its address in some but not all contexts is pretty well-established in the field (for C).
[23:00:14] <foobaz> oliv3: how much memory does it use with the runtime.GC() hack, and how much memory does it use before OOM kills it?
[23:00:23] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:01:01] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[23:03:10] <foobaz> if you're running close enough to the limit, GC might not kick in soon enough
[23:03:10] <seebs> side note, there's probably a lot of opportunities here for significant improvements.
[23:03:33] <oliv3> seebs: go version go1.15.9 linux/amd64
[23:03:35] <foobaz> if so, there are better solutions than calling runtime.GC yourself
[23:03:56] *** Quits: independent56 (~independe@46.red-88-26-105.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[23:04:03] <seebs> 1.15 might be old enough to have missed one or two of the updates, and calling GC is a very expensive solution.
[23:04:07] <oliv3> foobaz: with the runtime.GC() hack, memory consumption is 2.7Go out of 8 available
[23:04:23] <seebs> oh, huh.
[23:04:44] <seebs> at that point you might just be hitting "the GC will let you run a bit over that", which might be enough to cause the problem you're seeing.
[23:04:47] <oliv3> seebs: debian packages are outdated ? i'm running debian/testing
[23:05:05] <seebs> debian absolutely *never* keeps languages "current", for probably sound reasons.
[23:05:23] <foobaz> 1.15 is new enough to have good GC, improvements from a newer version would be minor
[23:05:30] <oliv3> i'd have thought testing was relatively recent
[23:05:31] <seebs> so current is 1.16.7, and 1.17 is close-to-release, i think.
[23:05:42] <seebs> relatively, yeah. it's not insane, anyway.
[23:05:58] <seebs> although the most recent 1.15 was 1.15.15.
[23:06:16] <foobaz> oliv3: try setting the environment variable GOGC to 50, take out the runtime.GC() call, and see if that fixes it
[23:06:22] <Tv_> CommunistWolf: afaik GC can pause tight loops these days, articles from 2018 aren't the most reliable on optimization details
[23:06:38] <seebs> so in general, if your steady state is using about 2GB, the GC will try not to exceed 4GB, but will sometimes go a bit over. But if your usage is really bursty and involves single huge batches of allocations, then you will absolutely end up at 2x-3x that sometimes.
[23:06:40] <CommunistWolf> that's ok, I didn't learn about it from that article
[23:06:51] <CommunistWolf> just reassuring myself that I wasn't making it up
[23:07:05] <seebs> The tight loop thing hasn't been true for a while, and oliv3's code isn't tight enough to count anyway.
[23:07:10] <seebs> it has channel operations and things.
[23:07:18] <seebs> and it's calling a function that uses a waitgroup.
[23:07:45] <seebs> i would basically not recommend running a Go program which needs >2GB of memory at a time with only GB available, the oom killer is pretty aggressive sometimes.
[23:08:05] <seebs> also, the `roulette` function in there is possibly wrong and certainly very inefficient.
[23:08:48] <seebs> observation #1: using crypto/rand is almost always unnecessary and slow.  observation #2: you're using crypto/rand to compute a bignum int in a range bounded by the bignum of an int64. observation #3: you're then comparing a uint64 to the number in that range that you obtained.
[23:09:01] <seebs> there's no reason for the bignum code to be involved here at all.
[23:09:50] <foobaz> GOGC is 100 by default, setting it to 50 tells go to spend 2x as much time performing GC in order to achieve 25% lower memory usage
[23:10:16] <seebs> not necessarily 2x. it might spend virtually no time performing GC in order to obtain that.
[23:10:40] <foobaz> true, and it might be better than 25% gains too, my numbers are approximate
[23:10:41] <seebs> if you write something that just doesn't produce much garbage, the default "every couple of minutes" will satisfy the 50% overhead anyway.
[23:11:35] <seebs> oh, also, since `num.Uint64()` will never change, it'd make more sense to compute it before the loop.
[23:12:37] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 245 seconds)
[23:13:05] <oliv3> the compiler doesn't optimize that ??
[23:13:26] <foobaz> go is not very good at optimization
[23:13:27] <seebs> why would it?
[23:13:39] *** Quits: LiftLeft (~LiftLeft@191.96.227.30) (Ping timeout: 252 seconds)
[23:13:51] <oliv3> because it's constant ?
[23:14:06] <foobaz> the compiler doesn't know that because it's a function call to a different package
[23:14:23] <oliv3> hmmm k
[23:14:35] <foobaz> and it's only constant if the value doesn't change, which would require go to know the behavior of functions in a different package
[23:14:44] <oliv3> yeah yeah
[23:15:12] <seebs> and really, the bignum stuff is completely unnecessary here. crypto/rand is basically never the right package to use
[23:15:42] <foobaz> crypto/rand is the right package to use, if you are seeding math/rand :)
[23:17:00] <foobaz> go does have good profiling tools, i suggest looking into them once you have everything working
[23:17:06] *** Quits: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:17:25] *** Quits: ewintr (sid512156@id-512156.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[23:17:25] *** Quits: hdm (sid500490@aha/hacker/hdm) (Read error: Connection reset by peer)
[23:17:25] *** Quits: jzelinskie (sid17772@user/jzelinskie) (Read error: Connection reset by peer)
[23:17:25] <oliv3> it's working :)
[23:17:26] <foobaz> https://pkg.go.dev/runtime/pprof
[23:17:37] <foobaz> did GOGC=50 fix it?
[23:17:40] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 258 seconds)
[23:17:45] <oliv3> not tried yet
[23:17:48] *** Quits: cespare (sid330206@id-330206.stonehaven.irccloud.com) (Ping timeout: 268 seconds)
[23:17:54] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 240 seconds)
[23:18:04] <seebs> i do not think crypto/rand is necessary/useful for most cases, even for seeding math/rand, because you may just Not Care about the seed quality, etc
[23:18:07] <Tv_> oliv3: also big.Int is a []byte underneath, where as uint64 is a [8]byte; the slice is always going to need extra indirection, storing length, etc
[23:18:23] <Tv_> oliv3: that kind of a difference just simply won't be optimized out
[23:18:40] *** Joins: BUSY (~BUSY@user/busy)
[23:19:00] <seebs> I think in C++ you could conceivably have a library annotated enough that a compiler would figure out that it was safe to cache the result of the call, but like.
[23:19:02] <Tv_> seebs: even more to the point, this sort of purely deterministic simulation sounds like a prime candidate for taking a prng seed, for debugging etc
[23:19:10] <foobaz> go's weak optimization fits in with its strong emphasis on reliability
[23:19:26] <foobaz> aggressive optimization in C has caused numerous bugs
[23:19:39] <seebs> I've seen C++ optimize away an entire hash process and duplicate-count on a hash because it realized that the hash had a bug and all 2^64 instances of the hash run on different strings with a poisoned prefix would yield the same result
[23:19:45] *** Quits: jakesyl (sid56879@id-56879.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[23:20:04] <foobaz> and you can still get excellent performance in go by profiling and hand-optimizing your hot spots
[23:20:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:20:23] <seebs> yeah
[23:20:38] *** Quits: lebster (sid17131@id-17131.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[23:21:02] *** Joins: lebster (sid17131@stonehaven.irccloud.com)
[23:21:02] *** Joins: Manouchehri (sid384576@stonehaven.irccloud.com)
[23:21:10] <foobaz> was that with -O3?
[23:21:21] <oliv3> foobaz: GOGC=50 seems to do the trick, yay
[23:21:24] *** Joins: hdm (sid500490@aha/hacker/hdm)
[23:21:24] *** Joins: cespare (sid330206@stonehaven.irccloud.com)
[23:21:26] <foobaz> awesome
[23:21:32] <Tv_> "advanced optimization" is code for "bug-to-mystery converter"
[23:21:46] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[23:21:53] *** Joins: ewintr (sid512156@id-512156.stonehaven.irccloud.com)
[23:22:07] *** Joins: jzelinskie (sid17772@user/jzelinskie)
[23:22:09] *** Joins: morgabra (sid500580@user/morgabra)
[23:22:19] <foobaz> i've had bugs with -O3 that i could not figure out, i managed to get it working (still with -O3) by rearranging code but i never understood what the optimizer was doing
[23:22:21] *** Joins: jakesyl (sid56879@id-56879.stonehaven.irccloud.com)
[23:22:28] *** Joins: fikran (~fikran@user/fikran)
[23:22:48] <Tv_> also this tale is from ~2001, but back then our C code was often faster with -Os than -O3
[23:23:38] <oliv3> seebs: soo, what should i do about the crypto/rand/bigint stuff ?
[23:23:44] <foobaz> apple used -Os to compile macos and its apps for a very long time, they may still today
[23:24:07] <foobaz> ios too
[23:24:18] <seebs> I'd say just Don't Use It. Don't use crypto/rand, don't use math.Big, just use rand.Uint64n() or whatever it is if you want a uint64 in a given range.
[23:24:50] <seebs> For quite a while, it wasn't even considered "supported" to build Linux for ARM with any -O other than -Os, and that includes -O0 or -O1.
[23:25:12] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:bc0c:ac81:221:189a) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:25:30] <oliv3> seebs: ok, will look at that
[23:25:36] <foobaz> if you use math/rand, be aware that it produces the same values every time by default, if you want different values on each run you need to seed it
[23:25:39] <oliv3> thanks all !
[23:25:55] <oliv3> yeah of course
[23:26:12] <foobaz> glad to help
[23:26:34] <oliv3> the only times i force a random seed is for my reproducibility tests
[23:26:48] <oliv3> s/random/particular
[23:27:02] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[23:28:47] <seebs> I don't understand why things like singleCrossover are taking *Chromosome.
[23:29:12] *** Joins: CoolerY (~CoolerX@user/coolerx)
[23:29:13] <seebs> Also, you might want to look into copy()
[23:29:22] <seebs> for i := p; i < int64(size); i++ {
[23:29:22] <seebs> 		child1[i] = (*parent2)[i]
[23:29:22] <seebs> 		child2[i] = (*parent1)[i]
[23:29:22] <seebs> 	}
[23:29:48] <seebs> copy(child1[p:p+size], parent2[p:]); copy(child2[p:p+size], parent1[p:])
[23:30:07] <seebs> and you can actually do slightly better by just writing it as three copies, one [0:p], one [p:p+size], and one [p+size:]
[23:30:10] <oliv3> good catch, i use copy() elsewhere though, didn't do it here for god knows why reason
[23:31:03] <seebs> in general, i'd probably take Chromosome, rather than *Chromosome, as args there, although to be fair, that is three words being passed instead of one, but oh well.
[23:31:05] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[23:31:35] <seebs> 		var delta int32 = int32(chrom[i]) - int32(solution[i])
[23:31:35] <seebs> 		var score uint32 = uint32(255 - math.Abs(float64(delta)))
[23:31:35] <seebs> 		fitness += uint64(score * score)
[23:31:47] <seebs> any time you're squaring an absolute value, you should stop and consider your life choices
[23:32:04] <oliv3> hahahahaaaa right =))
[23:32:06] <seebs> i guess that's not quite squaring an absolute value, hmm.
[23:32:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[23:33:03] <seebs> but also the conversion via float64 is probably less efficient than just "if x < 0 { x = -x }", probably.
[23:33:21] *** Joins: sshow_ (~sshow@neo.hackeriet.no)
[23:33:21] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[23:33:43] *** Joins: thing (~thing@user/thing)
[23:34:01] <seebs> you seem to be shuffling types up a lot, though, and that's probably inefficient. you've got bytes, and then you've got int32s, and then uint32s, and then uint64s.
[23:34:33] <seebs> so, i assume the intention here is that you don't want a 0 and a 255 to count as close?
[23:34:42] *** Quits: bkircher (~bkircher@2001:a61:2519:db01:176e:925b:7477:589e) (Ping timeout: 245 seconds)
[23:34:48] <seebs> this seems like something that ought to admit a cool fancy bitwise math hack
[23:35:00] <seebs> well hmm
[23:35:25] <oliv3> the closest the difference to 0, the better the score
[23:37:00] <seebs> yeah. you could trivially make a lookup table for it, i note, but i think 128KB may be large enough that you're better off doing the computations since they're cheap.
[23:37:10] *** Quits: sshow (~sshow@seven.hackeriet.no) (Quit: leaving)
[23:37:32] *** Joins: kodah (~kodah@user/kodah)
[23:37:35] *** sshow_ is now known as sshow
[23:37:46] *** Joins: whoami_ (~whoami@d118-75-170-49.try.wideopenwest.com)
[23:37:52] <foobaz> var scoreSquared = math.MaxInt32 / (delta * delta)
[23:38:05] <foobaz> not the same absolute values, but the same relative values i think
[23:38:10] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[23:38:13] *** whoami_ is now known as whoami
[23:39:17] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[23:39:19] *** Joins: goldfish_ (~goldfish@user/goldfish)
[23:45:39] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:9826:c2f7:659c:9f58) (Ping timeout: 258 seconds)
[23:47:24] <seebs> on further thought: i don't think you want the math.abs, maybe.
[23:47:48] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 272 seconds)
[23:47:52] <seebs> the reason is that if you take the absolute value of the distance, than if a thing is close to 0 or 255, the highest delta possible from it is large, but if it's around 128, the highest delta possible from it is small
[23:48:41] <seebs> and that creates a weird weighting effect, which i suspect isn't really intentional.
[23:49:32] <seebs> just using the uint8(a-b) gets you the unfortunate trait that you can't distinguish between "255 higher" and "1 lower", which i think is probably what you're using the abs for, but the effect ends up being that some things have much broader ranges than others.
[23:49:56] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) ()
[23:50:36] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[23:50:40] *** Joins: darkapex_ (~darkapex@user/darkapex)
[23:51:33] <oliv3> making a 256*256 LUT will be the easiest thing to do IMHO ?
[23:51:53] *** Joins: oxum (~oxum@106.203.207.2)
[23:52:11] *** Joins: darkapex (~darkapex@user/darkapex)
[23:53:24] <foobaz> surely not
[23:53:37] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Quit: Leaving)
[23:54:28] <foobaz> are 0 and 255 considered close or far?
[23:54:57] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[23:56:24] <seebs> the lookup table is certainly *easy*, i'm just not sure it's a good choice -- it's big enough that the cache shuffling to access it could be worse than the arithmetic instructions.
[23:56:32] <seebs> which are mostly trivial.
[23:56:40] <seebs> if it's performance critical, this is probably simd-friendly.
[23:56:46] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 258 seconds)
[23:58:59] <oliv3> performance is not critical, i'm just playing to see what Go can do (had i needed performance, i would have done this with C drivers in a cluster of Erlang nodes :) )
[23:59:44] <oliv3> i see built-in concurrency in Go but no distribution ?
[23:59:49] <seebs> yeah.
