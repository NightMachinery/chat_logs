[00:00:36] <pyzozord> but friend classes seem like language smell to me to be honest
[00:01:05] <teut> friend functions
[00:01:38] <pyzozord> yes you know what I mean, I don't remember c++
[00:01:52] <teut> ok there's friend class too sorry
[00:02:08] <pyzozord> hah! so i remembered correctly :P
[00:02:25] <teut> thats actually nested classes
[00:02:37] <teut> I dont use that kind of stuff
[00:02:49] <teut> not even in python except in django
[00:03:18] <pyzozord> firend classes and nested classes are two different things
[00:03:28] <pyzozord> eh whatever, it's c++
[00:03:30] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 250 seconds)
[00:03:57] <teut> I am starting with c++
[00:04:09] <pyzozord> attempting to learn entire c++ is futile
[00:04:18] <teut> but its 6 months since I started
[00:04:36] <teut> ya, it has too many gotchas
[00:05:15] <pulse> pyzozord, nonsense! they even sell books titled "learn C++ in 21 days"!
[00:05:26] <pyzozord> what's more attempting ot use entire c++ is actively discouraged
[00:05:48] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 240 seconds)
[00:06:06] <teut> is rust going more popular than c++?
[00:06:25] <apotheon> define "popular"
[00:06:30] <pyzozord> pulse: reminds me of https://gabrielcoarna.com/2010/11/05/how-to-teach-yourself-c-in-21-days/
[00:06:30] <bayaz> Title: How to Teach Yourself C++ in 21 Days 
[00:06:36] <teut> easy to find jobs
[00:06:51] <pyzozord> how is it that there is both a meme about it and a serious book about it
[00:06:56] *** Joins: trace987 (~trace@user/trace)
[00:06:57] <pyzozord> who's telling the truth!
[00:07:00] <pyzozord> ?!
[00:07:24] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 250 seconds)
[00:07:30] <apotheon> It's probably easier to get a Rust job if you teach yourself both languages now; if you have extensive experience with both, though, C++ might be an easier for finding a job.
[00:07:53] <apotheon> pyzozord: How do you think the meme got started?
[00:08:04] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[00:08:18] <apotheon> s/an easier/an easier proposition/
[00:08:27] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:09:11] <absentia> 21 days
[00:09:13] <absentia> try 21 years
[00:09:15] <absentia> holy fuck
[00:09:28] <apotheon> Learn C++ In 21 Lifetimes
[00:09:59] <apotheon> Learn Hello World Using C++ In 21 Days
[00:10:11] <flakland> does it at least ship with a compiler or nah?
[00:10:31] *** Joins: filename (~kilitary@185.193.143.131)
[00:10:33] *** Joins: xeyes (~user@user/duuude)
[00:10:44] <pyzozord> nope, a really really messy ecosystem of builder programs which have their own languages to learn
[00:11:24] <pyzozord> oh, and you thought that c++ and the builder is enough? Make sure to learn at least some of your compiler options
[00:11:55] *** Quits: filename (~kilitary@185.193.143.131) (Client Quit)
[00:11:56] * ski . o O ( "Teach Yourself Programming in .." by Peter Norvig at <https://www.norvig.com/21-days.html> )
[00:12:00] <apotheon> just `pkg_add llvm`
[00:12:04] <pyzozord> oh and while you are at it, you also need some os understanding, linkers, loaders, memory model...
[00:12:08] <apotheon> then you have a compiler all set up
[00:12:31] <absentia> `npm install compiler`
[00:12:34] <apotheon> err
[00:12:36] <apotheon> for what
[00:12:41] <absentia> doesn't matter
[00:12:43] <absentia> npm has it
[00:12:49] <pyzozord> apotheon: pretty much, `npm install webpack
[00:13:15] <pyzozord> although webpack has a "respectable" learning curve too
[00:13:16] <apotheon> That's not a C++ compiler.
[00:13:26] <teut> thats aÂ  js bundler
[00:13:31] <teut> minifies your js
[00:13:38] <Sqaure> Im not deep into lowlevel programming. Just curious, what would be the motivations to chose c++ over Rust other than library availability?
[00:13:45] <pyzozord> i thought we were making parallels between c++ and js
[00:13:56] <apotheon> Sqaure: working on projects that already use C++
[00:14:02] <teut> https://pvs-studio.com/en/blog/posts/0733/
[00:14:03] <bayaz> Title: C++ is faster and safer than Rust: benchmarked by Yandex 
[00:14:04] <apotheon> Sqaure: more portable compilers
[00:14:10] <oldlaptop> apotheon: why bother with pkg_add?
[00:14:13] <apotheon> Sqaure: a language that has a specification
[00:14:22] <apotheon> oldlaptop: true, that
[00:14:27] <oldlaptop> surely you don't need *that* up-to-the-minute clang? :P
[00:14:33] <apotheon> probably not
[00:14:42] <apotheon> Okay, here's how you get a compiler or C++:
[00:14:44] *** Joins: filename (~kilitary@185.193.143.131)
[00:14:49] <apotheon> You already have it on OpenBSD.  You're done.
[00:14:57] <teut> is that article good or it lies?
[00:14:59] <apotheon> s/compiler or/compiler for/
[00:15:22] <apotheon> teut: It's all a matter of how you measure it, so . . .
[00:15:24] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[00:15:33] <apotheon> "Is that article good or bad?"  "Yes.  It is good or bad."
[00:15:45] <teut> ya , metrics are a function of the machine they ise
[00:15:48] <teut> use*
[00:16:23] <apotheon> Given four articles, where two say C++ is better than Rust, and two say Rust is better than C++, you might have one of each pair being a good article and one of each pair being a bad article.
[00:16:23] <pulse> i just download visual studio
[00:16:35] <apotheon> . . . so then you have to evaluate your particular needs and decide for yourself.
[00:16:44] <teut> I agree apotheon
[00:16:48] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[00:16:55] <apotheon> I was about to ask why pulse would do that, but then I remembered it's pulse.
[00:17:06] <teut> but for job prospectsÂ  , rust is getting famous by the blockchain peeps
[00:17:14] <pulse> well, i did just configure a c++ env on like 6 machines so ... :p
[00:17:19] <teut> and that job offers huge money
[00:17:22] <pulse> out of all of them windows was by far the easiest :D
[00:17:33] <apotheon> I'm going to configure my machine for C++ dev.
[00:17:36] <apotheon> Okay, done.
[00:17:57] <teut> you used msys pulse?
[00:17:59] <pulse> along with functional autocomplete and debug env and possibly an ide that understands git merge?
[00:18:04] <apotheon> (No, I haven't ever written C++ on this machine; I did not already have it all set up due to having been doing C++ dev already.)
[00:18:28] <pulse> i get all i listed for free in VS, i have to work for it on various linuxes. but it's not too bad once you know what to do
[00:18:48] <pulse> teut, no, visual studio
[00:18:50] <apotheon> I don't need an IDE to understand git merge.  I understand it.
[00:18:56] <teut> lol
[00:19:08] <pulse> "i don't need a powertool to unscrew my screws, i know how a screwdriver works"
[00:19:11] <teut> but the ui is complicated
[00:19:19] *** Joins: k8yun (~k8yun@user/k8yun)
[00:19:22] <pulse> teut, for good reason. it has a lot of features
[00:19:22] <teut> and the project structure too of vs
[00:19:23] <absentia> apotheon: but do you?
[00:19:30] <apotheon> better than the IDE
[00:19:35] <absentia> perhaps
[00:19:44] <apotheon> maybe not better than the IDE devs, but that's a separate matter
[00:20:00] <apotheon> The IDE just automates specific aspects of handling merges.
[00:20:24] <apotheon> . . . and sometimes that can bite you, *hard*, if you don't understand how the IDE does and does not "understand" git merge.
[00:21:09] <apotheon> People who like IDEs a lot pretend that it's all just benefit, but it's always a trade-off.
[00:21:37] <pulse> most IDEs aren't very good. i'd go crazy if i had to use eclipse
[00:21:42] <pulse> but VS is wonderful
[00:21:46] <apotheon> . . . and unlike a power drill with screwdriver bits, an IDE's git integration is not something you just pick up and put down.  It's *integrated*.
[00:22:03] <pulse> it's very helpful according to my direct experience :p
[00:22:03] <apotheon> Eclipse is, indeed, a particularly egregious example.
[00:23:02] <pulse> i'm quite enjoying the linux side of c++ dev too honestly
[00:23:03] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[00:23:03] <apotheon> pulse: Your experience differs from mine, because of a wide range of factors, and that's part of the problem.  When the work you do is defined in part by the tools you choose, you often don't see the cases where it gets in the way.
[00:23:22] <deniska> git is not a screwdriver, git is arc welding, holding an electrode in your bare hands
[00:23:30] <pulse> possibly, but i've yet to meet a c++ professional that would argue against an IDE
[00:23:34] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[00:23:37] *** Quits: u0_a81 (~hexingb@112.21.164.38) (Ping timeout: 256 seconds)
[00:23:45] <pyzozord> pulse: out of curiosity what do you use to edit c++ project on linux?
[00:23:52] <pulse> pyzozord, vscode and vim
[00:24:03] <pyzozord> how do you find vscode for c++?
[00:24:03] <pulse> vscode is fantastic actually
[00:24:06] <pulse> with clangd it's just amazing
[00:24:14] <pulse> pyzozord, what do you mean by "find"?
[00:24:20] <apotheon> I also choose to not be a C++ professional, generally.  There are C++ jobs out there that I might accept, but they're outside the norm.
[00:24:26] <pyzozord> pulse: "how do you like it"
[00:24:29] <pulse> just download vscode and install clangd on top
[00:24:29] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[00:24:51] <apotheon> pyzozord: pulse loves it
[00:24:58] <apotheon> just not as much as VS.NET
[00:25:18] <apotheon> That's my recollection from previous discussions, anyway.
[00:25:36] <rvalue> other than media storage, whats files make sense to put them in an attached external storage for a mac mini?  like can we put large codebases and compile run stuff from there? makes sense to put may be java projects and anything thats not in native language in there but i would like to hear other thoughts
[00:26:06] <absentia> rvalue: things you expect to access infrequently and/or at low read/write speeds
[00:26:14] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[00:26:27] <absentia> i wouldn't compile off a slow drive, it would take longer to read the source off the disk
[00:26:29] <pyzozord> pulse: that might be a translation from dutch, in dutch you can say "Ik vind het goed", "I find it good", which means "I like it"
[00:26:38] <rvalue> absentia: i know.. i m just trying to think examples
[00:26:45] <absentia> rvalue: logfiles
[00:26:55] <rvalue> maven stuff?
[00:27:08] <absentia> i would keep dev stuff in internal storage
[00:27:18] <pulse> pyzozord, oh, you're asking if i find it good?
[00:27:19] <absentia> makes the tooling easier
[00:27:26] <pyzozord> pulse: yeah
[00:27:27] <pulse> pyzozord, it's pretty good, not as good as VS but close
[00:27:30] <absentia> (what happens if the drive is disconnected and i try to build, etc...)
[00:27:34] <apotheon> absentia: Somehow, I don't feel like disk reads are the major bottleneck for C++ compiling.
[00:27:38] *** Joins: pavonia (~user@user/siracusa)
[00:27:41] <absentia> apotheon: for sure
[00:27:42] <apotheon> I could be mistaken, but that doesn't seem like the thing.
[00:27:43] <absentia> it's CPU bound
[00:27:56] <absentia> but question was about storage
[00:28:02] <rvalue> absentia: once the program is loaded, much is in memory so statistically it wouldn't matter right?
[00:28:02] <apotheon> I guess some IDE-generated file hierarchies might be *that* complex . . . maybe.
[00:28:08] <absentia> rvalue: yeah
[00:28:16] <absentia> i guess you'd get a longer "cold boot"
[00:28:21] <absentia> but again as apotheon ultimately negligible
[00:28:25] <rvalue> yea
[00:28:29] <apotheon> 13:57 < pulse> pyzozord, it's pretty good, not as good as VS but close
[00:28:30] <apotheon> nailed it
[00:28:31] <absentia> s/ ultimately/ said ultimately/
[00:28:49] <apotheon> In the immortal words of Emperor Palpatine: "I have foreseen it."
[00:28:55] *** Joins: u0_a81 (~hexingb@180.212.208.186)
[00:29:00] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[00:29:02] <pulse> i even figured out how to make cmake somewhat effectively
[00:29:07] <pulse> i still insist it's the most absurd program in existence
[00:29:10] <pulse> but it does work nice
[00:29:25] <pulse> how to make cmake work somewhat effectively*
[00:29:42] <pyzozord> in a world with honest book titles
[00:29:52] <pulse> i'd watch a honest cmake trailer
[00:29:53] <pyzozord> "how to make cmake somewhat work"
[00:29:59] <pyzozord> "how to learn c++ in 21 months"
[00:29:59] <rvalue> i love cmake.. i have been learning opencv these days and they have a huge cmake config
[00:30:09] <rvalue> its real easy to understand
[00:30:11] <pulse> "in a world, where build environments make no sense ... meet the solution, that makes even less sense.."
[00:30:12] <apotheon> I wish people would stop making build systems that are better and worse at the same time, and just make something that doesn't blow.
[00:31:01] <pyzozord> I also heard of some build system called ninja, but there are others
[00:31:06] <apotheon> I freely admit I'm not qualified to do better.  I just wish more people realized they weren't qualified to do better, either.
[00:31:25] <pyzozord> I know of make, autotools, cmake and ninja, but there are more
[00:31:39] <rvalue> there is bazel too
[00:31:41] <apotheon> Yeah, Ninja is another better/worse build system.
[00:31:42] <rvalue> google uses it
[00:31:54] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[00:31:55] <apotheon> They're all better/worse.
[00:31:57] <pyzozord> oh yeah bazel, I saw something about it today, it was in golang presentation
[00:31:57] <rvalue> seems new because i had never heard of it before
[00:32:17] <deniska> pyzozord: ninja is not exactly a build system, at least not something you'd write directly
[00:32:41] <deniska> pyzozord: it's intended to be configured by something like cmake or meson or whatever
[00:32:51] <pulse> none of this would be a problem if we had one single OS
[00:32:57] <deniska> Also, <3 meson
[00:33:07] <pyzozord> I hear about meson first time
[00:33:14] <pulse> there's also scons
[00:33:16] <deniska> pulse: a single OS with all libraries bundled, single version of them :D
[00:33:24] <pulse> i always find it funny when you go to https://scons.org/
[00:33:25] <bayaz> Title: SCons: A software construction tool 
[00:33:30] <pulse> and the tag on the right says build: failing
[00:33:34] <absentia> lmfao
[00:33:35] <deniska> scons I don't quite like
[00:33:36] <pulse> not inspiring much confidence
[00:33:40] <apotheon> We need a build system that handles portability concerns and dependency management, has good primitives to allow arbitrary scripting, doesn't have built-in assumptions about what kind of editor you're using, and reasonably discourages use for overcomplicated projects without limiting its use for weird edge cases.
[00:34:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:5f00:97ff:5c76:a7e3:730d)
[00:34:06] <flakland> isn't that what version numbers are for?
[00:34:09] <pulse> apotheon: https://xkcd.com/927/
[00:34:10] <bayaz> Title: Standards 
[00:34:16] <apotheon> It also needs an easy onramp to general use by newbies.
[00:34:19] *** Quits: twiclo (~twiclo@66.29.177.50.static.utbb.net) (Quit: WeeChat 3.4)
[00:34:21] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[00:34:25] <pulse> but i agree in principle
[00:34:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:34] <deniska> just adapt cargo to build C++ projects
[00:34:39] <apotheon> 14:02 < pulse> none of this would be a problem if we had one single OS
[00:34:47] <apotheon> only because we'd be dealing with the massive problem of only one OS
[00:35:04] <deniska> apotheon: nah, we had like 70 unixes in the 90s
[00:35:22] <pulse> i think i could hack a build system for windows overnight
[00:35:34] <pulse> if (library not exists) clone library from github and build
[00:35:36] <deniska> apotheon: on which you had to do checks like "does multiplicating integer numbers by 3 work in a supplied C compiler"
[00:35:37] <pulse> there, 90% done
[00:35:54] <deniska> apotheon: hence, autotools
[00:35:59] <absentia> autoconf
[00:36:01] <apotheon> ugh, autotools
[00:36:02] <absentia> holy fukk
[00:36:05] <apotheon> fucking disaster area
[00:36:22] <rvalue> i will use anything which is simple, well documented and/or a helping community and has a syntax that doesnt make me shoot my foot
[00:36:22] <apotheon> I'm half-convinced autotools is just gatekeeping.
[00:36:31] <apotheon> rvalue: so not autotools
[00:36:41] <absentia> ah yes you forgot to burn oil of abramelin and use the secret grip
[00:36:45] <deniska> you may hate on autotools, but it will make a gcc win10 to solaris7 cross-compiler :P
[00:36:50] <flakland> how do you clone a specific version of chrome, they don't publish release tarballs
[00:36:51] <absentia> filthy noob
[00:36:51] * KillerWasp detects an anomaly in the universe, this anomaly can destroy the world, opens his universal machine who was giving the alarm and examines where the anomaly comes from, finds that it comes from planet earth, makes an inventory examining all possible threats, and finds that the origin of the anomaly is some nasty tools called 'ninja' and 'meson', it opens a tool to remove the threats and thereby make the anomalies disappear.
[00:36:58] <KillerWasp> rm ninja meson
[00:37:11] <apotheon> flakland: Google doesn't want you to clone a specific version of Chrome.
[00:37:18] <KillerWasp> Another job well done, the world is safe.
[00:37:24] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 240 seconds)
[00:37:47] <flakland> you might say they are not in software publication, they just grant you a temporary license to access their repository at any given time
[00:37:55] <DPA> I always just use gnu make, and maybe a bit pkgconf.
[00:38:13] <apotheon> I generally use BSD make.
[00:39:00] *** Quits: u0_a81 (~hexingb@180.212.208.186) (Ping timeout: 240 seconds)
[00:39:19] <apotheon> Holy crap, things could be easier if GCC hadn't set "the standard" for how compiler flags are used.
[00:39:22] <apotheon> what a mess
[00:39:39] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:40:52] <deniska> Dunno, I personally enjoy all small and big ways computers are completely broken
[00:41:03] <absentia> deniska: how do you not get burned out from it
[00:41:08] <apotheon> You . . . enjoy brokenness.  Hmm.
[00:41:17] <apotheon> We have found the problem.
[00:41:23] <absentia> constantly babysitting computers is exhausting
[00:41:29] <deniska> absentia: that's the only way not to get burned :)
[00:41:35] <user51> i was annoyed gcc didn't support anonymous local variables
[00:41:36] <absentia> holy fuck
[00:41:44] <absentia> my nerve endings must be immolated by now
[00:41:47] <user51> probably the least of my worries though..
[00:41:59] <apotheon> People who think it's good that computers have problems because it provides job security are people who suffer from the Broken Windows fallacy.
[00:42:06] <flakland> user51 you can flag a variable as "compiler generated"
[00:42:08] <deniska> It's not good, it's just a fact of life
[00:42:11] <DPA> I think what's really missing is a generic linker abstraction. gcc adds standard libs, g++ does, any compiler frontend does when linking. There really should be a generic ld wrapper for that that works for any language.
[00:42:25] <deniska> And you can choose to be extremely irritated by it or not
[00:42:26] <apotheon> (specifically: Windows is broken, and that is a good thing, 'cause $JOB.)
[00:42:35] <deniska> Choosing not to is a healthier choice imho
[00:42:37] <absentia> i think i accept my fate
[00:42:43] <absentia> i live to serve the omnissiah
[00:42:46] <apotheon> (spoiler: It's not a good thing.  You could have a *productive* job, instead.)
[00:42:58] <absentia> i am here to exalt the blessed machine
[00:42:59] *** Joins: Klinda (~superleag@user/klinda)
[00:43:03] <oldlaptop> apotheon: Well, maybe they know better than that.
[00:43:12] <oldlaptop> (i.e. that they couldn't hold down a productive job)
[00:43:14] <deniska> DPA: different languages have a very different idea what "module" or "function" or "argument to a function" mean
[00:43:36] <apotheon> oldlaptop: There's always that possibility.
[00:43:37] *** Quits: newwebdev13 (~newwebdev@78.135.91.153) (Read error: Connection reset by peer)
[00:43:47] <apotheon> oldlaptop: I think they could, though.  It just might involve a broom instead of a keyboard.
[00:43:50] *** Joins: newwebdev13 (~newwebdev@78.135.91.153)
[00:44:03] <absentia> unfortunately productivity and compensation are not well correlated
[00:44:11] <apotheon> That's also unfortunate.
[00:44:18] *** Quits: newwebdev13 (~newwebdev@78.135.91.153) (Read error: Connection reset by peer)
[00:44:27] *** Joins: newwebdev13 (~newwebdev@78.135.91.153)
[00:44:39] <DPA> Sure, but it can still be abstracted away. Linkers just link objects and libs. And this is really just needed for the standard library, which pretty much anyone in any language expects to always be included unless excluded explicitly, if that's even possible.
[00:44:39] <apotheon> We can thank corporations (as distinct from various non-corporate business concerns) for a significant percentage of that.
[00:45:09] *** Joins: u0_a81 (~hexingb@119.163.63.201)
[00:45:27] <deniska> most of the jobs are fairlyâ¦ not good. Programming and computer touching in general is quite cushy and pays relatively well, enjoy while it lasts I guess :)
[00:45:50] <apotheon> Maybe the first step toward doing away with this tangle of build system nonsense is to write wrappers for compilers that are used for "standardizing"/regularizing a lot of stuff that, at present, is very irregular.
[00:46:15] <deniska> apotheon: build systems areâ¦ such wrappers
[00:46:24] <apotheon> not explicitly
[00:46:28] <apotheon> They pretend to be something else.
[00:46:37] <apotheon> . . . and that's a problem.
[00:46:44] <pulse> i heard you like build systems so we made a build system that builds your build system
[00:46:45] <apotheon> Start with little things.
[00:46:53] <apotheon> not with big things
[00:46:54] <deniska> their job is to launch compilers because compilers are generally hard to launch manually
[00:47:18] <apotheon> Build systems are "big things first".
[00:47:35] <apotheon> That makes them more of a pipeline than a wrapper.
[00:49:53] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[00:49:59] <flakland> the only reason build systems exist IMO is to configure source code for host environment
[00:50:15] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[00:50:31] <deniska> pyzozord: if you ever need to write some code in C or C++, consider taking a look at meson to build it, in my experience it works pretty much like magic
[00:50:32] <pulse> configure source code? :p
[00:50:51] <pulse> the real reason build systems exist is because people got fed up with doing the same 3 tasks manually
[00:51:03] <RedNifre> .oO( Nix? )
[00:51:06] *** Quits: u0_a81 (~hexingb@119.163.63.201) (Ping timeout: 256 seconds)
[00:51:15] <pulse> i actually see no problem at all just rolling your own custom build system. if it works for you it's ok
[00:51:16] <beaky> yes meson is like cmake but properly designed and less adhoc
[00:51:32] <pulse> even if your build system is a bunch of python scripts or w/e
[00:51:53] <deniska> meson is fairly adhoc in some respect, it has to be, "ah, yes, we handle zlib this way"
[00:51:57] *** Quits: yo (~ayu@2405:201:5502:83a:2205:4da7:8c0a:818a) (Ping timeout: 240 seconds)
[00:52:18] <deniska> pulse: I wrote ./build.sh more than once
[00:52:31] <pulse> i wrote one that calls cmake
[00:52:31] <deniska> sometimes even ./build.py if things are getting serious
[00:52:32] <pulse> :D
[00:52:46] <pulse> i'm too lazy to type out cmake commands manually
[00:52:48] <deniska> I think jetbrains uses python to build their java projects :)
[00:53:00] <deniska> or at least some of them
[00:53:00] <pulse> yeah, it's very wild west in the real world
[00:53:41] <deniska> and we use makefiles to build python projects (wut) because old perl-shell-C crowd decided they want to switch to python at some point
[00:54:01] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f)
[00:55:36] <DPA> I build whole distro images using make. I really like the level of control I have with make. No magic.
[00:55:57] <absentia> ... until your artifacts exist outside of the filesystem
[00:56:12] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:56:49] <DPA> That's not the job of a build system. That's the job of the package manager.
[00:57:17] <absentia> DPA: ever try taking advantage of build caching when building docker images from a makefile/
[00:59:55] <DPA> No. I never made make create docker images. I may at most call make in a build container.
[01:00:10] *** Joins: u0_a81 (~hexingb@112.21.164.38)
[01:00:38] <pyzozord> deniska: thansk for the tip, I'll take a look. Autotools and cmake were pretty impossible to figure out
[01:01:12] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Quit: ð)
[01:01:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:b63f:5fd6:7c74:2962) (Ping timeout: 240 seconds)
[01:01:30] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[01:01:35] *** Quits: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se) (Ping timeout: 256 seconds)
[01:01:48] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[01:02:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ef0a:b873:5367:9d0e)
[01:03:48] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[01:04:43] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Quit: Konversation terminated!)
[01:04:53] *** Joins: yo (~ayu@2405:201:5502:83a:2205:4da7:8c0a:818a)
[01:04:56] *** Joins: zaher (~zaher@37.48.155.61)
[01:05:07] <davros> webassembly:   the browser would be able to automatically cache a .wasm file, right? 
[01:05:32] <davros> so the second time you hit a page with a sizeable .wasm it would load faster ? 
[01:05:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:06:04] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:06:25] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[01:06:50] <deniska> davros: sure
[01:06:54] *** Joins: trace987 (~trace@user/trace)
[01:09:06] <pyzozord> davros: same as it does with all other assets
[01:11:19] <davros> is there some checksum that goes with that or something
[01:11:40] <pyzozord> no it's just a file, it has an url
[01:12:15] <davros> ( i mean behind the scenes - when the browser caches somethnig ,does it cache a checksum, and ask a server to confirm the asset has this checksum, and update it's copy if not)
[01:12:45] <KillerWasp> Nice, my web now are complete: http://bluebeacon.blackrook.xyz/
[01:12:45] <bayaz> Title: BLUE-BEACON! 
[01:12:47] <DPA> There are multiple mechanisms / http headers.
[01:13:03] <DPA> ETag, Last-Modified, If-Modified-Since
[01:13:12] <KillerWasp> you can change to english by the way
[01:13:49] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:57] <KillerWasp> An excellent software engineering. (Only with IF and CASE)
[01:14:42] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:16:01] *** Joins: LuKaRo (~LuKaRo@p200300dfa72f4b9400000000000001f9.dip0.t-ipconnect.de)
[01:16:20] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[01:16:33] *** Joins: flakland (~flaknet99@32.211.211.39)
[01:17:39] <davros> can a site precache resources that it speculates a future click will require?
[01:18:06] <DPA> I think HTTP/2 has a push mechanism for that purpose.
[01:18:25] <DPA> There also exist service workers for offline use and programatic caching stuff.
[01:18:45] <davros> somethign like - when you're scrolling through  a page of links,  it could be speculatively pushing some assets for those
[01:18:52] <davros> (the ones that are onscreen)
[01:19:04] <DPA> There is also https://developer.mozilla.org/en-US/docs/Web/API/Cache
[01:19:04] <bayaz> Title: Cache - Web APIs | MDN 
[01:21:17] <DPA> Oh, there was also the "application cache" stuff, but I think that one didn't catch on.
[01:21:22] *** Quits: Akuli (~Akuli@87-94-111-226.bb.dnainternet.fi) (Quit: Akuli)
[01:21:39] *** Quits: user51 (~user51@176.228.1.103) (Remote host closed the connection)
[01:22:56] *** Joins: timmy_ (~timmy@c-73-157-183-98.hsd1.wa.comcast.net)
[01:23:15] <timmy_> hello from tty1 lol
[01:23:32] *** Joins: trevors (~trevors@user/trevors)
[01:23:32] <flakland> greetings from tty7
[01:24:36] <timmy_> just figured out a theme for kmscon, so now I feel fairly comfortable with a non-X arch install 
[01:25:00] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[01:25:06] <pyzozord> davros: yes it can, http2 can send things that browser hasn't asked for yet, also javascript fetch things
[01:25:48] <flakland> great, more stuff to disable
[01:26:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:29:15] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[01:29:48] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Read error: Connection reset by peer)
[01:30:38] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[01:32:56] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: WeeChat 3.4)
[01:34:10] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:38:51] <pyzozord> this is not bad https://www.amazon.science/research-areas
[01:38:52] <bayaz> Title: Research areas 
[01:39:01] <pyzozord> are there any more like this one?
[01:39:22] <pyzozord> https://assets.amazon.science/fa/fb/fe142b0c4b3eab3ec3d15794e025/one-click-formal-methods.pdf
[01:39:23] <bayaz> Type: application/pdf Size: 471.2 kB 
[01:40:25] *** Joins: Twipply (~Twipply@user/twipply)
[01:45:45] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[01:49:40] *** Quits: caramel_ (~caramel@user/caramel) (Ping timeout: 250 seconds)
[01:51:34] <pulse> i don't really like marzipan, but i love almonds. how does that work
[01:53:05] *** Joins: filename (~kilitary@185.193.143.131)
[01:54:17] *** Joins: zaher_ (~zaher@37.48.180.59)
[01:57:24] *** Quits: zaher (~zaher@37.48.155.61) (Ping timeout: 256 seconds)
[01:58:50] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:01:06] *** Joins: wildo (~lain6141@119.224.72.222)
[02:01:37] *** Quits: u0_a81 (~hexingb@112.21.164.38) (Ping timeout: 240 seconds)
[02:02:00] *** Joins: filename_ (~kilitary@185.193.143.131)
[02:03:00] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[02:05:08] *** Quits: operateur (~My_user_n@93-87-171-136.dynamic.isp.telekom.rs) (Quit: WeeChat 3.4)
[02:07:46] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[02:09:04] <pulse> hm "fatal: 'dev' could be both a local file and a tracking branch."
[02:09:13] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[02:09:13] <pulse> that's the first time i encounter this lol. so checkout isn't just for changing branches
[02:09:41] <pulse> hmm https://stackoverflow.com/questions/24384951/confused-by-git-checkout/57066202#57066202
[02:09:42] <bayaz> Title: Confused by git checkout 
[02:09:46] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Quit: Quit)
[02:09:54] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[02:10:20] <pulse> i guess i should use git switch
[02:12:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:12:35] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:13:22] *** Joins: u0_a81 (~hexingb@119.163.63.201)
[02:13:54] *** Quits: filename_ (~kilitary@185.193.143.131) (Quit: joined libera)
[02:14:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:16:49] *** Joins: filename (~kilitary@185.193.143.131)
[02:18:07] *** Joins: caramel (~caramel@user/caramel)
[02:20:04] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:20:14] *** Joins: ofl^ (~ofl@50.233.120.162)
[02:22:03] <pyzozord> first time i hear of that too
[02:22:20] *** Joins: filename_ (~kilitary@185.193.143.131)
[02:22:26] <pyzozord> and i used git everyday for the last say 12 years?
[02:22:38] <pyzozord> hmm maybe actually more like 10
[02:22:59] <adder> nice I wish I were a git expert
[02:23:02] <pulse> was early git significantly worse than today's
[02:23:04] <pulse> or more or less the same
[02:23:11] <pyzozord> maybe even 8, there was quite a early period where we just pushed stuff to ftp
[02:23:28] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 256 seconds)
[02:23:42] <pyzozord> adder: I am far from git expert
[02:23:56] <pyzozord> pulse: virtually identical
[02:24:45] <pyzozord> I think there are more commands now, but eh, whatever
[02:26:16] <pulse> cause it's a pretty genius piece of software
[02:26:45] <pulse> to the point where nearly everyone worldwide just goes yeah, we'll use that
[02:26:56] <pyzozord> yep I learned git and never bothered to look at anything else
[02:27:07] <pulse> i used SVN at my first job for a bit
[02:27:11] <pyzozord> only in recent years i have these weird ideas of questioning things
[02:27:50] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[02:27:54] <pyzozord> i heard branches are expensive in svn
[02:28:30] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[02:28:35] <pyzozord> in git they are basically free, you get branch, you get a branch, everyone gets a branch for every day of the week
[02:28:46] *** Joins: Enitin (~Enitin@82.102.22.86)
[02:29:21] <pyzozord> but some oldtimer gamedevs seem to use svn for games
[02:29:30] *** Quits: Narrat (~omnius@p200300df5f123b4a06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:29:39] <pyzozord> git has that lbs thing or something but I never tested that
[02:30:48] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:33:01] <pulse> svn is very inefficient compared to git
[02:33:05] <pulse> and it's centralized
[02:33:09] <Sqaure> This was something i wish i read earlier. Pretty basic but never formalized in my head. https://typeclasses.com/contravariance
[02:33:10] <pulse> which has benefits but also pitfalls
[02:33:40] *** Quits: pizdets (~pizdets@183.182.114.44) (Ping timeout: 256 seconds)
[02:33:43] <pulse> git has a steep learning curve but it's way better than most traditional vcs
[02:33:46] *** Joins: pizdets_ (~pizdets@183.182.110.129)
[02:34:14] *** Quits: u0_a81 (~hexingb@119.163.63.201) (Ping timeout: 256 seconds)
[02:34:26] <absentia> i am curious as to why sqlite chose to go with fossil
[02:34:26] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[02:34:31] <absentia> they must have good reasons
[02:34:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[02:35:14] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 260 seconds)
[02:35:16] <pulse> i'm pretty sure sometimes project managers just pick an alternative option to be hipsters
[02:35:29] <pulse> it's in our nature, some tiny minority will always choose the unpopular option
[02:35:52] <pulse> (or maybe fossil really is good, idk :P)
[02:36:13] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Remote host closed the connection)
[02:36:45] <Sqaure> if you follow popular option, you go php and .js. Failure guaranteed.
[02:36:46] <flakland> the only advantage SVN has is you get an excuse to assign ownership of file A, to Developer C
[02:37:20] <pyzozord> pulse: think that's called "contrarian"
[02:37:50] <pyzozord> I am interested in the version control openbsd uses
[02:38:01] <pyzozord> I forget what was it cvs or somethign
[02:38:38] <pyzozord> most elegant engineering is using the least powerful and least complex solutions for the job
[02:39:05] <pulse> flakland, there's a few more i think, but i can't think of them
[02:39:10] <pyzozord> I feel like many programmers ignore this principle or outright go full contrarian on it
[02:39:19] <pulse> you can argue that central authority (aka svn server) has some merit
[02:39:27] <absentia> no but we need kubernetes we're going to scale to 11 billion monthly active users by tomorrow
[02:39:59] *** Joins: operateur (~My_user_n@93-87-171-136.dynamic.isp.telekom.rs)
[02:40:04] <pyzozord> I'm having 50 million requests per minute at peaks
[02:40:24] <pyzozord> and they are able to handle that with like pods or something
[02:40:41] <pyzozord> *five
[02:41:21] <pyzozord> five pods hardly requires that orchestration
[02:41:23] *** Quits: jaysicks (~jaysicks@84-236-36-24.pool.digikabel.hu) (Remote host closed the connection)
[02:41:32] <flakland> does it work with iptables?
[02:41:37] <pyzozord> writing a simple program in go to manage 5 vms would be so much simpler
[02:42:38] <flakland> or you have to install google modules?
[02:43:03] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:43:09] *** Joins: Church (~aleph@68.161.207.188)
[02:43:15] *** Quits: filename_ (~kilitary@185.193.143.131) (Read error: Connection reset by peer)
[02:44:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Read error: Connection reset by peer)
[02:45:42] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:46:17] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[02:47:28] *** Joins: u0_a81 (~hexingb@112.21.164.38)
[02:47:33] <pulse> how would i get one file to always be just in one branch
[02:47:57] <pyzozord> don't think that's possible, you just need to watch out
[02:48:27] *** Joins: trevors (~trevors@user/trevors)
[02:49:20] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[02:49:28] <absentia> pulse: files aren't in branches
[02:49:33] <absentia> rather branches can point to files
[02:49:48] <absentia> which is not quite correct to say either but close enough
[02:50:08] <pulse> can i have a specific .gitignore for dev branch
[02:50:28] <absentia> uh i suppose
[02:50:37] <pulse> i've decided to get more in-depth into git and i can use my hobby project to train
[02:50:37] <absentia> i'm not actually sure, i haven't tried this
[02:51:08] <pyzozord> you can but as soon as you merge dev to master you will override master's .gitignore with dev's .gitignore
[02:51:32] <pyzozord> what you could do is setup up global .gitignore for your user
[02:51:32] <pulse> hmm
[02:51:35] <EdFletcher> you can easily have a file exist in only a specific branch by having it committed to only that branch. when you checkout another branch, it will disappear. you can also definitely have different contents for the same file across different branches. 
[02:51:49] <pyzozord> oh no nevermind that wouldn't work either
[02:51:55] <pulse> EdFletcher, yeah i guess the problem is i'm used to just doing git add -A
[02:51:58] <pulse> and that would kind of break that workflow
[02:52:22] <pulse> but if i could have a specific .gitignore in dev, then i could say !thisfile in it
[02:52:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:34e0:8b74:dd2c:1d62) (Ping timeout: 256 seconds)
[02:52:26] <pulse> which, err..
[02:52:29] <EdFletcher> pulse: ahhh yeah you have to unlearn that muscle memory, i used to do that too 
[02:52:30] <pulse> wouldn't really work either
[02:52:39] <pulse> EdFletcher, haha
[02:52:42] <pulse> yeah i suppose
[02:52:53] <EdFletcher> yeah that would work, if you gitignore it then it won't be picked up by add -a 
[02:52:59] <pulse> yeah but i want it to be picked up
[02:53:18] <pulse> that way i could pull dev from another pc and have it updated
[02:53:29] <pyzozord> what you can do is add .gitignore
[02:53:32] <pulse> practically speaking it doesn't really matter, i'm just wondering if it's possible
[02:53:38] <pyzozord> and then force add your file in one branch anyway
[02:54:00] <pulse> wouldn't that only work until i switched to another branch and back
[02:54:10] <pyzozord> no
[02:54:35] <pyzozord> you add .giignore to dev, then you git add the specific file that was supposed to be ignored
[02:54:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[02:54:47] <pulse> oh
[02:54:51] <pyzozord> when you do git add ./myfile the ignorelist will not be respected
[02:54:51] <pulse> i see
[02:55:04] * pyzozord tries hard not to say "the ignore list will be ignored"
[02:55:36] <pyzozord> oh wait no I'm wrong
[02:55:47] <pulse> that won't translate to other machines
[02:55:48] <pyzozord> after you merge dev to master now master has that file too
[02:55:58] <pulse> i got so confused trying to visualize this just now
[02:56:11] <pyzozord> no no it would translate, problem is, you can't just systematically keep a file in one branch
[02:56:22] <pyzozord> branches are just pointer to commits
[02:57:06] <EdFletcher> so wait pulse: you want to have a .gitignore that is the same on `main` and `dev`, but you want to commit a file that would otherwise be ignored to only the `dev` branch? 
[02:58:10] <pyzozord> pulse: what you could do if you really wanted is use precommit hooks
[02:58:45] <pyzozord> custom scripts that run before commit where you could unadd the specific file if it's on the wrong branch etc
[02:58:50] <pulse> i'm even more confused reading your interpretations :D
[02:59:05] <pyzozord> but that's really not the git way
[02:59:05] <pulse> here's the whole problem so there's no confusion lol
[02:59:13] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:59:13] <pulse> i want build_and_run.sh on the dev branch
[02:59:25] <pulse> i don't wait it in the master/main branch, if possible
[02:59:30] <pyzozord> (I don't think I'm confused at all, but maybe others are)
[02:59:31] <pulse> but if it's too hard then i don't really care
[03:00:07] <pulse> pyzozord, i am quite, lol
[03:00:13] <EdFletcher> pulse: ok gotcha, and do you expect `dev` to be regularly merged back into `main` (i'm guessing "yes")? because if so then yeah, it's not really easily doable what you want 
[03:00:23] <pulse> EdFletcher, yes
[03:00:27] <pyzozord> pulse: git way is to keep build_and_run.sh in all branches like normal
[03:00:31] <pulse> yes basically i forgot to mention that EdFletcher 
[03:00:38] <pyzozord> s/normal/normally you do in git/
[03:00:50] <pulse> the git way you say
[03:01:02] <pulse> can you merge without one file
[03:01:09] <pyzozord> yeah eaech branch holds a version of the same project
[03:01:14] <EdFletcher> pulse: yup no worries, glad i asked. so yeah, that doesn't really fit git's workflow, once you merge back down to `main` that file will be pulled along 
[03:01:17] <pyzozord> branches don't have special purposes
[03:02:07] <EdFletcher> you _can_ have a long-lived branch that is effectively just an upstream fork of your `main` in which you only ever pull changes from `main` in and never merge back down, where this model would work ok. 
[03:02:10] <pyzozord> sometimes they do but that's rare and kinf of akward
[03:02:16] <EdFletcher> but that incurs all sorts of other, worse pain 
[03:02:24] <pulse> also you can i guess merge and delete that one file
[03:02:28] <EdFletcher> pyzozord: haha exactly 
[03:02:28] <pulse> the easiest way probably lol
[03:02:32] *** Quits: timmy_ (~timmy@c-73-157-183-98.hsd1.wa.comcast.net) (Quit: Lost terminal)
[03:02:33] <EdFletcher> yup 
[03:02:40] <pulse> but that doesn't really scale
[03:02:45] <pulse> but i suppose that kind of defeats the purpose
[03:03:27] <pyzozord> pulse: my advice is don't have special purposes for branches, git isn't really made to keep releases
[03:03:32] <pyzozord> it's made to keep source code
[03:03:46] <pulse> well "dev branch" is kind of a meta-purpose
[03:03:47] <pulse> isn't it
[03:03:48] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Quit: reboot)
[03:03:58] <pyzozord> no that's not what's it for
[03:04:16] <pyzozord> on dev branch latest commit might have bugs, on master it shouldn't
[03:04:18] <EdFletcher> pulse: that's the "git flow" model 
[03:04:18] <pyzozord> that's it
[03:04:28] <pulse> hmm
[03:04:40] <EdFletcher> i've been at places where it works ok but it needs to be _carefully_ managed 
[03:05:17] <pyzozord> it's all versions of the same project, in the same that it's the same files just in different versions
[03:05:30] <pyzozord> s/in the same/in the sense/
[03:05:35] <EdFletcher> if you let a branch diverge too far (don't rebase often enough), sometimes it can be completely untenable to merge back down. happened at the last place i was at when one guy was no a project with no oversight. we literally just renamed his branch to 'main'. ð¦ 
[03:05:42] <absentia> lol
[03:05:45] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[03:05:48] <pulse> ugh
[03:05:50] <absentia> or you end up with a permanently forked codebase
[03:05:51] <absentia> hahahahahahah
[03:05:58] <EdFletcher> yeah that, which is _even worse_ 
[03:06:01] <pulse> git merge hell is something i don't wish to experience
[03:06:03] <absentia> lmfao
[03:06:05] * absentia drinks heavily
[03:06:15] * EdFletcher  wishes he still drank :lauging: 
[03:06:25] * EdFletcher  also wishes he could speel 
[03:07:06] <EdFletcher> pulse: but yes, avoiding merge hell is a _great_ goal because it's awful. best advice: rebase _all the time_. i have an alias for this: `grbi=git rebase -i main` 
[03:07:09] <EdFletcher> i run it constantly 
[03:07:28] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[03:07:44] <pyzozord> yeah man git-rebase is your friend
[03:08:02] <EdFletcher> (also, interactive rebase and cherry-picking are what make `git` _amazing_. you can do _anything_ with those two.) 
[03:08:44] <pyzozord> yes -i the interactive mode makes things much easier
[03:08:54] <pyzozord> or you know use gui
[03:09:06] <pyzozord> git has some great guis
[03:09:22] <pyzozord> Jon Blow uses gui for subversion
[03:09:54] <pulse> EdFletcher, what does git rebase main do
[03:10:01] <pulse> i use git rebase for squashing commits but otherwise i just merge
[03:10:11] <pyzozord> I like cli, but at my work everyone uses gui, I am the weird one for doing everything in the cli
[03:10:41] <EdFletcher> pulse: Yeah with the -i it gives you a text editor that lets you chose what to do with each commit in the merge set, itâs lovely 
[03:10:46] <absentia> pulse: find common ancestor commit of your current branch and main
[03:11:03] <absentia> take all commits that diverged from main starting from that common ancestor (i.e. your branch)
[03:11:09] <absentia> and re-play them on top of main
[03:11:22] <EdFletcher> And rebase just basically takes the target branches current HEAD and re-bases your branch on top of that head 
[03:11:37] <EdFletcher> Haha just beat me to it absentia, Iâm so slow on this phone 
[03:11:39] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:11:51] <absentia> my topre lets me type into the future
[03:11:53] <pulse> oh, so. yeah
[03:11:58] <pulse> rebase is for retroactive stuff
[03:12:08] <absentia> rewrite the whole fucking git graph if you want to
[03:12:11] <pulse> i use it to squash, but apparently it's a common workflow too?
[03:12:13] <absentia> it's pretty raw
[03:12:16] <absentia> pulse: yes
[03:12:44] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[03:12:46] <EdFletcher> pulse: Yup, interactive rebase just gives you granular control (you can squash a couple commits and leave the rest alone, or whatever) 
[03:12:55] <pyzozord> pulse: i never actually used rebases instead of merges directly
[03:12:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:13:07] <pulse> oh, i see. it just stacks it on top
[03:13:13] <pulse> hmm, yeah i might switch to that model
[03:13:17] <EdFletcher> Interactive rebase even lets you reorder them! 
[03:13:26] <pyzozord> pulse: but most web guis like github or gitlab let you choose whether you want to rebase or merge
[03:13:29] <pulse> yeah i use -i too but i only ever to squash last 2 commits, lol
[03:13:36] <pyzozord> both are equally popular tbh
[03:13:39] <pulse> i've seen other options but i ignored them so far
[03:13:41] <absentia> i accept merge hell
[03:14:07] <absentia> be cleansed by the fires of the difftool
[03:14:11] <EdFletcher> pulse: Definitely play around with interactive rebaseâs options, I think youâll find them very useful 
[03:14:47] <pulse> so basically create branch feature-whatever, work on it, and then rebase it on main
[03:14:59] <pyzozord> pulse: if you use rebase -i you are not as inexperienced with git as you make it sound :P
[03:15:11] <pulse> my flow was going to be, make a dev branch, and then work on it whenever, and merge back to main at certain points
[03:15:29] <pyzozord> pulse: https://www.youtube.com/watch?v=bSA91XTzeuA&disableadblock=1
[03:15:30] <bayaz> Title: Inside the Hidden Git Folder - Computerphile 
[03:15:35] <absentia> why rebase
[03:15:42] <pulse> pyzozord, well, i have a lot of field practice with it, but i've just used the most basic subset i find workable so far. now that i'm doing a hobby project i'm starting to dive into it a bit more
[03:15:57] <absentia> all this git workflow shit sounds like cargo culting
[03:15:58] *** Joins: trace (~trace@user/trace)
[03:15:58] *** Quits: trace987 (~trace@user/trace) (Ping timeout: 272 seconds)
[03:16:03] <pyzozord> pulse: latest buzz is about https://trunkbaseddevelopment.com/ that's similar but different workflow with git
[03:16:03] <bayaz> Title: Trunk Based Development 
[03:16:05] <EdFletcher> pulse: Yes, rebase as you work and then only when youâre done with the feature branch merge it back down 
[03:16:08] <pulse> pyzozord, i'll check out the vid, tnx :p
[03:16:08] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:16:20] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:16:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc04:5f00:97ff:5c76:a7e3:730d) (Remote host closed the connection)
[03:16:30] <pulse> EdFletcher, i'm having it hard to picture how to manage versions with that
[03:16:34] <EdFletcher> pulse: and because youâve kept up with rebasing, merging back down is garunateed to be conflict-free 
[03:16:50] <pulse> hmm
[03:16:50] <pyzozord> pulse: here is traditional git workflow https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
[03:16:56] <pulse> yeah it makes sense
[03:16:59] <EdFletcher> pulse: How so? Youâd never release a versioned artifact from anything but main 
[03:17:10] <pyzozord> this is your meat and potatoes stuff everone does with dev and master 6
[03:17:13] <pyzozord> ^
[03:17:23] <EdFletcher> main is the always-buildable, always-releasable branch 
[03:17:41] <pulse> EdFletcher, yeah i think i'm confusing even myself. ignore that last question :p
[03:17:45] <pyzozord> trunkbased stuff is a bit more involved, most or many companies haven't adopted it yet
[03:17:46] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:9402:8951:dc4b:22c4)
[03:18:30] <EdFletcher> pulse: Haha no worries, it is a bit hairy to talk about abstractly, much easier to try it out concretely and see what works best for you. Iâve found after much iteration this model works best for me and most teams Iâve been on have tended to agree 
[03:18:52] <EdFletcher> Lets you use the good âusername/ticketâdescriptionâ naming convention for branches too! 
[03:19:05] <pulse> yeah seems like git requires a more hands-on approach
[03:19:18] <pulse> i've been only using a basic subset for a long time
[03:19:23] <EdFletcher> It does, it definitely does not hold your hand 
[03:19:36] <EdFletcher> Amazing thing is how useful it is even with just a subset! 
[03:20:08] <pyzozord> I don't know much more than rebase -i either
[03:20:14] <pyzozord> I always read the man to find what I need
[03:20:43] <pyzozord> git reflog is useful sometimes when you accidentally removed something from history
[03:20:48] <pyzozord> /sometimes/
[03:22:28] *** Joins: filename (~kilitary@185.193.143.131)
[03:22:36] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:41] <pulse> https://pbs.twimg.com/media/Cu31VgVWIAExTrk?format=jpg&name=large
[03:22:42] <bayaz> Type: image/jpeg Size: 210.7 kB 
[03:22:46] *** Quits: operateur (~My_user_n@93-87-171-136.dynamic.isp.telekom.rs) (Quit: WeeChat 3.4)
[03:22:51] *** Quits: inhahe_ (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) ()
[03:23:27] <pulse> according to this i'm in the 5th level
[03:23:39] <pulse> because i've used push --force before and pull --rebase
[03:23:40] <pulse> lol
[03:23:43] <pyzozord> lol
[03:23:50] <pulse> git cherry-pick i still dont know what is
[03:23:59] <EdFletcher> This is great 
[03:24:12] <pulse> git bisect someone tried to explain to me but all i heard was static noise
[03:24:20] <Hash> Cherry picking is the act of picking a commit from a branch and applying it to another.
[03:24:20] <pyzozord> "git gets easier once you get the basic idea that branches are homomorphic endofunctors mapping submanifolds of Hilbert space"
[03:24:23] *** Quits: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:9402:8951:dc4b:22c4) (Ping timeout: 256 seconds)
[03:24:26] <absentia> is that actually true
[03:24:32] <pyzozord> I think I heard these words
[03:24:34] <Hash> git cherry-pick can be useful for undoing changes. For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.
[03:24:36] <EdFletcher> cherry-pick letâs you literally do what it says on the tin: cherry-pick specific commits from one branch to another (or even just chunks of!). Itâs awesome. 
[03:24:36] <absentia> i have no way of knowing
[03:24:46] <pulse> oh dear https://git-scm.com/docs/git-fsck
[03:24:47] <bayaz> Title: Git - git-fsck Documentation 
[03:24:58] <Hash> Cherry picking can cause duplicate commits
[03:25:00] <EdFletcher> Bisect is useful to find where a big first occurred 
[03:25:09] <absentia> quick someone beckon the mathematicians hither
[03:25:16] <pyzozord> I am not at the bottom of the iceberg, I must go deeper
[03:25:34] <Hash> Started from the bottom now we here
[03:25:36] <pyzozord> I got two levels before endofunctors
[03:25:46] <Hash> Started from the bottom now the whole things over here
[03:25:49] <absentia> hate it or love it tha underdog's on top
[03:25:53] <pulse> how does git help find a bug
[03:25:53] <ski> afaik, version control systems don't really have anything to do with Hilbert spaces
[03:25:54] <Hash> Started from the bottom now we here.
[03:25:55] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[03:25:58] <absentia> and i'm gon shine homie 'till my heart stop
[03:26:00] <Hash> You can't go lower than the bottom.
[03:26:08] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[03:26:21] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) ()
[03:26:34] <pyzozord> although git merge - and git branch --merged | xargs git branch -d I believe belon to my level, one level up
[03:26:36] <pulse> git worktree, hmm
[03:26:37] *** Joins: VoidSync (~sync@user/voidsync)
[03:26:43] <pulse> so many arcane things i never hard about
[03:26:57] <ski> (the statement did sound like word salad, to me)
[03:26:59] <pulse> hmm https://git-scm.com/docs/git-rerere
[03:26:59] <bayaz> Title: Git - git-rerere Documentation 
[03:27:10] <absentia> thanks for the consultation
[03:27:34] <pyzozord> lol wtf
[03:27:44] <pulse> ski, https://softwareengineering.stackexchange.com/questions/256450/are-git-branches-in-fact-homeomorphic-endofunctors-mapping-submanifolds-of-a
[03:27:45] <bayaz> Title: Are Git branches, in fact, "homeomorphic endofunctors mapping submanifolds of a Hilbert space"? 
[03:27:55] <pulse> "It's a joke, that is based on the monad joke, but without actually getting the monad joke."
[03:28:00] <pyzozord> seems like a command made more for the fun name then real problem
[03:28:37] <pulse> is not getting the monad joke also a monad joke
[03:28:53] <EdFletcher> lmao i think that _is_ the joke ð 
[03:28:55] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[03:29:00] *** Joins: trace987 (~trace@user/trace)
[03:29:01] <absentia> pyzozord: useful on permanently forked codebases
[03:29:03] <absentia> grrrrrr
[03:29:22] <pyzozord> I heard all these words, just don't know what they mean, also never heard about endofunctors and Hilbert stuff in the same sentence
[03:29:31] <ski> the answer by JÃ¶rg W Mittag sounds reasonable
[03:29:32] <pyzozord> but who knows, category theory, topology
[03:29:36] <pyzozord> sounds legit to me :P
[03:29:37] <EdFletcher> yup only time i've seen `rerere` is on that terrible long-lived branch i mentioned earlier, because the same conflicts happened every time we rebased 
[03:29:48] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[03:29:56] <ski> pulse : yes
[03:30:12] *** Quits: trace (~trace@user/trace) (Ping timeout: 240 seconds)
[03:31:35] *** Joins: inhahe_ (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[03:33:35] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[03:34:20] <ski> that "Gilles 'SO- stop being evil'" answer is also interesting
[03:34:26] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[03:34:55] * ski . o O ( <https://pijul.org/manual/theory.html> )
[03:35:14] <pulse> oh ok i get git bisect, i've read up on it
[03:35:18] <pulse> it's not that complicated at all
[03:35:37] <pulse> it's just for finding out a commit that introduced a bug
[03:35:38] <pyzozord> I need a tshirt with "monads are just monoids in the category of endofunctors"
[03:35:48] *** Joins: operateur (~My_user_n@93-87-171-136.dynamic.isp.telekom.rs)
[03:35:51] <EdFletcher> pulse: yup exactly, it really isn't, just takes some legwork to use 
[03:35:54] <pyzozord> it totally is or should be a meme
[03:36:07] <absentia> i'm going to open a fast-food joint called monad burritos
[03:36:25] <absentia> burrito.io
[03:36:45] <pyzozord> call it "just monoids in category of burritos"
[03:37:39] * ski . o O ( <https://stackoverflow.com/questions/12532552/what-part-of-hindley-milner-do-you-not-understand> )
[03:37:57] *** Quits: u0_a81 (~hexingb@112.21.164.38) (Ping timeout: 240 seconds)
[03:38:11] <absentia> crdts eh
[03:38:21] <absentia> is this the new hotness
[03:39:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[03:39:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[03:41:08] <ski> also <https://golem.ph.utexas.edu/category/2015/11/burritos_for_category_theorist.html> mentions "Burritos for the hungry mathematician" by Ed Morehouse in 2015-04-01 at <https://www.ioc.ee/~ed/silliness/burrito_monads.pdf>
[03:41:40] <ski> (example quote "To wit, a burrito is just a strong monad in the symmetric monoidal category of food.")
[03:42:03] <pyzozord> it doesn't even impress me
[03:42:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[03:42:20] *** Quits: monr0e (~monr0e@31.132.33.9) (Ping timeout: 250 seconds)
[03:42:26] <pyzozord> sounds pretentious at best
[03:42:58] <pyzozord> nothing scary or very advanced
[03:43:04] <ski> the whole article is a joke, of course
[03:43:06] <pyzozord> just few simple concepts with weird names
[03:43:44] <absentia> pijul is witchcraft
[03:43:49] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[03:43:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[03:44:50] <pyzozord> most things I encountered in math have actually simple rules and not many rules
[03:45:07] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 272 seconds)
[03:45:09] <pyzozord> the only problem is that they build on other simple rules
[03:45:16] *** Joins: filename_ (~kilitary@185.193.143.131)
[03:45:48] <pyzozord> but category theory seem like one of those things that is actually not building that much on other things
[03:46:02] <pyzozord> is a lot more capable of being standalone
[03:46:15] <pyzozord> so learning basics should be relatively straightforward
[03:46:29] <pyzozord> like with set theory
[03:47:18] <ski> yea, basics are not really that hard to grasp. particular examples may require knowing more about some other area, though
[03:47:23] <pyzozord> a bit like hearing someone order a burger in macdonalds in a foreign country when you are as a tourist
[03:47:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:48:01] <ski> "Conceptual Mathematics: A first introduction to categories" by Lawvere,Schanuel is a nice category theory intro, imho, which does not presume knowing much about other math areas
[03:48:07] <KillerWasp> I have noticed that any connection on linux cannot work other than server and client. That is, there is no other way to establish a connection.
[03:48:08] <TonyStone> i need a simple way to invert colors... basically so if the user chooses black for an object the border should go white.  or if they choose green the border should be something that contrasts green... make sense?  Is there already some algorithm for this?  I would also need to take a third color into consideration... that would be the main background color this object is over.  
[03:48:38] <TonyStone> I am doing searches on the web for "color inversion" and i am not exactly finding what I want... i dont think
[03:48:59] <pulse> TonyStone, subtract it from white
[03:49:21] <pulse> if it's in rgb then 0xFFFFFF - [your color] should be the inverted
[03:49:24] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:49:30] <Inline> invert luma
[03:49:46] <pyzozord> luma is ycb or something
[03:49:55] <inhahe_> pulse that way the opposite of grey is still grey
[03:49:57] <KillerWasp> Once the connection is established, it no longer matters. But initially it is the problem, without a server and a client it is impossible to create a new connection. How else can you open a connection with just both IPs and both ports?
[03:50:03] <Decker> r'=255-r etc... only fails then for 128 128 128 :) which is its own contrast
[03:50:13] <Decker> converting to HSL and rotating the hue might be an option too
[03:50:14] <pulse> inhahe_, but the opposite of gray is gray :D
[03:50:22] <flakland> inverted green = green
[03:50:35] <pyzozord> can't you just do g = ^g
[03:50:37] <inhahe_> pulse ok but for contrast it shouldb e black or white
[03:50:55] <TonyStone> well... my user can choose any color for this object....
[03:51:17] <pulse> inhahe_, right, hmm
[03:51:29] *** Joins: timmmy (~timmy@2601:1c2:4a00:4340:a4d4:512c:1e76:fd62)
[03:51:34] <inhahe_>  TonyStone my solution would just be to use black or white for the border and use a color distance formula or a subjective brightness formula to compute which is  further away from the color, black or white
[03:51:35] *** Joins: znedw5441 (~znedw@home.znedw.com)
[03:51:50] <TonyStone> i did just find a little pascal code actually... im gonna tweak it and see if i can make it do what my brain(strange one) is thinking lol
[03:52:03] <timmmy> hello
[03:52:05] *** Quits: znedw544 (~znedw@home.znedw.com) (Read error: Connection reset by peer)
[03:52:05] *** znedw5441 is now known as znedw544
[03:52:18] <TonyStone> inhahe_ that sounds like a simple approach
[03:52:19] <pulse> apparently you can bitor with 0xFFFFFF
[03:52:29] <absentia> sorcery!
[03:52:38] *** Joins: u0_a81 (~hexingb@119.163.63.201)
[03:52:41] <Rounin> You could convert the colour to luminance and then round it to 1 or 0 and then invert
[03:53:04] <absentia> wait... isn't or 0xFFFFFF just
[03:53:07] <absentia> 0xFFFFFF
[03:53:15] <pyzozord> I mean bitwise not
[03:53:26] <pulse> bitwise xor it*
[03:53:32] <absentia> ah
[03:53:36] <absentia> sorcery!
[03:53:58] <KillerWasp> pulse ^ pyzozord = pulzord
[03:54:05] <TonyStone> lol... in my web searches i am actually finding various theories behind what is a good contrasting color... i am over complicating this... im gonna try and take inhahe_ approach 
[03:54:14] <pyzozord> *pulsozord
[03:54:23] <pyzozord> o is important
[03:54:32] <KillerWasp> also: 255-r == r+1
[03:54:32] <inhahe_> rounin's approach is close to my approach and maybe simpler
[03:55:04] <TonyStone> yeah ... that requires me to understand luminance though
[03:55:12] <KillerWasp> no, bad...
[03:55:20] <TonyStone> i guess i could do a quick search on that lol...
[03:55:37] <pyzozord> color theory is a thing
[03:55:40] <KillerWasp> 255-r is a reverse, only r-255 is r+1
[03:55:44] <Rounin> It depends on what you want, too... If you just want to pick either white or black, then separating luminance and colour makes sense... But if you just want a red border for green etc., then subtracting each channel from 255 makes sense
[03:55:45] <pyzozord> it's quite complex too
[03:55:52] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 272 seconds)
[03:56:12] <inhahe_>  rounin i wouldn't do that because the opposite of gray is gray
[03:56:15] <pyzozord> I'd just g = ~g and that's it, not sure what's that thing with the key color you needed though, wasn't paying attention
[03:56:30] <TonyStone> yeah color theory is apparently a real thing! lol... i am finding lots of interesting stuff... i need to simplify is all... no big deal
[03:56:49] *** Parts: timmmy (~timmy@2601:1c2:4a00:4340:a4d4:512c:1e76:fd62) ()
[03:57:04] <Inline> https://christiepandorasbox.com/root/downloads/support/Documentation/Helpfile/color-effects.htm
[03:57:37] <pyzozord> unless you are doing some graphical work where precise colors and preception are important, I wouldn't worry at all
[03:57:41] <pyzozord> just reverse 255 to 0
[03:58:23] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:58:26] <TonyStone> yes i am gonna make my own little bit of code to flip the  R G B values!  lol... there is some cool stuff out there though...
[03:58:52] <Decker> TonyStone the other idea is to pick 2 fixed colors and use a shadow - like white on black (to give white letter a black border like captions) or black on white where a white border can help...  https://d3x0r.github.io/STFRPhysics/3d/index4.html  which is what these do
[03:58:52] <bayaz> Title: Hopf Fiber Explorer (3 rotation compositions) 
[03:58:55] <absentia> hackerman
[03:59:25] <TonyStone> its not a serious graphical application... just my daughters project.  we made an etch a sketch type program and she reall really wants to have color choices.  then she wanted a pointer to always show where it left off... and of course she wanted that to be the "opposite" color
[03:59:42] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 260 seconds)
[03:59:57] <absentia> who's gonna steal the show, you know, baby, it's the hackerman
[04:00:08] <Rounin> Ah... Well, many OSes have also just made the pointer have a border... Either white around black or black around white, or perhaps it switches
[04:00:11] *** Joins: timmmy (~timmy@2601:1c2:4a00:4340:a4d4:512c:1e76:fd62)
[04:00:30] <Rounin> So whatever color the background has, the pointer will have two opposing colours
[04:00:31] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1c9a:ef49:ef0d:7fb8)
[04:00:40] <Rounin> Just like I have two opposing spellings
[04:00:51] <Hash> contrast
[04:01:15] <TonyStone> yeah... so far she hasnt decided to change the background color of the etch a sketc! lol... i gotta close this chat before she sees it now! 
[04:01:18] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1c9a:ef49:ef0d:7fb8) (Remote host closed the connection)
[04:01:32] <pyzozord> I think reversing bit should result in opposite color
[04:01:40] <pyzozord> I'm not 100% sure
[04:02:21] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[04:02:25] <PlanckWalk> Yes,  255 - x = ~x  when x is an 8-bit integer
[04:02:37] <Rounin> Oh, neat
[04:03:30] <pyzozord> assuming yeah 8 bit value ergo unsigned
[04:03:46] <PlanckWalk> Not that great constrast when the background is 127,127,127 though :)
[04:03:56] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[04:03:57] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[04:04:10] *** Joins: flakland (~flaknet99@32.211.211.39)
[04:04:19] <pyzozord> it's accurately "opposite" :P
[04:04:20] *** Quits: u0_a81 (~hexingb@119.163.63.201) (Ping timeout: 256 seconds)
[04:04:39] <pyzozord> and it makes sense
[04:04:46] <pyzozord> what is the opposite of grey
[04:04:54] *** Quits: znedw544 (~znedw@home.znedw.com) (Ping timeout: 256 seconds)
[04:05:06] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:05:07] <PlanckWalk> un-grey!
[04:05:15] <Decker> hypergrey
[04:05:20] *** Joins: znedw544 (~znedw@home.znedw.com)
[04:05:22] <absentia> wonder what's happening here geometrically
[04:05:30] <pyzozord> some kind of ultraviolet or some such?
[04:05:30] <Hash> https://www.youtube.com/watch?v=767wHKiPSOQ
[04:05:31] <bayaz> Title: POD REVIEW....DRAGON'S BREATH!! This was the HOTTEST Dragon's Breath I have ever eaten! SCORCHER! 
[04:05:33] <absentia> are you like rotating the rgb color space around the point (127, 127, 127)
[04:05:34] <Hash> Jeez
[04:05:37] <pyzozord> or infrared
[04:05:52] <Decker> absentia reflecting through that as an origin
[04:06:00] <absentia> ah
[04:06:20] <absentia> makes sense, i am thinking about this as (127, 127, 127) as the fixed point of some "contrast" mapping
[04:06:45] <pyzozord> too much science
[04:06:48] <pyzozord> not enough colors
[04:06:51] <Decker> https://d3x0r.org/javascript/colorPicker/index4.html  in the center of the left cube is 127,127,127 
[04:06:57] <PlanckWalk> I think a high constrast mapping would have to be discontinuous
[04:07:11] <Rounin> This pointer will become the most advanced feature of the program
[04:07:20] <inhahe_> haha
[04:07:53] *** Joins: trevors (~trevors@user/trevors)
[04:08:21] <pyzozord> Decker: yeah in HSL or YCbCr there might actually be opposite to gray
[04:08:30] *** Joins: lllh (~llh@198.48.244.21)
[04:08:40] *** Joins: u0_a81 (~hexingb@112.21.164.38)
[04:08:53] <inhahe_> i don't get hue or lightness sliders on that page
[04:08:55] <pyzozord> but I don't think it will make intuitive sense to users whatever it is
[04:09:07] <Decker> pyzozord still sort of a gimbal lock around grey... once you leave a saturated color range
[04:09:43] <Rounin> But like... float luminance = pixel.r * 0.25 + pixel.g * 0.5 + pixel.g * 0.25; pointer = luminance < 128 ? WHITE_POINTER : BLACK_POINTER;
[04:09:56] <Decker> inhahe_ well it can only show a slice of the cube (and sides not sliced) ... so to see 'in' the cube, have to move the top plane up and down
[04:09:57] *** Quits: llh (~llh@user/llh) (Ping timeout: 240 seconds)
[04:10:02] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[04:10:11] <Rounin> Though that could flicker if the value varied around 128... There should perhaps be some kind of memory so it changed less often
[04:10:18] *** Quits: znedw544 (~znedw@home.znedw.com) (Read error: Connection reset by peer)
[04:10:20] *** Joins: benji (~benji@user/benji)
[04:10:32] <PlanckWalk> Brouwer's fixed point theorem applies.
[04:10:45] <Rounin> Like, below 92 it would change, and above... 192, I dunno
[04:10:48] <pyzozord> Decker: would be nice if you'd let to just rotate the cube instead
[04:10:52] *** Joins: znedw544 (~znedw@home.znedw.com)
[04:10:57] <inhahe_> oh ok the one slider does all three simultaneously
[04:11:01] <inhahe_> the labels are a little misleading
[04:11:09] <pyzozord> it's a bit confusing that all rotations fill up as the slider is manipulated
[04:11:14] <Decker> pyzozord that would only show the surface... when it's a solide with an inside
[04:11:18] <absentia> god help me
[04:11:22] <pyzozord> suggests three separate cubes not one cube with rotations
[04:11:55] <Rounin> I've heard quaternions are useful for rotations... Let's get them into this colour calculation somehow
[04:12:03] <Decker> :)
[04:12:27] <inhahe_> they should let you slide saturation, red and blue too
[04:12:30] <pyzozord> Oh right, and the Hilbert the manifold and of course... The monoids in category of endofunctors
[04:12:54] <TonyStone> sorry i started this topic of color inversion.... you guys are getting too serious now... she is gonna get a colored pointer with a black border... simple as that! lol
[04:13:02] <PlanckWalk> Hehe
[04:13:07] <absentia> no this is normal
[04:13:09] <pyzozord> TonyStone: it's a running joke
[04:13:17] <TonyStone> im reading about "3 middle greys" now
[04:13:19] <pyzozord> I have no idea what are monoids
[04:13:25] <TonyStone> lol!
[04:13:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[04:13:43] <absentia> perhaps in 20 years
[04:13:47] <absentia> i will be able to tackle topology
[04:14:05] <inhahe_> TonyStone: you can always have two borders, one black one white, or a white pointer with a black border, or black pointer with a white border - it's visible over any color
[04:14:36] <TonyStone> inhahe_ ahh!! for what we are doing that may be simplest yet!
[04:14:45] <absentia> "wow absentia why are you still alive"
[04:14:48] <absentia> "hairy balls"
[04:14:56] <TonyStone> she walked away when i started getting back into the code... she lost interest    :(  
[04:16:08] <Rounin> Aw... What kind of tool is this being programmed in, anyway?
[04:16:31] <TonyStone> We are using Lazarus... she has a lot of fun designing the GUI
[04:17:07] <TonyStone> but when it gets to the code... she is interested for a bit... but i am a terrible teacher! lol!  i can watch her get bored and confused... i will rope her back in soon
[04:17:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[04:18:33] <Rounin> Ah well, it happens to a lot of people, I would say... You don't always get instant gratification with code, after all
[04:18:59] <pyzozord> I'd just do ~color
[04:19:01] <Hash> roasted hot peppers are delicious
[04:19:04] <TonyStone> exactly...
[04:19:07] <Rounin> I remember when I'd made a 68k emulator for a Mega Drive emu and remembered that it's also got a Z80 processor and a Yamaha something or other, and a video chip, and a sound processor #2...
[04:19:22] <Rounin> Let's just say progress has been slow since
[04:19:28] <TonyStone> haha
[04:20:29] *** Quits: filename_ (~kilitary@185.193.143.131) (Ping timeout: 256 seconds)
[04:21:52] <TonyStone> she keeps telling me "just make your own computer language that understands the way we talk" 
[04:22:09] <TonyStone> yeah ok kid... give me a couple days and ill make that...  sure.   haha  :)
[04:22:18] <inhahe_> i think she needs a tutorial on how computers work =D
[04:22:20] *** Joins: filename___ (~kilitary@185.193.143.131)
[04:22:50] <TonyStone> yeah.  she is only 8....  so i cut her some slack  :)
[04:23:22] *** Quits: filename___ (~kilitary@185.193.143.131) (Client Quit)
[04:23:32] <TonyStone> however... get in an 8 year olds mind for a minute.  she sees me "talk to google" on my phone... and she truly struggles to understand why a computer cant make programs based on how we talk! lol
[04:23:44] <absentia> soon
[04:23:54] <absentia> speech recognition -> github copilot
[04:24:45] <PlanckWalk> "Google. write me a program that will let me take over the world"
[04:24:45] <TonyStone> i was gonna say... i wont be suprised if google doesnt already have some sort of tools in testing that do computations but on descriptions opf human voice input
[04:25:17] <PlanckWalk> "I'm sorry Dave, I'm afraid I can't do that.  Someone else already did."
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:28] <TonyStone> hahaha!  she plays with my phone and asks google stuff like that all the time   "hey google!  do you spy on us?"
[04:25:31] <Hash> Dave?
[04:25:33] <Hash> Dave's not here
[04:25:33] <Rounin> Hehe, perhaps that could become her lifelong project, TonyStone ... To make general AI
[04:25:35] <absentia> https://www.physics.princeton.edu/ph115/LQ.pdf
[04:25:36] <bayaz> Type: application/pdf Size: 49.5 kB 
[04:25:45] <absentia> poetry
[04:25:50] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[04:26:37] *** Joins: filename (~kilitary@185.193.143.131)
[04:26:37] <TonyStone> Rounin you never know!  I mean these kids today are gonna have a technological perception at a young age that most of us may have never had...  you never know where these kids will take us in the future
[04:27:06] <absentia> i await the renaissance of the magical worldview
[04:27:10] <absentia> enabled by technological advancement
[04:28:21] <TonyStone> I saw some sort of project where they were sticking probes all over a dudes head... and he was able to control certain inputs by thought.... suposedly.  so yeah... we are all doomed haha
[04:28:41] <absentia> https://www.youtube.com/watch?v=kaFiwC1xh2Y
[04:28:42] <bayaz> Title: This MIT Engineer Built His Own Bionic Leg 
[04:28:45] <inhahe_> gtp-3 can sort of code  based on natural language
[04:28:47] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:28:59] <inhahe_> gpt-3*
[04:29:06] <inhahe_> you input the documentation, it outputs the code
[04:29:25] <absentia> mini-kanren was already capable of program synthesis given a test suite
[04:29:25] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[04:29:29] <inhahe_> i think it's gpt-3? it's some machine learning model anyway
[04:29:39] *** Joins: flakland (~flaknet99@32.211.211.39)
[04:29:57] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[04:30:02] <TonyStone> https://www.youtube.com/watch?v=_x9AwxfjxvE  <--- ok very cool 
[04:30:02] <inhahe_> (not always accurate though, of course)
[04:30:03] <bayaz> Title: OpenAI GPT-3 - Good At Almost Everything! ? 
[04:30:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[04:31:20] <TonyStone> "the package received was blank and had no bar code!  A waste of time and money"     hahaha
[04:32:56] <absentia> damn why is pork so good
[04:33:04] <absentia> it's a shame pigs are such intelligent creatures
[04:33:17] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 240 seconds)
[04:34:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:34:52] *** Joins: u0_a82 (~hexingb@2409:8902:78c0:f9e4:cd73:312:5d8f:9277)
[04:35:39] *** Parts: timmmy (~timmy@2601:1c2:4a00:4340:a4d4:512c:1e76:fd62) ()
[04:36:03] *** Joins: qaph (~weechat@user/qaph)
[04:36:25] <flakland> blame the seasonings
[04:36:54] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[04:37:40] *** Quits: u0_a81 (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[04:38:54] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 260 seconds)
[04:38:56] *** qaph is now known as kron
[04:42:55] *** Joins: _filename (~kilitary@185.193.143.131)
[04:43:23] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 272 seconds)
[04:43:44] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:45:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:46:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[04:47:48] <pulse> wxwidgets calls windows frames
[04:48:05] <pulse> and all controls are based on a window class
[04:48:14] <flakland> lol
[04:49:05] <pulse> so now i have to phrase my intent in code as "display main frame"
[04:49:11] <pulse> confusing, but ok
[04:49:26] <PlanckWalk> Main screen turn on.
[04:49:50] <flakland> somebody set us up the widgette
[04:50:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[04:51:17] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:52:04] *** Joins: ejjfunky (~ejjfunky@125.164.19.4)
[04:55:42] *** Quits: anomal (~anomal@87.227.196.109) (Remote host closed the connection)
[05:02:28] *** Joins: immy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea)
[05:02:35] <immy> hewo
[05:02:36] *** Parts: immy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea) ()
[05:03:00] *** Quits: _filename (~kilitary@185.193.143.131) (Quit: joined libera)
[05:04:57] <KillerWasp> Hash: he eat a wart from the underworld.
[05:06:54] *** Joins: filename (~kilitary@185.193.143.131)
[05:07:18] *** Quits: filename (~kilitary@185.193.143.131) (Client Quit)
[05:09:20] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[05:09:30] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[05:10:20] *** Joins: filename (~kilitary@kilitary.xyz)
[05:14:20] *** Joins: zachel (~zachel@user/zachel)
[05:14:24] *** Quits: ofl^ (~ofl@50.233.120.162) (Remote host closed the connection)
[05:15:13] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[05:15:55] *** Joins: timmmmy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea)
[05:16:49] *** Joins: cockatoodude (~cockatood@2605:8d80:60b:fa8a:b126:fa78:92ac:734b)
[05:18:00] <cockatoodude> Hey guys
[05:18:13] *** Joins: u0_a83 (~hexingb@112.21.164.38)
[05:18:37] <timmmmy> hey cockatoodude wassup
[05:18:41] <KillerWasp> Hey dude
[05:19:54] <KillerWasp> damn... i want to sleep...
[05:19:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[05:20:00] *** Joins: Enitin (~Enitin@82.102.22.85)
[05:20:00] <cockatoodude> Why?
[05:20:06] <cockatoodude> I slept 2 days ago
[05:20:12] <absentia> nice
[05:20:24] <KillerWasp> cockatoodude: you're hability for programming
[05:20:30] <KillerWasp> you have*\
[05:20:38] *** Quits: Gaboradon (~Gaboradon@user/Gaboradon) (Quit: Konversation terminated!)
[05:21:08] <KillerWasp> don't sleep from 2 or 5 days, much time for programming
[05:21:27] *** Quits: u0_a82 (~hexingb@2409:8902:78c0:f9e4:cd73:312:5d8f:9277) (Ping timeout: 256 seconds)
[05:21:46] <cockatoodude> Yes
[05:22:48] <timmmmy> dunno sleeping is nice at times... 
[05:22:50] <cockatoodude> I am now writing security implementations for LineageOS 12 with OrangeFox on unlocked bootloader and rooted phone.
[05:23:12] <timmmmy> nice
[05:23:47] <KillerWasp> cockatoodude: it's your work? you're from LineageOS?
[05:23:55] <cockatoodude> No
[05:24:07] <cockatoodude> They aren't interested in any of my work
[05:24:44] <cockatoodude> But I do sell and program phones
[05:25:22] <timmmmy> interesting
[05:25:24] <cockatoodude> And I am working on my own LineageOS fork, since they refuse to accept my obviously better stuff than they have. They literally said they wouldn't even be willing to consider it
[05:25:46] <timmmmy> ouch
[05:25:52] <timmmmy> gl with the fork!
[05:26:11] <cockatoodude> I made it so even if you have root and the program is authorized, it uses facial recognition before allowing root privilege escalated she'll is permitted just now...
[05:26:53] <cockatoodude> There is no root unless facial recognition verifies a user who is permitted to use root is there
[05:28:03] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[05:28:06] <cockatoodude> Also, my custom bootloader, isn't used for fastboot flashing anymore, OrangeFox Recovery fork I made, also unnamed, supports fastboot flashing and OTA updates. And also supports facial recognition as a security feature
[05:29:00] *** Quits: zaher_ (~zaher@37.48.180.59) (Ping timeout: 240 seconds)
[05:29:28] <TonyStone> any of you guys ever mess with LabView from National Instruments?
[05:29:55] <cockatoodude> I've not even heard of that. What does it do.
[05:30:15] <TonyStone> its a "flow diagram" programming tool... you draw your code
[05:30:31] <TonyStone> its kind of cool in ways but it is the most frustrating thing i ever used!  lol
[05:30:34] <cockatoodude> Oh, why would anyone draw code?
[05:30:46] <cockatoodude> Sounds VERY abstract and inefficient way of coding
[05:30:52] <TonyStone> IT IS!
[05:31:36] <TonyStone> lol!  I have a friend who insists on using it... and I am trying to help him "write" code to read a pipe but i am having trouble making a "readline" function
[05:31:56] <TonyStone> I honestly already want to smash my computer to pieces after playing with this thing.  hah
[05:32:15] <cockatoodude> I think abstraction is the worst thing to happen to computer science.... Aside from university computer science and academia based credentials and certificates.
[05:32:52] <InPhase> Abstraction is the foundation of good quality programming...
[05:33:09] <cockatoodude> It's a foundation for bloat
[05:33:22] <InPhase> Like if I were to pick one very broad concept to be the foundation of all quality in programming, abstraction would be it.
[05:33:33] <InPhase> It is basically the cornerstone of the entire field.
[05:33:35] <cockatoodude> Did you grow up in the 90's or early 2000's to think that?
[05:34:06] <InPhase> I was born in 1980.
[05:34:20] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:34:21] <cockatoodude> When did you get into programming?
[05:34:26] <InPhase> 1985.
[05:34:35] <cockatoodude> Oh... So same time as me
[05:34:49] <cockatoodude> We're about the same age and both started young
[05:34:54] <InPhase> Well that would have been enough time to embrace abstraction.  lol
[05:34:56] <TonyStone> Well LabView was designed for "scientists" i think... so they could "whip" up something productive.  I think it is similar to matlab
[05:35:24] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:35:24] *** brabrax_ is now known as brabrax
[05:35:27] <InPhase> TonyStone: I've used LabView.  It "looks" cool but it's a serious pain to work with, and does not scale well at all.
[05:35:58] <cockatoodude> Well, I'd rather write a software suit in assembly than that
[05:36:05] <InPhase> TonyStone: It makes certain very simple things much easier to do for people with less of a programming background, and then it falls apart rapidly from there.
[05:36:17] <TonyStone> InPhase I agree... it has some cool concepts to it.  I wish my buddy would just move onto something else.  It makes me sick to my stomach watching him over a remote desktop "programming"   lol
[05:36:25] <cockatoodude> Yes, it makes things easy for those who don't know how to code
[05:37:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 245 seconds)
[05:37:08] <TonyStone> yeah... in fairness... if some of you guys watched me writing code you would possibly want to reach through the screen and slap me too.... so i try to keep in mind we are all on different levels  :)\
[05:37:12] *** Quits: stagas (~stagas@79.130.219.20) (Ping timeout: 272 seconds)
[05:37:26] <InPhase> TonyStone: Most scientists should be converting their efforts to Python now.  The scientific fields in large quantities are moving to that, and it makes almost everything a lot better than those niche tools like LabView or Matlab, while still being very easy for beginners to pick up.
[05:37:40] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:37:57] <cockatoodude> If you watched "me coding" you'd be like this guy has some magical AI helping him. What is that AI and how do I get one?
[05:38:03] <cockatoodude> Haha
[05:38:12] <InPhase> TonyStone: There's a limit to how much complexity you can scale to with Python before the language design becomes a problem, but this limit is beyond what most light-programming scientists will ever hit.
[05:38:24] <TonyStone> I tried to get into Python years ago.... it didn't bring me any joy like Perl did back in the day... or Delphi on the desktop  :)
[05:38:55] <InPhase> TonyStone: I was a huge perl fan, but I've basically abandoned it (except for small things here and there) to reconsolidate that area on Python.
[05:39:00] <Rounin> Hm... I quite like Ruby... It has some of the simplicity of Python, but  it's a little more... fun, in the way Perl is
[05:39:09] <Rounin> More bells and whistles
[05:39:22] <cockatoodude> Python is great for writing the framework of a large end user software system, but for compute intensive tasks or operations you want C based library support for that, and if your OCD like me, you optimize that c lib with assembly
[05:39:34] <TonyStone> Yes perl was so awesome... i could whip up almost anything in minutes... (quick tasks and automation etc)
[05:39:57] <InPhase> There's no point to doing anything in C in 2022.  Any time you want performance you can simply grab C++ and get the same performance as C, but with modern features and safeguards for robustness.
[05:40:03] <ejjfunky> Rounin: wonder why Ruby isn't as popular as Python.
[05:40:33] <Rounin> ejjfunky: Hmm... It might be newer than Python, so that could be a thing
[05:40:40] *** Quits: swp (~Thunderbi@143.176.249.0) (Ping timeout: 256 seconds)
[05:40:47] <TonyStone> I also love Laz and FPC today because I can very quickly build quality stuff or quickly build one off experiments.
[05:41:14] <InPhase> You can still drop down to assembly for small sections of C++ if you really need to, although the use-cases for that have dropped rapidly over the recent 10-15 years with optimizer advances.
[05:41:47] <InPhase> What I mostly use assembly for now is reading rather than writing, to check how well an optimizer did with a particular structure of code.
[05:41:49] <ski> age 6.5, for me
[05:41:51] <ejjfunky> InPhase, i rather go to C than C++. 
[05:41:52] <cockatoodude> I use C, Python, JS, x86/aarch64 asm, java, coffeescript, QML, I know some C++
[05:41:53] <TonyStone> I have been playing with some code written in C.... I have been tweaking it and slowly learning the syntax differences and stuff between C and Pascal...  this is all hobby for me :)
[05:42:22] <cockatoodude> Hobby is how you become an expert
[05:43:03] <TonyStone> True!  I am getting decent at things i couldn't handle a year ago... so im growing.  I want to get into some Android development in near future
[05:43:14] *** Quits: timmmmy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea) (Remote host closed the connection)
[05:43:14] <cockatoodude> Everyone starts as a hobby coder unless the go to university for CS and become a corporate software java junkie who has no skills that set them apart from everyone else
[05:43:22] <cockatoodude> I do Android development
[05:43:23] <TonyStone> I have installed Android Studio... man... talk about a bloated stack.  
[05:43:23] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[05:43:45] <TonyStone> cockatoodude what are you developing android apps with?
[05:43:58] <InPhase> Please say assembly so I can chuckle.
[05:44:00] <ejjfunky> cockatoodude, how's coffeescript these days? I never got on board when it was a thing. Never worked on it till now.
[05:44:03] <cockatoodude> Um, Java, and C++ with the NDK
[05:44:09] <TonyStone> ok cool
[05:44:15] <TonyStone> lol... ASM   :)
[05:44:19] <cockatoodude> Also, bash scripting
[05:44:43] <ejjfunky> TonyStone, yea, exactly.
[05:44:43] <cockatoodude> The assembly skills mostly get applied to the security and and kernel level parts of my Android work
[05:44:59] <cockatoodude> Asm for smartphone app dev is ridiculous
[05:45:02] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:45:29] <ejjfunky> cockatoodude, assembly? I'm not an android dev but isn't everything converted to java on Android?
[05:46:06] <TonyStone> I think ASM is ridiculous!  I cant even understand how to be productive with it... i have watched some tutorials...  I have no interest in learning even the basics.  Not at this point anyway
[05:46:28] <InPhase> TonyStone: It's a different mindset behind it.
[05:46:56] <ski> it's good to know about assembler
[05:47:27] <cockatoodude> Actually, everything is converted from java, to JVM byte code, then to many other stages of android build specific languages or langauge extensions, before finally being a binary native package, which gets updated when you factory reset, delete caches, perform an update, or otherwise invoke a app optimize process
[05:47:40] <ski> can make you better appreciate and understand higher-level languages, and how compilers map them to lower levels
[05:47:55] <TonyStone> I *tried to optimize one of my programs by playing with the ASM before the linker... something like that.  I followed step by step tutorials... it made sense what was happening along the way.  Then i saw the ASM output from my compiler of my program and immediatley quit!  lol
[05:48:07] <ejjfunky> cookatoodude, ic. thanks for the explanation.
[05:48:11] *** Quits: Nintenuendo (~Nintenuen@user/Nintenuendo) (Quit: Can't IRC with this seat belt on.)
[05:48:15] <InPhase> I think some assembly skill is pretty much mandatory for any professional general software engineer.  It shifts your understanding of what the computer is actually doing, and lets you dive deep into things like compiler output and actually see what's happening when you need to do this.
[05:48:49] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[05:48:52] <InPhase> But there are lots of other areas of using programming where it isn't really applicable.
[05:49:04] <amigojapan> Good morning
[05:49:25] <Rounin> Morning amigojapan!
[05:49:31] <ejjfunky> Ohayo gozaimasu, amigojapan san!
[05:49:31] <ski> being able to reason at multiple abstraction levels simultaneously, can be useful
[05:49:32] <TonyStone> InPhase yes i agree.  some day I would like to be able to actually do some real optimizations in my programs... but the reality... my compiler does a great job.  My programs all perform as good as i think they possibly can
[05:49:41] <cockatoodude> The entire Android project is a shit show honestly
[05:49:55] <amigojapan> Heya Rounin 
[05:50:09] <cockatoodude> I did most of the optimization for Ryzen gen 1 for GCC 7.2 and later
[05:50:09] *** Joins: u0_a84 (~hexingb@2409:8902:78c1:1349:9589:c4cf:8f10:fa41)
[05:50:16] <ski> konichiwa, amigojapan
[05:50:25] <InPhase> TonyStone: On the backs of people who have done this work.  :)  Which is a reasonable way for you to get things done at one particular level of abstraction.
[05:50:32] <amigojapan> Ohayou de gozaru ejjfunky ski 
[05:51:29] <ejjfunky> cockatoodude, android optimization sounds like fun. i think want to do that next.
[05:51:47] <TonyStone> InPhase yes understood.  I do appreciate the efforts the developers put into FPC... i think they have an awesome tool.  Some day I hope I am good enough I can contribute back to the open source projects i use and love
[05:52:54] <TonyStone> I started messing with Code Blocks recently too... sadly it seems dated.... howver..... you can see that over the years there was some great talent building those tools  :)
[05:53:00] <ejjfunky> amigojapan, last night, my body wasn't feel well. feels like i'm catching a cold. So i made a pitcher of garlic green tea. got this from a google search. honestly, it isn't taste that bad at all.
[05:53:13] <cockatoodude> I have covid
[05:53:25] *** Quits: u0_a83 (~hexingb@112.21.164.38) (Ping timeout: 256 seconds)
[05:53:37] <ejjfunky> cockatoodude, just get a good rest and minimize any interactions with anybody.
[05:53:46] <cockatoodude> I am isolating
[05:53:51] <cockatoodude> It sucks
[05:54:05] <ejjfunky> cockatoodude, just socialize here.
[05:54:11] <cockatoodude> Yeah I am
[05:54:15] *** Quits: martums5 (~martums@user/martums) (Read error: Connection reset by peer)
[05:54:17] <ejjfunky> socialize here and code. hehehe.
[05:54:46] <amigojapan> ejjfunky: never heard of that remedy, but I hope it works for you
[05:54:53] <cockatoodude> I totally just verified my root facial recognition works for deception at boottime, and root escalated processes
[05:55:01] <ejjfunky> amigojapan, works great. my body feels better now.
[05:55:18] <amigojapan> Fantastic ejjfunky 
[05:55:34] <ejjfunky> i'd add ginger if i have some.
[05:55:46] * ski . o O ( "Shut up and code." )
[05:55:56] *** Joins: filename (~kilitary@kilitary.xyz)
[05:56:07] <amigojapan> ejjfunky: the classic Japanese remedy is raw eggs with sake with leaks
[05:56:11] <ejjfunky> cockatoodude, nice.
[05:56:18] *** Joins: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net)
[05:56:18] *** Quits: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net) (Changing host)
[05:56:18] *** Joins: Nintenuendo (~Nintenuen@user/Nintenuendo)
[05:56:22] <Rounin> If you get salmonella, at least you'll forget the cold
[05:56:46] <amigojapan> Rounin: there is no salmonella in Japan
[05:56:57] <Rounin> Sweet
[05:57:00] <ejjfunky> amigojapan, i'd drink that too. japan's raw eggs are safe. they have a high safety process.
[05:57:01] <cockatoodude> Now I'm going to work on process isolation from rooted apps
[05:57:42] <cockatoodude> So that apps with root can't access apps that aren't explicitly allowed to be accessed by root shells provided to apps
[05:58:37] <ejjfunky> cockatoodude, sounds like you're working your way up.
[05:58:51] <cockatoodude> Well, yeah... But it's a long process
[05:58:52] <ejjfunky> total android customization.
[05:58:59] <ejjfunky> yea, it looks like it.
[05:59:20] <cockatoodude> Well, not total, but I'm doing new innovative things. Because why not?
[05:59:32] <amigojapan> Rounin: somehow they have a control system which prevents salmonella from happening in eggs here
[05:59:32] <ejjfunky> cockatoodude, exactly. hehehe
[06:00:23] <amigojapan> Rounin: also every egg has an individually marked date of expiration
[06:00:27] <ejjfunky> amigojapan, yea. they clean their eggs and also uses uv to kill surface bacteria and viruses
[06:00:31] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[06:00:45] <amigojapan> I see ejjfunky 
[06:00:49] <Rounin> amigojapan: Please tell me they're individually plastic wrapped and tied with a pink ribbon
[06:00:53] <Tech_8> sup amigojapan
[06:01:02] <cockatoodude> I mean... Everything should be the best it can be. Being functional enough to keep the end user market large segment of ignorant unaware users, isn't my line that marks acceptable
[06:01:06] <amigojapan> Lol Rounin 
[06:01:19] <amigojapan> Hey Tech_8 , just got up
[06:01:34] <Tech_8> amigojapan: good morning then
[06:01:35] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:01:50] <amigojapan> Ty Tech_8 good morning
[06:02:14] <ejjfunky> cockatoodude, it's more of a market for programmers like me that wants everything optimized.
[06:03:03] <cockatoodude> Well, optimizing is important for my project because some of the devices I am planning to market, will be very very low end old devices
[06:03:45] <cockatoodude> Everything should be optimized though once the core code works and is stable
[06:04:14] <cockatoodude> But I want security and functionality just as much as optimization. Combining all 3, is a mission
[06:04:14] <ejjfunky> cockatoodude, i'm all for that too. i think there's a market there. i dont like these commercialization that people always buy things new and leave a ton of junks littering the world.
[06:04:39] <ejjfunky> cockatoodude, cool.
[06:05:06] <cockatoodude> The intention, is to sell devices at much lower costs than their competition, and with better software in all mannars
[06:05:12] <amigojapan> My wife's stupid iPhone has started to wake me up by buzzing which refuses to go away even tho I disabled it
[06:05:21] <cockatoodude> Apple sucks
[06:05:33] <ejjfunky> cockatoodude, you know what will be better? is to have an alternative os to android. so when google drops support to the old models, people can use the alternative.
[06:06:17] <Rounin> Hmmmmm... As long as people keep publishing their apps in the two major app stores and only there, what use will other OSes be, though
[06:06:33] <amigojapan> ejjfunky: is Google threatening to drop support?
[06:06:37] <cockatoodude> Well... Google doesn't need to support them. I can support them just fine. I have decades of experience and contribution to the Linux kernel, and 8 or 10 years experience working with Android
[06:06:40] <Rounin> One could make an OS more or less exactly compatible with Android and have the Google app store on it, but still
[06:06:53] <ejjfunky> amigojapan, on old phone models. they do it all the time
[06:07:05] <flakland> getting the OS installed is the only problem
[06:07:12] <cockatoodude> I have a full GNU/Linux + custom components platform, but that's for a different buisness and market
[06:07:44] <amigojapan> ejjfunky: how old are we talking about?
[06:08:01] <ejjfunky> anything that the current android os doesnt support.
[06:08:02] <cockatoodude> It works on Samsung Galaxy S serious 9 and above, and all Pixel devices, as well as select LG Moto devices
[06:08:12] <cockatoodude> Android OS supports everything
[06:08:19] <cockatoodude> It's Linux
[06:08:30] <cockatoodude> Other than minimum system requirements anyways
[06:08:40] <flakland> how do you install it
[06:08:43] <ejjfunky> well, i used to have a Samsung Galaxy Duo. I'm pretty sure it's not getting any support.
[06:08:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[06:09:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:09:58] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[06:10:28] <amigojapan> As opposed to popular opinion, I think apps still work on old phones unlike with iPhone. That is the main reason I dropped iPhone 
[06:11:27] <cockatoodude> Well, if the app developers set a minimum SDK version, or minimum specifications or device types, then they won't
[06:11:30] <amigojapan> On iPhone eventually the apps themselves blocked me from using them. After only like 7 years
[06:11:41] <ejjfunky> cockatoodude, i saw the other day on youtube, a guy bought like 10 mobile devices and turned it into a crypto mining farm. i thought that's cool. so like old devices can be used like that too. as long as it's functioning, no sense why you have to throw them out.
[06:12:07] <cockatoodude> Lol
[06:12:10] <cockatoodude> Crypto mining
[06:12:27] <cockatoodude> The hopefully answer to poor people becoming rich
[06:12:30] <ejjfunky> yea, why, right? or whatever farm you'd like to have. should work
[06:12:46] <cockatoodude> The real way to get rich is earn money, save it, invest it... And keep doing that
[06:13:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[06:13:21] <cockatoodude> You will be like me. 15 years ago on disability with no other income now exceedingly wealthy and not even caring
[06:13:51] <ejjfunky> cockatoodude, not even caring is a nice place to be. a lot can't.
[06:14:16] <cockatoodude> Yeah... Well. I mean, I make enough without having investments to more than cover anything I need
[06:14:29] *** Quits: jstoker (~jstoker@user/jstoker) (Remote host closed the connection)
[06:14:32] <cockatoodude> I breed rare expensive parrots
[06:14:58] <cockatoodude> And it costs a couple hundred bucks to breed a $8000 bird
[06:15:10] <ejjfunky> cockatoodude, expensive because of their looks or what they can do (parrot a large vocab of words)?
[06:15:18] <cockatoodude> I make about 1.2 million a year breeding parrots
[06:15:44] <ejjfunky> cockatoodude, now that's an investment/business.
[06:15:49] <cockatoodude> Expensive because they are rare, and highly desirable, and yes intelligent and can talk
[06:16:19] <cockatoodude> I have 2 breeding pairs of hyacinth Macaw's. $32,000 per baby
[06:16:32] <ejjfunky> i dont know much about parrots. but i bet there species and subspecies.
[06:17:08] <amigojapan> ejjfunky: crypto mining also needs to be powerful and efficient
[06:17:18] <ejjfunky> wow, color is differen too. All of them always dark blue color?
[06:17:22] <cockatoodude> The species are many, almost 400, the visual mutation characteristics are called mutations
[06:17:36] <cockatoodude> The Hyacinth Macaw is very blue yes
[06:17:49] <ejjfunky> amigojapan, yea, that's why they need a farm. 
[06:17:55] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:18:08] *** Joins: jstoker (jstoker@user/jstoker)
[06:18:31] <cockatoodude> You should be like me, and obtain plutonium and build your own breeder reactor power plant because you want to and no one is going to stop you
[06:18:32] <ejjfunky> i dont know about japan, but electric bills are high, isnt it?
[06:18:57] *** Quits: xff0x (~xff0x@2001:1a81:52c9:2700:c4c8:f455:66db:3020) (Ping timeout: 240 seconds)
[06:19:13] <ejjfunky> cockatoodude, reactor power plant? wow, that's pretty cool.
[06:19:17] <cockatoodude> I think I'm the only non corporate non governmental owner of a nuclear power plant
[06:19:18] <cockatoodude> Lol
[06:19:19] <ejjfunky> although i'd settle with solar.
[06:19:28] <ejjfunky> i dont want to deal with all the radiations.
[06:19:55] <cockatoodude> Radiation is containable and reasonable levels to feel safe can be found anywhere not very near the reactors
[06:20:33] <flakland> lol good luck with that
[06:20:42] <ejjfunky> cockatoodude, if i could get plutonium or even its waste products on consistent basis, and i have money to create a company, i'd go into creating batteries for mobile devices out of them.
[06:21:08] *** Joins: xff0x (~xff0x@2001:1a81:5301:6400:24c5:5158:4f07:abb5)
[06:21:36] <cockatoodude> Radioactive metals don't directly generate power. The do so by heating water to create steam which spins turbines to spin generators
[06:21:52] <ejjfunky> cockatoodude, i know.
[06:22:00] <cockatoodude> Oh okay
[06:22:01] <flakland> depends
[06:22:10] <ejjfunky> problem is, what do you do with the radiated water after?
[06:22:11] <Rounin> Someone did come up with a way recently, though... But it generates like a few microvolts
[06:22:17] <ejjfunky> that's the thing that makes it dangerous.
[06:22:33] <Rounin> Hmmmmm... radiated water, you say
[06:22:53] <Rounin> I mean, the water can contain radioactive particles, but I don't know that there is any radioactive isotope of water
[06:23:08] <cockatoodude> You store it. But the water becomes steam and goes out the top opening
[06:23:39] <leduyquang753> Rounin "Isotope" is for elements i.e. atoms not molecules.
[06:23:50] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[06:23:51] <ejjfunky> it's why disasters like Fukushima nuclear disaster become so dangerous
[06:24:00] <Rounin> leduyquang753: Either way, do you know of any radioactive water?
[06:24:03] *** Joins: flakland (~flaknet99@32.211.211.39)
[06:24:19] <ejjfunky> Rounin,yea, i think something along the line of that. i dont know about the details though
[06:24:27] <cockatoodude> Fukuaguma was a mistake of idiots not planning for the very unlikely but possible
[06:24:41] <Rounin> I suppose that heavy water with tritium or whatever it's called may be slightly radioactive
[06:24:49] <Rounin> But you wouldn't get that from irradiating water
[06:25:03] <leduyquang753> Rounin Well when talking about "radioactive water" people usually don't mean the hydrogen and oxygen themselves are radioactive but rather the water contains other substances that are radioactive.
[06:25:06] <cockatoodude> Like the idea of having a reactor anywhere there is the slightest potential for a natural disaster it isn't built to withstand is stupid
[06:25:31] <amigojapan> ejjfunky: electric bills are not as high as I have heard some Americans mention , but yes they are high
[06:25:31] <Rounin> leduyquang753: Right... So you could filter it or try to boil away the water if it became an issue
[06:25:47] <leduyquang753> Simply boiling is not the solution.
[06:26:06] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:26:28] <leduyquang753> You can try to lookup how nuclear power plants handle their wastewater.
[06:26:59] <flakland> they heat exchange with local bodies of water raising their temperatures and affecting the ecosystem
[06:27:02] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:27:03] *** Quits: BurumaSerafuku (~sjw@69.206.49.150) (Remote host closed the connection)
[06:27:37] <amigojapan> ejjfunky: I knew someone in HK who tried bitcoin mining using a powerful GPU and they said it was not profitable
[06:28:01] <ejjfunky> cockatoodude, well, with the well known top notch japanese engineering from a well known company, was it Toshiba that they still cut corners like that, is very embarrassing
[06:28:15] *** Joins: BurumaSerafuku (~sjw@69.206.49.150)
[06:28:43] <ejjfunky> amigojapan, yea, a powerful GPU won't be enough. 
[06:29:08] <cockatoodude> There is something you can irradiate water with that I don't use because I don't give a shit about having a large man made radioactive pond... There is a nber of species of saltwater seaweeds that actually remove radioactive metals and absorb for energy radioactivity itself, and those are Earth's natural ways of dealing with buildup of radioactive
[06:29:08] <cockatoodude> metals or isotopes or radiant energy. The climate is not some thing based on just weather systems and natural phenomena from space and geology and atmosphere combined... It is created and sustained in balance by the balance of the ecosystems of the planet and all the life in them
[06:29:46] <amigojapan> ejjfunky: 100 smartphones probably can't match the processing power of a powerful GPU 
[06:29:50] <cockatoodude> The problem with business's operating on a maximum profit at all costs they can get away with... Is they do anything they can get away with
[06:29:51] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[06:30:04] <ejjfunky> i used to work for this guy who used to farm bitcoins. he rented a house filled with self-build pc with powerful gpus. but nowadays, he's done with that and just sell gpus as a side job.
[06:30:07] <cockatoodude> I have tens of thousands of smartphones
[06:30:14] <cockatoodude> Lol, inventory
[06:30:47] <cockatoodude> I have multiple businesses that sell different smartphone packages and such
[06:30:50] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[06:30:54] <amigojapan> ejjfunky: nowadays they mine using ASICS 
[06:31:14] <cockatoodude> Yeah, although because of how much boom in BTC value people are using GPUs again
[06:31:30] <cockatoodude> Which is a large factor in GPU shortage and outrageous pricing
[06:31:33] <PlanckWalk> More likely using GPUs for other crypto
[06:31:50] <PlanckWalk> There are lots of others for which GPUs are worthwhile, but not Bitcoin
[06:31:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[06:32:05] <cockatoodude> I don't mine crypto. I think it's a crime to have such a carbon footprint increase so you can earn some money
[06:32:10] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[06:32:10] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[06:32:23] *** Joins: brabrax (~brabrax@user/brabrax)
[06:32:31] <ejjfunky> cockatoodude, i agree with you.
[06:32:34] <cockatoodude> Almost as much of a crime as shaving off your beard
[06:32:45] <cockatoodude> My beard does need a trim though
[06:33:23] <ejjfunky> completely a waste of computing power. best to be used somewhere else, hours of gaming! :D
[06:33:26] <cockatoodude> A professor needs a beard, a bushranger needs a beard, an archivist needs a beard, and you... You need a beard
[06:33:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:33:37] <cockatoodude> Lol, I game a few hours a week
[06:33:47] <cockatoodude> On very low power systems
[06:34:10] <cockatoodude> Like Iris Xe i5 lower power mobile SoC based hardware
[06:34:12] <ejjfunky> or something else, renting it out to do some rendering, or medical computations.
[06:34:18] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[06:34:26] <ejjfunky> that's much better. SETI is still much better than crypto mining, imo.
[06:34:32] *** Joins: flakland (~flaknet99@32.211.211.39)
[06:34:33] *** Quits: u0_a84 (~hexingb@2409:8902:78c1:1349:9589:c4cf:8f10:fa41) (Ping timeout: 256 seconds)
[06:35:05] <absentia> folding@home
[06:35:09] <cockatoodude> I have a bunch of severs that are a cloud for free medical and biology related research. But I approve and whitelist access to researchers with projects I want to support
[06:35:14] <vysn> is gaming in a VM a bad idea?
[06:35:16] <ejjfunky> absentia, exactly.
[06:35:36] *** Joins: zachel (~zachel@user/zachel)
[06:35:44] <ejjfunky> vysn, last time i tried, yea.
[06:35:59] <cockatoodude> It's all older hardware though. 4-5 years outdated, but 280 racks of GPU cloud servers from 4-5 years ago is better than anything a non funded researcher can hope for
[06:36:09] <cockatoodude> Gaming in a VM is a good idea
[06:36:24] <ejjfunky> but i tried only with virtualbox. dont know if you can get a better performance with other vms. vmware might be a good choice.
[06:36:35] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[06:37:15] <cockatoodude> VMware has great directx hardware acceleration for Nvidia proprietary drivers to game in windows VM... You can do PCIe passthrough and have a GPU dedicated to the VM... You can just have low settings and high spech hardware and not give a shit also
[06:37:42] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[06:37:46] <cockatoodude> VMware for non-gpu passthrough, kvm and eqmu for dedicated GPU for the VM
[06:37:54] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 256 seconds)
[06:38:00] <vysn> sounds good. I only tried virtualbox and performance was not that good last time I tried. 
[06:38:17] <CodeSpelunker> virtualbox is just ok
[06:38:22] <cockatoodude> VMware free edition sound abilities are shit though. You need the professional version licence for good audio
[06:39:12] <cockatoodude> Honestly... I never run Linux anymore on non special use devices. Windows 10 with WLS 2 running Ubuntu latest release.
[06:39:38] <CodeSpelunker> :(
[06:39:39] <ejjfunky> for cheap, exactly what cockatoodude said, use kvm or qemu. i will try qemu when i get a chance.
[06:39:44] <cockatoodude> Meanwhile I still take the time to write Linux kernel module drivers for the hardware I then don't ever use Linux on
[06:40:10] <CodeSpelunker> kvm can be a bit faster, but can be a bit more finnicky
[06:40:15] <vysn> I'll give Vmware a go. my pc is running on Nvidia Titan Xp and hopefully it will run at full capacity in VMware. 
[06:40:17] <CodeSpelunker> I mean qemu
[06:40:21] <cockatoodude> Because I mean... I belive I should be able to as well as everyone... Run Linux on bare metal if they choose to on any device
[06:40:34] <CodeSpelunker> yes, bare metal is good
[06:40:44] <cockatoodude> I finished support for Surface Pro 7 lineup Linux kernel hardware support recently
[06:40:58] <cockatoodude> Hasn't been accepted by the Linux kernel project yet
[06:41:05] <flakland> i forget why, something about the schedulers not being able to coordinate?
[06:41:14] *** Joins: u0_a84 (~hexingb@180.212.208.186)
[06:41:17] <cockatoodude> Which schedulers?
[06:41:25] <flakland> any of them
[06:41:34] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[06:41:37] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[06:42:02] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[06:42:12] <cockatoodude> Well, task schedule algorithms generally aren't made with caveat code for every possible interacting scheduler that only nerds with very rare use case scenarios care about
[06:42:21] <vysn> I tried kvm/qmu but I could never get to run properly they were extremely slow compared to virtualbox
[06:42:37] <cockatoodude> I do that coordinated scheduler modifications on my Android kernels
[06:42:37] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[06:42:40] <vysn> what about Gnome Box?
[06:42:47] <cockatoodude> And it's REALLY hard
[06:42:55] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[06:43:16] <cockatoodude> Like it takes so much time and effort and attempts and testing of every possible combination unless you are a math savant
[06:43:45] <cockatoodude> It's something you do when your done all the normal typical work and are polishing the turd you made
[06:44:55] <cockatoodude> Task scheduling in general is a very advanced thing to do at any level of production grade or stable release level of coding/builds
[06:47:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[06:47:57] <Decker> ya but scheduler is just a module you can almost hotswap
[06:48:40] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[06:48:48] <cockatoodude> Okay... Process isolation, completed. Untested, about to check my work before I start compiling. But I got a special /dev/proc/pid/rootaccess interface with the kernel to allow or deny access by root processes other than those I whitelist in a file protected by SELinux which are system apps and processes which need access to have a running
[06:48:48] <cockatoodude> system... If you write "1" to the block device interface rooted apps can access their memory space and affect the process itself any way a normal root Linux process could. If you write "0" which is set by default... No way to access the process from root shell granted apps
[06:49:57] <cockatoodude> Yes, that's true. You can 100% hotswap them although many types of task scheduling options in the Linux kernel have no hotswap ability despite there being no real reason other than complexity of coding the methods, of hotswap
[06:52:14] <cockatoodude> In my Windows 10 security suite, Windows kernel itself in ring 0 has no access to anything other than intentionally opened up wsl/windows kernel integration methods and interfaces. And it's something I intend to put into a Windows 10 security suite I have been working on somewhat low priority for over a year
[06:52:21] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:54:19] <cockatoodude> So my WSL 2 Linux system, is safe from Windows itself having any unwanted interacting. WSL 2 uses KVM hypervisor to run the kernel and has CUDA support, full Linux system emulation, and no statistically relevant performance loss over using Linux on bare metal
[06:55:19] <ejjfunky> cockatoodude, sounds great. and it's something you can sell one day to microsoft for millions.
[06:56:00] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[06:56:53] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[06:57:28] *** Quits: kron (~weechat@user/qaph) (Remote host closed the connection)
[06:57:45] <cockatoodude> Yeah, Microsoft actually gave me permission to release a custom Windows 10 professional with my own tools and software as long as it doesn't have anything to compromise their ability to minimize piracy or activate the product without a digital license attached to it
[06:58:11] *** Joins: kron (~weechat@user/qaph)
[06:58:52] <cockatoodude> So I'm not selling it to Microsoft. Gonna release it for free and let people pay for the Windows 10 pro license... Or if they choose which I would not aggree with, activate it without paying. As programmers I think we can all agree we deserve to get paid for our work unless we offer it freely
[06:59:24] <ejjfunky> cockatoodude, definitely.
[07:00:07] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[07:00:35] *** Joins: ejjfunky0 (~ejjfunky2@125.164.17.4)
[07:00:53] <ejjfunky0> hey rindolf! How are you?
[07:01:11] <Tech_8> hi rindolf
[07:01:34] <rindolf> vysn: hi. the ux of freebsd in vbox has really improved: https://github.com/shlomif/what-i-learned-from-porting-to-freebsd
[07:01:35] <bayaz> Title: GitHub - shlomif/what-i-learned-from-porting-to-freebsd: What I Learned from porting my projects to FreeBSD 
[07:02:36] <rindolf> ejjfunky0: Tech_8 : hi. added a kiss scene to the new fic
[07:03:08] <ejjfunky0> rindolf: the freebsd thing is interesting. looking at your github right now
[07:03:28] <rindolf> ejjfunky0: thanks
[07:03:35] <cockatoodude> I have never tried any BSD except my hackintosh driver writing days
[07:03:51] <cockatoodude> I am ignorant to the sublte ways of the BSD
[07:03:57] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Ping timeout: 240 seconds)
[07:04:07] <rindolf> cockatoodude: ah
[07:05:09] <ejjfunky0> cockatoodude, rindolf's github is a good intro for linux users like us.
[07:05:28] <vysn> cockatoodude: incentive in the form of payment is always a good thing for programmers imho, it makes things more maintainable and can fuel innovation. as long as it is not a pay wall that prevents people from using it unless they pay.
[07:05:51] <rindolf> cockatoodude: SCO Unixware is now based on fbsd; 
[07:05:54] <cockatoodude> Yeah. But also, FOSS contribution balance with your paid work is best
[07:06:57] <ejjfunky0> vysn: yea. i mean i don't need money. i just need my cup to automagically filled with hot brewed delicious tasting coffee and aroma to die for. :D
[07:07:12] <ejjfunky0> i mean, i need money for something else. but currently,
[07:07:17] *** Joins: filename (~kilitary@kilitary.xyz)
[07:07:23] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:09] <rindolf> ejjfunky0: https://linux.slashdot.org/story/98/08/01/0948200/we-just-typed-make
[07:08:10] <bayaz> Title: We Just Typed Make - Slashdot 
[07:08:26] <Hash> $ make love
[07:08:28] <ejjfunky0> which reminds me, i'm going to brew some. i bet bill gates or elon musk got a Jarvis to serve them coffee.
[07:08:39] <Hash> Error: Cannot make love. Not enough arguments.
[07:08:40] <Hash> :D
[07:08:57] <vysn> rindolf: That's interesting, Thx for the link. 
[07:08:57] <Hash> Error: Cannot make love. Not enough or too many arguments
[07:09:24] <rindolf> vysn: you're welcome 
[07:10:10] <sonny> What are the PEEK and POKE functions?
[07:10:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:20] <vysn> Hash: try sudo make love instead
[07:10:22] <vysn> lol
[07:10:43] <Hash> lol
[07:10:51] <epony> they are key words, and are deadly
[07:11:12] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[07:11:12] <rindolf> most non-FOSS unixes have died.
[07:11:24] <sonny> I just want to know what they have to do with memory
[07:11:37] <Hash> memory seeknig functtions
[07:11:40] <epony> no
[07:11:45] <epony> store and recall
[07:11:47] <Hash> peeking means to look at memorylocations while machine is running
[07:11:55] <epony> POKE and PEEK
[07:11:58] <Hash> poking is modifying the memory locations
[07:11:59] <Hash> data.
[07:12:05] <Hash> peeking and poking means search and modify
[07:12:09] <sonny> poke stores data, peek gets data?
[07:12:12] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[07:12:13] <Hash> correct
[07:12:19] <sonny> ok, cool
[07:12:20] <sonny> thanks
[07:12:38] <epony> you also need DATA
[07:12:54] <epony> and READ
[07:12:57] <rindolf> ejjfunky0: Tech_8 : Hash : sup?
[07:13:02] <Hash> hi
[07:13:06] <Hash> chiense food
[07:13:09] <Hash> mango tea
[07:13:18] <epony> and liquid shit
[07:13:36] <tokerboker> i made a irc bot to solve puzzles on ##puzzle.
[07:13:54] <tokerboker> it does generally okay except on the numbers one where it misses the complex answers.
[07:13:57] <rindolf> "you ok, mates?"
[07:14:04] <tokerboker> in case you are interested in helping, please lmk
[07:14:08] <ejjfunky0> rindolf: nothing much, waiting water to boil to make coffee
[07:14:39] <rindolf> Hash: nice
[07:14:57] <ejjfunky0> frankly speaking, respect to programmers who can do without coffee. 2 thumbs up!
[07:15:48] <rindolf> tokerboker: https://perl-begin.org/uses/text-parsing/
[07:15:48] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:d942:5125:e3e3:6390)
[07:15:48] <bayaz> Type: application/xhtml+xml Size: 7.2 kB 
[07:15:50] <Hash> https://www.youtube.com/watch?v=7V5jKUO6qJg
[07:15:51] <bayaz> Title: How the Sony PS VITA Security Was Defeated | MVG 
[07:16:22] <tokerboker> rindolf: i dont want text parsing. it is already parsing text. i would love help on how to more efficiently solve the numbers puzzle.
[07:16:35] <tokerboker> when the answer consists of 5 or more numbers, my code takes more than 40 seconds.
[07:16:58] <Hash> run a profiler
[07:17:06] <Hash> Find out the cost associated with each function call and exprssion
[07:17:09] <Hash> See what's taking a long time
[07:17:11] <tokerboker> i think i know why its slow. i need a better algorithm.
[07:17:14] <Hash> cachegrind would be good
[07:17:19] <rindolf> tokerboker: build a CFG tree?
[07:17:31] <Hash> You can't know where the slow is until you profile your code
[07:17:39] <Hash> Then you can refactor
[07:18:29] <Hash> https://i.imgur.com/3eyvciR.png
[07:18:29] <bayaz> Type: image/png Size: 696.0 kB 
[07:18:35] <Hash> https://i.imgur.com/XTSCSq1.png
[07:18:36] <bayaz> Type: image/png Size: 217.6 kB 
[07:18:37] *** Quits: cliluw (~cliluw@47.147.77.43) (Read error: Connection reset by peer)
[07:18:40] <Hash> https://i.imgur.com/xsHtHmC.png
[07:18:40] <bayaz> Type: image/png Size: 103.8 kB 
[07:18:43] <Hash> https://i.imgur.com/Z3xrq6p.png
[07:18:43] <bayaz> Type: image/png Size: 221.3 kB 
[07:18:48] <Hash> https://i.imgur.com/jr9dKek.png <--
[07:18:49] <bayaz> Type: image/png Size: 243.2 kB 
[07:18:53] <Hash> https://i.imgur.com/TgnIwXN.png <-
[07:18:54] <bayaz> Type: image/png Size: 140.7 kB 
[07:19:01] <Hash> Last two shots showcase how profiling code helps.
[07:19:11] <Hash> Find out which exprssions cost most and then refactor them.
[07:19:57] <tokerboker> thanks for pointing to it hash - i dont think it will solve my problem.
[07:20:07] <Hash> https://i.imgur.com/xsHtHmC.png <- 84 calls, reduced from 146k calls. https://i.imgur.com/TgnIwXN.png
[07:20:08] <bayaz> Type: image/png Size: 103.8 kB 
[07:20:08] <bayaz> Type: image/png Size: 140.7 kB 
[07:20:11] <tokerboker> it is not that my implementation is slow. my algorithm is slow.
[07:20:25] <Hash> That's how you find out where the algorithm is slow.
[07:20:29] <Hash> That's what I'm telling you.
[07:20:42] <Hash> I know cuz I do this shit all day long.
[07:20:44] <Hash> :)
[07:20:51] <Hash> But you're right, I don't fully know your entire problem.
[07:20:58] <tokerboker> yes. exactly.
[07:20:59] <Hash> I'm just saying general techniques
[07:21:15] <tokerboker> yeah we all do some profiling at job. this is not a profiling issue.
[07:21:29] <absentia> optimize this bogosort fro me
[07:21:34] <Hash> It's not. But profling will show you where the algorithm costs most.
[07:21:38] <cockatoodude> Okay... So... I just wrote a SELinux addition that prevents read or write of directorys and directory trees or individual files, that protects the app data and critical system settings from root apps not whitelisted by the SELinux policy files, providing the same protection to app data as I did to processes and their memory space or execution
[07:21:39] <cockatoodude> states... And now compiling
[07:21:53] <tokerboker> when i have 5 numbers, i have to look at 5! combinations of numbers * 4^5 sign possibilities * multiple possibilities for brackets
[07:22:06] <cockatoodude> This is gonna be the best Android Custom ROM ever unless I'm being arrogant
[07:22:43] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[07:22:45] <cockatoodude> Also most of these changes I can submit upstream to Linux kernel mainline for future kernel versions
[07:22:50] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[07:23:02] <epony> make sure it compiles even
[07:23:16] <cockatoodude> Lol, well, it'll probably compile.
[07:23:24] <cockatoodude> The question is will it work and not have bugs
[07:23:35] <cockatoodude> I mean, I have a linter
[07:23:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[07:24:00] <epony> so said le'potty
[07:24:04] <amigojapan> ejjfunky: had shuumai dumplings for the first time in a long time
[07:24:15] <Hash> epony: amigojapan hi
[07:24:27] <amigojapan> Hi Hash 
[07:24:29] <Hash> what kidn fo dumplina re those
[07:24:34] <Hash> what is a dumpling?
[07:24:40] <Hash> is that a chicken leg drum stick?
[07:24:49] <Hash> or liek a soft boiled pasta filled with stuff in chinese
[07:24:51] <Hash> If orgot
[07:24:53] *** Quits: anon__ (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Read error: Connection reset by peer)
[07:25:06] <amigojapan> Hash: there are kind of 3 kinds. Let me show you pictures
[07:25:22] <epony> it's a chunk of food prepared that you dump in sauce
[07:25:59] <amigojapan> Hash: these are shuumai https://images.app.goo.gl/MgMr9jcWj27neVq96
[07:26:00] <bayaz> Title: Google Image Result for http://justbento.com/files/bento/images/vegshuumaip.jpg 
[07:26:13] <cockatoodude> There is a question between build and testing involved with SELinux changes and SELinux policy builds during full ROM build... Will it be able to boot and not bootloop, with SELinux enforcing and the new additions and changes I made... Did I whitelist access to app data folders and files automatic system bash script get proper? Will it bootloop
[07:26:13] <cockatoodude> endlessly?
[07:26:36] <cockatoodude> This is well. Something I have enough experience to know... Is hard for everyone including myself
[07:27:06] <amigojapan> Hash: these are gyouza https://images.app.goo.gl/FFKvMAzsAzJe3gtRA
[07:27:06] <bayaz> Title: Google Image Result for https://www.justonecookbook.com/wp-content/uploads/2020/04/Gyoza-3112-I.jpg 
[07:27:20] <flakland> selinux is paranoia
[07:27:31] <cockatoodude> All programmers create bugs and make mistakes. Finding the bug and understanding why the bug happened, is a huge task in some cases
[07:27:49] <flakland> if you need that, it means your system isn't designed right. like your "root" capability thing shouldn't actually be called root
[07:28:11] <amigojapan> Hash: these are wantan https://images.app.goo.gl/FTbpDqFPKtbwiS2eA
[07:28:11] <bayaz> Title: Google Image Result for https://t4.ftcdn.net/jpg/02/30/00/77/360_F_230007794_1fQBBlBQxa2j2BwgrCagjyJUuh1llPLd.jpg 
[07:28:16] *** Quits: chuckx (~chuckx@user/chuckx) (Quit: WeeChat 2.3)
[07:28:19] <cockatoodude> SELinux enforcing is a standard part of Android builds
[07:28:39] <flakland> and yourbuild is non-standard
[07:28:57] <cockatoodude> Also my root thing is based on ability to grant and use root in apps from Play Store, and f-droid
[07:29:15] <cockatoodude> That is true but there's no need to disable useful security features
[07:29:56] <epony> offer your sacrifice to Linuz
[07:30:18] <cockatoodude> I will be submitting this stuff upstream
[07:30:27] <epony> make one with everything
[07:30:33] <cockatoodude> Everything how?
[07:30:39] <epony> completely
[07:30:50] <cockatoodude> Like every part of what?
[07:30:57] <epony> everything
[07:32:17] <cockatoodude> I think I have every feature any Android phone has ever supported that the device I'm building the first port of my fork for supports covered, and now I'm just adding extra security and improving usability in ways not done before unless I just don't know of them
[07:32:50] <flakland> i thought you were adding a root backdoor
[07:32:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:33:00] <cockatoodude> No.
[07:33:12] <amigojapan> I have 2 hours consulting work today
[07:33:14] <epony> add a better auto-correct so it can fix SELinux submissions automagically
[07:34:10] <epony> the most important part of using SE_Linux is.. disabling it
[07:34:16] <cockatoodude> It does the SELinux policy file building at partition image building before building the partition image. It's not manual.
[07:34:48] <rindolf> amigojapan: hi, great
[07:35:13] <amigojapan> Ty rindolf 
[07:35:16] <cockatoodude> Lol, why disable it? The LineageOS project or any upstream AOSP stuff have never been audited or intended to not have SELinux enforcing enabled. It would be like opening a can of worms
[07:35:21] *** Joins: caramel (~caramel@user/caramel)
[07:35:45] <cockatoodude> The issue is, I have more to do than just rely on SELinux stock functionality
[07:35:48] <flakland> true, who knows how many bugs in the binder thing, and other android specific features exist
[07:36:42] <cockatoodude> Probably so many it would take every auditor in the world combined to stop finding multiple daily crucial 0 days
[07:37:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[07:37:32] <rindolf> amigojapan: i've ate burger&onion rings yesterday
[07:37:38] <cockatoodude> Even the play store apps that get whitelist or policy additions when downloaded... Often are or have malware
[07:37:42] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[07:38:34] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[07:39:06] <amigojapan> Very nice rindolf 
[07:39:19] <cockatoodude> The very notion that any complex and networked computer system can be perfectly and forward moving totally secure is a joke... But I can make it closer to perfect than anyone else does. And I can submit that code to other sources like upstream AOSP and Linux kernel... LineageOS have said they have 0 interest in even considering the possibility of
[07:39:20] <cockatoodude> using anything I make.
[07:39:37] <cockatoodude> So LineageOS lost an opportunity they probably don't care about
[07:40:12] *** Quits: u0_a84 (~hexingb@180.212.208.186) (Ping timeout: 240 seconds)
[07:40:16] <rindolf> amigojapan: and i updated https://www.shlomifish.org/meta/FAQ/choice_of_operating_system.xhtml
[07:40:17] <bayaz> Type: application/xhtml+xml Size: 1.6 kB 
[07:40:17] <cockatoodude> But AOSP and Linux kernel... They'll consider and look at anything from a known prior regular contributor
[07:40:34] <cockatoodude> Although their standards for accepting contributions are incredibly high
[07:40:50] *** Quits: newwebdev13 (~newwebdev@78.135.91.153) (Quit: Leaving)
[07:41:32] <flakland> i don't think they care as long as the code doesn't intentionally open a root back-door, and is correct
[07:41:39] <cockatoodude> Generally my Linux kernel contribution submissions get rejected 10 times before I fix all the issues that they reject them based on and add them upstream
[07:41:56] <cockatoodude> AOSP might not care. Linux kernel... Cares a lot
[07:42:01] <flakland> lol
[07:42:07] <rindolf> https://twitter.com/shlomif/status/1423188292900622336
[07:42:07] *** Joins: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net)
[07:42:11] *** Joins: u0_a84 (~hexingb@180.212.208.186)
[07:42:55] <cockatoodude> Like anyone who can get code in the Linux kernel without fixing issues they reject them based on at least once before accepting... Has so much of my respect I can't express it with words
[07:43:21] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[07:43:29] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.4)
[07:43:41] <rindolf> [[ Shlomi Fish on Twitter: "@iblametom Playing the devil's advocate: I welcome being spied upon: https://t.co/7t8jT6PpLc . I actually hope my thoughts have been recorded, because many of my ideas or imagined scenes or plots may have a lot of potential." / Twitter]]
[07:46:07] *** Quits: cockatoodude (~cockatood@2605:8d80:60b:fa8a:b126:fa78:92ac:734b) (Quit: Ping timeout (120 seconds))
[07:46:53] *** Joins: jtgd (~jtgd@user/jtgd)
[07:48:21] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[07:48:21] *** Joins: cockatoodude (~cockatood@2605:8d80:60b:fa8a:b126:fa78:92ac:734b)
[07:49:18] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[07:53:23] <rindolf> i think nobody's dick enuf to bankrupt a wealthy man/organisation/corp - https://en.wikipedia.org/wiki/Entrapment_(film) . and it isnt hard.
[07:53:23] <bayaz> Title: Entrapment (film) - Wikipedia 
[07:53:33] *** Quits: cockatoodude (~cockatood@2605:8d80:60b:fa8a:b126:fa78:92ac:734b) (Ping timeout: 256 seconds)
[07:53:48] <Hash> oracle cloud has a new dash
[07:53:50] <Hash> hmm
[07:54:38] <rindolf> Hash: WDYT of it?
[07:55:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:55:21] <Hash> What?
[07:55:57] <rindolf> Hash: WDYT of the new dashboard?
[07:56:56] <Hash> I don't speak Acronym.
[07:56:59] <Hash> English please
[07:58:17] <rindolf> Hash: What do you freaking think of the new dashboard?
[07:58:39] <Hash> Oh
[07:58:41] <Hash> Haha
[07:58:45] <Hash> That's what that means.
[07:58:56] <Hash> Well every iteration is an improvement upon the previous
[07:58:57] <flakland> "smh"
[08:02:34] <rindolf> Hash: great! https://en.wikipedia.org/wiki/Pygmalion_effect
[08:02:34] <bayaz> Title: Pygmalion effect - Wikipedia 
[08:04:11] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[08:05:58] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[08:06:07] <random-jellyfish> is there a difference in speed between LL and LR parsers?
[08:08:13] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:08:26] *** Joins: flakland (~flaknet99@32.211.211.39)
[08:09:53] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:10:06] *** Joins: flakland (~flaknet99@32.211.211.39)
[08:10:33] *** Joins: Bjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[08:10:50] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:11:01] <flakland> rand()%jellyfish i dont know, maybe
[08:11:14] *** Joins: xeyes (~user@user/duuude)
[08:11:36] <random-jellyfish> is there one which is always faster than the other?
[08:11:44] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Ping timeout: 272 seconds)
[08:11:49] <random-jellyfish> or does it vary by situation?
[08:11:59] *** Bjander is now known as Belxjander
[08:13:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:14:08] <flakland> the one that uses less memory, or more efficiently iterates
[08:14:37] <flakland> why only LL and LR, shouldn't there be more options?
[08:14:53] <flakland> i had to look this stuff up btw so i really have no idea 
[08:16:07] <flakland> also consider the things behind the scenes like allocators
[08:16:40] <flakland> if you use something like a std::vetctor  that there are certain points where allocation might hiccup
[08:17:34] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[08:21:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:23:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:23:43] *** Joins: cockatoodude (~cockatood@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[08:24:24] <cockatoodude> Okay... Got it working, now to do some penetration testing to look for vulns in my security mechanisms I just implemented
[08:24:54] <xeyes> pyzozord: people say cvs is superior to svn
[08:25:21] <xeyes> and mailing tarballs is superior to cvs
[08:26:22] <absentia> cockatoodude: how do you normally do your pentesting
[08:26:27] <random-jellyfish> whatever works is superior to what doesn't work
[08:29:00] *** Quits: u0_a84 (~hexingb@180.212.208.186) (Ping timeout: 240 seconds)
[08:29:26] <epony> people saying things is better than news agencies saying other things
[08:29:27] *** Joins: u0_a84 (~hexingb@180.212.208.186)
[08:30:57] *** Quits: cockatoodude (~cockatood@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:31:57] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:d942:5125:e3e3:6390) (Read error: Connection reset by peer)
[08:36:10] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[08:37:14] <rindolf> epony: .il / .pa are not warzones
[08:38:02] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[08:39:48] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 240 seconds)
[08:40:22] *** Quits: Notiche (~quassel@irk.rojekti.fi) (Remote host closed the connection)
[08:44:16] *** Joins: filename (~kilitary@kilitary.xyz)
[08:44:39] <xeyes> .pa may not be, but .ps intermittently is.
[08:45:26] <SrPx> kinda off-topic perhaps, but is there any way to make a quick chart of widely known data? for example, I'd like to see a plot of all countries GDP in function of time. couldn't find that with a quick google search
[08:45:54] <SrPx> would be amazing if there was a site or something where I could just choose the X axis and the Y axis from widely known datasets and it plots for me
[08:47:07] <random-jellyfish> SrPx kaggle.com ?
[08:47:48] <InPhase> SrPx: Google Image is pretty good about providing a lot of plots.
[08:48:14] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[08:48:34] <InPhase> SrPx: But it's not really possible to do something like "all countries over time" because the data just isn't that well-defined.  Countries come and go, and so you end up at some point having to insert some choices and reasoning.
[08:49:05] <InPhase> SrPx: If you have access to the data you want though, it's very easy to make arbitrary plots with Python, pandas, and matplotlib.
[08:49:12] <SrPx> kaggle looks really cool
[08:49:19] <SrPx> InPhase: fair enough
[08:50:54] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:52:26] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[08:53:16] <InPhase> SrPx: And it looks like kaggle has precisely that data, and encourages using Python to work with it in that same manner.
[08:53:51] *** Joins: cockatoodude (~cockatood@2605:8d80:60b:fa8a:141a:fe5:e4aa:6f42)
[08:55:56] *** Quits: cockatoodude (~cockatood@2605:8d80:60b:fa8a:141a:fe5:e4aa:6f42) (Client Quit)
[08:57:53] *** Joins: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[08:57:58] *** communistmuslim is now known as cockatoodude
[09:02:24] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[09:05:46] *** Joins: analognoise (~analognoi@91.196.220.77)
[09:07:06] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:08:58] <SrPx> nice
[09:11:05] *** Quits: suss` (~user@user/suss) (Remote host closed the connection)
[09:11:27] *** Joins: widp (~user@124.123.105.155)
[09:11:45] *** Joins: suss (~user@user/suss)
[09:12:15] <widp> How do I get a notification when a machine on chrome remote desktop is on?
[09:13:48] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 272 seconds)
[09:21:38] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[09:27:03] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Ping timeout: 256 seconds)
[09:28:14] *** Quits: lllh (~llh@198.48.244.21) (Quit: :::: ( UPP ) ::::)
[09:28:22] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[09:29:55] *** Joins: llh (~llh@user/llh)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:24] *** Quits: u0_a84 (~hexingb@180.212.208.186) (Ping timeout: 240 seconds)
[09:31:53] *** Joins: u0_a84 (~hexingb@180.212.208.186)
[09:34:36] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 240 seconds)
[09:36:52] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[09:40:20] *** Joins: np1810[m] (~np1810@2001:470:69fc:105::90ef)
[09:40:50] *** Joins: llh (~llh@user/llh)
[09:44:12] *** Quits: u0_a84 (~hexingb@180.212.208.186) (Ping timeout: 240 seconds)
[09:44:39] *** Joins: u0_a84 (~hexingb@112.21.164.38)
[09:51:02] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[09:52:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[10:01:47] *** Joins: k8yun (~k8yun@user/k8yun)
[10:04:13] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[10:07:02] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[10:07:20] *** Joins: u0_a8 (~hexingb@2409:8902:78c5:494f:e8f2:1810:1f78:1bbd)
[10:08:09] *** Joins: u0_a81 (~hexingb@111.30.224.249)
[10:09:32] *** Quits: u0_a84 (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[10:12:09] *** Quits: u0_a8 (~hexingb@2409:8902:78c5:494f:e8f2:1810:1f78:1bbd) (Ping timeout: 256 seconds)
[10:15:41] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Quit: Leaving)
[10:18:05] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[10:19:34] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[10:20:57] *** Quits: xff0x (~xff0x@2001:1a81:5301:6400:24c5:5158:4f07:abb5) (Ping timeout: 240 seconds)
[10:22:11] *** Joins: xff0x (~xff0x@2001:1a81:5301:6400:b772:c1d8:3c5d:2da4)
[10:22:21] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[10:22:23] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:24:04] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[10:24:30] *** Joins: user51 (~user51@176.228.1.103)
[10:24:40] *** Joins: suss (~user@user/suss)
[10:25:23] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:26:53] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 256 seconds)
[10:29:48] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 240 seconds)
[10:30:13] *** Joins: filename (~kilitary@kilitary.xyz)
[10:32:42] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[10:33:37] *** Quits: llh (~llh@user/llh) (Ping timeout: 272 seconds)
[10:34:02] *** Joins: anomal (~anomal@87.227.196.109)
[10:34:22] *** Joins: suss (~user@user/suss)
[10:34:53] <anomal> We have ANN that can look at a few photos of a scene and simulate smooth 3D transition between them in a matter of 2-3 seconds.
[10:34:56] <anomal> What is happening
[10:35:44] *** Quits: suss (~user@user/suss) (Client Quit)
[10:35:45] <anomal> If you need so few neurons to do that, what are we doing with all our neurons
[10:36:00] *** Joins: suss (~user@user/suss)
[10:36:38] *** Quits: Nintenuendo (~Nintenuen@user/Nintenuendo) (Quit: Can't IRC with this seat belt on.)
[10:37:47] *** Joins: Notiche (~quassel@irk.rojekti.fi)
[10:38:22] <cockatoodude> Oh
[10:39:02] *** Joins: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net)
[10:39:02] *** Quits: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net) (Changing host)
[10:39:02] *** Joins: Nintenuendo (~Nintenuen@user/Nintenuendo)
[10:39:14] <cockatoodude> You running that on CUDA?
[10:42:51] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[10:42:57] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[10:44:22] <anomal> cockatoodude: not me personally, sorry for working this vaguely. Check it out: https://nvlabs.github.io/instant-ngp/
[10:44:22] <bayaz> Title: Instant Neural Graphics Primitives with a Multiresolution Hash Encoding 
[10:44:27] <anomal> wording*
[10:44:42] <cockatoodude> Oh, so CPU based?
[10:45:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:45:53] <anomal> cockatoodude: it needs NVidia GPu RTX 3090 or better
[10:46:07] *** Joins: mitchxv2 (~mitch@24.31.27.81)
[10:46:07] <anomal> So yes CUDA as noted
[10:46:43] <cockatoodude> Well, what is the nature and purpose/intended licensing of your research?
[10:48:26] <cockatoodude> Is it non profit intended to be public domain code and papers or other sources of the research and gained knowledge?
[10:50:41] *** Quits: anomal (~anomal@87.227.196.109) (Remote host closed the connection)
[10:50:45] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:53:27] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:53:43] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[10:55:49] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[10:58:54] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[11:01:47] <suss> å½æ°ç»ä»¶ setState
[11:04:12] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 240 seconds)
[11:09:40] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[11:10:48] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[11:11:35] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:12:41] *** Quits: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net) (Quit: Leaving)
[11:14:52] *** Quits: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se) (Remote host closed the connection)
[11:15:14] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[11:15:14] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[11:15:14] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[11:15:16] *** Joins: oakyy (~oaky@h-155-4-161-203.a518.priv.bahnhof.se)
[11:17:47] *** Joins: frost (~frost@user/frost)
[11:19:49] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:21:31] *** Quits: filename (~kilitary@kilitary.xyz) (Ping timeout: 256 seconds)
[11:24:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[11:25:55] *** Joins: mickey8 (~user@user/mickey)
[11:27:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[11:28:44] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[11:29:07] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:30:29] *** Joins: aradesh (~aradesh@user/aradesh)
[11:30:56] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:31:17] *** Joins: NEOTRON (~NEOTRON@185.124.240.28)
[11:31:59] <NEOTRON> Hmmm
[11:32:30] *** Quits: raym (~raym@user/raym) (Ping timeout: 272 seconds)
[11:34:02] <GeDaMo> https://www.youtube.com/watch?v=XF2ayWcJfxo
[11:34:04] <bayaz> Title: C+C Music Factory - Things That Make You Go Hmmmm.... (Video Version) ft. Freedom Williams 
[11:36:40] *** Joins: l4s8g (~l4s8g@pd9e6249c.dip0.t-ipconnect.de)
[11:37:59] *** Joins: raym (~raym@user/raym)
[11:38:03] <user51> that sounds like a song i heard in a gta game but it's actually not. the hell :D
[11:38:56] <user51> i think the home explosives remix was also really good - things that make you go boom :P
[11:40:30] *** Quits: widp (~user@124.123.105.155) (Ping timeout: 256 seconds)
[11:43:57] *** Quits: bpmedley (~bpmedley@2600:1700:e2c:8410:68bc:51ee:29e8:6d26) (Ping timeout: 240 seconds)
[11:46:24] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[11:47:34] *** Joins: benji (~benji@user/benji)
[11:48:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 240 seconds)
[11:49:17] *** Joins: wolfshappen (~waff@irc.furworks.de)
[11:49:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:50:19] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[11:50:33] *** Joins: Sadale (~Sadale@user/sadale)
[11:53:04] *** Joins: widp (~user@124.123.105.155)
[11:53:59] *** Quits: Sadale (~Sadale@user/sadale) (Client Quit)
[11:54:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:54:21] *** Joins: Sadale (~Sadale@user/sadale)
[11:58:38] *** Joins: stagas (~stagas@2a02:587:c41b:6388:28e6:9c0d:4dc3:b071)
[12:00:19] *** Quits: analognoise (~analognoi@91.196.220.77) (Read error: Connection reset by peer)
[12:01:02] *** Joins: zaher (~zaher@37.48.153.0)
[12:01:26] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[12:02:14] *** Quits: u0_a81 (~hexingb@111.30.224.249) (Read error: Connection reset by peer)
[12:02:20] *** Joins: u0_a82 (~hexingb@111.30.224.249)
[12:04:38] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:06:42] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[12:07:38] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:09:05] *** Joins: anomal (~anomal@87.227.196.109)
[12:09:33] *** Joins: u0_a83 (~hexingb@2409:8902:78c1:7e7e:7435:e994:2f9:393f)
[12:09:58] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[12:11:57] *** Quits: u0_a82 (~hexingb@111.30.224.249) (Ping timeout: 256 seconds)
[12:11:59] *** Joins: u0_a84 (~hexingb@112.21.164.38)
[12:14:43] <anomal> It's probably more semantically correct for type checks to be "int has 5" instead of "5 is int"
[12:15:46] *** Quits: u0_a83 (~hexingb@2409:8902:78c1:7e7e:7435:e994:2f9:393f) (Ping timeout: 245 seconds)
[12:16:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:16:34] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:2df9:a9b:b95f:6056)
[12:18:13] *** Joins: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[12:25:08] *** Joins: mrig (~mrig@user/mrig)
[12:26:49] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[12:27:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:31] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:31:06] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:31:30] *** Quits: jtgd (~jtgd@user/jtgd) (Ping timeout: 256 seconds)
[12:33:28] *** Joins: rsx (~dummy@ppp-188-174-134-66.dynamic.mnet-online.de)
[12:36:14] *** Joins: xeyes (~user@user/duuude)
[12:37:14] *** Joins: monr0e (~monr0e@smtp.vixen.international)
[12:45:20] *** Joins: jtgd (~jtgd@user/jtgd)
[12:49:00] *** Quits: operateur (~My_user_n@93-87-171-136.dynamic.isp.telekom.rs) (Quit: WeeChat 3.4)
[12:49:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[12:50:18] <pyzozord> I might have found my new favorite language, vlang
[12:50:24] *** Quits: NEOTRON (~NEOTRON@185.124.240.28) (Quit: Textual IRC Client: www.textualapp.com)
[12:51:18] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[12:52:13] <pyzozord> I'm also wondering how language designers can guarantee language has no undefined behavior
[12:52:29] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:52:42] <deniska> pyzozord: by defining all behavior
[12:52:50] <anomal> pyzozord: the home page is mostly a list of things it doesn't have
[12:53:01] <anomal> pyzozord: that's good but not without context on how you do things in it
[12:53:48] <pyzozord> deniska: yeah I figured that part, I guess I'm wondering how one can know one defined all behavior
[12:54:11] <pyzozord> it sounds suspiciously similar to mathematical proof
[12:54:22] <deniska> pyzozord: C has undefined behavior because the standard says it does
[12:54:48] <pyzozord> deniska: what about the undefined behavior that the spec doesn't spec
[12:55:23] <deniska> pyzozord: then compiler authors implemented a language which doesn't follow the spec
[12:55:32] <pyzozord> anomal: yes it's very biased to "there is only one way to allowed to do things: the simplest way"
[12:55:48] <anomal> pyzozord: "the simplest way" is not a description of a way tho
[12:56:15] <anomal> pyzozord: again, we all like the aspiration, but everyone aspires for those things
[12:56:37] <pyzozord> I wouldn't agree rust aspires to being a simple language
[12:56:48] <pyzozord> nor c++
[12:57:07] <anomal> Doesn't it. It has no GC, no refcounting. You move things around.
[12:57:10] <anomal> It's very simple.
[12:57:16] <anomal> No inheritance too
[12:57:33] <anomal> Complexity arises out of poorly designed simplicity pyzozord
[12:57:36] *** Quits: cockatoodude (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Read error: Connection reset by peer)
[12:57:50] <GeDaMo> I have vague memories of a language that made a lot of big claims but didn't actually work which might have been called V
[12:58:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[12:58:30] <anomal> C++ is the paradox of how making a simple language simpler and simpler over time, makes it a complex mess
[12:58:39] *** Quits: oakyy (~oaky@h-155-4-161-203.a518.priv.bahnhof.se) (Quit: Leaving)
[12:58:54] *** Joins: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[12:59:20] *** communistmuslim is now known as cockatoodude
[12:59:23] <pyzozord> GeDaMo: I hope it's not https://vlang.io/
[12:59:31] <GeDaMo> https://news.ycombinator.com/item?id=20251157
[12:59:39] <GeDaMo> It seems to be
[12:59:45] <GeDaMo> That's from a couple fo years ago
[13:01:43] <GeDaMo> I feel like there was someone who did detailed looks at it, I can't remember where
[13:03:15] <deniska> I don't want simple languages, I want easy and pleasant to use languages :)
[13:03:38] <anomal> I want languages that try to do everything different for no reason
[13:03:40] <deniska> and "pleasant to use" is ultimately subjective
[13:04:07] <anomal> The principle of natural selection will pick what works
[13:04:30] <pyzozord> deniska: for me easy and pleasent to use implies simple
[13:05:12] <mrig>  Good Morning :)
[13:05:25] <rindolf> anomal: old != bad; https://twitter.com/shlomif/status/1364839109068541958
[13:05:29] <pyzozord> simple on multiple levels, the total technology stack / abstractions level, simple locally in the amount of features I need to know etc
[13:05:36] <anomal> rindolf: old = bad
[13:06:29] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[13:06:46] *** Joins: brw (~bas@haring.bas.sh)
[13:06:47] <rindolf> anomal: bullocks
[13:07:44] <pyzozord> for example I consider gc to be a tradeoff between "global" and "local" simplity
[13:08:11] <pyzozord> which gives net total of change in simplicty roughly zero
[13:08:39] <pyzozord> (assuming all other things being equal)
[13:09:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[13:09:24] <rindolf> anomal:   https://en.wikipedia.org/wiki/Goliath#Modern_usage_of_%22David_and_Goliath%22
[13:09:24] <bayaz> Title: Goliath - Wikipedia 
[13:09:38] *** Joins: jazzy2 (~jaziz@user/jaziz)
[13:09:51] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[13:10:32] *** Quits: jazzy2 (~jaziz@user/jaziz) (Max SendQ exceeded)
[13:11:45] *** Joins: jazzy2 (~jaziz@user/jaziz)
[13:12:32] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[13:12:57] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[13:13:51] *** Quits: wildo (~lain6141@119.224.72.222) (Quit: leaving)
[13:14:52] <rindolf> anomal: i want a lang where + does subtraction...
[13:18:17] <GeDaMo> Forth is that language! :P  : + negate + ; 
[13:19:01] <cockatoodude> The best language ever is QBASIC, or maybe Turing(which as far as I know never saw use outside of my municipality school system as a learning tool)
[13:19:13] <GeDaMo> Well, I suppose you could just do  : + - ;
[13:20:16] <ski>   (define + -)  ; Scheme
[13:21:01] <ski>   (+) = (-)  -- Haskell
[13:21:03] <rindolf> https://www.youtube.com/watch?v=pL0WDTcOZcM - brilliant!! ;]
[13:21:04] <bayaz> Title: Brrrrilliant ! (Yzma's Plans) 
[13:21:20] <anomal> Static compilation is outdated. All those new languages stand no chance.
[13:21:31] <anomal> I mean compiled ones. Like Rust and so on
[13:23:19] <rindolf> cockatoodude: python3 and perl5 are better, imho
[13:25:00] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:25:31] *** Joins: kcrk (~kcrk@user/kcrk)
[13:26:34] <GeDaMo> pyzozord: https://news.ycombinator.com/item?id=24482452
[13:29:02] <pyzozord> Honestly I also remember news about some miracle language made by one person in 2019
[13:29:30] <pyzozord> I remember thinking then "OK, lets wait few years and see if it still holds up"
[13:29:39] <pyzozord> It might have been V, I can't remember
[13:29:57] <deniska> extraordinary claims require extraordinary evidence :)
[13:30:38] *** jazzy2 is now known as jazzy
[13:31:07] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[13:31:15] <pyzozord> it kind of looks like the project may have actually held up, will need to read the comments and take a look at the project myself
[13:31:26] *** Joins: brw (~bas@haring.bas.sh)
[13:32:04] <deniska> this vlang has curlies
[13:32:13] <deniska> at least they got rid of semicolons :D
[13:34:25] <pyzozord> yeah I too was like "ooh, but I like whitespace scopes" but he explains that in his experience moving large blocks of code in production python is scary
[13:34:44] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[13:34:57] <pyzozord> I never moved large blocks of python code, so I can't tell myself
[13:35:12] <deniska> I moved, seems to be a largely exaggarated problem
[13:36:03] <pyzozord> if you can select a block of text and press tab to indent all of it at once it seems to me it shouldn't be scary at all
[13:36:05] <anomal> I actually think the future is every single language is interpreted. Even the kernel. But with a twist
[13:36:12] <deniska> If anything, I'd imagine if you accidentally copy an unbalanced amount of {}'s, it's a somewhat trickier mess to untangle
[13:36:19] *** Joins: ggg521 (~user@188.18.231.142)
[13:36:26] <pyzozord> anomal: maybe when we find another moore
[13:36:54] *** Quits: anomal (~anomal@87.227.196.109) (Remote host closed the connection)
[13:37:42] *** Quits: ggg521 (~user@188.18.231.142) (Client Quit)
[13:40:18] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[13:41:17] *** Quits: jazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[13:42:36] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:43:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[13:44:36] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[13:46:37] *** Quits: stagas (~stagas@2a02:587:c41b:6388:28e6:9c0d:4dc3:b071) (Ping timeout: 240 seconds)
[13:49:57] <smallville7123> oof       Gradle Daemon started in 3 s 666 ms
[13:50:07] <smallville7123> ITS THE DEVIL!!!
[13:51:00] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[13:54:31] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 256 seconds)
[13:54:59] *** Joins: luckyxxl (~luckyxxl@185.209.196.132)
[13:55:21] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[13:55:39] *** Joins: brw (~bas@haring.bas.sh)
[14:00:36] *** Joins: Cashlin (~hp@user/cashlin)
[14:00:40] *** Joins: jaysicks (~jaysicks@fibhost-66-137-185.fibernet.hu)
[14:00:53] *** Quits: Cashlin (~hp@user/cashlin) (Client Quit)
[14:01:20] *** Joins: Cashlin (~hp@user/cashlin)
[14:02:12] <pyzozord> v is written in v, I like it even more now
[14:02:33] <deniska> pyzozord: porth compiler is written in porth :D
[14:02:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[14:03:26] <pyzozord> that's the only way to make languages
[14:03:36] <pyzozord> the only good way
[14:04:02] <pyzozord> I also like I can read v without knowing v
[14:04:50] <deniska> I just mean it's not exactly a high bar to achieve
[14:04:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[14:05:14] <deniska> compilers are somewhat bigger programs than hello world, but a basic compiler is not exactly a huge project
[14:05:31] <nomagno> Ugh. I honestly find both github and gitlab unacceptable source forges nowadays
[14:06:04] <cockatoodude> make your own git repo site then
[14:06:29] <cockatoodude> I have one... It's accessible over i2p, or whitelisted ip address over normal internet.
[14:06:31] <nomagno> Well I'm using one I do consider acceptable currently
[14:06:48] <cockatoodude> Oh. is it git.i2p.rocks?
[14:07:21] <nomagno> Oh no, I meant in terms of functionality. I haven't checked onion/garlic routing functionality on the main instance
[14:07:26] *** Joins: plastico (~plastico@neomutt/plastico)
[14:07:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:08:02] <cockatoodude> Oh. git.i2p.rocks is or used to be available over git.rocks.i2p on i2p
[14:08:16] <pyzozord> deniska: curl https://raw.githubusercontent.com/vlang/vc/master/v.c | wc -l reports 91k loc
[14:08:17] <bayaz> Type: text/plain; charset=utf-8 Size: 669.0 kB 
[14:08:25] <pyzozord> deniska: that's v's compiler transpiled to c
[14:08:25] <cockatoodude> I personally use my own hosted git and garret repos... But I am a rebel
[14:08:26] <nomagno> I'm using Gitea currently, but might change to self-host cgit
[14:08:27] *** Joins: brabrax (~brabrax@user/brabrax)
[14:08:55] <nomagno> I'm trying to just host Git repos over raw, dumb http over nginx
[14:09:03] <nomagno> But it doesn't work for whatever reason
[14:10:20] <pyzozord> p
[14:10:21] <deniska> nomagno: for solo'deving?
[14:10:25] <cockatoodude> Well, the problem is you aren't following the right step by step guide, and or not reading over and over the entire documentation
[14:10:41] <pyzozord> I doubt I'll ever make a project larger than 91k loc to be honest
[14:11:28] <deniska> pyzozord: well, it's code compiled to a presumably lower level language
[14:11:36] <deniska> pyzozord: so obviously it has more lines :)
[14:11:57] <cockatoodude> Really?
[14:12:04] <pyzozord> as far as I understand they c and v are on the same level of abstraction
[14:12:16] <cockatoodude> I have a project that's over 4 million lines of code... but I spent over 20 years working on it
[14:12:31] <pyzozord> it's more like jumping ships than sinking down
[14:12:40] <cockatoodude> Also some of the code is generated by the program, as it is a self modifying code based design
[14:12:54] <pyzozord> s/skining/dividing/ to avoid unintentional negative meaning
[14:13:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[14:14:09] <pyzozord> damn seems like this guys just went ahead and did a lot of the things I am talking about
[14:14:25] <pyzozord> don't know much about this language but it's philosophy alignes with mine a lot
[14:14:35] <pyzozord> I'm actually considering if I should start contributing to this language
[14:14:59] <cockatoodude> pyzozord, so basically you have discovered a task you wanted to achieve for the first time has either been done, or mostly already done?
[14:15:21] <pyzozord> in the area of programming languages yes
[14:15:37] <cockatoodude> Oh, well... Then work with him to improve and maintain it
[14:15:37] <pyzozord> seems to be the closes to my ideas by a considerable margin
[14:16:07] <pyzozord> simple, static, no gc, simple, readable, simple
[14:16:43] <deniska> pyzozord: try writing something not too trivial in it first
[14:16:48] <pyzozord> look at the makefile of this project https://github.com/vlang/v/blob/master/Makefile
[14:16:49] <bayaz> Title: v/Makefile at master ? vlang/v 
[14:17:26] <cockatoodude> I hate when I have an amazing idea and then I find out someone already beat me to it
[14:17:39] <pyzozord> now look at the build directory of a text editor https://repo.or.cz/nvi.git/tree/HEAD:/dist
[14:17:41] <bayaz> Title: Public Git Hosting - nvi.git/tree - dist/ 
[14:17:48] *** Quits: u0_a84 (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[14:18:34] <cockatoodude> I refuse
[14:18:39] *** Joins: phrix (~phrix@185.76.176.45)
[14:19:09] *** Joins: dob1_ (~dob1@user/dob1)
[14:19:24] *** pink_sarco is now known as shiza
[14:19:30] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[14:19:47] <pyzozord> it has a repl!
[14:19:59] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[14:20:17] *** Joins: brw (~bas@haring.bas.sh)
[14:20:20] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 272 seconds)
[14:20:47] *** Joins: u0_a84 (~hexingb@112.21.164.38)
[14:20:59] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:dd43:2a0:be5a:7c1d)
[14:21:22] *** Quits: ejjfunky0 (~ejjfunky2@125.164.17.4) (Remote host closed the connection)
[14:21:28] <nomagno> deniska: Yeah well that's the main idea, solo dev. I provide both a tarball and the raw Git repo and get to devving
[14:21:59] <deniska> nomagno: for solo dev I just use git over ssh without any http frontends
[14:22:04] <pyzozord> I build it was so simple, took maybe 20 seconds to build everything
[14:22:23] <cockatoodude> Solo devs are usually open to help, if you impress them with theories or ideas they find good enough to take you under their wing or become your partner
[14:22:37] <pyzozord> this is simplicty incarnate
[14:22:53] <nomagno> GNU was apparently made by people who don't know how to read, because it'll switch to its custom tarball format mid-POSIX-packing if it finds pathnames longer than 100 characters
[14:23:03] <nomagno> ... Nowhere in the standard does it say that
[14:23:07] <cockatoodude> Lol, GNU is made by people like myself
[14:23:27] <cockatoodude> insane lunatics who have a way with computers but are bumbling idiots most of the time and don't rtfm
[14:23:28] <deniska> pyzozord: this makefile is a glorified shell script, and it calls git of all things :)
[14:23:39] <nomagno> Well you should pay more attention to standard texts there
[14:23:56] *** Joins: magla (~gelignite@55d46ecf.access.ecotel.net)
[14:23:58] <nomagno> ... If implenting a POSIX mode, that is
[14:24:12] <cockatoodude> Lol, hey, it's up to the maintainers to reject my code on any basis and tell me why so I can fix and resubmit it
[14:24:17] <pyzozord> deniska: yes I checked out where that git goes, it downloads and compiles the v compiler transpiled to c so that it can compile v in v
[14:24:31] <deniska> why is it not build.sh then though?
[14:24:42] <pyzozord> so in the 20 seconds it compiled itself twice: once in c and once in v
[14:24:46] <cockatoodude> I can't be contributing thousands of lines a month of code sometimes tens of thousands, to hundreds of projects, and actually have any idea what I'm doing
[14:24:47] <deniska> they're misusing the tool
[14:25:10] <pyzozord> deniska: yep could be a shell script absolutely
[14:25:23] <pyzozord> that's a good thing
[14:25:57] <cockatoodude> misusing a tool, is more commonly referred to as hacking
[14:26:17] <pyzozord> I have a feeling they did it in make intentionally seems like this language strongly follows the user experience princple of least surprise
[14:26:17] <cockatoodude> hacking is defined as the art of finding new and innovative unintended uses for existing things
[14:26:33] <cockatoodude> Well, that's what a real hacker will tell you something along the lines of
[14:26:34] <pyzozord> people expect to "make"
[14:26:44] <deniska> I don't expect `make` to do a git clone though
[14:26:56] <pyzozord> i seen many project do it
[14:26:57] <cockatoodude> Like installing Windows 10 Arm version, on a Asus C201P Chromebook... Was the last hack I did
[14:27:00] <deniska> and then the second `make` I expect to be a no-op, not doing the whole thing again
[14:27:08] <pyzozord> including lua and nethack
[14:27:15] <GeDaMo> "Engineering is the art of making what you want out of what you have"
[14:27:19] <cockatoodude> And it took probably 500 hours of work just to boot up and is not ready yet
[14:27:20] <deniska> nethack build system isn't something worth emulating :D
[14:27:28] <pyzozord> deniska: true that :D
[14:27:44] <pyzozord> but I don't mind this git clone, it simply downloads c version of itself to start the bootstrapping process
[14:27:59] <pyzozord> it could keep the c sources in the same project
[14:28:08] <pyzozord> separating it to a different repo is a design decision
[14:28:15] <deniska> sure, but then put it in a shell script
[14:28:17] <cockatoodude> engineering is the art of pushing things beyond the limits until they break, then learning what not to do next time. most people say "if it ain't broke, don't fix it." an engineer will say "if it isn't broken, it doesn't have enough features yet."
[14:29:52] <pyzozord> cockatoodude: both of these seem awful to me
[14:29:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[14:30:09] <cockatoodude> pyzozord, it's the art of engineering
[14:30:48] <cockatoodude> It's exactly what Elon Musk has been doing for about a year with his Raptor rockets... Trying to figure out exactly what the breaking point is by almost literally blowing them up on purpose
[14:30:52] <cockatoodude> Lol
[14:31:26] <cockatoodude> engineering and architecture of structures such as bridges and skyscrapers were also turned into a science through pushing past the limits and learning from catastrophy
[14:31:56] *** shiza is now known as pink_sarco
[14:32:15] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:32:18] *** Joins: Burgundy (~NA@86.121.143.206)
[14:32:28] *** Joins: filename (~kilitary@kilitary.xyz)
[14:33:03] <pyzozord> it's pushing to breaking point but not necessairly for the sake of more features
[14:33:48] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:34:22] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[14:34:23] <pyzozord> and it supports tcc
[14:35:05] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:38:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[14:38:11] <pyzozord> (those were two differe its)
[14:38:39] *** Joins: Klinda (~superleag@user/klinda)
[14:40:23] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[14:40:24] <pyzozord> i'm very excited about this project, it's like go but without gc
[14:40:28] <nomagno> Makefile contents:
[14:40:28] <nomagno> build:\n\t./build.sh
[14:40:29] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[14:40:30] <nomagno> :D
[14:40:44] <pyzozord> and go is like c but more python
[14:41:50] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:41:52] *** Quits: widp (~user@124.123.105.155) (Ping timeout: 272 seconds)
[14:42:54] <GeDaMo> Does it just use malloc or is there another means of memory allocation?
[14:42:55] <deniska> go is like java but not classy
[14:43:13] <A_Dragon> deniska: go is nothing like java
[14:43:30] <pyzozord> I think it's just malloc
[14:43:53] <pyzozord> it has a "autofree engine"
[14:44:18] <pyzozord> which is just inserting free calls into the code during compilation
[14:44:20] <deniska> A_Dragon: seem to cover a fairly similar usecase
[14:44:36] <pyzozord> but you can turn it off
[14:44:40] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[14:44:51] <pyzozord> apparently it also has optional gc
[14:44:57] *** Joins: brw (~bas@haring.bas.sh)
[14:45:02] <A_Dragon> deniska: arguably but go does not run in a VM
[14:45:06] <furrykef> I dunno, I think compared to languages like Haskell and Prolog, Go is quite a bit like Java :P
[14:45:09] <A_Dragon> go prefers fewer features
[14:45:23] <A_Dragon> furrykef: well yes but compared to asm C is just like FORTRAN
[14:47:03] <A_Dragon> go could be called similar to java if its early java, I guess?
[14:50:03] <deniska> A_Dragon: that's an implementation detail, there were java compilers
[14:50:57] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 256 seconds)
[14:51:02] <A_Dragon> true
[14:51:03] <deniska> A_Dragon: I'm talking more of a historic context. A big corp decides that existing languages are way too complex to find good workforce for, invents a language which is largerly the same language, but greatly simplified
[14:51:10] <A_Dragon> ah okay then yes
[14:51:37] <deniska> so kinda like java was a simplified C++ spinoff, go really feels to me like a simplified java
[14:52:09] <A_Dragon> funnily enough its supposed to be a C++ but better
[14:52:17] <pyzozord> wow he made his own kernel in v too
[14:52:21] <A_Dragon> go does some things better than java
[14:52:23] *** Joins: diophantoz (~diophanto@user/diophantoz)
[14:52:26] <pyzozord> that's what I wanted to do!
[14:52:29] <A_Dragon> like concurrency and friends
[14:52:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:52:39] <pyzozord> (own editor too)
[14:52:53] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[14:53:29] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:56:30] <diophantoz> hi, does this UML makes sense: https://imgur.com/a/YqvVVPb ?
[14:56:35] <diophantoz> what i want to express is that a "paket" can be either of the below activities listed: vigsel (marriage), dop etc but also contain both "boende" (living) and "mat" (food)
[14:57:15] <diophantoz> it's the part at the lower bottom which i'm uncertain about
[14:57:26] <diophantoz> lower half*
[14:57:58] *** Joins: widp (~user@124.123.105.155)
[14:58:19] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[14:59:04] <diophantoz> i don't want to repeat "boende" (living) and "mat" (food) for each individual paket-activity
[14:59:25] <amigojapan> Ok got home
[14:59:41] *** Quits: u0_a84 (~hexingb@112.21.164.38) (Ping timeout: 256 seconds)
[15:00:06] *** Joins: u0_a84 (~hexingb@112.21.164.38)
[15:03:33] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[15:09:13] *** Quits: monr0e (~monr0e@smtp.vixen.international) (Quit: Leaving)
[15:09:28] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[15:09:46] *** Joins: monr0e (~monr0e@31.132.33.9)
[15:09:48] *** Joins: brw (~bas@haring.bas.sh)
[15:09:53] *** Quits: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:dd43:2a0:be5a:7c1d) (Ping timeout: 256 seconds)
[15:10:48] *** Quits: monr0e (~monr0e@31.132.33.9) (Client Quit)
[15:13:02] *** Joins: monr0e (~monr0e@mail.vixen.international)
[15:13:19] <Sqaure> diophantoz, would help if the diagram was in english. Alla pratar inte svenska! =D
[15:13:26] *** Joins: makos (~nerdbox@78.9.119.190)
[15:13:38] <diophantoz> Sqaure, yes therefore i tried to translate some key words
[15:13:43] <diophantoz> but i guess it makes no sense
[15:14:58] *** Quits: monr0e (~monr0e@mail.vixen.international) (Client Quit)
[15:15:21] <Sqaure> it works. You got the inheritance and aggregation/associations right. 
[15:15:38] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[15:15:38] <Sqaure> is it for school assignment or work?
[15:16:09] <cockatoodude> People go to school or work?
[15:16:16] <cockatoodude> This seems a strange concept to me
[15:16:31] <cockatoodude> for me, I'm sitting at home isolating with covid chatting on IRC, while "working"
[15:16:31] <diophantoz> school
[15:16:40] *** Joins: monr0e (~monr0e@mail.vixen.international)
[15:16:50] <diophantoz> Sqaure, okay thank you
[15:16:53] <cockatoodude> Cool
[15:16:57] <cockatoodude> I am in university too
[15:17:15] <cockatoodude> 2 programs I do at my own pace, and one full time master's degree
[15:17:17] <diophantoz> well it's already sent in so no cheating
[15:18:09] *** Joins: frost (~frost@user/frost)
[15:18:22] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:18:29] <diophantoz> cockatoodude, what are you becoming?
[15:18:36] <diophantoz> with triple degrees?
[15:18:37] <Sqaure> if you are in school. Forget about OO and go 100% functional programming. Pro tip.
[15:18:49] <diophantoz> Sqaure, thanks
[15:19:17] *** Quits: monr0e (~monr0e@mail.vixen.international) (Read error: Connection reset by peer)
[15:19:20] *** Joins: trace987 (~trace@user/trace)
[15:19:40] <diophantoz> i didn't like OO at first but now i'm getting used to it
[15:19:56] <diophantoz> but there seems to be a lot going on with functional languages these days
[15:19:57] <cockatoodude> Well, I am studying avian medicine, a degree after normal doctor of veterinary medicine, and doing a PhD in genetic engineering, which I am focusing on avian genetics in, and I am doing a master's in Islamic studies
[15:20:06] *** Joins: rtypo (~alex@user/rtypo)
[15:20:22] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[15:20:29] <diophantoz> i see
[15:20:34] <Sqaure> OO is basically a title for a non existent theory. 
[15:21:45] <cockatoodude> Yeah, I am trying to be the next reformer of the Muslim faith, there has been 8 since it was founded... It's time to update out outdated bigoted and sexist ways of doing things, and stop taking scripture literally for the most part at all, but some parts you should take literally if you want to practice and are a believer
[15:22:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[15:23:04] <cockatoodude> My entire life and constant education and military/intelligence background then lone wolf global political actor, led me to be capable and understanding in such areas and ways and things, that have led me to the path where I am a couple years away from being ready to start reforming the religion, which hasn't been done in over 2 centuries
[15:23:34] *** Joins: brabrax (~brabrax@user/brabrax)
[15:23:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:24:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:24:18] *** Joins: monr0e (~monr0e@31.132.33.9)
[15:26:44] <rindolf> Sqaure: no...
[15:28:07] *** Joins: u0_a8 (~hexingb@2409:8902:78c2:bc3f:5dc4:26ba:a149:1a67)
[15:30:31] <Sqaure> rindolf, well. What would you say OO teaches? Put stuff that belongs to thing in thing? Its not much more than that. FP on the other hand, actually presents some sort of framework for tackling different types of problems in how it categorizes objects. 
[15:30:35] <rindolf> Sqaure: diophantoz : https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#what-does-object-oriented-programming--oop--mean
[15:30:36] <bayaz> Title: Freenode-programming-channel-FAQ/FAQ_with_ToC__generated.md at master ? shlomif/Freenode-programming-channel-FAQ 
[15:30:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[15:31:25] *** Quits: u0_a84 (~hexingb@112.21.164.38) (Ping timeout: 256 seconds)
[15:32:54] *** Quits: luckyxxl (~luckyxxl@185.209.196.132) (Quit: bye)
[15:33:37] <rindolf> Sqaure: https://en.wikipedia.org/wiki/Theory_of_forms - classes
[15:33:37] <bayaz> Title: Theory of forms - Wikipedia 
[15:37:07] <Sqaure> Not sure what the takeaway is there
[15:38:07] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[15:40:29] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[15:40:29] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:42:22] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:44:13] *** Quits: LuKaRo (~LuKaRo@p200300dfa72f4b9400000000000001f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:46:36] *** Joins: LuKaRo_ (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[15:46:46] <rindolf> arguably, Plato's The Republic is comedy - https://www.youtube.com/watch?v=tl4VD8uvgec
[15:46:46] <bayaz> Title: A Standup Philosopher 
[15:50:16] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[15:51:35] <absentia> cockatoodude: yeah but i am literally god
[15:51:39] <absentia> what do you have to say to that now
[15:52:24] *** Quits: makos (~nerdbox@78.9.119.190) (Quit: WeeChat 3.0)
[15:55:17] *** Joins: kubrickdave (~kubrickda@80-121-14-131.adsl.highway.telekom.at)
[15:55:37] *** Quits: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (Ping timeout: 240 seconds)
[15:57:04] <rindolf> cockatoodude: islam is  cool: http://shlomifishswiki.branchable.com/Saladin_Style/
[15:57:05] <bayaz> Title: Saladin Style 
[15:58:59] *** Joins: kubrickdave_ (~kubrickda@80-121-15-46.adsl.highway.telekom.at)
[15:59:24] *** Quits: kubrickdave (~kubrickda@80-121-14-131.adsl.highway.telekom.at) (Ping timeout: 240 seconds)
[16:01:58] <cockatoodude> Islam is a great religion to practice. It has the most potential to enable the physical and mental health benefit invoking functions of our neurology, and that's why I decided on it over any other religion, but in practicing for benefits inherent to human biology and neurology, which are invoked by practicing literally any religion... I became a true believer by experiencing and noticing huge changes 
[16:01:58] <cockatoodude> in my self, including forgetting I was addicted to drugs and going cold turkey for 3 weeks before I realized I unintentionally got clean and didn't have any withdrawls... I met my wife 1 week after reverting, Everything in life is better now.
[16:04:42] <rindolf> Â«They likely thought the Christian crusaders during Saladin's time will remain fanatical to Jesus. Well, most of them did not denounce their faith, but proclaimed Jesus told them that returning to fight Saladin was pointless. Some people would now call that "common sense", and I was told there are now several Christian interpretations of [% BtVS %], which had two Jewish actresses in leading roles
[16:04:42] <rindolf>  ( [% SMG %], and Alyson Hannigan ) and had a strong occult general theme.Â»
[16:09:16] <rindolf> cockatoodude: my ideasystem / franchise is hybrid and dynamic
[16:09:46] *** Joins: img (~img@user/img)
[16:11:31] *** Joins: widp` (~user@124.123.81.63)
[16:11:38] <cockatoodude>  What do you mean rindolf ?
[16:12:56] *** Joins: thinegen (~thinegen@user/thinegen)
[16:13:19] *** Joins: vitali64 (~vitali64@user/vitali64)
[16:13:56] <vitali64> Hello, what does vdso in include/vdso mean in Linux?
[16:13:59] *** Joins: password (~password8@user/password2)
[16:14:29] *** Quits: widp (~user@124.123.105.155) (Ping timeout: 256 seconds)
[16:14:57] *** Joins: xeyes (~user@user/duuude)
[16:15:03] <GeDaMo> "vDSO (virtual dynamic shared object) is a kernel mechanism for exporting a carefully selected set of kernel space routines to user space  applications so that applications can call these kernel space routines  in-process, without incurring the performance penalty of a mode switch from user mode to kernel mode that is inherent when calling these same kernel space routines by means of the system call interface." https://en.wikipedia.org/wiki/VDSO
[16:15:04] <bayaz> Title: vDSO - Wikipedia 
[16:15:17] <rindolf> cockatoodude: https://www.shlomifish.org/me/rindolf/#rindolfism
[16:15:18] <bayaz> Type: application/xhtml+xml 
[16:15:40] *** Joins: vysn (~vysn@user/vysn)
[16:15:44] <vitali64> Thanks, GeDaMo 
[16:16:06] <vitali64> and what does << mean in C programming?
[16:16:12] *** Joins: bpmedley (~bpmedley@2600:1700:e2c:8410:5014:69b3:7a23:e16d)
[16:16:28] *** Quits: widp` (~user@124.123.81.63) (Ping timeout: 256 seconds)
[16:16:31] <cockatoodude> It means logical bitwise operational shift right.
[16:16:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[16:16:57] <vitali64> I don't fulls understand
[16:17:03] <vitali64> s/fulls/fully/
[16:17:06] <vitali64> I don't fully understand
[16:17:17] <GeDaMo> 0001 << 1 = 1101
[16:17:31] <vitali64> so
[16:17:33] <GeDaMo> Er, sorry, that's wrong
[16:17:37] *** Quits: thinegen (~thinegen@user/thinegen) (Quit: Leaving)
[16:17:38] <vitali64> you mean
[16:17:44] <GeDaMo> 0001 << 1 = 0010
[16:17:50] <vitali64> ah ok
[16:17:59] <cockatoodude> Basically take the bits in the varibible or register or memory address, and move them to the left (i meant logical shift left) and fill in the space made by moving them over with 0's, any numbers that shift outsider the range of the binary representation, throw away\
[16:18:01] <GeDaMo> 0b0001 << 1 = 0b0010
[16:18:09] <absentia> vitali64: https://www.youtube.com/watch?v=uCsD3ZGzMgE
[16:18:10] <bayaz> Title: The Josephus Problem - Numberphile 
[16:18:16] <absentia> here's why you might use this
[16:18:23] <vitali64> Thanks, I understand now. Now, what does UL(1) mean?
[16:18:28] <rindolf> cockatoodude++ GeDaMo++
[16:18:32] *** Joins: swp (~Thunderbi@143.176.249.0)
[16:18:44] <GeDaMo> For an integer, it's equivalent to multiplying by a power of 2
[16:18:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:18:49] <vitali64> ok
[16:18:51] <vitali64> so
[16:18:58] <GeDaMo> Unsigned long
[16:19:03] <vitali64> If I set BIT(15)
[16:19:05] <vitali64> that means:
[16:19:11] *** Joins: ejjfunky0 (~ejjfunky2@125.164.16.133)
[16:19:17] <vitali64> 1 << 15 ?
[16:19:28] <GeDaMo> That depends on how BIT is defined, I don't think that's standard
[16:19:40] <cockatoodude> You need to know logical bit shifting, and the 4 mainly used boolean algebra operations, xor, not, or, and. Those 4 boolean algebra operations performed on a bit by bit bases of two input variables, combined with logical shifting right and left, make up almost everything in computer science
[16:19:44] <vitali64> #define BIT(nr)(UL(1) << (nr))
[16:19:45] <GeDaMo> Seems like a reasonable guess
[16:20:20] <rindolf> GeDaMo: hi, sup?
[16:20:36] <pyzozord> I don't mind any culture or religion as long as it doesn't lead to suffering of any kind
[16:20:45] <vitali64> and 1<<15 = ?
[16:20:53] <GeDaMo> 0x8000
[16:20:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:21:09] <pyzozord> and is not imposed
[16:21:18] <vitali64> ok
[16:21:19] <vitali64> thanks
[16:21:29] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[16:21:37] <vitali64> and 1<<5=?
[16:21:44] <GeDaMo> rindolf: not much
[16:21:55] <pyzozord> 0b10000
[16:21:58] <GeDaMo> 0x10
[16:22:01] <vitali64> thanks
[16:22:11] <vitali64> 0x10 or 0b10000?
[16:22:19] <GeDaMo> They're the same value
[16:22:22] <vitali64> ok
[16:22:26] <vitali64> I want hex
[16:22:29] <vitali64> so thats 0x10
[16:22:31] <pyzozord> oh sorry
[16:22:32] <GeDaMo> 0x indicates a hexadecimal or base 16 value
[16:22:46] <vitali64> thank you all!
[16:22:49] <GeDaMo> Each hex digit is 4 binary digits
[16:23:03] <pyzozord> oh nice heuristic
[16:23:19] <GeDaMo> That's why we use hex :P
[16:23:30] <pyzozord> maybe one day I'll learn to operate on binary and hex without slowly translating everything to decimal first
[16:23:51] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Client Quit)
[16:24:02] <GeDaMo> Switching between binary and hex (and octal) is much easier than converting to decimal :|
[16:24:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:24:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:26:30] <rindolf> GeDaMo: ah, still depressed?
[16:26:51] <GeDaMo> It comes and goes
[16:27:25] <cockatoodude> I ordered a new compiling beast
[16:27:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[16:27:48] <cockatoodude> I'm heading to the machine shop now to make the custom made case. after some cigarettes and red bulls
[16:28:01] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:28:05] <cockatoodude> Because there is no case to handle this setup
[16:28:08] <absentia> brb ascending to godhood
[16:29:05] *** Joins: Twipply (~Twipply@user/twipply)
[16:30:10] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[16:30:13] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7)
[16:30:45] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:edd4:c3b9:5c9d:f319)
[16:30:49] <GeDaMo> How I picture absentia :P https://pics.me.me/going-to-the-moon-brb-20112519.png
[16:30:49] <bayaz> Type: image/png Size: 100.5 kB 
[16:31:13] <absentia> how did you get this photo of me
[16:31:49] <GeDaMo> Aliens :|
[16:32:52] <rindolf> absentia: we are already gods: https://github.com/shlomif/shlomif-tech-diary/blob/master/multiverse-cosmology-v0.4.x.asciidoc#user-content-the-gods
[16:32:55] <bayaz> Title: shlomif-tech-diary/multiverse-cosmology-v0.4.x.asciidoc at master ? shlomif/shlomif-tech-diary 
[16:32:56] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:34:17] <pyzozord> Lol
[16:34:57] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:edd4:c3b9:5c9d:f319) (Ping timeout: 240 seconds)
[16:35:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[16:35:59] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[16:37:09] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[16:38:52] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[16:42:53] <pyzozord> That cat looks so determined
[16:46:14] <pyzozord> Im in a good mood today. Seeing some results of physical exercise is really motivating
[16:46:27] *** Joins: bEagle (~bEagle@86-60-144-3.dynamic.lounea.fi)
[16:48:18] <GeDaMo> pyzozord: https://ideone.com/67IZFX
[16:48:21] <bayaz> Title: Ideone.com 
[16:49:03] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:51:07] <pyzozord> I was just thinking about writing a table like this on paper to study the patterns
[16:51:50] <bEagle> i have a mathematical function written in javascript (for google sheets) that returns incorrect values and i don't know what is wrong with it. parts of it return correct values. here's the code: https://bpa.st/GDOQ it's supposed to return a multivariate hypergeometric probability for drawing a combination of cards from a deck with two variables.
[16:51:51] <bEagle> essentially an extension to the excel function "hypgeom.dist" but for two variables instead of one. any help?
[16:51:52] <bayaz> Title: View paste GDOQ 
[16:52:27] *** Joins: diophantoz_ (~diophanto@user/diophantoz)
[16:53:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:54:07] <rindolf> bEagle: line 11
[16:54:12] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 240 seconds)
[16:55:24] <bEagle> rindolf that part of the code actually works as far as i can tell (compared it against some test calculations in google sheets). why would it not work?
[16:55:29] <rindolf> floating point
[16:56:18] <bEagle> i'm sorry i don't quite understand
[16:56:57] <rindolf> bEagle: newbie ;]
[16:58:25] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[16:58:31] <bEagle> that is true.
[16:59:51] *** Joins: pulse (~pulse@user/pulse)
[16:59:55] <bEagle> ...is that a problem? should leave?
[17:00:06] <inhahe_> no
[17:00:17] <rindolf> bEagle: https://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/
[17:00:30] <ProfSimm> Let's eliminate the concept of falsey and truthy values and make them containers instead. true(value) false(value)
[17:00:38] <ProfSimm> What would that help with
[17:00:57] <deniska> so you can have both true(0) and false(0)? :P
[17:00:58] <inhahe_> it would help with pedantic clarity ;d
[17:01:16] <inhahe_> yeah what you need is bool(value)
[17:01:22] <GeDaMo> 'true' and 'false' are becoming keywords in C23, by the way 
[17:01:22] <ProfSimm> deniska: same like you can have 0 in two different classes
[17:01:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:01:41] *** Quits: cockatoodude (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Quit: Leaving)
[17:02:09] <ProfSimm> It means you can return false(reason...) from a function
[17:02:26] <inhahe_> bEagle i'm a newbie too but maybe your problem is you're doing integer division  when you need floating point division? or vice versa?
[17:02:48] <GeDaMo> Javascript doesn't have integer division
[17:03:06] <ProfSimm> GeDaMo: has for their new type I think
[17:04:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:04:40] <pyzozord> ProfSimm that container idea sounds suspiciously like its category of endofunctors
[17:04:56] <pyzozord> *in
[17:05:01] <rindolf> bEagle: being  a newbie is fine with theright stateof mind
[17:05:19] <ProfSimm> pyzozord: how
[17:05:42] <pyzozord> ProfSimm seems kind of monadic to me
[17:05:56] <ProfSimm> pyzozord: it just makes bool types containers
[17:05:57] <absentia> ProfSimm: that's already the case
[17:06:10] <ProfSimm> absentia: how
[17:06:11] <absentia> `true` and `false` are in fact nullary functions whose image is the Boolean set
[17:06:26] <ProfSimm> absc: 
[17:06:39] * rindolf was just teasing
[17:06:42] <absentia> when you call `true()` 
[17:06:46] <absentia> it returns you a boolean value
[17:06:55] <absc> ProfSimm: ??????
[17:07:03] <ProfSimm> absentia: false(reason) wasn't supposed to represent a function all, I mean it more like  :   false { reason }
[17:07:11] <ProfSimm> absc: pardon
[17:07:16] <absc> No worries
[17:07:29] <pyzozord> ProfSimm I was just being silly. But it does seem a bit monadic from what I know moans are just kind of boxes
[17:07:45] <pyzozord> Monads*
[17:07:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:07:59] *** Joins: stagas (~stagas@2a02:587:c41b:6388:8b34:53c3:322c:bdc5)
[17:08:14] <DPA> A boolean is the only semi saturating datatype in c. It's pretty cool, I think. bool x=0; x++ is 0; x++ is 1; x++ is 1. But x-- is 0, x-- is 1, x-- is 0, x-- is 1.
[17:08:28] <DPA> *integer datatype
[17:09:07] <DPA> (And by bool, I mean the bool from stdbool which is defined as the keyword _Bool, which is a native type)
[17:09:23] <absentia> semi saturating eh
[17:09:42] <bEagle> rindolf so if any of my numbers is larger than 2^32 i will get inaccurate results?
[17:09:43] <ProfSimm> Can we replace booleans with an error() container
[17:09:48] <ProfSimm> Everything else is true
[17:09:56] <deniska> C23 has native bool
[17:10:03] <deniska> and true/false are now keywords
[17:10:16] <deniska> ProfSimm: you are inventing a Result<> type from languages like rust
[17:10:20] <DPA> _True and _False existed for a long time.
[17:10:26] <ProfSimm> deniska: yes and no
[17:10:35] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:10:43] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 272 seconds)
[17:10:49] <ProfSimm> deniska: because when it's not an error, it's not wrapped, first. Second, because it's the boolean type
[17:12:14] <DPA> Edit, _Bool existed for a long time. Apparently, my memory was wrong about _True and _False
[17:12:21] <ProfSimm> deniska: basically there won't be true/false
[17:12:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:13:23] <ProfSimm> deniska: instead you declare ad hoc enums. Say instead of connection.IsOpen, you have connection.status: open|closed
[17:13:43] <ProfSimm> deniska: they will deliberately not be boolean
[17:13:55] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[17:14:28] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:14:47] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:15:53] <password> oi
[17:16:01] <password> how are you guys?
[17:16:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[17:16:46] <pyzozord> C23 seems to be quite a big change
[17:16:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:17:34] <pyzozord> Bringing some modern stuff really making C seem up to date with other modern languages
[17:17:56] <deniska> it mostly standardized what mainstream compilers were already implementing, like typeof()
[17:18:45] <DPA> I haven't looked at it yet. If I see anything bad / not in the spirit of C, I won't adopt it and will never refer to it as C.
[17:19:05] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[17:19:36] <bEagle> okay, so javascript doesn't have integers. since i'm dealing with probabilities it doesn't really matter that much as long as the results are correct to within 0.01%. is the code i'm running just totally broken or does it provide results that are somewhat correct? am i trying to do operations that are not allowed? here was the code again:
[17:19:37] <bEagle> https://bpa.st/GDOQ
[17:19:37] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[17:19:38] <bayaz> Title: View paste GDOQ 
[17:20:19] <absentia> bEagle: what test inputs have you tried against your function
[17:20:40] *** Joins: brabrax (~brabrax@user/brabrax)
[17:21:13] * absentia briefly remembers something about numerical stability
[17:21:46] <bEagle> absentia relatively high numbers. i could try some lower numbers but the problem is that it doesn't doesn't take var2 appropriately into account. let me try some lower umbers, just a sec
[17:21:47] <deniska> bEagle: JS won't be able to represent integer values bigger than 9007199254740991
[17:21:55] <pyzozord> I can really help with floats I need to study them more closely
[17:21:59] <pyzozord> Can't
[17:22:03] <absentia> don't we all
[17:22:08] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:22:15] <bEagle> deniska what's that in powers of 2?
[17:22:29] <deniska> bEagle: 2**52-1
[17:22:35] <deniska> 2**53-1
[17:22:52] <DPA> Actually, JS does have dedicated integers: BigInt. Things like 1000000000000000000000000000000n are valid. Note the n ath the end of the BigInt literal.
[17:23:05] <bEagle> okay, my highest value is 2^34 so that should be okay
[17:23:06] <ProfSimm> Booleans are an antipattern
[17:23:07] <absentia> these are a comparatively recent addition
[17:23:28] <absentia> actually bigints are basically universally supported now
[17:23:30] <absentia> hmm
[17:24:06] <pyzozord> bEagle: you could use BigInt for everything and just assume it's to some negative power
[17:24:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:24:12] <pyzozord> and convert only when printing output
[17:24:48] *** Joins: jamea (~jamea@177.239.81.39)
[17:25:55] <pyzozord> the 0.01 range you have seems very relaxed so might be that just not worrying about this will be good enough
[17:26:03] <pyzozord> considering that these are 64 bit floats
[17:26:15] <bEagle> verified: the code works for small numbers
[17:26:19] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[17:26:22] <pyzozord> unless you preform these opreations repeaditly
[17:26:23] <bEagle> so my problem is with the big number
[17:26:34] <absentia> bEagle: can you give an example that deviates from what you expect
[17:26:40] <DPA> The main difficulty with BigInt is that all parts involved need to be bigInt. So 10n * 10n is valid, but 10n * 10 is not. Math.* functions don't support them yet I think (or convert them to regular numbers? not sure).
[17:26:47] <bEagle> sure, absentia. just a sec.
[17:27:03] <ProfSimm> There isn't any valid use of storing things in a boolean
[17:27:04] <DPA> Converting Number->BigInt and vice versa is possible, though
[17:27:17] *** Joins: brabrax (~brabrax@user/brabrax)
[17:27:18] <pyzozord> DPA: I guess they can use some kind of third party library (as is evercommon in javascript) like https://github.com/MikeMcl/big.js
[17:27:19] <bayaz> Title: GitHub - MikeMcl/big.js: A small, fast JavaScript library for arbitrary-precision decimal arithmetic. 
[17:28:24] <absentia> hmmm...
[17:29:25] <absentia> your... combinatorial function
[17:29:44] <absentia> is returning non-integer values
[17:29:49] <absentia> it doesn't look correct to me
[17:30:02] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:30:05] <absentia> it should also probably be called `choose` or `binomialCoefficient` or something
[17:30:20] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:31:36] <absentia> you can use the recurrence `choose(n, 0) = 1; choose(n, k + 1) = choose(n, k) * ( (n - k) / (k + 1) )`
[17:32:16] * absentia pours a coffee
[17:32:33] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00ba.v6.ethz.ch)
[17:34:53] <ProfSimm> Or am I wrong, can someone point out one reason for storing things as boolean state
[17:34:57] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:35:39] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:35:40] <bEagle> absentia, this is super embarrassing but i had a typo in my sheet. it's actually returning values close enough to the correct value at all the ranges i need it to...
[17:35:45] <ProfSimm> re.
[17:35:54] <absentia> bEagle: that would be a remarkable coincidence
[17:36:15] <ProfSimm> Maybe I'm wrong , can someone tell me when we need to save state as boolean values
[17:36:17] <absentia> wait
[17:37:03] <absentia> i also copied this function wrong
[17:37:18] *** Quits: user51 (~user51@176.228.1.103) (Ping timeout: 272 seconds)
[17:37:41] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[17:38:50] <bEagle> actually it is not returning quite the correct values, you're right absentia
[17:40:56] *** Joins: newwebdev13 (~newwebdev@78.135.91.153)
[17:41:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:43:25] <pyzozord> bEagle: happens to everyone
[17:43:45] <pyzozord> oh it wasn't a typo after all, nevermind then
[17:43:51] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[17:44:05] <absentia> so what is this doing exactly?
[17:44:08] <bEagle> bleh i messed up again, they are the correct values.
[17:44:14] <absentia> the probability of drawing two particular hands from a deck of cards?
[17:44:34] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7) (Remote host closed the connection)
[17:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688)
[17:45:50] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[17:45:54] <bEagle> abesntia the probability of drawing a specific kind of a hand from a deck of cards where the number of a type of a card can be varied. so for example what is the probability of drawing 2 spades and 1 heart if the number of spades and hearts is a variable, for example. (i use it to calculate the odds of opening hands in magic the gathering depending
[17:45:55] <bEagle> on how many cards of type a, b and c i have in the deck)
[17:46:32] *** Joins: Rounin (~david@84.212.130.215)
[17:46:52] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688) (Remote host closed the connection)
[17:47:20] <bEagle> *absentia, looks like i lost the ability to type even
[17:47:33] <pyzozord> that is the "choose" thing
[17:48:29] <pyzozord> it's written as open bracket 2 digits one above the other, close bracket
[17:48:32] <bEagle> it's just an extension of a simple hypergeometric distribution for two variables
[17:48:45] <pyzozord> combination https://en.wikipedia.org/wiki/Combination
[17:48:45] <bayaz> Title: Combination - Wikipedia 
[17:49:14] <bEagle> this: https://en.wikipedia.org/wiki/Hypergeometric_distribution#Multivariate_hypergeometric_distribution
[17:49:14] <bayaz> Title: Hypergeometric distribution - Wikipedia 
[17:49:17] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:108a:7490:94e9:7e0d) (Remote host closed the connection)
[17:49:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[17:49:55] <absentia> bEagle: i see
[17:50:06] <absentia> this is basically the urn example they give
[17:50:14] <pyzozord> yeah, there is a whole paper on using this with magic the gathering
[17:50:15] <bEagle> but hey huge thanks to everyone involved, i'm really sorry my mistake was as elementary as a typo not even in the code
[17:50:26] <f843d0> bEagle: if we have N cards (e.g. 52), and M seeds (e.g. 4) of same population m (e.g. 13), then picking up a particular seed on first attempt is m / N = 1 / M.
[17:50:43] <bEagle> absentia, correct. now i can just call a custom function in google sheets instead of writing it out every time
[17:51:31] <KillerWasp> hello random barnacle guys
[17:51:32] <pyzozord> I'm still confused about what is binomial conefficient, even though it was explained to me using the Pascal's triangle
[17:52:00] <KillerWasp> /ignore absentia 
[17:52:21] <absentia> lol
[17:52:30] <absentia> i love my tactics for warding off the ignorant
[17:52:40] <ProfSimm> So, does anyone have a use case for boolean state
[17:52:49] <absentia> irc is an excellent ground for testing out psychological technology
[17:52:52] <bEagle> pyzozord it's when you put the ball back in the urn and pick again. same thing but without replacement
[17:53:18] *** Joins: Daemonick (~Daemonick@193.92.118.5.dsl.dyn.forthnet.gr)
[17:53:36] <deniska> ProfSimm: what type does `1 < 2` evaluate to?
[17:53:50] <bEagle> oops meant *with replacement. my bad. i'm just gonna go i keep making stupid mistakes.
[17:54:01] <absentia> bEagle: `function choose(n,k) { let r = 1; for (var i=1; i <= k; i++) { r *= (n+1-1)/i; } return r; }`
[17:54:06] <absentia> spot the typo
[17:54:12] <absentia> this is why i thought you were returning non-integer values
[17:54:20] <Daemonick> Mathematics are not consistent, completed and decisable
[17:54:37] <Daemonick> Great news...we are futureproof!
[17:55:51] <bEagle> absentia you've got "1" instead of "i" near the end?
[17:55:58] <absentia> stupid mistakes
[17:56:13] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:56:15] <f843d0> absentia: "r *= (n+1-1)/i;" ?
[17:57:06] <ProfSimm> deniska: same like your CPU, it doesn't evaluate to any type. It just branches you into two expressions you supply
[17:57:20] <ProfSimm> deniska: remove the middleman
[17:57:33] <deniska> ProfSimm: so I won't be able to write something like `let a = x > y`?
[17:58:11] <bEagle> but hey, huge thanks once more and i owe you people one. it's been a journey learning javascript from scratch just for this one specific purpose
[17:58:19] <ProfSimm> deniska: let's think ahead. What is a and what do you want to use it for
[17:58:34] <absentia> TIL hypergeometric distributions
[17:59:20] <deniska> ProfSimm: dunno, maybe it's a part of a logical expression which is too unweildy to put in a single `if`
[17:59:29] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[17:59:37] *** Joins: src (~src@user/src)
[18:00:05] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:00:20] *** Joins: yewscion (~yewscion@52.94.133.128)
[18:00:33] *** Joins: trevors (~trevors@user/trevors)
[18:00:38] <DPA> bool is_broken = c == $broken; if(!is_broken && (a==$open) != (b==$open) && c < 10 && is_thing(a,b,c,d,e,f))
[18:00:47] <ProfSimm> deniska: you can still break down expressions because if you map an outcome to some values you can test there values after
[18:01:48] <ProfSimm> deniska: let's assume you're lazy and use identifiers to emulate your old workflow:     let a = x > y then :true else :false
[18:02:25] <ProfSimm> deniska: but that's verbose and won't occur in the real world  a lot. But you can't think about separate bool outcomes or you'll replicate them of course
[18:03:00] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[18:03:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:03:54] <amigojapan> Sounds like a trinary statement in c ProfSimm 
[18:04:11] <ProfSimm> ternary?
[18:04:19] <amigojapan> Yeah
[18:04:34] <ProfSimm> It is. Except there's no if. The ">" is the if
[18:04:45] <amigojapan> I see
[18:05:39] *** Joins: suss (~user@user/suss)
[18:06:08] <amigojapan> ProfSimm: what language is that?
[18:07:38] <ProfSimm> if (x > y && a > b || c < d) 1 else 0.      becomes:       x > y then a > b else c < d then 1 else 0.
[18:07:49] <ProfSimm> amigojapan: hypothetical. I'm wondering if I need booleans
[18:08:34] <ProfSimm> Alternatively we can replace then/else with and/or
[18:08:52] <ProfSimm> val = x > y & a > b 
[18:08:54] <ProfSimm> oops
[18:08:56] <DPA> In C, that'd be:  x > y ? a > b : (c < d ? 1 : 0). (Not sure if the braces are necessary, I never remember what order these evaluate
[18:09:04] <deniska> we already have a language without bools, it's called "C", and we did invent bools on top it :)
[18:09:23] <ProfSimm> val = x > y & a > b | c < d & 1 | 0
[18:09:57] <ProfSimm> deniska: C is not a language without bools, it's instead a language with bools without a bool ty[e
[18:10:01] <ProfSimm> type*
[18:10:25] <ProfSimm> oh wait., I'm a moron
[18:10:33] <ProfSimm> deniska: your example will work man
[18:10:45] <DPA> x > y then a > b else c < d then 1 else 0  is ambiguous because id that (x > y then a > b else c < d) then 1 else 0  or is it  x > y then a > b else (c < d then 1 else 0)  Depends on operator precedence.
[18:10:45] <ProfSimm> let a = x > y; will work it'l be a closure
[18:10:55] <f843d0> DPA: wouldn't it be equivalent to x > y ? a > b : c < d; ?
[18:11:24] *** Quits: newwebdev13 (~newwebdev@78.135.91.153) (Read error: Connection reset by peer)
[18:11:33] <DPA> Yes, that'd work too
[18:11:38] *** Joins: newwebdev13 (~newwebdev@78.135.91.153)
[18:12:17] <ProfSimm> deniska: so:    let a = x > y;       let b = a(1, 0); <--- b is 1 or 9
[18:12:19] <ProfSimm> 1 or 0
[18:12:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[18:12:48] <ProfSimm> Church encoded booleans, it's called
[18:13:04] *** Joins: Guest21 (~Guest21@36.72.21.216)
[18:15:06] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[18:16:54] <ProfSimm> re
[18:17:17] <ProfSimm> deniska: so did we figure bools out :D
[18:18:37] <DPA> I'd absolutely mix up 1 and 0 occasionally with this notation.
[18:18:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:19:44] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[18:20:00] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[18:21:05] <ProfSimm> DPA:  1 and 0 was just sample result. There's no 1 and 0 in the actual notation
[18:21:43] <f843d0> Should be even possible to avoid boolean operators I believe
[18:22:18] <ProfSimm> f843d0: you mean AND and OR?
[18:22:41] <ProfSimm> f843d0: you can, but in this notation they become so useful, it's good to have them. You can use them as both logical operators, AND as a ternary
[18:22:45] <DPA> As I understand it, (true,false) would be mapped to (1,0), right? I'd certainly sometimes mix it up and assume (false,true) and then tell it to a(0,1) instead of a(1,0)
[18:22:47] <deniska> you're literally arguing against logic :D
[18:22:52] <ProfSimm> a ? b: c becomes: a & b | c
[18:22:58] <f843d0> Something like int foo = (x > y) * ((a > b + c < d + 1) / (a > b + c < d + 1));
[18:23:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:23:29] <ProfSimm> DPA: why'd you randomly assume a (true, false) argument list is (false, true)
[18:23:44] <ProfSimm> DPA: do you sometimes get confused that it's "if else then" :P
[18:25:05] <DPA> No. But I've been trained on that for years. With lists, I'm more likely to forget the order. I'd think about them in completely different ways.
[18:25:55] <ProfSimm> DPA: well it's not a list, it's two things:    true, false   aka then, else
[18:26:05] <ProfSimm> DPA so you already know it
[18:26:35] <ProfSimm> DPA: technically you can use named params, but it's just pointlessly verbose
[18:26:53] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[18:26:58] <ProfSimm> DPA:    let a = x > y;    let b = a (then: 1, else: 0)
[18:27:45] <DPA> That I like. No way to mix up this.
[18:28:08] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[18:28:09] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[18:29:01] <DPA> I could even say (else: 0, then: 1), I presume.
[18:29:06] <ProfSimm> Right
[18:29:34] <ProfSimm> DPA:  but I think using & and | as ternary is very powerful too
[18:29:56] <ProfSimm> DPA:   let a = x > y;   let b = a & 1 | 0;
[18:29:59] <xeyes> O people, we want to set up a web service to get all meanings for a word in language A in language B. Any ideas how to implement that and what resources to use?
[18:30:00] *** Quits: dislabled (~dislabled@115.229.164.82.customer.cdi.no) (Quit: ZNC 1.8.2 - https://znc.in)
[18:30:03] *** Joins: trevors (~trevors@user/trevors)
[18:30:14] <xeyes> Google translate does that, but that is restricted
[18:30:21] <ProfSimm> xeyes: is it i
[18:30:24] <pikapika> Modern synthetic and modern analytical geometry have much in common, and may be grouped together under the common name "projective geometry." Each has advantages over the other. The continual direct viewing of figures as existing in space adds exceptional charm to the study of the former, but the latter has the advantage in this, that a well-established routine in a certain degree may outrun thought itself, and thereby aid 
[18:30:26] <pikapika> original research.
[18:30:40] <xeyes> ProfSimm: i?
[18:30:41] *** Joins: dislabled (~dislabled@115.229.164.82.customer.cdi.no)
[18:30:42] <pikapika> So analytic bashing was apparently well used even in the late 19th century
[18:30:53] *** Joins: roan (~roan@user/roan)
[18:31:10] <FloridaMan> I knew bash was old, but damn
[18:31:21] <xeyes> lol
[18:31:26] <pikapika> FloridaMan, hi uwu
[18:31:38] <xeyes> topple the tzar with shellshock
[18:32:38] <xeyes> We want to do that for 30 languages to 30 languages
[18:32:39] <FloridaMan> Yo
[18:32:49] <xeyes> Any ideas?
[18:33:20] <pulse> https://en.wikipedia.org/wiki/Git#Naming
[18:33:20] <bayaz> Title: Git - Wikipedia 
[18:33:28] <pulse> ""Goddamn idiotic truckload of sh*t": when it breaks." seems legit
[18:33:50] <xeyes> Google translate is restricted, most dictionaries are mono or bilingual
[18:34:00] *** Quits: moniker- (~mon@dh207-120-121.xnet.hr) (Remote host closed the connection)
[18:34:58] <xeyes> and using 1 language as a proxy might be a broken approach
[18:34:59] *** Guest21 is now known as Sidiq
[18:35:51] <inhahe__> using 1 language as an intermediary would be less than ideal but it would make for exponentially fewer translations
[18:35:54] <ProfSimm> I just realized if boolean operator produce closures, we don't need "if" statement at all.
[18:36:13] <ProfSimm> so not needing bool values, means not needing if statements. Accidental complexity eliminated. Win win
[18:36:48] <ProfSimm> Notonly that, but short circuiting is automatic, no extra logic needed
[18:36:59] <ProfSimm> Ffffuuu
[18:37:43] <inhahe__> can you give an example
[18:38:38] <ProfSimm> inhahe_:  well I did abov,e weren't you around. That's OK. So AND and OR get compiled to invoking 2-arg closures in a specific order. Boolean operators like == and < and > get compiled to these bool closures.
[18:39:05] <ProfSimm> inhahe_: so  this   let a = 5 > 10; gets compiled to a closure you call like:    let b = a(1, 2)  // b = 2
[18:39:40] <ProfSimm> inhahe_: you can type the same thing like this:   let b = a && 1 || 2
[18:39:46] <ProfSimm> inhahe_: same as ternary
[18:40:04] <ProfSimm> inhahe_:   or directly:     let b = 5 > 10 && 1 || 2
[18:40:48] <xeyes> any channels for NLP?
[18:40:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:41:24] <ProfSimm> inhahe_: I like when a plan comes together
[18:41:58] <inhahe__> ð
[18:42:39] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:43:08] <xeyes> that being natural language processing
[18:43:18] <FloridaMan> xeyes: Natural Language Processing or Neurolinguistic Programming?
[18:43:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:43:22] <ProfSimm> inhahe_: the main thing is that there are no truthy and falsy values. There are bool closures. That's it
[18:43:31] <FloridaMan> Don't know why I'm asking. Don't know either way lol
[18:43:38] <xeyes> haha
[18:44:01] <amigojapan> Good night
[18:44:04] <xeyes> natural impulse to inform about acronym collision
[18:44:35] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:44:37] <Decker> ProfSimm welcome to C# :)
[18:44:39] *** Joins: phrix (~phrix@185.76.176.45)
[18:44:52] <ProfSimm> Decker: I don't think so. Please explain
[18:45:11] <pikapika> There are many languages out there
[18:45:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:45:16] <Decker> there's no truthy things - no implicit bool conversions you have to do everything with an explicit expression
[18:45:29] <pikapika> Generally people prefer languages where they know their mallocs and frees
[18:45:39] <Decker> const pCat = null;  if( pCat ) {}  is a no-no; and partially why I gave up on C#.
[18:45:52] <ProfSimm> Decker: yes but in my model there are no boolean values at all.
[18:46:07] <FloridaMan> Is that true?
[18:46:13] <pikapika> Java also has null a different type than boolean
[18:46:18] <pikapika> Its not anything surprising or strange
[18:46:30] *** Quits: roan (~roan@user/roan) (Quit: Lost terminal)
[18:47:10] <ProfSimm> Decker: C# considers 0 false. Sorry
[18:47:22] <pikapika> I dont know C#
[18:47:30] <pikapika> But in Java you have to make object nullity check explicit
[18:47:30] <xeyes> Imagine not considering 0 false
[18:47:30] <Decker> nope... int a = 0; if ( a ) doesn't work either
[18:47:35] <Decker> no conversion to bool
[18:47:38] <xeyes> 0 is blatant falsehood
[18:47:40] <pikapika> if(!obj) won't work
[18:47:44] <pikapika> if(obj!=null) works
[18:47:46] <pikapika> last I remember
[18:47:53] <Decker> ya or a==0
[18:47:59] <Decker> or a.equals(0)
[18:48:15] <pikapika> 0 (int) is also not automatically converted to false (boolean) in java
[18:48:20] *** Quits: zaher (~zaher@37.48.153.0) (Ping timeout: 256 seconds)
[18:49:46] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[18:49:50] <ProfSimm> OK I stand corrected
[18:50:17] <ProfSimm> In any case, I encode bools are closures, not as values
[18:51:17] <DPA> A natural word is a very difficult thing. It's not just some thing, action, etc. A word can contain information about time, status, feeling, views, relation, opinion, etc. A whole conceptual idea. And they may mean different things in different contexts.
[18:51:17] <DPA> Different cultures & languages may have completely different concepts, ideas, and ways to view things. So a thing in one language can always never be translated perfectly to another. At most, an attempt can be made to preserve information, meaning, wording, or some other aspect as good as possible.
[18:52:54] *** Joins: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:53:37] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[18:54:14] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Client Quit)
[18:54:33] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[18:54:36] <suss> any language does the same way that lisp expression does?
[18:55:07] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Client Quit)
[18:55:12] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[18:55:23] *** Joins: mmfood (~mmfood@94.234.55.71)
[18:56:20] <Decker> suss like WAST?
[18:57:07] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[18:57:25] <suss> many languages learned the conceptual stuff from lisp, but just cant get closer to it.
[18:57:28] *** Quits: mmfood (~mmfood@94.234.55.71) (Client Quit)
[18:57:44] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[18:58:35] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Client Quit)
[18:58:51] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[18:59:09] *** Quits: arch-angel (~quassel@user/arch-angel) (Ping timeout: 256 seconds)
[19:00:48] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[19:01:39] <ProfSimm> Decker: C# has a separate null coalescence operator. Two in fact. Shame, they could have reused bool operators for this if they had a null to bool operator.
[19:02:00] <ProfSimm> Decker:  i.e. let's say "foo?" expands to "foo == null ? true: false"
[19:02:16] <ProfSimm> Decker: well just "foo == null" 
[19:02:47] <ProfSimm> Decker: so then a ?? b ?? c ?? d becomes:    a? || b? || c? || d
[19:03:23] *** Joins: moniker- (~mon@dh207-120-121.xnet.hr)
[19:03:46] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[19:07:08] <ProfSimm> Decker: wait, final take, it should expand to "foo == null && foo"
[19:07:51] <bjs> ProfSimm: isn't the point that `a ?? b` need not return a boolean
[19:07:53] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[19:08:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:09:13] <ProfSimm> bjs: yes, well in my case nothing returns a boolean
[19:09:22] <DPA> In JS, || will return the first non-falsy thing. And && the first falsy thing, or the last thing if everything is true. It's pretty useful if you want a, or b if a isn't available, or c if b wasn't available either, and so on.
[19:09:39] <ProfSimm> Yes what DPA says
[19:09:46] *** Quits: X-Scale (~ARM@46.50.5.75) (Ping timeout: 272 seconds)
[19:09:48] *** X-Scale` is now known as X-Scale
[19:09:57] <bjs> ProfSimm: i'm confused, are you talking about C# or not? 
[19:10:04] <ProfSimm> I don't collapse things to bool unless it's the only option, and then it's a church boolean (a function)
[19:10:26] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Ping timeout: 256 seconds)
[19:10:28] <ProfSimm> bjs: I'm thinking how C# and other languages could be simpler with slightly different semantics
[19:11:14] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[19:11:15] <bjs> ProfSimm: by making the "boolean" and/or operators work for non-boolean types, is that your suggestion?
[19:13:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:14:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[19:15:36] <ProfSimm> bjs: Well it's tricky. On one hand, yes, it's about allowing the operators to work for non-bool types. But on the other hand nothing at all can stand for boolean values. No falsey/truthy values
[19:16:33] <edgar-rft> let's goto church and worship booleans
[19:17:40] <ProfSimm> I ban bool values.
[19:17:51] <ProfSimm> And null. Well I still have null, but you can't set it on anything.
[19:19:12] <absentia> out of memory, kill zombie or sacrifice child
[19:20:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[19:22:50] <ProfSimm> absentia: I recall some guidelines at Google that you can't have an API like kill_children() because it's not PC
[19:23:06] <Decker> :) Snap provides vulnerabilty for Linux
[19:23:10] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382)
[19:23:24] <rindolf> https://www.shlomifish.org/humour/fortunes/show.cgi?id=shlomif-story-it-doesnt-take-a-witch-to-fix-this-computer
[19:23:24] <bayaz> Type: application/xhtml+xml; charset=utf-8 Size: 2.6 kB 
[19:23:27] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[19:23:44] <FloridaMan> ProfSimm: add_slave()
[19:23:49] *** Joins: trevors (~trevors@user/trevors)
[19:23:58] <sonny> In a unix system, how much memory does a process usually get?
[19:24:11] <sonny> Is it a page worth?
[19:24:32] <ProfSimm> Ah yeah also you can't call it master/slave
[19:25:07] <rindolf> sonny: POSIX is minimalistic
[19:25:34] <ProfSimm> I'd honestly contemplate quitting if this was a requirement
[19:25:41] <ProfSimm> I wouldn't quit, but I'd consider
[19:25:54] <absentia> wonder how many millions of dollars and hours of productivity were spent effecting this name change
[19:26:30] <absentia> during this pandemic i have discovered that no one gives a fuck about the good-thing-in-itself
[19:26:36] <absentia> merely about the perception of doing good things
[19:26:39] <ProfSimm> I want a memory controller that detects byte sequences in memory that spell out racist things and replace them with PC alternatives
[19:26:50] <bEagle> absentia fun fact: when you give google sheets 2000 cells to calculate at the same time where each cell has 16 custom function calls where each custom function has to run 4 sub-functions that contain really large numbers (2^34) for a total of 130,000 calculations at the same time the sheet freezes completely
[19:26:58] <ProfSimm> absentia: yes, unfortunately
[19:27:04] <rindolf> ProfSimm: "tell Atlas to shrug"
[19:27:14] <absentia> bEagle: is a google sheet necessary?
[19:27:23] <ProfSimm> absentia: the trolley problem has a very clear solution for modern society: "let them die, don't get involved"
[19:27:40] <absentia> uh
[19:27:44] <absentia> i think you misunderstand the trolley problem
[19:27:56] <bEagle> it's the most convenient way to collaborate with other people
[19:28:10] <ProfSimm> absentia: I think I didn't but let's see
[19:28:33] <ProfSimm> absentia: trolley problem. If you do nothing, 10 people die. If you switch the rails, you kill 2 people, but you did it. 
[19:29:15] <bEagle> apparently it also runs the calculations on your computer, not in the cloud. i assume this is to reduce server load in situations like this but i was surprised
[19:29:25] <ProfSimm> absentia: so the big dilemma is do you save 8 people, or just wash your hands clean and stay away and let someone else be guilty
[19:30:00] <ProfSimm> absentia: and modern society would be all about staying away, and then canceling the person who saved 8 people
[19:30:35] <Decker> ProfSimm switch it for the first car, and then revert it - 1) it might derail the thing and save both 2) it might just disengage and get both   12 birds one stone :)
[19:31:43] <bEagle> at least you tried *shrug*
[19:31:58] <ProfSimm> Decker: I propose a third solution. Nuke the entire planet, then no one will grieve these 12 people, sadness eliminated
[19:32:26] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:6147:93af:10a8:c2c9)
[19:32:50] <DPA> Just give them scissors. You've done everything you could, it's not your problem they didn't cut themselves free in time.
[19:33:40] *** Joins: riv (river@tilde.team/user/river)
[19:33:52] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.4)
[19:34:16] *** Joins: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de)
[19:34:21] *** Quits: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de) (Changing host)
[19:34:21] *** Joins: thinegen (~thinegen@user/thinegen)
[19:34:54] *** Quits: thinegen (~thinegen@user/thinegen) (Client Quit)
[19:35:11] <pulse> did you learn nothing from bugs bunny cartoons
[19:35:18] *** Joins: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de)
[19:35:26] <pulse> just paint a fake tunnel, let the trolley go through that
[19:35:37] <bEagle> fifth solution: find the universe in which the trolley tunnels through the people instead of hitting them
[19:35:50] <bEagle> as in quantum tunneling
[19:35:52] <rindolf> ProfSimm: add-slav() - https://www.youtube.com/watch?v=e-ORhEE9VVg
[19:35:53] <bayaz> Title: Taylor Swift - Blank Space 
[19:35:56] <bEagle> not an actual tunnel
[19:36:41] *** Quits: bEagle (~bEagle@86-60-144-3.dynamic.lounea.fi) (Quit: Client closed)
[19:37:22] *** Quits: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de) (Client Quit)
[19:40:05] <DPA> Just be faithful. Pray to god. Surely the good holy god would never do something so horrible as to just leave them to die.
[19:40:51] <pulse> what if it's a good thing to die and god just wants to speed up the process
[19:41:26] <absentia> we don't need god's help
[19:41:31] <suss> ee who knows god wants to  
[19:41:31] <absentia> we're straight on a highway to hell
[19:41:40] <absentia> HAAAAAHWEEEIGH TO HELL
[19:42:28] <KillerWasp> aaaaaaaaaa
[19:46:28] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[19:46:53] *** Joins: filename (~kilitary@kilitary.xyz)
[19:47:29] *** Joins: xkuru (~xkuru@user/xkuru)
[19:47:48] *** Joins: user51 (~user51@176.228.1.103)
[19:48:40] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Remote host closed the connection)
[19:52:03] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[19:54:15] *** Joins: vysn (~vysn@user/vysn)
[19:56:49] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[19:57:33] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[19:58:54] <KillerWasp> he, i said 1 line of garbage and all get silent.
[19:58:58] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[19:59:05] * FloridaMan rages on air guitar
[19:59:41] * edgar-rft fills FloridaMan's air guitar with fart
[19:59:42] *** Joins: Auron (~Auron956@user/auron)
[20:00:12] <KillerWasp> I wonder if after rocking out on the guitar they need me to pull their hair out.
[20:00:18] <KillerWasp> s/me/
[20:00:22] <KillerWasp> s/me//
[20:00:35] <KillerWasp> shitty translator...
[20:00:49] <KillerWasp> google had to be...
[20:00:54] <KillerWasp> always trolling...
[20:01:10] <absentia> i'm onna hiiiiiighwaaaay to hell...
[20:01:12] <FloridaMan> A pipe is a better delimiter for sed anyway imo
[20:01:25] <absentia> what do you mean, this is perfectly reasonable:
[20:01:44] <absentia> s/\//\\\//g
[20:01:59] <FloridaMan> That should be case insensitive
[20:02:06] <FloridaMan> You missed the i
[20:02:51] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[20:03:47] <KillerWasp> I wonder if after rocking out on the guitar they need to pull their hair out.
[20:03:54] <KillerWasp> is the correct phrase.
[20:04:06] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[20:04:21] <KillerWasp> Just so you know, I'm not going to be cleaning other people's hair, that's disgusting.
[20:04:21] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[20:04:31] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[20:05:32] *** Joins: src (~src@user/src)
[20:05:49] *** Quits: ejjfunky0 (~ejjfunky2@125.164.16.133) (Remote host closed the connection)
[20:07:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[20:07:48] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[20:08:13] *** Quits: monchi (~joints@143.198.92.132) (Read error: Connection reset by peer)
[20:09:31] *** Joins: filename (~kilitary@kilitary.xyz)
[20:09:40] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:f19c:dd57:d715:5dd1)
[20:09:57] *** Joins: pokhu (~rishi@103.206.114.92)
[20:10:13] *** Quits: ejjfunky (~ejjfunky@125.164.19.4) (Ping timeout: 256 seconds)
[20:10:19] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[20:11:27] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:11:46] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:12:59] <ProfSimm> I'm frankly a bit puzzled, if you implement booleans as church encoded lambdas, then not only if statements go away during compilation, but the and/or operators too.
[20:13:10] <ProfSimm> Whole logic goes away.
[20:13:23] *** Quits: Fairy (~Fairy@2001:464a:4992:0:6111:c808:a47f:41) (Ping timeout: 256 seconds)
[20:13:57] <ProfSimm> lIs anyone implementing it this way?
[20:14:03] <ProfSimm> It's like... so brutally simpler
[20:14:32] <KillerWasp> ProfSimm: There is never anything logical in this world, everything is sadly chaotic and perverse, common sense is a myth.
[20:15:34] <ProfSimm> KillerWasp: can you like for once try to contribute to my nonsense rather than come up with your own nonsense
[20:17:14] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:17:33] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:17:34] <DPA> Just make a language that does it. Make a prototype.
[20:18:30] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[20:18:38] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:18:46] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[20:19:01] <KillerWasp> ProfSimm: better 2 fools separately than 2 fools cooperating.
[20:21:31] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:21:51] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:22:18] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:22:33] *** Joins: CaCode (~CaCode@user/cacode)
[20:23:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[20:24:33] *** Joins: trevors (~trevors@user/trevors)
[20:24:39] <ProfSimm> DPA: I am
[20:24:50] <vysn> Legend
[20:25:07] <ProfSimm> DPA: it'll be a funny language, it seems. It compiles half the stuff without using the native CPU commands for it
[20:25:44] <ProfSimm> Wait, do RISC processors have logical operators?
[20:26:13] <GeDaMo> They'll have bitwise operators, at least
[20:26:19] <ProfSimm> Bitwise, sure
[20:26:42] <ProfSimm> Thing is you shouldn't need bitwise operators.
[20:26:57] <GeDaMo> Logical is if 0 / if not 0
[20:27:05] <ProfSimm> Sort of yes
[20:28:02] <GeDaMo> Did you know that the original Smalltalk 80 virtual machine doesn't have conditional branch instructions?
[20:28:06] *** Quits: DrMax (~DrMax@node-1w7jra94757g1w4i6sbnr3nph.ipv6.telus.net) (Ping timeout: 250 seconds)
[20:28:27] <GeDaMo> It implements conditionals by dispatching on booleans
[20:28:42] <ProfSimm> GeDaMo: same as I do
[20:28:58] <GeDaMo> (x < 5) ifTrue: [ ... code ... ] ifFalse: [ ... code ... ]
[20:28:59] <edgar-rft> do you have zero money? <- what would mean the answer 0?
[20:29:21] <ProfSimm> GeDaMo: yes, basically same
[20:30:03] <GeDaMo> if (money == 0) { yes, I have no bananas }
[20:30:31] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:2df9:a9b:b95f:6056) (Quit: fe23)
[20:30:53] <ProfSimm> GeDaMo: more interestingly, you can compile every x & y type expression as "x then y"
[20:31:06] <ProfSimm> GeDaMo: and every "x or y" as  "x else y"
[20:31:16] <ProfSimm> GeDaMo: so you don't need logical operators
[20:31:36] <ProfSimm> GeDaMo: "not" becomes swapping the then/else order
[20:32:04] <ProfSimm> GeDaMo: it's all super basic compile time transforms
[20:32:05] <GeDaMo> Do you have those the wrong way around?
[20:32:13] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:32:17] <ProfSimm> GeDaMo: how
[20:32:27] *** Joins: tane (~tane@user/tane)
[20:32:47] <GeDaMo> I'm thinking shortcircuiting
[20:33:05] <ProfSimm> GeDaMo: shortcircuiting works automatically in this layout
[20:33:30] <GeDaMo> If x is false then x & y doesn't execute y
[20:33:47] <ProfSimm> Of course, because do you execute "then" if the condition is false?
[20:33:48] <ProfSimm> no
[20:33:56] <ProfSimm> You execute else
[20:34:18] <ProfSimm> All aligns ;)
[20:34:22] <ProfSimm> Like magic.
[20:34:33] <ProfSimm> We keep reinventing the same stuff 100 times under different names
[20:34:38] <ProfSimm> Logic is much simpler than we think
[20:34:53] <GeDaMo> Logic is simple but humans are idiots :P
[20:34:58] <ProfSimm> Well
[20:35:36] <ProfSimm> It's so funny we can express like a dozen constructs and operators with a single thing :P
[20:35:55] <ProfSimm> GeDaMo: when smalltalk failed we branched to the darkest timeline
[20:35:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:36:06] <ProfSimm> In a better world we have smalltalk processors and so on
[20:37:06] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[20:37:06] *** Joins: X-Scale` (~ARM@92.250.103.242)
[20:37:37] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[20:38:12] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:38:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:38:55] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[20:39:04] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[20:39:05] *** X-Scale` is now known as X-Scale
[20:39:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[20:39:15] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[20:39:24] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:39:35] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[20:39:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:40:05] *** Joins: DrMax (~DrMax@node-1w7jra94757g0eoaka9mjx9t9.ipv6.telus.net)
[20:40:13] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:40:33] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:41:31] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[20:41:48] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[20:42:35] <user51> ProfSimm: how much better would that world be?
[20:44:47] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:44:58] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:45:00] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 250 seconds)
[20:45:36] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[20:46:00] *** Joins: xeyes (~user@user/duuude)
[20:46:11] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[20:47:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:48:22] <ProfSimm> GeDaMo: other interesting things the smalltalk vm does?
[20:49:24] <GeDaMo> That's the only thing that comes to mind
[20:50:08] <GeDaMo> This is the book about its implementation http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf
[20:50:09] <bayaz> Type: application/pdf Size: 33.6 MB 
[20:51:15] <ProfSimm> GeDaMo: thanks
[20:51:33] <CaCode> Is Jitsi a secure software?
[20:51:56] <ProfSimm> GeDaMo: the font, the illustrations, so 80s
[20:52:00] <ProfSimm> GeDaMo: love it
[20:52:25] <GeDaMo> :P
[20:52:34] *** Joins: kish` (~aqua@user/aqua)
[20:52:54] *** Joins: Atque (~Atque@user/atque)
[20:52:55] <DPA> Logic isn't simple at all. Sure, applying logic operations is simple. But reasoning about boolean logic, boolean algebra, can be very complicated. Just look at 3SAT, for example.
[20:52:55] <DPA> Algebra is such a jerk. It's a structure defining precisely how everything is connected, so with any known relations / values, you could figure out all still possible other values. But whenever it'd be useful, it's too complex to rearrange the equations, or it'd take too much memory...
[20:54:11] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:54:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[20:54:15] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[20:54:22] *** Joins: noteness (~noteness@user/noteness)
[20:54:24] *** Joins: hololeap (~hololeap@user/hololeap)
[20:54:28] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:54:29] *** Joins: mickey8 (~user@user/mickey)
[20:54:42] <DPA> * 3SAT -> Boolean satisfiability problem
[20:54:48] <ProfSimm> DPA: everything simple can be made complicated, because entropy is the default in this universe
[20:55:01] *** dob1_ is now known as dob1
[20:55:06] <ProfSimm> DPA: doesn't mean we just accept that
[20:55:10] <edgar-rft> I looked at 3SAT once an they have a rather boring TV program -> https://www.3sat.de/
[20:55:12] <bayaz> Title: 3sat-Mediathek 
[20:55:46] <DPA> No, not that 3sat. THis one: https://en.wikipedia.org/wiki/Boolean_satisfiability_problem
[20:55:47] <bayaz> Title: Boolean satisfiability problem - Wikipedia 
[20:56:10] <absentia> 3 is a pretty low score for your SATs isn't it
[20:56:26] <edgar-rft> that looks even more boring :-)
[20:56:36] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:56:50] *** Joins: filename (~kilitary@kilitary.xyz)
[20:57:09] <relipse> Do you guys want to see a game I made?
[20:57:10] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:57:19] <absentia> ok
[20:57:33] *** Joins: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[20:57:41] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:38cf:c9d7:1d70:331d)
[20:58:05] <communistmuslim> I am bored of programming
[20:58:23] <relipse> https://eingame.cc and Iâm making eingame 2 now
[20:58:26] <bayaz> Title: EinGame 
[20:58:30] <communistmuslim> Cool
[20:58:37] <edgar-rft> programming is bored of you, too
[20:58:43] *** communistmuslim is now known as cockatoodude
[20:58:47] <cockatoodude> I bet
[20:59:02] <relipse> Maybe you should study God communist
[20:59:14] <absentia> yes
[20:59:16] <absentia> study me communist
[20:59:20] <cockatoodude> Well that's what I've been doing for two hours
[20:59:27] <absentia> i am flattered
[20:59:29] <cockatoodude> I am studying God, and Islam
[20:59:55] <cockatoodude> I am doing an online master's in islamic studies from a university in Cairo
[21:00:16] <cockatoodude> I am sick of struggling to read arabic course material though
[21:00:29] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[21:01:17] <cockatoodude> Like, I have been speaking arabic for over 12 years but reading it in actual arabic alphabet/scripting 1 month since I started the program
[21:01:24] <Twipply> C++ variadic templates. Trying to get an std::array::iterator for each type and failing miserably.
[21:01:52] <Twipply> Like, I don't know, std::tuple<std::array<Ts, 5>::iterator...>
[21:01:56] <Twipply> but clearly that doesn't work
[21:02:22] <GeDaMo> In what way does it not work?
[21:02:25] <cockatoodude> I might try doing functional testing of OpenVR using LineageOS port based ROM with GearVR headset on an S21+ and OpenVR support via the Android OS
[21:02:28] <Twipply> The compiler shouts in my face
[21:02:33] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[21:02:52] <GeDaMo> What are the error messages?
[21:02:56] <cockatoodude> Nothing works in programming, unless it relies on undefined compiler behaviour
[21:03:07] <absentia> we're going to need a bigger screen
[21:03:13] <Twipply> Something like this depending: error: type/value mismatch at argument 1 in template parameter list for âtemplate<class ... _Elements> class std::tupleâ
[21:03:20] <absentia> Twipply: paste full template error?
[21:03:28] <cockatoodude> i only have a 10 inch screen but its 4k
[21:03:32] <cockatoodude> does that work?
[21:03:40] <absentia> only on sunday
[21:03:54] <cockatoodude> What about Friday?
[21:04:00] <cockatoodude> Jummah Mubarak
[21:04:01] <absentia> reply hazy, try again later
[21:05:44] *** Joins: filename (~kilitary@kilitary.xyz)
[21:06:13] *** Quits: rsx (~dummy@ppp-188-174-134-66.dynamic.mnet-online.de) (Quit: rsx)
[21:06:39] <Twipply> absentia https://gist.github.com/kz04px/54b2e6dd38271a0fa4249971cd752d15
[21:06:40] <bayaz> Title: panik.cpp 
[21:07:14] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[21:07:18] <Twipply> I guess this is just totally wrong and I'm a colossal idiot
[21:07:48] *** Quits: l4s8g (~l4s8g@pd9e6249c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:08:32] <GeDaMo> What are you going to use the iterator object for?
[21:09:01] <Twipply> I decided to try write a 'struct of arrays' and wanted to iterate over it
[21:09:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[21:09:13] <Twipply> in you know, the group of nth element
[21:09:44] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[21:09:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:09:52] <Twipply> So I was just trying stuff out to make for (const auto foo : bar) work
[21:10:25] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Client Quit)
[21:10:25] <GeDaMo> The example at the bottom here doesn't have a separate iterator object https://en.cppreference.com/w/cpp/container/array
[21:10:26] <bayaz> Title: std::array - cppreference.com 
[21:10:44] <absentia> Twipply: is it not the case that you also need to monomorphize the `iterator` generic type
[21:10:55] <absentia> like aren't there additional type arguments to iterator
[21:11:05] <absentia> monomorphize is wrong word maybe
[21:11:11] <absentia> but pass type arguments
[21:11:24] *** Quits: u0_a8 (~hexingb@2409:8902:78c2:bc3f:5dc4:26ba:a149:1a67) (Ping timeout: 240 seconds)
[21:11:40] <Twipply> These big words don't fill me with confidence that I can make it work
[21:11:55] *** Joins: OneDev (LordShiva@user/one39dev)
[21:12:36] <Twipply> I'll try look into that anyway, thanks for the tip
[21:12:40] *** Joins: 074AAJJA1 (~l4s8g@pd9e6249c.dip0.t-ipconnect.de)
[21:12:51] <absentia> i don't think it's the case actually
[21:12:57] <Twipply> fwiw it also doesn't work with value_type
[21:13:16] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 245 seconds)
[21:13:33] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[21:14:00] <ProfSimm> In programming we use NOT, AND, and OR... Is there anything else we need in logical expressions?
[21:14:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:14:09] <ProfSimm> I never heard of a pragmatic use for XOR or NAND
[21:14:21] <ProfSimm> I mean in code, not in CPU gates
[21:14:50] <Twipply> 'find the element in this array that appears once, not twice'
[21:15:54] <ProfSimm> Twipply: what about thrice.
[21:16:11] <Twipply> Too hard for me
[21:16:27] <Twipply> Maybe I should just try iterate over this thing differently somehow
[21:17:25] *** Joins: trevors (~trevors@user/trevors)
[21:17:28] <ProfSimm> Twipply: just make a dictionary of every item and count them. Easy
[21:17:56] <Twipply> if you do result ^= element for every element you get the singular one
[21:18:00] <Twipply> it was just a dumb xor example
[21:18:15] <GeDaMo> Twipply: did you look at the example? It shows a loop over an array
[21:18:53] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[21:19:01] <Twipply> You mean just the ranged for loop?
[21:19:28] <GeDaMo> Yes, is that not what you wanted?
[21:20:16] *** Joins: zaher (~zaher@37.48.153.0)
[21:20:58] *** Joins: Narrat (~omnius@p200300df5f123b3b06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:21:36] *** Joins: Akuli (~Akuli@82-203-160-26.bb.dnainternet.fi)
[21:21:40] <ProfSimm> Twipply: well, I see.
[21:22:46] <Twipply> GeDaMo if you look here again, I put what I'm actually trying to do: https://gist.github.com/kz04px/54b2e6dd38271a0fa4249971cd752d15
[21:22:46] <bayaz> Title: panik.cpp 
[21:23:02] <Twipply> I'd like to print {int0, char0, bool0}, {int1, char1, bool1}, ...
[21:23:29] <Twipply> So I need to define Foo::begin() and Foo::end()
[21:23:31] *** Joins: xeyes (~user@user/duuude)
[21:23:55] <Twipply> Even though they're not laid out in memory that way, it does make reading each group more easy
[21:24:09] <GeDaMo> So you want to iterate over the struct, not the array?
[21:24:26] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[21:24:27] <Twipply> Yes, or each array in the struct simultaneously
[21:24:47] <Twipply> In trying to do this is when I noticed I can't seem to unpack a variadic template and get ::iterator
[21:25:29] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:25:38] <absentia> Twipply: you won't believe it
[21:25:44] <Twipply> My first instinct was to create a struct with a tuple of iterators to each array
[21:26:02] <Twipply> absentia oh?
[21:26:20] <absentia> Twipply: `    std::tuple<typename std::array<Ts, 5>::iterator...> not_fine;`
[21:26:28] *** Joins: u0_a8 (~hexingb@2409:8902:78c2:bc3f:5dc4:26ba:a149:1a67)
[21:26:31] <Twipply> I swear to god I tried that
[21:26:31] <absentia> https://en.cppreference.com/w/cpp/language/dependent_name
[21:26:31] <bayaz> Title: Dependent names - cppreference.com 
[21:26:45] <absentia> I think it's because the `iterator` member typedef depends on `Ts`
[21:27:06] <absentia> finally i actually solved something today
[21:27:10] <absentia> pls don't tell me it's still broken
[21:27:15] <Twipply> Oh man, I bet I typed 'template' by mistake
[21:27:17] <Twipply> instead of typename
[21:27:19] <Twipply> I do that sometimes
[21:27:23] <absentia> blame the language
[21:27:26] <absentia> bloody terrible
[21:27:34] <Twipply> My heroes
[21:28:02] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[21:28:03] <Twipply> I'll admit I'm not 100% on when typename needs adding
[21:28:08] <absentia> neither am i
[21:28:09] <Twipply> C++ is too big brain for me
[21:28:10] <user51> ProfSimm: yeah the book does have a nice font
[21:28:13] <xeyes> eww
[21:28:18] <absentia> i always need 20 tabs of cppreference.com open
[21:28:22] <absentia> in order to write 5 characters of C++
[21:28:24] <user51> can't remember where exactly i saw it - think it was 'expert c programming'
[21:28:33] <perro_> its' made for smart peopl elike strousoup
[21:28:50] <Twipply> I just need to learn enough so whoever is interviewing me thinks I'm smart
[21:28:59] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[21:29:04] <absentia> this is the game now
[21:29:08] * xeyes bets even bjarne is not aware of half what C++ does
[21:29:45] <xeyes> <!$!#$!>%$>%!%$!<^!<^#>^#!^#>^!#%^#@^%@%>@#%@%@@ <-- maybe valid C++, someday.
[21:29:57] <perro_> heh
[21:30:00] <Twipply> I'm upset that []<>(){}() didn't make it
[21:30:07] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[21:30:42] <niko3> C++ is the thinking mans language 
[21:31:14] <xeyes> And you know, every standard we get closer to the clean small language inside C++ that wants to rip it open and show itself
[21:31:25] <Twipply> niko3 that'd be why I suck at it
[21:31:28] <Twipply> I do like it however
[21:31:51] <Twipply> [](){}(); is a top tier line of code though
[21:32:00] <xeyes> what is that?
[21:32:07] *** Joins: src_ (~src@user/src)
[21:32:09] <Twipply> A lambda function you just called
[21:32:10] <absentia> calling an anonymous lambda
[21:32:12] <Twipply> that does nothing
[21:32:12] <absentia> with empty body
[21:32:16] <absentia> lmfao
[21:32:19] <xeyes> wth
[21:32:25] <absentia> this is your brain on C++
[21:32:28] <Twipply> the <> would also template it, but it doesn't work
[21:32:38] <Twipply> 'Cus you can template lambda functions now
[21:32:43] <perro_> that really is amazing
[21:32:48] <absentia> with enough `auto` it will work
[21:32:49] <xeyes> on  the other hand "love <3" is valid C
[21:33:00] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00ba.v6.ethz.ch) (Quit: Leaving)
[21:33:33] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Ping timeout: 272 seconds)
[21:34:57] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[21:35:19] <Twipply> It has a name actually, but I can't think of it right now
[21:35:31] <niko3> C is old and outdated, C++ and Rust are leading the way rn fr
[21:35:40] <Twipply> You can use it to create a const variable that requires some computation
[21:36:34] <absentia> constexpr?
[21:37:22] <Twipply> I meant like const int foo = [](){return 3;}();
[21:37:31] <absentia> the fuck
[21:37:43] <Twipply> but a bit less trivial than just return 3;
[21:37:58] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[21:38:05] *** Joins: Shiva (~LordShiva@user/one39dev)
[21:38:11] *** Joins: l4s8g__ (~l4s8g@pd9e6249c.dip0.t-ipconnect.de)
[21:38:13] <Twipply> but instead you're probably meant to do something like const int foo = std::invoke([](){return 3;});
[21:38:25] <Twipply> 'cus people don't notice you're actually calling the lambda
[21:38:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[21:38:44] <absentia> burn stroustrup at the stake for witchcraft
[21:39:00] * xeyes washes his eyes
[21:39:07] *** Joins: cadmio (~cadmio@151.35.205.14)
[21:39:35] * xeyes resumes staring at what you do and reports to the boss
[21:39:40] <cadmio> do you know how to distribute a new version of a program on github without overwriting the previous?
[21:39:56] <xeyes> cadmio: make new release
[21:40:12] *** Joins: palasso (~palasso@user/palasso)
[21:40:26] *** Quits: 074AAJJA1 (~l4s8g@pd9e6249c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:40:53] *** Quits: OneDev (LordShiva@user/one39dev) (Ping timeout: 256 seconds)
[21:42:45] *** Joins: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:42ff:b8cc:9050:8f6c)
[21:45:02] *** Quits: Shiva (~LordShiva@user/one39dev) (Quit: Leaving)
[21:45:22] *** Joins: OneDev (~LordShiva@user/one39dev)
[21:47:07] *** Quits: tofran (~tofran@bl15-47-228.dsl.telepac.pt) (Ping timeout: 256 seconds)
[21:48:24] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[21:49:55] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[21:52:12] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[21:53:47] <cockatoodude> Okay. I officially have no vulns even with root privs or kernelspace arm equivlent of x86 ring 0... There are no attack vectors. Now I need to do a test of randomness of shared secret genertation for end to end call encryption over cell network and phone calls.
[21:53:57] <torstenvl> "C is old and outdated" compared to C++??? Lol other way around buddy
[21:54:31] <absentia> "no vulns"
[21:54:35] <absentia> - cockatoodude 2022
[21:54:42] *** Parts: pokhu (~rishi@103.206.114.92) ()
[21:54:48] <torstenvl> cf. "640k ought to be enough for everybody"
[21:55:47] <cockatoodude> well, you're talking to the only person to penetrate the NSA headquarters network out of 300 million attempts a day and who did the CIA hack tools leak, and many things I'm not stupid enough to say that aren't already tied to me
[21:55:54] *** Quits: cadmio (~cadmio@151.35.205.14) (Ping timeout: 256 seconds)
[21:55:54] <sonny> c is older than c++ ...
[21:56:16] <cockatoodude> yes, but c++ is inferior in terms of optimizibility
[21:56:31] <absentia> cockatoodude: and you're divulging this from a residential line?
[21:56:40] *** Quits: l4s8g__ (~l4s8g@pd9e6249c.dip0.t-ipconnect.de) (Quit: l4s8g__)
[21:56:42] <cockatoodude> No I am saying stuff I already am known for
[21:56:43] <kittyn> i have confirmed there are no 0-days in my system
[21:56:49] <torstenvl> c++ hitched its entire wagon to OOP.  OOP is kludgey and outdated, and so C++ is kludgey and outdated.
[21:56:58] <torstenvl> lol@kittyn
[21:57:22] <GeDaMo> kittyn: can I borrow your time machine? :P
[21:57:31] <absentia> cockatoodude confirmed for honeypot
[21:57:33] <cockatoodude> Well, I pen tested every potential attack vector, and I was unable to penetrate them. I used to be a military and then intelligence agent hacker
[21:57:34] *** Joins: cadmio (~cadmio@151.57.107.177)
[21:57:34] <cockatoodude> Lol
[21:57:41] <cockatoodude> Why is that?
[21:57:45] *** Parts: cadmio (~cadmio@151.57.107.177) ()
[21:57:51] <cockatoodude> because I just don't give a fuck?
[21:58:12] <ProfSimm> I have yet another idea. Let's not have function return results at all. the function gets a closure, and it calls it with the result to "return".
[21:58:19] <niko3> torstenvl, i believe you're mistaking C++ for C#, also having fewer features does not make something better
[21:58:28] <absentia> ProfSimm: continuation passing style
[21:58:29] <GeDaMo> ProfSimm: continuation passing style?
[21:58:49] <ProfSimm> GeDaMo: yes but why isn't this the norm
[21:58:58] <absentia> "callback hell"
[21:58:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[21:59:07] <torstenvl> C is like Ben & Jerry's.  Slow to change and grow, cautious, conservative. By not chasing fads, it remains timeless. C++ is like pets.com, became inextricably linked to a passing fad, and is now very Web 1.0
[21:59:09] <ProfSimm> There's no callback hell, it's just... callback
[21:59:18] <absentia> you're right
[21:59:21] <absentia> it's more like a callback asylum
[21:59:28] <GeDaMo> You can see a return stack as the past or the future. It's where you're going back to or where you're going on to
[21:59:42] <ProfSimm> So the nesting is the problem
[21:59:50] <ProfSimm> If we fix that we can CPS all the things
[22:00:09] <absentia> there's additional overhead for function prelude
[22:00:19] <absentia> adjusting ebp/esp etc.
[22:00:23] <GeDaMo> Two stacks! :P
[22:00:30] <ProfSimm> absentia: probably can be compied away in most cases
[22:00:36] <absentia> uhh
[22:00:39] <torstenvl> GeDaMo: stacks on stacks on stacks
[22:00:53] <ProfSimm> Tail call all the things
[22:01:02] <absentia> not all algorithms are tail call optimizable
[22:01:12] <ProfSimm> Tail calls are tail call optimizable
[22:02:03] <sonny> tail modulo cons
[22:02:25] <absentia> found the lisper
[22:02:46] <sonny> that optimization doesn't seem very common though
[22:03:20] <sonny> I've recently been trying to imagine programming without pointers ... I didn't get very far
[22:03:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:03:50] <sonny> it all started by looking at "data models" for memory or the free store
[22:04:36] *** Quits: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 240 seconds)
[22:04:48] <ProfSimm> sonny: that's... like the easiest thing to imagine
[22:05:02] <Hash> You don't need poitners.
[22:05:04] <Hash> that
[22:05:06] <Hash> That
[22:05:09] <Hash> fucking ieyb;asre;iladfp['
[22:05:10] <sonny> that will be defined by the core data structure used in the programming language I think, like a graph for lisp, matrices for apl, and tables for sql or something
[22:05:11] <Hash> oa'so;dfa
[22:05:13] <Hash> ]fuck this keyboard
[22:05:15] <Hash> fuck
[22:05:17] <Hash> I*'m out. 
[22:05:19] <Hash> fuck, taling on irc.
[22:05:35] <Hash> I stopped smoking weed.
[22:05:42] <Hash> I'm irritable. Tryign to type and fucking keybaod makes typos
[22:05:45] <GeDaMo> Tagged unions and pattern matching remove a lot of the need for pointers
[22:05:49] *** Joins: flakland (~flaknet99@32.211.211.39)
[22:05:53] <Hash> You don't need poitners. That's a specific C thing.
[22:05:58] <absentia> dynamic memory?
[22:05:59] <Hash> You can literally program software without having to ever touch pointers.
[22:06:04] <Hash> you don't need to manualyl manage memory.
[22:06:08] <Hash> Unless you're doing low level stuff.
[22:06:10] <sonny> GeDaMo: how does a tagged union work?
[22:06:26] <Hash> Manual memory management, I can see.
[22:06:30] <GeDaMo> data List a = Nil | Cons a
[22:06:35] <Hash> With other languages, you don't need to mess with pointers.
[22:06:40] <GeDaMo> data List a = Nil | Cons a (List a)
[22:06:40] <cockatoodude> Manual memory management is the best memory management
[22:06:44] <Hash> cockatoodude: eh.
[22:06:52] <absentia> yeah you need to mess with a `shutdown -r now` crontab every 2 weeks
[22:06:53] <Hash> I'm not a computer. It's not my job to manage memory.
[22:06:55] <Hash> :)
[22:06:56] <cockatoodude> garbage collectors are pretty bad at optimizing reclamation of memory
[22:07:00] <cockatoodude> Lol
[22:07:03] <GeDaMo> Nil and Cons are constructors
[22:07:08] <Hash> well, garbage collectors essentially work off reference counting.
[22:07:09] <sonny> GeDaMo: I mean, what does it look like in memory?
[22:07:14] <absentia> not all of them
[22:07:18] <Hash> Most of them.
[22:07:24] <sonny> I can imagine record or structs, but not unions
[22:07:27] *** Joins: juliaEnv (~juliaEnv@h-37-123-164-79.A137.corp.bahnhof.se)
[22:07:38] <GeDaMo> It's a struct with a tag (type identifier) and a bock of memory for the elelments
[22:07:46] <GeDaMo> ^block
[22:07:59] <sonny> where's the metadata stored?
[22:08:02] <cockatoodude> I even have a tool for Windows 10, it before loading DLL's assesses the uses they are needed for and the components used for those uses, then only loads those parts, and scans every time a process closes for any unused dll content still in memory, strips down memory footprint
[22:08:15] <GeDaMo> Which metadata?
[22:08:25] <sonny> the tag
[22:08:37] <GeDaMo> The tag is in the struct
[22:08:52] <sonny> oh ok
[22:09:00] <GeDaMo> In C terms: struct { tag t; union { ... } }
[22:09:37] *** Joins: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:10:10] <sonny> I was also considering how aliases after the data model
[22:10:15] <cockatoodude> I do a lot of Windows 10 work without having source disclosure because i have written consent to modify and alter Windows 10 Pro in any way that doesn't prevent legitimate activation or purchase of license to activate... Which they gave me in exchange for reporting 21 0-days I had been holding onto because they wouldn't pay me as a freelance researcher, or hire me as a security engineer
[22:10:22] <sonny> s/after/affect/
[22:10:39] <cockatoodude> So I have TONS of Windows 10 hacks and security/privacy tools waiting for perfection
[22:10:53] <cockatoodude> I will also be maintaining it after end of life when they stop fixing and patching it
[22:11:14] <sonny> cockatoodude: what software toolchain do you use?
[22:11:20] <absentia> he wrote it himself
[22:11:33] <Hash> Also check out #websec
[22:11:38] <sonny> ah
[22:11:38] <Hash> If you are into security
[22:11:40] <Hash> :)
[22:11:47] <sonny> what about the compiler, linker, etc
[22:11:55] <absentia> stolen from an nsa blacksite
[22:12:05] <user51> Hash: what the reason behind "You don't need pointers"?
[22:12:12] <user51> s/what/&'s/
[22:12:18] <Hash> user51: depends on use case.
[22:12:33] <absentia> "50% of the time you don't need it 100% of the time"
[22:12:34] <juliaEnv> how do you choose an architectural style for your code, other than by intuition?
[22:12:38] <Hash> :)
[22:12:40] <Hash> What he said.
[22:12:42] <flakland> you would have to convert char *'s at some point
[22:13:06] <Hash> Today is my first day no smoking weed.
[22:13:06] <sonny> nah, strings are just values
[22:13:10] <Hash> All I want to do is get high.
[22:13:17] <Hash> Gotta focus. One hour at a time.
[22:13:18] <user51> stay away from afroman
[22:13:28] <Hash> If I can do it today, I can do tomororw. Day after. So on.
[22:13:38] <flakland> you would have to read value bits at some point
[22:13:42] <Hash> BRB
[22:13:49] <absentia> he went to go smoke
[22:13:59] <Hash> No, typing to friend in googel voice.
[22:14:01] <sonny> flakland: yeah, so what's the big deal?
[22:14:02] *** Quits: otisolsen70__ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[22:14:15] <Hash> Might work on hashsecurity.org
[22:14:24] <flakland> you need an address, aka pointer to map memory
[22:14:27] <Hash> Anyone white hack?
[22:14:30] <Hash> white hat*
[22:14:38] <Hash> Hit me up if you're a purely white hat.
[22:14:41] <absentia> i am ultraviolet hat
[22:14:41] <GeDaMo> Hash: you should go into carpentry, make a table :P
[22:14:48] <Hash> I love tables.
[22:14:54] <cockatoodude> sonny, Microsoft Visual Studio Pro, lcc-win64, gcc and binutils windows ports perticiularly the cygwin ones, python, ollydbg, gihadra, IDA Pro, and a lot of manual pointer magic related C skills
[22:14:55] <Hash> I want to get into epoxy resin tables
[22:15:20] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[22:15:23] <cockatoodude> I use whatever tools work, if I don't know any tools I can use to solve a problem I pick one based on reviews of options and learn it
[22:15:43] <sonny> ok
[22:15:59] <cockatoodude> The prophet Muhammad said never stop learning of following paths of higher education
[22:16:12] <absentia> so did satan
[22:16:23] <sonny> ah no ...
[22:16:26] <cockatoodude> I might have gone overboard by having 19 degrees and 1 full time two at my own pace online in progress
[22:16:36] <flakland> of course not, then knowledge gets silo'd
[22:16:41] <absentia> only 19? fucking amateur
[22:16:48] <absentia> i have every degree
[22:17:08] <absentia> yeah what now
[22:17:45] <sonny> only need 1, interdisciplinary 
[22:18:07] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[22:18:19] <cockatoodude> I never intent to stop being a student
[22:18:20] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[22:18:56] <cockatoodude> I mean, I'm almost done all the education paths I want to pursue seriously, probably going to do a bunch of engineering degrees later
[22:18:58] <flakland> maybe you could have a global char array that encompasses the entire memory space
[22:19:03] <flakland> then you don't need pointers
[22:19:21] <cockatoodude> Well, why don't you want pointers?
[22:19:35] <flakland> i was answering the question earlier
[22:19:50] <cockatoodude> I mean pointers are so universally useful, and especially when you can declare any memory address as a pointer value
[22:20:20] * scubagear[m] pokes GeDaMo 
[22:20:29] * GeDaMo peeks at scubagear[m]
[22:21:15] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[22:21:30] <scubagear[m]> Sorry. :) But we all know you are the person with all the links. I'm looking for some links. :P
[22:23:04] <user51> anyone know the reason behind strings not being mutable in python?
[22:23:09] <GeDaMo> You have to tell me what you're after, I'm not psychic :P
[22:23:13] <scubagear[m]> Hm, maybe this was a bit too direct. :) Apologies.
[22:23:37] <GeDaMo> Oh, you're just looking for links in general?
[22:24:08] <cockatoodude> user51, because it says so in the language specifications
[22:24:10] <absentia> cockatoodude: how many trillions in funds have you embezzled
[22:24:29] <GeDaMo> http://www.righto.com/2022/01/ibm360model50.html
[22:24:30] <scubagear[m]> I'm basically looking for an overview of "famous" pieces of code, a bit like this: https://medium.com/swlh/impressive-sources-codes-that-every-developer-should-see-b68028b36da5
[22:24:30] <bayaz> Title: Simulating the IBM 360/50 mainframe from its microcode 
[22:24:31] <bayaz> Title: Impressive Source Codes That Every Developer Should See 
[22:24:44] <absentia> carmack's fast inverse sqrt
[22:24:46] <absentia> "what the fuck"
[22:25:08] <scubagear[m]> absentia: yeah stuff like that
[22:25:18] <ProfSimm> So what happens to the stack in CPS typically
[22:25:58] <Hash> Quake III Arena is a first-person shooter game developed by id Software. It was developed in the 90s when the 3D gaming industry just started its journey using the id Tech 3 game engine.
[22:26:00] <Hash> Not true.
[22:26:00] <GeDaMo> What stack?
[22:26:10] <Hash> Carmack didn't come up with the algorithm.
[22:26:15] <Hash> So. That's not true.
[22:26:23] <absentia> you're right i did
[22:26:38] <ProfSimm> GeDaMo: unsure if you're sarcastic
[22:26:51] <GeDaMo> ProfSimm: I'm not sure there's a traditional call stack in CPS
[22:26:55] <Hash> The algorithm was originally attributed to John Carmack, but an investigation showed that the code had deeper roots in both the hardware and software side of computer graphics. Adjustments and alterations passed through both Silicon Graphics and 3dfx Interactive, with the original constant being derived in a collaboration between Cleve Moler and Gregory Walsh, while Gregory was working for
[22:26:57] <Hash> Ardent Computing in the late 1980s.
[22:27:04] <GeDaMo> scubagear[m]: that site isn't working for me, I see no code
[22:27:08] <Hash> That blog article is not well researched at all.
[22:27:16] <Hash> I recommend taking it with a grain of salt or two.
[22:27:23] <absentia> duff's device?
[22:27:28] <absentia> it's obsolete now
[22:27:31] <scubagear[m]> GeDaMo: he put the code in screenshots.
[22:27:44] <absentia> maybe the entire IOCCC archives
[22:27:49] <Hash> \o/
[22:27:50] <absentia> there is some crazy shit there
[22:27:59] <Hash> Is anything original these days?
[22:28:01] <GeDaMo> scubagear[m]: this is not a review as such but it might be interesting https://github.com/nornagon/jonesforth look at jonesforth.S and jonesforth.f
[22:28:02] <bayaz> Title: GitHub - nornagon/jonesforth: Mirror of JONESFORTH 
[22:28:09] <Hash> Collective Conscious
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:29:41] <scubagear[m]> GeDaMo: thanks! I'll have a look. Also, that IBM link has some fancy looking bits
[22:29:44] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[22:30:00] <GeDaMo> righto is a great site, lots of chip reverse engineering
[22:30:04] <absentia> scubagear[m]: https://code.jsoftware.com/wiki/Essays/Incunabulum
[22:30:05] <bayaz> Title: Essays/Incunabulum - J Wiki 
[22:30:17] <absentia> "arthur whitney's one-page interpreter"
[22:30:25] <GeDaMo> Oh, that's a good one 
[22:30:32] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 272 seconds)
[22:30:33] <absentia> the warped mind of whitney
[22:31:01] <GeDaMo> Not code analysis but if you're interested in graphics / games http://www.adriancourreges.com/blog/2020/12/29/graphics-studies-compilation/
[22:31:02] <bayaz> Title: Graphics Studies Compilation - Adrian Courr?ges 
[22:31:03] <sonny> flakland: I guess it depends on whos looking at it, cause addresses don't have to be mentioned at all for strings
[22:31:17] *** Joins: tofran (~tofran@bl15-47-228.dsl.telepac.pt)
[22:31:22] <flakland> yeah and embedded C can use static memory addresses
[22:31:24] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[22:31:31] <scubagear[m]> absentia: haha wtf nice!!
[22:31:34] <flakland> so yeah you don't really need pointers i suppose
[22:31:45] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:32:01] <sonny> maybe pointer is just a vague term
[22:32:13] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[22:32:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:33:07] <flakland> they're fast as hell though!
[22:33:26] <user51> maybe 'reference' is a better term?
[22:33:32] *** Joins: epony (epony@user/epony)
[22:33:50] *** Joins: zaher_ (~zaher@37.48.151.183)
[22:34:06] <sonny> like really, it seems like you can take a load off by just worrying about values ... even though at some point it will have to be defined in a machine
[22:34:42] <sonny> user51: maybe
[22:36:08] *** Quits: zaher (~zaher@37.48.153.0) (Ping timeout: 256 seconds)
[22:36:21] <sonny> has anyone every considered mapping indices to addresses?
[22:36:41] <sonny> I don't think you need references if you do that
[22:36:42] <user51> non-software example: https://www.righto.com/2014/10/how-z80s-registers-are-implemented-down.html
[22:36:44] <bayaz> Title: Down to the silicon: how the Z80's registers are implemented 
[22:36:48] <user51> look for 'swapping registers'
[22:36:53] <sonny> thanks
[22:37:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:37:13] <sonny> wow what a hardcore blog
[22:38:18] <sonny> awesome
[22:38:28] <sonny> that's neat idea with renaming
[22:38:53] *** Joins: makos (~nerdbox@78.9.119.190)
[22:39:07] <user51> in retrospect i should have used it when writing my 8080 emu. i used a pointer array for BC/DE/HL, so you could have just swapped pointers
[22:39:31] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:39:52] <GeDaMo> Register renaming is still in use, modern CPUs have 100s of physical registers which are mapped to the architectural registers
[22:40:18] <GeDaMo> It helps with superscalar dispatch 
[22:40:35] <sonny> I thought those registers are not available to programmers?
[22:40:41] <GeDaMo> Not directly
[22:41:19] <sonny> how do they get used?
[22:41:25] <absentia> hidden opcodes?
[22:41:30] <absentia> instructions
[22:41:38] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:42:17] <GeDaMo> https://en.wikichip.org/w/images/7/7e/skylake_block_diagram.svg
[22:42:18] <bayaz> Type: image/svg+xml 
[22:42:47] <GeDaMo> "Register Alias Table (RAT)" and "Rename / Allocate / Retirement"
[22:43:13] <absentia> jesus christ
[22:43:15] <flakland> i vaguely recalling somewhere i read intel cpu's can use stack offset for register renaming
[22:43:31] <absentia> i was thinking of this https://www.youtube.com/watch?v=KrksBdWcZgQ
[22:43:32] <bayaz> Title: Breaking the x86 Instruction Set 
[22:43:39] <absentia> undocumented instructions
[22:43:48] <GeDaMo> flakland: yeah, I think I've seen that
[22:43:48] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[22:44:50] <xeyes> has anyone seen compiz wobble to be incompatible or troublesome with any graphics card?
[22:45:03] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Read error: Connection reset by peer)
[22:45:49] <cockatoodude> compiz is still used?
[22:45:54] <Hash> Rarely
[22:46:02] <Hash> The stuff is now built into other wms
[22:46:10] <Hash> KDE has all the compiz stuff in itself plasma animations
[22:46:13] <Hash> gnome too
[22:46:18] <cockatoodude> doesn't wayland make it inferior and has now reached a state where it isn't shit and has support of many desktop environments?
[22:46:23] <Hash> compiz emerald were like 2000s stuff
[22:46:35] <Hash> then 2010s were the diff destop stuffs
[22:46:40] <sonny> xeyes: just use intel (tm)
[22:46:41] <Hash> 2010s are flat stuffs
[22:47:06] *** Joins: Shiva (LordShiva@user/one39dev)
[22:47:10] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:47:25] <sonny> compiz was fine when I used it 4 years ago
[22:47:31] <cockatoodude> Intel is good
[22:48:35] <flakland> knoppix has compiz
[22:49:01] *** Quits: Shiva (LordShiva@user/one39dev) (Client Quit)
[22:49:17] *** Quits: OneDev (~LordShiva@user/one39dev) (Ping timeout: 240 seconds)
[22:49:20] <sonny> I think C abstractions are adding to the confusion if they are used in a general sense
[22:49:20] *** Joins: Shiva (LordShiva@user/one39dev)
[22:49:22] <cockatoodude> Iris Xe Max integrated graphics are great for efficiently coded game engine 1080p 60fps gaming in most situations, and I heard they are working on modern OpenCL support now that the cores are capable and the core counts becoming high
[22:49:35] <sonny> or at least that's what seems to be the source of my confusion
[22:49:46] <sonny> C abstraction terms*
[22:49:48] <cockatoodude> I mean, Intel graphics are the future of everything that isn't CUDA specific
[22:49:58] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[22:50:11] *** Joins: src (~src@user/src)
[22:50:17] <nomagno> 'XX grpahics are the future'
[22:51:03] <nomagno> ... I mean, isn't that a kinda dumb statement? Cross-vendor APIs are a thing for a reasoin
[22:51:09] *** Quits: k3nn7 (~k3nn7@2a02:a31b:43e:aa80:42ff:b8cc:9050:8f6c) (Ping timeout: 256 seconds)
[22:51:15] <sonny> structs can't refer to themselves right?
[22:51:47] <GeDaMo> scubagear[m]: https://fabiensanglard.net/rayTracing_back_of_business_card/
[22:51:48] <bayaz> Title: Raytracing 
[22:52:08] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[22:52:12] <nomagno> sonny: You can have a struct refer to a pointer of its own type.
[22:52:22] *** Joins: mikrosis (~mikrosis@dynamic-046-114-173-173.46.114.pool.telefonica.de)
[22:52:55] <nomagno> struct mynode { unsigned value; struct mynode *next; };
[22:53:22] <sonny> I see
[22:53:37] *** Quits: Shiva (LordShiva@user/one39dev) (Client Quit)
[22:54:00] <sonny> nomagno: Does anyone intentionally make a data structure with cycles?
[22:54:27] <scubagear[m]> GeDaMo: gold!
[22:54:35] <nomagno> sonny: It makes a singly linked list, which can be cyclic
[22:54:41] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[22:54:57] <nomagno> You can have the following link: 1 -> 2 -> 3 -> 2
[22:55:07] <GeDaMo> scubagear[m]: some of these might be interesting https://github.com/danistefanovic/build-your-own-x
[22:55:08] <bayaz> Title: GitHub - danistefanovic/build-your-own-x: ? Build your own (insert technology here) 
[22:55:13] <nomagno> which locks you into a cycle of 2 and 3, and you lose access to 1
[22:55:21] <nomagno> you can also have: 1 -> 2 -> 3 -> 1
[22:55:32] <user51> settle for 1 -> 1 :P
[22:55:33] <nomagno> Which is a proper ring
[22:55:38] <sonny> hmm
[22:55:50] <sonny> GeDaMo: will this happen in haskell too?
[22:56:07] <GeDaMo> Will what happen?
[22:56:21] <sonny> a cycle in a list
[22:56:32] <GeDaMo> I don't know
[22:56:55] <sonny> ok, guess I'm going to find out then
[22:57:23] <GeDaMo> scubagear[m]: https://justine.lol/sectorlisp2/
[22:57:24] <bayaz> Title: LISP with GC in 436 bytes 
[22:57:42] <user51> http://sprunge.us/sjZjfF
[22:57:48] <user51> that's definitely silly though ^
[22:57:54] <nomagno> sonny: If you really wanted a cyclic structure though, I'd go with a bitfield if you can settle for powers of two
[22:57:56] *** Joins: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de)
[22:57:56] *** Quits: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de) (Changing host)
[22:57:56] *** Joins: thinegen (~thinegen@user/thinegen)
[22:58:21] <nomagno> if you make the index be "uint8_t: 2", you can only represent indexes 0, 1, 2, 3
[22:58:24] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[22:58:30] <nomagno> :P
[22:58:51] <nomagno> So you can have a fully efficient cyclic array you can traverse forwards and backwards
[22:59:20] <user51> nomagno: never seen that in action, got an example?
[22:59:29] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (Quit: ZNC 1.8.2 - https://znc.in)
[22:59:58] *** Quits: thinegen (~thinegen@user/thinegen) (Client Quit)
[23:00:14] <fweht> on which stackexchange could i post question re. fast computation of the gradient of gaussian blur of an image?  stackoverflow, computer science or computer graphics?
[23:00:14] *** Joins: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de)
[23:00:14] *** Quits: thinegen (~thinegen@p200300d5073087646f2a1dde4b2c08f5.dip0.t-ipconnect.de) (Changing host)
[23:00:14] *** Joins: thinegen (~thinegen@user/thinegen)
[23:00:24] <nomagno> user51: I haven't ever seen it in action either, but I am 100% sure it works. Sec
[23:01:12] <scubagear[m]> GeDaMo: I'm running out of compliments :) thanks again!
[23:01:28] <nomagno> user51: struct cyclic_list { unsigned index_track: 3; unsigned list[7]; };
[23:01:32] <GeDaMo> It takes a while for information to leak out of my brain :P
[23:01:37] *** Joins: medium_cool (~medium_co@136.36.128.48)
[23:01:55] <GeDaMo> I'm just glancing through that build-tour-own-x list to see if it reminds me of anything
[23:01:59] <nomagno> sorry, list should have size 8, not 7
[23:02:07] <sonny> nomagno: I don't want a cycle, I'm just trying to figure something out
[23:02:15] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 256 seconds)
[23:02:23] <nomagno> sonny: I was replying to user51 though, not you
[23:02:25] <nomagno> what do you want to figure out?
[23:02:36] <GeDaMo> scubagear[m]: https://swtch.com/~rsc/regexp/regexp1.html
[23:02:37] <bayaz> Title: Regular Expression Matching Can Be Simple And Fast 
[23:03:04] *** Quits: medium_cool (~medium_co@136.36.128.48) (Client Quit)
[23:03:09] <sonny> scubagear[m]: there's also this guy with some stuff https://www.destroyallsoftware.com/screencasts/catalog
[23:03:11] <bayaz> Title: Catalog 
[23:03:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:03:28] *** Quits: Daemonick (~Daemonick@193.92.118.5.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[23:03:48] <sonny> nomagno: programming without pointers
[23:05:33] <nomagno> user51: If you use the index_track variable, or any other 3-bit bitfield, you suddenly find two things: since the maximum representable value of three-bits is 7, and that is also the maximum index of list[], index_tag+1 will always yield either the next index OR wrap around to index 0
[23:05:51] <GeDaMo> scubagear[m]: https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html
[23:06:11] <nomagno> sonny: Oh that's uncomfortable but perfectly possible. You usually want to return structs
[23:07:35] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[23:07:36] *** Quits: wutno (~muh.ident@installgentoo.net) (Quit: Kernel Panic)
[23:08:03] <user51> nomagno: neat, i didn't know that.
[23:08:12] <nomagno> To take arrays, you need to take structs instead of simple arrays
[23:08:16] <nomagno> At least in C and C++
[23:08:31] <nomagno> because there, arrays simply get implicitly decayed to pointers
[23:09:08] <nomagno> so take "struct arr{ int myarr[23] };" instead of "int myarr[23]"
[23:09:45] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:10:13] <user51> i've never used bitfields, and don't think i've seen them enough times to remember i saw them either.
[23:10:43] *** Joins: Daemonick (~Daemonick@193.92.118.5.dsl.dyn.forthnet.gr)
[23:11:13] *** Joins: trevors (~trevors@user/trevors)
[23:11:22] <nomagno> user51: I don't have many doubts its faster than singly linked lists if all you want is the cyclic property
[23:11:46] <nomagno> Which obviously doesn't need to be true
[23:12:14] <juliaEnv> when you decide for a particular software architecture you're doing it based on intuition only, and possibly by contrasting two options, right?
[23:13:18] <juliaEnv> oh and I forgot for a few minutes that the most common architecture is the so-called big ball of mud :D It's an architecture that doesn't have any style, so any code can be committed
[23:14:00] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:14:03] <nomagno> All software architecturing styles have their rationales
[23:14:22] <juliaEnv> hmm, so that is why large open source projects have such a code structure that they are nearly impossible to understand...
[23:14:30] <EdFletcher> not intuition only, experience plays a big part. having seen similar problem spaces before and how they've been solved well or badly, and which architectures were used. 
[23:14:46] <user51> nomagno: that would be equivalent to having something like 'list[256]' and using a char as an index, right?
[23:14:50] <juliaEnv> I meant the big ball of mud is why I can't easily navigate in the codebase of many large proejcts
[23:15:12] <nomagno> user51: Unsigned char, and assuming an unsigned char is 8 bits
[23:15:13] *** Joins: pulse (~pulse@user/pulse)
[23:15:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:15:21] <nomagno> But yes, completely equivalent :D
[23:15:34] <GeDaMo> scubagear[m]: this book doesn't have any code in it, but it might be interesting https://en.wikipedia.org/wiki/Coders_at_Work
[23:15:35] <bayaz> Title: Coders at Work - Wikipedia 
[23:15:56] <user51> ah, nice. i ran into this while doing a 64k memory space once. the pointer approach was a mistake :D
[23:16:27] <EdFletcher> juliaEnv: ah yup, many of those projects did indeed likely start with limited architecture (e.g. none) and evolved organically, not growing much overall architecture (though you might find some subsystems that are younger and better architected) 
[23:16:28] <nomagno> user51: Which pointer approach?
[23:16:37] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:16:44] *** Lord_of_Life_ is now known as Lord_of_Life
[23:16:48] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:17:07] <nomagno> For example, I'm currently not using any heap memory allocation in my interface implementations because it allows for freestanding usage, and provides forf
[23:17:12] <user51> u16 mem[65536]; u16 *sp; // sp could go OOB
[23:17:25] <user51> u16 mem[65536]; u16 sp; // sp wraps around nicely
[23:17:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:17:43] <nomagno> - completely clear and kinda-side-effect-free architecturing
[23:17:45] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:18:42] <nomagno> user61: AAAH, yes that's a tricky one
[23:19:11] *** Joins: xeyes (~user@user/duuude)
[23:19:21] <ProfSimm> So  with continuations we don't need a stack. Why is that not awesome
[23:19:46] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[23:20:08] <nomagno> you don't really need a stack in general, think about it
[23:20:30] <ProfSimm> nomagno: I know but this way you don't need it at all
[23:20:50] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[23:21:17] <ProfSimm> nomagno: with regular calls you need to remember where to return
[23:21:27] <ProfSimm> nomagno: it doesn't need to be a stack, but it needs to be something
[23:21:44] <ProfSimm> nomagno: with CPS you basically pass where to return as an argument
[23:21:47] <ProfSimm> It's different
[23:21:54] <juliaEnv> EdFletcher OK. So, if you wanted to design a new architectural style for some existing and solved problem, for example to improve performance, what would you have to do? Code it in the old way, add performance tests, and start A/B testing various changes?
[23:22:08] <Decker> return into another function is the same as return to where you came from
[23:22:14] <password> any of you guys ever delved into the insanity that is card payments
[23:22:16] <Decker> it's just a differe on X goto (FLORTRASH)
[23:22:16] <nomagno> if you reserve the ENTIRE memory space for orderly, ONLY-automatic, ONLY-scoped memory allocation, whenever you make a function call that function's local variables get written right next to the last function's memory space, with a marker. When you return, the end of the memory gets moved back to where it was and automatic variables get written over the last function call, and so on...
[23:22:20] <Decker> err FORTRAN
[23:22:26] <nomagno> You have a stack, but a dynamically sized stack
[23:22:45] <GeDaMo> scubagear[m]: from that Princeton/beautiful/Kernighan link I learned the word https://en.wikipedia.org/wiki/Exegesis "a critical explanation or interpretation of a text." :)
[23:22:46] <bayaz> Title: Exegesis - Wikipedia 
[23:23:00] <Hash> Exe jesus
[23:23:02] <Hash> omg!
[23:23:08] <nomagno> Even better! Make the callstack only contain fixed-size pointers
[23:23:11] <ProfSimm> Decker: yes and no
[23:23:32] <nomagno> then whenever you declare a variable, the system looks for free memory on the heap and assigns it. When you leave the scope, that memory is free'd
[23:24:01] <Decker> ProfSimm eventually at the end of the chain you have a 'continue main'
[23:24:10] <Decker> or 'do anything else'
[23:24:16] <EdFletcher> juliaEnv: well that's kind of two different questions: a new architecture isn't generally necessary to solve a performance problem and most certainly isn't where you'd start. in that case yeah you'd start with perf tests, isolating the "hot spots" where perf is specifically bad and then optimizing those specifically. 
[23:24:19] <nomagno> Much cleaner than the current approach where memory allocation is explicit and freeing not automatic
[23:24:45] <Decker> even if it's 1 entry because the returns evaporate from one to the next for ( f(g(h(x))) eventually h returns to (here))
[23:24:51] <GeDaMo> scubagear[m]: https://fgiesen.wordpress.com/2013/02/17/optimizing-sw-occlusion-culling-index/
[23:24:52] <bayaz> Title: Optimizing Software Occlusion Culling ? index 
[23:25:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:25:18] <ProfSimm> Decker: technically you're not continuing main tho. You're continuing something else that main supplied, but it may have gotten from somewhere else
[23:25:38] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 272 seconds)
[23:25:42] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[23:25:48] <Decker> or next scheduled task or something sure - you might visualize it as a forward going thing
[23:25:56] <cockatoodude> Well, unless you change the IP register instead of branching or jumping to other code or otherwise calling code from within main
[23:26:05] <cockatoodude> I think
[23:26:21] <cockatoodude> i forget the complexities of C compiler conventions as it relates to this
[23:26:27] <cockatoodude> also I been awake almost 3 days now
[23:26:37] *** Quits: thinegen (~thinegen@user/thinegen) (Quit: Leaving)
[23:27:31] *** Joins: xa0s (~xa0s@mab.sdf.org)
[23:28:59] <ProfSimm> Decker: what I find interesting is that you can keep passing an error function to the next function and in this way emulate precisely an exception "bubbling up the stack" but without a stack and without bubbling
[23:29:10] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:29:38] *** Joins: zaher__ (~zaher@37.48.151.183)
[23:29:45] <ProfSimm> Decker: it makes error handling delegation explicit, which seems a lot less error prone
[23:29:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[23:30:10] <ProfSimm> Decker: multiple results are also natural: just have multiple function arguments in the continuation
[23:31:22] <ProfSimm> Decker: so the only question is really how to not make it look like verbose highly nested mess
[23:32:48] *** Quits: zaher_ (~zaher@37.48.151.183) (Ping timeout: 256 seconds)
[23:33:20] <Decker> that's CPS? 
[23:33:25] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:6147:93af:10a8:c2c9) (Quit: Leaving...)
[23:33:32] <GeDaMo> scubagear[m]: a couple of videos https://www.youtube.com/watch?v=8--5LwHRhjk  https://www.youtube.com/watch?v=bD1wWY1YD-M
[23:33:33] <bayaz> Title: Painting a Selfie Girl, with Maths 
[23:33:33] <bayaz> Title: kkrieger: Making an Impossible FPS | Nostalgia Nerd 
[23:33:34] <Decker> https://en.wikipedia.org/wiki/Continuation-passing_style
[23:33:35] <bayaz> Title: Continuation-passing style - Wikipedia 
[23:33:36] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[23:33:38] <ProfSimm> Decker: yes cps
[23:34:05] *** Joins: echoreply (~echoreply@45.32.163.16)
[23:35:47] <InPhase> GeDaMo: +1 for Inigo Quilez.  His stuff is excellent.
[23:36:06] <GeDaMo> Yeah :)
[23:36:29] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[23:36:47] <ProfSimm> Decker: I've been trying to make call and return symmetric for so long and then I realized... CPS
[23:37:05] <ProfSimm> Decker: one usually thinks about it as a compilation intermediate rep
[23:37:12] <ProfSimm> Not an actualy code writing technique
[23:37:36] <Decker> express, gundb, others have a CPS chaining api
[23:37:54] <ProfSimm> Express what
[23:37:57] <Decker> with a return next() you have to call...  (to get tail call optimiation)
[23:38:13] <user51> i once made jump a subset of call :D but couldn't quite fit RET into it
[23:38:14] <Decker> https://www.npmjs.com/package/express Express :)
[23:38:15] <bayaz> Title: express 
[23:38:30] *** Joins: martums59 (~martums@user/martums)
[23:38:32] <ProfSimm> Decker: wait, JS has no TCO no
[23:38:40] <Decker> it's in the works 
[23:39:39] <ProfSimm> yes but Express is a thing right now, how
[23:39:44] <ProfSimm> thunks?
[23:39:54] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:39:59] <Decker> :) eventually next() returns
[23:40:06] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[23:41:13] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:43:37] *** Quits: xeyes (~user@user/duuude) (Ping timeout: 256 seconds)
[23:43:39] <Decker> ProfSimm it's also promises/async, 'await' never actually awaits, it returns a promise... eventually what it's waiting on gets fullfilled which triggers its own then, which is really the rest of the function wrapped in a callback 
[23:44:36] <ProfSimm> Decker: sure
[23:44:50] <ProfSimm> Decker: the trick to me is how to write CPS, but make it no look like CPS
[23:44:56] <Decker> which in a completed loop would be 'return eventLoop' :) or soemthing.... in NanoRTOS I called it Relinquish() with a tick count or -1 for forever... in a coop system it's just a call to the next thing which swaps the functional stack/state
[23:45:08] <ProfSimm> Decker: await doesn't count. That hides the benefits of CPS
[23:45:39] <ProfSimm> Decker: BTW the native await just awaits actually. The execution can be suspended in the scope
[23:46:04] <Decker> no.
[23:46:18] <ProfSimm> Spaghetti stack?
[23:46:18] <Decker> not in JS if you refer to your own language sure
[23:46:37] <Decker> yes.  Like I said the return path becomes like a separate call path
[23:46:40] <absentia> await gets converted into a state machine
[23:46:53] <absentia> that is capable of handling any order of promises that are ready to resolve
[23:47:19] <ProfSimm> Anyway. My problem right now is how to keep CPS as CPS but make it short and sexy
[23:47:23] <Decker> 'await' is really 'extract value from promise' and return if the promise isn't fulfilled
[23:48:07] <Decker> like *promise in C :)
[23:49:10] <ProfSimm> maybe something like a label with arguments
[23:49:13] <absentia> https://evan-brass.github.io/blog/finite-state-machines-and-js/
[23:49:14] <bayaz> Title: Finite State Machines and JavaScript | Evan Brass 
[23:49:27] <Decker> ProfSimm well... you have to define what parts of the parent you want to keep... (what you get passed) but then all of that in the parent's frame is probably scattered and has to be copied away, blow away the previous state, and make a new one - or just make a new one; and optionally chain them together into a call stack
[23:49:31] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[23:49:44] <absentia> hola
[23:50:02] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Ping timeout: 250 seconds)
[23:50:12] <ProfSimm> Decker: the implementationisn't the problem. The mental model, AST and syntax is 
[23:50:14] <ProfSimm> To me
[23:50:45] <Decker> ya see that gets to be a messy state stack with only a little bit of work :)
[23:50:47] <ProfSimm> Decker: I don't want every function call to cause one more nested closure i the caller
[23:51:36] <Decker> ProfSimm but it needs its own frame.... you can still kill the old one but; part of the syntax has to be either 1) what to keep from the caller's args automatically would be nice
[23:51:50] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[23:51:55] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[23:51:56] <ProfSimm> Decker: let's assume I keep everything.
[23:52:01] <Decker> assuming the caller had those same args, which probably it should because it should implement some chain interface for the types of chains it belongs in
[23:52:01] <user51> does anyone else treat pointers as two things, the pointer itself and what it points to?
[23:52:08] <Decker> (audio filters don't work on images for example)
[23:52:24] <Decker> user51 it is...
[23:52:30] <Decker> that's what makes it different from an array
[23:52:38] <Decker> which is just the thing pointed to
[23:53:09] <user51> well, my head just went boom. damned abstractions..
[23:54:21] <user51> i realized this as i was working on a tree, on paper. i was making nodes, but did not consider the contents.
[23:54:41] <ProfSimm> Decker: I think I might need to have some "return result" sugar for simple lamdbas, which internally uses some CPS convention. Otheriwse nesting expression would be a nightmare
[23:55:25] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[23:55:43] <user51> the good news, i think my paper debugging skills just went up :D
[23:57:21] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[23:57:43] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:57:46] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[23:57:49] <jamea> python anyone used pandas for read excel file? how to get the value of cell A5 Sheet1
[23:57:56] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Read error: Connection reset by peer)
[23:58:34] <Decker> jamea :) you have a sheet in a cell?
[23:58:39] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[23:59:08] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:557c:fb1f:da99:8b6d)
