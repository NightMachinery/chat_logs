[00:00:46] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:06:16] *** Joins: ublx (~ublx@user/ublx)
[00:36:01] <elflng> things i love about chicken: being given an assignment that requires an insane amount of parsing and processing and must be submitted to court 12 hours later... there's only one tool for the job. 
[00:36:05] <elflng> CHICKEN
[00:36:52] <elflng> (this was my day thurs night/fri. and yes, it got submitted to the court on time, so all of the relevant documents are there. unfortunately, no, it does not mean i get any extra money so i cant send any to the chicken foundation. hopefully that will change soon.)
[00:41:10] *** Joins: cjb (~cjb@user/cjb)
[00:48:10] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[00:51:00] *** Joins: matijja (~matijja@193.77.181.201)
[01:02:05] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87)
[01:02:05] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87) (Changing host)
[01:02:05] *** Joins: skapata (~Skapata@user/skapata)
[01:38:58] *** Joins: johnjaye (~pi@173.209.65.233)
[02:00:22] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[02:15:06] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 256 seconds)
[02:42:19] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[02:46:52] *** Quits: crumpo (~crumpo@user/crumpo) (Quit: Buh bye)
[02:51:39] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[03:15:12] *** Joins: cjb` (~cjb@user/cjb)
[03:15:28] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:16:06] *** cjb` is now known as cjb
[03:44:40] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[03:50:08] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[04:05:34] <zilti[m]> Is there a way in coops to define an argument as having to be of type <list<integer>>? So, it has to be a list which in turn only contains integers
[04:28:25] <elflng> nested typechecking?
[04:31:17] <elflng> doesnt look like it from the docs..
[04:31:31] <elflng> it shouldnt be too hard to define it though as an extension, i would think...
[04:32:49] <elflng> do you want it to be so that the arguments have to be lists of integers, or lists of integer objects, or list objects of integer objects, or ...
[04:33:04] <zilti[m]> I guess I could use define-primitive-class, give it a name like <list-integer> and have the predicate check if every item in the list is an integer
[04:33:05] <elflng> or list objects of integers? 
[04:33:11] <elflng> sure
[04:33:26] <elflng> just be careful in the definition because theres at least 5 ways that it could be interpreted :)
[04:33:43] <zilti[m]> Oof
[04:33:51] <zilti[m]> Thanks for the warning!
[04:34:56] <elflng> (i dont use object systems, so i could be wrong, this is just what it looks like from a brief perusal of the docs. i think the 'obvious' thing, as you described it, lists of integers, would be easiest to define and the most likely interpetation. just mentioning what youll need to be on the lookout for and possibly parse to avoid snarky comments.)
[04:36:22] <elflng> (as a sidenote, totally irrelevant, anyone know why linux mint is insisting that i replace a working 5.11 kernel with a broken 5.13 kernel?)
[04:37:50] <zilti[m]> Huh, is mint rolling release? I thought "traditional" distributions don't install newer kernel versions but instead backport security fixes
[04:47:48] *** Quits: form_fee- (~form_feed@nixon.einval.eu) (Quit: ZNC 1.8.2 - https://znc.in)
[04:48:04] *** Joins: form_feed (~form_feed@user/f/x-7101985)
[04:48:37] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 240 seconds)
[04:49:07] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[04:49:25] *** Joins: ublx (~ublx@user/ublx)
[04:49:37] *** Joins: micro (~micro@user/micro)
[04:50:00] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 268 seconds)
[04:50:40] *** Joins: jjhoo (~jahakala@user/jjhoo)
[05:13:04] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: srfi-64, spiffy-cookies, concurrent-native-callbacks, callable-data-structures
[05:51:54] <elflng> mint is not rolling release, they have their own weirdness for kernels...
[05:51:59] <elflng> based loosely around ubuntu
[05:52:17] <elflng> but for some reason they discontinued 5.11 and are trying to force 5.13, except 5.13 is seriously broken with xen
[06:00:17] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[06:18:21] <zilti[m]> Oh for whatever's sake, why the hell is it almost 4am? I got totally lost working on my Chicken QML thingy tonight sigh
[06:43:15] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[06:46:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:54:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:00:11] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:02:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:38:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:41:59] <s-liao> wasamasa Bunny351 When I came back to have a thought. The two search functions are completely correct. As your guys said, One full text search in https://wiki.call-cc.org/, the other function of search identifiesÂ  is based on the index file of the repo of the chicken doc in https://api.call-cc.org/5/doc/. The only point, about the user interface
[07:41:59] <s-liao> design, in the web page https://wiki.call-cc.org/, the identifier field in the section of the search page, it is a filter, like full text search, then filter by the name of the identifier.
[07:47:08] <s-liao> What I would like to investigate is how the egg document, the SRFIs and RnRs document and the chicken manualÂ  are integrated into svnwiki to work out in the way.
[08:09:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:17:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:34:25] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[09:03:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:29:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:49:33] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Quit: brb)
[09:50:38] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[09:52:20] <elflng> zilti[m]: chicken qml thingy?
[10:03:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:21:21] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[12:00:34] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[12:01:17] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[12:33:25] <zilti[m]> elflng: there is a library DOtherSide that wraps Qt's QML with some C boilerplate, so it is easy to write bindings. And I am working on bindings for Chicken
[12:34:13] <zilti[m]> The low level stuff seems to work quite fine (next up are the callbacks...) but the object oriented high level code I came up with is a total disaster
[12:34:44] <wasamasa> so far my only successful highlevel GUI abstraction is sxml interfaces :D
[12:36:21] <zilti[m]> The issue I have right now is that whenever I want to instantiate any coops class I wrote wrapping a Qt thing (even the QUrl class) Chicken locks up, the fans spin up, my RAM gets completely filled (I have 32 gigs!) and then CSI gets killed by the Linux kernel
[12:37:16] *** Quits: mdhughes_ (~mdhughes@user/mdhughes) (Ping timeout: 250 seconds)
[12:38:41] <zilti[m]> And I have no idea what's going on. My suspicion is that I am too dumb for coops, lol
[12:39:04] <sjamaan> Do you have a minvia?
[12:40:33] <zilti[m]> I don't know what that is
[12:40:51] <sjamaan> Minimum viable reproducible case
[12:41:40] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[12:41:50] <zilti[m]> Ah, lol, well... Not just yet, but I could tell you three lines to type after building my repo (currently https://codeberg.org/zilti/qml since I still don't have the HDD adapters to set up self hosting)
[12:42:58] <sjamaan> Sure, it's something at least
[12:45:29] <zilti[m]> You'd run `(import (qml core) coops)` to import everything, then `(qapplication-create)` to initialize Qt/QML, then e.g. `(new-QUrl "/home/it/doesnt-even-matter")` and watch it crash
[12:45:44] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Quit: leaving)
[12:49:02] <sjamaan> zilti[m]: I think the problem is that dos_qurl_create is declared with a const char *, and you're passing it a temporary string
[12:50:08] <sjamaan> That's shitty
[12:50:19] <zilti[m]> Hmm. I wasn't really considering individual cases yet, because e.g. if you try `(define qqv (make <QQuickView>))` you will get the exact same crash
[12:50:34] <zilti[m]> But I will look into that bug as well, thanks!
[13:00:59] *** Joins: crumpo (~crumpo@user/crumpo)
[13:38:54] <zilti[m]> Different question, why can't I `define-method` a method `create` that takes at least the class type as argument and then calls `make <ThatClass> ...`? That gives me `no method defined for given argument classes: (#<coops standard-class '<standard-class>'>)`
[13:40:05] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[13:40:37] *** Quits: evhan (195cc081a6@2604:bf00:561:2000::118) (Ping timeout: 240 seconds)
[13:40:55] *** Joins: evhan (195cc081a6@2604:bf00:561:2000::118)
[13:41:43] *** Joins: conjunctive_ (sid433686@id-433686.helmsley.irccloud.com)
[13:41:43] *** Joins: teiresias2 (~chris@blvuug/founder/teiresias)
[13:41:57] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[13:42:18] *** conjunctive_ is now known as conjunctive
[13:43:04] *** Joins: greaser|q (greaser@antihype.space)
[13:43:11] *** Joins: crumpy (~crumpo@user/crumpo)
[13:43:40] *** teiresias2 is now known as teiresias
[13:44:31] *** Quits: matijja (~matijja@193.77.181.201) (Ping timeout: 256 seconds)
[13:45:24] *** Joins: matijja (~matijja@193.77.181.201)
[13:45:39] *** Quits: crumpo (~crumpo@user/crumpo) (Ping timeout: 256 seconds)
[13:45:56] <sjamaan> zilti[m]: That should probably work, but you can't dispatch on the type because the object you pass in is of the type class
[13:46:18] <sjamaan> Well, you can dispatch on the metaclass, but I get a feeling that's not what you're trying to do
[13:48:35] <zilti[m]> Ah, because it is not an instance
[13:49:50] <zilti[m]> Makes sense
[13:51:21] <zilti[m]> I think I found what causes the "infinite loop"(?), it's for some reason my QMLBase class
[14:01:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:04:08] <Bunny351> sjamaan: "minvia"??? what is happening to you? ;-)
[14:05:42] <sjamaan> Bunny351: Bad influences ;)
[14:09:27] <zilti[m]> Ahh I found it. When inside an `initialize-instance`, after setting the slots, calling another method of that same class that then tries to access one of said slots will crash everything(tm)
[14:12:30] <sjamaan> I guess you'd have to call-next-method first
[14:13:09] <zilti[m]> Oh I tried that initially, that failed too
[14:14:05] *** Joins: rgherdt (~rgherdt@2a01:598:b1a3:2245:6a0f:5263:3193:7e65)
[14:14:43] *** Joins: Lysandros_ (~Lysandros@31-10-160-225.cgn.dynamic.upc.ch)
[14:16:11] *** florz is now known as Guest4218
[14:16:11] *** Quits: Guest4218 (nobody@rain.florz.de) (Killed (platinum.libera.chat (Nickname regained by services)))
[14:16:14] *** Joins: florz (nobody@rain.florz.de)
[14:16:29] *** Quits: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0) (Ping timeout: 250 seconds)
[14:17:28] *** Joins: SoniEx2 (~quassel@autistic.space)
[14:18:34] *** Joins: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8)
[14:18:51] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[14:28:34] <Bunny351> zilti: wouldn't that (defining a method on a class-type) require a metaobject protocol?
[14:29:09] *** Joins: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0)
[14:30:09] <Bunny351> zilti: wouldn't that (defining a method on a class-type) require a metaobject protocol?
[14:30:26] <Bunny351> (sorry, just saw that you left for a moment)
[14:31:35] <zilti[m]> Bunny351: Oh did I? My client didn't tell me anything... Got both copies of your message now :) Well, I suppose so, but I think I'm working around that stuff for now, it seems to be undocumented and I have other things to fix first
[14:36:30] *** Quits: rgherdt (~rgherdt@2a01:598:b1a3:2245:6a0f:5263:3193:7e65) (Ping timeout: 260 seconds)
[14:36:36] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:57ed:1d3:f8d9:95fe:666e)
[14:38:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a5:e39f:6219:9462:1ee1:d73b)
[14:41:23] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:57ed:1d3:f8d9:95fe:666e) (Ping timeout: 250 seconds)
[14:42:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:42:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:03:35] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: blackbeard (~barbanegr@2001:470:69fc:105::38c4) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: evhan[m] (~evhanfold@2001:470:69fc:105::33e3) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[15:04:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:10:07] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[15:12:30] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:12:30] *** Joins: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0)
[15:12:30] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[15:12:30] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:12:30] *** Joins: siraben (~siraben@user/siraben)
[15:12:30] *** Joins: blackbeard (~barbanegr@2001:470:69fc:105::38c4)
[15:12:42] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[15:12:44] *** Joins: evhan[m] (~evhanfold@2001:470:69fc:105::33e3)
[15:15:11] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a5:e39f:6219:9462:1ee1:d73b) (Ping timeout: 250 seconds)
[15:17:42] *** Quits: blackbeard (~barbanegr@2001:470:69fc:105::38c4) (Remote host closed the connection)
[15:17:42] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Remote host closed the connection)
[15:17:42] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Remote host closed the connection)
[15:17:42] *** Quits: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0) (Remote host closed the connection)
[15:17:42] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Read error: Connection reset by peer)
[15:17:42] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[15:17:42] *** Quits: siraben (~siraben@user/siraben) (Write error: Connection reset by peer)
[15:17:43] *** Quits: evhan[m] (~evhanfold@2001:470:69fc:105::33e3) (Remote host closed the connection)
[15:17:43] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Remote host closed the connection)
[15:22:15] *** Quits: Lysandros_ (~Lysandros@31-10-160-225.cgn.dynamic.upc.ch) (Changing host)
[15:22:15] *** Joins: Lysandros_ (~Lysandros@user/lysandros)
[15:22:17] *** Lysandros_ is now known as Lysandros
[15:29:42] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[15:32:13] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:32:13] *** Joins: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0)
[15:32:13] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[15:32:13] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:32:13] *** Joins: blackbeard (~barbanegr@2001:470:69fc:105::38c4)
[15:32:13] *** Joins: siraben (~siraben@user/siraben)
[15:32:25] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[15:32:25] *** Joins: evhan[m] (~evhanfold@2001:470:69fc:105::33e3)
[15:32:43] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Remote host closed the connection)
[15:32:43] *** Quits: evhan[m] (~evhanfold@2001:470:69fc:105::33e3) (Remote host closed the connection)
[15:32:43] *** Quits: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0) (Remote host closed the connection)
[15:32:43] *** Quits: blackbeard (~barbanegr@2001:470:69fc:105::38c4) (Remote host closed the connection)
[15:32:43] *** Quits: siraben (~siraben@user/siraben) (Remote host closed the connection)
[15:32:43] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Remote host closed the connection)
[15:32:43] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Remote host closed the connection)
[15:32:43] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Remote host closed the connection)
[15:32:43] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Remote host closed the connection)
[15:33:48] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 268 seconds)
[15:37:08] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[15:39:42] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:39:42] *** Joins: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0)
[15:39:42] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[15:39:42] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:39:42] *** Joins: blackbeard (~barbanegr@2001:470:69fc:105::38c4)
[15:39:42] *** Joins: siraben (~siraben@user/siraben)
[15:39:54] *** Joins: evhan[m] (~evhanfold@2001:470:69fc:105::33e3)
[15:39:55] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[16:02:51] *** Quits: siraben (~siraben@user/siraben) (Quit: Client limit exceeded: 20000)
[16:03:15] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[16:03:44] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Client limit exceeded: 20000)
[16:05:15] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[16:05:25] *** Quits: blackbeard (~barbanegr@2001:470:69fc:105::38c4) (Quit: Client limit exceeded: 20000)
[16:05:28] *** Quits: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0) (Quit: Client limit exceeded: 20000)
[16:05:57] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Client limit exceeded: 20000)
[16:09:44] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Client limit exceeded: 20000)
[16:09:44] *** Quits: evhan[m] (~evhanfold@2001:470:69fc:105::33e3) (Quit: Client limit exceeded: 20000)
[16:09:52] <rnlf> Sorry for the potentially dumb question, but is there a good way to get a pointer-to-c-string from a scheme string? I need to call a c function that takes a char const** but all i have is a scheme string.
[16:11:52] <rnlf> i understand i can pass a scheme string to a c function by simply defining a c-string argument in the foreign-lambda, but what about pointer to c-string?
[16:13:08] <sjamaan> The standard way would be to write a small piece of glue code in a foreign-lambda*
[16:16:00] <rnlf> okay, i assumed i would have to do that, just wanted to make sure it's the proper way. thanks!
[16:26:02] *** Joins: rgherdt (~rgherdt@2a01:598:d037:b097:b8db:6918:76e1:7858)
[16:33:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:41:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:d039:414:563a:b3dc:13b5:c05c)
[16:43:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1aa:9b6c:a0d2:d786:f311:1678)
[16:44:16] *** Quits: rgherdt (~rgherdt@2a01:598:d037:b097:b8db:6918:76e1:7858) (Ping timeout: 250 seconds)
[16:46:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:d039:414:563a:b3dc:13b5:c05c) (Ping timeout: 250 seconds)
[16:46:19] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a4:4217:a65b:4dd:c76e:3b8f)
[16:47:55] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1aa:9b6c:a0d2:d786:f311:1678) (Ping timeout: 250 seconds)
[16:54:39] <Bunny351> rnlf: check out locatives
[16:54:53] <Bunny351> but beware of GC
[16:56:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:d033:9b98:6b54:3afa:5afd:517)
[16:58:06] <rnlf> That would have been my next question. The called C function will make a copy, so I don't need to worry about GC after the C function returns. As long as I have an argument of locative type, it won't be GC'ed, right? Or could CHICKEN figure out I'm not using the value after passing it to the C function and GC it before the C function actually gets executed?
[16:59:00] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a4:4217:a65b:4dd:c76e:3b8f) (Ping timeout: 250 seconds)
[17:06:56] *** Joins: rgherdt (~rgherdt@2a01:598:d030:8dd4:a16d:ab84:9794:611f)
[17:07:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:08:41] *** Quits: rgherdt__ (~rgherdt@2a01:598:d033:9b98:6b54:3afa:5afd:517) (Ping timeout: 245 seconds)
[17:08:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:d032:e71d:11fb:f7b3:9f31:4445)
[17:10:25] *** Joins: andyjpb (~andyjpb@user/andyjpb)
[17:11:34] *** Quits: rgherdt (~rgherdt@2a01:598:d030:8dd4:a16d:ab84:9794:611f) (Ping timeout: 250 seconds)
[17:14:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1aa:fb03:abae:bd8d:5b3a:af02)
[17:17:12] *** Quits: rgherdt_ (~rgherdt@2a01:598:d032:e71d:11fb:f7b3:9f31:4445) (Ping timeout: 250 seconds)
[17:21:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:26:11] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[17:27:26] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1aa:fb03:abae:bd8d:5b3a:af02) (Ping timeout: 245 seconds)
[17:27:28] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[17:28:31] *** Joins: rgherdt (~rgherdt@tmo-087-14.customers.d1-online.com)
[17:35:43] <Bunny351> once passed, it may be GC'd
[17:36:03] <Bunny351> but while it is passed, it is still referred to, so will live
[17:36:15] <Bunny351> if the C code makes a copy, you're fine
[17:36:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:36:30] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03b:93d4:360e:eea1:79cc:6c51)
[17:37:08] <rnlf> perfect
[17:38:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:b8cf:746f:6b24:d274:e071)
[17:39:54] *** Quits: rgherdt (~rgherdt@tmo-087-14.customers.d1-online.com) (Ping timeout: 256 seconds)
[17:40:48] *** Joins: johnjaye (~pi@173.209.65.233)
[17:41:39] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03b:93d4:360e:eea1:79cc:6c51) (Ping timeout: 250 seconds)
[17:46:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b1:4d88:3891:54f1:b1b:c554)
[17:49:06] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:b8cf:746f:6b24:d274:e071) (Ping timeout: 245 seconds)
[17:55:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:d034:43cd:fae4:bc4a:df80:aab0)
[17:57:56] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b1:4d88:3891:54f1:b1b:c554) (Ping timeout: 250 seconds)
[17:59:53] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[17:59:58] *** Joins: rgherdt (~rgherdt@2a01:598:b1a3:945e:7af4:8d3d:808:6177)
[18:01:32] *** Quits: rgherdt__ (~rgherdt@2a01:598:d034:43cd:fae4:bc4a:df80:aab0) (Ping timeout: 252 seconds)
[18:01:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:a3d9:b576:f797:be46:8fde)
[18:01:47] <vandusen> SPAM! SPAM! SPAM! by freeee
[18:04:31] *** Quits: rgherdt (~rgherdt@2a01:598:b1a3:945e:7af4:8d3d:808:6177) (Ping timeout: 245 seconds)
[18:07:48] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[18:14:18] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:14:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:29:31] * elflng sings the song: matrix bridge is falling down, falling down, falling down...
[18:30:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b)
[18:33:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:a3d9:b576:f797:be46:8fde) (Ping timeout: 245 seconds)
[19:00:29] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[19:05:20] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b) (Ping timeout: 252 seconds)
[19:21:33] *** mdhughes_ is now known as mdhughes
[19:26:40] *** Joins: ublx (~ublx@user/ublx)
[19:34:08] *** Joins: zilti[m] (~ziltimatr@2001:470:69fc:105::16d0)
[19:34:08] <zilti[m]> sjamaan Bunny351: I found it. I found out what code broke coops for me:
[19:34:09] <vandusen> "zilti" pasted "The code that breaks coops" http://paste.call-cc.org/paste?id=86fffbff69007191d628db30ac331eddf231c3ea
[19:34:09] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[19:34:21] <zilti[m]> https://paste.call-cc.org/paste?id=86fffbff69007191d628db30ac331eddf231c3ea
[19:34:24] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[19:34:24] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[19:34:24] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:34:24] *** Joins: evhan[m] (~evhanfold@2001:470:69fc:105::33e3)
[19:34:24] *** Joins: blackbeard (~barbanegr@2001:470:69fc:105::38c4)
[19:34:24] *** Joins: siraben (~siraben@user/siraben)
[19:34:24] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[19:44:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4)
[19:44:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4) (Changing host)
[19:44:00] *** Joins: skapata (~Skapata@user/skapata)
[19:44:29] *** Joins: rgherdt (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b)
[19:53:55] <zilti[m]> Very nice, I guess tonight I'll be able to cobble together a first proof-of-concept GUI with callbacks
[19:54:17] *** Quits: rgherdt (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b) (Ping timeout: 252 seconds)
[20:03:18] <elflng> code that breaks coops... hrm... call it 'wire snips' ?
[20:05:50] <Zipheir> It's like Nick Park's _Chicken Run_.
[20:06:28] * elflng has that. on vhs.
[20:07:52] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[20:11:53] <Zipheir> I missed most of the jokes in that as a kid because I'd never seen The Great Escape.
[20:11:55] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[20:12:31] <Zipheir> Like "Why is there a noisy American among all the British chickens?"  Because Steve McQueen.
[20:13:22] <elflng> i never saw the great escape either, but ive heard enough of just a minute to have a vague idea of what its about
[20:15:28] <Zipheir> Yeah, I'd say the title sums it up nicely.
[20:16:25] <elflng> https://ephemeral.net/magnets_of_chickens.jpg
[20:16:48] <elflng> https://ephemeral.net/movies_of_chickens.jpg
[20:17:25] <elflng> it also helps that monty python and basically every other uk sketch comedy show parodied the great escape at one time or another, or often more than once.
[20:18:47] <Zipheir> Nice magnet. :)
[20:20:53] <elflng> thanks, someone gave it to me as a gift about 17 years ago.
[20:21:22] <elflng> (i was trying to find a fluroscopic pic of eggs inside chickens to name 'chickens_of_chickens' but they dont seem to exist on a simple search.)
[20:22:42] <elflng> i found one of an xray chicken, its fairly gruesome and id rather not post it, actually.
[20:22:45] <elflng> bok.
[20:23:07] <elflng> chicken cabbages go bok bok choy.
[20:24:24] <elflng> does anyone know of a caldav/carddav client that actually correctly handles all the allowed date formats?
[20:25:20] <elflng> (according to the nth revision, it is theoretically possible to specify things in the Jewish or Muslim or Persian or Chinese or Indian or whatnot calendars, but i have yet to find a client that supports this)
[20:26:22] <elflng> reason for asking on chicken: im trying to write a chicken carddav- and caldav-format parsing lib, and possibly the network foo necessary for transmission as well.
[20:27:22] <elflng> it would be incredibly useful for me if such a client did exist, but its also a lot of work to write said converters, and if theres no support or if things break, theres not much point in spending the time.
[20:28:11] <elflng> (its a hideously messed up set of specs to start with - no-one seems to agree on exactly how to follow the spec, and most every implementation is largely incompatible with every other, from vcards on down.)
[20:28:24] <zilti[m]> Hm I never saw The Great Escape either. Guess I should?
[20:29:11] <elflng> life sucks, and then you die - usually impaled on barbed wire.
[20:32:57] <zilti[m]> Is there any software at all that supports all this?
[20:35:00] <zilti[m]> That last one sounds like something vandusen would say
[20:36:09] <zilti[m]> Is there any half-way modern "Web standard" that isn't a complete, utter mess?
[20:36:20] * zilti[m] has flashbacks to WebDAV and OAuth
[20:53:51] <Bunny351> rethorical question.
[20:55:15] <Corbin> I'll bend the question in the wrong way: PNG is not a complete, utter mess. The reason why the standards are bad is because many of the main participants are directly trying to capture the regulatory systems underlying the Internet.
[20:55:57] <Bunny351> and don't forget incompetence
[20:56:11] <zilti[m]> Well PNG also isn't a web standard, it's just one of many image formats
[20:56:33] <Corbin> I don't think Microsoft, Apple, or Google were incompetent when they voted to *not* make PNG a standard HTML5 image format.
[20:57:13] <Corbin> zilti[m]: Yes, that's what I mean by "the wrong way". Your rhetorical question implies that we must compromise on "half-way modern" or "Web" or "mess"; I decided to compromise on "standard".
[20:57:55] <Bunny351> Corbin: sorry, I can't follow your argument
[20:58:12] <Zipheir> I think "use a simple-ish subset" can be good.
[20:58:54] <zilti[m]> Nobody working on any of the DAV formats really ever had any interest of making it a viable good standard. All of the big participants wanted to drive people away from these standards towards their proprietary crap. (And people happily obliged)
[20:58:59] <Corbin> Bunny351: I don't think that large software publishers are incompetent at software, aside from those that are obviously fraudulent (e.g. Oracle). In particular, I think that all of the major browser vendors are quite competent at software engineering.
[20:59:35] <Bunny351> Oh, then we have quite a different way of experiencing the world.
[20:59:45] <Bunny351> most of what G/A/M produce is utter crap
[20:59:47] <Bunny351> IMHO
[20:59:52] <zilti[m]> Similar story for OAuth
[21:00:54] <Bunny351> the whole aura of "innovation" is smoke and mirrors. if something new (really new) comes out of one of those corps, it's because they bought some company.
[21:01:13] <Corbin> Bunny351: Yes, but at the same time, the software engineers are competent. I don't want to hold myself up as an example, but I know that Googlers know how to build software because I worked with them both inside *and* outside Google.
[21:01:26] <Bunny351> large institutions prevent themselves from being forwardmoving, it's inherent
[21:01:42] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:01:46] <Corbin> So perhaps the corporation itself is the problem, not the people. And once we're okay with that, then we don't have to worry about peoples' feelings when we accuse the corporation of malicious behavior.
[21:01:58] <Bunny351> yes, and I spoke with googlers who assured me that to get *anything* moving, it requires an awful lot of hassle, red tape and time
[21:02:08] <Zipheir> Risk-averseness isn't exclusive of the ability to build stable software, though, in principle.
[21:03:08] <Bunny351> getting back to the subject, when it comes to standards, it seems that they could send some of those competent people. but they don't.
[21:03:19] <zilti[m]> The big question is: what is needed to make the tech world - both the producers and the consumers - have an incentive to move towards openness, compatibility, and decentralisation?
[21:03:40] <Corbin> Bunny351: Yeah, you're still not getting it. They *do* send competent people, and they *order* those people to not cooperate with their peers in other corporations.
[21:03:47] <zilti[m]> Bunny351, oh I think they did send very competent people. With the clear job of being competent at sabotaging the standards.
[21:03:56] <Bunny351> Corbin: ah, you seem to be an insider
[21:03:57] <Corbin> Don't forget -- a corporation is a golem. It's a shambling pile of capital held together with magic words. It's not a person.
[21:04:12] <Bunny351> oh, great, I didn't know that
[21:04:38] <Zipheir> They tend to exhibit survival instincts, from a certain perspective.
[21:04:44] <Bunny351> zilti: nobody has, I guess. the corps make more money with bad software, the users get used to everthing
[21:04:59] <florz> what would be needed would be to overcome the general preference for authoritarianism in humans
[21:05:37] <Bunny351> and developers don't read, don't learn, just follow fads, mostly. which is natural, since learning how to program is something one nobody helps you with
[21:05:38] <Zipheir> The problems we're trying to solve on IRC today keeping getting bigger.
[21:05:49] <Zipheir> *keep
[21:05:57] <florz> hehe :-)
[21:06:51] <zilti[m]> As they say, you grow with the challenges you're facing
[21:07:27] <Bunny351> ... or you get drowned in noise, never getting beyond that.
[21:07:35] <Zipheir> Bunny351: How else do people manage the sheer magnitude of the technology tower they're asked to work with?
[21:07:42] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[21:07:50] <Bunny351> true
[21:08:08] <zilti[m]> I've been really thinking a lot lately. I am sure there is a way to make consumers demand more standardization and decentralization. Maybe some day I'll figure it out.
[21:08:10] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[21:08:15] <Bunny351> nearly impossible, unless someone simply refuses to do it.
[21:08:35] <Zipheir> The ability to say "I have no idea how that works" should be prized in programmers.
[21:08:51] <florz> but, I mean, seriously, I would not only look at this from the perspective of "why aren't they sending competent people?", but also "why does anyone care what a authoritarian oligopoly thinks should be the standard?"
[21:09:04] <Bunny351> also true
[21:09:15] <zilti[m]> Zipheir: to quote my coworker's code comment in one class: "TODO: This is horrible, how can we make this better?"
[21:09:29] <Zipheir> zilti[m]: Oh, sure.
[21:09:55] <Bunny351> a start would be to build on existing, simple (and probably ancient) protocols.
[21:10:05] <Zipheir> zilti[m]: At some point, you realize that comments like that are in tons of "production" code, and that all of the "horrible" solutions are still chugging along...
[21:10:20] <Bunny351> now someone will complain about missing TLS, emojis, right to left writing and unicode...
[21:10:40] <Bunny351> perhaps we should accept that all code is horrible...
[21:10:55] <Zipheir> I've come to think that's an energy-draining philosophy.
[21:10:58] <Bunny351> vandusen: THE HUMBLE PROGRAMMER!
[21:11:01] <vandusen> Bunny351: As we all know, Spider-Man is a fake man who does not exist!
[21:11:11] <zilti[m]> I think vandusen crashed. Oh the irony.
[21:11:17] <zilti[m]> Ah no, here he is
[21:11:24] <Corbin> florz: I like that takeaway. After all, PNG is supported in all major browsers, and HTML5 has (IIUC) *zero* official image formats still. Maybe Free Software does win in the end.
[21:11:34] <Bunny351> Zipheir: NO! just try to get the ego out of it.
[21:11:57] <Zipheir> I spent several years in the suckless.org community where "all software sucks" was a mantra, and it just resulted in everyone getting depressed and doing not much.
[21:12:03] <zilti[m]> Last time I discussed with my colleague about how all software is full of bugs and how horrible it all is, I ended up not having been able to buy a ticket on my phone for my ride home
[21:12:33] <Bunny351> you can sit down now and write simple usable things!
[21:13:06] <Zipheir> I agree, and I think that's a less soul-crushing way to think about it.
[21:13:07] <zilti[m]> The bigger challenge is to write simple usable useful to others, too things
[21:13:09] <Bunny351> don't try to solve other people problems, you can start with your own.
[21:13:51] <Bunny351> dropping unnecessary stuff helped me a lot
[21:13:56] <zilti[m]> well the tech problems I have left are caused by being forced to use the software others use, too, for interoperability purposes
[21:14:25] <Bunny351> yes, but sometimes one can hack around this.
[21:15:39] <Zipheir> I suppose a good approach to interop. is to be pragmatic and use only what you really need.
[21:15:51] <florz> Corbin: well, I guess in that case it isn't that bad in practice ... but then, there are plenty of cases where people do care about what those companies are promoting as a standard, even though it's obviously against their own self-interest, so I guess I wouldn't be that optimistic ...
[21:15:53] <Bunny351> it's and endless task, but what really helped with was starting to write my own dev tool stuff
[21:16:48] <Bunny351> try to reduce the frustration with the things I use every day
[21:23:04] *** Joins: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30)
[21:39:35] <zilti[m]> What's on my idea list is a simple, small, affordable homeserver where people can easily keep all their data, have their mail account, etc., and is easy to back up. So if anyone knows of a cheap-ish SBC with at least two SATA ports...
[21:47:54] <florz> zilti[m]: what's on my idea list is the same, but as a distributed system of multiple "machines" with the goal of surviving most hardware failures
[22:15:34] *** Quits: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30) (Remote host closed the connection)
[22:15:45] *** Joins: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30)
[22:21:46] *** Quits: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30) (Ping timeout: 260 seconds)
[23:03:53] <klm> Bunny351: regarding entr, do you mean what I want to change in entr? Yes - I don't want to list files to watch in stdin, my program needs stdin/terminal! It always gets me. And the defaults are a bit silly I think (space to re-run, who needs that?)
[23:13:02] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:13:02] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:13:05] *** greaser|q is now known as GreaseMonkey
[23:14:01] *** Quits: crumpy (~crumpo@user/crumpo) (Ping timeout: 256 seconds)
[23:47:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
