[00:01:49] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[00:02:09] *** Joins: kmein (~weechat@user/kmein)
[00:03:44] *** Quits: phma (phma@2001:5b0:210d:1438:cfd1:5ed2:55ba:b890) (Read error: Connection reset by peer)
[00:03:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:05:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:06:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:06:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:06:09] *** Joins: wroathe (~wroathe@user/wroathe)
[00:06:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[00:06:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:08:06] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[00:08:25] *** Joins: kmein (~weechat@user/kmein)
[00:09:32] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:10:14] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[00:10:32] *** Joins: kmein (~weechat@user/kmein)
[00:10:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:10:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[00:11:24] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:12:00] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[00:13:28] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:14:46] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[00:15:05] *** Joins: kmein (~weechat@user/kmein)
[00:18:19] *** Joins: pavonia (~user@user/siracusa)
[00:20:15] *** Joins: alx741 (~alx741@157.100.93.160)
[00:22:11] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[00:23:22] *** Quits: mikoto-chan (~mikoto-ch@dsl-olubng12-54fa07-26.dhcp.inet.fi) (Quit: mikoto-chan)
[00:24:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:26:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:27:39] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:29:10] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[00:29:30] *** Joins: kmein (~weechat@user/kmein)
[00:29:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:29:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:29:57] *** Joins: wroathe (~wroathe@user/wroathe)
[00:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:38:32] *** Joins: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net)
[00:39:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:39:35] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:40:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[00:41:00] *** Joins: biog (~user1@159.224.42.85)
[00:41:15] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[00:41:52] *** Joins: alx741 (~alx741@157.100.93.160)
[00:43:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:43:31] *** Quits: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:46:38] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:51:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[00:54:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[00:58:35] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Remote host closed the connection)
[00:58:52] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[01:00:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:03:16] *** Joins: alx741 (~alx741@157.100.93.160)
[01:07:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:12:59] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[01:15:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[01:15:52] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[01:16:14] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:16:44] *** Joins: rust2600 (~rust2600@185.154.109.45)
[01:21:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 240 seconds)
[01:21:20] *** Joins: cryptomonad (~cryptomon@194.191.225.149)
[01:23:21] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:24:12] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:24:16] *** Joins: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:24:39] *** Joins: alx741 (~alx741@157.100.93.160)
[01:24:44] *** Quits: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[01:24:44] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[01:25:20] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:27:34] *** dagi37319 is now known as dagit
[01:27:51] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:28:31] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:28:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:31:11] *** Joins: acidjnk (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de)
[01:31:12] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de)
[01:31:52] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[01:31:55] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:33:26] *** Quits: cryptomonad (~cryptomon@194.191.225.149) (Remote host closed the connection)
[01:46:04] *** Joins: alx741 (~alx741@157.100.93.160)
[01:52:05] *** Quits: drdo (~drdo@144.172.69.89) (Ping timeout: 256 seconds)
[01:52:37] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[01:54:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:56:05] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5087:9b0e:bd55:ec33)
[01:56:13] <little_mac> hellow
[01:56:26] <geekosaur> o/
[01:59:18] *** Joins: Pickchea (~private@user/pickchea)
[01:59:42] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[01:59:52] *** Joins: mjs2600_ (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[02:00:12] <Hecate> ยง21
[02:00:15] <Hecate> o/
[02:00:58] <little_mac> are there any bots here?
[02:01:11] <tomsmeding> @botsnack
[02:01:11] <lambdabot> :)
[02:01:11] <DigitalKiwi> i'm not convinced monochrom isn't a bot
[02:01:24] <little_mac> oh my
[02:01:32] <little_mac> monochrom is this true 
[02:01:43] <DigitalKiwi> tbf sometimes i'm not convinced i'm not a bot
[02:01:56] <little_mac> oh shi
[02:02:02] <little_mac> your making me think im a bot
[02:02:10] <monochrom> I am a bot. I am not convinced that I am a human.
[02:02:12] <DigitalKiwi> youz probs a bot
[02:02:39] <little_mac> ohh shnizzle drizzles 
[02:03:25] *** Quits: `2jt (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[02:03:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:03:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:03:42] *** Joins: wroathe (~wroathe@user/wroathe)
[02:08:45] *** Joins: drdo (~drdo@144.172.69.89)
[02:11:18] *** Joins: alx741 (~alx741@157.100.93.160)
[02:13:17] <geekosaur> % :show language
[02:13:17] <yahb> geekosaur: base language is: Haskell2010; with the following modifiers:; -XBangPatterns; -XNoCUSKs; -XConstrainedClassMethods; -XConstraintKinds; -XDataKinds; -XNoDatatypeContexts; -XDefaultSignatures; -XDeriveAnyClass; -XDeriveDataTypeable; -XDeriveFoldable; -XDeriveFunctor; -XDeriveGeneric; -XDeriveLift; -XDeriveTraversable; -XDerivingStrategies; -XDerivingVia; -XDisambiguateRecordFields; 
[02:15:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:16:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:16:57] *** Quits: xff0x (~xff0x@2001:1a81:53aa:f200:47a2:8092:7d27:b734) (Ping timeout: 240 seconds)
[02:17:59] *** Joins: xff0x (~xff0x@2001:1a81:53aa:f200:f1a6:48ec:fa1:3025)
[02:18:15] <little_mac> % :show time
[02:18:15] <yahb> little_mac: syntax: :show [args | prog | editor | stop | imports | modules | bindings | linker | breaks | context | packages | paths | language | targets]
[02:20:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:21:36] *** Quits: mjs2600_ (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:23:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:24:11] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[02:24:55] *** Joins: deadmarshal (~deadmarsh@95.38.116.69)
[02:26:12] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[02:29:01] *** Quits: deadmarshal (~deadmarsh@95.38.116.69) (Ping timeout: 240 seconds)
[02:29:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[02:30:37] *** Quits: shapr (~user@2601:7c0:c202:5190:2664:1056:c3ed:3a4b) (Ping timeout: 240 seconds)
[02:33:51] *** Joins: alx741 (~alx741@157.100.93.160)
[02:36:47] <Axman6> lechner: what problem are you having?
[02:38:11] *** Joins: noman (~noman@2603:900a:1600:ba00:2e6e:5d98:940:16d7)
[02:38:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:39:14] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:43:05] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:43:27] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[02:44:26] <Axman6> lechner: I assume you know about https://hackage.haskell.org/package/hasql-1.5.0.1/docs/Hasql-Session.html - you can use `run (statement (True,1) [vectorStatement|select foo :: text from "bar"|]) connection` (though I would assign the result of the th to a variable and call that)
[02:46:06] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:46:26] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[02:46:57] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzโฆ)
[02:49:22] <dsal> little_mac: yahb doesn't have Showtime.
[02:54:02] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[02:55:00] *** Joins: alx741 (~alx741@157.100.93.160)
[02:56:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:58:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:59:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:01:02] *** Joins: AlexNoo_ (~AlexNoo@94.233.240.16)
[03:01:51] *** Quits: noman (~noman@2603:900a:1600:ba00:2e6e:5d98:940:16d7) (Quit: Client closed)
[03:02:00] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[03:02:04] * Axman6 does jazzhands
[03:02:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[03:04:11] *** Quits: vglfr (~vglfr@46.96.180.119) (Ping timeout: 256 seconds)
[03:04:11] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[03:04:32] <Axman6> ran :show imports in PM, there's a surprising list there - the output got cut off, is there a @where+ equivalent for yahb output?
[03:04:56] <geekosaur> use %% and it'll pastebin the result
[03:04:57] *** Quits: AlexZenon (~alzenon@94.233.241.107) (Ping timeout: 268 seconds)
[03:04:57] *** Quits: AlexNoo (~AlexNoo@94.233.241.107) (Ping timeout: 268 seconds)
[03:04:57] *** Quits: Alex_test (~al_test@94.233.241.107) (Ping timeout: 268 seconds)
[03:06:30] *** Parts: rust2600 (~rust2600@185.154.109.45) ()
[03:06:53] *** Joins: ensyde (~ensyde@2600:1702:2e30:1a40:d1f0:4880:2e12:11ff)
[03:06:53] <geekosaur> and I think you meant @more?
[03:07:36] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzโฆ)
[03:07:52] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[03:08:20] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[03:08:38] <Axman6> ah amazing, thanks (http://qp.mniip.com/y/37 for anyone interested)
[03:09:07] *** Joins: AlexZenon (~alzenon@94.233.240.16)
[03:09:11] *** Joins: Alex_test (~al_test@94.233.240.16)
[03:09:17] *** Quits: emf (~emf@2620:10d:c091:480::1:89d7) (Quit: emf)
[03:16:24] *** Joins: alx741 (~alx741@157.100.93.160)
[03:19:42] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:20:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:23:27] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[03:23:34] *** AlexNoo_ is now known as AlexNoo
[03:25:35] *** Joins: falafel (~falafel@2603-8000-d800-688c-c064-54e6-9a05-e359.res6.spectrum.com)
[03:27:45] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:27:45] *** Quits: acidjnk (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:28:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:29:20] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-c064-54e6-9a05-e359.res6.spectrum.com)
[03:30:27] *** Joins: shapr (~user@2601:7c0:c202:5190:ea69:7e3b:73f6:8004)
[03:31:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:31:22] *** Joins: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[03:31:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:31:51] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[03:32:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-c064-54e6-9a05-e359.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:34:17] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-c064-54e6-9a05-e359.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:34:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:34:57] *** Quits: shapr (~user@2601:7c0:c202:5190:ea69:7e3b:73f6:8004) (Ping timeout: 240 seconds)
[03:38:11] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[03:39:37] *** Quits: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de) (Quit: WeeChat 3.3)
[03:43:03] *** Quits: max22- (~maxime@2a01cb088335980073d4db6cd0f566a2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:46:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[03:48:28] *** Joins: alx741 (~alx741@157.100.93.160)
[03:53:25] *** Quits: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[03:53:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:55:16] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:55:53] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:57:47] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[03:59:35] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:01:30] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[04:02:55] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[04:03:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:03:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:03:58] *** Joins: wroathe (~wroathe@user/wroathe)
[04:05:08] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:08:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:08:56] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[04:09:47] *** Joins: shapr (~user@2601:7c0:c202:5190:e1f:9ab:bb49:711d)
[04:11:10] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:11:26] <Axman6> So I nerdsniped myself at the end of last year trying to write a function based on edwardk's discrimination package with the following type: memo :: forall t a. Grouping t => (t -> a) -> (t -> a) it feels like it might not be possible, even if you used unsafePerformIO but would love to be proven incorrect
[04:11:55] *** Joins: alx741 (~alx741@157.100.93.160)
[04:15:11] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:15:59] *** Joins: nhatanh02 (~satori@123.24.172.30)
[04:16:02] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[04:16:19] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:18:03] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:21:08] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[04:21:57] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: Lost terminal)
[04:22:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:23:29] <Hecate> I just used an MVar for the first time in a real setup
[04:23:31] <Hecate> damn
[04:23:52] <Axman6> MVars are great
[04:26:08] *** Joins: cheater (~Username@user/cheater)
[04:27:25] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[04:31:41] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[04:32:05] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:16] <jackdk> mmmvar
[04:33:05] *** Joins: califax (~califax@user/califx)
[04:36:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:37:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:38:57] *** Quits: shapr (~user@2601:7c0:c202:5190:e1f:9ab:bb49:711d) (Ping timeout: 240 seconds)
[04:38:59] *** Joins: alx741 (~alx741@157.100.93.160)
[04:41:03] *** Joins: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[04:45:01] *** Quits: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[04:45:43] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:47:17] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzโฆ)
[04:47:25] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:48:07] *** Joins: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net)
[04:48:12] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:49:26] <edwardk> Axman6: hrmm
[04:49:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:49:58] <meer> nick Inst
[04:50:00] <meer> ummm
[04:50:03] *** meer is now known as Inst
[04:50:13] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:50:26] <Inst> if I have a type of IO Maybe a, is there a way to change it to Maybe IO a?
[04:50:54] <Axman6> % :t sequence @(IO (Maybe a))
[04:50:54] <yahb> Axman6: ; <interactive>:1:22: error: Not in scope: type variable `a'
[04:50:55] <EvanR> not in the way you want no
[04:51:27] <geekosaur> % :t sequence @Maybe @IO
[04:51:27] <yahb> geekosaur: Maybe (IO a) -> IO (Maybe a)
[04:51:42] <geekosaur> other way around is always possible, but the way you want generally is not
[04:51:47] <edwardk> Axman6: did you try starting with (t -> a) -> IO (t -> IO a) ?
[04:51:59] <Axman6> I did not
[04:52:10] <edwardk> do that, then you can get the effects in the right place
[04:52:19] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:52:20] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:52:31] <Axman6> I was struggling to figure out what thew types should be, specifically what should the `b` in getGroup be
[04:52:49] <Inst> so sequence?
[04:52:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:53:01] <EvanR> sequence will do the opposite of what you said
[04:53:10] <geekosaur> no, sequence does theopposite. reread what I wrote
[04:53:33] *** Quits: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:53:43] <edwardk> b should be the 'a'
[04:53:51] <edwardk> and a should be your t
[04:53:59] <edwardk> its what you are discriminating on
[04:54:11] <edwardk> ad you are storing the result in the schwartzian transform
[04:54:55] <edwardk> its been a while but i wrote one of these once
[04:55:07] <edwardk> i forget the trick though
[04:55:09] <Axman6> why doesn't that surprise me :P
[04:55:54] <EvanR> I see your schwartzian transform is as big as mine!
[04:55:56] <Inst> yeah IO is not traversable
[04:56:48] <EvanR> you have to ask yourself what IO (Maybe a) -> Maybe (IO a) would even mean
[04:56:56] <Axman6> and if you think hard about it, it makes sense that it isn't
[04:57:07] <Inst> not sure, I'm sort of annoying the people on the Haskell / FP discord
[04:57:26] <Axman6> :t f :: IO (Maybe a) -> Maybe (IO a); f _ = Nothing
[04:57:27] <lambdabot> error: parse error on input โ;โ
[04:57:32] <Axman6> :t let f :: IO (Maybe a) -> Maybe (IO a); f _ = Nothing in f
[04:57:33] <lambdabot> IO (Maybe a) -> Maybe (IO a)
[04:58:11] <Inst> i'm trying to utilize the library TinyFileDialogs
[04:58:15] <geekosaur> interestingly, this types. I wonder what it does
[04:58:30] <geekosaur> % :t sequence @Maybe @IO
[04:58:30] <yahb> geekosaur: Maybe (IO a) -> IO (Maybe a)
[04:58:32] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (Quit: Leaving.)
[04:58:41] <Axman6> that one's fine
[04:58:56] <geekosaur> oh, got that backwards, sigh
[04:59:05] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Quit: Connection error?!)
[04:59:17] <EvanR> run the IO action to see if you get Just x, if so, go back in time to stop the I/O from ever happening and return Just actionReturningXForSureIfYouTryAgain
[04:59:24] <geekosaur> right, not Traversable
[04:59:36] * geekosaur should just go to bed
[04:59:43] <Inst> i have a type of IO Maybe [Text], and I want to feed it to a function that requires String
[05:00:08] <EvanR> IO (Maybe [Text]), the parentheses may be helpful understanding what's going on
[05:00:11] <Axman6> then you need to execute that thing of tyoe IO (Maybe [Text])
[05:00:23] <Axman6> and yes, those parens are important
[05:00:28] <Inst> so... (IO (Maybe [Text]) -> (String -> IO Handle)
[05:00:36] <Axman6> IO Maybe [Test] doesn't make any sense
[05:00:38] <geekosaur> val >>= fromMaybe id
[05:00:43] <geekosaur> er
[05:00:48] <Inst> yeah, parentheses, sorry
[05:00:49] <geekosaur> val >>= fromMaybe ""
[05:01:12] <geekosaur> gives you a Text, then you have to convert to String, then you have to put it back into IO
[05:01:29] <geekosaur> after calling your function
[05:01:41] <Inst> so far, I have a working function that outputs IO (Maybe String)
[05:01:49] <Axman6> > getInput >>= \mTexts -> newFile (maybe "default.txt" (toString . T.concat) mTexts
[05:01:51] <lambdabot>  <hint>:1:82: error:
[05:01:51] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[05:02:00] <Axman6> uhm forget that >
[05:02:03] <Inst> GHCI is being a dick to me
[05:02:19] <EvanR> yourAction >>= \theMaybeText -> whatever you wanna do with it
[05:02:19] <geekosaur> you cannot take something out of IO
[05:02:34] <Inst> basically, it complains it expects Maybe (Maybe String) instead of IO (Maybe String)
[05:02:37] <geekosaur> unless you put it back in after you're done
[05:02:43] <Axman6> Inst:  it would be infinitely easiler to help you if you shared what you've actually tried to do
[05:03:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:03:21] <Axman6> as there are literally an infinite number of programs that could have caused that error
[05:03:25] <Inst> https://cdn.discordapp.com/attachments/528863657363505159/928098789229727774/unknown.png
[05:04:08] <Inst> treat this as a learning exercise, FP discord is telling me "just use monad transformers / combinators"
[05:04:22] <jackdk> geekosaur: you probably already know this, but I find it helpful to never think in terms of "taking something out" when using `(>>=)`. Thinking instead in terms of `fmap` then `join` makes it clear that nothing magical is happening
[05:04:49] <Axman6> ther's no need for monad transformers here, particularly since you're stilling learning the basics of the IO monad
[05:05:01] <Inst> when Expected: IO (IO String)
[05:05:01] <Inst>         Actual: IO (Maybe String)
[05:05:03] <Inst> thank you Axman6
[05:05:09] * Inst hugs Axman6 and throws money at him
[05:05:31] <Axman6> extract looks weird, what do you believe its type is?
[05:06:00] <Inst> from
[05:06:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:06:13] <Axman6> I think you would make your life a hell of a lot simpler if you just used dio notation
[05:06:17] <Axman6> do*
[05:06:38] <Inst> i don't feel comfortable with do notation, still learning it
[05:06:50] <Inst> rather, i'd rather skip it for a while to get comfortable with what's going under the hood
[05:07:40] *** Joins: alx741 (~alx741@157.100.93.160)
[05:07:45] <Inst> ; -> (>>) {-Then-}, x <- y converts to y >>= \x -> ...
[05:08:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:08:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:08:18] <Axman6> ok, well you'll end up with something that looks like ugly do notation anyway
[05:09:25] <Axman6> openFilePAth = openFileDialog ... >>= \maybeTexts -> case maybeTexts of Just [aText] -> pure (Just (unpack aText)); _ -> pure Nothing
[05:09:36] <EvanR> we've been telling the likes of Inst to not use do notation until you understand >>= xD
[05:10:05] <Axman6> the pures here are of type a -> IO a (or in thise case, Maybe String -> IO (Maybe String)
[05:10:18] <Axman6> there is no need for sequence
[05:10:24] <edwardk> Axman6: ok, i wrote it up more or less. i don't have a working ghci to test with but
[05:10:28] <edwardk> https://www.irccloud.com/pastebin/MCWdxUyf/
[05:10:37] <edwardk> ^- i think that should roughly do what you want
[05:11:18] <edwardk> the b there = 't' but could just as easily used f t (t2a t) and laziness in the final function
[05:11:34] <edwardk> then its a matter of unsafely performing all the things
[05:11:39] <Axman6> edwardk: I thought of doing something like that, and it's horrific :P
[05:11:54] <Inst> yeah the pures are nightmares
[05:11:59] <Axman6> this isn't threadsafe right?
[05:12:02] <Inst> i don't know how to use :: to force a particular type interpretation
[05:12:24] <Axman6> the compiler knows, it's you who doesn't :)
[05:12:42] <edwardk> "thread safe" is doable but requires a custom primop
[05:12:59] <edwardk> ooh, no it doesn't. its easy
[05:13:08] <edwardk> change 'b' to be the pair of the answer 'a' and an ioref to write it to
[05:13:12] <Inst> openFilePath was working before, it's more dialogedFilePath
[05:13:17] <Inst> I added sequence in there for some dumb reason
[05:13:20] <edwardk> and generate a fresh ioref on each invocation
[05:14:03] <edwardk> the other way is to temporarily pin the io action to the current HEC with a custom primop that convinces it it can't move, then do the above but with a fixed ioref per hec. less allocation, more performance, but not as pretty
[05:14:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:14:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:14:58] *** Joins: wroathe (~wroathe@user/wroathe)
[05:16:31] <Axman6> I has thought about allocating an IORef per `t` but that would use a lot of RAM... does this actually memoise the calls?
[05:17:44] <edwardk> each 't' causes the creation of one of those functions that always writes the same 'a' back to the ref memoized. you don't use a fresh ref per 't' but a fresh ref per invocation in the 'easy threadsafe' version
[05:17:47] <Axman6> I was also trying to think if there was a way to use laziness to avoid the need for an IORef at all - for each t we want to run t2a on t just once and then store that
[05:18:13] <edwardk> you have an IO action that needs to return () and it needs tog et a result out. so you need to smuggle the answer out in some form of ref type
[05:18:30] <edwardk> and throwing an exception to sidestep that has the wrong semantics
[05:19:00] <Axman6> yeah that was the main problem I ran into, not being able to hold onto a reference
[05:19:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:20:14] <Axman6> I'm still a bit confused how this memoises things... is the stored value basically in the closure _\ -> ... ? :mindblown: ok I think I get it
[05:20:33] <Inst> dialogedFileOpen = openFilePath >>= (\x ->
[05:20:34] <Inst>     x >>= (id))
[05:20:43] <Inst> why does this not typecheck? I'm trying to remove the maybe inside
[05:20:47] <Axman6> wow, this is amazing and gross at the same time. Classic Ed
[05:20:56] <edwardk> *takes a bow*
[05:20:59] <Axman6> what's the type of openFilePath?
[05:21:07] <Inst> IO (Maybe String)
[05:21:36] <Axman6> jackdk: ^ just got Ed'd, I have regrets
[05:21:38] <EvanR> Maybe is there so you have to case analyze it and deal with Nothings
[05:21:40] <jackdk> Axman6: https://hackage.haskell.org/package/acme-smuggler perhaps?
[05:21:51] <Inst> I was assuming the bind instance for maybe handles it
[05:21:53] <edwardk> for axman https://www.irccloud.com/pastebin/t28Y6Ti4/thread-safe.hs
[05:22:12] <Inst> so, at this point, then, I should run a case x of, to get to the string inside?
[05:22:17] <Inst> it feels like >>= is confused
[05:22:19] <Axman6> Inst: but the function passed to >>= for IO needs to have type: a -> IO b
[05:22:40] <EvanR> > Just "foo" >>= \str -> return (reverse str)
[05:22:40] <Inst> so basically, >>= is pretty useless when dealing with nested monads of different types?
[05:22:42] <lambdabot>  Just "oof"
[05:22:47] <jackdk> >>= is not confused - it is the >>= for IO
[05:22:48] <EvanR> it doesn't remove a Maybe
[05:22:50] *** Joins: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net)
[05:23:13] <EvanR> it lets you operate on the Just value if there is one
[05:23:14] <Inst> so when I define >>=, the type signature that's either hand-written, spawned by autopilots, or inferred by type checker
[05:23:24] <jackdk> Inst: monad transformers are a solution to this problem. I recommend not reading about them until you're used to writing things out by hand
[05:23:38] <Inst> i know
[05:23:44] <Axman6> edwardk: ok, this I can deal with... now is this morally safe to use unsafePerformIO on (twice)?
[05:23:48] <Inst> monad transformers are basically the "I bashed my head into the wall 30 times and I give up"
[05:23:50] <Axman6> I guess it is now
[05:23:52] <edwardk> oh you can drop the 'output' i forgot
[05:23:57] <edwardk> yes
[05:24:29] <EvanR> not exactly a beginner tool
[05:24:34] <Inst> when I use >>=, it only infers a single type and with dissimilar monad nesting levels, it tells me to scram?
[05:24:50] <Axman6> Inst: this is why I was trying to lead you to something that wasn't using the monsd instance for both Maybe an dIO
[05:25:10] <EvanR> a single use of >>= will interpreted only 1 way
[05:25:15] <Axman6> stop thinking of Mayb e as a monad and don't use its (>>=)
[05:25:27] <jackdk> ^ good advice, for now
[05:26:18] <EvanR> >>= won't just do all effects of all monads in sight, it's 1 monad at a time
[05:26:19] *** Joins: alx741 (~alx741@157.100.93.160)
[05:26:19] <Axman6> edwardk: does that version memoise? looks like it'll call t2a t for every call - the fiew pattern trick before looked like a good way to do this
[05:26:26] <edwardk> you can get fancier and pass (t2a a) as the argument to the ioref and read it out of there and save some thunk construction in exchange for an unncessary read from the thunk
[05:26:37] <EvanR> so might as well deal with 1 monad at a time xD
[05:26:48] <EvanR> at most
[05:26:51] <Inst> spawned a case of
[05:26:54] <edwardk> it makes thunk for the evaluation of t2a t every time, but only ever returns the first thunk
[05:27:02] <Inst> it's complaining it expects IO (IO Handle)
[05:27:18] <Inst> instead of Maybe IO Handle
[05:27:33] <Axman6> hmm, hand on, `output` isn't used - one of ref1 or ref2 should be output?
[05:27:35] <EvanR> I think your IDE is confusing you more
[05:27:41] *** Joins: shapr (~user@2601:7c0:c202:5190:5625:d6db:b1c1:a272)
[05:27:49] <edwardk> oh, that one is wrong i forgot to write in the base case, because i'd started to do the change to storing 'a' in the ioref but didn't finish, one sec
[05:27:51] <Axman6> Inst: you _do not want Maybe (IO Handle)
[05:27:54] <Axman6> _
[05:28:34] <Inst> i mean, there's an ugly hack i've gotten to work
[05:28:50] <edwardk> https://www.irccloud.com/pastebin/Dio1MtKJ/
[05:28:52] <Inst> just have the first function print out IO String, and hope there's no way for openFileDialogs to legitimately generate the specific string
[05:29:05] <edwardk> there/ i forgot the 'priming' writeIORef basically
[05:29:12] <Inst> then test for the string on the function calling it
[05:29:21] <EvanR> what are you actually trying to do again
[05:29:58] <Inst> hopefully, once I stop sucking at Haskell, build Teach.Effects so that learners of Haskell from non-programmer backgrounds
[05:30:17] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[05:30:39] <Axman6> I thought that `writeIORef ref1 a` wasn't actually needed, but realised that it's used for just the first call for each t. got it
[05:30:39] <Inst> can get into Effects early on and put in their problem sets as .exes (or whatever equivalent binary) that can parse data from files and network files, as well as output data into local files
[05:30:48] <edwardk> https://www.irccloud.com/pastebin/7zTQAoyz/
[05:30:49] <EvanR> Effects
[05:31:12] <Inst> TBH I'm starting to think this was a bad idea, that you can't teach IO early like this
[05:31:12] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:31:14] <edwardk> ^- that version stuffs the answer in the ioref as a thunk, but doesn't do it, then copies it out to all future refs
[05:31:26] <Inst> the thing is, I want it to hook into a GUI
[05:31:44] <Axman6> Inst: personally I thnk teaching IO using do notation works fine, I've done it with plenty of first year students
[05:31:48] <EvanR> IO is fine, it's not necessary to fully understand theory of monads to just do basic stuff like read and write files
[05:31:53] <edwardk> avoids allocating the tuple every time, no 'undefineds' remains threadsafe, etc.
[05:32:23] <EvanR> some kind of Effects library, that is what I'm skeptical about, for total beginners
[05:32:38] <edwardk> if you want to go further you could pass in a function that consumes an 'a' rather than an IORef, but it seems superfluous
[05:32:58] <Inst> oh okay, but I'm sort of over-doing it by insisting on hand-crafting a hack linking TinyFileDialogs (UI / API caller) to my stuff in such a way that a beginner could understand what's going on
[05:33:02] <Axman6> yeah this is fine
[05:33:07] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[05:33:08] <edwardk> because to implement it you'd need to do the ioref dance anyways
[05:33:20] <Inst> EvanR: yeah, I'm discovering the problem
[05:33:22] *** Quits: kvakil (~keyhan@2601:645:8500:4fc0:2df5:f7d6:e89:c64b) (Remote host closed the connection)
[05:33:27] <Inst> understanding IO, as opposed to just doing it, is a nightmare
[05:33:47] <Axman6> Inst: I think you should try and get this wqorking using do notation for the IO stuff and avoid using anything Monad related for Maybe. then you can desugar it 
[05:34:06] <Inst> i have a working variant with the "nothing" logic in main
[05:34:23] <edwardk> finally you can replace all IOs with ST s, and the unsafePerformIOs with unsafePerformST to feel a tiny bit better about yourself or judicious trickery around unsafeInterleaveST to feel slightly more smug, but its all the same
[05:34:24] <Axman6> I don't think that's the problem, you haven't developed the skills of typechecking in your head yet, so you're getting unexpected results
[05:34:41] <Inst> i can typecheck just well when it's not nested dissimilar monads
[05:34:48] <Inst> it's only when it's nested dissimilar monads when everything goes to hell
[05:34:55] <EvanR> the fact that Maybe is a monad shouldn't even matter
[05:34:59] <EvanR> forget this fact xD
[05:35:20] <Inst> thank you for being encouraging
[05:35:23] <EvanR> it's not helping you
[05:35:28] <Inst> tbh i wasted like 6 hours of Functional Programming discord's time today
[05:35:32] <Axman6> so follow our advice and stop treating Maybe as monad, it's not even a useful thing to be thinking about at the moment
[05:36:11] <Axman6> in fact, the code you want to write just needs fmap at the moment
[05:37:15] <Inst> i guess i haven't built up the intuition for it
[05:37:17] <Axman6> since you're starting with IO (Maybe [Text]) and you want IO (Maybe String) that's just fmap of a function of type Maybe [Text] -> Maybe String
[05:37:27] <Inst> https://cdn.discordapp.com/attachments/528863657363505159/928107214500151336/unknown.png
[05:37:42] <Axman6> which you have written a few times already, but added in unnexessary IO stuff to complicate thing
[05:38:01] <Inst> i have the IO (Maybe String)
[05:38:03] <EvanR> data Maybe a = Nothing | Just a
[05:38:15] <Inst> at this point I need Maybe IO Handle or IO Maybe Handle or IO Maybe IO Handle
[05:38:29] <EvanR> damn the lack of parens is confusing
[05:38:40] <Axman6> the -> Nothing has type Maybe a, you need IO (Maybe (IO Handle))
[05:38:45] <Inst> Maybe (IO Handle) or IO (Maybe Handle) or IO (Maybe (IO Handle))
[05:38:52] *** Quits: ensyde (~ensyde@2600:1702:2e30:1a40:d1f0:4880:2e12:11ff) (Quit: Leaving)
[05:39:34] <EvanR> handling Maybe is as simple as case analysis on those two cases above
[05:39:50] <Axman6> both branches of that case statement need to return IO <something>
[05:40:10] <Axman6> but at the moment, they are both return Maybe <something>
[05:40:18] <Axman6> IO /= Maybe
[05:40:26] <Axman6> how do you go from a to IO a?
[05:43:22] <Axman6> jackdk: just looked at acma-smuggle. I hate it
[05:43:27] <Axman6> acme*
[05:44:10] <jackdk> Axman6: ^_^
[05:44:24] <monochrom> smuggler*
[05:46:32] <Inst> thank you
[05:46:35] <Inst> i love you all
[05:46:46] <Inst> cancer.hs, interpreted)
[05:46:53] <Inst> Ok, one module loaded.
[05:47:29] *** Joins: alx741 (~alx741@157.100.93.160)
[05:48:21] <Inst> inb4 folks on Functional Programming Discord start going "AAAAAAAAAAH" and complain it should be written in Monad Transformers, etc etc
[05:48:33] *** Joins: califax- (~califax@user/califx)
[05:48:55] <jackdk> eventually you will want to learn transformers and MTL, but not today.
[05:49:03] <jackdk> good work and good luck moving forward
[05:49:20] <Inst> https://pastebin.com/X4GyvTXP
[05:49:25] <Inst> thanks
[05:51:23] <Inst> here's the monolithic prototype:
[05:51:25] <Inst> https://cdn.discordapp.com/attachments/528863657363505159/928110841264488478/unknown.png
[05:51:49] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:52:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:52:01] *** califax- is now known as califax
[05:53:00] <EvanR> you can save yourself a lot of space munging just indenting once for each level (when possible)
[05:53:23] <EvanR> using whatever, 2 space per tab like you did
[05:53:51] <EvanR> instead of 2 and a half spaces per tab
[05:54:04] <EvanR> er, 2.5 indents per level
[05:54:09] <Inst> i know
[05:54:46] <Inst> i have 5 different beginner haskell textbooks, the textbook on functional programming datastructures by okasaki, algorithms by bird, "the book of monads" by that Spanish guy
[05:54:54] <EvanR> coerceList ??
[05:54:57] <Inst> one of them says indent twice
[05:55:07] <EvanR> oh this is like string conversion
[05:55:13] <Inst> that's probably the wrong term, I picked that up from Haskellbook / Haskell Programming from First Principles
[05:55:33] <EvanR> by indent twice they might mean at least 2 space per tab
[05:55:40] <Inst> the original plan was to use a friend who's a good social media influencer
[05:55:53] <Inst> to get her to attract people to my course, once the prototypes etc were done and we had it perfected
[05:56:08] <Inst> now i'm planning to pay people MMO gold to do it
[05:57:02] <Inst> unfortunately, the friend ran off to Python and is taking a 3 week course on it
[05:57:04] <EvanR> you are paying people to take your Haskell course
[05:57:07] <Inst> yes
[05:57:17] <Inst> I'm very obsessed with Haskell, maybe it's autism or whatever
[05:57:28] <Inst> recursion, etc, it gets me going
[05:57:41] <Inst> I was also planning to get a friend of my friend, who's an art school graduate, to design a mascot for Haskell
[05:58:02] <Inst> and pay her like 40, or something, then eventually try to get Haskell Foundation to cover me
[05:58:07] <Inst> ballooned into 200
[05:58:09] <Inst> too elaborate
[05:58:17] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 240 seconds)
[05:59:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:59:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:59:22] *** Joins: wroathe (~wroathe@user/wroathe)
[05:59:25] *** Quits: mmhat (~mmh@55d49f73.access.ecotel.net) (Ping timeout: 240 seconds)
[05:59:49] <Inst> my goal is to get the language to twice the difficulty of Python for new learners
[06:00:31] <Inst> then claim, "you're smart, don't learn Python, learn Haskell instead"
[06:00:33] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[06:02:39] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[06:02:56] *** Joins: mikail_ (~mikail@94.1.27.214)
[06:03:09] *** Joins: neurocyte09 (~neurocyte@IP-045128182210.dynamic.medianet-world.de)
[06:03:09] *** Quits: neurocyte09 (~neurocyte@IP-045128182210.dynamic.medianet-world.de) (Changing host)
[06:03:09] *** Joins: neurocyte09 (~neurocyte@user/neurocyte)
[06:05:01] *** Quits: neurocyte0 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:05:01] *** neurocyte09 is now known as neurocyte0
[06:05:17] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:1f95:fc24:559b:d565) (Ping timeout: 240 seconds)
[06:06:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:07:28] *** Quits: xff0x (~xff0x@2001:1a81:53aa:f200:f1a6:48ec:fa1:3025) (Ping timeout: 268 seconds)
[06:08:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:09:11] *** Joins: xff0x (~xff0x@2001:1a81:53e7:b00:1d48:798f:68c9:16a8)
[06:10:01] *** Joins: alx741 (~alx741@157.100.93.160)
[06:10:54] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[06:13:04] *** Joins: mmhat (~mmh@55d49507.access.ecotel.net)
[06:14:36] <dsal> openFilePath looks like   `fmap unpack <$> openFileDialog "" "" [] "" False`
[06:15:14] * Inst sighs
[06:15:14] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:16:10] <EvanR> fmap (fmap (fmap (...
[06:16:41] <Inst> why would someone [Text] anyways?
[06:16:47] *** Joins: nhatanh02 (~satori@123.24.172.30)
[06:17:11] <dsal> Oh, I missed that that was partial.
[06:17:11] <EvanR> the lines of a file is a thing
[06:17:26] *** Joins: tomku (~tomku@user/tomku)
[06:17:29] <Inst> it loads up the bleeding path of a filename
[06:17:44] <dsal> It also asks for more than one filename.
[06:17:53] <dsal> Some programs work on more than one file.
[06:17:53] <EvanR> oh, filepicker, yeah
[06:18:04] <EvanR> multi-file select
[06:18:46] <dsal> So `fmap (unpack . head) <$> openFileDialog "" "" [] "" False`  I guess.
[06:19:37] <EvanR> better pick a file, any file, or I'll fuckin crash
[06:20:01] <Inst> <$>, I forget, what's that operator? Should be fmap?
[06:20:09] <EvanR> it's fmap
[06:20:54] <Inst> EvanR: well, doing it in a hacky way is relatively easy
[06:21:04] <Inst> just dump random stuff, bind to fh or something
[06:21:08] <Inst> then cite fh
[06:21:09] <dsal> Partial functions are just deferred regrets.
[06:21:55] <Inst> also, iirc, i've ran it before, i don't think it'll crash
[06:21:59] <EvanR> Let It Crash
[06:22:01] <Inst> returns Nothing
[06:22:03] <dsal> It'll definitely crash.
[06:22:12] <Inst> hence the fucking Maybe that drove me nuts for 18 hours
[06:22:15] <EvanR> Fail Fast Fail Often
[06:22:42] <Inst> one of the annoying things about Haskell, as opposed to other languages, is that your functions can't return stuff of different types
[06:22:44] <EvanR> Avoid Success At All Costs
[06:22:45] <Inst> unless you do forall, iirc
[06:22:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[06:23:03] <dsal> It's a bad API, though.  It looks like the Boolean at the end defines the size of the results.  It also does it incorrectly.
[06:23:08] <EvanR> more like in those languages everything is the same type
[06:23:12] <dsal> Inst: What do you mean?  Sure it can.
[06:23:13] <EvanR> e.g. Dynamic
[06:23:58] <Inst> it's annoying because if i'm trying to do control flows, i can't have it arbitrarily branch
[06:24:09] <Inst> has to have some kind of evaluation call that returns the same type... oh wait
[06:24:18] <dsal> I'm sorry you feel that way.  I don't seem to have that issue.
[06:24:24] <EvanR> data Javascript = JSNum Double | JSString Text | JSArray (Vector Javascript) | ...
[06:24:43] <EvanR> enjoy
[06:24:46] <Inst> yeah just define a type for controlling stuff
[06:25:10] <dsal> Your limitations aren't language limitations.
[06:25:39] <Inst> i don't mind if you call me dumb
[06:26:18] <dsal> Haskell's the easiest language I've worked in over the last few years.  If I have a problem, it's usually because I'm trying to do something that I'd later regret if I succeeded.
[06:26:48] <dsal> I'm not saying you're dumb.  But you're saying things about the language that aren't about the languageโฆ they're about you.  The language lets you do all kinds of things.
[06:27:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[06:27:33] *** Joins: awschnap (~lavaman@98.38.249.169)
[06:27:33] <EvanR> control flow is one of those things that don't have to be built into haskell, because laziness
[06:27:36] <Inst> yeah, just a bit demoralized, first foray into trying "imperative" programming in Haskell
[06:28:16] <EvanR> so instead you have a small fortune of ways to control flow, some of which are techniques, some of which are in libraries
[06:28:45] <Inst> I tend to sing praises of Whitington's book, it's absolutely great, intros data structures and algorithms
[06:28:52] <EvanR> just checking a Maybe however is not something that requires much ingenuity 
[06:29:05] <Inst> Either is probably better
[06:29:29] <dsal> Either complicates a lot of things and doesn't behave all the ways you'd expect.
[06:29:35] <dsal> Maybe is quite consistent.
[06:29:41] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 268 seconds)
[06:29:50] <Inst> just wish there were a way to learn / teach Haskell so you could be making effectual programs by the end of the first or second week of the course (if it were 3-4 credit uni)
[06:30:45] <EvanR> there is
[06:30:49] <Inst> really?
[06:30:55] <EvanR> sure
[06:31:02] <Inst> i mean beyond the main = putStrLn "Hello World" nonsense
[06:31:11] *** Joins: joo-_ (~joo-_@87-49-147-115-mobile.dk.customer.tdc.net)
[06:31:11] *** Quits: joo-_ (~joo-_@87-49-147-115-mobile.dk.customer.tdc.net) (Changing host)
[06:31:11] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[06:31:15] <dsal> I'm not convinced trying to learn things in a hurry is best for most people.
[06:31:24] <EvanR> plenty of resources and war stories from people who do this for a living
[06:31:36] <Inst> oh, I could look up the ANU course
[06:31:57] <dsal> @where cs194
[06:31:57] <lambdabot> I know nothing about cs194.
[06:32:05] <Inst> the UPenn one
[06:32:11] <dsal> https://www.seas.upenn.edu/~cis194/fall16/
[06:32:14] <Inst> the reason I'm crazy about Haskell is that for whatever stupid reason
[06:32:23] <Inst> C++ never clicked for me, neither did Basic, Visual Basic, etc
[06:32:44] <Inst> I think I tried a few Python tutorials
[06:33:14] <Inst> this one did, would be fascinating if you could start targeting newbies, I wonder what it'd look like on a college application if the applicant
[06:33:14] *** Quits: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:33:18] <EvanR> one of the insights I got from Haskell is a better appreciation for other languages, boring industrial, also languages "beyond" haskell
[06:33:19] <dsal> Haskell's definitely easier than C++.  heh
[06:33:28] <Inst> posted Github repositories for Haskell
[06:33:28] *** Joins: alx741 (~alx741@157.100.93.160)
[06:33:33] <EvanR> tooling around with Python forever does not help your soul
[06:33:44] <Axman6> Inst: Based on what I've seen, I feel like you're not too far off from having haskell click for you, you're pretty close. but you're making the same mistakes we all made too
[06:33:54] <EvanR> but all languages have their charms
[06:34:04] <Inst> you know Whitington's book, right?
[06:34:09] *** Joins: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net)
[06:34:09] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[06:34:16] <Inst> "Haskell From the Very Beginning"
[06:34:28] <Inst> I spent 12-16 hours hacking at one of the problems with binary trees
[06:34:29] <Axman6> Inst: also, I and jackdk have both been involved with tutoring for the ANU couse (and the NICTA/Data61/System-F course too, and dibblego wrote most of it)
[06:34:35] <Inst> oh wow
[06:34:46] <Inst> enjoying your reverse spiralling toilets? :)
[06:35:08] <Axman6> Who even has toilets that spiral, thatโs inefficient
[06:35:17] <jackdk> Inst: and our summer Christmases
[06:35:28] <Inst> wondering if Aus actually leads the world, instead of the Japanese, in toilet technology
[06:35:33] <Inst> best anti-Chinese weapon you have
[06:35:45] <Inst> their premier in the 1990s disappeared to one of your bathrooms, went missing from a conference
[06:35:54] <Inst> turns out he was disassembling and studying your toilets
[06:35:55] <Axman6> Javing lived in Japan, their toilets are definitely superior
[06:36:10] <Axman6> H*
[06:36:41] *** Quits: awschnap (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:36:59] <Inst> let me look it up again
[06:37:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:37:21] <Inst> tbh i think reaching imperative programmers is like a dead end, because they'll just get the functional concepts dumped into their own languages
[06:37:36] <Inst> better to start with amateurs, students, etc
[06:37:42] <dsal> lol
[06:37:56] <Inst> https://cs.anu.edu.au/courses/comp1100/labs/01/
[06:38:09] <jackdk> I'm mostly here for the types. FP is a consequence of wanting good types.
[06:38:25] <dsal> The opinion to understanding ratio is kind of hilarious.
[06:39:02] <Axman6> that's one of the reasons ANU uses Haskell, much more of an even playing field, prople who know programming before they arrive don't know Haskell
[06:39:02] <EvanR> yes advanced types in imperative languages are mildly terrifying
[06:40:30] <Inst> which was whitington's line, i think he was teaching OCaml at Cambridge
[06:40:37] *** Quits: yauhsien (~yauhsien@61-231-58-217.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:40:54] <Inst> FP gives everyone an even playing field
[06:41:02] * Axman6 can't even load the ANU link above
[06:41:17] <Inst> https://cs.anu.edu.au/courses/comp1100/
[06:41:52] <Axman6> yes, it's not responding for me
[06:41:59] <BrokenClutch> FP is too dense e complex. Like, you don't have the same flow you have with imperative languages
[06:42:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[06:42:27] <Inst> got it working
[06:42:30] <dsal> How is FP more complex than imperative languages?  I find the opposite.
[06:42:53] <EvanR> well, my FP solutions to advent of code disagree xD
[06:42:55] <Inst> FP doing imperative stuff seems more complex
[06:42:55] <BrokenClutch> I actually prefer FP, I think it's easier to reason about. But imperative makes more sense for people, It's easier to think on a sequence of commands than some complex monad computation
[06:43:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:43:17] <EvanR> Inst, you should try doing functional stuff in a non-functional language xD
[06:43:20] <dsal> Imperative makes sense to people who were trained that way.
[06:43:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:43:42] <Inst> when I was trying to learn C++, people in #C++ and ##programming were wagging their fingers
[06:43:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[06:43:55] <Inst> because I tried to run stuff with recursive loops
[06:43:58] <EvanR> BrokenClutch, this is why I only resort to monads .. as a last resort
[06:44:02] <Inst> "we don't have TCO, this is bad"
[06:44:05] <BrokenClutch> I've tried both with my 60 yrld dad and other people. They grasp imperative faster than FP
[06:44:41] <BrokenClutch> The idea of "statement" really helps
[06:44:56] <EvanR> well FP has a math component, specifically, algebraic skills like substituting
[06:45:04] <EvanR> many people never heard of this 
[06:45:19] <EvanR> meanwhile, "goto" is self evident
[06:45:31] <Inst> i actually learned recursion in terms of goto
[06:46:01] <Inst> also to finish the comment about binary trees, it was to combine two binary trees
[06:46:17] <Inst> Whitington's solution was to melt the trees down into lists and then rebuild them
[06:46:29] <Inst> I got an accumulator set up after hours of moaning
[06:46:37] <Inst> was incredibly satisfying
[06:47:01] <Inst> i.e, one tree would be treated as an accumulator, the other tree would be recursively dismantled
[06:48:02] <BrokenClutch> I don't think FP will get popular, some FP things could get, but FP no.
[06:48:29] <BrokenClutch> I really like FP, it's easier to reason about, give me less headaches and keep things more fun
[06:48:32] <EvanR> I have to report on my own attempt to learn programming in BASIC, using only goto I had a very hard time structuring any program
[06:48:36] <Inst> there are some people for whom FP is native
[06:48:38] <EvanR> very mysterious to me as a 6 year old
[06:48:48] <Inst> satisfying as an 8 year old
[06:49:00] <Inst> or was that 11 year old? Been decades.
[06:49:07] <EvanR> I was like how the F could zork ever work like this
[06:49:58] <Inst> i mean there are people for whom FP is native, i.e, FP seems to have lower working memory requirements than imperative
[06:50:01] <BrokenClutch> I will probably try scheme vs go, when showing people FP vs imperative. I will write the results to see if there is some difference : D
[06:50:18] <jackdk> I find that explaining evaluation by substitution (especially in a nonstrict language) is much easier to teach than evaluation by moving an instruction pointer around while keeping some scratch space
[06:50:20] <Inst> hence why I talk about non-programmers, i.e, if they have poor working memory and FP sticks better
[06:50:32] <dsal> Inst: What does "native" mean?  Nobody is born with any particular programming skills.
[06:50:40] <Inst> dsal: I mean, a type of intellect
[06:51:19] <EvanR> I can guarantee you the BASIC manual made no particular sense to me as a child
[06:51:21] <BrokenClutch> Man, this does not make sense. Like, haskellborn?
[06:51:32] <Inst> there was a BASIC manual?
[06:51:34] <EvanR> so it couldn't have been especially intuitive
[06:51:37] <EvanR> I had a manual
[06:51:51] <Inst> like, my attempts at learning imperative programming were ruined because I couldn't read the code in the textbooks
[06:51:57] <EvanR> though copying the code listings from the back worked
[06:52:04] <BrokenClutch> EvanR: I could even take a bath, like, children are f dumb
[06:52:04] <Inst> took way too long to process what the hell the code was supposed to do and what it actually did
[06:52:26] <BrokenClutch> Inst: Imperative code is harder to reason about it
[06:52:33] <BrokenClutch> This i can agree on
[06:52:37] <EvanR> at least, once it gets off 1 page
[06:52:55] <BrokenClutch> couldn't take a bath*
[06:53:20] <Inst> i don't think my math background is particularly good
[06:53:39] <jackdk> Is anyone about who is connected with the stackverse? I am about to ship a PR to amazonka-dynamodb that requires `hashable >=1.3.4.0` (`instance (Hashable k, Hashable v) => Hashable (Map k v)`). Latest stackage snapshots for GHC 8.10.7 still lock to `hashable-1.3.0.0`. What are the odds of this ever changing (i.e., should I work around their reluctance to update things)?
[06:53:53] <Inst> okay, i'll idle off, need to read my textbooks
[06:54:50] <Inst> as in, i dropped real analysis twice when i was younger, but got past linear algebra track with good grades
[06:55:21] <Inst> but haskell seemed more intuitive to me, i.e, i'm stating that there are probably more people whose intellects take more naturally to FP than imperative, and these people are probably non-coders because most code is imperative
[06:55:47] <BrokenClutch> Inst: Or you had bad teachers
[06:55:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:55:49] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:55:49] *** finn_elija is now known as FinnElija
[06:56:22] <dsal> Most code is buggy. 
[06:56:53] <dsal> Imperative just means someone thinks they thought through all the details for something and wrote them down in a lot of detail for some machine to deal with.
[06:57:17] <dsal> We've got better abstractions.  We can do things like state a goal and reuse stuff.
[06:57:23] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[06:57:51] <dsal> And since we have a useful type system, we can do things like refactor code without being terribly afraid everything's about to break.
[06:57:59] <Inst> put another way, FP abstractions are harder to understand, but once you get them, they're easy to work with
[06:58:01] <BrokenClutch> Lot of imperative languages have good abstractions, lot of them don't even have types
[06:58:04] <Axman6> The majority of code that has been wirtten has been imperative because that's where we started (machine code -> assembly -> <dead languages> -> C -> ...) but that doesn't mean that it's inherently easier, it's just a more direct translation to what the machine executes. there's no reason we couldn't have started with FP
[06:58:17] <Inst> someone on FP discord
[06:58:23] *** Quits: mmhat (~mmh@55d49507.access.ecotel.net) (Quit: WeeChat 3.4)
[06:58:30] <Inst> keeps on talking about the possibility of a machine that can do lambda calculus natively
[06:58:35] <dsal> FP abstractions aren't harder to understand.  They justโฆ exist.
[06:58:35] <Inst> i'm wondering if such a thing is possible
[06:58:38] <Axman6> ther's been a few
[06:58:41] <BrokenClutch> lisp machines
[06:58:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:58:45] *** Joins: remexre (~remexre@user/remexre)
[06:58:47] <Axman6> the reduceron
[06:58:54] <Inst> but are they more performant than equivalent imperative machines?
[06:58:59] <BrokenClutch> no
[06:59:26] <BrokenClutch> Because people didn't put enough time I think, or because FP is bad. I don't think we researched enough.
[06:59:51] *** Joins: alx741 (~alx741@157.100.93.160)
[07:00:08] <Inst> somehow I get the feeling pure and mostly pure functional languages like OCaml / Haskell, etc, are probably best suited to being Python for Ivy Leaguers
[07:00:34] <EvanR> please don't put javascript-level of funding into hardware lambda calculus, until everyone involved in required to write a million lines of code in lambda calculus to make sure it's worth it
[07:00:35] <dsal> I'm not sure anyone knows what that means.  Surely you don't.
[07:00:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:00:54] <EvanR> I say this because something better likely exists and is easier to hardware
[07:00:56] <Inst> I mean that I don't think that FP can displace imperative programming due to the ecosystem lead
[07:01:04] <dsal> python is "easy" to do a small throwaway thing in.  Haskell is easier to write software in than python by far.
[07:01:26] <Inst> Python for Ivy Leaguers -> scripting / prototyping language for smart people
[07:01:52] <Inst> who are smart enough or have the type of intellect necessary to easily grasp the abstractions
[07:02:11] * Axman6 is weaiting for ARM to add a Jazellescript extension to run Javascript natively
[07:02:14] <Axman6> waiting*
[07:02:19] <dsal> I don't use the abstractions because I'm smart -- I use them because I'm dumb.
[07:02:46] <Inst> but it takes a lot of intelligence to actually grasp the abstractions, no?
[07:02:54] <EvanR> I use abstractions because they're cool
[07:02:59] <Axman6> Inst: Facebook use Haskell for the whole spam filtering system, and specifically use it for people who aren't primarily programmers 
[07:03:28] *** Joins: Everything (~Everythin@37.115.210.35)
[07:03:38] <Inst> I use abstractions because I'm mentally disturbed and have a weird subjective experience when facing difficult ideas
[07:03:39] <dsal> You don't have to immediately grasp *every* abstraction, but my experience with people doing imperative languages is that they just reinvent the abstractions in every function, but are more creative with bugs.
[07:04:13] <Inst> as in, to make it worksafe, abstractions, ideas, etc, get me high
[07:04:22] <EvanR> some of the abstractions in haskell are just beautiful, if not particularly useful
[07:04:25] <Axman6> Inst: The majority of abstractions we use are _very_ simple - Monad is a good example, understanding the notion of "and then" is pretty easy, but it is also very abstract to learning all the ways it is applicable is difficult, precisely because the abstractions are so simple
[07:04:36] <Inst> yeah i finally understood today and yesterday
[07:04:39] <Inst> why people say monads are hard
[07:04:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:04:48] <Inst> monads as a concept aren't hard, understanding how to use them, on the other hand, is painful
[07:04:49] <EvanR> Functor, Applicative are beautiful and useful though
[07:04:55] <dsal> Oh good.  Maybe you can explain to me why people say monads are hard.
[07:05:06] <Inst> because of poor branding
[07:05:18] <EvanR> monads are basically a meme
[07:05:19] <Inst> think Chevy Nova, which had to be rebranded in Hispanic markets because No Va -> No go
[07:05:24] <Axman6> I think a lot of that poor branding comes from people who don't understand them
[07:05:37] <Inst> rename them glorified boxes
[07:05:43] <EvanR> burritos
[07:05:47] <Axman6> "Monads are just a hack so you can do IO in Haskell" "Monads are just containers"
[07:05:49] <EvanR> night clubs
[07:05:55] <Inst> boxes with methods defined on them that make them predictable and useful
[07:05:57] <Axman6> Inst: how is a function a box?
[07:06:02] <Inst> actually
[07:06:03] <EvanR> don't ask that
[07:06:03] <Inst> in Chinese
[07:06:04] <Axman6> how is State a box?
[07:06:14] <Inst> functional literally means "contains numbers"
[07:06:25] <EvanR> "_ is a box because imagine a box with a button that when pressed, _ pops out"
[07:06:26] <Inst> erm, is literally composed of the word for container and numbers
[07:06:42] <EvanR> imagine an analogy in a box
[07:06:50] <Inst> imagine an analogy in an analogy
[07:06:59] <Axman6> you can join those analogy
[07:07:01] <Inst> why I love Haskell part 2323: I find recursion intrinsically hilarious
[07:07:04] <Axman6> therefore analogies are monads
[07:07:25] <EvanR> recursion is punk rock
[07:07:28] <Axman6> analogies*
[07:07:42] <Axman6> Imagine only being able to use loops, how pleb is that?
[07:08:17] <Inst> "Monads are strictly a typeclass in Haskell, for which types can be made instances of the Typeclass Monad by defining return/pure and >>= (or join), <*>, and fmap"
[07:08:30] <Axman6> "But I wanna look at both branches of the tree" "NO! You must add a data structure that represents the call tree you really wanted!"
[07:08:40] <Inst> see, I pissed off people on FP
[07:08:45] <Inst> by arguing that recursion is a form of looping
[07:08:48] <jackdk> "The Monad type class is a software engineering pattern to facilitate code reuse."
[07:08:55] <Axman6> looping is a subset of recursion
[07:09:07] <Axman6> jackdk wins
[07:09:18] <Inst> actually, the reason I like the box metaphor
[07:09:21] <jackdk> I just parrot the sayings of people smarter than me
[07:09:28] <Inst> is because boxes can be used in many ways
[07:09:38] <Axman6> the box metaphor is fundamentally wrong
[07:09:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:09:40] <EvanR> if a monad is "just a box", then what is a comonad / cobox
[07:09:54] <EvanR> also yes
[07:09:58] <Inst> so what's wrong with the box / container metaphor?
[07:10:19] <dsal> Like most metaphors, it artificially limits your understanding.
[07:10:24] <EvanR> box / container is often used as an analogy for basically anything or everything
[07:10:24] <Inst> houses are boxes, so are cars, so is clothing, in a way
[07:10:26] <Axman6> a monad is now a box, it a bowl, and because the existance of comonads, we can also program in COBOWL and earn a lot of money in finance
[07:10:26] <Inst> i see
[07:10:30] <jackdk> there is an `instance Monad ((->) r)` and functions are not boxes
[07:10:30] <EvanR> it's lost all meaning
[07:10:36] <Axman6> Inst: how is a function a box
[07:10:36] <dsal> Especially bad for monad because if it's a box, then you'd think you'd be able to take something out of it, but you can't take a value out of a monad.
[07:10:40] <dsal> (generally)
[07:10:48] <Inst> Axman6: are you making a sincere inquiry into Chinese?
[07:10:54] <Inst> ๅฝๆฐ
[07:11:16] <EvanR> functions are often explained as a black box
[07:11:25] <EvanR> with input and output
[07:11:27] <Inst> contains numbers
[07:11:32] <Axman6> but then you view source and they become white boxes
[07:11:36] <Inst> that's the literal translation, i.e
[07:11:54] <Axman6> I have no idea what you're talking about
[07:11:56] <dsal> I don't think anyone cares about literal translations of Chinese here.
[07:12:03] <Inst> i mean a function is just a list corresponding unique inputs to outputs
[07:12:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:12:24] <EvanR> a box is simultaneously any concept and so not helpful
[07:12:26] <Inst> functions may not have a known source
[07:12:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:12:42] <EvanR> at least people have somehow made it that way
[07:12:45] <Inst> yeah
[07:12:58] <Inst> the course I'm paying people with MMO gold ot take
[07:13:06] <Inst> monads are introduced on the first problem set
[07:13:17] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[07:13:24] <Inst> discussed briefly at the end of the second lesson
[07:13:28] <EvanR> Functor is a better type class to introduce first
[07:13:41] <dsal> Inst: You seem to understand things so poorly, I'm curious what you feel you have to offer.
[07:13:47] <Inst> the problem with Whitington's book is that he makes Haskell very
[07:13:49] <Inst> see, dsal :)
[07:14:12] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5087:9b0e:bd55:ec33) (Remote host closed the connection)
[07:14:21] <EvanR> I'm taking all this whitington publicity very negatively
[07:14:24] <Axman6> Inst: I must say, it is very frustrating trying to help someone who both claims to know very little, but also ignores any and all advice to try and change that
[07:14:25] <Inst> why?
[07:14:41] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5ce7:d67c:9eeb:3f76)
[07:14:45] <Inst> I'm familiar with the definition of Monads as "an abstraction to facilitate software reuse"
[07:15:05] <EvanR> boxes also do that, at least in UML
[07:15:07] <Inst> What I didn't finish
[07:15:08] <Axman6> We're here to help you and anyone else who wants it, but at this point you're wasting our time because you haven't listened to a thing we've said
[07:15:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[07:15:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:15:37] <Inst> was that saying that it's of interest to me because apparently my understanding of monads is too incomplete to teach it, even as an introduction
[07:15:49] <EvanR> yeah probably
[07:15:56] <EvanR> the monad tutorial fallacy and all
[07:16:02] <dsal> But why are you even considering teaching things you don't understand yet?
[07:16:12] <Inst> it gives me an incentive and target to learn
[07:16:17] <Inst> erm, goal, for learning
[07:16:24] <EvanR> your game theory is interesting
[07:16:40] <EvanR> you get points for teaching the course, but don't lose any for teaching it really bad?
[07:16:59] <Inst> originally I was hoping to get someone to supervise it, i.e, treat it as a hybrid seminar
[07:17:19] <Inst> obv i realize my computer science knowledge isn't sufficient, so i'd ask someone to review lesson plans and to watch
[07:17:43] <Inst> not sure, still have Dad (if he's going to live much longer), some cousin at Microsoft, but neither know Haskell
[07:18:15] <EvanR> you might want to try getting help with haskell online
[07:18:17] <EvanR> somewhere
[07:18:22] <Axman6> I think you'll find the learning process much easier if you actually listen to the answers to the questions you ask
[07:18:33] <Inst> like, that my interpretation of monads was wrong?
[07:18:33] <dsal> You have to go through the effort of learning all the parts before suggesting that it's being taught incorrectly, though.  I liked the order of HPFFP.  I don't even remember when IO was introduced, but List was like, Chapter 14.
[07:18:49] <Inst> it was a hypothesis, one that I'm beginning to question
[07:19:14] <dsal> The way I learned Monads was to stop trying to learn Monads and just work with lots of different Monads until I started reaching for common tools.
[07:19:16] <Inst> that, since Haskell doesn't have loops, classes, etc, it might be possible to get to IO faster, but experientially, I'd either have to have ass it with libraries
[07:19:21] <Inst> yeah, I know
[07:19:42] <Inst> with my previous programming experience, I sort of gave up because I couldn't do IO fast enough
[07:19:45] <dsal> IO is the dirtiest part.  I don't know why you'd want to hurry up and get tehre.
[07:19:45] *** Quits: td_ (~td@94.134.91.122) (Ping timeout: 256 seconds)
[07:19:51] <Axman6> like, we have literally solved the problem you were running into with using IO and Maybe several times, and you seem to have wholy ignored all of them. when we point out what you're doing wrong, you just ignore it. when we ask you questions to push you in the right direction, you don't answer. We've been doing this for a very long time, we're not just taking wild stabs in the dark, we know how to help you learn, but you are the most important in doing that
[07:20:03] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[07:20:23] <Inst> Axman: are you talking FP discord or here?
[07:20:33] <Axman6> here
[07:20:55] <Inst> I'm not communicative
[07:21:03] <Inst> I think you guys were helpful and supportive and I couldn't have done it without you
[07:21:24] *** Joins: td_ (~td@94.134.91.82)
[07:21:38] <Inst> I guess I had implicit conditions I never explained properly, and I was probably not even aware of them
[07:21:44] <Inst> like, the ideal was to use bind to do everything for me
[07:22:00] <Axman6> bind isn't magic, it does what its type says
[07:22:02] <Inst> finally explaining not to treat Maybe as a monad
[07:22:07] *** Joins: zebrag (~chris@user/zebrag)
[07:22:25] <Inst> except that bind isn't apparetnly going to switch types constantly
[07:22:35] <dsal> Monads are also functors, and IMO, functor is easier to understand and what you actually needed in the examples you showed.
[07:22:37] <Axman6> no, and its type doesn't claim to
[07:22:47] <Axman6> :t (>>=)
[07:22:48] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[07:22:52] <Axman6> all the same m
[07:23:03] <Axman6> m is IO, or m is Maybe, it is never both(*)
[07:23:16] <Inst> I apologize for being aggravating
[07:23:20] <dsal> Functions are concrete.  If you're using a function defined in a type class, the concrete type is selected so a specific function is called.
[07:23:47] <edwardk> MaybeT IO.... *runs and hides*
[07:24:35] <Axman6> you activated my (*) card!
[07:25:04] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5ce7:d67c:9eeb:3f76) (Remote host closed the connection)
[07:25:04] <Inst> EvanR, btw, the point about Whitington is that that can be arguably why his book is bad
[07:25:15] <Inst> he teaches you how to use monads, but never explains the concept or what a monad is
[07:25:16] <EvanR> yeah that's what I'm getting
[07:25:21] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5087:9b0e:bd55:ec33)
[07:25:28] <Inst> then leaves you with a "we never explained monads" as a teaser at the end
[07:25:40] <Inst> I'm familiar with the monad tutorial fallacy, but that sort of drives people to get monads
[07:25:50] <Inst> the way he teaches everything else, though, it just seems so simple, creating perhaps a false overconfidence
[07:26:03] <Inst> then again, the last term is a double negative, no?
[07:26:21] <Inst> the other benefit, imo, is that his book seems problem set driven, and I like teaching methods that rely on that
[07:27:08] <Axman6> I've found that this article/video works quite well at conveying the concept on what a monad means, by using a more familiar (Ruby) syntax: https://tomstu.art/refactoring-ruby-with-monads
[07:27:37] *** Joins: alx741 (~alx741@157.100.93.160)
[07:27:40] <Inst> that said
[07:27:44] <Inst> in FP discord
[07:27:50] <lechner> Axman6: thanks for earlier! i was actually having a problem with vector but i think i got it know
[07:27:57] <Inst> I had a bleeding urge to teach Haskell (recursion, etc)
[07:28:12] <Axman6> it's not perfect, but I think it does a good job of showing that three very different types (things which might eb null, lists, futures) all have a common shape and a reasonable meaning for an `andThen` method, and that is exactly what >>= is
[07:28:13] <Inst> I was sort of desperate for anyone who found Haskell fun, and some Lisper asked me to teach Monads to them
[07:28:23] <Inst> which I did using the typeclass definition, under others' supervision
[07:28:40] <Axman6> lechner: no worries, I miss getting to use haswl :(
[07:28:43] <Axman6> hasql*
[07:28:58] <Inst> functor is just a typeclass for which fmap is defined, which allows you to apply a function to the inside of a functor type
[07:29:19] <Axman6> that's probably not too far off
[07:29:24] <Inst> applicative is just a typeclass for which pure and <*> are defined, with (I used the Hutton book to get what I thought was an acceptable understanding of Monads)
[07:29:32] <Inst> the intuition being to find ways to fmap multiple arguments
[07:29:43] <Axman6> we often talk about lifting a function into some context. so fmap takes (a -> b) and gives us back (f a -> f b)
[07:29:47] <Inst> monads share pure with applicative, but have bind, which is defined as a composition of join and fmap
[07:29:56] <Inst> context, tbh, is the standard term, i think?
[07:29:59] <EvanR> Applicative can have effects, Functor can't
[07:30:00] <Inst> boxes are bad because metaphors are bad
[07:30:07] <Inst> but context is abstract and hard to understand
[07:30:07] <Axman6> that context can mean many things, for Maybe, it means applying that function, if you had a Just or returning Nothing if you had a Nothing
[07:30:11] <Inst> what does context mean in this context?
[07:30:37] <Axman6> for IO, it means apply that function to the result of that IO action when it is executed. for list, it mean apply that function to every element of that list
[07:30:40] <Inst> which specific context are you talking about? In the context of the lesson? In the context of the learner? In the context of the program? In the context of the language?
[07:30:57] <Inst> the way I understand it, and for me this is more concrete
[07:31:10] <Inst> computations done on something which has a data constructor on it
[07:31:15] <Inst> or should I say type constructor?
[07:31:35] <Inst> what is a data constructor? A data constructor is a component of a type which can encapsulate another type
[07:31:44] <Inst> and iirc, playing around with it
[07:31:56] <Inst> i was able to find cases where you could have a functor defined but not an applicative / monad
[07:32:06] <Inst> someone mentioned to me a case where a functor couldn't be defined
[07:32:10] <Axman6> again, what data constructor do functiosn have? functions are also Functors
[07:32:42] <Inst> that's why i'm having difficulty understanding state monads, i.e, i'm unfamiliar with types composed of a data / type constructor imposed on a function
[07:33:00] <Axman6> yes, there are plenty of places where Fonctor can't be defined, but the type looks like the right shape
[07:33:32] <Inst> from LYAH (RIP), something something left hand of data declaration, type constructors, right side, data/value constructors
[07:33:38] <Axman6> newtype Predicate a = Predicate (a -> Bool) -- Can't define Functor for this, there is no function with type (a -> b) -> Predicate a -> Predicate b
[07:34:04] <Inst> iirc, the terminology used was that a has to be positive, i.e, (Bool -> a) is valid
[07:34:10] <Inst> I don't understand what positive means
[07:34:11] <EvanR> State s a = s -> (a, s)
[07:34:14] <Axman6> yep
[07:34:32] <Axman6> well, in this case, a is in negative position, you need to feed in an a, you're not producing one
[07:34:58] <Inst> yeah, i can get a rough intuition, although the idea of being able to apply data constructors onto functions is weird
[07:35:02] <Inst> it has to result in a polymorphic type
[07:35:19] <Inst> and iirc that was what the discussion turned out into
[07:35:23] <jackdk> https://youtu.be/JZPXzJ5tp9w?t=484 George Wilson on positive/negative positions (aside from a longer but also good talk)
[07:35:31] <Axman6> one of the very few things I like about scala is that is has a way to say that a type is in negative or positive (or... invariant?) position
[07:35:38] <EvanR> newtype Endo a = Endo (a -> a)
[07:35:42] <Inst> the one mystery i'm really interested in regarding monads / applicatives / functors
[07:35:48] <EvanR> not mind blowing
[07:35:53] <Axman6> there's always a good George Wilson talk
[07:36:10] <Inst> is how can an applicative not be reducible to a monad?
[07:36:38] <Inst> like, I can't think of examples wherein applicatives can't be turned into monads because there's no way to define a join
[07:37:02] <Axman6> Const a b is an applicative (if a is a Monoid), but can't be made a Monad
[07:37:21] <Axman6> daya Const a b = Const a
[07:37:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:37:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:37:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:37:33] <Inst> /s/daya/data
[07:37:39] <Axman6> yes
[07:38:01] <Inst> i guess it's because i don't understand type constructors
[07:38:02] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:38:39] <Inst> or rather, in that case
[07:38:41] <EvanR> constructors in general?
[07:38:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:38:53] <Inst> constructors are functions that take a value into another type
[07:39:01] <EvanR> imagine Const x being a heap object with x in it
[07:39:08] <Inst> I don't understand the notion of heap
[07:39:09] <EvanR> like... a box
[07:39:12] <jackdk> Inst: this type has no valid `Monad` instance, because it will not satisfy `(<*>) = ap` https://www.irccloud.com/pastebin/1sjEEDOV/Validation.hs
[07:39:14] <Inst> or rather heap object
[07:39:22] <EvanR> are you sure
[07:39:26] <Axman6> the exercise is to try to implement Functor, Applicative and Monad for Const. instance Functor (Const b) where fmap f (Const a) = ???; instance Monoid a => Applicative (Const a) where (Const l) <*> (Const r) = ???
[07:40:14] <Inst> i'm guessing what goes wrong with Const a b = Const a
[07:40:28] <Inst> is that you can't fully nest Const a b within Const a b
[07:40:30] <Inst> because there is no b
[07:40:44] <dsal> It's unclear what you  mean by that.  There's a b
[07:40:53] <EvanR> the question is why you can't write a law abiding monad instance, not whether you can't write an instance
[07:40:54] <Axman6> so, to be clear, in data Const a b = Const a, something of type Const Int Bool is something which contains an Int but no Bool
[07:40:55] <Inst> there's no b in the data constructor side
[07:40:59] <Inst> ah, i see
[07:41:37] <Axman6> Const 7 :: Const Int Bool (or also Const Int String, or Const Int (IO ()))
[07:41:48] <Inst> and if you pure it?
[07:42:05] <Axman6> using the GADT syntax, you might say data Const a b where Const :: a -> Const a b
[07:42:45] <Axman6> pure :: Monoid m => a -> Const m a
[07:42:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:43:33] <Axman6> (this is one of two reasons why we need the Monoid constraint on the a in Applicative (Const a) - without it, or something equivalent, it's impossible)
[07:43:57] <Inst> i barely have an understanding of monoids, i.e, a type for which a binary associative operator is defined
[07:44:05] <Axman6> @src Monoid
[07:44:05] <lambdabot> class Monoid a where
[07:44:05] <lambdabot>     mempty  :: a
[07:44:05] <lambdabot>     mappend :: a -> a -> a
[07:44:05] <lambdabot>     mconcat :: [a] -> a
[07:44:13] <Axman6> ignore mconcat
[07:44:47] <Inst> i.e, convenience method, not actually part of the definition, since it's requiring list
[07:44:52] <Axman6> mempty is a well known name for the "zero" or identity element of the monoid
[07:45:06] <Axman6> for lists it's []
[07:45:08] <Inst> also an id element
[07:45:28] <Axman6> mempty is the identity element for that particular a
[07:45:55] <Axman6> so, you can always create an a if a is a monoid, and the specific a you create will be the identity for that monoid
[07:46:12] <Inst> mappend, i'm guessing that's the associative binary operator
[07:46:19] <Axman6> yep
[07:46:28] <Axman6> > mappend [1,2,3] [4,5,6]
[07:46:29] <lambdabot>  [1,2,3,4,5,6]
[07:46:44] <Axman6> > mappend [1,2,3] mempty
[07:46:45] <lambdabot>  [1,2,3]
[07:46:51] <Axman6> > mappend mempty [1,2,3]
[07:46:52] <lambdabot>  [1,2,3]
[07:47:01] <EvanR> > mappend mempty mempty
[07:47:03] <lambdabot>  ()
[07:47:05] <EvanR> lol
[07:47:08] <Inst> actually, i'll ask the question that'll make me sound stupid
[07:47:13] <Inst> and this is why i'm so annoying
[07:47:16] <Inst> what is ap?
[07:47:20] <dsal> :t ap
[07:47:21] <lambdabot> Monad m => m (a -> b) -> m a -> m b
[07:47:44] <Axman6> ap is the same as Applicative's <*> but is the older name from before Applicatives had been discovered
[07:47:52] <Inst> but if you can't define a <*>
[07:48:15] <Inst> you can't define an applicative, so const a b being unmonadable
[07:48:21] <Inst> can't be a result of <*> = ap failure
[07:48:40] <Axman6> you can define an Applicative instance for Const, but you cannot define a Monad instance
[07:48:52] <Inst> but Const lacks an <*> / ap?
[07:48:59] <Axman6> no, it doesn't
[07:49:37] <Axman6> you can define (<*>) :: Const x (a -> b) -> Const x a -> Const x b, as long as x is a Monoid
[07:50:06] <Inst> so how does Const a b = Const a fail to be definable as a monad?
[07:50:16] <Axman6> (Const l) <*> (Const r) = ???
[07:50:41] <Inst> oh, I see what you mean, that it'd fail the monad laws
[07:50:53] <Axman6> because we need to define (>>=) :: (Const x a) -> (a -> Const x b) -> Const x b - to create that Const x b, we _need_ an a
[07:51:17] *** Quits: shapr (~user@2601:7c0:c202:5190:5625:d6db:b1c1:a272) (Ping timeout: 240 seconds)
[07:51:24] <EvanR> I guess you don't even get to the defense of the monad laws
[07:51:30] <EvanR> nothing to defend
[07:51:37] <Axman6> how many a's does something of type Const x a contain?
[07:51:47] <Inst> only one
[07:51:52] <Axman6> try again
[07:52:02] <Axman6> data Const x a = Const x
[07:52:05] *** Quits: jiribenes_ (~jiribenes@rosa.jiribenes.com) (Ping timeout: 252 seconds)
[07:52:09] <Inst> ah
[07:52:16] <EvanR> a is phantom
[07:52:22] <Axman6> spooky
[07:52:39] <Inst> see, the real problem i guess i have, is that i don't understand monads in terms of >>=
[07:52:46] <Inst> >>= I just translate to composite of join and fmap
[07:52:56] <EvanR> that's all it is
[07:53:06] <Axman6> you can try defining join instead
[07:53:19] <Axman6> join :: Const x (Const x a) -> Const x a
[07:53:21] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[07:53:33] <Inst> that was my intuition
[07:53:43] <Inst> that the phantom a was blocking things
[07:53:47] <Axman6> you _can_ define that but it won't be lawful
[07:54:41] *** Joins: alx741 (~alx741@157.100.93.160)
[07:55:01] <Axman6> now I'm struggling to remember why
[07:55:07] <Inst> sorry
[07:55:12] <Inst> axman6, thank you for your time
[07:55:16] <Inst> i hope you got something out of it
[07:55:31] <Axman6> it;s alwaysd good to go over the basics
[07:55:34] <jackdk> Axman6: `join . pure = id`, which sets `x = mempty`
[07:55:42] <Inst> do you still teach intro haskell at ANU?
[07:55:48] <Axman6> like learning how to type, one day I will learn the basics of that
[07:55:57] <Inst> I hope at least, having to deal with someone as dense as me, can at least help you get your dumber students a C
[07:56:03] <Axman6> No, if I had more time I would like to
[07:56:19] <jackdk> that was terse. `join . pure` should be `id`, but `join . pure` for your unlawful `Const x` will always give you `Const mempty`.
[07:56:25] <Axman6> particularly is jackdk was around and we could do it together. what a dream team
[07:56:45] <jackdk> I would have so much fun, but I'm elsewhere these days
[07:57:35] <Inst> i might be able to pay, but depends on finances i guess
[07:57:40] <Inst> like i said, i need a supervisor
[07:58:11] <Inst> i was trying to get my lady friend a city university (as in, the university run by the city, not Columbia) of New York professor to see if she'd be willing to supervise independent study
[07:58:16] <Axman6> We're all here to help for free, 24ish hours a day
[07:58:18] <Inst> and she ran off to python :(
[07:59:14] <Inst> so, to recap
[07:59:17] <Axman6> Inst: while I remember, I would highly recommend reading https://tomstu.art/refactoring-ruby-with-monads, I think you're at a good stage to have it make a positive impact
[07:59:18] <Inst> and i'm sorry for my partial understanding
[07:59:32] <Inst> i don't know any other programming languages (in a strict sense)!
[07:59:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:00:25] <Inst> to recap, a type / data constructed type cannot be a functor if the type variable is not positive (i.e, at the very end)
[08:01:28] <Inst> an functor  cannot be an applicative if no meaningful pure can be defined on it (data Useless a = Useless Int)
[08:01:53] <Inst> an applicative cannot be a functor if it's carrying a phantom value
[08:01:57] <EvanR> Useless isn't
[08:02:04] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5087:9b0e:bd55:ec33) (Remote host closed the connection)
[08:02:04] <EvanR> phantom types can rock
[08:02:19] <Inst> it's a pun on applicative
[08:02:21] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5ce7:d67c:9eeb:3f76)
[08:02:23] <dsal> An applicative is a functor.
[08:02:34] <Inst> erm
[08:02:36] <Inst> not applicative
[08:02:43] <Inst> an applicative cannot be a monad if it's carrying a phantom value
[08:02:46] <Axman6> useless can definitely have a meaningful pure, and (<*>)
[08:02:52] <Inst> oh derp
[08:02:57] <Axman6> it's not very useful though
[08:03:00] <dsal> ST is a monad with a phantom type.
[08:03:07] <Inst> i see
[08:03:55] <Inst> if the phantom type is positive?
[08:05:23] *** Joins: deadmarshal (~deadmarsh@95.38.116.69)
[08:05:55] <Axman6> phantom types are neither positive or negative
[08:06:05] <Inst> yeah, i'm being stupid
[08:06:48] <Axman6> data TaggedFunc c a b = Funct (a -> b) -- what are the "signs" of a, b and c?
[08:07:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:07:44] <Inst> b is positive, a is negative, c is phantom (none)
[08:07:51] <Axman6> correct
[08:08:00] <Inst> sorry, ANU is an elite school
[08:08:15] <Inst> you guys have a research tieup with Trina Solar
[08:08:45] <Inst> which is iirc the largest solar manufacturer in the world, or at least in china, which produces the majority of the world's solar panels
[08:09:13] <dsal> I have solar panels.  They run Haskell code.
[08:09:18] <Inst> by that, i'm implying, you're very smart, you're the type that doesn't suffer idiots too gladly (i assume, but more gladly than dsal), and you have a teaching method adapted for ANU
[08:10:19] <EvanR> don't worry, my shrine to all idiots is burning bright
[08:10:25] *** Joins: mbuf (~Shakthi@122.174.247.3)
[08:11:17] <Inst> philosophically, I'm oriented toward the idea that the world is full of idiots, the world is majority idiot, and making them less idiotic makes the rest of the world better off
[08:11:31] <Inst> so thank you again
[08:17:25] *** Quits: xff0x (~xff0x@2001:1a81:53e7:b00:1d48:798f:68c9:16a8) (Ping timeout: 240 seconds)
[08:17:27] *** Joins: alx741 (~alx741@157.100.93.160)
[08:18:22] *** Joins: xff0x (~xff0x@2001:1a81:53e7:b00:98d2:e416:e1d0:8927)
[08:21:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:22:12] * Axman6 sorry for going quiet, we have sprint planning
[08:25:49] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[08:29:44] <EvanR> is there a slick way to make sure everything in a Data.Vector is evaluated (to WHNF)
[08:30:35] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 252 seconds)
[08:31:01] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[08:31:45] <Axman6> :t foldl seq
[08:31:46] <lambdabot> Foldable t => a -> t a -> a
[08:31:50] <Axman6> :t foldl seq ()
[08:31:51] <lambdabot> Foldable t => t () -> ()
[08:32:24] *** Joins: phma (phma@2001:5b0:210f:5ed8:55ac:926f:b49e:dcfb)
[08:33:05] * EvanR squints
[08:33:44] <EvanR> interesting
[08:33:51] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:34:54] <Axman6> wait
[08:35:04] <Axman6> :t foldl (flip seq) ()
[08:35:06] <lambdabot> Foldable t => t a -> ()
[08:35:09] <Axman6> that one
[08:35:54] <EvanR> > foldl (flip seq) () [1,2,error "bomb",4]
[08:35:55] <lambdabot>  *Exception: bomb
[08:36:01] <EvanR> > foldl seq () [1,2,error "bomb",4]
[08:36:02] <lambdabot>  error:
[08:36:02] <lambdabot>      โข No instance for (Num ()) arising from the literal โ1โ
[08:36:02] <lambdabot>      โข In the expression: 1
[08:37:44] <EvanR> > foldl (flip seq) () [1,2,error "๐ฃ๐ฃ๐ฃ",4]
[08:37:45] <lambdabot>  *Exception: ๐ฃ๐ฃ๐ฃ
[08:37:49] <EvanR> oh yes
[08:38:11] <EvanR> TOS style
[08:38:36] *** Joins: alx741 (~alx741@157.100.93.160)
[08:39:17] *** Quits: xff0x (~xff0x@2001:1a81:53e7:b00:98d2:e416:e1d0:8927) (Ping timeout: 240 seconds)
[08:40:34] *** Joins: xff0x (~xff0x@2001:1a81:53e7:b00:62fc:8f05:5cf7:41b5)
[08:45:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:45:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:45:59] *** Joins: wroathe (~wroathe@user/wroathe)
[08:46:41] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:51:26] <jackdk> % :t rnf
[08:51:26] <yahb> jackdk: ; <interactive>:1:1: error: Variable not in scope: rnf
[08:51:44] <jackdk> https://hackage.haskell.org/package/deepseq-1.4.6.1/docs/Control-DeepSeq.html#v:rnf this one
[08:52:05] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[08:52:26] <jackdk> ah, no NFData instances
[08:52:41] *** Joins: Jing (~hedgehog@115.207.57.60)
[08:54:32] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[08:56:15] <lechner> Axman6: What do you use now (instead of hasql) please? 
[08:57:01] <EvanR> full normal form seems a bit brutal though
[08:57:57] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:58:02] *** Joins: monochrom (trebla@216.138.220.146)
[08:58:45] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[09:00:10] *** Quits: monochrom (trebla@216.138.220.146) (Client Quit)
[09:00:23] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[09:01:05] <dsal> EvanR: It's helpful in benchmarks sometimes.
[09:01:58] <EvanR> I can see that
[09:03:39] *** Joins: alx741 (~alx741@157.100.93.160)
[09:07:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:09:36] <EvanR> and this is awkward xD https://paste.tomsmeding.com/YX8lax0h
[09:12:13] *** Quits: mikail_ (~mikail@94.1.27.214) (Ping timeout: 240 seconds)
[09:12:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:17:37] <Axman6> lechner: DAML =)
[09:22:57] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[09:23:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[09:24:04] <Axman6> EvanR: curious what this is actually a part of
[09:24:48] *** Joins: alx741 (~alx741@157.100.93.160)
[09:29:27] <EvanR> mad science at this point, I'll keep you apprised
[09:29:30] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:1f95:fc24:559b:d565)
[09:29:38] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:29:48] <Axman6> mad science -> science -> technology -> normality
[09:30:09] <Axman6> how crazy was the idea of Google thirty years ago
[09:32:25] <Axman6> it's kinda satisfying those lines are same length
[09:33:51] <EvanR> fixed width fonts vindicated
[09:35:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:47:19] *** Joins: alx741 (~alx741@157.100.93.160)
[09:50:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:51:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:56:29] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:57:32] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[09:59:43] *** Joins: monochrom (trebla@216.138.220.146)
[10:00:34] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[10:03:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Ping timeout: 240 seconds)
[10:05:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:09:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[10:09:52] *** Joins: alx741 (~alx741@157.100.93.160)
[10:13:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:13:37] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:1f95:fc24:559b:d565) (Ping timeout: 240 seconds)
[10:23:58] <Inst> anyone else read Haskell in Depth?
[10:24:17] <Inst> "member of the GHC steering committee"
[10:31:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:35:17] <Axman6> @hoogle unsafeInterleveIO
[10:35:17] <lambdabot> No results found
[10:36:01] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Quit: nunggu)
[10:37:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:46:41] <Axman6> edwardk: I got the memoisation working and it does actually perform as I'd expect :tada:
[10:47:50] <Axman6> I can't figure out if using `unsafeDupablePerformIO` is safe in its definition though, since the implementations of the Group might not run atomically
[10:47:51] *** Joins: alx741 (~alx741@157.100.93.160)
[10:50:58] *** Quits: califax (~califax@user/califx) (Quit: ZNC 1.8.2 - https://znc.in)
[10:51:18] *** Joins: califax (~califax@user/califx)
[10:57:03] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:03:12] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:04:02] *** Joins: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl)
[11:04:44] *** Joins: `2jt (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[11:05:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:05:30] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5ce7:d67c:9eeb:3f76) (Remote host closed the connection)
[11:08:21] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:21:18] *** Joins: alx741 (~alx741@157.100.93.160)
[11:22:30] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:23:07] *** Quits: phma (phma@2001:5b0:210f:5ed8:55ac:926f:b49e:dcfb) (Read error: Connection reset by peer)
[11:24:20] *** Joins: phma (phma@2001:5b0:215a:cac8:aefe:d82b:57fb:72c6)
[11:26:39] *** Joins: simendsjo (~user@84.211.91.241)
[11:29:17] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:31:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:34:52] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:41:35] <edwardk> i always assume that the code will be invoked from one thread at a time because its used mostly to build up single threaded promise code
[11:41:40] <edwardk> nothing i do races myself
[11:42:02] <edwardk> so i think unsafeDupablePerformIO should just work
[11:44:38] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:44:56] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:47:15] *** Joins: alx741 (~alx741@157.100.93.160)
[11:53:50] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:53:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:54:17] *** Quits: xff0x (~xff0x@2001:1a81:53e7:b00:62fc:8f05:5cf7:41b5) (Ping timeout: 240 seconds)
[11:55:21] *** Joins: xff0x (~xff0x@2001:1a81:53e7:b00:4627:8ffd:144:30b1)
[11:55:30] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:57:08] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:59:20] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[12:01:26] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[12:01:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[12:02:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:04:31] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[12:05:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:06:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:10:07] <xerox> ls /tmp/ | grep cabal-repl | wc -l  ==>  222  is this something fishy or is this normal
[12:12:03] *** Joins: alx741 (~alx741@157.100.93.160)
[12:12:16] <c_wraith> looks normal to me
[12:12:24] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c365:2459:70e0:4fac)
[12:12:35] *** Joins: chele (~chele@user/chele)
[12:12:53] <c_wraith> maybe cabal should clean that up on exit.
[12:14:23] <c_wraith> but linux distributions tend to come with rules for cleaning out the contents of /tmp
[12:14:45] *** Quits: Jing (~hedgehog@115.207.57.60) (Quit: My MacBook has gone to sleep. ZZZzzzโฆ)
[12:17:37] *** maerwald- is now known as maerwald
[12:17:50] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[12:17:50] *** Joins: maerwald (~maerwald@user/maerwald)
[12:18:46] *** Joins: benin (~benin@183.82.176.241)
[12:19:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:21:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:21:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:21:36] *** Joins: wroathe (~wroathe@user/wroathe)
[12:22:10] *** Joins: retroid_ (~retro@5ec2ec1d.skybroadband.com)
[12:24:26] *** Joins: retro_ (~retro@5ec2ec1d.skybroadband.com)
[12:26:11] *** myme1 is now known as myme
[12:26:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:27:20] *** Quits: retroid_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:29:56] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Read error: Connection reset by peer)
[12:32:55] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:33:34] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[12:35:21] *** Quits: retro_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:36:31] *** Joins: retroid_ (~retro@5ec2ec1d.skybroadband.com)
[12:36:54] <merijn> /tmp/ is normally wiped on reboot anyway
[12:37:07] <merijn> and some systems on logout or something along those lines
[12:37:29] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de)
[12:37:29] *** Joins: acidjnk (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de)
[12:38:04] <merijn> Argument for not wiping them could be to speed up repeated repl on an unchanged project
[12:39:35] *** Joins: alx741 (~alx741@157.100.93.160)
[12:41:31] *** Quits: retroid_ (~retro@5ec2ec1d.skybroadband.com) (Ping timeout: 268 seconds)
[12:43:16] *** Joins: mcglk (~mcglk@131.191.49.120)
[12:45:02] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Ping timeout: 240 seconds)
[12:45:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:46:38] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[12:48:22] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[12:48:54] <[exa]> user sessions getting all their own tmpfs /tmp/ mounts is pretty much standard now, right?
[12:50:42] *** Joins: retro_ (~retro@2e40edd9.skybroadband.com)
[12:51:23] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 268 seconds)
[12:54:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[12:55:49] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (Ping timeout: 240 seconds)
[12:58:41] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[12:59:57] *** Joins: matijja (~matijja@193.77.181.201)
[13:00:05] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 630 seconds)
[13:01:15] *** Joins: biog (~user1@159.224.42.85)
[13:01:39] *** Joins: alx741 (~alx741@157.100.93.160)
[13:06:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:13:06] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:13:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:13:38] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:15:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:17:13] *** Joins: zyzek (~zyzek@user/zyzek)
[13:23:25] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[13:24:25] *** Joins: alx741 (~alx741@157.100.93.160)
[13:24:27] *** Joins: xkuru (~xkuru@user/xkuru)
[13:26:16] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[13:26:56] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:28:18] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Quit: leaving)
[13:28:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:29:18] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:31:06] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:32:22] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[13:33:07] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:9b:7099:7b8a:3b4d)
[13:33:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[13:35:03] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[13:36:46] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[13:37:04] *** Joins: matijja (~matijja@193.77.181.201)
[13:41:28] *** Quits: drdo (~drdo@144.172.69.89) (Quit: The Lounge - https://thelounge.chat)
[13:41:44] *** Joins: drdo (~drdo@144.172.69.89)
[13:46:56] *** Joins: alx741 (~alx741@157.100.93.160)
[13:47:50] *** Quits: drdo (~drdo@144.172.69.89) (Quit: The Lounge - https://thelounge.chat)
[13:48:05] *** Joins: drdo (~drdo@144.172.69.89)
[13:48:08] *** Joins: biberu\ (~biberu@user/biberu)
[13:49:15] *** Quits: drdo (~drdo@144.172.69.89) (Client Quit)
[13:49:30] *** Quits: emergence (~emergence@vm0.max-p.me) (Quit: Ping timeout (120 seconds))
[13:49:55] *** Joins: pavonia_ (~user@user/siracusa)
[13:50:05] *** Joins: emergence (~emergence@vm0.max-p.me)
[13:50:06] *** Quits: sus (zero@user/zeromomentum) (Read error: Connection reset by peer)
[13:50:17] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 240 seconds)
[13:50:17] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[13:50:17] *** Quits: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 240 seconds)
[13:50:19] *** Joins: sus (zero@user/zeromomentum)
[13:50:22] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[13:50:41] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[13:50:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:50:57] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 240 seconds)
[13:51:05] *** pavonia_ is now known as pavonia
[13:51:17] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 240 seconds)
[13:51:17] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[13:51:38] *** biberu\ is now known as biberu
[13:51:51] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[13:52:09] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[13:52:24] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[13:53:30] *** Quits: zyzek (~zyzek@user/zyzek) (Remote host closed the connection)
[13:55:09] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (Ping timeout: 256 seconds)
[13:55:17] *** Quits: xff0x (~xff0x@2001:1a81:53e7:b00:4627:8ffd:144:30b1) (Ping timeout: 240 seconds)
[13:55:19] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[13:55:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:57:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:58:11] *** Joins: drdo (~drdo@144.172.69.89)
[13:58:42] *** Joins: xff0x (~xff0x@2001:1a81:53e7:b00:95c4:6090:2048:abcf)
[14:01:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:02:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:02:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:03:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:04:22] *** Lord_of_Life_ is now known as Lord_of_Life
[14:06:29] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[14:08:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:08:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:09:28] *** Joins: alx741 (~alx741@157.100.93.160)
[14:12:29] *** Joins: euouae (~euouae@user/euouae)
[14:12:36] <euouae> Hello
[14:13:42] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:14:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:14:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:17:58] <[exa]> ey hello!
[14:18:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[14:18:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:20:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:20:39] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[14:20:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:21:06] *** Joins: __monty__ (~toonn@user/toonn)
[14:22:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:22:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:22:23] *** Joins: wroathe (~wroathe@user/wroathe)
[14:27:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:28:51] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:9b:7099:7b8a:3b4d) (Remote host closed the connection)
[14:29:04] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:3e40:8797:f0ac:23e)
[14:29:47] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[14:30:26] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[14:30:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:31:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[14:32:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:32:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:33:23] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:37:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:38:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:42:58] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[14:43:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:43:37] <euouae> quick question in the category Hask, is 3 :: Int an arrow () -> Int ?
[14:44:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:04] <euouae> because I'm reading that types are objects of Hask and arrows are themselves
[14:46:00] *** Joins: duckonomy_ (~duckonomy@177.ip-144-217-84.net)
[14:47:01] <geekosaur> categories don't care about values
[14:47:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:47:37] <geekosaur> that said, 3 :: Int is secretly a function, but that function is fromInteger
[14:48:33] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (Ping timeout: 268 seconds)
[14:48:49] <geekosaur> so there is an arrow there but not because it's a value as such
[14:48:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:49:31] *** Joins: alx741 (~alx741@157.100.93.160)
[14:49:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:50:07] <euouae> isn't every arrow in Hask a function of Haskell?
[14:50:17] *** Quits: duckonomy_ (~duckonomy@177.ip-144-217-84.net) (Ping timeout: 240 seconds)
[14:52:23] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[14:52:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:53:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:53:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:53:12] *** Joins: wroathe (~wroathe@user/wroathe)
[14:54:34] *** Joins: cheater (~Username@user/cheater)
[14:54:58] <geekosaur> it is, but the typeclass hackery around numeric values is not an attribute of Hask
[14:56:04] <geekosaur> and a value like 'a' simply doesn't exist from the viewpoint of Hask, it's too low level
[14:56:10] <tomsmeding> euouae: if types are the objects and function types are arrows (that's what you're saying, right?), then _values_ of types aren't things in the category, right?
[14:56:23] <tomsmeding> I think I'm echoing geekosaur in different words
[14:56:32] <euouae> tomsmeding types are objects and arrows are arrow values
[14:56:35] <xsperry> :t 3
[14:56:36] <lambdabot> Num p => p
[14:56:38] <xsperry> how is that a function?
[14:56:42] <tomsmeding> euouae: oh right
[14:56:58] <tomsmeding> xsperry: it's a function that takes a type class dictionary for Num and produces a value
[14:56:59] <geekosaur> you can read => as -> where the first parameter is a dictionary
[14:56:59] <xsperry> :t 3 :: Int
[14:57:00] <lambdabot> Int
[14:57:18] <tomsmeding> \NumDict { fromInteger = f } -> f 3#
[14:57:25] <geekosaur> in this case it pulls the definition of fromInteger out of the dictionary and applies it to the Integer 3 to get the Int 3
[14:58:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:58:12] <xsperry> right. fromInteger (3 :: Integer) :: Int is not a function
[14:58:23] <geekosaur> but fromInteger is
[14:58:31] <xsperry> yes, but 3 is not fromInteger
[14:58:34] <tomsmeding> euouae: so arrows are _function_ values, right? An arrow A -> B is a function of type A -> B; 'Int' is not a function type, so a value of type Int is not an arrow, right?
[14:59:03] <euouae> tomsmeding yeah but the solution is that there are arrows () -> Int
[14:59:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:59:21] <euouae> so e.g. f :: () -> Int, f _ = 3
[14:59:24] <tomsmeding> well yeah, '\() -> 3 :: Int' is an arrow from () to Int
[14:59:37] <geekosaur> but `3 :: Int` is not such an arrow
[14:59:53] <tomsmeding> but '\() -> 3 :: Int' is not the same as '3 :: Int' -- their types aren't even the same :)
[14:59:53] <euouae> ah, I get you now
[14:59:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:00:12] <geekosaur> likewise 'a' is not an arrow () -> Char, it's just a Char value which is not the topic of the category
[15:00:13] <euouae> right, `Hask` is a simplified model of the real thing
[15:00:34] <geekosaur> the very first thing I said, categories do not care about values
[15:01:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:01:37] <geekosaur> simplified in some ways, more complicated in others. I'd say it's a matter of focus rather than simplicity
[15:02:33] <tomsmeding> euouae: and if `f` has an instance of Functor, then `f` corresponds to a functor from Hask to Hask, mapping objects (i.e. types) `T` to `f T` (that's what `f` does in Haskell) and arrows (from `A` to `B`) to arrows (from `f A` to `f B`) (that's what `fmap` does in Haskell)
[15:02:59] <tomsmeding> perhaps I should not have capitalised T there
[15:03:07] <tomsmeding> or meh
[15:03:47] * tomsmeding only half-understands this stuff through repeated attempts at reading introductions in this stuff
[15:04:48] <euouae> from what I've read on type theory, Unit is a type, () :: Unit and that's the only value with that type
[15:05:01] <euouae> so I thought part of the utility of Unit is to pick up "nonarrow" values
[15:05:08] <tomsmeding> and haskell isn't type theory, since:
[15:05:13] <tomsmeding> :t undefined :: ()
[15:05:14] <lambdabot> ()
[15:05:24] <geekosaur> part of the utility of unit is to enable laziness. haskell just does that part for you
[15:06:03] <geekosaur> every non-strict expression e is actually \() -> e
[15:06:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:06:32] <euouae> oh. hm... ok that at least looks like what I had in mind
[15:06:45] <tomsmeding> euouae: A isn't magically the same as Unit -> A, but because there are exactly as many arrows from Unit to A as there are values in A, Hom(Unit, A) is in a sense isomorphic to A
[15:06:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:07] <geekosaur> this is more or less what you do in e.g. javascript to get a lazy value, except they spell it something like function() { e }
[15:07:12] <tomsmeding> haskell then makes everything more complicated because its lazy semantics do stuff like geekosaur said :p
[15:07:56] *** Joins: notzmv (~zmv@user/notzmv)
[15:11:09] <euouae> thanks for the help
[15:11:12] *** Quits: euouae (~euouae@user/euouae) (Quit: got to go)
[15:11:50] *** Joins: equivrel (~user@95.172.236.133)
[15:13:20] *** Quits: equivrel (~user@95.172.236.133) (Client Quit)
[15:15:33] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[15:17:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:17:03] *** Joins: alx741 (~alx741@157.100.93.160)
[15:18:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:37] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:20:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[15:22:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:23:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:23:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:23:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:23:57] *** Joins: wroathe (~wroathe@user/wroathe)
[15:24:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:07] *** Quits: polyphem_ (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a) (Quit: WeeChat 3.3)
[15:26:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:29:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:29:27] *** Joins: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a)
[15:29:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:30:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:36:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:36:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:37:01] *** Quits: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net) (Ping timeout: 240 seconds)
[15:38:31] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:39:04] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[15:41:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:41:49] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:3e40:8797:f0ac:23e) (Ping timeout: 240 seconds)
[15:42:04] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[15:42:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:43:58] *** Joins: sander (~sander@user/sander)
[15:44:35] *** Joins: alx741 (~alx741@157.100.93.160)
[15:45:14] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:2a00:eeaf:f8c:1b54)
[15:45:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:46:31] *** Joins: kuribas (~user@ptr-25vy0i91z2t2xltfc74.18120a2.ip6.access.telenet.be)
[15:48:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:48:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:49:40] *** Joins: mmhat (~mmh@55d49507.access.ecotel.net)
[15:49:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:50:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:54:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:54:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:59:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:00:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:01:58] *** Joins: spaceseller_ (~spacesell@31.147.205.13)
[16:03:02] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[16:05:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:05:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:06:41] *** Joins: alx741 (~alx741@157.100.93.160)
[16:07:12] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[16:07:19] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 256 seconds)
[16:07:29] *** Joins: _ht (~quassel@37.120.218.148)
[16:09:23] *** Quits: spaceseller_ (~spacesell@31.147.205.13) (Quit: Leaving)
[16:11:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:14:02] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[16:15:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:15:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:17:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[16:18:05] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[16:19:52] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:20:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:24:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[16:30:13] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:30:13] *** Quits: acidjnk (~acidjnk@p200300d0c7271e933133c43131ec7c10.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:32:50] *** Joins: alx741 (~alx741@157.100.93.160)
[16:33:14] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[16:36:02] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:39:18] <Boarders_> could anyone tell me how I pass test-arguments to an executable with cabal. I am trying:
[16:39:18] <Boarders_> cabal run my-test -- "--color -m Prelude"
[16:40:23] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[16:42:47] <yushyin> without the quotes it should just work, no?
[16:43:26] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:45:39] <Boarders_> ah, seems good, thanks!
[16:49:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[16:54:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:55:19] *** Joins: spaceseller_ (~spacesell@31.147.205.13)
[16:57:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[16:58:05] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[16:59:54] *** Joins: alx741 (~alx741@157.100.93.160)
[17:01:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[17:01:49] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[17:03:06] <Boarders_> I have a cabal file with field: hspec <2.7.9
[17:03:06] <Boarders_> but when I configure and then generate the freeze file I get hspec==2.8.2, does anyone know why that might be the case?
[17:03:54] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[17:04:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[17:05:09] <merijn> Near impossible to say without seeing the cabal file
[17:07:29] <Boarders_> one moment
[17:07:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:10:17] <Boarders_> merijn: https://gist.github.com/Boarders/8a4897ab4b2e899dc5ad32bee82d55ff
[17:11:00] <merijn> You ran freeze without --enable-tests, didn't you? :)
[17:12:40] <Boarders_> ah, yes!
[17:13:28] <Boarders_> but doing cabal freeze --enable-tests also gives version 2.8.2
[17:13:46] <merijn> Can you show the freeze file?
[17:14:36] <merijn> Boarders_: It is not unlikely the 2.8.2 dependency is in one of your transitive dependencies? As long as that dependency isn't linked into your test suite it should be fine
[17:14:50] <merijn> Boarders_: You can also use cabal-plan to visualise the transitive dependency graph
[17:14:55] <merijn> @hackage cabal-plan
[17:14:55] <lambdabot> https://hackage.haskell.org/package/cabal-plan
[17:15:33] <Boarders_> The problem is I need this old version because otherwise I need to import different modules between stack and cabal
[17:16:08] <merijn> Boarders_: Because stack has an older version?
[17:16:57] <merijn> Boarders_: You can easily have an ifdef around the import to check which hspec version is used at compile time and use the right import that way
[17:17:10] <Boarders_> it is for stack having the older version yes
[17:18:06] <Boarders_> shouldn't I be able to get specific versions with cabal though, seems quite bad it doesn't respect the versions asked for?
[17:18:29] <merijn> I am not convinced you have demonstrated it doesn't respect the version asked for
[17:18:51] <Boarders_> why not? where would it list the version it is building the tests with?
[17:18:58] <merijn> In fact, if what you *think* is happening, is happening, that'd be a pretty massive bug in cabal-install
[17:19:09] <Boarders_> could you be les cryptic
[17:19:12] <Boarders_> less*
[17:19:30] <merijn> Boarders_: hspec-2.8.2 appearing in the freeze file is not the same as "your tests are linked with hspec-2.8.2"
[17:19:50] <merijn> in fact, if that was true, building your code with compile should be a compile time error if the new version has different imports
[17:20:09] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:20:13] <Boarders_> ok, but stack and cabal disagree about what is exported between tasty-hspec and hspec so it doesn't appear they are getting the same version
[17:20:20] <merijn> Boarders_: hspec-2.8.2 being in the freeze file just shows that "hspec-2.8.2" is *somewhere* in the build plan of your transitive-dependencies
[17:20:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:20:45] <merijn> Boarders_: You don't have a bound on tasty-hspec, though?
[17:20:57] <Boarders_> I added one and it makes no difference
[17:22:15] <merijn> Boarders_: Get cabal-plan from hackage, and make it print out the transitive dependencies/full buildplan. *Then* we know what versions of which dependency are linked where, and then you can debug from there
[17:22:34] <Boarders_> ok, thanks very much for the info, very helpful
[17:23:21] <merijn> Boarders_: Also, compare the errors of the cabal build and compare with the hspec/tasty-hspec changelog to see which version's changes errors relate too
[17:23:39] *** Joins: nhatanh02 (~satori@123.24.172.30)
[17:23:43] <merijn> On a side note, that cabal file is a recipe for disaster with the entire lack of bounds
[17:23:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:24:11] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[17:24:38] <yushyin> maybe cabal.project's constraints: may help?
[17:25:24] *** Joins: alx741 (~alx741@157.100.93.160)
[17:27:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzโฆ)
[17:28:42] *** Quits: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com) (Remote host closed the connection)
[17:34:21] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:34:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:37:36] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[17:39:06] <lechner> Hi, for anyone using Emacs (or perhaps Vim): We add small editor notations to our Perl files. Should I do something similar with Haskell? Thanks!    https://salsa.debian.org/lintian/lintian/-/blob/master/bin/lintian#L1045-1049
[17:40:27] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:45:58] <tomsmeding> lechner: don't know about emacs, but 'et' for sure, the rest is subjective :p
[17:46:12] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[17:46:17] <tomsmeding> every style you can reasonably think of is practiced by someone
[17:46:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:46:45] <geekosaur> and some you can't
[17:46:57] * geekosaur will spare everyone's sanity
[17:47:42] <tomsmeding> you know that kind of drops just excite people like us
[17:48:16] * geekosaur can't find that code snippet where someone tried to turn javascript into python
[17:49:00] <geekosaur> probably for the best
[17:49:26] <tomsmeding> was it like the classic where C was turned into ALGOL
[17:49:34] <geekosaur> sort of, yes
[17:49:37] <tomsmeding> except you can't do that in js because no macros
[17:49:51] <lechner> okay, this one i asked before. what's everone's favorite code formatter please?
[17:49:51] <tomsmeding> or did they run CPP on js
[17:50:03] <tomsmeding> https://twitter.com/comerijn/status/1257804634833420292
[17:50:19] <geekosaur> actually it reminded me more of the bad old days programming perl with poor editor support so we had to put comments at the ends of lines with extra formatting to keep the editor from getting confused
[17:50:51] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[17:51:12] <tomsmeding> heh, when I still coded in sublime text (which had at that time a mediocre haskell highlighting spec), I used to put `-- =` at the end of function definitions with guards
[17:51:27] <tomsmeding> because the highlighting was in type mode until it saw a =
[17:51:34] *** Joins: alx741 (~alx741@157.100.93.160)
[17:52:08] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:53:59] <lechner> Hi, does cabal only work with a top level file, or can i nest them in sub-directories please?
[17:55:00] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:55:38] *** Joins: rond_13 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[17:56:05] <tomsmeding> I presume you're looking for https://cabal.readthedocs.io/en/latest/cabal-project.html
[17:56:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:56:35] *** Quits: _ht (~quassel@37.120.218.148) (Remote host closed the connection)
[17:56:53] *** Joins: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[17:57:36] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[17:57:39] <geekosaur> I'm not sure I understand the question. cabal normally looks for a single *.cabal file in the current directory, but cabal.project can tell it where to look for multiple cabal files comprising a single project. if you mean source files, there's a cabal file directive for that
[17:57:56] *** Joins: mniip (mniip@libera/staff/mniip)
[17:58:27] *** Quits: spaceseller_ (~spacesell@31.147.205.13) (Quit: Leaving)
[17:59:56] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[17:59:58] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Ping timeout: 256 seconds)
[18:00:06] <lechner> yeah, i think that's it. i'm gradually converting my project to Haskell and have several parts. thanks!
[18:00:26] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:01:04] <lechner> what an addictive language! there ought to be a help line
[18:01:06] *** Quits: rond_13 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Ping timeout: 256 seconds)
[18:01:34] <merijn> lechner: yeah, if your problem is "I have a bunch of independent packages that depend on each other combined into one project" then cabal.project is the way to go
[18:01:39] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[18:02:39] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:02:56] <lechner> thanks! i may combine the individual cabal files when the conversion is done.
[18:05:11] *** Quits: `2jt (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[18:05:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:05:34] *** Joins: `2jt (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[18:06:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:06:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:06:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:48] *** Joins: benin1 (benin@gateway/vpn/protonvpn/benin)
[18:07:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:08:13] *** Quits: benin (~benin@183.82.176.241) (Ping timeout: 240 seconds)
[18:08:13] *** benin1 is now known as benin
[18:08:24] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[18:12:30] *** Joins: alx741 (~alx741@157.100.93.160)
[18:13:42] <lechner> On secnod thought, i just went with a single cabal file. it's all under one license anyway
[18:14:33] <lechner> Is 0.1.0.0 a good first version number (these are exectables) in the Haskell ecosystem?
[18:14:40] <merijn> lechner: cabal.project is more for when you wanna have independent packages that work in lockstep
[18:14:42] <lechner> executables
[18:15:24] <merijn> lechner: i.e. I have package foo and package bar (depending on foo). Now new development releases will probably depend on development versions of foo, so I can't just use the hackage dependency. That kinda problem
[18:15:43] <merijn> lechner: If you just have a bunch of independent executables there's not much reason to not throw them in the same cabal file, no
[18:15:59] <merijn> 0.1.0 is pretty standard, yeah
[18:16:18] <lechner> three or four digits?
[18:16:42] <merijn> I mean, 4 doesn't seem to really serve a purpose?
[18:16:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:16:44] <merijn> Oh, also
[18:16:47] <merijn> @where pvp
[18:16:48] <lambdabot> https://pvp.haskell.org/
[18:16:50] <merijn> That
[18:19:47] *** Quits: deadmarshal (~deadmarsh@95.38.116.69) (Ping timeout: 256 seconds)
[18:20:08] <lechner> anything ever came out of this proposal (and the 1.X.Y.Z corollary)?     https://taylor.fausak.me/2016/12/28/problematic-versioning-policy/
[18:21:00] <lechner> although i won't be uploading to hackage
[18:22:12] *** Joins: max22- (~maxime@2a01cb088335980086c6bc2422140675.ipv6.abo.wanadoo.fr)
[18:25:28] <merijn> lechner: No and I don't think it will
[18:25:49] *** Quits: xff0x (~xff0x@2001:1a81:53e7:b00:95c4:6090:2048:abcf) (Ping timeout: 240 seconds)
[18:26:02] <merijn> lechner: PVP predates Semantic Version and many people prefer it. Additionally, the PVP is much more explicit about what "breaking" means compared to semver
[18:26:42] <merijn> I mean, there isn't a single "semver" anyway
[18:26:58] *** Joins: xff0x (~xff0x@port-92-195-123-135.dynamic.as20676.net)
[18:27:36] <merijn> Most packages and ecosystems have their own "semver-inspired" thing they roll with. Additionally, semver doesn't really solve any of the issues he mentions
[18:28:40] <merijn> "PVP doesn't explicitly forbid people from doing dumb things!" I mean, I guess it doesn't? But, like, it's not there's a versioning police that stops people from doing dumb things with semver either?
[18:30:24] <lechner> yeah, i'm new to the PVP, but i also think semver may be a bit overrated
[18:31:02] <merijn> On the whole, that whole reasoning on that page seems to boil down to "I don't like PVP" with very little objective argumentation to convince me
[18:31:21] <lechner> like so much online
[18:32:55] <merijn> And far from everyone follows the PVP (strictly or otherwise), but it's by far the most common/popular approach, so if you wanna pick something and fit in, it's a good choice
[18:33:27] *** Joins: alx741 (~alx741@157.100.93.160)
[18:34:27] <tdammers> pvp is a decent idea, it's just a pity that there's no way to properly enforce it, and without enforcement, it loses much of its utility
[18:35:07] <tdammers> semver, however, is just pseudo-exact dynamic nonsense
[18:35:29] *** Joins: husixu (~husixu@137.132.119.2)
[18:36:02] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[18:36:24] <merijn> The main argument against PVP is usually "but we can't strictly enforce this, so it doesn't actually guarantee anything!". Which is true, but just abandoning the entire idea and going "welp...everyone's on their own...anarchy reigns!" seems...you know, counterproductive
[18:36:49] <maerwald> pvp not having beta/rc is a major annoyance though, which caused GHC to use odd version schemes for pre-releases
[18:36:54] <tdammers> well yeah. pvp doesn't guarantee anything, but all the alternatives achieve even less
[18:37:46] <lechner> merijn: i just want to fit in
[18:38:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:39:08] <merijn> lechner: Then PVP is as much "fitting in" as possible :)
[18:39:11] <tdammers> I actually think pvp strikes a pretty good balance. It doesn't guarantee anything, but it's good enough to guide version selection; and when it guides us wrong, then things still won't explode in our faces, we just get a project that won't build until we step in and manually fix the dependency bounds
[18:39:51] <maerwald> I think both PVP and semver are the wrong solutions
[18:39:58] <maerwald> they encourage breaking API
[18:40:37] <tdammers> I prefer to think that they acknowledge that breaking APIs is a fact of life
[18:40:51] <merijn> maerwald: You always get the API design right the first time? :p
[18:41:00] <merijn> tdammers++
[18:41:43] <maerwald> tdammers: hmm... C libraries (and go libraries for some time at least) did fine without constant API breakage
[18:41:52] <maerwald> it's a culture thing
[18:41:59] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:42:05] <merijn> maerwald: "unconstrained API churn" is a maintainer priority issue, not a versioning issue
[18:42:35] <maerwald> merijn: versioning policies make breaking API easier
[18:42:38] <maerwald> so it creates culture
[18:42:55] <lechner> merijn: why do semver (and pvp) encourage breaking api?
[18:42:56] <merijn> maerwald: A lot of widely used C libraries are the Nth iteration that have years of experimentation behind them before their stable APIs settled
[18:42:59] <lechner> maerwald: ^
[18:43:20] <lechner> merijn: sorry
[18:43:35] <tdammers> I think the argument is that if you have a mechanism that makes API changes safer, people will more readily change their APIs
[18:43:48] <merijn> My APIs breaking isn't a result of PVP "encouraging it", it's a result of me actively experimenting to find the API I like
[18:44:08] <tdammers> which, to a degree, is true; but the other side of the medal is that when API changes are dangerous and unmanaged, people will avoid them even when they would be the right thing
[18:44:10] <merijn> And I, frankly, don't give a shit about the stability
[18:44:23] <maerwald> lechner: because instead of getting hate from your users, you create a mess of contraints due to PVP, then write brittle tools that deal with all the bounds issues, then come up with stack and nix that throw all of those away, then come up with freeze files and hackage revisions (which are a huge hack)
[18:44:26] <maerwald> etc. etc.
[18:44:46] <maerwald> and people just keep experimenting with APIs
[18:44:53] <maerwald> because it's easy
[18:44:59] <maerwald> and you don't get hate
[18:45:03] <merijn> maerwald: Don't want me to experiment with my APIs? Pay me to maintain a stable version
[18:45:16] <merijn> maerwald: You shouldn't get hate anyway
[18:45:35] <merijn> Anyway who hates on maintainers for breaking open source stuff can fuck right off
[18:45:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:45:39] <merijn> s/Anyway/Anyone
[18:46:16] <maerwald> merijn: uhm... I broke github actions for Haskell... and was the most loved person for a week
[18:46:18] <maerwald> ;)
[18:46:26] <maerwald> and rightly so
[18:46:29] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:46:33] <merijn> Disagree
[18:46:40] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:46:42] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:47:04] <lechner> maerwald: you don't sound like the renegade who authored ghcup!
[18:47:23] <maerwald> it's more because virtual-environments on github are rolling release
[18:47:26] <merijn> You wanna have stability guarantees and support? You can bloody well pay for them
[18:47:30] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:47:35] *** Joins: benin5 (~benin@183.82.176.241)
[18:47:40] <lechner> apt-get will resolve everything for you
[18:47:42] <maerwald> so github actions can break any week, basically
[18:47:55] <maerwald> if there's a bug in virtual-environments
[18:48:05] <maerwald> you can't freeze the instances
[18:48:20] <merijn> The professionalisation of open source is one of the worst things of the modern internet, together with the "verzuiling" of the web >.>
[18:49:19] <merijn> tdammers: Help me out, what's an adequate english analog for verzuiling? :p
[18:49:23] *** Quits: benin (benin@gateway/vpn/protonvpn/benin) (Ping timeout: 256 seconds)
[18:52:20] <perro_> deutsch?
[18:53:02] <merijn> Dutch
[18:54:07] <merijn> I mean, I guess I could technically translate it (like Google Translate) does as "pillarisation", but that doesn't really work. Something like "silofication" seems more sensible, but also awkward
[18:58:07] <Clint> https://en.wiktionary.org/wiki/siloization is a word that has been used at least once
[18:58:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:00:13] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[19:00:13] *** Quits: benin5 (~benin@183.82.176.241) (*.net *.split)
[19:00:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[19:00:13] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[19:00:13] *** Quits: husixu (~husixu@137.132.119.2) (*.net *.split)
[19:00:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[19:00:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (*.net *.split)
[19:00:13] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (*.net *.split)
[19:00:14] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:2a00:eeaf:f8c:1b54) (*.net *.split)
[19:00:14] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[19:00:14] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (*.net *.split)
[19:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[19:00:14] *** Quits: drdo (~drdo@144.172.69.89) (*.net *.split)
[19:00:14] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[19:00:14] *** Quits: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (*.net *.split)
[19:00:14] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[19:00:14] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[19:00:14] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[19:00:14] *** Quits: machinedgod (~machinedg@24.105.81.50) (*.net *.split)
[19:00:14] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c365:2459:70e0:4fac) (*.net *.split)
[19:00:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[19:00:14] *** Quits: coolnickname (uid531864@user/coolnickname) (*.net *.split)
[19:00:14] *** Quits: mbuf (~Shakthi@122.174.247.3) (*.net *.split)
[19:00:14] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[19:00:14] *** Quits: neurocyte0 (~neurocyte@user/neurocyte) (*.net *.split)
[19:00:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[19:00:14] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[19:00:14] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[19:00:14] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[19:00:14] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[19:00:14] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[19:00:14] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[19:00:14] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (*.net *.split)
[19:00:14] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[19:00:14] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (*.net *.split)
[19:00:14] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[19:00:14] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (*.net *.split)
[19:00:14] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (*.net *.split)
[19:00:14] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[19:00:14] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[19:00:14] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[19:00:14] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[19:00:14] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[19:00:14] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34) (*.net *.split)
[19:00:14] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[19:00:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[19:00:14] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[19:00:14] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[19:00:14] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[19:00:14] *** Quits: max22- (~maxime@2a01cb088335980086c6bc2422140675.ipv6.abo.wanadoo.fr) (*.net *.split)
[19:00:14] *** Quits: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57) (*.net *.split)
[19:00:14] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[19:00:14] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (*.net *.split)
[19:00:14] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (*.net *.split)
[19:00:14] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[19:00:14] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[19:00:14] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[19:00:14] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[19:00:15] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[19:00:15] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[19:00:15] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[19:00:15] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[19:00:15] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (*.net *.split)
[19:00:15] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (*.net *.split)
[19:00:15] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[19:00:15] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[19:00:15] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[19:00:15] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (*.net *.split)
[19:00:15] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[19:00:15] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[19:00:15] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[19:00:15] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (*.net *.split)
[19:00:15] *** Quits: bgamari_ (~bgamari@2001:470:e438::1) (*.net *.split)
[19:00:15] *** Quits: ishutin (~ishutin@92-249-182-7.pool.digikabel.hu) (*.net *.split)
[19:00:15] *** Quits: slowtyper (~slowtyper@user/slowtyper) (*.net *.split)
[19:00:15] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (*.net *.split)
[19:00:15] *** Quits: averell (~averell@user/averell) (*.net *.split)
[19:00:15] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[19:00:15] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[19:00:15] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[19:00:15] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[19:00:15] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[19:00:15] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[19:00:15] *** Quits: platz_ (~platz@40.122.118.113) (*.net *.split)
[19:00:15] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[19:00:15] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[19:00:15] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[19:00:15] *** Quits: glider (~glider@user/glider) (*.net *.split)
[19:00:15] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[19:00:15] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[19:00:15] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[19:00:15] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[19:00:15] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[19:00:15] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[19:00:15] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[19:00:15] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[19:00:15] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[19:00:15] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[19:00:15] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[19:00:15] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[19:00:15] *** Quits: OscarH_ (~OscarH@90.201.86.195) (*.net *.split)
[19:00:15] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[19:00:15] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (*.net *.split)
[19:00:15] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[19:00:15] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (*.net *.split)
[19:00:15] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (*.net *.split)
[19:00:16] *** Quits: mmhat (~mmh@55d49507.access.ecotel.net) (*.net *.split)
[19:00:16] *** Quits: __monty__ (~toonn@user/toonn) (*.net *.split)
[19:00:16] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[19:00:16] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[19:00:16] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[19:00:16] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[19:00:16] *** Quits: AlexZenon (~alzenon@94.233.240.16) (*.net *.split)
[19:00:16] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[19:00:16] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[19:00:16] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[19:00:16] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (*.net *.split)
[19:00:16] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[19:00:16] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[19:00:16] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[19:00:16] *** Quits: jespada (~jespada@87.74.32.18) (*.net *.split)
[19:00:16] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[19:00:16] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[19:00:16] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[19:00:16] *** Quits: canta (~canta@user/canta) (*.net *.split)
[19:00:16] *** Quits: dsrt^ (~dsrt@207.5.21.20) (*.net *.split)
[19:00:16] *** Quits: sabx (~sabbas@user/sabbas) (*.net *.split)
[19:00:16] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[19:00:16] *** Quits: nhs (~nhs@136.49.226.20) (*.net *.split)
[19:00:16] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[19:00:16] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[19:00:16] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[19:00:16] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[19:00:16] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: oo_migue1 (~pi@77.252.47.226) (*.net *.split)
[19:00:16] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[19:00:16] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[19:00:16] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[19:00:16] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[19:00:16] *** Quits: tv (~tv@user/tv) (*.net *.split)
[19:00:16] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[19:00:16] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[19:00:16] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (*.net *.split)
[19:00:16] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[19:00:16] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[19:00:16] *** Quits: jeffz` (~user@lambda.xen.prgmr.com) (*.net *.split)
[19:00:16] *** Quits: remedan_ (~remedan@octo.cafe) (*.net *.split)
[19:00:16] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[19:00:17] *** Quits: hltk (~hltk@hltk.fi) (*.net *.split)
[19:00:17] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (*.net *.split)
[19:00:17] *** Quits: nek0 (~nek0@nek0.eu) (*.net *.split)
[19:00:17] *** Quits: joeyh_ (~joeyh@kitenet.net) (*.net *.split)
[19:00:17] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[19:00:17] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[19:00:17] *** Quits: caubert_ (~caubert@136.244.111.235) (*.net *.split)
[19:00:17] *** Quits: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com) (*.net *.split)
[19:00:17] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[19:00:17] *** Quits: siers (~ij@user/ij) (*.net *.split)
[19:00:17] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[19:00:17] *** Quits: heath (~heath@user/heath) (*.net *.split)
[19:00:17] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[19:00:17] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[19:00:17] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[19:00:17] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[19:00:17] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[19:00:17] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[19:00:17] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[19:00:17] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[19:00:17] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (*.net *.split)
[19:00:17] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[19:00:17] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[19:00:17] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[19:00:17] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[19:00:17] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (*.net *.split)
[19:00:17] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[19:00:17] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[19:00:17] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[19:00:17] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[19:00:17] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[19:00:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[19:00:17] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (*.net *.split)
[19:00:17] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[19:00:17] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[19:00:17] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[19:00:17] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[19:00:17] *** Quits: esoca123 (uid534098@id-534098.tinside.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: Megant (megant@user/megant) (*.net *.split)
[19:00:17] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[19:00:17] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[19:00:17] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[19:00:17] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[19:00:17] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[19:00:17] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[19:00:17] *** Quits: Square (~a@user/square) (*.net *.split)
[19:00:17] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[19:00:17] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[19:00:18] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[19:00:18] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[19:00:18] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[19:00:18] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[19:00:18] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[19:00:18] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[19:00:18] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[19:00:18] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[19:00:18] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[19:00:18] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[19:00:18] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[19:00:18] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[19:00:18] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[19:00:18] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[19:00:18] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[19:00:18] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[19:00:18] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[19:00:18] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[19:00:18] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[19:00:18] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (*.net *.split)
[19:00:18] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[19:00:18] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (*.net *.split)
[19:00:18] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[19:00:18] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[19:00:18] *** Quits: boxscape (~boxscape@user/boxscape) (*.net *.split)
[19:00:18] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[19:00:18] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[19:00:18] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[19:00:18] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (*.net *.split)
[19:00:18] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (*.net *.split)
[19:00:18] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[19:00:18] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[19:00:18] *** Quits: EvanR (~EvanR@user/evanr) (*.net *.split)
[19:00:18] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[19:00:18] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (*.net *.split)
[19:00:18] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (*.net *.split)
[19:00:19] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[19:00:19] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (*.net *.split)
[19:00:19] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[19:00:19] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[19:00:19] *** Quits: stefan-_ (~cri@42dots.de) (*.net *.split)
[19:00:19] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[19:00:19] *** Quits: tired (~tired@user/tired) (*.net *.split)
[19:00:19] *** Quits: aria (sid380617@2a03:5180:f:2::5:cec9) (*.net *.split)
[19:00:19] *** Quits: jonrh (sid5185@2a03:5180:f:3::1441) (*.net *.split)
[19:00:19] *** Quits: taktoa[c] (sid282096@2a03:5180:f::4:4df0) (*.net *.split)
[19:00:19] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (*.net *.split)
[19:00:19] *** Quits: AndreasK (sid320732@2a03:5180:f:5::4:e4dc) (*.net *.split)
[19:00:19] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[19:00:19] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[19:00:19] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[19:00:19] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[19:00:19] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[19:00:19] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[19:00:19] *** Quits: nf (~n@monade.li) (*.net *.split)
[19:00:19] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[19:00:19] *** Quits: cjay- (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[19:00:19] *** Quits: notabled1 (~notabledu@ares.dbalan.in) (*.net *.split)
[19:00:19] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[19:00:19] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[19:00:19] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[19:00:19] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[19:00:19] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[19:00:19] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[19:00:19] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[19:00:20] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[19:00:20] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[19:00:20] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[19:00:20] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[19:00:20] *** Quits: kitzman (~kitzman@user/dekenevs) (*.net *.split)
[19:00:20] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[19:00:20] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[19:00:20] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[19:00:20] *** Quits: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[19:00:20] *** Quits: adium (adium@user/adium) (*.net *.split)
[19:00:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[19:00:20] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[19:00:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[19:00:20] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[19:00:20] *** Quits: sm1 (~sm@plaintextaccounting/sm) (*.net *.split)
[19:00:20] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[19:00:20] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (*.net *.split)
[19:00:20] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (*.net *.split)
[19:00:20] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[19:00:20] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[19:00:20] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (*.net *.split)
[19:00:20] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[19:00:20] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[19:00:20] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (*.net *.split)
[19:00:20] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (*.net *.split)
[19:00:20] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[19:00:21] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[19:00:21] *** Quits: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1) (*.net *.split)
[19:00:21] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f484:3278:789d:d6a5) (*.net *.split)
[19:00:21] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[19:00:21] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[19:00:21] *** Quits: incertia (~incertia@24.42.241.219) (*.net *.split)
[19:00:21] *** Quits: haask (~harry@user/haask) (*.net *.split)
[19:00:21] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[19:00:21] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[19:00:21] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[19:00:21] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[19:00:21] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[19:00:21] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (*.net *.split)
[19:00:21] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[19:00:21] *** Quits: APic (apic@apic.name) (*.net *.split)
[19:00:21] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[19:00:21] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[19:00:21] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[19:00:21] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[19:00:21] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[19:00:21] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[19:00:22] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[19:00:22] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[19:00:22] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[19:00:22] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[19:00:22] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[19:00:22] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[19:00:22] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[19:00:22] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[19:00:22] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[19:00:22] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[19:00:22] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (*.net *.split)
[19:00:22] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[19:00:22] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[19:00:22] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[19:00:22] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[19:00:22] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[19:00:22] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[19:00:22] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[19:00:22] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[19:00:22] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[19:00:22] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (*.net *.split)
[19:00:22] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (*.net *.split)
[19:00:22] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[19:00:22] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[19:00:22] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[19:00:22] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: yushyin (opqz58iJgg@mail.karif.server-speed.net) (*.net *.split)
[19:00:22] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[19:00:22] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (*.net *.split)
[19:00:22] *** Quits: kronicma1 (user76545@neotame.csclub.uwaterloo.ca) (*.net *.split)
[19:00:22] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (*.net *.split)
[19:00:23] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[19:00:23] *** Quits: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001) (*.net *.split)
[19:00:23] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is) (*.net *.split)
[19:00:23] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[19:00:23] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[19:00:23] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[19:00:23] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[19:00:23] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[19:00:23] *** Quits: n3t (~n3t@user/n3t) (*.net *.split)
[19:00:23] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[19:00:23] *** Quits: nshepperd (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[19:00:23] *** Quits: bjobjo (~bjobjo@user/bjobjo) (*.net *.split)
[19:00:23] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[19:00:23] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[19:00:23] *** Quits: AWizzArd (~code@user/awizzard) (*.net *.split)
[19:00:23] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[19:00:23] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[19:00:23] *** Quits: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[19:00:23] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[19:00:23] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[19:00:23] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[19:00:23] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[19:00:23] *** Quits: edr (~edr@user/edr) (*.net *.split)
[19:00:23] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[19:00:24] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[19:00:24] *** Quits: dy (~dy@user/dy) (*.net *.split)
[19:00:24] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[19:00:24] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[19:00:24] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[19:00:24] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[19:00:24] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (*.net *.split)
[19:00:24] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[19:00:24] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[19:00:24] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[19:00:24] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[19:00:24] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[19:00:24] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[19:00:24] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (*.net *.split)
[19:00:24] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (*.net *.split)
[19:00:24] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (*.net *.split)
[19:00:24] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (*.net *.split)
[19:00:24] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[19:00:24] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[19:00:24] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[19:00:24] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[19:00:24] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[19:00:24] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (*.net *.split)
[19:00:24] *** Quits: forell (~forell@user/forell) (*.net *.split)
[19:00:24] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[19:00:25] *** Quits: son0p (~ff@181.136.122.143) (*.net *.split)
[19:00:25] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[19:00:25] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[19:00:25] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[19:00:25] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (*.net *.split)
[19:00:25] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (*.net *.split)
[19:00:25] *** Quits: bens (~bens@www.typius.com) (*.net *.split)
[19:00:25] *** Quits: mjacob_ (~mjacob@adrastea.uberspace.de) (*.net *.split)
[19:00:25] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[19:00:25] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[19:00:25] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[19:00:25] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: astra (sid289983@user/amish) (*.net *.split)
[19:00:25] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[19:00:25] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[19:00:25] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[19:00:25] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[19:00:26] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[19:00:26] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[19:00:26] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[19:00:26] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[19:00:26] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[19:00:26] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (*.net *.split)
[19:00:26] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[19:00:26] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[19:00:26] *** Quits: deni (~deni@user/deni) (*.net *.split)
[19:00:26] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[19:00:26] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[19:00:26] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[19:00:26] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (*.net *.split)
[19:00:26] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[19:00:26] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (*.net *.split)
[19:00:26] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[19:00:26] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[19:00:26] *** Quits: maerwald[m] (~maerwaldm@user/maerwald) (*.net *.split)
[19:00:26] *** Quits: moats (~oats@user/oats) (*.net *.split)
[19:00:26] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (*.net *.split)
[19:00:26] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[19:00:26] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[19:00:26] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[19:00:26] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[19:00:26] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (*.net *.split)
[19:00:26] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (*.net *.split)
[19:00:26] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[19:00:26] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[19:00:26] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[19:00:26] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[19:00:26] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[19:00:26] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (*.net *.split)
[19:00:27] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[19:00:27] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[19:00:27] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[19:00:27] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[19:00:27] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[19:00:27] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (*.net *.split)
[19:00:27] *** Quits: thebnq (~bnq@herrokitty.com) (*.net *.split)
[19:00:27] *** Quits: Noinia (~Frank@77-162-168-71.fixed.kpn.net) (*.net *.split)
[19:00:27] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[19:00:27] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (*.net *.split)
[19:00:27] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[19:00:27] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[19:00:27] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[19:00:27] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (*.net *.split)
[19:00:27] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[19:00:27] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[19:00:27] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[19:00:27] *** Quits: m4lvin (~m4lvin@w4eg.de) (*.net *.split)
[19:00:27] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (*.net *.split)
[19:00:27] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[19:00:27] *** Quits: acro (~acro@user/acro) (*.net *.split)
[19:00:27] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[19:00:27] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[19:00:27] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[19:00:27] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[19:00:27] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[19:00:27] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[19:00:27] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[19:00:27] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[19:00:27] *** Quits: lyxia (~lyxia@poisson.chat) (*.net *.split)
[19:00:27] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[19:00:27] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[19:00:27] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[19:00:28] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[19:00:28] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[19:00:28] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[19:00:28] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[19:00:28] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[19:00:28] *** Quits: bonz060 (~quassel@2001:bc8:47a4:a23::1) (*.net *.split)
[19:00:28] *** Quits: Jon (jon@dow.land) (*.net *.split)
[19:00:28] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[19:00:28] *** Quits: smorgasbord (buggy@user/smorgasbord) (*.net *.split)
[19:00:28] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[19:00:28] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (*.net *.split)
[19:00:28] *** Quits: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (*.net *.split)
[19:00:28] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (*.net *.split)
[19:00:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[19:00:28] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[19:00:28] *** Quits: gehmehgeh (~user@user/gehmehgeh) (*.net *.split)
[19:00:28] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (*.net *.split)
[19:00:28] *** Quits: califax (~califax@user/califx) (*.net *.split)
[19:00:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[19:00:28] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[19:00:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[19:00:28] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[19:00:28] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[19:00:59] *** Joins: yushyin (JCmpxth3y0@mail.karif.server-speed.net)
[19:01:12] *** Joins: ChanServ (ChanServ@services.libera.chat)
[19:01:12] *** Joins: benin (~benin@183.82.176.241)
[19:01:12] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:01:12] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[19:01:12] *** Joins: husixu (~husixu@137.132.119.2)
[19:01:12] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:01:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:01:12] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[19:01:12] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:2a00:eeaf:f8c:1b54)
[19:01:12] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[19:01:12] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:01:12] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[19:01:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:01:12] *** Joins: drdo (~drdo@144.172.69.89)
[19:01:12] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[19:01:12] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[19:01:12] *** Joins: matijja (~matijja@193.77.181.201)
[19:01:12] *** Joins: xkuru (~xkuru@user/xkuru)
[19:01:12] *** Joins: machinedgod (~machinedg@24.105.81.50)
[19:01:12] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c365:2459:70e0:4fac)
[19:01:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:01:12] *** Joins: coolnickname (uid531864@user/coolnickname)
[19:01:12] *** Joins: mbuf (~Shakthi@122.174.247.3)
[19:01:12] *** Joins: tomku (~tomku@user/tomku)
[19:01:12] *** Joins: neurocyte0 (~neurocyte@user/neurocyte)
[19:01:12] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[19:01:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[19:01:12] *** Joins: kmein (~weechat@user/kmein)
[19:01:12] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:01:12] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[19:01:12] *** Joins: vysn (~vysn@user/vysn)
[19:01:12] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[19:01:12] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[19:01:12] *** Joins: unyu (~pyon@user/pyon)
[19:01:12] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[19:01:12] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[19:01:12] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[19:01:12] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[19:01:12] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[19:01:12] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[19:01:12] *** Joins: lechner (~lechner@debian/lechner)
[19:01:12] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[19:01:12] *** Joins: rembo10 (~rembo10@remulis.com)
[19:01:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34)
[19:01:12] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[19:01:12] *** Joins: leah2 (~leah@vuxu.org)
[19:01:12] *** molybdenum.libera.chat sets mode: +o ChanServ
[19:01:12] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[19:01:12] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[19:01:12] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[19:01:46] *** Quits: yushyin (JCmpxth3y0@mail.karif.server-speed.net) (Client Quit)
[19:01:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:01:47] *** Joins: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[19:01:47] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[19:01:57] *** Joins: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net)
[19:01:58] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[19:01:58] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[19:01:58] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[19:01:58] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[19:01:58] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[19:01:58] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[19:01:58] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[19:01:58] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[19:01:58] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[19:01:58] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[19:01:58] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[19:01:58] *** Joins: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489)
[19:01:58] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[19:01:58] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[19:01:58] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[19:01:58] *** Joins: hays (rootvegeta@fsf/member/hays)
[19:01:58] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[19:01:58] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[19:01:58] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[19:01:58] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[19:01:58] *** Joins: kronicma1 (user76545@neotame.csclub.uwaterloo.ca)
[19:01:58] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[19:01:58] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[19:01:58] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[19:01:58] *** Joins: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001)
[19:01:58] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is)
[19:01:58] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[19:01:58] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[19:01:58] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[19:01:58] *** Joins: n3t (~n3t@user/n3t)
[19:01:58] *** Joins: ikke (~kevin@alpine/developer/ikke)
[19:01:58] *** Joins: jakzale (6291399afa@user/jakzale)
[19:01:58] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[19:01:58] *** Joins: FragByte (~christian@user/fragbyte)
[19:01:58] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[19:01:58] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[19:01:58] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[19:01:58] *** Joins: asm (~alexander@user/asm)
[19:01:58] *** Joins: byorgey (~byorgey@155.138.238.211)
[19:01:58] *** Joins: nshepperd (~nshepperd@li364-218.members.linode.com)
[19:01:58] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[19:01:58] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[19:01:58] *** Joins: Hecate (~mariposa@user/hecate)
[19:01:58] *** Joins: AWizzArd (~code@user/awizzard)
[19:01:58] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[19:01:58] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[19:01:58] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[19:01:58] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[19:01:58] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[19:01:58] *** Joins: Philonous (~Philonous@user/philonous)
[19:01:58] *** Joins: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[19:01:58] *** Joins: clever (~clever@99.192.114.98)
[19:01:58] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[19:01:58] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[19:01:58] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[19:01:58] *** Joins: edr (~edr@user/edr)
[19:01:58] *** Joins: reda_ (~reda@user/reda)
[19:01:58] *** Joins: polux (~polux@51.15.169.172)
[19:01:58] *** Joins: dy (~dy@user/dy)
[19:01:58] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[19:01:58] *** Joins: statusfailed (~statusfai@statusfailed.com)
[19:01:58] *** Joins: shachaf (~shachaf@user/shachaf)
[19:02:03] *** Joins: _\_ (~o@user/ding)
[19:02:03] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[19:02:03] *** Joins: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[19:02:03] *** Joins: adium (adium@user/adium)
[19:02:03] *** Joins: nckx (~nckx@tobias.gr)
[19:02:03] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[19:02:03] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[19:02:03] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[19:02:07] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:02:07] *** Joins: sm1 (~sm@plaintextaccounting/sm)
[19:02:07] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[19:02:07] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[19:02:07] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[19:02:07] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[19:02:07] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[19:02:07] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[19:02:07] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[19:02:07] *** Joins: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9)
[19:02:07] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[19:02:07] *** Joins: lisq (~quassel@lis.moe)
[19:02:07] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[19:02:07] *** Joins: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1)
[19:02:07] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[19:02:07] *** Joins: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com)
[19:02:07] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f484:3278:789d:d6a5)
[19:02:07] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[19:02:07] *** Joins: cyphase (~cyphase@user/cyphase)
[19:02:07] *** Joins: incertia (~incertia@24.42.241.219)
[19:02:07] *** Joins: haask (~harry@user/haask)
[19:02:07] *** Joins: Flow (~none@gentoo/developer/flow)
[19:02:07] *** Joins: mncheck (~mncheck@193.224.205.254)
[19:02:07] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:02:07] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:02:07] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[19:02:07] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[19:02:07] *** Joins: wagle (~wagle@quassel.wagle.io)
[19:02:07] *** Joins: APic (apic@apic.name)
[19:02:07] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[19:02:07] *** Joins: raoul (~raoul@95.179.203.88)
[19:02:07] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[19:02:07] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[19:02:07] *** Joins: PHO` (~pho@akari.cielonegro.org)
[19:02:07] *** Joins: nonzen (~nonzen@user/nonzen)
[19:02:07] *** Joins: lieven (~mal@ns2.wyrd.be)
[19:02:07] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[19:02:07] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[19:02:07] *** Joins: sudden (~cat@user/sudden)
[19:02:07] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[19:02:07] *** Joins: mcfilib (sid302703@user/mcfilib)
[19:02:07] *** Joins: tureba (~tureba@tureba.org)
[19:02:07] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[19:02:07] *** Joins: bah (~bah@l1.tel)
[19:02:07] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[19:02:07] *** Joins: alp (~alp@mail.fmap.fr)
[19:02:07] *** Joins: guibou (~guibou@mail.fmap.fr)
[19:02:08] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Max SendQ exceeded)
[19:02:15] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[19:02:15] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[19:02:15] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[19:02:15] *** Joins: Deide (~deide@user/deide)
[19:02:15] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[19:02:15] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[19:02:15] *** Joins: Tisoxin (~ikosit@user/ikosit)
[19:02:15] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[19:02:15] *** Joins: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a)
[19:02:15] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[19:02:15] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[19:02:15] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[19:02:15] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[19:02:15] *** Joins: PigDude (~PigDude@159.203.16.199)
[19:02:15] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[19:02:15] *** Joins: niko (~niko@libera/staff/niko)
[19:02:15] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:02:15] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[19:02:15] *** Joins: forell (~forell@user/forell)
[19:02:15] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[19:02:15] *** Joins: son0p (~ff@181.136.122.143)
[19:02:15] *** Joins: rookie101 (~rookie@165.232.121.13)
[19:02:15] *** Joins: finsternis (~X@23.226.237.192)
[19:02:15] *** Joins: samebchase (~samebchas@51.15.68.182)
[19:02:15] *** Joins: enyc (~enyc@user/enyc)
[19:02:15] *** Joins: peutri (~peutri@ns317027.ip-94-23-46.eu)
[19:02:15] *** Joins: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[19:02:15] *** Joins: bens (~bens@www.typius.com)
[19:02:15] *** Joins: mjacob_ (~mjacob@adrastea.uberspace.de)
[19:02:15] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[19:02:15] *** Joins: auri (~quassel@fsf/member/auri)
[19:02:15] *** Joins: chronon (~chronon@user/chronon)
[19:02:15] *** Joins: Moyst_ (~moyst@user/moyst)
[19:02:15] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[19:02:15] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[19:02:15] *** Joins: astra (sid289983@user/amish)
[19:02:15] *** Joins: amir (sid22336@user/amir)
[19:02:15] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[19:02:15] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[19:02:15] *** Joins: bsdbandit (~bwell@users.757.org)
[19:02:15] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[19:02:15] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[19:02:15] *** Joins: ringo__ (~ringo@157.230.117.128)
[19:02:15] *** Joins: oxytocat (~alloca@user/suppi)
[19:02:15] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[19:02:15] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[19:02:15] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[19:02:15] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[19:02:15] *** Joins: deni (~deni@user/deni)
[19:02:15] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[19:02:15] *** Joins: jocke-l (jocke-l@a.x0.is)
[19:02:15] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[19:02:16] *** Quits: enyc (~enyc@user/enyc) (Max SendQ exceeded)
[19:02:16] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[19:02:16] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[19:02:16] *** Joins: nhatanh02 (~satori@123.24.172.30)
[19:02:21] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[19:02:21] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[19:02:21] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[19:02:21] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[19:02:21] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[19:02:21] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[19:02:21] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[19:02:21] *** Joins: boxscape (~boxscape@user/boxscape)
[19:02:21] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[19:02:21] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[19:02:21] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[19:02:21] *** Joins: siraben (~siraben@user/siraben)
[19:02:21] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[19:02:21] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[19:02:21] *** Joins: tafa (~tafa@user/tafa)
[19:02:21] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[19:02:21] *** Joins: kitzman (~kitzman@user/dekenevs)
[19:02:21] *** Joins: EvanR (~EvanR@user/evanr)
[19:02:21] *** Joins: AkechiShiro (~licht@user/akechishiro)
[19:02:21] *** Joins: noctuks (7vrDyCK6LH@user/noctux)
[19:02:21] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[19:02:21] *** Joins: gdd (~gdd@129.199.146.230)
[19:02:21] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[19:02:21] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:02:21] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[19:02:21] *** Joins: stefan-_ (~cri@42dots.de)
[19:02:21] *** Joins: noctux (~noctux@user/noctux)
[19:02:21] *** Joins: tired (~tired@user/tired)
[19:02:21] *** Joins: hook54321 (sid149355@user/hook54321)
[19:02:21] *** Joins: aria (sid380617@2a03:5180:f:2::5:cec9)
[19:02:21] *** Joins: taktoa[c] (sid282096@2a03:5180:f::4:4df0)
[19:02:21] *** Joins: jonrh (sid5185@2a03:5180:f:3::1441)
[19:02:21] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[19:02:21] *** Joins: AndreasK (sid320732@2a03:5180:f:5::4:e4dc)
[19:02:21] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[19:02:21] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:02:21] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[19:02:21] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[19:02:21] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[19:02:21] *** Joins: notabled1 (~notabledu@ares.dbalan.in)
[19:02:21] *** Joins: nf (~n@monade.li)
[19:02:21] *** Joins: oats (~thomas@user/oats)
[19:02:21] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[19:02:21] *** Joins: sshine (~simon@hubris.eta.solutions)
[19:02:21] *** Joins: p3n (~p3n@217.198.124.246)
[19:02:21] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[19:02:21] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[19:02:21] *** Joins: ellie (~ellie@user/ellie)
[19:02:21] *** Joins: blades (~blades@204.48.29.163)
[19:02:21] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[19:02:21] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[19:02:21] *** Joins: haritz (~hrtz@user/haritz)
[19:02:21] *** Joins: robertm (robertm@lattice.rojoma.com)
[19:02:21] *** Joins: _________ (~nobody@user/noodly)
[19:02:21] *** Joins: Trattue (~Trattue@152.70.182.158)
[19:02:27] *** Joins: max22- (~maxime@2a01cb088335980086c6bc2422140675.ipv6.abo.wanadoo.fr)
[19:02:27] *** Joins: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57)
[19:02:27] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[19:02:27] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[19:02:27] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[19:02:27] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[19:02:27] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[19:02:27] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[19:02:27] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[19:02:27] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[19:02:27] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[19:02:27] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[19:02:27] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[19:02:27] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[19:02:27] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[19:02:27] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[19:02:27] *** Joins: srk (~sorki@user/srk)
[19:02:27] *** Joins: haasn (~nand@haasn.dev)
[19:02:27] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[19:02:27] *** Joins: bw (sid2730@user/betawaffle)
[19:02:27] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[19:02:27] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[19:02:27] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[19:02:27] *** Joins: bgamari_ (~bgamari@2001:470:e438::1)
[19:02:27] *** Joins: ishutin (~ishutin@92-249-182-7.pool.digikabel.hu)
[19:02:27] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[19:02:27] *** Joins: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com)
[19:02:27] *** Joins: averell (~averell@user/averell)
[19:02:27] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[19:02:27] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[19:02:27] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[19:02:27] *** Joins: dfg (dfg@user/dfg)
[19:02:27] *** Joins: Unhammer (~Unhammer@user/unhammer)
[19:02:27] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[19:02:27] *** Joins: platz_ (~platz@40.122.118.113)
[19:02:27] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[19:02:27] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[19:02:27] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[19:02:27] *** Joins: glider (~glider@user/glider)
[19:02:27] *** Joins: quintasan (~quassel@quintasan.pl)
[19:02:27] *** Joins: orcus (~orcus@user/brprice)
[19:02:27] *** Joins: tinwood (~tinwood@canonical/tinwood)
[19:02:27] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[19:02:27] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[19:02:27] *** Joins: haskl (~haskl@user/haskl)
[19:02:27] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[19:02:27] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[19:02:27] *** Joins: anderson (~ande@user/anderson)
[19:02:27] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[19:02:27] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[19:02:27] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[19:02:27] *** Joins: OscarH_ (~OscarH@90.201.86.195)
[19:02:27] *** Joins: arkeet (~arkeet@moriya.ca)
[19:02:28] *** Quits: siraben (~siraben@user/siraben) (Max SendQ exceeded)
[19:02:28] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Max SendQ exceeded)
[19:02:28] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Max SendQ exceeded)
[19:02:33] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 240 seconds)
[19:02:33] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (Ping timeout: 240 seconds)
[19:02:37] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (Ping timeout: 240 seconds)
[19:02:43] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:02:43] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:02:43] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[19:02:43] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:02:43] *** Joins: califax (~califax@user/califx)
[19:02:43] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:02:43] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[19:02:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:02:43] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:02:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[19:02:43] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Ping timeout: 250 seconds)
[19:02:43] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 250 seconds)
[19:02:44] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Ping timeout: 250 seconds)
[19:02:44] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Ping timeout: 250 seconds)
[19:02:47] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[19:02:50] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[19:02:50] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[19:02:50] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[19:02:50] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[19:02:50] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[19:02:50] *** Joins: jinsun_ (~jinsun@user/jinsun)
[19:02:50] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[19:02:50] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[19:02:50] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[19:02:50] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[19:02:50] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[19:02:50] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[19:02:50] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[19:02:50] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[19:02:50] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[19:02:50] *** Joins: justIrresolute (~justache@user/justache)
[19:02:50] *** Joins: esoca123 (uid534098@id-534098.tinside.irccloud.com)
[19:02:50] *** Joins: Megant (megant@user/megant)
[19:02:50] *** Joins: sweater (~sweater@206.81.18.26)
[19:02:50] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[19:02:50] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[19:02:50] *** Joins: a1paca (~a1paca@user/a1paca)
[19:02:50] *** Joins: obviyus (sid415299@user/obviyus)
[19:02:50] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[19:02:50] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[19:02:50] *** Joins: Square (~a@user/square)
[19:02:50] *** Joins: fluxit (~fluxit@techsmix.net)
[19:02:50] *** Joins: davean (~davean@davean.sciesnet.net)
[19:02:50] *** Joins: tritlo (sid58727@user/tritlo)
[19:02:50] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[19:02:50] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[19:02:50] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[19:02:50] *** Joins: shane (~shane@ana.rch.ist)
[19:02:50] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[19:02:50] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[19:02:50] *** Joins: idnar (sid12240@debian/mithrandi)
[19:02:50] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[19:02:50] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[19:02:50] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[19:02:50] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:02:50] *** Joins: jackdk (sid373013@cssa/jackdk)
[19:02:50] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[19:02:50] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[19:02:50] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[19:02:50] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[19:02:50] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[19:02:50] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[19:02:50] *** Joins: c_wraith (~c_wraith@adjoint.us)
[19:02:50] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[19:02:50] *** Joins: xerox (~edi@user/edi)
[19:02:50] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[19:02:51] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Max SendQ exceeded)
[19:02:51] *** Quits: jinsun_ (~jinsun@user/jinsun) (Max SendQ exceeded)
[19:02:51] *** Quits: justIrresolute (~justache@user/justache) (Max SendQ exceeded)
[19:02:51] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Ping timeout: 245 seconds)
[19:02:57] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: boxscape (~boxscape@user/boxscape) (Ping timeout: 250 seconds)
[19:02:57] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Ping timeout: 250 seconds)
[19:03:01] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Ping timeout: 240 seconds)
[19:03:02] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Ping timeout: 240 seconds)
[19:03:02] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Ping timeout: 240 seconds)
[19:03:02] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Ping timeout: 240 seconds)
[19:03:02] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (Ping timeout: 240 seconds)
[19:03:05] *** Quits: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Ping timeout: 252 seconds)
[19:03:06] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[19:03:06] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[19:03:06] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[19:03:06] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[19:03:06] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[19:03:06] *** Joins: maerwald[m] (~maerwaldm@user/maerwald)
[19:03:06] *** Joins: moats (~oats@user/oats)
[19:03:06] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[19:03:06] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[19:03:06] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[19:03:06] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[19:03:06] *** Joins: kadoban (~kadoban@user/kadoban)
[19:03:06] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[19:03:06] *** Joins: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9)
[19:03:06] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[19:03:06] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[19:03:06] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[19:03:06] *** Joins: int-e (~noone@int-e.eu)
[19:03:06] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[19:03:06] *** Joins: acidsys (~LSD@2.lsd.systems)
[19:03:06] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[19:03:06] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[19:03:06] *** Joins: Unode (~Unode@194.94.44.220)
[19:03:06] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[19:03:06] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[19:03:06] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[19:03:06] *** Joins: thebnq (~bnq@herrokitty.com)
[19:03:06] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[19:03:06] *** Joins: gawen_ (~gawen@user/gawen)
[19:03:06] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[19:03:06] *** Joins: amk (~amk@109.255.169.126)
[19:03:06] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[19:03:06] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[19:03:06] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[19:03:06] *** Joins: juri_ (~juri@178.63.35.222)
[19:03:06] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[19:03:06] *** Joins: urdh (~urdh@user/urdh)
[19:03:06] *** Joins: m4lvin (~m4lvin@w4eg.de)
[19:03:06] *** Joins: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se)
[19:03:06] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[19:03:06] *** Joins: acro (~acro@user/acro)
[19:03:06] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[19:03:06] *** Joins: xacktm (xacktm@user/xacktm)
[19:03:06] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[19:03:06] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[19:03:06] *** Joins: davl (~davl@207.154.228.18)
[19:03:06] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[19:03:06] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[19:03:06] *** Joins: xstill- (xstill@fimu/xstill)
[19:03:06] *** Joins: lyxia (~lyxia@poisson.chat)
[19:03:06] *** Joins: Athas (athas@sigkill.dk)
[19:03:06] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[19:03:06] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[19:03:06] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[19:03:06] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[19:03:06] *** Joins: bonz060 (~quassel@2001:bc8:47a4:a23::1)
[19:03:06] *** Joins: Xe (~cadey@tailscale/xe)
[19:03:06] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[19:03:06] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[19:03:06] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[19:03:06] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[19:03:06] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[19:03:06] *** Joins: smorgasbord (buggy@user/smorgasbord)
[19:03:06] *** Joins: vito (sid1962@user/vito)
[19:03:06] *** Joins: pierrot (~pi@user/pierrot)
[19:03:06] *** Joins: Jon (jon@dow.land)
[19:03:06] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[19:03:06] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 252 seconds)
[19:03:07] *** Quits: kadoban (~kadoban@user/kadoban) (Max SendQ exceeded)
[19:03:07] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Ping timeout: 260 seconds)
[19:03:09] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (Ping timeout: 250 seconds)
[19:03:09] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Ping timeout: 250 seconds)
[19:03:10] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Ping timeout: 250 seconds)
[19:03:10] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (Ping timeout: 250 seconds)
[19:03:10] *** Joins: enyc (~enyc@user/enyc)
[19:03:16] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Ping timeout: 268 seconds)
[19:03:17] *** Quits: Deide (~deide@user/deide) (Ping timeout: 268 seconds)
[19:03:17] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Ping timeout: 268 seconds)
[19:03:17] *** Quits: Tisoxin (~ikosit@user/ikosit) (Ping timeout: 268 seconds)
[19:03:17] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:03:17] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:03:17] *** Joins: mniip (mniip@libera/staff/mniip)
[19:03:17] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[19:03:17] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[19:03:17] *** Joins: mmhat (~mmh@55d49507.access.ecotel.net)
[19:03:17] *** Joins: __monty__ (~toonn@user/toonn)
[19:03:17] *** Joins: mcglk (~mcglk@131.191.49.120)
[19:03:17] *** Joins: monochrom (trebla@216.138.220.146)
[19:03:17] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[19:03:17] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[19:03:17] *** Joins: AlexZenon (~alzenon@94.233.240.16)
[19:03:17] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[19:03:17] *** Joins: juhp (~juhp@128.106.188.82)
[19:03:17] *** Joins: m1dnight (~christoph@christophe.dev)
[19:03:17] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[19:03:17] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[19:03:17] *** Joins: dextaa (~DV@user/dextaa)
[19:03:17] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[19:03:17] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[19:03:17] *** Joins: jespada (~jespada@87.74.32.18)
[19:03:17] *** Joins: xsperry (~xs@user/xsperry)
[19:03:17] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[19:03:17] *** Joins: bollu (~bollu@159.65.151.13)
[19:03:17] *** Joins: canta (~canta@user/canta)
[19:03:17] *** Joins: sabx (~sabbas@user/sabbas)
[19:03:17] *** Joins: foul_owl (~kerry@94.140.8.107)
[19:03:17] *** Joins: nhs (~nhs@136.49.226.20)
[19:03:17] *** Joins: mmalter (~mmalter@88.126.10.237)
[19:03:17] *** Joins: koolazer (~koo@user/koolazer)
[19:03:17] *** Joins: jjhoo (~jahakala@user/jjhoo)
[19:03:17] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[19:03:17] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[19:03:17] *** Joins: oo_migue1 (~pi@77.252.47.226)
[19:03:17] *** Joins: df (~ben@justworks.xyz)
[19:03:17] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[19:03:17] *** Joins: exarkun (~exarkun@user/exarkun)
[19:03:17] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[19:03:17] *** Joins: tv (~tv@user/tv)
[19:03:17] *** Joins: maerwald (~maerwald@user/maerwald)
[19:03:17] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[19:03:17] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[19:03:17] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[19:03:17] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[19:03:17] *** Joins: jeffz` (~user@lambda.xen.prgmr.com)
[19:03:17] *** Joins: remedan_ (~remedan@octo.cafe)
[19:03:17] *** Joins: SoF (~skius@user/skius)
[19:03:17] *** Joins: hltk (~hltk@hltk.fi)
[19:03:17] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[19:03:17] *** Joins: nek0 (~nek0@nek0.eu)
[19:03:17] *** Joins: joeyh_ (~joeyh@kitenet.net)
[19:03:17] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[19:03:17] *** Joins: drewolson (~drewolson@user/drewolson)
[19:03:17] *** Joins: caubert_ (~caubert@136.244.111.235)
[19:03:17] *** Joins: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com)
[19:03:17] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[19:03:17] *** Joins: siers (~ij@user/ij)
[19:03:17] *** Joins: heath (~heath@user/heath)
[19:03:17] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[19:03:17] *** Joins: Teacup (~teacup@user/teacup)
[19:03:17] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[19:03:17] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[19:03:17] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[19:03:17] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[19:03:17] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[19:03:17] *** Joins: sajith (~sajith@user/sajith)
[19:03:17] *** Joins: meejah (~meejah@rutas.meejah.ca)
[19:03:18] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (Ping timeout: 268 seconds)
[19:03:19] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[19:03:19] *** Quits: SoF (~skius@user/skius) (Max SendQ exceeded)
[19:03:19] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Ping timeout: 245 seconds)
[19:03:19] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Max SendQ exceeded)
[19:03:22] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:03:23] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Ping timeout: 250 seconds)
[19:03:25] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Ping timeout: 240 seconds)
[19:03:25] *** Quits: AlexZenon (~alzenon@94.233.240.16) (Ping timeout: 256 seconds)
[19:03:25] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[19:03:32] *** Quits: sm1 (~sm@plaintextaccounting/sm) (Ping timeout: 240 seconds)
[19:03:32] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Ping timeout: 240 seconds)
[19:03:32] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Ping timeout: 240 seconds)
[19:03:34] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: maerwald[m] (~maerwaldm@user/maerwald) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: moats (~oats@user/oats) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Ping timeout: 260 seconds)
[19:03:35] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Ping timeout: 260 seconds)
[19:03:35] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Ping timeout: 260 seconds)
[19:03:35] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Ping timeout: 250 seconds)
[19:03:35] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Ping timeout: 250 seconds)
[19:03:35] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Ping timeout: 250 seconds)
[19:03:36] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Ping timeout: 250 seconds)
[19:03:38] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Ping timeout: 252 seconds)
[19:03:39] *** Joins: justIrresolute5 (~justache@user/justache)
[19:03:41] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (Ping timeout: 245 seconds)
[19:03:41] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Ping timeout: 245 seconds)
[19:03:41] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Ping timeout: 245 seconds)
[19:03:41] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (Ping timeout: 245 seconds)
[19:03:45] <lechner> Hi, how can print a    Vector (Text, Text)   as lines with a space between the two columns, please? Thanks!
[19:03:49] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Ping timeout: 250 seconds)
[19:03:49] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (Ping timeout: 250 seconds)
[19:03:49] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Ping timeout: 250 seconds)
[19:03:52] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Ping timeout: 268 seconds)
[19:04:02] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Ping timeout: 260 seconds)
[19:04:03] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (Ping timeout: 260 seconds)
[19:04:03] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Ping timeout: 260 seconds)
[19:04:09] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[19:04:16] *** Joins: litharge (litharge@libera/bot/litharge)
[19:04:33] *** Quits: siers (~ij@user/ij) (Ping timeout: 256 seconds)
[19:04:38] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[19:05:03] *** Joins: SoF (~skius@user/skius)
[19:05:21] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:05:41] *** Quits: remedan_ (~remedan@octo.cafe) (Ping timeout: 256 seconds)
[19:05:41] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:06:25] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 250 seconds)
[19:06:27] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[19:07:01] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[19:07:05] *** Joins: siers (~ij@user/ij)
[19:07:37] *** Joins: remedan (~remedan@octo.cafe)
[19:07:51] *** Joins: AlexZenon (~alzenon@94.233.240.16)
[19:07:57] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 256 seconds)
[19:08:10] *** Joins: hook54321 (sid149355@user/hook54321)
[19:09:21] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[19:09:39] <g> There isn't a canned implementation of that. You'll have to write it
[19:09:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:09:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:09:54] *** Joins: wroathe (~wroathe@user/wroathe)
[19:10:18] *** Joins: acidsys (~LSD@2.lsd.systems)
[19:10:26] <geekosaur> there are prettyprinter classes on hackage that might help
[19:10:27] <jumper149> lechner: Something like: `putStr . unlines . toList . fmap (\ (x,y) -> x ++ " " ++ y)`
[19:12:06] <merijn> or: forM_ myVec $ \(x, y) -> putStrLn (x ++ " " ++ y)
[19:12:09] <lechner> jumper149: look great, thanks!
[19:12:13] <merijn> Which seems much simpler :p
[19:12:38] <lechner> merijn: yeah, maybe
[19:12:41] <merijn> I guess forM_ is just for_ now
[19:12:43] <merijn> :t forM_
[19:12:44] <lambdabot> (Foldable t, Monad m) => t a -> (a -> m b) -> m ()
[19:12:45] <merijn> :t for_
[19:12:46] <lambdabot> (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
[19:12:48] <merijn> yeah
[19:13:19] <merijn> alternately "for_ (V.toList myVec) $ ..." if it's not a foldable vector :p
[19:14:12] <jumper149> I would prefer: `traverse (\ (x,y) -> putStrLn $ x ++ " " ++ y)`
[19:14:30] <jumper149> But it doesnt really matter
[19:14:43] <merijn> jumper149: traverse_ then :p
[19:14:53] <merijn> but for_ is just flipped traverse :p
[19:15:03] <merijn> *traverse_
[19:15:06] <merijn> :t traverse_
[19:15:07] <jumper149> haha :D
[19:15:07] <lambdabot> (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()
[19:15:14] <merijn> jumper149: No, like, literally
[19:15:17] <merijn> :t for_
[19:15:18] <lambdabot> (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
[19:15:49] <jumper149> I know, I just laughed at you for doing the same mistake missing the '_'
[19:15:55] <jumper149> :p
[19:16:01] <merijn> I find for_ works nicely with lambdas
[19:16:15] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[19:16:26] *** Joins: alx741 (~alx741@157.100.93.160)
[19:16:46] <merijn> You can make it look like a regular for loop with lambda + do: https://github.com/merijn/Belewitte/blob/55722e6374a7820b0d5925bc98cbd1686d4265a7/benchmark-analysis/src/Migration.hs#L100-L118
[19:17:13] <merijn> Then you don't have to invent a name. That style doesn't really work with traverse_
[19:17:15] <jumper149> But with traverse you write something like: putStrLn `traverse` someLines
[19:17:27] <jumper149> But honestly it really doesnt matter :D
[19:18:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:19:12] <jumper149> On another note, my first solution doesn't perform multiple IO actions. That can be a performance improvement.
[19:19:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:24] *** Joins: koolazer (~koo@user/koolazer)
[19:22:41] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[19:22:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[19:23:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:44] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:24:02] <lechner> thanks, eveyone! Haskell is such an elegant and concise language. after each line i feel like i made the world a better place---with your help
[19:25:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:26:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:26:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:26:10] *** Joins: wroathe (~wroathe@user/wroathe)
[19:26:26] *** Joins: gaff (~gaff@49.207.199.195)
[19:26:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:27:00] <gaff> "learn you a haskell for good" book -- is it no longer online?
[19:27:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:27:51] <geekosaur> site went offline last month, nobody knows why. still available via the wayback machine
[19:27:52] <jumper149> gaff: I think I read something like that in a reddit post.
[19:27:55] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Remote host closed the connection)
[19:28:02] *** Joins: litharge (litharge@libera/bot/litharge)
[19:28:28] <gaff> i see
[19:29:02] <gaff> where is the "wayback machine"? is there a link or something?
[19:29:12] <geekosaur> web.archive.org
[19:29:23] <lechner> https://archive.org/search.php?query=learn%20you%20a%20haskell
[19:29:35] <lechner> there you can also find the paper copy
[19:29:46] <lechner> pdf
[19:29:55] <geekosaur> https://web.archive.org/web/20211204094509/http://learnyouahaskell.com/
[19:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:30:16] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[19:30:34] <lechner> we should all donate to brewster kahle
[19:31:51] <gaff> lechner: thanks much
[19:32:57] <lechner> gaff: i am a newbie here (but a library commissioner in real life). the honor belongs to evybody else!
[19:33:12] <lechner> everybody here
[19:34:10] <gaff> oh i see
[19:34:21] <gaff> geekosaur: thanks much
[19:34:33] <lechner> there you go!
[19:34:35] <gaff> i wonder what happened to that site
[19:34:43] <[itchyjunk]> hm, so 1: is a partial function too it seems right? what was it a sugar syntax for?
[19:34:46] <geekosaur> best we can tell, the owner stopped paying for it
[19:35:35] <geekosaur> someone tried dropping its old IP address into their hosts file and got a page saying the site was offline probably for nonpayment
[19:36:06] <gaff> i see
[19:36:06] <geekosaur> [itchyjunk], (1:) is partially applied, yes. (please remember that "partial function" means something else in Haskell)
[19:36:18] <geekosaur> \x -> 1:x
[19:36:23] <[itchyjunk]> Oh right, partially applied
[19:36:41] *** Quits: gaff (~gaff@49.207.199.195) ()
[19:36:57] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[19:37:32] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[19:37:41] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[19:37:42] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[19:37:43] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[19:37:44] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[19:37:46] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[19:38:40] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[19:38:53] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[19:39:07] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[19:39:07] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[19:39:08] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[19:39:09] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[19:39:10] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[19:39:10] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[19:41:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:41:47] <[itchyjunk]> Is the solution really this simple? https://bpa.st/OHRQ
[19:42:58] <geekosaur> looks like it does what the problem calls for, yes
[19:43:58] *** Joins: alx741 (~alx741@157.100.93.160)
[19:43:59] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[19:45:17] *** Quits: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[19:46:29] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[19:47:12] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[19:47:40] *** Joins: shapr (~user@2601:7c0:c202:5190:cecd:8e39:7234:9a0d)
[19:47:42] *** Joins: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9)
[19:48:33] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[19:49:12] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[19:49:29] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[19:49:29] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[19:50:04] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[19:50:24] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[19:50:55] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[19:50:56] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[19:51:00] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[19:51:06] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[19:51:12] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[19:51:13] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[19:51:14] *** Joins: Deide (~deide@user/deide)
[19:51:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:51:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:51:31] *** Joins: wroathe (~wroathe@user/wroathe)
[19:51:36] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[19:51:36] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[19:52:27] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[19:52:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:52:45] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[19:52:52] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[19:53:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[19:53:26] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[19:53:35] *** Joins: moats (~oats@user/oats)
[19:54:04] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[19:54:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:55:17] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[19:55:17] *** Joins: remexre (~remexre@user/remexre)
[19:55:32] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[19:55:38] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[19:56:59] *** Joins: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489)
[19:57:01] *** Joins: cheater (~Username@user/cheater)
[19:57:16] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[19:57:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:57:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:57:55] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[19:58:37] *** Quits: husixu (~husixu@137.132.119.2) (Quit: Leaving)
[19:58:43] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[19:59:06] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[19:59:16] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[19:59:18] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[19:59:20] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[19:59:24] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[19:59:28] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[19:59:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:59:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:59:37] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[20:00:02] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[20:00:03] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c365:2459:70e0:4fac) (Quit: WeeChat 2.8)
[20:00:09] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[20:00:12] *** Joins: remexre (~remexre@user/remexre)
[20:00:21] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[20:00:23] *** Joins: siraben (~siraben@user/siraben)
[20:00:27] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[20:00:27] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[20:00:52] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[20:01:09] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[20:01:39] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[20:01:39] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[20:01:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:03:17] *** Joins: kadoban (~kadoban@user/kadoban)
[20:03:19] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[20:03:24] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[20:04:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:04:32] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[20:04:34] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[20:04:49] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[20:05:22] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[20:07:47] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[20:07:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:07:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:07:52] *** Joins: wroathe (~wroathe@user/wroathe)
[20:08:20] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[20:09:33] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[20:09:40] *** Joins: Tisoxin (~ikosit@user/ikosit)
[20:10:04] *** Joins: deadmarshal (~deadmarsh@95.38.116.69)
[20:11:00] <lechner> Hi, how can i simplify that, please?     putStrLn (intercalate " " [Text.unpack name, show errors, show warnings, show info, show pedantic, show experimental, show overrides]) 
[20:11:18] *** Joins: alx741 (~alx741@157.100.93.160)
[20:11:31] <lechner> the others are numbers Int64
[20:12:29] *** Joins: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57)
[20:12:35] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[20:12:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:12:56] <Cale> I guess you could use unwords rather than intercalate " ", they mean the same thing
[20:13:02] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[20:13:07] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[20:14:04] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[20:14:23] <geekosaur> map show [errors, warnings, info, pedantic, experimental, overrides] ? (if they're all the same type. You said Int64?)
[20:14:29] *** Joins: jinsun_ (~jinsun@user/jinsun)
[20:14:37] <lechner> yes
[20:14:41] *** Joins: boxscape (~boxscape@user/boxscape)
[20:14:55] <lechner> i tried a mix of concat and map
[20:15:00] <lechner> but got errors
[20:15:05] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[20:15:22] <geekosaur> @where paste
[20:15:22] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[20:15:58] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:16:51] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[20:17:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[20:17:59] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[20:18:52] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[20:19:37] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[20:19:44] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[20:20:00] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[20:20:00] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[20:20:12] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[20:20:35] *** Joins: sm1 (~sm@plaintextaccounting/sm)
[20:20:46] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[20:23:03] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[20:24:15] <lechner> sorry to keey you waiting   https://paste.tomsmeding.com/CKb0yrsa
[20:24:20] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[20:24:40] <lechner> i should have formatted
[20:24:51] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[20:25:59] <lechner> what's everyone's favorite formatter, please?
[20:26:08] * xerox looks at his spacebar
[20:26:32] <geekosaur> sorry, I meant the "mix of concat and map" and the resulting errors
[20:26:37] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[20:26:45] * geekosaur formats by hand, doesn't like existing formatters
[20:26:46] <monochrom> The tab key for me, but it's in emacs and it inserts spaces.
[20:26:53] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[20:27:29] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[20:28:05] *** Joins: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a)
[20:28:26] <geekosaur> and I expect any formatter would break on that qq'd SQL statement
[20:29:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:30:17] <monochrom> "computer" used to refer to people whose job is to compute. Now it refers to hardware that does the job.
[20:30:34] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:2a00:eeaf:f8c:1b54) (Remote host closed the connection)
[20:30:38] <monochrom> "typesetter" and "formatter" went down the same road.
[20:30:58] <monochrom> Perhaps it's high time "programmer" also went that way.
[20:31:15] <Rembane> I prefer to be an amateurgrammer. 
[20:31:34] <monochrom> "What's your favourite indenter?" "Oh, I just let my programmer do it."
[20:34:02] *** Joins: alx741 (~alx741@157.100.93.160)
[20:34:20] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzzโฆ)
[20:35:05] *** Joins: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9)
[20:35:42] *** Quits: mbuf (~Shakthi@122.174.247.3) (Quit: Leaving)
[20:38:18] <lechner> for sql, hasql-th is nice for beginners and easier than pg-simple. i'd ultimetaly like to upgrade to opaleye or perhaps even rel8, although maybe not for that query
[20:38:40] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[20:39:24] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:39:50] <EvanR> monochrom, how about "politician"
[20:40:01] <EvanR> oops off topic
[20:40:44] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[20:41:16] *** Joins: econo (uid147250@user/econo)
[20:42:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:43:50] <lechner> the first line doesn't compile, followed by the error     https://paste.tomsmeding.com/TQtSLY34
[20:44:22] <lechner> i loved editing that line, which read originally: the first line does not work...
[20:45:24] <c_wraith> did you want a ++ in there or something?
[20:45:26] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:45:28] <geekosaur> you are saying (concat x xs) when it's (concat xs)
[20:45:42] <lechner> is see
[20:45:52] <lechner> i see
[20:45:55] <geekosaur> you might have wanted (:) in fact
[20:45:57] <lechner> or maybe i dont
[20:46:06] <lechner> yes!
[20:48:42] <lechner> geekosaur: thanks so much! and sorry about being so poor a haskeller. i make up for it with my enthusiasm
[20:52:50] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[20:52:50] *** Joins: psydroid (~psydroid@user/psydroid)
[20:52:55] *** Joins: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net)
[20:52:58] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[20:53:29] *** Quits: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Quit: Client closed)
[20:54:25] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[20:55:35] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[20:55:55] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[20:55:57] <lechner> with manual indenting a favorite here, is there a manual of style?
[20:56:53] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[20:57:22] *** Joins: coolnickname (uid531864@user/coolnickname)
[20:57:58] <lechner> also, is there a consensus as to when $ is acceptable?
[20:59:39] <lechner> are -> and $ good positions for line breaks?
[21:00:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:00:08] <[itchyjunk]> This is the only way I could think of doing this. It does seem like it works. :: https://bpa.st/BDVA
[21:00:26] *** Joins: alx741 (~alx741@157.100.93.160)
[21:00:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[21:00:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:01:19] <ProfSimm> Could we reduce Haskell to just s-expr
[21:02:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:02:11] <c_wraith> [itchyjunk]: seems a bit odd to not just use the length function.  But it's probably homewhere where you can't do that, in which case...  that looks absolutely fine.
[21:02:24] <geekosaur> s-expr is just a way to represent an AST. Haskell can be represented by an AST. therefore, yes
[21:02:36] <[itchyjunk]> c_wraith, this is random problem set i googled for :x. i don't know a lot of inbuilt functions yet
[21:02:51] <c_wraith> > length "the"
[21:02:53] <lambdabot>  3
[21:02:58] <geekosaur> whether it's useful is another question
[21:02:58] <[itchyjunk]> oh..
[21:03:00] <ProfSimm> geekosaur: it's a very restricted way of presenting an AST. 
[21:03:19] <[itchyjunk]> I wonder how length counts it
[21:03:31] <[itchyjunk]> i was stucking thinking about a counter loop for a bit
[21:03:43] <[itchyjunk]> but then i realized i could map each char to 1's and add those
[21:03:56] <c_wraith> both ideas work fine.
[21:04:01] <geekosaur> list/Foldable, recursion
[21:04:02] <[itchyjunk]> hmm
[21:05:58] <c_wraith> here's an interesting thing for you to think about:  that last line could be    lengths = map strLength
[21:06:43] <[itchyjunk]> hmm without any parameter?
[21:06:55] *** Joins: werneta (~werneta@137.79.226.240)
[21:06:57] <c_wraith> without naming the parameter, anyway.
[21:07:07] <c_wraith> the important idea is that functions are values
[21:07:25] <geekosaur> if you have foo x = bar x, you can drop the x from both sides of the =
[21:07:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:07:45] <[itchyjunk]> :O
[21:07:54] <c_wraith> map strLength is a function of type [String] -> [Int]
[21:07:55] <geekosaur> (only if it's exactly that form)
[21:08:21] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:08:27] <[itchyjunk]> ahh
[21:08:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:08:51] <[itchyjunk]> lengths just become a sugar notation for map strLength, a shorthand in that sense
[21:08:54] <[itchyjunk]> makes sense!
[21:08:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:09:18] <c_wraith> yep. being able to think about functions like that helps a lot for working in Haskell.
[21:09:18] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:09:43] <c_wraith> You don't always have to write code that way, but you should be comfortable reading it
[21:09:52] <[itchyjunk]> Right!
[21:09:55] *** Joins: alx741 (~alx741@157.100.93.160)
[21:14:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:16:49] *** Quits: werneta (~werneta@137.79.226.240) (Quit: leaving)
[21:17:02] *** Joins: werneta (~werneta@137.79.226.240)
[21:29:48] <monochrom> lechner: I don't follow it strictly, but most of it is reasonable most of the time: https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
[21:30:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:30:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:31:25] <lechner> monochrom: thanks!
[21:32:31] *** Joins: alx741 (~alx741@157.100.93.160)
[21:32:33] <lechner> Hi, i got an error building hlint from hackage with ghc 8.10.7         http://paste.debian.net/1226024/
[21:33:14] <lechner> The failure occurred during the
[21:33:15] <lechner> final install step
[21:33:21] <lechner> is that a loca issue?
[21:33:28] <lechner> local?
[21:34:03] <monochrom> "Installing library in ..." doesn't sound like failure.
[21:34:42] <monochrom> Oh, "copyFile: resource exhausted (No space left on device)"?
[21:34:53] <lechner> whoops
[21:36:06] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:37:27] <lechner> sorry, a loca ghc build i had forgotten about took up 8G
[21:37:37] <lechner> plus, i can't type
[21:38:41] <lechner> on that note, is there a good strategy for cleaning up CABAL-DIR, other than 'rm -rf'?
[21:39:45] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:39:51] <monochrom> Perhaps my https://github.com/treblacy/cabalgc helps.
[21:40:03] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[21:40:03] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[21:40:14] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:41:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:42:07] <lechner> monochrom: thanks! is there a reason it's not on Hackage?
[21:43:25] <monochrom> I am a poor maintainer.
[21:43:28] <APic>   Ok
[21:43:32] <APic> s/  //
[21:45:22] <lechner> monochrom: i'd upload it to Debian but the program is so development-oriented, it may belong onto Hackage even if there is a danger it might remove itself
[21:48:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[21:49:26] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzโฆ)
[21:49:27] <lechner> monochrom: thanks for the style link. that's where i came across the strictness thing i mentioned here in an aeson context a few months ago. is that consensus?    https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md#data-types
[21:50:07] <monochrom> This one no. One of the few exceptions.
[21:50:17] <lechner> ok, thanks!
[21:52:21] <c_wraith> he was one of the pioneers in that cargo cult. :P
[21:53:40] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:53:41] <monochrom> Data type strictness is a case of two echo chambers refusing to acknowledge that the other one exists.
[21:54:08] <c_wraith> data type strictness is great - when it doesn't break code.
[21:54:21] <c_wraith> He broke a library I was using once by making it unnecessarily strict.
[21:54:24] <monochrom> One echo chamber always does number crunching and their data types are always records of numbers. Of course the number fields should be strict, even unboxed.
[21:55:05] <monochrom> The other echo chamber always does huge but non-strict data structures. Of course the recursive fields should be non-strict.
[21:55:35] <lechner> i think i am on the non-strict side, but not sure
[21:55:45] <monochrom> Overall, of course the whole point of echo chamber confort zone is to deny that someone out there may be doing something else.
[21:56:37] *** Quits: werneta (~werneta@137.79.226.240) (Ping timeout: 240 seconds)
[21:58:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:59:28] <c_wraith> I get a lot of value from even making numeric fields non-strict. It comes in really handy for a bunch of cases to be able to use mfix to evaluate things.
[22:00:03] *** Joins: alx741 (~alx741@157.100.93.160)
[22:00:23] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57)
[22:00:26] <lechner> yay! brittany left my hasql qq intact
[22:00:44] <c_wraith> given that whitespace inside a qq is significant, it had better. :P
[22:01:03] <c_wraith> well.  may be significant, at least.  depends on the particular qq
[22:01:59] <lechner> someone speculated earlier that non-human formatters might change it
[22:02:18] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[22:02:20] <geekosaur> that was me. some are known to at least break on quasiquoters
[22:02:35] <geekosaur> (not necessarily reformat, just refuse to continue)
[22:02:37] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:03:03] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 256 seconds)
[22:03:39] *** pretty_dumm_guy is now known as pretty_dumm_guy_
[22:03:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:04:02] <lechner> i don't blame them. qq used to scare me too, but i love them with hasql
[22:04:08] *** pretty_dumm_guy_ is now known as pdg_afk
[22:07:19] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:08:09] *** pdg_afk is now known as pretty_dumm_guy
[22:11:11] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:14:31] *** Quits: caubert_ (~caubert@136.244.111.235) (Quit: WeeChat 3.3)
[22:14:46] *** Joins: caubert (~caubert@136.244.111.235)
[22:18:03] *** Joins: o-90 (~o-90@139.60.178.30)
[22:18:45] <lechner> Hi, is brittany's style silly?     https://yairchu.github.io/posts/silly-haskell-formatting
[22:19:04] *** Parts: o-90 (~o-90@139.60.178.30) ()
[22:20:03] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[22:20:43] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:20:58] *** gallup is now known as otherouestbillie
[22:21:11] *** Quits: otherouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:21:13] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[22:21:40] *** Joins: alx741 (~alx741@157.100.93.160)
[22:21:49] <lyxia> do you think people would make it if they thought it were silly
[22:22:09] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:22:47] <lechner> no. in fact i like it, but i am new
[22:24:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:24:29] *** Joins: pottsy (~pottsy@129.227.183.244)
[22:25:34] <lechner> facing broad disapproval, i am looking for the lesser evil among hindent, hfmt, ormolu and brittany (and perhaps others) as seen by the people
[22:26:14] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[22:26:24] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:27:43] * bsima likes ormolu
[22:27:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[22:30:57] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Quit: Leaving)
[22:31:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:31:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:33:16] <polyphem> lechner: here is a strawpoll https://strawpoll.de/b823715 , now everybody in here can vote 
[22:33:27] *** Joins: hammock (~Hammock@2600:1700:19a1:3330::588)
[22:34:08] <geekosaur> oughtta put it on reddit and twitter too given that the article says they differed about formatting
[22:34:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[22:34:19] *** Joins: vicfred_ (~vicfred@user/vicfred)
[22:34:33] <lechner> polyphem: thanks! i was just about to post one from pollcode
[22:35:00] <lechner> polyphem: stylish-haskell may be missing
[22:35:22] <lechner> also, it is in german
[22:35:25] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57) (Quit: Client closed)
[22:35:42] <lechner> or maybe it can tell that i speak german
[22:35:56] <geekosaur> it's in German here too
[22:36:01] <geekosaur> well, half in german
[22:36:13] <lechner> how about this one?   https://vote.pollcode.com/95187937
[22:36:19] <geekosaur> \I had to apply the translator to make sure I was pressing the right button, highlighting notwithstanding
[22:36:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[22:37:05] *** Quits: hammock (~Hammock@2600:1700:19a1:3330::588) (Client Quit)
[22:37:12] <polyphem> yeah, dont know how to edit possible answers now, after its live, and yeah it defaulted to german
[22:37:41] <Clint> you also may end up accidentally conflating style with practical concerns like how badly it chokes on CPP directives and such
[22:39:08] *** Quits: incertia (~incertia@24.42.241.219) (Quit: ZNC 1.7.5 - https://znc.in)
[22:40:05] <lechner> this one is much prettier   https://www.polltab.com/4Q-JMh73xw
[22:40:33] <geekosaur> so now we have to vote in 3 places? :รพ
[22:40:46] *** Joins: incertia (~incertia@24.42.241.219)
[22:41:06] <polyphem> last one has captchas , duh
[22:42:37] *** Joins: Akiva (~Akiva@user/Akiva)
[22:42:48] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[22:43:04] <polyphem> its ironic however, how haskellers voting one different source formatters need to explore the problem space also for the voting tools ....
[22:43:27] <polyphem> s/one/on/
[22:43:44] <Cale> My favourite source formatter is none
[22:43:52] <geekosaur> which is most strongly typed? :รพ
[22:44:12] *** Joins: alx741 (~alx741@157.100.93.160)
[22:44:50] <lechner> more seriously, i am not sure the last one offers interim results before the end of february!
[22:45:34] <polyphem> lechner: says live votes , and flashes red dot
[22:46:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:46:46] <Cale> I also greatly prefer having arrows at the start of the lines in type signatures. Putting them at the end is hard to read.
[22:47:18] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:48:04] <lechner> i just vote on the last one, as one of three
[22:48:23] <yushyin> but ... but ormolu!
[22:48:56] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:48:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:48:59] <Cale> Also, all of the implementations of sortByM in this blog post are obnoxiously written. Use do-notation when appropriate.
[22:51:13] *** Quits: deadmarshal (~deadmarsh@95.38.116.69) (Ping timeout: 256 seconds)
[22:51:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:51:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:51:44] *** Joins: wroathe (~wroathe@user/wroathe)
[22:51:50] *** Joins: emf (~emf@2620:10d:c090:400::5:c06d)
[22:52:23] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[22:52:55] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[22:57:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:57:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:00:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:01:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[23:02:17] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[23:02:30] *** Joins: werneta (~werneta@137.79.233.19)
[23:04:09] *** Quits: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net) (Excess Flood)
[23:05:08] *** Joins: alx741 (~alx741@157.100.93.160)
[23:06:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:06:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:06:50] *** Joins: wroathe (~wroathe@user/wroathe)
[23:07:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:08:27] *** Joins: Pickchea (~private@user/pickchea)
[23:09:32] <lechner> Hi, someone once told me to put qualified imports below explicit ones (and use no others), What about this pattern?    import qualified Data.Text as Text; import Data.Text (Text(..))  ? Thanks! 
[23:09:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:09:43] <Cale> Who cares
[23:09:51] *** Quits: werneta (~werneta@137.79.233.19) (Quit: leaving)
[23:10:04] *** Joins: werneta (~werneta@137.79.233.19)
[23:10:05] <Cale> It really doesn't matter whether qualified imports come first or what
[23:10:46] <Cale> The order in general doesn't matter, but it's nice to sort them just for the sake of being able to navigate through them and tell whether you have something in particular imported
[23:11:00] <lechner> okay, i just put them all together. brittany will sort them
[23:11:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:12:56] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[23:14:03] <geekosaur> I'd say what's more important is to do it consistently across a project
[23:15:44] <Cale> I also don't think I care very much about consistency between modules, so long as in each file it's not a jumbled mess and it's not formatted in some obnoxious way that's hard to edit.
[23:16:17] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[23:16:41] *** Joins: cryptomonad (~cryptomon@194.191.225.149)
[23:17:37] <tomsmeding> Cale: would you count this as obnoxious? https://paste.tomsmeding.com/bpwrBBcP
[23:17:58] <Cale> haha, yes
[23:18:05] <Cale> because of the spaces, lol
[23:18:15] <tomsmeding> that's for making room for 'qualified'
[23:18:21] <tomsmeding> this is hfmt's default behaviour
[23:20:13] <tomsmeding> Cale: watch what happens when you make the module name longer https://paste.tomsmeding.com/q9EV7wTH
[23:20:27] <Cale> glorious
[23:20:55] <tomsmeding> luckily I'm not the only one disliking this style
[23:21:25] <Cale> I have never seen an automatic Haskell source formatter that I liked
[23:21:43] <Cale> They all ultimately do something super obnoxious somewhere
[23:22:06] <EvanR> they should get it over with, double down, and just do obnoxious things everywhere
[23:22:14] <EvanR> the something awful haskell formatter
[23:22:17] *** Quits: werneta (~werneta@137.79.233.19) (Ping timeout: 240 seconds)
[23:22:28] <tomsmeding> like, if we all scream equally loudly, at least we're agreeing on that?
[23:22:41] <geekosaur> some claim that's ormolu :รพ
[23:22:56] <geekosaur> de gustibusโฆ
[23:23:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:24:26] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:25:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:25:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:25:35] *** Joins: wroathe (~wroathe@user/wroathe)
[23:26:08] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[23:27:40] *** Joins: alx741 (~alx741@157.100.93.160)
[23:30:16] <tomsmeding> if only some claim it, then apparently it isn't so :p
[23:30:45] <geekosaur> someone must disagree since it's used
[23:31:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:33:54] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[23:35:25] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:38:21] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:37] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[23:43:00] <monochrom> I use emacs haskell-mode's C-c C-, to sort and format imports. It does put extra spaces when other import lines have "qualified". I don't mind either way. Some thing is lined up and I'm happy.
[23:43:32] *** Joins: vysn (~vysn@user/vysn)
[23:43:35] <monochrom> In the long run, GHC has a new extension for "import X qualified" to help.
[23:44:29] <geekosaur> if that's helping
[23:44:39] <polyphem> i think 80% a good job formatting is worth somthing , especially if you consider consistent formating of all files in a project
[23:45:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:47:48] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57)
[23:49:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:50:11] *** Joins: alx741 (~alx741@157.100.93.160)
[23:53:25] <EvanR> qualified import X
[23:53:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:53:40] <EvanR> very lined up
[23:53:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:53:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:53:42] *** Joins: wroathe (~wroathe@user/wroathe)
[23:53:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:53:58] *** Joins: tomku (~tomku@user/tomku)
[23:55:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[23:56:31] <tomsmeding> the only elements of an import line that can be confused are the module name and the as-alias; hence as long as we require that the module name comes before the as-alias, any ordering is unambiguous
[23:56:49] <tomsmeding> as (empty) qualified Data.Text Text import
[23:57:24] <monochrom> import M which is the local alias for Data.Map
[23:57:29] <monochrom> (Sorry for the COBOL haha)
[23:57:36] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:58:13] * tomsmeding was briefly confused what you were referring to when writing "COBOL", but then realised that's probably the actual syntax in that language
[23:58:29] * tomsmeding thinks of AppleScript
[23:59:43] <monochrom> Oh, I just like to pick on COBOL's "it reads like English". Plus, IIRC, "multiple x by y into z" is actual COBOL (except I use lower case here to be less annoying).
