[00:00:52] <Alipha> class instances are put on the stack or the heap or global section--it just depends upon where you create the instance, same as ints or doubles or whatnot
[00:01:34] <teut> oh yes, I just remembered , its about the malloc call
[00:01:44] <Alipha> ... don't use malloc in c++ :-P
[00:01:48] <teut> if you used "new" then malloc
[00:01:58] <teut> is used and heap is used
[00:02:08] <vdamewood> I guess you shouldn't be using new anymore either.
[00:02:09] <teut> ya sure
[00:02:25] <teut> ya  , unique_ptr
[00:03:11] <teut> so that means the heap is useless now?
[00:03:43] <Alipha> and putting stack frames "on the heap" wouldn't solve anything--you still need to allocate a specific size for the stack frames, which could still overflow. in fact, today, stacks are actually just memory allocated from "the heap"
[00:04:43] <teut> stack is continuous memory vs heap is a more random one
[00:05:00] <teut> what register is stack?
[00:05:08] <teut> and what heap?
[00:05:18] <teut> am I making sense?
[00:05:36] <Alipha> though the stack overflowing is actually kind of a silly problem with today's computers. because what the OS _could_ do is if there's a page fault (if the stack overflows the page of memory it was allocated) then the OS could just allocate another page for the stack adjacent to the current one and pretend like the overflow didn't even happen
[00:05:45] <vdamewood> Well, you're poking into implementation details so pick an implementation.
[00:05:57] <vdamewood> And there's no such thing as a 'heap register'.
[00:06:53] <Alipha> allocating from the heap involves making an OS call which the OS has a complex data structure to manage free memory, and the OS grabs some free memory and returns it back to you
[00:07:34] <teut> yes , then why doesnt the OS does that ?
[00:08:12] <Alipha> *shrugs* no one's ever thought to do it? i don't know. i thought of the idea just now
[00:08:37] <teut> write a paper fast
[00:09:18] <teut> vdamewood  implementation of what?
[00:09:23] <Alipha> ... for intel-based computers, esp points to the bottom (note: the stack grows down) of the stack and ebp is typically used to point to the beginning of the current stack frame
[00:09:24] <teut> memory management
[00:09:26] <teut> ?
[00:09:46] <teut> yes thats what I was asking  Alipha
[00:10:21] <teut> esp is stack pointer , ebp is base pointer
[00:10:41] <vdamewood> teut: Well, this is C++-basic. C++ works on more systems than just the x86 family.
[00:10:44] <teut> isnt is something physical?
[00:10:47] <teut> it*
[00:10:50] <Alipha> esp is directly modified by push/pop/call/ret, whereas it's just convention that ebp is used as the base pointer
[00:10:51] <teut> the stack
[00:11:36] <teut> yes that s true vdamewood , c++/c  languages are abstractions over assembly
[00:12:19] <vdamewood> And different ISAs work differently. there are no ebp and esp registers on ARM.
[00:12:25] <teut> I tried to learn assembly and there comes so much confusion, MASM , NASM , and then know about processors
[00:12:39] <teut> each processor has different languages
[00:12:48] <teut> language*
[00:13:22] <teut> actually books focus on INTEL
[00:13:30] <teut> so I just know that
[00:14:31] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:15:40] <Alipha> teut: the diagram here is antiquated, even though it's still commonly shown today: https://stackoverflow.com/questions/32418750/stack-and-heap-locations-in-ram ... this diagram is only relevant to single-process OSes (e.g., DOS), and ever since Windows 95, there's no arrangement of those sections in memory. when an application starts, the OS will allocate space for the stack, static data, literals, and
[00:15:42] <Alipha> instructions for that application FROM THE HEAP, which means those 4 sections may be scattered anywhere throughout memory. and then the application will allocate additional heap pages from the OS as needed
[00:17:02] <teut> I know the following from nand to tetris course
[00:17:53] <teut> you write HDL and get a chip, the chip has ALU and a register which is a logic gate (FLIP FLOP)
[00:18:07] <teut> chip = microprocessor
[00:19:04] <teut> a thread is a stack+ accessories  which is a group of registers
[00:20:01] <teut> in INTEL x64 we got        4*  8  bit + 2* 16 bit + 32 bit register
[00:20:11] <teut> is this all right?
[00:21:16] <teut> a thread is inside the microprocessor
[00:23:48] <teut> 4*  8  bit + 2* 16 bit + 32 bit register     this doesnt sum to 64 I forgot the numbers
[00:28:59] *** Quits: AmR (~AmREiSa@41.36.24.35) (Quit: Konversation terminated!)
[00:44:06] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[00:44:16] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[00:52:58] *** Joins: AmR (~AmREiSa@41.36.24.35)
[00:53:52] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:08:48] *** Joins: RoKenn (~RoKenn@2001:a61:35bf:6201:ec5e:ac3c:39a7:37d2)
[01:08:48] *** Quits: RoKenn (~RoKenn@2001:a61:35bf:6201:ec5e:ac3c:39a7:37d2) (Changing host)
[01:08:48] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:54:50] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[02:00:23] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 264 seconds)
[02:15:49] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[02:16:10] *** Joins: RoKenn (~RoKenn@2001:a61:35bf:6201:ec5e:ac3c:39a7:37d2)
[02:16:10] *** Quits: RoKenn (~RoKenn@2001:a61:35bf:6201:ec5e:ac3c:39a7:37d2) (Changing host)
[02:16:10] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:24:49] *** Joins: Zaelus (~Zaelus@user/zaelus)
[02:24:54] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:25:03] *** Quits: Zaelus (~Zaelus@user/zaelus) (Read error: Connection reset by peer)
[02:25:21] *** Joins: Zaelus (~Zaelus@user/zaelus)
[02:36:08] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:49:56] *** Quits: Zaelus (~Zaelus@user/zaelus) (Quit: Leaving)
[02:59:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[03:11:47] *** Quits: magla (~gelignite@55d403ec.access.ecotel.net) (Quit: Stay safe!)
[03:18:28] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[03:23:23] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:26:32] *** Quits: kylese (~kylese@p5dd8b8a7.dip0.t-ipconnect.de) (Quit: Leaving)
[03:29:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:47:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[03:57:06] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[04:52:53] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[05:01:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[05:06:46] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[06:43:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[07:06:09] *** Joins: ferdna (~ferdna@user/ferdna)
[07:23:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Ping timeout: 264 seconds)
[08:05:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:09:27] *** Joins: Raziel (~Raziel@user/raziel)
[08:26:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:27:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[09:17:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:31:53] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[11:21:37] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[11:44:27] *** Joins: Colt (~Colt@user/colt)
[11:47:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[12:44:53] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Ping timeout: 250 seconds)
[12:52:48] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[13:03:22] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[13:03:46] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[13:06:16] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[13:34:02] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Ping timeout: 260 seconds)
[13:48:08] *** Joins: kylese (~kylese@p5483508b.dip0.t-ipconnect.de)
[13:49:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:51:31] *** PJBoy is now known as Guest3495
[13:51:47] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:55:40] *** Quits: Guest3495 (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[14:01:34] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[14:34:37] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[14:34:57] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[14:48:42] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:49:14] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[14:57:03] *** Joins: RoKenn (~RoKenn@2001:a61:35bf:6201:4a0d:2959:81d6:9577)
[14:57:03] *** Quits: RoKenn (~RoKenn@2001:a61:35bf:6201:4a0d:2959:81d6:9577) (Changing host)
[14:57:03] *** Joins: RoKenn (~RoKenn@user/rokenn)
[15:51:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[15:54:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[15:57:55] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:05:14] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[16:07:20] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[16:36:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:11:15] *** Joins: teut (~teut@182.68.64.194)
[17:58:25] *** Joins: meator (~meator@user/meator)
[18:01:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[18:03:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1)
[18:09:23] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:59:17] *** Quits: kylese (~kylese@p5483508b.dip0.t-ipconnect.de) (Quit: Leaving)
[19:26:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:31:30] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[19:32:47] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[19:33:16] *** vinleod is now known as vdamewood
[19:37:00] *** Joins: RoKenn (~RoKenn@2001:a61:34b0:fe01:6001:87ab:7761:919b)
[19:37:00] *** Quits: RoKenn (~RoKenn@2001:a61:34b0:fe01:6001:87ab:7761:919b) (Changing host)
[19:37:00] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:17:01] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:17:22] *** Joins: RoKenn (~RoKenn@2001:a61:34b0:fe01:e33d:b4b7:cb61:194)
[20:17:22] *** Quits: RoKenn (~RoKenn@2001:a61:34b0:fe01:e33d:b4b7:cb61:194) (Changing host)
[20:17:22] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:29:01] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:38:35] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
[20:51:38] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:54:14] *** X-Scale` is now known as X-Scale
[21:24:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:31:58] *** Joins: teut (~teut@182.68.64.194)
[22:35:07] *** Joins: zenstoic (uid461840@hampstead.irccloud.com)
[22:42:19] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:45:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:49:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[22:55:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[23:11:19] *** Quits: teut (~teut@182.68.64.194) (Quit: Client closed)
