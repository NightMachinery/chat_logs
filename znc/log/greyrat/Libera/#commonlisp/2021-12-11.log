[00:02:55] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[00:05:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:06:05] <lisp123> Does PRINT-OBJECT call MAKE-LOAD-FORM for user-defined classes?
[00:06:55] <Bike> print-object does not call make-load-form (unless you define a method to i guess)
[00:06:59] <Bike> why would it?
[00:08:13] <lisp123> I'm just wondering how to implement PRINT-OBJECT for my own classes (not print-unreadable-object)
[00:08:33] <lisp123> I just tried defining a method for MAKE-LOAD-FORM and got this error when trying to print-readably: ; Evaluation aborted on #<PRINT-NOT-READABLE {10016F1D93}>.
[00:08:34] <pdietz> User defined objects do not have a readable printed form unless you define it.
[00:09:19] <Bike> how exactly do you think print-object and make-load-form are related? they kind of aren't, generally.
[00:09:41] <rotateq> (defmethod print-object ((object your-class) stream) ...) maybe?
[00:09:54] <pdietz> (let ((*print-readably* t)) (print (make-instance 'foo))) ==> print-not-readable error
[00:10:22] <Guest74> i think sbcl prints classes readably.
[00:10:40] <Guest74> last time i checked years ago.
[00:10:44] <pdietz> You define a method for print-object on your class, yes.  And it should check the value of *print-readably*.
[00:10:50] <pdietz> SBCL does not.
[00:11:03] <rotateq> it prints them with #<
[00:11:23] <pdietz> That's the unreadable form printed when *print-readably* is nil.
[00:11:24] <lisp123> Bike: Yeah, I'm just confused because I can't seem to find an example online on how to implement PRINT-OBJECT
[00:12:01] <rotateq> lisp123: i wrote for you the beginning :)
[00:12:14] <Guest74> I dunno, he keeps saying implement.
[00:12:14] <rotateq> you could even dispatch on the stream class if needed
[00:13:10] <Catie> Correct me if I'm wrong, but I think the hardest part is getting it to read back in properly and consistently. Aliasing, I'm pretty sure, is also a pretty big issue for serializing objects like that
[00:13:29] <pdietz> I see 2557 occurrences of (defmethod print-object ... in the current quiklisp dist.
[00:13:36] <Guest74> pdietz: seems I confused classes with hashes.
[00:13:47] <Guest74> s/hashes/hashtables/
[00:14:35] <lisp123> rotateq: Got it! It works. I reference a make-load-form within print-object
[00:14:36] <lisp123> Thanks!
[00:14:47] <pdietz> rotateq:  "In some implementations the stream argument passed to a print-object method is not the original stream, but is an intermediate stream that implements part of the printer. methods should therefore not depend on the identity of this stream."
[00:15:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:15:36] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[00:15:58] <lisp123> Catie: Yes, I agree. However, if I just stick to my own very small set of classes, then its straightforward. Abstracting for the general case is where the complexities come in I guess
[00:17:08] <lisp123> This is what I did (defmethod print-object ((obj test) stream) (let ((*stream* stream)) (make-load-form obj)))
[00:17:09] <_death> lisp123: if you want to print an object readably, you can use a reader macro.. look at defstruct, for example, which can print an instance as #S(foo :bar 42) .. another useful reader macro is #.
[00:17:24] <Catie> lisp123: Okay same page, thank you! I was thinking too general, I think
[00:18:46] <lisp123> _death: Yes, that's true. I have a few reader macros already, so I can leverage those. I'm just happy now that I'm using PRINT-OBJECT and not reinventing everything
[00:19:08] <lisp123> Catie: Yes, I tried to write something general and gave up :)
[00:19:31] <rotateq> pdietz: that's good to know again, i swear i never violated this rule before ^^
[00:19:53] <lisp123> (my code above is incorrect, need to make *stream* a special variable, but one gets the point)
[00:23:45] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:24:06] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:25:17] <_death> make-load-form has nothing to do with printing per se, but it's about letting CL know how to externalize objects so that they can be dumped in fasls and restored when the fasl is loaded
[00:32:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[00:32:36] <lisp123> That makes sense
[00:32:47] <Guest74> can you use that for binary formatis?
[00:33:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:33:02] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:33:30] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:34:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[00:35:12] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:35:40] <_death> it's not about encoding, more about preserving object equivalence possibly identity
[00:36:38] <Guest74> ah, so can't really use it for space saving, the implementation just does it's own thing?
[00:37:14] <_death> yeah, the contents of a compiled file are implementation dependent
[00:41:07] <_death> that said, you could say wrap an array and have a make-load-form that recreates that array however you wish.. say by decompressing
[00:41:56] <Guest74> haven't actually had an opportunity to play with that yet.
[00:44:37] <Guest74> what's the secret formula to get emacs to stop inserting tabs?  having to reformat pasted code is getting annoying.
[00:44:53] <_death> (setq-default indent-tabs-mode nil) ?
[00:45:11] <Guest74> that sounds like it, thanks.
[00:46:17] <Guest74> although I'm guessing the first - belongs with default-inden...?
[00:47:44] <_death> nope.. it sets the default value.. emacs supports buffer local variables
[00:47:58] *** Joins: rogersm (~rogersm@90.166.177.48)
[00:49:10] *** Joins: nature (~nature@45.32.235.173)
[00:50:38] <Guest74> ok, thanks.
[00:54:20] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[00:54:20] *** ChanServ sets mode: +o MichaelRaskin
[00:55:07] <VincentV`> Guest74: aggressive indent and never think about either tabs or spaces or formatting again
[00:55:14] <VincentV`> btw does anyone know how do I match both type and assign the match to a variable? I am trying
[00:55:14] <VincentV`> (trivia:match '(a :b c) ((list x (keyword y) z)))
[00:55:14] <VincentV`> but that errors out NIL is undefined
[00:55:14] <VincentV`>  
[00:56:30] <hayley> The first thing that comes to mind is (trivia:match ':a ((and x (type keyword)) ...))
[00:56:32] *** VincentV` is now known as VincentVega
[00:57:01] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:57:23] <VincentVega> hayley: cool, it works, I was doing by analogy with list and honestly wiki didn't help me much
[00:57:24] <VincentVega> thanks
[01:00:01] *** Joins: Oladon (~olad@98.43.81.226)
[01:04:48] <Guest74> VincentVega: is that some emacs package? ...or a way of life?
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:07:19] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[01:07:34] <VincentVega> Guest74: that's something you gotta find out for yourself... https://github.com/Malabarba/aggressive-indent-mode
[01:08:33] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[01:08:36] <Guest74> meh, M-q is muscle memory now.
[01:09:48] <VincentVega> Guest74: memory may fail you, but not aggressive indent
[01:11:54] <VincentVega>  Guest74: I will just say that it needs something like paredit along with it, it's all the way type of deal.
[01:13:57] <lisp123> VincentVega: Is there any issues with aggressive indent or does it work perfectly always?
[01:17:44] *** Joins: zardoz (~bc8147f2@cerf.good1.com)
[01:18:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:22:44] <VincentVega> lisp123: I haven't had any issues.
[01:27:30] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[01:31:11] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:31:51] <_73> When I recompile my package (`sly-compile-and-load-file`), the special variable values do not get reset to their original value before I mutated them. How can I reset their values?
[01:32:10] <Bike> use defparameter instead of defvar
[01:33:11] <_73> ok I understand the problem now
[01:33:15] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c1:d427:d028:8cd3:dbb5:c2a2)
[01:35:50] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 260 seconds)
[01:37:17] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[01:44:51] <_73> When would you use defvar instead of defparameter?
[01:45:17] <Guest74> when you want to keep the values.
[01:45:24] <hayley> You would use DEFVAR if you don't want the values of variables to be reset after re-evaluating DEFVAR forms.
[01:45:33] <Bike> for example, when *foo* is an alist that you keep adding entries to
[01:46:30] <_73> I see. It has to do with wanting the situation I was just confused about.
[01:46:43] <Guest74> my window manager lives in a defvar
[01:52:36] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:53:21] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:55:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:00:51] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:01:21] *** Joins: gaqwas (~john@dynamic-095-117-004-089.95.117.pool.telefonica.de)
[02:06:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[02:30:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[02:30:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:31:05] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:35:17] *** Quits: pve (~pve@37-136-183-171.rev.dnainternet.fi) (Quit: leaving)
[02:36:00] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:37:25] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 252 seconds)
[02:38:28] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[02:38:37] *** Quits: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a) (Remote host closed the connection)
[02:42:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[02:44:04] *** Joins: notzmv (~zmv@user/notzmv)
[02:45:19] *** Quits: random-nick_ (~random-ni@87.116.160.199) (Ping timeout: 250 seconds)
[02:52:41] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c1:d427:d028:8cd3:dbb5:c2a2) (Ping timeout: 250 seconds)
[02:54:23] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:50d5:bcfc:15ee:afeb) (Quit: Konversation terminated!)
[02:56:55] <pjb> _73: I find their names are swapped, for historical reasons: I would use DEFPARAMETER to define global variables, (they are reset, when you reload the program), and DEFVAR to define program parameters (they're not reset when you reload the program).
[02:57:12] <pjb> _73: now of course, program para
[02:57:40] <pjb> -meters would have to be defined in a package different than the packages defined by the program, since those packages are not defined yet, when the program is not loaded yet.
[03:03:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:05:07] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[03:06:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:13:51] <frodef> b
[03:16:16] <hayley> b
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:38] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:18:07] *** Quits: VincentVega (~user@212.241.29.218) (Ping timeout: 252 seconds)
[03:31:00] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[03:32:08] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[03:36:14] *** Quits: gaqwas (~john@dynamic-095-117-004-089.95.117.pool.telefonica.de) (Ping timeout: 260 seconds)
[03:38:10] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:41:11] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:44:31] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d10e:cf28:805f:4f6f) (Ping timeout: 252 seconds)
[03:49:29] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:49:49] *** Quits: s-liao (~s-liao@101.86.99.70) (Client Quit)
[03:51:11] *** Joins: s-liao (~s-liao@101.86.99.70)
[04:04:26] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 256 seconds)
[04:07:12] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[04:07:26] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:14:08] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[04:18:06] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[04:28:05] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[04:28:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:49:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:54:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:55:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:04:45] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:05:53] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:10:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[05:12:32] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[05:21:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:22:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:23:34] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:33:01] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[05:37:05] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:42:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:42:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:52:55] *** Quits: jpl01 (~user@2001:16b8:495b:7600:af40:a648:9882:a3cc) (Remote host closed the connection)
[05:55:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:16:22] *** Joins: Catie (~user@user/catie)
[06:27:53] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:36:35] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:40:20] *** Joins: igemnace (~ian@user/igemnace)
[06:40:32] *** Quits: Catie (~user@user/catie) (Quit: something's)
[06:44:11] *** Quits: zardoz (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[06:50:52] <Guest74> anybody know what causes asdf to complain it can't find the file it was compiling in /tmp ?
[06:52:13] <Guest74> oh, that it can't find its TRUENAME
[07:30:25] <beach> Good morning everyone!
[07:44:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[07:55:04] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[07:59:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:06:37] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:08:52] *** Joins: makomo (~makomo@user/makomo)
[08:09:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:16:49] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:19:31] *** Joins: semz (~none@user/semz)
[08:33:43] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:37:06] *** Joins: Oladon (~olad@98.43.81.226)
[08:49:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:52:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[08:58:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[09:06:53] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:18:08] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[09:20:00] <susam> Good morning, beach!
[09:20:08] <susam> Good morning, everyone! Hope you are all having a great weekend.
[09:22:40] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[09:38:57] *** Joins: shka (~herr@109.231.0.226)
[09:42:59] <beach> Hello susam.  Great indeed.  When I woke up, I discovered that hayley had already made good progress on global value numbering for SICL.  I like it when things happen while I'm asleep. :)
[09:43:03] <jackdaniel> pancakes pancakes
[09:43:09] <jackdaniel> two more to fry
[09:49:49] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[09:52:31] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:02:34] *** Quits: dre (~dre@60.229.45.121) (Quit: Leaving)
[10:06:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[10:06:41] <phantomics> Anyone here use usocket much? I'm having trouble reading the responses I'm supposed to get after writing TCP packets to a socket stream, there doesn't seem to be any way to receive the expected ACK packet
[10:13:50] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[10:14:26] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[10:14:49] *** Joins: Alfr (~Alfr@user/alfr)
[10:20:03] <Guest74> did you flush/finish the output?
[10:20:52] <Guest74> Or are you talking about the actual packet and not the payload of the tcp packet?
[10:23:57] <phantomics> The docs for the device I'm talking to say to expect the response data as part of an ACK packet
[10:24:43] <phantomics> I may have found what I need to do: (write-binary datum (socket-stream *service*)) (read-binary 'binary-format (socket-stream *service*))
[10:25:00] <phantomics> I'm using lisp-binary to send/receive data in a binary format
[10:27:18] <Guest74> what I meant to say by flush/finish was FORCE-OUTPUT.
[10:30:47] <phantomics> I do (force-output (socket-stream *service*)) at the end of the function, it just returns NIL.
[10:31:07] <phantomics> Should I do that before reading from the stream?
[10:33:25] <Guest74> just needs to be done once.  You might want to use wireshark or something similar to see what's going on.
[10:34:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:34:55] <Guest74> things will refuse to communicate if you don't introduce yourself the right way or end your communications the right way.
[10:35:17] <phantomics> Ok, it seems that I'm getting the data the same whether I (force-output) before or after doing the (read binary). This stage of the problem seems to be solved, thanks
[10:35:32] <Guest74> np
[10:36:15] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:37:53] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:38:16] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:40:01] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:40:18] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:40:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:44:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:44:51] *** Joins: ldb (~user@user/ldb)
[10:46:39] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:46:52] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[10:59:23] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:22:43] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[11:29:30] *** Joins: gaqwas (~john@dynamic-095-118-141-032.95.118.pool.telefonica.de)
[11:38:33] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:21bf:4083:62a3:40b2)
[11:43:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:02:31] *** Joins: treflip (~user@95.79.32.99)
[12:06:25] <susam> beach: That is great news. It is nice to see a successful collaboration occurring on a programming language IRC channel. :)
[12:06:53] <hayley> Don't worry, it only bursts into flames when trying to compile (LOOP REPEAT 1 COLLECT 1).
[12:09:57] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[12:13:46] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[12:17:07] *** Joins: notzmv (~zmv@user/notzmv)
[12:44:24] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c03:feaf:f4fc:a85)
[12:47:30] *** Joins: s-liao (~s-liao@101.86.99.70)
[12:55:34] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[12:55:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:06:19] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:08:34] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[13:10:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:10:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:11:50] *** Joins: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:15:22] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:17:53] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:18:06] *** Quits: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:22:03] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:24:31] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:24:40] *** Joins: nature (~nature@45.32.235.173)
[13:24:59] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:25:17] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:38:41] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[13:40:08] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[13:41:00] *** Joins: VincentVega (~user@212.97.4.44)
[13:41:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:42:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:44:43] *** Lord_of_Life_ is now known as Lord_of_Life
[13:47:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[13:48:02] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:55:46] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:21bf:4083:62a3:40b2) (Ping timeout: 268 seconds)
[14:01:33] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:03:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:18:29] *** Joins: random-nick_ (~random-ni@87.116.160.199)
[14:21:40] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[14:25:26] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:37:10] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[14:50:16] *** Joins: s-liao (~s-liao@101.86.96.154)
[15:01:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[15:07:32] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[15:16:12] *** Joins: pve (~pve@178-55-91-23.bb.dnainternet.fi)
[15:26:19] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[15:33:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[15:44:16] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[15:53:37] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:21bf:4083:62a3:40b2)
[15:55:17] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[15:57:00] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[16:16:22] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:21bf:4083:62a3:40b2) (Ping timeout: 268 seconds)
[16:20:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:22:51] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[16:24:04] <rotateq> What does the term "finalization" mean for a class in CLOS?
[16:24:40] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:30:01] <pjb> rotateq: http://metamodular.com/CLOS-MOP/class-finalization-protocol.html
[16:31:35] <rotateq> thank you pjb
[16:39:09] <rotateq> some days ago i was curious why AMOP does not list update-instance-for-redefined-class in the cross reference at the near end (at least in my version of the book i have)
[16:40:05] <beach> rotateq: It is a bit strange.  Sometimes, the AMOP lists standard functions and sometimes it does not.
[16:41:06] <beach> By "standard functions" I mean functions defined by the Common Lisp standard, as opposed to defined by the MOP.
[16:41:18] <rotateq> yes I see
[16:42:25] <beach> When the MOP mentions such a function, I tried to remember to put in a note and a reference to the Common Lisp HyperSpec.
[16:42:36] <beach> mop make-instance
[16:42:36] <specbot> http://metamodular.com/CLOS-MOP/make-instance.html
[16:43:00] <beach> ... as you can see in the Comments and Remarks section.
[16:44:31] <rotateq> I do. :)
[16:48:33] <beach> Oh, and sometimes the two definitions are not identical, and then I try to mention such differences.
[16:53:07] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 250 seconds)
[17:00:39] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:14:57] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[17:35:52] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[17:36:46] *** Joins: nature (~nature@45.32.235.173)
[17:38:00] *** Joins: Colt (~Colt@user/colt)
[17:38:36] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:56:59] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[17:57:32] *** Joins: Colt (~Colt@user/colt)
[18:00:25] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[18:00:39] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:01:01] *** Joins: Colt (~Colt@user/colt)
[18:02:32] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:12] *** Joins: Colt (~Colt@user/colt)
[18:04:29] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:56] *** Joins: Colt (~Colt@user/colt)
[18:05:10] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:19:48] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:23:07] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:23:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:23:28] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:26:43] <lisp123> I have a long algorithm with multiple steps (around 6). Each step does not make sense outside of the algorithm, so typically I would look to define them as local functions
[18:27:48] <lisp123> However, that would make the overall function too long, so I am currently planning on using global functions. To avoid passing too many variables between functions, I plan on using dynamic scope. Furthermore, to denote these functions to be considered "local" vs. useful in their own right, I'm planning on writing them as _function-name.
[18:28:11] <lisp123> (1) Thoughts on this approach + (2) is there a better naming convention to follow?
[18:28:11] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:28:45] *** Joins: Jing (~hedgehog@125.106.89.1)
[18:29:43] <beach> Just use the package as the namespace, and don't export those "local" functions.  Then you can name them whatever you like.
[18:31:17] <lisp123> That works
[18:31:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:33:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:37:09] <rotateq> lisp123: I like using TAGBODY to prototype algorithms from The Art of COmputer Programming.
[18:37:29] <lisp123> rotateq: How does that work?
[18:37:54] <Nilby> lisp123: You might consider using a state object if there's enough shared between functions.
[18:38:23] <beach> Packages still seem under-utilized, and Common Lisp books and other material, especially older stuff, suggest that it was even worse then.
[18:38:36] <rotateq> lisp123: you mean tagbody?
[18:38:58] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[18:39:04] <lisp123> Nilby: I'm actually doing that, it feels "icky" since its not purely a functional approach, but the problem with functional programming is you don't save down the intermediate steps either
[18:39:47] *** Joins: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[18:39:48] <beach> lisp123: I think rotateq means that the algorithms in those books have a lot of GOTO and such in them, so TAGBODY is a good match.
[18:39:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:40:27] <Nilby> With a state object it's easy to switch between implict dynamic and an explicit argument.
[18:40:33] *** Joins: treflip (~user@95.79.32.99)
[18:40:36] <rotateq> yes, in a sense Don has a very clear style, as long as the current context and notation is clear
[18:40:40] *** Quits: OlCe (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:40:59] <lisp123> rotateq & beach: Ah I see. I will try that and see how it feels
[18:41:12] <rotateq> and it's not even near to trivial bringing those into the correct LOOP form for example
[18:41:34] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[18:41:50] <rotateq> lisp123: look into Practical Common Lisp. was the point on some chapter where I learned that this way it's translatable 1:1
[18:41:57] <beach> rotateq: But what makes you think it is this kind of algorithm that lisp123 is working on?
[18:42:37] <Nilby> mmix as tagbody?
[18:42:43] <rotateq> page 250 and following in PCL
[18:43:23] <rotateq> beach: I just wanted to give the possibility. :) and has he wrote "multiple steps"
[18:43:29] <ns12> Hello, when gensym generates a unique symbol, how does it know that the generated symbol will always be unique?
[18:43:37] <rotateq> hi ns12
[18:44:00] <lisp123> rotateq: Do you know which chapter (I have the online copy, have ordered the hardcopy during the recent Apress sale but waiting for it)
[18:44:02] *** Quits: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[18:44:02] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:44:09] <rotateq> it works with *gensym-counter* and uses #: to make an uninterned symbol
[18:44:17] <pjb> ns12: it knows, because it creates a new symbol and doesn't intern it in any package.
[18:44:26] <rotateq> lisp123: chapter 20
[18:44:32] <pjb> ns12: the name of the symbol can be not unique, but the symbol is a new one.
[18:44:37] <Alfr> lisp123, how about simply ensuring that you don't modify the state object? Instead, always create a new one, so that you can rely on (foo state bar baz) always giving you an equivalent result for the same state, bar and baz? ;p
[18:44:41] <lisp123> rotateq: Thanks!
[18:45:01] <pjb> ns12: and since it's not interned, there's no way to read it again. You can only have it if you have it. (a reference to it).
[18:45:13] <pjb> ns12: compare with gentemp.
[18:45:21] <rotateq> lisp123: Which algorithm are you on right now?
[18:45:23] <Nilby> ns12: Note that it's only unique for a certain lisp image.
[18:45:46] <ns12> rotateq: pjb: But what if I reset *gensym-counter* to its initial value after every call to gensym?
[18:46:26] <rotateq> you could but you shouldn't :)
[18:46:35] <pjb> (let ((*print-circle* t)) (prin1-to-string (loop repeat 3 collect (let ((*gensym-counter* 42)) (gensym))))) #| --> "(#:g42 #:g42 #:g42)" |#
[18:47:11] <pjb> ns12: as I said, you can easily have gensym generate symbols with the same name, but it doesn't matter.
[18:47:22] <pjb> (let ((*print-circle* t)) (prin1-to-string (loop repeat 3 collect (make-symbol "FOO")))) #| --> "(#:foo #:foo #:foo)" |#
[18:48:09] <pjb> Note if they were the same symbol, with *print-circle*: (let ((*print-circle* t)) (prin1-to-string (loop with g = (gensym) repeat 3 collect g))) #| --> "(#1=#:g200731 #1# #1#)" |#
[18:48:26] <lisp123> Alfr: It's more that none of the intermediate steps make any sense on their own, but they are useful to keep a copy of in, for example, to auto-generate a printed summary of the process. The "process-record" is generated fresh on each run of the overall algorithm, and each step will generate a component of the record
[18:49:09] <beach> ns12: Two symbols are not the same just because they have the same name.  Symbol identity is a separate concept.
[18:49:21] <pjb> ns12: the advantage of gensym over make-symbol, is just that it makes it easier to read sexps using them. With make-symbol, you would easily be confused.
[18:50:15] <lisp123> rotateq: Just a theorem verifier. Take a statement to prove and a theorem to check against, and see if the theorem can prove the statement. So I have about 5 arrays (theorem outputs, required inputs of theorem, theorem inputs in terms of the statement to prove, available results in the problem set that can satisfy the required inputs, etc.)
[18:50:50] <rotateq> lisp123: do you already know ACL2?
[18:51:07] <ns12> pjb: I don't quite understand your explanation of the advantage of gensym over make-symbol? How does gensym make s-expressions easier to read?
[18:51:25] <lisp123> I heard of it, but don't want to read its code as then I will just end up copying it vs. thinking on my own
[18:52:00] <Alfr> lisp123, okay. But I only intended to offer a way out, as you meant a state object isn't sufficiently functional as to your liking. (Though this certainly depends on what you consider functional.)
[18:54:27] <beach> ns12: Every time you call MAKE-SYMBOL with a particular name, a (new) symbol with that name is created, so if you do that several times, it is not easy to distinguish them to the person seeing their names.  With GENSYM, each new symbol usually has a separate name, you when you print out a bunch of them, you can tell the difference.
[18:55:16] <ns12> beach: Understood. Thanks.
[18:55:25] <lisp123> Alfr: No worries, your suggestion does make sense though
[18:57:47] <lisp123> beach: I need to get into the habit of using packages more for their external/internal symbols separation...not sure why I (and I guess others) have developed an aversion to it
[18:57:59] <lisp123> It would make more structured to test later
[18:58:19] <beach> lisp123: Yeah, it puzzles me.  Especially now that we have package-local nicknames.
[18:58:24] <ns12> pjb: Thank you for the explanations.
[19:00:25] <lisp123> I tend to think of each package as being self contained, that might be the hang up
[19:00:41] <ns12> beach: "With GENSYM, each new symbol usually has a separate name ..." - Why do you say "usually" instead of "always"?
[19:01:19] <beach> ns12: Didn't we just discuss resetting the *GENSYM-COUNTER*?
[19:01:43] <beach> If you do, then the same names will appear again.
[19:02:09] <beach> The symbols will still be unique, of course, but the names will be the same.
[19:03:13] <beach> ns12: Try (list (let ((*gensym-counter* 1)) (gensym)) (let ((*gensym-counter* 1)) (gensym)))
[19:03:32] <beach> ns12: Now you have a list of two unique symbols with the same name.
[19:03:54] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:04:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[19:05:19] <ns12> Okay. Thank you.
[19:05:31] <beach> Sure.  Does that make sense to you?
[19:06:54] <ns12> beach: Yes. Your explanation is clear.
[19:07:00] <beach> Great!
[19:07:39] <Nilby> I'm glad that CL can do things that would normally be disaster, like reset *gensym-counter* and (delete-package :cl) because they're potentially useful for bootstrapping, image operations, and making new languages.
[19:08:36] <Guest74> Xach any plans on adding metamodular to l1sp?
[19:08:59] <ns12> Nilby: What's the use of resetting *gensym-counter*?
[19:09:11] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[19:10:56] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10b1:fbca:adff:8c3e:24f2:8846)
[19:11:16] <Nilby> ns12: If you wanted to reset your image, say to make compiler output identical. Of course you'd have to take other precautions and preparations.
[19:11:17] <rotateq> ns12: a bit like the sense for setting and resetting counters in for a LaTeX document :)
[19:11:43] *** Joins: OlCe (~user@lfbn-nic-1-510-34.w90-116.abo.wanadoo.fr)
[19:15:10] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[19:15:21] <ns12> Nilby: rotateq: I guess I'm still far from having a legitimate use for these things in Common Lisp. But I'm happy to know that the language provides such flexibility. I need to study more ...
[19:15:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:16:05] <rotateq> so you can just profit from the things that your implementation does automatically for you
[19:17:40] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:19:46] *** Joins: igemnace (~ian@user/igemnace)
[19:23:25] <Nilby> It's not very interesting, but (mapcar (lambda (x) (eval-in x '*gensym-counter*)) '(sbcl ccl clisp ecl cmucl abcl)) => (435 1 2949 1 2496 44)
[19:24:27] <lisp123> Nilby: What's that?
[19:24:43] <Nilby> Initial values of *gensym-counter* in various lisps.
[19:25:07] <lisp123> CCL and ECL have the best defaults
[19:25:20] <lisp123> strange how sbcl differs from cmucl
[19:25:40] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[19:25:43] <Guest74> are they really initial counts?  Maybe they use lots of gensyms?
[19:28:12] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:29:09] <Nilby> Guest74: Those are the results for me from running with no user init files. I guess the non-1 ones might vary with version.
[19:31:16] <Guest74> i see that. but maybe they use gensym in their implementation is what I'm saying. I guess grep might reveal that.
[19:37:33] <rotateq> lisp123: try setting *gensym-counter* to -1 :P
[19:38:05] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:38:32] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:39:47] <_death> I found this a useful hack a year or two ago (defun make-var-name (&optional (x "G")) (gensym (string-right-trim "0123456789" x)))
[19:41:12] <_death> so I could have it generate symbols like "FOO123", and generate symbols from that name that'd be "FOO124" and not "FOO123124"
[19:41:43] <White_Flame> neat
[19:42:09] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:55:44] *** Quits: cosimone (~user@93-47-231-91.ip115.fastwebnet.it) (Remote host closed the connection)
[19:56:05] <_death> ooh, I've not noticed the existence of issue GENSYM-NAME-STICKINESS:LIKE-TEFLON until now
[19:56:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:56:59] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:57:01] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[19:57:11] <rotateq> haha like teflon. like when i saw this week in uiop the exported symbol NUKE-SYMBOL
[20:01:52] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:37:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[20:39:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:40:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:44:30] *** Quits: Jing (~hedgehog@125.106.89.1) (Read error: Connection reset by peer)
[20:45:07] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:45:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:50:16] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[20:50:23] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[21:17:29] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:22:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:24:03] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:24:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:24:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:37:13] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:39:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:40:16] <Guest74> any thoughts on what reads better? font:monospacedp font:fixed-width-p font:fixed-pitch-p font:monospaced? font:fixed-width? font:fixed-pitch?
[21:46:01] <rotateq> in CL wie suffix predicates with "p" or "-p" as you correctly gave by convention :P for example the str lib provides both for some predicates
[21:47:23] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:47:44] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[21:48:25] <White_Flame> I use and prefer the scheme-style #\? suffix.  not much into legacy style just for its own sake
[21:48:27] <rotateq> but okay, there's slot-boundp in the standard
[21:48:33] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[21:48:40] <Guest74> though i'm leaning towards ? as it returns the actual width if it is fixed. p might be misleading even though some things like digit-char-p use it anyways.
[21:49:31] <Guest74> though i guess after saying that it eliminates monospace.
[21:49:36] <White_Flame> I only use ? for "pure" booleans
[21:50:09] <semz> I think just fixed-width would work if it's an optional width value
[21:50:41] <semz> Returns nil if there is no fixed width, because the width is not fixed
[21:51:43] <Guest74> yeah, that's starting to sound better. at least width is more understandable than pitch.  It is a generalized boolean though so not sure just fixed-width indicates that directly.
[21:54:37] <Guest74> cause I do see myself using this in rendering pipeline though I guess i'd probably stuff it in a variable anyways and can name that something readable for the IF.
[21:56:06] <Guest74> needing to write a generic font/glyph interface before more work on text rendering.  I got so much font specific stuff it's ridiculous.
[21:57:24] <White_Flame> it never ends
[21:57:39] <White_Flame> there will always be some other assumption somewhere from some other language/font
[21:58:53] <Guest74> I'm sure whenever whomever is working on otf is finished there will be more stuff.  so far covered for all the old tech.
[22:00:09] <Guest74> I do have no clue where to stick unit conversions though.
[22:01:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:04:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:14:39] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[22:16:40] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[22:22:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:23:16] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:24:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:27:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:29:27] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:29:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[22:30:02] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:31:59] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10b1:fbca:adff:8c3e:24f2:8846) (Ping timeout: 250 seconds)
[22:35:10] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:41:26] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:45:30] <mfiano> Hello all
[22:46:50] <mfiano> As part of a new project, I had to wrap quite a few libc functionality for FreeBSD's libc implementation. It's growing enough that it deserves to be lifted out into its own library. Any idea what one would even call a set of low and highlevel wrappers for a small subset of a specific libc implementation?
[22:47:54] <mfiano> Ya know, naming things is hard and all
[22:48:04] <phoe> cl-freebsd-libc-ffi
[22:48:52] <mfiano> I was considering something similar, but I have no intention of covering all of libc. This is very very tiny as of yet
[22:49:12] <phoe> don't cover all of it yet then, just the subset that you need
[22:49:26] <phoe> leave the rest to the future you, even if it turns out to be someone else
[22:49:29] <mfiano> I guess that doesn't need to be reflected in the name
[22:50:34] <mfiano> I'm also upset at things like opne()
[22:51:05] <phoe> opne()?
[22:52:29] <mfiano> signature is basically (path, flags, ...), where flags is either logiored by the user, or given as &rest. I don't like the former. and the ... at the end is a umask mode for when a file is created etc
[22:52:48] <mfiano> obviously mode won't work well if flags is &rest
[22:52:56] <mfiano> things like this annoy me
[22:53:32] <phoe> (open ... :flags '(:foo :bar :baz) :umask ...)
[22:53:46] <mfiano> and then there's things like ioctl which _really_ annoy me
[22:53:49] <phoe> with a compiler macro that checks for constant flags
[22:54:03] <phoe> and calls an #'%open with a precomputed integer bitmask
[22:54:27] <mfiano> the defcfun of ioctl() requires an &rest at the end, which makes it expand into a lisp _macro_, not a lisp function
[22:56:33] <mfiano> Hmm, maybe. I'm just annoyed I can't treat some c functions as lisp functions because of the way defcfun works
[22:56:46] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[22:59:13] <mfiano> https://gist.github.com/mfiano/84468ad5b8688dab59e9559cbdbf5d58
[23:00:54] *** Quits: cosimone (~user@93-47-231-91.ip115.fastwebnet.it) (Remote host closed the connection)
[23:06:04] *** Joins: cosimone (~user@93-47-231-91.ip115.fastwebnet.it)
[23:12:29] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[23:20:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:25:56] <pjb> rotateq: what is a "slot-bound" ?
[23:27:23] <rotateq> no I mean SLOT-BOUNDP
[23:27:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[23:28:36] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:29:59] <pjb> rotateq: the difference between slot-bound-p and slot-boundp is that in slot-bound-p we test if the object is a slot-bound, and in slot-boundp we test if the slot is bound.
[23:30:54] <pjb> It's like string-lessp vs. string-less-p   If you had objects that are string-less, then you could test them with string-less-p.  But if you want to compare two strings with lessp, then use string-lessp
[23:31:36] <pjb> This is why defstruct lets you specify the :predicate name.
[23:31:44] <pjb> The default is not always correct.
[23:32:50] <VincentVega> I refer to this quite often https://www.cliki.net/Naming+conventions (the predicate explanation is also there)
[23:34:03] <_death> pjb: when would it not be correct, according to this criterion?
[23:36:39] <rotateq> that's a good point, thx
[23:38:29] <mfiano> How do I represent a "const" type annotation in a C parameter list using CFFI?
[23:39:50] <_death> pjb: it's true that it's "not always correct" if the convention has another rule.. if the type is a single word (no hyphens) then P (no hyphens) is used.. like stringp or consp
[23:39:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:39:57] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[23:44:44] *** Joins: srhm (~srhm@user/srhm)
[23:49:59] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[23:50:59] *** Joins: akoana (~ah@user/akoana)
[23:54:25] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[23:54:48] *** Joins: hobo (~hobo@204.128.242.10)
[23:56:54] <_73> How can I mutate a list special variable by looping through it and mutating each element? This example code suggests that you cannot do this with `dolist`: http://dpaste.com/ACHTCQVNQ
[23:57:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:58:37] <rotateq> _73: NUM is not a symbol-macro so it doesn't wonder me
