[00:19:20] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:b40c:806a:27ba:87ae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:20:14] *** Quits: wacki (~wacki@87.122.81.3) (Quit: Leaving.)
[00:53:08] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:53:21] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[01:31:43] *** Joins: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd)
[02:43:50] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[02:53:39] *** Quits: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:07:41] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[03:11:43] *** Joins: jealousmonk (~user@user/jealousmonk)
[03:25:47] *** Joins: pikrzysztof (~kris@leaf.dragonflybsd.org)
[03:47:12] *** Joins: TCZ (~tcz@91.150.178.124)
[03:47:41] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[04:07:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:59] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[05:25:55] *** Joins: Celelibi (celelibi@user/celelibi)
[05:30:18] <Celelibi> Hey, I was wondering if there's a channel for Answer Set Programming.
[06:04:31] *** Sauvin is now known as Vieillard
[07:34:30] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:45:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:51:39] <sakasama> Not that I'm aware of, though it's occasionally been a topic of discussion here.
[07:56:43] *** Parts: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Leaving)
[08:02:57] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:22:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[09:09:31] <Celelibi> Well, let's just say that combinatorial explosion during grounding is a bitch. :p
[09:21:10] <Celelibi> The only thing that's bothering me with prolog is that it only does backward chaining and depth-first search.
[09:21:43] <Celelibi> While a mixed-chaining with a bidirectional SMA*+ would likely be very much awesome. ^^
[09:24:13] <White_Flame> the strict ordering of side effects generally confounds general use of another model
[09:24:24] <White_Flame> but certainly libs for doing such things exist
[09:26:56] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:13:30] <ttmrichter> There are Prolog dialects that have other models.
[10:14:14] <ttmrichter> One of them has pluggable resolution models where different source modules in the same program can have different resolution mechanisms.
[10:16:49] <ttmrichter> Ah, here it is.  Ciao.
[10:17:08] <ttmrichter> https://ciao-lang.org
[10:27:03] <yauhsien> it depends. for example, though we know that flatten/2 makes depth-first flattening, you can build a breadth-first one by yourself and it will be so-called N-pass approach.
[11:31:55] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[11:36:30] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[11:39:33] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[12:26:40] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[12:27:36] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:28:30] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[12:33:00] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:38:16] *** Vieillard is now known as Sauvin
[13:00:59] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[13:23:49] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:24:54] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[13:29:46] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:31:20] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:25:08] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[14:30:31] *** Joins: Cienisty (Cienisty@user/cienisty)
[14:45:07] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:50:18] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[14:55:03] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:36:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246)
[15:36:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246) (Changing host)
[15:36:18] *** Joins: skapata (~Skapata@user/skapata)
[16:47:28] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[16:55:31] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[16:57:10] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[17:30:11] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:37:27] <stis_> Hmm hashmaps can be improved a lot!!
[17:41:19] *** Joins: wacki (~wacki@87.122.81.3)
[17:46:56] *** Joins: TCZ (~tcz@91.150.178.124)
[18:30:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:19:07] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[19:35:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:43:59] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[20:11:25] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[20:19:50] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:32:44] *** Joins: RLa (~RLa@85.253.187.184.cable.starman.ee)
[21:10:54] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:15:59] *** Joins: econo (uid147250@user/econo)
[21:19:36] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[21:23:48] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:45:05] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:48:31] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:52:11] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[23:04:05] *** Joins: yauhsien_ (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[23:07:28] *** Quits: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[23:13:23] <Celelibi> yauhsien_, I could do a lot of things myself. Including a search program in a state-space described by prolog-like rules. That's actually the reason I looked into ASP.
[23:13:30] <Celelibi> ttmrichter, I'll have a look at cia.
[23:13:34] <Celelibi> ciao*
[23:19:05] <aindilis> Celelibi: what is the use case?
[23:20:14] <Celelibi> One is essentially program analysis. Specifically, finding the user inputs that lead the program in a given goal state.
[23:20:52] <Celelibi> The other is maximizing the score of a 2048-like game. But with a variable and much larger action-space.
[23:21:49] <aindilis> cool
[23:22:05] <aindilis> i'm interested in both those use cases
[23:22:53] <Celelibi> Well, I hope you know that program analysis in general is undecidable. ^^
[23:23:12] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[23:23:15] <aindilis> one sec
[23:24:08] <Celelibi> Doesn't mean we can't do anything. We just can't always prove the goal is unreachable.
[23:24:36] <aindilis> srry phone call
[23:24:37] <aindilis> back
[23:25:50] <aindilis> you mean Rice's theorem?
[23:25:53] <Celelibi> Exactly.
[23:26:36] <aindilis> cool, so what is your approach, also what is the game?
[23:26:44] <aindilis> btw, I have to leave in a few imns
[23:26:46] <aindilis> *mins
[23:27:27] <Celelibi> Well, my approach is to use some variation of the A* algorithm to navigate the state-space. And NOT ground everything first. :D
[23:27:35] <aindilis> :)
[23:27:39] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:27:55] <Celelibi> Since the state-space is described with rules, we could apply some SAT techniques like CDCL.
[23:28:03] <aindilis> googling
[23:28:05] <aindilis> I really like search, have you seen the book "Heuristic Search"?
[23:28:42] <aindilis> I remember there being some serious advances in SAT solvers recently (as of a few years ago)
[23:29:07] <Celelibi> And some planning techniques to make the search agnostic to unordered actions. Because when the order doesn't matter, we should not explore all the orders possible to end up in the same state anyway.
[23:29:52] <Celelibi> Makeing the search bidirectionnal would be nice too.
[23:30:01] <aindilis> you mean in reversible domains?
[23:30:08] <Celelibi> I have not seen this book. I don't read books usually, they're too long. ^^
[23:30:12] <aindilis> ah
[23:30:23] <Celelibi> What's a reversible domain?
[23:30:27] <aindilis> my goal is to build a knowledge base of data structures and algorithms
[23:30:34] <Celelibi> I mean, we can perform forward and backward chaining.
[23:30:36] <aindilis> one where for every action there is an inverse action
[23:30:37] <aindilis> ah
[23:30:55] <aindilis> cool
[23:30:58] <aindilis> have you seen PFC?
[23:31:03] <Celelibi> No, what's this?
[23:31:18] <aindilis> https://github.com/logicmoo/pfc
[23:31:53] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:31:54] <Celelibi> Ah, nice.
[23:32:35] <Celelibi> Anyway, with this bidirectional chaining and CDCL and maybe some more reasonning on lifted actions, we could probably do some cool stuff.
[23:32:46] <Celelibi> And the game is integer snake.
[23:33:04] <aindilis> are you familiar with some of the different Prolog-based ATP and planner systems?, like PIE, RSasak, PTTP, FLUX, etc?
[23:33:30] <[relay]_> <dmiles> i am using PFC to organize the CDCL
[23:33:37] <aindilis> :)
[23:33:59] <Celelibi> You have a 5x5 grid initially filled with random integers in 1..3. You draw a path in the grid such that every cell holds the same number. The last cell will now hold the sum of the path.
[23:34:10] <Celelibi> The other cells are re-filled with random numbers.
[23:34:38] <Celelibi> Suppose you know the random number generator (therefore they are not random). Maximize the score.
[23:34:48] <aindilis> https://ludii.games/ <- doesn't seem to mention integer snake
[23:35:04] <Celelibi> This game kinda fell off the internet.
[23:35:54] <Celelibi> I'm not yet familiar with these prolog-based planners. But I've spent the last few days reading a lot about planning and search.
[23:36:13] <Celelibi> I guess I'll go on for a few days or weeks. ^^
[23:36:14] <aindilis> please keep me updated about your progress on writing Prolog-based program analysis and search
[23:36:38] <aindilis> (well dmiles really knows this much better than I do, you should try to chat with him about)
[23:38:14] <aindilis> I have a few more references to Prolog-based proving/search, if you want I can get back to you later with all the names/urls of the systems I've found.
[23:38:31] <Celelibi> Sure!
[23:38:51] <aindilis> cool, adding to todo list, and noting what you're working on. okay have to go now. o/ gl!
[23:39:34] <Celelibi> I found it's actually pretty difficult to find newer references on planning. Most things I find (tools and papers) are quite old.
[23:41:28] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[23:41:39] <Celelibi> BTW, what does ATP means in that context?
[23:41:50] <Celelibi> Google keeps talking about tennis.
[23:43:09] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[23:44:15] <[relay]_> <dmiles> ATP = automated theorem provering
[23:44:24] <Celelibi> Thanks.
[23:45:29] <[relay]_> <dmiles> what i been meaning to do is set up a constrain system that lets you generate such grids
[23:45:53] <[relay]_> <dmiles> at leat decaritiely like with foreward chaining
[23:48:10] <[relay]_> <dmiles> what i might need ot do for my own sanity is make sure the code that sets up and maintains teh CDCL is not spread over 3 git repos
[23:49:50] <Celelibi> We're talking about conflict-driven clause learning, right?
[23:49:57] <[relay]_> <dmiles> yes
[23:50:21] <Celelibi> Had a doubt for a moment. ^^
[23:51:52] <[relay]_> <dmiles> when you take PTTP (by Stickel) and apply Rickard OKeefe clausifications but include the negative (modus tollens rules) you get the ultimate in conflict-driven clause learning
[23:53:04] <[relay]_> <dmiles> PTTP = https://cse.sc.edu/~mgv/csce798F06/stickel89prolog.pdf
[23:54:36] <[relay]_> <dmiles> a, b => c    becomes    c:- a,b     ~b :- a, ~c     ~a :- b, ~c
[23:55:56] <[relay]_> <dmiles> the 2nd form says  if    a was prevent true and c was proven false that is adequate proof that b must be false
[23:56:24] <[relay]_> <dmiles> the 2nd form says  if    a was proven true and c was proven false that is adequate proof that b must be false
[23:57:21] <[relay]_> <dmiles> this makes sure we never go after any hard proofs of b
[23:58:11] <[relay]_> <dmiles> the ideal is that we have these extra level of heuristics
[23:59:08] <[relay]_> <dmiles> the nice part is that we have more infornmation abotu what things are not
