[00:16:14] <FromDiscord> <lamersc.com 🐧> I’m genuinely curious, are there plans for a native LLVM backend in the future? https://media.discordapp.net/attachments/371759389889003532/874740444997759047/image0.png
[00:16:24] <FromDiscord> <lamersc.com 🐧> I know there’s nlvm, but just noticed this in the docs
[00:21:46] *** Joins: max22- (~maxime@2a01cb0883359800a69cb564a1298a47.ipv6.abo.wanadoo.fr)
[00:22:54] <FromDiscord> <konsumlamm> apart from nlvm, not that i know of
[00:29:00] <FromDiscord> <tsoj> Is there some kind of (unofficial) convention how to name library functions that shouldn't be used directly by the user, but need to be public?
[00:29:54] <FromDiscord> <haxscramper> `xxxImpl`, `xxxAux`
[00:30:18] <FromDiscord> <haxscramper> You can also move things to `private/`
[00:47:00] <FromDiscord> <tsoj> sent a code paste, see https://play.nim-lang.org/#ix=3vAn
[00:54:49] <ozzz> another question, is there any sleep() which may handle ms?
[00:56:05] <FromDiscord> <tsoj> doesn't `sleep()` from os use milliseconds?
[00:56:41] <ozzz> proc sleep(milsecs: int)
[00:56:48] <ozzz> correct, sorry
[01:52:30] <FromDiscord> <Jakraes> Is there an expression to transform any number into an int? Just like there's $ to transform anything into a string
[01:56:00] <FromDiscord> <Elegantbeef> If it's within the range of an int you can just do `int(yourNumber)`
[01:57:20] <FromDiscord> <Jakraes> Unfortunately that doesn't work
[01:58:03] <FromDiscord> <Jakraes> Even if I do int(3.0) it doesn't work
[01:59:34] <FromDiscord> <Elegantbeef> !eval echo int(3.0)
[01:59:37] <NimBot> 3
[02:00:37] <FromDiscord> <undersquire> !eval echo "Hello"
[02:00:41] <FromDiscord> <undersquire> 😭
[02:00:41] <NimBot> Hello
[02:00:44] <FromDiscord> <undersquire> oh
[02:01:05] <FromDiscord> <Jakraes>  https://media.discordapp.net/attachments/371759389889003532/874766828650524712/Screenshot_8.png
[02:01:33] <FromDiscord> <Jakraes> It doesn't work like this for example
[02:01:35] <FromDiscord> <Elegantbeef> You're assigning int to test which is a float
[02:01:45] <FromDiscord> <Jakraes> Ooooh
[02:01:46] <FromDiscord> <Jakraes> So that's why
[02:01:49] <FromDiscord> <Jakraes> Thank you!
[02:01:50] <FromDiscord> <Elegantbeef> Nim isnt dynamically typed
[02:02:04] <FromDiscord> <Jakraes> Yeah I completely forgot about that
[02:02:08] <FromDiscord> <Jakraes> Thank you
[02:03:26] <FromDiscord> <Elegantbeef> Error messages are your friend
[02:09:18] <FromDiscord> <Jakraes> I was reading them but I wasn't getting there lmao, I was thinking "Yeah that's what I want to happen" but yeah, completely forgot nim wasn't dynamically typed
[02:32:26] <madprops> What's the proper way to add a public method to an object?
[02:32:29] <madprops> I'm doing: method getInt*(a:NapArg, fallback=0, exit_on_fail=true): int {.base.} =
[02:32:37] <madprops> but I get: Error: attempting to call undeclared routine: 'getInt'
[02:32:58] <madprops> NapArg is a ref object
[02:34:05] <FromDiscord> <Elegantbeef> that is the proper way, is the `NapArg` type exported?
[02:34:13] <madprops> type NapArg* = ref object
[02:34:20] <madprops> I import the file
[02:34:49] <madprops> should I import the type manually?
[02:34:55] <FromDiscord> <Elegantbeef> Nah
[02:36:18] <FromDiscord> <Elegantbeef> Also what's the point of the method if it's non inheritable type?
[02:37:01] <madprops> the aim is just to offer an obj.getIt() method
[02:37:03] <madprops> what's the proper way?
[02:37:08] <madprops> getInt*
[02:37:16] <FromDiscord> <Elegantbeef> if you dont need to override you just make a proc
[02:37:43] <FromDiscord> <Elegantbeef> So it becomes `proc getInt(a:NapArg, fallback=0, exit_on_fail=true): int`
[02:38:24] <FromDiscord> <Elegantbeef> But it's still weird the `getInt` wasnt accessible
[02:39:46] <FromDiscord> <Elegantbeef> Yea i can only reason you tried to call `getInt` on a non `NapArg` object
[02:40:07] <madprops> i'll check, thanks
[02:44:18] <madprops> so the issue is that to make it work in the integration file, I need to not just import "appname" but also the "types"  file
[02:44:31] <madprops> since it's a library I don't want users to have to do more than just import appname
[02:44:49] <madprops> so I'll have to move the procs to the main file I guess
[02:45:13] <FromDiscord> <lamersc.com 🐧> Is there a Nim roadmap?
[02:45:16] <FromDiscord> <Elegantbeef> you can always export the types in the `appname`
[02:45:19] <FromDiscord> <lamersc.com 🐧> And if so, where can I find it?
[02:45:28] <FromDiscord> <Elegantbeef> Or the procedure in this case
[02:47:29] <madprops> how could I export it?
[02:47:53] <madprops> it's already exported from 'types', and imported in 'appname' file
[02:48:19] <FromDiscord> <Elegantbeef> `export NapArg`  to selectively export the type or `export types` for the module
[02:49:07] <madprops> 'export types' works, ty
[03:43:30] <madprops> seems that updating a library dependency won't trigger a recompilation on next launch
[03:56:39] *** Quits: max22- (~maxime@2a01cb0883359800a69cb564a1298a47.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:59:30] <FromDiscord> <Jakraes> I can't find the exponent character anywhere in the documentation, does anyone know how to write an exponent?
[04:59:38] <FromDiscord> <Jakraes> Turns out e is base 10
[04:59:44] <FromDiscord> <Jakraes> And I can't find anything else
[05:02:32] <FromDiscord> <Elegantbeef> You want a base 2 exponent?
[05:02:56] <FromDiscord> <Jakraes> Yup
[05:03:09] <FromDiscord> <Elegantbeef> so then just `val shl exponent` \:D
[05:03:34] <FromDiscord> <Elegantbeef> !eval 2 shl 3
[05:03:37] <NimBot> Compile failed: /usercode/in.nim(1, 3) Error: expression '16' is of type 'int literal(16)' and has to be used (or discarded)
[05:03:45] <FromDiscord> <Elegantbeef> !eval echo 2 shl 3
[05:03:49] <NimBot> 16
[05:03:54] <FromDiscord> <Jakraes> Nice, thank you!
[05:07:05] <FromDiscord> <Elegantbeef> Though that's not actually exponent, i think it might be what you want \:D
[05:07:42] <FromDiscord> <Elegantbeef> though there are bit literals like `0b10000`
[05:24:55] <FromDiscord> <Jakraes> Oh boy how do I work with that?
[05:25:10] <FromDiscord> <Jakraes> I just made an exponent function but I assume it's much much slower than bit literals
[05:25:48] <FromDiscord> <Elegantbeef> The bit literal does as it looks sets a specific set of bits to on
[05:25:59] <FromDiscord> <Elegantbeef> Well show the code and might be able to suggest improvements if interested
[05:27:15] <FromDiscord> <Jakraes> I've never worked with bits and what not, although my teacher scraped a bit of bit shifting but I didn't understand anything
[05:27:25] <FromDiscord> <Jakraes>  https://media.discordapp.net/attachments/371759389889003532/874818755220373504/Screenshot_9.png
[05:27:44] <FromDiscord> <Jakraes> It only works with ints but yeah, it's what I need it for
[05:28:50] <FromDiscord> <undersquire> why dont u use result instead of final
[05:28:52] <FromDiscord> <Elegantbeef> To summarize bits when talking about ints it works just like base 10 in that `213` is (3 \ 10^0) + (1 \ 10^1) + (2\ \ 10^2)
[05:29:49] <FromDiscord> <Elegantbeef> So with a `0b1010` it's `(0  2^0) + (1 2^1) + (0  2^2) + (1  2^3)` or `10`
[05:30:22] <FromDiscord> <Elegantbeef> I just mentioned the bit literal due to not knowing if this was for values at runtime or compile time
[05:31:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vBv
[05:32:25] <FromDiscord> <Elegantbeef> Secondly your exponent doesnt work properly `assert 10.exponent(0) == 1` fails
[05:33:27] <FromDiscord> <Jakraes> Oh yeah I could definitely use result
[05:34:07] <FromDiscord> <Jakraes> Oh so bits are read backwards?
[05:34:23] <FromDiscord> <Elegantbeef> Finally math(just realized this myself) does have `^` so you can just do `import std/math` to get `10^10` to work
[05:34:25] <FromDiscord> <Elegantbeef> They're read the same as base 10 on most systems
[05:34:50] <FromDiscord> <Elegantbeef> Right to left though stored opposite
[05:35:37] <FromDiscord> <Jakraes> Yeah that's much better, perhaps I could even use `` instead of exponent as the name of the proc
[05:36:22] <FromDiscord> <Jakraes> Oh damn, it has? I found it odd that it was lacking that but I guess it just didn't have an explicit name, thank you once again!
[06:19:31] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:33:43] <FromDiscord> <gogolxdong (liuxiaodong)> How to convert seq to varargs?
[06:34:32] <FromDiscord> <Elegantbeef> varargs accepts a single entry, an array or a seq
[06:39:38] <FromDiscord> <leorize> varargs is just openArray with some extra sugar
[07:23:50] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:31:53] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[07:33:02] *** Joins: flynn (~mcbloch@user/flynn)
[07:43:50] <FromDiscord> <gogolxdong (liuxiaodong)> Is it possible to db.exec(sql"INSERT INTO tables VALUES(?,?,?,?,?)" , row[0..4])
[07:48:51] <FromDiscord> <retkid> Do you think I could combine elixir and nim  for projects
[07:49:11] <FromDiscord> <retkid> Idk if they’ll play well
[07:50:58] <FromDiscord> <Elegantbeef> Depends on what you're after
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:47:02] <FromDiscord> <hamidb80> hey
[08:47:47] <FromDiscord> <hamidb80> assume a `someObj` is a ref object
[08:50:41] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3vCb
[08:50:57] <FromDiscord> <Elegantbeef> The former
[08:51:12] <FromDiscord> <hamidb80> ?
[08:51:24] <FromDiscord> <Elegantbeef> `subObj1`
[08:51:54] <FromDiscord> <Jakraes> So uhm, quick question, rand from random stays the same when compiled, is there a way to fix that?
[08:52:04] <FromDiscord> <hamidb80> ok thanks
[08:52:05] <FromDiscord> <Elegantbeef> call `randomize()`
[08:52:26] <FromDiscord> <Elegantbeef> You can also provide a seed that will randomize specifically
[08:53:08] <FromDiscord> <Jakraes> Yeah I thought of a seed but I assumed there was an easier way
[08:53:19] <FromDiscord> <hamidb80> what is the logic behind calling `randomize` proc before generating random number? i dont get it
[08:53:35] <FromDiscord> <Elegantbeef> without it the seed is `0` so it's not random
[08:54:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vCd
[08:54:45] <FromDiscord> <Elegantbeef> It'll output the same everytime, insert a randomize before it, it'll magically be different
[08:55:16] <FromDiscord> <hamidb80> +1
[08:58:31] <FromDiscord> <ChikinNug> Whats the preferred paradigm of nim?
[09:00:37] <FromDiscord> <Elegantbeef> Procedural is what it tends towards
[09:02:44] <FromDiscord> <ChikinNug> thanks
[09:14:25] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3vCg
[09:15:58] <FromDiscord> <hamidb80> seems like `cpp` generates different code
[09:16:18] <FromDiscord> <hamidb80> im on js backend
[09:16:28] <FromDiscord> <hamidb80> (edit) "im on" => "using"
[09:17:24] <FromDiscord> <hamidb80> got it https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-importcpp-pragma
[09:24:06] <madprops> not sure why the docs say "Instead of using map and filter, consider using the collect macro from the sugar module."
[09:36:58] <madprops> oh I see now
[09:37:14] <madprops> it allows for more elaborate functions
[09:40:41] <FromDiscord> <Elegantbeef> prestige where are you, i need to know how to know if a window should be floating?!
[09:45:57] <FromDiscord> <vegai> do nim developers typically use nim as a scripting and/or configuration language, or do you use something else instead?
[09:46:50] <FromDiscord> <Elegantbeef> Many use nimscript for configuring their projects, and yes nim is pretty easy to use for one off scripts
[09:57:07] <FromDiscord> <Elegantbeef> Ah nvm i found it, it's the same logic that i gave you forever ago, size is the only concern
[09:57:37] <FromDiscord> <Elegantbeef> Though you do have some X memory leaks due to not calling `XFree` on the stuff you `XAlloc`
[10:17:13] <FromDiscord> <codic> iirc you sayit's a float if it's a dialog, utility, toolbar or one more (I think it was splash screen) window
[10:17:42] <FromDiscord> <codic> from the _NET_WM_WINDOW_TYPE
[10:17:45] <FromDiscord> <codic> oh nvm you found your answer
[10:17:48] <FromDiscord> <codic> yeah writing wms is really fun
[10:18:12] <FromDiscord> <codic> reparenting ended up to be a silly rabbit hole so I'm going to take the KatriaWM route and just draw window decorations as separate windows by hand
[10:44:15] <FromDiscord> <vegai> right, thanks
[11:05:58] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Quit: WeeChat 3.0)
[11:07:36] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:07:41] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[11:14:23] *** Joins: max22- (~maxime@2a01cb0883359800f4ad0f01cb21a15d.ipv6.abo.wanadoo.fr)
[12:11:53] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:46:58] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any proc like `builtin_bswap16`
[14:09:21] <FromDiscord> <enthus1ast> how do you publish the html docs of your project through github? do you create a link in the readme.md that points to the\: https://htmlpreview.github.io/?https://github.com/..... ?
[14:10:42] <FromDiscord> <enthus1ast> i could do this manually and create a gh-pages branch and copy the docs over but it would be nice to just have them in the master branch
[14:21:23] <FromDiscord> <windowsboy111> guys, what do you think about mixing languages together such as injecting literal C code into nim↵↵wouldn't it be a bad idea
[14:21:29] <FromDiscord> <proud linux user> is there any differnece in using let over var for immutable variables??
[14:21:52] <FromDiscord> <Rika> Var isn’t immutable
[14:21:54] <FromDiscord> <windowsboy111> I think they are faster...?
[14:22:01] <FromDiscord> <Rika> No difference in speed
[14:22:02] <FromDiscord> <windowsboy111> (edit) "they" => "immutables"
[14:22:11] <FromDiscord> <windowsboy111> huh really, ok
[14:22:16] <FromDiscord> <Rika> In reply to @windowsboy111 "guys, what do you": You can already do this via the emit pragma
[14:22:25] <FromDiscord> <windowsboy111> In reply to @Rika "You can already do": yes I am talking about emit pragma
[14:22:52] <FromDiscord> <Rika> In reply to @windowsboy111 "huh really, ok": There probably is a difference but it is negligible or not reliably better
[14:23:20] <FromDiscord> <Rika> In reply to @windowsboy111 "yes I am talking": Okay so I don’t understand what you mean then
[14:23:22] <FromDiscord> <windowsboy111> and `const` is much faster (if used correctly) right?
[14:23:32] <FromDiscord> <windowsboy111> since it's compile time
[14:23:39] <FromDiscord> <windowsboy111> and the compiler copy and paste the values
[14:23:44] <FromDiscord> <Rika> You trade memory and binary size for speed
[14:23:56] <FromDiscord> <Rika> And compile time of course
[14:24:00] <FromDiscord> <proud linux user> In reply to @Rika "Var isn’t immutable": i mean variables that dont change
[14:24:14] <FromDiscord> <proud linux user> ohyes thankyou
[14:24:31] <FromDiscord> <Rika> Then there is no noticeable difference other than you aren’t stopped by the compiler when you change a var
[14:26:48] <FromDiscord> <proud linux user> and i noticed that danger is slower than reelase on arm64/android
[14:27:19] <FromDiscord> <windowsboy111> In reply to @richard stallmen(crazy GNU guy) "and i noticed that": you mean when you run the program or when you compile?
[14:28:16] <FromDiscord> <proud linux user> when you run
[14:29:21] <FromDiscord> <proud linux user> sent a code paste, see https://play.nim-lang.org/#ix=3vDq
[14:29:24] <FromDiscord> <proud linux user> danger(^)
[14:30:22] <FromDiscord> <proud linux user> my phone is getting slower :(
[14:37:16] <FromDiscord> <windowsboy111> <https://pypi.org/project/nim4py> what the hell is this
[14:39:29] <FromDiscord> <proud linux user> sent a code paste, see https://play.nim-lang.org/#ix=3vDt
[14:39:36] <FromDiscord> <proud linux user> you didnt read descriptioj windozeboy
[14:41:20] <FromDiscord> <proud linux user> <https://pypi.org/project/py2nim> and this is a total bruh project
[14:41:34] <FromDiscord> <proud linux user> embed python inside nim and call python in runtime
[14:46:07] <FromDiscord> <retkid> In reply to @Elegantbeef "Depends on what you're": Looking for a strong language that’s fast and similar enough to nim that I can use it to makeup for any shortcomings from Jim’s small community
[14:46:51] <FromDiscord> <retkid> In reply to @richard stallmen(crazy GNU guy) "embed python inside nim": That’s the worst thing
[14:47:05] <FromDiscord> <proud linux user> ohyes agreed
[14:47:07] <FromDiscord> <Rika> In reply to @retkid "Looking for a strong": Doesn’t exist
[14:47:18] <FromDiscord> <proud linux user> In reply to @retkid "Looking for a strong": who is jim
[14:47:20] <FromDiscord> <Rika> Unless you’re happy to use Lisp
[14:47:24] <FromDiscord> <proud linux user> bruh
[14:47:49] <FromDiscord> <retkid> In reply to @Rika "Unless you’re happy to": I was thinking about elixr or crystal
[14:47:53] <FromDiscord> <Rika> Or if you think Go and Rust are “similar enough”
[14:48:09] <FromDiscord> <retkid> Rust is the obvious answer
[14:48:18] <FromDiscord> <retkid> Imo
[14:48:34] <FromDiscord> <Rika> Rust is the furthest language from Nim I would almost say
[14:48:45] <FromDiscord> <Rika> Actually no
[14:48:46] <FromDiscord> <proud linux user> farthest?
[14:48:46] <FromDiscord> <Rika> Zig is
[14:48:48] <FromDiscord> <retkid> I haven’t tried to learn rust
[14:48:54] <FromDiscord> <proud linux user> good
[14:49:06] <FromDiscord> <retkid> I’ve heard Rust is cool tho
[14:49:09] <FromDiscord> <Rika> Rust has good practices
[14:49:15] <FromDiscord> <Rika> And cool ideas
[14:49:27] <FromDiscord> <Rika> But I will never be able to get over the borrow checker
[14:49:36] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/874960230985920522/image0.png
[14:49:40] <FromDiscord> <retkid> I hate this
[14:49:45] <FromDiscord> <Rika> Hate what
[14:49:54] <FromDiscord> <retkid> Just
[14:50:04] <FromDiscord> <retkid> The way you have to think to write this
[14:50:13] <FromDiscord> <retkid> It’s like Java and C fucked
[14:50:18] <FromDiscord> <retkid> Or something
[14:50:24] <FromDiscord> <proud linux user> owu
[14:50:28] <FromDiscord> <Rika> I dunno
[14:50:51] <FromDiscord> <Rika> If you want a Nim that is big then it would be easier to help make Nim big than to search for a similar language to Nim that is already big
[14:51:25] <FromDiscord> <proud linux user> so nim is not big?
[14:51:29] <FromDiscord> <retkid> I just want something that can work with it
[14:51:33] <FromDiscord> <retkid> Nim is pretty big
[14:52:11] <FromDiscord> <proud linux user> not like c++ :)
[14:53:30] <FromDiscord> <retkid> That’s like saying “oh my town of people is pretty big, 30,000 people or so”
[14:53:33] <FromDiscord> <retkid> Then you go
[14:53:39] <FromDiscord> <retkid> “NOT TOKYO BIG”
[15:07:21] <FromDiscord> <retkid> :nimRawr:
[15:08:21] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any bech32 library ?
[15:15:56] <FromDiscord> <retkid> There really are very few languages like nim
[15:21:43] <FromDiscord> <tbrekalo> Anyone using nimlsp with nvim-coc? ↵I have issues getting it to work
[15:25:35] <FromDiscord> <Paupi woodberg> Am i the only teen here that is new to nim😭
[15:29:21] <emery> Paupi woodberg: better nim than python
[15:32:57] <FromDiscord> <Rika> In reply to @tbrekalo "Anyone using nimlsp with": i cant at least try to help debug, what's the issue
[15:35:15] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[15:38:06] <FromDiscord> <exelotl> In reply to @retkid "": unreachable more like unreadable amirite
[15:39:53] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:40:19] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[15:40:53] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:41:06] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[15:44:24] <FromDiscord> <tbrekalo> In reply to @Rika "i cant at least": I did the standard setup form coc github page and it simply does not work
[15:48:29] *** Joins: rockcavera (~rc@192.12.115.201)
[15:48:29] *** Quits: rockcavera (~rc@192.12.115.201) (Changing host)
[15:48:29] *** Joins: rockcavera (~rc@user/rockcavera)
[15:50:45] <FromDiscord> <Rika> semantic highlighting is independent of the completion plugin
[15:50:53] <FromDiscord> <tbrekalo> ye; just realized that
[15:51:38] <FromDiscord> <tbrekalo> what do you recommend to add to my vimrc?
[15:52:04] <FromDiscord> <Rika> check :messages
[15:52:38] <FromDiscord> <tbrekalo> Sorry, I do not understand what you mean
[15:54:01] <FromDiscord> <Rika> do the command `:messages` when you open a nim file
[16:04:57] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[16:13:02] <FromDiscord> <tbrekalo> nothing happens
[16:15:01] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Ping timeout: 258 seconds)
[16:16:01] <FromDiscord> <Rika> Strange
[16:16:36] <FromDiscord> <Rika> When you do “:hl” and scroll do you see any entries with “Nim” on them
[16:16:58] <FromDiscord> <tbrekalo> I know that this exists: https://github.com/alaviss/nim.nvim But I would like to have a pure nvim-coc setup
[16:17:01] <nrds> <04prestigebot99> 4GitHub: 7"Nim plugin for NeoVim"
[16:17:06] <FromDiscord> <Rika> Oh
[16:17:10] <FromDiscord> <Rika> I misunderstood
[16:17:11] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[16:17:25] <FromDiscord> <Rika> Nim on LSP has no semantic highlighting implemented
[16:17:31] <FromDiscord> <Rika> As of now
[16:17:44] <FromDiscord> <tbrekalo> Ugh; Guess I'll stick to VS Code for nim stuff
[16:17:55] <FromDiscord> <Rika> Why not just use the plugin?
[16:18:08] <FromDiscord> <Rika> What’s so repulsive about using the plugin
[16:18:23] <FromDiscord> <Rika> I’ve never actually understood why people don’t want to use the plugin
[16:18:51] <FromDiscord> <Rika> If you took the opportunity to switch to neovim why not use the plugin for it…
[16:19:18] <FromDiscord> <tbrekalo> I use neovim 80% of the time
[16:19:45] <FromDiscord> <Rika> Well then that makes even less sense to me
[16:20:02] <FromDiscord> <tbrekalo> But; ugh.. just feel lazy setting it up for nim
[16:20:07] <FromDiscord> <Rika> Okay
[16:20:09] <FromDiscord> <Rika> You do you
[16:20:11] <FromDiscord> <tbrekalo> I'll give it a tray
[16:20:14] <FromDiscord> <tbrekalo> (edit) "tray" => "try"
[16:21:10] *** Joins: arkurious (~arkurious@user/arkurious)
[16:21:29] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Ping timeout: 248 seconds)
[16:28:19] <FromDiscord> <retkid> In reply to @emery "Paupi woodberg: better nim": You’d rather people use nim than py as their first language
[16:28:26] <FromDiscord> <retkid> Mine was Bash
[16:28:59] <FromDiscord> <retkid> Still don’t know how to do anything in bash but that’s because thank god I don’t need to use it often
[16:29:57] <FromDiscord> <retkid> When you think in bash you’ve gone down the wrong path
[16:32:09] <FromDiscord> <konsumlamm> In reply to @retkid "Looking for a strong": D is pretty similar, albeit not much bigger
[16:32:18] <FromDiscord> <proud linux user> albeit ?
[16:32:23] <FromDiscord> <proud linux user> where is this cominf from
[16:32:32] <FromDiscord> <proud linux user> all be it?
[16:32:34] <FromDiscord> <proud linux user> ????
[16:34:37] <FromDiscord> <zetashift> In reply to @Rika "If you want a": Factsss
[16:35:10] <FromDiscord> <zetashift> In reply to @tbrekalo "Anyone using nimlsp with": I just use it with lspconfig
[16:35:19] <FromDiscord> <retkid> In reply to @konsumlamm "D is pretty similar,": was thinking about D but isn't it a microsoft baby
[16:35:32] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[16:35:37] <FromDiscord> <zetashift> It isn't...at all ahaha
[16:35:50] <FromDiscord> <tbrekalo> In reply to @zetashift "I just use it": You have semantic highlight?
[16:35:56] <FromDiscord> <retkid> oh sorrt haha\
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:05] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3vE8
[16:36:05] <FromDiscord> <retkid> thats pretty cool
[16:36:12] <FromDiscord> <retkid> but uh
[16:36:24] <FromDiscord> <retkid> h
[16:36:26] <FromDiscord> <retkid> (edit) "h" => "eh"
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:40] <FromDiscord> <zetashift> In reply to @tbrekalo "You have semantic highlight?": I use alaviss nim.nvim for highlighting, lspconfig only handles the diagnostics
[16:36:42] *** Quits: max22- (~maxime@2a01cb0883359800f4ad0f01cb21a15d.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:37:03] <FromDiscord> <tbrekalo> In reply to @zetashift "I use alaviss nim.nvim": thanks 👍🏽
[16:38:56] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3vE9
[16:40:56] <FromDiscord> <proud linux user> sent a code paste, see https://play.nim-lang.org/#ix=
[16:41:44] <FromDiscord> <konsumlamm> In reply to @richard stallmen(crazy GNU guy) "where is this cominf": dunno, look it up
[16:42:54] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[16:44:50] <FromDiscord> <haxscramper> If I understand correctly, nim forum update bot is routed via old IRC (freenode) and then to discord?
[16:45:10] <FromDiscord> <haxscramper> It wasn't transferred when we moved to libera chat
[16:46:36] <FromDiscord> <Rika> yes
[16:47:09] <PMunch> Has Nimble started being more strict about underscores in names?
[16:47:36] <PMunch> I've had ast_pattern_matching in the NimLSP project listed as astpatternmatching, but that apparently fails now..
[16:49:00] <FromDiscord> <proud linux user> try camel?
[17:08:54] <PMunch> It's easy to fix, I was just wondering what had actually changed
[17:15:45] <FromDiscord> <PsychoClay> how do i compare 2 types?
[17:49:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> can I pass strings by address in Nim?
[17:54:00] <FromDiscord> <exelotl> they are passed by address already, where possible
[17:59:45] <PMunch> If you need to pass it in a way that you can modify the string then use `var string` as the type
[17:59:59] <PMunch> ie: https://play.nim-lang.org/#ix=3vEA
[18:01:42] <FromDiscord> <System64 ~ Flandre Scarlet> Do you know how can I install the portaudio library globally on my system please?
[18:04:09] <PMunch> nimble install portaudio?
[18:09:20] <FromDiscord> <System64 ~ Flandre Scarlet> I installed NordAudio but
[18:09:54] <FromDiscord> <System64 ~ Flandre Scarlet>  https://media.discordapp.net/attachments/371759389889003532/875010638668243045/unknown.png
[18:10:01] <FromDiscord> <System64 ~ Flandre Scarlet> It says that
[18:14:58] <FromDiscord> <System64 ~ Flandre Scarlet> So I can't compile
[18:19:03] <FromDiscord> <tbrekalo> Have few questions about nim object semantics. If i define object with: `type MyType = object` I cannot create a pointer to object of that type later in the code? I am wondering is there a feature like `std::unique_ptr<T>` in nim. Where I want to transfer ownership of some heap allocated memory and not have to worry about deleting it manually once it is out of scope
[18:19:39] <FromDiscord> <Rika> regular objects are stack allocated
[18:19:51] <FromDiscord> <Rika> you can make a pointer to it, but its not "safe"
[18:20:08] <FromDiscord> <Rika> nim will have destructors in the future
[18:20:11] <FromDiscord> <Rika> --gc:arc
[18:20:24] <FromDiscord> <System64 ~ Flandre Scarlet> aren't objects already reference type already?
[18:20:39] <FromDiscord> <Rika> `type A = object` are not reference types
[18:21:06] <FromDiscord> <tbrekalo> But they are always copied along with their content?
[18:21:40] <FromDiscord> <Rika> depending on size
[18:21:50] <FromDiscord> <Rika> if the object is of sufficient size, theyre passed by pointer
[18:21:54] *** Joins: xet7 (~xet7@user/xet7)
[18:22:08] <FromDiscord> <Rika> or if the function requires a `var` param.
[18:22:14] <FromDiscord> <System64 ~ Flandre Scarlet> this is automatic?
[18:22:16] <FromDiscord> <Rika> yes
[18:22:22] <FromDiscord> <System64 ~ Flandre Scarlet> Oh alright
[18:22:25] <FromDiscord> <tbrekalo> Like if an object is larger than let's say 16 bytes, if I pass it to a function it's pass by pointer? Ain't that a bit fuzzy?
[18:22:30] <FromDiscord> <Rika> yes
[18:22:44] <FromDiscord> <Rika> it doesnt matter since the parameter is immutable
[18:23:07] <FromDiscord> <Rika> and if you're using `unsafeAddr` you're doing something unsafe anyway
[18:23:32] <FromDiscord> <Rika> so it really doesnt matter; as ive said above `var` parameters are always passed by ptr
[18:23:49] <FromDiscord> <tbrekalo> but if I do it like `proc doStuff(obj: var LargType)` same applies? I manually have to make a copy if I want to modify it
[18:24:05] <FromDiscord> <tbrekalo> Ok; thanks @Rika 👍🏽
[18:24:08] <FromDiscord> <Rika> obj is always by ptr in that case
[18:24:22] <FromDiscord> <tbrekalo> Thanks
[18:25:04] <FromDiscord> <Rika> if it were obj: sometype then obj can be either copied or by ptr depending on if `sizeof sometype > (sizeof float) 2`
[18:25:07] <FromDiscord> <Rika> (edit) "float)" => "float) "
[18:25:36] <FromDiscord> <levovix> In reply to @System64 "Do you know how": As I know, on Windows, you cannot. You should download portaudio, compile it, then passL "-LC:/path/to/.lib/directory"
[18:28:03] <FromDiscord> <tbrekalo> So there's no way of stealing a content of an object? Like If I have a very large string and I pass it to a constructor of an object the member will have a copy of a string instead of just taking a memory pointer from it?
[18:29:57] <FromDiscord> <Rika> In reply to @tbrekalo "So there's no way": there's probably `lent` to help, i dont really recall
[18:30:29] <FromDiscord> <Rika> https://nim-lang.org/docs/destructors.html#move-semantics
[18:31:03] *** Joins: xet7_ (~xet7@user/xet7)
[18:31:16] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[18:32:50] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @levovix "As I know, on": to dll or lib? and how can I do it with Nim?
[18:34:54] <FromDiscord> <levovix> sent a code paste, see https://play.nim-lang.org/#ix=3vES
[18:35:53] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:36:26] <FromDiscord> <System64 ~ Flandre Scarlet> hummmmm is PortAudio GPL or smth?↵I know statically linking libs can bring licencing issues
[18:40:00] <FromDiscord> <levovix> seems like it isn't GPL: https://github.com/PortAudio/portaudio/blob/master/LICENSE.txt
[18:40:18] *** Quits: xet7_ (~xet7@user/xet7) (Ping timeout: 258 seconds)
[18:42:41] <FromDiscord> <gerwy> is it possible to make selenium work with nim? By python bridge or maybe bindings for JS?
[18:43:08] <FromDiscord> <System64 ~ Flandre Scarlet> I'll gotta try that then
[18:43:19] <FromDiscord> <gerwy> i see that someone tried to do it but it doesn't seem like its finished
[18:50:38] <FromDiscord> <gerwy> oh i found webdriver++ which i guess could work for me but its c++ so i have no idea how to use it
[18:50:46] <FromDiscord> <gerwy> but its just a header
[18:51:46] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @levovix "to lib, because linking": Doesn't work https://media.discordapp.net/attachments/371759389889003532/875021174051065886/unknown.png
[18:58:10] <FromDiscord> <levovix> sent a code paste, see https://play.nim-lang.org/#ix=3vEV
[19:00:41] <FromDiscord> <System64 ~ Flandre Scarlet> Still have the same error
[19:02:11] *** Joins: max22- (~maxime@2a01cb0883359800a3cafb931d6dcd09.ipv6.abo.wanadoo.fr)
[19:03:30] <FromDiscord> <System64 ~ Flandre Scarlet>  https://media.discordapp.net/attachments/371759389889003532/875024127700922398/unknown.png
[19:04:50] <FromDiscord> <levovix> hmm
[19:04:54] <FromDiscord> <levovix> try to use full path to home directory, instead of ~
[19:07:18] <FromDiscord> <System64 ~ Flandre Scarlet> IT WORKS!
[19:25:30] *** notchris_ is now known as notchris
[19:35:40] <FromDiscord> <levovix> Why ref object is invalid type for const?
[19:36:20] <FromDiscord> <levovix> Why can't the compiler calculate the value at compile time, then allocate memory at runtime and copy value into?
[19:41:44] <nrds> <06Prestige99> Seems odd to me - if you want that, I'd create a const for the value, then have `let foo = myConst` I guess?
[19:44:07] <FromDiscord> <levovix> The problem is that the type is declared as a ref object and all functions work with it as a reference
[19:44:25] <nrds> <06Prestige99> I suppose I would need to see an example of what you're trying to accomplish
[19:50:07] <FromDiscord> <planetis> there is halonium\: https://github.com/halonium/halonium↵(@gerwy)
[19:52:28] <FromDiscord> <haxscramper> In reply to @levovix "Why ref object is": https://github.com/nim-lang/Nim/pull/15528
[19:55:01] <FromDiscord> <levovix> thanks, it's good that it may be added to Nim
[19:56:26] <FromDiscord> <planetis> tbrekalo\: you can use a ref string or a copy on write implementation of strings
[20:00:33] <FromDiscord> <⃟⃟> what is the difference between var and let
[20:01:30] <FromDiscord> <levovix> let makes variable immutable
[20:22:50] <FromDiscord> <gerwy> In reply to @planetis "there is halonium\: https://github.com/halonium/hal": Broooo what??
[20:23:24] <FromDiscord> <gerwy> 1. Why there is so much things already made for nim thats insane↵2. You know so much about nim and its projects its amazing
[20:29:57] <FromDiscord> <System64 ~ Flandre Scarlet> Is it normal it crashes at this line? (well it catches an exception at least) https://media.discordapp.net/attachments/371759389889003532/875045886495981628/unknown.png
[20:32:08] <FromDiscord> <Rika> well what exception was raised?
[20:33:35] <FromDiscord> <⃟⃟> what about let and const
[20:34:47] <FromDiscord> <System64 ~ Flandre Scarlet>  https://media.discordapp.net/attachments/371759389889003532/875047093499224124/unknown.png
[20:37:05] <FromDiscord> <Rika> likely means that what getDeviceInfo returned is nil
[20:40:09] <FromDiscord> <levovix> In reply to @⃟⃟ "what about let and": const is evaluated at compile time
[20:40:19] <FromDiscord> <System64 ~ Flandre Scarlet> > outputParameters.device = getDefaultOutputDevice()↵Returns -1
[20:40:27] <FromDiscord> <System64 ~ Flandre Scarlet> I checked with echo
[20:59:40] <FromDiscord> <System64 ~ Flandre Scarlet> I have a pointer to a buffer (so an array)↵How can I read that in a for loop please?
[21:00:44] <FromDiscord> <Unaimend> Whats the right way to convert `seq[char` to `string`?
[21:01:17] <FromDiscord> <Unaimend> https://play.nim-lang.org/#ix=3vG3
[21:01:25] <FromDiscord> <Unaimend> This does not work as intented
[21:01:30] <FromDiscord> <tbrekalo> What's the practice for having implementation/private types/functions in nim packages?
[21:01:47] <FromDiscord> <Unaimend> (edit) "intented" => "intended"
[21:03:37] <FromDiscord> <haxscramper> Put type definitions in the `private/` directory of a package
[21:03:53] <FromDiscord> <haxscramper> If you need to use type only in a single module don't export it
[21:04:19] <FromDiscord> <levovix> sent a code paste, see https://play.nim-lang.org/#ix=3vG4
[21:04:49] <FromDiscord> <haxscramper> In reply to @Unaimend "Whats the right way": `echo cast[string](test)` or `test.join("")`
[21:05:06] <FromDiscord> <haxscramper> First is faster but relies on implementation details
[21:13:38] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3vG9
[21:13:53] <FromDiscord> <Unaimend> In reply to @haxscramper "`echo cast[string](test)` or `test.join("")`": Thank you
[21:15:57] <FromDiscord> <levovix> sent a code paste, see https://paste.rs/sUV
[21:16:58] <FromDiscord> <Yardanico> In reply to @System64 "I meant I want": just cast your pointer to an UncheckedArray and loop over each index
[21:17:20] <FromDiscord> <System64 ~ Flandre Scarlet> can't I just do echo p[index]?
[21:17:36] <FromDiscord> <Yardanico> nim has a strict type system unlike C - a pointer is not an array
[21:18:13] <FromDiscord> <System64 ~ Flandre Scarlet> and what is the latest line for? Converting to unchecked array?
[21:18:37] <FromDiscord> <Yardanico> no, my solution is different from the one levovix is proposing
[21:19:13] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3vGd
[21:19:41] <FromDiscord> <tbrekalo> Can you have enum aliases in nim? Like you want to have two enum values sharing the same int value?
[21:19:52] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3vGe
[21:20:09] <FromDiscord> <Yardanico> instead of `char` you can use a more appropriate type if needed
[21:21:59] <FromDiscord> <levovix> In reply to @tbrekalo "Can you have enum": from Nim's standart library https://media.discordapp.net/attachments/371759389889003532/875058976587395112/unknown.png
[21:22:32] <FromDiscord> <levovix> (edit) "standart" => "standard"
[21:23:03] <FromDiscord> <tbrekalo> In reply to @levovix "from Nim's standard library": thanks
[21:28:40] <FromDiscord> <undersquire> how does the Nim {.magic.} work lol
[21:28:50] <FromDiscord> <undersquire> (edit) "Nim" => "pragma"
[21:30:11] <FromDiscord> <Yardanico> In reply to @undersquire "how does the pragma": {.magic.} means it's a compiler magic and the implementation is in the compiler itself
[21:30:23] <FromDiscord> <undersquire> Lol why define bool in the stdlib then
[21:30:34] <FromDiscord> <undersquire> why not just define bool, true, and false in the compiler
[21:34:32] <FromDiscord> <tbrekalo> Good question
[21:35:49] <FromDiscord> <undersquire> using {.magic.} just adds complexity as it can be confusing as to where and how thats implemented
[21:36:37] <FromDiscord> <undersquire> also why doesnt the stdlib's `basic_types.nim` file contain floats too? it defines all int types as well as bool, but not floats even though they are basic types
[21:36:43] <FromDiscord> <undersquire> (edit) "also why doesnt the stdlib's `basic_types.nim` file contain floats too? it defines all int types as well as bool, but not floats even though they are basic types ... " 03added "(just curious)"
[21:36:54] <FromDiscord> <konsumlamm> stuff like `if` has tocknow about `bool` though
[21:37:01] <FromDiscord> <konsumlamm> (edit) "tocknow" => "to know"
[21:37:06] <FromDiscord> <undersquire> and it should
[21:37:09] <FromDiscord> <undersquire> (edit) "and it should ... " 03added "via the compiler"
[21:37:15] <FromDiscord> <konsumlamm> so it can't just be defined in the stdlib
[21:37:40] <FromDiscord> <codic> the benefit of defining it in system is docs also
[21:37:45] <FromDiscord> <undersquire> yeah thats what im saying, types like bool and int should just be defined by the compiler
[21:37:52] <FromDiscord> <undersquire> In reply to @codic "the benefit of defining": docs on ints XD
[21:38:19] <FromDiscord> <konsumlamm> In reply to @undersquire "yeah thats what im": i'm pretty sure they are, that's what `{.magic.}` means
[21:38:49] <FromDiscord> <levovix> In reply to @undersquire "docs on ints XD": why not?)
[21:38:53] <FromDiscord> <undersquire> sent a code paste, see https://paste.rs/1yN
[21:38:53] <FromDiscord> <undersquire> XD
[21:39:27] <FromDiscord> <undersquire> In reply to @undersquire "but they are also": this just seems kinda pointless XD, its just redefining builtin types
[21:40:48] <FromDiscord> <levovix> not, it insn't REdefinig builtin types
[21:41:09] *** Joins: xet7 (~xet7@user/xet7)
[21:41:21] <FromDiscord> <levovix> it IS defining it)
[21:41:29] <FromDiscord> <undersquire> its defining them using the defined types in the compiler
[21:41:36] *** Joins: vicfred (~vicfred@user/vicfred)
[21:41:48] <FromDiscord> <undersquire> why not have the compiler just define them directly lol idk it just seems weird
[21:44:25] <FromDiscord> <levovix> so, not all builtin types defined with {.magic.} https://media.discordapp.net/attachments/371759389889003532/875064623529873488/unknown.png
[21:44:42] <FromDiscord> <haxscramper> It is better for type to have a concrete PSym that is bound to declaration
[21:44:54] <FromDiscord> <undersquire> and also how are sequences compiler defined, they are heap allocated arrays those should be code defined imo
[21:44:55] <FromDiscord> <haxscramper> Otherwise type handling would have even more edge cases
[21:45:21] <FromDiscord> <undersquire> In reply to @haxscramper "Otherwise type handling would": i didnt mean all types, just basic types like int, float, and bool
[21:45:25] <FromDiscord> <haxscramper> In reply to @undersquire "and also how are": They require some additional ccgen support, as well as strings
[21:45:32] <FromDiscord> <undersquire> oh
[21:46:03] <FromDiscord> <undersquire> cause u could write ur own sequence implemention using create and delete
[21:46:04] <FromDiscord> <haxscramper> In reply to @undersquire "i didnt mean all": And? It is still edge casing some types
[21:46:16] <FromDiscord> <undersquire> In reply to @haxscramper "And? It is still": yeah ig
[21:46:47] <FromDiscord> <haxscramper> And there are not just floats, we also have ptr, ref, int, float, double cXXX types, common strings and string arrays ... etc
[21:47:02] <FromDiscord> <undersquire> ref are just pointers that are tracked by the compiler
[21:47:07] <FromDiscord> <undersquire> (edit) "ref are just pointers that are tracked by the compiler ... " 03added "right?"
[21:47:22] <FromDiscord> <undersquire> aka they must point to a value
[21:47:37] <FromDiscord> <undersquire> In reply to @haxscramper "And there are not": yeah ik about strings, those are not primitives
[21:47:55] <FromDiscord> <haxscramper> In reply to @undersquire "ref are just pointers": yes. But they are magic types as well https://github.com/nim-lang/Nim/blob/version-1-4/lib/system.nim#L41
[21:47:59] <FromDiscord> <undersquire> (edit) "strings, those" => "strings but they"
[21:48:18] <FromDiscord> <haxscramper> And there are some types that are really magic, like `typed`
[21:49:00] <FromDiscord> <undersquire> idk i just thought it was kinda weird to redefine builtin types that could just be compiler implemented keywords
[21:49:23] <FromDiscord> <haxscramper> again, this would make things more complicated
[21:49:28] <FromDiscord> <undersquire> how
[21:50:18] <FromDiscord> <levovix> > It is better for type to have a concrete PSym that is bound to declaration
[21:50:21] <FromDiscord> <haxscramper> because now semcheck has to operate on some separate concept of "built-in" type rather than having everything as a `PType`. Or `PType` must be a discriminant with different branches
[21:50:43] <FromDiscord> <konsumlamm> In reply to @undersquire "idk i just thought": again, it's no redefinition, it's the definition
[21:51:04] <FromDiscord> <haxscramper> sempass just finds type and registers it
[21:51:22] <FromDiscord> <haxscramper> Some special codegen support does not mean it has to be removed from declaration
[21:51:26] <FromDiscord> <undersquire> ah so it has to do with how the compiler was built?
[21:51:34] <FromDiscord> <haxscramper> yes, of course, what else?
[21:51:58] <FromDiscord> <haxscramper> like, what else can there possibly be to explain why core language definitions are made on one way
[21:51:59] <FromDiscord> <haxscramper> or another
[21:52:08] <FromDiscord> <haxscramper> of course it is an implementation detail
[21:52:11] <FromDiscord> <undersquire> idk lol
[21:52:26] <FromDiscord> <undersquire> ive just never seen that done b4
[21:52:46] <FromDiscord> <undersquire> (edit) "ive just never seen that done b4 ... " 03added "thats all"
[21:53:03] <FromDiscord> <haxscramper> also - you can put docs on built-in types
[21:53:14] <FromDiscord> <undersquire> yeah XD
[21:53:39] <FromDiscord> <haxscramper> but that is a minor point, just writing rst document with a table is almost as good
[21:54:11] <FromDiscord> <undersquire> ye if I made a full blown language I would just manually write the docs for the few builtin types
[21:55:47] <FromDiscord> <undersquire> also what is the difference between `addr` and `unsafeAddr`? they have the same definition in stdlib and they seem to do the same thing
[21:56:30] <FromDiscord> <haxscramper> `unsafeAddr` allso to take address where it is "not safe" - like `const`, `let` (because they are immutable)
[21:56:53] <FromDiscord> <undersquire> A
[21:56:54] <FromDiscord> <undersquire> (edit) "A" => "Ah"
[21:56:54] <FromDiscord> <haxscramper> But they are virtually the same, https://github.com/nim-lang/RFCs/issues/369
[21:57:05] <FromDiscord> <undersquire> so you cannot take an addr of a const?
[21:57:12] <FromDiscord> <undersquire> (edit) "const?" => "const or let without using unsafeAddr?"
[21:57:22] <FromDiscord> <haxscramper> correct
[21:57:28] <FromDiscord> <undersquire> ah ok that makes more sense
[21:57:41] <FromDiscord> <undersquire> I also saw some issue or request to merge the two somewhere
[21:57:47] <FromDiscord> <haxscramper> I linked it
[21:57:51] <FromDiscord> <undersquire> oh is that the issue
[21:58:03] <FromDiscord> <undersquire> yeah
[21:58:05] <FromDiscord> <undersquire> taht one
[22:29:02] <FromDiscord> <tbrekalo> how do you debug failed nimble tests?
[22:29:10] <FromDiscord> <tbrekalo> gdb or?
[23:04:42] *** Quits: max22- (~maxime@2a01cb0883359800a3cafb931d6dcd09.ipv6.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[23:11:18] <FromDiscord> <System64 ~ Flandre Scarlet> About PortAudio, is it normal my callback does nothing? https://media.discordapp.net/attachments/371759389889003532/875086491909521438/message.nim
[23:12:15] <FromDiscord> <System64 ~ Flandre Scarlet> it should print "ABC" in the console but it does nothing
[23:12:52] <FromDiscord> <System64 ~ Flandre Scarlet> (I use the NordAudio binding-
[23:12:55] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "binding-" => "binding)"
[23:15:45] <FromDiscord> <ajusa> Is it possible to kill a process and then get the output that it wrote?
[23:20:03] <FromDiscord> <Elegantbeef> @ajusa\: terminate then read the stdout
[23:23:07] <FromDiscord> <ajusa> Alright, I was using `kill` and `terminate` seems to have fixed my issue 🤔
[23:23:51] <FromDiscord> <ajusa> I also needed the `poStdErrToStdOut` option
[23:23:54] <FromDiscord> <Elegantbeef> Well on posix Kill and Terminate are different signals that behave differentyl
[23:52:27] *** Joins: max22- (~maxime@2a01cb0883359800f0438e9693278ee9.ipv6.abo.wanadoo.fr)
