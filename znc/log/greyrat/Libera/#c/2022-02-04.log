[00:00:54] <nitrix> The "template" used to initialize the compound literals might never actually exist in its whole entirety at one place in memory.
[00:01:03] <fizzie> Personally I just like giant initializers to be outside function calls if only because they're less nested (in terms of the source).
[00:03:50] <nitrix> seninha, Here's for demonstration: https://godbolt.org/z/x4hG6eG8e
[00:03:55] <seninha> fizzie: yeah, I prefer it to be a static global and separate the data from the algorithm. But then I was concerned on the runtime initialization difference and binary size.
[00:04:30] <nitrix> seninha, The value 43 can be passed directly to the printf, the function `func`, the struct `struct example`, the pointer, the field, it all gets completely erased by the SSA propagation.
[00:06:24] *** Quits: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net) (Remote host closed the connection)
[00:07:00] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:07:12] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[00:07:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:08:19] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[00:08:34] *** Joins: jkl (~jkl@user/jkl)
[00:09:01] *** Quits: nikomo (~quassel@nikomo.fi) (Ping timeout: 240 seconds)
[00:09:13] *** Joins: zacts (~zacts@user/zacts)
[00:09:32] <nitrix> seninha, It's the same thing with the compound literal. https://godbolt.org/z/re9j1jG1Y The struct doesn't have to actually be anywhere in memory, it can be decorticated into the individual fields and those can get inlined / eliminated entirely.
[00:10:24] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:10:29] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:10:38] <ski> seninha : i'd consider adding `void *' parameters to the function pointers, and corresponding fields to the enclosing `struct's
[00:11:35] *** Quits: jkl (~jkl@user/jkl) (Client Quit)
[00:11:38] <nitrix> Make sure your code is readable; the implementation details chosen by your compiler are most likely irrelevant.
[00:12:00] <seninha> nitrix: thanks, gonna search more about SSA optimization and how compound literals are compiled/optimized. Do you have any resource (book, article, blog post, etc) on the topic to recommend?
[00:12:42] <nitrix> seninha, Not sure. Maybe wikipedia and then you click on every blue link until they're all purple.
[00:13:01] *** Joins: jkl (~jkl@user/jkl)
[00:13:24] <seninha> nitrix: I think that the most readable is to use a named struct. Annonymous compound literals make the code unreadable with all the nesting and stuff.
[00:14:36] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:14:56] <nitrix> Probably. You can create macros, or a bunch of temporary variables too... we're far from the 70s, modern optimizers are very, very clever.
[00:15:00] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:15:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:15:58] *** Joins: nikomo (~quassel@nikomo.fi)
[00:21:15] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:21:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:22:00] *** Joins: crashrep (~crashrep@user/crashrep)
[00:25:54] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:27:09] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[00:27:18] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:27:25] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[00:33:29] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:35:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:36:13] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:37:46] *** Joins: kuber (~kuber@75-172-70-159.tukw.qwest.net)
[00:41:17] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[00:41:56] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[00:42:58] <theseb> what is the best practice for makine key value stores?  structs? any other options?
[00:43:29] <ChoHag> #define best ...
[00:44:25] <clarity> kvs[key]=value;
[00:44:28] <clarity> ;3
[00:44:41] <bkhl> For most definititions, best practice is probably to not make your own.
[00:44:56] <theseb> ChoHag: good question...best as in avoiding hellish pointer code with lots of **p, &*p , etc.
[00:44:59] <theseb> that gets confusing
[00:45:16] <theseb> clarity: yes...arrays seem wise
[00:45:33] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[00:46:54] <owensjrw> trying to settle a bet; what is the standard int main() or int main(void). My guess is int main(void).
[00:47:02] <ski> `&*p' is just `p'
[00:47:05] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:47:08] <sham1> owensjrw: The latter is one of them
[00:47:26] <ski> owensjrw : the former is incomplete, doesn't specify parameters
[00:47:41] <owensjrw> Thank you.
[00:47:53] <sham1> struct keyval { void *key; void *val; } keyval[BUCKET_COUNT]; // One can use one of the lowest order bits of `key` to indicate that the bucket is empty. Or, you know, NULL
[00:48:20] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:48:27] <theseb> sham1: yea...i think nothing can beat structs.
[00:49:27] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:49:31] <sham1> Well it's an array of structures. Now you just need some hashing code and you'll be all set. Open addressing isn't that bad, the worst part is having a good hashing algorithm
[00:49:50] <ski> (i guess that's equivalent to `void *keys[BUCKET_COUNT],*vals[BUCKET_COUNT];')
[00:50:29] <sham1> Yeah, you could make it like that as well, but bundling the key and value together seems more natural
[00:51:01] <bnchs> make it a hashtable?
[00:51:07] *** Quits: jx0 (~jx0@199.229.250.142) (Read error: Connection reset by peer)
[00:51:12] <bnchs> it's much less scanning
[00:51:15] *** Joins: jhnsn (~jx0@38-13-17-235.starry-inc.net)
[00:51:19] <sham1> …that is a hash table
[00:51:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:51:49] <bnchs> isn't a hashtable like "hashtable[hash]"
[00:51:50] *** Quits: jhnsn (~jx0@38-13-17-235.starry-inc.net) (Client Quit)
[00:52:29] *** Joins: jx0 (~jx0@199.229.250.142)
[00:53:25] <ski> you hash your key to an index
[00:54:09] <ski>   keyval[hash_key(mykey)]
[00:54:20] <ski> although, you'd need to decide how to handle collisions
[00:54:40] <sham1> Yeah, you index your table like `table[hash(key) % BUCKETS]` and depending on how it's implemented you need to worry about things like linear probing or double hashing, or if you have closed addressing, you get to traverse some other data structure like a linked list
[00:55:11] <sham1> Err, if you have separate chaining
[00:56:06] <sham1> And then one gets into the fun part of rehashing!
[00:57:26] <sham1> Hash tables aren't particularly "difficult" but there are gotchas there for if one wants good characteristics out of them
[00:57:30] <dave0> i always thought if you were going to the trouble of resizing your hash table, you may as well ditch it for a tree
[00:57:45] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:52] <sham1> That amortized O(1) access time doe
[00:58:11] <bnchs> i handle collisions like this, first sub-bucket of a bucket has a ToC (how many sub-buckets)
[00:58:36] <bnchs> tell me something wrong about this
[00:58:40] <ski> (anyway .. `struct' or no `struct' seems to be the wrong level of question for making key value store. first decide what interface you want, and how you want to represent. then whether you'll have `struct' or not will follow, mostly)
[00:59:13] <sham1> That's an interesting way of doing separate chaining, bnchs. Do you use the subbuckets with the hash value again?
[00:59:23] <sham1> Like do you technically have two levels of hash tables?
[01:00:01] <bnchs> no
[01:00:16] <bnchs> it's kinda like linear probing
[01:00:19] <bnchs> at that level
[01:00:35] <sham1> Ah
[01:00:50] <sham1> So an array where you insert to the first free slot?
[01:01:05] <bnchs> yes
[01:01:17] <bnchs> i might make it hash the last 3 characters
[01:01:23] <bnchs> instead of linear probing
[01:01:27] <sham1> Hm
[01:02:02] <sham1> That's the first I've heard of that as a technique but it just goes to show how many different kinds of things can work
[01:02:10] <dave0> are you hashing strings?
[01:02:14] <bnchs> yes
[01:02:30] <sham1> I tend to do open addressing because I want to pretend that I have cache locality
[01:02:34] <bnchs> i'm using a hashtable for storing modifiable settings
[01:03:53] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:03:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:05:17] <sham1> I rarely use hash tables but they are nice every once in a while
[01:07:56] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[01:10:05] *** Joins: Akiva (~Akiva@user/Akiva)
[01:11:13] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[01:13:23] <theseb> ski:  `void *keys[BUCKET_COUNT],*vals[BUCKET_COUNT];' <---- but what if you need to GROW they key value store?
[01:13:45] <theseb> BUCKET_COUNT i presume is a constant
[01:14:01] <sham1> You instead allocate those arrays with a malloc or some such
[01:14:09] <sham1> And then you can realloc them as needed
[01:14:30] <sham1> (And rehash, and that's why I do prefer having the key and value in the same array. Makes it all easier)
[01:15:21] <sham1> Or, well, you can't really realloc since you need the old array to be there for when you rehash
[01:15:59] <dave0> may as well use a tree
[01:16:23] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 268 seconds)
[01:16:30] <ski> i guess you could move cycles around (checking off a bitvector for which elements have been moved)
[01:16:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[01:17:44] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[01:18:06] <theseb> ski: or just make BUCKET_COUNT some massive number so you'll never run out
[01:18:13] <theseb> and never need to realloc
[01:18:23] <theseb> 640K should be enough for everybody!
[01:18:55] * ski smiles
[01:19:22] <sham1> dave0: that amortized O(1) access time doe
[01:19:31] <ski> (releasing memory might be nice, if pressure decreases, i guess)
[01:19:34] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[01:19:35] <sham1> A tree only gives you O(log n) which is sluggish by comparison
[01:19:44] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:19:48] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:19:48] *** Quits: inlight (~thomas@user/inlight) (Remote host closed the connection)
[01:20:01] <sham1> Although tree-based maps are useful for some things
[01:20:11] *** Joins: inlight (~thomas@157.42.233.26)
[01:20:11] *** Quits: inlight (~thomas@157.42.233.26) (Changing host)
[01:20:11] *** Joins: inlight (~thomas@user/inlight)
[01:20:13] <dave0> sham1: yes, but a (balanced) tree has more predictable time, and the effort to resize the hash table could be spent writing the tree
[01:20:28] <dave0> effort writing the code to resize a hash table*
[01:20:44] * ski . o O ( "The Myth of RAM, part I" by Emil Ernerfeldt in 2014-04-21 at <https://www.ilikebigbits.com/2014_04_21_myth_of_ram_1.html> )
[01:21:05] <nomagno> Do you necessarily need to know about the target ABI to write an assembly library that interfaces with C?
[01:21:05] <ski> "This article is the first of four in a series, in which I argue that thinking of a memory access as _O(1)_ is generally a bad idea, and we should instead think of them as taking _O(√N)_ time."
[01:21:17] <sham1> In asymptotic analysis we don't care about that
[01:21:28] *** Quits: alch (~alch@151.38.149.195) (Read error: Connection reset by peer)
[01:21:32] <sham1> I've read the article and while it does make a good case, it's basically irrelevant
[01:22:30] <dave0> nomagno: yeah kinda.. you have to know how to pass arguments back and forth, if you want your library to call c functions
[01:22:57] <sham1> And stack alignment
[01:23:01] <nomagno> dave0: No, it'd be just C calling assembly
[01:23:24] <ski> for similar reasons we practically don't care about which exact super-polynomial asymptotics might be the case ?
[01:23:28] <sham1> You still need to know that, so you can receive your arguments properly and return whatever you need to return
[01:23:37] <sham1> ski: yeah
[01:24:14] <dave0> nomagno: if you use gcc's inline assembly, you need to know less about the ABI, but it's more complicated
[01:24:54] *** Joins: oriba (~oriba@dynamic-089-014-172-069.89.14.pool.telefonica.de)
[01:25:08] <dave0> and less portable (altough how portable can assembly code be?)
[01:25:29] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:26:06] *** Joins: alch (~alch@151.46.1.10)
[01:30:57] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Ping timeout: 240 seconds)
[01:31:19] *** Joins: deflected (~deflected@user/deflected)
[01:31:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:33:01] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[01:35:33] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:37:45] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:40:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:41:26] *** Quits: Akuli (~Akuli@82-203-167-197.bb.dnainternet.fi) (Quit: Akuli)
[01:43:07] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[01:51:18] <sham1> Yay
[01:51:52] <bnchs> i'm making a http client
[01:52:16] <bnchs> it makes 2 allocs per http response header, tested it on google, and got 1006 allocs
[01:56:27] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 256 seconds)
[01:58:16] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-b97e-75ff-df8e-4880.fixed6.kpn.net)
[01:58:25] *** Quits: mahmutov (~mahmutov@37.155.52.196) (Ping timeout: 250 seconds)
[01:58:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[01:59:20] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:59:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:00:09] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:01:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[02:01:28] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:01:55] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:02:37] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-b97e-75ff-df8e-4880.fixed6.kpn.net) (Ping timeout: 240 seconds)
[02:05:33] <nitrix> You can put a maximum size limit for your headers and respond with a 413 if they're too large, letting you re-use a fixed buffer.
[02:06:08] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:06:29] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[02:06:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:07:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b8e4-8b58-fcf6-173a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:07:16] <bnchs> i don't think a client can send status codes
[02:07:31] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[02:07:51] *** Joins: mandanguita (~mandangui@139.47.119.61)
[02:08:09] <nitrix> Good point, I misread.
[02:08:40] <nomagno> Is there some macro that allows me to check C character set constants against their ASCII values already published, or do I have to painfully assembly it myself?
[02:09:54] *** Quits: strajder (~strajder@user/strajder) (Quit: nn)
[02:10:58] <sham1> nomagno: wdym
[02:11:53] <nomagno> Does the C stdlib provide any way of finding out the character encoding?
[02:12:22] <sham1> You could always try to look at the locale, but aside from that, not really
[02:12:37] <sham1> You could just assume UTF-8 and be correct like 90% of the time tho
[02:12:52] <dave0> ascii is everywhere
[02:13:31] <nomagno> Don't crush my esoteric C programming funnies
[02:13:55] <nomagno> Being pedantic about the standard is fun
[02:14:48] <sham1> I don't think there is any platform out there that has C but doesn't have ASCII. Well I suppose IBM mainframes with EBCDIC but meh
[02:15:10] <sham1> Targeting EBCDIC in any way is worse than useless
[02:15:42] *** Quits: highrate (~presonic@user/highrate) ()
[02:16:04] <nomagno> Trying to figure out if my C VM should have as its default mode not printing anything, printing values in hex, or printing them raw using putchar
[02:16:49] <sham1> A C VM? Like what, is it a VM made in C or is it a C implementation that interprets C in a VM
[02:17:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[02:17:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Client Quit)
[02:17:47] <nomagno> a VM made in C
[02:17:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com)
[02:18:46] <nomagno> I guess keeping in line with my funny nostdlib-first policy, it should not print anything unless the macro is explicitly set
[02:18:54] <nomagno> slash constant
[02:22:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:22:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[02:25:52] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[02:29:29] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[02:29:35] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:29:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:29:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:29:41] *** Joins: wroathe (~wroathe@user/wroathe)
[02:31:11] *** Joins: jhnsn (~jx0@199.229.250.142)
[02:31:21] *** Quits: jhnsn (~jx0@199.229.250.142) (Client Quit)
[02:31:42] *** Quits: MatthiasG2 (~matthias@i6DFA038C.versanet.de) (Quit: Lost terminal)
[02:32:42] *** Quits: pizdets_ (~pizdets@183.182.110.216) (Ping timeout: 250 seconds)
[02:33:37] *** Quits: jx0 (~jx0@199.229.250.142) (Ping timeout: 240 seconds)
[02:33:56] *** Joins: pizdets (~pizdets@183.182.111.49)
[02:34:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:35:38] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:37:15] *** Quits: pgib (~textual@173.38.117.89) (Ping timeout: 256 seconds)
[02:39:27] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:39:31] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[02:40:09] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:42:55] *** Quits: bnchs (~bnchs@196.65.49.136) (Ping timeout: 256 seconds)
[02:45:45] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[02:46:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:46:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:52:51] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[02:53:21] <tk> I target EBCDIC all the time
[02:53:26] <tk> it's the most important character set
[02:54:25] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:56:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[02:56:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:58:27] <zwr> 9front uses utf-32 and unicode doesn't it?
[02:58:57] *** Joins: crashrep (~crashrep@user/crashrep)
[02:59:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:59:07] *** Quits: mandanguita (~mandangui@139.47.119.61) (Ping timeout: 256 seconds)
[03:01:17] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 240 seconds)
[03:02:06] <sham1> You'd think they would use UTF-8 considering that Rob Pike made that, alongside Plan9
[03:02:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[03:02:25] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[03:02:36] *** Joins: ferdna (~ferdna@user/ferdna)
[03:03:30] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:04:14] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:05:10] <zwr> my bad, it was just hearsay I heard out there http://man.cat-v.org/9front/6/utf
[03:05:16] <candide> Title of zwr's link: utf page from Section 6 of the 9front manual
[03:09:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:13:58] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[03:15:17] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[03:20:48] <ferdna> hahahhahahaha.... guys i cant concat a string... hahahaha
[03:21:42] *** Joins: nevdudd (~nevdudd@142.167.143.188)
[03:22:56] <ferdna> is there like a string library that does this? just like c++?
[03:23:43] <dave0> ferdna: char *concat(char *a, char *b) { char *s = malloc(strlen(a) + strlen(b) + 1); if(s == 0) perror("malloc"); sprintf(s, "%s%s", a, b); return s; }
[03:24:47] <dave0> there's probably some library that does it for you
[03:25:15] <ferdna> dave0, that is not what i want to do...
[03:25:25] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[03:25:30] <ferdna> you are using psrintf to print both strings
[03:25:31] <ferdna> but
[03:25:32] <ferdna> ...
[03:25:45] <ferdna> i want to have only one string variable with both char *
[03:25:53] <nitrix> Careful, bot will mute you.
[03:26:06] <ferdna> nitrix, why?
[03:26:12] *** Joins: joev (~joev@user/joev)
[03:26:35] <vdamewood> Too many consecutive lines of text look like spam or flooding.
[03:26:42] <dave0> ferdna: it's c... you gotta manage your own memory :-(
[03:26:46] <nitrix> Too many short sentences too quickly. Take your time to put your thoughts together.
[03:26:58] <ferdna> nitrix, oohhh thanks for the advice.
[03:27:06] <dave0> yes lay off the crack, bruh
[03:27:30] * vdamewood prefers caffeine
[03:27:36] <ferdna> dave0, cant
[03:27:39] <ferdna> ;)
[03:27:59] *** Quits: kuber (~kuber@75-172-70-159.tukw.qwest.net) (Quit: leaving)
[03:30:59] <nitrix> Depending on the size of the objects you're working with, you might be able to copy one string to the end of the other using `strcat`, otherwise you have to create your own new object large enough for the two strings + terminator, which involves `strlen` and `memcpy`, or ideally `strcpy` which should have a better time-complexity.
[03:31:11] *** Joins: highrate (~presonic@user/highrate)
[03:32:03] <ferdna> nitrix, ive been trying and looking at examples... but i cant
[03:32:29] *** Quits: nevdudd (~nevdudd@142.167.143.188) (Quit: Client closed)
[03:33:02] <nitrix> This is precisely why C is fast. If you have a lot of annoying string concatenations to do, you'll eventually get tired of manually dealing with each individual allocation, you'll create a re-usable buffer and save yourself time and gain performance at the same time.
[03:33:31] <nitrix> Turns out what's annoying for you to implement is often also annoying for computers to run.
[03:34:36] <omegatron> =D
[03:34:39] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[03:35:21] <nitrix> s/implement/write/
[03:36:13] <nitrix> ferdna, Take a step back, maybe you're missing the basics?
[03:36:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:36:52] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[03:37:03] *** Joins: Akiva (~Akiva@user/Akiva)
[03:39:12] <ferdna> cool cool
[03:39:15] <ferdna> ill keep reading
[03:44:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[03:46:47] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[03:50:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:52:57] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[03:53:11] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[03:53:11] <kurahaupo_> useretail: outside main declare char**__argv; and inside main assign __argv=argv; but better, choose a non-reserved name instead of __argv
[03:54:39] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[03:56:21] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[03:57:31] *** Joins: joev (~joev@user/joev)
[04:03:58] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[04:05:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:05:23] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:05:59] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:07:31] *** Joins: Wulf (~Wulf@user/wulf)
[04:08:22] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[04:09:32] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[04:11:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:12:45] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:16:40] *** Quits: oriba (~oriba@dynamic-089-014-172-069.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:18:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:20:01] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:21:30] *** Joins: wroathe (~wroathe@user/wroathe)
[04:25:45] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[04:26:17] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[04:26:37] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[04:32:19] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:32:57] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:32:57] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[04:36:04] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[04:42:37] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:46:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:48:27] *** Joins: Viewday117 (~Viewday@user/viewday)
[04:48:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:48:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326)
[04:48:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326) (Changing host)
[04:48:56] *** Joins: skapata (~Skapata@user/skapata)
[04:49:35] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 250 seconds)
[04:50:39] *** Quits: Viewday11 (~Viewday@61.141.126.127) (Ping timeout: 256 seconds)
[04:50:39] *** Viewday117 is now known as Viewday11
[04:50:59] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:53:00] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[04:53:51] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[04:55:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:57:59] *** Joins: bigbianarch40 (~bigbianar@117.176.106.101)
[04:58:05] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Quit: Left)
[04:58:20] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[05:00:23] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:06:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:08:17] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[05:14:20] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[05:16:29] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Read error: Connection reset by peer)
[05:22:17] *** Quits: alch (~alch@151.46.1.10) (Read error: Connection reset by peer)
[05:23:44] *** Quits: bigbianarch40 (~bigbianar@117.176.106.101) (Quit: bigbianarch40)
[05:24:13] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[05:26:29] *** Joins: alch (~alch@151.44.74.14)
[05:28:58] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[05:29:46] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[05:33:27] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[05:34:23] *** Quits: nicode (~nic@2607:f2c0:9541:7100:4a3c:29f0:c179:f26c) (Ping timeout: 256 seconds)
[05:36:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[05:36:53] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:38:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:41:21] *** Joins: vysn (~vysn@user/vysn)
[05:43:27] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[05:44:38] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 268 seconds)
[05:45:23] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Ping timeout: 256 seconds)
[05:49:27] <seninha> is `myvar = (struct MyType){.field1 = .field2 = NULL, ...}` valid?
[05:50:01] <seninha> Can I assign `.field1 = .field2 = NULL,` in a compound literal or should I do `.field1 = NULL, .field2 = NULL`?
[05:50:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:50:39] <fizzie> You should do the latter.
[05:50:58] <fizzie> It's not really an assignment, it's a designator in an initializer. Different rules apply.
[05:51:28] <seninha> I see.
[05:51:31] <seninha> Thanks, fizzie.
[05:51:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:52:05] <seninha> (I bet there's a GNU extension for the former)
[05:52:09] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[05:52:29] <fizzie> There's a GNU extension to do a range of indices for an array. I don't think they have a thing for a list of fields though.
[05:53:07] <fizzie> ,cc int arr[10] = { [3 ... 8] = 1 };
[05:53:09] <candide> fizzie: [warning: ISO C forbids specifying range of elements to initialize [-Wpedantic]] no output: arr = {0, 0, 0, 1, 1, 1, 1, 1, 1, 0}
[05:56:27] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:56:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:57:33] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[05:58:36] <dave0> ,cc int arr[10] = { [8 ... 3] = 1 };
[05:58:37] <candide> dave0: error: empty index range in initializer
[05:58:57] <dave0> doh i was hoping for a segfault ;-)
[05:59:12] <pragma-> "empty"
[05:59:28] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[06:00:16] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[06:00:32] <seninha> Another question about compound literals. Can I initialize a field to the value returned by a function in an automatic context (inside a function)? Like `myval = (struct MyType){.myfield = myfun()}`. And is this standard/supported by all compilers?
[06:00:47] *** Joins: JanC_ (~janc@user/janc)
[06:00:57] *** JanC is now known as Guest7251
[06:00:57] *** Quits: Guest7251 (~janc@user/janc) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[06:00:57] *** JanC_ is now known as JanC
[06:01:11] <fizzie> Yes. Well, it's standard. "Supported by all compilers", who knows. There's all kinds of compilers out there.
[06:01:18] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[06:01:27] <fizzie> The rules for compound literals are the same as for objects with a name.
[06:02:33] <dave0> i'm an object with a name
[06:02:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:02:59] <pragma-> an object has no name
[06:03:00] <fizzie> I've been through the desert on an object with no name.
[06:03:23] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:03:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:03:55] <dave0> lol
[06:08:00] <seninha> I'm studying an old library (that is still being maintained), it uses unsigned char * for pointers to stuff rather than void * in some places, but it uses void * in others...
[06:08:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[06:08:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:09:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:09:53] <fizzie> `unsigned char *` you can do pointer arithmetic on and access the representations of objects through, while a `void *` you can't. So it's sort of reasonable to use the former when you're planning to do one of those things.
[06:10:53] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[06:11:17] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:12:46] *** Joins: mrlemke (~quassel@2604:a880:4:1d0::394:0)
[06:13:26] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[06:14:09] <seninha> I thought that was because it's an old lib.
[06:16:12] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Quit: Client closed)
[06:16:36] <fizzie> Could of course be that, too. Especially if there seems to be no other reason to.
[06:16:43] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[06:17:19] <dave0> sometimes void* feels wrong
[06:17:23] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:17:34] <fizzie> If it's a function that's part of the external API surface that's expected to be called with pointers to all kinds of objects, though; not making those `void *`s is just impolite.
[06:17:52] <fizzie> But if it's the *output* of something that produces a bunch of bytes, then that's fair.
[06:21:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:22:57] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 240 seconds)
[06:23:14] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[06:27:58] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[06:29:18] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:32:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6)
[06:32:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6) (Changing host)
[06:32:51] *** Joins: skapata (~Skapata@user/skapata)
[06:33:19] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:38:09] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:38:13] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[06:38:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:42:54] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[06:48:39] *** Joins: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net)
[06:52:14] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[06:52:26] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:52:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:52:41] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:54] <Forty-Bot> I'm trying to use two atomic ints to create a larger atomic int (of double the native atomic width)
[06:54:20] <Forty-Bot> I have a prototype, but I'm having trouble getting the ordering right https://bpa.st/XMIQ
[06:55:08] <Forty-Bot> the loop in get() is supposed to make sure that inc() has incremented upper and reset lower before we read upper
[06:55:25] <Forty-Bot> but sometimes I read a lower which has been reset but upper hasn't been incremented
[06:56:42] <dave0> i don't know anything about atomics, but i would do this with a mutex
[06:56:51] <Forty-Bot> I want to use atomics for better performance
[06:57:17] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:57:25] <Forty-Bot> I've tested and using a mutex is slower, but I need to handle rollover on 32-bit arches
[06:58:49] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[06:59:22] <dave0> what if instead of atomic_store in inc(), you used   add(&lower, -THRESHOLD)
[07:00:12] <Forty-Bot> still happens
[07:00:44] <Forty-Bot> I'm not too concerned about losing a few increments when a rollover happens, but I do need to make sure that the counter never goes backwards
[07:01:48] <dave0> so inc() adds 1 to both lower/upper and get() grabs lower/upper ?
[07:02:39] <dave0> eh i dunno atomics
[07:02:44] <Forty-Bot> inc adds 1 to lower, and if lower crosses the threshold it increments upper and resets lower
[07:03:07] <Forty-Bot> (a slightly reduced version is available at https://bpa.st/VQSQ)
[07:03:20] *** Quits: imp (~imp@179-191-215-167.static.sumicity.net.br) (Quit: imp)
[07:05:00] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:05:35] *** Joins: jx0 (~jx0@199.229.250.142)
[07:06:52] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:02] <dave0> what happens if you do     void get(struct shared *sh, int *l, int *u) { int lower, upper, upper0; do { upper = atomic_load(&sh->upper); lower = atomic_load(&sh->lower); upper0 = atomic_load(&sh->uppser); } while(upper != upper0); *l = lower; *u = upper; }
[07:09:37] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:10] <Forty-Bot> still fails
[07:10:48] <dave0> hmm that should get a valid reading
[07:11:07] <Forty-Bot> no, you need to be able to write upper/lower atomically for that
[07:11:09] <dave0> the 2 upper fetches should catch if upper changed while you read lower
[07:11:56] <dave0> hmm yeah
[07:13:23] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[07:13:51] *** Quits: miremeister (uid387155@id-387155.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:14:41] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[07:18:46] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:21:24] *** Joins: archetypic (~user@072-182-154-233.res.spectrum.com)
[07:21:27] *** Quits: archetypic (~user@072-182-154-233.res.spectrum.com) (Client Quit)
[07:24:19] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[07:24:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:24:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:26:38] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:68d7:a1e0:7423:dabd)
[07:26:39] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:28:31] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[07:29:22] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[07:30:29] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[07:30:46] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[07:30:47] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[07:31:40] <Forty-Bot> ok, the magic condition appears to be *upper == atomic_load(&sh->upper) && *lower < THRESHOLD
[07:33:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:34:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:36:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:36:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:37:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[07:38:00] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[07:38:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31) (Quit: Quit)
[07:44:40] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[07:45:31] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 250 seconds)
[07:47:08] *** Joins: deflected (~deflected@user/deflected)
[07:47:13] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[07:51:21] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[07:52:03] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-b97e-75ff-df8e-4880.fixed6.kpn.net)
[07:54:01] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[07:54:35] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:56:21] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-b97e-75ff-df8e-4880.fixed6.kpn.net) (Ping timeout: 250 seconds)
[08:00:07] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[08:00:19] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:00:32] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[08:09:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[08:11:01] <nightstrike> any opinions on my FAM thing? refresher, with all the talk about flexible array members, I was playing around, and found that even though unions of fam's aren't supported, this does work: `union Any { struct { size_t nInt8; int8_t dataInt8; }; struct { size_t nInt16; int16_t dataInt16; }; };` which could be extended easily to all the base types.  It means that a function could return a malloc'd "Any" object, and hold a sized array of data
[08:11:17] <nightstrike> anyway, I think it's neat, even if it's silly
[08:11:38] <nightstrike> ok, well it would be better if I typed it write
[08:11:45] *** Quits: tbcr (~tbcr@107.13.189.161) (Read error: Connection reset by peer)
[08:11:46] <nightstrike> ........"right".........
[08:12:10] <nightstrike> dataInt8[], dataInt16[], in case it's not obvious where the typo is
[08:15:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:15:56] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[08:17:01] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[08:17:32] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:19:54] *** Joins: Oddity (~Oddity@user/oddity)
[08:23:35] *** Joins: Guest7000 (~eAC53C340@88.227.64.4)
[08:25:45] *** Quits: highrate (~presonic@user/highrate) (Ping timeout: 256 seconds)
[08:28:44] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[08:29:12] *** Joins: jkotra (~jkotra@223.230.91.108)
[08:30:16] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:34:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:37:23] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:38:47] *** Joins: reset (~reset@user/reset)
[08:40:29] *** Guest7000 is now known as karakedi
[08:40:31] *** Quits: karakedi (~eAC53C340@88.227.64.4) (Changing host)
[08:40:31] *** Joins: karakedi (~eAC53C340@user/karakedi)
[08:41:51] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:41:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[08:42:01] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[08:43:17] *** Joins: masoudd (~masoudd@user/masoudd)
[08:44:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:49:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:50:43] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[08:51:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:55:09] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[08:55:47] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[08:59:51] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:04:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:04:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:04:38] *** Joins: wroathe (~wroathe@user/wroathe)
[09:05:45] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[09:06:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:07:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:09:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:09:19] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:10:12] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:10:17] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[09:10:28] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:10:32] *** Joins: malina (~malina@user/malina)
[09:10:50] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[09:11:16] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:12:47] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[09:16:48] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[09:18:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:19:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[09:19:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Client Quit)
[09:21:51] *** Quits: alch (~alch@151.44.74.14) (Read error: Connection reset by peer)
[09:22:03] *** Quits: caze (~caze@user/caze) (Quit: caze)
[09:22:43] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:25:32] *** Joins: mandanguita (~mandangui@139.47.119.61)
[09:25:51] *** Joins: alch (~alch@151.46.16.166)
[09:26:27] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[09:27:12] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:34:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:34:20] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[09:36:21] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[09:36:44] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-7-112.pa.qld.optusnet.com.au)
[09:36:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:36:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:36:48] *** Joins: wroathe (~wroathe@user/wroathe)
[09:40:57] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[09:41:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:45:37] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-7-112.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[09:55:41] *** Quits: malina (~malina@user/malina) (Quit: malina)
[10:04:53] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Read error: Connection reset by peer)
[10:05:24] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:05:49] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Read error: Connection reset by peer)
[10:06:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:07:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:09:48] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[10:09:51] <sham1> You also want a field somewhere that indicates the type your thing is holding
[10:10:19] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.188)
[10:11:24] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.188) (Remote host closed the connection)
[10:12:22] *** Quits: jx0 (~jx0@199.229.250.142) (Quit: poof!)
[10:14:59] *** Joins: malina (~malina@user/malina)
[10:18:31] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[10:19:34] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:23:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[10:23:56] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:25:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:25:56] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[10:26:05] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[10:26:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[10:27:03] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Quit: Leaving)
[10:27:14] *** Quits: mandanguita (~mandangui@139.47.119.61) (Quit: leaving)
[10:27:44] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:29:19] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Client Quit)
[10:39:29] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[10:41:46] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:43:50] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.116)
[10:46:57] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:49:16] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 250 seconds)
[10:53:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:54:33] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[10:54:53] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[10:56:46] *** Joins: caze (~caze@user/caze)
[10:59:06] *** Joins: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[10:59:06] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Killed (NickServ (GHOST command used by |darc|-)))
[10:59:42] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:01:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:01:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:04:14] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[11:05:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:06:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[11:06:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[11:07:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[11:07:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[11:13:49] *** Quits: poprocks (~logan@user/poprocks) (Ping timeout: 240 seconds)
[11:13:49] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.116) (Ping timeout: 256 seconds)
[11:15:55] *** Joins: poprocks (~logan@bras-base-toroon1016w-grc-38-76-65-23-178.dsl.bell.ca)
[11:16:08] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:20:39] *** Quits: m4v (~znc@ubuntu/member/m4v) (Quit: Desconectando ...)
[11:22:57] *** Joins: m4v (~znc@ubuntu/member/m4v)
[11:23:59] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[11:33:00] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (Quit: leaving)
[11:33:10] *** Joins: dacav (~dacav@h94-245-9-206.cust.a3fiber.se)
[11:38:31] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[11:39:18] *** Joins: mrig (~mrig@user/mrig)
[11:39:30] *** Quits: dacav (~dacav@h94-245-9-206.cust.a3fiber.se) (Quit: leaving)
[11:39:41] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[11:40:12] *** Joins: aradesh (~aradesh@user/aradesh)
[11:46:56] *** Joins: Rounin (~david@84.212.130.215)
[11:47:04] *** Joins: leo__ (~leo@31-161-189-89.mobile.kpn.net)
[11:50:33] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Ping timeout: 256 seconds)
[11:56:53] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:58:11] *** Emet-Selch is now known as haise01
[11:58:17] *** haise01 is now known as Azem
[11:59:42] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:04:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[12:07:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:08:56] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[12:09:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[12:09:45] *** Joins: jkotra (~jkotra@223.230.91.108)
[12:13:45] *** Joins: meator (~meator@user/meator)
[12:14:21] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 256 seconds)
[12:15:26] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[12:17:19] *** Quits: leo__ (~leo@31-161-189-89.mobile.kpn.net) (Quit: institute budget)
[12:21:23] *** Joins: pyook (~pyook@user/puke)
[12:24:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[12:26:02] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:29:45] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[12:31:09] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:31:31] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-22-55.pa.qld.optusnet.com.au)
[12:31:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[12:34:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[12:34:31] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[12:34:37] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:34:45] *** Quits: shachaf (~shachaf@user/shachaf) (Ping timeout: 250 seconds)
[12:35:38] *** Joins: shachaf (~shachaf@user/shachaf)
[12:36:56] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:39:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:41:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[12:52:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[12:56:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:04:04] *** Joins: meator (~meator@user/meator)
[13:05:55] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:11:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:28] *** Quits: domve (~dom@user/domve) (Ping timeout: 250 seconds)
[13:20:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:20:33] *** Joins: arinov_ (~arinov@176.89.27.174)
[13:22:03] *** Quits: alch (~alch@151.46.16.166) (Read error: Connection reset by peer)
[13:23:17] *** Quits: vboykox (~user@69-46-134-95.pool.ukrtel.net) (Ping timeout: 240 seconds)
[13:25:24] *** Joins: vboykox (~user@95.134.13.247)
[13:25:44] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Quit: Client closed)
[13:26:15] *** Joins: alch (~alch@151.46.46.47)
[13:26:30] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:27:56] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:28:01] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-22-55.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[13:29:52] <homura> HOORAH TO THE CONFEDERACY
[13:30:47] *** Joins: xa0s (~xa0s@mab.sdf.org)
[13:30:53] <sham1> no
[13:32:05] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:32:40] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:33:08] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:36:00] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[13:37:39] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:38:29] *** Joins: turtlebee (~turtlebee@85.203.44.170)
[13:40:06] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:42:11] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[13:43:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:44:10] *** Joins: RicardasSim_ (~RicardasS@78-63-172-44.static.zebra.lt)
[13:44:16] *** Quits: RicardasSim_ (~RicardasS@78-63-172-44.static.zebra.lt) (Remote host closed the connection)
[13:44:23] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Client Quit)
[13:44:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:44:41] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[13:45:27] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[13:47:03] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:51:11] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:51:39] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[13:56:23] *** Quits: turtlebee (~turtlebee@85.203.44.170) (Quit: WeeChat 3.4)
[13:56:47] *** Joins: turtlebee (~turtlebee@85.203.44.170)
[13:58:08] *** Joins: vysn (~vysn@user/vysn)
[13:58:25] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[13:59:37] *** Quits: turtlebee (~turtlebee@85.203.44.170) (Client Quit)
[13:59:54] *** Joins: turtlebee (~turtlebee@85.203.44.170)
[14:02:54] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:03:35] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Quit: nyaa~)
[14:03:39] *** Quits: turtlebee (~turtlebee@85.203.44.170) (Client Quit)
[14:04:38] *** Joins: ko (~i.am@user/marlboro)
[14:07:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[14:09:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:09:06] *** Quits: joilerv (~joilerv@80.169.238.242) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:11:35] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[14:11:53] *** rkta_ is now known as rkta
[14:15:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:17:18] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[14:17:20] *** Joins: bnchs (~bnchs@105.157.169.34)
[14:17:42] *** Joins: ckdCreations (~ckdCreati@147.55.133.129)
[14:19:29] *** Joins: g2anj (~v@58.228.230.4)
[14:19:37] *** Joins: rando25892 (~homefame@user/rando25892)
[14:21:08] *** Joins: ludwhe (~ludwhe@user/ludwhe)
[14:21:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:22:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:22:43] <smallville7123> how does the preprocessor rescan a macro
[14:24:04] <smallville7123> as so far i can preprocess everything in here as shown by -E   https://godbolt.org/z/e19sd7rxd   except for `Y(X)(z)` in which i get `X(z)`
[14:24:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:00] <smallville7123> and im not sure how to handle this
[14:25:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:26:03] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:28] <smallville7123> as with `#define foo(a) foo(b) \n foo(b)` if i replace the macro contents and then rescan it i get infinite recursion and if i replace the macro contents but do not rescan it then `X(z)` does not get expanded as it is not scanned
[14:29:14] <fizzie> The "infinite recursion" is handled by just exempting the macro currently being handled from being expanded.
[14:29:19] <fizzie> I haven't checked if it's the case in your example, but there's also one bit of genuine ambiguity in the rules: https://0x0.st/-gIz.txt
[14:30:08] *** Joins: ipgd (~IPGD@180.254.226.48)
[14:30:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:33:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:33:43] <smallville7123> fizzie: i know
[14:33:53] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[14:34:05] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:34:27] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:35:03] <smallville7123> what i need to do is push the macro that is to be rescanned into the stack, then rescan, and then somehow pop it from the stack after
[14:36:12] <smallville7123> i think it might be possible if i modify the grammar to have a rule at the end of the function call that pops the stack
[14:37:01] <smallville7123> wait no that wouldnt work due to the rescan
[14:37:51] <dave0> is it  Y(X)(z)   or  Y(X(z))   ?
[14:38:16] <dave0> isn't that curry'ing?
[14:39:26] <fizzie> It's just a token sequence. And I guess Y(X)(z) is not one of those ambiguous cases, since it doesn't involve the same macro, and must therefore expand into `z y` rather than `X(z)`.
[14:39:38] *** Joins: ccl (~ccl@user/ccl)
[14:40:55] <fizzie> (I.e., you must have some sort of rescanning step in there, the ambiguity is just about what's treated as being "part of" the expansion of the macro when the potential self-recursive call is partially from the expansion and partially from the remaining tokens.)
[14:43:42] <fizzie> I seem to recall there was a page on how the GNU C preprocessor handles making some tokens ineligible for expansion, which might be helpful for inspiration.
[14:44:00] <homura> little darling
[14:44:01] <fizzie> I'm probably thinking of https://gcc.gnu.org/onlinedocs/cppinternals/Macro-Expansion.html -- no guarantees about how useful it'd be though.
[14:50:50] <bnchs> i wanna cut down on the amount of allocs my library does, by switching to callbacks
[14:51:19] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Remote host closed the connection)
[14:51:24] <bnchs> is it good to do that?
[14:51:34] *** Joins: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823)
[14:53:05] <supakeen> sure, there's various flavors of not doing allocations in your library
[14:53:09] <supakeen> and that's a good idea
[14:53:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:54:31] <sr20det> ,seq a+++b
[14:54:32] <candide> [#bash] seq(1) is nonstandard, inefficient and useless. For bash2.04+/zsh/ksh93, use for ((i = 1; i <= 10; i++)); do ..., bash3.0+, use for i in {1..10}, for POSIX and other shells, see !counting
[14:55:07] <sr20det> ,prec a+++b
[14:55:08] <candide> sr20det: (a++) + b
[14:56:36] *** Parts: ipgd (~IPGD@180.254.226.48) ()
[14:57:40] <bnchs> ,cc (*rand())(1);
[14:57:41] <candide> bnchs: error: invalid type argument of unary '*' (have 'int')
[15:00:11] <smallville7123> "21:07:52 dave0: is it  Y(X)(z)   or  Y(X(z))   ?"   it is     Y(X)(z)
[15:00:27] <bnchs> ,cc (*((void (*)(int))rand()))(1);
[15:00:37] <candide> bnchs: [warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]]  The program being debugged was signaled while in a function called from GDB. GDB remains in the frame where the signal was received. To change this behavior use "set unwindonsignal on". Evaluation of the expression containing the function (at 0x0x6b8b4567) will be abandoned. When the function is done executing, GDB will silently stop.  [gdb time-out]
[15:01:18] <NRK> you can priv msg the bot
[15:01:27] <NRK> also ,english exists
[15:01:54] <bnchs> i didn't know you could private message the bot
[15:01:57] <NRK> ,english void * (*my_malloc)(size_t);
[15:01:59] <candide> NRK: Declare `my_malloc` as a pointer to function taking size_t and returning pointer to void.
[15:03:06] <bnchs> i was just trying to make it execute an instruction at the address returned by rand()
[15:03:14] <bnchs> with an integer argument
[15:03:31] <fizzie> ,english while (1) for (;;) if (1) 1 ? 1 : 1;
[15:03:32] <candide> fizzie: Repeatedly repeatedly always 1 if 1 is nonzero otherwise 1.
[15:03:50] <bnchs> ,english (*((void (*)(int))rand()))(1);
[15:03:50] <candide> bnchs: error: cast to pointer from integer of different size
[15:04:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[15:04:21] <fizzie> candide: You're such a picky bot.
[15:04:32] <candide> I am such a picky bot? As if!
[15:04:50] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:04:52] <bnchs> is this 64-bit
[15:05:22] <fizzie> ,english ((void (*)(int)) (intptr_t)brand())(1);
[15:05:24] <candide> fizzie: Call the function resulting from the expression (the result of the function `brand` converted to intptr_t converted to pointer to function taking int and returning void) with argument 1.
[15:05:29] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:05:38] <dave0> ,english ((void(*)(int))(long)rand())(1);
[15:05:40] <candide> dave0: Call the function resulting from the expression (the result of the function `rand` converted to long converted to pointer to function taking int and returning void) with argument 1.
[15:05:54] <fizzie> (Whoops, where did that 'b' come from? Oh well.)
[15:06:03] <bnchs> ok i guess you guys improved it
[15:07:37] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:15:50] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:16:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:16:57] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[15:27:05] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:27:07] *** Joins: Klinda (~superleag@user/klinda)
[15:27:49] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[15:27:50] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[15:30:06] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:45] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[15:31:09] *** Joins: csrf (~csrf@user/csrf)
[15:31:30] *** Joins: Elladan (~elladan@user/elladan)
[15:33:33] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:34:09] *** Quits: pyook (~pyook@user/puke) (Ping timeout: 256 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:40:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[15:42:41] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:44:32] *** Quits: ludwhe (~ludwhe@user/ludwhe) (Quit: Client closed)
[15:45:21] *** Joins: duds- (~duds-@user/duds)
[15:45:23] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Quit: leaving)
[15:45:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:45:40] *** Joins: hinata_ (~hinata_@2409:4042:2486:40e7:bc25:1b6f:a486:77e)
[15:45:53] *** Quits: hinata_ (~hinata_@2409:4042:2486:40e7:bc25:1b6f:a486:77e) (Client Quit)
[15:46:15] *** Joins: tavares (~tavares@187.19.213.50)
[15:46:17] *** Quits: hinata (~hinata@2409:4042:2486:40e7:c5f1:6b1a:d312:6823) (Quit: Leaving)
[15:46:26] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[15:46:26] *** Joins: tavares (~tavares@user/tavares)
[15:46:57] *** Quits: arinov_ (~arinov@176.89.27.174) (Ping timeout: 256 seconds)
[15:48:30] *** Joins: Retr0id6 (~Retr0id@user/retr0id)
[15:48:42] *** Quits: Retr0id (~Retr0id@user/retr0id) (Read error: Connection reset by peer)
[15:48:42] *** Retr0id6 is now known as Retr0id
[15:49:27] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:49:27] *** Joins: seninha (~seninha@user/seninha)
[15:53:17] *** Joins: kts (~kts@103.73.237.65)
[15:53:49] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[15:54:07] <roxlu> hey, I was thinking a bit about strict aliasing and wondering what would be the preferred way here: https://gist.github.com/roxlu/1d3a7a0d0c5221177aa8a7d19a306cfd ? (e.g. the send function send data over a socket)
[15:54:08] <candide> Title of roxlu's link: aliasing. · GitHub
[15:54:33] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[15:55:32] <smallville7123> i dont know how
[15:57:01] <smallville7123> damn this preprocessor requirements
[15:57:30] *** Joins: duds- (~duds-@user/duds)
[15:58:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:59:24] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:59:32] <clarity> roxlu: There's not enough context to suggest anything other than what send(3) does
[16:00:20] <fizzie> `send_with_char` and `send_with_u8` both require the caller to explicitly convert their pointer to `char *` or `uint8_t *`, respectively, which is a little awkward.
[16:00:27] <roxlu> clarity: ok thanks, so regarding aliasing there is no preferred way? I would think the `send_with_char()` because of the use of `char` as the "valid" aliasing type.
[16:00:44] <clarity> It's irrelevant here
[16:01:40] <roxlu> clarity: why is that? or better when does it become relevant? I thought that assigning a pointer to a different one is what is relevant
[16:02:18] <clarity> Aliasing becomes relevant when you access an object
[16:02:26] <clarity> Which passing a pointer doesn't do
[16:03:05] <roxlu> clarity: with accessing, do you mean like setting a value? e.g. when I would do `data[0] = 'c'` inside `send_*()` ?
[16:03:31] *** Quits: kts (~kts@103.73.237.65) (Quit: Konversation terminated!)
[16:04:13] <clarity> Setting, getting, yes
[16:04:21] <roxlu> ah yeah I see thanks.
[16:04:40] <clarity> The aliasing rule starts with "An object shall have its stored value accessed only by an lvalue expression that has one of the following types"
[16:05:14] <clarity> You can always convert pointers to satisfy it
[16:06:13] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[16:06:40] <roxlu> ok and `char*` can be used "safely"; I mean, it follows the rule. E.g. I could do: `struct something { uint32_t data; }; struct something obj; char* ptr = &obj; ptr[0] = 0x00`
[16:07:18] <fizzie> A strictly conforming program needs an explicit conversion (a cast) for `char *ptr = (char *) &obj;`.
[16:07:23] *** Quits: gdarko (~me@dg.mk) (Remote host closed the connection)
[16:07:30] <roxlu> ah I see ok, thanks
[16:07:33] *** Joins: gdarko_ (~me@dg.mk)
[16:07:57] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[16:08:22] <roxlu> feeling silly that I've never got into these details .. and I've been programming C/C++ for quite a while. ... also never encountered any issue with this tbh.
[16:08:47] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:10:08] <fizzie> Really the main difference between taking a `char *` vs. `void *` in a function that's supposed to access the representations of arbitrary objects is that it moves the annoyance of converting to a pointer to character type from the function's caller to the function definition. And since there's just one definition but (usually) multiple calls, people generally prefer to do that. Hence `fwrite`, `fread`,
[16:10:10] <fizzie> `memcpy` et al. all take a `void *`.
[16:10:11] *** Joins: Red__ (~Red@41.92-221-233.customer.lyse.net)
[16:10:25] <roxlu> yeah makes sense, thanks
[16:11:34] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[16:12:13] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[16:12:55] <roxlu> let's say I want to change the values of a `uint32_t uval` or `int32_t sval` is it better to use `unsigned char*` for unsigned values and `char*` for signed values? I would say using `unsigned char*` for both somehow feels more "natural", espeically when assigning / reading byte values; (that said, I rarely use singed values)
[16:12:58] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Killed (NickServ (GHOST command used by Red__)))
[16:13:02] *** Red__ is now known as Red
[16:13:06] *** Joins: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de)
[16:15:26] <fizzie> Yes, `unsigned char *` is the natural type for any access to object representations. Doesn't really make sense to try to "match signedness" when you're accessing individual bytes.
[16:15:36] <fizzie> (Not that plain `char` is necessarily signed.)
[16:16:12] <fizzie> Sort of along those lines:
[16:16:14] <fizzie> ,c11 7.24.1p3
[16:16:14] <candide> http://www.iso-9899.info/n1570.html#7.24.1p3 [String function conventions] For all functions in this subclause, each character shall be interpreted as if it had the type unsigned char (and therefore every possible object representation is valid and has a different value).
[16:16:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[16:16:42] <roxlu> thanks fizzie
[16:17:17] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:17:59] *** Joins: pulse (~pulse@user/pulse)
[16:18:17] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[16:18:24] <fizzie> What that quoted sentence is referring to is, there's a (at this point mostly a theoretical, and post C23 probably not even that) possibility with plain `char` that it may not make every possible bit pattern a unique value.
[16:21:23] *** Joins: Atque (~Atque@user/atque)
[16:21:39] *** Joins: mrig (~mrig@user/mrig)
[16:28:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:29:33] <smallville7123> how does the preprocessor rescan a macro
[16:32:25] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:34:47] <smallville7123> as in psuedo i have    while(matches) { if (function_call) { replace_contents_with_function_body; push(function_name); input.backtrack_to(function_call_name); } // how do we pop the function name so it can be expanded elsewhere?
[16:37:25] <smallville7123> }
[16:38:00] <fizzie> The way GNU CPP does it (AIUI, anyway) is, you don't merely push the function name, you push a "context" that also includes the expanded tokens (the "replace_contents_with_function_body" bit). Then it continues (re)scanning tokens from the topmost context, and only when those tokens are exhausted does it pop the context off, making the macro again eligible for expansion.
[16:38:19] *** Quits: diiirt (~diiirt@user/diiirt) (Quit: Ping timeout (120 seconds))
[16:38:27] *** Joins: diiirt9 (~diiirt@user/diiirt)
[16:39:30] *** Quits: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:39:59] <fizzie> I'm sure other mechanisms could be devised too. For example, add some sort of special pseudo-token that means "pop the stack" but is otherwise empty after the expanded contents. But then everything else would need to be aware of and ignore those pseudo-tokens.
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:40:23] <smallville7123> hmmm so, say the input position is 5, would it continue to rescan to 5 (and further) until it exhausts all tokens at which it does not rescan to 5 and continues...
[16:40:55] *** Quits: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[16:41:17] *** Quits: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[16:41:48] *** Joins: kubrickdave (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[16:42:14] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[16:42:39] *** Joins: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net)
[16:42:51] <smallville7123> if the preprocessor expands a function call, say "a(b)' to "foo(bar); y(z)"  then the context will continue from "; y(z)"
[16:43:25] <smallville7123> or would it continue from the point past "y(z)" ?
[16:43:45] *** Joins: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de)
[16:45:07] <smallville7123> by say rewinding to "foo(bar)" and then advancing the input by the length of the replaced expansion content "foo(bar); y(z)"
[16:46:29] <smallville7123> fizzie:
[16:46:47] <fizzie> Well, let's say you have `#define foo(x) 9 x(x) 9` and the input tokens are `1 foo(foo) 2 foo(bar) 3`. It'd start in a special "base context", which means "read tokens from the input source". It'd read and pass through 1. At the position "foo(foo) ..." it would detect a function-like macro, so it would push on the stack a context that contains the token list [9 foo(foo) 9], leaving the rest ("2 foo(bar)
[16:46:49] <fizzie> 3") in the input. Then it'd continue reading tokens from that context: within the context, `foo` is not eligible for expansion, so they all pass through. Once the context runs out of tokens, it gets popped off the stack, and scanning continues from the input. It passes 2 through, encounters `foo(bar)`, and since it's back in the base context it is again eligible for expansion.
[16:47:34] <fizzie> So there's no "rewinding" of the input, or replacing anything in the input.
[16:49:11] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:57:29] <smallville7123> welp for that, i get "1 9 foo(x) 9 2 9 bar(x) 9 3"
[16:58:59] *** Joins: strajder (~strajder@user/strajder)
[17:06:03] <smallville7123> hmmm         could not find definition for function argument 'x'
[17:08:30] *** Joins: badsektor (~badsektor@user/badsektor)
[17:09:14] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:12:51] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[17:13:34] *** Joins: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[17:17:11] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:17:19] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:17:44] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:22:37] *** Quits: alch (~alch@151.46.46.47) (Read error: Connection reset by peer)
[17:22:44] *** Quits: ko (~i.am@user/marlboro) (Read error: Connection reset by peer)
[17:24:21] *** Joins: kts (~kts@103.73.237.56)
[17:25:25] *** Joins: ko (~i.am@177.96.143.233)
[17:25:25] *** Quits: ko (~i.am@177.96.143.233) (Changing host)
[17:25:25] *** Joins: ko (~i.am@user/marlboro)
[17:26:32] *** Joins: alch (~alch@151.44.93.209)
[17:27:39] *** Joins: Spock_ncc1701 (~Spock_ncc@85.203.44.67)
[17:29:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[17:33:00] <roxlu> thanks fizzie
[17:33:15] * roxlu oops, wrong window.
[17:35:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:38:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1c35:8f5c:4397:2de5) (Ping timeout: 240 seconds)
[17:39:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:40:07] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:41:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c)
[17:41:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c) (Changing host)
[17:41:06] *** Joins: skapata (~Skapata@user/skapata)
[17:41:40] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[17:42:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[17:44:31] <sham1> roxlu: well thanking fizzie works in many windows
[17:45:00] <roxlu> haha
[17:45:59] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:46:01] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:46:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:46:57] *** Joins: kts_ (~kts@103.73.237.5)
[17:47:44] *** Quits: kts_ (~kts@103.73.237.5) (Client Quit)
[17:47:53] *** Quits: kts (~kts@103.73.237.56) (Ping timeout: 256 seconds)
[17:48:17] <smallville7123> fizzie: so now i get `1 9 foo(foo) 9 2 9 bar(bar) 9 3`
[17:48:29] *** Quits: jkotra (~jkotra@223.230.91.108) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[17:48:40] <smallville7123> and sorry, watching a movie
[17:49:11] *** Joins: benkietzman (~ben@2600:1700:9930:4f90:65b0:dc65:3728:78b7)
[17:49:14] *** Quits: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de) (Quit: Leaving...)
[17:49:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:49:46] *** Quits: benkietzman (~ben@2600:1700:9930:4f90:65b0:dc65:3728:78b7) (Client Quit)
[17:49:52] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:50:14] *** Joins: BenKietzman (~ben@2600:1700:9930:4f90:65b0:dc65:3728:78b7)
[17:51:50] *** Joins: jkotra (~jkotra@223.230.91.108)
[17:55:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:55:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:55:39] *** Joins: wroathe (~wroathe@user/wroathe)
[17:56:52] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[18:00:29] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:01:36] *** Joins: St327 (~St327@user/st327)
[18:02:12] <smallville7123> fizzie: gtg bed ;-;
[18:02:38] *** Quits: St327 (~St327@user/st327) (Client Quit)
[18:03:18] *** Joins: kts (~kts@103.73.237.5)
[18:03:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:05:10] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:06:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:06:51] <amosbird> Hmm, what's the correct escape sequence to move terminal cursor to the beginning of current line using termios.h ? I can only find sequence to set pos explicitly
[18:07:01] *** Joins: soul-d (~uknown@user/soul-d)
[18:07:14] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[18:07:30] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:08:09] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:08:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[18:10:38] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:11:45] <sham1> Well you could always try '\r' although that's not truly an escape sequence as such
[18:11:53] <sham1> Not in the same way, anyway
[18:15:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:18:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4) (Ping timeout: 250 seconds)
[18:19:03] *** Quits: bnchs (~bnchs@105.157.169.34) (Ping timeout: 256 seconds)
[18:19:07] *** Joins: alex11 (~alex11@user/alex11)
[18:20:25] *** Joins: jkotra_ (~jkotra@223.230.91.108)
[18:20:30] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[18:20:35] *** jkotra_ is now known as jkotra
[18:21:12] *** Joins: Tof (~Tof@147.161.180.110)
[18:23:59] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[18:24:16] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[18:27:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[18:29:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:34:33] *** Joins: seninha (~seninha@user/seninha)
[18:34:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:35:14] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:36:57] *** Quits: NovaXrine_ (~NovaXrine@2604:a880:4:1d0::183:6000) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:37:16] *** Joins: NovaXrine (~NovaXrine@void.novaxrine.com)
[18:37:30] *** Quits: kts (~kts@103.73.237.5) (Quit: Konversation terminated!)
[18:37:34] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[18:38:19] *** Joins: kts (~kts@103.73.237.5)
[18:38:48] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:41:28] *** Quits: miremeister (uid387155@id-387155.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:42:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:45:48] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[18:47:18] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:48:53] *** Joins: bnchs (~bnchs@105.158.12.46)
[18:49:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:49:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:49:09] *** Joins: wroathe (~wroathe@user/wroathe)
[18:50:20] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[18:51:42] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 260 seconds)
[18:51:54] *** Joins: seninha (~seninha@user/seninha)
[18:53:29] *** Joins: imp (~imp@138-59-122-25.static.sumicity.net.br)
[18:53:39] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[18:53:51] *** Joins: Dreg (~Dreg@fr33project.org)
[18:53:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:55:52] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:56:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:57:07] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[18:59:37] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:08:05] <amosbird> Ah, right
[19:10:15] * ski idly wonders if there's any termcap/terminfo capabilities for that
[19:11:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[19:12:48] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) ()
[19:13:06] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[19:14:00] <sham1> Probably is
[19:15:23] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[19:19:14] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[19:25:41] *** Joins: noonien (~noonien@user/noonien)
[19:31:27] *** Joins: Ap3 (~ape@kanonenjagd.panzer.ninja)
[19:32:44] *** Quits: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Ping timeout: 250 seconds)
[19:32:49] *** Quits: Spock_ncc1701 (~Spock_ncc@85.203.44.67) (Quit: Leaving)
[19:38:27] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 276 seconds)
[19:40:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5e88:e8a2:f183:6782)
[19:40:39] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[19:43:59] *** Quits: Tof (~Tof@147.161.180.110) (Quit: Connection closed)
[19:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:45:17] *** Joins: nicode (~nic@2607:f2c0:9541:7100:1164:ccd2:17cc:5d1a)
[19:46:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[19:48:48] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[19:50:13] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[19:50:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[19:52:47] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[19:52:49] <twkm> beginning of line is easy even if \r isn't sufficient.
[19:53:04] <twkm> of course there's no certainty such exists.
[19:57:09] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:00:46] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[20:02:41] *** Joins: Dotz0cat_ (~Dotz0cat@24.144.1.234)
[20:03:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[20:03:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:03:45] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:07:21] *** Joins: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[20:08:13] *** Joins: Akuli (~Akuli@213.216.208.156)
[20:08:17] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[20:11:06] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[20:12:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:13:20] *** Joins: haliucinas (~haliucina@5.20.153.21)
[20:13:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:14:32] *** Joins: mahmutov (~mahmutov@5.176.34.44)
[20:18:54] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[20:20:46] <Dotz0cat_> Is there anything up with using srand48 and lrand48? I was reading on the man page and noticed that in the notes section that those functions were declared obsolete by SVID 3
[20:23:21] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[20:25:49] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:26:03] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[20:26:29] *** Joins: ipgd (~IPGD@180.254.226.48)
[20:26:40] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[20:27:42] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[20:30:33] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[20:32:12] *** Joins: Akiva (~Akiva@user/Akiva)
[20:36:35] *** Joins: Rynn_ (~rynn@216.30.158.198)
[20:36:43] <oldlaptop> They're not standard C in the first instance, I don't believe.
[20:37:57] <oldlaptop> (And like all of the standard C and POSIX "random" number functions, they should not be counted on to be particularly good even by the standards that apply to basic licongruential generators. Smarter to bring your own minstd with you.)
[20:38:41] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[20:39:15] *** Quits: Dotz0cat_ (~Dotz0cat@24.144.1.234) (Ping timeout: 256 seconds)
[20:40:20] *** Joins: tavares (~tavares@187.19.213.50)
[20:40:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689)
[20:42:39] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[20:44:28] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:50:41] *** Joins: bnchs__ (~bnchs@41.141.173.31)
[20:51:22] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:68d7:a1e0:7423:dabd) (Quit: fe23)
[20:51:24] *** Joins: sebag (~guest@91.245.82.2)
[20:51:25] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[20:51:45] *** Joins: sebag (~guest@91.245.82.2)
[20:52:11] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[20:52:37] *** Quits: bnchs (~bnchs@105.158.12.46) (Ping timeout: 256 seconds)
[20:53:31] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[20:53:43] *** Quits: BenKietzman (~ben@2600:1700:9930:4f90:65b0:dc65:3728:78b7) (Quit: Leaving.)
[20:54:32] *** Quits: tavares (~tavares@187.19.213.50) (Changing host)
[20:54:32] *** Joins: tavares (~tavares@user/tavares)
[20:54:39] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[20:55:02] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[20:55:37] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[20:55:48] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:56:53] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[20:57:35] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[20:59:03] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[20:59:58] *** Joins: novns (~novns@user/novns)
[21:01:18] <sham1> Just bring your own xorshift
[21:01:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:02:19] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[21:02:49] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[21:05:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:07:32] *** Joins: sebag (~guest@91.245.82.2)
[21:08:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[21:09:11] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[21:09:40] <zwr> yeah, if you want predictable results given a specific seed you can't use the standard functions, if you want "cryptographically safe random numbers" all the modern systems seem to provide some API or another for this
[21:11:12] <NRK> constxd: i've sorta changed by mind on my vec macros
[21:11:13] <NRK> they
[21:11:20] <NRK> they're ok
[21:12:27] *** Joins: Soni (~quassel@autistic.space)
[21:15:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:20:43] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:22:22] *** Joins: BobTheTomato (~paul@141.217.247.7)
[21:23:37] *** Quits: alch (~alch@151.44.93.209) (Ping timeout: 240 seconds)
[21:24:52] *** Quits: Rynn_ (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:25:46] *** Quits: Akuli (~Akuli@213.216.208.156) (Quit: Akuli)
[21:28:10] <Thedarkb1-Deskto> Can anyone in here think of a failure mode of this: #define hash(x) BOX_Hash(&x,sizeof(x))
[21:28:19] <Thedarkb1-Deskto> Obviously it won't hash string literals.
[21:29:52] *** Joins: Akuli (~Akuli@87-94-111-8.bb.dnainternet.fi)
[21:31:29] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[21:31:50] <NRK> what will it hash then?
[21:32:19] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:33:35] *** Joins: Iarfen (~quassel@181.43.57.127)
[21:34:00] <Thedarkb1-Deskto> structs of most kinds.
[21:34:05] <Thedarkb1-Deskto> And arrays.
[21:34:56] <Thedarkb1-Deskto> I wasn't asking about the hash function, just about using a macro to genericise it.
[21:35:27] <bnchs__> Thedarkb1-Deskto, what does the BOX_Hash do
[21:35:27] *** Quits: tmpm697 (~tmpm697@171.224.178.134) (Remote host closed the connection)
[21:35:32] <bnchs__> and what are the arguments
[21:36:25] <Thedarkb1-Deskto> It takes a void pointer and size_t and it computes the hash of the object you feed it.
[21:36:26] <ski>   int BOX_Hash(void *,size_t);  /*  mayhaps ? */
[21:36:29] <Thedarkb1-Deskto> Correct.
[21:36:37] <bnchs__> what is the size_t
[21:36:46] <bnchs__> size of the pointer or size of the entire object?
[21:36:46] <ski> the size of the pointed-to object
[21:36:53] <Thedarkb1-Deskto> Yup.
[21:37:12] <Thedarkb1-Deskto> The actual hash function is just the one from K&R2, it's nothing special.
[21:37:28] <bnchs__> so the size as in the bytes in the pointer
[21:37:50] <Thedarkb1-Deskto> The number of bytes occupied by the structure the void pointer is pointing at.
[21:37:56] * ski idly wonders about pad bytes in `struct's
[21:38:11] <Thedarkb1-Deskto> If the padding is different, the hash will be too.
[21:38:19] <Thedarkb1-Deskto> The padding bytes are counted by sizeof.
[21:38:31] <ski> so, zero memory beforehand ?
[21:39:06] <Thedarkb1-Deskto> A zero'd struct will give you 0 as the hash.
[21:39:09] <bnchs__> BOX_Hash ("so arrays can't be hashed?", sizeof(char*));
[21:39:23] <ski> i mean, before initializing the appropriate fields
[21:39:39] <Thedarkb1-Deskto> That would hash the first 4 or 8 characters of that array.
[21:39:49] <Thedarkb1-Deskto> Because a string literal evaluates to a pointer.
[21:39:56] <bnchs__> BOX_HASH ("w", sizeof(char*));
[21:40:02] <bnchs__> what about this
[21:40:39] <bnchs__> it will hash w and the next 7 or 3 characters
[21:41:07] <ski> ,cc printf("%zu",sizeof "so arrays can't be hashed?");
[21:41:09] <candide> ski: 27
[21:41:42] <Thedarkb1-Deskto> Huh
[21:41:43] <bnchs__> ,cc printf("%zu", sizeof("so arrays can't be hashed?");
[21:41:44] <candide> bnchs__: error: expected ')' before ';' token
[21:41:47] <bnchs__> ,cc printf("%zu", sizeof("so arrays can't be hashed?"));
[21:41:49] <candide> bnchs__: 27
[21:41:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:41:58] <bnchs__> wtf but
[21:41:59] <ski> bnchs__ : try using `hash' rather than `BOX_Hash' ?
[21:42:04] <Thedarkb1-Deskto> They actually are arrays.
[21:42:36] <Thedarkb1-Deskto> I did a pointer decay dumb dumb, candide needs to punish me.
[21:42:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:43:28] <Thedarkb1-Deskto> Then it will work with string literals.
[21:43:30] <Thedarkb1-Deskto> I never thought that.
[21:43:33] <bnchs__> i thought it was gonna be a..... OH
[21:43:35] <ski> `hash("so arrays can't be hashed?")' will become `BOX_Hash(&"so arrays can't be hashed?",sizeof("so arrays can't be hashed?"))', and `&"so arrays can't be hashed?"' has type `char (*)[27]', not `char *'
[21:43:52] <bnchs__> its actually a char[27] not a char*
[21:44:16] <ski> `"so arrays can't be hashed?"' is a `char [27]'
[21:44:29] <ski> `&"so arrays can't be hashed?"' is a `char (*)[27]'
[21:44:32] <Thedarkb1-Deskto> Yes, I just forgot what a string literal was because I'm a bit thick, that works fine.
[21:44:40] <bnchs__> ,cc char *message = "i'm a user input you may not know what my size is"; hash(message);
[21:44:41] <candide> bnchs__: warning: implicit declaration of function 'hash' [-Wimplicit-function-declaration] /usr/bin/ld:  in function 'main': /home/vm/ undefined reference to 'hash'
[21:44:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:44:57] <ski> bnchs__ : yes. that's a valid criticism
[21:44:57] *** Quits: mahmutov (~mahmutov@5.176.34.44) (Ping timeout: 240 seconds)
[21:46:30] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[21:46:43] *** Quits: Ap3 (~ape@kanonenjagd.panzer.ninja) (Quit: bye)
[21:47:35] <ski> yea, "Because a string literal evaluates to a pointer." -- except in certain contexts, like `&',`sizeof' (and `restrict' and maybe some more ?)
[21:48:13] <Thedarkb1-Deskto> I wasn't aware of that caveat.
[21:48:38] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[21:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[21:49:12] <bnchs__> ,cc char *message = "i'm in the static executable data"; printf("%zu", sizeof(message));
[21:49:14] <candide> bnchs__: 8
[21:49:28] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[21:49:29] *** Joins: jkotra_ (~jkotra@223.230.91.108)
[21:49:53] *** jkotra_ is now known as jkotra
[21:50:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[21:50:56] *** Joins: seninha (~seninha@user/seninha)
[21:53:37] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[21:54:44] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:54:57] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[21:55:23] *** Joins: calamari (~jjohnston@ip72-217-21-192.ph.ph.cox.net)
[21:55:31] *** Quits: bnchs__ (~bnchs@41.141.173.31) (Ping timeout: 256 seconds)
[21:59:27] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:59:40] <calamari> Say a const array is only used by a single function. Is there possibly a performance or memory downside to putting a static variable definition/declaration inside a function rather than as a static const global?
[22:01:12] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[22:01:43] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:4db1:e3b:c0ba:c184)
[22:01:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:03:19] *** Joins: Ap3 (~ape@kanonenjagd.panzer.ninja)
[22:04:46] <sham1> Why not a static const global
[22:04:48] <sham1> Local
[22:05:26] *** Joins: jkotra_ (~jkotra@223.230.91.108)
[22:05:43] *** Quits: Akuli (~Akuli@87-94-111-8.bb.dnainternet.fi) (Quit: Akuli)
[22:05:45] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[22:05:45] *** jkotra_ is now known as jkotra
[22:07:58] *** Joins: Akuli (~Akuli@213.216.208.156)
[22:09:39] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[22:10:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64)
[22:10:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64) (Changing host)
[22:10:22] *** Joins: skapata (~Skapata@user/skapata)
[22:11:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:12:09] <zdctg[m]> well technically yes-- the memory is going to be allocated at application load time in one, but at run-time in the other. In practice however I'd say that unless you're talking about a lot of data its irrelevant
[22:12:33] *** Joins: bnchs (~bnchs@41.141.173.31)
[22:14:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:16:15] <nitrix> calamari, Modern optimization compilers are interested by how the data gets used and uses a technique known as SSA. The information propagates and all the dead leaves are eliminated. The object might never reside anywhere in memory, it'll just get inlined where it's used and in the most minimal way possible (e.g. If it's initialized in a predictable manner like all zeroes, or incrementally, it can modify the instructions to just compare with zero, subtract a
[22:16:15] <nitrix> counter or anything like that).
[22:16:21] *** Joins: seninha (~seninha@user/seninha)
[22:17:51] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[22:18:21] *** Joins: saline_retry_ (auk@gateway/vpn/protonvpn/auk)
[22:18:59] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[22:19:06] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Ping timeout: 245 seconds)
[22:19:15] <calamari> zdctg[m], nitrix: thank you
[22:19:17] <nitrix> There isn't a semantic difference between both approaches other than the scope of the identifier.
[22:19:27] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[22:19:30] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:19:53] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 256 seconds)
[22:20:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[22:20:32] <nitrix> The performance impact isn't tied to asymptotic complexity either, so it's a case-per-case basis if you can benchmark and prove that there's indeed a problem with the optimizers.
[22:23:52] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[22:24:51] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:26:49] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[22:27:27] <apotheon> s/per/by/
[22:27:34] <apotheon> err
[22:27:38] <apotheon> let's try that again
[22:27:44] <apotheon> s/-per-/-by-/
[22:27:53] <apotheon> I don't know what byformance means.
[22:28:01] <apotheon> It seems like a cool word, though.
[22:28:20] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[22:33:05] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:35:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:37:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:38:05] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:39:28] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:39:33] <SamuelMarks> hi
[22:40:07] <SamuelMarks> I've written a whole bunch of libraries in C89 that I've just started releasing open-source with their own independent repos + packages.
[22:40:28] <SamuelMarks> Is there some principle of when to return a `struct` and when to pass it as reference and return an `int` status code?
[22:40:41] <ioxzev1z> SamuelMarks, gimme link
[22:40:44] * SamuelMarks (compared to others) almost never returns anything but a `struct`
[22:41:11] <ioxzev1z> SamuelMarks, also just return a struct if it isn't too big, e.g. few hundred bytes vs 1MiB, etc
[22:41:12] <SamuelMarks> ioxzev1z - For example, this library of mine: https://github.com/SamuelMarks/curl-simple-https/blob/master/libcurl_simple_https/curl_simple_https.h
[22:41:37] *** Joins: carlavilla (~carlavill@188.26.219.45)
[22:41:58] <ioxzev1z> But if you return a struct you need to have some way to indicate error
[22:42:01] <Amun-Ra> https://twitter.com/__phantomderp/status/1489308466116186117
[22:42:05] <Amun-Ra> C23 incoming
[22:42:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:42:17] <ioxzev1z> An example being the struct having some (e.g) fd, which you set to -1 on error
[22:42:38] <SamuelMarks> ioxzev1z: That's what my `long status_code;` is
[22:42:45] *** Quits: jkotra (~jkotra@223.230.91.108) (Read error: Connection reset by peer)
[22:42:48] <SamuelMarks> EXIT_FAILURE I sometimes set it to
[22:42:49] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[22:42:49] <ioxzev1z> SamuelMarks, in that case just return the struct
[22:43:08] *** Joins: jkotra (~jkotra@223.230.91.108)
[22:43:11] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[22:43:12] <SamuelMarks> But is it bad practice to do things that way, is it a better idea to allocate at the callee level and pass by ref?
[22:43:34] <ioxzev1z> Nothing wrong with s = foo(...); but nothing wrong with ret = foo(&bar); either
[22:43:58] <ioxzev1z> SamuelMarks, also C doesn't have references so you must mean pass as pointer
[22:44:02] <SamuelMarks> yeah
[22:44:13] * SamuelMarks should never of learned C++ before C
[22:44:30] <SamuelMarks> Amun-Ra - Pfft, C89 for lyfe
[22:45:03] <ioxzev1z> If your struct has some error code inside you don't really get much from returning an error from foo_init or whatever
[22:45:07] <SamuelMarks> ioxzev1z - So there's no best practice to consider?
[22:45:22] *** Joins: crashrep (~crashrep@user/crashrep)
[22:45:23] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 256 seconds)
[22:45:34] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[22:45:36] <SamuelMarks> ioxzev1z - I was more thinking early exit to skip allocation… but then a pass by pointer would also require a struct to be allocated
[22:45:38] <ioxzev1z> SamuelMarks, use what works. As I said a small struct is fine to return, but bigger ones might be better to create and pass as pointers to the function
[22:45:39] <SamuelMarks> hmm
[22:46:00] <SamuelMarks> So that's my design principle, only pass by pointer if it's big?
[22:46:31] <ioxzev1z> Tehcnically speaking the struct will always require allocation, so you need to consider whether it's too big of a job to make a copy via returning it each time
[22:47:11] <Amun-Ra> SamuelMarks: I don't think they'd include some usefuel features, so you know
[22:47:14] * SamuelMarks actually did do some pass-by-pointer for his cloud client library… to make it more concise. But yeah with explicit error handling it would still end up saving only one line of code in the callee (which would need to be one new in the caller)
[22:47:20] <Amun-Ra> full*
[22:47:44] *** Joins: kts_ (~kts@103.73.237.127)
[22:47:52] <ioxzev1z> SamuelMarks, if in doubt just go with foo(&bar);
[22:48:13] *** Quits: kts (~kts@103.73.237.5) (Ping timeout: 256 seconds)
[22:48:24] <SamuelMarks> Oh actually I was thinking of the pre-allocated (arena) design pattern and maybe that'll only work if the allocations all happen at the topmost level
[22:48:32] <SamuelMarks> The only weirdness is on stack allocated things
[22:48:48] <SamuelMarks> …and I suppose `strdup` and other helpers with hidden allocations
[22:49:09] <ioxzev1z> SamuelMarks, you either have struct foo foo; or you struct foo foo = malloc(sizeof(*foo)); either way you get an allocation
[22:49:16] <ioxzev1z> uh, *foo on the latter
[22:49:38] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[22:49:46] <SamuelMarks> ioxzev1z - Yes but is it a better design principle to do the allocations at the caller or callee level?
[22:49:53] <SamuelMarks> (or is there no hard-and-fast principle)
[22:50:10] <ioxzev1z> Depends on the situation
[22:50:11] <ski> SamuelMarks : arenas support allocating later in them, no ?
[22:50:12] <ChoHag> The principle is to be consistent and well documented.
[22:50:16] <ioxzev1z> Can you give an example case?
[22:50:29] <SamuelMarks> ioxzev1z - The link above. I'm just trying to be a better C coder
[22:50:37] <SamuelMarks> So more for my existing projects and my new ones
[22:51:02] *** Quits: ckdCreations (~ckdCreati@147.55.133.129) (Quit: Leaving)
[22:51:10] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[22:51:23] <SamuelMarks> ski - Maybe I was thinking scratch-space? - Where you allocate all the memory your program needs at the topmost level and just pass pointers to whats used throughout
[22:51:28] <ioxzev1z> SamuelMarks, not sure about the size of the memebers of that struct but I don't see any real reason to not return if you want to
[22:53:06] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[22:54:37] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[22:54:41] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[22:54:46] <SamuelMarks> ok thx
[22:56:14] <ski> SamuelMarks : hm, maybe ? .. i had <https://en.wikipedia.org/wiki/Region-based_memory_management> in mind, anyway, fwiw
[22:57:01] *** PublicWifi is now known as nou
[22:57:31] *** nou is now known as PublicWiFi
[22:59:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[22:59:44] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[23:00:16] *** Joins: vicfred (~vicfred@user/vicfred)
[23:00:19] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[23:00:25] *** Joins: Dreg (~Dreg@fr33project.org)
[23:00:33] *** saline_retry_ is now known as auk
[23:01:13] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[23:03:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:03:24] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[23:03:55] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[23:04:04] *** Joins: euouae (~euouae@user/euouae)
[23:04:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:04:33] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:04:33] <euouae> Hello, when I want to build .o and .so files in a Makefile for multiple libraries and various programs, what should my targets be?
[23:05:08] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:05:09] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[23:05:12] <euouae> right now what I'm doing is making up a foo.o: and foo.so: target and explicitly naming each dependency but I think it might be possible to automate a bit and improve the design of the makefile
[23:05:58] *** Joins: Soni (~quassel@autistic.space)
[23:06:16] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[23:07:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:08:38] *** Quits: kts_ (~kts@103.73.237.127) (Quit: Konversation terminated!)
[23:08:58] <euouae>  Hmmm I have an idea
[23:10:36] <ioxzev1z> Does it have to be make? SCons is some good buildin'
[23:11:45] <euouae> I'm trying to learn more of gnu make because it's used in a project I'm interested in
[23:12:50] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Quit: Leaving)
[23:18:30] *** Joins: seninha (~seninha@user/seninha)
[23:18:48] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[23:19:38] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[23:20:47] <euouae> For example a target like $(LIBRARIES).o: ${@:o=c} ${@:o=h} doesnt' work
[23:20:59] <euouae> I don't think I can use $@ in the dependencies line. Is there a remedy to this?
[23:21:15] <euouae> here I have LIBRARIES := myfoolib mybarlib etc
[23:21:25] <euouae> with files myfoolib.c myfoolib.h and so on
[23:22:00] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[23:22:06] <euouae> Hmm I think a nonflat directory structure might help. I can put libraries under lib/
[23:22:19] <euouae> and use %.o: %.c %.h etc
[23:23:07] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[23:24:23] *** Joins: duds- (~duds-@user/duds)
[23:24:39] <zdctg[m]> yes there is a way, but I have to re-read the gmake documentation every time i want to do that
[23:25:00] *** Joins: Betal (~Betal@user/betal)
[23:25:18] *** Joins: chomwitt (~chomwitt@2a02:587:dc07:dd00:12c3:7bff:fe6d:d374)
[23:25:35] <zdctg[m]> its something like you write a generic rule for the file extension,
[23:25:36] <zdctg[m]> >.o:
[23:25:36] <zdctg[m]>     $(cc) ...
[23:25:36] <zdctg[m]> erm >.o: or something similar, its really common and in basically all howto's and tutorials on the subject
[23:26:25] *** Joins: shivesh (~shivesh@user/shivesh)
[23:28:49] <euouae> so in %.o: %.c am I making every .o file depend on _all_ source files or is there a correspondence where foo.o depends on foo.c only?
[23:29:39] <zdctg[m]> I try to avoid ever using make/autoconf/etc if I can help it and every time I can't I have to re-read all of the documents on it; I'm not much help I'm afraid, sorry
[23:29:47] <ioxzev1z> You might get better help in #workingset
[23:30:28] <zdctg[m]> well I think when you say %.o: %.c you're saying all source files unless there is another specific rule for it
[23:31:32] <euouae> zdctg[m]: for what it's worth, I used to do this too but now I'm resorting to writing my own personal notes
[23:31:54] <fizzie> In `%.o: %.c` the % does mean the same string on both sides of that rule (targets and perquisites).
[23:31:57] <euouae> when you look up stuff you waste valuable time and learn less than writing notes. There's a balance but right now I'm in note-mode
[23:32:05] <euouae> fizzie, thank you
[23:32:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:34:06] *** Quits: ipgd (~IPGD@180.254.226.48) (Read error: Connection reset by peer)
[23:35:35] <fizzie> GNU make also has a variant of that (called a "static pattern rule") where `foo.o bar.o baz.o: %.o: %.c` introduces rules to make foo.o from foo.c, bar.o from bar.c and baz.o from baz.c, but *not* a general rule to make anything.o from anything.c.
[23:36:03] <euouae> nice
[23:36:06] <euouae> good stuff fizzie
[23:38:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689) (Ping timeout: 256 seconds)
[23:40:11] *** Quits: calamari (~jjohnston@ip72-217-21-192.ph.ph.cox.net) (Quit: Leaving)
[23:41:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[23:43:14] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:46:27] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[23:47:46] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:29] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:49:30] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
