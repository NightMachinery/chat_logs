[00:08:32] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[00:11:31] *** Joins: badkins (~badkins@136.56.92.199)
[00:17:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[00:32:27] *** Joins: badkins (~badkins@136.56.92.199)
[00:40:39] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[00:40:40] *** Joins: hackeryarn (~hackeryar@2600:1700:139c:1410:bc91:ee07:4755:1ad5)
[00:53:15] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 264 seconds)
[01:00:43] *** evdubs__ is now known as evdubs
[01:07:07] <dpk> so, how much appetite is there for a SRFI of https://gitlab.com/dpk/presrfis/-/tree/master/syntax-keywords ? at present, i don't intend to champion it for R7RS Large (i.e. i would be okay with it being on the ballot, but i don't want to say that it's absolutely the option i'd support and vote for), but it might nonetheless be of interest as an option to consider
[01:07:58] <dpk> a SRFI would likely give it another name, as i don't like define/keyword. define-with-keywords maybe
[01:08:40] <sham1> I'm not clear what this gives above SRFI 89
[01:09:14] <sham1> Well aside from different syntax it seems
[01:09:41] <gwatt> sham1: it can be implemented in vanilla r7rs scheme
[01:09:45] <dpk> well, SRFI 89 is no longer supported by any Scheme implementation and requires a keyword data type whose lexical notation (according to the companion SRFI 88) is incompatible with R7RS small
[01:09:59] <sham1> Hm
[01:10:00] <dpk> whereas, as gwatt says, this works in any R7RS small implementation
[01:10:13] <gwatt> and any r6rs scheme, with a small shim!
[01:11:01] <sham1> Wait, SRFI 88 is incompatible?
[01:11:03] <sham1> Also?
[01:11:41] <dpk> yes, R7RS says that things that look like `this:` are symbols, not keywords. and there is real R7RS small code depending on that property
[01:11:51] <sham1> Huh
[01:11:57] <sham1> That it seems
[01:12:29] <sham1> Couldn't probably use :this either, since that seems to also be a symbol
[01:12:36] <dpk> yes, exactly
[01:12:48] <dpk> the only currently widely used notation for keyword datums we can use and remain backward compatible, if we decide for a keyword datum type distinct from symbols/identifiers at all, is #:this
[01:13:02] <sham1> So basically what Guile does
[01:14:02] <sham1> That does seem reasonable
[01:14:15] <dpk> but Chez and Gambit both think that #:this is an uninterned symbol, not a keyword. that's less of an issue though (implementations can be changed; but R7RS Large must absolutely be compatible with R7RS small)
[01:14:37] <dpk> i'm unclear on what the benefit of having uninterned symbols is in Scheme anyway
[01:14:56] <dpk> but i guess they're unlikely to take them out
[01:14:57] <gwatt> dpk: at least in chez, #:this is reader syntax for (gensym "this")
[01:16:30] <gwatt> I don't know if uninterned symbols are interchangeable with gensyms
[01:16:41] <dpk> actually, i guess uninterned symbols are handy iff you have lisp-transformer (aka unhygienic macros). but people shouldn't use lisp-transformer anyway
[01:16:51] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Quit: Leaving)
[01:17:49] <sham1> And if they do, they probably should just gensym them like you'd do in CL or elisp
[01:18:18] <sham1> Yeah, can't really see a point in uninterned symbols either frankly
[01:19:05] <sham1> Also, it seems that Wingo's website is down due to expired certs
[01:19:32] <dpk> although â€¦ you can embed identifiers (as syntax objects) inside lisp-transformer output, right, not just symbols? so you can use those as gensyms instead. so i still don't get it
[01:22:22] <sham1> I don't get the point of a straight lisp-transformer in Scheme at all. I mean, aside from syntax-case and syntax-rules, there's also er and ir transformers. ir-macro-transformer in particular looks like the kind of code you'd write with CL defmacro or such, but with less gensyms and such
[01:23:54] <sham1> Like yeah, lisp-transformer is extremely simple conceptually, it just gives you the relevant form as an argument and then gives back a new form. But we have hygiene, we can do better than this
[01:24:10] <dpk> lisp-transformer can be implemented in syntax-case (indeed, i think the name comes from an example of using syntax->datum and datum->syntax in the R6RS spec)
[01:24:19] <sham1> Yeah, that's it
[01:24:20] <gwatt> Some people want unhygienic macros.
[01:24:34] <sham1> But we can already break hygiene.
[01:24:39] <dpk> ir-macro-transformer has the problem that expansion takes quadratic time. (that said, i think lisp-transformer in terms of syntax-case does too)
[01:24:55] *** Joins: badkins (~badkins@136.56.92.199)
[01:24:58] <gwatt> Mostly, I think those people conflate "hygiene" for "only syntax-rules and nothing else at all"
[01:25:32] <dpk> yeah, i think a *lot* of the hate on hygiene from CL types comes from the idea that (eq? hygiene syntax-case)
[01:25:40] <dpk> err, *syntax-rules
[01:26:12] <dpk> and syntax-rules really is horrible for anything more than trivial macros. trust me, i've written several
[01:26:40] <gwatt> I also think that with scheme's inability to have fully-qualified names, hygiene is more important. with CL you can reference stuff by package name, IIRC
[01:27:05] <dpk> yes, also a point they miss (and/or conflate with the Lisp-1/Lisp-2 issue)
[01:27:23] <gwatt> There is that too
[01:27:42] *** Joins: livoreno (~livoreno@user/notzmv)
[01:28:03] <sham1> I mean, the Lisp-2 thing does save them from silly things like (let ((set! display)) (macro-that-expands-to-some-set!)) but that's of course not the only thing hygiene gives you
[01:28:53] <sham1> (And of course they still have flet and labels which can shadow function names, although that's also undefined behaviour to do for standard functions)
[01:29:00] <dpk> i've also seen the argument that Scheme 'only needs hygiene because it's a Lisp-1', which is exactly backwards: CL chose to stick with Lisp-2 semantics because hygienic macros didn't really exist in 1984 (see Mitchell and Wand)
[01:29:22] <dpk> err. Clinger and Wand
[01:29:38] <dpk> i need to sleep ðŸ˜…
[01:30:35] <gwatt> I think that there are some conveniences aobut being a lisp-2, such as being able to have a function parameter named "list" without shadowing the "list" procedure
[01:32:41] <dpk> yeah, i don't really know which i prefer, in the sense of which one i'd pick if i were designing a Lisp myself from scratch
[01:33:06] <sham1> There is, although you also get things like needing to specially quote symbols representing function names in certain cases to distinguish them from symbols representing variables of the same name (#' vs ') and things like (funcall) to do higher-order stuff
[01:33:08] <dpk> *probably* Lisp-1, i think?
[01:33:19] <sham1> Both systems have their merrits ofc
[01:33:27] <sham1> merits*
[01:36:05] <dpk> Python seems to do just fine with a single namespace, and it still doesn't even have proper shadowing semantics iirc. despite also having a function called 'list'
[01:36:25] <sham1> IIRC functions aren't properly lexical
[01:37:08] <sham1> Or rather that things can get very weird with the scope in Python
[01:41:48] *** Quits: gerund (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (Remote host closed the connection)
[01:45:15] *** Joins: seninha (~seninha@user/seninha)
[01:52:03] <Zipheir> Python's scope is a mess.
[02:07:08] *** Joins: sluigi (~sluigi@2603-900a-1600-ba00-413a-d0a0-1d2f-7111.inf6.spectrum.com)
[02:08:35] <sham1> The fact that it has a global and a nonlocal keyword says a lot
[02:11:02] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:97ae:3c61:7571:13b6) (Ping timeout: 256 seconds)
[02:23:12] *** Parts: sluigi (~sluigi@2603-900a-1600-ba00-413a-d0a0-1d2f-7111.inf6.spectrum.com) ()
[02:25:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 264 seconds)
[02:29:15] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[02:29:36] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:30:12] *** Joins: badkins (~badkins@136.56.92.199)
[02:38:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[02:45:27] *** Quits: hackeryarn (~hackeryar@2600:1700:139c:1410:bc91:ee07:4755:1ad5) (Ping timeout: 264 seconds)
[02:55:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[03:00:20] *** Joins: badkins (~badkins@136.56.92.199)
[03:01:16] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[03:01:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:06:35] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:14:25] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:18:22] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[03:22:30] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:26:16] *** Joins: aeth_ (~aeth@user/aeth)
[03:26:22] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[03:26:24] *** aeth_ is now known as aeth
[03:31:20] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:37:12] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:37:29] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[03:39:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[03:42:58] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[03:53:40] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:55:55] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 268 seconds)
[03:59:45] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:efae:5eee:645a:4a3c) (Remote host closed the connection)
[04:02:21] *** Joins: wnklmnn (~wnklmnn@ip-95-223-78-199.hsi16.unitymediagroup.de)
[04:07:03] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 264 seconds)
[04:15:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:21:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:26:57] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:32:41] *** Joins: mononote (~mononote@user/mononote)
[04:37:03] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[04:39:27] *** Quits: wnklmnn (~wnklmnn@ip-95-223-78-199.hsi16.unitymediagroup.de) (Quit: Leaving)
[04:39:53] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[04:41:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:46:01] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:47:06] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:56:18] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:56:33] *** Joins: badkins (~badkins@136.56.92.199)
[04:56:36] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:57:20] *** Joins: badkins (~badkins@136.56.92.199)
[05:00:56] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:02:31] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[05:09:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:11:17] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Read error: Connection reset by peer)
[05:13:09] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[05:14:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:19:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:21:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[05:24:06] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 245 seconds)
[05:26:34] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[05:45:17] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[05:49:07] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[05:56:39] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[05:56:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:03:09] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:11:46] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[06:17:35] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Remote host closed the connection)
[06:18:07] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[06:20:47] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Ping timeout: 264 seconds)
[06:20:55] *** Joins: wasa (~wasamasa@chicken/contributor/wasamasa)
[06:35:40] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:40:51] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:47:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:58:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:59:20] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[07:03:29] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 250 seconds)
[07:04:11] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:04:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:08:37] *** Joins: hiruji (~hiruji@user/hiruji)
[07:19:05] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:19:56] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[07:26:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:30:55] *** Joins: livoreno (~livoreno@user/notzmv)
[07:36:21] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:42:13] *** Joins: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d)
[07:56:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 264 seconds)
[07:56:54] <ns12> Scheme must steal market share from Python.
[07:59:42] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:00:19] <amazigh> hello all :)
[08:00:26] <amazigh> ns12: #true
[08:00:46] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[08:04:22] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:06:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:09:49] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[08:17:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:22:54] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:31:36] *** Joins: badkins (~badkins@136.56.92.199)
[08:34:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:35:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[08:39:49] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:40:22] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:40:30] <lockywolf> steal? perhaps rather rob?
[08:49:57] *** Quits: phossil (~tophullyt@162.213.177.125) (Quit: Leaving)
[08:50:14] *** Joins: phossil (~tophullyt@162.213.177.125)
[08:51:51] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[08:55:03] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 264 seconds)
[08:58:24] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[09:02:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:03:35] *** Quits: lazr (~lazr@45.76.248.123) (Ping timeout: 256 seconds)
[09:40:11] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[10:15:36] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[10:18:57] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 256 seconds)
[10:29:10] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[11:03:41] <ns12> Which Python features should Scheme absorb?
[11:04:32] *** Joins: badkins (~badkins@136.56.92.199)
[11:05:38] <ecraven> we could create scheme 2, which is slightly-but-totally incompatible :P
[11:06:34] <sjamaan> ns12: The big ecosystem of pre-written packages ;)
[11:06:58] <ns12> ecraven: "slightly-but-totally incompatible" describes practically all Scheme implementations. Scheme 2 will not be special in that area :p
[11:06:59] <sjamaan> ns12: Or maybe even better, the widespread corporate acceptance and support
[11:07:57] <ns12> Something like PyPI for Scheme would be nice.
[11:08:16] <ecraven> ns12: that isn't quite true, the main problem I've run into is *library* inconsistencies, not syntax (like python)
[11:08:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[11:08:56] <ns12> Could you give some examples?
[11:09:48] <ns12> "Library inconsistencies" as in procedures that work differently in different Scheme implementations?
[11:10:03] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[11:13:47] *** Joins: gproto10 (~gproto23@user/gproto23)
[11:16:02] <ecraven> yes, or procedures that just don't exist in other implementations
[11:16:35] <ecraven> `sort' for example has a different order of parameters in different implementations, and some call it `sort', some `list-sort'
[11:16:42] <mdhughes> Oh, there's syntax incompatibilities. CHICKEN's DSSSL optional keywords are awesome, but not usable elsewhere. Racket & Gerbil are full of crazy syntax you can't recreate without a whole new reader.
[11:17:10] <ecraven> indeed, but those are all *extensions* to r7rs
[11:17:12] <amazigh> ecraven: re scheme 2 :D
[11:17:13] <ecraven> or even r6rs ;)
[11:17:23] <mdhughes> Or R5, for CHICKEN.
[11:18:51] <amazigh> I agree with sjamaan pre-written packages (possibly with a lot of choice, but with established frameworks), and wider corporate acceptance, and support.
[11:19:16] <Zipheir> Ignore the language, adopt its popularity...
[11:19:54] <amazigh> The thign is that the low level of the people who create the actual code ie. programmers, most of them are clueless and ignorant about LISP and even more some about Scheme
[11:20:38] <ecraven> well, why does Scheme *need* popularity?
[11:20:51] <sjamaan> ecraven: I'd like to use it daily
[11:20:51] <Zipheir> Python has anemic-at-best support for the functional idioms that are common in most Scheme programs.  It's sort of comparing apples and oranges.
[11:20:58] <ecraven> sjamaan: so do that ;)
[11:20:59] <amazigh> You could go the Go route, and build giant company that inpsire confidence, then sell the Schemey thing but that is arguably more difficult that merely building the libraries and pushing them into the tubs
[11:21:26] <amazigh> and wait.
[11:21:29] <sjamaan> ecraven: That's not really possible if there's no corporate support for it.  I don't do a lot of programming besides my work nowadays
[11:22:57] <amazigh> there two ways 0) convince engineers Scheme is the way 1) Convince management Scheme is the way
[11:23:00] <amazigh> both are impossible.
[11:23:02] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:23:16] <dpk> do we really want popularity?
[11:23:34] <sham1> Avoid success at all cost
[11:23:39] <dpk> i think Haskell appeals to the comparatively small crowd it has precisely because ofÂ â€¦Â right, exactly
[11:23:41] <mdhughes> Or the other solution: Don't worry about it. Use it for your own projects, ship something. "Secret weapon" as PG says.
[11:23:54] <sjamaan> dpk: Note that I never said popularity, but corporate support and acceptance
[11:23:59] <ecraven> it all depends on your job, but I'm using Scheme for a lot of "one-time" things, like generating some graphs or investigating whether something might work... the production code unfortunately isn't Scheme, but maybe some day I'll convince them..
[11:24:02] <amazigh> haskell has corporate support.
[11:24:14] <dpk> yes, it would be nice to have some university or corporate money
[11:24:15] <sjamaan> Indeed, and it's not exactly "popular"
[11:24:31] <dpk> jcowan and M N-W recently discussed possibilities for getting further work on R7 Large funded
[11:24:35] <ecraven> well, given the splintering in implementations and standards we have now, how would more money help?
[11:24:49] <dpk> i don't think it would be impossible, except that nobody on the R7 team is in a position to get it
[11:24:50] <mdhughes> Corporations are just going to turn on you when the next management fad runs thru.
[11:24:59] <ecraven> you would just get better racket, or chicken, or guile, but would it be better Scheme?
[11:25:02] <amazigh> dpk: get what?
[11:25:07] <dpk> money!
[11:25:14] <dpk> grants, sponsorship, etc.
[11:25:21] <amazigh> dpk: there is european for european grant for standards.
[11:25:29] <amazigh> mnw could ask for the money
[11:26:11] <amazigh> well, MNW could get the money as part of their university position to work on the R7RS standard.
[11:26:24] <dpk> he's a mathematics professor, though, not a computer science professor
[11:27:03] <dpk> while German universities do, according to the joke, do more mathematics in the computer science department than they do in the actual mathematics department, the inverse isn't true
[11:27:05] <amazigh> well... for what I have seens he is one of the most knowledgeable I know
[11:27:19] <amazigh> ok got it
[11:28:27] <amazigh> I went through Chez code somewhat, emacs was highlight chocked over '|\|
[11:28:32] <dpk> yeah, if M N-W were a professor of mathematics in a US university, he could probably do it. but the German system is a *lot* less appreciative of interdisciplinary work and work for a non-academic audience
[11:30:43] <amazigh> sorry for the off-topic message, I got it dpk.
[11:30:44] <Zipheir> You must think only in ze dezignated time and zone!
[11:31:00] <dpk> but as i said, i think we *could* do it, but it would need at least one person to take risks with their career which people are understandably unwilling to take
[11:31:12] <amazigh> I did..
[11:31:26] <dpk> also, jcowan would be the most obvious person to fund as the chair of WG2, but he's not in Europe, so the European grant is presumably out
[11:31:39] <amazigh> but I do not think the grant will allow me to live peaceful without side jobs I can't get. Also, I am not enough knowledgeable.
[11:32:07] <amazigh> agreed.
[11:32:20] <dpk> yes, with all due respect to you and your contributions, i think it would have to be someone who is closer to the centre of the R7 process
[11:32:26] <wingo> sham1: tx for note, fixed
[11:32:30] <dpk> i'm also not the right person for the same reason
[11:32:39] <amazigh> suresure
[11:32:48] <amazigh> s/suresure/sure/ 
[11:33:35] <sham1> wingo: seeing as you use Let's Encrypt, using one of the Acme-scripts for automatically switching the certs when needed would make sense
[11:33:52] <wingo> i have that, it's just that nginx doesn't automatically pick it up
[11:33:53] <amazigh> Tho, I am not sure how is defined the center of R7 process, I would prefer to say "very knowledgeable about Scheme, and in particular R7"
[11:33:58] <sham1> I see
[11:34:09] <wingo> so i have to restart nginx.  very silly...
[11:34:35] *** Quits: gabot (~gabot@lambda.ccs.neu.edu) (Ping timeout: 264 seconds)
[11:34:46] *** Joins: ns129 (~ns12@user/ns12)
[11:35:15] <amazigh> Also, most the heavy thinking could be done or is done by MNW and jcowan already.
[11:35:35] <dpk> doesn't SIGHUP make it reload config, including certificates? (never used nginx but that seems to be something of a standard behaviour for web servers)
[11:36:17] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 250 seconds)
[11:36:17] *** ns129 is now known as ns12
[11:36:20] <dpk> (i also enjoyed the irony of not being able to link people to your rant about SSL because your SSL configuration is brokenÂ â€¦)
[11:37:24] <sham1> Depending on the rant it either proves the point or is a counter-example
[11:37:59] <dpk> this one https://wingolog.org/archives/2014/10/17/ffs-ssl
[11:43:37] <wasa> lol
[11:43:46] <wasa> things have somewhat improved since then
[11:43:58] <wasa> but I still don't use HSTS because of the catastrophic failure modes
[11:44:32] <amazigh> wasamasa was cut in half
[11:44:37] * amazigh nods
[11:46:09] <Zipheir> The Darth Maul of #scheme?
[11:49:20] *** Joins: gabot (~gabot@lambda.ccs.neu.edu)
[11:49:34] <Zipheir> I'll stop trolling and go to bed. :-)
[12:14:35] <amazigh> go to bed Zipheir 
[12:17:22] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[12:29:52] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[12:33:23] *** wasa is now known as wasamasa
[12:43:46] *** Quits: apg (~apg@71-34-106-187.ptld.qwest.net) (Ping timeout: 260 seconds)
[12:52:03] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 264 seconds)
[12:54:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[12:56:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:26:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[13:30:29] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[13:32:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[13:32:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:33:08] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:46:54] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:52:35] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:58:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[14:05:15] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 264 seconds)
[14:26:01] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[14:46:28] *** Joins: mononote (~mononote@user/mononote)
[15:06:22] *** Joins: badkins (~badkins@136.56.92.199)
[15:14:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[15:25:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:42:30] *** Quits: abralek (~user@j74182.upc-j.chello.nl) (Ping timeout: 260 seconds)
[15:45:14] *** Joins: notzmv (~zmv@user/notzmv)
[15:48:11] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[15:48:14] *** Joins: abralek (~user@j74182.upc-j.chello.nl)
[15:51:59] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 264 seconds)
[15:55:39] *** Quits: abralek (~user@j74182.upc-j.chello.nl) (Ping timeout: 264 seconds)
[15:57:45] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:04:13] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:04:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9c8e:a51b:7850:c853)
[16:04:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9c8e:a51b:7850:c853) (Changing host)
[16:04:57] *** Joins: skapata (~Skapata@user/skapata)
[16:25:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:26:03] <amazigh> dpk et al. at is your stance / position regarding generics?
[16:26:19] <amazigh> in particular regarding keyword arguments?
[16:27:03] <amazigh> I wanted to work on it, then I figured predicate combinators would be better as standalone SRFI. Tho, I may go the route of a all-in-one SRFI with several libraries.
[16:27:38] <amazigh> (Also need to fix JSON srfi, with another SRFI)
[16:32:06] <dpk> as i said the other day, i think generics should be punted out to third-party libraries, and R7RS should just provide the tools needed to implement them efficiently
[16:32:35] <dpk> we should not break with the historic Scheme preference for monomorphic procedures
[16:35:07] <dpk> but, since apparently our current voting procedure tends to just accept anything that ends up on the ballot, if you did make a SRFI for it, i'm sure it would get in
[16:35:42] <dpk> (anything, that is, unless it's both important but in a way Joe Programmer can't understand, like the title case procedures. then they get voted down because pfft, who speaks Greek anyway)
[16:36:32] <amazigh> ah oh uh
[16:36:51] <amazigh> I do not want press the editor or anyone to include any of my SRFI.
[16:37:26] <dpk> (i was commenting more on the current R7RS process than on your intentions)
[16:38:23] <amazigh> Regarding generics in particular, some people keep bringing it back into the conversation; and similarly to SRFI-167, it will be useful for the conversation to have some further material on the subject.
[16:38:43] <amazigh> There is already Chicken's fast generic, and chibi generics...
[16:39:36] <Plazma> so do most of you use scheme for fun?
[16:39:48] *** Joins: seninha (~seninha@user/seninha)
[16:40:21] <amazigh> And to be completly honest, when I started working on generic indeed, I found it would be great if we had a lambda* that is superset of case-lambda, match-lambda and generics; but idk.
[16:41:40] <amazigh> Plazma: everybody I know from this channel does Scheme for some kind of fun 
[16:42:00] <Plazma> makes sense, wasn't sure like if it's use for anything more production oriented or non academic/professional
[16:42:06] <amazigh> The only two person I know are paid to do Schme are in east asia.
[16:42:13] <Plazma> ahh
[16:42:21] <amazigh> Plazma: people use it in production tho
[16:42:28] <Plazma> i know there are quite a bit of jobs using ML or even some common lisp, etc
[16:42:28] <amazigh> rudybot: botsnack
[16:42:29] <rudybot> mmm ... cheesesteak ...
[16:43:05] *** Joins: civodul (~user@guix/contributor/civodul)
[16:43:13] <amazigh> Chez Scheme was bought by Cisco made open-source, and they also have a private fork.
[16:43:37] <amazigh> So, it is used in production and large settings too; but those people are not around afaik
[16:44:15] <amazigh> By the way, I picking Chez Scheme because it is the easier to read; chicken, bigloo, gambit also have "industrial" use.
[16:44:23] <amazigh> Racket too
[16:44:26] <Plazma> oh nice cisco
[16:44:33] <Plazma> i work with cisco gear for 15 years
[16:45:10] <Plazma> i do quantum computing research and there is one sdk/backend that uses some lisp dialect, i think it's common lisp
[16:45:22] <amazigh> Plazma: what are you up to?... I was going to ask.
[16:45:30] <Plazma> i do a lot o things to be honest
[16:45:51] <Plazma> recently started part-time teaching in our uni CS department, and it got me thinking about SCIP
[16:46:28] <Plazma> never had a chance to read it much myself, and not sure how relevant/useful it would be to myself now, but it still piques my interest
[16:46:43] <amazigh> Hmm... some people know a book like that around here.
[16:46:53] <Plazma> SICP maybe it is
[16:46:58] <Plazma> i'm sure you know what i mean
[16:47:14] <amazigh> Structre and Interpretation of Computer Progams
[16:47:30] <Plazma> ah yea SICP 
[16:47:35] <amazigh> By the way, read Software Designed for Flexiblity, that the same authors, and arguably much easier to *read*
[16:47:42] <amazigh> sickpee
[16:48:04] <amazigh> IIRC that said seek pee or something like that.
[16:48:07] <Plazma> ah
[16:48:12] <Plazma> i hsould hopefully finish my CS phD next year
[16:48:18] <amazigh> or sick pee I am not native anyway
[16:48:29] <amazigh> the topic is quantum computing?
[16:48:32] <Plazma> yes
[16:48:58] <amazigh> so you found a COVID vaccine?
[16:49:01] <Plazma> nah
[16:49:02] <amazigh> :D
[16:49:09] <Plazma> those rich pharam guys found that
[16:49:24] <Plazma> but somone from our uni helped greatly contribute to one of the vaccines, or a graduate i guess
[16:49:47] <amazigh> I helped and got a certifacate for being a COVID-19 helper :)
[16:49:56] <Plazma> oh wow congrats
[16:50:12] <amazigh> I created a small javascript app to display a SQL schema... don't ask why they did not use an existing tool... because idk.
[16:50:47] <Plazma> wow 
[16:50:49] <Plazma> nice
[16:51:39] <amazigh> I remember it was lol. Other people were like: "let's re-use an existing tool" then next monday, I pushed the app lol
[16:51:47] <Plazma> hah
[16:51:55] <amazigh> anywa
[16:53:06] <amazigh> today I would have done it with chicken spock.
[16:53:54] <rgherdt> Plazma: I started reading SICP before studying CS, but only finished it after my CS degree. The book is awesome, I'm sure you will find interesting ideas there that may be new to you.
[16:54:09] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[16:54:22] <rgherdt> but I don't know your background, obviously :)
[16:54:23] <amazigh> wrapping your head around scheme teaching material can take a PhD i guess
[16:54:45] <amazigh> just considering *existing* theaching material
[16:54:58] <rgherdt> I will for sure reread it someday
[16:55:26] <rgherdt> at least the last chapters
[16:55:32] <amazigh> If you already know coding SDF is better imo 
[16:55:35] <Plazma> rgherdt: that's actually what i wanted to hear , don't tease me :D
[16:55:58] <Plazma> rgherdt: it's gotten so much praise and accolades and sadly it's not used much but a lot of folks i spend time with reference it
[16:56:05] <amazigh> There is a Scheme Workshop paper about SICP, IIRC, the 2020 year
[16:56:16] <Plazma> but it's "sold" basically as a complete intro, and i did not want it to be too rudimentary
[16:56:34] <amazigh> that's lockywolf work :)
[16:58:24] <rgherdt> Plazma: it is an intro, but approaches so many areas in a beautiful way that is not common in regular CS courses. The nice thing is that you learn new concepts by writing and adapting an interpreter and a compiler for it. Like logic programming, stream programming etc.
[16:59:49] <rgherdt> like, at the university I was told how prolog works, and did some exercises with it. In SICP you have to implement an interpreter to achieve that kind of programming
[17:00:08] <Plazma> oh nice
[17:00:09] <lockywolf> https://xkcd.com/844/
[17:00:12] <Plazma> i do have a book on prolog
[17:00:21] <Plazma> but never used it yet
[17:00:29] <Plazma> so many things to tinker with so little time
[17:06:32] <jcowan> People in NYC and St. Petersburg should be treated as honorary Europeans.
[17:09:08] <amazigh> lockywolf: :)
[17:09:25] <amazigh> jcowan: good idea ;)
[17:10:09] <jcowan> for grant purposes etc.
[17:11:50] <Franciman> what did moscow do wrong? :<
[17:19:49] *** mdhughes_ is now known as mdhughes
[17:19:56] *** Joins: livoreno (~livoreno@user/notzmv)
[17:21:03] <jcowan> It wasn't on the Baltic.  
[17:24:17] <dpk> don't forget KÃ¶nigsbâ€¦ i mean, Kaliningrad
[17:26:03] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:26:30] *** Joins: gproto10 (~gproto23@user/gproto23)
[17:27:55] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 256 seconds)
[17:28:35] *** Joins: hiruji (~hiruji@user/hiruji)
[17:35:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[17:43:02] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[17:44:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[17:55:31] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[17:57:55] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[17:59:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:12:51] *** Quits: zwr (~zwr@2804:d45:b966:fb00:8853:5f49:ed58:b880) (Ping timeout: 245 seconds)
[18:21:01] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:38:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d) (Remote host closed the connection)
[18:39:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888)
[18:40:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888) (Remote host closed the connection)
[18:41:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3)
[18:46:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:47:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3) (Ping timeout: 268 seconds)
[18:47:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:48:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:56:49] *** Joins: badkins (~badkins@136.56.92.199)
[18:57:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:01:39] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[19:02:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f)
[19:03:04] *** Joins: badkins (~badkins@136.56.92.199)
[19:05:45] *** Joins: zwr (~zwr@2804:d45:b966:fb00:143e:d40:ce1d:b6a4)
[19:11:55] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:30:08] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f) (Remote host closed the connection)
[19:30:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1)
[19:38:47] <amazigh> lockywolf: great
[19:41:25] <amazigh> wdyt about a lambda* that is superset of case-lambda, match-lambda and generics?
[19:46:09] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[19:47:13] *** Quits: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1) (Quit: Leaving)
[19:47:40] *** Joins: hackeryarn (~hackeryar@2600:1700:139c:1410:5176:2144:3f50:4582)
[19:51:20] <jcowan> amazigh: And when the next hotness comes along, like currying, then what?
[19:52:57] <amazigh> ah hu ho ;)
[19:53:15] <amazigh> I can name it otherwise. nvm.
[19:53:32] <amazigh> I mean the feature-set make sense to me, but I do not need to ask everyone about it.
[20:05:27] <dpk> case-match-lambda*
[20:06:43] <dpk> case-lambda with a guard clause as in syntax-case would be nifty, albeit it would require explicit begin (which, imo, lambda should require anyway, but then i'm off in fantasy Lisp world again)
[20:09:00] * dpk looks up what match-lambda is
[20:10:21] <dpk> okay, but combining match-lambda (one arg only) and case-lambda (arbitrary lists of arguments) would require consing the argument list in all cases, no?
[20:10:36] <dpk> oh, i see there's also match-lambda*
[20:10:58] <dpk> (i'm in the Guile reference manual here, which i assume is talking about something not entirely dissimilar to what you want)
[20:11:04] <amazigh> yes
[20:11:08] <amazigh> looking too
[20:13:17] <amazigh> given s/lambda*/epsilon, one could codethings like (epsilon (((? my-predicate-one? obj-one) (? my-predicate-two? obj-two)) (frob obj-one obj-two)) ...)
[20:13:25] <amazigh> where ... are more clause
[20:13:48] <amazigh> but another interesting behavior is to allow to extend the definition such a generics do
[20:14:28] <amazigh> so one ends up with (define something (epsilon my-epislon (((? my-predicate-one? obj-one) (? my-predicate-two? obj-two)) (frob obj-one obj-two)) ...))
[20:14:50] <amazigh> epislon will register the clauses against my-epislon, want return /something/
[20:15:43] <amazigh> the advantage is that the match syntax is already known.
[20:16:16] <amazigh> The fact that epsilon (or epsilon!) change my-epsilon, is also known in some oop approach with scheme 
[20:16:43] <amazigh> s/want return/return/
[20:16:59] <amazigh> s/want return/and/
[20:17:08] <amazigh> meh!
[20:17:26] *** Quits: sdu (~doo@185.44.146.165) (Read error: Connection reset by peer)
[20:18:23] *** Joins: sdu (~doo@185.44.146.165)
[20:21:15] *** Joins: vats (~vats@103.158.91.216)
[20:25:25] <Zipheir> Speaking of lambda*, I've written up a SRFI for it, but Hemann has yet to respond to my request to publish his syntax-rules implementation of it.
[20:26:13] <Zipheir> s/SRFI/pre-SRFI/
[20:26:53] <amazigh> is lambda* SRFI online?
[20:26:54] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:31:13] <Zipheir> My pre-SRFI hasn't been posted anywhere yet.
[20:32:21] <Zipheir> Hemann & Friedman's paper is at http://www.schemeworkshop.org/2013/papers/HemannCurrying2013.pdf
[20:37:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[20:37:51] *** Joins: seninha_ (~seninha@user/seninha)
[20:38:28] *** Joins: ns124 (~ns12@user/ns12)
[20:40:19] *** Joins: X-Scale` (~ARM@92.250.97.112)
[20:41:40] *** Joins: m1dnight_ (~christoph@christophe.dev)
[20:46:43] *** Quits: hackeryarn (~hackeryar@2600:1700:139c:1410:5176:2144:3f50:4582) (*.net *.split)
[20:46:43] *** Quits: zwr (~zwr@2804:d45:b966:fb00:143e:d40:ce1d:b6a4) (*.net *.split)
[20:46:43] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (*.net *.split)
[20:46:43] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[20:46:43] *** Quits: mdhughes (~mdhughes@user/mdhughes) (*.net *.split)
[20:46:43] *** Quits: gabot (~gabot@lambda.ccs.neu.edu) (*.net *.split)
[20:46:43] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[20:46:44] *** Quits: X-Scale (~ARM@92.250.97.112) (*.net *.split)
[20:46:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[20:46:44] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[20:46:44] *** Quits: theruran_ (uid11305@id-11305.hampstead.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[20:46:44] *** Quits: flatwhatson (~flatwhats@115-64-234-110.tpgi.com.au) (*.net *.split)
[20:46:45] *** Quits: samth (sid14502@id-14502.ilkley.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[20:46:45] *** ns124 is now known as ns12
[20:46:58] *** X-Scale` is now known as X-Scale
[20:47:04] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:47:37] *** Joins: flatwhatson (~flatwhats@115-64-234-110.tpgi.com.au)
[20:49:06] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 245 seconds)
[20:49:31] <Zipheir> amazigh: Don't worry about the name.  The first thing I added to the Issues is "lambda* is probably an unsatisfactory name".
[20:50:37] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[20:50:52] <Zipheir> Marc Feeley already used 'lambda*' in SRFI 89, and I'm sure there are dozens of ad-hoc lambda* forms floating around.
[20:52:55] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[20:52:55] *** Joins: hackeryarn (~hackeryar@2600:1700:139c:1410:5176:2144:3f50:4582)
[20:52:55] *** Joins: zwr (~zwr@2804:d45:b966:fb00:143e:d40:ce1d:b6a4)
[20:52:55] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[20:52:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:52:55] *** Joins: theruran_ (uid11305@id-11305.hampstead.irccloud.com)
[20:52:55] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[20:52:55] *** Joins: samth (sid14502@id-14502.ilkley.irccloud.com)
[20:53:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Max SendQ exceeded)
[20:53:22] *** Joins: gabot (~gabot@lambda.ccs.neu.edu)
[20:53:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[21:02:41] *** Quits: vats (~vats@103.158.91.216) (Ping timeout: 256 seconds)
[21:05:28] <sham1> Ad-hoc half-specified bug-ridden reimplementation of half of lambda*
[21:14:54] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:16:06] *** Quits: X-Scale (~ARM@92.250.97.112) (Ping timeout: 265 seconds)
[21:17:32] *** X-Scale` is now known as X-Scale
[21:27:54] *** Joins: badkins (~badkins@136.56.92.199)
[21:32:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[21:40:37] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:44:36] *** Joins: apg (~apg@71-34-106-187.ptld.qwest.net)
[21:51:08] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[22:26:50] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[22:27:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:28:19] *** Joins: X-Scale` (~ARM@31.22.167.95)
[22:29:15] *** X-Scale` is now known as X-Scale
[22:30:15] *** Joins: badkins (~badkins@136.56.92.199)
[22:35:03] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:40:27] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:50:12] *** Quits: theruran_ (uid11305@id-11305.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:55:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[22:57:25] *** Joins: aeth (~aeth@user/aeth)
[23:12:40] *** Joins: vats (~vats@103.158.91.123)
[23:18:26] *** Joins: badkins (~badkins@136.56.92.199)
[23:22:28] *** Joins: gproto10 (~gproto23@user/gproto23)
[23:31:52] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
